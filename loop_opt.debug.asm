
./zig-cache/test:     file format elf64-x86-64


Disassembly of section .text:

0000000000203000 <assert>:
/// This function invokes undefined behavior when `ok` is `false`.
/// In Debug and ReleaseSafe modes, calls to this function are always
/// generated, and the `unreachable` statement triggers a panic.
/// In ReleaseFast and ReleaseSmall modes, calls to this function can be
/// optimized away.
pub fn assert(ok: bool) void {
  203000:	55                   	push   rbp
  203001:	48 89 e5             	mov    rbp,rsp
  203004:	48 83 ec 10          	sub    rsp,0x10
  203008:	40 88 f8             	mov    al,dil
  20300b:	24 01                	and    al,0x1
  20300d:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
    if (!ok) {
  203010:	8a 45 ff             	mov    al,BYTE PTR [rbp-0x1]
  203013:	84 c0                	test   al,al
  203015:	75 12                	jne    203029 <assert+0x29>
  203017:	eb 00                	jmp    203019 <assert+0x19>
  203019:	48 8d 3d 10 23 02 00 	lea    rdi,[rip+0x22310]        # 225330 <__unnamed_1>
  203020:	31 c0                	xor    eax,eax
  203022:	89 c6                	mov    esi,eax
        // In ReleaseFast test mode, we still want assert(false) to crash, so
        // we insert an explicit call to @panic instead of unreachable.
        // TODO we should use `assertOrPanic` in tests and remove this logic.
        if (builtin.is_test) {
            @panic("assertion failure");
  203024:	e8 97 00 00 00       	call   2030c0 <panic>
    if (!ok) {
  203029:	eb 00                	jmp    20302b <assert+0x2b>
pub fn assert(ok: bool) void {
  20302b:	48 83 c4 10          	add    rsp,0x10
  20302f:	5d                   	pop    rbp
  203030:	c3                   	ret    
  203031:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  203038:	0f 1f 84 00 00 00 00 
  20303f:	00 

0000000000203040 <loop_opt>:
        val = @atomicLoad(u32, &gValue, AtomicOrder.SeqCst);
    }
    return val;
}

test "loop_opt" {
  203040:	55                   	push   rbp
  203041:	48 89 e5             	mov    rbp,rsp
  203044:	48 83 ec 40          	sub    rsp,0x40
  203048:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
  20304c:	b8 4e 61 bc 00       	mov    eax,0xbc614e
  203051:	89 c6                	mov    esi,eax
    var prng = std.rand.DefaultPrng.init(12345678);
  203053:	e8 a8 01 00 00       	call   203200 <Xoroshiro128_init>
  203058:	48 8d 7d d0          	lea    rdi,[rbp-0x30]
  20305c:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  203060:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  203064:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  203068:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  20306c:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  203070:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    setValue(prng.random.scalar(u32));
  203074:	e8 f7 01 00 00       	call   203270 <Random_scalar>
  203079:	89 c7                	mov    edi,eax
  20307b:	e8 70 02 00 00       	call   2032f0 <setValue>
  203080:	bf 01 00 00 00       	mov    edi,0x1
  203085:	b8 e8 03 00 00       	mov    eax,0x3e8
  20308a:	89 c6                	mov    esi,eax

    var new_value = waitWhileExpectedValue(1, 1000);
  20308c:	e8 7f 02 00 00       	call   203310 <waitWhileExpectedValue>
  203091:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
    warn("new_value={}\n", new_value);
  203094:	8b 7d cc             	mov    edi,DWORD PTR [rbp-0x34]
  203097:	e8 34 03 00 00       	call   2033d0 <warn>
    assert(new_value != 1);
  20309c:	83 7d cc 01          	cmp    DWORD PTR [rbp-0x34],0x1
  2030a0:	0f 95 c1             	setne  cl
  2030a3:	0f b6 f9             	movzx  edi,cl
  2030a6:	e8 55 ff ff ff       	call   203000 <assert>
  2030ab:	31 c0                	xor    eax,eax
  2030ad:	66 89 c2             	mov    dx,ax
test "loop_opt" {
  2030b0:	66 89 d0             	mov    ax,dx
  2030b3:	48 83 c4 40          	add    rsp,0x40
  2030b7:	5d                   	pop    rbp
  2030b8:	c3                   	ret    
  2030b9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

00000000002030c0 <panic>:
// have to be added in the compiler.

const builtin = @import("builtin");
const std = @import("std");

pub fn panic(msg: []const u8, error_return_trace: ?*builtin.StackTrace) noreturn {
  2030c0:	55                   	push   rbp
  2030c1:	48 89 e5             	mov    rbp,rsp
  2030c4:	48 83 ec 30          	sub    rsp,0x30
  2030c8:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  2030cc:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
        // TODO: fix panic in zen.
        builtin.Os.freestanding, builtin.Os.zen => {
            while (true) {}
        },
        else => {
            const first_trace_addr = @ptrToInt(@returnAddress());
  2030d0:	48 8b 75 08          	mov    rsi,QWORD PTR [rbp+0x8]
  2030d4:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
            std.debug.panicExtra(error_return_trace, first_trace_addr, "{}", msg);
  2030d8:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  2030dc:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  2030e0:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  2030e4:	c6 45 f8 01          	mov    BYTE PTR [rbp-0x8],0x1
  2030e8:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  2030ec:	48 89 f7             	mov    rdi,rsi
  2030ef:	48 89 c6             	mov    rsi,rax
  2030f2:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  2030f6:	e8 05 00 00 00       	call   203100 <panicExtra>
  2030fb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000203100 <panicExtra>:
    panicExtra(null, first_trace_addr, format, args);
}

var panicking: u8 = 0; // TODO make this a bool

pub fn panicExtra(trace: ?*const builtin.StackTrace, first_trace_addr: ?usize, comptime format: []const u8, args: ...) noreturn {
  203100:	55                   	push   rbp
  203101:	48 89 e5             	mov    rbp,rsp
  203104:	48 81 ec 60 01 00 00 	sub    rsp,0x160
  20310b:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  203112:	00 00 00 00 
  203116:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
  20311d:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
  203124:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  20312b:	1e 00 00 00 
  20312f:	48 89 bd c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rdi
    @setCold(true);

    if (@atomicRmw(u8, &panicking, builtin.AtomicRmwOp.Xchg, 1, builtin.AtomicOrder.SeqCst) == 1) {
  203136:	b1 01                	mov    cl,0x1
  203138:	86 0d c2 2e 02 00    	xchg   BYTE PTR [rip+0x22ec2],cl        # 226000 <panicking>
  20313e:	80 f9 01             	cmp    cl,0x1
  203141:	48 89 b5 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rsi
  203148:	48 89 95 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rdx
  20314f:	75 05                	jne    203156 <panicExtra+0x56>
        // Panicked during a panic.

        // TODO detect if a different thread caused the panic, because in that case
        // we would want to return here instead of calling abort, so that the thread
        // which first called panic can finish printing a stack trace.
        os.abort();
  203151:	e8 3a 03 00 00       	call   203490 <abort>
    if (@atomicRmw(u8, &panicking, builtin.AtomicRmwOp.Xchg, 1, builtin.AtomicOrder.SeqCst) == 1) {
  203156:	eb 00                	jmp    203158 <panicExtra+0x58>
  203158:	48 8d bd e8 fe ff ff 	lea    rdi,[rbp-0x118]
  20315f:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
    }
    const stderr = getStderrStream() catch os.abort();
  203166:	e8 55 03 00 00       	call   2034c0 <getStderrStream>
  20316b:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  203172:	00 
  203173:	74 05                	je     20317a <panicExtra+0x7a>
  203175:	e8 16 03 00 00       	call   203490 <abort>
  20317a:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  203181:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
  203188:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  20318f:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
  203196:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
    stderr.print(format ++ "\n", args) catch os.abort();
  20319d:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  2031a4:	48 8b 95 a8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x158]
  2031ab:	e8 20 04 00 00       	call   2035d0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print>
  2031b0:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  2031b7:	66 83 bd d6 fe ff ff 	cmp    WORD PTR [rbp-0x12a],0x0
  2031be:	00 
  2031bf:	74 05                	je     2031c6 <panicExtra+0xc6>
  2031c1:	e8 ca 02 00 00       	call   203490 <abort>
    if (trace) |t| {
  2031c6:	48 83 bd c8 fe ff ff 	cmp    QWORD PTR [rbp-0x138],0x0
  2031cd:	00 
  2031ce:	74 1c                	je     2031ec <panicExtra+0xec>
  2031d0:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  2031d7:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
        dumpStackTrace(t);
  2031de:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  2031e5:	e8 36 04 00 00       	call   203620 <dumpStackTrace>
    if (trace) |t| {
  2031ea:	eb 02                	jmp    2031ee <panicExtra+0xee>
  2031ec:	eb 00                	jmp    2031ee <panicExtra+0xee>
    }
    dumpCurrentStackTrace(first_trace_addr);
  2031ee:	48 8b bd b0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x150]
  2031f5:	e8 d6 06 00 00       	call   2038d0 <dumpCurrentStackTrace>

    os.abort();
  2031fa:	e8 91 02 00 00       	call   203490 <abort>
  2031ff:	90                   	nop

0000000000203200 <Xoroshiro128_init>:
pub const Xoroshiro128 = struct {
    random: Random,

    s: [2]u64,

    pub fn init(init_s: u64) Xoroshiro128 {
  203200:	55                   	push   rbp
  203201:	48 89 e5             	mov    rbp,rsp
  203204:	48 83 ec 30          	sub    rsp,0x30
  203208:	48 89 f8             	mov    rax,rdi
  20320b:	48 8d 4d e0          	lea    rcx,[rbp-0x20]
  20320f:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
        var x = Xoroshiro128{
  203213:	48 8b 35 c6 20 02 00 	mov    rsi,QWORD PTR [rip+0x220c6]        # 2252e0 <__unnamed_2>
  20321a:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  20321e:	48 8b 35 c3 20 02 00 	mov    rsi,QWORD PTR [rip+0x220c3]        # 2252e8 <__unnamed_2+0x8>
  203225:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
  203229:	48 8b 35 c0 20 02 00 	mov    rsi,QWORD PTR [rip+0x220c0]        # 2252f0 <__unnamed_2+0x10>
  203230:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
            .random = Random{ .fillFn = fill },
            .s = undefined,
        };

        x.seed(init_s);
  203234:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  203238:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  20323c:	48 89 cf             	mov    rdi,rcx
  20323f:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  203243:	e8 28 0e 00 00       	call   204070 <Xoroshiro128_seed>
        return x;
  203248:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20324c:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  203250:	48 89 01             	mov    QWORD PTR [rcx],rax
  203253:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  203257:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20325b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20325f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  203263:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  203267:	48 83 c4 30          	add    rsp,0x30
  20326b:	5d                   	pop    rbp
  20326c:	c3                   	ret    
  20326d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000203270 <Random_scalar>:
    pub fn scalar(r: *Random, comptime T: type) T {
  203270:	55                   	push   rbp
  203271:	48 89 e5             	mov    rbp,rsp
  203274:	48 83 ec 40          	sub    rsp,0x40
  203278:	b0 01                	mov    al,0x1
  20327a:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
        var rand_bytes: [@sizeOf(T)]u8 = undefined;
  20327e:	8b 0d e0 f1 ff ff    	mov    ecx,DWORD PTR [rip+0xfffffffffffff1e0]        # 202464 <__unnamed_21>
  203284:	89 4d cc             	mov    DWORD PTR [rbp-0x34],ecx
        r.bytes(rand_bytes[0..]);
  203287:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  20328b:	a8 01                	test   al,0x1
  20328d:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
  203291:	75 10                	jne    2032a3 <Random_scalar+0x33>
  203293:	48 8d 3d 66 20 02 00 	lea    rdi,[rip+0x22066]        # 225300 <__unnamed_4>
  20329a:	31 c0                	xor    eax,eax
  20329c:	89 c6                	mov    esi,eax
  20329e:	e8 1d fe ff ff       	call   2030c0 <panic>
  2032a3:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
  2032a7:	48 8d 45 cc          	lea    rax,[rbp-0x34]
  2032ab:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  2032af:	48 c7 45 f8 04 00 00 	mov    QWORD PTR [rbp-0x8],0x4
  2032b6:	00 
  2032b7:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  2032bb:	e8 10 0e 00 00       	call   2040d0 <Random_bytes>
  2032c0:	48 8d 7d d8          	lea    rdi,[rbp-0x28]
  2032c4:	be 01 00 00 00       	mov    esi,0x1
  2032c9:	48 8d 45 cc          	lea    rax,[rbp-0x34]
            return mem.readInt(rand_bytes, T, builtin.Endian.Little);
  2032cd:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  2032d1:	48 c7 45 e0 04 00 00 	mov    QWORD PTR [rbp-0x20],0x4
  2032d8:	00 
  2032d9:	e8 22 0e 00 00       	call   204100 <readInt>
  2032de:	48 83 c4 40          	add    rsp,0x40
  2032e2:	5d                   	pop    rbp
  2032e3:	c3                   	ret    
  2032e4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2032eb:	00 00 00 00 00 

00000000002032f0 <setValue>:
pub fn setValue(v: u32) void {
  2032f0:	55                   	push   rbp
  2032f1:	48 89 e5             	mov    rbp,rsp
  2032f4:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    gValue = v;
  2032f7:	8b 7d fc             	mov    edi,DWORD PTR [rbp-0x4]
  2032fa:	89 3d 18 0d 02 00    	mov    DWORD PTR [rip+0x20d18],edi        # 224018 <gValue>
pub fn setValue(v: u32) void {
  203300:	5d                   	pop    rbp
  203301:	c3                   	ret    
  203302:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  203309:	1f 84 00 00 00 00 00 

0000000000203310 <waitWhileExpectedValue>:
pub fn waitWhileExpectedValue(expectedValue: u32, stallCount: u64) u32 {
  203310:	55                   	push   rbp
  203311:	48 89 e5             	mov    rbp,rsp
  203314:	48 83 ec 30          	sub    rsp,0x30
  203318:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  20331b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    var count = stallCount;
  20331f:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  203323:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
    var val: u32 = undefined;
  203327:	c7 45 e4 aa aa aa aa 	mov    DWORD PTR [rbp-0x1c],0xaaaaaaaa
    val = @atomicLoad(u32, &gValue, AtomicOrder.SeqCst);
  20332e:	8b 3d e4 0c 02 00    	mov    edi,DWORD PTR [rip+0x20ce4]        # 224018 <gValue>
  203334:	89 7d e4             	mov    DWORD PTR [rbp-0x1c],edi
    while ((val == expectedValue) and (count > 0)) {
  203337:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  20333a:	3b 45 fc             	cmp    eax,DWORD PTR [rbp-0x4]
  20333d:	0f 94 c1             	sete   cl
  203340:	f6 c1 01             	test   cl,0x1
  203343:	88 4d e3             	mov    BYTE PTR [rbp-0x1d],cl
  203346:	75 02                	jne    20334a <waitWhileExpectedValue+0x3a>
  203348:	eb 0b                	jmp    203355 <waitWhileExpectedValue+0x45>
  20334a:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
  20334f:	0f 97 c0             	seta   al
  203352:	88 45 e3             	mov    BYTE PTR [rbp-0x1d],al
  203355:	8a 45 e3             	mov    al,BYTE PTR [rbp-0x1d]
  203358:	a8 01                	test   al,0x1
  20335a:	75 02                	jne    20335e <waitWhileExpectedValue+0x4e>
  20335c:	eb 1f                	jmp    20337d <waitWhileExpectedValue+0x6d>
        val = @atomicLoad(u32, &gValue, AtomicOrder.SeqCst);
  20335e:	8b 05 b4 0c 02 00    	mov    eax,DWORD PTR [rip+0x20cb4]        # 224018 <gValue>
  203364:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
        count -= 1;
  203367:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20336b:	48 83 e9 01          	sub    rcx,0x1
  20336f:	0f 92 c2             	setb   dl
  203372:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  203376:	88 55 d7             	mov    BYTE PTR [rbp-0x29],dl
  203379:	72 2f                	jb     2033aa <waitWhileExpectedValue+0x9a>
  20337b:	eb 3d                	jmp    2033ba <waitWhileExpectedValue+0xaa>
    while (val == expectedValue) {
  20337d:	eb 00                	jmp    20337f <waitWhileExpectedValue+0x6f>
  20337f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  203382:	3b 45 fc             	cmp    eax,DWORD PTR [rbp-0x4]
  203385:	75 1a                	jne    2033a1 <waitWhileExpectedValue+0x91>
        futex_wait(&gValue, expectedValue);
  203387:	8b 75 fc             	mov    esi,DWORD PTR [rbp-0x4]
  20338a:	48 8d 3d 87 0c 02 00 	lea    rdi,[rip+0x20c87]        # 224018 <gValue>
  203391:	e8 0a 0f 00 00       	call   2042a0 <futex_wait>
        val = @atomicLoad(u32, &gValue, AtomicOrder.SeqCst);
  203396:	8b 35 7c 0c 02 00    	mov    esi,DWORD PTR [rip+0x20c7c]        # 224018 <gValue>
  20339c:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
    while (val == expectedValue) {
  20339f:	eb de                	jmp    20337f <waitWhileExpectedValue+0x6f>
    return val;
  2033a1:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  2033a4:	48 83 c4 30          	add    rsp,0x30
  2033a8:	5d                   	pop    rbp
  2033a9:	c3                   	ret    
  2033aa:	48 8d 3d 67 1f 02 00 	lea    rdi,[rip+0x21f67]        # 225318 <__unnamed_5>
  2033b1:	31 c0                	xor    eax,eax
  2033b3:	89 c6                	mov    esi,eax
        count -= 1;
  2033b5:	e8 06 fd ff ff       	call   2030c0 <panic>
  2033ba:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2033be:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    while ((val == expectedValue) and (count > 0)) {
  2033c2:	e9 70 ff ff ff       	jmp    203337 <waitWhileExpectedValue+0x27>
  2033c7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  2033ce:	00 00 

00000000002033d0 <warn>:
pub fn warn(comptime fmt: []const u8, args: ...) void {
  2033d0:	55                   	push   rbp
  2033d1:	48 89 e5             	mov    rbp,rsp
  2033d4:	48 81 ec 40 01 00 00 	sub    rsp,0x140
  2033db:	48 8d 85 e8 fe ff ff 	lea    rax,[rbp-0x118]
  2033e2:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  2033e9:	48 8d 8d 10 ff ff ff 	lea    rcx,[rbp-0xf0]
  2033f0:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  2033f7:	00 00 00 00 
  2033fb:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  203402:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  203409:	1e 00 00 00 
  20340d:	89 bd d0 fe ff ff    	mov    DWORD PTR [rbp-0x130],edi
    const stderr = getStderrStream() catch return;
  203413:	48 89 c7             	mov    rdi,rax
  203416:	e8 a5 00 00 00       	call   2034c0 <getStderrStream>
  20341b:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  203422:	00 
  203423:	74 09                	je     20342e <warn+0x5e>
  203425:	48 81 c4 40 01 00 00 	add    rsp,0x140
  20342c:	5d                   	pop    rbp
  20342d:	c3                   	ret    
  20342e:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  203435:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
  20343c:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  203443:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  20344a:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
    stderr.print(fmt, args) catch return;
  203451:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  203458:	8b 95 d0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x130]
  20345e:	e8 8d 0e 00 00       	call   2042f0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.10>
  203463:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  20346a:	66 83 bd d6 fe ff ff 	cmp    WORD PTR [rbp-0x12a],0x0
  203471:	00 
  203472:	74 09                	je     20347d <warn+0xad>
  203474:	48 81 c4 40 01 00 00 	add    rsp,0x140
  20347b:	5d                   	pop    rbp
  20347c:	c3                   	ret    
pub fn warn(comptime fmt: []const u8, args: ...) void {
  20347d:	48 81 c4 40 01 00 00 	add    rsp,0x140
  203484:	5d                   	pop    rbp
  203485:	c3                   	ret    
  203486:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  20348d:	00 00 00 

0000000000203490 <abort>:
}

/// Raises a signal in the current kernel thread, ending its execution.
/// If linking against libc, this calls the abort() libc function. Otherwise
/// it uses the zig standard library implementation.
pub fn abort() noreturn {
  203490:	55                   	push   rbp
  203491:	48 89 e5             	mov    rbp,rsp
  203494:	48 83 ec 10          	sub    rsp,0x10
  203498:	bf 06 00 00 00       	mov    edi,0x6
    if (builtin.link_libc) {
        c.abort();
    }
    switch (builtin.os) {
        Os.linux, Os.macosx, Os.ios => {
            _ = posix.raise(posix.SIGABRT);
  20349d:	e8 9e 0e 00 00       	call   204340 <raise>
  2034a2:	bf 09 00 00 00       	mov    edi,0x9
            _ = posix.raise(posix.SIGKILL);
  2034a7:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  2034ab:	e8 90 0e 00 00       	call   204340 <raise>
  2034b0:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
            while (true) {}
  2034b4:	eb fe                	jmp    2034b4 <abort+0x24>
  2034b6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  2034bd:	00 00 00 

00000000002034c0 <getStderrStream>:
pub fn getStderrStream() !*io.OutStream(io.FileOutStream.Error) {
  2034c0:	55                   	push   rbp
  2034c1:	48 89 e5             	mov    rbp,rsp
  2034c4:	48 83 ec 70          	sub    rsp,0x70
  2034c8:	48 89 f8             	mov    rax,rdi
    if (stderr_stream) |st| {
  2034cb:	48 83 3d 35 2b 02 00 	cmp    QWORD PTR [rip+0x22b35],0x0        # 226008 <stderr_stream>
  2034d2:	00 
  2034d3:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  2034d7:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  2034db:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
  2034df:	74 36                	je     203517 <getStderrStream+0x57>
  2034e1:	48 8b 05 20 2b 02 00 	mov    rax,QWORD PTR [rip+0x22b20]        # 226008 <stderr_stream>
  2034e8:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
        return st;
  2034ec:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  2034f0:	66 c7 45 f0 00 00    	mov    WORD PTR [rbp-0x10],0x0
  2034f6:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  2034fa:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2034fe:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  203502:	48 89 01             	mov    QWORD PTR [rcx],rax
  203505:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  203509:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20350d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  203511:	48 83 c4 70          	add    rsp,0x70
  203515:	5d                   	pop    rbp
  203516:	c3                   	ret    
  203517:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
        stderr_file = try io.getStdErr();
  20351b:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  20351f:	e8 dc 0e 00 00       	call   204400 <getStdErr>
  203524:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  203529:	74 36                	je     203561 <getStderrStream+0xa1>
  20352b:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  20352f:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  203533:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  203537:	e8 14 0f 00 00       	call   204450 <__zig_return_error>
  20353c:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  203540:	66 89 45 d0          	mov    WORD PTR [rbp-0x30],ax
  203544:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  203548:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  20354c:	48 89 39             	mov    QWORD PTR [rcx],rdi
  20354f:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  203553:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  203557:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  20355b:	48 83 c4 70          	add    rsp,0x70
  20355f:	5d                   	pop    rbp
  203560:	c3                   	ret    
  203561:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  203565:	48 8d 35 94 0a 02 00 	lea    rsi,[rip+0x20a94]        # 224000 <stderr_file>
  20356c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  20356f:	89 05 8b 0a 02 00    	mov    DWORD PTR [rip+0x20a8b],eax        # 224000 <stderr_file>
        stderr_file_out_stream = io.FileOutStream.init(&stderr_file);
  203575:	e8 16 0f 00 00       	call   204490 <FileOutStream_init>
  20357a:	48 8d 35 87 0a 02 00 	lea    rsi,[rip+0x20a87]        # 224008 <stderr_file_out_stream>
  203581:	48 83 c6 08          	add    rsi,0x8
  203585:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  203589:	48 89 3d 78 0a 02 00 	mov    QWORD PTR [rip+0x20a78],rdi        # 224008 <stderr_file_out_stream>
  203590:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  203594:	48 89 3d 75 0a 02 00 	mov    QWORD PTR [rip+0x20a75],rdi        # 224010 <stderr_file_out_stream+0x8>
        const st = &stderr_file_out_stream.stream;
  20359b:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
        stderr_stream = st;
  20359f:	48 89 35 62 2a 02 00 	mov    QWORD PTR [rip+0x22a62],rsi        # 226008 <stderr_stream>
        return st;
  2035a6:	48 8b 35 c3 1d 02 00 	mov    rsi,QWORD PTR [rip+0x21dc3]        # 225370 <__unnamed_6>
  2035ad:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  2035b1:	48 89 37             	mov    QWORD PTR [rdi],rsi
  2035b4:	48 8b 35 bd 1d 02 00 	mov    rsi,QWORD PTR [rip+0x21dbd]        # 225378 <__unnamed_6+0x8>
  2035bb:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  2035bf:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  2035c3:	48 83 c4 70          	add    rsp,0x70
  2035c7:	5d                   	pop    rbp
  2035c8:	c3                   	ret    
  2035c9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

00000000002035d0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print>:
        const Self = this;
        pub const Error = WriteError;

        writeFn: fn (self: *Self, bytes: []const u8) Error!void,

        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  2035d0:	55                   	push   rbp
  2035d1:	48 89 e5             	mov    rbp,rsp
  2035d4:	48 83 ec 20          	sub    rsp,0x20
  2035d8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
            return std.fmt.format(self, Error, self.writeFn, format, args);
  2035dc:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2035e0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2035e4:	48 8b 00             	mov    rax,QWORD PTR [rax]
  2035e7:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  2035eb:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  2035ef:	48 89 c2             	mov    rdx,rax
  2035f2:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2035f6:	e8 35 0f 00 00       	call   204530 <format>
  2035fb:	66 83 f8 00          	cmp    ax,0x0
  2035ff:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
  203603:	74 0b                	je     203610 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print+0x40>
  203605:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  203609:	e8 42 0e 00 00       	call   204450 <__zig_return_error>
  20360e:	eb 02                	jmp    203612 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print+0x42>
  203610:	eb 00                	jmp    203612 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print+0x42>
  203612:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
  203616:	48 83 c4 20          	add    rsp,0x20
  20361a:	5d                   	pop    rbp
  20361b:	c3                   	ret    
  20361c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000203620 <dumpStackTrace>:
pub fn dumpStackTrace(stack_trace: *const builtin.StackTrace) void {
  203620:	55                   	push   rbp
  203621:	48 89 e5             	mov    rbp,rsp
  203624:	48 81 ec d0 01 00 00 	sub    rsp,0x1d0
  20362b:	48 8d 85 e8 fe ff ff 	lea    rax,[rbp-0x118]
  203632:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  203639:	48 8d 8d 10 ff ff ff 	lea    rcx,[rbp-0xf0]
  203640:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  203647:	00 00 00 00 
  20364b:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  203652:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  203659:	1e 00 00 00 
  20365d:	48 89 bd a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rdi
    const stderr = getStderrStream() catch return;
  203664:	48 89 c7             	mov    rdi,rax
  203667:	e8 54 fe ff ff       	call   2034c0 <getStderrStream>
  20366c:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  203673:	00 
  203674:	74 09                	je     20367f <dumpStackTrace+0x5f>
  203676:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  20367d:	5d                   	pop    rbp
  20367e:	c3                   	ret    
  20367f:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  203686:	48 89 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rax
  20368d:	48 8d bd c8 fe ff ff 	lea    rdi,[rbp-0x138]
  203694:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  20369b:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
  2036a2:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
    const debug_info = getSelfDebugInfo() catch |err| {
  2036a9:	e8 82 0f 00 00       	call   204630 <getSelfDebugInfo>
  2036ae:	66 83 bd c8 fe ff ff 	cmp    WORD PTR [rbp-0x138],0x0
  2036b5:	00 
  2036b6:	74 4b                	je     203703 <dumpStackTrace+0xe3>
  2036b8:	66 8b 85 c8 fe ff ff 	mov    ax,WORD PTR [rbp-0x138]
  2036bf:	66 89 85 9e fe ff ff 	mov    WORD PTR [rbp-0x162],ax
        stderr.print("Unable to dump stack trace: Unable to open debug info: {}\n", @errorName(err)) catch return;
  2036c6:	48 8b b5 a0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x160]
  2036cd:	66 8b 85 9e fe ff ff 	mov    ax,WORD PTR [rbp-0x162]
  2036d4:	66 83 f8 00          	cmp    ax,0x0
  2036d8:	48 89 b5 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rsi
  2036df:	66 89 85 76 fe ff ff 	mov    WORD PTR [rbp-0x18a],ax
  2036e6:	0f 85 69 01 00 00    	jne    203855 <dumpStackTrace+0x235>
  2036ec:	e9 0b 01 00 00       	jmp    2037fc <dumpStackTrace+0x1dc>
  2036f1:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  2036f8:	5d                   	pop    rbp
  2036f9:	c3                   	ret    
        return;
  2036fa:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  203701:	5d                   	pop    rbp
  203702:	c3                   	ret    
    const debug_info = getSelfDebugInfo() catch |err| {
  203703:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  20370a:	48 89 85 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rax
  203711:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
  203718:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
    writeStackTrace(stack_trace, stderr, getDebugInfoAllocator(), debug_info, wantTtyColor()) catch |err| {
  20371f:	48 8b b5 a8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x158]
  203726:	48 8b 95 a0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x160]
  20372d:	48 89 b5 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rsi
  203734:	48 89 95 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rdx
  20373b:	e8 40 10 00 00       	call   204780 <getDebugInfoAllocator>
  203740:	4c 8b 85 90 fe ff ff 	mov    r8,QWORD PTR [rbp-0x170]
  203747:	48 89 85 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rax
  20374e:	4c 89 85 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],r8
  203755:	e8 e6 10 00 00       	call   204840 <wantTtyColor>
  20375a:	48 8d 95 f8 fe ff ff 	lea    rdx,[rbp-0x108]
  203761:	44 0f b6 c8          	movzx  r9d,al
  203765:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  20376c:	48 8b b5 60 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1a0]
  203773:	4c 8b 85 58 fe ff ff 	mov    r8,QWORD PTR [rbp-0x1a8]
  20377a:	48 89 95 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rdx
  203781:	4c 89 c2             	mov    rdx,r8
  203784:	48 8b 8d 50 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1b0]
  20378b:	4c 8b 85 48 fe ff ff 	mov    r8,QWORD PTR [rbp-0x1b8]
  203792:	e8 d9 11 00 00       	call   204970 <writeStackTrace>
  203797:	66 89 85 b4 fe ff ff 	mov    WORD PTR [rbp-0x14c],ax
  20379e:	66 83 bd b4 fe ff ff 	cmp    WORD PTR [rbp-0x14c],0x0
  2037a5:	00 
  2037a6:	74 4b                	je     2037f3 <dumpStackTrace+0x1d3>
  2037a8:	66 8b 85 b4 fe ff ff 	mov    ax,WORD PTR [rbp-0x14c]
  2037af:	66 89 85 8e fe ff ff 	mov    WORD PTR [rbp-0x172],ax
        stderr.print("Unable to dump stack trace: {}\n", @errorName(err)) catch return;
  2037b6:	48 8b b5 a0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x160]
  2037bd:	66 8b 85 8e fe ff ff 	mov    ax,WORD PTR [rbp-0x172]
  2037c4:	66 83 f8 00          	cmp    ax,0x0
  2037c8:	48 89 b5 38 fe ff ff 	mov    QWORD PTR [rbp-0x1c8],rsi
  2037cf:	66 89 85 36 fe ff ff 	mov    WORD PTR [rbp-0x1ca],ax
  2037d6:	0f 85 e1 00 00 00    	jne    2038bd <dumpStackTrace+0x29d>
  2037dc:	e9 83 00 00 00       	jmp    203864 <dumpStackTrace+0x244>
  2037e1:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  2037e8:	5d                   	pop    rbp
  2037e9:	c3                   	ret    
        return;
  2037ea:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  2037f1:	5d                   	pop    rbp
  2037f2:	c3                   	ret    
pub fn dumpStackTrace(stack_trace: *const builtin.StackTrace) void {
  2037f3:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  2037fa:	5d                   	pop    rbp
  2037fb:	c3                   	ret    
  2037fc:	48 8d 3d fd 1a 02 00 	lea    rdi,[rip+0x21afd]        # 225300 <__unnamed_4>
  203803:	31 c0                	xor    eax,eax
  203805:	89 c6                	mov    esi,eax
        stderr.print("Unable to dump stack trace: Unable to open debug info: {}\n", @errorName(err)) catch return;
  203807:	e8 b4 f8 ff ff       	call   2030c0 <panic>
  20380c:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  203813:	48 8d 05 e6 17 02 00 	lea    rax,[rip+0x217e6]        # 225000 <raw+0xf68>
  20381a:	66 8b 8d 76 fe ff ff 	mov    cx,WORD PTR [rbp-0x18a]
  203821:	48 0f bf d1          	movsx  rdx,cx
  203825:	48 c1 e2 04          	shl    rdx,0x4
  203829:	48 01 d0             	add    rax,rdx
  20382c:	48 8b b5 78 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x188]
  203833:	48 89 c2             	mov    rdx,rax
  203836:	e8 f5 0e 00 00       	call   204730 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.11>
  20383b:	66 89 85 b6 fe ff ff 	mov    WORD PTR [rbp-0x14a],ax
  203842:	66 83 bd b6 fe ff ff 	cmp    WORD PTR [rbp-0x14a],0x0
  203849:	00 
  20384a:	0f 85 a1 fe ff ff    	jne    2036f1 <dumpStackTrace+0xd1>
  203850:	e9 a5 fe ff ff       	jmp    2036fa <dumpStackTrace+0xda>
  203855:	66 8b 85 76 fe ff ff 	mov    ax,WORD PTR [rbp-0x18a]
  20385c:	66 83 f8 27          	cmp    ax,0x27
  203860:	72 aa                	jb     20380c <dumpStackTrace+0x1ec>
  203862:	eb 98                	jmp    2037fc <dumpStackTrace+0x1dc>
  203864:	48 8d 3d 95 1a 02 00 	lea    rdi,[rip+0x21a95]        # 225300 <__unnamed_4>
  20386b:	31 c0                	xor    eax,eax
  20386d:	89 c6                	mov    esi,eax
        stderr.print("Unable to dump stack trace: {}\n", @errorName(err)) catch return;
  20386f:	e8 4c f8 ff ff       	call   2030c0 <panic>
  203874:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  20387b:	48 8d 05 7e 17 02 00 	lea    rax,[rip+0x2177e]        # 225000 <raw+0xf68>
  203882:	66 8b 8d 36 fe ff ff 	mov    cx,WORD PTR [rbp-0x1ca]
  203889:	48 0f bf d1          	movsx  rdx,cx
  20388d:	48 c1 e2 04          	shl    rdx,0x4
  203891:	48 01 d0             	add    rax,rdx
  203894:	48 8b b5 38 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1c8]
  20389b:	48 89 c2             	mov    rdx,rax
  20389e:	e8 5d 13 00 00       	call   204c00 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.12>
  2038a3:	66 89 85 b2 fe ff ff 	mov    WORD PTR [rbp-0x14e],ax
  2038aa:	66 83 bd b2 fe ff ff 	cmp    WORD PTR [rbp-0x14e],0x0
  2038b1:	00 
  2038b2:	0f 85 29 ff ff ff    	jne    2037e1 <dumpStackTrace+0x1c1>
  2038b8:	e9 2d ff ff ff       	jmp    2037ea <dumpStackTrace+0x1ca>
  2038bd:	66 8b 85 36 fe ff ff 	mov    ax,WORD PTR [rbp-0x1ca]
  2038c4:	66 83 f8 27          	cmp    ax,0x27
  2038c8:	72 aa                	jb     203874 <dumpStackTrace+0x254>
  2038ca:	eb 98                	jmp    203864 <dumpStackTrace+0x244>
  2038cc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

00000000002038d0 <dumpCurrentStackTrace>:
pub fn dumpCurrentStackTrace(start_addr: ?usize) void {
  2038d0:	55                   	push   rbp
  2038d1:	48 89 e5             	mov    rbp,rsp
  2038d4:	48 81 ec d0 01 00 00 	sub    rsp,0x1d0
  2038db:	48 8d 85 e8 fe ff ff 	lea    rax,[rbp-0x118]
  2038e2:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  2038e9:	48 8d 8d 10 ff ff ff 	lea    rcx,[rbp-0xf0]
  2038f0:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  2038f7:	00 00 00 00 
  2038fb:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  203902:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  203909:	1e 00 00 00 
    const stderr = getStderrStream() catch return;
  20390d:	48 89 bd 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rdi
  203914:	48 89 c7             	mov    rdi,rax
  203917:	e8 a4 fb ff ff       	call   2034c0 <getStderrStream>
  20391c:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  203923:	00 
  203924:	74 09                	je     20392f <dumpCurrentStackTrace+0x5f>
  203926:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  20392d:	5d                   	pop    rbp
  20392e:	c3                   	ret    
  20392f:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  203936:	48 89 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rax
  20393d:	48 8d bd c8 fe ff ff 	lea    rdi,[rbp-0x138]
  203944:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  20394b:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
  203952:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
    const debug_info = getSelfDebugInfo() catch |err| {
  203959:	e8 d2 0c 00 00       	call   204630 <getSelfDebugInfo>
  20395e:	66 83 bd c8 fe ff ff 	cmp    WORD PTR [rbp-0x138],0x0
  203965:	00 
  203966:	74 4b                	je     2039b3 <dumpCurrentStackTrace+0xe3>
  203968:	66 8b 85 c8 fe ff ff 	mov    ax,WORD PTR [rbp-0x138]
  20396f:	66 89 85 a6 fe ff ff 	mov    WORD PTR [rbp-0x15a],ax
        stderr.print("Unable to dump stack trace: Unable to open debug info: {}\n", @errorName(err)) catch return;
  203976:	48 8b b5 a8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x158]
  20397d:	66 8b 85 a6 fe ff ff 	mov    ax,WORD PTR [rbp-0x15a]
  203984:	66 83 f8 00          	cmp    ax,0x0
  203988:	48 89 b5 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rsi
  20398f:	66 89 85 76 fe ff ff 	mov    WORD PTR [rbp-0x18a],ax
  203996:	0f 85 5b 01 00 00    	jne    203af7 <dumpCurrentStackTrace+0x227>
  20399c:	e9 fd 00 00 00       	jmp    203a9e <dumpCurrentStackTrace+0x1ce>
  2039a1:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  2039a8:	5d                   	pop    rbp
  2039a9:	c3                   	ret    
        return;
  2039aa:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  2039b1:	5d                   	pop    rbp
  2039b2:	c3                   	ret    
    const debug_info = getSelfDebugInfo() catch |err| {
  2039b3:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  2039ba:	48 89 85 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rax
  2039c1:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
  2039c8:	48 89 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rax
    writeCurrentStackTrace(stderr, getDebugInfoAllocator(), debug_info, wantTtyColor(), start_addr) catch |err| {
  2039cf:	48 8b b5 a8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x158]
  2039d6:	48 89 b5 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rsi
  2039dd:	e8 9e 0d 00 00       	call   204780 <getDebugInfoAllocator>
  2039e2:	48 8b 8d 98 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x168]
  2039e9:	48 89 85 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rax
  2039f0:	48 89 8d 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rcx
  2039f7:	e8 44 0e 00 00       	call   204840 <wantTtyColor>
  2039fc:	48 8d 8d f8 fe ff ff 	lea    rcx,[rbp-0x108]
  203a03:	44 0f b6 c0          	movzx  r8d,al
  203a07:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  203a0e:	48 8b b5 60 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1a0]
  203a15:	48 8b 95 58 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1a8]
  203a1c:	4c 8b 8d 50 fe ff ff 	mov    r9,QWORD PTR [rbp-0x1b0]
  203a23:	48 89 8d 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rcx
  203a2a:	4c 89 c9             	mov    rcx,r9
  203a2d:	4c 8b 8d 88 fe ff ff 	mov    r9,QWORD PTR [rbp-0x178]
  203a34:	e8 17 12 00 00       	call   204c50 <writeCurrentStackTrace>
  203a39:	66 89 85 b4 fe ff ff 	mov    WORD PTR [rbp-0x14c],ax
  203a40:	66 83 bd b4 fe ff ff 	cmp    WORD PTR [rbp-0x14c],0x0
  203a47:	00 
  203a48:	74 4b                	je     203a95 <dumpCurrentStackTrace+0x1c5>
  203a4a:	66 8b 85 b4 fe ff ff 	mov    ax,WORD PTR [rbp-0x14c]
  203a51:	66 89 85 96 fe ff ff 	mov    WORD PTR [rbp-0x16a],ax
        stderr.print("Unable to dump stack trace: {}\n", @errorName(err)) catch return;
  203a58:	48 8b b5 a8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x158]
  203a5f:	66 8b 85 96 fe ff ff 	mov    ax,WORD PTR [rbp-0x16a]
  203a66:	66 83 f8 00          	cmp    ax,0x0
  203a6a:	48 89 b5 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rsi
  203a71:	66 89 85 3e fe ff ff 	mov    WORD PTR [rbp-0x1c2],ax
  203a78:	0f 85 e1 00 00 00    	jne    203b5f <dumpCurrentStackTrace+0x28f>
  203a7e:	e9 83 00 00 00       	jmp    203b06 <dumpCurrentStackTrace+0x236>
  203a83:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  203a8a:	5d                   	pop    rbp
  203a8b:	c3                   	ret    
        return;
  203a8c:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  203a93:	5d                   	pop    rbp
  203a94:	c3                   	ret    
pub fn dumpCurrentStackTrace(start_addr: ?usize) void {
  203a95:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  203a9c:	5d                   	pop    rbp
  203a9d:	c3                   	ret    
  203a9e:	48 8d 3d 5b 18 02 00 	lea    rdi,[rip+0x2185b]        # 225300 <__unnamed_4>
  203aa5:	31 c0                	xor    eax,eax
  203aa7:	89 c6                	mov    esi,eax
        stderr.print("Unable to dump stack trace: Unable to open debug info: {}\n", @errorName(err)) catch return;
  203aa9:	e8 12 f6 ff ff       	call   2030c0 <panic>
  203aae:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  203ab5:	48 8d 05 44 15 02 00 	lea    rax,[rip+0x21544]        # 225000 <raw+0xf68>
  203abc:	66 8b 8d 76 fe ff ff 	mov    cx,WORD PTR [rbp-0x18a]
  203ac3:	48 0f bf d1          	movsx  rdx,cx
  203ac7:	48 c1 e2 04          	shl    rdx,0x4
  203acb:	48 01 d0             	add    rax,rdx
  203ace:	48 8b b5 78 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x188]
  203ad5:	48 89 c2             	mov    rdx,rax
  203ad8:	e8 53 0c 00 00       	call   204730 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.11>
  203add:	66 89 85 b6 fe ff ff 	mov    WORD PTR [rbp-0x14a],ax
  203ae4:	66 83 bd b6 fe ff ff 	cmp    WORD PTR [rbp-0x14a],0x0
  203aeb:	00 
  203aec:	0f 85 af fe ff ff    	jne    2039a1 <dumpCurrentStackTrace+0xd1>
  203af2:	e9 b3 fe ff ff       	jmp    2039aa <dumpCurrentStackTrace+0xda>
  203af7:	66 8b 85 76 fe ff ff 	mov    ax,WORD PTR [rbp-0x18a]
  203afe:	66 83 f8 27          	cmp    ax,0x27
  203b02:	72 aa                	jb     203aae <dumpCurrentStackTrace+0x1de>
  203b04:	eb 98                	jmp    203a9e <dumpCurrentStackTrace+0x1ce>
  203b06:	48 8d 3d f3 17 02 00 	lea    rdi,[rip+0x217f3]        # 225300 <__unnamed_4>
  203b0d:	31 c0                	xor    eax,eax
  203b0f:	89 c6                	mov    esi,eax
        stderr.print("Unable to dump stack trace: {}\n", @errorName(err)) catch return;
  203b11:	e8 aa f5 ff ff       	call   2030c0 <panic>
  203b16:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  203b1d:	48 8d 05 dc 14 02 00 	lea    rax,[rip+0x214dc]        # 225000 <raw+0xf68>
  203b24:	66 8b 8d 3e fe ff ff 	mov    cx,WORD PTR [rbp-0x1c2]
  203b2b:	48 0f bf d1          	movsx  rdx,cx
  203b2f:	48 c1 e2 04          	shl    rdx,0x4
  203b33:	48 01 d0             	add    rax,rdx
  203b36:	48 8b b5 40 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1c0]
  203b3d:	48 89 c2             	mov    rdx,rax
  203b40:	e8 bb 10 00 00       	call   204c00 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.12>
  203b45:	66 89 85 b2 fe ff ff 	mov    WORD PTR [rbp-0x14e],ax
  203b4c:	66 83 bd b2 fe ff ff 	cmp    WORD PTR [rbp-0x14e],0x0
  203b53:	00 
  203b54:	0f 85 29 ff ff ff    	jne    203a83 <dumpCurrentStackTrace+0x1b3>
  203b5a:	e9 2d ff ff ff       	jmp    203a8c <dumpCurrentStackTrace+0x1bc>
  203b5f:	66 8b 85 3e fe ff ff 	mov    ax,WORD PTR [rbp-0x1c2]
  203b66:	66 83 f8 27          	cmp    ax,0x27
  203b6a:	72 aa                	jb     203b16 <dumpCurrentStackTrace+0x246>
  203b6c:	eb 98                	jmp    203b06 <dumpCurrentStackTrace+0x236>
  203b6e:	66 90                	xchg   ax,ax

0000000000203b70 <Xoroshiro128_fill>:

        self.s[0] = gen.next();
        self.s[1] = gen.next();
    }

    fn fill(r: *Random, buf: []u8) void {
  203b70:	55                   	push   rbp
  203b71:	48 89 e5             	mov    rbp,rsp
  203b74:	48 81 ec f0 00 00 00 	sub    rsp,0xf0
  203b7b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
        const self = @fieldParentPtr(Xoroshiro128, "random", r);
  203b7f:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  203b83:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi

        var i: usize = 0;
  203b87:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
  203b8e:	00 
        const aligned_len = buf.len - (buf.len & 7);
  203b8f:	48 8b 7e 08          	mov    rdi,QWORD PTR [rsi+0x8]
  203b93:	48 8b 46 08          	mov    rax,QWORD PTR [rsi+0x8]
  203b97:	48 83 e0 07          	and    rax,0x7
  203b9b:	48 29 c7             	sub    rdi,rax
  203b9e:	0f 92 c1             	setb   cl
  203ba1:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  203ba5:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
  203ba9:	88 4d bf             	mov    BYTE PTR [rbp-0x41],cl
  203bac:	0f 82 83 00 00 00    	jb     203c35 <Xoroshiro128_fill+0xc5>
  203bb2:	e9 8e 00 00 00       	jmp    203c45 <Xoroshiro128_fill+0xd5>

        // Complete 8 byte segments.
        while (i < aligned_len) : (i += 8) {
  203bb7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  203bbb:	48 3b 45 e0          	cmp    rax,QWORD PTR [rbp-0x20]
  203bbf:	73 23                	jae    203be4 <Xoroshiro128_fill+0x74>
            var n = self.next();
  203bc1:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  203bc5:	e8 76 12 00 00       	call   204e40 <Xoroshiro128_next>
  203bca:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
            comptime var j: usize = 0;
            inline while (j < 8) : (j += 1) {
                buf[i + j] = @truncate(u8, n);
  203bce:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  203bd2:	48 83 c0 00          	add    rax,0x0
  203bd6:	0f 92 c1             	setb   cl
  203bd9:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  203bdd:	88 4d af             	mov    BYTE PTR [rbp-0x51],cl
  203be0:	72 70                	jb     203c52 <Xoroshiro128_fill+0xe2>
  203be2:	eb 7e                	jmp    203c62 <Xoroshiro128_fill+0xf2>
                n >>= 8;
            }
        }

        // Remaining. (cuts the stream)
        if (i != buf.len) {
  203be4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  203be8:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  203bec:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  203bf0:	74 38                	je     203c2a <Xoroshiro128_fill+0xba>
            var n = self.next();
  203bf2:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  203bf6:	e8 45 12 00 00       	call   204e40 <Xoroshiro128_next>
  203bfb:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
            while (i < buf.len) : (i += 1) {
  203bff:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  203c03:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  203c07:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  203c0b:	73 1b                	jae    203c28 <Xoroshiro128_fill+0xb8>
                buf[i] = @truncate(u8, n);
  203c0d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  203c11:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  203c15:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  203c19:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  203c1d:	0f 82 e1 03 00 00    	jb     204004 <Xoroshiro128_fill+0x494>
  203c23:	e9 cc 03 00 00       	jmp    203ff4 <Xoroshiro128_fill+0x484>
        if (i != buf.len) {
  203c28:	eb 02                	jmp    203c2c <Xoroshiro128_fill+0xbc>
  203c2a:	eb 00                	jmp    203c2c <Xoroshiro128_fill+0xbc>
    fn fill(r: *Random, buf: []u8) void {
  203c2c:	48 81 c4 f0 00 00 00 	add    rsp,0xf0
  203c33:	5d                   	pop    rbp
  203c34:	c3                   	ret    
  203c35:	48 8d 3d dc 16 02 00 	lea    rdi,[rip+0x216dc]        # 225318 <__unnamed_5>
  203c3c:	31 c0                	xor    eax,eax
  203c3e:	89 c6                	mov    esi,eax
        const aligned_len = buf.len - (buf.len & 7);
  203c40:	e8 7b f4 ff ff       	call   2030c0 <panic>
  203c45:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  203c49:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
        while (i < aligned_len) : (i += 8) {
  203c4d:	e9 65 ff ff ff       	jmp    203bb7 <Xoroshiro128_fill+0x47>
  203c52:	48 8d 3d bf 16 02 00 	lea    rdi,[rip+0x216bf]        # 225318 <__unnamed_5>
  203c59:	31 c0                	xor    eax,eax
  203c5b:	89 c6                	mov    esi,eax
                buf[i + j] = @truncate(u8, n);
  203c5d:	e8 5e f4 ff ff       	call   2030c0 <panic>
  203c62:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  203c66:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  203c6a:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  203c6e:	72 10                	jb     203c80 <Xoroshiro128_fill+0x110>
  203c70:	48 8d 3d 89 16 02 00 	lea    rdi,[rip+0x21689]        # 225300 <__unnamed_4>
  203c77:	31 c0                	xor    eax,eax
  203c79:	89 c6                	mov    esi,eax
  203c7b:	e8 40 f4 ff ff       	call   2030c0 <panic>
  203c80:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  203c84:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  203c87:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  203c8b:	40 88 d6             	mov    sil,dl
  203c8e:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  203c92:	40 88 34 11          	mov    BYTE PTR [rcx+rdx*1],sil
                n >>= 8;
  203c96:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  203c9a:	48 c1 e9 08          	shr    rcx,0x8
  203c9e:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
                buf[i + j] = @truncate(u8, n);
  203ca2:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  203ca6:	48 83 c1 01          	add    rcx,0x1
  203caa:	40 0f 92 c6          	setb   sil
  203cae:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
  203cb2:	40 88 75 97          	mov    BYTE PTR [rbp-0x69],sil
  203cb6:	72 02                	jb     203cba <Xoroshiro128_fill+0x14a>
  203cb8:	eb 10                	jmp    203cca <Xoroshiro128_fill+0x15a>
  203cba:	48 8d 3d 57 16 02 00 	lea    rdi,[rip+0x21657]        # 225318 <__unnamed_5>
  203cc1:	31 c0                	xor    eax,eax
  203cc3:	89 c6                	mov    esi,eax
  203cc5:	e8 f6 f3 ff ff       	call   2030c0 <panic>
  203cca:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  203cce:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  203cd2:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  203cd6:	72 10                	jb     203ce8 <Xoroshiro128_fill+0x178>
  203cd8:	48 8d 3d 21 16 02 00 	lea    rdi,[rip+0x21621]        # 225300 <__unnamed_4>
  203cdf:	31 c0                	xor    eax,eax
  203ce1:	89 c6                	mov    esi,eax
  203ce3:	e8 d8 f3 ff ff       	call   2030c0 <panic>
  203ce8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  203cec:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  203cef:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  203cf3:	40 88 d6             	mov    sil,dl
  203cf6:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  203cfa:	40 88 34 11          	mov    BYTE PTR [rcx+rdx*1],sil
                n >>= 8;
  203cfe:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  203d02:	48 c1 e9 08          	shr    rcx,0x8
  203d06:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
                buf[i + j] = @truncate(u8, n);
  203d0a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  203d0e:	48 83 c1 02          	add    rcx,0x2
  203d12:	40 0f 92 c6          	setb   sil
  203d16:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
  203d1a:	40 88 75 87          	mov    BYTE PTR [rbp-0x79],sil
  203d1e:	72 02                	jb     203d22 <Xoroshiro128_fill+0x1b2>
  203d20:	eb 10                	jmp    203d32 <Xoroshiro128_fill+0x1c2>
  203d22:	48 8d 3d ef 15 02 00 	lea    rdi,[rip+0x215ef]        # 225318 <__unnamed_5>
  203d29:	31 c0                	xor    eax,eax
  203d2b:	89 c6                	mov    esi,eax
  203d2d:	e8 8e f3 ff ff       	call   2030c0 <panic>
  203d32:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  203d36:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  203d3a:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  203d3e:	72 10                	jb     203d50 <Xoroshiro128_fill+0x1e0>
  203d40:	48 8d 3d b9 15 02 00 	lea    rdi,[rip+0x215b9]        # 225300 <__unnamed_4>
  203d47:	31 c0                	xor    eax,eax
  203d49:	89 c6                	mov    esi,eax
  203d4b:	e8 70 f3 ff ff       	call   2030c0 <panic>
  203d50:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  203d54:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  203d57:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  203d5b:	40 88 d6             	mov    sil,dl
  203d5e:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
  203d62:	40 88 34 11          	mov    BYTE PTR [rcx+rdx*1],sil
                n >>= 8;
  203d66:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  203d6a:	48 c1 e9 08          	shr    rcx,0x8
  203d6e:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
                buf[i + j] = @truncate(u8, n);
  203d72:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  203d76:	48 83 c1 03          	add    rcx,0x3
  203d7a:	40 0f 92 c6          	setb   sil
  203d7e:	48 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rcx
  203d85:	40 88 b5 77 ff ff ff 	mov    BYTE PTR [rbp-0x89],sil
  203d8c:	72 02                	jb     203d90 <Xoroshiro128_fill+0x220>
  203d8e:	eb 10                	jmp    203da0 <Xoroshiro128_fill+0x230>
  203d90:	48 8d 3d 81 15 02 00 	lea    rdi,[rip+0x21581]        # 225318 <__unnamed_5>
  203d97:	31 c0                	xor    eax,eax
  203d99:	89 c6                	mov    esi,eax
  203d9b:	e8 20 f3 ff ff       	call   2030c0 <panic>
  203da0:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  203da7:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  203dab:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  203daf:	72 10                	jb     203dc1 <Xoroshiro128_fill+0x251>
  203db1:	48 8d 3d 48 15 02 00 	lea    rdi,[rip+0x21548]        # 225300 <__unnamed_4>
  203db8:	31 c0                	xor    eax,eax
  203dba:	89 c6                	mov    esi,eax
  203dbc:	e8 ff f2 ff ff       	call   2030c0 <panic>
  203dc1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  203dc5:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  203dc8:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  203dcc:	40 88 d6             	mov    sil,dl
  203dcf:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
  203dd6:	40 88 34 11          	mov    BYTE PTR [rcx+rdx*1],sil
                n >>= 8;
  203dda:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  203dde:	48 c1 e9 08          	shr    rcx,0x8
  203de2:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
                buf[i + j] = @truncate(u8, n);
  203de6:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  203dea:	48 83 c1 04          	add    rcx,0x4
  203dee:	40 0f 92 c6          	setb   sil
  203df2:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
  203df9:	40 88 b5 67 ff ff ff 	mov    BYTE PTR [rbp-0x99],sil
  203e00:	72 02                	jb     203e04 <Xoroshiro128_fill+0x294>
  203e02:	eb 10                	jmp    203e14 <Xoroshiro128_fill+0x2a4>
  203e04:	48 8d 3d 0d 15 02 00 	lea    rdi,[rip+0x2150d]        # 225318 <__unnamed_5>
  203e0b:	31 c0                	xor    eax,eax
  203e0d:	89 c6                	mov    esi,eax
  203e0f:	e8 ac f2 ff ff       	call   2030c0 <panic>
  203e14:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  203e1b:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  203e1f:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  203e23:	72 10                	jb     203e35 <Xoroshiro128_fill+0x2c5>
  203e25:	48 8d 3d d4 14 02 00 	lea    rdi,[rip+0x214d4]        # 225300 <__unnamed_4>
  203e2c:	31 c0                	xor    eax,eax
  203e2e:	89 c6                	mov    esi,eax
  203e30:	e8 8b f2 ff ff       	call   2030c0 <panic>
  203e35:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  203e39:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  203e3c:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  203e40:	40 88 d6             	mov    sil,dl
  203e43:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  203e4a:	40 88 34 11          	mov    BYTE PTR [rcx+rdx*1],sil
                n >>= 8;
  203e4e:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  203e52:	48 c1 e9 08          	shr    rcx,0x8
  203e56:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
                buf[i + j] = @truncate(u8, n);
  203e5a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  203e5e:	48 83 c1 05          	add    rcx,0x5
  203e62:	40 0f 92 c6          	setb   sil
  203e66:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
  203e6d:	40 88 b5 57 ff ff ff 	mov    BYTE PTR [rbp-0xa9],sil
  203e74:	72 02                	jb     203e78 <Xoroshiro128_fill+0x308>
  203e76:	eb 10                	jmp    203e88 <Xoroshiro128_fill+0x318>
  203e78:	48 8d 3d 99 14 02 00 	lea    rdi,[rip+0x21499]        # 225318 <__unnamed_5>
  203e7f:	31 c0                	xor    eax,eax
  203e81:	89 c6                	mov    esi,eax
  203e83:	e8 38 f2 ff ff       	call   2030c0 <panic>
  203e88:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
  203e8f:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  203e93:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  203e97:	72 10                	jb     203ea9 <Xoroshiro128_fill+0x339>
  203e99:	48 8d 3d 60 14 02 00 	lea    rdi,[rip+0x21460]        # 225300 <__unnamed_4>
  203ea0:	31 c0                	xor    eax,eax
  203ea2:	89 c6                	mov    esi,eax
  203ea4:	e8 17 f2 ff ff       	call   2030c0 <panic>
  203ea9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  203ead:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  203eb0:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  203eb4:	40 88 d6             	mov    sil,dl
  203eb7:	48 8b 95 58 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa8]
  203ebe:	40 88 34 11          	mov    BYTE PTR [rcx+rdx*1],sil
                n >>= 8;
  203ec2:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  203ec6:	48 c1 e9 08          	shr    rcx,0x8
  203eca:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
                buf[i + j] = @truncate(u8, n);
  203ece:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  203ed2:	48 83 c1 06          	add    rcx,0x6
  203ed6:	40 0f 92 c6          	setb   sil
  203eda:	48 89 8d 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rcx
  203ee1:	40 88 b5 47 ff ff ff 	mov    BYTE PTR [rbp-0xb9],sil
  203ee8:	72 02                	jb     203eec <Xoroshiro128_fill+0x37c>
  203eea:	eb 10                	jmp    203efc <Xoroshiro128_fill+0x38c>
  203eec:	48 8d 3d 25 14 02 00 	lea    rdi,[rip+0x21425]        # 225318 <__unnamed_5>
  203ef3:	31 c0                	xor    eax,eax
  203ef5:	89 c6                	mov    esi,eax
  203ef7:	e8 c4 f1 ff ff       	call   2030c0 <panic>
  203efc:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  203f03:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  203f07:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  203f0b:	72 10                	jb     203f1d <Xoroshiro128_fill+0x3ad>
  203f0d:	48 8d 3d ec 13 02 00 	lea    rdi,[rip+0x213ec]        # 225300 <__unnamed_4>
  203f14:	31 c0                	xor    eax,eax
  203f16:	89 c6                	mov    esi,eax
  203f18:	e8 a3 f1 ff ff       	call   2030c0 <panic>
  203f1d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  203f21:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  203f24:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  203f28:	40 88 d6             	mov    sil,dl
  203f2b:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
  203f32:	40 88 34 11          	mov    BYTE PTR [rcx+rdx*1],sil
                n >>= 8;
  203f36:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  203f3a:	48 c1 e9 08          	shr    rcx,0x8
  203f3e:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
                buf[i + j] = @truncate(u8, n);
  203f42:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  203f46:	48 83 c1 07          	add    rcx,0x7
  203f4a:	40 0f 92 c6          	setb   sil
  203f4e:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  203f55:	40 88 b5 37 ff ff ff 	mov    BYTE PTR [rbp-0xc9],sil
  203f5c:	72 02                	jb     203f60 <Xoroshiro128_fill+0x3f0>
  203f5e:	eb 10                	jmp    203f70 <Xoroshiro128_fill+0x400>
  203f60:	48 8d 3d b1 13 02 00 	lea    rdi,[rip+0x213b1]        # 225318 <__unnamed_5>
  203f67:	31 c0                	xor    eax,eax
  203f69:	89 c6                	mov    esi,eax
  203f6b:	e8 50 f1 ff ff       	call   2030c0 <panic>
  203f70:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  203f77:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  203f7b:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  203f7f:	72 10                	jb     203f91 <Xoroshiro128_fill+0x421>
  203f81:	48 8d 3d 78 13 02 00 	lea    rdi,[rip+0x21378]        # 225300 <__unnamed_4>
  203f88:	31 c0                	xor    eax,eax
  203f8a:	89 c6                	mov    esi,eax
  203f8c:	e8 2f f1 ff ff       	call   2030c0 <panic>
  203f91:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  203f95:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  203f98:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  203f9c:	40 88 d6             	mov    sil,dl
  203f9f:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
  203fa6:	40 88 34 11          	mov    BYTE PTR [rcx+rdx*1],sil
                n >>= 8;
  203faa:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  203fae:	48 c1 e9 08          	shr    rcx,0x8
  203fb2:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
        while (i < aligned_len) : (i += 8) {
  203fb6:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  203fba:	48 83 c1 08          	add    rcx,0x8
  203fbe:	40 0f 92 c6          	setb   sil
  203fc2:	48 89 8d 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rcx
  203fc9:	40 88 b5 27 ff ff ff 	mov    BYTE PTR [rbp-0xd9],sil
  203fd0:	72 02                	jb     203fd4 <Xoroshiro128_fill+0x464>
  203fd2:	eb 10                	jmp    203fe4 <Xoroshiro128_fill+0x474>
  203fd4:	48 8d 3d 3d 13 02 00 	lea    rdi,[rip+0x2133d]        # 225318 <__unnamed_5>
  203fdb:	31 c0                	xor    eax,eax
  203fdd:	89 c6                	mov    esi,eax
  203fdf:	e8 dc f0 ff ff       	call   2030c0 <panic>
  203fe4:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  203feb:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  203fef:	e9 c3 fb ff ff       	jmp    203bb7 <Xoroshiro128_fill+0x47>
  203ff4:	48 8d 3d 05 13 02 00 	lea    rdi,[rip+0x21305]        # 225300 <__unnamed_4>
  203ffb:	31 c0                	xor    eax,eax
  203ffd:	89 c6                	mov    esi,eax
                buf[i] = @truncate(u8, n);
  203fff:	e8 bc f0 ff ff       	call   2030c0 <panic>
  204004:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  204008:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  20400b:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  20400f:	40 88 d6             	mov    sil,dl
  204012:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  204016:	40 88 34 11          	mov    BYTE PTR [rcx+rdx*1],sil
                n >>= 8;
  20401a:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  20401e:	48 c1 e9 08          	shr    rcx,0x8
  204022:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
            while (i < buf.len) : (i += 1) {
  204026:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20402a:	48 83 c1 01          	add    rcx,0x1
  20402e:	40 0f 92 c6          	setb   sil
  204032:	48 89 8d 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rcx
  204039:	40 88 b5 17 ff ff ff 	mov    BYTE PTR [rbp-0xe9],sil
  204040:	72 02                	jb     204044 <Xoroshiro128_fill+0x4d4>
  204042:	eb 10                	jmp    204054 <Xoroshiro128_fill+0x4e4>
  204044:	48 8d 3d cd 12 02 00 	lea    rdi,[rip+0x212cd]        # 225318 <__unnamed_5>
  20404b:	31 c0                	xor    eax,eax
  20404d:	89 c6                	mov    esi,eax
  20404f:	e8 6c f0 ff ff       	call   2030c0 <panic>
  204054:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  20405b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  20405f:	e9 9b fb ff ff       	jmp    203bff <Xoroshiro128_fill+0x8f>
  204064:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20406b:	00 00 00 00 00 

0000000000204070 <Xoroshiro128_seed>:
    fn seed(self: *Xoroshiro128, init_s: u64) void {
  204070:	55                   	push   rbp
  204071:	48 89 e5             	mov    rbp,rsp
  204074:	48 83 ec 30          	sub    rsp,0x30
  204078:	48 8d 45 f8          	lea    rax,[rbp-0x8]
  20407c:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  204080:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
        var gen = SplitMix64.init(init_s);
  204084:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  204088:	48 89 c7             	mov    rdi,rax
  20408b:	e8 50 0e 00 00       	call   204ee0 <SplitMix64_init>
  204090:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
  204094:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  204098:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
        self.s[0] = gen.next();
  20409c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2040a0:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  2040a4:	e8 57 0e 00 00       	call   204f00 <SplitMix64_next>
  2040a9:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
  2040ad:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  2040b1:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
        self.s[1] = gen.next();
  2040b5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2040b9:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  2040bd:	e8 3e 0e 00 00       	call   204f00 <SplitMix64_next>
  2040c2:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  2040c6:	48 89 46 10          	mov    QWORD PTR [rsi+0x10],rax
    fn seed(self: *Xoroshiro128, init_s: u64) void {
  2040ca:	48 83 c4 30          	add    rsp,0x30
  2040ce:	5d                   	pop    rbp
  2040cf:	c3                   	ret    

00000000002040d0 <Random_bytes>:
    pub fn bytes(r: *Random, buf: []u8) void {
  2040d0:	55                   	push   rbp
  2040d1:	48 89 e5             	mov    rbp,rsp
  2040d4:	48 83 ec 10          	sub    rsp,0x10
  2040d8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
        r.fillFn(r, buf);
  2040dc:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  2040e0:	48 8b 3f             	mov    rdi,QWORD PTR [rdi]
  2040e3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2040e7:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  2040eb:	48 89 c7             	mov    rdi,rax
  2040ee:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2040f2:	ff d0                	call   rax
    pub fn bytes(r: *Random, buf: []u8) void {
  2040f4:	48 83 c4 10          	add    rsp,0x10
  2040f8:	5d                   	pop    rbp
  2040f9:	c3                   	ret    
  2040fa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000204100 <readInt>:

/// Reads an integer from memory with size equal to bytes.len.
/// T specifies the return type, which must be large enough to store
/// the result.
/// See also ::readIntBE or ::readIntLE.
pub fn readInt(bytes: []const u8, comptime T: type, endian: builtin.Endian) T {
  204100:	55                   	push   rbp
  204101:	48 89 e5             	mov    rbp,rsp
  204104:	48 83 ec 70          	sub    rsp,0x70
  204108:	40 88 f0             	mov    al,sil
  20410b:	24 01                	and    al,0x1
  20410d:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
    if (T.bit_count == 8) {
        return bytes[0];
    }
    var result: T = 0;
  204110:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
    switch (endian) {
  204117:	8a 45 ff             	mov    al,BYTE PTR [rbp-0x1]
  20411a:	84 c0                	test   al,al
  20411c:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
  204120:	88 45 cf             	mov    BYTE PTR [rbp-0x31],al
  204123:	75 7e                	jne    2041a3 <readInt+0xa3>
  204125:	eb 00                	jmp    204127 <readInt+0x27>
  204127:	8a 45 cf             	mov    al,BYTE PTR [rbp-0x31]
  20412a:	f6 d0                	not    al
  20412c:	a8 01                	test   al,0x1
  20412e:	0f 84 ee 00 00 00    	je     204222 <readInt+0x122>
  204134:	eb 00                	jmp    204136 <readInt+0x36>
  204136:	48 8d 7d f7          	lea    rdi,[rbp-0x9]
  20413a:	be aa 00 00 00       	mov    esi,0xaa
  20413f:	b8 01 00 00 00       	mov    eax,0x1
  204144:	89 c2                	mov    edx,eax
        builtin.Endian.Big => {
            for (bytes) |b| {
  204146:	e8 65 db 01 00       	call   221cb0 <memset>
  20414b:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
  204152:	00 
  204153:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  204157:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
  20415b:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
  20415f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  204163:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  204167:	48 39 c8             	cmp    rax,rcx
  20416a:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  20416e:	73 2e                	jae    20419e <readInt+0x9e>
  204170:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  204174:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  204177:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  20417b:	40 8a 34 11          	mov    sil,BYTE PTR [rcx+rdx*1]
  20417f:	40 88 75 f7          	mov    BYTE PTR [rbp-0x9],sil
                result = (result << 8) | b;
  204183:	8b 7d f8             	mov    edi,DWORD PTR [rbp-0x8]
  204186:	c1 e7 08             	shl    edi,0x8
  204189:	44 0f b6 45 f7       	movzx  r8d,BYTE PTR [rbp-0x9]
  20418e:	44 09 c7             	or     edi,r8d
  204191:	89 7d f8             	mov    DWORD PTR [rbp-0x8],edi
            for (bytes) |b| {
  204194:	48 83 c2 01          	add    rdx,0x1
  204198:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  20419c:	eb c1                	jmp    20415f <readInt+0x5f>
    switch (endian) {
  20419e:	e9 8f 00 00 00       	jmp    204232 <readInt+0x132>
  2041a3:	48 8d 7d e7          	lea    rdi,[rbp-0x19]
  2041a7:	be aa 00 00 00       	mov    esi,0xaa
  2041ac:	b8 01 00 00 00       	mov    eax,0x1
  2041b1:	89 c2                	mov    edx,eax
            }
        },
        builtin.Endian.Little => {
            const ShiftType = math.Log2Int(T);
            for (bytes) |b, index| {
  2041b3:	e8 f8 da 01 00       	call   221cb0 <memset>
  2041b8:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
  2041bf:	00 
  2041c0:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  2041c4:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
  2041c8:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  2041cc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2041d0:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  2041d4:	48 39 c8             	cmp    rax,rcx
  2041d7:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  2041db:	73 43                	jae    204220 <readInt+0x120>
  2041dd:	b8 08 00 00 00       	mov    eax,0x8
  2041e2:	89 c1                	mov    ecx,eax
  2041e4:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  2041e8:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
  2041eb:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  2041ef:	44 8a 04 3e          	mov    r8b,BYTE PTR [rsi+rdi*1]
  2041f3:	44 88 45 e7          	mov    BYTE PTR [rbp-0x19],r8b
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  2041f7:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  2041fa:	44 0f b6 4d e7       	movzx  r9d,BYTE PTR [rbp-0x19]
  2041ff:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  204203:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
  204206:	48 89 f0             	mov    rax,rsi
  204209:	48 f7 e1             	mul    rcx
  20420c:	41 0f 90 c0          	seto   r8b
  204210:	44 89 4d a0          	mov    DWORD PTR [rbp-0x60],r9d
  204214:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  204218:	44 88 45 97          	mov    BYTE PTR [rbp-0x69],r8b
  20421c:	70 1d                	jo     20423b <readInt+0x13b>
  20421e:	eb 2b                	jmp    20424b <readInt+0x14b>
    switch (endian) {
  204220:	eb 10                	jmp    204232 <readInt+0x132>
  204222:	48 8d 3d 97 11 02 00 	lea    rdi,[rip+0x21197]        # 2253c0 <__unnamed_7>
  204229:	31 c0                	xor    eax,eax
  20422b:	89 c6                	mov    esi,eax
  20422d:	e8 8e ee ff ff       	call   2030c0 <panic>
            }
        },
    }
    return result;
  204232:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  204235:	48 83 c4 70          	add    rsp,0x70
  204239:	5d                   	pop    rbp
  20423a:	c3                   	ret    
  20423b:	48 8d 3d d6 10 02 00 	lea    rdi,[rip+0x210d6]        # 225318 <__unnamed_5>
  204242:	31 c0                	xor    eax,eax
  204244:	89 c6                	mov    esi,eax
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  204246:	e8 75 ee ff ff       	call   2030c0 <panic>
  20424b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  20424f:	88 c1                	mov    cl,al
  204251:	89 c2                	mov    edx,eax
  204253:	83 e2 1f             	and    edx,0x1f
  204256:	89 d6                	mov    esi,edx
  204258:	48 39 f0             	cmp    rax,rsi
  20425b:	88 4d 96             	mov    BYTE PTR [rbp-0x6a],cl
  20425e:	75 26                	jne    204286 <readInt+0x186>
  204260:	8a 45 96             	mov    al,BYTE PTR [rbp-0x6a]
  204263:	24 1f                	and    al,0x1f
  204265:	0f b6 c8             	movzx  ecx,al
  204268:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
  20426b:	d3 e2                	shl    edx,cl
  20426d:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
  204270:	09 d6                	or     esi,edx
  204272:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
            for (bytes) |b, index| {
  204275:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  204279:	48 83 c7 01          	add    rdi,0x1
  20427d:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  204281:	e9 46 ff ff ff       	jmp    2041cc <readInt+0xcc>
  204286:	48 8d 3d 1b 11 02 00 	lea    rdi,[rip+0x2111b]        # 2253a8 <__unnamed_8>
  20428d:	31 c0                	xor    eax,eax
  20428f:	89 c6                	mov    esi,eax
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  204291:	e8 2a ee ff ff       	call   2030c0 <panic>
  204296:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  20429d:	00 00 00 

00000000002042a0 <futex_wait>:
pub fn futex_wait(pVal: *u32, expected_value: u32) void {
  2042a0:	55                   	push   rbp
  2042a1:	48 89 e5             	mov    rbp,rsp
  2042a4:	48 83 ec 30          	sub    rsp,0x30
  2042a8:	b8 ca 00 00 00       	mov    eax,0xca
  2042ad:	89 c1                	mov    ecx,eax
  2042af:	31 c0                	xor    eax,eax
  2042b1:	89 c2                	mov    edx,eax
  2042b3:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  2042b7:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
    _ = syscall4(SYS_futex, @ptrToInt(pVal), linux.FUTEX_WAIT, expected_value, 0);
  2042ba:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2042be:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  2042c1:	89 c7                	mov    edi,eax
  2042c3:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  2042c7:	48 89 cf             	mov    rdi,rcx
  2042ca:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  2042ce:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2042d2:	4c 8b 45 e0          	mov    r8,QWORD PTR [rbp-0x20]
  2042d6:	e8 a5 0c 00 00       	call   204f80 <syscall4>
pub fn futex_wait(pVal: *u32, expected_value: u32) void {
  2042db:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  2042df:	48 83 c4 30          	add    rsp,0x30
  2042e3:	5d                   	pop    rbp
  2042e4:	c3                   	ret    
  2042e5:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2042ec:	00 00 00 00 

00000000002042f0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.10>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  2042f0:	55                   	push   rbp
  2042f1:	48 89 e5             	mov    rbp,rsp
  2042f4:	48 83 ec 20          	sub    rsp,0x20
  2042f8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2042fc:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
            return std.fmt.format(self, Error, self.writeFn, format, args);
  2042ff:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  204303:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  204307:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  20430a:	8b 4d f4             	mov    ecx,DWORD PTR [rbp-0xc]
  20430d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  204311:	e8 9a 0c 00 00       	call   204fb0 <format.13>
  204316:	66 83 f8 00          	cmp    ax,0x0
  20431a:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
  20431e:	74 0b                	je     20432b <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.10+0x3b>
  204320:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  204324:	e8 27 01 00 00       	call   204450 <__zig_return_error>
  204329:	eb 02                	jmp    20432d <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.10+0x3d>
  20432b:	eb 00                	jmp    20432d <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.10+0x3d>
  20432d:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
  204331:	48 83 c4 20          	add    rsp,0x20
  204335:	5d                   	pop    rbp
  204336:	c3                   	ret    
  204337:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  20433e:	00 00 

0000000000204340 <raise>:
pub const SIG_ERR = @intToPtr(extern fn (i32) void, @maxValue(usize));
pub const SIG_DFL = @intToPtr(extern fn (i32) void, 0);
pub const SIG_IGN = @intToPtr(extern fn (i32) void, 1);
pub const empty_sigset = []usize{0} ** sigset_t.len;

pub fn raise(sig: i32) usize {
  204340:	55                   	push   rbp
  204341:	48 89 e5             	mov    rbp,rsp
  204344:	48 81 ec b0 00 00 00 	sub    rsp,0xb0
  20434b:	48 8d 85 78 ff ff ff 	lea    rax,[rbp-0x88]
  204352:	48 8d 0d 5f c2 ff ff 	lea    rcx,[rip+0xffffffffffffc25f]        # 2005b8 <__unnamed_9>
  204359:	ba 80 00 00 00       	mov    edx,0x80
  20435e:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    var set: sigset_t = undefined;
  204361:	48 89 c6             	mov    rsi,rax
  204364:	48 89 f7             	mov    rdi,rsi
  204367:	48 89 ce             	mov    rsi,rcx
  20436a:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  204371:	e8 8a d9 01 00       	call   221d00 <memcpy>
    blockAppSignals(&set);
  204376:	48 8b bd 60 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  20437d:	e8 5e 0d 00 00       	call   2050e0 <blockAppSignals>
  204382:	41 b8 ba 00 00 00    	mov    r8d,0xba
  204388:	44 89 c7             	mov    edi,r8d
    const tid = @intCast(i32, syscall0(SYS_gettid));
  20438b:	e8 a0 0d 00 00       	call   205130 <syscall0>
  204390:	41 89 c0             	mov    r8d,eax
  204393:	49 63 c8             	movsxd rcx,r8d
  204396:	48 39 c8             	cmp    rax,rcx
  204399:	44 89 85 5c ff ff ff 	mov    DWORD PTR [rbp-0xa4],r8d
  2043a0:	75 46                	jne    2043e8 <raise+0xa8>
  2043a2:	b8 c8 00 00 00       	mov    eax,0xc8
  2043a7:	89 c7                	mov    edi,eax
  2043a9:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
  2043af:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
    const ret = syscall2(SYS_tkill, @intCast(usize, tid), @intCast(usize, sig));
  2043b5:	48 63 b5 74 ff ff ff 	movsxd rsi,DWORD PTR [rbp-0x8c]
  2043bc:	48 63 55 fc          	movsxd rdx,DWORD PTR [rbp-0x4]
  2043c0:	e8 7b 0d 00 00       	call   205140 <syscall2>
  2043c5:	48 8d bd 78 ff ff ff 	lea    rdi,[rbp-0x88]
  2043cc:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
    restoreSignals(&set);
  2043d3:	e8 88 0d 00 00       	call   205160 <restoreSignals>
    return ret;
  2043d8:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  2043df:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  2043e6:	5d                   	pop    rbp
  2043e7:	c3                   	ret    
  2043e8:	48 8d 3d b9 0f 02 00 	lea    rdi,[rip+0x20fb9]        # 2253a8 <__unnamed_8>
  2043ef:	31 c0                	xor    eax,eax
  2043f1:	89 c6                	mov    esi,eax
    const tid = @intCast(i32, syscall0(SYS_gettid));
  2043f3:	e8 c8 ec ff ff       	call   2030c0 <panic>
  2043f8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  2043ff:	00 

0000000000204400 <getStdErr>:
pub fn getStdErr() GetStdIoErrs!File {
  204400:	55                   	push   rbp
  204401:	48 89 e5             	mov    rbp,rsp
  204404:	48 83 ec 20          	sub    rsp,0x20
  204408:	48 89 f8             	mov    rax,rdi
  20440b:	48 8d 4d f8          	lea    rcx,[rbp-0x8]
  20440f:	be 02 00 00 00       	mov    esi,0x2
    return File.openHandle(handle);
  204414:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  204418:	48 89 cf             	mov    rdi,rcx
  20441b:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  20441f:	e8 9c 00 00 00       	call   2044c0 <File_openHandle>
  204424:	66 c7 45 f0 00 00    	mov    WORD PTR [rbp-0x10],0x0
  20442a:	8b 75 f8             	mov    esi,DWORD PTR [rbp-0x8]
  20442d:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
  204430:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  204434:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  204438:	48 89 01             	mov    QWORD PTR [rcx],rax
  20443b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20443f:	48 83 c4 20          	add    rsp,0x20
  204443:	5d                   	pop    rbp
  204444:	c3                   	ret    
  204445:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20444c:	00 00 00 00 

0000000000204450 <__zig_return_error>:
  204450:	55                   	push   rbp
  204451:	48 89 e5             	mov    rbp,rsp
  204454:	48 8b 45 08          	mov    rax,QWORD PTR [rbp+0x8]
  204458:	48 8b 4f 10          	mov    rcx,QWORD PTR [rdi+0x10]
  20445c:	48 8b 17             	mov    rdx,QWORD PTR [rdi]
  20445f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  204463:	48 89 d0             	mov    rax,rdx
  204466:	31 f6                	xor    esi,esi
  204468:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  20446c:	89 f2                	mov    edx,esi
  20446e:	48 f7 f1             	div    rcx
  204471:	48 8b 4f 08          	mov    rcx,QWORD PTR [rdi+0x8]
  204475:	4c 8b 45 f8          	mov    r8,QWORD PTR [rbp-0x8]
  204479:	4c 89 04 d1          	mov    QWORD PTR [rcx+rdx*8],r8
  20447d:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  204481:	48 83 c1 01          	add    rcx,0x1
  204485:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  204488:	5d                   	pop    rbp
  204489:	c3                   	ret    
  20448a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000204490 <FileOutStream_init>:
    pub fn init(file: *File) FileOutStream {
  204490:	55                   	push   rbp
  204491:	48 89 e5             	mov    rbp,rsp
  204494:	48 89 f8             	mov    rax,rdi
  204497:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
            .file = file,
  20449b:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
        return FileOutStream{
  20449f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  2044a3:	48 8b 35 d6 0e 02 00 	mov    rsi,QWORD PTR [rip+0x20ed6]        # 225380 <__unnamed_10>
  2044aa:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2044ae:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  2044b2:	48 89 37             	mov    QWORD PTR [rdi],rsi
  2044b5:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2044b9:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  2044bd:	5d                   	pop    rbp
  2044be:	c3                   	ret    
  2044bf:	90                   	nop

00000000002044c0 <File_openHandle>:
        } else {
            @compileError("TODO implement openWriteMode for this OS");
        }
    }

    pub fn openHandle(handle: os.FileHandle) File {
  2044c0:	55                   	push   rbp
  2044c1:	48 89 e5             	mov    rbp,rsp
  2044c4:	48 89 f8             	mov    rax,rdi
  2044c7:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
        return File{ .handle = handle };
  2044ca:	8b 75 f4             	mov    esi,DWORD PTR [rbp-0xc]
  2044cd:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
  2044d0:	8b 75 f8             	mov    esi,DWORD PTR [rbp-0x8]
  2044d3:	89 37                	mov    DWORD PTR [rdi],esi
  2044d5:	5d                   	pop    rbp
  2044d6:	c3                   	ret    
  2044d7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  2044de:	00 00 

00000000002044e0 <FileOutStream_writeFn>:
    fn writeFn(out_stream: *Stream, bytes: []const u8) !void {
  2044e0:	55                   	push   rbp
  2044e1:	48 89 e5             	mov    rbp,rsp
  2044e4:	48 83 ec 20          	sub    rsp,0x20
  2044e8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
        const self = @fieldParentPtr(FileOutStream, "stream", out_stream);
  2044ec:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2044f0:	48 83 ee 08          	sub    rsi,0x8
  2044f4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
        return self.file.write(bytes);
  2044f8:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  2044fc:	48 8b 36             	mov    rsi,QWORD PTR [rsi]
  2044ff:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  204503:	e8 a8 0c 00 00       	call   2051b0 <File_write>
  204508:	66 83 f8 00          	cmp    ax,0x0
  20450c:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
  204510:	74 0b                	je     20451d <FileOutStream_writeFn+0x3d>
  204512:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  204516:	e8 35 ff ff ff       	call   204450 <__zig_return_error>
  20451b:	eb 02                	jmp    20451f <FileOutStream_writeFn+0x3f>
  20451d:	eb 00                	jmp    20451f <FileOutStream_writeFn+0x3f>
  20451f:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
  204523:	48 83 c4 20          	add    rsp,0x20
  204527:	5d                   	pop    rbp
  204528:	c3                   	ret    
  204529:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000204530 <format>:
const max_int_digits = 65;

/// Renders fmt string with args, calling output with slices of bytes.
/// If `output` returns an error, the error is returned from `format` and
/// `output` is not called again.
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  204530:	55                   	push   rbp
  204531:	48 89 e5             	mov    rbp,rsp
  204534:	48 83 ec 30          	sub    rsp,0x30
  204538:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  20453c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
                '{' => {
                    state = State.Start;
                    start_index = i;
                },
                '}' => {
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  204540:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  204544:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  204548:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  20454c:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  204550:	48 89 ce             	mov    rsi,rcx
  204553:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  204557:	e8 74 00 00 00       	call   2045d0 <formatType>
  20455c:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  204560:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  204565:	74 1b                	je     204582 <format+0x52>
  204567:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  20456b:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  20456f:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  204573:	e8 d8 fe ff ff       	call   204450 <__zig_return_error>
  204578:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  20457c:	48 83 c4 30          	add    rsp,0x30
  204580:	5d                   	pop    rbp
  204581:	c3                   	ret    
  204582:	48 8d 15 07 0e 02 00 	lea    rdx,[rip+0x20e07]        # 225390 <__unnamed_11>
        if (state != State.Start) {
            @compileError("Incomplete format string: " ++ fmt);
        }
    }
    if (start_index < fmt.len) {
        try output(context, fmt[start_index..]);
  204589:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20458d:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  204591:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  204595:	ff d0                	call   rax
  204597:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  20459b:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  2045a0:	74 1b                	je     2045bd <format+0x8d>
  2045a2:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  2045a6:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2045aa:	66 89 45 d4          	mov    WORD PTR [rbp-0x2c],ax
  2045ae:	e8 9d fe ff ff       	call   204450 <__zig_return_error>
  2045b3:	66 8b 45 d4          	mov    ax,WORD PTR [rbp-0x2c]
  2045b7:	48 83 c4 30          	add    rsp,0x30
  2045bb:	5d                   	pop    rbp
  2045bc:	c3                   	ret    
  2045bd:	31 c0                	xor    eax,eax
  2045bf:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  2045c2:	66 89 c8             	mov    ax,cx
  2045c5:	48 83 c4 30          	add    rsp,0x30
  2045c9:	5d                   	pop    rbp
  2045ca:	c3                   	ret    
  2045cb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000002045d0 <formatType>:
    }
}

pub fn formatType(
  2045d0:	55                   	push   rbp
  2045d1:	48 89 e5             	mov    rbp,rsp
  2045d4:	48 83 ec 30          	sub    rsp,0x30
  2045d8:	48 8d 45 e0          	lea    rax,[rbp-0x20]
  2045dc:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  2045e0:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
                    }
                }
                return format(context, Errors, output, "{}@{x}", @typeName(T.Child), @ptrToInt(value));
            },
            builtin.TypeInfo.Pointer.Size.Slice => {
                const casted_value = ([]const u8)(value);
  2045e4:	48 8b 0e             	mov    rcx,QWORD PTR [rsi]
  2045e7:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  2045eb:	48 8b 4e 08          	mov    rcx,QWORD PTR [rsi+0x8]
  2045ef:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
                return output(context, casted_value);
  2045f3:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  2045f7:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2045fb:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  2045ff:	48 89 c2             	mov    rdx,rax
  204602:	ff d1                	call   rcx
  204604:	66 83 f8 00          	cmp    ax,0x0
  204608:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  20460c:	74 0b                	je     204619 <formatType+0x49>
  20460e:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  204612:	e8 39 fe ff ff       	call   204450 <__zig_return_error>
  204617:	eb 02                	jmp    20461b <formatType+0x4b>
  204619:	eb 00                	jmp    20461b <formatType+0x4b>
  20461b:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  20461f:	48 83 c4 30          	add    rsp,0x30
  204623:	5d                   	pop    rbp
  204624:	c3                   	ret    
  204625:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20462c:	00 00 00 00 

0000000000204630 <getSelfDebugInfo>:
pub fn getSelfDebugInfo() !*ElfStackTrace {
  204630:	55                   	push   rbp
  204631:	48 89 e5             	mov    rbp,rsp
  204634:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  20463b:	48 89 f8             	mov    rax,rdi
    if (self_debug_info) |info| {
  20463e:	48 83 3d ca 19 02 00 	cmp    QWORD PTR [rip+0x219ca],0x0        # 226010 <self_debug_info>
  204645:	00 
  204646:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  20464a:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
  20464e:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
  204652:	74 39                	je     20468d <getSelfDebugInfo+0x5d>
  204654:	48 8b 05 b5 19 02 00 	mov    rax,QWORD PTR [rip+0x219b5]        # 226010 <self_debug_info>
  20465b:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
        return info;
  20465f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  204663:	66 c7 45 f0 00 00    	mov    WORD PTR [rbp-0x10],0x0
  204669:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  20466d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  204671:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  204675:	48 89 01             	mov    QWORD PTR [rcx],rax
  204678:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20467c:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  204680:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  204684:	48 81 c4 80 00 00 00 	add    rsp,0x80
  20468b:	5d                   	pop    rbp
  20468c:	c3                   	ret    
        const info = try openSelfDebugInfo(getDebugInfoAllocator());
  20468d:	e8 ee 00 00 00       	call   204780 <getDebugInfoAllocator>
  204692:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
  204696:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  20469a:	48 89 c2             	mov    rdx,rax
  20469d:	e8 2e 0e 00 00       	call   2054d0 <openSelfDebugInfo>
  2046a2:	66 83 7d e0 00       	cmp    WORD PTR [rbp-0x20],0x0
  2046a7:	74 39                	je     2046e2 <getSelfDebugInfo+0xb2>
  2046a9:	66 8b 45 e0          	mov    ax,WORD PTR [rbp-0x20]
  2046ad:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  2046b1:	66 89 45 86          	mov    WORD PTR [rbp-0x7a],ax
  2046b5:	e8 96 fd ff ff       	call   204450 <__zig_return_error>
  2046ba:	66 8b 45 86          	mov    ax,WORD PTR [rbp-0x7a]
  2046be:	66 89 45 c0          	mov    WORD PTR [rbp-0x40],ax
  2046c2:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  2046c6:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  2046ca:	48 89 39             	mov    QWORD PTR [rcx],rdi
  2046cd:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2046d1:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  2046d5:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  2046d9:	48 81 c4 80 00 00 00 	add    rsp,0x80
  2046e0:	5d                   	pop    rbp
  2046e1:	c3                   	ret    
  2046e2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2046e6:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        self_debug_info = info;
  2046ea:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2046ee:	48 89 05 1b 19 02 00 	mov    QWORD PTR [rip+0x2191b],rax        # 226010 <self_debug_info>
        return info;
  2046f5:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2046f9:	66 c7 45 b0 00 00    	mov    WORD PTR [rbp-0x50],0x0
  2046ff:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  204703:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  204707:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  20470b:	48 89 01             	mov    QWORD PTR [rcx],rax
  20470e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  204712:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  204716:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  20471a:	48 81 c4 80 00 00 00 	add    rsp,0x80
  204721:	5d                   	pop    rbp
  204722:	c3                   	ret    
  204723:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20472a:	84 00 00 00 00 00 

0000000000204730 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.11>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  204730:	55                   	push   rbp
  204731:	48 89 e5             	mov    rbp,rsp
  204734:	48 83 ec 20          	sub    rsp,0x20
  204738:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
            return std.fmt.format(self, Error, self.writeFn, format, args);
  20473c:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  204740:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  204744:	48 8b 00             	mov    rax,QWORD PTR [rax]
  204747:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  20474b:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  20474f:	48 89 c2             	mov    rdx,rax
  204752:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  204756:	e8 e5 eb 00 00       	call   213340 <format.40>
  20475b:	66 83 f8 00          	cmp    ax,0x0
  20475f:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
  204763:	74 0b                	je     204770 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.11+0x40>
  204765:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  204769:	e8 e2 fc ff ff       	call   204450 <__zig_return_error>
  20476e:	eb 02                	jmp    204772 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.11+0x42>
  204770:	eb 00                	jmp    204772 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.11+0x42>
  204772:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
  204776:	48 83 c4 20          	add    rsp,0x20
  20477a:	5d                   	pop    rbp
  20477b:	c3                   	ret    
  20477c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000204780 <getDebugInfoAllocator>:

// TODO make thread safe
var debug_info_allocator: ?*mem.Allocator = null;
var debug_info_direct_allocator: std.heap.DirectAllocator = undefined;
var debug_info_arena_allocator: std.heap.ArenaAllocator = undefined;
fn getDebugInfoAllocator() *mem.Allocator {
  204780:	55                   	push   rbp
  204781:	48 89 e5             	mov    rbp,rsp
    if (debug_info_allocator) |a| return a;
  204784:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  20478b:	48 83 3d 85 18 02 00 	cmp    QWORD PTR [rip+0x21885],0x0        # 226018 <debug_info_allocator>
  204792:	00 
  204793:	74 18                	je     2047ad <getDebugInfoAllocator+0x2d>
  204795:	48 8b 05 7c 18 02 00 	mov    rax,QWORD PTR [rip+0x2187c]        # 226018 <debug_info_allocator>
  20479c:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  2047a0:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  2047a4:	48 81 c4 80 00 00 00 	add    rsp,0x80
  2047ab:	5d                   	pop    rbp
  2047ac:	c3                   	ret    
  2047ad:	eb 00                	jmp    2047af <getDebugInfoAllocator+0x2f>
  2047af:	48 8d 7d e0          	lea    rdi,[rbp-0x20]

    debug_info_direct_allocator = std.heap.DirectAllocator.init();
  2047b3:	e8 a8 4f 00 00       	call   209760 <DirectAllocator_init>
  2047b8:	48 8d 7d a0          	lea    rdi,[rbp-0x60]
  2047bc:	48 8d 35 5d f8 01 00 	lea    rsi,[rip+0x1f85d]        # 224020 <debug_info_direct_allocator>
  2047c3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2047c7:	48 89 05 52 f8 01 00 	mov    QWORD PTR [rip+0x1f852],rax        # 224020 <debug_info_direct_allocator>
  2047ce:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2047d2:	48 89 05 4f f8 01 00 	mov    QWORD PTR [rip+0x1f84f],rax        # 224028 <debug_info_direct_allocator+0x8>
  2047d9:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2047dd:	48 89 05 4c f8 01 00 	mov    QWORD PTR [rip+0x1f84c],rax        # 224030 <debug_info_direct_allocator+0x10>
  2047e4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2047e8:	48 89 05 49 f8 01 00 	mov    QWORD PTR [rip+0x1f849],rax        # 224038 <debug_info_direct_allocator+0x18>
    debug_info_arena_allocator = std.heap.ArenaAllocator.init(&debug_info_direct_allocator.allocator);
  2047ef:	e8 ac 4f 00 00       	call   2097a0 <ArenaAllocator_init>
  2047f4:	48 8d 05 45 f8 01 00 	lea    rax,[rip+0x1f845]        # 224040 <debug_info_arena_allocator>
  2047fb:	48 89 c6             	mov    rsi,rax
  2047fe:	b9 40 00 00 00       	mov    ecx,0x40
  204803:	89 ca                	mov    edx,ecx
  204805:	48 8d 7d a0          	lea    rdi,[rbp-0x60]
  204809:	48 89 7d 90          	mov    QWORD PTR [rbp-0x70],rdi
  20480d:	48 89 f7             	mov    rdi,rsi
  204810:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  204814:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  204818:	e8 e3 d4 01 00       	call   221d00 <memcpy>
    debug_info_allocator = &debug_info_arena_allocator.allocator;
  20481d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  204821:	48 89 05 f0 17 02 00 	mov    QWORD PTR [rip+0x217f0],rax        # 226018 <debug_info_allocator>
    return &debug_info_arena_allocator.allocator;
  204828:	48 81 c4 80 00 00 00 	add    rsp,0x80
  20482f:	5d                   	pop    rbp
  204830:	c3                   	ret    
  204831:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  204838:	0f 1f 84 00 00 00 00 
  20483f:	00 

0000000000204840 <wantTtyColor>:
fn wantTtyColor() bool {
  204840:	55                   	push   rbp
  204841:	48 89 e5             	mov    rbp,rsp
  204844:	48 81 ec 50 02 00 00 	sub    rsp,0x250
  20484b:	b0 01                	mov    al,0x1
  20484d:	48 8d 35 a6 c2 ff ff 	lea    rsi,[rip+0xffffffffffffc2a6]        # 200afa <__unnamed_12>
  204854:	b9 80 00 00 00       	mov    ecx,0x80
  204859:	89 ca                	mov    edx,ecx
  20485b:	48 8d bd d8 fd ff ff 	lea    rdi,[rbp-0x228]
  204862:	4c 8d 85 10 ff ff ff 	lea    r8,[rbp-0xf0]
  204869:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  204870:	00 00 00 00 
  204874:	4c 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],r8
  20487b:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  204882:	1e 00 00 00 
    var bytes: [128]u8 = undefined;
  204886:	88 85 bd fd ff ff    	mov    BYTE PTR [rbp-0x243],al
  20488c:	e8 6f d4 01 00       	call   221d00 <memcpy>
    const allocator = &std.heap.FixedBufferAllocator.init(bytes[0..]).allocator;
  204891:	8a 85 bd fd ff ff    	mov    al,BYTE PTR [rbp-0x243]
  204897:	a8 01                	test   al,0x1
  204899:	75 67                	jne    204902 <wantTtyColor+0xc2>
  20489b:	eb 55                	jmp    2048f2 <wantTtyColor+0xb2>
  20489d:	b0 01                	mov    al,0x1
    return if (std.os.getEnvVarOwned(allocator, "ZIG_DEBUG_COLOR")) |_| true else |_| stderr_file.isTty();
  20489f:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  2048a6:	48 89 8d c0 fd ff ff 	mov    QWORD PTR [rbp-0x240],rcx
  2048ad:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
  2048b4:	48 89 8d c8 fd ff ff 	mov    QWORD PTR [rbp-0x238],rcx
  2048bb:	88 85 bc fd ff ff    	mov    BYTE PTR [rbp-0x244],al
  2048c1:	eb 20                	jmp    2048e3 <wantTtyColor+0xa3>
  2048c3:	48 8d 3d 36 f7 01 00 	lea    rdi,[rip+0x1f736]        # 224000 <stderr_file>
  2048ca:	66 8b 85 70 fe ff ff 	mov    ax,WORD PTR [rbp-0x190]
  2048d1:	66 89 85 be fd ff ff 	mov    WORD PTR [rbp-0x242],ax
  2048d8:	e8 83 ec 00 00       	call   213560 <File_isTty>
  2048dd:	88 85 bc fd ff ff    	mov    BYTE PTR [rbp-0x244],al
  2048e3:	8a 85 bc fd ff ff    	mov    al,BYTE PTR [rbp-0x244]
  2048e9:	48 81 c4 50 02 00 00 	add    rsp,0x250
  2048f0:	5d                   	pop    rbp
  2048f1:	c3                   	ret    
  2048f2:	48 8d 3d 07 0a 02 00 	lea    rdi,[rip+0x20a07]        # 225300 <__unnamed_4>
  2048f9:	31 c0                	xor    eax,eax
  2048fb:	89 c6                	mov    esi,eax
    const allocator = &std.heap.FixedBufferAllocator.init(bytes[0..]).allocator;
  2048fd:	e8 be e7 ff ff       	call   2030c0 <panic>
  204902:	48 8d bd b8 fe ff ff 	lea    rdi,[rbp-0x148]
  204909:	48 8d b5 e8 fe ff ff 	lea    rsi,[rbp-0x118]
  204910:	48 8d 85 d8 fd ff ff 	lea    rax,[rbp-0x228]
  204917:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  20491e:	48 c7 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],0x80
  204925:	80 00 00 00 
  204929:	e8 82 4f 00 00       	call   2098b0 <FixedBufferAllocator_init>
  20492e:	48 8d bd 70 fe ff ff 	lea    rdi,[rbp-0x190]
  204935:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  20493c:	48 8d 0d 7d 0c 02 00 	lea    rcx,[rip+0x20c7d]        # 2255c0 <__unnamed_13>
  204943:	48 8d 85 b8 fe ff ff 	lea    rax,[rbp-0x148]
  20494a:	48 89 85 d0 fd ff ff 	mov    QWORD PTR [rbp-0x230],rax
    return if (std.os.getEnvVarOwned(allocator, "ZIG_DEBUG_COLOR")) |_| true else |_| stderr_file.isTty();
  204951:	48 8b 95 d0 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x230]
  204958:	e8 23 eb 00 00       	call   213480 <getEnvVarOwned>
  20495d:	66 83 bd 70 fe ff ff 	cmp    WORD PTR [rbp-0x190],0x0
  204964:	00 
  204965:	0f 85 58 ff ff ff    	jne    2048c3 <wantTtyColor+0x83>
  20496b:	e9 2d ff ff ff       	jmp    20489d <wantTtyColor+0x5d>

0000000000204970 <writeStackTrace>:
pub fn writeStackTrace(stack_trace: *const builtin.StackTrace, out_stream: var, allocator: *mem.Allocator, debug_info: *ElfStackTrace, tty_color: bool) !void {
  204970:	55                   	push   rbp
  204971:	48 89 e5             	mov    rbp,rsp
  204974:	41 56                	push   r14
  204976:	53                   	push   rbx
  204977:	48 81 ec c0 00 00 00 	sub    rsp,0xc0
  20497e:	44 88 c8             	mov    al,r9b
  204981:	41 b9 aa 00 00 00    	mov    r9d,0xaa
  204987:	41 ba 08 00 00 00    	mov    r10d,0x8
  20498d:	45 89 d3             	mov    r11d,r10d
  204990:	48 8d 5d b0          	lea    rbx,[rbp-0x50]
  204994:	4c 8d 75 b8          	lea    r14,[rbp-0x48]
  204998:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  20499c:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  2049a0:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  2049a4:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
  2049a8:	24 01                	and    al,0x1
  2049aa:	88 45 c7             	mov    BYTE PTR [rbp-0x39],al
    var frame_index: usize = undefined;
  2049ad:	48 89 7d a0          	mov    QWORD PTR [rbp-0x60],rdi
  2049b1:	4c 89 f7             	mov    rdi,r14
  2049b4:	44 89 ce             	mov    esi,r9d
  2049b7:	4c 89 da             	mov    rdx,r11
  2049ba:	48 89 5d 98          	mov    QWORD PTR [rbp-0x68],rbx
  2049be:	4c 89 5d 90          	mov    QWORD PTR [rbp-0x70],r11
  2049c2:	44 89 4d 8c          	mov    DWORD PTR [rbp-0x74],r9d
  2049c6:	e8 e5 d2 01 00       	call   221cb0 <memset>
    var frames_left: usize = undefined;
  2049cb:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  2049cf:	48 89 cf             	mov    rdi,rcx
  2049d2:	8b 75 8c             	mov    esi,DWORD PTR [rbp-0x74]
  2049d5:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
  2049d9:	e8 d2 d2 01 00       	call   221cb0 <memset>
    if (stack_trace.index < stack_trace.instruction_addresses.len) {
  2049de:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  2049e2:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  2049e5:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  2049e9:	48 3b 4a 10          	cmp    rcx,QWORD PTR [rdx+0x10]
  2049ed:	73 15                	jae    204a04 <writeStackTrace+0x94>
        frame_index = 0;
  2049ef:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
  2049f6:	00 
        frames_left = stack_trace.index;
  2049f7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2049fb:	48 8b 00             	mov    rax,QWORD PTR [rax]
  2049fe:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
    if (stack_trace.index < stack_trace.instruction_addresses.len) {
  204a02:	eb 23                	jmp    204a27 <writeStackTrace+0xb7>
        frame_index = (stack_trace.index + 1) % stack_trace.instruction_addresses.len;
  204a04:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  204a08:	48 8b 00             	mov    rax,QWORD PTR [rax]
  204a0b:	48 83 c0 01          	add    rax,0x1
  204a0f:	0f 92 c1             	setb   cl
  204a12:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  204a16:	88 8d 7f ff ff ff    	mov    BYTE PTR [rbp-0x81],cl
  204a1c:	0f 82 98 00 00 00    	jb     204aba <writeStackTrace+0x14a>
  204a22:	e9 a3 00 00 00       	jmp    204aca <writeStackTrace+0x15a>
    while (frames_left != 0) : ({
  204a27:	eb 00                	jmp    204a29 <writeStackTrace+0xb9>
  204a29:	48 83 7d b0 00       	cmp    QWORD PTR [rbp-0x50],0x0
  204a2e:	74 76                	je     204aa6 <writeStackTrace+0x136>
        const return_address = stack_trace.instruction_addresses[frame_index];
  204a30:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  204a34:	48 89 c1             	mov    rcx,rax
  204a37:	48 83 c1 08          	add    rcx,0x8
  204a3b:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  204a3f:	48 3b 50 10          	cmp    rdx,QWORD PTR [rax+0x10]
  204a43:	48 89 95 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdx
  204a4a:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
  204a51:	0f 82 cf 00 00 00    	jb     204b26 <writeStackTrace+0x1b6>
  204a57:	e9 ba 00 00 00       	jmp    204b16 <writeStackTrace+0x1a6>
        try printSourceAtAddress(debug_info, out_stream, return_address, tty_color);
  204a5c:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  204a60:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  204a64:	66 89 85 66 ff ff ff 	mov    WORD PTR [rbp-0x9a],ax
  204a6b:	e8 e0 f9 ff ff       	call   204450 <__zig_return_error>
  204a70:	66 8b 85 66 ff ff ff 	mov    ax,WORD PTR [rbp-0x9a]
  204a77:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  204a7e:	5b                   	pop    rbx
  204a7f:	41 5e                	pop    r14
  204a81:	5d                   	pop    rbp
  204a82:	c3                   	ret    
        frames_left -= 1;
  204a83:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  204a87:	48 83 e8 01          	sub    rax,0x1
  204a8b:	0f 92 c1             	setb   cl
  204a8e:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  204a95:	88 8d 57 ff ff ff    	mov    BYTE PTR [rbp-0xa9],cl
  204a9b:	0f 82 cf 00 00 00    	jb     204b70 <writeStackTrace+0x200>
  204aa1:	e9 da 00 00 00       	jmp    204b80 <writeStackTrace+0x210>
  204aa6:	31 c0                	xor    eax,eax
  204aa8:	66 89 c1             	mov    cx,ax
pub fn writeStackTrace(stack_trace: *const builtin.StackTrace, out_stream: var, allocator: *mem.Allocator, debug_info: *ElfStackTrace, tty_color: bool) !void {
  204aab:	66 89 c8             	mov    ax,cx
  204aae:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  204ab5:	5b                   	pop    rbx
  204ab6:	41 5e                	pop    r14
  204ab8:	5d                   	pop    rbp
  204ab9:	c3                   	ret    
  204aba:	48 8d 3d 57 08 02 00 	lea    rdi,[rip+0x20857]        # 225318 <__unnamed_5>
  204ac1:	31 c0                	xor    eax,eax
  204ac3:	89 c6                	mov    esi,eax
        frame_index = (stack_trace.index + 1) % stack_trace.instruction_addresses.len;
  204ac5:	e8 f6 e5 ff ff       	call   2030c0 <panic>
  204aca:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  204ace:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  204ad2:	48 83 f8 00          	cmp    rax,0x0
  204ad6:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  204add:	74 27                	je     204b06 <writeStackTrace+0x196>
  204adf:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  204ae3:	31 c9                	xor    ecx,ecx
  204ae5:	89 ca                	mov    edx,ecx
  204ae7:	48 8b b5 48 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xb8]
  204aee:	48 f7 f6             	div    rsi
  204af1:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
        frames_left = stack_trace.instruction_addresses.len;
  204af5:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  204af9:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  204afd:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
    if (stack_trace.index < stack_trace.instruction_addresses.len) {
  204b01:	e9 21 ff ff ff       	jmp    204a27 <writeStackTrace+0xb7>
  204b06:	48 8d 3d d3 0a 02 00 	lea    rdi,[rip+0x20ad3]        # 2255e0 <__unnamed_14>
  204b0d:	31 c0                	xor    eax,eax
  204b0f:	89 c6                	mov    esi,eax
        frame_index = (stack_trace.index + 1) % stack_trace.instruction_addresses.len;
  204b11:	e8 aa e5 ff ff       	call   2030c0 <panic>
  204b16:	48 8d 3d e3 07 02 00 	lea    rdi,[rip+0x207e3]        # 225300 <__unnamed_4>
  204b1d:	31 c0                	xor    eax,eax
  204b1f:	89 c6                	mov    esi,eax
        const return_address = stack_trace.instruction_addresses[frame_index];
  204b21:	e8 9a e5 ff ff       	call   2030c0 <panic>
  204b26:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  204b2d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  204b30:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  204b37:	48 8b 0c d1          	mov    rcx,QWORD PTR [rcx+rdx*8]
  204b3b:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
        try printSourceAtAddress(debug_info, out_stream, return_address, tty_color);
  204b3f:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  204b43:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  204b47:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  204b4b:	40 8a 7d c7          	mov    dil,BYTE PTR [rbp-0x39]
  204b4f:	44 0f b6 c7          	movzx  r8d,dil
  204b53:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  204b57:	e8 34 ea 00 00       	call   213590 <printSourceAtAddress>
  204b5c:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  204b60:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  204b65:	0f 85 f1 fe ff ff    	jne    204a5c <writeStackTrace+0xec>
  204b6b:	e9 13 ff ff ff       	jmp    204a83 <writeStackTrace+0x113>
  204b70:	48 8d 3d a1 07 02 00 	lea    rdi,[rip+0x207a1]        # 225318 <__unnamed_5>
  204b77:	31 c0                	xor    eax,eax
  204b79:	89 c6                	mov    esi,eax
        frames_left -= 1;
  204b7b:	e8 40 e5 ff ff       	call   2030c0 <panic>
  204b80:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
  204b87:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
        frame_index = (frame_index + 1) % stack_trace.instruction_addresses.len;
  204b8b:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  204b8f:	48 83 c1 01          	add    rcx,0x1
  204b93:	0f 92 c2             	setb   dl
  204b96:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
  204b9d:	88 95 3f ff ff ff    	mov    BYTE PTR [rbp-0xc1],dl
  204ba3:	72 02                	jb     204ba7 <writeStackTrace+0x237>
  204ba5:	eb 10                	jmp    204bb7 <writeStackTrace+0x247>
  204ba7:	48 8d 3d 6a 07 02 00 	lea    rdi,[rip+0x2076a]        # 225318 <__unnamed_5>
  204bae:	31 c0                	xor    eax,eax
  204bb0:	89 c6                	mov    esi,eax
  204bb2:	e8 09 e5 ff ff       	call   2030c0 <panic>
  204bb7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  204bbb:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  204bbf:	48 83 f8 00          	cmp    rax,0x0
  204bc3:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  204bca:	74 1e                	je     204bea <writeStackTrace+0x27a>
  204bcc:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  204bd3:	31 c9                	xor    ecx,ecx
  204bd5:	89 ca                	mov    edx,ecx
  204bd7:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  204bde:	48 f7 f6             	div    rsi
  204be1:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
    while (frames_left != 0) : ({
  204be5:	e9 3f fe ff ff       	jmp    204a29 <writeStackTrace+0xb9>
  204bea:	48 8d 3d ef 09 02 00 	lea    rdi,[rip+0x209ef]        # 2255e0 <__unnamed_14>
  204bf1:	31 c0                	xor    eax,eax
  204bf3:	89 c6                	mov    esi,eax
        frame_index = (frame_index + 1) % stack_trace.instruction_addresses.len;
  204bf5:	e8 c6 e4 ff ff       	call   2030c0 <panic>
  204bfa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000204c00 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.12>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  204c00:	55                   	push   rbp
  204c01:	48 89 e5             	mov    rbp,rsp
  204c04:	48 83 ec 20          	sub    rsp,0x20
  204c08:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
            return std.fmt.format(self, Error, self.writeFn, format, args);
  204c0c:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  204c10:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  204c14:	48 8b 00             	mov    rax,QWORD PTR [rax]
  204c17:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  204c1b:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  204c1f:	48 89 c2             	mov    rdx,rax
  204c22:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  204c26:	e8 35 73 01 00       	call   21bf60 <format.77>
  204c2b:	66 83 f8 00          	cmp    ax,0x0
  204c2f:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
  204c33:	74 0b                	je     204c40 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.12+0x40>
  204c35:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  204c39:	e8 12 f8 ff ff       	call   204450 <__zig_return_error>
  204c3e:	eb 02                	jmp    204c42 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.12+0x42>
  204c40:	eb 00                	jmp    204c42 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.12+0x42>
  204c42:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
  204c46:	48 83 c4 20          	add    rsp,0x20
  204c4a:	5d                   	pop    rbp
  204c4b:	c3                   	ret    
  204c4c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000204c50 <writeCurrentStackTrace>:
pub fn writeCurrentStackTrace(out_stream: var, allocator: *mem.Allocator, debug_info: *ElfStackTrace, tty_color: bool, start_addr: ?usize) !void {
  204c50:	55                   	push   rbp
  204c51:	48 89 e5             	mov    rbp,rsp
  204c54:	53                   	push   rbx
  204c55:	48 81 ec 88 00 00 00 	sub    rsp,0x88
  204c5c:	44 88 c0             	mov    al,r8b
  204c5f:	41 b8 aa 00 00 00    	mov    r8d,0xaa
  204c65:	41 ba 10 00 00 00    	mov    r10d,0x10
  204c6b:	45 89 d3             	mov    r11d,r10d
  204c6e:	48 8d 5d b0          	lea    rbx,[rbp-0x50]
  204c72:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  204c76:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  204c7a:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  204c7e:	24 01                	and    al,0x1
  204c80:	88 45 c7             	mov    BYTE PTR [rbp-0x39],al
    var addr_state: AddressState = undefined;
  204c83:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
  204c87:	48 89 df             	mov    rdi,rbx
  204c8a:	44 89 c6             	mov    esi,r8d
  204c8d:	4c 89 da             	mov    rdx,r11
  204c90:	4c 89 4d 80          	mov    QWORD PTR [rbp-0x80],r9
  204c94:	e8 17 d0 01 00       	call   221cb0 <memset>
    if (start_addr) |addr| {
  204c99:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  204c9d:	f6 41 08 01          	test   BYTE PTR [rcx+0x8],0x1
  204ca1:	75 02                	jne    204ca5 <writeCurrentStackTrace+0x55>
  204ca3:	eb 29                	jmp    204cce <writeCurrentStackTrace+0x7e>
  204ca5:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  204ca9:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  204cac:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
        addr_state = AddressState{ .LookingForStartAddress = addr };
  204cb0:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  204cb4:	c6 45 f0 01          	mov    BYTE PTR [rbp-0x10],0x1
  204cb8:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  204cbc:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  204cc0:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
  204cc4:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  204cc8:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
    if (start_addr) |addr| {
  204ccc:	eb 16                	jmp    204ce4 <writeCurrentStackTrace+0x94>
        addr_state = AddressState.NotLookingForStartAddress;
  204cce:	48 8b 05 eb d5 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffffd5eb]        # 2022c0 <__unnamed_123>
  204cd5:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  204cd9:	48 8b 05 e8 d5 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffffd5e8]        # 2022c8 <__unnamed_123+0x8>
  204ce0:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
    var fp = @ptrToInt(@frameAddress());
  204ce4:	48 89 e8             	mov    rax,rbp
  204ce7:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
    while (fp != 0) : (fp = @intToPtr(*const usize, fp).*) {
  204ceb:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
  204cf0:	0f 84 bf 00 00 00    	je     204db5 <writeCurrentStackTrace+0x165>
        const return_address = @intToPtr(*const usize, fp + @sizeOf(usize)).*;
  204cf6:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  204cfa:	48 83 c0 08          	add    rax,0x8
  204cfe:	0f 92 c1             	setb   cl
  204d01:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  204d08:	88 8d 77 ff ff ff    	mov    BYTE PTR [rbp-0x89],cl
  204d0e:	0f 82 b3 00 00 00    	jb     204dc7 <writeCurrentStackTrace+0x177>
  204d14:	e9 be 00 00 00       	jmp    204dd7 <writeCurrentStackTrace+0x187>
        switch (addr_state) {
  204d19:	eb 3e                	jmp    204d59 <writeCurrentStackTrace+0x109>
            AddressState.LookingForStartAddress => |addr| {
  204d1b:	8a 45 b8             	mov    al,BYTE PTR [rbp-0x48]
  204d1e:	f6 d0                	not    al
  204d20:	a8 01                	test   al,0x1
  204d22:	0f 84 e3 00 00 00    	je     204e0b <writeCurrentStackTrace+0x1bb>
  204d28:	e9 f9 00 00 00       	jmp    204e26 <writeCurrentStackTrace+0x1d6>
                    addr_state = AddressState.NotLookingForStartAddress;
  204d2d:	48 8b 05 8c d5 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffffd58c]        # 2022c0 <__unnamed_123>
  204d34:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  204d38:	48 8b 05 89 d5 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffffd589]        # 2022c8 <__unnamed_123+0x8>
  204d3f:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                if (return_address == addr) {
  204d43:	eb 02                	jmp    204d47 <writeCurrentStackTrace+0xf7>
                    continue;
  204d45:	eb 5e                	jmp    204da5 <writeCurrentStackTrace+0x155>
        switch (addr_state) {
  204d47:	eb 10                	jmp    204d59 <writeCurrentStackTrace+0x109>
  204d49:	48 8d 3d 70 06 02 00 	lea    rdi,[rip+0x20670]        # 2253c0 <__unnamed_7>
  204d50:	31 c0                	xor    eax,eax
  204d52:	89 c6                	mov    esi,eax
  204d54:	e8 67 e3 ff ff       	call   2030c0 <panic>
        try printSourceAtAddress(debug_info, out_stream, return_address, tty_color);
  204d59:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  204d5d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  204d61:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  204d65:	8a 45 c7             	mov    al,BYTE PTR [rbp-0x39]
  204d68:	44 0f b6 c0          	movzx  r8d,al
  204d6c:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  204d70:	e8 1b e8 00 00       	call   213590 <printSourceAtAddress>
  204d75:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
  204d79:	66 83 7d e6 00       	cmp    WORD PTR [rbp-0x1a],0x0
  204d7e:	74 25                	je     204da5 <writeCurrentStackTrace+0x155>
  204d80:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
  204d84:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  204d88:	66 89 85 74 ff ff ff 	mov    WORD PTR [rbp-0x8c],ax
  204d8f:	e8 bc f6 ff ff       	call   204450 <__zig_return_error>
  204d94:	66 8b 85 74 ff ff ff 	mov    ax,WORD PTR [rbp-0x8c]
  204d9b:	48 81 c4 88 00 00 00 	add    rsp,0x88
  204da2:	5b                   	pop    rbx
  204da3:	5d                   	pop    rbp
  204da4:	c3                   	ret    
    while (fp != 0) : (fp = @intToPtr(*const usize, fp).*) {
  204da5:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  204da9:	48 8b 00             	mov    rax,QWORD PTR [rax]
  204dac:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  204db0:	e9 36 ff ff ff       	jmp    204ceb <writeCurrentStackTrace+0x9b>
  204db5:	31 c0                	xor    eax,eax
  204db7:	66 89 c1             	mov    cx,ax
pub fn writeCurrentStackTrace(out_stream: var, allocator: *mem.Allocator, debug_info: *ElfStackTrace, tty_color: bool, start_addr: ?usize) !void {
  204dba:	66 89 c8             	mov    ax,cx
  204dbd:	48 81 c4 88 00 00 00 	add    rsp,0x88
  204dc4:	5b                   	pop    rbx
  204dc5:	5d                   	pop    rbp
  204dc6:	c3                   	ret    
  204dc7:	48 8d 3d 4a 05 02 00 	lea    rdi,[rip+0x2054a]        # 225318 <__unnamed_5>
  204dce:	31 c0                	xor    eax,eax
  204dd0:	89 c6                	mov    esi,eax
        const return_address = @intToPtr(*const usize, fp + @sizeOf(usize)).*;
  204dd2:	e8 e9 e2 ff ff       	call   2030c0 <panic>
  204dd7:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  204dde:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  204de1:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
        switch (addr_state) {
  204de5:	8a 55 b8             	mov    dl,BYTE PTR [rbp-0x48]
  204de8:	84 d2                	test   dl,dl
  204dea:	88 95 73 ff ff ff    	mov    BYTE PTR [rbp-0x8d],dl
  204df0:	0f 85 25 ff ff ff    	jne    204d1b <writeCurrentStackTrace+0xcb>
  204df6:	eb 00                	jmp    204df8 <writeCurrentStackTrace+0x1a8>
  204df8:	8a 85 73 ff ff ff    	mov    al,BYTE PTR [rbp-0x8d]
  204dfe:	a8 01                	test   al,0x1
  204e00:	0f 84 13 ff ff ff    	je     204d19 <writeCurrentStackTrace+0xc9>
  204e06:	e9 3e ff ff ff       	jmp    204d49 <writeCurrentStackTrace+0xf9>
            AddressState.LookingForStartAddress => |addr| {
  204e0b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  204e0f:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
                if (return_address == addr) {
  204e13:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  204e17:	48 3b 45 90          	cmp    rax,QWORD PTR [rbp-0x70]
  204e1b:	0f 84 0c ff ff ff    	je     204d2d <writeCurrentStackTrace+0xdd>
  204e21:	e9 1f ff ff ff       	jmp    204d45 <writeCurrentStackTrace+0xf5>
  204e26:	48 8d 3d 33 07 02 00 	lea    rdi,[rip+0x20733]        # 225560 <__unnamed_17>
  204e2d:	31 c0                	xor    eax,eax
  204e2f:	89 c6                	mov    esi,eax
            AddressState.LookingForStartAddress => |addr| {
  204e31:	e8 8a e2 ff ff       	call   2030c0 <panic>
  204e36:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  204e3d:	00 00 00 

0000000000204e40 <Xoroshiro128_next>:
    fn next(self: *Xoroshiro128) u64 {
  204e40:	55                   	push   rbp
  204e41:	48 89 e5             	mov    rbp,rsp
  204e44:	48 83 ec 30          	sub    rsp,0x30
  204e48:	be 37 00 00 00       	mov    esi,0x37
  204e4d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
        const s0 = self.s[0];
  204e51:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  204e55:	48 8b 7f 08          	mov    rdi,QWORD PTR [rdi+0x8]
  204e59:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
        var s1 = self.s[1];
  204e5d:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  204e61:	48 8b 7f 10          	mov    rdi,QWORD PTR [rdi+0x10]
  204e65:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
        const r = s0 +% s1;
  204e69:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  204e6d:	48 03 7d e8          	add    rdi,QWORD PTR [rbp-0x18]
  204e71:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
        s1 ^= s0;
  204e75:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  204e79:	48 33 7d f0          	xor    rdi,QWORD PTR [rbp-0x10]
  204e7d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
        self.s[0] = math.rotl(u64, s0, u8(55)) ^ s1 ^ (s1 << 14);
  204e81:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  204e85:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  204e89:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  204e8d:	48 89 c7             	mov    rdi,rax
  204e90:	e8 0b 72 01 00       	call   21c0a0 <rotl>
  204e95:	be 24 00 00 00       	mov    esi,0x24
  204e9a:	48 33 45 e8          	xor    rax,QWORD PTR [rbp-0x18]
  204e9e:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  204ea2:	48 c1 e7 0e          	shl    rdi,0xe
  204ea6:	48 31 f8             	xor    rax,rdi
  204ea9:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  204ead:	48 89 47 08          	mov    QWORD PTR [rdi+0x8],rax
        self.s[1] = math.rotl(u64, s1, u8(36));
  204eb1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  204eb5:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  204eb9:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  204ebd:	e8 de 71 01 00       	call   21c0a0 <rotl>
  204ec2:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  204ec6:	48 89 47 10          	mov    QWORD PTR [rdi+0x10],rax
        return r;
  204eca:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  204ece:	48 83 c4 30          	add    rsp,0x30
  204ed2:	5d                   	pop    rbp
  204ed3:	c3                   	ret    
  204ed4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  204edb:	00 00 00 00 00 

0000000000204ee0 <SplitMix64_init>:
    pub fn init(seed: u64) SplitMix64 {
  204ee0:	55                   	push   rbp
  204ee1:	48 89 e5             	mov    rbp,rsp
  204ee4:	48 89 f8             	mov    rax,rdi
  204ee7:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
        return SplitMix64{ .s = seed };
  204eeb:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  204eef:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  204ef3:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  204ef7:	48 89 37             	mov    QWORD PTR [rdi],rsi
  204efa:	5d                   	pop    rbp
  204efb:	c3                   	ret    
  204efc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000204f00 <SplitMix64_next>:
    pub fn next(self: *SplitMix64) u64 {
  204f00:	55                   	push   rbp
  204f01:	48 89 e5             	mov    rbp,rsp
  204f04:	48 b8 eb 11 31 13 bb 	movabs rax,0x94d049bb133111eb
  204f0b:	49 d0 94 
  204f0e:	48 b9 b9 e5 e4 1c 6d 	movabs rcx,0xbf58476d1ce4e5b9
  204f15:	47 58 bf 
  204f18:	48 ba 15 7c 4a 7f b9 	movabs rdx,0x9e3779b97f4a7c15
  204f1f:	79 37 9e 
  204f22:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
        self.s +%= 0x9e3779b97f4a7c15;
  204f26:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  204f2a:	48 03 17             	add    rdx,QWORD PTR [rdi]
  204f2d:	48 89 17             	mov    QWORD PTR [rdi],rdx
        var z = self.s;
  204f30:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  204f34:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
  204f37:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
        z = (z ^ (z >> 30)) *% 0xbf58476d1ce4e5b9;
  204f3b:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  204f3f:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  204f43:	48 c1 ef 1e          	shr    rdi,0x1e
  204f47:	48 31 fa             	xor    rdx,rdi
  204f4a:	48 0f af d1          	imul   rdx,rcx
  204f4e:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
        z = (z ^ (z >> 27)) *% 0x94d049bb133111eb;
  204f52:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  204f56:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  204f5a:	48 c1 ea 1b          	shr    rdx,0x1b
  204f5e:	48 31 d1             	xor    rcx,rdx
  204f61:	48 0f af c8          	imul   rcx,rax
  204f65:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
        return z ^ (z >> 31);
  204f69:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  204f6d:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  204f71:	48 c1 e9 1f          	shr    rcx,0x1f
  204f75:	48 31 c8             	xor    rax,rcx
  204f78:	5d                   	pop    rbp
  204f79:	c3                   	ret    
  204f7a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000204f80 <syscall4>:
          [arg3] "{rdx}" (arg3)
        : "rcx", "r11"
    );
}

pub fn syscall4(number: usize, arg1: usize, arg2: usize, arg3: usize, arg4: usize) usize {
  204f80:	55                   	push   rbp
  204f81:	48 89 e5             	mov    rbp,rsp
  204f84:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  204f88:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  204f8c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  204f90:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  204f94:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
    return asm volatile ("syscall"
        : [ret] "={rax}" (-> usize)
        : [number] "{rax}" (number),
  204f98:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
          [arg1] "{rdi}" (arg1),
  204f9c:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
          [arg2] "{rsi}" (arg2),
  204fa0:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
          [arg3] "{rdx}" (arg3),
  204fa4:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
          [arg4] "{r10}" (arg4)
  204fa8:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
    return asm volatile ("syscall"
  204fac:	0f 05                	syscall 
  204fae:	5d                   	pop    rbp
  204faf:	c3                   	ret    

0000000000204fb0 <format.13>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  204fb0:	55                   	push   rbp
  204fb1:	48 89 e5             	mov    rbp,rsp
  204fb4:	48 83 ec 40          	sub    rsp,0x40
  204fb8:	48 8d 05 19 04 02 00 	lea    rax,[rip+0x20419]        # 2253d8 <__unnamed_18>
  204fbf:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  204fc3:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  204fc7:	89 4d e4             	mov    DWORD PTR [rbp-0x1c],ecx
                        try output(context, fmt[start_index..i]);
  204fca:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  204fce:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  204fd2:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  204fd6:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  204fda:	48 89 c2             	mov    rdx,rax
  204fdd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  204fe1:	ff d0                	call   rax
  204fe3:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  204fe7:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  204fec:	74 1b                	je     205009 <format.13+0x59>
  204fee:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  204ff2:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  204ff6:	66 89 45 ce          	mov    WORD PTR [rbp-0x32],ax
  204ffa:	e8 51 f4 ff ff       	call   204450 <__zig_return_error>
  204fff:	66 8b 45 ce          	mov    ax,WORD PTR [rbp-0x32]
  205003:	48 83 c4 40          	add    rsp,0x40
  205007:	5d                   	pop    rbp
  205008:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  205009:	8b 75 e4             	mov    esi,DWORD PTR [rbp-0x1c]
  20500c:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  205010:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  205014:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  205018:	e8 73 00 00 00       	call   205090 <formatType.14>
  20501d:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  205021:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  205026:	74 1b                	je     205043 <format.13+0x93>
  205028:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  20502c:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  205030:	66 89 45 cc          	mov    WORD PTR [rbp-0x34],ax
  205034:	e8 17 f4 ff ff       	call   204450 <__zig_return_error>
  205039:	66 8b 45 cc          	mov    ax,WORD PTR [rbp-0x34]
  20503d:	48 83 c4 40          	add    rsp,0x40
  205041:	5d                   	pop    rbp
  205042:	c3                   	ret    
  205043:	48 8d 15 a6 03 02 00 	lea    rdx,[rip+0x203a6]        # 2253f0 <__unnamed_19>
        try output(context, fmt[start_index..]);
  20504a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20504e:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  205052:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  205056:	ff d0                	call   rax
  205058:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  20505c:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  205061:	74 1b                	je     20507e <format.13+0xce>
  205063:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  205067:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  20506b:	66 89 45 ca          	mov    WORD PTR [rbp-0x36],ax
  20506f:	e8 dc f3 ff ff       	call   204450 <__zig_return_error>
  205074:	66 8b 45 ca          	mov    ax,WORD PTR [rbp-0x36]
  205078:	48 83 c4 40          	add    rsp,0x40
  20507c:	5d                   	pop    rbp
  20507d:	c3                   	ret    
  20507e:	31 c0                	xor    eax,eax
  205080:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  205083:	66 89 c8             	mov    ax,cx
  205086:	48 83 c4 40          	add    rsp,0x40
  20508a:	5d                   	pop    rbp
  20508b:	c3                   	ret    
  20508c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000205090 <formatType.14>:
pub fn formatType(
  205090:	55                   	push   rbp
  205091:	48 89 e5             	mov    rbp,rsp
  205094:	48 83 ec 30          	sub    rsp,0x30
  205098:	89 75 fc             	mov    DWORD PTR [rbp-0x4],esi
  20509b:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  20509f:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return formatValue(value, fmt, context, Errors, output);
  2050a3:	8b 75 fc             	mov    esi,DWORD PTR [rbp-0x4]
  2050a6:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  2050aa:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2050ae:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2050b2:	e8 89 70 01 00       	call   21c140 <formatValue>
  2050b7:	66 83 f8 00          	cmp    ax,0x0
  2050bb:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  2050bf:	74 0b                	je     2050cc <formatType.14+0x3c>
  2050c1:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2050c5:	e8 86 f3 ff ff       	call   204450 <__zig_return_error>
  2050ca:	eb 02                	jmp    2050ce <formatType.14+0x3e>
  2050cc:	eb 00                	jmp    2050ce <formatType.14+0x3e>
  2050ce:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  2050d2:	48 83 c4 30          	add    rsp,0x30
  2050d6:	5d                   	pop    rbp
  2050d7:	c3                   	ret    
  2050d8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  2050df:	00 

00000000002050e0 <blockAppSignals>:

fn blockAllSignals(set: *sigset_t) void {
    _ = syscall4(SYS_rt_sigprocmask, SIG_BLOCK, @ptrToInt(&all_mask), @ptrToInt(set), NSIG / 8);
}

fn blockAppSignals(set: *sigset_t) void {
  2050e0:	55                   	push   rbp
  2050e1:	48 89 e5             	mov    rbp,rsp
  2050e4:	48 83 ec 20          	sub    rsp,0x20
  2050e8:	b8 0e 00 00 00       	mov    eax,0xe
  2050ed:	89 c1                	mov    ecx,eax
  2050ef:	31 c0                	xor    eax,eax
  2050f1:	89 c6                	mov    esi,eax
  2050f3:	48 8d 15 de d2 ff ff 	lea    rdx,[rip+0xffffffffffffd2de]        # 2023d8 <app_mask>
  2050fa:	b8 08 00 00 00       	mov    eax,0x8
  2050ff:	41 89 c0             	mov    r8d,eax
  205102:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    _ = syscall4(SYS_rt_sigprocmask, SIG_BLOCK, @ptrToInt(&app_mask), @ptrToInt(set), NSIG / 8);
  205106:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  20510a:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  20510e:	48 89 cf             	mov    rdi,rcx
  205111:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  205115:	e8 76 70 01 00       	call   21c190 <syscall4.79>
fn blockAppSignals(set: *sigset_t) void {
  20511a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  20511e:	48 83 c4 20          	add    rsp,0x20
  205122:	5d                   	pop    rbp
  205123:	c3                   	ret    
  205124:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20512b:	00 00 00 00 00 

0000000000205130 <syscall0>:
pub const VDSO_CGT_SYM = "__vdso_clock_gettime";
pub const VDSO_CGT_VER = "LINUX_2.6";
pub const VDSO_GETCPU_SYM = "__vdso_getcpu";
pub const VDSO_GETCPU_VER = "LINUX_2.6";

pub fn syscall0(number: usize) usize {
  205130:	55                   	push   rbp
  205131:	48 89 e5             	mov    rbp,rsp
  205134:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    return asm volatile ("syscall"
        : [ret] "={rax}" (-> usize)
        : [number] "{rax}" (number)
  205138:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    return asm volatile ("syscall"
  20513c:	0f 05                	syscall 
  20513e:	5d                   	pop    rbp
  20513f:	c3                   	ret    

0000000000205140 <syscall2>:
          [arg1] "{rdi}" (arg1)
        : "rcx", "r11"
    );
}

pub fn syscall2(number: usize, arg1: usize, arg2: usize) usize {
  205140:	55                   	push   rbp
  205141:	48 89 e5             	mov    rbp,rsp
  205144:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  205148:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  20514c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    return asm volatile ("syscall"
        : [ret] "={rax}" (-> usize)
        : [number] "{rax}" (number),
  205150:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
          [arg1] "{rdi}" (arg1),
  205154:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
          [arg2] "{rsi}" (arg2)
  205158:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
    return asm volatile ("syscall"
  20515c:	0f 05                	syscall 
  20515e:	5d                   	pop    rbp
  20515f:	c3                   	ret    

0000000000205160 <restoreSignals>:
}

fn restoreSignals(set: *sigset_t) void {
  205160:	55                   	push   rbp
  205161:	48 89 e5             	mov    rbp,rsp
  205164:	48 83 ec 20          	sub    rsp,0x20
  205168:	b8 0e 00 00 00       	mov    eax,0xe
  20516d:	89 c1                	mov    ecx,eax
  20516f:	b8 02 00 00 00       	mov    eax,0x2
  205174:	89 c6                	mov    esi,eax
  205176:	31 c0                	xor    eax,eax
  205178:	89 c2                	mov    edx,eax
  20517a:	b8 08 00 00 00       	mov    eax,0x8
  20517f:	41 89 c0             	mov    r8d,eax
  205182:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    _ = syscall4(SYS_rt_sigprocmask, SIG_SETMASK, @ptrToInt(set), 0, NSIG / 8);
  205186:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  20518a:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  20518e:	48 89 cf             	mov    rdi,rcx
  205191:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  205195:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  205199:	48 89 ca             	mov    rdx,rcx
  20519c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2051a0:	e8 eb 6f 01 00       	call   21c190 <syscall4.79>
fn restoreSignals(set: *sigset_t) void {
  2051a5:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  2051a9:	48 83 c4 20          	add    rsp,0x20
  2051ad:	5d                   	pop    rbp
  2051ae:	c3                   	ret    
  2051af:	90                   	nop

00000000002051b0 <File_write>:
        }
    }

    pub const WriteError = os.WindowsWriteError || os.PosixWriteError;

    pub fn write(self: *File, bytes: []const u8) WriteError!void {
  2051b0:	55                   	push   rbp
  2051b1:	48 89 e5             	mov    rbp,rsp
  2051b4:	48 83 ec 20          	sub    rsp,0x20
  2051b8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
        if (is_posix) {
            try os.posixWrite(self.handle, bytes);
  2051bc:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  2051c0:	8b 36                	mov    esi,DWORD PTR [rsi]
  2051c2:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  2051c6:	e8 35 00 00 00       	call   205200 <posixWrite>
  2051cb:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  2051cf:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  2051d4:	74 1b                	je     2051f1 <File_write+0x41>
  2051d6:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  2051da:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  2051de:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
  2051e2:	e8 69 f2 ff ff       	call   204450 <__zig_return_error>
  2051e7:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
  2051eb:	48 83 c4 20          	add    rsp,0x20
  2051ef:	5d                   	pop    rbp
  2051f0:	c3                   	ret    
  2051f1:	31 c0                	xor    eax,eax
  2051f3:	66 89 c1             	mov    cx,ax
    pub fn write(self: *File, bytes: []const u8) WriteError!void {
  2051f6:	66 89 c8             	mov    ax,cx
  2051f9:	48 83 c4 20          	add    rsp,0x20
  2051fd:	5d                   	pop    rbp
  2051fe:	c3                   	ret    
  2051ff:	90                   	nop

0000000000205200 <posixWrite>:
    BrokenPipe,
    Unexpected,
};

/// Calls POSIX write, and keeps trying if it gets interrupted.
pub fn posixWrite(fd: i32, bytes: []const u8) !void {
  205200:	55                   	push   rbp
  205201:	48 89 e5             	mov    rbp,rsp
  205204:	48 81 ec d0 00 00 00 	sub    rsp,0xd0
  20520b:	89 75 fc             	mov    DWORD PTR [rbp-0x4],esi
    // Linux can return EINVAL when write amount is > 0x7ffff000
    // See https://github.com/ziglang/zig/pull/743#issuecomment-363165856
    const max_bytes_len = 0x7ffff000;

    var index: usize = 0;
  20520e:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  205215:	00 
  205216:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
  20521a:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
    while (index < bytes.len) {
  20521e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  205222:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  205226:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  20522a:	0f 83 08 02 00 00    	jae    205438 <posixWrite+0x238>
        const amt_to_write = math.min(bytes.len - index, usize(max_bytes_len));
  205230:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  205234:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  205238:	48 2b 4d f0          	sub    rcx,QWORD PTR [rbp-0x10]
  20523c:	0f 92 c2             	setb   dl
  20523f:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
  205243:	88 55 bf             	mov    BYTE PTR [rbp-0x41],dl
  205246:	0f 82 fd 01 00 00    	jb     205449 <posixWrite+0x249>
  20524c:	e9 08 02 00 00       	jmp    205459 <posixWrite+0x259>
        const rc = posix.write(fd, bytes.ptr + index, amt_to_write);
        const write_err = posix.getErrno(rc);
        if (write_err > 0) {
            return switch (write_err) {
  205251:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  205255:	48 89 c1             	mov    rcx,rax
  205258:	48 83 e9 01          	sub    rcx,0x1
  20525c:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  205260:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  205264:	0f 84 71 01 00 00    	je     2053db <posixWrite+0x1db>
  20526a:	eb 00                	jmp    20526c <posixWrite+0x6c>
  20526c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  205270:	48 83 e8 04          	sub    rax,0x4
  205274:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  205278:	0f 84 ed 00 00 00    	je     20536b <posixWrite+0x16b>
  20527e:	eb 00                	jmp    205280 <posixWrite+0x80>
  205280:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  205284:	48 83 e8 05          	sub    rax,0x5
  205288:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  20528c:	0f 84 2f 01 00 00    	je     2053c1 <posixWrite+0x1c1>
  205292:	eb 00                	jmp    205294 <posixWrite+0x94>
  205294:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  205298:	48 83 e8 09          	sub    rax,0x9
  20529c:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  2052a0:	0f 84 e7 00 00 00    	je     20538d <posixWrite+0x18d>
  2052a6:	eb 00                	jmp    2052a8 <posixWrite+0xa8>
  2052a8:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  2052ac:	48 83 e8 0b          	sub    rax,0xb
  2052b0:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  2052b4:	0f 84 c6 00 00 00    	je     205380 <posixWrite+0x180>
  2052ba:	eb 00                	jmp    2052bc <posixWrite+0xbc>
  2052bc:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  2052c0:	48 83 e8 0e          	sub    rax,0xe
  2052c4:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  2052c8:	0f 84 a2 00 00 00    	je     205370 <posixWrite+0x170>
  2052ce:	eb 00                	jmp    2052d0 <posixWrite+0xd0>
  2052d0:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  2052d4:	48 83 e8 16          	sub    rax,0x16
  2052d8:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  2052df:	0f 84 8b 00 00 00    	je     205370 <posixWrite+0x170>
  2052e5:	eb 00                	jmp    2052e7 <posixWrite+0xe7>
  2052e7:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  2052eb:	48 83 e8 1b          	sub    rax,0x1b
  2052ef:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  2052f6:	0f 84 b8 00 00 00    	je     2053b4 <posixWrite+0x1b4>
  2052fc:	eb 00                	jmp    2052fe <posixWrite+0xfe>
  2052fe:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  205302:	48 83 e8 1c          	sub    rax,0x1c
  205306:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  20530d:	0f 84 bb 00 00 00    	je     2053ce <posixWrite+0x1ce>
  205313:	eb 00                	jmp    205315 <posixWrite+0x115>
  205315:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  205319:	48 83 e8 20          	sub    rax,0x20
  20531d:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  205324:	0f 84 be 00 00 00    	je     2053e8 <posixWrite+0x1e8>
  20532a:	eb 00                	jmp    20532c <posixWrite+0x12c>
  20532c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  205330:	48 83 e8 59          	sub    rax,0x59
  205334:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  20533b:	74 5d                	je     20539a <posixWrite+0x19a>
  20533d:	eb 00                	jmp    20533f <posixWrite+0x13f>
  20533f:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  205343:	48 83 e8 7a          	sub    rax,0x7a
  205347:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
  20534e:	74 57                	je     2053a7 <posixWrite+0x1a7>
  205350:	eb 00                	jmp    205352 <posixWrite+0x152>
                posix.EFBIG => PosixWriteError.FileTooBig,
                posix.EIO => PosixWriteError.InputOutput,
                posix.ENOSPC => PosixWriteError.NoSpaceLeft,
                posix.EPERM => PosixWriteError.AccessDenied,
                posix.EPIPE => PosixWriteError.BrokenPipe,
                else => unexpectedErrorPosix(write_err),
  205352:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  205356:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  20535a:	e8 31 5e 00 00       	call   20b190 <unexpectedErrorPosix>
            return switch (write_err) {
  20535f:	66 89 85 4e ff ff ff 	mov    WORD PTR [rbp-0xb2],ax
  205366:	e9 8a 00 00 00       	jmp    2053f5 <posixWrite+0x1f5>
                posix.EINTR => continue,
  20536b:	e9 ae fe ff ff       	jmp    20521e <posixWrite+0x1e>
  205370:	48 8d 3d 49 00 02 00 	lea    rdi,[rip+0x20049]        # 2253c0 <__unnamed_7>
  205377:	31 c0                	xor    eax,eax
  205379:	89 c6                	mov    esi,eax
                posix.EINVAL, posix.EFAULT => unreachable,
  20537b:	e8 40 dd ff ff       	call   2030c0 <panic>
  205380:	66 b8 06 00          	mov    ax,0x6
            return switch (write_err) {
  205384:	66 89 85 4e ff ff ff 	mov    WORD PTR [rbp-0xb2],ax
  20538b:	eb 68                	jmp    2053f5 <posixWrite+0x1f5>
  20538d:	66 b8 07 00          	mov    ax,0x7
  205391:	66 89 85 4e ff ff ff 	mov    WORD PTR [rbp-0xb2],ax
  205398:	eb 5b                	jmp    2053f5 <posixWrite+0x1f5>
  20539a:	66 b8 08 00          	mov    ax,0x8
  20539e:	66 89 85 4e ff ff ff 	mov    WORD PTR [rbp-0xb2],ax
  2053a5:	eb 4e                	jmp    2053f5 <posixWrite+0x1f5>
  2053a7:	66 b8 09 00          	mov    ax,0x9
  2053ab:	66 89 85 4e ff ff ff 	mov    WORD PTR [rbp-0xb2],ax
  2053b2:	eb 41                	jmp    2053f5 <posixWrite+0x1f5>
  2053b4:	66 b8 0a 00          	mov    ax,0xa
  2053b8:	66 89 85 4e ff ff ff 	mov    WORD PTR [rbp-0xb2],ax
  2053bf:	eb 34                	jmp    2053f5 <posixWrite+0x1f5>
  2053c1:	66 b8 0b 00          	mov    ax,0xb
  2053c5:	66 89 85 4e ff ff ff 	mov    WORD PTR [rbp-0xb2],ax
  2053cc:	eb 27                	jmp    2053f5 <posixWrite+0x1f5>
  2053ce:	66 b8 0c 00          	mov    ax,0xc
  2053d2:	66 89 85 4e ff ff ff 	mov    WORD PTR [rbp-0xb2],ax
  2053d9:	eb 1a                	jmp    2053f5 <posixWrite+0x1f5>
  2053db:	66 b8 0d 00          	mov    ax,0xd
  2053df:	66 89 85 4e ff ff ff 	mov    WORD PTR [rbp-0xb2],ax
  2053e6:	eb 0d                	jmp    2053f5 <posixWrite+0x1f5>
  2053e8:	66 b8 04 00          	mov    ax,0x4
  2053ec:	66 89 85 4e ff ff ff 	mov    WORD PTR [rbp-0xb2],ax
  2053f3:	eb 00                	jmp    2053f5 <posixWrite+0x1f5>
  2053f5:	66 8b 85 4e ff ff ff 	mov    ax,WORD PTR [rbp-0xb2]
  2053fc:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  205400:	66 89 85 4c ff ff ff 	mov    WORD PTR [rbp-0xb4],ax
  205407:	e8 44 f0 ff ff       	call   204450 <__zig_return_error>
  20540c:	66 8b 85 4c ff ff ff 	mov    ax,WORD PTR [rbp-0xb4]
  205413:	48 81 c4 d0 00 00 00 	add    rsp,0xd0
  20541a:	5d                   	pop    rbp
  20541b:	c3                   	ret    
            };
        }
        index += rc;
  20541c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  205420:	48 03 45 e0          	add    rax,QWORD PTR [rbp-0x20]
  205424:	0f 92 c1             	setb   cl
  205427:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  20542e:	88 8d 3f ff ff ff    	mov    BYTE PTR [rbp-0xc1],cl
  205434:	72 6f                	jb     2054a5 <posixWrite+0x2a5>
  205436:	eb 7d                	jmp    2054b5 <posixWrite+0x2b5>
  205438:	31 c0                	xor    eax,eax
  20543a:	66 89 c1             	mov    cx,ax
pub fn posixWrite(fd: i32, bytes: []const u8) !void {
  20543d:	66 89 c8             	mov    ax,cx
  205440:	48 81 c4 d0 00 00 00 	add    rsp,0xd0
  205447:	5d                   	pop    rbp
  205448:	c3                   	ret    
  205449:	48 8d 3d c8 fe 01 00 	lea    rdi,[rip+0x1fec8]        # 225318 <__unnamed_5>
  205450:	31 c0                	xor    eax,eax
  205452:	89 c6                	mov    esi,eax
        const amt_to_write = math.min(bytes.len - index, usize(max_bytes_len));
  205454:	e8 67 dc ff ff       	call   2030c0 <panic>
  205459:	b8 00 f0 ff 7f       	mov    eax,0x7ffff000
  20545e:	89 c6                	mov    esi,eax
  205460:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  205464:	e8 57 6d 01 00       	call   21c1c0 <min>
  205469:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
        const rc = posix.write(fd, bytes.ptr + index, amt_to_write);
  20546d:	8b 7d fc             	mov    edi,DWORD PTR [rbp-0x4]
  205470:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  205474:	48 8b 30             	mov    rsi,QWORD PTR [rax]
  205477:	48 03 75 f0          	add    rsi,QWORD PTR [rbp-0x10]
  20547b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  20547f:	e8 6c 6d 01 00       	call   21c1f0 <write>
  205484:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
        const write_err = posix.getErrno(rc);
  205488:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  20548c:	e8 5f 5c 00 00       	call   20b0f0 <getErrno>
  205491:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
        if (write_err > 0) {
  205495:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  20549a:	0f 87 b1 fd ff ff    	ja     205251 <posixWrite+0x51>
  2054a0:	e9 77 ff ff ff       	jmp    20541c <posixWrite+0x21c>
  2054a5:	48 8d 3d 6c fe 01 00 	lea    rdi,[rip+0x1fe6c]        # 225318 <__unnamed_5>
  2054ac:	31 c0                	xor    eax,eax
  2054ae:	89 c6                	mov    esi,eax
        index += rc;
  2054b0:	e8 0b dc ff ff       	call   2030c0 <panic>
  2054b5:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  2054bc:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    while (index < bytes.len) {
  2054c0:	e9 59 fd ff ff       	jmp    20521e <posixWrite+0x1e>
  2054c5:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2054cc:	00 00 00 00 

00000000002054d0 <openSelfDebugInfo>:
pub fn openSelfDebugInfo(allocator: *mem.Allocator) !*ElfStackTrace {
  2054d0:	55                   	push   rbp
  2054d1:	48 89 e5             	mov    rbp,rsp
  2054d4:	48 81 ec 90 03 00 00 	sub    rsp,0x390
  2054db:	48 89 f8             	mov    rax,rdi
  2054de:	48 8d 4d e0          	lea    rcx,[rbp-0x20]
  2054e2:	48 89 95 70 fd ff ff 	mov    QWORD PTR [rbp-0x290],rdx
            const st = try allocator.create(ElfStackTrace{
  2054e9:	48 8b 95 70 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x290]
                .abbrev_table_list = ArrayList(AbbrevTableHeader).init(allocator),
  2054f0:	4c 8b 85 70 fd ff ff 	mov    r8,QWORD PTR [rbp-0x290]
  2054f7:	48 89 bd 60 fd ff ff 	mov    QWORD PTR [rbp-0x2a0],rdi
  2054fe:	48 89 cf             	mov    rdi,rcx
  205501:	48 89 b5 58 fd ff ff 	mov    QWORD PTR [rbp-0x2a8],rsi
  205508:	4c 89 c6             	mov    rsi,r8
  20550b:	48 89 85 50 fd ff ff 	mov    QWORD PTR [rbp-0x2b0],rax
  205512:	48 89 95 48 fd ff ff 	mov    QWORD PTR [rbp-0x2b8],rdx
  205519:	e8 82 0a 00 00       	call   205fa0 <AlignedArrayList(AbbrevTableHeader,8)_init>
  20551e:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
                .compile_unit_list = ArrayList(CompileUnit).init(allocator),
  205522:	48 8b b5 70 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x290]
  205529:	e8 d2 0a 00 00       	call   206000 <AlignedArrayList(CompileUnit,2)_init>
  20552e:	48 8d bd e8 fe ff ff 	lea    rdi,[rbp-0x118]
  205535:	48 8d 85 f8 fe ff ff 	lea    rax,[rbp-0x108]
  20553c:	48 8d 15 f5 b0 ff ff 	lea    rdx,[rip+0xffffffffffffb0f5]        # 200638 <__unnamed_20>
  205543:	41 b9 58 00 00 00    	mov    r9d,0x58
  205549:	44 89 ce             	mov    esi,r9d
            const st = try allocator.create(ElfStackTrace{
  20554c:	44 8b 0d 11 cf ff ff 	mov    r9d,DWORD PTR [rip+0xffffffffffffcf11]        # 202464 <__unnamed_21>
  205553:	44 89 8d f8 fe ff ff 	mov    DWORD PTR [rbp-0x108],r9d
  20555a:	49 89 c0             	mov    r8,rax
  20555d:	49 83 c0 08          	add    r8,0x8
  205561:	48 89 bd 40 fd ff ff 	mov    QWORD PTR [rbp-0x2c0],rdi
  205568:	4c 89 c7             	mov    rdi,r8
  20556b:	48 89 b5 38 fd ff ff 	mov    QWORD PTR [rbp-0x2c8],rsi
  205572:	48 89 d6             	mov    rsi,rdx
  205575:	48 8b 95 38 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2c8]
  20557c:	48 89 8d 30 fd ff ff 	mov    QWORD PTR [rbp-0x2d0],rcx
  205583:	48 89 85 28 fd ff ff 	mov    QWORD PTR [rbp-0x2d8],rax
  20558a:	e8 71 c7 01 00       	call   221d00 <memcpy>
  20558f:	48 8b 85 30 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2d0]
  205596:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  20559d:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  2055a4:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  2055ab:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  2055b2:	48 c7 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],0x0
  2055b9:	00 00 00 00 
  2055bd:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  2055c1:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
  2055c5:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2055c9:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
  2055cd:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  2055d1:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
  2055d5:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  2055d9:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
  2055dd:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  2055e1:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
  2055e5:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  2055e9:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  2055ed:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  2055f1:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
  2055f5:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  2055f9:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
  2055fd:	48 8b bd 40 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2c0]
  205604:	48 8b b5 58 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a8]
  20560b:	48 8b 95 48 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2b8]
  205612:	48 8b 8d 28 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2d8]
  205619:	e8 42 0a 00 00       	call   206060 <Allocator_create>
  20561e:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  205625:	00 
  205626:	74 54                	je     20567c <openSelfDebugInfo+0x1ac>
  205628:	66 8b 85 e8 fe ff ff 	mov    ax,WORD PTR [rbp-0x118]
  20562f:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  205636:	66 89 85 26 fd ff ff 	mov    WORD PTR [rbp-0x2da],ax
  20563d:	e8 0e ee ff ff       	call   204450 <__zig_return_error>
  205642:	66 8b 85 26 fd ff ff 	mov    ax,WORD PTR [rbp-0x2da]
  205649:	66 89 85 c8 fe ff ff 	mov    WORD PTR [rbp-0x138],ax
  205650:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  205657:	48 8b 8d 60 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2a0]
  20565e:	48 89 39             	mov    QWORD PTR [rcx],rdi
  205661:	48 8b bd d0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x130]
  205668:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  20566c:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  205673:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20567a:	5d                   	pop    rbp
  20567b:	c3                   	ret    
  20567c:	48 8d bd c0 fe ff ff 	lea    rdi,[rbp-0x140]
  205683:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  20568a:	48 89 85 68 fd ff ff 	mov    QWORD PTR [rbp-0x298],rax
            st.self_exe_file = try os.openSelfExe();
  205691:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  205698:	48 8b b5 58 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a8]
  20569f:	48 89 85 18 fd ff ff 	mov    QWORD PTR [rbp-0x2e8],rax
  2056a6:	e8 c5 0a 00 00       	call   206170 <openSelfExe>
  2056ab:	66 83 bd c0 fe ff ff 	cmp    WORD PTR [rbp-0x140],0x0
  2056b2:	00 
  2056b3:	74 67                	je     20571c <openSelfDebugInfo+0x24c>
            errdefer allocator.destroy(st);
  2056b5:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  2056bc:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  2056c3:	e8 f8 0b 00 00       	call   2062c0 <Allocator_destroy>
            st.self_exe_file = try os.openSelfExe();
  2056c8:	66 8b 85 c0 fe ff ff 	mov    ax,WORD PTR [rbp-0x140]
  2056cf:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  2056d6:	66 89 85 16 fd ff ff 	mov    WORD PTR [rbp-0x2ea],ax
  2056dd:	e8 6e ed ff ff       	call   204450 <__zig_return_error>
  2056e2:	66 8b 85 16 fd ff ff 	mov    ax,WORD PTR [rbp-0x2ea]
  2056e9:	66 89 85 a8 fe ff ff 	mov    WORD PTR [rbp-0x158],ax
  2056f0:	48 8b b5 a8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x158]
  2056f7:	48 8b bd 60 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a0]
  2056fe:	48 89 37             	mov    QWORD PTR [rdi],rsi
  205701:	48 8b b5 b0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x150]
  205708:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  20570c:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  205713:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20571a:	5d                   	pop    rbp
  20571b:	c3                   	ret    
  20571c:	8b 85 c4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x13c]
  205722:	48 8b 8d 18 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2e8]
  205729:	89 01                	mov    DWORD PTR [rcx],eax
            try st.elf.openFile(allocator, &st.self_exe_file);
  20572b:	48 8b 95 68 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x298]
  205732:	48 83 c2 08          	add    rdx,0x8
  205736:	48 8b b5 70 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x290]
  20573d:	48 8b 8d 68 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x298]
  205744:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20574b:	48 89 b5 08 fd ff ff 	mov    QWORD PTR [rbp-0x2f8],rsi
  205752:	48 89 d6             	mov    rsi,rdx
  205755:	48 8b 95 08 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2f8]
  20575c:	e8 cf 0b 00 00       	call   206330 <Elf_openFile>
  205761:	66 89 85 a6 fe ff ff 	mov    WORD PTR [rbp-0x15a],ax
  205768:	66 83 bd a6 fe ff ff 	cmp    WORD PTR [rbp-0x15a],0x0
  20576f:	00 
  205770:	74 73                	je     2057e5 <openSelfDebugInfo+0x315>
            errdefer st.self_exe_file.close();
  205772:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  205779:	e8 52 30 00 00       	call   2087d0 <File_close>
            errdefer allocator.destroy(st);
  20577e:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  205785:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20578c:	e8 2f 0b 00 00       	call   2062c0 <Allocator_destroy>
            try st.elf.openFile(allocator, &st.self_exe_file);
  205791:	66 8b 85 a6 fe ff ff 	mov    ax,WORD PTR [rbp-0x15a]
  205798:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20579f:	66 89 85 06 fd ff ff 	mov    WORD PTR [rbp-0x2fa],ax
  2057a6:	e8 a5 ec ff ff       	call   204450 <__zig_return_error>
  2057ab:	66 8b 85 06 fd ff ff 	mov    ax,WORD PTR [rbp-0x2fa]
  2057b2:	66 89 85 90 fe ff ff 	mov    WORD PTR [rbp-0x170],ax
  2057b9:	48 8b b5 90 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x170]
  2057c0:	48 8b bd 60 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a0]
  2057c7:	48 89 37             	mov    QWORD PTR [rdi],rsi
  2057ca:	48 8b b5 98 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x168]
  2057d1:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  2057d5:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  2057dc:	48 81 c4 90 03 00 00 	add    rsp,0x390
  2057e3:	5d                   	pop    rbp
  2057e4:	c3                   	ret    
  2057e5:	48 8d bd 80 fe ff ff 	lea    rdi,[rbp-0x180]
  2057ec:	48 8d 0d 25 fc 01 00 	lea    rcx,[rip+0x1fc25]        # 225418 <__unnamed_22>
            st.debug_info = (try st.elf.findSection(".debug_info")) orelse return error.MissingDebugInfo;
  2057f3:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  2057fa:	48 83 c0 60          	add    rax,0x60
  2057fe:	48 8b 95 68 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x298]
  205805:	48 83 c2 08          	add    rdx,0x8
  205809:	48 8b b5 58 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a8]
  205810:	48 89 85 f8 fc ff ff 	mov    QWORD PTR [rbp-0x308],rax
  205817:	e8 e4 2f 00 00       	call   208800 <Elf_findSection>
  20581c:	66 83 bd 80 fe ff ff 	cmp    WORD PTR [rbp-0x180],0x0
  205823:	00 
  205824:	0f 84 86 00 00 00    	je     2058b0 <openSelfDebugInfo+0x3e0>
            errdefer st.elf.close();
  20582a:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  205831:	48 83 c0 08          	add    rax,0x8
  205835:	48 89 c7             	mov    rdi,rax
  205838:	e8 c3 33 00 00       	call   208c00 <Elf_close>
            errdefer st.self_exe_file.close();
  20583d:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  205844:	e8 87 2f 00 00       	call   2087d0 <File_close>
            errdefer allocator.destroy(st);
  205849:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  205850:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  205857:	e8 64 0a 00 00       	call   2062c0 <Allocator_destroy>
            st.debug_info = (try st.elf.findSection(".debug_info")) orelse return error.MissingDebugInfo;
  20585c:	66 8b 8d 80 fe ff ff 	mov    cx,WORD PTR [rbp-0x180]
  205863:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20586a:	66 89 8d f6 fc ff ff 	mov    WORD PTR [rbp-0x30a],cx
  205871:	e8 da eb ff ff       	call   204450 <__zig_return_error>
  205876:	66 8b 8d f6 fc ff ff 	mov    cx,WORD PTR [rbp-0x30a]
  20587d:	66 89 8d 60 fe ff ff 	mov    WORD PTR [rbp-0x1a0],cx
  205884:	48 8b 85 60 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a0]
  20588b:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  205892:	48 89 06             	mov    QWORD PTR [rsi],rax
  205895:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
  20589c:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  2058a0:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  2058a7:	48 81 c4 90 03 00 00 	add    rsp,0x390
  2058ae:	5d                   	pop    rbp
  2058af:	c3                   	ret    
  2058b0:	48 8d 85 80 fe ff ff 	lea    rax,[rbp-0x180]
  2058b7:	48 83 c0 08          	add    rax,0x8
  2058bb:	48 83 bd 88 fe ff ff 	cmp    QWORD PTR [rbp-0x178],0x0
  2058c2:	00 
  2058c3:	48 89 85 e8 fc ff ff 	mov    QWORD PTR [rbp-0x318],rax
  2058ca:	75 6a                	jne    205936 <openSelfDebugInfo+0x466>
            errdefer st.elf.close();
  2058cc:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  2058d3:	48 83 c0 08          	add    rax,0x8
  2058d7:	48 89 c7             	mov    rdi,rax
  2058da:	e8 21 33 00 00       	call   208c00 <Elf_close>
            errdefer st.self_exe_file.close();
  2058df:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  2058e6:	e8 e5 2e 00 00       	call   2087d0 <File_close>
            errdefer allocator.destroy(st);
  2058eb:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  2058f2:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  2058f9:	e8 c2 09 00 00       	call   2062c0 <Allocator_destroy>
            st.debug_info = (try st.elf.findSection(".debug_info")) orelse return error.MissingDebugInfo;
  2058fe:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  205905:	e8 46 eb ff ff       	call   204450 <__zig_return_error>
  20590a:	48 8b 05 ff c9 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc9ff]        # 202310 <__unnamed_103>
  205911:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  205918:	48 89 06             	mov    QWORD PTR [rsi],rax
  20591b:	48 8b 05 f6 c9 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc9f6]        # 202318 <__unnamed_103+0x8>
  205922:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  205926:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  20592d:	48 81 c4 90 03 00 00 	add    rsp,0x390
  205934:	5d                   	pop    rbp
  205935:	c3                   	ret    
  205936:	48 8b 85 e8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x318]
  20593d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  205940:	48 89 8d e0 fc ff ff 	mov    QWORD PTR [rbp-0x320],rcx
  205947:	48 8d bd 50 fe ff ff 	lea    rdi,[rbp-0x1b0]
  20594e:	48 8d 0d db fa 01 00 	lea    rcx,[rip+0x1fadb]        # 225430 <__unnamed_24>
  205955:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
  20595c:	48 8b 95 e0 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x320]
  205963:	48 89 10             	mov    QWORD PTR [rax],rdx
            st.debug_abbrev = (try st.elf.findSection(".debug_abbrev")) orelse return error.MissingDebugInfo;
  205966:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20596d:	48 83 c6 68          	add    rsi,0x68
  205971:	4c 8b 85 68 fd ff ff 	mov    r8,QWORD PTR [rbp-0x298]
  205978:	49 83 c0 08          	add    r8,0x8
  20597c:	4c 8b 8d 58 fd ff ff 	mov    r9,QWORD PTR [rbp-0x2a8]
  205983:	48 89 b5 d8 fc ff ff 	mov    QWORD PTR [rbp-0x328],rsi
  20598a:	4c 89 ce             	mov    rsi,r9
  20598d:	4c 89 c2             	mov    rdx,r8
  205990:	e8 6b 2e 00 00       	call   208800 <Elf_findSection>
  205995:	66 83 bd 50 fe ff ff 	cmp    WORD PTR [rbp-0x1b0],0x0
  20599c:	00 
  20599d:	0f 84 86 00 00 00    	je     205a29 <openSelfDebugInfo+0x559>
            errdefer st.elf.close();
  2059a3:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  2059aa:	48 83 c0 08          	add    rax,0x8
  2059ae:	48 89 c7             	mov    rdi,rax
  2059b1:	e8 4a 32 00 00       	call   208c00 <Elf_close>
            errdefer st.self_exe_file.close();
  2059b6:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  2059bd:	e8 0e 2e 00 00       	call   2087d0 <File_close>
            errdefer allocator.destroy(st);
  2059c2:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  2059c9:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  2059d0:	e8 eb 08 00 00       	call   2062c0 <Allocator_destroy>
            st.debug_abbrev = (try st.elf.findSection(".debug_abbrev")) orelse return error.MissingDebugInfo;
  2059d5:	66 8b 8d 50 fe ff ff 	mov    cx,WORD PTR [rbp-0x1b0]
  2059dc:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  2059e3:	66 89 8d d6 fc ff ff 	mov    WORD PTR [rbp-0x32a],cx
  2059ea:	e8 61 ea ff ff       	call   204450 <__zig_return_error>
  2059ef:	66 8b 8d d6 fc ff ff 	mov    cx,WORD PTR [rbp-0x32a]
  2059f6:	66 89 8d 30 fe ff ff 	mov    WORD PTR [rbp-0x1d0],cx
  2059fd:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  205a04:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  205a0b:	48 89 06             	mov    QWORD PTR [rsi],rax
  205a0e:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  205a15:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  205a19:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  205a20:	48 81 c4 90 03 00 00 	add    rsp,0x390
  205a27:	5d                   	pop    rbp
  205a28:	c3                   	ret    
  205a29:	48 8d 85 50 fe ff ff 	lea    rax,[rbp-0x1b0]
  205a30:	48 83 c0 08          	add    rax,0x8
  205a34:	48 83 bd 58 fe ff ff 	cmp    QWORD PTR [rbp-0x1a8],0x0
  205a3b:	00 
  205a3c:	48 89 85 c8 fc ff ff 	mov    QWORD PTR [rbp-0x338],rax
  205a43:	75 6a                	jne    205aaf <openSelfDebugInfo+0x5df>
            errdefer st.elf.close();
  205a45:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  205a4c:	48 83 c0 08          	add    rax,0x8
  205a50:	48 89 c7             	mov    rdi,rax
  205a53:	e8 a8 31 00 00       	call   208c00 <Elf_close>
            errdefer st.self_exe_file.close();
  205a58:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  205a5f:	e8 6c 2d 00 00       	call   2087d0 <File_close>
            errdefer allocator.destroy(st);
  205a64:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  205a6b:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  205a72:	e8 49 08 00 00       	call   2062c0 <Allocator_destroy>
            st.debug_abbrev = (try st.elf.findSection(".debug_abbrev")) orelse return error.MissingDebugInfo;
  205a77:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  205a7e:	e8 cd e9 ff ff       	call   204450 <__zig_return_error>
  205a83:	48 8b 05 86 c8 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc886]        # 202310 <__unnamed_103>
  205a8a:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  205a91:	48 89 06             	mov    QWORD PTR [rsi],rax
  205a94:	48 8b 05 7d c8 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc87d]        # 202318 <__unnamed_103+0x8>
  205a9b:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  205a9f:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  205aa6:	48 81 c4 90 03 00 00 	add    rsp,0x390
  205aad:	5d                   	pop    rbp
  205aae:	c3                   	ret    
  205aaf:	48 8b 85 c8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x338]
  205ab6:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  205ab9:	48 89 8d c0 fc ff ff 	mov    QWORD PTR [rbp-0x340],rcx
  205ac0:	48 8d bd 20 fe ff ff 	lea    rdi,[rbp-0x1e0]
  205ac7:	48 8d 0d 7a f9 01 00 	lea    rcx,[rip+0x1f97a]        # 225448 <__unnamed_26>
  205ace:	48 8b 85 d8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x328]
  205ad5:	48 8b 95 c0 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x340]
  205adc:	48 89 10             	mov    QWORD PTR [rax],rdx
            st.debug_str = (try st.elf.findSection(".debug_str")) orelse return error.MissingDebugInfo;
  205adf:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  205ae6:	48 83 c6 70          	add    rsi,0x70
  205aea:	4c 8b 85 68 fd ff ff 	mov    r8,QWORD PTR [rbp-0x298]
  205af1:	49 83 c0 08          	add    r8,0x8
  205af5:	4c 8b 8d 58 fd ff ff 	mov    r9,QWORD PTR [rbp-0x2a8]
  205afc:	48 89 b5 b8 fc ff ff 	mov    QWORD PTR [rbp-0x348],rsi
  205b03:	4c 89 ce             	mov    rsi,r9
  205b06:	4c 89 c2             	mov    rdx,r8
  205b09:	e8 f2 2c 00 00       	call   208800 <Elf_findSection>
  205b0e:	66 83 bd 20 fe ff ff 	cmp    WORD PTR [rbp-0x1e0],0x0
  205b15:	00 
  205b16:	0f 84 86 00 00 00    	je     205ba2 <openSelfDebugInfo+0x6d2>
            errdefer st.elf.close();
  205b1c:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  205b23:	48 83 c0 08          	add    rax,0x8
  205b27:	48 89 c7             	mov    rdi,rax
  205b2a:	e8 d1 30 00 00       	call   208c00 <Elf_close>
            errdefer st.self_exe_file.close();
  205b2f:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  205b36:	e8 95 2c 00 00       	call   2087d0 <File_close>
            errdefer allocator.destroy(st);
  205b3b:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  205b42:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  205b49:	e8 72 07 00 00       	call   2062c0 <Allocator_destroy>
            st.debug_str = (try st.elf.findSection(".debug_str")) orelse return error.MissingDebugInfo;
  205b4e:	66 8b 8d 20 fe ff ff 	mov    cx,WORD PTR [rbp-0x1e0]
  205b55:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  205b5c:	66 89 8d b6 fc ff ff 	mov    WORD PTR [rbp-0x34a],cx
  205b63:	e8 e8 e8 ff ff       	call   204450 <__zig_return_error>
  205b68:	66 8b 8d b6 fc ff ff 	mov    cx,WORD PTR [rbp-0x34a]
  205b6f:	66 89 8d 00 fe ff ff 	mov    WORD PTR [rbp-0x200],cx
  205b76:	48 8b 85 00 fe ff ff 	mov    rax,QWORD PTR [rbp-0x200]
  205b7d:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  205b84:	48 89 06             	mov    QWORD PTR [rsi],rax
  205b87:	48 8b 85 08 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1f8]
  205b8e:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  205b92:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  205b99:	48 81 c4 90 03 00 00 	add    rsp,0x390
  205ba0:	5d                   	pop    rbp
  205ba1:	c3                   	ret    
  205ba2:	48 8d 85 20 fe ff ff 	lea    rax,[rbp-0x1e0]
  205ba9:	48 83 c0 08          	add    rax,0x8
  205bad:	48 83 bd 28 fe ff ff 	cmp    QWORD PTR [rbp-0x1d8],0x0
  205bb4:	00 
  205bb5:	48 89 85 a8 fc ff ff 	mov    QWORD PTR [rbp-0x358],rax
  205bbc:	75 6a                	jne    205c28 <openSelfDebugInfo+0x758>
            errdefer st.elf.close();
  205bbe:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  205bc5:	48 83 c0 08          	add    rax,0x8
  205bc9:	48 89 c7             	mov    rdi,rax
  205bcc:	e8 2f 30 00 00       	call   208c00 <Elf_close>
            errdefer st.self_exe_file.close();
  205bd1:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  205bd8:	e8 f3 2b 00 00       	call   2087d0 <File_close>
            errdefer allocator.destroy(st);
  205bdd:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  205be4:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  205beb:	e8 d0 06 00 00       	call   2062c0 <Allocator_destroy>
            st.debug_str = (try st.elf.findSection(".debug_str")) orelse return error.MissingDebugInfo;
  205bf0:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  205bf7:	e8 54 e8 ff ff       	call   204450 <__zig_return_error>
  205bfc:	48 8b 05 0d c7 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc70d]        # 202310 <__unnamed_103>
  205c03:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  205c0a:	48 89 06             	mov    QWORD PTR [rsi],rax
  205c0d:	48 8b 05 04 c7 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc704]        # 202318 <__unnamed_103+0x8>
  205c14:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  205c18:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  205c1f:	48 81 c4 90 03 00 00 	add    rsp,0x390
  205c26:	5d                   	pop    rbp
  205c27:	c3                   	ret    
  205c28:	48 8b 85 a8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x358]
  205c2f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  205c32:	48 89 8d a0 fc ff ff 	mov    QWORD PTR [rbp-0x360],rcx
  205c39:	48 8d bd f0 fd ff ff 	lea    rdi,[rbp-0x210]
  205c40:	48 8d 0d 19 f8 01 00 	lea    rcx,[rip+0x1f819]        # 225460 <__unnamed_28>
  205c47:	48 8b 85 b8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x348]
  205c4e:	48 8b 95 a0 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x360]
  205c55:	48 89 10             	mov    QWORD PTR [rax],rdx
            st.debug_line = (try st.elf.findSection(".debug_line")) orelse return error.MissingDebugInfo;
  205c58:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  205c5f:	48 83 c6 78          	add    rsi,0x78
  205c63:	4c 8b 85 68 fd ff ff 	mov    r8,QWORD PTR [rbp-0x298]
  205c6a:	49 83 c0 08          	add    r8,0x8
  205c6e:	4c 8b 8d 58 fd ff ff 	mov    r9,QWORD PTR [rbp-0x2a8]
  205c75:	48 89 b5 98 fc ff ff 	mov    QWORD PTR [rbp-0x368],rsi
  205c7c:	4c 89 ce             	mov    rsi,r9
  205c7f:	4c 89 c2             	mov    rdx,r8
  205c82:	e8 79 2b 00 00       	call   208800 <Elf_findSection>
  205c87:	66 83 bd f0 fd ff ff 	cmp    WORD PTR [rbp-0x210],0x0
  205c8e:	00 
  205c8f:	0f 84 86 00 00 00    	je     205d1b <openSelfDebugInfo+0x84b>
            errdefer st.elf.close();
  205c95:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  205c9c:	48 83 c0 08          	add    rax,0x8
  205ca0:	48 89 c7             	mov    rdi,rax
  205ca3:	e8 58 2f 00 00       	call   208c00 <Elf_close>
            errdefer st.self_exe_file.close();
  205ca8:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  205caf:	e8 1c 2b 00 00       	call   2087d0 <File_close>
            errdefer allocator.destroy(st);
  205cb4:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  205cbb:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  205cc2:	e8 f9 05 00 00       	call   2062c0 <Allocator_destroy>
            st.debug_line = (try st.elf.findSection(".debug_line")) orelse return error.MissingDebugInfo;
  205cc7:	66 8b 8d f0 fd ff ff 	mov    cx,WORD PTR [rbp-0x210]
  205cce:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  205cd5:	66 89 8d 96 fc ff ff 	mov    WORD PTR [rbp-0x36a],cx
  205cdc:	e8 6f e7 ff ff       	call   204450 <__zig_return_error>
  205ce1:	66 8b 8d 96 fc ff ff 	mov    cx,WORD PTR [rbp-0x36a]
  205ce8:	66 89 8d d0 fd ff ff 	mov    WORD PTR [rbp-0x230],cx
  205cef:	48 8b 85 d0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x230]
  205cf6:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  205cfd:	48 89 06             	mov    QWORD PTR [rsi],rax
  205d00:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
  205d07:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  205d0b:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  205d12:	48 81 c4 90 03 00 00 	add    rsp,0x390
  205d19:	5d                   	pop    rbp
  205d1a:	c3                   	ret    
  205d1b:	48 8d 85 f0 fd ff ff 	lea    rax,[rbp-0x210]
  205d22:	48 83 c0 08          	add    rax,0x8
  205d26:	48 83 bd f8 fd ff ff 	cmp    QWORD PTR [rbp-0x208],0x0
  205d2d:	00 
  205d2e:	48 89 85 88 fc ff ff 	mov    QWORD PTR [rbp-0x378],rax
  205d35:	75 6a                	jne    205da1 <openSelfDebugInfo+0x8d1>
            errdefer st.elf.close();
  205d37:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  205d3e:	48 83 c0 08          	add    rax,0x8
  205d42:	48 89 c7             	mov    rdi,rax
  205d45:	e8 b6 2e 00 00       	call   208c00 <Elf_close>
            errdefer st.self_exe_file.close();
  205d4a:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  205d51:	e8 7a 2a 00 00       	call   2087d0 <File_close>
            errdefer allocator.destroy(st);
  205d56:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  205d5d:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  205d64:	e8 57 05 00 00       	call   2062c0 <Allocator_destroy>
            st.debug_line = (try st.elf.findSection(".debug_line")) orelse return error.MissingDebugInfo;
  205d69:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  205d70:	e8 db e6 ff ff       	call   204450 <__zig_return_error>
  205d75:	48 8b 05 94 c5 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc594]        # 202310 <__unnamed_103>
  205d7c:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  205d83:	48 89 06             	mov    QWORD PTR [rsi],rax
  205d86:	48 8b 05 8b c5 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc58b]        # 202318 <__unnamed_103+0x8>
  205d8d:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  205d91:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  205d98:	48 81 c4 90 03 00 00 	add    rsp,0x390
  205d9f:	5d                   	pop    rbp
  205da0:	c3                   	ret    
  205da1:	48 8b 85 88 fc ff ff 	mov    rax,QWORD PTR [rbp-0x378]
  205da8:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  205dab:	48 89 8d 80 fc ff ff 	mov    QWORD PTR [rbp-0x380],rcx
  205db2:	48 8d bd c0 fd ff ff 	lea    rdi,[rbp-0x240]
  205db9:	48 8d 0d b8 f6 01 00 	lea    rcx,[rip+0x1f6b8]        # 225478 <__unnamed_30>
  205dc0:	48 8b 85 98 fc ff ff 	mov    rax,QWORD PTR [rbp-0x368]
  205dc7:	48 8b 95 80 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x380]
  205dce:	48 89 10             	mov    QWORD PTR [rax],rdx
            st.debug_ranges = (try st.elf.findSection(".debug_ranges"));
  205dd1:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  205dd8:	48 81 c6 80 00 00 00 	add    rsi,0x80
  205ddf:	4c 8b 85 68 fd ff ff 	mov    r8,QWORD PTR [rbp-0x298]
  205de6:	49 83 c0 08          	add    r8,0x8
  205dea:	4c 8b 8d 58 fd ff ff 	mov    r9,QWORD PTR [rbp-0x2a8]
  205df1:	48 89 b5 78 fc ff ff 	mov    QWORD PTR [rbp-0x388],rsi
  205df8:	4c 89 ce             	mov    rsi,r9
  205dfb:	4c 89 c2             	mov    rdx,r8
  205dfe:	e8 fd 29 00 00       	call   208800 <Elf_findSection>
  205e03:	66 83 bd c0 fd ff ff 	cmp    WORD PTR [rbp-0x240],0x0
  205e0a:	00 
  205e0b:	0f 84 86 00 00 00    	je     205e97 <openSelfDebugInfo+0x9c7>
            errdefer st.elf.close();
  205e11:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  205e18:	48 83 c0 08          	add    rax,0x8
  205e1c:	48 89 c7             	mov    rdi,rax
  205e1f:	e8 dc 2d 00 00       	call   208c00 <Elf_close>
            errdefer st.self_exe_file.close();
  205e24:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  205e2b:	e8 a0 29 00 00       	call   2087d0 <File_close>
            errdefer allocator.destroy(st);
  205e30:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  205e37:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  205e3e:	e8 7d 04 00 00       	call   2062c0 <Allocator_destroy>
            st.debug_ranges = (try st.elf.findSection(".debug_ranges"));
  205e43:	66 8b 8d c0 fd ff ff 	mov    cx,WORD PTR [rbp-0x240]
  205e4a:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  205e51:	66 89 8d 76 fc ff ff 	mov    WORD PTR [rbp-0x38a],cx
  205e58:	e8 f3 e5 ff ff       	call   204450 <__zig_return_error>
  205e5d:	66 8b 8d 76 fc ff ff 	mov    cx,WORD PTR [rbp-0x38a]
  205e64:	66 89 8d a0 fd ff ff 	mov    WORD PTR [rbp-0x260],cx
  205e6b:	48 8b 85 a0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x260]
  205e72:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  205e79:	48 89 06             	mov    QWORD PTR [rsi],rax
  205e7c:	48 8b 85 a8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x258]
  205e83:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  205e87:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  205e8e:	48 81 c4 90 03 00 00 	add    rsp,0x390
  205e95:	5d                   	pop    rbp
  205e96:	c3                   	ret    
  205e97:	48 8b 85 c8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x238]
  205e9e:	48 8b 8d 78 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x388]
  205ea5:	48 89 01             	mov    QWORD PTR [rcx],rax
            try scanAllCompileUnits(st);
  205ea8:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  205eaf:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  205eb6:	e8 95 2d 00 00       	call   208c50 <scanAllCompileUnits>
  205ebb:	66 89 85 9e fd ff ff 	mov    WORD PTR [rbp-0x262],ax
  205ec2:	66 83 bd 9e fd ff ff 	cmp    WORD PTR [rbp-0x262],0x0
  205ec9:	00 
  205eca:	0f 84 86 00 00 00    	je     205f56 <openSelfDebugInfo+0xa86>
            errdefer st.elf.close();
  205ed0:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  205ed7:	48 83 c0 08          	add    rax,0x8
  205edb:	48 89 c7             	mov    rdi,rax
  205ede:	e8 1d 2d 00 00       	call   208c00 <Elf_close>
            errdefer st.self_exe_file.close();
  205ee3:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  205eea:	e8 e1 28 00 00       	call   2087d0 <File_close>
            errdefer allocator.destroy(st);
  205eef:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  205ef6:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  205efd:	e8 be 03 00 00       	call   2062c0 <Allocator_destroy>
            try scanAllCompileUnits(st);
  205f02:	66 8b 8d 9e fd ff ff 	mov    cx,WORD PTR [rbp-0x262]
  205f09:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  205f10:	66 89 8d 74 fc ff ff 	mov    WORD PTR [rbp-0x38c],cx
  205f17:	e8 34 e5 ff ff       	call   204450 <__zig_return_error>
  205f1c:	66 8b 8d 74 fc ff ff 	mov    cx,WORD PTR [rbp-0x38c]
  205f23:	66 89 8d 88 fd ff ff 	mov    WORD PTR [rbp-0x278],cx
  205f2a:	48 8b 85 88 fd ff ff 	mov    rax,QWORD PTR [rbp-0x278]
  205f31:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  205f38:	48 89 06             	mov    QWORD PTR [rsi],rax
  205f3b:	48 8b 85 90 fd ff ff 	mov    rax,QWORD PTR [rbp-0x270]
  205f42:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  205f46:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  205f4d:	48 81 c4 90 03 00 00 	add    rsp,0x390
  205f54:	5d                   	pop    rbp
  205f55:	c3                   	ret    
            return st;
  205f56:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  205f5d:	66 c7 85 78 fd ff ff 	mov    WORD PTR [rbp-0x288],0x0
  205f64:	00 00 
  205f66:	48 89 85 80 fd ff ff 	mov    QWORD PTR [rbp-0x280],rax
  205f6d:	48 8b 85 78 fd ff ff 	mov    rax,QWORD PTR [rbp-0x288]
  205f74:	48 8b 8d 60 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2a0]
  205f7b:	48 89 01             	mov    QWORD PTR [rcx],rax
  205f7e:	48 8b 85 80 fd ff ff 	mov    rax,QWORD PTR [rbp-0x280]
  205f85:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  205f89:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  205f90:	48 81 c4 90 03 00 00 	add    rsp,0x390
  205f97:	5d                   	pop    rbp
  205f98:	c3                   	ret    
  205f99:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000205fa0 <AlignedArrayList(AbbrevTableHeader,8)_init>:
        items: []align(A) T,
        len: usize,
        allocator: *Allocator,

        /// Deinitialize with `deinit` or use `toOwnedSlice`.
        pub fn init(allocator: *Allocator) Self {
  205fa0:	55                   	push   rbp
  205fa1:	48 89 e5             	mov    rbp,rsp
  205fa4:	48 89 f8             	mov    rax,rdi
  205fa7:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
            return Self{
                .items = []align(A) T{},
                .len = 0,
                .allocator = allocator,
  205fab:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
            return Self{
  205faf:	48 8b 0d 0a c3 ff ff 	mov    rcx,QWORD PTR [rip+0xffffffffffffc30a]        # 2022c0 <__unnamed_123>
  205fb6:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  205fba:	48 8b 0d 07 c3 ff ff 	mov    rcx,QWORD PTR [rip+0xffffffffffffc307]        # 2022c8 <__unnamed_123+0x8>
  205fc1:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  205fc5:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  205fcc:	00 
  205fcd:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  205fd1:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  205fd5:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  205fd8:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  205fdc:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  205fe0:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  205fe4:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  205fe8:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  205fec:	48 89 4f 18          	mov    QWORD PTR [rdi+0x18],rcx
  205ff0:	5d                   	pop    rbp
  205ff1:	c3                   	ret    
  205ff2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  205ff9:	1f 84 00 00 00 00 00 

0000000000206000 <AlignedArrayList(CompileUnit,2)_init>:
        pub fn init(allocator: *Allocator) Self {
  206000:	55                   	push   rbp
  206001:	48 89 e5             	mov    rbp,rsp
  206004:	48 89 f8             	mov    rax,rdi
  206007:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
                .allocator = allocator,
  20600b:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
            return Self{
  20600f:	48 8b 0d aa c2 ff ff 	mov    rcx,QWORD PTR [rip+0xffffffffffffc2aa]        # 2022c0 <__unnamed_123>
  206016:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  20601a:	48 8b 0d a7 c2 ff ff 	mov    rcx,QWORD PTR [rip+0xffffffffffffc2a7]        # 2022c8 <__unnamed_123+0x8>
  206021:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  206025:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  20602c:	00 
  20602d:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  206031:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  206035:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  206038:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20603c:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  206040:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  206044:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  206048:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  20604c:	48 89 4f 18          	mov    QWORD PTR [rdi+0x18],rcx
  206050:	5d                   	pop    rbp
  206051:	c3                   	ret    
  206052:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  206059:	1f 84 00 00 00 00 00 

0000000000206060 <Allocator_create>:
    pub fn create(self: *Allocator, init: var) Error!*@typeOf(init) {
  206060:	55                   	push   rbp
  206061:	48 89 e5             	mov    rbp,rsp
  206064:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  20606b:	48 89 f8             	mov    rax,rdi
  20606e:	4c 8d 45 e8          	lea    r8,[rbp-0x18]
  206072:	41 b9 01 00 00 00    	mov    r9d,0x1
  206078:	45 89 ca             	mov    r10d,r9d
  20607b:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
        const slice = try self.alloc(T, 1);
  20607f:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  206083:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
  206087:	4c 89 c7             	mov    rdi,r8
  20608a:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
  20608e:	48 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rcx
  206095:	4c 89 d1             	mov    rcx,r10
  206098:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  20609f:	e8 9c 37 00 00       	call   209840 <Allocator_alloc>
  2060a4:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  2060a9:	74 42                	je     2060ed <Allocator_create+0x8d>
  2060ab:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  2060af:	48 8b 7d 80          	mov    rdi,QWORD PTR [rbp-0x80]
  2060b3:	66 89 85 6e ff ff ff 	mov    WORD PTR [rbp-0x92],ax
  2060ba:	e8 91 e3 ff ff       	call   204450 <__zig_return_error>
  2060bf:	66 8b 85 6e ff ff ff 	mov    ax,WORD PTR [rbp-0x92]
  2060c6:	66 89 45 c0          	mov    WORD PTR [rbp-0x40],ax
  2060ca:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  2060ce:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  2060d2:	48 89 39             	mov    QWORD PTR [rcx],rdi
  2060d5:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2060d9:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  2060dd:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  2060e4:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  2060eb:	5d                   	pop    rbp
  2060ec:	c3                   	ret    
  2060ed:	31 c0                	xor    eax,eax
  2060ef:	89 c1                	mov    ecx,eax
  2060f1:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  2060f5:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  2060f9:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  2060fd:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
        const ptr = &slice[0];
  206101:	48 3b 4d a0          	cmp    rcx,QWORD PTR [rbp-0x60]
  206105:	72 10                	jb     206117 <Allocator_create+0xb7>
  206107:	48 8d 3d f2 f1 01 00 	lea    rdi,[rip+0x1f1f2]        # 225300 <__unnamed_4>
  20610e:	31 c0                	xor    eax,eax
  206110:	89 c6                	mov    esi,eax
  206112:	e8 a9 cf ff ff       	call   2030c0 <panic>
  206117:	b8 c8 00 00 00       	mov    eax,0xc8
  20611c:	89 c2                	mov    edx,eax
  20611e:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  206122:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
        ptr.* = init;
  206126:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  20612a:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
  206131:	48 89 cf             	mov    rdi,rcx
  206134:	e8 c7 bb 01 00       	call   221d00 <memcpy>
        return ptr;
  206139:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  20613d:	66 c7 45 b0 00 00    	mov    WORD PTR [rbp-0x50],0x0
  206143:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
  206147:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  20614b:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
  20614f:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  206152:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  206156:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  20615a:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  206161:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  206168:	5d                   	pop    rbp
  206169:	c3                   	ret    
  20616a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000206170 <openSelfExe>:
        debug.dumpCurrentStackTrace(null);
    }
    return error.Unexpected;
}

pub fn openSelfExe() !os.File {
  206170:	55                   	push   rbp
  206171:	48 89 e5             	mov    rbp,rsp
  206174:	48 81 ec d0 00 00 00 	sub    rsp,0xd0
  20617b:	48 89 f8             	mov    rax,rdi
  20617e:	b1 01                	mov    cl,0x1
    switch (builtin.os) {
        Os.linux => {
            const proc_file_path = "/proc/self/exe";
  206180:	48 8b 15 43 a5 ff ff 	mov    rdx,QWORD PTR [rip+0xffffffffffffa543]        # 2006ca <__unnamed_33>
  206187:	48 89 55 aa          	mov    QWORD PTR [rbp-0x56],rdx
  20618b:	44 8b 05 40 a5 ff ff 	mov    r8d,DWORD PTR [rip+0xffffffffffffa540]        # 2006d2 <__unnamed_33+0x8>
  206192:	44 89 45 b2          	mov    DWORD PTR [rbp-0x4e],r8d
  206196:	66 44 8b 0d 38 a5 ff 	mov    r9w,WORD PTR [rip+0xffffffffffffa538]        # 2006d6 <__unnamed_33+0xc>
  20619d:	ff 
  20619e:	66 44 89 4d b6       	mov    WORD PTR [rbp-0x4a],r9w
            var fixed_buffer_mem: [proc_file_path.len + 1]u8 = undefined;
  2061a3:	48 8b 15 2e a5 ff ff 	mov    rdx,QWORD PTR [rip+0xffffffffffffa52e]        # 2006d8 <__unnamed_34>
  2061aa:	48 89 55 9b          	mov    QWORD PTR [rbp-0x65],rdx
  2061ae:	44 8b 05 2b a5 ff ff 	mov    r8d,DWORD PTR [rip+0xffffffffffffa52b]        # 2006e0 <__unnamed_34+0x8>
  2061b5:	44 89 45 a3          	mov    DWORD PTR [rbp-0x5d],r8d
  2061b9:	66 44 8b 0d 23 a5 ff 	mov    r9w,WORD PTR [rip+0xffffffffffffa523]        # 2006e4 <__unnamed_34+0xc>
  2061c0:	ff 
  2061c1:	66 44 89 4d a7       	mov    WORD PTR [rbp-0x59],r9w
  2061c6:	44 8a 15 19 a5 ff ff 	mov    r10b,BYTE PTR [rip+0xffffffffffffa519]        # 2006e6 <__unnamed_34+0xe>
  2061cd:	44 88 55 a9          	mov    BYTE PTR [rbp-0x57],r10b
            var fixed_allocator = std.heap.FixedBufferAllocator.init(fixed_buffer_mem[0..]);
  2061d1:	f6 c1 01             	test   cl,0x1
  2061d4:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  2061db:	48 89 b5 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rsi
  2061e2:	48 89 bd 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdi
  2061e9:	75 40                	jne    20622b <openSelfExe+0xbb>
  2061eb:	eb 2e                	jmp    20621b <openSelfExe+0xab>
            return os.File.openRead(&fixed_allocator.allocator, proc_file_path);
  2061ed:	48 8b bd 58 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  2061f4:	e8 57 e2 ff ff       	call   204450 <__zig_return_error>
  2061f9:	eb 02                	jmp    2061fd <openSelfExe+0x8d>
  2061fb:	eb 00                	jmp    2061fd <openSelfExe+0x8d>
  2061fd:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  206201:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
  206208:	48 89 01             	mov    QWORD PTR [rcx],rax
  20620b:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  206212:	48 81 c4 d0 00 00 00 	add    rsp,0xd0
  206219:	5d                   	pop    rbp
  20621a:	c3                   	ret    
  20621b:	48 8d 3d de f0 01 00 	lea    rdi,[rip+0x1f0de]        # 225300 <__unnamed_4>
  206222:	31 c0                	xor    eax,eax
  206224:	89 c6                	mov    esi,eax
            var fixed_allocator = std.heap.FixedBufferAllocator.init(fixed_buffer_mem[0..]);
  206226:	e8 95 ce ff ff       	call   2030c0 <panic>
  20622b:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  20622f:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
  206233:	48 8d 45 9b          	lea    rax,[rbp-0x65]
  206237:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  20623b:	48 c7 45 f8 0f 00 00 	mov    QWORD PTR [rbp-0x8],0xf
  206242:	00 
  206243:	e8 68 36 00 00       	call   2098b0 <FixedBufferAllocator_init>
  206248:	48 8d 7d b8          	lea    rdi,[rbp-0x48]
  20624c:	48 8d 0d 75 f2 01 00 	lea    rcx,[rip+0x1f275]        # 2254c8 <__unnamed_35>
  206253:	48 8d 85 68 ff ff ff 	lea    rax,[rbp-0x98]
  20625a:	ba 30 00 00 00       	mov    edx,0x30
  20625f:	48 8d 75 c0          	lea    rsi,[rbp-0x40]
  206263:	49 89 c0             	mov    r8,rax
  206266:	48 89 bd 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdi
  20626d:	4c 89 c7             	mov    rdi,r8
  206270:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  206277:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  20627e:	e8 7d ba 01 00       	call   221d00 <memcpy>
            return os.File.openRead(&fixed_allocator.allocator, proc_file_path);
  206283:	48 8b bd 48 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb8]
  20628a:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  206291:	48 8b 95 40 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc0]
  206298:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
  20629f:	e8 7c 36 00 00       	call   209920 <File_openRead>
  2062a4:	66 83 7d b8 00       	cmp    WORD PTR [rbp-0x48],0x0
  2062a9:	0f 85 3e ff ff ff    	jne    2061ed <openSelfExe+0x7d>
  2062af:	e9 47 ff ff ff       	jmp    2061fb <openSelfExe+0x8b>
  2062b4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2062bb:	00 00 00 00 00 

00000000002062c0 <Allocator_destroy>:
    pub fn destroy(self: *Allocator, ptr: var) void {
  2062c0:	55                   	push   rbp
  2062c1:	48 89 e5             	mov    rbp,rsp
  2062c4:	48 83 ec 40          	sub    rsp,0x40
  2062c8:	b0 01                	mov    al,0x1
  2062ca:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  2062ce:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
        const non_const_ptr = @intToPtr([*]u8, @ptrToInt(ptr));
  2062d2:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  2062d6:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
        self.freeFn(self, non_const_ptr[0..@sizeOf(@typeOf(ptr).Child)]);
  2062da:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  2062de:	48 8b 76 10          	mov    rsi,QWORD PTR [rsi+0x10]
  2062e2:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  2062e6:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  2062ea:	a8 01                	test   al,0x1
  2062ec:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  2062f0:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  2062f4:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
  2062f8:	75 10                	jne    20630a <Allocator_destroy+0x4a>
  2062fa:	48 8d 3d ff ef 01 00 	lea    rdi,[rip+0x1efff]        # 225300 <__unnamed_4>
  206301:	31 c0                	xor    eax,eax
  206303:	89 c6                	mov    esi,eax
  206305:	e8 b6 cd ff ff       	call   2030c0 <panic>
  20630a:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
  20630e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  206312:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  206316:	48 c7 45 f8 c8 00 00 	mov    QWORD PTR [rbp-0x8],0xc8
  20631d:	00 
  20631e:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  206322:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  206326:	ff d1                	call   rcx
    pub fn destroy(self: *Allocator, ptr: var) void {
  206328:	48 83 c4 40          	add    rsp,0x40
  20632c:	5d                   	pop    rbp
  20632d:	c3                   	ret    
  20632e:	66 90                	xchg   ax,ax

0000000000206330 <Elf_openFile>:
        try elf.openFile(allocator, *elf.prealloc_file);
        elf.auto_close_stream = true;
    }

    /// Call close when done.
    pub fn openFile(elf: *Elf, allocator: *mem.Allocator, file: *os.File) !void {
  206330:	55                   	push   rbp
  206331:	48 89 e5             	mov    rbp,rsp
  206334:	48 81 ec 20 09 00 00 	sub    rsp,0x920
  20633b:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  20633f:	48 89 b5 18 fc ff ff 	mov    QWORD PTR [rbp-0x3e8],rsi
  206346:	48 89 95 10 fc ff ff 	mov    QWORD PTR [rbp-0x3f0],rdx
  20634d:	48 89 8d 08 fc ff ff 	mov    QWORD PTR [rbp-0x3f8],rcx
        elf.allocator = allocator;
  206354:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  20635b:	48 8b 95 10 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x3f0]
  206362:	48 89 51 48          	mov    QWORD PTR [rcx+0x48],rdx
        elf.in_file = file;
  206366:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  20636d:	48 8b 95 08 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x3f8]
  206374:	48 89 11             	mov    QWORD PTR [rcx],rdx
        elf.auto_close_stream = false;
  206377:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  20637e:	c6 41 08 00          	mov    BYTE PTR [rcx+0x8],0x0

        var file_stream = io.FileInStream.init(elf.in_file);
  206382:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  206389:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  20638c:	48 89 bd 70 fb ff ff 	mov    QWORD PTR [rbp-0x490],rdi
  206393:	48 89 c7             	mov    rdi,rax
  206396:	e8 f5 3e 00 00       	call   20a290 <FileInStream_init>
  20639b:	41 b0 01             	mov    r8b,0x1
  20639e:	48 8d 85 f8 fb ff ff 	lea    rax,[rbp-0x408]
  2063a5:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  2063a9:	48 89 8d f8 fb ff ff 	mov    QWORD PTR [rbp-0x408],rcx
  2063b0:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  2063b4:	48 89 8d 00 fc ff ff 	mov    QWORD PTR [rbp-0x400],rcx
        const in = &file_stream.stream;
  2063bb:	48 83 c0 08          	add    rax,0x8
  2063bf:	48 89 85 f0 fb ff ff 	mov    QWORD PTR [rbp-0x410],rax

        var magic: [4]u8 = undefined;
  2063c6:	44 8b 0d 97 c0 ff ff 	mov    r9d,DWORD PTR [rip+0xffffffffffffc097]        # 202464 <__unnamed_21>
  2063cd:	44 89 8d ec fb ff ff 	mov    DWORD PTR [rbp-0x414],r9d
        try in.readNoEof(magic[0..]);
  2063d4:	48 8b b5 f0 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x410]
  2063db:	41 f6 c0 01          	test   r8b,0x1
  2063df:	48 89 b5 68 fb ff ff 	mov    QWORD PTR [rbp-0x498],rsi
  2063e6:	0f 85 a2 22 00 00    	jne    20868e <Elf_openFile+0x235e>
  2063ec:	e9 8d 22 00 00       	jmp    20867e <Elf_openFile+0x234e>
  2063f1:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  2063f5:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2063fc:	66 89 85 66 fb ff ff 	mov    WORD PTR [rbp-0x49a],ax
  206403:	e8 48 e0 ff ff       	call   204450 <__zig_return_error>
  206408:	66 8b 85 66 fb ff ff 	mov    ax,WORD PTR [rbp-0x49a]
  20640f:	48 81 c4 20 09 00 00 	add    rsp,0x920
  206416:	5d                   	pop    rbp
  206417:	c3                   	ret    
  206418:	48 8d 85 ec fb ff ff 	lea    rax,[rbp-0x414]
        if (!mem.eql(u8, magic, "\x7fELF")) return error.InvalidFormat;
  20641f:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  206423:	48 c7 45 d0 04 00 00 	mov    QWORD PTR [rbp-0x30],0x4
  20642a:	00 
  20642b:	48 8d 35 c6 f0 01 00 	lea    rsi,[rip+0x1f0c6]        # 2254f8 <__unnamed_37>
  206432:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  206436:	e8 25 3f 00 00       	call   20a360 <eql>
  20643b:	88 c1                	mov    cl,al
  20643d:	a8 01                	test   al,0x1
  20643f:	88 8d 65 fb ff ff    	mov    BYTE PTR [rbp-0x49b],cl
  206445:	75 1b                	jne    206462 <Elf_openFile+0x132>
  206447:	eb 00                	jmp    206449 <Elf_openFile+0x119>
  206449:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  206450:	e8 fb df ff ff       	call   204450 <__zig_return_error>
  206455:	66 b8 1f 00          	mov    ax,0x1f
  206459:	48 81 c4 20 09 00 00 	add    rsp,0x920
  206460:	5d                   	pop    rbp
  206461:	c3                   	ret    
  206462:	eb 00                	jmp    206464 <Elf_openFile+0x134>
  206464:	48 8d 7d c0          	lea    rdi,[rbp-0x40]

        elf.is_64 = switch (try in.readByte()) {
  206468:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  20646f:	48 83 c0 09          	add    rax,0x9
  206473:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  20647a:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  206481:	48 89 85 58 fb ff ff 	mov    QWORD PTR [rbp-0x4a8],rax
  206488:	e8 b3 3f 00 00       	call   20a440 <InStream(ReadError)_readByte>
  20648d:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  206492:	74 27                	je     2064bb <Elf_openFile+0x18b>
  206494:	66 8b 45 c0          	mov    ax,WORD PTR [rbp-0x40]
  206498:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20649f:	66 89 85 56 fb ff ff 	mov    WORD PTR [rbp-0x4aa],ax
  2064a6:	e8 a5 df ff ff       	call   204450 <__zig_return_error>
  2064ab:	66 8b 85 56 fb ff ff 	mov    ax,WORD PTR [rbp-0x4aa]
  2064b2:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2064b9:	5d                   	pop    rbp
  2064ba:	c3                   	ret    
  2064bb:	8a 45 c2             	mov    al,BYTE PTR [rbp-0x3e]
  2064be:	88 c1                	mov    cl,al
  2064c0:	80 e9 01             	sub    cl,0x1
  2064c3:	88 85 55 fb ff ff    	mov    BYTE PTR [rbp-0x4ab],al
  2064c9:	88 8d 54 fb ff ff    	mov    BYTE PTR [rbp-0x4ac],cl
  2064cf:	74 2d                	je     2064fe <Elf_openFile+0x1ce>
  2064d1:	eb 00                	jmp    2064d3 <Elf_openFile+0x1a3>
  2064d3:	8a 85 55 fb ff ff    	mov    al,BYTE PTR [rbp-0x4ab]
  2064d9:	2c 02                	sub    al,0x2
  2064db:	88 85 53 fb ff ff    	mov    BYTE PTR [rbp-0x4ad],al
  2064e1:	74 27                	je     20650a <Elf_openFile+0x1da>
  2064e3:	eb 00                	jmp    2064e5 <Elf_openFile+0x1b5>
            1 => false,
            2 => true,
            else => return error.InvalidFormat,
  2064e5:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2064ec:	e8 5f df ff ff       	call   204450 <__zig_return_error>
  2064f1:	66 b8 1f 00          	mov    ax,0x1f
  2064f5:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2064fc:	5d                   	pop    rbp
  2064fd:	c3                   	ret    
  2064fe:	31 c0                	xor    eax,eax
  206500:	88 c1                	mov    cl,al
        elf.is_64 = switch (try in.readByte()) {
  206502:	88 8d 52 fb ff ff    	mov    BYTE PTR [rbp-0x4ae],cl
  206508:	eb 0a                	jmp    206514 <Elf_openFile+0x1e4>
  20650a:	b0 01                	mov    al,0x1
  20650c:	88 85 52 fb ff ff    	mov    BYTE PTR [rbp-0x4ae],al
  206512:	eb 00                	jmp    206514 <Elf_openFile+0x1e4>
  206514:	8a 85 52 fb ff ff    	mov    al,BYTE PTR [rbp-0x4ae]
  20651a:	48 8d 7d b0          	lea    rdi,[rbp-0x50]
  20651e:	24 01                	and    al,0x1
  206520:	48 8b 8d 58 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x4a8]
  206527:	88 01                	mov    BYTE PTR [rcx],al
        };

        elf.endian = switch (try in.readByte()) {
  206529:	48 8b 95 18 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x3e8]
  206530:	48 83 c2 0a          	add    rdx,0xa
  206534:	48 8b b5 f0 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x410]
  20653b:	4c 8b 85 70 fb ff ff 	mov    r8,QWORD PTR [rbp-0x490]
  206542:	48 89 b5 48 fb ff ff 	mov    QWORD PTR [rbp-0x4b8],rsi
  206549:	4c 89 c6             	mov    rsi,r8
  20654c:	4c 8b 8d 48 fb ff ff 	mov    r9,QWORD PTR [rbp-0x4b8]
  206553:	48 89 95 40 fb ff ff 	mov    QWORD PTR [rbp-0x4c0],rdx
  20655a:	4c 89 ca             	mov    rdx,r9
  20655d:	e8 de 3e 00 00       	call   20a440 <InStream(ReadError)_readByte>
  206562:	66 83 7d b0 00       	cmp    WORD PTR [rbp-0x50],0x0
  206567:	74 27                	je     206590 <Elf_openFile+0x260>
  206569:	66 8b 45 b0          	mov    ax,WORD PTR [rbp-0x50]
  20656d:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  206574:	66 89 85 3e fb ff ff 	mov    WORD PTR [rbp-0x4c2],ax
  20657b:	e8 d0 de ff ff       	call   204450 <__zig_return_error>
  206580:	66 8b 85 3e fb ff ff 	mov    ax,WORD PTR [rbp-0x4c2]
  206587:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20658e:	5d                   	pop    rbp
  20658f:	c3                   	ret    
  206590:	8a 45 b2             	mov    al,BYTE PTR [rbp-0x4e]
  206593:	88 c1                	mov    cl,al
  206595:	80 e9 01             	sub    cl,0x1
  206598:	88 85 3d fb ff ff    	mov    BYTE PTR [rbp-0x4c3],al
  20659e:	88 8d 3c fb ff ff    	mov    BYTE PTR [rbp-0x4c4],cl
  2065a4:	74 2d                	je     2065d3 <Elf_openFile+0x2a3>
  2065a6:	eb 00                	jmp    2065a8 <Elf_openFile+0x278>
  2065a8:	8a 85 3d fb ff ff    	mov    al,BYTE PTR [rbp-0x4c3]
  2065ae:	2c 02                	sub    al,0x2
  2065b0:	88 85 3b fb ff ff    	mov    BYTE PTR [rbp-0x4c5],al
  2065b6:	74 25                	je     2065dd <Elf_openFile+0x2ad>
  2065b8:	eb 00                	jmp    2065ba <Elf_openFile+0x28a>
            1 => builtin.Endian.Little,
            2 => builtin.Endian.Big,
            else => return error.InvalidFormat,
  2065ba:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2065c1:	e8 8a de ff ff       	call   204450 <__zig_return_error>
  2065c6:	66 b8 1f 00          	mov    ax,0x1f
  2065ca:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2065d1:	5d                   	pop    rbp
  2065d2:	c3                   	ret    
  2065d3:	b0 01                	mov    al,0x1
        elf.endian = switch (try in.readByte()) {
  2065d5:	88 85 3a fb ff ff    	mov    BYTE PTR [rbp-0x4c6],al
  2065db:	eb 0c                	jmp    2065e9 <Elf_openFile+0x2b9>
  2065dd:	31 c0                	xor    eax,eax
  2065df:	88 c1                	mov    cl,al
  2065e1:	88 8d 3a fb ff ff    	mov    BYTE PTR [rbp-0x4c6],cl
  2065e7:	eb 00                	jmp    2065e9 <Elf_openFile+0x2b9>
  2065e9:	8a 85 3a fb ff ff    	mov    al,BYTE PTR [rbp-0x4c6]
  2065ef:	48 8d 7d a0          	lea    rdi,[rbp-0x60]
  2065f3:	24 01                	and    al,0x1
  2065f5:	48 8b 8d 40 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x4c0]
  2065fc:	88 01                	mov    BYTE PTR [rcx],al
        };

        const version_byte = try in.readByte();
  2065fe:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  206605:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  20660c:	e8 2f 3e 00 00       	call   20a440 <InStream(ReadError)_readByte>
  206611:	66 83 7d a0 00       	cmp    WORD PTR [rbp-0x60],0x0
  206616:	74 27                	je     20663f <Elf_openFile+0x30f>
  206618:	66 8b 45 a0          	mov    ax,WORD PTR [rbp-0x60]
  20661c:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  206623:	66 89 85 38 fb ff ff 	mov    WORD PTR [rbp-0x4c8],ax
  20662a:	e8 21 de ff ff       	call   204450 <__zig_return_error>
  20662f:	66 8b 85 38 fb ff ff 	mov    ax,WORD PTR [rbp-0x4c8]
  206636:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20663d:	5d                   	pop    rbp
  20663e:	c3                   	ret    
  20663f:	8a 45 a2             	mov    al,BYTE PTR [rbp-0x5e]
  206642:	88 85 eb fb ff ff    	mov    BYTE PTR [rbp-0x415],al
        if (version_byte != 1) return error.InvalidFormat;
  206648:	80 bd eb fb ff ff 01 	cmp    BYTE PTR [rbp-0x415],0x1
  20664f:	74 19                	je     20666a <Elf_openFile+0x33a>
  206651:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  206658:	e8 f3 dd ff ff       	call   204450 <__zig_return_error>
  20665d:	66 b8 1f 00          	mov    ax,0x1f
  206661:	48 81 c4 20 09 00 00 	add    rsp,0x920
  206668:	5d                   	pop    rbp
  206669:	c3                   	ret    
  20666a:	eb 00                	jmp    20666c <Elf_openFile+0x33c>
  20666c:	b8 09 00 00 00       	mov    eax,0x9
  206671:	89 c2                	mov    edx,eax

        // skip over padding
        try elf.in_file.seekForward(9);
  206673:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  20667a:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  20667d:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  206684:	e8 87 3e 00 00       	call   20a510 <File_seekForward>
  206689:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  20668d:	66 83 7d 96 00       	cmp    WORD PTR [rbp-0x6a],0x0
  206692:	74 27                	je     2066bb <Elf_openFile+0x38b>
  206694:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  206698:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20669f:	66 89 85 36 fb ff ff 	mov    WORD PTR [rbp-0x4ca],ax
  2066a6:	e8 a5 dd ff ff       	call   204450 <__zig_return_error>
  2066ab:	66 8b 85 36 fb ff ff 	mov    ax,WORD PTR [rbp-0x4ca]
  2066b2:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2066b9:	5d                   	pop    rbp
  2066ba:	c3                   	ret    
  2066bb:	48 8d 45 90          	lea    rax,[rbp-0x70]

        elf.file_type = switch (try in.readInt(elf.endian, u16)) {
  2066bf:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  2066c6:	48 83 c1 0b          	add    rcx,0xb
  2066ca:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  2066d1:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  2066d8:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  2066dc:	44 0f b6 c7          	movzx  r8d,dil
  2066e0:	48 8d 7d 90          	lea    rdi,[rbp-0x70]
  2066e4:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  2066eb:	48 89 8d 28 fb ff ff 	mov    QWORD PTR [rbp-0x4d8],rcx
  2066f2:	44 89 c1             	mov    ecx,r8d
  2066f5:	48 89 85 20 fb ff ff 	mov    QWORD PTR [rbp-0x4e0],rax
  2066fc:	e8 2f 3f 00 00       	call   20a630 <InStream(ReadError)_readInt>
  206701:	66 83 7d 90 00       	cmp    WORD PTR [rbp-0x70],0x0
  206706:	74 27                	je     20672f <Elf_openFile+0x3ff>
  206708:	66 8b 45 90          	mov    ax,WORD PTR [rbp-0x70]
  20670c:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  206713:	66 89 85 1e fb ff ff 	mov    WORD PTR [rbp-0x4e2],ax
  20671a:	e8 31 dd ff ff       	call   204450 <__zig_return_error>
  20671f:	66 8b 85 1e fb ff ff 	mov    ax,WORD PTR [rbp-0x4e2]
  206726:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20672d:	5d                   	pop    rbp
  20672e:	c3                   	ret    
  20672f:	0f b7 45 92          	movzx  eax,WORD PTR [rbp-0x6e]
  206733:	83 c0 ff             	add    eax,0xffffffff
  206736:	66 89 c1             	mov    cx,ax
  206739:	0f b7 c1             	movzx  eax,cx
  20673c:	89 c2                	mov    edx,eax
  20673e:	83 e8 03             	sub    eax,0x3
  206741:	48 89 95 10 fb ff ff 	mov    QWORD PTR [rbp-0x4f0],rdx
  206748:	89 85 0c fb ff ff    	mov    DWORD PTR [rbp-0x4f4],eax
  20674e:	77 17                	ja     206767 <Elf_openFile+0x437>
  206750:	48 8d 05 39 9a ff ff 	lea    rax,[rip+0xffffffffffff9a39]        # 200190 <arch-0x3a3>
  206757:	48 8b 8d 10 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x4f0]
  20675e:	48 63 14 88          	movsxd rdx,DWORD PTR [rax+rcx*4]
  206762:	48 01 c2             	add    rdx,rax
  206765:	ff e2                	jmp    rdx
            1 => FileType.Relocatable,
            2 => FileType.Executable,
            3 => FileType.Shared,
            4 => FileType.Core,
            else => return error.InvalidFormat,
  206767:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20676e:	e8 dd dc ff ff       	call   204450 <__zig_return_error>
  206773:	66 b8 1f 00          	mov    ax,0x1f
  206777:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20677e:	5d                   	pop    rbp
  20677f:	c3                   	ret    
  206780:	31 c0                	xor    eax,eax
  206782:	88 c1                	mov    cl,al
        elf.file_type = switch (try in.readInt(elf.endian, u16)) {
  206784:	88 8d 0b fb ff ff    	mov    BYTE PTR [rbp-0x4f5],cl
  20678a:	eb 1e                	jmp    2067aa <Elf_openFile+0x47a>
  20678c:	b0 01                	mov    al,0x1
  20678e:	88 85 0b fb ff ff    	mov    BYTE PTR [rbp-0x4f5],al
  206794:	eb 14                	jmp    2067aa <Elf_openFile+0x47a>
  206796:	b0 02                	mov    al,0x2
  206798:	88 85 0b fb ff ff    	mov    BYTE PTR [rbp-0x4f5],al
  20679e:	eb 0a                	jmp    2067aa <Elf_openFile+0x47a>
  2067a0:	b0 03                	mov    al,0x3
  2067a2:	88 85 0b fb ff ff    	mov    BYTE PTR [rbp-0x4f5],al
  2067a8:	eb 00                	jmp    2067aa <Elf_openFile+0x47a>
  2067aa:	8a 85 0b fb ff ff    	mov    al,BYTE PTR [rbp-0x4f5]
  2067b0:	48 8d 4d 80          	lea    rcx,[rbp-0x80]
  2067b4:	24 03                	and    al,0x3
  2067b6:	48 8b 95 28 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x4d8]
  2067bd:	88 02                	mov    BYTE PTR [rdx],al
        };

        elf.arch = switch (try in.readInt(elf.endian, u16)) {
  2067bf:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  2067c6:	48 83 c6 0c          	add    rsi,0xc
  2067ca:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  2067d1:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  2067d8:	8a 47 0a             	mov    al,BYTE PTR [rdi+0xa]
  2067db:	44 0f b6 c0          	movzx  r8d,al
  2067df:	48 8d 7d 80          	lea    rdi,[rbp-0x80]
  2067e3:	4c 8b 8d 70 fb ff ff 	mov    r9,QWORD PTR [rbp-0x490]
  2067ea:	48 89 b5 00 fb ff ff 	mov    QWORD PTR [rbp-0x500],rsi
  2067f1:	4c 89 ce             	mov    rsi,r9
  2067f4:	48 89 8d f8 fa ff ff 	mov    QWORD PTR [rbp-0x508],rcx
  2067fb:	44 89 c1             	mov    ecx,r8d
  2067fe:	e8 2d 3e 00 00       	call   20a630 <InStream(ReadError)_readInt>
  206803:	66 83 7d 80 00       	cmp    WORD PTR [rbp-0x80],0x0
  206808:	74 27                	je     206831 <Elf_openFile+0x501>
  20680a:	66 8b 45 80          	mov    ax,WORD PTR [rbp-0x80]
  20680e:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  206815:	66 89 85 f6 fa ff ff 	mov    WORD PTR [rbp-0x50a],ax
  20681c:	e8 2f dc ff ff       	call   204450 <__zig_return_error>
  206821:	66 8b 85 f6 fa ff ff 	mov    ax,WORD PTR [rbp-0x50a]
  206828:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20682f:	5d                   	pop    rbp
  206830:	c3                   	ret    
  206831:	0f b7 45 82          	movzx  eax,WORD PTR [rbp-0x7e]
  206835:	66 89 c1             	mov    cx,ax
  206838:	83 e8 02             	sub    eax,0x2
  20683b:	66 89 8d f4 fa ff ff 	mov    WORD PTR [rbp-0x50c],cx
  206842:	89 85 f0 fa ff ff    	mov    DWORD PTR [rbp-0x510],eax
  206848:	0f 84 ee 00 00 00    	je     20693c <Elf_openFile+0x60c>
  20684e:	eb 00                	jmp    206850 <Elf_openFile+0x520>
  206850:	66 8b 85 f4 fa ff ff 	mov    ax,WORD PTR [rbp-0x50c]
  206857:	0f b7 c8             	movzx  ecx,ax
  20685a:	83 e9 03             	sub    ecx,0x3
  20685d:	89 8d ec fa ff ff    	mov    DWORD PTR [rbp-0x514],ecx
  206863:	0f 84 df 00 00 00    	je     206948 <Elf_openFile+0x618>
  206869:	eb 00                	jmp    20686b <Elf_openFile+0x53b>
  20686b:	66 8b 85 f4 fa ff ff 	mov    ax,WORD PTR [rbp-0x50c]
  206872:	0f b7 c8             	movzx  ecx,ax
  206875:	83 e9 08             	sub    ecx,0x8
  206878:	89 8d e8 fa ff ff    	mov    DWORD PTR [rbp-0x518],ecx
  20687e:	0f 84 ce 00 00 00    	je     206952 <Elf_openFile+0x622>
  206884:	eb 00                	jmp    206886 <Elf_openFile+0x556>
  206886:	66 8b 85 f4 fa ff ff 	mov    ax,WORD PTR [rbp-0x50c]
  20688d:	0f b7 c8             	movzx  ecx,ax
  206890:	83 e9 14             	sub    ecx,0x14
  206893:	89 8d e4 fa ff ff    	mov    DWORD PTR [rbp-0x51c],ecx
  206899:	0f 84 bd 00 00 00    	je     20695c <Elf_openFile+0x62c>
  20689f:	eb 00                	jmp    2068a1 <Elf_openFile+0x571>
  2068a1:	66 8b 85 f4 fa ff ff 	mov    ax,WORD PTR [rbp-0x50c]
  2068a8:	0f b7 c8             	movzx  ecx,ax
  2068ab:	83 e9 28             	sub    ecx,0x28
  2068ae:	89 8d e0 fa ff ff    	mov    DWORD PTR [rbp-0x520],ecx
  2068b4:	0f 84 ac 00 00 00    	je     206966 <Elf_openFile+0x636>
  2068ba:	eb 00                	jmp    2068bc <Elf_openFile+0x58c>
  2068bc:	66 8b 85 f4 fa ff ff 	mov    ax,WORD PTR [rbp-0x50c]
  2068c3:	0f b7 c8             	movzx  ecx,ax
  2068c6:	83 e9 2a             	sub    ecx,0x2a
  2068c9:	89 8d dc fa ff ff    	mov    DWORD PTR [rbp-0x524],ecx
  2068cf:	0f 84 9b 00 00 00    	je     206970 <Elf_openFile+0x640>
  2068d5:	eb 00                	jmp    2068d7 <Elf_openFile+0x5a7>
  2068d7:	66 8b 85 f4 fa ff ff 	mov    ax,WORD PTR [rbp-0x50c]
  2068de:	0f b7 c8             	movzx  ecx,ax
  2068e1:	83 e9 32             	sub    ecx,0x32
  2068e4:	89 8d d8 fa ff ff    	mov    DWORD PTR [rbp-0x528],ecx
  2068ea:	0f 84 8a 00 00 00    	je     20697a <Elf_openFile+0x64a>
  2068f0:	eb 00                	jmp    2068f2 <Elf_openFile+0x5c2>
  2068f2:	66 8b 85 f4 fa ff ff 	mov    ax,WORD PTR [rbp-0x50c]
  2068f9:	0f b7 c8             	movzx  ecx,ax
  2068fc:	83 e9 3e             	sub    ecx,0x3e
  2068ff:	89 8d d4 fa ff ff    	mov    DWORD PTR [rbp-0x52c],ecx
  206905:	74 7d                	je     206984 <Elf_openFile+0x654>
  206907:	eb 00                	jmp    206909 <Elf_openFile+0x5d9>
  206909:	66 8b 85 f4 fa ff ff 	mov    ax,WORD PTR [rbp-0x50c]
  206910:	0f b7 c8             	movzx  ecx,ax
  206913:	81 e9 b7 00 00 00    	sub    ecx,0xb7
  206919:	89 8d d0 fa ff ff    	mov    DWORD PTR [rbp-0x530],ecx
  20691f:	74 6d                	je     20698e <Elf_openFile+0x65e>
  206921:	eb 00                	jmp    206923 <Elf_openFile+0x5f3>
            0x28 => Arch.Arm,
            0x2A => Arch.SuperH,
            0x32 => Arch.IA_64,
            0x3E => Arch.x86_64,
            0xb7 => Arch.AArch64,
            else => return error.InvalidFormat,
  206923:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20692a:	e8 21 db ff ff       	call   204450 <__zig_return_error>
  20692f:	66 b8 1f 00          	mov    ax,0x1f
  206933:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20693a:	5d                   	pop    rbp
  20693b:	c3                   	ret    
  20693c:	31 c0                	xor    eax,eax
  20693e:	88 c1                	mov    cl,al
        elf.arch = switch (try in.readInt(elf.endian, u16)) {
  206940:	88 8d cf fa ff ff    	mov    BYTE PTR [rbp-0x531],cl
  206946:	eb 50                	jmp    206998 <Elf_openFile+0x668>
  206948:	b0 01                	mov    al,0x1
  20694a:	88 85 cf fa ff ff    	mov    BYTE PTR [rbp-0x531],al
  206950:	eb 46                	jmp    206998 <Elf_openFile+0x668>
  206952:	b0 02                	mov    al,0x2
  206954:	88 85 cf fa ff ff    	mov    BYTE PTR [rbp-0x531],al
  20695a:	eb 3c                	jmp    206998 <Elf_openFile+0x668>
  20695c:	b0 03                	mov    al,0x3
  20695e:	88 85 cf fa ff ff    	mov    BYTE PTR [rbp-0x531],al
  206964:	eb 32                	jmp    206998 <Elf_openFile+0x668>
  206966:	b0 04                	mov    al,0x4
  206968:	88 85 cf fa ff ff    	mov    BYTE PTR [rbp-0x531],al
  20696e:	eb 28                	jmp    206998 <Elf_openFile+0x668>
  206970:	b0 05                	mov    al,0x5
  206972:	88 85 cf fa ff ff    	mov    BYTE PTR [rbp-0x531],al
  206978:	eb 1e                	jmp    206998 <Elf_openFile+0x668>
  20697a:	b0 06                	mov    al,0x6
  20697c:	88 85 cf fa ff ff    	mov    BYTE PTR [rbp-0x531],al
  206982:	eb 14                	jmp    206998 <Elf_openFile+0x668>
  206984:	b0 07                	mov    al,0x7
  206986:	88 85 cf fa ff ff    	mov    BYTE PTR [rbp-0x531],al
  20698c:	eb 0a                	jmp    206998 <Elf_openFile+0x668>
  20698e:	b0 08                	mov    al,0x8
  206990:	88 85 cf fa ff ff    	mov    BYTE PTR [rbp-0x531],al
  206996:	eb 00                	jmp    206998 <Elf_openFile+0x668>
  206998:	8a 85 cf fa ff ff    	mov    al,BYTE PTR [rbp-0x531]
  20699e:	48 8d 8d 70 ff ff ff 	lea    rcx,[rbp-0x90]
  2069a5:	24 0f                	and    al,0xf
  2069a7:	48 8b 95 00 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x500]
  2069ae:	88 02                	mov    BYTE PTR [rdx],al
        };

        const elf_version = try in.readInt(elf.endian, u32);
  2069b0:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  2069b7:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  2069be:	8a 46 0a             	mov    al,BYTE PTR [rsi+0xa]
  2069c1:	0f b6 f8             	movzx  edi,al
  2069c4:	48 8d b5 70 ff ff ff 	lea    rsi,[rbp-0x90]
  2069cb:	89 bd c8 fa ff ff    	mov    DWORD PTR [rbp-0x538],edi
  2069d1:	48 89 f7             	mov    rdi,rsi
  2069d4:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  2069db:	44 8b 85 c8 fa ff ff 	mov    r8d,DWORD PTR [rbp-0x538]
  2069e2:	48 89 8d c0 fa ff ff 	mov    QWORD PTR [rbp-0x540],rcx
  2069e9:	44 89 c1             	mov    ecx,r8d
  2069ec:	e8 4f 3d 00 00       	call   20a740 <InStream(ReadError)_readInt.15>
  2069f1:	66 83 bd 70 ff ff ff 	cmp    WORD PTR [rbp-0x90],0x0
  2069f8:	00 
  2069f9:	74 2a                	je     206a25 <Elf_openFile+0x6f5>
  2069fb:	66 8b 85 70 ff ff ff 	mov    ax,WORD PTR [rbp-0x90]
  206a02:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  206a09:	66 89 85 be fa ff ff 	mov    WORD PTR [rbp-0x542],ax
  206a10:	e8 3b da ff ff       	call   204450 <__zig_return_error>
  206a15:	66 8b 85 be fa ff ff 	mov    ax,WORD PTR [rbp-0x542]
  206a1c:	48 81 c4 20 09 00 00 	add    rsp,0x920
  206a23:	5d                   	pop    rbp
  206a24:	c3                   	ret    
  206a25:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
  206a2b:	89 85 e4 fb ff ff    	mov    DWORD PTR [rbp-0x41c],eax
        if (elf_version != 1) return error.InvalidFormat;
  206a31:	83 bd e4 fb ff ff 01 	cmp    DWORD PTR [rbp-0x41c],0x1
  206a38:	74 19                	je     206a53 <Elf_openFile+0x723>
  206a3a:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  206a41:	e8 0a da ff ff       	call   204450 <__zig_return_error>
  206a46:	66 b8 1f 00          	mov    ax,0x1f
  206a4a:	48 81 c4 20 09 00 00 	add    rsp,0x920
  206a51:	5d                   	pop    rbp
  206a52:	c3                   	ret    
  206a53:	eb 00                	jmp    206a55 <Elf_openFile+0x725>

        if (elf.is_64) {
  206a55:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  206a5c:	f6 40 09 01          	test   BYTE PTR [rax+0x9],0x1
  206a60:	75 05                	jne    206a67 <Elf_openFile+0x737>
  206a62:	e9 b8 01 00 00       	jmp    206c1f <Elf_openFile+0x8ef>
  206a67:	48 8d 85 58 ff ff ff 	lea    rax,[rbp-0xa8]
            elf.entry_addr = try in.readInt(elf.endian, u64);
  206a6e:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  206a75:	48 83 c1 10          	add    rcx,0x10
  206a79:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  206a80:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  206a87:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  206a8b:	44 0f b6 c7          	movzx  r8d,dil
  206a8f:	48 8d bd 58 ff ff ff 	lea    rdi,[rbp-0xa8]
  206a96:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  206a9d:	48 89 8d b0 fa ff ff 	mov    QWORD PTR [rbp-0x550],rcx
  206aa4:	44 89 c1             	mov    ecx,r8d
  206aa7:	48 89 85 a8 fa ff ff 	mov    QWORD PTR [rbp-0x558],rax
  206aae:	e8 9d 3d 00 00       	call   20a850 <InStream(ReadError)_readInt.16>
  206ab3:	66 83 bd 58 ff ff ff 	cmp    WORD PTR [rbp-0xa8],0x0
  206aba:	00 
  206abb:	74 2a                	je     206ae7 <Elf_openFile+0x7b7>
  206abd:	66 8b 85 58 ff ff ff 	mov    ax,WORD PTR [rbp-0xa8]
  206ac4:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  206acb:	66 89 85 a6 fa ff ff 	mov    WORD PTR [rbp-0x55a],ax
  206ad2:	e8 79 d9 ff ff       	call   204450 <__zig_return_error>
  206ad7:	66 8b 85 a6 fa ff ff 	mov    ax,WORD PTR [rbp-0x55a]
  206ade:	48 81 c4 20 09 00 00 	add    rsp,0x920
  206ae5:	5d                   	pop    rbp
  206ae6:	c3                   	ret    
  206ae7:	48 8d 85 38 ff ff ff 	lea    rax,[rbp-0xc8]
  206aee:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  206af5:	48 8b 95 b0 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x550]
  206afc:	48 89 0a             	mov    QWORD PTR [rdx],rcx
            elf.program_header_offset = try in.readInt(elf.endian, u64);
  206aff:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  206b06:	48 83 c1 18          	add    rcx,0x18
  206b0a:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  206b11:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  206b18:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  206b1c:	44 0f b6 c7          	movzx  r8d,dil
  206b20:	48 8d bd 38 ff ff ff 	lea    rdi,[rbp-0xc8]
  206b27:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  206b2e:	48 89 8d 98 fa ff ff 	mov    QWORD PTR [rbp-0x568],rcx
  206b35:	44 89 c1             	mov    ecx,r8d
  206b38:	48 89 85 90 fa ff ff 	mov    QWORD PTR [rbp-0x570],rax
  206b3f:	e8 0c 3d 00 00       	call   20a850 <InStream(ReadError)_readInt.16>
  206b44:	66 83 bd 38 ff ff ff 	cmp    WORD PTR [rbp-0xc8],0x0
  206b4b:	00 
  206b4c:	74 2a                	je     206b78 <Elf_openFile+0x848>
  206b4e:	66 8b 85 38 ff ff ff 	mov    ax,WORD PTR [rbp-0xc8]
  206b55:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  206b5c:	66 89 85 8e fa ff ff 	mov    WORD PTR [rbp-0x572],ax
  206b63:	e8 e8 d8 ff ff       	call   204450 <__zig_return_error>
  206b68:	66 8b 85 8e fa ff ff 	mov    ax,WORD PTR [rbp-0x572]
  206b6f:	48 81 c4 20 09 00 00 	add    rsp,0x920
  206b76:	5d                   	pop    rbp
  206b77:	c3                   	ret    
  206b78:	48 8d 85 18 ff ff ff 	lea    rax,[rbp-0xe8]
  206b7f:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  206b86:	48 8b 95 98 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x568]
  206b8d:	48 89 0a             	mov    QWORD PTR [rdx],rcx
            elf.section_header_offset = try in.readInt(elf.endian, u64);
  206b90:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  206b97:	48 83 c1 20          	add    rcx,0x20
  206b9b:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  206ba2:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  206ba9:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  206bad:	44 0f b6 c7          	movzx  r8d,dil
  206bb1:	48 8d bd 18 ff ff ff 	lea    rdi,[rbp-0xe8]
  206bb8:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  206bbf:	48 89 8d 80 fa ff ff 	mov    QWORD PTR [rbp-0x580],rcx
  206bc6:	44 89 c1             	mov    ecx,r8d
  206bc9:	48 89 85 78 fa ff ff 	mov    QWORD PTR [rbp-0x588],rax
  206bd0:	e8 7b 3c 00 00       	call   20a850 <InStream(ReadError)_readInt.16>
  206bd5:	66 83 bd 18 ff ff ff 	cmp    WORD PTR [rbp-0xe8],0x0
  206bdc:	00 
  206bdd:	74 2a                	je     206c09 <Elf_openFile+0x8d9>
  206bdf:	66 8b 85 18 ff ff ff 	mov    ax,WORD PTR [rbp-0xe8]
  206be6:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  206bed:	66 89 85 76 fa ff ff 	mov    WORD PTR [rbp-0x58a],ax
  206bf4:	e8 57 d8 ff ff       	call   204450 <__zig_return_error>
  206bf9:	66 8b 85 76 fa ff ff 	mov    ax,WORD PTR [rbp-0x58a]
  206c00:	48 81 c4 20 09 00 00 	add    rsp,0x920
  206c07:	5d                   	pop    rbp
  206c08:	c3                   	ret    
  206c09:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  206c10:	48 8b 8d 80 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x580]
  206c17:	48 89 01             	mov    QWORD PTR [rcx],rax
        if (elf.is_64) {
  206c1a:	e9 d8 01 00 00       	jmp    206df7 <Elf_openFile+0xac7>
  206c1f:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
        } else {
            elf.entry_addr = u64(try in.readInt(elf.endian, u32));
  206c26:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  206c2d:	48 83 c1 10          	add    rcx,0x10
  206c31:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  206c38:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  206c3f:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  206c43:	44 0f b6 c7          	movzx  r8d,dil
  206c47:	48 8d bd 00 ff ff ff 	lea    rdi,[rbp-0x100]
  206c4e:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  206c55:	48 89 8d 68 fa ff ff 	mov    QWORD PTR [rbp-0x598],rcx
  206c5c:	44 89 c1             	mov    ecx,r8d
  206c5f:	48 89 85 60 fa ff ff 	mov    QWORD PTR [rbp-0x5a0],rax
  206c66:	e8 d5 3a 00 00       	call   20a740 <InStream(ReadError)_readInt.15>
  206c6b:	66 83 bd 00 ff ff ff 	cmp    WORD PTR [rbp-0x100],0x0
  206c72:	00 
  206c73:	74 2a                	je     206c9f <Elf_openFile+0x96f>
  206c75:	66 8b 85 00 ff ff ff 	mov    ax,WORD PTR [rbp-0x100]
  206c7c:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  206c83:	66 89 85 5e fa ff ff 	mov    WORD PTR [rbp-0x5a2],ax
  206c8a:	e8 c1 d7 ff ff       	call   204450 <__zig_return_error>
  206c8f:	66 8b 85 5e fa ff ff 	mov    ax,WORD PTR [rbp-0x5a2]
  206c96:	48 81 c4 20 09 00 00 	add    rsp,0x920
  206c9d:	5d                   	pop    rbp
  206c9e:	c3                   	ret    
  206c9f:	48 8d 85 f0 fe ff ff 	lea    rax,[rbp-0x110]
  206ca6:	8b 8d 04 ff ff ff    	mov    ecx,DWORD PTR [rbp-0xfc]
  206cac:	89 ca                	mov    edx,ecx
  206cae:	48 8b b5 68 fa ff ff 	mov    rsi,QWORD PTR [rbp-0x598]
  206cb5:	48 89 16             	mov    QWORD PTR [rsi],rdx
            elf.program_header_offset = u64(try in.readInt(elf.endian, u32));
  206cb8:	48 8b 95 18 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x3e8]
  206cbf:	48 83 c2 18          	add    rdx,0x18
  206cc3:	48 8b bd f0 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x410]
  206cca:	4c 8b 85 18 fc ff ff 	mov    r8,QWORD PTR [rbp-0x3e8]
  206cd1:	45 8a 48 0a          	mov    r9b,BYTE PTR [r8+0xa]
  206cd5:	41 0f b6 c9          	movzx  ecx,r9b
  206cd9:	4c 8d 85 f0 fe ff ff 	lea    r8,[rbp-0x110]
  206ce0:	48 89 bd 50 fa ff ff 	mov    QWORD PTR [rbp-0x5b0],rdi
  206ce7:	4c 89 c7             	mov    rdi,r8
  206cea:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  206cf1:	4c 8b 85 50 fa ff ff 	mov    r8,QWORD PTR [rbp-0x5b0]
  206cf8:	48 89 95 48 fa ff ff 	mov    QWORD PTR [rbp-0x5b8],rdx
  206cff:	4c 89 c2             	mov    rdx,r8
  206d02:	48 89 85 40 fa ff ff 	mov    QWORD PTR [rbp-0x5c0],rax
  206d09:	e8 32 3a 00 00       	call   20a740 <InStream(ReadError)_readInt.15>
  206d0e:	66 83 bd f0 fe ff ff 	cmp    WORD PTR [rbp-0x110],0x0
  206d15:	00 
  206d16:	74 2a                	je     206d42 <Elf_openFile+0xa12>
  206d18:	66 8b 85 f0 fe ff ff 	mov    ax,WORD PTR [rbp-0x110]
  206d1f:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  206d26:	66 89 85 3e fa ff ff 	mov    WORD PTR [rbp-0x5c2],ax
  206d2d:	e8 1e d7 ff ff       	call   204450 <__zig_return_error>
  206d32:	66 8b 85 3e fa ff ff 	mov    ax,WORD PTR [rbp-0x5c2]
  206d39:	48 81 c4 20 09 00 00 	add    rsp,0x920
  206d40:	5d                   	pop    rbp
  206d41:	c3                   	ret    
  206d42:	48 8d 85 e0 fe ff ff 	lea    rax,[rbp-0x120]
  206d49:	8b 8d f4 fe ff ff    	mov    ecx,DWORD PTR [rbp-0x10c]
  206d4f:	89 ca                	mov    edx,ecx
  206d51:	48 8b b5 48 fa ff ff 	mov    rsi,QWORD PTR [rbp-0x5b8]
  206d58:	48 89 16             	mov    QWORD PTR [rsi],rdx
            elf.section_header_offset = u64(try in.readInt(elf.endian, u32));
  206d5b:	48 8b 95 18 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x3e8]
  206d62:	48 83 c2 20          	add    rdx,0x20
  206d66:	48 8b bd f0 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x410]
  206d6d:	4c 8b 85 18 fc ff ff 	mov    r8,QWORD PTR [rbp-0x3e8]
  206d74:	45 8a 48 0a          	mov    r9b,BYTE PTR [r8+0xa]
  206d78:	41 0f b6 c9          	movzx  ecx,r9b
  206d7c:	4c 8d 85 e0 fe ff ff 	lea    r8,[rbp-0x120]
  206d83:	48 89 bd 30 fa ff ff 	mov    QWORD PTR [rbp-0x5d0],rdi
  206d8a:	4c 89 c7             	mov    rdi,r8
  206d8d:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  206d94:	4c 8b 85 30 fa ff ff 	mov    r8,QWORD PTR [rbp-0x5d0]
  206d9b:	48 89 95 28 fa ff ff 	mov    QWORD PTR [rbp-0x5d8],rdx
  206da2:	4c 89 c2             	mov    rdx,r8
  206da5:	48 89 85 20 fa ff ff 	mov    QWORD PTR [rbp-0x5e0],rax
  206dac:	e8 8f 39 00 00       	call   20a740 <InStream(ReadError)_readInt.15>
  206db1:	66 83 bd e0 fe ff ff 	cmp    WORD PTR [rbp-0x120],0x0
  206db8:	00 
  206db9:	74 2a                	je     206de5 <Elf_openFile+0xab5>
  206dbb:	66 8b 85 e0 fe ff ff 	mov    ax,WORD PTR [rbp-0x120]
  206dc2:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  206dc9:	66 89 85 1e fa ff ff 	mov    WORD PTR [rbp-0x5e2],ax
  206dd0:	e8 7b d6 ff ff       	call   204450 <__zig_return_error>
  206dd5:	66 8b 85 1e fa ff ff 	mov    ax,WORD PTR [rbp-0x5e2]
  206ddc:	48 81 c4 20 09 00 00 	add    rsp,0x920
  206de3:	5d                   	pop    rbp
  206de4:	c3                   	ret    
  206de5:	8b 85 e4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x11c]
  206deb:	89 c1                	mov    ecx,eax
  206ded:	48 8b 95 28 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x5d8]
  206df4:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  206df7:	b8 04 00 00 00       	mov    eax,0x4
  206dfc:	89 c2                	mov    edx,eax
        }

        // skip over flags
        try elf.in_file.seekForward(4);
  206dfe:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  206e05:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  206e08:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  206e0f:	e8 fc 36 00 00       	call   20a510 <File_seekForward>
  206e14:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  206e1b:	66 83 bd d6 fe ff ff 	cmp    WORD PTR [rbp-0x12a],0x0
  206e22:	00 
  206e23:	74 2a                	je     206e4f <Elf_openFile+0xb1f>
  206e25:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [rbp-0x12a]
  206e2c:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  206e33:	66 89 85 1c fa ff ff 	mov    WORD PTR [rbp-0x5e4],ax
  206e3a:	e8 11 d6 ff ff       	call   204450 <__zig_return_error>
  206e3f:	66 8b 85 1c fa ff ff 	mov    ax,WORD PTR [rbp-0x5e4]
  206e46:	48 81 c4 20 09 00 00 	add    rsp,0x920
  206e4d:	5d                   	pop    rbp
  206e4e:	c3                   	ret    
  206e4f:	48 8d 85 d0 fe ff ff 	lea    rax,[rbp-0x130]

        const header_size = try in.readInt(elf.endian, u16);
  206e56:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  206e5d:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  206e64:	40 8a 71 0a          	mov    sil,BYTE PTR [rcx+0xa]
  206e68:	40 0f b6 ce          	movzx  ecx,sil
  206e6c:	48 8d bd d0 fe ff ff 	lea    rdi,[rbp-0x130]
  206e73:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  206e7a:	48 89 85 10 fa ff ff 	mov    QWORD PTR [rbp-0x5f0],rax
  206e81:	e8 aa 37 00 00       	call   20a630 <InStream(ReadError)_readInt>
  206e86:	66 83 bd d0 fe ff ff 	cmp    WORD PTR [rbp-0x130],0x0
  206e8d:	00 
  206e8e:	74 2a                	je     206eba <Elf_openFile+0xb8a>
  206e90:	66 8b 85 d0 fe ff ff 	mov    ax,WORD PTR [rbp-0x130]
  206e97:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  206e9e:	66 89 85 0e fa ff ff 	mov    WORD PTR [rbp-0x5f2],ax
  206ea5:	e8 a6 d5 ff ff       	call   204450 <__zig_return_error>
  206eaa:	66 8b 85 0e fa ff ff 	mov    ax,WORD PTR [rbp-0x5f2]
  206eb1:	48 81 c4 20 09 00 00 	add    rsp,0x920
  206eb8:	5d                   	pop    rbp
  206eb9:	c3                   	ret    
  206eba:	66 8b 85 d2 fe ff ff 	mov    ax,WORD PTR [rbp-0x12e]
  206ec1:	66 89 85 e2 fb ff ff 	mov    WORD PTR [rbp-0x41e],ax
        if ((elf.is_64 and header_size != 64) or (!elf.is_64 and header_size != 52)) {
  206ec8:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  206ecf:	8a 51 09             	mov    dl,BYTE PTR [rcx+0x9]
  206ed2:	f6 c2 01             	test   dl,0x1
  206ed5:	88 95 0d fa ff ff    	mov    BYTE PTR [rbp-0x5f3],dl
  206edb:	75 02                	jne    206edf <Elf_openFile+0xbaf>
  206edd:	eb 11                	jmp    206ef0 <Elf_openFile+0xbc0>
  206edf:	66 83 bd e2 fb ff ff 	cmp    WORD PTR [rbp-0x41e],0x40
  206ee6:	40 
  206ee7:	0f 95 c0             	setne  al
  206eea:	88 85 0d fa ff ff    	mov    BYTE PTR [rbp-0x5f3],al
  206ef0:	8a 85 0d fa ff ff    	mov    al,BYTE PTR [rbp-0x5f3]
  206ef6:	a8 01                	test   al,0x1
  206ef8:	88 85 0c fa ff ff    	mov    BYTE PTR [rbp-0x5f4],al
  206efe:	75 37                	jne    206f37 <Elf_openFile+0xc07>
  206f00:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  206f07:	8a 48 09             	mov    cl,BYTE PTR [rax+0x9]
  206f0a:	80 f1 01             	xor    cl,0x1
  206f0d:	f6 c1 01             	test   cl,0x1
  206f10:	88 8d 0b fa ff ff    	mov    BYTE PTR [rbp-0x5f5],cl
  206f16:	75 02                	jne    206f1a <Elf_openFile+0xbea>
  206f18:	eb 11                	jmp    206f2b <Elf_openFile+0xbfb>
  206f1a:	66 83 bd e2 fb ff ff 	cmp    WORD PTR [rbp-0x41e],0x34
  206f21:	34 
  206f22:	0f 95 c0             	setne  al
  206f25:	88 85 0b fa ff ff    	mov    BYTE PTR [rbp-0x5f5],al
  206f2b:	8a 85 0b fa ff ff    	mov    al,BYTE PTR [rbp-0x5f5]
  206f31:	88 85 0c fa ff ff    	mov    BYTE PTR [rbp-0x5f4],al
  206f37:	8a 85 0c fa ff ff    	mov    al,BYTE PTR [rbp-0x5f4]
  206f3d:	a8 01                	test   al,0x1
  206f3f:	75 02                	jne    206f43 <Elf_openFile+0xc13>
  206f41:	eb 19                	jmp    206f5c <Elf_openFile+0xc2c>
            return error.InvalidFormat;
  206f43:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  206f4a:	e8 01 d5 ff ff       	call   204450 <__zig_return_error>
  206f4f:	66 b8 1f 00          	mov    ax,0x1f
  206f53:	48 81 c4 20 09 00 00 	add    rsp,0x920
  206f5a:	5d                   	pop    rbp
  206f5b:	c3                   	ret    
        if ((elf.is_64 and header_size != 64) or (!elf.is_64 and header_size != 52)) {
  206f5c:	eb 00                	jmp    206f5e <Elf_openFile+0xc2e>
  206f5e:	48 8d 85 c0 fe ff ff 	lea    rax,[rbp-0x140]
        }

        const ph_entry_size = try in.readInt(elf.endian, u16);
  206f65:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  206f6c:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  206f73:	40 8a 71 0a          	mov    sil,BYTE PTR [rcx+0xa]
  206f77:	40 0f b6 ce          	movzx  ecx,sil
  206f7b:	48 8d bd c0 fe ff ff 	lea    rdi,[rbp-0x140]
  206f82:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  206f89:	48 89 85 00 fa ff ff 	mov    QWORD PTR [rbp-0x600],rax
  206f90:	e8 9b 36 00 00       	call   20a630 <InStream(ReadError)_readInt>
  206f95:	66 83 bd c0 fe ff ff 	cmp    WORD PTR [rbp-0x140],0x0
  206f9c:	00 
  206f9d:	74 2a                	je     206fc9 <Elf_openFile+0xc99>
  206f9f:	66 8b 85 c0 fe ff ff 	mov    ax,WORD PTR [rbp-0x140]
  206fa6:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  206fad:	66 89 85 fe f9 ff ff 	mov    WORD PTR [rbp-0x602],ax
  206fb4:	e8 97 d4 ff ff       	call   204450 <__zig_return_error>
  206fb9:	66 8b 85 fe f9 ff ff 	mov    ax,WORD PTR [rbp-0x602]
  206fc0:	48 81 c4 20 09 00 00 	add    rsp,0x920
  206fc7:	5d                   	pop    rbp
  206fc8:	c3                   	ret    
  206fc9:	48 8d 85 b0 fe ff ff 	lea    rax,[rbp-0x150]
  206fd0:	66 8b 8d c2 fe ff ff 	mov    cx,WORD PTR [rbp-0x13e]
  206fd7:	66 89 8d e0 fb ff ff 	mov    WORD PTR [rbp-0x420],cx
        const ph_entry_count = try in.readInt(elf.endian, u16);
  206fde:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  206fe5:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  206fec:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  206ff0:	40 0f b6 cf          	movzx  ecx,dil
  206ff4:	48 8d bd b0 fe ff ff 	lea    rdi,[rbp-0x150]
  206ffb:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  207002:	48 89 85 f0 f9 ff ff 	mov    QWORD PTR [rbp-0x610],rax
  207009:	e8 22 36 00 00       	call   20a630 <InStream(ReadError)_readInt>
  20700e:	66 83 bd b0 fe ff ff 	cmp    WORD PTR [rbp-0x150],0x0
  207015:	00 
  207016:	74 2a                	je     207042 <Elf_openFile+0xd12>
  207018:	66 8b 85 b0 fe ff ff 	mov    ax,WORD PTR [rbp-0x150]
  20701f:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  207026:	66 89 85 ee f9 ff ff 	mov    WORD PTR [rbp-0x612],ax
  20702d:	e8 1e d4 ff ff       	call   204450 <__zig_return_error>
  207032:	66 8b 85 ee f9 ff ff 	mov    ax,WORD PTR [rbp-0x612]
  207039:	48 81 c4 20 09 00 00 	add    rsp,0x920
  207040:	5d                   	pop    rbp
  207041:	c3                   	ret    
  207042:	48 8d 85 a0 fe ff ff 	lea    rax,[rbp-0x160]
  207049:	66 8b 8d b2 fe ff ff 	mov    cx,WORD PTR [rbp-0x14e]
  207050:	66 89 8d de fb ff ff 	mov    WORD PTR [rbp-0x422],cx
        const sh_entry_size = try in.readInt(elf.endian, u16);
  207057:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  20705e:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  207065:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  207069:	40 0f b6 cf          	movzx  ecx,dil
  20706d:	48 8d bd a0 fe ff ff 	lea    rdi,[rbp-0x160]
  207074:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  20707b:	48 89 85 e0 f9 ff ff 	mov    QWORD PTR [rbp-0x620],rax
  207082:	e8 a9 35 00 00       	call   20a630 <InStream(ReadError)_readInt>
  207087:	66 83 bd a0 fe ff ff 	cmp    WORD PTR [rbp-0x160],0x0
  20708e:	00 
  20708f:	74 2a                	je     2070bb <Elf_openFile+0xd8b>
  207091:	66 8b 85 a0 fe ff ff 	mov    ax,WORD PTR [rbp-0x160]
  207098:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20709f:	66 89 85 de f9 ff ff 	mov    WORD PTR [rbp-0x622],ax
  2070a6:	e8 a5 d3 ff ff       	call   204450 <__zig_return_error>
  2070ab:	66 8b 85 de f9 ff ff 	mov    ax,WORD PTR [rbp-0x622]
  2070b2:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2070b9:	5d                   	pop    rbp
  2070ba:	c3                   	ret    
  2070bb:	48 8d 85 90 fe ff ff 	lea    rax,[rbp-0x170]
  2070c2:	66 8b 8d a2 fe ff ff 	mov    cx,WORD PTR [rbp-0x15e]
  2070c9:	66 89 8d dc fb ff ff 	mov    WORD PTR [rbp-0x424],cx
        const sh_entry_count = try in.readInt(elf.endian, u16);
  2070d0:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  2070d7:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  2070de:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  2070e2:	40 0f b6 cf          	movzx  ecx,dil
  2070e6:	48 8d bd 90 fe ff ff 	lea    rdi,[rbp-0x170]
  2070ed:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  2070f4:	48 89 85 d0 f9 ff ff 	mov    QWORD PTR [rbp-0x630],rax
  2070fb:	e8 30 35 00 00       	call   20a630 <InStream(ReadError)_readInt>
  207100:	66 83 bd 90 fe ff ff 	cmp    WORD PTR [rbp-0x170],0x0
  207107:	00 
  207108:	74 2a                	je     207134 <Elf_openFile+0xe04>
  20710a:	66 8b 85 90 fe ff ff 	mov    ax,WORD PTR [rbp-0x170]
  207111:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  207118:	66 89 85 ce f9 ff ff 	mov    WORD PTR [rbp-0x632],ax
  20711f:	e8 2c d3 ff ff       	call   204450 <__zig_return_error>
  207124:	66 8b 85 ce f9 ff ff 	mov    ax,WORD PTR [rbp-0x632]
  20712b:	48 81 c4 20 09 00 00 	add    rsp,0x920
  207132:	5d                   	pop    rbp
  207133:	c3                   	ret    
  207134:	48 8d 85 80 fe ff ff 	lea    rax,[rbp-0x180]
  20713b:	66 8b 8d 92 fe ff ff 	mov    cx,WORD PTR [rbp-0x16e]
  207142:	66 89 8d da fb ff ff 	mov    WORD PTR [rbp-0x426],cx
        elf.string_section_index = u64(try in.readInt(elf.endian, u16));
  207149:	48 8b 95 18 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x3e8]
  207150:	48 83 c2 28          	add    rdx,0x28
  207154:	48 8b b5 f0 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x410]
  20715b:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  207162:	44 8a 47 0a          	mov    r8b,BYTE PTR [rdi+0xa]
  207166:	41 0f b6 c8          	movzx  ecx,r8b
  20716a:	48 8d bd 80 fe ff ff 	lea    rdi,[rbp-0x180]
  207171:	4c 8b 8d 70 fb ff ff 	mov    r9,QWORD PTR [rbp-0x490]
  207178:	48 89 b5 c0 f9 ff ff 	mov    QWORD PTR [rbp-0x640],rsi
  20717f:	4c 89 ce             	mov    rsi,r9
  207182:	4c 8b 95 c0 f9 ff ff 	mov    r10,QWORD PTR [rbp-0x640]
  207189:	48 89 95 b8 f9 ff ff 	mov    QWORD PTR [rbp-0x648],rdx
  207190:	4c 89 d2             	mov    rdx,r10
  207193:	48 89 85 b0 f9 ff ff 	mov    QWORD PTR [rbp-0x650],rax
  20719a:	e8 91 34 00 00       	call   20a630 <InStream(ReadError)_readInt>
  20719f:	66 83 bd 80 fe ff ff 	cmp    WORD PTR [rbp-0x180],0x0
  2071a6:	00 
  2071a7:	74 2a                	je     2071d3 <Elf_openFile+0xea3>
  2071a9:	66 8b 85 80 fe ff ff 	mov    ax,WORD PTR [rbp-0x180]
  2071b0:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2071b7:	66 89 85 ae f9 ff ff 	mov    WORD PTR [rbp-0x652],ax
  2071be:	e8 8d d2 ff ff       	call   204450 <__zig_return_error>
  2071c3:	66 8b 85 ae f9 ff ff 	mov    ax,WORD PTR [rbp-0x652]
  2071ca:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2071d1:	5d                   	pop    rbp
  2071d2:	c3                   	ret    
  2071d3:	0f b7 85 82 fe ff ff 	movzx  eax,WORD PTR [rbp-0x17e]
  2071da:	89 c1                	mov    ecx,eax
  2071dc:	48 8b 95 b8 f9 ff ff 	mov    rdx,QWORD PTR [rbp-0x648]
  2071e3:	48 89 0a             	mov    QWORD PTR [rdx],rcx

        if (elf.string_section_index >= sh_entry_count) return error.InvalidFormat;
  2071e6:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  2071ed:	48 8b 49 28          	mov    rcx,QWORD PTR [rcx+0x28]
  2071f1:	0f b7 85 da fb ff ff 	movzx  eax,WORD PTR [rbp-0x426]
  2071f8:	89 c6                	mov    esi,eax
  2071fa:	48 39 f1             	cmp    rcx,rsi
  2071fd:	72 19                	jb     207218 <Elf_openFile+0xee8>
  2071ff:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  207206:	e8 45 d2 ff ff       	call   204450 <__zig_return_error>
  20720b:	66 b8 1f 00          	mov    ax,0x1f
  20720f:	48 81 c4 20 09 00 00 	add    rsp,0x920
  207216:	5d                   	pop    rbp
  207217:	c3                   	ret    
  207218:	eb 00                	jmp    20721a <Elf_openFile+0xeea>

        const sh_byte_count = u64(sh_entry_size) * u64(sh_entry_count);
  20721a:	0f b7 85 dc fb ff ff 	movzx  eax,WORD PTR [rbp-0x424]
  207221:	0f b7 8d da fb ff ff 	movzx  ecx,WORD PTR [rbp-0x426]
  207228:	89 ca                	mov    edx,ecx
  20722a:	48 f7 e2             	mul    rdx
  20722d:	40 0f 90 c6          	seto   sil
  207231:	48 89 85 a0 f9 ff ff 	mov    QWORD PTR [rbp-0x660],rax
  207238:	40 88 b5 9f f9 ff ff 	mov    BYTE PTR [rbp-0x661],sil
  20723f:	0f 80 87 14 00 00    	jo     2086cc <Elf_openFile+0x239c>
  207245:	e9 92 14 00 00       	jmp    2086dc <Elf_openFile+0x23ac>
        const end_sh = try math.add(u64, elf.section_header_offset, sh_byte_count);
  20724a:	66 8b 85 68 fe ff ff 	mov    ax,WORD PTR [rbp-0x198]
  207251:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  207258:	66 89 85 9c f9 ff ff 	mov    WORD PTR [rbp-0x664],ax
  20725f:	e8 ec d1 ff ff       	call   204450 <__zig_return_error>
  207264:	66 8b 85 9c f9 ff ff 	mov    ax,WORD PTR [rbp-0x664]
  20726b:	48 81 c4 20 09 00 00 	add    rsp,0x920
  207272:	5d                   	pop    rbp
  207273:	c3                   	ret    
  207274:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  20727b:	48 89 85 c8 fb ff ff 	mov    QWORD PTR [rbp-0x438],rax
        const ph_byte_count = u64(ph_entry_size) * u64(ph_entry_count);
  207282:	0f b7 8d e0 fb ff ff 	movzx  ecx,WORD PTR [rbp-0x420]
  207289:	89 c8                	mov    eax,ecx
  20728b:	0f b7 8d de fb ff ff 	movzx  ecx,WORD PTR [rbp-0x422]
  207292:	89 ca                	mov    edx,ecx
  207294:	48 f7 e2             	mul    rdx
  207297:	40 0f 90 c6          	seto   sil
  20729b:	48 89 85 90 f9 ff ff 	mov    QWORD PTR [rbp-0x670],rax
  2072a2:	40 88 b5 8f f9 ff ff 	mov    BYTE PTR [rbp-0x671],sil
  2072a9:	0f 80 73 14 00 00    	jo     208722 <Elf_openFile+0x23f2>
  2072af:	e9 7e 14 00 00       	jmp    208732 <Elf_openFile+0x2402>
        const end_ph = try math.add(u64, elf.program_header_offset, ph_byte_count);
  2072b4:	66 8b 85 48 fe ff ff 	mov    ax,WORD PTR [rbp-0x1b8]
  2072bb:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2072c2:	66 89 85 8c f9 ff ff 	mov    WORD PTR [rbp-0x674],ax
  2072c9:	e8 82 d1 ff ff       	call   204450 <__zig_return_error>
  2072ce:	66 8b 85 8c f9 ff ff 	mov    ax,WORD PTR [rbp-0x674]
  2072d5:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2072dc:	5d                   	pop    rbp
  2072dd:	c3                   	ret    
  2072de:	48 8d bd 28 fe ff ff 	lea    rdi,[rbp-0x1d8]
  2072e5:	48 8b 85 50 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b0]
  2072ec:	48 89 85 b8 fb ff ff 	mov    QWORD PTR [rbp-0x448],rax

        const stream_end = try elf.in_file.getEndPos();
  2072f3:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2072fa:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  2072fd:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  207304:	e8 37 37 00 00       	call   20aa40 <File_getEndPos>
  207309:	66 83 bd 28 fe ff ff 	cmp    WORD PTR [rbp-0x1d8],0x0
  207310:	00 
  207311:	74 2a                	je     20733d <Elf_openFile+0x100d>
  207313:	66 8b 85 28 fe ff ff 	mov    ax,WORD PTR [rbp-0x1d8]
  20731a:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  207321:	66 89 85 8a f9 ff ff 	mov    WORD PTR [rbp-0x676],ax
  207328:	e8 23 d1 ff ff       	call   204450 <__zig_return_error>
  20732d:	66 8b 85 8a f9 ff ff 	mov    ax,WORD PTR [rbp-0x676]
  207334:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20733b:	5d                   	pop    rbp
  20733c:	c3                   	ret    
  20733d:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  207344:	48 89 85 b0 fb ff ff 	mov    QWORD PTR [rbp-0x450],rax
        if (stream_end < end_sh or stream_end < end_ph) {
  20734b:	48 8b 85 b0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x450]
  207352:	48 3b 85 c8 fb ff ff 	cmp    rax,QWORD PTR [rbp-0x438]
  207359:	0f 92 c1             	setb   cl
  20735c:	f6 c1 01             	test   cl,0x1
  20735f:	88 8d 89 f9 ff ff    	mov    BYTE PTR [rbp-0x677],cl
  207365:	75 17                	jne    20737e <Elf_openFile+0x104e>
  207367:	48 8b 85 b0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x450]
  20736e:	48 3b 85 b8 fb ff ff 	cmp    rax,QWORD PTR [rbp-0x448]
  207375:	0f 92 c1             	setb   cl
  207378:	88 8d 89 f9 ff ff    	mov    BYTE PTR [rbp-0x677],cl
  20737e:	8a 85 89 f9 ff ff    	mov    al,BYTE PTR [rbp-0x677]
  207384:	a8 01                	test   al,0x1
  207386:	75 02                	jne    20738a <Elf_openFile+0x105a>
  207388:	eb 19                	jmp    2073a3 <Elf_openFile+0x1073>
            return error.InvalidFormat;
  20738a:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  207391:	e8 ba d0 ff ff       	call   204450 <__zig_return_error>
  207396:	66 b8 1f 00          	mov    ax,0x1f
  20739a:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2073a1:	5d                   	pop    rbp
  2073a2:	c3                   	ret    
        if (stream_end < end_sh or stream_end < end_ph) {
  2073a3:	eb 00                	jmp    2073a5 <Elf_openFile+0x1075>
        }

        try elf.in_file.seekTo(elf.section_header_offset);
  2073a5:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2073ac:	48 8b 30             	mov    rsi,QWORD PTR [rax]
  2073af:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2073b6:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
  2073ba:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2073c1:	e8 aa 37 00 00       	call   20ab70 <File_seekTo>
  2073c6:	66 89 85 16 fe ff ff 	mov    WORD PTR [rbp-0x1ea],ax
  2073cd:	66 83 bd 16 fe ff ff 	cmp    WORD PTR [rbp-0x1ea],0x0
  2073d4:	00 
  2073d5:	74 2a                	je     207401 <Elf_openFile+0x10d1>
  2073d7:	66 8b 85 16 fe ff ff 	mov    ax,WORD PTR [rbp-0x1ea]
  2073de:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2073e5:	66 89 85 86 f9 ff ff 	mov    WORD PTR [rbp-0x67a],ax
  2073ec:	e8 5f d0 ff ff       	call   204450 <__zig_return_error>
  2073f1:	66 8b 85 86 f9 ff ff 	mov    ax,WORD PTR [rbp-0x67a]
  2073f8:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2073ff:	5d                   	pop    rbp
  207400:	c3                   	ret    
  207401:	48 8d bd f8 fd ff ff 	lea    rdi,[rbp-0x208]

        elf.section_headers = try elf.allocator.alloc(SectionHeader, sh_entry_count);
  207408:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  20740f:	48 83 c0 38          	add    rax,0x38
  207413:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  20741a:	48 8b 51 48          	mov    rdx,QWORD PTR [rcx+0x48]
  20741e:	0f b7 b5 da fb ff ff 	movzx  esi,WORD PTR [rbp-0x426]
  207425:	89 f1                	mov    ecx,esi
  207427:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  20742e:	48 89 85 78 f9 ff ff 	mov    QWORD PTR [rbp-0x688],rax
  207435:	e8 b6 38 00 00       	call   20acf0 <Allocator_alloc.17>
  20743a:	66 83 bd f8 fd ff ff 	cmp    WORD PTR [rbp-0x208],0x0
  207441:	00 
  207442:	74 2a                	je     20746e <Elf_openFile+0x113e>
  207444:	66 8b 85 f8 fd ff ff 	mov    ax,WORD PTR [rbp-0x208]
  20744b:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  207452:	66 89 85 76 f9 ff ff 	mov    WORD PTR [rbp-0x68a],ax
  207459:	e8 f2 cf ff ff       	call   204450 <__zig_return_error>
  20745e:	66 8b 85 76 f9 ff ff 	mov    ax,WORD PTR [rbp-0x68a]
  207465:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20746c:	5d                   	pop    rbp
  20746d:	c3                   	ret    
  20746e:	48 8b 85 00 fe ff ff 	mov    rax,QWORD PTR [rbp-0x200]
  207475:	48 8b 8d 78 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x688]
  20747c:	48 89 01             	mov    QWORD PTR [rcx],rax
  20747f:	48 8b 85 08 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1f8]
  207486:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
        errdefer elf.allocator.free(elf.section_headers);

        if (elf.is_64) {
  20748a:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  207491:	f6 40 09 01          	test   BYTE PTR [rax+0x9],0x1
  207495:	75 05                	jne    20749c <Elf_openFile+0x116c>
  207497:	e9 b7 07 00 00       	jmp    207c53 <Elf_openFile+0x1923>
            if (sh_entry_size != 64) return error.InvalidFormat;
  20749c:	66 83 bd dc fb ff ff 	cmp    WORD PTR [rbp-0x424],0x40
  2074a3:	40 
  2074a4:	74 37                	je     2074dd <Elf_openFile+0x11ad>
        errdefer elf.allocator.free(elf.section_headers);
  2074a6:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2074ad:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  2074b1:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2074b8:	48 83 c0 38          	add    rax,0x38
  2074bc:	48 89 c6             	mov    rsi,rax
  2074bf:	e8 9c 38 00 00       	call   20ad60 <Allocator_free>
            if (sh_entry_size != 64) return error.InvalidFormat;
  2074c4:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2074cb:	e8 80 cf ff ff       	call   204450 <__zig_return_error>
  2074d0:	66 b8 1f 00          	mov    ax,0x1f
  2074d4:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2074db:	5d                   	pop    rbp
  2074dc:	c3                   	ret    
  2074dd:	eb 00                	jmp    2074df <Elf_openFile+0x11af>
  2074df:	be aa 00 00 00       	mov    esi,0xaa
  2074e4:	b8 08 00 00 00       	mov    eax,0x8
  2074e9:	89 c2                	mov    edx,eax
  2074eb:	48 8d 8d a8 fb ff ff 	lea    rcx,[rbp-0x458]

            for (elf.section_headers) |*elf_section| {
  2074f2:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  2074f9:	49 89 f8             	mov    r8,rdi
  2074fc:	49 83 c0 38          	add    r8,0x38
  207500:	48 89 bd 68 f9 ff ff 	mov    QWORD PTR [rbp-0x698],rdi
  207507:	48 89 cf             	mov    rdi,rcx
  20750a:	4c 89 85 60 f9 ff ff 	mov    QWORD PTR [rbp-0x6a0],r8
  207511:	e8 9a a7 01 00       	call   221cb0 <memset>
  207516:	48 c7 85 a0 fb ff ff 	mov    QWORD PTR [rbp-0x460],0x0
  20751d:	00 00 00 00 
  207521:	48 8b 8d 68 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x698]
  207528:	48 8b 51 40          	mov    rdx,QWORD PTR [rcx+0x40]
  20752c:	48 89 95 58 f9 ff ff 	mov    QWORD PTR [rbp-0x6a8],rdx
  207533:	48 8b 85 a0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x460]
  20753a:	48 8b 8d 58 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x6a8]
  207541:	48 39 c8             	cmp    rax,rcx
  207544:	48 89 85 50 f9 ff ff 	mov    QWORD PTR [rbp-0x6b0],rax
  20754b:	0f 83 fd 06 00 00    	jae    207c4e <Elf_openFile+0x191e>
  207551:	48 8d 85 d8 fd ff ff 	lea    rax,[rbp-0x228]
  207558:	48 8b 8d 50 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x6b0]
  20755f:	48 c1 e1 06          	shl    rcx,0x6
  207563:	48 8b 95 60 f9 ff ff 	mov    rdx,QWORD PTR [rbp-0x6a0]
  20756a:	48 03 0a             	add    rcx,QWORD PTR [rdx]
  20756d:	48 89 8d a8 fb ff ff 	mov    QWORD PTR [rbp-0x458],rcx
                elf_section.name = try in.readInt(elf.endian, u32);
  207574:	48 8b 8d a8 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x458]
  20757b:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  207582:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  207589:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  20758d:	44 0f b6 c7          	movzx  r8d,dil
  207591:	48 8d bd d8 fd ff ff 	lea    rdi,[rbp-0x228]
  207598:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  20759f:	48 89 8d 48 f9 ff ff 	mov    QWORD PTR [rbp-0x6b8],rcx
  2075a6:	44 89 c1             	mov    ecx,r8d
  2075a9:	48 89 85 40 f9 ff ff 	mov    QWORD PTR [rbp-0x6c0],rax
  2075b0:	e8 8b 31 00 00       	call   20a740 <InStream(ReadError)_readInt.15>
  2075b5:	66 83 bd d8 fd ff ff 	cmp    WORD PTR [rbp-0x228],0x0
  2075bc:	00 
  2075bd:	74 48                	je     207607 <Elf_openFile+0x12d7>
        errdefer elf.allocator.free(elf.section_headers);
  2075bf:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2075c6:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  2075ca:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2075d1:	48 83 c0 38          	add    rax,0x38
  2075d5:	48 89 c6             	mov    rsi,rax
  2075d8:	e8 83 37 00 00       	call   20ad60 <Allocator_free>
                elf_section.name = try in.readInt(elf.endian, u32);
  2075dd:	66 8b 85 d8 fd ff ff 	mov    ax,WORD PTR [rbp-0x228]
  2075e4:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2075eb:	66 89 85 3e f9 ff ff 	mov    WORD PTR [rbp-0x6c2],ax
  2075f2:	e8 59 ce ff ff       	call   204450 <__zig_return_error>
  2075f7:	66 8b 85 3e f9 ff ff 	mov    ax,WORD PTR [rbp-0x6c2]
  2075fe:	48 81 c4 20 09 00 00 	add    rsp,0x920
  207605:	5d                   	pop    rbp
  207606:	c3                   	ret    
  207607:	48 8d 85 c8 fd ff ff 	lea    rax,[rbp-0x238]
  20760e:	8b 8d dc fd ff ff    	mov    ecx,DWORD PTR [rbp-0x224]
  207614:	48 8b 95 48 f9 ff ff 	mov    rdx,QWORD PTR [rbp-0x6b8]
  20761b:	89 0a                	mov    DWORD PTR [rdx],ecx
                elf_section.sh_type = try in.readInt(elf.endian, u32);
  20761d:	48 8b b5 a8 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x458]
  207624:	48 83 c6 04          	add    rsi,0x4
  207628:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  20762f:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  207636:	44 8a 47 0a          	mov    r8b,BYTE PTR [rdi+0xa]
  20763a:	41 0f b6 c8          	movzx  ecx,r8b
  20763e:	48 8d bd c8 fd ff ff 	lea    rdi,[rbp-0x238]
  207645:	4c 8b 8d 70 fb ff ff 	mov    r9,QWORD PTR [rbp-0x490]
  20764c:	48 89 b5 30 f9 ff ff 	mov    QWORD PTR [rbp-0x6d0],rsi
  207653:	4c 89 ce             	mov    rsi,r9
  207656:	48 89 85 28 f9 ff ff 	mov    QWORD PTR [rbp-0x6d8],rax
  20765d:	e8 de 30 00 00       	call   20a740 <InStream(ReadError)_readInt.15>
  207662:	66 83 bd c8 fd ff ff 	cmp    WORD PTR [rbp-0x238],0x0
  207669:	00 
  20766a:	74 48                	je     2076b4 <Elf_openFile+0x1384>
        errdefer elf.allocator.free(elf.section_headers);
  20766c:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  207673:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  207677:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  20767e:	48 83 c0 38          	add    rax,0x38
  207682:	48 89 c6             	mov    rsi,rax
  207685:	e8 d6 36 00 00       	call   20ad60 <Allocator_free>
                elf_section.sh_type = try in.readInt(elf.endian, u32);
  20768a:	66 8b 85 c8 fd ff ff 	mov    ax,WORD PTR [rbp-0x238]
  207691:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  207698:	66 89 85 26 f9 ff ff 	mov    WORD PTR [rbp-0x6da],ax
  20769f:	e8 ac cd ff ff       	call   204450 <__zig_return_error>
  2076a4:	66 8b 85 26 f9 ff ff 	mov    ax,WORD PTR [rbp-0x6da]
  2076ab:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2076b2:	5d                   	pop    rbp
  2076b3:	c3                   	ret    
  2076b4:	48 8d 85 b0 fd ff ff 	lea    rax,[rbp-0x250]
  2076bb:	8b 8d cc fd ff ff    	mov    ecx,DWORD PTR [rbp-0x234]
  2076c1:	48 8b 95 30 f9 ff ff 	mov    rdx,QWORD PTR [rbp-0x6d0]
  2076c8:	89 0a                	mov    DWORD PTR [rdx],ecx
                elf_section.flags = try in.readInt(elf.endian, u64);
  2076ca:	48 8b b5 a8 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x458]
  2076d1:	48 83 c6 08          	add    rsi,0x8
  2076d5:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  2076dc:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  2076e3:	44 8a 47 0a          	mov    r8b,BYTE PTR [rdi+0xa]
  2076e7:	41 0f b6 c8          	movzx  ecx,r8b
  2076eb:	48 8d bd b0 fd ff ff 	lea    rdi,[rbp-0x250]
  2076f2:	4c 8b 8d 70 fb ff ff 	mov    r9,QWORD PTR [rbp-0x490]
  2076f9:	48 89 b5 18 f9 ff ff 	mov    QWORD PTR [rbp-0x6e8],rsi
  207700:	4c 89 ce             	mov    rsi,r9
  207703:	48 89 85 10 f9 ff ff 	mov    QWORD PTR [rbp-0x6f0],rax
  20770a:	e8 41 31 00 00       	call   20a850 <InStream(ReadError)_readInt.16>
  20770f:	66 83 bd b0 fd ff ff 	cmp    WORD PTR [rbp-0x250],0x0
  207716:	00 
  207717:	74 48                	je     207761 <Elf_openFile+0x1431>
        errdefer elf.allocator.free(elf.section_headers);
  207719:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  207720:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  207724:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  20772b:	48 83 c0 38          	add    rax,0x38
  20772f:	48 89 c6             	mov    rsi,rax
  207732:	e8 29 36 00 00       	call   20ad60 <Allocator_free>
                elf_section.flags = try in.readInt(elf.endian, u64);
  207737:	66 8b 85 b0 fd ff ff 	mov    ax,WORD PTR [rbp-0x250]
  20773e:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  207745:	66 89 85 0e f9 ff ff 	mov    WORD PTR [rbp-0x6f2],ax
  20774c:	e8 ff cc ff ff       	call   204450 <__zig_return_error>
  207751:	66 8b 85 0e f9 ff ff 	mov    ax,WORD PTR [rbp-0x6f2]
  207758:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20775f:	5d                   	pop    rbp
  207760:	c3                   	ret    
  207761:	48 8d 85 90 fd ff ff 	lea    rax,[rbp-0x270]
  207768:	48 8b 8d b8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x248]
  20776f:	48 8b 95 18 f9 ff ff 	mov    rdx,QWORD PTR [rbp-0x6e8]
  207776:	48 89 0a             	mov    QWORD PTR [rdx],rcx
                elf_section.addr = try in.readInt(elf.endian, u64);
  207779:	48 8b 8d a8 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x458]
  207780:	48 83 c1 10          	add    rcx,0x10
  207784:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  20778b:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  207792:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  207796:	44 0f b6 c7          	movzx  r8d,dil
  20779a:	48 8d bd 90 fd ff ff 	lea    rdi,[rbp-0x270]
  2077a1:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  2077a8:	48 89 8d 00 f9 ff ff 	mov    QWORD PTR [rbp-0x700],rcx
  2077af:	44 89 c1             	mov    ecx,r8d
  2077b2:	48 89 85 f8 f8 ff ff 	mov    QWORD PTR [rbp-0x708],rax
  2077b9:	e8 92 30 00 00       	call   20a850 <InStream(ReadError)_readInt.16>
  2077be:	66 83 bd 90 fd ff ff 	cmp    WORD PTR [rbp-0x270],0x0
  2077c5:	00 
  2077c6:	74 48                	je     207810 <Elf_openFile+0x14e0>
        errdefer elf.allocator.free(elf.section_headers);
  2077c8:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2077cf:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  2077d3:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2077da:	48 83 c0 38          	add    rax,0x38
  2077de:	48 89 c6             	mov    rsi,rax
  2077e1:	e8 7a 35 00 00       	call   20ad60 <Allocator_free>
                elf_section.addr = try in.readInt(elf.endian, u64);
  2077e6:	66 8b 85 90 fd ff ff 	mov    ax,WORD PTR [rbp-0x270]
  2077ed:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2077f4:	66 89 85 f6 f8 ff ff 	mov    WORD PTR [rbp-0x70a],ax
  2077fb:	e8 50 cc ff ff       	call   204450 <__zig_return_error>
  207800:	66 8b 85 f6 f8 ff ff 	mov    ax,WORD PTR [rbp-0x70a]
  207807:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20780e:	5d                   	pop    rbp
  20780f:	c3                   	ret    
  207810:	48 8d 85 70 fd ff ff 	lea    rax,[rbp-0x290]
  207817:	48 8b 8d 98 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x268]
  20781e:	48 8b 95 00 f9 ff ff 	mov    rdx,QWORD PTR [rbp-0x700]
  207825:	48 89 0a             	mov    QWORD PTR [rdx],rcx
                elf_section.offset = try in.readInt(elf.endian, u64);
  207828:	48 8b 8d a8 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x458]
  20782f:	48 83 c1 18          	add    rcx,0x18
  207833:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  20783a:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  207841:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  207845:	44 0f b6 c7          	movzx  r8d,dil
  207849:	48 8d bd 70 fd ff ff 	lea    rdi,[rbp-0x290]
  207850:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  207857:	48 89 8d e8 f8 ff ff 	mov    QWORD PTR [rbp-0x718],rcx
  20785e:	44 89 c1             	mov    ecx,r8d
  207861:	48 89 85 e0 f8 ff ff 	mov    QWORD PTR [rbp-0x720],rax
  207868:	e8 e3 2f 00 00       	call   20a850 <InStream(ReadError)_readInt.16>
  20786d:	66 83 bd 70 fd ff ff 	cmp    WORD PTR [rbp-0x290],0x0
  207874:	00 
  207875:	74 48                	je     2078bf <Elf_openFile+0x158f>
        errdefer elf.allocator.free(elf.section_headers);
  207877:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  20787e:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  207882:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  207889:	48 83 c0 38          	add    rax,0x38
  20788d:	48 89 c6             	mov    rsi,rax
  207890:	e8 cb 34 00 00       	call   20ad60 <Allocator_free>
                elf_section.offset = try in.readInt(elf.endian, u64);
  207895:	66 8b 85 70 fd ff ff 	mov    ax,WORD PTR [rbp-0x290]
  20789c:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2078a3:	66 89 85 de f8 ff ff 	mov    WORD PTR [rbp-0x722],ax
  2078aa:	e8 a1 cb ff ff       	call   204450 <__zig_return_error>
  2078af:	66 8b 85 de f8 ff ff 	mov    ax,WORD PTR [rbp-0x722]
  2078b6:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2078bd:	5d                   	pop    rbp
  2078be:	c3                   	ret    
  2078bf:	48 8d 85 50 fd ff ff 	lea    rax,[rbp-0x2b0]
  2078c6:	48 8b 8d 78 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x288]
  2078cd:	48 8b 95 e8 f8 ff ff 	mov    rdx,QWORD PTR [rbp-0x718]
  2078d4:	48 89 0a             	mov    QWORD PTR [rdx],rcx
                elf_section.size = try in.readInt(elf.endian, u64);
  2078d7:	48 8b 8d a8 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x458]
  2078de:	48 83 c1 20          	add    rcx,0x20
  2078e2:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  2078e9:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  2078f0:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  2078f4:	44 0f b6 c7          	movzx  r8d,dil
  2078f8:	48 8d bd 50 fd ff ff 	lea    rdi,[rbp-0x2b0]
  2078ff:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  207906:	48 89 8d d0 f8 ff ff 	mov    QWORD PTR [rbp-0x730],rcx
  20790d:	44 89 c1             	mov    ecx,r8d
  207910:	48 89 85 c8 f8 ff ff 	mov    QWORD PTR [rbp-0x738],rax
  207917:	e8 34 2f 00 00       	call   20a850 <InStream(ReadError)_readInt.16>
  20791c:	66 83 bd 50 fd ff ff 	cmp    WORD PTR [rbp-0x2b0],0x0
  207923:	00 
  207924:	74 48                	je     20796e <Elf_openFile+0x163e>
        errdefer elf.allocator.free(elf.section_headers);
  207926:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  20792d:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  207931:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  207938:	48 83 c0 38          	add    rax,0x38
  20793c:	48 89 c6             	mov    rsi,rax
  20793f:	e8 1c 34 00 00       	call   20ad60 <Allocator_free>
                elf_section.size = try in.readInt(elf.endian, u64);
  207944:	66 8b 85 50 fd ff ff 	mov    ax,WORD PTR [rbp-0x2b0]
  20794b:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  207952:	66 89 85 c6 f8 ff ff 	mov    WORD PTR [rbp-0x73a],ax
  207959:	e8 f2 ca ff ff       	call   204450 <__zig_return_error>
  20795e:	66 8b 85 c6 f8 ff ff 	mov    ax,WORD PTR [rbp-0x73a]
  207965:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20796c:	5d                   	pop    rbp
  20796d:	c3                   	ret    
  20796e:	48 8d 85 38 fd ff ff 	lea    rax,[rbp-0x2c8]
  207975:	48 8b 8d 58 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2a8]
  20797c:	48 8b 95 d0 f8 ff ff 	mov    rdx,QWORD PTR [rbp-0x730]
  207983:	48 89 0a             	mov    QWORD PTR [rdx],rcx
                elf_section.link = try in.readInt(elf.endian, u32);
  207986:	48 8b 8d a8 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x458]
  20798d:	48 83 c1 28          	add    rcx,0x28
  207991:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  207998:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  20799f:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  2079a3:	44 0f b6 c7          	movzx  r8d,dil
  2079a7:	48 8d bd 38 fd ff ff 	lea    rdi,[rbp-0x2c8]
  2079ae:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  2079b5:	48 89 8d b8 f8 ff ff 	mov    QWORD PTR [rbp-0x748],rcx
  2079bc:	44 89 c1             	mov    ecx,r8d
  2079bf:	48 89 85 b0 f8 ff ff 	mov    QWORD PTR [rbp-0x750],rax
  2079c6:	e8 75 2d 00 00       	call   20a740 <InStream(ReadError)_readInt.15>
  2079cb:	66 83 bd 38 fd ff ff 	cmp    WORD PTR [rbp-0x2c8],0x0
  2079d2:	00 
  2079d3:	74 48                	je     207a1d <Elf_openFile+0x16ed>
        errdefer elf.allocator.free(elf.section_headers);
  2079d5:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2079dc:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  2079e0:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2079e7:	48 83 c0 38          	add    rax,0x38
  2079eb:	48 89 c6             	mov    rsi,rax
  2079ee:	e8 6d 33 00 00       	call   20ad60 <Allocator_free>
                elf_section.link = try in.readInt(elf.endian, u32);
  2079f3:	66 8b 85 38 fd ff ff 	mov    ax,WORD PTR [rbp-0x2c8]
  2079fa:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  207a01:	66 89 85 ae f8 ff ff 	mov    WORD PTR [rbp-0x752],ax
  207a08:	e8 43 ca ff ff       	call   204450 <__zig_return_error>
  207a0d:	66 8b 85 ae f8 ff ff 	mov    ax,WORD PTR [rbp-0x752]
  207a14:	48 81 c4 20 09 00 00 	add    rsp,0x920
  207a1b:	5d                   	pop    rbp
  207a1c:	c3                   	ret    
  207a1d:	48 8d 85 28 fd ff ff 	lea    rax,[rbp-0x2d8]
  207a24:	8b 8d 3c fd ff ff    	mov    ecx,DWORD PTR [rbp-0x2c4]
  207a2a:	48 8b 95 b8 f8 ff ff 	mov    rdx,QWORD PTR [rbp-0x748]
  207a31:	89 0a                	mov    DWORD PTR [rdx],ecx
                elf_section.info = try in.readInt(elf.endian, u32);
  207a33:	48 8b b5 a8 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x458]
  207a3a:	48 83 c6 2c          	add    rsi,0x2c
  207a3e:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  207a45:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  207a4c:	44 8a 47 0a          	mov    r8b,BYTE PTR [rdi+0xa]
  207a50:	41 0f b6 c8          	movzx  ecx,r8b
  207a54:	48 8d bd 28 fd ff ff 	lea    rdi,[rbp-0x2d8]
  207a5b:	4c 8b 8d 70 fb ff ff 	mov    r9,QWORD PTR [rbp-0x490]
  207a62:	48 89 b5 a0 f8 ff ff 	mov    QWORD PTR [rbp-0x760],rsi
  207a69:	4c 89 ce             	mov    rsi,r9
  207a6c:	48 89 85 98 f8 ff ff 	mov    QWORD PTR [rbp-0x768],rax
  207a73:	e8 c8 2c 00 00       	call   20a740 <InStream(ReadError)_readInt.15>
  207a78:	66 83 bd 28 fd ff ff 	cmp    WORD PTR [rbp-0x2d8],0x0
  207a7f:	00 
  207a80:	74 48                	je     207aca <Elf_openFile+0x179a>
        errdefer elf.allocator.free(elf.section_headers);
  207a82:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  207a89:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  207a8d:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  207a94:	48 83 c0 38          	add    rax,0x38
  207a98:	48 89 c6             	mov    rsi,rax
  207a9b:	e8 c0 32 00 00       	call   20ad60 <Allocator_free>
                elf_section.info = try in.readInt(elf.endian, u32);
  207aa0:	66 8b 85 28 fd ff ff 	mov    ax,WORD PTR [rbp-0x2d8]
  207aa7:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  207aae:	66 89 85 96 f8 ff ff 	mov    WORD PTR [rbp-0x76a],ax
  207ab5:	e8 96 c9 ff ff       	call   204450 <__zig_return_error>
  207aba:	66 8b 85 96 f8 ff ff 	mov    ax,WORD PTR [rbp-0x76a]
  207ac1:	48 81 c4 20 09 00 00 	add    rsp,0x920
  207ac8:	5d                   	pop    rbp
  207ac9:	c3                   	ret    
  207aca:	48 8d 85 10 fd ff ff 	lea    rax,[rbp-0x2f0]
  207ad1:	8b 8d 2c fd ff ff    	mov    ecx,DWORD PTR [rbp-0x2d4]
  207ad7:	48 8b 95 a0 f8 ff ff 	mov    rdx,QWORD PTR [rbp-0x760]
  207ade:	89 0a                	mov    DWORD PTR [rdx],ecx
                elf_section.addr_align = try in.readInt(elf.endian, u64);
  207ae0:	48 8b b5 a8 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x458]
  207ae7:	48 83 c6 30          	add    rsi,0x30
  207aeb:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  207af2:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  207af9:	44 8a 47 0a          	mov    r8b,BYTE PTR [rdi+0xa]
  207afd:	41 0f b6 c8          	movzx  ecx,r8b
  207b01:	48 8d bd 10 fd ff ff 	lea    rdi,[rbp-0x2f0]
  207b08:	4c 8b 8d 70 fb ff ff 	mov    r9,QWORD PTR [rbp-0x490]
  207b0f:	48 89 b5 88 f8 ff ff 	mov    QWORD PTR [rbp-0x778],rsi
  207b16:	4c 89 ce             	mov    rsi,r9
  207b19:	48 89 85 80 f8 ff ff 	mov    QWORD PTR [rbp-0x780],rax
  207b20:	e8 2b 2d 00 00       	call   20a850 <InStream(ReadError)_readInt.16>
  207b25:	66 83 bd 10 fd ff ff 	cmp    WORD PTR [rbp-0x2f0],0x0
  207b2c:	00 
  207b2d:	74 48                	je     207b77 <Elf_openFile+0x1847>
        errdefer elf.allocator.free(elf.section_headers);
  207b2f:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  207b36:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  207b3a:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  207b41:	48 83 c0 38          	add    rax,0x38
  207b45:	48 89 c6             	mov    rsi,rax
  207b48:	e8 13 32 00 00       	call   20ad60 <Allocator_free>
                elf_section.addr_align = try in.readInt(elf.endian, u64);
  207b4d:	66 8b 85 10 fd ff ff 	mov    ax,WORD PTR [rbp-0x2f0]
  207b54:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  207b5b:	66 89 85 7e f8 ff ff 	mov    WORD PTR [rbp-0x782],ax
  207b62:	e8 e9 c8 ff ff       	call   204450 <__zig_return_error>
  207b67:	66 8b 85 7e f8 ff ff 	mov    ax,WORD PTR [rbp-0x782]
  207b6e:	48 81 c4 20 09 00 00 	add    rsp,0x920
  207b75:	5d                   	pop    rbp
  207b76:	c3                   	ret    
  207b77:	48 8d 85 f0 fc ff ff 	lea    rax,[rbp-0x310]
  207b7e:	48 8b 8d 18 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2e8]
  207b85:	48 8b 95 88 f8 ff ff 	mov    rdx,QWORD PTR [rbp-0x778]
  207b8c:	48 89 0a             	mov    QWORD PTR [rdx],rcx
                elf_section.ent_size = try in.readInt(elf.endian, u64);
  207b8f:	48 8b 8d a8 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x458]
  207b96:	48 83 c1 38          	add    rcx,0x38
  207b9a:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  207ba1:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  207ba8:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  207bac:	44 0f b6 c7          	movzx  r8d,dil
  207bb0:	48 8d bd f0 fc ff ff 	lea    rdi,[rbp-0x310]
  207bb7:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  207bbe:	48 89 8d 70 f8 ff ff 	mov    QWORD PTR [rbp-0x790],rcx
  207bc5:	44 89 c1             	mov    ecx,r8d
  207bc8:	48 89 85 68 f8 ff ff 	mov    QWORD PTR [rbp-0x798],rax
  207bcf:	e8 7c 2c 00 00       	call   20a850 <InStream(ReadError)_readInt.16>
  207bd4:	66 83 bd f0 fc ff ff 	cmp    WORD PTR [rbp-0x310],0x0
  207bdb:	00 
  207bdc:	74 48                	je     207c26 <Elf_openFile+0x18f6>
        errdefer elf.allocator.free(elf.section_headers);
  207bde:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  207be5:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  207be9:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  207bf0:	48 83 c0 38          	add    rax,0x38
  207bf4:	48 89 c6             	mov    rsi,rax
  207bf7:	e8 64 31 00 00       	call   20ad60 <Allocator_free>
                elf_section.ent_size = try in.readInt(elf.endian, u64);
  207bfc:	66 8b 85 f0 fc ff ff 	mov    ax,WORD PTR [rbp-0x310]
  207c03:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  207c0a:	66 89 85 66 f8 ff ff 	mov    WORD PTR [rbp-0x79a],ax
  207c11:	e8 3a c8 ff ff       	call   204450 <__zig_return_error>
  207c16:	66 8b 85 66 f8 ff ff 	mov    ax,WORD PTR [rbp-0x79a]
  207c1d:	48 81 c4 20 09 00 00 	add    rsp,0x920
  207c24:	5d                   	pop    rbp
  207c25:	c3                   	ret    
  207c26:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
  207c2d:	48 8b 8d 70 f8 ff ff 	mov    rcx,QWORD PTR [rbp-0x790]
  207c34:	48 89 01             	mov    QWORD PTR [rcx],rax
            for (elf.section_headers) |*elf_section| {
  207c37:	48 8b 85 50 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x6b0]
  207c3e:	48 83 c0 01          	add    rax,0x1
  207c42:	48 89 85 a0 fb ff ff 	mov    QWORD PTR [rbp-0x460],rax
  207c49:	e9 e5 f8 ff ff       	jmp    207533 <Elf_openFile+0x1203>
        if (elf.is_64) {
  207c4e:	e9 0f 08 00 00       	jmp    208462 <Elf_openFile+0x2132>
            }
        } else {
            if (sh_entry_size != 40) return error.InvalidFormat;
  207c53:	66 83 bd dc fb ff ff 	cmp    WORD PTR [rbp-0x424],0x28
  207c5a:	28 
  207c5b:	74 37                	je     207c94 <Elf_openFile+0x1964>
        errdefer elf.allocator.free(elf.section_headers);
  207c5d:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  207c64:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  207c68:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  207c6f:	48 83 c0 38          	add    rax,0x38
  207c73:	48 89 c6             	mov    rsi,rax
  207c76:	e8 e5 30 00 00       	call   20ad60 <Allocator_free>
            if (sh_entry_size != 40) return error.InvalidFormat;
  207c7b:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  207c82:	e8 c9 c7 ff ff       	call   204450 <__zig_return_error>
  207c87:	66 b8 1f 00          	mov    ax,0x1f
  207c8b:	48 81 c4 20 09 00 00 	add    rsp,0x920
  207c92:	5d                   	pop    rbp
  207c93:	c3                   	ret    
  207c94:	eb 00                	jmp    207c96 <Elf_openFile+0x1966>
  207c96:	be aa 00 00 00       	mov    esi,0xaa
  207c9b:	b8 08 00 00 00       	mov    eax,0x8
  207ca0:	89 c2                	mov    edx,eax
  207ca2:	48 8d 8d 98 fb ff ff 	lea    rcx,[rbp-0x468]

            for (elf.section_headers) |*elf_section| {
  207ca9:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  207cb0:	49 89 f8             	mov    r8,rdi
  207cb3:	49 83 c0 38          	add    r8,0x38
  207cb7:	48 89 bd 58 f8 ff ff 	mov    QWORD PTR [rbp-0x7a8],rdi
  207cbe:	48 89 cf             	mov    rdi,rcx
  207cc1:	4c 89 85 50 f8 ff ff 	mov    QWORD PTR [rbp-0x7b0],r8
  207cc8:	e8 e3 9f 01 00       	call   221cb0 <memset>
  207ccd:	48 c7 85 90 fb ff ff 	mov    QWORD PTR [rbp-0x470],0x0
  207cd4:	00 00 00 00 
  207cd8:	48 8b 8d 58 f8 ff ff 	mov    rcx,QWORD PTR [rbp-0x7a8]
  207cdf:	48 8b 51 40          	mov    rdx,QWORD PTR [rcx+0x40]
  207ce3:	48 89 95 48 f8 ff ff 	mov    QWORD PTR [rbp-0x7b8],rdx
  207cea:	48 8b 85 90 fb ff ff 	mov    rax,QWORD PTR [rbp-0x470]
  207cf1:	48 8b 8d 48 f8 ff ff 	mov    rcx,QWORD PTR [rbp-0x7b8]
  207cf8:	48 39 c8             	cmp    rax,rcx
  207cfb:	48 89 85 40 f8 ff ff 	mov    QWORD PTR [rbp-0x7c0],rax
  207d02:	0f 83 58 07 00 00    	jae    208460 <Elf_openFile+0x2130>
  207d08:	48 8d 85 d8 fc ff ff 	lea    rax,[rbp-0x328]
  207d0f:	48 8b 8d 40 f8 ff ff 	mov    rcx,QWORD PTR [rbp-0x7c0]
  207d16:	48 c1 e1 06          	shl    rcx,0x6
  207d1a:	48 8b 95 50 f8 ff ff 	mov    rdx,QWORD PTR [rbp-0x7b0]
  207d21:	48 03 0a             	add    rcx,QWORD PTR [rdx]
  207d24:	48 89 8d 98 fb ff ff 	mov    QWORD PTR [rbp-0x468],rcx
                // TODO (multiple occurences) allow implicit cast from %u32 -> %u64 ?
                elf_section.name = try in.readInt(elf.endian, u32);
  207d2b:	48 8b 8d 98 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x468]
  207d32:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  207d39:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  207d40:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  207d44:	44 0f b6 c7          	movzx  r8d,dil
  207d48:	48 8d bd d8 fc ff ff 	lea    rdi,[rbp-0x328]
  207d4f:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  207d56:	48 89 8d 38 f8 ff ff 	mov    QWORD PTR [rbp-0x7c8],rcx
  207d5d:	44 89 c1             	mov    ecx,r8d
  207d60:	48 89 85 30 f8 ff ff 	mov    QWORD PTR [rbp-0x7d0],rax
  207d67:	e8 d4 29 00 00       	call   20a740 <InStream(ReadError)_readInt.15>
  207d6c:	66 83 bd d8 fc ff ff 	cmp    WORD PTR [rbp-0x328],0x0
  207d73:	00 
  207d74:	74 48                	je     207dbe <Elf_openFile+0x1a8e>
        errdefer elf.allocator.free(elf.section_headers);
  207d76:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  207d7d:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  207d81:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  207d88:	48 83 c0 38          	add    rax,0x38
  207d8c:	48 89 c6             	mov    rsi,rax
  207d8f:	e8 cc 2f 00 00       	call   20ad60 <Allocator_free>
                elf_section.name = try in.readInt(elf.endian, u32);
  207d94:	66 8b 85 d8 fc ff ff 	mov    ax,WORD PTR [rbp-0x328]
  207d9b:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  207da2:	66 89 85 2e f8 ff ff 	mov    WORD PTR [rbp-0x7d2],ax
  207da9:	e8 a2 c6 ff ff       	call   204450 <__zig_return_error>
  207dae:	66 8b 85 2e f8 ff ff 	mov    ax,WORD PTR [rbp-0x7d2]
  207db5:	48 81 c4 20 09 00 00 	add    rsp,0x920
  207dbc:	5d                   	pop    rbp
  207dbd:	c3                   	ret    
  207dbe:	48 8d 85 c8 fc ff ff 	lea    rax,[rbp-0x338]
  207dc5:	8b 8d dc fc ff ff    	mov    ecx,DWORD PTR [rbp-0x324]
  207dcb:	48 8b 95 38 f8 ff ff 	mov    rdx,QWORD PTR [rbp-0x7c8]
  207dd2:	89 0a                	mov    DWORD PTR [rdx],ecx
                elf_section.sh_type = try in.readInt(elf.endian, u32);
  207dd4:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
  207ddb:	48 83 c6 04          	add    rsi,0x4
  207ddf:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  207de6:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  207ded:	44 8a 47 0a          	mov    r8b,BYTE PTR [rdi+0xa]
  207df1:	41 0f b6 c8          	movzx  ecx,r8b
  207df5:	48 8d bd c8 fc ff ff 	lea    rdi,[rbp-0x338]
  207dfc:	4c 8b 8d 70 fb ff ff 	mov    r9,QWORD PTR [rbp-0x490]
  207e03:	48 89 b5 20 f8 ff ff 	mov    QWORD PTR [rbp-0x7e0],rsi
  207e0a:	4c 89 ce             	mov    rsi,r9
  207e0d:	48 89 85 18 f8 ff ff 	mov    QWORD PTR [rbp-0x7e8],rax
  207e14:	e8 27 29 00 00       	call   20a740 <InStream(ReadError)_readInt.15>
  207e19:	66 83 bd c8 fc ff ff 	cmp    WORD PTR [rbp-0x338],0x0
  207e20:	00 
  207e21:	74 48                	je     207e6b <Elf_openFile+0x1b3b>
        errdefer elf.allocator.free(elf.section_headers);
  207e23:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  207e2a:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  207e2e:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  207e35:	48 83 c0 38          	add    rax,0x38
  207e39:	48 89 c6             	mov    rsi,rax
  207e3c:	e8 1f 2f 00 00       	call   20ad60 <Allocator_free>
                elf_section.sh_type = try in.readInt(elf.endian, u32);
  207e41:	66 8b 85 c8 fc ff ff 	mov    ax,WORD PTR [rbp-0x338]
  207e48:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  207e4f:	66 89 85 16 f8 ff ff 	mov    WORD PTR [rbp-0x7ea],ax
  207e56:	e8 f5 c5 ff ff       	call   204450 <__zig_return_error>
  207e5b:	66 8b 85 16 f8 ff ff 	mov    ax,WORD PTR [rbp-0x7ea]
  207e62:	48 81 c4 20 09 00 00 	add    rsp,0x920
  207e69:	5d                   	pop    rbp
  207e6a:	c3                   	ret    
  207e6b:	48 8d 85 b8 fc ff ff 	lea    rax,[rbp-0x348]
  207e72:	8b 8d cc fc ff ff    	mov    ecx,DWORD PTR [rbp-0x334]
  207e78:	48 8b 95 20 f8 ff ff 	mov    rdx,QWORD PTR [rbp-0x7e0]
  207e7f:	89 0a                	mov    DWORD PTR [rdx],ecx
                elf_section.flags = u64(try in.readInt(elf.endian, u32));
  207e81:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
  207e88:	48 83 c6 08          	add    rsi,0x8
  207e8c:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  207e93:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  207e9a:	44 8a 47 0a          	mov    r8b,BYTE PTR [rdi+0xa]
  207e9e:	41 0f b6 c8          	movzx  ecx,r8b
  207ea2:	48 8d bd b8 fc ff ff 	lea    rdi,[rbp-0x348]
  207ea9:	4c 8b 8d 70 fb ff ff 	mov    r9,QWORD PTR [rbp-0x490]
  207eb0:	48 89 b5 08 f8 ff ff 	mov    QWORD PTR [rbp-0x7f8],rsi
  207eb7:	4c 89 ce             	mov    rsi,r9
  207eba:	48 89 85 00 f8 ff ff 	mov    QWORD PTR [rbp-0x800],rax
  207ec1:	e8 7a 28 00 00       	call   20a740 <InStream(ReadError)_readInt.15>
  207ec6:	66 83 bd b8 fc ff ff 	cmp    WORD PTR [rbp-0x348],0x0
  207ecd:	00 
  207ece:	74 48                	je     207f18 <Elf_openFile+0x1be8>
        errdefer elf.allocator.free(elf.section_headers);
  207ed0:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  207ed7:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  207edb:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  207ee2:	48 83 c0 38          	add    rax,0x38
  207ee6:	48 89 c6             	mov    rsi,rax
  207ee9:	e8 72 2e 00 00       	call   20ad60 <Allocator_free>
                elf_section.flags = u64(try in.readInt(elf.endian, u32));
  207eee:	66 8b 85 b8 fc ff ff 	mov    ax,WORD PTR [rbp-0x348]
  207ef5:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  207efc:	66 89 85 fe f7 ff ff 	mov    WORD PTR [rbp-0x802],ax
  207f03:	e8 48 c5 ff ff       	call   204450 <__zig_return_error>
  207f08:	66 8b 85 fe f7 ff ff 	mov    ax,WORD PTR [rbp-0x802]
  207f0f:	48 81 c4 20 09 00 00 	add    rsp,0x920
  207f16:	5d                   	pop    rbp
  207f17:	c3                   	ret    
  207f18:	48 8d 85 a8 fc ff ff 	lea    rax,[rbp-0x358]
  207f1f:	8b 8d bc fc ff ff    	mov    ecx,DWORD PTR [rbp-0x344]
  207f25:	89 ca                	mov    edx,ecx
  207f27:	48 8b b5 08 f8 ff ff 	mov    rsi,QWORD PTR [rbp-0x7f8]
  207f2e:	48 89 16             	mov    QWORD PTR [rsi],rdx
                elf_section.addr = u64(try in.readInt(elf.endian, u32));
  207f31:	48 8b 95 98 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x468]
  207f38:	48 83 c2 10          	add    rdx,0x10
  207f3c:	48 8b bd f0 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x410]
  207f43:	4c 8b 85 18 fc ff ff 	mov    r8,QWORD PTR [rbp-0x3e8]
  207f4a:	45 8a 48 0a          	mov    r9b,BYTE PTR [r8+0xa]
  207f4e:	41 0f b6 c9          	movzx  ecx,r9b
  207f52:	4c 8d 85 a8 fc ff ff 	lea    r8,[rbp-0x358]
  207f59:	48 89 bd f0 f7 ff ff 	mov    QWORD PTR [rbp-0x810],rdi
  207f60:	4c 89 c7             	mov    rdi,r8
  207f63:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  207f6a:	4c 8b 85 f0 f7 ff ff 	mov    r8,QWORD PTR [rbp-0x810]
  207f71:	48 89 95 e8 f7 ff ff 	mov    QWORD PTR [rbp-0x818],rdx
  207f78:	4c 89 c2             	mov    rdx,r8
  207f7b:	48 89 85 e0 f7 ff ff 	mov    QWORD PTR [rbp-0x820],rax
  207f82:	e8 b9 27 00 00       	call   20a740 <InStream(ReadError)_readInt.15>
  207f87:	66 83 bd a8 fc ff ff 	cmp    WORD PTR [rbp-0x358],0x0
  207f8e:	00 
  207f8f:	74 48                	je     207fd9 <Elf_openFile+0x1ca9>
        errdefer elf.allocator.free(elf.section_headers);
  207f91:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  207f98:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  207f9c:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  207fa3:	48 83 c0 38          	add    rax,0x38
  207fa7:	48 89 c6             	mov    rsi,rax
  207faa:	e8 b1 2d 00 00       	call   20ad60 <Allocator_free>
                elf_section.addr = u64(try in.readInt(elf.endian, u32));
  207faf:	66 8b 85 a8 fc ff ff 	mov    ax,WORD PTR [rbp-0x358]
  207fb6:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  207fbd:	66 89 85 de f7 ff ff 	mov    WORD PTR [rbp-0x822],ax
  207fc4:	e8 87 c4 ff ff       	call   204450 <__zig_return_error>
  207fc9:	66 8b 85 de f7 ff ff 	mov    ax,WORD PTR [rbp-0x822]
  207fd0:	48 81 c4 20 09 00 00 	add    rsp,0x920
  207fd7:	5d                   	pop    rbp
  207fd8:	c3                   	ret    
  207fd9:	48 8d 85 98 fc ff ff 	lea    rax,[rbp-0x368]
  207fe0:	8b 8d ac fc ff ff    	mov    ecx,DWORD PTR [rbp-0x354]
  207fe6:	89 ca                	mov    edx,ecx
  207fe8:	48 8b b5 e8 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x818]
  207fef:	48 89 16             	mov    QWORD PTR [rsi],rdx
                elf_section.offset = u64(try in.readInt(elf.endian, u32));
  207ff2:	48 8b 95 98 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x468]
  207ff9:	48 83 c2 18          	add    rdx,0x18
  207ffd:	48 8b bd f0 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x410]
  208004:	4c 8b 85 18 fc ff ff 	mov    r8,QWORD PTR [rbp-0x3e8]
  20800b:	45 8a 48 0a          	mov    r9b,BYTE PTR [r8+0xa]
  20800f:	41 0f b6 c9          	movzx  ecx,r9b
  208013:	4c 8d 85 98 fc ff ff 	lea    r8,[rbp-0x368]
  20801a:	48 89 bd d0 f7 ff ff 	mov    QWORD PTR [rbp-0x830],rdi
  208021:	4c 89 c7             	mov    rdi,r8
  208024:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  20802b:	4c 8b 85 d0 f7 ff ff 	mov    r8,QWORD PTR [rbp-0x830]
  208032:	48 89 95 c8 f7 ff ff 	mov    QWORD PTR [rbp-0x838],rdx
  208039:	4c 89 c2             	mov    rdx,r8
  20803c:	48 89 85 c0 f7 ff ff 	mov    QWORD PTR [rbp-0x840],rax
  208043:	e8 f8 26 00 00       	call   20a740 <InStream(ReadError)_readInt.15>
  208048:	66 83 bd 98 fc ff ff 	cmp    WORD PTR [rbp-0x368],0x0
  20804f:	00 
  208050:	74 48                	je     20809a <Elf_openFile+0x1d6a>
        errdefer elf.allocator.free(elf.section_headers);
  208052:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  208059:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  20805d:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  208064:	48 83 c0 38          	add    rax,0x38
  208068:	48 89 c6             	mov    rsi,rax
  20806b:	e8 f0 2c 00 00       	call   20ad60 <Allocator_free>
                elf_section.offset = u64(try in.readInt(elf.endian, u32));
  208070:	66 8b 85 98 fc ff ff 	mov    ax,WORD PTR [rbp-0x368]
  208077:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20807e:	66 89 85 be f7 ff ff 	mov    WORD PTR [rbp-0x842],ax
  208085:	e8 c6 c3 ff ff       	call   204450 <__zig_return_error>
  20808a:	66 8b 85 be f7 ff ff 	mov    ax,WORD PTR [rbp-0x842]
  208091:	48 81 c4 20 09 00 00 	add    rsp,0x920
  208098:	5d                   	pop    rbp
  208099:	c3                   	ret    
  20809a:	48 8d 85 88 fc ff ff 	lea    rax,[rbp-0x378]
  2080a1:	8b 8d 9c fc ff ff    	mov    ecx,DWORD PTR [rbp-0x364]
  2080a7:	89 ca                	mov    edx,ecx
  2080a9:	48 8b b5 c8 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x838]
  2080b0:	48 89 16             	mov    QWORD PTR [rsi],rdx
                elf_section.size = u64(try in.readInt(elf.endian, u32));
  2080b3:	48 8b 95 98 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x468]
  2080ba:	48 83 c2 20          	add    rdx,0x20
  2080be:	48 8b bd f0 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x410]
  2080c5:	4c 8b 85 18 fc ff ff 	mov    r8,QWORD PTR [rbp-0x3e8]
  2080cc:	45 8a 48 0a          	mov    r9b,BYTE PTR [r8+0xa]
  2080d0:	41 0f b6 c9          	movzx  ecx,r9b
  2080d4:	4c 8d 85 88 fc ff ff 	lea    r8,[rbp-0x378]
  2080db:	48 89 bd b0 f7 ff ff 	mov    QWORD PTR [rbp-0x850],rdi
  2080e2:	4c 89 c7             	mov    rdi,r8
  2080e5:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  2080ec:	4c 8b 85 b0 f7 ff ff 	mov    r8,QWORD PTR [rbp-0x850]
  2080f3:	48 89 95 a8 f7 ff ff 	mov    QWORD PTR [rbp-0x858],rdx
  2080fa:	4c 89 c2             	mov    rdx,r8
  2080fd:	48 89 85 a0 f7 ff ff 	mov    QWORD PTR [rbp-0x860],rax
  208104:	e8 37 26 00 00       	call   20a740 <InStream(ReadError)_readInt.15>
  208109:	66 83 bd 88 fc ff ff 	cmp    WORD PTR [rbp-0x378],0x0
  208110:	00 
  208111:	74 48                	je     20815b <Elf_openFile+0x1e2b>
        errdefer elf.allocator.free(elf.section_headers);
  208113:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  20811a:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  20811e:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  208125:	48 83 c0 38          	add    rax,0x38
  208129:	48 89 c6             	mov    rsi,rax
  20812c:	e8 2f 2c 00 00       	call   20ad60 <Allocator_free>
                elf_section.size = u64(try in.readInt(elf.endian, u32));
  208131:	66 8b 85 88 fc ff ff 	mov    ax,WORD PTR [rbp-0x378]
  208138:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20813f:	66 89 85 9e f7 ff ff 	mov    WORD PTR [rbp-0x862],ax
  208146:	e8 05 c3 ff ff       	call   204450 <__zig_return_error>
  20814b:	66 8b 85 9e f7 ff ff 	mov    ax,WORD PTR [rbp-0x862]
  208152:	48 81 c4 20 09 00 00 	add    rsp,0x920
  208159:	5d                   	pop    rbp
  20815a:	c3                   	ret    
  20815b:	48 8d 85 78 fc ff ff 	lea    rax,[rbp-0x388]
  208162:	8b 8d 8c fc ff ff    	mov    ecx,DWORD PTR [rbp-0x374]
  208168:	89 ca                	mov    edx,ecx
  20816a:	48 8b b5 a8 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x858]
  208171:	48 89 16             	mov    QWORD PTR [rsi],rdx
                elf_section.link = try in.readInt(elf.endian, u32);
  208174:	48 8b 95 98 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x468]
  20817b:	48 83 c2 28          	add    rdx,0x28
  20817f:	48 8b bd f0 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x410]
  208186:	4c 8b 85 18 fc ff ff 	mov    r8,QWORD PTR [rbp-0x3e8]
  20818d:	45 8a 48 0a          	mov    r9b,BYTE PTR [r8+0xa]
  208191:	41 0f b6 c9          	movzx  ecx,r9b
  208195:	4c 8d 85 78 fc ff ff 	lea    r8,[rbp-0x388]
  20819c:	48 89 bd 90 f7 ff ff 	mov    QWORD PTR [rbp-0x870],rdi
  2081a3:	4c 89 c7             	mov    rdi,r8
  2081a6:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  2081ad:	4c 8b 85 90 f7 ff ff 	mov    r8,QWORD PTR [rbp-0x870]
  2081b4:	48 89 95 88 f7 ff ff 	mov    QWORD PTR [rbp-0x878],rdx
  2081bb:	4c 89 c2             	mov    rdx,r8
  2081be:	48 89 85 80 f7 ff ff 	mov    QWORD PTR [rbp-0x880],rax
  2081c5:	e8 76 25 00 00       	call   20a740 <InStream(ReadError)_readInt.15>
  2081ca:	66 83 bd 78 fc ff ff 	cmp    WORD PTR [rbp-0x388],0x0
  2081d1:	00 
  2081d2:	74 48                	je     20821c <Elf_openFile+0x1eec>
        errdefer elf.allocator.free(elf.section_headers);
  2081d4:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2081db:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  2081df:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2081e6:	48 83 c0 38          	add    rax,0x38
  2081ea:	48 89 c6             	mov    rsi,rax
  2081ed:	e8 6e 2b 00 00       	call   20ad60 <Allocator_free>
                elf_section.link = try in.readInt(elf.endian, u32);
  2081f2:	66 8b 85 78 fc ff ff 	mov    ax,WORD PTR [rbp-0x388]
  2081f9:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  208200:	66 89 85 7e f7 ff ff 	mov    WORD PTR [rbp-0x882],ax
  208207:	e8 44 c2 ff ff       	call   204450 <__zig_return_error>
  20820c:	66 8b 85 7e f7 ff ff 	mov    ax,WORD PTR [rbp-0x882]
  208213:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20821a:	5d                   	pop    rbp
  20821b:	c3                   	ret    
  20821c:	48 8d 85 68 fc ff ff 	lea    rax,[rbp-0x398]
  208223:	8b 8d 7c fc ff ff    	mov    ecx,DWORD PTR [rbp-0x384]
  208229:	48 8b 95 88 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x878]
  208230:	89 0a                	mov    DWORD PTR [rdx],ecx
                elf_section.info = try in.readInt(elf.endian, u32);
  208232:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
  208239:	48 83 c6 2c          	add    rsi,0x2c
  20823d:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  208244:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  20824b:	44 8a 47 0a          	mov    r8b,BYTE PTR [rdi+0xa]
  20824f:	41 0f b6 c8          	movzx  ecx,r8b
  208253:	48 8d bd 68 fc ff ff 	lea    rdi,[rbp-0x398]
  20825a:	4c 8b 8d 70 fb ff ff 	mov    r9,QWORD PTR [rbp-0x490]
  208261:	48 89 b5 70 f7 ff ff 	mov    QWORD PTR [rbp-0x890],rsi
  208268:	4c 89 ce             	mov    rsi,r9
  20826b:	48 89 85 68 f7 ff ff 	mov    QWORD PTR [rbp-0x898],rax
  208272:	e8 c9 24 00 00       	call   20a740 <InStream(ReadError)_readInt.15>
  208277:	66 83 bd 68 fc ff ff 	cmp    WORD PTR [rbp-0x398],0x0
  20827e:	00 
  20827f:	74 48                	je     2082c9 <Elf_openFile+0x1f99>
        errdefer elf.allocator.free(elf.section_headers);
  208281:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  208288:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  20828c:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  208293:	48 83 c0 38          	add    rax,0x38
  208297:	48 89 c6             	mov    rsi,rax
  20829a:	e8 c1 2a 00 00       	call   20ad60 <Allocator_free>
                elf_section.info = try in.readInt(elf.endian, u32);
  20829f:	66 8b 85 68 fc ff ff 	mov    ax,WORD PTR [rbp-0x398]
  2082a6:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2082ad:	66 89 85 66 f7 ff ff 	mov    WORD PTR [rbp-0x89a],ax
  2082b4:	e8 97 c1 ff ff       	call   204450 <__zig_return_error>
  2082b9:	66 8b 85 66 f7 ff ff 	mov    ax,WORD PTR [rbp-0x89a]
  2082c0:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2082c7:	5d                   	pop    rbp
  2082c8:	c3                   	ret    
  2082c9:	48 8d 85 58 fc ff ff 	lea    rax,[rbp-0x3a8]
  2082d0:	8b 8d 6c fc ff ff    	mov    ecx,DWORD PTR [rbp-0x394]
  2082d6:	48 8b 95 70 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x890]
  2082dd:	89 0a                	mov    DWORD PTR [rdx],ecx
                elf_section.addr_align = u64(try in.readInt(elf.endian, u32));
  2082df:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
  2082e6:	48 83 c6 30          	add    rsi,0x30
  2082ea:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  2082f1:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  2082f8:	44 8a 47 0a          	mov    r8b,BYTE PTR [rdi+0xa]
  2082fc:	41 0f b6 c8          	movzx  ecx,r8b
  208300:	48 8d bd 58 fc ff ff 	lea    rdi,[rbp-0x3a8]
  208307:	4c 8b 8d 70 fb ff ff 	mov    r9,QWORD PTR [rbp-0x490]
  20830e:	48 89 b5 58 f7 ff ff 	mov    QWORD PTR [rbp-0x8a8],rsi
  208315:	4c 89 ce             	mov    rsi,r9
  208318:	48 89 85 50 f7 ff ff 	mov    QWORD PTR [rbp-0x8b0],rax
  20831f:	e8 1c 24 00 00       	call   20a740 <InStream(ReadError)_readInt.15>
  208324:	66 83 bd 58 fc ff ff 	cmp    WORD PTR [rbp-0x3a8],0x0
  20832b:	00 
  20832c:	74 48                	je     208376 <Elf_openFile+0x2046>
        errdefer elf.allocator.free(elf.section_headers);
  20832e:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  208335:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  208339:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  208340:	48 83 c0 38          	add    rax,0x38
  208344:	48 89 c6             	mov    rsi,rax
  208347:	e8 14 2a 00 00       	call   20ad60 <Allocator_free>
                elf_section.addr_align = u64(try in.readInt(elf.endian, u32));
  20834c:	66 8b 85 58 fc ff ff 	mov    ax,WORD PTR [rbp-0x3a8]
  208353:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20835a:	66 89 85 4e f7 ff ff 	mov    WORD PTR [rbp-0x8b2],ax
  208361:	e8 ea c0 ff ff       	call   204450 <__zig_return_error>
  208366:	66 8b 85 4e f7 ff ff 	mov    ax,WORD PTR [rbp-0x8b2]
  20836d:	48 81 c4 20 09 00 00 	add    rsp,0x920
  208374:	5d                   	pop    rbp
  208375:	c3                   	ret    
  208376:	48 8d 85 48 fc ff ff 	lea    rax,[rbp-0x3b8]
  20837d:	8b 8d 5c fc ff ff    	mov    ecx,DWORD PTR [rbp-0x3a4]
  208383:	89 ca                	mov    edx,ecx
  208385:	48 8b b5 58 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8a8]
  20838c:	48 89 16             	mov    QWORD PTR [rsi],rdx
                elf_section.ent_size = u64(try in.readInt(elf.endian, u32));
  20838f:	48 8b 95 98 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x468]
  208396:	48 83 c2 38          	add    rdx,0x38
  20839a:	48 8b bd f0 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x410]
  2083a1:	4c 8b 85 18 fc ff ff 	mov    r8,QWORD PTR [rbp-0x3e8]
  2083a8:	45 8a 48 0a          	mov    r9b,BYTE PTR [r8+0xa]
  2083ac:	41 0f b6 c9          	movzx  ecx,r9b
  2083b0:	4c 8d 85 48 fc ff ff 	lea    r8,[rbp-0x3b8]
  2083b7:	48 89 bd 40 f7 ff ff 	mov    QWORD PTR [rbp-0x8c0],rdi
  2083be:	4c 89 c7             	mov    rdi,r8
  2083c1:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  2083c8:	4c 8b 85 40 f7 ff ff 	mov    r8,QWORD PTR [rbp-0x8c0]
  2083cf:	48 89 95 38 f7 ff ff 	mov    QWORD PTR [rbp-0x8c8],rdx
  2083d6:	4c 89 c2             	mov    rdx,r8
  2083d9:	48 89 85 30 f7 ff ff 	mov    QWORD PTR [rbp-0x8d0],rax
  2083e0:	e8 5b 23 00 00       	call   20a740 <InStream(ReadError)_readInt.15>
  2083e5:	66 83 bd 48 fc ff ff 	cmp    WORD PTR [rbp-0x3b8],0x0
  2083ec:	00 
  2083ed:	74 48                	je     208437 <Elf_openFile+0x2107>
        errdefer elf.allocator.free(elf.section_headers);
  2083ef:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2083f6:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  2083fa:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  208401:	48 83 c0 38          	add    rax,0x38
  208405:	48 89 c6             	mov    rsi,rax
  208408:	e8 53 29 00 00       	call   20ad60 <Allocator_free>
                elf_section.ent_size = u64(try in.readInt(elf.endian, u32));
  20840d:	66 8b 85 48 fc ff ff 	mov    ax,WORD PTR [rbp-0x3b8]
  208414:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20841b:	66 89 85 2e f7 ff ff 	mov    WORD PTR [rbp-0x8d2],ax
  208422:	e8 29 c0 ff ff       	call   204450 <__zig_return_error>
  208427:	66 8b 85 2e f7 ff ff 	mov    ax,WORD PTR [rbp-0x8d2]
  20842e:	48 81 c4 20 09 00 00 	add    rsp,0x920
  208435:	5d                   	pop    rbp
  208436:	c3                   	ret    
  208437:	8b 85 4c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3b4]
  20843d:	89 c1                	mov    ecx,eax
  20843f:	48 8b 95 38 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x8c8]
  208446:	48 89 0a             	mov    QWORD PTR [rdx],rcx
            for (elf.section_headers) |*elf_section| {
  208449:	48 8b 8d 40 f8 ff ff 	mov    rcx,QWORD PTR [rbp-0x7c0]
  208450:	48 83 c1 01          	add    rcx,0x1
  208454:	48 89 8d 90 fb ff ff 	mov    QWORD PTR [rbp-0x470],rcx
  20845b:	e9 8a f8 ff ff       	jmp    207cea <Elf_openFile+0x19ba>
        if (elf.is_64) {
  208460:	eb 00                	jmp    208462 <Elf_openFile+0x2132>
  208462:	be aa 00 00 00       	mov    esi,0xaa
  208467:	b8 08 00 00 00       	mov    eax,0x8
  20846c:	89 c2                	mov    edx,eax
  20846e:	48 8d 8d 88 fb ff ff 	lea    rcx,[rbp-0x478]
            }
        }

        for (elf.section_headers) |*elf_section| {
  208475:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  20847c:	49 89 f8             	mov    r8,rdi
  20847f:	49 83 c0 38          	add    r8,0x38
  208483:	48 89 bd 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rdi
  20848a:	48 89 cf             	mov    rdi,rcx
  20848d:	4c 89 85 18 f7 ff ff 	mov    QWORD PTR [rbp-0x8e8],r8
  208494:	e8 17 98 01 00       	call   221cb0 <memset>
  208499:	48 c7 85 80 fb ff ff 	mov    QWORD PTR [rbp-0x480],0x0
  2084a0:	00 00 00 00 
  2084a4:	48 8b 8d 20 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x8e0]
  2084ab:	48 8b 51 40          	mov    rdx,QWORD PTR [rcx+0x40]
  2084af:	48 89 95 10 f7 ff ff 	mov    QWORD PTR [rbp-0x8f0],rdx
  2084b6:	48 8b 85 80 fb ff ff 	mov    rax,QWORD PTR [rbp-0x480]
  2084bd:	48 8b 8d 10 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x8f0]
  2084c4:	48 39 c8             	cmp    rax,rcx
  2084c7:	48 89 85 08 f7 ff ff 	mov    QWORD PTR [rbp-0x8f8],rax
  2084ce:	0f 83 1a 01 00 00    	jae    2085ee <Elf_openFile+0x22be>
  2084d4:	48 8b 85 08 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8f8]
  2084db:	48 c1 e0 06          	shl    rax,0x6
  2084df:	48 8b 8d 18 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x8e8]
  2084e6:	48 03 01             	add    rax,QWORD PTR [rcx]
  2084e9:	48 89 85 88 fb ff ff 	mov    QWORD PTR [rbp-0x478],rax
            if (elf_section.sh_type != SHT_NOBITS) {
  2084f0:	48 8b 85 88 fb ff ff 	mov    rax,QWORD PTR [rbp-0x478]
  2084f7:	83 78 04 08          	cmp    DWORD PTR [rax+0x4],0x8
  2084fb:	0f 84 d4 00 00 00    	je     2085d5 <Elf_openFile+0x22a5>
  208501:	48 8d bd 30 fc ff ff 	lea    rdi,[rbp-0x3d0]
                const file_end_offset = try math.add(u64, elf_section.offset, elf_section.size);
  208508:	48 8b 85 88 fb ff ff 	mov    rax,QWORD PTR [rbp-0x478]
  20850f:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
  208513:	48 8b 85 88 fb ff ff 	mov    rax,QWORD PTR [rbp-0x478]
  20851a:	48 8b 48 20          	mov    rcx,QWORD PTR [rax+0x20]
  20851e:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  208525:	e8 56 24 00 00       	call   20a980 <add>
  20852a:	66 83 bd 30 fc ff ff 	cmp    WORD PTR [rbp-0x3d0],0x0
  208531:	00 
  208532:	74 48                	je     20857c <Elf_openFile+0x224c>
        errdefer elf.allocator.free(elf.section_headers);
  208534:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  20853b:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  20853f:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  208546:	48 83 c0 38          	add    rax,0x38
  20854a:	48 89 c6             	mov    rsi,rax
  20854d:	e8 0e 28 00 00       	call   20ad60 <Allocator_free>
                const file_end_offset = try math.add(u64, elf_section.offset, elf_section.size);
  208552:	66 8b 85 30 fc ff ff 	mov    ax,WORD PTR [rbp-0x3d0]
  208559:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  208560:	66 89 85 06 f7 ff ff 	mov    WORD PTR [rbp-0x8fa],ax
  208567:	e8 e4 be ff ff       	call   204450 <__zig_return_error>
  20856c:	66 8b 85 06 f7 ff ff 	mov    ax,WORD PTR [rbp-0x8fa]
  208573:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20857a:	5d                   	pop    rbp
  20857b:	c3                   	ret    
  20857c:	48 8b 85 38 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3c8]
  208583:	48 89 85 78 fb ff ff 	mov    QWORD PTR [rbp-0x488],rax
                if (stream_end < file_end_offset) return error.InvalidFormat;
  20858a:	48 8b 85 b0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x450]
  208591:	48 3b 85 78 fb ff ff 	cmp    rax,QWORD PTR [rbp-0x488]
  208598:	73 37                	jae    2085d1 <Elf_openFile+0x22a1>
        errdefer elf.allocator.free(elf.section_headers);
  20859a:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2085a1:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  2085a5:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2085ac:	48 83 c0 38          	add    rax,0x38
  2085b0:	48 89 c6             	mov    rsi,rax
  2085b3:	e8 a8 27 00 00       	call   20ad60 <Allocator_free>
                if (stream_end < file_end_offset) return error.InvalidFormat;
  2085b8:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2085bf:	e8 8c be ff ff       	call   204450 <__zig_return_error>
  2085c4:	66 b8 1f 00          	mov    ax,0x1f
  2085c8:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2085cf:	5d                   	pop    rbp
  2085d0:	c3                   	ret    
  2085d1:	eb 00                	jmp    2085d3 <Elf_openFile+0x22a3>
            if (elf_section.sh_type != SHT_NOBITS) {
  2085d3:	eb 02                	jmp    2085d7 <Elf_openFile+0x22a7>
  2085d5:	eb 00                	jmp    2085d7 <Elf_openFile+0x22a7>
        for (elf.section_headers) |*elf_section| {
  2085d7:	48 8b 85 08 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8f8]
  2085de:	48 83 c0 01          	add    rax,0x1
  2085e2:	48 89 85 80 fb ff ff 	mov    QWORD PTR [rbp-0x480],rax
  2085e9:	e9 c8 fe ff ff       	jmp    2084b6 <Elf_openFile+0x2186>
            }
        }

        elf.string_section = &elf.section_headers[elf.string_section_index];
  2085ee:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2085f5:	48 83 c0 30          	add    rax,0x30
  2085f9:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  208600:	48 89 ca             	mov    rdx,rcx
  208603:	48 83 c2 38          	add    rdx,0x38
  208607:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  20860e:	48 8b 76 28          	mov    rsi,QWORD PTR [rsi+0x28]
  208612:	48 3b 71 40          	cmp    rsi,QWORD PTR [rcx+0x40]
  208616:	48 89 85 f8 f6 ff ff 	mov    QWORD PTR [rbp-0x908],rax
  20861d:	48 89 b5 f0 f6 ff ff 	mov    QWORD PTR [rbp-0x910],rsi
  208624:	48 89 95 e8 f6 ff ff 	mov    QWORD PTR [rbp-0x918],rdx
  20862b:	0f 82 57 01 00 00    	jb     208788 <Elf_openFile+0x2458>
  208631:	e9 42 01 00 00       	jmp    208778 <Elf_openFile+0x2448>
        errdefer elf.allocator.free(elf.section_headers);
  208636:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  20863d:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  208641:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  208648:	48 83 c0 38          	add    rax,0x38
  20864c:	48 89 c6             	mov    rsi,rax
  20864f:	e8 0c 27 00 00       	call   20ad60 <Allocator_free>
        if (elf.string_section.sh_type != SHT_STRTAB) {
            // not a string table
            return error.InvalidFormat;
  208654:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20865b:	e8 f0 bd ff ff       	call   204450 <__zig_return_error>
  208660:	66 b8 1f 00          	mov    ax,0x1f
  208664:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20866b:	5d                   	pop    rbp
  20866c:	c3                   	ret    
  20866d:	31 c0                	xor    eax,eax
  20866f:	66 89 c1             	mov    cx,ax
    pub fn openFile(elf: *Elf, allocator: *mem.Allocator, file: *os.File) !void {
  208672:	66 89 c8             	mov    ax,cx
  208675:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20867c:	5d                   	pop    rbp
  20867d:	c3                   	ret    
  20867e:	48 8d 3d 7b cc 01 00 	lea    rdi,[rip+0x1cc7b]        # 225300 <__unnamed_4>
  208685:	31 c0                	xor    eax,eax
  208687:	89 c6                	mov    esi,eax
        try in.readNoEof(magic[0..]);
  208689:	e8 32 aa ff ff       	call   2030c0 <panic>
  20868e:	48 8d 55 e0          	lea    rdx,[rbp-0x20]
  208692:	48 8d 85 ec fb ff ff 	lea    rax,[rbp-0x414]
  208699:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  20869d:	48 c7 45 e8 04 00 00 	mov    QWORD PTR [rbp-0x18],0x4
  2086a4:	00 
  2086a5:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2086ac:	48 8b b5 68 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x498]
  2086b3:	e8 08 1c 00 00       	call   20a2c0 <InStream(ReadError)_readNoEof>
  2086b8:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  2086bc:	66 83 7d de 00       	cmp    WORD PTR [rbp-0x22],0x0
  2086c1:	0f 85 2a dd ff ff    	jne    2063f1 <Elf_openFile+0xc1>
  2086c7:	e9 4c dd ff ff       	jmp    206418 <Elf_openFile+0xe8>
  2086cc:	48 8d 3d 45 cc 01 00 	lea    rdi,[rip+0x1cc45]        # 225318 <__unnamed_5>
  2086d3:	31 c0                	xor    eax,eax
  2086d5:	89 c6                	mov    esi,eax
        const sh_byte_count = u64(sh_entry_size) * u64(sh_entry_count);
  2086d7:	e8 e4 a9 ff ff       	call   2030c0 <panic>
  2086dc:	48 8d bd 68 fe ff ff 	lea    rdi,[rbp-0x198]
  2086e3:	48 8b 85 a0 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x660]
  2086ea:	48 89 85 d0 fb ff ff 	mov    QWORD PTR [rbp-0x430],rax
        const end_sh = try math.add(u64, elf.section_header_offset, sh_byte_count);
  2086f1:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  2086f8:	48 8b 51 20          	mov    rdx,QWORD PTR [rcx+0x20]
  2086fc:	48 8b 8d d0 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x430]
  208703:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  20870a:	e8 71 22 00 00       	call   20a980 <add>
  20870f:	66 83 bd 68 fe ff ff 	cmp    WORD PTR [rbp-0x198],0x0
  208716:	00 
  208717:	0f 85 2d eb ff ff    	jne    20724a <Elf_openFile+0xf1a>
  20871d:	e9 52 eb ff ff       	jmp    207274 <Elf_openFile+0xf44>
  208722:	48 8d 3d ef cb 01 00 	lea    rdi,[rip+0x1cbef]        # 225318 <__unnamed_5>
  208729:	31 c0                	xor    eax,eax
  20872b:	89 c6                	mov    esi,eax
        const ph_byte_count = u64(ph_entry_size) * u64(ph_entry_count);
  20872d:	e8 8e a9 ff ff       	call   2030c0 <panic>
  208732:	48 8d bd 48 fe ff ff 	lea    rdi,[rbp-0x1b8]
  208739:	48 8b 85 90 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x670]
  208740:	48 89 85 c0 fb ff ff 	mov    QWORD PTR [rbp-0x440],rax
        const end_ph = try math.add(u64, elf.program_header_offset, ph_byte_count);
  208747:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  20874e:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
  208752:	48 8b 8d c0 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x440]
  208759:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  208760:	e8 1b 22 00 00       	call   20a980 <add>
  208765:	66 83 bd 48 fe ff ff 	cmp    WORD PTR [rbp-0x1b8],0x0
  20876c:	00 
  20876d:	0f 85 41 eb ff ff    	jne    2072b4 <Elf_openFile+0xf84>
  208773:	e9 66 eb ff ff       	jmp    2072de <Elf_openFile+0xfae>
  208778:	48 8d 3d 81 cb 01 00 	lea    rdi,[rip+0x1cb81]        # 225300 <__unnamed_4>
  20877f:	31 c0                	xor    eax,eax
  208781:	89 c6                	mov    esi,eax
        elf.string_section = &elf.section_headers[elf.string_section_index];
  208783:	e8 38 a9 ff ff       	call   2030c0 <panic>
  208788:	48 8b 85 f0 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x910]
  20878f:	48 c1 e0 06          	shl    rax,0x6
  208793:	48 8b 8d e8 f6 ff ff 	mov    rcx,QWORD PTR [rbp-0x918]
  20879a:	48 03 01             	add    rax,QWORD PTR [rcx]
  20879d:	48 8b 95 f8 f6 ff ff 	mov    rdx,QWORD PTR [rbp-0x908]
  2087a4:	48 89 02             	mov    QWORD PTR [rdx],rax
        if (elf.string_section.sh_type != SHT_STRTAB) {
  2087a7:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2087ae:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
  2087b2:	83 78 04 03          	cmp    DWORD PTR [rax+0x4],0x3
  2087b6:	0f 85 7a fe ff ff    	jne    208636 <Elf_openFile+0x2306>
  2087bc:	e9 ac fe ff ff       	jmp    20866d <Elf_openFile+0x233d>
  2087c1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2087c8:	0f 1f 84 00 00 00 00 
  2087cf:	00 

00000000002087d0 <File_close>:
    pub fn close(self: *File) void {
  2087d0:	55                   	push   rbp
  2087d1:	48 89 e5             	mov    rbp,rsp
  2087d4:	48 83 ec 10          	sub    rsp,0x10
  2087d8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
        os.close(self.handle);
  2087dc:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  2087e0:	8b 3f                	mov    edi,DWORD PTR [rdi]
  2087e2:	e8 09 35 00 00       	call   20bcf0 <close>
        self.handle = undefined;
  2087e7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2087eb:	89 38                	mov    DWORD PTR [rax],edi
    pub fn close(self: *File) void {
  2087ed:	48 83 c4 10          	add    rsp,0x10
  2087f1:	5d                   	pop    rbp
  2087f2:	c3                   	ret    
  2087f3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2087fa:	84 00 00 00 00 00 

0000000000208800 <Elf_findSection>:
        elf.allocator.free(elf.section_headers);

        if (elf.auto_close_stream) elf.in_file.close();
    }

    pub fn findSection(elf: *Elf, name: []const u8) !?*SectionHeader {
  208800:	55                   	push   rbp
  208801:	48 89 e5             	mov    rbp,rsp
  208804:	48 81 ec 30 01 00 00 	sub    rsp,0x130
  20880b:	48 89 f8             	mov    rax,rdi
  20880e:	4c 8d 45 f0          	lea    r8,[rbp-0x10]
  208812:	48 89 55 80          	mov    QWORD PTR [rbp-0x80],rdx
        var file_stream = io.FileInStream.init(elf.in_file);
  208816:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
  20881a:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
  20881d:	48 89 bd 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rdi
  208824:	4c 89 c7             	mov    rdi,r8
  208827:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  20882e:	48 89 d6             	mov    rsi,rdx
  208831:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
  208838:	48 89 8d 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rcx
  20883f:	e8 4c 1a 00 00       	call   20a290 <FileInStream_init>
  208844:	be aa 00 00 00       	mov    esi,0xaa
  208849:	41 b9 08 00 00 00    	mov    r9d,0x8
  20884f:	44 89 ca             	mov    edx,r9d
  208852:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
  208859:	48 8d 8d 70 ff ff ff 	lea    rcx,[rbp-0x90]
  208860:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  208864:	48 89 bd 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdi
  20886b:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  20886f:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
        const in = &file_stream.stream;
  208876:	48 83 c1 08          	add    rcx,0x8
  20887a:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx

        section_loop: for (elf.section_headers) |*elf_section| {
  208881:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  208885:	48 89 cf             	mov    rdi,rcx
  208888:	48 83 c7 38          	add    rdi,0x38
  20888c:	48 89 bd 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdi
  208893:	48 89 c7             	mov    rdi,rax
  208896:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  20889d:	e8 0e 94 01 00       	call   221cb0 <memset>
  2088a2:	48 c7 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],0x0
  2088a9:	00 00 00 00 
  2088ad:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  2088b4:	48 8b 48 40          	mov    rcx,QWORD PTR [rax+0x40]
  2088b8:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  2088bf:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
  2088c6:	48 8b 8d 00 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x100]
  2088cd:	48 39 c8             	cmp    rax,rcx
  2088d0:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  2088d7:	0f 83 a6 02 00 00    	jae    208b83 <Elf_findSection+0x383>
  2088dd:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  2088e4:	48 c1 e0 06          	shl    rax,0x6
  2088e8:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  2088ef:	48 03 01             	add    rax,QWORD PTR [rcx]
  2088f2:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
            if (elf_section.sh_type == SHT_NULL) continue;
  2088f9:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  208900:	83 78 04 00          	cmp    DWORD PTR [rax+0x4],0x0
  208904:	75 05                	jne    20890b <Elf_findSection+0x10b>
  208906:	e9 61 02 00 00       	jmp    208b6c <Elf_findSection+0x36c>
  20890b:	eb 00                	jmp    20890d <Elf_findSection+0x10d>

            const name_offset = elf.string_section.offset + elf_section.name;
  20890d:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  208911:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
  208915:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  208919:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  208920:	8b 11                	mov    edx,DWORD PTR [rcx]
  208922:	89 d1                	mov    ecx,edx
  208924:	48 01 c8             	add    rax,rcx
  208927:	40 0f 92 c6          	setb   sil
  20892b:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  208932:	40 88 b5 ef fe ff ff 	mov    BYTE PTR [rbp-0x111],sil
  208939:	0f 82 70 02 00 00    	jb     208baf <Elf_findSection+0x3af>
  20893f:	e9 7b 02 00 00       	jmp    208bbf <Elf_findSection+0x3bf>
            try elf.in_file.seekTo(name_offset);
  208944:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  208948:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  20894f:	66 89 85 ec fe ff ff 	mov    WORD PTR [rbp-0x114],ax
  208956:	e8 f5 ba ff ff       	call   204450 <__zig_return_error>
  20895b:	66 8b 85 ec fe ff ff 	mov    ax,WORD PTR [rbp-0x114]
  208962:	66 89 45 d8          	mov    WORD PTR [rbp-0x28],ax
  208966:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  20896a:	48 8b 8d 30 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd0]
  208971:	48 89 39             	mov    QWORD PTR [rcx],rdi
  208974:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  208978:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  20897c:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  208983:	48 81 c4 30 01 00 00 	add    rsp,0x130
  20898a:	5d                   	pop    rbp
  20898b:	c3                   	ret    
  20898c:	48 8d bd 4f ff ff ff 	lea    rdi,[rbp-0xb1]
  208993:	be aa 00 00 00       	mov    esi,0xaa
  208998:	b8 01 00 00 00       	mov    eax,0x1
  20899d:	89 c2                	mov    edx,eax

            for (name) |expected_c| {
  20899f:	e8 0c 93 01 00       	call   221cb0 <memset>
  2089a4:	48 c7 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],0x0
  2089ab:	00 00 00 00 
  2089af:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  2089b6:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
  2089ba:	48 89 bd e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rdi
  2089c1:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  2089c8:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  2089cf:	48 39 c8             	cmp    rax,rcx
  2089d2:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
  2089d9:	0f 83 dc 00 00 00    	jae    208abb <Elf_findSection+0x2bb>
  2089df:	48 8d 7d d0          	lea    rdi,[rbp-0x30]
  2089e3:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  2089ea:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  2089ed:	48 8b 95 d8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x128]
  2089f4:	40 8a 34 11          	mov    sil,BYTE PTR [rcx+rdx*1]
  2089f8:	40 88 b5 4f ff ff ff 	mov    BYTE PTR [rbp-0xb1],sil
                const target_c = try in.readByte();
  2089ff:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  208a06:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  208a0d:	e8 2e 1a 00 00       	call   20a440 <InStream(ReadError)_readByte>
  208a12:	66 83 7d d0 00       	cmp    WORD PTR [rbp-0x30],0x0
  208a17:	74 48                	je     208a61 <Elf_findSection+0x261>
  208a19:	66 8b 45 d0          	mov    ax,WORD PTR [rbp-0x30]
  208a1d:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  208a24:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  208a2b:	e8 20 ba ff ff       	call   204450 <__zig_return_error>
  208a30:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [rbp-0x12a]
  208a37:	66 89 45 b8          	mov    WORD PTR [rbp-0x48],ax
  208a3b:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  208a3f:	48 8b 8d 30 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd0]
  208a46:	48 89 39             	mov    QWORD PTR [rcx],rdi
  208a49:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  208a4d:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  208a51:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  208a58:	48 81 c4 30 01 00 00 	add    rsp,0x130
  208a5f:	5d                   	pop    rbp
  208a60:	c3                   	ret    
  208a61:	8a 45 d2             	mov    al,BYTE PTR [rbp-0x2e]
  208a64:	88 85 3f ff ff ff    	mov    BYTE PTR [rbp-0xc1],al
                if (target_c == 0 or expected_c != target_c) continue :section_loop;
  208a6a:	80 bd 3f ff ff ff 00 	cmp    BYTE PTR [rbp-0xc1],0x0
  208a71:	0f 94 c0             	sete   al
  208a74:	a8 01                	test   al,0x1
  208a76:	88 85 d5 fe ff ff    	mov    BYTE PTR [rbp-0x12b],al
  208a7c:	75 15                	jne    208a93 <Elf_findSection+0x293>
  208a7e:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [rbp-0xb1]
  208a84:	3a 85 3f ff ff ff    	cmp    al,BYTE PTR [rbp-0xc1]
  208a8a:	0f 95 c0             	setne  al
  208a8d:	88 85 d5 fe ff ff    	mov    BYTE PTR [rbp-0x12b],al
  208a93:	8a 85 d5 fe ff ff    	mov    al,BYTE PTR [rbp-0x12b]
  208a99:	a8 01                	test   al,0x1
  208a9b:	75 02                	jne    208a9f <Elf_findSection+0x29f>
  208a9d:	eb 05                	jmp    208aa4 <Elf_findSection+0x2a4>
  208a9f:	e9 c8 00 00 00       	jmp    208b6c <Elf_findSection+0x36c>
            for (name) |expected_c| {
  208aa4:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  208aab:	48 83 c0 01          	add    rax,0x1
  208aaf:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  208ab6:	e9 06 ff ff ff       	jmp    2089c1 <Elf_findSection+0x1c1>
  208abb:	48 8d 7d b0          	lea    rdi,[rbp-0x50]
            }

            {
                const null_byte = try in.readByte();
  208abf:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  208ac6:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  208acd:	e8 6e 19 00 00       	call   20a440 <InStream(ReadError)_readByte>
  208ad2:	66 83 7d b0 00       	cmp    WORD PTR [rbp-0x50],0x0
  208ad7:	74 48                	je     208b21 <Elf_findSection+0x321>
  208ad9:	66 8b 45 b0          	mov    ax,WORD PTR [rbp-0x50]
  208add:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  208ae4:	66 89 85 d2 fe ff ff 	mov    WORD PTR [rbp-0x12e],ax
  208aeb:	e8 60 b9 ff ff       	call   204450 <__zig_return_error>
  208af0:	66 8b 85 d2 fe ff ff 	mov    ax,WORD PTR [rbp-0x12e]
  208af7:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  208afb:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  208aff:	48 8b 8d 30 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd0]
  208b06:	48 89 39             	mov    QWORD PTR [rcx],rdi
  208b09:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  208b0d:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  208b11:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  208b18:	48 81 c4 30 01 00 00 	add    rsp,0x130
  208b1f:	5d                   	pop    rbp
  208b20:	c3                   	ret    
  208b21:	8a 45 b2             	mov    al,BYTE PTR [rbp-0x4e]
  208b24:	88 85 3e ff ff ff    	mov    BYTE PTR [rbp-0xc2],al
                if (null_byte == 0) return elf_section;
  208b2a:	80 bd 3e ff ff ff 00 	cmp    BYTE PTR [rbp-0xc2],0x0
  208b31:	75 37                	jne    208b6a <Elf_findSection+0x36a>
  208b33:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  208b3a:	66 c7 45 88 00 00    	mov    WORD PTR [rbp-0x78],0x0
  208b40:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  208b44:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  208b48:	48 8b 8d 30 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd0]
  208b4f:	48 89 01             	mov    QWORD PTR [rcx],rax
  208b52:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  208b56:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  208b5a:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  208b61:	48 81 c4 30 01 00 00 	add    rsp,0x130
  208b68:	5d                   	pop    rbp
  208b69:	c3                   	ret    
        section_loop: for (elf.section_headers) |*elf_section| {
  208b6a:	eb 00                	jmp    208b6c <Elf_findSection+0x36c>
  208b6c:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  208b73:	48 83 c0 01          	add    rax,0x1
  208b77:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  208b7e:	e9 3c fd ff ff       	jmp    2088bf <Elf_findSection+0xbf>
            }
        }

        return null;
  208b83:	48 8b 05 36 97 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff9736]        # 2022c0 <__unnamed_123>
  208b8a:	48 8b 8d 30 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd0]
  208b91:	48 89 01             	mov    QWORD PTR [rcx],rax
  208b94:	48 8b 05 2d 97 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff972d]        # 2022c8 <__unnamed_123+0x8>
  208b9b:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  208b9f:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  208ba6:	48 81 c4 30 01 00 00 	add    rsp,0x130
  208bad:	5d                   	pop    rbp
  208bae:	c3                   	ret    
  208baf:	48 8d 3d 62 c7 01 00 	lea    rdi,[rip+0x1c762]        # 225318 <__unnamed_5>
  208bb6:	31 c0                	xor    eax,eax
  208bb8:	89 c6                	mov    esi,eax
            const name_offset = elf.string_section.offset + elf_section.name;
  208bba:	e8 01 a5 ff ff       	call   2030c0 <panic>
  208bbf:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  208bc6:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
            try elf.in_file.seekTo(name_offset);
  208bcd:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  208bd1:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  208bd4:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
  208bdb:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  208be2:	e8 89 1f 00 00       	call   20ab70 <File_seekTo>
  208be7:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  208beb:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  208bf0:	0f 85 4e fd ff ff    	jne    208944 <Elf_findSection+0x144>
  208bf6:	e9 91 fd ff ff       	jmp    20898c <Elf_findSection+0x18c>
  208bfb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000208c00 <Elf_close>:
    pub fn close(elf: *Elf) void {
  208c00:	55                   	push   rbp
  208c01:	48 89 e5             	mov    rbp,rsp
  208c04:	48 83 ec 10          	sub    rsp,0x10
  208c08:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
        elf.allocator.free(elf.section_headers);
  208c0c:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  208c10:	48 8b 7f 48          	mov    rdi,QWORD PTR [rdi+0x48]
  208c14:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  208c18:	48 83 c0 38          	add    rax,0x38
  208c1c:	48 89 c6             	mov    rsi,rax
  208c1f:	e8 3c 21 00 00       	call   20ad60 <Allocator_free>
        if (elf.auto_close_stream) elf.in_file.close();
  208c24:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  208c28:	f6 40 08 01          	test   BYTE PTR [rax+0x8],0x1
  208c2c:	75 02                	jne    208c30 <Elf_close+0x30>
  208c2e:	eb 0e                	jmp    208c3e <Elf_close+0x3e>
  208c30:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  208c34:	48 8b 38             	mov    rdi,QWORD PTR [rax]
  208c37:	e8 94 fb ff ff       	call   2087d0 <File_close>
  208c3c:	eb 02                	jmp    208c40 <Elf_close+0x40>
  208c3e:	eb 00                	jmp    208c40 <Elf_close+0x40>
    pub fn close(elf: *Elf) void {
  208c40:	48 83 c4 10          	add    rsp,0x10
  208c44:	5d                   	pop    rbp
  208c45:	c3                   	ret    
  208c46:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  208c4d:	00 00 00 

0000000000208c50 <scanAllCompileUnits>:
fn scanAllCompileUnits(st: *ElfStackTrace) !void {
  208c50:	55                   	push   rbp
  208c51:	48 89 e5             	mov    rbp,rsp
  208c54:	48 81 ec f0 03 00 00 	sub    rsp,0x3f0
  208c5b:	48 89 b5 e8 fd ff ff 	mov    QWORD PTR [rbp-0x218],rsi
    const debug_info_end = st.debug_info.offset + st.debug_info.size;
  208c62:	48 8b b5 e8 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x218]
  208c69:	48 8b 76 60          	mov    rsi,QWORD PTR [rsi+0x60]
  208c6d:	48 8b 76 18          	mov    rsi,QWORD PTR [rsi+0x18]
  208c71:	48 8b 85 e8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x218]
  208c78:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
  208c7c:	48 03 70 20          	add    rsi,QWORD PTR [rax+0x20]
  208c80:	0f 92 c1             	setb   cl
  208c83:	48 89 bd 08 fd ff ff 	mov    QWORD PTR [rbp-0x2f8],rdi
  208c8a:	48 89 b5 00 fd ff ff 	mov    QWORD PTR [rbp-0x300],rsi
  208c91:	88 8d ff fc ff ff    	mov    BYTE PTR [rbp-0x301],cl
  208c97:	0f 82 d7 08 00 00    	jb     209574 <scanAllCompileUnits+0x924>
  208c9d:	e9 e2 08 00 00       	jmp    209584 <scanAllCompileUnits+0x934>
    while (this_unit_offset < debug_info_end) {
  208ca2:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
  208ca9:	48 3b 85 e0 fd ff ff 	cmp    rax,QWORD PTR [rbp-0x220]
  208cb0:	0f 83 ad 08 00 00    	jae    209563 <scanAllCompileUnits+0x913>
        try st.self_exe_file.seekTo(this_unit_offset);
  208cb6:	48 8b b5 e8 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x218]
  208cbd:	48 8b 95 d8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x228]
  208cc4:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  208ccb:	e8 a0 1e 00 00       	call   20ab70 <File_seekTo>
  208cd0:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  208cd4:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  208cd9:	74 27                	je     208d02 <scanAllCompileUnits+0xb2>
  208cdb:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  208cdf:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  208ce6:	66 89 85 fc fc ff ff 	mov    WORD PTR [rbp-0x304],ax
  208ced:	e8 5e b7 ff ff       	call   204450 <__zig_return_error>
  208cf2:	66 8b 85 fc fc ff ff 	mov    ax,WORD PTR [rbp-0x304]
  208cf9:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  208d00:	5d                   	pop    rbp
  208d01:	c3                   	ret    
  208d02:	48 8d 7d d8          	lea    rdi,[rbp-0x28]
  208d06:	48 8d 85 b7 fd ff ff 	lea    rax,[rbp-0x249]
  208d0d:	be aa 00 00 00       	mov    esi,0xaa
  208d12:	b9 01 00 00 00       	mov    ecx,0x1
  208d17:	89 ca                	mov    edx,ecx
        var is_64: bool = undefined;
  208d19:	49 89 c0             	mov    r8,rax
  208d1c:	48 89 bd f0 fc ff ff 	mov    QWORD PTR [rbp-0x310],rdi
  208d23:	4c 89 c7             	mov    rdi,r8
  208d26:	48 89 85 e8 fc ff ff 	mov    QWORD PTR [rbp-0x318],rax
  208d2d:	e8 7e 8f 01 00       	call   221cb0 <memset>
        const unit_length = try readInitialLength(@typeOf(in_stream.readFn).ReturnType.ErrorSet, in_stream, &is_64);
  208d32:	48 8b 95 b8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x248]
  208d39:	48 8b bd f0 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x310]
  208d40:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  208d47:	48 8b 8d e8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x318]
  208d4e:	e8 7d 30 00 00       	call   20bdd0 <readInitialLength>
  208d53:	66 83 7d d8 00       	cmp    WORD PTR [rbp-0x28],0x0
  208d58:	74 27                	je     208d81 <scanAllCompileUnits+0x131>
  208d5a:	66 8b 45 d8          	mov    ax,WORD PTR [rbp-0x28]
  208d5e:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  208d65:	66 89 85 e6 fc ff ff 	mov    WORD PTR [rbp-0x31a],ax
  208d6c:	e8 df b6 ff ff       	call   204450 <__zig_return_error>
  208d71:	66 8b 85 e6 fc ff ff 	mov    ax,WORD PTR [rbp-0x31a]
  208d78:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  208d7f:	5d                   	pop    rbp
  208d80:	c3                   	ret    
  208d81:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  208d85:	48 89 85 a8 fd ff ff 	mov    QWORD PTR [rbp-0x258],rax
        if (unit_length == 0) return;
  208d8c:	48 83 bd a8 fd ff ff 	cmp    QWORD PTR [rbp-0x258],0x0
  208d93:	00 
  208d94:	75 11                	jne    208da7 <scanAllCompileUnits+0x157>
  208d96:	31 c0                	xor    eax,eax
  208d98:	66 89 c1             	mov    cx,ax
  208d9b:	66 89 c8             	mov    ax,cx
  208d9e:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  208da5:	5d                   	pop    rbp
  208da6:	c3                   	ret    
  208da7:	eb 00                	jmp    208da9 <scanAllCompileUnits+0x159>
        const next_offset = unit_length + (if (is_64) usize(12) else usize(4));
  208da9:	48 8b 85 a8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x258]
  208db0:	f6 85 b7 fd ff ff 01 	test   BYTE PTR [rbp-0x249],0x1
  208db7:	48 89 85 d8 fc ff ff 	mov    QWORD PTR [rbp-0x328],rax
  208dbe:	75 02                	jne    208dc2 <scanAllCompileUnits+0x172>
  208dc0:	eb 10                	jmp    208dd2 <scanAllCompileUnits+0x182>
  208dc2:	b8 0c 00 00 00       	mov    eax,0xc
  208dc7:	89 c1                	mov    ecx,eax
  208dc9:	48 89 8d d0 fc ff ff 	mov    QWORD PTR [rbp-0x330],rcx
  208dd0:	eb 10                	jmp    208de2 <scanAllCompileUnits+0x192>
  208dd2:	b8 04 00 00 00       	mov    eax,0x4
  208dd7:	89 c1                	mov    ecx,eax
  208dd9:	48 89 8d d0 fc ff ff 	mov    QWORD PTR [rbp-0x330],rcx
  208de0:	eb 00                	jmp    208de2 <scanAllCompileUnits+0x192>
  208de2:	48 8b 85 d0 fc ff ff 	mov    rax,QWORD PTR [rbp-0x330]
  208de9:	48 8b 8d d8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x328]
  208df0:	48 01 c1             	add    rcx,rax
  208df3:	0f 92 c2             	setb   dl
  208df6:	48 89 8d c8 fc ff ff 	mov    QWORD PTR [rbp-0x338],rcx
  208dfd:	88 95 c7 fc ff ff    	mov    BYTE PTR [rbp-0x339],dl
  208e03:	0f 82 e7 07 00 00    	jb     2095f0 <scanAllCompileUnits+0x9a0>
  208e09:	e9 f2 07 00 00       	jmp    209600 <scanAllCompileUnits+0x9b0>
        const version = try in_stream.readInt(st.elf.endian, u16);
  208e0e:	66 8b 45 c0          	mov    ax,WORD PTR [rbp-0x40]
  208e12:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  208e19:	66 89 85 c4 fc ff ff 	mov    WORD PTR [rbp-0x33c],ax
  208e20:	e8 2b b6 ff ff       	call   204450 <__zig_return_error>
  208e25:	66 8b 85 c4 fc ff ff 	mov    ax,WORD PTR [rbp-0x33c]
  208e2c:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  208e33:	5d                   	pop    rbp
  208e34:	c3                   	ret    
  208e35:	66 8b 45 c2          	mov    ax,WORD PTR [rbp-0x3e]
  208e39:	66 89 85 9e fd ff ff 	mov    WORD PTR [rbp-0x262],ax
        if (version < 2 or version > 5) return error.InvalidDebugInfo;
  208e40:	66 83 bd 9e fd ff ff 	cmp    WORD PTR [rbp-0x262],0x2
  208e47:	02 
  208e48:	0f 92 c1             	setb   cl
  208e4b:	f6 c1 01             	test   cl,0x1
  208e4e:	88 8d c3 fc ff ff    	mov    BYTE PTR [rbp-0x33d],cl
  208e54:	75 11                	jne    208e67 <scanAllCompileUnits+0x217>
  208e56:	66 83 bd 9e fd ff ff 	cmp    WORD PTR [rbp-0x262],0x5
  208e5d:	05 
  208e5e:	0f 97 c0             	seta   al
  208e61:	88 85 c3 fc ff ff    	mov    BYTE PTR [rbp-0x33d],al
  208e67:	8a 85 c3 fc ff ff    	mov    al,BYTE PTR [rbp-0x33d]
  208e6d:	a8 01                	test   al,0x1
  208e6f:	75 02                	jne    208e73 <scanAllCompileUnits+0x223>
  208e71:	eb 19                	jmp    208e8c <scanAllCompileUnits+0x23c>
  208e73:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  208e7a:	e8 d1 b5 ff ff       	call   204450 <__zig_return_error>
  208e7f:	66 b8 23 00          	mov    ax,0x23
  208e83:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  208e8a:	5d                   	pop    rbp
  208e8b:	c3                   	ret    
  208e8c:	eb 00                	jmp    208e8e <scanAllCompileUnits+0x23e>
        const debug_abbrev_offset = if (is_64) try in_stream.readInt(st.elf.endian, u64) else try in_stream.readInt(st.elf.endian, u32);
  208e8e:	f6 85 b7 fd ff ff 01 	test   BYTE PTR [rbp-0x249],0x1
  208e95:	75 02                	jne    208e99 <scanAllCompileUnits+0x249>
  208e97:	eb 6c                	jmp    208f05 <scanAllCompileUnits+0x2b5>
  208e99:	48 8d 45 a8          	lea    rax,[rbp-0x58]
  208e9d:	48 8b 95 b8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x248]
  208ea4:	48 8b 8d e8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x218]
  208eab:	40 8a 71 12          	mov    sil,BYTE PTR [rcx+0x12]
  208eaf:	40 0f b6 ce          	movzx  ecx,sil
  208eb3:	48 8d 7d a8          	lea    rdi,[rbp-0x58]
  208eb7:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  208ebe:	48 89 85 b8 fc ff ff 	mov    QWORD PTR [rbp-0x348],rax
  208ec5:	e8 86 19 00 00       	call   20a850 <InStream(ReadError)_readInt.16>
  208eca:	66 83 7d a8 00       	cmp    WORD PTR [rbp-0x58],0x0
  208ecf:	74 27                	je     208ef8 <scanAllCompileUnits+0x2a8>
  208ed1:	66 8b 45 a8          	mov    ax,WORD PTR [rbp-0x58]
  208ed5:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  208edc:	66 89 85 b6 fc ff ff 	mov    WORD PTR [rbp-0x34a],ax
  208ee3:	e8 68 b5 ff ff       	call   204450 <__zig_return_error>
  208ee8:	66 8b 85 b6 fc ff ff 	mov    ax,WORD PTR [rbp-0x34a]
  208eef:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  208ef6:	5d                   	pop    rbp
  208ef7:	c3                   	ret    
  208ef8:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  208efc:	48 89 85 a8 fc ff ff 	mov    QWORD PTR [rbp-0x358],rax
  208f03:	eb 6b                	jmp    208f70 <scanAllCompileUnits+0x320>
  208f05:	48 8d 45 90          	lea    rax,[rbp-0x70]
  208f09:	48 8b 95 b8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x248]
  208f10:	48 8b 8d e8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x218]
  208f17:	40 8a 71 12          	mov    sil,BYTE PTR [rcx+0x12]
  208f1b:	40 0f b6 ce          	movzx  ecx,sil
  208f1f:	48 8d 7d 90          	lea    rdi,[rbp-0x70]
  208f23:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  208f2a:	48 89 85 a0 fc ff ff 	mov    QWORD PTR [rbp-0x360],rax
  208f31:	e8 0a 18 00 00       	call   20a740 <InStream(ReadError)_readInt.15>
  208f36:	66 83 7d 90 00       	cmp    WORD PTR [rbp-0x70],0x0
  208f3b:	74 27                	je     208f64 <scanAllCompileUnits+0x314>
  208f3d:	66 8b 45 90          	mov    ax,WORD PTR [rbp-0x70]
  208f41:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  208f48:	66 89 85 9e fc ff ff 	mov    WORD PTR [rbp-0x362],ax
  208f4f:	e8 fc b4 ff ff       	call   204450 <__zig_return_error>
  208f54:	66 8b 85 9e fc ff ff 	mov    ax,WORD PTR [rbp-0x362]
  208f5b:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  208f62:	5d                   	pop    rbp
  208f63:	c3                   	ret    
  208f64:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
  208f67:	89 c1                	mov    ecx,eax
  208f69:	48 89 8d a8 fc ff ff 	mov    QWORD PTR [rbp-0x358],rcx
  208f70:	48 8b 85 a8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x358]
  208f77:	48 8d 7d 80          	lea    rdi,[rbp-0x80]
  208f7b:	48 89 85 90 fd ff ff 	mov    QWORD PTR [rbp-0x270],rax
        const address_size = try in_stream.readByte();
  208f82:	48 8b 95 b8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x248]
  208f89:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  208f90:	e8 ab 14 00 00       	call   20a440 <InStream(ReadError)_readByte>
  208f95:	66 83 7d 80 00       	cmp    WORD PTR [rbp-0x80],0x0
  208f9a:	74 27                	je     208fc3 <scanAllCompileUnits+0x373>
  208f9c:	66 8b 45 80          	mov    ax,WORD PTR [rbp-0x80]
  208fa0:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  208fa7:	66 89 85 9c fc ff ff 	mov    WORD PTR [rbp-0x364],ax
  208fae:	e8 9d b4 ff ff       	call   204450 <__zig_return_error>
  208fb3:	66 8b 85 9c fc ff ff 	mov    ax,WORD PTR [rbp-0x364]
  208fba:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  208fc1:	5d                   	pop    rbp
  208fc2:	c3                   	ret    
  208fc3:	8a 45 82             	mov    al,BYTE PTR [rbp-0x7e]
  208fc6:	88 85 8f fd ff ff    	mov    BYTE PTR [rbp-0x271],al
        if (address_size != @sizeOf(usize)) return error.InvalidDebugInfo;
  208fcc:	80 bd 8f fd ff ff 08 	cmp    BYTE PTR [rbp-0x271],0x8
  208fd3:	74 19                	je     208fee <scanAllCompileUnits+0x39e>
  208fd5:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  208fdc:	e8 6f b4 ff ff       	call   204450 <__zig_return_error>
  208fe1:	66 b8 23 00          	mov    ax,0x23
  208fe5:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  208fec:	5d                   	pop    rbp
  208fed:	c3                   	ret    
  208fee:	eb 00                	jmp    208ff0 <scanAllCompileUnits+0x3a0>
  208ff0:	48 8d bd 68 ff ff ff 	lea    rdi,[rbp-0x98]
        const compile_unit_pos = try st.self_exe_file.getPos();
  208ff7:	48 8b 95 e8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x218]
  208ffe:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  209005:	e8 06 2f 00 00       	call   20bf10 <File_getPos>
  20900a:	66 83 bd 68 ff ff ff 	cmp    WORD PTR [rbp-0x98],0x0
  209011:	00 
  209012:	74 2a                	je     20903e <scanAllCompileUnits+0x3ee>
  209014:	66 8b 85 68 ff ff ff 	mov    ax,WORD PTR [rbp-0x98]
  20901b:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  209022:	66 89 85 9a fc ff ff 	mov    WORD PTR [rbp-0x366],ax
  209029:	e8 22 b4 ff ff       	call   204450 <__zig_return_error>
  20902e:	66 8b 85 9a fc ff ff 	mov    ax,WORD PTR [rbp-0x366]
  209035:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  20903c:	5d                   	pop    rbp
  20903d:	c3                   	ret    
  20903e:	48 8d bd 48 ff ff ff 	lea    rdi,[rbp-0xb8]
  209045:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  20904c:	48 89 85 80 fd ff ff 	mov    QWORD PTR [rbp-0x280],rax
        const abbrev_table = try getAbbrevTable(st, debug_abbrev_offset);
  209053:	48 8b 95 e8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x218]
  20905a:	48 8b 8d 90 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x270]
  209061:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  209068:	e8 23 30 00 00       	call   20c090 <getAbbrevTable>
  20906d:	66 83 bd 48 ff ff ff 	cmp    WORD PTR [rbp-0xb8],0x0
  209074:	00 
  209075:	74 2a                	je     2090a1 <scanAllCompileUnits+0x451>
  209077:	66 8b 85 48 ff ff ff 	mov    ax,WORD PTR [rbp-0xb8]
  20907e:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  209085:	66 89 85 98 fc ff ff 	mov    WORD PTR [rbp-0x368],ax
  20908c:	e8 bf b3 ff ff       	call   204450 <__zig_return_error>
  209091:	66 8b 85 98 fc ff ff 	mov    ax,WORD PTR [rbp-0x368]
  209098:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  20909f:	5d                   	pop    rbp
  2090a0:	c3                   	ret    
  2090a1:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  2090a8:	48 89 85 78 fd ff ff 	mov    QWORD PTR [rbp-0x288],rax
        try st.self_exe_file.seekTo(compile_unit_pos);
  2090af:	48 8b b5 e8 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x218]
  2090b6:	48 8b 95 80 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x280]
  2090bd:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  2090c4:	e8 a7 1a 00 00       	call   20ab70 <File_seekTo>
  2090c9:	66 89 85 36 ff ff ff 	mov    WORD PTR [rbp-0xca],ax
  2090d0:	66 83 bd 36 ff ff ff 	cmp    WORD PTR [rbp-0xca],0x0
  2090d7:	00 
  2090d8:	74 2a                	je     209104 <scanAllCompileUnits+0x4b4>
  2090da:	66 8b 85 36 ff ff ff 	mov    ax,WORD PTR [rbp-0xca]
  2090e1:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  2090e8:	66 89 85 96 fc ff ff 	mov    WORD PTR [rbp-0x36a],ax
  2090ef:	e8 5c b3 ff ff       	call   204450 <__zig_return_error>
  2090f4:	66 8b 85 96 fc ff ff 	mov    ax,WORD PTR [rbp-0x36a]
  2090fb:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  209102:	5d                   	pop    rbp
  209103:	c3                   	ret    
        const compile_unit_die = try st.allocator().create(try parseDie(st, abbrev_table, is_64));
  209104:	48 8b bd e8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x218]
  20910b:	e8 70 33 00 00       	call   20c480 <ElfStackTrace_allocator>
  209110:	48 8d bd f0 fe ff ff 	lea    rdi,[rbp-0x110]
  209117:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  20911e:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
  209125:	48 8b 85 e8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x218]
  20912c:	48 8b 8d 78 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x288]
  209133:	40 8a b5 b7 fd ff ff 	mov    sil,BYTE PTR [rbp-0x249]
  20913a:	44 0f b6 c6          	movzx  r8d,sil
  20913e:	4c 8d 8d f0 fe ff ff 	lea    r9,[rbp-0x110]
  209145:	48 89 bd 88 fc ff ff 	mov    QWORD PTR [rbp-0x378],rdi
  20914c:	4c 89 cf             	mov    rdi,r9
  20914f:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  209156:	48 89 95 80 fc ff ff 	mov    QWORD PTR [rbp-0x380],rdx
  20915d:	48 89 c2             	mov    rdx,rax
  209160:	e8 3b 33 00 00       	call   20c4a0 <parseDie>
  209165:	66 83 bd f0 fe ff ff 	cmp    WORD PTR [rbp-0x110],0x0
  20916c:	00 
  20916d:	74 2a                	je     209199 <scanAllCompileUnits+0x549>
  20916f:	66 8b 85 f0 fe ff ff 	mov    ax,WORD PTR [rbp-0x110]
  209176:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  20917d:	66 89 85 7e fc ff ff 	mov    WORD PTR [rbp-0x382],ax
  209184:	e8 c7 b2 ff ff       	call   204450 <__zig_return_error>
  209189:	66 8b 85 7e fc ff ff 	mov    ax,WORD PTR [rbp-0x382]
  209190:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  209197:	5d                   	pop    rbp
  209198:	c3                   	ret    
  209199:	48 8d bd a8 fe ff ff 	lea    rdi,[rbp-0x158]
  2091a0:	48 8d 85 f0 fe ff ff 	lea    rax,[rbp-0x110]
  2091a7:	48 83 c0 08          	add    rax,0x8
  2091ab:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  2091b2:	48 8b 95 80 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x380]
  2091b9:	48 89 c1             	mov    rcx,rax
  2091bc:	e8 9f 38 00 00       	call   20ca60 <Allocator_create.20>
  2091c1:	66 83 bd a8 fe ff ff 	cmp    WORD PTR [rbp-0x158],0x0
  2091c8:	00 
  2091c9:	74 2a                	je     2091f5 <scanAllCompileUnits+0x5a5>
  2091cb:	66 8b 85 a8 fe ff ff 	mov    ax,WORD PTR [rbp-0x158]
  2091d2:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  2091d9:	66 89 85 7c fc ff ff 	mov    WORD PTR [rbp-0x384],ax
  2091e0:	e8 6b b2 ff ff       	call   204450 <__zig_return_error>
  2091e5:	66 8b 85 7c fc ff ff 	mov    ax,WORD PTR [rbp-0x384]
  2091ec:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  2091f3:	5d                   	pop    rbp
  2091f4:	c3                   	ret    
  2091f5:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  2091fc:	48 89 85 70 fd ff ff 	mov    QWORD PTR [rbp-0x290],rax
        if (compile_unit_die.tag_id != DW.TAG_compile_unit) return error.InvalidDebugInfo;
  209203:	48 8b 85 70 fd ff ff 	mov    rax,QWORD PTR [rbp-0x290]
  20920a:	48 83 38 11          	cmp    QWORD PTR [rax],0x11
  20920e:	74 19                	je     209229 <scanAllCompileUnits+0x5d9>
  209210:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  209217:	e8 34 b2 ff ff       	call   204450 <__zig_return_error>
  20921c:	66 b8 23 00          	mov    ax,0x23
  209220:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  209227:	5d                   	pop    rbp
  209228:	c3                   	ret    
  209229:	eb 00                	jmp    20922b <scanAllCompileUnits+0x5db>
  20922b:	48 8d bd 88 fe ff ff 	lea    rdi,[rbp-0x178]
  209232:	b8 11 00 00 00       	mov    eax,0x11
  209237:	89 c1                	mov    ecx,eax
            if (compile_unit_die.getAttrAddr(DW.AT_low_pc)) |low_pc| {
  209239:	48 8b 95 70 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x290]
  209240:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  209247:	e8 24 39 00 00       	call   20cb70 <Die_getAttrAddr>
  20924c:	66 83 bd 88 fe ff ff 	cmp    WORD PTR [rbp-0x178],0x0
  209253:	00 
  209254:	0f 85 a1 01 00 00    	jne    2093fb <scanAllCompileUnits+0x7ab>
  20925a:	b8 12 00 00 00       	mov    eax,0x12
  20925f:	89 c6                	mov    esi,eax
  209261:	48 8b 8d 90 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x170]
  209268:	48 89 8d 68 fd ff ff 	mov    QWORD PTR [rbp-0x298],rcx
                if (compile_unit_die.getAttr(DW.AT_high_pc)) |high_pc_value| {
  20926f:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  209276:	e8 15 3a 00 00       	call   20cc90 <Die_getAttr>
  20927b:	48 89 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rax
  209282:	48 83 bd 70 fe ff ff 	cmp    QWORD PTR [rbp-0x190],0x0
  209289:	00 
  20928a:	0f 84 5b 01 00 00    	je     2093eb <scanAllCompileUnits+0x79b>
  209290:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  209297:	48 89 85 60 fd ff ff 	mov    QWORD PTR [rbp-0x2a0],rax
                    const pc_end = switch (high_pc_value.*) {
  20929e:	48 8b 85 60 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2a0]
  2092a5:	8a 48 18             	mov    cl,BYTE PTR [rax+0x18]
  2092a8:	84 c9                	test   cl,cl
  2092aa:	48 89 85 70 fc ff ff 	mov    QWORD PTR [rbp-0x390],rax
  2092b1:	88 8d 6f fc ff ff    	mov    BYTE PTR [rbp-0x391],cl
  2092b7:	74 2f                	je     2092e8 <scanAllCompileUnits+0x698>
  2092b9:	eb 00                	jmp    2092bb <scanAllCompileUnits+0x66b>
  2092bb:	8a 85 6f fc ff ff    	mov    al,BYTE PTR [rbp-0x391]
  2092c1:	24 0f                	and    al,0xf
  2092c3:	2c 02                	sub    al,0x2
  2092c5:	88 85 6e fc ff ff    	mov    BYTE PTR [rbp-0x392],al
  2092cb:	74 32                	je     2092ff <scanAllCompileUnits+0x6af>
  2092cd:	eb 00                	jmp    2092cf <scanAllCompileUnits+0x67f>
                        else => return error.InvalidDebugInfo,
  2092cf:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  2092d6:	e8 75 b1 ff ff       	call   204450 <__zig_return_error>
  2092db:	66 b8 23 00          	mov    ax,0x23
  2092df:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  2092e6:	5d                   	pop    rbp
  2092e7:	c3                   	ret    
                        FormValue.Address => |value| value,
  2092e8:	48 8b 85 70 fc ff ff 	mov    rax,QWORD PTR [rbp-0x390]
  2092ef:	8a 48 18             	mov    cl,BYTE PTR [rax+0x18]
  2092f2:	84 c9                	test   cl,cl
  2092f4:	0f 84 55 03 00 00    	je     20964f <scanAllCompileUnits+0x9ff>
  2092fa:	e9 74 03 00 00       	jmp    209673 <scanAllCompileUnits+0xa23>
                        FormValue.Const => |value| b: {
  2092ff:	48 8b 85 70 fc ff ff 	mov    rax,QWORD PTR [rbp-0x390]
  209306:	8a 48 18             	mov    cl,BYTE PTR [rax+0x18]
  209309:	80 e9 02             	sub    cl,0x2
  20930c:	88 8d 6d fc ff ff    	mov    BYTE PTR [rbp-0x393],cl
  209312:	0f 84 6b 03 00 00    	je     209683 <scanAllCompileUnits+0xa33>
  209318:	e9 ba 03 00 00       	jmp    2096d7 <scanAllCompileUnits+0xa87>
                            const offset = try value.asUnsignedLe();
  20931d:	66 8b 85 60 fe ff ff 	mov    ax,WORD PTR [rbp-0x1a0]
  209324:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  20932b:	66 89 85 6a fc ff ff 	mov    WORD PTR [rbp-0x396],ax
  209332:	e8 19 b1 ff ff       	call   204450 <__zig_return_error>
  209337:	66 8b 85 6a fc ff ff 	mov    ax,WORD PTR [rbp-0x396]
  20933e:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  209345:	5d                   	pop    rbp
  209346:	c3                   	ret    
  209347:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
  20934e:	48 89 85 38 fd ff ff 	mov    QWORD PTR [rbp-0x2c8],rax
                            break :b (low_pc + offset);
  209355:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  20935c:	48 03 85 38 fd ff ff 	add    rax,QWORD PTR [rbp-0x2c8]
  209363:	0f 92 c1             	setb   cl
  209366:	48 89 85 60 fc ff ff 	mov    QWORD PTR [rbp-0x3a0],rax
  20936d:	88 8d 5f fc ff ff    	mov    BYTE PTR [rbp-0x3a1],cl
  209373:	0f 82 6e 03 00 00    	jb     2096e7 <scanAllCompileUnits+0xa97>
  209379:	e9 79 03 00 00       	jmp    2096f7 <scanAllCompileUnits+0xaa7>
                    const pc_end = switch (high_pc_value.*) {
  20937e:	48 8b 85 60 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3a0]
  209385:	48 89 85 50 fc ff ff 	mov    QWORD PTR [rbp-0x3b0],rax
  20938c:	eb 00                	jmp    20938e <scanAllCompileUnits+0x73e>
  20938e:	48 8b 85 50 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3b0]
  209395:	48 8d 8d 28 fe ff ff 	lea    rcx,[rbp-0x1d8]
  20939c:	48 89 85 30 fd ff ff 	mov    QWORD PTR [rbp-0x2d0],rax
                        .start = low_pc,
  2093a3:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
                        .end = pc_end,
  2093aa:	48 8b 95 30 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2d0]
                    break :x PcRange{
  2093b1:	48 89 85 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rax
  2093b8:	48 89 95 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rdx
  2093bf:	48 8b 85 40 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c0]
  2093c6:	48 89 85 28 fe ff ff 	mov    QWORD PTR [rbp-0x1d8],rax
  2093cd:	48 8b 85 48 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b8]
  2093d4:	48 89 85 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rax
  2093db:	c6 85 38 fe ff ff 01 	mov    BYTE PTR [rbp-0x1c8],0x1
  2093e2:	48 89 8d 48 fc ff ff 	mov    QWORD PTR [rbp-0x3b8],rcx
  2093e9:	eb 64                	jmp    20944f <scanAllCompileUnits+0x7ff>
  2093eb:	48 8d 05 3e 74 ff ff 	lea    rax,[rip+0xffffffffffff743e]        # 200830 <__unnamed_39>
                    break :x null;
  2093f2:	48 89 85 48 fc ff ff 	mov    QWORD PTR [rbp-0x3b8],rax
  2093f9:	eb 54                	jmp    20944f <scanAllCompileUnits+0x7ff>
            if (compile_unit_die.getAttrAddr(DW.AT_low_pc)) |low_pc| {
  2093fb:	66 8b 85 88 fe ff ff 	mov    ax,WORD PTR [rbp-0x178]
  209402:	66 89 85 2e fd ff ff 	mov    WORD PTR [rbp-0x2d2],ax
                if (err != error.MissingDebugInfo) return err;
  209409:	66 83 bd 2e fd ff ff 	cmp    WORD PTR [rbp-0x2d2],0x22
  209410:	22 
  209411:	74 2a                	je     20943d <scanAllCompileUnits+0x7ed>
  209413:	66 8b 85 2e fd ff ff 	mov    ax,WORD PTR [rbp-0x2d2]
  20941a:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  209421:	66 89 85 46 fc ff ff 	mov    WORD PTR [rbp-0x3ba],ax
  209428:	e8 23 b0 ff ff       	call   204450 <__zig_return_error>
  20942d:	66 8b 85 46 fc ff ff 	mov    ax,WORD PTR [rbp-0x3ba]
  209434:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  20943b:	5d                   	pop    rbp
  20943c:	c3                   	ret    
  20943d:	eb 00                	jmp    20943f <scanAllCompileUnits+0x7ef>
  20943f:	48 8d 05 02 74 ff ff 	lea    rax,[rip+0xffffffffffff7402]        # 200848 <__unnamed_40>
                break :x null;
  209446:	48 89 85 48 fc ff ff 	mov    QWORD PTR [rbp-0x3b8],rax
  20944d:	eb 00                	jmp    20944f <scanAllCompileUnits+0x7ff>
        const pc_range = x: {
  20944f:	48 8b 85 48 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3b8]
  209456:	48 8d 95 f8 fd ff ff 	lea    rdx,[rbp-0x208]
  20945d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  209460:	48 89 8d 10 fd ff ff 	mov    QWORD PTR [rbp-0x2f0],rcx
  209467:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  20946b:	48 89 8d 18 fd ff ff 	mov    QWORD PTR [rbp-0x2e8],rcx
  209472:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  209476:	48 89 85 20 fd ff ff 	mov    QWORD PTR [rbp-0x2e0],rax
        try st.compile_unit_list.append(CompileUnit{
  20947d:	48 8b 85 e8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x218]
  209484:	48 05 a8 00 00 00    	add    rax,0xa8
            .version = version,
  20948a:	66 8b b5 9e fd ff ff 	mov    si,WORD PTR [rbp-0x262]
            .is_64 = is_64,
  209491:	40 8a bd b7 fd ff ff 	mov    dil,BYTE PTR [rbp-0x249]
            .die = compile_unit_die,
  209498:	48 8b 8d 70 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x290]
            .index = cu_index,
  20949f:	4c 8b 85 d0 fd ff ff 	mov    r8,QWORD PTR [rbp-0x230]
        try st.compile_unit_list.append(CompileUnit{
  2094a6:	66 89 b5 f8 fd ff ff 	mov    WORD PTR [rbp-0x208],si
  2094ad:	40 80 e7 01          	and    dil,0x1
  2094b1:	40 88 bd fa fd ff ff 	mov    BYTE PTR [rbp-0x206],dil
  2094b8:	48 89 8d 00 fe ff ff 	mov    QWORD PTR [rbp-0x200],rcx
  2094bf:	4c 89 85 08 fe ff ff 	mov    QWORD PTR [rbp-0x1f8],r8
  2094c6:	48 8b 8d 10 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2f0]
  2094cd:	48 89 8d 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rcx
  2094d4:	48 8b 8d 18 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2e8]
  2094db:	48 89 8d 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],rcx
  2094e2:	48 8b 8d 20 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2e0]
  2094e9:	48 89 8d 20 fe ff ff 	mov    QWORD PTR [rbp-0x1e0],rcx
  2094f0:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  2094f7:	48 89 c6             	mov    rsi,rax
  2094fa:	e8 01 39 00 00       	call   20ce00 <AlignedArrayList(CompileUnit,2)_append>
  2094ff:	66 89 85 f6 fd ff ff 	mov    WORD PTR [rbp-0x20a],ax
  209506:	66 83 bd f6 fd ff ff 	cmp    WORD PTR [rbp-0x20a],0x0
  20950d:	00 
  20950e:	74 2a                	je     20953a <scanAllCompileUnits+0x8ea>
  209510:	66 8b 85 f6 fd ff ff 	mov    ax,WORD PTR [rbp-0x20a]
  209517:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  20951e:	66 89 85 44 fc ff ff 	mov    WORD PTR [rbp-0x3bc],ax
  209525:	e8 26 af ff ff       	call   204450 <__zig_return_error>
  20952a:	66 8b 85 44 fc ff ff 	mov    ax,WORD PTR [rbp-0x3bc]
  209531:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  209538:	5d                   	pop    rbp
  209539:	c3                   	ret    
        this_unit_offset += next_offset;
  20953a:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
  209541:	48 03 85 a0 fd ff ff 	add    rax,QWORD PTR [rbp-0x260]
  209548:	0f 92 c1             	setb   cl
  20954b:	48 89 85 38 fc ff ff 	mov    QWORD PTR [rbp-0x3c8],rax
  209552:	88 8d 37 fc ff ff    	mov    BYTE PTR [rbp-0x3c9],cl
  209558:	0f 82 9e 01 00 00    	jb     2096fc <scanAllCompileUnits+0xaac>
  20955e:	e9 a9 01 00 00       	jmp    20970c <scanAllCompileUnits+0xabc>
  209563:	31 c0                	xor    eax,eax
  209565:	66 89 c1             	mov    cx,ax
fn scanAllCompileUnits(st: *ElfStackTrace) !void {
  209568:	66 89 c8             	mov    ax,cx
  20956b:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  209572:	5d                   	pop    rbp
  209573:	c3                   	ret    
  209574:	48 8d 3d 9d bd 01 00 	lea    rdi,[rip+0x1bd9d]        # 225318 <__unnamed_5>
  20957b:	31 c0                	xor    eax,eax
  20957d:	89 c6                	mov    esi,eax
    const debug_info_end = st.debug_info.offset + st.debug_info.size;
  20957f:	e8 3c 9b ff ff       	call   2030c0 <panic>
  209584:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  209588:	48 8b 85 00 fd ff ff 	mov    rax,QWORD PTR [rbp-0x300]
  20958f:	48 89 85 e0 fd ff ff 	mov    QWORD PTR [rbp-0x220],rax
    var this_unit_offset = st.debug_info.offset;
  209596:	48 8b 8d e8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x218]
  20959d:	48 8b 49 60          	mov    rcx,QWORD PTR [rcx+0x60]
  2095a1:	48 8b 49 18          	mov    rcx,QWORD PTR [rcx+0x18]
  2095a5:	48 89 8d d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rcx
    var cu_index: usize = 0;
  2095ac:	48 c7 85 d0 fd ff ff 	mov    QWORD PTR [rbp-0x230],0x0
  2095b3:	00 00 00 00 
    var in_file_stream = io.FileInStream.init(&st.self_exe_file);
  2095b7:	48 8b b5 e8 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x218]
  2095be:	e8 cd 0c 00 00       	call   20a290 <FileInStream_init>
  2095c3:	48 8d 85 c0 fd ff ff 	lea    rax,[rbp-0x240]
  2095ca:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  2095ce:	48 89 8d c0 fd ff ff 	mov    QWORD PTR [rbp-0x240],rcx
  2095d5:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  2095d9:	48 89 8d c8 fd ff ff 	mov    QWORD PTR [rbp-0x238],rcx
    const in_stream = &in_file_stream.stream;
  2095e0:	48 83 c0 08          	add    rax,0x8
  2095e4:	48 89 85 b8 fd ff ff 	mov    QWORD PTR [rbp-0x248],rax
    while (this_unit_offset < debug_info_end) {
  2095eb:	e9 b2 f6 ff ff       	jmp    208ca2 <scanAllCompileUnits+0x52>
  2095f0:	48 8d 3d 21 bd 01 00 	lea    rdi,[rip+0x1bd21]        # 225318 <__unnamed_5>
  2095f7:	31 c0                	xor    eax,eax
  2095f9:	89 c6                	mov    esi,eax
        const next_offset = unit_length + (if (is_64) usize(12) else usize(4));
  2095fb:	e8 c0 9a ff ff       	call   2030c0 <panic>
  209600:	48 8d 45 c0          	lea    rax,[rbp-0x40]
  209604:	48 8b 8d c8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x338]
  20960b:	48 89 8d a0 fd ff ff 	mov    QWORD PTR [rbp-0x260],rcx
        const version = try in_stream.readInt(st.elf.endian, u16);
  209612:	48 8b 95 b8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x248]
  209619:	48 8b b5 e8 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x218]
  209620:	40 8a 7e 12          	mov    dil,BYTE PTR [rsi+0x12]
  209624:	40 0f b6 cf          	movzx  ecx,dil
  209628:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  20962c:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  209633:	48 89 85 28 fc ff ff 	mov    QWORD PTR [rbp-0x3d8],rax
  20963a:	e8 f1 0f 00 00       	call   20a630 <InStream(ReadError)_readInt>
  20963f:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  209644:	0f 85 c4 f7 ff ff    	jne    208e0e <scanAllCompileUnits+0x1be>
  20964a:	e9 e6 f7 ff ff       	jmp    208e35 <scanAllCompileUnits+0x1e5>
                        FormValue.Address => |value| value,
  20964f:	48 8b 85 70 fc ff ff 	mov    rax,QWORD PTR [rbp-0x390]
  209656:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  209659:	48 89 8d 58 fd ff ff 	mov    QWORD PTR [rbp-0x2a8],rcx
  209660:	48 8b 8d 58 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2a8]
                    const pc_end = switch (high_pc_value.*) {
  209667:	48 89 8d 50 fc ff ff 	mov    QWORD PTR [rbp-0x3b0],rcx
  20966e:	e9 1b fd ff ff       	jmp    20938e <scanAllCompileUnits+0x73e>
  209673:	48 8d 3d e6 be 01 00 	lea    rdi,[rip+0x1bee6]        # 225560 <__unnamed_17>
  20967a:	31 c0                	xor    eax,eax
  20967c:	89 c6                	mov    esi,eax
                        FormValue.Address => |value| value,
  20967e:	e8 3d 9a ff ff       	call   2030c0 <panic>
  209683:	48 8d bd 60 fe ff ff 	lea    rdi,[rbp-0x1a0]
  20968a:	48 8d 95 40 fd ff ff 	lea    rdx,[rbp-0x2c0]
                        FormValue.Const => |value| b: {
  209691:	48 8b 85 70 fc ff ff 	mov    rax,QWORD PTR [rbp-0x390]
  209698:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  20969b:	48 89 8d 40 fd ff ff 	mov    QWORD PTR [rbp-0x2c0],rcx
  2096a2:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  2096a6:	48 89 8d 48 fd ff ff 	mov    QWORD PTR [rbp-0x2b8],rcx
  2096ad:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
  2096b1:	48 89 8d 50 fd ff ff 	mov    QWORD PTR [rbp-0x2b0],rcx
                            const offset = try value.asUnsignedLe();
  2096b8:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  2096bf:	e8 6c 36 00 00       	call   20cd30 <Constant_asUnsignedLe>
  2096c4:	66 83 bd 60 fe ff ff 	cmp    WORD PTR [rbp-0x1a0],0x0
  2096cb:	00 
  2096cc:	0f 85 4b fc ff ff    	jne    20931d <scanAllCompileUnits+0x6cd>
  2096d2:	e9 70 fc ff ff       	jmp    209347 <scanAllCompileUnits+0x6f7>
  2096d7:	48 8d 3d 82 be 01 00 	lea    rdi,[rip+0x1be82]        # 225560 <__unnamed_17>
  2096de:	31 c0                	xor    eax,eax
  2096e0:	89 c6                	mov    esi,eax
                        FormValue.Const => |value| b: {
  2096e2:	e8 d9 99 ff ff       	call   2030c0 <panic>
  2096e7:	48 8d 3d 2a bc 01 00 	lea    rdi,[rip+0x1bc2a]        # 225318 <__unnamed_5>
  2096ee:	31 c0                	xor    eax,eax
  2096f0:	89 c6                	mov    esi,eax
                            break :b (low_pc + offset);
  2096f2:	e8 c9 99 ff ff       	call   2030c0 <panic>
  2096f7:	e9 82 fc ff ff       	jmp    20937e <scanAllCompileUnits+0x72e>
  2096fc:	48 8d 3d 15 bc 01 00 	lea    rdi,[rip+0x1bc15]        # 225318 <__unnamed_5>
  209703:	31 c0                	xor    eax,eax
  209705:	89 c6                	mov    esi,eax
        this_unit_offset += next_offset;
  209707:	e8 b4 99 ff ff       	call   2030c0 <panic>
  20970c:	48 8b 85 38 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3c8]
  209713:	48 89 85 d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rax
        cu_index += 1;
  20971a:	48 8b 8d d0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x230]
  209721:	48 83 c1 01          	add    rcx,0x1
  209725:	0f 92 c2             	setb   dl
  209728:	48 89 8d 20 fc ff ff 	mov    QWORD PTR [rbp-0x3e0],rcx
  20972f:	88 95 1f fc ff ff    	mov    BYTE PTR [rbp-0x3e1],dl
  209735:	72 02                	jb     209739 <scanAllCompileUnits+0xae9>
  209737:	eb 10                	jmp    209749 <scanAllCompileUnits+0xaf9>
  209739:	48 8d 3d d8 bb 01 00 	lea    rdi,[rip+0x1bbd8]        # 225318 <__unnamed_5>
  209740:	31 c0                	xor    eax,eax
  209742:	89 c6                	mov    esi,eax
  209744:	e8 77 99 ff ff       	call   2030c0 <panic>
  209749:	48 8b 85 20 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e0]
  209750:	48 89 85 d0 fd ff ff 	mov    QWORD PTR [rbp-0x230],rax
    while (this_unit_offset < debug_info_end) {
  209757:	e9 46 f5 ff ff       	jmp    208ca2 <scanAllCompileUnits+0x52>
  20975c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000209760 <DirectAllocator_init>:
    allocator: Allocator,
    heap_handle: ?HeapHandle,

    const HeapHandle = if (builtin.os == Os.windows) os.windows.HANDLE else void;

    pub fn init() DirectAllocator {
  209760:	55                   	push   rbp
  209761:	48 89 e5             	mov    rbp,rsp
  209764:	48 89 f8             	mov    rax,rdi
        return DirectAllocator{
  209767:	48 8b 0d 9a c0 01 00 	mov    rcx,QWORD PTR [rip+0x1c09a]        # 225808 <__unnamed_41>
  20976e:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  209771:	48 8b 0d 98 c0 01 00 	mov    rcx,QWORD PTR [rip+0x1c098]        # 225810 <__unnamed_41+0x8>
  209778:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  20977c:	48 8b 0d 95 c0 01 00 	mov    rcx,QWORD PTR [rip+0x1c095]        # 225818 <__unnamed_41+0x10>
  209783:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  209787:	48 8b 0d 92 c0 01 00 	mov    rcx,QWORD PTR [rip+0x1c092]        # 225820 <__unnamed_41+0x18>
  20978e:	48 89 4f 18          	mov    QWORD PTR [rdi+0x18],rcx
  209792:	5d                   	pop    rbp
  209793:	c3                   	ret    
  209794:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20979b:	00 00 00 00 00 

00000000002097a0 <ArenaAllocator_init>:
    buffer_list: std.LinkedList([]u8),
    end_index: usize,

    const BufNode = std.LinkedList([]u8).Node;

    pub fn init(child_allocator: *Allocator) ArenaAllocator {
  2097a0:	55                   	push   rbp
  2097a1:	48 89 e5             	mov    rbp,rsp
  2097a4:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  2097ab:	48 89 f8             	mov    rax,rdi
  2097ae:	48 8d 4d e8          	lea    rcx,[rbp-0x18]
  2097b2:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
            .allocator = Allocator{
                .allocFn = alloc,
                .reallocFn = realloc,
                .freeFn = free,
            },
            .child_allocator = child_allocator,
  2097b6:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
            .buffer_list = std.LinkedList([]u8).init(),
  2097ba:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
  2097be:	48 89 cf             	mov    rdi,rcx
  2097c1:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  2097c5:	48 89 75 88          	mov    QWORD PTR [rbp-0x78],rsi
  2097c9:	e8 d2 32 01 00       	call   21caa0 <BaseLinkedList([]u8,void,(struct []const u8 constant))_init>
  2097ce:	ba 40 00 00 00       	mov    edx,0x40
  2097d3:	48 8d 45 a8          	lea    rax,[rbp-0x58]
        return ArenaAllocator{
  2097d7:	48 8b 0d 4a c0 01 00 	mov    rcx,QWORD PTR [rip+0x1c04a]        # 225828 <__unnamed_42>
  2097de:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  2097e2:	48 8b 0d 47 c0 01 00 	mov    rcx,QWORD PTR [rip+0x1c047]        # 225830 <__unnamed_42+0x8>
  2097e9:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
  2097ed:	48 8b 0d 44 c0 01 00 	mov    rcx,QWORD PTR [rip+0x1c044]        # 225838 <__unnamed_42+0x10>
  2097f4:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
  2097f8:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  2097fc:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
  209800:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  209804:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  209808:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  20980c:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  209810:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  209814:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  209818:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  20981f:	00 
  209820:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  209824:	48 89 cf             	mov    rdi,rcx
  209827:	48 89 c6             	mov    rsi,rax
  20982a:	e8 d1 84 01 00       	call   221d00 <memcpy>
  20982f:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  209833:	48 81 c4 80 00 00 00 	add    rsp,0x80
  20983a:	5d                   	pop    rbp
  20983b:	c3                   	ret    
  20983c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000209840 <Allocator_alloc>:
    pub fn alloc(self: *Allocator, comptime T: type, n: usize) ![]T {
  209840:	55                   	push   rbp
  209841:	48 89 e5             	mov    rbp,rsp
  209844:	48 83 ec 40          	sub    rsp,0x40
  209848:	48 89 f8             	mov    rax,rdi
  20984b:	4c 8d 45 e8          	lea    r8,[rbp-0x18]
  20984f:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  209853:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
        return self.alignedAlloc(T, @alignOf(T), n);
  209857:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  20985b:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  20985f:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
  209863:	4c 89 c7             	mov    rdi,r8
  209866:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  20986a:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  20986e:	e8 5d 3a 01 00       	call   21d2d0 <Allocator_alignedAlloc.80>
  209873:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  209878:	74 0b                	je     209885 <Allocator_alloc+0x45>
  20987a:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20987e:	e8 cd ab ff ff       	call   204450 <__zig_return_error>
  209883:	eb 02                	jmp    209887 <Allocator_alloc+0x47>
  209885:	eb 00                	jmp    209887 <Allocator_alloc+0x47>
  209887:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20988b:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  20988f:	48 89 01             	mov    QWORD PTR [rcx],rax
  209892:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  209896:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20989a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20989e:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  2098a2:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  2098a6:	48 83 c4 40          	add    rsp,0x40
  2098aa:	5d                   	pop    rbp
  2098ab:	c3                   	ret    
  2098ac:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

00000000002098b0 <FixedBufferAllocator_init>:
pub const FixedBufferAllocator = struct {
    allocator: Allocator,
    end_index: usize,
    buffer: []u8,

    pub fn init(buffer: []u8) FixedBufferAllocator {
  2098b0:	55                   	push   rbp
  2098b1:	48 89 e5             	mov    rbp,rsp
  2098b4:	48 83 ec 40          	sub    rsp,0x40
  2098b8:	48 89 f8             	mov    rax,rdi
  2098bb:	b9 30 00 00 00       	mov    ecx,0x30
  2098c0:	89 ca                	mov    edx,ecx
  2098c2:	4c 8d 45 d0          	lea    r8,[rbp-0x30]
        return FixedBufferAllocator{
  2098c6:	4c 8b 0d 0b bc 01 00 	mov    r9,QWORD PTR [rip+0x1bc0b]        # 2254d8 <__unnamed_43>
  2098cd:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
  2098d1:	4c 8b 0d 08 bc 01 00 	mov    r9,QWORD PTR [rip+0x1bc08]        # 2254e0 <__unnamed_43+0x8>
  2098d8:	4c 89 4d d8          	mov    QWORD PTR [rbp-0x28],r9
  2098dc:	4c 8b 0d 05 bc 01 00 	mov    r9,QWORD PTR [rip+0x1bc05]        # 2254e8 <__unnamed_43+0x10>
  2098e3:	4c 89 4d e0          	mov    QWORD PTR [rbp-0x20],r9
  2098e7:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
  2098ee:	00 
  2098ef:	4c 8b 0e             	mov    r9,QWORD PTR [rsi]
  2098f2:	4c 89 4d f0          	mov    QWORD PTR [rbp-0x10],r9
  2098f6:	48 8b 76 08          	mov    rsi,QWORD PTR [rsi+0x8]
  2098fa:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2098fe:	4c 89 c6             	mov    rsi,r8
  209901:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  209905:	e8 f6 83 01 00       	call   221d00 <memcpy>
  20990a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20990e:	48 83 c4 40          	add    rsp,0x40
  209912:	5d                   	pop    rbp
  209913:	c3                   	ret    
  209914:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20991b:	00 00 00 00 00 

0000000000209920 <File_openRead>:
    pub fn openRead(allocator: *mem.Allocator, path: []const u8) OpenError!File {
  209920:	55                   	push   rbp
  209921:	48 89 e5             	mov    rbp,rsp
  209924:	48 83 ec 60          	sub    rsp,0x60
  209928:	48 89 f8             	mov    rax,rdi
  20992b:	4c 8d 45 f8          	lea    r8,[rbp-0x8]
  20992f:	45 31 c9             	xor    r9d,r9d
  209932:	45 31 d2             	xor    r10d,r10d
  209935:	45 89 d3             	mov    r11d,r10d
  209938:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            const fd = try os.posixOpen(allocator, path, flags, 0);
  20993c:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  209940:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
  209944:	4c 89 c7             	mov    rdi,r8
  209947:	48 89 75 b8          	mov    QWORD PTR [rbp-0x48],rsi
  20994b:	45 89 c8             	mov    r8d,r9d
  20994e:	4d 89 d9             	mov    r9,r11
  209951:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  209955:	e8 56 08 00 00       	call   20a1b0 <posixOpen>
  20995a:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  20995f:	74 2e                	je     20998f <File_openRead+0x6f>
  209961:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  209965:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  209969:	66 89 45 ae          	mov    WORD PTR [rbp-0x52],ax
  20996d:	e8 de aa ff ff       	call   204450 <__zig_return_error>
  209972:	66 8b 45 ae          	mov    ax,WORD PTR [rbp-0x52]
  209976:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  20997a:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  20997e:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  209982:	48 89 39             	mov    QWORD PTR [rcx],rdi
  209985:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  209989:	48 83 c4 60          	add    rsp,0x60
  20998d:	5d                   	pop    rbp
  20998e:	c3                   	ret    
  20998f:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
  209993:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  209996:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
            return openHandle(fd);
  209999:	8b 75 cc             	mov    esi,DWORD PTR [rbp-0x34]
  20999c:	e8 1f ab ff ff       	call   2044c0 <File_openHandle>
  2099a1:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  2099a7:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  2099aa:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
  2099ad:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  2099b1:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  2099b5:	48 89 39             	mov    QWORD PTR [rcx],rdi
  2099b8:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  2099bc:	48 83 c4 60          	add    rsp,0x60
  2099c0:	5d                   	pop    rbp
  2099c1:	c3                   	ret    
  2099c2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2099c9:	1f 84 00 00 00 00 00 

00000000002099d0 <FixedBufferAllocator_alloc>:
            .buffer = buffer,
            .end_index = 0,
        };
    }

    fn alloc(allocator: *Allocator, n: usize, alignment: u29) ![]u8 {
  2099d0:	55                   	push   rbp
  2099d1:	48 89 e5             	mov    rbp,rsp
  2099d4:	48 81 ec 10 01 00 00 	sub    rsp,0x110
  2099db:	48 89 f8             	mov    rax,rdi
  2099de:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  2099e2:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  2099e6:	41 81 e0 ff ff ff 1f 	and    r8d,0x1fffffff
  2099ed:	44 89 45 c4          	mov    DWORD PTR [rbp-0x3c],r8d
        const self = @fieldParentPtr(FixedBufferAllocator, "allocator", allocator);
  2099f1:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  2099f5:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
        const addr = @ptrToInt(self.buffer.ptr) + self.end_index;
  2099f9:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  2099fd:	48 8b 49 20          	mov    rcx,QWORD PTR [rcx+0x20]
  209a01:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  209a05:	48 03 4a 18          	add    rcx,QWORD PTR [rdx+0x18]
  209a09:	41 0f 92 c1          	setb   r9b
  209a0d:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  209a14:	48 89 bd 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdi
  209a1b:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
  209a22:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
  209a29:	44 88 8d 5f ff ff ff 	mov    BYTE PTR [rbp-0xa1],r9b
  209a30:	0f 82 f3 00 00 00    	jb     209b29 <FixedBufferAllocator_alloc+0x159>
  209a36:	e9 fe 00 00 00       	jmp    209b39 <FixedBufferAllocator_alloc+0x169>
  209a3b:	31 c0                	xor    eax,eax
  209a3d:	89 c1                	mov    ecx,eax
        const rem = @rem(addr, alignment);
        const march_forward_bytes = if (rem == 0) 0 else (alignment - rem);
  209a3f:	48 89 8d 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rcx
  209a46:	eb 29                	jmp    209a71 <FixedBufferAllocator_alloc+0xa1>
  209a48:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  209a4c:	8b 4d c4             	mov    ecx,DWORD PTR [rbp-0x3c]
  209a4f:	89 ca                	mov    edx,ecx
  209a51:	48 29 c2             	sub    rdx,rax
  209a54:	40 0f 92 c6          	setb   sil
  209a58:	48 89 95 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdx
  209a5f:	40 88 b5 47 ff ff ff 	mov    BYTE PTR [rbp-0xb9],sil
  209a66:	0f 82 2e 01 00 00    	jb     209b9a <FixedBufferAllocator_alloc+0x1ca>
  209a6c:	e9 39 01 00 00       	jmp    209baa <FixedBufferAllocator_alloc+0x1da>
  209a71:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  209a78:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        const adjusted_index = self.end_index + march_forward_bytes;
  209a7c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  209a80:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  209a84:	48 03 45 a0          	add    rax,QWORD PTR [rbp-0x60]
  209a88:	0f 92 c1             	setb   cl
  209a8b:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
  209a92:	88 8d 37 ff ff ff    	mov    BYTE PTR [rbp-0xc9],cl
  209a98:	0f 82 1f 01 00 00    	jb     209bbd <FixedBufferAllocator_alloc+0x1ed>
  209a9e:	e9 2a 01 00 00       	jmp    209bcd <FixedBufferAllocator_alloc+0x1fd>
        const new_end_index = adjusted_index + n;
        if (new_end_index > self.buffer.len) {
            return error.OutOfMemory;
  209aa3:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  209aaa:	e8 a1 a9 ff ff       	call   204450 <__zig_return_error>
  209aaf:	48 8b 3d f2 85 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff85f2]        # 2020a8 <__unnamed_44>
  209ab6:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  209abd:	48 89 38             	mov    QWORD PTR [rax],rdi
  209ac0:	48 8b 3d e9 85 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff85e9]        # 2020b0 <__unnamed_44+0x8>
  209ac7:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  209acb:	48 8b 3d e6 85 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff85e6]        # 2020b8 <__unnamed_44+0x10>
  209ad2:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  209ad6:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  209add:	48 81 c4 10 01 00 00 	add    rsp,0x110
  209ae4:	5d                   	pop    rbp
  209ae5:	c3                   	ret    
        if (new_end_index > self.buffer.len) {
  209ae6:	eb 00                	jmp    209ae8 <FixedBufferAllocator_alloc+0x118>
        }
        const result = self.buffer[adjusted_index..new_end_index];
  209ae8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  209aec:	48 89 c1             	mov    rcx,rax
  209aef:	48 83 c1 20          	add    rcx,0x20
  209af3:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  209af7:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  209afb:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
  209aff:	48 39 f2             	cmp    rdx,rsi
  209b02:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  209b09:	48 89 8d 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rcx
  209b10:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
  209b17:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
  209b1e:	0f 86 12 01 00 00    	jbe    209c36 <FixedBufferAllocator_alloc+0x266>
  209b24:	e9 fd 00 00 00       	jmp    209c26 <FixedBufferAllocator_alloc+0x256>
  209b29:	48 8d 3d e8 b7 01 00 	lea    rdi,[rip+0x1b7e8]        # 225318 <__unnamed_5>
  209b30:	31 c0                	xor    eax,eax
  209b32:	89 c6                	mov    esi,eax
        const addr = @ptrToInt(self.buffer.ptr) + self.end_index;
  209b34:	e8 87 95 ff ff       	call   2030c0 <panic>
  209b39:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  209b40:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
        const rem = @rem(addr, alignment);
  209b44:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  209b48:	8b 4d c4             	mov    ecx,DWORD PTR [rbp-0x3c]
  209b4b:	89 ca                	mov    edx,ecx
  209b4d:	48 83 fa 00          	cmp    rdx,0x0
  209b51:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
  209b58:	48 89 95 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rdx
  209b5f:	74 29                	je     209b8a <FixedBufferAllocator_alloc+0x1ba>
  209b61:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  209b68:	31 c9                	xor    ecx,ecx
  209b6a:	89 ca                	mov    edx,ecx
  209b6c:	48 8b b5 00 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x100]
  209b73:	48 f7 f6             	div    rsi
  209b76:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
        const march_forward_bytes = if (rem == 0) 0 else (alignment - rem);
  209b7a:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
  209b7f:	0f 84 b6 fe ff ff    	je     209a3b <FixedBufferAllocator_alloc+0x6b>
  209b85:	e9 be fe ff ff       	jmp    209a48 <FixedBufferAllocator_alloc+0x78>
  209b8a:	48 8d 3d 4f ba 01 00 	lea    rdi,[rip+0x1ba4f]        # 2255e0 <__unnamed_14>
  209b91:	31 c0                	xor    eax,eax
  209b93:	89 c6                	mov    esi,eax
        const rem = @rem(addr, alignment);
  209b95:	e8 26 95 ff ff       	call   2030c0 <panic>
  209b9a:	48 8d 3d 77 b7 01 00 	lea    rdi,[rip+0x1b777]        # 225318 <__unnamed_5>
  209ba1:	31 c0                	xor    eax,eax
  209ba3:	89 c6                	mov    esi,eax
        const march_forward_bytes = if (rem == 0) 0 else (alignment - rem);
  209ba5:	e8 16 95 ff ff       	call   2030c0 <panic>
  209baa:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  209bb1:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
  209bb8:	e9 b4 fe ff ff       	jmp    209a71 <FixedBufferAllocator_alloc+0xa1>
  209bbd:	48 8d 3d 54 b7 01 00 	lea    rdi,[rip+0x1b754]        # 225318 <__unnamed_5>
  209bc4:	31 c0                	xor    eax,eax
  209bc6:	89 c6                	mov    esi,eax
        const adjusted_index = self.end_index + march_forward_bytes;
  209bc8:	e8 f3 94 ff ff       	call   2030c0 <panic>
  209bcd:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  209bd4:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
        const new_end_index = adjusted_index + n;
  209bd8:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  209bdc:	48 03 4d c8          	add    rcx,QWORD PTR [rbp-0x38]
  209be0:	0f 92 c2             	setb   dl
  209be3:	48 89 8d f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rcx
  209bea:	88 95 f7 fe ff ff    	mov    BYTE PTR [rbp-0x109],dl
  209bf0:	72 02                	jb     209bf4 <FixedBufferAllocator_alloc+0x224>
  209bf2:	eb 10                	jmp    209c04 <FixedBufferAllocator_alloc+0x234>
  209bf4:	48 8d 3d 1d b7 01 00 	lea    rdi,[rip+0x1b71d]        # 225318 <__unnamed_5>
  209bfb:	31 c0                	xor    eax,eax
  209bfd:	89 c6                	mov    esi,eax
  209bff:	e8 bc 94 ff ff       	call   2030c0 <panic>
  209c04:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  209c0b:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
        if (new_end_index > self.buffer.len) {
  209c0f:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  209c13:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  209c17:	48 3b 4a 28          	cmp    rcx,QWORD PTR [rdx+0x28]
  209c1b:	0f 87 82 fe ff ff    	ja     209aa3 <FixedBufferAllocator_alloc+0xd3>
  209c21:	e9 c0 fe ff ff       	jmp    209ae6 <FixedBufferAllocator_alloc+0x116>
  209c26:	48 8d 3d d3 b6 01 00 	lea    rdi,[rip+0x1b6d3]        # 225300 <__unnamed_4>
  209c2d:	31 c0                	xor    eax,eax
  209c2f:	89 c6                	mov    esi,eax
        const result = self.buffer[adjusted_index..new_end_index];
  209c31:	e8 8a 94 ff ff       	call   2030c0 <panic>
  209c36:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  209c3d:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  209c44:	48 39 c8             	cmp    rax,rcx
  209c47:	76 10                	jbe    209c59 <FixedBufferAllocator_alloc+0x289>
  209c49:	48 8d 3d b0 b6 01 00 	lea    rdi,[rip+0x1b6b0]        # 225300 <__unnamed_4>
  209c50:	31 c0                	xor    eax,eax
  209c52:	89 c6                	mov    esi,eax
  209c54:	e8 67 94 ff ff       	call   2030c0 <panic>
  209c59:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  209c60:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  209c67:	48 03 01             	add    rax,QWORD PTR [rcx]
  209c6a:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  209c6e:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  209c75:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  209c7c:	48 29 d0             	sub    rax,rdx
  209c7f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  209c83:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  209c87:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  209c8b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  209c8f:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
        self.end_index = new_end_index;
  209c93:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  209c97:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  209c9b:	48 89 70 18          	mov    QWORD PTR [rax+0x18],rsi

        return result;
  209c9f:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  209ca5:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  209ca9:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  209cad:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  209cb1:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  209cb5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  209cb9:	48 8b b5 70 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x90]
  209cc0:	48 89 06             	mov    QWORD PTR [rsi],rax
  209cc3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  209cc7:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  209ccb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  209ccf:	48 89 46 10          	mov    QWORD PTR [rsi+0x10],rax
  209cd3:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  209cda:	48 81 c4 10 01 00 00 	add    rsp,0x110
  209ce1:	5d                   	pop    rbp
  209ce2:	c3                   	ret    
  209ce3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  209cea:	84 00 00 00 00 00 

0000000000209cf0 <FixedBufferAllocator_realloc>:
    }

    fn realloc(allocator: *Allocator, old_mem: []u8, new_size: usize, alignment: u29) ![]u8 {
  209cf0:	55                   	push   rbp
  209cf1:	48 89 e5             	mov    rbp,rsp
  209cf4:	48 81 ec 80 01 00 00 	sub    rsp,0x180
  209cfb:	48 89 f8             	mov    rax,rdi
  209cfe:	48 89 95 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdx
  209d05:	4c 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],r8
  209d0c:	41 81 e1 ff ff ff 1f 	and    r9d,0x1fffffff
  209d13:	44 89 8d 3c ff ff ff 	mov    DWORD PTR [rbp-0xc4],r9d
        const self = @fieldParentPtr(FixedBufferAllocator, "allocator", allocator);
  209d1a:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
  209d21:	48 89 95 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rdx
        assert(old_mem.len <= self.end_index);
  209d28:	48 8b 51 08          	mov    rdx,QWORD PTR [rcx+0x8]
  209d2c:	4c 8b 85 30 ff ff ff 	mov    r8,QWORD PTR [rbp-0xd0]
  209d33:	49 3b 50 18          	cmp    rdx,QWORD PTR [r8+0x18]
  209d37:	41 0f 96 c2          	setbe  r10b
  209d3b:	45 0f b6 ca          	movzx  r9d,r10b
  209d3f:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
  209d46:	44 89 cf             	mov    edi,r9d
  209d49:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  209d50:	48 89 8d e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rcx
  209d57:	48 89 b5 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rsi
  209d5e:	e8 9d 92 ff ff       	call   203000 <assert>
        if (new_size <= old_mem.len) {
  209d63:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  209d6a:	48 8b 8d e8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x118]
  209d71:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  209d75:	77 32                	ja     209da9 <FixedBufferAllocator_realloc+0xb9>
  209d77:	31 c0                	xor    eax,eax
  209d79:	89 c1                	mov    ecx,eax
            return old_mem[0..new_size];
  209d7b:	48 8b 95 40 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc0]
  209d82:	48 8b b5 e8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x118]
  209d89:	48 8b 7e 08          	mov    rdi,QWORD PTR [rsi+0x8]
  209d8d:	48 39 d1             	cmp    rcx,rdx
  209d90:	48 89 bd d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rdi
  209d97:	48 89 95 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rdx
  209d9e:	0f 86 21 02 00 00    	jbe    209fc5 <FixedBufferAllocator_realloc+0x2d5>
  209da4:	e9 0c 02 00 00       	jmp    209fb5 <FixedBufferAllocator_realloc+0x2c5>
  209da9:	31 c0                	xor    eax,eax
  209dab:	89 c1                	mov    ecx,eax
        } else if (old_mem.ptr == self.buffer.ptr + self.end_index - old_mem.len) {
  209dad:	48 8b 95 e8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x118]
  209db4:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
  209db7:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
  209dbe:	48 8b 7f 20          	mov    rdi,QWORD PTR [rdi+0x20]
  209dc2:	4c 8b 85 30 ff ff ff 	mov    r8,QWORD PTR [rbp-0xd0]
  209dc9:	49 03 78 18          	add    rdi,QWORD PTR [r8+0x18]
  209dcd:	48 2b 4a 08          	sub    rcx,QWORD PTR [rdx+0x8]
  209dd1:	48 01 cf             	add    rdi,rcx
  209dd4:	48 39 fe             	cmp    rsi,rdi
  209dd7:	0f 85 c0 00 00 00    	jne    209e9d <FixedBufferAllocator_realloc+0x1ad>
            const start_index = self.end_index - old_mem.len;
  209ddd:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  209de4:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  209de8:	48 8b 8d e8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x118]
  209def:	48 2b 41 08          	sub    rax,QWORD PTR [rcx+0x8]
  209df3:	0f 92 c2             	setb   dl
  209df6:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
  209dfd:	88 95 c7 fe ff ff    	mov    BYTE PTR [rbp-0x139],dl
  209e03:	0f 82 40 02 00 00    	jb     20a049 <FixedBufferAllocator_realloc+0x359>
  209e09:	e9 4b 02 00 00       	jmp    20a059 <FixedBufferAllocator_realloc+0x369>
            const new_end_index = start_index + new_size;
            if (new_end_index > self.buffer.len) return error.OutOfMemory;
  209e0e:	48 8b bd e0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x120]
  209e15:	e8 36 a6 ff ff       	call   204450 <__zig_return_error>
  209e1a:	48 8b 3d 9f 82 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff829f]        # 2020c0 <__unnamed_45>
  209e21:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  209e28:	48 89 38             	mov    QWORD PTR [rax],rdi
  209e2b:	48 8b 3d 96 82 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff8296]        # 2020c8 <__unnamed_45+0x8>
  209e32:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  209e36:	48 8b 3d 93 82 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff8293]        # 2020d0 <__unnamed_45+0x10>
  209e3d:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  209e41:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  209e48:	48 81 c4 80 01 00 00 	add    rsp,0x180
  209e4f:	5d                   	pop    rbp
  209e50:	c3                   	ret    
  209e51:	eb 00                	jmp    209e53 <FixedBufferAllocator_realloc+0x163>
            const result = self.buffer[start_index..new_end_index];
  209e53:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  209e5a:	48 89 c1             	mov    rcx,rax
  209e5d:	48 83 c1 20          	add    rcx,0x20
  209e61:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
  209e68:	48 8b b5 20 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe0]
  209e6f:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
  209e73:	48 39 f2             	cmp    rdx,rsi
  209e76:	48 89 b5 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rsi
  209e7d:	48 89 8d b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rcx
  209e84:	48 89 95 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rdx
  209e8b:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
  209e92:	0f 86 3c 02 00 00    	jbe    20a0d4 <FixedBufferAllocator_realloc+0x3e4>
  209e98:	e9 27 02 00 00       	jmp    20a0c4 <FixedBufferAllocator_realloc+0x3d4>
  209e9d:	48 8d 45 98          	lea    rax,[rbp-0x68]
            self.end_index = new_end_index;
            return result;
        } else {
            const result = try alloc(allocator, new_size, alignment);
  209ea1:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
  209ea8:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  209eaf:	44 8b 85 3c ff ff ff 	mov    r8d,DWORD PTR [rbp-0xc4]
  209eb6:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  209eba:	48 8b b5 e0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x120]
  209ec1:	48 89 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rax
  209ec8:	e8 03 fb ff ff       	call   2099d0 <FixedBufferAllocator_alloc>
  209ecd:	66 83 7d 98 00       	cmp    WORD PTR [rbp-0x68],0x0
  209ed2:	74 5c                	je     209f30 <FixedBufferAllocator_realloc+0x240>
  209ed4:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  209ed8:	48 8b bd e0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x120]
  209edf:	66 89 85 96 fe ff ff 	mov    WORD PTR [rbp-0x16a],ax
  209ee6:	e8 65 a5 ff ff       	call   204450 <__zig_return_error>
  209eeb:	66 8b 85 96 fe ff ff 	mov    ax,WORD PTR [rbp-0x16a]
  209ef2:	66 89 85 68 ff ff ff 	mov    WORD PTR [rbp-0x98],ax
  209ef9:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  209f00:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  209f07:	48 89 39             	mov    QWORD PTR [rcx],rdi
  209f0a:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  209f11:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  209f15:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  209f1c:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  209f20:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  209f27:	48 81 c4 80 01 00 00 	add    rsp,0x180
  209f2e:	5d                   	pop    rbp
  209f2f:	c3                   	ret    
  209f30:	48 8d bd 00 ff ff ff 	lea    rdi,[rbp-0x100]
  209f37:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  209f3b:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
  209f42:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  209f46:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
            mem.copy(u8, result, old_mem);
  209f4d:	48 8b b5 e8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x118]
  209f54:	e8 f7 15 01 00       	call   21b550 <copy>
            return result;
  209f59:	66 c7 85 50 ff ff ff 	mov    WORD PTR [rbp-0xb0],0x0
  209f60:	00 00 
  209f62:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  209f69:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  209f70:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  209f77:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  209f7e:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  209f85:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
  209f8c:	48 89 06             	mov    QWORD PTR [rsi],rax
  209f8f:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
  209f96:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  209f9a:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  209fa1:	48 89 46 10          	mov    QWORD PTR [rsi+0x10],rax
  209fa5:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  209fac:	48 81 c4 80 01 00 00 	add    rsp,0x180
  209fb3:	5d                   	pop    rbp
  209fb4:	c3                   	ret    
  209fb5:	48 8d 3d 44 b3 01 00 	lea    rdi,[rip+0x1b344]        # 225300 <__unnamed_4>
  209fbc:	31 c0                	xor    eax,eax
  209fbe:	89 c6                	mov    esi,eax
            return old_mem[0..new_size];
  209fc0:	e8 fb 90 ff ff       	call   2030c0 <panic>
  209fc5:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  209fcc:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
  209fd3:	48 39 c8             	cmp    rax,rcx
  209fd6:	76 10                	jbe    209fe8 <FixedBufferAllocator_realloc+0x2f8>
  209fd8:	48 8d 3d 21 b3 01 00 	lea    rdi,[rip+0x1b321]        # 225300 <__unnamed_4>
  209fdf:	31 c0                	xor    eax,eax
  209fe1:	89 c6                	mov    esi,eax
  209fe3:	e8 d8 90 ff ff       	call   2030c0 <panic>
  209fe8:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  209fef:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  209ff2:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  209ff6:	48 8b 8d d0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x130]
  209ffd:	48 83 e9 00          	sub    rcx,0x0
  20a001:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  20a005:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  20a00b:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  20a00f:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  20a013:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  20a017:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  20a01b:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  20a01f:	48 8b 95 f8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x108]
  20a026:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  20a029:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  20a02d:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  20a031:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20a035:	48 89 4a 10          	mov    QWORD PTR [rdx+0x10],rcx
  20a039:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  20a040:	48 81 c4 80 01 00 00 	add    rsp,0x180
  20a047:	5d                   	pop    rbp
  20a048:	c3                   	ret    
  20a049:	48 8d 3d c8 b2 01 00 	lea    rdi,[rip+0x1b2c8]        # 225318 <__unnamed_5>
  20a050:	31 c0                	xor    eax,eax
  20a052:	89 c6                	mov    esi,eax
            const start_index = self.end_index - old_mem.len;
  20a054:	e8 67 90 ff ff       	call   2030c0 <panic>
  20a059:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  20a060:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
            const new_end_index = start_index + new_size;
  20a067:	48 8b 8d 28 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd8]
  20a06e:	48 03 8d 40 ff ff ff 	add    rcx,QWORD PTR [rbp-0xc0]
  20a075:	0f 92 c2             	setb   dl
  20a078:	48 89 8d 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rcx
  20a07f:	88 95 87 fe ff ff    	mov    BYTE PTR [rbp-0x179],dl
  20a085:	72 02                	jb     20a089 <FixedBufferAllocator_realloc+0x399>
  20a087:	eb 10                	jmp    20a099 <FixedBufferAllocator_realloc+0x3a9>
  20a089:	48 8d 3d 88 b2 01 00 	lea    rdi,[rip+0x1b288]        # 225318 <__unnamed_5>
  20a090:	31 c0                	xor    eax,eax
  20a092:	89 c6                	mov    esi,eax
  20a094:	e8 27 90 ff ff       	call   2030c0 <panic>
  20a099:	48 8b 85 88 fe ff ff 	mov    rax,QWORD PTR [rbp-0x178]
  20a0a0:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
            if (new_end_index > self.buffer.len) return error.OutOfMemory;
  20a0a7:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  20a0ae:	48 8b 95 30 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd0]
  20a0b5:	48 3b 4a 28          	cmp    rcx,QWORD PTR [rdx+0x28]
  20a0b9:	0f 87 4f fd ff ff    	ja     209e0e <FixedBufferAllocator_realloc+0x11e>
  20a0bf:	e9 8d fd ff ff       	jmp    209e51 <FixedBufferAllocator_realloc+0x161>
  20a0c4:	48 8d 3d 35 b2 01 00 	lea    rdi,[rip+0x1b235]        # 225300 <__unnamed_4>
  20a0cb:	31 c0                	xor    eax,eax
  20a0cd:	89 c6                	mov    esi,eax
            const result = self.buffer[start_index..new_end_index];
  20a0cf:	e8 ec 8f ff ff       	call   2030c0 <panic>
  20a0d4:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  20a0db:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
  20a0e2:	48 39 c8             	cmp    rax,rcx
  20a0e5:	76 10                	jbe    20a0f7 <FixedBufferAllocator_realloc+0x407>
  20a0e7:	48 8d 3d 12 b2 01 00 	lea    rdi,[rip+0x1b212]        # 225300 <__unnamed_4>
  20a0ee:	31 c0                	xor    eax,eax
  20a0f0:	89 c6                	mov    esi,eax
  20a0f2:	e8 c9 8f ff ff       	call   2030c0 <panic>
  20a0f7:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
  20a0fe:	48 8b 8d b0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x150]
  20a105:	48 03 01             	add    rax,QWORD PTR [rcx]
  20a108:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  20a10c:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  20a113:	48 8b 95 a8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x158]
  20a11a:	48 29 d0             	sub    rax,rdx
  20a11d:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  20a121:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20a125:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
  20a12c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20a130:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
            self.end_index = new_end_index;
  20a137:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  20a13e:	48 8b b5 20 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe0]
  20a145:	48 89 70 18          	mov    QWORD PTR [rax+0x18],rsi
            return result;
  20a149:	66 c7 45 b0 00 00    	mov    WORD PTR [rbp-0x50],0x0
  20a14f:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  20a156:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  20a15a:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  20a161:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  20a165:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20a169:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
  20a170:	48 89 06             	mov    QWORD PTR [rsi],rax
  20a173:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  20a177:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  20a17b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  20a17f:	48 89 46 10          	mov    QWORD PTR [rsi+0x10],rax
  20a183:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  20a18a:	48 81 c4 80 01 00 00 	add    rsp,0x180
  20a191:	5d                   	pop    rbp
  20a192:	c3                   	ret    
  20a193:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20a19a:	84 00 00 00 00 00 

000000000020a1a0 <FixedBufferAllocator_free>:
        }
    }

    fn free(allocator: *Allocator, bytes: []u8) void {}
  20a1a0:	55                   	push   rbp
  20a1a1:	48 89 e5             	mov    rbp,rsp
  20a1a4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  20a1a8:	5d                   	pop    rbp
  20a1a9:	c3                   	ret    
  20a1aa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000020a1b0 <posixOpen>:
pub fn posixOpen(allocator: *Allocator, file_path: []const u8, flags: u32, perm: usize) PosixOpenError!i32 {
  20a1b0:	55                   	push   rbp
  20a1b1:	48 89 e5             	mov    rbp,rsp
  20a1b4:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  20a1bb:	48 89 f8             	mov    rax,rdi
  20a1be:	4c 8d 55 e8          	lea    r10,[rbp-0x18]
  20a1c2:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  20a1c6:	44 89 45 b4          	mov    DWORD PTR [rbp-0x4c],r8d
  20a1ca:	4c 89 4d a8          	mov    QWORD PTR [rbp-0x58],r9
    const path_with_null = try cstr.addNullByte(allocator, file_path);
  20a1ce:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  20a1d2:	48 89 7d 90          	mov    QWORD PTR [rbp-0x70],rdi
  20a1d6:	4c 89 d7             	mov    rdi,r10
  20a1d9:	48 89 75 88          	mov    QWORD PTR [rbp-0x78],rsi
  20a1dd:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  20a1e1:	e8 0a 34 01 00       	call   21d5f0 <addNullByte>
  20a1e6:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  20a1eb:	74 37                	je     20a224 <posixOpen+0x74>
  20a1ed:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  20a1f1:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  20a1f5:	66 89 85 7e ff ff ff 	mov    WORD PTR [rbp-0x82],ax
  20a1fc:	e8 4f a2 ff ff       	call   204450 <__zig_return_error>
  20a201:	66 8b 85 7e ff ff ff 	mov    ax,WORD PTR [rbp-0x82]
  20a208:	66 89 45 c8          	mov    WORD PTR [rbp-0x38],ax
  20a20c:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20a210:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  20a214:	48 89 39             	mov    QWORD PTR [rcx],rdi
  20a217:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  20a21b:	48 81 c4 90 00 00 00 	add    rsp,0x90
  20a222:	5d                   	pop    rbp
  20a223:	c3                   	ret    
  20a224:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  20a228:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20a22c:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  20a230:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20a234:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
    return posixOpenC(path_with_null.ptr, flags, perm);
  20a238:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  20a23c:	8b 4d b4             	mov    ecx,DWORD PTR [rbp-0x4c]
  20a23f:	4c 8b 45 a8          	mov    r8,QWORD PTR [rbp-0x58]
  20a243:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
  20a247:	e8 24 35 01 00       	call   21d770 <posixOpenC>
  20a24c:	48 8d 75 98          	lea    rsi,[rbp-0x68]
    defer allocator.free(path_with_null);
  20a250:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  20a254:	e8 37 e9 00 00       	call   218b90 <Allocator_free.56>
    return posixOpenC(path_with_null.ptr, flags, perm);
  20a259:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  20a25e:	74 0b                	je     20a26b <posixOpen+0xbb>
  20a260:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  20a264:	e8 e7 a1 ff ff       	call   204450 <__zig_return_error>
  20a269:	eb 02                	jmp    20a26d <posixOpen+0xbd>
  20a26b:	eb 00                	jmp    20a26d <posixOpen+0xbd>
  20a26d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  20a271:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  20a275:	48 89 01             	mov    QWORD PTR [rcx],rax
  20a278:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  20a27c:	48 81 c4 90 00 00 00 	add    rsp,0x90
  20a283:	5d                   	pop    rbp
  20a284:	c3                   	ret    
  20a285:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20a28c:	00 00 00 00 

000000000020a290 <FileInStream_init>:
    pub fn init(file: *File) FileInStream {
  20a290:	55                   	push   rbp
  20a291:	48 89 e5             	mov    rbp,rsp
  20a294:	48 89 f8             	mov    rax,rdi
  20a297:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
            .file = file,
  20a29b:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
        return FileInStream{
  20a29f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  20a2a3:	48 8b 35 5e b2 01 00 	mov    rsi,QWORD PTR [rip+0x1b25e]        # 225508 <__unnamed_46>
  20a2aa:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  20a2ae:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20a2b2:	48 89 37             	mov    QWORD PTR [rdi],rsi
  20a2b5:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20a2b9:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  20a2bd:	5d                   	pop    rbp
  20a2be:	c3                   	ret    
  20a2bf:	90                   	nop

000000000020a2c0 <InStream(ReadError)_readNoEof>:
        pub fn readNoEof(self: *Self, buf: []u8) !void {
  20a2c0:	55                   	push   rbp
  20a2c1:	48 89 e5             	mov    rbp,rsp
  20a2c4:	48 83 ec 50          	sub    rsp,0x50
  20a2c8:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  20a2cc:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
            const amt_read = try self.read(buf);
  20a2d0:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  20a2d4:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  20a2d8:	48 89 c7             	mov    rdi,rax
  20a2db:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20a2df:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
  20a2e3:	48 89 c6             	mov    rsi,rax
  20a2e6:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  20a2ea:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  20a2ee:	48 89 ca             	mov    rdx,rcx
  20a2f1:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  20a2f5:	e8 26 0f 00 00       	call   20b220 <InStream(ReadError)_read>
  20a2fa:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  20a2ff:	74 1b                	je     20a31c <InStream(ReadError)_readNoEof+0x5c>
  20a301:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  20a305:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20a309:	66 89 45 b6          	mov    WORD PTR [rbp-0x4a],ax
  20a30d:	e8 3e a1 ff ff       	call   204450 <__zig_return_error>
  20a312:	66 8b 45 b6          	mov    ax,WORD PTR [rbp-0x4a]
  20a316:	48 83 c4 50          	add    rsp,0x50
  20a31a:	5d                   	pop    rbp
  20a31b:	c3                   	ret    
  20a31c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20a320:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
            if (amt_read < buf.len) return error.EndOfStream;
  20a324:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20a328:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  20a32c:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  20a330:	73 13                	jae    20a345 <InStream(ReadError)_readNoEof+0x85>
  20a332:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20a336:	e8 15 a1 ff ff       	call   204450 <__zig_return_error>
  20a33b:	66 b8 1e 00          	mov    ax,0x1e
  20a33f:	48 83 c4 50          	add    rsp,0x50
  20a343:	5d                   	pop    rbp
  20a344:	c3                   	ret    
  20a345:	31 c0                	xor    eax,eax
  20a347:	66 89 c1             	mov    cx,ax
        pub fn readNoEof(self: *Self, buf: []u8) !void {
  20a34a:	66 89 c8             	mov    ax,cx
  20a34d:	48 83 c4 50          	add    rsp,0x50
  20a351:	5d                   	pop    rbp
  20a352:	c3                   	ret    
  20a353:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20a35a:	84 00 00 00 00 00 

000000000020a360 <eql>:
pub fn eql(comptime T: type, a: []const T, b: []const T) bool {
  20a360:	55                   	push   rbp
  20a361:	48 89 e5             	mov    rbp,rsp
    if (a.len != b.len) return false;
  20a364:	48 83 ec 40          	sub    rsp,0x40
  20a368:	48 8b 47 08          	mov    rax,QWORD PTR [rdi+0x8]
  20a36c:	48 3b 46 08          	cmp    rax,QWORD PTR [rsi+0x8]
  20a370:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
  20a374:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  20a378:	74 0c                	je     20a386 <eql+0x26>
  20a37a:	31 c0                	xor    eax,eax
  20a37c:	88 c1                	mov    cl,al
  20a37e:	88 c8                	mov    al,cl
  20a380:	48 83 c4 40          	add    rsp,0x40
  20a384:	5d                   	pop    rbp
  20a385:	c3                   	ret    
  20a386:	eb 00                	jmp    20a388 <eql+0x28>
  20a388:	48 8d 7d ff          	lea    rdi,[rbp-0x1]
  20a38c:	be aa 00 00 00       	mov    esi,0xaa
  20a391:	b8 01 00 00 00       	mov    eax,0x1
  20a396:	89 c2                	mov    edx,eax
    for (a) |item, index| {
  20a398:	e8 13 79 01 00       	call   221cb0 <memset>
  20a39d:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  20a3a4:	00 
  20a3a5:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  20a3a9:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
  20a3ad:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  20a3b1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20a3b5:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  20a3b9:	48 39 c8             	cmp    rax,rcx
  20a3bc:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  20a3c0:	73 41                	jae    20a403 <eql+0xa3>
  20a3c2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20a3c6:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  20a3c9:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  20a3cd:	40 8a 34 11          	mov    sil,BYTE PTR [rcx+rdx*1]
  20a3d1:	40 88 75 ff          	mov    BYTE PTR [rbp-0x1],sil
        if (b[index] != item) return false;
  20a3d5:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  20a3d9:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  20a3dd:	48 3b 4f 08          	cmp    rcx,QWORD PTR [rdi+0x8]
  20a3e1:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  20a3e5:	72 34                	jb     20a41b <eql+0xbb>
  20a3e7:	eb 22                	jmp    20a40b <eql+0xab>
  20a3e9:	31 c0                	xor    eax,eax
  20a3eb:	88 c1                	mov    cl,al
  20a3ed:	88 c8                	mov    al,cl
  20a3ef:	48 83 c4 40          	add    rsp,0x40
  20a3f3:	5d                   	pop    rbp
  20a3f4:	c3                   	ret    
    for (a) |item, index| {
  20a3f5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20a3f9:	48 83 c0 01          	add    rax,0x1
  20a3fd:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  20a401:	eb ae                	jmp    20a3b1 <eql+0x51>
    return true;
  20a403:	b0 01                	mov    al,0x1
  20a405:	48 83 c4 40          	add    rsp,0x40
  20a409:	5d                   	pop    rbp
  20a40a:	c3                   	ret    
  20a40b:	48 8d 3d ee ae 01 00 	lea    rdi,[rip+0x1aeee]        # 225300 <__unnamed_4>
  20a412:	31 c0                	xor    eax,eax
  20a414:	89 c6                	mov    esi,eax
        if (b[index] != item) return false;
  20a416:	e8 a5 8c ff ff       	call   2030c0 <panic>
  20a41b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20a41f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  20a422:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  20a426:	40 8a 34 11          	mov    sil,BYTE PTR [rcx+rdx*1]
  20a42a:	40 3a 75 ff          	cmp    sil,BYTE PTR [rbp-0x1]
  20a42e:	75 b9                	jne    20a3e9 <eql+0x89>
  20a430:	eb c3                	jmp    20a3f5 <eql+0x95>
  20a432:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20a439:	1f 84 00 00 00 00 00 

000000000020a440 <InStream(ReadError)_readByte>:
        pub fn readByte(self: *Self) !u8 {
  20a440:	55                   	push   rbp
  20a441:	48 89 e5             	mov    rbp,rsp
  20a444:	48 83 ec 60          	sub    rsp,0x60
  20a448:	48 89 f8             	mov    rax,rdi
  20a44b:	b1 01                	mov    cl,0x1
  20a44d:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
            var result: [1]u8 = undefined;
  20a451:	44 8a 05 8f 62 ff ff 	mov    r8b,BYTE PTR [rip+0xffffffffffff628f]        # 2006e7 <__unnamed_47>
  20a458:	44 88 45 d7          	mov    BYTE PTR [rbp-0x29],r8b
            try self.readNoEof(result[0..]);
  20a45c:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  20a460:	f6 c1 01             	test   cl,0x1
  20a463:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  20a467:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
  20a46b:	48 89 75 b8          	mov    QWORD PTR [rbp-0x48],rsi
  20a46f:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  20a473:	75 5d                	jne    20a4d2 <InStream(ReadError)_readByte+0x92>
  20a475:	eb 4b                	jmp    20a4c2 <InStream(ReadError)_readByte+0x82>
  20a477:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  20a47b:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  20a47f:	66 89 45 ae          	mov    WORD PTR [rbp-0x52],ax
  20a483:	e8 c8 9f ff ff       	call   204450 <__zig_return_error>
  20a488:	66 8b 45 ae          	mov    ax,WORD PTR [rbp-0x52]
  20a48c:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  20a490:	8b 4d e8             	mov    ecx,DWORD PTR [rbp-0x18]
  20a493:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  20a497:	89 0f                	mov    DWORD PTR [rdi],ecx
  20a499:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20a49d:	48 83 c4 60          	add    rsp,0x60
  20a4a1:	5d                   	pop    rbp
  20a4a2:	c3                   	ret    
            return result[0];
  20a4a3:	8a 45 d7             	mov    al,BYTE PTR [rbp-0x29]
  20a4a6:	66 c7 45 e0 00 00    	mov    WORD PTR [rbp-0x20],0x0
  20a4ac:	88 45 e2             	mov    BYTE PTR [rbp-0x1e],al
  20a4af:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
  20a4b2:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  20a4b6:	89 0a                	mov    DWORD PTR [rdx],ecx
  20a4b8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20a4bc:	48 83 c4 60          	add    rsp,0x60
  20a4c0:	5d                   	pop    rbp
  20a4c1:	c3                   	ret    
  20a4c2:	48 8d 3d 37 ae 01 00 	lea    rdi,[rip+0x1ae37]        # 225300 <__unnamed_4>
  20a4c9:	31 c0                	xor    eax,eax
  20a4cb:	89 c6                	mov    esi,eax
            try self.readNoEof(result[0..]);
  20a4cd:	e8 ee 8b ff ff       	call   2030c0 <panic>
  20a4d2:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
  20a4d6:	48 8d 45 d7          	lea    rax,[rbp-0x29]
  20a4da:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  20a4de:	48 c7 45 f8 01 00 00 	mov    QWORD PTR [rbp-0x8],0x1
  20a4e5:	00 
  20a4e6:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  20a4ea:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
  20a4ee:	e8 cd fd ff ff       	call   20a2c0 <InStream(ReadError)_readNoEof>
  20a4f3:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  20a4f7:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  20a4fc:	0f 85 75 ff ff ff    	jne    20a477 <InStream(ReadError)_readByte+0x37>
  20a502:	eb 9f                	jmp    20a4a3 <InStream(ReadError)_readByte+0x63>
  20a504:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20a50b:	00 00 00 00 00 

000000000020a510 <File_seekForward>:
    pub fn seekForward(self: *File, amount: isize) !void {
  20a510:	55                   	push   rbp
  20a511:	48 89 e5             	mov    rbp,rsp
  20a514:	48 83 ec 60          	sub    rsp,0x60
  20a518:	b8 01 00 00 00       	mov    eax,0x1
  20a51d:	89 c1                	mov    ecx,eax
  20a51f:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  20a523:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
                const result = posix.lseek(self.handle, amount, posix.SEEK_CUR);
  20a527:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  20a52b:	8b 02                	mov    eax,DWORD PTR [rdx]
  20a52d:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20a531:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  20a535:	89 c7                	mov    edi,eax
  20a537:	48 89 ca             	mov    rdx,rcx
  20a53a:	e8 51 0d 00 00       	call   20b290 <lseek>
  20a53f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
                const err = posix.getErrno(result);
  20a543:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  20a547:	e8 a4 0b 00 00       	call   20b0f0 <getErrno>
  20a54c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
                if (err > 0) {
  20a550:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
  20a555:	0f 86 b7 00 00 00    	jbe    20a612 <File_seekForward+0x102>
                    return switch (err) {
  20a55b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20a55f:	48 89 c1             	mov    rcx,rax
  20a562:	48 83 e9 06          	sub    rcx,0x6
  20a566:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  20a56a:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  20a56e:	74 7d                	je     20a5ed <File_seekForward+0xdd>
  20a570:	eb 00                	jmp    20a572 <File_seekForward+0x62>
  20a572:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20a576:	48 83 e8 09          	sub    rax,0x9
  20a57a:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  20a57e:	74 45                	je     20a5c5 <File_seekForward+0xb5>
  20a580:	eb 00                	jmp    20a582 <File_seekForward+0x72>
  20a582:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20a586:	48 83 e8 16          	sub    rax,0x16
  20a58a:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  20a58e:	74 3f                	je     20a5cf <File_seekForward+0xbf>
  20a590:	eb 00                	jmp    20a592 <File_seekForward+0x82>
  20a592:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20a596:	48 83 e8 1d          	sub    rax,0x1d
  20a59a:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  20a59e:	74 43                	je     20a5e3 <File_seekForward+0xd3>
  20a5a0:	eb 00                	jmp    20a5a2 <File_seekForward+0x92>
  20a5a2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20a5a6:	48 83 e8 4b          	sub    rax,0x4b
  20a5aa:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  20a5ae:	74 29                	je     20a5d9 <File_seekForward+0xc9>
  20a5b0:	eb 00                	jmp    20a5b2 <File_seekForward+0xa2>
                        else => os.unexpectedErrorPosix(err),
  20a5b2:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  20a5b6:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  20a5ba:	e8 d1 0b 00 00       	call   20b190 <unexpectedErrorPosix>
                    return switch (err) {
  20a5bf:	66 89 45 a6          	mov    WORD PTR [rbp-0x5a],ax
  20a5c3:	eb 32                	jmp    20a5f7 <File_seekForward+0xe7>
  20a5c5:	66 b8 1c 00          	mov    ax,0x1c
  20a5c9:	66 89 45 a6          	mov    WORD PTR [rbp-0x5a],ax
  20a5cd:	eb 28                	jmp    20a5f7 <File_seekForward+0xe7>
  20a5cf:	66 b8 20 00          	mov    ax,0x20
  20a5d3:	66 89 45 a6          	mov    WORD PTR [rbp-0x5a],ax
  20a5d7:	eb 1e                	jmp    20a5f7 <File_seekForward+0xe7>
  20a5d9:	66 b8 20 00          	mov    ax,0x20
  20a5dd:	66 89 45 a6          	mov    WORD PTR [rbp-0x5a],ax
  20a5e1:	eb 14                	jmp    20a5f7 <File_seekForward+0xe7>
  20a5e3:	66 b8 20 00          	mov    ax,0x20
  20a5e7:	66 89 45 a6          	mov    WORD PTR [rbp-0x5a],ax
  20a5eb:	eb 0a                	jmp    20a5f7 <File_seekForward+0xe7>
  20a5ed:	66 b8 20 00          	mov    ax,0x20
  20a5f1:	66 89 45 a6          	mov    WORD PTR [rbp-0x5a],ax
  20a5f5:	eb 00                	jmp    20a5f7 <File_seekForward+0xe7>
  20a5f7:	66 8b 45 a6          	mov    ax,WORD PTR [rbp-0x5a]
  20a5fb:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  20a5ff:	66 89 45 a4          	mov    WORD PTR [rbp-0x5c],ax
  20a603:	e8 48 9e ff ff       	call   204450 <__zig_return_error>
  20a608:	66 8b 45 a4          	mov    ax,WORD PTR [rbp-0x5c]
  20a60c:	48 83 c4 60          	add    rsp,0x60
  20a610:	5d                   	pop    rbp
  20a611:	c3                   	ret    
                if (err > 0) {
  20a612:	eb 00                	jmp    20a614 <File_seekForward+0x104>
  20a614:	31 c0                	xor    eax,eax
  20a616:	66 89 c1             	mov    cx,ax
    pub fn seekForward(self: *File, amount: isize) !void {
  20a619:	66 89 c8             	mov    ax,cx
  20a61c:	48 83 c4 60          	add    rsp,0x60
  20a620:	5d                   	pop    rbp
  20a621:	c3                   	ret    
  20a622:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20a629:	1f 84 00 00 00 00 00 

000000000020a630 <InStream(ReadError)_readInt>:
        pub fn readInt(self: *Self, endian: builtin.Endian, comptime T: type) !T {
  20a630:	55                   	push   rbp
  20a631:	48 89 e5             	mov    rbp,rsp
  20a634:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  20a63b:	88 c8                	mov    al,cl
  20a63d:	49 89 f8             	mov    r8,rdi
  20a640:	41 b1 01             	mov    r9b,0x1
  20a643:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
  20a647:	24 01                	and    al,0x1
  20a649:	88 45 bf             	mov    BYTE PTR [rbp-0x41],al
            var bytes: [@sizeOf(T)]u8 = undefined;
  20a64c:	66 44 8b 15 c6 60 ff 	mov    r10w,WORD PTR [rip+0xffffffffffff60c6]        # 20071a <__unnamed_48>
  20a653:	ff 
  20a654:	66 44 89 55 bd       	mov    WORD PTR [rbp-0x43],r10w
            try self.readNoEof(bytes[0..]);
  20a659:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  20a65d:	41 f6 c1 01          	test   r9b,0x1
  20a661:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
  20a665:	4c 89 45 a8          	mov    QWORD PTR [rbp-0x58],r8
  20a669:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  20a66d:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
  20a671:	0f 85 88 00 00 00    	jne    20a6ff <InStream(ReadError)_readInt+0xcf>
  20a677:	eb 76                	jmp    20a6ef <InStream(ReadError)_readInt+0xbf>
  20a679:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  20a67d:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  20a681:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  20a685:	e8 c6 9d ff ff       	call   204450 <__zig_return_error>
  20a68a:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  20a68e:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  20a692:	8b 4d e8             	mov    ecx,DWORD PTR [rbp-0x18]
  20a695:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  20a699:	89 0f                	mov    DWORD PTR [rdi],ecx
  20a69b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  20a69f:	48 81 c4 80 00 00 00 	add    rsp,0x80
  20a6a6:	5d                   	pop    rbp
  20a6a7:	c3                   	ret    
  20a6a8:	48 8d 45 d0          	lea    rax,[rbp-0x30]
  20a6ac:	48 8d 4d bd          	lea    rcx,[rbp-0x43]
            return mem.readInt(bytes, T, endian);
  20a6b0:	8a 55 bf             	mov    dl,BYTE PTR [rbp-0x41]
  20a6b3:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  20a6b7:	48 c7 45 d8 02 00 00 	mov    QWORD PTR [rbp-0x28],0x2
  20a6be:	00 
  20a6bf:	0f b6 f2             	movzx  esi,dl
  20a6c2:	48 8d 7d d0          	lea    rdi,[rbp-0x30]
  20a6c6:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  20a6ca:	e8 31 0c 00 00       	call   20b300 <readInt.18>
  20a6cf:	66 c7 45 c8 00 00    	mov    WORD PTR [rbp-0x38],0x0
  20a6d5:	66 89 45 ca          	mov    WORD PTR [rbp-0x36],ax
  20a6d9:	8b 75 c8             	mov    esi,DWORD PTR [rbp-0x38]
  20a6dc:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  20a6e0:	89 31                	mov    DWORD PTR [rcx],esi
  20a6e2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  20a6e6:	48 81 c4 80 00 00 00 	add    rsp,0x80
  20a6ed:	5d                   	pop    rbp
  20a6ee:	c3                   	ret    
  20a6ef:	48 8d 3d 0a ac 01 00 	lea    rdi,[rip+0x1ac0a]        # 225300 <__unnamed_4>
  20a6f6:	31 c0                	xor    eax,eax
  20a6f8:	89 c6                	mov    esi,eax
            try self.readNoEof(bytes[0..]);
  20a6fa:	e8 c1 89 ff ff       	call   2030c0 <panic>
  20a6ff:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
  20a703:	48 8d 45 bd          	lea    rax,[rbp-0x43]
  20a707:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  20a70b:	48 c7 45 f8 02 00 00 	mov    QWORD PTR [rbp-0x8],0x2
  20a712:	00 
  20a713:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  20a717:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  20a71b:	e8 a0 fb ff ff       	call   20a2c0 <InStream(ReadError)_readNoEof>
  20a720:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  20a724:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  20a729:	0f 85 4a ff ff ff    	jne    20a679 <InStream(ReadError)_readInt+0x49>
  20a72f:	e9 74 ff ff ff       	jmp    20a6a8 <InStream(ReadError)_readInt+0x78>
  20a734:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20a73b:	00 00 00 00 00 

000000000020a740 <InStream(ReadError)_readInt.15>:
        pub fn readInt(self: *Self, endian: builtin.Endian, comptime T: type) !T {
  20a740:	55                   	push   rbp
  20a741:	48 89 e5             	mov    rbp,rsp
  20a744:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  20a74b:	88 c8                	mov    al,cl
  20a74d:	49 89 f8             	mov    r8,rdi
  20a750:	41 b1 01             	mov    r9b,0x1
  20a753:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  20a757:	24 01                	and    al,0x1
  20a759:	88 45 b7             	mov    BYTE PTR [rbp-0x49],al
            var bytes: [@sizeOf(T)]u8 = undefined;
  20a75c:	8b 0d 02 7d ff ff    	mov    ecx,DWORD PTR [rip+0xffffffffffff7d02]        # 202464 <__unnamed_21>
  20a762:	89 4d b3             	mov    DWORD PTR [rbp-0x4d],ecx
            try self.readNoEof(bytes[0..]);
  20a765:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  20a769:	41 f6 c1 01          	test   r9b,0x1
  20a76d:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  20a771:	4c 89 45 a0          	mov    QWORD PTR [rbp-0x60],r8
  20a775:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  20a779:	48 89 7d 90          	mov    QWORD PTR [rbp-0x70],rdi
  20a77d:	0f 85 8b 00 00 00    	jne    20a80e <InStream(ReadError)_readInt.15+0xce>
  20a783:	eb 79                	jmp    20a7fe <InStream(ReadError)_readInt.15+0xbe>
  20a785:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  20a789:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  20a78d:	66 89 45 8e          	mov    WORD PTR [rbp-0x72],ax
  20a791:	e8 ba 9c ff ff       	call   204450 <__zig_return_error>
  20a796:	66 8b 45 8e          	mov    ax,WORD PTR [rbp-0x72]
  20a79a:	66 89 45 e0          	mov    WORD PTR [rbp-0x20],ax
  20a79e:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  20a7a2:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  20a7a6:	48 89 39             	mov    QWORD PTR [rcx],rdi
  20a7a9:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  20a7ad:	48 81 c4 80 00 00 00 	add    rsp,0x80
  20a7b4:	5d                   	pop    rbp
  20a7b5:	c3                   	ret    
  20a7b6:	48 8d 45 c8          	lea    rax,[rbp-0x38]
  20a7ba:	48 8d 4d b3          	lea    rcx,[rbp-0x4d]
            return mem.readInt(bytes, T, endian);
  20a7be:	8a 55 b7             	mov    dl,BYTE PTR [rbp-0x49]
  20a7c1:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  20a7c5:	48 c7 45 d0 04 00 00 	mov    QWORD PTR [rbp-0x30],0x4
  20a7cc:	00 
  20a7cd:	0f b6 f2             	movzx  esi,dl
  20a7d0:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  20a7d4:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  20a7d8:	e8 23 99 ff ff       	call   204100 <readInt>
  20a7dd:	66 c7 45 c0 00 00    	mov    WORD PTR [rbp-0x40],0x0
  20a7e3:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
  20a7e6:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  20a7ea:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  20a7ee:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  20a7f1:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  20a7f5:	48 81 c4 80 00 00 00 	add    rsp,0x80
  20a7fc:	5d                   	pop    rbp
  20a7fd:	c3                   	ret    
  20a7fe:	48 8d 3d fb aa 01 00 	lea    rdi,[rip+0x1aafb]        # 225300 <__unnamed_4>
  20a805:	31 c0                	xor    eax,eax
  20a807:	89 c6                	mov    esi,eax
            try self.readNoEof(bytes[0..]);
  20a809:	e8 b2 88 ff ff       	call   2030c0 <panic>
  20a80e:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
  20a812:	48 8d 45 b3          	lea    rax,[rbp-0x4d]
  20a816:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  20a81a:	48 c7 45 f8 04 00 00 	mov    QWORD PTR [rbp-0x8],0x4
  20a821:	00 
  20a822:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  20a826:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  20a82a:	e8 91 fa ff ff       	call   20a2c0 <InStream(ReadError)_readNoEof>
  20a82f:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  20a833:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  20a838:	0f 85 47 ff ff ff    	jne    20a785 <InStream(ReadError)_readInt.15+0x45>
  20a83e:	e9 73 ff ff ff       	jmp    20a7b6 <InStream(ReadError)_readInt.15+0x76>
  20a843:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20a84a:	84 00 00 00 00 00 

000000000020a850 <InStream(ReadError)_readInt.16>:
        pub fn readInt(self: *Self, endian: builtin.Endian, comptime T: type) !T {
  20a850:	55                   	push   rbp
  20a851:	48 89 e5             	mov    rbp,rsp
  20a854:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  20a85b:	88 c8                	mov    al,cl
  20a85d:	49 89 f8             	mov    r8,rdi
  20a860:	41 b1 01             	mov    r9b,0x1
  20a863:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
  20a867:	24 01                	and    al,0x1
  20a869:	88 45 a7             	mov    BYTE PTR [rbp-0x59],al
            var bytes: [@sizeOf(T)]u8 = undefined;
  20a86c:	48 8b 15 95 7b ff ff 	mov    rdx,QWORD PTR [rip+0xffffffffffff7b95]        # 202408 <__unnamed_118>
  20a873:	48 89 55 9f          	mov    QWORD PTR [rbp-0x61],rdx
            try self.readNoEof(bytes[0..]);
  20a877:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  20a87b:	41 f6 c1 01          	test   r9b,0x1
  20a87f:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
  20a883:	4c 89 45 88          	mov    QWORD PTR [rbp-0x78],r8
  20a887:	48 89 55 80          	mov    QWORD PTR [rbp-0x80],rdx
  20a88b:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
  20a892:	0f 85 ae 00 00 00    	jne    20a946 <InStream(ReadError)_readInt.16+0xf6>
  20a898:	e9 99 00 00 00       	jmp    20a936 <InStream(ReadError)_readInt.16+0xe6>
  20a89d:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  20a8a1:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  20a8a5:	66 89 85 76 ff ff ff 	mov    WORD PTR [rbp-0x8a],ax
  20a8ac:	e8 9f 9b ff ff       	call   204450 <__zig_return_error>
  20a8b1:	66 8b 85 76 ff ff ff 	mov    ax,WORD PTR [rbp-0x8a]
  20a8b8:	66 89 45 d8          	mov    WORD PTR [rbp-0x28],ax
  20a8bc:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  20a8c0:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  20a8c7:	48 89 39             	mov    QWORD PTR [rcx],rdi
  20a8ca:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  20a8ce:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  20a8d2:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  20a8d6:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  20a8dd:	5d                   	pop    rbp
  20a8de:	c3                   	ret    
  20a8df:	48 8d 45 c0          	lea    rax,[rbp-0x40]
  20a8e3:	48 8d 4d 9f          	lea    rcx,[rbp-0x61]
            return mem.readInt(bytes, T, endian);
  20a8e7:	8a 55 a7             	mov    dl,BYTE PTR [rbp-0x59]
  20a8ea:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
  20a8ee:	48 c7 45 c8 08 00 00 	mov    QWORD PTR [rbp-0x38],0x8
  20a8f5:	00 
  20a8f6:	0f b6 f2             	movzx  esi,dl
  20a8f9:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  20a8fd:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  20a904:	e8 b7 0b 00 00       	call   20b4c0 <readInt.19>
  20a909:	66 c7 45 b0 00 00    	mov    WORD PTR [rbp-0x50],0x0
  20a90f:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  20a913:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20a917:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  20a91e:	48 89 01             	mov    QWORD PTR [rcx],rax
  20a921:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  20a925:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20a929:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  20a92d:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  20a934:	5d                   	pop    rbp
  20a935:	c3                   	ret    
  20a936:	48 8d 3d c3 a9 01 00 	lea    rdi,[rip+0x1a9c3]        # 225300 <__unnamed_4>
  20a93d:	31 c0                	xor    eax,eax
  20a93f:	89 c6                	mov    esi,eax
            try self.readNoEof(bytes[0..]);
  20a941:	e8 7a 87 ff ff       	call   2030c0 <panic>
  20a946:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
  20a94a:	48 8d 45 9f          	lea    rax,[rbp-0x61]
  20a94e:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  20a952:	48 c7 45 f8 08 00 00 	mov    QWORD PTR [rbp-0x8],0x8
  20a959:	00 
  20a95a:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  20a95e:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  20a962:	e8 59 f9 ff ff       	call   20a2c0 <InStream(ReadError)_readNoEof>
  20a967:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  20a96b:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  20a970:	0f 85 27 ff ff ff    	jne    20a89d <InStream(ReadError)_readInt.16+0x4d>
  20a976:	e9 64 ff ff ff       	jmp    20a8df <InStream(ReadError)_readInt.16+0x8f>
  20a97b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000020a980 <add>:
pub fn mul(comptime T: type, a: T, b: T) (error{Overflow}!T) {
    var answer: T = undefined;
    return if (@mulWithOverflow(T, a, b, &answer)) error.Overflow else answer;
}

pub fn add(comptime T: type, a: T, b: T) (error{Overflow}!T) {
  20a980:	55                   	push   rbp
  20a981:	48 89 e5             	mov    rbp,rsp
  20a984:	53                   	push   rbx
  20a985:	48 83 ec 58          	sub    rsp,0x58
  20a989:	48 89 f8             	mov    rax,rdi
  20a98c:	41 b8 aa 00 00 00    	mov    r8d,0xaa
  20a992:	41 b9 08 00 00 00    	mov    r9d,0x8
  20a998:	45 89 ca             	mov    r10d,r9d
  20a99b:	4c 8d 5d d0          	lea    r11,[rbp-0x30]
  20a99f:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  20a9a3:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
    var answer: T = undefined;
  20a9a7:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  20a9ab:	4c 89 df             	mov    rdi,r11
  20a9ae:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
  20a9b2:	44 89 c6             	mov    esi,r8d
  20a9b5:	4c 89 d2             	mov    rdx,r10
  20a9b8:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  20a9bc:	e8 ef 72 01 00       	call   221cb0 <memset>
    return if (@addWithOverflow(T, a, b, &answer)) error.Overflow else answer;
  20a9c1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20a9c5:	48 03 45 d8          	add    rax,QWORD PTR [rbp-0x28]
  20a9c9:	0f 92 c3             	setb   bl
  20a9cc:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  20a9d0:	f6 c3 01             	test   bl,0x1
  20a9d3:	75 02                	jne    20a9d7 <add+0x57>
  20a9d5:	eb 0d                	jmp    20a9e4 <add+0x64>
  20a9d7:	48 8d 05 42 79 ff ff 	lea    rax,[rip+0xffffffffffff7942]        # 202320 <__unnamed_130>
  20a9de:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  20a9e2:	eb 16                	jmp    20a9fa <add+0x7a>
  20a9e4:	48 8d 45 e8          	lea    rax,[rbp-0x18]
  20a9e8:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  20a9ec:	66 c7 45 e8 00 00    	mov    WORD PTR [rbp-0x18],0x0
  20a9f2:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  20a9f6:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  20a9fa:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20a9fe:	66 83 38 00          	cmp    WORD PTR [rax],0x0
  20aa02:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  20aa06:	74 0b                	je     20aa13 <add+0x93>
  20aa08:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  20aa0c:	e8 3f 9a ff ff       	call   204450 <__zig_return_error>
  20aa11:	eb 02                	jmp    20aa15 <add+0x95>
  20aa13:	eb 00                	jmp    20aa15 <add+0x95>
  20aa15:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  20aa19:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  20aa1c:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  20aa20:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  20aa23:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  20aa27:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  20aa2b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  20aa2f:	48 83 c4 58          	add    rsp,0x58
  20aa33:	5b                   	pop    rbx
  20aa34:	5d                   	pop    rbp
  20aa35:	c3                   	ret    
  20aa36:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  20aa3d:	00 00 00 

000000000020aa40 <File_getEndPos>:
    pub fn getEndPos(self: *File) !usize {
  20aa40:	55                   	push   rbp
  20aa41:	48 89 e5             	mov    rbp,rsp
  20aa44:	48 81 ec 10 02 00 00 	sub    rsp,0x210
  20aa4b:	48 89 f8             	mov    rax,rdi
  20aa4e:	48 8d 8d 68 ff ff ff 	lea    rcx,[rbp-0x98]
  20aa55:	48 89 95 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rdx
            const stat = try os.posixFStat(self.handle);
  20aa5c:	48 8b 95 a8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x158]
  20aa63:	8b 12                	mov    edx,DWORD PTR [rdx]
  20aa65:	48 89 bd 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rdi
  20aa6c:	48 89 cf             	mov    rdi,rcx
  20aa6f:	48 89 b5 08 fe ff ff 	mov    QWORD PTR [rbp-0x1f8],rsi
  20aa76:	48 89 85 00 fe ff ff 	mov    QWORD PTR [rbp-0x200],rax
  20aa7d:	e8 ee 0b 00 00       	call   20b670 <posixFStat>
  20aa82:	66 83 bd 68 ff ff ff 	cmp    WORD PTR [rbp-0x98],0x0
  20aa89:	00 
  20aa8a:	74 54                	je     20aae0 <File_getEndPos+0xa0>
  20aa8c:	66 8b 85 68 ff ff ff 	mov    ax,WORD PTR [rbp-0x98]
  20aa93:	48 8b bd 08 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1f8]
  20aa9a:	66 89 85 fe fd ff ff 	mov    WORD PTR [rbp-0x202],ax
  20aaa1:	e8 aa 99 ff ff       	call   204450 <__zig_return_error>
  20aaa6:	66 8b 85 fe fd ff ff 	mov    ax,WORD PTR [rbp-0x202]
  20aaad:	66 89 85 c0 fe ff ff 	mov    WORD PTR [rbp-0x140],ax
  20aab4:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  20aabb:	48 8b 8d 10 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1f0]
  20aac2:	48 89 39             	mov    QWORD PTR [rcx],rdi
  20aac5:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  20aacc:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  20aad0:	48 8b 85 00 fe ff ff 	mov    rax,QWORD PTR [rbp-0x200]
  20aad7:	48 81 c4 10 02 00 00 	add    rsp,0x210
  20aade:	5d                   	pop    rbp
  20aadf:	c3                   	ret    
  20aae0:	b8 90 00 00 00       	mov    eax,0x90
  20aae5:	89 c2                	mov    edx,eax
  20aae7:	48 8d 8d 18 fe ff ff 	lea    rcx,[rbp-0x1e8]
  20aaee:	48 8d b5 68 ff ff ff 	lea    rsi,[rbp-0x98]
  20aaf5:	48 83 c6 08          	add    rsi,0x8
  20aaf9:	48 89 cf             	mov    rdi,rcx
  20aafc:	e8 ff 71 01 00       	call   221d00 <memcpy>
            return @intCast(usize, stat.size);
  20ab01:	48 8b 8d 48 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1b8]
  20ab08:	48 83 f9 00          	cmp    rcx,0x0
  20ab0c:	48 89 8d f0 fd ff ff 	mov    QWORD PTR [rbp-0x210],rcx
  20ab13:	7c 43                	jl     20ab58 <File_getEndPos+0x118>
  20ab15:	66 c7 85 b0 fe ff ff 	mov    WORD PTR [rbp-0x150],0x0
  20ab1c:	00 00 
  20ab1e:	48 8b 85 f0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x210]
  20ab25:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
  20ab2c:	48 8b 8d b0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x150]
  20ab33:	48 8b 95 10 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1f0]
  20ab3a:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  20ab3d:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  20ab44:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  20ab48:	48 8b 85 00 fe ff ff 	mov    rax,QWORD PTR [rbp-0x200]
  20ab4f:	48 81 c4 10 02 00 00 	add    rsp,0x210
  20ab56:	5d                   	pop    rbp
  20ab57:	c3                   	ret    
  20ab58:	48 8d 3d b9 a9 01 00 	lea    rdi,[rip+0x1a9b9]        # 225518 <__unnamed_52>
  20ab5f:	31 c0                	xor    eax,eax
  20ab61:	89 c6                	mov    esi,eax
  20ab63:	e8 58 85 ff ff       	call   2030c0 <panic>
  20ab68:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  20ab6f:	00 

000000000020ab70 <File_seekTo>:
    pub fn seekTo(self: *File, pos: usize) !void {
  20ab70:	55                   	push   rbp
  20ab71:	48 89 e5             	mov    rbp,rsp
  20ab74:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  20ab7b:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  20ab7f:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  20ab83:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
                const ipos = try math.cast(isize, pos);
  20ab87:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  20ab8b:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  20ab8f:	48 89 c7             	mov    rdi,rax
  20ab92:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  20ab96:	e8 f5 0c 00 00       	call   20b890 <cast>
  20ab9b:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  20aba0:	74 1e                	je     20abc0 <File_seekTo+0x50>
  20aba2:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  20aba6:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  20abaa:	66 89 45 ae          	mov    WORD PTR [rbp-0x52],ax
  20abae:	e8 9d 98 ff ff       	call   204450 <__zig_return_error>
  20abb3:	66 8b 45 ae          	mov    ax,WORD PTR [rbp-0x52]
  20abb7:	48 81 c4 90 00 00 00 	add    rsp,0x90
  20abbe:	5d                   	pop    rbp
  20abbf:	c3                   	ret    
  20abc0:	31 c0                	xor    eax,eax
  20abc2:	89 c2                	mov    edx,eax
  20abc4:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  20abc8:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
                const result = posix.lseek(self.handle, ipos, posix.SEEK_SET);
  20abcc:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  20abd0:	8b 39                	mov    edi,DWORD PTR [rcx]
  20abd2:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  20abd6:	e8 b5 06 00 00       	call   20b290 <lseek>
  20abdb:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
                const err = posix.getErrno(result);
  20abdf:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  20abe3:	e8 08 05 00 00       	call   20b0f0 <getErrno>
  20abe8:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                if (err > 0) {
  20abec:	48 83 7d b8 00       	cmp    QWORD PTR [rbp-0x48],0x0
  20abf1:	0f 86 dc 00 00 00    	jbe    20acd3 <File_seekTo+0x163>
                    return switch (err) {
  20abf7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  20abfb:	48 89 c1             	mov    rcx,rax
  20abfe:	48 83 e9 06          	sub    rcx,0x6
  20ac02:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  20ac06:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
  20ac0a:	0f 84 8f 00 00 00    	je     20ac9f <File_seekTo+0x12f>
  20ac10:	eb 00                	jmp    20ac12 <File_seekTo+0xa2>
  20ac12:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  20ac16:	48 83 e8 09          	sub    rax,0x9
  20ac1a:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  20ac1e:	74 4b                	je     20ac6b <File_seekTo+0xfb>
  20ac20:	eb 00                	jmp    20ac22 <File_seekTo+0xb2>
  20ac22:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  20ac26:	48 83 e8 16          	sub    rax,0x16
  20ac2a:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  20ac2e:	74 48                	je     20ac78 <File_seekTo+0x108>
  20ac30:	eb 00                	jmp    20ac32 <File_seekTo+0xc2>
  20ac32:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  20ac36:	48 83 e8 1d          	sub    rax,0x1d
  20ac3a:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  20ac3e:	74 52                	je     20ac92 <File_seekTo+0x122>
  20ac40:	eb 00                	jmp    20ac42 <File_seekTo+0xd2>
  20ac42:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  20ac46:	48 83 e8 4b          	sub    rax,0x4b
  20ac4a:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  20ac51:	74 32                	je     20ac85 <File_seekTo+0x115>
  20ac53:	eb 00                	jmp    20ac55 <File_seekTo+0xe5>
                        else => os.unexpectedErrorPosix(err),
  20ac55:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  20ac59:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  20ac5d:	e8 2e 05 00 00       	call   20b190 <unexpectedErrorPosix>
                    return switch (err) {
  20ac62:	66 89 85 76 ff ff ff 	mov    WORD PTR [rbp-0x8a],ax
  20ac69:	eb 41                	jmp    20acac <File_seekTo+0x13c>
  20ac6b:	66 b8 1c 00          	mov    ax,0x1c
  20ac6f:	66 89 85 76 ff ff ff 	mov    WORD PTR [rbp-0x8a],ax
  20ac76:	eb 34                	jmp    20acac <File_seekTo+0x13c>
  20ac78:	66 b8 20 00          	mov    ax,0x20
  20ac7c:	66 89 85 76 ff ff ff 	mov    WORD PTR [rbp-0x8a],ax
  20ac83:	eb 27                	jmp    20acac <File_seekTo+0x13c>
  20ac85:	66 b8 20 00          	mov    ax,0x20
  20ac89:	66 89 85 76 ff ff ff 	mov    WORD PTR [rbp-0x8a],ax
  20ac90:	eb 1a                	jmp    20acac <File_seekTo+0x13c>
  20ac92:	66 b8 20 00          	mov    ax,0x20
  20ac96:	66 89 85 76 ff ff ff 	mov    WORD PTR [rbp-0x8a],ax
  20ac9d:	eb 0d                	jmp    20acac <File_seekTo+0x13c>
  20ac9f:	66 b8 20 00          	mov    ax,0x20
  20aca3:	66 89 85 76 ff ff ff 	mov    WORD PTR [rbp-0x8a],ax
  20acaa:	eb 00                	jmp    20acac <File_seekTo+0x13c>
  20acac:	66 8b 85 76 ff ff ff 	mov    ax,WORD PTR [rbp-0x8a]
  20acb3:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  20acb7:	66 89 85 74 ff ff ff 	mov    WORD PTR [rbp-0x8c],ax
  20acbe:	e8 8d 97 ff ff       	call   204450 <__zig_return_error>
  20acc3:	66 8b 85 74 ff ff ff 	mov    ax,WORD PTR [rbp-0x8c]
  20acca:	48 81 c4 90 00 00 00 	add    rsp,0x90
  20acd1:	5d                   	pop    rbp
  20acd2:	c3                   	ret    
                if (err > 0) {
  20acd3:	eb 00                	jmp    20acd5 <File_seekTo+0x165>
  20acd5:	31 c0                	xor    eax,eax
  20acd7:	66 89 c1             	mov    cx,ax
    pub fn seekTo(self: *File, pos: usize) !void {
  20acda:	66 89 c8             	mov    ax,cx
  20acdd:	48 81 c4 90 00 00 00 	add    rsp,0x90
  20ace4:	5d                   	pop    rbp
  20ace5:	c3                   	ret    
  20ace6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  20aced:	00 00 00 

000000000020acf0 <Allocator_alloc.17>:
    pub fn alloc(self: *Allocator, comptime T: type, n: usize) ![]T {
  20acf0:	55                   	push   rbp
  20acf1:	48 89 e5             	mov    rbp,rsp
  20acf4:	48 83 ec 40          	sub    rsp,0x40
  20acf8:	48 89 f8             	mov    rax,rdi
  20acfb:	4c 8d 45 e8          	lea    r8,[rbp-0x18]
  20acff:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  20ad03:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
        return self.alignedAlloc(T, @alignOf(T), n);
  20ad07:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  20ad0b:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  20ad0f:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
  20ad13:	4c 89 c7             	mov    rdi,r8
  20ad16:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  20ad1a:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  20ad1e:	e8 fd 0b 00 00       	call   20b920 <Allocator_alignedAlloc>
  20ad23:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  20ad28:	74 0b                	je     20ad35 <Allocator_alloc.17+0x45>
  20ad2a:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20ad2e:	e8 1d 97 ff ff       	call   204450 <__zig_return_error>
  20ad33:	eb 02                	jmp    20ad37 <Allocator_alloc.17+0x47>
  20ad35:	eb 00                	jmp    20ad37 <Allocator_alloc.17+0x47>
  20ad37:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20ad3b:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  20ad3f:	48 89 01             	mov    QWORD PTR [rcx],rax
  20ad42:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20ad46:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20ad4a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20ad4e:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  20ad52:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  20ad56:	48 83 c4 40          	add    rsp,0x40
  20ad5a:	5d                   	pop    rbp
  20ad5b:	c3                   	ret    
  20ad5c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000020ad60 <Allocator_free>:
    pub fn free(self: *Allocator, memory: var) void {
  20ad60:	55                   	push   rbp
  20ad61:	48 89 e5             	mov    rbp,rsp
  20ad64:	48 83 ec 60          	sub    rsp,0x60
  20ad68:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
        const bytes = @sliceToBytes(memory);
  20ad6c:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  20ad6f:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  20ad73:	48 8b 76 08          	mov    rsi,QWORD PTR [rsi+0x8]
  20ad77:	48 c1 e6 06          	shl    rsi,0x6
  20ad7b:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  20ad7f:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20ad83:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  20ad87:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20ad8b:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        if (bytes.len == 0) return;
  20ad8f:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
  20ad94:	75 06                	jne    20ad9c <Allocator_free+0x3c>
  20ad96:	48 83 c4 60          	add    rsp,0x60
  20ad9a:	5d                   	pop    rbp
  20ad9b:	c3                   	ret    
  20ad9c:	31 c0                	xor    eax,eax
  20ad9e:	89 c1                	mov    ecx,eax
        const non_const_ptr = @intToPtr([*]u8, @ptrToInt(bytes.ptr));
  20ada0:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  20ada4:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
        self.freeFn(self, non_const_ptr[0..bytes.len]);
  20ada8:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  20adac:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  20adb0:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  20adb4:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  20adb8:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
  20adbc:	48 39 f1             	cmp    rcx,rsi
  20adbf:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
  20adc3:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
  20adc7:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  20adcb:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  20adcf:	76 10                	jbe    20ade1 <Allocator_free+0x81>
  20add1:	48 8d 3d 28 a5 01 00 	lea    rdi,[rip+0x1a528]        # 225300 <__unnamed_4>
  20add8:	31 c0                	xor    eax,eax
  20adda:	89 c6                	mov    esi,eax
  20addc:	e8 df 82 ff ff       	call   2030c0 <panic>
  20ade1:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
  20ade5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  20ade9:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  20aded:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  20adf1:	48 83 e9 00          	sub    rcx,0x0
  20adf5:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  20adf9:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  20adfd:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  20ae01:	ff d1                	call   rcx
    pub fn free(self: *Allocator, memory: var) void {
  20ae03:	48 83 c4 60          	add    rsp,0x60
  20ae07:	5d                   	pop    rbp
  20ae08:	c3                   	ret    
  20ae09:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

000000000020ae10 <File_read>:
    pub fn read(self: *File, buffer: []u8) ReadError!usize {
  20ae10:	55                   	push   rbp
  20ae11:	48 89 e5             	mov    rbp,rsp
  20ae14:	48 81 ec c0 00 00 00 	sub    rsp,0xc0
  20ae1b:	48 89 f8             	mov    rax,rdi
  20ae1e:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
            var index: usize = 0;
  20ae22:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
  20ae29:	00 
  20ae2a:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  20ae2e:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
  20ae32:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
  20ae36:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
            while (index < buffer.len) {
  20ae3a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  20ae3e:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  20ae42:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  20ae46:	0f 83 c3 01 00 00    	jae    20b00f <File_read+0x1ff>
                const amt_read = posix.read(self.handle, buffer.ptr + index, buffer.len - index);
  20ae4c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20ae50:	8b 38                	mov    edi,DWORD PTR [rax]
  20ae52:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  20ae56:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  20ae59:	48 03 4d c0          	add    rcx,QWORD PTR [rbp-0x40]
  20ae5d:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
  20ae61:	48 2b 55 c0          	sub    rdx,QWORD PTR [rbp-0x40]
  20ae65:	40 0f 92 c6          	setb   sil
  20ae69:	89 7d 8c             	mov    DWORD PTR [rbp-0x74],edi
  20ae6c:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
  20ae70:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
  20ae77:	40 88 b5 77 ff ff ff 	mov    BYTE PTR [rbp-0x89],sil
  20ae7e:	0f 82 b9 01 00 00    	jb     20b03d <File_read+0x22d>
  20ae84:	e9 c4 01 00 00       	jmp    20b04d <File_read+0x23d>
                    switch (read_err) {
  20ae89:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20ae8d:	48 83 c0 fc          	add    rax,0xfffffffffffffffc
  20ae91:	48 89 c1             	mov    rcx,rax
  20ae94:	48 83 e9 12          	sub    rcx,0x12
  20ae98:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  20ae9f:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
  20aea6:	77 17                	ja     20aebf <File_read+0xaf>
  20aea8:	48 8d 05 f1 52 ff ff 	lea    rax,[rip+0xffffffffffff52f1]        # 2001a0 <arch-0x393>
  20aeaf:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  20aeb6:	48 63 14 88          	movsxd rdx,DWORD PTR [rax+rcx*4]
  20aeba:	48 01 c2             	add    rdx,rax
  20aebd:	ff e2                	jmp    rdx
                        else => return os.unexpectedErrorPosix(read_err),
  20aebf:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  20aec3:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  20aec7:	e8 c4 02 00 00       	call   20b190 <unexpectedErrorPosix>
  20aecc:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  20aed0:	66 89 85 5e ff ff ff 	mov    WORD PTR [rbp-0xa2],ax
  20aed7:	e8 74 95 ff ff       	call   204450 <__zig_return_error>
  20aedc:	66 8b 85 5e ff ff ff 	mov    ax,WORD PTR [rbp-0xa2]
  20aee3:	66 89 45 f0          	mov    WORD PTR [rbp-0x10],ax
  20aee7:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20aeeb:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  20aeef:	48 89 37             	mov    QWORD PTR [rdi],rsi
  20aef2:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20aef6:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  20aefa:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  20aefe:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  20af05:	5d                   	pop    rbp
  20af06:	c3                   	ret    
                        posix.EINTR => continue,
  20af07:	e9 2e ff ff ff       	jmp    20ae3a <File_read+0x2a>
  20af0c:	48 8d 3d ad a4 01 00 	lea    rdi,[rip+0x1a4ad]        # 2253c0 <__unnamed_7>
  20af13:	31 c0                	xor    eax,eax
  20af15:	89 c6                	mov    esi,eax
                        posix.EINVAL => unreachable,
  20af17:	e8 a4 81 ff ff       	call   2030c0 <panic>
  20af1c:	48 8d 3d 9d a4 01 00 	lea    rdi,[rip+0x1a49d]        # 2253c0 <__unnamed_7>
  20af23:	31 c0                	xor    eax,eax
  20af25:	89 c6                	mov    esi,eax
                        posix.EFAULT => unreachable,
  20af27:	e8 94 81 ff ff       	call   2030c0 <panic>
                        posix.EBADF => return error.BadFd,
  20af2c:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  20af30:	e8 1b 95 ff ff       	call   204450 <__zig_return_error>
  20af35:	48 8b 3d 04 74 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff7404]        # 202340 <__unnamed_53>
  20af3c:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  20af40:	48 89 38             	mov    QWORD PTR [rax],rdi
  20af43:	48 8b 3d fe 73 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff73fe]        # 202348 <__unnamed_53+0x8>
  20af4a:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  20af4e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  20af52:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  20af59:	5d                   	pop    rbp
  20af5a:	c3                   	ret    
                        posix.EIO => return error.Io,
  20af5b:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  20af5f:	e8 ec 94 ff ff       	call   204450 <__zig_return_error>
  20af64:	48 8b 3d f5 73 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff73f5]        # 202360 <__unnamed_54>
  20af6b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  20af6f:	48 89 38             	mov    QWORD PTR [rax],rdi
  20af72:	48 8b 3d ef 73 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff73ef]        # 202368 <__unnamed_54+0x8>
  20af79:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  20af7d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  20af81:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  20af88:	5d                   	pop    rbp
  20af89:	c3                   	ret    
                        posix.EISDIR => return error.IsDir,
  20af8a:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  20af8e:	e8 bd 94 ff ff       	call   204450 <__zig_return_error>
  20af93:	48 8b 3d d6 73 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff73d6]        # 202370 <__unnamed_55>
  20af9a:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  20af9e:	48 89 38             	mov    QWORD PTR [rax],rdi
  20afa1:	48 8b 3d d0 73 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff73d0]        # 202378 <__unnamed_55+0x8>
  20afa8:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  20afac:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  20afb0:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  20afb7:	5d                   	pop    rbp
  20afb8:	c3                   	ret    
                if (read_err > 0) {
  20afb9:	eb 00                	jmp    20afbb <File_read+0x1ab>
                if (amt_read == 0) return index;
  20afbb:	48 83 7d b8 00       	cmp    QWORD PTR [rbp-0x48],0x0
  20afc0:	75 2e                	jne    20aff0 <File_read+0x1e0>
  20afc2:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  20afc6:	66 c7 45 e0 00 00    	mov    WORD PTR [rbp-0x20],0x0
  20afcc:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  20afd0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20afd4:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  20afd8:	48 89 01             	mov    QWORD PTR [rcx],rax
  20afdb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20afdf:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20afe3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  20afe7:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  20afee:	5d                   	pop    rbp
  20afef:	c3                   	ret    
                index += amt_read;
  20aff0:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  20aff4:	48 03 45 b8          	add    rax,QWORD PTR [rbp-0x48]
  20aff8:	0f 92 c1             	setb   cl
  20affb:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
  20b002:	88 8d 4f ff ff ff    	mov    BYTE PTR [rbp-0xb1],cl
  20b008:	72 77                	jb     20b081 <File_read+0x271>
  20b00a:	e9 82 00 00 00       	jmp    20b091 <File_read+0x281>
            return index;
  20b00f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  20b013:	66 c7 45 d0 00 00    	mov    WORD PTR [rbp-0x30],0x0
  20b019:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  20b01d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20b021:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  20b025:	48 89 01             	mov    QWORD PTR [rcx],rax
  20b028:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  20b02c:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20b030:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  20b034:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  20b03b:	5d                   	pop    rbp
  20b03c:	c3                   	ret    
  20b03d:	48 8d 3d d4 a2 01 00 	lea    rdi,[rip+0x1a2d4]        # 225318 <__unnamed_5>
  20b044:	31 c0                	xor    eax,eax
  20b046:	89 c6                	mov    esi,eax
                const amt_read = posix.read(self.handle, buffer.ptr + index, buffer.len - index);
  20b048:	e8 73 80 ff ff       	call   2030c0 <panic>
  20b04d:	8b 7d 8c             	mov    edi,DWORD PTR [rbp-0x74]
  20b050:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  20b054:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
  20b05b:	e8 50 00 00 00       	call   20b0b0 <read>
  20b060:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                const read_err = posix.getErrno(amt_read);
  20b064:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  20b068:	e8 83 00 00 00       	call   20b0f0 <getErrno>
  20b06d:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
                if (read_err > 0) {
  20b071:	48 83 7d b0 00       	cmp    QWORD PTR [rbp-0x50],0x0
  20b076:	0f 87 0d fe ff ff    	ja     20ae89 <File_read+0x79>
  20b07c:	e9 38 ff ff ff       	jmp    20afb9 <File_read+0x1a9>
  20b081:	48 8d 3d 90 a2 01 00 	lea    rdi,[rip+0x1a290]        # 225318 <__unnamed_5>
  20b088:	31 c0                	xor    eax,eax
  20b08a:	89 c6                	mov    esi,eax
                index += amt_read;
  20b08c:	e8 2f 80 ff ff       	call   2030c0 <panic>
  20b091:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  20b098:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
            while (index < buffer.len) {
  20b09c:	e9 99 fd ff ff       	jmp    20ae3a <File_read+0x2a>
  20b0a1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20b0a8:	0f 1f 84 00 00 00 00 
  20b0af:	00 

000000000020b0b0 <read>:
pub fn read(fd: i32, buf: [*]u8, count: usize) usize {
  20b0b0:	55                   	push   rbp
  20b0b1:	48 89 e5             	mov    rbp,rsp
  20b0b4:	48 83 ec 20          	sub    rsp,0x20
  20b0b8:	31 c0                	xor    eax,eax
  20b0ba:	89 c1                	mov    ecx,eax
  20b0bc:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  20b0bf:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  20b0c3:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    return syscall3(SYS_read, @intCast(usize, fd), @ptrToInt(buf), count);
  20b0c7:	48 63 75 fc          	movsxd rsi,DWORD PTR [rbp-0x4]
  20b0cb:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  20b0cf:	4c 8b 45 e8          	mov    r8,QWORD PTR [rbp-0x18]
  20b0d3:	48 89 cf             	mov    rdi,rcx
  20b0d6:	4c 89 c1             	mov    rcx,r8
  20b0d9:	e8 f2 01 00 00       	call   20b2d0 <syscall3>
  20b0de:	48 83 c4 20          	add    rsp,0x20
  20b0e2:	5d                   	pop    rbp
  20b0e3:	c3                   	ret    
  20b0e4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20b0eb:	00 00 00 00 00 

000000000020b0f0 <getErrno>:
pub fn getErrno(r: usize) usize {
  20b0f0:	55                   	push   rbp
  20b0f1:	48 89 e5             	mov    rbp,rsp
  20b0f4:	48 83 ec 30          	sub    rsp,0x30
  20b0f8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    const signed_r = @bitCast(isize, r);
  20b0fc:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  20b100:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
    return if (signed_r > -4096 and signed_r < 0) @intCast(usize, -signed_r) else 0;
  20b104:	48 81 7d f0 00 f0 ff 	cmp    QWORD PTR [rbp-0x10],0xfffffffffffff000
  20b10b:	ff 
  20b10c:	0f 9f c0             	setg   al
  20b10f:	a8 01                	test   al,0x1
  20b111:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
  20b114:	75 02                	jne    20b118 <getErrno+0x28>
  20b116:	eb 0b                	jmp    20b123 <getErrno+0x33>
  20b118:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
  20b11d:	0f 9c c0             	setl   al
  20b120:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
  20b123:	8a 45 ef             	mov    al,BYTE PTR [rbp-0x11]
  20b126:	a8 01                	test   al,0x1
  20b128:	75 02                	jne    20b12c <getErrno+0x3c>
  20b12a:	eb 16                	jmp    20b142 <getErrno+0x52>
  20b12c:	31 c0                	xor    eax,eax
  20b12e:	89 c1                	mov    ecx,eax
  20b130:	48 2b 4d f0          	sub    rcx,QWORD PTR [rbp-0x10]
  20b134:	0f 90 c2             	seto   dl
  20b137:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  20b13b:	88 55 df             	mov    BYTE PTR [rbp-0x21],dl
  20b13e:	70 16                	jo     20b156 <getErrno+0x66>
  20b140:	eb 24                	jmp    20b166 <getErrno+0x76>
  20b142:	31 c0                	xor    eax,eax
  20b144:	89 c1                	mov    ecx,eax
  20b146:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  20b14a:	eb 00                	jmp    20b14c <getErrno+0x5c>
  20b14c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20b150:	48 83 c4 30          	add    rsp,0x30
  20b154:	5d                   	pop    rbp
  20b155:	c3                   	ret    
  20b156:	48 8d 3d bb a1 01 00 	lea    rdi,[rip+0x1a1bb]        # 225318 <__unnamed_5>
  20b15d:	31 c0                	xor    eax,eax
  20b15f:	89 c6                	mov    esi,eax
  20b161:	e8 5a 7f ff ff       	call   2030c0 <panic>
  20b166:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20b16a:	48 83 f8 00          	cmp    rax,0x0
  20b16e:	7c 0a                	jl     20b17a <getErrno+0x8a>
  20b170:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20b174:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  20b178:	eb d2                	jmp    20b14c <getErrno+0x5c>
  20b17a:	48 8d 3d 97 a3 01 00 	lea    rdi,[rip+0x1a397]        # 225518 <__unnamed_52>
  20b181:	31 c0                	xor    eax,eax
  20b183:	89 c6                	mov    esi,eax
  20b185:	e8 36 7f ff ff       	call   2030c0 <panic>
  20b18a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000020b190 <unexpectedErrorPosix>:
pub fn unexpectedErrorPosix(errno: usize) UnexpectedError {
  20b190:	55                   	push   rbp
  20b191:	48 89 e5             	mov    rbp,rsp
  20b194:	48 83 ec 10          	sub    rsp,0x10
  20b198:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
    return error.Unexpected;
  20b19c:	e8 af 92 ff ff       	call   204450 <__zig_return_error>
  20b1a1:	66 b8 05 00          	mov    ax,0x5
  20b1a5:	48 83 c4 10          	add    rsp,0x10
  20b1a9:	5d                   	pop    rbp
  20b1aa:	c3                   	ret    
  20b1ab:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000020b1b0 <FileInStream_readFn>:
    fn readFn(in_stream: *Stream, buffer: []u8) Error!usize {
  20b1b0:	55                   	push   rbp
  20b1b1:	48 89 e5             	mov    rbp,rsp
  20b1b4:	48 83 ec 40          	sub    rsp,0x40
  20b1b8:	48 89 f8             	mov    rax,rdi
  20b1bb:	4c 8d 45 f0          	lea    r8,[rbp-0x10]
  20b1bf:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
        const self = @fieldParentPtr(FileInStream, "stream", in_stream);
  20b1c3:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  20b1c7:	48 83 ea 08          	sub    rdx,0x8
  20b1cb:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
        return self.file.read(buffer);
  20b1cf:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  20b1d3:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
  20b1d6:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  20b1da:	4c 89 c7             	mov    rdi,r8
  20b1dd:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  20b1e1:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  20b1e5:	e8 26 fc ff ff       	call   20ae10 <File_read>
  20b1ea:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  20b1ef:	74 0b                	je     20b1fc <FileInStream_readFn+0x4c>
  20b1f1:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  20b1f5:	e8 56 92 ff ff       	call   204450 <__zig_return_error>
  20b1fa:	eb 02                	jmp    20b1fe <FileInStream_readFn+0x4e>
  20b1fc:	eb 00                	jmp    20b1fe <FileInStream_readFn+0x4e>
  20b1fe:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20b202:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  20b206:	48 89 01             	mov    QWORD PTR [rcx],rax
  20b209:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20b20d:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20b211:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20b215:	48 83 c4 40          	add    rsp,0x40
  20b219:	5d                   	pop    rbp
  20b21a:	c3                   	ret    
  20b21b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000020b220 <InStream(ReadError)_read>:
        pub fn read(self: *Self, buffer: []u8) !usize {
  20b220:	55                   	push   rbp
  20b221:	48 89 e5             	mov    rbp,rsp
  20b224:	48 83 ec 40          	sub    rsp,0x40
  20b228:	48 89 f8             	mov    rax,rdi
  20b22b:	4c 8d 45 f0          	lea    r8,[rbp-0x10]
  20b22f:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
            return self.readFn(self, buffer);
  20b233:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  20b237:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
  20b23a:	4c 8b 4d e8          	mov    r9,QWORD PTR [rbp-0x18]
  20b23e:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  20b242:	4c 89 c7             	mov    rdi,r8
  20b245:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  20b249:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  20b24d:	4c 89 ca             	mov    rdx,r9
  20b250:	4c 8b 45 d0          	mov    r8,QWORD PTR [rbp-0x30]
  20b254:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  20b258:	41 ff d0             	call   r8
  20b25b:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  20b260:	74 0b                	je     20b26d <InStream(ReadError)_read+0x4d>
  20b262:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  20b266:	e8 e5 91 ff ff       	call   204450 <__zig_return_error>
  20b26b:	eb 02                	jmp    20b26f <InStream(ReadError)_read+0x4f>
  20b26d:	eb 00                	jmp    20b26f <InStream(ReadError)_read+0x4f>
  20b26f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20b273:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  20b277:	48 89 01             	mov    QWORD PTR [rcx],rax
  20b27a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20b27e:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20b282:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20b286:	48 83 c4 40          	add    rsp,0x40
  20b28a:	5d                   	pop    rbp
  20b28b:	c3                   	ret    
  20b28c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000020b290 <lseek>:
pub fn lseek(fd: i32, offset: isize, ref_pos: usize) usize {
  20b290:	55                   	push   rbp
  20b291:	48 89 e5             	mov    rbp,rsp
  20b294:	48 83 ec 20          	sub    rsp,0x20
  20b298:	b8 08 00 00 00       	mov    eax,0x8
  20b29d:	89 c1                	mov    ecx,eax
  20b29f:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  20b2a2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  20b2a6:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    return syscall3(SYS_lseek, @intCast(usize, fd), @bitCast(usize, offset), ref_pos);
  20b2aa:	48 63 75 fc          	movsxd rsi,DWORD PTR [rbp-0x4]
  20b2ae:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  20b2b2:	4c 8b 45 e8          	mov    r8,QWORD PTR [rbp-0x18]
  20b2b6:	48 89 cf             	mov    rdi,rcx
  20b2b9:	4c 89 c1             	mov    rcx,r8
  20b2bc:	e8 0f 00 00 00       	call   20b2d0 <syscall3>
  20b2c1:	48 83 c4 20          	add    rsp,0x20
  20b2c5:	5d                   	pop    rbp
  20b2c6:	c3                   	ret    
  20b2c7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  20b2ce:	00 00 

000000000020b2d0 <syscall3>:
        : "rcx", "r11"
    );
}

pub fn syscall3(number: usize, arg1: usize, arg2: usize, arg3: usize) usize {
  20b2d0:	55                   	push   rbp
  20b2d1:	48 89 e5             	mov    rbp,rsp
  20b2d4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  20b2d8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  20b2dc:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  20b2e0:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
    return asm volatile ("syscall"
        : [ret] "={rax}" (-> usize)
        : [number] "{rax}" (number),
  20b2e4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
          [arg1] "{rdi}" (arg1),
  20b2e8:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
          [arg2] "{rsi}" (arg2),
  20b2ec:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
          [arg3] "{rdx}" (arg3)
  20b2f0:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
    return asm volatile ("syscall"
  20b2f4:	0f 05                	syscall 
  20b2f6:	5d                   	pop    rbp
  20b2f7:	c3                   	ret    
  20b2f8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  20b2ff:	00 

000000000020b300 <readInt.18>:
pub fn readInt(bytes: []const u8, comptime T: type, endian: builtin.Endian) T {
  20b300:	55                   	push   rbp
  20b301:	48 89 e5             	mov    rbp,rsp
  20b304:	48 83 ec 70          	sub    rsp,0x70
  20b308:	40 88 f0             	mov    al,sil
  20b30b:	24 01                	and    al,0x1
  20b30d:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
    var result: T = 0;
  20b310:	66 c7 45 fc 00 00    	mov    WORD PTR [rbp-0x4],0x0
    switch (endian) {
  20b316:	8a 45 ff             	mov    al,BYTE PTR [rbp-0x1]
  20b319:	84 c0                	test   al,al
  20b31b:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  20b31f:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
  20b322:	0f 85 86 00 00 00    	jne    20b3ae <readInt.18+0xae>
  20b328:	eb 00                	jmp    20b32a <readInt.18+0x2a>
  20b32a:	8a 45 d7             	mov    al,BYTE PTR [rbp-0x29]
  20b32d:	f6 d0                	not    al
  20b32f:	a8 01                	test   al,0x1
  20b331:	0f 84 fb 00 00 00    	je     20b432 <readInt.18+0x132>
  20b337:	eb 00                	jmp    20b339 <readInt.18+0x39>
  20b339:	48 8d 7d fb          	lea    rdi,[rbp-0x5]
  20b33d:	be aa 00 00 00       	mov    esi,0xaa
  20b342:	b8 01 00 00 00       	mov    eax,0x1
  20b347:	89 c2                	mov    edx,eax
            for (bytes) |b| {
  20b349:	e8 62 69 01 00       	call   221cb0 <memset>
  20b34e:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  20b355:	00 
  20b356:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  20b35a:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
  20b35e:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  20b362:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20b366:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  20b36a:	48 39 c8             	cmp    rax,rcx
  20b36d:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  20b371:	73 36                	jae    20b3a9 <readInt.18+0xa9>
  20b373:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  20b377:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  20b37a:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  20b37e:	40 8a 34 11          	mov    sil,BYTE PTR [rcx+rdx*1]
  20b382:	40 88 75 fb          	mov    BYTE PTR [rbp-0x5],sil
                result = (result << 8) | b;
  20b386:	66 8b 7d fc          	mov    di,WORD PTR [rbp-0x4]
  20b38a:	66 c1 e7 08          	shl    di,0x8
  20b38e:	44 0f b6 45 fb       	movzx  r8d,BYTE PTR [rbp-0x5]
  20b393:	66 45 89 c1          	mov    r9w,r8w
  20b397:	66 44 09 cf          	or     di,r9w
  20b39b:	66 89 7d fc          	mov    WORD PTR [rbp-0x4],di
            for (bytes) |b| {
  20b39f:	48 83 c2 01          	add    rdx,0x1
  20b3a3:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  20b3a7:	eb b9                	jmp    20b362 <readInt.18+0x62>
    switch (endian) {
  20b3a9:	e9 94 00 00 00       	jmp    20b442 <readInt.18+0x142>
  20b3ae:	48 8d 7d ef          	lea    rdi,[rbp-0x11]
  20b3b2:	be aa 00 00 00       	mov    esi,0xaa
  20b3b7:	b8 01 00 00 00       	mov    eax,0x1
  20b3bc:	89 c2                	mov    edx,eax
            for (bytes) |b, index| {
  20b3be:	e8 ed 68 01 00       	call   221cb0 <memset>
  20b3c3:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  20b3ca:	00 
  20b3cb:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  20b3cf:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
  20b3d3:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
  20b3d7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20b3db:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  20b3df:	48 39 c8             	cmp    rax,rcx
  20b3e2:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  20b3e6:	73 48                	jae    20b430 <readInt.18+0x130>
  20b3e8:	b8 08 00 00 00       	mov    eax,0x8
  20b3ed:	89 c1                	mov    ecx,eax
  20b3ef:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  20b3f3:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
  20b3f6:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  20b3fa:	44 8a 04 3e          	mov    r8b,BYTE PTR [rsi+rdi*1]
  20b3fe:	44 88 45 ef          	mov    BYTE PTR [rbp-0x11],r8b
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  20b402:	66 44 8b 4d fc       	mov    r9w,WORD PTR [rbp-0x4]
  20b407:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
  20b40b:	66 41 89 c2          	mov    r10w,ax
  20b40f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20b413:	48 f7 e1             	mul    rcx
  20b416:	41 0f 90 c0          	seto   r8b
  20b41a:	66 44 89 55 ae       	mov    WORD PTR [rbp-0x52],r10w
  20b41f:	66 44 89 4d ac       	mov    WORD PTR [rbp-0x54],r9w
  20b424:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  20b428:	44 88 45 9f          	mov    BYTE PTR [rbp-0x61],r8b
  20b42c:	70 1e                	jo     20b44c <readInt.18+0x14c>
  20b42e:	eb 2c                	jmp    20b45c <readInt.18+0x15c>
    switch (endian) {
  20b430:	eb 10                	jmp    20b442 <readInt.18+0x142>
  20b432:	48 8d 3d 87 9f 01 00 	lea    rdi,[rip+0x19f87]        # 2253c0 <__unnamed_7>
  20b439:	31 c0                	xor    eax,eax
  20b43b:	89 c6                	mov    esi,eax
  20b43d:	e8 7e 7c ff ff       	call   2030c0 <panic>
    return result;
  20b442:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  20b446:	48 83 c4 70          	add    rsp,0x70
  20b44a:	5d                   	pop    rbp
  20b44b:	c3                   	ret    
  20b44c:	48 8d 3d c5 9e 01 00 	lea    rdi,[rip+0x19ec5]        # 225318 <__unnamed_5>
  20b453:	31 c0                	xor    eax,eax
  20b455:	89 c6                	mov    esi,eax
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  20b457:	e8 64 7c ff ff       	call   2030c0 <panic>
  20b45c:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  20b460:	88 c1                	mov    cl,al
  20b462:	89 c2                	mov    edx,eax
  20b464:	83 e2 0f             	and    edx,0xf
  20b467:	89 d6                	mov    esi,edx
  20b469:	48 39 f0             	cmp    rax,rsi
  20b46c:	88 4d 9e             	mov    BYTE PTR [rbp-0x62],cl
  20b46f:	75 31                	jne    20b4a2 <readInt.18+0x1a2>
  20b471:	8a 45 9e             	mov    al,BYTE PTR [rbp-0x62]
  20b474:	24 0f                	and    al,0xf
  20b476:	0f b6 c8             	movzx  ecx,al
  20b479:	66 89 ca             	mov    dx,cx
  20b47c:	66 89 d1             	mov    cx,dx
  20b47f:	66 8b 55 ae          	mov    dx,WORD PTR [rbp-0x52]
  20b483:	66 d3 e2             	shl    dx,cl
  20b486:	66 8b 75 ac          	mov    si,WORD PTR [rbp-0x54]
  20b48a:	66 09 d6             	or     si,dx
  20b48d:	66 89 75 fc          	mov    WORD PTR [rbp-0x4],si
            for (bytes) |b, index| {
  20b491:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  20b495:	48 83 c7 01          	add    rdi,0x1
  20b499:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  20b49d:	e9 35 ff ff ff       	jmp    20b3d7 <readInt.18+0xd7>
  20b4a2:	48 8d 3d ff 9e 01 00 	lea    rdi,[rip+0x19eff]        # 2253a8 <__unnamed_8>
  20b4a9:	31 c0                	xor    eax,eax
  20b4ab:	89 c6                	mov    esi,eax
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  20b4ad:	e8 0e 7c ff ff       	call   2030c0 <panic>
  20b4b2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20b4b9:	1f 84 00 00 00 00 00 

000000000020b4c0 <readInt.19>:
pub fn readInt(bytes: []const u8, comptime T: type, endian: builtin.Endian) T {
  20b4c0:	55                   	push   rbp
  20b4c1:	48 89 e5             	mov    rbp,rsp
  20b4c4:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  20b4cb:	40 88 f0             	mov    al,sil
  20b4ce:	24 01                	and    al,0x1
  20b4d0:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
    var result: T = 0;
  20b4d3:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  20b4da:	00 
    switch (endian) {
  20b4db:	8a 45 ff             	mov    al,BYTE PTR [rbp-0x1]
  20b4de:	84 c0                	test   al,al
  20b4e0:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  20b4e4:	88 45 c7             	mov    BYTE PTR [rbp-0x39],al
  20b4e7:	0f 85 83 00 00 00    	jne    20b570 <readInt.19+0xb0>
  20b4ed:	eb 00                	jmp    20b4ef <readInt.19+0x2f>
  20b4ef:	8a 45 c7             	mov    al,BYTE PTR [rbp-0x39]
  20b4f2:	f6 d0                	not    al
  20b4f4:	a8 01                	test   al,0x1
  20b4f6:	0f 84 f4 00 00 00    	je     20b5f0 <readInt.19+0x130>
  20b4fc:	eb 00                	jmp    20b4fe <readInt.19+0x3e>
  20b4fe:	48 8d 7d ef          	lea    rdi,[rbp-0x11]
  20b502:	be aa 00 00 00       	mov    esi,0xaa
  20b507:	b8 01 00 00 00       	mov    eax,0x1
  20b50c:	89 c2                	mov    edx,eax
            for (bytes) |b| {
  20b50e:	e8 9d 67 01 00       	call   221cb0 <memset>
  20b513:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  20b51a:	00 
  20b51b:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  20b51f:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
  20b523:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
  20b527:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20b52b:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  20b52f:	48 39 c8             	cmp    rax,rcx
  20b532:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  20b536:	73 33                	jae    20b56b <readInt.19+0xab>
  20b538:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20b53c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  20b53f:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  20b543:	40 8a 34 11          	mov    sil,BYTE PTR [rcx+rdx*1]
  20b547:	40 88 75 ef          	mov    BYTE PTR [rbp-0x11],sil
                result = (result << 8) | b;
  20b54b:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  20b54f:	48 c1 e1 08          	shl    rcx,0x8
  20b553:	0f b6 7d ef          	movzx  edi,BYTE PTR [rbp-0x11]
  20b557:	41 89 f8             	mov    r8d,edi
  20b55a:	4c 09 c1             	or     rcx,r8
  20b55d:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
            for (bytes) |b| {
  20b561:	48 83 c2 01          	add    rdx,0x1
  20b565:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  20b569:	eb bc                	jmp    20b527 <readInt.19+0x67>
    switch (endian) {
  20b56b:	e9 90 00 00 00       	jmp    20b600 <readInt.19+0x140>
  20b570:	48 8d 7d df          	lea    rdi,[rbp-0x21]
  20b574:	be aa 00 00 00       	mov    esi,0xaa
  20b579:	b8 01 00 00 00       	mov    eax,0x1
  20b57e:	89 c2                	mov    edx,eax
            for (bytes) |b, index| {
  20b580:	e8 2b 67 01 00       	call   221cb0 <memset>
  20b585:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
  20b58c:	00 
  20b58d:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  20b591:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
  20b595:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  20b599:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20b59d:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  20b5a1:	48 39 c8             	cmp    rax,rcx
  20b5a4:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  20b5a8:	73 44                	jae    20b5ee <readInt.19+0x12e>
  20b5aa:	b8 08 00 00 00       	mov    eax,0x8
  20b5af:	89 c1                	mov    ecx,eax
  20b5b1:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  20b5b5:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
  20b5b8:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  20b5bc:	44 8a 04 3e          	mov    r8b,BYTE PTR [rsi+rdi*1]
  20b5c0:	44 88 45 df          	mov    BYTE PTR [rbp-0x21],r8b
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  20b5c4:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20b5c8:	0f b6 45 df          	movzx  eax,BYTE PTR [rbp-0x21]
  20b5cc:	41 89 c1             	mov    r9d,eax
  20b5cf:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20b5d3:	48 f7 e1             	mul    rcx
  20b5d6:	41 0f 90 c0          	seto   r8b
  20b5da:	4c 89 4d 98          	mov    QWORD PTR [rbp-0x68],r9
  20b5de:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
  20b5e2:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  20b5e6:	44 88 45 87          	mov    BYTE PTR [rbp-0x79],r8b
  20b5ea:	70 21                	jo     20b60d <readInt.19+0x14d>
  20b5ec:	eb 2f                	jmp    20b61d <readInt.19+0x15d>
    switch (endian) {
  20b5ee:	eb 10                	jmp    20b600 <readInt.19+0x140>
  20b5f0:	48 8d 3d c9 9d 01 00 	lea    rdi,[rip+0x19dc9]        # 2253c0 <__unnamed_7>
  20b5f7:	31 c0                	xor    eax,eax
  20b5f9:	89 c6                	mov    esi,eax
  20b5fb:	e8 c0 7a ff ff       	call   2030c0 <panic>
    return result;
  20b600:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20b604:	48 81 c4 80 00 00 00 	add    rsp,0x80
  20b60b:	5d                   	pop    rbp
  20b60c:	c3                   	ret    
  20b60d:	48 8d 3d 04 9d 01 00 	lea    rdi,[rip+0x19d04]        # 225318 <__unnamed_5>
  20b614:	31 c0                	xor    eax,eax
  20b616:	89 c6                	mov    esi,eax
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  20b618:	e8 a3 7a ff ff       	call   2030c0 <panic>
  20b61d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  20b621:	88 c1                	mov    cl,al
  20b623:	89 c2                	mov    edx,eax
  20b625:	83 e2 3f             	and    edx,0x3f
  20b628:	89 d6                	mov    esi,edx
  20b62a:	48 39 f0             	cmp    rax,rsi
  20b62d:	88 4d 86             	mov    BYTE PTR [rbp-0x7a],cl
  20b630:	75 2b                	jne    20b65d <readInt.19+0x19d>
  20b632:	8a 45 86             	mov    al,BYTE PTR [rbp-0x7a]
  20b635:	24 3f                	and    al,0x3f
  20b637:	0f b6 c8             	movzx  ecx,al
  20b63a:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  20b63e:	48 d3 e2             	shl    rdx,cl
  20b641:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  20b645:	48 09 d6             	or     rsi,rdx
  20b648:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
            for (bytes) |b, index| {
  20b64c:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  20b650:	48 83 c2 01          	add    rdx,0x1
  20b654:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  20b658:	e9 3c ff ff ff       	jmp    20b599 <readInt.19+0xd9>
  20b65d:	48 8d 3d 44 9d 01 00 	lea    rdi,[rip+0x19d44]        # 2253a8 <__unnamed_8>
  20b664:	31 c0                	xor    eax,eax
  20b666:	89 c6                	mov    esi,eax
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  20b668:	e8 53 7a ff ff       	call   2030c0 <panic>
  20b66d:	0f 1f 00             	nop    DWORD PTR [rax]

000000000020b670 <posixFStat>:
            else => unreachable,
        }
    }
}

pub fn posixFStat(fd: i32) !posix.Stat {
  20b670:	55                   	push   rbp
  20b671:	48 89 e5             	mov    rbp,rsp
  20b674:	48 81 ec 40 02 00 00 	sub    rsp,0x240
  20b67b:	48 89 f8             	mov    rax,rdi
  20b67e:	48 8d 8d 38 fe ff ff 	lea    rcx,[rbp-0x1c8]
  20b685:	4c 8d 05 94 50 ff ff 	lea    r8,[rip+0xffffffffffff5094]        # 200720 <__unnamed_56>
  20b68c:	41 b9 90 00 00 00    	mov    r9d,0x90
  20b692:	45 89 ca             	mov    r10d,r9d
  20b695:	89 95 cc fe ff ff    	mov    DWORD PTR [rbp-0x134],edx
    var stat: posix.Stat = undefined;
  20b69b:	49 89 cb             	mov    r11,rcx
  20b69e:	48 89 bd 28 fe ff ff 	mov    QWORD PTR [rbp-0x1d8],rdi
  20b6a5:	4c 89 df             	mov    rdi,r11
  20b6a8:	48 89 b5 20 fe ff ff 	mov    QWORD PTR [rbp-0x1e0],rsi
  20b6af:	4c 89 c6             	mov    rsi,r8
  20b6b2:	4c 89 d2             	mov    rdx,r10
  20b6b5:	48 89 85 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],rax
  20b6bc:	48 89 8d 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rcx
  20b6c3:	e8 38 66 01 00       	call   221d00 <memcpy>
    const err = posix.getErrno(posix.fstat(fd, &stat));
  20b6c8:	8b bd cc fe ff ff    	mov    edi,DWORD PTR [rbp-0x134]
  20b6ce:	48 8b b5 10 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1f0]
  20b6d5:	e8 86 01 00 00       	call   20b860 <fstat>
  20b6da:	48 89 c7             	mov    rdi,rax
  20b6dd:	e8 0e fa ff ff       	call   20b0f0 <getErrno>
  20b6e2:	48 89 85 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rax
    if (err > 0) {
  20b6e9:	48 83 bd 30 fe ff ff 	cmp    QWORD PTR [rbp-0x1d0],0x0
  20b6f0:	00 
  20b6f1:	0f 86 cf 00 00 00    	jbe    20b7c6 <posixFStat+0x156>
        return switch (err) {
  20b6f7:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  20b6fe:	48 89 c1             	mov    rcx,rax
  20b701:	48 83 e9 09          	sub    rcx,0x9
  20b705:	48 89 85 08 fe ff ff 	mov    QWORD PTR [rbp-0x1f8],rax
  20b70c:	48 89 8d 00 fe ff ff 	mov    QWORD PTR [rbp-0x200],rcx
  20b713:	74 34                	je     20b749 <posixFStat+0xd9>
  20b715:	eb 00                	jmp    20b717 <posixFStat+0xa7>
  20b717:	48 8b 85 08 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1f8]
  20b71e:	48 83 e8 0c          	sub    rax,0xc
  20b722:	48 89 85 f8 fd ff ff 	mov    QWORD PTR [rbp-0x208],rax
  20b729:	74 2b                	je     20b756 <posixFStat+0xe6>
  20b72b:	eb 00                	jmp    20b72d <posixFStat+0xbd>
            posix.EBADF => error.BadFd,
            posix.ENOMEM => error.SystemResources,
            else => os.unexpectedErrorPosix(err),
  20b72d:	48 8b b5 30 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1d0]
  20b734:	48 8b bd 20 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1e0]
  20b73b:	e8 50 fa ff ff       	call   20b190 <unexpectedErrorPosix>
        return switch (err) {
  20b740:	66 89 85 f6 fd ff ff 	mov    WORD PTR [rbp-0x20a],ax
  20b747:	eb 1a                	jmp    20b763 <posixFStat+0xf3>
  20b749:	66 b8 1c 00          	mov    ax,0x1c
  20b74d:	66 89 85 f6 fd ff ff 	mov    WORD PTR [rbp-0x20a],ax
  20b754:	eb 0d                	jmp    20b763 <posixFStat+0xf3>
  20b756:	66 b8 01 00          	mov    ax,0x1
  20b75a:	66 89 85 f6 fd ff ff 	mov    WORD PTR [rbp-0x20a],ax
  20b761:	eb 00                	jmp    20b763 <posixFStat+0xf3>
  20b763:	66 8b 85 f6 fd ff ff 	mov    ax,WORD PTR [rbp-0x20a]
  20b76a:	48 8b bd 20 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1e0]
  20b771:	66 89 85 f4 fd ff ff 	mov    WORD PTR [rbp-0x20c],ax
  20b778:	e8 d3 8c ff ff       	call   204450 <__zig_return_error>
  20b77d:	b9 98 00 00 00       	mov    ecx,0x98
  20b782:	89 ca                	mov    edx,ecx
  20b784:	48 8d bd 68 ff ff ff 	lea    rdi,[rbp-0x98]
  20b78b:	66 8b 85 f4 fd ff ff 	mov    ax,WORD PTR [rbp-0x20c]
  20b792:	66 89 85 68 ff ff ff 	mov    WORD PTR [rbp-0x98],ax
  20b799:	48 8b b5 28 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1d8]
  20b7a0:	48 89 bd e8 fd ff ff 	mov    QWORD PTR [rbp-0x218],rdi
  20b7a7:	48 89 f7             	mov    rdi,rsi
  20b7aa:	48 8b b5 e8 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x218]
  20b7b1:	e8 4a 65 01 00       	call   221d00 <memcpy>
  20b7b6:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
  20b7bd:	48 81 c4 40 02 00 00 	add    rsp,0x240
  20b7c4:	5d                   	pop    rbp
  20b7c5:	c3                   	ret    
    if (err > 0) {
  20b7c6:	eb 00                	jmp    20b7c8 <posixFStat+0x158>
  20b7c8:	b8 98 00 00 00       	mov    eax,0x98
  20b7cd:	89 c2                	mov    edx,eax
  20b7cf:	48 8d 8d d0 fe ff ff 	lea    rcx,[rbp-0x130]
  20b7d6:	b8 90 00 00 00       	mov    eax,0x90
  20b7db:	89 c6                	mov    esi,eax
  20b7dd:	48 8d bd 38 fe ff ff 	lea    rdi,[rbp-0x1c8]
        };
    }

    return stat;
  20b7e4:	66 c7 85 d0 fe ff ff 	mov    WORD PTR [rbp-0x130],0x0
  20b7eb:	00 00 
  20b7ed:	49 89 c8             	mov    r8,rcx
  20b7f0:	49 83 c0 08          	add    r8,0x8
  20b7f4:	48 89 bd e0 fd ff ff 	mov    QWORD PTR [rbp-0x220],rdi
  20b7fb:	4c 89 c7             	mov    rdi,r8
  20b7fe:	4c 8b 85 e0 fd ff ff 	mov    r8,QWORD PTR [rbp-0x220]
  20b805:	48 89 b5 d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rsi
  20b80c:	4c 89 c6             	mov    rsi,r8
  20b80f:	4c 8b 8d d8 fd ff ff 	mov    r9,QWORD PTR [rbp-0x228]
  20b816:	48 89 95 d0 fd ff ff 	mov    QWORD PTR [rbp-0x230],rdx
  20b81d:	4c 89 ca             	mov    rdx,r9
  20b820:	48 89 8d c8 fd ff ff 	mov    QWORD PTR [rbp-0x238],rcx
  20b827:	e8 d4 64 01 00       	call   221d00 <memcpy>
  20b82c:	48 8b 8d c8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x238]
  20b833:	48 8b 95 28 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d8]
  20b83a:	48 89 d7             	mov    rdi,rdx
  20b83d:	48 89 ce             	mov    rsi,rcx
  20b840:	48 8b 95 d0 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x230]
  20b847:	e8 b4 64 01 00       	call   221d00 <memcpy>
  20b84c:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
  20b853:	48 81 c4 40 02 00 00 	add    rsp,0x240
  20b85a:	5d                   	pop    rbp
  20b85b:	c3                   	ret    
  20b85c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000020b860 <fstat>:

pub fn accept4(fd: i32, noalias addr: *sockaddr, noalias len: *socklen_t, flags: u32) usize {
    return syscall4(SYS_accept4, @intCast(usize, fd), @ptrToInt(addr), @ptrToInt(len), flags);
}

pub fn fstat(fd: i32, stat_buf: *Stat) usize {
  20b860:	55                   	push   rbp
  20b861:	48 89 e5             	mov    rbp,rsp
  20b864:	48 83 ec 10          	sub    rsp,0x10
  20b868:	b8 05 00 00 00       	mov    eax,0x5
  20b86d:	89 c1                	mov    ecx,eax
  20b86f:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  20b872:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    return syscall2(SYS_fstat, @intCast(usize, fd), @ptrToInt(stat_buf));
  20b876:	48 63 75 fc          	movsxd rsi,DWORD PTR [rbp-0x4]
  20b87a:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  20b87e:	48 89 cf             	mov    rdi,rcx
  20b881:	e8 ba 98 ff ff       	call   205140 <syscall2>
  20b886:	48 83 c4 10          	add    rsp,0x10
  20b88a:	5d                   	pop    rbp
  20b88b:	c3                   	ret    
  20b88c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000020b890 <cast>:
    if (negateCast(u32(@maxValue(i32) + 10))) |_| unreachable else |err| assert(err == error.Overflow);
}

/// Cast an integer to a different integer type. If the value doesn't fit,
/// return an error.
pub fn cast(comptime T: type, x: var) (error{Overflow}!T) {
  20b890:	55                   	push   rbp
  20b891:	48 89 e5             	mov    rbp,rsp
  20b894:	48 83 ec 30          	sub    rsp,0x30
  20b898:	48 89 f8             	mov    rax,rdi
  20b89b:	48 b9 ff ff ff ff ff 	movabs rcx,0x7fffffffffffffff
  20b8a2:	ff ff 7f 
  20b8a5:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    comptime assert(@typeId(T) == builtin.TypeId.Int); // must pass an integer
    comptime assert(@typeId(@typeOf(x)) == builtin.TypeId.Int); // must pass an integer
    if (@maxValue(@typeOf(x)) > @maxValue(T) and x > @maxValue(T)) {
  20b8a9:	48 39 4d e8          	cmp    QWORD PTR [rbp-0x18],rcx
  20b8ad:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  20b8b1:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  20b8b5:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  20b8b9:	76 2c                	jbe    20b8e7 <cast+0x57>
        return error.Overflow;
  20b8bb:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  20b8bf:	e8 8c 8b ff ff       	call   204450 <__zig_return_error>
  20b8c4:	48 8b 3d 55 6a ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff6a55]        # 202320 <__unnamed_130>
  20b8cb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  20b8cf:	48 89 38             	mov    QWORD PTR [rax],rdi
  20b8d2:	48 8b 3d 4f 6a ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff6a4f]        # 202328 <__unnamed_130+0x8>
  20b8d9:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  20b8dd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20b8e1:	48 83 c4 30          	add    rsp,0x30
  20b8e5:	5d                   	pop    rbp
  20b8e6:	c3                   	ret    
    } else if (@minValue(@typeOf(x)) < @minValue(T) and x < @minValue(T)) {
        return error.Overflow;
    } else {
        return @intCast(T, x);
  20b8e7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20b8eb:	66 c7 45 f0 00 00    	mov    WORD PTR [rbp-0x10],0x0
  20b8f1:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  20b8f5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20b8f9:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  20b8fd:	48 89 01             	mov    QWORD PTR [rcx],rax
  20b900:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20b904:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20b908:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20b90c:	48 83 c4 30          	add    rsp,0x30
  20b910:	5d                   	pop    rbp
  20b911:	c3                   	ret    
  20b912:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20b919:	1f 84 00 00 00 00 00 

000000000020b920 <Allocator_alignedAlloc>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  20b920:	55                   	push   rbp
  20b921:	48 89 e5             	mov    rbp,rsp
  20b924:	48 81 ec 20 01 00 00 	sub    rsp,0x120
  20b92b:	48 89 f8             	mov    rax,rdi
  20b92e:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  20b935:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  20b93c:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  20b943:	00 
  20b944:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  20b94b:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  20b952:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  20b959:	75 37                	jne    20b992 <Allocator_alignedAlloc+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  20b95b:	48 8b 05 4e 4e ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff4e4e]        # 2007b0 <__unnamed_58>
  20b962:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  20b969:	48 89 01             	mov    QWORD PTR [rcx],rax
  20b96c:	48 8b 05 45 4e ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff4e45]        # 2007b8 <__unnamed_58+0x8>
  20b973:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20b977:	48 8b 05 42 4e ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff4e42]        # 2007c0 <__unnamed_58+0x10>
  20b97e:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  20b982:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  20b989:	48 81 c4 20 01 00 00 	add    rsp,0x120
  20b990:	5d                   	pop    rbp
  20b991:	c3                   	ret    
        if (n == 0) {
  20b992:	eb 00                	jmp    20b994 <Allocator_alignedAlloc+0x74>
  20b994:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  20b998:	b8 40 00 00 00       	mov    eax,0x40
  20b99d:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  20b99f:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  20b9a6:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  20b9ad:	e8 7e 02 00 00       	call   20bc30 <mul>
  20b9b2:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  20b9b7:	74 43                	je     20b9fc <Allocator_alignedAlloc+0xdc>
  20b9b9:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  20b9c0:	e8 8b 8a ff ff       	call   204450 <__zig_return_error>
  20b9c5:	48 8b 3d fc 4d ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff4dfc]        # 2007c8 <__unnamed_59>
  20b9cc:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  20b9d3:	48 89 38             	mov    QWORD PTR [rax],rdi
  20b9d6:	48 8b 3d f3 4d ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff4df3]        # 2007d0 <__unnamed_59+0x8>
  20b9dd:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  20b9e1:	48 8b 3d f0 4d ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff4df0]        # 2007d8 <__unnamed_59+0x10>
  20b9e8:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  20b9ec:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  20b9f3:	48 81 c4 20 01 00 00 	add    rsp,0x120
  20b9fa:	5d                   	pop    rbp
  20b9fb:	c3                   	ret    
  20b9fc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20ba00:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  20ba07:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  20ba0b:	41 b8 04 00 00 00    	mov    r8d,0x4
  20ba11:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  20ba18:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  20ba1f:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  20ba26:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  20ba29:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  20ba30:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  20ba37:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  20ba3e:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  20ba45:	4c 89 ce             	mov    rsi,r9
  20ba48:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  20ba4f:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  20ba56:	4c 89 d1             	mov    rcx,r10
  20ba59:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  20ba60:	41 ff d3             	call   r11
  20ba63:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  20ba68:	74 50                	je     20baba <Allocator_alignedAlloc+0x19a>
  20ba6a:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  20ba6e:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  20ba75:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  20ba7c:	e8 cf 89 ff ff       	call   204450 <__zig_return_error>
  20ba81:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  20ba88:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  20ba8c:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  20ba90:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  20ba97:	48 89 39             	mov    QWORD PTR [rcx],rdi
  20ba9a:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  20ba9e:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  20baa2:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  20baa6:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  20baaa:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  20bab1:	48 81 c4 20 01 00 00 	add    rsp,0x120
  20bab8:	5d                   	pop    rbp
  20bab9:	c3                   	ret    
  20baba:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20babe:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  20bac5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  20bac9:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  20bad0:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  20bad7:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  20bade:	0f 94 c1             	sete   cl
  20bae1:	0f b6 f9             	movzx  edi,cl
  20bae4:	e8 17 75 ff ff       	call   203000 <assert>
  20bae9:	be aa 00 00 00       	mov    esi,0xaa
  20baee:	bf 08 00 00 00       	mov    edi,0x8
  20baf3:	89 fa                	mov    edx,edi
  20baf5:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  20bafc:	48 89 c7             	mov    rdi,rax
  20baff:	e8 ac 61 01 00       	call   221cb0 <memset>
  20bb04:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  20bb0b:	00 00 00 00 
  20bb0f:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  20bb16:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  20bb1d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  20bb24:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  20bb2b:	48 39 c8             	cmp    rax,rcx
  20bb2e:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  20bb35:	73 32                	jae    20bb69 <Allocator_alignedAlloc+0x249>
  20bb37:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  20bb3e:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  20bb45:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  20bb4c:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  20bb53:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  20bb55:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  20bb5c:	48 83 c1 01          	add    rcx,0x1
  20bb60:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  20bb67:	eb b4                	jmp    20bb1d <Allocator_alignedAlloc+0x1fd>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  20bb69:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  20bb70:	48 83 e0 03          	and    rax,0x3
  20bb74:	48 83 f8 00          	cmp    rax,0x0
  20bb78:	75 28                	jne    20bba2 <Allocator_alignedAlloc+0x282>
  20bb7a:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  20bb81:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  20bb85:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  20bb8c:	48 89 c1             	mov    rcx,rax
  20bb8f:	48 83 e1 3f          	and    rcx,0x3f
  20bb93:	48 83 f9 00          	cmp    rcx,0x0
  20bb97:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  20bb9e:	74 12                	je     20bbb2 <Allocator_alignedAlloc+0x292>
  20bba0:	eb 6f                	jmp    20bc11 <Allocator_alignedAlloc+0x2f1>
  20bba2:	48 8d 3d 87 99 01 00 	lea    rdi,[rip+0x19987]        # 225530 <__unnamed_60>
  20bba9:	31 c0                	xor    eax,eax
  20bbab:	89 c6                	mov    esi,eax
  20bbad:	e8 0e 75 ff ff       	call   2030c0 <panic>
  20bbb2:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  20bbb9:	48 c1 e8 06          	shr    rax,0x6
  20bbbd:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  20bbc1:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  20bbc8:	00 00 
  20bbca:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  20bbce:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  20bbd5:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  20bbd9:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  20bbdd:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  20bbe4:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  20bbeb:	48 89 01             	mov    QWORD PTR [rcx],rax
  20bbee:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  20bbf5:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20bbf9:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  20bbfd:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  20bc01:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  20bc08:	48 81 c4 20 01 00 00 	add    rsp,0x120
  20bc0f:	5d                   	pop    rbp
  20bc10:	c3                   	ret    
  20bc11:	48 8d 3d 30 99 01 00 	lea    rdi,[rip+0x19930]        # 225548 <__unnamed_61>
  20bc18:	31 c0                	xor    eax,eax
  20bc1a:	89 c6                	mov    esi,eax
  20bc1c:	e8 9f 74 ff ff       	call   2030c0 <panic>
  20bc21:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20bc28:	0f 1f 84 00 00 00 00 
  20bc2f:	00 

000000000020bc30 <mul>:
pub fn mul(comptime T: type, a: T, b: T) (error{Overflow}!T) {
  20bc30:	55                   	push   rbp
  20bc31:	48 89 e5             	mov    rbp,rsp
  20bc34:	53                   	push   rbx
  20bc35:	48 83 ec 58          	sub    rsp,0x58
  20bc39:	48 89 f8             	mov    rax,rdi
  20bc3c:	41 b8 aa 00 00 00    	mov    r8d,0xaa
  20bc42:	41 b9 08 00 00 00    	mov    r9d,0x8
  20bc48:	45 89 ca             	mov    r10d,r9d
  20bc4b:	4c 8d 5d d0          	lea    r11,[rbp-0x30]
  20bc4f:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  20bc53:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
    var answer: T = undefined;
  20bc57:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  20bc5b:	4c 89 df             	mov    rdi,r11
  20bc5e:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
  20bc62:	44 89 c6             	mov    esi,r8d
  20bc65:	4c 89 d2             	mov    rdx,r10
  20bc68:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  20bc6c:	e8 3f 60 01 00       	call   221cb0 <memset>
    return if (@mulWithOverflow(T, a, b, &answer)) error.Overflow else answer;
  20bc71:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20bc75:	48 f7 65 d8          	mul    QWORD PTR [rbp-0x28]
  20bc79:	0f 90 c3             	seto   bl
  20bc7c:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  20bc80:	f6 c3 01             	test   bl,0x1
  20bc83:	75 02                	jne    20bc87 <mul+0x57>
  20bc85:	eb 0d                	jmp    20bc94 <mul+0x64>
  20bc87:	48 8d 05 92 66 ff ff 	lea    rax,[rip+0xffffffffffff6692]        # 202320 <__unnamed_130>
  20bc8e:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  20bc92:	eb 16                	jmp    20bcaa <mul+0x7a>
  20bc94:	48 8d 45 e8          	lea    rax,[rbp-0x18]
  20bc98:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  20bc9c:	66 c7 45 e8 00 00    	mov    WORD PTR [rbp-0x18],0x0
  20bca2:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  20bca6:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  20bcaa:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20bcae:	66 83 38 00          	cmp    WORD PTR [rax],0x0
  20bcb2:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  20bcb6:	74 0b                	je     20bcc3 <mul+0x93>
  20bcb8:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  20bcbc:	e8 8f 87 ff ff       	call   204450 <__zig_return_error>
  20bcc1:	eb 02                	jmp    20bcc5 <mul+0x95>
  20bcc3:	eb 00                	jmp    20bcc5 <mul+0x95>
  20bcc5:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  20bcc9:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  20bccc:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  20bcd0:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  20bcd3:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  20bcd7:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  20bcdb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  20bcdf:	48 83 c4 58          	add    rsp,0x58
  20bce3:	5b                   	pop    rbx
  20bce4:	5d                   	pop    rbp
  20bce5:	c3                   	ret    
  20bce6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  20bced:	00 00 00 

000000000020bcf0 <close>:
pub fn close(handle: FileHandle) void {
  20bcf0:	55                   	push   rbp
  20bcf1:	48 89 e5             	mov    rbp,rsp
  20bcf4:	48 83 ec 40          	sub    rsp,0x40
  20bcf8:	89 7d f4             	mov    DWORD PTR [rbp-0xc],edi
            const err = posix.getErrno(posix.close(handle));
  20bcfb:	8b 7d f4             	mov    edi,DWORD PTR [rbp-0xc]
  20bcfe:	e8 5d 1d 01 00       	call   21da60 <close.81>
  20bd03:	48 89 c7             	mov    rdi,rax
  20bd06:	e8 e5 f3 ff ff       	call   20b0f0 <getErrno>
  20bd0b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
            switch (err) {
  20bd0f:	48 83 7d e8 04       	cmp    QWORD PTR [rbp-0x18],0x4
  20bd14:	0f 84 a9 00 00 00    	je     20bdc3 <close+0xd3>
  20bd1a:	48 8d 3d ff a2 01 00 	lea    rdi,[rip+0x1a2ff]        # 226020 <emfile_promise_queue>
                    if (emfile_promise_queue.popFirst()) |p| resume p.data;
  20bd21:	e8 6a 1d 01 00       	call   21da90 <BaseLinkedList(promise,void,(struct []const u8 constant))_popFirst>
  20bd26:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  20bd2a:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
  20bd2f:	0f 84 88 00 00 00    	je     20bdbd <close+0xcd>
  20bd35:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20bd39:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  20bd3d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20bd41:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  20bd45:	48 89 c1             	mov    rcx,rax
  20bd48:	48 83 c1 10          	add    rcx,0x10
  20bd4c:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  20bd50:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  20bd54:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  20bd58:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
  20bd5c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20bd60:	48 89 c1             	mov    rcx,rax
  20bd63:	48 83 e1 fd          	and    rcx,0xfffffffffffffffd
  20bd67:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  20bd6b:	f0 48 0f b1 0a       	lock cmpxchg QWORD PTR [rdx],rcx
  20bd70:	40 0f 94 c6          	sete   sil
  20bd74:	40 f6 c6 01          	test   sil,0x1
  20bd78:	48 89 c1             	mov    rcx,rax
  20bd7b:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  20bd7f:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  20bd83:	75 02                	jne    20bd87 <close+0x97>
  20bd85:	eb d5                	jmp    20bd5c <close+0x6c>
  20bd87:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  20bd8b:	48 83 e0 01          	and    rax,0x1
  20bd8f:	48 83 f8 00          	cmp    rax,0x0
  20bd93:	75 28                	jne    20bdbd <close+0xcd>
  20bd95:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  20bd99:	48 83 e0 02          	and    rax,0x2
  20bd9d:	48 83 f8 00          	cmp    rax,0x0
  20bda1:	75 10                	jne    20bdb3 <close+0xc3>
  20bda3:	48 8d 3d 16 96 01 00 	lea    rdi,[rip+0x19616]        # 2253c0 <__unnamed_7>
  20bdaa:	31 c0                	xor    eax,eax
  20bdac:	89 c6                	mov    esi,eax
  20bdae:	e8 0d 73 ff ff       	call   2030c0 <panic>
  20bdb3:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  20bdb7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  20bdbb:	ff 10                	call   QWORD PTR [rax]
                    return;
  20bdbd:	48 83 c4 40          	add    rsp,0x40
  20bdc1:	5d                   	pop    rbp
  20bdc2:	c3                   	ret    
                posix.EINTR => continue,
  20bdc3:	e9 33 ff ff ff       	jmp    20bcfb <close+0xb>
  20bdc8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  20bdcf:	00 

000000000020bdd0 <readInitialLength>:
fn readInitialLength(comptime E: type, in_stream: *io.InStream(E), is_64: *bool) !u64 {
  20bdd0:	55                   	push   rbp
  20bdd1:	48 89 e5             	mov    rbp,rsp
  20bdd4:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  20bddb:	48 89 f8             	mov    rax,rdi
  20bdde:	4c 8d 45 f8          	lea    r8,[rbp-0x8]
  20bde2:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  20bde6:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
    const first_32_bits = try in_stream.readIntLe(u32);
  20bdea:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  20bdee:	48 89 7d a0          	mov    QWORD PTR [rbp-0x60],rdi
  20bdf2:	4c 89 c7             	mov    rdi,r8
  20bdf5:	48 89 75 98          	mov    QWORD PTR [rbp-0x68],rsi
  20bdf9:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  20bdfd:	e8 9e 10 00 00       	call   20cea0 <InStream(ReadError)_readIntLe>
  20be02:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  20be07:	74 39                	je     20be42 <readInitialLength+0x72>
  20be09:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  20be0d:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  20be11:	66 89 45 8e          	mov    WORD PTR [rbp-0x72],ax
  20be15:	e8 36 86 ff ff       	call   204450 <__zig_return_error>
  20be1a:	66 8b 45 8e          	mov    ax,WORD PTR [rbp-0x72]
  20be1e:	66 89 45 e0          	mov    WORD PTR [rbp-0x20],ax
  20be22:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  20be26:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  20be2a:	48 89 39             	mov    QWORD PTR [rcx],rdi
  20be2d:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  20be31:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  20be35:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  20be39:	48 81 c4 80 00 00 00 	add    rsp,0x80
  20be40:	5d                   	pop    rbp
  20be41:	c3                   	ret    
  20be42:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  20be45:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
    is_64.* = (first_32_bits == 0xffffffff);
  20be48:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  20be4c:	83 7d ac ff          	cmp    DWORD PTR [rbp-0x54],0xffffffff
  20be50:	0f 94 c2             	sete   dl
  20be53:	80 e2 01             	and    dl,0x1
  20be56:	88 11                	mov    BYTE PTR [rcx],dl
    if (is_64.*) {
  20be58:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  20be5c:	f6 01 01             	test   BYTE PTR [rcx],0x1
  20be5f:	75 02                	jne    20be63 <readInitialLength+0x93>
  20be61:	eb 45                	jmp    20bea8 <readInitialLength+0xd8>
  20be63:	48 8d 7d d0          	lea    rdi,[rbp-0x30]
        return in_stream.readIntLe(u64);
  20be67:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  20be6b:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  20be6f:	e8 8c 10 00 00       	call   20cf00 <InStream(ReadError)_readIntLe.21>
  20be74:	66 83 7d d0 00       	cmp    WORD PTR [rbp-0x30],0x0
  20be79:	74 0b                	je     20be86 <readInitialLength+0xb6>
  20be7b:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  20be7f:	e8 cc 85 ff ff       	call   204450 <__zig_return_error>
  20be84:	eb 02                	jmp    20be88 <readInitialLength+0xb8>
  20be86:	eb 00                	jmp    20be88 <readInitialLength+0xb8>
  20be88:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20be8c:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  20be90:	48 89 01             	mov    QWORD PTR [rcx],rax
  20be93:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  20be97:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20be9b:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  20be9f:	48 81 c4 80 00 00 00 	add    rsp,0x80
  20bea6:	5d                   	pop    rbp
  20bea7:	c3                   	ret    
        if (first_32_bits >= 0xfffffff0) return error.InvalidDebugInfo;
  20bea8:	83 7d ac f0          	cmp    DWORD PTR [rbp-0x54],0xfffffff0
  20beac:	72 2f                	jb     20bedd <readInitialLength+0x10d>
  20beae:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  20beb2:	e8 99 85 ff ff       	call   204450 <__zig_return_error>
  20beb7:	48 8b 3d 72 64 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff6472]        # 202330 <__unnamed_117>
  20bebe:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  20bec2:	48 89 38             	mov    QWORD PTR [rax],rdi
  20bec5:	48 8b 3d 6c 64 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff646c]        # 202338 <__unnamed_117+0x8>
  20becc:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  20bed0:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  20bed4:	48 81 c4 80 00 00 00 	add    rsp,0x80
  20bedb:	5d                   	pop    rbp
  20bedc:	c3                   	ret    
  20bedd:	eb 00                	jmp    20bedf <readInitialLength+0x10f>
        return u64(first_32_bits);
  20bedf:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
  20bee2:	89 c1                	mov    ecx,eax
  20bee4:	66 c7 45 c0 00 00    	mov    WORD PTR [rbp-0x40],0x0
  20beea:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  20beee:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  20bef2:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  20bef6:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  20bef9:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  20befd:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  20bf01:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  20bf05:	48 81 c4 80 00 00 00 	add    rsp,0x80
  20bf0c:	5d                   	pop    rbp
  20bf0d:	c3                   	ret    
  20bf0e:	66 90                	xchg   ax,ax

000000000020bf10 <File_getPos>:
    pub fn getPos(self: *File) !usize {
  20bf10:	55                   	push   rbp
  20bf11:	48 89 e5             	mov    rbp,rsp
  20bf14:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  20bf1b:	48 89 f8             	mov    rax,rdi
  20bf1e:	31 c9                	xor    ecx,ecx
  20bf20:	41 89 c8             	mov    r8d,ecx
  20bf23:	b9 01 00 00 00       	mov    ecx,0x1
  20bf28:	41 89 c9             	mov    r9d,ecx
  20bf2b:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
                const result = posix.lseek(self.handle, 0, posix.SEEK_CUR);
  20bf2f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  20bf33:	8b 0a                	mov    ecx,DWORD PTR [rdx]
  20bf35:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
  20bf39:	89 cf                	mov    edi,ecx
  20bf3b:	48 89 75 b8          	mov    QWORD PTR [rbp-0x48],rsi
  20bf3f:	4c 89 c6             	mov    rsi,r8
  20bf42:	4c 89 ca             	mov    rdx,r9
  20bf45:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  20bf49:	e8 42 f3 ff ff       	call   20b290 <lseek>
  20bf4e:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
                const err = posix.getErrno(result);
  20bf52:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  20bf56:	e8 95 f1 ff ff       	call   20b0f0 <getErrno>
  20bf5b:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
                if (err > 0) {
  20bf5f:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
  20bf64:	0f 86 f4 00 00 00    	jbe    20c05e <File_getPos+0x14e>
                    return switch (err) {
  20bf6a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20bf6e:	48 89 c1             	mov    rcx,rax
  20bf71:	48 83 e9 06          	sub    rcx,0x6
  20bf75:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  20bf79:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
  20bf7d:	0f 84 8c 00 00 00    	je     20c00f <File_getPos+0xff>
  20bf83:	eb 00                	jmp    20bf85 <File_getPos+0x75>
  20bf85:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  20bf89:	48 83 e8 09          	sub    rax,0x9
  20bf8d:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  20bf91:	74 48                	je     20bfdb <File_getPos+0xcb>
  20bf93:	eb 00                	jmp    20bf95 <File_getPos+0x85>
  20bf95:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  20bf99:	48 83 e8 16          	sub    rax,0x16
  20bf9d:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  20bfa1:	74 45                	je     20bfe8 <File_getPos+0xd8>
  20bfa3:	eb 00                	jmp    20bfa5 <File_getPos+0x95>
  20bfa5:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  20bfa9:	48 83 e8 1d          	sub    rax,0x1d
  20bfad:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  20bfb1:	74 4f                	je     20c002 <File_getPos+0xf2>
  20bfb3:	eb 00                	jmp    20bfb5 <File_getPos+0xa5>
  20bfb5:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  20bfb9:	48 83 e8 4b          	sub    rax,0x4b
  20bfbd:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  20bfc1:	74 32                	je     20bff5 <File_getPos+0xe5>
  20bfc3:	eb 00                	jmp    20bfc5 <File_getPos+0xb5>
                        else => os.unexpectedErrorPosix(err),
  20bfc5:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  20bfc9:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  20bfcd:	e8 be f1 ff ff       	call   20b190 <unexpectedErrorPosix>
                    return switch (err) {
  20bfd2:	66 89 85 7e ff ff ff 	mov    WORD PTR [rbp-0x82],ax
  20bfd9:	eb 41                	jmp    20c01c <File_getPos+0x10c>
  20bfdb:	66 b8 1c 00          	mov    ax,0x1c
  20bfdf:	66 89 85 7e ff ff ff 	mov    WORD PTR [rbp-0x82],ax
  20bfe6:	eb 34                	jmp    20c01c <File_getPos+0x10c>
  20bfe8:	66 b8 20 00          	mov    ax,0x20
  20bfec:	66 89 85 7e ff ff ff 	mov    WORD PTR [rbp-0x82],ax
  20bff3:	eb 27                	jmp    20c01c <File_getPos+0x10c>
  20bff5:	66 b8 20 00          	mov    ax,0x20
  20bff9:	66 89 85 7e ff ff ff 	mov    WORD PTR [rbp-0x82],ax
  20c000:	eb 1a                	jmp    20c01c <File_getPos+0x10c>
  20c002:	66 b8 20 00          	mov    ax,0x20
  20c006:	66 89 85 7e ff ff ff 	mov    WORD PTR [rbp-0x82],ax
  20c00d:	eb 0d                	jmp    20c01c <File_getPos+0x10c>
  20c00f:	66 b8 20 00          	mov    ax,0x20
  20c013:	66 89 85 7e ff ff ff 	mov    WORD PTR [rbp-0x82],ax
  20c01a:	eb 00                	jmp    20c01c <File_getPos+0x10c>
  20c01c:	66 8b 85 7e ff ff ff 	mov    ax,WORD PTR [rbp-0x82]
  20c023:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  20c027:	66 89 85 7c ff ff ff 	mov    WORD PTR [rbp-0x84],ax
  20c02e:	e8 1d 84 ff ff       	call   204450 <__zig_return_error>
  20c033:	66 8b 85 7c ff ff ff 	mov    ax,WORD PTR [rbp-0x84]
  20c03a:	66 89 45 f0          	mov    WORD PTR [rbp-0x10],ax
  20c03e:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  20c042:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  20c046:	48 89 39             	mov    QWORD PTR [rcx],rdi
  20c049:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  20c04d:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  20c051:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20c055:	48 81 c4 90 00 00 00 	add    rsp,0x90
  20c05c:	5d                   	pop    rbp
  20c05d:	c3                   	ret    
                if (err > 0) {
  20c05e:	eb 00                	jmp    20c060 <File_getPos+0x150>
                return result;
  20c060:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20c064:	66 c7 45 e0 00 00    	mov    WORD PTR [rbp-0x20],0x0
  20c06a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  20c06e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20c072:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  20c076:	48 89 01             	mov    QWORD PTR [rcx],rax
  20c079:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20c07d:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20c081:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20c085:	48 81 c4 90 00 00 00 	add    rsp,0x90
  20c08c:	5d                   	pop    rbp
  20c08d:	c3                   	ret    
  20c08e:	66 90                	xchg   ax,ax

000000000020c090 <getAbbrevTable>:
fn getAbbrevTable(st: *ElfStackTrace, abbrev_offset: u64) !*const AbbrevTable {
  20c090:	55                   	push   rbp
  20c091:	48 89 e5             	mov    rbp,rsp
  20c094:	48 81 ec 90 01 00 00 	sub    rsp,0x190
  20c09b:	48 89 f8             	mov    rax,rdi
  20c09e:	4c 8d 45 f0          	lea    r8,[rbp-0x10]
  20c0a2:	48 89 95 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rdx
  20c0a9:	48 89 8d f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rcx
    for (st.abbrev_table_list.toSlice()) |*header| {
  20c0b0:	48 8b 8d 00 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x100]
  20c0b7:	48 81 c1 88 00 00 00 	add    rcx,0x88
  20c0be:	48 89 bd e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rdi
  20c0c5:	4c 89 c7             	mov    rdi,r8
  20c0c8:	48 89 b5 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rsi
  20c0cf:	48 89 ce             	mov    rsi,rcx
  20c0d2:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  20c0d9:	e8 92 0e 00 00       	call   20cf70 <AlignedArrayList(AbbrevTableHeader,8)_toSlice>
  20c0de:	be aa 00 00 00       	mov    esi,0xaa
  20c0e3:	41 b9 08 00 00 00    	mov    r9d,0x8
  20c0e9:	44 89 ca             	mov    edx,r9d
  20c0ec:	48 8d 85 f0 fe ff ff 	lea    rax,[rbp-0x110]
  20c0f3:	48 89 c7             	mov    rdi,rax
  20c0f6:	e8 b5 5b 01 00       	call   221cb0 <memset>
  20c0fb:	48 c7 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],0x0
  20c102:	00 00 00 00 
  20c106:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20c10a:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
  20c111:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  20c118:	48 8b 8d c8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x138]
  20c11f:	48 39 c8             	cmp    rax,rcx
  20c122:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
  20c129:	73 7b                	jae    20c1a6 <getAbbrevTable+0x116>
  20c12b:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  20c132:	48 6b c8 28          	imul   rcx,rax,0x28
  20c136:	48 03 4d f0          	add    rcx,QWORD PTR [rbp-0x10]
  20c13a:	48 89 8d f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rcx
        if (header.offset == abbrev_offset) {
  20c141:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  20c148:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  20c14b:	48 3b 8d f8 fe ff ff 	cmp    rcx,QWORD PTR [rbp-0x108]
  20c152:	75 3b                	jne    20c18f <getAbbrevTable+0xff>
            return &header.table;
  20c154:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  20c15b:	48 83 c0 08          	add    rax,0x8
  20c15f:	66 c7 45 d0 00 00    	mov    WORD PTR [rbp-0x30],0x0
  20c165:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  20c169:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20c16d:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  20c174:	48 89 01             	mov    QWORD PTR [rcx],rax
  20c177:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  20c17b:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20c17f:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  20c186:	48 81 c4 90 01 00 00 	add    rsp,0x190
  20c18d:	5d                   	pop    rbp
  20c18e:	c3                   	ret    
    for (st.abbrev_table_list.toSlice()) |*header| {
  20c18f:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  20c196:	48 83 c0 01          	add    rax,0x1
  20c19a:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  20c1a1:	e9 6b ff ff ff       	jmp    20c111 <getAbbrevTable+0x81>
    try st.self_exe_file.seekTo(st.debug_abbrev.offset + abbrev_offset);
  20c1a6:	48 8b b5 00 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x100]
  20c1ad:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  20c1b4:	48 8b 40 68          	mov    rax,QWORD PTR [rax+0x68]
  20c1b8:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  20c1bc:	48 03 85 f8 fe ff ff 	add    rax,QWORD PTR [rbp-0x108]
  20c1c3:	0f 92 c1             	setb   cl
  20c1c6:	48 89 b5 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rsi
  20c1cd:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  20c1d4:	88 8d af fe ff ff    	mov    BYTE PTR [rbp-0x151],cl
  20c1da:	0f 82 d1 01 00 00    	jb     20c3b1 <getAbbrevTable+0x321>
  20c1e0:	e9 dc 01 00 00       	jmp    20c3c1 <getAbbrevTable+0x331>
  20c1e5:	66 8b 45 ce          	mov    ax,WORD PTR [rbp-0x32]
  20c1e9:	48 8b bd d8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x128]
  20c1f0:	66 89 85 ac fe ff ff 	mov    WORD PTR [rbp-0x154],ax
  20c1f7:	e8 54 82 ff ff       	call   204450 <__zig_return_error>
  20c1fc:	66 8b 85 ac fe ff ff 	mov    ax,WORD PTR [rbp-0x154]
  20c203:	66 89 45 b8          	mov    WORD PTR [rbp-0x48],ax
  20c207:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  20c20b:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  20c212:	48 89 39             	mov    QWORD PTR [rcx],rdi
  20c215:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  20c219:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  20c21d:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  20c224:	48 81 c4 90 01 00 00 	add    rsp,0x190
  20c22b:	5d                   	pop    rbp
  20c22c:	c3                   	ret    
  20c22d:	48 8d 7d 90          	lea    rdi,[rbp-0x70]
    try st.abbrev_table_list.append(AbbrevTableHeader{
  20c231:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  20c238:	48 05 88 00 00 00    	add    rax,0x88
        .offset = abbrev_offset,
  20c23e:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
        .table = try parseAbbrevTable(st),
  20c245:	48 8b 95 00 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x100]
  20c24c:	48 8b b5 d8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x128]
  20c253:	48 89 8d a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rcx
  20c25a:	48 89 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rax
  20c261:	e8 aa 0d 00 00       	call   20d010 <parseAbbrevTable>
  20c266:	66 83 7d 90 00       	cmp    WORD PTR [rbp-0x70],0x0
  20c26b:	74 51                	je     20c2be <getAbbrevTable+0x22e>
  20c26d:	66 8b 45 90          	mov    ax,WORD PTR [rbp-0x70]
  20c271:	48 8b bd d8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x128]
  20c278:	66 89 85 96 fe ff ff 	mov    WORD PTR [rbp-0x16a],ax
  20c27f:	e8 cc 81 ff ff       	call   204450 <__zig_return_error>
  20c284:	66 8b 85 96 fe ff ff 	mov    ax,WORD PTR [rbp-0x16a]
  20c28b:	66 89 85 58 ff ff ff 	mov    WORD PTR [rbp-0xa8],ax
  20c292:	48 8b bd 58 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  20c299:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  20c2a0:	48 89 39             	mov    QWORD PTR [rcx],rdi
  20c2a3:	48 8b bd 60 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  20c2aa:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  20c2ae:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  20c2b5:	48 81 c4 90 01 00 00 	add    rsp,0x190
  20c2bc:	5d                   	pop    rbp
  20c2bd:	c3                   	ret    
  20c2be:	48 8d 95 30 ff ff ff 	lea    rdx,[rbp-0xd0]
    try st.abbrev_table_list.append(AbbrevTableHeader{
  20c2c5:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
  20c2cc:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  20c2d3:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  20c2d7:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  20c2de:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  20c2e2:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
  20c2e9:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  20c2ed:	48 89 8d 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rcx
  20c2f4:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  20c2f8:	48 89 8d 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rcx
  20c2ff:	48 8b bd d8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x128]
  20c306:	48 8b b5 98 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x168]
  20c30d:	e8 ae 13 00 00       	call   20d6c0 <AlignedArrayList(AbbrevTableHeader,8)_append>
  20c312:	66 89 85 2e ff ff ff 	mov    WORD PTR [rbp-0xd2],ax
  20c319:	66 83 bd 2e ff ff ff 	cmp    WORD PTR [rbp-0xd2],0x0
  20c320:	00 
  20c321:	74 54                	je     20c377 <getAbbrevTable+0x2e7>
  20c323:	66 8b 85 2e ff ff ff 	mov    ax,WORD PTR [rbp-0xd2]
  20c32a:	48 8b bd d8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x128]
  20c331:	66 89 85 94 fe ff ff 	mov    WORD PTR [rbp-0x16c],ax
  20c338:	e8 13 81 ff ff       	call   204450 <__zig_return_error>
  20c33d:	66 8b 85 94 fe ff ff 	mov    ax,WORD PTR [rbp-0x16c]
  20c344:	66 89 85 18 ff ff ff 	mov    WORD PTR [rbp-0xe8],ax
  20c34b:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
  20c352:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  20c359:	48 89 39             	mov    QWORD PTR [rcx],rdi
  20c35c:	48 8b bd 20 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe0]
  20c363:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  20c367:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  20c36e:	48 81 c4 90 01 00 00 	add    rsp,0x190
  20c375:	5d                   	pop    rbp
  20c376:	c3                   	ret    
    return &st.abbrev_table_list.items[st.abbrev_table_list.len - 1].table;
  20c377:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  20c37e:	48 05 88 00 00 00    	add    rax,0x88
  20c384:	48 8b 8d 00 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x100]
  20c38b:	48 8b 89 98 00 00 00 	mov    rcx,QWORD PTR [rcx+0x98]
  20c392:	48 83 e9 01          	sub    rcx,0x1
  20c396:	0f 92 c2             	setb   dl
  20c399:	48 89 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rax
  20c3a0:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  20c3a7:	88 95 7f fe ff ff    	mov    BYTE PTR [rbp-0x181],dl
  20c3ad:	72 40                	jb     20c3ef <getAbbrevTable+0x35f>
  20c3af:	eb 4e                	jmp    20c3ff <getAbbrevTable+0x36f>
  20c3b1:	48 8d 3d 60 8f 01 00 	lea    rdi,[rip+0x18f60]        # 225318 <__unnamed_5>
  20c3b8:	31 c0                	xor    eax,eax
  20c3ba:	89 c6                	mov    esi,eax
    try st.self_exe_file.seekTo(st.debug_abbrev.offset + abbrev_offset);
  20c3bc:	e8 ff 6c ff ff       	call   2030c0 <panic>
  20c3c1:	48 8b bd d8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x128]
  20c3c8:	48 8b b5 b8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x148]
  20c3cf:	48 8b 95 b0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x150]
  20c3d6:	e8 95 e7 ff ff       	call   20ab70 <File_seekTo>
  20c3db:	66 89 45 ce          	mov    WORD PTR [rbp-0x32],ax
  20c3df:	66 83 7d ce 00       	cmp    WORD PTR [rbp-0x32],0x0
  20c3e4:	0f 85 fb fd ff ff    	jne    20c1e5 <getAbbrevTable+0x155>
  20c3ea:	e9 3e fe ff ff       	jmp    20c22d <getAbbrevTable+0x19d>
  20c3ef:	48 8d 3d 22 8f 01 00 	lea    rdi,[rip+0x18f22]        # 225318 <__unnamed_5>
  20c3f6:	31 c0                	xor    eax,eax
  20c3f8:	89 c6                	mov    esi,eax
    return &st.abbrev_table_list.items[st.abbrev_table_list.len - 1].table;
  20c3fa:	e8 c1 6c ff ff       	call   2030c0 <panic>
  20c3ff:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
  20c406:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
  20c40d:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  20c411:	72 10                	jb     20c423 <getAbbrevTable+0x393>
  20c413:	48 8d 3d e6 8e 01 00 	lea    rdi,[rip+0x18ee6]        # 225300 <__unnamed_4>
  20c41a:	31 c0                	xor    eax,eax
  20c41c:	89 c6                	mov    esi,eax
  20c41e:	e8 9d 6c ff ff       	call   2030c0 <panic>
  20c423:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
  20c42a:	48 6b c8 28          	imul   rcx,rax,0x28
  20c42e:	48 8b 95 88 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x178]
  20c435:	48 03 0a             	add    rcx,QWORD PTR [rdx]
  20c438:	48 83 c1 08          	add    rcx,0x8
  20c43c:	66 c7 85 08 ff ff ff 	mov    WORD PTR [rbp-0xf8],0x0
  20c443:	00 00 
  20c445:	48 89 8d 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rcx
  20c44c:	48 8b 8d 08 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf8]
  20c453:	48 8b b5 e0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x120]
  20c45a:	48 89 0e             	mov    QWORD PTR [rsi],rcx
  20c45d:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  20c464:	48 89 4e 08          	mov    QWORD PTR [rsi+0x8],rcx
  20c468:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  20c46f:	48 81 c4 90 01 00 00 	add    rsp,0x190
  20c476:	5d                   	pop    rbp
  20c477:	c3                   	ret    
  20c478:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  20c47f:	00 

000000000020c480 <ElfStackTrace_allocator>:
        pub fn allocator(self: *const ElfStackTrace) *mem.Allocator {
  20c480:	55                   	push   rbp
  20c481:	48 89 e5             	mov    rbp,rsp
  20c484:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
            return self.abbrev_table_list.allocator;
  20c488:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  20c48c:	48 8b 87 a0 00 00 00 	mov    rax,QWORD PTR [rdi+0xa0]
  20c493:	5d                   	pop    rbp
  20c494:	c3                   	ret    
  20c495:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20c49c:	00 00 00 00 

000000000020c4a0 <parseDie>:
fn parseDie(st: *ElfStackTrace, abbrev_table: *const AbbrevTable, is_64: bool) !Die {
  20c4a0:	55                   	push   rbp
  20c4a1:	48 89 e5             	mov    rbp,rsp
  20c4a4:	48 81 ec 70 03 00 00 	sub    rsp,0x370
  20c4ab:	44 88 c0             	mov    al,r8b
  20c4ae:	49 89 f9             	mov    r9,rdi
  20c4b1:	4c 8d 55 f0          	lea    r10,[rbp-0x10]
  20c4b5:	48 89 95 f0 fd ff ff 	mov    QWORD PTR [rbp-0x210],rdx
  20c4bc:	48 89 8d e8 fd ff ff 	mov    QWORD PTR [rbp-0x218],rcx
  20c4c3:	24 01                	and    al,0x1
  20c4c5:	88 85 e7 fd ff ff    	mov    BYTE PTR [rbp-0x219],al
    const in_file = &st.self_exe_file;
  20c4cb:	48 8b 8d f0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x210]
  20c4d2:	48 89 8d d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rcx
    var in_file_stream = io.FileInStream.init(in_file);
  20c4d9:	48 8b 8d d8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x228]
  20c4e0:	48 89 bd 60 fd ff ff 	mov    QWORD PTR [rbp-0x2a0],rdi
  20c4e7:	4c 89 d7             	mov    rdi,r10
  20c4ea:	48 89 b5 58 fd ff ff 	mov    QWORD PTR [rbp-0x2a8],rsi
  20c4f1:	48 89 ce             	mov    rsi,rcx
  20c4f4:	4c 89 8d 50 fd ff ff 	mov    QWORD PTR [rbp-0x2b0],r9
  20c4fb:	e8 90 dd ff ff       	call   20a290 <FileInStream_init>
  20c500:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
  20c504:	48 8d 8d c8 fd ff ff 	lea    rcx,[rbp-0x238]
  20c50b:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  20c50f:	48 89 95 c8 fd ff ff 	mov    QWORD PTR [rbp-0x238],rdx
  20c516:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  20c51a:	48 89 95 d0 fd ff ff 	mov    QWORD PTR [rbp-0x230],rdx
    const in_stream = &in_file_stream.stream;
  20c521:	48 83 c1 08          	add    rcx,0x8
  20c525:	48 89 8d c0 fd ff ff 	mov    QWORD PTR [rbp-0x240],rcx
    const abbrev_code = try readULeb128(in_stream);
  20c52c:	48 8b 95 c0 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x240]
  20c533:	48 8b b5 58 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a8]
  20c53a:	e8 b1 13 00 00       	call   20d8f0 <readULeb128>
  20c53f:	66 83 7d e0 00       	cmp    WORD PTR [rbp-0x20],0x0
  20c544:	74 5a                	je     20c5a0 <parseDie+0x100>
  20c546:	66 8b 45 e0          	mov    ax,WORD PTR [rbp-0x20]
  20c54a:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20c551:	66 89 85 4e fd ff ff 	mov    WORD PTR [rbp-0x2b2],ax
  20c558:	e8 f3 7e ff ff       	call   204450 <__zig_return_error>
  20c55d:	b9 38 00 00 00       	mov    ecx,0x38
  20c562:	89 ca                	mov    edx,ecx
  20c564:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  20c568:	66 8b 85 4e fd ff ff 	mov    ax,WORD PTR [rbp-0x2b2]
  20c56f:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  20c573:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  20c57a:	48 89 bd 40 fd ff ff 	mov    QWORD PTR [rbp-0x2c0],rdi
  20c581:	48 89 f7             	mov    rdi,rsi
  20c584:	48 8b b5 40 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2c0]
  20c58b:	e8 70 57 01 00       	call   221d00 <memcpy>
  20c590:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  20c597:	48 81 c4 70 03 00 00 	add    rsp,0x370
  20c59e:	5d                   	pop    rbp
  20c59f:	c3                   	ret    
  20c5a0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20c5a4:	48 89 85 b8 fd ff ff 	mov    QWORD PTR [rbp-0x248],rax
    const table_entry = getAbbrevTableEntry(abbrev_table, abbrev_code) orelse return error.InvalidDebugInfo;
  20c5ab:	48 8b bd e8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x218]
  20c5b2:	48 8b b5 b8 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x248]
  20c5b9:	e8 82 35 00 00       	call   20fb40 <getAbbrevTableEntry>
  20c5be:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  20c5c2:	48 83 7d 90 00       	cmp    QWORD PTR [rbp-0x70],0x0
  20c5c7:	75 47                	jne    20c610 <parseDie+0x170>
  20c5c9:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20c5d0:	e8 7b 7e ff ff       	call   204450 <__zig_return_error>
  20c5d5:	48 8d 3d a4 43 ff ff 	lea    rdi,[rip+0xffffffffffff43a4]        # 200980 <__unnamed_64>
  20c5dc:	b8 38 00 00 00       	mov    eax,0x38
  20c5e1:	89 c2                	mov    edx,eax
  20c5e3:	48 8b 8d 60 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2a0]
  20c5ea:	48 89 bd 38 fd ff ff 	mov    QWORD PTR [rbp-0x2c8],rdi
  20c5f1:	48 89 cf             	mov    rdi,rcx
  20c5f4:	48 8b b5 38 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2c8]
  20c5fb:	e8 00 57 01 00       	call   221d00 <memcpy>
  20c600:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  20c607:	48 81 c4 70 03 00 00 	add    rsp,0x370
  20c60e:	5d                   	pop    rbp
  20c60f:	c3                   	ret    
  20c610:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  20c614:	48 89 85 30 fd ff ff 	mov    QWORD PTR [rbp-0x2d0],rax
  20c61b:	48 8b 85 30 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2d0]
  20c622:	48 89 85 b0 fd ff ff 	mov    QWORD PTR [rbp-0x250],rax
        .tag_id = table_entry.tag_id,
  20c629:	48 8b 8d b0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x250]
  20c630:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
        .has_children = table_entry.has_children,
  20c634:	48 8b 95 b0 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x250]
  20c63b:	40 8a 32             	mov    sil,BYTE PTR [rdx]
        .attrs = ArrayList(Die.Attr).init(st.allocator()),
  20c63e:	48 8b bd f0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x210]
  20c645:	48 89 8d 28 fd ff ff 	mov    QWORD PTR [rbp-0x2d8],rcx
  20c64c:	40 88 b5 27 fd ff ff 	mov    BYTE PTR [rbp-0x2d9],sil
  20c653:	e8 28 fe ff ff       	call   20c480 <ElfStackTrace_allocator>
  20c658:	48 8d bd 70 ff ff ff 	lea    rdi,[rbp-0x90]
  20c65f:	48 89 c6             	mov    rsi,rax
  20c662:	e8 79 35 00 00       	call   20fbe0 <AlignedArrayList(Attr,8)_init>
  20c667:	48 8d 85 80 fd ff ff 	lea    rax,[rbp-0x280]
  20c66e:	41 b8 30 00 00 00    	mov    r8d,0x30
  20c674:	44 89 c2             	mov    edx,r8d
  20c677:	48 8d 8d 40 ff ff ff 	lea    rcx,[rbp-0xc0]
    var result = Die{
  20c67e:	48 8b b5 28 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2d8]
  20c685:	48 89 b5 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rsi
  20c68c:	44 8a 8d 27 fd ff ff 	mov    r9b,BYTE PTR [rbp-0x2d9]
  20c693:	41 80 e1 01          	and    r9b,0x1
  20c697:	44 88 8d 48 ff ff ff 	mov    BYTE PTR [rbp-0xb8],r9b
  20c69e:	48 8b b5 70 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x90]
  20c6a5:	48 89 b5 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rsi
  20c6ac:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
  20c6b3:	48 89 b5 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rsi
  20c6ba:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  20c6be:	48 89 b5 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rsi
  20c6c5:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
  20c6c9:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
  20c6d0:	48 89 c6             	mov    rsi,rax
  20c6d3:	48 89 f7             	mov    rdi,rsi
  20c6d6:	48 89 ce             	mov    rsi,rcx
  20c6d9:	48 89 85 18 fd ff ff 	mov    QWORD PTR [rbp-0x2e8],rax
  20c6e0:	e8 1b 56 01 00       	call   221d00 <memcpy>
    try result.attrs.resize(table_entry.attrs.len);
  20c6e5:	48 8b 85 18 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2e8]
  20c6ec:	48 83 c0 10          	add    rax,0x10
  20c6f0:	48 8b 8d b0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x250]
  20c6f7:	48 8b 51 28          	mov    rdx,QWORD PTR [rcx+0x28]
  20c6fb:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20c702:	48 89 c6             	mov    rsi,rax
  20c705:	e8 36 35 00 00       	call   20fc40 <AlignedArrayList(Attr,8)_resize>
  20c70a:	66 89 85 3e ff ff ff 	mov    WORD PTR [rbp-0xc2],ax
  20c711:	66 83 bd 3e ff ff ff 	cmp    WORD PTR [rbp-0xc2],0x0
  20c718:	00 
  20c719:	74 63                	je     20c77e <parseDie+0x2de>
  20c71b:	66 8b 85 3e ff ff ff 	mov    ax,WORD PTR [rbp-0xc2]
  20c722:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20c729:	66 89 85 16 fd ff ff 	mov    WORD PTR [rbp-0x2ea],ax
  20c730:	e8 1b 7d ff ff       	call   204450 <__zig_return_error>
  20c735:	b9 38 00 00 00       	mov    ecx,0x38
  20c73a:	89 ca                	mov    edx,ecx
  20c73c:	48 8d bd 00 ff ff ff 	lea    rdi,[rbp-0x100]
  20c743:	66 8b 85 16 fd ff ff 	mov    ax,WORD PTR [rbp-0x2ea]
  20c74a:	66 89 85 00 ff ff ff 	mov    WORD PTR [rbp-0x100],ax
  20c751:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  20c758:	48 89 bd 08 fd ff ff 	mov    QWORD PTR [rbp-0x2f8],rdi
  20c75f:	48 89 f7             	mov    rdi,rsi
  20c762:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  20c769:	e8 92 55 01 00       	call   221d00 <memcpy>
  20c76e:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  20c775:	48 81 c4 70 03 00 00 	add    rsp,0x370
  20c77c:	5d                   	pop    rbp
  20c77d:	c3                   	ret    
  20c77e:	48 8d bd f0 fe ff ff 	lea    rdi,[rbp-0x110]
    for (table_entry.attrs.toSliceConst()) |attr, i| {
  20c785:	48 8b 85 b0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x250]
  20c78c:	48 83 c0 18          	add    rax,0x18
  20c790:	48 89 c6             	mov    rsi,rax
  20c793:	e8 18 35 00 00       	call   20fcb0 <AlignedArrayList(AbbrevAttr,8)_toSliceConst>
  20c798:	48 8b 05 21 5b ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff5b21]        # 2022c0 <__unnamed_123>
  20c79f:	48 89 85 70 fd ff ff 	mov    QWORD PTR [rbp-0x290],rax
  20c7a6:	48 8b 05 1b 5b ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff5b1b]        # 2022c8 <__unnamed_123+0x8>
  20c7ad:	48 89 85 78 fd ff ff 	mov    QWORD PTR [rbp-0x288],rax
  20c7b4:	48 c7 85 68 fd ff ff 	mov    QWORD PTR [rbp-0x298],0x0
  20c7bb:	00 00 00 00 
  20c7bf:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  20c7c6:	48 89 85 00 fd ff ff 	mov    QWORD PTR [rbp-0x300],rax
  20c7cd:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  20c7d4:	48 8b 8d 00 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x300]
  20c7db:	48 39 c8             	cmp    rax,rcx
  20c7de:	48 89 85 f8 fc ff ff 	mov    QWORD PTR [rbp-0x308],rax
  20c7e5:	0f 83 36 01 00 00    	jae    20c921 <parseDie+0x481>
  20c7eb:	48 8d 85 80 fd ff ff 	lea    rax,[rbp-0x280]
  20c7f2:	48 8b 8d f8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x308]
  20c7f9:	48 c1 e1 04          	shl    rcx,0x4
  20c7fd:	48 03 8d f0 fe ff ff 	add    rcx,QWORD PTR [rbp-0x110]
  20c804:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
  20c807:	48 89 95 70 fd ff ff 	mov    QWORD PTR [rbp-0x290],rdx
  20c80e:	48 8b 49 08          	mov    rcx,QWORD PTR [rcx+0x8]
  20c812:	48 89 8d 78 fd ff ff 	mov    QWORD PTR [rbp-0x288],rcx
        result.attrs.items[i] = Die.Attr{
  20c819:	48 83 c0 10          	add    rax,0x10
  20c81d:	48 8b 8d 68 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x298]
  20c824:	48 3b 8d 98 fd ff ff 	cmp    rcx,QWORD PTR [rbp-0x268]
  20c82b:	48 89 85 f0 fc ff ff 	mov    QWORD PTR [rbp-0x310],rax
  20c832:	48 89 8d e8 fc ff ff 	mov    QWORD PTR [rbp-0x318],rcx
  20c839:	0f 82 86 01 00 00    	jb     20c9c5 <parseDie+0x525>
  20c83f:	e9 71 01 00 00       	jmp    20c9b5 <parseDie+0x515>
            .value = try parseFormValue(st.allocator(), in_stream, attr.form_id, is_64),
  20c844:	66 8b 85 b8 fe ff ff 	mov    ax,WORD PTR [rbp-0x148]
  20c84b:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20c852:	66 89 85 e6 fc ff ff 	mov    WORD PTR [rbp-0x31a],ax
  20c859:	e8 f2 7b ff ff       	call   204450 <__zig_return_error>
  20c85e:	b9 38 00 00 00       	mov    ecx,0x38
  20c863:	89 ca                	mov    edx,ecx
  20c865:	48 8d bd 58 fe ff ff 	lea    rdi,[rbp-0x1a8]
  20c86c:	66 8b 85 e6 fc ff ff 	mov    ax,WORD PTR [rbp-0x31a]
  20c873:	66 89 85 58 fe ff ff 	mov    WORD PTR [rbp-0x1a8],ax
  20c87a:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  20c881:	48 89 bd d8 fc ff ff 	mov    QWORD PTR [rbp-0x328],rdi
  20c888:	48 89 f7             	mov    rdi,rsi
  20c88b:	48 8b b5 d8 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x328]
  20c892:	e8 69 54 01 00       	call   221d00 <memcpy>
  20c897:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  20c89e:	48 81 c4 70 03 00 00 	add    rsp,0x370
  20c8a5:	5d                   	pop    rbp
  20c8a6:	c3                   	ret    
  20c8a7:	b8 28 00 00 00       	mov    eax,0x28
  20c8ac:	89 c2                	mov    edx,eax
  20c8ae:	48 8d 8d 30 fe ff ff 	lea    rcx,[rbp-0x1d0]
        result.attrs.items[i] = Die.Attr{
  20c8b5:	48 8b b5 d0 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x330]
  20c8bc:	48 89 b5 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rsi
  20c8c3:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  20c8ca:	48 89 bd 38 fe ff ff 	mov    QWORD PTR [rbp-0x1c8],rdi
  20c8d1:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  20c8d8:	48 89 bd 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rdi
  20c8df:	48 8b bd d0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x130]
  20c8e6:	48 89 bd 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rdi
  20c8ed:	48 8b bd d8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x128]
  20c8f4:	48 89 bd 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rdi
  20c8fb:	48 8b bd c8 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x338]
  20c902:	48 89 ce             	mov    rsi,rcx
  20c905:	e8 f6 53 01 00       	call   221d00 <memcpy>
    for (table_entry.attrs.toSliceConst()) |attr, i| {
  20c90a:	48 8b 8d f8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x308]
  20c911:	48 83 c1 01          	add    rcx,0x1
  20c915:	48 89 8d 68 fd ff ff 	mov    QWORD PTR [rbp-0x298],rcx
  20c91c:	e9 ac fe ff ff       	jmp    20c7cd <parseDie+0x32d>
  20c921:	b8 38 00 00 00       	mov    eax,0x38
  20c926:	89 c2                	mov    edx,eax
  20c928:	48 8d 8d f8 fd ff ff 	lea    rcx,[rbp-0x208]
  20c92f:	b8 30 00 00 00       	mov    eax,0x30
  20c934:	89 c6                	mov    esi,eax
  20c936:	48 8d bd 80 fd ff ff 	lea    rdi,[rbp-0x280]
    return result;
  20c93d:	66 c7 85 f8 fd ff ff 	mov    WORD PTR [rbp-0x208],0x0
  20c944:	00 00 
  20c946:	49 89 c8             	mov    r8,rcx
  20c949:	49 83 c0 08          	add    r8,0x8
  20c94d:	48 89 bd c0 fc ff ff 	mov    QWORD PTR [rbp-0x340],rdi
  20c954:	4c 89 c7             	mov    rdi,r8
  20c957:	4c 8b 85 c0 fc ff ff 	mov    r8,QWORD PTR [rbp-0x340]
  20c95e:	48 89 b5 b8 fc ff ff 	mov    QWORD PTR [rbp-0x348],rsi
  20c965:	4c 89 c6             	mov    rsi,r8
  20c968:	4c 8b 8d b8 fc ff ff 	mov    r9,QWORD PTR [rbp-0x348]
  20c96f:	48 89 95 b0 fc ff ff 	mov    QWORD PTR [rbp-0x350],rdx
  20c976:	4c 89 ca             	mov    rdx,r9
  20c979:	48 89 8d a8 fc ff ff 	mov    QWORD PTR [rbp-0x358],rcx
  20c980:	e8 7b 53 01 00       	call   221d00 <memcpy>
  20c985:	48 8b 8d a8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x358]
  20c98c:	48 8b 95 60 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2a0]
  20c993:	48 89 d7             	mov    rdi,rdx
  20c996:	48 89 ce             	mov    rsi,rcx
  20c999:	48 8b 95 b0 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x350]
  20c9a0:	e8 5b 53 01 00       	call   221d00 <memcpy>
  20c9a5:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  20c9ac:	48 81 c4 70 03 00 00 	add    rsp,0x370
  20c9b3:	5d                   	pop    rbp
  20c9b4:	c3                   	ret    
  20c9b5:	48 8d 3d 44 89 01 00 	lea    rdi,[rip+0x18944]        # 225300 <__unnamed_4>
  20c9bc:	31 c0                	xor    eax,eax
  20c9be:	89 c6                	mov    esi,eax
        result.attrs.items[i] = Die.Attr{
  20c9c0:	e8 fb 66 ff ff       	call   2030c0 <panic>
  20c9c5:	48 8b 85 e8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x318]
  20c9cc:	48 6b c8 28          	imul   rcx,rax,0x28
  20c9d0:	48 8b 95 f0 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x310]
  20c9d7:	48 03 0a             	add    rcx,QWORD PTR [rdx]
            .id = attr.attr_id,
  20c9da:	48 8b b5 70 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x290]
            .value = try parseFormValue(st.allocator(), in_stream, attr.form_id, is_64),
  20c9e1:	48 8b bd f0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x210]
  20c9e8:	48 89 8d c8 fc ff ff 	mov    QWORD PTR [rbp-0x338],rcx
  20c9ef:	48 89 b5 d0 fc ff ff 	mov    QWORD PTR [rbp-0x330],rsi
  20c9f6:	e8 85 fa ff ff       	call   20c480 <ElfStackTrace_allocator>
  20c9fb:	48 8d 8d b8 fe ff ff 	lea    rcx,[rbp-0x148]
  20ca02:	48 8b 95 c0 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x240]
  20ca09:	4c 8b 85 78 fd ff ff 	mov    r8,QWORD PTR [rbp-0x288]
  20ca10:	44 8a 8d e7 fd ff ff 	mov    r9b,BYTE PTR [rbp-0x219]
  20ca17:	45 0f b6 c9          	movzx  r9d,r9b
  20ca1b:	48 8d bd b8 fe ff ff 	lea    rdi,[rbp-0x148]
  20ca22:	48 8b b5 58 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a8]
  20ca29:	48 89 95 a0 fc ff ff 	mov    QWORD PTR [rbp-0x360],rdx
  20ca30:	48 89 c2             	mov    rdx,rax
  20ca33:	48 8b 85 a0 fc ff ff 	mov    rax,QWORD PTR [rbp-0x360]
  20ca3a:	48 89 8d 98 fc ff ff 	mov    QWORD PTR [rbp-0x368],rcx
  20ca41:	48 89 c1             	mov    rcx,rax
  20ca44:	e8 07 33 00 00       	call   20fd50 <parseFormValue>
  20ca49:	66 83 bd b8 fe ff ff 	cmp    WORD PTR [rbp-0x148],0x0
  20ca50:	00 
  20ca51:	0f 85 ed fd ff ff    	jne    20c844 <parseDie+0x3a4>
  20ca57:	e9 4b fe ff ff       	jmp    20c8a7 <parseDie+0x407>
  20ca5c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000020ca60 <Allocator_create.20>:
    pub fn create(self: *Allocator, init: var) Error!*@typeOf(init) {
  20ca60:	55                   	push   rbp
  20ca61:	48 89 e5             	mov    rbp,rsp
  20ca64:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  20ca6b:	48 89 f8             	mov    rax,rdi
  20ca6e:	4c 8d 45 e8          	lea    r8,[rbp-0x18]
  20ca72:	41 b9 01 00 00 00    	mov    r9d,0x1
  20ca78:	45 89 ca             	mov    r10d,r9d
  20ca7b:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
        const slice = try self.alloc(T, 1);
  20ca7f:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  20ca83:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
  20ca87:	4c 89 c7             	mov    rdi,r8
  20ca8a:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
  20ca8e:	48 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rcx
  20ca95:	4c 89 d1             	mov    rcx,r10
  20ca98:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  20ca9f:	e8 ac 5c 00 00       	call   212750 <Allocator_alloc.36>
  20caa4:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  20caa9:	74 42                	je     20caed <Allocator_create.20+0x8d>
  20caab:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  20caaf:	48 8b 7d 80          	mov    rdi,QWORD PTR [rbp-0x80]
  20cab3:	66 89 85 6e ff ff ff 	mov    WORD PTR [rbp-0x92],ax
  20caba:	e8 91 79 ff ff       	call   204450 <__zig_return_error>
  20cabf:	66 8b 85 6e ff ff ff 	mov    ax,WORD PTR [rbp-0x92]
  20cac6:	66 89 45 c0          	mov    WORD PTR [rbp-0x40],ax
  20caca:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  20cace:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  20cad2:	48 89 39             	mov    QWORD PTR [rcx],rdi
  20cad5:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20cad9:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  20cadd:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  20cae4:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  20caeb:	5d                   	pop    rbp
  20caec:	c3                   	ret    
  20caed:	31 c0                	xor    eax,eax
  20caef:	89 c1                	mov    ecx,eax
  20caf1:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  20caf5:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  20caf9:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  20cafd:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
        const ptr = &slice[0];
  20cb01:	48 3b 4d a0          	cmp    rcx,QWORD PTR [rbp-0x60]
  20cb05:	72 10                	jb     20cb17 <Allocator_create.20+0xb7>
  20cb07:	48 8d 3d f2 87 01 00 	lea    rdi,[rip+0x187f2]        # 225300 <__unnamed_4>
  20cb0e:	31 c0                	xor    eax,eax
  20cb10:	89 c6                	mov    esi,eax
  20cb12:	e8 a9 65 ff ff       	call   2030c0 <panic>
  20cb17:	b8 30 00 00 00       	mov    eax,0x30
  20cb1c:	89 c2                	mov    edx,eax
  20cb1e:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  20cb22:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
        ptr.* = init;
  20cb26:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  20cb2a:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
  20cb31:	48 89 cf             	mov    rdi,rcx
  20cb34:	e8 c7 51 01 00       	call   221d00 <memcpy>
        return ptr;
  20cb39:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  20cb3d:	66 c7 45 b0 00 00    	mov    WORD PTR [rbp-0x50],0x0
  20cb43:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
  20cb47:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  20cb4b:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
  20cb4f:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  20cb52:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  20cb56:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  20cb5a:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  20cb61:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  20cb68:	5d                   	pop    rbp
  20cb69:	c3                   	ret    
  20cb6a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000020cb70 <Die_getAttrAddr>:
    fn getAttrAddr(self: *const Die, id: u64) !u64 {
  20cb70:	55                   	push   rbp
  20cb71:	48 89 e5             	mov    rbp,rsp
  20cb74:	48 83 ec 70          	sub    rsp,0x70
  20cb78:	48 89 f8             	mov    rax,rdi
  20cb7b:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  20cb7f:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
        const form_value = self.getAttr(id) orelse return error.MissingDebugInfo;
  20cb83:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  20cb87:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  20cb8b:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
  20cb8f:	48 89 cf             	mov    rdi,rcx
  20cb92:	48 89 75 b8          	mov    QWORD PTR [rbp-0x48],rsi
  20cb96:	48 89 d6             	mov    rsi,rdx
  20cb99:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  20cb9d:	e8 ee 00 00 00       	call   20cc90 <Die_getAttr>
  20cba2:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  20cba6:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
  20cbab:	75 2c                	jne    20cbd9 <Die_getAttrAddr+0x69>
  20cbad:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  20cbb1:	e8 9a 78 ff ff       	call   204450 <__zig_return_error>
  20cbb6:	48 8b 3d 53 57 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff5753]        # 202310 <__unnamed_103>
  20cbbd:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  20cbc1:	48 89 38             	mov    QWORD PTR [rax],rdi
  20cbc4:	48 8b 3d 4d 57 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff574d]        # 202318 <__unnamed_103+0x8>
  20cbcb:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  20cbcf:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20cbd3:	48 83 c4 70          	add    rsp,0x70
  20cbd7:	5d                   	pop    rbp
  20cbd8:	c3                   	ret    
  20cbd9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20cbdd:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  20cbe1:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  20cbe5:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
        return switch (form_value.*) {
  20cbe9:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  20cbed:	8a 51 18             	mov    dl,BYTE PTR [rcx+0x18]
  20cbf0:	84 d2                	test   dl,dl
  20cbf2:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
  20cbf6:	74 0f                	je     20cc07 <Die_getAttrAddr+0x97>
  20cbf8:	eb 00                	jmp    20cbfa <Die_getAttrAddr+0x8a>
  20cbfa:	48 8d 05 2f 57 ff ff 	lea    rax,[rip+0xffffffffffff572f]        # 202330 <__unnamed_117>
  20cc01:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  20cc05:	eb 0d                	jmp    20cc14 <Die_getAttrAddr+0xa4>
            FormValue.Address => |value| value,
  20cc07:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  20cc0b:	8a 48 18             	mov    cl,BYTE PTR [rax+0x18]
  20cc0e:	84 c9                	test   cl,cl
  20cc10:	74 3d                	je     20cc4f <Die_getAttrAddr+0xdf>
  20cc12:	eb 5e                	jmp    20cc72 <Die_getAttrAddr+0x102>
        return switch (form_value.*) {
  20cc14:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  20cc18:	66 83 38 00          	cmp    WORD PTR [rax],0x0
  20cc1c:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  20cc20:	74 0b                	je     20cc2d <Die_getAttrAddr+0xbd>
  20cc22:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  20cc26:	e8 25 78 ff ff       	call   204450 <__zig_return_error>
  20cc2b:	eb 02                	jmp    20cc2f <Die_getAttrAddr+0xbf>
  20cc2d:	eb 00                	jmp    20cc2f <Die_getAttrAddr+0xbf>
  20cc2f:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  20cc33:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  20cc36:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  20cc3a:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  20cc3d:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  20cc41:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  20cc45:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20cc49:	48 83 c4 70          	add    rsp,0x70
  20cc4d:	5d                   	pop    rbp
  20cc4e:	c3                   	ret    
  20cc4f:	48 8d 45 e8          	lea    rax,[rbp-0x18]
            FormValue.Address => |value| value,
  20cc53:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  20cc57:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
  20cc5a:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
  20cc5e:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  20cc62:	66 c7 45 e8 00 00    	mov    WORD PTR [rbp-0x18],0x0
  20cc68:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
        return switch (form_value.*) {
  20cc6c:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  20cc70:	eb a2                	jmp    20cc14 <Die_getAttrAddr+0xa4>
  20cc72:	48 8d 3d e7 88 01 00 	lea    rdi,[rip+0x188e7]        # 225560 <__unnamed_17>
  20cc79:	31 c0                	xor    eax,eax
  20cc7b:	89 c6                	mov    esi,eax
            FormValue.Address => |value| value,
  20cc7d:	e8 3e 64 ff ff       	call   2030c0 <panic>
  20cc82:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20cc89:	1f 84 00 00 00 00 00 

000000000020cc90 <Die_getAttr>:
    fn getAttr(self: *const Die, id: u64) ?*const FormValue {
  20cc90:	55                   	push   rbp
  20cc91:	48 89 e5             	mov    rbp,rsp
  20cc94:	48 83 ec 50          	sub    rsp,0x50
  20cc98:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  20cc9c:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  20cca0:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        for (self.attrs.toSliceConst()) |*attr| {
  20cca4:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  20cca8:	48 83 c6 10          	add    rsi,0x10
  20ccac:	48 89 c7             	mov    rdi,rax
  20ccaf:	e8 0c 5b 00 00       	call   2127c0 <AlignedArrayList(Attr,8)_toSliceConst>
  20ccb4:	be aa 00 00 00       	mov    esi,0xaa
  20ccb9:	b9 08 00 00 00       	mov    ecx,0x8
  20ccbe:	89 ca                	mov    edx,ecx
  20ccc0:	48 8d 45 c8          	lea    rax,[rbp-0x38]
  20ccc4:	48 89 c7             	mov    rdi,rax
  20ccc7:	e8 e4 4f 01 00       	call   221cb0 <memset>
  20cccc:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
  20ccd3:	00 
  20ccd4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20ccd8:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  20ccdc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  20cce0:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  20cce4:	48 39 c8             	cmp    rax,rcx
  20cce7:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  20cceb:	73 39                	jae    20cd26 <Die_getAttr+0x96>
  20cced:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20ccf1:	48 6b c8 28          	imul   rcx,rax,0x28
  20ccf5:	48 03 4d f0          	add    rcx,QWORD PTR [rbp-0x10]
  20ccf9:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
            if (attr.id == id) return &attr.value;
  20ccfd:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  20cd01:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  20cd04:	48 3b 4d d0          	cmp    rcx,QWORD PTR [rbp-0x30]
  20cd08:	75 0e                	jne    20cd18 <Die_getAttr+0x88>
  20cd0a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20cd0e:	48 83 c0 08          	add    rax,0x8
  20cd12:	48 83 c4 50          	add    rsp,0x50
  20cd16:	5d                   	pop    rbp
  20cd17:	c3                   	ret    
        for (self.attrs.toSliceConst()) |*attr| {
  20cd18:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20cd1c:	48 83 c0 01          	add    rax,0x1
  20cd20:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  20cd24:	eb b6                	jmp    20ccdc <Die_getAttr+0x4c>
  20cd26:	31 c0                	xor    eax,eax
        return null;
  20cd28:	48 83 c4 50          	add    rsp,0x50
  20cd2c:	5d                   	pop    rbp
  20cd2d:	c3                   	ret    
  20cd2e:	66 90                	xchg   ax,ax

000000000020cd30 <Constant_asUnsignedLe>:
    fn asUnsignedLe(self: *const Constant) !u64 {
  20cd30:	55                   	push   rbp
  20cd31:	48 89 e5             	mov    rbp,rsp
  20cd34:	48 83 ec 30          	sub    rsp,0x30
  20cd38:	48 89 f8             	mov    rax,rdi
  20cd3b:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
        if (self.payload.len > @sizeOf(u64)) return error.InvalidDebugInfo;
  20cd3f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  20cd43:	48 83 7a 08 08       	cmp    QWORD PTR [rdx+0x8],0x8
  20cd48:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  20cd4c:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  20cd50:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  20cd54:	76 2c                	jbe    20cd82 <Constant_asUnsignedLe+0x52>
  20cd56:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  20cd5a:	e8 f1 76 ff ff       	call   204450 <__zig_return_error>
  20cd5f:	48 8b 3d ca 55 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff55ca]        # 202330 <__unnamed_117>
  20cd66:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  20cd6a:	48 89 38             	mov    QWORD PTR [rax],rdi
  20cd6d:	48 8b 3d c4 55 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff55c4]        # 202338 <__unnamed_117+0x8>
  20cd74:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  20cd78:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20cd7c:	48 83 c4 30          	add    rsp,0x30
  20cd80:	5d                   	pop    rbp
  20cd81:	c3                   	ret    
  20cd82:	eb 00                	jmp    20cd84 <Constant_asUnsignedLe+0x54>
        if (self.signed) return error.InvalidDebugInfo;
  20cd84:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20cd88:	f6 40 10 01          	test   BYTE PTR [rax+0x10],0x1
  20cd8c:	75 02                	jne    20cd90 <Constant_asUnsignedLe+0x60>
  20cd8e:	eb 2c                	jmp    20cdbc <Constant_asUnsignedLe+0x8c>
  20cd90:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  20cd94:	e8 b7 76 ff ff       	call   204450 <__zig_return_error>
  20cd99:	48 8b 3d 90 55 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff5590]        # 202330 <__unnamed_117>
  20cda0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  20cda4:	48 89 38             	mov    QWORD PTR [rax],rdi
  20cda7:	48 8b 3d 8a 55 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff558a]        # 202338 <__unnamed_117+0x8>
  20cdae:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  20cdb2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20cdb6:	48 83 c4 30          	add    rsp,0x30
  20cdba:	5d                   	pop    rbp
  20cdbb:	c3                   	ret    
  20cdbc:	eb 00                	jmp    20cdbe <Constant_asUnsignedLe+0x8e>
  20cdbe:	be 01 00 00 00       	mov    esi,0x1
        return mem.readInt(self.payload, u64, builtin.Endian.Little);
  20cdc3:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  20cdc7:	e8 f4 e6 ff ff       	call   20b4c0 <readInt.19>
  20cdcc:	66 c7 45 f0 00 00    	mov    WORD PTR [rbp-0x10],0x0
  20cdd2:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  20cdd6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20cdda:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  20cdde:	48 89 07             	mov    QWORD PTR [rdi],rax
  20cde1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20cde5:	48 89 47 08          	mov    QWORD PTR [rdi+0x8],rax
  20cde9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20cded:	48 83 c4 30          	add    rsp,0x30
  20cdf1:	5d                   	pop    rbp
  20cdf2:	c3                   	ret    
  20cdf3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20cdfa:	84 00 00 00 00 00 

000000000020ce00 <AlignedArrayList(CompileUnit,2)_append>:

            mem.copyBackwards(T, self.items[n + items.len .. self.len], self.items[n .. self.len - items.len]);
            mem.copy(T, self.items[n .. n + items.len], items);
        }

        pub fn append(self: *Self, item: T) !void {
  20ce00:	55                   	push   rbp
  20ce01:	48 89 e5             	mov    rbp,rsp
  20ce04:	48 83 ec 60          	sub    rsp,0x60
  20ce08:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  20ce0c:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
            const new_item_ptr = try self.addOne();
  20ce10:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  20ce14:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  20ce18:	48 89 c7             	mov    rdi,rax
  20ce1b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20ce1f:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
  20ce23:	48 89 c6             	mov    rsi,rax
  20ce26:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  20ce2a:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  20ce2e:	48 89 ca             	mov    rdx,rcx
  20ce31:	e8 2a 5a 00 00       	call   212860 <AlignedArrayList(CompileUnit,2)_addOne>
  20ce36:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  20ce3b:	74 1b                	je     20ce58 <AlignedArrayList(CompileUnit,2)_append+0x58>
  20ce3d:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  20ce41:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20ce45:	66 89 45 b6          	mov    WORD PTR [rbp-0x4a],ax
  20ce49:	e8 02 76 ff ff       	call   204450 <__zig_return_error>
  20ce4e:	66 8b 45 b6          	mov    ax,WORD PTR [rbp-0x4a]
  20ce52:	48 83 c4 60          	add    rsp,0x60
  20ce56:	5d                   	pop    rbp
  20ce57:	c3                   	ret    
  20ce58:	31 c0                	xor    eax,eax
  20ce5a:	66 89 c1             	mov    cx,ax
  20ce5d:	b8 30 00 00 00       	mov    eax,0x30
  20ce62:	89 c2                	mov    edx,eax
  20ce64:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20ce68:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
            new_item_ptr.* = item;
  20ce6c:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  20ce70:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  20ce74:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  20ce78:	48 89 f7             	mov    rdi,rsi
  20ce7b:	48 8b 75 a8          	mov    rsi,QWORD PTR [rbp-0x58]
  20ce7f:	66 89 4d a6          	mov    WORD PTR [rbp-0x5a],cx
  20ce83:	e8 78 4e 01 00       	call   221d00 <memcpy>
        pub fn append(self: *Self, item: T) !void {
  20ce88:	66 8b 45 a6          	mov    ax,WORD PTR [rbp-0x5a]
  20ce8c:	48 83 c4 60          	add    rsp,0x60
  20ce90:	5d                   	pop    rbp
  20ce91:	c3                   	ret    
  20ce92:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20ce99:	1f 84 00 00 00 00 00 

000000000020cea0 <InStream(ReadError)_readIntLe>:
        pub fn readIntLe(self: *Self, comptime T: type) !T {
  20cea0:	55                   	push   rbp
  20cea1:	48 89 e5             	mov    rbp,rsp
  20cea4:	48 83 ec 30          	sub    rsp,0x30
  20cea8:	48 89 f8             	mov    rax,rdi
  20ceab:	48 8d 4d f8          	lea    rcx,[rbp-0x8]
  20ceaf:	41 b8 01 00 00 00    	mov    r8d,0x1
  20ceb5:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
            return self.readInt(builtin.Endian.Little, T);
  20ceb9:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  20cebd:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  20cec1:	48 89 cf             	mov    rdi,rcx
  20cec4:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  20cec8:	44 89 c1             	mov    ecx,r8d
  20cecb:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  20cecf:	e8 6c d8 ff ff       	call   20a740 <InStream(ReadError)_readInt.15>
  20ced4:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  20ced9:	74 0b                	je     20cee6 <InStream(ReadError)_readIntLe+0x46>
  20cedb:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  20cedf:	e8 6c 75 ff ff       	call   204450 <__zig_return_error>
  20cee4:	eb 02                	jmp    20cee8 <InStream(ReadError)_readIntLe+0x48>
  20cee6:	eb 00                	jmp    20cee8 <InStream(ReadError)_readIntLe+0x48>
  20cee8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20ceec:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20cef0:	48 89 01             	mov    QWORD PTR [rcx],rax
  20cef3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  20cef7:	48 83 c4 30          	add    rsp,0x30
  20cefb:	5d                   	pop    rbp
  20cefc:	c3                   	ret    
  20cefd:	0f 1f 00             	nop    DWORD PTR [rax]

000000000020cf00 <InStream(ReadError)_readIntLe.21>:
        pub fn readIntLe(self: *Self, comptime T: type) !T {
  20cf00:	55                   	push   rbp
  20cf01:	48 89 e5             	mov    rbp,rsp
  20cf04:	48 83 ec 30          	sub    rsp,0x30
  20cf08:	48 89 f8             	mov    rax,rdi
  20cf0b:	48 8d 4d f0          	lea    rcx,[rbp-0x10]
  20cf0f:	41 b8 01 00 00 00    	mov    r8d,0x1
  20cf15:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
            return self.readInt(builtin.Endian.Little, T);
  20cf19:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  20cf1d:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  20cf21:	48 89 cf             	mov    rdi,rcx
  20cf24:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  20cf28:	44 89 c1             	mov    ecx,r8d
  20cf2b:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  20cf2f:	e8 1c d9 ff ff       	call   20a850 <InStream(ReadError)_readInt.16>
  20cf34:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  20cf39:	74 0b                	je     20cf46 <InStream(ReadError)_readIntLe.21+0x46>
  20cf3b:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  20cf3f:	e8 0c 75 ff ff       	call   204450 <__zig_return_error>
  20cf44:	eb 02                	jmp    20cf48 <InStream(ReadError)_readIntLe.21+0x48>
  20cf46:	eb 00                	jmp    20cf48 <InStream(ReadError)_readIntLe.21+0x48>
  20cf48:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20cf4c:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  20cf50:	48 89 01             	mov    QWORD PTR [rcx],rax
  20cf53:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20cf57:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20cf5b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20cf5f:	48 83 c4 30          	add    rsp,0x30
  20cf63:	5d                   	pop    rbp
  20cf64:	c3                   	ret    
  20cf65:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20cf6c:	00 00 00 00 

000000000020cf70 <AlignedArrayList(AbbrevTableHeader,8)_toSlice>:
        pub fn toSlice(self: Self) []align(A) T {
  20cf70:	55                   	push   rbp
  20cf71:	48 89 e5             	mov    rbp,rsp
  20cf74:	48 83 ec 40          	sub    rsp,0x40
  20cf78:	48 89 f8             	mov    rax,rdi
  20cf7b:	31 c9                	xor    ecx,ecx
  20cf7d:	89 ca                	mov    edx,ecx
            return self.items[0..self.len];
  20cf7f:	4c 8b 46 10          	mov    r8,QWORD PTR [rsi+0x10]
  20cf83:	4c 8b 4e 08          	mov    r9,QWORD PTR [rsi+0x8]
  20cf87:	4c 39 c2             	cmp    rdx,r8
  20cf8a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  20cf8e:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  20cf92:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  20cf96:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
  20cf9a:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
  20cf9e:	76 10                	jbe    20cfb0 <AlignedArrayList(AbbrevTableHeader,8)_toSlice+0x40>
  20cfa0:	48 8d 3d 59 83 01 00 	lea    rdi,[rip+0x18359]        # 225300 <__unnamed_4>
  20cfa7:	31 c0                	xor    eax,eax
  20cfa9:	89 c6                	mov    esi,eax
  20cfab:	e8 10 61 ff ff       	call   2030c0 <panic>
  20cfb0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20cfb4:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  20cfb8:	48 39 c8             	cmp    rax,rcx
  20cfbb:	76 10                	jbe    20cfcd <AlignedArrayList(AbbrevTableHeader,8)_toSlice+0x5d>
  20cfbd:	48 8d 3d 3c 83 01 00 	lea    rdi,[rip+0x1833c]        # 225300 <__unnamed_4>
  20cfc4:	31 c0                	xor    eax,eax
  20cfc6:	89 c6                	mov    esi,eax
  20cfc8:	e8 f3 60 ff ff       	call   2030c0 <panic>
  20cfcd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20cfd1:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  20cfd4:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  20cfd8:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  20cfdc:	48 83 e9 00          	sub    rcx,0x0
  20cfe0:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  20cfe4:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  20cfe8:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  20cfec:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  20cfef:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  20cff3:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  20cff7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20cffb:	48 83 c4 40          	add    rsp,0x40
  20cfff:	5d                   	pop    rbp
  20d000:	c3                   	ret    
  20d001:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20d008:	0f 1f 84 00 00 00 00 
  20d00f:	00 

000000000020d010 <parseAbbrevTable>:
fn parseAbbrevTable(st: *ElfStackTrace) !AbbrevTable {
  20d010:	55                   	push   rbp
  20d011:	48 89 e5             	mov    rbp,rsp
  20d014:	48 81 ec 90 03 00 00 	sub    rsp,0x390
  20d01b:	48 89 f8             	mov    rax,rdi
  20d01e:	48 8d 4d f0          	lea    rcx,[rbp-0x10]
  20d022:	48 89 95 80 fd ff ff 	mov    QWORD PTR [rbp-0x280],rdx
    const in_file = &st.self_exe_file;
  20d029:	48 8b 95 80 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x280]
  20d030:	48 89 95 78 fd ff ff 	mov    QWORD PTR [rbp-0x288],rdx
    var in_file_stream = io.FileInStream.init(in_file);
  20d037:	48 8b 95 78 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x288]
  20d03e:	48 89 bd 18 fd ff ff 	mov    QWORD PTR [rbp-0x2e8],rdi
  20d045:	48 89 cf             	mov    rdi,rcx
  20d048:	48 89 b5 10 fd ff ff 	mov    QWORD PTR [rbp-0x2f0],rsi
  20d04f:	48 89 d6             	mov    rsi,rdx
  20d052:	48 89 85 08 fd ff ff 	mov    QWORD PTR [rbp-0x2f8],rax
  20d059:	e8 32 d2 ff ff       	call   20a290 <FileInStream_init>
  20d05e:	48 8d 85 68 fd ff ff 	lea    rax,[rbp-0x298]
  20d065:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  20d069:	48 89 8d 68 fd ff ff 	mov    QWORD PTR [rbp-0x298],rcx
  20d070:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  20d074:	48 89 8d 70 fd ff ff 	mov    QWORD PTR [rbp-0x290],rcx
    const in_stream = &in_file_stream.stream;
  20d07b:	48 83 c0 08          	add    rax,0x8
  20d07f:	48 89 85 60 fd ff ff 	mov    QWORD PTR [rbp-0x2a0],rax
    var result = AbbrevTable.init(st.allocator());
  20d086:	48 8b bd 80 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x280]
  20d08d:	e8 ee f3 ff ff       	call   20c480 <ElfStackTrace_allocator>
  20d092:	48 8d 7d d0          	lea    rdi,[rbp-0x30]
  20d096:	48 89 c6             	mov    rsi,rax
  20d099:	e8 f2 07 00 00       	call   20d890 <AlignedArrayList(AbbrevTableEntry,1)_init>
  20d09e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20d0a2:	48 89 85 40 fd ff ff 	mov    QWORD PTR [rbp-0x2c0],rax
  20d0a9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  20d0ad:	48 89 85 48 fd ff ff 	mov    QWORD PTR [rbp-0x2b8],rax
  20d0b4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20d0b8:	48 89 85 50 fd ff ff 	mov    QWORD PTR [rbp-0x2b0],rax
  20d0bf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20d0c3:	48 89 85 58 fd ff ff 	mov    QWORD PTR [rbp-0x2a8],rax
    while (true) {
  20d0ca:	eb 00                	jmp    20d0cc <parseAbbrevTable+0xbc>
  20d0cc:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
        const abbrev_code = try readULeb128(in_stream);
  20d0d0:	48 8b 95 60 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2a0]
  20d0d7:	48 8b b5 10 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f0]
  20d0de:	e8 0d 08 00 00       	call   20d8f0 <readULeb128>
  20d0e3:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  20d0e8:	74 5a                	je     20d144 <parseAbbrevTable+0x134>
  20d0ea:	66 8b 45 c0          	mov    ax,WORD PTR [rbp-0x40]
  20d0ee:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
  20d0f5:	66 89 85 06 fd ff ff 	mov    WORD PTR [rbp-0x2fa],ax
  20d0fc:	e8 4f 73 ff ff       	call   204450 <__zig_return_error>
  20d101:	b9 28 00 00 00       	mov    ecx,0x28
  20d106:	89 ca                	mov    edx,ecx
  20d108:	48 8d 7d 88          	lea    rdi,[rbp-0x78]
  20d10c:	66 8b 85 06 fd ff ff 	mov    ax,WORD PTR [rbp-0x2fa]
  20d113:	66 89 45 88          	mov    WORD PTR [rbp-0x78],ax
  20d117:	48 8b b5 18 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2e8]
  20d11e:	48 89 bd f8 fc ff ff 	mov    QWORD PTR [rbp-0x308],rdi
  20d125:	48 89 f7             	mov    rdi,rsi
  20d128:	48 8b b5 f8 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x308]
  20d12f:	e8 cc 4b 01 00       	call   221d00 <memcpy>
  20d134:	48 8b 85 08 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2f8]
  20d13b:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20d142:	5d                   	pop    rbp
  20d143:	c3                   	ret    
  20d144:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20d148:	48 89 85 38 fd ff ff 	mov    QWORD PTR [rbp-0x2c8],rax
        if (abbrev_code == 0) return result;
  20d14f:	48 83 bd 38 fd ff ff 	cmp    QWORD PTR [rbp-0x2c8],0x0
  20d156:	00 
  20d157:	75 6e                	jne    20d1c7 <parseAbbrevTable+0x1b7>
  20d159:	b8 28 00 00 00       	mov    eax,0x28
  20d15e:	89 c2                	mov    edx,eax
  20d160:	48 8d 8d 60 ff ff ff 	lea    rcx,[rbp-0xa0]
  20d167:	66 c7 85 60 ff ff ff 	mov    WORD PTR [rbp-0xa0],0x0
  20d16e:	00 00 
  20d170:	48 8b b5 40 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2c0]
  20d177:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
  20d17e:	48 8b b5 48 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2b8]
  20d185:	48 89 b5 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rsi
  20d18c:	48 8b b5 50 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2b0]
  20d193:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
  20d19a:	48 8b b5 58 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a8]
  20d1a1:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
  20d1a5:	48 8b b5 18 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2e8]
  20d1ac:	48 89 f7             	mov    rdi,rsi
  20d1af:	48 89 ce             	mov    rsi,rcx
  20d1b2:	e8 49 4b 01 00       	call   221d00 <memcpy>
  20d1b7:	48 8b 85 08 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2f8]
  20d1be:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20d1c5:	5d                   	pop    rbp
  20d1c6:	c3                   	ret    
  20d1c7:	eb 00                	jmp    20d1c9 <parseAbbrevTable+0x1b9>
  20d1c9:	48 8d bd 50 ff ff ff 	lea    rdi,[rbp-0xb0]
            .abbrev_code = abbrev_code,
  20d1d0:	48 8b 85 38 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2c8]
            .tag_id = try readULeb128(in_stream),
  20d1d7:	48 8b 95 60 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2a0]
  20d1de:	48 8b b5 10 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f0]
  20d1e5:	48 89 85 f0 fc ff ff 	mov    QWORD PTR [rbp-0x310],rax
  20d1ec:	e8 ff 06 00 00       	call   20d8f0 <readULeb128>
  20d1f1:	66 83 bd 50 ff ff ff 	cmp    WORD PTR [rbp-0xb0],0x0
  20d1f8:	00 
  20d1f9:	74 63                	je     20d25e <parseAbbrevTable+0x24e>
  20d1fb:	66 8b 85 50 ff ff ff 	mov    ax,WORD PTR [rbp-0xb0]
  20d202:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
  20d209:	66 89 85 ee fc ff ff 	mov    WORD PTR [rbp-0x312],ax
  20d210:	e8 3b 72 ff ff       	call   204450 <__zig_return_error>
  20d215:	b9 28 00 00 00       	mov    ecx,0x28
  20d21a:	89 ca                	mov    edx,ecx
  20d21c:	48 8d bd 18 ff ff ff 	lea    rdi,[rbp-0xe8]
  20d223:	66 8b 85 ee fc ff ff 	mov    ax,WORD PTR [rbp-0x312]
  20d22a:	66 89 85 18 ff ff ff 	mov    WORD PTR [rbp-0xe8],ax
  20d231:	48 8b b5 18 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2e8]
  20d238:	48 89 bd e0 fc ff ff 	mov    QWORD PTR [rbp-0x320],rdi
  20d23f:	48 89 f7             	mov    rdi,rsi
  20d242:	48 8b b5 e0 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x320]
  20d249:	e8 b2 4a 01 00       	call   221d00 <memcpy>
  20d24e:	48 8b 85 08 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2f8]
  20d255:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20d25c:	5d                   	pop    rbp
  20d25d:	c3                   	ret    
  20d25e:	48 8d bd 10 ff ff ff 	lea    rdi,[rbp-0xf0]
  20d265:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
            .has_children = (try in_stream.readByte()) == DW.CHILDREN_yes,
  20d26c:	48 8b 95 60 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2a0]
  20d273:	48 8b b5 10 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f0]
  20d27a:	48 89 85 d8 fc ff ff 	mov    QWORD PTR [rbp-0x328],rax
  20d281:	e8 ba d1 ff ff       	call   20a440 <InStream(ReadError)_readByte>
  20d286:	66 83 bd 10 ff ff ff 	cmp    WORD PTR [rbp-0xf0],0x0
  20d28d:	00 
  20d28e:	74 63                	je     20d2f3 <parseAbbrevTable+0x2e3>
  20d290:	66 8b 85 10 ff ff ff 	mov    ax,WORD PTR [rbp-0xf0]
  20d297:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
  20d29e:	66 89 85 d6 fc ff ff 	mov    WORD PTR [rbp-0x32a],ax
  20d2a5:	e8 a6 71 ff ff       	call   204450 <__zig_return_error>
  20d2aa:	b9 28 00 00 00       	mov    ecx,0x28
  20d2af:	89 ca                	mov    edx,ecx
  20d2b1:	48 8d bd e0 fe ff ff 	lea    rdi,[rbp-0x120]
  20d2b8:	66 8b 85 d6 fc ff ff 	mov    ax,WORD PTR [rbp-0x32a]
  20d2bf:	66 89 85 e0 fe ff ff 	mov    WORD PTR [rbp-0x120],ax
  20d2c6:	48 8b b5 18 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2e8]
  20d2cd:	48 89 bd c8 fc ff ff 	mov    QWORD PTR [rbp-0x338],rdi
  20d2d4:	48 89 f7             	mov    rdi,rsi
  20d2d7:	48 8b b5 c8 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x338]
  20d2de:	e8 1d 4a 01 00       	call   221d00 <memcpy>
  20d2e3:	48 8b 85 08 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2f8]
  20d2ea:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20d2f1:	5d                   	pop    rbp
  20d2f2:	c3                   	ret    
  20d2f3:	80 bd 12 ff ff ff 01 	cmp    BYTE PTR [rbp-0xee],0x1
  20d2fa:	0f 94 c0             	sete   al
            .attrs = ArrayList(AbbrevAttr).init(st.allocator()),
  20d2fd:	48 8b bd 80 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x280]
  20d304:	88 85 c7 fc ff ff    	mov    BYTE PTR [rbp-0x339],al
  20d30a:	e8 71 f1 ff ff       	call   20c480 <ElfStackTrace_allocator>
  20d30f:	48 8d bd c0 fe ff ff 	lea    rdi,[rbp-0x140]
  20d316:	48 89 c6             	mov    rsi,rax
  20d319:	e8 92 07 00 00       	call   20dab0 <AlignedArrayList(AbbrevAttr,8)_init>
  20d31e:	48 8d b5 40 fd ff ff 	lea    rsi,[rbp-0x2c0]
  20d325:	48 8d 95 88 fe ff ff 	lea    rdx,[rbp-0x178]
        try result.append(AbbrevTableEntry{
  20d32c:	8a 8d c7 fc ff ff    	mov    cl,BYTE PTR [rbp-0x339]
  20d332:	80 e1 01             	and    cl,0x1
  20d335:	88 8d 88 fe ff ff    	mov    BYTE PTR [rbp-0x178],cl
  20d33b:	48 8b 85 f0 fc ff ff 	mov    rax,QWORD PTR [rbp-0x310]
  20d342:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  20d349:	48 8b bd d8 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x328]
  20d350:	48 89 bd 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rdi
  20d357:	4c 8b 85 c0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x140]
  20d35e:	4c 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],r8
  20d365:	4c 8b 85 c8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x138]
  20d36c:	4c 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],r8
  20d373:	4c 8b 85 d0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x130]
  20d37a:	4c 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],r8
  20d381:	4c 8b 85 d8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x128]
  20d388:	4c 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],r8
  20d38f:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
  20d396:	e8 75 07 00 00       	call   20db10 <AlignedArrayList(AbbrevTableEntry,1)_append>
  20d39b:	66 89 85 86 fe ff ff 	mov    WORD PTR [rbp-0x17a],ax
  20d3a2:	66 83 bd 86 fe ff ff 	cmp    WORD PTR [rbp-0x17a],0x0
  20d3a9:	00 
  20d3aa:	74 63                	je     20d40f <parseAbbrevTable+0x3ff>
  20d3ac:	66 8b 85 86 fe ff ff 	mov    ax,WORD PTR [rbp-0x17a]
  20d3b3:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
  20d3ba:	66 89 85 c4 fc ff ff 	mov    WORD PTR [rbp-0x33c],ax
  20d3c1:	e8 8a 70 ff ff       	call   204450 <__zig_return_error>
  20d3c6:	b9 28 00 00 00       	mov    ecx,0x28
  20d3cb:	89 ca                	mov    edx,ecx
  20d3cd:	48 8d bd 58 fe ff ff 	lea    rdi,[rbp-0x1a8]
  20d3d4:	66 8b 85 c4 fc ff ff 	mov    ax,WORD PTR [rbp-0x33c]
  20d3db:	66 89 85 58 fe ff ff 	mov    WORD PTR [rbp-0x1a8],ax
  20d3e2:	48 8b b5 18 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2e8]
  20d3e9:	48 89 bd b8 fc ff ff 	mov    QWORD PTR [rbp-0x348],rdi
  20d3f0:	48 89 f7             	mov    rdi,rsi
  20d3f3:	48 8b b5 b8 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x348]
  20d3fa:	e8 01 49 01 00       	call   221d00 <memcpy>
  20d3ff:	48 8b 85 08 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2f8]
  20d406:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20d40d:	5d                   	pop    rbp
  20d40e:	c3                   	ret    
  20d40f:	48 8d 85 40 fd ff ff 	lea    rax,[rbp-0x2c0]
        const attrs = &result.items[result.len - 1].attrs;
  20d416:	48 8b 8d 50 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2b0]
  20d41d:	48 83 e9 01          	sub    rcx,0x1
  20d421:	0f 92 c2             	setb   dl
  20d424:	48 89 85 b0 fc ff ff 	mov    QWORD PTR [rbp-0x350],rax
  20d42b:	48 89 8d a8 fc ff ff 	mov    QWORD PTR [rbp-0x358],rcx
  20d432:	88 95 a7 fc ff ff    	mov    BYTE PTR [rbp-0x359],dl
  20d438:	0f 82 21 02 00 00    	jb     20d65f <parseAbbrevTable+0x64f>
  20d43e:	e9 2c 02 00 00       	jmp    20d66f <parseAbbrevTable+0x65f>
        while (true) {
  20d443:	eb 00                	jmp    20d445 <parseAbbrevTable+0x435>
  20d445:	48 8d bd 48 fe ff ff 	lea    rdi,[rbp-0x1b8]
            const attr_id = try readULeb128(in_stream);
  20d44c:	48 8b 95 60 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2a0]
  20d453:	48 8b b5 10 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f0]
  20d45a:	e8 91 04 00 00       	call   20d8f0 <readULeb128>
  20d45f:	66 83 bd 48 fe ff ff 	cmp    WORD PTR [rbp-0x1b8],0x0
  20d466:	00 
  20d467:	74 63                	je     20d4cc <parseAbbrevTable+0x4bc>
  20d469:	66 8b 85 48 fe ff ff 	mov    ax,WORD PTR [rbp-0x1b8]
  20d470:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
  20d477:	66 89 85 a4 fc ff ff 	mov    WORD PTR [rbp-0x35c],ax
  20d47e:	e8 cd 6f ff ff       	call   204450 <__zig_return_error>
  20d483:	b9 28 00 00 00       	mov    ecx,0x28
  20d488:	89 ca                	mov    edx,ecx
  20d48a:	48 8d bd 10 fe ff ff 	lea    rdi,[rbp-0x1f0]
  20d491:	66 8b 85 a4 fc ff ff 	mov    ax,WORD PTR [rbp-0x35c]
  20d498:	66 89 85 10 fe ff ff 	mov    WORD PTR [rbp-0x1f0],ax
  20d49f:	48 8b b5 18 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2e8]
  20d4a6:	48 89 bd 98 fc ff ff 	mov    QWORD PTR [rbp-0x368],rdi
  20d4ad:	48 89 f7             	mov    rdi,rsi
  20d4b0:	48 8b b5 98 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x368]
  20d4b7:	e8 44 48 01 00       	call   221d00 <memcpy>
  20d4bc:	48 8b 85 08 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2f8]
  20d4c3:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20d4ca:	5d                   	pop    rbp
  20d4cb:	c3                   	ret    
  20d4cc:	48 8d bd 00 fe ff ff 	lea    rdi,[rbp-0x200]
  20d4d3:	48 8b 85 50 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b0]
  20d4da:	48 89 85 28 fd ff ff 	mov    QWORD PTR [rbp-0x2d8],rax
            const form_id = try readULeb128(in_stream);
  20d4e1:	48 8b 95 60 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2a0]
  20d4e8:	48 8b b5 10 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f0]
  20d4ef:	e8 fc 03 00 00       	call   20d8f0 <readULeb128>
  20d4f4:	66 83 bd 00 fe ff ff 	cmp    WORD PTR [rbp-0x200],0x0
  20d4fb:	00 
  20d4fc:	74 63                	je     20d561 <parseAbbrevTable+0x551>
  20d4fe:	66 8b 85 00 fe ff ff 	mov    ax,WORD PTR [rbp-0x200]
  20d505:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
  20d50c:	66 89 85 96 fc ff ff 	mov    WORD PTR [rbp-0x36a],ax
  20d513:	e8 38 6f ff ff       	call   204450 <__zig_return_error>
  20d518:	b9 28 00 00 00       	mov    ecx,0x28
  20d51d:	89 ca                	mov    edx,ecx
  20d51f:	48 8d bd c8 fd ff ff 	lea    rdi,[rbp-0x238]
  20d526:	66 8b 85 96 fc ff ff 	mov    ax,WORD PTR [rbp-0x36a]
  20d52d:	66 89 85 c8 fd ff ff 	mov    WORD PTR [rbp-0x238],ax
  20d534:	48 8b b5 18 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2e8]
  20d53b:	48 89 bd 88 fc ff ff 	mov    QWORD PTR [rbp-0x378],rdi
  20d542:	48 89 f7             	mov    rdi,rsi
  20d545:	48 8b b5 88 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x378]
  20d54c:	e8 af 47 01 00       	call   221d00 <memcpy>
  20d551:	48 8b 85 08 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2f8]
  20d558:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20d55f:	5d                   	pop    rbp
  20d560:	c3                   	ret    
  20d561:	48 8b 85 08 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1f8]
  20d568:	48 89 85 20 fd ff ff 	mov    QWORD PTR [rbp-0x2e0],rax
            if (attr_id == 0 and form_id == 0) break;
  20d56f:	48 83 bd 28 fd ff ff 	cmp    QWORD PTR [rbp-0x2d8],0x0
  20d576:	00 
  20d577:	0f 94 c1             	sete   cl
  20d57a:	f6 c1 01             	test   cl,0x1
  20d57d:	88 8d 87 fc ff ff    	mov    BYTE PTR [rbp-0x379],cl
  20d583:	75 02                	jne    20d587 <parseAbbrevTable+0x577>
  20d585:	eb 11                	jmp    20d598 <parseAbbrevTable+0x588>
  20d587:	48 83 bd 20 fd ff ff 	cmp    QWORD PTR [rbp-0x2e0],0x0
  20d58e:	00 
  20d58f:	0f 94 c0             	sete   al
  20d592:	88 85 87 fc ff ff    	mov    BYTE PTR [rbp-0x379],al
  20d598:	8a 85 87 fc ff ff    	mov    al,BYTE PTR [rbp-0x379]
  20d59e:	a8 01                	test   al,0x1
  20d5a0:	75 02                	jne    20d5a4 <parseAbbrevTable+0x594>
  20d5a2:	eb 05                	jmp    20d5a9 <parseAbbrevTable+0x599>
  20d5a4:	e9 b1 00 00 00       	jmp    20d65a <parseAbbrevTable+0x64a>
  20d5a9:	eb 00                	jmp    20d5ab <parseAbbrevTable+0x59b>
  20d5ab:	48 8d 95 b8 fd ff ff 	lea    rdx,[rbp-0x248]
            try attrs.append(AbbrevAttr{
  20d5b2:	48 8b b5 30 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2d0]
                .attr_id = attr_id,
  20d5b9:	48 8b 85 28 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2d8]
                .form_id = form_id,
  20d5c0:	48 8b 8d 20 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2e0]
            try attrs.append(AbbrevAttr{
  20d5c7:	48 89 85 b8 fd ff ff 	mov    QWORD PTR [rbp-0x248],rax
  20d5ce:	48 89 8d c0 fd ff ff 	mov    QWORD PTR [rbp-0x240],rcx
  20d5d5:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
  20d5dc:	e8 cf 05 00 00       	call   20dbb0 <AlignedArrayList(AbbrevAttr,8)_append>
  20d5e1:	66 89 85 b6 fd ff ff 	mov    WORD PTR [rbp-0x24a],ax
  20d5e8:	66 83 bd b6 fd ff ff 	cmp    WORD PTR [rbp-0x24a],0x0
  20d5ef:	00 
  20d5f0:	74 63                	je     20d655 <parseAbbrevTable+0x645>
  20d5f2:	66 8b 85 b6 fd ff ff 	mov    ax,WORD PTR [rbp-0x24a]
  20d5f9:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
  20d600:	66 89 85 84 fc ff ff 	mov    WORD PTR [rbp-0x37c],ax
  20d607:	e8 44 6e ff ff       	call   204450 <__zig_return_error>
  20d60c:	b9 28 00 00 00       	mov    ecx,0x28
  20d611:	89 ca                	mov    edx,ecx
  20d613:	48 8d bd 88 fd ff ff 	lea    rdi,[rbp-0x278]
  20d61a:	66 8b 85 84 fc ff ff 	mov    ax,WORD PTR [rbp-0x37c]
  20d621:	66 89 85 88 fd ff ff 	mov    WORD PTR [rbp-0x278],ax
  20d628:	48 8b b5 18 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2e8]
  20d62f:	48 89 bd 78 fc ff ff 	mov    QWORD PTR [rbp-0x388],rdi
  20d636:	48 89 f7             	mov    rdi,rsi
  20d639:	48 8b b5 78 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x388]
  20d640:	e8 bb 46 01 00       	call   221d00 <memcpy>
  20d645:	48 8b 85 08 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2f8]
  20d64c:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20d653:	5d                   	pop    rbp
  20d654:	c3                   	ret    
        while (true) {
  20d655:	e9 e9 fd ff ff       	jmp    20d443 <parseAbbrevTable+0x433>
    while (true) {
  20d65a:	e9 6b fa ff ff       	jmp    20d0ca <parseAbbrevTable+0xba>
  20d65f:	48 8d 3d b2 7c 01 00 	lea    rdi,[rip+0x17cb2]        # 225318 <__unnamed_5>
  20d666:	31 c0                	xor    eax,eax
  20d668:	89 c6                	mov    esi,eax
        const attrs = &result.items[result.len - 1].attrs;
  20d66a:	e8 51 5a ff ff       	call   2030c0 <panic>
  20d66f:	48 8b 85 a8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x358]
  20d676:	48 8b 8d b0 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x350]
  20d67d:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  20d681:	72 10                	jb     20d693 <parseAbbrevTable+0x683>
  20d683:	48 8d 3d 76 7c 01 00 	lea    rdi,[rip+0x17c76]        # 225300 <__unnamed_4>
  20d68a:	31 c0                	xor    eax,eax
  20d68c:	89 c6                	mov    esi,eax
  20d68e:	e8 2d 5a ff ff       	call   2030c0 <panic>
  20d693:	48 8b 85 a8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x358]
  20d69a:	48 6b c8 38          	imul   rcx,rax,0x38
  20d69e:	48 8b 95 b0 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x350]
  20d6a5:	48 03 0a             	add    rcx,QWORD PTR [rdx]
  20d6a8:	48 83 c1 18          	add    rcx,0x18
  20d6ac:	48 89 8d 30 fd ff ff 	mov    QWORD PTR [rbp-0x2d0],rcx
        while (true) {
  20d6b3:	e9 8b fd ff ff       	jmp    20d443 <parseAbbrevTable+0x433>
  20d6b8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  20d6bf:	00 

000000000020d6c0 <AlignedArrayList(AbbrevTableHeader,8)_append>:
        pub fn append(self: *Self, item: T) !void {
  20d6c0:	55                   	push   rbp
  20d6c1:	48 89 e5             	mov    rbp,rsp
  20d6c4:	48 83 ec 60          	sub    rsp,0x60
  20d6c8:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  20d6cc:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
            const new_item_ptr = try self.addOne();
  20d6d0:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  20d6d4:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  20d6d8:	48 89 c7             	mov    rdi,rax
  20d6db:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20d6df:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
  20d6e3:	48 89 c6             	mov    rsi,rax
  20d6e6:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  20d6ea:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  20d6ee:	48 89 ca             	mov    rdx,rcx
  20d6f1:	e8 6a 00 00 00       	call   20d760 <AlignedArrayList(AbbrevTableHeader,8)_addOne>
  20d6f6:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  20d6fb:	74 1b                	je     20d718 <AlignedArrayList(AbbrevTableHeader,8)_append+0x58>
  20d6fd:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  20d701:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20d705:	66 89 45 b6          	mov    WORD PTR [rbp-0x4a],ax
  20d709:	e8 42 6d ff ff       	call   204450 <__zig_return_error>
  20d70e:	66 8b 45 b6          	mov    ax,WORD PTR [rbp-0x4a]
  20d712:	48 83 c4 60          	add    rsp,0x60
  20d716:	5d                   	pop    rbp
  20d717:	c3                   	ret    
  20d718:	31 c0                	xor    eax,eax
  20d71a:	66 89 c1             	mov    cx,ax
  20d71d:	b8 28 00 00 00       	mov    eax,0x28
  20d722:	89 c2                	mov    edx,eax
  20d724:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20d728:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
            new_item_ptr.* = item;
  20d72c:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  20d730:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  20d734:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  20d738:	48 89 f7             	mov    rdi,rsi
  20d73b:	48 8b 75 a8          	mov    rsi,QWORD PTR [rbp-0x58]
  20d73f:	66 89 4d a6          	mov    WORD PTR [rbp-0x5a],cx
  20d743:	e8 b8 45 01 00       	call   221d00 <memcpy>
        pub fn append(self: *Self, item: T) !void {
  20d748:	66 8b 45 a6          	mov    ax,WORD PTR [rbp-0x5a]
  20d74c:	48 83 c4 60          	add    rsp,0x60
  20d750:	5d                   	pop    rbp
  20d751:	c3                   	ret    
  20d752:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20d759:	1f 84 00 00 00 00 00 

000000000020d760 <AlignedArrayList(AbbrevTableHeader,8)_addOne>:
                if (better_capacity >= new_capacity) break;
            }
            self.items = try self.allocator.alignedRealloc(T, A, self.items, better_capacity);
        }

        pub fn addOne(self: *Self) !*T {
  20d760:	55                   	push   rbp
  20d761:	48 89 e5             	mov    rbp,rsp
  20d764:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  20d76b:	48 89 f8             	mov    rax,rdi
  20d76e:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            const new_length = self.len + 1;
  20d772:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  20d776:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  20d77a:	48 83 c2 01          	add    rdx,0x1
  20d77e:	0f 92 c1             	setb   cl
  20d781:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  20d785:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  20d789:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  20d78d:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  20d791:	88 4d 9f             	mov    BYTE PTR [rbp-0x61],cl
  20d794:	72 57                	jb     20d7ed <AlignedArrayList(AbbrevTableHeader,8)_addOne+0x8d>
  20d796:	eb 65                	jmp    20d7fd <AlignedArrayList(AbbrevTableHeader,8)_addOne+0x9d>
            try self.ensureCapacity(new_length);
  20d798:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  20d79c:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  20d7a0:	66 89 45 9c          	mov    WORD PTR [rbp-0x64],ax
  20d7a4:	e8 a7 6c ff ff       	call   204450 <__zig_return_error>
  20d7a9:	66 8b 45 9c          	mov    ax,WORD PTR [rbp-0x64]
  20d7ad:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  20d7b1:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  20d7b5:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  20d7b9:	48 89 39             	mov    QWORD PTR [rcx],rdi
  20d7bc:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  20d7c0:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  20d7c4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  20d7c8:	48 81 c4 80 00 00 00 	add    rsp,0x80
  20d7cf:	5d                   	pop    rbp
  20d7d0:	c3                   	ret    
            const result = &self.items[self.len];
  20d7d1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20d7d5:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  20d7d9:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
  20d7dd:	48 3b 48 08          	cmp    rcx,QWORD PTR [rax+0x8]
  20d7e1:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  20d7e5:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
  20d7e9:	72 4c                	jb     20d837 <AlignedArrayList(AbbrevTableHeader,8)_addOne+0xd7>
  20d7eb:	eb 3a                	jmp    20d827 <AlignedArrayList(AbbrevTableHeader,8)_addOne+0xc7>
  20d7ed:	48 8d 3d 24 7b 01 00 	lea    rdi,[rip+0x17b24]        # 225318 <__unnamed_5>
  20d7f4:	31 c0                	xor    eax,eax
  20d7f6:	89 c6                	mov    esi,eax
            const new_length = self.len + 1;
  20d7f8:	e8 c3 58 ff ff       	call   2030c0 <panic>
  20d7fd:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  20d801:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
            try self.ensureCapacity(new_length);
  20d805:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  20d809:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  20d80d:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  20d811:	e8 7a 19 00 00       	call   20f190 <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity>
  20d816:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  20d81a:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  20d81f:	0f 85 73 ff ff ff    	jne    20d798 <AlignedArrayList(AbbrevTableHeader,8)_addOne+0x38>
  20d825:	eb aa                	jmp    20d7d1 <AlignedArrayList(AbbrevTableHeader,8)_addOne+0x71>
  20d827:	48 8d 3d d2 7a 01 00 	lea    rdi,[rip+0x17ad2]        # 225300 <__unnamed_4>
  20d82e:	31 c0                	xor    eax,eax
  20d830:	89 c6                	mov    esi,eax
            const result = &self.items[self.len];
  20d832:	e8 89 58 ff ff       	call   2030c0 <panic>
  20d837:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  20d83b:	48 6b c8 28          	imul   rcx,rax,0x28
  20d83f:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
  20d843:	48 03 0a             	add    rcx,QWORD PTR [rdx]
  20d846:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
            self.len = new_length;
  20d84a:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  20d84e:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  20d852:	48 89 71 10          	mov    QWORD PTR [rcx+0x10],rsi
            return result;
  20d856:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  20d85a:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  20d860:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  20d864:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  20d868:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  20d86c:	48 89 0e             	mov    QWORD PTR [rsi],rcx
  20d86f:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  20d873:	48 89 4e 08          	mov    QWORD PTR [rsi+0x8],rcx
  20d877:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  20d87b:	48 81 c4 80 00 00 00 	add    rsp,0x80
  20d882:	5d                   	pop    rbp
  20d883:	c3                   	ret    
  20d884:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20d88b:	00 00 00 00 00 

000000000020d890 <AlignedArrayList(AbbrevTableEntry,1)_init>:
        pub fn init(allocator: *Allocator) Self {
  20d890:	55                   	push   rbp
  20d891:	48 89 e5             	mov    rbp,rsp
  20d894:	48 89 f8             	mov    rax,rdi
  20d897:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
                .allocator = allocator,
  20d89b:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
            return Self{
  20d89f:	48 8b 0d 1a 4a ff ff 	mov    rcx,QWORD PTR [rip+0xffffffffffff4a1a]        # 2022c0 <__unnamed_123>
  20d8a6:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  20d8aa:	48 8b 0d 17 4a ff ff 	mov    rcx,QWORD PTR [rip+0xffffffffffff4a17]        # 2022c8 <__unnamed_123+0x8>
  20d8b1:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  20d8b5:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  20d8bc:	00 
  20d8bd:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  20d8c1:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  20d8c5:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  20d8c8:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20d8cc:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  20d8d0:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  20d8d4:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  20d8d8:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  20d8dc:	48 89 4f 18          	mov    QWORD PTR [rdi+0x18],rcx
  20d8e0:	5d                   	pop    rbp
  20d8e1:	c3                   	ret    
  20d8e2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20d8e9:	1f 84 00 00 00 00 00 

000000000020d8f0 <readULeb128>:
fn readULeb128(in_stream: var) !u64 {
  20d8f0:	55                   	push   rbp
  20d8f1:	48 89 e5             	mov    rbp,rsp
  20d8f4:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  20d8fb:	48 89 f8             	mov    rax,rdi
  20d8fe:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
    var result: u64 = 0;
  20d902:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
  20d909:	00 
    var shift: usize = 0;
  20d90a:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
  20d911:	00 
  20d912:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  20d916:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
  20d91a:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
    while (true) {
  20d91e:	eb 00                	jmp    20d920 <readULeb128+0x30>
  20d920:	48 8d 7d f8          	lea    rdi,[rbp-0x8]
        const byte = try in_stream.readByte();
  20d924:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  20d928:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  20d92c:	e8 0f cb ff ff       	call   20a440 <InStream(ReadError)_readByte>
  20d931:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  20d936:	74 39                	je     20d971 <readULeb128+0x81>
  20d938:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  20d93c:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  20d940:	66 89 45 8e          	mov    WORD PTR [rbp-0x72],ax
  20d944:	e8 07 6b ff ff       	call   204450 <__zig_return_error>
  20d949:	66 8b 45 8e          	mov    ax,WORD PTR [rbp-0x72]
  20d94d:	66 89 45 e0          	mov    WORD PTR [rbp-0x20],ax
  20d951:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  20d955:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  20d959:	48 89 39             	mov    QWORD PTR [rcx],rdi
  20d95c:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  20d960:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  20d964:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  20d968:	48 81 c4 90 00 00 00 	add    rsp,0x90
  20d96f:	5d                   	pop    rbp
  20d970:	c3                   	ret    
  20d971:	8a 45 fa             	mov    al,BYTE PTR [rbp-0x6]
  20d974:	88 45 b7             	mov    BYTE PTR [rbp-0x49],al
        var operand: u64 = undefined;
  20d977:	48 b9 aa aa aa aa aa 	movabs rcx,0xaaaaaaaaaaaaaaaa
  20d97e:	aa aa aa 
  20d981:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
        if (@shlWithOverflow(u64, byte & 0b01111111, @intCast(u6, shift), &operand)) return error.InvalidDebugInfo;
  20d985:	8a 45 b7             	mov    al,BYTE PTR [rbp-0x49]
  20d988:	24 7f                	and    al,0x7f
  20d98a:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  20d98e:	88 ca                	mov    dl,cl
  20d990:	89 ce                	mov    esi,ecx
  20d992:	83 e6 3f             	and    esi,0x3f
  20d995:	89 f7                	mov    edi,esi
  20d997:	48 39 f9             	cmp    rcx,rdi
  20d99a:	88 45 8d             	mov    BYTE PTR [rbp-0x73],al
  20d99d:	88 55 8c             	mov    BYTE PTR [rbp-0x74],dl
  20d9a0:	0f 84 94 00 00 00    	je     20da3a <readULeb128+0x14a>
  20d9a6:	e9 c9 00 00 00       	jmp    20da74 <readULeb128+0x184>
  20d9ab:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  20d9af:	e8 9c 6a ff ff       	call   204450 <__zig_return_error>
  20d9b4:	48 8b 3d 75 49 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff4975]        # 202330 <__unnamed_117>
  20d9bb:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  20d9bf:	48 89 38             	mov    QWORD PTR [rax],rdi
  20d9c2:	48 8b 3d 6f 49 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff496f]        # 202338 <__unnamed_117+0x8>
  20d9c9:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  20d9cd:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  20d9d1:	48 81 c4 90 00 00 00 	add    rsp,0x90
  20d9d8:	5d                   	pop    rbp
  20d9d9:	c3                   	ret    
  20d9da:	eb 00                	jmp    20d9dc <readULeb128+0xec>
        result |= operand;
  20d9dc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  20d9e0:	48 0b 45 a8          	or     rax,QWORD PTR [rbp-0x58]
  20d9e4:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
        if ((byte & 0b10000000) == 0) return result;
  20d9e8:	8a 4d b7             	mov    cl,BYTE PTR [rbp-0x49]
  20d9eb:	80 e1 80             	and    cl,0x80
  20d9ee:	80 f9 00             	cmp    cl,0x0
  20d9f1:	75 2e                	jne    20da21 <readULeb128+0x131>
  20d9f3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  20d9f7:	66 c7 45 d0 00 00    	mov    WORD PTR [rbp-0x30],0x0
  20d9fd:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  20da01:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20da05:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  20da09:	48 89 01             	mov    QWORD PTR [rcx],rax
  20da0c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  20da10:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20da14:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  20da18:	48 81 c4 90 00 00 00 	add    rsp,0x90
  20da1f:	5d                   	pop    rbp
  20da20:	c3                   	ret    
        shift += 7;
  20da21:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  20da25:	48 83 c0 07          	add    rax,0x7
  20da29:	0f 92 c1             	setb   cl
  20da2c:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  20da30:	88 8d 7f ff ff ff    	mov    BYTE PTR [rbp-0x81],cl
  20da36:	72 4c                	jb     20da84 <readULeb128+0x194>
  20da38:	eb 5a                	jmp    20da94 <readULeb128+0x1a4>
        if (@shlWithOverflow(u64, byte & 0b01111111, @intCast(u6, shift), &operand)) return error.InvalidDebugInfo;
  20da3a:	8a 45 8d             	mov    al,BYTE PTR [rbp-0x73]
  20da3d:	0f b6 c8             	movzx  ecx,al
  20da40:	89 ca                	mov    edx,ecx
  20da42:	40 8a 75 8c          	mov    sil,BYTE PTR [rbp-0x74]
  20da46:	40 80 e6 3f          	and    sil,0x3f
  20da4a:	40 0f b6 ce          	movzx  ecx,sil
  20da4e:	89 cf                	mov    edi,ecx
  20da50:	48 89 f9             	mov    rcx,rdi
  20da53:	49 89 d0             	mov    r8,rdx
  20da56:	49 d3 e0             	shl    r8,cl
  20da59:	48 89 f9             	mov    rcx,rdi
  20da5c:	4c 89 c7             	mov    rdi,r8
  20da5f:	48 d3 ef             	shr    rdi,cl
  20da62:	4c 89 45 a8          	mov    QWORD PTR [rbp-0x58],r8
  20da66:	48 39 fa             	cmp    rdx,rdi
  20da69:	0f 85 3c ff ff ff    	jne    20d9ab <readULeb128+0xbb>
  20da6f:	e9 66 ff ff ff       	jmp    20d9da <readULeb128+0xea>
  20da74:	48 8d 3d 2d 79 01 00 	lea    rdi,[rip+0x1792d]        # 2253a8 <__unnamed_8>
  20da7b:	31 c0                	xor    eax,eax
  20da7d:	89 c6                	mov    esi,eax
  20da7f:	e8 3c 56 ff ff       	call   2030c0 <panic>
  20da84:	48 8d 3d 8d 78 01 00 	lea    rdi,[rip+0x1788d]        # 225318 <__unnamed_5>
  20da8b:	31 c0                	xor    eax,eax
  20da8d:	89 c6                	mov    esi,eax
        shift += 7;
  20da8f:	e8 2c 56 ff ff       	call   2030c0 <panic>
  20da94:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  20da98:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
    while (true) {
  20da9c:	e9 7d fe ff ff       	jmp    20d91e <readULeb128+0x2e>
  20daa1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20daa8:	0f 1f 84 00 00 00 00 
  20daaf:	00 

000000000020dab0 <AlignedArrayList(AbbrevAttr,8)_init>:
        pub fn init(allocator: *Allocator) Self {
  20dab0:	55                   	push   rbp
  20dab1:	48 89 e5             	mov    rbp,rsp
  20dab4:	48 89 f8             	mov    rax,rdi
  20dab7:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
                .allocator = allocator,
  20dabb:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
            return Self{
  20dabf:	48 8b 0d fa 47 ff ff 	mov    rcx,QWORD PTR [rip+0xffffffffffff47fa]        # 2022c0 <__unnamed_123>
  20dac6:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  20daca:	48 8b 0d f7 47 ff ff 	mov    rcx,QWORD PTR [rip+0xffffffffffff47f7]        # 2022c8 <__unnamed_123+0x8>
  20dad1:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  20dad5:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  20dadc:	00 
  20dadd:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  20dae1:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  20dae5:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  20dae8:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20daec:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  20daf0:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  20daf4:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  20daf8:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  20dafc:	48 89 4f 18          	mov    QWORD PTR [rdi+0x18],rcx
  20db00:	5d                   	pop    rbp
  20db01:	c3                   	ret    
  20db02:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20db09:	1f 84 00 00 00 00 00 

000000000020db10 <AlignedArrayList(AbbrevTableEntry,1)_append>:
        pub fn append(self: *Self, item: T) !void {
  20db10:	55                   	push   rbp
  20db11:	48 89 e5             	mov    rbp,rsp
  20db14:	48 83 ec 60          	sub    rsp,0x60
  20db18:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  20db1c:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
            const new_item_ptr = try self.addOne();
  20db20:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  20db24:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  20db28:	48 89 c7             	mov    rdi,rax
  20db2b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20db2f:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
  20db33:	48 89 c6             	mov    rsi,rax
  20db36:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  20db3a:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  20db3e:	48 89 ca             	mov    rdx,rcx
  20db41:	e8 fa 00 00 00       	call   20dc40 <AlignedArrayList(AbbrevTableEntry,1)_addOne>
  20db46:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  20db4b:	74 1b                	je     20db68 <AlignedArrayList(AbbrevTableEntry,1)_append+0x58>
  20db4d:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  20db51:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20db55:	66 89 45 b6          	mov    WORD PTR [rbp-0x4a],ax
  20db59:	e8 f2 68 ff ff       	call   204450 <__zig_return_error>
  20db5e:	66 8b 45 b6          	mov    ax,WORD PTR [rbp-0x4a]
  20db62:	48 83 c4 60          	add    rsp,0x60
  20db66:	5d                   	pop    rbp
  20db67:	c3                   	ret    
  20db68:	31 c0                	xor    eax,eax
  20db6a:	66 89 c1             	mov    cx,ax
  20db6d:	b8 38 00 00 00       	mov    eax,0x38
  20db72:	89 c2                	mov    edx,eax
  20db74:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20db78:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
            new_item_ptr.* = item;
  20db7c:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  20db80:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  20db84:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  20db88:	48 89 f7             	mov    rdi,rsi
  20db8b:	48 8b 75 a8          	mov    rsi,QWORD PTR [rbp-0x58]
  20db8f:	66 89 4d a6          	mov    WORD PTR [rbp-0x5a],cx
  20db93:	e8 68 41 01 00       	call   221d00 <memcpy>
        pub fn append(self: *Self, item: T) !void {
  20db98:	66 8b 45 a6          	mov    ax,WORD PTR [rbp-0x5a]
  20db9c:	48 83 c4 60          	add    rsp,0x60
  20dba0:	5d                   	pop    rbp
  20dba1:	c3                   	ret    
  20dba2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20dba9:	1f 84 00 00 00 00 00 

000000000020dbb0 <AlignedArrayList(AbbrevAttr,8)_append>:
  20dbb0:	55                   	push   rbp
  20dbb1:	48 89 e5             	mov    rbp,rsp
  20dbb4:	48 83 ec 50          	sub    rsp,0x50
  20dbb8:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  20dbbc:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
            const new_item_ptr = try self.addOne();
  20dbc0:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  20dbc4:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  20dbc8:	48 89 c7             	mov    rdi,rax
  20dbcb:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20dbcf:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
  20dbd3:	48 89 c6             	mov    rsi,rax
  20dbd6:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  20dbda:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  20dbde:	48 89 ca             	mov    rdx,rcx
  20dbe1:	e8 ea 0a 00 00       	call   20e6d0 <AlignedArrayList(AbbrevAttr,8)_addOne>
  20dbe6:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  20dbeb:	74 1b                	je     20dc08 <AlignedArrayList(AbbrevAttr,8)_append+0x58>
  20dbed:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  20dbf1:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20dbf5:	66 89 45 b6          	mov    WORD PTR [rbp-0x4a],ax
  20dbf9:	e8 52 68 ff ff       	call   204450 <__zig_return_error>
  20dbfe:	66 8b 45 b6          	mov    ax,WORD PTR [rbp-0x4a]
  20dc02:	48 83 c4 50          	add    rsp,0x50
  20dc06:	5d                   	pop    rbp
  20dc07:	c3                   	ret    
  20dc08:	31 c0                	xor    eax,eax
  20dc0a:	66 89 c1             	mov    cx,ax
  20dc0d:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  20dc11:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            new_item_ptr.* = item;
  20dc15:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  20dc19:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  20dc1d:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  20dc20:	48 89 3a             	mov    QWORD PTR [rdx],rdi
  20dc23:	48 8b 7e 08          	mov    rdi,QWORD PTR [rsi+0x8]
  20dc27:	48 89 7a 08          	mov    QWORD PTR [rdx+0x8],rdi
        pub fn append(self: *Self, item: T) !void {
  20dc2b:	66 89 c8             	mov    ax,cx
  20dc2e:	48 83 c4 50          	add    rsp,0x50
  20dc32:	5d                   	pop    rbp
  20dc33:	c3                   	ret    
  20dc34:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20dc3b:	00 00 00 00 00 

000000000020dc40 <AlignedArrayList(AbbrevTableEntry,1)_addOne>:
        pub fn addOne(self: *Self) !*T {
  20dc40:	55                   	push   rbp
  20dc41:	48 89 e5             	mov    rbp,rsp
  20dc44:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  20dc4b:	48 89 f8             	mov    rax,rdi
  20dc4e:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            const new_length = self.len + 1;
  20dc52:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  20dc56:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  20dc5a:	48 83 c2 01          	add    rdx,0x1
  20dc5e:	0f 92 c1             	setb   cl
  20dc61:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  20dc65:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  20dc69:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  20dc6d:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  20dc71:	88 4d 9f             	mov    BYTE PTR [rbp-0x61],cl
  20dc74:	72 57                	jb     20dccd <AlignedArrayList(AbbrevTableEntry,1)_addOne+0x8d>
  20dc76:	eb 65                	jmp    20dcdd <AlignedArrayList(AbbrevTableEntry,1)_addOne+0x9d>
            try self.ensureCapacity(new_length);
  20dc78:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  20dc7c:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  20dc80:	66 89 45 9c          	mov    WORD PTR [rbp-0x64],ax
  20dc84:	e8 c7 67 ff ff       	call   204450 <__zig_return_error>
  20dc89:	66 8b 45 9c          	mov    ax,WORD PTR [rbp-0x64]
  20dc8d:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  20dc91:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  20dc95:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  20dc99:	48 89 39             	mov    QWORD PTR [rcx],rdi
  20dc9c:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  20dca0:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  20dca4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  20dca8:	48 81 c4 80 00 00 00 	add    rsp,0x80
  20dcaf:	5d                   	pop    rbp
  20dcb0:	c3                   	ret    
            const result = &self.items[self.len];
  20dcb1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20dcb5:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  20dcb9:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
  20dcbd:	48 3b 48 08          	cmp    rcx,QWORD PTR [rax+0x8]
  20dcc1:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  20dcc5:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
  20dcc9:	72 4c                	jb     20dd17 <AlignedArrayList(AbbrevTableEntry,1)_addOne+0xd7>
  20dccb:	eb 3a                	jmp    20dd07 <AlignedArrayList(AbbrevTableEntry,1)_addOne+0xc7>
  20dccd:	48 8d 3d 44 76 01 00 	lea    rdi,[rip+0x17644]        # 225318 <__unnamed_5>
  20dcd4:	31 c0                	xor    eax,eax
  20dcd6:	89 c6                	mov    esi,eax
            const new_length = self.len + 1;
  20dcd8:	e8 e3 53 ff ff       	call   2030c0 <panic>
  20dcdd:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  20dce1:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
            try self.ensureCapacity(new_length);
  20dce5:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  20dce9:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  20dced:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  20dcf1:	e8 7a 00 00 00       	call   20dd70 <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity>
  20dcf6:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  20dcfa:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  20dcff:	0f 85 73 ff ff ff    	jne    20dc78 <AlignedArrayList(AbbrevTableEntry,1)_addOne+0x38>
  20dd05:	eb aa                	jmp    20dcb1 <AlignedArrayList(AbbrevTableEntry,1)_addOne+0x71>
  20dd07:	48 8d 3d f2 75 01 00 	lea    rdi,[rip+0x175f2]        # 225300 <__unnamed_4>
  20dd0e:	31 c0                	xor    eax,eax
  20dd10:	89 c6                	mov    esi,eax
            const result = &self.items[self.len];
  20dd12:	e8 a9 53 ff ff       	call   2030c0 <panic>
  20dd17:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  20dd1b:	48 6b c8 38          	imul   rcx,rax,0x38
  20dd1f:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
  20dd23:	48 03 0a             	add    rcx,QWORD PTR [rdx]
  20dd26:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
            self.len = new_length;
  20dd2a:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  20dd2e:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  20dd32:	48 89 71 10          	mov    QWORD PTR [rcx+0x10],rsi
            return result;
  20dd36:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  20dd3a:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  20dd40:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  20dd44:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  20dd48:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  20dd4c:	48 89 0e             	mov    QWORD PTR [rsi],rcx
  20dd4f:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  20dd53:	48 89 4e 08          	mov    QWORD PTR [rsi+0x8],rcx
  20dd57:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  20dd5b:	48 81 c4 80 00 00 00 	add    rsp,0x80
  20dd62:	5d                   	pop    rbp
  20dd63:	c3                   	ret    
  20dd64:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20dd6b:	00 00 00 00 00 

000000000020dd70 <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity>:
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  20dd70:	55                   	push   rbp
  20dd71:	48 89 e5             	mov    rbp,rsp
  20dd74:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  20dd7b:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  20dd7f:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
            var better_capacity = self.items.len;
  20dd83:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  20dd87:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  20dd8b:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
            if (better_capacity >= new_capacity) return;
  20dd8f:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  20dd93:	48 3b 55 c0          	cmp    rdx,QWORD PTR [rbp-0x40]
  20dd97:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  20dd9b:	72 11                	jb     20ddae <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0x3e>
  20dd9d:	31 c0                	xor    eax,eax
  20dd9f:	66 89 c1             	mov    cx,ax
  20dda2:	66 89 c8             	mov    ax,cx
  20dda5:	48 81 c4 90 00 00 00 	add    rsp,0x90
  20ddac:	5d                   	pop    rbp
  20ddad:	c3                   	ret    
            while (true) {
  20ddae:	eb 00                	jmp    20ddb0 <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0x40>
  20ddb0:	eb 00                	jmp    20ddb2 <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0x42>
  20ddb2:	31 c0                	xor    eax,eax
  20ddb4:	88 c1                	mov    cl,al
                better_capacity += better_capacity / 2 + 8;
  20ddb6:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  20ddba:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  20ddbe:	f6 c1 01             	test   cl,0x1
  20ddc1:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  20ddc5:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  20ddc9:	0f 85 8e 00 00 00    	jne    20de5d <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0xed>
  20ddcf:	eb 72                	jmp    20de43 <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0xd3>
                if (better_capacity >= new_capacity) break;
  20ddd1:	eb 02                	jmp    20ddd5 <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0x65>
            while (true) {
  20ddd3:	eb db                	jmp    20ddb0 <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0x40>
  20ddd5:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
            self.items = try self.allocator.alignedRealloc(T, A, self.items, better_capacity);
  20ddd9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20dddd:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  20dde1:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
  20dde5:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  20dde9:	4c 8b 45 b8          	mov    r8,QWORD PTR [rbp-0x48]
  20dded:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  20ddf1:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  20ddf5:	e8 d6 00 00 00       	call   20ded0 <Allocator_alignedRealloc>
  20ddfa:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  20ddff:	74 1e                	je     20de1f <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0xaf>
  20de01:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  20de05:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  20de09:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  20de0d:	e8 3e 66 ff ff       	call   204450 <__zig_return_error>
  20de12:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  20de16:	48 81 c4 90 00 00 00 	add    rsp,0x90
  20de1d:	5d                   	pop    rbp
  20de1e:	c3                   	ret    
  20de1f:	31 c0                	xor    eax,eax
  20de21:	66 89 c1             	mov    cx,ax
  20de24:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  20de28:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  20de2c:	48 89 16             	mov    QWORD PTR [rsi],rdx
  20de2f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  20de33:	48 89 56 08          	mov    QWORD PTR [rsi+0x8],rdx
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  20de37:	66 89 c8             	mov    ax,cx
  20de3a:	48 81 c4 90 00 00 00 	add    rsp,0x90
  20de41:	5d                   	pop    rbp
  20de42:	c3                   	ret    
                better_capacity += better_capacity / 2 + 8;
  20de43:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  20de47:	48 c1 e8 01          	shr    rax,0x1
  20de4b:	48 83 c0 08          	add    rax,0x8
  20de4f:	0f 92 c1             	setb   cl
  20de52:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  20de56:	88 4d 87             	mov    BYTE PTR [rbp-0x79],cl
  20de59:	72 12                	jb     20de6d <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0xfd>
  20de5b:	eb 20                	jmp    20de7d <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0x10d>
  20de5d:	48 8d 3d 14 77 01 00 	lea    rdi,[rip+0x17714]        # 225578 <__unnamed_73>
  20de64:	31 c0                	xor    eax,eax
  20de66:	89 c6                	mov    esi,eax
  20de68:	e8 53 52 ff ff       	call   2030c0 <panic>
  20de6d:	48 8d 3d a4 74 01 00 	lea    rdi,[rip+0x174a4]        # 225318 <__unnamed_5>
  20de74:	31 c0                	xor    eax,eax
  20de76:	89 c6                	mov    esi,eax
  20de78:	e8 43 52 ff ff       	call   2030c0 <panic>
  20de7d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  20de81:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  20de85:	48 01 c8             	add    rax,rcx
  20de88:	0f 92 c2             	setb   dl
  20de8b:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  20de92:	88 95 77 ff ff ff    	mov    BYTE PTR [rbp-0x89],dl
  20de98:	72 02                	jb     20de9c <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0x12c>
  20de9a:	eb 10                	jmp    20deac <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0x13c>
  20de9c:	48 8d 3d 75 74 01 00 	lea    rdi,[rip+0x17475]        # 225318 <__unnamed_5>
  20dea3:	31 c0                	xor    eax,eax
  20dea5:	89 c6                	mov    esi,eax
  20dea7:	e8 14 52 ff ff       	call   2030c0 <panic>
  20deac:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  20deb3:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                if (better_capacity >= new_capacity) break;
  20deb7:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  20debb:	48 3b 4d c0          	cmp    rcx,QWORD PTR [rbp-0x40]
  20debf:	0f 83 0c ff ff ff    	jae    20ddd1 <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0x61>
  20dec5:	e9 09 ff ff ff       	jmp    20ddd3 <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0x63>
  20deca:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000020ded0 <Allocator_alignedRealloc>:
    pub fn alignedRealloc(self: *Allocator, comptime T: type, comptime alignment: u29, old_mem: []align(alignment) T, n: usize) ![]align(alignment) T {
  20ded0:	55                   	push   rbp
  20ded1:	48 89 e5             	mov    rbp,rsp
  20ded4:	53                   	push   rbx
  20ded5:	48 81 ec 88 01 00 00 	sub    rsp,0x188
  20dedc:	48 89 f8             	mov    rax,rdi
  20dedf:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
  20dee6:	4c 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],r8
        if (old_mem.len == 0) {
  20deed:	48 83 79 08 00       	cmp    QWORD PTR [rcx+0x8],0x0
  20def2:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  20def9:	48 89 b5 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rsi
  20df00:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
  20df07:	48 89 bd b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rdi
  20df0e:	75 64                	jne    20df74 <Allocator_alignedRealloc+0xa4>
  20df10:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
            return self.alignedAlloc(T, alignment, n);
  20df14:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  20df1b:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  20df22:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  20df29:	e8 02 04 00 00       	call   20e330 <Allocator_alignedAlloc.22>
  20df2e:	66 83 7d e0 00       	cmp    WORD PTR [rbp-0x20],0x0
  20df33:	74 0e                	je     20df43 <Allocator_alignedRealloc+0x73>
  20df35:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  20df3c:	e8 0f 65 ff ff       	call   204450 <__zig_return_error>
  20df41:	eb 02                	jmp    20df45 <Allocator_alignedRealloc+0x75>
  20df43:	eb 00                	jmp    20df45 <Allocator_alignedRealloc+0x75>
  20df45:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20df49:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  20df50:	48 89 01             	mov    QWORD PTR [rcx],rax
  20df53:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20df57:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20df5b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20df5f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  20df63:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  20df6a:	48 81 c4 88 01 00 00 	add    rsp,0x188
  20df71:	5b                   	pop    rbx
  20df72:	5d                   	pop    rbp
  20df73:	c3                   	ret    
        if (old_mem.len == 0) {
  20df74:	eb 00                	jmp    20df76 <Allocator_alignedRealloc+0xa6>
        if (n == 0) {
  20df76:	48 83 bd 10 ff ff ff 	cmp    QWORD PTR [rbp-0xf0],0x0
  20df7d:	00 
  20df7e:	75 4b                	jne    20dfcb <Allocator_alignedRealloc+0xfb>
            self.free(old_mem);
  20df80:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
  20df87:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  20df8e:	e8 8d 06 00 00       	call   20e620 <Allocator_free.23>
            return ([*]align(alignment) T)(undefined)[0..0];
  20df93:	48 8b 35 c6 28 ff ff 	mov    rsi,QWORD PTR [rip+0xffffffffffff28c6]        # 200860 <__unnamed_74>
  20df9a:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  20dfa1:	48 89 37             	mov    QWORD PTR [rdi],rsi
  20dfa4:	48 8b 35 bd 28 ff ff 	mov    rsi,QWORD PTR [rip+0xffffffffffff28bd]        # 200868 <__unnamed_74+0x8>
  20dfab:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  20dfaf:	48 8b 35 ba 28 ff ff 	mov    rsi,QWORD PTR [rip+0xffffffffffff28ba]        # 200870 <__unnamed_74+0x10>
  20dfb6:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  20dfba:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  20dfc1:	48 81 c4 88 01 00 00 	add    rsp,0x188
  20dfc8:	5b                   	pop    rbx
  20dfc9:	5d                   	pop    rbp
  20dfca:	c3                   	ret    
        if (n == 0) {
  20dfcb:	eb 00                	jmp    20dfcd <Allocator_alignedRealloc+0xfd>
  20dfcd:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  20dfd1:	b8 38 00 00 00       	mov    eax,0x38
  20dfd6:	89 c2                	mov    edx,eax
        const old_byte_slice = @sliceToBytes(old_mem);
  20dfd8:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  20dfdf:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  20dfe2:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  20dfe6:	48 6b 71 08 38       	imul   rsi,QWORD PTR [rcx+0x8],0x38
  20dfeb:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  20dfef:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  20dff3:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
  20dffa:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  20dffe:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  20e005:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  20e00c:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  20e013:	e8 18 dc ff ff       	call   20bc30 <mul>
  20e018:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  20e01d:	74 44                	je     20e063 <Allocator_alignedRealloc+0x193>
  20e01f:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  20e026:	e8 25 64 ff ff       	call   204450 <__zig_return_error>
  20e02b:	48 8b 3d 46 28 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff2846]        # 200878 <__unnamed_75>
  20e032:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  20e039:	48 89 38             	mov    QWORD PTR [rax],rdi
  20e03c:	48 8b 3d 3d 28 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff283d]        # 200880 <__unnamed_75+0x8>
  20e043:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  20e047:	48 8b 3d 3a 28 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff283a]        # 200888 <__unnamed_75+0x10>
  20e04e:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  20e052:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  20e059:	48 81 c4 88 01 00 00 	add    rsp,0x188
  20e060:	5b                   	pop    rbx
  20e061:	5d                   	pop    rbp
  20e062:	c3                   	ret    
  20e063:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20e067:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  20e06e:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  20e072:	48 8d 8d 00 ff ff ff 	lea    rcx,[rbp-0x100]
  20e079:	41 b9 01 00 00 00    	mov    r9d,0x1
  20e07f:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  20e086:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
        const byte_slice = try self.reallocFn(self, old_byte_slice, byte_count, alignment);
  20e08d:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  20e094:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  20e098:	48 8b b5 18 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe8]
  20e09f:	4c 8b 85 f8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x108]
  20e0a6:	4c 8b 95 c8 fe ff ff 	mov    r10,QWORD PTR [rbp-0x138]
  20e0ad:	48 89 b5 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rsi
  20e0b4:	4c 89 d6             	mov    rsi,r10
  20e0b7:	4c 8b 9d a8 fe ff ff 	mov    r11,QWORD PTR [rbp-0x158]
  20e0be:	48 89 95 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdx
  20e0c5:	4c 89 da             	mov    rdx,r11
  20e0c8:	48 8b 9d a0 fe ff ff 	mov    rbx,QWORD PTR [rbp-0x160]
  20e0cf:	ff d3                	call   rbx
  20e0d1:	66 83 7d 98 00       	cmp    WORD PTR [rbp-0x68],0x0
  20e0d6:	74 5d                	je     20e135 <Allocator_alignedRealloc+0x265>
  20e0d8:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  20e0dc:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  20e0e3:	66 89 85 9e fe ff ff 	mov    WORD PTR [rbp-0x162],ax
  20e0ea:	e8 61 63 ff ff       	call   204450 <__zig_return_error>
  20e0ef:	66 8b 85 9e fe ff ff 	mov    ax,WORD PTR [rbp-0x162]
  20e0f6:	66 89 85 68 ff ff ff 	mov    WORD PTR [rbp-0x98],ax
  20e0fd:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  20e104:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  20e10b:	48 89 39             	mov    QWORD PTR [rcx],rdi
  20e10e:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  20e115:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  20e119:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  20e120:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  20e124:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  20e12b:	48 81 c4 88 01 00 00 	add    rsp,0x188
  20e132:	5b                   	pop    rbx
  20e133:	5d                   	pop    rbp
  20e134:	c3                   	ret    
  20e135:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  20e139:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  20e140:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  20e144:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
        assert(byte_slice.len == byte_count);
  20e14b:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  20e152:	48 3b 85 f8 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x108]
  20e159:	0f 94 c1             	sete   cl
  20e15c:	0f b6 f9             	movzx  edi,cl
  20e15f:	e8 9c 4e ff ff       	call   203000 <assert>
        if (n > old_mem.len) {
  20e164:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  20e16b:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  20e172:	48 3b 42 08          	cmp    rax,QWORD PTR [rdx+0x8]
  20e176:	76 78                	jbe    20e1f0 <Allocator_alignedRealloc+0x320>
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  20e178:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  20e17f:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  20e186:	48 39 c8             	cmp    rax,rcx
  20e189:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  20e190:	48 89 8d 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rcx
  20e197:	0f 86 9d 00 00 00    	jbe    20e23a <Allocator_alignedRealloc+0x36a>
  20e19d:	e9 88 00 00 00       	jmp    20e22a <Allocator_alignedRealloc+0x35a>
  20e1a2:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  20e1a9:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
  20e1b0:	48 39 c8             	cmp    rax,rcx
  20e1b3:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  20e1ba:	73 32                	jae    20e1ee <Allocator_alignedRealloc+0x31e>
  20e1bc:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  20e1c3:	48 03 8d 58 ff ff ff 	add    rcx,QWORD PTR [rbp-0xa8]
  20e1ca:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
                byte.* = undefined;
  20e1d1:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  20e1d8:	88 01                	mov    BYTE PTR [rcx],al
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  20e1da:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  20e1e1:	48 83 c1 01          	add    rcx,0x1
  20e1e5:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
  20e1ec:	eb b4                	jmp    20e1a2 <Allocator_alignedRealloc+0x2d2>
        if (n > old_mem.len) {
  20e1ee:	eb 02                	jmp    20e1f2 <Allocator_alignedRealloc+0x322>
  20e1f0:	eb 00                	jmp    20e1f2 <Allocator_alignedRealloc+0x322>
  20e1f2:	b8 38 00 00 00       	mov    eax,0x38
  20e1f7:	89 c1                	mov    ecx,eax
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  20e1f9:	48 8b 95 e8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x118]
  20e200:	48 89 95 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdx
  20e207:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  20e20e:	48 89 d0             	mov    rax,rdx
  20e211:	31 f6                	xor    esi,esi
  20e213:	48 89 95 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rdx
  20e21a:	89 f2                	mov    edx,esi
  20e21c:	48 f7 f1             	div    rcx
  20e21f:	48 83 fa 00          	cmp    rdx,0x0
  20e223:	74 7b                	je     20e2a0 <Allocator_alignedRealloc+0x3d0>
  20e225:	e9 ed 00 00 00       	jmp    20e317 <Allocator_alignedRealloc+0x447>
  20e22a:	48 8d 3d cf 70 01 00 	lea    rdi,[rip+0x170cf]        # 225300 <__unnamed_4>
  20e231:	31 c0                	xor    eax,eax
  20e233:	89 c6                	mov    esi,eax
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  20e235:	e8 86 4e ff ff       	call   2030c0 <panic>
  20e23a:	be aa 00 00 00       	mov    esi,0xaa
  20e23f:	b8 08 00 00 00       	mov    eax,0x8
  20e244:	89 c2                	mov    edx,eax
  20e246:	48 8d 8d e0 fe ff ff 	lea    rcx,[rbp-0x120]
  20e24d:	48 8b bd 90 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x170]
  20e254:	48 03 bd e8 fe ff ff 	add    rdi,QWORD PTR [rbp-0x118]
  20e25b:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
  20e262:	48 8b bd 88 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x178]
  20e269:	4c 8b 85 90 fe ff ff 	mov    r8,QWORD PTR [rbp-0x170]
  20e270:	4c 29 c7             	sub    rdi,r8
  20e273:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  20e27a:	48 89 cf             	mov    rdi,rcx
  20e27d:	e8 2e 3a 01 00       	call   221cb0 <memset>
  20e282:	48 c7 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],0x0
  20e289:	00 00 00 00 
  20e28d:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  20e294:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  20e29b:	e9 02 ff ff ff       	jmp    20e1a2 <Allocator_alignedRealloc+0x2d2>
  20e2a0:	b8 38 00 00 00       	mov    eax,0x38
  20e2a5:	89 c1                	mov    ecx,eax
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  20e2a7:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  20e2ae:	31 d2                	xor    edx,edx
  20e2b0:	48 f7 f1             	div    rcx
  20e2b3:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  20e2ba:	66 c7 85 20 ff ff ff 	mov    WORD PTR [rbp-0xe0],0x0
  20e2c1:	00 00 
  20e2c3:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  20e2ca:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  20e2d1:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  20e2d8:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  20e2df:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  20e2e6:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  20e2ed:	48 89 01             	mov    QWORD PTR [rcx],rax
  20e2f0:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  20e2f7:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20e2fb:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  20e302:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  20e306:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  20e30d:	48 81 c4 88 01 00 00 	add    rsp,0x188
  20e314:	5b                   	pop    rbx
  20e315:	5d                   	pop    rbp
  20e316:	c3                   	ret    
  20e317:	48 8d 3d 2a 72 01 00 	lea    rdi,[rip+0x1722a]        # 225548 <__unnamed_61>
  20e31e:	31 c0                	xor    eax,eax
  20e320:	89 c6                	mov    esi,eax
  20e322:	e8 99 4d ff ff       	call   2030c0 <panic>
  20e327:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  20e32e:	00 00 

000000000020e330 <Allocator_alignedAlloc.22>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  20e330:	55                   	push   rbp
  20e331:	48 89 e5             	mov    rbp,rsp
  20e334:	48 81 ec 20 01 00 00 	sub    rsp,0x120
  20e33b:	48 89 f8             	mov    rax,rdi
  20e33e:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  20e345:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  20e34c:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  20e353:	00 
  20e354:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  20e35b:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  20e362:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  20e369:	75 37                	jne    20e3a2 <Allocator_alignedAlloc.22+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  20e36b:	48 8b 05 1e 25 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff251e]        # 200890 <__unnamed_76>
  20e372:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  20e379:	48 89 01             	mov    QWORD PTR [rcx],rax
  20e37c:	48 8b 05 15 25 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff2515]        # 200898 <__unnamed_76+0x8>
  20e383:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20e387:	48 8b 05 12 25 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff2512]        # 2008a0 <__unnamed_76+0x10>
  20e38e:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  20e392:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  20e399:	48 81 c4 20 01 00 00 	add    rsp,0x120
  20e3a0:	5d                   	pop    rbp
  20e3a1:	c3                   	ret    
        if (n == 0) {
  20e3a2:	eb 00                	jmp    20e3a4 <Allocator_alignedAlloc.22+0x74>
  20e3a4:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  20e3a8:	b8 38 00 00 00       	mov    eax,0x38
  20e3ad:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  20e3af:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  20e3b6:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  20e3bd:	e8 6e d8 ff ff       	call   20bc30 <mul>
  20e3c2:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  20e3c7:	74 43                	je     20e40c <Allocator_alignedAlloc.22+0xdc>
  20e3c9:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  20e3d0:	e8 7b 60 ff ff       	call   204450 <__zig_return_error>
  20e3d5:	48 8b 3d cc 24 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff24cc]        # 2008a8 <__unnamed_77>
  20e3dc:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  20e3e3:	48 89 38             	mov    QWORD PTR [rax],rdi
  20e3e6:	48 8b 3d c3 24 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff24c3]        # 2008b0 <__unnamed_77+0x8>
  20e3ed:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  20e3f1:	48 8b 3d c0 24 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff24c0]        # 2008b8 <__unnamed_77+0x10>
  20e3f8:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  20e3fc:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  20e403:	48 81 c4 20 01 00 00 	add    rsp,0x120
  20e40a:	5d                   	pop    rbp
  20e40b:	c3                   	ret    
  20e40c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20e410:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  20e417:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  20e41b:	41 b8 01 00 00 00    	mov    r8d,0x1
  20e421:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  20e428:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  20e42f:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  20e436:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  20e439:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  20e440:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  20e447:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  20e44e:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  20e455:	4c 89 ce             	mov    rsi,r9
  20e458:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  20e45f:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  20e466:	4c 89 d1             	mov    rcx,r10
  20e469:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  20e470:	41 ff d3             	call   r11
  20e473:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  20e478:	74 50                	je     20e4ca <Allocator_alignedAlloc.22+0x19a>
  20e47a:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  20e47e:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  20e485:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  20e48c:	e8 bf 5f ff ff       	call   204450 <__zig_return_error>
  20e491:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  20e498:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  20e49c:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  20e4a0:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  20e4a7:	48 89 39             	mov    QWORD PTR [rcx],rdi
  20e4aa:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  20e4ae:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  20e4b2:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  20e4b6:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  20e4ba:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  20e4c1:	48 81 c4 20 01 00 00 	add    rsp,0x120
  20e4c8:	5d                   	pop    rbp
  20e4c9:	c3                   	ret    
  20e4ca:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20e4ce:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  20e4d5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  20e4d9:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  20e4e0:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  20e4e7:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  20e4ee:	0f 94 c1             	sete   cl
  20e4f1:	0f b6 f9             	movzx  edi,cl
  20e4f4:	e8 07 4b ff ff       	call   203000 <assert>
  20e4f9:	be aa 00 00 00       	mov    esi,0xaa
  20e4fe:	bf 08 00 00 00       	mov    edi,0x8
  20e503:	89 fa                	mov    edx,edi
  20e505:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  20e50c:	48 89 c7             	mov    rdi,rax
  20e50f:	e8 9c 37 01 00       	call   221cb0 <memset>
  20e514:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  20e51b:	00 00 00 00 
  20e51f:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  20e526:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  20e52d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  20e534:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  20e53b:	48 39 c8             	cmp    rax,rcx
  20e53e:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  20e545:	73 32                	jae    20e579 <Allocator_alignedAlloc.22+0x249>
  20e547:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  20e54e:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  20e555:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  20e55c:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  20e563:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  20e565:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  20e56c:	48 83 c1 01          	add    rcx,0x1
  20e570:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  20e577:	eb b4                	jmp    20e52d <Allocator_alignedAlloc.22+0x1fd>
  20e579:	b8 38 00 00 00       	mov    eax,0x38
  20e57e:	89 c1                	mov    ecx,eax
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  20e580:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
  20e587:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
  20e58b:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
  20e592:	48 89 d0             	mov    rax,rdx
  20e595:	31 f6                	xor    esi,esi
  20e597:	48 89 95 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdx
  20e59e:	89 f2                	mov    edx,esi
  20e5a0:	48 f7 f1             	div    rcx
  20e5a3:	48 83 fa 00          	cmp    rdx,0x0
  20e5a7:	75 67                	jne    20e610 <Allocator_alignedAlloc.22+0x2e0>
  20e5a9:	b8 38 00 00 00       	mov    eax,0x38
  20e5ae:	89 c1                	mov    ecx,eax
  20e5b0:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  20e5b7:	31 d2                	xor    edx,edx
  20e5b9:	48 f7 f1             	div    rcx
  20e5bc:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  20e5c0:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  20e5c7:	00 00 
  20e5c9:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  20e5cd:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  20e5d4:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  20e5d8:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  20e5dc:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  20e5e3:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  20e5ea:	48 89 01             	mov    QWORD PTR [rcx],rax
  20e5ed:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  20e5f4:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20e5f8:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  20e5fc:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  20e600:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  20e607:	48 81 c4 20 01 00 00 	add    rsp,0x120
  20e60e:	5d                   	pop    rbp
  20e60f:	c3                   	ret    
  20e610:	48 8d 3d 31 6f 01 00 	lea    rdi,[rip+0x16f31]        # 225548 <__unnamed_61>
  20e617:	31 c0                	xor    eax,eax
  20e619:	89 c6                	mov    esi,eax
  20e61b:	e8 a0 4a ff ff       	call   2030c0 <panic>

000000000020e620 <Allocator_free.23>:
    pub fn free(self: *Allocator, memory: var) void {
  20e620:	55                   	push   rbp
  20e621:	48 89 e5             	mov    rbp,rsp
  20e624:	48 83 ec 60          	sub    rsp,0x60
  20e628:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
        const bytes = @sliceToBytes(memory);
  20e62c:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  20e62f:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  20e633:	48 6b 76 08 38       	imul   rsi,QWORD PTR [rsi+0x8],0x38
  20e638:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  20e63c:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20e640:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  20e644:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20e648:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        if (bytes.len == 0) return;
  20e64c:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
  20e651:	75 06                	jne    20e659 <Allocator_free.23+0x39>
  20e653:	48 83 c4 60          	add    rsp,0x60
  20e657:	5d                   	pop    rbp
  20e658:	c3                   	ret    
  20e659:	31 c0                	xor    eax,eax
  20e65b:	89 c1                	mov    ecx,eax
        const non_const_ptr = @intToPtr([*]u8, @ptrToInt(bytes.ptr));
  20e65d:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  20e661:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
        self.freeFn(self, non_const_ptr[0..bytes.len]);
  20e665:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  20e669:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  20e66d:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  20e671:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  20e675:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
  20e679:	48 39 f1             	cmp    rcx,rsi
  20e67c:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
  20e680:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
  20e684:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  20e688:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  20e68c:	76 10                	jbe    20e69e <Allocator_free.23+0x7e>
  20e68e:	48 8d 3d 6b 6c 01 00 	lea    rdi,[rip+0x16c6b]        # 225300 <__unnamed_4>
  20e695:	31 c0                	xor    eax,eax
  20e697:	89 c6                	mov    esi,eax
  20e699:	e8 22 4a ff ff       	call   2030c0 <panic>
  20e69e:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
  20e6a2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  20e6a6:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  20e6aa:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  20e6ae:	48 83 e9 00          	sub    rcx,0x0
  20e6b2:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  20e6b6:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  20e6ba:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  20e6be:	ff d1                	call   rcx
    pub fn free(self: *Allocator, memory: var) void {
  20e6c0:	48 83 c4 60          	add    rsp,0x60
  20e6c4:	5d                   	pop    rbp
  20e6c5:	c3                   	ret    
  20e6c6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  20e6cd:	00 00 00 

000000000020e6d0 <AlignedArrayList(AbbrevAttr,8)_addOne>:
        pub fn addOne(self: *Self) !*T {
  20e6d0:	55                   	push   rbp
  20e6d1:	48 89 e5             	mov    rbp,rsp
  20e6d4:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  20e6db:	48 89 f8             	mov    rax,rdi
  20e6de:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            const new_length = self.len + 1;
  20e6e2:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  20e6e6:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  20e6ea:	48 83 c2 01          	add    rdx,0x1
  20e6ee:	0f 92 c1             	setb   cl
  20e6f1:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  20e6f5:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  20e6f9:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  20e6fd:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  20e701:	88 4d 9f             	mov    BYTE PTR [rbp-0x61],cl
  20e704:	72 57                	jb     20e75d <AlignedArrayList(AbbrevAttr,8)_addOne+0x8d>
  20e706:	eb 65                	jmp    20e76d <AlignedArrayList(AbbrevAttr,8)_addOne+0x9d>
            try self.ensureCapacity(new_length);
  20e708:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  20e70c:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  20e710:	66 89 45 9c          	mov    WORD PTR [rbp-0x64],ax
  20e714:	e8 37 5d ff ff       	call   204450 <__zig_return_error>
  20e719:	66 8b 45 9c          	mov    ax,WORD PTR [rbp-0x64]
  20e71d:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  20e721:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  20e725:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  20e729:	48 89 39             	mov    QWORD PTR [rcx],rdi
  20e72c:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  20e730:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  20e734:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  20e738:	48 81 c4 80 00 00 00 	add    rsp,0x80
  20e73f:	5d                   	pop    rbp
  20e740:	c3                   	ret    
            const result = &self.items[self.len];
  20e741:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20e745:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  20e749:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
  20e74d:	48 3b 48 08          	cmp    rcx,QWORD PTR [rax+0x8]
  20e751:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  20e755:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
  20e759:	72 4c                	jb     20e7a7 <AlignedArrayList(AbbrevAttr,8)_addOne+0xd7>
  20e75b:	eb 3a                	jmp    20e797 <AlignedArrayList(AbbrevAttr,8)_addOne+0xc7>
  20e75d:	48 8d 3d b4 6b 01 00 	lea    rdi,[rip+0x16bb4]        # 225318 <__unnamed_5>
  20e764:	31 c0                	xor    eax,eax
  20e766:	89 c6                	mov    esi,eax
            const new_length = self.len + 1;
  20e768:	e8 53 49 ff ff       	call   2030c0 <panic>
  20e76d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  20e771:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
            try self.ensureCapacity(new_length);
  20e775:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  20e779:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  20e77d:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  20e781:	e8 7a 00 00 00       	call   20e800 <AlignedArrayList(AbbrevAttr,8)_ensureCapacity>
  20e786:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  20e78a:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  20e78f:	0f 85 73 ff ff ff    	jne    20e708 <AlignedArrayList(AbbrevAttr,8)_addOne+0x38>
  20e795:	eb aa                	jmp    20e741 <AlignedArrayList(AbbrevAttr,8)_addOne+0x71>
  20e797:	48 8d 3d 62 6b 01 00 	lea    rdi,[rip+0x16b62]        # 225300 <__unnamed_4>
  20e79e:	31 c0                	xor    eax,eax
  20e7a0:	89 c6                	mov    esi,eax
            const result = &self.items[self.len];
  20e7a2:	e8 19 49 ff ff       	call   2030c0 <panic>
  20e7a7:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  20e7ab:	48 c1 e0 04          	shl    rax,0x4
  20e7af:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  20e7b3:	48 03 01             	add    rax,QWORD PTR [rcx]
  20e7b6:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
            self.len = new_length;
  20e7ba:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20e7be:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  20e7c2:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
            return result;
  20e7c6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  20e7ca:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  20e7d0:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  20e7d4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  20e7d8:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  20e7dc:	48 89 02             	mov    QWORD PTR [rdx],rax
  20e7df:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20e7e3:	48 89 42 08          	mov    QWORD PTR [rdx+0x8],rax
  20e7e7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  20e7eb:	48 81 c4 80 00 00 00 	add    rsp,0x80
  20e7f2:	5d                   	pop    rbp
  20e7f3:	c3                   	ret    
  20e7f4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20e7fb:	00 00 00 00 00 

000000000020e800 <AlignedArrayList(AbbrevAttr,8)_ensureCapacity>:
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  20e800:	55                   	push   rbp
  20e801:	48 89 e5             	mov    rbp,rsp
  20e804:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  20e80b:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  20e80f:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
            var better_capacity = self.items.len;
  20e813:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  20e817:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  20e81b:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
            if (better_capacity >= new_capacity) return;
  20e81f:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  20e823:	48 3b 55 c0          	cmp    rdx,QWORD PTR [rbp-0x40]
  20e827:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  20e82b:	72 11                	jb     20e83e <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0x3e>
  20e82d:	31 c0                	xor    eax,eax
  20e82f:	66 89 c1             	mov    cx,ax
  20e832:	66 89 c8             	mov    ax,cx
  20e835:	48 81 c4 90 00 00 00 	add    rsp,0x90
  20e83c:	5d                   	pop    rbp
  20e83d:	c3                   	ret    
            while (true) {
  20e83e:	eb 00                	jmp    20e840 <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0x40>
  20e840:	eb 00                	jmp    20e842 <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0x42>
  20e842:	31 c0                	xor    eax,eax
  20e844:	88 c1                	mov    cl,al
                better_capacity += better_capacity / 2 + 8;
  20e846:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  20e84a:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  20e84e:	f6 c1 01             	test   cl,0x1
  20e851:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  20e855:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  20e859:	0f 85 8e 00 00 00    	jne    20e8ed <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0xed>
  20e85f:	eb 72                	jmp    20e8d3 <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0xd3>
                if (better_capacity >= new_capacity) break;
  20e861:	eb 02                	jmp    20e865 <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0x65>
            while (true) {
  20e863:	eb db                	jmp    20e840 <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0x40>
  20e865:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
            self.items = try self.allocator.alignedRealloc(T, A, self.items, better_capacity);
  20e869:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20e86d:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  20e871:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
  20e875:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  20e879:	4c 8b 45 b8          	mov    r8,QWORD PTR [rbp-0x48]
  20e87d:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  20e881:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  20e885:	e8 d6 00 00 00       	call   20e960 <Allocator_alignedRealloc.24>
  20e88a:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  20e88f:	74 1e                	je     20e8af <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0xaf>
  20e891:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  20e895:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  20e899:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  20e89d:	e8 ae 5b ff ff       	call   204450 <__zig_return_error>
  20e8a2:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  20e8a6:	48 81 c4 90 00 00 00 	add    rsp,0x90
  20e8ad:	5d                   	pop    rbp
  20e8ae:	c3                   	ret    
  20e8af:	31 c0                	xor    eax,eax
  20e8b1:	66 89 c1             	mov    cx,ax
  20e8b4:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  20e8b8:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  20e8bc:	48 89 16             	mov    QWORD PTR [rsi],rdx
  20e8bf:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  20e8c3:	48 89 56 08          	mov    QWORD PTR [rsi+0x8],rdx
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  20e8c7:	66 89 c8             	mov    ax,cx
  20e8ca:	48 81 c4 90 00 00 00 	add    rsp,0x90
  20e8d1:	5d                   	pop    rbp
  20e8d2:	c3                   	ret    
                better_capacity += better_capacity / 2 + 8;
  20e8d3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  20e8d7:	48 c1 e8 01          	shr    rax,0x1
  20e8db:	48 83 c0 08          	add    rax,0x8
  20e8df:	0f 92 c1             	setb   cl
  20e8e2:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  20e8e6:	88 4d 87             	mov    BYTE PTR [rbp-0x79],cl
  20e8e9:	72 12                	jb     20e8fd <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0xfd>
  20e8eb:	eb 20                	jmp    20e90d <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0x10d>
  20e8ed:	48 8d 3d 84 6c 01 00 	lea    rdi,[rip+0x16c84]        # 225578 <__unnamed_73>
  20e8f4:	31 c0                	xor    eax,eax
  20e8f6:	89 c6                	mov    esi,eax
  20e8f8:	e8 c3 47 ff ff       	call   2030c0 <panic>
  20e8fd:	48 8d 3d 14 6a 01 00 	lea    rdi,[rip+0x16a14]        # 225318 <__unnamed_5>
  20e904:	31 c0                	xor    eax,eax
  20e906:	89 c6                	mov    esi,eax
  20e908:	e8 b3 47 ff ff       	call   2030c0 <panic>
  20e90d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  20e911:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  20e915:	48 01 c8             	add    rax,rcx
  20e918:	0f 92 c2             	setb   dl
  20e91b:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  20e922:	88 95 77 ff ff ff    	mov    BYTE PTR [rbp-0x89],dl
  20e928:	72 02                	jb     20e92c <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0x12c>
  20e92a:	eb 10                	jmp    20e93c <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0x13c>
  20e92c:	48 8d 3d e5 69 01 00 	lea    rdi,[rip+0x169e5]        # 225318 <__unnamed_5>
  20e933:	31 c0                	xor    eax,eax
  20e935:	89 c6                	mov    esi,eax
  20e937:	e8 84 47 ff ff       	call   2030c0 <panic>
  20e93c:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  20e943:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                if (better_capacity >= new_capacity) break;
  20e947:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  20e94b:	48 3b 4d c0          	cmp    rcx,QWORD PTR [rbp-0x40]
  20e94f:	0f 83 0c ff ff ff    	jae    20e861 <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0x61>
  20e955:	e9 09 ff ff ff       	jmp    20e863 <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0x63>
  20e95a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000020e960 <Allocator_alignedRealloc.24>:
    pub fn alignedRealloc(self: *Allocator, comptime T: type, comptime alignment: u29, old_mem: []align(alignment) T, n: usize) ![]align(alignment) T {
  20e960:	55                   	push   rbp
  20e961:	48 89 e5             	mov    rbp,rsp
  20e964:	53                   	push   rbx
  20e965:	48 81 ec 88 01 00 00 	sub    rsp,0x188
  20e96c:	48 89 f8             	mov    rax,rdi
  20e96f:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
  20e976:	4c 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],r8
        if (old_mem.len == 0) {
  20e97d:	48 83 79 08 00       	cmp    QWORD PTR [rcx+0x8],0x0
  20e982:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  20e989:	48 89 b5 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rsi
  20e990:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
  20e997:	48 89 bd b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rdi
  20e99e:	75 64                	jne    20ea04 <Allocator_alignedRealloc.24+0xa4>
  20e9a0:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
            return self.alignedAlloc(T, alignment, n);
  20e9a4:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  20e9ab:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  20e9b2:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  20e9b9:	e8 12 04 00 00       	call   20edd0 <Allocator_alignedAlloc.25>
  20e9be:	66 83 7d e0 00       	cmp    WORD PTR [rbp-0x20],0x0
  20e9c3:	74 0e                	je     20e9d3 <Allocator_alignedRealloc.24+0x73>
  20e9c5:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  20e9cc:	e8 7f 5a ff ff       	call   204450 <__zig_return_error>
  20e9d1:	eb 02                	jmp    20e9d5 <Allocator_alignedRealloc.24+0x75>
  20e9d3:	eb 00                	jmp    20e9d5 <Allocator_alignedRealloc.24+0x75>
  20e9d5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20e9d9:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  20e9e0:	48 89 01             	mov    QWORD PTR [rcx],rax
  20e9e3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20e9e7:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20e9eb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20e9ef:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  20e9f3:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  20e9fa:	48 81 c4 88 01 00 00 	add    rsp,0x188
  20ea01:	5b                   	pop    rbx
  20ea02:	5d                   	pop    rbp
  20ea03:	c3                   	ret    
        if (old_mem.len == 0) {
  20ea04:	eb 00                	jmp    20ea06 <Allocator_alignedRealloc.24+0xa6>
        if (n == 0) {
  20ea06:	48 83 bd 10 ff ff ff 	cmp    QWORD PTR [rbp-0xf0],0x0
  20ea0d:	00 
  20ea0e:	75 4b                	jne    20ea5b <Allocator_alignedRealloc.24+0xfb>
            self.free(old_mem);
  20ea10:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
  20ea17:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  20ea1e:	e8 bd 06 00 00       	call   20f0e0 <Allocator_free.26>
            return ([*]align(alignment) T)(undefined)[0..0];
  20ea23:	48 8b 35 96 1e ff ff 	mov    rsi,QWORD PTR [rip+0xffffffffffff1e96]        # 2008c0 <__unnamed_78>
  20ea2a:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  20ea31:	48 89 37             	mov    QWORD PTR [rdi],rsi
  20ea34:	48 8b 35 8d 1e ff ff 	mov    rsi,QWORD PTR [rip+0xffffffffffff1e8d]        # 2008c8 <__unnamed_78+0x8>
  20ea3b:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  20ea3f:	48 8b 35 8a 1e ff ff 	mov    rsi,QWORD PTR [rip+0xffffffffffff1e8a]        # 2008d0 <__unnamed_78+0x10>
  20ea46:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  20ea4a:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  20ea51:	48 81 c4 88 01 00 00 	add    rsp,0x188
  20ea58:	5b                   	pop    rbx
  20ea59:	5d                   	pop    rbp
  20ea5a:	c3                   	ret    
        if (n == 0) {
  20ea5b:	eb 00                	jmp    20ea5d <Allocator_alignedRealloc.24+0xfd>
  20ea5d:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  20ea61:	b8 10 00 00 00       	mov    eax,0x10
  20ea66:	89 c2                	mov    edx,eax
        const old_byte_slice = @sliceToBytes(old_mem);
  20ea68:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  20ea6f:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  20ea72:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  20ea76:	48 8b 71 08          	mov    rsi,QWORD PTR [rcx+0x8]
  20ea7a:	48 c1 e6 04          	shl    rsi,0x4
  20ea7e:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  20ea82:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  20ea86:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
  20ea8d:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  20ea91:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  20ea98:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  20ea9f:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  20eaa6:	e8 85 d1 ff ff       	call   20bc30 <mul>
  20eaab:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  20eab0:	74 44                	je     20eaf6 <Allocator_alignedRealloc.24+0x196>
  20eab2:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  20eab9:	e8 92 59 ff ff       	call   204450 <__zig_return_error>
  20eabe:	48 8b 3d 13 1e ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff1e13]        # 2008d8 <__unnamed_79>
  20eac5:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  20eacc:	48 89 38             	mov    QWORD PTR [rax],rdi
  20eacf:	48 8b 3d 0a 1e ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff1e0a]        # 2008e0 <__unnamed_79+0x8>
  20ead6:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  20eada:	48 8b 3d 07 1e ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff1e07]        # 2008e8 <__unnamed_79+0x10>
  20eae1:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  20eae5:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  20eaec:	48 81 c4 88 01 00 00 	add    rsp,0x188
  20eaf3:	5b                   	pop    rbx
  20eaf4:	5d                   	pop    rbp
  20eaf5:	c3                   	ret    
  20eaf6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20eafa:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  20eb01:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  20eb05:	48 8d 8d 00 ff ff ff 	lea    rcx,[rbp-0x100]
  20eb0c:	41 b9 08 00 00 00    	mov    r9d,0x8
  20eb12:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  20eb19:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
        const byte_slice = try self.reallocFn(self, old_byte_slice, byte_count, alignment);
  20eb20:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  20eb27:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  20eb2b:	48 8b b5 18 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe8]
  20eb32:	4c 8b 85 f8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x108]
  20eb39:	4c 8b 95 c8 fe ff ff 	mov    r10,QWORD PTR [rbp-0x138]
  20eb40:	48 89 b5 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rsi
  20eb47:	4c 89 d6             	mov    rsi,r10
  20eb4a:	4c 8b 9d a8 fe ff ff 	mov    r11,QWORD PTR [rbp-0x158]
  20eb51:	48 89 95 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdx
  20eb58:	4c 89 da             	mov    rdx,r11
  20eb5b:	48 8b 9d a0 fe ff ff 	mov    rbx,QWORD PTR [rbp-0x160]
  20eb62:	ff d3                	call   rbx
  20eb64:	66 83 7d 98 00       	cmp    WORD PTR [rbp-0x68],0x0
  20eb69:	74 5d                	je     20ebc8 <Allocator_alignedRealloc.24+0x268>
  20eb6b:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  20eb6f:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  20eb76:	66 89 85 9e fe ff ff 	mov    WORD PTR [rbp-0x162],ax
  20eb7d:	e8 ce 58 ff ff       	call   204450 <__zig_return_error>
  20eb82:	66 8b 85 9e fe ff ff 	mov    ax,WORD PTR [rbp-0x162]
  20eb89:	66 89 85 68 ff ff ff 	mov    WORD PTR [rbp-0x98],ax
  20eb90:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  20eb97:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  20eb9e:	48 89 39             	mov    QWORD PTR [rcx],rdi
  20eba1:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  20eba8:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  20ebac:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  20ebb3:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  20ebb7:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  20ebbe:	48 81 c4 88 01 00 00 	add    rsp,0x188
  20ebc5:	5b                   	pop    rbx
  20ebc6:	5d                   	pop    rbp
  20ebc7:	c3                   	ret    
  20ebc8:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  20ebcc:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  20ebd3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  20ebd7:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
        assert(byte_slice.len == byte_count);
  20ebde:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  20ebe5:	48 3b 85 f8 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x108]
  20ebec:	0f 94 c1             	sete   cl
  20ebef:	0f b6 f9             	movzx  edi,cl
  20ebf2:	e8 09 44 ff ff       	call   203000 <assert>
        if (n > old_mem.len) {
  20ebf7:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  20ebfe:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  20ec05:	48 3b 42 08          	cmp    rax,QWORD PTR [rdx+0x8]
  20ec09:	76 71                	jbe    20ec7c <Allocator_alignedRealloc.24+0x31c>
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  20ec0b:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  20ec12:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  20ec19:	48 39 c8             	cmp    rax,rcx
  20ec1c:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  20ec23:	48 89 8d 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rcx
  20ec2a:	76 78                	jbe    20eca4 <Allocator_alignedRealloc.24+0x344>
  20ec2c:	eb 66                	jmp    20ec94 <Allocator_alignedRealloc.24+0x334>
  20ec2e:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  20ec35:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
  20ec3c:	48 39 c8             	cmp    rax,rcx
  20ec3f:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  20ec46:	73 32                	jae    20ec7a <Allocator_alignedRealloc.24+0x31a>
  20ec48:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  20ec4f:	48 03 8d 58 ff ff ff 	add    rcx,QWORD PTR [rbp-0xa8]
  20ec56:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
                byte.* = undefined;
  20ec5d:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  20ec64:	88 01                	mov    BYTE PTR [rcx],al
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  20ec66:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  20ec6d:	48 83 c1 01          	add    rcx,0x1
  20ec71:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
  20ec78:	eb b4                	jmp    20ec2e <Allocator_alignedRealloc.24+0x2ce>
        if (n > old_mem.len) {
  20ec7a:	eb 02                	jmp    20ec7e <Allocator_alignedRealloc.24+0x31e>
  20ec7c:	eb 00                	jmp    20ec7e <Allocator_alignedRealloc.24+0x31e>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  20ec7e:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  20ec85:	48 83 e0 07          	and    rax,0x7
  20ec89:	48 83 f8 00          	cmp    rax,0x0
  20ec8d:	74 7b                	je     20ed0a <Allocator_alignedRealloc.24+0x3aa>
  20ec8f:	e9 a1 00 00 00       	jmp    20ed35 <Allocator_alignedRealloc.24+0x3d5>
  20ec94:	48 8d 3d 65 66 01 00 	lea    rdi,[rip+0x16665]        # 225300 <__unnamed_4>
  20ec9b:	31 c0                	xor    eax,eax
  20ec9d:	89 c6                	mov    esi,eax
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  20ec9f:	e8 1c 44 ff ff       	call   2030c0 <panic>
  20eca4:	be aa 00 00 00       	mov    esi,0xaa
  20eca9:	b8 08 00 00 00       	mov    eax,0x8
  20ecae:	89 c2                	mov    edx,eax
  20ecb0:	48 8d 8d e0 fe ff ff 	lea    rcx,[rbp-0x120]
  20ecb7:	48 8b bd 90 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x170]
  20ecbe:	48 03 bd e8 fe ff ff 	add    rdi,QWORD PTR [rbp-0x118]
  20ecc5:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
  20eccc:	48 8b bd 88 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x178]
  20ecd3:	4c 8b 85 90 fe ff ff 	mov    r8,QWORD PTR [rbp-0x170]
  20ecda:	4c 29 c7             	sub    rdi,r8
  20ecdd:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  20ece4:	48 89 cf             	mov    rdi,rcx
  20ece7:	e8 c4 2f 01 00       	call   221cb0 <memset>
  20ecec:	48 c7 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],0x0
  20ecf3:	00 00 00 00 
  20ecf7:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  20ecfe:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  20ed05:	e9 24 ff ff ff       	jmp    20ec2e <Allocator_alignedRealloc.24+0x2ce>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  20ed0a:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  20ed11:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
  20ed18:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  20ed1f:	48 89 c1             	mov    rcx,rax
  20ed22:	48 83 e1 0f          	and    rcx,0xf
  20ed26:	48 83 f9 00          	cmp    rcx,0x0
  20ed2a:	48 89 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rax
  20ed31:	74 12                	je     20ed45 <Allocator_alignedRealloc.24+0x3e5>
  20ed33:	eb 7f                	jmp    20edb4 <Allocator_alignedRealloc.24+0x454>
  20ed35:	48 8d 3d f4 67 01 00 	lea    rdi,[rip+0x167f4]        # 225530 <__unnamed_60>
  20ed3c:	31 c0                	xor    eax,eax
  20ed3e:	89 c6                	mov    esi,eax
  20ed40:	e8 7b 43 ff ff       	call   2030c0 <panic>
  20ed45:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  20ed4c:	48 c1 e8 04          	shr    rax,0x4
  20ed50:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  20ed57:	66 c7 85 20 ff ff ff 	mov    WORD PTR [rbp-0xe0],0x0
  20ed5e:	00 00 
  20ed60:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  20ed67:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  20ed6e:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  20ed75:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  20ed7c:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  20ed83:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  20ed8a:	48 89 01             	mov    QWORD PTR [rcx],rax
  20ed8d:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  20ed94:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20ed98:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  20ed9f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  20eda3:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  20edaa:	48 81 c4 88 01 00 00 	add    rsp,0x188
  20edb1:	5b                   	pop    rbx
  20edb2:	5d                   	pop    rbp
  20edb3:	c3                   	ret    
  20edb4:	48 8d 3d 8d 67 01 00 	lea    rdi,[rip+0x1678d]        # 225548 <__unnamed_61>
  20edbb:	31 c0                	xor    eax,eax
  20edbd:	89 c6                	mov    esi,eax
  20edbf:	e8 fc 42 ff ff       	call   2030c0 <panic>
  20edc4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20edcb:	00 00 00 00 00 

000000000020edd0 <Allocator_alignedAlloc.25>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  20edd0:	55                   	push   rbp
  20edd1:	48 89 e5             	mov    rbp,rsp
  20edd4:	48 81 ec 20 01 00 00 	sub    rsp,0x120
  20eddb:	48 89 f8             	mov    rax,rdi
  20edde:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  20ede5:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  20edec:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  20edf3:	00 
  20edf4:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  20edfb:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  20ee02:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  20ee09:	75 37                	jne    20ee42 <Allocator_alignedAlloc.25+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  20ee0b:	48 8b 05 de 1a ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff1ade]        # 2008f0 <__unnamed_80>
  20ee12:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  20ee19:	48 89 01             	mov    QWORD PTR [rcx],rax
  20ee1c:	48 8b 05 d5 1a ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff1ad5]        # 2008f8 <__unnamed_80+0x8>
  20ee23:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20ee27:	48 8b 05 d2 1a ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff1ad2]        # 200900 <__unnamed_80+0x10>
  20ee2e:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  20ee32:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  20ee39:	48 81 c4 20 01 00 00 	add    rsp,0x120
  20ee40:	5d                   	pop    rbp
  20ee41:	c3                   	ret    
        if (n == 0) {
  20ee42:	eb 00                	jmp    20ee44 <Allocator_alignedAlloc.25+0x74>
  20ee44:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  20ee48:	b8 10 00 00 00       	mov    eax,0x10
  20ee4d:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  20ee4f:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  20ee56:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  20ee5d:	e8 ce cd ff ff       	call   20bc30 <mul>
  20ee62:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  20ee67:	74 43                	je     20eeac <Allocator_alignedAlloc.25+0xdc>
  20ee69:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  20ee70:	e8 db 55 ff ff       	call   204450 <__zig_return_error>
  20ee75:	48 8b 3d 8c 1a ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff1a8c]        # 200908 <__unnamed_81>
  20ee7c:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  20ee83:	48 89 38             	mov    QWORD PTR [rax],rdi
  20ee86:	48 8b 3d 83 1a ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff1a83]        # 200910 <__unnamed_81+0x8>
  20ee8d:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  20ee91:	48 8b 3d 80 1a ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff1a80]        # 200918 <__unnamed_81+0x10>
  20ee98:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  20ee9c:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  20eea3:	48 81 c4 20 01 00 00 	add    rsp,0x120
  20eeaa:	5d                   	pop    rbp
  20eeab:	c3                   	ret    
  20eeac:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20eeb0:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  20eeb7:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  20eebb:	41 b8 08 00 00 00    	mov    r8d,0x8
  20eec1:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  20eec8:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  20eecf:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  20eed6:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  20eed9:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  20eee0:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  20eee7:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  20eeee:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  20eef5:	4c 89 ce             	mov    rsi,r9
  20eef8:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  20eeff:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  20ef06:	4c 89 d1             	mov    rcx,r10
  20ef09:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  20ef10:	41 ff d3             	call   r11
  20ef13:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  20ef18:	74 50                	je     20ef6a <Allocator_alignedAlloc.25+0x19a>
  20ef1a:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  20ef1e:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  20ef25:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  20ef2c:	e8 1f 55 ff ff       	call   204450 <__zig_return_error>
  20ef31:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  20ef38:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  20ef3c:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  20ef40:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  20ef47:	48 89 39             	mov    QWORD PTR [rcx],rdi
  20ef4a:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  20ef4e:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  20ef52:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  20ef56:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  20ef5a:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  20ef61:	48 81 c4 20 01 00 00 	add    rsp,0x120
  20ef68:	5d                   	pop    rbp
  20ef69:	c3                   	ret    
  20ef6a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20ef6e:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  20ef75:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  20ef79:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  20ef80:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  20ef87:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  20ef8e:	0f 94 c1             	sete   cl
  20ef91:	0f b6 f9             	movzx  edi,cl
  20ef94:	e8 67 40 ff ff       	call   203000 <assert>
  20ef99:	be aa 00 00 00       	mov    esi,0xaa
  20ef9e:	bf 08 00 00 00       	mov    edi,0x8
  20efa3:	89 fa                	mov    edx,edi
  20efa5:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  20efac:	48 89 c7             	mov    rdi,rax
  20efaf:	e8 fc 2c 01 00       	call   221cb0 <memset>
  20efb4:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  20efbb:	00 00 00 00 
  20efbf:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  20efc6:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  20efcd:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  20efd4:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  20efdb:	48 39 c8             	cmp    rax,rcx
  20efde:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  20efe5:	73 32                	jae    20f019 <Allocator_alignedAlloc.25+0x249>
  20efe7:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  20efee:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  20eff5:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  20effc:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  20f003:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  20f005:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  20f00c:	48 83 c1 01          	add    rcx,0x1
  20f010:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  20f017:	eb b4                	jmp    20efcd <Allocator_alignedAlloc.25+0x1fd>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  20f019:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  20f020:	48 83 e0 07          	and    rax,0x7
  20f024:	48 83 f8 00          	cmp    rax,0x0
  20f028:	75 28                	jne    20f052 <Allocator_alignedAlloc.25+0x282>
  20f02a:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  20f031:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  20f035:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  20f03c:	48 89 c1             	mov    rcx,rax
  20f03f:	48 83 e1 0f          	and    rcx,0xf
  20f043:	48 83 f9 00          	cmp    rcx,0x0
  20f047:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  20f04e:	74 12                	je     20f062 <Allocator_alignedAlloc.25+0x292>
  20f050:	eb 6f                	jmp    20f0c1 <Allocator_alignedAlloc.25+0x2f1>
  20f052:	48 8d 3d d7 64 01 00 	lea    rdi,[rip+0x164d7]        # 225530 <__unnamed_60>
  20f059:	31 c0                	xor    eax,eax
  20f05b:	89 c6                	mov    esi,eax
  20f05d:	e8 5e 40 ff ff       	call   2030c0 <panic>
  20f062:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  20f069:	48 c1 e8 04          	shr    rax,0x4
  20f06d:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  20f071:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  20f078:	00 00 
  20f07a:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  20f07e:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  20f085:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  20f089:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  20f08d:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  20f094:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  20f09b:	48 89 01             	mov    QWORD PTR [rcx],rax
  20f09e:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  20f0a5:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20f0a9:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  20f0ad:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  20f0b1:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  20f0b8:	48 81 c4 20 01 00 00 	add    rsp,0x120
  20f0bf:	5d                   	pop    rbp
  20f0c0:	c3                   	ret    
  20f0c1:	48 8d 3d 80 64 01 00 	lea    rdi,[rip+0x16480]        # 225548 <__unnamed_61>
  20f0c8:	31 c0                	xor    eax,eax
  20f0ca:	89 c6                	mov    esi,eax
  20f0cc:	e8 ef 3f ff ff       	call   2030c0 <panic>
  20f0d1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20f0d8:	0f 1f 84 00 00 00 00 
  20f0df:	00 

000000000020f0e0 <Allocator_free.26>:
    pub fn free(self: *Allocator, memory: var) void {
  20f0e0:	55                   	push   rbp
  20f0e1:	48 89 e5             	mov    rbp,rsp
  20f0e4:	48 83 ec 60          	sub    rsp,0x60
  20f0e8:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
        const bytes = @sliceToBytes(memory);
  20f0ec:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  20f0ef:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  20f0f3:	48 8b 76 08          	mov    rsi,QWORD PTR [rsi+0x8]
  20f0f7:	48 c1 e6 04          	shl    rsi,0x4
  20f0fb:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  20f0ff:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20f103:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  20f107:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20f10b:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        if (bytes.len == 0) return;
  20f10f:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
  20f114:	75 06                	jne    20f11c <Allocator_free.26+0x3c>
  20f116:	48 83 c4 60          	add    rsp,0x60
  20f11a:	5d                   	pop    rbp
  20f11b:	c3                   	ret    
  20f11c:	31 c0                	xor    eax,eax
  20f11e:	89 c1                	mov    ecx,eax
        const non_const_ptr = @intToPtr([*]u8, @ptrToInt(bytes.ptr));
  20f120:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  20f124:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
        self.freeFn(self, non_const_ptr[0..bytes.len]);
  20f128:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  20f12c:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  20f130:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  20f134:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  20f138:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
  20f13c:	48 39 f1             	cmp    rcx,rsi
  20f13f:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
  20f143:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
  20f147:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  20f14b:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  20f14f:	76 10                	jbe    20f161 <Allocator_free.26+0x81>
  20f151:	48 8d 3d a8 61 01 00 	lea    rdi,[rip+0x161a8]        # 225300 <__unnamed_4>
  20f158:	31 c0                	xor    eax,eax
  20f15a:	89 c6                	mov    esi,eax
  20f15c:	e8 5f 3f ff ff       	call   2030c0 <panic>
  20f161:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
  20f165:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  20f169:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  20f16d:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  20f171:	48 83 e9 00          	sub    rcx,0x0
  20f175:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  20f179:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  20f17d:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  20f181:	ff d1                	call   rcx
    pub fn free(self: *Allocator, memory: var) void {
  20f183:	48 83 c4 60          	add    rsp,0x60
  20f187:	5d                   	pop    rbp
  20f188:	c3                   	ret    
  20f189:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

000000000020f190 <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity>:
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  20f190:	55                   	push   rbp
  20f191:	48 89 e5             	mov    rbp,rsp
  20f194:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  20f19b:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  20f19f:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
            var better_capacity = self.items.len;
  20f1a3:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  20f1a7:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  20f1ab:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
            if (better_capacity >= new_capacity) return;
  20f1af:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  20f1b3:	48 3b 55 c0          	cmp    rdx,QWORD PTR [rbp-0x40]
  20f1b7:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  20f1bb:	72 11                	jb     20f1ce <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0x3e>
  20f1bd:	31 c0                	xor    eax,eax
  20f1bf:	66 89 c1             	mov    cx,ax
  20f1c2:	66 89 c8             	mov    ax,cx
  20f1c5:	48 81 c4 90 00 00 00 	add    rsp,0x90
  20f1cc:	5d                   	pop    rbp
  20f1cd:	c3                   	ret    
            while (true) {
  20f1ce:	eb 00                	jmp    20f1d0 <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0x40>
  20f1d0:	eb 00                	jmp    20f1d2 <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0x42>
  20f1d2:	31 c0                	xor    eax,eax
  20f1d4:	88 c1                	mov    cl,al
                better_capacity += better_capacity / 2 + 8;
  20f1d6:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  20f1da:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  20f1de:	f6 c1 01             	test   cl,0x1
  20f1e1:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  20f1e5:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  20f1e9:	0f 85 8e 00 00 00    	jne    20f27d <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0xed>
  20f1ef:	eb 72                	jmp    20f263 <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0xd3>
                if (better_capacity >= new_capacity) break;
  20f1f1:	eb 02                	jmp    20f1f5 <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0x65>
            while (true) {
  20f1f3:	eb db                	jmp    20f1d0 <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0x40>
  20f1f5:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
            self.items = try self.allocator.alignedRealloc(T, A, self.items, better_capacity);
  20f1f9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20f1fd:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  20f201:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
  20f205:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  20f209:	4c 8b 45 b8          	mov    r8,QWORD PTR [rbp-0x48]
  20f20d:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  20f211:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  20f215:	e8 d6 00 00 00       	call   20f2f0 <Allocator_alignedRealloc.27>
  20f21a:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  20f21f:	74 1e                	je     20f23f <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0xaf>
  20f221:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  20f225:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  20f229:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  20f22d:	e8 1e 52 ff ff       	call   204450 <__zig_return_error>
  20f232:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  20f236:	48 81 c4 90 00 00 00 	add    rsp,0x90
  20f23d:	5d                   	pop    rbp
  20f23e:	c3                   	ret    
  20f23f:	31 c0                	xor    eax,eax
  20f241:	66 89 c1             	mov    cx,ax
  20f244:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  20f248:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  20f24c:	48 89 16             	mov    QWORD PTR [rsi],rdx
  20f24f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  20f253:	48 89 56 08          	mov    QWORD PTR [rsi+0x8],rdx
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  20f257:	66 89 c8             	mov    ax,cx
  20f25a:	48 81 c4 90 00 00 00 	add    rsp,0x90
  20f261:	5d                   	pop    rbp
  20f262:	c3                   	ret    
                better_capacity += better_capacity / 2 + 8;
  20f263:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  20f267:	48 c1 e8 01          	shr    rax,0x1
  20f26b:	48 83 c0 08          	add    rax,0x8
  20f26f:	0f 92 c1             	setb   cl
  20f272:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  20f276:	88 4d 87             	mov    BYTE PTR [rbp-0x79],cl
  20f279:	72 12                	jb     20f28d <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0xfd>
  20f27b:	eb 20                	jmp    20f29d <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0x10d>
  20f27d:	48 8d 3d f4 62 01 00 	lea    rdi,[rip+0x162f4]        # 225578 <__unnamed_73>
  20f284:	31 c0                	xor    eax,eax
  20f286:	89 c6                	mov    esi,eax
  20f288:	e8 33 3e ff ff       	call   2030c0 <panic>
  20f28d:	48 8d 3d 84 60 01 00 	lea    rdi,[rip+0x16084]        # 225318 <__unnamed_5>
  20f294:	31 c0                	xor    eax,eax
  20f296:	89 c6                	mov    esi,eax
  20f298:	e8 23 3e ff ff       	call   2030c0 <panic>
  20f29d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  20f2a1:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  20f2a5:	48 01 c8             	add    rax,rcx
  20f2a8:	0f 92 c2             	setb   dl
  20f2ab:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  20f2b2:	88 95 77 ff ff ff    	mov    BYTE PTR [rbp-0x89],dl
  20f2b8:	72 02                	jb     20f2bc <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0x12c>
  20f2ba:	eb 10                	jmp    20f2cc <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0x13c>
  20f2bc:	48 8d 3d 55 60 01 00 	lea    rdi,[rip+0x16055]        # 225318 <__unnamed_5>
  20f2c3:	31 c0                	xor    eax,eax
  20f2c5:	89 c6                	mov    esi,eax
  20f2c7:	e8 f4 3d ff ff       	call   2030c0 <panic>
  20f2cc:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  20f2d3:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                if (better_capacity >= new_capacity) break;
  20f2d7:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  20f2db:	48 3b 4d c0          	cmp    rcx,QWORD PTR [rbp-0x40]
  20f2df:	0f 83 0c ff ff ff    	jae    20f1f1 <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0x61>
  20f2e5:	e9 09 ff ff ff       	jmp    20f1f3 <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0x63>
  20f2ea:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000020f2f0 <Allocator_alignedRealloc.27>:
    pub fn alignedRealloc(self: *Allocator, comptime T: type, comptime alignment: u29, old_mem: []align(alignment) T, n: usize) ![]align(alignment) T {
  20f2f0:	55                   	push   rbp
  20f2f1:	48 89 e5             	mov    rbp,rsp
  20f2f4:	53                   	push   rbx
  20f2f5:	48 81 ec 88 01 00 00 	sub    rsp,0x188
  20f2fc:	48 89 f8             	mov    rax,rdi
  20f2ff:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
  20f306:	4c 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],r8
        if (old_mem.len == 0) {
  20f30d:	48 83 79 08 00       	cmp    QWORD PTR [rcx+0x8],0x0
  20f312:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  20f319:	48 89 b5 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rsi
  20f320:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
  20f327:	48 89 bd b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rdi
  20f32e:	75 64                	jne    20f394 <Allocator_alignedRealloc.27+0xa4>
  20f330:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
            return self.alignedAlloc(T, alignment, n);
  20f334:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  20f33b:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  20f342:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  20f349:	e8 22 04 00 00       	call   20f770 <Allocator_alignedAlloc.28>
  20f34e:	66 83 7d e0 00       	cmp    WORD PTR [rbp-0x20],0x0
  20f353:	74 0e                	je     20f363 <Allocator_alignedRealloc.27+0x73>
  20f355:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  20f35c:	e8 ef 50 ff ff       	call   204450 <__zig_return_error>
  20f361:	eb 02                	jmp    20f365 <Allocator_alignedRealloc.27+0x75>
  20f363:	eb 00                	jmp    20f365 <Allocator_alignedRealloc.27+0x75>
  20f365:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20f369:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  20f370:	48 89 01             	mov    QWORD PTR [rcx],rax
  20f373:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20f377:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20f37b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20f37f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  20f383:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  20f38a:	48 81 c4 88 01 00 00 	add    rsp,0x188
  20f391:	5b                   	pop    rbx
  20f392:	5d                   	pop    rbp
  20f393:	c3                   	ret    
        if (old_mem.len == 0) {
  20f394:	eb 00                	jmp    20f396 <Allocator_alignedRealloc.27+0xa6>
        if (n == 0) {
  20f396:	48 83 bd 10 ff ff ff 	cmp    QWORD PTR [rbp-0xf0],0x0
  20f39d:	00 
  20f39e:	75 4b                	jne    20f3eb <Allocator_alignedRealloc.27+0xfb>
            self.free(old_mem);
  20f3a0:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
  20f3a7:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  20f3ae:	e8 dd 06 00 00       	call   20fa90 <Allocator_free.29>
            return ([*]align(alignment) T)(undefined)[0..0];
  20f3b3:	48 8b 35 66 15 ff ff 	mov    rsi,QWORD PTR [rip+0xffffffffffff1566]        # 200920 <__unnamed_82>
  20f3ba:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  20f3c1:	48 89 37             	mov    QWORD PTR [rdi],rsi
  20f3c4:	48 8b 35 5d 15 ff ff 	mov    rsi,QWORD PTR [rip+0xffffffffffff155d]        # 200928 <__unnamed_82+0x8>
  20f3cb:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  20f3cf:	48 8b 35 5a 15 ff ff 	mov    rsi,QWORD PTR [rip+0xffffffffffff155a]        # 200930 <__unnamed_82+0x10>
  20f3d6:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  20f3da:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  20f3e1:	48 81 c4 88 01 00 00 	add    rsp,0x188
  20f3e8:	5b                   	pop    rbx
  20f3e9:	5d                   	pop    rbp
  20f3ea:	c3                   	ret    
        if (n == 0) {
  20f3eb:	eb 00                	jmp    20f3ed <Allocator_alignedRealloc.27+0xfd>
  20f3ed:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  20f3f1:	b8 28 00 00 00       	mov    eax,0x28
  20f3f6:	89 c2                	mov    edx,eax
        const old_byte_slice = @sliceToBytes(old_mem);
  20f3f8:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  20f3ff:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  20f402:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  20f406:	48 6b 71 08 28       	imul   rsi,QWORD PTR [rcx+0x8],0x28
  20f40b:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  20f40f:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  20f413:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
  20f41a:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  20f41e:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  20f425:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  20f42c:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  20f433:	e8 f8 c7 ff ff       	call   20bc30 <mul>
  20f438:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  20f43d:	74 44                	je     20f483 <Allocator_alignedRealloc.27+0x193>
  20f43f:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  20f446:	e8 05 50 ff ff       	call   204450 <__zig_return_error>
  20f44b:	48 8b 3d e6 14 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff14e6]        # 200938 <__unnamed_83>
  20f452:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  20f459:	48 89 38             	mov    QWORD PTR [rax],rdi
  20f45c:	48 8b 3d dd 14 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff14dd]        # 200940 <__unnamed_83+0x8>
  20f463:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  20f467:	48 8b 3d da 14 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff14da]        # 200948 <__unnamed_83+0x10>
  20f46e:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  20f472:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  20f479:	48 81 c4 88 01 00 00 	add    rsp,0x188
  20f480:	5b                   	pop    rbx
  20f481:	5d                   	pop    rbp
  20f482:	c3                   	ret    
  20f483:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20f487:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  20f48e:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  20f492:	48 8d 8d 00 ff ff ff 	lea    rcx,[rbp-0x100]
  20f499:	41 b9 08 00 00 00    	mov    r9d,0x8
  20f49f:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  20f4a6:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
        const byte_slice = try self.reallocFn(self, old_byte_slice, byte_count, alignment);
  20f4ad:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  20f4b4:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  20f4b8:	48 8b b5 18 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe8]
  20f4bf:	4c 8b 85 f8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x108]
  20f4c6:	4c 8b 95 c8 fe ff ff 	mov    r10,QWORD PTR [rbp-0x138]
  20f4cd:	48 89 b5 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rsi
  20f4d4:	4c 89 d6             	mov    rsi,r10
  20f4d7:	4c 8b 9d a8 fe ff ff 	mov    r11,QWORD PTR [rbp-0x158]
  20f4de:	48 89 95 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdx
  20f4e5:	4c 89 da             	mov    rdx,r11
  20f4e8:	48 8b 9d a0 fe ff ff 	mov    rbx,QWORD PTR [rbp-0x160]
  20f4ef:	ff d3                	call   rbx
  20f4f1:	66 83 7d 98 00       	cmp    WORD PTR [rbp-0x68],0x0
  20f4f6:	74 5d                	je     20f555 <Allocator_alignedRealloc.27+0x265>
  20f4f8:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  20f4fc:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  20f503:	66 89 85 9e fe ff ff 	mov    WORD PTR [rbp-0x162],ax
  20f50a:	e8 41 4f ff ff       	call   204450 <__zig_return_error>
  20f50f:	66 8b 85 9e fe ff ff 	mov    ax,WORD PTR [rbp-0x162]
  20f516:	66 89 85 68 ff ff ff 	mov    WORD PTR [rbp-0x98],ax
  20f51d:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  20f524:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  20f52b:	48 89 39             	mov    QWORD PTR [rcx],rdi
  20f52e:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  20f535:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  20f539:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  20f540:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  20f544:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  20f54b:	48 81 c4 88 01 00 00 	add    rsp,0x188
  20f552:	5b                   	pop    rbx
  20f553:	5d                   	pop    rbp
  20f554:	c3                   	ret    
  20f555:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  20f559:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  20f560:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  20f564:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
        assert(byte_slice.len == byte_count);
  20f56b:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  20f572:	48 3b 85 f8 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x108]
  20f579:	0f 94 c1             	sete   cl
  20f57c:	0f b6 f9             	movzx  edi,cl
  20f57f:	e8 7c 3a ff ff       	call   203000 <assert>
        if (n > old_mem.len) {
  20f584:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  20f58b:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  20f592:	48 3b 42 08          	cmp    rax,QWORD PTR [rdx+0x8]
  20f596:	76 71                	jbe    20f609 <Allocator_alignedRealloc.27+0x319>
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  20f598:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  20f59f:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  20f5a6:	48 39 c8             	cmp    rax,rcx
  20f5a9:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  20f5b0:	48 89 8d 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rcx
  20f5b7:	76 78                	jbe    20f631 <Allocator_alignedRealloc.27+0x341>
  20f5b9:	eb 66                	jmp    20f621 <Allocator_alignedRealloc.27+0x331>
  20f5bb:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  20f5c2:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
  20f5c9:	48 39 c8             	cmp    rax,rcx
  20f5cc:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  20f5d3:	73 32                	jae    20f607 <Allocator_alignedRealloc.27+0x317>
  20f5d5:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  20f5dc:	48 03 8d 58 ff ff ff 	add    rcx,QWORD PTR [rbp-0xa8]
  20f5e3:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
                byte.* = undefined;
  20f5ea:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  20f5f1:	88 01                	mov    BYTE PTR [rcx],al
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  20f5f3:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  20f5fa:	48 83 c1 01          	add    rcx,0x1
  20f5fe:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
  20f605:	eb b4                	jmp    20f5bb <Allocator_alignedRealloc.27+0x2cb>
        if (n > old_mem.len) {
  20f607:	eb 02                	jmp    20f60b <Allocator_alignedRealloc.27+0x31b>
  20f609:	eb 00                	jmp    20f60b <Allocator_alignedRealloc.27+0x31b>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  20f60b:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  20f612:	48 83 e0 07          	and    rax,0x7
  20f616:	48 83 f8 00          	cmp    rax,0x0
  20f61a:	74 7b                	je     20f697 <Allocator_alignedRealloc.27+0x3a7>
  20f61c:	e9 ae 00 00 00       	jmp    20f6cf <Allocator_alignedRealloc.27+0x3df>
  20f621:	48 8d 3d d8 5c 01 00 	lea    rdi,[rip+0x15cd8]        # 225300 <__unnamed_4>
  20f628:	31 c0                	xor    eax,eax
  20f62a:	89 c6                	mov    esi,eax
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  20f62c:	e8 8f 3a ff ff       	call   2030c0 <panic>
  20f631:	be aa 00 00 00       	mov    esi,0xaa
  20f636:	b8 08 00 00 00       	mov    eax,0x8
  20f63b:	89 c2                	mov    edx,eax
  20f63d:	48 8d 8d e0 fe ff ff 	lea    rcx,[rbp-0x120]
  20f644:	48 8b bd 90 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x170]
  20f64b:	48 03 bd e8 fe ff ff 	add    rdi,QWORD PTR [rbp-0x118]
  20f652:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
  20f659:	48 8b bd 88 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x178]
  20f660:	4c 8b 85 90 fe ff ff 	mov    r8,QWORD PTR [rbp-0x170]
  20f667:	4c 29 c7             	sub    rdi,r8
  20f66a:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  20f671:	48 89 cf             	mov    rdi,rcx
  20f674:	e8 37 26 01 00       	call   221cb0 <memset>
  20f679:	48 c7 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],0x0
  20f680:	00 00 00 00 
  20f684:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  20f68b:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  20f692:	e9 24 ff ff ff       	jmp    20f5bb <Allocator_alignedRealloc.27+0x2cb>
  20f697:	b8 28 00 00 00       	mov    eax,0x28
  20f69c:	89 c1                	mov    ecx,eax
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  20f69e:	48 8b 95 e8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x118]
  20f6a5:	48 89 95 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdx
  20f6ac:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  20f6b3:	48 89 d0             	mov    rax,rdx
  20f6b6:	31 f6                	xor    esi,esi
  20f6b8:	48 89 95 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rdx
  20f6bf:	89 f2                	mov    edx,esi
  20f6c1:	48 f7 f1             	div    rcx
  20f6c4:	48 83 fa 00          	cmp    rdx,0x0
  20f6c8:	74 15                	je     20f6df <Allocator_alignedRealloc.27+0x3ef>
  20f6ca:	e9 87 00 00 00       	jmp    20f756 <Allocator_alignedRealloc.27+0x466>
  20f6cf:	48 8d 3d 5a 5e 01 00 	lea    rdi,[rip+0x15e5a]        # 225530 <__unnamed_60>
  20f6d6:	31 c0                	xor    eax,eax
  20f6d8:	89 c6                	mov    esi,eax
  20f6da:	e8 e1 39 ff ff       	call   2030c0 <panic>
  20f6df:	b8 28 00 00 00       	mov    eax,0x28
  20f6e4:	89 c1                	mov    ecx,eax
  20f6e6:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  20f6ed:	31 d2                	xor    edx,edx
  20f6ef:	48 f7 f1             	div    rcx
  20f6f2:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  20f6f9:	66 c7 85 20 ff ff ff 	mov    WORD PTR [rbp-0xe0],0x0
  20f700:	00 00 
  20f702:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  20f709:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  20f710:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  20f717:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  20f71e:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  20f725:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  20f72c:	48 89 01             	mov    QWORD PTR [rcx],rax
  20f72f:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  20f736:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20f73a:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  20f741:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  20f745:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  20f74c:	48 81 c4 88 01 00 00 	add    rsp,0x188
  20f753:	5b                   	pop    rbx
  20f754:	5d                   	pop    rbp
  20f755:	c3                   	ret    
  20f756:	48 8d 3d eb 5d 01 00 	lea    rdi,[rip+0x15deb]        # 225548 <__unnamed_61>
  20f75d:	31 c0                	xor    eax,eax
  20f75f:	89 c6                	mov    esi,eax
  20f761:	e8 5a 39 ff ff       	call   2030c0 <panic>
  20f766:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  20f76d:	00 00 00 

000000000020f770 <Allocator_alignedAlloc.28>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  20f770:	55                   	push   rbp
  20f771:	48 89 e5             	mov    rbp,rsp
  20f774:	48 81 ec 20 01 00 00 	sub    rsp,0x120
  20f77b:	48 89 f8             	mov    rax,rdi
  20f77e:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  20f785:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  20f78c:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  20f793:	00 
  20f794:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  20f79b:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  20f7a2:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  20f7a9:	75 37                	jne    20f7e2 <Allocator_alignedAlloc.28+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  20f7ab:	48 8b 05 9e 11 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff119e]        # 200950 <__unnamed_84>
  20f7b2:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  20f7b9:	48 89 01             	mov    QWORD PTR [rcx],rax
  20f7bc:	48 8b 05 95 11 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff1195]        # 200958 <__unnamed_84+0x8>
  20f7c3:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20f7c7:	48 8b 05 92 11 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff1192]        # 200960 <__unnamed_84+0x10>
  20f7ce:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  20f7d2:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  20f7d9:	48 81 c4 20 01 00 00 	add    rsp,0x120
  20f7e0:	5d                   	pop    rbp
  20f7e1:	c3                   	ret    
        if (n == 0) {
  20f7e2:	eb 00                	jmp    20f7e4 <Allocator_alignedAlloc.28+0x74>
  20f7e4:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  20f7e8:	b8 28 00 00 00       	mov    eax,0x28
  20f7ed:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  20f7ef:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  20f7f6:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  20f7fd:	e8 2e c4 ff ff       	call   20bc30 <mul>
  20f802:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  20f807:	74 43                	je     20f84c <Allocator_alignedAlloc.28+0xdc>
  20f809:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  20f810:	e8 3b 4c ff ff       	call   204450 <__zig_return_error>
  20f815:	48 8b 3d 4c 11 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff114c]        # 200968 <__unnamed_85>
  20f81c:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  20f823:	48 89 38             	mov    QWORD PTR [rax],rdi
  20f826:	48 8b 3d 43 11 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff1143]        # 200970 <__unnamed_85+0x8>
  20f82d:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  20f831:	48 8b 3d 40 11 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff1140]        # 200978 <__unnamed_85+0x10>
  20f838:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  20f83c:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  20f843:	48 81 c4 20 01 00 00 	add    rsp,0x120
  20f84a:	5d                   	pop    rbp
  20f84b:	c3                   	ret    
  20f84c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20f850:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  20f857:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  20f85b:	41 b8 08 00 00 00    	mov    r8d,0x8
  20f861:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  20f868:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  20f86f:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  20f876:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  20f879:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  20f880:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  20f887:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  20f88e:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  20f895:	4c 89 ce             	mov    rsi,r9
  20f898:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  20f89f:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  20f8a6:	4c 89 d1             	mov    rcx,r10
  20f8a9:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  20f8b0:	41 ff d3             	call   r11
  20f8b3:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  20f8b8:	74 50                	je     20f90a <Allocator_alignedAlloc.28+0x19a>
  20f8ba:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  20f8be:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  20f8c5:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  20f8cc:	e8 7f 4b ff ff       	call   204450 <__zig_return_error>
  20f8d1:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  20f8d8:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  20f8dc:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  20f8e0:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  20f8e7:	48 89 39             	mov    QWORD PTR [rcx],rdi
  20f8ea:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  20f8ee:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  20f8f2:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  20f8f6:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  20f8fa:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  20f901:	48 81 c4 20 01 00 00 	add    rsp,0x120
  20f908:	5d                   	pop    rbp
  20f909:	c3                   	ret    
  20f90a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20f90e:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  20f915:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  20f919:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  20f920:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  20f927:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  20f92e:	0f 94 c1             	sete   cl
  20f931:	0f b6 f9             	movzx  edi,cl
  20f934:	e8 c7 36 ff ff       	call   203000 <assert>
  20f939:	be aa 00 00 00       	mov    esi,0xaa
  20f93e:	bf 08 00 00 00       	mov    edi,0x8
  20f943:	89 fa                	mov    edx,edi
  20f945:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  20f94c:	48 89 c7             	mov    rdi,rax
  20f94f:	e8 5c 23 01 00       	call   221cb0 <memset>
  20f954:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  20f95b:	00 00 00 00 
  20f95f:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  20f966:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  20f96d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  20f974:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  20f97b:	48 39 c8             	cmp    rax,rcx
  20f97e:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  20f985:	73 32                	jae    20f9b9 <Allocator_alignedAlloc.28+0x249>
  20f987:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  20f98e:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  20f995:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  20f99c:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  20f9a3:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  20f9a5:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  20f9ac:	48 83 c1 01          	add    rcx,0x1
  20f9b0:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  20f9b7:	eb b4                	jmp    20f96d <Allocator_alignedAlloc.28+0x1fd>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  20f9b9:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  20f9c0:	48 83 e0 07          	and    rax,0x7
  20f9c4:	48 83 f8 00          	cmp    rax,0x0
  20f9c8:	75 32                	jne    20f9fc <Allocator_alignedAlloc.28+0x28c>
  20f9ca:	b8 28 00 00 00       	mov    eax,0x28
  20f9cf:	89 c1                	mov    ecx,eax
  20f9d1:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
  20f9d8:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
  20f9dc:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
  20f9e3:	48 89 d0             	mov    rax,rdx
  20f9e6:	31 f6                	xor    esi,esi
  20f9e8:	48 89 95 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdx
  20f9ef:	89 f2                	mov    edx,esi
  20f9f1:	48 f7 f1             	div    rcx
  20f9f4:	48 83 fa 00          	cmp    rdx,0x0
  20f9f8:	74 12                	je     20fa0c <Allocator_alignedAlloc.28+0x29c>
  20f9fa:	eb 77                	jmp    20fa73 <Allocator_alignedAlloc.28+0x303>
  20f9fc:	48 8d 3d 2d 5b 01 00 	lea    rdi,[rip+0x15b2d]        # 225530 <__unnamed_60>
  20fa03:	31 c0                	xor    eax,eax
  20fa05:	89 c6                	mov    esi,eax
  20fa07:	e8 b4 36 ff ff       	call   2030c0 <panic>
  20fa0c:	b8 28 00 00 00       	mov    eax,0x28
  20fa11:	89 c1                	mov    ecx,eax
  20fa13:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  20fa1a:	31 d2                	xor    edx,edx
  20fa1c:	48 f7 f1             	div    rcx
  20fa1f:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  20fa23:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  20fa2a:	00 00 
  20fa2c:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  20fa30:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  20fa37:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  20fa3b:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  20fa3f:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  20fa46:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  20fa4d:	48 89 01             	mov    QWORD PTR [rcx],rax
  20fa50:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  20fa57:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20fa5b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  20fa5f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  20fa63:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  20fa6a:	48 81 c4 20 01 00 00 	add    rsp,0x120
  20fa71:	5d                   	pop    rbp
  20fa72:	c3                   	ret    
  20fa73:	48 8d 3d ce 5a 01 00 	lea    rdi,[rip+0x15ace]        # 225548 <__unnamed_61>
  20fa7a:	31 c0                	xor    eax,eax
  20fa7c:	89 c6                	mov    esi,eax
  20fa7e:	e8 3d 36 ff ff       	call   2030c0 <panic>
  20fa83:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20fa8a:	84 00 00 00 00 00 

000000000020fa90 <Allocator_free.29>:
    pub fn free(self: *Allocator, memory: var) void {
  20fa90:	55                   	push   rbp
  20fa91:	48 89 e5             	mov    rbp,rsp
  20fa94:	48 83 ec 60          	sub    rsp,0x60
  20fa98:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
        const bytes = @sliceToBytes(memory);
  20fa9c:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  20fa9f:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  20faa3:	48 6b 76 08 28       	imul   rsi,QWORD PTR [rsi+0x8],0x28
  20faa8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  20faac:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20fab0:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  20fab4:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20fab8:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        if (bytes.len == 0) return;
  20fabc:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
  20fac1:	75 06                	jne    20fac9 <Allocator_free.29+0x39>
  20fac3:	48 83 c4 60          	add    rsp,0x60
  20fac7:	5d                   	pop    rbp
  20fac8:	c3                   	ret    
  20fac9:	31 c0                	xor    eax,eax
  20facb:	89 c1                	mov    ecx,eax
        const non_const_ptr = @intToPtr([*]u8, @ptrToInt(bytes.ptr));
  20facd:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  20fad1:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
        self.freeFn(self, non_const_ptr[0..bytes.len]);
  20fad5:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  20fad9:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  20fadd:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  20fae1:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  20fae5:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
  20fae9:	48 39 f1             	cmp    rcx,rsi
  20faec:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
  20faf0:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
  20faf4:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  20faf8:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  20fafc:	76 10                	jbe    20fb0e <Allocator_free.29+0x7e>
  20fafe:	48 8d 3d fb 57 01 00 	lea    rdi,[rip+0x157fb]        # 225300 <__unnamed_4>
  20fb05:	31 c0                	xor    eax,eax
  20fb07:	89 c6                	mov    esi,eax
  20fb09:	e8 b2 35 ff ff       	call   2030c0 <panic>
  20fb0e:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
  20fb12:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  20fb16:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  20fb1a:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  20fb1e:	48 83 e9 00          	sub    rcx,0x0
  20fb22:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  20fb26:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  20fb2a:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  20fb2e:	ff d1                	call   rcx
    pub fn free(self: *Allocator, memory: var) void {
  20fb30:	48 83 c4 60          	add    rsp,0x60
  20fb34:	5d                   	pop    rbp
  20fb35:	c3                   	ret    
  20fb36:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  20fb3d:	00 00 00 

000000000020fb40 <getAbbrevTableEntry>:
fn getAbbrevTableEntry(abbrev_table: *const AbbrevTable, abbrev_code: u64) ?*const AbbrevTableEntry {
  20fb40:	55                   	push   rbp
  20fb41:	48 89 e5             	mov    rbp,rsp
  20fb44:	48 83 ec 50          	sub    rsp,0x50
  20fb48:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  20fb4c:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  20fb50:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
    for (abbrev_table.toSliceConst()) |*table_entry| {
  20fb54:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  20fb58:	48 89 c7             	mov    rdi,rax
  20fb5b:	e8 70 12 00 00       	call   210dd0 <AlignedArrayList(AbbrevTableEntry,1)_toSliceConst>
  20fb60:	be aa 00 00 00       	mov    esi,0xaa
  20fb65:	b9 08 00 00 00       	mov    ecx,0x8
  20fb6a:	89 ca                	mov    edx,ecx
  20fb6c:	48 8d 45 c8          	lea    rax,[rbp-0x38]
  20fb70:	48 89 c7             	mov    rdi,rax
  20fb73:	e8 38 21 01 00       	call   221cb0 <memset>
  20fb78:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
  20fb7f:	00 
  20fb80:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20fb84:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  20fb88:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  20fb8c:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  20fb90:	48 39 c8             	cmp    rax,rcx
  20fb93:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  20fb97:	73 36                	jae    20fbcf <getAbbrevTableEntry+0x8f>
  20fb99:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20fb9d:	48 6b c8 38          	imul   rcx,rax,0x38
  20fba1:	48 03 4d f0          	add    rcx,QWORD PTR [rbp-0x10]
  20fba5:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
        if (table_entry.abbrev_code == abbrev_code) return table_entry;
  20fba9:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  20fbad:	48 8b 49 08          	mov    rcx,QWORD PTR [rcx+0x8]
  20fbb1:	48 3b 4d d0          	cmp    rcx,QWORD PTR [rbp-0x30]
  20fbb5:	75 0a                	jne    20fbc1 <getAbbrevTableEntry+0x81>
  20fbb7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20fbbb:	48 83 c4 50          	add    rsp,0x50
  20fbbf:	5d                   	pop    rbp
  20fbc0:	c3                   	ret    
    for (abbrev_table.toSliceConst()) |*table_entry| {
  20fbc1:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20fbc5:	48 83 c0 01          	add    rax,0x1
  20fbc9:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  20fbcd:	eb b9                	jmp    20fb88 <getAbbrevTableEntry+0x48>
  20fbcf:	31 c0                	xor    eax,eax
    return null;
  20fbd1:	48 83 c4 50          	add    rsp,0x50
  20fbd5:	5d                   	pop    rbp
  20fbd6:	c3                   	ret    
  20fbd7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  20fbde:	00 00 

000000000020fbe0 <AlignedArrayList(Attr,8)_init>:
        pub fn init(allocator: *Allocator) Self {
  20fbe0:	55                   	push   rbp
  20fbe1:	48 89 e5             	mov    rbp,rsp
  20fbe4:	48 89 f8             	mov    rax,rdi
  20fbe7:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
                .allocator = allocator,
  20fbeb:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
            return Self{
  20fbef:	48 8b 0d ca 26 ff ff 	mov    rcx,QWORD PTR [rip+0xffffffffffff26ca]        # 2022c0 <__unnamed_123>
  20fbf6:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  20fbfa:	48 8b 0d c7 26 ff ff 	mov    rcx,QWORD PTR [rip+0xffffffffffff26c7]        # 2022c8 <__unnamed_123+0x8>
  20fc01:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  20fc05:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  20fc0c:	00 
  20fc0d:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  20fc11:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  20fc15:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  20fc18:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20fc1c:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  20fc20:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  20fc24:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  20fc28:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  20fc2c:	48 89 4f 18          	mov    QWORD PTR [rdi+0x18],rcx
  20fc30:	5d                   	pop    rbp
  20fc31:	c3                   	ret    
  20fc32:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20fc39:	1f 84 00 00 00 00 00 

000000000020fc40 <AlignedArrayList(Attr,8)_resize>:
        pub fn resize(self: *Self, new_len: usize) !void {
  20fc40:	55                   	push   rbp
  20fc41:	48 89 e5             	mov    rbp,rsp
  20fc44:	48 83 ec 30          	sub    rsp,0x30
  20fc48:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  20fc4c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
            try self.ensureCapacity(new_len);
  20fc50:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20fc54:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  20fc58:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  20fc5c:	e8 0f 12 00 00       	call   210e70 <AlignedArrayList(Attr,8)_ensureCapacity>
  20fc61:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  20fc65:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  20fc6a:	74 1b                	je     20fc87 <AlignedArrayList(Attr,8)_resize+0x47>
  20fc6c:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  20fc70:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  20fc74:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  20fc78:	e8 d3 47 ff ff       	call   204450 <__zig_return_error>
  20fc7d:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  20fc81:	48 83 c4 30          	add    rsp,0x30
  20fc85:	5d                   	pop    rbp
  20fc86:	c3                   	ret    
  20fc87:	31 c0                	xor    eax,eax
  20fc89:	66 89 c1             	mov    cx,ax
            self.len = new_len;
  20fc8c:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  20fc90:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  20fc94:	48 89 72 10          	mov    QWORD PTR [rdx+0x10],rsi
        pub fn resize(self: *Self, new_len: usize) !void {
  20fc98:	66 89 c8             	mov    ax,cx
  20fc9b:	48 83 c4 30          	add    rsp,0x30
  20fc9f:	5d                   	pop    rbp
  20fca0:	c3                   	ret    
  20fca1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20fca8:	0f 1f 84 00 00 00 00 
  20fcaf:	00 

000000000020fcb0 <AlignedArrayList(AbbrevAttr,8)_toSliceConst>:
        pub fn toSliceConst(self: Self) []align(A) const T {
  20fcb0:	55                   	push   rbp
  20fcb1:	48 89 e5             	mov    rbp,rsp
  20fcb4:	48 83 ec 40          	sub    rsp,0x40
  20fcb8:	48 89 f8             	mov    rax,rdi
  20fcbb:	31 c9                	xor    ecx,ecx
  20fcbd:	89 ca                	mov    edx,ecx
            return self.items[0..self.len];
  20fcbf:	4c 8b 46 10          	mov    r8,QWORD PTR [rsi+0x10]
  20fcc3:	4c 8b 4e 08          	mov    r9,QWORD PTR [rsi+0x8]
  20fcc7:	4c 39 c2             	cmp    rdx,r8
  20fcca:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  20fcce:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  20fcd2:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  20fcd6:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
  20fcda:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
  20fcde:	76 10                	jbe    20fcf0 <AlignedArrayList(AbbrevAttr,8)_toSliceConst+0x40>
  20fce0:	48 8d 3d 19 56 01 00 	lea    rdi,[rip+0x15619]        # 225300 <__unnamed_4>
  20fce7:	31 c0                	xor    eax,eax
  20fce9:	89 c6                	mov    esi,eax
  20fceb:	e8 d0 33 ff ff       	call   2030c0 <panic>
  20fcf0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20fcf4:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  20fcf8:	48 39 c8             	cmp    rax,rcx
  20fcfb:	76 10                	jbe    20fd0d <AlignedArrayList(AbbrevAttr,8)_toSliceConst+0x5d>
  20fcfd:	48 8d 3d fc 55 01 00 	lea    rdi,[rip+0x155fc]        # 225300 <__unnamed_4>
  20fd04:	31 c0                	xor    eax,eax
  20fd06:	89 c6                	mov    esi,eax
  20fd08:	e8 b3 33 ff ff       	call   2030c0 <panic>
  20fd0d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20fd11:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  20fd14:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  20fd18:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  20fd1c:	48 83 e9 00          	sub    rcx,0x0
  20fd20:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  20fd24:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  20fd28:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  20fd2c:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  20fd2f:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  20fd33:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  20fd37:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20fd3b:	48 83 c4 40          	add    rsp,0x40
  20fd3f:	5d                   	pop    rbp
  20fd40:	c3                   	ret    
  20fd41:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20fd48:	0f 1f 84 00 00 00 00 
  20fd4f:	00 

000000000020fd50 <parseFormValue>:
fn parseFormValue(allocator: *mem.Allocator, in_stream: var, form_id: u64, is_64: bool) ParseFormValueError!FormValue {
  20fd50:	55                   	push   rbp
  20fd51:	48 89 e5             	mov    rbp,rsp
  20fd54:	48 81 ec e0 09 00 00 	sub    rsp,0x9e0
  20fd5b:	44 88 c8             	mov    al,r9b
  20fd5e:	49 89 fa             	mov    r10,rdi
  20fd61:	48 89 95 a8 f7 ff ff 	mov    QWORD PTR [rbp-0x858],rdx
  20fd68:	48 89 8d a0 f7 ff ff 	mov    QWORD PTR [rbp-0x860],rcx
  20fd6f:	4c 89 85 98 f7 ff ff 	mov    QWORD PTR [rbp-0x868],r8
  20fd76:	24 01                	and    al,0x1
  20fd78:	88 85 97 f7 ff ff    	mov    BYTE PTR [rbp-0x869],al
    return switch (form_id) {
  20fd7e:	48 8b 8d 98 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x868]
  20fd85:	48 83 c1 ff          	add    rcx,0xffffffffffffffff
  20fd89:	48 89 ca             	mov    rdx,rcx
  20fd8c:	48 83 ea 1f          	sub    rdx,0x1f
  20fd90:	48 89 b5 48 f7 ff ff 	mov    QWORD PTR [rbp-0x8b8],rsi
  20fd97:	4c 89 95 40 f7 ff ff 	mov    QWORD PTR [rbp-0x8c0],r10
  20fd9e:	48 89 bd 38 f7 ff ff 	mov    QWORD PTR [rbp-0x8c8],rdi
  20fda5:	48 89 8d 30 f7 ff ff 	mov    QWORD PTR [rbp-0x8d0],rcx
  20fdac:	48 89 95 28 f7 ff ff 	mov    QWORD PTR [rbp-0x8d8],rdx
  20fdb3:	77 17                	ja     20fdcc <parseFormValue+0x7c>
  20fdb5:	48 8d 05 30 04 ff ff 	lea    rax,[rip+0xffffffffffff0430]        # 2001ec <arch-0x347>
  20fdbc:	48 8b 8d 30 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x8d0]
  20fdc3:	48 63 14 88          	movsxd rdx,DWORD PTR [rax+rcx*4]
  20fdc7:	48 01 c2             	add    rdx,rax
  20fdca:	ff e2                	jmp    rdx
  20fdcc:	48 8d 05 45 0c ff ff 	lea    rax,[rip+0xffffffffffff0c45]        # 200a18 <__unnamed_87>
  20fdd3:	48 89 85 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rax
  20fdda:	e9 8f 0f 00 00       	jmp    210d6e <parseFormValue+0x101e>
  20fddf:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
        DW.FORM_addr => FormValue{ .Address = try parseFormValueTargetAddrSize(in_stream) },
  20fde3:	48 8b 95 a0 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x860]
  20fdea:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  20fdf1:	e8 2a 1a 00 00       	call   211820 <parseFormValueTargetAddrSize>
  20fdf6:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  20fdfb:	74 5a                	je     20fe57 <parseFormValue+0x107>
  20fdfd:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  20fe01:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  20fe08:	66 89 85 1e f7 ff ff 	mov    WORD PTR [rbp-0x8e2],ax
  20fe0f:	e8 3c 46 ff ff       	call   204450 <__zig_return_error>
  20fe14:	b9 28 00 00 00       	mov    ecx,0x28
  20fe19:	89 ca                	mov    edx,ecx
  20fe1b:	48 8d 7d b8          	lea    rdi,[rbp-0x48]
  20fe1f:	66 8b 85 1e f7 ff ff 	mov    ax,WORD PTR [rbp-0x8e2]
  20fe26:	66 89 45 b8          	mov    WORD PTR [rbp-0x48],ax
  20fe2a:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  20fe31:	48 89 bd 10 f7 ff ff 	mov    QWORD PTR [rbp-0x8f0],rdi
  20fe38:	48 89 f7             	mov    rdi,rsi
  20fe3b:	48 8b b5 10 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8f0]
  20fe42:	e8 b9 1e 01 00       	call   221d00 <memcpy>
  20fe47:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  20fe4e:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  20fe55:	5d                   	pop    rbp
  20fe56:	c3                   	ret    
  20fe57:	48 8d 85 a0 f8 ff ff 	lea    rax,[rbp-0x760]
  20fe5e:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  20fe62:	c6 45 b0 00          	mov    BYTE PTR [rbp-0x50],0x0
  20fe66:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
  20fe6a:	66 c7 85 a0 f8 ff ff 	mov    WORD PTR [rbp-0x760],0x0
  20fe71:	00 00 
  20fe73:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  20fe77:	48 89 8d a8 f8 ff ff 	mov    QWORD PTR [rbp-0x758],rcx
  20fe7e:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  20fe82:	48 89 8d b0 f8 ff ff 	mov    QWORD PTR [rbp-0x750],rcx
  20fe89:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  20fe8d:	48 89 8d b8 f8 ff ff 	mov    QWORD PTR [rbp-0x748],rcx
  20fe94:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  20fe98:	48 89 8d c0 f8 ff ff 	mov    QWORD PTR [rbp-0x740],rcx
    return switch (form_id) {
  20fe9f:	48 89 85 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rax
  20fea6:	e9 c3 0e 00 00       	jmp    210d6e <parseFormValue+0x101e>
  20feab:	48 8d bd 70 ff ff ff 	lea    rdi,[rbp-0x90]
  20feb2:	b8 01 00 00 00       	mov    eax,0x1
  20feb7:	41 89 c0             	mov    r8d,eax
        DW.FORM_block1 => parseFormValueBlock(allocator, in_stream, 1),
  20feba:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  20fec1:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  20fec8:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  20fecf:	e8 ec 19 00 00       	call   2118c0 <parseFormValueBlock>
  20fed4:	48 8d 8d 70 ff ff ff 	lea    rcx,[rbp-0x90]
    return switch (form_id) {
  20fedb:	48 89 8d 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rcx
  20fee2:	e9 87 0e 00 00       	jmp    210d6e <parseFormValue+0x101e>
  20fee7:	48 8d bd 48 ff ff ff 	lea    rdi,[rbp-0xb8]
  20feee:	b8 02 00 00 00       	mov    eax,0x2
  20fef3:	41 89 c0             	mov    r8d,eax
        DW.FORM_block2 => parseFormValueBlock(allocator, in_stream, 2),
  20fef6:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  20fefd:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  20ff04:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  20ff0b:	e8 b0 19 00 00       	call   2118c0 <parseFormValueBlock>
  20ff10:	48 8d 8d 48 ff ff ff 	lea    rcx,[rbp-0xb8]
    return switch (form_id) {
  20ff17:	48 89 8d 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rcx
  20ff1e:	e9 4b 0e 00 00       	jmp    210d6e <parseFormValue+0x101e>
  20ff23:	48 8d bd 20 ff ff ff 	lea    rdi,[rbp-0xe0]
  20ff2a:	b8 04 00 00 00       	mov    eax,0x4
  20ff2f:	41 89 c0             	mov    r8d,eax
        DW.FORM_block4 => parseFormValueBlock(allocator, in_stream, 4),
  20ff32:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  20ff39:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  20ff40:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  20ff47:	e8 74 19 00 00       	call   2118c0 <parseFormValueBlock>
  20ff4c:	48 8d 8d 20 ff ff ff 	lea    rcx,[rbp-0xe0]
    return switch (form_id) {
  20ff53:	48 89 8d 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rcx
  20ff5a:	e9 0f 0e 00 00       	jmp    210d6e <parseFormValue+0x101e>
  20ff5f:	48 8d bd 10 ff ff ff 	lea    rdi,[rbp-0xf0]
            const block_len = try readULeb128(in_stream);
  20ff66:	48 8b 95 a0 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x860]
  20ff6d:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  20ff74:	e8 77 d9 ff ff       	call   20d8f0 <readULeb128>
  20ff79:	66 83 bd 10 ff ff ff 	cmp    WORD PTR [rbp-0xf0],0x0
  20ff80:	00 
  20ff81:	74 63                	je     20ffe6 <parseFormValue+0x296>
  20ff83:	66 8b 85 10 ff ff ff 	mov    ax,WORD PTR [rbp-0xf0]
  20ff8a:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  20ff91:	66 89 85 0e f7 ff ff 	mov    WORD PTR [rbp-0x8f2],ax
  20ff98:	e8 b3 44 ff ff       	call   204450 <__zig_return_error>
  20ff9d:	b9 28 00 00 00       	mov    ecx,0x28
  20ffa2:	89 ca                	mov    edx,ecx
  20ffa4:	48 8d bd d8 fe ff ff 	lea    rdi,[rbp-0x128]
  20ffab:	66 8b 85 0e f7 ff ff 	mov    ax,WORD PTR [rbp-0x8f2]
  20ffb2:	66 89 85 d8 fe ff ff 	mov    WORD PTR [rbp-0x128],ax
  20ffb9:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  20ffc0:	48 89 bd 00 f7 ff ff 	mov    QWORD PTR [rbp-0x900],rdi
  20ffc7:	48 89 f7             	mov    rdi,rsi
  20ffca:	48 8b b5 00 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x900]
  20ffd1:	e8 2a 1d 01 00       	call   221d00 <memcpy>
  20ffd6:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  20ffdd:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  20ffe4:	5d                   	pop    rbp
  20ffe5:	c3                   	ret    
  20ffe6:	48 8d bd b0 fe ff ff 	lea    rdi,[rbp-0x150]
  20ffed:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  20fff4:	48 89 85 88 f7 ff ff 	mov    QWORD PTR [rbp-0x878],rax
            return parseFormValueBlockLen(allocator, in_stream, block_len);
  20fffb:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  210002:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  210009:	4c 8b 85 88 f7 ff ff 	mov    r8,QWORD PTR [rbp-0x878]
  210010:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  210017:	e8 d4 19 00 00       	call   2119f0 <parseFormValueBlockLen>
  21001c:	66 83 bd b0 fe ff ff 	cmp    WORD PTR [rbp-0x150],0x0
  210023:	00 
  210024:	74 0e                	je     210034 <parseFormValue+0x2e4>
  210026:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  21002d:	e8 1e 44 ff ff       	call   204450 <__zig_return_error>
  210032:	eb 02                	jmp    210036 <parseFormValue+0x2e6>
  210034:	eb 00                	jmp    210036 <parseFormValue+0x2e6>
  210036:	b8 28 00 00 00       	mov    eax,0x28
  21003b:	89 c2                	mov    edx,eax
  21003d:	48 8d 8d b0 fe ff ff 	lea    rcx,[rbp-0x150]
  210044:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  21004b:	48 89 f7             	mov    rdi,rsi
  21004e:	48 89 ce             	mov    rsi,rcx
  210051:	e8 aa 1c 01 00       	call   221d00 <memcpy>
  210056:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  21005d:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  210064:	5d                   	pop    rbp
  210065:	c3                   	ret    
  210066:	48 8d bd 88 fe ff ff 	lea    rdi,[rbp-0x178]
  21006d:	45 31 c0             	xor    r8d,r8d
  210070:	b8 01 00 00 00       	mov    eax,0x1
  210075:	41 89 c1             	mov    r9d,eax
        DW.FORM_data1 => parseFormValueConstant(allocator, in_stream, false, 1),
  210078:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  21007f:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  210086:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  21008d:	e8 ae 1a 00 00       	call   211b40 <parseFormValueConstant>
  210092:	48 8d 8d 88 fe ff ff 	lea    rcx,[rbp-0x178]
    return switch (form_id) {
  210099:	48 89 8d 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rcx
  2100a0:	e9 c9 0c 00 00       	jmp    210d6e <parseFormValue+0x101e>
  2100a5:	48 8d bd 60 fe ff ff 	lea    rdi,[rbp-0x1a0]
  2100ac:	45 31 c0             	xor    r8d,r8d
  2100af:	b8 02 00 00 00       	mov    eax,0x2
  2100b4:	41 89 c1             	mov    r9d,eax
        DW.FORM_data2 => parseFormValueConstant(allocator, in_stream, false, 2),
  2100b7:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  2100be:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  2100c5:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  2100cc:	e8 6f 1a 00 00       	call   211b40 <parseFormValueConstant>
  2100d1:	48 8d 8d 60 fe ff ff 	lea    rcx,[rbp-0x1a0]
    return switch (form_id) {
  2100d8:	48 89 8d 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rcx
  2100df:	e9 8a 0c 00 00       	jmp    210d6e <parseFormValue+0x101e>
  2100e4:	48 8d bd 38 fe ff ff 	lea    rdi,[rbp-0x1c8]
  2100eb:	45 31 c0             	xor    r8d,r8d
  2100ee:	b8 04 00 00 00       	mov    eax,0x4
  2100f3:	41 89 c1             	mov    r9d,eax
        DW.FORM_data4 => parseFormValueConstant(allocator, in_stream, false, 4),
  2100f6:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  2100fd:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  210104:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  21010b:	e8 30 1a 00 00       	call   211b40 <parseFormValueConstant>
  210110:	48 8d 8d 38 fe ff ff 	lea    rcx,[rbp-0x1c8]
    return switch (form_id) {
  210117:	48 89 8d 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rcx
  21011e:	e9 4b 0c 00 00       	jmp    210d6e <parseFormValue+0x101e>
  210123:	48 8d bd 10 fe ff ff 	lea    rdi,[rbp-0x1f0]
  21012a:	45 31 c0             	xor    r8d,r8d
  21012d:	b8 08 00 00 00       	mov    eax,0x8
  210132:	41 89 c1             	mov    r9d,eax
        DW.FORM_data8 => parseFormValueConstant(allocator, in_stream, false, 8),
  210135:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  21013c:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  210143:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  21014a:	e8 f1 19 00 00       	call   211b40 <parseFormValueConstant>
  21014f:	48 8d 8d 10 fe ff ff 	lea    rcx,[rbp-0x1f0]
    return switch (form_id) {
  210156:	48 89 8d 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rcx
  21015d:	e9 0c 0c 00 00       	jmp    210d6e <parseFormValue+0x101e>
  210162:	48 8d bd 00 fe ff ff 	lea    rdi,[rbp-0x200]
            const block_len = try readULeb128(in_stream);
  210169:	48 8b 95 a0 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x860]
  210170:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  210177:	e8 74 d7 ff ff       	call   20d8f0 <readULeb128>
  21017c:	66 83 bd 00 fe ff ff 	cmp    WORD PTR [rbp-0x200],0x0
  210183:	00 
  210184:	74 63                	je     2101e9 <parseFormValue+0x499>
  210186:	66 8b 85 00 fe ff ff 	mov    ax,WORD PTR [rbp-0x200]
  21018d:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  210194:	66 89 85 fe f6 ff ff 	mov    WORD PTR [rbp-0x902],ax
  21019b:	e8 b0 42 ff ff       	call   204450 <__zig_return_error>
  2101a0:	b9 28 00 00 00       	mov    ecx,0x28
  2101a5:	89 ca                	mov    edx,ecx
  2101a7:	48 8d bd c8 fd ff ff 	lea    rdi,[rbp-0x238]
  2101ae:	66 8b 85 fe f6 ff ff 	mov    ax,WORD PTR [rbp-0x902]
  2101b5:	66 89 85 c8 fd ff ff 	mov    WORD PTR [rbp-0x238],ax
  2101bc:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  2101c3:	48 89 bd f0 f6 ff ff 	mov    QWORD PTR [rbp-0x910],rdi
  2101ca:	48 89 f7             	mov    rdi,rsi
  2101cd:	48 8b b5 f0 f6 ff ff 	mov    rsi,QWORD PTR [rbp-0x910]
  2101d4:	e8 27 1b 01 00       	call   221d00 <memcpy>
  2101d9:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  2101e0:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  2101e7:	5d                   	pop    rbp
  2101e8:	c3                   	ret    
  2101e9:	48 8d 85 a0 fd ff ff 	lea    rax,[rbp-0x260]
  2101f0:	48 8b 8d 08 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1f8]
  2101f7:	48 89 8d 80 f7 ff ff 	mov    QWORD PTR [rbp-0x880],rcx
            const signed = form_id == DW.FORM_sdata;
  2101fe:	48 83 bd 98 f7 ff ff 	cmp    QWORD PTR [rbp-0x868],0xd
  210205:	0d 
  210206:	0f 94 c2             	sete   dl
  210209:	80 e2 01             	and    dl,0x1
  21020c:	88 95 7f f7 ff ff    	mov    BYTE PTR [rbp-0x881],dl
            return parseFormValueConstant(allocator, in_stream, signed, block_len);
  210212:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  210219:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  210220:	40 8a b5 7f f7 ff ff 	mov    sil,BYTE PTR [rbp-0x881]
  210227:	4c 8b 8d 80 f7 ff ff 	mov    r9,QWORD PTR [rbp-0x880]
  21022e:	44 0f b6 c6          	movzx  r8d,sil
  210232:	48 8d bd a0 fd ff ff 	lea    rdi,[rbp-0x260]
  210239:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  210240:	48 89 85 e8 f6 ff ff 	mov    QWORD PTR [rbp-0x918],rax
  210247:	e8 f4 18 00 00       	call   211b40 <parseFormValueConstant>
  21024c:	66 83 bd a0 fd ff ff 	cmp    WORD PTR [rbp-0x260],0x0
  210253:	00 
  210254:	74 0e                	je     210264 <parseFormValue+0x514>
  210256:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  21025d:	e8 ee 41 ff ff       	call   204450 <__zig_return_error>
  210262:	eb 02                	jmp    210266 <parseFormValue+0x516>
  210264:	eb 00                	jmp    210266 <parseFormValue+0x516>
  210266:	b8 28 00 00 00       	mov    eax,0x28
  21026b:	89 c2                	mov    edx,eax
  21026d:	48 8d 8d a0 fd ff ff 	lea    rcx,[rbp-0x260]
  210274:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  21027b:	48 89 f7             	mov    rdi,rsi
  21027e:	48 89 ce             	mov    rsi,rcx
  210281:	e8 7a 1a 01 00       	call   221d00 <memcpy>
  210286:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  21028d:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  210294:	5d                   	pop    rbp
  210295:	c3                   	ret    
  210296:	48 8d bd 90 fd ff ff 	lea    rdi,[rbp-0x270]
            const size = try readULeb128(in_stream);
  21029d:	48 8b 95 a0 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x860]
  2102a4:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  2102ab:	e8 40 d6 ff ff       	call   20d8f0 <readULeb128>
  2102b0:	66 83 bd 90 fd ff ff 	cmp    WORD PTR [rbp-0x270],0x0
  2102b7:	00 
  2102b8:	74 63                	je     21031d <parseFormValue+0x5cd>
  2102ba:	66 8b 85 90 fd ff ff 	mov    ax,WORD PTR [rbp-0x270]
  2102c1:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  2102c8:	66 89 85 e6 f6 ff ff 	mov    WORD PTR [rbp-0x91a],ax
  2102cf:	e8 7c 41 ff ff       	call   204450 <__zig_return_error>
  2102d4:	b9 28 00 00 00       	mov    ecx,0x28
  2102d9:	89 ca                	mov    edx,ecx
  2102db:	48 8d bd 58 fd ff ff 	lea    rdi,[rbp-0x2a8]
  2102e2:	66 8b 85 e6 f6 ff ff 	mov    ax,WORD PTR [rbp-0x91a]
  2102e9:	66 89 85 58 fd ff ff 	mov    WORD PTR [rbp-0x2a8],ax
  2102f0:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  2102f7:	48 89 bd d8 f6 ff ff 	mov    QWORD PTR [rbp-0x928],rdi
  2102fe:	48 89 f7             	mov    rdi,rsi
  210301:	48 8b b5 d8 f6 ff ff 	mov    rsi,QWORD PTR [rbp-0x928]
  210308:	e8 f3 19 01 00       	call   221d00 <memcpy>
  21030d:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  210314:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  21031b:	5d                   	pop    rbp
  21031c:	c3                   	ret    
  21031d:	48 8d bd 40 fd ff ff 	lea    rdi,[rbp-0x2c0]
  210324:	48 8b 85 98 fd ff ff 	mov    rax,QWORD PTR [rbp-0x268]
  21032b:	48 89 85 70 f7 ff ff 	mov    QWORD PTR [rbp-0x890],rax
            const buf = try readAllocBytes(allocator, in_stream, size);
  210332:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  210339:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  210340:	4c 8b 85 70 f7 ff ff 	mov    r8,QWORD PTR [rbp-0x890]
  210347:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  21034e:	e8 6d 19 00 00       	call   211cc0 <readAllocBytes>
  210353:	66 83 bd 40 fd ff ff 	cmp    WORD PTR [rbp-0x2c0],0x0
  21035a:	00 
  21035b:	74 63                	je     2103c0 <parseFormValue+0x670>
  21035d:	66 8b 85 40 fd ff ff 	mov    ax,WORD PTR [rbp-0x2c0]
  210364:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  21036b:	66 89 85 d6 f6 ff ff 	mov    WORD PTR [rbp-0x92a],ax
  210372:	e8 d9 40 ff ff       	call   204450 <__zig_return_error>
  210377:	b9 28 00 00 00       	mov    ecx,0x28
  21037c:	89 ca                	mov    edx,ecx
  21037e:	48 8d bd 00 fd ff ff 	lea    rdi,[rbp-0x300]
  210385:	66 8b 85 d6 f6 ff ff 	mov    ax,WORD PTR [rbp-0x92a]
  21038c:	66 89 85 00 fd ff ff 	mov    WORD PTR [rbp-0x300],ax
  210393:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  21039a:	48 89 bd c8 f6 ff ff 	mov    QWORD PTR [rbp-0x938],rdi
  2103a1:	48 89 f7             	mov    rdi,rsi
  2103a4:	48 8b b5 c8 f6 ff ff 	mov    rsi,QWORD PTR [rbp-0x938]
  2103ab:	e8 50 19 01 00       	call   221d00 <memcpy>
  2103b0:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  2103b7:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  2103be:	5d                   	pop    rbp
  2103bf:	c3                   	ret    
  2103c0:	b8 28 00 00 00       	mov    eax,0x28
  2103c5:	89 c2                	mov    edx,eax
  2103c7:	48 8d 8d b8 fc ff ff 	lea    rcx,[rbp-0x348]
  2103ce:	c5 fa 6f 85 48 fd ff 	vmovdqu xmm0,XMMWORD PTR [rbp-0x2b8]
  2103d5:	ff 
  2103d6:	c5 f9 7f 85 60 f7 ff 	vmovdqa XMMWORD PTR [rbp-0x8a0],xmm0
  2103dd:	ff 
            return FormValue{ .ExprLoc = buf };
  2103de:	c6 85 f8 fc ff ff 03 	mov    BYTE PTR [rbp-0x308],0x3
  2103e5:	48 8b b5 60 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8a0]
  2103ec:	48 89 b5 e0 fc ff ff 	mov    QWORD PTR [rbp-0x320],rsi
  2103f3:	48 8b b5 68 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x898]
  2103fa:	48 89 b5 e8 fc ff ff 	mov    QWORD PTR [rbp-0x318],rsi
  210401:	66 c7 85 b8 fc ff ff 	mov    WORD PTR [rbp-0x348],0x0
  210408:	00 00 
  21040a:	48 8b b5 e0 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x320]
  210411:	48 89 b5 c0 fc ff ff 	mov    QWORD PTR [rbp-0x340],rsi
  210418:	48 8b b5 e8 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x318]
  21041f:	48 89 b5 c8 fc ff ff 	mov    QWORD PTR [rbp-0x338],rsi
  210426:	48 8b b5 f0 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x310]
  21042d:	48 89 b5 d0 fc ff ff 	mov    QWORD PTR [rbp-0x330],rsi
  210434:	48 8b b5 f8 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x308]
  21043b:	48 89 b5 d8 fc ff ff 	mov    QWORD PTR [rbp-0x328],rsi
  210442:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  210449:	48 89 f7             	mov    rdi,rsi
  21044c:	48 89 ce             	mov    rsi,rcx
  21044f:	e8 ac 18 01 00       	call   221d00 <memcpy>
  210454:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  21045b:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  210462:	5d                   	pop    rbp
  210463:	c3                   	ret    
  210464:	48 8d bd b0 fc ff ff 	lea    rdi,[rbp-0x350]
        DW.FORM_flag => FormValue{ .Flag = (try in_stream.readByte()) != 0 },
  21046b:	48 8b 95 a0 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x860]
  210472:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  210479:	e8 c2 9f ff ff       	call   20a440 <InStream(ReadError)_readByte>
  21047e:	66 83 bd b0 fc ff ff 	cmp    WORD PTR [rbp-0x350],0x0
  210485:	00 
  210486:	74 63                	je     2104eb <parseFormValue+0x79b>
  210488:	66 8b 85 b0 fc ff ff 	mov    ax,WORD PTR [rbp-0x350]
  21048f:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  210496:	66 89 85 c6 f6 ff ff 	mov    WORD PTR [rbp-0x93a],ax
  21049d:	e8 ae 3f ff ff       	call   204450 <__zig_return_error>
  2104a2:	b9 28 00 00 00       	mov    ecx,0x28
  2104a7:	89 ca                	mov    edx,ecx
  2104a9:	48 8d bd 80 fc ff ff 	lea    rdi,[rbp-0x380]
  2104b0:	66 8b 85 c6 f6 ff ff 	mov    ax,WORD PTR [rbp-0x93a]
  2104b7:	66 89 85 80 fc ff ff 	mov    WORD PTR [rbp-0x380],ax
  2104be:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  2104c5:	48 89 bd b8 f6 ff ff 	mov    QWORD PTR [rbp-0x948],rdi
  2104cc:	48 89 f7             	mov    rdi,rsi
  2104cf:	48 8b b5 b8 f6 ff ff 	mov    rsi,QWORD PTR [rbp-0x948]
  2104d6:	e8 25 18 01 00       	call   221d00 <memcpy>
  2104db:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  2104e2:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  2104e9:	5d                   	pop    rbp
  2104ea:	c3                   	ret    
  2104eb:	48 8d 85 78 f8 ff ff 	lea    rax,[rbp-0x788]
  2104f2:	8a 8d b2 fc ff ff    	mov    cl,BYTE PTR [rbp-0x34e]
  2104f8:	84 c9                	test   cl,cl
  2104fa:	0f 95 c1             	setne  cl
  2104fd:	c6 85 78 fc ff ff 04 	mov    BYTE PTR [rbp-0x388],0x4
  210504:	80 e1 01             	and    cl,0x1
  210507:	88 8d 60 fc ff ff    	mov    BYTE PTR [rbp-0x3a0],cl
  21050d:	66 c7 85 78 f8 ff ff 	mov    WORD PTR [rbp-0x788],0x0
  210514:	00 00 
  210516:	48 8b 95 60 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x3a0]
  21051d:	48 89 95 80 f8 ff ff 	mov    QWORD PTR [rbp-0x780],rdx
  210524:	48 8b 95 68 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x398]
  21052b:	48 89 95 88 f8 ff ff 	mov    QWORD PTR [rbp-0x778],rdx
  210532:	48 8b 95 70 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x390]
  210539:	48 89 95 90 f8 ff ff 	mov    QWORD PTR [rbp-0x770],rdx
  210540:	48 8b 95 78 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x388]
  210547:	48 89 95 98 f8 ff ff 	mov    QWORD PTR [rbp-0x768],rdx
    return switch (form_id) {
  21054e:	48 89 85 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rax
  210555:	e9 14 08 00 00       	jmp    210d6e <parseFormValue+0x101e>
  21055a:	48 8d 05 df 04 ff ff 	lea    rax,[rip+0xffffffffffff04df]        # 200a40 <__unnamed_88>
  210561:	48 89 85 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rax
  210568:	e9 01 08 00 00       	jmp    210d6e <parseFormValue+0x101e>
  21056d:	48 8d 85 50 fc ff ff 	lea    rax,[rbp-0x3b0]
        DW.FORM_sec_offset => FormValue{ .SecOffset = try parseFormValueDwarfOffsetSize(in_stream, is_64) },
  210574:	48 8b 95 a0 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x860]
  21057b:	8a 8d 97 f7 ff ff    	mov    cl,BYTE PTR [rbp-0x869]
  210581:	0f b6 c9             	movzx  ecx,cl
  210584:	48 8d bd 50 fc ff ff 	lea    rdi,[rbp-0x3b0]
  21058b:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  210592:	48 89 85 b0 f6 ff ff 	mov    QWORD PTR [rbp-0x950],rax
  210599:	e8 32 19 00 00       	call   211ed0 <parseFormValueDwarfOffsetSize>
  21059e:	66 83 bd 50 fc ff ff 	cmp    WORD PTR [rbp-0x3b0],0x0
  2105a5:	00 
  2105a6:	74 63                	je     21060b <parseFormValue+0x8bb>
  2105a8:	66 8b 85 50 fc ff ff 	mov    ax,WORD PTR [rbp-0x3b0]
  2105af:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  2105b6:	66 89 85 ae f6 ff ff 	mov    WORD PTR [rbp-0x952],ax
  2105bd:	e8 8e 3e ff ff       	call   204450 <__zig_return_error>
  2105c2:	b9 28 00 00 00       	mov    ecx,0x28
  2105c7:	89 ca                	mov    edx,ecx
  2105c9:	48 8d bd 18 fc ff ff 	lea    rdi,[rbp-0x3e8]
  2105d0:	66 8b 85 ae f6 ff ff 	mov    ax,WORD PTR [rbp-0x952]
  2105d7:	66 89 85 18 fc ff ff 	mov    WORD PTR [rbp-0x3e8],ax
  2105de:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  2105e5:	48 89 bd a0 f6 ff ff 	mov    QWORD PTR [rbp-0x960],rdi
  2105ec:	48 89 f7             	mov    rdi,rsi
  2105ef:	48 8b b5 a0 f6 ff ff 	mov    rsi,QWORD PTR [rbp-0x960]
  2105f6:	e8 05 17 01 00       	call   221d00 <memcpy>
  2105fb:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  210602:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  210609:	5d                   	pop    rbp
  21060a:	c3                   	ret    
  21060b:	48 8d 85 50 f8 ff ff 	lea    rax,[rbp-0x7b0]
  210612:	48 8b 8d 58 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3a8]
  210619:	c6 85 10 fc ff ff 05 	mov    BYTE PTR [rbp-0x3f0],0x5
  210620:	48 89 8d f8 fb ff ff 	mov    QWORD PTR [rbp-0x408],rcx
  210627:	66 c7 85 50 f8 ff ff 	mov    WORD PTR [rbp-0x7b0],0x0
  21062e:	00 00 
  210630:	48 8b 8d f8 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x408]
  210637:	48 89 8d 58 f8 ff ff 	mov    QWORD PTR [rbp-0x7a8],rcx
  21063e:	48 8b 8d 00 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x400]
  210645:	48 89 8d 60 f8 ff ff 	mov    QWORD PTR [rbp-0x7a0],rcx
  21064c:	48 8b 8d 08 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3f8]
  210653:	48 89 8d 68 f8 ff ff 	mov    QWORD PTR [rbp-0x798],rcx
  21065a:	48 8b 8d 10 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3f0]
  210661:	48 89 8d 70 f8 ff ff 	mov    QWORD PTR [rbp-0x790],rcx
    return switch (form_id) {
  210668:	48 89 85 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rax
  21066f:	e9 fa 06 00 00       	jmp    210d6e <parseFormValue+0x101e>
  210674:	48 8d bd d0 fb ff ff 	lea    rdi,[rbp-0x430]
        DW.FORM_ref1 => parseFormValueRef(allocator, in_stream, u8),
  21067b:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  210682:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  210689:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  210690:	e8 7b 19 00 00       	call   212010 <parseFormValueRef>
  210695:	48 8d 8d d0 fb ff ff 	lea    rcx,[rbp-0x430]
    return switch (form_id) {
  21069c:	48 89 8d 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rcx
  2106a3:	e9 c6 06 00 00       	jmp    210d6e <parseFormValue+0x101e>
  2106a8:	48 8d bd a8 fb ff ff 	lea    rdi,[rbp-0x458]
        DW.FORM_ref2 => parseFormValueRef(allocator, in_stream, u16),
  2106af:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  2106b6:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  2106bd:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  2106c4:	e8 47 1a 00 00       	call   212110 <parseFormValueRef.33>
  2106c9:	48 8d 8d a8 fb ff ff 	lea    rcx,[rbp-0x458]
    return switch (form_id) {
  2106d0:	48 89 8d 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rcx
  2106d7:	e9 92 06 00 00       	jmp    210d6e <parseFormValue+0x101e>
  2106dc:	48 8d bd 80 fb ff ff 	lea    rdi,[rbp-0x480]
        DW.FORM_ref4 => parseFormValueRef(allocator, in_stream, u32),
  2106e3:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  2106ea:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  2106f1:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  2106f8:	e8 13 1b 00 00       	call   212210 <parseFormValueRef.34>
  2106fd:	48 8d 8d 80 fb ff ff 	lea    rcx,[rbp-0x480]
    return switch (form_id) {
  210704:	48 89 8d 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rcx
  21070b:	e9 5e 06 00 00       	jmp    210d6e <parseFormValue+0x101e>
  210710:	48 8d bd 58 fb ff ff 	lea    rdi,[rbp-0x4a8]
        DW.FORM_ref8 => parseFormValueRef(allocator, in_stream, u64),
  210717:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  21071e:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  210725:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  21072c:	e8 df 1b 00 00       	call   212310 <parseFormValueRef.35>
  210731:	48 8d 8d 58 fb ff ff 	lea    rcx,[rbp-0x4a8]
    return switch (form_id) {
  210738:	48 89 8d 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rcx
  21073f:	e9 2a 06 00 00       	jmp    210d6e <parseFormValue+0x101e>
  210744:	48 8d bd 48 fb ff ff 	lea    rdi,[rbp-0x4b8]
            const ref_len = try readULeb128(in_stream);
  21074b:	48 8b 95 a0 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x860]
  210752:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  210759:	e8 92 d1 ff ff       	call   20d8f0 <readULeb128>
  21075e:	66 83 bd 48 fb ff ff 	cmp    WORD PTR [rbp-0x4b8],0x0
  210765:	00 
  210766:	74 63                	je     2107cb <parseFormValue+0xa7b>
  210768:	66 8b 85 48 fb ff ff 	mov    ax,WORD PTR [rbp-0x4b8]
  21076f:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  210776:	66 89 85 9e f6 ff ff 	mov    WORD PTR [rbp-0x962],ax
  21077d:	e8 ce 3c ff ff       	call   204450 <__zig_return_error>
  210782:	b9 28 00 00 00       	mov    ecx,0x28
  210787:	89 ca                	mov    edx,ecx
  210789:	48 8d bd 10 fb ff ff 	lea    rdi,[rbp-0x4f0]
  210790:	66 8b 85 9e f6 ff ff 	mov    ax,WORD PTR [rbp-0x962]
  210797:	66 89 85 10 fb ff ff 	mov    WORD PTR [rbp-0x4f0],ax
  21079e:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  2107a5:	48 89 bd 90 f6 ff ff 	mov    QWORD PTR [rbp-0x970],rdi
  2107ac:	48 89 f7             	mov    rdi,rsi
  2107af:	48 8b b5 90 f6 ff ff 	mov    rsi,QWORD PTR [rbp-0x970]
  2107b6:	e8 45 15 01 00       	call   221d00 <memcpy>
  2107bb:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  2107c2:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  2107c9:	5d                   	pop    rbp
  2107ca:	c3                   	ret    
  2107cb:	48 8d bd e8 fa ff ff 	lea    rdi,[rbp-0x518]
  2107d2:	48 8b 85 50 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4b0]
  2107d9:	48 89 85 58 f7 ff ff 	mov    QWORD PTR [rbp-0x8a8],rax
            return parseFormValueRefLen(allocator, in_stream, ref_len);
  2107e0:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  2107e7:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  2107ee:	4c 8b 85 58 f7 ff ff 	mov    r8,QWORD PTR [rbp-0x8a8]
  2107f5:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  2107fc:	e8 1f 1c 00 00       	call   212420 <parseFormValueRefLen>
  210801:	66 83 bd e8 fa ff ff 	cmp    WORD PTR [rbp-0x518],0x0
  210808:	00 
  210809:	74 0e                	je     210819 <parseFormValue+0xac9>
  21080b:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  210812:	e8 39 3c ff ff       	call   204450 <__zig_return_error>
  210817:	eb 02                	jmp    21081b <parseFormValue+0xacb>
  210819:	eb 00                	jmp    21081b <parseFormValue+0xacb>
  21081b:	b8 28 00 00 00       	mov    eax,0x28
  210820:	89 c2                	mov    edx,eax
  210822:	48 8d 8d e8 fa ff ff 	lea    rcx,[rbp-0x518]
  210829:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  210830:	48 89 f7             	mov    rdi,rsi
  210833:	48 89 ce             	mov    rsi,rcx
  210836:	e8 c5 14 01 00       	call   221d00 <memcpy>
  21083b:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  210842:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  210849:	5d                   	pop    rbp
  21084a:	c3                   	ret    
  21084b:	48 8d 85 d8 fa ff ff 	lea    rax,[rbp-0x528]
        DW.FORM_ref_addr => FormValue{ .RefAddr = try parseFormValueDwarfOffsetSize(in_stream, is_64) },
  210852:	48 8b 95 a0 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x860]
  210859:	8a 8d 97 f7 ff ff    	mov    cl,BYTE PTR [rbp-0x869]
  21085f:	0f b6 c9             	movzx  ecx,cl
  210862:	48 8d bd d8 fa ff ff 	lea    rdi,[rbp-0x528]
  210869:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  210870:	48 89 85 88 f6 ff ff 	mov    QWORD PTR [rbp-0x978],rax
  210877:	e8 54 16 00 00       	call   211ed0 <parseFormValueDwarfOffsetSize>
  21087c:	66 83 bd d8 fa ff ff 	cmp    WORD PTR [rbp-0x528],0x0
  210883:	00 
  210884:	74 63                	je     2108e9 <parseFormValue+0xb99>
  210886:	66 8b 85 d8 fa ff ff 	mov    ax,WORD PTR [rbp-0x528]
  21088d:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  210894:	66 89 85 86 f6 ff ff 	mov    WORD PTR [rbp-0x97a],ax
  21089b:	e8 b0 3b ff ff       	call   204450 <__zig_return_error>
  2108a0:	b9 28 00 00 00       	mov    ecx,0x28
  2108a5:	89 ca                	mov    edx,ecx
  2108a7:	48 8d bd a0 fa ff ff 	lea    rdi,[rbp-0x560]
  2108ae:	66 8b 85 86 f6 ff ff 	mov    ax,WORD PTR [rbp-0x97a]
  2108b5:	66 89 85 a0 fa ff ff 	mov    WORD PTR [rbp-0x560],ax
  2108bc:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  2108c3:	48 89 bd 78 f6 ff ff 	mov    QWORD PTR [rbp-0x988],rdi
  2108ca:	48 89 f7             	mov    rdi,rsi
  2108cd:	48 8b b5 78 f6 ff ff 	mov    rsi,QWORD PTR [rbp-0x988]
  2108d4:	e8 27 14 01 00       	call   221d00 <memcpy>
  2108d9:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  2108e0:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  2108e7:	5d                   	pop    rbp
  2108e8:	c3                   	ret    
  2108e9:	48 8d 85 28 f8 ff ff 	lea    rax,[rbp-0x7d8]
  2108f0:	48 8b 8d e0 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x520]
  2108f7:	c6 85 98 fa ff ff 07 	mov    BYTE PTR [rbp-0x568],0x7
  2108fe:	48 89 8d 80 fa ff ff 	mov    QWORD PTR [rbp-0x580],rcx
  210905:	66 c7 85 28 f8 ff ff 	mov    WORD PTR [rbp-0x7d8],0x0
  21090c:	00 00 
  21090e:	48 8b 8d 80 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x580]
  210915:	48 89 8d 30 f8 ff ff 	mov    QWORD PTR [rbp-0x7d0],rcx
  21091c:	48 8b 8d 88 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x578]
  210923:	48 89 8d 38 f8 ff ff 	mov    QWORD PTR [rbp-0x7c8],rcx
  21092a:	48 8b 8d 90 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x570]
  210931:	48 89 8d 40 f8 ff ff 	mov    QWORD PTR [rbp-0x7c0],rcx
  210938:	48 8b 8d 98 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x568]
  21093f:	48 89 8d 48 f8 ff ff 	mov    QWORD PTR [rbp-0x7b8],rcx
    return switch (form_id) {
  210946:	48 89 85 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rax
  21094d:	e9 1c 04 00 00       	jmp    210d6e <parseFormValue+0x101e>
  210952:	48 8d bd 70 fa ff ff 	lea    rdi,[rbp-0x590]
        DW.FORM_ref_sig8 => FormValue{ .RefSig8 = try in_stream.readIntLe(u64) },
  210959:	48 8b 95 a0 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x860]
  210960:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  210967:	e8 94 c5 ff ff       	call   20cf00 <InStream(ReadError)_readIntLe.21>
  21096c:	66 83 bd 70 fa ff ff 	cmp    WORD PTR [rbp-0x590],0x0
  210973:	00 
  210974:	74 63                	je     2109d9 <parseFormValue+0xc89>
  210976:	66 8b 85 70 fa ff ff 	mov    ax,WORD PTR [rbp-0x590]
  21097d:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  210984:	66 89 85 76 f6 ff ff 	mov    WORD PTR [rbp-0x98a],ax
  21098b:	e8 c0 3a ff ff       	call   204450 <__zig_return_error>
  210990:	b9 28 00 00 00       	mov    ecx,0x28
  210995:	89 ca                	mov    edx,ecx
  210997:	48 8d bd 38 fa ff ff 	lea    rdi,[rbp-0x5c8]
  21099e:	66 8b 85 76 f6 ff ff 	mov    ax,WORD PTR [rbp-0x98a]
  2109a5:	66 89 85 38 fa ff ff 	mov    WORD PTR [rbp-0x5c8],ax
  2109ac:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  2109b3:	48 89 bd 68 f6 ff ff 	mov    QWORD PTR [rbp-0x998],rdi
  2109ba:	48 89 f7             	mov    rdi,rsi
  2109bd:	48 8b b5 68 f6 ff ff 	mov    rsi,QWORD PTR [rbp-0x998]
  2109c4:	e8 37 13 01 00       	call   221d00 <memcpy>
  2109c9:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  2109d0:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  2109d7:	5d                   	pop    rbp
  2109d8:	c3                   	ret    
  2109d9:	48 8d 85 00 f8 ff ff 	lea    rax,[rbp-0x800]
  2109e0:	48 8b 8d 78 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x588]
  2109e7:	c6 85 30 fa ff ff 08 	mov    BYTE PTR [rbp-0x5d0],0x8
  2109ee:	48 89 8d 18 fa ff ff 	mov    QWORD PTR [rbp-0x5e8],rcx
  2109f5:	66 c7 85 00 f8 ff ff 	mov    WORD PTR [rbp-0x800],0x0
  2109fc:	00 00 
  2109fe:	48 8b 8d 18 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x5e8]
  210a05:	48 89 8d 08 f8 ff ff 	mov    QWORD PTR [rbp-0x7f8],rcx
  210a0c:	48 8b 8d 20 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x5e0]
  210a13:	48 89 8d 10 f8 ff ff 	mov    QWORD PTR [rbp-0x7f0],rcx
  210a1a:	48 8b 8d 28 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x5d8]
  210a21:	48 89 8d 18 f8 ff ff 	mov    QWORD PTR [rbp-0x7e8],rcx
  210a28:	48 8b 8d 30 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x5d0]
  210a2f:	48 89 8d 20 f8 ff ff 	mov    QWORD PTR [rbp-0x7e0],rcx
    return switch (form_id) {
  210a36:	48 89 85 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rax
  210a3d:	e9 2c 03 00 00       	jmp    210d6e <parseFormValue+0x101e>
  210a42:	48 8d bd 00 fa ff ff 	lea    rdi,[rbp-0x600]
        DW.FORM_string => FormValue{ .String = try readStringRaw(allocator, in_stream) },
  210a49:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  210a50:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  210a57:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  210a5e:	e8 0d 1b 00 00       	call   212570 <readStringRaw>
  210a63:	66 83 bd 00 fa ff ff 	cmp    WORD PTR [rbp-0x600],0x0
  210a6a:	00 
  210a6b:	74 63                	je     210ad0 <parseFormValue+0xd80>
  210a6d:	66 8b 85 00 fa ff ff 	mov    ax,WORD PTR [rbp-0x600]
  210a74:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  210a7b:	66 89 85 66 f6 ff ff 	mov    WORD PTR [rbp-0x99a],ax
  210a82:	e8 c9 39 ff ff       	call   204450 <__zig_return_error>
  210a87:	b9 28 00 00 00       	mov    ecx,0x28
  210a8c:	89 ca                	mov    edx,ecx
  210a8e:	48 8d bd c0 f9 ff ff 	lea    rdi,[rbp-0x640]
  210a95:	66 8b 85 66 f6 ff ff 	mov    ax,WORD PTR [rbp-0x99a]
  210a9c:	66 89 85 c0 f9 ff ff 	mov    WORD PTR [rbp-0x640],ax
  210aa3:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  210aaa:	48 89 bd 58 f6 ff ff 	mov    QWORD PTR [rbp-0x9a8],rdi
  210ab1:	48 89 f7             	mov    rdi,rsi
  210ab4:	48 8b b5 58 f6 ff ff 	mov    rsi,QWORD PTR [rbp-0x9a8]
  210abb:	e8 40 12 01 00       	call   221d00 <memcpy>
  210ac0:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  210ac7:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  210ace:	5d                   	pop    rbp
  210acf:	c3                   	ret    
  210ad0:	48 8d 85 d8 f7 ff ff 	lea    rax,[rbp-0x828]
  210ad7:	c6 85 b8 f9 ff ff 09 	mov    BYTE PTR [rbp-0x648],0x9
  210ade:	48 8b 8d 08 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x5f8]
  210ae5:	48 89 8d a0 f9 ff ff 	mov    QWORD PTR [rbp-0x660],rcx
  210aec:	48 8b 8d 10 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x5f0]
  210af3:	48 89 8d a8 f9 ff ff 	mov    QWORD PTR [rbp-0x658],rcx
  210afa:	66 c7 85 d8 f7 ff ff 	mov    WORD PTR [rbp-0x828],0x0
  210b01:	00 00 
  210b03:	48 8b 8d a0 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x660]
  210b0a:	48 89 8d e0 f7 ff ff 	mov    QWORD PTR [rbp-0x820],rcx
  210b11:	48 8b 8d a8 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x658]
  210b18:	48 89 8d e8 f7 ff ff 	mov    QWORD PTR [rbp-0x818],rcx
  210b1f:	48 8b 8d b0 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x650]
  210b26:	48 89 8d f0 f7 ff ff 	mov    QWORD PTR [rbp-0x810],rcx
  210b2d:	48 8b 8d b8 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x648]
  210b34:	48 89 8d f8 f7 ff ff 	mov    QWORD PTR [rbp-0x808],rcx
    return switch (form_id) {
  210b3b:	48 89 85 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rax
  210b42:	e9 27 02 00 00       	jmp    210d6e <parseFormValue+0x101e>
  210b47:	48 8d 85 90 f9 ff ff 	lea    rax,[rbp-0x670]
        DW.FORM_strp => FormValue{ .StrPtr = try parseFormValueDwarfOffsetSize(in_stream, is_64) },
  210b4e:	48 8b 95 a0 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x860]
  210b55:	8a 8d 97 f7 ff ff    	mov    cl,BYTE PTR [rbp-0x869]
  210b5b:	0f b6 c9             	movzx  ecx,cl
  210b5e:	48 8d bd 90 f9 ff ff 	lea    rdi,[rbp-0x670]
  210b65:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  210b6c:	48 89 85 50 f6 ff ff 	mov    QWORD PTR [rbp-0x9b0],rax
  210b73:	e8 58 13 00 00       	call   211ed0 <parseFormValueDwarfOffsetSize>
  210b78:	66 83 bd 90 f9 ff ff 	cmp    WORD PTR [rbp-0x670],0x0
  210b7f:	00 
  210b80:	74 63                	je     210be5 <parseFormValue+0xe95>
  210b82:	66 8b 85 90 f9 ff ff 	mov    ax,WORD PTR [rbp-0x670]
  210b89:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  210b90:	66 89 85 4e f6 ff ff 	mov    WORD PTR [rbp-0x9b2],ax
  210b97:	e8 b4 38 ff ff       	call   204450 <__zig_return_error>
  210b9c:	b9 28 00 00 00       	mov    ecx,0x28
  210ba1:	89 ca                	mov    edx,ecx
  210ba3:	48 8d bd 58 f9 ff ff 	lea    rdi,[rbp-0x6a8]
  210baa:	66 8b 85 4e f6 ff ff 	mov    ax,WORD PTR [rbp-0x9b2]
  210bb1:	66 89 85 58 f9 ff ff 	mov    WORD PTR [rbp-0x6a8],ax
  210bb8:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  210bbf:	48 89 bd 40 f6 ff ff 	mov    QWORD PTR [rbp-0x9c0],rdi
  210bc6:	48 89 f7             	mov    rdi,rsi
  210bc9:	48 8b b5 40 f6 ff ff 	mov    rsi,QWORD PTR [rbp-0x9c0]
  210bd0:	e8 2b 11 01 00       	call   221d00 <memcpy>
  210bd5:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  210bdc:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  210be3:	5d                   	pop    rbp
  210be4:	c3                   	ret    
  210be5:	48 8d 85 b0 f7 ff ff 	lea    rax,[rbp-0x850]
  210bec:	48 8b 8d 98 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x668]
  210bf3:	c6 85 50 f9 ff ff 0a 	mov    BYTE PTR [rbp-0x6b0],0xa
  210bfa:	48 89 8d 38 f9 ff ff 	mov    QWORD PTR [rbp-0x6c8],rcx
  210c01:	66 c7 85 b0 f7 ff ff 	mov    WORD PTR [rbp-0x850],0x0
  210c08:	00 00 
  210c0a:	48 8b 8d 38 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x6c8]
  210c11:	48 89 8d b8 f7 ff ff 	mov    QWORD PTR [rbp-0x848],rcx
  210c18:	48 8b 8d 40 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x6c0]
  210c1f:	48 89 8d c0 f7 ff ff 	mov    QWORD PTR [rbp-0x840],rcx
  210c26:	48 8b 8d 48 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x6b8]
  210c2d:	48 89 8d c8 f7 ff ff 	mov    QWORD PTR [rbp-0x838],rcx
  210c34:	48 8b 8d 50 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x6b0]
  210c3b:	48 89 8d d0 f7 ff ff 	mov    QWORD PTR [rbp-0x830],rcx
    return switch (form_id) {
  210c42:	48 89 85 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rax
  210c49:	e9 20 01 00 00       	jmp    210d6e <parseFormValue+0x101e>
  210c4e:	48 8d bd 28 f9 ff ff 	lea    rdi,[rbp-0x6d8]
            const child_form_id = try readULeb128(in_stream);
  210c55:	48 8b 95 a0 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x860]
  210c5c:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  210c63:	e8 88 cc ff ff       	call   20d8f0 <readULeb128>
  210c68:	66 83 bd 28 f9 ff ff 	cmp    WORD PTR [rbp-0x6d8],0x0
  210c6f:	00 
  210c70:	74 63                	je     210cd5 <parseFormValue+0xf85>
  210c72:	66 8b 85 28 f9 ff ff 	mov    ax,WORD PTR [rbp-0x6d8]
  210c79:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  210c80:	66 89 85 3e f6 ff ff 	mov    WORD PTR [rbp-0x9c2],ax
  210c87:	e8 c4 37 ff ff       	call   204450 <__zig_return_error>
  210c8c:	b9 28 00 00 00       	mov    ecx,0x28
  210c91:	89 ca                	mov    edx,ecx
  210c93:	48 8d bd f0 f8 ff ff 	lea    rdi,[rbp-0x710]
  210c9a:	66 8b 85 3e f6 ff ff 	mov    ax,WORD PTR [rbp-0x9c2]
  210ca1:	66 89 85 f0 f8 ff ff 	mov    WORD PTR [rbp-0x710],ax
  210ca8:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  210caf:	48 89 bd 30 f6 ff ff 	mov    QWORD PTR [rbp-0x9d0],rdi
  210cb6:	48 89 f7             	mov    rdi,rsi
  210cb9:	48 8b b5 30 f6 ff ff 	mov    rsi,QWORD PTR [rbp-0x9d0]
  210cc0:	e8 3b 10 01 00       	call   221d00 <memcpy>
  210cc5:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  210ccc:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  210cd3:	5d                   	pop    rbp
  210cd4:	c3                   	ret    
  210cd5:	48 8d 85 c8 f8 ff ff 	lea    rax,[rbp-0x738]
  210cdc:	48 8b 8d 30 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x6d0]
  210ce3:	48 89 8d 50 f7 ff ff 	mov    QWORD PTR [rbp-0x8b0],rcx
            return parseFormValue(allocator, in_stream, child_form_id, is_64);
  210cea:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  210cf1:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  210cf8:	4c 8b 85 50 f7 ff ff 	mov    r8,QWORD PTR [rbp-0x8b0]
  210cff:	40 8a b5 97 f7 ff ff 	mov    sil,BYTE PTR [rbp-0x869]
  210d06:	44 0f b6 ce          	movzx  r9d,sil
  210d0a:	48 8d bd c8 f8 ff ff 	lea    rdi,[rbp-0x738]
  210d11:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  210d18:	48 89 85 28 f6 ff ff 	mov    QWORD PTR [rbp-0x9d8],rax
  210d1f:	e8 2c f0 ff ff       	call   20fd50 <parseFormValue>
  210d24:	66 83 bd c8 f8 ff ff 	cmp    WORD PTR [rbp-0x738],0x0
  210d2b:	00 
  210d2c:	74 0e                	je     210d3c <parseFormValue+0xfec>
  210d2e:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  210d35:	e8 16 37 ff ff       	call   204450 <__zig_return_error>
  210d3a:	eb 02                	jmp    210d3e <parseFormValue+0xfee>
  210d3c:	eb 00                	jmp    210d3e <parseFormValue+0xfee>
  210d3e:	b8 28 00 00 00       	mov    eax,0x28
  210d43:	89 c2                	mov    edx,eax
  210d45:	48 8d 8d c8 f8 ff ff 	lea    rcx,[rbp-0x738]
  210d4c:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  210d53:	48 89 f7             	mov    rdi,rsi
  210d56:	48 89 ce             	mov    rsi,rcx
  210d59:	e8 a2 0f 01 00       	call   221d00 <memcpy>
  210d5e:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  210d65:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  210d6c:	5d                   	pop    rbp
  210d6d:	c3                   	ret    
    return switch (form_id) {
  210d6e:	48 8b 85 20 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8e0]
  210d75:	66 83 38 00          	cmp    WORD PTR [rax],0x0
  210d79:	48 89 85 20 f6 ff ff 	mov    QWORD PTR [rbp-0x9e0],rax
  210d80:	74 0e                	je     210d90 <parseFormValue+0x1040>
  210d82:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  210d89:	e8 c2 36 ff ff       	call   204450 <__zig_return_error>
  210d8e:	eb 02                	jmp    210d92 <parseFormValue+0x1042>
  210d90:	eb 00                	jmp    210d92 <parseFormValue+0x1042>
  210d92:	b8 28 00 00 00       	mov    eax,0x28
  210d97:	89 c2                	mov    edx,eax
  210d99:	48 8b 8d 20 f6 ff ff 	mov    rcx,QWORD PTR [rbp-0x9e0]
  210da0:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  210da7:	48 89 f7             	mov    rdi,rsi
  210daa:	48 89 ce             	mov    rsi,rcx
  210dad:	e8 4e 0f 01 00       	call   221d00 <memcpy>
  210db2:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  210db9:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  210dc0:	5d                   	pop    rbp
  210dc1:	c3                   	ret    
  210dc2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  210dc9:	1f 84 00 00 00 00 00 

0000000000210dd0 <AlignedArrayList(AbbrevTableEntry,1)_toSliceConst>:
        pub fn toSliceConst(self: Self) []align(A) const T {
  210dd0:	55                   	push   rbp
  210dd1:	48 89 e5             	mov    rbp,rsp
  210dd4:	48 83 ec 40          	sub    rsp,0x40
  210dd8:	48 89 f8             	mov    rax,rdi
  210ddb:	31 c9                	xor    ecx,ecx
  210ddd:	89 ca                	mov    edx,ecx
            return self.items[0..self.len];
  210ddf:	4c 8b 46 10          	mov    r8,QWORD PTR [rsi+0x10]
  210de3:	4c 8b 4e 08          	mov    r9,QWORD PTR [rsi+0x8]
  210de7:	4c 39 c2             	cmp    rdx,r8
  210dea:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  210dee:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  210df2:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  210df6:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
  210dfa:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
  210dfe:	76 10                	jbe    210e10 <AlignedArrayList(AbbrevTableEntry,1)_toSliceConst+0x40>
  210e00:	48 8d 3d f9 44 01 00 	lea    rdi,[rip+0x144f9]        # 225300 <__unnamed_4>
  210e07:	31 c0                	xor    eax,eax
  210e09:	89 c6                	mov    esi,eax
  210e0b:	e8 b0 22 ff ff       	call   2030c0 <panic>
  210e10:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  210e14:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  210e18:	48 39 c8             	cmp    rax,rcx
  210e1b:	76 10                	jbe    210e2d <AlignedArrayList(AbbrevTableEntry,1)_toSliceConst+0x5d>
  210e1d:	48 8d 3d dc 44 01 00 	lea    rdi,[rip+0x144dc]        # 225300 <__unnamed_4>
  210e24:	31 c0                	xor    eax,eax
  210e26:	89 c6                	mov    esi,eax
  210e28:	e8 93 22 ff ff       	call   2030c0 <panic>
  210e2d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  210e31:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  210e34:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  210e38:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  210e3c:	48 83 e9 00          	sub    rcx,0x0
  210e40:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  210e44:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  210e48:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  210e4c:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  210e4f:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  210e53:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  210e57:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  210e5b:	48 83 c4 40          	add    rsp,0x40
  210e5f:	5d                   	pop    rbp
  210e60:	c3                   	ret    
  210e61:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  210e68:	0f 1f 84 00 00 00 00 
  210e6f:	00 

0000000000210e70 <AlignedArrayList(Attr,8)_ensureCapacity>:
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  210e70:	55                   	push   rbp
  210e71:	48 89 e5             	mov    rbp,rsp
  210e74:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  210e7b:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  210e7f:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
            var better_capacity = self.items.len;
  210e83:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  210e87:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  210e8b:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
            if (better_capacity >= new_capacity) return;
  210e8f:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  210e93:	48 3b 55 c0          	cmp    rdx,QWORD PTR [rbp-0x40]
  210e97:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  210e9b:	72 11                	jb     210eae <AlignedArrayList(Attr,8)_ensureCapacity+0x3e>
  210e9d:	31 c0                	xor    eax,eax
  210e9f:	66 89 c1             	mov    cx,ax
  210ea2:	66 89 c8             	mov    ax,cx
  210ea5:	48 81 c4 90 00 00 00 	add    rsp,0x90
  210eac:	5d                   	pop    rbp
  210ead:	c3                   	ret    
            while (true) {
  210eae:	eb 00                	jmp    210eb0 <AlignedArrayList(Attr,8)_ensureCapacity+0x40>
  210eb0:	eb 00                	jmp    210eb2 <AlignedArrayList(Attr,8)_ensureCapacity+0x42>
  210eb2:	31 c0                	xor    eax,eax
  210eb4:	88 c1                	mov    cl,al
                better_capacity += better_capacity / 2 + 8;
  210eb6:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  210eba:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  210ebe:	f6 c1 01             	test   cl,0x1
  210ec1:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  210ec5:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  210ec9:	0f 85 8e 00 00 00    	jne    210f5d <AlignedArrayList(Attr,8)_ensureCapacity+0xed>
  210ecf:	eb 72                	jmp    210f43 <AlignedArrayList(Attr,8)_ensureCapacity+0xd3>
                if (better_capacity >= new_capacity) break;
  210ed1:	eb 02                	jmp    210ed5 <AlignedArrayList(Attr,8)_ensureCapacity+0x65>
            while (true) {
  210ed3:	eb db                	jmp    210eb0 <AlignedArrayList(Attr,8)_ensureCapacity+0x40>
  210ed5:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
            self.items = try self.allocator.alignedRealloc(T, A, self.items, better_capacity);
  210ed9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  210edd:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  210ee1:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
  210ee5:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  210ee9:	4c 8b 45 b8          	mov    r8,QWORD PTR [rbp-0x48]
  210eed:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  210ef1:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  210ef5:	e8 d6 00 00 00       	call   210fd0 <Allocator_alignedRealloc.30>
  210efa:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  210eff:	74 1e                	je     210f1f <AlignedArrayList(Attr,8)_ensureCapacity+0xaf>
  210f01:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  210f05:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  210f09:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  210f0d:	e8 3e 35 ff ff       	call   204450 <__zig_return_error>
  210f12:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  210f16:	48 81 c4 90 00 00 00 	add    rsp,0x90
  210f1d:	5d                   	pop    rbp
  210f1e:	c3                   	ret    
  210f1f:	31 c0                	xor    eax,eax
  210f21:	66 89 c1             	mov    cx,ax
  210f24:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  210f28:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  210f2c:	48 89 16             	mov    QWORD PTR [rsi],rdx
  210f2f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  210f33:	48 89 56 08          	mov    QWORD PTR [rsi+0x8],rdx
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  210f37:	66 89 c8             	mov    ax,cx
  210f3a:	48 81 c4 90 00 00 00 	add    rsp,0x90
  210f41:	5d                   	pop    rbp
  210f42:	c3                   	ret    
                better_capacity += better_capacity / 2 + 8;
  210f43:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  210f47:	48 c1 e8 01          	shr    rax,0x1
  210f4b:	48 83 c0 08          	add    rax,0x8
  210f4f:	0f 92 c1             	setb   cl
  210f52:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  210f56:	88 4d 87             	mov    BYTE PTR [rbp-0x79],cl
  210f59:	72 12                	jb     210f6d <AlignedArrayList(Attr,8)_ensureCapacity+0xfd>
  210f5b:	eb 20                	jmp    210f7d <AlignedArrayList(Attr,8)_ensureCapacity+0x10d>
  210f5d:	48 8d 3d 14 46 01 00 	lea    rdi,[rip+0x14614]        # 225578 <__unnamed_73>
  210f64:	31 c0                	xor    eax,eax
  210f66:	89 c6                	mov    esi,eax
  210f68:	e8 53 21 ff ff       	call   2030c0 <panic>
  210f6d:	48 8d 3d a4 43 01 00 	lea    rdi,[rip+0x143a4]        # 225318 <__unnamed_5>
  210f74:	31 c0                	xor    eax,eax
  210f76:	89 c6                	mov    esi,eax
  210f78:	e8 43 21 ff ff       	call   2030c0 <panic>
  210f7d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  210f81:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  210f85:	48 01 c8             	add    rax,rcx
  210f88:	0f 92 c2             	setb   dl
  210f8b:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  210f92:	88 95 77 ff ff ff    	mov    BYTE PTR [rbp-0x89],dl
  210f98:	72 02                	jb     210f9c <AlignedArrayList(Attr,8)_ensureCapacity+0x12c>
  210f9a:	eb 10                	jmp    210fac <AlignedArrayList(Attr,8)_ensureCapacity+0x13c>
  210f9c:	48 8d 3d 75 43 01 00 	lea    rdi,[rip+0x14375]        # 225318 <__unnamed_5>
  210fa3:	31 c0                	xor    eax,eax
  210fa5:	89 c6                	mov    esi,eax
  210fa7:	e8 14 21 ff ff       	call   2030c0 <panic>
  210fac:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  210fb3:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                if (better_capacity >= new_capacity) break;
  210fb7:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  210fbb:	48 3b 4d c0          	cmp    rcx,QWORD PTR [rbp-0x40]
  210fbf:	0f 83 0c ff ff ff    	jae    210ed1 <AlignedArrayList(Attr,8)_ensureCapacity+0x61>
  210fc5:	e9 09 ff ff ff       	jmp    210ed3 <AlignedArrayList(Attr,8)_ensureCapacity+0x63>
  210fca:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000210fd0 <Allocator_alignedRealloc.30>:
    pub fn alignedRealloc(self: *Allocator, comptime T: type, comptime alignment: u29, old_mem: []align(alignment) T, n: usize) ![]align(alignment) T {
  210fd0:	55                   	push   rbp
  210fd1:	48 89 e5             	mov    rbp,rsp
  210fd4:	53                   	push   rbx
  210fd5:	48 81 ec 88 01 00 00 	sub    rsp,0x188
  210fdc:	48 89 f8             	mov    rax,rdi
  210fdf:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
  210fe6:	4c 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],r8
        if (old_mem.len == 0) {
  210fed:	48 83 79 08 00       	cmp    QWORD PTR [rcx+0x8],0x0
  210ff2:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  210ff9:	48 89 b5 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rsi
  211000:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
  211007:	48 89 bd b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rdi
  21100e:	75 64                	jne    211074 <Allocator_alignedRealloc.30+0xa4>
  211010:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
            return self.alignedAlloc(T, alignment, n);
  211014:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  21101b:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  211022:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  211029:	e8 22 04 00 00       	call   211450 <Allocator_alignedAlloc.31>
  21102e:	66 83 7d e0 00       	cmp    WORD PTR [rbp-0x20],0x0
  211033:	74 0e                	je     211043 <Allocator_alignedRealloc.30+0x73>
  211035:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  21103c:	e8 0f 34 ff ff       	call   204450 <__zig_return_error>
  211041:	eb 02                	jmp    211045 <Allocator_alignedRealloc.30+0x75>
  211043:	eb 00                	jmp    211045 <Allocator_alignedRealloc.30+0x75>
  211045:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  211049:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  211050:	48 89 01             	mov    QWORD PTR [rcx],rax
  211053:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  211057:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21105b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21105f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  211063:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21106a:	48 81 c4 88 01 00 00 	add    rsp,0x188
  211071:	5b                   	pop    rbx
  211072:	5d                   	pop    rbp
  211073:	c3                   	ret    
        if (old_mem.len == 0) {
  211074:	eb 00                	jmp    211076 <Allocator_alignedRealloc.30+0xa6>
        if (n == 0) {
  211076:	48 83 bd 10 ff ff ff 	cmp    QWORD PTR [rbp-0xf0],0x0
  21107d:	00 
  21107e:	75 4b                	jne    2110cb <Allocator_alignedRealloc.30+0xfb>
            self.free(old_mem);
  211080:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
  211087:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  21108e:	e8 dd 06 00 00       	call   211770 <Allocator_free.32>
            return ([*]align(alignment) T)(undefined)[0..0];
  211093:	48 8b 35 1e f9 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffef91e]        # 2009b8 <__unnamed_89>
  21109a:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  2110a1:	48 89 37             	mov    QWORD PTR [rdi],rsi
  2110a4:	48 8b 35 15 f9 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffef915]        # 2009c0 <__unnamed_89+0x8>
  2110ab:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  2110af:	48 8b 35 12 f9 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffef912]        # 2009c8 <__unnamed_89+0x10>
  2110b6:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  2110ba:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  2110c1:	48 81 c4 88 01 00 00 	add    rsp,0x188
  2110c8:	5b                   	pop    rbx
  2110c9:	5d                   	pop    rbp
  2110ca:	c3                   	ret    
        if (n == 0) {
  2110cb:	eb 00                	jmp    2110cd <Allocator_alignedRealloc.30+0xfd>
  2110cd:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  2110d1:	b8 28 00 00 00       	mov    eax,0x28
  2110d6:	89 c2                	mov    edx,eax
        const old_byte_slice = @sliceToBytes(old_mem);
  2110d8:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  2110df:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  2110e2:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  2110e6:	48 6b 71 08 28       	imul   rsi,QWORD PTR [rcx+0x8],0x28
  2110eb:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  2110ef:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  2110f3:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
  2110fa:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  2110fe:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  211105:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  21110c:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  211113:	e8 18 ab ff ff       	call   20bc30 <mul>
  211118:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  21111d:	74 44                	je     211163 <Allocator_alignedRealloc.30+0x193>
  21111f:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  211126:	e8 25 33 ff ff       	call   204450 <__zig_return_error>
  21112b:	48 8b 3d 9e f8 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffef89e]        # 2009d0 <__unnamed_90>
  211132:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  211139:	48 89 38             	mov    QWORD PTR [rax],rdi
  21113c:	48 8b 3d 95 f8 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffef895]        # 2009d8 <__unnamed_90+0x8>
  211143:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  211147:	48 8b 3d 92 f8 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffef892]        # 2009e0 <__unnamed_90+0x10>
  21114e:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  211152:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  211159:	48 81 c4 88 01 00 00 	add    rsp,0x188
  211160:	5b                   	pop    rbx
  211161:	5d                   	pop    rbp
  211162:	c3                   	ret    
  211163:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  211167:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  21116e:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  211172:	48 8d 8d 00 ff ff ff 	lea    rcx,[rbp-0x100]
  211179:	41 b9 08 00 00 00    	mov    r9d,0x8
  21117f:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  211186:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
        const byte_slice = try self.reallocFn(self, old_byte_slice, byte_count, alignment);
  21118d:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  211194:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  211198:	48 8b b5 18 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe8]
  21119f:	4c 8b 85 f8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x108]
  2111a6:	4c 8b 95 c8 fe ff ff 	mov    r10,QWORD PTR [rbp-0x138]
  2111ad:	48 89 b5 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rsi
  2111b4:	4c 89 d6             	mov    rsi,r10
  2111b7:	4c 8b 9d a8 fe ff ff 	mov    r11,QWORD PTR [rbp-0x158]
  2111be:	48 89 95 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdx
  2111c5:	4c 89 da             	mov    rdx,r11
  2111c8:	48 8b 9d a0 fe ff ff 	mov    rbx,QWORD PTR [rbp-0x160]
  2111cf:	ff d3                	call   rbx
  2111d1:	66 83 7d 98 00       	cmp    WORD PTR [rbp-0x68],0x0
  2111d6:	74 5d                	je     211235 <Allocator_alignedRealloc.30+0x265>
  2111d8:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  2111dc:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  2111e3:	66 89 85 9e fe ff ff 	mov    WORD PTR [rbp-0x162],ax
  2111ea:	e8 61 32 ff ff       	call   204450 <__zig_return_error>
  2111ef:	66 8b 85 9e fe ff ff 	mov    ax,WORD PTR [rbp-0x162]
  2111f6:	66 89 85 68 ff ff ff 	mov    WORD PTR [rbp-0x98],ax
  2111fd:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  211204:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  21120b:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21120e:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  211215:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  211219:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  211220:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  211224:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21122b:	48 81 c4 88 01 00 00 	add    rsp,0x188
  211232:	5b                   	pop    rbx
  211233:	5d                   	pop    rbp
  211234:	c3                   	ret    
  211235:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  211239:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  211240:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  211244:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
        assert(byte_slice.len == byte_count);
  21124b:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  211252:	48 3b 85 f8 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x108]
  211259:	0f 94 c1             	sete   cl
  21125c:	0f b6 f9             	movzx  edi,cl
  21125f:	e8 9c 1d ff ff       	call   203000 <assert>
        if (n > old_mem.len) {
  211264:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  21126b:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  211272:	48 3b 42 08          	cmp    rax,QWORD PTR [rdx+0x8]
  211276:	76 71                	jbe    2112e9 <Allocator_alignedRealloc.30+0x319>
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  211278:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  21127f:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  211286:	48 39 c8             	cmp    rax,rcx
  211289:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  211290:	48 89 8d 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rcx
  211297:	76 78                	jbe    211311 <Allocator_alignedRealloc.30+0x341>
  211299:	eb 66                	jmp    211301 <Allocator_alignedRealloc.30+0x331>
  21129b:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  2112a2:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
  2112a9:	48 39 c8             	cmp    rax,rcx
  2112ac:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  2112b3:	73 32                	jae    2112e7 <Allocator_alignedRealloc.30+0x317>
  2112b5:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  2112bc:	48 03 8d 58 ff ff ff 	add    rcx,QWORD PTR [rbp-0xa8]
  2112c3:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
                byte.* = undefined;
  2112ca:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  2112d1:	88 01                	mov    BYTE PTR [rcx],al
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  2112d3:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  2112da:	48 83 c1 01          	add    rcx,0x1
  2112de:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
  2112e5:	eb b4                	jmp    21129b <Allocator_alignedRealloc.30+0x2cb>
        if (n > old_mem.len) {
  2112e7:	eb 02                	jmp    2112eb <Allocator_alignedRealloc.30+0x31b>
  2112e9:	eb 00                	jmp    2112eb <Allocator_alignedRealloc.30+0x31b>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  2112eb:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  2112f2:	48 83 e0 07          	and    rax,0x7
  2112f6:	48 83 f8 00          	cmp    rax,0x0
  2112fa:	74 7b                	je     211377 <Allocator_alignedRealloc.30+0x3a7>
  2112fc:	e9 ae 00 00 00       	jmp    2113af <Allocator_alignedRealloc.30+0x3df>
  211301:	48 8d 3d f8 3f 01 00 	lea    rdi,[rip+0x13ff8]        # 225300 <__unnamed_4>
  211308:	31 c0                	xor    eax,eax
  21130a:	89 c6                	mov    esi,eax
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  21130c:	e8 af 1d ff ff       	call   2030c0 <panic>
  211311:	be aa 00 00 00       	mov    esi,0xaa
  211316:	b8 08 00 00 00       	mov    eax,0x8
  21131b:	89 c2                	mov    edx,eax
  21131d:	48 8d 8d e0 fe ff ff 	lea    rcx,[rbp-0x120]
  211324:	48 8b bd 90 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x170]
  21132b:	48 03 bd e8 fe ff ff 	add    rdi,QWORD PTR [rbp-0x118]
  211332:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
  211339:	48 8b bd 88 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x178]
  211340:	4c 8b 85 90 fe ff ff 	mov    r8,QWORD PTR [rbp-0x170]
  211347:	4c 29 c7             	sub    rdi,r8
  21134a:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  211351:	48 89 cf             	mov    rdi,rcx
  211354:	e8 57 09 01 00       	call   221cb0 <memset>
  211359:	48 c7 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],0x0
  211360:	00 00 00 00 
  211364:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  21136b:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  211372:	e9 24 ff ff ff       	jmp    21129b <Allocator_alignedRealloc.30+0x2cb>
  211377:	b8 28 00 00 00       	mov    eax,0x28
  21137c:	89 c1                	mov    ecx,eax
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  21137e:	48 8b 95 e8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x118]
  211385:	48 89 95 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdx
  21138c:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  211393:	48 89 d0             	mov    rax,rdx
  211396:	31 f6                	xor    esi,esi
  211398:	48 89 95 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rdx
  21139f:	89 f2                	mov    edx,esi
  2113a1:	48 f7 f1             	div    rcx
  2113a4:	48 83 fa 00          	cmp    rdx,0x0
  2113a8:	74 15                	je     2113bf <Allocator_alignedRealloc.30+0x3ef>
  2113aa:	e9 87 00 00 00       	jmp    211436 <Allocator_alignedRealloc.30+0x466>
  2113af:	48 8d 3d 7a 41 01 00 	lea    rdi,[rip+0x1417a]        # 225530 <__unnamed_60>
  2113b6:	31 c0                	xor    eax,eax
  2113b8:	89 c6                	mov    esi,eax
  2113ba:	e8 01 1d ff ff       	call   2030c0 <panic>
  2113bf:	b8 28 00 00 00       	mov    eax,0x28
  2113c4:	89 c1                	mov    ecx,eax
  2113c6:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  2113cd:	31 d2                	xor    edx,edx
  2113cf:	48 f7 f1             	div    rcx
  2113d2:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  2113d9:	66 c7 85 20 ff ff ff 	mov    WORD PTR [rbp-0xe0],0x0
  2113e0:	00 00 
  2113e2:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  2113e9:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  2113f0:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  2113f7:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  2113fe:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  211405:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  21140c:	48 89 01             	mov    QWORD PTR [rcx],rax
  21140f:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  211416:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21141a:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  211421:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  211425:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21142c:	48 81 c4 88 01 00 00 	add    rsp,0x188
  211433:	5b                   	pop    rbx
  211434:	5d                   	pop    rbp
  211435:	c3                   	ret    
  211436:	48 8d 3d 0b 41 01 00 	lea    rdi,[rip+0x1410b]        # 225548 <__unnamed_61>
  21143d:	31 c0                	xor    eax,eax
  21143f:	89 c6                	mov    esi,eax
  211441:	e8 7a 1c ff ff       	call   2030c0 <panic>
  211446:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  21144d:	00 00 00 

0000000000211450 <Allocator_alignedAlloc.31>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  211450:	55                   	push   rbp
  211451:	48 89 e5             	mov    rbp,rsp
  211454:	48 81 ec 20 01 00 00 	sub    rsp,0x120
  21145b:	48 89 f8             	mov    rax,rdi
  21145e:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  211465:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  21146c:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  211473:	00 
  211474:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  21147b:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  211482:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  211489:	75 37                	jne    2114c2 <Allocator_alignedAlloc.31+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  21148b:	48 8b 05 56 f5 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffef556]        # 2009e8 <__unnamed_91>
  211492:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  211499:	48 89 01             	mov    QWORD PTR [rcx],rax
  21149c:	48 8b 05 4d f5 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffef54d]        # 2009f0 <__unnamed_91+0x8>
  2114a3:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2114a7:	48 8b 05 4a f5 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffef54a]        # 2009f8 <__unnamed_91+0x10>
  2114ae:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  2114b2:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  2114b9:	48 81 c4 20 01 00 00 	add    rsp,0x120
  2114c0:	5d                   	pop    rbp
  2114c1:	c3                   	ret    
        if (n == 0) {
  2114c2:	eb 00                	jmp    2114c4 <Allocator_alignedAlloc.31+0x74>
  2114c4:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  2114c8:	b8 28 00 00 00       	mov    eax,0x28
  2114cd:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  2114cf:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  2114d6:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  2114dd:	e8 4e a7 ff ff       	call   20bc30 <mul>
  2114e2:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  2114e7:	74 43                	je     21152c <Allocator_alignedAlloc.31+0xdc>
  2114e9:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  2114f0:	e8 5b 2f ff ff       	call   204450 <__zig_return_error>
  2114f5:	48 8b 3d 04 f5 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffef504]        # 200a00 <__unnamed_92>
  2114fc:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  211503:	48 89 38             	mov    QWORD PTR [rax],rdi
  211506:	48 8b 3d fb f4 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffef4fb]        # 200a08 <__unnamed_92+0x8>
  21150d:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  211511:	48 8b 3d f8 f4 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffef4f8]        # 200a10 <__unnamed_92+0x10>
  211518:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  21151c:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  211523:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21152a:	5d                   	pop    rbp
  21152b:	c3                   	ret    
  21152c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  211530:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  211537:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  21153b:	41 b8 08 00 00 00    	mov    r8d,0x8
  211541:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  211548:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  21154f:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  211556:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  211559:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  211560:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  211567:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  21156e:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  211575:	4c 89 ce             	mov    rsi,r9
  211578:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  21157f:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  211586:	4c 89 d1             	mov    rcx,r10
  211589:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  211590:	41 ff d3             	call   r11
  211593:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  211598:	74 50                	je     2115ea <Allocator_alignedAlloc.31+0x19a>
  21159a:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  21159e:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  2115a5:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  2115ac:	e8 9f 2e ff ff       	call   204450 <__zig_return_error>
  2115b1:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  2115b8:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  2115bc:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  2115c0:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  2115c7:	48 89 39             	mov    QWORD PTR [rcx],rdi
  2115ca:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  2115ce:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  2115d2:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  2115d6:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  2115da:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  2115e1:	48 81 c4 20 01 00 00 	add    rsp,0x120
  2115e8:	5d                   	pop    rbp
  2115e9:	c3                   	ret    
  2115ea:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2115ee:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  2115f5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2115f9:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  211600:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  211607:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  21160e:	0f 94 c1             	sete   cl
  211611:	0f b6 f9             	movzx  edi,cl
  211614:	e8 e7 19 ff ff       	call   203000 <assert>
  211619:	be aa 00 00 00       	mov    esi,0xaa
  21161e:	bf 08 00 00 00       	mov    edi,0x8
  211623:	89 fa                	mov    edx,edi
  211625:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  21162c:	48 89 c7             	mov    rdi,rax
  21162f:	e8 7c 06 01 00       	call   221cb0 <memset>
  211634:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  21163b:	00 00 00 00 
  21163f:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  211646:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  21164d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  211654:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  21165b:	48 39 c8             	cmp    rax,rcx
  21165e:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  211665:	73 32                	jae    211699 <Allocator_alignedAlloc.31+0x249>
  211667:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21166e:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  211675:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  21167c:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  211683:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  211685:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21168c:	48 83 c1 01          	add    rcx,0x1
  211690:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  211697:	eb b4                	jmp    21164d <Allocator_alignedAlloc.31+0x1fd>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  211699:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  2116a0:	48 83 e0 07          	and    rax,0x7
  2116a4:	48 83 f8 00          	cmp    rax,0x0
  2116a8:	75 32                	jne    2116dc <Allocator_alignedAlloc.31+0x28c>
  2116aa:	b8 28 00 00 00       	mov    eax,0x28
  2116af:	89 c1                	mov    ecx,eax
  2116b1:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
  2116b8:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
  2116bc:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
  2116c3:	48 89 d0             	mov    rax,rdx
  2116c6:	31 f6                	xor    esi,esi
  2116c8:	48 89 95 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdx
  2116cf:	89 f2                	mov    edx,esi
  2116d1:	48 f7 f1             	div    rcx
  2116d4:	48 83 fa 00          	cmp    rdx,0x0
  2116d8:	74 12                	je     2116ec <Allocator_alignedAlloc.31+0x29c>
  2116da:	eb 77                	jmp    211753 <Allocator_alignedAlloc.31+0x303>
  2116dc:	48 8d 3d 4d 3e 01 00 	lea    rdi,[rip+0x13e4d]        # 225530 <__unnamed_60>
  2116e3:	31 c0                	xor    eax,eax
  2116e5:	89 c6                	mov    esi,eax
  2116e7:	e8 d4 19 ff ff       	call   2030c0 <panic>
  2116ec:	b8 28 00 00 00       	mov    eax,0x28
  2116f1:	89 c1                	mov    ecx,eax
  2116f3:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  2116fa:	31 d2                	xor    edx,edx
  2116fc:	48 f7 f1             	div    rcx
  2116ff:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  211703:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  21170a:	00 00 
  21170c:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  211710:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  211717:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  21171b:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  21171f:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  211726:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21172d:	48 89 01             	mov    QWORD PTR [rcx],rax
  211730:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  211737:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21173b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  21173f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  211743:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21174a:	48 81 c4 20 01 00 00 	add    rsp,0x120
  211751:	5d                   	pop    rbp
  211752:	c3                   	ret    
  211753:	48 8d 3d ee 3d 01 00 	lea    rdi,[rip+0x13dee]        # 225548 <__unnamed_61>
  21175a:	31 c0                	xor    eax,eax
  21175c:	89 c6                	mov    esi,eax
  21175e:	e8 5d 19 ff ff       	call   2030c0 <panic>
  211763:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21176a:	84 00 00 00 00 00 

0000000000211770 <Allocator_free.32>:
    pub fn free(self: *Allocator, memory: var) void {
  211770:	55                   	push   rbp
  211771:	48 89 e5             	mov    rbp,rsp
  211774:	48 83 ec 60          	sub    rsp,0x60
  211778:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
        const bytes = @sliceToBytes(memory);
  21177c:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  21177f:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  211783:	48 6b 76 08 28       	imul   rsi,QWORD PTR [rsi+0x8],0x28
  211788:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21178c:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  211790:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  211794:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  211798:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        if (bytes.len == 0) return;
  21179c:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
  2117a1:	75 06                	jne    2117a9 <Allocator_free.32+0x39>
  2117a3:	48 83 c4 60          	add    rsp,0x60
  2117a7:	5d                   	pop    rbp
  2117a8:	c3                   	ret    
  2117a9:	31 c0                	xor    eax,eax
  2117ab:	89 c1                	mov    ecx,eax
        const non_const_ptr = @intToPtr([*]u8, @ptrToInt(bytes.ptr));
  2117ad:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  2117b1:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
        self.freeFn(self, non_const_ptr[0..bytes.len]);
  2117b5:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  2117b9:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  2117bd:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  2117c1:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  2117c5:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
  2117c9:	48 39 f1             	cmp    rcx,rsi
  2117cc:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
  2117d0:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
  2117d4:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  2117d8:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  2117dc:	76 10                	jbe    2117ee <Allocator_free.32+0x7e>
  2117de:	48 8d 3d 1b 3b 01 00 	lea    rdi,[rip+0x13b1b]        # 225300 <__unnamed_4>
  2117e5:	31 c0                	xor    eax,eax
  2117e7:	89 c6                	mov    esi,eax
  2117e9:	e8 d2 18 ff ff       	call   2030c0 <panic>
  2117ee:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
  2117f2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  2117f6:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  2117fa:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  2117fe:	48 83 e9 00          	sub    rcx,0x0
  211802:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  211806:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  21180a:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  21180e:	ff d1                	call   rcx
    pub fn free(self: *Allocator, memory: var) void {
  211810:	48 83 c4 60          	add    rsp,0x60
  211814:	5d                   	pop    rbp
  211815:	c3                   	ret    
  211816:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  21181d:	00 00 00 

0000000000211820 <parseFormValueTargetAddrSize>:
fn parseFormValueTargetAddrSize(in_stream: var) !u64 {
  211820:	55                   	push   rbp
  211821:	48 89 e5             	mov    rbp,rsp
  211824:	48 83 ec 70          	sub    rsp,0x70
  211828:	48 89 f8             	mov    rax,rdi
  21182b:	48 8d 4d f0          	lea    rcx,[rbp-0x10]
  21182f:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
    return if (@sizeOf(usize) == 4) u64(try in_stream.readIntLe(u32)) else if (@sizeOf(usize) == 8) try in_stream.readIntLe(u64) else unreachable;
  211833:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  211837:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  21183b:	48 89 cf             	mov    rdi,rcx
  21183e:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  211842:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  211846:	e8 b5 b6 ff ff       	call   20cf00 <InStream(ReadError)_readIntLe.21>
  21184b:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  211850:	74 36                	je     211888 <parseFormValueTargetAddrSize+0x68>
  211852:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  211856:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  21185a:	66 89 45 9e          	mov    WORD PTR [rbp-0x62],ax
  21185e:	e8 ed 2b ff ff       	call   204450 <__zig_return_error>
  211863:	66 8b 45 9e          	mov    ax,WORD PTR [rbp-0x62]
  211867:	66 89 45 d0          	mov    WORD PTR [rbp-0x30],ax
  21186b:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  21186f:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  211873:	48 89 39             	mov    QWORD PTR [rcx],rdi
  211876:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  21187a:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21187e:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  211882:	48 83 c4 70          	add    rsp,0x70
  211886:	5d                   	pop    rbp
  211887:	c3                   	ret    
  211888:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21188c:	66 c7 45 c0 00 00    	mov    WORD PTR [rbp-0x40],0x0
  211892:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  211896:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  21189a:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  21189e:	48 89 01             	mov    QWORD PTR [rcx],rax
  2118a1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2118a5:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2118a9:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2118ad:	48 83 c4 70          	add    rsp,0x70
  2118b1:	5d                   	pop    rbp
  2118b2:	c3                   	ret    
  2118b3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2118ba:	84 00 00 00 00 00 

00000000002118c0 <parseFormValueBlock>:
fn parseFormValueBlock(allocator: *mem.Allocator, in_stream: var, size: usize) !FormValue {
  2118c0:	55                   	push   rbp
  2118c1:	48 89 e5             	mov    rbp,rsp
  2118c4:	48 81 ec c0 00 00 00 	sub    rsp,0xc0
  2118cb:	48 89 f8             	mov    rax,rdi
  2118ce:	4c 8d 4d f0          	lea    r9,[rbp-0x10]
  2118d2:	41 ba 01 00 00 00    	mov    r10d,0x1
  2118d8:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
  2118dc:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
  2118e0:	4c 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r8
    const block_len = try in_stream.readVarInt(builtin.Endian.Little, usize, size);
  2118e7:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
  2118eb:	4c 8b 85 78 ff ff ff 	mov    r8,QWORD PTR [rbp-0x88]
  2118f2:	48 89 bd 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdi
  2118f9:	4c 89 cf             	mov    rdi,r9
  2118fc:	48 89 b5 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rsi
  211903:	44 89 d1             	mov    ecx,r10d
  211906:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  21190d:	e8 ce c1 00 00       	call   21dae0 <InStream(ReadError)_readVarInt>
  211912:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  211917:	74 5a                	je     211973 <parseFormValueBlock+0xb3>
  211919:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  21191d:	48 8b bd 60 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  211924:	66 89 85 56 ff ff ff 	mov    WORD PTR [rbp-0xaa],ax
  21192b:	e8 20 2b ff ff       	call   204450 <__zig_return_error>
  211930:	b9 28 00 00 00       	mov    ecx,0x28
  211935:	89 ca                	mov    edx,ecx
  211937:	48 8d 7d b8          	lea    rdi,[rbp-0x48]
  21193b:	66 8b 85 56 ff ff ff 	mov    ax,WORD PTR [rbp-0xaa]
  211942:	66 89 45 b8          	mov    WORD PTR [rbp-0x48],ax
  211946:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
  21194d:	48 89 bd 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdi
  211954:	48 89 f7             	mov    rdi,rsi
  211957:	48 8b b5 48 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xb8]
  21195e:	e8 9d 03 01 00       	call   221d00 <memcpy>
  211963:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
  21196a:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  211971:	5d                   	pop    rbp
  211972:	c3                   	ret    
  211973:	48 8d 7d 90          	lea    rdi,[rbp-0x70]
  211977:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21197b:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
    return parseFormValueBlockLen(allocator, in_stream, block_len);
  211982:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
  211986:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  21198a:	4c 8b 85 70 ff ff ff 	mov    r8,QWORD PTR [rbp-0x90]
  211991:	48 8b b5 60 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa0]
  211998:	e8 53 00 00 00       	call   2119f0 <parseFormValueBlockLen>
  21199d:	66 83 7d 90 00       	cmp    WORD PTR [rbp-0x70],0x0
  2119a2:	74 0e                	je     2119b2 <parseFormValueBlock+0xf2>
  2119a4:	48 8b bd 60 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  2119ab:	e8 a0 2a ff ff       	call   204450 <__zig_return_error>
  2119b0:	eb 02                	jmp    2119b4 <parseFormValueBlock+0xf4>
  2119b2:	eb 00                	jmp    2119b4 <parseFormValueBlock+0xf4>
  2119b4:	b8 28 00 00 00       	mov    eax,0x28
  2119b9:	89 c2                	mov    edx,eax
  2119bb:	48 8d 4d 90          	lea    rcx,[rbp-0x70]
  2119bf:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
  2119c6:	48 89 f7             	mov    rdi,rsi
  2119c9:	48 89 ce             	mov    rsi,rcx
  2119cc:	e8 2f 03 01 00       	call   221d00 <memcpy>
  2119d1:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
  2119d8:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  2119df:	5d                   	pop    rbp
  2119e0:	c3                   	ret    
  2119e1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2119e8:	0f 1f 84 00 00 00 00 
  2119ef:	00 

00000000002119f0 <parseFormValueBlockLen>:
fn parseFormValueBlockLen(allocator: *mem.Allocator, in_stream: var, size: usize) !FormValue {
  2119f0:	55                   	push   rbp
  2119f1:	48 89 e5             	mov    rbp,rsp
  2119f4:	48 81 ec 00 01 00 00 	sub    rsp,0x100
  2119fb:	48 89 f8             	mov    rax,rdi
  2119fe:	4c 8d 4d e8          	lea    r9,[rbp-0x18]
  211a02:	48 89 95 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdx
  211a09:	48 89 8d 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rcx
  211a10:	4c 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],r8
    const buf = try readAllocBytes(allocator, in_stream, size);
  211a17:	48 8b 95 58 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa8]
  211a1e:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
  211a25:	4c 8b 85 48 ff ff ff 	mov    r8,QWORD PTR [rbp-0xb8]
  211a2c:	48 89 bd 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rdi
  211a33:	4c 89 cf             	mov    rdi,r9
  211a36:	48 89 b5 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rsi
  211a3d:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  211a44:	e8 77 02 00 00       	call   211cc0 <readAllocBytes>
  211a49:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  211a4e:	74 5a                	je     211aaa <parseFormValueBlockLen+0xba>
  211a50:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  211a54:	48 8b bd 20 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe0]
  211a5b:	66 89 85 16 ff ff ff 	mov    WORD PTR [rbp-0xea],ax
  211a62:	e8 e9 29 ff ff       	call   204450 <__zig_return_error>
  211a67:	b9 28 00 00 00       	mov    ecx,0x28
  211a6c:	89 ca                	mov    edx,ecx
  211a6e:	48 8d 7d a8          	lea    rdi,[rbp-0x58]
  211a72:	66 8b 85 16 ff ff ff 	mov    ax,WORD PTR [rbp-0xea]
  211a79:	66 89 45 a8          	mov    WORD PTR [rbp-0x58],ax
  211a7d:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  211a84:	48 89 bd 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdi
  211a8b:	48 89 f7             	mov    rdi,rsi
  211a8e:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
  211a95:	e8 66 02 01 00       	call   221d00 <memcpy>
  211a9a:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  211aa1:	48 81 c4 00 01 00 00 	add    rsp,0x100
  211aa8:	5d                   	pop    rbp
  211aa9:	c3                   	ret    
  211aaa:	b8 28 00 00 00       	mov    eax,0x28
  211aaf:	89 c2                	mov    edx,eax
  211ab1:	48 8d 8d 60 ff ff ff 	lea    rcx,[rbp-0xa0]
  211ab8:	c5 fa 6f 45 f0       	vmovdqu xmm0,XMMWORD PTR [rbp-0x10]
  211abd:	c5 f9 7f 85 30 ff ff 	vmovdqa XMMWORD PTR [rbp-0xd0],xmm0
  211ac4:	ff 
    return FormValue{ .Block = buf };
  211ac5:	c6 45 a0 01          	mov    BYTE PTR [rbp-0x60],0x1
  211ac9:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  211ad0:	48 89 75 88          	mov    QWORD PTR [rbp-0x78],rsi
  211ad4:	48 8b b5 38 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc8]
  211adb:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
  211adf:	66 c7 85 60 ff ff ff 	mov    WORD PTR [rbp-0xa0],0x0
  211ae6:	00 00 
  211ae8:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
  211aec:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
  211af3:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  211af7:	48 89 b5 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rsi
  211afe:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  211b02:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
  211b09:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  211b0d:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
  211b11:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  211b18:	48 89 f7             	mov    rdi,rsi
  211b1b:	48 89 ce             	mov    rsi,rcx
  211b1e:	e8 dd 01 01 00       	call   221d00 <memcpy>
  211b23:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  211b2a:	48 81 c4 00 01 00 00 	add    rsp,0x100
  211b31:	5d                   	pop    rbp
  211b32:	c3                   	ret    
  211b33:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  211b3a:	84 00 00 00 00 00 

0000000000211b40 <parseFormValueConstant>:
fn parseFormValueConstant(allocator: *mem.Allocator, in_stream: var, signed: bool, size: usize) !FormValue {
  211b40:	55                   	push   rbp
  211b41:	48 89 e5             	mov    rbp,rsp
  211b44:	48 81 ec 00 01 00 00 	sub    rsp,0x100
  211b4b:	44 88 c0             	mov    al,r8b
  211b4e:	49 89 fa             	mov    r10,rdi
  211b51:	4c 8d 5d e8          	lea    r11,[rbp-0x18]
  211b55:	48 89 95 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rdx
  211b5c:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  211b63:	24 01                	and    al,0x1
  211b65:	88 85 37 ff ff ff    	mov    BYTE PTR [rbp-0xc9],al
  211b6b:	4c 89 8d 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],r9
            .signed = signed,
  211b72:	8a 85 37 ff ff ff    	mov    al,BYTE PTR [rbp-0xc9]
            .payload = try readAllocBytes(allocator, in_stream, size),
  211b78:	48 8b 95 40 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc0]
  211b7f:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
  211b86:	4c 8b 85 28 ff ff ff 	mov    r8,QWORD PTR [rbp-0xd8]
  211b8d:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  211b94:	4c 89 df             	mov    rdi,r11
  211b97:	48 89 b5 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rsi
  211b9e:	4c 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],r10
  211ba5:	88 85 0f ff ff ff    	mov    BYTE PTR [rbp-0xf1],al
  211bab:	e8 10 01 00 00       	call   211cc0 <readAllocBytes>
  211bb0:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  211bb5:	74 5a                	je     211c11 <parseFormValueConstant+0xd1>
  211bb7:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  211bbb:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
  211bc2:	66 89 85 0c ff ff ff 	mov    WORD PTR [rbp-0xf4],ax
  211bc9:	e8 82 28 ff ff       	call   204450 <__zig_return_error>
  211bce:	b9 28 00 00 00       	mov    ecx,0x28
  211bd3:	89 ca                	mov    edx,ecx
  211bd5:	48 8d 7d a8          	lea    rdi,[rbp-0x58]
  211bd9:	66 8b 85 0c ff ff ff 	mov    ax,WORD PTR [rbp-0xf4]
  211be0:	66 89 45 a8          	mov    WORD PTR [rbp-0x58],ax
  211be4:	48 8b b5 20 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe0]
  211beb:	48 89 bd 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rdi
  211bf2:	48 89 f7             	mov    rdi,rsi
  211bf5:	48 8b b5 00 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x100]
  211bfc:	e8 ff 00 01 00       	call   221d00 <memcpy>
  211c01:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  211c08:	48 81 c4 00 01 00 00 	add    rsp,0x100
  211c0f:	5d                   	pop    rbp
  211c10:	c3                   	ret    
  211c11:	b8 28 00 00 00       	mov    eax,0x28
  211c16:	89 c2                	mov    edx,eax
  211c18:	48 8d 8d 48 ff ff ff 	lea    rcx,[rbp-0xb8]
        .Const = Constant{
  211c1f:	c5 fa 6f 45 f0       	vmovdqu xmm0,XMMWORD PTR [rbp-0x10]
  211c24:	c5 f9 7f 45 90       	vmovdqa XMMWORD PTR [rbp-0x70],xmm0
  211c29:	40 8a b5 0f ff ff ff 	mov    sil,BYTE PTR [rbp-0xf1]
  211c30:	40 80 e6 01          	and    sil,0x1
  211c34:	40 88 75 a0          	mov    BYTE PTR [rbp-0x60],sil
    return FormValue{
  211c38:	c6 45 88 02          	mov    BYTE PTR [rbp-0x78],0x2
  211c3c:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  211c40:	48 89 bd 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdi
  211c47:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  211c4b:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
  211c52:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  211c56:	48 89 7d 80          	mov    QWORD PTR [rbp-0x80],rdi
  211c5a:	66 c7 85 48 ff ff ff 	mov    WORD PTR [rbp-0xb8],0x0
  211c61:	00 00 
  211c63:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  211c6a:	48 89 bd 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdi
  211c71:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  211c78:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
  211c7f:	48 8b 7d 80          	mov    rdi,QWORD PTR [rbp-0x80]
  211c83:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  211c8a:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  211c8e:	48 89 bd 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdi
  211c95:	48 8b bd 20 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe0]
  211c9c:	48 89 ce             	mov    rsi,rcx
  211c9f:	e8 5c 00 01 00       	call   221d00 <memcpy>
  211ca4:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  211cab:	48 81 c4 00 01 00 00 	add    rsp,0x100
  211cb2:	5d                   	pop    rbp
  211cb3:	c3                   	ret    
  211cb4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  211cbb:	00 00 00 00 00 

0000000000211cc0 <readAllocBytes>:
fn readAllocBytes(allocator: *mem.Allocator, in_stream: var, size: usize) ![]u8 {
  211cc0:	55                   	push   rbp
  211cc1:	48 89 e5             	mov    rbp,rsp
  211cc4:	48 81 ec e0 00 00 00 	sub    rsp,0xe0
  211ccb:	48 89 f8             	mov    rax,rdi
  211cce:	4c 8d 4d e8          	lea    r9,[rbp-0x18]
  211cd2:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
  211cd9:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
  211ce0:	4c 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],r8
    const buf = try allocator.alloc(u8, size);
  211ce7:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  211cee:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
  211cf5:	48 89 bd 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdi
  211cfc:	4c 89 cf             	mov    rdi,r9
  211cff:	48 89 b5 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rsi
  211d06:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  211d0d:	e8 ae 6f 00 00       	call   218cc0 <Allocator_alloc.57>
  211d12:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  211d17:	74 50                	je     211d69 <readAllocBytes+0xa9>
  211d19:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  211d1d:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
  211d24:	66 89 85 26 ff ff ff 	mov    WORD PTR [rbp-0xda],ax
  211d2b:	e8 20 27 ff ff       	call   204450 <__zig_return_error>
  211d30:	66 8b 85 26 ff ff ff 	mov    ax,WORD PTR [rbp-0xda]
  211d37:	66 89 45 b8          	mov    WORD PTR [rbp-0x48],ax
  211d3b:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  211d3f:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
  211d46:	48 89 39             	mov    QWORD PTR [rcx],rdi
  211d49:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  211d4d:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  211d51:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  211d55:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  211d59:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  211d60:	48 81 c4 e0 00 00 00 	add    rsp,0xe0
  211d67:	5d                   	pop    rbp
  211d68:	c3                   	ret    
  211d69:	48 8d 7d a8          	lea    rdi,[rbp-0x58]
  211d6d:	48 8d 8d 40 ff ff ff 	lea    rcx,[rbp-0xc0]
  211d74:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  211d78:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  211d7f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  211d83:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
    if ((try in_stream.read(buf)) < size) return error.EndOfFile;
  211d8a:	48 8b 95 58 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa8]
  211d91:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  211d98:	e8 83 94 ff ff       	call   20b220 <InStream(ReadError)_read>
  211d9d:	66 83 7d a8 00       	cmp    WORD PTR [rbp-0x58],0x0
  211da2:	74 63                	je     211e07 <readAllocBytes+0x147>
  211da4:	48 8d b5 40 ff ff ff 	lea    rsi,[rbp-0xc0]
    errdefer allocator.free(buf);
  211dab:	48 8b bd 60 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  211db2:	e8 d9 6d 00 00       	call   218b90 <Allocator_free.56>
    if ((try in_stream.read(buf)) < size) return error.EndOfFile;
  211db7:	66 8b 45 a8          	mov    ax,WORD PTR [rbp-0x58]
  211dbb:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
  211dc2:	66 89 85 24 ff ff ff 	mov    WORD PTR [rbp-0xdc],ax
  211dc9:	e8 82 26 ff ff       	call   204450 <__zig_return_error>
  211dce:	66 8b 85 24 ff ff ff 	mov    ax,WORD PTR [rbp-0xdc]
  211dd5:	66 89 45 80          	mov    WORD PTR [rbp-0x80],ax
  211dd9:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  211ddd:	48 8b bd 38 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xc8]
  211de4:	48 89 37             	mov    QWORD PTR [rdi],rsi
  211de7:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
  211deb:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  211def:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  211df3:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  211df7:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  211dfe:	48 81 c4 e0 00 00 00 	add    rsp,0xe0
  211e05:	5d                   	pop    rbp
  211e06:	c3                   	ret    
  211e07:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  211e0b:	48 3b 85 50 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xb0]
  211e12:	73 56                	jae    211e6a <readAllocBytes+0x1aa>
  211e14:	48 8d b5 40 ff ff ff 	lea    rsi,[rbp-0xc0]
    errdefer allocator.free(buf);
  211e1b:	48 8b bd 60 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  211e22:	e8 69 6d 00 00       	call   218b90 <Allocator_free.56>
    if ((try in_stream.read(buf)) < size) return error.EndOfFile;
  211e27:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
  211e2e:	e8 1d 26 ff ff       	call   204450 <__zig_return_error>
  211e33:	48 8b 35 9e 02 ff ff 	mov    rsi,QWORD PTR [rip+0xffffffffffff029e]        # 2020d8 <__unnamed_93>
  211e3a:	48 8b bd 38 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xc8]
  211e41:	48 89 37             	mov    QWORD PTR [rdi],rsi
  211e44:	48 8b 35 95 02 ff ff 	mov    rsi,QWORD PTR [rip+0xffffffffffff0295]        # 2020e0 <__unnamed_93+0x8>
  211e4b:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  211e4f:	48 8b 35 92 02 ff ff 	mov    rsi,QWORD PTR [rip+0xffffffffffff0292]        # 2020e8 <__unnamed_93+0x10>
  211e56:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  211e5a:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  211e61:	48 81 c4 e0 00 00 00 	add    rsp,0xe0
  211e68:	5d                   	pop    rbp
  211e69:	c3                   	ret    
  211e6a:	eb 00                	jmp    211e6c <readAllocBytes+0x1ac>
    return buf;
  211e6c:	66 c7 85 68 ff ff ff 	mov    WORD PTR [rbp-0x98],0x0
  211e73:	00 00 
  211e75:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  211e7c:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  211e83:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  211e8a:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  211e91:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  211e98:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
  211e9f:	48 89 01             	mov    QWORD PTR [rcx],rax
  211ea2:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  211ea9:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  211ead:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  211eb4:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  211eb8:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  211ebf:	48 81 c4 e0 00 00 00 	add    rsp,0xe0
  211ec6:	5d                   	pop    rbp
  211ec7:	c3                   	ret    
  211ec8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  211ecf:	00 

0000000000211ed0 <parseFormValueDwarfOffsetSize>:
fn parseFormValueDwarfOffsetSize(in_stream: var, is_64: bool) !u64 {
  211ed0:	55                   	push   rbp
  211ed1:	48 89 e5             	mov    rbp,rsp
  211ed4:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  211edb:	88 c8                	mov    al,cl
  211edd:	49 89 f8             	mov    r8,rdi
  211ee0:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  211ee4:	24 01                	and    al,0x1
  211ee6:	88 45 97             	mov    BYTE PTR [rbp-0x69],al
    return if (is_64) try in_stream.readIntLe(u64) else u64(try in_stream.readIntLe(u32));
  211ee9:	f6 45 97 01          	test   BYTE PTR [rbp-0x69],0x1
  211eed:	48 89 75 88          	mov    QWORD PTR [rbp-0x78],rsi
  211ef1:	4c 89 45 80          	mov    QWORD PTR [rbp-0x80],r8
  211ef5:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
  211efc:	75 02                	jne    211f00 <parseFormValueDwarfOffsetSize+0x30>
  211efe:	eb 67                	jmp    211f67 <parseFormValueDwarfOffsetSize+0x97>
  211f00:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  211f04:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  211f08:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
  211f0c:	e8 ef af ff ff       	call   20cf00 <InStream(ReadError)_readIntLe.21>
  211f11:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  211f16:	74 42                	je     211f5a <parseFormValueDwarfOffsetSize+0x8a>
  211f18:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  211f1c:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  211f20:	66 89 85 76 ff ff ff 	mov    WORD PTR [rbp-0x8a],ax
  211f27:	e8 24 25 ff ff       	call   204450 <__zig_return_error>
  211f2c:	66 8b 85 76 ff ff ff 	mov    ax,WORD PTR [rbp-0x8a]
  211f33:	66 89 45 d0          	mov    WORD PTR [rbp-0x30],ax
  211f37:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  211f3b:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  211f42:	48 89 39             	mov    QWORD PTR [rcx],rdi
  211f45:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  211f49:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  211f4d:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  211f51:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  211f58:	5d                   	pop    rbp
  211f59:	c3                   	ret    
  211f5a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  211f5e:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  211f65:	eb 66                	jmp    211fcd <parseFormValueDwarfOffsetSize+0xfd>
  211f67:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  211f6b:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  211f6f:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
  211f73:	e8 28 af ff ff       	call   20cea0 <InStream(ReadError)_readIntLe>
  211f78:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  211f7d:	74 42                	je     211fc1 <parseFormValueDwarfOffsetSize+0xf1>
  211f7f:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  211f83:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  211f87:	66 89 85 66 ff ff ff 	mov    WORD PTR [rbp-0x9a],ax
  211f8e:	e8 bd 24 ff ff       	call   204450 <__zig_return_error>
  211f93:	66 8b 85 66 ff ff ff 	mov    ax,WORD PTR [rbp-0x9a]
  211f9a:	66 89 45 b0          	mov    WORD PTR [rbp-0x50],ax
  211f9e:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  211fa2:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  211fa9:	48 89 39             	mov    QWORD PTR [rcx],rdi
  211fac:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  211fb0:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  211fb4:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  211fb8:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  211fbf:	5d                   	pop    rbp
  211fc0:	c3                   	ret    
  211fc1:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  211fc4:	89 c1                	mov    ecx,eax
  211fc6:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
  211fcd:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  211fd4:	66 c7 45 a0 00 00    	mov    WORD PTR [rbp-0x60],0x0
  211fda:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  211fde:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  211fe2:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  211fe9:	48 89 01             	mov    QWORD PTR [rcx],rax
  211fec:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  211ff0:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  211ff4:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  211ff8:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  211fff:	5d                   	pop    rbp
  212000:	c3                   	ret    
  212001:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  212008:	0f 1f 84 00 00 00 00 
  21200f:	00 

0000000000212010 <parseFormValueRef>:
fn parseFormValueRef(allocator: *mem.Allocator, in_stream: var, comptime T: type) !FormValue {
  212010:	55                   	push   rbp
  212011:	48 89 e5             	mov    rbp,rsp
  212014:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  21201b:	48 89 f8             	mov    rax,rdi
  21201e:	4c 8d 45 f8          	lea    r8,[rbp-0x8]
  212022:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  212026:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
    const block_len = try in_stream.readIntLe(T);
  21202a:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
  21202e:	48 89 7d 80          	mov    QWORD PTR [rbp-0x80],rdi
  212032:	4c 89 c7             	mov    rdi,r8
  212035:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
  21203c:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  212043:	e8 08 bc 00 00       	call   21dc50 <InStream(ReadError)_readIntLe.82>
  212048:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  21204d:	74 57                	je     2120a6 <parseFormValueRef+0x96>
  21204f:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  212053:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  21205a:	66 89 85 6e ff ff ff 	mov    WORD PTR [rbp-0x92],ax
  212061:	e8 ea 23 ff ff       	call   204450 <__zig_return_error>
  212066:	b9 28 00 00 00       	mov    ecx,0x28
  21206b:	89 ca                	mov    edx,ecx
  21206d:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  212071:	66 8b 85 6e ff ff ff 	mov    ax,WORD PTR [rbp-0x92]
  212078:	66 89 45 c8          	mov    WORD PTR [rbp-0x38],ax
  21207c:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  212080:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  212087:	48 89 f7             	mov    rdi,rsi
  21208a:	48 8b b5 60 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa0]
  212091:	e8 6a fc 00 00       	call   221d00 <memcpy>
  212096:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21209d:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  2120a4:	5d                   	pop    rbp
  2120a5:	c3                   	ret    
  2120a6:	48 8d 7d a0          	lea    rdi,[rbp-0x60]
  2120aa:	8a 45 fa             	mov    al,BYTE PTR [rbp-0x6]
  2120ad:	88 45 8f             	mov    BYTE PTR [rbp-0x71],al
    return parseFormValueRefLen(allocator, in_stream, block_len);
  2120b0:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  2120b4:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  2120b8:	0f b6 75 8f          	movzx  esi,BYTE PTR [rbp-0x71]
  2120bc:	41 89 f0             	mov    r8d,esi
  2120bf:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
  2120c6:	e8 55 03 00 00       	call   212420 <parseFormValueRefLen>
  2120cb:	66 83 7d a0 00       	cmp    WORD PTR [rbp-0x60],0x0
  2120d0:	74 0e                	je     2120e0 <parseFormValueRef+0xd0>
  2120d2:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  2120d9:	e8 72 23 ff ff       	call   204450 <__zig_return_error>
  2120de:	eb 02                	jmp    2120e2 <parseFormValueRef+0xd2>
  2120e0:	eb 00                	jmp    2120e2 <parseFormValueRef+0xd2>
  2120e2:	b8 28 00 00 00       	mov    eax,0x28
  2120e7:	89 c2                	mov    edx,eax
  2120e9:	48 8d 4d a0          	lea    rcx,[rbp-0x60]
  2120ed:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  2120f1:	48 89 f7             	mov    rdi,rsi
  2120f4:	48 89 ce             	mov    rsi,rcx
  2120f7:	e8 04 fc 00 00       	call   221d00 <memcpy>
  2120fc:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  212103:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  21210a:	5d                   	pop    rbp
  21210b:	c3                   	ret    
  21210c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000212110 <parseFormValueRef.33>:
fn parseFormValueRef(allocator: *mem.Allocator, in_stream: var, comptime T: type) !FormValue {
  212110:	55                   	push   rbp
  212111:	48 89 e5             	mov    rbp,rsp
  212114:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  21211b:	48 89 f8             	mov    rax,rdi
  21211e:	4c 8d 45 f8          	lea    r8,[rbp-0x8]
  212122:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  212126:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
    const block_len = try in_stream.readIntLe(T);
  21212a:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
  21212e:	48 89 7d 80          	mov    QWORD PTR [rbp-0x80],rdi
  212132:	4c 89 c7             	mov    rdi,r8
  212135:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
  21213c:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  212143:	e8 68 bb 00 00       	call   21dcb0 <InStream(ReadError)_readIntLe.83>
  212148:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  21214d:	74 57                	je     2121a6 <parseFormValueRef.33+0x96>
  21214f:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  212153:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  21215a:	66 89 85 6e ff ff ff 	mov    WORD PTR [rbp-0x92],ax
  212161:	e8 ea 22 ff ff       	call   204450 <__zig_return_error>
  212166:	b9 28 00 00 00       	mov    ecx,0x28
  21216b:	89 ca                	mov    edx,ecx
  21216d:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  212171:	66 8b 85 6e ff ff ff 	mov    ax,WORD PTR [rbp-0x92]
  212178:	66 89 45 c8          	mov    WORD PTR [rbp-0x38],ax
  21217c:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  212180:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  212187:	48 89 f7             	mov    rdi,rsi
  21218a:	48 8b b5 60 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa0]
  212191:	e8 6a fb 00 00       	call   221d00 <memcpy>
  212196:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21219d:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  2121a4:	5d                   	pop    rbp
  2121a5:	c3                   	ret    
  2121a6:	48 8d 7d a0          	lea    rdi,[rbp-0x60]
  2121aa:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  2121ae:	66 89 45 8e          	mov    WORD PTR [rbp-0x72],ax
    return parseFormValueRefLen(allocator, in_stream, block_len);
  2121b2:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  2121b6:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  2121ba:	0f b7 75 8e          	movzx  esi,WORD PTR [rbp-0x72]
  2121be:	41 89 f0             	mov    r8d,esi
  2121c1:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
  2121c8:	e8 53 02 00 00       	call   212420 <parseFormValueRefLen>
  2121cd:	66 83 7d a0 00       	cmp    WORD PTR [rbp-0x60],0x0
  2121d2:	74 0e                	je     2121e2 <parseFormValueRef.33+0xd2>
  2121d4:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  2121db:	e8 70 22 ff ff       	call   204450 <__zig_return_error>
  2121e0:	eb 02                	jmp    2121e4 <parseFormValueRef.33+0xd4>
  2121e2:	eb 00                	jmp    2121e4 <parseFormValueRef.33+0xd4>
  2121e4:	b8 28 00 00 00       	mov    eax,0x28
  2121e9:	89 c2                	mov    edx,eax
  2121eb:	48 8d 4d a0          	lea    rcx,[rbp-0x60]
  2121ef:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  2121f3:	48 89 f7             	mov    rdi,rsi
  2121f6:	48 89 ce             	mov    rsi,rcx
  2121f9:	e8 02 fb 00 00       	call   221d00 <memcpy>
  2121fe:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  212205:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  21220c:	5d                   	pop    rbp
  21220d:	c3                   	ret    
  21220e:	66 90                	xchg   ax,ax

0000000000212210 <parseFormValueRef.34>:
fn parseFormValueRef(allocator: *mem.Allocator, in_stream: var, comptime T: type) !FormValue {
  212210:	55                   	push   rbp
  212211:	48 89 e5             	mov    rbp,rsp
  212214:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  21221b:	48 89 f8             	mov    rax,rdi
  21221e:	4c 8d 45 f8          	lea    r8,[rbp-0x8]
  212222:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  212226:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
    const block_len = try in_stream.readIntLe(T);
  21222a:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
  21222e:	48 89 7d 80          	mov    QWORD PTR [rbp-0x80],rdi
  212232:	4c 89 c7             	mov    rdi,r8
  212235:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
  21223c:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  212243:	e8 58 ac ff ff       	call   20cea0 <InStream(ReadError)_readIntLe>
  212248:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  21224d:	74 57                	je     2122a6 <parseFormValueRef.34+0x96>
  21224f:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  212253:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  21225a:	66 89 85 6e ff ff ff 	mov    WORD PTR [rbp-0x92],ax
  212261:	e8 ea 21 ff ff       	call   204450 <__zig_return_error>
  212266:	b9 28 00 00 00       	mov    ecx,0x28
  21226b:	89 ca                	mov    edx,ecx
  21226d:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  212271:	66 8b 85 6e ff ff ff 	mov    ax,WORD PTR [rbp-0x92]
  212278:	66 89 45 c8          	mov    WORD PTR [rbp-0x38],ax
  21227c:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  212280:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  212287:	48 89 f7             	mov    rdi,rsi
  21228a:	48 8b b5 60 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa0]
  212291:	e8 6a fa 00 00       	call   221d00 <memcpy>
  212296:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21229d:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  2122a4:	5d                   	pop    rbp
  2122a5:	c3                   	ret    
  2122a6:	48 8d 7d a0          	lea    rdi,[rbp-0x60]
  2122aa:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  2122ad:	89 45 8c             	mov    DWORD PTR [rbp-0x74],eax
    return parseFormValueRefLen(allocator, in_stream, block_len);
  2122b0:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  2122b4:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  2122b8:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
  2122bb:	41 89 c0             	mov    r8d,eax
  2122be:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
  2122c5:	e8 56 01 00 00       	call   212420 <parseFormValueRefLen>
  2122ca:	66 83 7d a0 00       	cmp    WORD PTR [rbp-0x60],0x0
  2122cf:	74 0e                	je     2122df <parseFormValueRef.34+0xcf>
  2122d1:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  2122d8:	e8 73 21 ff ff       	call   204450 <__zig_return_error>
  2122dd:	eb 02                	jmp    2122e1 <parseFormValueRef.34+0xd1>
  2122df:	eb 00                	jmp    2122e1 <parseFormValueRef.34+0xd1>
  2122e1:	b8 28 00 00 00       	mov    eax,0x28
  2122e6:	89 c2                	mov    edx,eax
  2122e8:	48 8d 4d a0          	lea    rcx,[rbp-0x60]
  2122ec:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  2122f0:	48 89 f7             	mov    rdi,rsi
  2122f3:	48 89 ce             	mov    rsi,rcx
  2122f6:	e8 05 fa 00 00       	call   221d00 <memcpy>
  2122fb:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  212302:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  212309:	5d                   	pop    rbp
  21230a:	c3                   	ret    
  21230b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000212310 <parseFormValueRef.35>:
fn parseFormValueRef(allocator: *mem.Allocator, in_stream: var, comptime T: type) !FormValue {
  212310:	55                   	push   rbp
  212311:	48 89 e5             	mov    rbp,rsp
  212314:	48 81 ec b0 00 00 00 	sub    rsp,0xb0
  21231b:	48 89 f8             	mov    rax,rdi
  21231e:	4c 8d 45 f0          	lea    r8,[rbp-0x10]
  212322:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
  212326:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
    const block_len = try in_stream.readIntLe(T);
  21232a:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
  21232e:	48 89 bd 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdi
  212335:	4c 89 c7             	mov    rdi,r8
  212338:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
  21233f:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  212346:	e8 b5 ab ff ff       	call   20cf00 <InStream(ReadError)_readIntLe.21>
  21234b:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  212350:	74 5a                	je     2123ac <parseFormValueRef.35+0x9c>
  212352:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  212356:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  21235d:	66 89 85 5e ff ff ff 	mov    WORD PTR [rbp-0xa2],ax
  212364:	e8 e7 20 ff ff       	call   204450 <__zig_return_error>
  212369:	b9 28 00 00 00       	mov    ecx,0x28
  21236e:	89 ca                	mov    edx,ecx
  212370:	48 8d 7d b8          	lea    rdi,[rbp-0x48]
  212374:	66 8b 85 5e ff ff ff 	mov    ax,WORD PTR [rbp-0xa2]
  21237b:	66 89 45 b8          	mov    WORD PTR [rbp-0x48],ax
  21237f:	48 8b b5 70 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x90]
  212386:	48 89 bd 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdi
  21238d:	48 89 f7             	mov    rdi,rsi
  212390:	48 8b b5 50 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xb0]
  212397:	e8 64 f9 00 00       	call   221d00 <memcpy>
  21239c:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  2123a3:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  2123aa:	5d                   	pop    rbp
  2123ab:	c3                   	ret    
  2123ac:	48 8d 7d 90          	lea    rdi,[rbp-0x70]
  2123b0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2123b4:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
    return parseFormValueRefLen(allocator, in_stream, block_len);
  2123bb:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
  2123bf:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  2123c3:	4c 8b 85 78 ff ff ff 	mov    r8,QWORD PTR [rbp-0x88]
  2123ca:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
  2123d1:	e8 4a 00 00 00       	call   212420 <parseFormValueRefLen>
  2123d6:	66 83 7d 90 00       	cmp    WORD PTR [rbp-0x70],0x0
  2123db:	74 0e                	je     2123eb <parseFormValueRef.35+0xdb>
  2123dd:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  2123e4:	e8 67 20 ff ff       	call   204450 <__zig_return_error>
  2123e9:	eb 02                	jmp    2123ed <parseFormValueRef.35+0xdd>
  2123eb:	eb 00                	jmp    2123ed <parseFormValueRef.35+0xdd>
  2123ed:	b8 28 00 00 00       	mov    eax,0x28
  2123f2:	89 c2                	mov    edx,eax
  2123f4:	48 8d 4d 90          	lea    rcx,[rbp-0x70]
  2123f8:	48 8b b5 70 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x90]
  2123ff:	48 89 f7             	mov    rdi,rsi
  212402:	48 89 ce             	mov    rsi,rcx
  212405:	e8 f6 f8 00 00       	call   221d00 <memcpy>
  21240a:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  212411:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  212418:	5d                   	pop    rbp
  212419:	c3                   	ret    
  21241a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000212420 <parseFormValueRefLen>:
fn parseFormValueRefLen(allocator: *mem.Allocator, in_stream: var, size: usize) !FormValue {
  212420:	55                   	push   rbp
  212421:	48 89 e5             	mov    rbp,rsp
  212424:	48 81 ec 00 01 00 00 	sub    rsp,0x100
  21242b:	48 89 f8             	mov    rax,rdi
  21242e:	4c 8d 4d e8          	lea    r9,[rbp-0x18]
  212432:	48 89 95 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdx
  212439:	48 89 8d 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rcx
  212440:	4c 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],r8
    const buf = try readAllocBytes(allocator, in_stream, size);
  212447:	48 8b 95 58 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa8]
  21244e:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
  212455:	4c 8b 85 48 ff ff ff 	mov    r8,QWORD PTR [rbp-0xb8]
  21245c:	48 89 bd 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rdi
  212463:	4c 89 cf             	mov    rdi,r9
  212466:	48 89 b5 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rsi
  21246d:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  212474:	e8 47 f8 ff ff       	call   211cc0 <readAllocBytes>
  212479:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  21247e:	74 5a                	je     2124da <parseFormValueRefLen+0xba>
  212480:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  212484:	48 8b bd 20 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe0]
  21248b:	66 89 85 16 ff ff ff 	mov    WORD PTR [rbp-0xea],ax
  212492:	e8 b9 1f ff ff       	call   204450 <__zig_return_error>
  212497:	b9 28 00 00 00       	mov    ecx,0x28
  21249c:	89 ca                	mov    edx,ecx
  21249e:	48 8d 7d a8          	lea    rdi,[rbp-0x58]
  2124a2:	66 8b 85 16 ff ff ff 	mov    ax,WORD PTR [rbp-0xea]
  2124a9:	66 89 45 a8          	mov    WORD PTR [rbp-0x58],ax
  2124ad:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  2124b4:	48 89 bd 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdi
  2124bb:	48 89 f7             	mov    rdi,rsi
  2124be:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
  2124c5:	e8 36 f8 00 00       	call   221d00 <memcpy>
  2124ca:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  2124d1:	48 81 c4 00 01 00 00 	add    rsp,0x100
  2124d8:	5d                   	pop    rbp
  2124d9:	c3                   	ret    
  2124da:	b8 28 00 00 00       	mov    eax,0x28
  2124df:	89 c2                	mov    edx,eax
  2124e1:	48 8d 8d 60 ff ff ff 	lea    rcx,[rbp-0xa0]
  2124e8:	c5 fa 6f 45 f0       	vmovdqu xmm0,XMMWORD PTR [rbp-0x10]
  2124ed:	c5 f9 7f 85 30 ff ff 	vmovdqa XMMWORD PTR [rbp-0xd0],xmm0
  2124f4:	ff 
    return FormValue{ .Ref = buf };
  2124f5:	c6 45 a0 06          	mov    BYTE PTR [rbp-0x60],0x6
  2124f9:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  212500:	48 89 75 88          	mov    QWORD PTR [rbp-0x78],rsi
  212504:	48 8b b5 38 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc8]
  21250b:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
  21250f:	66 c7 85 60 ff ff ff 	mov    WORD PTR [rbp-0xa0],0x0
  212516:	00 00 
  212518:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
  21251c:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
  212523:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  212527:	48 89 b5 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rsi
  21252e:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  212532:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
  212539:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  21253d:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
  212541:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  212548:	48 89 f7             	mov    rdi,rsi
  21254b:	48 89 ce             	mov    rsi,rcx
  21254e:	e8 ad f7 00 00       	call   221d00 <memcpy>
  212553:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  21255a:	48 81 c4 00 01 00 00 	add    rsp,0x100
  212561:	5d                   	pop    rbp
  212562:	c3                   	ret    
  212563:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21256a:	84 00 00 00 00 00 

0000000000212570 <readStringRaw>:
fn readStringRaw(allocator: *mem.Allocator, in_stream: var) ![]u8 {
  212570:	55                   	push   rbp
  212571:	48 89 e5             	mov    rbp,rsp
  212574:	48 81 ec f0 00 00 00 	sub    rsp,0xf0
  21257b:	48 89 f8             	mov    rax,rdi
  21257e:	4c 8d 45 e0          	lea    r8,[rbp-0x20]
  212582:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  212589:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
    var buf = ArrayList(u8).init(allocator);
  212590:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  212597:	48 89 bd 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rdi
  21259e:	4c 89 c7             	mov    rdi,r8
  2125a1:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  2125a8:	48 89 ce             	mov    rsi,rcx
  2125ab:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
  2125b2:	e8 09 5b 00 00       	call   2180c0 <AlignedArrayList(u8,1)_init>
  2125b7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2125bb:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  2125c2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2125c6:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  2125cd:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2125d1:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
  2125d8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2125dc:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
    while (true) {
  2125e3:	eb 00                	jmp    2125e5 <readStringRaw+0x75>
  2125e5:	48 8d 7d d8          	lea    rdi,[rbp-0x28]
        const byte = try in_stream.readByte();
  2125e9:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  2125f0:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  2125f7:	e8 44 7e ff ff       	call   20a440 <InStream(ReadError)_readByte>
  2125fc:	66 83 7d d8 00       	cmp    WORD PTR [rbp-0x28],0x0
  212601:	74 50                	je     212653 <readStringRaw+0xe3>
  212603:	66 8b 45 d8          	mov    ax,WORD PTR [rbp-0x28]
  212607:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  21260e:	66 89 85 1e ff ff ff 	mov    WORD PTR [rbp-0xe2],ax
  212615:	e8 36 1e ff ff       	call   204450 <__zig_return_error>
  21261a:	66 8b 85 1e ff ff ff 	mov    ax,WORD PTR [rbp-0xe2]
  212621:	66 89 45 b8          	mov    WORD PTR [rbp-0x48],ax
  212625:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  212629:	48 8b 8d 30 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd0]
  212630:	48 89 39             	mov    QWORD PTR [rcx],rdi
  212633:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  212637:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21263b:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  21263f:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  212643:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21264a:	48 81 c4 f0 00 00 00 	add    rsp,0xf0
  212651:	5d                   	pop    rbp
  212652:	c3                   	ret    
  212653:	8a 45 da             	mov    al,BYTE PTR [rbp-0x26]
  212656:	88 85 3f ff ff ff    	mov    BYTE PTR [rbp-0xc1],al
        if (byte == 0) break;
  21265c:	80 bd 3f ff ff ff 00 	cmp    BYTE PTR [rbp-0xc1],0x0
  212663:	75 02                	jne    212667 <readStringRaw+0xf7>
  212665:	eb 7c                	jmp    2126e3 <readStringRaw+0x173>
  212667:	eb 00                	jmp    212669 <readStringRaw+0xf9>
  212669:	48 8d b5 40 ff ff ff 	lea    rsi,[rbp-0xc0]
        try buf.append(byte);
  212670:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  212677:	0f b6 95 3f ff ff ff 	movzx  edx,BYTE PTR [rbp-0xc1]
  21267e:	e8 9d 5a 00 00       	call   218120 <AlignedArrayList(u8,1)_append>
  212683:	66 89 45 b6          	mov    WORD PTR [rbp-0x4a],ax
  212687:	66 83 7d b6 00       	cmp    WORD PTR [rbp-0x4a],0x0
  21268c:	74 50                	je     2126de <readStringRaw+0x16e>
  21268e:	66 8b 45 b6          	mov    ax,WORD PTR [rbp-0x4a]
  212692:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  212699:	66 89 85 1c ff ff ff 	mov    WORD PTR [rbp-0xe4],ax
  2126a0:	e8 ab 1d ff ff       	call   204450 <__zig_return_error>
  2126a5:	66 8b 85 1c ff ff ff 	mov    ax,WORD PTR [rbp-0xe4]
  2126ac:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  2126b0:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  2126b4:	48 8b 8d 30 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd0]
  2126bb:	48 89 39             	mov    QWORD PTR [rcx],rdi
  2126be:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  2126c2:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  2126c6:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  2126ca:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  2126ce:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  2126d5:	48 81 c4 f0 00 00 00 	add    rsp,0xf0
  2126dc:	5d                   	pop    rbp
  2126dd:	c3                   	ret    
    while (true) {
  2126de:	e9 00 ff ff ff       	jmp    2125e3 <readStringRaw+0x73>
  2126e3:	48 8d 7d 88          	lea    rdi,[rbp-0x78]
  2126e7:	48 8d b5 40 ff ff ff 	lea    rsi,[rbp-0xc0]
    return buf.toSlice();
  2126ee:	e8 9d 5a 00 00       	call   218190 <AlignedArrayList(u8,1)_toSlice>
  2126f3:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  2126fa:	00 00 
  2126fc:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
  212700:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
  212707:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  21270b:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
  21270f:	48 8b b5 70 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x90]
  212716:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
  21271d:	48 89 37             	mov    QWORD PTR [rdi],rsi
  212720:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
  212727:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  21272b:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  21272f:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  212733:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21273a:	48 81 c4 f0 00 00 00 	add    rsp,0xf0
  212741:	5d                   	pop    rbp
  212742:	c3                   	ret    
  212743:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21274a:	84 00 00 00 00 00 

0000000000212750 <Allocator_alloc.36>:
    pub fn alloc(self: *Allocator, comptime T: type, n: usize) ![]T {
  212750:	55                   	push   rbp
  212751:	48 89 e5             	mov    rbp,rsp
  212754:	48 83 ec 40          	sub    rsp,0x40
  212758:	48 89 f8             	mov    rax,rdi
  21275b:	4c 8d 45 e8          	lea    r8,[rbp-0x18]
  21275f:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  212763:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
        return self.alignedAlloc(T, @alignOf(T), n);
  212767:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  21276b:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  21276f:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
  212773:	4c 89 c7             	mov    rdi,r8
  212776:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  21277a:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  21277e:	e8 cd b6 00 00       	call   21de50 <Allocator_alignedAlloc.86>
  212783:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  212788:	74 0b                	je     212795 <Allocator_alloc.36+0x45>
  21278a:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  21278e:	e8 bd 1c ff ff       	call   204450 <__zig_return_error>
  212793:	eb 02                	jmp    212797 <Allocator_alloc.36+0x47>
  212795:	eb 00                	jmp    212797 <Allocator_alloc.36+0x47>
  212797:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21279b:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  21279f:	48 89 01             	mov    QWORD PTR [rcx],rax
  2127a2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2127a6:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2127aa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2127ae:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  2127b2:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  2127b6:	48 83 c4 40          	add    rsp,0x40
  2127ba:	5d                   	pop    rbp
  2127bb:	c3                   	ret    
  2127bc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

00000000002127c0 <AlignedArrayList(Attr,8)_toSliceConst>:
        pub fn toSliceConst(self: Self) []align(A) const T {
  2127c0:	55                   	push   rbp
  2127c1:	48 89 e5             	mov    rbp,rsp
  2127c4:	48 83 ec 40          	sub    rsp,0x40
  2127c8:	48 89 f8             	mov    rax,rdi
  2127cb:	31 c9                	xor    ecx,ecx
  2127cd:	89 ca                	mov    edx,ecx
            return self.items[0..self.len];
  2127cf:	4c 8b 46 10          	mov    r8,QWORD PTR [rsi+0x10]
  2127d3:	4c 8b 4e 08          	mov    r9,QWORD PTR [rsi+0x8]
  2127d7:	4c 39 c2             	cmp    rdx,r8
  2127da:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  2127de:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  2127e2:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  2127e6:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
  2127ea:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
  2127ee:	76 10                	jbe    212800 <AlignedArrayList(Attr,8)_toSliceConst+0x40>
  2127f0:	48 8d 3d 09 2b 01 00 	lea    rdi,[rip+0x12b09]        # 225300 <__unnamed_4>
  2127f7:	31 c0                	xor    eax,eax
  2127f9:	89 c6                	mov    esi,eax
  2127fb:	e8 c0 08 ff ff       	call   2030c0 <panic>
  212800:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  212804:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  212808:	48 39 c8             	cmp    rax,rcx
  21280b:	76 10                	jbe    21281d <AlignedArrayList(Attr,8)_toSliceConst+0x5d>
  21280d:	48 8d 3d ec 2a 01 00 	lea    rdi,[rip+0x12aec]        # 225300 <__unnamed_4>
  212814:	31 c0                	xor    eax,eax
  212816:	89 c6                	mov    esi,eax
  212818:	e8 a3 08 ff ff       	call   2030c0 <panic>
  21281d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  212821:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  212824:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  212828:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  21282c:	48 83 e9 00          	sub    rcx,0x0
  212830:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  212834:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  212838:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  21283c:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  21283f:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  212843:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  212847:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21284b:	48 83 c4 40          	add    rsp,0x40
  21284f:	5d                   	pop    rbp
  212850:	c3                   	ret    
  212851:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  212858:	0f 1f 84 00 00 00 00 
  21285f:	00 

0000000000212860 <AlignedArrayList(CompileUnit,2)_addOne>:
        pub fn addOne(self: *Self) !*T {
  212860:	55                   	push   rbp
  212861:	48 89 e5             	mov    rbp,rsp
  212864:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  21286b:	48 89 f8             	mov    rax,rdi
  21286e:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            const new_length = self.len + 1;
  212872:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  212876:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  21287a:	48 83 c2 01          	add    rdx,0x1
  21287e:	0f 92 c1             	setb   cl
  212881:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  212885:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  212889:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  21288d:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  212891:	88 4d 9f             	mov    BYTE PTR [rbp-0x61],cl
  212894:	72 57                	jb     2128ed <AlignedArrayList(CompileUnit,2)_addOne+0x8d>
  212896:	eb 65                	jmp    2128fd <AlignedArrayList(CompileUnit,2)_addOne+0x9d>
            try self.ensureCapacity(new_length);
  212898:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  21289c:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  2128a0:	66 89 45 9c          	mov    WORD PTR [rbp-0x64],ax
  2128a4:	e8 a7 1b ff ff       	call   204450 <__zig_return_error>
  2128a9:	66 8b 45 9c          	mov    ax,WORD PTR [rbp-0x64]
  2128ad:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  2128b1:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  2128b5:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  2128b9:	48 89 39             	mov    QWORD PTR [rcx],rdi
  2128bc:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  2128c0:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  2128c4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  2128c8:	48 81 c4 80 00 00 00 	add    rsp,0x80
  2128cf:	5d                   	pop    rbp
  2128d0:	c3                   	ret    
            const result = &self.items[self.len];
  2128d1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2128d5:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  2128d9:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
  2128dd:	48 3b 48 08          	cmp    rcx,QWORD PTR [rax+0x8]
  2128e1:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  2128e5:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
  2128e9:	72 4c                	jb     212937 <AlignedArrayList(CompileUnit,2)_addOne+0xd7>
  2128eb:	eb 3a                	jmp    212927 <AlignedArrayList(CompileUnit,2)_addOne+0xc7>
  2128ed:	48 8d 3d 24 2a 01 00 	lea    rdi,[rip+0x12a24]        # 225318 <__unnamed_5>
  2128f4:	31 c0                	xor    eax,eax
  2128f6:	89 c6                	mov    esi,eax
            const new_length = self.len + 1;
  2128f8:	e8 c3 07 ff ff       	call   2030c0 <panic>
  2128fd:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  212901:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
            try self.ensureCapacity(new_length);
  212905:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  212909:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  21290d:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  212911:	e8 7a 00 00 00       	call   212990 <AlignedArrayList(CompileUnit,2)_ensureCapacity>
  212916:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  21291a:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  21291f:	0f 85 73 ff ff ff    	jne    212898 <AlignedArrayList(CompileUnit,2)_addOne+0x38>
  212925:	eb aa                	jmp    2128d1 <AlignedArrayList(CompileUnit,2)_addOne+0x71>
  212927:	48 8d 3d d2 29 01 00 	lea    rdi,[rip+0x129d2]        # 225300 <__unnamed_4>
  21292e:	31 c0                	xor    eax,eax
  212930:	89 c6                	mov    esi,eax
            const result = &self.items[self.len];
  212932:	e8 89 07 ff ff       	call   2030c0 <panic>
  212937:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  21293b:	48 6b c8 30          	imul   rcx,rax,0x30
  21293f:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
  212943:	48 03 0a             	add    rcx,QWORD PTR [rdx]
  212946:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
            self.len = new_length;
  21294a:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  21294e:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  212952:	48 89 71 10          	mov    QWORD PTR [rcx+0x10],rsi
            return result;
  212956:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  21295a:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  212960:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  212964:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  212968:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  21296c:	48 89 0e             	mov    QWORD PTR [rsi],rcx
  21296f:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  212973:	48 89 4e 08          	mov    QWORD PTR [rsi+0x8],rcx
  212977:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21297b:	48 81 c4 80 00 00 00 	add    rsp,0x80
  212982:	5d                   	pop    rbp
  212983:	c3                   	ret    
  212984:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21298b:	00 00 00 00 00 

0000000000212990 <AlignedArrayList(CompileUnit,2)_ensureCapacity>:
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  212990:	55                   	push   rbp
  212991:	48 89 e5             	mov    rbp,rsp
  212994:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  21299b:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  21299f:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
            var better_capacity = self.items.len;
  2129a3:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  2129a7:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  2129ab:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
            if (better_capacity >= new_capacity) return;
  2129af:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  2129b3:	48 3b 55 c0          	cmp    rdx,QWORD PTR [rbp-0x40]
  2129b7:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  2129bb:	72 11                	jb     2129ce <AlignedArrayList(CompileUnit,2)_ensureCapacity+0x3e>
  2129bd:	31 c0                	xor    eax,eax
  2129bf:	66 89 c1             	mov    cx,ax
  2129c2:	66 89 c8             	mov    ax,cx
  2129c5:	48 81 c4 90 00 00 00 	add    rsp,0x90
  2129cc:	5d                   	pop    rbp
  2129cd:	c3                   	ret    
            while (true) {
  2129ce:	eb 00                	jmp    2129d0 <AlignedArrayList(CompileUnit,2)_ensureCapacity+0x40>
  2129d0:	eb 00                	jmp    2129d2 <AlignedArrayList(CompileUnit,2)_ensureCapacity+0x42>
  2129d2:	31 c0                	xor    eax,eax
  2129d4:	88 c1                	mov    cl,al
                better_capacity += better_capacity / 2 + 8;
  2129d6:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  2129da:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  2129de:	f6 c1 01             	test   cl,0x1
  2129e1:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  2129e5:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  2129e9:	0f 85 8e 00 00 00    	jne    212a7d <AlignedArrayList(CompileUnit,2)_ensureCapacity+0xed>
  2129ef:	eb 72                	jmp    212a63 <AlignedArrayList(CompileUnit,2)_ensureCapacity+0xd3>
                if (better_capacity >= new_capacity) break;
  2129f1:	eb 02                	jmp    2129f5 <AlignedArrayList(CompileUnit,2)_ensureCapacity+0x65>
            while (true) {
  2129f3:	eb db                	jmp    2129d0 <AlignedArrayList(CompileUnit,2)_ensureCapacity+0x40>
  2129f5:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
            self.items = try self.allocator.alignedRealloc(T, A, self.items, better_capacity);
  2129f9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2129fd:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  212a01:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
  212a05:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  212a09:	4c 8b 45 b8          	mov    r8,QWORD PTR [rbp-0x48]
  212a0d:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  212a11:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  212a15:	e8 d6 00 00 00       	call   212af0 <Allocator_alignedRealloc.37>
  212a1a:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  212a1f:	74 1e                	je     212a3f <AlignedArrayList(CompileUnit,2)_ensureCapacity+0xaf>
  212a21:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  212a25:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  212a29:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  212a2d:	e8 1e 1a ff ff       	call   204450 <__zig_return_error>
  212a32:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  212a36:	48 81 c4 90 00 00 00 	add    rsp,0x90
  212a3d:	5d                   	pop    rbp
  212a3e:	c3                   	ret    
  212a3f:	31 c0                	xor    eax,eax
  212a41:	66 89 c1             	mov    cx,ax
  212a44:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  212a48:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  212a4c:	48 89 16             	mov    QWORD PTR [rsi],rdx
  212a4f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  212a53:	48 89 56 08          	mov    QWORD PTR [rsi+0x8],rdx
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  212a57:	66 89 c8             	mov    ax,cx
  212a5a:	48 81 c4 90 00 00 00 	add    rsp,0x90
  212a61:	5d                   	pop    rbp
  212a62:	c3                   	ret    
                better_capacity += better_capacity / 2 + 8;
  212a63:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  212a67:	48 c1 e8 01          	shr    rax,0x1
  212a6b:	48 83 c0 08          	add    rax,0x8
  212a6f:	0f 92 c1             	setb   cl
  212a72:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  212a76:	88 4d 87             	mov    BYTE PTR [rbp-0x79],cl
  212a79:	72 12                	jb     212a8d <AlignedArrayList(CompileUnit,2)_ensureCapacity+0xfd>
  212a7b:	eb 20                	jmp    212a9d <AlignedArrayList(CompileUnit,2)_ensureCapacity+0x10d>
  212a7d:	48 8d 3d f4 2a 01 00 	lea    rdi,[rip+0x12af4]        # 225578 <__unnamed_73>
  212a84:	31 c0                	xor    eax,eax
  212a86:	89 c6                	mov    esi,eax
  212a88:	e8 33 06 ff ff       	call   2030c0 <panic>
  212a8d:	48 8d 3d 84 28 01 00 	lea    rdi,[rip+0x12884]        # 225318 <__unnamed_5>
  212a94:	31 c0                	xor    eax,eax
  212a96:	89 c6                	mov    esi,eax
  212a98:	e8 23 06 ff ff       	call   2030c0 <panic>
  212a9d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  212aa1:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  212aa5:	48 01 c8             	add    rax,rcx
  212aa8:	0f 92 c2             	setb   dl
  212aab:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  212ab2:	88 95 77 ff ff ff    	mov    BYTE PTR [rbp-0x89],dl
  212ab8:	72 02                	jb     212abc <AlignedArrayList(CompileUnit,2)_ensureCapacity+0x12c>
  212aba:	eb 10                	jmp    212acc <AlignedArrayList(CompileUnit,2)_ensureCapacity+0x13c>
  212abc:	48 8d 3d 55 28 01 00 	lea    rdi,[rip+0x12855]        # 225318 <__unnamed_5>
  212ac3:	31 c0                	xor    eax,eax
  212ac5:	89 c6                	mov    esi,eax
  212ac7:	e8 f4 05 ff ff       	call   2030c0 <panic>
  212acc:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  212ad3:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                if (better_capacity >= new_capacity) break;
  212ad7:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  212adb:	48 3b 4d c0          	cmp    rcx,QWORD PTR [rbp-0x40]
  212adf:	0f 83 0c ff ff ff    	jae    2129f1 <AlignedArrayList(CompileUnit,2)_ensureCapacity+0x61>
  212ae5:	e9 09 ff ff ff       	jmp    2129f3 <AlignedArrayList(CompileUnit,2)_ensureCapacity+0x63>
  212aea:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000212af0 <Allocator_alignedRealloc.37>:
    pub fn alignedRealloc(self: *Allocator, comptime T: type, comptime alignment: u29, old_mem: []align(alignment) T, n: usize) ![]align(alignment) T {
  212af0:	55                   	push   rbp
  212af1:	48 89 e5             	mov    rbp,rsp
  212af4:	53                   	push   rbx
  212af5:	48 81 ec 88 01 00 00 	sub    rsp,0x188
  212afc:	48 89 f8             	mov    rax,rdi
  212aff:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
  212b06:	4c 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],r8
        if (old_mem.len == 0) {
  212b0d:	48 83 79 08 00       	cmp    QWORD PTR [rcx+0x8],0x0
  212b12:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  212b19:	48 89 b5 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rsi
  212b20:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
  212b27:	48 89 bd b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rdi
  212b2e:	75 64                	jne    212b94 <Allocator_alignedRealloc.37+0xa4>
  212b30:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
            return self.alignedAlloc(T, alignment, n);
  212b34:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  212b3b:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  212b42:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  212b49:	e8 22 04 00 00       	call   212f70 <Allocator_alignedAlloc.38>
  212b4e:	66 83 7d e0 00       	cmp    WORD PTR [rbp-0x20],0x0
  212b53:	74 0e                	je     212b63 <Allocator_alignedRealloc.37+0x73>
  212b55:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  212b5c:	e8 ef 18 ff ff       	call   204450 <__zig_return_error>
  212b61:	eb 02                	jmp    212b65 <Allocator_alignedRealloc.37+0x75>
  212b63:	eb 00                	jmp    212b65 <Allocator_alignedRealloc.37+0x75>
  212b65:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  212b69:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  212b70:	48 89 01             	mov    QWORD PTR [rcx],rax
  212b73:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  212b77:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  212b7b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  212b7f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  212b83:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  212b8a:	48 81 c4 88 01 00 00 	add    rsp,0x188
  212b91:	5b                   	pop    rbx
  212b92:	5d                   	pop    rbp
  212b93:	c3                   	ret    
        if (old_mem.len == 0) {
  212b94:	eb 00                	jmp    212b96 <Allocator_alignedRealloc.37+0xa6>
        if (n == 0) {
  212b96:	48 83 bd 10 ff ff ff 	cmp    QWORD PTR [rbp-0xf0],0x0
  212b9d:	00 
  212b9e:	75 4b                	jne    212beb <Allocator_alignedRealloc.37+0xfb>
            self.free(old_mem);
  212ba0:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
  212ba7:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  212bae:	e8 dd 06 00 00       	call   213290 <Allocator_free.39>
            return ([*]align(alignment) T)(undefined)[0..0];
  212bb3:	48 8b 35 a6 de fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffedea6]        # 200a60 <__unnamed_94>
  212bba:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  212bc1:	48 89 37             	mov    QWORD PTR [rdi],rsi
  212bc4:	48 8b 35 9d de fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffede9d]        # 200a68 <__unnamed_94+0x8>
  212bcb:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  212bcf:	48 8b 35 9a de fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffede9a]        # 200a70 <__unnamed_94+0x10>
  212bd6:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  212bda:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  212be1:	48 81 c4 88 01 00 00 	add    rsp,0x188
  212be8:	5b                   	pop    rbx
  212be9:	5d                   	pop    rbp
  212bea:	c3                   	ret    
        if (n == 0) {
  212beb:	eb 00                	jmp    212bed <Allocator_alignedRealloc.37+0xfd>
  212bed:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  212bf1:	b8 30 00 00 00       	mov    eax,0x30
  212bf6:	89 c2                	mov    edx,eax
        const old_byte_slice = @sliceToBytes(old_mem);
  212bf8:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  212bff:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  212c02:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  212c06:	48 6b 71 08 30       	imul   rsi,QWORD PTR [rcx+0x8],0x30
  212c0b:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  212c0f:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  212c13:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
  212c1a:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  212c1e:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  212c25:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  212c2c:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  212c33:	e8 f8 8f ff ff       	call   20bc30 <mul>
  212c38:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  212c3d:	74 44                	je     212c83 <Allocator_alignedRealloc.37+0x193>
  212c3f:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  212c46:	e8 05 18 ff ff       	call   204450 <__zig_return_error>
  212c4b:	48 8b 3d 26 de fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffede26]        # 200a78 <__unnamed_95>
  212c52:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  212c59:	48 89 38             	mov    QWORD PTR [rax],rdi
  212c5c:	48 8b 3d 1d de fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffede1d]        # 200a80 <__unnamed_95+0x8>
  212c63:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  212c67:	48 8b 3d 1a de fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffede1a]        # 200a88 <__unnamed_95+0x10>
  212c6e:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  212c72:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  212c79:	48 81 c4 88 01 00 00 	add    rsp,0x188
  212c80:	5b                   	pop    rbx
  212c81:	5d                   	pop    rbp
  212c82:	c3                   	ret    
  212c83:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  212c87:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  212c8e:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  212c92:	48 8d 8d 00 ff ff ff 	lea    rcx,[rbp-0x100]
  212c99:	41 b9 02 00 00 00    	mov    r9d,0x2
  212c9f:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  212ca6:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
        const byte_slice = try self.reallocFn(self, old_byte_slice, byte_count, alignment);
  212cad:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  212cb4:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  212cb8:	48 8b b5 18 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe8]
  212cbf:	4c 8b 85 f8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x108]
  212cc6:	4c 8b 95 c8 fe ff ff 	mov    r10,QWORD PTR [rbp-0x138]
  212ccd:	48 89 b5 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rsi
  212cd4:	4c 89 d6             	mov    rsi,r10
  212cd7:	4c 8b 9d a8 fe ff ff 	mov    r11,QWORD PTR [rbp-0x158]
  212cde:	48 89 95 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdx
  212ce5:	4c 89 da             	mov    rdx,r11
  212ce8:	48 8b 9d a0 fe ff ff 	mov    rbx,QWORD PTR [rbp-0x160]
  212cef:	ff d3                	call   rbx
  212cf1:	66 83 7d 98 00       	cmp    WORD PTR [rbp-0x68],0x0
  212cf6:	74 5d                	je     212d55 <Allocator_alignedRealloc.37+0x265>
  212cf8:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  212cfc:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  212d03:	66 89 85 9e fe ff ff 	mov    WORD PTR [rbp-0x162],ax
  212d0a:	e8 41 17 ff ff       	call   204450 <__zig_return_error>
  212d0f:	66 8b 85 9e fe ff ff 	mov    ax,WORD PTR [rbp-0x162]
  212d16:	66 89 85 68 ff ff ff 	mov    WORD PTR [rbp-0x98],ax
  212d1d:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  212d24:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  212d2b:	48 89 39             	mov    QWORD PTR [rcx],rdi
  212d2e:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  212d35:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  212d39:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  212d40:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  212d44:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  212d4b:	48 81 c4 88 01 00 00 	add    rsp,0x188
  212d52:	5b                   	pop    rbx
  212d53:	5d                   	pop    rbp
  212d54:	c3                   	ret    
  212d55:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  212d59:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  212d60:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  212d64:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
        assert(byte_slice.len == byte_count);
  212d6b:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  212d72:	48 3b 85 f8 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x108]
  212d79:	0f 94 c1             	sete   cl
  212d7c:	0f b6 f9             	movzx  edi,cl
  212d7f:	e8 7c 02 ff ff       	call   203000 <assert>
        if (n > old_mem.len) {
  212d84:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  212d8b:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  212d92:	48 3b 42 08          	cmp    rax,QWORD PTR [rdx+0x8]
  212d96:	76 71                	jbe    212e09 <Allocator_alignedRealloc.37+0x319>
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  212d98:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  212d9f:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  212da6:	48 39 c8             	cmp    rax,rcx
  212da9:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  212db0:	48 89 8d 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rcx
  212db7:	76 78                	jbe    212e31 <Allocator_alignedRealloc.37+0x341>
  212db9:	eb 66                	jmp    212e21 <Allocator_alignedRealloc.37+0x331>
  212dbb:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  212dc2:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
  212dc9:	48 39 c8             	cmp    rax,rcx
  212dcc:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  212dd3:	73 32                	jae    212e07 <Allocator_alignedRealloc.37+0x317>
  212dd5:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  212ddc:	48 03 8d 58 ff ff ff 	add    rcx,QWORD PTR [rbp-0xa8]
  212de3:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
                byte.* = undefined;
  212dea:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  212df1:	88 01                	mov    BYTE PTR [rcx],al
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  212df3:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  212dfa:	48 83 c1 01          	add    rcx,0x1
  212dfe:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
  212e05:	eb b4                	jmp    212dbb <Allocator_alignedRealloc.37+0x2cb>
        if (n > old_mem.len) {
  212e07:	eb 02                	jmp    212e0b <Allocator_alignedRealloc.37+0x31b>
  212e09:	eb 00                	jmp    212e0b <Allocator_alignedRealloc.37+0x31b>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  212e0b:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  212e12:	48 83 e0 01          	and    rax,0x1
  212e16:	48 83 f8 00          	cmp    rax,0x0
  212e1a:	74 7b                	je     212e97 <Allocator_alignedRealloc.37+0x3a7>
  212e1c:	e9 ae 00 00 00       	jmp    212ecf <Allocator_alignedRealloc.37+0x3df>
  212e21:	48 8d 3d d8 24 01 00 	lea    rdi,[rip+0x124d8]        # 225300 <__unnamed_4>
  212e28:	31 c0                	xor    eax,eax
  212e2a:	89 c6                	mov    esi,eax
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  212e2c:	e8 8f 02 ff ff       	call   2030c0 <panic>
  212e31:	be aa 00 00 00       	mov    esi,0xaa
  212e36:	b8 08 00 00 00       	mov    eax,0x8
  212e3b:	89 c2                	mov    edx,eax
  212e3d:	48 8d 8d e0 fe ff ff 	lea    rcx,[rbp-0x120]
  212e44:	48 8b bd 90 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x170]
  212e4b:	48 03 bd e8 fe ff ff 	add    rdi,QWORD PTR [rbp-0x118]
  212e52:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
  212e59:	48 8b bd 88 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x178]
  212e60:	4c 8b 85 90 fe ff ff 	mov    r8,QWORD PTR [rbp-0x170]
  212e67:	4c 29 c7             	sub    rdi,r8
  212e6a:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  212e71:	48 89 cf             	mov    rdi,rcx
  212e74:	e8 37 ee 00 00       	call   221cb0 <memset>
  212e79:	48 c7 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],0x0
  212e80:	00 00 00 00 
  212e84:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  212e8b:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  212e92:	e9 24 ff ff ff       	jmp    212dbb <Allocator_alignedRealloc.37+0x2cb>
  212e97:	b8 30 00 00 00       	mov    eax,0x30
  212e9c:	89 c1                	mov    ecx,eax
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  212e9e:	48 8b 95 e8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x118]
  212ea5:	48 89 95 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdx
  212eac:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  212eb3:	48 89 d0             	mov    rax,rdx
  212eb6:	31 f6                	xor    esi,esi
  212eb8:	48 89 95 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rdx
  212ebf:	89 f2                	mov    edx,esi
  212ec1:	48 f7 f1             	div    rcx
  212ec4:	48 83 fa 00          	cmp    rdx,0x0
  212ec8:	74 15                	je     212edf <Allocator_alignedRealloc.37+0x3ef>
  212eca:	e9 87 00 00 00       	jmp    212f56 <Allocator_alignedRealloc.37+0x466>
  212ecf:	48 8d 3d 5a 26 01 00 	lea    rdi,[rip+0x1265a]        # 225530 <__unnamed_60>
  212ed6:	31 c0                	xor    eax,eax
  212ed8:	89 c6                	mov    esi,eax
  212eda:	e8 e1 01 ff ff       	call   2030c0 <panic>
  212edf:	b8 30 00 00 00       	mov    eax,0x30
  212ee4:	89 c1                	mov    ecx,eax
  212ee6:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  212eed:	31 d2                	xor    edx,edx
  212eef:	48 f7 f1             	div    rcx
  212ef2:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  212ef9:	66 c7 85 20 ff ff ff 	mov    WORD PTR [rbp-0xe0],0x0
  212f00:	00 00 
  212f02:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  212f09:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  212f10:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  212f17:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  212f1e:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  212f25:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  212f2c:	48 89 01             	mov    QWORD PTR [rcx],rax
  212f2f:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  212f36:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  212f3a:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  212f41:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  212f45:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  212f4c:	48 81 c4 88 01 00 00 	add    rsp,0x188
  212f53:	5b                   	pop    rbx
  212f54:	5d                   	pop    rbp
  212f55:	c3                   	ret    
  212f56:	48 8d 3d eb 25 01 00 	lea    rdi,[rip+0x125eb]        # 225548 <__unnamed_61>
  212f5d:	31 c0                	xor    eax,eax
  212f5f:	89 c6                	mov    esi,eax
  212f61:	e8 5a 01 ff ff       	call   2030c0 <panic>
  212f66:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  212f6d:	00 00 00 

0000000000212f70 <Allocator_alignedAlloc.38>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  212f70:	55                   	push   rbp
  212f71:	48 89 e5             	mov    rbp,rsp
  212f74:	48 81 ec 20 01 00 00 	sub    rsp,0x120
  212f7b:	48 89 f8             	mov    rax,rdi
  212f7e:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  212f85:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  212f8c:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  212f93:	00 
  212f94:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  212f9b:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  212fa2:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  212fa9:	75 37                	jne    212fe2 <Allocator_alignedAlloc.38+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  212fab:	48 8b 05 de da fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffedade]        # 200a90 <__unnamed_96>
  212fb2:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  212fb9:	48 89 01             	mov    QWORD PTR [rcx],rax
  212fbc:	48 8b 05 d5 da fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffedad5]        # 200a98 <__unnamed_96+0x8>
  212fc3:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  212fc7:	48 8b 05 d2 da fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffedad2]        # 200aa0 <__unnamed_96+0x10>
  212fce:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  212fd2:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  212fd9:	48 81 c4 20 01 00 00 	add    rsp,0x120
  212fe0:	5d                   	pop    rbp
  212fe1:	c3                   	ret    
        if (n == 0) {
  212fe2:	eb 00                	jmp    212fe4 <Allocator_alignedAlloc.38+0x74>
  212fe4:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  212fe8:	b8 30 00 00 00       	mov    eax,0x30
  212fed:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  212fef:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  212ff6:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  212ffd:	e8 2e 8c ff ff       	call   20bc30 <mul>
  213002:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  213007:	74 43                	je     21304c <Allocator_alignedAlloc.38+0xdc>
  213009:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  213010:	e8 3b 14 ff ff       	call   204450 <__zig_return_error>
  213015:	48 8b 3d 8c da fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffeda8c]        # 200aa8 <__unnamed_97>
  21301c:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  213023:	48 89 38             	mov    QWORD PTR [rax],rdi
  213026:	48 8b 3d 83 da fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffeda83]        # 200ab0 <__unnamed_97+0x8>
  21302d:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  213031:	48 8b 3d 80 da fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffeda80]        # 200ab8 <__unnamed_97+0x10>
  213038:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  21303c:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  213043:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21304a:	5d                   	pop    rbp
  21304b:	c3                   	ret    
  21304c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  213050:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  213057:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  21305b:	41 b8 02 00 00 00    	mov    r8d,0x2
  213061:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  213068:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  21306f:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  213076:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  213079:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  213080:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  213087:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  21308e:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  213095:	4c 89 ce             	mov    rsi,r9
  213098:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  21309f:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  2130a6:	4c 89 d1             	mov    rcx,r10
  2130a9:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  2130b0:	41 ff d3             	call   r11
  2130b3:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  2130b8:	74 50                	je     21310a <Allocator_alignedAlloc.38+0x19a>
  2130ba:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  2130be:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  2130c5:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  2130cc:	e8 7f 13 ff ff       	call   204450 <__zig_return_error>
  2130d1:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  2130d8:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  2130dc:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  2130e0:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  2130e7:	48 89 39             	mov    QWORD PTR [rcx],rdi
  2130ea:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  2130ee:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  2130f2:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  2130f6:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  2130fa:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  213101:	48 81 c4 20 01 00 00 	add    rsp,0x120
  213108:	5d                   	pop    rbp
  213109:	c3                   	ret    
  21310a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  21310e:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  213115:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  213119:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  213120:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  213127:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  21312e:	0f 94 c1             	sete   cl
  213131:	0f b6 f9             	movzx  edi,cl
  213134:	e8 c7 fe fe ff       	call   203000 <assert>
  213139:	be aa 00 00 00       	mov    esi,0xaa
  21313e:	bf 08 00 00 00       	mov    edi,0x8
  213143:	89 fa                	mov    edx,edi
  213145:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  21314c:	48 89 c7             	mov    rdi,rax
  21314f:	e8 5c eb 00 00       	call   221cb0 <memset>
  213154:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  21315b:	00 00 00 00 
  21315f:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  213166:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  21316d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  213174:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  21317b:	48 39 c8             	cmp    rax,rcx
  21317e:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  213185:	73 32                	jae    2131b9 <Allocator_alignedAlloc.38+0x249>
  213187:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21318e:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  213195:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  21319c:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  2131a3:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  2131a5:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  2131ac:	48 83 c1 01          	add    rcx,0x1
  2131b0:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  2131b7:	eb b4                	jmp    21316d <Allocator_alignedAlloc.38+0x1fd>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  2131b9:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  2131c0:	48 83 e0 01          	and    rax,0x1
  2131c4:	48 83 f8 00          	cmp    rax,0x0
  2131c8:	75 32                	jne    2131fc <Allocator_alignedAlloc.38+0x28c>
  2131ca:	b8 30 00 00 00       	mov    eax,0x30
  2131cf:	89 c1                	mov    ecx,eax
  2131d1:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
  2131d8:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
  2131dc:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
  2131e3:	48 89 d0             	mov    rax,rdx
  2131e6:	31 f6                	xor    esi,esi
  2131e8:	48 89 95 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdx
  2131ef:	89 f2                	mov    edx,esi
  2131f1:	48 f7 f1             	div    rcx
  2131f4:	48 83 fa 00          	cmp    rdx,0x0
  2131f8:	74 12                	je     21320c <Allocator_alignedAlloc.38+0x29c>
  2131fa:	eb 77                	jmp    213273 <Allocator_alignedAlloc.38+0x303>
  2131fc:	48 8d 3d 2d 23 01 00 	lea    rdi,[rip+0x1232d]        # 225530 <__unnamed_60>
  213203:	31 c0                	xor    eax,eax
  213205:	89 c6                	mov    esi,eax
  213207:	e8 b4 fe fe ff       	call   2030c0 <panic>
  21320c:	b8 30 00 00 00       	mov    eax,0x30
  213211:	89 c1                	mov    ecx,eax
  213213:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  21321a:	31 d2                	xor    edx,edx
  21321c:	48 f7 f1             	div    rcx
  21321f:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  213223:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  21322a:	00 00 
  21322c:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  213230:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  213237:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  21323b:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  21323f:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  213246:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21324d:	48 89 01             	mov    QWORD PTR [rcx],rax
  213250:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  213257:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21325b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  21325f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  213263:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21326a:	48 81 c4 20 01 00 00 	add    rsp,0x120
  213271:	5d                   	pop    rbp
  213272:	c3                   	ret    
  213273:	48 8d 3d ce 22 01 00 	lea    rdi,[rip+0x122ce]        # 225548 <__unnamed_61>
  21327a:	31 c0                	xor    eax,eax
  21327c:	89 c6                	mov    esi,eax
  21327e:	e8 3d fe fe ff       	call   2030c0 <panic>
  213283:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21328a:	84 00 00 00 00 00 

0000000000213290 <Allocator_free.39>:
    pub fn free(self: *Allocator, memory: var) void {
  213290:	55                   	push   rbp
  213291:	48 89 e5             	mov    rbp,rsp
  213294:	48 83 ec 60          	sub    rsp,0x60
  213298:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
        const bytes = @sliceToBytes(memory);
  21329c:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  21329f:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  2132a3:	48 6b 76 08 30       	imul   rsi,QWORD PTR [rsi+0x8],0x30
  2132a8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2132ac:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  2132b0:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  2132b4:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2132b8:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        if (bytes.len == 0) return;
  2132bc:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
  2132c1:	75 06                	jne    2132c9 <Allocator_free.39+0x39>
  2132c3:	48 83 c4 60          	add    rsp,0x60
  2132c7:	5d                   	pop    rbp
  2132c8:	c3                   	ret    
  2132c9:	31 c0                	xor    eax,eax
  2132cb:	89 c1                	mov    ecx,eax
        const non_const_ptr = @intToPtr([*]u8, @ptrToInt(bytes.ptr));
  2132cd:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  2132d1:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
        self.freeFn(self, non_const_ptr[0..bytes.len]);
  2132d5:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  2132d9:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  2132dd:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  2132e1:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  2132e5:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
  2132e9:	48 39 f1             	cmp    rcx,rsi
  2132ec:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
  2132f0:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
  2132f4:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  2132f8:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  2132fc:	76 10                	jbe    21330e <Allocator_free.39+0x7e>
  2132fe:	48 8d 3d fb 1f 01 00 	lea    rdi,[rip+0x11ffb]        # 225300 <__unnamed_4>
  213305:	31 c0                	xor    eax,eax
  213307:	89 c6                	mov    esi,eax
  213309:	e8 b2 fd fe ff       	call   2030c0 <panic>
  21330e:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
  213312:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  213316:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  21331a:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  21331e:	48 83 e9 00          	sub    rcx,0x0
  213322:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  213326:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  21332a:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  21332e:	ff d1                	call   rcx
    pub fn free(self: *Allocator, memory: var) void {
  213330:	48 83 c4 60          	add    rsp,0x60
  213334:	5d                   	pop    rbp
  213335:	c3                   	ret    
  213336:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  21333d:	00 00 00 

0000000000213340 <format.40>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  213340:	55                   	push   rbp
  213341:	48 89 e5             	mov    rbp,rsp
  213344:	48 83 ec 40          	sub    rsp,0x40
  213348:	48 8d 05 41 22 01 00 	lea    rax,[rip+0x12241]        # 225590 <__unnamed_98>
  21334f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  213353:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
                        try output(context, fmt[start_index..i]);
  213357:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  21335b:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  21335f:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  213363:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  213367:	48 89 c2             	mov    rdx,rax
  21336a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21336e:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  213372:	ff d0                	call   rax
  213374:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  213378:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  21337d:	74 1b                	je     21339a <format.40+0x5a>
  21337f:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  213383:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  213387:	66 89 45 ce          	mov    WORD PTR [rbp-0x32],ax
  21338b:	e8 c0 10 ff ff       	call   204450 <__zig_return_error>
  213390:	66 8b 45 ce          	mov    ax,WORD PTR [rbp-0x32]
  213394:	48 83 c4 40          	add    rsp,0x40
  213398:	5d                   	pop    rbp
  213399:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  21339a:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21339e:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2133a2:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2133a6:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  2133aa:	e8 71 00 00 00       	call   213420 <formatType.41>
  2133af:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  2133b3:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  2133b8:	74 1b                	je     2133d5 <format.40+0x95>
  2133ba:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  2133be:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2133c2:	66 89 45 cc          	mov    WORD PTR [rbp-0x34],ax
  2133c6:	e8 85 10 ff ff       	call   204450 <__zig_return_error>
  2133cb:	66 8b 45 cc          	mov    ax,WORD PTR [rbp-0x34]
  2133cf:	48 83 c4 40          	add    rsp,0x40
  2133d3:	5d                   	pop    rbp
  2133d4:	c3                   	ret    
  2133d5:	48 8d 15 cc 21 01 00 	lea    rdx,[rip+0x121cc]        # 2255a8 <__unnamed_99>
        try output(context, fmt[start_index..]);
  2133dc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2133e0:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  2133e4:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2133e8:	ff d0                	call   rax
  2133ea:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  2133ee:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  2133f3:	74 1b                	je     213410 <format.40+0xd0>
  2133f5:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  2133f9:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2133fd:	66 89 45 ca          	mov    WORD PTR [rbp-0x36],ax
  213401:	e8 4a 10 ff ff       	call   204450 <__zig_return_error>
  213406:	66 8b 45 ca          	mov    ax,WORD PTR [rbp-0x36]
  21340a:	48 83 c4 40          	add    rsp,0x40
  21340e:	5d                   	pop    rbp
  21340f:	c3                   	ret    
  213410:	31 c0                	xor    eax,eax
  213412:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  213415:	66 89 c8             	mov    ax,cx
  213418:	48 83 c4 40          	add    rsp,0x40
  21341c:	5d                   	pop    rbp
  21341d:	c3                   	ret    
  21341e:	66 90                	xchg   ax,ax

0000000000213420 <formatType.41>:
pub fn formatType(
  213420:	55                   	push   rbp
  213421:	48 89 e5             	mov    rbp,rsp
  213424:	48 83 ec 30          	sub    rsp,0x30
  213428:	48 8d 45 e0          	lea    rax,[rbp-0x20]
  21342c:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  213430:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
                const casted_value = ([]const u8)(value);
  213434:	48 8b 0e             	mov    rcx,QWORD PTR [rsi]
  213437:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  21343b:	48 8b 4e 08          	mov    rcx,QWORD PTR [rsi+0x8]
  21343f:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
                return output(context, casted_value);
  213443:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  213447:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21344b:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  21344f:	48 89 c2             	mov    rdx,rax
  213452:	ff d1                	call   rcx
  213454:	66 83 f8 00          	cmp    ax,0x0
  213458:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  21345c:	74 0b                	je     213469 <formatType.41+0x49>
  21345e:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  213462:	e8 e9 0f ff ff       	call   204450 <__zig_return_error>
  213467:	eb 02                	jmp    21346b <formatType.41+0x4b>
  213469:	eb 00                	jmp    21346b <formatType.41+0x4b>
  21346b:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  21346f:	48 83 c4 30          	add    rsp,0x30
  213473:	5d                   	pop    rbp
  213474:	c3                   	ret    
  213475:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21347c:	00 00 00 00 

0000000000213480 <getEnvVarOwned>:
pub fn getEnvVarOwned(allocator: *mem.Allocator, key: []const u8) GetEnvVarOwnedError![]u8 {
  213480:	55                   	push   rbp
  213481:	48 89 e5             	mov    rbp,rsp
  213484:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  21348b:	48 89 f8             	mov    rax,rdi
  21348e:	4c 8d 45 e8          	lea    r8,[rbp-0x18]
  213492:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
        const result = getEnvPosix(key) orelse return error.EnvironmentVariableNotFound;
  213496:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
  21349a:	4c 89 c7             	mov    rdi,r8
  21349d:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
  2134a1:	48 89 ce             	mov    rsi,rcx
  2134a4:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  2134a8:	e8 c3 ac 00 00       	call   21e170 <getEnvPosix>
  2134ad:	f6 45 f8 01          	test   BYTE PTR [rbp-0x8],0x1
  2134b1:	75 3a                	jne    2134ed <getEnvVarOwned+0x6d>
  2134b3:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  2134b7:	e8 94 0f ff ff       	call   204450 <__zig_return_error>
  2134bc:	48 8b 3d 65 ec fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffeec65]        # 202128 <__unnamed_100>
  2134c3:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  2134c7:	48 89 38             	mov    QWORD PTR [rax],rdi
  2134ca:	48 8b 3d 5f ec fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffeec5f]        # 202130 <__unnamed_100+0x8>
  2134d1:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  2134d5:	48 8b 3d 5c ec fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffeec5c]        # 202138 <__unnamed_100+0x10>
  2134dc:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  2134e0:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  2134e4:	48 81 c4 80 00 00 00 	add    rsp,0x80
  2134eb:	5d                   	pop    rbp
  2134ec:	c3                   	ret    
  2134ed:	48 8d 45 e8          	lea    rax,[rbp-0x18]
  2134f1:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  2134f5:	48 8d 7d b8          	lea    rdi,[rbp-0x48]
  2134f9:	48 8d 4d a0          	lea    rcx,[rbp-0x60]
  2134fd:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  213501:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  213504:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  213508:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
  21350c:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
        return mem.dupe(allocator, u8, result);
  213510:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  213514:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  213518:	e8 53 af 00 00       	call   21e470 <dupe>
  21351d:	66 83 7d b8 00       	cmp    WORD PTR [rbp-0x48],0x0
  213522:	74 0b                	je     21352f <getEnvVarOwned+0xaf>
  213524:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  213528:	e8 23 0f ff ff       	call   204450 <__zig_return_error>
  21352d:	eb 02                	jmp    213531 <getEnvVarOwned+0xb1>
  21352f:	eb 00                	jmp    213531 <getEnvVarOwned+0xb1>
  213531:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  213535:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  213539:	48 89 01             	mov    QWORD PTR [rcx],rax
  21353c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  213540:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  213544:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  213548:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21354c:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  213550:	48 81 c4 80 00 00 00 	add    rsp,0x80
  213557:	5d                   	pop    rbp
  213558:	c3                   	ret    
  213559:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000213560 <File_isTty>:
    pub fn isTty(self: *File) bool {
  213560:	55                   	push   rbp
  213561:	48 89 e5             	mov    rbp,rsp
  213564:	48 83 ec 10          	sub    rsp,0x10
  213568:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
        return os.isTty(self.handle);
  21356c:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  213570:	8b 3f                	mov    edi,DWORD PTR [rdi]
  213572:	e8 f9 af 00 00       	call   21e570 <isTty>
  213577:	88 c1                	mov    cl,al
  213579:	88 4d f7             	mov    BYTE PTR [rbp-0x9],cl
  21357c:	48 83 c4 10          	add    rsp,0x10
  213580:	5d                   	pop    rbp
  213581:	c3                   	ret    
  213582:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  213589:	1f 84 00 00 00 00 00 

0000000000213590 <printSourceAtAddress>:
pub fn printSourceAtAddress(debug_info: *ElfStackTrace, out_stream: var, address: usize, tty_color: bool) !void {
  213590:	55                   	push   rbp
  213591:	48 89 e5             	mov    rbp,rsp
  213594:	48 81 ec c0 01 00 00 	sub    rsp,0x1c0
  21359b:	44 88 c0             	mov    al,r8b
  21359e:	4c 8d 4d f0          	lea    r9,[rbp-0x10]
  2135a2:	48 89 b5 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rsi
  2135a9:	48 89 95 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rdx
  2135b0:	48 89 8d 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rcx
  2135b7:	24 01                	and    al,0x1
  2135b9:	88 85 1f ff ff ff    	mov    BYTE PTR [rbp-0xe1],al
            const compile_unit = findCompileUnit(debug_info, address) catch {
  2135bf:	48 8b 95 30 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd0]
  2135c6:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  2135cd:	48 89 bd c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rdi
  2135d4:	4c 89 cf             	mov    rdi,r9
  2135d7:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  2135de:	e8 4d 06 00 00       	call   213c30 <findCompileUnit>
  2135e3:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  2135e8:	0f 84 b6 00 00 00    	je     2136a4 <printSourceAtAddress+0x114>
                if (tty_color) {
  2135ee:	f6 85 1f ff ff ff 01 	test   BYTE PTR [rbp-0xe1],0x1
  2135f5:	75 02                	jne    2135f9 <printSourceAtAddress+0x69>
  2135f7:	eb 4e                	jmp    213647 <printSourceAtAddress+0xb7>
                    try out_stream.print("???:?:?: " ++ DIM ++ "0x{x} in ??? (???)" ++ RESET ++ "\n    ???\n\n", address);
  2135f9:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  213600:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
  213607:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21360e:	e8 bd 0b 00 00       	call   2141d0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.42>
  213613:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  213617:	66 83 7d de 00       	cmp    WORD PTR [rbp-0x22],0x0
  21361c:	74 27                	je     213645 <printSourceAtAddress+0xb5>
  21361e:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  213622:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  213629:	66 89 85 be fe ff ff 	mov    WORD PTR [rbp-0x142],ax
  213630:	e8 1b 0e ff ff       	call   204450 <__zig_return_error>
  213635:	66 8b 85 be fe ff ff 	mov    ax,WORD PTR [rbp-0x142]
  21363c:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  213643:	5d                   	pop    rbp
  213644:	c3                   	ret    
                if (tty_color) {
  213645:	eb 4c                	jmp    213693 <printSourceAtAddress+0x103>
                    try out_stream.print("???:?:?: 0x{x} in ??? (???)\n    ???\n\n", address);
  213647:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21364e:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
  213655:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21365c:	e8 bf 0b 00 00       	call   214220 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.43>
  213661:	66 89 45 dc          	mov    WORD PTR [rbp-0x24],ax
  213665:	66 83 7d dc 00       	cmp    WORD PTR [rbp-0x24],0x0
  21366a:	74 27                	je     213693 <printSourceAtAddress+0x103>
  21366c:	66 8b 45 dc          	mov    ax,WORD PTR [rbp-0x24]
  213670:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  213677:	66 89 85 bc fe ff ff 	mov    WORD PTR [rbp-0x144],ax
  21367e:	e8 cd 0d ff ff       	call   204450 <__zig_return_error>
  213683:	66 8b 85 bc fe ff ff 	mov    ax,WORD PTR [rbp-0x144]
  21368a:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  213691:	5d                   	pop    rbp
  213692:	c3                   	ret    
  213693:	31 c0                	xor    eax,eax
  213695:	66 89 c1             	mov    cx,ax
                return;
  213698:	66 89 c8             	mov    ax,cx
  21369b:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  2136a2:	5d                   	pop    rbp
  2136a3:	c3                   	ret    
            const compile_unit = findCompileUnit(debug_info, address) catch {
  2136a4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2136a8:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  2136af:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  2136b3:	b8 03 00 00 00       	mov    eax,0x3
  2136b8:	41 89 c0             	mov    r8d,eax
  2136bb:	48 8b 8d b0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x150]
  2136c2:	48 89 8d 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rcx
            const compile_unit_name = try compile_unit.die.getAttrString(debug_info, DW.AT_name);
  2136c9:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
  2136d0:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  2136d4:	48 8b 8d 30 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd0]
  2136db:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  2136e2:	e8 89 0b 00 00       	call   214270 <Die_getAttrString>
  2136e7:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  2136ec:	74 27                	je     213715 <printSourceAtAddress+0x185>
  2136ee:	66 8b 45 c0          	mov    ax,WORD PTR [rbp-0x40]
  2136f2:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  2136f9:	66 89 85 ae fe ff ff 	mov    WORD PTR [rbp-0x152],ax
  213700:	e8 4b 0d ff ff       	call   204450 <__zig_return_error>
  213705:	66 8b 85 ae fe ff ff 	mov    ax,WORD PTR [rbp-0x152]
  21370c:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  213713:	5d                   	pop    rbp
  213714:	c3                   	ret    
  213715:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  213719:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
  213720:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  213724:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
            if (getLineNumberInfo(debug_info, compile_unit, address - 1)) |line_info| {
  21372b:	48 8b 95 30 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd0]
  213732:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  213739:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  213740:	48 83 e8 01          	sub    rax,0x1
  213744:	40 0f 92 c6          	setb   sil
  213748:	48 89 95 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdx
  21374f:	48 89 8d 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rcx
  213756:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  21375d:	40 88 b5 8f fe ff ff 	mov    BYTE PTR [rbp-0x171],sil
  213764:	0f 82 4b 04 00 00    	jb     213bb5 <printSourceAtAddress+0x625>
  21376a:	e9 56 04 00 00       	jmp    213bc5 <printSourceAtAddress+0x635>
  21376f:	b8 28 00 00 00       	mov    eax,0x28
  213774:	89 c2                	mov    edx,eax
  213776:	48 8d 8d d8 fe ff ff 	lea    rcx,[rbp-0x128]
  21377d:	48 8d b5 78 ff ff ff 	lea    rsi,[rbp-0x88]
  213784:	48 83 c6 08          	add    rsi,0x8
  213788:	48 89 cf             	mov    rdi,rcx
  21378b:	e8 70 e5 00 00       	call   221d00 <memcpy>
                if (tty_color) {
  213790:	f6 85 1f ff ff ff 01 	test   BYTE PTR [rbp-0xe1],0x1
  213797:	75 05                	jne    21379e <printSourceAtAddress+0x20e>
  213799:	e9 ac 02 00 00       	jmp    213a4a <printSourceAtAddress+0x4ba>
  21379e:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
  2137a5:	48 8d 8d d8 fe ff ff 	lea    rcx,[rbp-0x128]
                    try out_stream.print(
  2137ac:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
                        line_info.file_name,
  2137b3:	48 83 c1 10          	add    rcx,0x10
                        line_info.line,
  2137b7:	48 8b 95 d8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x128]
                        line_info.column,
  2137be:	4c 8b 85 e0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x120]
                        address,
  2137c5:	4c 8b 8d 20 ff ff ff 	mov    r9,QWORD PTR [rbp-0xe0]
                    try out_stream.print(
  2137cc:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  2137d3:	48 89 95 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rdx
  2137da:	48 89 ca             	mov    rdx,rcx
  2137dd:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
  2137e4:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  2137e8:	e8 b3 38 00 00       	call   2170a0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.44>
  2137ed:	66 89 85 46 ff ff ff 	mov    WORD PTR [rbp-0xba],ax
  2137f4:	66 83 bd 46 ff ff ff 	cmp    WORD PTR [rbp-0xba],0x0
  2137fb:	00 
  2137fc:	74 36                	je     213834 <printSourceAtAddress+0x2a4>
  2137fe:	48 8d bd d8 fe ff ff 	lea    rdi,[rbp-0x128]
                defer line_info.deinit();
  213805:	e8 16 39 00 00       	call   217120 <LineInfo_deinit>
                    try out_stream.print(
  21380a:	66 8b 85 46 ff ff ff 	mov    ax,WORD PTR [rbp-0xba]
  213811:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  213818:	66 89 85 7e fe ff ff 	mov    WORD PTR [rbp-0x182],ax
  21381f:	e8 2c 0c ff ff       	call   204450 <__zig_return_error>
  213824:	66 8b 85 7e fe ff ff 	mov    ax,WORD PTR [rbp-0x182]
  21382b:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  213832:	5d                   	pop    rbp
  213833:	c3                   	ret    
                    if (printLineFromFile(debug_info.allocator(), out_stream, line_info)) {
  213834:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
  21383b:	e8 40 8c ff ff       	call   20c480 <ElfStackTrace_allocator>
  213840:	48 8d 8d d8 fe ff ff 	lea    rcx,[rbp-0x128]
  213847:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
  21384e:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  213855:	48 89 c6             	mov    rsi,rax
  213858:	e8 f3 38 00 00       	call   217150 <printLineFromFile>
  21385d:	66 89 85 44 ff ff ff 	mov    WORD PTR [rbp-0xbc],ax
  213864:	66 83 bd 44 ff ff ff 	cmp    WORD PTR [rbp-0xbc],0x0
  21386b:	00 
  21386c:	0f 85 77 01 00 00    	jne    2139e9 <printSourceAtAddress+0x459>
                        if (line_info.column == 0) {
  213872:	48 83 bd e0 fe ff ff 	cmp    QWORD PTR [rbp-0x120],0x0
  213879:	00 
  21387a:	75 66                	jne    2138e2 <printSourceAtAddress+0x352>
  21387c:	48 8d 15 75 1d 01 00 	lea    rdx,[rip+0x11d75]        # 2255f8 <__unnamed_101>
                            try out_stream.write("\n");
  213883:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21388a:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  213891:	e8 6a 3c 00 00       	call   217500 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_write>
  213896:	66 89 85 42 ff ff ff 	mov    WORD PTR [rbp-0xbe],ax
  21389d:	66 83 bd 42 ff ff ff 	cmp    WORD PTR [rbp-0xbe],0x0
  2138a4:	00 
  2138a5:	74 36                	je     2138dd <printSourceAtAddress+0x34d>
  2138a7:	48 8d bd d8 fe ff ff 	lea    rdi,[rbp-0x128]
                defer line_info.deinit();
  2138ae:	e8 6d 38 00 00       	call   217120 <LineInfo_deinit>
                            try out_stream.write("\n");
  2138b3:	66 8b 85 42 ff ff ff 	mov    ax,WORD PTR [rbp-0xbe]
  2138ba:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  2138c1:	66 89 85 7c fe ff ff 	mov    WORD PTR [rbp-0x184],ax
  2138c8:	e8 83 0b ff ff       	call   204450 <__zig_return_error>
  2138cd:	66 8b 85 7c fe ff ff 	mov    ax,WORD PTR [rbp-0x184]
  2138d4:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  2138db:	5d                   	pop    rbp
  2138dc:	c3                   	ret    
                        if (line_info.column == 0) {
  2138dd:	e9 05 01 00 00       	jmp    2139e7 <printSourceAtAddress+0x457>
                                var col_i: usize = 1;
  2138e2:	48 c7 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],0x1
  2138e9:	01 00 00 00 
                                while (col_i < line_info.column) : (col_i += 1) {
  2138ed:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  2138f4:	48 3b 85 e0 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x120]
  2138fb:	0f 83 85 00 00 00    	jae    213986 <printSourceAtAddress+0x3f6>
  213901:	ba 20 00 00 00       	mov    edx,0x20
                                    try out_stream.writeByte(' ');
  213906:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21390d:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  213914:	e8 37 3c 00 00       	call   217550 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_writeByte>
  213919:	66 89 85 40 ff ff ff 	mov    WORD PTR [rbp-0xc0],ax
  213920:	66 83 bd 40 ff ff ff 	cmp    WORD PTR [rbp-0xc0],0x0
  213927:	00 
  213928:	74 36                	je     213960 <printSourceAtAddress+0x3d0>
  21392a:	48 8d bd d8 fe ff ff 	lea    rdi,[rbp-0x128]
                defer line_info.deinit();
  213931:	e8 ea 37 00 00       	call   217120 <LineInfo_deinit>
                                    try out_stream.writeByte(' ');
  213936:	66 8b 85 40 ff ff ff 	mov    ax,WORD PTR [rbp-0xc0]
  21393d:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  213944:	66 89 85 7a fe ff ff 	mov    WORD PTR [rbp-0x186],ax
  21394b:	e8 00 0b ff ff       	call   204450 <__zig_return_error>
  213950:	66 8b 85 7a fe ff ff 	mov    ax,WORD PTR [rbp-0x186]
  213957:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  21395e:	5d                   	pop    rbp
  21395f:	c3                   	ret    
                                while (col_i < line_info.column) : (col_i += 1) {
  213960:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  213967:	48 83 c0 01          	add    rax,0x1
  21396b:	0f 92 c1             	setb   cl
  21396e:	48 89 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rax
  213975:	88 8d 6f fe ff ff    	mov    BYTE PTR [rbp-0x191],cl
  21397b:	0f 82 7f 02 00 00    	jb     213c00 <printSourceAtAddress+0x670>
  213981:	e9 8a 02 00 00       	jmp    213c10 <printSourceAtAddress+0x680>
  213986:	48 8d 15 83 1c 01 00 	lea    rdx,[rip+0x11c83]        # 225610 <__unnamed_102>
                            try out_stream.write(GREEN ++ "^" ++ RESET ++ "\n");
  21398d:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  213994:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21399b:	e8 60 3b 00 00       	call   217500 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_write>
  2139a0:	66 89 85 3e ff ff ff 	mov    WORD PTR [rbp-0xc2],ax
  2139a7:	66 83 bd 3e ff ff ff 	cmp    WORD PTR [rbp-0xc2],0x0
  2139ae:	00 
  2139af:	74 36                	je     2139e7 <printSourceAtAddress+0x457>
  2139b1:	48 8d bd d8 fe ff ff 	lea    rdi,[rbp-0x128]
                defer line_info.deinit();
  2139b8:	e8 63 37 00 00       	call   217120 <LineInfo_deinit>
                            try out_stream.write(GREEN ++ "^" ++ RESET ++ "\n");
  2139bd:	66 8b 85 3e ff ff ff 	mov    ax,WORD PTR [rbp-0xc2]
  2139c4:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  2139cb:	66 89 85 6c fe ff ff 	mov    WORD PTR [rbp-0x194],ax
  2139d2:	e8 79 0a ff ff       	call   204450 <__zig_return_error>
  2139d7:	66 8b 85 6c fe ff ff 	mov    ax,WORD PTR [rbp-0x194]
  2139de:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  2139e5:	5d                   	pop    rbp
  2139e6:	c3                   	ret    
                    if (printLineFromFile(debug_info.allocator(), out_stream, line_info)) {
  2139e7:	eb 5c                	jmp    213a45 <printSourceAtAddress+0x4b5>
  2139e9:	66 8b 85 44 ff ff ff 	mov    ax,WORD PTR [rbp-0xbc]
  2139f0:	66 89 85 ce fe ff ff 	mov    WORD PTR [rbp-0x132],ax
                    } else |err| switch (err) {
  2139f7:	0f b7 8d ce fe ff ff 	movzx  ecx,WORD PTR [rbp-0x132]
  2139fe:	83 e9 24             	sub    ecx,0x24
  213a01:	89 8d 68 fe ff ff    	mov    DWORD PTR [rbp-0x198],ecx
  213a07:	74 38                	je     213a41 <printSourceAtAddress+0x4b1>
  213a09:	eb 00                	jmp    213a0b <printSourceAtAddress+0x47b>
  213a0b:	48 8d bd d8 fe ff ff 	lea    rdi,[rbp-0x128]
                        else => return err,
  213a12:	66 8b 85 ce fe ff ff 	mov    ax,WORD PTR [rbp-0x132]
                defer line_info.deinit();
  213a19:	66 89 85 66 fe ff ff 	mov    WORD PTR [rbp-0x19a],ax
  213a20:	e8 fb 36 00 00       	call   217120 <LineInfo_deinit>
                        else => return err,
  213a25:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  213a2c:	e8 1f 0a ff ff       	call   204450 <__zig_return_error>
  213a31:	66 8b 85 66 fe ff ff 	mov    ax,WORD PTR [rbp-0x19a]
  213a38:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  213a3f:	5d                   	pop    rbp
  213a40:	c3                   	ret    
                    } else |err| switch (err) {
  213a41:	eb 00                	jmp    213a43 <printSourceAtAddress+0x4b3>
                    if (printLineFromFile(debug_info.allocator(), out_stream, line_info)) {
  213a43:	eb 00                	jmp    213a45 <printSourceAtAddress+0x4b5>
                if (tty_color) {
  213a45:	e9 96 00 00 00       	jmp    213ae0 <printSourceAtAddress+0x550>
  213a4a:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
  213a51:	48 8d 8d d8 fe ff ff 	lea    rcx,[rbp-0x128]
                    try out_stream.print(
  213a58:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
                        line_info.file_name,
  213a5f:	48 83 c1 10          	add    rcx,0x10
                        line_info.line,
  213a63:	48 8b 95 d8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x128]
                        line_info.column,
  213a6a:	4c 8b 85 e0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x120]
                        address,
  213a71:	4c 8b 8d 20 ff ff ff 	mov    r9,QWORD PTR [rbp-0xe0]
                    try out_stream.print(
  213a78:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  213a7f:	48 89 95 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rdx
  213a86:	48 89 ca             	mov    rdx,rcx
  213a89:	48 8b 8d 58 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1a8]
  213a90:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  213a94:	e8 57 3b 00 00       	call   2175f0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.45>
  213a99:	66 89 85 3c ff ff ff 	mov    WORD PTR [rbp-0xc4],ax
  213aa0:	66 83 bd 3c ff ff ff 	cmp    WORD PTR [rbp-0xc4],0x0
  213aa7:	00 
  213aa8:	74 36                	je     213ae0 <printSourceAtAddress+0x550>
  213aaa:	48 8d bd d8 fe ff ff 	lea    rdi,[rbp-0x128]
                defer line_info.deinit();
  213ab1:	e8 6a 36 00 00       	call   217120 <LineInfo_deinit>
                    try out_stream.print(
  213ab6:	66 8b 85 3c ff ff ff 	mov    ax,WORD PTR [rbp-0xc4]
  213abd:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  213ac4:	66 89 85 56 fe ff ff 	mov    WORD PTR [rbp-0x1aa],ax
  213acb:	e8 80 09 ff ff       	call   204450 <__zig_return_error>
  213ad0:	66 8b 85 56 fe ff ff 	mov    ax,WORD PTR [rbp-0x1aa]
  213ad7:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  213ade:	5d                   	pop    rbp
  213adf:	c3                   	ret    
  213ae0:	48 8d bd d8 fe ff ff 	lea    rdi,[rbp-0x128]
                defer line_info.deinit();
  213ae7:	e8 34 36 00 00       	call   217120 <LineInfo_deinit>
            if (getLineNumberInfo(debug_info, compile_unit, address - 1)) |line_info| {
  213aec:	e9 b3 00 00 00       	jmp    213ba4 <printSourceAtAddress+0x614>
  213af1:	66 8b 85 78 ff ff ff 	mov    ax,WORD PTR [rbp-0x88]
  213af8:	66 89 85 cc fe ff ff 	mov    WORD PTR [rbp-0x134],ax
            } else |err| switch (err) {
  213aff:	0f b7 8d cc fe ff ff 	movzx  ecx,WORD PTR [rbp-0x134]
  213b06:	83 c1 de             	add    ecx,0xffffffde
  213b09:	66 89 c8             	mov    ax,cx
  213b0c:	0f b7 c8             	movzx  ecx,ax
  213b0f:	83 e9 02             	sub    ecx,0x2
  213b12:	89 8d 50 fe ff ff    	mov    DWORD PTR [rbp-0x1b0],ecx
  213b18:	72 2c                	jb     213b46 <printSourceAtAddress+0x5b6>
  213b1a:	eb 00                	jmp    213b1c <printSourceAtAddress+0x58c>
                else => return err,
  213b1c:	66 8b 85 cc fe ff ff 	mov    ax,WORD PTR [rbp-0x134]
  213b23:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  213b2a:	66 89 85 4e fe ff ff 	mov    WORD PTR [rbp-0x1b2],ax
  213b31:	e8 1a 09 ff ff       	call   204450 <__zig_return_error>
  213b36:	66 8b 85 4e fe ff ff 	mov    ax,WORD PTR [rbp-0x1b2]
  213b3d:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  213b44:	5d                   	pop    rbp
  213b45:	c3                   	ret    
  213b46:	48 8d 8d 00 ff ff ff 	lea    rcx,[rbp-0x100]
                    try out_stream.print("0x{x} in ??? ({})\n", address, compile_unit_name);
  213b4d:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  213b54:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
  213b5b:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  213b62:	e8 09 3b 00 00       	call   217670 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.46>
  213b67:	66 89 85 3a ff ff ff 	mov    WORD PTR [rbp-0xc6],ax
  213b6e:	66 83 bd 3a ff ff ff 	cmp    WORD PTR [rbp-0xc6],0x0
  213b75:	00 
  213b76:	74 2a                	je     213ba2 <printSourceAtAddress+0x612>
  213b78:	66 8b 85 3a ff ff ff 	mov    ax,WORD PTR [rbp-0xc6]
  213b7f:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  213b86:	66 89 85 4c fe ff ff 	mov    WORD PTR [rbp-0x1b4],ax
  213b8d:	e8 be 08 ff ff       	call   204450 <__zig_return_error>
  213b92:	66 8b 85 4c fe ff ff 	mov    ax,WORD PTR [rbp-0x1b4]
  213b99:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  213ba0:	5d                   	pop    rbp
  213ba1:	c3                   	ret    
            if (getLineNumberInfo(debug_info, compile_unit, address - 1)) |line_info| {
  213ba2:	eb 00                	jmp    213ba4 <printSourceAtAddress+0x614>
  213ba4:	31 c0                	xor    eax,eax
  213ba6:	66 89 c1             	mov    cx,ax
pub fn printSourceAtAddress(debug_info: *ElfStackTrace, out_stream: var, address: usize, tty_color: bool) !void {
  213ba9:	66 89 c8             	mov    ax,cx
  213bac:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  213bb3:	5d                   	pop    rbp
  213bb4:	c3                   	ret    
  213bb5:	48 8d 3d 5c 17 01 00 	lea    rdi,[rip+0x1175c]        # 225318 <__unnamed_5>
  213bbc:	31 c0                	xor    eax,eax
  213bbe:	89 c6                	mov    esi,eax
            if (getLineNumberInfo(debug_info, compile_unit, address - 1)) |line_info| {
  213bc0:	e8 fb f4 fe ff       	call   2030c0 <panic>
  213bc5:	48 8d bd 78 ff ff ff 	lea    rdi,[rbp-0x88]
  213bcc:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  213bd3:	48 8b 95 a0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x160]
  213bda:	48 8b 8d 98 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x168]
  213be1:	4c 8b 85 90 fe ff ff 	mov    r8,QWORD PTR [rbp-0x170]
  213be8:	e8 83 08 00 00       	call   214470 <getLineNumberInfo>
  213bed:	66 83 bd 78 ff ff ff 	cmp    WORD PTR [rbp-0x88],0x0
  213bf4:	00 
  213bf5:	0f 85 f6 fe ff ff    	jne    213af1 <printSourceAtAddress+0x561>
  213bfb:	e9 6f fb ff ff       	jmp    21376f <printSourceAtAddress+0x1df>
  213c00:	48 8d 3d 11 17 01 00 	lea    rdi,[rip+0x11711]        # 225318 <__unnamed_5>
  213c07:	31 c0                	xor    eax,eax
  213c09:	89 c6                	mov    esi,eax
                                while (col_i < line_info.column) : (col_i += 1) {
  213c0b:	e8 b0 f4 fe ff       	call   2030c0 <panic>
  213c10:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  213c17:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  213c1e:	e9 ca fc ff ff       	jmp    2138ed <printSourceAtAddress+0x35d>
  213c23:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  213c2a:	84 00 00 00 00 00 

0000000000213c30 <findCompileUnit>:
fn findCompileUnit(st: *ElfStackTrace, target_address: u64) !*const CompileUnit {
  213c30:	55                   	push   rbp
  213c31:	48 89 e5             	mov    rbp,rsp
  213c34:	48 81 ec d0 01 00 00 	sub    rsp,0x1d0
  213c3b:	48 89 f8             	mov    rax,rdi
  213c3e:	4c 8d 45 f0          	lea    r8,[rbp-0x10]
  213c42:	48 89 95 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rdx
  213c49:	48 89 8d f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rcx
    var in_file_stream = io.FileInStream.init(&st.self_exe_file);
  213c50:	48 8b 8d 00 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x100]
  213c57:	48 89 bd 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rdi
  213c5e:	4c 89 c7             	mov    rdi,r8
  213c61:	48 89 b5 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rsi
  213c68:	48 89 ce             	mov    rsi,rcx
  213c6b:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  213c72:	e8 19 66 ff ff       	call   20a290 <FileInStream_init>
  213c77:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
  213c7b:	48 8d 85 e8 fe ff ff 	lea    rax,[rbp-0x118]
  213c82:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  213c86:	48 89 8d e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rcx
  213c8d:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  213c91:	48 89 8d f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rcx
    const in_stream = &in_file_stream.stream;
  213c98:	48 83 c0 08          	add    rax,0x8
  213c9c:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
    for (st.compile_unit_list.toSlice()) |*compile_unit| {
  213ca3:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  213caa:	48 05 a8 00 00 00    	add    rax,0xa8
  213cb0:	48 89 c6             	mov    rsi,rax
  213cb3:	e8 18 3a 00 00       	call   2176d0 <AlignedArrayList(CompileUnit,2)_toSlice>
  213cb8:	be aa 00 00 00       	mov    esi,0xaa
  213cbd:	41 b9 08 00 00 00    	mov    r9d,0x8
  213cc3:	44 89 ca             	mov    edx,r9d
  213cc6:	48 8d 85 d8 fe ff ff 	lea    rax,[rbp-0x128]
  213ccd:	48 89 c7             	mov    rdi,rax
  213cd0:	e8 db df 00 00       	call   221cb0 <memset>
  213cd5:	48 c7 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],0x0
  213cdc:	00 00 00 00 
  213ce0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  213ce4:	48 89 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rax
  213ceb:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  213cf2:	48 8b 8d 70 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x190]
  213cf9:	48 39 c8             	cmp    rax,rcx
  213cfc:	48 89 85 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rax
  213d03:	0f 83 46 04 00 00    	jae    21414f <findCompileUnit+0x51f>
  213d09:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
  213d10:	48 6b c8 30          	imul   rcx,rax,0x30
  213d14:	48 03 4d e0          	add    rcx,QWORD PTR [rbp-0x20]
  213d18:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
        if (compile_unit.pc_range) |range| {
  213d1f:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
  213d26:	48 89 ca             	mov    rdx,rcx
  213d29:	48 83 c2 18          	add    rdx,0x18
  213d2d:	f6 41 28 01          	test   BYTE PTR [rcx+0x28],0x1
  213d31:	48 89 95 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rdx
  213d38:	75 05                	jne    213d3f <findCompileUnit+0x10f>
  213d3a:	e9 98 00 00 00       	jmp    213dd7 <findCompileUnit+0x1a7>
  213d3f:	48 8b 85 60 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a0]
  213d46:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  213d49:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
  213d50:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  213d54:	48 89 8d c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rcx
            if (target_address >= range.start and target_address < range.end) return compile_unit;
  213d5b:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  213d62:	48 3b 8d c0 fe ff ff 	cmp    rcx,QWORD PTR [rbp-0x140]
  213d69:	0f 93 c2             	setae  dl
  213d6c:	f6 c2 01             	test   dl,0x1
  213d6f:	88 95 5f fe ff ff    	mov    BYTE PTR [rbp-0x1a1],dl
  213d75:	75 02                	jne    213d79 <findCompileUnit+0x149>
  213d77:	eb 17                	jmp    213d90 <findCompileUnit+0x160>
  213d79:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  213d80:	48 3b 85 c8 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x138]
  213d87:	0f 92 c1             	setb   cl
  213d8a:	88 8d 5f fe ff ff    	mov    BYTE PTR [rbp-0x1a1],cl
  213d90:	8a 85 5f fe ff ff    	mov    al,BYTE PTR [rbp-0x1a1]
  213d96:	a8 01                	test   al,0x1
  213d98:	75 02                	jne    213d9c <findCompileUnit+0x16c>
  213d9a:	eb 37                	jmp    213dd3 <findCompileUnit+0x1a3>
  213d9c:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  213da3:	66 c7 45 c0 00 00    	mov    WORD PTR [rbp-0x40],0x0
  213da9:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  213dad:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  213db1:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
  213db8:	48 89 01             	mov    QWORD PTR [rcx],rax
  213dbb:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  213dbf:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  213dc3:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
  213dca:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  213dd1:	5d                   	pop    rbp
  213dd2:	c3                   	ret    
  213dd3:	eb 00                	jmp    213dd5 <findCompileUnit+0x1a5>
        if (compile_unit.pc_range) |range| {
  213dd5:	eb 02                	jmp    213dd9 <findCompileUnit+0x1a9>
  213dd7:	eb 00                	jmp    213dd9 <findCompileUnit+0x1a9>
  213dd9:	48 8d 7d b0          	lea    rdi,[rbp-0x50]
  213ddd:	b8 55 00 00 00       	mov    eax,0x55
  213de2:	89 c1                	mov    ecx,eax
        if (compile_unit.die.getAttrSecOffset(DW.AT_ranges)) |ranges_offset| {
  213de4:	48 8b 95 d8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x128]
  213deb:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  213def:	48 8b b5 80 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x180]
  213df6:	e8 75 39 00 00       	call   217770 <Die_getAttrSecOffset>
  213dfb:	66 83 7d b0 00       	cmp    WORD PTR [rbp-0x50],0x0
  213e00:	0f 85 c5 02 00 00    	jne    2140cb <findCompileUnit+0x49b>
  213e06:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  213e0a:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
            var base_address: usize = 0;
  213e11:	48 c7 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],0x0
  213e18:	00 00 00 00 
            if (st.debug_ranges) |debug_ranges| {
  213e1c:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  213e23:	48 89 c1             	mov    rcx,rax
  213e26:	48 81 c1 80 00 00 00 	add    rcx,0x80
  213e2d:	48 83 b8 80 00 00 00 	cmp    QWORD PTR [rax+0x80],0x0
  213e34:	00 
  213e35:	48 89 8d 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rcx
  213e3c:	0f 84 85 02 00 00    	je     2140c7 <findCompileUnit+0x497>
  213e42:	48 8b 85 50 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b0]
  213e49:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  213e4c:	48 89 8d a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rcx
                try st.self_exe_file.seekTo(debug_ranges.offset + ranges_offset);
  213e53:	48 8b b5 00 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x100]
  213e5a:	48 8b 8d a8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x158]
  213e61:	48 8b 49 18          	mov    rcx,QWORD PTR [rcx+0x18]
  213e65:	48 03 8d b8 fe ff ff 	add    rcx,QWORD PTR [rbp-0x148]
  213e6c:	0f 92 c2             	setb   dl
  213e6f:	48 89 b5 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rsi
  213e76:	48 89 8d 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rcx
  213e7d:	88 95 3f fe ff ff    	mov    BYTE PTR [rbp-0x1c1],dl
  213e83:	0f 82 fe 02 00 00    	jb     214187 <findCompileUnit+0x557>
  213e89:	e9 09 03 00 00       	jmp    214197 <findCompileUnit+0x567>
  213e8e:	66 8b 45 9e          	mov    ax,WORD PTR [rbp-0x62]
  213e92:	48 8b bd 80 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x180]
  213e99:	66 89 85 3c fe ff ff 	mov    WORD PTR [rbp-0x1c4],ax
  213ea0:	e8 ab 05 ff ff       	call   204450 <__zig_return_error>
  213ea5:	66 8b 85 3c fe ff ff 	mov    ax,WORD PTR [rbp-0x1c4]
  213eac:	66 89 45 88          	mov    WORD PTR [rbp-0x78],ax
  213eb0:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  213eb4:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
  213ebb:	48 89 39             	mov    QWORD PTR [rcx],rdi
  213ebe:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  213ec2:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  213ec6:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
  213ecd:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  213ed4:	5d                   	pop    rbp
  213ed5:	c3                   	ret    
                while (true) {
  213ed6:	eb 00                	jmp    213ed8 <findCompileUnit+0x2a8>
  213ed8:	48 8d bd 78 ff ff ff 	lea    rdi,[rbp-0x88]
                    const begin_addr = try in_stream.readIntLe(usize);
  213edf:	48 8b 95 e0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x120]
  213ee6:	48 8b b5 80 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x180]
  213eed:	e8 5e 3a 00 00       	call   217950 <InStream(ReadError)_readIntLe.47>
  213ef2:	66 83 bd 78 ff ff ff 	cmp    WORD PTR [rbp-0x88],0x0
  213ef9:	00 
  213efa:	74 54                	je     213f50 <findCompileUnit+0x320>
  213efc:	66 8b 85 78 ff ff ff 	mov    ax,WORD PTR [rbp-0x88]
  213f03:	48 8b bd 80 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x180]
  213f0a:	66 89 85 3a fe ff ff 	mov    WORD PTR [rbp-0x1c6],ax
  213f11:	e8 3a 05 ff ff       	call   204450 <__zig_return_error>
  213f16:	66 8b 85 3a fe ff ff 	mov    ax,WORD PTR [rbp-0x1c6]
  213f1d:	66 89 85 58 ff ff ff 	mov    WORD PTR [rbp-0xa8],ax
  213f24:	48 8b bd 58 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  213f2b:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
  213f32:	48 89 39             	mov    QWORD PTR [rcx],rdi
  213f35:	48 8b bd 60 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  213f3c:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  213f40:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
  213f47:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  213f4e:	5d                   	pop    rbp
  213f4f:	c3                   	ret    
  213f50:	48 8d bd 48 ff ff ff 	lea    rdi,[rbp-0xb8]
  213f57:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  213f5b:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
                    const end_addr = try in_stream.readIntLe(usize);
  213f62:	48 8b 95 e0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x120]
  213f69:	48 8b b5 80 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x180]
  213f70:	e8 db 39 00 00       	call   217950 <InStream(ReadError)_readIntLe.47>
  213f75:	66 83 bd 48 ff ff ff 	cmp    WORD PTR [rbp-0xb8],0x0
  213f7c:	00 
  213f7d:	74 54                	je     213fd3 <findCompileUnit+0x3a3>
  213f7f:	66 8b 85 48 ff ff ff 	mov    ax,WORD PTR [rbp-0xb8]
  213f86:	48 8b bd 80 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x180]
  213f8d:	66 89 85 38 fe ff ff 	mov    WORD PTR [rbp-0x1c8],ax
  213f94:	e8 b7 04 ff ff       	call   204450 <__zig_return_error>
  213f99:	66 8b 85 38 fe ff ff 	mov    ax,WORD PTR [rbp-0x1c8]
  213fa0:	66 89 85 28 ff ff ff 	mov    WORD PTR [rbp-0xd8],ax
  213fa7:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  213fae:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
  213fb5:	48 89 39             	mov    QWORD PTR [rcx],rdi
  213fb8:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
  213fbf:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  213fc3:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
  213fca:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  213fd1:	5d                   	pop    rbp
  213fd2:	c3                   	ret    
  213fd3:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  213fda:	48 89 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rax
                    if (begin_addr == 0 and end_addr == 0) {
  213fe1:	48 83 bd a0 fe ff ff 	cmp    QWORD PTR [rbp-0x160],0x0
  213fe8:	00 
  213fe9:	0f 94 c1             	sete   cl
  213fec:	f6 c1 01             	test   cl,0x1
  213fef:	88 8d 37 fe ff ff    	mov    BYTE PTR [rbp-0x1c9],cl
  213ff5:	75 02                	jne    213ff9 <findCompileUnit+0x3c9>
  213ff7:	eb 11                	jmp    21400a <findCompileUnit+0x3da>
  213ff9:	48 83 bd 98 fe ff ff 	cmp    QWORD PTR [rbp-0x168],0x0
  214000:	00 
  214001:	0f 94 c0             	sete   al
  214004:	88 85 37 fe ff ff    	mov    BYTE PTR [rbp-0x1c9],al
  21400a:	8a 85 37 fe ff ff    	mov    al,BYTE PTR [rbp-0x1c9]
  214010:	a8 01                	test   al,0x1
  214012:	75 02                	jne    214016 <findCompileUnit+0x3e6>
  214014:	eb 05                	jmp    21401b <findCompileUnit+0x3eb>
                        break;
  214016:	e9 aa 00 00 00       	jmp    2140c5 <findCompileUnit+0x495>
                    if (begin_addr == 0 and end_addr == 0) {
  21401b:	eb 00                	jmp    21401d <findCompileUnit+0x3ed>
                    if (begin_addr == @maxValue(usize)) {
  21401d:	48 83 bd a0 fe ff ff 	cmp    QWORD PTR [rbp-0x160],0xffffffffffffffff
  214024:	ff 
  214025:	75 13                	jne    21403a <findCompileUnit+0x40a>
                        base_address = begin_addr;
  214027:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
  21402e:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
                        continue;
  214035:	e9 9c fe ff ff       	jmp    213ed6 <findCompileUnit+0x2a6>
                    if (begin_addr == @maxValue(usize)) {
  21403a:	eb 00                	jmp    21403c <findCompileUnit+0x40c>
                    if (target_address >= begin_addr and target_address < end_addr) {
  21403c:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  214043:	48 3b 85 a0 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x160]
  21404a:	0f 93 c1             	setae  cl
  21404d:	f6 c1 01             	test   cl,0x1
  214050:	88 8d 36 fe ff ff    	mov    BYTE PTR [rbp-0x1ca],cl
  214056:	75 02                	jne    21405a <findCompileUnit+0x42a>
  214058:	eb 17                	jmp    214071 <findCompileUnit+0x441>
  21405a:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  214061:	48 3b 85 98 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x168]
  214068:	0f 92 c1             	setb   cl
  21406b:	88 8d 36 fe ff ff    	mov    BYTE PTR [rbp-0x1ca],cl
  214071:	8a 85 36 fe ff ff    	mov    al,BYTE PTR [rbp-0x1ca]
  214077:	a8 01                	test   al,0x1
  214079:	75 02                	jne    21407d <findCompileUnit+0x44d>
  21407b:	eb 43                	jmp    2140c0 <findCompileUnit+0x490>
                        return compile_unit;
  21407d:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  214084:	66 c7 85 18 ff ff ff 	mov    WORD PTR [rbp-0xe8],0x0
  21408b:	00 00 
  21408d:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
  214094:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  21409b:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
  2140a2:	48 89 01             	mov    QWORD PTR [rcx],rax
  2140a5:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  2140ac:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2140b0:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
  2140b7:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  2140be:	5d                   	pop    rbp
  2140bf:	c3                   	ret    
                while (true) {
  2140c0:	e9 11 fe ff ff       	jmp    213ed6 <findCompileUnit+0x2a6>
            if (st.debug_ranges) |debug_ranges| {
  2140c5:	eb 02                	jmp    2140c9 <findCompileUnit+0x499>
  2140c7:	eb 00                	jmp    2140c9 <findCompileUnit+0x499>
    for (st.compile_unit_list.toSlice()) |*compile_unit| {
  2140c9:	eb 6d                	jmp    214138 <findCompileUnit+0x508>
        if (compile_unit.die.getAttrSecOffset(DW.AT_ranges)) |ranges_offset| {
  2140cb:	66 8b 45 b0          	mov    ax,WORD PTR [rbp-0x50]
  2140cf:	66 89 85 96 fe ff ff 	mov    WORD PTR [rbp-0x16a],ax
            if (err != error.MissingDebugInfo) return err;
  2140d6:	66 83 bd 96 fe ff ff 	cmp    WORD PTR [rbp-0x16a],0x22
  2140dd:	22 
  2140de:	74 54                	je     214134 <findCompileUnit+0x504>
  2140e0:	66 8b 85 96 fe ff ff 	mov    ax,WORD PTR [rbp-0x16a]
  2140e7:	48 8b bd 80 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x180]
  2140ee:	66 89 85 34 fe ff ff 	mov    WORD PTR [rbp-0x1cc],ax
  2140f5:	e8 56 03 ff ff       	call   204450 <__zig_return_error>
  2140fa:	66 8b 85 34 fe ff ff 	mov    ax,WORD PTR [rbp-0x1cc]
  214101:	66 89 85 08 ff ff ff 	mov    WORD PTR [rbp-0xf8],ax
  214108:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
  21410f:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
  214116:	48 89 39             	mov    QWORD PTR [rcx],rdi
  214119:	48 8b bd 10 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf0]
  214120:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  214124:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
  21412b:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  214132:	5d                   	pop    rbp
  214133:	c3                   	ret    
  214134:	eb 00                	jmp    214136 <findCompileUnit+0x506>
            continue;
  214136:	eb 00                	jmp    214138 <findCompileUnit+0x508>
    for (st.compile_unit_list.toSlice()) |*compile_unit| {
  214138:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
  21413f:	48 83 c0 01          	add    rax,0x1
  214143:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  21414a:	e9 9c fb ff ff       	jmp    213ceb <findCompileUnit+0xbb>
    return error.MissingDebugInfo;
  21414f:	48 8b bd 80 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x180]
  214156:	e8 f5 02 ff ff       	call   204450 <__zig_return_error>
  21415b:	48 8b 3d ae e1 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffee1ae]        # 202310 <__unnamed_103>
  214162:	48 8b 85 88 fe ff ff 	mov    rax,QWORD PTR [rbp-0x178]
  214169:	48 89 38             	mov    QWORD PTR [rax],rdi
  21416c:	48 8b 3d a5 e1 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffee1a5]        # 202318 <__unnamed_103+0x8>
  214173:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  214177:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
  21417e:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  214185:	5d                   	pop    rbp
  214186:	c3                   	ret    
  214187:	48 8d 3d 8a 11 01 00 	lea    rdi,[rip+0x1118a]        # 225318 <__unnamed_5>
  21418e:	31 c0                	xor    eax,eax
  214190:	89 c6                	mov    esi,eax
                try st.self_exe_file.seekTo(debug_ranges.offset + ranges_offset);
  214192:	e8 29 ef fe ff       	call   2030c0 <panic>
  214197:	48 8b bd 80 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x180]
  21419e:	48 8b b5 48 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1b8]
  2141a5:	48 8b 95 40 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1c0]
  2141ac:	e8 bf 69 ff ff       	call   20ab70 <File_seekTo>
  2141b1:	66 89 45 9e          	mov    WORD PTR [rbp-0x62],ax
  2141b5:	66 83 7d 9e 00       	cmp    WORD PTR [rbp-0x62],0x0
  2141ba:	0f 85 ce fc ff ff    	jne    213e8e <findCompileUnit+0x25e>
  2141c0:	e9 11 fd ff ff       	jmp    213ed6 <findCompileUnit+0x2a6>
  2141c5:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2141cc:	00 00 00 00 

00000000002141d0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.42>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  2141d0:	55                   	push   rbp
  2141d1:	48 89 e5             	mov    rbp,rsp
  2141d4:	48 83 ec 20          	sub    rsp,0x20
  2141d8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2141dc:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
            return std.fmt.format(self, Error, self.writeFn, format, args);
  2141e0:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2141e4:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  2141e8:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
  2141eb:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  2141ef:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  2141f3:	e8 a8 3a 00 00       	call   217ca0 <format.50>
  2141f8:	66 83 f8 00          	cmp    ax,0x0
  2141fc:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
  214200:	74 0b                	je     21420d <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.42+0x3d>
  214202:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  214206:	e8 45 02 ff ff       	call   204450 <__zig_return_error>
  21420b:	eb 02                	jmp    21420f <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.42+0x3f>
  21420d:	eb 00                	jmp    21420f <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.42+0x3f>
  21420f:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
  214213:	48 83 c4 20          	add    rsp,0x20
  214217:	5d                   	pop    rbp
  214218:	c3                   	ret    
  214219:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000214220 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.43>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  214220:	55                   	push   rbp
  214221:	48 89 e5             	mov    rbp,rsp
  214224:	48 83 ec 20          	sub    rsp,0x20
  214228:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21422c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
            return std.fmt.format(self, Error, self.writeFn, format, args);
  214230:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  214234:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  214238:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
  21423b:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  21423f:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  214243:	e8 88 3b 00 00       	call   217dd0 <format.52>
  214248:	66 83 f8 00          	cmp    ax,0x0
  21424c:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
  214250:	74 0b                	je     21425d <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.43+0x3d>
  214252:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  214256:	e8 f5 01 ff ff       	call   204450 <__zig_return_error>
  21425b:	eb 02                	jmp    21425f <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.43+0x3f>
  21425d:	eb 00                	jmp    21425f <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.43+0x3f>
  21425f:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
  214263:	48 83 c4 20          	add    rsp,0x20
  214267:	5d                   	pop    rbp
  214268:	c3                   	ret    
  214269:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000214270 <Die_getAttrString>:
    fn getAttrString(self: *const Die, st: *ElfStackTrace, id: u64) ![]u8 {
  214270:	55                   	push   rbp
  214271:	48 89 e5             	mov    rbp,rsp
  214274:	48 81 ec c0 00 00 00 	sub    rsp,0xc0
  21427b:	48 89 f8             	mov    rax,rdi
  21427e:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
  214282:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
  214286:	4c 89 45 b0          	mov    QWORD PTR [rbp-0x50],r8
        const form_value = self.getAttr(id) orelse return error.MissingDebugInfo;
  21428a:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  21428e:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  214292:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
  214296:	48 89 cf             	mov    rdi,rcx
  214299:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
  21429d:	48 89 d6             	mov    rsi,rdx
  2142a0:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  2142a7:	e8 e4 89 ff ff       	call   20cc90 <Die_getAttr>
  2142ac:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  2142b0:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
  2142b5:	75 3d                	jne    2142f4 <Die_getAttrString+0x84>
  2142b7:	48 8b 7d 80          	mov    rdi,QWORD PTR [rbp-0x80]
  2142bb:	e8 90 01 ff ff       	call   204450 <__zig_return_error>
  2142c0:	48 8b 3d 51 c9 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffec951]        # 200c18 <__unnamed_104>
  2142c7:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  2142cb:	48 89 38             	mov    QWORD PTR [rax],rdi
  2142ce:	48 8b 3d 4b c9 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffec94b]        # 200c20 <__unnamed_104+0x8>
  2142d5:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  2142d9:	48 8b 3d 48 c9 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffec948]        # 200c28 <__unnamed_104+0x10>
  2142e0:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  2142e4:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  2142eb:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  2142f2:	5d                   	pop    rbp
  2142f3:	c3                   	ret    
  2142f4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2142f8:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  2142ff:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  214306:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
        return switch (form_value.*) {
  21430a:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  21430e:	8a 51 18             	mov    dl,BYTE PTR [rcx+0x18]
  214311:	40 88 d6             	mov    sil,dl
  214314:	40 80 ee 09          	sub    sil,0x9
  214318:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
  21431f:	88 95 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],dl
  214325:	40 88 b5 66 ff ff ff 	mov    BYTE PTR [rbp-0x9a],sil
  21432c:	74 26                	je     214354 <Die_getAttrString+0xe4>
  21432e:	eb 00                	jmp    214330 <Die_getAttrString+0xc0>
  214330:	8a 85 67 ff ff ff    	mov    al,BYTE PTR [rbp-0x99]
  214336:	24 0f                	and    al,0xf
  214338:	2c 0a                	sub    al,0xa
  21433a:	88 85 65 ff ff ff    	mov    BYTE PTR [rbp-0x9b],al
  214340:	74 2c                	je     21436e <Die_getAttrString+0xfe>
  214342:	eb 00                	jmp    214344 <Die_getAttrString+0xd4>
  214344:	48 8d 05 e5 c8 fe ff 	lea    rax,[rip+0xfffffffffffec8e5]        # 200c30 <__unnamed_105>
  21434b:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  214352:	eb 38                	jmp    21438c <Die_getAttrString+0x11c>
            FormValue.String => |value| value,
  214354:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  21435b:	8a 48 18             	mov    cl,BYTE PTR [rax+0x18]
  21435e:	80 e9 09             	sub    cl,0x9
  214361:	88 8d 57 ff ff ff    	mov    BYTE PTR [rbp-0xa9],cl
  214367:	74 75                	je     2143de <Die_getAttrString+0x16e>
  214369:	e9 ac 00 00 00       	jmp    21441a <Die_getAttrString+0x1aa>
            FormValue.StrPtr => |offset| getString(st, offset),
  21436e:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  214375:	8a 48 18             	mov    cl,BYTE PTR [rax+0x18]
  214378:	80 e9 0a             	sub    cl,0xa
  21437b:	88 8d 56 ff ff ff    	mov    BYTE PTR [rbp-0xaa],cl
  214381:	0f 84 a3 00 00 00    	je     21442a <Die_getAttrString+0x1ba>
  214387:	e9 d1 00 00 00       	jmp    21445d <Die_getAttrString+0x1ed>
        return switch (form_value.*) {
  21438c:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
  214393:	66 83 38 00          	cmp    WORD PTR [rax],0x0
  214397:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  21439e:	74 0b                	je     2143ab <Die_getAttrString+0x13b>
  2143a0:	48 8b 7d 80          	mov    rdi,QWORD PTR [rbp-0x80]
  2143a4:	e8 a7 00 ff ff       	call   204450 <__zig_return_error>
  2143a9:	eb 02                	jmp    2143ad <Die_getAttrString+0x13d>
  2143ab:	eb 00                	jmp    2143ad <Die_getAttrString+0x13d>
  2143ad:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  2143b4:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  2143b7:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
  2143bb:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  2143be:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  2143c2:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  2143c6:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
  2143ca:	48 89 4a 10          	mov    QWORD PTR [rdx+0x10],rcx
  2143ce:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  2143d5:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  2143dc:	5d                   	pop    rbp
  2143dd:	c3                   	ret    
  2143de:	48 8d 45 c8          	lea    rax,[rbp-0x38]
            FormValue.String => |value| value,
  2143e2:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  2143e9:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
  2143ec:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  2143f0:	48 8b 51 08          	mov    rdx,QWORD PTR [rcx+0x8]
  2143f4:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  2143f8:	66 c7 45 c8 00 00    	mov    WORD PTR [rbp-0x38],0x0
  2143fe:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  214402:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  214406:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  21440a:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
        return switch (form_value.*) {
  21440e:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  214415:	e9 72 ff ff ff       	jmp    21438c <Die_getAttrString+0x11c>
  21441a:	48 8d 3d 3f 11 01 00 	lea    rdi,[rip+0x1113f]        # 225560 <__unnamed_17>
  214421:	31 c0                	xor    eax,eax
  214423:	89 c6                	mov    esi,eax
            FormValue.String => |value| value,
  214425:	e8 96 ec fe ff       	call   2030c0 <panic>
  21442a:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
            FormValue.StrPtr => |offset| getString(st, offset),
  21442e:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  214435:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  214438:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
  21443c:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  214440:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  214444:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  214448:	e8 b3 3a 00 00       	call   217f00 <getString>
  21444d:	48 8d 45 e0          	lea    rax,[rbp-0x20]
        return switch (form_value.*) {
  214451:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  214458:	e9 2f ff ff ff       	jmp    21438c <Die_getAttrString+0x11c>
  21445d:	48 8d 3d fc 10 01 00 	lea    rdi,[rip+0x110fc]        # 225560 <__unnamed_17>
  214464:	31 c0                	xor    eax,eax
  214466:	89 c6                	mov    esi,eax
            FormValue.StrPtr => |offset| getString(st, offset),
  214468:	e8 53 ec fe ff       	call   2030c0 <panic>
  21446d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000214470 <getLineNumberInfo>:
fn getLineNumberInfo(st: *ElfStackTrace, compile_unit: *const CompileUnit, target_address: usize) !LineInfo {
  214470:	55                   	push   rbp
  214471:	48 89 e5             	mov    rbp,rsp
  214474:	48 81 ec f0 16 00 00 	sub    rsp,0x16f0
  21447b:	48 89 f8             	mov    rax,rdi
  21447e:	4c 8d 4d e8          	lea    r9,[rbp-0x18]
  214482:	41 ba 1b 00 00 00    	mov    r10d,0x1b
  214488:	45 89 d3             	mov    r11d,r10d
  21448b:	48 89 95 f0 f0 ff ff 	mov    QWORD PTR [rbp-0xf10],rdx
  214492:	48 89 8d e8 f0 ff ff 	mov    QWORD PTR [rbp-0xf18],rcx
  214499:	4c 89 85 e0 f0 ff ff 	mov    QWORD PTR [rbp-0xf20],r8
    const compile_unit_cwd = try compile_unit.die.getAttrString(st, DW.AT_comp_dir);
  2144a0:	48 8b 8d e8 f0 ff ff 	mov    rcx,QWORD PTR [rbp-0xf18]
  2144a7:	48 8b 51 08          	mov    rdx,QWORD PTR [rcx+0x8]
  2144ab:	48 8b 8d f0 f0 ff ff 	mov    rcx,QWORD PTR [rbp-0xf10]
  2144b2:	48 89 bd 60 ee ff ff 	mov    QWORD PTR [rbp-0x11a0],rdi
  2144b9:	4c 89 cf             	mov    rdi,r9
  2144bc:	48 89 b5 58 ee ff ff 	mov    QWORD PTR [rbp-0x11a8],rsi
  2144c3:	4d 89 d8             	mov    r8,r11
  2144c6:	48 89 85 50 ee ff ff 	mov    QWORD PTR [rbp-0x11b0],rax
  2144cd:	e8 9e fd ff ff       	call   214270 <Die_getAttrString>
  2144d2:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  2144d7:	74 5a                	je     214533 <getLineNumberInfo+0xc3>
  2144d9:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  2144dd:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  2144e4:	66 89 85 4e ee ff ff 	mov    WORD PTR [rbp-0x11b2],ax
  2144eb:	e8 60 ff fe ff       	call   204450 <__zig_return_error>
  2144f0:	b9 30 00 00 00       	mov    ecx,0x30
  2144f5:	89 ca                	mov    edx,ecx
  2144f7:	48 8d 7d a0          	lea    rdi,[rbp-0x60]
  2144fb:	66 8b 85 4e ee ff ff 	mov    ax,WORD PTR [rbp-0x11b2]
  214502:	66 89 45 a0          	mov    WORD PTR [rbp-0x60],ax
  214506:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21450d:	48 89 bd 40 ee ff ff 	mov    QWORD PTR [rbp-0x11c0],rdi
  214514:	48 89 f7             	mov    rdi,rsi
  214517:	48 8b b5 40 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11c0]
  21451e:	e8 dd d7 00 00       	call   221d00 <memcpy>
  214523:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21452a:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  214531:	5d                   	pop    rbp
  214532:	c3                   	ret    
  214533:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  214537:	48 89 85 d0 f0 ff ff 	mov    QWORD PTR [rbp-0xf30],rax
  21453e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  214542:	48 89 85 d8 f0 ff ff 	mov    QWORD PTR [rbp-0xf28],rax
    const in_file = &st.self_exe_file;
  214549:	48 8b 85 f0 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xf10]
  214550:	48 89 85 c8 f0 ff ff 	mov    QWORD PTR [rbp-0xf38],rax
    const debug_line_end = st.debug_line.offset + st.debug_line.size;
  214557:	48 8b 85 f0 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xf10]
  21455e:	48 8b 40 78          	mov    rax,QWORD PTR [rax+0x78]
  214562:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  214566:	48 8b 8d f0 f0 ff ff 	mov    rcx,QWORD PTR [rbp-0xf10]
  21456d:	48 8b 49 78          	mov    rcx,QWORD PTR [rcx+0x78]
  214571:	48 03 41 20          	add    rax,QWORD PTR [rcx+0x20]
  214575:	0f 92 c2             	setb   dl
  214578:	48 89 85 38 ee ff ff 	mov    QWORD PTR [rbp-0x11c8],rax
  21457f:	88 95 37 ee ff ff    	mov    BYTE PTR [rbp-0x11c9],dl
  214585:	0f 82 3d 24 00 00    	jb     2169c8 <getLineNumberInfo+0x2558>
  21458b:	e9 48 24 00 00       	jmp    2169d8 <getLineNumberInfo+0x2568>
    while (this_offset < debug_line_end) : (this_index += 1) {
  214590:	48 8b 85 b8 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xf48]
  214597:	48 3b 85 c0 f0 ff ff 	cmp    rax,QWORD PTR [rbp-0xf40]
  21459e:	0f 83 dd 23 00 00    	jae    216981 <getLineNumberInfo+0x2511>
        try in_file.seekTo(this_offset);
  2145a4:	48 8b b5 c8 f0 ff ff 	mov    rsi,QWORD PTR [rbp-0xf38]
  2145ab:	48 8b 95 b8 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf48]
  2145b2:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  2145b9:	e8 b2 65 ff ff       	call   20ab70 <File_seekTo>
  2145be:	66 89 45 8e          	mov    WORD PTR [rbp-0x72],ax
  2145c2:	66 83 7d 8e 00       	cmp    WORD PTR [rbp-0x72],0x0
  2145c7:	74 60                	je     214629 <getLineNumberInfo+0x1b9>
  2145c9:	66 8b 45 8e          	mov    ax,WORD PTR [rbp-0x72]
  2145cd:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  2145d4:	66 89 85 34 ee ff ff 	mov    WORD PTR [rbp-0x11cc],ax
  2145db:	e8 70 fe fe ff       	call   204450 <__zig_return_error>
  2145e0:	b9 30 00 00 00       	mov    ecx,0x30
  2145e5:	89 ca                	mov    edx,ecx
  2145e7:	48 8d bd 58 ff ff ff 	lea    rdi,[rbp-0xa8]
  2145ee:	66 8b 85 34 ee ff ff 	mov    ax,WORD PTR [rbp-0x11cc]
  2145f5:	66 89 85 58 ff ff ff 	mov    WORD PTR [rbp-0xa8],ax
  2145fc:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  214603:	48 89 bd 28 ee ff ff 	mov    QWORD PTR [rbp-0x11d8],rdi
  21460a:	48 89 f7             	mov    rdi,rsi
  21460d:	48 8b b5 28 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11d8]
  214614:	e8 e7 d6 00 00       	call   221d00 <memcpy>
  214619:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  214620:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  214627:	5d                   	pop    rbp
  214628:	c3                   	ret    
  214629:	48 8d bd 48 ff ff ff 	lea    rdi,[rbp-0xb8]
  214630:	48 8d 85 97 f0 ff ff 	lea    rax,[rbp-0xf69]
  214637:	be aa 00 00 00       	mov    esi,0xaa
  21463c:	b9 01 00 00 00       	mov    ecx,0x1
  214641:	89 ca                	mov    edx,ecx
        var is_64: bool = undefined;
  214643:	49 89 c0             	mov    r8,rax
  214646:	48 89 bd 20 ee ff ff 	mov    QWORD PTR [rbp-0x11e0],rdi
  21464d:	4c 89 c7             	mov    rdi,r8
  214650:	48 89 85 18 ee ff ff 	mov    QWORD PTR [rbp-0x11e8],rax
  214657:	e8 54 d6 00 00       	call   221cb0 <memset>
        const unit_length = try readInitialLength(@typeOf(in_stream.readFn).ReturnType.ErrorSet, in_stream, &is_64);
  21465c:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  214663:	48 8b bd 20 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11e0]
  21466a:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  214671:	48 8b 8d 18 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x11e8]
  214678:	e8 53 77 ff ff       	call   20bdd0 <readInitialLength>
  21467d:	66 83 bd 48 ff ff ff 	cmp    WORD PTR [rbp-0xb8],0x0
  214684:	00 
  214685:	74 63                	je     2146ea <getLineNumberInfo+0x27a>
  214687:	66 8b 85 48 ff ff ff 	mov    ax,WORD PTR [rbp-0xb8]
  21468e:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  214695:	66 89 85 16 ee ff ff 	mov    WORD PTR [rbp-0x11ea],ax
  21469c:	e8 af fd fe ff       	call   204450 <__zig_return_error>
  2146a1:	b9 30 00 00 00       	mov    ecx,0x30
  2146a6:	89 ca                	mov    edx,ecx
  2146a8:	48 8d bd 08 ff ff ff 	lea    rdi,[rbp-0xf8]
  2146af:	66 8b 85 16 ee ff ff 	mov    ax,WORD PTR [rbp-0x11ea]
  2146b6:	66 89 85 08 ff ff ff 	mov    WORD PTR [rbp-0xf8],ax
  2146bd:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  2146c4:	48 89 bd 08 ee ff ff 	mov    QWORD PTR [rbp-0x11f8],rdi
  2146cb:	48 89 f7             	mov    rdi,rsi
  2146ce:	48 8b b5 08 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11f8]
  2146d5:	e8 26 d6 00 00       	call   221d00 <memcpy>
  2146da:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  2146e1:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  2146e8:	5d                   	pop    rbp
  2146e9:	c3                   	ret    
  2146ea:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  2146f1:	48 89 85 88 f0 ff ff 	mov    QWORD PTR [rbp-0xf78],rax
        if (unit_length == 0) return error.MissingDebugInfo;
  2146f8:	48 83 bd 88 f0 ff ff 	cmp    QWORD PTR [rbp-0xf78],0x0
  2146ff:	00 
  214700:	75 47                	jne    214749 <getLineNumberInfo+0x2d9>
  214702:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  214709:	e8 42 fd fe ff       	call   204450 <__zig_return_error>
  21470e:	48 8d 3d 93 c5 fe ff 	lea    rdi,[rip+0xfffffffffffec593]        # 200ca8 <__unnamed_106>
  214715:	b8 30 00 00 00       	mov    eax,0x30
  21471a:	89 c2                	mov    edx,eax
  21471c:	48 8b 8d 60 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x11a0]
  214723:	48 89 bd 00 ee ff ff 	mov    QWORD PTR [rbp-0x1200],rdi
  21472a:	48 89 cf             	mov    rdi,rcx
  21472d:	48 8b b5 00 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x1200]
  214734:	e8 c7 d5 00 00       	call   221d00 <memcpy>
  214739:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  214740:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  214747:	5d                   	pop    rbp
  214748:	c3                   	ret    
  214749:	eb 00                	jmp    21474b <getLineNumberInfo+0x2db>
        const next_offset = unit_length + (if (is_64) usize(12) else usize(4));
  21474b:	48 8b 85 88 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xf78]
  214752:	f6 85 97 f0 ff ff 01 	test   BYTE PTR [rbp-0xf69],0x1
  214759:	48 89 85 f8 ed ff ff 	mov    QWORD PTR [rbp-0x1208],rax
  214760:	75 02                	jne    214764 <getLineNumberInfo+0x2f4>
  214762:	eb 10                	jmp    214774 <getLineNumberInfo+0x304>
  214764:	b8 0c 00 00 00       	mov    eax,0xc
  214769:	89 c1                	mov    ecx,eax
  21476b:	48 89 8d f0 ed ff ff 	mov    QWORD PTR [rbp-0x1210],rcx
  214772:	eb 10                	jmp    214784 <getLineNumberInfo+0x314>
  214774:	b8 04 00 00 00       	mov    eax,0x4
  214779:	89 c1                	mov    ecx,eax
  21477b:	48 89 8d f0 ed ff ff 	mov    QWORD PTR [rbp-0x1210],rcx
  214782:	eb 00                	jmp    214784 <getLineNumberInfo+0x314>
  214784:	48 8b 85 f0 ed ff ff 	mov    rax,QWORD PTR [rbp-0x1210]
  21478b:	48 8b 8d f8 ed ff ff 	mov    rcx,QWORD PTR [rbp-0x1208]
  214792:	48 01 c1             	add    rcx,rax
  214795:	0f 92 c2             	setb   dl
  214798:	48 89 8d e8 ed ff ff 	mov    QWORD PTR [rbp-0x1218],rcx
  21479f:	88 95 e7 ed ff ff    	mov    BYTE PTR [rbp-0x1219],dl
  2147a5:	0f 82 99 22 00 00    	jb     216a44 <getLineNumberInfo+0x25d4>
  2147ab:	e9 a4 22 00 00       	jmp    216a54 <getLineNumberInfo+0x25e4>
            this_offset += next_offset;
  2147b0:	48 8b 85 b8 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xf48]
  2147b7:	48 03 85 80 f0 ff ff 	add    rax,QWORD PTR [rbp-0xf80]
  2147be:	0f 92 c1             	setb   cl
  2147c1:	48 89 85 d8 ed ff ff 	mov    QWORD PTR [rbp-0x1228],rax
  2147c8:	88 8d d7 ed ff ff    	mov    BYTE PTR [rbp-0x1229],cl
  2147ce:	0f 82 ab 22 00 00    	jb     216a7f <getLineNumberInfo+0x260f>
  2147d4:	e9 b6 22 00 00       	jmp    216a8f <getLineNumberInfo+0x261f>
        if (compile_unit.index != this_index) {
  2147d9:	eb 00                	jmp    2147db <getLineNumberInfo+0x36b>
  2147db:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
        const version = try in_stream.readInt(st.elf.endian, u16);
  2147e2:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  2147e9:	48 8b 8d f0 f0 ff ff 	mov    rcx,QWORD PTR [rbp-0xf10]
  2147f0:	40 8a 71 12          	mov    sil,BYTE PTR [rcx+0x12]
  2147f4:	40 0f b6 ce          	movzx  ecx,sil
  2147f8:	48 8d bd 00 ff ff ff 	lea    rdi,[rbp-0x100]
  2147ff:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  214806:	48 89 85 c8 ed ff ff 	mov    QWORD PTR [rbp-0x1238],rax
  21480d:	e8 1e 5e ff ff       	call   20a630 <InStream(ReadError)_readInt>
  214812:	66 83 bd 00 ff ff ff 	cmp    WORD PTR [rbp-0x100],0x0
  214819:	00 
  21481a:	74 63                	je     21487f <getLineNumberInfo+0x40f>
  21481c:	66 8b 85 00 ff ff ff 	mov    ax,WORD PTR [rbp-0x100]
  214823:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21482a:	66 89 85 c6 ed ff ff 	mov    WORD PTR [rbp-0x123a],ax
  214831:	e8 1a fc fe ff       	call   204450 <__zig_return_error>
  214836:	b9 30 00 00 00       	mov    ecx,0x30
  21483b:	89 ca                	mov    edx,ecx
  21483d:	48 8d bd c8 fe ff ff 	lea    rdi,[rbp-0x138]
  214844:	66 8b 85 c6 ed ff ff 	mov    ax,WORD PTR [rbp-0x123a]
  21484b:	66 89 85 c8 fe ff ff 	mov    WORD PTR [rbp-0x138],ax
  214852:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  214859:	48 89 bd b8 ed ff ff 	mov    QWORD PTR [rbp-0x1248],rdi
  214860:	48 89 f7             	mov    rdi,rsi
  214863:	48 8b b5 b8 ed ff ff 	mov    rsi,QWORD PTR [rbp-0x1248]
  21486a:	e8 91 d4 00 00       	call   221d00 <memcpy>
  21486f:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  214876:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21487d:	5d                   	pop    rbp
  21487e:	c3                   	ret    
  21487f:	66 8b 85 02 ff ff ff 	mov    ax,WORD PTR [rbp-0xfe]
  214886:	66 89 85 7e f0 ff ff 	mov    WORD PTR [rbp-0xf82],ax
        if (version != 2 and version != 4) return error.InvalidDebugInfo;
  21488d:	66 83 bd 7e f0 ff ff 	cmp    WORD PTR [rbp-0xf82],0x2
  214894:	02 
  214895:	0f 95 c1             	setne  cl
  214898:	f6 c1 01             	test   cl,0x1
  21489b:	88 8d b7 ed ff ff    	mov    BYTE PTR [rbp-0x1249],cl
  2148a1:	75 02                	jne    2148a5 <getLineNumberInfo+0x435>
  2148a3:	eb 11                	jmp    2148b6 <getLineNumberInfo+0x446>
  2148a5:	66 83 bd 7e f0 ff ff 	cmp    WORD PTR [rbp-0xf82],0x4
  2148ac:	04 
  2148ad:	0f 95 c0             	setne  al
  2148b0:	88 85 b7 ed ff ff    	mov    BYTE PTR [rbp-0x1249],al
  2148b6:	8a 85 b7 ed ff ff    	mov    al,BYTE PTR [rbp-0x1249]
  2148bc:	a8 01                	test   al,0x1
  2148be:	75 02                	jne    2148c2 <getLineNumberInfo+0x452>
  2148c0:	eb 47                	jmp    214909 <getLineNumberInfo+0x499>
  2148c2:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  2148c9:	e8 82 fb fe ff       	call   204450 <__zig_return_error>
  2148ce:	48 8d 3d 03 c4 fe ff 	lea    rdi,[rip+0xfffffffffffec403]        # 200cd8 <__unnamed_107>
  2148d5:	b8 30 00 00 00       	mov    eax,0x30
  2148da:	89 c2                	mov    edx,eax
  2148dc:	48 8b 8d 60 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x11a0]
  2148e3:	48 89 bd a8 ed ff ff 	mov    QWORD PTR [rbp-0x1258],rdi
  2148ea:	48 89 cf             	mov    rdi,rcx
  2148ed:	48 8b b5 a8 ed ff ff 	mov    rsi,QWORD PTR [rbp-0x1258]
  2148f4:	e8 07 d4 00 00       	call   221d00 <memcpy>
  2148f9:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  214900:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  214907:	5d                   	pop    rbp
  214908:	c3                   	ret    
  214909:	eb 00                	jmp    21490b <getLineNumberInfo+0x49b>
        const prologue_length = if (is_64) try in_stream.readInt(st.elf.endian, u64) else try in_stream.readInt(st.elf.endian, u32);
  21490b:	f6 85 97 f0 ff ff 01 	test   BYTE PTR [rbp-0xf69],0x1
  214912:	75 05                	jne    214919 <getLineNumberInfo+0x4a9>
  214914:	e9 b7 00 00 00       	jmp    2149d0 <getLineNumberInfo+0x560>
  214919:	48 8d 85 b8 fe ff ff 	lea    rax,[rbp-0x148]
  214920:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  214927:	48 8b 8d f0 f0 ff ff 	mov    rcx,QWORD PTR [rbp-0xf10]
  21492e:	40 8a 71 12          	mov    sil,BYTE PTR [rcx+0x12]
  214932:	40 0f b6 ce          	movzx  ecx,sil
  214936:	48 8d bd b8 fe ff ff 	lea    rdi,[rbp-0x148]
  21493d:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  214944:	48 89 85 a0 ed ff ff 	mov    QWORD PTR [rbp-0x1260],rax
  21494b:	e8 00 5f ff ff       	call   20a850 <InStream(ReadError)_readInt.16>
  214950:	66 83 bd b8 fe ff ff 	cmp    WORD PTR [rbp-0x148],0x0
  214957:	00 
  214958:	74 63                	je     2149bd <getLineNumberInfo+0x54d>
  21495a:	66 8b 85 b8 fe ff ff 	mov    ax,WORD PTR [rbp-0x148]
  214961:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  214968:	66 89 85 9e ed ff ff 	mov    WORD PTR [rbp-0x1262],ax
  21496f:	e8 dc fa fe ff       	call   204450 <__zig_return_error>
  214974:	b9 30 00 00 00       	mov    ecx,0x30
  214979:	89 ca                	mov    edx,ecx
  21497b:	48 8d bd 78 fe ff ff 	lea    rdi,[rbp-0x188]
  214982:	66 8b 85 9e ed ff ff 	mov    ax,WORD PTR [rbp-0x1262]
  214989:	66 89 85 78 fe ff ff 	mov    WORD PTR [rbp-0x188],ax
  214990:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  214997:	48 89 bd 90 ed ff ff 	mov    QWORD PTR [rbp-0x1270],rdi
  21499e:	48 89 f7             	mov    rdi,rsi
  2149a1:	48 8b b5 90 ed ff ff 	mov    rsi,QWORD PTR [rbp-0x1270]
  2149a8:	e8 53 d3 00 00       	call   221d00 <memcpy>
  2149ad:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  2149b4:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  2149bb:	5d                   	pop    rbp
  2149bc:	c3                   	ret    
  2149bd:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  2149c4:	48 89 85 88 ed ff ff 	mov    QWORD PTR [rbp-0x1278],rax
  2149cb:	e9 b3 00 00 00       	jmp    214a83 <getLineNumberInfo+0x613>
  2149d0:	48 8d 85 70 fe ff ff 	lea    rax,[rbp-0x190]
  2149d7:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  2149de:	48 8b 8d f0 f0 ff ff 	mov    rcx,QWORD PTR [rbp-0xf10]
  2149e5:	40 8a 71 12          	mov    sil,BYTE PTR [rcx+0x12]
  2149e9:	40 0f b6 ce          	movzx  ecx,sil
  2149ed:	48 8d bd 70 fe ff ff 	lea    rdi,[rbp-0x190]
  2149f4:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  2149fb:	48 89 85 80 ed ff ff 	mov    QWORD PTR [rbp-0x1280],rax
  214a02:	e8 39 5d ff ff       	call   20a740 <InStream(ReadError)_readInt.15>
  214a07:	66 83 bd 70 fe ff ff 	cmp    WORD PTR [rbp-0x190],0x0
  214a0e:	00 
  214a0f:	74 63                	je     214a74 <getLineNumberInfo+0x604>
  214a11:	66 8b 85 70 fe ff ff 	mov    ax,WORD PTR [rbp-0x190]
  214a18:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  214a1f:	66 89 85 7e ed ff ff 	mov    WORD PTR [rbp-0x1282],ax
  214a26:	e8 25 fa fe ff       	call   204450 <__zig_return_error>
  214a2b:	b9 30 00 00 00       	mov    ecx,0x30
  214a30:	89 ca                	mov    edx,ecx
  214a32:	48 8d bd 38 fe ff ff 	lea    rdi,[rbp-0x1c8]
  214a39:	66 8b 85 7e ed ff ff 	mov    ax,WORD PTR [rbp-0x1282]
  214a40:	66 89 85 38 fe ff ff 	mov    WORD PTR [rbp-0x1c8],ax
  214a47:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  214a4e:	48 89 bd 70 ed ff ff 	mov    QWORD PTR [rbp-0x1290],rdi
  214a55:	48 89 f7             	mov    rdi,rsi
  214a58:	48 8b b5 70 ed ff ff 	mov    rsi,QWORD PTR [rbp-0x1290]
  214a5f:	e8 9c d2 00 00       	call   221d00 <memcpy>
  214a64:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  214a6b:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  214a72:	5d                   	pop    rbp
  214a73:	c3                   	ret    
  214a74:	8b 85 74 fe ff ff    	mov    eax,DWORD PTR [rbp-0x18c]
  214a7a:	89 c1                	mov    ecx,eax
  214a7c:	48 89 8d 88 ed ff ff 	mov    QWORD PTR [rbp-0x1278],rcx
  214a83:	48 8b 85 88 ed ff ff 	mov    rax,QWORD PTR [rbp-0x1278]
  214a8a:	48 8d bd 28 fe ff ff 	lea    rdi,[rbp-0x1d8]
  214a91:	48 89 85 70 f0 ff ff 	mov    QWORD PTR [rbp-0xf90],rax
        const prog_start_offset = (try in_file.getPos()) + prologue_length;
  214a98:	48 8b 95 c8 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf38]
  214a9f:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  214aa6:	e8 65 74 ff ff       	call   20bf10 <File_getPos>
  214aab:	66 83 bd 28 fe ff ff 	cmp    WORD PTR [rbp-0x1d8],0x0
  214ab2:	00 
  214ab3:	74 63                	je     214b18 <getLineNumberInfo+0x6a8>
  214ab5:	66 8b 85 28 fe ff ff 	mov    ax,WORD PTR [rbp-0x1d8]
  214abc:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  214ac3:	66 89 85 6e ed ff ff 	mov    WORD PTR [rbp-0x1292],ax
  214aca:	e8 81 f9 fe ff       	call   204450 <__zig_return_error>
  214acf:	b9 30 00 00 00       	mov    ecx,0x30
  214ad4:	89 ca                	mov    edx,ecx
  214ad6:	48 8d bd e8 fd ff ff 	lea    rdi,[rbp-0x218]
  214add:	66 8b 85 6e ed ff ff 	mov    ax,WORD PTR [rbp-0x1292]
  214ae4:	66 89 85 e8 fd ff ff 	mov    WORD PTR [rbp-0x218],ax
  214aeb:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  214af2:	48 89 bd 60 ed ff ff 	mov    QWORD PTR [rbp-0x12a0],rdi
  214af9:	48 89 f7             	mov    rdi,rsi
  214afc:	48 8b b5 60 ed ff ff 	mov    rsi,QWORD PTR [rbp-0x12a0]
  214b03:	e8 f8 d1 00 00       	call   221d00 <memcpy>
  214b08:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  214b0f:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  214b16:	5d                   	pop    rbp
  214b17:	c3                   	ret    
  214b18:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  214b1f:	48 03 85 70 f0 ff ff 	add    rax,QWORD PTR [rbp-0xf90]
  214b26:	0f 92 c1             	setb   cl
  214b29:	48 89 85 58 ed ff ff 	mov    QWORD PTR [rbp-0x12a8],rax
  214b30:	88 8d 57 ed ff ff    	mov    BYTE PTR [rbp-0x12a9],cl
  214b36:	0f 82 66 1f 00 00    	jb     216aa2 <getLineNumberInfo+0x2632>
  214b3c:	e9 71 1f 00 00       	jmp    216ab2 <getLineNumberInfo+0x2642>
        const minimum_instruction_length = try in_stream.readByte();
  214b41:	66 8b 85 e0 fd ff ff 	mov    ax,WORD PTR [rbp-0x220]
  214b48:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  214b4f:	66 89 85 54 ed ff ff 	mov    WORD PTR [rbp-0x12ac],ax
  214b56:	e8 f5 f8 fe ff       	call   204450 <__zig_return_error>
  214b5b:	b9 30 00 00 00       	mov    ecx,0x30
  214b60:	89 ca                	mov    edx,ecx
  214b62:	48 8d bd a8 fd ff ff 	lea    rdi,[rbp-0x258]
  214b69:	66 8b 85 54 ed ff ff 	mov    ax,WORD PTR [rbp-0x12ac]
  214b70:	66 89 85 a8 fd ff ff 	mov    WORD PTR [rbp-0x258],ax
  214b77:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  214b7e:	48 89 bd 48 ed ff ff 	mov    QWORD PTR [rbp-0x12b8],rdi
  214b85:	48 89 f7             	mov    rdi,rsi
  214b88:	48 8b b5 48 ed ff ff 	mov    rsi,QWORD PTR [rbp-0x12b8]
  214b8f:	e8 6c d1 00 00       	call   221d00 <memcpy>
  214b94:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  214b9b:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  214ba2:	5d                   	pop    rbp
  214ba3:	c3                   	ret    
  214ba4:	8a 85 e2 fd ff ff    	mov    al,BYTE PTR [rbp-0x21e]
  214baa:	88 85 67 f0 ff ff    	mov    BYTE PTR [rbp-0xf99],al
        if (minimum_instruction_length == 0) return error.InvalidDebugInfo;
  214bb0:	80 bd 67 f0 ff ff 00 	cmp    BYTE PTR [rbp-0xf99],0x0
  214bb7:	75 47                	jne    214c00 <getLineNumberInfo+0x790>
  214bb9:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  214bc0:	e8 8b f8 fe ff       	call   204450 <__zig_return_error>
  214bc5:	48 8d 3d 3c c1 fe ff 	lea    rdi,[rip+0xfffffffffffec13c]        # 200d08 <__unnamed_108>
  214bcc:	b8 30 00 00 00       	mov    eax,0x30
  214bd1:	89 c2                	mov    edx,eax
  214bd3:	48 8b 8d 60 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x11a0]
  214bda:	48 89 bd 40 ed ff ff 	mov    QWORD PTR [rbp-0x12c0],rdi
  214be1:	48 89 cf             	mov    rdi,rcx
  214be4:	48 8b b5 40 ed ff ff 	mov    rsi,QWORD PTR [rbp-0x12c0]
  214beb:	e8 10 d1 00 00       	call   221d00 <memcpy>
  214bf0:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  214bf7:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  214bfe:	5d                   	pop    rbp
  214bff:	c3                   	ret    
  214c00:	eb 00                	jmp    214c02 <getLineNumberInfo+0x792>
        if (version >= 4) {
  214c02:	66 83 bd 7e f0 ff ff 	cmp    WORD PTR [rbp-0xf82],0x4
  214c09:	04 
  214c0a:	0f 82 89 00 00 00    	jb     214c99 <getLineNumberInfo+0x829>
  214c10:	48 8d bd a0 fd ff ff 	lea    rdi,[rbp-0x260]
            _ = try in_stream.readByte();
  214c17:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  214c1e:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  214c25:	e8 16 58 ff ff       	call   20a440 <InStream(ReadError)_readByte>
  214c2a:	66 83 bd a0 fd ff ff 	cmp    WORD PTR [rbp-0x260],0x0
  214c31:	00 
  214c32:	74 63                	je     214c97 <getLineNumberInfo+0x827>
  214c34:	66 8b 85 a0 fd ff ff 	mov    ax,WORD PTR [rbp-0x260]
  214c3b:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  214c42:	66 89 85 3e ed ff ff 	mov    WORD PTR [rbp-0x12c2],ax
  214c49:	e8 02 f8 fe ff       	call   204450 <__zig_return_error>
  214c4e:	b9 30 00 00 00       	mov    ecx,0x30
  214c53:	89 ca                	mov    edx,ecx
  214c55:	48 8d bd 68 fd ff ff 	lea    rdi,[rbp-0x298]
  214c5c:	66 8b 85 3e ed ff ff 	mov    ax,WORD PTR [rbp-0x12c2]
  214c63:	66 89 85 68 fd ff ff 	mov    WORD PTR [rbp-0x298],ax
  214c6a:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  214c71:	48 89 bd 30 ed ff ff 	mov    QWORD PTR [rbp-0x12d0],rdi
  214c78:	48 89 f7             	mov    rdi,rsi
  214c7b:	48 8b b5 30 ed ff ff 	mov    rsi,QWORD PTR [rbp-0x12d0]
  214c82:	e8 79 d0 00 00       	call   221d00 <memcpy>
  214c87:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  214c8e:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  214c95:	5d                   	pop    rbp
  214c96:	c3                   	ret    
        if (version >= 4) {
  214c97:	eb 02                	jmp    214c9b <getLineNumberInfo+0x82b>
  214c99:	eb 00                	jmp    214c9b <getLineNumberInfo+0x82b>
  214c9b:	48 8d bd 60 fd ff ff 	lea    rdi,[rbp-0x2a0]
        const default_is_stmt = (try in_stream.readByte()) != 0;
  214ca2:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  214ca9:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  214cb0:	e8 8b 57 ff ff       	call   20a440 <InStream(ReadError)_readByte>
  214cb5:	66 83 bd 60 fd ff ff 	cmp    WORD PTR [rbp-0x2a0],0x0
  214cbc:	00 
  214cbd:	74 63                	je     214d22 <getLineNumberInfo+0x8b2>
  214cbf:	66 8b 85 60 fd ff ff 	mov    ax,WORD PTR [rbp-0x2a0]
  214cc6:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  214ccd:	66 89 85 2e ed ff ff 	mov    WORD PTR [rbp-0x12d2],ax
  214cd4:	e8 77 f7 fe ff       	call   204450 <__zig_return_error>
  214cd9:	b9 30 00 00 00       	mov    ecx,0x30
  214cde:	89 ca                	mov    edx,ecx
  214ce0:	48 8d bd 28 fd ff ff 	lea    rdi,[rbp-0x2d8]
  214ce7:	66 8b 85 2e ed ff ff 	mov    ax,WORD PTR [rbp-0x12d2]
  214cee:	66 89 85 28 fd ff ff 	mov    WORD PTR [rbp-0x2d8],ax
  214cf5:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  214cfc:	48 89 bd 20 ed ff ff 	mov    QWORD PTR [rbp-0x12e0],rdi
  214d03:	48 89 f7             	mov    rdi,rsi
  214d06:	48 8b b5 20 ed ff ff 	mov    rsi,QWORD PTR [rbp-0x12e0]
  214d0d:	e8 ee cf 00 00       	call   221d00 <memcpy>
  214d12:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  214d19:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  214d20:	5d                   	pop    rbp
  214d21:	c3                   	ret    
  214d22:	48 8d bd 20 fd ff ff 	lea    rdi,[rbp-0x2e0]
  214d29:	80 bd 62 fd ff ff 00 	cmp    BYTE PTR [rbp-0x29e],0x0
  214d30:	0f 95 c0             	setne  al
  214d33:	24 01                	and    al,0x1
  214d35:	88 85 66 f0 ff ff    	mov    BYTE PTR [rbp-0xf9a],al
        const line_base = try in_stream.readByteSigned();
  214d3b:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  214d42:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  214d49:	e8 f2 3e 00 00       	call   218c40 <InStream(ReadError)_readByteSigned>
  214d4e:	66 83 bd 20 fd ff ff 	cmp    WORD PTR [rbp-0x2e0],0x0
  214d55:	00 
  214d56:	74 63                	je     214dbb <getLineNumberInfo+0x94b>
  214d58:	66 8b 85 20 fd ff ff 	mov    ax,WORD PTR [rbp-0x2e0]
  214d5f:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  214d66:	66 89 85 1e ed ff ff 	mov    WORD PTR [rbp-0x12e2],ax
  214d6d:	e8 de f6 fe ff       	call   204450 <__zig_return_error>
  214d72:	b9 30 00 00 00       	mov    ecx,0x30
  214d77:	89 ca                	mov    edx,ecx
  214d79:	48 8d bd e8 fc ff ff 	lea    rdi,[rbp-0x318]
  214d80:	66 8b 85 1e ed ff ff 	mov    ax,WORD PTR [rbp-0x12e2]
  214d87:	66 89 85 e8 fc ff ff 	mov    WORD PTR [rbp-0x318],ax
  214d8e:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  214d95:	48 89 bd 10 ed ff ff 	mov    QWORD PTR [rbp-0x12f0],rdi
  214d9c:	48 89 f7             	mov    rdi,rsi
  214d9f:	48 8b b5 10 ed ff ff 	mov    rsi,QWORD PTR [rbp-0x12f0]
  214da6:	e8 55 cf 00 00       	call   221d00 <memcpy>
  214dab:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  214db2:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  214db9:	5d                   	pop    rbp
  214dba:	c3                   	ret    
  214dbb:	48 8d bd e0 fc ff ff 	lea    rdi,[rbp-0x320]
  214dc2:	8a 85 22 fd ff ff    	mov    al,BYTE PTR [rbp-0x2de]
  214dc8:	88 85 65 f0 ff ff    	mov    BYTE PTR [rbp-0xf9b],al
        const line_range = try in_stream.readByte();
  214dce:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  214dd5:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  214ddc:	e8 5f 56 ff ff       	call   20a440 <InStream(ReadError)_readByte>
  214de1:	66 83 bd e0 fc ff ff 	cmp    WORD PTR [rbp-0x320],0x0
  214de8:	00 
  214de9:	74 63                	je     214e4e <getLineNumberInfo+0x9de>
  214deb:	66 8b 85 e0 fc ff ff 	mov    ax,WORD PTR [rbp-0x320]
  214df2:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  214df9:	66 89 85 0e ed ff ff 	mov    WORD PTR [rbp-0x12f2],ax
  214e00:	e8 4b f6 fe ff       	call   204450 <__zig_return_error>
  214e05:	b9 30 00 00 00       	mov    ecx,0x30
  214e0a:	89 ca                	mov    edx,ecx
  214e0c:	48 8d bd a8 fc ff ff 	lea    rdi,[rbp-0x358]
  214e13:	66 8b 85 0e ed ff ff 	mov    ax,WORD PTR [rbp-0x12f2]
  214e1a:	66 89 85 a8 fc ff ff 	mov    WORD PTR [rbp-0x358],ax
  214e21:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  214e28:	48 89 bd 00 ed ff ff 	mov    QWORD PTR [rbp-0x1300],rdi
  214e2f:	48 89 f7             	mov    rdi,rsi
  214e32:	48 8b b5 00 ed ff ff 	mov    rsi,QWORD PTR [rbp-0x1300]
  214e39:	e8 c2 ce 00 00       	call   221d00 <memcpy>
  214e3e:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  214e45:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  214e4c:	5d                   	pop    rbp
  214e4d:	c3                   	ret    
  214e4e:	8a 85 e2 fc ff ff    	mov    al,BYTE PTR [rbp-0x31e]
  214e54:	88 85 64 f0 ff ff    	mov    BYTE PTR [rbp-0xf9c],al
        if (line_range == 0) return error.InvalidDebugInfo;
  214e5a:	80 bd 64 f0 ff ff 00 	cmp    BYTE PTR [rbp-0xf9c],0x0
  214e61:	75 47                	jne    214eaa <getLineNumberInfo+0xa3a>
  214e63:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  214e6a:	e8 e1 f5 fe ff       	call   204450 <__zig_return_error>
  214e6f:	48 8d 3d c2 be fe ff 	lea    rdi,[rip+0xfffffffffffebec2]        # 200d38 <__unnamed_109>
  214e76:	b8 30 00 00 00       	mov    eax,0x30
  214e7b:	89 c2                	mov    edx,eax
  214e7d:	48 8b 8d 60 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x11a0]
  214e84:	48 89 bd f8 ec ff ff 	mov    QWORD PTR [rbp-0x1308],rdi
  214e8b:	48 89 cf             	mov    rdi,rcx
  214e8e:	48 8b b5 f8 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x1308]
  214e95:	e8 66 ce 00 00       	call   221d00 <memcpy>
  214e9a:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  214ea1:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  214ea8:	5d                   	pop    rbp
  214ea9:	c3                   	ret    
  214eaa:	eb 00                	jmp    214eac <getLineNumberInfo+0xa3c>
  214eac:	48 8d bd a0 fc ff ff 	lea    rdi,[rbp-0x360]
        const opcode_base = try in_stream.readByte();
  214eb3:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  214eba:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  214ec1:	e8 7a 55 ff ff       	call   20a440 <InStream(ReadError)_readByte>
  214ec6:	66 83 bd a0 fc ff ff 	cmp    WORD PTR [rbp-0x360],0x0
  214ecd:	00 
  214ece:	74 63                	je     214f33 <getLineNumberInfo+0xac3>
  214ed0:	66 8b 85 a0 fc ff ff 	mov    ax,WORD PTR [rbp-0x360]
  214ed7:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  214ede:	66 89 85 f6 ec ff ff 	mov    WORD PTR [rbp-0x130a],ax
  214ee5:	e8 66 f5 fe ff       	call   204450 <__zig_return_error>
  214eea:	b9 30 00 00 00       	mov    ecx,0x30
  214eef:	89 ca                	mov    edx,ecx
  214ef1:	48 8d bd 68 fc ff ff 	lea    rdi,[rbp-0x398]
  214ef8:	66 8b 85 f6 ec ff ff 	mov    ax,WORD PTR [rbp-0x130a]
  214eff:	66 89 85 68 fc ff ff 	mov    WORD PTR [rbp-0x398],ax
  214f06:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  214f0d:	48 89 bd e8 ec ff ff 	mov    QWORD PTR [rbp-0x1318],rdi
  214f14:	48 89 f7             	mov    rdi,rsi
  214f17:	48 8b b5 e8 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x1318]
  214f1e:	e8 dd cd 00 00       	call   221d00 <memcpy>
  214f23:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  214f2a:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  214f31:	5d                   	pop    rbp
  214f32:	c3                   	ret    
  214f33:	8a 85 a2 fc ff ff    	mov    al,BYTE PTR [rbp-0x35e]
  214f39:	88 85 63 f0 ff ff    	mov    BYTE PTR [rbp-0xf9d],al
        const standard_opcode_lengths = try st.allocator().alloc(u8, opcode_base - 1);
  214f3f:	48 8b bd f0 f0 ff ff 	mov    rdi,QWORD PTR [rbp-0xf10]
  214f46:	e8 35 75 ff ff       	call   20c480 <ElfStackTrace_allocator>
  214f4b:	48 89 85 60 fc ff ff 	mov    QWORD PTR [rbp-0x3a0],rax
  214f52:	48 8b 95 60 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x3a0]
  214f59:	8a 8d 63 f0 ff ff    	mov    cl,BYTE PTR [rbp-0xf9d]
  214f5f:	80 e9 01             	sub    cl,0x1
  214f62:	40 0f 92 c6          	setb   sil
  214f66:	40 f6 c6 01          	test   sil,0x1
  214f6a:	48 89 95 e0 ec ff ff 	mov    QWORD PTR [rbp-0x1320],rdx
  214f71:	88 8d df ec ff ff    	mov    BYTE PTR [rbp-0x1321],cl
  214f77:	0f 85 70 1b 00 00    	jne    216aed <getLineNumberInfo+0x267d>
  214f7d:	e9 7b 1b 00 00       	jmp    216afd <getLineNumberInfo+0x268d>
  214f82:	66 8b 85 48 fc ff ff 	mov    ax,WORD PTR [rbp-0x3b8]
  214f89:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  214f90:	66 89 85 dc ec ff ff 	mov    WORD PTR [rbp-0x1324],ax
  214f97:	e8 b4 f4 fe ff       	call   204450 <__zig_return_error>
  214f9c:	b9 30 00 00 00       	mov    ecx,0x30
  214fa1:	89 ca                	mov    edx,ecx
  214fa3:	48 8d bd 00 fc ff ff 	lea    rdi,[rbp-0x400]
  214faa:	66 8b 85 dc ec ff ff 	mov    ax,WORD PTR [rbp-0x1324]
  214fb1:	66 89 85 00 fc ff ff 	mov    WORD PTR [rbp-0x400],ax
  214fb8:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  214fbf:	48 89 bd d0 ec ff ff 	mov    QWORD PTR [rbp-0x1330],rdi
  214fc6:	48 89 f7             	mov    rdi,rsi
  214fc9:	48 8b b5 d0 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x1330]
  214fd0:	e8 2b cd 00 00       	call   221d00 <memcpy>
  214fd5:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  214fdc:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  214fe3:	5d                   	pop    rbp
  214fe4:	c3                   	ret    
  214fe5:	48 8b 85 50 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3b0]
  214fec:	48 89 85 50 f0 ff ff 	mov    QWORD PTR [rbp-0xfb0],rax
  214ff3:	48 8b 85 58 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3a8]
  214ffa:	48 89 85 58 f0 ff ff 	mov    QWORD PTR [rbp-0xfa8],rax
            var i: usize = 0;
  215001:	48 c7 85 48 f0 ff ff 	mov    QWORD PTR [rbp-0xfb8],0x0
  215008:	00 00 00 00 
            while (i < opcode_base - 1) : (i += 1) {
  21500c:	48 8b 85 48 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xfb8]
  215013:	8a 8d 63 f0 ff ff    	mov    cl,BYTE PTR [rbp-0xf9d]
  215019:	80 e9 01             	sub    cl,0x1
  21501c:	0f 92 c2             	setb   dl
  21501f:	f6 c2 01             	test   dl,0x1
  215022:	48 89 85 c8 ec ff ff 	mov    QWORD PTR [rbp-0x1338],rax
  215029:	88 8d c7 ec ff ff    	mov    BYTE PTR [rbp-0x1339],cl
  21502f:	0f 85 fe 1a 00 00    	jne    216b33 <getLineNumberInfo+0x26c3>
  215035:	e9 09 1b 00 00       	jmp    216b43 <getLineNumberInfo+0x26d3>
                standard_opcode_lengths[i] = try in_stream.readByte();
  21503a:	48 8b 85 48 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xfb8]
  215041:	48 3b 85 58 f0 ff ff 	cmp    rax,QWORD PTR [rbp-0xfa8]
  215048:	48 89 85 b8 ec ff ff 	mov    QWORD PTR [rbp-0x1348],rax
  21504f:	0f 82 1e 1b 00 00    	jb     216b73 <getLineNumberInfo+0x2703>
  215055:	e9 09 1b 00 00       	jmp    216b63 <getLineNumberInfo+0x26f3>
  21505a:	66 8b 85 f8 fb ff ff 	mov    ax,WORD PTR [rbp-0x408]
  215061:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  215068:	66 89 85 b6 ec ff ff 	mov    WORD PTR [rbp-0x134a],ax
  21506f:	e8 dc f3 fe ff       	call   204450 <__zig_return_error>
  215074:	b9 30 00 00 00       	mov    ecx,0x30
  215079:	89 ca                	mov    edx,ecx
  21507b:	48 8d bd c0 fb ff ff 	lea    rdi,[rbp-0x440]
  215082:	66 8b 85 b6 ec ff ff 	mov    ax,WORD PTR [rbp-0x134a]
  215089:	66 89 85 c0 fb ff ff 	mov    WORD PTR [rbp-0x440],ax
  215090:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  215097:	48 89 bd a8 ec ff ff 	mov    QWORD PTR [rbp-0x1358],rdi
  21509e:	48 89 f7             	mov    rdi,rsi
  2150a1:	48 8b b5 a8 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x1358]
  2150a8:	e8 53 cc 00 00       	call   221d00 <memcpy>
  2150ad:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  2150b4:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  2150bb:	5d                   	pop    rbp
  2150bc:	c3                   	ret    
  2150bd:	8a 85 fa fb ff ff    	mov    al,BYTE PTR [rbp-0x406]
  2150c3:	48 8b 8d a0 ec ff ff 	mov    rcx,QWORD PTR [rbp-0x1360]
  2150ca:	88 01                	mov    BYTE PTR [rcx],al
            while (i < opcode_base - 1) : (i += 1) {
  2150cc:	48 8b 95 48 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xfb8]
  2150d3:	48 83 c2 01          	add    rdx,0x1
  2150d7:	0f 92 c0             	setb   al
  2150da:	48 89 95 98 ec ff ff 	mov    QWORD PTR [rbp-0x1368],rdx
  2150e1:	88 85 97 ec ff ff    	mov    BYTE PTR [rbp-0x1369],al
  2150e7:	0f 82 c8 1a 00 00    	jb     216bb5 <getLineNumberInfo+0x2745>
  2150ed:	e9 d3 1a 00 00       	jmp    216bc5 <getLineNumberInfo+0x2755>
        var include_directories = ArrayList([]u8).init(st.allocator());
  2150f2:	48 8b bd f0 f0 ff ff 	mov    rdi,QWORD PTR [rbp-0xf10]
  2150f9:	e8 82 73 ff ff       	call   20c480 <ElfStackTrace_allocator>
  2150fe:	48 8d bd a0 fb ff ff 	lea    rdi,[rbp-0x460]
  215105:	48 89 c6             	mov    rsi,rax
  215108:	e8 23 3c 00 00       	call   218d30 <AlignedArrayList([]u8,8)_init>
  21510d:	48 8d b5 28 f0 ff ff 	lea    rsi,[rbp-0xfd8]
  215114:	48 8d 95 d0 f0 ff ff 	lea    rdx,[rbp-0xf30]
  21511b:	48 8b 85 a0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x460]
  215122:	48 89 85 28 f0 ff ff 	mov    QWORD PTR [rbp-0xfd8],rax
  215129:	48 8b 85 a8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x458]
  215130:	48 89 85 30 f0 ff ff 	mov    QWORD PTR [rbp-0xfd0],rax
  215137:	48 8b 85 b0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x450]
  21513e:	48 89 85 38 f0 ff ff 	mov    QWORD PTR [rbp-0xfc8],rax
  215145:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
  21514c:	48 89 85 40 f0 ff ff 	mov    QWORD PTR [rbp-0xfc0],rax
        try include_directories.append(compile_unit_cwd);
  215153:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21515a:	e8 31 3c 00 00       	call   218d90 <AlignedArrayList([]u8,8)_append>
  21515f:	66 89 85 9e fb ff ff 	mov    WORD PTR [rbp-0x462],ax
  215166:	66 83 bd 9e fb ff ff 	cmp    WORD PTR [rbp-0x462],0x0
  21516d:	00 
  21516e:	74 63                	je     2151d3 <getLineNumberInfo+0xd63>
  215170:	66 8b 85 9e fb ff ff 	mov    ax,WORD PTR [rbp-0x462]
  215177:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21517e:	66 89 85 94 ec ff ff 	mov    WORD PTR [rbp-0x136c],ax
  215185:	e8 c6 f2 fe ff       	call   204450 <__zig_return_error>
  21518a:	b9 30 00 00 00       	mov    ecx,0x30
  21518f:	89 ca                	mov    edx,ecx
  215191:	48 8d bd 68 fb ff ff 	lea    rdi,[rbp-0x498]
  215198:	66 8b 85 94 ec ff ff 	mov    ax,WORD PTR [rbp-0x136c]
  21519f:	66 89 85 68 fb ff ff 	mov    WORD PTR [rbp-0x498],ax
  2151a6:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  2151ad:	48 89 bd 88 ec ff ff 	mov    QWORD PTR [rbp-0x1378],rdi
  2151b4:	48 89 f7             	mov    rdi,rsi
  2151b7:	48 8b b5 88 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x1378]
  2151be:	e8 3d cb 00 00       	call   221d00 <memcpy>
  2151c3:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  2151ca:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  2151d1:	5d                   	pop    rbp
  2151d2:	c3                   	ret    
        while (true) {
  2151d3:	eb 00                	jmp    2151d5 <getLineNumberInfo+0xd65>
  2151d5:	48 8d bd 50 fb ff ff 	lea    rdi,[rbp-0x4b0]
            const dir = try st.readString();
  2151dc:	48 8b 95 f0 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf10]
  2151e3:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  2151ea:	e8 31 2e 00 00       	call   218020 <ElfStackTrace_readString>
  2151ef:	66 83 bd 50 fb ff ff 	cmp    WORD PTR [rbp-0x4b0],0x0
  2151f6:	00 
  2151f7:	74 63                	je     21525c <getLineNumberInfo+0xdec>
  2151f9:	66 8b 85 50 fb ff ff 	mov    ax,WORD PTR [rbp-0x4b0]
  215200:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  215207:	66 89 85 86 ec ff ff 	mov    WORD PTR [rbp-0x137a],ax
  21520e:	e8 3d f2 fe ff       	call   204450 <__zig_return_error>
  215213:	b9 30 00 00 00       	mov    ecx,0x30
  215218:	89 ca                	mov    edx,ecx
  21521a:	48 8d bd 08 fb ff ff 	lea    rdi,[rbp-0x4f8]
  215221:	66 8b 85 86 ec ff ff 	mov    ax,WORD PTR [rbp-0x137a]
  215228:	66 89 85 08 fb ff ff 	mov    WORD PTR [rbp-0x4f8],ax
  21522f:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  215236:	48 89 bd 78 ec ff ff 	mov    QWORD PTR [rbp-0x1388],rdi
  21523d:	48 89 f7             	mov    rdi,rsi
  215240:	48 8b b5 78 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x1388]
  215247:	e8 b4 ca 00 00       	call   221d00 <memcpy>
  21524c:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  215253:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21525a:	5d                   	pop    rbp
  21525b:	c3                   	ret    
  21525c:	48 8b 85 58 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4a8]
  215263:	48 89 85 18 f0 ff ff 	mov    QWORD PTR [rbp-0xfe8],rax
  21526a:	48 8b 85 60 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4a0]
  215271:	48 89 85 20 f0 ff ff 	mov    QWORD PTR [rbp-0xfe0],rax
            if (dir.len == 0) break;
  215278:	48 83 bd 20 f0 ff ff 	cmp    QWORD PTR [rbp-0xfe0],0x0
  21527f:	00 
  215280:	75 05                	jne    215287 <getLineNumberInfo+0xe17>
  215282:	e9 95 00 00 00       	jmp    21531c <getLineNumberInfo+0xeac>
  215287:	eb 00                	jmp    215289 <getLineNumberInfo+0xe19>
  215289:	48 8d b5 28 f0 ff ff 	lea    rsi,[rbp-0xfd8]
  215290:	48 8d 95 18 f0 ff ff 	lea    rdx,[rbp-0xfe8]
            try include_directories.append(dir);
  215297:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21529e:	e8 ed 3a 00 00       	call   218d90 <AlignedArrayList([]u8,8)_append>
  2152a3:	66 89 85 06 fb ff ff 	mov    WORD PTR [rbp-0x4fa],ax
  2152aa:	66 83 bd 06 fb ff ff 	cmp    WORD PTR [rbp-0x4fa],0x0
  2152b1:	00 
  2152b2:	74 63                	je     215317 <getLineNumberInfo+0xea7>
  2152b4:	66 8b 85 06 fb ff ff 	mov    ax,WORD PTR [rbp-0x4fa]
  2152bb:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  2152c2:	66 89 85 76 ec ff ff 	mov    WORD PTR [rbp-0x138a],ax
  2152c9:	e8 82 f1 fe ff       	call   204450 <__zig_return_error>
  2152ce:	b9 30 00 00 00       	mov    ecx,0x30
  2152d3:	89 ca                	mov    edx,ecx
  2152d5:	48 8d bd d0 fa ff ff 	lea    rdi,[rbp-0x530]
  2152dc:	66 8b 85 76 ec ff ff 	mov    ax,WORD PTR [rbp-0x138a]
  2152e3:	66 89 85 d0 fa ff ff 	mov    WORD PTR [rbp-0x530],ax
  2152ea:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  2152f1:	48 89 bd 68 ec ff ff 	mov    QWORD PTR [rbp-0x1398],rdi
  2152f8:	48 89 f7             	mov    rdi,rsi
  2152fb:	48 8b b5 68 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x1398]
  215302:	e8 f9 c9 00 00       	call   221d00 <memcpy>
  215307:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21530e:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  215315:	5d                   	pop    rbp
  215316:	c3                   	ret    
        while (true) {
  215317:	e9 b7 fe ff ff       	jmp    2151d3 <getLineNumberInfo+0xd63>
        var file_entries = ArrayList(FileEntry).init(st.allocator());
  21531c:	48 8b bd f0 f0 ff ff 	mov    rdi,QWORD PTR [rbp-0xf10]
  215323:	e8 58 71 ff ff       	call   20c480 <ElfStackTrace_allocator>
  215328:	48 8d bd b0 fa ff ff 	lea    rdi,[rbp-0x550]
  21532f:	48 89 c6             	mov    rsi,rax
  215332:	e8 e9 3a 00 00       	call   218e20 <AlignedArrayList(FileEntry,8)_init>
  215337:	48 8d bd a0 fa ff ff 	lea    rdi,[rbp-0x560]
  21533e:	48 8d b5 28 f0 ff ff 	lea    rsi,[rbp-0xfd8]
  215345:	48 8b 85 b0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x550]
  21534c:	48 89 85 f8 ef ff ff 	mov    QWORD PTR [rbp-0x1008],rax
  215353:	48 8b 85 b8 fa ff ff 	mov    rax,QWORD PTR [rbp-0x548]
  21535a:	48 89 85 00 f0 ff ff 	mov    QWORD PTR [rbp-0x1000],rax
  215361:	48 8b 85 c0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x540]
  215368:	48 89 85 08 f0 ff ff 	mov    QWORD PTR [rbp-0xff8],rax
  21536f:	48 8b 85 c8 fa ff ff 	mov    rax,QWORD PTR [rbp-0x538]
  215376:	48 89 85 10 f0 ff ff 	mov    QWORD PTR [rbp-0xff0],rax
        var prog = LineNumberProgram.init(default_is_stmt, include_directories.toSliceConst(), &file_entries, target_address);
  21537d:	8a 8d 66 f0 ff ff    	mov    cl,BYTE PTR [rbp-0xf9a]
  215383:	88 8d 67 ec ff ff    	mov    BYTE PTR [rbp-0x1399],cl
  215389:	e8 f2 3a 00 00       	call   218e80 <AlignedArrayList([]u8,8)_toSliceConst>
  21538e:	48 8d 85 30 fa ff ff 	lea    rax,[rbp-0x5d0]
  215395:	4c 8b 85 e0 f0 ff ff 	mov    r8,QWORD PTR [rbp-0xf20]
  21539c:	8a 8d 67 ec ff ff    	mov    cl,BYTE PTR [rbp-0x1399]
  2153a2:	0f b6 f1             	movzx  esi,cl
  2153a5:	48 8d bd 30 fa ff ff 	lea    rdi,[rbp-0x5d0]
  2153ac:	48 8d 95 a0 fa ff ff 	lea    rdx,[rbp-0x560]
  2153b3:	48 8d 8d f8 ef ff ff 	lea    rcx,[rbp-0x1008]
  2153ba:	48 89 85 58 ec ff ff 	mov    QWORD PTR [rbp-0x13a8],rax
  2153c1:	e8 5a 3b 00 00       	call   218f20 <LineNumberProgram_init>
  2153c6:	be 70 00 00 00       	mov    esi,0x70
  2153cb:	89 f2                	mov    edx,esi
  2153cd:	48 8d 85 88 ef ff ff 	lea    rax,[rbp-0x1078]
  2153d4:	48 8d 8d 30 fa ff ff 	lea    rcx,[rbp-0x5d0]
  2153db:	48 89 c7             	mov    rdi,rax
  2153de:	48 89 ce             	mov    rsi,rcx
  2153e1:	e8 1a c9 00 00       	call   221d00 <memcpy>
        while (true) {
  2153e6:	eb 00                	jmp    2153e8 <getLineNumberInfo+0xf78>
  2153e8:	48 8d bd 18 fa ff ff 	lea    rdi,[rbp-0x5e8]
            const file_name = try st.readString();
  2153ef:	48 8b 95 f0 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf10]
  2153f6:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  2153fd:	e8 1e 2c 00 00       	call   218020 <ElfStackTrace_readString>
  215402:	66 83 bd 18 fa ff ff 	cmp    WORD PTR [rbp-0x5e8],0x0
  215409:	00 
  21540a:	74 63                	je     21546f <getLineNumberInfo+0xfff>
  21540c:	66 8b 85 18 fa ff ff 	mov    ax,WORD PTR [rbp-0x5e8]
  215413:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21541a:	66 89 85 56 ec ff ff 	mov    WORD PTR [rbp-0x13aa],ax
  215421:	e8 2a f0 fe ff       	call   204450 <__zig_return_error>
  215426:	b9 30 00 00 00       	mov    ecx,0x30
  21542b:	89 ca                	mov    edx,ecx
  21542d:	48 8d bd d0 f9 ff ff 	lea    rdi,[rbp-0x630]
  215434:	66 8b 85 56 ec ff ff 	mov    ax,WORD PTR [rbp-0x13aa]
  21543b:	66 89 85 d0 f9 ff ff 	mov    WORD PTR [rbp-0x630],ax
  215442:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  215449:	48 89 bd 48 ec ff ff 	mov    QWORD PTR [rbp-0x13b8],rdi
  215450:	48 89 f7             	mov    rdi,rsi
  215453:	48 8b b5 48 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x13b8]
  21545a:	e8 a1 c8 00 00       	call   221d00 <memcpy>
  21545f:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  215466:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21546d:	5d                   	pop    rbp
  21546e:	c3                   	ret    
  21546f:	48 8b 85 20 fa ff ff 	mov    rax,QWORD PTR [rbp-0x5e0]
  215476:	48 89 85 78 ef ff ff 	mov    QWORD PTR [rbp-0x1088],rax
  21547d:	48 8b 85 28 fa ff ff 	mov    rax,QWORD PTR [rbp-0x5d8]
  215484:	48 89 85 80 ef ff ff 	mov    QWORD PTR [rbp-0x1080],rax
            if (file_name.len == 0) break;
  21548b:	48 83 bd 80 ef ff ff 	cmp    QWORD PTR [rbp-0x1080],0x0
  215492:	00 
  215493:	75 05                	jne    21549a <getLineNumberInfo+0x102a>
  215495:	e9 9a 02 00 00       	jmp    215734 <getLineNumberInfo+0x12c4>
  21549a:	eb 00                	jmp    21549c <getLineNumberInfo+0x102c>
  21549c:	48 8d bd c0 f9 ff ff 	lea    rdi,[rbp-0x640]
            const dir_index = try readULeb128(in_stream);
  2154a3:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  2154aa:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  2154b1:	e8 3a 84 ff ff       	call   20d8f0 <readULeb128>
  2154b6:	66 83 bd c0 f9 ff ff 	cmp    WORD PTR [rbp-0x640],0x0
  2154bd:	00 
  2154be:	74 63                	je     215523 <getLineNumberInfo+0x10b3>
  2154c0:	66 8b 85 c0 f9 ff ff 	mov    ax,WORD PTR [rbp-0x640]
  2154c7:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  2154ce:	66 89 85 46 ec ff ff 	mov    WORD PTR [rbp-0x13ba],ax
  2154d5:	e8 76 ef fe ff       	call   204450 <__zig_return_error>
  2154da:	b9 30 00 00 00       	mov    ecx,0x30
  2154df:	89 ca                	mov    edx,ecx
  2154e1:	48 8d bd 80 f9 ff ff 	lea    rdi,[rbp-0x680]
  2154e8:	66 8b 85 46 ec ff ff 	mov    ax,WORD PTR [rbp-0x13ba]
  2154ef:	66 89 85 80 f9 ff ff 	mov    WORD PTR [rbp-0x680],ax
  2154f6:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  2154fd:	48 89 bd 38 ec ff ff 	mov    QWORD PTR [rbp-0x13c8],rdi
  215504:	48 89 f7             	mov    rdi,rsi
  215507:	48 8b b5 38 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x13c8]
  21550e:	e8 ed c7 00 00       	call   221d00 <memcpy>
  215513:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21551a:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  215521:	5d                   	pop    rbp
  215522:	c3                   	ret    
  215523:	48 8d bd 70 f9 ff ff 	lea    rdi,[rbp-0x690]
  21552a:	48 8b 85 c8 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x638]
  215531:	48 89 85 70 ef ff ff 	mov    QWORD PTR [rbp-0x1090],rax
            const mtime = try readULeb128(in_stream);
  215538:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21553f:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  215546:	e8 a5 83 ff ff       	call   20d8f0 <readULeb128>
  21554b:	66 83 bd 70 f9 ff ff 	cmp    WORD PTR [rbp-0x690],0x0
  215552:	00 
  215553:	74 63                	je     2155b8 <getLineNumberInfo+0x1148>
  215555:	66 8b 85 70 f9 ff ff 	mov    ax,WORD PTR [rbp-0x690]
  21555c:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  215563:	66 89 85 36 ec ff ff 	mov    WORD PTR [rbp-0x13ca],ax
  21556a:	e8 e1 ee fe ff       	call   204450 <__zig_return_error>
  21556f:	b9 30 00 00 00       	mov    ecx,0x30
  215574:	89 ca                	mov    edx,ecx
  215576:	48 8d bd 30 f9 ff ff 	lea    rdi,[rbp-0x6d0]
  21557d:	66 8b 85 36 ec ff ff 	mov    ax,WORD PTR [rbp-0x13ca]
  215584:	66 89 85 30 f9 ff ff 	mov    WORD PTR [rbp-0x6d0],ax
  21558b:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  215592:	48 89 bd 28 ec ff ff 	mov    QWORD PTR [rbp-0x13d8],rdi
  215599:	48 89 f7             	mov    rdi,rsi
  21559c:	48 8b b5 28 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x13d8]
  2155a3:	e8 58 c7 00 00       	call   221d00 <memcpy>
  2155a8:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  2155af:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  2155b6:	5d                   	pop    rbp
  2155b7:	c3                   	ret    
  2155b8:	48 8d bd 20 f9 ff ff 	lea    rdi,[rbp-0x6e0]
  2155bf:	48 8b 85 78 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x688]
  2155c6:	48 89 85 68 ef ff ff 	mov    QWORD PTR [rbp-0x1098],rax
            const len_bytes = try readULeb128(in_stream);
  2155cd:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  2155d4:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  2155db:	e8 10 83 ff ff       	call   20d8f0 <readULeb128>
  2155e0:	66 83 bd 20 f9 ff ff 	cmp    WORD PTR [rbp-0x6e0],0x0
  2155e7:	00 
  2155e8:	74 63                	je     21564d <getLineNumberInfo+0x11dd>
  2155ea:	66 8b 85 20 f9 ff ff 	mov    ax,WORD PTR [rbp-0x6e0]
  2155f1:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  2155f8:	66 89 85 26 ec ff ff 	mov    WORD PTR [rbp-0x13da],ax
  2155ff:	e8 4c ee fe ff       	call   204450 <__zig_return_error>
  215604:	b9 30 00 00 00       	mov    ecx,0x30
  215609:	89 ca                	mov    edx,ecx
  21560b:	48 8d bd e0 f8 ff ff 	lea    rdi,[rbp-0x720]
  215612:	66 8b 85 26 ec ff ff 	mov    ax,WORD PTR [rbp-0x13da]
  215619:	66 89 85 e0 f8 ff ff 	mov    WORD PTR [rbp-0x720],ax
  215620:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  215627:	48 89 bd 18 ec ff ff 	mov    QWORD PTR [rbp-0x13e8],rdi
  21562e:	48 89 f7             	mov    rdi,rsi
  215631:	48 8b b5 18 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x13e8]
  215638:	e8 c3 c6 00 00       	call   221d00 <memcpy>
  21563d:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  215644:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21564b:	5d                   	pop    rbp
  21564c:	c3                   	ret    
  21564d:	48 8d b5 f8 ef ff ff 	lea    rsi,[rbp-0x1008]
  215654:	48 8d 95 b8 f8 ff ff 	lea    rdx,[rbp-0x748]
  21565b:	48 8b 85 28 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x6d8]
  215662:	48 89 85 60 ef ff ff 	mov    QWORD PTR [rbp-0x10a0],rax
                .dir_index = dir_index,
  215669:	48 8b 85 70 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1090]
                .mtime = mtime,
  215670:	48 8b 8d 68 ef ff ff 	mov    rcx,QWORD PTR [rbp-0x1098]
                .len_bytes = len_bytes,
  215677:	48 8b bd 60 ef ff ff 	mov    rdi,QWORD PTR [rbp-0x10a0]
            try file_entries.append(FileEntry{
  21567e:	4c 8b 85 78 ef ff ff 	mov    r8,QWORD PTR [rbp-0x1088]
  215685:	4c 89 85 b8 f8 ff ff 	mov    QWORD PTR [rbp-0x748],r8
  21568c:	4c 8b 85 80 ef ff ff 	mov    r8,QWORD PTR [rbp-0x1080]
  215693:	4c 89 85 c0 f8 ff ff 	mov    QWORD PTR [rbp-0x740],r8
  21569a:	48 89 85 c8 f8 ff ff 	mov    QWORD PTR [rbp-0x738],rax
  2156a1:	48 89 8d d0 f8 ff ff 	mov    QWORD PTR [rbp-0x730],rcx
  2156a8:	48 89 bd d8 f8 ff ff 	mov    QWORD PTR [rbp-0x728],rdi
  2156af:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  2156b6:	e8 45 39 00 00       	call   219000 <AlignedArrayList(FileEntry,8)_append>
  2156bb:	66 89 85 b6 f8 ff ff 	mov    WORD PTR [rbp-0x74a],ax
  2156c2:	66 83 bd b6 f8 ff ff 	cmp    WORD PTR [rbp-0x74a],0x0
  2156c9:	00 
  2156ca:	74 63                	je     21572f <getLineNumberInfo+0x12bf>
  2156cc:	66 8b 85 b6 f8 ff ff 	mov    ax,WORD PTR [rbp-0x74a]
  2156d3:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  2156da:	66 89 85 16 ec ff ff 	mov    WORD PTR [rbp-0x13ea],ax
  2156e1:	e8 6a ed fe ff       	call   204450 <__zig_return_error>
  2156e6:	b9 30 00 00 00       	mov    ecx,0x30
  2156eb:	89 ca                	mov    edx,ecx
  2156ed:	48 8d bd 80 f8 ff ff 	lea    rdi,[rbp-0x780]
  2156f4:	66 8b 85 16 ec ff ff 	mov    ax,WORD PTR [rbp-0x13ea]
  2156fb:	66 89 85 80 f8 ff ff 	mov    WORD PTR [rbp-0x780],ax
  215702:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  215709:	48 89 bd 08 ec ff ff 	mov    QWORD PTR [rbp-0x13f8],rdi
  215710:	48 89 f7             	mov    rdi,rsi
  215713:	48 8b b5 08 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x13f8]
  21571a:	e8 e1 c5 00 00       	call   221d00 <memcpy>
  21571f:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  215726:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21572d:	5d                   	pop    rbp
  21572e:	c3                   	ret    
        while (true) {
  21572f:	e9 b2 fc ff ff       	jmp    2153e6 <getLineNumberInfo+0xf76>
        try in_file.seekTo(prog_start_offset);
  215734:	48 8b b5 c8 f0 ff ff 	mov    rsi,QWORD PTR [rbp-0xf38]
  21573b:	48 8b 95 68 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf98]
  215742:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  215749:	e8 22 54 ff ff       	call   20ab70 <File_seekTo>
  21574e:	66 89 85 7e f8 ff ff 	mov    WORD PTR [rbp-0x782],ax
  215755:	66 83 bd 7e f8 ff ff 	cmp    WORD PTR [rbp-0x782],0x0
  21575c:	00 
  21575d:	74 63                	je     2157c2 <getLineNumberInfo+0x1352>
  21575f:	66 8b 85 7e f8 ff ff 	mov    ax,WORD PTR [rbp-0x782]
  215766:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21576d:	66 89 85 06 ec ff ff 	mov    WORD PTR [rbp-0x13fa],ax
  215774:	e8 d7 ec fe ff       	call   204450 <__zig_return_error>
  215779:	b9 30 00 00 00       	mov    ecx,0x30
  21577e:	89 ca                	mov    edx,ecx
  215780:	48 8d bd 48 f8 ff ff 	lea    rdi,[rbp-0x7b8]
  215787:	66 8b 85 06 ec ff ff 	mov    ax,WORD PTR [rbp-0x13fa]
  21578e:	66 89 85 48 f8 ff ff 	mov    WORD PTR [rbp-0x7b8],ax
  215795:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21579c:	48 89 bd f8 eb ff ff 	mov    QWORD PTR [rbp-0x1408],rdi
  2157a3:	48 89 f7             	mov    rdi,rsi
  2157a6:	48 8b b5 f8 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x1408]
  2157ad:	e8 4e c5 00 00       	call   221d00 <memcpy>
  2157b2:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  2157b9:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  2157c0:	5d                   	pop    rbp
  2157c1:	c3                   	ret    
        while (true) {
  2157c2:	eb 00                	jmp    2157c4 <getLineNumberInfo+0x1354>
  2157c4:	48 8d bd 40 f8 ff ff 	lea    rdi,[rbp-0x7c0]
            const opcode = try in_stream.readByte();
  2157cb:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  2157d2:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  2157d9:	e8 62 4c ff ff       	call   20a440 <InStream(ReadError)_readByte>
  2157de:	66 83 bd 40 f8 ff ff 	cmp    WORD PTR [rbp-0x7c0],0x0
  2157e5:	00 
  2157e6:	74 63                	je     21584b <getLineNumberInfo+0x13db>
  2157e8:	66 8b 85 40 f8 ff ff 	mov    ax,WORD PTR [rbp-0x7c0]
  2157ef:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  2157f6:	66 89 85 f6 eb ff ff 	mov    WORD PTR [rbp-0x140a],ax
  2157fd:	e8 4e ec fe ff       	call   204450 <__zig_return_error>
  215802:	b9 30 00 00 00       	mov    ecx,0x30
  215807:	89 ca                	mov    edx,ecx
  215809:	48 8d bd 08 f8 ff ff 	lea    rdi,[rbp-0x7f8]
  215810:	66 8b 85 f6 eb ff ff 	mov    ax,WORD PTR [rbp-0x140a]
  215817:	66 89 85 08 f8 ff ff 	mov    WORD PTR [rbp-0x7f8],ax
  21581e:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  215825:	48 89 bd e8 eb ff ff 	mov    QWORD PTR [rbp-0x1418],rdi
  21582c:	48 89 f7             	mov    rdi,rsi
  21582f:	48 8b b5 e8 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x1418]
  215836:	e8 c5 c4 00 00       	call   221d00 <memcpy>
  21583b:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  215842:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  215849:	5d                   	pop    rbp
  21584a:	c3                   	ret    
  21584b:	48 8d bd 5e ef ff ff 	lea    rdi,[rbp-0x10a2]
  215852:	be aa 00 00 00       	mov    esi,0xaa
  215857:	b8 01 00 00 00       	mov    eax,0x1
  21585c:	89 c2                	mov    edx,eax
  21585e:	8a 8d 42 f8 ff ff    	mov    cl,BYTE PTR [rbp-0x7be]
  215864:	88 8d 5f ef ff ff    	mov    BYTE PTR [rbp-0x10a1],cl
            var sub_op: u8 = undefined; // TODO move this to the correct scope and fix the compiler crash
  21586a:	e8 41 c4 00 00       	call   221cb0 <memset>
            if (opcode == DW.LNS_extended_op) {
  21586f:	80 bd 5f ef ff ff 00 	cmp    BYTE PTR [rbp-0x10a1],0x0
  215876:	0f 85 8d 08 00 00    	jne    216109 <getLineNumberInfo+0x1c99>
  21587c:	48 8d bd f8 f7 ff ff 	lea    rdi,[rbp-0x808]
                const op_size = try readULeb128(in_stream);
  215883:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21588a:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  215891:	e8 5a 80 ff ff       	call   20d8f0 <readULeb128>
  215896:	66 83 bd f8 f7 ff ff 	cmp    WORD PTR [rbp-0x808],0x0
  21589d:	00 
  21589e:	74 63                	je     215903 <getLineNumberInfo+0x1493>
  2158a0:	66 8b 85 f8 f7 ff ff 	mov    ax,WORD PTR [rbp-0x808]
  2158a7:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  2158ae:	66 89 85 e6 eb ff ff 	mov    WORD PTR [rbp-0x141a],ax
  2158b5:	e8 96 eb fe ff       	call   204450 <__zig_return_error>
  2158ba:	b9 30 00 00 00       	mov    ecx,0x30
  2158bf:	89 ca                	mov    edx,ecx
  2158c1:	48 8d bd b8 f7 ff ff 	lea    rdi,[rbp-0x848]
  2158c8:	66 8b 85 e6 eb ff ff 	mov    ax,WORD PTR [rbp-0x141a]
  2158cf:	66 89 85 b8 f7 ff ff 	mov    WORD PTR [rbp-0x848],ax
  2158d6:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  2158dd:	48 89 bd d8 eb ff ff 	mov    QWORD PTR [rbp-0x1428],rdi
  2158e4:	48 89 f7             	mov    rdi,rsi
  2158e7:	48 8b b5 d8 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x1428]
  2158ee:	e8 0d c4 00 00       	call   221d00 <memcpy>
  2158f3:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  2158fa:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  215901:	5d                   	pop    rbp
  215902:	c3                   	ret    
  215903:	48 8b 85 00 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x800]
  21590a:	48 89 85 50 ef ff ff 	mov    QWORD PTR [rbp-0x10b0],rax
                if (op_size < 1) return error.InvalidDebugInfo;
  215911:	48 83 bd 50 ef ff ff 	cmp    QWORD PTR [rbp-0x10b0],0x1
  215918:	01 
  215919:	73 47                	jae    215962 <getLineNumberInfo+0x14f2>
  21591b:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  215922:	e8 29 eb fe ff       	call   204450 <__zig_return_error>
  215927:	48 8d 3d 3a b4 fe ff 	lea    rdi,[rip+0xfffffffffffeb43a]        # 200d68 <__unnamed_110>
  21592e:	b8 30 00 00 00       	mov    eax,0x30
  215933:	89 c2                	mov    edx,eax
  215935:	48 8b 8d 60 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x11a0]
  21593c:	48 89 bd d0 eb ff ff 	mov    QWORD PTR [rbp-0x1430],rdi
  215943:	48 89 cf             	mov    rdi,rcx
  215946:	48 8b b5 d0 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x1430]
  21594d:	e8 ae c3 00 00       	call   221d00 <memcpy>
  215952:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  215959:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  215960:	5d                   	pop    rbp
  215961:	c3                   	ret    
  215962:	eb 00                	jmp    215964 <getLineNumberInfo+0x14f4>
  215964:	48 8d bd b0 f7 ff ff 	lea    rdi,[rbp-0x850]
                sub_op = try in_stream.readByte();
  21596b:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  215972:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  215979:	e8 c2 4a ff ff       	call   20a440 <InStream(ReadError)_readByte>
  21597e:	66 83 bd b0 f7 ff ff 	cmp    WORD PTR [rbp-0x850],0x0
  215985:	00 
  215986:	74 63                	je     2159eb <getLineNumberInfo+0x157b>
  215988:	66 8b 85 b0 f7 ff ff 	mov    ax,WORD PTR [rbp-0x850]
  21598f:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  215996:	66 89 85 ce eb ff ff 	mov    WORD PTR [rbp-0x1432],ax
  21599d:	e8 ae ea fe ff       	call   204450 <__zig_return_error>
  2159a2:	b9 30 00 00 00       	mov    ecx,0x30
  2159a7:	89 ca                	mov    edx,ecx
  2159a9:	48 8d bd 78 f7 ff ff 	lea    rdi,[rbp-0x888]
  2159b0:	66 8b 85 ce eb ff ff 	mov    ax,WORD PTR [rbp-0x1432]
  2159b7:	66 89 85 78 f7 ff ff 	mov    WORD PTR [rbp-0x888],ax
  2159be:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  2159c5:	48 89 bd c0 eb ff ff 	mov    QWORD PTR [rbp-0x1440],rdi
  2159cc:	48 89 f7             	mov    rdi,rsi
  2159cf:	48 8b b5 c0 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x1440]
  2159d6:	e8 25 c3 00 00       	call   221d00 <memcpy>
  2159db:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  2159e2:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  2159e9:	5d                   	pop    rbp
  2159ea:	c3                   	ret    
  2159eb:	8a 85 b2 f7 ff ff    	mov    al,BYTE PTR [rbp-0x84e]
  2159f1:	88 85 5e ef ff ff    	mov    BYTE PTR [rbp-0x10a2],al
                switch (sub_op) {
  2159f7:	8a 85 5e ef ff ff    	mov    al,BYTE PTR [rbp-0x10a2]
  2159fd:	88 c1                	mov    cl,al
  2159ff:	80 e9 01             	sub    cl,0x1
  215a02:	88 85 bf eb ff ff    	mov    BYTE PTR [rbp-0x1441],al
  215a08:	88 8d be eb ff ff    	mov    BYTE PTR [rbp-0x1442],cl
  215a0e:	0f 84 4a 01 00 00    	je     215b5e <getLineNumberInfo+0x16ee>
  215a14:	eb 00                	jmp    215a16 <getLineNumberInfo+0x15a6>
  215a16:	8a 85 bf eb ff ff    	mov    al,BYTE PTR [rbp-0x1441]
  215a1c:	2c 02                	sub    al,0x2
  215a1e:	88 85 bd eb ff ff    	mov    BYTE PTR [rbp-0x1443],al
  215a24:	0f 84 df 02 00 00    	je     215d09 <getLineNumberInfo+0x1899>
  215a2a:	eb 00                	jmp    215a2c <getLineNumberInfo+0x15bc>
  215a2c:	8a 85 bf eb ff ff    	mov    al,BYTE PTR [rbp-0x1441]
  215a32:	2c 03                	sub    al,0x3
  215a34:	88 85 bc eb ff ff    	mov    BYTE PTR [rbp-0x1444],al
  215a3a:	0f 84 8e 03 00 00    	je     215dce <getLineNumberInfo+0x195e>
  215a40:	eb 00                	jmp    215a42 <getLineNumberInfo+0x15d2>
                        const fwd_amt = math.cast(isize, op_size - 1) catch return error.InvalidDebugInfo;
  215a42:	48 8b 85 50 ef ff ff 	mov    rax,QWORD PTR [rbp-0x10b0]
  215a49:	48 83 e8 01          	sub    rax,0x1
  215a4d:	0f 92 c1             	setb   cl
  215a50:	48 89 85 b0 eb ff ff 	mov    QWORD PTR [rbp-0x1450],rax
  215a57:	88 8d af eb ff ff    	mov    BYTE PTR [rbp-0x1451],cl
  215a5d:	0f 82 75 11 00 00    	jb     216bd8 <getLineNumberInfo+0x2768>
  215a63:	e9 80 11 00 00       	jmp    216be8 <getLineNumberInfo+0x2778>
  215a68:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  215a6f:	e8 dc e9 fe ff       	call   204450 <__zig_return_error>
  215a74:	48 8d 3d 1d b3 fe ff 	lea    rdi,[rip+0xfffffffffffeb31d]        # 200d98 <__unnamed_111>
  215a7b:	b8 30 00 00 00       	mov    eax,0x30
  215a80:	89 c2                	mov    edx,eax
  215a82:	48 8b 8d 60 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x11a0]
  215a89:	48 89 bd a0 eb ff ff 	mov    QWORD PTR [rbp-0x1460],rdi
  215a90:	48 89 cf             	mov    rdi,rcx
  215a93:	48 8b b5 a0 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x1460]
  215a9a:	e8 61 c2 00 00       	call   221d00 <memcpy>
  215a9f:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  215aa6:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  215aad:	5d                   	pop    rbp
  215aae:	c3                   	ret    
  215aaf:	48 8b 85 70 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x890]
  215ab6:	48 89 85 98 eb ff ff 	mov    QWORD PTR [rbp-0x1468],rax
  215abd:	48 8b 85 98 eb ff ff 	mov    rax,QWORD PTR [rbp-0x1468]
  215ac4:	48 89 85 48 ef ff ff 	mov    QWORD PTR [rbp-0x10b8],rax
                        try in_file.seekForward(fwd_amt);
  215acb:	48 8b b5 c8 f0 ff ff 	mov    rsi,QWORD PTR [rbp-0xf38]
  215ad2:	48 8b 95 48 ef ff ff 	mov    rdx,QWORD PTR [rbp-0x10b8]
  215ad9:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  215ae0:	e8 2b 4a ff ff       	call   20a510 <File_seekForward>
  215ae5:	66 89 85 56 f7 ff ff 	mov    WORD PTR [rbp-0x8aa],ax
  215aec:	66 83 bd 56 f7 ff ff 	cmp    WORD PTR [rbp-0x8aa],0x0
  215af3:	00 
  215af4:	74 63                	je     215b59 <getLineNumberInfo+0x16e9>
  215af6:	66 8b 85 56 f7 ff ff 	mov    ax,WORD PTR [rbp-0x8aa]
  215afd:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  215b04:	66 89 85 96 eb ff ff 	mov    WORD PTR [rbp-0x146a],ax
  215b0b:	e8 40 e9 fe ff       	call   204450 <__zig_return_error>
  215b10:	b9 30 00 00 00       	mov    ecx,0x30
  215b15:	89 ca                	mov    edx,ecx
  215b17:	48 8d bd 20 f7 ff ff 	lea    rdi,[rbp-0x8e0]
  215b1e:	66 8b 85 96 eb ff ff 	mov    ax,WORD PTR [rbp-0x146a]
  215b25:	66 89 85 20 f7 ff ff 	mov    WORD PTR [rbp-0x8e0],ax
  215b2c:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  215b33:	48 89 bd 88 eb ff ff 	mov    QWORD PTR [rbp-0x1478],rdi
  215b3a:	48 89 f7             	mov    rdi,rsi
  215b3d:	48 8b b5 88 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x1478]
  215b44:	e8 b7 c1 00 00       	call   221d00 <memcpy>
  215b49:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  215b50:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  215b57:	5d                   	pop    rbp
  215b58:	c3                   	ret    
                switch (sub_op) {
  215b59:	e9 a6 05 00 00       	jmp    216104 <getLineNumberInfo+0x1c94>
  215b5e:	48 8d bd e8 f6 ff ff 	lea    rdi,[rbp-0x918]
  215b65:	48 8d 95 88 ef ff ff 	lea    rdx,[rbp-0x1078]
                        prog.end_sequence = true;
  215b6c:	c6 85 aa ef ff ff 01 	mov    BYTE PTR [rbp-0x1056],0x1
                        if (try prog.checkLineMatch()) |info| return info;
  215b73:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  215b7a:	e8 b1 35 00 00       	call   219130 <LineNumberProgram_checkLineMatch>
  215b7f:	66 83 bd e8 f6 ff ff 	cmp    WORD PTR [rbp-0x918],0x0
  215b86:	00 
  215b87:	74 63                	je     215bec <getLineNumberInfo+0x177c>
  215b89:	66 8b 85 e8 f6 ff ff 	mov    ax,WORD PTR [rbp-0x918]
  215b90:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  215b97:	66 89 85 86 eb ff ff 	mov    WORD PTR [rbp-0x147a],ax
  215b9e:	e8 ad e8 fe ff       	call   204450 <__zig_return_error>
  215ba3:	b9 30 00 00 00       	mov    ecx,0x30
  215ba8:	89 ca                	mov    edx,ecx
  215baa:	48 8d bd 80 f6 ff ff 	lea    rdi,[rbp-0x980]
  215bb1:	66 8b 85 86 eb ff ff 	mov    ax,WORD PTR [rbp-0x147a]
  215bb8:	66 89 85 80 f6 ff ff 	mov    WORD PTR [rbp-0x980],ax
  215bbf:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  215bc6:	48 89 bd 78 eb ff ff 	mov    QWORD PTR [rbp-0x1488],rdi
  215bcd:	48 89 f7             	mov    rdi,rsi
  215bd0:	48 8b b5 78 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x1488]
  215bd7:	e8 24 c1 00 00       	call   221d00 <memcpy>
  215bdc:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  215be3:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  215bea:	5d                   	pop    rbp
  215beb:	c3                   	ret    
  215bec:	48 8d 85 e8 f6 ff ff 	lea    rax,[rbp-0x918]
  215bf3:	48 83 c0 08          	add    rax,0x8
  215bf7:	f6 85 18 f7 ff ff 01 	test   BYTE PTR [rbp-0x8e8],0x1
  215bfe:	48 89 85 70 eb ff ff 	mov    QWORD PTR [rbp-0x1490],rax
  215c05:	75 05                	jne    215c0c <getLineNumberInfo+0x179c>
  215c07:	e9 b4 00 00 00       	jmp    215cc0 <getLineNumberInfo+0x1850>
  215c0c:	b8 30 00 00 00       	mov    eax,0x30
  215c11:	89 c2                	mov    edx,eax
  215c13:	48 8d 8d 50 f6 ff ff 	lea    rcx,[rbp-0x9b0]
  215c1a:	b8 28 00 00 00       	mov    eax,0x28
  215c1f:	89 c6                	mov    esi,eax
  215c21:	48 8d bd 20 ef ff ff 	lea    rdi,[rbp-0x10e0]
  215c28:	4c 8b 85 70 eb ff ff 	mov    r8,QWORD PTR [rbp-0x1490]
  215c2f:	49 89 f9             	mov    r9,rdi
  215c32:	48 89 bd 68 eb ff ff 	mov    QWORD PTR [rbp-0x1498],rdi
  215c39:	4c 89 cf             	mov    rdi,r9
  215c3c:	48 89 b5 60 eb ff ff 	mov    QWORD PTR [rbp-0x14a0],rsi
  215c43:	4c 89 c6             	mov    rsi,r8
  215c46:	4c 8b 85 60 eb ff ff 	mov    r8,QWORD PTR [rbp-0x14a0]
  215c4d:	48 89 95 58 eb ff ff 	mov    QWORD PTR [rbp-0x14a8],rdx
  215c54:	4c 89 c2             	mov    rdx,r8
  215c57:	48 89 8d 50 eb ff ff 	mov    QWORD PTR [rbp-0x14b0],rcx
  215c5e:	e8 9d c0 00 00       	call   221d00 <memcpy>
  215c63:	66 c7 85 50 f6 ff ff 	mov    WORD PTR [rbp-0x9b0],0x0
  215c6a:	00 00 
  215c6c:	48 8b 8d 50 eb ff ff 	mov    rcx,QWORD PTR [rbp-0x14b0]
  215c73:	48 83 c1 08          	add    rcx,0x8
  215c77:	48 8b 95 68 eb ff ff 	mov    rdx,QWORD PTR [rbp-0x1498]
  215c7e:	48 89 cf             	mov    rdi,rcx
  215c81:	48 89 d6             	mov    rsi,rdx
  215c84:	48 8b 95 60 eb ff ff 	mov    rdx,QWORD PTR [rbp-0x14a0]
  215c8b:	e8 70 c0 00 00       	call   221d00 <memcpy>
  215c90:	48 8b 8d 50 eb ff ff 	mov    rcx,QWORD PTR [rbp-0x14b0]
  215c97:	48 8b 95 60 ee ff ff 	mov    rdx,QWORD PTR [rbp-0x11a0]
  215c9e:	48 89 d7             	mov    rdi,rdx
  215ca1:	48 89 ce             	mov    rsi,rcx
  215ca4:	48 8b 95 58 eb ff ff 	mov    rdx,QWORD PTR [rbp-0x14a8]
  215cab:	e8 50 c0 00 00       	call   221d00 <memcpy>
  215cb0:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  215cb7:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  215cbe:	5d                   	pop    rbp
  215cbf:	c3                   	ret    
  215cc0:	eb 00                	jmp    215cc2 <getLineNumberInfo+0x1852>
                        return error.MissingDebugInfo;
  215cc2:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  215cc9:	e8 82 e7 fe ff       	call   204450 <__zig_return_error>
  215cce:	48 8d 3d f3 b0 fe ff 	lea    rdi,[rip+0xfffffffffffeb0f3]        # 200dc8 <__unnamed_112>
  215cd5:	b8 30 00 00 00       	mov    eax,0x30
  215cda:	89 c2                	mov    edx,eax
  215cdc:	48 8b 8d 60 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x11a0]
  215ce3:	48 89 bd 48 eb ff ff 	mov    QWORD PTR [rbp-0x14b8],rdi
  215cea:	48 89 cf             	mov    rdi,rcx
  215ced:	48 8b b5 48 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x14b8]
  215cf4:	e8 07 c0 00 00       	call   221d00 <memcpy>
  215cf9:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  215d00:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  215d07:	5d                   	pop    rbp
  215d08:	c3                   	ret    
  215d09:	48 8d 85 40 f6 ff ff 	lea    rax,[rbp-0x9c0]
                        const addr = try in_stream.readInt(st.elf.endian, usize);
  215d10:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  215d17:	48 8b 8d f0 f0 ff ff 	mov    rcx,QWORD PTR [rbp-0xf10]
  215d1e:	40 8a 71 12          	mov    sil,BYTE PTR [rcx+0x12]
  215d22:	40 0f b6 ce          	movzx  ecx,sil
  215d26:	48 8d bd 40 f6 ff ff 	lea    rdi,[rbp-0x9c0]
  215d2d:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  215d34:	48 89 85 40 eb ff ff 	mov    QWORD PTR [rbp-0x14c0],rax
  215d3b:	e8 80 1c 00 00       	call   2179c0 <InStream(ReadError)_readInt.48>
  215d40:	66 83 bd 40 f6 ff ff 	cmp    WORD PTR [rbp-0x9c0],0x0
  215d47:	00 
  215d48:	74 63                	je     215dad <getLineNumberInfo+0x193d>
  215d4a:	66 8b 85 40 f6 ff ff 	mov    ax,WORD PTR [rbp-0x9c0]
  215d51:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  215d58:	66 89 85 3e eb ff ff 	mov    WORD PTR [rbp-0x14c2],ax
  215d5f:	e8 ec e6 fe ff       	call   204450 <__zig_return_error>
  215d64:	b9 30 00 00 00       	mov    ecx,0x30
  215d69:	89 ca                	mov    edx,ecx
  215d6b:	48 8d bd 00 f6 ff ff 	lea    rdi,[rbp-0xa00]
  215d72:	66 8b 85 3e eb ff ff 	mov    ax,WORD PTR [rbp-0x14c2]
  215d79:	66 89 85 00 f6 ff ff 	mov    WORD PTR [rbp-0xa00],ax
  215d80:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  215d87:	48 89 bd 30 eb ff ff 	mov    QWORD PTR [rbp-0x14d0],rdi
  215d8e:	48 89 f7             	mov    rdi,rsi
  215d91:	48 8b b5 30 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x14d0]
  215d98:	e8 63 bf 00 00       	call   221d00 <memcpy>
  215d9d:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  215da4:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  215dab:	5d                   	pop    rbp
  215dac:	c3                   	ret    
  215dad:	48 8b 85 48 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x9b8]
  215db4:	48 89 85 18 ef ff ff 	mov    QWORD PTR [rbp-0x10e8],rax
                        prog.address = addr;
  215dbb:	48 8b 85 18 ef ff ff 	mov    rax,QWORD PTR [rbp-0x10e8]
  215dc2:	48 89 85 88 ef ff ff 	mov    QWORD PTR [rbp-0x1078],rax
                switch (sub_op) {
  215dc9:	e9 36 03 00 00       	jmp    216104 <getLineNumberInfo+0x1c94>
  215dce:	48 8d bd e8 f5 ff ff 	lea    rdi,[rbp-0xa18]
                        const file_name = try st.readString();
  215dd5:	48 8b 95 f0 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf10]
  215ddc:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  215de3:	e8 38 22 00 00       	call   218020 <ElfStackTrace_readString>
  215de8:	66 83 bd e8 f5 ff ff 	cmp    WORD PTR [rbp-0xa18],0x0
  215def:	00 
  215df0:	74 63                	je     215e55 <getLineNumberInfo+0x19e5>
  215df2:	66 8b 85 e8 f5 ff ff 	mov    ax,WORD PTR [rbp-0xa18]
  215df9:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  215e00:	66 89 85 2e eb ff ff 	mov    WORD PTR [rbp-0x14d2],ax
  215e07:	e8 44 e6 fe ff       	call   204450 <__zig_return_error>
  215e0c:	b9 30 00 00 00       	mov    ecx,0x30
  215e11:	89 ca                	mov    edx,ecx
  215e13:	48 8d bd a0 f5 ff ff 	lea    rdi,[rbp-0xa60]
  215e1a:	66 8b 85 2e eb ff ff 	mov    ax,WORD PTR [rbp-0x14d2]
  215e21:	66 89 85 a0 f5 ff ff 	mov    WORD PTR [rbp-0xa60],ax
  215e28:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  215e2f:	48 89 bd 20 eb ff ff 	mov    QWORD PTR [rbp-0x14e0],rdi
  215e36:	48 89 f7             	mov    rdi,rsi
  215e39:	48 8b b5 20 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x14e0]
  215e40:	e8 bb be 00 00       	call   221d00 <memcpy>
  215e45:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  215e4c:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  215e53:	5d                   	pop    rbp
  215e54:	c3                   	ret    
  215e55:	48 8d bd 90 f5 ff ff 	lea    rdi,[rbp-0xa70]
  215e5c:	48 8b 85 f0 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa10]
  215e63:	48 89 85 08 ef ff ff 	mov    QWORD PTR [rbp-0x10f8],rax
  215e6a:	48 8b 85 f8 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa08]
  215e71:	48 89 85 10 ef ff ff 	mov    QWORD PTR [rbp-0x10f0],rax
                        const dir_index = try readULeb128(in_stream);
  215e78:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  215e7f:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  215e86:	e8 65 7a ff ff       	call   20d8f0 <readULeb128>
  215e8b:	66 83 bd 90 f5 ff ff 	cmp    WORD PTR [rbp-0xa70],0x0
  215e92:	00 
  215e93:	74 63                	je     215ef8 <getLineNumberInfo+0x1a88>
  215e95:	66 8b 85 90 f5 ff ff 	mov    ax,WORD PTR [rbp-0xa70]
  215e9c:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  215ea3:	66 89 85 1e eb ff ff 	mov    WORD PTR [rbp-0x14e2],ax
  215eaa:	e8 a1 e5 fe ff       	call   204450 <__zig_return_error>
  215eaf:	b9 30 00 00 00       	mov    ecx,0x30
  215eb4:	89 ca                	mov    edx,ecx
  215eb6:	48 8d bd 50 f5 ff ff 	lea    rdi,[rbp-0xab0]
  215ebd:	66 8b 85 1e eb ff ff 	mov    ax,WORD PTR [rbp-0x14e2]
  215ec4:	66 89 85 50 f5 ff ff 	mov    WORD PTR [rbp-0xab0],ax
  215ecb:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  215ed2:	48 89 bd 10 eb ff ff 	mov    QWORD PTR [rbp-0x14f0],rdi
  215ed9:	48 89 f7             	mov    rdi,rsi
  215edc:	48 8b b5 10 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x14f0]
  215ee3:	e8 18 be 00 00       	call   221d00 <memcpy>
  215ee8:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  215eef:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  215ef6:	5d                   	pop    rbp
  215ef7:	c3                   	ret    
  215ef8:	48 8d bd 40 f5 ff ff 	lea    rdi,[rbp-0xac0]
  215eff:	48 8b 85 98 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa68]
  215f06:	48 89 85 00 ef ff ff 	mov    QWORD PTR [rbp-0x1100],rax
                        const mtime = try readULeb128(in_stream);
  215f0d:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  215f14:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  215f1b:	e8 d0 79 ff ff       	call   20d8f0 <readULeb128>
  215f20:	66 83 bd 40 f5 ff ff 	cmp    WORD PTR [rbp-0xac0],0x0
  215f27:	00 
  215f28:	74 63                	je     215f8d <getLineNumberInfo+0x1b1d>
  215f2a:	66 8b 85 40 f5 ff ff 	mov    ax,WORD PTR [rbp-0xac0]
  215f31:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  215f38:	66 89 85 0e eb ff ff 	mov    WORD PTR [rbp-0x14f2],ax
  215f3f:	e8 0c e5 fe ff       	call   204450 <__zig_return_error>
  215f44:	b9 30 00 00 00       	mov    ecx,0x30
  215f49:	89 ca                	mov    edx,ecx
  215f4b:	48 8d bd 00 f5 ff ff 	lea    rdi,[rbp-0xb00]
  215f52:	66 8b 85 0e eb ff ff 	mov    ax,WORD PTR [rbp-0x14f2]
  215f59:	66 89 85 00 f5 ff ff 	mov    WORD PTR [rbp-0xb00],ax
  215f60:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  215f67:	48 89 bd 00 eb ff ff 	mov    QWORD PTR [rbp-0x1500],rdi
  215f6e:	48 89 f7             	mov    rdi,rsi
  215f71:	48 8b b5 00 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x1500]
  215f78:	e8 83 bd 00 00       	call   221d00 <memcpy>
  215f7d:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  215f84:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  215f8b:	5d                   	pop    rbp
  215f8c:	c3                   	ret    
  215f8d:	48 8d bd f0 f4 ff ff 	lea    rdi,[rbp-0xb10]
  215f94:	48 8b 85 48 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xab8]
  215f9b:	48 89 85 f8 ee ff ff 	mov    QWORD PTR [rbp-0x1108],rax
                        const len_bytes = try readULeb128(in_stream);
  215fa2:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  215fa9:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  215fb0:	e8 3b 79 ff ff       	call   20d8f0 <readULeb128>
  215fb5:	66 83 bd f0 f4 ff ff 	cmp    WORD PTR [rbp-0xb10],0x0
  215fbc:	00 
  215fbd:	74 63                	je     216022 <getLineNumberInfo+0x1bb2>
  215fbf:	66 8b 85 f0 f4 ff ff 	mov    ax,WORD PTR [rbp-0xb10]
  215fc6:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  215fcd:	66 89 85 fe ea ff ff 	mov    WORD PTR [rbp-0x1502],ax
  215fd4:	e8 77 e4 fe ff       	call   204450 <__zig_return_error>
  215fd9:	b9 30 00 00 00       	mov    ecx,0x30
  215fde:	89 ca                	mov    edx,ecx
  215fe0:	48 8d bd b0 f4 ff ff 	lea    rdi,[rbp-0xb50]
  215fe7:	66 8b 85 fe ea ff ff 	mov    ax,WORD PTR [rbp-0x1502]
  215fee:	66 89 85 b0 f4 ff ff 	mov    WORD PTR [rbp-0xb50],ax
  215ff5:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  215ffc:	48 89 bd f0 ea ff ff 	mov    QWORD PTR [rbp-0x1510],rdi
  216003:	48 89 f7             	mov    rdi,rsi
  216006:	48 8b b5 f0 ea ff ff 	mov    rsi,QWORD PTR [rbp-0x1510]
  21600d:	e8 ee bc 00 00       	call   221d00 <memcpy>
  216012:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  216019:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  216020:	5d                   	pop    rbp
  216021:	c3                   	ret    
  216022:	48 8d b5 f8 ef ff ff 	lea    rsi,[rbp-0x1008]
  216029:	48 8d 95 88 f4 ff ff 	lea    rdx,[rbp-0xb78]
  216030:	48 8b 85 f8 f4 ff ff 	mov    rax,QWORD PTR [rbp-0xb08]
  216037:	48 89 85 f0 ee ff ff 	mov    QWORD PTR [rbp-0x1110],rax
                            .dir_index = dir_index,
  21603e:	48 8b 85 00 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1100]
                            .mtime = mtime,
  216045:	48 8b 8d f8 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x1108]
                            .len_bytes = len_bytes,
  21604c:	48 8b bd f0 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x1110]
                        try file_entries.append(FileEntry{
  216053:	4c 8b 85 08 ef ff ff 	mov    r8,QWORD PTR [rbp-0x10f8]
  21605a:	4c 89 85 88 f4 ff ff 	mov    QWORD PTR [rbp-0xb78],r8
  216061:	4c 8b 85 10 ef ff ff 	mov    r8,QWORD PTR [rbp-0x10f0]
  216068:	4c 89 85 90 f4 ff ff 	mov    QWORD PTR [rbp-0xb70],r8
  21606f:	48 89 85 98 f4 ff ff 	mov    QWORD PTR [rbp-0xb68],rax
  216076:	48 89 8d a0 f4 ff ff 	mov    QWORD PTR [rbp-0xb60],rcx
  21607d:	48 89 bd a8 f4 ff ff 	mov    QWORD PTR [rbp-0xb58],rdi
  216084:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21608b:	e8 70 2f 00 00       	call   219000 <AlignedArrayList(FileEntry,8)_append>
  216090:	66 89 85 86 f4 ff ff 	mov    WORD PTR [rbp-0xb7a],ax
  216097:	66 83 bd 86 f4 ff ff 	cmp    WORD PTR [rbp-0xb7a],0x0
  21609e:	00 
  21609f:	74 63                	je     216104 <getLineNumberInfo+0x1c94>
  2160a1:	66 8b 85 86 f4 ff ff 	mov    ax,WORD PTR [rbp-0xb7a]
  2160a8:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  2160af:	66 89 85 ee ea ff ff 	mov    WORD PTR [rbp-0x1512],ax
  2160b6:	e8 95 e3 fe ff       	call   204450 <__zig_return_error>
  2160bb:	b9 30 00 00 00       	mov    ecx,0x30
  2160c0:	89 ca                	mov    edx,ecx
  2160c2:	48 8d bd 50 f4 ff ff 	lea    rdi,[rbp-0xbb0]
  2160c9:	66 8b 85 ee ea ff ff 	mov    ax,WORD PTR [rbp-0x1512]
  2160d0:	66 89 85 50 f4 ff ff 	mov    WORD PTR [rbp-0xbb0],ax
  2160d7:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  2160de:	48 89 bd e0 ea ff ff 	mov    QWORD PTR [rbp-0x1520],rdi
  2160e5:	48 89 f7             	mov    rdi,rsi
  2160e8:	48 8b b5 e0 ea ff ff 	mov    rsi,QWORD PTR [rbp-0x1520]
  2160ef:	e8 0c bc 00 00       	call   221d00 <memcpy>
  2160f4:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  2160fb:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  216102:	5d                   	pop    rbp
  216103:	c3                   	ret    
            if (opcode == DW.LNS_extended_op) {
  216104:	e9 4d 08 00 00       	jmp    216956 <getLineNumberInfo+0x24e6>
            } else if (opcode >= opcode_base) {
  216109:	8a 85 5f ef ff ff    	mov    al,BYTE PTR [rbp-0x10a1]
  21610f:	3a 85 63 f0 ff ff    	cmp    al,BYTE PTR [rbp-0xf9d]
  216115:	0f 82 68 01 00 00    	jb     216283 <getLineNumberInfo+0x1e13>
                const adjusted_opcode = opcode - opcode_base;
  21611b:	8a 85 5f ef ff ff    	mov    al,BYTE PTR [rbp-0x10a1]
  216121:	2a 85 63 f0 ff ff    	sub    al,BYTE PTR [rbp-0xf9d]
  216127:	0f 92 c1             	setb   cl
  21612a:	f6 c1 01             	test   cl,0x1
  21612d:	88 85 df ea ff ff    	mov    BYTE PTR [rbp-0x1521],al
  216133:	0f 85 dc 0a 00 00    	jne    216c15 <getLineNumberInfo+0x27a5>
  216139:	e9 e7 0a 00 00       	jmp    216c25 <getLineNumberInfo+0x27b5>
                if (try prog.checkLineMatch()) |info| return info;
  21613e:	66 8b 85 18 f4 ff ff 	mov    ax,WORD PTR [rbp-0xbe8]
  216145:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21614c:	66 89 85 dc ea ff ff 	mov    WORD PTR [rbp-0x1524],ax
  216153:	e8 f8 e2 fe ff       	call   204450 <__zig_return_error>
  216158:	b9 30 00 00 00       	mov    ecx,0x30
  21615d:	89 ca                	mov    edx,ecx
  21615f:	48 8d bd b0 f3 ff ff 	lea    rdi,[rbp-0xc50]
  216166:	66 8b 85 dc ea ff ff 	mov    ax,WORD PTR [rbp-0x1524]
  21616d:	66 89 85 b0 f3 ff ff 	mov    WORD PTR [rbp-0xc50],ax
  216174:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21617b:	48 89 bd d0 ea ff ff 	mov    QWORD PTR [rbp-0x1530],rdi
  216182:	48 89 f7             	mov    rdi,rsi
  216185:	48 8b b5 d0 ea ff ff 	mov    rsi,QWORD PTR [rbp-0x1530]
  21618c:	e8 6f bb 00 00       	call   221d00 <memcpy>
  216191:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  216198:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21619f:	5d                   	pop    rbp
  2161a0:	c3                   	ret    
  2161a1:	48 8d 85 18 f4 ff ff 	lea    rax,[rbp-0xbe8]
  2161a8:	48 83 c0 08          	add    rax,0x8
  2161ac:	f6 85 48 f4 ff ff 01 	test   BYTE PTR [rbp-0xbb8],0x1
  2161b3:	48 89 85 c8 ea ff ff 	mov    QWORD PTR [rbp-0x1538],rax
  2161ba:	75 05                	jne    2161c1 <getLineNumberInfo+0x1d51>
  2161bc:	e9 b4 00 00 00       	jmp    216275 <getLineNumberInfo+0x1e05>
  2161c1:	b8 30 00 00 00       	mov    eax,0x30
  2161c6:	89 c2                	mov    edx,eax
  2161c8:	48 8d 8d 80 f3 ff ff 	lea    rcx,[rbp-0xc80]
  2161cf:	b8 28 00 00 00       	mov    eax,0x28
  2161d4:	89 c6                	mov    esi,eax
  2161d6:	48 8d bd c0 ee ff ff 	lea    rdi,[rbp-0x1140]
  2161dd:	4c 8b 85 c8 ea ff ff 	mov    r8,QWORD PTR [rbp-0x1538]
  2161e4:	49 89 f9             	mov    r9,rdi
  2161e7:	48 89 bd c0 ea ff ff 	mov    QWORD PTR [rbp-0x1540],rdi
  2161ee:	4c 89 cf             	mov    rdi,r9
  2161f1:	48 89 b5 b8 ea ff ff 	mov    QWORD PTR [rbp-0x1548],rsi
  2161f8:	4c 89 c6             	mov    rsi,r8
  2161fb:	4c 8b 85 b8 ea ff ff 	mov    r8,QWORD PTR [rbp-0x1548]
  216202:	48 89 95 b0 ea ff ff 	mov    QWORD PTR [rbp-0x1550],rdx
  216209:	4c 89 c2             	mov    rdx,r8
  21620c:	48 89 8d a8 ea ff ff 	mov    QWORD PTR [rbp-0x1558],rcx
  216213:	e8 e8 ba 00 00       	call   221d00 <memcpy>
  216218:	66 c7 85 80 f3 ff ff 	mov    WORD PTR [rbp-0xc80],0x0
  21621f:	00 00 
  216221:	48 8b 8d a8 ea ff ff 	mov    rcx,QWORD PTR [rbp-0x1558]
  216228:	48 83 c1 08          	add    rcx,0x8
  21622c:	48 8b 95 c0 ea ff ff 	mov    rdx,QWORD PTR [rbp-0x1540]
  216233:	48 89 cf             	mov    rdi,rcx
  216236:	48 89 d6             	mov    rsi,rdx
  216239:	48 8b 95 b8 ea ff ff 	mov    rdx,QWORD PTR [rbp-0x1548]
  216240:	e8 bb ba 00 00       	call   221d00 <memcpy>
  216245:	48 8b 8d a8 ea ff ff 	mov    rcx,QWORD PTR [rbp-0x1558]
  21624c:	48 8b 95 60 ee ff ff 	mov    rdx,QWORD PTR [rbp-0x11a0]
  216253:	48 89 d7             	mov    rdi,rdx
  216256:	48 89 ce             	mov    rsi,rcx
  216259:	48 8b 95 b0 ea ff ff 	mov    rdx,QWORD PTR [rbp-0x1550]
  216260:	e8 9b ba 00 00       	call   221d00 <memcpy>
  216265:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21626c:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  216273:	5d                   	pop    rbp
  216274:	c3                   	ret    
  216275:	eb 00                	jmp    216277 <getLineNumberInfo+0x1e07>
                prog.basic_block = false;
  216277:	c6 85 a9 ef ff ff 00 	mov    BYTE PTR [rbp-0x1057],0x0
            } else if (opcode >= opcode_base) {
  21627e:	e9 d1 06 00 00       	jmp    216954 <getLineNumberInfo+0x24e4>
                switch (opcode) {
  216283:	8a 85 5f ef ff ff    	mov    al,BYTE PTR [rbp-0x10a1]
  216289:	04 ff                	add    al,0xff
  21628b:	0f b6 c8             	movzx  ecx,al
  21628e:	89 ca                	mov    edx,ecx
  216290:	2c 09                	sub    al,0x9
  216292:	48 89 95 a0 ea ff ff 	mov    QWORD PTR [rbp-0x1560],rdx
  216299:	88 85 9f ea ff ff    	mov    BYTE PTR [rbp-0x1561],al
  21629f:	77 17                	ja     2162b8 <getLineNumberInfo+0x1e48>
  2162a1:	48 8d 05 c4 9f fe ff 	lea    rax,[rip+0xfffffffffffe9fc4]        # 20026c <arch-0x2c7>
  2162a8:	48 8b 8d a0 ea ff ff 	mov    rcx,QWORD PTR [rbp-0x1560]
  2162af:	48 63 14 88          	movsxd rdx,DWORD PTR [rax+rcx*4]
  2162b3:	48 01 c2             	add    rdx,rax
  2162b6:	ff e2                	jmp    rdx
                        if (opcode - 1 >= standard_opcode_lengths.len) return error.InvalidDebugInfo;
  2162b8:	8a 85 5f ef ff ff    	mov    al,BYTE PTR [rbp-0x10a1]
  2162be:	2c 01                	sub    al,0x1
  2162c0:	0f 92 c1             	setb   cl
  2162c3:	f6 c1 01             	test   cl,0x1
  2162c6:	88 85 9e ea ff ff    	mov    BYTE PTR [rbp-0x1562],al
  2162cc:	0f 85 5f 0b 00 00    	jne    216e31 <getLineNumberInfo+0x29c1>
  2162d2:	e9 6a 0b 00 00       	jmp    216e41 <getLineNumberInfo+0x29d1>
  2162d7:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  2162de:	e8 6d e1 fe ff       	call   204450 <__zig_return_error>
  2162e3:	48 8d 3d 0e ab fe ff 	lea    rdi,[rip+0xfffffffffffeab0e]        # 200df8 <__unnamed_113>
  2162ea:	b8 30 00 00 00       	mov    eax,0x30
  2162ef:	89 c2                	mov    edx,eax
  2162f1:	48 8b 8d 60 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x11a0]
  2162f8:	48 89 bd 90 ea ff ff 	mov    QWORD PTR [rbp-0x1570],rdi
  2162ff:	48 89 cf             	mov    rdi,rcx
  216302:	48 8b b5 90 ea ff ff 	mov    rsi,QWORD PTR [rbp-0x1570]
  216309:	e8 f2 b9 00 00       	call   221d00 <memcpy>
  21630e:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  216315:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21631c:	5d                   	pop    rbp
  21631d:	c3                   	ret    
  21631e:	eb 00                	jmp    216320 <getLineNumberInfo+0x1eb0>
                        const len_bytes = standard_opcode_lengths[opcode - 1];
  216320:	8a 85 5f ef ff ff    	mov    al,BYTE PTR [rbp-0x10a1]
  216326:	2c 01                	sub    al,0x1
  216328:	0f 92 c1             	setb   cl
  21632b:	f6 c1 01             	test   cl,0x1
  21632e:	88 85 8f ea ff ff    	mov    BYTE PTR [rbp-0x1571],al
  216334:	0f 85 27 0b 00 00    	jne    216e61 <getLineNumberInfo+0x29f1>
  21633a:	e9 32 0b 00 00       	jmp    216e71 <getLineNumberInfo+0x2a01>
                        try in_file.seekForward(len_bytes);
  21633f:	66 8b 85 7e f3 ff ff 	mov    ax,WORD PTR [rbp-0xc82]
  216346:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21634d:	66 89 85 8c ea ff ff 	mov    WORD PTR [rbp-0x1574],ax
  216354:	e8 f7 e0 fe ff       	call   204450 <__zig_return_error>
  216359:	b9 30 00 00 00       	mov    ecx,0x30
  21635e:	89 ca                	mov    edx,ecx
  216360:	48 8d bd 48 f3 ff ff 	lea    rdi,[rbp-0xcb8]
  216367:	66 8b 85 8c ea ff ff 	mov    ax,WORD PTR [rbp-0x1574]
  21636e:	66 89 85 48 f3 ff ff 	mov    WORD PTR [rbp-0xcb8],ax
  216375:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21637c:	48 89 bd 80 ea ff ff 	mov    QWORD PTR [rbp-0x1580],rdi
  216383:	48 89 f7             	mov    rdi,rsi
  216386:	48 8b b5 80 ea ff ff 	mov    rsi,QWORD PTR [rbp-0x1580]
  21638d:	e8 6e b9 00 00       	call   221d00 <memcpy>
  216392:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  216399:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  2163a0:	5d                   	pop    rbp
  2163a1:	c3                   	ret    
                switch (opcode) {
  2163a2:	e9 ab 05 00 00       	jmp    216952 <getLineNumberInfo+0x24e2>
  2163a7:	48 8d bd 10 f3 ff ff 	lea    rdi,[rbp-0xcf0]
  2163ae:	48 8d 95 88 ef ff ff 	lea    rdx,[rbp-0x1078]
                        if (try prog.checkLineMatch()) |info| return info;
  2163b5:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  2163bc:	e8 6f 2d 00 00       	call   219130 <LineNumberProgram_checkLineMatch>
  2163c1:	66 83 bd 10 f3 ff ff 	cmp    WORD PTR [rbp-0xcf0],0x0
  2163c8:	00 
  2163c9:	74 63                	je     21642e <getLineNumberInfo+0x1fbe>
  2163cb:	66 8b 85 10 f3 ff ff 	mov    ax,WORD PTR [rbp-0xcf0]
  2163d2:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  2163d9:	66 89 85 7e ea ff ff 	mov    WORD PTR [rbp-0x1582],ax
  2163e0:	e8 6b e0 fe ff       	call   204450 <__zig_return_error>
  2163e5:	b9 30 00 00 00       	mov    ecx,0x30
  2163ea:	89 ca                	mov    edx,ecx
  2163ec:	48 8d bd a8 f2 ff ff 	lea    rdi,[rbp-0xd58]
  2163f3:	66 8b 85 7e ea ff ff 	mov    ax,WORD PTR [rbp-0x1582]
  2163fa:	66 89 85 a8 f2 ff ff 	mov    WORD PTR [rbp-0xd58],ax
  216401:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  216408:	48 89 bd 70 ea ff ff 	mov    QWORD PTR [rbp-0x1590],rdi
  21640f:	48 89 f7             	mov    rdi,rsi
  216412:	48 8b b5 70 ea ff ff 	mov    rsi,QWORD PTR [rbp-0x1590]
  216419:	e8 e2 b8 00 00       	call   221d00 <memcpy>
  21641e:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  216425:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21642c:	5d                   	pop    rbp
  21642d:	c3                   	ret    
  21642e:	48 8d 85 10 f3 ff ff 	lea    rax,[rbp-0xcf0]
  216435:	48 83 c0 08          	add    rax,0x8
  216439:	f6 85 40 f3 ff ff 01 	test   BYTE PTR [rbp-0xcc0],0x1
  216440:	48 89 85 68 ea ff ff 	mov    QWORD PTR [rbp-0x1598],rax
  216447:	75 05                	jne    21644e <getLineNumberInfo+0x1fde>
  216449:	e9 b4 00 00 00       	jmp    216502 <getLineNumberInfo+0x2092>
  21644e:	b8 30 00 00 00       	mov    eax,0x30
  216453:	89 c2                	mov    edx,eax
  216455:	48 8d 8d 78 f2 ff ff 	lea    rcx,[rbp-0xd88]
  21645c:	b8 28 00 00 00       	mov    eax,0x28
  216461:	89 c6                	mov    esi,eax
  216463:	48 8d bd 90 ee ff ff 	lea    rdi,[rbp-0x1170]
  21646a:	4c 8b 85 68 ea ff ff 	mov    r8,QWORD PTR [rbp-0x1598]
  216471:	49 89 f9             	mov    r9,rdi
  216474:	48 89 bd 60 ea ff ff 	mov    QWORD PTR [rbp-0x15a0],rdi
  21647b:	4c 89 cf             	mov    rdi,r9
  21647e:	48 89 b5 58 ea ff ff 	mov    QWORD PTR [rbp-0x15a8],rsi
  216485:	4c 89 c6             	mov    rsi,r8
  216488:	4c 8b 85 58 ea ff ff 	mov    r8,QWORD PTR [rbp-0x15a8]
  21648f:	48 89 95 50 ea ff ff 	mov    QWORD PTR [rbp-0x15b0],rdx
  216496:	4c 89 c2             	mov    rdx,r8
  216499:	48 89 8d 48 ea ff ff 	mov    QWORD PTR [rbp-0x15b8],rcx
  2164a0:	e8 5b b8 00 00       	call   221d00 <memcpy>
  2164a5:	66 c7 85 78 f2 ff ff 	mov    WORD PTR [rbp-0xd88],0x0
  2164ac:	00 00 
  2164ae:	48 8b 8d 48 ea ff ff 	mov    rcx,QWORD PTR [rbp-0x15b8]
  2164b5:	48 83 c1 08          	add    rcx,0x8
  2164b9:	48 8b 95 60 ea ff ff 	mov    rdx,QWORD PTR [rbp-0x15a0]
  2164c0:	48 89 cf             	mov    rdi,rcx
  2164c3:	48 89 d6             	mov    rsi,rdx
  2164c6:	48 8b 95 58 ea ff ff 	mov    rdx,QWORD PTR [rbp-0x15a8]
  2164cd:	e8 2e b8 00 00       	call   221d00 <memcpy>
  2164d2:	48 8b 8d 48 ea ff ff 	mov    rcx,QWORD PTR [rbp-0x15b8]
  2164d9:	48 8b 95 60 ee ff ff 	mov    rdx,QWORD PTR [rbp-0x11a0]
  2164e0:	48 89 d7             	mov    rdi,rdx
  2164e3:	48 89 ce             	mov    rsi,rcx
  2164e6:	48 8b 95 50 ea ff ff 	mov    rdx,QWORD PTR [rbp-0x15b0]
  2164ed:	e8 0e b8 00 00       	call   221d00 <memcpy>
  2164f2:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  2164f9:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  216500:	5d                   	pop    rbp
  216501:	c3                   	ret    
  216502:	eb 00                	jmp    216504 <getLineNumberInfo+0x2094>
                        prog.basic_block = false;
  216504:	c6 85 a9 ef ff ff 00 	mov    BYTE PTR [rbp-0x1057],0x0
                switch (opcode) {
  21650b:	e9 42 04 00 00       	jmp    216952 <getLineNumberInfo+0x24e2>
  216510:	48 8d bd 68 f2 ff ff 	lea    rdi,[rbp-0xd98]
                        const arg = try readULeb128(in_stream);
  216517:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21651e:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  216525:	e8 c6 73 ff ff       	call   20d8f0 <readULeb128>
  21652a:	66 83 bd 68 f2 ff ff 	cmp    WORD PTR [rbp-0xd98],0x0
  216531:	00 
  216532:	74 63                	je     216597 <getLineNumberInfo+0x2127>
  216534:	66 8b 85 68 f2 ff ff 	mov    ax,WORD PTR [rbp-0xd98]
  21653b:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  216542:	66 89 85 46 ea ff ff 	mov    WORD PTR [rbp-0x15ba],ax
  216549:	e8 02 df fe ff       	call   204450 <__zig_return_error>
  21654e:	b9 30 00 00 00       	mov    ecx,0x30
  216553:	89 ca                	mov    edx,ecx
  216555:	48 8d bd 28 f2 ff ff 	lea    rdi,[rbp-0xdd8]
  21655c:	66 8b 85 46 ea ff ff 	mov    ax,WORD PTR [rbp-0x15ba]
  216563:	66 89 85 28 f2 ff ff 	mov    WORD PTR [rbp-0xdd8],ax
  21656a:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  216571:	48 89 bd 38 ea ff ff 	mov    QWORD PTR [rbp-0x15c8],rdi
  216578:	48 89 f7             	mov    rdi,rsi
  21657b:	48 8b b5 38 ea ff ff 	mov    rsi,QWORD PTR [rbp-0x15c8]
  216582:	e8 79 b7 00 00       	call   221d00 <memcpy>
  216587:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21658e:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  216595:	5d                   	pop    rbp
  216596:	c3                   	ret    
  216597:	48 8d 85 88 ef ff ff 	lea    rax,[rbp-0x1078]
  21659e:	48 8b 8d 70 f2 ff ff 	mov    rcx,QWORD PTR [rbp-0xd90]
  2165a5:	48 89 8d 88 ee ff ff 	mov    QWORD PTR [rbp-0x1178],rcx
                        prog.address += arg * minimum_instruction_length;
  2165ac:	48 8b 8d 88 ef ff ff 	mov    rcx,QWORD PTR [rbp-0x1078]
  2165b3:	48 8b 95 88 ee ff ff 	mov    rdx,QWORD PTR [rbp-0x1178]
  2165ba:	0f b6 b5 67 f0 ff ff 	movzx  esi,BYTE PTR [rbp-0xf99]
  2165c1:	89 f7                	mov    edi,esi
  2165c3:	48 89 85 30 ea ff ff 	mov    QWORD PTR [rbp-0x15d0],rax
  2165ca:	48 89 d0             	mov    rax,rdx
  2165cd:	48 f7 e7             	mul    rdi
  2165d0:	41 0f 90 c0          	seto   r8b
  2165d4:	48 89 8d 28 ea ff ff 	mov    QWORD PTR [rbp-0x15d8],rcx
  2165db:	48 89 85 20 ea ff ff 	mov    QWORD PTR [rbp-0x15e0],rax
  2165e2:	44 88 85 1f ea ff ff 	mov    BYTE PTR [rbp-0x15e1],r8b
  2165e9:	0f 80 fa 08 00 00    	jo     216ee9 <getLineNumberInfo+0x2a79>
  2165ef:	e9 05 09 00 00       	jmp    216ef9 <getLineNumberInfo+0x2a89>
  2165f4:	48 8d bd 18 f2 ff ff 	lea    rdi,[rbp-0xde8]
                        const arg = try readILeb128(in_stream);
  2165fb:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  216602:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  216609:	e8 12 31 00 00       	call   219720 <readILeb128>
  21660e:	66 83 bd 18 f2 ff ff 	cmp    WORD PTR [rbp-0xde8],0x0
  216615:	00 
  216616:	74 63                	je     21667b <getLineNumberInfo+0x220b>
  216618:	66 8b 85 18 f2 ff ff 	mov    ax,WORD PTR [rbp-0xde8]
  21661f:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  216626:	66 89 85 1c ea ff ff 	mov    WORD PTR [rbp-0x15e4],ax
  21662d:	e8 1e de fe ff       	call   204450 <__zig_return_error>
  216632:	b9 30 00 00 00       	mov    ecx,0x30
  216637:	89 ca                	mov    edx,ecx
  216639:	48 8d bd d8 f1 ff ff 	lea    rdi,[rbp-0xe28]
  216640:	66 8b 85 1c ea ff ff 	mov    ax,WORD PTR [rbp-0x15e4]
  216647:	66 89 85 d8 f1 ff ff 	mov    WORD PTR [rbp-0xe28],ax
  21664e:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  216655:	48 89 bd 10 ea ff ff 	mov    QWORD PTR [rbp-0x15f0],rdi
  21665c:	48 89 f7             	mov    rdi,rsi
  21665f:	48 8b b5 10 ea ff ff 	mov    rsi,QWORD PTR [rbp-0x15f0]
  216666:	e8 95 b6 00 00       	call   221d00 <memcpy>
  21666b:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  216672:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  216679:	5d                   	pop    rbp
  21667a:	c3                   	ret    
  21667b:	48 8d 85 88 ef ff ff 	lea    rax,[rbp-0x1078]
  216682:	48 8b 8d 20 f2 ff ff 	mov    rcx,QWORD PTR [rbp-0xde0]
  216689:	48 89 8d 80 ee ff ff 	mov    QWORD PTR [rbp-0x1180],rcx
                        prog.line += arg;
  216690:	48 83 c0 10          	add    rax,0x10
  216694:	48 8b 8d 98 ef ff ff 	mov    rcx,QWORD PTR [rbp-0x1068]
  21669b:	48 03 8d 80 ee ff ff 	add    rcx,QWORD PTR [rbp-0x1180]
  2166a2:	0f 90 c2             	seto   dl
  2166a5:	48 89 85 08 ea ff ff 	mov    QWORD PTR [rbp-0x15f8],rax
  2166ac:	48 89 8d 00 ea ff ff 	mov    QWORD PTR [rbp-0x1600],rcx
  2166b3:	88 95 ff e9 ff ff    	mov    BYTE PTR [rbp-0x1601],dl
  2166b9:	0f 80 85 08 00 00    	jo     216f44 <getLineNumberInfo+0x2ad4>
  2166bf:	e9 90 08 00 00       	jmp    216f54 <getLineNumberInfo+0x2ae4>
  2166c4:	48 8d bd c8 f1 ff ff 	lea    rdi,[rbp-0xe38]
                        const arg = try readULeb128(in_stream);
  2166cb:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  2166d2:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  2166d9:	e8 12 72 ff ff       	call   20d8f0 <readULeb128>
  2166de:	66 83 bd c8 f1 ff ff 	cmp    WORD PTR [rbp-0xe38],0x0
  2166e5:	00 
  2166e6:	74 63                	je     21674b <getLineNumberInfo+0x22db>
  2166e8:	66 8b 85 c8 f1 ff ff 	mov    ax,WORD PTR [rbp-0xe38]
  2166ef:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  2166f6:	66 89 85 fc e9 ff ff 	mov    WORD PTR [rbp-0x1604],ax
  2166fd:	e8 4e dd fe ff       	call   204450 <__zig_return_error>
  216702:	b9 30 00 00 00       	mov    ecx,0x30
  216707:	89 ca                	mov    edx,ecx
  216709:	48 8d bd 88 f1 ff ff 	lea    rdi,[rbp-0xe78]
  216710:	66 8b 85 fc e9 ff ff 	mov    ax,WORD PTR [rbp-0x1604]
  216717:	66 89 85 88 f1 ff ff 	mov    WORD PTR [rbp-0xe78],ax
  21671e:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  216725:	48 89 bd f0 e9 ff ff 	mov    QWORD PTR [rbp-0x1610],rdi
  21672c:	48 89 f7             	mov    rdi,rsi
  21672f:	48 8b b5 f0 e9 ff ff 	mov    rsi,QWORD PTR [rbp-0x1610]
  216736:	e8 c5 b5 00 00       	call   221d00 <memcpy>
  21673b:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  216742:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  216749:	5d                   	pop    rbp
  21674a:	c3                   	ret    
  21674b:	48 8b 85 d0 f1 ff ff 	mov    rax,QWORD PTR [rbp-0xe30]
  216752:	48 89 85 78 ee ff ff 	mov    QWORD PTR [rbp-0x1188],rax
                        prog.file = arg;
  216759:	48 8b 85 78 ee ff ff 	mov    rax,QWORD PTR [rbp-0x1188]
  216760:	48 89 85 90 ef ff ff 	mov    QWORD PTR [rbp-0x1070],rax
                switch (opcode) {
  216767:	e9 e6 01 00 00       	jmp    216952 <getLineNumberInfo+0x24e2>
  21676c:	48 8d bd 78 f1 ff ff 	lea    rdi,[rbp-0xe88]
                        const arg = try readULeb128(in_stream);
  216773:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21677a:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  216781:	e8 6a 71 ff ff       	call   20d8f0 <readULeb128>
  216786:	66 83 bd 78 f1 ff ff 	cmp    WORD PTR [rbp-0xe88],0x0
  21678d:	00 
  21678e:	74 63                	je     2167f3 <getLineNumberInfo+0x2383>
  216790:	66 8b 85 78 f1 ff ff 	mov    ax,WORD PTR [rbp-0xe88]
  216797:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21679e:	66 89 85 ee e9 ff ff 	mov    WORD PTR [rbp-0x1612],ax
  2167a5:	e8 a6 dc fe ff       	call   204450 <__zig_return_error>
  2167aa:	b9 30 00 00 00       	mov    ecx,0x30
  2167af:	89 ca                	mov    edx,ecx
  2167b1:	48 8d bd 38 f1 ff ff 	lea    rdi,[rbp-0xec8]
  2167b8:	66 8b 85 ee e9 ff ff 	mov    ax,WORD PTR [rbp-0x1612]
  2167bf:	66 89 85 38 f1 ff ff 	mov    WORD PTR [rbp-0xec8],ax
  2167c6:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  2167cd:	48 89 bd e0 e9 ff ff 	mov    QWORD PTR [rbp-0x1620],rdi
  2167d4:	48 89 f7             	mov    rdi,rsi
  2167d7:	48 8b b5 e0 e9 ff ff 	mov    rsi,QWORD PTR [rbp-0x1620]
  2167de:	e8 1d b5 00 00       	call   221d00 <memcpy>
  2167e3:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  2167ea:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  2167f1:	5d                   	pop    rbp
  2167f2:	c3                   	ret    
  2167f3:	48 8b 85 80 f1 ff ff 	mov    rax,QWORD PTR [rbp-0xe80]
  2167fa:	48 89 85 70 ee ff ff 	mov    QWORD PTR [rbp-0x1190],rax
                        prog.column = arg;
  216801:	48 8b 85 70 ee ff ff 	mov    rax,QWORD PTR [rbp-0x1190]
  216808:	48 89 85 a0 ef ff ff 	mov    QWORD PTR [rbp-0x1060],rax
                switch (opcode) {
  21680f:	e9 3e 01 00 00       	jmp    216952 <getLineNumberInfo+0x24e2>
                        prog.is_stmt = !prog.is_stmt;
  216814:	8a 85 a8 ef ff ff    	mov    al,BYTE PTR [rbp-0x1058]
  21681a:	34 01                	xor    al,0x1
  21681c:	24 01                	and    al,0x1
  21681e:	88 85 a8 ef ff ff    	mov    BYTE PTR [rbp-0x1058],al
                switch (opcode) {
  216824:	e9 29 01 00 00       	jmp    216952 <getLineNumberInfo+0x24e2>
                        prog.basic_block = true;
  216829:	c6 85 a9 ef ff ff 01 	mov    BYTE PTR [rbp-0x1057],0x1
                switch (opcode) {
  216830:	e9 1d 01 00 00       	jmp    216952 <getLineNumberInfo+0x24e2>
  216835:	b0 ff                	mov    al,0xff
                        const inc_addr = minimum_instruction_length * ((255 - opcode_base) / line_range);
  216837:	8a 8d 67 f0 ff ff    	mov    cl,BYTE PTR [rbp-0xf99]
  21683d:	2a 85 63 f0 ff ff    	sub    al,BYTE PTR [rbp-0xf9d]
  216843:	0f 92 c2             	setb   dl
  216846:	f6 c2 01             	test   dl,0x1
  216849:	88 8d df e9 ff ff    	mov    BYTE PTR [rbp-0x1621],cl
  21684f:	88 85 de e9 ff ff    	mov    BYTE PTR [rbp-0x1622],al
  216855:	0f 85 0f 07 00 00    	jne    216f6a <getLineNumberInfo+0x2afa>
  21685b:	e9 1a 07 00 00       	jmp    216f7a <getLineNumberInfo+0x2b0a>
  216860:	48 8d 85 30 f1 ff ff 	lea    rax,[rbp-0xed0]
                        const arg = try in_stream.readInt(st.elf.endian, u16);
  216867:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21686e:	48 8b 8d f0 f0 ff ff 	mov    rcx,QWORD PTR [rbp-0xf10]
  216875:	40 8a 71 12          	mov    sil,BYTE PTR [rcx+0x12]
  216879:	40 0f b6 ce          	movzx  ecx,sil
  21687d:	48 8d bd 30 f1 ff ff 	lea    rdi,[rbp-0xed0]
  216884:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21688b:	48 89 85 d0 e9 ff ff 	mov    QWORD PTR [rbp-0x1630],rax
  216892:	e8 99 3d ff ff       	call   20a630 <InStream(ReadError)_readInt>
  216897:	66 83 bd 30 f1 ff ff 	cmp    WORD PTR [rbp-0xed0],0x0
  21689e:	00 
  21689f:	74 63                	je     216904 <getLineNumberInfo+0x2494>
  2168a1:	66 8b 85 30 f1 ff ff 	mov    ax,WORD PTR [rbp-0xed0]
  2168a8:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  2168af:	66 89 85 ce e9 ff ff 	mov    WORD PTR [rbp-0x1632],ax
  2168b6:	e8 95 db fe ff       	call   204450 <__zig_return_error>
  2168bb:	b9 30 00 00 00       	mov    ecx,0x30
  2168c0:	89 ca                	mov    edx,ecx
  2168c2:	48 8d bd f8 f0 ff ff 	lea    rdi,[rbp-0xf08]
  2168c9:	66 8b 85 ce e9 ff ff 	mov    ax,WORD PTR [rbp-0x1632]
  2168d0:	66 89 85 f8 f0 ff ff 	mov    WORD PTR [rbp-0xf08],ax
  2168d7:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  2168de:	48 89 bd c0 e9 ff ff 	mov    QWORD PTR [rbp-0x1640],rdi
  2168e5:	48 89 f7             	mov    rdi,rsi
  2168e8:	48 8b b5 c0 e9 ff ff 	mov    rsi,QWORD PTR [rbp-0x1640]
  2168ef:	e8 0c b4 00 00       	call   221d00 <memcpy>
  2168f4:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  2168fb:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  216902:	5d                   	pop    rbp
  216903:	c3                   	ret    
  216904:	48 8d 85 88 ef ff ff 	lea    rax,[rbp-0x1078]
  21690b:	66 8b 8d 32 f1 ff ff 	mov    cx,WORD PTR [rbp-0xece]
  216912:	66 89 8d 6c ee ff ff 	mov    WORD PTR [rbp-0x1194],cx
                        prog.address += arg;
  216919:	48 8b 95 88 ef ff ff 	mov    rdx,QWORD PTR [rbp-0x1078]
  216920:	0f b7 b5 6c ee ff ff 	movzx  esi,WORD PTR [rbp-0x1194]
  216927:	89 f7                	mov    edi,esi
  216929:	48 01 fa             	add    rdx,rdi
  21692c:	41 0f 92 c0          	setb   r8b
  216930:	48 89 85 b8 e9 ff ff 	mov    QWORD PTR [rbp-0x1648],rax
  216937:	48 89 95 b0 e9 ff ff 	mov    QWORD PTR [rbp-0x1650],rdx
  21693e:	44 88 85 af e9 ff ff 	mov    BYTE PTR [rbp-0x1651],r8b
  216945:	0f 82 04 07 00 00    	jb     21704f <getLineNumberInfo+0x2bdf>
  21694b:	e9 0f 07 00 00       	jmp    21705f <getLineNumberInfo+0x2bef>
                switch (opcode) {
  216950:	eb 00                	jmp    216952 <getLineNumberInfo+0x24e2>
            } else if (opcode >= opcode_base) {
  216952:	eb 00                	jmp    216954 <getLineNumberInfo+0x24e4>
            if (opcode == DW.LNS_extended_op) {
  216954:	eb 00                	jmp    216956 <getLineNumberInfo+0x24e6>
        while (true) {
  216956:	e9 67 ee ff ff       	jmp    2157c2 <getLineNumberInfo+0x1352>
    while (this_offset < debug_line_end) : (this_index += 1) {
  21695b:	48 8b 85 b0 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xf50]
  216962:	48 83 c0 01          	add    rax,0x1
  216966:	0f 92 c1             	setb   cl
  216969:	48 89 85 a0 e9 ff ff 	mov    QWORD PTR [rbp-0x1660],rax
  216970:	88 8d 9f e9 ff ff    	mov    BYTE PTR [rbp-0x1661],cl
  216976:	0f 82 f9 06 00 00    	jb     217075 <getLineNumberInfo+0x2c05>
  21697c:	e9 04 07 00 00       	jmp    217085 <getLineNumberInfo+0x2c15>
    return error.MissingDebugInfo;
  216981:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  216988:	e8 c3 da fe ff       	call   204450 <__zig_return_error>
  21698d:	48 8d 3d 94 a4 fe ff 	lea    rdi,[rip+0xfffffffffffea494]        # 200e28 <__unnamed_114>
  216994:	b8 30 00 00 00       	mov    eax,0x30
  216999:	89 c2                	mov    edx,eax
  21699b:	48 8b 8d 60 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x11a0]
  2169a2:	48 89 bd 90 e9 ff ff 	mov    QWORD PTR [rbp-0x1670],rdi
  2169a9:	48 89 cf             	mov    rdi,rcx
  2169ac:	48 8b b5 90 e9 ff ff 	mov    rsi,QWORD PTR [rbp-0x1670]
  2169b3:	e8 48 b3 00 00       	call   221d00 <memcpy>
  2169b8:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  2169bf:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  2169c6:	5d                   	pop    rbp
  2169c7:	c3                   	ret    
  2169c8:	48 8d 3d 49 e9 00 00 	lea    rdi,[rip+0xe949]        # 225318 <__unnamed_5>
  2169cf:	31 c0                	xor    eax,eax
  2169d1:	89 c6                	mov    esi,eax
    const debug_line_end = st.debug_line.offset + st.debug_line.size;
  2169d3:	e8 e8 c6 fe ff       	call   2030c0 <panic>
  2169d8:	48 8d 7d 90          	lea    rdi,[rbp-0x70]
  2169dc:	48 8b 85 38 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11c8]
  2169e3:	48 89 85 c0 f0 ff ff 	mov    QWORD PTR [rbp-0xf40],rax
    var this_offset = st.debug_line.offset;
  2169ea:	48 8b 8d f0 f0 ff ff 	mov    rcx,QWORD PTR [rbp-0xf10]
  2169f1:	48 8b 49 78          	mov    rcx,QWORD PTR [rcx+0x78]
  2169f5:	48 8b 49 18          	mov    rcx,QWORD PTR [rcx+0x18]
  2169f9:	48 89 8d b8 f0 ff ff 	mov    QWORD PTR [rbp-0xf48],rcx
    var this_index: usize = 0;
  216a00:	48 c7 85 b0 f0 ff ff 	mov    QWORD PTR [rbp-0xf50],0x0
  216a07:	00 00 00 00 
    var in_file_stream = io.FileInStream.init(in_file);
  216a0b:	48 8b b5 c8 f0 ff ff 	mov    rsi,QWORD PTR [rbp-0xf38]
  216a12:	e8 79 38 ff ff       	call   20a290 <FileInStream_init>
  216a17:	48 8d 85 a0 f0 ff ff 	lea    rax,[rbp-0xf60]
  216a1e:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  216a22:	48 89 8d a0 f0 ff ff 	mov    QWORD PTR [rbp-0xf60],rcx
  216a29:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  216a2d:	48 89 8d a8 f0 ff ff 	mov    QWORD PTR [rbp-0xf58],rcx
    const in_stream = &in_file_stream.stream;
  216a34:	48 83 c0 08          	add    rax,0x8
  216a38:	48 89 85 98 f0 ff ff 	mov    QWORD PTR [rbp-0xf68],rax
    while (this_offset < debug_line_end) : (this_index += 1) {
  216a3f:	e9 4c db ff ff       	jmp    214590 <getLineNumberInfo+0x120>
  216a44:	48 8d 3d cd e8 00 00 	lea    rdi,[rip+0xe8cd]        # 225318 <__unnamed_5>
  216a4b:	31 c0                	xor    eax,eax
  216a4d:	89 c6                	mov    esi,eax
        const next_offset = unit_length + (if (is_64) usize(12) else usize(4));
  216a4f:	e8 6c c6 fe ff       	call   2030c0 <panic>
  216a54:	48 8b 85 e8 ed ff ff 	mov    rax,QWORD PTR [rbp-0x1218]
  216a5b:	48 89 85 80 f0 ff ff 	mov    QWORD PTR [rbp-0xf80],rax
        if (compile_unit.index != this_index) {
  216a62:	48 8b 8d e8 f0 ff ff 	mov    rcx,QWORD PTR [rbp-0xf18]
  216a69:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
  216a6d:	48 3b 8d b0 f0 ff ff 	cmp    rcx,QWORD PTR [rbp-0xf50]
  216a74:	0f 85 36 dd ff ff    	jne    2147b0 <getLineNumberInfo+0x340>
  216a7a:	e9 5a dd ff ff       	jmp    2147d9 <getLineNumberInfo+0x369>
  216a7f:	48 8d 3d 92 e8 00 00 	lea    rdi,[rip+0xe892]        # 225318 <__unnamed_5>
  216a86:	31 c0                	xor    eax,eax
  216a88:	89 c6                	mov    esi,eax
            this_offset += next_offset;
  216a8a:	e8 31 c6 fe ff       	call   2030c0 <panic>
  216a8f:	48 8b 85 d8 ed ff ff 	mov    rax,QWORD PTR [rbp-0x1228]
  216a96:	48 89 85 b8 f0 ff ff 	mov    QWORD PTR [rbp-0xf48],rax
            continue;
  216a9d:	e9 b9 fe ff ff       	jmp    21695b <getLineNumberInfo+0x24eb>
  216aa2:	48 8d 3d 6f e8 00 00 	lea    rdi,[rip+0xe86f]        # 225318 <__unnamed_5>
  216aa9:	31 c0                	xor    eax,eax
  216aab:	89 c6                	mov    esi,eax
        const prog_start_offset = (try in_file.getPos()) + prologue_length;
  216aad:	e8 0e c6 fe ff       	call   2030c0 <panic>
  216ab2:	48 8d bd e0 fd ff ff 	lea    rdi,[rbp-0x220]
  216ab9:	48 8b 85 58 ed ff ff 	mov    rax,QWORD PTR [rbp-0x12a8]
  216ac0:	48 89 85 68 f0 ff ff 	mov    QWORD PTR [rbp-0xf98],rax
        const minimum_instruction_length = try in_stream.readByte();
  216ac7:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  216ace:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  216ad5:	e8 66 39 ff ff       	call   20a440 <InStream(ReadError)_readByte>
  216ada:	66 83 bd e0 fd ff ff 	cmp    WORD PTR [rbp-0x220],0x0
  216ae1:	00 
  216ae2:	0f 85 59 e0 ff ff    	jne    214b41 <getLineNumberInfo+0x6d1>
  216ae8:	e9 b7 e0 ff ff       	jmp    214ba4 <getLineNumberInfo+0x734>
  216aed:	48 8d 3d 24 e8 00 00 	lea    rdi,[rip+0xe824]        # 225318 <__unnamed_5>
  216af4:	31 c0                	xor    eax,eax
  216af6:	89 c6                	mov    esi,eax
        const standard_opcode_lengths = try st.allocator().alloc(u8, opcode_base - 1);
  216af8:	e8 c3 c5 fe ff       	call   2030c0 <panic>
  216afd:	48 8d bd 48 fc ff ff 	lea    rdi,[rbp-0x3b8]
  216b04:	8a 85 df ec ff ff    	mov    al,BYTE PTR [rbp-0x1321]
  216b0a:	0f b6 c8             	movzx  ecx,al
  216b0d:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  216b14:	48 8b 95 e0 ec ff ff 	mov    rdx,QWORD PTR [rbp-0x1320]
  216b1b:	e8 a0 21 00 00       	call   218cc0 <Allocator_alloc.57>
  216b20:	66 83 bd 48 fc ff ff 	cmp    WORD PTR [rbp-0x3b8],0x0
  216b27:	00 
  216b28:	0f 85 54 e4 ff ff    	jne    214f82 <getLineNumberInfo+0xb12>
  216b2e:	e9 b2 e4 ff ff       	jmp    214fe5 <getLineNumberInfo+0xb75>
  216b33:	48 8d 3d de e7 00 00 	lea    rdi,[rip+0xe7de]        # 225318 <__unnamed_5>
  216b3a:	31 c0                	xor    eax,eax
  216b3c:	89 c6                	mov    esi,eax
            while (i < opcode_base - 1) : (i += 1) {
  216b3e:	e8 7d c5 fe ff       	call   2030c0 <panic>
  216b43:	8a 85 c7 ec ff ff    	mov    al,BYTE PTR [rbp-0x1339]
  216b49:	0f b6 c8             	movzx  ecx,al
  216b4c:	89 ca                	mov    edx,ecx
  216b4e:	48 8b b5 c8 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x1338]
  216b55:	48 39 d6             	cmp    rsi,rdx
  216b58:	0f 82 dc e4 ff ff    	jb     21503a <getLineNumberInfo+0xbca>
  216b5e:	e9 8f e5 ff ff       	jmp    2150f2 <getLineNumberInfo+0xc82>
  216b63:	48 8d 3d 96 e7 00 00 	lea    rdi,[rip+0xe796]        # 225300 <__unnamed_4>
  216b6a:	31 c0                	xor    eax,eax
  216b6c:	89 c6                	mov    esi,eax
                standard_opcode_lengths[i] = try in_stream.readByte();
  216b6e:	e8 4d c5 fe ff       	call   2030c0 <panic>
  216b73:	48 8d bd f8 fb ff ff 	lea    rdi,[rbp-0x408]
  216b7a:	48 8b 85 b8 ec ff ff 	mov    rax,QWORD PTR [rbp-0x1348]
  216b81:	48 03 85 50 f0 ff ff 	add    rax,QWORD PTR [rbp-0xfb0]
  216b88:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  216b8f:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  216b96:	48 89 85 a0 ec ff ff 	mov    QWORD PTR [rbp-0x1360],rax
  216b9d:	e8 9e 38 ff ff       	call   20a440 <InStream(ReadError)_readByte>
  216ba2:	66 83 bd f8 fb ff ff 	cmp    WORD PTR [rbp-0x408],0x0
  216ba9:	00 
  216baa:	0f 85 aa e4 ff ff    	jne    21505a <getLineNumberInfo+0xbea>
  216bb0:	e9 08 e5 ff ff       	jmp    2150bd <getLineNumberInfo+0xc4d>
  216bb5:	48 8d 3d 5c e7 00 00 	lea    rdi,[rip+0xe75c]        # 225318 <__unnamed_5>
  216bbc:	31 c0                	xor    eax,eax
  216bbe:	89 c6                	mov    esi,eax
            while (i < opcode_base - 1) : (i += 1) {
  216bc0:	e8 fb c4 fe ff       	call   2030c0 <panic>
  216bc5:	48 8b 85 98 ec ff ff 	mov    rax,QWORD PTR [rbp-0x1368]
  216bcc:	48 89 85 48 f0 ff ff 	mov    QWORD PTR [rbp-0xfb8],rax
  216bd3:	e9 34 e4 ff ff       	jmp    21500c <getLineNumberInfo+0xb9c>
  216bd8:	48 8d 3d 39 e7 00 00 	lea    rdi,[rip+0xe739]        # 225318 <__unnamed_5>
  216bdf:	31 c0                	xor    eax,eax
  216be1:	89 c6                	mov    esi,eax
                        const fwd_amt = math.cast(isize, op_size - 1) catch return error.InvalidDebugInfo;
  216be3:	e8 d8 c4 fe ff       	call   2030c0 <panic>
  216be8:	48 8d bd 68 f7 ff ff 	lea    rdi,[rbp-0x898]
  216bef:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  216bf6:	48 8b 95 b0 eb ff ff 	mov    rdx,QWORD PTR [rbp-0x1450]
  216bfd:	e8 9e 24 00 00       	call   2190a0 <cast.58>
  216c02:	66 83 bd 68 f7 ff ff 	cmp    WORD PTR [rbp-0x898],0x0
  216c09:	00 
  216c0a:	0f 85 58 ee ff ff    	jne    215a68 <getLineNumberInfo+0x15f8>
  216c10:	e9 9a ee ff ff       	jmp    215aaf <getLineNumberInfo+0x163f>
  216c15:	48 8d 3d fc e6 00 00 	lea    rdi,[rip+0xe6fc]        # 225318 <__unnamed_5>
  216c1c:	31 c0                	xor    eax,eax
  216c1e:	89 c6                	mov    esi,eax
                const adjusted_opcode = opcode - opcode_base;
  216c20:	e8 9b c4 fe ff       	call   2030c0 <panic>
  216c25:	8a 85 df ea ff ff    	mov    al,BYTE PTR [rbp-0x1521]
  216c2b:	88 85 ef ee ff ff    	mov    BYTE PTR [rbp-0x1111],al
                const inc_addr = minimum_instruction_length * (adjusted_opcode / line_range);
  216c31:	8a 85 67 f0 ff ff    	mov    al,BYTE PTR [rbp-0xf99]
  216c37:	8a 8d ef ee ff ff    	mov    cl,BYTE PTR [rbp-0x1111]
  216c3d:	8a 95 64 f0 ff ff    	mov    dl,BYTE PTR [rbp-0xf9c]
  216c43:	80 fa 00             	cmp    dl,0x0
  216c46:	88 85 8f e9 ff ff    	mov    BYTE PTR [rbp-0x1671],al
  216c4c:	88 8d 8e e9 ff ff    	mov    BYTE PTR [rbp-0x1672],cl
  216c52:	88 95 8d e9 ff ff    	mov    BYTE PTR [rbp-0x1673],dl
  216c58:	74 3c                	je     216c96 <getLineNumberInfo+0x2826>
  216c5a:	8a 85 8e e9 ff ff    	mov    al,BYTE PTR [rbp-0x1672]
  216c60:	66 0f b6 c0          	movzx  ax,al
  216c64:	8a 8d 8d e9 ff ff    	mov    cl,BYTE PTR [rbp-0x1673]
  216c6a:	f6 f1                	div    cl
  216c6c:	8a 95 8f e9 ff ff    	mov    dl,BYTE PTR [rbp-0x1671]
  216c72:	88 85 8c e9 ff ff    	mov    BYTE PTR [rbp-0x1674],al
  216c78:	88 d0                	mov    al,dl
  216c7a:	40 8a b5 8c e9 ff ff 	mov    sil,BYTE PTR [rbp-0x1674]
  216c81:	40 f6 e6             	mul    sil
  216c84:	40 0f 90 c6          	seto   sil
  216c88:	40 f6 c6 01          	test   sil,0x1
  216c8c:	88 85 8b e9 ff ff    	mov    BYTE PTR [rbp-0x1675],al
  216c92:	75 12                	jne    216ca6 <getLineNumberInfo+0x2836>
  216c94:	eb 20                	jmp    216cb6 <getLineNumberInfo+0x2846>
  216c96:	48 8d 3d db e8 00 00 	lea    rdi,[rip+0xe8db]        # 225578 <__unnamed_73>
  216c9d:	31 c0                	xor    eax,eax
  216c9f:	89 c6                	mov    esi,eax
  216ca1:	e8 1a c4 fe ff       	call   2030c0 <panic>
  216ca6:	48 8d 3d 6b e6 00 00 	lea    rdi,[rip+0xe66b]        # 225318 <__unnamed_5>
  216cad:	31 c0                	xor    eax,eax
  216caf:	89 c6                	mov    esi,eax
  216cb1:	e8 0a c4 fe ff       	call   2030c0 <panic>
  216cb6:	8a 85 8b e9 ff ff    	mov    al,BYTE PTR [rbp-0x1675]
  216cbc:	88 85 ee ee ff ff    	mov    BYTE PTR [rbp-0x1112],al
                const inc_line = i32(line_base) + i32(adjusted_opcode % line_range);
  216cc2:	0f be 8d 65 f0 ff ff 	movsx  ecx,BYTE PTR [rbp-0xf9b]
  216cc9:	8a 95 ef ee ff ff    	mov    dl,BYTE PTR [rbp-0x1111]
  216ccf:	40 8a b5 64 f0 ff ff 	mov    sil,BYTE PTR [rbp-0xf9c]
  216cd6:	40 80 fe 00          	cmp    sil,0x0
  216cda:	89 8d 84 e9 ff ff    	mov    DWORD PTR [rbp-0x167c],ecx
  216ce0:	88 95 83 e9 ff ff    	mov    BYTE PTR [rbp-0x167d],dl
  216ce6:	40 88 b5 82 e9 ff ff 	mov    BYTE PTR [rbp-0x167e],sil
  216ced:	74 36                	je     216d25 <getLineNumberInfo+0x28b5>
  216cef:	8a 85 83 e9 ff ff    	mov    al,BYTE PTR [rbp-0x167d]
  216cf5:	66 0f b6 c0          	movzx  ax,al
  216cf9:	8a 8d 82 e9 ff ff    	mov    cl,BYTE PTR [rbp-0x167e]
  216cff:	f6 f1                	div    cl
  216d01:	66 c1 e8 08          	shr    ax,0x8
  216d05:	88 c2                	mov    dl,al
  216d07:	0f b6 f2             	movzx  esi,dl
  216d0a:	8b bd 84 e9 ff ff    	mov    edi,DWORD PTR [rbp-0x167c]
  216d10:	01 f7                	add    edi,esi
  216d12:	0f 90 c2             	seto   dl
  216d15:	89 bd 7c e9 ff ff    	mov    DWORD PTR [rbp-0x1684],edi
  216d1b:	88 95 7b e9 ff ff    	mov    BYTE PTR [rbp-0x1685],dl
  216d21:	70 12                	jo     216d35 <getLineNumberInfo+0x28c5>
  216d23:	eb 20                	jmp    216d45 <getLineNumberInfo+0x28d5>
  216d25:	48 8d 3d b4 e8 00 00 	lea    rdi,[rip+0xe8b4]        # 2255e0 <__unnamed_14>
  216d2c:	31 c0                	xor    eax,eax
  216d2e:	89 c6                	mov    esi,eax
  216d30:	e8 8b c3 fe ff       	call   2030c0 <panic>
  216d35:	48 8d 3d dc e5 00 00 	lea    rdi,[rip+0xe5dc]        # 225318 <__unnamed_5>
  216d3c:	31 c0                	xor    eax,eax
  216d3e:	89 c6                	mov    esi,eax
  216d40:	e8 7b c3 fe ff       	call   2030c0 <panic>
  216d45:	48 8d 85 88 ef ff ff 	lea    rax,[rbp-0x1078]
  216d4c:	8b 8d 7c e9 ff ff    	mov    ecx,DWORD PTR [rbp-0x1684]
  216d52:	89 8d e8 ee ff ff    	mov    DWORD PTR [rbp-0x1118],ecx
                prog.line += inc_line;
  216d58:	48 83 c0 10          	add    rax,0x10
  216d5c:	48 8b 95 98 ef ff ff 	mov    rdx,QWORD PTR [rbp-0x1068]
  216d63:	48 63 b5 e8 ee ff ff 	movsxd rsi,DWORD PTR [rbp-0x1118]
  216d6a:	48 01 f2             	add    rdx,rsi
  216d6d:	40 0f 90 c7          	seto   dil
  216d71:	48 89 85 70 e9 ff ff 	mov    QWORD PTR [rbp-0x1690],rax
  216d78:	48 89 95 68 e9 ff ff 	mov    QWORD PTR [rbp-0x1698],rdx
  216d7f:	40 88 bd 67 e9 ff ff 	mov    BYTE PTR [rbp-0x1699],dil
  216d86:	70 02                	jo     216d8a <getLineNumberInfo+0x291a>
  216d88:	eb 10                	jmp    216d9a <getLineNumberInfo+0x292a>
  216d8a:	48 8d 3d 87 e5 00 00 	lea    rdi,[rip+0xe587]        # 225318 <__unnamed_5>
  216d91:	31 c0                	xor    eax,eax
  216d93:	89 c6                	mov    esi,eax
  216d95:	e8 26 c3 fe ff       	call   2030c0 <panic>
  216d9a:	48 8d 85 88 ef ff ff 	lea    rax,[rbp-0x1078]
  216da1:	48 8b 8d 70 e9 ff ff 	mov    rcx,QWORD PTR [rbp-0x1690]
  216da8:	48 8b 95 68 e9 ff ff 	mov    rdx,QWORD PTR [rbp-0x1698]
  216daf:	48 89 11             	mov    QWORD PTR [rcx],rdx
                prog.address += inc_addr;
  216db2:	48 8b b5 88 ef ff ff 	mov    rsi,QWORD PTR [rbp-0x1078]
  216db9:	0f b6 bd ee ee ff ff 	movzx  edi,BYTE PTR [rbp-0x1112]
  216dc0:	41 89 f8             	mov    r8d,edi
  216dc3:	4c 01 c6             	add    rsi,r8
  216dc6:	41 0f 92 c1          	setb   r9b
  216dca:	48 89 85 58 e9 ff ff 	mov    QWORD PTR [rbp-0x16a8],rax
  216dd1:	48 89 b5 50 e9 ff ff 	mov    QWORD PTR [rbp-0x16b0],rsi
  216dd8:	44 88 8d 4f e9 ff ff 	mov    BYTE PTR [rbp-0x16b1],r9b
  216ddf:	72 02                	jb     216de3 <getLineNumberInfo+0x2973>
  216de1:	eb 10                	jmp    216df3 <getLineNumberInfo+0x2983>
  216de3:	48 8d 3d 2e e5 00 00 	lea    rdi,[rip+0xe52e]        # 225318 <__unnamed_5>
  216dea:	31 c0                	xor    eax,eax
  216dec:	89 c6                	mov    esi,eax
  216dee:	e8 cd c2 fe ff       	call   2030c0 <panic>
  216df3:	48 8d bd 18 f4 ff ff 	lea    rdi,[rbp-0xbe8]
  216dfa:	48 8d 95 88 ef ff ff 	lea    rdx,[rbp-0x1078]
  216e01:	48 8b 85 58 e9 ff ff 	mov    rax,QWORD PTR [rbp-0x16a8]
  216e08:	48 8b 8d 50 e9 ff ff 	mov    rcx,QWORD PTR [rbp-0x16b0]
  216e0f:	48 89 08             	mov    QWORD PTR [rax],rcx
                if (try prog.checkLineMatch()) |info| return info;
  216e12:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  216e19:	e8 12 23 00 00       	call   219130 <LineNumberProgram_checkLineMatch>
  216e1e:	66 83 bd 18 f4 ff ff 	cmp    WORD PTR [rbp-0xbe8],0x0
  216e25:	00 
  216e26:	0f 85 12 f3 ff ff    	jne    21613e <getLineNumberInfo+0x1cce>
  216e2c:	e9 70 f3 ff ff       	jmp    2161a1 <getLineNumberInfo+0x1d31>
  216e31:	48 8d 3d e0 e4 00 00 	lea    rdi,[rip+0xe4e0]        # 225318 <__unnamed_5>
  216e38:	31 c0                	xor    eax,eax
  216e3a:	89 c6                	mov    esi,eax
                        if (opcode - 1 >= standard_opcode_lengths.len) return error.InvalidDebugInfo;
  216e3c:	e8 7f c2 fe ff       	call   2030c0 <panic>
  216e41:	48 8b 85 58 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xfa8]
  216e48:	8a 8d 9e ea ff ff    	mov    cl,BYTE PTR [rbp-0x1562]
  216e4e:	0f b6 d1             	movzx  edx,cl
  216e51:	89 d6                	mov    esi,edx
  216e53:	48 39 c6             	cmp    rsi,rax
  216e56:	0f 83 7b f4 ff ff    	jae    2162d7 <getLineNumberInfo+0x1e67>
  216e5c:	e9 bd f4 ff ff       	jmp    21631e <getLineNumberInfo+0x1eae>
  216e61:	48 8d 3d b0 e4 00 00 	lea    rdi,[rip+0xe4b0]        # 225318 <__unnamed_5>
  216e68:	31 c0                	xor    eax,eax
  216e6a:	89 c6                	mov    esi,eax
                        const len_bytes = standard_opcode_lengths[opcode - 1];
  216e6c:	e8 4f c2 fe ff       	call   2030c0 <panic>
  216e71:	8a 85 8f ea ff ff    	mov    al,BYTE PTR [rbp-0x1571]
  216e77:	0f b6 c8             	movzx  ecx,al
  216e7a:	89 ca                	mov    edx,ecx
  216e7c:	48 3b 95 58 f0 ff ff 	cmp    rdx,QWORD PTR [rbp-0xfa8]
  216e83:	48 89 95 40 e9 ff ff 	mov    QWORD PTR [rbp-0x16c0],rdx
  216e8a:	72 10                	jb     216e9c <getLineNumberInfo+0x2a2c>
  216e8c:	48 8d 3d 6d e4 00 00 	lea    rdi,[rip+0xe46d]        # 225300 <__unnamed_4>
  216e93:	31 c0                	xor    eax,eax
  216e95:	89 c6                	mov    esi,eax
  216e97:	e8 24 c2 fe ff       	call   2030c0 <panic>
  216e9c:	48 8b 85 50 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xfb0]
  216ea3:	48 8b 8d 40 e9 ff ff 	mov    rcx,QWORD PTR [rbp-0x16c0]
  216eaa:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  216ead:	88 95 bf ee ff ff    	mov    BYTE PTR [rbp-0x1141],dl
                        try in_file.seekForward(len_bytes);
  216eb3:	48 8b b5 c8 f0 ff ff 	mov    rsi,QWORD PTR [rbp-0xf38]
  216eba:	0f b6 bd bf ee ff ff 	movzx  edi,BYTE PTR [rbp-0x1141]
  216ec1:	89 fa                	mov    edx,edi
  216ec3:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  216eca:	e8 41 36 ff ff       	call   20a510 <File_seekForward>
  216ecf:	66 89 85 7e f3 ff ff 	mov    WORD PTR [rbp-0xc82],ax
  216ed6:	66 83 bd 7e f3 ff ff 	cmp    WORD PTR [rbp-0xc82],0x0
  216edd:	00 
  216ede:	0f 85 5b f4 ff ff    	jne    21633f <getLineNumberInfo+0x1ecf>
  216ee4:	e9 b9 f4 ff ff       	jmp    2163a2 <getLineNumberInfo+0x1f32>
  216ee9:	48 8d 3d 28 e4 00 00 	lea    rdi,[rip+0xe428]        # 225318 <__unnamed_5>
  216ef0:	31 c0                	xor    eax,eax
  216ef2:	89 c6                	mov    esi,eax
                        prog.address += arg * minimum_instruction_length;
  216ef4:	e8 c7 c1 fe ff       	call   2030c0 <panic>
  216ef9:	48 8b 85 28 ea ff ff 	mov    rax,QWORD PTR [rbp-0x15d8]
  216f00:	48 8b 8d 20 ea ff ff 	mov    rcx,QWORD PTR [rbp-0x15e0]
  216f07:	48 01 c8             	add    rax,rcx
  216f0a:	0f 92 c2             	setb   dl
  216f0d:	48 89 85 38 e9 ff ff 	mov    QWORD PTR [rbp-0x16c8],rax
  216f14:	88 95 37 e9 ff ff    	mov    BYTE PTR [rbp-0x16c9],dl
  216f1a:	72 02                	jb     216f1e <getLineNumberInfo+0x2aae>
  216f1c:	eb 10                	jmp    216f2e <getLineNumberInfo+0x2abe>
  216f1e:	48 8d 3d f3 e3 00 00 	lea    rdi,[rip+0xe3f3]        # 225318 <__unnamed_5>
  216f25:	31 c0                	xor    eax,eax
  216f27:	89 c6                	mov    esi,eax
  216f29:	e8 92 c1 fe ff       	call   2030c0 <panic>
  216f2e:	48 8b 85 30 ea ff ff 	mov    rax,QWORD PTR [rbp-0x15d0]
  216f35:	48 8b 8d 38 e9 ff ff 	mov    rcx,QWORD PTR [rbp-0x16c8]
  216f3c:	48 89 08             	mov    QWORD PTR [rax],rcx
                switch (opcode) {
  216f3f:	e9 0e fa ff ff       	jmp    216952 <getLineNumberInfo+0x24e2>
  216f44:	48 8d 3d cd e3 00 00 	lea    rdi,[rip+0xe3cd]        # 225318 <__unnamed_5>
  216f4b:	31 c0                	xor    eax,eax
  216f4d:	89 c6                	mov    esi,eax
                        prog.line += arg;
  216f4f:	e8 6c c1 fe ff       	call   2030c0 <panic>
  216f54:	48 8b 85 08 ea ff ff 	mov    rax,QWORD PTR [rbp-0x15f8]
  216f5b:	48 8b 8d 00 ea ff ff 	mov    rcx,QWORD PTR [rbp-0x1600]
  216f62:	48 89 08             	mov    QWORD PTR [rax],rcx
                switch (opcode) {
  216f65:	e9 e8 f9 ff ff       	jmp    216952 <getLineNumberInfo+0x24e2>
  216f6a:	48 8d 3d a7 e3 00 00 	lea    rdi,[rip+0xe3a7]        # 225318 <__unnamed_5>
  216f71:	31 c0                	xor    eax,eax
  216f73:	89 c6                	mov    esi,eax
                        const inc_addr = minimum_instruction_length * ((255 - opcode_base) / line_range);
  216f75:	e8 46 c1 fe ff       	call   2030c0 <panic>
  216f7a:	8a 85 64 f0 ff ff    	mov    al,BYTE PTR [rbp-0xf9c]
  216f80:	3c 00                	cmp    al,0x0
  216f82:	88 85 36 e9 ff ff    	mov    BYTE PTR [rbp-0x16ca],al
  216f88:	74 3c                	je     216fc6 <getLineNumberInfo+0x2b56>
  216f8a:	8a 85 de e9 ff ff    	mov    al,BYTE PTR [rbp-0x1622]
  216f90:	66 0f b6 c0          	movzx  ax,al
  216f94:	8a 8d 36 e9 ff ff    	mov    cl,BYTE PTR [rbp-0x16ca]
  216f9a:	f6 f1                	div    cl
  216f9c:	8a 95 df e9 ff ff    	mov    dl,BYTE PTR [rbp-0x1621]
  216fa2:	88 85 35 e9 ff ff    	mov    BYTE PTR [rbp-0x16cb],al
  216fa8:	88 d0                	mov    al,dl
  216faa:	40 8a b5 35 e9 ff ff 	mov    sil,BYTE PTR [rbp-0x16cb]
  216fb1:	40 f6 e6             	mul    sil
  216fb4:	40 0f 90 c6          	seto   sil
  216fb8:	40 f6 c6 01          	test   sil,0x1
  216fbc:	88 85 34 e9 ff ff    	mov    BYTE PTR [rbp-0x16cc],al
  216fc2:	75 12                	jne    216fd6 <getLineNumberInfo+0x2b66>
  216fc4:	eb 20                	jmp    216fe6 <getLineNumberInfo+0x2b76>
  216fc6:	48 8d 3d ab e5 00 00 	lea    rdi,[rip+0xe5ab]        # 225578 <__unnamed_73>
  216fcd:	31 c0                	xor    eax,eax
  216fcf:	89 c6                	mov    esi,eax
  216fd1:	e8 ea c0 fe ff       	call   2030c0 <panic>
  216fd6:	48 8d 3d 3b e3 00 00 	lea    rdi,[rip+0xe33b]        # 225318 <__unnamed_5>
  216fdd:	31 c0                	xor    eax,eax
  216fdf:	89 c6                	mov    esi,eax
  216fe1:	e8 da c0 fe ff       	call   2030c0 <panic>
  216fe6:	48 8d 85 88 ef ff ff 	lea    rax,[rbp-0x1078]
  216fed:	8a 8d 34 e9 ff ff    	mov    cl,BYTE PTR [rbp-0x16cc]
  216ff3:	88 8d 6f ee ff ff    	mov    BYTE PTR [rbp-0x1191],cl
                        prog.address += inc_addr;
  216ff9:	48 8b 95 88 ef ff ff 	mov    rdx,QWORD PTR [rbp-0x1078]
  217000:	0f b6 b5 6f ee ff ff 	movzx  esi,BYTE PTR [rbp-0x1191]
  217007:	89 f7                	mov    edi,esi
  217009:	48 01 fa             	add    rdx,rdi
  21700c:	41 0f 92 c0          	setb   r8b
  217010:	48 89 85 28 e9 ff ff 	mov    QWORD PTR [rbp-0x16d8],rax
  217017:	48 89 95 20 e9 ff ff 	mov    QWORD PTR [rbp-0x16e0],rdx
  21701e:	44 88 85 1f e9 ff ff 	mov    BYTE PTR [rbp-0x16e1],r8b
  217025:	72 02                	jb     217029 <getLineNumberInfo+0x2bb9>
  217027:	eb 10                	jmp    217039 <getLineNumberInfo+0x2bc9>
  217029:	48 8d 3d e8 e2 00 00 	lea    rdi,[rip+0xe2e8]        # 225318 <__unnamed_5>
  217030:	31 c0                	xor    eax,eax
  217032:	89 c6                	mov    esi,eax
  217034:	e8 87 c0 fe ff       	call   2030c0 <panic>
  217039:	48 8b 85 28 e9 ff ff 	mov    rax,QWORD PTR [rbp-0x16d8]
  217040:	48 8b 8d 20 e9 ff ff 	mov    rcx,QWORD PTR [rbp-0x16e0]
  217047:	48 89 08             	mov    QWORD PTR [rax],rcx
                switch (opcode) {
  21704a:	e9 03 f9 ff ff       	jmp    216952 <getLineNumberInfo+0x24e2>
  21704f:	48 8d 3d c2 e2 00 00 	lea    rdi,[rip+0xe2c2]        # 225318 <__unnamed_5>
  217056:	31 c0                	xor    eax,eax
  217058:	89 c6                	mov    esi,eax
                        prog.address += arg;
  21705a:	e8 61 c0 fe ff       	call   2030c0 <panic>
  21705f:	48 8b 85 b8 e9 ff ff 	mov    rax,QWORD PTR [rbp-0x1648]
  217066:	48 8b 8d b0 e9 ff ff 	mov    rcx,QWORD PTR [rbp-0x1650]
  21706d:	48 89 08             	mov    QWORD PTR [rax],rcx
                switch (opcode) {
  217070:	e9 dd f8 ff ff       	jmp    216952 <getLineNumberInfo+0x24e2>
  217075:	48 8d 3d 9c e2 00 00 	lea    rdi,[rip+0xe29c]        # 225318 <__unnamed_5>
  21707c:	31 c0                	xor    eax,eax
  21707e:	89 c6                	mov    esi,eax
    while (this_offset < debug_line_end) : (this_index += 1) {
  217080:	e8 3b c0 fe ff       	call   2030c0 <panic>
  217085:	48 8b 85 a0 e9 ff ff 	mov    rax,QWORD PTR [rbp-0x1660]
  21708c:	48 89 85 b0 f0 ff ff 	mov    QWORD PTR [rbp-0xf50],rax
  217093:	e9 f8 d4 ff ff       	jmp    214590 <getLineNumberInfo+0x120>
  217098:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  21709f:	00 

00000000002170a0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.44>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  2170a0:	55                   	push   rbp
  2170a1:	48 89 e5             	mov    rbp,rsp
  2170a4:	48 83 ec 50          	sub    rsp,0x50
  2170a8:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
  2170ac:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2170b0:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  2170b4:	4c 89 45 e8          	mov    QWORD PTR [rbp-0x18],r8
  2170b8:	4c 89 4d e0          	mov    QWORD PTR [rbp-0x20],r9
            return std.fmt.format(self, Error, self.writeFn, format, args);
  2170bc:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2170c0:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  2170c4:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  2170c7:	4c 8b 45 f0          	mov    r8,QWORD PTR [rbp-0x10]
  2170cb:	4c 8b 4d e8          	mov    r9,QWORD PTR [rbp-0x18]
  2170cf:	4c 8b 55 e0          	mov    r10,QWORD PTR [rbp-0x20]
  2170d3:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  2170d7:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  2170db:	48 89 ca             	mov    rdx,rcx
  2170de:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  2170e2:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  2170e6:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
  2170eb:	e8 e0 44 00 00       	call   21b5d0 <format.66>
  2170f0:	66 83 f8 00          	cmp    ax,0x0
  2170f4:	66 89 45 ce          	mov    WORD PTR [rbp-0x32],ax
  2170f8:	74 0b                	je     217105 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.44+0x65>
  2170fa:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  2170fe:	e8 4d d3 fe ff       	call   204450 <__zig_return_error>
  217103:	eb 02                	jmp    217107 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.44+0x67>
  217105:	eb 00                	jmp    217107 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.44+0x67>
  217107:	66 8b 45 ce          	mov    ax,WORD PTR [rbp-0x32]
  21710b:	48 83 c4 50          	add    rsp,0x50
  21710f:	5d                   	pop    rbp
  217110:	c3                   	ret    
  217111:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  217118:	0f 1f 84 00 00 00 00 
  21711f:	00 

0000000000217120 <LineInfo_deinit>:
    fn deinit(self: *const LineInfo) void {
  217120:	55                   	push   rbp
  217121:	48 89 e5             	mov    rbp,rsp
  217124:	48 83 ec 10          	sub    rsp,0x10
  217128:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
        self.allocator.free(self.file_name);
  21712c:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  217130:	48 8b 7f 20          	mov    rdi,QWORD PTR [rdi+0x20]
  217134:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  217138:	48 83 c0 10          	add    rax,0x10
  21713c:	48 89 c6             	mov    rsi,rax
  21713f:	e8 4c 1a 00 00       	call   218b90 <Allocator_free.56>
    fn deinit(self: *const LineInfo) void {
  217144:	48 83 c4 10          	add    rsp,0x10
  217148:	5d                   	pop    rbp
  217149:	c3                   	ret    
  21714a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000217150 <printLineFromFile>:
fn printLineFromFile(allocator: *mem.Allocator, out_stream: var, line_info: *const LineInfo) !void {
  217150:	55                   	push   rbp
  217151:	48 89 e5             	mov    rbp,rsp
  217154:	48 81 ec 10 11 00 00 	sub    rsp,0x1110
  21715b:	48 8d 45 f8          	lea    rax,[rbp-0x8]
  21715f:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  217163:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  217167:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
    var f = try os.File.openRead(allocator, line_info.file_name);
  21716b:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  21716f:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  217173:	48 83 c1 10          	add    rcx,0x10
  217177:	48 89 bd 40 ef ff ff 	mov    QWORD PTR [rbp-0x10c0],rdi
  21717e:	48 89 c7             	mov    rdi,rax
  217181:	48 8b b5 40 ef ff ff 	mov    rsi,QWORD PTR [rbp-0x10c0]
  217188:	e8 93 27 ff ff       	call   209920 <File_openRead>
  21718d:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  217192:	74 27                	je     2171bb <printLineFromFile+0x6b>
  217194:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  217198:	48 8b bd 40 ef ff ff 	mov    rdi,QWORD PTR [rbp-0x10c0]
  21719f:	66 89 85 3e ef ff ff 	mov    WORD PTR [rbp-0x10c2],ax
  2171a6:	e8 a5 d2 fe ff       	call   204450 <__zig_return_error>
  2171ab:	66 8b 85 3e ef ff ff 	mov    ax,WORD PTR [rbp-0x10c2]
  2171b2:	48 81 c4 10 11 00 00 	add    rsp,0x1110
  2171b9:	5d                   	pop    rbp
  2171ba:	c3                   	ret    
  2171bb:	48 8d 35 65 9e fe ff 	lea    rsi,[rip+0xfffffffffffe9e65]        # 201027 <__unnamed_115>
  2171c2:	b8 00 10 00 00       	mov    eax,0x1000
  2171c7:	89 c2                	mov    edx,eax
  2171c9:	48 8d 8d 88 ef ff ff 	lea    rcx,[rbp-0x1078]
  2171d0:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  2171d3:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
    var buf: [os.page_size]u8 = undefined;
  2171d6:	48 89 cf             	mov    rdi,rcx
  2171d9:	e8 22 ab 00 00       	call   221d00 <memcpy>
    var line: usize = 1;
  2171de:	48 c7 85 80 ef ff ff 	mov    QWORD PTR [rbp-0x1080],0x1
  2171e5:	01 00 00 00 
    var column: usize = 1;
  2171e9:	48 c7 85 78 ef ff ff 	mov    QWORD PTR [rbp-0x1088],0x1
  2171f0:	01 00 00 00 
    var abs_index: usize = 0;
  2171f4:	48 c7 85 70 ef ff ff 	mov    QWORD PTR [rbp-0x1090],0x0
  2171fb:	00 00 00 00 
    while (true) {
  2171ff:	eb 00                	jmp    217201 <printLineFromFile+0xb1>
  217201:	b0 01                	mov    al,0x1
        const amt_read = try f.read(buf[0..]);
  217203:	a8 01                	test   al,0x1
  217205:	0f 85 d0 01 00 00    	jne    2173db <printLineFromFile+0x28b>
  21720b:	e9 bb 01 00 00       	jmp    2173cb <printLineFromFile+0x27b>
  217210:	48 8d 7d 88          	lea    rdi,[rbp-0x78]
    defer f.close();
  217214:	e8 b7 15 ff ff       	call   2087d0 <File_close>
        const amt_read = try f.read(buf[0..]);
  217219:	66 8b 45 d0          	mov    ax,WORD PTR [rbp-0x30]
  21721d:	48 8b bd 40 ef ff ff 	mov    rdi,QWORD PTR [rbp-0x10c0]
  217224:	66 89 85 3c ef ff ff 	mov    WORD PTR [rbp-0x10c4],ax
  21722b:	e8 20 d2 fe ff       	call   204450 <__zig_return_error>
  217230:	66 8b 85 3c ef ff ff 	mov    ax,WORD PTR [rbp-0x10c4]
  217237:	48 81 c4 10 11 00 00 	add    rsp,0x1110
  21723e:	5d                   	pop    rbp
  21723f:	c3                   	ret    
  217240:	31 c0                	xor    eax,eax
  217242:	89 c1                	mov    ecx,eax
  217244:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  217248:	48 89 95 68 ef ff ff 	mov    QWORD PTR [rbp-0x1098],rdx
        const slice = buf[0..amt_read];
  21724f:	48 8b 95 68 ef ff ff 	mov    rdx,QWORD PTR [rbp-0x1098]
  217256:	48 39 d1             	cmp    rcx,rdx
  217259:	48 89 95 30 ef ff ff 	mov    QWORD PTR [rbp-0x10d0],rdx
  217260:	0f 86 c0 01 00 00    	jbe    217426 <printLineFromFile+0x2d6>
  217266:	e9 ab 01 00 00       	jmp    217416 <printLineFromFile+0x2c6>
        for (slice) |byte| {
  21726b:	48 8b 85 48 ef ff ff 	mov    rax,QWORD PTR [rbp-0x10b8]
  217272:	48 8b 8d 28 ef ff ff 	mov    rcx,QWORD PTR [rbp-0x10d8]
  217279:	48 39 c8             	cmp    rax,rcx
  21727c:	48 89 85 20 ef ff ff 	mov    QWORD PTR [rbp-0x10e0],rax
  217283:	0f 83 0e 01 00 00    	jae    217397 <printLineFromFile+0x247>
  217289:	48 8b 85 58 ef ff ff 	mov    rax,QWORD PTR [rbp-0x10a8]
  217290:	48 8b 8d 20 ef ff ff 	mov    rcx,QWORD PTR [rbp-0x10e0]
  217297:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  21729a:	88 95 57 ef ff ff    	mov    BYTE PTR [rbp-0x10a9],dl
            if (line == line_info.line) {
  2172a0:	48 8b 85 80 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1080]
  2172a7:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  2172ab:	48 3b 06             	cmp    rax,QWORD PTR [rsi]
  2172ae:	75 79                	jne    217329 <printLineFromFile+0x1d9>
                try out_stream.writeByte(byte);
  2172b0:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  2172b4:	48 8b bd 40 ef ff ff 	mov    rdi,QWORD PTR [rbp-0x10c0]
  2172bb:	0f b6 95 57 ef ff ff 	movzx  edx,BYTE PTR [rbp-0x10a9]
  2172c2:	e8 89 02 00 00       	call   217550 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_writeByte>
  2172c7:	66 89 45 ae          	mov    WORD PTR [rbp-0x52],ax
  2172cb:	66 83 7d ae 00       	cmp    WORD PTR [rbp-0x52],0x0
  2172d0:	74 30                	je     217302 <printLineFromFile+0x1b2>
  2172d2:	48 8d 7d 88          	lea    rdi,[rbp-0x78]
    defer f.close();
  2172d6:	e8 f5 14 ff ff       	call   2087d0 <File_close>
                try out_stream.writeByte(byte);
  2172db:	66 8b 45 ae          	mov    ax,WORD PTR [rbp-0x52]
  2172df:	48 8b bd 40 ef ff ff 	mov    rdi,QWORD PTR [rbp-0x10c0]
  2172e6:	66 89 85 1e ef ff ff 	mov    WORD PTR [rbp-0x10e2],ax
  2172ed:	e8 5e d1 fe ff       	call   204450 <__zig_return_error>
  2172f2:	66 8b 85 1e ef ff ff 	mov    ax,WORD PTR [rbp-0x10e2]
  2172f9:	48 81 c4 10 11 00 00 	add    rsp,0x1110
  217300:	5d                   	pop    rbp
  217301:	c3                   	ret    
                if (byte == '\n') {
  217302:	80 bd 57 ef ff ff 0a 	cmp    BYTE PTR [rbp-0x10a9],0xa
  217309:	75 1a                	jne    217325 <printLineFromFile+0x1d5>
  21730b:	48 8d 7d 88          	lea    rdi,[rbp-0x78]
    defer f.close();
  21730f:	e8 bc 14 ff ff       	call   2087d0 <File_close>
  217314:	31 c0                	xor    eax,eax
  217316:	66 89 c1             	mov    cx,ax
                    return;
  217319:	66 89 c8             	mov    ax,cx
  21731c:	48 81 c4 10 11 00 00 	add    rsp,0x1110
  217323:	5d                   	pop    rbp
  217324:	c3                   	ret    
                if (byte == '\n') {
  217325:	eb 00                	jmp    217327 <printLineFromFile+0x1d7>
            if (line == line_info.line) {
  217327:	eb 02                	jmp    21732b <printLineFromFile+0x1db>
  217329:	eb 00                	jmp    21732b <printLineFromFile+0x1db>
            if (byte == '\n') {
  21732b:	80 bd 57 ef ff ff 0a 	cmp    BYTE PTR [rbp-0x10a9],0xa
  217332:	75 26                	jne    21735a <printLineFromFile+0x20a>
                line += 1;
  217334:	48 8b 85 80 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1080]
  21733b:	48 83 c0 01          	add    rax,0x1
  21733f:	0f 92 c1             	setb   cl
  217342:	48 89 85 10 ef ff ff 	mov    QWORD PTR [rbp-0x10f0],rax
  217349:	88 8d 0f ef ff ff    	mov    BYTE PTR [rbp-0x10f1],cl
  21734f:	0f 82 56 01 00 00    	jb     2174ab <printLineFromFile+0x35b>
  217355:	e9 61 01 00 00       	jmp    2174bb <printLineFromFile+0x36b>
                column += 1;
  21735a:	48 8b 85 78 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1088]
  217361:	48 83 c0 01          	add    rax,0x1
  217365:	0f 92 c1             	setb   cl
  217368:	48 89 85 00 ef ff ff 	mov    QWORD PTR [rbp-0x1100],rax
  21736f:	88 8d ff ee ff ff    	mov    BYTE PTR [rbp-0x1101],cl
  217375:	0f 82 5e 01 00 00    	jb     2174d9 <printLineFromFile+0x389>
  21737b:	e9 69 01 00 00       	jmp    2174e9 <printLineFromFile+0x399>
        for (slice) |byte| {
  217380:	48 8b 85 20 ef ff ff 	mov    rax,QWORD PTR [rbp-0x10e0]
  217387:	48 83 c0 01          	add    rax,0x1
  21738b:	48 89 85 48 ef ff ff 	mov    QWORD PTR [rbp-0x10b8],rax
  217392:	e9 d4 fe ff ff       	jmp    21726b <printLineFromFile+0x11b>
        if (amt_read < buf.len) return error.EndOfFile;
  217397:	48 81 bd 68 ef ff ff 	cmp    QWORD PTR [rbp-0x1098],0x1000
  21739e:	00 10 00 00 
  2173a2:	73 22                	jae    2173c6 <printLineFromFile+0x276>
  2173a4:	48 8d 7d 88          	lea    rdi,[rbp-0x78]
    defer f.close();
  2173a8:	e8 23 14 ff ff       	call   2087d0 <File_close>
        if (amt_read < buf.len) return error.EndOfFile;
  2173ad:	48 8b bd 40 ef ff ff 	mov    rdi,QWORD PTR [rbp-0x10c0]
  2173b4:	e8 97 d0 fe ff       	call   204450 <__zig_return_error>
  2173b9:	66 b8 24 00          	mov    ax,0x24
  2173bd:	48 81 c4 10 11 00 00 	add    rsp,0x1110
  2173c4:	5d                   	pop    rbp
  2173c5:	c3                   	ret    
    while (true) {
  2173c6:	e9 34 fe ff ff       	jmp    2171ff <printLineFromFile+0xaf>
  2173cb:	48 8d 3d 2e df 00 00 	lea    rdi,[rip+0xdf2e]        # 225300 <__unnamed_4>
  2173d2:	31 c0                	xor    eax,eax
  2173d4:	89 c6                	mov    esi,eax
        const amt_read = try f.read(buf[0..]);
  2173d6:	e8 e5 bc fe ff       	call   2030c0 <panic>
  2173db:	48 8d 7d d0          	lea    rdi,[rbp-0x30]
  2173df:	48 8d 55 88          	lea    rdx,[rbp-0x78]
  2173e3:	48 8d 4d e0          	lea    rcx,[rbp-0x20]
  2173e7:	48 8d 85 88 ef ff ff 	lea    rax,[rbp-0x1078]
  2173ee:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  2173f2:	48 c7 45 e8 00 10 00 	mov    QWORD PTR [rbp-0x18],0x1000
  2173f9:	00 
  2173fa:	48 8b b5 40 ef ff ff 	mov    rsi,QWORD PTR [rbp-0x10c0]
  217401:	e8 0a 3a ff ff       	call   20ae10 <File_read>
  217406:	66 83 7d d0 00       	cmp    WORD PTR [rbp-0x30],0x0
  21740b:	0f 85 ff fd ff ff    	jne    217210 <printLineFromFile+0xc0>
  217411:	e9 2a fe ff ff       	jmp    217240 <printLineFromFile+0xf0>
  217416:	48 8d 3d e3 de 00 00 	lea    rdi,[rip+0xdee3]        # 225300 <__unnamed_4>
  21741d:	31 c0                	xor    eax,eax
  21741f:	89 c6                	mov    esi,eax
        const slice = buf[0..amt_read];
  217421:	e8 9a bc fe ff       	call   2030c0 <panic>
  217426:	48 8b 85 30 ef ff ff 	mov    rax,QWORD PTR [rbp-0x10d0]
  21742d:	48 3d 00 10 00 00    	cmp    rax,0x1000
  217433:	76 10                	jbe    217445 <printLineFromFile+0x2f5>
  217435:	48 8d 3d c4 de 00 00 	lea    rdi,[rip+0xdec4]        # 225300 <__unnamed_4>
  21743c:	31 c0                	xor    eax,eax
  21743e:	89 c6                	mov    esi,eax
  217440:	e8 7b bc fe ff       	call   2030c0 <panic>
  217445:	48 8d bd 57 ef ff ff 	lea    rdi,[rbp-0x10a9]
  21744c:	be aa 00 00 00       	mov    esi,0xaa
  217451:	b8 01 00 00 00       	mov    eax,0x1
  217456:	89 c2                	mov    edx,eax
  217458:	48 8d 8d 88 ef ff ff 	lea    rcx,[rbp-0x1078]
  21745f:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
  217463:	48 8b 8d 30 ef ff ff 	mov    rcx,QWORD PTR [rbp-0x10d0]
  21746a:	48 83 e9 00          	sub    rcx,0x0
  21746e:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
  217472:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  217476:	48 89 8d 58 ef ff ff 	mov    QWORD PTR [rbp-0x10a8],rcx
  21747d:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  217481:	48 89 8d 60 ef ff ff 	mov    QWORD PTR [rbp-0x10a0],rcx
        for (slice) |byte| {
  217488:	e8 23 a8 00 00       	call   221cb0 <memset>
  21748d:	48 c7 85 48 ef ff ff 	mov    QWORD PTR [rbp-0x10b8],0x0
  217494:	00 00 00 00 
  217498:	48 8b 8d 60 ef ff ff 	mov    rcx,QWORD PTR [rbp-0x10a0]
  21749f:	48 89 8d 28 ef ff ff 	mov    QWORD PTR [rbp-0x10d8],rcx
  2174a6:	e9 c0 fd ff ff       	jmp    21726b <printLineFromFile+0x11b>
  2174ab:	48 8d 3d 66 de 00 00 	lea    rdi,[rip+0xde66]        # 225318 <__unnamed_5>
  2174b2:	31 c0                	xor    eax,eax
  2174b4:	89 c6                	mov    esi,eax
                line += 1;
  2174b6:	e8 05 bc fe ff       	call   2030c0 <panic>
  2174bb:	48 8b 85 10 ef ff ff 	mov    rax,QWORD PTR [rbp-0x10f0]
  2174c2:	48 89 85 80 ef ff ff 	mov    QWORD PTR [rbp-0x1080],rax
                column = 1;
  2174c9:	48 c7 85 78 ef ff ff 	mov    QWORD PTR [rbp-0x1088],0x1
  2174d0:	01 00 00 00 
            if (byte == '\n') {
  2174d4:	e9 a7 fe ff ff       	jmp    217380 <printLineFromFile+0x230>
  2174d9:	48 8d 3d 38 de 00 00 	lea    rdi,[rip+0xde38]        # 225318 <__unnamed_5>
  2174e0:	31 c0                	xor    eax,eax
  2174e2:	89 c6                	mov    esi,eax
                column += 1;
  2174e4:	e8 d7 bb fe ff       	call   2030c0 <panic>
  2174e9:	48 8b 85 00 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1100]
  2174f0:	48 89 85 78 ef ff ff 	mov    QWORD PTR [rbp-0x1088],rax
            if (byte == '\n') {
  2174f7:	e9 84 fe ff ff       	jmp    217380 <printLineFromFile+0x230>
  2174fc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000217500 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_write>:
        }

        pub fn write(self: *Self, bytes: []const u8) !void {
  217500:	55                   	push   rbp
  217501:	48 89 e5             	mov    rbp,rsp
  217504:	48 83 ec 20          	sub    rsp,0x20
  217508:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
            return self.writeFn(self, bytes);
  21750c:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  217510:	48 8b 36             	mov    rsi,QWORD PTR [rsi]
  217513:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  217517:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  21751b:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
  21751f:	48 89 c6             	mov    rsi,rax
  217522:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  217526:	ff d0                	call   rax
  217528:	66 83 f8 00          	cmp    ax,0x0
  21752c:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
  217530:	74 0b                	je     21753d <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_write+0x3d>
  217532:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  217536:	e8 15 cf fe ff       	call   204450 <__zig_return_error>
  21753b:	eb 02                	jmp    21753f <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_write+0x3f>
  21753d:	eb 00                	jmp    21753f <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_write+0x3f>
  21753f:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
  217543:	48 83 c4 20          	add    rsp,0x20
  217547:	5d                   	pop    rbp
  217548:	c3                   	ret    
  217549:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000217550 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_writeByte>:
        }

        pub fn writeByte(self: *Self, byte: u8) !void {
  217550:	55                   	push   rbp
  217551:	48 89 e5             	mov    rbp,rsp
  217554:	48 83 ec 50          	sub    rsp,0x50
  217558:	88 d0                	mov    al,dl
  21755a:	b1 01                	mov    cl,0x1
  21755c:	4c 8d 45 df          	lea    r8,[rbp-0x21]
  217560:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  217564:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
            const slice = (*[1]u8)(&byte)[0..];
  217567:	4c 89 45 f8          	mov    QWORD PTR [rbp-0x8],r8
  21756b:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21756f:	f6 c1 01             	test   cl,0x1
  217572:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
  217576:	48 89 75 b8          	mov    QWORD PTR [rbp-0x48],rsi
  21757a:	75 29                	jne    2175a5 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_writeByte+0x55>
  21757c:	eb 17                	jmp    217595 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_writeByte+0x45>
            return self.writeFn(self, slice);
  21757e:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  217582:	e8 c9 ce fe ff       	call   204450 <__zig_return_error>
  217587:	eb 02                	jmp    21758b <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_writeByte+0x3b>
  217589:	eb 00                	jmp    21758b <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_writeByte+0x3b>
  21758b:	66 8b 45 b6          	mov    ax,WORD PTR [rbp-0x4a]
  21758f:	48 83 c4 50          	add    rsp,0x50
  217593:	5d                   	pop    rbp
  217594:	c3                   	ret    
  217595:	48 8d 3d 64 dd 00 00 	lea    rdi,[rip+0xdd64]        # 225300 <__unnamed_4>
  21759c:	31 c0                	xor    eax,eax
  21759e:	89 c6                	mov    esi,eax
            const slice = (*[1]u8)(&byte)[0..];
  2175a0:	e8 1b bb fe ff       	call   2030c0 <panic>
  2175a5:	48 8d 55 c8          	lea    rdx,[rbp-0x38]
  2175a9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  2175ad:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  2175b1:	48 c7 45 f0 01 00 00 	mov    QWORD PTR [rbp-0x10],0x1
  2175b8:	00 
  2175b9:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2175bd:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  2175c1:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  2175c5:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
            return self.writeFn(self, slice);
  2175c9:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  2175cd:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  2175d0:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  2175d4:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  2175d8:	ff d1                	call   rcx
  2175da:	66 83 f8 00          	cmp    ax,0x0
  2175de:	66 89 45 b6          	mov    WORD PTR [rbp-0x4a],ax
  2175e2:	75 9a                	jne    21757e <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_writeByte+0x2e>
  2175e4:	eb a3                	jmp    217589 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_writeByte+0x39>
  2175e6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  2175ed:	00 00 00 

00000000002175f0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.45>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  2175f0:	55                   	push   rbp
  2175f1:	48 89 e5             	mov    rbp,rsp
  2175f4:	48 83 ec 50          	sub    rsp,0x50
  2175f8:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
  2175fc:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  217600:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  217604:	4c 89 45 e8          	mov    QWORD PTR [rbp-0x18],r8
  217608:	4c 89 4d e0          	mov    QWORD PTR [rbp-0x20],r9
            return std.fmt.format(self, Error, self.writeFn, format, args);
  21760c:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  217610:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  217614:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  217617:	4c 8b 45 f0          	mov    r8,QWORD PTR [rbp-0x10]
  21761b:	4c 8b 4d e8          	mov    r9,QWORD PTR [rbp-0x18]
  21761f:	4c 8b 55 e0          	mov    r10,QWORD PTR [rbp-0x20]
  217623:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  217627:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  21762b:	48 89 ca             	mov    rdx,rcx
  21762e:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  217632:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  217636:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
  21763b:	e8 90 43 00 00       	call   21b9d0 <format.70>
  217640:	66 83 f8 00          	cmp    ax,0x0
  217644:	66 89 45 ce          	mov    WORD PTR [rbp-0x32],ax
  217648:	74 0b                	je     217655 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.45+0x65>
  21764a:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  21764e:	e8 fd cd fe ff       	call   204450 <__zig_return_error>
  217653:	eb 02                	jmp    217657 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.45+0x67>
  217655:	eb 00                	jmp    217657 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.45+0x67>
  217657:	66 8b 45 ce          	mov    ax,WORD PTR [rbp-0x32]
  21765b:	48 83 c4 50          	add    rsp,0x50
  21765f:	5d                   	pop    rbp
  217660:	c3                   	ret    
  217661:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  217668:	0f 1f 84 00 00 00 00 
  21766f:	00 

0000000000217670 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.46>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  217670:	55                   	push   rbp
  217671:	48 89 e5             	mov    rbp,rsp
  217674:	48 83 ec 30          	sub    rsp,0x30
  217678:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21767c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
            return std.fmt.format(self, Error, self.writeFn, format, args);
  217680:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  217684:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  217688:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
  21768b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21768f:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  217693:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  217697:	48 89 c1             	mov    rcx,rax
  21769a:	4c 8b 45 e0          	mov    r8,QWORD PTR [rbp-0x20]
  21769e:	e8 bd 46 00 00       	call   21bd60 <format.74>
  2176a3:	66 83 f8 00          	cmp    ax,0x0
  2176a7:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  2176ab:	74 0b                	je     2176b8 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.46+0x48>
  2176ad:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  2176b1:	e8 9a cd fe ff       	call   204450 <__zig_return_error>
  2176b6:	eb 02                	jmp    2176ba <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.46+0x4a>
  2176b8:	eb 00                	jmp    2176ba <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.46+0x4a>
  2176ba:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  2176be:	48 83 c4 30          	add    rsp,0x30
  2176c2:	5d                   	pop    rbp
  2176c3:	c3                   	ret    
  2176c4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2176cb:	00 00 00 00 00 

00000000002176d0 <AlignedArrayList(CompileUnit,2)_toSlice>:
        pub fn toSlice(self: Self) []align(A) T {
  2176d0:	55                   	push   rbp
  2176d1:	48 89 e5             	mov    rbp,rsp
  2176d4:	48 83 ec 40          	sub    rsp,0x40
  2176d8:	48 89 f8             	mov    rax,rdi
  2176db:	31 c9                	xor    ecx,ecx
  2176dd:	89 ca                	mov    edx,ecx
            return self.items[0..self.len];
  2176df:	4c 8b 46 10          	mov    r8,QWORD PTR [rsi+0x10]
  2176e3:	4c 8b 4e 08          	mov    r9,QWORD PTR [rsi+0x8]
  2176e7:	4c 39 c2             	cmp    rdx,r8
  2176ea:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  2176ee:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  2176f2:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  2176f6:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
  2176fa:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
  2176fe:	76 10                	jbe    217710 <AlignedArrayList(CompileUnit,2)_toSlice+0x40>
  217700:	48 8d 3d f9 db 00 00 	lea    rdi,[rip+0xdbf9]        # 225300 <__unnamed_4>
  217707:	31 c0                	xor    eax,eax
  217709:	89 c6                	mov    esi,eax
  21770b:	e8 b0 b9 fe ff       	call   2030c0 <panic>
  217710:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  217714:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  217718:	48 39 c8             	cmp    rax,rcx
  21771b:	76 10                	jbe    21772d <AlignedArrayList(CompileUnit,2)_toSlice+0x5d>
  21771d:	48 8d 3d dc db 00 00 	lea    rdi,[rip+0xdbdc]        # 225300 <__unnamed_4>
  217724:	31 c0                	xor    eax,eax
  217726:	89 c6                	mov    esi,eax
  217728:	e8 93 b9 fe ff       	call   2030c0 <panic>
  21772d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  217731:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  217734:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  217738:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  21773c:	48 83 e9 00          	sub    rcx,0x0
  217740:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  217744:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  217748:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  21774c:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  21774f:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  217753:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  217757:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21775b:	48 83 c4 40          	add    rsp,0x40
  21775f:	5d                   	pop    rbp
  217760:	c3                   	ret    
  217761:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  217768:	0f 1f 84 00 00 00 00 
  21776f:	00 

0000000000217770 <Die_getAttrSecOffset>:
    fn getAttrSecOffset(self: *const Die, id: u64) !u64 {
  217770:	55                   	push   rbp
  217771:	48 89 e5             	mov    rbp,rsp
  217774:	48 81 ec b0 00 00 00 	sub    rsp,0xb0
  21777b:	48 89 f8             	mov    rax,rdi
  21777e:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  217782:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
        const form_value = self.getAttr(id) orelse return error.MissingDebugInfo;
  217786:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  21778a:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  21778e:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
  217792:	48 89 cf             	mov    rdi,rcx
  217795:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
  217799:	48 89 d6             	mov    rsi,rdx
  21779c:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  2177a0:	e8 eb 54 ff ff       	call   20cc90 <Die_getAttr>
  2177a5:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  2177a9:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
  2177ae:	75 2f                	jne    2177df <Die_getAttrSecOffset+0x6f>
  2177b0:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  2177b4:	e8 97 cc fe ff       	call   204450 <__zig_return_error>
  2177b9:	48 8b 3d 50 ab fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffeab50]        # 202310 <__unnamed_103>
  2177c0:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  2177c4:	48 89 38             	mov    QWORD PTR [rax],rdi
  2177c7:	48 8b 3d 4a ab fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffeab4a]        # 202318 <__unnamed_103+0x8>
  2177ce:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  2177d2:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  2177d6:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  2177dd:	5d                   	pop    rbp
  2177de:	c3                   	ret    
  2177df:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2177e3:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  2177e7:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  2177eb:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
        return switch (form_value.*) {
  2177ef:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  2177f3:	8a 51 18             	mov    dl,BYTE PTR [rcx+0x18]
  2177f6:	40 88 d6             	mov    sil,dl
  2177f9:	40 80 ee 02          	sub    sil,0x2
  2177fd:	48 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rcx
  217804:	88 95 77 ff ff ff    	mov    BYTE PTR [rbp-0x89],dl
  21780a:	40 88 b5 76 ff ff ff 	mov    BYTE PTR [rbp-0x8a],sil
  217811:	74 26                	je     217839 <Die_getAttrSecOffset+0xc9>
  217813:	eb 00                	jmp    217815 <Die_getAttrSecOffset+0xa5>
  217815:	8a 85 77 ff ff ff    	mov    al,BYTE PTR [rbp-0x89]
  21781b:	24 0f                	and    al,0xf
  21781d:	2c 05                	sub    al,0x5
  21781f:	88 85 75 ff ff ff    	mov    BYTE PTR [rbp-0x8b],al
  217825:	74 2c                	je     217853 <Die_getAttrSecOffset+0xe3>
  217827:	eb 00                	jmp    217829 <Die_getAttrSecOffset+0xb9>
  217829:	48 8d 05 00 ab fe ff 	lea    rax,[rip+0xfffffffffffeab00]        # 202330 <__unnamed_117>
  217830:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  217837:	eb 38                	jmp    217871 <Die_getAttrSecOffset+0x101>
            FormValue.Const => |value| value.asUnsignedLe(),
  217839:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  217840:	8a 48 18             	mov    cl,BYTE PTR [rax+0x18]
  217843:	80 e9 02             	sub    cl,0x2
  217846:	88 8d 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],cl
  21784c:	74 6a                	je     2178b8 <Die_getAttrSecOffset+0x148>
  21784e:	e9 a4 00 00 00       	jmp    2178f7 <Die_getAttrSecOffset+0x187>
            FormValue.SecOffset => |value| value,
  217853:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  21785a:	8a 48 18             	mov    cl,BYTE PTR [rax+0x18]
  21785d:	80 e9 05             	sub    cl,0x5
  217860:	88 8d 66 ff ff ff    	mov    BYTE PTR [rbp-0x9a],cl
  217866:	0f 84 9b 00 00 00    	je     217907 <Die_getAttrSecOffset+0x197>
  21786c:	e9 c2 00 00 00       	jmp    217933 <Die_getAttrSecOffset+0x1c3>
        return switch (form_value.*) {
  217871:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  217878:	66 83 38 00          	cmp    WORD PTR [rax],0x0
  21787c:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  217883:	74 0b                	je     217890 <Die_getAttrSecOffset+0x120>
  217885:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  217889:	e8 c2 cb fe ff       	call   204450 <__zig_return_error>
  21788e:	eb 02                	jmp    217892 <Die_getAttrSecOffset+0x122>
  217890:	eb 00                	jmp    217892 <Die_getAttrSecOffset+0x122>
  217892:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
  217899:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  21789c:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  2178a0:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  2178a3:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  2178a7:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  2178ab:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  2178af:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  2178b6:	5d                   	pop    rbp
  2178b7:	c3                   	ret    
  2178b8:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
  2178bc:	48 8d 55 a8          	lea    rdx,[rbp-0x58]
            FormValue.Const => |value| value.asUnsignedLe(),
  2178c0:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  2178c7:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  2178ca:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  2178ce:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  2178d2:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
  2178d6:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
  2178da:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
  2178de:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  2178e2:	e8 49 54 ff ff       	call   20cd30 <Constant_asUnsignedLe>
  2178e7:	48 8d 45 e8          	lea    rax,[rbp-0x18]
        return switch (form_value.*) {
  2178eb:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  2178f2:	e9 7a ff ff ff       	jmp    217871 <Die_getAttrSecOffset+0x101>
  2178f7:	48 8d 3d 62 dc 00 00 	lea    rdi,[rip+0xdc62]        # 225560 <__unnamed_17>
  2178fe:	31 c0                	xor    eax,eax
  217900:	89 c6                	mov    esi,eax
            FormValue.Const => |value| value.asUnsignedLe(),
  217902:	e8 b9 b7 fe ff       	call   2030c0 <panic>
  217907:	48 8d 45 d8          	lea    rax,[rbp-0x28]
            FormValue.SecOffset => |value| value,
  21790b:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  217912:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
  217915:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  217919:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  21791d:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  217923:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
        return switch (form_value.*) {
  217927:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  21792e:	e9 3e ff ff ff       	jmp    217871 <Die_getAttrSecOffset+0x101>
  217933:	48 8d 3d 26 dc 00 00 	lea    rdi,[rip+0xdc26]        # 225560 <__unnamed_17>
  21793a:	31 c0                	xor    eax,eax
  21793c:	89 c6                	mov    esi,eax
            FormValue.SecOffset => |value| value,
  21793e:	e8 7d b7 fe ff       	call   2030c0 <panic>
  217943:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21794a:	84 00 00 00 00 00 

0000000000217950 <InStream(ReadError)_readIntLe.47>:
        pub fn readIntLe(self: *Self, comptime T: type) !T {
  217950:	55                   	push   rbp
  217951:	48 89 e5             	mov    rbp,rsp
  217954:	48 83 ec 30          	sub    rsp,0x30
  217958:	48 89 f8             	mov    rax,rdi
  21795b:	48 8d 4d f0          	lea    rcx,[rbp-0x10]
  21795f:	41 b8 01 00 00 00    	mov    r8d,0x1
  217965:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
            return self.readInt(builtin.Endian.Little, T);
  217969:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  21796d:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  217971:	48 89 cf             	mov    rdi,rcx
  217974:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  217978:	44 89 c1             	mov    ecx,r8d
  21797b:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  21797f:	e8 3c 00 00 00       	call   2179c0 <InStream(ReadError)_readInt.48>
  217984:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  217989:	74 0b                	je     217996 <InStream(ReadError)_readIntLe.47+0x46>
  21798b:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  21798f:	e8 bc ca fe ff       	call   204450 <__zig_return_error>
  217994:	eb 02                	jmp    217998 <InStream(ReadError)_readIntLe.47+0x48>
  217996:	eb 00                	jmp    217998 <InStream(ReadError)_readIntLe.47+0x48>
  217998:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21799c:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  2179a0:	48 89 01             	mov    QWORD PTR [rcx],rax
  2179a3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2179a7:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2179ab:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2179af:	48 83 c4 30          	add    rsp,0x30
  2179b3:	5d                   	pop    rbp
  2179b4:	c3                   	ret    
  2179b5:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2179bc:	00 00 00 00 

00000000002179c0 <InStream(ReadError)_readInt.48>:
        pub fn readInt(self: *Self, endian: builtin.Endian, comptime T: type) !T {
  2179c0:	55                   	push   rbp
  2179c1:	48 89 e5             	mov    rbp,rsp
  2179c4:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  2179cb:	88 c8                	mov    al,cl
  2179cd:	49 89 f8             	mov    r8,rdi
  2179d0:	41 b1 01             	mov    r9b,0x1
  2179d3:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
  2179d7:	24 01                	and    al,0x1
  2179d9:	88 45 a7             	mov    BYTE PTR [rbp-0x59],al
            var bytes: [@sizeOf(T)]u8 = undefined;
  2179dc:	48 8b 15 25 aa fe ff 	mov    rdx,QWORD PTR [rip+0xfffffffffffeaa25]        # 202408 <__unnamed_118>
  2179e3:	48 89 55 9f          	mov    QWORD PTR [rbp-0x61],rdx
            try self.readNoEof(bytes[0..]);
  2179e7:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  2179eb:	41 f6 c1 01          	test   r9b,0x1
  2179ef:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
  2179f3:	4c 89 45 88          	mov    QWORD PTR [rbp-0x78],r8
  2179f7:	48 89 55 80          	mov    QWORD PTR [rbp-0x80],rdx
  2179fb:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
  217a02:	0f 85 ae 00 00 00    	jne    217ab6 <InStream(ReadError)_readInt.48+0xf6>
  217a08:	e9 99 00 00 00       	jmp    217aa6 <InStream(ReadError)_readInt.48+0xe6>
  217a0d:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  217a11:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  217a15:	66 89 85 76 ff ff ff 	mov    WORD PTR [rbp-0x8a],ax
  217a1c:	e8 2f ca fe ff       	call   204450 <__zig_return_error>
  217a21:	66 8b 85 76 ff ff ff 	mov    ax,WORD PTR [rbp-0x8a]
  217a28:	66 89 45 d8          	mov    WORD PTR [rbp-0x28],ax
  217a2c:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  217a30:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  217a37:	48 89 39             	mov    QWORD PTR [rcx],rdi
  217a3a:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  217a3e:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  217a42:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  217a46:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  217a4d:	5d                   	pop    rbp
  217a4e:	c3                   	ret    
  217a4f:	48 8d 45 c0          	lea    rax,[rbp-0x40]
  217a53:	48 8d 4d 9f          	lea    rcx,[rbp-0x61]
            return mem.readInt(bytes, T, endian);
  217a57:	8a 55 a7             	mov    dl,BYTE PTR [rbp-0x59]
  217a5a:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
  217a5e:	48 c7 45 c8 08 00 00 	mov    QWORD PTR [rbp-0x38],0x8
  217a65:	00 
  217a66:	0f b6 f2             	movzx  esi,dl
  217a69:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  217a6d:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  217a74:	e8 77 00 00 00       	call   217af0 <readInt.49>
  217a79:	66 c7 45 b0 00 00    	mov    WORD PTR [rbp-0x50],0x0
  217a7f:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  217a83:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  217a87:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  217a8e:	48 89 01             	mov    QWORD PTR [rcx],rax
  217a91:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  217a95:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  217a99:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  217a9d:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  217aa4:	5d                   	pop    rbp
  217aa5:	c3                   	ret    
  217aa6:	48 8d 3d 53 d8 00 00 	lea    rdi,[rip+0xd853]        # 225300 <__unnamed_4>
  217aad:	31 c0                	xor    eax,eax
  217aaf:	89 c6                	mov    esi,eax
            try self.readNoEof(bytes[0..]);
  217ab1:	e8 0a b6 fe ff       	call   2030c0 <panic>
  217ab6:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
  217aba:	48 8d 45 9f          	lea    rax,[rbp-0x61]
  217abe:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  217ac2:	48 c7 45 f8 08 00 00 	mov    QWORD PTR [rbp-0x8],0x8
  217ac9:	00 
  217aca:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  217ace:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  217ad2:	e8 e9 27 ff ff       	call   20a2c0 <InStream(ReadError)_readNoEof>
  217ad7:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  217adb:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  217ae0:	0f 85 27 ff ff ff    	jne    217a0d <InStream(ReadError)_readInt.48+0x4d>
  217ae6:	e9 64 ff ff ff       	jmp    217a4f <InStream(ReadError)_readInt.48+0x8f>
  217aeb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000217af0 <readInt.49>:
pub fn readInt(bytes: []const u8, comptime T: type, endian: builtin.Endian) T {
  217af0:	55                   	push   rbp
  217af1:	48 89 e5             	mov    rbp,rsp
  217af4:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  217afb:	40 88 f0             	mov    al,sil
  217afe:	24 01                	and    al,0x1
  217b00:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
    var result: T = 0;
  217b03:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  217b0a:	00 
    switch (endian) {
  217b0b:	8a 45 ff             	mov    al,BYTE PTR [rbp-0x1]
  217b0e:	84 c0                	test   al,al
  217b10:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  217b14:	88 45 c7             	mov    BYTE PTR [rbp-0x39],al
  217b17:	0f 85 83 00 00 00    	jne    217ba0 <readInt.49+0xb0>
  217b1d:	eb 00                	jmp    217b1f <readInt.49+0x2f>
  217b1f:	8a 45 c7             	mov    al,BYTE PTR [rbp-0x39]
  217b22:	f6 d0                	not    al
  217b24:	a8 01                	test   al,0x1
  217b26:	0f 84 f4 00 00 00    	je     217c20 <readInt.49+0x130>
  217b2c:	eb 00                	jmp    217b2e <readInt.49+0x3e>
  217b2e:	48 8d 7d ef          	lea    rdi,[rbp-0x11]
  217b32:	be aa 00 00 00       	mov    esi,0xaa
  217b37:	b8 01 00 00 00       	mov    eax,0x1
  217b3c:	89 c2                	mov    edx,eax
            for (bytes) |b| {
  217b3e:	e8 6d a1 00 00       	call   221cb0 <memset>
  217b43:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  217b4a:	00 
  217b4b:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  217b4f:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
  217b53:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
  217b57:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  217b5b:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  217b5f:	48 39 c8             	cmp    rax,rcx
  217b62:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  217b66:	73 33                	jae    217b9b <readInt.49+0xab>
  217b68:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  217b6c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  217b6f:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  217b73:	40 8a 34 11          	mov    sil,BYTE PTR [rcx+rdx*1]
  217b77:	40 88 75 ef          	mov    BYTE PTR [rbp-0x11],sil
                result = (result << 8) | b;
  217b7b:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  217b7f:	48 c1 e1 08          	shl    rcx,0x8
  217b83:	0f b6 7d ef          	movzx  edi,BYTE PTR [rbp-0x11]
  217b87:	41 89 f8             	mov    r8d,edi
  217b8a:	4c 09 c1             	or     rcx,r8
  217b8d:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
            for (bytes) |b| {
  217b91:	48 83 c2 01          	add    rdx,0x1
  217b95:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  217b99:	eb bc                	jmp    217b57 <readInt.49+0x67>
    switch (endian) {
  217b9b:	e9 90 00 00 00       	jmp    217c30 <readInt.49+0x140>
  217ba0:	48 8d 7d df          	lea    rdi,[rbp-0x21]
  217ba4:	be aa 00 00 00       	mov    esi,0xaa
  217ba9:	b8 01 00 00 00       	mov    eax,0x1
  217bae:	89 c2                	mov    edx,eax
            for (bytes) |b, index| {
  217bb0:	e8 fb a0 00 00       	call   221cb0 <memset>
  217bb5:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
  217bbc:	00 
  217bbd:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  217bc1:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
  217bc5:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  217bc9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  217bcd:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  217bd1:	48 39 c8             	cmp    rax,rcx
  217bd4:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  217bd8:	73 44                	jae    217c1e <readInt.49+0x12e>
  217bda:	b8 08 00 00 00       	mov    eax,0x8
  217bdf:	89 c1                	mov    ecx,eax
  217be1:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  217be5:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
  217be8:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  217bec:	44 8a 04 3e          	mov    r8b,BYTE PTR [rsi+rdi*1]
  217bf0:	44 88 45 df          	mov    BYTE PTR [rbp-0x21],r8b
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  217bf4:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  217bf8:	0f b6 45 df          	movzx  eax,BYTE PTR [rbp-0x21]
  217bfc:	41 89 c1             	mov    r9d,eax
  217bff:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  217c03:	48 f7 e1             	mul    rcx
  217c06:	41 0f 90 c0          	seto   r8b
  217c0a:	4c 89 4d 98          	mov    QWORD PTR [rbp-0x68],r9
  217c0e:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
  217c12:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  217c16:	44 88 45 87          	mov    BYTE PTR [rbp-0x79],r8b
  217c1a:	70 21                	jo     217c3d <readInt.49+0x14d>
  217c1c:	eb 2f                	jmp    217c4d <readInt.49+0x15d>
    switch (endian) {
  217c1e:	eb 10                	jmp    217c30 <readInt.49+0x140>
  217c20:	48 8d 3d 99 d7 00 00 	lea    rdi,[rip+0xd799]        # 2253c0 <__unnamed_7>
  217c27:	31 c0                	xor    eax,eax
  217c29:	89 c6                	mov    esi,eax
  217c2b:	e8 90 b4 fe ff       	call   2030c0 <panic>
    return result;
  217c30:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  217c34:	48 81 c4 80 00 00 00 	add    rsp,0x80
  217c3b:	5d                   	pop    rbp
  217c3c:	c3                   	ret    
  217c3d:	48 8d 3d d4 d6 00 00 	lea    rdi,[rip+0xd6d4]        # 225318 <__unnamed_5>
  217c44:	31 c0                	xor    eax,eax
  217c46:	89 c6                	mov    esi,eax
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  217c48:	e8 73 b4 fe ff       	call   2030c0 <panic>
  217c4d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  217c51:	88 c1                	mov    cl,al
  217c53:	89 c2                	mov    edx,eax
  217c55:	83 e2 3f             	and    edx,0x3f
  217c58:	89 d6                	mov    esi,edx
  217c5a:	48 39 f0             	cmp    rax,rsi
  217c5d:	88 4d 86             	mov    BYTE PTR [rbp-0x7a],cl
  217c60:	75 2b                	jne    217c8d <readInt.49+0x19d>
  217c62:	8a 45 86             	mov    al,BYTE PTR [rbp-0x7a]
  217c65:	24 3f                	and    al,0x3f
  217c67:	0f b6 c8             	movzx  ecx,al
  217c6a:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  217c6e:	48 d3 e2             	shl    rdx,cl
  217c71:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  217c75:	48 09 d6             	or     rsi,rdx
  217c78:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
            for (bytes) |b, index| {
  217c7c:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  217c80:	48 83 c2 01          	add    rdx,0x1
  217c84:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  217c88:	e9 3c ff ff ff       	jmp    217bc9 <readInt.49+0xd9>
  217c8d:	48 8d 3d 14 d7 00 00 	lea    rdi,[rip+0xd714]        # 2253a8 <__unnamed_8>
  217c94:	31 c0                	xor    eax,eax
  217c96:	89 c6                	mov    esi,eax
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  217c98:	e8 23 b4 fe ff       	call   2030c0 <panic>
  217c9d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000217ca0 <format.50>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  217ca0:	55                   	push   rbp
  217ca1:	48 89 e5             	mov    rbp,rsp
  217ca4:	48 83 ec 30          	sub    rsp,0x30
  217ca8:	48 8d 05 79 d9 00 00 	lea    rax,[rip+0xd979]        # 225628 <__unnamed_119>
  217caf:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  217cb3:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  217cb7:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
                        try output(context, fmt[start_index..i]);
  217cbb:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  217cbf:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  217cc3:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  217cc7:	48 89 c2             	mov    rdx,rax
  217cca:	ff d1                	call   rcx
  217ccc:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  217cd0:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  217cd5:	74 1b                	je     217cf2 <format.50+0x52>
  217cd7:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  217cdb:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  217cdf:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  217ce3:	e8 68 c7 fe ff       	call   204450 <__zig_return_error>
  217ce8:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  217cec:	48 83 c4 30          	add    rsp,0x30
  217cf0:	5d                   	pop    rbp
  217cf1:	c3                   	ret    
                    try formatType(args[next_arg], fmt[s..i], context, Errors, output);
  217cf2:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  217cf6:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  217cfa:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  217cfe:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  217d02:	e8 79 00 00 00       	call   217d80 <formatType.51>
  217d07:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  217d0b:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  217d10:	74 1b                	je     217d2d <format.50+0x8d>
  217d12:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  217d16:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  217d1a:	66 89 45 d4          	mov    WORD PTR [rbp-0x2c],ax
  217d1e:	e8 2d c7 fe ff       	call   204450 <__zig_return_error>
  217d23:	66 8b 45 d4          	mov    ax,WORD PTR [rbp-0x2c]
  217d27:	48 83 c4 30          	add    rsp,0x30
  217d2b:	5d                   	pop    rbp
  217d2c:	c3                   	ret    
  217d2d:	48 8d 15 0c d9 00 00 	lea    rdx,[rip+0xd90c]        # 225640 <__unnamed_120>
        try output(context, fmt[start_index..]);
  217d34:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  217d38:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  217d3c:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  217d40:	ff d0                	call   rax
  217d42:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  217d46:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  217d4b:	74 1b                	je     217d68 <format.50+0xc8>
  217d4d:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  217d51:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  217d55:	66 89 45 d2          	mov    WORD PTR [rbp-0x2e],ax
  217d59:	e8 f2 c6 fe ff       	call   204450 <__zig_return_error>
  217d5e:	66 8b 45 d2          	mov    ax,WORD PTR [rbp-0x2e]
  217d62:	48 83 c4 30          	add    rsp,0x30
  217d66:	5d                   	pop    rbp
  217d67:	c3                   	ret    
  217d68:	31 c0                	xor    eax,eax
  217d6a:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  217d6d:	66 89 c8             	mov    ax,cx
  217d70:	48 83 c4 30          	add    rsp,0x30
  217d74:	5d                   	pop    rbp
  217d75:	c3                   	ret    
  217d76:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  217d7d:	00 00 00 

0000000000217d80 <formatType.51>:
pub fn formatType(
  217d80:	55                   	push   rbp
  217d81:	48 89 e5             	mov    rbp,rsp
  217d84:	48 83 ec 30          	sub    rsp,0x30
  217d88:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  217d8c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  217d90:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return formatValue(value, fmt, context, Errors, output);
  217d94:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  217d98:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  217d9c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  217da0:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  217da4:	e8 e7 67 00 00       	call   21e590 <formatValue.87>
  217da9:	66 83 f8 00          	cmp    ax,0x0
  217dad:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  217db1:	74 0b                	je     217dbe <formatType.51+0x3e>
  217db3:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  217db7:	e8 94 c6 fe ff       	call   204450 <__zig_return_error>
  217dbc:	eb 02                	jmp    217dc0 <formatType.51+0x40>
  217dbe:	eb 00                	jmp    217dc0 <formatType.51+0x40>
  217dc0:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  217dc4:	48 83 c4 30          	add    rsp,0x30
  217dc8:	5d                   	pop    rbp
  217dc9:	c3                   	ret    
  217dca:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000217dd0 <format.52>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  217dd0:	55                   	push   rbp
  217dd1:	48 89 e5             	mov    rbp,rsp
  217dd4:	48 83 ec 30          	sub    rsp,0x30
  217dd8:	48 8d 05 79 d8 00 00 	lea    rax,[rip+0xd879]        # 225658 <__unnamed_121>
  217ddf:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  217de3:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  217de7:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
                        try output(context, fmt[start_index..i]);
  217deb:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  217def:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  217df3:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  217df7:	48 89 c2             	mov    rdx,rax
  217dfa:	ff d1                	call   rcx
  217dfc:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  217e00:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  217e05:	74 1b                	je     217e22 <format.52+0x52>
  217e07:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  217e0b:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  217e0f:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  217e13:	e8 38 c6 fe ff       	call   204450 <__zig_return_error>
  217e18:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  217e1c:	48 83 c4 30          	add    rsp,0x30
  217e20:	5d                   	pop    rbp
  217e21:	c3                   	ret    
                    try formatType(args[next_arg], fmt[s..i], context, Errors, output);
  217e22:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  217e26:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  217e2a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  217e2e:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  217e32:	e8 79 00 00 00       	call   217eb0 <formatType.53>
  217e37:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  217e3b:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  217e40:	74 1b                	je     217e5d <format.52+0x8d>
  217e42:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  217e46:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  217e4a:	66 89 45 d4          	mov    WORD PTR [rbp-0x2c],ax
  217e4e:	e8 fd c5 fe ff       	call   204450 <__zig_return_error>
  217e53:	66 8b 45 d4          	mov    ax,WORD PTR [rbp-0x2c]
  217e57:	48 83 c4 30          	add    rsp,0x30
  217e5b:	5d                   	pop    rbp
  217e5c:	c3                   	ret    
  217e5d:	48 8d 15 0c d8 00 00 	lea    rdx,[rip+0xd80c]        # 225670 <__unnamed_122>
        try output(context, fmt[start_index..]);
  217e64:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  217e68:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  217e6c:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  217e70:	ff d0                	call   rax
  217e72:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  217e76:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  217e7b:	74 1b                	je     217e98 <format.52+0xc8>
  217e7d:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  217e81:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  217e85:	66 89 45 d2          	mov    WORD PTR [rbp-0x2e],ax
  217e89:	e8 c2 c5 fe ff       	call   204450 <__zig_return_error>
  217e8e:	66 8b 45 d2          	mov    ax,WORD PTR [rbp-0x2e]
  217e92:	48 83 c4 30          	add    rsp,0x30
  217e96:	5d                   	pop    rbp
  217e97:	c3                   	ret    
  217e98:	31 c0                	xor    eax,eax
  217e9a:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  217e9d:	66 89 c8             	mov    ax,cx
  217ea0:	48 83 c4 30          	add    rsp,0x30
  217ea4:	5d                   	pop    rbp
  217ea5:	c3                   	ret    
  217ea6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  217ead:	00 00 00 

0000000000217eb0 <formatType.53>:
pub fn formatType(
  217eb0:	55                   	push   rbp
  217eb1:	48 89 e5             	mov    rbp,rsp
  217eb4:	48 83 ec 30          	sub    rsp,0x30
  217eb8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  217ebc:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  217ec0:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return formatValue(value, fmt, context, Errors, output);
  217ec4:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  217ec8:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  217ecc:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  217ed0:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  217ed4:	e8 07 67 00 00       	call   21e5e0 <formatValue.88>
  217ed9:	66 83 f8 00          	cmp    ax,0x0
  217edd:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  217ee1:	74 0b                	je     217eee <formatType.53+0x3e>
  217ee3:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  217ee7:	e8 64 c5 fe ff       	call   204450 <__zig_return_error>
  217eec:	eb 02                	jmp    217ef0 <formatType.53+0x40>
  217eee:	eb 00                	jmp    217ef0 <formatType.53+0x40>
  217ef0:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  217ef4:	48 83 c4 30          	add    rsp,0x30
  217ef8:	5d                   	pop    rbp
  217ef9:	c3                   	ret    
  217efa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000217f00 <getString>:
fn getString(st: *ElfStackTrace, offset: u64) ![]u8 {
  217f00:	55                   	push   rbp
  217f01:	48 89 e5             	mov    rbp,rsp
  217f04:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  217f0b:	48 89 f8             	mov    rax,rdi
  217f0e:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
  217f12:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
    const pos = st.debug_str.offset + offset;
  217f16:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  217f1a:	48 8b 49 70          	mov    rcx,QWORD PTR [rcx+0x70]
  217f1e:	48 8b 49 18          	mov    rcx,QWORD PTR [rcx+0x18]
  217f22:	48 03 4d b8          	add    rcx,QWORD PTR [rbp-0x48]
  217f26:	41 0f 92 c0          	setb   r8b
  217f2a:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  217f2e:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  217f32:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
  217f36:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
  217f3a:	44 88 45 8f          	mov    BYTE PTR [rbp-0x71],r8b
  217f3e:	0f 82 93 00 00 00    	jb     217fd7 <getString+0xd7>
  217f44:	e9 9e 00 00 00       	jmp    217fe7 <getString+0xe7>
    try st.self_exe_file.seekTo(pos);
  217f49:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  217f4d:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  217f51:	66 89 45 8c          	mov    WORD PTR [rbp-0x74],ax
  217f55:	e8 f6 c4 fe ff       	call   204450 <__zig_return_error>
  217f5a:	66 8b 45 8c          	mov    ax,WORD PTR [rbp-0x74]
  217f5e:	66 89 45 e0          	mov    WORD PTR [rbp-0x20],ax
  217f62:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  217f66:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  217f6a:	48 89 39             	mov    QWORD PTR [rcx],rdi
  217f6d:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  217f71:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  217f75:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  217f79:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  217f7d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  217f81:	48 81 c4 80 00 00 00 	add    rsp,0x80
  217f88:	5d                   	pop    rbp
  217f89:	c3                   	ret    
  217f8a:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
    return st.readString();
  217f8e:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  217f92:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  217f96:	e8 85 00 00 00       	call   218020 <ElfStackTrace_readString>
  217f9b:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  217fa0:	74 0b                	je     217fad <getString+0xad>
  217fa2:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  217fa6:	e8 a5 c4 fe ff       	call   204450 <__zig_return_error>
  217fab:	eb 02                	jmp    217faf <getString+0xaf>
  217fad:	eb 00                	jmp    217faf <getString+0xaf>
  217faf:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  217fb3:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  217fb7:	48 89 01             	mov    QWORD PTR [rcx],rax
  217fba:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  217fbe:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  217fc2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  217fc6:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  217fca:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  217fce:	48 81 c4 80 00 00 00 	add    rsp,0x80
  217fd5:	5d                   	pop    rbp
  217fd6:	c3                   	ret    
  217fd7:	48 8d 3d 3a d3 00 00 	lea    rdi,[rip+0xd33a]        # 225318 <__unnamed_5>
  217fde:	31 c0                	xor    eax,eax
  217fe0:	89 c6                	mov    esi,eax
    const pos = st.debug_str.offset + offset;
  217fe2:	e8 d9 b0 fe ff       	call   2030c0 <panic>
  217fe7:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  217feb:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
    try st.self_exe_file.seekTo(pos);
  217fef:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
  217ff3:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  217ff7:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  217ffb:	e8 70 2b ff ff       	call   20ab70 <File_seekTo>
  218000:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  218004:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  218009:	0f 85 3a ff ff ff    	jne    217f49 <getString+0x49>
  21800f:	e9 76 ff ff ff       	jmp    217f8a <getString+0x8a>
  218014:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21801b:	00 00 00 00 00 

0000000000218020 <ElfStackTrace_readString>:
        pub fn readString(self: *ElfStackTrace) ![]u8 {
  218020:	55                   	push   rbp
  218021:	48 89 e5             	mov    rbp,rsp
  218024:	48 83 ec 60          	sub    rsp,0x60
  218028:	48 89 f8             	mov    rax,rdi
  21802b:	48 8d 4d f0          	lea    rcx,[rbp-0x10]
  21802f:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            var in_file_stream = io.FileInStream.init(&self.self_exe_file);
  218033:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  218037:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  21803b:	48 89 cf             	mov    rdi,rcx
  21803e:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  218042:	48 89 d6             	mov    rsi,rdx
  218045:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  218049:	e8 42 22 ff ff       	call   20a290 <FileInStream_init>
  21804e:	48 8d 45 c0          	lea    rax,[rbp-0x40]
  218052:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  218056:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
  21805a:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  21805e:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
            const in_stream = &in_file_stream.stream;
  218062:	48 83 c0 08          	add    rax,0x8
  218066:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
            return readStringRaw(self.allocator(), in_stream);
  21806a:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  21806e:	e8 0d 44 ff ff       	call   20c480 <ElfStackTrace_allocator>
  218073:	48 8d 7d d8          	lea    rdi,[rbp-0x28]
  218077:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  21807b:	48 8b 75 a8          	mov    rsi,QWORD PTR [rbp-0x58]
  21807f:	48 89 c2             	mov    rdx,rax
  218082:	e8 e9 a4 ff ff       	call   212570 <readStringRaw>
  218087:	66 83 7d d8 00       	cmp    WORD PTR [rbp-0x28],0x0
  21808c:	74 0b                	je     218099 <ElfStackTrace_readString+0x79>
  21808e:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  218092:	e8 b9 c3 fe ff       	call   204450 <__zig_return_error>
  218097:	eb 02                	jmp    21809b <ElfStackTrace_readString+0x7b>
  218099:	eb 00                	jmp    21809b <ElfStackTrace_readString+0x7b>
  21809b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21809f:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  2180a3:	48 89 01             	mov    QWORD PTR [rcx],rax
  2180a6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2180aa:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2180ae:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2180b2:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  2180b6:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2180ba:	48 83 c4 60          	add    rsp,0x60
  2180be:	5d                   	pop    rbp
  2180bf:	c3                   	ret    

00000000002180c0 <AlignedArrayList(u8,1)_init>:
        pub fn init(allocator: *Allocator) Self {
  2180c0:	55                   	push   rbp
  2180c1:	48 89 e5             	mov    rbp,rsp
  2180c4:	48 89 f8             	mov    rax,rdi
  2180c7:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
                .allocator = allocator,
  2180cb:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
            return Self{
  2180cf:	48 8b 0d ea a1 fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffea1ea]        # 2022c0 <__unnamed_123>
  2180d6:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  2180da:	48 8b 0d e7 a1 fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffea1e7]        # 2022c8 <__unnamed_123+0x8>
  2180e1:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  2180e5:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  2180ec:	00 
  2180ed:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2180f1:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  2180f5:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  2180f8:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2180fc:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  218100:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  218104:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  218108:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  21810c:	48 89 4f 18          	mov    QWORD PTR [rdi+0x18],rcx
  218110:	5d                   	pop    rbp
  218111:	c3                   	ret    
  218112:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  218119:	1f 84 00 00 00 00 00 

0000000000218120 <AlignedArrayList(u8,1)_append>:
        pub fn append(self: *Self, item: T) !void {
  218120:	55                   	push   rbp
  218121:	48 89 e5             	mov    rbp,rsp
  218124:	48 83 ec 50          	sub    rsp,0x50
  218128:	88 d0                	mov    al,dl
  21812a:	48 8d 4d f0          	lea    rcx,[rbp-0x10]
  21812e:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  218132:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
            const new_item_ptr = try self.addOne();
  218135:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  218139:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
  21813d:	48 89 cf             	mov    rdi,rcx
  218140:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
  218144:	e8 e7 00 00 00       	call   218230 <AlignedArrayList(u8,1)_addOne>
  218149:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  21814e:	74 1b                	je     21816b <AlignedArrayList(u8,1)_append+0x4b>
  218150:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  218154:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  218158:	66 89 45 be          	mov    WORD PTR [rbp-0x42],ax
  21815c:	e8 ef c2 fe ff       	call   204450 <__zig_return_error>
  218161:	66 8b 45 be          	mov    ax,WORD PTR [rbp-0x42]
  218165:	48 83 c4 50          	add    rsp,0x50
  218169:	5d                   	pop    rbp
  21816a:	c3                   	ret    
  21816b:	31 c0                	xor    eax,eax
  21816d:	66 89 c1             	mov    cx,ax
  218170:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  218174:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
            new_item_ptr.* = item;
  218178:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  21817c:	40 8a 75 d7          	mov    sil,BYTE PTR [rbp-0x29]
  218180:	40 88 32             	mov    BYTE PTR [rdx],sil
        pub fn append(self: *Self, item: T) !void {
  218183:	66 89 c8             	mov    ax,cx
  218186:	48 83 c4 50          	add    rsp,0x50
  21818a:	5d                   	pop    rbp
  21818b:	c3                   	ret    
  21818c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000218190 <AlignedArrayList(u8,1)_toSlice>:
        pub fn toSlice(self: Self) []align(A) T {
  218190:	55                   	push   rbp
  218191:	48 89 e5             	mov    rbp,rsp
  218194:	48 83 ec 40          	sub    rsp,0x40
  218198:	48 89 f8             	mov    rax,rdi
  21819b:	31 c9                	xor    ecx,ecx
  21819d:	89 ca                	mov    edx,ecx
            return self.items[0..self.len];
  21819f:	4c 8b 46 10          	mov    r8,QWORD PTR [rsi+0x10]
  2181a3:	4c 8b 4e 08          	mov    r9,QWORD PTR [rsi+0x8]
  2181a7:	4c 39 c2             	cmp    rdx,r8
  2181aa:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  2181ae:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  2181b2:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  2181b6:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
  2181ba:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
  2181be:	76 10                	jbe    2181d0 <AlignedArrayList(u8,1)_toSlice+0x40>
  2181c0:	48 8d 3d 39 d1 00 00 	lea    rdi,[rip+0xd139]        # 225300 <__unnamed_4>
  2181c7:	31 c0                	xor    eax,eax
  2181c9:	89 c6                	mov    esi,eax
  2181cb:	e8 f0 ae fe ff       	call   2030c0 <panic>
  2181d0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2181d4:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  2181d8:	48 39 c8             	cmp    rax,rcx
  2181db:	76 10                	jbe    2181ed <AlignedArrayList(u8,1)_toSlice+0x5d>
  2181dd:	48 8d 3d 1c d1 00 00 	lea    rdi,[rip+0xd11c]        # 225300 <__unnamed_4>
  2181e4:	31 c0                	xor    eax,eax
  2181e6:	89 c6                	mov    esi,eax
  2181e8:	e8 d3 ae fe ff       	call   2030c0 <panic>
  2181ed:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2181f1:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  2181f4:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  2181f8:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  2181fc:	48 83 e9 00          	sub    rcx,0x0
  218200:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  218204:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  218208:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  21820c:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  21820f:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  218213:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  218217:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21821b:	48 83 c4 40          	add    rsp,0x40
  21821f:	5d                   	pop    rbp
  218220:	c3                   	ret    
  218221:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  218228:	0f 1f 84 00 00 00 00 
  21822f:	00 

0000000000218230 <AlignedArrayList(u8,1)_addOne>:
        pub fn addOne(self: *Self) !*T {
  218230:	55                   	push   rbp
  218231:	48 89 e5             	mov    rbp,rsp
  218234:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  21823b:	48 89 f8             	mov    rax,rdi
  21823e:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            const new_length = self.len + 1;
  218242:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  218246:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  21824a:	48 83 c2 01          	add    rdx,0x1
  21824e:	0f 92 c1             	setb   cl
  218251:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  218255:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  218259:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  21825d:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  218261:	88 4d 9f             	mov    BYTE PTR [rbp-0x61],cl
  218264:	72 57                	jb     2182bd <AlignedArrayList(u8,1)_addOne+0x8d>
  218266:	eb 65                	jmp    2182cd <AlignedArrayList(u8,1)_addOne+0x9d>
            try self.ensureCapacity(new_length);
  218268:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  21826c:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  218270:	66 89 45 9c          	mov    WORD PTR [rbp-0x64],ax
  218274:	e8 d7 c1 fe ff       	call   204450 <__zig_return_error>
  218279:	66 8b 45 9c          	mov    ax,WORD PTR [rbp-0x64]
  21827d:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  218281:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  218285:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  218289:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21828c:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  218290:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  218294:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  218298:	48 81 c4 80 00 00 00 	add    rsp,0x80
  21829f:	5d                   	pop    rbp
  2182a0:	c3                   	ret    
            const result = &self.items[self.len];
  2182a1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2182a5:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  2182a9:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
  2182ad:	48 3b 48 08          	cmp    rcx,QWORD PTR [rax+0x8]
  2182b1:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  2182b5:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
  2182b9:	72 4c                	jb     218307 <AlignedArrayList(u8,1)_addOne+0xd7>
  2182bb:	eb 3a                	jmp    2182f7 <AlignedArrayList(u8,1)_addOne+0xc7>
  2182bd:	48 8d 3d 54 d0 00 00 	lea    rdi,[rip+0xd054]        # 225318 <__unnamed_5>
  2182c4:	31 c0                	xor    eax,eax
  2182c6:	89 c6                	mov    esi,eax
            const new_length = self.len + 1;
  2182c8:	e8 f3 ad fe ff       	call   2030c0 <panic>
  2182cd:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2182d1:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
            try self.ensureCapacity(new_length);
  2182d5:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  2182d9:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  2182dd:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  2182e1:	e8 6a 00 00 00       	call   218350 <AlignedArrayList(u8,1)_ensureCapacity>
  2182e6:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  2182ea:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  2182ef:	0f 85 73 ff ff ff    	jne    218268 <AlignedArrayList(u8,1)_addOne+0x38>
  2182f5:	eb aa                	jmp    2182a1 <AlignedArrayList(u8,1)_addOne+0x71>
  2182f7:	48 8d 3d 02 d0 00 00 	lea    rdi,[rip+0xd002]        # 225300 <__unnamed_4>
  2182fe:	31 c0                	xor    eax,eax
  218300:	89 c6                	mov    esi,eax
            const result = &self.items[self.len];
  218302:	e8 b9 ad fe ff       	call   2030c0 <panic>
  218307:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  21830b:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  21830f:	48 03 01             	add    rax,QWORD PTR [rcx]
  218312:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
            self.len = new_length;
  218316:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  21831a:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  21831e:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
            return result;
  218322:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  218326:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  21832c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  218330:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  218334:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  218338:	48 89 02             	mov    QWORD PTR [rdx],rax
  21833b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  21833f:	48 89 42 08          	mov    QWORD PTR [rdx+0x8],rax
  218343:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  218347:	48 81 c4 80 00 00 00 	add    rsp,0x80
  21834e:	5d                   	pop    rbp
  21834f:	c3                   	ret    

0000000000218350 <AlignedArrayList(u8,1)_ensureCapacity>:
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  218350:	55                   	push   rbp
  218351:	48 89 e5             	mov    rbp,rsp
  218354:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  21835b:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  21835f:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
            var better_capacity = self.items.len;
  218363:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  218367:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  21836b:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
            if (better_capacity >= new_capacity) return;
  21836f:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  218373:	48 3b 55 c0          	cmp    rdx,QWORD PTR [rbp-0x40]
  218377:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  21837b:	72 11                	jb     21838e <AlignedArrayList(u8,1)_ensureCapacity+0x3e>
  21837d:	31 c0                	xor    eax,eax
  21837f:	66 89 c1             	mov    cx,ax
  218382:	66 89 c8             	mov    ax,cx
  218385:	48 81 c4 90 00 00 00 	add    rsp,0x90
  21838c:	5d                   	pop    rbp
  21838d:	c3                   	ret    
            while (true) {
  21838e:	eb 00                	jmp    218390 <AlignedArrayList(u8,1)_ensureCapacity+0x40>
  218390:	eb 00                	jmp    218392 <AlignedArrayList(u8,1)_ensureCapacity+0x42>
  218392:	31 c0                	xor    eax,eax
  218394:	88 c1                	mov    cl,al
                better_capacity += better_capacity / 2 + 8;
  218396:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  21839a:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  21839e:	f6 c1 01             	test   cl,0x1
  2183a1:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  2183a5:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  2183a9:	0f 85 8e 00 00 00    	jne    21843d <AlignedArrayList(u8,1)_ensureCapacity+0xed>
  2183af:	eb 72                	jmp    218423 <AlignedArrayList(u8,1)_ensureCapacity+0xd3>
                if (better_capacity >= new_capacity) break;
  2183b1:	eb 02                	jmp    2183b5 <AlignedArrayList(u8,1)_ensureCapacity+0x65>
            while (true) {
  2183b3:	eb db                	jmp    218390 <AlignedArrayList(u8,1)_ensureCapacity+0x40>
  2183b5:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
            self.items = try self.allocator.alignedRealloc(T, A, self.items, better_capacity);
  2183b9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2183bd:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  2183c1:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
  2183c5:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  2183c9:	4c 8b 45 b8          	mov    r8,QWORD PTR [rbp-0x48]
  2183cd:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  2183d1:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  2183d5:	e8 d6 00 00 00       	call   2184b0 <Allocator_alignedRealloc.54>
  2183da:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  2183df:	74 1e                	je     2183ff <AlignedArrayList(u8,1)_ensureCapacity+0xaf>
  2183e1:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  2183e5:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  2183e9:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  2183ed:	e8 5e c0 fe ff       	call   204450 <__zig_return_error>
  2183f2:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  2183f6:	48 81 c4 90 00 00 00 	add    rsp,0x90
  2183fd:	5d                   	pop    rbp
  2183fe:	c3                   	ret    
  2183ff:	31 c0                	xor    eax,eax
  218401:	66 89 c1             	mov    cx,ax
  218404:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  218408:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  21840c:	48 89 16             	mov    QWORD PTR [rsi],rdx
  21840f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  218413:	48 89 56 08          	mov    QWORD PTR [rsi+0x8],rdx
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  218417:	66 89 c8             	mov    ax,cx
  21841a:	48 81 c4 90 00 00 00 	add    rsp,0x90
  218421:	5d                   	pop    rbp
  218422:	c3                   	ret    
                better_capacity += better_capacity / 2 + 8;
  218423:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  218427:	48 c1 e8 01          	shr    rax,0x1
  21842b:	48 83 c0 08          	add    rax,0x8
  21842f:	0f 92 c1             	setb   cl
  218432:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  218436:	88 4d 87             	mov    BYTE PTR [rbp-0x79],cl
  218439:	72 12                	jb     21844d <AlignedArrayList(u8,1)_ensureCapacity+0xfd>
  21843b:	eb 20                	jmp    21845d <AlignedArrayList(u8,1)_ensureCapacity+0x10d>
  21843d:	48 8d 3d 34 d1 00 00 	lea    rdi,[rip+0xd134]        # 225578 <__unnamed_73>
  218444:	31 c0                	xor    eax,eax
  218446:	89 c6                	mov    esi,eax
  218448:	e8 73 ac fe ff       	call   2030c0 <panic>
  21844d:	48 8d 3d c4 ce 00 00 	lea    rdi,[rip+0xcec4]        # 225318 <__unnamed_5>
  218454:	31 c0                	xor    eax,eax
  218456:	89 c6                	mov    esi,eax
  218458:	e8 63 ac fe ff       	call   2030c0 <panic>
  21845d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  218461:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  218465:	48 01 c8             	add    rax,rcx
  218468:	0f 92 c2             	setb   dl
  21846b:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  218472:	88 95 77 ff ff ff    	mov    BYTE PTR [rbp-0x89],dl
  218478:	72 02                	jb     21847c <AlignedArrayList(u8,1)_ensureCapacity+0x12c>
  21847a:	eb 10                	jmp    21848c <AlignedArrayList(u8,1)_ensureCapacity+0x13c>
  21847c:	48 8d 3d 95 ce 00 00 	lea    rdi,[rip+0xce95]        # 225318 <__unnamed_5>
  218483:	31 c0                	xor    eax,eax
  218485:	89 c6                	mov    esi,eax
  218487:	e8 34 ac fe ff       	call   2030c0 <panic>
  21848c:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  218493:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                if (better_capacity >= new_capacity) break;
  218497:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  21849b:	48 3b 4d c0          	cmp    rcx,QWORD PTR [rbp-0x40]
  21849f:	0f 83 0c ff ff ff    	jae    2183b1 <AlignedArrayList(u8,1)_ensureCapacity+0x61>
  2184a5:	e9 09 ff ff ff       	jmp    2183b3 <AlignedArrayList(u8,1)_ensureCapacity+0x63>
  2184aa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000002184b0 <Allocator_alignedRealloc.54>:
    pub fn alignedRealloc(self: *Allocator, comptime T: type, comptime alignment: u29, old_mem: []align(alignment) T, n: usize) ![]align(alignment) T {
  2184b0:	55                   	push   rbp
  2184b1:	48 89 e5             	mov    rbp,rsp
  2184b4:	53                   	push   rbx
  2184b5:	48 81 ec 88 01 00 00 	sub    rsp,0x188
  2184bc:	48 89 f8             	mov    rax,rdi
  2184bf:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
  2184c6:	4c 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],r8
        if (old_mem.len == 0) {
  2184cd:	48 83 79 08 00       	cmp    QWORD PTR [rcx+0x8],0x0
  2184d2:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  2184d9:	48 89 b5 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rsi
  2184e0:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
  2184e7:	48 89 bd b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rdi
  2184ee:	75 64                	jne    218554 <Allocator_alignedRealloc.54+0xa4>
  2184f0:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
            return self.alignedAlloc(T, alignment, n);
  2184f4:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  2184fb:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  218502:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  218509:	e8 c2 03 00 00       	call   2188d0 <Allocator_alignedAlloc.55>
  21850e:	66 83 7d e0 00       	cmp    WORD PTR [rbp-0x20],0x0
  218513:	74 0e                	je     218523 <Allocator_alignedRealloc.54+0x73>
  218515:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  21851c:	e8 2f bf fe ff       	call   204450 <__zig_return_error>
  218521:	eb 02                	jmp    218525 <Allocator_alignedRealloc.54+0x75>
  218523:	eb 00                	jmp    218525 <Allocator_alignedRealloc.54+0x75>
  218525:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  218529:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  218530:	48 89 01             	mov    QWORD PTR [rcx],rax
  218533:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  218537:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21853b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21853f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  218543:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21854a:	48 81 c4 88 01 00 00 	add    rsp,0x188
  218551:	5b                   	pop    rbx
  218552:	5d                   	pop    rbp
  218553:	c3                   	ret    
        if (old_mem.len == 0) {
  218554:	eb 00                	jmp    218556 <Allocator_alignedRealloc.54+0xa6>
        if (n == 0) {
  218556:	48 83 bd 10 ff ff ff 	cmp    QWORD PTR [rbp-0xf0],0x0
  21855d:	00 
  21855e:	75 4b                	jne    2185ab <Allocator_alignedRealloc.54+0xfb>
            self.free(old_mem);
  218560:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
  218567:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  21856e:	e8 1d 06 00 00       	call   218b90 <Allocator_free.56>
            return ([*]align(alignment) T)(undefined)[0..0];
  218573:	48 8b 35 ce 86 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffe86ce]        # 200c48 <__unnamed_124>
  21857a:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  218581:	48 89 37             	mov    QWORD PTR [rdi],rsi
  218584:	48 8b 35 c5 86 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffe86c5]        # 200c50 <__unnamed_124+0x8>
  21858b:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  21858f:	48 8b 35 c2 86 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffe86c2]        # 200c58 <__unnamed_124+0x10>
  218596:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  21859a:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  2185a1:	48 81 c4 88 01 00 00 	add    rsp,0x188
  2185a8:	5b                   	pop    rbx
  2185a9:	5d                   	pop    rbp
  2185aa:	c3                   	ret    
        if (n == 0) {
  2185ab:	eb 00                	jmp    2185ad <Allocator_alignedRealloc.54+0xfd>
  2185ad:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  2185b1:	b8 01 00 00 00       	mov    eax,0x1
  2185b6:	89 c2                	mov    edx,eax
        const old_byte_slice = @sliceToBytes(old_mem);
  2185b8:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  2185bf:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  2185c2:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  2185c6:	48 8b 71 08          	mov    rsi,QWORD PTR [rcx+0x8]
  2185ca:	48 c1 e6 00          	shl    rsi,0x0
  2185ce:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  2185d2:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  2185d6:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
  2185dd:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  2185e1:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  2185e8:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  2185ef:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  2185f6:	e8 35 36 ff ff       	call   20bc30 <mul>
  2185fb:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  218600:	74 44                	je     218646 <Allocator_alignedRealloc.54+0x196>
  218602:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  218609:	e8 42 be fe ff       	call   204450 <__zig_return_error>
  21860e:	48 8b 3d 4b 86 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe864b]        # 200c60 <__unnamed_125>
  218615:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  21861c:	48 89 38             	mov    QWORD PTR [rax],rdi
  21861f:	48 8b 3d 42 86 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe8642]        # 200c68 <__unnamed_125+0x8>
  218626:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  21862a:	48 8b 3d 3f 86 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe863f]        # 200c70 <__unnamed_125+0x10>
  218631:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  218635:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21863c:	48 81 c4 88 01 00 00 	add    rsp,0x188
  218643:	5b                   	pop    rbx
  218644:	5d                   	pop    rbp
  218645:	c3                   	ret    
  218646:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21864a:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  218651:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  218655:	48 8d 8d 00 ff ff ff 	lea    rcx,[rbp-0x100]
  21865c:	41 b9 01 00 00 00    	mov    r9d,0x1
  218662:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  218669:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
        const byte_slice = try self.reallocFn(self, old_byte_slice, byte_count, alignment);
  218670:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  218677:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  21867b:	48 8b b5 18 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe8]
  218682:	4c 8b 85 f8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x108]
  218689:	4c 8b 95 c8 fe ff ff 	mov    r10,QWORD PTR [rbp-0x138]
  218690:	48 89 b5 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rsi
  218697:	4c 89 d6             	mov    rsi,r10
  21869a:	4c 8b 9d a8 fe ff ff 	mov    r11,QWORD PTR [rbp-0x158]
  2186a1:	48 89 95 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdx
  2186a8:	4c 89 da             	mov    rdx,r11
  2186ab:	48 8b 9d a0 fe ff ff 	mov    rbx,QWORD PTR [rbp-0x160]
  2186b2:	ff d3                	call   rbx
  2186b4:	66 83 7d 98 00       	cmp    WORD PTR [rbp-0x68],0x0
  2186b9:	74 5d                	je     218718 <Allocator_alignedRealloc.54+0x268>
  2186bb:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  2186bf:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  2186c6:	66 89 85 9e fe ff ff 	mov    WORD PTR [rbp-0x162],ax
  2186cd:	e8 7e bd fe ff       	call   204450 <__zig_return_error>
  2186d2:	66 8b 85 9e fe ff ff 	mov    ax,WORD PTR [rbp-0x162]
  2186d9:	66 89 85 68 ff ff ff 	mov    WORD PTR [rbp-0x98],ax
  2186e0:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  2186e7:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  2186ee:	48 89 39             	mov    QWORD PTR [rcx],rdi
  2186f1:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  2186f8:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  2186fc:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  218703:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  218707:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21870e:	48 81 c4 88 01 00 00 	add    rsp,0x188
  218715:	5b                   	pop    rbx
  218716:	5d                   	pop    rbp
  218717:	c3                   	ret    
  218718:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  21871c:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  218723:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  218727:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
        assert(byte_slice.len == byte_count);
  21872e:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  218735:	48 3b 85 f8 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x108]
  21873c:	0f 94 c1             	sete   cl
  21873f:	0f b6 f9             	movzx  edi,cl
  218742:	e8 b9 a8 fe ff       	call   203000 <assert>
        if (n > old_mem.len) {
  218747:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  21874e:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  218755:	48 3b 42 08          	cmp    rax,QWORD PTR [rdx+0x8]
  218759:	76 78                	jbe    2187d3 <Allocator_alignedRealloc.54+0x323>
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  21875b:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  218762:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  218769:	48 39 c8             	cmp    rax,rcx
  21876c:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  218773:	48 89 8d 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rcx
  21877a:	0f 86 e2 00 00 00    	jbe    218862 <Allocator_alignedRealloc.54+0x3b2>
  218780:	e9 cd 00 00 00       	jmp    218852 <Allocator_alignedRealloc.54+0x3a2>
  218785:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  21878c:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
  218793:	48 39 c8             	cmp    rax,rcx
  218796:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  21879d:	73 32                	jae    2187d1 <Allocator_alignedRealloc.54+0x321>
  21879f:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  2187a6:	48 03 8d 58 ff ff ff 	add    rcx,QWORD PTR [rbp-0xa8]
  2187ad:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
                byte.* = undefined;
  2187b4:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  2187bb:	88 01                	mov    BYTE PTR [rcx],al
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  2187bd:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  2187c4:	48 83 c1 01          	add    rcx,0x1
  2187c8:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
  2187cf:	eb b4                	jmp    218785 <Allocator_alignedRealloc.54+0x2d5>
        if (n > old_mem.len) {
  2187d1:	eb 02                	jmp    2187d5 <Allocator_alignedRealloc.54+0x325>
  2187d3:	eb 00                	jmp    2187d5 <Allocator_alignedRealloc.54+0x325>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  2187d5:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  2187dc:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
  2187e3:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  2187ea:	48 c1 e0 00          	shl    rax,0x0
  2187ee:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  2187f5:	66 c7 85 20 ff ff ff 	mov    WORD PTR [rbp-0xe0],0x0
  2187fc:	00 00 
  2187fe:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  218805:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  21880c:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  218813:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  21881a:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  218821:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  218828:	48 89 01             	mov    QWORD PTR [rcx],rax
  21882b:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  218832:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  218836:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21883d:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  218841:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  218848:	48 81 c4 88 01 00 00 	add    rsp,0x188
  21884f:	5b                   	pop    rbx
  218850:	5d                   	pop    rbp
  218851:	c3                   	ret    
  218852:	48 8d 3d a7 ca 00 00 	lea    rdi,[rip+0xcaa7]        # 225300 <__unnamed_4>
  218859:	31 c0                	xor    eax,eax
  21885b:	89 c6                	mov    esi,eax
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  21885d:	e8 5e a8 fe ff       	call   2030c0 <panic>
  218862:	be aa 00 00 00       	mov    esi,0xaa
  218867:	b8 08 00 00 00       	mov    eax,0x8
  21886c:	89 c2                	mov    edx,eax
  21886e:	48 8d 8d e0 fe ff ff 	lea    rcx,[rbp-0x120]
  218875:	48 8b bd 90 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x170]
  21887c:	48 03 bd e8 fe ff ff 	add    rdi,QWORD PTR [rbp-0x118]
  218883:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
  21888a:	48 8b bd 88 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x178]
  218891:	4c 8b 85 90 fe ff ff 	mov    r8,QWORD PTR [rbp-0x170]
  218898:	4c 29 c7             	sub    rdi,r8
  21889b:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  2188a2:	48 89 cf             	mov    rdi,rcx
  2188a5:	e8 06 94 00 00       	call   221cb0 <memset>
  2188aa:	48 c7 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],0x0
  2188b1:	00 00 00 00 
  2188b5:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  2188bc:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  2188c3:	e9 bd fe ff ff       	jmp    218785 <Allocator_alignedRealloc.54+0x2d5>
  2188c8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  2188cf:	00 

00000000002188d0 <Allocator_alignedAlloc.55>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  2188d0:	55                   	push   rbp
  2188d1:	48 89 e5             	mov    rbp,rsp
  2188d4:	48 81 ec 10 01 00 00 	sub    rsp,0x110
  2188db:	48 89 f8             	mov    rax,rdi
  2188de:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  2188e5:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  2188ec:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  2188f3:	00 
  2188f4:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  2188fb:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  218902:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  218909:	75 37                	jne    218942 <Allocator_alignedAlloc.55+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  21890b:	48 8b 05 66 83 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe8366]        # 200c78 <__unnamed_126>
  218912:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  218919:	48 89 01             	mov    QWORD PTR [rcx],rax
  21891c:	48 8b 05 5d 83 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe835d]        # 200c80 <__unnamed_126+0x8>
  218923:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  218927:	48 8b 05 5a 83 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe835a]        # 200c88 <__unnamed_126+0x10>
  21892e:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  218932:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  218939:	48 81 c4 10 01 00 00 	add    rsp,0x110
  218940:	5d                   	pop    rbp
  218941:	c3                   	ret    
        if (n == 0) {
  218942:	eb 00                	jmp    218944 <Allocator_alignedAlloc.55+0x74>
  218944:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  218948:	b8 01 00 00 00       	mov    eax,0x1
  21894d:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  21894f:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  218956:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21895d:	e8 ce 32 ff ff       	call   20bc30 <mul>
  218962:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  218967:	74 43                	je     2189ac <Allocator_alignedAlloc.55+0xdc>
  218969:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  218970:	e8 db ba fe ff       	call   204450 <__zig_return_error>
  218975:	48 8b 3d 14 83 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe8314]        # 200c90 <__unnamed_127>
  21897c:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  218983:	48 89 38             	mov    QWORD PTR [rax],rdi
  218986:	48 8b 3d 0b 83 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe830b]        # 200c98 <__unnamed_127+0x8>
  21898d:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  218991:	48 8b 3d 08 83 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe8308]        # 200ca0 <__unnamed_127+0x10>
  218998:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  21899c:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  2189a3:	48 81 c4 10 01 00 00 	add    rsp,0x110
  2189aa:	5d                   	pop    rbp
  2189ab:	c3                   	ret    
  2189ac:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2189b0:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  2189b7:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  2189bb:	41 b8 01 00 00 00    	mov    r8d,0x1
  2189c1:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  2189c8:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  2189cf:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  2189d6:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  2189d9:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  2189e0:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  2189e7:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  2189ee:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  2189f5:	4c 89 ce             	mov    rsi,r9
  2189f8:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  2189ff:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  218a06:	4c 89 d1             	mov    rcx,r10
  218a09:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  218a10:	41 ff d3             	call   r11
  218a13:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  218a18:	74 50                	je     218a6a <Allocator_alignedAlloc.55+0x19a>
  218a1a:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  218a1e:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  218a25:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  218a2c:	e8 1f ba fe ff       	call   204450 <__zig_return_error>
  218a31:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  218a38:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  218a3c:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  218a40:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  218a47:	48 89 39             	mov    QWORD PTR [rcx],rdi
  218a4a:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  218a4e:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  218a52:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  218a56:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  218a5a:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  218a61:	48 81 c4 10 01 00 00 	add    rsp,0x110
  218a68:	5d                   	pop    rbp
  218a69:	c3                   	ret    
  218a6a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  218a6e:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  218a75:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  218a79:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  218a80:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  218a87:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  218a8e:	0f 94 c1             	sete   cl
  218a91:	0f b6 f9             	movzx  edi,cl
  218a94:	e8 67 a5 fe ff       	call   203000 <assert>
  218a99:	be aa 00 00 00       	mov    esi,0xaa
  218a9e:	bf 08 00 00 00       	mov    edi,0x8
  218aa3:	89 fa                	mov    edx,edi
  218aa5:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  218aac:	48 89 c7             	mov    rdi,rax
  218aaf:	e8 fc 91 00 00       	call   221cb0 <memset>
  218ab4:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  218abb:	00 00 00 00 
  218abf:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  218ac6:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  218acd:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  218ad4:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  218adb:	48 39 c8             	cmp    rax,rcx
  218ade:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  218ae5:	73 32                	jae    218b19 <Allocator_alignedAlloc.55+0x249>
  218ae7:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  218aee:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  218af5:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  218afc:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  218b03:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  218b05:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  218b0c:	48 83 c1 01          	add    rcx,0x1
  218b10:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  218b17:	eb b4                	jmp    218acd <Allocator_alignedAlloc.55+0x1fd>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  218b19:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  218b20:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  218b24:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  218b2b:	48 c1 e0 00          	shl    rax,0x0
  218b2f:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  218b33:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  218b3a:	00 00 
  218b3c:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  218b40:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  218b47:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  218b4b:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  218b4f:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  218b56:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  218b5d:	48 89 01             	mov    QWORD PTR [rcx],rax
  218b60:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  218b67:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  218b6b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  218b6f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  218b73:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  218b7a:	48 81 c4 10 01 00 00 	add    rsp,0x110
  218b81:	5d                   	pop    rbp
  218b82:	c3                   	ret    
  218b83:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  218b8a:	84 00 00 00 00 00 

0000000000218b90 <Allocator_free.56>:
    pub fn free(self: *Allocator, memory: var) void {
  218b90:	55                   	push   rbp
  218b91:	48 89 e5             	mov    rbp,rsp
  218b94:	48 83 ec 60          	sub    rsp,0x60
  218b98:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
        const bytes = @sliceToBytes(memory);
  218b9c:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  218b9f:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  218ba3:	48 8b 76 08          	mov    rsi,QWORD PTR [rsi+0x8]
  218ba7:	48 c1 e6 00          	shl    rsi,0x0
  218bab:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  218baf:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  218bb3:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  218bb7:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  218bbb:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        if (bytes.len == 0) return;
  218bbf:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
  218bc4:	75 06                	jne    218bcc <Allocator_free.56+0x3c>
  218bc6:	48 83 c4 60          	add    rsp,0x60
  218bca:	5d                   	pop    rbp
  218bcb:	c3                   	ret    
  218bcc:	31 c0                	xor    eax,eax
  218bce:	89 c1                	mov    ecx,eax
        const non_const_ptr = @intToPtr([*]u8, @ptrToInt(bytes.ptr));
  218bd0:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  218bd4:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
        self.freeFn(self, non_const_ptr[0..bytes.len]);
  218bd8:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  218bdc:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  218be0:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  218be4:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  218be8:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
  218bec:	48 39 f1             	cmp    rcx,rsi
  218bef:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
  218bf3:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
  218bf7:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  218bfb:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  218bff:	76 10                	jbe    218c11 <Allocator_free.56+0x81>
  218c01:	48 8d 3d f8 c6 00 00 	lea    rdi,[rip+0xc6f8]        # 225300 <__unnamed_4>
  218c08:	31 c0                	xor    eax,eax
  218c0a:	89 c6                	mov    esi,eax
  218c0c:	e8 af a4 fe ff       	call   2030c0 <panic>
  218c11:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
  218c15:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  218c19:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  218c1d:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  218c21:	48 83 e9 00          	sub    rcx,0x0
  218c25:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  218c29:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  218c2d:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  218c31:	ff d1                	call   rcx
    pub fn free(self: *Allocator, memory: var) void {
  218c33:	48 83 c4 60          	add    rsp,0x60
  218c37:	5d                   	pop    rbp
  218c38:	c3                   	ret    
  218c39:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000218c40 <InStream(ReadError)_readByteSigned>:
        pub fn readByteSigned(self: *Self) !i8 {
  218c40:	55                   	push   rbp
  218c41:	48 89 e5             	mov    rbp,rsp
  218c44:	48 83 ec 50          	sub    rsp,0x50
  218c48:	48 89 f8             	mov    rax,rdi
  218c4b:	48 8d 4d f8          	lea    rcx,[rbp-0x8]
  218c4f:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
            return @bitCast(i8, try self.readByte());
  218c53:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  218c57:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
  218c5b:	48 89 cf             	mov    rdi,rcx
  218c5e:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  218c62:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  218c66:	e8 d5 17 ff ff       	call   20a440 <InStream(ReadError)_readByte>
  218c6b:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  218c70:	74 2c                	je     218c9e <InStream(ReadError)_readByteSigned+0x5e>
  218c72:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  218c76:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  218c7a:	66 89 45 be          	mov    WORD PTR [rbp-0x42],ax
  218c7e:	e8 cd b7 fe ff       	call   204450 <__zig_return_error>
  218c83:	66 8b 45 be          	mov    ax,WORD PTR [rbp-0x42]
  218c87:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  218c8b:	8b 4d e8             	mov    ecx,DWORD PTR [rbp-0x18]
  218c8e:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  218c92:	89 0f                	mov    DWORD PTR [rdi],ecx
  218c94:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  218c98:	48 83 c4 50          	add    rsp,0x50
  218c9c:	5d                   	pop    rbp
  218c9d:	c3                   	ret    
  218c9e:	8a 45 fa             	mov    al,BYTE PTR [rbp-0x6]
  218ca1:	66 c7 45 e0 00 00    	mov    WORD PTR [rbp-0x20],0x0
  218ca7:	88 45 e2             	mov    BYTE PTR [rbp-0x1e],al
  218caa:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
  218cad:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  218cb1:	89 0a                	mov    DWORD PTR [rdx],ecx
  218cb3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  218cb7:	48 83 c4 50          	add    rsp,0x50
  218cbb:	5d                   	pop    rbp
  218cbc:	c3                   	ret    
  218cbd:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000218cc0 <Allocator_alloc.57>:
    pub fn alloc(self: *Allocator, comptime T: type, n: usize) ![]T {
  218cc0:	55                   	push   rbp
  218cc1:	48 89 e5             	mov    rbp,rsp
  218cc4:	48 83 ec 40          	sub    rsp,0x40
  218cc8:	48 89 f8             	mov    rax,rdi
  218ccb:	4c 8d 45 e8          	lea    r8,[rbp-0x18]
  218ccf:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  218cd3:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
        return self.alignedAlloc(T, @alignOf(T), n);
  218cd7:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  218cdb:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  218cdf:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
  218ce3:	4c 89 c7             	mov    rdi,r8
  218ce6:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  218cea:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  218cee:	e8 dd fb ff ff       	call   2188d0 <Allocator_alignedAlloc.55>
  218cf3:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  218cf8:	74 0b                	je     218d05 <Allocator_alloc.57+0x45>
  218cfa:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  218cfe:	e8 4d b7 fe ff       	call   204450 <__zig_return_error>
  218d03:	eb 02                	jmp    218d07 <Allocator_alloc.57+0x47>
  218d05:	eb 00                	jmp    218d07 <Allocator_alloc.57+0x47>
  218d07:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  218d0b:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  218d0f:	48 89 01             	mov    QWORD PTR [rcx],rax
  218d12:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  218d16:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  218d1a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  218d1e:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  218d22:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  218d26:	48 83 c4 40          	add    rsp,0x40
  218d2a:	5d                   	pop    rbp
  218d2b:	c3                   	ret    
  218d2c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000218d30 <AlignedArrayList([]u8,8)_init>:
        pub fn init(allocator: *Allocator) Self {
  218d30:	55                   	push   rbp
  218d31:	48 89 e5             	mov    rbp,rsp
  218d34:	48 89 f8             	mov    rax,rdi
  218d37:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
                .allocator = allocator,
  218d3b:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
            return Self{
  218d3f:	48 8b 0d 7a 95 fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe957a]        # 2022c0 <__unnamed_123>
  218d46:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  218d4a:	48 8b 0d 77 95 fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe9577]        # 2022c8 <__unnamed_123+0x8>
  218d51:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  218d55:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  218d5c:	00 
  218d5d:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  218d61:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  218d65:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  218d68:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  218d6c:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  218d70:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  218d74:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  218d78:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  218d7c:	48 89 4f 18          	mov    QWORD PTR [rdi+0x18],rcx
  218d80:	5d                   	pop    rbp
  218d81:	c3                   	ret    
  218d82:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  218d89:	1f 84 00 00 00 00 00 

0000000000218d90 <AlignedArrayList([]u8,8)_append>:
        pub fn append(self: *Self, item: T) !void {
  218d90:	55                   	push   rbp
  218d91:	48 89 e5             	mov    rbp,rsp
  218d94:	48 83 ec 50          	sub    rsp,0x50
  218d98:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  218d9c:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
            const new_item_ptr = try self.addOne();
  218da0:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  218da4:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  218da8:	48 89 c7             	mov    rdi,rax
  218dab:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  218daf:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
  218db3:	48 89 c6             	mov    rsi,rax
  218db6:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  218dba:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  218dbe:	48 89 ca             	mov    rdx,rcx
  218dc1:	e8 fa 0b 00 00       	call   2199c0 <AlignedArrayList([]u8,8)_addOne>
  218dc6:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  218dcb:	74 1b                	je     218de8 <AlignedArrayList([]u8,8)_append+0x58>
  218dcd:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  218dd1:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  218dd5:	66 89 45 b6          	mov    WORD PTR [rbp-0x4a],ax
  218dd9:	e8 72 b6 fe ff       	call   204450 <__zig_return_error>
  218dde:	66 8b 45 b6          	mov    ax,WORD PTR [rbp-0x4a]
  218de2:	48 83 c4 50          	add    rsp,0x50
  218de6:	5d                   	pop    rbp
  218de7:	c3                   	ret    
  218de8:	31 c0                	xor    eax,eax
  218dea:	66 89 c1             	mov    cx,ax
  218ded:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  218df1:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            new_item_ptr.* = item;
  218df5:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  218df9:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  218dfd:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  218e00:	48 89 3a             	mov    QWORD PTR [rdx],rdi
  218e03:	48 8b 7e 08          	mov    rdi,QWORD PTR [rsi+0x8]
  218e07:	48 89 7a 08          	mov    QWORD PTR [rdx+0x8],rdi
        pub fn append(self: *Self, item: T) !void {
  218e0b:	66 89 c8             	mov    ax,cx
  218e0e:	48 83 c4 50          	add    rsp,0x50
  218e12:	5d                   	pop    rbp
  218e13:	c3                   	ret    
  218e14:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  218e1b:	00 00 00 00 00 

0000000000218e20 <AlignedArrayList(FileEntry,8)_init>:
        pub fn init(allocator: *Allocator) Self {
  218e20:	55                   	push   rbp
  218e21:	48 89 e5             	mov    rbp,rsp
  218e24:	48 89 f8             	mov    rax,rdi
  218e27:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
                .allocator = allocator,
  218e2b:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
            return Self{
  218e2f:	48 8b 0d 8a 94 fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe948a]        # 2022c0 <__unnamed_123>
  218e36:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  218e3a:	48 8b 0d 87 94 fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe9487]        # 2022c8 <__unnamed_123+0x8>
  218e41:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  218e45:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  218e4c:	00 
  218e4d:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  218e51:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  218e55:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  218e58:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  218e5c:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  218e60:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  218e64:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  218e68:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  218e6c:	48 89 4f 18          	mov    QWORD PTR [rdi+0x18],rcx
  218e70:	5d                   	pop    rbp
  218e71:	c3                   	ret    
  218e72:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  218e79:	1f 84 00 00 00 00 00 

0000000000218e80 <AlignedArrayList([]u8,8)_toSliceConst>:
        pub fn toSliceConst(self: Self) []align(A) const T {
  218e80:	55                   	push   rbp
  218e81:	48 89 e5             	mov    rbp,rsp
  218e84:	48 83 ec 40          	sub    rsp,0x40
  218e88:	48 89 f8             	mov    rax,rdi
  218e8b:	31 c9                	xor    ecx,ecx
  218e8d:	89 ca                	mov    edx,ecx
            return self.items[0..self.len];
  218e8f:	4c 8b 46 10          	mov    r8,QWORD PTR [rsi+0x10]
  218e93:	4c 8b 4e 08          	mov    r9,QWORD PTR [rsi+0x8]
  218e97:	4c 39 c2             	cmp    rdx,r8
  218e9a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  218e9e:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  218ea2:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  218ea6:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
  218eaa:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
  218eae:	76 10                	jbe    218ec0 <AlignedArrayList([]u8,8)_toSliceConst+0x40>
  218eb0:	48 8d 3d 49 c4 00 00 	lea    rdi,[rip+0xc449]        # 225300 <__unnamed_4>
  218eb7:	31 c0                	xor    eax,eax
  218eb9:	89 c6                	mov    esi,eax
  218ebb:	e8 00 a2 fe ff       	call   2030c0 <panic>
  218ec0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  218ec4:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  218ec8:	48 39 c8             	cmp    rax,rcx
  218ecb:	76 10                	jbe    218edd <AlignedArrayList([]u8,8)_toSliceConst+0x5d>
  218ecd:	48 8d 3d 2c c4 00 00 	lea    rdi,[rip+0xc42c]        # 225300 <__unnamed_4>
  218ed4:	31 c0                	xor    eax,eax
  218ed6:	89 c6                	mov    esi,eax
  218ed8:	e8 e3 a1 fe ff       	call   2030c0 <panic>
  218edd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  218ee1:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  218ee4:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  218ee8:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  218eec:	48 83 e9 00          	sub    rcx,0x0
  218ef0:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  218ef4:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  218ef8:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  218efc:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  218eff:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  218f03:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  218f07:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  218f0b:	48 83 c4 40          	add    rsp,0x40
  218f0f:	5d                   	pop    rbp
  218f10:	c3                   	ret    
  218f11:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  218f18:	0f 1f 84 00 00 00 00 
  218f1f:	00 

0000000000218f20 <LineNumberProgram_init>:
    pub fn init(is_stmt: bool, include_dirs: []const []const u8, file_entries: *ArrayList(FileEntry), target_address: usize) LineNumberProgram {
  218f20:	55                   	push   rbp
  218f21:	48 89 e5             	mov    rbp,rsp
  218f24:	41 56                	push   r14
  218f26:	53                   	push   rbx
  218f27:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  218f2e:	40 88 f0             	mov    al,sil
  218f31:	49 89 f9             	mov    r9,rdi
  218f34:	be 70 00 00 00       	mov    esi,0x70
  218f39:	41 89 f2             	mov    r10d,esi
  218f3c:	4c 8d 5d 80          	lea    r11,[rbp-0x80]
  218f40:	24 01                	and    al,0x1
  218f42:	88 85 7f ff ff ff    	mov    BYTE PTR [rbp-0x81],al
  218f48:	48 89 8d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rcx
  218f4f:	4c 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],r8
            .is_stmt = is_stmt,
  218f56:	8a 85 7f ff ff ff    	mov    al,BYTE PTR [rbp-0x81]
            .file_entries = file_entries,
  218f5c:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
            .target_address = target_address,
  218f63:	4c 8b 85 68 ff ff ff 	mov    r8,QWORD PTR [rbp-0x98]
        return LineNumberProgram{
  218f6a:	48 c7 45 80 00 00 00 	mov    QWORD PTR [rbp-0x80],0x0
  218f71:	00 
  218f72:	48 c7 45 88 01 00 00 	mov    QWORD PTR [rbp-0x78],0x1
  218f79:	00 
  218f7a:	48 c7 45 90 01 00 00 	mov    QWORD PTR [rbp-0x70],0x1
  218f81:	00 
  218f82:	48 c7 45 98 00 00 00 	mov    QWORD PTR [rbp-0x68],0x0
  218f89:	00 
  218f8a:	24 01                	and    al,0x1
  218f8c:	88 45 a0             	mov    BYTE PTR [rbp-0x60],al
  218f8f:	c6 45 a1 00          	mov    BYTE PTR [rbp-0x5f],0x0
  218f93:	c6 45 a2 00          	mov    BYTE PTR [rbp-0x5e],0x0
  218f97:	4c 89 45 a8          	mov    QWORD PTR [rbp-0x58],r8
  218f9b:	4c 8b 02             	mov    r8,QWORD PTR [rdx]
  218f9e:	4c 89 45 b0          	mov    QWORD PTR [rbp-0x50],r8
  218fa2:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  218fa6:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  218faa:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
  218fae:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
  218fb5:	00 
  218fb6:	4c 89 75 d0          	mov    QWORD PTR [rbp-0x30],r14
  218fba:	4c 89 75 d8          	mov    QWORD PTR [rbp-0x28],r14
  218fbe:	4c 89 75 e0          	mov    QWORD PTR [rbp-0x20],r14
  218fc2:	88 d8                	mov    al,bl
  218fc4:	24 01                	and    al,0x1
  218fc6:	88 45 e8             	mov    BYTE PTR [rbp-0x18],al
  218fc9:	88 d8                	mov    al,bl
  218fcb:	24 01                	and    al,0x1
  218fcd:	88 45 e9             	mov    BYTE PTR [rbp-0x17],al
  218fd0:	80 e3 01             	and    bl,0x1
  218fd3:	88 5d ea             	mov    BYTE PTR [rbp-0x16],bl
  218fd6:	4c 89 de             	mov    rsi,r11
  218fd9:	4c 89 d2             	mov    rdx,r10
  218fdc:	4c 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r9
  218fe3:	e8 18 8d 00 00       	call   221d00 <memcpy>
  218fe8:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  218fef:	48 81 c4 90 00 00 00 	add    rsp,0x90
  218ff6:	5b                   	pop    rbx
  218ff7:	41 5e                	pop    r14
  218ff9:	5d                   	pop    rbp
  218ffa:	c3                   	ret    
  218ffb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000219000 <AlignedArrayList(FileEntry,8)_append>:
        pub fn append(self: *Self, item: T) !void {
  219000:	55                   	push   rbp
  219001:	48 89 e5             	mov    rbp,rsp
  219004:	48 83 ec 60          	sub    rsp,0x60
  219008:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  21900c:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
            const new_item_ptr = try self.addOne();
  219010:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  219014:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  219018:	48 89 c7             	mov    rdi,rax
  21901b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21901f:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
  219023:	48 89 c6             	mov    rsi,rax
  219026:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  21902a:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  21902e:	48 89 ca             	mov    rdx,rcx
  219031:	e8 4a 14 00 00       	call   21a480 <AlignedArrayList(FileEntry,8)_addOne>
  219036:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  21903b:	74 1b                	je     219058 <AlignedArrayList(FileEntry,8)_append+0x58>
  21903d:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  219041:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  219045:	66 89 45 b6          	mov    WORD PTR [rbp-0x4a],ax
  219049:	e8 02 b4 fe ff       	call   204450 <__zig_return_error>
  21904e:	66 8b 45 b6          	mov    ax,WORD PTR [rbp-0x4a]
  219052:	48 83 c4 60          	add    rsp,0x60
  219056:	5d                   	pop    rbp
  219057:	c3                   	ret    
  219058:	31 c0                	xor    eax,eax
  21905a:	66 89 c1             	mov    cx,ax
  21905d:	b8 28 00 00 00       	mov    eax,0x28
  219062:	89 c2                	mov    edx,eax
  219064:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  219068:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
            new_item_ptr.* = item;
  21906c:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  219070:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  219074:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  219078:	48 89 f7             	mov    rdi,rsi
  21907b:	48 8b 75 a8          	mov    rsi,QWORD PTR [rbp-0x58]
  21907f:	66 89 4d a6          	mov    WORD PTR [rbp-0x5a],cx
  219083:	e8 78 8c 00 00       	call   221d00 <memcpy>
        pub fn append(self: *Self, item: T) !void {
  219088:	66 8b 45 a6          	mov    ax,WORD PTR [rbp-0x5a]
  21908c:	48 83 c4 60          	add    rsp,0x60
  219090:	5d                   	pop    rbp
  219091:	c3                   	ret    
  219092:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  219099:	1f 84 00 00 00 00 00 

00000000002190a0 <cast.58>:
pub fn cast(comptime T: type, x: var) (error{Overflow}!T) {
  2190a0:	55                   	push   rbp
  2190a1:	48 89 e5             	mov    rbp,rsp
  2190a4:	48 83 ec 30          	sub    rsp,0x30
  2190a8:	48 89 f8             	mov    rax,rdi
  2190ab:	48 b9 ff ff ff ff ff 	movabs rcx,0x7fffffffffffffff
  2190b2:	ff ff 7f 
  2190b5:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    if (@maxValue(@typeOf(x)) > @maxValue(T) and x > @maxValue(T)) {
  2190b9:	48 39 4d e8          	cmp    QWORD PTR [rbp-0x18],rcx
  2190bd:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  2190c1:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  2190c5:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  2190c9:	76 2c                	jbe    2190f7 <cast.58+0x57>
        return error.Overflow;
  2190cb:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  2190cf:	e8 7c b3 fe ff       	call   204450 <__zig_return_error>
  2190d4:	48 8b 3d 45 92 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe9245]        # 202320 <__unnamed_130>
  2190db:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2190df:	48 89 38             	mov    QWORD PTR [rax],rdi
  2190e2:	48 8b 3d 3f 92 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe923f]        # 202328 <__unnamed_130+0x8>
  2190e9:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  2190ed:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2190f1:	48 83 c4 30          	add    rsp,0x30
  2190f5:	5d                   	pop    rbp
  2190f6:	c3                   	ret    
        return @intCast(T, x);
  2190f7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2190fb:	66 c7 45 f0 00 00    	mov    WORD PTR [rbp-0x10],0x0
  219101:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  219105:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  219109:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  21910d:	48 89 01             	mov    QWORD PTR [rcx],rax
  219110:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  219114:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  219118:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  21911c:	48 83 c4 30          	add    rsp,0x30
  219120:	5d                   	pop    rbp
  219121:	c3                   	ret    
  219122:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  219129:	1f 84 00 00 00 00 00 

0000000000219130 <LineNumberProgram_checkLineMatch>:
    pub fn checkLineMatch(self: *LineNumberProgram) !?LineInfo {
  219130:	55                   	push   rbp
  219131:	48 89 e5             	mov    rbp,rsp
  219134:	53                   	push   rbx
  219135:	48 81 ec e8 01 00 00 	sub    rsp,0x1e8
  21913c:	48 89 f8             	mov    rax,rdi
  21913f:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
        if (self.target_address >= self.prev_address and self.target_address < self.address) {
  219146:	48 8b 95 f8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x108]
  21914d:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
  219151:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  219158:	48 3b 51 48          	cmp    rdx,QWORD PTR [rcx+0x48]
  21915c:	41 0f 93 c0          	setae  r8b
  219160:	41 f6 c0 01          	test   r8b,0x1
  219164:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
  21916b:	48 89 bd c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rdi
  219172:	48 89 b5 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rsi
  219179:	44 88 85 b7 fe ff ff 	mov    BYTE PTR [rbp-0x149],r8b
  219180:	75 02                	jne    219184 <LineNumberProgram_checkLineMatch+0x54>
  219182:	eb 1e                	jmp    2191a2 <LineNumberProgram_checkLineMatch+0x72>
  219184:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  21918b:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
  21918f:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  219196:	48 3b 01             	cmp    rax,QWORD PTR [rcx]
  219199:	0f 92 c2             	setb   dl
  21919c:	88 95 b7 fe ff ff    	mov    BYTE PTR [rbp-0x149],dl
  2191a2:	8a 85 b7 fe ff ff    	mov    al,BYTE PTR [rbp-0x149]
  2191a8:	a8 01                	test   al,0x1
  2191aa:	75 05                	jne    2191b1 <LineNumberProgram_checkLineMatch+0x81>
  2191ac:	e9 b0 03 00 00       	jmp    219561 <LineNumberProgram_checkLineMatch+0x431>
            const file_entry = if (self.prev_file == 0) {
  2191b1:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  2191b8:	48 83 78 50 00       	cmp    QWORD PTR [rax+0x50],0x0
  2191bd:	75 48                	jne    219207 <LineNumberProgram_checkLineMatch+0xd7>
                return error.MissingDebugInfo;
  2191bf:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  2191c6:	e8 85 b2 fe ff       	call   204450 <__zig_return_error>
  2191cb:	48 8d 3d 46 7d fe ff 	lea    rdi,[rip+0xfffffffffffe7d46]        # 200f18 <__unnamed_131>
  2191d2:	b8 38 00 00 00       	mov    eax,0x38
  2191d7:	89 c2                	mov    edx,eax
  2191d9:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  2191e0:	48 89 bd a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rdi
  2191e7:	48 89 cf             	mov    rdi,rcx
  2191ea:	48 8b b5 a8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x158]
  2191f1:	e8 0a 8b 00 00       	call   221d00 <memcpy>
  2191f6:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  2191fd:	48 81 c4 e8 01 00 00 	add    rsp,0x1e8
  219204:	5b                   	pop    rbx
  219205:	5d                   	pop    rbp
  219206:	c3                   	ret    
            } else if (self.prev_file - 1 >= self.file_entries.len) {
  219207:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  21920e:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
  219212:	48 83 e8 01          	sub    rax,0x1
  219216:	0f 92 c1             	setb   cl
  219219:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
  219220:	88 8d 9f fe ff ff    	mov    BYTE PTR [rbp-0x161],cl
  219226:	0f 82 0d 04 00 00    	jb     219639 <LineNumberProgram_checkLineMatch+0x509>
  21922c:	e9 18 04 00 00       	jmp    219649 <LineNumberProgram_checkLineMatch+0x519>
                return error.InvalidDebugInfo;
  219231:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  219238:	e8 13 b2 fe ff       	call   204450 <__zig_return_error>
  21923d:	48 8d 3d 0c 7d fe ff 	lea    rdi,[rip+0xfffffffffffe7d0c]        # 200f50 <__unnamed_132>
  219244:	b8 38 00 00 00       	mov    eax,0x38
  219249:	89 c2                	mov    edx,eax
  21924b:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  219252:	48 89 bd 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rdi
  219259:	48 89 cf             	mov    rdi,rcx
  21925c:	48 8b b5 90 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x170]
  219263:	e8 98 8a 00 00       	call   221d00 <memcpy>
  219268:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  21926f:	48 81 c4 e8 01 00 00 	add    rsp,0x1e8
  219276:	5b                   	pop    rbx
  219277:	5d                   	pop    rbp
  219278:	c3                   	ret    
                &self.file_entries.items[self.prev_file - 1];
  219279:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  219280:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  219284:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  21928b:	48 8b 49 50          	mov    rcx,QWORD PTR [rcx+0x50]
  21928f:	48 83 e9 01          	sub    rcx,0x1
  219293:	0f 92 c2             	setb   dl
  219296:	48 89 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rax
  21929d:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  2192a4:	88 95 7f fe ff ff    	mov    BYTE PTR [rbp-0x181],dl
  2192aa:	0f 82 ba 03 00 00    	jb     21966a <LineNumberProgram_checkLineMatch+0x53a>
  2192b0:	e9 c5 03 00 00       	jmp    21967a <LineNumberProgram_checkLineMatch+0x54a>
            const file_entry = if (self.prev_file == 0) {
  2192b5:	eb 00                	jmp    2192b7 <LineNumberProgram_checkLineMatch+0x187>
  2192b7:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  2192be:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
            const dir_name = if (file_entry.dir_index >= self.include_dirs.len) {
  2192c5:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  2192cc:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
  2192d0:	48 8b 95 f8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x108]
  2192d7:	48 3b 4a 38          	cmp    rcx,QWORD PTR [rdx+0x38]
  2192db:	72 48                	jb     219325 <LineNumberProgram_checkLineMatch+0x1f5>
                return error.InvalidDebugInfo;
  2192dd:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  2192e4:	e8 67 b1 fe ff       	call   204450 <__zig_return_error>
  2192e9:	48 8d 3d 98 7c fe ff 	lea    rdi,[rip+0xfffffffffffe7c98]        # 200f88 <__unnamed_133>
  2192f0:	b8 38 00 00 00       	mov    eax,0x38
  2192f5:	89 c2                	mov    edx,eax
  2192f7:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  2192fe:	48 89 bd 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rdi
  219305:	48 89 cf             	mov    rdi,rcx
  219308:	48 8b b5 68 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x198]
  21930f:	e8 ec 89 00 00       	call   221d00 <memcpy>
  219314:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  21931b:	48 81 c4 e8 01 00 00 	add    rsp,0x1e8
  219322:	5b                   	pop    rbx
  219323:	5d                   	pop    rbp
  219324:	c3                   	ret    
                self.include_dirs[file_entry.dir_index];
  219325:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  21932c:	48 89 c1             	mov    rcx,rax
  21932f:	48 83 c1 30          	add    rcx,0x30
  219333:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  21933a:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  21933e:	48 3b 50 38          	cmp    rdx,QWORD PTR [rax+0x38]
  219342:	48 89 95 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rdx
  219349:	48 89 8d 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rcx
  219350:	0f 82 79 03 00 00    	jb     2196cf <LineNumberProgram_checkLineMatch+0x59f>
  219356:	e9 64 03 00 00       	jmp    2196bf <LineNumberProgram_checkLineMatch+0x58f>
  21935b:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
  21935f:	48 8d 8d e0 fe ff ff 	lea    rcx,[rbp-0x120]
            const dir_name = if (file_entry.dir_index >= self.include_dirs.len) {
  219366:	48 8b 85 50 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b0]
  21936d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  219370:	48 89 95 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rdx
  219377:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
  21937b:	48 89 95 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdx
            const file_name = try os.path.join(self.file_entries.allocator, dir_name, file_entry.file_name);
  219382:	48 8b 95 f8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x108]
  219389:	48 8b 52 40          	mov    rdx,QWORD PTR [rdx+0x40]
  21938d:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
  219391:	4c 8b 85 f0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x110]
  219398:	48 8b b5 b8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x148]
  21939f:	e8 bc 1b 00 00       	call   21af60 <join>
  2193a4:	66 83 7d e0 00       	cmp    WORD PTR [rbp-0x20],0x0
  2193a9:	74 5b                	je     219406 <LineNumberProgram_checkLineMatch+0x2d6>
  2193ab:	66 8b 45 e0          	mov    ax,WORD PTR [rbp-0x20]
  2193af:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  2193b6:	66 89 85 4e fe ff ff 	mov    WORD PTR [rbp-0x1b2],ax
  2193bd:	e8 8e b0 fe ff       	call   204450 <__zig_return_error>
  2193c2:	b9 38 00 00 00       	mov    ecx,0x38
  2193c7:	89 ca                	mov    edx,ecx
  2193c9:	48 8d 7d 90          	lea    rdi,[rbp-0x70]
  2193cd:	66 8b 85 4e fe ff ff 	mov    ax,WORD PTR [rbp-0x1b2]
  2193d4:	66 89 45 90          	mov    WORD PTR [rbp-0x70],ax
  2193d8:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  2193df:	48 89 bd 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rdi
  2193e6:	48 89 f7             	mov    rdi,rsi
  2193e9:	48 8b b5 40 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1c0]
  2193f0:	e8 0b 89 00 00       	call   221d00 <memcpy>
  2193f5:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  2193fc:	48 81 c4 e8 01 00 00 	add    rsp,0x1e8
  219403:	5b                   	pop    rbx
  219404:	5d                   	pop    rbp
  219405:	c3                   	ret    
  219406:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21940a:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  219411:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  219415:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
                .line = if (self.prev_line >= 0) @intCast(usize, self.prev_line) else 0,
  21941c:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  219423:	48 83 78 58 00       	cmp    QWORD PTR [rax+0x58],0x0
  219428:	7c 21                	jl     21944b <LineNumberProgram_checkLineMatch+0x31b>
  21942a:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  219431:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
  219435:	48 83 f8 00          	cmp    rax,0x0
  219439:	48 89 85 38 fe ff ff 	mov    QWORD PTR [rbp-0x1c8],rax
  219440:	0f 8d aa 02 00 00    	jge    2196f0 <LineNumberProgram_checkLineMatch+0x5c0>
  219446:	e9 b8 02 00 00       	jmp    219703 <LineNumberProgram_checkLineMatch+0x5d3>
  21944b:	31 c0                	xor    eax,eax
  21944d:	89 c1                	mov    ecx,eax
  21944f:	48 89 8d 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rcx
  219456:	eb 00                	jmp    219458 <LineNumberProgram_checkLineMatch+0x328>
  219458:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  21945f:	b9 38 00 00 00       	mov    ecx,0x38
  219464:	89 ca                	mov    edx,ecx
  219466:	48 8d b5 00 ff ff ff 	lea    rsi,[rbp-0x100]
  21946d:	b9 30 00 00 00       	mov    ecx,0x30
  219472:	89 cf                	mov    edi,ecx
  219474:	4c 8d 85 38 ff ff ff 	lea    r8,[rbp-0xc8]
  21947b:	b9 28 00 00 00       	mov    ecx,0x28
  219480:	41 89 c9             	mov    r9d,ecx
  219483:	4c 8d 95 68 ff ff ff 	lea    r10,[rbp-0x98]
                .column = self.prev_column,
  21948a:	4c 8b 9d f8 fe ff ff 	mov    r11,QWORD PTR [rbp-0x108]
  219491:	4d 8b 5b 60          	mov    r11,QWORD PTR [r11+0x60]
                .allocator = self.file_entries.allocator,
  219495:	48 8b 9d f8 fe ff ff 	mov    rbx,QWORD PTR [rbp-0x108]
  21949c:	48 8b 5b 40          	mov    rbx,QWORD PTR [rbx+0x40]
  2194a0:	48 8b 5b 18          	mov    rbx,QWORD PTR [rbx+0x18]
            return LineInfo{
  2194a4:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  2194ab:	4c 89 9d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r11
  2194b2:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  2194b9:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  2194c0:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  2194c7:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  2194cb:	48 89 5d 88          	mov    QWORD PTR [rbp-0x78],rbx
  2194cf:	4c 89 c0             	mov    rax,r8
  2194d2:	48 89 bd 28 fe ff ff 	mov    QWORD PTR [rbp-0x1d8],rdi
  2194d9:	48 89 c7             	mov    rdi,rax
  2194dc:	48 89 b5 20 fe ff ff 	mov    QWORD PTR [rbp-0x1e0],rsi
  2194e3:	4c 89 d6             	mov    rsi,r10
  2194e6:	48 89 95 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],rdx
  2194ed:	4c 89 ca             	mov    rdx,r9
  2194f0:	4c 89 85 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],r8
  2194f7:	e8 04 88 00 00       	call   221d00 <memcpy>
  2194fc:	c6 85 60 ff ff ff 01 	mov    BYTE PTR [rbp-0xa0],0x1
  219503:	66 c7 85 00 ff ff ff 	mov    WORD PTR [rbp-0x100],0x0
  21950a:	00 00 
  21950c:	48 8b 85 20 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e0]
  219513:	48 83 c0 08          	add    rax,0x8
  219517:	48 8b 95 10 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1f0]
  21951e:	48 89 c7             	mov    rdi,rax
  219521:	48 89 d6             	mov    rsi,rdx
  219524:	48 8b 95 28 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d8]
  21952b:	e8 d0 87 00 00       	call   221d00 <memcpy>
  219530:	48 8b 85 20 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e0]
  219537:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  21953e:	48 89 d7             	mov    rdi,rdx
  219541:	48 89 c6             	mov    rsi,rax
  219544:	48 8b 95 18 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1e8]
  21954b:	e8 b0 87 00 00       	call   221d00 <memcpy>
  219550:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  219557:	48 81 c4 e8 01 00 00 	add    rsp,0x1e8
  21955e:	5b                   	pop    rbx
  21955f:	5d                   	pop    rbp
  219560:	c3                   	ret    
        if (self.target_address >= self.prev_address and self.target_address < self.address) {
  219561:	eb 00                	jmp    219563 <LineNumberProgram_checkLineMatch+0x433>
  219563:	48 8d 05 56 7a fe ff 	lea    rax,[rip+0xfffffffffffe7a56]        # 200fc0 <__unnamed_134>
  21956a:	b9 38 00 00 00       	mov    ecx,0x38
  21956f:	89 ca                	mov    edx,ecx
        self.prev_address = self.address;
  219571:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
  219578:	48 8b bd f8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x108]
  21957f:	48 8b 3f             	mov    rdi,QWORD PTR [rdi]
  219582:	48 89 7e 48          	mov    QWORD PTR [rsi+0x48],rdi
        self.prev_file = self.file;
  219586:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
  21958d:	48 8b bd f8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x108]
  219594:	48 8b 7f 08          	mov    rdi,QWORD PTR [rdi+0x8]
  219598:	48 89 7e 50          	mov    QWORD PTR [rsi+0x50],rdi
        self.prev_line = self.line;
  21959c:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
  2195a3:	48 8b bd f8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x108]
  2195aa:	48 8b 7f 10          	mov    rdi,QWORD PTR [rdi+0x10]
  2195ae:	48 89 7e 58          	mov    QWORD PTR [rsi+0x58],rdi
        self.prev_column = self.column;
  2195b2:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
  2195b9:	48 8b bd f8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x108]
  2195c0:	48 8b 7f 18          	mov    rdi,QWORD PTR [rdi+0x18]
  2195c4:	48 89 7e 60          	mov    QWORD PTR [rsi+0x60],rdi
        self.prev_is_stmt = self.is_stmt;
  2195c8:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
  2195cf:	48 8b bd f8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x108]
  2195d6:	44 8a 47 20          	mov    r8b,BYTE PTR [rdi+0x20]
  2195da:	41 80 e0 01          	and    r8b,0x1
  2195de:	44 88 46 68          	mov    BYTE PTR [rsi+0x68],r8b
        self.prev_basic_block = self.basic_block;
  2195e2:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
  2195e9:	48 8b bd f8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x108]
  2195f0:	44 8a 47 21          	mov    r8b,BYTE PTR [rdi+0x21]
  2195f4:	41 80 e0 01          	and    r8b,0x1
  2195f8:	44 88 46 69          	mov    BYTE PTR [rsi+0x69],r8b
        self.prev_end_sequence = self.end_sequence;
  2195fc:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
  219603:	48 8b bd f8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x108]
  21960a:	44 8a 47 22          	mov    r8b,BYTE PTR [rdi+0x22]
  21960e:	41 80 e0 01          	and    r8b,0x1
  219612:	44 88 46 6a          	mov    BYTE PTR [rsi+0x6a],r8b
        return null;
  219616:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  21961d:	48 89 f7             	mov    rdi,rsi
  219620:	48 89 c6             	mov    rsi,rax
  219623:	e8 d8 86 00 00       	call   221d00 <memcpy>
  219628:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  21962f:	48 81 c4 e8 01 00 00 	add    rsp,0x1e8
  219636:	5b                   	pop    rbx
  219637:	5d                   	pop    rbp
  219638:	c3                   	ret    
  219639:	48 8d 3d d8 bc 00 00 	lea    rdi,[rip+0xbcd8]        # 225318 <__unnamed_5>
  219640:	31 c0                	xor    eax,eax
  219642:	89 c6                	mov    esi,eax
            } else if (self.prev_file - 1 >= self.file_entries.len) {
  219644:	e8 77 9a fe ff       	call   2030c0 <panic>
  219649:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  219650:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  219654:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
  21965b:	48 3b 48 10          	cmp    rcx,QWORD PTR [rax+0x10]
  21965f:	0f 83 cc fb ff ff    	jae    219231 <LineNumberProgram_checkLineMatch+0x101>
  219665:	e9 0f fc ff ff       	jmp    219279 <LineNumberProgram_checkLineMatch+0x149>
  21966a:	48 8d 3d a7 bc 00 00 	lea    rdi,[rip+0xbca7]        # 225318 <__unnamed_5>
  219671:	31 c0                	xor    eax,eax
  219673:	89 c6                	mov    esi,eax
                &self.file_entries.items[self.prev_file - 1];
  219675:	e8 46 9a fe ff       	call   2030c0 <panic>
  21967a:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
  219681:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
  219688:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  21968c:	72 10                	jb     21969e <LineNumberProgram_checkLineMatch+0x56e>
  21968e:	48 8d 3d 6b bc 00 00 	lea    rdi,[rip+0xbc6b]        # 225300 <__unnamed_4>
  219695:	31 c0                	xor    eax,eax
  219697:	89 c6                	mov    esi,eax
  219699:	e8 22 9a fe ff       	call   2030c0 <panic>
  21969e:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
  2196a5:	48 6b c8 28          	imul   rcx,rax,0x28
  2196a9:	48 8b 95 88 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x178]
  2196b0:	48 03 0a             	add    rcx,QWORD PTR [rdx]
            } else if (self.prev_file - 1 >= self.file_entries.len) {
  2196b3:	48 89 8d 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rcx
  2196ba:	e9 f6 fb ff ff       	jmp    2192b5 <LineNumberProgram_checkLineMatch+0x185>
  2196bf:	48 8d 3d 3a bc 00 00 	lea    rdi,[rip+0xbc3a]        # 225300 <__unnamed_4>
  2196c6:	31 c0                	xor    eax,eax
  2196c8:	89 c6                	mov    esi,eax
                self.include_dirs[file_entry.dir_index];
  2196ca:	e8 f1 99 fe ff       	call   2030c0 <panic>
  2196cf:	48 8b 85 60 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a0]
  2196d6:	48 c1 e0 04          	shl    rax,0x4
  2196da:	48 8b 8d 58 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1a8]
  2196e1:	48 03 01             	add    rax,QWORD PTR [rcx]
            const dir_name = if (file_entry.dir_index >= self.include_dirs.len) {
  2196e4:	48 89 85 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rax
  2196eb:	e9 6b fc ff ff       	jmp    21935b <LineNumberProgram_checkLineMatch+0x22b>
                .line = if (self.prev_line >= 0) @intCast(usize, self.prev_line) else 0,
  2196f0:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  2196f7:	48 89 85 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rax
  2196fe:	e9 55 fd ff ff       	jmp    219458 <LineNumberProgram_checkLineMatch+0x328>
  219703:	48 8d 3d 0e be 00 00 	lea    rdi,[rip+0xbe0e]        # 225518 <__unnamed_52>
  21970a:	31 c0                	xor    eax,eax
  21970c:	89 c6                	mov    esi,eax
  21970e:	e8 ad 99 fe ff       	call   2030c0 <panic>
  219713:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21971a:	84 00 00 00 00 00 

0000000000219720 <readILeb128>:
fn readILeb128(in_stream: var) !i64 {
  219720:	55                   	push   rbp
  219721:	48 89 e5             	mov    rbp,rsp
  219724:	48 81 ec b0 00 00 00 	sub    rsp,0xb0
  21972b:	48 89 f8             	mov    rax,rdi
  21972e:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
    var result: i64 = 0;
  219732:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
  219739:	00 
    var shift: usize = 0;
  21973a:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
  219741:	00 
  219742:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  219746:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
  21974a:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
    while (true) {
  21974e:	eb 00                	jmp    219750 <readILeb128+0x30>
  219750:	48 8d 7d f8          	lea    rdi,[rbp-0x8]
        const byte = try in_stream.readByte();
  219754:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  219758:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  21975c:	e8 df 0c ff ff       	call   20a440 <InStream(ReadError)_readByte>
  219761:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  219766:	74 39                	je     2197a1 <readILeb128+0x81>
  219768:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  21976c:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  219770:	66 89 45 8e          	mov    WORD PTR [rbp-0x72],ax
  219774:	e8 d7 ac fe ff       	call   204450 <__zig_return_error>
  219779:	66 8b 45 8e          	mov    ax,WORD PTR [rbp-0x72]
  21977d:	66 89 45 e0          	mov    WORD PTR [rbp-0x20],ax
  219781:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  219785:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  219789:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21978c:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  219790:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  219794:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  219798:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  21979f:	5d                   	pop    rbp
  2197a0:	c3                   	ret    
  2197a1:	8a 45 fa             	mov    al,BYTE PTR [rbp-0x6]
  2197a4:	88 45 b7             	mov    BYTE PTR [rbp-0x49],al
        var operand: i64 = undefined;
  2197a7:	48 b9 aa aa aa aa aa 	movabs rcx,0xaaaaaaaaaaaaaaaa
  2197ae:	aa aa aa 
  2197b1:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
        if (@shlWithOverflow(i64, byte & 0b01111111, @intCast(u6, shift), &operand)) return error.InvalidDebugInfo;
  2197b5:	8a 45 b7             	mov    al,BYTE PTR [rbp-0x49]
  2197b8:	24 7f                	and    al,0x7f
  2197ba:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  2197be:	88 ca                	mov    dl,cl
  2197c0:	89 ce                	mov    esi,ecx
  2197c2:	83 e6 3f             	and    esi,0x3f
  2197c5:	89 f7                	mov    edi,esi
  2197c7:	48 39 f9             	cmp    rcx,rdi
  2197ca:	88 45 8d             	mov    BYTE PTR [rbp-0x73],al
  2197cd:	88 55 8c             	mov    BYTE PTR [rbp-0x74],dl
  2197d0:	0f 84 f3 00 00 00    	je     2198c9 <readILeb128+0x1a9>
  2197d6:	e9 28 01 00 00       	jmp    219903 <readILeb128+0x1e3>
  2197db:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  2197df:	e8 6c ac fe ff       	call   204450 <__zig_return_error>
  2197e4:	48 8b 3d 45 8b fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe8b45]        # 202330 <__unnamed_117>
  2197eb:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  2197ef:	48 89 38             	mov    QWORD PTR [rax],rdi
  2197f2:	48 8b 3d 3f 8b fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe8b3f]        # 202338 <__unnamed_117+0x8>
  2197f9:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  2197fd:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  219801:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  219808:	5d                   	pop    rbp
  219809:	c3                   	ret    
  21980a:	eb 00                	jmp    21980c <readILeb128+0xec>
        result |= operand;
  21980c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  219810:	48 0b 45 a8          	or     rax,QWORD PTR [rbp-0x58]
  219814:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
        shift += 7;
  219818:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21981c:	48 83 c0 07          	add    rax,0x7
  219820:	0f 92 c1             	setb   cl
  219823:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  219827:	88 8d 7f ff ff ff    	mov    BYTE PTR [rbp-0x81],cl
  21982d:	0f 82 e0 00 00 00    	jb     219913 <readILeb128+0x1f3>
  219833:	e9 eb 00 00 00       	jmp    219923 <readILeb128+0x203>
            if (shift < @sizeOf(i64) * 8 and (byte & 0b01000000) != 0) result |= -(i64(1) << @intCast(u6, shift));
  219838:	48 83 7d b8 40       	cmp    QWORD PTR [rbp-0x48],0x40
  21983d:	0f 92 c0             	setb   al
  219840:	a8 01                	test   al,0x1
  219842:	88 85 7e ff ff ff    	mov    BYTE PTR [rbp-0x82],al
  219848:	75 02                	jne    21984c <readILeb128+0x12c>
  21984a:	eb 10                	jmp    21985c <readILeb128+0x13c>
  21984c:	8a 45 b7             	mov    al,BYTE PTR [rbp-0x49]
  21984f:	24 40                	and    al,0x40
  219851:	3c 00                	cmp    al,0x0
  219853:	0f 95 c0             	setne  al
  219856:	88 85 7e ff ff ff    	mov    BYTE PTR [rbp-0x82],al
  21985c:	8a 85 7e ff ff ff    	mov    al,BYTE PTR [rbp-0x82]
  219862:	a8 01                	test   al,0x1
  219864:	75 02                	jne    219868 <readILeb128+0x148>
  219866:	eb 2c                	jmp    219894 <readILeb128+0x174>
  219868:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  21986c:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  219870:	88 ca                	mov    dl,cl
  219872:	89 ce                	mov    esi,ecx
  219874:	83 e6 3f             	and    esi,0x3f
  219877:	89 f7                	mov    edi,esi
  219879:	48 39 f9             	cmp    rcx,rdi
  21987c:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  219883:	88 95 6f ff ff ff    	mov    BYTE PTR [rbp-0x91],dl
  219889:	0f 84 ad 00 00 00    	je     21993c <readILeb128+0x21c>
  21988f:	e9 ef 00 00 00       	jmp    219983 <readILeb128+0x263>
  219894:	eb 00                	jmp    219896 <readILeb128+0x176>
            return result;
  219896:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  21989a:	66 c7 45 d0 00 00    	mov    WORD PTR [rbp-0x30],0x0
  2198a0:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  2198a4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2198a8:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  2198ac:	48 89 01             	mov    QWORD PTR [rcx],rax
  2198af:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2198b3:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2198b7:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2198bb:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  2198c2:	5d                   	pop    rbp
  2198c3:	c3                   	ret    
    while (true) {
  2198c4:	e9 85 fe ff ff       	jmp    21974e <readILeb128+0x2e>
        if (@shlWithOverflow(i64, byte & 0b01111111, @intCast(u6, shift), &operand)) return error.InvalidDebugInfo;
  2198c9:	8a 45 8d             	mov    al,BYTE PTR [rbp-0x73]
  2198cc:	0f b6 c8             	movzx  ecx,al
  2198cf:	89 ca                	mov    edx,ecx
  2198d1:	40 8a 75 8c          	mov    sil,BYTE PTR [rbp-0x74]
  2198d5:	40 80 e6 3f          	and    sil,0x3f
  2198d9:	40 0f b6 ce          	movzx  ecx,sil
  2198dd:	89 cf                	mov    edi,ecx
  2198df:	48 89 f9             	mov    rcx,rdi
  2198e2:	49 89 d0             	mov    r8,rdx
  2198e5:	49 d3 e0             	shl    r8,cl
  2198e8:	48 89 f9             	mov    rcx,rdi
  2198eb:	4c 89 c7             	mov    rdi,r8
  2198ee:	48 d3 ff             	sar    rdi,cl
  2198f1:	4c 89 45 a8          	mov    QWORD PTR [rbp-0x58],r8
  2198f5:	48 39 fa             	cmp    rdx,rdi
  2198f8:	0f 85 dd fe ff ff    	jne    2197db <readILeb128+0xbb>
  2198fe:	e9 07 ff ff ff       	jmp    21980a <readILeb128+0xea>
  219903:	48 8d 3d 9e ba 00 00 	lea    rdi,[rip+0xba9e]        # 2253a8 <__unnamed_8>
  21990a:	31 c0                	xor    eax,eax
  21990c:	89 c6                	mov    esi,eax
  21990e:	e8 ad 97 fe ff       	call   2030c0 <panic>
  219913:	48 8d 3d fe b9 00 00 	lea    rdi,[rip+0xb9fe]        # 225318 <__unnamed_5>
  21991a:	31 c0                	xor    eax,eax
  21991c:	89 c6                	mov    esi,eax
        shift += 7;
  21991e:	e8 9d 97 fe ff       	call   2030c0 <panic>
  219923:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  219927:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
        if ((byte & 0b10000000) == 0) {
  21992b:	8a 4d b7             	mov    cl,BYTE PTR [rbp-0x49]
  21992e:	80 e1 80             	and    cl,0x80
  219931:	80 f9 00             	cmp    cl,0x0
  219934:	0f 84 fe fe ff ff    	je     219838 <readILeb128+0x118>
  21993a:	eb 88                	jmp    2198c4 <readILeb128+0x1a4>
  21993c:	31 c0                	xor    eax,eax
  21993e:	89 c1                	mov    ecx,eax
  219940:	b8 01 00 00 00       	mov    eax,0x1
  219945:	89 c2                	mov    edx,eax
            if (shift < @sizeOf(i64) * 8 and (byte & 0b01000000) != 0) result |= -(i64(1) << @intCast(u6, shift));
  219947:	40 8a b5 6f ff ff ff 	mov    sil,BYTE PTR [rbp-0x91]
  21994e:	40 80 e6 3f          	and    sil,0x3f
  219952:	40 0f b6 c6          	movzx  eax,sil
  219956:	89 c7                	mov    edi,eax
  219958:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
  21995f:	48 89 f9             	mov    rcx,rdi
  219962:	48 d3 e2             	shl    rdx,cl
  219965:	48 8b bd 60 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  21996c:	48 29 d7             	sub    rdi,rdx
  21996f:	0f 90 c1             	seto   cl
  219972:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
  219979:	88 8d 57 ff ff ff    	mov    BYTE PTR [rbp-0xa9],cl
  21997f:	70 12                	jo     219993 <readILeb128+0x273>
  219981:	eb 20                	jmp    2199a3 <readILeb128+0x283>
  219983:	48 8d 3d 1e ba 00 00 	lea    rdi,[rip+0xba1e]        # 2253a8 <__unnamed_8>
  21998a:	31 c0                	xor    eax,eax
  21998c:	89 c6                	mov    esi,eax
  21998e:	e8 2d 97 fe ff       	call   2030c0 <panic>
  219993:	48 8d 3d 7e b9 00 00 	lea    rdi,[rip+0xb97e]        # 225318 <__unnamed_5>
  21999a:	31 c0                	xor    eax,eax
  21999c:	89 c6                	mov    esi,eax
  21999e:	e8 1d 97 fe ff       	call   2030c0 <panic>
  2199a3:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  2199aa:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  2199b1:	48 09 c8             	or     rax,rcx
  2199b4:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  2199b8:	e9 d9 fe ff ff       	jmp    219896 <readILeb128+0x176>
  2199bd:	0f 1f 00             	nop    DWORD PTR [rax]

00000000002199c0 <AlignedArrayList([]u8,8)_addOne>:
        pub fn addOne(self: *Self) !*T {
  2199c0:	55                   	push   rbp
  2199c1:	48 89 e5             	mov    rbp,rsp
  2199c4:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  2199cb:	48 89 f8             	mov    rax,rdi
  2199ce:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            const new_length = self.len + 1;
  2199d2:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  2199d6:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  2199da:	48 83 c2 01          	add    rdx,0x1
  2199de:	0f 92 c1             	setb   cl
  2199e1:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  2199e5:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  2199e9:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  2199ed:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  2199f1:	88 4d 9f             	mov    BYTE PTR [rbp-0x61],cl
  2199f4:	72 57                	jb     219a4d <AlignedArrayList([]u8,8)_addOne+0x8d>
  2199f6:	eb 65                	jmp    219a5d <AlignedArrayList([]u8,8)_addOne+0x9d>
            try self.ensureCapacity(new_length);
  2199f8:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  2199fc:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  219a00:	66 89 45 9c          	mov    WORD PTR [rbp-0x64],ax
  219a04:	e8 47 aa fe ff       	call   204450 <__zig_return_error>
  219a09:	66 8b 45 9c          	mov    ax,WORD PTR [rbp-0x64]
  219a0d:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  219a11:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  219a15:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  219a19:	48 89 39             	mov    QWORD PTR [rcx],rdi
  219a1c:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  219a20:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  219a24:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  219a28:	48 81 c4 80 00 00 00 	add    rsp,0x80
  219a2f:	5d                   	pop    rbp
  219a30:	c3                   	ret    
            const result = &self.items[self.len];
  219a31:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  219a35:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  219a39:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
  219a3d:	48 3b 48 08          	cmp    rcx,QWORD PTR [rax+0x8]
  219a41:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  219a45:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
  219a49:	72 4c                	jb     219a97 <AlignedArrayList([]u8,8)_addOne+0xd7>
  219a4b:	eb 3a                	jmp    219a87 <AlignedArrayList([]u8,8)_addOne+0xc7>
  219a4d:	48 8d 3d c4 b8 00 00 	lea    rdi,[rip+0xb8c4]        # 225318 <__unnamed_5>
  219a54:	31 c0                	xor    eax,eax
  219a56:	89 c6                	mov    esi,eax
            const new_length = self.len + 1;
  219a58:	e8 63 96 fe ff       	call   2030c0 <panic>
  219a5d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  219a61:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
            try self.ensureCapacity(new_length);
  219a65:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  219a69:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  219a6d:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  219a71:	e8 7a 00 00 00       	call   219af0 <AlignedArrayList([]u8,8)_ensureCapacity>
  219a76:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  219a7a:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  219a7f:	0f 85 73 ff ff ff    	jne    2199f8 <AlignedArrayList([]u8,8)_addOne+0x38>
  219a85:	eb aa                	jmp    219a31 <AlignedArrayList([]u8,8)_addOne+0x71>
  219a87:	48 8d 3d 72 b8 00 00 	lea    rdi,[rip+0xb872]        # 225300 <__unnamed_4>
  219a8e:	31 c0                	xor    eax,eax
  219a90:	89 c6                	mov    esi,eax
            const result = &self.items[self.len];
  219a92:	e8 29 96 fe ff       	call   2030c0 <panic>
  219a97:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  219a9b:	48 c1 e0 04          	shl    rax,0x4
  219a9f:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  219aa3:	48 03 01             	add    rax,QWORD PTR [rcx]
  219aa6:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
            self.len = new_length;
  219aaa:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  219aae:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  219ab2:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
            return result;
  219ab6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  219aba:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  219ac0:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  219ac4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  219ac8:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  219acc:	48 89 02             	mov    QWORD PTR [rdx],rax
  219acf:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  219ad3:	48 89 42 08          	mov    QWORD PTR [rdx+0x8],rax
  219ad7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  219adb:	48 81 c4 80 00 00 00 	add    rsp,0x80
  219ae2:	5d                   	pop    rbp
  219ae3:	c3                   	ret    
  219ae4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  219aeb:	00 00 00 00 00 

0000000000219af0 <AlignedArrayList([]u8,8)_ensureCapacity>:
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  219af0:	55                   	push   rbp
  219af1:	48 89 e5             	mov    rbp,rsp
  219af4:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  219afb:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  219aff:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
            var better_capacity = self.items.len;
  219b03:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  219b07:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  219b0b:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
            if (better_capacity >= new_capacity) return;
  219b0f:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  219b13:	48 3b 55 c0          	cmp    rdx,QWORD PTR [rbp-0x40]
  219b17:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  219b1b:	72 11                	jb     219b2e <AlignedArrayList([]u8,8)_ensureCapacity+0x3e>
  219b1d:	31 c0                	xor    eax,eax
  219b1f:	66 89 c1             	mov    cx,ax
  219b22:	66 89 c8             	mov    ax,cx
  219b25:	48 81 c4 90 00 00 00 	add    rsp,0x90
  219b2c:	5d                   	pop    rbp
  219b2d:	c3                   	ret    
            while (true) {
  219b2e:	eb 00                	jmp    219b30 <AlignedArrayList([]u8,8)_ensureCapacity+0x40>
  219b30:	eb 00                	jmp    219b32 <AlignedArrayList([]u8,8)_ensureCapacity+0x42>
  219b32:	31 c0                	xor    eax,eax
  219b34:	88 c1                	mov    cl,al
                better_capacity += better_capacity / 2 + 8;
  219b36:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  219b3a:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  219b3e:	f6 c1 01             	test   cl,0x1
  219b41:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  219b45:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  219b49:	0f 85 8e 00 00 00    	jne    219bdd <AlignedArrayList([]u8,8)_ensureCapacity+0xed>
  219b4f:	eb 72                	jmp    219bc3 <AlignedArrayList([]u8,8)_ensureCapacity+0xd3>
                if (better_capacity >= new_capacity) break;
  219b51:	eb 02                	jmp    219b55 <AlignedArrayList([]u8,8)_ensureCapacity+0x65>
            while (true) {
  219b53:	eb db                	jmp    219b30 <AlignedArrayList([]u8,8)_ensureCapacity+0x40>
  219b55:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
            self.items = try self.allocator.alignedRealloc(T, A, self.items, better_capacity);
  219b59:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  219b5d:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  219b61:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
  219b65:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  219b69:	4c 8b 45 b8          	mov    r8,QWORD PTR [rbp-0x48]
  219b6d:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  219b71:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  219b75:	e8 d6 00 00 00       	call   219c50 <Allocator_alignedRealloc.59>
  219b7a:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  219b7f:	74 1e                	je     219b9f <AlignedArrayList([]u8,8)_ensureCapacity+0xaf>
  219b81:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  219b85:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  219b89:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  219b8d:	e8 be a8 fe ff       	call   204450 <__zig_return_error>
  219b92:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  219b96:	48 81 c4 90 00 00 00 	add    rsp,0x90
  219b9d:	5d                   	pop    rbp
  219b9e:	c3                   	ret    
  219b9f:	31 c0                	xor    eax,eax
  219ba1:	66 89 c1             	mov    cx,ax
  219ba4:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  219ba8:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  219bac:	48 89 16             	mov    QWORD PTR [rsi],rdx
  219baf:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  219bb3:	48 89 56 08          	mov    QWORD PTR [rsi+0x8],rdx
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  219bb7:	66 89 c8             	mov    ax,cx
  219bba:	48 81 c4 90 00 00 00 	add    rsp,0x90
  219bc1:	5d                   	pop    rbp
  219bc2:	c3                   	ret    
                better_capacity += better_capacity / 2 + 8;
  219bc3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  219bc7:	48 c1 e8 01          	shr    rax,0x1
  219bcb:	48 83 c0 08          	add    rax,0x8
  219bcf:	0f 92 c1             	setb   cl
  219bd2:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  219bd6:	88 4d 87             	mov    BYTE PTR [rbp-0x79],cl
  219bd9:	72 12                	jb     219bed <AlignedArrayList([]u8,8)_ensureCapacity+0xfd>
  219bdb:	eb 20                	jmp    219bfd <AlignedArrayList([]u8,8)_ensureCapacity+0x10d>
  219bdd:	48 8d 3d 94 b9 00 00 	lea    rdi,[rip+0xb994]        # 225578 <__unnamed_73>
  219be4:	31 c0                	xor    eax,eax
  219be6:	89 c6                	mov    esi,eax
  219be8:	e8 d3 94 fe ff       	call   2030c0 <panic>
  219bed:	48 8d 3d 24 b7 00 00 	lea    rdi,[rip+0xb724]        # 225318 <__unnamed_5>
  219bf4:	31 c0                	xor    eax,eax
  219bf6:	89 c6                	mov    esi,eax
  219bf8:	e8 c3 94 fe ff       	call   2030c0 <panic>
  219bfd:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  219c01:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  219c05:	48 01 c8             	add    rax,rcx
  219c08:	0f 92 c2             	setb   dl
  219c0b:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  219c12:	88 95 77 ff ff ff    	mov    BYTE PTR [rbp-0x89],dl
  219c18:	72 02                	jb     219c1c <AlignedArrayList([]u8,8)_ensureCapacity+0x12c>
  219c1a:	eb 10                	jmp    219c2c <AlignedArrayList([]u8,8)_ensureCapacity+0x13c>
  219c1c:	48 8d 3d f5 b6 00 00 	lea    rdi,[rip+0xb6f5]        # 225318 <__unnamed_5>
  219c23:	31 c0                	xor    eax,eax
  219c25:	89 c6                	mov    esi,eax
  219c27:	e8 94 94 fe ff       	call   2030c0 <panic>
  219c2c:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  219c33:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                if (better_capacity >= new_capacity) break;
  219c37:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  219c3b:	48 3b 4d c0          	cmp    rcx,QWORD PTR [rbp-0x40]
  219c3f:	0f 83 0c ff ff ff    	jae    219b51 <AlignedArrayList([]u8,8)_ensureCapacity+0x61>
  219c45:	e9 09 ff ff ff       	jmp    219b53 <AlignedArrayList([]u8,8)_ensureCapacity+0x63>
  219c4a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000219c50 <Allocator_alignedRealloc.59>:
    pub fn alignedRealloc(self: *Allocator, comptime T: type, comptime alignment: u29, old_mem: []align(alignment) T, n: usize) ![]align(alignment) T {
  219c50:	55                   	push   rbp
  219c51:	48 89 e5             	mov    rbp,rsp
  219c54:	53                   	push   rbx
  219c55:	48 81 ec 88 01 00 00 	sub    rsp,0x188
  219c5c:	48 89 f8             	mov    rax,rdi
  219c5f:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
  219c66:	4c 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],r8
        if (old_mem.len == 0) {
  219c6d:	48 83 79 08 00       	cmp    QWORD PTR [rcx+0x8],0x0
  219c72:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  219c79:	48 89 b5 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rsi
  219c80:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
  219c87:	48 89 bd b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rdi
  219c8e:	75 64                	jne    219cf4 <Allocator_alignedRealloc.59+0xa4>
  219c90:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
            return self.alignedAlloc(T, alignment, n);
  219c94:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  219c9b:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  219ca2:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  219ca9:	e8 12 04 00 00       	call   21a0c0 <Allocator_alignedAlloc.60>
  219cae:	66 83 7d e0 00       	cmp    WORD PTR [rbp-0x20],0x0
  219cb3:	74 0e                	je     219cc3 <Allocator_alignedRealloc.59+0x73>
  219cb5:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  219cbc:	e8 8f a7 fe ff       	call   204450 <__zig_return_error>
  219cc1:	eb 02                	jmp    219cc5 <Allocator_alignedRealloc.59+0x75>
  219cc3:	eb 00                	jmp    219cc5 <Allocator_alignedRealloc.59+0x75>
  219cc5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  219cc9:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  219cd0:	48 89 01             	mov    QWORD PTR [rcx],rax
  219cd3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  219cd7:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  219cdb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  219cdf:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  219ce3:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  219cea:	48 81 c4 88 01 00 00 	add    rsp,0x188
  219cf1:	5b                   	pop    rbx
  219cf2:	5d                   	pop    rbp
  219cf3:	c3                   	ret    
        if (old_mem.len == 0) {
  219cf4:	eb 00                	jmp    219cf6 <Allocator_alignedRealloc.59+0xa6>
        if (n == 0) {
  219cf6:	48 83 bd 10 ff ff ff 	cmp    QWORD PTR [rbp-0xf0],0x0
  219cfd:	00 
  219cfe:	75 4b                	jne    219d4b <Allocator_alignedRealloc.59+0xfb>
            self.free(old_mem);
  219d00:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
  219d07:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  219d0e:	e8 bd 06 00 00       	call   21a3d0 <Allocator_free.61>
            return ([*]align(alignment) T)(undefined)[0..0];
  219d13:	48 8b 35 3e 71 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffe713e]        # 200e58 <__unnamed_136>
  219d1a:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  219d21:	48 89 37             	mov    QWORD PTR [rdi],rsi
  219d24:	48 8b 35 35 71 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffe7135]        # 200e60 <__unnamed_136+0x8>
  219d2b:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  219d2f:	48 8b 35 32 71 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffe7132]        # 200e68 <__unnamed_136+0x10>
  219d36:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  219d3a:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  219d41:	48 81 c4 88 01 00 00 	add    rsp,0x188
  219d48:	5b                   	pop    rbx
  219d49:	5d                   	pop    rbp
  219d4a:	c3                   	ret    
        if (n == 0) {
  219d4b:	eb 00                	jmp    219d4d <Allocator_alignedRealloc.59+0xfd>
  219d4d:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  219d51:	b8 10 00 00 00       	mov    eax,0x10
  219d56:	89 c2                	mov    edx,eax
        const old_byte_slice = @sliceToBytes(old_mem);
  219d58:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  219d5f:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  219d62:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  219d66:	48 8b 71 08          	mov    rsi,QWORD PTR [rcx+0x8]
  219d6a:	48 c1 e6 04          	shl    rsi,0x4
  219d6e:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  219d72:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  219d76:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
  219d7d:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  219d81:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  219d88:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  219d8f:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  219d96:	e8 95 1e ff ff       	call   20bc30 <mul>
  219d9b:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  219da0:	74 44                	je     219de6 <Allocator_alignedRealloc.59+0x196>
  219da2:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  219da9:	e8 a2 a6 fe ff       	call   204450 <__zig_return_error>
  219dae:	48 8b 3d bb 70 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe70bb]        # 200e70 <__unnamed_137>
  219db5:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  219dbc:	48 89 38             	mov    QWORD PTR [rax],rdi
  219dbf:	48 8b 3d b2 70 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe70b2]        # 200e78 <__unnamed_137+0x8>
  219dc6:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  219dca:	48 8b 3d af 70 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe70af]        # 200e80 <__unnamed_137+0x10>
  219dd1:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  219dd5:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  219ddc:	48 81 c4 88 01 00 00 	add    rsp,0x188
  219de3:	5b                   	pop    rbx
  219de4:	5d                   	pop    rbp
  219de5:	c3                   	ret    
  219de6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  219dea:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  219df1:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  219df5:	48 8d 8d 00 ff ff ff 	lea    rcx,[rbp-0x100]
  219dfc:	41 b9 08 00 00 00    	mov    r9d,0x8
  219e02:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  219e09:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
        const byte_slice = try self.reallocFn(self, old_byte_slice, byte_count, alignment);
  219e10:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  219e17:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  219e1b:	48 8b b5 18 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe8]
  219e22:	4c 8b 85 f8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x108]
  219e29:	4c 8b 95 c8 fe ff ff 	mov    r10,QWORD PTR [rbp-0x138]
  219e30:	48 89 b5 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rsi
  219e37:	4c 89 d6             	mov    rsi,r10
  219e3a:	4c 8b 9d a8 fe ff ff 	mov    r11,QWORD PTR [rbp-0x158]
  219e41:	48 89 95 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdx
  219e48:	4c 89 da             	mov    rdx,r11
  219e4b:	48 8b 9d a0 fe ff ff 	mov    rbx,QWORD PTR [rbp-0x160]
  219e52:	ff d3                	call   rbx
  219e54:	66 83 7d 98 00       	cmp    WORD PTR [rbp-0x68],0x0
  219e59:	74 5d                	je     219eb8 <Allocator_alignedRealloc.59+0x268>
  219e5b:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  219e5f:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  219e66:	66 89 85 9e fe ff ff 	mov    WORD PTR [rbp-0x162],ax
  219e6d:	e8 de a5 fe ff       	call   204450 <__zig_return_error>
  219e72:	66 8b 85 9e fe ff ff 	mov    ax,WORD PTR [rbp-0x162]
  219e79:	66 89 85 68 ff ff ff 	mov    WORD PTR [rbp-0x98],ax
  219e80:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  219e87:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  219e8e:	48 89 39             	mov    QWORD PTR [rcx],rdi
  219e91:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  219e98:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  219e9c:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  219ea3:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  219ea7:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  219eae:	48 81 c4 88 01 00 00 	add    rsp,0x188
  219eb5:	5b                   	pop    rbx
  219eb6:	5d                   	pop    rbp
  219eb7:	c3                   	ret    
  219eb8:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  219ebc:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  219ec3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  219ec7:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
        assert(byte_slice.len == byte_count);
  219ece:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  219ed5:	48 3b 85 f8 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x108]
  219edc:	0f 94 c1             	sete   cl
  219edf:	0f b6 f9             	movzx  edi,cl
  219ee2:	e8 19 91 fe ff       	call   203000 <assert>
        if (n > old_mem.len) {
  219ee7:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  219eee:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  219ef5:	48 3b 42 08          	cmp    rax,QWORD PTR [rdx+0x8]
  219ef9:	76 71                	jbe    219f6c <Allocator_alignedRealloc.59+0x31c>
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  219efb:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  219f02:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  219f09:	48 39 c8             	cmp    rax,rcx
  219f0c:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  219f13:	48 89 8d 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rcx
  219f1a:	76 78                	jbe    219f94 <Allocator_alignedRealloc.59+0x344>
  219f1c:	eb 66                	jmp    219f84 <Allocator_alignedRealloc.59+0x334>
  219f1e:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  219f25:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
  219f2c:	48 39 c8             	cmp    rax,rcx
  219f2f:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  219f36:	73 32                	jae    219f6a <Allocator_alignedRealloc.59+0x31a>
  219f38:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  219f3f:	48 03 8d 58 ff ff ff 	add    rcx,QWORD PTR [rbp-0xa8]
  219f46:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
                byte.* = undefined;
  219f4d:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  219f54:	88 01                	mov    BYTE PTR [rcx],al
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  219f56:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  219f5d:	48 83 c1 01          	add    rcx,0x1
  219f61:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
  219f68:	eb b4                	jmp    219f1e <Allocator_alignedRealloc.59+0x2ce>
        if (n > old_mem.len) {
  219f6a:	eb 02                	jmp    219f6e <Allocator_alignedRealloc.59+0x31e>
  219f6c:	eb 00                	jmp    219f6e <Allocator_alignedRealloc.59+0x31e>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  219f6e:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  219f75:	48 83 e0 07          	and    rax,0x7
  219f79:	48 83 f8 00          	cmp    rax,0x0
  219f7d:	74 7b                	je     219ffa <Allocator_alignedRealloc.59+0x3aa>
  219f7f:	e9 a1 00 00 00       	jmp    21a025 <Allocator_alignedRealloc.59+0x3d5>
  219f84:	48 8d 3d 75 b3 00 00 	lea    rdi,[rip+0xb375]        # 225300 <__unnamed_4>
  219f8b:	31 c0                	xor    eax,eax
  219f8d:	89 c6                	mov    esi,eax
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  219f8f:	e8 2c 91 fe ff       	call   2030c0 <panic>
  219f94:	be aa 00 00 00       	mov    esi,0xaa
  219f99:	b8 08 00 00 00       	mov    eax,0x8
  219f9e:	89 c2                	mov    edx,eax
  219fa0:	48 8d 8d e0 fe ff ff 	lea    rcx,[rbp-0x120]
  219fa7:	48 8b bd 90 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x170]
  219fae:	48 03 bd e8 fe ff ff 	add    rdi,QWORD PTR [rbp-0x118]
  219fb5:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
  219fbc:	48 8b bd 88 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x178]
  219fc3:	4c 8b 85 90 fe ff ff 	mov    r8,QWORD PTR [rbp-0x170]
  219fca:	4c 29 c7             	sub    rdi,r8
  219fcd:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  219fd4:	48 89 cf             	mov    rdi,rcx
  219fd7:	e8 d4 7c 00 00       	call   221cb0 <memset>
  219fdc:	48 c7 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],0x0
  219fe3:	00 00 00 00 
  219fe7:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  219fee:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  219ff5:	e9 24 ff ff ff       	jmp    219f1e <Allocator_alignedRealloc.59+0x2ce>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  219ffa:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  21a001:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
  21a008:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  21a00f:	48 89 c1             	mov    rcx,rax
  21a012:	48 83 e1 0f          	and    rcx,0xf
  21a016:	48 83 f9 00          	cmp    rcx,0x0
  21a01a:	48 89 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rax
  21a021:	74 12                	je     21a035 <Allocator_alignedRealloc.59+0x3e5>
  21a023:	eb 7f                	jmp    21a0a4 <Allocator_alignedRealloc.59+0x454>
  21a025:	48 8d 3d 04 b5 00 00 	lea    rdi,[rip+0xb504]        # 225530 <__unnamed_60>
  21a02c:	31 c0                	xor    eax,eax
  21a02e:	89 c6                	mov    esi,eax
  21a030:	e8 8b 90 fe ff       	call   2030c0 <panic>
  21a035:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  21a03c:	48 c1 e8 04          	shr    rax,0x4
  21a040:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  21a047:	66 c7 85 20 ff ff ff 	mov    WORD PTR [rbp-0xe0],0x0
  21a04e:	00 00 
  21a050:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  21a057:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  21a05e:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  21a065:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  21a06c:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21a073:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  21a07a:	48 89 01             	mov    QWORD PTR [rcx],rax
  21a07d:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  21a084:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21a088:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21a08f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21a093:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21a09a:	48 81 c4 88 01 00 00 	add    rsp,0x188
  21a0a1:	5b                   	pop    rbx
  21a0a2:	5d                   	pop    rbp
  21a0a3:	c3                   	ret    
  21a0a4:	48 8d 3d 9d b4 00 00 	lea    rdi,[rip+0xb49d]        # 225548 <__unnamed_61>
  21a0ab:	31 c0                	xor    eax,eax
  21a0ad:	89 c6                	mov    esi,eax
  21a0af:	e8 0c 90 fe ff       	call   2030c0 <panic>
  21a0b4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21a0bb:	00 00 00 00 00 

000000000021a0c0 <Allocator_alignedAlloc.60>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  21a0c0:	55                   	push   rbp
  21a0c1:	48 89 e5             	mov    rbp,rsp
  21a0c4:	48 81 ec 20 01 00 00 	sub    rsp,0x120
  21a0cb:	48 89 f8             	mov    rax,rdi
  21a0ce:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  21a0d5:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  21a0dc:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  21a0e3:	00 
  21a0e4:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  21a0eb:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  21a0f2:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  21a0f9:	75 37                	jne    21a132 <Allocator_alignedAlloc.60+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  21a0fb:	48 8b 05 86 6d fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe6d86]        # 200e88 <__unnamed_138>
  21a102:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21a109:	48 89 01             	mov    QWORD PTR [rcx],rax
  21a10c:	48 8b 05 7d 6d fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe6d7d]        # 200e90 <__unnamed_138+0x8>
  21a113:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21a117:	48 8b 05 7a 6d fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe6d7a]        # 200e98 <__unnamed_138+0x10>
  21a11e:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21a122:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21a129:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21a130:	5d                   	pop    rbp
  21a131:	c3                   	ret    
        if (n == 0) {
  21a132:	eb 00                	jmp    21a134 <Allocator_alignedAlloc.60+0x74>
  21a134:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  21a138:	b8 10 00 00 00       	mov    eax,0x10
  21a13d:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  21a13f:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  21a146:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21a14d:	e8 de 1a ff ff       	call   20bc30 <mul>
  21a152:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  21a157:	74 43                	je     21a19c <Allocator_alignedAlloc.60+0xdc>
  21a159:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  21a160:	e8 eb a2 fe ff       	call   204450 <__zig_return_error>
  21a165:	48 8b 3d 34 6d fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe6d34]        # 200ea0 <__unnamed_139>
  21a16c:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21a173:	48 89 38             	mov    QWORD PTR [rax],rdi
  21a176:	48 8b 3d 2b 6d fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe6d2b]        # 200ea8 <__unnamed_139+0x8>
  21a17d:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  21a181:	48 8b 3d 28 6d fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe6d28]        # 200eb0 <__unnamed_139+0x10>
  21a188:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  21a18c:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21a193:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21a19a:	5d                   	pop    rbp
  21a19b:	c3                   	ret    
  21a19c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21a1a0:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  21a1a7:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  21a1ab:	41 b8 08 00 00 00    	mov    r8d,0x8
  21a1b1:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  21a1b8:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  21a1bf:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  21a1c6:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  21a1c9:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  21a1d0:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  21a1d7:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  21a1de:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  21a1e5:	4c 89 ce             	mov    rsi,r9
  21a1e8:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  21a1ef:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  21a1f6:	4c 89 d1             	mov    rcx,r10
  21a1f9:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  21a200:	41 ff d3             	call   r11
  21a203:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  21a208:	74 50                	je     21a25a <Allocator_alignedAlloc.60+0x19a>
  21a20a:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  21a20e:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  21a215:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  21a21c:	e8 2f a2 fe ff       	call   204450 <__zig_return_error>
  21a221:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  21a228:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  21a22c:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  21a230:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21a237:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21a23a:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  21a23e:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21a242:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  21a246:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  21a24a:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21a251:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21a258:	5d                   	pop    rbp
  21a259:	c3                   	ret    
  21a25a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  21a25e:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  21a265:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21a269:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  21a270:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  21a277:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  21a27e:	0f 94 c1             	sete   cl
  21a281:	0f b6 f9             	movzx  edi,cl
  21a284:	e8 77 8d fe ff       	call   203000 <assert>
  21a289:	be aa 00 00 00       	mov    esi,0xaa
  21a28e:	bf 08 00 00 00       	mov    edi,0x8
  21a293:	89 fa                	mov    edx,edi
  21a295:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  21a29c:	48 89 c7             	mov    rdi,rax
  21a29f:	e8 0c 7a 00 00       	call   221cb0 <memset>
  21a2a4:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  21a2ab:	00 00 00 00 
  21a2af:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  21a2b6:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  21a2bd:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  21a2c4:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  21a2cb:	48 39 c8             	cmp    rax,rcx
  21a2ce:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  21a2d5:	73 32                	jae    21a309 <Allocator_alignedAlloc.60+0x249>
  21a2d7:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21a2de:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  21a2e5:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  21a2ec:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  21a2f3:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  21a2f5:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21a2fc:	48 83 c1 01          	add    rcx,0x1
  21a300:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  21a307:	eb b4                	jmp    21a2bd <Allocator_alignedAlloc.60+0x1fd>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  21a309:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  21a310:	48 83 e0 07          	and    rax,0x7
  21a314:	48 83 f8 00          	cmp    rax,0x0
  21a318:	75 28                	jne    21a342 <Allocator_alignedAlloc.60+0x282>
  21a31a:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  21a321:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  21a325:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  21a32c:	48 89 c1             	mov    rcx,rax
  21a32f:	48 83 e1 0f          	and    rcx,0xf
  21a333:	48 83 f9 00          	cmp    rcx,0x0
  21a337:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  21a33e:	74 12                	je     21a352 <Allocator_alignedAlloc.60+0x292>
  21a340:	eb 6f                	jmp    21a3b1 <Allocator_alignedAlloc.60+0x2f1>
  21a342:	48 8d 3d e7 b1 00 00 	lea    rdi,[rip+0xb1e7]        # 225530 <__unnamed_60>
  21a349:	31 c0                	xor    eax,eax
  21a34b:	89 c6                	mov    esi,eax
  21a34d:	e8 6e 8d fe ff       	call   2030c0 <panic>
  21a352:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  21a359:	48 c1 e8 04          	shr    rax,0x4
  21a35d:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  21a361:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  21a368:	00 00 
  21a36a:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  21a36e:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  21a375:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  21a379:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  21a37d:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21a384:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21a38b:	48 89 01             	mov    QWORD PTR [rcx],rax
  21a38e:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  21a395:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21a399:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  21a39d:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21a3a1:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21a3a8:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21a3af:	5d                   	pop    rbp
  21a3b0:	c3                   	ret    
  21a3b1:	48 8d 3d 90 b1 00 00 	lea    rdi,[rip+0xb190]        # 225548 <__unnamed_61>
  21a3b8:	31 c0                	xor    eax,eax
  21a3ba:	89 c6                	mov    esi,eax
  21a3bc:	e8 ff 8c fe ff       	call   2030c0 <panic>
  21a3c1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21a3c8:	0f 1f 84 00 00 00 00 
  21a3cf:	00 

000000000021a3d0 <Allocator_free.61>:
    pub fn free(self: *Allocator, memory: var) void {
  21a3d0:	55                   	push   rbp
  21a3d1:	48 89 e5             	mov    rbp,rsp
  21a3d4:	48 83 ec 60          	sub    rsp,0x60
  21a3d8:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
        const bytes = @sliceToBytes(memory);
  21a3dc:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  21a3df:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  21a3e3:	48 8b 76 08          	mov    rsi,QWORD PTR [rsi+0x8]
  21a3e7:	48 c1 e6 04          	shl    rsi,0x4
  21a3eb:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21a3ef:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  21a3f3:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  21a3f7:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21a3fb:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        if (bytes.len == 0) return;
  21a3ff:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
  21a404:	75 06                	jne    21a40c <Allocator_free.61+0x3c>
  21a406:	48 83 c4 60          	add    rsp,0x60
  21a40a:	5d                   	pop    rbp
  21a40b:	c3                   	ret    
  21a40c:	31 c0                	xor    eax,eax
  21a40e:	89 c1                	mov    ecx,eax
        const non_const_ptr = @intToPtr([*]u8, @ptrToInt(bytes.ptr));
  21a410:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  21a414:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
        self.freeFn(self, non_const_ptr[0..bytes.len]);
  21a418:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  21a41c:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  21a420:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  21a424:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  21a428:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
  21a42c:	48 39 f1             	cmp    rcx,rsi
  21a42f:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
  21a433:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
  21a437:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  21a43b:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  21a43f:	76 10                	jbe    21a451 <Allocator_free.61+0x81>
  21a441:	48 8d 3d b8 ae 00 00 	lea    rdi,[rip+0xaeb8]        # 225300 <__unnamed_4>
  21a448:	31 c0                	xor    eax,eax
  21a44a:	89 c6                	mov    esi,eax
  21a44c:	e8 6f 8c fe ff       	call   2030c0 <panic>
  21a451:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
  21a455:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21a459:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  21a45d:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  21a461:	48 83 e9 00          	sub    rcx,0x0
  21a465:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  21a469:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  21a46d:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  21a471:	ff d1                	call   rcx
    pub fn free(self: *Allocator, memory: var) void {
  21a473:	48 83 c4 60          	add    rsp,0x60
  21a477:	5d                   	pop    rbp
  21a478:	c3                   	ret    
  21a479:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

000000000021a480 <AlignedArrayList(FileEntry,8)_addOne>:
        pub fn addOne(self: *Self) !*T {
  21a480:	55                   	push   rbp
  21a481:	48 89 e5             	mov    rbp,rsp
  21a484:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  21a48b:	48 89 f8             	mov    rax,rdi
  21a48e:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            const new_length = self.len + 1;
  21a492:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  21a496:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  21a49a:	48 83 c2 01          	add    rdx,0x1
  21a49e:	0f 92 c1             	setb   cl
  21a4a1:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  21a4a5:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  21a4a9:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  21a4ad:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  21a4b1:	88 4d 9f             	mov    BYTE PTR [rbp-0x61],cl
  21a4b4:	72 57                	jb     21a50d <AlignedArrayList(FileEntry,8)_addOne+0x8d>
  21a4b6:	eb 65                	jmp    21a51d <AlignedArrayList(FileEntry,8)_addOne+0x9d>
            try self.ensureCapacity(new_length);
  21a4b8:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  21a4bc:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  21a4c0:	66 89 45 9c          	mov    WORD PTR [rbp-0x64],ax
  21a4c4:	e8 87 9f fe ff       	call   204450 <__zig_return_error>
  21a4c9:	66 8b 45 9c          	mov    ax,WORD PTR [rbp-0x64]
  21a4cd:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  21a4d1:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  21a4d5:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  21a4d9:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21a4dc:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  21a4e0:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21a4e4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21a4e8:	48 81 c4 80 00 00 00 	add    rsp,0x80
  21a4ef:	5d                   	pop    rbp
  21a4f0:	c3                   	ret    
            const result = &self.items[self.len];
  21a4f1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  21a4f5:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  21a4f9:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
  21a4fd:	48 3b 48 08          	cmp    rcx,QWORD PTR [rax+0x8]
  21a501:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  21a505:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
  21a509:	72 4c                	jb     21a557 <AlignedArrayList(FileEntry,8)_addOne+0xd7>
  21a50b:	eb 3a                	jmp    21a547 <AlignedArrayList(FileEntry,8)_addOne+0xc7>
  21a50d:	48 8d 3d 04 ae 00 00 	lea    rdi,[rip+0xae04]        # 225318 <__unnamed_5>
  21a514:	31 c0                	xor    eax,eax
  21a516:	89 c6                	mov    esi,eax
            const new_length = self.len + 1;
  21a518:	e8 a3 8b fe ff       	call   2030c0 <panic>
  21a51d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  21a521:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
            try self.ensureCapacity(new_length);
  21a525:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  21a529:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  21a52d:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  21a531:	e8 7a 00 00 00       	call   21a5b0 <AlignedArrayList(FileEntry,8)_ensureCapacity>
  21a536:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  21a53a:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  21a53f:	0f 85 73 ff ff ff    	jne    21a4b8 <AlignedArrayList(FileEntry,8)_addOne+0x38>
  21a545:	eb aa                	jmp    21a4f1 <AlignedArrayList(FileEntry,8)_addOne+0x71>
  21a547:	48 8d 3d b2 ad 00 00 	lea    rdi,[rip+0xadb2]        # 225300 <__unnamed_4>
  21a54e:	31 c0                	xor    eax,eax
  21a550:	89 c6                	mov    esi,eax
            const result = &self.items[self.len];
  21a552:	e8 69 8b fe ff       	call   2030c0 <panic>
  21a557:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  21a55b:	48 6b c8 28          	imul   rcx,rax,0x28
  21a55f:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
  21a563:	48 03 0a             	add    rcx,QWORD PTR [rdx]
  21a566:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
            self.len = new_length;
  21a56a:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  21a56e:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  21a572:	48 89 71 10          	mov    QWORD PTR [rcx+0x10],rsi
            return result;
  21a576:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  21a57a:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  21a580:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  21a584:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  21a588:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  21a58c:	48 89 0e             	mov    QWORD PTR [rsi],rcx
  21a58f:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  21a593:	48 89 4e 08          	mov    QWORD PTR [rsi+0x8],rcx
  21a597:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21a59b:	48 81 c4 80 00 00 00 	add    rsp,0x80
  21a5a2:	5d                   	pop    rbp
  21a5a3:	c3                   	ret    
  21a5a4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21a5ab:	00 00 00 00 00 

000000000021a5b0 <AlignedArrayList(FileEntry,8)_ensureCapacity>:
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  21a5b0:	55                   	push   rbp
  21a5b1:	48 89 e5             	mov    rbp,rsp
  21a5b4:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  21a5bb:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  21a5bf:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
            var better_capacity = self.items.len;
  21a5c3:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  21a5c7:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  21a5cb:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
            if (better_capacity >= new_capacity) return;
  21a5cf:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  21a5d3:	48 3b 55 c0          	cmp    rdx,QWORD PTR [rbp-0x40]
  21a5d7:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  21a5db:	72 11                	jb     21a5ee <AlignedArrayList(FileEntry,8)_ensureCapacity+0x3e>
  21a5dd:	31 c0                	xor    eax,eax
  21a5df:	66 89 c1             	mov    cx,ax
  21a5e2:	66 89 c8             	mov    ax,cx
  21a5e5:	48 81 c4 90 00 00 00 	add    rsp,0x90
  21a5ec:	5d                   	pop    rbp
  21a5ed:	c3                   	ret    
            while (true) {
  21a5ee:	eb 00                	jmp    21a5f0 <AlignedArrayList(FileEntry,8)_ensureCapacity+0x40>
  21a5f0:	eb 00                	jmp    21a5f2 <AlignedArrayList(FileEntry,8)_ensureCapacity+0x42>
  21a5f2:	31 c0                	xor    eax,eax
  21a5f4:	88 c1                	mov    cl,al
                better_capacity += better_capacity / 2 + 8;
  21a5f6:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  21a5fa:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  21a5fe:	f6 c1 01             	test   cl,0x1
  21a601:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  21a605:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  21a609:	0f 85 8e 00 00 00    	jne    21a69d <AlignedArrayList(FileEntry,8)_ensureCapacity+0xed>
  21a60f:	eb 72                	jmp    21a683 <AlignedArrayList(FileEntry,8)_ensureCapacity+0xd3>
                if (better_capacity >= new_capacity) break;
  21a611:	eb 02                	jmp    21a615 <AlignedArrayList(FileEntry,8)_ensureCapacity+0x65>
            while (true) {
  21a613:	eb db                	jmp    21a5f0 <AlignedArrayList(FileEntry,8)_ensureCapacity+0x40>
  21a615:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
            self.items = try self.allocator.alignedRealloc(T, A, self.items, better_capacity);
  21a619:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21a61d:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  21a621:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
  21a625:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  21a629:	4c 8b 45 b8          	mov    r8,QWORD PTR [rbp-0x48]
  21a62d:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  21a631:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  21a635:	e8 d6 00 00 00       	call   21a710 <Allocator_alignedRealloc.62>
  21a63a:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  21a63f:	74 1e                	je     21a65f <AlignedArrayList(FileEntry,8)_ensureCapacity+0xaf>
  21a641:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  21a645:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  21a649:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  21a64d:	e8 fe 9d fe ff       	call   204450 <__zig_return_error>
  21a652:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  21a656:	48 81 c4 90 00 00 00 	add    rsp,0x90
  21a65d:	5d                   	pop    rbp
  21a65e:	c3                   	ret    
  21a65f:	31 c0                	xor    eax,eax
  21a661:	66 89 c1             	mov    cx,ax
  21a664:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21a668:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  21a66c:	48 89 16             	mov    QWORD PTR [rsi],rdx
  21a66f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  21a673:	48 89 56 08          	mov    QWORD PTR [rsi+0x8],rdx
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  21a677:	66 89 c8             	mov    ax,cx
  21a67a:	48 81 c4 90 00 00 00 	add    rsp,0x90
  21a681:	5d                   	pop    rbp
  21a682:	c3                   	ret    
                better_capacity += better_capacity / 2 + 8;
  21a683:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  21a687:	48 c1 e8 01          	shr    rax,0x1
  21a68b:	48 83 c0 08          	add    rax,0x8
  21a68f:	0f 92 c1             	setb   cl
  21a692:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  21a696:	88 4d 87             	mov    BYTE PTR [rbp-0x79],cl
  21a699:	72 12                	jb     21a6ad <AlignedArrayList(FileEntry,8)_ensureCapacity+0xfd>
  21a69b:	eb 20                	jmp    21a6bd <AlignedArrayList(FileEntry,8)_ensureCapacity+0x10d>
  21a69d:	48 8d 3d d4 ae 00 00 	lea    rdi,[rip+0xaed4]        # 225578 <__unnamed_73>
  21a6a4:	31 c0                	xor    eax,eax
  21a6a6:	89 c6                	mov    esi,eax
  21a6a8:	e8 13 8a fe ff       	call   2030c0 <panic>
  21a6ad:	48 8d 3d 64 ac 00 00 	lea    rdi,[rip+0xac64]        # 225318 <__unnamed_5>
  21a6b4:	31 c0                	xor    eax,eax
  21a6b6:	89 c6                	mov    esi,eax
  21a6b8:	e8 03 8a fe ff       	call   2030c0 <panic>
  21a6bd:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  21a6c1:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  21a6c5:	48 01 c8             	add    rax,rcx
  21a6c8:	0f 92 c2             	setb   dl
  21a6cb:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  21a6d2:	88 95 77 ff ff ff    	mov    BYTE PTR [rbp-0x89],dl
  21a6d8:	72 02                	jb     21a6dc <AlignedArrayList(FileEntry,8)_ensureCapacity+0x12c>
  21a6da:	eb 10                	jmp    21a6ec <AlignedArrayList(FileEntry,8)_ensureCapacity+0x13c>
  21a6dc:	48 8d 3d 35 ac 00 00 	lea    rdi,[rip+0xac35]        # 225318 <__unnamed_5>
  21a6e3:	31 c0                	xor    eax,eax
  21a6e5:	89 c6                	mov    esi,eax
  21a6e7:	e8 d4 89 fe ff       	call   2030c0 <panic>
  21a6ec:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  21a6f3:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                if (better_capacity >= new_capacity) break;
  21a6f7:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  21a6fb:	48 3b 4d c0          	cmp    rcx,QWORD PTR [rbp-0x40]
  21a6ff:	0f 83 0c ff ff ff    	jae    21a611 <AlignedArrayList(FileEntry,8)_ensureCapacity+0x61>
  21a705:	e9 09 ff ff ff       	jmp    21a613 <AlignedArrayList(FileEntry,8)_ensureCapacity+0x63>
  21a70a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000021a710 <Allocator_alignedRealloc.62>:
    pub fn alignedRealloc(self: *Allocator, comptime T: type, comptime alignment: u29, old_mem: []align(alignment) T, n: usize) ![]align(alignment) T {
  21a710:	55                   	push   rbp
  21a711:	48 89 e5             	mov    rbp,rsp
  21a714:	53                   	push   rbx
  21a715:	48 81 ec 88 01 00 00 	sub    rsp,0x188
  21a71c:	48 89 f8             	mov    rax,rdi
  21a71f:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
  21a726:	4c 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],r8
        if (old_mem.len == 0) {
  21a72d:	48 83 79 08 00       	cmp    QWORD PTR [rcx+0x8],0x0
  21a732:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  21a739:	48 89 b5 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rsi
  21a740:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
  21a747:	48 89 bd b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rdi
  21a74e:	75 64                	jne    21a7b4 <Allocator_alignedRealloc.62+0xa4>
  21a750:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
            return self.alignedAlloc(T, alignment, n);
  21a754:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  21a75b:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  21a762:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  21a769:	e8 22 04 00 00       	call   21ab90 <Allocator_alignedAlloc.63>
  21a76e:	66 83 7d e0 00       	cmp    WORD PTR [rbp-0x20],0x0
  21a773:	74 0e                	je     21a783 <Allocator_alignedRealloc.62+0x73>
  21a775:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  21a77c:	e8 cf 9c fe ff       	call   204450 <__zig_return_error>
  21a781:	eb 02                	jmp    21a785 <Allocator_alignedRealloc.62+0x75>
  21a783:	eb 00                	jmp    21a785 <Allocator_alignedRealloc.62+0x75>
  21a785:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  21a789:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  21a790:	48 89 01             	mov    QWORD PTR [rcx],rax
  21a793:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21a797:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21a79b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21a79f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21a7a3:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21a7aa:	48 81 c4 88 01 00 00 	add    rsp,0x188
  21a7b1:	5b                   	pop    rbx
  21a7b2:	5d                   	pop    rbp
  21a7b3:	c3                   	ret    
        if (old_mem.len == 0) {
  21a7b4:	eb 00                	jmp    21a7b6 <Allocator_alignedRealloc.62+0xa6>
        if (n == 0) {
  21a7b6:	48 83 bd 10 ff ff ff 	cmp    QWORD PTR [rbp-0xf0],0x0
  21a7bd:	00 
  21a7be:	75 4b                	jne    21a80b <Allocator_alignedRealloc.62+0xfb>
            self.free(old_mem);
  21a7c0:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
  21a7c7:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  21a7ce:	e8 dd 06 00 00       	call   21aeb0 <Allocator_free.64>
            return ([*]align(alignment) T)(undefined)[0..0];
  21a7d3:	48 8b 35 de 66 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffe66de]        # 200eb8 <__unnamed_140>
  21a7da:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  21a7e1:	48 89 37             	mov    QWORD PTR [rdi],rsi
  21a7e4:	48 8b 35 d5 66 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffe66d5]        # 200ec0 <__unnamed_140+0x8>
  21a7eb:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  21a7ef:	48 8b 35 d2 66 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffe66d2]        # 200ec8 <__unnamed_140+0x10>
  21a7f6:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  21a7fa:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21a801:	48 81 c4 88 01 00 00 	add    rsp,0x188
  21a808:	5b                   	pop    rbx
  21a809:	5d                   	pop    rbp
  21a80a:	c3                   	ret    
        if (n == 0) {
  21a80b:	eb 00                	jmp    21a80d <Allocator_alignedRealloc.62+0xfd>
  21a80d:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  21a811:	b8 28 00 00 00       	mov    eax,0x28
  21a816:	89 c2                	mov    edx,eax
        const old_byte_slice = @sliceToBytes(old_mem);
  21a818:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  21a81f:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  21a822:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  21a826:	48 6b 71 08 28       	imul   rsi,QWORD PTR [rcx+0x8],0x28
  21a82b:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  21a82f:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  21a833:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
  21a83a:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  21a83e:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  21a845:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  21a84c:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  21a853:	e8 d8 13 ff ff       	call   20bc30 <mul>
  21a858:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  21a85d:	74 44                	je     21a8a3 <Allocator_alignedRealloc.62+0x193>
  21a85f:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  21a866:	e8 e5 9b fe ff       	call   204450 <__zig_return_error>
  21a86b:	48 8b 3d 5e 66 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe665e]        # 200ed0 <__unnamed_141>
  21a872:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  21a879:	48 89 38             	mov    QWORD PTR [rax],rdi
  21a87c:	48 8b 3d 55 66 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe6655]        # 200ed8 <__unnamed_141+0x8>
  21a883:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  21a887:	48 8b 3d 52 66 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe6652]        # 200ee0 <__unnamed_141+0x10>
  21a88e:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  21a892:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21a899:	48 81 c4 88 01 00 00 	add    rsp,0x188
  21a8a0:	5b                   	pop    rbx
  21a8a1:	5d                   	pop    rbp
  21a8a2:	c3                   	ret    
  21a8a3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21a8a7:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  21a8ae:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  21a8b2:	48 8d 8d 00 ff ff ff 	lea    rcx,[rbp-0x100]
  21a8b9:	41 b9 08 00 00 00    	mov    r9d,0x8
  21a8bf:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  21a8c6:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
        const byte_slice = try self.reallocFn(self, old_byte_slice, byte_count, alignment);
  21a8cd:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  21a8d4:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  21a8d8:	48 8b b5 18 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe8]
  21a8df:	4c 8b 85 f8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x108]
  21a8e6:	4c 8b 95 c8 fe ff ff 	mov    r10,QWORD PTR [rbp-0x138]
  21a8ed:	48 89 b5 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rsi
  21a8f4:	4c 89 d6             	mov    rsi,r10
  21a8f7:	4c 8b 9d a8 fe ff ff 	mov    r11,QWORD PTR [rbp-0x158]
  21a8fe:	48 89 95 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdx
  21a905:	4c 89 da             	mov    rdx,r11
  21a908:	48 8b 9d a0 fe ff ff 	mov    rbx,QWORD PTR [rbp-0x160]
  21a90f:	ff d3                	call   rbx
  21a911:	66 83 7d 98 00       	cmp    WORD PTR [rbp-0x68],0x0
  21a916:	74 5d                	je     21a975 <Allocator_alignedRealloc.62+0x265>
  21a918:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  21a91c:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  21a923:	66 89 85 9e fe ff ff 	mov    WORD PTR [rbp-0x162],ax
  21a92a:	e8 21 9b fe ff       	call   204450 <__zig_return_error>
  21a92f:	66 8b 85 9e fe ff ff 	mov    ax,WORD PTR [rbp-0x162]
  21a936:	66 89 85 68 ff ff ff 	mov    WORD PTR [rbp-0x98],ax
  21a93d:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  21a944:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  21a94b:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21a94e:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  21a955:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21a959:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  21a960:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  21a964:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21a96b:	48 81 c4 88 01 00 00 	add    rsp,0x188
  21a972:	5b                   	pop    rbx
  21a973:	5d                   	pop    rbp
  21a974:	c3                   	ret    
  21a975:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  21a979:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  21a980:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  21a984:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
        assert(byte_slice.len == byte_count);
  21a98b:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  21a992:	48 3b 85 f8 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x108]
  21a999:	0f 94 c1             	sete   cl
  21a99c:	0f b6 f9             	movzx  edi,cl
  21a99f:	e8 5c 86 fe ff       	call   203000 <assert>
        if (n > old_mem.len) {
  21a9a4:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  21a9ab:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  21a9b2:	48 3b 42 08          	cmp    rax,QWORD PTR [rdx+0x8]
  21a9b6:	76 71                	jbe    21aa29 <Allocator_alignedRealloc.62+0x319>
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  21a9b8:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  21a9bf:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21a9c6:	48 39 c8             	cmp    rax,rcx
  21a9c9:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  21a9d0:	48 89 8d 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rcx
  21a9d7:	76 78                	jbe    21aa51 <Allocator_alignedRealloc.62+0x341>
  21a9d9:	eb 66                	jmp    21aa41 <Allocator_alignedRealloc.62+0x331>
  21a9db:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  21a9e2:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
  21a9e9:	48 39 c8             	cmp    rax,rcx
  21a9ec:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  21a9f3:	73 32                	jae    21aa27 <Allocator_alignedRealloc.62+0x317>
  21a9f5:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  21a9fc:	48 03 8d 58 ff ff ff 	add    rcx,QWORD PTR [rbp-0xa8]
  21aa03:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
                byte.* = undefined;
  21aa0a:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  21aa11:	88 01                	mov    BYTE PTR [rcx],al
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  21aa13:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  21aa1a:	48 83 c1 01          	add    rcx,0x1
  21aa1e:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
  21aa25:	eb b4                	jmp    21a9db <Allocator_alignedRealloc.62+0x2cb>
        if (n > old_mem.len) {
  21aa27:	eb 02                	jmp    21aa2b <Allocator_alignedRealloc.62+0x31b>
  21aa29:	eb 00                	jmp    21aa2b <Allocator_alignedRealloc.62+0x31b>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  21aa2b:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  21aa32:	48 83 e0 07          	and    rax,0x7
  21aa36:	48 83 f8 00          	cmp    rax,0x0
  21aa3a:	74 7b                	je     21aab7 <Allocator_alignedRealloc.62+0x3a7>
  21aa3c:	e9 ae 00 00 00       	jmp    21aaef <Allocator_alignedRealloc.62+0x3df>
  21aa41:	48 8d 3d b8 a8 00 00 	lea    rdi,[rip+0xa8b8]        # 225300 <__unnamed_4>
  21aa48:	31 c0                	xor    eax,eax
  21aa4a:	89 c6                	mov    esi,eax
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  21aa4c:	e8 6f 86 fe ff       	call   2030c0 <panic>
  21aa51:	be aa 00 00 00       	mov    esi,0xaa
  21aa56:	b8 08 00 00 00       	mov    eax,0x8
  21aa5b:	89 c2                	mov    edx,eax
  21aa5d:	48 8d 8d e0 fe ff ff 	lea    rcx,[rbp-0x120]
  21aa64:	48 8b bd 90 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x170]
  21aa6b:	48 03 bd e8 fe ff ff 	add    rdi,QWORD PTR [rbp-0x118]
  21aa72:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
  21aa79:	48 8b bd 88 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x178]
  21aa80:	4c 8b 85 90 fe ff ff 	mov    r8,QWORD PTR [rbp-0x170]
  21aa87:	4c 29 c7             	sub    rdi,r8
  21aa8a:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  21aa91:	48 89 cf             	mov    rdi,rcx
  21aa94:	e8 17 72 00 00       	call   221cb0 <memset>
  21aa99:	48 c7 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],0x0
  21aaa0:	00 00 00 00 
  21aaa4:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  21aaab:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  21aab2:	e9 24 ff ff ff       	jmp    21a9db <Allocator_alignedRealloc.62+0x2cb>
  21aab7:	b8 28 00 00 00       	mov    eax,0x28
  21aabc:	89 c1                	mov    ecx,eax
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  21aabe:	48 8b 95 e8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x118]
  21aac5:	48 89 95 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdx
  21aacc:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  21aad3:	48 89 d0             	mov    rax,rdx
  21aad6:	31 f6                	xor    esi,esi
  21aad8:	48 89 95 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rdx
  21aadf:	89 f2                	mov    edx,esi
  21aae1:	48 f7 f1             	div    rcx
  21aae4:	48 83 fa 00          	cmp    rdx,0x0
  21aae8:	74 15                	je     21aaff <Allocator_alignedRealloc.62+0x3ef>
  21aaea:	e9 87 00 00 00       	jmp    21ab76 <Allocator_alignedRealloc.62+0x466>
  21aaef:	48 8d 3d 3a aa 00 00 	lea    rdi,[rip+0xaa3a]        # 225530 <__unnamed_60>
  21aaf6:	31 c0                	xor    eax,eax
  21aaf8:	89 c6                	mov    esi,eax
  21aafa:	e8 c1 85 fe ff       	call   2030c0 <panic>
  21aaff:	b8 28 00 00 00       	mov    eax,0x28
  21ab04:	89 c1                	mov    ecx,eax
  21ab06:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  21ab0d:	31 d2                	xor    edx,edx
  21ab0f:	48 f7 f1             	div    rcx
  21ab12:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  21ab19:	66 c7 85 20 ff ff ff 	mov    WORD PTR [rbp-0xe0],0x0
  21ab20:	00 00 
  21ab22:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  21ab29:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  21ab30:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  21ab37:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  21ab3e:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21ab45:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  21ab4c:	48 89 01             	mov    QWORD PTR [rcx],rax
  21ab4f:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  21ab56:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21ab5a:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21ab61:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21ab65:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21ab6c:	48 81 c4 88 01 00 00 	add    rsp,0x188
  21ab73:	5b                   	pop    rbx
  21ab74:	5d                   	pop    rbp
  21ab75:	c3                   	ret    
  21ab76:	48 8d 3d cb a9 00 00 	lea    rdi,[rip+0xa9cb]        # 225548 <__unnamed_61>
  21ab7d:	31 c0                	xor    eax,eax
  21ab7f:	89 c6                	mov    esi,eax
  21ab81:	e8 3a 85 fe ff       	call   2030c0 <panic>
  21ab86:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  21ab8d:	00 00 00 

000000000021ab90 <Allocator_alignedAlloc.63>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  21ab90:	55                   	push   rbp
  21ab91:	48 89 e5             	mov    rbp,rsp
  21ab94:	48 81 ec 20 01 00 00 	sub    rsp,0x120
  21ab9b:	48 89 f8             	mov    rax,rdi
  21ab9e:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  21aba5:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  21abac:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  21abb3:	00 
  21abb4:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  21abbb:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  21abc2:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  21abc9:	75 37                	jne    21ac02 <Allocator_alignedAlloc.63+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  21abcb:	48 8b 05 16 63 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe6316]        # 200ee8 <__unnamed_142>
  21abd2:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21abd9:	48 89 01             	mov    QWORD PTR [rcx],rax
  21abdc:	48 8b 05 0d 63 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe630d]        # 200ef0 <__unnamed_142+0x8>
  21abe3:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21abe7:	48 8b 05 0a 63 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe630a]        # 200ef8 <__unnamed_142+0x10>
  21abee:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21abf2:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21abf9:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21ac00:	5d                   	pop    rbp
  21ac01:	c3                   	ret    
        if (n == 0) {
  21ac02:	eb 00                	jmp    21ac04 <Allocator_alignedAlloc.63+0x74>
  21ac04:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  21ac08:	b8 28 00 00 00       	mov    eax,0x28
  21ac0d:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  21ac0f:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  21ac16:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21ac1d:	e8 0e 10 ff ff       	call   20bc30 <mul>
  21ac22:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  21ac27:	74 43                	je     21ac6c <Allocator_alignedAlloc.63+0xdc>
  21ac29:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  21ac30:	e8 1b 98 fe ff       	call   204450 <__zig_return_error>
  21ac35:	48 8b 3d c4 62 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe62c4]        # 200f00 <__unnamed_143>
  21ac3c:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21ac43:	48 89 38             	mov    QWORD PTR [rax],rdi
  21ac46:	48 8b 3d bb 62 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe62bb]        # 200f08 <__unnamed_143+0x8>
  21ac4d:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  21ac51:	48 8b 3d b8 62 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe62b8]        # 200f10 <__unnamed_143+0x10>
  21ac58:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  21ac5c:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21ac63:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21ac6a:	5d                   	pop    rbp
  21ac6b:	c3                   	ret    
  21ac6c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21ac70:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  21ac77:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  21ac7b:	41 b8 08 00 00 00    	mov    r8d,0x8
  21ac81:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  21ac88:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  21ac8f:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  21ac96:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  21ac99:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  21aca0:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  21aca7:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  21acae:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  21acb5:	4c 89 ce             	mov    rsi,r9
  21acb8:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  21acbf:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  21acc6:	4c 89 d1             	mov    rcx,r10
  21acc9:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  21acd0:	41 ff d3             	call   r11
  21acd3:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  21acd8:	74 50                	je     21ad2a <Allocator_alignedAlloc.63+0x19a>
  21acda:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  21acde:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  21ace5:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  21acec:	e8 5f 97 fe ff       	call   204450 <__zig_return_error>
  21acf1:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  21acf8:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  21acfc:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  21ad00:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21ad07:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21ad0a:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  21ad0e:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21ad12:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  21ad16:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  21ad1a:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21ad21:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21ad28:	5d                   	pop    rbp
  21ad29:	c3                   	ret    
  21ad2a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  21ad2e:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  21ad35:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21ad39:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  21ad40:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  21ad47:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  21ad4e:	0f 94 c1             	sete   cl
  21ad51:	0f b6 f9             	movzx  edi,cl
  21ad54:	e8 a7 82 fe ff       	call   203000 <assert>
  21ad59:	be aa 00 00 00       	mov    esi,0xaa
  21ad5e:	bf 08 00 00 00       	mov    edi,0x8
  21ad63:	89 fa                	mov    edx,edi
  21ad65:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  21ad6c:	48 89 c7             	mov    rdi,rax
  21ad6f:	e8 3c 6f 00 00       	call   221cb0 <memset>
  21ad74:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  21ad7b:	00 00 00 00 
  21ad7f:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  21ad86:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  21ad8d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  21ad94:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  21ad9b:	48 39 c8             	cmp    rax,rcx
  21ad9e:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  21ada5:	73 32                	jae    21add9 <Allocator_alignedAlloc.63+0x249>
  21ada7:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21adae:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  21adb5:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  21adbc:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  21adc3:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  21adc5:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21adcc:	48 83 c1 01          	add    rcx,0x1
  21add0:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  21add7:	eb b4                	jmp    21ad8d <Allocator_alignedAlloc.63+0x1fd>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  21add9:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  21ade0:	48 83 e0 07          	and    rax,0x7
  21ade4:	48 83 f8 00          	cmp    rax,0x0
  21ade8:	75 32                	jne    21ae1c <Allocator_alignedAlloc.63+0x28c>
  21adea:	b8 28 00 00 00       	mov    eax,0x28
  21adef:	89 c1                	mov    ecx,eax
  21adf1:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
  21adf8:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
  21adfc:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
  21ae03:	48 89 d0             	mov    rax,rdx
  21ae06:	31 f6                	xor    esi,esi
  21ae08:	48 89 95 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdx
  21ae0f:	89 f2                	mov    edx,esi
  21ae11:	48 f7 f1             	div    rcx
  21ae14:	48 83 fa 00          	cmp    rdx,0x0
  21ae18:	74 12                	je     21ae2c <Allocator_alignedAlloc.63+0x29c>
  21ae1a:	eb 77                	jmp    21ae93 <Allocator_alignedAlloc.63+0x303>
  21ae1c:	48 8d 3d 0d a7 00 00 	lea    rdi,[rip+0xa70d]        # 225530 <__unnamed_60>
  21ae23:	31 c0                	xor    eax,eax
  21ae25:	89 c6                	mov    esi,eax
  21ae27:	e8 94 82 fe ff       	call   2030c0 <panic>
  21ae2c:	b8 28 00 00 00       	mov    eax,0x28
  21ae31:	89 c1                	mov    ecx,eax
  21ae33:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  21ae3a:	31 d2                	xor    edx,edx
  21ae3c:	48 f7 f1             	div    rcx
  21ae3f:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  21ae43:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  21ae4a:	00 00 
  21ae4c:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  21ae50:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  21ae57:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  21ae5b:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  21ae5f:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21ae66:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21ae6d:	48 89 01             	mov    QWORD PTR [rcx],rax
  21ae70:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  21ae77:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21ae7b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  21ae7f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21ae83:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21ae8a:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21ae91:	5d                   	pop    rbp
  21ae92:	c3                   	ret    
  21ae93:	48 8d 3d ae a6 00 00 	lea    rdi,[rip+0xa6ae]        # 225548 <__unnamed_61>
  21ae9a:	31 c0                	xor    eax,eax
  21ae9c:	89 c6                	mov    esi,eax
  21ae9e:	e8 1d 82 fe ff       	call   2030c0 <panic>
  21aea3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21aeaa:	84 00 00 00 00 00 

000000000021aeb0 <Allocator_free.64>:
    pub fn free(self: *Allocator, memory: var) void {
  21aeb0:	55                   	push   rbp
  21aeb1:	48 89 e5             	mov    rbp,rsp
  21aeb4:	48 83 ec 60          	sub    rsp,0x60
  21aeb8:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
        const bytes = @sliceToBytes(memory);
  21aebc:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  21aebf:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  21aec3:	48 6b 76 08 28       	imul   rsi,QWORD PTR [rsi+0x8],0x28
  21aec8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21aecc:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  21aed0:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  21aed4:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21aed8:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        if (bytes.len == 0) return;
  21aedc:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
  21aee1:	75 06                	jne    21aee9 <Allocator_free.64+0x39>
  21aee3:	48 83 c4 60          	add    rsp,0x60
  21aee7:	5d                   	pop    rbp
  21aee8:	c3                   	ret    
  21aee9:	31 c0                	xor    eax,eax
  21aeeb:	89 c1                	mov    ecx,eax
        const non_const_ptr = @intToPtr([*]u8, @ptrToInt(bytes.ptr));
  21aeed:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  21aef1:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
        self.freeFn(self, non_const_ptr[0..bytes.len]);
  21aef5:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  21aef9:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  21aefd:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  21af01:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  21af05:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
  21af09:	48 39 f1             	cmp    rcx,rsi
  21af0c:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
  21af10:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
  21af14:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  21af18:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  21af1c:	76 10                	jbe    21af2e <Allocator_free.64+0x7e>
  21af1e:	48 8d 3d db a3 00 00 	lea    rdi,[rip+0xa3db]        # 225300 <__unnamed_4>
  21af25:	31 c0                	xor    eax,eax
  21af27:	89 c6                	mov    esi,eax
  21af29:	e8 92 81 fe ff       	call   2030c0 <panic>
  21af2e:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
  21af32:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21af36:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  21af3a:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  21af3e:	48 83 e9 00          	sub    rcx,0x0
  21af42:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  21af46:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  21af4a:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  21af4e:	ff d1                	call   rcx
    pub fn free(self: *Allocator, memory: var) void {
  21af50:	48 83 c4 60          	add    rsp,0x60
  21af54:	5d                   	pop    rbp
  21af55:	c3                   	ret    
  21af56:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  21af5d:	00 00 00 

000000000021af60 <join>:
    }
}

/// Naively combines a series of paths with the native path seperator.
/// Allocates memory for the result, which must be freed by the caller.
pub fn join(allocator: *Allocator, paths: ...) ![]u8 {
  21af60:	55                   	push   rbp
  21af61:	48 89 e5             	mov    rbp,rsp
  21af64:	48 83 ec 40          	sub    rsp,0x40
  21af68:	48 89 f8             	mov    rax,rdi
  21af6b:	4c 8d 4d e8          	lea    r9,[rbp-0x18]
  21af6f:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
    if (is_windows) {
        return joinWindows(allocator, paths);
    } else {
        return joinPosix(allocator, paths);
  21af73:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  21af77:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  21af7b:	4c 89 cf             	mov    rdi,r9
  21af7e:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  21af82:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  21af86:	e8 45 00 00 00       	call   21afd0 <joinPosix>
  21af8b:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  21af90:	74 0b                	je     21af9d <join+0x3d>
  21af92:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  21af96:	e8 b5 94 fe ff       	call   204450 <__zig_return_error>
  21af9b:	eb 02                	jmp    21af9f <join+0x3f>
  21af9d:	eb 00                	jmp    21af9f <join+0x3f>
  21af9f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21afa3:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  21afa7:	48 89 01             	mov    QWORD PTR [rcx],rax
  21afaa:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21afae:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21afb2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21afb6:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21afba:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21afbe:	48 83 c4 40          	add    rsp,0x40
  21afc2:	5d                   	pop    rbp
  21afc3:	c3                   	ret    
  21afc4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21afcb:	00 00 00 00 00 

000000000021afd0 <joinPosix>:

pub fn joinWindows(allocator: *Allocator, paths: ...) ![]u8 {
    return mem.join(allocator, sep_windows, paths);
}

pub fn joinPosix(allocator: *Allocator, paths: ...) ![]u8 {
  21afd0:	55                   	push   rbp
  21afd1:	48 89 e5             	mov    rbp,rsp
  21afd4:	48 83 ec 50          	sub    rsp,0x50
  21afd8:	48 89 f8             	mov    rax,rdi
  21afdb:	4c 8d 4d e8          	lea    r9,[rbp-0x18]
  21afdf:	41 ba 2f 00 00 00    	mov    r10d,0x2f
  21afe5:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
    return mem.join(allocator, sep_posix, paths);
  21afe9:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  21afed:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  21aff1:	4c 89 cf             	mov    rdi,r9
  21aff4:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  21aff8:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  21affc:	44 89 d1             	mov    ecx,r10d
  21afff:	4c 8b 4d c8          	mov    r9,QWORD PTR [rbp-0x38]
  21b003:	4c 89 45 c0          	mov    QWORD PTR [rbp-0x40],r8
  21b007:	4d 89 c8             	mov    r8,r9
  21b00a:	4c 8b 4d c0          	mov    r9,QWORD PTR [rbp-0x40]
  21b00e:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  21b012:	e8 39 00 00 00       	call   21b050 <join.65>
  21b017:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  21b01c:	74 0b                	je     21b029 <joinPosix+0x59>
  21b01e:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  21b022:	e8 29 94 fe ff       	call   204450 <__zig_return_error>
  21b027:	eb 02                	jmp    21b02b <joinPosix+0x5b>
  21b029:	eb 00                	jmp    21b02b <joinPosix+0x5b>
  21b02b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21b02f:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  21b033:	48 89 01             	mov    QWORD PTR [rcx],rax
  21b036:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21b03a:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21b03e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21b042:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21b046:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21b04a:	48 83 c4 50          	add    rsp,0x50
  21b04e:	5d                   	pop    rbp
  21b04f:	c3                   	ret    

000000000021b050 <join.65>:
    }
};

/// Naively combines a series of strings with a separator.
/// Allocates memory for the result, which must be freed by the caller.
pub fn join(allocator: *Allocator, sep: u8, strings: ...) ![]u8 {
  21b050:	55                   	push   rbp
  21b051:	48 89 e5             	mov    rbp,rsp
  21b054:	48 81 ec c0 01 00 00 	sub    rsp,0x1c0
  21b05b:	88 c8                	mov    al,cl
  21b05d:	49 89 fa             	mov    r10,rdi
  21b060:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  21b067:	88 85 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],al
    comptime assert(strings.len >= 1);
    var total_strings_len: usize = strings.len; // 1 sep per string
  21b06d:	48 c7 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],0x2
  21b074:	02 00 00 00 
    {
        comptime var string_i = 0;
        inline while (string_i < strings.len) : (string_i += 1) {
            const arg = ([]const u8)(strings[string_i]);
  21b078:	49 8b 10             	mov    rdx,QWORD PTR [r8]
  21b07b:	48 89 95 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdx
  21b082:	49 8b 50 08          	mov    rdx,QWORD PTR [r8+0x8]
  21b086:	48 89 95 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rdx
            total_strings_len += arg.len;
  21b08d:	48 8b 95 58 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa8]
  21b094:	48 03 95 40 ff ff ff 	add    rdx,QWORD PTR [rbp-0xc0]
  21b09b:	0f 92 c0             	setb   al
  21b09e:	4c 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],r10
  21b0a5:	4c 89 8d f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],r9
  21b0ac:	48 89 b5 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rsi
  21b0b3:	4c 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],r8
  21b0ba:	48 89 bd d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rdi
  21b0c1:	48 89 95 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rdx
  21b0c8:	88 85 cf fe ff ff    	mov    BYTE PTR [rbp-0x131],al
  21b0ce:	0f 82 24 01 00 00    	jb     21b1f8 <join.65+0x1a8>
  21b0d4:	e9 2f 01 00 00       	jmp    21b208 <join.65+0x1b8>
        }
    }

    const buf = try allocator.alloc(u8, total_strings_len);
  21b0d9:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  21b0dd:	48 8b bd e8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x118]
  21b0e4:	66 89 85 cc fe ff ff 	mov    WORD PTR [rbp-0x134],ax
  21b0eb:	e8 60 93 fe ff       	call   204450 <__zig_return_error>
  21b0f0:	66 8b 85 cc fe ff ff 	mov    ax,WORD PTR [rbp-0x134]
  21b0f7:	66 89 45 b8          	mov    WORD PTR [rbp-0x48],ax
  21b0fb:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  21b0ff:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
  21b106:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21b109:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21b10d:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21b111:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  21b115:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  21b119:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  21b120:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  21b127:	5d                   	pop    rbp
  21b128:	c3                   	ret    
  21b129:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21b12d:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  21b134:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21b138:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
    errdefer allocator.free(buf);

    var buf_index: usize = 0;
  21b13f:	48 c7 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],0x0
  21b146:	00 00 00 00 
    comptime var string_i = 0;
    inline while (true) {
        const arg = ([]const u8)(strings[string_i]);
  21b14a:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
  21b151:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  21b154:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  21b15b:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  21b15f:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
        string_i += 1;
        copy(u8, buf[buf_index..], arg);
  21b166:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21b16d:	48 8b 95 30 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd0]
  21b174:	48 39 d1             	cmp    rcx,rdx
  21b177:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
  21b17e:	48 89 95 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rdx
  21b185:	0f 86 27 01 00 00    	jbe    21b2b2 <join.65+0x262>
  21b18b:	e9 12 01 00 00       	jmp    21b2a2 <join.65+0x252>
        buf_index += arg.len;
        if (string_i >= strings.len) break;
        if (buf[buf_index - 1] != sep) {
            buf[buf_index] = sep;
  21b190:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21b197:	48 3b 85 30 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xd0]
  21b19e:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  21b1a5:	0f 82 ff 01 00 00    	jb     21b3aa <join.65+0x35a>
  21b1ab:	e9 ea 01 00 00       	jmp    21b39a <join.65+0x34a>
        if (buf[buf_index - 1] != sep) {
  21b1b0:	eb 00                	jmp    21b1b2 <join.65+0x162>
        const arg = ([]const u8)(strings[string_i]);
  21b1b2:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  21b1b9:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  21b1bc:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  21b1c3:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  21b1c7:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
        copy(u8, buf[buf_index..], arg);
  21b1ce:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21b1d5:	48 8b 95 30 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd0]
  21b1dc:	48 39 d1             	cmp    rcx,rdx
  21b1df:	48 89 8d a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rcx
  21b1e6:	48 89 95 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdx
  21b1ed:	0f 86 20 02 00 00    	jbe    21b413 <join.65+0x3c3>
  21b1f3:	e9 0b 02 00 00       	jmp    21b403 <join.65+0x3b3>
  21b1f8:	48 8d 3d 19 a1 00 00 	lea    rdi,[rip+0xa119]        # 225318 <__unnamed_5>
  21b1ff:	31 c0                	xor    eax,eax
  21b201:	89 c6                	mov    esi,eax
            total_strings_len += arg.len;
  21b203:	e8 b8 7e fe ff       	call   2030c0 <panic>
  21b208:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21b20f:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
            const arg = ([]const u8)(strings[string_i]);
  21b216:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21b21d:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
  21b220:	48 89 95 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdx
  21b227:	48 8b 51 08          	mov    rdx,QWORD PTR [rcx+0x8]
  21b22b:	48 89 95 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rdx
            total_strings_len += arg.len;
  21b232:	48 8b 95 58 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa8]
  21b239:	48 03 95 40 ff ff ff 	add    rdx,QWORD PTR [rbp-0xc0]
  21b240:	40 0f 92 c6          	setb   sil
  21b244:	48 89 95 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rdx
  21b24b:	40 88 b5 97 fe ff ff 	mov    BYTE PTR [rbp-0x169],sil
  21b252:	72 02                	jb     21b256 <join.65+0x206>
  21b254:	eb 10                	jmp    21b266 <join.65+0x216>
  21b256:	48 8d 3d bb a0 00 00 	lea    rdi,[rip+0xa0bb]        # 225318 <__unnamed_5>
  21b25d:	31 c0                	xor    eax,eax
  21b25f:	89 c6                	mov    esi,eax
  21b261:	e8 5a 7e fe ff       	call   2030c0 <panic>
  21b266:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
  21b26a:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
  21b271:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
    const buf = try allocator.alloc(u8, total_strings_len);
  21b278:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  21b27f:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  21b286:	48 8b b5 e8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x118]
  21b28d:	e8 2e da ff ff       	call   218cc0 <Allocator_alloc.57>
  21b292:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  21b297:	0f 85 3c fe ff ff    	jne    21b0d9 <join.65+0x89>
  21b29d:	e9 87 fe ff ff       	jmp    21b129 <join.65+0xd9>
  21b2a2:	48 8d 3d 57 a0 00 00 	lea    rdi,[rip+0xa057]        # 225300 <__unnamed_4>
  21b2a9:	31 c0                	xor    eax,eax
  21b2ab:	89 c6                	mov    esi,eax
        copy(u8, buf[buf_index..], arg);
  21b2ad:	e8 0e 7e fe ff       	call   2030c0 <panic>
  21b2b2:	48 8d 7d a8          	lea    rdi,[rbp-0x58]
  21b2b6:	48 8d b5 00 ff ff ff 	lea    rsi,[rbp-0x100]
  21b2bd:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  21b2c4:	48 03 85 28 ff ff ff 	add    rax,QWORD PTR [rbp-0xd8]
  21b2cb:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  21b2cf:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  21b2d6:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  21b2dd:	48 29 c8             	sub    rax,rcx
  21b2e0:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  21b2e4:	e8 67 02 00 00       	call   21b550 <copy>
        buf_index += arg.len;
  21b2e9:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21b2f0:	48 03 85 08 ff ff ff 	add    rax,QWORD PTR [rbp-0xf8]
  21b2f7:	0f 92 c2             	setb   dl
  21b2fa:	48 89 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rax
  21b301:	88 95 87 fe ff ff    	mov    BYTE PTR [rbp-0x179],dl
  21b307:	72 02                	jb     21b30b <join.65+0x2bb>
  21b309:	eb 10                	jmp    21b31b <join.65+0x2cb>
  21b30b:	48 8d 3d 06 a0 00 00 	lea    rdi,[rip+0xa006]        # 225318 <__unnamed_5>
  21b312:	31 c0                	xor    eax,eax
  21b314:	89 c6                	mov    esi,eax
  21b316:	e8 a5 7d fe ff       	call   2030c0 <panic>
  21b31b:	48 8b 85 88 fe ff ff 	mov    rax,QWORD PTR [rbp-0x178]
  21b322:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
        if (buf[buf_index - 1] != sep) {
  21b329:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21b330:	48 83 e9 01          	sub    rcx,0x1
  21b334:	0f 92 c2             	setb   dl
  21b337:	48 89 8d 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rcx
  21b33e:	88 95 77 fe ff ff    	mov    BYTE PTR [rbp-0x189],dl
  21b344:	72 02                	jb     21b348 <join.65+0x2f8>
  21b346:	eb 10                	jmp    21b358 <join.65+0x308>
  21b348:	48 8d 3d c9 9f 00 00 	lea    rdi,[rip+0x9fc9]        # 225318 <__unnamed_5>
  21b34f:	31 c0                	xor    eax,eax
  21b351:	89 c6                	mov    esi,eax
  21b353:	e8 68 7d fe ff       	call   2030c0 <panic>
  21b358:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
  21b35f:	48 3b 85 30 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xd0]
  21b366:	72 10                	jb     21b378 <join.65+0x328>
  21b368:	48 8d 3d 91 9f 00 00 	lea    rdi,[rip+0x9f91]        # 225300 <__unnamed_4>
  21b36f:	31 c0                	xor    eax,eax
  21b371:	89 c6                	mov    esi,eax
  21b373:	e8 48 7d fe ff       	call   2030c0 <panic>
  21b378:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  21b37f:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  21b386:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  21b389:	3a 95 67 ff ff ff    	cmp    dl,BYTE PTR [rbp-0x99]
  21b38f:	0f 85 fb fd ff ff    	jne    21b190 <join.65+0x140>
  21b395:	e9 16 fe ff ff       	jmp    21b1b0 <join.65+0x160>
  21b39a:	48 8d 3d 5f 9f 00 00 	lea    rdi,[rip+0x9f5f]        # 225300 <__unnamed_4>
  21b3a1:	31 c0                	xor    eax,eax
  21b3a3:	89 c6                	mov    esi,eax
            buf[buf_index] = sep;
  21b3a5:	e8 16 7d fe ff       	call   2030c0 <panic>
  21b3aa:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  21b3b1:	8a 8d 67 ff ff ff    	mov    cl,BYTE PTR [rbp-0x99]
  21b3b7:	48 8b 95 b0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x150]
  21b3be:	88 0c 10             	mov    BYTE PTR [rax+rdx*1],cl
            buf_index += 1;
  21b3c1:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21b3c8:	48 83 c0 01          	add    rax,0x1
  21b3cc:	0f 92 c1             	setb   cl
  21b3cf:	48 89 85 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rax
  21b3d6:	88 8d 67 fe ff ff    	mov    BYTE PTR [rbp-0x199],cl
  21b3dc:	72 02                	jb     21b3e0 <join.65+0x390>
  21b3de:	eb 10                	jmp    21b3f0 <join.65+0x3a0>
  21b3e0:	48 8d 3d 31 9f 00 00 	lea    rdi,[rip+0x9f31]        # 225318 <__unnamed_5>
  21b3e7:	31 c0                	xor    eax,eax
  21b3e9:	89 c6                	mov    esi,eax
  21b3eb:	e8 d0 7c fe ff       	call   2030c0 <panic>
  21b3f0:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
  21b3f7:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
        if (buf[buf_index - 1] != sep) {
  21b3fe:	e9 af fd ff ff       	jmp    21b1b2 <join.65+0x162>
  21b403:	48 8d 3d f6 9e 00 00 	lea    rdi,[rip+0x9ef6]        # 225300 <__unnamed_4>
  21b40a:	31 c0                	xor    eax,eax
  21b40c:	89 c6                	mov    esi,eax
        copy(u8, buf[buf_index..], arg);
  21b40e:	e8 ad 7c fe ff       	call   2030c0 <panic>
  21b413:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  21b417:	48 8d b5 00 ff ff ff 	lea    rsi,[rbp-0x100]
  21b41e:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
  21b425:	48 03 85 28 ff ff ff 	add    rax,QWORD PTR [rbp-0xd8]
  21b42c:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  21b430:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
  21b437:	48 8b 8d a8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x158]
  21b43e:	48 29 c8             	sub    rax,rcx
  21b441:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  21b445:	e8 06 01 00 00       	call   21b550 <copy>
        buf_index += arg.len;
  21b44a:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21b451:	48 03 85 08 ff ff ff 	add    rax,QWORD PTR [rbp-0xf8]
  21b458:	0f 92 c2             	setb   dl
  21b45b:	48 89 85 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rax
  21b462:	88 95 57 fe ff ff    	mov    BYTE PTR [rbp-0x1a9],dl
  21b468:	72 02                	jb     21b46c <join.65+0x41c>
  21b46a:	eb 10                	jmp    21b47c <join.65+0x42c>
  21b46c:	48 8d 3d a5 9e 00 00 	lea    rdi,[rip+0x9ea5]        # 225318 <__unnamed_5>
  21b473:	31 c0                	xor    eax,eax
  21b475:	89 c6                	mov    esi,eax
  21b477:	e8 44 7c fe ff       	call   2030c0 <panic>
  21b47c:	31 c0                	xor    eax,eax
  21b47e:	89 c1                	mov    ecx,eax
  21b480:	48 8b 95 58 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1a8]
  21b487:	48 89 95 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdx
        }
    }

    return buf[0..buf_index];
  21b48e:	48 8b b5 20 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe0]
  21b495:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
  21b49c:	48 39 f1             	cmp    rcx,rsi
  21b49f:	48 89 bd 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rdi
  21b4a6:	48 89 b5 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rsi
  21b4ad:	76 10                	jbe    21b4bf <join.65+0x46f>
  21b4af:	48 8d 3d 4a 9e 00 00 	lea    rdi,[rip+0x9e4a]        # 225300 <__unnamed_4>
  21b4b6:	31 c0                	xor    eax,eax
  21b4b8:	89 c6                	mov    esi,eax
  21b4ba:	e8 01 7c fe ff       	call   2030c0 <panic>
  21b4bf:	48 8b 85 40 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c0]
  21b4c6:	48 8b 8d 48 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1b8]
  21b4cd:	48 39 c8             	cmp    rax,rcx
  21b4d0:	76 10                	jbe    21b4e2 <join.65+0x492>
  21b4d2:	48 8d 3d 27 9e 00 00 	lea    rdi,[rip+0x9e27]        # 225300 <__unnamed_4>
  21b4d9:	31 c0                	xor    eax,eax
  21b4db:	89 c6                	mov    esi,eax
  21b4dd:	e8 de 7b fe ff       	call   2030c0 <panic>
  21b4e2:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  21b4e9:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  21b4ed:	48 8b 85 40 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c0]
  21b4f4:	48 83 e8 00          	sub    rax,0x0
  21b4f8:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  21b4fc:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  21b503:	00 00 
  21b505:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  21b509:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  21b510:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  21b514:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  21b518:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21b51f:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
  21b526:	48 89 01             	mov    QWORD PTR [rcx],rax
  21b529:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  21b530:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21b534:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  21b538:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21b53c:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  21b543:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  21b54a:	5d                   	pop    rbp
  21b54b:	c3                   	ret    
  21b54c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000021b550 <copy>:
pub fn copy(comptime T: type, dest: []T, source: []const T) void {
  21b550:	55                   	push   rbp
  21b551:	48 89 e5             	mov    rbp,rsp
    assert(dest.len >= source.len);
  21b554:	48 83 ec 30          	sub    rsp,0x30
  21b558:	48 8b 47 08          	mov    rax,QWORD PTR [rdi+0x8]
  21b55c:	48 3b 46 08          	cmp    rax,QWORD PTR [rsi+0x8]
  21b560:	0f 93 c1             	setae  cl
  21b563:	0f b6 d1             	movzx  edx,cl
  21b566:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  21b56a:	89 d7                	mov    edi,edx
  21b56c:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  21b570:	e8 8b 7a fe ff       	call   203000 <assert>
    for (source) |s, i|
  21b575:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  21b57c:	00 
  21b57d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  21b581:	48 8b 70 08          	mov    rsi,QWORD PTR [rax+0x8]
  21b585:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  21b589:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21b58d:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  21b591:	48 39 c8             	cmp    rax,rcx
  21b594:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  21b598:	73 30                	jae    21b5ca <copy+0x7a>
  21b59a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  21b59e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  21b5a1:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  21b5a5:	40 8a 34 11          	mov    sil,BYTE PTR [rcx+rdx*1]
  21b5a9:	40 88 75 ff          	mov    BYTE PTR [rbp-0x1],sil
        dest[i] = s;
  21b5ad:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  21b5b1:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  21b5b5:	4c 8b 07             	mov    r8,QWORD PTR [rdi]
  21b5b8:	40 8a 75 ff          	mov    sil,BYTE PTR [rbp-0x1]
  21b5bc:	41 88 34 08          	mov    BYTE PTR [r8+rcx*1],sil
    for (source) |s, i|
  21b5c0:	48 83 c2 01          	add    rdx,0x1
  21b5c4:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  21b5c8:	eb bf                	jmp    21b589 <copy+0x39>
pub fn copy(comptime T: type, dest: []T, source: []const T) void {
  21b5ca:	48 83 c4 30          	add    rsp,0x30
  21b5ce:	5d                   	pop    rbp
  21b5cf:	c3                   	ret    

000000000021b5d0 <format.66>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  21b5d0:	55                   	push   rbp
  21b5d1:	48 89 e5             	mov    rbp,rsp
  21b5d4:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  21b5db:	48 8b 45 18          	mov    rax,QWORD PTR [rbp+0x18]
  21b5df:	4c 8b 55 10          	mov    r10,QWORD PTR [rbp+0x10]
  21b5e3:	4c 8d 1d 9e a0 00 00 	lea    r11,[rip+0xa09e]        # 225688 <__unnamed_144>
  21b5ea:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  21b5ee:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  21b5f2:	4c 89 45 d0          	mov    QWORD PTR [rbp-0x30],r8
  21b5f6:	4c 89 4d c8          	mov    QWORD PTR [rbp-0x38],r9
                        try output(context, fmt[start_index..i]);
  21b5fa:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  21b5fe:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  21b602:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
  21b606:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  21b60a:	4c 89 da             	mov    rdx,r11
  21b60d:	4c 8b 45 b8          	mov    r8,QWORD PTR [rbp-0x48]
  21b611:	4c 89 55 b0          	mov    QWORD PTR [rbp-0x50],r10
  21b615:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  21b619:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  21b61d:	41 ff d0             	call   r8
  21b620:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  21b624:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  21b629:	74 1e                	je     21b649 <format.66+0x79>
  21b62b:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  21b62f:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21b633:	66 89 45 9e          	mov    WORD PTR [rbp-0x62],ax
  21b637:	e8 14 8e fe ff       	call   204450 <__zig_return_error>
  21b63c:	66 8b 45 9e          	mov    ax,WORD PTR [rbp-0x62]
  21b640:	48 81 c4 80 00 00 00 	add    rsp,0x80
  21b647:	5d                   	pop    rbp
  21b648:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  21b649:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  21b64d:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  21b651:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21b655:	48 8b 75 a8          	mov    rsi,QWORD PTR [rbp-0x58]
  21b659:	e8 72 02 00 00       	call   21b8d0 <formatType.67>
  21b65e:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  21b662:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  21b667:	74 1e                	je     21b687 <format.66+0xb7>
  21b669:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  21b66d:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21b671:	66 89 45 9c          	mov    WORD PTR [rbp-0x64],ax
  21b675:	e8 d6 8d fe ff       	call   204450 <__zig_return_error>
  21b67a:	66 8b 45 9c          	mov    ax,WORD PTR [rbp-0x64]
  21b67e:	48 81 c4 80 00 00 00 	add    rsp,0x80
  21b685:	5d                   	pop    rbp
  21b686:	c3                   	ret    
  21b687:	48 8d 15 12 a0 00 00 	lea    rdx,[rip+0xa012]        # 2256a0 <__unnamed_145>
                        try output(context, fmt[start_index..i]);
  21b68e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21b692:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  21b696:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21b69a:	ff d0                	call   rax
  21b69c:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  21b6a0:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  21b6a5:	74 1e                	je     21b6c5 <format.66+0xf5>
  21b6a7:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  21b6ab:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21b6af:	66 89 45 9a          	mov    WORD PTR [rbp-0x66],ax
  21b6b3:	e8 98 8d fe ff       	call   204450 <__zig_return_error>
  21b6b8:	66 8b 45 9a          	mov    ax,WORD PTR [rbp-0x66]
  21b6bc:	48 81 c4 80 00 00 00 	add    rsp,0x80
  21b6c3:	5d                   	pop    rbp
  21b6c4:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  21b6c5:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  21b6c9:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  21b6cd:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  21b6d1:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21b6d5:	e8 56 02 00 00       	call   21b930 <formatType.68>
  21b6da:	66 89 45 f8          	mov    WORD PTR [rbp-0x8],ax
  21b6de:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  21b6e3:	74 1e                	je     21b703 <format.66+0x133>
  21b6e5:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  21b6e9:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21b6ed:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  21b6f1:	e8 5a 8d fe ff       	call   204450 <__zig_return_error>
  21b6f6:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  21b6fa:	48 81 c4 80 00 00 00 	add    rsp,0x80
  21b701:	5d                   	pop    rbp
  21b702:	c3                   	ret    
  21b703:	48 8d 15 ae 9f 00 00 	lea    rdx,[rip+0x9fae]        # 2256b8 <__unnamed_146>
                        try output(context, fmt[start_index..i]);
  21b70a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21b70e:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  21b712:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21b716:	ff d0                	call   rax
  21b718:	66 89 45 f6          	mov    WORD PTR [rbp-0xa],ax
  21b71c:	66 83 7d f6 00       	cmp    WORD PTR [rbp-0xa],0x0
  21b721:	74 1e                	je     21b741 <format.66+0x171>
  21b723:	66 8b 45 f6          	mov    ax,WORD PTR [rbp-0xa]
  21b727:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21b72b:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  21b72f:	e8 1c 8d fe ff       	call   204450 <__zig_return_error>
  21b734:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  21b738:	48 81 c4 80 00 00 00 	add    rsp,0x80
  21b73f:	5d                   	pop    rbp
  21b740:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  21b741:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  21b745:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  21b749:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  21b74d:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21b751:	e8 da 01 00 00       	call   21b930 <formatType.68>
  21b756:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
  21b75a:	66 83 7d f4 00       	cmp    WORD PTR [rbp-0xc],0x0
  21b75f:	74 1e                	je     21b77f <format.66+0x1af>
  21b761:	66 8b 45 f4          	mov    ax,WORD PTR [rbp-0xc]
  21b765:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21b769:	66 89 45 94          	mov    WORD PTR [rbp-0x6c],ax
  21b76d:	e8 de 8c fe ff       	call   204450 <__zig_return_error>
  21b772:	66 8b 45 94          	mov    ax,WORD PTR [rbp-0x6c]
  21b776:	48 81 c4 80 00 00 00 	add    rsp,0x80
  21b77d:	5d                   	pop    rbp
  21b77e:	c3                   	ret    
  21b77f:	48 8d 15 4a 9f 00 00 	lea    rdx,[rip+0x9f4a]        # 2256d0 <__unnamed_147>
                        try output(context, fmt[start_index..i]);
  21b786:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21b78a:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  21b78e:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21b792:	ff d0                	call   rax
  21b794:	66 89 45 f2          	mov    WORD PTR [rbp-0xe],ax
  21b798:	66 83 7d f2 00       	cmp    WORD PTR [rbp-0xe],0x0
  21b79d:	74 1e                	je     21b7bd <format.66+0x1ed>
  21b79f:	66 8b 45 f2          	mov    ax,WORD PTR [rbp-0xe]
  21b7a3:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21b7a7:	66 89 45 92          	mov    WORD PTR [rbp-0x6e],ax
  21b7ab:	e8 a0 8c fe ff       	call   204450 <__zig_return_error>
  21b7b0:	66 8b 45 92          	mov    ax,WORD PTR [rbp-0x6e]
  21b7b4:	48 81 c4 80 00 00 00 	add    rsp,0x80
  21b7bb:	5d                   	pop    rbp
  21b7bc:	c3                   	ret    
                    try formatType(args[next_arg], fmt[s..i], context, Errors, output);
  21b7bd:	48 8b 75 10          	mov    rsi,QWORD PTR [rbp+0x10]
  21b7c1:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  21b7c5:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  21b7c9:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21b7cd:	e8 ae 01 00 00       	call   21b980 <formatType.69>
  21b7d2:	66 89 45 f0          	mov    WORD PTR [rbp-0x10],ax
  21b7d6:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  21b7db:	74 1e                	je     21b7fb <format.66+0x22b>
  21b7dd:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  21b7e1:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21b7e5:	66 89 45 90          	mov    WORD PTR [rbp-0x70],ax
  21b7e9:	e8 62 8c fe ff       	call   204450 <__zig_return_error>
  21b7ee:	66 8b 45 90          	mov    ax,WORD PTR [rbp-0x70]
  21b7f2:	48 81 c4 80 00 00 00 	add    rsp,0x80
  21b7f9:	5d                   	pop    rbp
  21b7fa:	c3                   	ret    
  21b7fb:	48 8d 15 e6 9e 00 00 	lea    rdx,[rip+0x9ee6]        # 2256e8 <__unnamed_148>
                        try output(context, fmt[start_index..i]);
  21b802:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21b806:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  21b80a:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21b80e:	ff d0                	call   rax
  21b810:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  21b814:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  21b819:	74 1e                	je     21b839 <format.66+0x269>
  21b81b:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  21b81f:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21b823:	66 89 45 8e          	mov    WORD PTR [rbp-0x72],ax
  21b827:	e8 24 8c fe ff       	call   204450 <__zig_return_error>
  21b82c:	66 8b 45 8e          	mov    ax,WORD PTR [rbp-0x72]
  21b830:	48 81 c4 80 00 00 00 	add    rsp,0x80
  21b837:	5d                   	pop    rbp
  21b838:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  21b839:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  21b83d:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  21b841:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21b845:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  21b849:	e8 82 00 00 00       	call   21b8d0 <formatType.67>
  21b84e:	66 89 45 ec          	mov    WORD PTR [rbp-0x14],ax
  21b852:	66 83 7d ec 00       	cmp    WORD PTR [rbp-0x14],0x0
  21b857:	74 1e                	je     21b877 <format.66+0x2a7>
  21b859:	66 8b 45 ec          	mov    ax,WORD PTR [rbp-0x14]
  21b85d:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21b861:	66 89 45 8c          	mov    WORD PTR [rbp-0x74],ax
  21b865:	e8 e6 8b fe ff       	call   204450 <__zig_return_error>
  21b86a:	66 8b 45 8c          	mov    ax,WORD PTR [rbp-0x74]
  21b86e:	48 81 c4 80 00 00 00 	add    rsp,0x80
  21b875:	5d                   	pop    rbp
  21b876:	c3                   	ret    
  21b877:	48 8d 15 82 9e 00 00 	lea    rdx,[rip+0x9e82]        # 225700 <__unnamed_149>
        try output(context, fmt[start_index..]);
  21b87e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21b882:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  21b886:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21b88a:	ff d0                	call   rax
  21b88c:	66 89 45 ea          	mov    WORD PTR [rbp-0x16],ax
  21b890:	66 83 7d ea 00       	cmp    WORD PTR [rbp-0x16],0x0
  21b895:	74 1e                	je     21b8b5 <format.66+0x2e5>
  21b897:	66 8b 45 ea          	mov    ax,WORD PTR [rbp-0x16]
  21b89b:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21b89f:	66 89 45 8a          	mov    WORD PTR [rbp-0x76],ax
  21b8a3:	e8 a8 8b fe ff       	call   204450 <__zig_return_error>
  21b8a8:	66 8b 45 8a          	mov    ax,WORD PTR [rbp-0x76]
  21b8ac:	48 81 c4 80 00 00 00 	add    rsp,0x80
  21b8b3:	5d                   	pop    rbp
  21b8b4:	c3                   	ret    
  21b8b5:	31 c0                	xor    eax,eax
  21b8b7:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  21b8ba:	66 89 c8             	mov    ax,cx
  21b8bd:	48 81 c4 80 00 00 00 	add    rsp,0x80
  21b8c4:	5d                   	pop    rbp
  21b8c5:	c3                   	ret    
  21b8c6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  21b8cd:	00 00 00 

000000000021b8d0 <formatType.67>:
pub fn formatType(
  21b8d0:	55                   	push   rbp
  21b8d1:	48 89 e5             	mov    rbp,rsp
  21b8d4:	48 83 ec 30          	sub    rsp,0x30
  21b8d8:	48 8d 45 e0          	lea    rax,[rbp-0x20]
  21b8dc:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  21b8e0:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
                const casted_value = ([]const u8)(value);
  21b8e4:	48 8b 0e             	mov    rcx,QWORD PTR [rsi]
  21b8e7:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  21b8eb:	48 8b 4e 08          	mov    rcx,QWORD PTR [rsi+0x8]
  21b8ef:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
                return output(context, casted_value);
  21b8f3:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  21b8f7:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21b8fb:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  21b8ff:	48 89 c2             	mov    rdx,rax
  21b902:	ff d1                	call   rcx
  21b904:	66 83 f8 00          	cmp    ax,0x0
  21b908:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  21b90c:	74 0b                	je     21b919 <formatType.67+0x49>
  21b90e:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  21b912:	e8 39 8b fe ff       	call   204450 <__zig_return_error>
  21b917:	eb 02                	jmp    21b91b <formatType.67+0x4b>
  21b919:	eb 00                	jmp    21b91b <formatType.67+0x4b>
  21b91b:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  21b91f:	48 83 c4 30          	add    rsp,0x30
  21b923:	5d                   	pop    rbp
  21b924:	c3                   	ret    
  21b925:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21b92c:	00 00 00 00 

000000000021b930 <formatType.68>:
pub fn formatType(
  21b930:	55                   	push   rbp
  21b931:	48 89 e5             	mov    rbp,rsp
  21b934:	48 83 ec 30          	sub    rsp,0x30
  21b938:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21b93c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  21b940:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return formatValue(value, fmt, context, Errors, output);
  21b944:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21b948:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21b94c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21b950:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  21b954:	e8 d7 2c 00 00       	call   21e630 <formatValue.89>
  21b959:	66 83 f8 00          	cmp    ax,0x0
  21b95d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  21b961:	74 0b                	je     21b96e <formatType.68+0x3e>
  21b963:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21b967:	e8 e4 8a fe ff       	call   204450 <__zig_return_error>
  21b96c:	eb 02                	jmp    21b970 <formatType.68+0x40>
  21b96e:	eb 00                	jmp    21b970 <formatType.68+0x40>
  21b970:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  21b974:	48 83 c4 30          	add    rsp,0x30
  21b978:	5d                   	pop    rbp
  21b979:	c3                   	ret    
  21b97a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000021b980 <formatType.69>:
pub fn formatType(
  21b980:	55                   	push   rbp
  21b981:	48 89 e5             	mov    rbp,rsp
  21b984:	48 83 ec 30          	sub    rsp,0x30
  21b988:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21b98c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  21b990:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return formatValue(value, fmt, context, Errors, output);
  21b994:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21b998:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21b99c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21b9a0:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  21b9a4:	e8 d7 2c 00 00       	call   21e680 <formatValue.90>
  21b9a9:	66 83 f8 00          	cmp    ax,0x0
  21b9ad:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  21b9b1:	74 0b                	je     21b9be <formatType.69+0x3e>
  21b9b3:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21b9b7:	e8 94 8a fe ff       	call   204450 <__zig_return_error>
  21b9bc:	eb 02                	jmp    21b9c0 <formatType.69+0x40>
  21b9be:	eb 00                	jmp    21b9c0 <formatType.69+0x40>
  21b9c0:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  21b9c4:	48 83 c4 30          	add    rsp,0x30
  21b9c8:	5d                   	pop    rbp
  21b9c9:	c3                   	ret    
  21b9ca:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000021b9d0 <format.70>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  21b9d0:	55                   	push   rbp
  21b9d1:	48 89 e5             	mov    rbp,rsp
  21b9d4:	48 83 ec 70          	sub    rsp,0x70
  21b9d8:	48 8b 45 18          	mov    rax,QWORD PTR [rbp+0x18]
  21b9dc:	4c 8b 55 10          	mov    r10,QWORD PTR [rbp+0x10]
  21b9e0:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  21b9e4:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  21b9e8:	4c 89 45 d0          	mov    QWORD PTR [rbp-0x30],r8
  21b9ec:	4c 89 4d c8          	mov    QWORD PTR [rbp-0x38],r9
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  21b9f0:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  21b9f4:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  21b9f8:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
  21b9fc:	48 89 75 b8          	mov    QWORD PTR [rbp-0x48],rsi
  21ba00:	48 89 ce             	mov    rsi,rcx
  21ba03:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  21ba07:	4c 89 55 b0          	mov    QWORD PTR [rbp-0x50],r10
  21ba0b:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  21ba0f:	e8 4c 02 00 00       	call   21bc60 <formatType.71>
  21ba14:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  21ba18:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  21ba1d:	74 1b                	je     21ba3a <format.70+0x6a>
  21ba1f:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  21ba23:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21ba27:	66 89 45 a6          	mov    WORD PTR [rbp-0x5a],ax
  21ba2b:	e8 20 8a fe ff       	call   204450 <__zig_return_error>
  21ba30:	66 8b 45 a6          	mov    ax,WORD PTR [rbp-0x5a]
  21ba34:	48 83 c4 70          	add    rsp,0x70
  21ba38:	5d                   	pop    rbp
  21ba39:	c3                   	ret    
  21ba3a:	48 8d 15 d7 9c 00 00 	lea    rdx,[rip+0x9cd7]        # 225718 <__unnamed_150>
                        try output(context, fmt[start_index..i]);
  21ba41:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21ba45:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  21ba49:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21ba4d:	ff d0                	call   rax
  21ba4f:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  21ba53:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  21ba58:	74 1b                	je     21ba75 <format.70+0xa5>
  21ba5a:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  21ba5e:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21ba62:	66 89 45 a4          	mov    WORD PTR [rbp-0x5c],ax
  21ba66:	e8 e5 89 fe ff       	call   204450 <__zig_return_error>
  21ba6b:	66 8b 45 a4          	mov    ax,WORD PTR [rbp-0x5c]
  21ba6f:	48 83 c4 70          	add    rsp,0x70
  21ba73:	5d                   	pop    rbp
  21ba74:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  21ba75:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  21ba79:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  21ba7d:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  21ba81:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21ba85:	e8 36 02 00 00       	call   21bcc0 <formatType.72>
  21ba8a:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  21ba8e:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  21ba93:	74 1b                	je     21bab0 <format.70+0xe0>
  21ba95:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  21ba99:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21ba9d:	66 89 45 a2          	mov    WORD PTR [rbp-0x5e],ax
  21baa1:	e8 aa 89 fe ff       	call   204450 <__zig_return_error>
  21baa6:	66 8b 45 a2          	mov    ax,WORD PTR [rbp-0x5e]
  21baaa:	48 83 c4 70          	add    rsp,0x70
  21baae:	5d                   	pop    rbp
  21baaf:	c3                   	ret    
  21bab0:	48 8d 15 79 9c 00 00 	lea    rdx,[rip+0x9c79]        # 225730 <__unnamed_151>
                        try output(context, fmt[start_index..i]);
  21bab7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21babb:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  21babf:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21bac3:	ff d0                	call   rax
  21bac5:	66 89 45 f8          	mov    WORD PTR [rbp-0x8],ax
  21bac9:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  21bace:	74 1b                	je     21baeb <format.70+0x11b>
  21bad0:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  21bad4:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21bad8:	66 89 45 a0          	mov    WORD PTR [rbp-0x60],ax
  21badc:	e8 6f 89 fe ff       	call   204450 <__zig_return_error>
  21bae1:	66 8b 45 a0          	mov    ax,WORD PTR [rbp-0x60]
  21bae5:	48 83 c4 70          	add    rsp,0x70
  21bae9:	5d                   	pop    rbp
  21baea:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  21baeb:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  21baef:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  21baf3:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  21baf7:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21bafb:	e8 c0 01 00 00       	call   21bcc0 <formatType.72>
  21bb00:	66 89 45 f6          	mov    WORD PTR [rbp-0xa],ax
  21bb04:	66 83 7d f6 00       	cmp    WORD PTR [rbp-0xa],0x0
  21bb09:	74 1b                	je     21bb26 <format.70+0x156>
  21bb0b:	66 8b 45 f6          	mov    ax,WORD PTR [rbp-0xa]
  21bb0f:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21bb13:	66 89 45 9e          	mov    WORD PTR [rbp-0x62],ax
  21bb17:	e8 34 89 fe ff       	call   204450 <__zig_return_error>
  21bb1c:	66 8b 45 9e          	mov    ax,WORD PTR [rbp-0x62]
  21bb20:	48 83 c4 70          	add    rsp,0x70
  21bb24:	5d                   	pop    rbp
  21bb25:	c3                   	ret    
  21bb26:	48 8d 15 1b 9c 00 00 	lea    rdx,[rip+0x9c1b]        # 225748 <__unnamed_152>
                        try output(context, fmt[start_index..i]);
  21bb2d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21bb31:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  21bb35:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21bb39:	ff d0                	call   rax
  21bb3b:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
  21bb3f:	66 83 7d f4 00       	cmp    WORD PTR [rbp-0xc],0x0
  21bb44:	74 1b                	je     21bb61 <format.70+0x191>
  21bb46:	66 8b 45 f4          	mov    ax,WORD PTR [rbp-0xc]
  21bb4a:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21bb4e:	66 89 45 9c          	mov    WORD PTR [rbp-0x64],ax
  21bb52:	e8 f9 88 fe ff       	call   204450 <__zig_return_error>
  21bb57:	66 8b 45 9c          	mov    ax,WORD PTR [rbp-0x64]
  21bb5b:	48 83 c4 70          	add    rsp,0x70
  21bb5f:	5d                   	pop    rbp
  21bb60:	c3                   	ret    
                    try formatType(args[next_arg], fmt[s..i], context, Errors, output);
  21bb61:	48 8b 75 10          	mov    rsi,QWORD PTR [rbp+0x10]
  21bb65:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  21bb69:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  21bb6d:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21bb71:	e8 9a 01 00 00       	call   21bd10 <formatType.73>
  21bb76:	66 89 45 f2          	mov    WORD PTR [rbp-0xe],ax
  21bb7a:	66 83 7d f2 00       	cmp    WORD PTR [rbp-0xe],0x0
  21bb7f:	74 1b                	je     21bb9c <format.70+0x1cc>
  21bb81:	66 8b 45 f2          	mov    ax,WORD PTR [rbp-0xe]
  21bb85:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21bb89:	66 89 45 9a          	mov    WORD PTR [rbp-0x66],ax
  21bb8d:	e8 be 88 fe ff       	call   204450 <__zig_return_error>
  21bb92:	66 8b 45 9a          	mov    ax,WORD PTR [rbp-0x66]
  21bb96:	48 83 c4 70          	add    rsp,0x70
  21bb9a:	5d                   	pop    rbp
  21bb9b:	c3                   	ret    
  21bb9c:	48 8d 15 bd 9b 00 00 	lea    rdx,[rip+0x9bbd]        # 225760 <__unnamed_153>
                        try output(context, fmt[start_index..i]);
  21bba3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21bba7:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  21bbab:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21bbaf:	ff d0                	call   rax
  21bbb1:	66 89 45 f0          	mov    WORD PTR [rbp-0x10],ax
  21bbb5:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  21bbba:	74 1b                	je     21bbd7 <format.70+0x207>
  21bbbc:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  21bbc0:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21bbc4:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  21bbc8:	e8 83 88 fe ff       	call   204450 <__zig_return_error>
  21bbcd:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  21bbd1:	48 83 c4 70          	add    rsp,0x70
  21bbd5:	5d                   	pop    rbp
  21bbd6:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  21bbd7:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  21bbdb:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  21bbdf:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21bbe3:	48 8b 75 a8          	mov    rsi,QWORD PTR [rbp-0x58]
  21bbe7:	e8 74 00 00 00       	call   21bc60 <formatType.71>
  21bbec:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  21bbf0:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  21bbf5:	74 1b                	je     21bc12 <format.70+0x242>
  21bbf7:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  21bbfb:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21bbff:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  21bc03:	e8 48 88 fe ff       	call   204450 <__zig_return_error>
  21bc08:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  21bc0c:	48 83 c4 70          	add    rsp,0x70
  21bc10:	5d                   	pop    rbp
  21bc11:	c3                   	ret    
  21bc12:	48 8d 15 5f 9b 00 00 	lea    rdx,[rip+0x9b5f]        # 225778 <__unnamed_154>
        try output(context, fmt[start_index..]);
  21bc19:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21bc1d:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  21bc21:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21bc25:	ff d0                	call   rax
  21bc27:	66 89 45 ec          	mov    WORD PTR [rbp-0x14],ax
  21bc2b:	66 83 7d ec 00       	cmp    WORD PTR [rbp-0x14],0x0
  21bc30:	74 1b                	je     21bc4d <format.70+0x27d>
  21bc32:	66 8b 45 ec          	mov    ax,WORD PTR [rbp-0x14]
  21bc36:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21bc3a:	66 89 45 94          	mov    WORD PTR [rbp-0x6c],ax
  21bc3e:	e8 0d 88 fe ff       	call   204450 <__zig_return_error>
  21bc43:	66 8b 45 94          	mov    ax,WORD PTR [rbp-0x6c]
  21bc47:	48 83 c4 70          	add    rsp,0x70
  21bc4b:	5d                   	pop    rbp
  21bc4c:	c3                   	ret    
  21bc4d:	31 c0                	xor    eax,eax
  21bc4f:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  21bc52:	66 89 c8             	mov    ax,cx
  21bc55:	48 83 c4 70          	add    rsp,0x70
  21bc59:	5d                   	pop    rbp
  21bc5a:	c3                   	ret    
  21bc5b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000021bc60 <formatType.71>:
pub fn formatType(
  21bc60:	55                   	push   rbp
  21bc61:	48 89 e5             	mov    rbp,rsp
  21bc64:	48 83 ec 30          	sub    rsp,0x30
  21bc68:	48 8d 45 e0          	lea    rax,[rbp-0x20]
  21bc6c:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  21bc70:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
                const casted_value = ([]const u8)(value);
  21bc74:	48 8b 0e             	mov    rcx,QWORD PTR [rsi]
  21bc77:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  21bc7b:	48 8b 4e 08          	mov    rcx,QWORD PTR [rsi+0x8]
  21bc7f:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
                return output(context, casted_value);
  21bc83:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  21bc87:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21bc8b:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  21bc8f:	48 89 c2             	mov    rdx,rax
  21bc92:	ff d1                	call   rcx
  21bc94:	66 83 f8 00          	cmp    ax,0x0
  21bc98:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  21bc9c:	74 0b                	je     21bca9 <formatType.71+0x49>
  21bc9e:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  21bca2:	e8 a9 87 fe ff       	call   204450 <__zig_return_error>
  21bca7:	eb 02                	jmp    21bcab <formatType.71+0x4b>
  21bca9:	eb 00                	jmp    21bcab <formatType.71+0x4b>
  21bcab:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  21bcaf:	48 83 c4 30          	add    rsp,0x30
  21bcb3:	5d                   	pop    rbp
  21bcb4:	c3                   	ret    
  21bcb5:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21bcbc:	00 00 00 00 

000000000021bcc0 <formatType.72>:
pub fn formatType(
  21bcc0:	55                   	push   rbp
  21bcc1:	48 89 e5             	mov    rbp,rsp
  21bcc4:	48 83 ec 30          	sub    rsp,0x30
  21bcc8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21bccc:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  21bcd0:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return formatValue(value, fmt, context, Errors, output);
  21bcd4:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21bcd8:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21bcdc:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21bce0:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  21bce4:	e8 e7 29 00 00       	call   21e6d0 <formatValue.91>
  21bce9:	66 83 f8 00          	cmp    ax,0x0
  21bced:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  21bcf1:	74 0b                	je     21bcfe <formatType.72+0x3e>
  21bcf3:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21bcf7:	e8 54 87 fe ff       	call   204450 <__zig_return_error>
  21bcfc:	eb 02                	jmp    21bd00 <formatType.72+0x40>
  21bcfe:	eb 00                	jmp    21bd00 <formatType.72+0x40>
  21bd00:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  21bd04:	48 83 c4 30          	add    rsp,0x30
  21bd08:	5d                   	pop    rbp
  21bd09:	c3                   	ret    
  21bd0a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000021bd10 <formatType.73>:
pub fn formatType(
  21bd10:	55                   	push   rbp
  21bd11:	48 89 e5             	mov    rbp,rsp
  21bd14:	48 83 ec 30          	sub    rsp,0x30
  21bd18:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21bd1c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  21bd20:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return formatValue(value, fmt, context, Errors, output);
  21bd24:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21bd28:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21bd2c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21bd30:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  21bd34:	e8 e7 29 00 00       	call   21e720 <formatValue.92>
  21bd39:	66 83 f8 00          	cmp    ax,0x0
  21bd3d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  21bd41:	74 0b                	je     21bd4e <formatType.73+0x3e>
  21bd43:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21bd47:	e8 04 87 fe ff       	call   204450 <__zig_return_error>
  21bd4c:	eb 02                	jmp    21bd50 <formatType.73+0x40>
  21bd4e:	eb 00                	jmp    21bd50 <formatType.73+0x40>
  21bd50:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  21bd54:	48 83 c4 30          	add    rsp,0x30
  21bd58:	5d                   	pop    rbp
  21bd59:	c3                   	ret    
  21bd5a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000021bd60 <format.74>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  21bd60:	55                   	push   rbp
  21bd61:	48 89 e5             	mov    rbp,rsp
  21bd64:	48 83 ec 50          	sub    rsp,0x50
  21bd68:	48 8d 05 21 9a 00 00 	lea    rax,[rip+0x9a21]        # 225790 <__unnamed_155>
  21bd6f:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
  21bd73:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  21bd77:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
                        try output(context, fmt[start_index..i]);
  21bd7b:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  21bd7f:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  21bd83:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
  21bd87:	48 89 c2             	mov    rdx,rax
  21bd8a:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
  21bd8e:	ff d1                	call   rcx
  21bd90:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  21bd94:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  21bd99:	74 1b                	je     21bdb6 <format.74+0x56>
  21bd9b:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  21bd9f:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  21bda3:	66 89 45 c6          	mov    WORD PTR [rbp-0x3a],ax
  21bda7:	e8 a4 86 fe ff       	call   204450 <__zig_return_error>
  21bdac:	66 8b 45 c6          	mov    ax,WORD PTR [rbp-0x3a]
  21bdb0:	48 83 c4 50          	add    rsp,0x50
  21bdb4:	5d                   	pop    rbp
  21bdb5:	c3                   	ret    
                    try formatType(args[next_arg], fmt[s..i], context, Errors, output);
  21bdb6:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  21bdba:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  21bdbe:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  21bdc2:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  21bdc6:	e8 e5 00 00 00       	call   21beb0 <formatType.75>
  21bdcb:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  21bdcf:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  21bdd4:	74 1b                	je     21bdf1 <format.74+0x91>
  21bdd6:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  21bdda:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  21bdde:	66 89 45 c4          	mov    WORD PTR [rbp-0x3c],ax
  21bde2:	e8 69 86 fe ff       	call   204450 <__zig_return_error>
  21bde7:	66 8b 45 c4          	mov    ax,WORD PTR [rbp-0x3c]
  21bdeb:	48 83 c4 50          	add    rsp,0x50
  21bdef:	5d                   	pop    rbp
  21bdf0:	c3                   	ret    
  21bdf1:	48 8d 15 b0 99 00 00 	lea    rdx,[rip+0x99b0]        # 2257a8 <__unnamed_156>
                        try output(context, fmt[start_index..i]);
  21bdf8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  21bdfc:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  21be00:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  21be04:	ff d0                	call   rax
  21be06:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  21be0a:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  21be0f:	74 1b                	je     21be2c <format.74+0xcc>
  21be11:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  21be15:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  21be19:	66 89 45 c2          	mov    WORD PTR [rbp-0x3e],ax
  21be1d:	e8 2e 86 fe ff       	call   204450 <__zig_return_error>
  21be22:	66 8b 45 c2          	mov    ax,WORD PTR [rbp-0x3e]
  21be26:	48 83 c4 50          	add    rsp,0x50
  21be2a:	5d                   	pop    rbp
  21be2b:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  21be2c:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  21be30:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  21be34:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  21be38:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  21be3c:	e8 bf 00 00 00       	call   21bf00 <formatType.76>
  21be41:	66 89 45 f8          	mov    WORD PTR [rbp-0x8],ax
  21be45:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  21be4a:	74 1b                	je     21be67 <format.74+0x107>
  21be4c:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  21be50:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  21be54:	66 89 45 c0          	mov    WORD PTR [rbp-0x40],ax
  21be58:	e8 f3 85 fe ff       	call   204450 <__zig_return_error>
  21be5d:	66 8b 45 c0          	mov    ax,WORD PTR [rbp-0x40]
  21be61:	48 83 c4 50          	add    rsp,0x50
  21be65:	5d                   	pop    rbp
  21be66:	c3                   	ret    
  21be67:	48 8d 15 52 99 00 00 	lea    rdx,[rip+0x9952]        # 2257c0 <__unnamed_157>
        try output(context, fmt[start_index..]);
  21be6e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  21be72:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  21be76:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  21be7a:	ff d0                	call   rax
  21be7c:	66 89 45 f6          	mov    WORD PTR [rbp-0xa],ax
  21be80:	66 83 7d f6 00       	cmp    WORD PTR [rbp-0xa],0x0
  21be85:	74 1b                	je     21bea2 <format.74+0x142>
  21be87:	66 8b 45 f6          	mov    ax,WORD PTR [rbp-0xa]
  21be8b:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  21be8f:	66 89 45 be          	mov    WORD PTR [rbp-0x42],ax
  21be93:	e8 b8 85 fe ff       	call   204450 <__zig_return_error>
  21be98:	66 8b 45 be          	mov    ax,WORD PTR [rbp-0x42]
  21be9c:	48 83 c4 50          	add    rsp,0x50
  21bea0:	5d                   	pop    rbp
  21bea1:	c3                   	ret    
  21bea2:	31 c0                	xor    eax,eax
  21bea4:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  21bea7:	66 89 c8             	mov    ax,cx
  21beaa:	48 83 c4 50          	add    rsp,0x50
  21beae:	5d                   	pop    rbp
  21beaf:	c3                   	ret    

000000000021beb0 <formatType.75>:
pub fn formatType(
  21beb0:	55                   	push   rbp
  21beb1:	48 89 e5             	mov    rbp,rsp
  21beb4:	48 83 ec 30          	sub    rsp,0x30
  21beb8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21bebc:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  21bec0:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return formatValue(value, fmt, context, Errors, output);
  21bec4:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21bec8:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21becc:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21bed0:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  21bed4:	e8 97 28 00 00       	call   21e770 <formatValue.93>
  21bed9:	66 83 f8 00          	cmp    ax,0x0
  21bedd:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  21bee1:	74 0b                	je     21beee <formatType.75+0x3e>
  21bee3:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21bee7:	e8 64 85 fe ff       	call   204450 <__zig_return_error>
  21beec:	eb 02                	jmp    21bef0 <formatType.75+0x40>
  21beee:	eb 00                	jmp    21bef0 <formatType.75+0x40>
  21bef0:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  21bef4:	48 83 c4 30          	add    rsp,0x30
  21bef8:	5d                   	pop    rbp
  21bef9:	c3                   	ret    
  21befa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000021bf00 <formatType.76>:
pub fn formatType(
  21bf00:	55                   	push   rbp
  21bf01:	48 89 e5             	mov    rbp,rsp
  21bf04:	48 83 ec 30          	sub    rsp,0x30
  21bf08:	48 8d 45 e0          	lea    rax,[rbp-0x20]
  21bf0c:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  21bf10:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
                const casted_value = ([]const u8)(value);
  21bf14:	48 8b 0e             	mov    rcx,QWORD PTR [rsi]
  21bf17:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  21bf1b:	48 8b 4e 08          	mov    rcx,QWORD PTR [rsi+0x8]
  21bf1f:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
                return output(context, casted_value);
  21bf23:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  21bf27:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21bf2b:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  21bf2f:	48 89 c2             	mov    rdx,rax
  21bf32:	ff d1                	call   rcx
  21bf34:	66 83 f8 00          	cmp    ax,0x0
  21bf38:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  21bf3c:	74 0b                	je     21bf49 <formatType.76+0x49>
  21bf3e:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  21bf42:	e8 09 85 fe ff       	call   204450 <__zig_return_error>
  21bf47:	eb 02                	jmp    21bf4b <formatType.76+0x4b>
  21bf49:	eb 00                	jmp    21bf4b <formatType.76+0x4b>
  21bf4b:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  21bf4f:	48 83 c4 30          	add    rsp,0x30
  21bf53:	5d                   	pop    rbp
  21bf54:	c3                   	ret    
  21bf55:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21bf5c:	00 00 00 00 

000000000021bf60 <format.77>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  21bf60:	55                   	push   rbp
  21bf61:	48 89 e5             	mov    rbp,rsp
  21bf64:	48 83 ec 40          	sub    rsp,0x40
  21bf68:	48 8d 05 69 98 00 00 	lea    rax,[rip+0x9869]        # 2257d8 <__unnamed_158>
  21bf6f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  21bf73:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
                        try output(context, fmt[start_index..i]);
  21bf77:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  21bf7b:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  21bf7f:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  21bf83:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  21bf87:	48 89 c2             	mov    rdx,rax
  21bf8a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21bf8e:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  21bf92:	ff d0                	call   rax
  21bf94:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  21bf98:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  21bf9d:	74 1b                	je     21bfba <format.77+0x5a>
  21bf9f:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  21bfa3:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21bfa7:	66 89 45 ce          	mov    WORD PTR [rbp-0x32],ax
  21bfab:	e8 a0 84 fe ff       	call   204450 <__zig_return_error>
  21bfb0:	66 8b 45 ce          	mov    ax,WORD PTR [rbp-0x32]
  21bfb4:	48 83 c4 40          	add    rsp,0x40
  21bfb8:	5d                   	pop    rbp
  21bfb9:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  21bfba:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21bfbe:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21bfc2:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21bfc6:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  21bfca:	e8 71 00 00 00       	call   21c040 <formatType.78>
  21bfcf:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  21bfd3:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  21bfd8:	74 1b                	je     21bff5 <format.77+0x95>
  21bfda:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  21bfde:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21bfe2:	66 89 45 cc          	mov    WORD PTR [rbp-0x34],ax
  21bfe6:	e8 65 84 fe ff       	call   204450 <__zig_return_error>
  21bfeb:	66 8b 45 cc          	mov    ax,WORD PTR [rbp-0x34]
  21bfef:	48 83 c4 40          	add    rsp,0x40
  21bff3:	5d                   	pop    rbp
  21bff4:	c3                   	ret    
  21bff5:	48 8d 15 f4 97 00 00 	lea    rdx,[rip+0x97f4]        # 2257f0 <__unnamed_159>
        try output(context, fmt[start_index..]);
  21bffc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21c000:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  21c004:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21c008:	ff d0                	call   rax
  21c00a:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  21c00e:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  21c013:	74 1b                	je     21c030 <format.77+0xd0>
  21c015:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  21c019:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21c01d:	66 89 45 ca          	mov    WORD PTR [rbp-0x36],ax
  21c021:	e8 2a 84 fe ff       	call   204450 <__zig_return_error>
  21c026:	66 8b 45 ca          	mov    ax,WORD PTR [rbp-0x36]
  21c02a:	48 83 c4 40          	add    rsp,0x40
  21c02e:	5d                   	pop    rbp
  21c02f:	c3                   	ret    
  21c030:	31 c0                	xor    eax,eax
  21c032:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  21c035:	66 89 c8             	mov    ax,cx
  21c038:	48 83 c4 40          	add    rsp,0x40
  21c03c:	5d                   	pop    rbp
  21c03d:	c3                   	ret    
  21c03e:	66 90                	xchg   ax,ax

000000000021c040 <formatType.78>:
pub fn formatType(
  21c040:	55                   	push   rbp
  21c041:	48 89 e5             	mov    rbp,rsp
  21c044:	48 83 ec 30          	sub    rsp,0x30
  21c048:	48 8d 45 e0          	lea    rax,[rbp-0x20]
  21c04c:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  21c050:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
                const casted_value = ([]const u8)(value);
  21c054:	48 8b 0e             	mov    rcx,QWORD PTR [rsi]
  21c057:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  21c05b:	48 8b 4e 08          	mov    rcx,QWORD PTR [rsi+0x8]
  21c05f:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
                return output(context, casted_value);
  21c063:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  21c067:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21c06b:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  21c06f:	48 89 c2             	mov    rdx,rax
  21c072:	ff d1                	call   rcx
  21c074:	66 83 f8 00          	cmp    ax,0x0
  21c078:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  21c07c:	74 0b                	je     21c089 <formatType.78+0x49>
  21c07e:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  21c082:	e8 c9 83 fe ff       	call   204450 <__zig_return_error>
  21c087:	eb 02                	jmp    21c08b <formatType.78+0x4b>
  21c089:	eb 00                	jmp    21c08b <formatType.78+0x4b>
  21c08b:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  21c08f:	48 83 c4 30          	add    rsp,0x30
  21c093:	5d                   	pop    rbp
  21c094:	c3                   	ret    
  21c095:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21c09c:	00 00 00 00 

000000000021c0a0 <rotl>:
pub fn rotl(comptime T: type, x: T, r: var) T {
  21c0a0:	55                   	push   rbp
  21c0a1:	48 89 e5             	mov    rbp,rsp
  21c0a4:	48 83 ec 30          	sub    rsp,0x30
  21c0a8:	40 88 f0             	mov    al,sil
  21c0ab:	31 f6                	xor    esi,esi
  21c0ad:	40 88 f1             	mov    cl,sil
  21c0b0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  21c0b4:	88 45 f7             	mov    BYTE PTR [rbp-0x9],al
        const ar = @mod(r, T.bit_count);
  21c0b7:	8a 45 f7             	mov    al,BYTE PTR [rbp-0x9]
  21c0ba:	f6 c1 01             	test   cl,0x1
  21c0bd:	88 45 f5             	mov    BYTE PTR [rbp-0xb],al
  21c0c0:	75 33                	jne    21c0f5 <rotl+0x55>
  21c0c2:	8a 45 f5             	mov    al,BYTE PTR [rbp-0xb]
  21c0c5:	24 3f                	and    al,0x3f
  21c0c7:	88 45 f6             	mov    BYTE PTR [rbp-0xa],al
        return shl(T, x, ar) | shr(T, x, T.bit_count - ar);
  21c0ca:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  21c0ce:	0f b6 75 f6          	movzx  esi,BYTE PTR [rbp-0xa]
  21c0d2:	e8 e9 26 00 00       	call   21e7c0 <shl>
  21c0d7:	b1 40                	mov    cl,0x40
  21c0d9:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  21c0dd:	2a 4d f6             	sub    cl,BYTE PTR [rbp-0xa]
  21c0e0:	0f 92 c2             	setb   dl
  21c0e3:	f6 c2 01             	test   dl,0x1
  21c0e6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  21c0ea:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  21c0ee:	88 4d df             	mov    BYTE PTR [rbp-0x21],cl
  21c0f1:	75 12                	jne    21c105 <rotl+0x65>
  21c0f3:	eb 20                	jmp    21c115 <rotl+0x75>
  21c0f5:	48 8d 3d e4 94 00 00 	lea    rdi,[rip+0x94e4]        # 2255e0 <__unnamed_14>
  21c0fc:	31 c0                	xor    eax,eax
  21c0fe:	89 c6                	mov    esi,eax
        const ar = @mod(r, T.bit_count);
  21c100:	e8 bb 6f fe ff       	call   2030c0 <panic>
  21c105:	48 8d 3d 0c 92 00 00 	lea    rdi,[rip+0x920c]        # 225318 <__unnamed_5>
  21c10c:	31 c0                	xor    eax,eax
  21c10e:	89 c6                	mov    esi,eax
        return shl(T, x, ar) | shr(T, x, T.bit_count - ar);
  21c110:	e8 ab 6f fe ff       	call   2030c0 <panic>
  21c115:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21c119:	8a 45 df             	mov    al,BYTE PTR [rbp-0x21]
  21c11c:	0f b6 f0             	movzx  esi,al
  21c11f:	e8 1c 27 00 00       	call   21e840 <shr>
  21c124:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  21c128:	48 09 c7             	or     rdi,rax
  21c12b:	48 89 f8             	mov    rax,rdi
  21c12e:	48 83 c4 30          	add    rsp,0x30
  21c132:	5d                   	pop    rbp
  21c133:	c3                   	ret    
  21c134:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21c13b:	00 00 00 00 00 

000000000021c140 <formatValue>:
        },
        else => @compileError("Unable to format type '" ++ @typeName(T) ++ "'"),
    }
}

fn formatValue(
  21c140:	55                   	push   rbp
  21c141:	48 89 e5             	mov    rbp,rsp
  21c144:	48 83 ec 30          	sub    rsp,0x30
  21c148:	89 75 fc             	mov    DWORD PTR [rbp-0x4],esi
  21c14b:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  21c14f:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    }

    comptime var T = @typeOf(value);
    switch (@typeId(T)) {
        builtin.TypeId.Float => return formatFloatValue(value, fmt, context, Errors, output),
        builtin.TypeId.Int => return formatIntValue(value, fmt, context, Errors, output),
  21c153:	8b 75 fc             	mov    esi,DWORD PTR [rbp-0x4]
  21c156:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21c15a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21c15e:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  21c162:	e8 59 27 00 00       	call   21e8c0 <formatIntValue>
  21c167:	66 83 f8 00          	cmp    ax,0x0
  21c16b:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  21c16f:	74 0b                	je     21c17c <formatValue+0x3c>
  21c171:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21c175:	e8 d6 82 fe ff       	call   204450 <__zig_return_error>
  21c17a:	eb 02                	jmp    21c17e <formatValue+0x3e>
  21c17c:	eb 00                	jmp    21c17e <formatValue+0x3e>
  21c17e:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  21c182:	48 83 c4 30          	add    rsp,0x30
  21c186:	5d                   	pop    rbp
  21c187:	c3                   	ret    
  21c188:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  21c18f:	00 

000000000021c190 <syscall4.79>:
        : "rcx", "r11"
    );
}

pub fn syscall4(number: usize, arg1: usize, arg2: usize, arg3: usize, arg4: usize) usize {
  21c190:	55                   	push   rbp
  21c191:	48 89 e5             	mov    rbp,rsp
  21c194:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  21c198:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  21c19c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  21c1a0:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  21c1a4:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
    return asm volatile ("syscall"
        : [ret] "={rax}" (-> usize)
        : [number] "{rax}" (number),
  21c1a8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
          [arg1] "{rdi}" (arg1),
  21c1ac:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
          [arg2] "{rsi}" (arg2),
  21c1b0:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
          [arg3] "{rdx}" (arg3),
  21c1b4:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
          [arg4] "{r10}" (arg4)
  21c1b8:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
    return asm volatile ("syscall"
  21c1bc:	0f 05                	syscall 
  21c1be:	5d                   	pop    rbp
  21c1bf:	c3                   	ret    

000000000021c1c0 <min>:
pub fn min(x: var, y: var) @typeOf(x + y) {
  21c1c0:	55                   	push   rbp
  21c1c1:	48 89 e5             	mov    rbp,rsp
  21c1c4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  21c1c8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    return if (x < y) x else y;
  21c1cc:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21c1d0:	48 3b 75 f0          	cmp    rsi,QWORD PTR [rbp-0x10]
  21c1d4:	73 0a                	jae    21c1e0 <min+0x20>
  21c1d6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21c1da:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  21c1de:	eb 08                	jmp    21c1e8 <min+0x28>
  21c1e0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21c1e4:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  21c1e8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21c1ec:	5d                   	pop    rbp
  21c1ed:	c3                   	ret    
  21c1ee:	66 90                	xchg   ax,ax

000000000021c1f0 <write>:
pub fn write(fd: i32, buf: [*]const u8, count: usize) usize {
  21c1f0:	55                   	push   rbp
  21c1f1:	48 89 e5             	mov    rbp,rsp
  21c1f4:	48 83 ec 20          	sub    rsp,0x20
  21c1f8:	b8 01 00 00 00       	mov    eax,0x1
  21c1fd:	89 c1                	mov    ecx,eax
  21c1ff:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  21c202:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  21c206:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    return syscall3(SYS_write, @intCast(usize, fd), @ptrToInt(buf), count);
  21c20a:	48 63 75 fc          	movsxd rsi,DWORD PTR [rbp-0x4]
  21c20e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21c212:	4c 8b 45 e8          	mov    r8,QWORD PTR [rbp-0x18]
  21c216:	48 89 cf             	mov    rdi,rcx
  21c219:	4c 89 c1             	mov    rcx,r8
  21c21c:	e8 af f0 fe ff       	call   20b2d0 <syscall3>
  21c221:	48 83 c4 20          	add    rsp,0x20
  21c225:	5d                   	pop    rbp
  21c226:	c3                   	ret    
  21c227:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  21c22e:	00 00 

000000000021c230 <DirectAllocator_alloc>:
    fn alloc(allocator: *Allocator, n: usize, alignment: u29) ![]u8 {
  21c230:	55                   	push   rbp
  21c231:	48 89 e5             	mov    rbp,rsp
  21c234:	48 81 ec 60 01 00 00 	sub    rsp,0x160
  21c23b:	48 89 f8             	mov    rax,rdi
  21c23e:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  21c242:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
  21c246:	41 81 e0 ff ff ff 1f 	and    r8d,0x1fffffff
  21c24d:	44 89 45 8c          	mov    DWORD PTR [rbp-0x74],r8d
        const self = @fieldParentPtr(DirectAllocator, "allocator", allocator);
  21c251:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  21c255:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
                const alloc_size = if (alignment <= os.page_size) n else n + alignment;
  21c259:	44 8b 45 8c          	mov    r8d,DWORD PTR [rbp-0x74]
  21c25d:	41 81 e8 00 10 00 00 	sub    r8d,0x1000
  21c264:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  21c26b:	48 89 bd 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rdi
  21c272:	48 89 b5 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rsi
  21c279:	44 89 85 34 ff ff ff 	mov    DWORD PTR [rbp-0xcc],r8d
  21c280:	77 0f                	ja     21c291 <DirectAllocator_alloc+0x61>
  21c282:	eb 00                	jmp    21c284 <DirectAllocator_alloc+0x54>
  21c284:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  21c288:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  21c28f:	eb 29                	jmp    21c2ba <DirectAllocator_alloc+0x8a>
  21c291:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  21c295:	8b 4d 8c             	mov    ecx,DWORD PTR [rbp-0x74]
  21c298:	89 ca                	mov    edx,ecx
  21c29a:	48 01 d0             	add    rax,rdx
  21c29d:	40 0f 92 c6          	setb   sil
  21c2a1:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
  21c2a8:	40 88 b5 1f ff ff ff 	mov    BYTE PTR [rbp-0xe1],sil
  21c2af:	0f 82 24 01 00 00    	jb     21c3d9 <DirectAllocator_alloc+0x1a9>
  21c2b5:	e9 2f 01 00 00       	jmp    21c3e9 <DirectAllocator_alloc+0x1b9>
  21c2ba:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  21c2c1:	31 c9                	xor    ecx,ecx
  21c2c3:	89 ca                	mov    edx,ecx
  21c2c5:	b9 03 00 00 00       	mov    ecx,0x3
  21c2ca:	89 ce                	mov    esi,ecx
  21c2cc:	b9 22 00 00 00       	mov    ecx,0x22
  21c2d1:	41 b8 ff ff ff ff    	mov    r8d,0xffffffff
  21c2d7:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
                const addr = p.mmap(null, alloc_size, p.PROT_READ | p.PROT_WRITE, p.MAP_PRIVATE | p.MAP_ANONYMOUS, -1, 0);
  21c2de:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  21c2e5:	48 89 d7             	mov    rdi,rdx
  21c2e8:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  21c2ef:	48 89 c6             	mov    rsi,rax
  21c2f2:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  21c2f9:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
  21c300:	48 89 c2             	mov    rdx,rax
  21c303:	4c 8b 8d 08 ff ff ff 	mov    r9,QWORD PTR [rbp-0xf8]
  21c30a:	e8 21 26 00 00       	call   21e930 <mmap>
  21c30f:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
                if (addr == p.MAP_FAILED) return error.OutOfMemory;
  21c316:	48 83 bd 70 ff ff ff 	cmp    QWORD PTR [rbp-0x90],0xffffffffffffffff
  21c31d:	ff 
  21c31e:	75 43                	jne    21c363 <DirectAllocator_alloc+0x133>
  21c320:	48 8b bd 38 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xc8]
  21c327:	e8 24 81 fe ff       	call   204450 <__zig_return_error>
  21c32c:	48 8b 3d 0d 5e fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe5e0d]        # 202140 <__unnamed_160>
  21c333:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  21c33a:	48 89 38             	mov    QWORD PTR [rax],rdi
  21c33d:	48 8b 3d 04 5e fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe5e04]        # 202148 <__unnamed_160+0x8>
  21c344:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  21c348:	48 8b 3d 01 5e fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe5e01]        # 202150 <__unnamed_160+0x10>
  21c34f:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  21c353:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  21c35a:	48 81 c4 60 01 00 00 	add    rsp,0x160
  21c361:	5d                   	pop    rbp
  21c362:	c3                   	ret    
  21c363:	eb 00                	jmp    21c365 <DirectAllocator_alloc+0x135>
                if (alloc_size == n) return @intToPtr([*]u8, addr)[0..n];
  21c365:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  21c36c:	48 3b 45 90          	cmp    rax,QWORD PTR [rbp-0x70]
  21c370:	75 2c                	jne    21c39e <DirectAllocator_alloc+0x16e>
  21c372:	31 c0                	xor    eax,eax
  21c374:	89 c1                	mov    ecx,eax
  21c376:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  21c37d:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  21c381:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
  21c385:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21c389:	48 39 d1             	cmp    rcx,rdx
  21c38c:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
  21c393:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
  21c39a:	76 70                	jbe    21c40c <DirectAllocator_alloc+0x1dc>
  21c39c:	eb 5e                	jmp    21c3fc <DirectAllocator_alloc+0x1cc>
  21c39e:	eb 00                	jmp    21c3a0 <DirectAllocator_alloc+0x170>
                const aligned_addr = (addr & ~usize(alignment - 1)) + alignment;
  21c3a0:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21c3a7:	8b 4d 8c             	mov    ecx,DWORD PTR [rbp-0x74]
  21c3aa:	83 c1 ff             	add    ecx,0xffffffff
  21c3ad:	f7 c1 00 00 00 e0    	test   ecx,0xe0000000
  21c3b3:	0f 95 c2             	setne  dl
  21c3b6:	89 ce                	mov    esi,ecx
  21c3b8:	f6 c2 01             	test   dl,0x1
  21c3bb:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  21c3c2:	89 8d ec fe ff ff    	mov    DWORD PTR [rbp-0x114],ecx
  21c3c8:	89 b5 e8 fe ff ff    	mov    DWORD PTR [rbp-0x118],esi
  21c3ce:	0f 85 96 00 00 00    	jne    21c46a <DirectAllocator_alloc+0x23a>
  21c3d4:	e9 a1 00 00 00       	jmp    21c47a <DirectAllocator_alloc+0x24a>
  21c3d9:	48 8d 3d 38 8f 00 00 	lea    rdi,[rip+0x8f38]        # 225318 <__unnamed_5>
  21c3e0:	31 c0                	xor    eax,eax
  21c3e2:	89 c6                	mov    esi,eax
                const alloc_size = if (alignment <= os.page_size) n else n + alignment;
  21c3e4:	e8 d7 6c fe ff       	call   2030c0 <panic>
  21c3e9:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21c3f0:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  21c3f7:	e9 be fe ff ff       	jmp    21c2ba <DirectAllocator_alloc+0x8a>
  21c3fc:	48 8d 3d fd 8e 00 00 	lea    rdi,[rip+0x8efd]        # 225300 <__unnamed_4>
  21c403:	31 c0                	xor    eax,eax
  21c405:	89 c6                	mov    esi,eax
                if (alloc_size == n) return @intToPtr([*]u8, addr)[0..n];
  21c407:	e8 b4 6c fe ff       	call   2030c0 <panic>
  21c40c:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  21c413:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  21c417:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  21c41e:	48 83 e9 00          	sub    rcx,0x0
  21c422:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  21c426:	66 c7 45 d0 00 00    	mov    WORD PTR [rbp-0x30],0x0
  21c42c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21c430:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  21c434:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  21c438:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  21c43c:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  21c440:	48 8b 95 40 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc0]
  21c447:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  21c44a:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  21c44e:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  21c452:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  21c456:	48 89 4a 10          	mov    QWORD PTR [rdx+0x10],rcx
  21c45a:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  21c461:	48 81 c4 60 01 00 00 	add    rsp,0x160
  21c468:	5d                   	pop    rbp
  21c469:	c3                   	ret    
  21c46a:	48 8d 3d a7 8e 00 00 	lea    rdi,[rip+0x8ea7]        # 225318 <__unnamed_5>
  21c471:	31 c0                	xor    eax,eax
  21c473:	89 c6                	mov    esi,eax
                const aligned_addr = (addr & ~usize(alignment - 1)) + alignment;
  21c475:	e8 46 6c fe ff       	call   2030c0 <panic>
  21c47a:	8b 85 ec fe ff ff    	mov    eax,DWORD PTR [rbp-0x114]
  21c480:	25 ff ff ff 1f       	and    eax,0x1fffffff
  21c485:	89 c1                	mov    ecx,eax
  21c487:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  21c48e:	c4 e2 f0 f2 ca       	andn   rcx,rcx,rdx
  21c493:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
  21c496:	89 c6                	mov    esi,eax
  21c498:	48 01 f1             	add    rcx,rsi
  21c49b:	40 0f 92 c7          	setb   dil
  21c49f:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
  21c4a6:	40 88 bd df fe ff ff 	mov    BYTE PTR [rbp-0x121],dil
  21c4ad:	72 02                	jb     21c4b1 <DirectAllocator_alloc+0x281>
  21c4af:	eb 10                	jmp    21c4c1 <DirectAllocator_alloc+0x291>
  21c4b1:	48 8d 3d 60 8e 00 00 	lea    rdi,[rip+0x8e60]        # 225318 <__unnamed_5>
  21c4b8:	31 c0                	xor    eax,eax
  21c4ba:	89 c6                	mov    esi,eax
  21c4bc:	e8 ff 6b fe ff       	call   2030c0 <panic>
  21c4c1:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
  21c4c8:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
                const unused_start = addr;
  21c4cf:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
  21c4d6:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
                const unused_len = aligned_addr - 1 - unused_start;
  21c4dd:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  21c4e4:	48 83 e9 01          	sub    rcx,0x1
  21c4e8:	0f 92 c2             	setb   dl
  21c4eb:	48 89 8d d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rcx
  21c4f2:	88 95 cf fe ff ff    	mov    BYTE PTR [rbp-0x131],dl
  21c4f8:	72 02                	jb     21c4fc <DirectAllocator_alloc+0x2cc>
  21c4fa:	eb 10                	jmp    21c50c <DirectAllocator_alloc+0x2dc>
  21c4fc:	48 8d 3d 15 8e 00 00 	lea    rdi,[rip+0x8e15]        # 225318 <__unnamed_5>
  21c503:	31 c0                	xor    eax,eax
  21c505:	89 c6                	mov    esi,eax
  21c507:	e8 b4 6b fe ff       	call   2030c0 <panic>
  21c50c:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21c513:	48 2b 85 60 ff ff ff 	sub    rax,QWORD PTR [rbp-0xa0]
  21c51a:	0f 92 c1             	setb   cl
  21c51d:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
  21c524:	88 8d bf fe ff ff    	mov    BYTE PTR [rbp-0x141],cl
  21c52a:	72 02                	jb     21c52e <DirectAllocator_alloc+0x2fe>
  21c52c:	eb 10                	jmp    21c53e <DirectAllocator_alloc+0x30e>
  21c52e:	48 8d 3d e3 8d 00 00 	lea    rdi,[rip+0x8de3]        # 225318 <__unnamed_5>
  21c535:	31 c0                	xor    eax,eax
  21c537:	89 c6                	mov    esi,eax
  21c539:	e8 82 6b fe ff       	call   2030c0 <panic>
  21c53e:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  21c545:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
                const err = p.munmap(unused_start, unused_len);
  21c54c:	48 8b bd 60 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  21c553:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  21c55a:	e8 31 24 00 00       	call   21e990 <munmap>
  21c55f:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
                assert(p.getErrno(err) == 0);
  21c566:	48 8b bd 50 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb0]
  21c56d:	e8 7e eb fe ff       	call   20b0f0 <getErrno>
  21c572:	48 83 f8 00          	cmp    rax,0x0
  21c576:	0f 94 c1             	sete   cl
  21c579:	0f b6 f9             	movzx  edi,cl
  21c57c:	e8 7f 6a fe ff       	call   203000 <assert>
  21c581:	31 ff                	xor    edi,edi
  21c583:	89 f8                	mov    eax,edi
                return @intToPtr([*]u8, aligned_addr)[0..n];
  21c585:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
  21c58c:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  21c590:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  21c594:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  21c598:	48 39 f0             	cmp    rax,rsi
  21c59b:	48 89 95 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rdx
  21c5a2:	48 89 b5 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rsi
  21c5a9:	76 10                	jbe    21c5bb <DirectAllocator_alloc+0x38b>
  21c5ab:	48 8d 3d 4e 8d 00 00 	lea    rdi,[rip+0x8d4e]        # 225300 <__unnamed_4>
  21c5b2:	31 c0                	xor    eax,eax
  21c5b4:	89 c6                	mov    esi,eax
  21c5b6:	e8 05 6b fe ff       	call   2030c0 <panic>
  21c5bb:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  21c5c2:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  21c5c6:	48 8b 8d a8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x158]
  21c5cd:	48 83 e9 00          	sub    rcx,0x0
  21c5d1:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
  21c5d5:	66 c7 45 a0 00 00    	mov    WORD PTR [rbp-0x60],0x0
  21c5db:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  21c5df:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  21c5e3:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  21c5e7:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
  21c5eb:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  21c5ef:	48 8b 95 40 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc0]
  21c5f6:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  21c5f9:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  21c5fd:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  21c601:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  21c605:	48 89 4a 10          	mov    QWORD PTR [rdx+0x10],rcx
  21c609:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  21c610:	48 81 c4 60 01 00 00 	add    rsp,0x160
  21c617:	5d                   	pop    rbp
  21c618:	c3                   	ret    
  21c619:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

000000000021c620 <DirectAllocator_realloc>:
    fn realloc(allocator: *Allocator, old_mem: []u8, new_size: usize, alignment: u29) ![]u8 {
  21c620:	55                   	push   rbp
  21c621:	48 89 e5             	mov    rbp,rsp
  21c624:	48 81 ec a0 01 00 00 	sub    rsp,0x1a0
  21c62b:	48 89 f8             	mov    rax,rdi
  21c62e:	48 89 95 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdx
  21c635:	4c 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],r8
  21c63c:	41 81 e1 ff ff ff 1f 	and    r9d,0x1fffffff
  21c643:	44 89 8d 64 ff ff ff 	mov    DWORD PTR [rbp-0x9c],r9d
        const self = @fieldParentPtr(DirectAllocator, "allocator", allocator);
  21c64a:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  21c651:	48 89 95 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdx
                if (new_size <= old_mem.len) {
  21c658:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  21c65f:	48 3b 51 08          	cmp    rdx,QWORD PTR [rcx+0x8]
  21c663:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  21c66a:	48 89 bd 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdi
  21c671:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
  21c678:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  21c67f:	0f 87 04 01 00 00    	ja     21c789 <DirectAllocator_realloc+0x169>
                    const base_addr = @ptrToInt(old_mem.ptr);
  21c685:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  21c68c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  21c68f:	48 89 8d 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rcx
                    const old_addr_end = base_addr + old_mem.len;
  21c696:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
  21c69d:	48 03 48 08          	add    rcx,QWORD PTR [rax+0x8]
  21c6a1:	0f 92 c2             	setb   dl
  21c6a4:	48 89 8d f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rcx
  21c6ab:	88 95 f7 fe ff ff    	mov    BYTE PTR [rbp-0x109],dl
  21c6b1:	0f 82 d4 01 00 00    	jb     21c88b <DirectAllocator_realloc+0x26b>
  21c6b7:	e9 df 01 00 00       	jmp    21c89b <DirectAllocator_realloc+0x27b>
  21c6bc:	31 c0                	xor    eax,eax
  21c6be:	89 c1                	mov    ecx,eax
                    const new_addr_end_rounded = new_addr_end + if (rem == 0) 0 else (os.page_size - rem);
  21c6c0:	48 89 8d e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rcx
  21c6c7:	eb 29                	jmp    21c6f2 <DirectAllocator_realloc+0xd2>
  21c6c9:	b8 00 10 00 00       	mov    eax,0x1000
  21c6ce:	89 c1                	mov    ecx,eax
  21c6d0:	48 2b 8d 38 ff ff ff 	sub    rcx,QWORD PTR [rbp-0xc8]
  21c6d7:	0f 92 c2             	setb   dl
  21c6da:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
  21c6e1:	88 95 df fe ff ff    	mov    BYTE PTR [rbp-0x121],dl
  21c6e7:	0f 82 58 02 00 00    	jb     21c945 <DirectAllocator_realloc+0x325>
  21c6ed:	e9 63 02 00 00       	jmp    21c955 <DirectAllocator_realloc+0x335>
  21c6f2:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  21c6f9:	48 8b 8d d0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x130]
  21c700:	48 01 c1             	add    rcx,rax
  21c703:	0f 92 c2             	setb   dl
  21c706:	48 89 8d c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rcx
  21c70d:	88 95 c7 fe ff ff    	mov    BYTE PTR [rbp-0x139],dl
  21c713:	0f 82 4f 02 00 00    	jb     21c968 <DirectAllocator_realloc+0x348>
  21c719:	e9 5a 02 00 00       	jmp    21c978 <DirectAllocator_realloc+0x358>
                        _ = os.posix.munmap(new_addr_end_rounded, old_addr_end - new_addr_end_rounded);
  21c71e:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
  21c725:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  21c72c:	48 2b 85 30 ff ff ff 	sub    rax,QWORD PTR [rbp-0xd0]
  21c733:	0f 92 c1             	setb   cl
  21c736:	48 89 bd b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rdi
  21c73d:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  21c744:	88 8d af fe ff ff    	mov    BYTE PTR [rbp-0x151],cl
  21c74a:	0f 82 4f 02 00 00    	jb     21c99f <DirectAllocator_realloc+0x37f>
  21c750:	e9 5a 02 00 00       	jmp    21c9af <DirectAllocator_realloc+0x38f>
                    if (old_addr_end > new_addr_end_rounded) {
  21c755:	eb 00                	jmp    21c757 <DirectAllocator_realloc+0x137>
  21c757:	31 c0                	xor    eax,eax
  21c759:	89 c1                	mov    ecx,eax
                    return old_mem[0..new_size];
  21c75b:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  21c762:	48 8b b5 00 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x100]
  21c769:	48 8b 7e 08          	mov    rdi,QWORD PTR [rsi+0x8]
  21c76d:	48 39 d1             	cmp    rcx,rdx
  21c770:	48 89 bd a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdi
  21c777:	48 89 95 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rdx
  21c77e:	0f 86 5a 02 00 00    	jbe    21c9de <DirectAllocator_realloc+0x3be>
  21c784:	e9 45 02 00 00       	jmp    21c9ce <DirectAllocator_realloc+0x3ae>
                if (new_size <= old_mem.len) {
  21c789:	eb 00                	jmp    21c78b <DirectAllocator_realloc+0x16b>
  21c78b:	48 8d 45 c0          	lea    rax,[rbp-0x40]
                const result = try alloc(allocator, new_size, alignment);
  21c78f:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  21c796:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  21c79d:	44 8b 85 64 ff ff ff 	mov    r8d,DWORD PTR [rbp-0x9c]
  21c7a4:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  21c7a8:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
  21c7af:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  21c7b6:	e8 75 fa ff ff       	call   21c230 <DirectAllocator_alloc>
  21c7bb:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  21c7c0:	74 50                	je     21c812 <DirectAllocator_realloc+0x1f2>
  21c7c2:	66 8b 45 c0          	mov    ax,WORD PTR [rbp-0x40]
  21c7c6:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
  21c7cd:	66 89 85 8e fe ff ff 	mov    WORD PTR [rbp-0x172],ax
  21c7d4:	e8 77 7c fe ff       	call   204450 <__zig_return_error>
  21c7d9:	66 8b 85 8e fe ff ff 	mov    ax,WORD PTR [rbp-0x172]
  21c7e0:	66 89 45 90          	mov    WORD PTR [rbp-0x70],ax
  21c7e4:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  21c7e8:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  21c7ef:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21c7f2:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  21c7f6:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21c7fa:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  21c7fe:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  21c802:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  21c809:	48 81 c4 a0 01 00 00 	add    rsp,0x1a0
  21c810:	5d                   	pop    rbp
  21c811:	c3                   	ret    
  21c812:	48 8d bd 20 ff ff ff 	lea    rdi,[rbp-0xe0]
  21c819:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21c81d:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
  21c824:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  21c828:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
                mem.copy(u8, result, old_mem);
  21c82f:	48 8b b5 00 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x100]
  21c836:	e8 15 ed ff ff       	call   21b550 <copy>
                return result;
  21c83b:	66 c7 85 78 ff ff ff 	mov    WORD PTR [rbp-0x88],0x0
  21c842:	00 00 
  21c844:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21c84b:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  21c84f:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  21c856:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  21c85a:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  21c861:	48 8b b5 10 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf0]
  21c868:	48 89 06             	mov    QWORD PTR [rsi],rax
  21c86b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  21c86f:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  21c873:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  21c877:	48 89 46 10          	mov    QWORD PTR [rsi+0x10],rax
  21c87b:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  21c882:	48 81 c4 a0 01 00 00 	add    rsp,0x1a0
  21c889:	5d                   	pop    rbp
  21c88a:	c3                   	ret    
  21c88b:	48 8d 3d 86 8a 00 00 	lea    rdi,[rip+0x8a86]        # 225318 <__unnamed_5>
  21c892:	31 c0                	xor    eax,eax
  21c894:	89 c6                	mov    esi,eax
                    const old_addr_end = base_addr + old_mem.len;
  21c896:	e8 25 68 fe ff       	call   2030c0 <panic>
  21c89b:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  21c8a2:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
                    const new_addr_end = base_addr + new_size;
  21c8a9:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
  21c8b0:	48 03 8d 68 ff ff ff 	add    rcx,QWORD PTR [rbp-0x98]
  21c8b7:	0f 92 c2             	setb   dl
  21c8ba:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  21c8c1:	88 95 7f fe ff ff    	mov    BYTE PTR [rbp-0x181],dl
  21c8c7:	72 02                	jb     21c8cb <DirectAllocator_realloc+0x2ab>
  21c8c9:	eb 10                	jmp    21c8db <DirectAllocator_realloc+0x2bb>
  21c8cb:	48 8d 3d 46 8a 00 00 	lea    rdi,[rip+0x8a46]        # 225318 <__unnamed_5>
  21c8d2:	31 c0                	xor    eax,eax
  21c8d4:	89 c6                	mov    esi,eax
  21c8d6:	e8 e5 67 fe ff       	call   2030c0 <panic>
  21c8db:	31 c0                	xor    eax,eax
  21c8dd:	88 c1                	mov    cl,al
  21c8df:	48 8b 95 80 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x180]
  21c8e6:	48 89 95 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rdx
                    const rem = @rem(new_addr_end, os.page_size);
  21c8ed:	48 8b b5 40 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc0]
  21c8f4:	f6 c1 01             	test   cl,0x1
  21c8f7:	48 89 b5 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rsi
  21c8fe:	75 35                	jne    21c935 <DirectAllocator_realloc+0x315>
  21c900:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  21c907:	48 25 ff 0f 00 00    	and    rax,0xfff
  21c90d:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
                    const new_addr_end_rounded = new_addr_end + if (rem == 0) 0 else (os.page_size - rem);
  21c914:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  21c91b:	48 83 bd 38 ff ff ff 	cmp    QWORD PTR [rbp-0xc8],0x0
  21c922:	00 
  21c923:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  21c92a:	0f 84 8c fd ff ff    	je     21c6bc <DirectAllocator_realloc+0x9c>
  21c930:	e9 94 fd ff ff       	jmp    21c6c9 <DirectAllocator_realloc+0xa9>
  21c935:	48 8d 3d a4 8c 00 00 	lea    rdi,[rip+0x8ca4]        # 2255e0 <__unnamed_14>
  21c93c:	31 c0                	xor    eax,eax
  21c93e:	89 c6                	mov    esi,eax
                    const rem = @rem(new_addr_end, os.page_size);
  21c940:	e8 7b 67 fe ff       	call   2030c0 <panic>
  21c945:	48 8d 3d cc 89 00 00 	lea    rdi,[rip+0x89cc]        # 225318 <__unnamed_5>
  21c94c:	31 c0                	xor    eax,eax
  21c94e:	89 c6                	mov    esi,eax
                    const new_addr_end_rounded = new_addr_end + if (rem == 0) 0 else (os.page_size - rem);
  21c950:	e8 6b 67 fe ff       	call   2030c0 <panic>
  21c955:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
  21c95c:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  21c963:	e9 8a fd ff ff       	jmp    21c6f2 <DirectAllocator_realloc+0xd2>
  21c968:	48 8d 3d a9 89 00 00 	lea    rdi,[rip+0x89a9]        # 225318 <__unnamed_5>
  21c96f:	31 c0                	xor    eax,eax
  21c971:	89 c6                	mov    esi,eax
  21c973:	e8 48 67 fe ff       	call   2030c0 <panic>
  21c978:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  21c97f:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
                    if (old_addr_end > new_addr_end_rounded) {
  21c986:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
  21c98d:	48 3b 8d 30 ff ff ff 	cmp    rcx,QWORD PTR [rbp-0xd0]
  21c994:	0f 87 84 fd ff ff    	ja     21c71e <DirectAllocator_realloc+0xfe>
  21c99a:	e9 b6 fd ff ff       	jmp    21c755 <DirectAllocator_realloc+0x135>
  21c99f:	48 8d 3d 72 89 00 00 	lea    rdi,[rip+0x8972]        # 225318 <__unnamed_5>
  21c9a6:	31 c0                	xor    eax,eax
  21c9a8:	89 c6                	mov    esi,eax
                        _ = os.posix.munmap(new_addr_end_rounded, old_addr_end - new_addr_end_rounded);
  21c9aa:	e8 11 67 fe ff       	call   2030c0 <panic>
  21c9af:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  21c9b6:	48 8b b5 b0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x150]
  21c9bd:	e8 ce 1f 00 00       	call   21e990 <munmap>
                    if (old_addr_end > new_addr_end_rounded) {
  21c9c2:	48 89 85 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rax
  21c9c9:	e9 89 fd ff ff       	jmp    21c757 <DirectAllocator_realloc+0x137>
  21c9ce:	48 8d 3d 2b 89 00 00 	lea    rdi,[rip+0x892b]        # 225300 <__unnamed_4>
  21c9d5:	31 c0                	xor    eax,eax
  21c9d7:	89 c6                	mov    esi,eax
                    return old_mem[0..new_size];
  21c9d9:	e8 e2 66 fe ff       	call   2030c0 <panic>
  21c9de:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
  21c9e5:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
  21c9ec:	48 39 c8             	cmp    rax,rcx
  21c9ef:	76 10                	jbe    21ca01 <DirectAllocator_realloc+0x3e1>
  21c9f1:	48 8d 3d 08 89 00 00 	lea    rdi,[rip+0x8908]        # 225300 <__unnamed_4>
  21c9f8:	31 c0                	xor    eax,eax
  21c9fa:	89 c6                	mov    esi,eax
  21c9fc:	e8 bf 66 fe ff       	call   2030c0 <panic>
  21ca01:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  21ca08:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  21ca0b:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  21ca0f:	48 8b 8d 98 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x168]
  21ca16:	48 83 e9 00          	sub    rcx,0x0
  21ca1a:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  21ca1e:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  21ca24:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  21ca28:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  21ca2c:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  21ca30:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  21ca34:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  21ca38:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
  21ca3f:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  21ca42:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  21ca46:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  21ca4a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21ca4e:	48 89 4a 10          	mov    QWORD PTR [rdx+0x10],rcx
  21ca52:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  21ca59:	48 81 c4 a0 01 00 00 	add    rsp,0x1a0
  21ca60:	5d                   	pop    rbp
  21ca61:	c3                   	ret    
  21ca62:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21ca69:	1f 84 00 00 00 00 00 

000000000021ca70 <DirectAllocator_free>:
    fn free(allocator: *Allocator, bytes: []u8) void {
  21ca70:	55                   	push   rbp
  21ca71:	48 89 e5             	mov    rbp,rsp
  21ca74:	48 83 ec 20          	sub    rsp,0x20
  21ca78:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
        const self = @fieldParentPtr(DirectAllocator, "allocator", allocator);
  21ca7c:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  21ca80:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
                _ = os.posix.munmap(@ptrToInt(bytes.ptr), bytes.len);
  21ca84:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  21ca87:	48 8b 76 08          	mov    rsi,QWORD PTR [rsi+0x8]
  21ca8b:	e8 00 1f 00 00       	call   21e990 <munmap>
    fn free(allocator: *Allocator, bytes: []u8) void {
  21ca90:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  21ca94:	48 83 c4 20          	add    rsp,0x20
  21ca98:	5d                   	pop    rbp
  21ca99:	c3                   	ret    
  21ca9a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000021caa0 <BaseLinkedList([]u8,void,(struct []const u8 constant))_init>:

        /// Initialize a linked list.
        ///
        /// Returns:
        ///     An empty linked list.
        pub fn init() Self {
  21caa0:	55                   	push   rbp
  21caa1:	48 89 e5             	mov    rbp,rsp
  21caa4:	48 89 f8             	mov    rax,rdi
            return Self{
  21caa7:	48 8b 0d da 56 fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe56da]        # 202188 <__unnamed_161>
  21caae:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  21cab1:	48 8b 0d d8 56 fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe56d8]        # 202190 <__unnamed_161+0x8>
  21cab8:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  21cabc:	48 8b 0d d5 56 fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe56d5]        # 202198 <__unnamed_161+0x10>
  21cac3:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  21cac7:	5d                   	pop    rbp
  21cac8:	c3                   	ret    
  21cac9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

000000000021cad0 <ArenaAllocator_alloc>:
    fn alloc(allocator: *Allocator, n: usize, alignment: u29) ![]u8 {
  21cad0:	55                   	push   rbp
  21cad1:	48 89 e5             	mov    rbp,rsp
  21cad4:	48 81 ec 00 02 00 00 	sub    rsp,0x200
  21cadb:	48 89 f8             	mov    rax,rdi
  21cade:	48 89 95 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdx
  21cae5:	48 89 8d 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rcx
  21caec:	41 81 e0 ff ff ff 1f 	and    r8d,0x1fffffff
  21caf3:	44 89 85 44 ff ff ff 	mov    DWORD PTR [rbp-0xbc],r8d
        const self = @fieldParentPtr(ArenaAllocator, "allocator", allocator);
  21cafa:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
  21cb01:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
        var cur_node = if (self.buffer_list.last) |last_node| last_node else try self.createNode(0, n + alignment);
  21cb08:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
  21cb0f:	48 89 ca             	mov    rdx,rcx
  21cb12:	48 83 c2 20          	add    rdx,0x20
  21cb16:	48 83 c2 08          	add    rdx,0x8
  21cb1a:	48 83 79 28 00       	cmp    QWORD PTR [rcx+0x28],0x0
  21cb1f:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
  21cb26:	48 89 bd d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rdi
  21cb2d:	48 89 b5 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rsi
  21cb34:	48 89 95 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rdx
  21cb3b:	74 24                	je     21cb61 <ArenaAllocator_alloc+0x91>
  21cb3d:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  21cb44:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  21cb47:	48 89 8d 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rcx
  21cb4e:	48 8b 8d 30 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd0]
  21cb55:	48 89 8d b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rcx
  21cb5c:	e9 98 00 00 00       	jmp    21cbf9 <ArenaAllocator_alloc+0x129>
  21cb61:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
  21cb68:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  21cb6f:	8b 8d 44 ff ff ff    	mov    ecx,DWORD PTR [rbp-0xbc]
  21cb75:	89 ce                	mov    esi,ecx
  21cb77:	48 01 f0             	add    rax,rsi
  21cb7a:	40 0f 92 c7          	setb   dil
  21cb7e:	48 89 95 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rdx
  21cb85:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
  21cb8c:	40 88 bd a7 fe ff ff 	mov    BYTE PTR [rbp-0x159],dil
  21cb93:	0f 82 01 02 00 00    	jb     21cd9a <ArenaAllocator_alloc+0x2ca>
  21cb99:	e9 0c 02 00 00       	jmp    21cdaa <ArenaAllocator_alloc+0x2da>
  21cb9e:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  21cba2:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  21cba9:	66 89 85 a4 fe ff ff 	mov    WORD PTR [rbp-0x15c],ax
  21cbb0:	e8 9b 78 fe ff       	call   204450 <__zig_return_error>
  21cbb5:	66 8b 85 a4 fe ff ff 	mov    ax,WORD PTR [rbp-0x15c]
  21cbbc:	66 89 45 c8          	mov    WORD PTR [rbp-0x38],ax
  21cbc0:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  21cbc4:	48 8b 8d d0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x130]
  21cbcb:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21cbce:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  21cbd2:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21cbd6:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  21cbda:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  21cbde:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  21cbe5:	48 81 c4 00 02 00 00 	add    rsp,0x200
  21cbec:	5d                   	pop    rbp
  21cbed:	c3                   	ret    
  21cbee:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21cbf2:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
  21cbf9:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  21cc00:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
        while (true) {
  21cc07:	eb 00                	jmp    21cc09 <ArenaAllocator_alloc+0x139>
  21cc09:	b8 20 00 00 00       	mov    eax,0x20
  21cc0e:	89 c1                	mov    ecx,eax
            const cur_buf = cur_node.data[@sizeOf(BufNode)..];
  21cc10:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
  21cc17:	48 89 d6             	mov    rsi,rdx
  21cc1a:	48 83 c6 10          	add    rsi,0x10
  21cc1e:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
  21cc22:	48 39 d1             	cmp    rcx,rdx
  21cc25:	48 89 95 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rdx
  21cc2c:	48 89 b5 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rsi
  21cc33:	0f 86 b3 01 00 00    	jbe    21cdec <ArenaAllocator_alloc+0x31c>
  21cc39:	e9 9e 01 00 00       	jmp    21cddc <ArenaAllocator_alloc+0x30c>
  21cc3e:	31 c0                	xor    eax,eax
  21cc40:	89 c1                	mov    ecx,eax
            const march_forward_bytes = if (rem == 0) 0 else (alignment - rem);
  21cc42:	48 89 8d 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rcx
  21cc49:	eb 2f                	jmp    21cc7a <ArenaAllocator_alloc+0x1aa>
  21cc4b:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  21cc52:	8b 8d 44 ff ff ff    	mov    ecx,DWORD PTR [rbp-0xbc]
  21cc58:	89 ca                	mov    edx,ecx
  21cc5a:	48 29 c2             	sub    rdx,rax
  21cc5d:	40 0f 92 c6          	setb   sil
  21cc61:	48 89 95 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rdx
  21cc68:	40 88 b5 7f fe ff ff 	mov    BYTE PTR [rbp-0x181],sil
  21cc6f:	0f 82 56 02 00 00    	jb     21cecb <ArenaAllocator_alloc+0x3fb>
  21cc75:	e9 61 02 00 00       	jmp    21cedb <ArenaAllocator_alloc+0x40b>
  21cc7a:	48 8b 85 88 fe ff ff 	mov    rax,QWORD PTR [rbp-0x178]
  21cc81:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
            const adjusted_index = self.end_index + march_forward_bytes;
  21cc88:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  21cc8f:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
  21cc93:	48 03 85 00 ff ff ff 	add    rax,QWORD PTR [rbp-0x100]
  21cc9a:	0f 92 c1             	setb   cl
  21cc9d:	48 89 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rax
  21cca4:	88 8d 6f fe ff ff    	mov    BYTE PTR [rbp-0x191],cl
  21ccaa:	0f 82 3e 02 00 00    	jb     21ceee <ArenaAllocator_alloc+0x41e>
  21ccb0:	e9 49 02 00 00       	jmp    21cefe <ArenaAllocator_alloc+0x42e>
                cur_node = try self.createNode(cur_buf.len, n + alignment);
  21ccb5:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
  21ccbc:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21ccc3:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  21ccca:	8b b5 44 ff ff ff    	mov    esi,DWORD PTR [rbp-0xbc]
  21ccd0:	89 f7                	mov    edi,esi
  21ccd2:	48 01 f8             	add    rax,rdi
  21ccd5:	41 0f 92 c0          	setb   r8b
  21ccd9:	48 89 95 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rdx
  21cce0:	48 89 8d 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rcx
  21cce7:	48 89 85 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rax
  21ccee:	44 88 85 4f fe ff ff 	mov    BYTE PTR [rbp-0x1b1],r8b
  21ccf5:	0f 82 6a 02 00 00    	jb     21cf65 <ArenaAllocator_alloc+0x495>
  21ccfb:	e9 75 02 00 00       	jmp    21cf75 <ArenaAllocator_alloc+0x4a5>
  21cd00:	66 8b 45 a8          	mov    ax,WORD PTR [rbp-0x58]
  21cd04:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  21cd0b:	66 89 85 4c fe ff ff 	mov    WORD PTR [rbp-0x1b4],ax
  21cd12:	e8 39 77 fe ff       	call   204450 <__zig_return_error>
  21cd17:	66 8b 85 4c fe ff ff 	mov    ax,WORD PTR [rbp-0x1b4]
  21cd1e:	66 89 45 80          	mov    WORD PTR [rbp-0x80],ax
  21cd22:	48 8b 7d 80          	mov    rdi,QWORD PTR [rbp-0x80]
  21cd26:	48 8b 8d d0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x130]
  21cd2d:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21cd30:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  21cd34:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21cd38:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  21cd3c:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  21cd40:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  21cd47:	48 81 c4 00 02 00 00 	add    rsp,0x200
  21cd4e:	5d                   	pop    rbp
  21cd4f:	c3                   	ret    
  21cd50:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  21cd54:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
                continue;
  21cd5b:	e9 a7 fe ff ff       	jmp    21cc07 <ArenaAllocator_alloc+0x137>
            if (new_end_index > cur_buf.len) {
  21cd60:	eb 00                	jmp    21cd62 <ArenaAllocator_alloc+0x292>
            const result = cur_buf[adjusted_index..new_end_index];
  21cd62:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  21cd69:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21cd70:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
  21cd77:	48 39 c8             	cmp    rax,rcx
  21cd7a:	48 89 85 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rax
  21cd81:	48 89 8d 38 fe ff ff 	mov    QWORD PTR [rbp-0x1c8],rcx
  21cd88:	48 89 95 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rdx
  21cd8f:	0f 86 25 02 00 00    	jbe    21cfba <ArenaAllocator_alloc+0x4ea>
  21cd95:	e9 10 02 00 00       	jmp    21cfaa <ArenaAllocator_alloc+0x4da>
  21cd9a:	48 8d 3d 77 85 00 00 	lea    rdi,[rip+0x8577]        # 225318 <__unnamed_5>
  21cda1:	31 c0                	xor    eax,eax
  21cda3:	89 c6                	mov    esi,eax
        var cur_node = if (self.buffer_list.last) |last_node| last_node else try self.createNode(0, n + alignment);
  21cda5:	e8 16 63 fe ff       	call   2030c0 <panic>
  21cdaa:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  21cdae:	31 c0                	xor    eax,eax
  21cdb0:	89 c1                	mov    ecx,eax
  21cdb2:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  21cdb9:	48 8b 95 b0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x150]
  21cdc0:	4c 8b 85 a8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x158]
  21cdc7:	e8 44 1c 00 00       	call   21ea10 <ArenaAllocator_createNode>
  21cdcc:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  21cdd1:	0f 85 c7 fd ff ff    	jne    21cb9e <ArenaAllocator_alloc+0xce>
  21cdd7:	e9 12 fe ff ff       	jmp    21cbee <ArenaAllocator_alloc+0x11e>
  21cddc:	48 8d 3d 1d 85 00 00 	lea    rdi,[rip+0x851d]        # 225300 <__unnamed_4>
  21cde3:	31 c0                	xor    eax,eax
  21cde5:	89 c6                	mov    esi,eax
            const cur_buf = cur_node.data[@sizeOf(BufNode)..];
  21cde7:	e8 d4 62 fe ff       	call   2030c0 <panic>
  21cdec:	48 8b 85 90 fe ff ff 	mov    rax,QWORD PTR [rbp-0x170]
  21cdf3:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  21cdf6:	48 83 c1 20          	add    rcx,0x20
  21cdfa:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
  21cdfe:	48 8b 8d 98 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x168]
  21ce05:	48 83 e9 20          	sub    rcx,0x20
  21ce09:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
  21ce0d:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  21ce11:	48 89 8d 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rcx
  21ce18:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  21ce1c:	48 89 8d 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rcx
            const addr = @ptrToInt(cur_buf.ptr) + self.end_index;
  21ce23:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
  21ce2a:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
  21ce31:	48 03 4a 38          	add    rcx,QWORD PTR [rdx+0x38]
  21ce35:	40 0f 92 c6          	setb   sil
  21ce39:	48 89 8d 28 fe ff ff 	mov    QWORD PTR [rbp-0x1d8],rcx
  21ce40:	40 88 b5 27 fe ff ff 	mov    BYTE PTR [rbp-0x1d9],sil
  21ce47:	72 02                	jb     21ce4b <ArenaAllocator_alloc+0x37b>
  21ce49:	eb 10                	jmp    21ce5b <ArenaAllocator_alloc+0x38b>
  21ce4b:	48 8d 3d c6 84 00 00 	lea    rdi,[rip+0x84c6]        # 225318 <__unnamed_5>
  21ce52:	31 c0                	xor    eax,eax
  21ce54:	89 c6                	mov    esi,eax
  21ce56:	e8 65 62 fe ff       	call   2030c0 <panic>
  21ce5b:	48 8b 85 28 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d8]
  21ce62:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
            const rem = @rem(addr, alignment);
  21ce69:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  21ce70:	8b 8d 44 ff ff ff    	mov    ecx,DWORD PTR [rbp-0xbc]
  21ce76:	89 ca                	mov    edx,ecx
  21ce78:	48 83 fa 00          	cmp    rdx,0x0
  21ce7c:	48 89 85 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],rax
  21ce83:	48 89 95 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rdx
  21ce8a:	74 2f                	je     21cebb <ArenaAllocator_alloc+0x3eb>
  21ce8c:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
  21ce93:	31 c9                	xor    ecx,ecx
  21ce95:	89 ca                	mov    edx,ecx
  21ce97:	48 8b b5 10 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1f0]
  21ce9e:	48 f7 f6             	div    rsi
  21cea1:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
            const march_forward_bytes = if (rem == 0) 0 else (alignment - rem);
  21cea8:	48 83 bd 08 ff ff ff 	cmp    QWORD PTR [rbp-0xf8],0x0
  21ceaf:	00 
  21ceb0:	0f 84 88 fd ff ff    	je     21cc3e <ArenaAllocator_alloc+0x16e>
  21ceb6:	e9 90 fd ff ff       	jmp    21cc4b <ArenaAllocator_alloc+0x17b>
  21cebb:	48 8d 3d 1e 87 00 00 	lea    rdi,[rip+0x871e]        # 2255e0 <__unnamed_14>
  21cec2:	31 c0                	xor    eax,eax
  21cec4:	89 c6                	mov    esi,eax
            const rem = @rem(addr, alignment);
  21cec6:	e8 f5 61 fe ff       	call   2030c0 <panic>
  21cecb:	48 8d 3d 46 84 00 00 	lea    rdi,[rip+0x8446]        # 225318 <__unnamed_5>
  21ced2:	31 c0                	xor    eax,eax
  21ced4:	89 c6                	mov    esi,eax
            const march_forward_bytes = if (rem == 0) 0 else (alignment - rem);
  21ced6:	e8 e5 61 fe ff       	call   2030c0 <panic>
  21cedb:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
  21cee2:	48 89 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rax
  21cee9:	e9 8c fd ff ff       	jmp    21cc7a <ArenaAllocator_alloc+0x1aa>
  21ceee:	48 8d 3d 23 84 00 00 	lea    rdi,[rip+0x8423]        # 225318 <__unnamed_5>
  21cef5:	31 c0                	xor    eax,eax
  21cef7:	89 c6                	mov    esi,eax
            const adjusted_index = self.end_index + march_forward_bytes;
  21cef9:	e8 c2 61 fe ff       	call   2030c0 <panic>
  21cefe:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  21cf05:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
            const new_end_index = adjusted_index + n;
  21cf0c:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  21cf13:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  21cf1a:	0f 92 c2             	setb   dl
  21cf1d:	48 89 8d 08 fe ff ff 	mov    QWORD PTR [rbp-0x1f8],rcx
  21cf24:	88 95 07 fe ff ff    	mov    BYTE PTR [rbp-0x1f9],dl
  21cf2a:	72 02                	jb     21cf2e <ArenaAllocator_alloc+0x45e>
  21cf2c:	eb 10                	jmp    21cf3e <ArenaAllocator_alloc+0x46e>
  21cf2e:	48 8d 3d e3 83 00 00 	lea    rdi,[rip+0x83e3]        # 225318 <__unnamed_5>
  21cf35:	31 c0                	xor    eax,eax
  21cf37:	89 c6                	mov    esi,eax
  21cf39:	e8 82 61 fe ff       	call   2030c0 <panic>
  21cf3e:	48 8b 85 08 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1f8]
  21cf45:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
            if (new_end_index > cur_buf.len) {
  21cf4c:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21cf53:	48 3b 8d 20 ff ff ff 	cmp    rcx,QWORD PTR [rbp-0xe0]
  21cf5a:	0f 87 55 fd ff ff    	ja     21ccb5 <ArenaAllocator_alloc+0x1e5>
  21cf60:	e9 fb fd ff ff       	jmp    21cd60 <ArenaAllocator_alloc+0x290>
  21cf65:	48 8d 3d ac 83 00 00 	lea    rdi,[rip+0x83ac]        # 225318 <__unnamed_5>
  21cf6c:	31 c0                	xor    eax,eax
  21cf6e:	89 c6                	mov    esi,eax
                cur_node = try self.createNode(cur_buf.len, n + alignment);
  21cf70:	e8 4b 61 fe ff       	call   2030c0 <panic>
  21cf75:	48 8d 7d a8          	lea    rdi,[rbp-0x58]
  21cf79:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  21cf80:	48 8b 95 60 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1a0]
  21cf87:	48 8b 8d 58 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1a8]
  21cf8e:	4c 8b 85 50 fe ff ff 	mov    r8,QWORD PTR [rbp-0x1b0]
  21cf95:	e8 76 1a 00 00       	call   21ea10 <ArenaAllocator_createNode>
  21cf9a:	66 83 7d a8 00       	cmp    WORD PTR [rbp-0x58],0x0
  21cf9f:	0f 85 5b fd ff ff    	jne    21cd00 <ArenaAllocator_alloc+0x230>
  21cfa5:	e9 a6 fd ff ff       	jmp    21cd50 <ArenaAllocator_alloc+0x280>
  21cfaa:	48 8d 3d 4f 83 00 00 	lea    rdi,[rip+0x834f]        # 225300 <__unnamed_4>
  21cfb1:	31 c0                	xor    eax,eax
  21cfb3:	89 c6                	mov    esi,eax
            const result = cur_buf[adjusted_index..new_end_index];
  21cfb5:	e8 06 61 fe ff       	call   2030c0 <panic>
  21cfba:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  21cfc1:	48 8b 8d 30 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d0]
  21cfc8:	48 39 c8             	cmp    rax,rcx
  21cfcb:	76 10                	jbe    21cfdd <ArenaAllocator_alloc+0x50d>
  21cfcd:	48 8d 3d 2c 83 00 00 	lea    rdi,[rip+0x832c]        # 225300 <__unnamed_4>
  21cfd4:	31 c0                	xor    eax,eax
  21cfd6:	89 c6                	mov    esi,eax
  21cfd8:	e8 e3 60 fe ff       	call   2030c0 <panic>
  21cfdd:	48 8b 85 40 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c0]
  21cfe4:	48 03 85 18 ff ff ff 	add    rax,QWORD PTR [rbp-0xe8]
  21cfeb:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  21cff2:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  21cff9:	48 8b 8d 40 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1c0]
  21d000:	48 29 c8             	sub    rax,rcx
  21d003:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  21d00a:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21d011:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
  21d018:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  21d01f:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
            self.end_index = new_end_index;
  21d026:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  21d02d:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  21d034:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
            return result;
  21d038:	66 c7 85 58 ff ff ff 	mov    WORD PTR [rbp-0xa8],0x0
  21d03f:	00 00 
  21d041:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
  21d048:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  21d04f:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  21d056:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  21d05d:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
  21d064:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
  21d06b:	48 89 02             	mov    QWORD PTR [rdx],rax
  21d06e:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  21d075:	48 89 42 08          	mov    QWORD PTR [rdx+0x8],rax
  21d079:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  21d080:	48 89 42 10          	mov    QWORD PTR [rdx+0x10],rax
  21d084:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  21d08b:	48 81 c4 00 02 00 00 	add    rsp,0x200
  21d092:	5d                   	pop    rbp
  21d093:	c3                   	ret    
  21d094:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21d09b:	00 00 00 00 00 

000000000021d0a0 <ArenaAllocator_realloc>:
    fn realloc(allocator: *Allocator, old_mem: []u8, new_size: usize, alignment: u29) ![]u8 {
  21d0a0:	55                   	push   rbp
  21d0a1:	48 89 e5             	mov    rbp,rsp
  21d0a4:	48 81 ec f0 00 00 00 	sub    rsp,0xf0
  21d0ab:	48 89 f8             	mov    rax,rdi
  21d0ae:	48 89 95 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdx
  21d0b5:	4c 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],r8
  21d0bc:	41 81 e1 ff ff ff 1f 	and    r9d,0x1fffffff
  21d0c3:	44 89 8d 64 ff ff ff 	mov    DWORD PTR [rbp-0x9c],r9d
        if (new_size <= old_mem.len) {
  21d0ca:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  21d0d1:	48 3b 51 08          	cmp    rdx,QWORD PTR [rcx+0x8]
  21d0d5:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  21d0dc:	48 89 bd 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rdi
  21d0e3:	48 89 b5 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rsi
  21d0ea:	48 89 8d 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rcx
  21d0f1:	77 32                	ja     21d125 <ArenaAllocator_realloc+0x85>
  21d0f3:	31 c0                	xor    eax,eax
  21d0f5:	89 c1                	mov    ecx,eax
            return old_mem[0..new_size];
  21d0f7:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  21d0fe:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  21d105:	48 8b 7e 08          	mov    rdi,QWORD PTR [rsi+0x8]
  21d109:	48 39 d1             	cmp    rcx,rdx
  21d10c:	48 89 bd 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rdi
  21d113:	48 89 95 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdx
  21d11a:	0f 86 15 01 00 00    	jbe    21d235 <ArenaAllocator_realloc+0x195>
  21d120:	e9 00 01 00 00       	jmp    21d225 <ArenaAllocator_realloc+0x185>
  21d125:	48 8d 45 c0          	lea    rax,[rbp-0x40]
            const result = try alloc(allocator, new_size, alignment);
  21d129:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  21d130:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  21d137:	44 8b 85 64 ff ff ff 	mov    r8d,DWORD PTR [rbp-0x9c]
  21d13e:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  21d142:	48 8b b5 38 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc8]
  21d149:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  21d150:	e8 7b f9 ff ff       	call   21cad0 <ArenaAllocator_alloc>
  21d155:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  21d15a:	74 50                	je     21d1ac <ArenaAllocator_realloc+0x10c>
  21d15c:	66 8b 45 c0          	mov    ax,WORD PTR [rbp-0x40]
  21d160:	48 8b bd 38 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xc8]
  21d167:	66 89 85 16 ff ff ff 	mov    WORD PTR [rbp-0xea],ax
  21d16e:	e8 dd 72 fe ff       	call   204450 <__zig_return_error>
  21d173:	66 8b 85 16 ff ff ff 	mov    ax,WORD PTR [rbp-0xea]
  21d17a:	66 89 45 90          	mov    WORD PTR [rbp-0x70],ax
  21d17e:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  21d182:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  21d189:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21d18c:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  21d190:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21d194:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  21d198:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  21d19c:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  21d1a3:	48 81 c4 f0 00 00 00 	add    rsp,0xf0
  21d1aa:	5d                   	pop    rbp
  21d1ab:	c3                   	ret    
  21d1ac:	48 8d bd 50 ff ff ff 	lea    rdi,[rbp-0xb0]
  21d1b3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21d1b7:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
  21d1be:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  21d1c2:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
            mem.copy(u8, result, old_mem);
  21d1c9:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  21d1d0:	e8 7b e3 ff ff       	call   21b550 <copy>
            return result;
  21d1d5:	66 c7 85 78 ff ff ff 	mov    WORD PTR [rbp-0x88],0x0
  21d1dc:	00 00 
  21d1de:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  21d1e5:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  21d1e9:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
  21d1f0:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  21d1f4:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  21d1fb:	48 8b b5 40 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc0]
  21d202:	48 89 06             	mov    QWORD PTR [rsi],rax
  21d205:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  21d209:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  21d20d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  21d211:	48 89 46 10          	mov    QWORD PTR [rsi+0x10],rax
  21d215:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  21d21c:	48 81 c4 f0 00 00 00 	add    rsp,0xf0
  21d223:	5d                   	pop    rbp
  21d224:	c3                   	ret    
  21d225:	48 8d 3d d4 80 00 00 	lea    rdi,[rip+0x80d4]        # 225300 <__unnamed_4>
  21d22c:	31 c0                	xor    eax,eax
  21d22e:	89 c6                	mov    esi,eax
            return old_mem[0..new_size];
  21d230:	e8 8b 5e fe ff       	call   2030c0 <panic>
  21d235:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21d23c:	48 8b 8d 28 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd8]
  21d243:	48 39 c8             	cmp    rax,rcx
  21d246:	76 10                	jbe    21d258 <ArenaAllocator_realloc+0x1b8>
  21d248:	48 8d 3d b1 80 00 00 	lea    rdi,[rip+0x80b1]        # 225300 <__unnamed_4>
  21d24f:	31 c0                	xor    eax,eax
  21d251:	89 c6                	mov    esi,eax
  21d253:	e8 68 5e fe ff       	call   2030c0 <panic>
  21d258:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21d25f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  21d262:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  21d266:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21d26d:	48 83 e9 00          	sub    rcx,0x0
  21d271:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  21d275:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  21d27b:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  21d27f:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  21d283:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  21d287:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  21d28b:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  21d28f:	48 8b 95 40 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc0]
  21d296:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  21d299:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  21d29d:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  21d2a1:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21d2a5:	48 89 4a 10          	mov    QWORD PTR [rdx+0x10],rcx
  21d2a9:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  21d2b0:	48 81 c4 f0 00 00 00 	add    rsp,0xf0
  21d2b7:	5d                   	pop    rbp
  21d2b8:	c3                   	ret    
  21d2b9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

000000000021d2c0 <ArenaAllocator_free>:
    fn free(allocator: *Allocator, bytes: []u8) void {}
  21d2c0:	55                   	push   rbp
  21d2c1:	48 89 e5             	mov    rbp,rsp
  21d2c4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  21d2c8:	5d                   	pop    rbp
  21d2c9:	c3                   	ret    
  21d2ca:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000021d2d0 <Allocator_alignedAlloc.80>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  21d2d0:	55                   	push   rbp
  21d2d1:	48 89 e5             	mov    rbp,rsp
  21d2d4:	48 81 ec 20 01 00 00 	sub    rsp,0x120
  21d2db:	48 89 f8             	mov    rax,rdi
  21d2de:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  21d2e5:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  21d2ec:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  21d2f3:	00 
  21d2f4:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  21d2fb:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  21d302:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  21d309:	75 37                	jne    21d342 <Allocator_alignedAlloc.80+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  21d30b:	48 8b 05 66 4d fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe4d66]        # 202078 <__unnamed_162>
  21d312:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21d319:	48 89 01             	mov    QWORD PTR [rcx],rax
  21d31c:	48 8b 05 5d 4d fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe4d5d]        # 202080 <__unnamed_162+0x8>
  21d323:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21d327:	48 8b 05 5a 4d fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe4d5a]        # 202088 <__unnamed_162+0x10>
  21d32e:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21d332:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21d339:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21d340:	5d                   	pop    rbp
  21d341:	c3                   	ret    
        if (n == 0) {
  21d342:	eb 00                	jmp    21d344 <Allocator_alignedAlloc.80+0x74>
  21d344:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  21d348:	b8 c8 00 00 00       	mov    eax,0xc8
  21d34d:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  21d34f:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  21d356:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21d35d:	e8 ce e8 fe ff       	call   20bc30 <mul>
  21d362:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  21d367:	74 43                	je     21d3ac <Allocator_alignedAlloc.80+0xdc>
  21d369:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  21d370:	e8 db 70 fe ff       	call   204450 <__zig_return_error>
  21d375:	48 8b 3d 14 4d fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe4d14]        # 202090 <__unnamed_163>
  21d37c:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21d383:	48 89 38             	mov    QWORD PTR [rax],rdi
  21d386:	48 8b 3d 0b 4d fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe4d0b]        # 202098 <__unnamed_163+0x8>
  21d38d:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  21d391:	48 8b 3d 08 4d fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe4d08]        # 2020a0 <__unnamed_163+0x10>
  21d398:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  21d39c:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21d3a3:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21d3aa:	5d                   	pop    rbp
  21d3ab:	c3                   	ret    
  21d3ac:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21d3b0:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  21d3b7:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  21d3bb:	41 b8 04 00 00 00    	mov    r8d,0x4
  21d3c1:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  21d3c8:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  21d3cf:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  21d3d6:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  21d3d9:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  21d3e0:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  21d3e7:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  21d3ee:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  21d3f5:	4c 89 ce             	mov    rsi,r9
  21d3f8:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  21d3ff:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  21d406:	4c 89 d1             	mov    rcx,r10
  21d409:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  21d410:	41 ff d3             	call   r11
  21d413:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  21d418:	74 50                	je     21d46a <Allocator_alignedAlloc.80+0x19a>
  21d41a:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  21d41e:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  21d425:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  21d42c:	e8 1f 70 fe ff       	call   204450 <__zig_return_error>
  21d431:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  21d438:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  21d43c:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  21d440:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21d447:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21d44a:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  21d44e:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21d452:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  21d456:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  21d45a:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21d461:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21d468:	5d                   	pop    rbp
  21d469:	c3                   	ret    
  21d46a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  21d46e:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  21d475:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21d479:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  21d480:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  21d487:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  21d48e:	0f 94 c1             	sete   cl
  21d491:	0f b6 f9             	movzx  edi,cl
  21d494:	e8 67 5b fe ff       	call   203000 <assert>
  21d499:	be aa 00 00 00       	mov    esi,0xaa
  21d49e:	bf 08 00 00 00       	mov    edi,0x8
  21d4a3:	89 fa                	mov    edx,edi
  21d4a5:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  21d4ac:	48 89 c7             	mov    rdi,rax
  21d4af:	e8 fc 47 00 00       	call   221cb0 <memset>
  21d4b4:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  21d4bb:	00 00 00 00 
  21d4bf:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  21d4c6:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  21d4cd:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  21d4d4:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  21d4db:	48 39 c8             	cmp    rax,rcx
  21d4de:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  21d4e5:	73 32                	jae    21d519 <Allocator_alignedAlloc.80+0x249>
  21d4e7:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21d4ee:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  21d4f5:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  21d4fc:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  21d503:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  21d505:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21d50c:	48 83 c1 01          	add    rcx,0x1
  21d510:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  21d517:	eb b4                	jmp    21d4cd <Allocator_alignedAlloc.80+0x1fd>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  21d519:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  21d520:	48 83 e0 03          	and    rax,0x3
  21d524:	48 83 f8 00          	cmp    rax,0x0
  21d528:	75 32                	jne    21d55c <Allocator_alignedAlloc.80+0x28c>
  21d52a:	b8 c8 00 00 00       	mov    eax,0xc8
  21d52f:	89 c1                	mov    ecx,eax
  21d531:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
  21d538:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
  21d53c:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
  21d543:	48 89 d0             	mov    rax,rdx
  21d546:	31 f6                	xor    esi,esi
  21d548:	48 89 95 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdx
  21d54f:	89 f2                	mov    edx,esi
  21d551:	48 f7 f1             	div    rcx
  21d554:	48 83 fa 00          	cmp    rdx,0x0
  21d558:	74 12                	je     21d56c <Allocator_alignedAlloc.80+0x29c>
  21d55a:	eb 77                	jmp    21d5d3 <Allocator_alignedAlloc.80+0x303>
  21d55c:	48 8d 3d cd 7f 00 00 	lea    rdi,[rip+0x7fcd]        # 225530 <__unnamed_60>
  21d563:	31 c0                	xor    eax,eax
  21d565:	89 c6                	mov    esi,eax
  21d567:	e8 54 5b fe ff       	call   2030c0 <panic>
  21d56c:	b8 c8 00 00 00       	mov    eax,0xc8
  21d571:	89 c1                	mov    ecx,eax
  21d573:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  21d57a:	31 d2                	xor    edx,edx
  21d57c:	48 f7 f1             	div    rcx
  21d57f:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  21d583:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  21d58a:	00 00 
  21d58c:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  21d590:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  21d597:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  21d59b:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  21d59f:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21d5a6:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21d5ad:	48 89 01             	mov    QWORD PTR [rcx],rax
  21d5b0:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  21d5b7:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21d5bb:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  21d5bf:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21d5c3:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21d5ca:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21d5d1:	5d                   	pop    rbp
  21d5d2:	c3                   	ret    
  21d5d3:	48 8d 3d 6e 7f 00 00 	lea    rdi,[rip+0x7f6e]        # 225548 <__unnamed_61>
  21d5da:	31 c0                	xor    eax,eax
  21d5dc:	89 c6                	mov    esi,eax
  21d5de:	e8 dd 5a fe ff       	call   2030c0 <panic>
  21d5e3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21d5ea:	84 00 00 00 00 00 

000000000021d5f0 <addNullByte>:
    assert(len(c"123456789") == 9);
}

/// Returns a mutable slice with 1 more byte of length which is a null byte.
/// Caller owns the returned memory.
pub fn addNullByte(allocator: *mem.Allocator, slice: []const u8) ![]u8 {
  21d5f0:	55                   	push   rbp
  21d5f1:	48 89 e5             	mov    rbp,rsp
  21d5f4:	48 81 ec c0 00 00 00 	sub    rsp,0xc0
  21d5fb:	48 89 f8             	mov    rax,rdi
  21d5fe:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
    const result = try allocator.alloc(u8, slice.len + 1);
  21d602:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  21d606:	4c 8b 41 08          	mov    r8,QWORD PTR [rcx+0x8]
  21d60a:	49 83 c0 01          	add    r8,0x1
  21d60e:	41 0f 92 c1          	setb   r9b
  21d612:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  21d616:	48 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rcx
  21d61d:	48 89 bd 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdi
  21d624:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
  21d62b:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
  21d632:	4c 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],r8
  21d639:	44 88 8d 57 ff ff ff 	mov    BYTE PTR [rbp-0xa9],r9b
  21d640:	0f 82 8c 00 00 00    	jb     21d6d2 <addNullByte+0xe2>
  21d646:	e9 97 00 00 00       	jmp    21d6e2 <addNullByte+0xf2>
  21d64b:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  21d64f:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  21d656:	66 89 85 54 ff ff ff 	mov    WORD PTR [rbp-0xac],ax
  21d65d:	e8 ee 6d fe ff       	call   204450 <__zig_return_error>
  21d662:	66 8b 85 54 ff ff ff 	mov    ax,WORD PTR [rbp-0xac]
  21d669:	66 89 45 b8          	mov    WORD PTR [rbp-0x48],ax
  21d66d:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  21d671:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
  21d678:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21d67b:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21d67f:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21d683:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  21d687:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  21d68b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  21d68f:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  21d696:	5d                   	pop    rbp
  21d697:	c3                   	ret    
  21d698:	48 8d 7d 88          	lea    rdi,[rbp-0x78]
  21d69c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21d6a0:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  21d6a4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21d6a8:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
    mem.copy(u8, result, slice);
  21d6ac:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
  21d6b3:	e8 98 de ff ff       	call   21b550 <copy>
    result[slice.len] = 0;
  21d6b8:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  21d6bf:	48 8b 70 08          	mov    rsi,QWORD PTR [rax+0x8]
  21d6c3:	48 3b 75 90          	cmp    rsi,QWORD PTR [rbp-0x70]
  21d6c7:	48 89 b5 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rsi
  21d6ce:	72 4d                	jb     21d71d <addNullByte+0x12d>
  21d6d0:	eb 3b                	jmp    21d70d <addNullByte+0x11d>
  21d6d2:	48 8d 3d 3f 7c 00 00 	lea    rdi,[rip+0x7c3f]        # 225318 <__unnamed_5>
  21d6d9:	31 c0                	xor    eax,eax
  21d6db:	89 c6                	mov    esi,eax
    const result = try allocator.alloc(u8, slice.len + 1);
  21d6dd:	e8 de 59 fe ff       	call   2030c0 <panic>
  21d6e2:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
  21d6e6:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
  21d6ed:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  21d6f4:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  21d6fb:	e8 c0 b5 ff ff       	call   218cc0 <Allocator_alloc.57>
  21d700:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  21d705:	0f 85 40 ff ff ff    	jne    21d64b <addNullByte+0x5b>
  21d70b:	eb 8b                	jmp    21d698 <addNullByte+0xa8>
  21d70d:	48 8d 3d ec 7b 00 00 	lea    rdi,[rip+0x7bec]        # 225300 <__unnamed_4>
  21d714:	31 c0                	xor    eax,eax
  21d716:	89 c6                	mov    esi,eax
    result[slice.len] = 0;
  21d718:	e8 a3 59 fe ff       	call   2030c0 <panic>
  21d71d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  21d721:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
  21d728:	c6 04 08 00          	mov    BYTE PTR [rax+rcx*1],0x0
    return result;
  21d72c:	66 c7 45 a0 00 00    	mov    WORD PTR [rbp-0x60],0x0
  21d732:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  21d736:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  21d73a:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  21d73e:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  21d742:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  21d746:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  21d74d:	48 89 02             	mov    QWORD PTR [rdx],rax
  21d750:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  21d754:	48 89 42 08          	mov    QWORD PTR [rdx+0x8],rax
  21d758:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  21d75c:	48 89 42 10          	mov    QWORD PTR [rdx+0x10],rax
  21d760:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  21d764:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  21d76b:	5d                   	pop    rbp
  21d76c:	c3                   	ret    
  21d76d:	0f 1f 00             	nop    DWORD PTR [rax]

000000000021d770 <posixOpenC>:
pub fn posixOpenC(file_path: [*]const u8, flags: u32, perm: usize) !i32 {
  21d770:	55                   	push   rbp
  21d771:	48 89 e5             	mov    rbp,rsp
  21d774:	48 83 ec 70          	sub    rsp,0x70
  21d778:	48 89 f8             	mov    rax,rdi
  21d77b:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  21d77f:	89 4d e4             	mov    DWORD PTR [rbp-0x1c],ecx
  21d782:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
  21d786:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  21d78a:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
  21d78e:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
    while (true) {
  21d792:	eb 00                	jmp    21d794 <posixOpenC+0x24>
        const result = posix.open(file_path, flags, perm);
  21d794:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  21d798:	8b 75 e4             	mov    esi,DWORD PTR [rbp-0x1c]
  21d79b:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  21d79f:	e8 0c 1b 00 00       	call   21f2b0 <open>
  21d7a4:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
        const err = posix.getErrno(result);
  21d7a8:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  21d7ac:	e8 3f d9 fe ff       	call   20b0f0 <getErrno>
  21d7b1:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
        if (err > 0) {
  21d7b5:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
  21d7ba:	0f 86 57 02 00 00    	jbe    21da17 <posixOpenC+0x2a7>
            switch (err) {
  21d7c0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21d7c4:	48 83 c0 ff          	add    rax,0xffffffffffffffff
  21d7c8:	48 89 c1             	mov    rcx,rax
  21d7cb:	48 83 e9 4a          	sub    rcx,0x4a
  21d7cf:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  21d7d3:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
  21d7d7:	77 14                	ja     21d7ed <posixOpenC+0x7d>
  21d7d9:	48 8d 05 b4 2a fe ff 	lea    rax,[rip+0xfffffffffffe2ab4]        # 200294 <arch-0x29f>
  21d7e0:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  21d7e4:	48 63 14 88          	movsxd rdx,DWORD PTR [rax+rcx*4]
  21d7e8:	48 01 c2             	add    rdx,rax
  21d7eb:	ff e2                	jmp    rdx
                else => return unexpectedErrorPosix(err),
  21d7ed:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  21d7f1:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  21d7f5:	e8 96 d9 fe ff       	call   20b190 <unexpectedErrorPosix>
  21d7fa:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  21d7fe:	66 89 45 9e          	mov    WORD PTR [rbp-0x62],ax
  21d802:	e8 49 6c fe ff       	call   204450 <__zig_return_error>
  21d807:	66 8b 45 9e          	mov    ax,WORD PTR [rbp-0x62]
  21d80b:	66 89 45 f8          	mov    WORD PTR [rbp-0x8],ax
  21d80f:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21d813:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  21d817:	48 89 37             	mov    QWORD PTR [rdi],rsi
  21d81a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  21d81e:	48 83 c4 70          	add    rsp,0x70
  21d822:	5d                   	pop    rbp
  21d823:	c3                   	ret    
                posix.EINTR => continue,
  21d824:	e9 69 ff ff ff       	jmp    21d792 <posixOpenC+0x22>
  21d829:	48 8d 3d 90 7b 00 00 	lea    rdi,[rip+0x7b90]        # 2253c0 <__unnamed_7>
  21d830:	31 c0                	xor    eax,eax
  21d832:	89 c6                	mov    esi,eax
                posix.EFAULT => unreachable,
  21d834:	e8 87 58 fe ff       	call   2030c0 <panic>
  21d839:	48 8d 3d 80 7b 00 00 	lea    rdi,[rip+0x7b80]        # 2253c0 <__unnamed_7>
  21d840:	31 c0                	xor    eax,eax
  21d842:	89 c6                	mov    esi,eax
                posix.EINVAL => unreachable,
  21d844:	e8 77 58 fe ff       	call   2030c0 <panic>
                posix.EACCES => return PosixOpenError.AccessDenied,
  21d849:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  21d84d:	e8 fe 6b fe ff       	call   204450 <__zig_return_error>
  21d852:	48 8b 3d df 4b fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe4bdf]        # 202438 <__unnamed_164>
  21d859:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21d85d:	48 89 38             	mov    QWORD PTR [rax],rdi
  21d860:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  21d864:	48 83 c4 70          	add    rsp,0x70
  21d868:	5d                   	pop    rbp
  21d869:	c3                   	ret    
                posix.EFBIG, posix.EOVERFLOW => return PosixOpenError.FileTooBig,
  21d86a:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  21d86e:	e8 dd 6b fe ff       	call   204450 <__zig_return_error>
  21d873:	48 8b 3d 2e 4b fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe4b2e]        # 2023a8 <__unnamed_165>
  21d87a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21d87e:	48 89 38             	mov    QWORD PTR [rax],rdi
  21d881:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  21d885:	48 83 c4 70          	add    rsp,0x70
  21d889:	5d                   	pop    rbp
  21d88a:	c3                   	ret    
                posix.EISDIR => return PosixOpenError.IsDir,
  21d88b:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  21d88f:	e8 bc 6b fe ff       	call   204450 <__zig_return_error>
  21d894:	48 8b 3d 55 4b fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe4b55]        # 2023f0 <__unnamed_166>
  21d89b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21d89f:	48 89 38             	mov    QWORD PTR [rax],rdi
  21d8a2:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  21d8a6:	48 83 c4 70          	add    rsp,0x70
  21d8aa:	5d                   	pop    rbp
  21d8ab:	c3                   	ret    
                posix.ELOOP => return PosixOpenError.SymLinkLoop,
  21d8ac:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  21d8b0:	e8 9b 6b fe ff       	call   204450 <__zig_return_error>
  21d8b5:	48 8b 3d 64 4b fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe4b64]        # 202420 <__unnamed_167>
  21d8bc:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21d8c0:	48 89 38             	mov    QWORD PTR [rax],rdi
  21d8c3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  21d8c7:	48 83 c4 70          	add    rsp,0x70
  21d8cb:	5d                   	pop    rbp
  21d8cc:	c3                   	ret    
                posix.EMFILE => return PosixOpenError.ProcessFdQuotaExceeded,
  21d8cd:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  21d8d1:	e8 7a 6b fe ff       	call   204450 <__zig_return_error>
  21d8d6:	48 8b 3d 63 4b fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe4b63]        # 202440 <__unnamed_168>
  21d8dd:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21d8e1:	48 89 38             	mov    QWORD PTR [rax],rdi
  21d8e4:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  21d8e8:	48 83 c4 70          	add    rsp,0x70
  21d8ec:	5d                   	pop    rbp
  21d8ed:	c3                   	ret    
                posix.ENAMETOOLONG => return PosixOpenError.NameTooLong,
  21d8ee:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  21d8f2:	e8 59 6b fe ff       	call   204450 <__zig_return_error>
  21d8f7:	48 8b 3d fa 4a fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe4afa]        # 2023f8 <__unnamed_169>
  21d8fe:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21d902:	48 89 38             	mov    QWORD PTR [rax],rdi
  21d905:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  21d909:	48 83 c4 70          	add    rsp,0x70
  21d90d:	5d                   	pop    rbp
  21d90e:	c3                   	ret    
                posix.ENFILE => return PosixOpenError.SystemFdQuotaExceeded,
  21d90f:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  21d913:	e8 38 6b fe ff       	call   204450 <__zig_return_error>
  21d918:	48 8b 3d 79 4a fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe4a79]        # 202398 <__unnamed_170>
  21d91f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21d923:	48 89 38             	mov    QWORD PTR [rax],rdi
  21d926:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  21d92a:	48 83 c4 70          	add    rsp,0x70
  21d92e:	5d                   	pop    rbp
  21d92f:	c3                   	ret    
                posix.ENODEV => return PosixOpenError.NoDevice,
  21d930:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  21d934:	e8 17 6b fe ff       	call   204450 <__zig_return_error>
  21d939:	48 8b 3d e8 4a fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe4ae8]        # 202428 <__unnamed_171>
  21d940:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21d944:	48 89 38             	mov    QWORD PTR [rax],rdi
  21d947:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  21d94b:	48 83 c4 70          	add    rsp,0x70
  21d94f:	5d                   	pop    rbp
  21d950:	c3                   	ret    
                posix.ENOENT => return PosixOpenError.PathNotFound,
  21d951:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  21d955:	e8 f6 6a fe ff       	call   204450 <__zig_return_error>
  21d95a:	48 8b 3d 3f 4a fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe4a3f]        # 2023a0 <__unnamed_172>
  21d961:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21d965:	48 89 38             	mov    QWORD PTR [rax],rdi
  21d968:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  21d96c:	48 83 c4 70          	add    rsp,0x70
  21d970:	5d                   	pop    rbp
  21d971:	c3                   	ret    
                posix.ENOMEM => return PosixOpenError.SystemResources,
  21d972:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  21d976:	e8 d5 6a fe ff       	call   204450 <__zig_return_error>
  21d97b:	48 8b 3d 5e 4a fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe4a5e]        # 2023e0 <__unnamed_173>
  21d982:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21d986:	48 89 38             	mov    QWORD PTR [rax],rdi
  21d989:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  21d98d:	48 83 c4 70          	add    rsp,0x70
  21d991:	5d                   	pop    rbp
  21d992:	c3                   	ret    
                posix.ENOSPC => return PosixOpenError.NoSpaceLeft,
  21d993:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  21d997:	e8 b4 6a fe ff       	call   204450 <__zig_return_error>
  21d99c:	48 8b 3d 75 4a fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe4a75]        # 202418 <__unnamed_174>
  21d9a3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21d9a7:	48 89 38             	mov    QWORD PTR [rax],rdi
  21d9aa:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  21d9ae:	48 83 c4 70          	add    rsp,0x70
  21d9b2:	5d                   	pop    rbp
  21d9b3:	c3                   	ret    
                posix.ENOTDIR => return PosixOpenError.NotDir,
  21d9b4:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  21d9b8:	e8 93 6a fe ff       	call   204450 <__zig_return_error>
  21d9bd:	48 8b 3d f4 49 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe49f4]        # 2023b8 <__unnamed_175>
  21d9c4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21d9c8:	48 89 38             	mov    QWORD PTR [rax],rdi
  21d9cb:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  21d9cf:	48 83 c4 70          	add    rsp,0x70
  21d9d3:	5d                   	pop    rbp
  21d9d4:	c3                   	ret    
                posix.EPERM => return PosixOpenError.AccessDenied,
  21d9d5:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  21d9d9:	e8 72 6a fe ff       	call   204450 <__zig_return_error>
  21d9de:	48 8b 3d 53 4a fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe4a53]        # 202438 <__unnamed_164>
  21d9e5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21d9e9:	48 89 38             	mov    QWORD PTR [rax],rdi
  21d9ec:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  21d9f0:	48 83 c4 70          	add    rsp,0x70
  21d9f4:	5d                   	pop    rbp
  21d9f5:	c3                   	ret    
                posix.EEXIST => return PosixOpenError.PathAlreadyExists,
  21d9f6:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  21d9fa:	e8 51 6a fe ff       	call   204450 <__zig_return_error>
  21d9ff:	48 8b 3d 0a 4a fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe4a0a]        # 202410 <__unnamed_177>
  21da06:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21da0a:	48 89 38             	mov    QWORD PTR [rax],rdi
  21da0d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  21da11:	48 83 c4 70          	add    rsp,0x70
  21da15:	5d                   	pop    rbp
  21da16:	c3                   	ret    
        if (err > 0) {
  21da17:	eb 00                	jmp    21da19 <posixOpenC+0x2a9>
        return @intCast(i32, result);
  21da19:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  21da1d:	89 c1                	mov    ecx,eax
  21da1f:	48 63 d1             	movsxd rdx,ecx
  21da22:	48 39 d0             	cmp    rax,rdx
  21da25:	89 4d 98             	mov    DWORD PTR [rbp-0x68],ecx
  21da28:	75 21                	jne    21da4b <posixOpenC+0x2db>
  21da2a:	66 c7 45 f0 00 00    	mov    WORD PTR [rbp-0x10],0x0
  21da30:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
  21da33:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
  21da36:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  21da3a:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  21da3e:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  21da41:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  21da45:	48 83 c4 70          	add    rsp,0x70
  21da49:	5d                   	pop    rbp
  21da4a:	c3                   	ret    
  21da4b:	48 8d 3d 56 79 00 00 	lea    rdi,[rip+0x7956]        # 2253a8 <__unnamed_8>
  21da52:	31 c0                	xor    eax,eax
  21da54:	89 c6                	mov    esi,eax
  21da56:	e8 65 56 fe ff       	call   2030c0 <panic>
  21da5b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000021da60 <close.81>:
pub fn close(fd: i32) usize {
  21da60:	55                   	push   rbp
  21da61:	48 89 e5             	mov    rbp,rsp
  21da64:	48 83 ec 10          	sub    rsp,0x10
  21da68:	b8 03 00 00 00       	mov    eax,0x3
  21da6d:	89 c1                	mov    ecx,eax
  21da6f:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    return syscall1(SYS_close, @intCast(usize, fd));
  21da72:	48 63 75 fc          	movsxd rsi,DWORD PTR [rbp-0x4]
  21da76:	48 89 cf             	mov    rdi,rcx
  21da79:	e8 82 18 00 00       	call   21f300 <syscall1>
  21da7e:	48 83 c4 10          	add    rsp,0x10
  21da82:	5d                   	pop    rbp
  21da83:	c3                   	ret    
  21da84:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21da8b:	00 00 00 00 00 

000000000021da90 <BaseLinkedList(promise,void,(struct []const u8 constant))_popFirst>:

        /// Remove and return the first node in the list.
        ///
        /// Returns:
        ///     A pointer to the first node in the list.
        pub fn popFirst(list: *Self) ?*Node {
  21da90:	55                   	push   rbp
  21da91:	48 89 e5             	mov    rbp,rsp
  21da94:	48 83 ec 20          	sub    rsp,0x20
  21da98:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
            const first = list.first orelse return null;
  21da9c:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  21daa0:	48 83 3f 00          	cmp    QWORD PTR [rdi],0x0
  21daa4:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  21daa8:	75 08                	jne    21dab2 <BaseLinkedList(promise,void,(struct []const u8 constant))_popFirst+0x22>
  21daaa:	31 c0                	xor    eax,eax
  21daac:	48 83 c4 20          	add    rsp,0x20
  21dab0:	5d                   	pop    rbp
  21dab1:	c3                   	ret    
  21dab2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21dab6:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  21dab9:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  21dabd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  21dac1:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
            list.remove(first);
  21dac5:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  21dac9:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  21dacd:	e8 7e 18 00 00       	call   21f350 <BaseLinkedList(promise,void,(struct []const u8 constant))_remove>
            return first;
  21dad2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21dad6:	48 83 c4 20          	add    rsp,0x20
  21dada:	5d                   	pop    rbp
  21dadb:	c3                   	ret    
  21dadc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000021dae0 <InStream(ReadError)_readVarInt>:
        pub fn readVarInt(self: *Self, endian: builtin.Endian, comptime T: type, size: usize) !T {
  21dae0:	55                   	push   rbp
  21dae1:	48 89 e5             	mov    rbp,rsp
  21dae4:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  21daeb:	88 c8                	mov    al,cl
  21daed:	49 89 f9             	mov    r9,rdi
  21daf0:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
  21daf4:	24 01                	and    al,0x1
  21daf6:	88 45 bf             	mov    BYTE PTR [rbp-0x41],al
  21daf9:	4c 89 45 b0          	mov    QWORD PTR [rbp-0x50],r8
            assert(size <= @sizeOf(T));
  21dafd:	48 83 7d b0 08       	cmp    QWORD PTR [rbp-0x50],0x8
  21db02:	0f 96 c0             	setbe  al
  21db05:	0f b6 c8             	movzx  ecx,al
  21db08:	48 89 7d 90          	mov    QWORD PTR [rbp-0x70],rdi
  21db0c:	89 cf                	mov    edi,ecx
  21db0e:	4c 89 4d 88          	mov    QWORD PTR [rbp-0x78],r9
  21db12:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
  21db16:	e8 e5 54 fe ff       	call   203000 <assert>
            assert(size <= 8);
  21db1b:	48 83 7d b0 08       	cmp    QWORD PTR [rbp-0x50],0x8
  21db20:	0f 96 c0             	setbe  al
  21db23:	0f b6 f8             	movzx  edi,al
  21db26:	e8 d5 54 fe ff       	call   203000 <assert>
  21db2b:	31 c9                	xor    ecx,ecx
  21db2d:	89 ca                	mov    edx,ecx
            var input_buf: [8]u8 = undefined;
  21db2f:	48 8b 35 d2 48 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffe48d2]        # 202408 <__unnamed_118>
  21db36:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
            const input_slice = input_buf[0..size];
  21db3a:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  21db3e:	48 39 f2             	cmp    rdx,rsi
  21db41:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
  21db48:	0f 86 98 00 00 00    	jbe    21dbe6 <InStream(ReadError)_readVarInt+0x106>
  21db4e:	e9 83 00 00 00       	jmp    21dbd6 <InStream(ReadError)_readVarInt+0xf6>
            try self.readNoEof(input_slice);
  21db53:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  21db57:	48 8b 7d 80          	mov    rdi,QWORD PTR [rbp-0x80]
  21db5b:	66 89 85 76 ff ff ff 	mov    WORD PTR [rbp-0x8a],ax
  21db62:	e8 e9 68 fe ff       	call   204450 <__zig_return_error>
  21db67:	66 8b 85 76 ff ff ff 	mov    ax,WORD PTR [rbp-0x8a]
  21db6e:	66 89 45 d8          	mov    WORD PTR [rbp-0x28],ax
  21db72:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  21db76:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  21db7a:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21db7d:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21db81:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21db85:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  21db89:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  21db90:	5d                   	pop    rbp
  21db91:	c3                   	ret    
  21db92:	48 8d 45 98          	lea    rax,[rbp-0x68]
            return mem.readInt(input_slice, T, endian);
  21db96:	8a 4d bf             	mov    cl,BYTE PTR [rbp-0x41]
  21db99:	0f b6 f1             	movzx  esi,cl
  21db9c:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  21dba0:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  21dba7:	e8 44 9f ff ff       	call   217af0 <readInt.49>
  21dbac:	66 c7 45 c8 00 00    	mov    WORD PTR [rbp-0x38],0x0
  21dbb2:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  21dbb6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21dbba:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  21dbbe:	48 89 07             	mov    QWORD PTR [rdi],rax
  21dbc1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  21dbc5:	48 89 47 08          	mov    QWORD PTR [rdi+0x8],rax
  21dbc9:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  21dbcd:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  21dbd4:	5d                   	pop    rbp
  21dbd5:	c3                   	ret    
  21dbd6:	48 8d 3d 23 77 00 00 	lea    rdi,[rip+0x7723]        # 225300 <__unnamed_4>
  21dbdd:	31 c0                	xor    eax,eax
  21dbdf:	89 c6                	mov    esi,eax
            const input_slice = input_buf[0..size];
  21dbe1:	e8 da 54 fe ff       	call   2030c0 <panic>
  21dbe6:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  21dbed:	48 83 f8 08          	cmp    rax,0x8
  21dbf1:	76 10                	jbe    21dc03 <InStream(ReadError)_readVarInt+0x123>
  21dbf3:	48 8d 3d 06 77 00 00 	lea    rdi,[rip+0x7706]        # 225300 <__unnamed_4>
  21dbfa:	31 c0                	xor    eax,eax
  21dbfc:	89 c6                	mov    esi,eax
  21dbfe:	e8 bd 54 fe ff       	call   2030c0 <panic>
  21dc03:	48 8d 55 98          	lea    rdx,[rbp-0x68]
  21dc07:	48 8d 45 a8          	lea    rax,[rbp-0x58]
  21dc0b:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  21dc0f:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  21dc16:	48 83 e8 00          	sub    rax,0x0
  21dc1a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  21dc1e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21dc22:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  21dc26:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21dc2a:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            try self.readNoEof(input_slice);
  21dc2e:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
  21dc32:	48 8b 7d 80          	mov    rdi,QWORD PTR [rbp-0x80]
  21dc36:	e8 85 c6 fe ff       	call   20a2c0 <InStream(ReadError)_readNoEof>
  21dc3b:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  21dc3f:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  21dc44:	0f 85 09 ff ff ff    	jne    21db53 <InStream(ReadError)_readVarInt+0x73>
  21dc4a:	e9 43 ff ff ff       	jmp    21db92 <InStream(ReadError)_readVarInt+0xb2>
  21dc4f:	90                   	nop

000000000021dc50 <InStream(ReadError)_readIntLe.82>:
        pub fn readIntLe(self: *Self, comptime T: type) !T {
  21dc50:	55                   	push   rbp
  21dc51:	48 89 e5             	mov    rbp,rsp
  21dc54:	48 83 ec 30          	sub    rsp,0x30
  21dc58:	48 89 f8             	mov    rax,rdi
  21dc5b:	48 8d 4d f8          	lea    rcx,[rbp-0x8]
  21dc5f:	41 b8 01 00 00 00    	mov    r8d,0x1
  21dc65:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
            return self.readInt(builtin.Endian.Little, T);
  21dc69:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21dc6d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  21dc71:	48 89 cf             	mov    rdi,rcx
  21dc74:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  21dc78:	44 89 c1             	mov    ecx,r8d
  21dc7b:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  21dc7f:	e8 8c 00 00 00       	call   21dd10 <InStream(ReadError)_readInt.84>
  21dc84:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  21dc89:	74 0b                	je     21dc96 <InStream(ReadError)_readIntLe.82+0x46>
  21dc8b:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21dc8f:	e8 bc 67 fe ff       	call   204450 <__zig_return_error>
  21dc94:	eb 02                	jmp    21dc98 <InStream(ReadError)_readIntLe.82+0x48>
  21dc96:	eb 00                	jmp    21dc98 <InStream(ReadError)_readIntLe.82+0x48>
  21dc98:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  21dc9b:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21dc9f:	89 01                	mov    DWORD PTR [rcx],eax
  21dca1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21dca5:	48 83 c4 30          	add    rsp,0x30
  21dca9:	5d                   	pop    rbp
  21dcaa:	c3                   	ret    
  21dcab:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000021dcb0 <InStream(ReadError)_readIntLe.83>:
        pub fn readIntLe(self: *Self, comptime T: type) !T {
  21dcb0:	55                   	push   rbp
  21dcb1:	48 89 e5             	mov    rbp,rsp
  21dcb4:	48 83 ec 30          	sub    rsp,0x30
  21dcb8:	48 89 f8             	mov    rax,rdi
  21dcbb:	48 8d 4d f8          	lea    rcx,[rbp-0x8]
  21dcbf:	41 b8 01 00 00 00    	mov    r8d,0x1
  21dcc5:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
            return self.readInt(builtin.Endian.Little, T);
  21dcc9:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21dccd:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  21dcd1:	48 89 cf             	mov    rdi,rcx
  21dcd4:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  21dcd8:	44 89 c1             	mov    ecx,r8d
  21dcdb:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  21dcdf:	e8 4c c9 fe ff       	call   20a630 <InStream(ReadError)_readInt>
  21dce4:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  21dce9:	74 0b                	je     21dcf6 <InStream(ReadError)_readIntLe.83+0x46>
  21dceb:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21dcef:	e8 5c 67 fe ff       	call   204450 <__zig_return_error>
  21dcf4:	eb 02                	jmp    21dcf8 <InStream(ReadError)_readIntLe.83+0x48>
  21dcf6:	eb 00                	jmp    21dcf8 <InStream(ReadError)_readIntLe.83+0x48>
  21dcf8:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  21dcfb:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21dcff:	89 01                	mov    DWORD PTR [rcx],eax
  21dd01:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21dd05:	48 83 c4 30          	add    rsp,0x30
  21dd09:	5d                   	pop    rbp
  21dd0a:	c3                   	ret    
  21dd0b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000021dd10 <InStream(ReadError)_readInt.84>:
        pub fn readInt(self: *Self, endian: builtin.Endian, comptime T: type) !T {
  21dd10:	55                   	push   rbp
  21dd11:	48 89 e5             	mov    rbp,rsp
  21dd14:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  21dd1b:	88 c8                	mov    al,cl
  21dd1d:	49 89 f8             	mov    r8,rdi
  21dd20:	41 b1 01             	mov    r9b,0x1
  21dd23:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
  21dd27:	24 01                	and    al,0x1
  21dd29:	88 45 bf             	mov    BYTE PTR [rbp-0x41],al
            var bytes: [@sizeOf(T)]u8 = undefined;
  21dd2c:	8a 05 be 43 fe ff    	mov    al,BYTE PTR [rip+0xfffffffffffe43be]        # 2020f0 <__unnamed_179>
  21dd32:	88 45 be             	mov    BYTE PTR [rbp-0x42],al
            try self.readNoEof(bytes[0..]);
  21dd35:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  21dd39:	41 f6 c1 01          	test   r9b,0x1
  21dd3d:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
  21dd41:	4c 89 45 a8          	mov    QWORD PTR [rbp-0x58],r8
  21dd45:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  21dd49:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
  21dd4d:	0f 85 87 00 00 00    	jne    21ddda <InStream(ReadError)_readInt.84+0xca>
  21dd53:	eb 75                	jmp    21ddca <InStream(ReadError)_readInt.84+0xba>
  21dd55:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  21dd59:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  21dd5d:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  21dd61:	e8 ea 66 fe ff       	call   204450 <__zig_return_error>
  21dd66:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  21dd6a:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  21dd6e:	8b 4d e8             	mov    ecx,DWORD PTR [rbp-0x18]
  21dd71:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  21dd75:	89 0f                	mov    DWORD PTR [rdi],ecx
  21dd77:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  21dd7b:	48 81 c4 80 00 00 00 	add    rsp,0x80
  21dd82:	5d                   	pop    rbp
  21dd83:	c3                   	ret    
  21dd84:	48 8d 45 d0          	lea    rax,[rbp-0x30]
  21dd88:	48 8d 4d be          	lea    rcx,[rbp-0x42]
            return mem.readInt(bytes, T, endian);
  21dd8c:	8a 55 bf             	mov    dl,BYTE PTR [rbp-0x41]
  21dd8f:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  21dd93:	48 c7 45 d8 01 00 00 	mov    QWORD PTR [rbp-0x28],0x1
  21dd9a:	00 
  21dd9b:	0f b6 f2             	movzx  esi,dl
  21dd9e:	48 8d 7d d0          	lea    rdi,[rbp-0x30]
  21dda2:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  21dda6:	e8 65 00 00 00       	call   21de10 <readInt.85>
  21ddab:	66 c7 45 c8 00 00    	mov    WORD PTR [rbp-0x38],0x0
  21ddb1:	88 45 ca             	mov    BYTE PTR [rbp-0x36],al
  21ddb4:	8b 75 c8             	mov    esi,DWORD PTR [rbp-0x38]
  21ddb7:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  21ddbb:	89 31                	mov    DWORD PTR [rcx],esi
  21ddbd:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  21ddc1:	48 81 c4 80 00 00 00 	add    rsp,0x80
  21ddc8:	5d                   	pop    rbp
  21ddc9:	c3                   	ret    
  21ddca:	48 8d 3d 2f 75 00 00 	lea    rdi,[rip+0x752f]        # 225300 <__unnamed_4>
  21ddd1:	31 c0                	xor    eax,eax
  21ddd3:	89 c6                	mov    esi,eax
            try self.readNoEof(bytes[0..]);
  21ddd5:	e8 e6 52 fe ff       	call   2030c0 <panic>
  21ddda:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
  21ddde:	48 8d 45 be          	lea    rax,[rbp-0x42]
  21dde2:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  21dde6:	48 c7 45 f8 01 00 00 	mov    QWORD PTR [rbp-0x8],0x1
  21dded:	00 
  21ddee:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  21ddf2:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  21ddf6:	e8 c5 c4 fe ff       	call   20a2c0 <InStream(ReadError)_readNoEof>
  21ddfb:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  21ddff:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  21de04:	0f 85 4b ff ff ff    	jne    21dd55 <InStream(ReadError)_readInt.84+0x45>
  21de0a:	e9 75 ff ff ff       	jmp    21dd84 <InStream(ReadError)_readInt.84+0x74>
  21de0f:	90                   	nop

000000000021de10 <readInt.85>:
pub fn readInt(bytes: []const u8, comptime T: type, endian: builtin.Endian) T {
  21de10:	55                   	push   rbp
  21de11:	48 89 e5             	mov    rbp,rsp
  21de14:	48 83 ec 10          	sub    rsp,0x10
  21de18:	40 88 f0             	mov    al,sil
  21de1b:	31 f6                	xor    esi,esi
  21de1d:	89 f1                	mov    ecx,esi
  21de1f:	24 01                	and    al,0x1
  21de21:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
        return bytes[0];
  21de24:	48 3b 4f 08          	cmp    rcx,QWORD PTR [rdi+0x8]
  21de28:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  21de2c:	72 10                	jb     21de3e <readInt.85+0x2e>
  21de2e:	48 8d 3d cb 74 00 00 	lea    rdi,[rip+0x74cb]        # 225300 <__unnamed_4>
  21de35:	31 c0                	xor    eax,eax
  21de37:	89 c6                	mov    esi,eax
  21de39:	e8 82 52 fe ff       	call   2030c0 <panic>
  21de3e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21de42:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  21de45:	8a 01                	mov    al,BYTE PTR [rcx]
  21de47:	48 83 c4 10          	add    rsp,0x10
  21de4b:	5d                   	pop    rbp
  21de4c:	c3                   	ret    
  21de4d:	0f 1f 00             	nop    DWORD PTR [rax]

000000000021de50 <Allocator_alignedAlloc.86>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  21de50:	55                   	push   rbp
  21de51:	48 89 e5             	mov    rbp,rsp
  21de54:	48 81 ec 20 01 00 00 	sub    rsp,0x120
  21de5b:	48 89 f8             	mov    rax,rdi
  21de5e:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  21de65:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  21de6c:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  21de73:	00 
  21de74:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  21de7b:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  21de82:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  21de89:	75 37                	jne    21dec2 <Allocator_alignedAlloc.86+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  21de8b:	48 8b 05 66 42 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe4266]        # 2020f8 <__unnamed_180>
  21de92:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21de99:	48 89 01             	mov    QWORD PTR [rcx],rax
  21de9c:	48 8b 05 5d 42 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe425d]        # 202100 <__unnamed_180+0x8>
  21dea3:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21dea7:	48 8b 05 5a 42 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe425a]        # 202108 <__unnamed_180+0x10>
  21deae:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21deb2:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21deb9:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21dec0:	5d                   	pop    rbp
  21dec1:	c3                   	ret    
        if (n == 0) {
  21dec2:	eb 00                	jmp    21dec4 <Allocator_alignedAlloc.86+0x74>
  21dec4:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  21dec8:	b8 30 00 00 00       	mov    eax,0x30
  21decd:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  21decf:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  21ded6:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21dedd:	e8 4e dd fe ff       	call   20bc30 <mul>
  21dee2:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  21dee7:	74 43                	je     21df2c <Allocator_alignedAlloc.86+0xdc>
  21dee9:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  21def0:	e8 5b 65 fe ff       	call   204450 <__zig_return_error>
  21def5:	48 8b 3d 14 42 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe4214]        # 202110 <__unnamed_181>
  21defc:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21df03:	48 89 38             	mov    QWORD PTR [rax],rdi
  21df06:	48 8b 3d 0b 42 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe420b]        # 202118 <__unnamed_181+0x8>
  21df0d:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  21df11:	48 8b 3d 08 42 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe4208]        # 202120 <__unnamed_181+0x10>
  21df18:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  21df1c:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21df23:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21df2a:	5d                   	pop    rbp
  21df2b:	c3                   	ret    
  21df2c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21df30:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  21df37:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  21df3b:	41 b8 08 00 00 00    	mov    r8d,0x8
  21df41:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  21df48:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  21df4f:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  21df56:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  21df59:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  21df60:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  21df67:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  21df6e:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  21df75:	4c 89 ce             	mov    rsi,r9
  21df78:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  21df7f:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  21df86:	4c 89 d1             	mov    rcx,r10
  21df89:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  21df90:	41 ff d3             	call   r11
  21df93:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  21df98:	74 50                	je     21dfea <Allocator_alignedAlloc.86+0x19a>
  21df9a:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  21df9e:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  21dfa5:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  21dfac:	e8 9f 64 fe ff       	call   204450 <__zig_return_error>
  21dfb1:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  21dfb8:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  21dfbc:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  21dfc0:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21dfc7:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21dfca:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  21dfce:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21dfd2:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  21dfd6:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  21dfda:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21dfe1:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21dfe8:	5d                   	pop    rbp
  21dfe9:	c3                   	ret    
  21dfea:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  21dfee:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  21dff5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21dff9:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  21e000:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  21e007:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  21e00e:	0f 94 c1             	sete   cl
  21e011:	0f b6 f9             	movzx  edi,cl
  21e014:	e8 e7 4f fe ff       	call   203000 <assert>
  21e019:	be aa 00 00 00       	mov    esi,0xaa
  21e01e:	bf 08 00 00 00       	mov    edi,0x8
  21e023:	89 fa                	mov    edx,edi
  21e025:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  21e02c:	48 89 c7             	mov    rdi,rax
  21e02f:	e8 7c 3c 00 00       	call   221cb0 <memset>
  21e034:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  21e03b:	00 00 00 00 
  21e03f:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  21e046:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  21e04d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  21e054:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  21e05b:	48 39 c8             	cmp    rax,rcx
  21e05e:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  21e065:	73 32                	jae    21e099 <Allocator_alignedAlloc.86+0x249>
  21e067:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21e06e:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  21e075:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  21e07c:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  21e083:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  21e085:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21e08c:	48 83 c1 01          	add    rcx,0x1
  21e090:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  21e097:	eb b4                	jmp    21e04d <Allocator_alignedAlloc.86+0x1fd>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  21e099:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  21e0a0:	48 83 e0 07          	and    rax,0x7
  21e0a4:	48 83 f8 00          	cmp    rax,0x0
  21e0a8:	75 32                	jne    21e0dc <Allocator_alignedAlloc.86+0x28c>
  21e0aa:	b8 30 00 00 00       	mov    eax,0x30
  21e0af:	89 c1                	mov    ecx,eax
  21e0b1:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
  21e0b8:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
  21e0bc:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
  21e0c3:	48 89 d0             	mov    rax,rdx
  21e0c6:	31 f6                	xor    esi,esi
  21e0c8:	48 89 95 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdx
  21e0cf:	89 f2                	mov    edx,esi
  21e0d1:	48 f7 f1             	div    rcx
  21e0d4:	48 83 fa 00          	cmp    rdx,0x0
  21e0d8:	74 12                	je     21e0ec <Allocator_alignedAlloc.86+0x29c>
  21e0da:	eb 77                	jmp    21e153 <Allocator_alignedAlloc.86+0x303>
  21e0dc:	48 8d 3d 4d 74 00 00 	lea    rdi,[rip+0x744d]        # 225530 <__unnamed_60>
  21e0e3:	31 c0                	xor    eax,eax
  21e0e5:	89 c6                	mov    esi,eax
  21e0e7:	e8 d4 4f fe ff       	call   2030c0 <panic>
  21e0ec:	b8 30 00 00 00       	mov    eax,0x30
  21e0f1:	89 c1                	mov    ecx,eax
  21e0f3:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  21e0fa:	31 d2                	xor    edx,edx
  21e0fc:	48 f7 f1             	div    rcx
  21e0ff:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  21e103:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  21e10a:	00 00 
  21e10c:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  21e110:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  21e117:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  21e11b:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  21e11f:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21e126:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21e12d:	48 89 01             	mov    QWORD PTR [rcx],rax
  21e130:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  21e137:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21e13b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  21e13f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21e143:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21e14a:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21e151:	5d                   	pop    rbp
  21e152:	c3                   	ret    
  21e153:	48 8d 3d ee 73 00 00 	lea    rdi,[rip+0x73ee]        # 225548 <__unnamed_61>
  21e15a:	31 c0                	xor    eax,eax
  21e15c:	89 c6                	mov    esi,eax
  21e15e:	e8 5d 4f fe ff       	call   2030c0 <panic>
  21e163:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21e16a:	84 00 00 00 00 00 

000000000021e170 <getEnvPosix>:
pub fn getEnvPosix(key: []const u8) ?[]const u8 {
  21e170:	55                   	push   rbp
  21e171:	48 89 e5             	mov    rbp,rsp
  21e174:	48 81 ec 00 01 00 00 	sub    rsp,0x100
  21e17b:	48 89 f8             	mov    rax,rdi
  21e17e:	b9 aa 00 00 00       	mov    ecx,0xaa
  21e183:	ba 08 00 00 00       	mov    edx,0x8
  21e188:	4c 8d 45 c0          	lea    r8,[rbp-0x40]
    for (posix_environ_raw) |ptr| {
  21e18c:	48 89 7d 80          	mov    QWORD PTR [rbp-0x80],rdi
  21e190:	4c 89 c7             	mov    rdi,r8
  21e193:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
  21e19a:	89 ce                	mov    esi,ecx
  21e19c:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  21e1a3:	e8 08 3b 00 00       	call   221cb0 <memset>
  21e1a8:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
  21e1af:	00 
  21e1b0:	48 8b 05 d1 5e 00 00 	mov    rax,QWORD PTR [rip+0x5ed1]        # 224088 <posix_environ_raw+0x8>
  21e1b7:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  21e1be:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21e1c2:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  21e1c9:	48 39 c8             	cmp    rax,rcx
  21e1cc:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  21e1d3:	0f 83 16 01 00 00    	jae    21e2ef <getEnvPosix+0x17f>
  21e1d9:	48 8b 05 a0 5e 00 00 	mov    rax,QWORD PTR [rip+0x5ea0]        # 224080 <posix_environ_raw>
  21e1e0:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  21e1e7:	48 8b 04 c8          	mov    rax,QWORD PTR [rax+rcx*8]
  21e1eb:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
        var line_i: usize = 0;
  21e1ef:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
  21e1f6:	00 
        while (ptr[line_i] != 0 and ptr[line_i] != '=') : (line_i += 1) {}
  21e1f7:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  21e1fb:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  21e1ff:	80 3c 01 00          	cmp    BYTE PTR [rcx+rax*1],0x0
  21e203:	0f 95 c2             	setne  dl
  21e206:	f6 c2 01             	test   dl,0x1
  21e209:	88 95 5f ff ff ff    	mov    BYTE PTR [rbp-0xa1],dl
  21e20f:	75 02                	jne    21e213 <getEnvPosix+0xa3>
  21e211:	eb 15                	jmp    21e228 <getEnvPosix+0xb8>
  21e213:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  21e217:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  21e21b:	80 3c 01 3d          	cmp    BYTE PTR [rcx+rax*1],0x3d
  21e21f:	0f 95 c2             	setne  dl
  21e222:	88 95 5f ff ff ff    	mov    BYTE PTR [rbp-0xa1],dl
  21e228:	8a 85 5f ff ff ff    	mov    al,BYTE PTR [rbp-0xa1]
  21e22e:	a8 01                	test   al,0x1
  21e230:	75 02                	jne    21e234 <getEnvPosix+0xc4>
  21e232:	eb 23                	jmp    21e257 <getEnvPosix+0xe7>
  21e234:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  21e238:	48 83 c0 01          	add    rax,0x1
  21e23c:	0f 92 c1             	setb   cl
  21e23f:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
  21e246:	88 8d 4f ff ff ff    	mov    BYTE PTR [rbp-0xb1],cl
  21e24c:	0f 82 d1 00 00 00    	jb     21e323 <getEnvPosix+0x1b3>
  21e252:	e9 dc 00 00 00       	jmp    21e333 <getEnvPosix+0x1c3>
  21e257:	31 c0                	xor    eax,eax
  21e259:	89 c1                	mov    ecx,eax
        const this_key = ptr[0..line_i];
  21e25b:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  21e25f:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
  21e263:	48 39 d1             	cmp    rcx,rdx
  21e266:	48 89 b5 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rsi
  21e26d:	48 89 95 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdx
  21e274:	0f 86 d9 00 00 00    	jbe    21e353 <getEnvPosix+0x1e3>
  21e27a:	e9 c4 00 00 00       	jmp    21e343 <getEnvPosix+0x1d3>
    for (posix_environ_raw) |ptr| {
  21e27f:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  21e286:	48 83 c0 01          	add    rax,0x1
  21e28a:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  21e28e:	e9 2b ff ff ff       	jmp    21e1be <getEnvPosix+0x4e>
        var end_i: usize = line_i;
  21e293:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  21e297:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
        while (ptr[end_i] != 0) : (end_i += 1) {}
  21e29b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  21e29f:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  21e2a3:	80 3c 01 00          	cmp    BYTE PTR [rcx+rax*1],0x0
  21e2a7:	74 23                	je     21e2cc <getEnvPosix+0x15c>
  21e2a9:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  21e2ad:	48 83 c0 01          	add    rax,0x1
  21e2b1:	0f 92 c1             	setb   cl
  21e2b4:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  21e2bb:	88 8d 2f ff ff ff    	mov    BYTE PTR [rbp-0xd1],cl
  21e2c1:	0f 82 d1 00 00 00    	jb     21e398 <getEnvPosix+0x228>
  21e2c7:	e9 dc 00 00 00       	jmp    21e3a8 <getEnvPosix+0x238>
        const this_value = ptr[line_i + 1 .. end_i];
  21e2cc:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  21e2d0:	48 83 c0 01          	add    rax,0x1
  21e2d4:	0f 92 c1             	setb   cl
  21e2d7:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
  21e2de:	88 8d 1f ff ff ff    	mov    BYTE PTR [rbp-0xe1],cl
  21e2e4:	0f 82 ce 00 00 00    	jb     21e3b8 <getEnvPosix+0x248>
  21e2ea:	e9 d9 00 00 00       	jmp    21e3c8 <getEnvPosix+0x258>
    return null;
  21e2ef:	48 8b 05 c2 3e fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe3ec2]        # 2021b8 <__unnamed_182>
  21e2f6:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  21e2fa:	48 89 01             	mov    QWORD PTR [rcx],rax
  21e2fd:	48 8b 05 bc 3e fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe3ebc]        # 2021c0 <__unnamed_182+0x8>
  21e304:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21e308:	48 8b 05 b9 3e fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe3eb9]        # 2021c8 <__unnamed_182+0x10>
  21e30f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21e313:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21e31a:	48 81 c4 00 01 00 00 	add    rsp,0x100
  21e321:	5d                   	pop    rbp
  21e322:	c3                   	ret    
  21e323:	48 8d 3d ee 6f 00 00 	lea    rdi,[rip+0x6fee]        # 225318 <__unnamed_5>
  21e32a:	31 c0                	xor    eax,eax
  21e32c:	89 c6                	mov    esi,eax
        while (ptr[line_i] != 0 and ptr[line_i] != '=') : (line_i += 1) {}
  21e32e:	e8 8d 4d fe ff       	call   2030c0 <panic>
  21e333:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  21e33a:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  21e33e:	e9 b4 fe ff ff       	jmp    21e1f7 <getEnvPosix+0x87>
  21e343:	48 8d 3d b6 6f 00 00 	lea    rdi,[rip+0x6fb6]        # 225300 <__unnamed_4>
  21e34a:	31 c0                	xor    eax,eax
  21e34c:	89 c6                	mov    esi,eax
        const this_key = ptr[0..line_i];
  21e34e:	e8 6d 4d fe ff       	call   2030c0 <panic>
  21e353:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  21e35a:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  21e35e:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
  21e365:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  21e369:	c5 fa 6f 45 f0       	vmovdqu xmm0,XMMWORD PTR [rbp-0x10]
  21e36e:	c5 f9 7f 45 a0       	vmovdqa XMMWORD PTR [rbp-0x60],xmm0
  21e373:	48 8d 75 a0          	lea    rsi,[rbp-0x60]
        if (!mem.eql(u8, key, this_key)) continue;
  21e377:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  21e37e:	e8 dd bf fe ff       	call   20a360 <eql>
  21e383:	88 c2                	mov    dl,al
  21e385:	a8 01                	test   al,0x1
  21e387:	88 95 1e ff ff ff    	mov    BYTE PTR [rbp-0xe2],dl
  21e38d:	0f 84 ec fe ff ff    	je     21e27f <getEnvPosix+0x10f>
  21e393:	e9 fb fe ff ff       	jmp    21e293 <getEnvPosix+0x123>
  21e398:	48 8d 3d 79 6f 00 00 	lea    rdi,[rip+0x6f79]        # 225318 <__unnamed_5>
  21e39f:	31 c0                	xor    eax,eax
  21e3a1:	89 c6                	mov    esi,eax
        while (ptr[end_i] != 0) : (end_i += 1) {}
  21e3a3:	e8 18 4d fe ff       	call   2030c0 <panic>
  21e3a8:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21e3af:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  21e3b3:	e9 e3 fe ff ff       	jmp    21e29b <getEnvPosix+0x12b>
  21e3b8:	48 8d 3d 59 6f 00 00 	lea    rdi,[rip+0x6f59]        # 225318 <__unnamed_5>
  21e3bf:	31 c0                	xor    eax,eax
  21e3c1:	89 c6                	mov    esi,eax
        const this_value = ptr[line_i + 1 .. end_i];
  21e3c3:	e8 f8 4c fe ff       	call   2030c0 <panic>
  21e3c8:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  21e3cc:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  21e3d0:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
  21e3d7:	48 39 c2             	cmp    rdx,rax
  21e3da:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
  21e3e1:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  21e3e8:	76 10                	jbe    21e3fa <getEnvPosix+0x28a>
  21e3ea:	48 8d 3d 0f 6f 00 00 	lea    rdi,[rip+0x6f0f]        # 225300 <__unnamed_4>
  21e3f1:	31 c0                	xor    eax,eax
  21e3f3:	89 c6                	mov    esi,eax
  21e3f5:	e8 c6 4c fe ff       	call   2030c0 <panic>
  21e3fa:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  21e401:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21e408:	48 01 c8             	add    rax,rcx
  21e40b:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  21e40f:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  21e416:	48 29 c8             	sub    rax,rcx
  21e419:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  21e41d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  21e421:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  21e425:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21e429:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
        return this_value;
  21e42d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  21e431:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  21e435:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  21e439:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  21e43d:	c6 45 d8 01          	mov    BYTE PTR [rbp-0x28],0x1
  21e441:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21e445:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
  21e449:	48 89 02             	mov    QWORD PTR [rdx],rax
  21e44c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  21e450:	48 89 42 08          	mov    QWORD PTR [rdx+0x8],rax
  21e454:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21e458:	48 89 42 10          	mov    QWORD PTR [rdx+0x10],rax
  21e45c:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21e463:	48 81 c4 00 01 00 00 	add    rsp,0x100
  21e46a:	5d                   	pop    rbp
  21e46b:	c3                   	ret    
  21e46c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000021e470 <dupe>:
pub fn dupe(allocator: *Allocator, comptime T: type, m: []const T) ![]T {
  21e470:	55                   	push   rbp
  21e471:	48 89 e5             	mov    rbp,rsp
  21e474:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  21e47b:	48 89 f8             	mov    rax,rdi
  21e47e:	4c 8d 45 e8          	lea    r8,[rbp-0x18]
  21e482:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
    const new_buf = try allocator.alloc(T, m.len);
  21e486:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  21e48a:	4c 8b 49 08          	mov    r9,QWORD PTR [rcx+0x8]
  21e48e:	48 89 7d 80          	mov    QWORD PTR [rbp-0x80],rdi
  21e492:	4c 89 c7             	mov    rdi,r8
  21e495:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
  21e49c:	48 89 8d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rcx
  21e4a3:	4c 89 c9             	mov    rcx,r9
  21e4a6:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  21e4ad:	e8 0e a8 ff ff       	call   218cc0 <Allocator_alloc.57>
  21e4b2:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  21e4b7:	74 4d                	je     21e506 <dupe+0x96>
  21e4b9:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  21e4bd:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  21e4c4:	66 89 85 66 ff ff ff 	mov    WORD PTR [rbp-0x9a],ax
  21e4cb:	e8 80 5f fe ff       	call   204450 <__zig_return_error>
  21e4d0:	66 8b 85 66 ff ff ff 	mov    ax,WORD PTR [rbp-0x9a]
  21e4d7:	66 89 45 b8          	mov    WORD PTR [rbp-0x48],ax
  21e4db:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  21e4df:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  21e4e3:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21e4e6:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21e4ea:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21e4ee:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  21e4f2:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  21e4f6:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  21e4fd:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  21e504:	5d                   	pop    rbp
  21e505:	c3                   	ret    
  21e506:	48 8d 7d 88          	lea    rdi,[rbp-0x78]
  21e50a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21e50e:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  21e512:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21e516:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
    copy(T, new_buf, m);
  21e51a:	48 8b b5 70 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x90]
  21e521:	e8 2a d0 ff ff       	call   21b550 <copy>
    return new_buf;
  21e526:	66 c7 45 a0 00 00    	mov    WORD PTR [rbp-0x60],0x0
  21e52c:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  21e530:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  21e534:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  21e538:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  21e53c:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  21e540:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  21e544:	48 89 06             	mov    QWORD PTR [rsi],rax
  21e547:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  21e54b:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  21e54f:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  21e553:	48 89 46 10          	mov    QWORD PTR [rsi+0x10],rax
  21e557:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  21e55e:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  21e565:	5d                   	pop    rbp
  21e566:	c3                   	ret    
  21e567:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  21e56e:	00 00 

000000000021e570 <isTty>:
pub fn isTty(handle: FileHandle) bool {
  21e570:	55                   	push   rbp
  21e571:	48 89 e5             	mov    rbp,rsp
  21e574:	48 83 ec 10          	sub    rsp,0x10
  21e578:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
            return posix.isatty(handle);
  21e57b:	8b 7d fc             	mov    edi,DWORD PTR [rbp-0x4]
  21e57e:	e8 ed 0e 00 00       	call   21f470 <isatty>
  21e583:	88 c1                	mov    cl,al
  21e585:	88 4d fb             	mov    BYTE PTR [rbp-0x5],cl
  21e588:	48 83 c4 10          	add    rsp,0x10
  21e58c:	5d                   	pop    rbp
  21e58d:	c3                   	ret    
  21e58e:	66 90                	xchg   ax,ax

000000000021e590 <formatValue.87>:
fn formatValue(
  21e590:	55                   	push   rbp
  21e591:	48 89 e5             	mov    rbp,rsp
  21e594:	48 83 ec 30          	sub    rsp,0x30
  21e598:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21e59c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  21e5a0:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
        builtin.TypeId.Int => return formatIntValue(value, fmt, context, Errors, output),
  21e5a4:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21e5a8:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21e5ac:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21e5b0:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  21e5b4:	e8 f7 0e 00 00       	call   21f4b0 <formatIntValue.95>
  21e5b9:	66 83 f8 00          	cmp    ax,0x0
  21e5bd:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  21e5c1:	74 0b                	je     21e5ce <formatValue.87+0x3e>
  21e5c3:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21e5c7:	e8 84 5e fe ff       	call   204450 <__zig_return_error>
  21e5cc:	eb 02                	jmp    21e5d0 <formatValue.87+0x40>
  21e5ce:	eb 00                	jmp    21e5d0 <formatValue.87+0x40>
  21e5d0:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  21e5d4:	48 83 c4 30          	add    rsp,0x30
  21e5d8:	5d                   	pop    rbp
  21e5d9:	c3                   	ret    
  21e5da:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000021e5e0 <formatValue.88>:
fn formatValue(
  21e5e0:	55                   	push   rbp
  21e5e1:	48 89 e5             	mov    rbp,rsp
  21e5e4:	48 83 ec 30          	sub    rsp,0x30
  21e5e8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21e5ec:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  21e5f0:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
        builtin.TypeId.Int => return formatIntValue(value, fmt, context, Errors, output),
  21e5f4:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21e5f8:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21e5fc:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21e600:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  21e604:	e8 17 0f 00 00       	call   21f520 <formatIntValue.96>
  21e609:	66 83 f8 00          	cmp    ax,0x0
  21e60d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  21e611:	74 0b                	je     21e61e <formatValue.88+0x3e>
  21e613:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21e617:	e8 34 5e fe ff       	call   204450 <__zig_return_error>
  21e61c:	eb 02                	jmp    21e620 <formatValue.88+0x40>
  21e61e:	eb 00                	jmp    21e620 <formatValue.88+0x40>
  21e620:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  21e624:	48 83 c4 30          	add    rsp,0x30
  21e628:	5d                   	pop    rbp
  21e629:	c3                   	ret    
  21e62a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000021e630 <formatValue.89>:
fn formatValue(
  21e630:	55                   	push   rbp
  21e631:	48 89 e5             	mov    rbp,rsp
  21e634:	48 83 ec 30          	sub    rsp,0x30
  21e638:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21e63c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  21e640:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
        builtin.TypeId.Int => return formatIntValue(value, fmt, context, Errors, output),
  21e644:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21e648:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21e64c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21e650:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  21e654:	e8 37 0f 00 00       	call   21f590 <formatIntValue.97>
  21e659:	66 83 f8 00          	cmp    ax,0x0
  21e65d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  21e661:	74 0b                	je     21e66e <formatValue.89+0x3e>
  21e663:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21e667:	e8 e4 5d fe ff       	call   204450 <__zig_return_error>
  21e66c:	eb 02                	jmp    21e670 <formatValue.89+0x40>
  21e66e:	eb 00                	jmp    21e670 <formatValue.89+0x40>
  21e670:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  21e674:	48 83 c4 30          	add    rsp,0x30
  21e678:	5d                   	pop    rbp
  21e679:	c3                   	ret    
  21e67a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000021e680 <formatValue.90>:
fn formatValue(
  21e680:	55                   	push   rbp
  21e681:	48 89 e5             	mov    rbp,rsp
  21e684:	48 83 ec 30          	sub    rsp,0x30
  21e688:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21e68c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  21e690:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
        builtin.TypeId.Int => return formatIntValue(value, fmt, context, Errors, output),
  21e694:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21e698:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21e69c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21e6a0:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  21e6a4:	e8 57 0f 00 00       	call   21f600 <formatIntValue.98>
  21e6a9:	66 83 f8 00          	cmp    ax,0x0
  21e6ad:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  21e6b1:	74 0b                	je     21e6be <formatValue.90+0x3e>
  21e6b3:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21e6b7:	e8 94 5d fe ff       	call   204450 <__zig_return_error>
  21e6bc:	eb 02                	jmp    21e6c0 <formatValue.90+0x40>
  21e6be:	eb 00                	jmp    21e6c0 <formatValue.90+0x40>
  21e6c0:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  21e6c4:	48 83 c4 30          	add    rsp,0x30
  21e6c8:	5d                   	pop    rbp
  21e6c9:	c3                   	ret    
  21e6ca:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000021e6d0 <formatValue.91>:
fn formatValue(
  21e6d0:	55                   	push   rbp
  21e6d1:	48 89 e5             	mov    rbp,rsp
  21e6d4:	48 83 ec 30          	sub    rsp,0x30
  21e6d8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21e6dc:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  21e6e0:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
        builtin.TypeId.Int => return formatIntValue(value, fmt, context, Errors, output),
  21e6e4:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21e6e8:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21e6ec:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21e6f0:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  21e6f4:	e8 77 0f 00 00       	call   21f670 <formatIntValue.99>
  21e6f9:	66 83 f8 00          	cmp    ax,0x0
  21e6fd:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  21e701:	74 0b                	je     21e70e <formatValue.91+0x3e>
  21e703:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21e707:	e8 44 5d fe ff       	call   204450 <__zig_return_error>
  21e70c:	eb 02                	jmp    21e710 <formatValue.91+0x40>
  21e70e:	eb 00                	jmp    21e710 <formatValue.91+0x40>
  21e710:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  21e714:	48 83 c4 30          	add    rsp,0x30
  21e718:	5d                   	pop    rbp
  21e719:	c3                   	ret    
  21e71a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000021e720 <formatValue.92>:
fn formatValue(
  21e720:	55                   	push   rbp
  21e721:	48 89 e5             	mov    rbp,rsp
  21e724:	48 83 ec 30          	sub    rsp,0x30
  21e728:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21e72c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  21e730:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
        builtin.TypeId.Int => return formatIntValue(value, fmt, context, Errors, output),
  21e734:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21e738:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21e73c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21e740:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  21e744:	e8 97 0f 00 00       	call   21f6e0 <formatIntValue.100>
  21e749:	66 83 f8 00          	cmp    ax,0x0
  21e74d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  21e751:	74 0b                	je     21e75e <formatValue.92+0x3e>
  21e753:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21e757:	e8 f4 5c fe ff       	call   204450 <__zig_return_error>
  21e75c:	eb 02                	jmp    21e760 <formatValue.92+0x40>
  21e75e:	eb 00                	jmp    21e760 <formatValue.92+0x40>
  21e760:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  21e764:	48 83 c4 30          	add    rsp,0x30
  21e768:	5d                   	pop    rbp
  21e769:	c3                   	ret    
  21e76a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000021e770 <formatValue.93>:
fn formatValue(
  21e770:	55                   	push   rbp
  21e771:	48 89 e5             	mov    rbp,rsp
  21e774:	48 83 ec 30          	sub    rsp,0x30
  21e778:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21e77c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  21e780:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
        builtin.TypeId.Int => return formatIntValue(value, fmt, context, Errors, output),
  21e784:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21e788:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21e78c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21e790:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  21e794:	e8 b7 0f 00 00       	call   21f750 <formatIntValue.101>
  21e799:	66 83 f8 00          	cmp    ax,0x0
  21e79d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  21e7a1:	74 0b                	je     21e7ae <formatValue.93+0x3e>
  21e7a3:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21e7a7:	e8 a4 5c fe ff       	call   204450 <__zig_return_error>
  21e7ac:	eb 02                	jmp    21e7b0 <formatValue.93+0x40>
  21e7ae:	eb 00                	jmp    21e7b0 <formatValue.93+0x40>
  21e7b0:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  21e7b4:	48 83 c4 30          	add    rsp,0x30
  21e7b8:	5d                   	pop    rbp
  21e7b9:	c3                   	ret    
  21e7ba:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000021e7c0 <shl>:
pub fn shl(comptime T: type, a: T, shift_amt: var) T {
  21e7c0:	55                   	push   rbp
  21e7c1:	48 89 e5             	mov    rbp,rsp
  21e7c4:	48 83 ec 20          	sub    rsp,0x20
  21e7c8:	40 88 f0             	mov    al,sil
  21e7cb:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  21e7cf:	88 45 f7             	mov    BYTE PTR [rbp-0x9],al
    const abs_shift_amt = absCast(shift_amt);
  21e7d2:	0f b6 7d f7          	movzx  edi,BYTE PTR [rbp-0x9]
  21e7d6:	e8 e5 0f 00 00       	call   21f7c0 <absCast>
  21e7db:	88 45 f6             	mov    BYTE PTR [rbp-0xa],al
    const casted_shift_amt = if (abs_shift_amt >= T.bit_count) return 0 else @intCast(Log2Int(T), abs_shift_amt);
  21e7de:	80 7d f6 40          	cmp    BYTE PTR [rbp-0xa],0x40
  21e7e2:	72 08                	jb     21e7ec <shl+0x2c>
  21e7e4:	31 c0                	xor    eax,eax
  21e7e6:	48 83 c4 20          	add    rsp,0x20
  21e7ea:	5d                   	pop    rbp
  21e7eb:	c3                   	ret    
  21e7ec:	8a 45 f6             	mov    al,BYTE PTR [rbp-0xa]
  21e7ef:	88 c1                	mov    cl,al
  21e7f1:	88 c2                	mov    dl,al
  21e7f3:	80 e2 3f             	and    dl,0x3f
  21e7f6:	38 d1                	cmp    cl,dl
  21e7f8:	88 45 f4             	mov    BYTE PTR [rbp-0xc],al
  21e7fb:	74 2b                	je     21e828 <shl+0x68>
  21e7fd:	eb 2b                	jmp    21e82a <shl+0x6a>
  21e7ff:	8a 45 f4             	mov    al,BYTE PTR [rbp-0xc]
  21e802:	24 3f                	and    al,0x3f
  21e804:	88 45 f5             	mov    BYTE PTR [rbp-0xb],al
    return a << casted_shift_amt;
  21e807:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  21e80b:	0f b6 55 f5          	movzx  edx,BYTE PTR [rbp-0xb]
  21e80f:	89 d6                	mov    esi,edx
  21e811:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  21e815:	48 89 f1             	mov    rcx,rsi
  21e818:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  21e81c:	48 d3 e6             	shl    rsi,cl
  21e81f:	48 89 f0             	mov    rax,rsi
  21e822:	48 83 c4 20          	add    rsp,0x20
  21e826:	5d                   	pop    rbp
  21e827:	c3                   	ret    
    const casted_shift_amt = if (abs_shift_amt >= T.bit_count) return 0 else @intCast(Log2Int(T), abs_shift_amt);
  21e828:	eb d5                	jmp    21e7ff <shl+0x3f>
  21e82a:	48 8d 3d 77 6b 00 00 	lea    rdi,[rip+0x6b77]        # 2253a8 <__unnamed_8>
  21e831:	31 c0                	xor    eax,eax
  21e833:	89 c6                	mov    esi,eax
  21e835:	e8 86 48 fe ff       	call   2030c0 <panic>
  21e83a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000021e840 <shr>:
pub fn shr(comptime T: type, a: T, shift_amt: var) T {
  21e840:	55                   	push   rbp
  21e841:	48 89 e5             	mov    rbp,rsp
  21e844:	48 83 ec 20          	sub    rsp,0x20
  21e848:	40 88 f0             	mov    al,sil
  21e84b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  21e84f:	88 45 f7             	mov    BYTE PTR [rbp-0x9],al
    const abs_shift_amt = absCast(shift_amt);
  21e852:	0f b6 7d f7          	movzx  edi,BYTE PTR [rbp-0x9]
  21e856:	e8 65 0f 00 00       	call   21f7c0 <absCast>
  21e85b:	88 45 f6             	mov    BYTE PTR [rbp-0xa],al
    const casted_shift_amt = if (abs_shift_amt >= T.bit_count) return 0 else @intCast(Log2Int(T), abs_shift_amt);
  21e85e:	80 7d f6 40          	cmp    BYTE PTR [rbp-0xa],0x40
  21e862:	72 08                	jb     21e86c <shr+0x2c>
  21e864:	31 c0                	xor    eax,eax
  21e866:	48 83 c4 20          	add    rsp,0x20
  21e86a:	5d                   	pop    rbp
  21e86b:	c3                   	ret    
  21e86c:	8a 45 f6             	mov    al,BYTE PTR [rbp-0xa]
  21e86f:	88 c1                	mov    cl,al
  21e871:	88 c2                	mov    dl,al
  21e873:	80 e2 3f             	and    dl,0x3f
  21e876:	38 d1                	cmp    cl,dl
  21e878:	88 45 f4             	mov    BYTE PTR [rbp-0xc],al
  21e87b:	74 2b                	je     21e8a8 <shr+0x68>
  21e87d:	eb 2b                	jmp    21e8aa <shr+0x6a>
  21e87f:	8a 45 f4             	mov    al,BYTE PTR [rbp-0xc]
  21e882:	24 3f                	and    al,0x3f
  21e884:	88 45 f5             	mov    BYTE PTR [rbp-0xb],al
    return a >> casted_shift_amt;
  21e887:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  21e88b:	0f b6 55 f5          	movzx  edx,BYTE PTR [rbp-0xb]
  21e88f:	89 d6                	mov    esi,edx
  21e891:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  21e895:	48 89 f1             	mov    rcx,rsi
  21e898:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  21e89c:	48 d3 ee             	shr    rsi,cl
  21e89f:	48 89 f0             	mov    rax,rsi
  21e8a2:	48 83 c4 20          	add    rsp,0x20
  21e8a6:	5d                   	pop    rbp
  21e8a7:	c3                   	ret    
    const casted_shift_amt = if (abs_shift_amt >= T.bit_count) return 0 else @intCast(Log2Int(T), abs_shift_amt);
  21e8a8:	eb d5                	jmp    21e87f <shr+0x3f>
  21e8aa:	48 8d 3d f7 6a 00 00 	lea    rdi,[rip+0x6af7]        # 2253a8 <__unnamed_8>
  21e8b1:	31 c0                	xor    eax,eax
  21e8b3:	89 c6                	mov    esi,eax
  21e8b5:	e8 06 48 fe ff       	call   2030c0 <panic>
  21e8ba:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000021e8c0 <formatIntValue>:
        else => unreachable,
    }
}

pub fn formatIntValue(
  21e8c0:	55                   	push   rbp
  21e8c1:	48 89 e5             	mov    rbp,rsp
  21e8c4:	48 83 ec 40          	sub    rsp,0x40
  21e8c8:	b8 0a 00 00 00       	mov    eax,0xa
  21e8cd:	45 31 c0             	xor    r8d,r8d
  21e8d0:	45 31 c9             	xor    r9d,r9d
  21e8d3:	45 89 ca             	mov    r10d,r9d
  21e8d6:	89 75 fc             	mov    DWORD PTR [rbp-0x4],esi
  21e8d9:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  21e8dd:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            },
            else => @compileError("Unknown format character: " ++ []u8{fmt[0]}),
        }
        if (fmt.len > 1) width = comptime (parseUnsigned(usize, fmt[1..], 10) catch unreachable);
    }
    return formatInt(value, radix, uppercase, width, context, Errors, output);
  21e8e1:	8b 75 fc             	mov    esi,DWORD PTR [rbp-0x4]
  21e8e4:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
  21e8e8:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21e8ec:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  21e8f0:	89 c2                	mov    edx,eax
  21e8f2:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  21e8f6:	44 89 c1             	mov    ecx,r8d
  21e8f9:	4d 89 d0             	mov    r8,r10
  21e8fc:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
  21e900:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  21e904:	e8 c7 0e 00 00       	call   21f7d0 <formatInt>
  21e909:	66 83 f8 00          	cmp    ax,0x0
  21e90d:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  21e911:	74 0b                	je     21e91e <formatIntValue+0x5e>
  21e913:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21e917:	e8 34 5b fe ff       	call   204450 <__zig_return_error>
  21e91c:	eb 02                	jmp    21e920 <formatIntValue+0x60>
  21e91e:	eb 00                	jmp    21e920 <formatIntValue+0x60>
  21e920:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  21e924:	48 83 c4 40          	add    rsp,0x40
  21e928:	5d                   	pop    rbp
  21e929:	c3                   	ret    
  21e92a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000021e930 <mmap>:
pub fn mmap(address: ?[*]u8, length: usize, prot: usize, flags: u32, fd: i32, offset: isize) usize {
  21e930:	55                   	push   rbp
  21e931:	48 89 e5             	mov    rbp,rsp
  21e934:	48 83 ec 40          	sub    rsp,0x40
  21e938:	b8 09 00 00 00       	mov    eax,0x9
  21e93d:	41 89 c2             	mov    r10d,eax
  21e940:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  21e944:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  21e948:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  21e94c:	89 4d e4             	mov    DWORD PTR [rbp-0x1c],ecx
  21e94f:	44 89 45 e0          	mov    DWORD PTR [rbp-0x20],r8d
  21e953:	4c 89 4d d8          	mov    QWORD PTR [rbp-0x28],r9
    return syscall6(SYS_mmap, @ptrToInt(address), length, prot, flags, @intCast(usize, fd), @bitCast(usize, offset));
  21e957:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21e95b:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21e95f:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21e963:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  21e966:	4c 63 4d e0          	movsxd r9,DWORD PTR [rbp-0x20]
  21e96a:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  21e96e:	89 c0                	mov    eax,eax
  21e970:	41 89 c0             	mov    r8d,eax
  21e973:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
  21e977:	4c 89 d7             	mov    rdi,r10
  21e97a:	4c 8b 55 d0          	mov    r10,QWORD PTR [rbp-0x30]
  21e97e:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  21e982:	e8 39 00 00 00       	call   21e9c0 <syscall6>
  21e987:	48 83 c4 40          	add    rsp,0x40
  21e98b:	5d                   	pop    rbp
  21e98c:	c3                   	ret    
  21e98d:	0f 1f 00             	nop    DWORD PTR [rax]

000000000021e990 <munmap>:
pub fn munmap(address: usize, length: usize) usize {
  21e990:	55                   	push   rbp
  21e991:	48 89 e5             	mov    rbp,rsp
  21e994:	48 83 ec 10          	sub    rsp,0x10
  21e998:	b8 0b 00 00 00       	mov    eax,0xb
  21e99d:	89 c1                	mov    ecx,eax
  21e99f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  21e9a3:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    return syscall2(SYS_munmap, address, length);
  21e9a7:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21e9ab:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21e9af:	48 89 cf             	mov    rdi,rcx
  21e9b2:	e8 89 67 fe ff       	call   205140 <syscall2>
  21e9b7:	48 83 c4 10          	add    rsp,0x10
  21e9bb:	5d                   	pop    rbp
  21e9bc:	c3                   	ret    
  21e9bd:	0f 1f 00             	nop    DWORD PTR [rax]

000000000021e9c0 <syscall6>:
          [arg5] "{r8}" (arg5)
        : "rcx", "r11"
    );
}

pub fn syscall6(
  21e9c0:	55                   	push   rbp
  21e9c1:	48 89 e5             	mov    rbp,rsp
  21e9c4:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
  21e9c8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  21e9cc:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  21e9d0:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  21e9d4:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  21e9d8:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
  21e9dc:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
    arg5: usize,
    arg6: usize,
) usize {
    return asm volatile ("syscall"
        : [ret] "={rax}" (-> usize)
        : [number] "{rax}" (number),
  21e9e0:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
          [arg1] "{rdi}" (arg1),
  21e9e4:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
          [arg2] "{rsi}" (arg2),
  21e9e8:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
          [arg3] "{rdx}" (arg3),
  21e9ec:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
          [arg4] "{r10}" (arg4),
  21e9f0:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
          [arg5] "{r8}" (arg5),
  21e9f4:	4c 8b 45 d0          	mov    r8,QWORD PTR [rbp-0x30]
          [arg6] "{r9}" (arg6)
  21e9f8:	4c 8b 4d 10          	mov    r9,QWORD PTR [rbp+0x10]
    return asm volatile ("syscall"
  21e9fc:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  21ea00:	48 89 c8             	mov    rax,rcx
  21ea03:	0f 05                	syscall 
  21ea05:	5d                   	pop    rbp
  21ea06:	c3                   	ret    
  21ea07:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  21ea0e:	00 00 

000000000021ea10 <ArenaAllocator_createNode>:
    fn createNode(self: *ArenaAllocator, prev_len: usize, minimum_size: usize) !*BufNode {
  21ea10:	55                   	push   rbp
  21ea11:	48 89 e5             	mov    rbp,rsp
  21ea14:	48 81 ec 70 01 00 00 	sub    rsp,0x170
  21ea1b:	48 89 f8             	mov    rax,rdi
  21ea1e:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  21ea25:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
  21ea2c:	4c 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],r8
        const actual_min_size = minimum_size + @sizeOf(BufNode);
  21ea33:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  21ea3a:	48 83 c1 20          	add    rcx,0x20
  21ea3e:	41 0f 92 c1          	setb   r9b
  21ea42:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  21ea49:	48 89 bd 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdi
  21ea50:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
  21ea57:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  21ea5e:	44 88 8d ff fe ff ff 	mov    BYTE PTR [rbp-0x101],r9b
  21ea65:	0f 82 dd 00 00 00    	jb     21eb48 <ArenaAllocator_createNode+0x138>
  21ea6b:	e9 e8 00 00 00       	jmp    21eb58 <ArenaAllocator_createNode+0x148>
        while (true) {
  21ea70:	eb 00                	jmp    21ea72 <ArenaAllocator_createNode+0x62>
  21ea72:	31 c0                	xor    eax,eax
  21ea74:	88 c1                	mov    cl,al
            len += len / 2;
  21ea76:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
  21ea7d:	48 8b b5 48 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xb8]
  21ea84:	f6 c1 01             	test   cl,0x1
  21ea87:	48 89 b5 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rsi
  21ea8e:	48 89 95 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdx
  21ea95:	0f 85 07 01 00 00    	jne    21eba2 <ArenaAllocator_createNode+0x192>
  21ea9b:	e9 d9 00 00 00       	jmp    21eb79 <ArenaAllocator_createNode+0x169>
            if (len >= actual_min_size) break;
  21eaa0:	eb 02                	jmp    21eaa4 <ArenaAllocator_createNode+0x94>
        while (true) {
  21eaa2:	eb cc                	jmp    21ea70 <ArenaAllocator_createNode+0x60>
  21eaa4:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
        const buf = try self.child_allocator.alignedAlloc(u8, @alignOf(BufNode), len);
  21eaa8:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  21eaaf:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
  21eab3:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
  21eaba:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
  21eac1:	e8 5a 03 00 00       	call   21ee20 <Allocator_alignedAlloc.94>
  21eac6:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  21eacb:	74 48                	je     21eb15 <ArenaAllocator_createNode+0x105>
  21eacd:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  21ead1:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
  21ead8:	66 89 85 e6 fe ff ff 	mov    WORD PTR [rbp-0x11a],ax
  21eadf:	e8 6c 59 fe ff       	call   204450 <__zig_return_error>
  21eae4:	66 8b 85 e6 fe ff ff 	mov    ax,WORD PTR [rbp-0x11a]
  21eaeb:	66 89 45 c0          	mov    WORD PTR [rbp-0x40],ax
  21eaef:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21eaf3:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  21eafa:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21eafd:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  21eb01:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21eb05:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  21eb0c:	48 81 c4 70 01 00 00 	add    rsp,0x170
  21eb13:	5d                   	pop    rbp
  21eb14:	c3                   	ret    
  21eb15:	b0 01                	mov    al,0x1
  21eb17:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  21eb1b:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  21eb22:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  21eb26:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
        const buf_node_slice = @bytesToSlice(BufNode, buf[0..@sizeOf(BufNode)]);
  21eb2d:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  21eb34:	a8 01                	test   al,0x1
  21eb36:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
  21eb3d:	0f 85 6c 01 00 00    	jne    21ecaf <ArenaAllocator_createNode+0x29f>
  21eb43:	e9 57 01 00 00       	jmp    21ec9f <ArenaAllocator_createNode+0x28f>
  21eb48:	48 8d 3d c9 67 00 00 	lea    rdi,[rip+0x67c9]        # 225318 <__unnamed_5>
  21eb4f:	31 c0                	xor    eax,eax
  21eb51:	89 c6                	mov    esi,eax
        const actual_min_size = minimum_size + @sizeOf(BufNode);
  21eb53:	e8 68 45 fe ff       	call   2030c0 <panic>
  21eb58:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  21eb5f:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        var len = prev_len;
  21eb66:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  21eb6d:	48 89 8d 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rcx
        while (true) {
  21eb74:	e9 f7 fe ff ff       	jmp    21ea70 <ArenaAllocator_createNode+0x60>
            len += len / 2;
  21eb79:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  21eb80:	48 c1 e8 01          	shr    rax,0x1
  21eb84:	48 8b 8d e8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x118]
  21eb8b:	48 01 c1             	add    rcx,rax
  21eb8e:	0f 92 c2             	setb   dl
  21eb91:	48 89 8d d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rcx
  21eb98:	88 95 cf fe ff ff    	mov    BYTE PTR [rbp-0x131],dl
  21eb9e:	72 12                	jb     21ebb2 <ArenaAllocator_createNode+0x1a2>
  21eba0:	eb 20                	jmp    21ebc2 <ArenaAllocator_createNode+0x1b2>
  21eba2:	48 8d 3d cf 69 00 00 	lea    rdi,[rip+0x69cf]        # 225578 <__unnamed_73>
  21eba9:	31 c0                	xor    eax,eax
  21ebab:	89 c6                	mov    esi,eax
  21ebad:	e8 0e 45 fe ff       	call   2030c0 <panic>
  21ebb2:	48 8d 3d 5f 67 00 00 	lea    rdi,[rip+0x675f]        # 225318 <__unnamed_5>
  21ebb9:	31 c0                	xor    eax,eax
  21ebbb:	89 c6                	mov    esi,eax
  21ebbd:	e8 fe 44 fe ff       	call   2030c0 <panic>
  21ebc2:	31 c0                	xor    eax,eax
  21ebc4:	88 c1                	mov    cl,al
  21ebc6:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
  21ebcd:	48 89 95 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdx
            len += os.page_size - @rem(len, os.page_size);
  21ebd4:	48 8b b5 48 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xb8]
  21ebdb:	48 8b bd 48 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb8]
  21ebe2:	f6 c1 01             	test   cl,0x1
  21ebe5:	48 89 bd c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rdi
  21ebec:	48 89 b5 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rsi
  21ebf3:	75 2e                	jne    21ec23 <ArenaAllocator_createNode+0x213>
  21ebf5:	b8 00 10 00 00       	mov    eax,0x1000
  21ebfa:	89 c1                	mov    ecx,eax
  21ebfc:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  21ec03:	48 81 e2 ff 0f 00 00 	and    rdx,0xfff
  21ec0a:	48 29 d1             	sub    rcx,rdx
  21ec0d:	40 0f 92 c6          	setb   sil
  21ec11:	48 89 8d b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rcx
  21ec18:	40 88 b5 af fe ff ff 	mov    BYTE PTR [rbp-0x151],sil
  21ec1f:	72 12                	jb     21ec33 <ArenaAllocator_createNode+0x223>
  21ec21:	eb 20                	jmp    21ec43 <ArenaAllocator_createNode+0x233>
  21ec23:	48 8d 3d b6 69 00 00 	lea    rdi,[rip+0x69b6]        # 2255e0 <__unnamed_14>
  21ec2a:	31 c0                	xor    eax,eax
  21ec2c:	89 c6                	mov    esi,eax
  21ec2e:	e8 8d 44 fe ff       	call   2030c0 <panic>
  21ec33:	48 8d 3d de 66 00 00 	lea    rdi,[rip+0x66de]        # 225318 <__unnamed_5>
  21ec3a:	31 c0                	xor    eax,eax
  21ec3c:	89 c6                	mov    esi,eax
  21ec3e:	e8 7d 44 fe ff       	call   2030c0 <panic>
  21ec43:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  21ec4a:	48 8b 8d b0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x150]
  21ec51:	48 01 c8             	add    rax,rcx
  21ec54:	0f 92 c2             	setb   dl
  21ec57:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
  21ec5e:	88 95 9f fe ff ff    	mov    BYTE PTR [rbp-0x161],dl
  21ec64:	72 02                	jb     21ec68 <ArenaAllocator_createNode+0x258>
  21ec66:	eb 10                	jmp    21ec78 <ArenaAllocator_createNode+0x268>
  21ec68:	48 8d 3d a9 66 00 00 	lea    rdi,[rip+0x66a9]        # 225318 <__unnamed_5>
  21ec6f:	31 c0                	xor    eax,eax
  21ec71:	89 c6                	mov    esi,eax
  21ec73:	e8 48 44 fe ff       	call   2030c0 <panic>
  21ec78:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
  21ec7f:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
            if (len >= actual_min_size) break;
  21ec86:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
  21ec8d:	48 3b 8d 50 ff ff ff 	cmp    rcx,QWORD PTR [rbp-0xb0]
  21ec94:	0f 83 06 fe ff ff    	jae    21eaa0 <ArenaAllocator_createNode+0x90>
  21ec9a:	e9 03 fe ff ff       	jmp    21eaa2 <ArenaAllocator_createNode+0x92>
  21ec9f:	48 8d 3d 5a 66 00 00 	lea    rdi,[rip+0x665a]        # 225300 <__unnamed_4>
  21eca6:	31 c0                	xor    eax,eax
  21eca8:	89 c6                	mov    esi,eax
        const buf_node_slice = @bytesToSlice(BufNode, buf[0..@sizeOf(BufNode)]);
  21ecaa:	e8 11 44 fe ff       	call   2030c0 <panic>
  21ecaf:	b8 20 00 00 00       	mov    eax,0x20
  21ecb4:	89 c1                	mov    ecx,eax
  21ecb6:	48 8b 95 d8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x128]
  21ecbd:	48 39 d1             	cmp    rcx,rdx
  21ecc0:	76 10                	jbe    21ecd2 <ArenaAllocator_createNode+0x2c2>
  21ecc2:	48 8d 3d 37 66 00 00 	lea    rdi,[rip+0x6637]        # 225300 <__unnamed_4>
  21ecc9:	31 c0                	xor    eax,eax
  21eccb:	89 c6                	mov    esi,eax
  21eccd:	e8 ee 43 fe ff       	call   2030c0 <panic>
  21ecd2:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  21ecd9:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  21ecdd:	48 c7 45 b8 20 00 00 	mov    QWORD PTR [rbp-0x48],0x20
  21ece4:	00 
  21ece5:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  21ece9:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  21eced:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21ecf1:	48 89 c1             	mov    rcx,rax
  21ecf4:	48 83 e1 1f          	and    rcx,0x1f
  21ecf8:	48 83 f9 00          	cmp    rcx,0x0
  21ecfc:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  21ed03:	75 34                	jne    21ed39 <ArenaAllocator_createNode+0x329>
  21ed05:	31 c0                	xor    eax,eax
  21ed07:	89 c1                	mov    ecx,eax
  21ed09:	48 8b 95 90 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x170]
  21ed10:	48 c1 ea 05          	shr    rdx,0x5
  21ed14:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
  21ed18:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  21ed1c:	48 89 95 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rdx
  21ed23:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  21ed27:	48 89 95 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rdx
        const buf_node = &buf_node_slice[0];
  21ed2e:	48 3b 8d 30 ff ff ff 	cmp    rcx,QWORD PTR [rbp-0xd0]
  21ed35:	72 22                	jb     21ed59 <ArenaAllocator_createNode+0x349>
  21ed37:	eb 10                	jmp    21ed49 <ArenaAllocator_createNode+0x339>
  21ed39:	48 8d 3d 08 68 00 00 	lea    rdi,[rip+0x6808]        # 225548 <__unnamed_61>
  21ed40:	31 c0                	xor    eax,eax
  21ed42:	89 c6                	mov    esi,eax
        const buf_node_slice = @bytesToSlice(BufNode, buf[0..@sizeOf(BufNode)]);
  21ed44:	e8 77 43 fe ff       	call   2030c0 <panic>
  21ed49:	48 8d 3d b0 65 00 00 	lea    rdi,[rip+0x65b0]        # 225300 <__unnamed_4>
  21ed50:	31 c0                	xor    eax,eax
  21ed52:	89 c6                	mov    esi,eax
        const buf_node = &buf_node_slice[0];
  21ed54:	e8 67 43 fe ff       	call   2030c0 <panic>
  21ed59:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  21ed60:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
        buf_node.* = BufNode{
  21ed67:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21ed6e:	48 c7 45 80 00 00 00 	mov    QWORD PTR [rbp-0x80],0x0
  21ed75:	00 
  21ed76:	48 c7 45 88 00 00 00 	mov    QWORD PTR [rbp-0x78],0x0
  21ed7d:	00 
  21ed7e:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
  21ed85:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
  21ed89:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  21ed90:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
  21ed94:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  21ed98:	48 89 08             	mov    QWORD PTR [rax],rcx
  21ed9b:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  21ed9f:	48 89 48 08          	mov    QWORD PTR [rax+0x8],rcx
  21eda3:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  21eda7:	48 89 48 10          	mov    QWORD PTR [rax+0x10],rcx
  21edab:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  21edaf:	48 89 48 18          	mov    QWORD PTR [rax+0x18],rcx
        self.buffer_list.append(buf_node);
  21edb3:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  21edba:	48 83 c0 20          	add    rax,0x20
  21edbe:	48 8b b5 20 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe0]
  21edc5:	48 89 c7             	mov    rdi,rax
  21edc8:	e8 33 03 00 00       	call   21f100 <BaseLinkedList([]u8,void,(struct []const u8 constant))_append>
        self.end_index = 0;
  21edcd:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  21edd4:	48 c7 40 38 00 00 00 	mov    QWORD PTR [rax+0x38],0x0
  21eddb:	00 
        return buf_node;
  21eddc:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21ede3:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  21edea:	00 00 
  21edec:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  21edf3:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21edfa:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  21ee01:	48 89 01             	mov    QWORD PTR [rcx],rax
  21ee04:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  21ee0b:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21ee0f:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  21ee16:	48 81 c4 70 01 00 00 	add    rsp,0x170
  21ee1d:	5d                   	pop    rbp
  21ee1e:	c3                   	ret    
  21ee1f:	90                   	nop

000000000021ee20 <Allocator_alignedAlloc.94>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  21ee20:	55                   	push   rbp
  21ee21:	48 89 e5             	mov    rbp,rsp
  21ee24:	48 81 ec 10 01 00 00 	sub    rsp,0x110
  21ee2b:	48 89 f8             	mov    rax,rdi
  21ee2e:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  21ee35:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  21ee3c:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  21ee43:	00 
  21ee44:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  21ee4b:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  21ee52:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  21ee59:	75 37                	jne    21ee92 <Allocator_alignedAlloc.94+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  21ee5b:	48 8b 05 f6 32 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe32f6]        # 202158 <__unnamed_183>
  21ee62:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21ee69:	48 89 01             	mov    QWORD PTR [rcx],rax
  21ee6c:	48 8b 05 ed 32 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe32ed]        # 202160 <__unnamed_183+0x8>
  21ee73:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21ee77:	48 8b 05 ea 32 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe32ea]        # 202168 <__unnamed_183+0x10>
  21ee7e:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21ee82:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21ee89:	48 81 c4 10 01 00 00 	add    rsp,0x110
  21ee90:	5d                   	pop    rbp
  21ee91:	c3                   	ret    
        if (n == 0) {
  21ee92:	eb 00                	jmp    21ee94 <Allocator_alignedAlloc.94+0x74>
  21ee94:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  21ee98:	b8 01 00 00 00       	mov    eax,0x1
  21ee9d:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  21ee9f:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  21eea6:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21eead:	e8 7e cd fe ff       	call   20bc30 <mul>
  21eeb2:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  21eeb7:	74 43                	je     21eefc <Allocator_alignedAlloc.94+0xdc>
  21eeb9:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  21eec0:	e8 8b 55 fe ff       	call   204450 <__zig_return_error>
  21eec5:	48 8b 3d a4 32 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe32a4]        # 202170 <__unnamed_184>
  21eecc:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21eed3:	48 89 38             	mov    QWORD PTR [rax],rdi
  21eed6:	48 8b 3d 9b 32 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe329b]        # 202178 <__unnamed_184+0x8>
  21eedd:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  21eee1:	48 8b 3d 98 32 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe3298]        # 202180 <__unnamed_184+0x10>
  21eee8:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  21eeec:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21eef3:	48 81 c4 10 01 00 00 	add    rsp,0x110
  21eefa:	5d                   	pop    rbp
  21eefb:	c3                   	ret    
  21eefc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21ef00:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  21ef07:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  21ef0b:	41 b8 08 00 00 00    	mov    r8d,0x8
  21ef11:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  21ef18:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  21ef1f:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  21ef26:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  21ef29:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  21ef30:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  21ef37:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  21ef3e:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  21ef45:	4c 89 ce             	mov    rsi,r9
  21ef48:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  21ef4f:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  21ef56:	4c 89 d1             	mov    rcx,r10
  21ef59:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  21ef60:	41 ff d3             	call   r11
  21ef63:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  21ef68:	74 50                	je     21efba <Allocator_alignedAlloc.94+0x19a>
  21ef6a:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  21ef6e:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  21ef75:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  21ef7c:	e8 cf 54 fe ff       	call   204450 <__zig_return_error>
  21ef81:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  21ef88:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  21ef8c:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  21ef90:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21ef97:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21ef9a:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  21ef9e:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21efa2:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  21efa6:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  21efaa:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21efb1:	48 81 c4 10 01 00 00 	add    rsp,0x110
  21efb8:	5d                   	pop    rbp
  21efb9:	c3                   	ret    
  21efba:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  21efbe:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  21efc5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21efc9:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  21efd0:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  21efd7:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  21efde:	0f 94 c1             	sete   cl
  21efe1:	0f b6 f9             	movzx  edi,cl
  21efe4:	e8 17 40 fe ff       	call   203000 <assert>
  21efe9:	be aa 00 00 00       	mov    esi,0xaa
  21efee:	bf 08 00 00 00       	mov    edi,0x8
  21eff3:	89 fa                	mov    edx,edi
  21eff5:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  21effc:	48 89 c7             	mov    rdi,rax
  21efff:	e8 ac 2c 00 00       	call   221cb0 <memset>
  21f004:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  21f00b:	00 00 00 00 
  21f00f:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  21f016:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  21f01d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  21f024:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  21f02b:	48 39 c8             	cmp    rax,rcx
  21f02e:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  21f035:	73 32                	jae    21f069 <Allocator_alignedAlloc.94+0x249>
  21f037:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21f03e:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  21f045:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  21f04c:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  21f053:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  21f055:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21f05c:	48 83 c1 01          	add    rcx,0x1
  21f060:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  21f067:	eb b4                	jmp    21f01d <Allocator_alignedAlloc.94+0x1fd>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  21f069:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  21f070:	48 83 e0 07          	and    rax,0x7
  21f074:	48 83 f8 00          	cmp    rax,0x0
  21f078:	75 6a                	jne    21f0e4 <Allocator_alignedAlloc.94+0x2c4>
  21f07a:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  21f081:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  21f085:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  21f08c:	48 c1 e0 00          	shl    rax,0x0
  21f090:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  21f094:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  21f09b:	00 00 
  21f09d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  21f0a1:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  21f0a8:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  21f0ac:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  21f0b0:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21f0b7:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21f0be:	48 89 01             	mov    QWORD PTR [rcx],rax
  21f0c1:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  21f0c8:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21f0cc:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  21f0d0:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21f0d4:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21f0db:	48 81 c4 10 01 00 00 	add    rsp,0x110
  21f0e2:	5d                   	pop    rbp
  21f0e3:	c3                   	ret    
  21f0e4:	48 8d 3d 45 64 00 00 	lea    rdi,[rip+0x6445]        # 225530 <__unnamed_60>
  21f0eb:	31 c0                	xor    eax,eax
  21f0ed:	89 c6                	mov    esi,eax
  21f0ef:	e8 cc 3f fe ff       	call   2030c0 <panic>
  21f0f4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21f0fb:	00 00 00 00 00 

000000000021f100 <BaseLinkedList([]u8,void,(struct []const u8 constant))_append>:
        pub fn append(list: *Self, new_node: *Node) void {
  21f100:	55                   	push   rbp
  21f101:	48 89 e5             	mov    rbp,rsp
  21f104:	48 83 ec 20          	sub    rsp,0x20
  21f108:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  21f10c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
            if (list.last) |last| {
  21f110:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21f114:	48 89 f7             	mov    rdi,rsi
  21f117:	48 83 c7 08          	add    rdi,0x8
  21f11b:	48 83 7e 08 00       	cmp    QWORD PTR [rsi+0x8],0x0
  21f120:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  21f124:	74 1e                	je     21f144 <BaseLinkedList([]u8,void,(struct []const u8 constant))_append+0x44>
  21f126:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  21f12a:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  21f12d:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
                list.insertAfter(last, new_node);
  21f131:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  21f135:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  21f139:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21f13d:	e8 1e 00 00 00       	call   21f160 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertAfter>
            if (list.last) |last| {
  21f142:	eb 0d                	jmp    21f151 <BaseLinkedList([]u8,void,(struct []const u8 constant))_append+0x51>
                list.prepend(new_node);
  21f144:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  21f148:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  21f14c:	e8 df 00 00 00       	call   21f230 <BaseLinkedList([]u8,void,(struct []const u8 constant))_prepend>
        pub fn append(list: *Self, new_node: *Node) void {
  21f151:	48 83 c4 20          	add    rsp,0x20
  21f155:	5d                   	pop    rbp
  21f156:	c3                   	ret    
  21f157:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  21f15e:	00 00 

000000000021f160 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertAfter>:
        pub fn insertAfter(list: *Self, node: *Node, new_node: *Node) void {
  21f160:	55                   	push   rbp
  21f161:	48 89 e5             	mov    rbp,rsp
  21f164:	48 83 ec 40          	sub    rsp,0x40
  21f168:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  21f16c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  21f170:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
            new_node.prev = node;
  21f174:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  21f178:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  21f17c:	48 89 32             	mov    QWORD PTR [rdx],rsi
            if (node.next) |next_node| {
  21f17f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21f183:	48 89 d6             	mov    rsi,rdx
  21f186:	48 83 c6 08          	add    rsi,0x8
  21f18a:	48 83 7a 08 00       	cmp    QWORD PTR [rdx+0x8],0x0
  21f18f:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  21f193:	74 24                	je     21f1b9 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertAfter+0x59>
  21f195:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21f199:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  21f19c:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
                new_node.next = next_node;
  21f1a0:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21f1a4:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  21f1a8:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
                next_node.prev = new_node;
  21f1ac:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  21f1b0:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  21f1b4:	48 89 11             	mov    QWORD PTR [rcx],rdx
            if (node.next) |next_node| {
  21f1b7:	eb 18                	jmp    21f1d1 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertAfter+0x71>
                new_node.next = null;
  21f1b9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21f1bd:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
  21f1c4:	00 
                list.last = new_node;
  21f1c5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21f1c9:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21f1cd:	48 89 48 08          	mov    QWORD PTR [rax+0x8],rcx
            node.next = new_node;
  21f1d1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21f1d5:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21f1d9:	48 89 48 08          	mov    QWORD PTR [rax+0x8],rcx
            list.len += 1;
  21f1dd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21f1e1:	48 89 c1             	mov    rcx,rax
  21f1e4:	48 83 c1 10          	add    rcx,0x10
  21f1e8:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  21f1ec:	48 83 c0 01          	add    rax,0x1
  21f1f0:	0f 92 c2             	setb   dl
  21f1f3:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  21f1f7:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  21f1fb:	88 55 c7             	mov    BYTE PTR [rbp-0x39],dl
  21f1fe:	72 02                	jb     21f202 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertAfter+0xa2>
  21f200:	eb 10                	jmp    21f212 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertAfter+0xb2>
  21f202:	48 8d 3d 0f 61 00 00 	lea    rdi,[rip+0x610f]        # 225318 <__unnamed_5>
  21f209:	31 c0                	xor    eax,eax
  21f20b:	89 c6                	mov    esi,eax
  21f20d:	e8 ae 3e fe ff       	call   2030c0 <panic>
  21f212:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  21f216:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  21f21a:	48 89 08             	mov    QWORD PTR [rax],rcx
        pub fn insertAfter(list: *Self, node: *Node, new_node: *Node) void {
  21f21d:	48 83 c4 40          	add    rsp,0x40
  21f221:	5d                   	pop    rbp
  21f222:	c3                   	ret    
  21f223:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21f22a:	84 00 00 00 00 00 

000000000021f230 <BaseLinkedList([]u8,void,(struct []const u8 constant))_prepend>:
        pub fn prepend(list: *Self, new_node: *Node) void {
  21f230:	55                   	push   rbp
  21f231:	48 89 e5             	mov    rbp,rsp
  21f234:	48 83 ec 20          	sub    rsp,0x20
  21f238:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  21f23c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
            if (list.first) |first| {
  21f240:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21f244:	48 83 3e 00          	cmp    QWORD PTR [rsi],0x0
  21f248:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  21f24c:	74 1e                	je     21f26c <BaseLinkedList([]u8,void,(struct []const u8 constant))_prepend+0x3c>
  21f24e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  21f252:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  21f255:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
                list.insertBefore(first, new_node);
  21f259:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  21f25d:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  21f261:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21f265:	e8 e6 05 00 00       	call   21f850 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertBefore>
            if (list.first) |first| {
  21f26a:	eb 3a                	jmp    21f2a6 <BaseLinkedList([]u8,void,(struct []const u8 constant))_prepend+0x76>
                list.first = new_node;
  21f26c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21f270:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  21f274:	48 89 08             	mov    QWORD PTR [rax],rcx
                list.last = new_node;
  21f277:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21f27b:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  21f27f:	48 89 48 08          	mov    QWORD PTR [rax+0x8],rcx
                new_node.prev = null;
  21f283:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21f287:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
                new_node.next = null;
  21f28e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21f292:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
  21f299:	00 
                list.len = 1;
  21f29a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21f29e:	48 c7 40 10 01 00 00 	mov    QWORD PTR [rax+0x10],0x1
  21f2a5:	00 
        pub fn prepend(list: *Self, new_node: *Node) void {
  21f2a6:	48 83 c4 20          	add    rsp,0x20
  21f2aa:	5d                   	pop    rbp
  21f2ab:	c3                   	ret    
  21f2ac:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000021f2b0 <open>:
pub fn open(path: [*]const u8, flags: u32, perm: usize) usize {
  21f2b0:	55                   	push   rbp
  21f2b1:	48 89 e5             	mov    rbp,rsp
  21f2b4:	48 83 ec 30          	sub    rsp,0x30
  21f2b8:	b8 02 00 00 00       	mov    eax,0x2
  21f2bd:	89 c1                	mov    ecx,eax
  21f2bf:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  21f2c3:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
  21f2c6:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    return syscall3(SYS_open, @ptrToInt(path), flags, perm);
  21f2ca:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21f2ce:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  21f2d1:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  21f2d5:	89 c0                	mov    eax,eax
  21f2d7:	89 c7                	mov    edi,eax
  21f2d9:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  21f2dd:	48 89 cf             	mov    rdi,rcx
  21f2e0:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  21f2e4:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  21f2e8:	48 89 ca             	mov    rdx,rcx
  21f2eb:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  21f2ef:	e8 dc bf fe ff       	call   20b2d0 <syscall3>
  21f2f4:	48 83 c4 30          	add    rsp,0x30
  21f2f8:	5d                   	pop    rbp
  21f2f9:	c3                   	ret    
  21f2fa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000021f300 <syscall1>:
pub fn syscall1(number: usize, arg1: usize) usize {
  21f300:	55                   	push   rbp
  21f301:	48 89 e5             	mov    rbp,rsp
  21f304:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  21f308:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
        : [number] "{rax}" (number),
  21f30c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
          [arg1] "{rdi}" (arg1)
  21f310:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
    return asm volatile ("syscall"
  21f314:	0f 05                	syscall 
  21f316:	5d                   	pop    rbp
  21f317:	c3                   	ret    
  21f318:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  21f31f:	00 

000000000021f320 <BaseLinkedList(promise,void,(struct []const u8 constant))_init>:
        pub fn init() Self {
  21f320:	55                   	push   rbp
  21f321:	48 89 e5             	mov    rbp,rsp
  21f324:	48 89 f8             	mov    rax,rdi
            return Self{
  21f327:	48 8b 0d 72 2e fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe2e72]        # 2021a0 <__unnamed_185>
  21f32e:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  21f331:	48 8b 0d 70 2e fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe2e70]        # 2021a8 <__unnamed_185+0x8>
  21f338:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  21f33c:	48 8b 0d 6d 2e fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe2e6d]        # 2021b0 <__unnamed_185+0x10>
  21f343:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  21f347:	5d                   	pop    rbp
  21f348:	c3                   	ret    
  21f349:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

000000000021f350 <BaseLinkedList(promise,void,(struct []const u8 constant))_remove>:
        pub fn remove(list: *Self, node: *Node) void {
  21f350:	55                   	push   rbp
  21f351:	48 89 e5             	mov    rbp,rsp
  21f354:	48 83 ec 50          	sub    rsp,0x50
  21f358:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  21f35c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
            if (node.prev) |prev_node| {
  21f360:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  21f364:	48 83 3e 00          	cmp    QWORD PTR [rsi],0x0
  21f368:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  21f36c:	74 1d                	je     21f38b <BaseLinkedList(promise,void,(struct []const u8 constant))_remove+0x3b>
  21f36e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21f372:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  21f375:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
                prev_node.next = node.next;
  21f379:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21f37d:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21f381:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  21f385:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
            if (node.prev) |prev_node| {
  21f389:	eb 0f                	jmp    21f39a <BaseLinkedList(promise,void,(struct []const u8 constant))_remove+0x4a>
                list.first = node.next;
  21f38b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21f38f:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  21f393:	48 8b 49 08          	mov    rcx,QWORD PTR [rcx+0x8]
  21f397:	48 89 08             	mov    QWORD PTR [rax],rcx
            if (node.next) |next_node| {
  21f39a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21f39e:	48 89 c1             	mov    rcx,rax
  21f3a1:	48 83 c1 08          	add    rcx,0x8
  21f3a5:	48 83 78 08 00       	cmp    QWORD PTR [rax+0x8],0x0
  21f3aa:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  21f3ae:	74 1b                	je     21f3cb <BaseLinkedList(promise,void,(struct []const u8 constant))_remove+0x7b>
  21f3b0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  21f3b4:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  21f3b7:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
                next_node.prev = node.prev;
  21f3bb:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  21f3bf:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21f3c3:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
  21f3c6:	48 89 11             	mov    QWORD PTR [rcx],rdx
            if (node.next) |next_node| {
  21f3c9:	eb 0f                	jmp    21f3da <BaseLinkedList(promise,void,(struct []const u8 constant))_remove+0x8a>
                list.last = node.prev;
  21f3cb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21f3cf:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  21f3d3:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  21f3d6:	48 89 48 08          	mov    QWORD PTR [rax+0x8],rcx
            list.len -= 1;
  21f3da:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21f3de:	48 89 c1             	mov    rcx,rax
  21f3e1:	48 83 c1 10          	add    rcx,0x10
  21f3e5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  21f3e9:	48 83 e8 01          	sub    rax,0x1
  21f3ed:	0f 92 c2             	setb   dl
  21f3f0:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  21f3f4:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  21f3f8:	88 55 bf             	mov    BYTE PTR [rbp-0x41],dl
  21f3fb:	72 3d                	jb     21f43a <BaseLinkedList(promise,void,(struct []const u8 constant))_remove+0xea>
  21f3fd:	eb 4b                	jmp    21f44a <BaseLinkedList(promise,void,(struct []const u8 constant))_remove+0xfa>
            assert(list.len == 0 or (list.first != null and list.last != null));
  21f3ff:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21f403:	48 83 38 00          	cmp    QWORD PTR [rax],0x0
  21f407:	0f 95 c1             	setne  cl
  21f40a:	f6 c1 01             	test   cl,0x1
  21f40d:	88 4d be             	mov    BYTE PTR [rbp-0x42],cl
  21f410:	75 02                	jne    21f414 <BaseLinkedList(promise,void,(struct []const u8 constant))_remove+0xc4>
  21f412:	eb 0f                	jmp    21f423 <BaseLinkedList(promise,void,(struct []const u8 constant))_remove+0xd3>
  21f414:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21f418:	48 83 78 08 00       	cmp    QWORD PTR [rax+0x8],0x0
  21f41d:	0f 95 c1             	setne  cl
  21f420:	88 4d be             	mov    BYTE PTR [rbp-0x42],cl
  21f423:	8a 45 be             	mov    al,BYTE PTR [rbp-0x42]
  21f426:	88 45 bd             	mov    BYTE PTR [rbp-0x43],al
  21f429:	8a 45 bd             	mov    al,BYTE PTR [rbp-0x43]
  21f42c:	0f b6 f8             	movzx  edi,al
  21f42f:	e8 cc 3b fe ff       	call   203000 <assert>
        pub fn remove(list: *Self, node: *Node) void {
  21f434:	48 83 c4 50          	add    rsp,0x50
  21f438:	5d                   	pop    rbp
  21f439:	c3                   	ret    
  21f43a:	48 8d 3d d7 5e 00 00 	lea    rdi,[rip+0x5ed7]        # 225318 <__unnamed_5>
  21f441:	31 c0                	xor    eax,eax
  21f443:	89 c6                	mov    esi,eax
            list.len -= 1;
  21f445:	e8 76 3c fe ff       	call   2030c0 <panic>
  21f44a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21f44e:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  21f452:	48 89 08             	mov    QWORD PTR [rax],rcx
            assert(list.len == 0 or (list.first != null and list.last != null));
  21f455:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  21f459:	48 83 7a 10 00       	cmp    QWORD PTR [rdx+0x10],0x0
  21f45e:	40 0f 94 c6          	sete   sil
  21f462:	40 f6 c6 01          	test   sil,0x1
  21f466:	40 88 75 bd          	mov    BYTE PTR [rbp-0x43],sil
  21f46a:	75 bd                	jne    21f429 <BaseLinkedList(promise,void,(struct []const u8 constant))_remove+0xd9>
  21f46c:	eb 91                	jmp    21f3ff <BaseLinkedList(promise,void,(struct []const u8 constant))_remove+0xaf>
  21f46e:	66 90                	xchg   ax,ax

000000000021f470 <isatty>:
pub fn isatty(fd: i32) bool {
  21f470:	55                   	push   rbp
  21f471:	48 89 e5             	mov    rbp,rsp
  21f474:	48 83 ec 10          	sub    rsp,0x10
  21f478:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    var wsz: winsize = undefined;
  21f47b:	48 8b 05 86 2f fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe2f86]        # 202408 <__unnamed_118>
  21f482:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    return syscall3(SYS_ioctl, @intCast(usize, fd), TIOCGWINSZ, @ptrToInt(&wsz)) == 0;
  21f486:	48 63 75 fc          	movsxd rsi,DWORD PTR [rbp-0x4]
  21f48a:	bf 10 00 00 00       	mov    edi,0x10
  21f48f:	b9 13 54 00 00       	mov    ecx,0x5413
  21f494:	89 ca                	mov    edx,ecx
  21f496:	48 8d 4d f0          	lea    rcx,[rbp-0x10]
  21f49a:	e8 31 be fe ff       	call   20b2d0 <syscall3>
  21f49f:	48 85 c0             	test   rax,rax
  21f4a2:	0f 94 c0             	sete   al
  21f4a5:	48 83 c4 10          	add    rsp,0x10
  21f4a9:	5d                   	pop    rbp
  21f4aa:	c3                   	ret    
  21f4ab:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000021f4b0 <formatIntValue.95>:
pub fn formatIntValue(
  21f4b0:	55                   	push   rbp
  21f4b1:	48 89 e5             	mov    rbp,rsp
  21f4b4:	48 83 ec 40          	sub    rsp,0x40
  21f4b8:	b8 10 00 00 00       	mov    eax,0x10
  21f4bd:	45 31 c0             	xor    r8d,r8d
  21f4c0:	45 31 c9             	xor    r9d,r9d
  21f4c3:	45 89 ca             	mov    r10d,r9d
  21f4c6:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21f4ca:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  21f4ce:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    return formatInt(value, radix, uppercase, width, context, Errors, output);
  21f4d2:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21f4d6:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
  21f4da:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21f4de:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  21f4e2:	89 c2                	mov    edx,eax
  21f4e4:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  21f4e8:	44 89 c1             	mov    ecx,r8d
  21f4eb:	4d 89 d0             	mov    r8,r10
  21f4ee:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
  21f4f2:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  21f4f6:	e8 15 04 00 00       	call   21f910 <formatInt.102>
  21f4fb:	66 83 f8 00          	cmp    ax,0x0
  21f4ff:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  21f503:	74 0b                	je     21f510 <formatIntValue.95+0x60>
  21f505:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21f509:	e8 42 4f fe ff       	call   204450 <__zig_return_error>
  21f50e:	eb 02                	jmp    21f512 <formatIntValue.95+0x62>
  21f510:	eb 00                	jmp    21f512 <formatIntValue.95+0x62>
  21f512:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  21f516:	48 83 c4 40          	add    rsp,0x40
  21f51a:	5d                   	pop    rbp
  21f51b:	c3                   	ret    
  21f51c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000021f520 <formatIntValue.96>:
pub fn formatIntValue(
  21f520:	55                   	push   rbp
  21f521:	48 89 e5             	mov    rbp,rsp
  21f524:	48 83 ec 40          	sub    rsp,0x40
  21f528:	b8 10 00 00 00       	mov    eax,0x10
  21f52d:	45 31 c0             	xor    r8d,r8d
  21f530:	45 31 c9             	xor    r9d,r9d
  21f533:	45 89 ca             	mov    r10d,r9d
  21f536:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21f53a:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  21f53e:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    return formatInt(value, radix, uppercase, width, context, Errors, output);
  21f542:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21f546:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
  21f54a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21f54e:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  21f552:	89 c2                	mov    edx,eax
  21f554:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  21f558:	44 89 c1             	mov    ecx,r8d
  21f55b:	4d 89 d0             	mov    r8,r10
  21f55e:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
  21f562:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  21f566:	e8 a5 03 00 00       	call   21f910 <formatInt.102>
  21f56b:	66 83 f8 00          	cmp    ax,0x0
  21f56f:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  21f573:	74 0b                	je     21f580 <formatIntValue.96+0x60>
  21f575:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21f579:	e8 d2 4e fe ff       	call   204450 <__zig_return_error>
  21f57e:	eb 02                	jmp    21f582 <formatIntValue.96+0x62>
  21f580:	eb 00                	jmp    21f582 <formatIntValue.96+0x62>
  21f582:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  21f586:	48 83 c4 40          	add    rsp,0x40
  21f58a:	5d                   	pop    rbp
  21f58b:	c3                   	ret    
  21f58c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000021f590 <formatIntValue.97>:
pub fn formatIntValue(
  21f590:	55                   	push   rbp
  21f591:	48 89 e5             	mov    rbp,rsp
  21f594:	48 83 ec 40          	sub    rsp,0x40
  21f598:	b8 0a 00 00 00       	mov    eax,0xa
  21f59d:	45 31 c0             	xor    r8d,r8d
  21f5a0:	45 31 c9             	xor    r9d,r9d
  21f5a3:	45 89 ca             	mov    r10d,r9d
  21f5a6:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21f5aa:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  21f5ae:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    return formatInt(value, radix, uppercase, width, context, Errors, output);
  21f5b2:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21f5b6:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
  21f5ba:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21f5be:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  21f5c2:	89 c2                	mov    edx,eax
  21f5c4:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  21f5c8:	44 89 c1             	mov    ecx,r8d
  21f5cb:	4d 89 d0             	mov    r8,r10
  21f5ce:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
  21f5d2:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  21f5d6:	e8 35 03 00 00       	call   21f910 <formatInt.102>
  21f5db:	66 83 f8 00          	cmp    ax,0x0
  21f5df:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  21f5e3:	74 0b                	je     21f5f0 <formatIntValue.97+0x60>
  21f5e5:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21f5e9:	e8 62 4e fe ff       	call   204450 <__zig_return_error>
  21f5ee:	eb 02                	jmp    21f5f2 <formatIntValue.97+0x62>
  21f5f0:	eb 00                	jmp    21f5f2 <formatIntValue.97+0x62>
  21f5f2:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  21f5f6:	48 83 c4 40          	add    rsp,0x40
  21f5fa:	5d                   	pop    rbp
  21f5fb:	c3                   	ret    
  21f5fc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000021f600 <formatIntValue.98>:
pub fn formatIntValue(
  21f600:	55                   	push   rbp
  21f601:	48 89 e5             	mov    rbp,rsp
  21f604:	48 83 ec 40          	sub    rsp,0x40
  21f608:	b8 10 00 00 00       	mov    eax,0x10
  21f60d:	45 31 c0             	xor    r8d,r8d
  21f610:	45 31 c9             	xor    r9d,r9d
  21f613:	45 89 ca             	mov    r10d,r9d
  21f616:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21f61a:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  21f61e:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    return formatInt(value, radix, uppercase, width, context, Errors, output);
  21f622:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21f626:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
  21f62a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21f62e:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  21f632:	89 c2                	mov    edx,eax
  21f634:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  21f638:	44 89 c1             	mov    ecx,r8d
  21f63b:	4d 89 d0             	mov    r8,r10
  21f63e:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
  21f642:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  21f646:	e8 c5 02 00 00       	call   21f910 <formatInt.102>
  21f64b:	66 83 f8 00          	cmp    ax,0x0
  21f64f:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  21f653:	74 0b                	je     21f660 <formatIntValue.98+0x60>
  21f655:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21f659:	e8 f2 4d fe ff       	call   204450 <__zig_return_error>
  21f65e:	eb 02                	jmp    21f662 <formatIntValue.98+0x62>
  21f660:	eb 00                	jmp    21f662 <formatIntValue.98+0x62>
  21f662:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  21f666:	48 83 c4 40          	add    rsp,0x40
  21f66a:	5d                   	pop    rbp
  21f66b:	c3                   	ret    
  21f66c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000021f670 <formatIntValue.99>:
pub fn formatIntValue(
  21f670:	55                   	push   rbp
  21f671:	48 89 e5             	mov    rbp,rsp
  21f674:	48 83 ec 40          	sub    rsp,0x40
  21f678:	b8 0a 00 00 00       	mov    eax,0xa
  21f67d:	45 31 c0             	xor    r8d,r8d
  21f680:	45 31 c9             	xor    r9d,r9d
  21f683:	45 89 ca             	mov    r10d,r9d
  21f686:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21f68a:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  21f68e:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    return formatInt(value, radix, uppercase, width, context, Errors, output);
  21f692:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21f696:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
  21f69a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21f69e:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  21f6a2:	89 c2                	mov    edx,eax
  21f6a4:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  21f6a8:	44 89 c1             	mov    ecx,r8d
  21f6ab:	4d 89 d0             	mov    r8,r10
  21f6ae:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
  21f6b2:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  21f6b6:	e8 55 02 00 00       	call   21f910 <formatInt.102>
  21f6bb:	66 83 f8 00          	cmp    ax,0x0
  21f6bf:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  21f6c3:	74 0b                	je     21f6d0 <formatIntValue.99+0x60>
  21f6c5:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21f6c9:	e8 82 4d fe ff       	call   204450 <__zig_return_error>
  21f6ce:	eb 02                	jmp    21f6d2 <formatIntValue.99+0x62>
  21f6d0:	eb 00                	jmp    21f6d2 <formatIntValue.99+0x62>
  21f6d2:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  21f6d6:	48 83 c4 40          	add    rsp,0x40
  21f6da:	5d                   	pop    rbp
  21f6db:	c3                   	ret    
  21f6dc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000021f6e0 <formatIntValue.100>:
pub fn formatIntValue(
  21f6e0:	55                   	push   rbp
  21f6e1:	48 89 e5             	mov    rbp,rsp
  21f6e4:	48 83 ec 40          	sub    rsp,0x40
  21f6e8:	b8 10 00 00 00       	mov    eax,0x10
  21f6ed:	45 31 c0             	xor    r8d,r8d
  21f6f0:	45 31 c9             	xor    r9d,r9d
  21f6f3:	45 89 ca             	mov    r10d,r9d
  21f6f6:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21f6fa:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  21f6fe:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    return formatInt(value, radix, uppercase, width, context, Errors, output);
  21f702:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21f706:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
  21f70a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21f70e:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  21f712:	89 c2                	mov    edx,eax
  21f714:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  21f718:	44 89 c1             	mov    ecx,r8d
  21f71b:	4d 89 d0             	mov    r8,r10
  21f71e:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
  21f722:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  21f726:	e8 e5 01 00 00       	call   21f910 <formatInt.102>
  21f72b:	66 83 f8 00          	cmp    ax,0x0
  21f72f:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  21f733:	74 0b                	je     21f740 <formatIntValue.100+0x60>
  21f735:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21f739:	e8 12 4d fe ff       	call   204450 <__zig_return_error>
  21f73e:	eb 02                	jmp    21f742 <formatIntValue.100+0x62>
  21f740:	eb 00                	jmp    21f742 <formatIntValue.100+0x62>
  21f742:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  21f746:	48 83 c4 40          	add    rsp,0x40
  21f74a:	5d                   	pop    rbp
  21f74b:	c3                   	ret    
  21f74c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000021f750 <formatIntValue.101>:
pub fn formatIntValue(
  21f750:	55                   	push   rbp
  21f751:	48 89 e5             	mov    rbp,rsp
  21f754:	48 83 ec 40          	sub    rsp,0x40
  21f758:	b8 10 00 00 00       	mov    eax,0x10
  21f75d:	45 31 c0             	xor    r8d,r8d
  21f760:	45 31 c9             	xor    r9d,r9d
  21f763:	45 89 ca             	mov    r10d,r9d
  21f766:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21f76a:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  21f76e:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    return formatInt(value, radix, uppercase, width, context, Errors, output);
  21f772:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21f776:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
  21f77a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21f77e:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  21f782:	89 c2                	mov    edx,eax
  21f784:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  21f788:	44 89 c1             	mov    ecx,r8d
  21f78b:	4d 89 d0             	mov    r8,r10
  21f78e:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
  21f792:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  21f796:	e8 75 01 00 00       	call   21f910 <formatInt.102>
  21f79b:	66 83 f8 00          	cmp    ax,0x0
  21f79f:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  21f7a3:	74 0b                	je     21f7b0 <formatIntValue.101+0x60>
  21f7a5:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21f7a9:	e8 a2 4c fe ff       	call   204450 <__zig_return_error>
  21f7ae:	eb 02                	jmp    21f7b2 <formatIntValue.101+0x62>
  21f7b0:	eb 00                	jmp    21f7b2 <formatIntValue.101+0x62>
  21f7b2:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  21f7b6:	48 83 c4 40          	add    rsp,0x40
  21f7ba:	5d                   	pop    rbp
  21f7bb:	c3                   	ret    
  21f7bc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000021f7c0 <absCast>:
pub fn absCast(x: var) @IntType(false, @typeOf(x).bit_count) {
  21f7c0:	55                   	push   rbp
  21f7c1:	48 89 e5             	mov    rbp,rsp
  21f7c4:	40 88 f8             	mov    al,dil
  21f7c7:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
    if (x >= 0) return @intCast(uint, x);
  21f7ca:	8a 45 ff             	mov    al,BYTE PTR [rbp-0x1]
  21f7cd:	5d                   	pop    rbp
  21f7ce:	c3                   	ret    
  21f7cf:	90                   	nop

000000000021f7d0 <formatInt>:
        else => unreachable,
    };
    return output(context, buf);
}

pub fn formatInt(
  21f7d0:	55                   	push   rbp
  21f7d1:	48 89 e5             	mov    rbp,rsp
  21f7d4:	41 56                	push   r14
  21f7d6:	53                   	push   rbx
  21f7d7:	48 83 ec 40          	sub    rsp,0x40
  21f7db:	88 c8                	mov    al,cl
  21f7dd:	41 88 d2             	mov    r10b,dl
  21f7e0:	4c 8b 5d 10          	mov    r11,QWORD PTR [rbp+0x10]
  21f7e4:	89 75 ec             	mov    DWORD PTR [rbp-0x14],esi
  21f7e7:	44 88 55 eb          	mov    BYTE PTR [rbp-0x15],r10b
  21f7eb:	24 01                	and    al,0x1
  21f7ed:	88 45 ea             	mov    BYTE PTR [rbp-0x16],al
  21f7f0:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
  21f7f4:	4c 89 4d d8          	mov    QWORD PTR [rbp-0x28],r9
    output: fn (@typeOf(context), []const u8) Errors!void,
) Errors!void {
    if (@typeOf(value).is_signed) {
        return formatIntSigned(value, base, uppercase, width, context, Errors, output);
    } else {
        return formatIntUnsigned(value, base, uppercase, width, context, Errors, output);
  21f7f8:	8b 75 ec             	mov    esi,DWORD PTR [rbp-0x14]
  21f7fb:	8a 45 eb             	mov    al,BYTE PTR [rbp-0x15]
  21f7fe:	44 8a 55 ea          	mov    r10b,BYTE PTR [rbp-0x16]
  21f802:	4c 8b 45 e0          	mov    r8,QWORD PTR [rbp-0x20]
  21f806:	4c 8b 4d d8          	mov    r9,QWORD PTR [rbp-0x28]
  21f80a:	48 8b 5d 10          	mov    rbx,QWORD PTR [rbp+0x10]
  21f80e:	49 89 e6             	mov    r14,rsp
  21f811:	49 89 1e             	mov    QWORD PTR [r14],rbx
  21f814:	0f b6 d0             	movzx  edx,al
  21f817:	41 0f b6 ca          	movzx  ecx,r10b
  21f81b:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
  21f81f:	4c 89 5d c8          	mov    QWORD PTR [rbp-0x38],r11
  21f823:	e8 68 01 00 00       	call   21f990 <formatIntUnsigned>
  21f828:	66 83 f8 00          	cmp    ax,0x0
  21f82c:	66 89 45 c6          	mov    WORD PTR [rbp-0x3a],ax
  21f830:	74 0b                	je     21f83d <formatInt+0x6d>
  21f832:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  21f836:	e8 15 4c fe ff       	call   204450 <__zig_return_error>
  21f83b:	eb 02                	jmp    21f83f <formatInt+0x6f>
  21f83d:	eb 00                	jmp    21f83f <formatInt+0x6f>
  21f83f:	66 8b 45 c6          	mov    ax,WORD PTR [rbp-0x3a]
  21f843:	48 83 c4 40          	add    rsp,0x40
  21f847:	5b                   	pop    rbx
  21f848:	41 5e                	pop    r14
  21f84a:	5d                   	pop    rbp
  21f84b:	c3                   	ret    
  21f84c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000021f850 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertBefore>:
        pub fn insertBefore(list: *Self, node: *Node, new_node: *Node) void {
  21f850:	55                   	push   rbp
  21f851:	48 89 e5             	mov    rbp,rsp
  21f854:	48 83 ec 40          	sub    rsp,0x40
  21f858:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  21f85c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  21f860:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
            new_node.next = node;
  21f864:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  21f868:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  21f86c:	48 89 72 08          	mov    QWORD PTR [rdx+0x8],rsi
            if (node.prev) |prev_node| {
  21f870:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21f874:	48 83 3a 00          	cmp    QWORD PTR [rdx],0x0
  21f878:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  21f87c:	74 24                	je     21f8a2 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertBefore+0x52>
  21f87e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21f882:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  21f885:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
                new_node.prev = prev_node;
  21f889:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21f88d:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  21f891:	48 89 11             	mov    QWORD PTR [rcx],rdx
                prev_node.next = new_node;
  21f894:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  21f898:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  21f89c:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
            if (node.prev) |prev_node| {
  21f8a0:	eb 16                	jmp    21f8b8 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertBefore+0x68>
                new_node.prev = null;
  21f8a2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21f8a6:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
                list.first = new_node;
  21f8ad:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21f8b1:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21f8b5:	48 89 08             	mov    QWORD PTR [rax],rcx
            node.prev = new_node;
  21f8b8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21f8bc:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21f8c0:	48 89 08             	mov    QWORD PTR [rax],rcx
            list.len += 1;
  21f8c3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21f8c7:	48 89 c1             	mov    rcx,rax
  21f8ca:	48 83 c1 10          	add    rcx,0x10
  21f8ce:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  21f8d2:	48 83 c0 01          	add    rax,0x1
  21f8d6:	0f 92 c2             	setb   dl
  21f8d9:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  21f8dd:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  21f8e1:	88 55 c7             	mov    BYTE PTR [rbp-0x39],dl
  21f8e4:	72 02                	jb     21f8e8 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertBefore+0x98>
  21f8e6:	eb 10                	jmp    21f8f8 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertBefore+0xa8>
  21f8e8:	48 8d 3d 29 5a 00 00 	lea    rdi,[rip+0x5a29]        # 225318 <__unnamed_5>
  21f8ef:	31 c0                	xor    eax,eax
  21f8f1:	89 c6                	mov    esi,eax
  21f8f3:	e8 c8 37 fe ff       	call   2030c0 <panic>
  21f8f8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  21f8fc:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  21f900:	48 89 08             	mov    QWORD PTR [rax],rcx
        pub fn insertBefore(list: *Self, node: *Node, new_node: *Node) void {
  21f903:	48 83 c4 40          	add    rsp,0x40
  21f907:	5d                   	pop    rbp
  21f908:	c3                   	ret    
  21f909:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

000000000021f910 <formatInt.102>:
pub fn formatInt(
  21f910:	55                   	push   rbp
  21f911:	48 89 e5             	mov    rbp,rsp
  21f914:	41 56                	push   r14
  21f916:	53                   	push   rbx
  21f917:	48 83 ec 40          	sub    rsp,0x40
  21f91b:	88 c8                	mov    al,cl
  21f91d:	41 88 d2             	mov    r10b,dl
  21f920:	4c 8b 5d 10          	mov    r11,QWORD PTR [rbp+0x10]
  21f924:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
  21f928:	44 88 55 e7          	mov    BYTE PTR [rbp-0x19],r10b
  21f92c:	24 01                	and    al,0x1
  21f92e:	88 45 e6             	mov    BYTE PTR [rbp-0x1a],al
  21f931:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
  21f935:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
        return formatIntUnsigned(value, base, uppercase, width, context, Errors, output);
  21f939:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  21f93d:	8a 45 e7             	mov    al,BYTE PTR [rbp-0x19]
  21f940:	44 8a 55 e6          	mov    r10b,BYTE PTR [rbp-0x1a]
  21f944:	4c 8b 45 d8          	mov    r8,QWORD PTR [rbp-0x28]
  21f948:	4c 8b 4d d0          	mov    r9,QWORD PTR [rbp-0x30]
  21f94c:	48 8b 5d 10          	mov    rbx,QWORD PTR [rbp+0x10]
  21f950:	49 89 e6             	mov    r14,rsp
  21f953:	49 89 1e             	mov    QWORD PTR [r14],rbx
  21f956:	0f b6 d0             	movzx  edx,al
  21f959:	41 0f b6 ca          	movzx  ecx,r10b
  21f95d:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  21f961:	4c 89 5d c0          	mov    QWORD PTR [rbp-0x40],r11
  21f965:	e8 76 06 00 00       	call   21ffe0 <formatIntUnsigned.103>
  21f96a:	66 83 f8 00          	cmp    ax,0x0
  21f96e:	66 89 45 be          	mov    WORD PTR [rbp-0x42],ax
  21f972:	74 0b                	je     21f97f <formatInt.102+0x6f>
  21f974:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  21f978:	e8 d3 4a fe ff       	call   204450 <__zig_return_error>
  21f97d:	eb 02                	jmp    21f981 <formatInt.102+0x71>
  21f97f:	eb 00                	jmp    21f981 <formatInt.102+0x71>
  21f981:	66 8b 45 be          	mov    ax,WORD PTR [rbp-0x42]
  21f985:	48 83 c4 40          	add    rsp,0x40
  21f989:	5b                   	pop    rbx
  21f98a:	41 5e                	pop    r14
  21f98c:	5d                   	pop    rbp
  21f98d:	c3                   	ret    
  21f98e:	66 90                	xchg   ax,ax

000000000021f990 <formatIntUnsigned>:
        const new_width = if (width == 0) 0 else (width - 1);
        return formatIntUnsigned(new_value, base, uppercase, new_width, context, Errors, output);
    }
}

fn formatIntUnsigned(
  21f990:	55                   	push   rbp
  21f991:	48 89 e5             	mov    rbp,rsp
  21f994:	41 56                	push   r14
  21f996:	53                   	push   rbx
  21f997:	48 81 ec 00 02 00 00 	sub    rsp,0x200
  21f99e:	88 c8                	mov    al,cl
  21f9a0:	41 88 d2             	mov    r10b,dl
  21f9a3:	4c 8b 5d 10          	mov    r11,QWORD PTR [rbp+0x10]
  21f9a7:	48 8d 1d 22 28 fe ff 	lea    rbx,[rip+0xfffffffffffe2822]        # 2021d0 <__unnamed_187>
  21f9ae:	b9 40 00 00 00       	mov    ecx,0x40
  21f9b3:	89 ca                	mov    edx,ecx
  21f9b5:	4c 8d b5 00 ff ff ff 	lea    r14,[rbp-0x100]
  21f9bc:	89 b5 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],esi
  21f9c2:	44 88 95 53 ff ff ff 	mov    BYTE PTR [rbp-0xad],r10b
  21f9c9:	24 01                	and    al,0x1
  21f9cb:	88 85 52 ff ff ff    	mov    BYTE PTR [rbp-0xae],al
  21f9d1:	4c 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],r8
  21f9d8:	4c 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],r9
    comptime Errors: type,
    output: fn (@typeOf(context), []const u8) Errors!void,
) Errors!void {
    // max_int_digits accounts for the minus sign. when printing an unsigned
    // number we don't need to do that.
    var buf: [max_int_digits - 1]u8 = undefined;
  21f9df:	48 89 bd a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rdi
  21f9e6:	4c 89 f7             	mov    rdi,r14
  21f9e9:	48 89 de             	mov    rsi,rbx
  21f9ec:	4c 89 9d a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],r11
  21f9f3:	e8 08 23 00 00       	call   221d00 <memcpy>
    var a = if (@sizeOf(@typeOf(value)) == 1) u8(value) else value;
  21f9f8:	8b 8d 54 ff ff ff    	mov    ecx,DWORD PTR [rbp-0xac]
  21f9fe:	89 8d fc fe ff ff    	mov    DWORD PTR [rbp-0x104],ecx
    var index: usize = buf.len;
  21fa04:	48 c7 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],0x40
  21fa0b:	40 00 00 00 

    while (true) {
  21fa0f:	eb 00                	jmp    21fa11 <formatIntUnsigned+0x81>
        const digit = a % base;
  21fa11:	8b 85 fc fe ff ff    	mov    eax,DWORD PTR [rbp-0x104]
  21fa17:	0f b6 8d 53 ff ff ff 	movzx  ecx,BYTE PTR [rbp-0xad]
  21fa1e:	83 f9 00             	cmp    ecx,0x0
  21fa21:	89 85 9c fe ff ff    	mov    DWORD PTR [rbp-0x164],eax
  21fa27:	89 8d 98 fe ff ff    	mov    DWORD PTR [rbp-0x168],ecx
  21fa2d:	0f 84 f0 01 00 00    	je     21fc23 <formatIntUnsigned+0x293>
  21fa33:	e9 b4 01 00 00       	jmp    21fbec <formatIntUnsigned+0x25c>
        index -= 1;
        buf[index] = digitToChar(@intCast(u8, digit), uppercase);
        a /= base;
        if (a == 0) break;
  21fa38:	eb 02                	jmp    21fa3c <formatIntUnsigned+0xac>
    while (true) {
  21fa3a:	eb d3                	jmp    21fa0f <formatIntUnsigned+0x7f>
    }

    const digits_buf = buf[index..];
  21fa3c:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  21fa43:	48 83 f8 40          	cmp    rax,0x40
  21fa47:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  21fa4e:	0f 86 e9 02 00 00    	jbe    21fd3d <formatIntUnsigned+0x3ad>
  21fa54:	e9 d4 02 00 00       	jmp    21fd2d <formatIntUnsigned+0x39d>
    const padding = if (width > digits_buf.len) (width - digits_buf.len) else 0;
  21fa59:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  21fa60:	48 2b 85 e0 fe ff ff 	sub    rax,QWORD PTR [rbp-0x120]
  21fa67:	0f 92 c1             	setb   cl
  21fa6a:	48 89 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rax
  21fa71:	88 8d 87 fe ff ff    	mov    BYTE PTR [rbp-0x179],cl
  21fa77:	0f 82 12 03 00 00    	jb     21fd8f <formatIntUnsigned+0x3ff>
  21fa7d:	e9 1d 03 00 00       	jmp    21fd9f <formatIntUnsigned+0x40f>
  21fa82:	31 c0                	xor    eax,eax
  21fa84:	89 c1                	mov    ecx,eax
  21fa86:	48 89 8d 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rcx
  21fa8d:	eb 00                	jmp    21fa8f <formatIntUnsigned+0xff>
  21fa8f:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
  21fa96:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax

    if (padding > index) {
  21fa9d:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21faa4:	48 3b 85 f0 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x110]
  21faab:	0f 86 ef 00 00 00    	jbe    21fba0 <formatIntUnsigned+0x210>
        const zero_byte: u8 = '0';
  21fab1:	c6 85 cf fe ff ff 30 	mov    BYTE PTR [rbp-0x131],0x30
        var leftover_padding = padding - index;
  21fab8:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21fabf:	48 2b 85 f0 fe ff ff 	sub    rax,QWORD PTR [rbp-0x110]
  21fac6:	0f 92 c1             	setb   cl
  21fac9:	48 89 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rax
  21fad0:	88 8d 6f fe ff ff    	mov    BYTE PTR [rbp-0x191],cl
  21fad6:	0f 82 d6 02 00 00    	jb     21fdb2 <formatIntUnsigned+0x422>
  21fadc:	e9 e1 02 00 00       	jmp    21fdc2 <formatIntUnsigned+0x432>
        while (true) {
  21fae1:	eb 00                	jmp    21fae3 <formatIntUnsigned+0x153>
  21fae3:	48 8d 15 6e 5d 00 00 	lea    rdx,[rip+0x5d6e]        # 225858 <__unnamed_188>
            try output(context, (*[1]u8)(&zero_byte)[0..]);
  21faea:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
  21faee:	48 8b b5 40 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc0]
  21faf5:	48 8b bd a8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x158]
  21fafc:	ff d0                	call   rax
  21fafe:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  21fb02:	66 83 7d de 00       	cmp    WORD PTR [rbp-0x22],0x0
  21fb07:	74 2a                	je     21fb33 <formatIntUnsigned+0x1a3>
  21fb09:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  21fb0d:	48 8b bd a8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x158]
  21fb14:	66 89 85 6c fe ff ff 	mov    WORD PTR [rbp-0x194],ax
  21fb1b:	e8 30 49 fe ff       	call   204450 <__zig_return_error>
  21fb20:	66 8b 85 6c fe ff ff 	mov    ax,WORD PTR [rbp-0x194]
  21fb27:	48 81 c4 00 02 00 00 	add    rsp,0x200
  21fb2e:	5b                   	pop    rbx
  21fb2f:	41 5e                	pop    r14
  21fb31:	5d                   	pop    rbp
  21fb32:	c3                   	ret    
            leftover_padding -= 1;
  21fb33:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  21fb3a:	48 83 e8 01          	sub    rax,0x1
  21fb3e:	0f 92 c1             	setb   cl
  21fb41:	48 89 85 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rax
  21fb48:	88 8d 5f fe ff ff    	mov    BYTE PTR [rbp-0x1a1],cl
  21fb4e:	0f 82 81 02 00 00    	jb     21fdd5 <formatIntUnsigned+0x445>
  21fb54:	e9 8c 02 00 00       	jmp    21fde5 <formatIntUnsigned+0x455>
            if (leftover_padding == 0) break;
  21fb59:	eb 02                	jmp    21fb5d <formatIntUnsigned+0x1cd>
        while (true) {
  21fb5b:	eb 84                	jmp    21fae1 <formatIntUnsigned+0x151>
  21fb5d:	31 c0                	xor    eax,eax
  21fb5f:	89 c1                	mov    ecx,eax
        }
        mem.set(u8, buf[0..index], '0');
  21fb61:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  21fb68:	48 39 d1             	cmp    rcx,rdx
  21fb6b:	48 89 95 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rdx
  21fb72:	0f 86 9e 02 00 00    	jbe    21fe16 <formatIntUnsigned+0x486>
  21fb78:	e9 89 02 00 00       	jmp    21fe06 <formatIntUnsigned+0x476>
        return output(context, buf);
  21fb7d:	48 8b bd a8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x158]
  21fb84:	e8 c7 48 fe ff       	call   204450 <__zig_return_error>
  21fb89:	eb 02                	jmp    21fb8d <formatIntUnsigned+0x1fd>
  21fb8b:	eb 00                	jmp    21fb8d <formatIntUnsigned+0x1fd>
  21fb8d:	66 8b 85 4e fe ff ff 	mov    ax,WORD PTR [rbp-0x1b2]
  21fb94:	48 81 c4 00 02 00 00 	add    rsp,0x200
  21fb9b:	5b                   	pop    rbx
  21fb9c:	41 5e                	pop    r14
  21fb9e:	5d                   	pop    rbp
  21fb9f:	c3                   	ret    
    } else {
        const padded_buf = buf[index - padding ..];
  21fba0:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  21fba7:	48 2b 85 d0 fe ff ff 	sub    rax,QWORD PTR [rbp-0x130]
  21fbae:	0f 92 c1             	setb   cl
  21fbb1:	48 89 85 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rax
  21fbb8:	88 8d 3f fe ff ff    	mov    BYTE PTR [rbp-0x1c1],cl
  21fbbe:	0f 82 ef 02 00 00    	jb     21feb3 <formatIntUnsigned+0x523>
  21fbc4:	e9 fa 02 00 00       	jmp    21fec3 <formatIntUnsigned+0x533>
        mem.set(u8, padded_buf[0..padding], '0');
        return output(context, padded_buf);
  21fbc9:	48 8b bd a8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x158]
  21fbd0:	e8 7b 48 fe ff       	call   204450 <__zig_return_error>
  21fbd5:	eb 02                	jmp    21fbd9 <formatIntUnsigned+0x249>
  21fbd7:	eb 00                	jmp    21fbd9 <formatIntUnsigned+0x249>
  21fbd9:	66 8b 85 3c fe ff ff 	mov    ax,WORD PTR [rbp-0x1c4]
  21fbe0:	48 81 c4 00 02 00 00 	add    rsp,0x200
  21fbe7:	5b                   	pop    rbx
  21fbe8:	41 5e                	pop    r14
  21fbea:	5d                   	pop    rbp
  21fbeb:	c3                   	ret    
        const digit = a % base;
  21fbec:	8b 85 9c fe ff ff    	mov    eax,DWORD PTR [rbp-0x164]
  21fbf2:	31 d2                	xor    edx,edx
  21fbf4:	8b 8d 98 fe ff ff    	mov    ecx,DWORD PTR [rbp-0x168]
  21fbfa:	f7 f1                	div    ecx
  21fbfc:	89 95 ec fe ff ff    	mov    DWORD PTR [rbp-0x114],edx
        index -= 1;
  21fc02:	48 8b b5 f0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x110]
  21fc09:	48 83 ee 01          	sub    rsi,0x1
  21fc0d:	40 0f 92 c7          	setb   dil
  21fc11:	48 89 b5 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rsi
  21fc18:	40 88 bd 2f fe ff ff 	mov    BYTE PTR [rbp-0x1d1],dil
  21fc1f:	72 12                	jb     21fc33 <formatIntUnsigned+0x2a3>
  21fc21:	eb 20                	jmp    21fc43 <formatIntUnsigned+0x2b3>
  21fc23:	48 8d 3d b6 59 00 00 	lea    rdi,[rip+0x59b6]        # 2255e0 <__unnamed_14>
  21fc2a:	31 c0                	xor    eax,eax
  21fc2c:	89 c6                	mov    esi,eax
        const digit = a % base;
  21fc2e:	e8 8d 34 fe ff       	call   2030c0 <panic>
  21fc33:	48 8d 3d de 56 00 00 	lea    rdi,[rip+0x56de]        # 225318 <__unnamed_5>
  21fc3a:	31 c0                	xor    eax,eax
  21fc3c:	89 c6                	mov    esi,eax
        index -= 1;
  21fc3e:	e8 7d 34 fe ff       	call   2030c0 <panic>
  21fc43:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  21fc4a:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
        buf[index] = digitToChar(@intCast(u8, digit), uppercase);
  21fc51:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21fc58:	48 83 f9 40          	cmp    rcx,0x40
  21fc5c:	48 89 8d 20 fe ff ff 	mov    QWORD PTR [rbp-0x1e0],rcx
  21fc63:	72 10                	jb     21fc75 <formatIntUnsigned+0x2e5>
  21fc65:	48 8d 3d 94 56 00 00 	lea    rdi,[rip+0x5694]        # 225300 <__unnamed_4>
  21fc6c:	31 c0                	xor    eax,eax
  21fc6e:	89 c6                	mov    esi,eax
  21fc70:	e8 4b 34 fe ff       	call   2030c0 <panic>
  21fc75:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
  21fc7c:	48 8b 8d 20 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1e0]
  21fc83:	48 01 c8             	add    rax,rcx
  21fc86:	8b 95 ec fe ff ff    	mov    edx,DWORD PTR [rbp-0x114]
  21fc8c:	40 88 d6             	mov    sil,dl
  21fc8f:	40 0f b6 fe          	movzx  edi,sil
  21fc93:	39 fa                	cmp    edx,edi
  21fc95:	48 89 85 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],rax
  21fc9c:	40 88 b5 17 fe ff ff 	mov    BYTE PTR [rbp-0x1e9],sil
  21fca3:	75 40                	jne    21fce5 <formatIntUnsigned+0x355>
  21fca5:	8a 85 52 ff ff ff    	mov    al,BYTE PTR [rbp-0xae]
  21fcab:	8a 8d 17 fe ff ff    	mov    cl,BYTE PTR [rbp-0x1e9]
  21fcb1:	0f b6 f9             	movzx  edi,cl
  21fcb4:	0f b6 f0             	movzx  esi,al
  21fcb7:	e8 a4 09 00 00       	call   220660 <digitToChar>
  21fcbc:	48 8b 95 18 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1e8]
  21fcc3:	88 02                	mov    BYTE PTR [rdx],al
        a /= base;
  21fcc5:	8b 85 fc fe ff ff    	mov    eax,DWORD PTR [rbp-0x104]
  21fccb:	0f b6 b5 53 ff ff ff 	movzx  esi,BYTE PTR [rbp-0xad]
  21fcd2:	83 fe 00             	cmp    esi,0x0
  21fcd5:	89 85 10 fe ff ff    	mov    DWORD PTR [rbp-0x1f0],eax
  21fcdb:	89 b5 0c fe ff ff    	mov    DWORD PTR [rbp-0x1f4],esi
  21fce1:	74 3a                	je     21fd1d <formatIntUnsigned+0x38d>
  21fce3:	eb 10                	jmp    21fcf5 <formatIntUnsigned+0x365>
  21fce5:	48 8d 3d bc 56 00 00 	lea    rdi,[rip+0x56bc]        # 2253a8 <__unnamed_8>
  21fcec:	31 c0                	xor    eax,eax
  21fcee:	89 c6                	mov    esi,eax
        buf[index] = digitToChar(@intCast(u8, digit), uppercase);
  21fcf0:	e8 cb 33 fe ff       	call   2030c0 <panic>
        a /= base;
  21fcf5:	8b 85 10 fe ff ff    	mov    eax,DWORD PTR [rbp-0x1f0]
  21fcfb:	31 d2                	xor    edx,edx
  21fcfd:	8b 8d 0c fe ff ff    	mov    ecx,DWORD PTR [rbp-0x1f4]
  21fd03:	f7 f1                	div    ecx
  21fd05:	89 85 fc fe ff ff    	mov    DWORD PTR [rbp-0x104],eax
        if (a == 0) break;
  21fd0b:	83 bd fc fe ff ff 00 	cmp    DWORD PTR [rbp-0x104],0x0
  21fd12:	0f 84 20 fd ff ff    	je     21fa38 <formatIntUnsigned+0xa8>
  21fd18:	e9 1d fd ff ff       	jmp    21fa3a <formatIntUnsigned+0xaa>
  21fd1d:	48 8d 3d 54 58 00 00 	lea    rdi,[rip+0x5854]        # 225578 <__unnamed_73>
  21fd24:	31 c0                	xor    eax,eax
  21fd26:	89 c6                	mov    esi,eax
        a /= base;
  21fd28:	e8 93 33 fe ff       	call   2030c0 <panic>
  21fd2d:	48 8d 3d cc 55 00 00 	lea    rdi,[rip+0x55cc]        # 225300 <__unnamed_4>
  21fd34:	31 c0                	xor    eax,eax
  21fd36:	89 c6                	mov    esi,eax
    const digits_buf = buf[index..];
  21fd38:	e8 83 33 fe ff       	call   2030c0 <panic>
  21fd3d:	b8 40 00 00 00       	mov    eax,0x40
  21fd42:	89 c1                	mov    ecx,eax
  21fd44:	48 8d 95 00 ff ff ff 	lea    rdx,[rbp-0x100]
  21fd4b:	48 8b b5 90 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x170]
  21fd52:	48 01 f2             	add    rdx,rsi
  21fd55:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  21fd59:	48 29 f1             	sub    rcx,rsi
  21fd5c:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  21fd60:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  21fd64:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
  21fd6b:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21fd6f:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
    const padding = if (width > digits_buf.len) (width - digits_buf.len) else 0;
  21fd76:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
  21fd7d:	48 3b 8d e0 fe ff ff 	cmp    rcx,QWORD PTR [rbp-0x120]
  21fd84:	0f 87 cf fc ff ff    	ja     21fa59 <formatIntUnsigned+0xc9>
  21fd8a:	e9 f3 fc ff ff       	jmp    21fa82 <formatIntUnsigned+0xf2>
  21fd8f:	48 8d 3d 82 55 00 00 	lea    rdi,[rip+0x5582]        # 225318 <__unnamed_5>
  21fd96:	31 c0                	xor    eax,eax
  21fd98:	89 c6                	mov    esi,eax
  21fd9a:	e8 21 33 fe ff       	call   2030c0 <panic>
  21fd9f:	48 8b 85 88 fe ff ff 	mov    rax,QWORD PTR [rbp-0x178]
  21fda6:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  21fdad:	e9 dd fc ff ff       	jmp    21fa8f <formatIntUnsigned+0xff>
  21fdb2:	48 8d 3d 5f 55 00 00 	lea    rdi,[rip+0x555f]        # 225318 <__unnamed_5>
  21fdb9:	31 c0                	xor    eax,eax
  21fdbb:	89 c6                	mov    esi,eax
        var leftover_padding = padding - index;
  21fdbd:	e8 fe 32 fe ff       	call   2030c0 <panic>
  21fdc2:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  21fdc9:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
        while (true) {
  21fdd0:	e9 0c fd ff ff       	jmp    21fae1 <formatIntUnsigned+0x151>
  21fdd5:	48 8d 3d 3c 55 00 00 	lea    rdi,[rip+0x553c]        # 225318 <__unnamed_5>
  21fddc:	31 c0                	xor    eax,eax
  21fdde:	89 c6                	mov    esi,eax
            leftover_padding -= 1;
  21fde0:	e8 db 32 fe ff       	call   2030c0 <panic>
  21fde5:	48 8b 85 60 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a0]
  21fdec:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
            if (leftover_padding == 0) break;
  21fdf3:	48 83 bd c0 fe ff ff 	cmp    QWORD PTR [rbp-0x140],0x0
  21fdfa:	00 
  21fdfb:	0f 84 58 fd ff ff    	je     21fb59 <formatIntUnsigned+0x1c9>
  21fe01:	e9 55 fd ff ff       	jmp    21fb5b <formatIntUnsigned+0x1cb>
  21fe06:	48 8d 3d f3 54 00 00 	lea    rdi,[rip+0x54f3]        # 225300 <__unnamed_4>
  21fe0d:	31 c0                	xor    eax,eax
  21fe0f:	89 c6                	mov    esi,eax
        mem.set(u8, buf[0..index], '0');
  21fe11:	e8 aa 32 fe ff       	call   2030c0 <panic>
  21fe16:	48 8b 85 50 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b0]
  21fe1d:	48 83 f8 40          	cmp    rax,0x40
  21fe21:	76 10                	jbe    21fe33 <formatIntUnsigned+0x4a3>
  21fe23:	48 8d 3d d6 54 00 00 	lea    rdi,[rip+0x54d6]        # 225300 <__unnamed_4>
  21fe2a:	31 c0                	xor    eax,eax
  21fe2c:	89 c6                	mov    esi,eax
  21fe2e:	e8 8d 32 fe ff       	call   2030c0 <panic>
  21fe33:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  21fe37:	be 30 00 00 00       	mov    esi,0x30
  21fe3c:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
  21fe43:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  21fe47:	48 8b 85 50 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b0]
  21fe4e:	48 83 e8 00          	sub    rax,0x0
  21fe52:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  21fe56:	e8 05 09 00 00       	call   220760 <set>
  21fe5b:	48 8d 95 78 ff ff ff 	lea    rdx,[rbp-0x88]
  21fe62:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
        return output(context, buf);
  21fe69:	48 8b 7d 10          	mov    rdi,QWORD PTR [rbp+0x10]
  21fe6d:	48 8b b5 40 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc0]
  21fe74:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  21fe7b:	48 c7 45 80 40 00 00 	mov    QWORD PTR [rbp-0x80],0x40
  21fe82:	00 
  21fe83:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
  21fe8a:	48 89 bd 00 fe ff ff 	mov    QWORD PTR [rbp-0x200],rdi
  21fe91:	48 89 c7             	mov    rdi,rax
  21fe94:	48 8b 8d 00 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x200]
  21fe9b:	ff d1                	call   rcx
  21fe9d:	66 83 f8 00          	cmp    ax,0x0
  21fea1:	66 89 85 4e fe ff ff 	mov    WORD PTR [rbp-0x1b2],ax
  21fea8:	0f 85 cf fc ff ff    	jne    21fb7d <formatIntUnsigned+0x1ed>
  21feae:	e9 d8 fc ff ff       	jmp    21fb8b <formatIntUnsigned+0x1fb>
  21feb3:	48 8d 3d 5e 54 00 00 	lea    rdi,[rip+0x545e]        # 225318 <__unnamed_5>
  21feba:	31 c0                	xor    eax,eax
  21febc:	89 c6                	mov    esi,eax
        const padded_buf = buf[index - padding ..];
  21febe:	e8 fd 31 fe ff       	call   2030c0 <panic>
  21fec3:	48 8b 85 40 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c0]
  21feca:	48 83 f8 40          	cmp    rax,0x40
  21fece:	76 10                	jbe    21fee0 <formatIntUnsigned+0x550>
  21fed0:	48 8d 3d 29 54 00 00 	lea    rdi,[rip+0x5429]        # 225300 <__unnamed_4>
  21fed7:	31 c0                	xor    eax,eax
  21fed9:	89 c6                	mov    esi,eax
  21fedb:	e8 e0 31 fe ff       	call   2030c0 <panic>
  21fee0:	31 c0                	xor    eax,eax
  21fee2:	89 c1                	mov    ecx,eax
  21fee4:	b8 40 00 00 00       	mov    eax,0x40
  21fee9:	89 c2                	mov    edx,eax
  21feeb:	48 8d b5 00 ff ff ff 	lea    rsi,[rbp-0x100]
  21fef2:	48 8b bd 40 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1c0]
  21fef9:	48 01 fe             	add    rsi,rdi
  21fefc:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
  21ff03:	48 29 fa             	sub    rdx,rdi
  21ff06:	48 89 95 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdx
  21ff0d:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  21ff14:	48 89 95 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rdx
  21ff1b:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  21ff22:	48 89 95 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rdx
        mem.set(u8, padded_buf[0..padding], '0');
  21ff29:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
  21ff30:	48 8b b5 b8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x148]
  21ff37:	48 39 d1             	cmp    rcx,rdx
  21ff3a:	48 89 b5 f8 fd ff ff 	mov    QWORD PTR [rbp-0x208],rsi
  21ff41:	48 89 95 f0 fd ff ff 	mov    QWORD PTR [rbp-0x210],rdx
  21ff48:	76 10                	jbe    21ff5a <formatIntUnsigned+0x5ca>
  21ff4a:	48 8d 3d af 53 00 00 	lea    rdi,[rip+0x53af]        # 225300 <__unnamed_4>
  21ff51:	31 c0                	xor    eax,eax
  21ff53:	89 c6                	mov    esi,eax
  21ff55:	e8 66 31 fe ff       	call   2030c0 <panic>
  21ff5a:	48 8b 85 f0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x210]
  21ff61:	48 8b 8d f8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x208]
  21ff68:	48 39 c8             	cmp    rax,rcx
  21ff6b:	76 10                	jbe    21ff7d <formatIntUnsigned+0x5ed>
  21ff6d:	48 8d 3d 8c 53 00 00 	lea    rdi,[rip+0x538c]        # 225300 <__unnamed_4>
  21ff74:	31 c0                	xor    eax,eax
  21ff76:	89 c6                	mov    esi,eax
  21ff78:	e8 43 31 fe ff       	call   2030c0 <panic>
  21ff7d:	48 8d bd 58 ff ff ff 	lea    rdi,[rbp-0xa8]
  21ff84:	be 30 00 00 00       	mov    esi,0x30
  21ff89:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  21ff90:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  21ff97:	48 8b 85 f0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x210]
  21ff9e:	48 83 e8 00          	sub    rax,0x0
  21ffa2:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  21ffa9:	e8 b2 07 00 00       	call   220760 <set>
  21ffae:	48 8d 95 b0 fe ff ff 	lea    rdx,[rbp-0x150]
        return output(context, padded_buf);
  21ffb5:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
  21ffb9:	48 8b b5 40 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc0]
  21ffc0:	48 8b bd a8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x158]
  21ffc7:	ff d0                	call   rax
  21ffc9:	66 83 f8 00          	cmp    ax,0x0
  21ffcd:	66 89 85 3c fe ff ff 	mov    WORD PTR [rbp-0x1c4],ax
  21ffd4:	0f 85 ef fb ff ff    	jne    21fbc9 <formatIntUnsigned+0x239>
  21ffda:	e9 f8 fb ff ff       	jmp    21fbd7 <formatIntUnsigned+0x247>
  21ffdf:	90                   	nop

000000000021ffe0 <formatIntUnsigned.103>:
fn formatIntUnsigned(
  21ffe0:	55                   	push   rbp
  21ffe1:	48 89 e5             	mov    rbp,rsp
  21ffe4:	41 56                	push   r14
  21ffe6:	53                   	push   rbx
  21ffe7:	48 81 ec 20 02 00 00 	sub    rsp,0x220
  21ffee:	88 c8                	mov    al,cl
  21fff0:	41 88 d2             	mov    r10b,dl
  21fff3:	4c 8b 5d 10          	mov    r11,QWORD PTR [rbp+0x10]
  21fff7:	48 8d 1d 13 22 fe ff 	lea    rbx,[rip+0xfffffffffffe2213]        # 202211 <__unnamed_189>
  21fffe:	b9 40 00 00 00       	mov    ecx,0x40
  220003:	89 ca                	mov    edx,ecx
  220005:	4c 8d b5 f8 fe ff ff 	lea    r14,[rbp-0x108]
  22000c:	48 89 b5 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rsi
  220013:	44 88 95 4f ff ff ff 	mov    BYTE PTR [rbp-0xb1],r10b
  22001a:	24 01                	and    al,0x1
  22001c:	88 85 4e ff ff ff    	mov    BYTE PTR [rbp-0xb2],al
  220022:	4c 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],r8
  220029:	4c 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],r9
    var buf: [max_int_digits - 1]u8 = undefined;
  220030:	48 89 bd a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdi
  220037:	4c 89 f7             	mov    rdi,r14
  22003a:	48 89 de             	mov    rsi,rbx
  22003d:	4c 89 9d 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],r11
  220044:	e8 b7 1c 00 00       	call   221d00 <memcpy>
    var a = if (@sizeOf(@typeOf(value)) == 1) u8(value) else value;
  220049:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
  220050:	48 89 95 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rdx
    var index: usize = buf.len;
  220057:	48 c7 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],0x40
  22005e:	40 00 00 00 
    while (true) {
  220062:	eb 00                	jmp    220064 <formatIntUnsigned.103+0x84>
        const digit = a % base;
  220064:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  22006b:	0f b6 8d 4f ff ff ff 	movzx  ecx,BYTE PTR [rbp-0xb1]
  220072:	89 ca                	mov    edx,ecx
  220074:	48 83 fa 00          	cmp    rdx,0x0
  220078:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  22007f:	48 89 95 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rdx
  220086:	0f 84 f6 01 00 00    	je     220282 <formatIntUnsigned.103+0x2a2>
  22008c:	e9 b4 01 00 00       	jmp    220245 <formatIntUnsigned.103+0x265>
        if (a == 0) break;
  220091:	eb 02                	jmp    220095 <formatIntUnsigned.103+0xb5>
    while (true) {
  220093:	eb cd                	jmp    220062 <formatIntUnsigned.103+0x82>
    const digits_buf = buf[index..];
  220095:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  22009c:	48 83 f8 40          	cmp    rax,0x40
  2200a0:	48 89 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rax
  2200a7:	0f 86 02 03 00 00    	jbe    2203af <formatIntUnsigned.103+0x3cf>
  2200ad:	e9 ed 02 00 00       	jmp    22039f <formatIntUnsigned.103+0x3bf>
    const padding = if (width > digits_buf.len) (width - digits_buf.len) else 0;
  2200b2:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  2200b9:	48 2b 85 d8 fe ff ff 	sub    rax,QWORD PTR [rbp-0x128]
  2200c0:	0f 92 c1             	setb   cl
  2200c3:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  2200ca:	88 8d 77 fe ff ff    	mov    BYTE PTR [rbp-0x189],cl
  2200d0:	0f 82 2b 03 00 00    	jb     220401 <formatIntUnsigned.103+0x421>
  2200d6:	e9 36 03 00 00       	jmp    220411 <formatIntUnsigned.103+0x431>
  2200db:	31 c0                	xor    eax,eax
  2200dd:	89 c1                	mov    ecx,eax
  2200df:	48 89 8d 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rcx
  2200e6:	eb 00                	jmp    2200e8 <formatIntUnsigned.103+0x108>
  2200e8:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
  2200ef:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
    if (padding > index) {
  2200f6:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  2200fd:	48 3b 85 e8 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x118]
  220104:	0f 86 ef 00 00 00    	jbe    2201f9 <formatIntUnsigned.103+0x219>
        const zero_byte: u8 = '0';
  22010a:	c6 85 c7 fe ff ff 30 	mov    BYTE PTR [rbp-0x139],0x30
        var leftover_padding = padding - index;
  220111:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  220118:	48 2b 85 e8 fe ff ff 	sub    rax,QWORD PTR [rbp-0x118]
  22011f:	0f 92 c1             	setb   cl
  220122:	48 89 85 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rax
  220129:	88 8d 5f fe ff ff    	mov    BYTE PTR [rbp-0x1a1],cl
  22012f:	0f 82 ef 02 00 00    	jb     220424 <formatIntUnsigned.103+0x444>
  220135:	e9 fa 02 00 00       	jmp    220434 <formatIntUnsigned.103+0x454>
        while (true) {
  22013a:	eb 00                	jmp    22013c <formatIntUnsigned.103+0x15c>
  22013c:	48 8d 15 2d 57 00 00 	lea    rdx,[rip+0x572d]        # 225870 <__unnamed_190>
            try output(context, (*[1]u8)(&zero_byte)[0..]);
  220143:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
  220147:	48 8b b5 38 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc8]
  22014e:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
  220155:	ff d0                	call   rax
  220157:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  22015b:	66 83 7d de 00       	cmp    WORD PTR [rbp-0x22],0x0
  220160:	74 2a                	je     22018c <formatIntUnsigned.103+0x1ac>
  220162:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  220166:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
  22016d:	66 89 85 5c fe ff ff 	mov    WORD PTR [rbp-0x1a4],ax
  220174:	e8 d7 42 fe ff       	call   204450 <__zig_return_error>
  220179:	66 8b 85 5c fe ff ff 	mov    ax,WORD PTR [rbp-0x1a4]
  220180:	48 81 c4 20 02 00 00 	add    rsp,0x220
  220187:	5b                   	pop    rbx
  220188:	41 5e                	pop    r14
  22018a:	5d                   	pop    rbp
  22018b:	c3                   	ret    
            leftover_padding -= 1;
  22018c:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  220193:	48 83 e8 01          	sub    rax,0x1
  220197:	0f 92 c1             	setb   cl
  22019a:	48 89 85 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rax
  2201a1:	88 8d 4f fe ff ff    	mov    BYTE PTR [rbp-0x1b1],cl
  2201a7:	0f 82 9a 02 00 00    	jb     220447 <formatIntUnsigned.103+0x467>
  2201ad:	e9 a5 02 00 00       	jmp    220457 <formatIntUnsigned.103+0x477>
            if (leftover_padding == 0) break;
  2201b2:	eb 02                	jmp    2201b6 <formatIntUnsigned.103+0x1d6>
        while (true) {
  2201b4:	eb 84                	jmp    22013a <formatIntUnsigned.103+0x15a>
  2201b6:	31 c0                	xor    eax,eax
  2201b8:	89 c1                	mov    ecx,eax
        mem.set(u8, buf[0..index], '0');
  2201ba:	48 8b 95 e8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x118]
  2201c1:	48 39 d1             	cmp    rcx,rdx
  2201c4:	48 89 95 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rdx
  2201cb:	0f 86 b7 02 00 00    	jbe    220488 <formatIntUnsigned.103+0x4a8>
  2201d1:	e9 a2 02 00 00       	jmp    220478 <formatIntUnsigned.103+0x498>
        return output(context, buf);
  2201d6:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
  2201dd:	e8 6e 42 fe ff       	call   204450 <__zig_return_error>
  2201e2:	eb 02                	jmp    2201e6 <formatIntUnsigned.103+0x206>
  2201e4:	eb 00                	jmp    2201e6 <formatIntUnsigned.103+0x206>
  2201e6:	66 8b 85 3e fe ff ff 	mov    ax,WORD PTR [rbp-0x1c2]
  2201ed:	48 81 c4 20 02 00 00 	add    rsp,0x220
  2201f4:	5b                   	pop    rbx
  2201f5:	41 5e                	pop    r14
  2201f7:	5d                   	pop    rbp
  2201f8:	c3                   	ret    
        const padded_buf = buf[index - padding ..];
  2201f9:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  220200:	48 2b 85 c8 fe ff ff 	sub    rax,QWORD PTR [rbp-0x138]
  220207:	0f 92 c1             	setb   cl
  22020a:	48 89 85 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rax
  220211:	88 8d 2f fe ff ff    	mov    BYTE PTR [rbp-0x1d1],cl
  220217:	0f 82 08 03 00 00    	jb     220525 <formatIntUnsigned.103+0x545>
  22021d:	e9 13 03 00 00       	jmp    220535 <formatIntUnsigned.103+0x555>
        return output(context, padded_buf);
  220222:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
  220229:	e8 22 42 fe ff       	call   204450 <__zig_return_error>
  22022e:	eb 02                	jmp    220232 <formatIntUnsigned.103+0x252>
  220230:	eb 00                	jmp    220232 <formatIntUnsigned.103+0x252>
  220232:	66 8b 85 2c fe ff ff 	mov    ax,WORD PTR [rbp-0x1d4]
  220239:	48 81 c4 20 02 00 00 	add    rsp,0x220
  220240:	5b                   	pop    rbx
  220241:	41 5e                	pop    r14
  220243:	5d                   	pop    rbp
  220244:	c3                   	ret    
        const digit = a % base;
  220245:	48 8b 85 90 fe ff ff 	mov    rax,QWORD PTR [rbp-0x170]
  22024c:	31 c9                	xor    ecx,ecx
  22024e:	89 ca                	mov    edx,ecx
  220250:	48 8b b5 88 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x178]
  220257:	48 f7 f6             	div    rsi
  22025a:	48 89 95 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rdx
        index -= 1;
  220261:	48 8b 95 e8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x118]
  220268:	48 83 ea 01          	sub    rdx,0x1
  22026c:	40 0f 92 c7          	setb   dil
  220270:	48 89 95 20 fe ff ff 	mov    QWORD PTR [rbp-0x1e0],rdx
  220277:	40 88 bd 1f fe ff ff 	mov    BYTE PTR [rbp-0x1e1],dil
  22027e:	72 12                	jb     220292 <formatIntUnsigned.103+0x2b2>
  220280:	eb 20                	jmp    2202a2 <formatIntUnsigned.103+0x2c2>
  220282:	48 8d 3d 57 53 00 00 	lea    rdi,[rip+0x5357]        # 2255e0 <__unnamed_14>
  220289:	31 c0                	xor    eax,eax
  22028b:	89 c6                	mov    esi,eax
        const digit = a % base;
  22028d:	e8 2e 2e fe ff       	call   2030c0 <panic>
  220292:	48 8d 3d 7f 50 00 00 	lea    rdi,[rip+0x507f]        # 225318 <__unnamed_5>
  220299:	31 c0                	xor    eax,eax
  22029b:	89 c6                	mov    esi,eax
        index -= 1;
  22029d:	e8 1e 2e fe ff       	call   2030c0 <panic>
  2202a2:	48 8b 85 20 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e0]
  2202a9:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
        buf[index] = digitToChar(@intCast(u8, digit), uppercase);
  2202b0:	48 8b 8d e8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x118]
  2202b7:	48 83 f9 40          	cmp    rcx,0x40
  2202bb:	48 89 8d 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rcx
  2202c2:	72 10                	jb     2202d4 <formatIntUnsigned.103+0x2f4>
  2202c4:	48 8d 3d 35 50 00 00 	lea    rdi,[rip+0x5035]        # 225300 <__unnamed_4>
  2202cb:	31 c0                	xor    eax,eax
  2202cd:	89 c6                	mov    esi,eax
  2202cf:	e8 ec 2d fe ff       	call   2030c0 <panic>
  2202d4:	48 8d 85 f8 fe ff ff 	lea    rax,[rbp-0x108]
  2202db:	48 8b 8d 10 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1f0]
  2202e2:	48 01 c8             	add    rax,rcx
  2202e5:	48 8b 95 e0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x120]
  2202ec:	40 88 d6             	mov    sil,dl
  2202ef:	40 0f b6 fe          	movzx  edi,sil
  2202f3:	41 89 f8             	mov    r8d,edi
  2202f6:	4c 39 c2             	cmp    rdx,r8
  2202f9:	48 89 85 08 fe ff ff 	mov    QWORD PTR [rbp-0x1f8],rax
  220300:	40 88 b5 07 fe ff ff 	mov    BYTE PTR [rbp-0x1f9],sil
  220307:	75 47                	jne    220350 <formatIntUnsigned.103+0x370>
  220309:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [rbp-0xb2]
  22030f:	8a 8d 07 fe ff ff    	mov    cl,BYTE PTR [rbp-0x1f9]
  220315:	0f b6 f9             	movzx  edi,cl
  220318:	0f b6 f0             	movzx  esi,al
  22031b:	e8 40 03 00 00       	call   220660 <digitToChar>
  220320:	48 8b 95 08 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1f8]
  220327:	88 02                	mov    BYTE PTR [rdx],al
        a /= base;
  220329:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  220330:	0f b6 b5 4f ff ff ff 	movzx  esi,BYTE PTR [rbp-0xb1]
  220337:	41 89 f0             	mov    r8d,esi
  22033a:	49 83 f8 00          	cmp    r8,0x0
  22033e:	48 89 85 f8 fd ff ff 	mov    QWORD PTR [rbp-0x208],rax
  220345:	4c 89 85 f0 fd ff ff 	mov    QWORD PTR [rbp-0x210],r8
  22034c:	74 41                	je     22038f <formatIntUnsigned.103+0x3af>
  22034e:	eb 10                	jmp    220360 <formatIntUnsigned.103+0x380>
  220350:	48 8d 3d 51 50 00 00 	lea    rdi,[rip+0x5051]        # 2253a8 <__unnamed_8>
  220357:	31 c0                	xor    eax,eax
  220359:	89 c6                	mov    esi,eax
        buf[index] = digitToChar(@intCast(u8, digit), uppercase);
  22035b:	e8 60 2d fe ff       	call   2030c0 <panic>
        a /= base;
  220360:	48 8b 85 f8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x208]
  220367:	31 c9                	xor    ecx,ecx
  220369:	89 ca                	mov    edx,ecx
  22036b:	48 8b b5 f0 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x210]
  220372:	48 f7 f6             	div    rsi
  220375:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
        if (a == 0) break;
  22037c:	48 83 bd f0 fe ff ff 	cmp    QWORD PTR [rbp-0x110],0x0
  220383:	00 
  220384:	0f 84 07 fd ff ff    	je     220091 <formatIntUnsigned.103+0xb1>
  22038a:	e9 04 fd ff ff       	jmp    220093 <formatIntUnsigned.103+0xb3>
  22038f:	48 8d 3d e2 51 00 00 	lea    rdi,[rip+0x51e2]        # 225578 <__unnamed_73>
  220396:	31 c0                	xor    eax,eax
  220398:	89 c6                	mov    esi,eax
        a /= base;
  22039a:	e8 21 2d fe ff       	call   2030c0 <panic>
  22039f:	48 8d 3d 5a 4f 00 00 	lea    rdi,[rip+0x4f5a]        # 225300 <__unnamed_4>
  2203a6:	31 c0                	xor    eax,eax
  2203a8:	89 c6                	mov    esi,eax
    const digits_buf = buf[index..];
  2203aa:	e8 11 2d fe ff       	call   2030c0 <panic>
  2203af:	b8 40 00 00 00       	mov    eax,0x40
  2203b4:	89 c1                	mov    ecx,eax
  2203b6:	48 8d 95 f8 fe ff ff 	lea    rdx,[rbp-0x108]
  2203bd:	48 8b b5 80 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x180]
  2203c4:	48 01 f2             	add    rdx,rsi
  2203c7:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  2203cb:	48 29 f1             	sub    rcx,rsi
  2203ce:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  2203d2:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  2203d6:	48 89 8d d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rcx
  2203dd:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2203e1:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
    const padding = if (width > digits_buf.len) (width - digits_buf.len) else 0;
  2203e8:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  2203ef:	48 3b 8d d8 fe ff ff 	cmp    rcx,QWORD PTR [rbp-0x128]
  2203f6:	0f 87 b6 fc ff ff    	ja     2200b2 <formatIntUnsigned.103+0xd2>
  2203fc:	e9 da fc ff ff       	jmp    2200db <formatIntUnsigned.103+0xfb>
  220401:	48 8d 3d 10 4f 00 00 	lea    rdi,[rip+0x4f10]        # 225318 <__unnamed_5>
  220408:	31 c0                	xor    eax,eax
  22040a:	89 c6                	mov    esi,eax
  22040c:	e8 af 2c fe ff       	call   2030c0 <panic>
  220411:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
  220418:	48 89 85 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rax
  22041f:	e9 c4 fc ff ff       	jmp    2200e8 <formatIntUnsigned.103+0x108>
  220424:	48 8d 3d ed 4e 00 00 	lea    rdi,[rip+0x4eed]        # 225318 <__unnamed_5>
  22042b:	31 c0                	xor    eax,eax
  22042d:	89 c6                	mov    esi,eax
        var leftover_padding = padding - index;
  22042f:	e8 8c 2c fe ff       	call   2030c0 <panic>
  220434:	48 8b 85 60 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a0]
  22043b:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
        while (true) {
  220442:	e9 f3 fc ff ff       	jmp    22013a <formatIntUnsigned.103+0x15a>
  220447:	48 8d 3d ca 4e 00 00 	lea    rdi,[rip+0x4eca]        # 225318 <__unnamed_5>
  22044e:	31 c0                	xor    eax,eax
  220450:	89 c6                	mov    esi,eax
            leftover_padding -= 1;
  220452:	e8 69 2c fe ff       	call   2030c0 <panic>
  220457:	48 8b 85 50 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b0]
  22045e:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
            if (leftover_padding == 0) break;
  220465:	48 83 bd b8 fe ff ff 	cmp    QWORD PTR [rbp-0x148],0x0
  22046c:	00 
  22046d:	0f 84 3f fd ff ff    	je     2201b2 <formatIntUnsigned.103+0x1d2>
  220473:	e9 3c fd ff ff       	jmp    2201b4 <formatIntUnsigned.103+0x1d4>
  220478:	48 8d 3d 81 4e 00 00 	lea    rdi,[rip+0x4e81]        # 225300 <__unnamed_4>
  22047f:	31 c0                	xor    eax,eax
  220481:	89 c6                	mov    esi,eax
        mem.set(u8, buf[0..index], '0');
  220483:	e8 38 2c fe ff       	call   2030c0 <panic>
  220488:	48 8b 85 40 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c0]
  22048f:	48 83 f8 40          	cmp    rax,0x40
  220493:	76 10                	jbe    2204a5 <formatIntUnsigned.103+0x4c5>
  220495:	48 8d 3d 64 4e 00 00 	lea    rdi,[rip+0x4e64]        # 225300 <__unnamed_4>
  22049c:	31 c0                	xor    eax,eax
  22049e:	89 c6                	mov    esi,eax
  2204a0:	e8 1b 2c fe ff       	call   2030c0 <panic>
  2204a5:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  2204a9:	be 30 00 00 00       	mov    esi,0x30
  2204ae:	48 8d 85 f8 fe ff ff 	lea    rax,[rbp-0x108]
  2204b5:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  2204b9:	48 8b 85 40 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c0]
  2204c0:	48 83 e8 00          	sub    rax,0x0
  2204c4:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  2204c8:	e8 93 02 00 00       	call   220760 <set>
  2204cd:	48 8d 95 78 ff ff ff 	lea    rdx,[rbp-0x88]
  2204d4:	48 8d 85 f8 fe ff ff 	lea    rax,[rbp-0x108]
        return output(context, buf);
  2204db:	48 8b 7d 10          	mov    rdi,QWORD PTR [rbp+0x10]
  2204df:	48 8b b5 38 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc8]
  2204e6:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  2204ed:	48 c7 45 80 40 00 00 	mov    QWORD PTR [rbp-0x80],0x40
  2204f4:	00 
  2204f5:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
  2204fc:	48 89 bd e8 fd ff ff 	mov    QWORD PTR [rbp-0x218],rdi
  220503:	48 89 c7             	mov    rdi,rax
  220506:	48 8b 8d e8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x218]
  22050d:	ff d1                	call   rcx
  22050f:	66 83 f8 00          	cmp    ax,0x0
  220513:	66 89 85 3e fe ff ff 	mov    WORD PTR [rbp-0x1c2],ax
  22051a:	0f 85 b6 fc ff ff    	jne    2201d6 <formatIntUnsigned.103+0x1f6>
  220520:	e9 bf fc ff ff       	jmp    2201e4 <formatIntUnsigned.103+0x204>
  220525:	48 8d 3d ec 4d 00 00 	lea    rdi,[rip+0x4dec]        # 225318 <__unnamed_5>
  22052c:	31 c0                	xor    eax,eax
  22052e:	89 c6                	mov    esi,eax
        const padded_buf = buf[index - padding ..];
  220530:	e8 8b 2b fe ff       	call   2030c0 <panic>
  220535:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  22053c:	48 83 f8 40          	cmp    rax,0x40
  220540:	76 10                	jbe    220552 <formatIntUnsigned.103+0x572>
  220542:	48 8d 3d b7 4d 00 00 	lea    rdi,[rip+0x4db7]        # 225300 <__unnamed_4>
  220549:	31 c0                	xor    eax,eax
  22054b:	89 c6                	mov    esi,eax
  22054d:	e8 6e 2b fe ff       	call   2030c0 <panic>
  220552:	31 c0                	xor    eax,eax
  220554:	89 c1                	mov    ecx,eax
  220556:	b8 40 00 00 00       	mov    eax,0x40
  22055b:	89 c2                	mov    edx,eax
  22055d:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  220564:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
  22056b:	48 01 fe             	add    rsi,rdi
  22056e:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
  220575:	48 29 fa             	sub    rdx,rdi
  220578:	48 89 95 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdx
  22057f:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  220586:	48 89 95 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rdx
  22058d:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  220594:	48 89 95 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rdx
        mem.set(u8, padded_buf[0..padding], '0');
  22059b:	48 8b 95 c8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x138]
  2205a2:	48 8b b5 b0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x150]
  2205a9:	48 39 d1             	cmp    rcx,rdx
  2205ac:	48 89 b5 e0 fd ff ff 	mov    QWORD PTR [rbp-0x220],rsi
  2205b3:	48 89 95 d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rdx
  2205ba:	76 10                	jbe    2205cc <formatIntUnsigned.103+0x5ec>
  2205bc:	48 8d 3d 3d 4d 00 00 	lea    rdi,[rip+0x4d3d]        # 225300 <__unnamed_4>
  2205c3:	31 c0                	xor    eax,eax
  2205c5:	89 c6                	mov    esi,eax
  2205c7:	e8 f4 2a fe ff       	call   2030c0 <panic>
  2205cc:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
  2205d3:	48 8b 8d e0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x220]
  2205da:	48 39 c8             	cmp    rax,rcx
  2205dd:	76 10                	jbe    2205ef <formatIntUnsigned.103+0x60f>
  2205df:	48 8d 3d 1a 4d 00 00 	lea    rdi,[rip+0x4d1a]        # 225300 <__unnamed_4>
  2205e6:	31 c0                	xor    eax,eax
  2205e8:	89 c6                	mov    esi,eax
  2205ea:	e8 d1 2a fe ff       	call   2030c0 <panic>
  2205ef:	48 8d bd 58 ff ff ff 	lea    rdi,[rbp-0xa8]
  2205f6:	be 30 00 00 00       	mov    esi,0x30
  2205fb:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
  220602:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  220609:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
  220610:	48 83 e8 00          	sub    rax,0x0
  220614:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  22061b:	e8 40 01 00 00       	call   220760 <set>
  220620:	48 8d 95 a8 fe ff ff 	lea    rdx,[rbp-0x158]
        return output(context, padded_buf);
  220627:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
  22062b:	48 8b b5 38 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc8]
  220632:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
  220639:	ff d0                	call   rax
  22063b:	66 83 f8 00          	cmp    ax,0x0
  22063f:	66 89 85 2c fe ff ff 	mov    WORD PTR [rbp-0x1d4],ax
  220646:	0f 85 d6 fb ff ff    	jne    220222 <formatIntUnsigned.103+0x242>
  22064c:	e9 df fb ff ff       	jmp    220230 <formatIntUnsigned.103+0x250>
  220651:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  220658:	0f 1f 84 00 00 00 00 
  22065f:	00 

0000000000220660 <digitToChar>:
    if (value >= radix) return error.InvalidCharacter;

    return value;
}

fn digitToChar(digit: u8, uppercase: bool) u8 {
  220660:	55                   	push   rbp
  220661:	48 89 e5             	mov    rbp,rsp
  220664:	48 83 ec 10          	sub    rsp,0x10
  220668:	40 88 f0             	mov    al,sil
  22066b:	40 88 f9             	mov    cl,dil
  22066e:	88 4d ff             	mov    BYTE PTR [rbp-0x1],cl
  220671:	24 01                	and    al,0x1
  220673:	88 45 fe             	mov    BYTE PTR [rbp-0x2],al
    return switch (digit) {
  220676:	8a 45 ff             	mov    al,BYTE PTR [rbp-0x1]
        0...9 => digit + '0',
  220679:	3c 09                	cmp    al,0x9
  22067b:	0f 96 c1             	setbe  cl
  22067e:	80 e1 01             	and    cl,0x1
  220681:	f6 c1 01             	test   cl,0x1
  220684:	88 45 fd             	mov    BYTE PTR [rbp-0x3],al
  220687:	75 02                	jne    22068b <digitToChar+0x2b>
  220689:	eb 12                	jmp    22069d <digitToChar+0x3d>
  22068b:	8a 45 ff             	mov    al,BYTE PTR [rbp-0x1]
  22068e:	04 30                	add    al,0x30
  220690:	0f 92 c1             	setb   cl
  220693:	f6 c1 01             	test   cl,0x1
  220696:	88 45 fc             	mov    BYTE PTR [rbp-0x4],al
  220699:	75 61                	jne    2206fc <digitToChar+0x9c>
  22069b:	eb 6f                	jmp    22070c <digitToChar+0xac>
        10...35 => digit + ((if (uppercase) u8('A') else u8('a')) - 10),
  22069d:	8a 45 fd             	mov    al,BYTE PTR [rbp-0x3]
  2206a0:	3c 0a                	cmp    al,0xa
  2206a2:	0f 93 c1             	setae  cl
  2206a5:	3c 23                	cmp    al,0x23
  2206a7:	0f 96 c2             	setbe  dl
  2206aa:	20 d1                	and    cl,dl
  2206ac:	f6 c1 01             	test   cl,0x1
  2206af:	75 02                	jne    2206b3 <digitToChar+0x53>
  2206b1:	eb 2e                	jmp    2206e1 <digitToChar+0x81>
  2206b3:	8a 45 ff             	mov    al,BYTE PTR [rbp-0x1]
  2206b6:	f6 45 fe 01          	test   BYTE PTR [rbp-0x2],0x1
  2206ba:	88 45 fb             	mov    BYTE PTR [rbp-0x5],al
  2206bd:	75 02                	jne    2206c1 <digitToChar+0x61>
  2206bf:	eb 07                	jmp    2206c8 <digitToChar+0x68>
  2206c1:	b0 41                	mov    al,0x41
  2206c3:	88 45 fa             	mov    BYTE PTR [rbp-0x6],al
  2206c6:	eb 07                	jmp    2206cf <digitToChar+0x6f>
  2206c8:	b0 61                	mov    al,0x61
  2206ca:	88 45 fa             	mov    BYTE PTR [rbp-0x6],al
  2206cd:	eb 00                	jmp    2206cf <digitToChar+0x6f>
  2206cf:	8a 45 fa             	mov    al,BYTE PTR [rbp-0x6]
  2206d2:	2c 0a                	sub    al,0xa
  2206d4:	0f 92 c1             	setb   cl
  2206d7:	f6 c1 01             	test   cl,0x1
  2206da:	88 45 f9             	mov    BYTE PTR [rbp-0x7],al
  2206dd:	75 35                	jne    220714 <digitToChar+0xb4>
  2206df:	eb 43                	jmp    220724 <digitToChar+0xc4>
    return switch (digit) {
  2206e1:	eb 00                	jmp    2206e3 <digitToChar+0x83>
  2206e3:	48 8d 3d d6 4c 00 00 	lea    rdi,[rip+0x4cd6]        # 2253c0 <__unnamed_7>
  2206ea:	31 c0                	xor    eax,eax
  2206ec:	89 c6                	mov    esi,eax
        else => unreachable,
  2206ee:	e8 cd 29 fe ff       	call   2030c0 <panic>
    return switch (digit) {
  2206f3:	8a 45 f8             	mov    al,BYTE PTR [rbp-0x8]
  2206f6:	48 83 c4 10          	add    rsp,0x10
  2206fa:	5d                   	pop    rbp
  2206fb:	c3                   	ret    
  2206fc:	48 8d 3d 15 4c 00 00 	lea    rdi,[rip+0x4c15]        # 225318 <__unnamed_5>
  220703:	31 c0                	xor    eax,eax
  220705:	89 c6                	mov    esi,eax
        0...9 => digit + '0',
  220707:	e8 b4 29 fe ff       	call   2030c0 <panic>
    return switch (digit) {
  22070c:	8a 45 fc             	mov    al,BYTE PTR [rbp-0x4]
  22070f:	88 45 f8             	mov    BYTE PTR [rbp-0x8],al
  220712:	eb df                	jmp    2206f3 <digitToChar+0x93>
  220714:	48 8d 3d fd 4b 00 00 	lea    rdi,[rip+0x4bfd]        # 225318 <__unnamed_5>
  22071b:	31 c0                	xor    eax,eax
  22071d:	89 c6                	mov    esi,eax
        10...35 => digit + ((if (uppercase) u8('A') else u8('a')) - 10),
  22071f:	e8 9c 29 fe ff       	call   2030c0 <panic>
  220724:	8a 45 fb             	mov    al,BYTE PTR [rbp-0x5]
  220727:	8a 4d f9             	mov    cl,BYTE PTR [rbp-0x7]
  22072a:	00 c8                	add    al,cl
  22072c:	0f 92 c2             	setb   dl
  22072f:	f6 c2 01             	test   dl,0x1
  220732:	88 45 f7             	mov    BYTE PTR [rbp-0x9],al
  220735:	75 02                	jne    220739 <digitToChar+0xd9>
  220737:	eb 10                	jmp    220749 <digitToChar+0xe9>
  220739:	48 8d 3d d8 4b 00 00 	lea    rdi,[rip+0x4bd8]        # 225318 <__unnamed_5>
  220740:	31 c0                	xor    eax,eax
  220742:	89 c6                	mov    esi,eax
  220744:	e8 77 29 fe ff       	call   2030c0 <panic>
    return switch (digit) {
  220749:	8a 45 f7             	mov    al,BYTE PTR [rbp-0x9]
  22074c:	88 45 f8             	mov    BYTE PTR [rbp-0x8],al
  22074f:	eb a2                	jmp    2206f3 <digitToChar+0x93>
  220751:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  220758:	0f 1f 84 00 00 00 00 
  22075f:	00 

0000000000220760 <set>:
pub fn set(comptime T: type, dest: []T, value: T) void {
  220760:	55                   	push   rbp
  220761:	48 89 e5             	mov    rbp,rsp
  220764:	48 83 ec 30          	sub    rsp,0x30
  220768:	40 88 f0             	mov    al,sil
  22076b:	be aa 00 00 00       	mov    esi,0xaa
  220770:	b9 08 00 00 00       	mov    ecx,0x8
  220775:	89 ca                	mov    edx,ecx
  220777:	4c 8d 45 f0          	lea    r8,[rbp-0x10]
  22077b:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
    for (dest) |*d|
  22077e:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  220782:	4c 89 c7             	mov    rdi,r8
  220785:	e8 26 15 00 00       	call   221cb0 <memset>
  22078a:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
  220791:	00 
  220792:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  220796:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
  22079a:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  22079e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2207a2:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  2207a6:	48 39 c8             	cmp    rax,rcx
  2207a9:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  2207ad:	73 26                	jae    2207d5 <set+0x75>
  2207af:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2207b3:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  2207b7:	48 03 01             	add    rax,QWORD PTR [rcx]
  2207ba:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
        d.* = value;
  2207be:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2207c2:	8a 55 ff             	mov    dl,BYTE PTR [rbp-0x1]
  2207c5:	88 10                	mov    BYTE PTR [rax],dl
    for (dest) |*d|
  2207c7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2207cb:	48 83 c0 01          	add    rax,0x1
  2207cf:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  2207d3:	eb c9                	jmp    22079e <set+0x3e>
pub fn set(comptime T: type, dest: []T, value: T) void {
  2207d5:	48 83 c4 30          	add    rsp,0x30
  2207d9:	5d                   	pop    rbp
  2207da:	c3                   	ret    
  2207db:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000002207e0 <_start>:
}

nakedcc fn _start() noreturn {
    switch (builtin.arch) {
        builtin.Arch.x86_64 => {
            argc_ptr = asm ("lea (%%rsp), %[argc]"
  2207e0:	48 8d 04 24          	lea    rax,[rsp]
  2207e4:	48 89 05 a5 38 00 00 	mov    QWORD PTR [rip+0x38a5],rax        # 224090 <argc_ptr>
        },
        else => @compileError("unsupported arch"),
    }
    // If LLVM inlines stack variables into _start, they will overwrite
    // the command line argument data.
    @noInlineCall(posixCallMainAndExit);
  2207eb:	e8 00 00 00 00       	call   2207f0 <posixCallMainAndExit>

00000000002207f0 <posixCallMainAndExit>:

    std.os.windows.ExitProcess(callMain());
}

// TODO https://github.com/ziglang/zig/issues/265
fn posixCallMainAndExit() noreturn {
  2207f0:	55                   	push   rbp
  2207f1:	48 89 e5             	mov    rbp,rsp
    const argc = argc_ptr[0];
  2207f4:	48 81 ec c0 00 00 00 	sub    rsp,0xc0
  2207fb:	48 8b 05 8e 38 00 00 	mov    rax,QWORD PTR [rip+0x388e]        # 224090 <argc_ptr>
  220802:	48 8b 00             	mov    rax,QWORD PTR [rax]
  220805:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    const argv = @ptrCast([*][*]u8, argc_ptr + 1);
  220809:	48 8b 05 80 38 00 00 	mov    rax,QWORD PTR [rip+0x3880]        # 224090 <argc_ptr>
  220810:	48 83 c0 08          	add    rax,0x8
  220814:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax

    const envp_optional = @ptrCast([*]?[*]u8, argv + argc + 1);
  220818:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  22081c:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  220820:	48 c1 e1 03          	shl    rcx,0x3
  220824:	48 01 c8             	add    rax,rcx
  220827:	48 83 c0 08          	add    rax,0x8
  22082b:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
    var envp_count: usize = 0;
  22082f:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
  220836:	00 
    while (envp_optional[envp_count]) |_| : (envp_count += 1) {}
  220837:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  22083b:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  22083f:	48 89 c2             	mov    rdx,rax
  220842:	48 c1 e2 03          	shl    rdx,0x3
  220846:	48 89 ce             	mov    rsi,rcx
  220849:	48 01 d6             	add    rsi,rdx
  22084c:	48 83 3c c1 00       	cmp    QWORD PTR [rcx+rax*8],0x0
  220851:	48 89 75 98          	mov    QWORD PTR [rbp-0x68],rsi
  220855:	74 28                	je     22087f <posixCallMainAndExit+0x8f>
  220857:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  22085b:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22085e:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
  220862:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  220866:	48 83 c1 01          	add    rcx,0x1
  22086a:	0f 92 c2             	setb   dl
  22086d:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
  220871:	88 55 8f             	mov    BYTE PTR [rbp-0x71],dl
  220874:	0f 82 c6 00 00 00    	jb     220940 <posixCallMainAndExit+0x150>
  22087a:	e9 d1 00 00 00       	jmp    220950 <posixCallMainAndExit+0x160>
  22087f:	31 c0                	xor    eax,eax
  220881:	89 c1                	mov    ecx,eax
    const envp = @ptrCast([*][*]u8, envp_optional)[0..envp_count];
  220883:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  220887:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  22088b:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  22088f:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  220893:	48 39 d1             	cmp    rcx,rdx
  220896:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
  22089a:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
  2208a1:	0f 86 c6 00 00 00    	jbe    22096d <posixCallMainAndExit+0x17d>
  2208a7:	e9 b1 00 00 00       	jmp    22095d <posixCallMainAndExit+0x16d>
    if (builtin.os == builtin.Os.linux) {
        const auxv = @ptrCast([*]usize, envp.ptr + envp_count + 1);
        var i: usize = 0;
        while (auxv[i] != 0) : (i += 2) {
  2208ac:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2208b0:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  2208b4:	48 83 3c c1 00       	cmp    QWORD PTR [rcx+rax*8],0x0
  2208b9:	74 56                	je     220911 <posixCallMainAndExit+0x121>
            if (auxv[i] < std.os.linux_aux_raw.len) std.os.linux_aux_raw[auxv[i]] = auxv[i + 1];
  2208bb:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2208bf:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  2208c3:	48 83 3c c1 26       	cmp    QWORD PTR [rcx+rax*8],0x26
  2208c8:	73 22                	jae    2208ec <posixCallMainAndExit+0xfc>
  2208ca:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2208ce:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  2208d2:	48 8b 04 c1          	mov    rax,QWORD PTR [rcx+rax*8]
  2208d6:	48 83 f8 26          	cmp    rax,0x26
  2208da:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  2208e1:	0f 82 e1 00 00 00    	jb     2209c8 <posixCallMainAndExit+0x1d8>
  2208e7:	e9 cc 00 00 00       	jmp    2209b8 <posixCallMainAndExit+0x1c8>
  2208ec:	eb 00                	jmp    2208ee <posixCallMainAndExit+0xfe>
        while (auxv[i] != 0) : (i += 2) {
  2208ee:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2208f2:	48 83 c0 02          	add    rax,0x2
  2208f6:	0f 92 c1             	setb   cl
  2208f9:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  220900:	88 8d 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],cl
  220906:	0f 82 22 01 00 00    	jb     220a2e <posixCallMainAndExit+0x23e>
  22090c:	e9 2d 01 00 00       	jmp    220a3e <posixCallMainAndExit+0x24e>
        }
        std.debug.assert(std.os.linux_aux_raw[std.elf.AT_PAGESZ] == std.os.page_size);
  220911:	48 81 3d 4c 57 00 00 	cmp    QWORD PTR [rip+0x574c],0x1000        # 226068 <linux_aux_raw+0x30>
  220918:	00 10 00 00 
  22091c:	0f 94 c0             	sete   al
  22091f:	0f b6 f8             	movzx  edi,al
  220922:	e8 d9 26 fe ff       	call   203000 <assert>
  220927:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
    }

    std.os.posix.exit(callMainWithArgs(argc, argv, envp));
  22092b:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  22092f:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  220933:	e8 18 01 00 00       	call   220a50 <callMainWithArgs>
  220938:	0f b6 f8             	movzx  edi,al
  22093b:	e8 a0 01 00 00       	call   220ae0 <exit>
  220940:	48 8d 3d d1 49 00 00 	lea    rdi,[rip+0x49d1]        # 225318 <__unnamed_5>
  220947:	31 c0                	xor    eax,eax
  220949:	89 c6                	mov    esi,eax
    while (envp_optional[envp_count]) |_| : (envp_count += 1) {}
  22094b:	e8 70 27 fe ff       	call   2030c0 <panic>
  220950:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  220954:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  220958:	e9 da fe ff ff       	jmp    220837 <posixCallMainAndExit+0x47>
  22095d:	48 8d 3d 9c 49 00 00 	lea    rdi,[rip+0x499c]        # 225300 <__unnamed_4>
  220964:	31 c0                	xor    eax,eax
  220966:	89 c6                	mov    esi,eax
    const envp = @ptrCast([*][*]u8, envp_optional)[0..envp_count];
  220968:	e8 53 27 fe ff       	call   2030c0 <panic>
  22096d:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  220971:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  220975:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  22097c:	48 83 e9 00          	sub    rcx,0x0
  220980:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  220984:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  220988:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
  22098c:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  220990:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
        const auxv = @ptrCast([*]usize, envp.ptr + envp_count + 1);
  220994:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  220998:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  22099c:	48 c1 e2 03          	shl    rdx,0x3
  2209a0:	48 01 d1             	add    rcx,rdx
  2209a3:	48 83 c1 08          	add    rcx,0x8
  2209a7:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
        var i: usize = 0;
  2209ab:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
  2209b2:	00 
        while (auxv[i] != 0) : (i += 2) {
  2209b3:	e9 f4 fe ff ff       	jmp    2208ac <posixCallMainAndExit+0xbc>
  2209b8:	48 8d 3d 41 49 00 00 	lea    rdi,[rip+0x4941]        # 225300 <__unnamed_4>
  2209bf:	31 c0                	xor    eax,eax
  2209c1:	89 c6                	mov    esi,eax
            if (auxv[i] < std.os.linux_aux_raw.len) std.os.linux_aux_raw[auxv[i]] = auxv[i + 1];
  2209c3:	e8 f8 26 fe ff       	call   2030c0 <panic>
  2209c8:	48 8d 05 69 56 00 00 	lea    rax,[rip+0x5669]        # 226038 <linux_aux_raw>
  2209cf:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
  2209d6:	48 c1 e1 03          	shl    rcx,0x3
  2209da:	48 01 c8             	add    rax,rcx
  2209dd:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  2209e1:	48 83 c1 01          	add    rcx,0x1
  2209e5:	0f 92 c2             	setb   dl
  2209e8:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  2209ef:	48 89 8d 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rcx
  2209f6:	88 95 4f ff ff ff    	mov    BYTE PTR [rbp-0xb1],dl
  2209fc:	72 02                	jb     220a00 <posixCallMainAndExit+0x210>
  2209fe:	eb 10                	jmp    220a10 <posixCallMainAndExit+0x220>
  220a00:	48 8d 3d 11 49 00 00 	lea    rdi,[rip+0x4911]        # 225318 <__unnamed_5>
  220a07:	31 c0                	xor    eax,eax
  220a09:	89 c6                	mov    esi,eax
  220a0b:	e8 b0 26 fe ff       	call   2030c0 <panic>
  220a10:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  220a14:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
  220a1b:	48 8b 04 c8          	mov    rax,QWORD PTR [rax+rcx*8]
  220a1f:	48 8b 95 58 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa8]
  220a26:	48 89 02             	mov    QWORD PTR [rdx],rax
  220a29:	e9 c0 fe ff ff       	jmp    2208ee <posixCallMainAndExit+0xfe>
  220a2e:	48 8d 3d e3 48 00 00 	lea    rdi,[rip+0x48e3]        # 225318 <__unnamed_5>
  220a35:	31 c0                	xor    eax,eax
  220a37:	89 c6                	mov    esi,eax
        while (auxv[i] != 0) : (i += 2) {
  220a39:	e8 82 26 fe ff       	call   2030c0 <panic>
  220a3e:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  220a45:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  220a49:	e9 5e fe ff ff       	jmp    2208ac <posixCallMainAndExit+0xbc>
  220a4e:	66 90                	xchg   ax,ax

0000000000220a50 <callMainWithArgs>:
}

fn callMainWithArgs(argc: usize, argv: [*][*]u8, envp: [][*]u8) u8 {
  220a50:	55                   	push   rbp
  220a51:	48 89 e5             	mov    rbp,rsp
  220a54:	48 83 ec 40          	sub    rsp,0x40
  220a58:	31 c0                	xor    eax,eax
  220a5a:	89 c1                	mov    ecx,eax
  220a5c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  220a60:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    std.os.ArgIteratorPosix.raw = argv[0..argc];
  220a64:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  220a68:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  220a6c:	48 39 f1             	cmp    rcx,rsi
  220a6f:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  220a73:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  220a77:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  220a7b:	76 10                	jbe    220a8d <callMainWithArgs+0x3d>
  220a7d:	48 8d 3d 7c 48 00 00 	lea    rdi,[rip+0x487c]        # 225300 <__unnamed_4>
  220a84:	31 c0                	xor    eax,eax
  220a86:	89 c6                	mov    esi,eax
  220a88:	e8 33 26 fe ff       	call   2030c0 <panic>
  220a8d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  220a91:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  220a95:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  220a99:	48 83 e9 00          	sub    rcx,0x0
  220a9d:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  220aa1:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  220aa5:	48 89 0d ec 35 00 00 	mov    QWORD PTR [rip+0x35ec],rcx        # 224098 <raw>
  220aac:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  220ab0:	48 89 0d e9 35 00 00 	mov    QWORD PTR [rip+0x35e9],rcx        # 2240a0 <raw+0x8>
    std.os.posix_environ_raw = envp;
  220ab7:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  220abb:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
  220abe:	48 89 15 bb 35 00 00 	mov    QWORD PTR [rip+0x35bb],rdx        # 224080 <posix_environ_raw>
  220ac5:	48 8b 51 08          	mov    rdx,QWORD PTR [rcx+0x8]
  220ac9:	48 89 15 b8 35 00 00 	mov    QWORD PTR [rip+0x35b8],rdx        # 224088 <posix_environ_raw+0x8>
    return callMain();
  220ad0:	e8 4b 00 00 00       	call   220b20 <callMain>
  220ad5:	48 83 c4 40          	add    rsp,0x40
  220ad9:	5d                   	pop    rbp
  220ada:	c3                   	ret    
  220adb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000220ae0 <exit>:
pub fn exit(status: i32) noreturn {
  220ae0:	55                   	push   rbp
  220ae1:	48 89 e5             	mov    rbp,rsp
  220ae4:	48 83 ec 10          	sub    rsp,0x10
  220ae8:	b8 3c 00 00 00       	mov    eax,0x3c
  220aed:	89 c1                	mov    ecx,eax
  220aef:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    _ = syscall1(SYS_exit, @bitCast(usize, isize(status)));
  220af2:	48 63 75 fc          	movsxd rsi,DWORD PTR [rbp-0x4]
  220af6:	48 89 cf             	mov    rdi,rcx
  220af9:	e8 02 e8 ff ff       	call   21f300 <syscall1>
  220afe:	48 8d 3d bb 48 00 00 	lea    rdi,[rip+0x48bb]        # 2253c0 <__unnamed_7>
  220b05:	31 d2                	xor    edx,edx
  220b07:	89 d6                	mov    esi,edx
    unreachable;
  220b09:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  220b0d:	e8 ae 25 fe ff       	call   2030c0 <panic>
  220b12:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  220b19:	1f 84 00 00 00 00 00 

0000000000220b20 <callMain>:
    while (c_envp[env_count] != null) : (env_count += 1) {}
    const envp = @ptrCast([*][*]u8, c_envp)[0..env_count];
    return callMainWithArgs(@intCast(usize, c_argc), c_argv, envp);
}

fn callMain() u8 {
  220b20:	55                   	push   rbp
  220b21:	48 89 e5             	mov    rbp,rsp
  220b24:	48 81 ec 30 01 00 00 	sub    rsp,0x130
  220b2b:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  220b32:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
  220b39:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  220b40:	00 00 00 00 
  220b44:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
  220b4b:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  220b52:	1e 00 00 00 
                @compileError("expected return type of main to be 'u8', 'noreturn', 'void', or '!void'");
            }
            return root.main();
        },
        builtin.TypeId.ErrorUnion => {
            root.main() catch |err| {
  220b56:	e8 d5 00 00 00       	call   220c30 <main>
  220b5b:	66 89 85 f6 fe ff ff 	mov    WORD PTR [rbp-0x10a],ax
  220b62:	66 83 bd f6 fe ff ff 	cmp    WORD PTR [rbp-0x10a],0x0
  220b69:	00 
  220b6a:	74 51                	je     220bbd <callMain+0x9d>
  220b6c:	66 8b 85 f6 fe ff ff 	mov    ax,WORD PTR [rbp-0x10a]
  220b73:	66 89 85 e6 fe ff ff 	mov    WORD PTR [rbp-0x11a],ax
                std.debug.warn("error: {}\n", @errorName(err));
  220b7a:	66 8b 85 e6 fe ff ff 	mov    ax,WORD PTR [rbp-0x11a]
  220b81:	66 83 f8 00          	cmp    ax,0x0
  220b85:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  220b8c:	0f 85 89 00 00 00    	jne    220c1b <callMain+0xfb>
  220b92:	eb 38                	jmp    220bcc <callMain+0xac>
                if (builtin.os != builtin.Os.zen) {
                    if (@errorReturnTrace()) |trace| {
  220b94:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  220b9b:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
                        std.debug.dumpStackTrace(trace);
  220ba2:	48 8b bd d8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x128]
  220ba9:	e8 72 2a fe ff       	call   203620 <dumpStackTrace>
                    if (@errorReturnTrace()) |trace| {
  220bae:	eb 02                	jmp    220bb2 <callMain+0x92>
  220bb0:	eb 00                	jmp    220bb2 <callMain+0x92>
  220bb2:	b0 01                	mov    al,0x1
                    }
                }
                return 1;
  220bb4:	48 81 c4 30 01 00 00 	add    rsp,0x130
  220bbb:	5d                   	pop    rbp
  220bbc:	c3                   	ret    
  220bbd:	31 c0                	xor    eax,eax
  220bbf:	88 c1                	mov    cl,al
            };
            return 0;
  220bc1:	88 c8                	mov    al,cl
  220bc3:	48 81 c4 30 01 00 00 	add    rsp,0x130
  220bca:	5d                   	pop    rbp
  220bcb:	c3                   	ret    
  220bcc:	48 8d 3d 2d 47 00 00 	lea    rdi,[rip+0x472d]        # 225300 <__unnamed_4>
  220bd3:	31 c0                	xor    eax,eax
  220bd5:	89 c6                	mov    esi,eax
                std.debug.warn("error: {}\n", @errorName(err));
  220bd7:	e8 e4 24 fe ff       	call   2030c0 <panic>
  220bdc:	48 8d 05 1d 44 00 00 	lea    rax,[rip+0x441d]        # 225000 <raw+0xf68>
  220be3:	66 8b 8d d6 fe ff ff 	mov    cx,WORD PTR [rbp-0x12a]
  220bea:	48 0f bf d1          	movsx  rdx,cx
  220bee:	48 c1 e2 04          	shl    rdx,0x4
  220bf2:	48 01 d0             	add    rax,rdx
  220bf5:	48 89 c7             	mov    rdi,rax
  220bf8:	e8 13 02 00 00       	call   220e10 <warn.104>
  220bfd:	48 8d 85 f8 fe ff ff 	lea    rax,[rbp-0x108]
                    if (@errorReturnTrace()) |trace| {
  220c04:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  220c0b:	48 83 bd e8 fe ff ff 	cmp    QWORD PTR [rbp-0x118],0x0
  220c12:	00 
  220c13:	0f 85 7b ff ff ff    	jne    220b94 <callMain+0x74>
  220c19:	eb 95                	jmp    220bb0 <callMain+0x90>
                std.debug.warn("error: {}\n", @errorName(err));
  220c1b:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [rbp-0x12a]
  220c22:	66 83 f8 27          	cmp    ax,0x27
  220c26:	72 b4                	jb     220bdc <callMain+0xbc>
  220c28:	eb a2                	jmp    220bcc <callMain+0xac>
  220c2a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000220c30 <main>:
const io = std.io;
const builtin = @import("builtin");
const test_fn_list = builtin.__zig_test_fn_slice;
const warn = std.debug.warn;

pub fn main() !void {
  220c30:	55                   	push   rbp
  220c31:	48 89 e5             	mov    rbp,rsp
    var ok_count: usize = 0;
  220c34:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  220c3b:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  220c42:	00 
    var skip_count: usize = 0;
  220c43:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
  220c4a:	00 
    for (test_fn_list) |test_fn, i| {
  220c4b:	48 8b 05 06 16 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe1606]        # 202258 <__unnamed_191>
  220c52:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  220c56:	48 8b 05 03 16 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe1603]        # 202260 <__unnamed_191+0x8>
  220c5d:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  220c61:	48 8b 05 00 16 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe1600]        # 202268 <__unnamed_191+0x10>
  220c68:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  220c6c:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
  220c73:	00 
  220c74:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
  220c78:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  220c7c:	48 83 f8 01          	cmp    rax,0x1
  220c80:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  220c84:	0f 83 c9 00 00 00    	jae    220d53 <main+0x123>
  220c8a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  220c8e:	48 6b c8 18          	imul   rcx,rax,0x18
  220c92:	48 03 0d 2f 46 00 00 	add    rcx,QWORD PTR [rip+0x462f]        # 2252c8 <__zig_test_fn_slice>
  220c99:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
  220c9c:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  220ca0:	48 8b 51 08          	mov    rdx,QWORD PTR [rcx+0x8]
  220ca4:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  220ca8:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
  220cac:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
        warn("Test {}/{} {}...", i + 1, test_fn_list.len, test_fn.name);
  220cb0:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  220cb4:	48 83 c1 01          	add    rcx,0x1
  220cb8:	40 0f 92 c6          	setb   sil
  220cbc:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  220cc0:	40 88 75 a7          	mov    BYTE PTR [rbp-0x59],sil
  220cc4:	0f 82 b5 00 00 00    	jb     220d7f <main+0x14f>
  220cca:	e9 c0 00 00 00       	jmp    220d8f <main+0x15f>

        if (test_fn.func()) |_| {
            ok_count += 1;
  220ccf:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  220cd3:	48 83 c0 01          	add    rax,0x1
  220cd7:	0f 92 c1             	setb   cl
  220cda:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  220cde:	88 4d 97             	mov    BYTE PTR [rbp-0x69],cl
  220ce1:	0f 82 d7 00 00 00    	jb     220dbe <main+0x18e>
  220ce7:	e9 e2 00 00 00       	jmp    220dce <main+0x19e>
        if (test_fn.func()) |_| {
  220cec:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  220cf0:	66 89 45 c6          	mov    WORD PTR [rbp-0x3a],ax
            warn("OK\n");
        } else |err| switch (err) {
  220cf4:	0f b7 4d c6          	movzx  ecx,WORD PTR [rbp-0x3a]
  220cf8:	83 e9 26             	sub    ecx,0x26
  220cfb:	89 4d 90             	mov    DWORD PTR [rbp-0x70],ecx
  220cfe:	74 20                	je     220d20 <main+0xf0>
  220d00:	eb 00                	jmp    220d02 <main+0xd2>
            error.SkipZigTest => {
                skip_count += 1;
                warn("SKIP\n");
            },
            else => return err,
  220d02:	66 8b 45 c6          	mov    ax,WORD PTR [rbp-0x3a]
  220d06:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  220d0a:	66 89 45 8e          	mov    WORD PTR [rbp-0x72],ax
  220d0e:	e8 3d 37 fe ff       	call   204450 <__zig_return_error>
  220d13:	66 8b 45 8e          	mov    ax,WORD PTR [rbp-0x72]
  220d17:	48 81 c4 90 00 00 00 	add    rsp,0x90
  220d1e:	5d                   	pop    rbp
  220d1f:	c3                   	ret    
                skip_count += 1;
  220d20:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  220d24:	48 83 c0 01          	add    rax,0x1
  220d28:	0f 92 c1             	setb   cl
  220d2b:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  220d2f:	88 8d 7f ff ff ff    	mov    BYTE PTR [rbp-0x81],cl
  220d35:	0f 82 a5 00 00 00    	jb     220de0 <main+0x1b0>
  220d3b:	e9 b0 00 00 00       	jmp    220df0 <main+0x1c0>
        if (test_fn.func()) |_| {
  220d40:	eb 00                	jmp    220d42 <main+0x112>
    for (test_fn_list) |test_fn, i| {
  220d42:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  220d46:	48 83 c0 01          	add    rax,0x1
  220d4a:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  220d4e:	e9 25 ff ff ff       	jmp    220c78 <main+0x48>
        }
    }
    if (ok_count == test_fn_list.len) {
  220d53:	48 83 7d f0 01       	cmp    QWORD PTR [rbp-0x10],0x1
  220d58:	75 07                	jne    220d61 <main+0x131>
        warn("All tests passed.\n");
  220d5a:	e8 b1 03 00 00       	call   221110 <warn.108>
    if (ok_count == test_fn_list.len) {
  220d5f:	eb 0d                	jmp    220d6e <main+0x13e>
    } else {
        warn("{} passed; {} skipped.\n", ok_count, skip_count);
  220d61:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  220d65:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  220d69:	e8 52 04 00 00       	call   2211c0 <warn.109>
  220d6e:	31 c0                	xor    eax,eax
  220d70:	66 89 c1             	mov    cx,ax
pub fn main() !void {
  220d73:	66 89 c8             	mov    ax,cx
  220d76:	48 81 c4 90 00 00 00 	add    rsp,0x90
  220d7d:	5d                   	pop    rbp
  220d7e:	c3                   	ret    
  220d7f:	48 8d 3d 92 45 00 00 	lea    rdi,[rip+0x4592]        # 225318 <__unnamed_5>
  220d86:	31 c0                	xor    eax,eax
  220d88:	89 c6                	mov    esi,eax
        warn("Test {}/{} {}...", i + 1, test_fn_list.len, test_fn.name);
  220d8a:	e8 31 23 fe ff       	call   2030c0 <panic>
  220d8f:	b8 01 00 00 00       	mov    eax,0x1
  220d94:	89 c6                	mov    esi,eax
  220d96:	48 8d 55 d0          	lea    rdx,[rbp-0x30]
  220d9a:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  220d9e:	e8 2d 01 00 00       	call   220ed0 <warn.105>
        if (test_fn.func()) |_| {
  220da3:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  220da7:	ff 55 e0             	call   QWORD PTR [rbp-0x20]
  220daa:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  220dae:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  220db3:	0f 85 33 ff ff ff    	jne    220cec <main+0xbc>
  220db9:	e9 11 ff ff ff       	jmp    220ccf <main+0x9f>
  220dbe:	48 8d 3d 53 45 00 00 	lea    rdi,[rip+0x4553]        # 225318 <__unnamed_5>
  220dc5:	31 c0                	xor    eax,eax
  220dc7:	89 c6                	mov    esi,eax
            ok_count += 1;
  220dc9:	e8 f2 22 fe ff       	call   2030c0 <panic>
  220dce:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  220dd2:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
            warn("OK\n");
  220dd6:	e8 d5 01 00 00       	call   220fb0 <warn.106>
        if (test_fn.func()) |_| {
  220ddb:	e9 62 ff ff ff       	jmp    220d42 <main+0x112>
  220de0:	48 8d 3d 31 45 00 00 	lea    rdi,[rip+0x4531]        # 225318 <__unnamed_5>
  220de7:	31 c0                	xor    eax,eax
  220de9:	89 c6                	mov    esi,eax
                skip_count += 1;
  220deb:	e8 d0 22 fe ff       	call   2030c0 <panic>
  220df0:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  220df4:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
                warn("SKIP\n");
  220df8:	e8 63 02 00 00       	call   221060 <warn.107>
        } else |err| switch (err) {
  220dfd:	e9 3e ff ff ff       	jmp    220d40 <main+0x110>
  220e02:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  220e09:	1f 84 00 00 00 00 00 

0000000000220e10 <warn.104>:
pub fn warn(comptime fmt: []const u8, args: ...) void {
  220e10:	55                   	push   rbp
  220e11:	48 89 e5             	mov    rbp,rsp
  220e14:	48 81 ec 50 01 00 00 	sub    rsp,0x150
  220e1b:	48 8d 85 e8 fe ff ff 	lea    rax,[rbp-0x118]
  220e22:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  220e29:	48 8d 8d 10 ff ff ff 	lea    rcx,[rbp-0xf0]
  220e30:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  220e37:	00 00 00 00 
  220e3b:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  220e42:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  220e49:	1e 00 00 00 
    const stderr = getStderrStream() catch return;
  220e4d:	48 89 bd c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rdi
  220e54:	48 89 c7             	mov    rdi,rax
  220e57:	e8 64 26 fe ff       	call   2034c0 <getStderrStream>
  220e5c:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  220e63:	00 
  220e64:	74 09                	je     220e6f <warn.104+0x5f>
  220e66:	48 81 c4 50 01 00 00 	add    rsp,0x150
  220e6d:	5d                   	pop    rbp
  220e6e:	c3                   	ret    
  220e6f:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  220e76:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
  220e7d:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  220e84:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  220e8b:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
    stderr.print(fmt, args) catch return;
  220e92:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  220e99:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  220ea0:	e8 9b 05 00 00       	call   221440 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.115>
  220ea5:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  220eac:	66 83 bd d6 fe ff ff 	cmp    WORD PTR [rbp-0x12a],0x0
  220eb3:	00 
  220eb4:	74 09                	je     220ebf <warn.104+0xaf>
  220eb6:	48 81 c4 50 01 00 00 	add    rsp,0x150
  220ebd:	5d                   	pop    rbp
  220ebe:	c3                   	ret    
pub fn warn(comptime fmt: []const u8, args: ...) void {
  220ebf:	48 81 c4 50 01 00 00 	add    rsp,0x150
  220ec6:	5d                   	pop    rbp
  220ec7:	c3                   	ret    
  220ec8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  220ecf:	00 

0000000000220ed0 <warn.105>:
  220ed0:	55                   	push   rbp
  220ed1:	48 89 e5             	mov    rbp,rsp
  220ed4:	48 81 ec 60 01 00 00 	sub    rsp,0x160
  220edb:	48 8d 85 e8 fe ff ff 	lea    rax,[rbp-0x118]
  220ee2:	48 8d 8d f8 fe ff ff 	lea    rcx,[rbp-0x108]
  220ee9:	4c 8d 85 10 ff ff ff 	lea    r8,[rbp-0xf0]
  220ef0:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  220ef7:	00 00 00 00 
  220efb:	4c 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],r8
  220f02:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  220f09:	1e 00 00 00 
  220f0d:	48 89 bd c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rdi
  220f14:	48 89 b5 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rsi
    const stderr = getStderrStream() catch return;
  220f1b:	48 89 c7             	mov    rdi,rax
  220f1e:	48 89 ce             	mov    rsi,rcx
  220f21:	48 89 95 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rdx
  220f28:	e8 93 25 fe ff       	call   2034c0 <getStderrStream>
  220f2d:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  220f34:	00 
  220f35:	74 09                	je     220f40 <warn.105+0x70>
  220f37:	48 81 c4 60 01 00 00 	add    rsp,0x160
  220f3e:	5d                   	pop    rbp
  220f3f:	c3                   	ret    
  220f40:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  220f47:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
  220f4e:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  220f55:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
  220f5c:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
    stderr.print(fmt, args) catch return;
  220f63:	48 8b b5 b8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x148]
  220f6a:	48 8b 95 c8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x138]
  220f71:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  220f78:	4c 8b 85 b0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x150]
  220f7f:	e8 0c 03 00 00       	call   221290 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.110>
  220f84:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  220f8b:	66 83 bd d6 fe ff ff 	cmp    WORD PTR [rbp-0x12a],0x0
  220f92:	00 
  220f93:	74 09                	je     220f9e <warn.105+0xce>
  220f95:	48 81 c4 60 01 00 00 	add    rsp,0x160
  220f9c:	5d                   	pop    rbp
  220f9d:	c3                   	ret    
pub fn warn(comptime fmt: []const u8, args: ...) void {
  220f9e:	48 81 c4 60 01 00 00 	add    rsp,0x160
  220fa5:	5d                   	pop    rbp
  220fa6:	c3                   	ret    
  220fa7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  220fae:	00 00 

0000000000220fb0 <warn.106>:
  220fb0:	55                   	push   rbp
  220fb1:	48 89 e5             	mov    rbp,rsp
  220fb4:	48 81 ec 40 01 00 00 	sub    rsp,0x140
  220fbb:	48 8d bd e8 fe ff ff 	lea    rdi,[rbp-0x118]
  220fc2:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  220fc9:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
  220fd0:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  220fd7:	00 00 00 00 
  220fdb:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
  220fe2:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  220fe9:	1e 00 00 00 
    const stderr = getStderrStream() catch return;
  220fed:	e8 ce 24 fe ff       	call   2034c0 <getStderrStream>
  220ff2:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  220ff9:	00 
  220ffa:	74 09                	je     221005 <warn.106+0x55>
  220ffc:	48 81 c4 40 01 00 00 	add    rsp,0x140
  221003:	5d                   	pop    rbp
  221004:	c3                   	ret    
  221005:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  22100c:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
  221013:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  22101a:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  221021:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
    stderr.print(fmt, args) catch return;
  221028:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  22102f:	e8 bc 02 00 00       	call   2212f0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.111>
  221034:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  22103b:	66 83 bd d6 fe ff ff 	cmp    WORD PTR [rbp-0x12a],0x0
  221042:	00 
  221043:	74 09                	je     22104e <warn.106+0x9e>
  221045:	48 81 c4 40 01 00 00 	add    rsp,0x140
  22104c:	5d                   	pop    rbp
  22104d:	c3                   	ret    
pub fn warn(comptime fmt: []const u8, args: ...) void {
  22104e:	48 81 c4 40 01 00 00 	add    rsp,0x140
  221055:	5d                   	pop    rbp
  221056:	c3                   	ret    
  221057:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  22105e:	00 00 

0000000000221060 <warn.107>:
  221060:	55                   	push   rbp
  221061:	48 89 e5             	mov    rbp,rsp
  221064:	48 81 ec 40 01 00 00 	sub    rsp,0x140
  22106b:	48 8d bd e8 fe ff ff 	lea    rdi,[rbp-0x118]
  221072:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  221079:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
  221080:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  221087:	00 00 00 00 
  22108b:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
  221092:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  221099:	1e 00 00 00 
    const stderr = getStderrStream() catch return;
  22109d:	e8 1e 24 fe ff       	call   2034c0 <getStderrStream>
  2210a2:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  2210a9:	00 
  2210aa:	74 09                	je     2210b5 <warn.107+0x55>
  2210ac:	48 81 c4 40 01 00 00 	add    rsp,0x140
  2210b3:	5d                   	pop    rbp
  2210b4:	c3                   	ret    
  2210b5:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  2210bc:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
  2210c3:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  2210ca:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  2210d1:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
    stderr.print(fmt, args) catch return;
  2210d8:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  2210df:	e8 5c 02 00 00       	call   221340 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.112>
  2210e4:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  2210eb:	66 83 bd d6 fe ff ff 	cmp    WORD PTR [rbp-0x12a],0x0
  2210f2:	00 
  2210f3:	74 09                	je     2210fe <warn.107+0x9e>
  2210f5:	48 81 c4 40 01 00 00 	add    rsp,0x140
  2210fc:	5d                   	pop    rbp
  2210fd:	c3                   	ret    
pub fn warn(comptime fmt: []const u8, args: ...) void {
  2210fe:	48 81 c4 40 01 00 00 	add    rsp,0x140
  221105:	5d                   	pop    rbp
  221106:	c3                   	ret    
  221107:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  22110e:	00 00 

0000000000221110 <warn.108>:
  221110:	55                   	push   rbp
  221111:	48 89 e5             	mov    rbp,rsp
  221114:	48 81 ec 40 01 00 00 	sub    rsp,0x140
  22111b:	48 8d bd e8 fe ff ff 	lea    rdi,[rbp-0x118]
  221122:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  221129:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
  221130:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  221137:	00 00 00 00 
  22113b:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
  221142:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  221149:	1e 00 00 00 
    const stderr = getStderrStream() catch return;
  22114d:	e8 6e 23 fe ff       	call   2034c0 <getStderrStream>
  221152:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  221159:	00 
  22115a:	74 09                	je     221165 <warn.108+0x55>
  22115c:	48 81 c4 40 01 00 00 	add    rsp,0x140
  221163:	5d                   	pop    rbp
  221164:	c3                   	ret    
  221165:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  22116c:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
  221173:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  22117a:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  221181:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
    stderr.print(fmt, args) catch return;
  221188:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  22118f:	e8 fc 01 00 00       	call   221390 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.113>
  221194:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  22119b:	66 83 bd d6 fe ff ff 	cmp    WORD PTR [rbp-0x12a],0x0
  2211a2:	00 
  2211a3:	74 09                	je     2211ae <warn.108+0x9e>
  2211a5:	48 81 c4 40 01 00 00 	add    rsp,0x140
  2211ac:	5d                   	pop    rbp
  2211ad:	c3                   	ret    
pub fn warn(comptime fmt: []const u8, args: ...) void {
  2211ae:	48 81 c4 40 01 00 00 	add    rsp,0x140
  2211b5:	5d                   	pop    rbp
  2211b6:	c3                   	ret    
  2211b7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  2211be:	00 00 

00000000002211c0 <warn.109>:
  2211c0:	55                   	push   rbp
  2211c1:	48 89 e5             	mov    rbp,rsp
  2211c4:	48 81 ec 50 01 00 00 	sub    rsp,0x150
  2211cb:	48 8d 85 e8 fe ff ff 	lea    rax,[rbp-0x118]
  2211d2:	48 8d 8d f8 fe ff ff 	lea    rcx,[rbp-0x108]
  2211d9:	48 8d 95 10 ff ff ff 	lea    rdx,[rbp-0xf0]
  2211e0:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  2211e7:	00 00 00 00 
  2211eb:	48 89 95 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rdx
  2211f2:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  2211f9:	1e 00 00 00 
  2211fd:	48 89 bd c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rdi
  221204:	48 89 b5 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rsi
    const stderr = getStderrStream() catch return;
  22120b:	48 89 c7             	mov    rdi,rax
  22120e:	48 89 ce             	mov    rsi,rcx
  221211:	e8 aa 22 fe ff       	call   2034c0 <getStderrStream>
  221216:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  22121d:	00 
  22121e:	74 09                	je     221229 <warn.109+0x69>
  221220:	48 81 c4 50 01 00 00 	add    rsp,0x150
  221227:	5d                   	pop    rbp
  221228:	c3                   	ret    
  221229:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  221230:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  221237:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  22123e:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  221245:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
    stderr.print(fmt, args) catch return;
  22124c:	48 8b b5 b8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x148]
  221253:	48 8b 95 c8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x138]
  22125a:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  221261:	e8 7a 01 00 00       	call   2213e0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.114>
  221266:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  22126d:	66 83 bd d6 fe ff ff 	cmp    WORD PTR [rbp-0x12a],0x0
  221274:	00 
  221275:	74 09                	je     221280 <warn.109+0xc0>
  221277:	48 81 c4 50 01 00 00 	add    rsp,0x150
  22127e:	5d                   	pop    rbp
  22127f:	c3                   	ret    
pub fn warn(comptime fmt: []const u8, args: ...) void {
  221280:	48 81 c4 50 01 00 00 	add    rsp,0x150
  221287:	5d                   	pop    rbp
  221288:	c3                   	ret    
  221289:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000221290 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.110>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  221290:	55                   	push   rbp
  221291:	48 89 e5             	mov    rbp,rsp
  221294:	48 83 ec 30          	sub    rsp,0x30
  221298:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22129c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  2212a0:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return std.fmt.format(self, Error, self.writeFn, format, args);
  2212a4:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2212a8:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  2212ac:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
  2212af:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  2212b3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2212b7:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2212bb:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
  2212bf:	49 89 c0             	mov    r8,rax
  2212c2:	4c 8b 4d d8          	mov    r9,QWORD PTR [rbp-0x28]
  2212c6:	e8 c5 01 00 00       	call   221490 <format.116>
  2212cb:	66 83 f8 00          	cmp    ax,0x0
  2212cf:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  2212d3:	74 0b                	je     2212e0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.110+0x50>
  2212d5:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2212d9:	e8 72 31 fe ff       	call   204450 <__zig_return_error>
  2212de:	eb 02                	jmp    2212e2 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.110+0x52>
  2212e0:	eb 00                	jmp    2212e2 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.110+0x52>
  2212e2:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  2212e6:	48 83 c4 30          	add    rsp,0x30
  2212ea:	5d                   	pop    rbp
  2212eb:	c3                   	ret    
  2212ec:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

00000000002212f0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.111>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  2212f0:	55                   	push   rbp
  2212f1:	48 89 e5             	mov    rbp,rsp
  2212f4:	48 83 ec 20          	sub    rsp,0x20
  2212f8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
            return std.fmt.format(self, Error, self.writeFn, format, args);
  2212fc:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  221300:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  221304:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  221307:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  22130b:	e8 00 04 00 00       	call   221710 <format.119>
  221310:	66 83 f8 00          	cmp    ax,0x0
  221314:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  221318:	74 0b                	je     221325 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.111+0x35>
  22131a:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  22131e:	e8 2d 31 fe ff       	call   204450 <__zig_return_error>
  221323:	eb 02                	jmp    221327 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.111+0x37>
  221325:	eb 00                	jmp    221327 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.111+0x37>
  221327:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  22132b:	48 83 c4 20          	add    rsp,0x20
  22132f:	5d                   	pop    rbp
  221330:	c3                   	ret    
  221331:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  221338:	0f 1f 84 00 00 00 00 
  22133f:	00 

0000000000221340 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.112>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  221340:	55                   	push   rbp
  221341:	48 89 e5             	mov    rbp,rsp
  221344:	48 83 ec 20          	sub    rsp,0x20
  221348:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
            return std.fmt.format(self, Error, self.writeFn, format, args);
  22134c:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  221350:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  221354:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  221357:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  22135b:	e8 20 04 00 00       	call   221780 <format.120>
  221360:	66 83 f8 00          	cmp    ax,0x0
  221364:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  221368:	74 0b                	je     221375 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.112+0x35>
  22136a:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  22136e:	e8 dd 30 fe ff       	call   204450 <__zig_return_error>
  221373:	eb 02                	jmp    221377 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.112+0x37>
  221375:	eb 00                	jmp    221377 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.112+0x37>
  221377:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  22137b:	48 83 c4 20          	add    rsp,0x20
  22137f:	5d                   	pop    rbp
  221380:	c3                   	ret    
  221381:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  221388:	0f 1f 84 00 00 00 00 
  22138f:	00 

0000000000221390 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.113>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  221390:	55                   	push   rbp
  221391:	48 89 e5             	mov    rbp,rsp
  221394:	48 83 ec 20          	sub    rsp,0x20
  221398:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
            return std.fmt.format(self, Error, self.writeFn, format, args);
  22139c:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2213a0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2213a4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  2213a7:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  2213ab:	e8 40 04 00 00       	call   2217f0 <format.121>
  2213b0:	66 83 f8 00          	cmp    ax,0x0
  2213b4:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  2213b8:	74 0b                	je     2213c5 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.113+0x35>
  2213ba:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  2213be:	e8 8d 30 fe ff       	call   204450 <__zig_return_error>
  2213c3:	eb 02                	jmp    2213c7 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.113+0x37>
  2213c5:	eb 00                	jmp    2213c7 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.113+0x37>
  2213c7:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  2213cb:	48 83 c4 20          	add    rsp,0x20
  2213cf:	5d                   	pop    rbp
  2213d0:	c3                   	ret    
  2213d1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2213d8:	0f 1f 84 00 00 00 00 
  2213df:	00 

00000000002213e0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.114>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  2213e0:	55                   	push   rbp
  2213e1:	48 89 e5             	mov    rbp,rsp
  2213e4:	48 83 ec 30          	sub    rsp,0x30
  2213e8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2213ec:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  2213f0:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return std.fmt.format(self, Error, self.writeFn, format, args);
  2213f4:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2213f8:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  2213fc:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
  2213ff:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  221403:	4c 8b 45 e8          	mov    r8,QWORD PTR [rbp-0x18]
  221407:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  22140b:	e8 50 04 00 00       	call   221860 <format.122>
  221410:	66 83 f8 00          	cmp    ax,0x0
  221414:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  221418:	74 0b                	je     221425 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.114+0x45>
  22141a:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  22141e:	e8 2d 30 fe ff       	call   204450 <__zig_return_error>
  221423:	eb 02                	jmp    221427 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.114+0x47>
  221425:	eb 00                	jmp    221427 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.114+0x47>
  221427:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  22142b:	48 83 c4 30          	add    rsp,0x30
  22142f:	5d                   	pop    rbp
  221430:	c3                   	ret    
  221431:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  221438:	0f 1f 84 00 00 00 00 
  22143f:	00 

0000000000221440 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.115>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  221440:	55                   	push   rbp
  221441:	48 89 e5             	mov    rbp,rsp
  221444:	48 83 ec 20          	sub    rsp,0x20
  221448:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
            return std.fmt.format(self, Error, self.writeFn, format, args);
  22144c:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  221450:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  221454:	48 8b 00             	mov    rax,QWORD PTR [rax]
  221457:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  22145b:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  22145f:	48 89 c2             	mov    rdx,rax
  221462:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  221466:	e8 65 05 00 00       	call   2219d0 <format.124>
  22146b:	66 83 f8 00          	cmp    ax,0x0
  22146f:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
  221473:	74 0b                	je     221480 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.115+0x40>
  221475:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  221479:	e8 d2 2f fe ff       	call   204450 <__zig_return_error>
  22147e:	eb 02                	jmp    221482 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.115+0x42>
  221480:	eb 00                	jmp    221482 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.115+0x42>
  221482:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
  221486:	48 83 c4 20          	add    rsp,0x20
  22148a:	5d                   	pop    rbp
  22148b:	c3                   	ret    
  22148c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000221490 <format.116>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  221490:	55                   	push   rbp
  221491:	48 89 e5             	mov    rbp,rsp
  221494:	48 83 ec 50          	sub    rsp,0x50
  221498:	48 8d 05 11 44 00 00 	lea    rax,[rip+0x4411]        # 2258b0 <__unnamed_192>
  22149f:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
  2214a3:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  2214a7:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  2214ab:	4c 89 45 d0          	mov    QWORD PTR [rbp-0x30],r8
                        try output(context, fmt[start_index..i]);
  2214af:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  2214b3:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  2214b7:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  2214bb:	48 89 c2             	mov    rdx,rax
  2214be:	4c 89 4d c0          	mov    QWORD PTR [rbp-0x40],r9
  2214c2:	ff d1                	call   rcx
  2214c4:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  2214c8:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  2214cd:	74 1b                	je     2214ea <format.116+0x5a>
  2214cf:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  2214d3:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2214d7:	66 89 45 be          	mov    WORD PTR [rbp-0x42],ax
  2214db:	e8 70 2f fe ff       	call   204450 <__zig_return_error>
  2214e0:	66 8b 45 be          	mov    ax,WORD PTR [rbp-0x42]
  2214e4:	48 83 c4 50          	add    rsp,0x50
  2214e8:	5d                   	pop    rbp
  2214e9:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  2214ea:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  2214ee:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  2214f2:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  2214f6:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2214fa:	e8 61 01 00 00       	call   221660 <formatType.117>
  2214ff:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  221503:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  221508:	74 1b                	je     221525 <format.116+0x95>
  22150a:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  22150e:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  221512:	66 89 45 bc          	mov    WORD PTR [rbp-0x44],ax
  221516:	e8 35 2f fe ff       	call   204450 <__zig_return_error>
  22151b:	66 8b 45 bc          	mov    ax,WORD PTR [rbp-0x44]
  22151f:	48 83 c4 50          	add    rsp,0x50
  221523:	5d                   	pop    rbp
  221524:	c3                   	ret    
  221525:	48 8d 15 9c 43 00 00 	lea    rdx,[rip+0x439c]        # 2258c8 <__unnamed_193>
                        try output(context, fmt[start_index..i]);
  22152c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  221530:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  221534:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  221538:	ff d0                	call   rax
  22153a:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  22153e:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  221543:	74 1b                	je     221560 <format.116+0xd0>
  221545:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  221549:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  22154d:	66 89 45 ba          	mov    WORD PTR [rbp-0x46],ax
  221551:	e8 fa 2e fe ff       	call   204450 <__zig_return_error>
  221556:	66 8b 45 ba          	mov    ax,WORD PTR [rbp-0x46]
  22155a:	48 83 c4 50          	add    rsp,0x50
  22155e:	5d                   	pop    rbp
  22155f:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  221560:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  221564:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  221568:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  22156c:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  221570:	e8 eb 00 00 00       	call   221660 <formatType.117>
  221575:	66 89 45 f8          	mov    WORD PTR [rbp-0x8],ax
  221579:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  22157e:	74 1b                	je     22159b <format.116+0x10b>
  221580:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  221584:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  221588:	66 89 45 b8          	mov    WORD PTR [rbp-0x48],ax
  22158c:	e8 bf 2e fe ff       	call   204450 <__zig_return_error>
  221591:	66 8b 45 b8          	mov    ax,WORD PTR [rbp-0x48]
  221595:	48 83 c4 50          	add    rsp,0x50
  221599:	5d                   	pop    rbp
  22159a:	c3                   	ret    
  22159b:	48 8d 15 3e 43 00 00 	lea    rdx,[rip+0x433e]        # 2258e0 <__unnamed_194>
                        try output(context, fmt[start_index..i]);
  2215a2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2215a6:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  2215aa:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2215ae:	ff d0                	call   rax
  2215b0:	66 89 45 f6          	mov    WORD PTR [rbp-0xa],ax
  2215b4:	66 83 7d f6 00       	cmp    WORD PTR [rbp-0xa],0x0
  2215b9:	74 1b                	je     2215d6 <format.116+0x146>
  2215bb:	66 8b 45 f6          	mov    ax,WORD PTR [rbp-0xa]
  2215bf:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2215c3:	66 89 45 b6          	mov    WORD PTR [rbp-0x4a],ax
  2215c7:	e8 84 2e fe ff       	call   204450 <__zig_return_error>
  2215cc:	66 8b 45 b6          	mov    ax,WORD PTR [rbp-0x4a]
  2215d0:	48 83 c4 50          	add    rsp,0x50
  2215d4:	5d                   	pop    rbp
  2215d5:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  2215d6:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  2215da:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  2215de:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2215e2:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
  2215e6:	e8 c5 00 00 00       	call   2216b0 <formatType.118>
  2215eb:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
  2215ef:	66 83 7d f4 00       	cmp    WORD PTR [rbp-0xc],0x0
  2215f4:	74 1b                	je     221611 <format.116+0x181>
  2215f6:	66 8b 45 f4          	mov    ax,WORD PTR [rbp-0xc]
  2215fa:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2215fe:	66 89 45 b4          	mov    WORD PTR [rbp-0x4c],ax
  221602:	e8 49 2e fe ff       	call   204450 <__zig_return_error>
  221607:	66 8b 45 b4          	mov    ax,WORD PTR [rbp-0x4c]
  22160b:	48 83 c4 50          	add    rsp,0x50
  22160f:	5d                   	pop    rbp
  221610:	c3                   	ret    
  221611:	48 8d 15 e0 42 00 00 	lea    rdx,[rip+0x42e0]        # 2258f8 <__unnamed_195>
        try output(context, fmt[start_index..]);
  221618:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  22161c:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  221620:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  221624:	ff d0                	call   rax
  221626:	66 89 45 f2          	mov    WORD PTR [rbp-0xe],ax
  22162a:	66 83 7d f2 00       	cmp    WORD PTR [rbp-0xe],0x0
  22162f:	74 1b                	je     22164c <format.116+0x1bc>
  221631:	66 8b 45 f2          	mov    ax,WORD PTR [rbp-0xe]
  221635:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  221639:	66 89 45 b2          	mov    WORD PTR [rbp-0x4e],ax
  22163d:	e8 0e 2e fe ff       	call   204450 <__zig_return_error>
  221642:	66 8b 45 b2          	mov    ax,WORD PTR [rbp-0x4e]
  221646:	48 83 c4 50          	add    rsp,0x50
  22164a:	5d                   	pop    rbp
  22164b:	c3                   	ret    
  22164c:	31 c0                	xor    eax,eax
  22164e:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  221651:	66 89 c8             	mov    ax,cx
  221654:	48 83 c4 50          	add    rsp,0x50
  221658:	5d                   	pop    rbp
  221659:	c3                   	ret    
  22165a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000221660 <formatType.117>:
pub fn formatType(
  221660:	55                   	push   rbp
  221661:	48 89 e5             	mov    rbp,rsp
  221664:	48 83 ec 30          	sub    rsp,0x30
  221668:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22166c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  221670:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return formatValue(value, fmt, context, Errors, output);
  221674:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  221678:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  22167c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  221680:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  221684:	e8 87 04 00 00       	call   221b10 <formatValue.126>
  221689:	66 83 f8 00          	cmp    ax,0x0
  22168d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  221691:	74 0b                	je     22169e <formatType.117+0x3e>
  221693:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  221697:	e8 b4 2d fe ff       	call   204450 <__zig_return_error>
  22169c:	eb 02                	jmp    2216a0 <formatType.117+0x40>
  22169e:	eb 00                	jmp    2216a0 <formatType.117+0x40>
  2216a0:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  2216a4:	48 83 c4 30          	add    rsp,0x30
  2216a8:	5d                   	pop    rbp
  2216a9:	c3                   	ret    
  2216aa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000002216b0 <formatType.118>:
pub fn formatType(
  2216b0:	55                   	push   rbp
  2216b1:	48 89 e5             	mov    rbp,rsp
  2216b4:	48 83 ec 30          	sub    rsp,0x30
  2216b8:	48 8d 45 e0          	lea    rax,[rbp-0x20]
  2216bc:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  2216c0:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
                const casted_value = ([]const u8)(value);
  2216c4:	48 8b 0e             	mov    rcx,QWORD PTR [rsi]
  2216c7:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  2216cb:	48 8b 4e 08          	mov    rcx,QWORD PTR [rsi+0x8]
  2216cf:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
                return output(context, casted_value);
  2216d3:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  2216d7:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2216db:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  2216df:	48 89 c2             	mov    rdx,rax
  2216e2:	ff d1                	call   rcx
  2216e4:	66 83 f8 00          	cmp    ax,0x0
  2216e8:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  2216ec:	74 0b                	je     2216f9 <formatType.118+0x49>
  2216ee:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  2216f2:	e8 59 2d fe ff       	call   204450 <__zig_return_error>
  2216f7:	eb 02                	jmp    2216fb <formatType.118+0x4b>
  2216f9:	eb 00                	jmp    2216fb <formatType.118+0x4b>
  2216fb:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  2216ff:	48 83 c4 30          	add    rsp,0x30
  221703:	5d                   	pop    rbp
  221704:	c3                   	ret    
  221705:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22170c:	00 00 00 00 

0000000000221710 <format.119>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  221710:	55                   	push   rbp
  221711:	48 89 e5             	mov    rbp,rsp
  221714:	48 83 ec 30          	sub    rsp,0x30
  221718:	48 8d 05 f1 41 00 00 	lea    rax,[rip+0x41f1]        # 225910 <__unnamed_196>
  22171f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  221723:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
        try output(context, fmt[start_index..]);
  221727:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  22172b:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  22172f:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  221733:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  221737:	48 89 c2             	mov    rdx,rax
  22173a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  22173e:	ff d0                	call   rax
  221740:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  221744:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  221749:	74 1b                	je     221766 <format.119+0x56>
  22174b:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  22174f:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  221753:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  221757:	e8 f4 2c fe ff       	call   204450 <__zig_return_error>
  22175c:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  221760:	48 83 c4 30          	add    rsp,0x30
  221764:	5d                   	pop    rbp
  221765:	c3                   	ret    
  221766:	31 c0                	xor    eax,eax
  221768:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  22176b:	66 89 c8             	mov    ax,cx
  22176e:	48 83 c4 30          	add    rsp,0x30
  221772:	5d                   	pop    rbp
  221773:	c3                   	ret    
  221774:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22177b:	00 00 00 00 00 

0000000000221780 <format.120>:
  221780:	55                   	push   rbp
  221781:	48 89 e5             	mov    rbp,rsp
  221784:	48 83 ec 30          	sub    rsp,0x30
  221788:	48 8d 05 99 41 00 00 	lea    rax,[rip+0x4199]        # 225928 <__unnamed_197>
  22178f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  221793:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
        try output(context, fmt[start_index..]);
  221797:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  22179b:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  22179f:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2217a3:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  2217a7:	48 89 c2             	mov    rdx,rax
  2217aa:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2217ae:	ff d0                	call   rax
  2217b0:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  2217b4:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  2217b9:	74 1b                	je     2217d6 <format.120+0x56>
  2217bb:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  2217bf:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2217c3:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  2217c7:	e8 84 2c fe ff       	call   204450 <__zig_return_error>
  2217cc:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  2217d0:	48 83 c4 30          	add    rsp,0x30
  2217d4:	5d                   	pop    rbp
  2217d5:	c3                   	ret    
  2217d6:	31 c0                	xor    eax,eax
  2217d8:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  2217db:	66 89 c8             	mov    ax,cx
  2217de:	48 83 c4 30          	add    rsp,0x30
  2217e2:	5d                   	pop    rbp
  2217e3:	c3                   	ret    
  2217e4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2217eb:	00 00 00 00 00 

00000000002217f0 <format.121>:
  2217f0:	55                   	push   rbp
  2217f1:	48 89 e5             	mov    rbp,rsp
  2217f4:	48 83 ec 30          	sub    rsp,0x30
  2217f8:	48 8d 05 41 41 00 00 	lea    rax,[rip+0x4141]        # 225940 <__unnamed_198>
  2217ff:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  221803:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
        try output(context, fmt[start_index..]);
  221807:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  22180b:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  22180f:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  221813:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  221817:	48 89 c2             	mov    rdx,rax
  22181a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  22181e:	ff d0                	call   rax
  221820:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  221824:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  221829:	74 1b                	je     221846 <format.121+0x56>
  22182b:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  22182f:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  221833:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  221837:	e8 14 2c fe ff       	call   204450 <__zig_return_error>
  22183c:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  221840:	48 83 c4 30          	add    rsp,0x30
  221844:	5d                   	pop    rbp
  221845:	c3                   	ret    
  221846:	31 c0                	xor    eax,eax
  221848:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  22184b:	66 89 c8             	mov    ax,cx
  22184e:	48 83 c4 30          	add    rsp,0x30
  221852:	5d                   	pop    rbp
  221853:	c3                   	ret    
  221854:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22185b:	00 00 00 00 00 

0000000000221860 <format.122>:
  221860:	55                   	push   rbp
  221861:	48 89 e5             	mov    rbp,rsp
  221864:	48 83 ec 40          	sub    rsp,0x40
  221868:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  22186c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  221870:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  221874:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  221878:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  22187c:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  221880:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  221884:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
  221888:	e8 f3 00 00 00       	call   221980 <formatType.123>
  22188d:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  221891:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  221896:	74 1b                	je     2218b3 <format.122+0x53>
  221898:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  22189c:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  2218a0:	66 89 45 ce          	mov    WORD PTR [rbp-0x32],ax
  2218a4:	e8 a7 2b fe ff       	call   204450 <__zig_return_error>
  2218a9:	66 8b 45 ce          	mov    ax,WORD PTR [rbp-0x32]
  2218ad:	48 83 c4 40          	add    rsp,0x40
  2218b1:	5d                   	pop    rbp
  2218b2:	c3                   	ret    
  2218b3:	48 8d 15 9e 40 00 00 	lea    rdx,[rip+0x409e]        # 225958 <__unnamed_199>
                        try output(context, fmt[start_index..i]);
  2218ba:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2218be:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  2218c2:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  2218c6:	ff d0                	call   rax
  2218c8:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  2218cc:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  2218d1:	74 1b                	je     2218ee <format.122+0x8e>
  2218d3:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  2218d7:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  2218db:	66 89 45 cc          	mov    WORD PTR [rbp-0x34],ax
  2218df:	e8 6c 2b fe ff       	call   204450 <__zig_return_error>
  2218e4:	66 8b 45 cc          	mov    ax,WORD PTR [rbp-0x34]
  2218e8:	48 83 c4 40          	add    rsp,0x40
  2218ec:	5d                   	pop    rbp
  2218ed:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  2218ee:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  2218f2:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  2218f6:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2218fa:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  2218fe:	e8 7d 00 00 00       	call   221980 <formatType.123>
  221903:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  221907:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  22190c:	74 1b                	je     221929 <format.122+0xc9>
  22190e:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  221912:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  221916:	66 89 45 ca          	mov    WORD PTR [rbp-0x36],ax
  22191a:	e8 31 2b fe ff       	call   204450 <__zig_return_error>
  22191f:	66 8b 45 ca          	mov    ax,WORD PTR [rbp-0x36]
  221923:	48 83 c4 40          	add    rsp,0x40
  221927:	5d                   	pop    rbp
  221928:	c3                   	ret    
  221929:	48 8d 15 40 40 00 00 	lea    rdx,[rip+0x4040]        # 225970 <__unnamed_200>
        try output(context, fmt[start_index..]);
  221930:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  221934:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  221938:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  22193c:	ff d0                	call   rax
  22193e:	66 89 45 f8          	mov    WORD PTR [rbp-0x8],ax
  221942:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  221947:	74 1b                	je     221964 <format.122+0x104>
  221949:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  22194d:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  221951:	66 89 45 c8          	mov    WORD PTR [rbp-0x38],ax
  221955:	e8 f6 2a fe ff       	call   204450 <__zig_return_error>
  22195a:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  22195e:	48 83 c4 40          	add    rsp,0x40
  221962:	5d                   	pop    rbp
  221963:	c3                   	ret    
  221964:	31 c0                	xor    eax,eax
  221966:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  221969:	66 89 c8             	mov    ax,cx
  22196c:	48 83 c4 40          	add    rsp,0x40
  221970:	5d                   	pop    rbp
  221971:	c3                   	ret    
  221972:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  221979:	1f 84 00 00 00 00 00 

0000000000221980 <formatType.123>:
pub fn formatType(
  221980:	55                   	push   rbp
  221981:	48 89 e5             	mov    rbp,rsp
  221984:	48 83 ec 30          	sub    rsp,0x30
  221988:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22198c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  221990:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return formatValue(value, fmt, context, Errors, output);
  221994:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  221998:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  22199c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2219a0:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2219a4:	e8 b7 01 00 00       	call   221b60 <formatValue.127>
  2219a9:	66 83 f8 00          	cmp    ax,0x0
  2219ad:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  2219b1:	74 0b                	je     2219be <formatType.123+0x3e>
  2219b3:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2219b7:	e8 94 2a fe ff       	call   204450 <__zig_return_error>
  2219bc:	eb 02                	jmp    2219c0 <formatType.123+0x40>
  2219be:	eb 00                	jmp    2219c0 <formatType.123+0x40>
  2219c0:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  2219c4:	48 83 c4 30          	add    rsp,0x30
  2219c8:	5d                   	pop    rbp
  2219c9:	c3                   	ret    
  2219ca:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000002219d0 <format.124>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  2219d0:	55                   	push   rbp
  2219d1:	48 89 e5             	mov    rbp,rsp
  2219d4:	48 83 ec 40          	sub    rsp,0x40
  2219d8:	48 8d 05 a9 3f 00 00 	lea    rax,[rip+0x3fa9]        # 225988 <__unnamed_201>
  2219df:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  2219e3:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
                        try output(context, fmt[start_index..i]);
  2219e7:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  2219eb:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  2219ef:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2219f3:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  2219f7:	48 89 c2             	mov    rdx,rax
  2219fa:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2219fe:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  221a02:	ff d0                	call   rax
  221a04:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  221a08:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  221a0d:	74 1b                	je     221a2a <format.124+0x5a>
  221a0f:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  221a13:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  221a17:	66 89 45 ce          	mov    WORD PTR [rbp-0x32],ax
  221a1b:	e8 30 2a fe ff       	call   204450 <__zig_return_error>
  221a20:	66 8b 45 ce          	mov    ax,WORD PTR [rbp-0x32]
  221a24:	48 83 c4 40          	add    rsp,0x40
  221a28:	5d                   	pop    rbp
  221a29:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  221a2a:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  221a2e:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  221a32:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  221a36:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  221a3a:	e8 71 00 00 00       	call   221ab0 <formatType.125>
  221a3f:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  221a43:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  221a48:	74 1b                	je     221a65 <format.124+0x95>
  221a4a:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  221a4e:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  221a52:	66 89 45 cc          	mov    WORD PTR [rbp-0x34],ax
  221a56:	e8 f5 29 fe ff       	call   204450 <__zig_return_error>
  221a5b:	66 8b 45 cc          	mov    ax,WORD PTR [rbp-0x34]
  221a5f:	48 83 c4 40          	add    rsp,0x40
  221a63:	5d                   	pop    rbp
  221a64:	c3                   	ret    
  221a65:	48 8d 15 34 3f 00 00 	lea    rdx,[rip+0x3f34]        # 2259a0 <__unnamed_202>
        try output(context, fmt[start_index..]);
  221a6c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  221a70:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  221a74:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  221a78:	ff d0                	call   rax
  221a7a:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  221a7e:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  221a83:	74 1b                	je     221aa0 <format.124+0xd0>
  221a85:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  221a89:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  221a8d:	66 89 45 ca          	mov    WORD PTR [rbp-0x36],ax
  221a91:	e8 ba 29 fe ff       	call   204450 <__zig_return_error>
  221a96:	66 8b 45 ca          	mov    ax,WORD PTR [rbp-0x36]
  221a9a:	48 83 c4 40          	add    rsp,0x40
  221a9e:	5d                   	pop    rbp
  221a9f:	c3                   	ret    
  221aa0:	31 c0                	xor    eax,eax
  221aa2:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  221aa5:	66 89 c8             	mov    ax,cx
  221aa8:	48 83 c4 40          	add    rsp,0x40
  221aac:	5d                   	pop    rbp
  221aad:	c3                   	ret    
  221aae:	66 90                	xchg   ax,ax

0000000000221ab0 <formatType.125>:
pub fn formatType(
  221ab0:	55                   	push   rbp
  221ab1:	48 89 e5             	mov    rbp,rsp
  221ab4:	48 83 ec 30          	sub    rsp,0x30
  221ab8:	48 8d 45 e0          	lea    rax,[rbp-0x20]
  221abc:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  221ac0:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
                const casted_value = ([]const u8)(value);
  221ac4:	48 8b 0e             	mov    rcx,QWORD PTR [rsi]
  221ac7:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  221acb:	48 8b 4e 08          	mov    rcx,QWORD PTR [rsi+0x8]
  221acf:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
                return output(context, casted_value);
  221ad3:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  221ad7:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  221adb:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  221adf:	48 89 c2             	mov    rdx,rax
  221ae2:	ff d1                	call   rcx
  221ae4:	66 83 f8 00          	cmp    ax,0x0
  221ae8:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  221aec:	74 0b                	je     221af9 <formatType.125+0x49>
  221aee:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  221af2:	e8 59 29 fe ff       	call   204450 <__zig_return_error>
  221af7:	eb 02                	jmp    221afb <formatType.125+0x4b>
  221af9:	eb 00                	jmp    221afb <formatType.125+0x4b>
  221afb:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  221aff:	48 83 c4 30          	add    rsp,0x30
  221b03:	5d                   	pop    rbp
  221b04:	c3                   	ret    
  221b05:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  221b0c:	00 00 00 00 

0000000000221b10 <formatValue.126>:
fn formatValue(
  221b10:	55                   	push   rbp
  221b11:	48 89 e5             	mov    rbp,rsp
  221b14:	48 83 ec 30          	sub    rsp,0x30
  221b18:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  221b1c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  221b20:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
        builtin.TypeId.Int => return formatIntValue(value, fmt, context, Errors, output),
  221b24:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  221b28:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  221b2c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  221b30:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  221b34:	e8 77 00 00 00       	call   221bb0 <formatIntValue.128>
  221b39:	66 83 f8 00          	cmp    ax,0x0
  221b3d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  221b41:	74 0b                	je     221b4e <formatValue.126+0x3e>
  221b43:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  221b47:	e8 04 29 fe ff       	call   204450 <__zig_return_error>
  221b4c:	eb 02                	jmp    221b50 <formatValue.126+0x40>
  221b4e:	eb 00                	jmp    221b50 <formatValue.126+0x40>
  221b50:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  221b54:	48 83 c4 30          	add    rsp,0x30
  221b58:	5d                   	pop    rbp
  221b59:	c3                   	ret    
  221b5a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000221b60 <formatValue.127>:
fn formatValue(
  221b60:	55                   	push   rbp
  221b61:	48 89 e5             	mov    rbp,rsp
  221b64:	48 83 ec 30          	sub    rsp,0x30
  221b68:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  221b6c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  221b70:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
        builtin.TypeId.Int => return formatIntValue(value, fmt, context, Errors, output),
  221b74:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  221b78:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  221b7c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  221b80:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  221b84:	e8 97 00 00 00       	call   221c20 <formatIntValue.129>
  221b89:	66 83 f8 00          	cmp    ax,0x0
  221b8d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  221b91:	74 0b                	je     221b9e <formatValue.127+0x3e>
  221b93:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  221b97:	e8 b4 28 fe ff       	call   204450 <__zig_return_error>
  221b9c:	eb 02                	jmp    221ba0 <formatValue.127+0x40>
  221b9e:	eb 00                	jmp    221ba0 <formatValue.127+0x40>
  221ba0:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  221ba4:	48 83 c4 30          	add    rsp,0x30
  221ba8:	5d                   	pop    rbp
  221ba9:	c3                   	ret    
  221baa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000221bb0 <formatIntValue.128>:
pub fn formatIntValue(
  221bb0:	55                   	push   rbp
  221bb1:	48 89 e5             	mov    rbp,rsp
  221bb4:	48 83 ec 40          	sub    rsp,0x40
  221bb8:	b8 0a 00 00 00       	mov    eax,0xa
  221bbd:	45 31 c0             	xor    r8d,r8d
  221bc0:	45 31 c9             	xor    r9d,r9d
  221bc3:	45 89 ca             	mov    r10d,r9d
  221bc6:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  221bca:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  221bce:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    return formatInt(value, radix, uppercase, width, context, Errors, output);
  221bd2:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  221bd6:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
  221bda:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  221bde:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  221be2:	89 c2                	mov    edx,eax
  221be4:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  221be8:	44 89 c1             	mov    ecx,r8d
  221beb:	4d 89 d0             	mov    r8,r10
  221bee:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
  221bf2:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  221bf6:	e8 15 dd ff ff       	call   21f910 <formatInt.102>
  221bfb:	66 83 f8 00          	cmp    ax,0x0
  221bff:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  221c03:	74 0b                	je     221c10 <formatIntValue.128+0x60>
  221c05:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  221c09:	e8 42 28 fe ff       	call   204450 <__zig_return_error>
  221c0e:	eb 02                	jmp    221c12 <formatIntValue.128+0x62>
  221c10:	eb 00                	jmp    221c12 <formatIntValue.128+0x62>
  221c12:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  221c16:	48 83 c4 40          	add    rsp,0x40
  221c1a:	5d                   	pop    rbp
  221c1b:	c3                   	ret    
  221c1c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000221c20 <formatIntValue.129>:
pub fn formatIntValue(
  221c20:	55                   	push   rbp
  221c21:	48 89 e5             	mov    rbp,rsp
  221c24:	48 83 ec 40          	sub    rsp,0x40
  221c28:	b8 0a 00 00 00       	mov    eax,0xa
  221c2d:	45 31 c0             	xor    r8d,r8d
  221c30:	45 31 c9             	xor    r9d,r9d
  221c33:	45 89 ca             	mov    r10d,r9d
  221c36:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  221c3a:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  221c3e:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    return formatInt(value, radix, uppercase, width, context, Errors, output);
  221c42:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  221c46:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
  221c4a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  221c4e:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  221c52:	89 c2                	mov    edx,eax
  221c54:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  221c58:	44 89 c1             	mov    ecx,r8d
  221c5b:	4d 89 d0             	mov    r8,r10
  221c5e:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
  221c62:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  221c66:	e8 a5 dc ff ff       	call   21f910 <formatInt.102>
  221c6b:	66 83 f8 00          	cmp    ax,0x0
  221c6f:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  221c73:	74 0b                	je     221c80 <formatIntValue.129+0x60>
  221c75:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  221c79:	e8 d2 27 fe ff       	call   204450 <__zig_return_error>
  221c7e:	eb 02                	jmp    221c82 <formatIntValue.129+0x62>
  221c80:	eb 00                	jmp    221c82 <formatIntValue.129+0x62>
  221c82:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  221c86:	48 83 c4 40          	add    rsp,0x40
  221c8a:	5d                   	pop    rbp
  221c8b:	c3                   	ret    
  221c8c:	cc                   	int3   
  221c8d:	cc                   	int3   
  221c8e:	cc                   	int3   
  221c8f:	cc                   	int3   

0000000000221c90 <panic>:

const builtin = @import("builtin");

// Avoid dragging in the runtime safety mechanisms into this .o file,
// unless we're trying to test this file.
pub fn panic(msg: []const u8, error_return_trace: ?*builtin.StackTrace) noreturn {
  221c90:	55                   	push   rbp
  221c91:	48 89 e5             	mov    rbp,rsp
  221c94:	48 83 ec 10          	sub    rsp,0x10
  221c98:	48 8d 3d 19 3d 00 00 	lea    rdi,[rip+0x3d19]        # 2259b8 <__unnamed_1>
  221c9f:	31 c0                	xor    eax,eax
  221ca1:	89 c1                	mov    ecx,eax
  221ca3:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
    if (builtin.is_test) {
        @setCold(true);
        @import("std").debug.panic("{}", msg);
    } else {
        unreachable;
  221ca7:	48 89 ce             	mov    rsi,rcx
  221caa:	e8 e1 ff ff ff       	call   221c90 <panic>
  221caf:	90                   	nop

0000000000221cb0 <memset>:
    }
}

export fn memset(dest: ?[*]u8, c: u8, n: usize) ?[*]u8 {
  221cb0:	55                   	push   rbp
  221cb1:	48 89 e5             	mov    rbp,rsp
  221cb4:	40 88 f0             	mov    al,sil
  221cb7:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  221cbb:	88 45 f7             	mov    BYTE PTR [rbp-0x9],al
  221cbe:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    @setRuntimeSafety(false);

    var index: usize = 0;
  221cc2:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  221cc9:	00 
    while (index != n) : (index += 1)
  221cca:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  221cce:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
  221cd2:	74 1c                	je     221cf0 <memset+0x40>
        dest.?[index] = c;
  221cd4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  221cd8:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  221cdc:	8a 55 f7             	mov    dl,BYTE PTR [rbp-0x9]
  221cdf:	88 14 01             	mov    BYTE PTR [rcx+rax*1],dl
    while (index != n) : (index += 1)
  221ce2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  221ce6:	48 83 c0 01          	add    rax,0x1
  221cea:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  221cee:	eb da                	jmp    221cca <memset+0x1a>

    return dest;
  221cf0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  221cf4:	5d                   	pop    rbp
  221cf5:	c3                   	ret    
  221cf6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  221cfd:	00 00 00 

0000000000221d00 <memcpy>:
}

export fn memcpy(noalias dest: ?[*]u8, noalias src: ?[*]const u8, n: usize) ?[*]u8 {
  221d00:	55                   	push   rbp
  221d01:	48 89 e5             	mov    rbp,rsp
  221d04:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  221d08:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  221d0c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    @setRuntimeSafety(false);

    var index: usize = 0;
  221d10:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  221d17:	00 
    while (index != n) : (index += 1)
  221d18:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  221d1c:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
  221d20:	74 26                	je     221d48 <memcpy+0x48>
        dest.?[index] = src.?[index];
  221d22:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  221d26:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  221d2a:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  221d2e:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  221d32:	40 8a 3c 16          	mov    dil,BYTE PTR [rsi+rdx*1]
  221d36:	40 88 3c 01          	mov    BYTE PTR [rcx+rax*1],dil
    while (index != n) : (index += 1)
  221d3a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  221d3e:	48 83 c0 01          	add    rax,0x1
  221d42:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  221d46:	eb d0                	jmp    221d18 <memcpy+0x18>

    return dest;
  221d48:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  221d4c:	5d                   	pop    rbp
  221d4d:	c3                   	ret    
  221d4e:	66 90                	xchg   ax,ax

0000000000221d50 <memmove>:
}

export fn memmove(dest: ?[*]u8, src: ?[*]const u8, n: usize) ?[*]u8 {
  221d50:	55                   	push   rbp
  221d51:	48 89 e5             	mov    rbp,rsp
  221d54:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  221d58:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  221d5c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    @setRuntimeSafety(false);

    if (@ptrToInt(dest) < @ptrToInt(src)) {
  221d60:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  221d64:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  221d68:	48 39 f2             	cmp    rdx,rsi
  221d6b:	73 3a                	jae    221da7 <memmove+0x57>
        var index: usize = 0;
  221d6d:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  221d74:	00 
        while (index != n) : (index += 1) {
  221d75:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  221d79:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
  221d7d:	74 26                	je     221da5 <memmove+0x55>
            dest.?[index] = src.?[index];
  221d7f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  221d83:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  221d87:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  221d8b:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  221d8f:	40 8a 3c 16          	mov    dil,BYTE PTR [rsi+rdx*1]
  221d93:	40 88 3c 01          	mov    BYTE PTR [rcx+rax*1],dil
        while (index != n) : (index += 1) {
  221d97:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  221d9b:	48 83 c0 01          	add    rax,0x1
  221d9f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  221da3:	eb d0                	jmp    221d75 <memmove+0x25>
    if (@ptrToInt(dest) < @ptrToInt(src)) {
  221da5:	eb 37                	jmp    221dde <memmove+0x8e>
        }
    } else {
        var index = n;
  221da7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  221dab:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
        while (index != 0) {
  221daf:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  221db4:	74 26                	je     221ddc <memmove+0x8c>
            index -= 1;
  221db6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  221dba:	48 83 e8 01          	sub    rax,0x1
  221dbe:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
            dest.?[index] = src.?[index];
  221dc2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  221dc6:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  221dca:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  221dce:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  221dd2:	40 8a 3c 16          	mov    dil,BYTE PTR [rsi+rdx*1]
  221dd6:	40 88 3c 01          	mov    BYTE PTR [rcx+rax*1],dil
        while (index != 0) {
  221dda:	eb d3                	jmp    221daf <memmove+0x5f>
    if (@ptrToInt(dest) < @ptrToInt(src)) {
  221ddc:	eb 00                	jmp    221dde <memmove+0x8e>
        }
    }

    return dest;
  221dde:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  221de2:	5d                   	pop    rbp
  221de3:	c3                   	ret    
  221de4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  221deb:	00 00 00 00 00 

0000000000221df0 <__stack_chk_fail>:
    }
    if (builtin.os == builtin.Os.linux and builtin.arch == builtin.Arch.x86_64) {
        @export("clone", clone, builtin.GlobalLinkage.Strong);
    }
}
extern fn __stack_chk_fail() noreturn {
  221df0:	55                   	push   rbp
  221df1:	48 89 e5             	mov    rbp,rsp
  221df4:	48 8d 3d d5 3b 00 00 	lea    rdi,[rip+0x3bd5]        # 2259d0 <__unnamed_2>
  221dfb:	31 c0                	xor    eax,eax
  221dfd:	89 c6                	mov    esi,eax
    @panic("stack smashing detected");
  221dff:	e8 8c fe ff ff       	call   221c90 <panic>
  221e04:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  221e0b:	00 00 00 00 00 

0000000000221e10 <clone>:

// TODO we should be able to put this directly in std/linux/x86_64.zig but
// it causes a segfault in release mode. this is a workaround of calling it
// across .o file boundaries. fix comptime @ptrCast of nakedcc functions.
nakedcc fn clone() void {
    asm volatile (
  221e10:	31 c0                	xor    eax,eax
  221e12:	b0 38                	mov    al,0x38
  221e14:	49 89 fb             	mov    r11,rdi
  221e17:	48 89 d7             	mov    rdi,rdx
  221e1a:	4c 89 c2             	mov    rdx,r8
  221e1d:	4d 89 c8             	mov    r8,r9
  221e20:	4c 8b 54 24 08       	mov    r10,QWORD PTR [rsp+0x8]
  221e25:	4d 89 d9             	mov    r9,r11
  221e28:	48 83 e6 f0          	and    rsi,0xfffffffffffffff0
  221e2c:	48 83 ee 08          	sub    rsi,0x8
  221e30:	48 89 0e             	mov    QWORD PTR [rsi],rcx
  221e33:	0f 05                	syscall 
  221e35:	85 c0                	test   eax,eax
  221e37:	75 0f                	jne    221e48 <clone+0x38>
  221e39:	31 ed                	xor    ebp,ebp
  221e3b:	5f                   	pop    rdi
  221e3c:	41 ff d1             	call   r9
  221e3f:	89 c7                	mov    edi,eax
  221e41:	31 c0                	xor    eax,eax
  221e43:	b0 3c                	mov    al,0x3c
  221e45:	0f 05                	syscall 
  221e47:	f4                   	hlt    
  221e48:	c3                   	ret    
nakedcc fn clone() void {
  221e49:	c3                   	ret    
  221e4a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000221e50 <fmodf>:
    );
}

const math = @import("../math/index.zig");

export fn fmodf(x: f32, y: f32) f32 {
  221e50:	55                   	push   rbp
  221e51:	48 89 e5             	mov    rbp,rsp
  221e54:	48 83 ec 10          	sub    rsp,0x10
  221e58:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
  221e5d:	c5 fa 11 4d f8       	vmovss DWORD PTR [rbp-0x8],xmm1
    return generic_fmod(f32, x, y);
  221e62:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  221e67:	c5 fa 10 4d f8       	vmovss xmm1,DWORD PTR [rbp-0x8]
  221e6c:	e8 0f 00 00 00       	call   221e80 <generic_fmod>
  221e71:	48 83 c4 10          	add    rsp,0x10
  221e75:	5d                   	pop    rbp
  221e76:	c3                   	ret    
  221e77:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  221e7e:	00 00 

0000000000221e80 <generic_fmod>:
}
export fn ceil(x: f64) f64 {
    return math.ceil(x);
}

fn generic_fmod(comptime T: type, x: T, y: T) T {
  221e80:	55                   	push   rbp
  221e81:	48 89 e5             	mov    rbp,rsp
  221e84:	48 83 ec 30          	sub    rsp,0x30
  221e88:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
  221e8d:	c5 fa 11 4d f8       	vmovss DWORD PTR [rbp-0x8],xmm1
    const log2uint = math.Log2Int(uint);
    const digits = if (T == f32) 23 else 52;
    const exp_bits = if (T == f32) 9 else 12;
    const bits_minus_1 = T.bit_count - 1;
    const mask = if (T == f32) 0xff else 0x7ff;
    var ux = @bitCast(uint, x);
  221e92:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  221e97:	c5 f9 7e c0          	vmovd  eax,xmm0
  221e9b:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    var uy = @bitCast(uint, y);
  221e9e:	c5 fa 10 45 f8       	vmovss xmm0,DWORD PTR [rbp-0x8]
  221ea3:	c5 f9 7e c0          	vmovd  eax,xmm0
  221ea7:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    var ex = @intCast(i32, (ux >> digits) & mask);
  221eaa:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  221ead:	c1 e8 17             	shr    eax,0x17
  221eb0:	25 ff 00 00 00       	and    eax,0xff
  221eb5:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    var ey = @intCast(i32, (uy >> digits) & mask);
  221eb8:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  221ebb:	c1 e8 17             	shr    eax,0x17
  221ebe:	25 ff 00 00 00       	and    eax,0xff
  221ec3:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
    const sx = if (T == f32) @intCast(u32, ux & 0x80000000) else @intCast(i32, ux >> bits_minus_1);
  221ec6:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  221ec9:	25 00 00 00 80       	and    eax,0x80000000
  221ece:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
    var i: uint = undefined;

    if (uy << 1 == 0 or isNan(uint, uy) or ex == mask)
  221ed1:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  221ed4:	c1 e0 01             	shl    eax,0x1
  221ed7:	83 f8 00             	cmp    eax,0x0
  221eda:	0f 94 c1             	sete   cl
  221edd:	f6 c1 01             	test   cl,0x1
  221ee0:	88 4d df             	mov    BYTE PTR [rbp-0x21],cl
  221ee3:	75 0b                	jne    221ef0 <generic_fmod+0x70>
  221ee5:	8b 7d f0             	mov    edi,DWORD PTR [rbp-0x10]
  221ee8:	e8 43 15 00 00       	call   223430 <isNan>
  221eed:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
  221ef0:	8a 45 df             	mov    al,BYTE PTR [rbp-0x21]
  221ef3:	a8 01                	test   al,0x1
  221ef5:	88 45 de             	mov    BYTE PTR [rbp-0x22],al
  221ef8:	75 0d                	jne    221f07 <generic_fmod+0x87>
  221efa:	81 7d ec ff 00 00 00 	cmp    DWORD PTR [rbp-0x14],0xff
  221f01:	0f 94 c0             	sete   al
  221f04:	88 45 de             	mov    BYTE PTR [rbp-0x22],al
  221f07:	8a 45 de             	mov    al,BYTE PTR [rbp-0x22]
  221f0a:	a8 01                	test   al,0x1
  221f0c:	75 02                	jne    221f10 <generic_fmod+0x90>
  221f0e:	eb 1e                	jmp    221f2e <generic_fmod+0xae>
        return (x * y) / (x * y);
  221f10:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  221f15:	c5 fa 59 45 f8       	vmulss xmm0,xmm0,DWORD PTR [rbp-0x8]
  221f1a:	c5 fa 10 4d fc       	vmovss xmm1,DWORD PTR [rbp-0x4]
  221f1f:	c5 f2 59 4d f8       	vmulss xmm1,xmm1,DWORD PTR [rbp-0x8]
  221f24:	c5 fa 5e c1          	vdivss xmm0,xmm0,xmm1
  221f28:	48 83 c4 30          	add    rsp,0x30
  221f2c:	5d                   	pop    rbp
  221f2d:	c3                   	ret    
    if (uy << 1 == 0 or isNan(uint, uy) or ex == mask)
  221f2e:	eb 00                	jmp    221f30 <generic_fmod+0xb0>

    if (ux << 1 <= uy << 1) {
  221f30:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  221f33:	c1 e0 01             	shl    eax,0x1
  221f36:	8b 4d f0             	mov    ecx,DWORD PTR [rbp-0x10]
  221f39:	c1 e1 01             	shl    ecx,0x1
  221f3c:	39 c8                	cmp    eax,ecx
  221f3e:	77 2c                	ja     221f6c <generic_fmod+0xec>
        if (ux << 1 == uy << 1)
  221f40:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  221f43:	c1 e0 01             	shl    eax,0x1
  221f46:	8b 4d f0             	mov    ecx,DWORD PTR [rbp-0x10]
  221f49:	c1 e1 01             	shl    ecx,0x1
  221f4c:	39 c8                	cmp    eax,ecx
  221f4e:	75 0f                	jne    221f5f <generic_fmod+0xdf>
  221f50:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
            return 0 * x;
  221f54:	c5 fa 59 45 fc       	vmulss xmm0,xmm0,DWORD PTR [rbp-0x4]
  221f59:	48 83 c4 30          	add    rsp,0x30
  221f5d:	5d                   	pop    rbp
  221f5e:	c3                   	ret    
        if (ux << 1 == uy << 1)
  221f5f:	eb 00                	jmp    221f61 <generic_fmod+0xe1>
        return x;
  221f61:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  221f66:	48 83 c4 30          	add    rsp,0x30
  221f6a:	5d                   	pop    rbp
  221f6b:	c3                   	ret    
    if (ux << 1 <= uy << 1) {
  221f6c:	eb 00                	jmp    221f6e <generic_fmod+0xee>
    }

    // normalize x and y
    if (ex == 0) {
  221f6e:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
  221f72:	75 43                	jne    221fb7 <generic_fmod+0x137>
        i = ux << exp_bits;
  221f74:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  221f77:	c1 e0 09             	shl    eax,0x9
  221f7a:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
        while (i >> bits_minus_1 == 0) : (b: {
  221f7d:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  221f80:	c1 e8 1f             	shr    eax,0x1f
  221f83:	83 f8 00             	cmp    eax,0x0
  221f86:	75 16                	jne    221f9e <generic_fmod+0x11e>
  221f88:	eb 00                	jmp    221f8a <generic_fmod+0x10a>
            ex -= 1;
  221f8a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  221f8d:	83 e8 01             	sub    eax,0x1
  221f90:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
            i <<= 1;
  221f93:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  221f96:	c1 e0 01             	shl    eax,0x1
  221f99:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
        while (i >> bits_minus_1 == 0) : (b: {
  221f9c:	eb df                	jmp    221f7d <generic_fmod+0xfd>
        }) {}
        ux <<= @intCast(log2uint, @bitCast(u32, -ex + 1));
  221f9e:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  221fa1:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
  221fa4:	ba 01 00 00 00       	mov    edx,0x1
  221fa9:	29 ca                	sub    edx,ecx
  221fab:	83 e2 1f             	and    edx,0x1f
  221fae:	89 d1                	mov    ecx,edx
  221fb0:	d3 e0                	shl    eax,cl
  221fb2:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    if (ex == 0) {
  221fb5:	eb 16                	jmp    221fcd <generic_fmod+0x14d>
    } else {
        ux &= @maxValue(uint) >> exp_bits;
  221fb7:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  221fba:	25 ff ff 7f 00       	and    eax,0x7fffff
  221fbf:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
        ux |= 1 << digits;
  221fc2:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  221fc5:	0d 00 00 80 00       	or     eax,0x800000
  221fca:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    }
    if (ey == 0) {
  221fcd:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
  221fd1:	75 43                	jne    222016 <generic_fmod+0x196>
        i = uy << exp_bits;
  221fd3:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  221fd6:	c1 e0 09             	shl    eax,0x9
  221fd9:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
        while (i >> bits_minus_1 == 0) : (b: {
  221fdc:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  221fdf:	c1 e8 1f             	shr    eax,0x1f
  221fe2:	83 f8 00             	cmp    eax,0x0
  221fe5:	75 16                	jne    221ffd <generic_fmod+0x17d>
  221fe7:	eb 00                	jmp    221fe9 <generic_fmod+0x169>
            ey -= 1;
  221fe9:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  221fec:	83 e8 01             	sub    eax,0x1
  221fef:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
            i <<= 1;
  221ff2:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  221ff5:	c1 e0 01             	shl    eax,0x1
  221ff8:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
        while (i >> bits_minus_1 == 0) : (b: {
  221ffb:	eb df                	jmp    221fdc <generic_fmod+0x15c>
        }) {}
        uy <<= @intCast(log2uint, @bitCast(u32, -ey + 1));
  221ffd:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  222000:	8b 4d e8             	mov    ecx,DWORD PTR [rbp-0x18]
  222003:	ba 01 00 00 00       	mov    edx,0x1
  222008:	29 ca                	sub    edx,ecx
  22200a:	83 e2 1f             	and    edx,0x1f
  22200d:	89 d1                	mov    ecx,edx
  22200f:	d3 e0                	shl    eax,cl
  222011:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    if (ey == 0) {
  222014:	eb 16                	jmp    22202c <generic_fmod+0x1ac>
    } else {
        uy &= @maxValue(uint) >> exp_bits;
  222016:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  222019:	25 ff ff 7f 00       	and    eax,0x7fffff
  22201e:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
        uy |= 1 << digits;
  222021:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  222024:	0d 00 00 80 00       	or     eax,0x800000
  222029:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    }

    // x mod y
    while (ex > ey) : (ex -= 1) {
  22202c:	eb 00                	jmp    22202e <generic_fmod+0x1ae>
  22202e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  222031:	3b 45 e8             	cmp    eax,DWORD PTR [rbp-0x18]
  222034:	7e 49                	jle    22207f <generic_fmod+0x1ff>
        i = ux -% uy;
  222036:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  222039:	2b 45 f0             	sub    eax,DWORD PTR [rbp-0x10]
  22203c:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
        if (i >> bits_minus_1 == 0) {
  22203f:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  222042:	c1 e8 1f             	shr    eax,0x1f
  222045:	83 f8 00             	cmp    eax,0x0
  222048:	75 1f                	jne    222069 <generic_fmod+0x1e9>
            if (i == 0)
  22204a:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
  22204e:	75 0f                	jne    22205f <generic_fmod+0x1df>
  222050:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
                return 0 * x;
  222054:	c5 fa 59 45 fc       	vmulss xmm0,xmm0,DWORD PTR [rbp-0x4]
  222059:	48 83 c4 30          	add    rsp,0x30
  22205d:	5d                   	pop    rbp
  22205e:	c3                   	ret    
            if (i == 0)
  22205f:	eb 00                	jmp    222061 <generic_fmod+0x1e1>
            ux = i;
  222061:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  222064:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
        if (i >> bits_minus_1 == 0) {
  222067:	eb 02                	jmp    22206b <generic_fmod+0x1eb>
  222069:	eb 00                	jmp    22206b <generic_fmod+0x1eb>
        }
        ux <<= 1;
  22206b:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  22206e:	c1 e0 01             	shl    eax,0x1
  222071:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    while (ex > ey) : (ex -= 1) {
  222074:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  222077:	83 e8 01             	sub    eax,0x1
  22207a:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
  22207d:	eb af                	jmp    22202e <generic_fmod+0x1ae>
    }
    i = ux -% uy;
  22207f:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  222082:	2b 45 f0             	sub    eax,DWORD PTR [rbp-0x10]
  222085:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    if (i >> bits_minus_1 == 0) {
  222088:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  22208b:	c1 e8 1f             	shr    eax,0x1f
  22208e:	83 f8 00             	cmp    eax,0x0
  222091:	75 1f                	jne    2220b2 <generic_fmod+0x232>
        if (i == 0)
  222093:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
  222097:	75 0f                	jne    2220a8 <generic_fmod+0x228>
  222099:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
            return 0 * x;
  22209d:	c5 fa 59 45 fc       	vmulss xmm0,xmm0,DWORD PTR [rbp-0x4]
  2220a2:	48 83 c4 30          	add    rsp,0x30
  2220a6:	5d                   	pop    rbp
  2220a7:	c3                   	ret    
        if (i == 0)
  2220a8:	eb 00                	jmp    2220aa <generic_fmod+0x22a>
        ux = i;
  2220aa:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  2220ad:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    if (i >> bits_minus_1 == 0) {
  2220b0:	eb 02                	jmp    2220b4 <generic_fmod+0x234>
  2220b2:	eb 00                	jmp    2220b4 <generic_fmod+0x234>
    }
    while (ux >> digits == 0) : (b: {
  2220b4:	eb 00                	jmp    2220b6 <generic_fmod+0x236>
  2220b6:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  2220b9:	c1 e8 17             	shr    eax,0x17
  2220bc:	83 f8 00             	cmp    eax,0x0
  2220bf:	75 16                	jne    2220d7 <generic_fmod+0x257>
  2220c1:	eb 00                	jmp    2220c3 <generic_fmod+0x243>
        ux <<= 1;
  2220c3:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  2220c6:	c1 e0 01             	shl    eax,0x1
  2220c9:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
        ex -= 1;
  2220cc:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  2220cf:	83 e8 01             	sub    eax,0x1
  2220d2:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    while (ux >> digits == 0) : (b: {
  2220d5:	eb df                	jmp    2220b6 <generic_fmod+0x236>
    }) {}

    // scale result up
    if (ex > 0) {
  2220d7:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
  2220db:	7e 1b                	jle    2220f8 <generic_fmod+0x278>
        ux -%= 1 << digits;
  2220dd:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  2220e0:	2d 00 00 80 00       	sub    eax,0x800000
  2220e5:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
        ux |= uint(@bitCast(u32, ex)) << digits;
  2220e8:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  2220eb:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
  2220ee:	c1 e1 17             	shl    ecx,0x17
  2220f1:	09 c8                	or     eax,ecx
  2220f3:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    if (ex > 0) {
  2220f6:	eb 17                	jmp    22210f <generic_fmod+0x28f>
    } else {
        ux >>= @intCast(log2uint, @bitCast(u32, -ex + 1));
  2220f8:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  2220fb:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
  2220fe:	ba 01 00 00 00       	mov    edx,0x1
  222103:	29 ca                	sub    edx,ecx
  222105:	83 e2 1f             	and    edx,0x1f
  222108:	89 d1                	mov    ecx,edx
  22210a:	d3 e8                	shr    eax,cl
  22210c:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    }
    if (T == f32) {
        ux |= sx;
  22210f:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  222112:	0b 45 e4             	or     eax,DWORD PTR [rbp-0x1c]
  222115:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    } else {
        ux |= @intCast(uint, sx) << bits_minus_1;
    }
    return @bitCast(T, ux);
  222118:	c5 f9 6e 45 f4       	vmovd  xmm0,DWORD PTR [rbp-0xc]
  22211d:	48 83 c4 30          	add    rsp,0x30
  222121:	5d                   	pop    rbp
  222122:	c3                   	ret    
  222123:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22212a:	84 00 00 00 00 00 

0000000000222130 <fmod>:
export fn fmod(x: f64, y: f64) f64 {
  222130:	55                   	push   rbp
  222131:	48 89 e5             	mov    rbp,rsp
  222134:	48 83 ec 10          	sub    rsp,0x10
  222138:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
  22213d:	c5 fb 11 4d f0       	vmovsd QWORD PTR [rbp-0x10],xmm1
    return generic_fmod(f64, x, y);
  222142:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  222147:	c5 fb 10 4d f0       	vmovsd xmm1,QWORD PTR [rbp-0x10]
  22214c:	e8 0f 00 00 00       	call   222160 <generic_fmod.1>
  222151:	48 83 c4 10          	add    rsp,0x10
  222155:	5d                   	pop    rbp
  222156:	c3                   	ret    
  222157:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  22215e:	00 00 

0000000000222160 <generic_fmod.1>:
fn generic_fmod(comptime T: type, x: T, y: T) T {
  222160:	55                   	push   rbp
  222161:	48 89 e5             	mov    rbp,rsp
  222164:	48 83 ec 40          	sub    rsp,0x40
  222168:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
  22216d:	c5 fb 11 4d f0       	vmovsd QWORD PTR [rbp-0x10],xmm1
    var ux = @bitCast(uint, x);
  222172:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  222177:	c4 e1 f9 7e c0       	vmovq  rax,xmm0
  22217c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    var uy = @bitCast(uint, y);
  222180:	c5 fb 10 45 f0       	vmovsd xmm0,QWORD PTR [rbp-0x10]
  222185:	c4 e1 f9 7e c0       	vmovq  rax,xmm0
  22218a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    var ex = @intCast(i32, (ux >> digits) & mask);
  22218e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  222192:	48 c1 e8 34          	shr    rax,0x34
  222196:	48 25 ff 07 00 00    	and    rax,0x7ff
  22219c:	89 c1                	mov    ecx,eax
  22219e:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
    var ey = @intCast(i32, (uy >> digits) & mask);
  2221a1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2221a5:	48 c1 e8 34          	shr    rax,0x34
  2221a9:	48 25 ff 07 00 00    	and    rax,0x7ff
  2221af:	89 c1                	mov    ecx,eax
  2221b1:	89 4d d8             	mov    DWORD PTR [rbp-0x28],ecx
    const sx = if (T == f32) @intCast(u32, ux & 0x80000000) else @intCast(i32, ux >> bits_minus_1);
  2221b4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2221b8:	48 c1 e8 3f          	shr    rax,0x3f
  2221bc:	89 c1                	mov    ecx,eax
  2221be:	89 4d d4             	mov    DWORD PTR [rbp-0x2c],ecx
    if (uy << 1 == 0 or isNan(uint, uy) or ex == mask)
  2221c1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2221c5:	48 c1 e0 01          	shl    rax,0x1
  2221c9:	48 83 f8 00          	cmp    rax,0x0
  2221cd:	0f 94 c2             	sete   dl
  2221d0:	f6 c2 01             	test   dl,0x1
  2221d3:	88 55 c7             	mov    BYTE PTR [rbp-0x39],dl
  2221d6:	75 0c                	jne    2221e4 <generic_fmod.1+0x84>
  2221d8:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2221dc:	e8 6f 12 00 00       	call   223450 <isNan.5>
  2221e1:	88 45 c7             	mov    BYTE PTR [rbp-0x39],al
  2221e4:	8a 45 c7             	mov    al,BYTE PTR [rbp-0x39]
  2221e7:	a8 01                	test   al,0x1
  2221e9:	88 45 c6             	mov    BYTE PTR [rbp-0x3a],al
  2221ec:	75 0d                	jne    2221fb <generic_fmod.1+0x9b>
  2221ee:	81 7d dc ff 07 00 00 	cmp    DWORD PTR [rbp-0x24],0x7ff
  2221f5:	0f 94 c0             	sete   al
  2221f8:	88 45 c6             	mov    BYTE PTR [rbp-0x3a],al
  2221fb:	8a 45 c6             	mov    al,BYTE PTR [rbp-0x3a]
  2221fe:	a8 01                	test   al,0x1
  222200:	75 02                	jne    222204 <generic_fmod.1+0xa4>
  222202:	eb 1e                	jmp    222222 <generic_fmod.1+0xc2>
        return (x * y) / (x * y);
  222204:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  222209:	c5 fb 59 45 f0       	vmulsd xmm0,xmm0,QWORD PTR [rbp-0x10]
  22220e:	c5 fb 10 4d f8       	vmovsd xmm1,QWORD PTR [rbp-0x8]
  222213:	c5 f3 59 4d f0       	vmulsd xmm1,xmm1,QWORD PTR [rbp-0x10]
  222218:	c5 fb 5e c1          	vdivsd xmm0,xmm0,xmm1
  22221c:	48 83 c4 40          	add    rsp,0x40
  222220:	5d                   	pop    rbp
  222221:	c3                   	ret    
    if (uy << 1 == 0 or isNan(uint, uy) or ex == mask)
  222222:	eb 00                	jmp    222224 <generic_fmod.1+0xc4>
    if (ux << 1 <= uy << 1) {
  222224:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  222228:	48 c1 e0 01          	shl    rax,0x1
  22222c:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  222230:	48 c1 e1 01          	shl    rcx,0x1
  222234:	48 39 c8             	cmp    rax,rcx
  222237:	77 31                	ja     22226a <generic_fmod.1+0x10a>
        if (ux << 1 == uy << 1)
  222239:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22223d:	48 c1 e0 01          	shl    rax,0x1
  222241:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  222245:	48 c1 e1 01          	shl    rcx,0x1
  222249:	48 39 c8             	cmp    rax,rcx
  22224c:	75 0f                	jne    22225d <generic_fmod.1+0xfd>
  22224e:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
            return 0 * x;
  222252:	c5 fb 59 45 f8       	vmulsd xmm0,xmm0,QWORD PTR [rbp-0x8]
  222257:	48 83 c4 40          	add    rsp,0x40
  22225b:	5d                   	pop    rbp
  22225c:	c3                   	ret    
        if (ux << 1 == uy << 1)
  22225d:	eb 00                	jmp    22225f <generic_fmod.1+0xff>
        return x;
  22225f:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  222264:	48 83 c4 40          	add    rsp,0x40
  222268:	5d                   	pop    rbp
  222269:	c3                   	ret    
    if (ux << 1 <= uy << 1) {
  22226a:	eb 00                	jmp    22226c <generic_fmod.1+0x10c>
    if (ex == 0) {
  22226c:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
  222270:	75 4f                	jne    2222c1 <generic_fmod.1+0x161>
        i = ux << exp_bits;
  222272:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  222276:	48 c1 e0 0c          	shl    rax,0xc
  22227a:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
        while (i >> bits_minus_1 == 0) : (b: {
  22227e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  222282:	48 c1 e8 3f          	shr    rax,0x3f
  222286:	48 83 f8 00          	cmp    rax,0x0
  22228a:	75 19                	jne    2222a5 <generic_fmod.1+0x145>
  22228c:	eb 00                	jmp    22228e <generic_fmod.1+0x12e>
            ex -= 1;
  22228e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  222291:	83 e8 01             	sub    eax,0x1
  222294:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
            i <<= 1;
  222297:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  22229b:	48 c1 e1 01          	shl    rcx,0x1
  22229f:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
        while (i >> bits_minus_1 == 0) : (b: {
  2222a3:	eb d9                	jmp    22227e <generic_fmod.1+0x11e>
        ux <<= @intCast(log2uint, @bitCast(u32, -ex + 1));
  2222a5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2222a9:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  2222ac:	ba 01 00 00 00       	mov    edx,0x1
  2222b1:	29 ca                	sub    edx,ecx
  2222b3:	83 e2 3f             	and    edx,0x3f
  2222b6:	89 d1                	mov    ecx,edx
  2222b8:	48 d3 e0             	shl    rax,cl
  2222bb:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    if (ex == 0) {
  2222bf:	eb 24                	jmp    2222e5 <generic_fmod.1+0x185>
  2222c1:	48 b8 00 00 00 00 00 	movabs rax,0x10000000000000
  2222c8:	00 10 00 
  2222cb:	48 b9 ff ff ff ff ff 	movabs rcx,0xfffffffffffff
  2222d2:	ff 0f 00 
        ux &= @maxValue(uint) >> exp_bits;
  2222d5:	48 23 4d e8          	and    rcx,QWORD PTR [rbp-0x18]
  2222d9:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
        ux |= 1 << digits;
  2222dd:	48 0b 45 e8          	or     rax,QWORD PTR [rbp-0x18]
  2222e1:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    if (ey == 0) {
  2222e5:	83 7d d8 00          	cmp    DWORD PTR [rbp-0x28],0x0
  2222e9:	75 4f                	jne    22233a <generic_fmod.1+0x1da>
        i = uy << exp_bits;
  2222eb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2222ef:	48 c1 e0 0c          	shl    rax,0xc
  2222f3:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
        while (i >> bits_minus_1 == 0) : (b: {
  2222f7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2222fb:	48 c1 e8 3f          	shr    rax,0x3f
  2222ff:	48 83 f8 00          	cmp    rax,0x0
  222303:	75 19                	jne    22231e <generic_fmod.1+0x1be>
  222305:	eb 00                	jmp    222307 <generic_fmod.1+0x1a7>
            ey -= 1;
  222307:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  22230a:	83 e8 01             	sub    eax,0x1
  22230d:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
            i <<= 1;
  222310:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  222314:	48 c1 e1 01          	shl    rcx,0x1
  222318:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
        while (i >> bits_minus_1 == 0) : (b: {
  22231c:	eb d9                	jmp    2222f7 <generic_fmod.1+0x197>
        uy <<= @intCast(log2uint, @bitCast(u32, -ey + 1));
  22231e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  222322:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
  222325:	ba 01 00 00 00       	mov    edx,0x1
  22232a:	29 ca                	sub    edx,ecx
  22232c:	83 e2 3f             	and    edx,0x3f
  22232f:	89 d1                	mov    ecx,edx
  222331:	48 d3 e0             	shl    rax,cl
  222334:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    if (ey == 0) {
  222338:	eb 24                	jmp    22235e <generic_fmod.1+0x1fe>
  22233a:	48 b8 00 00 00 00 00 	movabs rax,0x10000000000000
  222341:	00 10 00 
  222344:	48 b9 ff ff ff ff ff 	movabs rcx,0xfffffffffffff
  22234b:	ff 0f 00 
        uy &= @maxValue(uint) >> exp_bits;
  22234e:	48 23 4d e0          	and    rcx,QWORD PTR [rbp-0x20]
  222352:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
        uy |= 1 << digits;
  222356:	48 0b 45 e0          	or     rax,QWORD PTR [rbp-0x20]
  22235a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    while (ex > ey) : (ex -= 1) {
  22235e:	eb 00                	jmp    222360 <generic_fmod.1+0x200>
  222360:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  222363:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
  222366:	7e 55                	jle    2223bd <generic_fmod.1+0x25d>
        i = ux -% uy;
  222368:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22236c:	48 2b 45 e0          	sub    rax,QWORD PTR [rbp-0x20]
  222370:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
        if (i >> bits_minus_1 == 0) {
  222374:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  222378:	48 c1 e8 3f          	shr    rax,0x3f
  22237c:	48 83 f8 00          	cmp    rax,0x0
  222380:	75 22                	jne    2223a4 <generic_fmod.1+0x244>
            if (i == 0)
  222382:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
  222387:	75 0f                	jne    222398 <generic_fmod.1+0x238>
  222389:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
                return 0 * x;
  22238d:	c5 fb 59 45 f8       	vmulsd xmm0,xmm0,QWORD PTR [rbp-0x8]
  222392:	48 83 c4 40          	add    rsp,0x40
  222396:	5d                   	pop    rbp
  222397:	c3                   	ret    
            if (i == 0)
  222398:	eb 00                	jmp    22239a <generic_fmod.1+0x23a>
            ux = i;
  22239a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  22239e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
        if (i >> bits_minus_1 == 0) {
  2223a2:	eb 02                	jmp    2223a6 <generic_fmod.1+0x246>
  2223a4:	eb 00                	jmp    2223a6 <generic_fmod.1+0x246>
        ux <<= 1;
  2223a6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2223aa:	48 c1 e0 01          	shl    rax,0x1
  2223ae:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    while (ex > ey) : (ex -= 1) {
  2223b2:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  2223b5:	83 e9 01             	sub    ecx,0x1
  2223b8:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
  2223bb:	eb a3                	jmp    222360 <generic_fmod.1+0x200>
    i = ux -% uy;
  2223bd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2223c1:	48 2b 45 e0          	sub    rax,QWORD PTR [rbp-0x20]
  2223c5:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
    if (i >> bits_minus_1 == 0) {
  2223c9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2223cd:	48 c1 e8 3f          	shr    rax,0x3f
  2223d1:	48 83 f8 00          	cmp    rax,0x0
  2223d5:	75 22                	jne    2223f9 <generic_fmod.1+0x299>
        if (i == 0)
  2223d7:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
  2223dc:	75 0f                	jne    2223ed <generic_fmod.1+0x28d>
  2223de:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
            return 0 * x;
  2223e2:	c5 fb 59 45 f8       	vmulsd xmm0,xmm0,QWORD PTR [rbp-0x8]
  2223e7:	48 83 c4 40          	add    rsp,0x40
  2223eb:	5d                   	pop    rbp
  2223ec:	c3                   	ret    
        if (i == 0)
  2223ed:	eb 00                	jmp    2223ef <generic_fmod.1+0x28f>
        ux = i;
  2223ef:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2223f3:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    if (i >> bits_minus_1 == 0) {
  2223f7:	eb 02                	jmp    2223fb <generic_fmod.1+0x29b>
  2223f9:	eb 00                	jmp    2223fb <generic_fmod.1+0x29b>
    while (ux >> digits == 0) : (b: {
  2223fb:	eb 00                	jmp    2223fd <generic_fmod.1+0x29d>
  2223fd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  222401:	48 c1 e8 34          	shr    rax,0x34
  222405:	48 83 f8 00          	cmp    rax,0x0
  222409:	75 19                	jne    222424 <generic_fmod.1+0x2c4>
  22240b:	eb 00                	jmp    22240d <generic_fmod.1+0x2ad>
        ux <<= 1;
  22240d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  222411:	48 c1 e0 01          	shl    rax,0x1
  222415:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
        ex -= 1;
  222419:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  22241c:	83 e9 01             	sub    ecx,0x1
  22241f:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
    while (ux >> digits == 0) : (b: {
  222422:	eb d9                	jmp    2223fd <generic_fmod.1+0x29d>
    if (ex > 0) {
  222424:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
  222428:	7e 2b                	jle    222455 <generic_fmod.1+0x2f5>
  22242a:	48 b8 00 00 00 00 00 	movabs rax,0x10000000000000
  222431:	00 10 00 
        ux -%= 1 << digits;
  222434:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  222438:	48 29 c1             	sub    rcx,rax
  22243b:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
        ux |= uint(@bitCast(u32, ex)) << digits;
  22243f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  222443:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  222446:	89 d1                	mov    ecx,edx
  222448:	48 c1 e1 34          	shl    rcx,0x34
  22244c:	48 09 c8             	or     rax,rcx
  22244f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    if (ex > 0) {
  222453:	eb 1a                	jmp    22246f <generic_fmod.1+0x30f>
        ux >>= @intCast(log2uint, @bitCast(u32, -ex + 1));
  222455:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  222459:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  22245c:	ba 01 00 00 00       	mov    edx,0x1
  222461:	29 ca                	sub    edx,ecx
  222463:	83 e2 3f             	and    edx,0x3f
  222466:	89 d1                	mov    ecx,edx
  222468:	48 d3 e8             	shr    rax,cl
  22246b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
        ux |= @intCast(uint, sx) << bits_minus_1;
  22246f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  222473:	48 63 4d d4          	movsxd rcx,DWORD PTR [rbp-0x2c]
  222477:	48 c1 e1 3f          	shl    rcx,0x3f
  22247b:	48 09 c8             	or     rax,rcx
  22247e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    return @bitCast(T, ux);
  222482:	c5 fa 7e 45 e8       	vmovq  xmm0,QWORD PTR [rbp-0x18]
  222487:	48 83 c4 40          	add    rsp,0x40
  22248b:	5d                   	pop    rbp
  22248c:	c3                   	ret    
  22248d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000222490 <floorf>:
export fn floorf(x: f32) f32 {
  222490:	55                   	push   rbp
  222491:	48 89 e5             	mov    rbp,rsp
  222494:	48 83 ec 10          	sub    rsp,0x10
  222498:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
    return math.floor(x);
  22249d:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  2224a2:	e8 09 00 00 00       	call   2224b0 <floor.0>
  2224a7:	48 83 c4 10          	add    rsp,0x10
  2224ab:	5d                   	pop    rbp
  2224ac:	c3                   	ret    
  2224ad:	0f 1f 00             	nop    DWORD PTR [rax]

00000000002224b0 <floor.0>:
const builtin = @import("builtin");
const assert = std.debug.assert;
const std = @import("../index.zig");
const math = std.math;

pub fn floor(x: var) @typeOf(x) {
  2224b0:	55                   	push   rbp
  2224b1:	48 89 e5             	mov    rbp,rsp
  2224b4:	48 83 ec 10          	sub    rsp,0x10
  2224b8:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
    const T = @typeOf(x);
    return switch (T) {
        f16 => floor16(x),
        f32 => floor32(x),
  2224bd:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  2224c2:	e8 b9 0f 00 00       	call   223480 <floor32>
    return switch (T) {
  2224c7:	48 83 c4 10          	add    rsp,0x10
  2224cb:	5d                   	pop    rbp
  2224cc:	c3                   	ret    
  2224cd:	0f 1f 00             	nop    DWORD PTR [rax]

00000000002224d0 <ceilf>:
export fn ceilf(x: f32) f32 {
  2224d0:	55                   	push   rbp
  2224d1:	48 89 e5             	mov    rbp,rsp
  2224d4:	48 83 ec 10          	sub    rsp,0x10
  2224d8:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
    return math.ceil(x);
  2224dd:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  2224e2:	e8 09 00 00 00       	call   2224f0 <ceil.0>
  2224e7:	48 83 c4 10          	add    rsp,0x10
  2224eb:	5d                   	pop    rbp
  2224ec:	c3                   	ret    
  2224ed:	0f 1f 00             	nop    DWORD PTR [rax]

00000000002224f0 <ceil.0>:
const builtin = @import("builtin");
const std = @import("../index.zig");
const math = std.math;
const assert = std.debug.assert;

pub fn ceil(x: var) @typeOf(x) {
  2224f0:	55                   	push   rbp
  2224f1:	48 89 e5             	mov    rbp,rsp
  2224f4:	48 83 ec 10          	sub    rsp,0x10
  2224f8:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
    const T = @typeOf(x);
    return switch (T) {
        f32 => ceil32(x),
  2224fd:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  222502:	e8 59 11 00 00       	call   223660 <ceil32>
    return switch (T) {
  222507:	48 83 c4 10          	add    rsp,0x10
  22250b:	5d                   	pop    rbp
  22250c:	c3                   	ret    
  22250d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000222510 <floor>:
export fn floor(x: f64) f64 {
  222510:	55                   	push   rbp
  222511:	48 89 e5             	mov    rbp,rsp
  222514:	48 83 ec 10          	sub    rsp,0x10
  222518:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    return math.floor(x);
  22251d:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  222522:	e8 09 00 00 00       	call   222530 <floor.0.2>
  222527:	48 83 c4 10          	add    rsp,0x10
  22252b:	5d                   	pop    rbp
  22252c:	c3                   	ret    
  22252d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000222530 <floor.0.2>:
pub fn floor(x: var) @typeOf(x) {
  222530:	55                   	push   rbp
  222531:	48 89 e5             	mov    rbp,rsp
  222534:	48 83 ec 10          	sub    rsp,0x10
  222538:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
        f64 => floor64(x),
  22253d:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  222542:	e8 f9 12 00 00       	call   223840 <floor64>
    return switch (T) {
  222547:	48 83 c4 10          	add    rsp,0x10
  22254b:	5d                   	pop    rbp
  22254c:	c3                   	ret    
  22254d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000222550 <ceil>:
export fn ceil(x: f64) f64 {
  222550:	55                   	push   rbp
  222551:	48 89 e5             	mov    rbp,rsp
  222554:	48 83 ec 10          	sub    rsp,0x10
  222558:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    return math.ceil(x);
  22255d:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  222562:	e8 09 00 00 00       	call   222570 <ceil.0.3>
  222567:	48 83 c4 10          	add    rsp,0x10
  22256b:	5d                   	pop    rbp
  22256c:	c3                   	ret    
  22256d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000222570 <ceil.0.3>:
pub fn ceil(x: var) @typeOf(x) {
  222570:	55                   	push   rbp
  222571:	48 89 e5             	mov    rbp,rsp
  222574:	48 83 ec 10          	sub    rsp,0x10
  222578:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
        f64 => ceil64(x),
  22257d:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  222582:	e8 09 14 00 00       	call   223990 <ceil64>
    return switch (T) {
  222587:	48 83 c4 10          	add    rsp,0x10
  22258b:	5d                   	pop    rbp
  22258c:	c3                   	ret    
  22258d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000222590 <sqrt>:
}

// NOTE: The original code is full of implicit signed -> unsigned assumptions and u32 wraparound
// behaviour. Most intermediate i32 values are changed to u32 where appropriate but there are
// potentially some edge cases remaining that are not handled in the same way.
export fn sqrt(x: f64) f64 {
  222590:	55                   	push   rbp
  222591:	48 89 e5             	mov    rbp,rsp
  222594:	48 81 ec 60 01 00 00 	sub    rsp,0x160
  22259b:	c5 fb 10 0d a5 fe fd 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffdfea5]        # 202448 <__unnamed_168+0x8>
  2225a2:	ff 
  2225a3:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    const tiny: f64 = 1.0e-300;
  2225a8:	c5 fb 11 4d f0       	vmovsd QWORD PTR [rbp-0x10],xmm1
    const sign: u32 = 0x80000000;
  2225ad:	c7 45 ec 00 00 00 80 	mov    DWORD PTR [rbp-0x14],0x80000000
    const u = @bitCast(u64, x);
  2225b4:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  2225b9:	c4 e1 f9 7e c0       	vmovq  rax,xmm0
  2225be:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax

    var ix0 = @intCast(u32, u >> 32);
  2225c2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2225c6:	48 c1 e8 20          	shr    rax,0x20
  2225ca:	89 c1                	mov    ecx,eax
  2225cc:	89 ca                	mov    edx,ecx
  2225ce:	89 d6                	mov    esi,edx
  2225d0:	48 39 f0             	cmp    rax,rsi
  2225d3:	89 4d 94             	mov    DWORD PTR [rbp-0x6c],ecx
  2225d6:	0f 84 a1 04 00 00    	je     222a7d <sqrt+0x4ed>
  2225dc:	e9 c0 04 00 00       	jmp    222aa1 <sqrt+0x511>
    var ix1 = @intCast(u32, u & 0xFFFFFFFF);

    // sqrt(nan) = nan, sqrt(+inf) = +inf, sqrt(-inf) = nan
    if (ix0 & 0x7FF00000 == 0x7FF00000) {
        return x * x + x;
  2225e1:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  2225e6:	c5 fb 59 45 f8       	vmulsd xmm0,xmm0,QWORD PTR [rbp-0x8]
  2225eb:	c5 fb 58 45 f8       	vaddsd xmm0,xmm0,QWORD PTR [rbp-0x8]
  2225f0:	48 81 c4 60 01 00 00 	add    rsp,0x160
  2225f7:	5d                   	pop    rbp
  2225f8:	c3                   	ret    
    if (ix0 & 0x7FF00000 == 0x7FF00000) {
  2225f9:	eb 00                	jmp    2225fb <sqrt+0x6b>
  2225fb:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
    }

    // sqrt(+-0) = +-0
    if (x == 0.0) {
  2225ff:	c5 fb 10 4d f8       	vmovsd xmm1,QWORD PTR [rbp-0x8]
  222604:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  222608:	75 10                	jne    22261a <sqrt+0x8a>
  22260a:	7a 0e                	jp     22261a <sqrt+0x8a>
        return x;
  22260c:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  222611:	48 81 c4 60 01 00 00 	add    rsp,0x160
  222618:	5d                   	pop    rbp
  222619:	c3                   	ret    
    if (x == 0.0) {
  22261a:	eb 00                	jmp    22261c <sqrt+0x8c>
    }
    // sqrt(-ve) = snan
    if (ix0 & sign != 0) {
  22261c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  22261f:	25 00 00 00 80       	and    eax,0x80000000
  222624:	83 f8 00             	cmp    eax,0x0
  222627:	74 0e                	je     222637 <sqrt+0xa7>
        return math.snan(f64);
  222629:	e8 42 09 00 00       	call   222f70 <snan>
  22262e:	48 81 c4 60 01 00 00 	add    rsp,0x160
  222635:	5d                   	pop    rbp
  222636:	c3                   	ret    
    if (ix0 & sign != 0) {
  222637:	eb 00                	jmp    222639 <sqrt+0xa9>
    }

    // normalize x
    var m = @intCast(i32, ix0 >> 20);
  222639:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  22263c:	c1 e8 14             	shr    eax,0x14
  22263f:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
    if (m == 0) {
  222642:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
  222646:	75 7e                	jne    2226c6 <sqrt+0x136>
        // subnormal
        while (ix0 == 0) {
  222648:	eb 00                	jmp    22264a <sqrt+0xba>
  22264a:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
  22264e:	75 1a                	jne    22266a <sqrt+0xda>
            m -= 21;
  222650:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
  222653:	83 e8 15             	sub    eax,0x15
  222656:	0f 90 c1             	seto   cl
  222659:	89 45 90             	mov    DWORD PTR [rbp-0x70],eax
  22265c:	88 4d 8f             	mov    BYTE PTR [rbp-0x71],cl
  22265f:	0f 80 7f 04 00 00    	jo     222ae4 <sqrt+0x554>
  222665:	e9 8a 04 00 00       	jmp    222af4 <sqrt+0x564>
            ix0 |= ix1 >> 11;
            ix1 <<= 21;
        }

        // subnormal
        var i: u32 = 0;
  22266a:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
        while (ix0 & 0x00100000 == 0) : (i += 1) {
  222671:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  222674:	25 00 00 10 00       	and    eax,0x100000
  222679:	83 f8 00             	cmp    eax,0x0
  22267c:	75 23                	jne    2226a1 <sqrt+0x111>
            ix0 <<= 1;
  22267e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  222681:	c1 e0 01             	shl    eax,0x1
  222684:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
        while (ix0 & 0x00100000 == 0) : (i += 1) {
  222687:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
  22268a:	83 c0 01             	add    eax,0x1
  22268d:	0f 92 c1             	setb   cl
  222690:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
  222693:	88 4d 87             	mov    BYTE PTR [rbp-0x79],cl
  222696:	0f 82 7a 04 00 00    	jb     222b16 <sqrt+0x586>
  22269c:	e9 85 04 00 00       	jmp    222b26 <sqrt+0x596>
        }
        m -= @intCast(i32, i) - 1;
  2226a1:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
  2226a4:	8b 4d d0             	mov    ecx,DWORD PTR [rbp-0x30]
  2226a7:	ff c9                	dec    ecx
  2226a9:	0f 90 c2             	seto   dl
  2226ac:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
  2226af:	89 8d 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],ecx
  2226b5:	88 95 7b ff ff ff    	mov    BYTE PTR [rbp-0x85],dl
  2226bb:	0f 80 70 04 00 00    	jo     222b31 <sqrt+0x5a1>
  2226c1:	e9 7b 04 00 00       	jmp    222b41 <sqrt+0x5b1>
    if (m == 0) {
  2226c6:	eb 00                	jmp    2226c8 <sqrt+0x138>
        ix0 |= ix1 >> @intCast(u5, 32 - i);
        ix1 <<= @intCast(u5, i);
    }

    // unbias exponent
    m -= 1023;
  2226c8:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
  2226cb:	2d ff 03 00 00       	sub    eax,0x3ff
  2226d0:	0f 90 c1             	seto   cl
  2226d3:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
  2226d9:	88 8d 73 ff ff ff    	mov    BYTE PTR [rbp-0x8d],cl
  2226df:	0f 80 6a 05 00 00    	jo     222c4f <sqrt+0x6bf>
  2226e5:	e9 75 05 00 00       	jmp    222c5f <sqrt+0x6cf>
    ix0 = (ix0 & 0x000FFFFF) | 0x00100000;
    if (m & 1 != 0) {
        ix0 += ix0 + (ix1 >> 31);
  2226ea:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  2226ed:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  2226f0:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
  2226f3:	c1 ea 1f             	shr    edx,0x1f
  2226f6:	01 d1                	add    ecx,edx
  2226f8:	40 0f 92 c6          	setb   sil
  2226fc:	89 85 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],eax
  222702:	89 8d 68 ff ff ff    	mov    DWORD PTR [rbp-0x98],ecx
  222708:	40 88 b5 67 ff ff ff 	mov    BYTE PTR [rbp-0x99],sil
  22270f:	0f 82 79 05 00 00    	jb     222c8e <sqrt+0x6fe>
  222715:	e9 84 05 00 00       	jmp    222c9e <sqrt+0x70e>
    if (m & 1 != 0) {
  22271a:	eb 00                	jmp    22271c <sqrt+0x18c>
        ix1 = ix1 +% ix1;
    }
    m >>= 1;
  22271c:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
  22271f:	c1 f8 01             	sar    eax,0x1
  222722:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax

    // sqrt(x) bit by bit
    ix0 += ix0 + (ix1 >> 31);
  222725:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  222728:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  22272b:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
  22272e:	c1 ea 1f             	shr    edx,0x1f
  222731:	01 d1                	add    ecx,edx
  222733:	40 0f 92 c6          	setb   sil
  222737:	89 85 60 ff ff ff    	mov    DWORD PTR [rbp-0xa0],eax
  22273d:	89 8d 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],ecx
  222743:	40 88 b5 5b ff ff ff 	mov    BYTE PTR [rbp-0xa5],sil
  22274a:	0f 82 96 05 00 00    	jb     222ce6 <sqrt+0x756>
  222750:	e9 a1 05 00 00       	jmp    222cf6 <sqrt+0x766>
    var s1: u32 = 0;
    var r: u32 = 0x00200000;
    var t: u32 = undefined;
    var t1: u32 = undefined;

    while (r != 0) {
  222755:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
  222759:	74 58                	je     2227b3 <sqrt+0x223>
        t = s0 +% r;
  22275b:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
  22275e:	03 45 bc             	add    eax,DWORD PTR [rbp-0x44]
  222761:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
        if (t <= ix0) {
  222764:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
  222767:	3b 45 dc             	cmp    eax,DWORD PTR [rbp-0x24]
  22276a:	77 20                	ja     22278c <sqrt+0x1fc>
            s0 = t + r;
  22276c:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
  22276f:	03 45 bc             	add    eax,DWORD PTR [rbp-0x44]
  222772:	0f 92 c1             	setb   cl
  222775:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
  22277b:	88 8d 53 ff ff ff    	mov    BYTE PTR [rbp-0xad],cl
  222781:	0f 82 28 06 00 00    	jb     222daf <sqrt+0x81f>
  222787:	e9 33 06 00 00       	jmp    222dbf <sqrt+0x82f>
        if (t <= ix0) {
  22278c:	eb 00                	jmp    22278e <sqrt+0x1fe>
            ix0 -= t;
            q += r;
        }
        ix0 = ix0 +% ix0 +% (ix1 >> 31);
  22278e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  222791:	03 45 dc             	add    eax,DWORD PTR [rbp-0x24]
  222794:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
  222797:	c1 e9 1f             	shr    ecx,0x1f
  22279a:	01 c8                	add    eax,ecx
  22279c:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
        ix1 = ix1 +% ix1;
  22279f:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  2227a2:	03 45 d8             	add    eax,DWORD PTR [rbp-0x28]
  2227a5:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
        r >>= 1;
  2227a8:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  2227ab:	c1 e8 01             	shr    eax,0x1
  2227ae:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
    while (r != 0) {
  2227b1:	eb a2                	jmp    222755 <sqrt+0x1c5>
    }

    r = sign;
  2227b3:	c7 45 bc 00 00 00 80 	mov    DWORD PTR [rbp-0x44],0x80000000
    while (r != 0) {
  2227ba:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
  2227be:	0f 84 60 01 00 00    	je     222924 <sqrt+0x394>
        t = s1 +% r;
  2227c4:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
  2227c7:	03 45 bc             	add    eax,DWORD PTR [rbp-0x44]
  2227ca:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
        t = s0;
  2227cd:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
  2227d0:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
        if (t < ix0 or (t == ix0 and t1 <= ix1)) {
  2227d3:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
  2227d6:	3b 45 dc             	cmp    eax,DWORD PTR [rbp-0x24]
  2227d9:	0f 92 c1             	setb   cl
  2227dc:	f6 c1 01             	test   cl,0x1
  2227df:	88 8d 52 ff ff ff    	mov    BYTE PTR [rbp-0xae],cl
  2227e5:	75 31                	jne    222818 <sqrt+0x288>
  2227e7:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
  2227ea:	3b 45 dc             	cmp    eax,DWORD PTR [rbp-0x24]
  2227ed:	0f 94 c1             	sete   cl
  2227f0:	f6 c1 01             	test   cl,0x1
  2227f3:	88 8d 51 ff ff ff    	mov    BYTE PTR [rbp-0xaf],cl
  2227f9:	75 02                	jne    2227fd <sqrt+0x26d>
  2227fb:	eb 0f                	jmp    22280c <sqrt+0x27c>
  2227fd:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
  222800:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
  222803:	0f 96 c1             	setbe  cl
  222806:	88 8d 51 ff ff ff    	mov    BYTE PTR [rbp-0xaf],cl
  22280c:	8a 85 51 ff ff ff    	mov    al,BYTE PTR [rbp-0xaf]
  222812:	88 85 52 ff ff ff    	mov    BYTE PTR [rbp-0xae],al
  222818:	8a 85 52 ff ff ff    	mov    al,BYTE PTR [rbp-0xae]
  22281e:	a8 01                	test   al,0x1
  222820:	75 05                	jne    222827 <sqrt+0x297>
  222822:	e9 d3 00 00 00       	jmp    2228fa <sqrt+0x36a>
            s1 = t1 +% r;
  222827:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
  22282a:	03 45 bc             	add    eax,DWORD PTR [rbp-0x44]
  22282d:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
            if (t1 & sign == sign and s1 & sign == 0) {
  222830:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
  222833:	25 00 00 00 80       	and    eax,0x80000000
  222838:	3d 00 00 00 80       	cmp    eax,0x80000000
  22283d:	0f 94 c1             	sete   cl
  222840:	f6 c1 01             	test   cl,0x1
  222843:	88 8d 50 ff ff ff    	mov    BYTE PTR [rbp-0xb0],cl
  222849:	75 02                	jne    22284d <sqrt+0x2bd>
  22284b:	eb 14                	jmp    222861 <sqrt+0x2d1>
  22284d:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
  222850:	25 00 00 00 80       	and    eax,0x80000000
  222855:	83 f8 00             	cmp    eax,0x0
  222858:	0f 94 c1             	sete   cl
  22285b:	88 8d 50 ff ff ff    	mov    BYTE PTR [rbp-0xb0],cl
  222861:	8a 85 50 ff ff ff    	mov    al,BYTE PTR [rbp-0xb0]
  222867:	a8 01                	test   al,0x1
  222869:	75 02                	jne    22286d <sqrt+0x2dd>
  22286b:	eb 20                	jmp    22288d <sqrt+0x2fd>
                s0 += 1;
  22286d:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
  222870:	83 c0 01             	add    eax,0x1
  222873:	0f 92 c1             	setb   cl
  222876:	89 85 4c ff ff ff    	mov    DWORD PTR [rbp-0xb4],eax
  22287c:	88 8d 4b ff ff ff    	mov    BYTE PTR [rbp-0xb5],cl
  222882:	0f 82 a9 05 00 00    	jb     222e31 <sqrt+0x8a1>
  222888:	e9 b4 05 00 00       	jmp    222e41 <sqrt+0x8b1>
            if (t1 & sign == sign and s1 & sign == 0) {
  22288d:	eb 00                	jmp    22288f <sqrt+0x2ff>
            }
            ix0 -= t;
  22288f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  222892:	2b 45 b8             	sub    eax,DWORD PTR [rbp-0x48]
  222895:	0f 92 c1             	setb   cl
  222898:	89 85 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],eax
  22289e:	88 8d 43 ff ff ff    	mov    BYTE PTR [rbp-0xbd],cl
  2228a4:	0f 82 a5 05 00 00    	jb     222e4f <sqrt+0x8bf>
  2228aa:	e9 b0 05 00 00       	jmp    222e5f <sqrt+0x8cf>
            if (ix1 < t1) {
                ix0 -= 1;
  2228af:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  2228b2:	83 e8 01             	sub    eax,0x1
  2228b5:	0f 92 c1             	setb   cl
  2228b8:	89 85 3c ff ff ff    	mov    DWORD PTR [rbp-0xc4],eax
  2228be:	88 8d 3b ff ff ff    	mov    BYTE PTR [rbp-0xc5],cl
  2228c4:	0f 82 af 05 00 00    	jb     222e79 <sqrt+0x8e9>
  2228ca:	e9 ba 05 00 00       	jmp    222e89 <sqrt+0x8f9>
            if (ix1 < t1) {
  2228cf:	eb 00                	jmp    2228d1 <sqrt+0x341>
            }
            ix1 = ix1 -% t1;
  2228d1:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  2228d4:	2b 45 b4             	sub    eax,DWORD PTR [rbp-0x4c]
  2228d7:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
            q1 += r;
  2228da:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  2228dd:	03 45 bc             	add    eax,DWORD PTR [rbp-0x44]
  2228e0:	0f 92 c1             	setb   cl
  2228e3:	89 85 34 ff ff ff    	mov    DWORD PTR [rbp-0xcc],eax
  2228e9:	88 8d 33 ff ff ff    	mov    BYTE PTR [rbp-0xcd],cl
  2228ef:	0f 82 a2 05 00 00    	jb     222e97 <sqrt+0x907>
  2228f5:	e9 ad 05 00 00       	jmp    222ea7 <sqrt+0x917>
        if (t < ix0 or (t == ix0 and t1 <= ix1)) {
  2228fa:	eb 00                	jmp    2228fc <sqrt+0x36c>
        }
        ix0 = ix0 +% ix0 +% (ix1 >> 31);
  2228fc:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  2228ff:	03 45 dc             	add    eax,DWORD PTR [rbp-0x24]
  222902:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
  222905:	c1 e9 1f             	shr    ecx,0x1f
  222908:	01 c8                	add    eax,ecx
  22290a:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
        ix1 = ix1 +% ix1;
  22290d:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  222910:	03 45 d8             	add    eax,DWORD PTR [rbp-0x28]
  222913:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
        r >>= 1;
  222916:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  222919:	c1 e8 01             	shr    eax,0x1
  22291c:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
    while (r != 0) {
  22291f:	e9 96 fe ff ff       	jmp    2227ba <sqrt+0x22a>
    }

    // rounding direction
    if (ix0 | ix1 != 0) {
  222924:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  222927:	0b 45 d8             	or     eax,DWORD PTR [rbp-0x28]
  22292a:	83 f8 00             	cmp    eax,0x0
  22292d:	0f 84 de 00 00 00    	je     222a11 <sqrt+0x481>
  222933:	c5 fb 10 05 75 fa fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffdfa75]        # 2023b0 <__unnamed_165+0x8>
  22293a:	ff 
        var z = 1.0 - tiny; // raise inexact
  22293b:	c5 fb 11 45 a8       	vmovsd QWORD PTR [rbp-0x58],xmm0
        if (z >= 1.0) {
  222940:	c5 fb 10 4d a8       	vmovsd xmm1,QWORD PTR [rbp-0x58]
  222945:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  222949:	0f 82 be 00 00 00    	jb     222a0d <sqrt+0x47d>
  22294f:	c5 fb 10 05 59 fa fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffdfa59]        # 2023b0 <__unnamed_165+0x8>
  222956:	ff 
            z = 1.0 + tiny;
  222957:	c5 fb 11 45 a8       	vmovsd QWORD PTR [rbp-0x58],xmm0
            if (q1 == 0xFFFFFFFF) {
  22295c:	83 7d c8 ff          	cmp    DWORD PTR [rbp-0x38],0xffffffff
  222960:	75 27                	jne    222989 <sqrt+0x3f9>
                q1 = 0;
  222962:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [rbp-0x38],0x0
                q += 1;
  222969:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  22296c:	83 c0 01             	add    eax,0x1
  22296f:	0f 92 c1             	setb   cl
  222972:	89 85 2c ff ff ff    	mov    DWORD PTR [rbp-0xd4],eax
  222978:	88 8d 2b ff ff ff    	mov    BYTE PTR [rbp-0xd5],cl
  22297e:	0f 82 31 05 00 00    	jb     222eb5 <sqrt+0x925>
  222984:	e9 3c 05 00 00       	jmp    222ec5 <sqrt+0x935>
  222989:	c5 fb 10 05 1f fa fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffdfa1f]        # 2023b0 <__unnamed_165+0x8>
  222990:	ff 
            } else if (z > 1.0) {
  222991:	c5 fb 10 4d a8       	vmovsd xmm1,QWORD PTR [rbp-0x58]
  222996:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22299a:	76 48                	jbe    2229e4 <sqrt+0x454>
                if (q1 == 0xFFFFFFFE) {
  22299c:	83 7d c8 fe          	cmp    DWORD PTR [rbp-0x38],0xfffffffe
  2229a0:	75 20                	jne    2229c2 <sqrt+0x432>
                    q += 1;
  2229a2:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  2229a5:	83 c0 01             	add    eax,0x1
  2229a8:	0f 92 c1             	setb   cl
  2229ab:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
  2229b1:	88 8d 23 ff ff ff    	mov    BYTE PTR [rbp-0xdd],cl
  2229b7:	0f 82 16 05 00 00    	jb     222ed3 <sqrt+0x943>
  2229bd:	e9 21 05 00 00       	jmp    222ee3 <sqrt+0x953>
                if (q1 == 0xFFFFFFFE) {
  2229c2:	eb 00                	jmp    2229c4 <sqrt+0x434>
                }
                q1 += 2;
  2229c4:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  2229c7:	83 c0 02             	add    eax,0x2
  2229ca:	0f 92 c1             	setb   cl
  2229cd:	89 85 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],eax
  2229d3:	88 8d 1b ff ff ff    	mov    BYTE PTR [rbp-0xe5],cl
  2229d9:	0f 82 12 05 00 00    	jb     222ef1 <sqrt+0x961>
  2229df:	e9 1d 05 00 00       	jmp    222f01 <sqrt+0x971>
            } else {
                q1 += q1 & 1;
  2229e4:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  2229e7:	8b 4d c8             	mov    ecx,DWORD PTR [rbp-0x38]
  2229ea:	83 e1 01             	and    ecx,0x1
  2229ed:	01 c8                	add    eax,ecx
  2229ef:	0f 92 c2             	setb   dl
  2229f2:	89 85 14 ff ff ff    	mov    DWORD PTR [rbp-0xec],eax
  2229f8:	88 95 13 ff ff ff    	mov    BYTE PTR [rbp-0xed],dl
  2229fe:	0f 82 0b 05 00 00    	jb     222f0f <sqrt+0x97f>
  222a04:	e9 16 05 00 00       	jmp    222f1f <sqrt+0x98f>
            if (q1 == 0xFFFFFFFF) {
  222a09:	eb 00                	jmp    222a0b <sqrt+0x47b>
        if (z >= 1.0) {
  222a0b:	eb 02                	jmp    222a0f <sqrt+0x47f>
  222a0d:	eb 00                	jmp    222a0f <sqrt+0x47f>
    if (ix0 | ix1 != 0) {
  222a0f:	eb 02                	jmp    222a13 <sqrt+0x483>
  222a11:	eb 00                	jmp    222a13 <sqrt+0x483>
            }
        }
    }

    ix0 = (q >> 1) + 0x3FE00000;
  222a13:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  222a16:	c1 e8 01             	shr    eax,0x1
  222a19:	05 00 00 e0 3f       	add    eax,0x3fe00000
  222a1e:	0f 92 c1             	setb   cl
  222a21:	89 85 0c ff ff ff    	mov    DWORD PTR [rbp-0xf4],eax
  222a27:	88 8d 0b ff ff ff    	mov    BYTE PTR [rbp-0xf5],cl
  222a2d:	0f 82 fa 04 00 00    	jb     222f2d <sqrt+0x99d>
  222a33:	e9 05 05 00 00       	jmp    222f3d <sqrt+0x9ad>
    ix1 = q1 >> 1;
    if (q & 1 != 0) {
        ix1 |= 0x80000000;
  222a38:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  222a3b:	0d 00 00 00 80       	or     eax,0x80000000
  222a40:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
    if (q & 1 != 0) {
  222a43:	eb 02                	jmp    222a47 <sqrt+0x4b7>
  222a45:	eb 00                	jmp    222a47 <sqrt+0x4b7>
    }

    // NOTE: musl here appears to rely on signed twos-complement wraparound. +% has the same
    // behaviour at least.
    var iix0 = @intCast(i32, ix0);
  222a47:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  222a4a:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
    iix0 = iix0 +% (m << 20);
  222a4d:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
  222a50:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
  222a53:	c1 e1 14             	shl    ecx,0x14
  222a56:	01 c8                	add    eax,ecx
  222a58:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax

    const uz = (@intCast(u64, iix0) << 32) | ix1;
  222a5b:	48 63 55 a4          	movsxd rdx,DWORD PTR [rbp-0x5c]
  222a5f:	48 c1 e2 20          	shl    rdx,0x20
  222a63:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  222a66:	89 c6                	mov    esi,eax
  222a68:	48 09 f2             	or     rdx,rsi
  222a6b:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
    return @bitCast(f64, uz);
  222a6f:	c5 fa 7e 45 98       	vmovq  xmm0,QWORD PTR [rbp-0x68]
  222a74:	48 81 c4 60 01 00 00 	add    rsp,0x160
  222a7b:	5d                   	pop    rbp
  222a7c:	c3                   	ret    
  222a7d:	b8 ff ff ff ff       	mov    eax,0xffffffff
  222a82:	89 c1                	mov    ecx,eax
    var ix0 = @intCast(u32, u >> 32);
  222a84:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
  222a87:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
    var ix1 = @intCast(u32, u & 0xFFFFFFFF);
  222a8a:	48 23 4d e0          	and    rcx,QWORD PTR [rbp-0x20]
  222a8e:	89 ca                	mov    edx,ecx
  222a90:	89 d6                	mov    esi,edx
  222a92:	89 f7                	mov    edi,esi
  222a94:	48 39 f9             	cmp    rcx,rdi
  222a97:	89 95 04 ff ff ff    	mov    DWORD PTR [rbp-0xfc],edx
  222a9d:	74 12                	je     222ab1 <sqrt+0x521>
  222a9f:	eb 33                	jmp    222ad4 <sqrt+0x544>
  222aa1:	48 8d 3d 40 2f 00 00 	lea    rdi,[rip+0x2f40]        # 2259e8 <__unnamed_3>
  222aa8:	31 c0                	xor    eax,eax
  222aaa:	89 c6                	mov    esi,eax
    var ix0 = @intCast(u32, u >> 32);
  222aac:	e8 df f1 ff ff       	call   221c90 <panic>
    var ix1 = @intCast(u32, u & 0xFFFFFFFF);
  222ab1:	8b 85 04 ff ff ff    	mov    eax,DWORD PTR [rbp-0xfc]
  222ab7:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
    if (ix0 & 0x7FF00000 == 0x7FF00000) {
  222aba:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  222abd:	81 e1 00 00 f0 7f    	and    ecx,0x7ff00000
  222ac3:	81 f9 00 00 f0 7f    	cmp    ecx,0x7ff00000
  222ac9:	0f 84 12 fb ff ff    	je     2225e1 <sqrt+0x51>
  222acf:	e9 25 fb ff ff       	jmp    2225f9 <sqrt+0x69>
  222ad4:	48 8d 3d 0d 2f 00 00 	lea    rdi,[rip+0x2f0d]        # 2259e8 <__unnamed_3>
  222adb:	31 c0                	xor    eax,eax
  222add:	89 c6                	mov    esi,eax
    var ix1 = @intCast(u32, u & 0xFFFFFFFF);
  222adf:	e8 ac f1 ff ff       	call   221c90 <panic>
  222ae4:	48 8d 3d 15 2f 00 00 	lea    rdi,[rip+0x2f15]        # 225a00 <__unnamed_4>
  222aeb:	31 c0                	xor    eax,eax
  222aed:	89 c6                	mov    esi,eax
            m -= 21;
  222aef:	e8 9c f1 ff ff       	call   221c90 <panic>
  222af4:	8b 45 90             	mov    eax,DWORD PTR [rbp-0x70]
  222af7:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
            ix0 |= ix1 >> 11;
  222afa:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  222afd:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
  222b00:	c1 ea 0b             	shr    edx,0xb
  222b03:	09 d1                	or     ecx,edx
  222b05:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
            ix1 <<= 21;
  222b08:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
  222b0b:	c1 e1 15             	shl    ecx,0x15
  222b0e:	89 4d d8             	mov    DWORD PTR [rbp-0x28],ecx
        while (ix0 == 0) {
  222b11:	e9 34 fb ff ff       	jmp    22264a <sqrt+0xba>
  222b16:	48 8d 3d e3 2e 00 00 	lea    rdi,[rip+0x2ee3]        # 225a00 <__unnamed_4>
  222b1d:	31 c0                	xor    eax,eax
  222b1f:	89 c6                	mov    esi,eax
        while (ix0 & 0x00100000 == 0) : (i += 1) {
  222b21:	e8 6a f1 ff ff       	call   221c90 <panic>
  222b26:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
  222b29:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
  222b2c:	e9 40 fb ff ff       	jmp    222671 <sqrt+0xe1>
  222b31:	48 8d 3d c8 2e 00 00 	lea    rdi,[rip+0x2ec8]        # 225a00 <__unnamed_4>
  222b38:	31 c0                	xor    eax,eax
  222b3a:	89 c6                	mov    esi,eax
        m -= @intCast(i32, i) - 1;
  222b3c:	e8 4f f1 ff ff       	call   221c90 <panic>
  222b41:	8b 45 80             	mov    eax,DWORD PTR [rbp-0x80]
  222b44:	8b 8d 7c ff ff ff    	mov    ecx,DWORD PTR [rbp-0x84]
  222b4a:	29 c8                	sub    eax,ecx
  222b4c:	0f 90 c2             	seto   dl
  222b4f:	89 85 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],eax
  222b55:	88 95 ff fe ff ff    	mov    BYTE PTR [rbp-0x101],dl
  222b5b:	70 02                	jo     222b5f <sqrt+0x5cf>
  222b5d:	eb 10                	jmp    222b6f <sqrt+0x5df>
  222b5f:	48 8d 3d 9a 2e 00 00 	lea    rdi,[rip+0x2e9a]        # 225a00 <__unnamed_4>
  222b66:	31 c0                	xor    eax,eax
  222b68:	89 c6                	mov    esi,eax
  222b6a:	e8 21 f1 ff ff       	call   221c90 <panic>
  222b6f:	b8 20 00 00 00       	mov    eax,0x20
  222b74:	8b 8d 00 ff ff ff    	mov    ecx,DWORD PTR [rbp-0x100]
  222b7a:	89 4d d4             	mov    DWORD PTR [rbp-0x2c],ecx
        ix0 |= ix1 >> @intCast(u5, 32 - i);
  222b7d:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  222b80:	8b 75 d8             	mov    esi,DWORD PTR [rbp-0x28]
  222b83:	2b 45 d0             	sub    eax,DWORD PTR [rbp-0x30]
  222b86:	40 0f 92 c7          	setb   dil
  222b8a:	89 b5 f8 fe ff ff    	mov    DWORD PTR [rbp-0x108],esi
  222b90:	89 95 f4 fe ff ff    	mov    DWORD PTR [rbp-0x10c],edx
  222b96:	89 85 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],eax
  222b9c:	40 88 bd ef fe ff ff 	mov    BYTE PTR [rbp-0x111],dil
  222ba3:	72 02                	jb     222ba7 <sqrt+0x617>
  222ba5:	eb 10                	jmp    222bb7 <sqrt+0x627>
  222ba7:	48 8d 3d 52 2e 00 00 	lea    rdi,[rip+0x2e52]        # 225a00 <__unnamed_4>
  222bae:	31 c0                	xor    eax,eax
  222bb0:	89 c6                	mov    esi,eax
  222bb2:	e8 d9 f0 ff ff       	call   221c90 <panic>
  222bb7:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
  222bbd:	88 c1                	mov    cl,al
  222bbf:	83 e0 1f             	and    eax,0x1f
  222bc2:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
  222bc8:	39 c2                	cmp    edx,eax
  222bca:	88 8d ee fe ff ff    	mov    BYTE PTR [rbp-0x112],cl
  222bd0:	75 42                	jne    222c14 <sqrt+0x684>
  222bd2:	8a 8d ee fe ff ff    	mov    cl,BYTE PTR [rbp-0x112]
  222bd8:	88 c8                	mov    al,cl
  222bda:	8b 95 f8 fe ff ff    	mov    edx,DWORD PTR [rbp-0x108]
  222be0:	c4 e2 7b f7 c2       	shrx   eax,edx,eax
  222be5:	8b b5 f4 fe ff ff    	mov    esi,DWORD PTR [rbp-0x10c]
  222beb:	09 c6                	or     esi,eax
  222bed:	89 75 dc             	mov    DWORD PTR [rbp-0x24],esi
        ix1 <<= @intCast(u5, i);
  222bf0:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  222bf3:	8b 75 d0             	mov    esi,DWORD PTR [rbp-0x30]
  222bf6:	40 88 f7             	mov    dil,sil
  222bf9:	41 89 f0             	mov    r8d,esi
  222bfc:	41 83 e0 1f          	and    r8d,0x1f
  222c00:	44 39 c6             	cmp    esi,r8d
  222c03:	89 85 e8 fe ff ff    	mov    DWORD PTR [rbp-0x118],eax
  222c09:	40 88 bd e7 fe ff ff 	mov    BYTE PTR [rbp-0x119],dil
  222c10:	74 12                	je     222c24 <sqrt+0x694>
  222c12:	eb 2b                	jmp    222c3f <sqrt+0x6af>
  222c14:	48 8d 3d cd 2d 00 00 	lea    rdi,[rip+0x2dcd]        # 2259e8 <__unnamed_3>
  222c1b:	31 c0                	xor    eax,eax
  222c1d:	89 c6                	mov    esi,eax
        ix0 |= ix1 >> @intCast(u5, 32 - i);
  222c1f:	e8 6c f0 ff ff       	call   221c90 <panic>
        ix1 <<= @intCast(u5, i);
  222c24:	8a 85 e7 fe ff ff    	mov    al,BYTE PTR [rbp-0x119]
  222c2a:	24 1f                	and    al,0x1f
  222c2c:	0f b6 c8             	movzx  ecx,al
  222c2f:	8b 95 e8 fe ff ff    	mov    edx,DWORD PTR [rbp-0x118]
  222c35:	d3 e2                	shl    edx,cl
  222c37:	89 55 d8             	mov    DWORD PTR [rbp-0x28],edx
    if (m == 0) {
  222c3a:	e9 89 fa ff ff       	jmp    2226c8 <sqrt+0x138>
  222c3f:	48 8d 3d a2 2d 00 00 	lea    rdi,[rip+0x2da2]        # 2259e8 <__unnamed_3>
  222c46:	31 c0                	xor    eax,eax
  222c48:	89 c6                	mov    esi,eax
        ix1 <<= @intCast(u5, i);
  222c4a:	e8 41 f0 ff ff       	call   221c90 <panic>
  222c4f:	48 8d 3d aa 2d 00 00 	lea    rdi,[rip+0x2daa]        # 225a00 <__unnamed_4>
  222c56:	31 c0                	xor    eax,eax
  222c58:	89 c6                	mov    esi,eax
    m -= 1023;
  222c5a:	e8 31 f0 ff ff       	call   221c90 <panic>
  222c5f:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
  222c65:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
    ix0 = (ix0 & 0x000FFFFF) | 0x00100000;
  222c68:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  222c6b:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
  222c71:	81 c9 00 00 10 00    	or     ecx,0x100000
  222c77:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
    if (m & 1 != 0) {
  222c7a:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
  222c7d:	83 e1 01             	and    ecx,0x1
  222c80:	83 f9 00             	cmp    ecx,0x0
  222c83:	0f 85 61 fa ff ff    	jne    2226ea <sqrt+0x15a>
  222c89:	e9 8c fa ff ff       	jmp    22271a <sqrt+0x18a>
  222c8e:	48 8d 3d 6b 2d 00 00 	lea    rdi,[rip+0x2d6b]        # 225a00 <__unnamed_4>
  222c95:	31 c0                	xor    eax,eax
  222c97:	89 c6                	mov    esi,eax
        ix0 += ix0 + (ix1 >> 31);
  222c99:	e8 f2 ef ff ff       	call   221c90 <panic>
  222c9e:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
  222ca4:	8b 8d 68 ff ff ff    	mov    ecx,DWORD PTR [rbp-0x98]
  222caa:	01 c8                	add    eax,ecx
  222cac:	0f 92 c2             	setb   dl
  222caf:	89 85 e0 fe ff ff    	mov    DWORD PTR [rbp-0x120],eax
  222cb5:	88 95 df fe ff ff    	mov    BYTE PTR [rbp-0x121],dl
  222cbb:	72 02                	jb     222cbf <sqrt+0x72f>
  222cbd:	eb 10                	jmp    222ccf <sqrt+0x73f>
  222cbf:	48 8d 3d 3a 2d 00 00 	lea    rdi,[rip+0x2d3a]        # 225a00 <__unnamed_4>
  222cc6:	31 c0                	xor    eax,eax
  222cc8:	89 c6                	mov    esi,eax
  222cca:	e8 c1 ef ff ff       	call   221c90 <panic>
  222ccf:	8b 85 e0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x120]
  222cd5:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
        ix1 = ix1 +% ix1;
  222cd8:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
  222cdb:	03 4d d8             	add    ecx,DWORD PTR [rbp-0x28]
  222cde:	89 4d d8             	mov    DWORD PTR [rbp-0x28],ecx
    if (m & 1 != 0) {
  222ce1:	e9 36 fa ff ff       	jmp    22271c <sqrt+0x18c>
  222ce6:	48 8d 3d 13 2d 00 00 	lea    rdi,[rip+0x2d13]        # 225a00 <__unnamed_4>
  222ced:	31 c0                	xor    eax,eax
  222cef:	89 c6                	mov    esi,eax
    ix0 += ix0 + (ix1 >> 31);
  222cf1:	e8 9a ef ff ff       	call   221c90 <panic>
  222cf6:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa0]
  222cfc:	8b 8d 5c ff ff ff    	mov    ecx,DWORD PTR [rbp-0xa4]
  222d02:	01 c8                	add    eax,ecx
  222d04:	0f 92 c2             	setb   dl
  222d07:	89 85 d8 fe ff ff    	mov    DWORD PTR [rbp-0x128],eax
  222d0d:	88 95 d7 fe ff ff    	mov    BYTE PTR [rbp-0x129],dl
  222d13:	72 02                	jb     222d17 <sqrt+0x787>
  222d15:	eb 10                	jmp    222d27 <sqrt+0x797>
  222d17:	48 8d 3d e2 2c 00 00 	lea    rdi,[rip+0x2ce2]        # 225a00 <__unnamed_4>
  222d1e:	31 c0                	xor    eax,eax
  222d20:	89 c6                	mov    esi,eax
  222d22:	e8 69 ef ff ff       	call   221c90 <panic>
  222d27:	b8 aa 00 00 00       	mov    eax,0xaa
  222d2c:	b9 04 00 00 00       	mov    ecx,0x4
  222d31:	89 ca                	mov    edx,ecx
  222d33:	48 8d 75 b4          	lea    rsi,[rbp-0x4c]
  222d37:	48 8d 7d b8          	lea    rdi,[rbp-0x48]
  222d3b:	8b 8d d8 fe ff ff    	mov    ecx,DWORD PTR [rbp-0x128]
  222d41:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
    ix1 = ix1 +% ix1;
  222d44:	44 8b 45 d8          	mov    r8d,DWORD PTR [rbp-0x28]
  222d48:	44 03 45 d8          	add    r8d,DWORD PTR [rbp-0x28]
  222d4c:	44 89 45 d8          	mov    DWORD PTR [rbp-0x28],r8d
    var q: u32 = 0;
  222d50:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
    var q1: u32 = 0;
  222d57:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [rbp-0x38],0x0
    var s0: u32 = 0;
  222d5e:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x0
    var s1: u32 = 0;
  222d65:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [rbp-0x40],0x0
    var r: u32 = 0x00200000;
  222d6c:	c7 45 bc 00 00 20 00 	mov    DWORD PTR [rbp-0x44],0x200000
    var t: u32 = undefined;
  222d73:	48 89 b5 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rsi
  222d7a:	89 c6                	mov    esi,eax
  222d7c:	48 89 95 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rdx
  222d83:	89 85 bc fe ff ff    	mov    DWORD PTR [rbp-0x144],eax
  222d89:	e8 22 ef ff ff       	call   221cb0 <memset>
    var t1: u32 = undefined;
  222d8e:	48 8b 95 c8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x138]
  222d95:	48 89 d7             	mov    rdi,rdx
  222d98:	8b b5 bc fe ff ff    	mov    esi,DWORD PTR [rbp-0x144]
  222d9e:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  222da5:	e8 06 ef ff ff       	call   221cb0 <memset>
    while (r != 0) {
  222daa:	e9 a6 f9 ff ff       	jmp    222755 <sqrt+0x1c5>
  222daf:	48 8d 3d 4a 2c 00 00 	lea    rdi,[rip+0x2c4a]        # 225a00 <__unnamed_4>
  222db6:	31 c0                	xor    eax,eax
  222db8:	89 c6                	mov    esi,eax
            s0 = t + r;
  222dba:	e8 d1 ee ff ff       	call   221c90 <panic>
  222dbf:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
  222dc5:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
            ix0 -= t;
  222dc8:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  222dcb:	2b 4d b8             	sub    ecx,DWORD PTR [rbp-0x48]
  222dce:	0f 92 c2             	setb   dl
  222dd1:	89 8d b8 fe ff ff    	mov    DWORD PTR [rbp-0x148],ecx
  222dd7:	88 95 b7 fe ff ff    	mov    BYTE PTR [rbp-0x149],dl
  222ddd:	72 02                	jb     222de1 <sqrt+0x851>
  222ddf:	eb 10                	jmp    222df1 <sqrt+0x861>
  222de1:	48 8d 3d 18 2c 00 00 	lea    rdi,[rip+0x2c18]        # 225a00 <__unnamed_4>
  222de8:	31 c0                	xor    eax,eax
  222dea:	89 c6                	mov    esi,eax
  222dec:	e8 9f ee ff ff       	call   221c90 <panic>
  222df1:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
  222df7:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
            q += r;
  222dfa:	8b 4d cc             	mov    ecx,DWORD PTR [rbp-0x34]
  222dfd:	03 4d bc             	add    ecx,DWORD PTR [rbp-0x44]
  222e00:	0f 92 c2             	setb   dl
  222e03:	89 8d b0 fe ff ff    	mov    DWORD PTR [rbp-0x150],ecx
  222e09:	88 95 af fe ff ff    	mov    BYTE PTR [rbp-0x151],dl
  222e0f:	72 02                	jb     222e13 <sqrt+0x883>
  222e11:	eb 10                	jmp    222e23 <sqrt+0x893>
  222e13:	48 8d 3d e6 2b 00 00 	lea    rdi,[rip+0x2be6]        # 225a00 <__unnamed_4>
  222e1a:	31 c0                	xor    eax,eax
  222e1c:	89 c6                	mov    esi,eax
  222e1e:	e8 6d ee ff ff       	call   221c90 <panic>
  222e23:	8b 85 b0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x150]
  222e29:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
        if (t <= ix0) {
  222e2c:	e9 5d f9 ff ff       	jmp    22278e <sqrt+0x1fe>
  222e31:	48 8d 3d c8 2b 00 00 	lea    rdi,[rip+0x2bc8]        # 225a00 <__unnamed_4>
  222e38:	31 c0                	xor    eax,eax
  222e3a:	89 c6                	mov    esi,eax
                s0 += 1;
  222e3c:	e8 4f ee ff ff       	call   221c90 <panic>
  222e41:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [rbp-0xb4]
  222e47:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
            if (t1 & sign == sign and s1 & sign == 0) {
  222e4a:	e9 40 fa ff ff       	jmp    22288f <sqrt+0x2ff>
  222e4f:	48 8d 3d aa 2b 00 00 	lea    rdi,[rip+0x2baa]        # 225a00 <__unnamed_4>
  222e56:	31 c0                	xor    eax,eax
  222e58:	89 c6                	mov    esi,eax
            ix0 -= t;
  222e5a:	e8 31 ee ff ff       	call   221c90 <panic>
  222e5f:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
  222e65:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
            if (ix1 < t1) {
  222e68:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
  222e6b:	3b 4d b4             	cmp    ecx,DWORD PTR [rbp-0x4c]
  222e6e:	0f 82 3b fa ff ff    	jb     2228af <sqrt+0x31f>
  222e74:	e9 56 fa ff ff       	jmp    2228cf <sqrt+0x33f>
  222e79:	48 8d 3d 80 2b 00 00 	lea    rdi,[rip+0x2b80]        # 225a00 <__unnamed_4>
  222e80:	31 c0                	xor    eax,eax
  222e82:	89 c6                	mov    esi,eax
                ix0 -= 1;
  222e84:	e8 07 ee ff ff       	call   221c90 <panic>
  222e89:	8b 85 3c ff ff ff    	mov    eax,DWORD PTR [rbp-0xc4]
  222e8f:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
            if (ix1 < t1) {
  222e92:	e9 3a fa ff ff       	jmp    2228d1 <sqrt+0x341>
  222e97:	48 8d 3d 62 2b 00 00 	lea    rdi,[rip+0x2b62]        # 225a00 <__unnamed_4>
  222e9e:	31 c0                	xor    eax,eax
  222ea0:	89 c6                	mov    esi,eax
            q1 += r;
  222ea2:	e8 e9 ed ff ff       	call   221c90 <panic>
  222ea7:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
  222ead:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
        if (t < ix0 or (t == ix0 and t1 <= ix1)) {
  222eb0:	e9 47 fa ff ff       	jmp    2228fc <sqrt+0x36c>
  222eb5:	48 8d 3d 44 2b 00 00 	lea    rdi,[rip+0x2b44]        # 225a00 <__unnamed_4>
  222ebc:	31 c0                	xor    eax,eax
  222ebe:	89 c6                	mov    esi,eax
                q += 1;
  222ec0:	e8 cb ed ff ff       	call   221c90 <panic>
  222ec5:	8b 85 2c ff ff ff    	mov    eax,DWORD PTR [rbp-0xd4]
  222ecb:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
            if (q1 == 0xFFFFFFFF) {
  222ece:	e9 38 fb ff ff       	jmp    222a0b <sqrt+0x47b>
  222ed3:	48 8d 3d 26 2b 00 00 	lea    rdi,[rip+0x2b26]        # 225a00 <__unnamed_4>
  222eda:	31 c0                	xor    eax,eax
  222edc:	89 c6                	mov    esi,eax
                    q += 1;
  222ede:	e8 ad ed ff ff       	call   221c90 <panic>
  222ee3:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
  222ee9:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
                if (q1 == 0xFFFFFFFE) {
  222eec:	e9 d3 fa ff ff       	jmp    2229c4 <sqrt+0x434>
  222ef1:	48 8d 3d 08 2b 00 00 	lea    rdi,[rip+0x2b08]        # 225a00 <__unnamed_4>
  222ef8:	31 c0                	xor    eax,eax
  222efa:	89 c6                	mov    esi,eax
                q1 += 2;
  222efc:	e8 8f ed ff ff       	call   221c90 <panic>
  222f01:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
  222f07:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
            } else if (z > 1.0) {
  222f0a:	e9 fa fa ff ff       	jmp    222a09 <sqrt+0x479>
  222f0f:	48 8d 3d ea 2a 00 00 	lea    rdi,[rip+0x2aea]        # 225a00 <__unnamed_4>
  222f16:	31 c0                	xor    eax,eax
  222f18:	89 c6                	mov    esi,eax
                q1 += q1 & 1;
  222f1a:	e8 71 ed ff ff       	call   221c90 <panic>
  222f1f:	8b 85 14 ff ff ff    	mov    eax,DWORD PTR [rbp-0xec]
  222f25:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
            } else if (z > 1.0) {
  222f28:	e9 dc fa ff ff       	jmp    222a09 <sqrt+0x479>
  222f2d:	48 8d 3d cc 2a 00 00 	lea    rdi,[rip+0x2acc]        # 225a00 <__unnamed_4>
  222f34:	31 c0                	xor    eax,eax
  222f36:	89 c6                	mov    esi,eax
    ix0 = (q >> 1) + 0x3FE00000;
  222f38:	e8 53 ed ff ff       	call   221c90 <panic>
  222f3d:	8b 85 0c ff ff ff    	mov    eax,DWORD PTR [rbp-0xf4]
  222f43:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
    ix1 = q1 >> 1;
  222f46:	8b 4d c8             	mov    ecx,DWORD PTR [rbp-0x38]
  222f49:	c1 e9 01             	shr    ecx,0x1
  222f4c:	89 4d d8             	mov    DWORD PTR [rbp-0x28],ecx
    if (q & 1 != 0) {
  222f4f:	8b 4d cc             	mov    ecx,DWORD PTR [rbp-0x34]
  222f52:	83 e1 01             	and    ecx,0x1
  222f55:	83 f9 00             	cmp    ecx,0x0
  222f58:	0f 85 da fa ff ff    	jne    222a38 <sqrt+0x4a8>
  222f5e:	e9 e2 fa ff ff       	jmp    222a45 <sqrt+0x4b5>
  222f63:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  222f6a:	84 00 00 00 00 00 

0000000000222f70 <snan>:
    };
}

// Note: A signalling nan is identical to a standard right now by may have a different bit
// representation in the future when required.
pub fn snan(comptime T: type) T {
  222f70:	55                   	push   rbp
  222f71:	48 89 e5             	mov    rbp,rsp
  222f74:	c5 fb 10 05 84 f4 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffdf484]        # 202400 <__unnamed_169+0x8>
  222f7b:	ff 
    return switch (T) {
  222f7c:	5d                   	pop    rbp
  222f7d:	c3                   	ret    
  222f7e:	66 90                	xchg   ax,ax

0000000000222f80 <sqrtf>:
}

export fn sqrtf(x: f32) f32 {
  222f80:	55                   	push   rbp
  222f81:	48 89 e5             	mov    rbp,rsp
  222f84:	48 81 ec b0 00 00 00 	sub    rsp,0xb0
  222f8b:	c5 fa 10 0d c1 f4 fd 	vmovss xmm1,DWORD PTR [rip+0xfffffffffffdf4c1]        # 202454 <__unnamed_168+0x14>
  222f92:	ff 
  222f93:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
    const tiny: f32 = 1.0e-30;
  222f98:	c5 fa 11 4d f8       	vmovss DWORD PTR [rbp-0x8],xmm1
    const sign: i32 = @bitCast(i32, u32(0x80000000));
  222f9d:	c7 45 f4 00 00 00 80 	mov    DWORD PTR [rbp-0xc],0x80000000
    var ix: i32 = @bitCast(i32, x);
  222fa4:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  222fa9:	c5 f9 7e c0          	vmovd  eax,xmm0
  222fad:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax

    if ((ix & 0x7F800000) == 0x7F800000) {
  222fb0:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  222fb3:	25 00 00 80 7f       	and    eax,0x7f800000
  222fb8:	3d 00 00 80 7f       	cmp    eax,0x7f800000
  222fbd:	75 18                	jne    222fd7 <sqrtf+0x57>
        return x * x + x; // sqrt(nan) = nan, sqrt(+inf) = +inf, sqrt(-inf) = snan
  222fbf:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  222fc4:	c5 fa 59 45 fc       	vmulss xmm0,xmm0,DWORD PTR [rbp-0x4]
  222fc9:	c5 fa 58 45 fc       	vaddss xmm0,xmm0,DWORD PTR [rbp-0x4]
  222fce:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  222fd5:	5d                   	pop    rbp
  222fd6:	c3                   	ret    
    if ((ix & 0x7F800000) == 0x7F800000) {
  222fd7:	eb 00                	jmp    222fd9 <sqrtf+0x59>
    }

    // zero
    if (ix <= 0) {
  222fd9:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
  222fdd:	7f 35                	jg     223014 <sqrtf+0x94>
        if (ix & ~sign == 0) {
  222fdf:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  222fe2:	25 ff ff ff 7f       	and    eax,0x7fffffff
  222fe7:	83 f8 00             	cmp    eax,0x0
  222fea:	75 0e                	jne    222ffa <sqrtf+0x7a>
            return x; // sqrt (+-0) = +-0
  222fec:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  222ff1:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  222ff8:	5d                   	pop    rbp
  222ff9:	c3                   	ret    
        if (ix & ~sign == 0) {
  222ffa:	eb 00                	jmp    222ffc <sqrtf+0x7c>
        }
        if (ix < 0) {
  222ffc:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
  223000:	7d 0e                	jge    223010 <sqrtf+0x90>
            return math.snan(f32);
  223002:	e8 19 04 00 00       	call   223420 <snan.4>
  223007:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  22300e:	5d                   	pop    rbp
  22300f:	c3                   	ret    
        if (ix < 0) {
  223010:	eb 00                	jmp    223012 <sqrtf+0x92>
    if (ix <= 0) {
  223012:	eb 02                	jmp    223016 <sqrtf+0x96>
  223014:	eb 00                	jmp    223016 <sqrtf+0x96>
        }
    }

    // normalize
    var m = ix >> 23;
  223016:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  223019:	c1 f8 17             	sar    eax,0x17
  22301c:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    if (m == 0) {
  22301f:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
  223023:	75 55                	jne    22307a <sqrtf+0xfa>
        // subnormal
        var i: i32 = 0;
  223025:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
        while (ix & 0x00800000 == 0) : (i += 1) {
  22302c:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  22302f:	25 00 00 80 00       	and    eax,0x800000
  223034:	83 f8 00             	cmp    eax,0x0
  223037:	75 22                	jne    22305b <sqrtf+0xdb>
            ix <<= 1;
  223039:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  22303c:	c1 e0 01             	shl    eax,0x1
  22303f:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
        while (ix & 0x00800000 == 0) : (i += 1) {
  223042:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  223045:	ff c0                	inc    eax
  223047:	0f 90 c1             	seto   cl
  22304a:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
  22304d:	88 4d cf             	mov    BYTE PTR [rbp-0x31],cl
  223050:	0f 80 7a 01 00 00    	jo     2231d0 <sqrtf+0x250>
  223056:	e9 85 01 00 00       	jmp    2231e0 <sqrtf+0x260>
        }
        m -= i - 1;
  22305b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  22305e:	8b 4d e8             	mov    ecx,DWORD PTR [rbp-0x18]
  223061:	ff c9                	dec    ecx
  223063:	0f 90 c2             	seto   dl
  223066:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
  223069:	89 4d c4             	mov    DWORD PTR [rbp-0x3c],ecx
  22306c:	88 55 c3             	mov    BYTE PTR [rbp-0x3d],dl
  22306f:	0f 80 76 01 00 00    	jo     2231eb <sqrtf+0x26b>
  223075:	e9 81 01 00 00       	jmp    2231fb <sqrtf+0x27b>
    if (m == 0) {
  22307a:	eb 00                	jmp    22307c <sqrtf+0xfc>
    }

    m -= 127; // unbias exponent
  22307c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  22307f:	83 e8 7f             	sub    eax,0x7f
  223082:	0f 90 c1             	seto   cl
  223085:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
  223088:	88 4d bb             	mov    BYTE PTR [rbp-0x45],cl
  22308b:	0f 80 a3 01 00 00    	jo     223234 <sqrtf+0x2b4>
  223091:	e9 ae 01 00 00       	jmp    223244 <sqrtf+0x2c4>
    ix = (ix & 0x007FFFFF) | 0x00800000;

    if (m & 1 != 0) { // odd m, double x to even
        ix += ix;
  223096:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  223099:	03 45 f0             	add    eax,DWORD PTR [rbp-0x10]
  22309c:	0f 90 c1             	seto   cl
  22309f:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
  2230a2:	88 4d b3             	mov    BYTE PTR [rbp-0x4d],cl
  2230a5:	0f 80 c5 01 00 00    	jo     223270 <sqrtf+0x2f0>
  2230ab:	e9 d0 01 00 00       	jmp    223280 <sqrtf+0x300>
    if (m & 1 != 0) { // odd m, double x to even
  2230b0:	eb 00                	jmp    2230b2 <sqrtf+0x132>
    }

    m >>= 1; // m = [m / 2]
  2230b2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  2230b5:	c1 f8 01             	sar    eax,0x1
  2230b8:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax

    // sqrt(x) bit by bit
    ix += ix;
  2230bb:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  2230be:	03 45 f0             	add    eax,DWORD PTR [rbp-0x10]
  2230c1:	0f 90 c1             	seto   cl
  2230c4:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
  2230c7:	88 4d ab             	mov    BYTE PTR [rbp-0x55],cl
  2230ca:	0f 80 bb 01 00 00    	jo     22328b <sqrtf+0x30b>
  2230d0:	e9 c6 01 00 00       	jmp    22329b <sqrtf+0x31b>
    var q: i32 = 0; // q = sqrt(x)
    var s: i32 = 0;
    var r: i32 = 0x01000000; // r = moving bit right -> left

    while (r != 0) {
  2230d5:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
  2230d9:	74 50                	je     22312b <sqrtf+0x1ab>
        const t = s + r;
  2230db:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  2230de:	03 45 dc             	add    eax,DWORD PTR [rbp-0x24]
  2230e1:	0f 90 c1             	seto   cl
  2230e4:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
  2230e7:	88 4d a3             	mov    BYTE PTR [rbp-0x5d],cl
  2230ea:	0f 80 cb 01 00 00    	jo     2232bb <sqrtf+0x33b>
  2230f0:	e9 d6 01 00 00       	jmp    2232cb <sqrtf+0x34b>
        if (t <= ix) {
            s = t + r;
  2230f5:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  2230f8:	03 45 dc             	add    eax,DWORD PTR [rbp-0x24]
  2230fb:	0f 90 c1             	seto   cl
  2230fe:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
  223101:	88 4d 9b             	mov    BYTE PTR [rbp-0x65],cl
  223104:	0f 80 d8 01 00 00    	jo     2232e2 <sqrtf+0x362>
  22310a:	e9 e3 01 00 00       	jmp    2232f2 <sqrtf+0x372>
        if (t <= ix) {
  22310f:	eb 00                	jmp    223111 <sqrtf+0x191>
            ix -= t;
            q += r;
        }
        ix += ix;
  223111:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  223114:	03 45 f0             	add    eax,DWORD PTR [rbp-0x10]
  223117:	0f 90 c1             	seto   cl
  22311a:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
  22311d:	88 4d 93             	mov    BYTE PTR [rbp-0x6d],cl
  223120:	0f 80 3b 02 00 00    	jo     223361 <sqrtf+0x3e1>
  223126:	e9 46 02 00 00       	jmp    223371 <sqrtf+0x3f1>
        r >>= 1;
    }

    // floating add to find rounding direction
    if (ix != 0) {
  22312b:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
  22312f:	74 78                	je     2231a9 <sqrtf+0x229>
  223131:	c5 fa 10 05 1f f3 fd 	vmovss xmm0,DWORD PTR [rip+0xfffffffffffdf31f]        # 202458 <__unnamed_168+0x18>
  223138:	ff 
        var z = 1.0 - tiny; // inexact
  223139:	c5 fa 11 45 d4       	vmovss DWORD PTR [rbp-0x2c],xmm0
        if (z >= 1.0) {
  22313e:	c5 fa 10 4d d4       	vmovss xmm1,DWORD PTR [rbp-0x2c]
  223143:	c5 f8 2e c8          	vucomiss xmm1,xmm0
  223147:	72 5c                	jb     2231a5 <sqrtf+0x225>
  223149:	c5 fa 10 05 07 f3 fd 	vmovss xmm0,DWORD PTR [rip+0xfffffffffffdf307]        # 202458 <__unnamed_168+0x18>
  223150:	ff 
            z = 1.0 + tiny;
  223151:	c5 fa 11 45 d4       	vmovss DWORD PTR [rbp-0x2c],xmm0
            if (z > 1.0) {
  223156:	c5 fa 10 4d d4       	vmovss xmm1,DWORD PTR [rbp-0x2c]
  22315b:	c5 f8 2e c8          	vucomiss xmm1,xmm0
  22315f:	76 1a                	jbe    22317b <sqrtf+0x1fb>
                q += 2;
  223161:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  223164:	83 c0 02             	add    eax,0x2
  223167:	0f 90 c1             	seto   cl
  22316a:	89 45 8c             	mov    DWORD PTR [rbp-0x74],eax
  22316d:	88 4d 8b             	mov    BYTE PTR [rbp-0x75],cl
  223170:	0f 80 0f 02 00 00    	jo     223385 <sqrtf+0x405>
  223176:	e9 1a 02 00 00       	jmp    223395 <sqrtf+0x415>
            } else {
                if (q & 1 != 0) {
  22317b:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  22317e:	83 e0 01             	and    eax,0x1
  223181:	83 f8 00             	cmp    eax,0x0
  223184:	74 19                	je     22319f <sqrtf+0x21f>
                    q += 1;
  223186:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  223189:	ff c0                	inc    eax
  22318b:	0f 90 c1             	seto   cl
  22318e:	89 45 84             	mov    DWORD PTR [rbp-0x7c],eax
  223191:	88 4d 83             	mov    BYTE PTR [rbp-0x7d],cl
  223194:	0f 80 06 02 00 00    	jo     2233a0 <sqrtf+0x420>
  22319a:	e9 11 02 00 00       	jmp    2233b0 <sqrtf+0x430>
                if (q & 1 != 0) {
  22319f:	eb 00                	jmp    2231a1 <sqrtf+0x221>
            if (z > 1.0) {
  2231a1:	eb 00                	jmp    2231a3 <sqrtf+0x223>
        if (z >= 1.0) {
  2231a3:	eb 02                	jmp    2231a7 <sqrtf+0x227>
  2231a5:	eb 00                	jmp    2231a7 <sqrtf+0x227>
    if (ix != 0) {
  2231a7:	eb 02                	jmp    2231ab <sqrtf+0x22b>
  2231a9:	eb 00                	jmp    2231ab <sqrtf+0x22b>
                }
            }
        }
    }

    ix = (q >> 1) + 0x3f000000;
  2231ab:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  2231ae:	c1 f8 01             	sar    eax,0x1
  2231b1:	05 00 00 00 3f       	add    eax,0x3f000000
  2231b6:	0f 90 c1             	seto   cl
  2231b9:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
  2231bf:	88 8d 7b ff ff ff    	mov    BYTE PTR [rbp-0x85],cl
  2231c5:	0f 80 f0 01 00 00    	jo     2233bb <sqrtf+0x43b>
  2231cb:	e9 fb 01 00 00       	jmp    2233cb <sqrtf+0x44b>
  2231d0:	48 8d 3d 29 28 00 00 	lea    rdi,[rip+0x2829]        # 225a00 <__unnamed_4>
  2231d7:	31 c0                	xor    eax,eax
  2231d9:	89 c6                	mov    esi,eax
        while (ix & 0x00800000 == 0) : (i += 1) {
  2231db:	e8 b0 ea ff ff       	call   221c90 <panic>
  2231e0:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
  2231e3:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
  2231e6:	e9 41 fe ff ff       	jmp    22302c <sqrtf+0xac>
  2231eb:	48 8d 3d 0e 28 00 00 	lea    rdi,[rip+0x280e]        # 225a00 <__unnamed_4>
  2231f2:	31 c0                	xor    eax,eax
  2231f4:	89 c6                	mov    esi,eax
        m -= i - 1;
  2231f6:	e8 95 ea ff ff       	call   221c90 <panic>
  2231fb:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  2231fe:	8b 4d c4             	mov    ecx,DWORD PTR [rbp-0x3c]
  223201:	29 c8                	sub    eax,ecx
  223203:	0f 90 c2             	seto   dl
  223206:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
  22320c:	88 95 73 ff ff ff    	mov    BYTE PTR [rbp-0x8d],dl
  223212:	70 02                	jo     223216 <sqrtf+0x296>
  223214:	eb 10                	jmp    223226 <sqrtf+0x2a6>
  223216:	48 8d 3d e3 27 00 00 	lea    rdi,[rip+0x27e3]        # 225a00 <__unnamed_4>
  22321d:	31 c0                	xor    eax,eax
  22321f:	89 c6                	mov    esi,eax
  223221:	e8 6a ea ff ff       	call   221c90 <panic>
  223226:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
  22322c:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    if (m == 0) {
  22322f:	e9 48 fe ff ff       	jmp    22307c <sqrtf+0xfc>
  223234:	48 8d 3d c5 27 00 00 	lea    rdi,[rip+0x27c5]        # 225a00 <__unnamed_4>
  22323b:	31 c0                	xor    eax,eax
  22323d:	89 c6                	mov    esi,eax
    m -= 127; // unbias exponent
  22323f:	e8 4c ea ff ff       	call   221c90 <panic>
  223244:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  223247:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    ix = (ix & 0x007FFFFF) | 0x00800000;
  22324a:	8b 4d f0             	mov    ecx,DWORD PTR [rbp-0x10]
  22324d:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
  223253:	81 c9 00 00 80 00    	or     ecx,0x800000
  223259:	89 4d f0             	mov    DWORD PTR [rbp-0x10],ecx
    if (m & 1 != 0) { // odd m, double x to even
  22325c:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
  22325f:	83 e1 01             	and    ecx,0x1
  223262:	83 f9 00             	cmp    ecx,0x0
  223265:	0f 85 2b fe ff ff    	jne    223096 <sqrtf+0x116>
  22326b:	e9 40 fe ff ff       	jmp    2230b0 <sqrtf+0x130>
  223270:	48 8d 3d 89 27 00 00 	lea    rdi,[rip+0x2789]        # 225a00 <__unnamed_4>
  223277:	31 c0                	xor    eax,eax
  223279:	89 c6                	mov    esi,eax
        ix += ix;
  22327b:	e8 10 ea ff ff       	call   221c90 <panic>
  223280:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
  223283:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    if (m & 1 != 0) { // odd m, double x to even
  223286:	e9 27 fe ff ff       	jmp    2230b2 <sqrtf+0x132>
  22328b:	48 8d 3d 6e 27 00 00 	lea    rdi,[rip+0x276e]        # 225a00 <__unnamed_4>
  223292:	31 c0                	xor    eax,eax
  223294:	89 c6                	mov    esi,eax
    ix += ix;
  223296:	e8 f5 e9 ff ff       	call   221c90 <panic>
  22329b:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
  22329e:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    var q: i32 = 0; // q = sqrt(x)
  2232a1:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
    var s: i32 = 0;
  2232a8:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
    var r: i32 = 0x01000000; // r = moving bit right -> left
  2232af:	c7 45 dc 00 00 00 01 	mov    DWORD PTR [rbp-0x24],0x1000000
    while (r != 0) {
  2232b6:	e9 1a fe ff ff       	jmp    2230d5 <sqrtf+0x155>
  2232bb:	48 8d 3d 3e 27 00 00 	lea    rdi,[rip+0x273e]        # 225a00 <__unnamed_4>
  2232c2:	31 c0                	xor    eax,eax
  2232c4:	89 c6                	mov    esi,eax
        const t = s + r;
  2232c6:	e8 c5 e9 ff ff       	call   221c90 <panic>
  2232cb:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
  2232ce:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
        if (t <= ix) {
  2232d1:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
  2232d4:	3b 4d f0             	cmp    ecx,DWORD PTR [rbp-0x10]
  2232d7:	0f 8e 18 fe ff ff    	jle    2230f5 <sqrtf+0x175>
  2232dd:	e9 2d fe ff ff       	jmp    22310f <sqrtf+0x18f>
  2232e2:	48 8d 3d 17 27 00 00 	lea    rdi,[rip+0x2717]        # 225a00 <__unnamed_4>
  2232e9:	31 c0                	xor    eax,eax
  2232eb:	89 c6                	mov    esi,eax
            s = t + r;
  2232ed:	e8 9e e9 ff ff       	call   221c90 <panic>
  2232f2:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
  2232f5:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
            ix -= t;
  2232f8:	8b 4d f0             	mov    ecx,DWORD PTR [rbp-0x10]
  2232fb:	2b 4d d8             	sub    ecx,DWORD PTR [rbp-0x28]
  2232fe:	0f 90 c2             	seto   dl
  223301:	89 8d 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],ecx
  223307:	88 95 6b ff ff ff    	mov    BYTE PTR [rbp-0x95],dl
  22330d:	70 02                	jo     223311 <sqrtf+0x391>
  22330f:	eb 10                	jmp    223321 <sqrtf+0x3a1>
  223311:	48 8d 3d e8 26 00 00 	lea    rdi,[rip+0x26e8]        # 225a00 <__unnamed_4>
  223318:	31 c0                	xor    eax,eax
  22331a:	89 c6                	mov    esi,eax
  22331c:	e8 6f e9 ff ff       	call   221c90 <panic>
  223321:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
  223327:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
            q += r;
  22332a:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
  22332d:	03 4d dc             	add    ecx,DWORD PTR [rbp-0x24]
  223330:	0f 90 c2             	seto   dl
  223333:	89 8d 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],ecx
  223339:	88 95 63 ff ff ff    	mov    BYTE PTR [rbp-0x9d],dl
  22333f:	70 02                	jo     223343 <sqrtf+0x3c3>
  223341:	eb 10                	jmp    223353 <sqrtf+0x3d3>
  223343:	48 8d 3d b6 26 00 00 	lea    rdi,[rip+0x26b6]        # 225a00 <__unnamed_4>
  22334a:	31 c0                	xor    eax,eax
  22334c:	89 c6                	mov    esi,eax
  22334e:	e8 3d e9 ff ff       	call   221c90 <panic>
  223353:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
  223359:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
        if (t <= ix) {
  22335c:	e9 b0 fd ff ff       	jmp    223111 <sqrtf+0x191>
  223361:	48 8d 3d 98 26 00 00 	lea    rdi,[rip+0x2698]        # 225a00 <__unnamed_4>
  223368:	31 c0                	xor    eax,eax
  22336a:	89 c6                	mov    esi,eax
        ix += ix;
  22336c:	e8 1f e9 ff ff       	call   221c90 <panic>
  223371:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
  223374:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
        r >>= 1;
  223377:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  22337a:	c1 f9 01             	sar    ecx,0x1
  22337d:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
    while (r != 0) {
  223380:	e9 50 fd ff ff       	jmp    2230d5 <sqrtf+0x155>
  223385:	48 8d 3d 74 26 00 00 	lea    rdi,[rip+0x2674]        # 225a00 <__unnamed_4>
  22338c:	31 c0                	xor    eax,eax
  22338e:	89 c6                	mov    esi,eax
                q += 2;
  223390:	e8 fb e8 ff ff       	call   221c90 <panic>
  223395:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
  223398:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
            if (z > 1.0) {
  22339b:	e9 03 fe ff ff       	jmp    2231a3 <sqrtf+0x223>
  2233a0:	48 8d 3d 59 26 00 00 	lea    rdi,[rip+0x2659]        # 225a00 <__unnamed_4>
  2233a7:	31 c0                	xor    eax,eax
  2233a9:	89 c6                	mov    esi,eax
                    q += 1;
  2233ab:	e8 e0 e8 ff ff       	call   221c90 <panic>
  2233b0:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
  2233b3:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
                if (q & 1 != 0) {
  2233b6:	e9 e6 fd ff ff       	jmp    2231a1 <sqrtf+0x221>
  2233bb:	48 8d 3d 3e 26 00 00 	lea    rdi,[rip+0x263e]        # 225a00 <__unnamed_4>
  2233c2:	31 c0                	xor    eax,eax
  2233c4:	89 c6                	mov    esi,eax
    ix = (q >> 1) + 0x3f000000;
  2233c6:	e8 c5 e8 ff ff       	call   221c90 <panic>
  2233cb:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
  2233d1:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    ix += m << 23;
  2233d4:	8b 4d f0             	mov    ecx,DWORD PTR [rbp-0x10]
  2233d7:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
  2233da:	c1 e2 17             	shl    edx,0x17
  2233dd:	01 d1                	add    ecx,edx
  2233df:	40 0f 90 c6          	seto   sil
  2233e3:	89 8d 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],ecx
  2233e9:	40 88 b5 5b ff ff ff 	mov    BYTE PTR [rbp-0xa5],sil
  2233f0:	70 02                	jo     2233f4 <sqrtf+0x474>
  2233f2:	eb 10                	jmp    223404 <sqrtf+0x484>
  2233f4:	48 8d 3d 05 26 00 00 	lea    rdi,[rip+0x2605]        # 225a00 <__unnamed_4>
  2233fb:	31 c0                	xor    eax,eax
  2233fd:	89 c6                	mov    esi,eax
  2233ff:	e8 8c e8 ff ff       	call   221c90 <panic>
  223404:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
  22340a:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    return @bitCast(f32, ix);
  22340d:	c5 f9 6e 45 f0       	vmovd  xmm0,DWORD PTR [rbp-0x10]
  223412:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  223419:	5d                   	pop    rbp
  22341a:	c3                   	ret    
  22341b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000223420 <snan.4>:
pub fn snan(comptime T: type) T {
  223420:	55                   	push   rbp
  223421:	48 89 e5             	mov    rbp,rsp
  223424:	c5 fa 10 05 3c f0 fd 	vmovss xmm0,DWORD PTR [rip+0xfffffffffffdf03c]        # 202468 <__unnamed_21+0x4>
  22342b:	ff 
    return switch (T) {
  22342c:	5d                   	pop    rbp
  22342d:	c3                   	ret    
  22342e:	66 90                	xchg   ax,ax

0000000000223430 <isNan>:
fn isNan(comptime T: type, bits: T) bool {
  223430:	55                   	push   rbp
  223431:	48 89 e5             	mov    rbp,rsp
  223434:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
        return (bits & 0x7fffffff) > 0x7f800000;
  223437:	8b 7d fc             	mov    edi,DWORD PTR [rbp-0x4]
  22343a:	81 e7 ff ff ff 7f    	and    edi,0x7fffffff
  223440:	81 ef 00 00 80 7f    	sub    edi,0x7f800000
  223446:	0f 97 c0             	seta   al
  223449:	89 7d f8             	mov    DWORD PTR [rbp-0x8],edi
  22344c:	5d                   	pop    rbp
  22344d:	c3                   	ret    
  22344e:	66 90                	xchg   ax,ax

0000000000223450 <isNan.5>:
fn isNan(comptime T: type, bits: T) bool {
  223450:	55                   	push   rbp
  223451:	48 89 e5             	mov    rbp,rsp
  223454:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
        return (bits & (@maxValue(u64) >> 1)) > (u64(0x7ff) << 52);
  223458:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  22345c:	b0 3f                	mov    al,0x3f
  22345e:	88 c1                	mov    cl,al
  223460:	c4 e2 f0 f5 cf       	bzhi   rcx,rdi,rcx
  223465:	48 bf 00 00 00 00 00 	movabs rdi,0x7ff0000000000000
  22346c:	00 f0 7f 
  22346f:	48 29 f9             	sub    rcx,rdi
  223472:	0f 97 c0             	seta   al
  223475:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  223479:	5d                   	pop    rbp
  22347a:	c3                   	ret    
  22347b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000223480 <floor32>:
            return -1.0;
        }
    }
}

fn floor32(x: f32) f32 {
  223480:	55                   	push   rbp
  223481:	48 89 e5             	mov    rbp,rsp
  223484:	48 83 ec 30          	sub    rsp,0x30
  223488:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
    var u = @bitCast(u32, x);
  22348d:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  223492:	c5 f9 7e c0          	vmovd  eax,xmm0
  223496:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
    const e = @intCast(i32, (u >> 23) & 0xFF) - 0x7F;
  223499:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  22349c:	c1 e8 17             	shr    eax,0x17
  22349f:	25 ff 00 00 00       	and    eax,0xff
  2234a4:	83 e8 7f             	sub    eax,0x7f
  2234a7:	0f 90 c1             	seto   cl
  2234aa:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
  2234ad:	88 4d eb             	mov    BYTE PTR [rbp-0x15],cl
  2234b0:	0f 80 cf 00 00 00    	jo     223585 <floor32+0x105>
  2234b6:	e9 da 00 00 00       	jmp    223595 <floor32+0x115>
    var m: u32 = undefined;

    // TODO: Shouldn't need this explicit check.
    if (x == 0.0) {
        return x;
  2234bb:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  2234c0:	48 83 c4 30          	add    rsp,0x30
  2234c4:	5d                   	pop    rbp
  2234c5:	c3                   	ret    
    if (x == 0.0) {
  2234c6:	eb 00                	jmp    2234c8 <floor32+0x48>
    }

    if (e >= 23) {
  2234c8:	83 7d f4 17          	cmp    DWORD PTR [rbp-0xc],0x17
  2234cc:	7c 0b                	jl     2234d9 <floor32+0x59>
        return x;
  2234ce:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  2234d3:	48 83 c4 30          	add    rsp,0x30
  2234d7:	5d                   	pop    rbp
  2234d8:	c3                   	ret    
    if (e >= 23) {
  2234d9:	eb 00                	jmp    2234db <floor32+0x5b>
    }

    if (e >= 0) {
  2234db:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
  2234df:	7c 6f                	jl     223550 <floor32+0xd0>
        m = u32(0x007FFFFF) >> @intCast(u5, e);
  2234e1:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  2234e4:	83 f8 00             	cmp    eax,0x0
  2234e7:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
  2234ea:	0f 8d eb 00 00 00    	jge    2235db <floor32+0x15b>
  2234f0:	e9 fa 00 00 00       	jmp    2235ef <floor32+0x16f>
        if (u & m == 0) {
            return x;
  2234f5:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  2234fa:	48 83 c4 30          	add    rsp,0x30
  2234fe:	5d                   	pop    rbp
  2234ff:	c3                   	ret    
        if (u & m == 0) {
  223500:	eb 00                	jmp    223502 <floor32+0x82>
  223502:	c5 fa 10 05 46 ef fd 	vmovss xmm0,DWORD PTR [rip+0xfffffffffffdef46]        # 202450 <__unnamed_168+0x10>
  223509:	ff 
        }
        math.forceEval(x + 0x1.0p120);
  22350a:	c5 fa 58 45 fc       	vaddss xmm0,xmm0,DWORD PTR [rbp-0x4]
  22350f:	e8 cc 05 00 00       	call   223ae0 <forceEval>
        if (u >> 31 != 0) {
  223514:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  223517:	c1 e8 1f             	shr    eax,0x1f
  22351a:	83 f8 00             	cmp    eax,0x0
  22351d:	74 1a                	je     223539 <floor32+0xb9>
            u += m;
  22351f:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  223522:	03 45 f0             	add    eax,DWORD PTR [rbp-0x10]
  223525:	0f 92 c1             	setb   cl
  223528:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
  22352b:	88 4d df             	mov    BYTE PTR [rbp-0x21],cl
  22352e:	0f 82 02 01 00 00    	jb     223636 <floor32+0x1b6>
  223534:	e9 0d 01 00 00       	jmp    223646 <floor32+0x1c6>
        if (u >> 31 != 0) {
  223539:	eb 00                	jmp    22353b <floor32+0xbb>
        }
        return @bitCast(f32, u & ~m);
  22353b:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  22353e:	8b 4d f0             	mov    ecx,DWORD PTR [rbp-0x10]
  223541:	83 f1 ff             	xor    ecx,0xffffffff
  223544:	21 c8                	and    eax,ecx
  223546:	c5 f9 6e c0          	vmovd  xmm0,eax
  22354a:	48 83 c4 30          	add    rsp,0x30
  22354e:	5d                   	pop    rbp
  22354f:	c3                   	ret    
  223550:	c5 fa 10 05 f8 ee fd 	vmovss xmm0,DWORD PTR [rip+0xfffffffffffdeef8]        # 202450 <__unnamed_168+0x10>
  223557:	ff 
    } else {
        math.forceEval(x + 0x1.0p120);
  223558:	c5 fa 58 45 fc       	vaddss xmm0,xmm0,DWORD PTR [rbp-0x4]
  22355d:	e8 7e 05 00 00       	call   223ae0 <forceEval>
        if (u >> 31 == 0) {
  223562:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  223565:	c1 e8 1f             	shr    eax,0x1f
  223568:	83 f8 00             	cmp    eax,0x0
  22356b:	75 0a                	jne    223577 <floor32+0xf7>
  22356d:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
            return 0.0;
  223571:	48 83 c4 30          	add    rsp,0x30
  223575:	5d                   	pop    rbp
  223576:	c3                   	ret    
  223577:	c5 fa 10 05 dd ee fd 	vmovss xmm0,DWORD PTR [rip+0xfffffffffffdeedd]        # 20245c <__unnamed_168+0x1c>
  22357e:	ff 
        } else {
            return -1.0;
  22357f:	48 83 c4 30          	add    rsp,0x30
  223583:	5d                   	pop    rbp
  223584:	c3                   	ret    
  223585:	48 8d 3d 74 24 00 00 	lea    rdi,[rip+0x2474]        # 225a00 <__unnamed_4>
  22358c:	31 c0                	xor    eax,eax
  22358e:	89 c6                	mov    esi,eax
    const e = @intCast(i32, (u >> 23) & 0xFF) - 0x7F;
  223590:	e8 fb e6 ff ff       	call   221c90 <panic>
  223595:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
  223599:	be aa 00 00 00       	mov    esi,0xaa
  22359e:	b8 04 00 00 00       	mov    eax,0x4
  2235a3:	89 c2                	mov    edx,eax
  2235a5:	48 8d 4d f0          	lea    rcx,[rbp-0x10]
  2235a9:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  2235ac:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    var m: u32 = undefined;
  2235af:	48 89 cf             	mov    rdi,rcx
  2235b2:	c5 fa 11 45 d8       	vmovss DWORD PTR [rbp-0x28],xmm0
  2235b7:	e8 f4 e6 ff ff       	call   221cb0 <memset>
    if (x == 0.0) {
  2235bc:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  2235c1:	c5 fa 10 4d d8       	vmovss xmm1,DWORD PTR [rbp-0x28]
  2235c6:	c5 f8 2e c1          	vucomiss xmm0,xmm1
  2235ca:	0f 85 f6 fe ff ff    	jne    2234c6 <floor32+0x46>
  2235d0:	0f 8a f0 fe ff ff    	jp     2234c6 <floor32+0x46>
  2235d6:	e9 e0 fe ff ff       	jmp    2234bb <floor32+0x3b>
        m = u32(0x007FFFFF) >> @intCast(u5, e);
  2235db:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  2235de:	88 c1                	mov    cl,al
  2235e0:	83 e0 1f             	and    eax,0x1f
  2235e3:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
  2235e6:	39 c2                	cmp    edx,eax
  2235e8:	88 4d d7             	mov    BYTE PTR [rbp-0x29],cl
  2235eb:	74 12                	je     2235ff <floor32+0x17f>
  2235ed:	eb 37                	jmp    223626 <floor32+0x1a6>
  2235ef:	48 8d 3d 22 24 00 00 	lea    rdi,[rip+0x2422]        # 225a18 <__unnamed_5>
  2235f6:	31 c0                	xor    eax,eax
  2235f8:	89 c6                	mov    esi,eax
  2235fa:	e8 91 e6 ff ff       	call   221c90 <panic>
  2235ff:	b8 ff ff 7f 00       	mov    eax,0x7fffff
  223604:	8a 4d d7             	mov    cl,BYTE PTR [rbp-0x29]
  223607:	80 e1 1f             	and    cl,0x1f
  22360a:	0f b6 c9             	movzx  ecx,cl
  22360d:	d3 e8                	shr    eax,cl
  22360f:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
        if (u & m == 0) {
  223612:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  223615:	23 45 f0             	and    eax,DWORD PTR [rbp-0x10]
  223618:	83 f8 00             	cmp    eax,0x0
  22361b:	0f 84 d4 fe ff ff    	je     2234f5 <floor32+0x75>
  223621:	e9 da fe ff ff       	jmp    223500 <floor32+0x80>
  223626:	48 8d 3d bb 23 00 00 	lea    rdi,[rip+0x23bb]        # 2259e8 <__unnamed_3>
  22362d:	31 c0                	xor    eax,eax
  22362f:	89 c6                	mov    esi,eax
        m = u32(0x007FFFFF) >> @intCast(u5, e);
  223631:	e8 5a e6 ff ff       	call   221c90 <panic>
  223636:	48 8d 3d c3 23 00 00 	lea    rdi,[rip+0x23c3]        # 225a00 <__unnamed_4>
  22363d:	31 c0                	xor    eax,eax
  22363f:	89 c6                	mov    esi,eax
            u += m;
  223641:	e8 4a e6 ff ff       	call   221c90 <panic>
  223646:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  223649:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
        if (u >> 31 != 0) {
  22364c:	e9 ea fe ff ff       	jmp    22353b <floor32+0xbb>
  223651:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  223658:	0f 1f 84 00 00 00 00 
  22365f:	00 

0000000000223660 <ceil32>:
        else => @compileError("ceil not implemented for " ++ @typeName(T)),
    };
}

fn ceil32(x: f32) f32 {
  223660:	55                   	push   rbp
  223661:	48 89 e5             	mov    rbp,rsp
  223664:	48 83 ec 30          	sub    rsp,0x30
  223668:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
    var u = @bitCast(u32, x);
  22366d:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  223672:	c5 f9 7e c0          	vmovd  eax,xmm0
  223676:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
    var e = @intCast(i32, (u >> 23) & 0xFF) - 0x7F;
  223679:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  22367c:	c1 e8 17             	shr    eax,0x17
  22367f:	25 ff 00 00 00       	and    eax,0xff
  223684:	83 e8 7f             	sub    eax,0x7f
  223687:	0f 90 c1             	seto   cl
  22368a:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
  22368d:	88 4d eb             	mov    BYTE PTR [rbp-0x15],cl
  223690:	0f 80 d1 00 00 00    	jo     223767 <ceil32+0x107>
  223696:	e9 dc 00 00 00       	jmp    223777 <ceil32+0x117>
    var m: u32 = undefined;

    // TODO: Shouldn't need this explicit check.
    if (x == 0.0) {
        return x;
  22369b:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  2236a0:	48 83 c4 30          	add    rsp,0x30
  2236a4:	5d                   	pop    rbp
  2236a5:	c3                   	ret    
    if (x == 0.0) {
  2236a6:	eb 00                	jmp    2236a8 <ceil32+0x48>
    }

    if (e >= 23) {
  2236a8:	83 7d f4 17          	cmp    DWORD PTR [rbp-0xc],0x17
  2236ac:	7c 0b                	jl     2236b9 <ceil32+0x59>
        return x;
  2236ae:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  2236b3:	48 83 c4 30          	add    rsp,0x30
  2236b7:	5d                   	pop    rbp
  2236b8:	c3                   	ret    
    } else if (e >= 0) {
  2236b9:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
  2236bd:	7c 73                	jl     223732 <ceil32+0xd2>
        m = u32(0x007FFFFF) >> @intCast(u5, e);
  2236bf:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  2236c2:	83 f8 00             	cmp    eax,0x0
  2236c5:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
  2236c8:	0f 8d ef 00 00 00    	jge    2237bd <ceil32+0x15d>
  2236ce:	e9 fe 00 00 00       	jmp    2237d1 <ceil32+0x171>
        if (u & m == 0) {
            return x;
  2236d3:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  2236d8:	48 83 c4 30          	add    rsp,0x30
  2236dc:	5d                   	pop    rbp
  2236dd:	c3                   	ret    
        if (u & m == 0) {
  2236de:	eb 00                	jmp    2236e0 <ceil32+0x80>
  2236e0:	c5 fa 10 05 68 ed fd 	vmovss xmm0,DWORD PTR [rip+0xfffffffffffded68]        # 202450 <__unnamed_168+0x10>
  2236e7:	ff 
        }
        math.forceEval(x + 0x1.0p120);
  2236e8:	c5 fa 58 45 fc       	vaddss xmm0,xmm0,DWORD PTR [rbp-0x4]
  2236ed:	e8 ee 03 00 00       	call   223ae0 <forceEval>
        if (u >> 31 == 0) {
  2236f2:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  2236f5:	c1 e8 1f             	shr    eax,0x1f
  2236f8:	83 f8 00             	cmp    eax,0x0
  2236fb:	75 1a                	jne    223717 <ceil32+0xb7>
            u += m;
  2236fd:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  223700:	03 45 f0             	add    eax,DWORD PTR [rbp-0x10]
  223703:	0f 92 c1             	setb   cl
  223706:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
  223709:	88 4d df             	mov    BYTE PTR [rbp-0x21],cl
  22370c:	0f 82 06 01 00 00    	jb     223818 <ceil32+0x1b8>
  223712:	e9 11 01 00 00       	jmp    223828 <ceil32+0x1c8>
        if (u >> 31 == 0) {
  223717:	eb 00                	jmp    223719 <ceil32+0xb9>
        }
        u &= ~m;
  223719:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  22371c:	8b 4d f0             	mov    ecx,DWORD PTR [rbp-0x10]
  22371f:	83 f1 ff             	xor    ecx,0xffffffff
  223722:	21 c8                	and    eax,ecx
  223724:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
        return @bitCast(f32, u);
  223727:	c5 f9 6e 45 f8       	vmovd  xmm0,DWORD PTR [rbp-0x8]
  22372c:	48 83 c4 30          	add    rsp,0x30
  223730:	5d                   	pop    rbp
  223731:	c3                   	ret    
  223732:	c5 fa 10 05 16 ed fd 	vmovss xmm0,DWORD PTR [rip+0xfffffffffffded16]        # 202450 <__unnamed_168+0x10>
  223739:	ff 
    } else {
        math.forceEval(x + 0x1.0p120);
  22373a:	c5 fa 58 45 fc       	vaddss xmm0,xmm0,DWORD PTR [rbp-0x4]
  22373f:	e8 9c 03 00 00       	call   223ae0 <forceEval>
        if (u >> 31 != 0) {
  223744:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  223747:	c1 e8 1f             	shr    eax,0x1f
  22374a:	83 f8 00             	cmp    eax,0x0
  22374d:	74 0a                	je     223759 <ceil32+0xf9>
  22374f:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
            return -0.0;
  223753:	48 83 c4 30          	add    rsp,0x30
  223757:	5d                   	pop    rbp
  223758:	c3                   	ret    
  223759:	c5 fa 10 05 f7 ec fd 	vmovss xmm0,DWORD PTR [rip+0xfffffffffffdecf7]        # 202458 <__unnamed_168+0x18>
  223760:	ff 
        } else {
            return 1.0;
  223761:	48 83 c4 30          	add    rsp,0x30
  223765:	5d                   	pop    rbp
  223766:	c3                   	ret    
  223767:	48 8d 3d 92 22 00 00 	lea    rdi,[rip+0x2292]        # 225a00 <__unnamed_4>
  22376e:	31 c0                	xor    eax,eax
  223770:	89 c6                	mov    esi,eax
    var e = @intCast(i32, (u >> 23) & 0xFF) - 0x7F;
  223772:	e8 19 e5 ff ff       	call   221c90 <panic>
  223777:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
  22377b:	be aa 00 00 00       	mov    esi,0xaa
  223780:	b8 04 00 00 00       	mov    eax,0x4
  223785:	89 c2                	mov    edx,eax
  223787:	48 8d 4d f0          	lea    rcx,[rbp-0x10]
  22378b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  22378e:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    var m: u32 = undefined;
  223791:	48 89 cf             	mov    rdi,rcx
  223794:	c5 fa 11 45 d8       	vmovss DWORD PTR [rbp-0x28],xmm0
  223799:	e8 12 e5 ff ff       	call   221cb0 <memset>
    if (x == 0.0) {
  22379e:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  2237a3:	c5 fa 10 4d d8       	vmovss xmm1,DWORD PTR [rbp-0x28]
  2237a8:	c5 f8 2e c1          	vucomiss xmm0,xmm1
  2237ac:	0f 85 f4 fe ff ff    	jne    2236a6 <ceil32+0x46>
  2237b2:	0f 8a ee fe ff ff    	jp     2236a6 <ceil32+0x46>
  2237b8:	e9 de fe ff ff       	jmp    22369b <ceil32+0x3b>
        m = u32(0x007FFFFF) >> @intCast(u5, e);
  2237bd:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  2237c0:	88 c1                	mov    cl,al
  2237c2:	83 e0 1f             	and    eax,0x1f
  2237c5:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
  2237c8:	39 c2                	cmp    edx,eax
  2237ca:	88 4d d7             	mov    BYTE PTR [rbp-0x29],cl
  2237cd:	74 12                	je     2237e1 <ceil32+0x181>
  2237cf:	eb 37                	jmp    223808 <ceil32+0x1a8>
  2237d1:	48 8d 3d 40 22 00 00 	lea    rdi,[rip+0x2240]        # 225a18 <__unnamed_5>
  2237d8:	31 c0                	xor    eax,eax
  2237da:	89 c6                	mov    esi,eax
  2237dc:	e8 af e4 ff ff       	call   221c90 <panic>
  2237e1:	b8 ff ff 7f 00       	mov    eax,0x7fffff
  2237e6:	8a 4d d7             	mov    cl,BYTE PTR [rbp-0x29]
  2237e9:	80 e1 1f             	and    cl,0x1f
  2237ec:	0f b6 c9             	movzx  ecx,cl
  2237ef:	d3 e8                	shr    eax,cl
  2237f1:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
        if (u & m == 0) {
  2237f4:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  2237f7:	23 45 f0             	and    eax,DWORD PTR [rbp-0x10]
  2237fa:	83 f8 00             	cmp    eax,0x0
  2237fd:	0f 84 d0 fe ff ff    	je     2236d3 <ceil32+0x73>
  223803:	e9 d6 fe ff ff       	jmp    2236de <ceil32+0x7e>
  223808:	48 8d 3d d9 21 00 00 	lea    rdi,[rip+0x21d9]        # 2259e8 <__unnamed_3>
  22380f:	31 c0                	xor    eax,eax
  223811:	89 c6                	mov    esi,eax
        m = u32(0x007FFFFF) >> @intCast(u5, e);
  223813:	e8 78 e4 ff ff       	call   221c90 <panic>
  223818:	48 8d 3d e1 21 00 00 	lea    rdi,[rip+0x21e1]        # 225a00 <__unnamed_4>
  22381f:	31 c0                	xor    eax,eax
  223821:	89 c6                	mov    esi,eax
            u += m;
  223823:	e8 68 e4 ff ff       	call   221c90 <panic>
  223828:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  22382b:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
        if (u >> 31 == 0) {
  22382e:	e9 e6 fe ff ff       	jmp    223719 <ceil32+0xb9>
  223833:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22383a:	84 00 00 00 00 00 

0000000000223840 <floor64>:
        }
    }
}

fn floor64(x: f64) f64 {
  223840:	55                   	push   rbp
  223841:	48 89 e5             	mov    rbp,rsp
  223844:	48 83 ec 30          	sub    rsp,0x30
  223848:	be aa 00 00 00       	mov    esi,0xaa
  22384d:	b8 08 00 00 00       	mov    eax,0x8
  223852:	89 c2                	mov    edx,eax
  223854:	48 8d 4d e0          	lea    rcx,[rbp-0x20]
  223858:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    const u = @bitCast(u64, x);
  22385d:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  223862:	c4 e1 f9 7e c7       	vmovq  rdi,xmm0
  223867:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
    const e = (u >> 52) & 0x7FF;
  22386b:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  22386f:	48 c1 ef 34          	shr    rdi,0x34
  223873:	48 81 e7 ff 07 00 00 	and    rdi,0x7ff
  22387a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    var y: f64 = undefined;
  22387e:	48 89 cf             	mov    rdi,rcx
  223881:	e8 2a e4 ff ff       	call   221cb0 <memset>

    if (e >= 0x3FF + 52 or x == 0) {
  223886:	48 81 7d e8 33 04 00 	cmp    QWORD PTR [rbp-0x18],0x433
  22388d:	00 
  22388e:	41 0f 93 c0          	setae  r8b
  223892:	41 f6 c0 01          	test   r8b,0x1
  223896:	44 88 45 df          	mov    BYTE PTR [rbp-0x21],r8b
  22389a:	75 18                	jne    2238b4 <floor64+0x74>
  22389c:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
  2238a0:	c5 fb 10 4d f8       	vmovsd xmm1,QWORD PTR [rbp-0x8]
  2238a5:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  2238a9:	0f 94 c0             	sete   al
  2238ac:	0f 9b c1             	setnp  cl
  2238af:	20 c8                	and    al,cl
  2238b1:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
  2238b4:	8a 45 df             	mov    al,BYTE PTR [rbp-0x21]
  2238b7:	a8 01                	test   al,0x1
  2238b9:	75 02                	jne    2238bd <floor64+0x7d>
  2238bb:	eb 0b                	jmp    2238c8 <floor64+0x88>
        return x;
  2238bd:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  2238c2:	48 83 c4 30          	add    rsp,0x30
  2238c6:	5d                   	pop    rbp
  2238c7:	c3                   	ret    
    if (e >= 0x3FF + 52 or x == 0) {
  2238c8:	eb 00                	jmp    2238ca <floor64+0x8a>
    }

    if (u >> 63 != 0) {
  2238ca:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2238ce:	48 c1 e8 3f          	shr    rax,0x3f
  2238d2:	48 83 f8 00          	cmp    rax,0x0
  2238d6:	74 21                	je     2238f9 <floor64+0xb9>
  2238d8:	c5 fb 10 05 f0 ea fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffdeaf0]        # 2023d0 <__unnamed_175+0x18>
  2238df:	ff 
        @setFloatMode(this, builtin.FloatMode.Strict);
        y = x - math.f64_toint + math.f64_toint - x;
  2238e0:	c5 fb 10 4d f8       	vmovsd xmm1,QWORD PTR [rbp-0x8]
  2238e5:	c5 f3 5c c8          	vsubsd xmm1,xmm1,xmm0
  2238e9:	c5 f3 58 c0          	vaddsd xmm0,xmm1,xmm0
  2238ed:	c5 fb 5c 45 f8       	vsubsd xmm0,xmm0,QWORD PTR [rbp-0x8]
  2238f2:	c5 fb 11 45 e0       	vmovsd QWORD PTR [rbp-0x20],xmm0
    if (u >> 63 != 0) {
  2238f7:	eb 1b                	jmp    223914 <floor64+0xd4>
  2238f9:	c5 fb 10 05 cf ea fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffdeacf]        # 2023d0 <__unnamed_175+0x18>
  223900:	ff 
    } else {
        @setFloatMode(this, builtin.FloatMode.Strict);
        y = x + math.f64_toint - math.f64_toint - x;
  223901:	c5 fb 58 4d f8       	vaddsd xmm1,xmm0,QWORD PTR [rbp-0x8]
  223906:	c5 f3 5c c0          	vsubsd xmm0,xmm1,xmm0
  22390a:	c5 fb 5c 45 f8       	vsubsd xmm0,xmm0,QWORD PTR [rbp-0x8]
  22390f:	c5 fb 11 45 e0       	vmovsd QWORD PTR [rbp-0x20],xmm0
    }

    if (e <= 0x3FF - 1) {
  223914:	48 81 7d e8 fe 03 00 	cmp    QWORD PTR [rbp-0x18],0x3fe
  22391b:	00 
  22391c:	77 30                	ja     22394e <floor64+0x10e>
        math.forceEval(y);
  22391e:	c5 fb 10 45 e0       	vmovsd xmm0,QWORD PTR [rbp-0x20]
  223923:	e8 08 02 00 00       	call   223b30 <forceEval.6>
        if (u >> 63 != 0) {
  223928:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22392c:	48 c1 e8 3f          	shr    rax,0x3f
  223930:	48 83 f8 00          	cmp    rax,0x0
  223934:	74 0e                	je     223944 <floor64+0x104>
  223936:	c5 fb 10 05 82 ea fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffdea82]        # 2023c0 <__unnamed_175+0x8>
  22393d:	ff 
            return -1.0;
  22393e:	48 83 c4 30          	add    rsp,0x30
  223942:	5d                   	pop    rbp
  223943:	c3                   	ret    
  223944:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
        } else {
            return 0.0;
  223948:	48 83 c4 30          	add    rsp,0x30
  22394c:	5d                   	pop    rbp
  22394d:	c3                   	ret    
  22394e:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
        }
    } else if (y > 0) {
  223952:	c5 fb 10 4d e0       	vmovsd xmm1,QWORD PTR [rbp-0x20]
  223957:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22395b:	76 1c                	jbe    223979 <floor64+0x139>
  22395d:	c5 fb 10 05 4b ea fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffdea4b]        # 2023b0 <__unnamed_165+0x8>
  223964:	ff 
        return x + y - 1;
  223965:	c5 fb 10 4d f8       	vmovsd xmm1,QWORD PTR [rbp-0x8]
  22396a:	c5 f3 58 4d e0       	vaddsd xmm1,xmm1,QWORD PTR [rbp-0x20]
  22396f:	c5 f3 5c c0          	vsubsd xmm0,xmm1,xmm0
  223973:	48 83 c4 30          	add    rsp,0x30
  223977:	5d                   	pop    rbp
  223978:	c3                   	ret    
    } else {
        return x + y;
  223979:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  22397e:	c5 fb 58 45 e0       	vaddsd xmm0,xmm0,QWORD PTR [rbp-0x20]
  223983:	48 83 c4 30          	add    rsp,0x30
  223987:	5d                   	pop    rbp
  223988:	c3                   	ret    
  223989:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000223990 <ceil64>:
        }
    }
}

fn ceil64(x: f64) f64 {
  223990:	55                   	push   rbp
  223991:	48 89 e5             	mov    rbp,rsp
  223994:	48 83 ec 30          	sub    rsp,0x30
  223998:	be aa 00 00 00       	mov    esi,0xaa
  22399d:	b8 08 00 00 00       	mov    eax,0x8
  2239a2:	89 c2                	mov    edx,eax
  2239a4:	48 8d 4d e0          	lea    rcx,[rbp-0x20]
  2239a8:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    const u = @bitCast(u64, x);
  2239ad:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  2239b2:	c4 e1 f9 7e c7       	vmovq  rdi,xmm0
  2239b7:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
    const e = (u >> 52) & 0x7FF;
  2239bb:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  2239bf:	48 c1 ef 34          	shr    rdi,0x34
  2239c3:	48 81 e7 ff 07 00 00 	and    rdi,0x7ff
  2239ca:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    var y: f64 = undefined;
  2239ce:	48 89 cf             	mov    rdi,rcx
  2239d1:	e8 da e2 ff ff       	call   221cb0 <memset>

    if (e >= 0x3FF + 52 or x == 0) {
  2239d6:	48 81 7d e8 33 04 00 	cmp    QWORD PTR [rbp-0x18],0x433
  2239dd:	00 
  2239de:	41 0f 93 c0          	setae  r8b
  2239e2:	41 f6 c0 01          	test   r8b,0x1
  2239e6:	44 88 45 df          	mov    BYTE PTR [rbp-0x21],r8b
  2239ea:	75 18                	jne    223a04 <ceil64+0x74>
  2239ec:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
  2239f0:	c5 fb 10 4d f8       	vmovsd xmm1,QWORD PTR [rbp-0x8]
  2239f5:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  2239f9:	0f 94 c0             	sete   al
  2239fc:	0f 9b c1             	setnp  cl
  2239ff:	20 c8                	and    al,cl
  223a01:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
  223a04:	8a 45 df             	mov    al,BYTE PTR [rbp-0x21]
  223a07:	a8 01                	test   al,0x1
  223a09:	75 02                	jne    223a0d <ceil64+0x7d>
  223a0b:	eb 0b                	jmp    223a18 <ceil64+0x88>
        return x;
  223a0d:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  223a12:	48 83 c4 30          	add    rsp,0x30
  223a16:	5d                   	pop    rbp
  223a17:	c3                   	ret    
    if (e >= 0x3FF + 52 or x == 0) {
  223a18:	eb 00                	jmp    223a1a <ceil64+0x8a>
    }

    if (u >> 63 != 0) {
  223a1a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  223a1e:	48 c1 e8 3f          	shr    rax,0x3f
  223a22:	48 83 f8 00          	cmp    rax,0x0
  223a26:	74 21                	je     223a49 <ceil64+0xb9>
  223a28:	c5 fb 10 05 a0 e9 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffde9a0]        # 2023d0 <__unnamed_175+0x18>
  223a2f:	ff 
        @setFloatMode(this, builtin.FloatMode.Strict);
        y = x - math.f64_toint + math.f64_toint - x;
  223a30:	c5 fb 10 4d f8       	vmovsd xmm1,QWORD PTR [rbp-0x8]
  223a35:	c5 f3 5c c8          	vsubsd xmm1,xmm1,xmm0
  223a39:	c5 f3 58 c0          	vaddsd xmm0,xmm1,xmm0
  223a3d:	c5 fb 5c 45 f8       	vsubsd xmm0,xmm0,QWORD PTR [rbp-0x8]
  223a42:	c5 fb 11 45 e0       	vmovsd QWORD PTR [rbp-0x20],xmm0
    if (u >> 63 != 0) {
  223a47:	eb 1b                	jmp    223a64 <ceil64+0xd4>
  223a49:	c5 fb 10 05 7f e9 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffde97f]        # 2023d0 <__unnamed_175+0x18>
  223a50:	ff 
    } else {
        @setFloatMode(this, builtin.FloatMode.Strict);
        y = x + math.f64_toint - math.f64_toint - x;
  223a51:	c5 fb 58 4d f8       	vaddsd xmm1,xmm0,QWORD PTR [rbp-0x8]
  223a56:	c5 f3 5c c0          	vsubsd xmm0,xmm1,xmm0
  223a5a:	c5 fb 5c 45 f8       	vsubsd xmm0,xmm0,QWORD PTR [rbp-0x8]
  223a5f:	c5 fb 11 45 e0       	vmovsd QWORD PTR [rbp-0x20],xmm0
    }

    if (e <= 0x3FF - 1) {
  223a64:	48 81 7d e8 fe 03 00 	cmp    QWORD PTR [rbp-0x18],0x3fe
  223a6b:	00 
  223a6c:	77 30                	ja     223a9e <ceil64+0x10e>
        math.forceEval(y);
  223a6e:	c5 fb 10 45 e0       	vmovsd xmm0,QWORD PTR [rbp-0x20]
  223a73:	e8 b8 00 00 00       	call   223b30 <forceEval.6>
        if (u >> 63 != 0) {
  223a78:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  223a7c:	48 c1 e8 3f          	shr    rax,0x3f
  223a80:	48 83 f8 00          	cmp    rax,0x0
  223a84:	74 0a                	je     223a90 <ceil64+0x100>
  223a86:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
            return -0.0;
  223a8a:	48 83 c4 30          	add    rsp,0x30
  223a8e:	5d                   	pop    rbp
  223a8f:	c3                   	ret    
  223a90:	c5 fb 10 05 18 e9 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffde918]        # 2023b0 <__unnamed_165+0x8>
  223a97:	ff 
        } else {
            return 1.0;
  223a98:	48 83 c4 30          	add    rsp,0x30
  223a9c:	5d                   	pop    rbp
  223a9d:	c3                   	ret    
  223a9e:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
        }
    } else if (y < 0) {
  223aa2:	c5 f9 2e 45 e0       	vucomisd xmm0,QWORD PTR [rbp-0x20]
  223aa7:	76 1c                	jbe    223ac5 <ceil64+0x135>
  223aa9:	c5 fb 10 05 ff e8 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffde8ff]        # 2023b0 <__unnamed_165+0x8>
  223ab0:	ff 
        return x + y + 1;
  223ab1:	c5 fb 10 4d f8       	vmovsd xmm1,QWORD PTR [rbp-0x8]
  223ab6:	c5 f3 58 4d e0       	vaddsd xmm1,xmm1,QWORD PTR [rbp-0x20]
  223abb:	c5 f3 58 c0          	vaddsd xmm0,xmm1,xmm0
  223abf:	48 83 c4 30          	add    rsp,0x30
  223ac3:	5d                   	pop    rbp
  223ac4:	c3                   	ret    
    } else {
        return x + y;
  223ac5:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  223aca:	c5 fb 58 45 e0       	vaddsd xmm0,xmm0,QWORD PTR [rbp-0x20]
  223acf:	48 83 c4 30          	add    rsp,0x30
  223ad3:	5d                   	pop    rbp
  223ad4:	c3                   	ret    
  223ad5:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  223adc:	00 00 00 00 

0000000000223ae0 <forceEval>:
pub fn forceEval(value: var) void {
  223ae0:	55                   	push   rbp
  223ae1:	48 89 e5             	mov    rbp,rsp
  223ae4:	48 83 ec 20          	sub    rsp,0x20
  223ae8:	48 8d 45 f8          	lea    rax,[rbp-0x8]
  223aec:	be aa 00 00 00       	mov    esi,0xaa
  223af1:	b9 04 00 00 00       	mov    ecx,0x4
  223af6:	89 ca                	mov    edx,ecx
  223af8:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
            var x: f32 = undefined;
  223afd:	48 89 c7             	mov    rdi,rax
  223b00:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  223b04:	e8 a7 e1 ff ff       	call   221cb0 <memset>
            const p = @ptrCast(*volatile f32, &x);
  223b09:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  223b0d:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
            p.* = x;
  223b11:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  223b15:	c5 fa 10 45 f8       	vmovss xmm0,DWORD PTR [rbp-0x8]
  223b1a:	c5 fa 11 02          	vmovss DWORD PTR [rdx],xmm0
pub fn forceEval(value: var) void {
  223b1e:	48 83 c4 20          	add    rsp,0x20
  223b22:	5d                   	pop    rbp
  223b23:	c3                   	ret    
  223b24:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  223b2b:	00 00 00 00 00 

0000000000223b30 <forceEval.6>:
  223b30:	55                   	push   rbp
  223b31:	48 89 e5             	mov    rbp,rsp
  223b34:	48 83 ec 20          	sub    rsp,0x20
  223b38:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  223b3c:	be aa 00 00 00       	mov    esi,0xaa
  223b41:	b9 08 00 00 00       	mov    ecx,0x8
  223b46:	89 ca                	mov    edx,ecx
  223b48:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
            var x: f64 = undefined;
  223b4d:	48 89 c7             	mov    rdi,rax
  223b50:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  223b54:	e8 57 e1 ff ff       	call   221cb0 <memset>
            const p = @ptrCast(*volatile f64, &x);
  223b59:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  223b5d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
            p.* = x;
  223b61:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  223b65:	c5 fb 10 45 f0       	vmovsd xmm0,QWORD PTR [rbp-0x10]
  223b6a:	c5 fb 11 02          	vmovsd QWORD PTR [rdx],xmm0
pub fn forceEval(value: var) void {
  223b6e:	48 83 c4 20          	add    rsp,0x20
  223b72:	5d                   	pop    rbp
  223b73:	c3                   	ret    
