
./zig-cache/test:     file format elf64-x86-64


Disassembly of section .text:

000000000020b000 <assert>:
/// This function invokes undefined behavior when `ok` is `false`.
/// In Debug and ReleaseSafe modes, calls to this function are always
/// generated, and the `unreachable` statement triggers a panic.
/// In ReleaseFast and ReleaseSmall modes, calls to this function can be
/// optimized away.
pub fn assert(ok: bool) void {
  20b000:	55                   	push   rbp
  20b001:	48 89 e5             	mov    rbp,rsp
  20b004:	48 83 ec 10          	sub    rsp,0x10
  20b008:	40 88 f8             	mov    al,dil
  20b00b:	24 01                	and    al,0x1
  20b00d:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
    if (!ok) {
  20b010:	8a 45 ff             	mov    al,BYTE PTR [rbp-0x1]
  20b013:	84 c0                	test   al,al
  20b015:	75 12                	jne    20b029 <assert+0x29>
  20b017:	eb 00                	jmp    20b019 <assert+0x19>
  20b019:	48 8d 3d 60 83 03 00 	lea    rdi,[rip+0x38360]        # 243380 <__unnamed_1>
  20b020:	31 c0                	xor    eax,eax
  20b022:	89 c6                	mov    esi,eax
        // In ReleaseFast test mode, we still want assert(false) to crash, so
        // we insert an explicit call to @panic instead of unreachable.
        // TODO we should use `assertOrPanic` in tests and remove this logic.
        if (builtin.is_test) {
            @panic("assertion failure");
  20b024:	e8 d7 05 00 00       	call   20b600 <panic>
    if (!ok) {
  20b029:	eb 00                	jmp    20b02b <assert+0x2b>
pub fn assert(ok: bool) void {
  20b02b:	48 83 c4 10          	add    rsp,0x10
  20b02f:	5d                   	pop    rbp
  20b030:	c3                   	ret    
  20b031:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20b038:	0f 1f 84 00 00 00 00 
  20b03f:	00 

000000000020b040 <Timer_clockLinux>:

    fn clockDarwin() u64 {
        return darwin.mach_absolute_time();
    }

    fn clockLinux() u64 {
  20b040:	55                   	push   rbp
  20b041:	48 89 e5             	mov    rbp,rsp
  20b044:	48 83 ec 50          	sub    rsp,0x50
  20b048:	bf 01 00 00 00       	mov    edi,0x1
  20b04d:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
        var ts: posix.timespec = undefined;
  20b051:	48 8b 05 58 52 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff5258]        # 2002b0 <__unnamed_100>
  20b058:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  20b05c:	48 8b 05 55 52 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff5255]        # 2002b8 <__unnamed_100+0x8>
  20b063:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
        var result = posix.clock_gettime(monotonic_clock_id, &ts);
  20b067:	e8 d4 20 00 00       	call   20d140 <clock_gettime>
  20b06c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
        debug.assert(posix.getErrno(result) == 0);
  20b070:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  20b074:	e8 07 20 00 00       	call   20d080 <getErrno>
  20b079:	48 83 f8 00          	cmp    rax,0x0
  20b07d:	0f 94 c1             	sete   cl
  20b080:	0f b6 f9             	movzx  edi,cl
  20b083:	e8 78 ff ff ff       	call   20b000 <assert>
        return @intCast(u64, ts.tv_sec) * u64(ns_per_s) + @intCast(u64, ts.tv_nsec);
  20b088:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20b08c:	48 83 f8 00          	cmp    rax,0x0
  20b090:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  20b094:	7c 1e                	jl     20b0b4 <Timer_clockLinux+0x74>
  20b096:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
  20b09b:	89 c1                	mov    ecx,eax
  20b09d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20b0a1:	48 f7 e1             	mul    rcx
  20b0a4:	40 0f 90 c6          	seto   sil
  20b0a8:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  20b0ac:	40 88 75 d7          	mov    BYTE PTR [rbp-0x29],sil
  20b0b0:	70 12                	jo     20b0c4 <Timer_clockLinux+0x84>
  20b0b2:	eb 20                	jmp    20b0d4 <Timer_clockLinux+0x94>
  20b0b4:	48 8d 3d cd 81 03 00 	lea    rdi,[rip+0x381cd]        # 243288 <__unnamed_3>
  20b0bb:	31 c0                	xor    eax,eax
  20b0bd:	89 c6                	mov    esi,eax
  20b0bf:	e8 3c 05 00 00       	call   20b600 <panic>
  20b0c4:	48 8d 3d fd 80 03 00 	lea    rdi,[rip+0x380fd]        # 2431c8 <__unnamed_4>
  20b0cb:	31 c0                	xor    eax,eax
  20b0cd:	89 c6                	mov    esi,eax
  20b0cf:	e8 2c 05 00 00       	call   20b600 <panic>
  20b0d4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20b0d8:	48 83 f8 00          	cmp    rax,0x0
  20b0dc:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  20b0e0:	7c 19                	jl     20b0fb <Timer_clockLinux+0xbb>
  20b0e2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  20b0e6:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  20b0ea:	48 01 c8             	add    rax,rcx
  20b0ed:	0f 92 c2             	setb   dl
  20b0f0:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  20b0f4:	88 55 bf             	mov    BYTE PTR [rbp-0x41],dl
  20b0f7:	72 12                	jb     20b10b <Timer_clockLinux+0xcb>
  20b0f9:	eb 20                	jmp    20b11b <Timer_clockLinux+0xdb>
  20b0fb:	48 8d 3d 86 81 03 00 	lea    rdi,[rip+0x38186]        # 243288 <__unnamed_3>
  20b102:	31 c0                	xor    eax,eax
  20b104:	89 c6                	mov    esi,eax
  20b106:	e8 f5 04 00 00       	call   20b600 <panic>
  20b10b:	48 8d 3d b6 80 03 00 	lea    rdi,[rip+0x380b6]        # 2431c8 <__unnamed_4>
  20b112:	31 c0                	xor    eax,eax
  20b114:	89 c6                	mov    esi,eax
  20b116:	e8 e5 04 00 00       	call   20b600 <panic>
  20b11b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  20b11f:	48 83 c4 50          	add    rsp,0x50
  20b123:	5d                   	pop    rbp
  20b124:	c3                   	ret    
  20b125:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20b12c:	00 00 00 00 

000000000020b130 <init_vdso_clock_gettime>:
        }
    }
    return syscall2(SYS_clock_gettime, @bitCast(usize, isize(clk_id)), @ptrToInt(tp));
}
var vdso_clock_gettime = init_vdso_clock_gettime;
extern fn init_vdso_clock_gettime(clk: i32, ts: *timespec) usize {
  20b130:	55                   	push   rbp
  20b131:	48 89 e5             	mov    rbp,rsp
  20b134:	48 83 ec 30          	sub    rsp,0x30
  20b138:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  20b13b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    const addr = vdso.lookup(VDSO_CGT_VER, VDSO_CGT_SYM);
  20b13f:	48 8d 3d 32 87 03 00 	lea    rdi,[rip+0x38732]        # 243878 <__unnamed_5>
  20b146:	48 8d 35 43 87 03 00 	lea    rsi,[rip+0x38743]        # 243890 <__unnamed_6>
  20b14d:	e8 2e a7 01 00       	call   225880 <lookup>
  20b152:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    var f = @intToPtr(@typeOf(init_vdso_clock_gettime), addr);
  20b156:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20b15a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    _ = @cmpxchgStrong(@typeOf(init_vdso_clock_gettime), &vdso_clock_gettime, init_vdso_clock_gettime, f, builtin.AtomicOrder.Monotonic, builtin.AtomicOrder.Monotonic);
  20b15e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20b162:	48 8d 35 c7 ff ff ff 	lea    rsi,[rip+0xffffffffffffffc7]        # 20b130 <init_vdso_clock_gettime>
  20b169:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  20b16d:	48 89 f0             	mov    rax,rsi
  20b170:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  20b174:	f0 48 0f b1 35 bb 0e 	lock cmpxchg QWORD PTR [rip+0x30ebb],rsi        # 23c038 <vdso_clock_gettime>
  20b17b:	03 00 
    if (@ptrToInt(f) == 0) return @bitCast(usize, isize(-ENOSYS));
  20b17d:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  20b181:	48 83 fe 00          	cmp    rsi,0x0
  20b185:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  20b189:	75 0d                	jne    20b198 <init_vdso_clock_gettime+0x68>
  20b18b:	48 c7 c0 da ff ff ff 	mov    rax,0xffffffffffffffda
  20b192:	48 83 c4 30          	add    rsp,0x30
  20b196:	5d                   	pop    rbp
  20b197:	c3                   	ret    
  20b198:	eb 00                	jmp    20b19a <init_vdso_clock_gettime+0x6a>
    return f(clk, ts);
  20b19a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20b19e:	8b 7d fc             	mov    edi,DWORD PTR [rbp-0x4]
  20b1a1:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20b1a5:	ff d0                	call   rax
  20b1a7:	48 83 c4 30          	add    rsp,0x30
  20b1ab:	5d                   	pop    rbp
  20b1ac:	c3                   	ret    
  20b1ad:	0f 1f 00             	nop    DWORD PTR [rax]

000000000020b1b0 <Futex>:
        _ = @atomicRmw(@typeOf(gCounter), &gCounter, AtomicRmwOp.Add, 1, AtomicOrder.SeqCst);
        pContext.counter += 1;
    }
}

test "Futex" {
  20b1b0:	55                   	push   rbp
  20b1b1:	48 89 e5             	mov    rbp,rsp
    warn("\ntest Futex:+\n");
  20b1b4:	48 81 ec 60 01 00 00 	sub    rsp,0x160
  20b1bb:	48 89 bd 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdi
  20b1c2:	e8 79 05 00 00       	call   20b740 <warn>
  20b1c7:	48 8d 3d 32 0e 03 00 	lea    rdi,[rip+0x30e32]        # 23c000 <gProducer_context>
    defer warn("test Futex:- futex_wait counts={} futex_wake counts={}\n",
        gProducer_wait_count + gConsumer_wait_count, gProducer_wake_count + gConsumer_wake_count);

    gProducer_context.init();
  20b1ce:	e8 1d 06 00 00       	call   20b7f0 <ThreadContext_init>
  20b1d3:	48 8d 3d 36 0e 03 00 	lea    rdi,[rip+0x30e36]        # 23c010 <gConsumer_context>
    gConsumer_context.init();
  20b1da:	e8 11 06 00 00       	call   20b7f0 <ThreadContext_init>
  20b1df:	48 8d 7d e8          	lea    rdi,[rbp-0x18]

    var timer = try Timer.start();
  20b1e3:	48 8b b5 50 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xb0]
  20b1ea:	e8 21 06 00 00       	call   20b810 <Timer_start>
  20b1ef:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  20b1f4:	74 29                	je     20b21f <Futex+0x6f>
        gProducer_wait_count + gConsumer_wait_count, gProducer_wake_count + gConsumer_wake_count);
  20b1f6:	48 8b 05 03 8e 03 00 	mov    rax,QWORD PTR [rip+0x38e03]        # 244000 <gProducer_wait_count>
  20b1fd:	48 03 05 04 8e 03 00 	add    rax,QWORD PTR [rip+0x38e04]        # 244008 <gConsumer_wait_count>
  20b204:	0f 92 c1             	setb   cl
  20b207:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  20b20e:	88 8d 47 ff ff ff    	mov    BYTE PTR [rbp-0xb9],cl
  20b214:	0f 82 1a 01 00 00    	jb     20b334 <Futex+0x184>
  20b21a:	e9 25 01 00 00       	jmp    20b344 <Futex+0x194>
  20b21f:	48 8d 7d 80          	lea    rdi,[rbp-0x80]
    var timer = try Timer.start();
  20b223:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20b227:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  20b22b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20b22f:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
    var start_time = timer.read();
  20b233:	e8 98 0a 00 00       	call   20bcd0 <Timer_read>
  20b238:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  20b23c:	48 8d 15 bd 0d 03 00 	lea    rdx,[rip+0x30dbd]        # 23c000 <gProducer_context>
  20b243:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax

    var producer_thread = try std.os.spawnThread(&gProducer_context, producer);
  20b24a:	48 8b b5 50 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xb0]
  20b251:	e8 ca 0a 00 00       	call   20bd20 <spawnThread>
  20b256:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  20b25b:	74 29                	je     20b286 <Futex+0xd6>
        gProducer_wait_count + gConsumer_wait_count, gProducer_wake_count + gConsumer_wake_count);
  20b25d:	48 8b 05 9c 8d 03 00 	mov    rax,QWORD PTR [rip+0x38d9c]        # 244000 <gProducer_wait_count>
  20b264:	48 03 05 9d 8d 03 00 	add    rax,QWORD PTR [rip+0x38d9d]        # 244008 <gConsumer_wait_count>
  20b26b:	0f 92 c1             	setb   cl
  20b26e:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
  20b275:	88 8d 37 ff ff ff    	mov    BYTE PTR [rbp-0xc9],cl
  20b27b:	0f 82 2f 01 00 00    	jb     20b3b0 <Futex+0x200>
  20b281:	e9 3a 01 00 00       	jmp    20b3c0 <Futex+0x210>
  20b286:	48 8d 7d a0          	lea    rdi,[rbp-0x60]
  20b28a:	48 8d 15 7f 0d 03 00 	lea    rdx,[rip+0x30d7f]        # 23c010 <gConsumer_context>
    var producer_thread = try std.os.spawnThread(&gProducer_context, producer);
  20b291:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20b295:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
    var consumer_thread = try std.os.spawnThread(&gConsumer_context, consumer);
  20b29c:	48 8b b5 50 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xb0]
  20b2a3:	e8 b8 0f 00 00       	call   20c260 <spawnThread.17>
  20b2a8:	66 83 7d a0 00       	cmp    WORD PTR [rbp-0x60],0x0
  20b2ad:	74 29                	je     20b2d8 <Futex+0x128>
        gProducer_wait_count + gConsumer_wait_count, gProducer_wake_count + gConsumer_wake_count);
  20b2af:	48 8b 05 4a 8d 03 00 	mov    rax,QWORD PTR [rip+0x38d4a]        # 244000 <gProducer_wait_count>
  20b2b6:	48 03 05 4b 8d 03 00 	add    rax,QWORD PTR [rip+0x38d4b]        # 244008 <gConsumer_wait_count>
  20b2bd:	0f 92 c1             	setb   cl
  20b2c0:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  20b2c7:	88 8d 27 ff ff ff    	mov    BYTE PTR [rbp-0xd9],cl
  20b2cd:	0f 82 59 01 00 00    	jb     20b42c <Futex+0x27c>
  20b2d3:	e9 64 01 00 00       	jmp    20b43c <Futex+0x28c>
    var consumer_thread = try std.os.spawnThread(&gConsumer_context, consumer);
  20b2d8:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  20b2dc:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax

    producer_thread.wait();
  20b2e3:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  20b2ea:	e8 b1 14 00 00       	call   20c7a0 <Thread_wait>
    consumer_thread.wait();
  20b2ef:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  20b2f6:	e8 a5 14 00 00       	call   20c7a0 <Thread_wait>
  20b2fb:	48 8d 7d 80          	lea    rdi,[rbp-0x80]

    var end_time = timer.read();
  20b2ff:	e8 cc 09 00 00       	call   20bcd0 <Timer_read>
  20b304:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
    var duration = end_time - start_time;
  20b30b:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  20b312:	48 2b 85 78 ff ff ff 	sub    rax,QWORD PTR [rbp-0x88]
  20b319:	0f 92 c1             	setb   cl
  20b31c:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  20b323:	88 8d 17 ff ff ff    	mov    BYTE PTR [rbp-0xe9],cl
  20b329:	0f 82 79 01 00 00    	jb     20b4a8 <Futex+0x2f8>
  20b32f:	e9 84 01 00 00       	jmp    20b4b8 <Futex+0x308>
  20b334:	48 8d 3d 8d 7e 03 00 	lea    rdi,[rip+0x37e8d]        # 2431c8 <__unnamed_4>
  20b33b:	31 c0                	xor    eax,eax
  20b33d:	89 c6                	mov    esi,eax
        gProducer_wait_count + gConsumer_wait_count, gProducer_wake_count + gConsumer_wake_count);
  20b33f:	e8 bc 02 00 00       	call   20b600 <panic>
  20b344:	48 8b 05 c5 8c 03 00 	mov    rax,QWORD PTR [rip+0x38cc5]        # 244010 <gProducer_wake_count>
  20b34b:	48 03 05 c6 8c 03 00 	add    rax,QWORD PTR [rip+0x38cc6]        # 244018 <gConsumer_wake_count>
  20b352:	0f 92 c1             	setb   cl
  20b355:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
  20b35c:	88 8d 07 ff ff ff    	mov    BYTE PTR [rbp-0xf9],cl
  20b362:	72 02                	jb     20b366 <Futex+0x1b6>
  20b364:	eb 10                	jmp    20b376 <Futex+0x1c6>
  20b366:	48 8d 3d 5b 7e 03 00 	lea    rdi,[rip+0x37e5b]        # 2431c8 <__unnamed_4>
  20b36d:	31 c0                	xor    eax,eax
  20b36f:	89 c6                	mov    esi,eax
  20b371:	e8 8a 02 00 00       	call   20b600 <panic>
    defer warn("test Futex:- futex_wait counts={} futex_wake counts={}\n",
  20b376:	48 8b bd 48 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb8]
  20b37d:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
  20b384:	e8 37 08 00 00       	call   20bbc0 <warn.16>
    var timer = try Timer.start();
  20b389:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  20b38d:	48 8b bd 50 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb0]
  20b394:	66 89 85 04 ff ff ff 	mov    WORD PTR [rbp-0xfc],ax
  20b39b:	e8 f0 08 00 00       	call   20bc90 <__zig_return_error>
  20b3a0:	66 8b 85 04 ff ff ff 	mov    ax,WORD PTR [rbp-0xfc]
  20b3a7:	48 81 c4 60 01 00 00 	add    rsp,0x160
  20b3ae:	5d                   	pop    rbp
  20b3af:	c3                   	ret    
  20b3b0:	48 8d 3d 11 7e 03 00 	lea    rdi,[rip+0x37e11]        # 2431c8 <__unnamed_4>
  20b3b7:	31 c0                	xor    eax,eax
  20b3b9:	89 c6                	mov    esi,eax
        gProducer_wait_count + gConsumer_wait_count, gProducer_wake_count + gConsumer_wake_count);
  20b3bb:	e8 40 02 00 00       	call   20b600 <panic>
  20b3c0:	48 8b 05 49 8c 03 00 	mov    rax,QWORD PTR [rip+0x38c49]        # 244010 <gProducer_wake_count>
  20b3c7:	48 03 05 4a 8c 03 00 	add    rax,QWORD PTR [rip+0x38c4a]        # 244018 <gConsumer_wake_count>
  20b3ce:	0f 92 c1             	setb   cl
  20b3d1:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  20b3d8:	88 8d f7 fe ff ff    	mov    BYTE PTR [rbp-0x109],cl
  20b3de:	72 02                	jb     20b3e2 <Futex+0x232>
  20b3e0:	eb 10                	jmp    20b3f2 <Futex+0x242>
  20b3e2:	48 8d 3d df 7d 03 00 	lea    rdi,[rip+0x37ddf]        # 2431c8 <__unnamed_4>
  20b3e9:	31 c0                	xor    eax,eax
  20b3eb:	89 c6                	mov    esi,eax
  20b3ed:	e8 0e 02 00 00       	call   20b600 <panic>
    defer warn("test Futex:- futex_wait counts={} futex_wake counts={}\n",
  20b3f2:	48 8b bd 38 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xc8]
  20b3f9:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
  20b400:	e8 bb 07 00 00       	call   20bbc0 <warn.16>
    var producer_thread = try std.os.spawnThread(&gProducer_context, producer);
  20b405:	66 8b 45 c0          	mov    ax,WORD PTR [rbp-0x40]
  20b409:	48 8b bd 50 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb0]
  20b410:	66 89 85 f4 fe ff ff 	mov    WORD PTR [rbp-0x10c],ax
  20b417:	e8 74 08 00 00       	call   20bc90 <__zig_return_error>
  20b41c:	66 8b 85 f4 fe ff ff 	mov    ax,WORD PTR [rbp-0x10c]
  20b423:	48 81 c4 60 01 00 00 	add    rsp,0x160
  20b42a:	5d                   	pop    rbp
  20b42b:	c3                   	ret    
  20b42c:	48 8d 3d 95 7d 03 00 	lea    rdi,[rip+0x37d95]        # 2431c8 <__unnamed_4>
  20b433:	31 c0                	xor    eax,eax
  20b435:	89 c6                	mov    esi,eax
        gProducer_wait_count + gConsumer_wait_count, gProducer_wake_count + gConsumer_wake_count);
  20b437:	e8 c4 01 00 00       	call   20b600 <panic>
  20b43c:	48 8b 05 cd 8b 03 00 	mov    rax,QWORD PTR [rip+0x38bcd]        # 244010 <gProducer_wake_count>
  20b443:	48 03 05 ce 8b 03 00 	add    rax,QWORD PTR [rip+0x38bce]        # 244018 <gConsumer_wake_count>
  20b44a:	0f 92 c1             	setb   cl
  20b44d:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  20b454:	88 8d e7 fe ff ff    	mov    BYTE PTR [rbp-0x119],cl
  20b45a:	72 02                	jb     20b45e <Futex+0x2ae>
  20b45c:	eb 10                	jmp    20b46e <Futex+0x2be>
  20b45e:	48 8d 3d 63 7d 03 00 	lea    rdi,[rip+0x37d63]        # 2431c8 <__unnamed_4>
  20b465:	31 c0                	xor    eax,eax
  20b467:	89 c6                	mov    esi,eax
  20b469:	e8 92 01 00 00       	call   20b600 <panic>
    defer warn("test Futex:- futex_wait counts={} futex_wake counts={}\n",
  20b46e:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  20b475:	48 8b b5 e8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x118]
  20b47c:	e8 3f 07 00 00       	call   20bbc0 <warn.16>
    var consumer_thread = try std.os.spawnThread(&gConsumer_context, consumer);
  20b481:	66 8b 45 a0          	mov    ax,WORD PTR [rbp-0x60]
  20b485:	48 8b bd 50 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb0]
  20b48c:	66 89 85 e4 fe ff ff 	mov    WORD PTR [rbp-0x11c],ax
  20b493:	e8 f8 07 00 00       	call   20bc90 <__zig_return_error>
  20b498:	66 8b 85 e4 fe ff ff 	mov    ax,WORD PTR [rbp-0x11c]
  20b49f:	48 81 c4 60 01 00 00 	add    rsp,0x160
  20b4a6:	5d                   	pop    rbp
  20b4a7:	c3                   	ret    
  20b4a8:	48 8d 3d 19 7d 03 00 	lea    rdi,[rip+0x37d19]        # 2431c8 <__unnamed_4>
  20b4af:	31 c0                	xor    eax,eax
  20b4b1:	89 c6                	mov    esi,eax
    var duration = end_time - start_time;
  20b4b3:	e8 48 01 00 00       	call   20b600 <panic>
  20b4b8:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  20b4bf:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
    warn("test Futex: time={.6}\n", @intToFloat(f64, end_time - start_time) / @intToFloat(f64, std.os.time.ns_per_s));
  20b4c6:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  20b4cd:	48 2b 8d 78 ff ff ff 	sub    rcx,QWORD PTR [rbp-0x88]
  20b4d4:	0f 92 c2             	setb   dl
  20b4d7:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
  20b4de:	88 95 d7 fe ff ff    	mov    BYTE PTR [rbp-0x129],dl
  20b4e4:	72 02                	jb     20b4e8 <Futex+0x338>
  20b4e6:	eb 10                	jmp    20b4f8 <Futex+0x348>
  20b4e8:	48 8d 3d d9 7c 03 00 	lea    rdi,[rip+0x37cd9]        # 2431c8 <__unnamed_4>
  20b4ef:	31 c0                	xor    eax,eax
  20b4f1:	89 c6                	mov    esi,eax
  20b4f3:	e8 08 01 00 00       	call   20b600 <panic>
  20b4f8:	31 c0                	xor    eax,eax
  20b4fa:	88 c1                	mov    cl,al
  20b4fc:	48 8b 95 d8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x128]
  20b503:	c4 e1 f9 6e c2       	vmovq  xmm0,rdx
  20b508:	c5 f9 6f 0d 90 4c ff 	vmovdqa xmm1,XMMWORD PTR [rip+0xffffffffffff4c90]        # 2001a0 <__unnamed_313-0x10>
  20b50f:	ff 
  20b510:	c5 f9 62 c1          	vpunpckldq xmm0,xmm0,xmm1
  20b514:	c5 f9 28 0d c4 51 ff 	vmovapd xmm1,XMMWORD PTR [rip+0xffffffffffff51c4]        # 2006e0 <__unnamed_69+0x10>
  20b51b:	ff 
  20b51c:	c5 f9 5c c1          	vsubpd xmm0,xmm0,xmm1
  20b520:	c5 f9 7c c0          	vhaddpd xmm0,xmm0,xmm0
  20b524:	f6 c1 01             	test   cl,0x1
  20b527:	c5 fb 11 85 c8 fe ff 	vmovsd QWORD PTR [rbp-0x138],xmm0
  20b52e:	ff 
  20b52f:	75 51                	jne    20b582 <Futex+0x3d2>
  20b531:	c5 fb 10 05 9f 56 ff 	vmovsd xmm0,QWORD PTR [rip+0xffffffffffff569f]        # 200bd8 <__unnamed_185+0x8>
  20b538:	ff 
  20b539:	c5 fb 10 8d c8 fe ff 	vmovsd xmm1,QWORD PTR [rbp-0x138]
  20b540:	ff 
  20b541:	c5 f3 5e c0          	vdivsd xmm0,xmm1,xmm0
  20b545:	e8 16 13 00 00       	call   20c860 <warn.18>

    assert(gCounter == max_counter * 2);
  20b54a:	48 81 3d cb 8a 03 00 	cmp    QWORD PTR [rip+0x38acb],0x1312d00        # 244020 <gCounter>
  20b551:	00 2d 31 01 
  20b555:	0f 94 c0             	sete   al
  20b558:	0f b6 f8             	movzx  edi,al
  20b55b:	e8 a0 fa ff ff       	call   20b000 <assert>
        gProducer_wait_count + gConsumer_wait_count, gProducer_wake_count + gConsumer_wake_count);
  20b560:	48 8b 0d 99 8a 03 00 	mov    rcx,QWORD PTR [rip+0x38a99]        # 244000 <gProducer_wait_count>
  20b567:	48 03 0d 9a 8a 03 00 	add    rcx,QWORD PTR [rip+0x38a9a]        # 244008 <gConsumer_wait_count>
  20b56e:	0f 92 c0             	setb   al
  20b571:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
  20b578:	88 85 bf fe ff ff    	mov    BYTE PTR [rbp-0x141],al
  20b57e:	72 12                	jb     20b592 <Futex+0x3e2>
  20b580:	eb 20                	jmp    20b5a2 <Futex+0x3f2>
  20b582:	48 8d 3d b7 7c 03 00 	lea    rdi,[rip+0x37cb7]        # 243240 <__unnamed_7>
  20b589:	31 c0                	xor    eax,eax
  20b58b:	89 c6                	mov    esi,eax
    warn("test Futex: time={.6}\n", @intToFloat(f64, end_time - start_time) / @intToFloat(f64, std.os.time.ns_per_s));
  20b58d:	e8 6e 00 00 00       	call   20b600 <panic>
  20b592:	48 8d 3d 2f 7c 03 00 	lea    rdi,[rip+0x37c2f]        # 2431c8 <__unnamed_4>
  20b599:	31 c0                	xor    eax,eax
  20b59b:	89 c6                	mov    esi,eax
        gProducer_wait_count + gConsumer_wait_count, gProducer_wake_count + gConsumer_wake_count);
  20b59d:	e8 5e 00 00 00       	call   20b600 <panic>
  20b5a2:	48 8b 05 67 8a 03 00 	mov    rax,QWORD PTR [rip+0x38a67]        # 244010 <gProducer_wake_count>
  20b5a9:	48 03 05 68 8a 03 00 	add    rax,QWORD PTR [rip+0x38a68]        # 244018 <gConsumer_wake_count>
  20b5b0:	0f 92 c1             	setb   cl
  20b5b3:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  20b5ba:	88 8d af fe ff ff    	mov    BYTE PTR [rbp-0x151],cl
  20b5c0:	72 02                	jb     20b5c4 <Futex+0x414>
  20b5c2:	eb 10                	jmp    20b5d4 <Futex+0x424>
  20b5c4:	48 8d 3d fd 7b 03 00 	lea    rdi,[rip+0x37bfd]        # 2431c8 <__unnamed_4>
  20b5cb:	31 c0                	xor    eax,eax
  20b5cd:	89 c6                	mov    esi,eax
  20b5cf:	e8 2c 00 00 00       	call   20b600 <panic>
    defer warn("test Futex:- futex_wait counts={} futex_wake counts={}\n",
  20b5d4:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  20b5db:	48 8b b5 b0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x150]
  20b5e2:	e8 d9 05 00 00       	call   20bbc0 <warn.16>
  20b5e7:	31 c0                	xor    eax,eax
  20b5e9:	66 89 c1             	mov    cx,ax
test "Futex" {
  20b5ec:	66 89 c8             	mov    ax,cx
  20b5ef:	48 81 c4 60 01 00 00 	add    rsp,0x160
  20b5f6:	5d                   	pop    rbp
  20b5f7:	c3                   	ret    
  20b5f8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  20b5ff:	00 

000000000020b600 <panic>:
// have to be added in the compiler.

const builtin = @import("builtin");
const std = @import("std");

pub fn panic(msg: []const u8, error_return_trace: ?*builtin.StackTrace) noreturn {
  20b600:	55                   	push   rbp
  20b601:	48 89 e5             	mov    rbp,rsp
  20b604:	48 83 ec 30          	sub    rsp,0x30
  20b608:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  20b60c:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
        // TODO: fix panic in zen.
        builtin.Os.freestanding, builtin.Os.zen => {
            while (true) {}
        },
        else => {
            const first_trace_addr = @ptrToInt(@returnAddress());
  20b610:	48 8b 75 08          	mov    rsi,QWORD PTR [rbp+0x8]
  20b614:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
            std.debug.panicExtra(error_return_trace, first_trace_addr, "{}", msg);
  20b618:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  20b61c:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  20b620:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  20b624:	c6 45 f8 01          	mov    BYTE PTR [rbp-0x8],0x1
  20b628:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  20b62c:	48 89 f7             	mov    rdi,rsi
  20b62f:	48 89 c6             	mov    rsi,rax
  20b632:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  20b636:	e8 05 00 00 00       	call   20b640 <panicExtra>
  20b63b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000020b640 <panicExtra>:
    panicExtra(null, first_trace_addr, format, args);
}

var panicking: u8 = 0; // TODO make this a bool

pub fn panicExtra(trace: ?*const builtin.StackTrace, first_trace_addr: ?usize, comptime format: []const u8, args: ...) noreturn {
  20b640:	55                   	push   rbp
  20b641:	48 89 e5             	mov    rbp,rsp
  20b644:	48 81 ec 60 01 00 00 	sub    rsp,0x160
  20b64b:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  20b652:	00 00 00 00 
  20b656:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
  20b65d:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
  20b664:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  20b66b:	1e 00 00 00 
  20b66f:	48 89 bd c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rdi
    @setCold(true);

    if (@atomicRmw(u8, &panicking, builtin.AtomicRmwOp.Xchg, 1, builtin.AtomicOrder.SeqCst) == 1) {
  20b676:	b1 01                	mov    cl,0x1
  20b678:	86 0d aa 89 03 00    	xchg   BYTE PTR [rip+0x389aa],cl        # 244028 <panicking>
  20b67e:	80 f9 01             	cmp    cl,0x1
  20b681:	48 89 b5 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rsi
  20b688:	48 89 95 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rdx
  20b68f:	75 05                	jne    20b696 <panicExtra+0x56>
        // Panicked during a panic.

        // TODO detect if a different thread caused the panic, because in that case
        // we would want to return here instead of calling abort, so that the thread
        // which first called panic can finish printing a stack trace.
        os.abort();
  20b691:	e8 8a 12 00 00       	call   20c920 <abort>
    if (@atomicRmw(u8, &panicking, builtin.AtomicRmwOp.Xchg, 1, builtin.AtomicOrder.SeqCst) == 1) {
  20b696:	eb 00                	jmp    20b698 <panicExtra+0x58>
  20b698:	48 8d bd e8 fe ff ff 	lea    rdi,[rbp-0x118]
  20b69f:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
    }
    const stderr = getStderrStream() catch os.abort();
  20b6a6:	e8 a5 12 00 00       	call   20c950 <getStderrStream>
  20b6ab:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  20b6b2:	00 
  20b6b3:	74 05                	je     20b6ba <panicExtra+0x7a>
  20b6b5:	e8 66 12 00 00       	call   20c920 <abort>
  20b6ba:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  20b6c1:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
  20b6c8:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  20b6cf:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
  20b6d6:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
    stderr.print(format ++ "\n", args) catch os.abort();
  20b6dd:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  20b6e4:	48 8b 95 a8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x158]
  20b6eb:	e8 70 13 00 00       	call   20ca60 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print>
  20b6f0:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  20b6f7:	66 83 bd d6 fe ff ff 	cmp    WORD PTR [rbp-0x12a],0x0
  20b6fe:	00 
  20b6ff:	74 05                	je     20b706 <panicExtra+0xc6>
  20b701:	e8 1a 12 00 00       	call   20c920 <abort>
    if (trace) |t| {
  20b706:	48 83 bd c8 fe ff ff 	cmp    QWORD PTR [rbp-0x138],0x0
  20b70d:	00 
  20b70e:	74 1c                	je     20b72c <panicExtra+0xec>
  20b710:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  20b717:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
        dumpStackTrace(t);
  20b71e:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  20b725:	e8 86 13 00 00       	call   20cab0 <dumpStackTrace>
    if (trace) |t| {
  20b72a:	eb 02                	jmp    20b72e <panicExtra+0xee>
  20b72c:	eb 00                	jmp    20b72e <panicExtra+0xee>
    }
    dumpCurrentStackTrace(first_trace_addr);
  20b72e:	48 8b bd b0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x150]
  20b735:	e8 26 16 00 00       	call   20cd60 <dumpCurrentStackTrace>

    os.abort();
  20b73a:	e8 e1 11 00 00       	call   20c920 <abort>
  20b73f:	90                   	nop

000000000020b740 <warn>:
pub fn warn(comptime fmt: []const u8, args: ...) void {
  20b740:	55                   	push   rbp
  20b741:	48 89 e5             	mov    rbp,rsp
  20b744:	48 81 ec 40 01 00 00 	sub    rsp,0x140
  20b74b:	48 8d bd e8 fe ff ff 	lea    rdi,[rbp-0x118]
  20b752:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  20b759:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
  20b760:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  20b767:	00 00 00 00 
  20b76b:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
  20b772:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  20b779:	1e 00 00 00 
    const stderr = getStderrStream() catch return;
  20b77d:	e8 ce 11 00 00       	call   20c950 <getStderrStream>
  20b782:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  20b789:	00 
  20b78a:	74 09                	je     20b795 <warn+0x55>
  20b78c:	48 81 c4 40 01 00 00 	add    rsp,0x140
  20b793:	5d                   	pop    rbp
  20b794:	c3                   	ret    
  20b795:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  20b79c:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
  20b7a3:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  20b7aa:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  20b7b1:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
    stderr.print(fmt, args) catch return;
  20b7b8:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  20b7bf:	e8 3c 18 00 00       	call   20d000 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.19>
  20b7c4:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  20b7cb:	66 83 bd d6 fe ff ff 	cmp    WORD PTR [rbp-0x12a],0x0
  20b7d2:	00 
  20b7d3:	74 09                	je     20b7de <warn+0x9e>
  20b7d5:	48 81 c4 40 01 00 00 	add    rsp,0x140
  20b7dc:	5d                   	pop    rbp
  20b7dd:	c3                   	ret    
pub fn warn(comptime fmt: []const u8, args: ...) void {
  20b7de:	48 81 c4 40 01 00 00 	add    rsp,0x140
  20b7e5:	5d                   	pop    rbp
  20b7e6:	c3                   	ret    
  20b7e7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  20b7ee:	00 00 

000000000020b7f0 <ThreadContext_init>:
    pub fn init(pSelf: *Self) void {
  20b7f0:	55                   	push   rbp
  20b7f1:	48 89 e5             	mov    rbp,rsp
  20b7f4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
        pSelf.counter = 0;
  20b7f8:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  20b7fc:	48 c7 47 08 00 00 00 	mov    QWORD PTR [rdi+0x8],0x0
  20b803:	00 
  20b804:	48 c7 07 00 00 00 00 	mov    QWORD PTR [rdi],0x0
    pub fn init(pSelf: *Self) void {
  20b80b:	5d                   	pop    rbp
  20b80c:	c3                   	ret    
  20b80d:	0f 1f 00             	nop    DWORD PTR [rax]

000000000020b810 <Timer_start>:
    pub fn start() TimerError!Timer {
  20b810:	55                   	push   rbp
  20b811:	48 89 e5             	mov    rbp,rsp
  20b814:	48 81 ec 30 01 00 00 	sub    rsp,0x130
  20b81b:	48 89 f8             	mov    rax,rdi
        var self: Timer = undefined;
  20b81e:	c5 fa 6f 05 8a 4a ff 	vmovdqu xmm0,XMMWORD PTR [rip+0xffffffffffff4a8a]        # 2002b0 <__unnamed_100>
  20b825:	ff 
  20b826:	c5 f9 7f 45 a0       	vmovdqa XMMWORD PTR [rbp-0x60],xmm0
                var ts: posix.timespec = undefined;
  20b82b:	c5 fa 6f 05 7d 4a ff 	vmovdqu xmm0,XMMWORD PTR [rip+0xffffffffffff4a7d]        # 2002b0 <__unnamed_100>
  20b832:	ff 
  20b833:	c5 f9 7f 45 90       	vmovdqa XMMWORD PTR [rbp-0x70],xmm0
                var result = posix.clock_getres(monotonic_clock_id, &ts);
  20b838:	b9 01 00 00 00       	mov    ecx,0x1
  20b83d:	48 8d 55 90          	lea    rdx,[rbp-0x70]
  20b841:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
  20b848:	89 cf                	mov    edi,ecx
  20b84a:	48 89 b5 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rsi
  20b851:	48 89 d6             	mov    rsi,rdx
  20b854:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  20b85b:	e8 f0 17 00 00       	call   20d050 <clock_getres>
  20b860:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
                var errno = posix.getErrno(result);
  20b864:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  20b868:	e8 13 18 00 00       	call   20d080 <getErrno>
  20b86d:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
                switch (errno) {
  20b871:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  20b875:	48 85 c0             	test   rax,rax
  20b878:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  20b87f:	74 74                	je     20b8f5 <Timer_start+0xe5>
  20b881:	eb 00                	jmp    20b883 <Timer_start+0x73>
  20b883:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  20b88a:	48 83 e8 16          	sub    rax,0x16
  20b88e:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  20b895:	74 60                	je     20b8f7 <Timer_start+0xe7>
  20b897:	eb 00                	jmp    20b899 <Timer_start+0x89>
                    else => return std.os.unexpectedErrorPosix(errno),
  20b899:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  20b89d:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  20b8a4:	e8 77 18 00 00       	call   20d120 <unexpectedErrorPosix>
  20b8a9:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  20b8b0:	66 89 85 56 ff ff ff 	mov    WORD PTR [rbp-0xaa],ax
  20b8b7:	e8 d4 03 00 00       	call   20bc90 <__zig_return_error>
  20b8bc:	66 8b 85 56 ff ff ff 	mov    ax,WORD PTR [rbp-0xaa]
  20b8c3:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  20b8c7:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  20b8cb:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  20b8d2:	48 89 37             	mov    QWORD PTR [rdi],rsi
  20b8d5:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20b8d9:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  20b8dd:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20b8e1:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  20b8e5:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  20b8ec:	48 81 c4 30 01 00 00 	add    rsp,0x130
  20b8f3:	5d                   	pop    rbp
  20b8f4:	c3                   	ret    
                switch (errno) {
  20b8f5:	eb 43                	jmp    20b93a <Timer_start+0x12a>
                    posix.EINVAL => return error.TimerUnsupported,
  20b8f7:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  20b8fe:	e8 8d 03 00 00       	call   20bc90 <__zig_return_error>
  20b903:	48 8b 3d e6 d1 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffffd1e6]        # 208af0 <__unnamed_10>
  20b90a:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  20b911:	48 89 38             	mov    QWORD PTR [rax],rdi
  20b914:	48 8b 3d dd d1 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffffd1dd]        # 208af8 <__unnamed_10+0x8>
  20b91b:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  20b91f:	48 8b 3d da d1 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffffd1da]        # 208b00 <__unnamed_10+0x10>
  20b926:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  20b92a:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  20b931:	48 81 c4 30 01 00 00 	add    rsp,0x130
  20b938:	5d                   	pop    rbp
  20b939:	c3                   	ret    
  20b93a:	48 8d 45 a0          	lea    rax,[rbp-0x60]
                self.resolution = @intCast(u64, ts.tv_sec) * u64(ns_per_s) + @intCast(u64, ts.tv_nsec);
  20b93e:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  20b942:	48 83 f9 00          	cmp    rcx,0x0
  20b946:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  20b94d:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
  20b954:	0f 8d 8c 00 00 00    	jge    20b9e6 <Timer_start+0x1d6>
  20b95a:	e9 ae 00 00 00       	jmp    20ba0d <Timer_start+0x1fd>
                if (errno != 0) return std.os.unexpectedErrorPosix(errno);
  20b95f:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  20b963:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  20b96a:	e8 b1 17 00 00       	call   20d120 <unexpectedErrorPosix>
  20b96f:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  20b976:	66 89 85 3e ff ff ff 	mov    WORD PTR [rbp-0xc2],ax
  20b97d:	e8 0e 03 00 00       	call   20bc90 <__zig_return_error>
  20b982:	66 8b 85 3e ff ff ff 	mov    ax,WORD PTR [rbp-0xc2]
  20b989:	66 89 45 d0          	mov    WORD PTR [rbp-0x30],ax
  20b98d:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  20b991:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  20b998:	48 89 37             	mov    QWORD PTR [rdi],rsi
  20b99b:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  20b99f:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  20b9a3:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  20b9a7:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  20b9ab:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  20b9b2:	48 81 c4 30 01 00 00 	add    rsp,0x130
  20b9b9:	5d                   	pop    rbp
  20b9ba:	c3                   	ret    
  20b9bb:	eb 00                	jmp    20b9bd <Timer_start+0x1ad>
  20b9bd:	48 8d 45 a0          	lea    rax,[rbp-0x60]
                self.start_time = @intCast(u64, ts.tv_sec) * u64(ns_per_s) + @intCast(u64, ts.tv_nsec);
  20b9c1:	48 83 c0 08          	add    rax,0x8
  20b9c5:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  20b9c9:	48 83 f9 00          	cmp    rcx,0x0
  20b9cd:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  20b9d4:	48 89 8d 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rcx
  20b9db:	0f 8d e2 00 00 00    	jge    20bac3 <Timer_start+0x2b3>
  20b9e1:	e9 04 01 00 00       	jmp    20baea <Timer_start+0x2da>
  20b9e6:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
  20b9eb:	89 c1                	mov    ecx,eax
                self.resolution = @intCast(u64, ts.tv_sec) * u64(ns_per_s) + @intCast(u64, ts.tv_nsec);
  20b9ed:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  20b9f4:	48 f7 e1             	mul    rcx
  20b9f7:	40 0f 90 c6          	seto   sil
  20b9fb:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
  20ba02:	40 88 b5 1f ff ff ff 	mov    BYTE PTR [rbp-0xe1],sil
  20ba09:	70 12                	jo     20ba1d <Timer_start+0x20d>
  20ba0b:	eb 20                	jmp    20ba2d <Timer_start+0x21d>
  20ba0d:	48 8d 3d 74 78 03 00 	lea    rdi,[rip+0x37874]        # 243288 <__unnamed_3>
  20ba14:	31 c0                	xor    eax,eax
  20ba16:	89 c6                	mov    esi,eax
  20ba18:	e8 e3 fb ff ff       	call   20b600 <panic>
  20ba1d:	48 8d 3d a4 77 03 00 	lea    rdi,[rip+0x377a4]        # 2431c8 <__unnamed_4>
  20ba24:	31 c0                	xor    eax,eax
  20ba26:	89 c6                	mov    esi,eax
  20ba28:	e8 d3 fb ff ff       	call   20b600 <panic>
  20ba2d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  20ba31:	48 83 f8 00          	cmp    rax,0x0
  20ba35:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
  20ba3c:	7c 25                	jl     20ba63 <Timer_start+0x253>
  20ba3e:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  20ba45:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  20ba4c:	48 01 c8             	add    rax,rcx
  20ba4f:	0f 92 c2             	setb   dl
  20ba52:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
  20ba59:	88 95 07 ff ff ff    	mov    BYTE PTR [rbp-0xf9],dl
  20ba5f:	72 12                	jb     20ba73 <Timer_start+0x263>
  20ba61:	eb 20                	jmp    20ba83 <Timer_start+0x273>
  20ba63:	48 8d 3d 1e 78 03 00 	lea    rdi,[rip+0x3781e]        # 243288 <__unnamed_3>
  20ba6a:	31 c0                	xor    eax,eax
  20ba6c:	89 c6                	mov    esi,eax
  20ba6e:	e8 8d fb ff ff       	call   20b600 <panic>
  20ba73:	48 8d 3d 4e 77 03 00 	lea    rdi,[rip+0x3774e]        # 2431c8 <__unnamed_4>
  20ba7a:	31 c0                	xor    eax,eax
  20ba7c:	89 c6                	mov    esi,eax
  20ba7e:	e8 7d fb ff ff       	call   20b600 <panic>
  20ba83:	bf 01 00 00 00       	mov    edi,0x1
  20ba88:	48 8d 75 90          	lea    rsi,[rbp-0x70]
  20ba8c:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  20ba93:	48 8b 8d 08 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf8]
  20ba9a:	48 89 08             	mov    QWORD PTR [rax],rcx
                result = posix.clock_gettime(monotonic_clock_id, &ts);
  20ba9d:	e8 9e 16 00 00       	call   20d140 <clock_gettime>
  20baa2:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
                errno = posix.getErrno(result);
  20baa6:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  20baaa:	e8 d1 15 00 00       	call   20d080 <getErrno>
  20baaf:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
                if (errno != 0) return std.os.unexpectedErrorPosix(errno);
  20bab3:	48 83 7d 80 00       	cmp    QWORD PTR [rbp-0x80],0x0
  20bab8:	0f 85 a1 fe ff ff    	jne    20b95f <Timer_start+0x14f>
  20babe:	e9 f8 fe ff ff       	jmp    20b9bb <Timer_start+0x1ab>
  20bac3:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
  20bac8:	89 c1                	mov    ecx,eax
                self.start_time = @intCast(u64, ts.tv_sec) * u64(ns_per_s) + @intCast(u64, ts.tv_nsec);
  20baca:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  20bad1:	48 f7 e1             	mul    rcx
  20bad4:	40 0f 90 c6          	seto   sil
  20bad8:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  20badf:	40 88 b5 f7 fe ff ff 	mov    BYTE PTR [rbp-0x109],sil
  20bae6:	70 12                	jo     20bafa <Timer_start+0x2ea>
  20bae8:	eb 20                	jmp    20bb0a <Timer_start+0x2fa>
  20baea:	48 8d 3d 97 77 03 00 	lea    rdi,[rip+0x37797]        # 243288 <__unnamed_3>
  20baf1:	31 c0                	xor    eax,eax
  20baf3:	89 c6                	mov    esi,eax
  20baf5:	e8 06 fb ff ff       	call   20b600 <panic>
  20bafa:	48 8d 3d c7 76 03 00 	lea    rdi,[rip+0x376c7]        # 2431c8 <__unnamed_4>
  20bb01:	31 c0                	xor    eax,eax
  20bb03:	89 c6                	mov    esi,eax
  20bb05:	e8 f6 fa ff ff       	call   20b600 <panic>
  20bb0a:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  20bb0e:	48 83 f8 00          	cmp    rax,0x0
  20bb12:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  20bb19:	7c 25                	jl     20bb40 <Timer_start+0x330>
  20bb1b:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  20bb22:	48 8b 8d e8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x118]
  20bb29:	48 01 c8             	add    rax,rcx
  20bb2c:	0f 92 c2             	setb   dl
  20bb2f:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
  20bb36:	88 95 df fe ff ff    	mov    BYTE PTR [rbp-0x121],dl
  20bb3c:	72 12                	jb     20bb50 <Timer_start+0x340>
  20bb3e:	eb 20                	jmp    20bb60 <Timer_start+0x350>
  20bb40:	48 8d 3d 41 77 03 00 	lea    rdi,[rip+0x37741]        # 243288 <__unnamed_3>
  20bb47:	31 c0                	xor    eax,eax
  20bb49:	89 c6                	mov    esi,eax
  20bb4b:	e8 b0 fa ff ff       	call   20b600 <panic>
  20bb50:	48 8d 3d 71 76 03 00 	lea    rdi,[rip+0x37671]        # 2431c8 <__unnamed_4>
  20bb57:	31 c0                	xor    eax,eax
  20bb59:	89 c6                	mov    esi,eax
  20bb5b:	e8 a0 fa ff ff       	call   20b600 <panic>
  20bb60:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  20bb67:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  20bb6e:	48 89 08             	mov    QWORD PTR [rax],rcx
        return self;
  20bb71:	66 c7 45 b8 00 00    	mov    WORD PTR [rbp-0x48],0x0
  20bb77:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  20bb7b:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
  20bb7f:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  20bb83:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
  20bb87:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  20bb8b:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
  20bb92:	48 89 16             	mov    QWORD PTR [rsi],rdx
  20bb95:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  20bb99:	48 89 56 08          	mov    QWORD PTR [rsi+0x8],rdx
  20bb9d:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  20bba1:	48 89 56 10          	mov    QWORD PTR [rsi+0x10],rdx
  20bba5:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  20bbac:	48 81 c4 30 01 00 00 	add    rsp,0x130
  20bbb3:	5d                   	pop    rbp
  20bbb4:	c3                   	ret    
  20bbb5:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20bbbc:	00 00 00 00 

000000000020bbc0 <warn.16>:
  20bbc0:	55                   	push   rbp
  20bbc1:	48 89 e5             	mov    rbp,rsp
  20bbc4:	48 81 ec 50 01 00 00 	sub    rsp,0x150
  20bbcb:	48 8d 85 e8 fe ff ff 	lea    rax,[rbp-0x118]
  20bbd2:	48 8d 8d f8 fe ff ff 	lea    rcx,[rbp-0x108]
  20bbd9:	48 8d 95 10 ff ff ff 	lea    rdx,[rbp-0xf0]
  20bbe0:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  20bbe7:	00 00 00 00 
  20bbeb:	48 89 95 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rdx
  20bbf2:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  20bbf9:	1e 00 00 00 
  20bbfd:	48 89 bd c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rdi
  20bc04:	48 89 b5 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rsi
    const stderr = getStderrStream() catch return;
  20bc0b:	48 89 c7             	mov    rdi,rax
  20bc0e:	48 89 ce             	mov    rsi,rcx
  20bc11:	e8 3a 0d 00 00       	call   20c950 <getStderrStream>
  20bc16:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  20bc1d:	00 
  20bc1e:	74 09                	je     20bc29 <warn.16+0x69>
  20bc20:	48 81 c4 50 01 00 00 	add    rsp,0x150
  20bc27:	5d                   	pop    rbp
  20bc28:	c3                   	ret    
  20bc29:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  20bc30:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  20bc37:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  20bc3e:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  20bc45:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
    stderr.print(fmt, args) catch return;
  20bc4c:	48 8b b5 b8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x148]
  20bc53:	48 8b 95 c8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x138]
  20bc5a:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  20bc61:	e8 6a 15 00 00       	call   20d1d0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.20>
  20bc66:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  20bc6d:	66 83 bd d6 fe ff ff 	cmp    WORD PTR [rbp-0x12a],0x0
  20bc74:	00 
  20bc75:	74 09                	je     20bc80 <warn.16+0xc0>
  20bc77:	48 81 c4 50 01 00 00 	add    rsp,0x150
  20bc7e:	5d                   	pop    rbp
  20bc7f:	c3                   	ret    
pub fn warn(comptime fmt: []const u8, args: ...) void {
  20bc80:	48 81 c4 50 01 00 00 	add    rsp,0x150
  20bc87:	5d                   	pop    rbp
  20bc88:	c3                   	ret    
  20bc89:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

000000000020bc90 <__zig_return_error>:
  20bc90:	55                   	push   rbp
  20bc91:	48 89 e5             	mov    rbp,rsp
  20bc94:	48 8b 45 08          	mov    rax,QWORD PTR [rbp+0x8]
  20bc98:	48 8b 4f 10          	mov    rcx,QWORD PTR [rdi+0x10]
  20bc9c:	48 8b 17             	mov    rdx,QWORD PTR [rdi]
  20bc9f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  20bca3:	48 89 d0             	mov    rax,rdx
  20bca6:	31 f6                	xor    esi,esi
  20bca8:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  20bcac:	89 f2                	mov    edx,esi
  20bcae:	48 f7 f1             	div    rcx
  20bcb1:	48 8b 4f 08          	mov    rcx,QWORD PTR [rdi+0x8]
  20bcb5:	4c 8b 45 f8          	mov    r8,QWORD PTR [rbp-0x8]
  20bcb9:	4c 89 04 d1          	mov    QWORD PTR [rcx+rdx*8],r8
  20bcbd:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  20bcc1:	48 83 c1 01          	add    rcx,0x1
  20bcc5:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  20bcc8:	5d                   	pop    rbp
  20bcc9:	c3                   	ret    
  20bcca:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000020bcd0 <Timer_read>:
    pub fn read(self: *Timer) u64 {
  20bcd0:	55                   	push   rbp
  20bcd1:	48 89 e5             	mov    rbp,rsp
  20bcd4:	48 83 ec 20          	sub    rsp,0x20
  20bcd8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
        var clock = clockNative() - self.start_time;
  20bcdc:	e8 5f f3 ff ff       	call   20b040 <Timer_clockLinux>
  20bce1:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  20bce5:	48 2b 47 08          	sub    rax,QWORD PTR [rdi+0x8]
  20bce9:	0f 92 c1             	setb   cl
  20bcec:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  20bcf0:	88 4d e7             	mov    BYTE PTR [rbp-0x19],cl
  20bcf3:	72 02                	jb     20bcf7 <Timer_read+0x27>
  20bcf5:	eb 10                	jmp    20bd07 <Timer_read+0x37>
  20bcf7:	48 8d 3d ca 74 03 00 	lea    rdi,[rip+0x374ca]        # 2431c8 <__unnamed_4>
  20bcfe:	31 c0                	xor    eax,eax
  20bd00:	89 c6                	mov    esi,eax
  20bd02:	e8 f9 f8 ff ff       	call   20b600 <panic>
  20bd07:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20bd0b:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
            Os.linux => clock,
  20bd0f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
        return switch (builtin.os) {
  20bd13:	48 83 c4 20          	add    rsp,0x20
  20bd17:	5d                   	pop    rbp
  20bd18:	c3                   	ret    
  20bd19:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

000000000020bd20 <spawnThread>:

/// caller must call wait on the returned thread
/// fn startFn(@typeOf(context)) T
/// where T is u8, noreturn, void, or !void
/// caller must call wait on the returned thread
pub fn spawnThread(context: var, comptime startFn: var) SpawnThreadError!*Thread {
  20bd20:	55                   	push   rbp
  20bd21:	48 89 e5             	mov    rbp,rsp
  20bd24:	48 81 ec 40 01 00 00 	sub    rsp,0x140
  20bd2b:	48 89 f8             	mov    rax,rdi
  20bd2e:	31 c9                	xor    ecx,ecx
  20bd30:	41 89 c8             	mov    r8d,ecx
  20bd33:	b9 00 00 80 00       	mov    ecx,0x800000
  20bd38:	41 89 c9             	mov    r9d,ecx
  20bd3b:	b9 03 00 00 00       	mov    ecx,0x3
  20bd40:	41 89 ca             	mov    r10d,ecx
  20bd43:	b9 22 01 00 00       	mov    ecx,0x122
  20bd48:	41 bb ff ff ff ff    	mov    r11d,0xffffffff
  20bd4e:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
    };

    const MAP_GROWSDOWN = if (builtin.os == builtin.Os.linux) linux.MAP_GROWSDOWN else 0;

    const mmap_len = default_stack_size;
    const stack_addr = posix.mmap(null, mmap_len, posix.PROT_READ | posix.PROT_WRITE, posix.MAP_PRIVATE | posix.MAP_ANONYMOUS | MAP_GROWSDOWN, -1, 0);
  20bd52:	48 89 7d 90          	mov    QWORD PTR [rbp-0x70],rdi
  20bd56:	4c 89 c7             	mov    rdi,r8
  20bd59:	48 89 75 88          	mov    QWORD PTR [rbp-0x78],rsi
  20bd5d:	4c 89 ce             	mov    rsi,r9
  20bd60:	4c 89 d2             	mov    rdx,r10
  20bd63:	4c 89 45 80          	mov    QWORD PTR [rbp-0x80],r8
  20bd67:	45 89 d8             	mov    r8d,r11d
  20bd6a:	4c 8b 4d 80          	mov    r9,QWORD PTR [rbp-0x80]
  20bd6e:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  20bd75:	e8 b6 17 00 00       	call   20d530 <mmap>
  20bd7a:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
    if (stack_addr == posix.MAP_FAILED) return error.OutOfMemory;
  20bd7e:	48 83 7d d0 ff       	cmp    QWORD PTR [rbp-0x30],0xffffffffffffffff
  20bd83:	75 32                	jne    20bdb7 <spawnThread+0x97>
  20bd85:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  20bd89:	e8 02 ff ff ff       	call   20bc90 <__zig_return_error>
  20bd8e:	48 8b 3d db 46 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff46db]        # 200470 <__unnamed_11>
  20bd95:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  20bd99:	48 89 38             	mov    QWORD PTR [rax],rdi
  20bd9c:	48 8b 3d d5 46 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff46d5]        # 200478 <__unnamed_11+0x8>
  20bda3:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  20bda7:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  20bdae:	48 81 c4 40 01 00 00 	add    rsp,0x140
  20bdb5:	5d                   	pop    rbp
  20bdb6:	c3                   	ret    
  20bdb7:	eb 00                	jmp    20bdb9 <spawnThread+0x99>
    errdefer assert(posix.munmap(stack_addr, mmap_len) == 0);

    var stack_end: usize = stack_addr + mmap_len;
  20bdb9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20bdbd:	48 05 00 00 80 00    	add    rax,0x800000
  20bdc3:	0f 92 c1             	setb   cl
  20bdc6:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  20bdcd:	88 8d 6f ff ff ff    	mov    BYTE PTR [rbp-0x91],cl
  20bdd3:	0f 82 84 01 00 00    	jb     20bf5d <spawnThread+0x23d>
  20bdd9:	e9 8f 01 00 00       	jmp    20bf6d <spawnThread+0x24d>
            posix.EINVAL => unreachable,
            posix.ENOMEM => return SpawnThreadError.SystemResources,
            posix.ENOSPC => unreachable,
            posix.EPERM => unreachable,
            posix.EUSERS => unreachable,
            else => return unexpectedErrorPosix(err),
  20bdde:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  20bde2:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  20bde6:	e8 35 13 00 00       	call   20d120 <unexpectedErrorPosix>
  20bdeb:	b9 00 00 80 00       	mov    ecx,0x800000
  20bdf0:	89 ce                	mov    esi,ecx
    errdefer assert(posix.munmap(stack_addr, mmap_len) == 0);
  20bdf2:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  20bdf6:	66 89 85 6c ff ff ff 	mov    WORD PTR [rbp-0x94],ax
  20bdfd:	e8 be 17 00 00       	call   20d5c0 <munmap>
  20be02:	48 83 f8 00          	cmp    rax,0x0
  20be06:	0f 94 c2             	sete   dl
  20be09:	0f b6 fa             	movzx  edi,dl
  20be0c:	e8 ef f1 ff ff       	call   20b000 <assert>
            else => return unexpectedErrorPosix(err),
  20be11:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  20be15:	e8 76 fe ff ff       	call   20bc90 <__zig_return_error>
  20be1a:	66 44 8b 85 6c ff ff 	mov    r8w,WORD PTR [rbp-0x94]
  20be21:	ff 
  20be22:	66 44 89 45 f0       	mov    WORD PTR [rbp-0x10],r8w
  20be27:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20be2b:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  20be2f:	48 89 06             	mov    QWORD PTR [rsi],rax
  20be32:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20be36:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  20be3a:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  20be41:	48 81 c4 40 01 00 00 	add    rsp,0x140
  20be48:	5d                   	pop    rbp
  20be49:	c3                   	ret    
            0 => return thread_ptr,
  20be4a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20be4e:	66 c7 45 e0 00 00    	mov    WORD PTR [rbp-0x20],0x0
  20be54:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  20be58:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20be5c:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  20be60:	48 89 01             	mov    QWORD PTR [rcx],rax
  20be63:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20be67:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20be6b:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  20be72:	48 81 c4 40 01 00 00 	add    rsp,0x140
  20be79:	5d                   	pop    rbp
  20be7a:	c3                   	ret    
  20be7b:	b8 00 00 80 00       	mov    eax,0x800000
  20be80:	89 c6                	mov    esi,eax
    errdefer assert(posix.munmap(stack_addr, mmap_len) == 0);
  20be82:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  20be86:	e8 35 17 00 00       	call   20d5c0 <munmap>
  20be8b:	48 83 f8 00          	cmp    rax,0x0
  20be8f:	0f 94 c1             	sete   cl
  20be92:	0f b6 f9             	movzx  edi,cl
  20be95:	e8 66 f1 ff ff       	call   20b000 <assert>
            posix.EAGAIN => return SpawnThreadError.ThreadQuotaExceeded,
  20be9a:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  20be9e:	e8 ed fd ff ff       	call   20bc90 <__zig_return_error>
  20bea3:	48 8b 05 96 4a ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff4a96]        # 200940 <__unnamed_12>
  20beaa:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  20beae:	48 89 06             	mov    QWORD PTR [rsi],rax
  20beb1:	48 8b 05 90 4a ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff4a90]        # 200948 <__unnamed_12+0x8>
  20beb8:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  20bebc:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  20bec3:	48 81 c4 40 01 00 00 	add    rsp,0x140
  20beca:	5d                   	pop    rbp
  20becb:	c3                   	ret    
  20becc:	48 8d 3d 3d 74 03 00 	lea    rdi,[rip+0x3743d]        # 243310 <__unnamed_13>
  20bed3:	31 c0                	xor    eax,eax
  20bed5:	89 c6                	mov    esi,eax
            posix.EINVAL => unreachable,
  20bed7:	e8 24 f7 ff ff       	call   20b600 <panic>
  20bedc:	b8 00 00 80 00       	mov    eax,0x800000
  20bee1:	89 c6                	mov    esi,eax
    errdefer assert(posix.munmap(stack_addr, mmap_len) == 0);
  20bee3:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  20bee7:	e8 d4 16 00 00       	call   20d5c0 <munmap>
  20beec:	48 83 f8 00          	cmp    rax,0x0
  20bef0:	0f 94 c1             	sete   cl
  20bef3:	0f b6 f9             	movzx  edi,cl
  20bef6:	e8 05 f1 ff ff       	call   20b000 <assert>
            posix.ENOMEM => return SpawnThreadError.SystemResources,
  20befb:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  20beff:	e8 8c fd ff ff       	call   20bc90 <__zig_return_error>
  20bf04:	48 8b 05 75 45 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff4575]        # 200480 <__unnamed_14>
  20bf0b:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  20bf0f:	48 89 06             	mov    QWORD PTR [rsi],rax
  20bf12:	48 8b 05 6f 45 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff456f]        # 200488 <__unnamed_14+0x8>
  20bf19:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  20bf1d:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  20bf24:	48 81 c4 40 01 00 00 	add    rsp,0x140
  20bf2b:	5d                   	pop    rbp
  20bf2c:	c3                   	ret    
  20bf2d:	48 8d 3d dc 73 03 00 	lea    rdi,[rip+0x373dc]        # 243310 <__unnamed_13>
  20bf34:	31 c0                	xor    eax,eax
  20bf36:	89 c6                	mov    esi,eax
            posix.ENOSPC => unreachable,
  20bf38:	e8 c3 f6 ff ff       	call   20b600 <panic>
  20bf3d:	48 8d 3d cc 73 03 00 	lea    rdi,[rip+0x373cc]        # 243310 <__unnamed_13>
  20bf44:	31 c0                	xor    eax,eax
  20bf46:	89 c6                	mov    esi,eax
            posix.EPERM => unreachable,
  20bf48:	e8 b3 f6 ff ff       	call   20b600 <panic>
  20bf4d:	48 8d 3d bc 73 03 00 	lea    rdi,[rip+0x373bc]        # 243310 <__unnamed_13>
  20bf54:	31 c0                	xor    eax,eax
  20bf56:	89 c6                	mov    esi,eax
            posix.EUSERS => unreachable,
  20bf58:	e8 a3 f6 ff ff       	call   20b600 <panic>
  20bf5d:	48 8d 3d 64 72 03 00 	lea    rdi,[rip+0x37264]        # 2431c8 <__unnamed_4>
  20bf64:	31 c0                	xor    eax,eax
  20bf66:	89 c6                	mov    esi,eax
    var stack_end: usize = stack_addr + mmap_len;
  20bf68:	e8 93 f6 ff ff       	call   20b600 <panic>
  20bf6d:	be aa 00 00 00       	mov    esi,0xaa
  20bf72:	b8 08 00 00 00       	mov    eax,0x8
  20bf77:	89 c2                	mov    edx,eax
  20bf79:	48 8d 4d c0          	lea    rcx,[rbp-0x40]
  20bf7d:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  20bf84:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
    var arg: usize = undefined;
  20bf88:	48 89 cf             	mov    rdi,rcx
  20bf8b:	e8 20 89 02 00       	call   2348b0 <memset>
        stack_end -= @sizeOf(Context);
  20bf90:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  20bf94:	48 83 e9 08          	sub    rcx,0x8
  20bf98:	41 0f 92 c0          	setb   r8b
  20bf9c:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
  20bfa3:	44 88 85 5f ff ff ff 	mov    BYTE PTR [rbp-0xa1],r8b
  20bfaa:	72 02                	jb     20bfae <spawnThread+0x28e>
  20bfac:	eb 10                	jmp    20bfbe <spawnThread+0x29e>
  20bfae:	48 8d 3d 13 72 03 00 	lea    rdi,[rip+0x37213]        # 2431c8 <__unnamed_4>
  20bfb5:	31 c0                	xor    eax,eax
  20bfb7:	89 c6                	mov    esi,eax
  20bfb9:	e8 42 f6 ff ff       	call   20b600 <panic>
  20bfbe:	31 c0                	xor    eax,eax
  20bfc0:	88 c1                	mov    cl,al
  20bfc2:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  20bfc9:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
        stack_end -= stack_end % @alignOf(Context);
  20bfcd:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  20bfd1:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20bfd5:	f6 c1 01             	test   cl,0x1
  20bfd8:	48 89 bd 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdi
  20bfdf:	48 89 b5 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rsi
  20bfe6:	75 29                	jne    20c011 <spawnThread+0x2f1>
  20bfe8:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  20bfef:	48 83 e0 07          	and    rax,0x7
  20bff3:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
  20bffa:	48 29 c1             	sub    rcx,rax
  20bffd:	0f 92 c2             	setb   dl
  20c000:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
  20c007:	88 95 3f ff ff ff    	mov    BYTE PTR [rbp-0xc1],dl
  20c00d:	72 12                	jb     20c021 <spawnThread+0x301>
  20c00f:	eb 20                	jmp    20c031 <spawnThread+0x311>
  20c011:	48 8d 3d e0 72 03 00 	lea    rdi,[rip+0x372e0]        # 2432f8 <__unnamed_15>
  20c018:	31 c0                	xor    eax,eax
  20c01a:	89 c6                	mov    esi,eax
  20c01c:	e8 df f5 ff ff       	call   20b600 <panic>
  20c021:	48 8d 3d a0 71 03 00 	lea    rdi,[rip+0x371a0]        # 2431c8 <__unnamed_4>
  20c028:	31 c0                	xor    eax,eax
  20c02a:	89 c6                	mov    esi,eax
  20c02c:	e8 cf f5 ff ff       	call   20b600 <panic>
  20c031:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  20c038:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
        assert(stack_end >= stack_addr);
  20c03c:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  20c040:	48 3b 4d d0          	cmp    rcx,QWORD PTR [rbp-0x30]
  20c044:	0f 93 c2             	setae  dl
  20c047:	0f b6 fa             	movzx  edi,dl
  20c04a:	e8 b1 ef ff ff       	call   20b000 <assert>
        const context_ptr = @alignCast(@alignOf(Context), @intToPtr(*Context, stack_end));
  20c04f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20c053:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
        context_ptr.* = context;
  20c057:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  20c05b:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  20c05f:	48 89 08             	mov    QWORD PTR [rax],rcx
        arg = stack_end;
  20c062:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20c066:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
    stack_end -= @sizeOf(Thread);
  20c06a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20c06e:	48 83 e8 18          	sub    rax,0x18
  20c072:	0f 92 c2             	setb   dl
  20c075:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  20c07c:	88 95 2f ff ff ff    	mov    BYTE PTR [rbp-0xd1],dl
  20c082:	72 02                	jb     20c086 <spawnThread+0x366>
  20c084:	eb 10                	jmp    20c096 <spawnThread+0x376>
  20c086:	48 8d 3d 3b 71 03 00 	lea    rdi,[rip+0x3713b]        # 2431c8 <__unnamed_4>
  20c08d:	31 c0                	xor    eax,eax
  20c08f:	89 c6                	mov    esi,eax
  20c091:	e8 6a f5 ff ff       	call   20b600 <panic>
  20c096:	31 c0                	xor    eax,eax
  20c098:	88 c1                	mov    cl,al
  20c09a:	48 8b 95 30 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd0]
  20c0a1:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
    stack_end -= stack_end % @alignOf(Thread);
  20c0a5:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  20c0a9:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20c0ad:	f6 c1 01             	test   cl,0x1
  20c0b0:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  20c0b7:	48 89 b5 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rsi
  20c0be:	75 29                	jne    20c0e9 <spawnThread+0x3c9>
  20c0c0:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  20c0c7:	48 83 e0 03          	and    rax,0x3
  20c0cb:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
  20c0d2:	48 29 c1             	sub    rcx,rax
  20c0d5:	0f 92 c2             	setb   dl
  20c0d8:	48 89 8d 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rcx
  20c0df:	88 95 0f ff ff ff    	mov    BYTE PTR [rbp-0xf1],dl
  20c0e5:	72 12                	jb     20c0f9 <spawnThread+0x3d9>
  20c0e7:	eb 20                	jmp    20c109 <spawnThread+0x3e9>
  20c0e9:	48 8d 3d 08 72 03 00 	lea    rdi,[rip+0x37208]        # 2432f8 <__unnamed_15>
  20c0f0:	31 c0                	xor    eax,eax
  20c0f2:	89 c6                	mov    esi,eax
  20c0f4:	e8 07 f5 ff ff       	call   20b600 <panic>
  20c0f9:	48 8d 3d c8 70 03 00 	lea    rdi,[rip+0x370c8]        # 2431c8 <__unnamed_4>
  20c100:	31 c0                	xor    eax,eax
  20c102:	89 c6                	mov    esi,eax
  20c104:	e8 f7 f4 ff ff       	call   20b600 <panic>
  20c109:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  20c110:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
    assert(stack_end >= stack_addr);
  20c114:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  20c118:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  20c11c:	48 29 d1             	sub    rcx,rdx
  20c11f:	40 0f 93 c6          	setae  sil
  20c123:	40 0f b6 fe          	movzx  edi,sil
  20c127:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  20c12e:	e8 cd ee ff ff       	call   20b000 <assert>
    const thread_ptr = @alignCast(@alignOf(Thread), @intToPtr(*Thread, stack_end));
  20c133:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20c137:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
    thread_ptr.data.stack_addr = stack_addr;
  20c13b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20c13f:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  20c143:	48 89 48 08          	mov    QWORD PTR [rax+0x8],rcx
    thread_ptr.data.stack_len = mmap_len;
  20c147:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20c14b:	48 c7 40 10 00 00 80 	mov    QWORD PTR [rax+0x10],0x800000
  20c152:	00 
        const newtls: usize = 0;
  20c153:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
  20c15a:	00 
        const rc = posix.clone(MainFuncs.linuxThreadMain, stack_end, flags, arg, &thread_ptr.data.handle, newtls, &thread_ptr.data.handle);
  20c15b:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  20c15f:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  20c163:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20c167:	48 89 e2             	mov    rdx,rsp
  20c16a:	48 89 02             	mov    QWORD PTR [rdx],rax
  20c16d:	48 8d 3d 1c 14 00 00 	lea    rdi,[rip+0x141c]        # 20d590 <MainFuncs_linuxThreadMain>
  20c174:	41 b8 00 0f 75 00    	mov    r8d,0x750f00
  20c17a:	44 89 c2             	mov    edx,r8d
  20c17d:	45 31 c0             	xor    r8d,r8d
  20c180:	45 89 c1             	mov    r9d,r8d
  20c183:	49 89 c0             	mov    r8,rax
  20c186:	e8 85 88 02 00       	call   234a10 <clone>
  20c18b:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        const err = posix.getErrno(rc);
  20c18f:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  20c193:	e8 e8 0e 00 00       	call   20d080 <getErrno>
  20c198:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
        switch (err) {
  20c19c:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  20c1a0:	48 85 c0             	test   rax,rax
  20c1a3:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  20c1aa:	0f 84 9a fc ff ff    	je     20be4a <spawnThread+0x12a>
  20c1b0:	eb 00                	jmp    20c1b2 <spawnThread+0x492>
  20c1b2:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  20c1b9:	48 83 e8 01          	sub    rax,0x1
  20c1bd:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  20c1c4:	0f 84 73 fd ff ff    	je     20bf3d <spawnThread+0x21d>
  20c1ca:	eb 00                	jmp    20c1cc <spawnThread+0x4ac>
  20c1cc:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  20c1d3:	48 83 e8 0b          	sub    rax,0xb
  20c1d7:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  20c1de:	0f 84 97 fc ff ff    	je     20be7b <spawnThread+0x15b>
  20c1e4:	eb 00                	jmp    20c1e6 <spawnThread+0x4c6>
  20c1e6:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  20c1ed:	48 83 e8 0c          	sub    rax,0xc
  20c1f1:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
  20c1f8:	0f 84 de fc ff ff    	je     20bedc <spawnThread+0x1bc>
  20c1fe:	eb 00                	jmp    20c200 <spawnThread+0x4e0>
  20c200:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  20c207:	48 83 e8 16          	sub    rax,0x16
  20c20b:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
  20c212:	0f 84 b4 fc ff ff    	je     20becc <spawnThread+0x1ac>
  20c218:	eb 00                	jmp    20c21a <spawnThread+0x4fa>
  20c21a:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  20c221:	48 83 e8 1c          	sub    rax,0x1c
  20c225:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  20c22c:	0f 84 fb fc ff ff    	je     20bf2d <spawnThread+0x20d>
  20c232:	eb 00                	jmp    20c234 <spawnThread+0x514>
  20c234:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  20c23b:	48 83 e8 57          	sub    rax,0x57
  20c23f:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
  20c246:	0f 84 01 fd ff ff    	je     20bf4d <spawnThread+0x22d>
  20c24c:	e9 8d fb ff ff       	jmp    20bdde <spawnThread+0xbe>
  20c251:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20c258:	0f 1f 84 00 00 00 00 
  20c25f:	00 

000000000020c260 <spawnThread.17>:
pub fn spawnThread(context: var, comptime startFn: var) SpawnThreadError!*Thread {
  20c260:	55                   	push   rbp
  20c261:	48 89 e5             	mov    rbp,rsp
  20c264:	48 81 ec 40 01 00 00 	sub    rsp,0x140
  20c26b:	48 89 f8             	mov    rax,rdi
  20c26e:	31 c9                	xor    ecx,ecx
  20c270:	41 89 c8             	mov    r8d,ecx
  20c273:	b9 00 00 80 00       	mov    ecx,0x800000
  20c278:	41 89 c9             	mov    r9d,ecx
  20c27b:	b9 03 00 00 00       	mov    ecx,0x3
  20c280:	41 89 ca             	mov    r10d,ecx
  20c283:	b9 22 01 00 00       	mov    ecx,0x122
  20c288:	41 bb ff ff ff ff    	mov    r11d,0xffffffff
  20c28e:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
    const stack_addr = posix.mmap(null, mmap_len, posix.PROT_READ | posix.PROT_WRITE, posix.MAP_PRIVATE | posix.MAP_ANONYMOUS | MAP_GROWSDOWN, -1, 0);
  20c292:	48 89 7d 90          	mov    QWORD PTR [rbp-0x70],rdi
  20c296:	4c 89 c7             	mov    rdi,r8
  20c299:	48 89 75 88          	mov    QWORD PTR [rbp-0x78],rsi
  20c29d:	4c 89 ce             	mov    rsi,r9
  20c2a0:	4c 89 d2             	mov    rdx,r10
  20c2a3:	4c 89 45 80          	mov    QWORD PTR [rbp-0x80],r8
  20c2a7:	45 89 d8             	mov    r8d,r11d
  20c2aa:	4c 8b 4d 80          	mov    r9,QWORD PTR [rbp-0x80]
  20c2ae:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  20c2b5:	e8 76 12 00 00       	call   20d530 <mmap>
  20c2ba:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
    if (stack_addr == posix.MAP_FAILED) return error.OutOfMemory;
  20c2be:	48 83 7d d0 ff       	cmp    QWORD PTR [rbp-0x30],0xffffffffffffffff
  20c2c3:	75 32                	jne    20c2f7 <spawnThread.17+0x97>
  20c2c5:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  20c2c9:	e8 c2 f9 ff ff       	call   20bc90 <__zig_return_error>
  20c2ce:	48 8b 3d 9b 41 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff419b]        # 200470 <__unnamed_11>
  20c2d5:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  20c2d9:	48 89 38             	mov    QWORD PTR [rax],rdi
  20c2dc:	48 8b 3d 95 41 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff4195]        # 200478 <__unnamed_11+0x8>
  20c2e3:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  20c2e7:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  20c2ee:	48 81 c4 40 01 00 00 	add    rsp,0x140
  20c2f5:	5d                   	pop    rbp
  20c2f6:	c3                   	ret    
  20c2f7:	eb 00                	jmp    20c2f9 <spawnThread.17+0x99>
    var stack_end: usize = stack_addr + mmap_len;
  20c2f9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20c2fd:	48 05 00 00 80 00    	add    rax,0x800000
  20c303:	0f 92 c1             	setb   cl
  20c306:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  20c30d:	88 8d 6f ff ff ff    	mov    BYTE PTR [rbp-0x91],cl
  20c313:	0f 82 84 01 00 00    	jb     20c49d <spawnThread.17+0x23d>
  20c319:	e9 8f 01 00 00       	jmp    20c4ad <spawnThread.17+0x24d>
            else => return unexpectedErrorPosix(err),
  20c31e:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  20c322:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  20c326:	e8 f5 0d 00 00       	call   20d120 <unexpectedErrorPosix>
  20c32b:	b9 00 00 80 00       	mov    ecx,0x800000
  20c330:	89 ce                	mov    esi,ecx
    errdefer assert(posix.munmap(stack_addr, mmap_len) == 0);
  20c332:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  20c336:	66 89 85 6c ff ff ff 	mov    WORD PTR [rbp-0x94],ax
  20c33d:	e8 7e 12 00 00       	call   20d5c0 <munmap>
  20c342:	48 83 f8 00          	cmp    rax,0x0
  20c346:	0f 94 c2             	sete   dl
  20c349:	0f b6 fa             	movzx  edi,dl
  20c34c:	e8 af ec ff ff       	call   20b000 <assert>
            else => return unexpectedErrorPosix(err),
  20c351:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  20c355:	e8 36 f9 ff ff       	call   20bc90 <__zig_return_error>
  20c35a:	66 44 8b 85 6c ff ff 	mov    r8w,WORD PTR [rbp-0x94]
  20c361:	ff 
  20c362:	66 44 89 45 f0       	mov    WORD PTR [rbp-0x10],r8w
  20c367:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20c36b:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  20c36f:	48 89 06             	mov    QWORD PTR [rsi],rax
  20c372:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20c376:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  20c37a:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  20c381:	48 81 c4 40 01 00 00 	add    rsp,0x140
  20c388:	5d                   	pop    rbp
  20c389:	c3                   	ret    
            0 => return thread_ptr,
  20c38a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20c38e:	66 c7 45 e0 00 00    	mov    WORD PTR [rbp-0x20],0x0
  20c394:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  20c398:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20c39c:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  20c3a0:	48 89 01             	mov    QWORD PTR [rcx],rax
  20c3a3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20c3a7:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20c3ab:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  20c3b2:	48 81 c4 40 01 00 00 	add    rsp,0x140
  20c3b9:	5d                   	pop    rbp
  20c3ba:	c3                   	ret    
  20c3bb:	b8 00 00 80 00       	mov    eax,0x800000
  20c3c0:	89 c6                	mov    esi,eax
    errdefer assert(posix.munmap(stack_addr, mmap_len) == 0);
  20c3c2:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  20c3c6:	e8 f5 11 00 00       	call   20d5c0 <munmap>
  20c3cb:	48 83 f8 00          	cmp    rax,0x0
  20c3cf:	0f 94 c1             	sete   cl
  20c3d2:	0f b6 f9             	movzx  edi,cl
  20c3d5:	e8 26 ec ff ff       	call   20b000 <assert>
            posix.EAGAIN => return SpawnThreadError.ThreadQuotaExceeded,
  20c3da:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  20c3de:	e8 ad f8 ff ff       	call   20bc90 <__zig_return_error>
  20c3e3:	48 8b 05 56 45 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff4556]        # 200940 <__unnamed_12>
  20c3ea:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  20c3ee:	48 89 06             	mov    QWORD PTR [rsi],rax
  20c3f1:	48 8b 05 50 45 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff4550]        # 200948 <__unnamed_12+0x8>
  20c3f8:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  20c3fc:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  20c403:	48 81 c4 40 01 00 00 	add    rsp,0x140
  20c40a:	5d                   	pop    rbp
  20c40b:	c3                   	ret    
  20c40c:	48 8d 3d fd 6e 03 00 	lea    rdi,[rip+0x36efd]        # 243310 <__unnamed_13>
  20c413:	31 c0                	xor    eax,eax
  20c415:	89 c6                	mov    esi,eax
            posix.EINVAL => unreachable,
  20c417:	e8 e4 f1 ff ff       	call   20b600 <panic>
  20c41c:	b8 00 00 80 00       	mov    eax,0x800000
  20c421:	89 c6                	mov    esi,eax
    errdefer assert(posix.munmap(stack_addr, mmap_len) == 0);
  20c423:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  20c427:	e8 94 11 00 00       	call   20d5c0 <munmap>
  20c42c:	48 83 f8 00          	cmp    rax,0x0
  20c430:	0f 94 c1             	sete   cl
  20c433:	0f b6 f9             	movzx  edi,cl
  20c436:	e8 c5 eb ff ff       	call   20b000 <assert>
            posix.ENOMEM => return SpawnThreadError.SystemResources,
  20c43b:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  20c43f:	e8 4c f8 ff ff       	call   20bc90 <__zig_return_error>
  20c444:	48 8b 05 35 40 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff4035]        # 200480 <__unnamed_14>
  20c44b:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  20c44f:	48 89 06             	mov    QWORD PTR [rsi],rax
  20c452:	48 8b 05 2f 40 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff402f]        # 200488 <__unnamed_14+0x8>
  20c459:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  20c45d:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  20c464:	48 81 c4 40 01 00 00 	add    rsp,0x140
  20c46b:	5d                   	pop    rbp
  20c46c:	c3                   	ret    
  20c46d:	48 8d 3d 9c 6e 03 00 	lea    rdi,[rip+0x36e9c]        # 243310 <__unnamed_13>
  20c474:	31 c0                	xor    eax,eax
  20c476:	89 c6                	mov    esi,eax
            posix.ENOSPC => unreachable,
  20c478:	e8 83 f1 ff ff       	call   20b600 <panic>
  20c47d:	48 8d 3d 8c 6e 03 00 	lea    rdi,[rip+0x36e8c]        # 243310 <__unnamed_13>
  20c484:	31 c0                	xor    eax,eax
  20c486:	89 c6                	mov    esi,eax
            posix.EPERM => unreachable,
  20c488:	e8 73 f1 ff ff       	call   20b600 <panic>
  20c48d:	48 8d 3d 7c 6e 03 00 	lea    rdi,[rip+0x36e7c]        # 243310 <__unnamed_13>
  20c494:	31 c0                	xor    eax,eax
  20c496:	89 c6                	mov    esi,eax
            posix.EUSERS => unreachable,
  20c498:	e8 63 f1 ff ff       	call   20b600 <panic>
  20c49d:	48 8d 3d 24 6d 03 00 	lea    rdi,[rip+0x36d24]        # 2431c8 <__unnamed_4>
  20c4a4:	31 c0                	xor    eax,eax
  20c4a6:	89 c6                	mov    esi,eax
    var stack_end: usize = stack_addr + mmap_len;
  20c4a8:	e8 53 f1 ff ff       	call   20b600 <panic>
  20c4ad:	be aa 00 00 00       	mov    esi,0xaa
  20c4b2:	b8 08 00 00 00       	mov    eax,0x8
  20c4b7:	89 c2                	mov    edx,eax
  20c4b9:	48 8d 4d c0          	lea    rcx,[rbp-0x40]
  20c4bd:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  20c4c4:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
    var arg: usize = undefined;
  20c4c8:	48 89 cf             	mov    rdi,rcx
  20c4cb:	e8 e0 83 02 00       	call   2348b0 <memset>
        stack_end -= @sizeOf(Context);
  20c4d0:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  20c4d4:	48 83 e9 08          	sub    rcx,0x8
  20c4d8:	41 0f 92 c0          	setb   r8b
  20c4dc:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
  20c4e3:	44 88 85 5f ff ff ff 	mov    BYTE PTR [rbp-0xa1],r8b
  20c4ea:	72 02                	jb     20c4ee <spawnThread.17+0x28e>
  20c4ec:	eb 10                	jmp    20c4fe <spawnThread.17+0x29e>
  20c4ee:	48 8d 3d d3 6c 03 00 	lea    rdi,[rip+0x36cd3]        # 2431c8 <__unnamed_4>
  20c4f5:	31 c0                	xor    eax,eax
  20c4f7:	89 c6                	mov    esi,eax
  20c4f9:	e8 02 f1 ff ff       	call   20b600 <panic>
  20c4fe:	31 c0                	xor    eax,eax
  20c500:	88 c1                	mov    cl,al
  20c502:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  20c509:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
        stack_end -= stack_end % @alignOf(Context);
  20c50d:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  20c511:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20c515:	f6 c1 01             	test   cl,0x1
  20c518:	48 89 bd 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdi
  20c51f:	48 89 b5 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rsi
  20c526:	75 29                	jne    20c551 <spawnThread.17+0x2f1>
  20c528:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  20c52f:	48 83 e0 07          	and    rax,0x7
  20c533:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
  20c53a:	48 29 c1             	sub    rcx,rax
  20c53d:	0f 92 c2             	setb   dl
  20c540:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
  20c547:	88 95 3f ff ff ff    	mov    BYTE PTR [rbp-0xc1],dl
  20c54d:	72 12                	jb     20c561 <spawnThread.17+0x301>
  20c54f:	eb 20                	jmp    20c571 <spawnThread.17+0x311>
  20c551:	48 8d 3d a0 6d 03 00 	lea    rdi,[rip+0x36da0]        # 2432f8 <__unnamed_15>
  20c558:	31 c0                	xor    eax,eax
  20c55a:	89 c6                	mov    esi,eax
  20c55c:	e8 9f f0 ff ff       	call   20b600 <panic>
  20c561:	48 8d 3d 60 6c 03 00 	lea    rdi,[rip+0x36c60]        # 2431c8 <__unnamed_4>
  20c568:	31 c0                	xor    eax,eax
  20c56a:	89 c6                	mov    esi,eax
  20c56c:	e8 8f f0 ff ff       	call   20b600 <panic>
  20c571:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  20c578:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
        assert(stack_end >= stack_addr);
  20c57c:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  20c580:	48 3b 4d d0          	cmp    rcx,QWORD PTR [rbp-0x30]
  20c584:	0f 93 c2             	setae  dl
  20c587:	0f b6 fa             	movzx  edi,dl
  20c58a:	e8 71 ea ff ff       	call   20b000 <assert>
        const context_ptr = @alignCast(@alignOf(Context), @intToPtr(*Context, stack_end));
  20c58f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20c593:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
        context_ptr.* = context;
  20c597:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  20c59b:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  20c59f:	48 89 08             	mov    QWORD PTR [rax],rcx
        arg = stack_end;
  20c5a2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20c5a6:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
    stack_end -= @sizeOf(Thread);
  20c5aa:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20c5ae:	48 83 e8 18          	sub    rax,0x18
  20c5b2:	0f 92 c2             	setb   dl
  20c5b5:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  20c5bc:	88 95 2f ff ff ff    	mov    BYTE PTR [rbp-0xd1],dl
  20c5c2:	72 02                	jb     20c5c6 <spawnThread.17+0x366>
  20c5c4:	eb 10                	jmp    20c5d6 <spawnThread.17+0x376>
  20c5c6:	48 8d 3d fb 6b 03 00 	lea    rdi,[rip+0x36bfb]        # 2431c8 <__unnamed_4>
  20c5cd:	31 c0                	xor    eax,eax
  20c5cf:	89 c6                	mov    esi,eax
  20c5d1:	e8 2a f0 ff ff       	call   20b600 <panic>
  20c5d6:	31 c0                	xor    eax,eax
  20c5d8:	88 c1                	mov    cl,al
  20c5da:	48 8b 95 30 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd0]
  20c5e1:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
    stack_end -= stack_end % @alignOf(Thread);
  20c5e5:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  20c5e9:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20c5ed:	f6 c1 01             	test   cl,0x1
  20c5f0:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  20c5f7:	48 89 b5 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rsi
  20c5fe:	75 29                	jne    20c629 <spawnThread.17+0x3c9>
  20c600:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  20c607:	48 83 e0 03          	and    rax,0x3
  20c60b:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
  20c612:	48 29 c1             	sub    rcx,rax
  20c615:	0f 92 c2             	setb   dl
  20c618:	48 89 8d 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rcx
  20c61f:	88 95 0f ff ff ff    	mov    BYTE PTR [rbp-0xf1],dl
  20c625:	72 12                	jb     20c639 <spawnThread.17+0x3d9>
  20c627:	eb 20                	jmp    20c649 <spawnThread.17+0x3e9>
  20c629:	48 8d 3d c8 6c 03 00 	lea    rdi,[rip+0x36cc8]        # 2432f8 <__unnamed_15>
  20c630:	31 c0                	xor    eax,eax
  20c632:	89 c6                	mov    esi,eax
  20c634:	e8 c7 ef ff ff       	call   20b600 <panic>
  20c639:	48 8d 3d 88 6b 03 00 	lea    rdi,[rip+0x36b88]        # 2431c8 <__unnamed_4>
  20c640:	31 c0                	xor    eax,eax
  20c642:	89 c6                	mov    esi,eax
  20c644:	e8 b7 ef ff ff       	call   20b600 <panic>
  20c649:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  20c650:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
    assert(stack_end >= stack_addr);
  20c654:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  20c658:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  20c65c:	48 29 d1             	sub    rcx,rdx
  20c65f:	40 0f 93 c6          	setae  sil
  20c663:	40 0f b6 fe          	movzx  edi,sil
  20c667:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  20c66e:	e8 8d e9 ff ff       	call   20b000 <assert>
    const thread_ptr = @alignCast(@alignOf(Thread), @intToPtr(*Thread, stack_end));
  20c673:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20c677:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
    thread_ptr.data.stack_addr = stack_addr;
  20c67b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20c67f:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  20c683:	48 89 48 08          	mov    QWORD PTR [rax+0x8],rcx
    thread_ptr.data.stack_len = mmap_len;
  20c687:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20c68b:	48 c7 40 10 00 00 80 	mov    QWORD PTR [rax+0x10],0x800000
  20c692:	00 
        const newtls: usize = 0;
  20c693:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
  20c69a:	00 
        const rc = posix.clone(MainFuncs.linuxThreadMain, stack_end, flags, arg, &thread_ptr.data.handle, newtls, &thread_ptr.data.handle);
  20c69b:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  20c69f:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  20c6a3:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20c6a7:	48 89 e2             	mov    rdx,rsp
  20c6aa:	48 89 02             	mov    QWORD PTR [rdx],rax
  20c6ad:	48 8d 3d 9c 11 00 00 	lea    rdi,[rip+0x119c]        # 20d850 <MainFuncs_linuxThreadMain.21>
  20c6b4:	41 b8 00 0f 75 00    	mov    r8d,0x750f00
  20c6ba:	44 89 c2             	mov    edx,r8d
  20c6bd:	45 31 c0             	xor    r8d,r8d
  20c6c0:	45 89 c1             	mov    r9d,r8d
  20c6c3:	49 89 c0             	mov    r8,rax
  20c6c6:	e8 45 83 02 00       	call   234a10 <clone>
  20c6cb:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        const err = posix.getErrno(rc);
  20c6cf:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  20c6d3:	e8 a8 09 00 00       	call   20d080 <getErrno>
  20c6d8:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
        switch (err) {
  20c6dc:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  20c6e0:	48 85 c0             	test   rax,rax
  20c6e3:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  20c6ea:	0f 84 9a fc ff ff    	je     20c38a <spawnThread.17+0x12a>
  20c6f0:	eb 00                	jmp    20c6f2 <spawnThread.17+0x492>
  20c6f2:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  20c6f9:	48 83 e8 01          	sub    rax,0x1
  20c6fd:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  20c704:	0f 84 73 fd ff ff    	je     20c47d <spawnThread.17+0x21d>
  20c70a:	eb 00                	jmp    20c70c <spawnThread.17+0x4ac>
  20c70c:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  20c713:	48 83 e8 0b          	sub    rax,0xb
  20c717:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  20c71e:	0f 84 97 fc ff ff    	je     20c3bb <spawnThread.17+0x15b>
  20c724:	eb 00                	jmp    20c726 <spawnThread.17+0x4c6>
  20c726:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  20c72d:	48 83 e8 0c          	sub    rax,0xc
  20c731:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
  20c738:	0f 84 de fc ff ff    	je     20c41c <spawnThread.17+0x1bc>
  20c73e:	eb 00                	jmp    20c740 <spawnThread.17+0x4e0>
  20c740:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  20c747:	48 83 e8 16          	sub    rax,0x16
  20c74b:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
  20c752:	0f 84 b4 fc ff ff    	je     20c40c <spawnThread.17+0x1ac>
  20c758:	eb 00                	jmp    20c75a <spawnThread.17+0x4fa>
  20c75a:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  20c761:	48 83 e8 1c          	sub    rax,0x1c
  20c765:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  20c76c:	0f 84 fb fc ff ff    	je     20c46d <spawnThread.17+0x20d>
  20c772:	eb 00                	jmp    20c774 <spawnThread.17+0x514>
  20c774:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  20c77b:	48 83 e8 57          	sub    rax,0x57
  20c77f:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
  20c786:	0f 84 01 fd ff ff    	je     20c48d <spawnThread.17+0x22d>
  20c78c:	e9 8d fb ff ff       	jmp    20c31e <spawnThread.17+0xbe>
  20c791:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20c798:	0f 1f 84 00 00 00 00 
  20c79f:	00 

000000000020c7a0 <Thread_wait>:
    pub fn wait(self: *const Thread) void {
  20c7a0:	55                   	push   rbp
  20c7a1:	48 89 e5             	mov    rbp,rsp
  20c7a4:	48 83 ec 40          	sub    rsp,0x40
  20c7a8:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
                while (true) {
  20c7ac:	eb 00                	jmp    20c7ae <Thread_wait+0xe>
                    const pid_value = @atomicLoad(i32, &self.data.handle, builtin.AtomicOrder.SeqCst);
  20c7ae:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20c7b2:	8b 08                	mov    ecx,DWORD PTR [rax]
  20c7b4:	89 4d ec             	mov    DWORD PTR [rbp-0x14],ecx
                    if (pid_value == 0) break;
  20c7b7:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
  20c7bb:	75 02                	jne    20c7bf <Thread_wait+0x1f>
  20c7bd:	eb 68                	jmp    20c827 <Thread_wait+0x87>
                    const rc = linux.futex_wait(@ptrToInt(&self.data.handle), linux.FUTEX_WAIT, pid_value, null);
  20c7bf:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  20c7c3:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
  20c7c6:	31 c0                	xor    eax,eax
  20c7c8:	89 c1                	mov    ecx,eax
  20c7ca:	89 c6                	mov    esi,eax
  20c7cc:	e8 af 10 00 00       	call   20d880 <futex_wait.22>
  20c7d1:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
                    switch (linux.getErrno(rc)) {
  20c7d5:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  20c7d9:	e8 a2 08 00 00       	call   20d080 <getErrno>
  20c7de:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  20c7e2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20c7e6:	48 85 c0             	test   rax,rax
  20c7e9:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  20c7ed:	74 32                	je     20c821 <Thread_wait+0x81>
  20c7ef:	eb 00                	jmp    20c7f1 <Thread_wait+0x51>
  20c7f1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  20c7f5:	48 83 e8 04          	sub    rax,0x4
  20c7f9:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  20c7fd:	74 24                	je     20c823 <Thread_wait+0x83>
  20c7ff:	eb 00                	jmp    20c801 <Thread_wait+0x61>
  20c801:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  20c805:	48 83 e8 0b          	sub    rax,0xb
  20c809:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  20c80d:	74 16                	je     20c825 <Thread_wait+0x85>
  20c80f:	eb 00                	jmp    20c811 <Thread_wait+0x71>
  20c811:	48 8d 3d f8 6a 03 00 	lea    rdi,[rip+0x36af8]        # 243310 <__unnamed_13>
  20c818:	31 c0                	xor    eax,eax
  20c81a:	89 c6                	mov    esi,eax
                        else => unreachable,
  20c81c:	e8 df ed ff ff       	call   20b600 <panic>
                        0 => continue,
  20c821:	eb 89                	jmp    20c7ac <Thread_wait+0xc>
                        posix.EINTR => continue,
  20c823:	eb 87                	jmp    20c7ac <Thread_wait+0xc>
                        posix.EAGAIN => continue,
  20c825:	eb 85                	jmp    20c7ac <Thread_wait+0xc>
                assert(posix.munmap(self.data.stack_addr, self.data.stack_len) == 0);
  20c827:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20c82b:	48 8b 78 08          	mov    rdi,QWORD PTR [rax+0x8]
  20c82f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20c833:	48 8b 70 10          	mov    rsi,QWORD PTR [rax+0x10]
  20c837:	e8 84 0d 00 00       	call   20d5c0 <munmap>
  20c83c:	48 83 f8 00          	cmp    rax,0x0
  20c840:	0f 94 c1             	sete   cl
  20c843:	0f b6 f9             	movzx  edi,cl
  20c846:	e8 b5 e7 ff ff       	call   20b000 <assert>
    pub fn wait(self: *const Thread) void {
  20c84b:	48 83 c4 40          	add    rsp,0x40
  20c84f:	5d                   	pop    rbp
  20c850:	c3                   	ret    
  20c851:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20c858:	0f 1f 84 00 00 00 00 
  20c85f:	00 

000000000020c860 <warn.18>:
  20c860:	55                   	push   rbp
  20c861:	48 89 e5             	mov    rbp,rsp
  20c864:	48 81 ec 50 01 00 00 	sub    rsp,0x150
  20c86b:	48 8d bd e8 fe ff ff 	lea    rdi,[rbp-0x118]
  20c872:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  20c879:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
  20c880:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  20c887:	00 00 00 00 
  20c88b:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
  20c892:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  20c899:	1e 00 00 00 
  20c89d:	c5 fb 11 85 c8 fe ff 	vmovsd QWORD PTR [rbp-0x138],xmm0
  20c8a4:	ff 
    const stderr = getStderrStream() catch return;
  20c8a5:	e8 a6 00 00 00       	call   20c950 <getStderrStream>
  20c8aa:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  20c8b1:	00 
  20c8b2:	74 09                	je     20c8bd <warn.18+0x5d>
  20c8b4:	48 81 c4 50 01 00 00 	add    rsp,0x150
  20c8bb:	5d                   	pop    rbp
  20c8bc:	c3                   	ret    
  20c8bd:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  20c8c4:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
  20c8cb:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  20c8d2:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  20c8d9:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
    stderr.print(fmt, args) catch return;
  20c8e0:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  20c8e7:	c5 fb 10 85 c8 fe ff 	vmovsd xmm0,QWORD PTR [rbp-0x138]
  20c8ee:	ff 
  20c8ef:	e8 ec 0f 00 00       	call   20d8e0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.23>
  20c8f4:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  20c8fb:	66 83 bd d6 fe ff ff 	cmp    WORD PTR [rbp-0x12a],0x0
  20c902:	00 
  20c903:	74 09                	je     20c90e <warn.18+0xae>
  20c905:	48 81 c4 50 01 00 00 	add    rsp,0x150
  20c90c:	5d                   	pop    rbp
  20c90d:	c3                   	ret    
pub fn warn(comptime fmt: []const u8, args: ...) void {
  20c90e:	48 81 c4 50 01 00 00 	add    rsp,0x150
  20c915:	5d                   	pop    rbp
  20c916:	c3                   	ret    
  20c917:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  20c91e:	00 00 

000000000020c920 <abort>:
pub fn abort() noreturn {
  20c920:	55                   	push   rbp
  20c921:	48 89 e5             	mov    rbp,rsp
  20c924:	48 83 ec 10          	sub    rsp,0x10
  20c928:	bf 06 00 00 00       	mov    edi,0x6
            _ = posix.raise(posix.SIGABRT);
  20c92d:	e8 fe 0f 00 00       	call   20d930 <raise>
  20c932:	bf 09 00 00 00       	mov    edi,0x9
            _ = posix.raise(posix.SIGKILL);
  20c937:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  20c93b:	e8 f0 0f 00 00       	call   20d930 <raise>
  20c940:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
            while (true) {}
  20c944:	eb fe                	jmp    20c944 <abort+0x24>
  20c946:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  20c94d:	00 00 00 

000000000020c950 <getStderrStream>:
pub fn getStderrStream() !*io.OutStream(io.FileOutStream.Error) {
  20c950:	55                   	push   rbp
  20c951:	48 89 e5             	mov    rbp,rsp
  20c954:	48 83 ec 70          	sub    rsp,0x70
  20c958:	48 89 f8             	mov    rax,rdi
    if (stderr_stream) |st| {
  20c95b:	48 83 3d cd 76 03 00 	cmp    QWORD PTR [rip+0x376cd],0x0        # 244030 <stderr_stream>
  20c962:	00 
  20c963:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  20c967:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  20c96b:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
  20c96f:	74 36                	je     20c9a7 <getStderrStream+0x57>
  20c971:	48 8b 05 b8 76 03 00 	mov    rax,QWORD PTR [rip+0x376b8]        # 244030 <stderr_stream>
  20c978:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
        return st;
  20c97c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  20c980:	66 c7 45 f0 00 00    	mov    WORD PTR [rbp-0x10],0x0
  20c986:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  20c98a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20c98e:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  20c992:	48 89 01             	mov    QWORD PTR [rcx],rax
  20c995:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20c999:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20c99d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  20c9a1:	48 83 c4 70          	add    rsp,0x70
  20c9a5:	5d                   	pop    rbp
  20c9a6:	c3                   	ret    
  20c9a7:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
        stderr_file = try io.getStdErr();
  20c9ab:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  20c9af:	e8 3c 10 00 00       	call   20d9f0 <getStdErr>
  20c9b4:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  20c9b9:	74 36                	je     20c9f1 <getStderrStream+0xa1>
  20c9bb:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  20c9bf:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  20c9c3:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  20c9c7:	e8 c4 f2 ff ff       	call   20bc90 <__zig_return_error>
  20c9cc:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  20c9d0:	66 89 45 d0          	mov    WORD PTR [rbp-0x30],ax
  20c9d4:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  20c9d8:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  20c9dc:	48 89 39             	mov    QWORD PTR [rcx],rdi
  20c9df:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  20c9e3:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  20c9e7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  20c9eb:	48 83 c4 70          	add    rsp,0x70
  20c9ef:	5d                   	pop    rbp
  20c9f0:	c3                   	ret    
  20c9f1:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  20c9f5:	48 8d 35 24 f6 02 00 	lea    rsi,[rip+0x2f624]        # 23c020 <stderr_file>
  20c9fc:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  20c9ff:	89 05 1b f6 02 00    	mov    DWORD PTR [rip+0x2f61b],eax        # 23c020 <stderr_file>
        stderr_file_out_stream = io.FileOutStream.init(&stderr_file);
  20ca05:	e8 36 10 00 00       	call   20da40 <FileOutStream_init>
  20ca0a:	48 8d 35 17 f6 02 00 	lea    rsi,[rip+0x2f617]        # 23c028 <stderr_file_out_stream>
  20ca11:	48 83 c6 08          	add    rsi,0x8
  20ca15:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  20ca19:	48 89 3d 08 f6 02 00 	mov    QWORD PTR [rip+0x2f608],rdi        # 23c028 <stderr_file_out_stream>
  20ca20:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20ca24:	48 89 3d 05 f6 02 00 	mov    QWORD PTR [rip+0x2f605],rdi        # 23c030 <stderr_file_out_stream+0x8>
        const st = &stderr_file_out_stream.stream;
  20ca2b:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
        stderr_stream = st;
  20ca2f:	48 89 35 fa 75 03 00 	mov    QWORD PTR [rip+0x375fa],rsi        # 244030 <stderr_stream>
        return st;
  20ca36:	48 8b 35 83 69 03 00 	mov    rsi,QWORD PTR [rip+0x36983]        # 2433c0 <__unnamed_19>
  20ca3d:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  20ca41:	48 89 37             	mov    QWORD PTR [rdi],rsi
  20ca44:	48 8b 35 7d 69 03 00 	mov    rsi,QWORD PTR [rip+0x3697d]        # 2433c8 <__unnamed_19+0x8>
  20ca4b:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  20ca4f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  20ca53:	48 83 c4 70          	add    rsp,0x70
  20ca57:	5d                   	pop    rbp
  20ca58:	c3                   	ret    
  20ca59:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

000000000020ca60 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print>:
        const Self = this;
        pub const Error = WriteError;

        writeFn: fn (self: *Self, bytes: []const u8) Error!void,

        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  20ca60:	55                   	push   rbp
  20ca61:	48 89 e5             	mov    rbp,rsp
  20ca64:	48 83 ec 20          	sub    rsp,0x20
  20ca68:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
            return std.fmt.format(self, Error, self.writeFn, format, args);
  20ca6c:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20ca70:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20ca74:	48 8b 00             	mov    rax,QWORD PTR [rax]
  20ca77:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  20ca7b:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  20ca7f:	48 89 c2             	mov    rdx,rax
  20ca82:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20ca86:	e8 55 10 00 00       	call   20dae0 <format>
  20ca8b:	66 83 f8 00          	cmp    ax,0x0
  20ca8f:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
  20ca93:	74 0b                	je     20caa0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print+0x40>
  20ca95:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  20ca99:	e8 f2 f1 ff ff       	call   20bc90 <__zig_return_error>
  20ca9e:	eb 02                	jmp    20caa2 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print+0x42>
  20caa0:	eb 00                	jmp    20caa2 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print+0x42>
  20caa2:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
  20caa6:	48 83 c4 20          	add    rsp,0x20
  20caaa:	5d                   	pop    rbp
  20caab:	c3                   	ret    
  20caac:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000020cab0 <dumpStackTrace>:
pub fn dumpStackTrace(stack_trace: *const builtin.StackTrace) void {
  20cab0:	55                   	push   rbp
  20cab1:	48 89 e5             	mov    rbp,rsp
  20cab4:	48 81 ec d0 01 00 00 	sub    rsp,0x1d0
  20cabb:	48 8d 85 e8 fe ff ff 	lea    rax,[rbp-0x118]
  20cac2:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  20cac9:	48 8d 8d 10 ff ff ff 	lea    rcx,[rbp-0xf0]
  20cad0:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  20cad7:	00 00 00 00 
  20cadb:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  20cae2:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  20cae9:	1e 00 00 00 
  20caed:	48 89 bd a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rdi
    const stderr = getStderrStream() catch return;
  20caf4:	48 89 c7             	mov    rdi,rax
  20caf7:	e8 54 fe ff ff       	call   20c950 <getStderrStream>
  20cafc:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  20cb03:	00 
  20cb04:	74 09                	je     20cb0f <dumpStackTrace+0x5f>
  20cb06:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  20cb0d:	5d                   	pop    rbp
  20cb0e:	c3                   	ret    
  20cb0f:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  20cb16:	48 89 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rax
  20cb1d:	48 8d bd c8 fe ff ff 	lea    rdi,[rbp-0x138]
  20cb24:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  20cb2b:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
  20cb32:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
    const debug_info = getSelfDebugInfo() catch |err| {
  20cb39:	e8 a2 10 00 00       	call   20dbe0 <getSelfDebugInfo>
  20cb3e:	66 83 bd c8 fe ff ff 	cmp    WORD PTR [rbp-0x138],0x0
  20cb45:	00 
  20cb46:	74 4b                	je     20cb93 <dumpStackTrace+0xe3>
  20cb48:	66 8b 85 c8 fe ff ff 	mov    ax,WORD PTR [rbp-0x138]
  20cb4f:	66 89 85 9e fe ff ff 	mov    WORD PTR [rbp-0x162],ax
        stderr.print("Unable to dump stack trace: Unable to open debug info: {}\n", @errorName(err)) catch return;
  20cb56:	48 8b b5 a0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x160]
  20cb5d:	66 8b 85 9e fe ff ff 	mov    ax,WORD PTR [rbp-0x162]
  20cb64:	66 83 f8 00          	cmp    ax,0x0
  20cb68:	48 89 b5 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rsi
  20cb6f:	66 89 85 76 fe ff ff 	mov    WORD PTR [rbp-0x18a],ax
  20cb76:	0f 85 69 01 00 00    	jne    20cce5 <dumpStackTrace+0x235>
  20cb7c:	e9 0b 01 00 00       	jmp    20cc8c <dumpStackTrace+0x1dc>
  20cb81:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  20cb88:	5d                   	pop    rbp
  20cb89:	c3                   	ret    
        return;
  20cb8a:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  20cb91:	5d                   	pop    rbp
  20cb92:	c3                   	ret    
    const debug_info = getSelfDebugInfo() catch |err| {
  20cb93:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  20cb9a:	48 89 85 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rax
  20cba1:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
  20cba8:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
    writeStackTrace(stack_trace, stderr, getDebugInfoAllocator(), debug_info, wantTtyColor()) catch |err| {
  20cbaf:	48 8b b5 a8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x158]
  20cbb6:	48 8b 95 a0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x160]
  20cbbd:	48 89 b5 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rsi
  20cbc4:	48 89 95 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rdx
  20cbcb:	e8 60 11 00 00       	call   20dd30 <getDebugInfoAllocator>
  20cbd0:	4c 8b 85 90 fe ff ff 	mov    r8,QWORD PTR [rbp-0x170]
  20cbd7:	48 89 85 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rax
  20cbde:	4c 89 85 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],r8
  20cbe5:	e8 06 12 00 00       	call   20ddf0 <wantTtyColor>
  20cbea:	48 8d 95 f8 fe ff ff 	lea    rdx,[rbp-0x108]
  20cbf1:	44 0f b6 c8          	movzx  r9d,al
  20cbf5:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  20cbfc:	48 8b b5 60 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1a0]
  20cc03:	4c 8b 85 58 fe ff ff 	mov    r8,QWORD PTR [rbp-0x1a8]
  20cc0a:	48 89 95 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rdx
  20cc11:	4c 89 c2             	mov    rdx,r8
  20cc14:	48 8b 8d 50 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1b0]
  20cc1b:	4c 8b 85 48 fe ff ff 	mov    r8,QWORD PTR [rbp-0x1b8]
  20cc22:	e8 f9 12 00 00       	call   20df20 <writeStackTrace>
  20cc27:	66 89 85 b4 fe ff ff 	mov    WORD PTR [rbp-0x14c],ax
  20cc2e:	66 83 bd b4 fe ff ff 	cmp    WORD PTR [rbp-0x14c],0x0
  20cc35:	00 
  20cc36:	74 4b                	je     20cc83 <dumpStackTrace+0x1d3>
  20cc38:	66 8b 85 b4 fe ff ff 	mov    ax,WORD PTR [rbp-0x14c]
  20cc3f:	66 89 85 8e fe ff ff 	mov    WORD PTR [rbp-0x172],ax
        stderr.print("Unable to dump stack trace: {}\n", @errorName(err)) catch return;
  20cc46:	48 8b b5 a0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x160]
  20cc4d:	66 8b 85 8e fe ff ff 	mov    ax,WORD PTR [rbp-0x172]
  20cc54:	66 83 f8 00          	cmp    ax,0x0
  20cc58:	48 89 b5 38 fe ff ff 	mov    QWORD PTR [rbp-0x1c8],rsi
  20cc5f:	66 89 85 36 fe ff ff 	mov    WORD PTR [rbp-0x1ca],ax
  20cc66:	0f 85 e1 00 00 00    	jne    20cd4d <dumpStackTrace+0x29d>
  20cc6c:	e9 83 00 00 00       	jmp    20ccf4 <dumpStackTrace+0x244>
  20cc71:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  20cc78:	5d                   	pop    rbp
  20cc79:	c3                   	ret    
        return;
  20cc7a:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  20cc81:	5d                   	pop    rbp
  20cc82:	c3                   	ret    
pub fn dumpStackTrace(stack_trace: *const builtin.StackTrace) void {
  20cc83:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  20cc8a:	5d                   	pop    rbp
  20cc8b:	c3                   	ret    
  20cc8c:	48 8d 3d 65 67 03 00 	lea    rdi,[rip+0x36765]        # 2433f8 <__unnamed_20>
  20cc93:	31 c0                	xor    eax,eax
  20cc95:	89 c6                	mov    esi,eax
        stderr.print("Unable to dump stack trace: Unable to open debug info: {}\n", @errorName(err)) catch return;
  20cc97:	e8 64 e9 ff ff       	call   20b600 <panic>
  20cc9c:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  20cca3:	48 8d 05 56 03 03 00 	lea    rax,[rip+0x30356]        # 23d000 <raw+0xf48>
  20ccaa:	66 8b 8d 76 fe ff ff 	mov    cx,WORD PTR [rbp-0x18a]
  20ccb1:	48 0f bf d1          	movsx  rdx,cx
  20ccb5:	48 c1 e2 04          	shl    rdx,0x4
  20ccb9:	48 01 d0             	add    rax,rdx
  20ccbc:	48 8b b5 78 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x188]
  20ccc3:	48 89 c2             	mov    rdx,rax
  20ccc6:	e8 15 10 00 00       	call   20dce0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.24>
  20cccb:	66 89 85 b6 fe ff ff 	mov    WORD PTR [rbp-0x14a],ax
  20ccd2:	66 83 bd b6 fe ff ff 	cmp    WORD PTR [rbp-0x14a],0x0
  20ccd9:	00 
  20ccda:	0f 85 a1 fe ff ff    	jne    20cb81 <dumpStackTrace+0xd1>
  20cce0:	e9 a5 fe ff ff       	jmp    20cb8a <dumpStackTrace+0xda>
  20cce5:	66 8b 85 76 fe ff ff 	mov    ax,WORD PTR [rbp-0x18a]
  20ccec:	66 83 f8 2a          	cmp    ax,0x2a
  20ccf0:	72 aa                	jb     20cc9c <dumpStackTrace+0x1ec>
  20ccf2:	eb 98                	jmp    20cc8c <dumpStackTrace+0x1dc>
  20ccf4:	48 8d 3d fd 66 03 00 	lea    rdi,[rip+0x366fd]        # 2433f8 <__unnamed_20>
  20ccfb:	31 c0                	xor    eax,eax
  20ccfd:	89 c6                	mov    esi,eax
        stderr.print("Unable to dump stack trace: {}\n", @errorName(err)) catch return;
  20ccff:	e8 fc e8 ff ff       	call   20b600 <panic>
  20cd04:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  20cd0b:	48 8d 05 ee 02 03 00 	lea    rax,[rip+0x302ee]        # 23d000 <raw+0xf48>
  20cd12:	66 8b 8d 36 fe ff ff 	mov    cx,WORD PTR [rbp-0x1ca]
  20cd19:	48 0f bf d1          	movsx  rdx,cx
  20cd1d:	48 c1 e2 04          	shl    rdx,0x4
  20cd21:	48 01 d0             	add    rax,rdx
  20cd24:	48 8b b5 38 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1c8]
  20cd2b:	48 89 c2             	mov    rdx,rax
  20cd2e:	e8 7d 14 00 00       	call   20e1b0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.25>
  20cd33:	66 89 85 b2 fe ff ff 	mov    WORD PTR [rbp-0x14e],ax
  20cd3a:	66 83 bd b2 fe ff ff 	cmp    WORD PTR [rbp-0x14e],0x0
  20cd41:	00 
  20cd42:	0f 85 29 ff ff ff    	jne    20cc71 <dumpStackTrace+0x1c1>
  20cd48:	e9 2d ff ff ff       	jmp    20cc7a <dumpStackTrace+0x1ca>
  20cd4d:	66 8b 85 36 fe ff ff 	mov    ax,WORD PTR [rbp-0x1ca]
  20cd54:	66 83 f8 2a          	cmp    ax,0x2a
  20cd58:	72 aa                	jb     20cd04 <dumpStackTrace+0x254>
  20cd5a:	eb 98                	jmp    20ccf4 <dumpStackTrace+0x244>
  20cd5c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000020cd60 <dumpCurrentStackTrace>:
pub fn dumpCurrentStackTrace(start_addr: ?usize) void {
  20cd60:	55                   	push   rbp
  20cd61:	48 89 e5             	mov    rbp,rsp
  20cd64:	48 81 ec d0 01 00 00 	sub    rsp,0x1d0
  20cd6b:	48 8d 85 e8 fe ff ff 	lea    rax,[rbp-0x118]
  20cd72:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  20cd79:	48 8d 8d 10 ff ff ff 	lea    rcx,[rbp-0xf0]
  20cd80:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  20cd87:	00 00 00 00 
  20cd8b:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  20cd92:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  20cd99:	1e 00 00 00 
    const stderr = getStderrStream() catch return;
  20cd9d:	48 89 bd 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rdi
  20cda4:	48 89 c7             	mov    rdi,rax
  20cda7:	e8 a4 fb ff ff       	call   20c950 <getStderrStream>
  20cdac:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  20cdb3:	00 
  20cdb4:	74 09                	je     20cdbf <dumpCurrentStackTrace+0x5f>
  20cdb6:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  20cdbd:	5d                   	pop    rbp
  20cdbe:	c3                   	ret    
  20cdbf:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  20cdc6:	48 89 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rax
  20cdcd:	48 8d bd c8 fe ff ff 	lea    rdi,[rbp-0x138]
  20cdd4:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  20cddb:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
  20cde2:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
    const debug_info = getSelfDebugInfo() catch |err| {
  20cde9:	e8 f2 0d 00 00       	call   20dbe0 <getSelfDebugInfo>
  20cdee:	66 83 bd c8 fe ff ff 	cmp    WORD PTR [rbp-0x138],0x0
  20cdf5:	00 
  20cdf6:	74 4b                	je     20ce43 <dumpCurrentStackTrace+0xe3>
  20cdf8:	66 8b 85 c8 fe ff ff 	mov    ax,WORD PTR [rbp-0x138]
  20cdff:	66 89 85 a6 fe ff ff 	mov    WORD PTR [rbp-0x15a],ax
        stderr.print("Unable to dump stack trace: Unable to open debug info: {}\n", @errorName(err)) catch return;
  20ce06:	48 8b b5 a8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x158]
  20ce0d:	66 8b 85 a6 fe ff ff 	mov    ax,WORD PTR [rbp-0x15a]
  20ce14:	66 83 f8 00          	cmp    ax,0x0
  20ce18:	48 89 b5 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rsi
  20ce1f:	66 89 85 76 fe ff ff 	mov    WORD PTR [rbp-0x18a],ax
  20ce26:	0f 85 5b 01 00 00    	jne    20cf87 <dumpCurrentStackTrace+0x227>
  20ce2c:	e9 fd 00 00 00       	jmp    20cf2e <dumpCurrentStackTrace+0x1ce>
  20ce31:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  20ce38:	5d                   	pop    rbp
  20ce39:	c3                   	ret    
        return;
  20ce3a:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  20ce41:	5d                   	pop    rbp
  20ce42:	c3                   	ret    
    const debug_info = getSelfDebugInfo() catch |err| {
  20ce43:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  20ce4a:	48 89 85 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rax
  20ce51:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
  20ce58:	48 89 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rax
    writeCurrentStackTrace(stderr, getDebugInfoAllocator(), debug_info, wantTtyColor(), start_addr) catch |err| {
  20ce5f:	48 8b b5 a8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x158]
  20ce66:	48 89 b5 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rsi
  20ce6d:	e8 be 0e 00 00       	call   20dd30 <getDebugInfoAllocator>
  20ce72:	48 8b 8d 98 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x168]
  20ce79:	48 89 85 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rax
  20ce80:	48 89 8d 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rcx
  20ce87:	e8 64 0f 00 00       	call   20ddf0 <wantTtyColor>
  20ce8c:	48 8d 8d f8 fe ff ff 	lea    rcx,[rbp-0x108]
  20ce93:	44 0f b6 c0          	movzx  r8d,al
  20ce97:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  20ce9e:	48 8b b5 60 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1a0]
  20cea5:	48 8b 95 58 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1a8]
  20ceac:	4c 8b 8d 50 fe ff ff 	mov    r9,QWORD PTR [rbp-0x1b0]
  20ceb3:	48 89 8d 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rcx
  20ceba:	4c 89 c9             	mov    rcx,r9
  20cebd:	4c 8b 8d 88 fe ff ff 	mov    r9,QWORD PTR [rbp-0x178]
  20cec4:	e8 37 13 00 00       	call   20e200 <writeCurrentStackTrace>
  20cec9:	66 89 85 b4 fe ff ff 	mov    WORD PTR [rbp-0x14c],ax
  20ced0:	66 83 bd b4 fe ff ff 	cmp    WORD PTR [rbp-0x14c],0x0
  20ced7:	00 
  20ced8:	74 4b                	je     20cf25 <dumpCurrentStackTrace+0x1c5>
  20ceda:	66 8b 85 b4 fe ff ff 	mov    ax,WORD PTR [rbp-0x14c]
  20cee1:	66 89 85 96 fe ff ff 	mov    WORD PTR [rbp-0x16a],ax
        stderr.print("Unable to dump stack trace: {}\n", @errorName(err)) catch return;
  20cee8:	48 8b b5 a8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x158]
  20ceef:	66 8b 85 96 fe ff ff 	mov    ax,WORD PTR [rbp-0x16a]
  20cef6:	66 83 f8 00          	cmp    ax,0x0
  20cefa:	48 89 b5 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rsi
  20cf01:	66 89 85 3e fe ff ff 	mov    WORD PTR [rbp-0x1c2],ax
  20cf08:	0f 85 e1 00 00 00    	jne    20cfef <dumpCurrentStackTrace+0x28f>
  20cf0e:	e9 83 00 00 00       	jmp    20cf96 <dumpCurrentStackTrace+0x236>
  20cf13:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  20cf1a:	5d                   	pop    rbp
  20cf1b:	c3                   	ret    
        return;
  20cf1c:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  20cf23:	5d                   	pop    rbp
  20cf24:	c3                   	ret    
pub fn dumpCurrentStackTrace(start_addr: ?usize) void {
  20cf25:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  20cf2c:	5d                   	pop    rbp
  20cf2d:	c3                   	ret    
  20cf2e:	48 8d 3d c3 64 03 00 	lea    rdi,[rip+0x364c3]        # 2433f8 <__unnamed_20>
  20cf35:	31 c0                	xor    eax,eax
  20cf37:	89 c6                	mov    esi,eax
        stderr.print("Unable to dump stack trace: Unable to open debug info: {}\n", @errorName(err)) catch return;
  20cf39:	e8 c2 e6 ff ff       	call   20b600 <panic>
  20cf3e:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  20cf45:	48 8d 05 b4 00 03 00 	lea    rax,[rip+0x300b4]        # 23d000 <raw+0xf48>
  20cf4c:	66 8b 8d 76 fe ff ff 	mov    cx,WORD PTR [rbp-0x18a]
  20cf53:	48 0f bf d1          	movsx  rdx,cx
  20cf57:	48 c1 e2 04          	shl    rdx,0x4
  20cf5b:	48 01 d0             	add    rax,rdx
  20cf5e:	48 8b b5 78 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x188]
  20cf65:	48 89 c2             	mov    rdx,rax
  20cf68:	e8 73 0d 00 00       	call   20dce0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.24>
  20cf6d:	66 89 85 b6 fe ff ff 	mov    WORD PTR [rbp-0x14a],ax
  20cf74:	66 83 bd b6 fe ff ff 	cmp    WORD PTR [rbp-0x14a],0x0
  20cf7b:	00 
  20cf7c:	0f 85 af fe ff ff    	jne    20ce31 <dumpCurrentStackTrace+0xd1>
  20cf82:	e9 b3 fe ff ff       	jmp    20ce3a <dumpCurrentStackTrace+0xda>
  20cf87:	66 8b 85 76 fe ff ff 	mov    ax,WORD PTR [rbp-0x18a]
  20cf8e:	66 83 f8 2a          	cmp    ax,0x2a
  20cf92:	72 aa                	jb     20cf3e <dumpCurrentStackTrace+0x1de>
  20cf94:	eb 98                	jmp    20cf2e <dumpCurrentStackTrace+0x1ce>
  20cf96:	48 8d 3d 5b 64 03 00 	lea    rdi,[rip+0x3645b]        # 2433f8 <__unnamed_20>
  20cf9d:	31 c0                	xor    eax,eax
  20cf9f:	89 c6                	mov    esi,eax
        stderr.print("Unable to dump stack trace: {}\n", @errorName(err)) catch return;
  20cfa1:	e8 5a e6 ff ff       	call   20b600 <panic>
  20cfa6:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  20cfad:	48 8d 05 4c 00 03 00 	lea    rax,[rip+0x3004c]        # 23d000 <raw+0xf48>
  20cfb4:	66 8b 8d 3e fe ff ff 	mov    cx,WORD PTR [rbp-0x1c2]
  20cfbb:	48 0f bf d1          	movsx  rdx,cx
  20cfbf:	48 c1 e2 04          	shl    rdx,0x4
  20cfc3:	48 01 d0             	add    rax,rdx
  20cfc6:	48 8b b5 40 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1c0]
  20cfcd:	48 89 c2             	mov    rdx,rax
  20cfd0:	e8 db 11 00 00       	call   20e1b0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.25>
  20cfd5:	66 89 85 b2 fe ff ff 	mov    WORD PTR [rbp-0x14e],ax
  20cfdc:	66 83 bd b2 fe ff ff 	cmp    WORD PTR [rbp-0x14e],0x0
  20cfe3:	00 
  20cfe4:	0f 85 29 ff ff ff    	jne    20cf13 <dumpCurrentStackTrace+0x1b3>
  20cfea:	e9 2d ff ff ff       	jmp    20cf1c <dumpCurrentStackTrace+0x1bc>
  20cfef:	66 8b 85 3e fe ff ff 	mov    ax,WORD PTR [rbp-0x1c2]
  20cff6:	66 83 f8 2a          	cmp    ax,0x2a
  20cffa:	72 aa                	jb     20cfa6 <dumpCurrentStackTrace+0x246>
  20cffc:	eb 98                	jmp    20cf96 <dumpCurrentStackTrace+0x236>
  20cffe:	66 90                	xchg   ax,ax

000000000020d000 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.19>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  20d000:	55                   	push   rbp
  20d001:	48 89 e5             	mov    rbp,rsp
  20d004:	48 83 ec 20          	sub    rsp,0x20
  20d008:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
            return std.fmt.format(self, Error, self.writeFn, format, args);
  20d00c:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20d010:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20d014:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  20d017:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  20d01b:	e8 d0 13 00 00       	call   20e3f0 <format.26>
  20d020:	66 83 f8 00          	cmp    ax,0x0
  20d024:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  20d028:	74 0b                	je     20d035 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.19+0x35>
  20d02a:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  20d02e:	e8 5d ec ff ff       	call   20bc90 <__zig_return_error>
  20d033:	eb 02                	jmp    20d037 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.19+0x37>
  20d035:	eb 00                	jmp    20d037 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.19+0x37>
  20d037:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  20d03b:	48 83 c4 20          	add    rsp,0x20
  20d03f:	5d                   	pop    rbp
  20d040:	c3                   	ret    
  20d041:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20d048:	0f 1f 84 00 00 00 00 
  20d04f:	00 

000000000020d050 <clock_getres>:
}

pub fn clock_getres(clk_id: i32, tp: *timespec) usize {
  20d050:	55                   	push   rbp
  20d051:	48 89 e5             	mov    rbp,rsp
  20d054:	48 83 ec 10          	sub    rsp,0x10
  20d058:	b8 e5 00 00 00       	mov    eax,0xe5
  20d05d:	89 c1                	mov    ecx,eax
  20d05f:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  20d062:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    return syscall2(SYS_clock_getres, @bitCast(usize, isize(clk_id)), @ptrToInt(tp));
  20d066:	48 63 75 fc          	movsxd rsi,DWORD PTR [rbp-0x4]
  20d06a:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  20d06e:	48 89 cf             	mov    rdi,rcx
  20d071:	e8 ea 13 00 00       	call   20e460 <syscall2>
  20d076:	48 83 c4 10          	add    rsp,0x10
  20d07a:	5d                   	pop    rbp
  20d07b:	c3                   	ret    
  20d07c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000020d080 <getErrno>:
pub fn getErrno(r: usize) usize {
  20d080:	55                   	push   rbp
  20d081:	48 89 e5             	mov    rbp,rsp
  20d084:	48 83 ec 30          	sub    rsp,0x30
  20d088:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    const signed_r = @bitCast(isize, r);
  20d08c:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  20d090:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
    return if (signed_r > -4096 and signed_r < 0) @intCast(usize, -signed_r) else 0;
  20d094:	48 81 7d f0 00 f0 ff 	cmp    QWORD PTR [rbp-0x10],0xfffffffffffff000
  20d09b:	ff 
  20d09c:	0f 9f c0             	setg   al
  20d09f:	a8 01                	test   al,0x1
  20d0a1:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
  20d0a4:	75 02                	jne    20d0a8 <getErrno+0x28>
  20d0a6:	eb 0b                	jmp    20d0b3 <getErrno+0x33>
  20d0a8:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
  20d0ad:	0f 9c c0             	setl   al
  20d0b0:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
  20d0b3:	8a 45 ef             	mov    al,BYTE PTR [rbp-0x11]
  20d0b6:	a8 01                	test   al,0x1
  20d0b8:	75 02                	jne    20d0bc <getErrno+0x3c>
  20d0ba:	eb 16                	jmp    20d0d2 <getErrno+0x52>
  20d0bc:	31 c0                	xor    eax,eax
  20d0be:	89 c1                	mov    ecx,eax
  20d0c0:	48 2b 4d f0          	sub    rcx,QWORD PTR [rbp-0x10]
  20d0c4:	0f 90 c2             	seto   dl
  20d0c7:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  20d0cb:	88 55 df             	mov    BYTE PTR [rbp-0x21],dl
  20d0ce:	70 16                	jo     20d0e6 <getErrno+0x66>
  20d0d0:	eb 24                	jmp    20d0f6 <getErrno+0x76>
  20d0d2:	31 c0                	xor    eax,eax
  20d0d4:	89 c1                	mov    ecx,eax
  20d0d6:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  20d0da:	eb 00                	jmp    20d0dc <getErrno+0x5c>
  20d0dc:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20d0e0:	48 83 c4 30          	add    rsp,0x30
  20d0e4:	5d                   	pop    rbp
  20d0e5:	c3                   	ret    
  20d0e6:	48 8d 3d db 60 03 00 	lea    rdi,[rip+0x360db]        # 2431c8 <__unnamed_4>
  20d0ed:	31 c0                	xor    eax,eax
  20d0ef:	89 c6                	mov    esi,eax
  20d0f1:	e8 0a e5 ff ff       	call   20b600 <panic>
  20d0f6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20d0fa:	48 83 f8 00          	cmp    rax,0x0
  20d0fe:	7c 0a                	jl     20d10a <getErrno+0x8a>
  20d100:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20d104:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  20d108:	eb d2                	jmp    20d0dc <getErrno+0x5c>
  20d10a:	48 8d 3d 77 61 03 00 	lea    rdi,[rip+0x36177]        # 243288 <__unnamed_3>
  20d111:	31 c0                	xor    eax,eax
  20d113:	89 c6                	mov    esi,eax
  20d115:	e8 e6 e4 ff ff       	call   20b600 <panic>
  20d11a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000020d120 <unexpectedErrorPosix>:
pub fn unexpectedErrorPosix(errno: usize) UnexpectedError {
  20d120:	55                   	push   rbp
  20d121:	48 89 e5             	mov    rbp,rsp
  20d124:	48 83 ec 10          	sub    rsp,0x10
  20d128:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
    return error.Unexpected;
  20d12c:	e8 5f eb ff ff       	call   20bc90 <__zig_return_error>
  20d131:	66 b8 02 00          	mov    ax,0x2
  20d135:	48 83 c4 10          	add    rsp,0x10
  20d139:	5d                   	pop    rbp
  20d13a:	c3                   	ret    
  20d13b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000020d140 <clock_gettime>:
pub fn clock_gettime(clk_id: i32, tp: *timespec) usize {
  20d140:	55                   	push   rbp
  20d141:	48 89 e5             	mov    rbp,rsp
  20d144:	48 83 ec 30          	sub    rsp,0x30
  20d148:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  20d14b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
        const f = @atomicLoad(@typeOf(init_vdso_clock_gettime), &vdso_clock_gettime, builtin.AtomicOrder.Unordered);
  20d14f:	48 8b 35 e2 ee 02 00 	mov    rsi,QWORD PTR [rip+0x2eee2]        # 23c038 <vdso_clock_gettime>
  20d156:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
        if (@ptrToInt(f) != 0) {
  20d15a:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  20d15e:	48 83 fe 00          	cmp    rsi,0x0
  20d162:	74 41                	je     20d1a5 <clock_gettime+0x65>
            const rc = f(clk_id, tp);
  20d164:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20d168:	8b 7d fc             	mov    edi,DWORD PTR [rbp-0x4]
  20d16b:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20d16f:	ff d0                	call   rax
  20d171:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
            switch (rc) {
  20d175:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20d179:	48 89 c6             	mov    rsi,rax
  20d17c:	48 83 ee ea          	sub    rsi,0xffffffffffffffea
  20d180:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  20d184:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  20d188:	74 0f                	je     20d199 <clock_gettime+0x59>
  20d18a:	eb 00                	jmp    20d18c <clock_gettime+0x4c>
  20d18c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  20d190:	48 85 c0             	test   rax,rax
  20d193:	74 04                	je     20d199 <clock_gettime+0x59>
  20d195:	eb 00                	jmp    20d197 <clock_gettime+0x57>
  20d197:	eb 0a                	jmp    20d1a3 <clock_gettime+0x63>
                0, @bitCast(usize, isize(-EINVAL)) => return rc,
  20d199:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20d19d:	48 83 c4 30          	add    rsp,0x30
  20d1a1:	5d                   	pop    rbp
  20d1a2:	c3                   	ret    
        if (@ptrToInt(f) != 0) {
  20d1a3:	eb 02                	jmp    20d1a7 <clock_gettime+0x67>
  20d1a5:	eb 00                	jmp    20d1a7 <clock_gettime+0x67>
  20d1a7:	b8 e4 00 00 00       	mov    eax,0xe4
  20d1ac:	89 c7                	mov    edi,eax
    return syscall2(SYS_clock_gettime, @bitCast(usize, isize(clk_id)), @ptrToInt(tp));
  20d1ae:	48 63 75 fc          	movsxd rsi,DWORD PTR [rbp-0x4]
  20d1b2:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  20d1b6:	e8 a5 12 00 00       	call   20e460 <syscall2>
  20d1bb:	48 83 c4 30          	add    rsp,0x30
  20d1bf:	5d                   	pop    rbp
  20d1c0:	c3                   	ret    
  20d1c1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20d1c8:	0f 1f 84 00 00 00 00 
  20d1cf:	00 

000000000020d1d0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.20>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  20d1d0:	55                   	push   rbp
  20d1d1:	48 89 e5             	mov    rbp,rsp
  20d1d4:	48 83 ec 30          	sub    rsp,0x30
  20d1d8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  20d1dc:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  20d1e0:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return std.fmt.format(self, Error, self.writeFn, format, args);
  20d1e4:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20d1e8:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  20d1ec:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
  20d1ef:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  20d1f3:	4c 8b 45 e8          	mov    r8,QWORD PTR [rbp-0x18]
  20d1f7:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  20d1fb:	e8 80 12 00 00       	call   20e480 <format.27>
  20d200:	66 83 f8 00          	cmp    ax,0x0
  20d204:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  20d208:	74 0b                	je     20d215 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.20+0x45>
  20d20a:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  20d20e:	e8 7d ea ff ff       	call   20bc90 <__zig_return_error>
  20d213:	eb 02                	jmp    20d217 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.20+0x47>
  20d215:	eb 00                	jmp    20d217 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.20+0x47>
  20d217:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  20d21b:	48 83 c4 30          	add    rsp,0x30
  20d21f:	5d                   	pop    rbp
  20d220:	c3                   	ret    
  20d221:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20d228:	0f 1f 84 00 00 00 00 
  20d22f:	00 

000000000020d230 <producer>:
fn producer(pContext: *ThreadContext) void {
  20d230:	55                   	push   rbp
  20d231:	48 89 e5             	mov    rbp,rsp
  20d234:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  20d23b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    while (pContext.counter < max_counter) {
  20d23f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20d243:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  20d246:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  20d24a:	ba 7f 96 98 00       	mov    edx,0x98967f
  20d24f:	89 d6                	mov    esi,edx
  20d251:	31 d2                	xor    edx,edx
  20d253:	48 29 ce             	sub    rsi,rcx
  20d256:	89 d1                	mov    ecx,edx
  20d258:	48 19 c1             	sbb    rcx,rax
  20d25b:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
  20d25f:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  20d263:	0f 82 38 01 00 00    	jb     20d3a1 <producer+0x171>
  20d269:	eb 00                	jmp    20d26b <producer+0x3b>
        var count = stallCountWait;
  20d26b:	c7 45 f4 10 27 00 00 	mov    DWORD PTR [rbp-0xc],0x2710
        var produce_val = @atomicLoad(@typeOf(produce), &produce, AtomicOrder.SeqCst);
  20d272:	8b 05 c0 6d 03 00    	mov    eax,DWORD PTR [rip+0x36dc0]        # 244038 <produce>
  20d278:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
        while ((produce_val != produceSignal) and (count > 0)) {
  20d27b:	83 7d f0 01          	cmp    DWORD PTR [rbp-0x10],0x1
  20d27f:	0f 95 c0             	setne  al
  20d282:	a8 01                	test   al,0x1
  20d284:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
  20d287:	75 02                	jne    20d28b <producer+0x5b>
  20d289:	eb 0a                	jmp    20d295 <producer+0x65>
  20d28b:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
  20d28f:	0f 97 c0             	seta   al
  20d292:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
  20d295:	8a 45 df             	mov    al,BYTE PTR [rbp-0x21]
  20d298:	a8 01                	test   al,0x1
  20d29a:	75 02                	jne    20d29e <producer+0x6e>
  20d29c:	eb 23                	jmp    20d2c1 <producer+0x91>
            produce_val = @atomicLoad(@typeOf(produce), &produce, AtomicOrder.SeqCst);
  20d29e:	8b 05 94 6d 03 00    	mov    eax,DWORD PTR [rip+0x36d94]        # 244038 <produce>
  20d2a4:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
            count -= 1;
  20d2a7:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  20d2aa:	83 e8 01             	sub    eax,0x1
  20d2ad:	0f 92 c1             	setb   cl
  20d2b0:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
  20d2b3:	88 4d d7             	mov    BYTE PTR [rbp-0x29],cl
  20d2b6:	0f 82 ee 00 00 00    	jb     20d3aa <producer+0x17a>
  20d2bc:	e9 f9 00 00 00       	jmp    20d3ba <producer+0x18a>
        while (produce_val != produceSignal) {
  20d2c1:	eb 00                	jmp    20d2c3 <producer+0x93>
  20d2c3:	83 7d f0 01          	cmp    DWORD PTR [rbp-0x10],0x1
  20d2c7:	74 20                	je     20d2e9 <producer+0xb9>
            gProducer_wait_count += 1;
  20d2c9:	48 8b 05 30 6d 03 00 	mov    rax,QWORD PTR [rip+0x36d30]        # 244000 <gProducer_wait_count>
  20d2d0:	48 83 c0 01          	add    rax,0x1
  20d2d4:	0f 92 c1             	setb   cl
  20d2d7:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  20d2db:	88 4d c7             	mov    BYTE PTR [rbp-0x39],cl
  20d2de:	0f 82 e1 00 00 00    	jb     20d3c5 <producer+0x195>
  20d2e4:	e9 ec 00 00 00       	jmp    20d3d5 <producer+0x1a5>
        _ = @atomicRmw(@typeOf(gCounter), &gCounter, AtomicRmwOp.Add, 1, AtomicOrder.SeqCst);
  20d2e9:	f0 48 81 05 2b 6d 03 	lock add QWORD PTR [rip+0x36d2b],0x1        # 244020 <gCounter>
  20d2f0:	00 01 00 00 00 
        pContext.counter += 1;
  20d2f5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20d2f9:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  20d2fc:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
  20d300:	48 83 c1 01          	add    rcx,0x1
  20d304:	48 83 d2 00          	adc    rdx,0x0
  20d308:	40 0f 92 c6          	setb   sil
  20d30c:	48 89 cf             	mov    rdi,rcx
  20d30f:	40 f6 c6 01          	test   sil,0x1
  20d313:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  20d317:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
  20d31b:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  20d31f:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  20d323:	0f 85 d3 00 00 00    	jne    20d3fc <producer+0x1cc>
  20d329:	e9 de 00 00 00       	jmp    20d40c <producer+0x1dc>
        while ((produce_val != produceSignal) and (count > 0)) {
  20d32e:	83 7d f0 01          	cmp    DWORD PTR [rbp-0x10],0x1
  20d332:	0f 95 c0             	setne  al
  20d335:	a8 01                	test   al,0x1
  20d337:	88 45 9f             	mov    BYTE PTR [rbp-0x61],al
  20d33a:	75 02                	jne    20d33e <producer+0x10e>
  20d33c:	eb 0a                	jmp    20d348 <producer+0x118>
  20d33e:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
  20d342:	0f 97 c0             	seta   al
  20d345:	88 45 9f             	mov    BYTE PTR [rbp-0x61],al
  20d348:	8a 45 9f             	mov    al,BYTE PTR [rbp-0x61]
  20d34b:	a8 01                	test   al,0x1
  20d34d:	75 02                	jne    20d351 <producer+0x121>
  20d34f:	eb 23                	jmp    20d374 <producer+0x144>
            produce_val = @atomicLoad(@typeOf(produce), &produce, AtomicOrder.SeqCst);
  20d351:	8b 05 e1 6c 03 00    	mov    eax,DWORD PTR [rip+0x36ce1]        # 244038 <produce>
  20d357:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
            count -= 1;
  20d35a:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  20d35d:	83 e8 01             	sub    eax,0x1
  20d360:	0f 92 c1             	setb   cl
  20d363:	89 45 98             	mov    DWORD PTR [rbp-0x68],eax
  20d366:	88 4d 97             	mov    BYTE PTR [rbp-0x69],cl
  20d369:	0f 82 d0 00 00 00    	jb     20d43f <producer+0x20f>
  20d36f:	e9 db 00 00 00       	jmp    20d44f <producer+0x21f>
        if (produce_val != produceSignal) {
  20d374:	83 7d f0 01          	cmp    DWORD PTR [rbp-0x10],0x1
  20d378:	74 20                	je     20d39a <producer+0x16a>
            gProducer_wake_count += 1;
  20d37a:	48 8b 05 8f 6c 03 00 	mov    rax,QWORD PTR [rip+0x36c8f]        # 244010 <gProducer_wake_count>
  20d381:	48 83 c0 01          	add    rax,0x1
  20d385:	0f 92 c1             	setb   cl
  20d388:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  20d38c:	88 4d 87             	mov    BYTE PTR [rbp-0x79],cl
  20d38f:	0f 82 c5 00 00 00    	jb     20d45a <producer+0x22a>
  20d395:	e9 d0 00 00 00       	jmp    20d46a <producer+0x23a>
        if (produce_val != produceSignal) {
  20d39a:	eb 00                	jmp    20d39c <producer+0x16c>
    while (pContext.counter < max_counter) {
  20d39c:	e9 9e fe ff ff       	jmp    20d23f <producer+0xf>
fn producer(pContext: *ThreadContext) void {
  20d3a1:	48 81 c4 80 00 00 00 	add    rsp,0x80
  20d3a8:	5d                   	pop    rbp
  20d3a9:	c3                   	ret    
  20d3aa:	48 8d 3d 17 5e 03 00 	lea    rdi,[rip+0x35e17]        # 2431c8 <__unnamed_4>
  20d3b1:	31 c0                	xor    eax,eax
  20d3b3:	89 c6                	mov    esi,eax
            count -= 1;
  20d3b5:	e8 46 e2 ff ff       	call   20b600 <panic>
  20d3ba:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  20d3bd:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
        while ((produce_val != produceSignal) and (count > 0)) {
  20d3c0:	e9 b6 fe ff ff       	jmp    20d27b <producer+0x4b>
  20d3c5:	48 8d 3d fc 5d 03 00 	lea    rdi,[rip+0x35dfc]        # 2431c8 <__unnamed_4>
  20d3cc:	31 c0                	xor    eax,eax
  20d3ce:	89 c6                	mov    esi,eax
            gProducer_wait_count += 1;
  20d3d0:	e8 2b e2 ff ff       	call   20b600 <panic>
  20d3d5:	48 8d 3d 5c 6c 03 00 	lea    rdi,[rip+0x36c5c]        # 244038 <produce>
  20d3dc:	31 f6                	xor    esi,esi
  20d3de:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20d3e2:	48 89 05 17 6c 03 00 	mov    QWORD PTR [rip+0x36c17],rax        # 244000 <gProducer_wait_count>
            futex_wait(&produce, consumeSignal);
  20d3e9:	e8 a2 00 00 00       	call   20d490 <futex_wait>
            produce_val = @atomicLoad(@typeOf(produce), &produce, AtomicOrder.SeqCst);
  20d3ee:	8b 35 44 6c 03 00    	mov    esi,DWORD PTR [rip+0x36c44]        # 244038 <produce>
  20d3f4:	89 75 f0             	mov    DWORD PTR [rbp-0x10],esi
        while (produce_val != produceSignal) {
  20d3f7:	e9 c7 fe ff ff       	jmp    20d2c3 <producer+0x93>
  20d3fc:	48 8d 3d c5 5d 03 00 	lea    rdi,[rip+0x35dc5]        # 2431c8 <__unnamed_4>
  20d403:	31 c0                	xor    eax,eax
  20d405:	89 c6                	mov    esi,eax
        pContext.counter += 1;
  20d407:	e8 f4 e1 ff ff       	call   20b600 <panic>
  20d40c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  20d410:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  20d414:	48 89 08             	mov    QWORD PTR [rax],rcx
  20d417:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  20d41b:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
        _ = @atomicRmw(@typeOf(produce), &produce, AtomicRmwOp.Xchg, consumeSignal, AtomicOrder.SeqCst);
  20d41f:	31 f6                	xor    esi,esi
  20d421:	87 35 11 6c 03 00    	xchg   DWORD PTR [rip+0x36c11],esi        # 244038 <produce>
        count = stallCountWake;
  20d427:	c7 45 f4 d0 07 00 00 	mov    DWORD PTR [rbp-0xc],0x7d0
        produce_val = @atomicLoad(@typeOf(produce), &produce, AtomicOrder.SeqCst);
  20d42e:	8b 3d 04 6c 03 00    	mov    edi,DWORD PTR [rip+0x36c04]        # 244038 <produce>
  20d434:	89 7d f0             	mov    DWORD PTR [rbp-0x10],edi
        while ((produce_val != produceSignal) and (count > 0)) {
  20d437:	89 75 80             	mov    DWORD PTR [rbp-0x80],esi
  20d43a:	e9 ef fe ff ff       	jmp    20d32e <producer+0xfe>
  20d43f:	48 8d 3d 82 5d 03 00 	lea    rdi,[rip+0x35d82]        # 2431c8 <__unnamed_4>
  20d446:	31 c0                	xor    eax,eax
  20d448:	89 c6                	mov    esi,eax
            count -= 1;
  20d44a:	e8 b1 e1 ff ff       	call   20b600 <panic>
  20d44f:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
  20d452:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
        while ((produce_val != produceSignal) and (count > 0)) {
  20d455:	e9 d4 fe ff ff       	jmp    20d32e <producer+0xfe>
  20d45a:	48 8d 3d 67 5d 03 00 	lea    rdi,[rip+0x35d67]        # 2431c8 <__unnamed_4>
  20d461:	31 c0                	xor    eax,eax
  20d463:	89 c6                	mov    esi,eax
            gProducer_wake_count += 1;
  20d465:	e8 96 e1 ff ff       	call   20b600 <panic>
  20d46a:	48 8d 3d c7 6b 03 00 	lea    rdi,[rip+0x36bc7]        # 244038 <produce>
  20d471:	be 01 00 00 00       	mov    esi,0x1
  20d476:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  20d47a:	48 89 05 8f 6b 03 00 	mov    QWORD PTR [rip+0x36b8f],rax        # 244010 <gProducer_wake_count>
            futex_wake(&produce, 1);
  20d481:	e8 5a 00 00 00       	call   20d4e0 <futex_wake>
        if (produce_val != produceSignal) {
  20d486:	e9 11 ff ff ff       	jmp    20d39c <producer+0x16c>
  20d48b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000020d490 <futex_wait>:
pub fn futex_wait(pVal: *i32, expected_value: u32) void {
  20d490:	55                   	push   rbp
  20d491:	48 89 e5             	mov    rbp,rsp
  20d494:	48 83 ec 30          	sub    rsp,0x30
  20d498:	b8 ca 00 00 00       	mov    eax,0xca
  20d49d:	89 c1                	mov    ecx,eax
  20d49f:	31 c0                	xor    eax,eax
  20d4a1:	89 c2                	mov    edx,eax
  20d4a3:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  20d4a7:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
    _ = syscall4(SYS_futex, @ptrToInt(pVal), linux.FUTEX_WAIT, expected_value, 0);
  20d4aa:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20d4ae:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  20d4b1:	89 c7                	mov    edi,eax
  20d4b3:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  20d4b7:	48 89 cf             	mov    rdi,rcx
  20d4ba:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  20d4be:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20d4c2:	4c 8b 45 e0          	mov    r8,QWORD PTR [rbp-0x20]
  20d4c6:	e8 55 11 00 00       	call   20e620 <syscall4>
pub fn futex_wait(pVal: *i32, expected_value: u32) void {
  20d4cb:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  20d4cf:	48 83 c4 30          	add    rsp,0x30
  20d4d3:	5d                   	pop    rbp
  20d4d4:	c3                   	ret    
  20d4d5:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20d4dc:	00 00 00 00 

000000000020d4e0 <futex_wake>:
pub fn futex_wake(pVal: *i32, num_threads_to_wake: u32) void {
  20d4e0:	55                   	push   rbp
  20d4e1:	48 89 e5             	mov    rbp,rsp
  20d4e4:	48 83 ec 20          	sub    rsp,0x20
  20d4e8:	b8 ca 00 00 00       	mov    eax,0xca
  20d4ed:	89 c1                	mov    ecx,eax
  20d4ef:	b8 01 00 00 00       	mov    eax,0x1
  20d4f4:	89 c2                	mov    edx,eax
  20d4f6:	31 c0                	xor    eax,eax
  20d4f8:	41 89 c0             	mov    r8d,eax
  20d4fb:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  20d4ff:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
    _ = syscall4(SYS_futex, @ptrToInt(pVal), linux.FUTEX_WAKE, num_threads_to_wake, 0);
  20d502:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20d506:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  20d509:	89 c7                	mov    edi,eax
  20d50b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  20d50f:	48 89 cf             	mov    rdi,rcx
  20d512:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20d516:	e8 05 11 00 00       	call   20e620 <syscall4>
pub fn futex_wake(pVal: *i32, num_threads_to_wake: u32) void {
  20d51b:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  20d51f:	48 83 c4 20          	add    rsp,0x20
  20d523:	5d                   	pop    rbp
  20d524:	c3                   	ret    
  20d525:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20d52c:	00 00 00 00 

000000000020d530 <mmap>:
pub fn mmap(address: ?[*]u8, length: usize, prot: usize, flags: u32, fd: i32, offset: isize) usize {
  20d530:	55                   	push   rbp
  20d531:	48 89 e5             	mov    rbp,rsp
  20d534:	48 83 ec 40          	sub    rsp,0x40
  20d538:	b8 09 00 00 00       	mov    eax,0x9
  20d53d:	41 89 c2             	mov    r10d,eax
  20d540:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  20d544:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  20d548:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  20d54c:	89 4d e4             	mov    DWORD PTR [rbp-0x1c],ecx
  20d54f:	44 89 45 e0          	mov    DWORD PTR [rbp-0x20],r8d
  20d553:	4c 89 4d d8          	mov    QWORD PTR [rbp-0x28],r9
    return syscall6(SYS_mmap, @ptrToInt(address), length, prot, flags, @intCast(usize, fd), @bitCast(usize, offset));
  20d557:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20d55b:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  20d55f:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20d563:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  20d566:	4c 63 4d e0          	movsxd r9,DWORD PTR [rbp-0x20]
  20d56a:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  20d56e:	89 c0                	mov    eax,eax
  20d570:	41 89 c0             	mov    r8d,eax
  20d573:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
  20d577:	4c 89 d7             	mov    rdi,r10
  20d57a:	4c 8b 55 d0          	mov    r10,QWORD PTR [rbp-0x30]
  20d57e:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  20d582:	e8 c9 10 00 00       	call   20e650 <syscall6>
  20d587:	48 83 c4 40          	add    rsp,0x40
  20d58b:	5d                   	pop    rbp
  20d58c:	c3                   	ret    
  20d58d:	0f 1f 00             	nop    DWORD PTR [rax]

000000000020d590 <MainFuncs_linuxThreadMain>:
        extern fn linuxThreadMain(ctx_addr: usize) u8 {
  20d590:	55                   	push   rbp
  20d591:	48 89 e5             	mov    rbp,rsp
  20d594:	48 83 ec 10          	sub    rsp,0x10
  20d598:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
            const arg = if (@sizeOf(Context) == 0) {} else @intToPtr(*const Context, ctx_addr).*;
  20d59c:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  20d5a0:	48 8b 3f             	mov    rdi,QWORD PTR [rdi]
  20d5a3:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
                    startFn(arg);
  20d5a7:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  20d5ab:	e8 80 fc ff ff       	call   20d230 <producer>
  20d5b0:	31 c0                	xor    eax,eax
  20d5b2:	88 c1                	mov    cl,al
                    return 0;
  20d5b4:	88 c8                	mov    al,cl
  20d5b6:	48 83 c4 10          	add    rsp,0x10
  20d5ba:	5d                   	pop    rbp
  20d5bb:	c3                   	ret    
  20d5bc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000020d5c0 <munmap>:
pub fn munmap(address: usize, length: usize) usize {
  20d5c0:	55                   	push   rbp
  20d5c1:	48 89 e5             	mov    rbp,rsp
  20d5c4:	48 83 ec 10          	sub    rsp,0x10
  20d5c8:	b8 0b 00 00 00       	mov    eax,0xb
  20d5cd:	89 c1                	mov    ecx,eax
  20d5cf:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  20d5d3:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    return syscall2(SYS_munmap, address, length);
  20d5d7:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20d5db:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  20d5df:	48 89 cf             	mov    rdi,rcx
  20d5e2:	e8 79 0e 00 00       	call   20e460 <syscall2>
  20d5e7:	48 83 c4 10          	add    rsp,0x10
  20d5eb:	5d                   	pop    rbp
  20d5ec:	c3                   	ret    
  20d5ed:	0f 1f 00             	nop    DWORD PTR [rax]

000000000020d5f0 <consumer>:
fn consumer(pContext: *ThreadContext) void {
  20d5f0:	55                   	push   rbp
  20d5f1:	48 89 e5             	mov    rbp,rsp
  20d5f4:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  20d5fb:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    while (pContext.counter < max_counter) {
  20d5ff:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20d603:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  20d606:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  20d60a:	ba 7f 96 98 00       	mov    edx,0x98967f
  20d60f:	89 d6                	mov    esi,edx
  20d611:	31 d2                	xor    edx,edx
  20d613:	48 29 ce             	sub    rsi,rcx
  20d616:	89 d1                	mov    ecx,edx
  20d618:	48 19 c1             	sbb    rcx,rax
  20d61b:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
  20d61f:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  20d623:	0f 82 51 01 00 00    	jb     20d77a <consumer+0x18a>
  20d629:	eb 00                	jmp    20d62b <consumer+0x3b>
        _ = @atomicRmw(@typeOf(produce), &produce, AtomicRmwOp.Xchg, produceSignal, AtomicOrder.SeqCst);
  20d62b:	b8 01 00 00 00       	mov    eax,0x1
  20d630:	87 05 02 6a 03 00    	xchg   DWORD PTR [rip+0x36a02],eax        # 244038 <produce>
        var count = stallCountWake;
  20d636:	c7 45 f4 d0 07 00 00 	mov    DWORD PTR [rbp-0xc],0x7d0
        var produce_val = @atomicLoad(@typeOf(produce), &produce, AtomicOrder.SeqCst);
  20d63d:	8b 0d f5 69 03 00    	mov    ecx,DWORD PTR [rip+0x369f5]        # 244038 <produce>
  20d643:	89 4d f0             	mov    DWORD PTR [rbp-0x10],ecx
  20d646:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
        while ((produce_val != consumeSignal) and (count > 0)) {
  20d649:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
  20d64d:	0f 95 c0             	setne  al
  20d650:	a8 01                	test   al,0x1
  20d652:	88 45 db             	mov    BYTE PTR [rbp-0x25],al
  20d655:	75 02                	jne    20d659 <consumer+0x69>
  20d657:	eb 0a                	jmp    20d663 <consumer+0x73>
  20d659:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
  20d65d:	0f 97 c0             	seta   al
  20d660:	88 45 db             	mov    BYTE PTR [rbp-0x25],al
  20d663:	8a 45 db             	mov    al,BYTE PTR [rbp-0x25]
  20d666:	a8 01                	test   al,0x1
  20d668:	75 02                	jne    20d66c <consumer+0x7c>
  20d66a:	eb 23                	jmp    20d68f <consumer+0x9f>
            produce_val = @atomicLoad(@typeOf(produce), &produce, AtomicOrder.SeqCst);
  20d66c:	8b 05 c6 69 03 00    	mov    eax,DWORD PTR [rip+0x369c6]        # 244038 <produce>
  20d672:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
            count -= 1;
  20d675:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  20d678:	83 e8 01             	sub    eax,0x1
  20d67b:	0f 92 c1             	setb   cl
  20d67e:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
  20d681:	88 4d d3             	mov    BYTE PTR [rbp-0x2d],cl
  20d684:	0f 82 f9 00 00 00    	jb     20d783 <consumer+0x193>
  20d68a:	e9 04 01 00 00       	jmp    20d793 <consumer+0x1a3>
        if (produce_val != consumeSignal) {
  20d68f:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
  20d693:	74 20                	je     20d6b5 <consumer+0xc5>
            gConsumer_wake_count += 1;
  20d695:	48 8b 05 7c 69 03 00 	mov    rax,QWORD PTR [rip+0x3697c]        # 244018 <gConsumer_wake_count>
  20d69c:	48 83 c0 01          	add    rax,0x1
  20d6a0:	0f 92 c1             	setb   cl
  20d6a3:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  20d6a7:	88 4d c7             	mov    BYTE PTR [rbp-0x39],cl
  20d6aa:	0f 82 ee 00 00 00    	jb     20d79e <consumer+0x1ae>
  20d6b0:	e9 f9 00 00 00       	jmp    20d7ae <consumer+0x1be>
        if (produce_val != consumeSignal) {
  20d6b5:	eb 00                	jmp    20d6b7 <consumer+0xc7>
        count = stallCountWait;
  20d6b7:	c7 45 f4 10 27 00 00 	mov    DWORD PTR [rbp-0xc],0x2710
        produce_val = @atomicLoad(@typeOf(produce), &produce, AtomicOrder.SeqCst);
  20d6be:	8b 05 74 69 03 00    	mov    eax,DWORD PTR [rip+0x36974]        # 244038 <produce>
  20d6c4:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
        while ((produce_val != consumeSignal) and (count > 0)) {
  20d6c7:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
  20d6cb:	0f 95 c0             	setne  al
  20d6ce:	a8 01                	test   al,0x1
  20d6d0:	88 45 c6             	mov    BYTE PTR [rbp-0x3a],al
  20d6d3:	75 02                	jne    20d6d7 <consumer+0xe7>
  20d6d5:	eb 0a                	jmp    20d6e1 <consumer+0xf1>
  20d6d7:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
  20d6db:	0f 97 c0             	seta   al
  20d6de:	88 45 c6             	mov    BYTE PTR [rbp-0x3a],al
  20d6e1:	8a 45 c6             	mov    al,BYTE PTR [rbp-0x3a]
  20d6e4:	a8 01                	test   al,0x1
  20d6e6:	75 02                	jne    20d6ea <consumer+0xfa>
  20d6e8:	eb 23                	jmp    20d70d <consumer+0x11d>
            produce_val = @atomicLoad(@typeOf(produce), &produce, AtomicOrder.SeqCst);
  20d6ea:	8b 05 48 69 03 00    	mov    eax,DWORD PTR [rip+0x36948]        # 244038 <produce>
  20d6f0:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
            count -= 1;
  20d6f3:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  20d6f6:	83 e8 01             	sub    eax,0x1
  20d6f9:	0f 92 c1             	setb   cl
  20d6fc:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
  20d6ff:	88 4d bf             	mov    BYTE PTR [rbp-0x41],cl
  20d702:	0f 82 c7 00 00 00    	jb     20d7cf <consumer+0x1df>
  20d708:	e9 d2 00 00 00       	jmp    20d7df <consumer+0x1ef>
        while (produce_val != consumeSignal) {
  20d70d:	eb 00                	jmp    20d70f <consumer+0x11f>
  20d70f:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
  20d713:	74 20                	je     20d735 <consumer+0x145>
            gConsumer_wait_count += 1;
  20d715:	48 8b 05 ec 68 03 00 	mov    rax,QWORD PTR [rip+0x368ec]        # 244008 <gConsumer_wait_count>
  20d71c:	48 83 c0 01          	add    rax,0x1
  20d720:	0f 92 c1             	setb   cl
  20d723:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  20d727:	88 4d af             	mov    BYTE PTR [rbp-0x51],cl
  20d72a:	0f 82 ba 00 00 00    	jb     20d7ea <consumer+0x1fa>
  20d730:	e9 c5 00 00 00       	jmp    20d7fa <consumer+0x20a>
        _ = @atomicRmw(@typeOf(gCounter), &gCounter, AtomicRmwOp.Add, 1, AtomicOrder.SeqCst);
  20d735:	f0 48 81 05 df 68 03 	lock add QWORD PTR [rip+0x368df],0x1        # 244020 <gCounter>
  20d73c:	00 01 00 00 00 
        pContext.counter += 1;
  20d741:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20d745:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  20d748:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
  20d74c:	48 83 c1 01          	add    rcx,0x1
  20d750:	48 83 d2 00          	adc    rdx,0x0
  20d754:	40 0f 92 c6          	setb   sil
  20d758:	48 89 cf             	mov    rdi,rcx
  20d75b:	40 f6 c6 01          	test   sil,0x1
  20d75f:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  20d763:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
  20d767:	48 89 7d 90          	mov    QWORD PTR [rbp-0x70],rdi
  20d76b:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
  20d76f:	0f 85 af 00 00 00    	jne    20d824 <consumer+0x234>
  20d775:	e9 ba 00 00 00       	jmp    20d834 <consumer+0x244>
fn consumer(pContext: *ThreadContext) void {
  20d77a:	48 81 c4 80 00 00 00 	add    rsp,0x80
  20d781:	5d                   	pop    rbp
  20d782:	c3                   	ret    
  20d783:	48 8d 3d 3e 5a 03 00 	lea    rdi,[rip+0x35a3e]        # 2431c8 <__unnamed_4>
  20d78a:	31 c0                	xor    eax,eax
  20d78c:	89 c6                	mov    esi,eax
            count -= 1;
  20d78e:	e8 6d de ff ff       	call   20b600 <panic>
  20d793:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
  20d796:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
        while ((produce_val != consumeSignal) and (count > 0)) {
  20d799:	e9 ab fe ff ff       	jmp    20d649 <consumer+0x59>
  20d79e:	48 8d 3d 23 5a 03 00 	lea    rdi,[rip+0x35a23]        # 2431c8 <__unnamed_4>
  20d7a5:	31 c0                	xor    eax,eax
  20d7a7:	89 c6                	mov    esi,eax
            gConsumer_wake_count += 1;
  20d7a9:	e8 52 de ff ff       	call   20b600 <panic>
  20d7ae:	48 8d 3d 83 68 03 00 	lea    rdi,[rip+0x36883]        # 244038 <produce>
  20d7b5:	be 01 00 00 00       	mov    esi,0x1
  20d7ba:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20d7be:	48 89 05 53 68 03 00 	mov    QWORD PTR [rip+0x36853],rax        # 244018 <gConsumer_wake_count>
            futex_wake(&produce, 1);
  20d7c5:	e8 16 fd ff ff       	call   20d4e0 <futex_wake>
        if (produce_val != consumeSignal) {
  20d7ca:	e9 e8 fe ff ff       	jmp    20d6b7 <consumer+0xc7>
  20d7cf:	48 8d 3d f2 59 03 00 	lea    rdi,[rip+0x359f2]        # 2431c8 <__unnamed_4>
  20d7d6:	31 c0                	xor    eax,eax
  20d7d8:	89 c6                	mov    esi,eax
            count -= 1;
  20d7da:	e8 21 de ff ff       	call   20b600 <panic>
  20d7df:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
  20d7e2:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
        while ((produce_val != consumeSignal) and (count > 0)) {
  20d7e5:	e9 dd fe ff ff       	jmp    20d6c7 <consumer+0xd7>
  20d7ea:	48 8d 3d d7 59 03 00 	lea    rdi,[rip+0x359d7]        # 2431c8 <__unnamed_4>
  20d7f1:	31 c0                	xor    eax,eax
  20d7f3:	89 c6                	mov    esi,eax
            gConsumer_wait_count += 1;
  20d7f5:	e8 06 de ff ff       	call   20b600 <panic>
  20d7fa:	48 8d 3d 37 68 03 00 	lea    rdi,[rip+0x36837]        # 244038 <produce>
  20d801:	be 01 00 00 00       	mov    esi,0x1
  20d806:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20d80a:	48 89 05 f7 67 03 00 	mov    QWORD PTR [rip+0x367f7],rax        # 244008 <gConsumer_wait_count>
            futex_wait(&produce, produceSignal);
  20d811:	e8 7a fc ff ff       	call   20d490 <futex_wait>
            produce_val = @atomicLoad(@typeOf(produce), &produce, AtomicOrder.SeqCst);
  20d816:	8b 35 1c 68 03 00    	mov    esi,DWORD PTR [rip+0x3681c]        # 244038 <produce>
  20d81c:	89 75 f0             	mov    DWORD PTR [rbp-0x10],esi
        while (produce_val != consumeSignal) {
  20d81f:	e9 eb fe ff ff       	jmp    20d70f <consumer+0x11f>
  20d824:	48 8d 3d 9d 59 03 00 	lea    rdi,[rip+0x3599d]        # 2431c8 <__unnamed_4>
  20d82b:	31 c0                	xor    eax,eax
  20d82d:	89 c6                	mov    esi,eax
        pContext.counter += 1;
  20d82f:	e8 cc dd ff ff       	call   20b600 <panic>
  20d834:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  20d838:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  20d83c:	48 89 08             	mov    QWORD PTR [rax],rcx
  20d83f:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
  20d843:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
    while (pContext.counter < max_counter) {
  20d847:	e9 b3 fd ff ff       	jmp    20d5ff <consumer+0xf>
  20d84c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000020d850 <MainFuncs_linuxThreadMain.21>:
        extern fn linuxThreadMain(ctx_addr: usize) u8 {
  20d850:	55                   	push   rbp
  20d851:	48 89 e5             	mov    rbp,rsp
  20d854:	48 83 ec 10          	sub    rsp,0x10
  20d858:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
            const arg = if (@sizeOf(Context) == 0) {} else @intToPtr(*const Context, ctx_addr).*;
  20d85c:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  20d860:	48 8b 3f             	mov    rdi,QWORD PTR [rdi]
  20d863:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
                    startFn(arg);
  20d867:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  20d86b:	e8 80 fd ff ff       	call   20d5f0 <consumer>
  20d870:	31 c0                	xor    eax,eax
  20d872:	88 c1                	mov    cl,al
                    return 0;
  20d874:	88 c8                	mov    al,cl
  20d876:	48 83 c4 10          	add    rsp,0x10
  20d87a:	5d                   	pop    rbp
  20d87b:	c3                   	ret    
  20d87c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000020d880 <futex_wait.22>:
pub fn futex_wait(uaddr: usize, futex_op: u32, val: i32, timeout: ?*timespec) usize {
  20d880:	55                   	push   rbp
  20d881:	48 89 e5             	mov    rbp,rsp
  20d884:	48 83 ec 30          	sub    rsp,0x30
  20d888:	b8 ca 00 00 00       	mov    eax,0xca
  20d88d:	41 89 c0             	mov    r8d,eax
  20d890:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  20d894:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
  20d897:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
  20d89a:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    return syscall4(SYS_futex, uaddr, futex_op, @bitCast(u32, val), @ptrToInt(timeout));
  20d89e:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20d8a2:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  20d8a5:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
  20d8a8:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20d8ac:	89 c0                	mov    eax,eax
  20d8ae:	89 c7                	mov    edi,eax
  20d8b0:	89 d0                	mov    eax,edx
  20d8b2:	41 89 c1             	mov    r9d,eax
  20d8b5:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  20d8b9:	4c 89 c7             	mov    rdi,r8
  20d8bc:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  20d8c0:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  20d8c4:	4c 89 c9             	mov    rcx,r9
  20d8c7:	4c 8b 45 d8          	mov    r8,QWORD PTR [rbp-0x28]
  20d8cb:	e8 d0 0d 00 00       	call   20e6a0 <syscall4.29>
  20d8d0:	48 83 c4 30          	add    rsp,0x30
  20d8d4:	5d                   	pop    rbp
  20d8d5:	c3                   	ret    
  20d8d6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  20d8dd:	00 00 00 

000000000020d8e0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.23>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  20d8e0:	55                   	push   rbp
  20d8e1:	48 89 e5             	mov    rbp,rsp
  20d8e4:	48 83 ec 20          	sub    rsp,0x20
  20d8e8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  20d8ec:	c5 fb 11 45 f0       	vmovsd QWORD PTR [rbp-0x10],xmm0
            return std.fmt.format(self, Error, self.writeFn, format, args);
  20d8f1:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20d8f5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20d8f9:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  20d8fc:	c5 fb 10 45 f0       	vmovsd xmm0,QWORD PTR [rbp-0x10]
  20d901:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  20d905:	e8 c6 0d 00 00       	call   20e6d0 <format.30>
  20d90a:	66 83 f8 00          	cmp    ax,0x0
  20d90e:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
  20d912:	74 0b                	je     20d91f <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.23+0x3f>
  20d914:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  20d918:	e8 73 e3 ff ff       	call   20bc90 <__zig_return_error>
  20d91d:	eb 02                	jmp    20d921 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.23+0x41>
  20d91f:	eb 00                	jmp    20d921 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.23+0x41>
  20d921:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
  20d925:	48 83 c4 20          	add    rsp,0x20
  20d929:	5d                   	pop    rbp
  20d92a:	c3                   	ret    
  20d92b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000020d930 <raise>:
pub const SIG_ERR = @intToPtr(extern fn (i32) void, @maxValue(usize));
pub const SIG_DFL = @intToPtr(extern fn (i32) void, 0);
pub const SIG_IGN = @intToPtr(extern fn (i32) void, 1);
pub const empty_sigset = []usize{0} ** sigset_t.len;

pub fn raise(sig: i32) usize {
  20d930:	55                   	push   rbp
  20d931:	48 89 e5             	mov    rbp,rsp
  20d934:	48 81 ec b0 00 00 00 	sub    rsp,0xb0
  20d93b:	48 8d 85 78 ff ff ff 	lea    rax,[rbp-0x88]
  20d942:	48 8d 0d b7 b2 ff ff 	lea    rcx,[rip+0xffffffffffffb2b7]        # 208c00 <__unnamed_21>
  20d949:	ba 80 00 00 00       	mov    edx,0x80
  20d94e:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    var set: sigset_t = undefined;
  20d951:	48 89 c6             	mov    rsi,rax
  20d954:	48 89 f7             	mov    rdi,rsi
  20d957:	48 89 ce             	mov    rsi,rcx
  20d95a:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  20d961:	e8 9a 6f 02 00       	call   234900 <memcpy>
    blockAppSignals(&set);
  20d966:	48 8b bd 60 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  20d96d:	e8 8e 0e 00 00       	call   20e800 <blockAppSignals>
  20d972:	41 b8 ba 00 00 00    	mov    r8d,0xba
  20d978:	44 89 c7             	mov    edi,r8d
    const tid = @intCast(i32, syscall0(SYS_gettid));
  20d97b:	e8 d0 0e 00 00       	call   20e850 <syscall0>
  20d980:	41 89 c0             	mov    r8d,eax
  20d983:	49 63 c8             	movsxd rcx,r8d
  20d986:	48 39 c8             	cmp    rax,rcx
  20d989:	44 89 85 5c ff ff ff 	mov    DWORD PTR [rbp-0xa4],r8d
  20d990:	75 46                	jne    20d9d8 <raise+0xa8>
  20d992:	b8 c8 00 00 00       	mov    eax,0xc8
  20d997:	89 c7                	mov    edi,eax
  20d999:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
  20d99f:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
    const ret = syscall2(SYS_tkill, @intCast(usize, tid), @intCast(usize, sig));
  20d9a5:	48 63 b5 74 ff ff ff 	movsxd rsi,DWORD PTR [rbp-0x8c]
  20d9ac:	48 63 55 fc          	movsxd rdx,DWORD PTR [rbp-0x4]
  20d9b0:	e8 ab 0a 00 00       	call   20e460 <syscall2>
  20d9b5:	48 8d bd 78 ff ff ff 	lea    rdi,[rbp-0x88]
  20d9bc:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
    restoreSignals(&set);
  20d9c3:	e8 98 0e 00 00       	call   20e860 <restoreSignals>
    return ret;
  20d9c8:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  20d9cf:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  20d9d6:	5d                   	pop    rbp
  20d9d7:	c3                   	ret    
  20d9d8:	48 8d 3d c9 5a 03 00 	lea    rdi,[rip+0x35ac9]        # 2434a8 <__unnamed_22>
  20d9df:	31 c0                	xor    eax,eax
  20d9e1:	89 c6                	mov    esi,eax
    const tid = @intCast(i32, syscall0(SYS_gettid));
  20d9e3:	e8 18 dc ff ff       	call   20b600 <panic>
  20d9e8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  20d9ef:	00 

000000000020d9f0 <getStdErr>:
pub fn getStdErr() GetStdIoErrs!File {
  20d9f0:	55                   	push   rbp
  20d9f1:	48 89 e5             	mov    rbp,rsp
  20d9f4:	48 83 ec 20          	sub    rsp,0x20
  20d9f8:	48 89 f8             	mov    rax,rdi
  20d9fb:	48 8d 4d f8          	lea    rcx,[rbp-0x8]
  20d9ff:	be 02 00 00 00       	mov    esi,0x2
    return File.openHandle(handle);
  20da04:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  20da08:	48 89 cf             	mov    rdi,rcx
  20da0b:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  20da0f:	e8 5c 00 00 00       	call   20da70 <File_openHandle>
  20da14:	66 c7 45 f0 00 00    	mov    WORD PTR [rbp-0x10],0x0
  20da1a:	8b 75 f8             	mov    esi,DWORD PTR [rbp-0x8]
  20da1d:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
  20da20:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20da24:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20da28:	48 89 01             	mov    QWORD PTR [rcx],rax
  20da2b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20da2f:	48 83 c4 20          	add    rsp,0x20
  20da33:	5d                   	pop    rbp
  20da34:	c3                   	ret    
  20da35:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20da3c:	00 00 00 00 

000000000020da40 <FileOutStream_init>:
    pub fn init(file: *File) FileOutStream {
  20da40:	55                   	push   rbp
  20da41:	48 89 e5             	mov    rbp,rsp
  20da44:	48 89 f8             	mov    rax,rdi
  20da47:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
            .file = file,
  20da4b:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
        return FileOutStream{
  20da4f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  20da53:	48 8b 35 76 59 03 00 	mov    rsi,QWORD PTR [rip+0x35976]        # 2433d0 <__unnamed_23>
  20da5a:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  20da5e:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20da62:	48 89 37             	mov    QWORD PTR [rdi],rsi
  20da65:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20da69:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  20da6d:	5d                   	pop    rbp
  20da6e:	c3                   	ret    
  20da6f:	90                   	nop

000000000020da70 <File_openHandle>:
        } else {
            @compileError("TODO implement openWriteMode for this OS");
        }
    }

    pub fn openHandle(handle: os.FileHandle) File {
  20da70:	55                   	push   rbp
  20da71:	48 89 e5             	mov    rbp,rsp
  20da74:	48 89 f8             	mov    rax,rdi
  20da77:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
        return File{ .handle = handle };
  20da7a:	8b 75 f4             	mov    esi,DWORD PTR [rbp-0xc]
  20da7d:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
  20da80:	8b 75 f8             	mov    esi,DWORD PTR [rbp-0x8]
  20da83:	89 37                	mov    DWORD PTR [rdi],esi
  20da85:	5d                   	pop    rbp
  20da86:	c3                   	ret    
  20da87:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  20da8e:	00 00 

000000000020da90 <FileOutStream_writeFn>:
    fn writeFn(out_stream: *Stream, bytes: []const u8) !void {
  20da90:	55                   	push   rbp
  20da91:	48 89 e5             	mov    rbp,rsp
  20da94:	48 83 ec 20          	sub    rsp,0x20
  20da98:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
        const self = @fieldParentPtr(FileOutStream, "stream", out_stream);
  20da9c:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20daa0:	48 83 ee 08          	sub    rsi,0x8
  20daa4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
        return self.file.write(bytes);
  20daa8:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20daac:	48 8b 36             	mov    rsi,QWORD PTR [rsi]
  20daaf:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  20dab3:	e8 f8 0d 00 00       	call   20e8b0 <File_write>
  20dab8:	66 83 f8 00          	cmp    ax,0x0
  20dabc:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
  20dac0:	74 0b                	je     20dacd <FileOutStream_writeFn+0x3d>
  20dac2:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  20dac6:	e8 c5 e1 ff ff       	call   20bc90 <__zig_return_error>
  20dacb:	eb 02                	jmp    20dacf <FileOutStream_writeFn+0x3f>
  20dacd:	eb 00                	jmp    20dacf <FileOutStream_writeFn+0x3f>
  20dacf:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
  20dad3:	48 83 c4 20          	add    rsp,0x20
  20dad7:	5d                   	pop    rbp
  20dad8:	c3                   	ret    
  20dad9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

000000000020dae0 <format>:
const max_int_digits = 65;

/// Renders fmt string with args, calling output with slices of bytes.
/// If `output` returns an error, the error is returned from `format` and
/// `output` is not called again.
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  20dae0:	55                   	push   rbp
  20dae1:	48 89 e5             	mov    rbp,rsp
  20dae4:	48 83 ec 30          	sub    rsp,0x30
  20dae8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  20daec:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
                '{' => {
                    state = State.Start;
                    start_index = i;
                },
                '}' => {
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  20daf0:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  20daf4:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  20daf8:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  20dafc:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  20db00:	48 89 ce             	mov    rsi,rcx
  20db03:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  20db07:	e8 74 00 00 00       	call   20db80 <formatType>
  20db0c:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  20db10:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  20db15:	74 1b                	je     20db32 <format+0x52>
  20db17:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  20db1b:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  20db1f:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  20db23:	e8 68 e1 ff ff       	call   20bc90 <__zig_return_error>
  20db28:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  20db2c:	48 83 c4 30          	add    rsp,0x30
  20db30:	5d                   	pop    rbp
  20db31:	c3                   	ret    
  20db32:	48 8d 15 a7 58 03 00 	lea    rdx,[rip+0x358a7]        # 2433e0 <__unnamed_24>
        if (state != State.Start) {
            @compileError("Incomplete format string: " ++ fmt);
        }
    }
    if (start_index < fmt.len) {
        try output(context, fmt[start_index..]);
  20db39:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20db3d:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20db41:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  20db45:	ff d0                	call   rax
  20db47:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  20db4b:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  20db50:	74 1b                	je     20db6d <format+0x8d>
  20db52:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  20db56:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  20db5a:	66 89 45 d4          	mov    WORD PTR [rbp-0x2c],ax
  20db5e:	e8 2d e1 ff ff       	call   20bc90 <__zig_return_error>
  20db63:	66 8b 45 d4          	mov    ax,WORD PTR [rbp-0x2c]
  20db67:	48 83 c4 30          	add    rsp,0x30
  20db6b:	5d                   	pop    rbp
  20db6c:	c3                   	ret    
  20db6d:	31 c0                	xor    eax,eax
  20db6f:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  20db72:	66 89 c8             	mov    ax,cx
  20db75:	48 83 c4 30          	add    rsp,0x30
  20db79:	5d                   	pop    rbp
  20db7a:	c3                   	ret    
  20db7b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000020db80 <formatType>:
    }
}

pub fn formatType(
  20db80:	55                   	push   rbp
  20db81:	48 89 e5             	mov    rbp,rsp
  20db84:	48 83 ec 30          	sub    rsp,0x30
  20db88:	48 8d 45 e0          	lea    rax,[rbp-0x20]
  20db8c:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  20db90:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
                    }
                }
                return format(context, Errors, output, "{}@{x}", @typeName(T.Child), @ptrToInt(value));
            },
            builtin.TypeInfo.Pointer.Size.Slice => {
                const casted_value = ([]const u8)(value);
  20db94:	48 8b 0e             	mov    rcx,QWORD PTR [rsi]
  20db97:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  20db9b:	48 8b 4e 08          	mov    rcx,QWORD PTR [rsi+0x8]
  20db9f:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
                return output(context, casted_value);
  20dba3:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  20dba7:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20dbab:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  20dbaf:	48 89 c2             	mov    rdx,rax
  20dbb2:	ff d1                	call   rcx
  20dbb4:	66 83 f8 00          	cmp    ax,0x0
  20dbb8:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  20dbbc:	74 0b                	je     20dbc9 <formatType+0x49>
  20dbbe:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  20dbc2:	e8 c9 e0 ff ff       	call   20bc90 <__zig_return_error>
  20dbc7:	eb 02                	jmp    20dbcb <formatType+0x4b>
  20dbc9:	eb 00                	jmp    20dbcb <formatType+0x4b>
  20dbcb:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  20dbcf:	48 83 c4 30          	add    rsp,0x30
  20dbd3:	5d                   	pop    rbp
  20dbd4:	c3                   	ret    
  20dbd5:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20dbdc:	00 00 00 00 

000000000020dbe0 <getSelfDebugInfo>:
pub fn getSelfDebugInfo() !*ElfStackTrace {
  20dbe0:	55                   	push   rbp
  20dbe1:	48 89 e5             	mov    rbp,rsp
  20dbe4:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  20dbeb:	48 89 f8             	mov    rax,rdi
    if (self_debug_info) |info| {
  20dbee:	48 83 3d 4a 64 03 00 	cmp    QWORD PTR [rip+0x3644a],0x0        # 244040 <self_debug_info>
  20dbf5:	00 
  20dbf6:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  20dbfa:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
  20dbfe:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
  20dc02:	74 39                	je     20dc3d <getSelfDebugInfo+0x5d>
  20dc04:	48 8b 05 35 64 03 00 	mov    rax,QWORD PTR [rip+0x36435]        # 244040 <self_debug_info>
  20dc0b:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
        return info;
  20dc0f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  20dc13:	66 c7 45 f0 00 00    	mov    WORD PTR [rbp-0x10],0x0
  20dc19:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  20dc1d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20dc21:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  20dc25:	48 89 01             	mov    QWORD PTR [rcx],rax
  20dc28:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20dc2c:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20dc30:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  20dc34:	48 81 c4 80 00 00 00 	add    rsp,0x80
  20dc3b:	5d                   	pop    rbp
  20dc3c:	c3                   	ret    
        const info = try openSelfDebugInfo(getDebugInfoAllocator());
  20dc3d:	e8 ee 00 00 00       	call   20dd30 <getDebugInfoAllocator>
  20dc42:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
  20dc46:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  20dc4a:	48 89 c2             	mov    rdx,rax
  20dc4d:	e8 7e 0f 00 00       	call   20ebd0 <openSelfDebugInfo>
  20dc52:	66 83 7d e0 00       	cmp    WORD PTR [rbp-0x20],0x0
  20dc57:	74 39                	je     20dc92 <getSelfDebugInfo+0xb2>
  20dc59:	66 8b 45 e0          	mov    ax,WORD PTR [rbp-0x20]
  20dc5d:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  20dc61:	66 89 45 86          	mov    WORD PTR [rbp-0x7a],ax
  20dc65:	e8 26 e0 ff ff       	call   20bc90 <__zig_return_error>
  20dc6a:	66 8b 45 86          	mov    ax,WORD PTR [rbp-0x7a]
  20dc6e:	66 89 45 c0          	mov    WORD PTR [rbp-0x40],ax
  20dc72:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  20dc76:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  20dc7a:	48 89 39             	mov    QWORD PTR [rcx],rdi
  20dc7d:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20dc81:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  20dc85:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  20dc89:	48 81 c4 80 00 00 00 	add    rsp,0x80
  20dc90:	5d                   	pop    rbp
  20dc91:	c3                   	ret    
  20dc92:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20dc96:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        self_debug_info = info;
  20dc9a:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  20dc9e:	48 89 05 9b 63 03 00 	mov    QWORD PTR [rip+0x3639b],rax        # 244040 <self_debug_info>
        return info;
  20dca5:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  20dca9:	66 c7 45 b0 00 00    	mov    WORD PTR [rbp-0x50],0x0
  20dcaf:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  20dcb3:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20dcb7:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  20dcbb:	48 89 01             	mov    QWORD PTR [rcx],rax
  20dcbe:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  20dcc2:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20dcc6:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  20dcca:	48 81 c4 80 00 00 00 	add    rsp,0x80
  20dcd1:	5d                   	pop    rbp
  20dcd2:	c3                   	ret    
  20dcd3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20dcda:	84 00 00 00 00 00 

000000000020dce0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.24>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  20dce0:	55                   	push   rbp
  20dce1:	48 89 e5             	mov    rbp,rsp
  20dce4:	48 83 ec 20          	sub    rsp,0x20
  20dce8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
            return std.fmt.format(self, Error, self.writeFn, format, args);
  20dcec:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20dcf0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20dcf4:	48 8b 00             	mov    rax,QWORD PTR [rax]
  20dcf7:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  20dcfb:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  20dcff:	48 89 c2             	mov    rdx,rax
  20dd02:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20dd06:	e8 15 ee 00 00       	call   21cb20 <format.57>
  20dd0b:	66 83 f8 00          	cmp    ax,0x0
  20dd0f:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
  20dd13:	74 0b                	je     20dd20 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.24+0x40>
  20dd15:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  20dd19:	e8 72 df ff ff       	call   20bc90 <__zig_return_error>
  20dd1e:	eb 02                	jmp    20dd22 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.24+0x42>
  20dd20:	eb 00                	jmp    20dd22 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.24+0x42>
  20dd22:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
  20dd26:	48 83 c4 20          	add    rsp,0x20
  20dd2a:	5d                   	pop    rbp
  20dd2b:	c3                   	ret    
  20dd2c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000020dd30 <getDebugInfoAllocator>:

// TODO make thread safe
var debug_info_allocator: ?*mem.Allocator = null;
var debug_info_direct_allocator: std.heap.DirectAllocator = undefined;
var debug_info_arena_allocator: std.heap.ArenaAllocator = undefined;
fn getDebugInfoAllocator() *mem.Allocator {
  20dd30:	55                   	push   rbp
  20dd31:	48 89 e5             	mov    rbp,rsp
    if (debug_info_allocator) |a| return a;
  20dd34:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  20dd3b:	48 83 3d 05 63 03 00 	cmp    QWORD PTR [rip+0x36305],0x0        # 244048 <debug_info_allocator>
  20dd42:	00 
  20dd43:	74 18                	je     20dd5d <getDebugInfoAllocator+0x2d>
  20dd45:	48 8b 05 fc 62 03 00 	mov    rax,QWORD PTR [rip+0x362fc]        # 244048 <debug_info_allocator>
  20dd4c:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  20dd50:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  20dd54:	48 81 c4 80 00 00 00 	add    rsp,0x80
  20dd5b:	5d                   	pop    rbp
  20dd5c:	c3                   	ret    
  20dd5d:	eb 00                	jmp    20dd5f <getDebugInfoAllocator+0x2f>
  20dd5f:	48 8d 7d e0          	lea    rdi,[rbp-0x20]

    debug_info_direct_allocator = std.heap.DirectAllocator.init();
  20dd63:	e8 f8 50 00 00       	call   212e60 <DirectAllocator_init>
  20dd68:	48 8d 7d a0          	lea    rdi,[rbp-0x60]
  20dd6c:	48 8d 35 cd e2 02 00 	lea    rsi,[rip+0x2e2cd]        # 23c040 <debug_info_direct_allocator>
  20dd73:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20dd77:	48 89 05 c2 e2 02 00 	mov    QWORD PTR [rip+0x2e2c2],rax        # 23c040 <debug_info_direct_allocator>
  20dd7e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20dd82:	48 89 05 bf e2 02 00 	mov    QWORD PTR [rip+0x2e2bf],rax        # 23c048 <debug_info_direct_allocator+0x8>
  20dd89:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20dd8d:	48 89 05 bc e2 02 00 	mov    QWORD PTR [rip+0x2e2bc],rax        # 23c050 <debug_info_direct_allocator+0x10>
  20dd94:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20dd98:	48 89 05 b9 e2 02 00 	mov    QWORD PTR [rip+0x2e2b9],rax        # 23c058 <debug_info_direct_allocator+0x18>
    debug_info_arena_allocator = std.heap.ArenaAllocator.init(&debug_info_direct_allocator.allocator);
  20dd9f:	e8 fc 50 00 00       	call   212ea0 <ArenaAllocator_init>
  20dda4:	48 8d 05 b5 e2 02 00 	lea    rax,[rip+0x2e2b5]        # 23c060 <debug_info_arena_allocator>
  20ddab:	48 89 c6             	mov    rsi,rax
  20ddae:	b9 40 00 00 00       	mov    ecx,0x40
  20ddb3:	89 ca                	mov    edx,ecx
  20ddb5:	48 8d 7d a0          	lea    rdi,[rbp-0x60]
  20ddb9:	48 89 7d 90          	mov    QWORD PTR [rbp-0x70],rdi
  20ddbd:	48 89 f7             	mov    rdi,rsi
  20ddc0:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  20ddc4:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  20ddc8:	e8 33 6b 02 00       	call   234900 <memcpy>
    debug_info_allocator = &debug_info_arena_allocator.allocator;
  20ddcd:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  20ddd1:	48 89 05 70 62 03 00 	mov    QWORD PTR [rip+0x36270],rax        # 244048 <debug_info_allocator>
    return &debug_info_arena_allocator.allocator;
  20ddd8:	48 81 c4 80 00 00 00 	add    rsp,0x80
  20dddf:	5d                   	pop    rbp
  20dde0:	c3                   	ret    
  20dde1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20dde8:	0f 1f 84 00 00 00 00 
  20ddef:	00 

000000000020ddf0 <wantTtyColor>:
fn wantTtyColor() bool {
  20ddf0:	55                   	push   rbp
  20ddf1:	48 89 e5             	mov    rbp,rsp
  20ddf4:	48 81 ec 50 02 00 00 	sub    rsp,0x250
  20ddfb:	b0 01                	mov    al,0x1
  20ddfd:	48 8d 35 2e b3 ff ff 	lea    rsi,[rip+0xffffffffffffb32e]        # 209132 <__unnamed_25>
  20de04:	b9 80 00 00 00       	mov    ecx,0x80
  20de09:	89 ca                	mov    edx,ecx
  20de0b:	48 8d bd d8 fd ff ff 	lea    rdi,[rbp-0x228]
  20de12:	4c 8d 85 10 ff ff ff 	lea    r8,[rbp-0xf0]
  20de19:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  20de20:	00 00 00 00 
  20de24:	4c 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],r8
  20de2b:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  20de32:	1e 00 00 00 
    var bytes: [128]u8 = undefined;
  20de36:	88 85 bd fd ff ff    	mov    BYTE PTR [rbp-0x243],al
  20de3c:	e8 bf 6a 02 00       	call   234900 <memcpy>
    const allocator = &std.heap.FixedBufferAllocator.init(bytes[0..]).allocator;
  20de41:	8a 85 bd fd ff ff    	mov    al,BYTE PTR [rbp-0x243]
  20de47:	a8 01                	test   al,0x1
  20de49:	75 67                	jne    20deb2 <wantTtyColor+0xc2>
  20de4b:	eb 55                	jmp    20dea2 <wantTtyColor+0xb2>
  20de4d:	b0 01                	mov    al,0x1
    return if (std.os.getEnvVarOwned(allocator, "ZIG_DEBUG_COLOR")) |_| true else |_| stderr_file.isTty();
  20de4f:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  20de56:	48 89 8d c0 fd ff ff 	mov    QWORD PTR [rbp-0x240],rcx
  20de5d:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
  20de64:	48 89 8d c8 fd ff ff 	mov    QWORD PTR [rbp-0x238],rcx
  20de6b:	88 85 bc fd ff ff    	mov    BYTE PTR [rbp-0x244],al
  20de71:	eb 20                	jmp    20de93 <wantTtyColor+0xa3>
  20de73:	48 8d 3d a6 e1 02 00 	lea    rdi,[rip+0x2e1a6]        # 23c020 <stderr_file>
  20de7a:	66 8b 85 70 fe ff ff 	mov    ax,WORD PTR [rbp-0x190]
  20de81:	66 89 85 be fd ff ff 	mov    WORD PTR [rbp-0x242],ax
  20de88:	e8 b3 ee 00 00       	call   21cd40 <File_isTty>
  20de8d:	88 85 bc fd ff ff    	mov    BYTE PTR [rbp-0x244],al
  20de93:	8a 85 bc fd ff ff    	mov    al,BYTE PTR [rbp-0x244]
  20de99:	48 81 c4 50 02 00 00 	add    rsp,0x250
  20dea0:	5d                   	pop    rbp
  20dea1:	c3                   	ret    
  20dea2:	48 8d 3d 4f 55 03 00 	lea    rdi,[rip+0x3554f]        # 2433f8 <__unnamed_20>
  20dea9:	31 c0                	xor    eax,eax
  20deab:	89 c6                	mov    esi,eax
    const allocator = &std.heap.FixedBufferAllocator.init(bytes[0..]).allocator;
  20dead:	e8 4e d7 ff ff       	call   20b600 <panic>
  20deb2:	48 8d bd b8 fe ff ff 	lea    rdi,[rbp-0x148]
  20deb9:	48 8d b5 e8 fe ff ff 	lea    rsi,[rbp-0x118]
  20dec0:	48 8d 85 d8 fd ff ff 	lea    rax,[rbp-0x228]
  20dec7:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  20dece:	48 c7 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],0x80
  20ded5:	80 00 00 00 
  20ded9:	e8 d2 50 00 00       	call   212fb0 <FixedBufferAllocator_init>
  20dede:	48 8d bd 70 fe ff ff 	lea    rdi,[rbp-0x190]
  20dee5:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  20deec:	48 8d 0d 55 57 03 00 	lea    rcx,[rip+0x35755]        # 243648 <__unnamed_26>
  20def3:	48 8d 85 b8 fe ff ff 	lea    rax,[rbp-0x148]
  20defa:	48 89 85 d0 fd ff ff 	mov    QWORD PTR [rbp-0x230],rax
    return if (std.os.getEnvVarOwned(allocator, "ZIG_DEBUG_COLOR")) |_| true else |_| stderr_file.isTty();
  20df01:	48 8b 95 d0 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x230]
  20df08:	e8 53 ed 00 00       	call   21cc60 <getEnvVarOwned>
  20df0d:	66 83 bd 70 fe ff ff 	cmp    WORD PTR [rbp-0x190],0x0
  20df14:	00 
  20df15:	0f 85 58 ff ff ff    	jne    20de73 <wantTtyColor+0x83>
  20df1b:	e9 2d ff ff ff       	jmp    20de4d <wantTtyColor+0x5d>

000000000020df20 <writeStackTrace>:
pub fn writeStackTrace(stack_trace: *const builtin.StackTrace, out_stream: var, allocator: *mem.Allocator, debug_info: *ElfStackTrace, tty_color: bool) !void {
  20df20:	55                   	push   rbp
  20df21:	48 89 e5             	mov    rbp,rsp
  20df24:	41 56                	push   r14
  20df26:	53                   	push   rbx
  20df27:	48 81 ec c0 00 00 00 	sub    rsp,0xc0
  20df2e:	44 88 c8             	mov    al,r9b
  20df31:	41 b9 aa 00 00 00    	mov    r9d,0xaa
  20df37:	41 ba 08 00 00 00    	mov    r10d,0x8
  20df3d:	45 89 d3             	mov    r11d,r10d
  20df40:	48 8d 5d b0          	lea    rbx,[rbp-0x50]
  20df44:	4c 8d 75 b8          	lea    r14,[rbp-0x48]
  20df48:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  20df4c:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  20df50:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  20df54:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
  20df58:	24 01                	and    al,0x1
  20df5a:	88 45 c7             	mov    BYTE PTR [rbp-0x39],al
    var frame_index: usize = undefined;
  20df5d:	48 89 7d a0          	mov    QWORD PTR [rbp-0x60],rdi
  20df61:	4c 89 f7             	mov    rdi,r14
  20df64:	44 89 ce             	mov    esi,r9d
  20df67:	4c 89 da             	mov    rdx,r11
  20df6a:	48 89 5d 98          	mov    QWORD PTR [rbp-0x68],rbx
  20df6e:	4c 89 5d 90          	mov    QWORD PTR [rbp-0x70],r11
  20df72:	44 89 4d 8c          	mov    DWORD PTR [rbp-0x74],r9d
  20df76:	e8 35 69 02 00       	call   2348b0 <memset>
    var frames_left: usize = undefined;
  20df7b:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  20df7f:	48 89 cf             	mov    rdi,rcx
  20df82:	8b 75 8c             	mov    esi,DWORD PTR [rbp-0x74]
  20df85:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
  20df89:	e8 22 69 02 00       	call   2348b0 <memset>
    if (stack_trace.index < stack_trace.instruction_addresses.len) {
  20df8e:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  20df92:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  20df95:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  20df99:	48 3b 4a 10          	cmp    rcx,QWORD PTR [rdx+0x10]
  20df9d:	73 15                	jae    20dfb4 <writeStackTrace+0x94>
        frame_index = 0;
  20df9f:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
  20dfa6:	00 
        frames_left = stack_trace.index;
  20dfa7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20dfab:	48 8b 00             	mov    rax,QWORD PTR [rax]
  20dfae:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
    if (stack_trace.index < stack_trace.instruction_addresses.len) {
  20dfb2:	eb 23                	jmp    20dfd7 <writeStackTrace+0xb7>
        frame_index = (stack_trace.index + 1) % stack_trace.instruction_addresses.len;
  20dfb4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20dfb8:	48 8b 00             	mov    rax,QWORD PTR [rax]
  20dfbb:	48 83 c0 01          	add    rax,0x1
  20dfbf:	0f 92 c1             	setb   cl
  20dfc2:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  20dfc6:	88 8d 7f ff ff ff    	mov    BYTE PTR [rbp-0x81],cl
  20dfcc:	0f 82 98 00 00 00    	jb     20e06a <writeStackTrace+0x14a>
  20dfd2:	e9 a3 00 00 00       	jmp    20e07a <writeStackTrace+0x15a>
    while (frames_left != 0) : ({
  20dfd7:	eb 00                	jmp    20dfd9 <writeStackTrace+0xb9>
  20dfd9:	48 83 7d b0 00       	cmp    QWORD PTR [rbp-0x50],0x0
  20dfde:	74 76                	je     20e056 <writeStackTrace+0x136>
        const return_address = stack_trace.instruction_addresses[frame_index];
  20dfe0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20dfe4:	48 89 c1             	mov    rcx,rax
  20dfe7:	48 83 c1 08          	add    rcx,0x8
  20dfeb:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  20dfef:	48 3b 50 10          	cmp    rdx,QWORD PTR [rax+0x10]
  20dff3:	48 89 95 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdx
  20dffa:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
  20e001:	0f 82 cf 00 00 00    	jb     20e0d6 <writeStackTrace+0x1b6>
  20e007:	e9 ba 00 00 00       	jmp    20e0c6 <writeStackTrace+0x1a6>
        try printSourceAtAddress(debug_info, out_stream, return_address, tty_color);
  20e00c:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  20e010:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  20e014:	66 89 85 66 ff ff ff 	mov    WORD PTR [rbp-0x9a],ax
  20e01b:	e8 70 dc ff ff       	call   20bc90 <__zig_return_error>
  20e020:	66 8b 85 66 ff ff ff 	mov    ax,WORD PTR [rbp-0x9a]
  20e027:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  20e02e:	5b                   	pop    rbx
  20e02f:	41 5e                	pop    r14
  20e031:	5d                   	pop    rbp
  20e032:	c3                   	ret    
        frames_left -= 1;
  20e033:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20e037:	48 83 e8 01          	sub    rax,0x1
  20e03b:	0f 92 c1             	setb   cl
  20e03e:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  20e045:	88 8d 57 ff ff ff    	mov    BYTE PTR [rbp-0xa9],cl
  20e04b:	0f 82 cf 00 00 00    	jb     20e120 <writeStackTrace+0x200>
  20e051:	e9 da 00 00 00       	jmp    20e130 <writeStackTrace+0x210>
  20e056:	31 c0                	xor    eax,eax
  20e058:	66 89 c1             	mov    cx,ax
pub fn writeStackTrace(stack_trace: *const builtin.StackTrace, out_stream: var, allocator: *mem.Allocator, debug_info: *ElfStackTrace, tty_color: bool) !void {
  20e05b:	66 89 c8             	mov    ax,cx
  20e05e:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  20e065:	5b                   	pop    rbx
  20e066:	41 5e                	pop    r14
  20e068:	5d                   	pop    rbp
  20e069:	c3                   	ret    
  20e06a:	48 8d 3d 57 51 03 00 	lea    rdi,[rip+0x35157]        # 2431c8 <__unnamed_4>
  20e071:	31 c0                	xor    eax,eax
  20e073:	89 c6                	mov    esi,eax
        frame_index = (stack_trace.index + 1) % stack_trace.instruction_addresses.len;
  20e075:	e8 86 d5 ff ff       	call   20b600 <panic>
  20e07a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20e07e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  20e082:	48 83 f8 00          	cmp    rax,0x0
  20e086:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  20e08d:	74 27                	je     20e0b6 <writeStackTrace+0x196>
  20e08f:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  20e093:	31 c9                	xor    ecx,ecx
  20e095:	89 ca                	mov    edx,ecx
  20e097:	48 8b b5 48 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xb8]
  20e09e:	48 f7 f6             	div    rsi
  20e0a1:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
        frames_left = stack_trace.instruction_addresses.len;
  20e0a5:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  20e0a9:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  20e0ad:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
    if (stack_trace.index < stack_trace.instruction_addresses.len) {
  20e0b1:	e9 21 ff ff ff       	jmp    20dfd7 <writeStackTrace+0xb7>
  20e0b6:	48 8d 3d 3b 52 03 00 	lea    rdi,[rip+0x3523b]        # 2432f8 <__unnamed_15>
  20e0bd:	31 c0                	xor    eax,eax
  20e0bf:	89 c6                	mov    esi,eax
        frame_index = (stack_trace.index + 1) % stack_trace.instruction_addresses.len;
  20e0c1:	e8 3a d5 ff ff       	call   20b600 <panic>
  20e0c6:	48 8d 3d 2b 53 03 00 	lea    rdi,[rip+0x3532b]        # 2433f8 <__unnamed_20>
  20e0cd:	31 c0                	xor    eax,eax
  20e0cf:	89 c6                	mov    esi,eax
        const return_address = stack_trace.instruction_addresses[frame_index];
  20e0d1:	e8 2a d5 ff ff       	call   20b600 <panic>
  20e0d6:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  20e0dd:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  20e0e0:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  20e0e7:	48 8b 0c d1          	mov    rcx,QWORD PTR [rcx+rdx*8]
  20e0eb:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
        try printSourceAtAddress(debug_info, out_stream, return_address, tty_color);
  20e0ef:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  20e0f3:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  20e0f7:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  20e0fb:	40 8a 7d c7          	mov    dil,BYTE PTR [rbp-0x39]
  20e0ff:	44 0f b6 c7          	movzx  r8d,dil
  20e103:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  20e107:	e8 64 ec 00 00       	call   21cd70 <printSourceAtAddress>
  20e10c:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  20e110:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  20e115:	0f 85 f1 fe ff ff    	jne    20e00c <writeStackTrace+0xec>
  20e11b:	e9 13 ff ff ff       	jmp    20e033 <writeStackTrace+0x113>
  20e120:	48 8d 3d a1 50 03 00 	lea    rdi,[rip+0x350a1]        # 2431c8 <__unnamed_4>
  20e127:	31 c0                	xor    eax,eax
  20e129:	89 c6                	mov    esi,eax
        frames_left -= 1;
  20e12b:	e8 d0 d4 ff ff       	call   20b600 <panic>
  20e130:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
  20e137:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
        frame_index = (frame_index + 1) % stack_trace.instruction_addresses.len;
  20e13b:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  20e13f:	48 83 c1 01          	add    rcx,0x1
  20e143:	0f 92 c2             	setb   dl
  20e146:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
  20e14d:	88 95 3f ff ff ff    	mov    BYTE PTR [rbp-0xc1],dl
  20e153:	72 02                	jb     20e157 <writeStackTrace+0x237>
  20e155:	eb 10                	jmp    20e167 <writeStackTrace+0x247>
  20e157:	48 8d 3d 6a 50 03 00 	lea    rdi,[rip+0x3506a]        # 2431c8 <__unnamed_4>
  20e15e:	31 c0                	xor    eax,eax
  20e160:	89 c6                	mov    esi,eax
  20e162:	e8 99 d4 ff ff       	call   20b600 <panic>
  20e167:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20e16b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  20e16f:	48 83 f8 00          	cmp    rax,0x0
  20e173:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  20e17a:	74 1e                	je     20e19a <writeStackTrace+0x27a>
  20e17c:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  20e183:	31 c9                	xor    ecx,ecx
  20e185:	89 ca                	mov    edx,ecx
  20e187:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  20e18e:	48 f7 f6             	div    rsi
  20e191:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
    while (frames_left != 0) : ({
  20e195:	e9 3f fe ff ff       	jmp    20dfd9 <writeStackTrace+0xb9>
  20e19a:	48 8d 3d 57 51 03 00 	lea    rdi,[rip+0x35157]        # 2432f8 <__unnamed_15>
  20e1a1:	31 c0                	xor    eax,eax
  20e1a3:	89 c6                	mov    esi,eax
        frame_index = (frame_index + 1) % stack_trace.instruction_addresses.len;
  20e1a5:	e8 56 d4 ff ff       	call   20b600 <panic>
  20e1aa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000020e1b0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.25>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  20e1b0:	55                   	push   rbp
  20e1b1:	48 89 e5             	mov    rbp,rsp
  20e1b4:	48 83 ec 20          	sub    rsp,0x20
  20e1b8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
            return std.fmt.format(self, Error, self.writeFn, format, args);
  20e1bc:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20e1c0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20e1c4:	48 8b 00             	mov    rax,QWORD PTR [rax]
  20e1c7:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  20e1cb:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  20e1cf:	48 89 c2             	mov    rdx,rax
  20e1d2:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20e1d6:	e8 65 75 01 00       	call   225740 <format.94>
  20e1db:	66 83 f8 00          	cmp    ax,0x0
  20e1df:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
  20e1e3:	74 0b                	je     20e1f0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.25+0x40>
  20e1e5:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  20e1e9:	e8 a2 da ff ff       	call   20bc90 <__zig_return_error>
  20e1ee:	eb 02                	jmp    20e1f2 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.25+0x42>
  20e1f0:	eb 00                	jmp    20e1f2 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.25+0x42>
  20e1f2:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
  20e1f6:	48 83 c4 20          	add    rsp,0x20
  20e1fa:	5d                   	pop    rbp
  20e1fb:	c3                   	ret    
  20e1fc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000020e200 <writeCurrentStackTrace>:
pub fn writeCurrentStackTrace(out_stream: var, allocator: *mem.Allocator, debug_info: *ElfStackTrace, tty_color: bool, start_addr: ?usize) !void {
  20e200:	55                   	push   rbp
  20e201:	48 89 e5             	mov    rbp,rsp
  20e204:	53                   	push   rbx
  20e205:	48 81 ec 88 00 00 00 	sub    rsp,0x88
  20e20c:	44 88 c0             	mov    al,r8b
  20e20f:	41 b8 aa 00 00 00    	mov    r8d,0xaa
  20e215:	41 ba 10 00 00 00    	mov    r10d,0x10
  20e21b:	45 89 d3             	mov    r11d,r10d
  20e21e:	48 8d 5d b0          	lea    rbx,[rbp-0x50]
  20e222:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  20e226:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  20e22a:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  20e22e:	24 01                	and    al,0x1
  20e230:	88 45 c7             	mov    BYTE PTR [rbp-0x39],al
    var addr_state: AddressState = undefined;
  20e233:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
  20e237:	48 89 df             	mov    rdi,rbx
  20e23a:	44 89 c6             	mov    esi,r8d
  20e23d:	4c 89 da             	mov    rdx,r11
  20e240:	4c 89 4d 80          	mov    QWORD PTR [rbp-0x80],r9
  20e244:	e8 67 66 02 00       	call   2348b0 <memset>
    if (start_addr) |addr| {
  20e249:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  20e24d:	f6 41 08 01          	test   BYTE PTR [rcx+0x8],0x1
  20e251:	75 02                	jne    20e255 <writeCurrentStackTrace+0x55>
  20e253:	eb 29                	jmp    20e27e <writeCurrentStackTrace+0x7e>
  20e255:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  20e259:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  20e25c:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
        addr_state = AddressState{ .LookingForStartAddress = addr };
  20e260:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  20e264:	c6 45 f0 01          	mov    BYTE PTR [rbp-0x10],0x1
  20e268:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  20e26c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20e270:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
  20e274:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  20e278:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
    if (start_addr) |addr| {
  20e27c:	eb 16                	jmp    20e294 <writeCurrentStackTrace+0x94>
        addr_state = AddressState.NotLookingForStartAddress;
  20e27e:	48 8b 05 2b 20 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff202b]        # 2002b0 <__unnamed_100>
  20e285:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  20e289:	48 8b 05 28 20 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff2028]        # 2002b8 <__unnamed_100+0x8>
  20e290:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
    var fp = @ptrToInt(@frameAddress());
  20e294:	48 89 e8             	mov    rax,rbp
  20e297:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
    while (fp != 0) : (fp = @intToPtr(*const usize, fp).*) {
  20e29b:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
  20e2a0:	0f 84 bf 00 00 00    	je     20e365 <writeCurrentStackTrace+0x165>
        const return_address = @intToPtr(*const usize, fp + @sizeOf(usize)).*;
  20e2a6:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  20e2aa:	48 83 c0 08          	add    rax,0x8
  20e2ae:	0f 92 c1             	setb   cl
  20e2b1:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  20e2b8:	88 8d 77 ff ff ff    	mov    BYTE PTR [rbp-0x89],cl
  20e2be:	0f 82 b3 00 00 00    	jb     20e377 <writeCurrentStackTrace+0x177>
  20e2c4:	e9 be 00 00 00       	jmp    20e387 <writeCurrentStackTrace+0x187>
        switch (addr_state) {
  20e2c9:	eb 3e                	jmp    20e309 <writeCurrentStackTrace+0x109>
            AddressState.LookingForStartAddress => |addr| {
  20e2cb:	8a 45 b8             	mov    al,BYTE PTR [rbp-0x48]
  20e2ce:	f6 d0                	not    al
  20e2d0:	a8 01                	test   al,0x1
  20e2d2:	0f 84 e3 00 00 00    	je     20e3bb <writeCurrentStackTrace+0x1bb>
  20e2d8:	e9 f9 00 00 00       	jmp    20e3d6 <writeCurrentStackTrace+0x1d6>
                    addr_state = AddressState.NotLookingForStartAddress;
  20e2dd:	48 8b 05 cc 1f ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff1fcc]        # 2002b0 <__unnamed_100>
  20e2e4:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  20e2e8:	48 8b 05 c9 1f ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff1fc9]        # 2002b8 <__unnamed_100+0x8>
  20e2ef:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                if (return_address == addr) {
  20e2f3:	eb 02                	jmp    20e2f7 <writeCurrentStackTrace+0xf7>
                    continue;
  20e2f5:	eb 5e                	jmp    20e355 <writeCurrentStackTrace+0x155>
        switch (addr_state) {
  20e2f7:	eb 10                	jmp    20e309 <writeCurrentStackTrace+0x109>
  20e2f9:	48 8d 3d 10 50 03 00 	lea    rdi,[rip+0x35010]        # 243310 <__unnamed_13>
  20e300:	31 c0                	xor    eax,eax
  20e302:	89 c6                	mov    esi,eax
  20e304:	e8 f7 d2 ff ff       	call   20b600 <panic>
        try printSourceAtAddress(debug_info, out_stream, return_address, tty_color);
  20e309:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  20e30d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  20e311:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  20e315:	8a 45 c7             	mov    al,BYTE PTR [rbp-0x39]
  20e318:	44 0f b6 c0          	movzx  r8d,al
  20e31c:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  20e320:	e8 4b ea 00 00       	call   21cd70 <printSourceAtAddress>
  20e325:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
  20e329:	66 83 7d e6 00       	cmp    WORD PTR [rbp-0x1a],0x0
  20e32e:	74 25                	je     20e355 <writeCurrentStackTrace+0x155>
  20e330:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
  20e334:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  20e338:	66 89 85 74 ff ff ff 	mov    WORD PTR [rbp-0x8c],ax
  20e33f:	e8 4c d9 ff ff       	call   20bc90 <__zig_return_error>
  20e344:	66 8b 85 74 ff ff ff 	mov    ax,WORD PTR [rbp-0x8c]
  20e34b:	48 81 c4 88 00 00 00 	add    rsp,0x88
  20e352:	5b                   	pop    rbx
  20e353:	5d                   	pop    rbp
  20e354:	c3                   	ret    
    while (fp != 0) : (fp = @intToPtr(*const usize, fp).*) {
  20e355:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  20e359:	48 8b 00             	mov    rax,QWORD PTR [rax]
  20e35c:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  20e360:	e9 36 ff ff ff       	jmp    20e29b <writeCurrentStackTrace+0x9b>
  20e365:	31 c0                	xor    eax,eax
  20e367:	66 89 c1             	mov    cx,ax
pub fn writeCurrentStackTrace(out_stream: var, allocator: *mem.Allocator, debug_info: *ElfStackTrace, tty_color: bool, start_addr: ?usize) !void {
  20e36a:	66 89 c8             	mov    ax,cx
  20e36d:	48 81 c4 88 00 00 00 	add    rsp,0x88
  20e374:	5b                   	pop    rbx
  20e375:	5d                   	pop    rbp
  20e376:	c3                   	ret    
  20e377:	48 8d 3d 4a 4e 03 00 	lea    rdi,[rip+0x34e4a]        # 2431c8 <__unnamed_4>
  20e37e:	31 c0                	xor    eax,eax
  20e380:	89 c6                	mov    esi,eax
        const return_address = @intToPtr(*const usize, fp + @sizeOf(usize)).*;
  20e382:	e8 79 d2 ff ff       	call   20b600 <panic>
  20e387:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  20e38e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  20e391:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
        switch (addr_state) {
  20e395:	8a 55 b8             	mov    dl,BYTE PTR [rbp-0x48]
  20e398:	84 d2                	test   dl,dl
  20e39a:	88 95 73 ff ff ff    	mov    BYTE PTR [rbp-0x8d],dl
  20e3a0:	0f 85 25 ff ff ff    	jne    20e2cb <writeCurrentStackTrace+0xcb>
  20e3a6:	eb 00                	jmp    20e3a8 <writeCurrentStackTrace+0x1a8>
  20e3a8:	8a 85 73 ff ff ff    	mov    al,BYTE PTR [rbp-0x8d]
  20e3ae:	a8 01                	test   al,0x1
  20e3b0:	0f 84 13 ff ff ff    	je     20e2c9 <writeCurrentStackTrace+0xc9>
  20e3b6:	e9 3e ff ff ff       	jmp    20e2f9 <writeCurrentStackTrace+0xf9>
            AddressState.LookingForStartAddress => |addr| {
  20e3bb:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20e3bf:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
                if (return_address == addr) {
  20e3c3:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  20e3c7:	48 3b 45 90          	cmp    rax,QWORD PTR [rbp-0x70]
  20e3cb:	0f 84 0c ff ff ff    	je     20e2dd <writeCurrentStackTrace+0xdd>
  20e3d1:	e9 1f ff ff ff       	jmp    20e2f5 <writeCurrentStackTrace+0xf5>
  20e3d6:	48 8d 3d 23 52 03 00 	lea    rdi,[rip+0x35223]        # 243600 <__unnamed_29>
  20e3dd:	31 c0                	xor    eax,eax
  20e3df:	89 c6                	mov    esi,eax
            AddressState.LookingForStartAddress => |addr| {
  20e3e1:	e8 1a d2 ff ff       	call   20b600 <panic>
  20e3e6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  20e3ed:	00 00 00 

000000000020e3f0 <format.26>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  20e3f0:	55                   	push   rbp
  20e3f1:	48 89 e5             	mov    rbp,rsp
  20e3f4:	48 83 ec 30          	sub    rsp,0x30
  20e3f8:	48 8d 05 11 50 03 00 	lea    rax,[rip+0x35011]        # 243410 <__unnamed_30>
  20e3ff:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  20e403:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
        try output(context, fmt[start_index..]);
  20e407:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  20e40b:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20e40f:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  20e413:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  20e417:	48 89 c2             	mov    rdx,rax
  20e41a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  20e41e:	ff d0                	call   rax
  20e420:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  20e424:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  20e429:	74 1b                	je     20e446 <format.26+0x56>
  20e42b:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  20e42f:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  20e433:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  20e437:	e8 54 d8 ff ff       	call   20bc90 <__zig_return_error>
  20e43c:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  20e440:	48 83 c4 30          	add    rsp,0x30
  20e444:	5d                   	pop    rbp
  20e445:	c3                   	ret    
  20e446:	31 c0                	xor    eax,eax
  20e448:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  20e44b:	66 89 c8             	mov    ax,cx
  20e44e:	48 83 c4 30          	add    rsp,0x30
  20e452:	5d                   	pop    rbp
  20e453:	c3                   	ret    
  20e454:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20e45b:	00 00 00 00 00 

000000000020e460 <syscall2>:
          [arg1] "{rdi}" (arg1)
        : "rcx", "r11"
    );
}

pub fn syscall2(number: usize, arg1: usize, arg2: usize) usize {
  20e460:	55                   	push   rbp
  20e461:	48 89 e5             	mov    rbp,rsp
  20e464:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  20e468:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  20e46c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    return asm volatile ("syscall"
        : [ret] "={rax}" (-> usize)
        : [number] "{rax}" (number),
  20e470:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
          [arg1] "{rdi}" (arg1),
  20e474:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
          [arg2] "{rsi}" (arg2)
  20e478:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
    return asm volatile ("syscall"
  20e47c:	0f 05                	syscall 
  20e47e:	5d                   	pop    rbp
  20e47f:	c3                   	ret    

000000000020e480 <format.27>:
  20e480:	55                   	push   rbp
  20e481:	48 89 e5             	mov    rbp,rsp
  20e484:	48 83 ec 50          	sub    rsp,0x50
  20e488:	48 8d 05 a1 4f 03 00 	lea    rax,[rip+0x34fa1]        # 243430 <__unnamed_31>
  20e48f:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
  20e493:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  20e497:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  20e49b:	4c 89 45 d0          	mov    QWORD PTR [rbp-0x30],r8
                        try output(context, fmt[start_index..i]);
  20e49f:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  20e4a3:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  20e4a7:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  20e4ab:	48 89 c2             	mov    rdx,rax
  20e4ae:	ff d1                	call   rcx
  20e4b0:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  20e4b4:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  20e4b9:	74 1b                	je     20e4d6 <format.27+0x56>
  20e4bb:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  20e4bf:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20e4c3:	66 89 45 c6          	mov    WORD PTR [rbp-0x3a],ax
  20e4c7:	e8 c4 d7 ff ff       	call   20bc90 <__zig_return_error>
  20e4cc:	66 8b 45 c6          	mov    ax,WORD PTR [rbp-0x3a]
  20e4d0:	48 83 c4 50          	add    rsp,0x50
  20e4d4:	5d                   	pop    rbp
  20e4d5:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  20e4d6:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  20e4da:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  20e4de:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  20e4e2:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20e4e6:	e8 e5 00 00 00       	call   20e5d0 <formatType.28>
  20e4eb:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  20e4ef:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  20e4f4:	74 1b                	je     20e511 <format.27+0x91>
  20e4f6:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  20e4fa:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20e4fe:	66 89 45 c4          	mov    WORD PTR [rbp-0x3c],ax
  20e502:	e8 89 d7 ff ff       	call   20bc90 <__zig_return_error>
  20e507:	66 8b 45 c4          	mov    ax,WORD PTR [rbp-0x3c]
  20e50b:	48 83 c4 50          	add    rsp,0x50
  20e50f:	5d                   	pop    rbp
  20e510:	c3                   	ret    
  20e511:	48 8d 15 30 4f 03 00 	lea    rdx,[rip+0x34f30]        # 243448 <__unnamed_32>
                        try output(context, fmt[start_index..i]);
  20e518:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20e51c:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  20e520:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20e524:	ff d0                	call   rax
  20e526:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  20e52a:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  20e52f:	74 1b                	je     20e54c <format.27+0xcc>
  20e531:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  20e535:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20e539:	66 89 45 c2          	mov    WORD PTR [rbp-0x3e],ax
  20e53d:	e8 4e d7 ff ff       	call   20bc90 <__zig_return_error>
  20e542:	66 8b 45 c2          	mov    ax,WORD PTR [rbp-0x3e]
  20e546:	48 83 c4 50          	add    rsp,0x50
  20e54a:	5d                   	pop    rbp
  20e54b:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  20e54c:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  20e550:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  20e554:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  20e558:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20e55c:	e8 6f 00 00 00       	call   20e5d0 <formatType.28>
  20e561:	66 89 45 f8          	mov    WORD PTR [rbp-0x8],ax
  20e565:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  20e56a:	74 1b                	je     20e587 <format.27+0x107>
  20e56c:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  20e570:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20e574:	66 89 45 c0          	mov    WORD PTR [rbp-0x40],ax
  20e578:	e8 13 d7 ff ff       	call   20bc90 <__zig_return_error>
  20e57d:	66 8b 45 c0          	mov    ax,WORD PTR [rbp-0x40]
  20e581:	48 83 c4 50          	add    rsp,0x50
  20e585:	5d                   	pop    rbp
  20e586:	c3                   	ret    
  20e587:	48 8d 15 d2 4e 03 00 	lea    rdx,[rip+0x34ed2]        # 243460 <__unnamed_33>
        try output(context, fmt[start_index..]);
  20e58e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20e592:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  20e596:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20e59a:	ff d0                	call   rax
  20e59c:	66 89 45 f6          	mov    WORD PTR [rbp-0xa],ax
  20e5a0:	66 83 7d f6 00       	cmp    WORD PTR [rbp-0xa],0x0
  20e5a5:	74 1b                	je     20e5c2 <format.27+0x142>
  20e5a7:	66 8b 45 f6          	mov    ax,WORD PTR [rbp-0xa]
  20e5ab:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20e5af:	66 89 45 be          	mov    WORD PTR [rbp-0x42],ax
  20e5b3:	e8 d8 d6 ff ff       	call   20bc90 <__zig_return_error>
  20e5b8:	66 8b 45 be          	mov    ax,WORD PTR [rbp-0x42]
  20e5bc:	48 83 c4 50          	add    rsp,0x50
  20e5c0:	5d                   	pop    rbp
  20e5c1:	c3                   	ret    
  20e5c2:	31 c0                	xor    eax,eax
  20e5c4:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  20e5c7:	66 89 c8             	mov    ax,cx
  20e5ca:	48 83 c4 50          	add    rsp,0x50
  20e5ce:	5d                   	pop    rbp
  20e5cf:	c3                   	ret    

000000000020e5d0 <formatType.28>:
pub fn formatType(
  20e5d0:	55                   	push   rbp
  20e5d1:	48 89 e5             	mov    rbp,rsp
  20e5d4:	48 83 ec 30          	sub    rsp,0x30
  20e5d8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  20e5dc:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  20e5e0:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return formatValue(value, fmt, context, Errors, output);
  20e5e4:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20e5e8:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  20e5ec:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20e5f0:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  20e5f4:	e8 77 7a 01 00       	call   226070 <formatValue>
  20e5f9:	66 83 f8 00          	cmp    ax,0x0
  20e5fd:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  20e601:	74 0b                	je     20e60e <formatType.28+0x3e>
  20e603:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  20e607:	e8 84 d6 ff ff       	call   20bc90 <__zig_return_error>
  20e60c:	eb 02                	jmp    20e610 <formatType.28+0x40>
  20e60e:	eb 00                	jmp    20e610 <formatType.28+0x40>
  20e610:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  20e614:	48 83 c4 30          	add    rsp,0x30
  20e618:	5d                   	pop    rbp
  20e619:	c3                   	ret    
  20e61a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000020e620 <syscall4>:
          [arg3] "{rdx}" (arg3)
        : "rcx", "r11"
    );
}

pub fn syscall4(number: usize, arg1: usize, arg2: usize, arg3: usize, arg4: usize) usize {
  20e620:	55                   	push   rbp
  20e621:	48 89 e5             	mov    rbp,rsp
  20e624:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  20e628:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  20e62c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  20e630:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  20e634:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
    return asm volatile ("syscall"
        : [ret] "={rax}" (-> usize)
        : [number] "{rax}" (number),
  20e638:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
          [arg1] "{rdi}" (arg1),
  20e63c:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
          [arg2] "{rsi}" (arg2),
  20e640:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
          [arg3] "{rdx}" (arg3),
  20e644:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
          [arg4] "{r10}" (arg4)
  20e648:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
    return asm volatile ("syscall"
  20e64c:	0f 05                	syscall 
  20e64e:	5d                   	pop    rbp
  20e64f:	c3                   	ret    

000000000020e650 <syscall6>:
          [arg5] "{r8}" (arg5)
        : "rcx", "r11"
    );
}

pub fn syscall6(
  20e650:	55                   	push   rbp
  20e651:	48 89 e5             	mov    rbp,rsp
  20e654:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
  20e658:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  20e65c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  20e660:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  20e664:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  20e668:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
  20e66c:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
    arg5: usize,
    arg6: usize,
) usize {
    return asm volatile ("syscall"
        : [ret] "={rax}" (-> usize)
        : [number] "{rax}" (number),
  20e670:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
          [arg1] "{rdi}" (arg1),
  20e674:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
          [arg2] "{rsi}" (arg2),
  20e678:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
          [arg3] "{rdx}" (arg3),
  20e67c:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
          [arg4] "{r10}" (arg4),
  20e680:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
          [arg5] "{r8}" (arg5),
  20e684:	4c 8b 45 d0          	mov    r8,QWORD PTR [rbp-0x30]
          [arg6] "{r9}" (arg6)
  20e688:	4c 8b 4d 10          	mov    r9,QWORD PTR [rbp+0x10]
    return asm volatile ("syscall"
  20e68c:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  20e690:	48 89 c8             	mov    rax,rcx
  20e693:	0f 05                	syscall 
  20e695:	5d                   	pop    rbp
  20e696:	c3                   	ret    
  20e697:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  20e69e:	00 00 

000000000020e6a0 <syscall4.29>:
pub fn syscall4(number: usize, arg1: usize, arg2: usize, arg3: usize, arg4: usize) usize {
  20e6a0:	55                   	push   rbp
  20e6a1:	48 89 e5             	mov    rbp,rsp
  20e6a4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  20e6a8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  20e6ac:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  20e6b0:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  20e6b4:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
        : [number] "{rax}" (number),
  20e6b8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
          [arg1] "{rdi}" (arg1),
  20e6bc:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
          [arg2] "{rsi}" (arg2),
  20e6c0:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
          [arg3] "{rdx}" (arg3),
  20e6c4:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
          [arg4] "{r10}" (arg4)
  20e6c8:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
    return asm volatile ("syscall"
  20e6cc:	0f 05                	syscall 
  20e6ce:	5d                   	pop    rbp
  20e6cf:	c3                   	ret    

000000000020e6d0 <format.30>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  20e6d0:	55                   	push   rbp
  20e6d1:	48 89 e5             	mov    rbp,rsp
  20e6d4:	48 83 ec 40          	sub    rsp,0x40
  20e6d8:	48 8d 05 99 4d 03 00 	lea    rax,[rip+0x34d99]        # 243478 <__unnamed_34>
  20e6df:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  20e6e3:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  20e6e7:	c5 fb 11 45 e0       	vmovsd QWORD PTR [rbp-0x20],xmm0
                        try output(context, fmt[start_index..i]);
  20e6ec:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  20e6f0:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20e6f4:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  20e6f8:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  20e6fc:	48 89 c2             	mov    rdx,rax
  20e6ff:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20e703:	ff d0                	call   rax
  20e705:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  20e709:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  20e70e:	74 1b                	je     20e72b <format.30+0x5b>
  20e710:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  20e714:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  20e718:	66 89 45 ce          	mov    WORD PTR [rbp-0x32],ax
  20e71c:	e8 6f d5 ff ff       	call   20bc90 <__zig_return_error>
  20e721:	66 8b 45 ce          	mov    ax,WORD PTR [rbp-0x32]
  20e725:	48 83 c4 40          	add    rsp,0x40
  20e729:	5d                   	pop    rbp
  20e72a:	c3                   	ret    
                    try formatType(args[next_arg], fmt[s..i], context, Errors, output);
  20e72b:	c5 fb 10 45 e0       	vmovsd xmm0,QWORD PTR [rbp-0x20]
  20e730:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20e734:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  20e738:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  20e73c:	e8 6f 00 00 00       	call   20e7b0 <formatType.31>
  20e741:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  20e745:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  20e74a:	74 1b                	je     20e767 <format.30+0x97>
  20e74c:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  20e750:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  20e754:	66 89 45 cc          	mov    WORD PTR [rbp-0x34],ax
  20e758:	e8 33 d5 ff ff       	call   20bc90 <__zig_return_error>
  20e75d:	66 8b 45 cc          	mov    ax,WORD PTR [rbp-0x34]
  20e761:	48 83 c4 40          	add    rsp,0x40
  20e765:	5d                   	pop    rbp
  20e766:	c3                   	ret    
  20e767:	48 8d 15 22 4d 03 00 	lea    rdx,[rip+0x34d22]        # 243490 <__unnamed_35>
        try output(context, fmt[start_index..]);
  20e76e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20e772:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20e776:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  20e77a:	ff d0                	call   rax
  20e77c:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  20e780:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  20e785:	74 1b                	je     20e7a2 <format.30+0xd2>
  20e787:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  20e78b:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  20e78f:	66 89 45 ca          	mov    WORD PTR [rbp-0x36],ax
  20e793:	e8 f8 d4 ff ff       	call   20bc90 <__zig_return_error>
  20e798:	66 8b 45 ca          	mov    ax,WORD PTR [rbp-0x36]
  20e79c:	48 83 c4 40          	add    rsp,0x40
  20e7a0:	5d                   	pop    rbp
  20e7a1:	c3                   	ret    
  20e7a2:	31 c0                	xor    eax,eax
  20e7a4:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  20e7a7:	66 89 c8             	mov    ax,cx
  20e7aa:	48 83 c4 40          	add    rsp,0x40
  20e7ae:	5d                   	pop    rbp
  20e7af:	c3                   	ret    

000000000020e7b0 <formatType.31>:
pub fn formatType(
  20e7b0:	55                   	push   rbp
  20e7b1:	48 89 e5             	mov    rbp,rsp
  20e7b4:	48 83 ec 30          	sub    rsp,0x30
  20e7b8:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
  20e7bd:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  20e7c1:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
            return formatValue(value, fmt, context, Errors, output);
  20e7c5:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  20e7ca:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20e7ce:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  20e7d2:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  20e7d6:	e8 e5 78 01 00       	call   2260c0 <formatValue.96>
  20e7db:	66 83 f8 00          	cmp    ax,0x0
  20e7df:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  20e7e3:	74 0b                	je     20e7f0 <formatType.31+0x40>
  20e7e5:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  20e7e9:	e8 a2 d4 ff ff       	call   20bc90 <__zig_return_error>
  20e7ee:	eb 02                	jmp    20e7f2 <formatType.31+0x42>
  20e7f0:	eb 00                	jmp    20e7f2 <formatType.31+0x42>
  20e7f2:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  20e7f6:	48 83 c4 30          	add    rsp,0x30
  20e7fa:	5d                   	pop    rbp
  20e7fb:	c3                   	ret    
  20e7fc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000020e800 <blockAppSignals>:

fn blockAllSignals(set: *sigset_t) void {
    _ = syscall4(SYS_rt_sigprocmask, SIG_BLOCK, @ptrToInt(&all_mask), @ptrToInt(set), NSIG / 8);
}

fn blockAppSignals(set: *sigset_t) void {
  20e800:	55                   	push   rbp
  20e801:	48 89 e5             	mov    rbp,rsp
  20e804:	48 83 ec 20          	sub    rsp,0x20
  20e808:	b8 0e 00 00 00       	mov    eax,0xe
  20e80d:	89 c1                	mov    ecx,eax
  20e80f:	31 c0                	xor    eax,eax
  20e811:	89 c6                	mov    esi,eax
  20e813:	48 8d 15 26 24 ff ff 	lea    rdx,[rip+0xffffffffffff2426]        # 200c40 <app_mask>
  20e81a:	b8 08 00 00 00       	mov    eax,0x8
  20e81f:	41 89 c0             	mov    r8d,eax
  20e822:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    _ = syscall4(SYS_rt_sigprocmask, SIG_BLOCK, @ptrToInt(&app_mask), @ptrToInt(set), NSIG / 8);
  20e826:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  20e82a:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  20e82e:	48 89 cf             	mov    rdi,rcx
  20e831:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  20e835:	e8 66 fe ff ff       	call   20e6a0 <syscall4.29>
fn blockAppSignals(set: *sigset_t) void {
  20e83a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  20e83e:	48 83 c4 20          	add    rsp,0x20
  20e842:	5d                   	pop    rbp
  20e843:	c3                   	ret    
  20e844:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20e84b:	00 00 00 00 00 

000000000020e850 <syscall0>:
pub fn syscall0(number: usize) usize {
  20e850:	55                   	push   rbp
  20e851:	48 89 e5             	mov    rbp,rsp
  20e854:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
        : [number] "{rax}" (number)
  20e858:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    return asm volatile ("syscall"
  20e85c:	0f 05                	syscall 
  20e85e:	5d                   	pop    rbp
  20e85f:	c3                   	ret    

000000000020e860 <restoreSignals>:
}

fn restoreSignals(set: *sigset_t) void {
  20e860:	55                   	push   rbp
  20e861:	48 89 e5             	mov    rbp,rsp
  20e864:	48 83 ec 20          	sub    rsp,0x20
  20e868:	b8 0e 00 00 00       	mov    eax,0xe
  20e86d:	89 c1                	mov    ecx,eax
  20e86f:	b8 02 00 00 00       	mov    eax,0x2
  20e874:	89 c6                	mov    esi,eax
  20e876:	31 c0                	xor    eax,eax
  20e878:	89 c2                	mov    edx,eax
  20e87a:	b8 08 00 00 00       	mov    eax,0x8
  20e87f:	41 89 c0             	mov    r8d,eax
  20e882:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    _ = syscall4(SYS_rt_sigprocmask, SIG_SETMASK, @ptrToInt(set), 0, NSIG / 8);
  20e886:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  20e88a:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  20e88e:	48 89 cf             	mov    rdi,rcx
  20e891:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  20e895:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  20e899:	48 89 ca             	mov    rdx,rcx
  20e89c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20e8a0:	e8 fb fd ff ff       	call   20e6a0 <syscall4.29>
fn restoreSignals(set: *sigset_t) void {
  20e8a5:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  20e8a9:	48 83 c4 20          	add    rsp,0x20
  20e8ad:	5d                   	pop    rbp
  20e8ae:	c3                   	ret    
  20e8af:	90                   	nop

000000000020e8b0 <File_write>:
        }
    }

    pub const WriteError = os.WindowsWriteError || os.PosixWriteError;

    pub fn write(self: *File, bytes: []const u8) WriteError!void {
  20e8b0:	55                   	push   rbp
  20e8b1:	48 89 e5             	mov    rbp,rsp
  20e8b4:	48 83 ec 20          	sub    rsp,0x20
  20e8b8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
        if (is_posix) {
            try os.posixWrite(self.handle, bytes);
  20e8bc:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20e8c0:	8b 36                	mov    esi,DWORD PTR [rsi]
  20e8c2:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  20e8c6:	e8 35 00 00 00       	call   20e900 <posixWrite>
  20e8cb:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  20e8cf:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  20e8d4:	74 1b                	je     20e8f1 <File_write+0x41>
  20e8d6:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  20e8da:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  20e8de:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
  20e8e2:	e8 a9 d3 ff ff       	call   20bc90 <__zig_return_error>
  20e8e7:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
  20e8eb:	48 83 c4 20          	add    rsp,0x20
  20e8ef:	5d                   	pop    rbp
  20e8f0:	c3                   	ret    
  20e8f1:	31 c0                	xor    eax,eax
  20e8f3:	66 89 c1             	mov    cx,ax
    pub fn write(self: *File, bytes: []const u8) WriteError!void {
  20e8f6:	66 89 c8             	mov    ax,cx
  20e8f9:	48 83 c4 20          	add    rsp,0x20
  20e8fd:	5d                   	pop    rbp
  20e8fe:	c3                   	ret    
  20e8ff:	90                   	nop

000000000020e900 <posixWrite>:
pub fn posixWrite(fd: i32, bytes: []const u8) !void {
  20e900:	55                   	push   rbp
  20e901:	48 89 e5             	mov    rbp,rsp
  20e904:	48 81 ec d0 00 00 00 	sub    rsp,0xd0
  20e90b:	89 75 fc             	mov    DWORD PTR [rbp-0x4],esi
    var index: usize = 0;
  20e90e:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  20e915:	00 
  20e916:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
  20e91a:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
    while (index < bytes.len) {
  20e91e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20e922:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  20e926:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  20e92a:	0f 83 08 02 00 00    	jae    20eb38 <posixWrite+0x238>
        const amt_to_write = math.min(bytes.len - index, usize(max_bytes_len));
  20e930:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20e934:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  20e938:	48 2b 4d f0          	sub    rcx,QWORD PTR [rbp-0x10]
  20e93c:	0f 92 c2             	setb   dl
  20e93f:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
  20e943:	88 55 bf             	mov    BYTE PTR [rbp-0x41],dl
  20e946:	0f 82 fd 01 00 00    	jb     20eb49 <posixWrite+0x249>
  20e94c:	e9 08 02 00 00       	jmp    20eb59 <posixWrite+0x259>
            return switch (write_err) {
  20e951:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  20e955:	48 89 c1             	mov    rcx,rax
  20e958:	48 83 e9 01          	sub    rcx,0x1
  20e95c:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  20e960:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  20e964:	0f 84 71 01 00 00    	je     20eadb <posixWrite+0x1db>
  20e96a:	eb 00                	jmp    20e96c <posixWrite+0x6c>
  20e96c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20e970:	48 83 e8 04          	sub    rax,0x4
  20e974:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  20e978:	0f 84 ed 00 00 00    	je     20ea6b <posixWrite+0x16b>
  20e97e:	eb 00                	jmp    20e980 <posixWrite+0x80>
  20e980:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20e984:	48 83 e8 05          	sub    rax,0x5
  20e988:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  20e98c:	0f 84 2f 01 00 00    	je     20eac1 <posixWrite+0x1c1>
  20e992:	eb 00                	jmp    20e994 <posixWrite+0x94>
  20e994:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20e998:	48 83 e8 09          	sub    rax,0x9
  20e99c:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  20e9a0:	0f 84 e7 00 00 00    	je     20ea8d <posixWrite+0x18d>
  20e9a6:	eb 00                	jmp    20e9a8 <posixWrite+0xa8>
  20e9a8:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20e9ac:	48 83 e8 0b          	sub    rax,0xb
  20e9b0:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  20e9b4:	0f 84 c6 00 00 00    	je     20ea80 <posixWrite+0x180>
  20e9ba:	eb 00                	jmp    20e9bc <posixWrite+0xbc>
  20e9bc:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20e9c0:	48 83 e8 0e          	sub    rax,0xe
  20e9c4:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  20e9c8:	0f 84 a2 00 00 00    	je     20ea70 <posixWrite+0x170>
  20e9ce:	eb 00                	jmp    20e9d0 <posixWrite+0xd0>
  20e9d0:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20e9d4:	48 83 e8 16          	sub    rax,0x16
  20e9d8:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  20e9df:	0f 84 8b 00 00 00    	je     20ea70 <posixWrite+0x170>
  20e9e5:	eb 00                	jmp    20e9e7 <posixWrite+0xe7>
  20e9e7:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20e9eb:	48 83 e8 1b          	sub    rax,0x1b
  20e9ef:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  20e9f6:	0f 84 b8 00 00 00    	je     20eab4 <posixWrite+0x1b4>
  20e9fc:	eb 00                	jmp    20e9fe <posixWrite+0xfe>
  20e9fe:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20ea02:	48 83 e8 1c          	sub    rax,0x1c
  20ea06:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  20ea0d:	0f 84 bb 00 00 00    	je     20eace <posixWrite+0x1ce>
  20ea13:	eb 00                	jmp    20ea15 <posixWrite+0x115>
  20ea15:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20ea19:	48 83 e8 20          	sub    rax,0x20
  20ea1d:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  20ea24:	0f 84 be 00 00 00    	je     20eae8 <posixWrite+0x1e8>
  20ea2a:	eb 00                	jmp    20ea2c <posixWrite+0x12c>
  20ea2c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20ea30:	48 83 e8 59          	sub    rax,0x59
  20ea34:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  20ea3b:	74 5d                	je     20ea9a <posixWrite+0x19a>
  20ea3d:	eb 00                	jmp    20ea3f <posixWrite+0x13f>
  20ea3f:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20ea43:	48 83 e8 7a          	sub    rax,0x7a
  20ea47:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
  20ea4e:	74 57                	je     20eaa7 <posixWrite+0x1a7>
  20ea50:	eb 00                	jmp    20ea52 <posixWrite+0x152>
                else => unexpectedErrorPosix(write_err),
  20ea52:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  20ea56:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  20ea5a:	e8 c1 e6 ff ff       	call   20d120 <unexpectedErrorPosix>
            return switch (write_err) {
  20ea5f:	66 89 85 4e ff ff ff 	mov    WORD PTR [rbp-0xb2],ax
  20ea66:	e9 8a 00 00 00       	jmp    20eaf5 <posixWrite+0x1f5>
                posix.EINTR => continue,
  20ea6b:	e9 ae fe ff ff       	jmp    20e91e <posixWrite+0x1e>
  20ea70:	48 8d 3d 99 48 03 00 	lea    rdi,[rip+0x34899]        # 243310 <__unnamed_13>
  20ea77:	31 c0                	xor    eax,eax
  20ea79:	89 c6                	mov    esi,eax
                posix.EINVAL, posix.EFAULT => unreachable,
  20ea7b:	e8 80 cb ff ff       	call   20b600 <panic>
  20ea80:	66 b8 09 00          	mov    ax,0x9
            return switch (write_err) {
  20ea84:	66 89 85 4e ff ff ff 	mov    WORD PTR [rbp-0xb2],ax
  20ea8b:	eb 68                	jmp    20eaf5 <posixWrite+0x1f5>
  20ea8d:	66 b8 0a 00          	mov    ax,0xa
  20ea91:	66 89 85 4e ff ff ff 	mov    WORD PTR [rbp-0xb2],ax
  20ea98:	eb 5b                	jmp    20eaf5 <posixWrite+0x1f5>
  20ea9a:	66 b8 0b 00          	mov    ax,0xb
  20ea9e:	66 89 85 4e ff ff ff 	mov    WORD PTR [rbp-0xb2],ax
  20eaa5:	eb 4e                	jmp    20eaf5 <posixWrite+0x1f5>
  20eaa7:	66 b8 0c 00          	mov    ax,0xc
  20eaab:	66 89 85 4e ff ff ff 	mov    WORD PTR [rbp-0xb2],ax
  20eab2:	eb 41                	jmp    20eaf5 <posixWrite+0x1f5>
  20eab4:	66 b8 0d 00          	mov    ax,0xd
  20eab8:	66 89 85 4e ff ff ff 	mov    WORD PTR [rbp-0xb2],ax
  20eabf:	eb 34                	jmp    20eaf5 <posixWrite+0x1f5>
  20eac1:	66 b8 0e 00          	mov    ax,0xe
  20eac5:	66 89 85 4e ff ff ff 	mov    WORD PTR [rbp-0xb2],ax
  20eacc:	eb 27                	jmp    20eaf5 <posixWrite+0x1f5>
  20eace:	66 b8 0f 00          	mov    ax,0xf
  20ead2:	66 89 85 4e ff ff ff 	mov    WORD PTR [rbp-0xb2],ax
  20ead9:	eb 1a                	jmp    20eaf5 <posixWrite+0x1f5>
  20eadb:	66 b8 10 00          	mov    ax,0x10
  20eadf:	66 89 85 4e ff ff ff 	mov    WORD PTR [rbp-0xb2],ax
  20eae6:	eb 0d                	jmp    20eaf5 <posixWrite+0x1f5>
  20eae8:	66 b8 08 00          	mov    ax,0x8
  20eaec:	66 89 85 4e ff ff ff 	mov    WORD PTR [rbp-0xb2],ax
  20eaf3:	eb 00                	jmp    20eaf5 <posixWrite+0x1f5>
  20eaf5:	66 8b 85 4e ff ff ff 	mov    ax,WORD PTR [rbp-0xb2]
  20eafc:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  20eb00:	66 89 85 4c ff ff ff 	mov    WORD PTR [rbp-0xb4],ax
  20eb07:	e8 84 d1 ff ff       	call   20bc90 <__zig_return_error>
  20eb0c:	66 8b 85 4c ff ff ff 	mov    ax,WORD PTR [rbp-0xb4]
  20eb13:	48 81 c4 d0 00 00 00 	add    rsp,0xd0
  20eb1a:	5d                   	pop    rbp
  20eb1b:	c3                   	ret    
        index += rc;
  20eb1c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20eb20:	48 03 45 e0          	add    rax,QWORD PTR [rbp-0x20]
  20eb24:	0f 92 c1             	setb   cl
  20eb27:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  20eb2e:	88 8d 3f ff ff ff    	mov    BYTE PTR [rbp-0xc1],cl
  20eb34:	72 6f                	jb     20eba5 <posixWrite+0x2a5>
  20eb36:	eb 7d                	jmp    20ebb5 <posixWrite+0x2b5>
  20eb38:	31 c0                	xor    eax,eax
  20eb3a:	66 89 c1             	mov    cx,ax
pub fn posixWrite(fd: i32, bytes: []const u8) !void {
  20eb3d:	66 89 c8             	mov    ax,cx
  20eb40:	48 81 c4 d0 00 00 00 	add    rsp,0xd0
  20eb47:	5d                   	pop    rbp
  20eb48:	c3                   	ret    
  20eb49:	48 8d 3d 78 46 03 00 	lea    rdi,[rip+0x34678]        # 2431c8 <__unnamed_4>
  20eb50:	31 c0                	xor    eax,eax
  20eb52:	89 c6                	mov    esi,eax
        const amt_to_write = math.min(bytes.len - index, usize(max_bytes_len));
  20eb54:	e8 a7 ca ff ff       	call   20b600 <panic>
  20eb59:	b8 00 f0 ff 7f       	mov    eax,0x7ffff000
  20eb5e:	89 c6                	mov    esi,eax
  20eb60:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  20eb64:	e8 a7 75 01 00       	call   226110 <min>
  20eb69:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
        const rc = posix.write(fd, bytes.ptr + index, amt_to_write);
  20eb6d:	8b 7d fc             	mov    edi,DWORD PTR [rbp-0x4]
  20eb70:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20eb74:	48 8b 30             	mov    rsi,QWORD PTR [rax]
  20eb77:	48 03 75 f0          	add    rsi,QWORD PTR [rbp-0x10]
  20eb7b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  20eb7f:	e8 bc 75 01 00       	call   226140 <write>
  20eb84:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
        const write_err = posix.getErrno(rc);
  20eb88:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  20eb8c:	e8 ef e4 ff ff       	call   20d080 <getErrno>
  20eb91:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
        if (write_err > 0) {
  20eb95:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  20eb9a:	0f 87 b1 fd ff ff    	ja     20e951 <posixWrite+0x51>
  20eba0:	e9 77 ff ff ff       	jmp    20eb1c <posixWrite+0x21c>
  20eba5:	48 8d 3d 1c 46 03 00 	lea    rdi,[rip+0x3461c]        # 2431c8 <__unnamed_4>
  20ebac:	31 c0                	xor    eax,eax
  20ebae:	89 c6                	mov    esi,eax
        index += rc;
  20ebb0:	e8 4b ca ff ff       	call   20b600 <panic>
  20ebb5:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  20ebbc:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    while (index < bytes.len) {
  20ebc0:	e9 59 fd ff ff       	jmp    20e91e <posixWrite+0x1e>
  20ebc5:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20ebcc:	00 00 00 00 

000000000020ebd0 <openSelfDebugInfo>:
pub fn openSelfDebugInfo(allocator: *mem.Allocator) !*ElfStackTrace {
  20ebd0:	55                   	push   rbp
  20ebd1:	48 89 e5             	mov    rbp,rsp
  20ebd4:	48 81 ec 90 03 00 00 	sub    rsp,0x390
  20ebdb:	48 89 f8             	mov    rax,rdi
  20ebde:	48 8d 4d e0          	lea    rcx,[rbp-0x20]
  20ebe2:	48 89 95 70 fd ff ff 	mov    QWORD PTR [rbp-0x290],rdx
            const st = try allocator.create(ElfStackTrace{
  20ebe9:	48 8b 95 70 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x290]
                .abbrev_table_list = ArrayList(AbbrevTableHeader).init(allocator),
  20ebf0:	4c 8b 85 70 fd ff ff 	mov    r8,QWORD PTR [rbp-0x290]
  20ebf7:	48 89 bd 60 fd ff ff 	mov    QWORD PTR [rbp-0x2a0],rdi
  20ebfe:	48 89 cf             	mov    rdi,rcx
  20ec01:	48 89 b5 58 fd ff ff 	mov    QWORD PTR [rbp-0x2a8],rsi
  20ec08:	4c 89 c6             	mov    rsi,r8
  20ec0b:	48 89 85 50 fd ff ff 	mov    QWORD PTR [rbp-0x2b0],rax
  20ec12:	48 89 95 48 fd ff ff 	mov    QWORD PTR [rbp-0x2b8],rdx
  20ec19:	e8 82 0a 00 00       	call   20f6a0 <AlignedArrayList(AbbrevTableHeader,8)_init>
  20ec1e:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
                .compile_unit_list = ArrayList(CompileUnit).init(allocator),
  20ec22:	48 8b b5 70 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x290]
  20ec29:	e8 d2 0a 00 00       	call   20f700 <AlignedArrayList(CompileUnit,2)_init>
  20ec2e:	48 8d bd e8 fe ff ff 	lea    rdi,[rbp-0x118]
  20ec35:	48 8d 85 f8 fe ff ff 	lea    rax,[rbp-0x108]
  20ec3c:	48 8d 15 5d a0 ff ff 	lea    rdx,[rip+0xffffffffffffa05d]        # 208ca0 <__unnamed_36>
  20ec43:	41 b9 58 00 00 00    	mov    r9d,0x58
  20ec49:	44 89 ce             	mov    esi,r9d
            const st = try allocator.create(ElfStackTrace{
  20ec4c:	44 8b 0d cd bc ff ff 	mov    r9d,DWORD PTR [rip+0xffffffffffffbccd]        # 20a920 <__unnamed_37>
  20ec53:	44 89 8d f8 fe ff ff 	mov    DWORD PTR [rbp-0x108],r9d
  20ec5a:	49 89 c0             	mov    r8,rax
  20ec5d:	49 83 c0 08          	add    r8,0x8
  20ec61:	48 89 bd 40 fd ff ff 	mov    QWORD PTR [rbp-0x2c0],rdi
  20ec68:	4c 89 c7             	mov    rdi,r8
  20ec6b:	48 89 b5 38 fd ff ff 	mov    QWORD PTR [rbp-0x2c8],rsi
  20ec72:	48 89 d6             	mov    rsi,rdx
  20ec75:	48 8b 95 38 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2c8]
  20ec7c:	48 89 8d 30 fd ff ff 	mov    QWORD PTR [rbp-0x2d0],rcx
  20ec83:	48 89 85 28 fd ff ff 	mov    QWORD PTR [rbp-0x2d8],rax
  20ec8a:	e8 71 5c 02 00       	call   234900 <memcpy>
  20ec8f:	48 8b 85 30 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2d0]
  20ec96:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  20ec9d:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  20eca4:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  20ecab:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  20ecb2:	48 c7 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],0x0
  20ecb9:	00 00 00 00 
  20ecbd:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  20ecc1:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
  20ecc5:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20ecc9:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
  20eccd:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  20ecd1:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
  20ecd5:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  20ecd9:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
  20ecdd:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  20ece1:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
  20ece5:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  20ece9:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  20eced:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  20ecf1:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
  20ecf5:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  20ecf9:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
  20ecfd:	48 8b bd 40 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2c0]
  20ed04:	48 8b b5 58 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a8]
  20ed0b:	48 8b 95 48 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2b8]
  20ed12:	48 8b 8d 28 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2d8]
  20ed19:	e8 42 0a 00 00       	call   20f760 <Allocator_create>
  20ed1e:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  20ed25:	00 
  20ed26:	74 54                	je     20ed7c <openSelfDebugInfo+0x1ac>
  20ed28:	66 8b 85 e8 fe ff ff 	mov    ax,WORD PTR [rbp-0x118]
  20ed2f:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20ed36:	66 89 85 26 fd ff ff 	mov    WORD PTR [rbp-0x2da],ax
  20ed3d:	e8 4e cf ff ff       	call   20bc90 <__zig_return_error>
  20ed42:	66 8b 85 26 fd ff ff 	mov    ax,WORD PTR [rbp-0x2da]
  20ed49:	66 89 85 c8 fe ff ff 	mov    WORD PTR [rbp-0x138],ax
  20ed50:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  20ed57:	48 8b 8d 60 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2a0]
  20ed5e:	48 89 39             	mov    QWORD PTR [rcx],rdi
  20ed61:	48 8b bd d0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x130]
  20ed68:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  20ed6c:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  20ed73:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20ed7a:	5d                   	pop    rbp
  20ed7b:	c3                   	ret    
  20ed7c:	48 8d bd c0 fe ff ff 	lea    rdi,[rbp-0x140]
  20ed83:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  20ed8a:	48 89 85 68 fd ff ff 	mov    QWORD PTR [rbp-0x298],rax
            st.self_exe_file = try os.openSelfExe();
  20ed91:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  20ed98:	48 8b b5 58 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a8]
  20ed9f:	48 89 85 18 fd ff ff 	mov    QWORD PTR [rbp-0x2e8],rax
  20eda6:	e8 c5 0a 00 00       	call   20f870 <openSelfExe>
  20edab:	66 83 bd c0 fe ff ff 	cmp    WORD PTR [rbp-0x140],0x0
  20edb2:	00 
  20edb3:	74 67                	je     20ee1c <openSelfDebugInfo+0x24c>
            errdefer allocator.destroy(st);
  20edb5:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  20edbc:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20edc3:	e8 f8 0b 00 00       	call   20f9c0 <Allocator_destroy>
            st.self_exe_file = try os.openSelfExe();
  20edc8:	66 8b 85 c0 fe ff ff 	mov    ax,WORD PTR [rbp-0x140]
  20edcf:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20edd6:	66 89 85 16 fd ff ff 	mov    WORD PTR [rbp-0x2ea],ax
  20eddd:	e8 ae ce ff ff       	call   20bc90 <__zig_return_error>
  20ede2:	66 8b 85 16 fd ff ff 	mov    ax,WORD PTR [rbp-0x2ea]
  20ede9:	66 89 85 a8 fe ff ff 	mov    WORD PTR [rbp-0x158],ax
  20edf0:	48 8b b5 a8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x158]
  20edf7:	48 8b bd 60 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a0]
  20edfe:	48 89 37             	mov    QWORD PTR [rdi],rsi
  20ee01:	48 8b b5 b0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x150]
  20ee08:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  20ee0c:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  20ee13:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20ee1a:	5d                   	pop    rbp
  20ee1b:	c3                   	ret    
  20ee1c:	8b 85 c4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x13c]
  20ee22:	48 8b 8d 18 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2e8]
  20ee29:	89 01                	mov    DWORD PTR [rcx],eax
            try st.elf.openFile(allocator, &st.self_exe_file);
  20ee2b:	48 8b 95 68 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x298]
  20ee32:	48 83 c2 08          	add    rdx,0x8
  20ee36:	48 8b b5 70 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x290]
  20ee3d:	48 8b 8d 68 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x298]
  20ee44:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20ee4b:	48 89 b5 08 fd ff ff 	mov    QWORD PTR [rbp-0x2f8],rsi
  20ee52:	48 89 d6             	mov    rsi,rdx
  20ee55:	48 8b 95 08 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2f8]
  20ee5c:	e8 cf 0b 00 00       	call   20fa30 <Elf_openFile>
  20ee61:	66 89 85 a6 fe ff ff 	mov    WORD PTR [rbp-0x15a],ax
  20ee68:	66 83 bd a6 fe ff ff 	cmp    WORD PTR [rbp-0x15a],0x0
  20ee6f:	00 
  20ee70:	74 73                	je     20eee5 <openSelfDebugInfo+0x315>
            errdefer st.self_exe_file.close();
  20ee72:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  20ee79:	e8 52 30 00 00       	call   211ed0 <File_close>
            errdefer allocator.destroy(st);
  20ee7e:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  20ee85:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20ee8c:	e8 2f 0b 00 00       	call   20f9c0 <Allocator_destroy>
            try st.elf.openFile(allocator, &st.self_exe_file);
  20ee91:	66 8b 85 a6 fe ff ff 	mov    ax,WORD PTR [rbp-0x15a]
  20ee98:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20ee9f:	66 89 85 06 fd ff ff 	mov    WORD PTR [rbp-0x2fa],ax
  20eea6:	e8 e5 cd ff ff       	call   20bc90 <__zig_return_error>
  20eeab:	66 8b 85 06 fd ff ff 	mov    ax,WORD PTR [rbp-0x2fa]
  20eeb2:	66 89 85 90 fe ff ff 	mov    WORD PTR [rbp-0x170],ax
  20eeb9:	48 8b b5 90 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x170]
  20eec0:	48 8b bd 60 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a0]
  20eec7:	48 89 37             	mov    QWORD PTR [rdi],rsi
  20eeca:	48 8b b5 98 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x168]
  20eed1:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  20eed5:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  20eedc:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20eee3:	5d                   	pop    rbp
  20eee4:	c3                   	ret    
  20eee5:	48 8d bd 80 fe ff ff 	lea    rdi,[rbp-0x180]
  20eeec:	48 8d 0d dd 45 03 00 	lea    rcx,[rip+0x345dd]        # 2434d0 <__unnamed_38>
            st.debug_info = (try st.elf.findSection(".debug_info")) orelse return error.MissingDebugInfo;
  20eef3:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  20eefa:	48 83 c0 60          	add    rax,0x60
  20eefe:	48 8b 95 68 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x298]
  20ef05:	48 83 c2 08          	add    rdx,0x8
  20ef09:	48 8b b5 58 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a8]
  20ef10:	48 89 85 f8 fc ff ff 	mov    QWORD PTR [rbp-0x308],rax
  20ef17:	e8 e4 2f 00 00       	call   211f00 <Elf_findSection>
  20ef1c:	66 83 bd 80 fe ff ff 	cmp    WORD PTR [rbp-0x180],0x0
  20ef23:	00 
  20ef24:	0f 84 86 00 00 00    	je     20efb0 <openSelfDebugInfo+0x3e0>
            errdefer st.elf.close();
  20ef2a:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  20ef31:	48 83 c0 08          	add    rax,0x8
  20ef35:	48 89 c7             	mov    rdi,rax
  20ef38:	e8 c3 33 00 00       	call   212300 <Elf_close>
            errdefer st.self_exe_file.close();
  20ef3d:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  20ef44:	e8 87 2f 00 00       	call   211ed0 <File_close>
            errdefer allocator.destroy(st);
  20ef49:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  20ef50:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20ef57:	e8 64 0a 00 00       	call   20f9c0 <Allocator_destroy>
            st.debug_info = (try st.elf.findSection(".debug_info")) orelse return error.MissingDebugInfo;
  20ef5c:	66 8b 8d 80 fe ff ff 	mov    cx,WORD PTR [rbp-0x180]
  20ef63:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20ef6a:	66 89 8d f6 fc ff ff 	mov    WORD PTR [rbp-0x30a],cx
  20ef71:	e8 1a cd ff ff       	call   20bc90 <__zig_return_error>
  20ef76:	66 8b 8d f6 fc ff ff 	mov    cx,WORD PTR [rbp-0x30a]
  20ef7d:	66 89 8d 60 fe ff ff 	mov    WORD PTR [rbp-0x1a0],cx
  20ef84:	48 8b 85 60 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a0]
  20ef8b:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  20ef92:	48 89 06             	mov    QWORD PTR [rsi],rax
  20ef95:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
  20ef9c:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  20efa0:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  20efa7:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20efae:	5d                   	pop    rbp
  20efaf:	c3                   	ret    
  20efb0:	48 8d 85 80 fe ff ff 	lea    rax,[rbp-0x180]
  20efb7:	48 83 c0 08          	add    rax,0x8
  20efbb:	48 83 bd 88 fe ff ff 	cmp    QWORD PTR [rbp-0x178],0x0
  20efc2:	00 
  20efc3:	48 89 85 e8 fc ff ff 	mov    QWORD PTR [rbp-0x318],rax
  20efca:	75 6a                	jne    20f036 <openSelfDebugInfo+0x466>
            errdefer st.elf.close();
  20efcc:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  20efd3:	48 83 c0 08          	add    rax,0x8
  20efd7:	48 89 c7             	mov    rdi,rax
  20efda:	e8 21 33 00 00       	call   212300 <Elf_close>
            errdefer st.self_exe_file.close();
  20efdf:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  20efe6:	e8 e5 2e 00 00       	call   211ed0 <File_close>
            errdefer allocator.destroy(st);
  20efeb:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  20eff2:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20eff9:	e8 c2 09 00 00       	call   20f9c0 <Allocator_destroy>
            st.debug_info = (try st.elf.findSection(".debug_info")) orelse return error.MissingDebugInfo;
  20effe:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20f005:	e8 86 cc ff ff       	call   20bc90 <__zig_return_error>
  20f00a:	48 8b 05 6f 18 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff186f]        # 200880 <__unnamed_117>
  20f011:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  20f018:	48 89 06             	mov    QWORD PTR [rsi],rax
  20f01b:	48 8b 05 66 18 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff1866]        # 200888 <__unnamed_117+0x8>
  20f022:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  20f026:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  20f02d:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20f034:	5d                   	pop    rbp
  20f035:	c3                   	ret    
  20f036:	48 8b 85 e8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x318]
  20f03d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  20f040:	48 89 8d e0 fc ff ff 	mov    QWORD PTR [rbp-0x320],rcx
  20f047:	48 8d bd 50 fe ff ff 	lea    rdi,[rbp-0x1b0]
  20f04e:	48 8d 0d 93 44 03 00 	lea    rcx,[rip+0x34493]        # 2434e8 <__unnamed_40>
  20f055:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
  20f05c:	48 8b 95 e0 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x320]
  20f063:	48 89 10             	mov    QWORD PTR [rax],rdx
            st.debug_abbrev = (try st.elf.findSection(".debug_abbrev")) orelse return error.MissingDebugInfo;
  20f066:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20f06d:	48 83 c6 68          	add    rsi,0x68
  20f071:	4c 8b 85 68 fd ff ff 	mov    r8,QWORD PTR [rbp-0x298]
  20f078:	49 83 c0 08          	add    r8,0x8
  20f07c:	4c 8b 8d 58 fd ff ff 	mov    r9,QWORD PTR [rbp-0x2a8]
  20f083:	48 89 b5 d8 fc ff ff 	mov    QWORD PTR [rbp-0x328],rsi
  20f08a:	4c 89 ce             	mov    rsi,r9
  20f08d:	4c 89 c2             	mov    rdx,r8
  20f090:	e8 6b 2e 00 00       	call   211f00 <Elf_findSection>
  20f095:	66 83 bd 50 fe ff ff 	cmp    WORD PTR [rbp-0x1b0],0x0
  20f09c:	00 
  20f09d:	0f 84 86 00 00 00    	je     20f129 <openSelfDebugInfo+0x559>
            errdefer st.elf.close();
  20f0a3:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  20f0aa:	48 83 c0 08          	add    rax,0x8
  20f0ae:	48 89 c7             	mov    rdi,rax
  20f0b1:	e8 4a 32 00 00       	call   212300 <Elf_close>
            errdefer st.self_exe_file.close();
  20f0b6:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  20f0bd:	e8 0e 2e 00 00       	call   211ed0 <File_close>
            errdefer allocator.destroy(st);
  20f0c2:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  20f0c9:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20f0d0:	e8 eb 08 00 00       	call   20f9c0 <Allocator_destroy>
            st.debug_abbrev = (try st.elf.findSection(".debug_abbrev")) orelse return error.MissingDebugInfo;
  20f0d5:	66 8b 8d 50 fe ff ff 	mov    cx,WORD PTR [rbp-0x1b0]
  20f0dc:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20f0e3:	66 89 8d d6 fc ff ff 	mov    WORD PTR [rbp-0x32a],cx
  20f0ea:	e8 a1 cb ff ff       	call   20bc90 <__zig_return_error>
  20f0ef:	66 8b 8d d6 fc ff ff 	mov    cx,WORD PTR [rbp-0x32a]
  20f0f6:	66 89 8d 30 fe ff ff 	mov    WORD PTR [rbp-0x1d0],cx
  20f0fd:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  20f104:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  20f10b:	48 89 06             	mov    QWORD PTR [rsi],rax
  20f10e:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  20f115:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  20f119:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  20f120:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20f127:	5d                   	pop    rbp
  20f128:	c3                   	ret    
  20f129:	48 8d 85 50 fe ff ff 	lea    rax,[rbp-0x1b0]
  20f130:	48 83 c0 08          	add    rax,0x8
  20f134:	48 83 bd 58 fe ff ff 	cmp    QWORD PTR [rbp-0x1a8],0x0
  20f13b:	00 
  20f13c:	48 89 85 c8 fc ff ff 	mov    QWORD PTR [rbp-0x338],rax
  20f143:	75 6a                	jne    20f1af <openSelfDebugInfo+0x5df>
            errdefer st.elf.close();
  20f145:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  20f14c:	48 83 c0 08          	add    rax,0x8
  20f150:	48 89 c7             	mov    rdi,rax
  20f153:	e8 a8 31 00 00       	call   212300 <Elf_close>
            errdefer st.self_exe_file.close();
  20f158:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  20f15f:	e8 6c 2d 00 00       	call   211ed0 <File_close>
            errdefer allocator.destroy(st);
  20f164:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  20f16b:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20f172:	e8 49 08 00 00       	call   20f9c0 <Allocator_destroy>
            st.debug_abbrev = (try st.elf.findSection(".debug_abbrev")) orelse return error.MissingDebugInfo;
  20f177:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20f17e:	e8 0d cb ff ff       	call   20bc90 <__zig_return_error>
  20f183:	48 8b 05 f6 16 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff16f6]        # 200880 <__unnamed_117>
  20f18a:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  20f191:	48 89 06             	mov    QWORD PTR [rsi],rax
  20f194:	48 8b 05 ed 16 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff16ed]        # 200888 <__unnamed_117+0x8>
  20f19b:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  20f19f:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  20f1a6:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20f1ad:	5d                   	pop    rbp
  20f1ae:	c3                   	ret    
  20f1af:	48 8b 85 c8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x338]
  20f1b6:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  20f1b9:	48 89 8d c0 fc ff ff 	mov    QWORD PTR [rbp-0x340],rcx
  20f1c0:	48 8d bd 20 fe ff ff 	lea    rdi,[rbp-0x1e0]
  20f1c7:	48 8d 0d 32 43 03 00 	lea    rcx,[rip+0x34332]        # 243500 <__unnamed_42>
  20f1ce:	48 8b 85 d8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x328]
  20f1d5:	48 8b 95 c0 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x340]
  20f1dc:	48 89 10             	mov    QWORD PTR [rax],rdx
            st.debug_str = (try st.elf.findSection(".debug_str")) orelse return error.MissingDebugInfo;
  20f1df:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20f1e6:	48 83 c6 70          	add    rsi,0x70
  20f1ea:	4c 8b 85 68 fd ff ff 	mov    r8,QWORD PTR [rbp-0x298]
  20f1f1:	49 83 c0 08          	add    r8,0x8
  20f1f5:	4c 8b 8d 58 fd ff ff 	mov    r9,QWORD PTR [rbp-0x2a8]
  20f1fc:	48 89 b5 b8 fc ff ff 	mov    QWORD PTR [rbp-0x348],rsi
  20f203:	4c 89 ce             	mov    rsi,r9
  20f206:	4c 89 c2             	mov    rdx,r8
  20f209:	e8 f2 2c 00 00       	call   211f00 <Elf_findSection>
  20f20e:	66 83 bd 20 fe ff ff 	cmp    WORD PTR [rbp-0x1e0],0x0
  20f215:	00 
  20f216:	0f 84 86 00 00 00    	je     20f2a2 <openSelfDebugInfo+0x6d2>
            errdefer st.elf.close();
  20f21c:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  20f223:	48 83 c0 08          	add    rax,0x8
  20f227:	48 89 c7             	mov    rdi,rax
  20f22a:	e8 d1 30 00 00       	call   212300 <Elf_close>
            errdefer st.self_exe_file.close();
  20f22f:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  20f236:	e8 95 2c 00 00       	call   211ed0 <File_close>
            errdefer allocator.destroy(st);
  20f23b:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  20f242:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20f249:	e8 72 07 00 00       	call   20f9c0 <Allocator_destroy>
            st.debug_str = (try st.elf.findSection(".debug_str")) orelse return error.MissingDebugInfo;
  20f24e:	66 8b 8d 20 fe ff ff 	mov    cx,WORD PTR [rbp-0x1e0]
  20f255:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20f25c:	66 89 8d b6 fc ff ff 	mov    WORD PTR [rbp-0x34a],cx
  20f263:	e8 28 ca ff ff       	call   20bc90 <__zig_return_error>
  20f268:	66 8b 8d b6 fc ff ff 	mov    cx,WORD PTR [rbp-0x34a]
  20f26f:	66 89 8d 00 fe ff ff 	mov    WORD PTR [rbp-0x200],cx
  20f276:	48 8b 85 00 fe ff ff 	mov    rax,QWORD PTR [rbp-0x200]
  20f27d:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  20f284:	48 89 06             	mov    QWORD PTR [rsi],rax
  20f287:	48 8b 85 08 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1f8]
  20f28e:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  20f292:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  20f299:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20f2a0:	5d                   	pop    rbp
  20f2a1:	c3                   	ret    
  20f2a2:	48 8d 85 20 fe ff ff 	lea    rax,[rbp-0x1e0]
  20f2a9:	48 83 c0 08          	add    rax,0x8
  20f2ad:	48 83 bd 28 fe ff ff 	cmp    QWORD PTR [rbp-0x1d8],0x0
  20f2b4:	00 
  20f2b5:	48 89 85 a8 fc ff ff 	mov    QWORD PTR [rbp-0x358],rax
  20f2bc:	75 6a                	jne    20f328 <openSelfDebugInfo+0x758>
            errdefer st.elf.close();
  20f2be:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  20f2c5:	48 83 c0 08          	add    rax,0x8
  20f2c9:	48 89 c7             	mov    rdi,rax
  20f2cc:	e8 2f 30 00 00       	call   212300 <Elf_close>
            errdefer st.self_exe_file.close();
  20f2d1:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  20f2d8:	e8 f3 2b 00 00       	call   211ed0 <File_close>
            errdefer allocator.destroy(st);
  20f2dd:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  20f2e4:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20f2eb:	e8 d0 06 00 00       	call   20f9c0 <Allocator_destroy>
            st.debug_str = (try st.elf.findSection(".debug_str")) orelse return error.MissingDebugInfo;
  20f2f0:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20f2f7:	e8 94 c9 ff ff       	call   20bc90 <__zig_return_error>
  20f2fc:	48 8b 05 7d 15 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff157d]        # 200880 <__unnamed_117>
  20f303:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  20f30a:	48 89 06             	mov    QWORD PTR [rsi],rax
  20f30d:	48 8b 05 74 15 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff1574]        # 200888 <__unnamed_117+0x8>
  20f314:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  20f318:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  20f31f:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20f326:	5d                   	pop    rbp
  20f327:	c3                   	ret    
  20f328:	48 8b 85 a8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x358]
  20f32f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  20f332:	48 89 8d a0 fc ff ff 	mov    QWORD PTR [rbp-0x360],rcx
  20f339:	48 8d bd f0 fd ff ff 	lea    rdi,[rbp-0x210]
  20f340:	48 8d 0d d1 41 03 00 	lea    rcx,[rip+0x341d1]        # 243518 <__unnamed_44>
  20f347:	48 8b 85 b8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x348]
  20f34e:	48 8b 95 a0 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x360]
  20f355:	48 89 10             	mov    QWORD PTR [rax],rdx
            st.debug_line = (try st.elf.findSection(".debug_line")) orelse return error.MissingDebugInfo;
  20f358:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20f35f:	48 83 c6 78          	add    rsi,0x78
  20f363:	4c 8b 85 68 fd ff ff 	mov    r8,QWORD PTR [rbp-0x298]
  20f36a:	49 83 c0 08          	add    r8,0x8
  20f36e:	4c 8b 8d 58 fd ff ff 	mov    r9,QWORD PTR [rbp-0x2a8]
  20f375:	48 89 b5 98 fc ff ff 	mov    QWORD PTR [rbp-0x368],rsi
  20f37c:	4c 89 ce             	mov    rsi,r9
  20f37f:	4c 89 c2             	mov    rdx,r8
  20f382:	e8 79 2b 00 00       	call   211f00 <Elf_findSection>
  20f387:	66 83 bd f0 fd ff ff 	cmp    WORD PTR [rbp-0x210],0x0
  20f38e:	00 
  20f38f:	0f 84 86 00 00 00    	je     20f41b <openSelfDebugInfo+0x84b>
            errdefer st.elf.close();
  20f395:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  20f39c:	48 83 c0 08          	add    rax,0x8
  20f3a0:	48 89 c7             	mov    rdi,rax
  20f3a3:	e8 58 2f 00 00       	call   212300 <Elf_close>
            errdefer st.self_exe_file.close();
  20f3a8:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  20f3af:	e8 1c 2b 00 00       	call   211ed0 <File_close>
            errdefer allocator.destroy(st);
  20f3b4:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  20f3bb:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20f3c2:	e8 f9 05 00 00       	call   20f9c0 <Allocator_destroy>
            st.debug_line = (try st.elf.findSection(".debug_line")) orelse return error.MissingDebugInfo;
  20f3c7:	66 8b 8d f0 fd ff ff 	mov    cx,WORD PTR [rbp-0x210]
  20f3ce:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20f3d5:	66 89 8d 96 fc ff ff 	mov    WORD PTR [rbp-0x36a],cx
  20f3dc:	e8 af c8 ff ff       	call   20bc90 <__zig_return_error>
  20f3e1:	66 8b 8d 96 fc ff ff 	mov    cx,WORD PTR [rbp-0x36a]
  20f3e8:	66 89 8d d0 fd ff ff 	mov    WORD PTR [rbp-0x230],cx
  20f3ef:	48 8b 85 d0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x230]
  20f3f6:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  20f3fd:	48 89 06             	mov    QWORD PTR [rsi],rax
  20f400:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
  20f407:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  20f40b:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  20f412:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20f419:	5d                   	pop    rbp
  20f41a:	c3                   	ret    
  20f41b:	48 8d 85 f0 fd ff ff 	lea    rax,[rbp-0x210]
  20f422:	48 83 c0 08          	add    rax,0x8
  20f426:	48 83 bd f8 fd ff ff 	cmp    QWORD PTR [rbp-0x208],0x0
  20f42d:	00 
  20f42e:	48 89 85 88 fc ff ff 	mov    QWORD PTR [rbp-0x378],rax
  20f435:	75 6a                	jne    20f4a1 <openSelfDebugInfo+0x8d1>
            errdefer st.elf.close();
  20f437:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  20f43e:	48 83 c0 08          	add    rax,0x8
  20f442:	48 89 c7             	mov    rdi,rax
  20f445:	e8 b6 2e 00 00       	call   212300 <Elf_close>
            errdefer st.self_exe_file.close();
  20f44a:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  20f451:	e8 7a 2a 00 00       	call   211ed0 <File_close>
            errdefer allocator.destroy(st);
  20f456:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  20f45d:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20f464:	e8 57 05 00 00       	call   20f9c0 <Allocator_destroy>
            st.debug_line = (try st.elf.findSection(".debug_line")) orelse return error.MissingDebugInfo;
  20f469:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20f470:	e8 1b c8 ff ff       	call   20bc90 <__zig_return_error>
  20f475:	48 8b 05 04 14 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff1404]        # 200880 <__unnamed_117>
  20f47c:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  20f483:	48 89 06             	mov    QWORD PTR [rsi],rax
  20f486:	48 8b 05 fb 13 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff13fb]        # 200888 <__unnamed_117+0x8>
  20f48d:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  20f491:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  20f498:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20f49f:	5d                   	pop    rbp
  20f4a0:	c3                   	ret    
  20f4a1:	48 8b 85 88 fc ff ff 	mov    rax,QWORD PTR [rbp-0x378]
  20f4a8:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  20f4ab:	48 89 8d 80 fc ff ff 	mov    QWORD PTR [rbp-0x380],rcx
  20f4b2:	48 8d bd c0 fd ff ff 	lea    rdi,[rbp-0x240]
  20f4b9:	48 8d 0d 70 40 03 00 	lea    rcx,[rip+0x34070]        # 243530 <__unnamed_46>
  20f4c0:	48 8b 85 98 fc ff ff 	mov    rax,QWORD PTR [rbp-0x368]
  20f4c7:	48 8b 95 80 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x380]
  20f4ce:	48 89 10             	mov    QWORD PTR [rax],rdx
            st.debug_ranges = (try st.elf.findSection(".debug_ranges"));
  20f4d1:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20f4d8:	48 81 c6 80 00 00 00 	add    rsi,0x80
  20f4df:	4c 8b 85 68 fd ff ff 	mov    r8,QWORD PTR [rbp-0x298]
  20f4e6:	49 83 c0 08          	add    r8,0x8
  20f4ea:	4c 8b 8d 58 fd ff ff 	mov    r9,QWORD PTR [rbp-0x2a8]
  20f4f1:	48 89 b5 78 fc ff ff 	mov    QWORD PTR [rbp-0x388],rsi
  20f4f8:	4c 89 ce             	mov    rsi,r9
  20f4fb:	4c 89 c2             	mov    rdx,r8
  20f4fe:	e8 fd 29 00 00       	call   211f00 <Elf_findSection>
  20f503:	66 83 bd c0 fd ff ff 	cmp    WORD PTR [rbp-0x240],0x0
  20f50a:	00 
  20f50b:	0f 84 86 00 00 00    	je     20f597 <openSelfDebugInfo+0x9c7>
            errdefer st.elf.close();
  20f511:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  20f518:	48 83 c0 08          	add    rax,0x8
  20f51c:	48 89 c7             	mov    rdi,rax
  20f51f:	e8 dc 2d 00 00       	call   212300 <Elf_close>
            errdefer st.self_exe_file.close();
  20f524:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  20f52b:	e8 a0 29 00 00       	call   211ed0 <File_close>
            errdefer allocator.destroy(st);
  20f530:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  20f537:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20f53e:	e8 7d 04 00 00       	call   20f9c0 <Allocator_destroy>
            st.debug_ranges = (try st.elf.findSection(".debug_ranges"));
  20f543:	66 8b 8d c0 fd ff ff 	mov    cx,WORD PTR [rbp-0x240]
  20f54a:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20f551:	66 89 8d 76 fc ff ff 	mov    WORD PTR [rbp-0x38a],cx
  20f558:	e8 33 c7 ff ff       	call   20bc90 <__zig_return_error>
  20f55d:	66 8b 8d 76 fc ff ff 	mov    cx,WORD PTR [rbp-0x38a]
  20f564:	66 89 8d a0 fd ff ff 	mov    WORD PTR [rbp-0x260],cx
  20f56b:	48 8b 85 a0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x260]
  20f572:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  20f579:	48 89 06             	mov    QWORD PTR [rsi],rax
  20f57c:	48 8b 85 a8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x258]
  20f583:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  20f587:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  20f58e:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20f595:	5d                   	pop    rbp
  20f596:	c3                   	ret    
  20f597:	48 8b 85 c8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x238]
  20f59e:	48 8b 8d 78 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x388]
  20f5a5:	48 89 01             	mov    QWORD PTR [rcx],rax
            try scanAllCompileUnits(st);
  20f5a8:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20f5af:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20f5b6:	e8 95 2d 00 00       	call   212350 <scanAllCompileUnits>
  20f5bb:	66 89 85 9e fd ff ff 	mov    WORD PTR [rbp-0x262],ax
  20f5c2:	66 83 bd 9e fd ff ff 	cmp    WORD PTR [rbp-0x262],0x0
  20f5c9:	00 
  20f5ca:	0f 84 86 00 00 00    	je     20f656 <openSelfDebugInfo+0xa86>
            errdefer st.elf.close();
  20f5d0:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  20f5d7:	48 83 c0 08          	add    rax,0x8
  20f5db:	48 89 c7             	mov    rdi,rax
  20f5de:	e8 1d 2d 00 00       	call   212300 <Elf_close>
            errdefer st.self_exe_file.close();
  20f5e3:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  20f5ea:	e8 e1 28 00 00       	call   211ed0 <File_close>
            errdefer allocator.destroy(st);
  20f5ef:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  20f5f6:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20f5fd:	e8 be 03 00 00       	call   20f9c0 <Allocator_destroy>
            try scanAllCompileUnits(st);
  20f602:	66 8b 8d 9e fd ff ff 	mov    cx,WORD PTR [rbp-0x262]
  20f609:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20f610:	66 89 8d 74 fc ff ff 	mov    WORD PTR [rbp-0x38c],cx
  20f617:	e8 74 c6 ff ff       	call   20bc90 <__zig_return_error>
  20f61c:	66 8b 8d 74 fc ff ff 	mov    cx,WORD PTR [rbp-0x38c]
  20f623:	66 89 8d 88 fd ff ff 	mov    WORD PTR [rbp-0x278],cx
  20f62a:	48 8b 85 88 fd ff ff 	mov    rax,QWORD PTR [rbp-0x278]
  20f631:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  20f638:	48 89 06             	mov    QWORD PTR [rsi],rax
  20f63b:	48 8b 85 90 fd ff ff 	mov    rax,QWORD PTR [rbp-0x270]
  20f642:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  20f646:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  20f64d:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20f654:	5d                   	pop    rbp
  20f655:	c3                   	ret    
            return st;
  20f656:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  20f65d:	66 c7 85 78 fd ff ff 	mov    WORD PTR [rbp-0x288],0x0
  20f664:	00 00 
  20f666:	48 89 85 80 fd ff ff 	mov    QWORD PTR [rbp-0x280],rax
  20f66d:	48 8b 85 78 fd ff ff 	mov    rax,QWORD PTR [rbp-0x288]
  20f674:	48 8b 8d 60 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2a0]
  20f67b:	48 89 01             	mov    QWORD PTR [rcx],rax
  20f67e:	48 8b 85 80 fd ff ff 	mov    rax,QWORD PTR [rbp-0x280]
  20f685:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20f689:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  20f690:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20f697:	5d                   	pop    rbp
  20f698:	c3                   	ret    
  20f699:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

000000000020f6a0 <AlignedArrayList(AbbrevTableHeader,8)_init>:
        items: []align(A) T,
        len: usize,
        allocator: *Allocator,

        /// Deinitialize with `deinit` or use `toOwnedSlice`.
        pub fn init(allocator: *Allocator) Self {
  20f6a0:	55                   	push   rbp
  20f6a1:	48 89 e5             	mov    rbp,rsp
  20f6a4:	48 89 f8             	mov    rax,rdi
  20f6a7:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
            return Self{
                .items = []align(A) T{},
                .len = 0,
                .allocator = allocator,
  20f6ab:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
            return Self{
  20f6af:	48 8b 0d fa 0b ff ff 	mov    rcx,QWORD PTR [rip+0xffffffffffff0bfa]        # 2002b0 <__unnamed_100>
  20f6b6:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  20f6ba:	48 8b 0d f7 0b ff ff 	mov    rcx,QWORD PTR [rip+0xffffffffffff0bf7]        # 2002b8 <__unnamed_100+0x8>
  20f6c1:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  20f6c5:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  20f6cc:	00 
  20f6cd:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  20f6d1:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  20f6d5:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  20f6d8:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20f6dc:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  20f6e0:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  20f6e4:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  20f6e8:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  20f6ec:	48 89 4f 18          	mov    QWORD PTR [rdi+0x18],rcx
  20f6f0:	5d                   	pop    rbp
  20f6f1:	c3                   	ret    
  20f6f2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20f6f9:	1f 84 00 00 00 00 00 

000000000020f700 <AlignedArrayList(CompileUnit,2)_init>:
        pub fn init(allocator: *Allocator) Self {
  20f700:	55                   	push   rbp
  20f701:	48 89 e5             	mov    rbp,rsp
  20f704:	48 89 f8             	mov    rax,rdi
  20f707:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
                .allocator = allocator,
  20f70b:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
            return Self{
  20f70f:	48 8b 0d 9a 0b ff ff 	mov    rcx,QWORD PTR [rip+0xffffffffffff0b9a]        # 2002b0 <__unnamed_100>
  20f716:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  20f71a:	48 8b 0d 97 0b ff ff 	mov    rcx,QWORD PTR [rip+0xffffffffffff0b97]        # 2002b8 <__unnamed_100+0x8>
  20f721:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  20f725:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  20f72c:	00 
  20f72d:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  20f731:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  20f735:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  20f738:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20f73c:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  20f740:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  20f744:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  20f748:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  20f74c:	48 89 4f 18          	mov    QWORD PTR [rdi+0x18],rcx
  20f750:	5d                   	pop    rbp
  20f751:	c3                   	ret    
  20f752:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20f759:	1f 84 00 00 00 00 00 

000000000020f760 <Allocator_create>:
    /// Guaranteed: `old_mem.len` is the same as what was returned from `allocFn` or `reallocFn`
    freeFn: fn (self: *Allocator, old_mem: []u8) void,

    /// Call `destroy` with the result
    /// TODO this is deprecated. use createOne instead
    pub fn create(self: *Allocator, init: var) Error!*@typeOf(init) {
  20f760:	55                   	push   rbp
  20f761:	48 89 e5             	mov    rbp,rsp
  20f764:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  20f76b:	48 89 f8             	mov    rax,rdi
  20f76e:	4c 8d 45 e8          	lea    r8,[rbp-0x18]
  20f772:	41 b9 01 00 00 00    	mov    r9d,0x1
  20f778:	45 89 ca             	mov    r10d,r9d
  20f77b:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
        const T = @typeOf(init);
        if (@sizeOf(T) == 0) return &(T{});
        const slice = try self.alloc(T, 1);
  20f77f:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  20f783:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
  20f787:	4c 89 c7             	mov    rdi,r8
  20f78a:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
  20f78e:	48 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rcx
  20f795:	4c 89 d1             	mov    rcx,r10
  20f798:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  20f79f:	e8 9c 37 00 00       	call   212f40 <Allocator_alloc>
  20f7a4:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  20f7a9:	74 42                	je     20f7ed <Allocator_create+0x8d>
  20f7ab:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  20f7af:	48 8b 7d 80          	mov    rdi,QWORD PTR [rbp-0x80]
  20f7b3:	66 89 85 6e ff ff ff 	mov    WORD PTR [rbp-0x92],ax
  20f7ba:	e8 d1 c4 ff ff       	call   20bc90 <__zig_return_error>
  20f7bf:	66 8b 85 6e ff ff ff 	mov    ax,WORD PTR [rbp-0x92]
  20f7c6:	66 89 45 c0          	mov    WORD PTR [rbp-0x40],ax
  20f7ca:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  20f7ce:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  20f7d2:	48 89 39             	mov    QWORD PTR [rcx],rdi
  20f7d5:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20f7d9:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  20f7dd:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  20f7e4:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  20f7eb:	5d                   	pop    rbp
  20f7ec:	c3                   	ret    
  20f7ed:	31 c0                	xor    eax,eax
  20f7ef:	89 c1                	mov    ecx,eax
  20f7f1:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  20f7f5:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  20f7f9:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  20f7fd:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
        const ptr = &slice[0];
  20f801:	48 3b 4d a0          	cmp    rcx,QWORD PTR [rbp-0x60]
  20f805:	72 10                	jb     20f817 <Allocator_create+0xb7>
  20f807:	48 8d 3d ea 3b 03 00 	lea    rdi,[rip+0x33bea]        # 2433f8 <__unnamed_20>
  20f80e:	31 c0                	xor    eax,eax
  20f810:	89 c6                	mov    esi,eax
  20f812:	e8 e9 bd ff ff       	call   20b600 <panic>
  20f817:	b8 c8 00 00 00       	mov    eax,0xc8
  20f81c:	89 c2                	mov    edx,eax
  20f81e:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  20f822:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
        ptr.* = init;
  20f826:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  20f82a:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
  20f831:	48 89 cf             	mov    rdi,rcx
  20f834:	e8 c7 50 02 00       	call   234900 <memcpy>
        return ptr;
  20f839:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  20f83d:	66 c7 45 b0 00 00    	mov    WORD PTR [rbp-0x50],0x0
  20f843:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
  20f847:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  20f84b:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
  20f84f:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  20f852:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  20f856:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  20f85a:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  20f861:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  20f868:	5d                   	pop    rbp
  20f869:	c3                   	ret    
  20f86a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000020f870 <openSelfExe>:
pub fn openSelfExe() !os.File {
  20f870:	55                   	push   rbp
  20f871:	48 89 e5             	mov    rbp,rsp
  20f874:	48 81 ec d0 00 00 00 	sub    rsp,0xd0
  20f87b:	48 89 f8             	mov    rax,rdi
  20f87e:	b1 01                	mov    cl,0x1
            const proc_file_path = "/proc/self/exe";
  20f880:	48 8b 15 ab 94 ff ff 	mov    rdx,QWORD PTR [rip+0xffffffffffff94ab]        # 208d32 <__unnamed_49>
  20f887:	48 89 55 aa          	mov    QWORD PTR [rbp-0x56],rdx
  20f88b:	44 8b 05 a8 94 ff ff 	mov    r8d,DWORD PTR [rip+0xffffffffffff94a8]        # 208d3a <__unnamed_49+0x8>
  20f892:	44 89 45 b2          	mov    DWORD PTR [rbp-0x4e],r8d
  20f896:	66 44 8b 0d a0 94 ff 	mov    r9w,WORD PTR [rip+0xffffffffffff94a0]        # 208d3e <__unnamed_49+0xc>
  20f89d:	ff 
  20f89e:	66 44 89 4d b6       	mov    WORD PTR [rbp-0x4a],r9w
            var fixed_buffer_mem: [proc_file_path.len + 1]u8 = undefined;
  20f8a3:	48 8b 15 96 94 ff ff 	mov    rdx,QWORD PTR [rip+0xffffffffffff9496]        # 208d40 <__unnamed_50>
  20f8aa:	48 89 55 9b          	mov    QWORD PTR [rbp-0x65],rdx
  20f8ae:	44 8b 05 93 94 ff ff 	mov    r8d,DWORD PTR [rip+0xffffffffffff9493]        # 208d48 <__unnamed_50+0x8>
  20f8b5:	44 89 45 a3          	mov    DWORD PTR [rbp-0x5d],r8d
  20f8b9:	66 44 8b 0d 8b 94 ff 	mov    r9w,WORD PTR [rip+0xffffffffffff948b]        # 208d4c <__unnamed_50+0xc>
  20f8c0:	ff 
  20f8c1:	66 44 89 4d a7       	mov    WORD PTR [rbp-0x59],r9w
  20f8c6:	44 8a 15 81 94 ff ff 	mov    r10b,BYTE PTR [rip+0xffffffffffff9481]        # 208d4e <__unnamed_50+0xe>
  20f8cd:	44 88 55 a9          	mov    BYTE PTR [rbp-0x57],r10b
            var fixed_allocator = std.heap.FixedBufferAllocator.init(fixed_buffer_mem[0..]);
  20f8d1:	f6 c1 01             	test   cl,0x1
  20f8d4:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  20f8db:	48 89 b5 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rsi
  20f8e2:	48 89 bd 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdi
  20f8e9:	75 40                	jne    20f92b <openSelfExe+0xbb>
  20f8eb:	eb 2e                	jmp    20f91b <openSelfExe+0xab>
            return os.File.openRead(&fixed_allocator.allocator, proc_file_path);
  20f8ed:	48 8b bd 58 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  20f8f4:	e8 97 c3 ff ff       	call   20bc90 <__zig_return_error>
  20f8f9:	eb 02                	jmp    20f8fd <openSelfExe+0x8d>
  20f8fb:	eb 00                	jmp    20f8fd <openSelfExe+0x8d>
  20f8fd:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  20f901:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
  20f908:	48 89 01             	mov    QWORD PTR [rcx],rax
  20f90b:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  20f912:	48 81 c4 d0 00 00 00 	add    rsp,0xd0
  20f919:	5d                   	pop    rbp
  20f91a:	c3                   	ret    
  20f91b:	48 8d 3d d6 3a 03 00 	lea    rdi,[rip+0x33ad6]        # 2433f8 <__unnamed_20>
  20f922:	31 c0                	xor    eax,eax
  20f924:	89 c6                	mov    esi,eax
            var fixed_allocator = std.heap.FixedBufferAllocator.init(fixed_buffer_mem[0..]);
  20f926:	e8 d5 bc ff ff       	call   20b600 <panic>
  20f92b:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  20f92f:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
  20f933:	48 8d 45 9b          	lea    rax,[rbp-0x65]
  20f937:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  20f93b:	48 c7 45 f8 0f 00 00 	mov    QWORD PTR [rbp-0x8],0xf
  20f942:	00 
  20f943:	e8 68 36 00 00       	call   212fb0 <FixedBufferAllocator_init>
  20f948:	48 8d 7d b8          	lea    rdi,[rbp-0x48]
  20f94c:	48 8d 0d 2d 3c 03 00 	lea    rcx,[rip+0x33c2d]        # 243580 <__unnamed_51>
  20f953:	48 8d 85 68 ff ff ff 	lea    rax,[rbp-0x98]
  20f95a:	ba 30 00 00 00       	mov    edx,0x30
  20f95f:	48 8d 75 c0          	lea    rsi,[rbp-0x40]
  20f963:	49 89 c0             	mov    r8,rax
  20f966:	48 89 bd 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdi
  20f96d:	4c 89 c7             	mov    rdi,r8
  20f970:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  20f977:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  20f97e:	e8 7d 4f 02 00       	call   234900 <memcpy>
            return os.File.openRead(&fixed_allocator.allocator, proc_file_path);
  20f983:	48 8b bd 48 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb8]
  20f98a:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  20f991:	48 8b 95 40 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc0]
  20f998:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
  20f99f:	e8 7c 36 00 00       	call   213020 <File_openRead>
  20f9a4:	66 83 7d b8 00       	cmp    WORD PTR [rbp-0x48],0x0
  20f9a9:	0f 85 3e ff ff ff    	jne    20f8ed <openSelfExe+0x7d>
  20f9af:	e9 47 ff ff ff       	jmp    20f8fb <openSelfExe+0x8b>
  20f9b4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20f9bb:	00 00 00 00 00 

000000000020f9c0 <Allocator_destroy>:
        const slice = try self.alloc(T, 1);
        return &slice[0];
    }

    /// `ptr` should be the return value of `create`
    pub fn destroy(self: *Allocator, ptr: var) void {
  20f9c0:	55                   	push   rbp
  20f9c1:	48 89 e5             	mov    rbp,rsp
  20f9c4:	48 83 ec 40          	sub    rsp,0x40
  20f9c8:	b0 01                	mov    al,0x1
  20f9ca:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  20f9ce:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
        const non_const_ptr = @intToPtr([*]u8, @ptrToInt(ptr));
  20f9d2:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  20f9d6:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
        self.freeFn(self, non_const_ptr[0..@sizeOf(@typeOf(ptr).Child)]);
  20f9da:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  20f9de:	48 8b 76 10          	mov    rsi,QWORD PTR [rsi+0x10]
  20f9e2:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  20f9e6:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  20f9ea:	a8 01                	test   al,0x1
  20f9ec:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  20f9f0:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  20f9f4:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
  20f9f8:	75 10                	jne    20fa0a <Allocator_destroy+0x4a>
  20f9fa:	48 8d 3d f7 39 03 00 	lea    rdi,[rip+0x339f7]        # 2433f8 <__unnamed_20>
  20fa01:	31 c0                	xor    eax,eax
  20fa03:	89 c6                	mov    esi,eax
  20fa05:	e8 f6 bb ff ff       	call   20b600 <panic>
  20fa0a:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
  20fa0e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20fa12:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  20fa16:	48 c7 45 f8 c8 00 00 	mov    QWORD PTR [rbp-0x8],0xc8
  20fa1d:	00 
  20fa1e:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  20fa22:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  20fa26:	ff d1                	call   rcx
    pub fn destroy(self: *Allocator, ptr: var) void {
  20fa28:	48 83 c4 40          	add    rsp,0x40
  20fa2c:	5d                   	pop    rbp
  20fa2d:	c3                   	ret    
  20fa2e:	66 90                	xchg   ax,ax

000000000020fa30 <Elf_openFile>:
        try elf.openFile(allocator, *elf.prealloc_file);
        elf.auto_close_stream = true;
    }

    /// Call close when done.
    pub fn openFile(elf: *Elf, allocator: *mem.Allocator, file: *os.File) !void {
  20fa30:	55                   	push   rbp
  20fa31:	48 89 e5             	mov    rbp,rsp
  20fa34:	48 81 ec 20 09 00 00 	sub    rsp,0x920
  20fa3b:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  20fa3f:	48 89 b5 18 fc ff ff 	mov    QWORD PTR [rbp-0x3e8],rsi
  20fa46:	48 89 95 10 fc ff ff 	mov    QWORD PTR [rbp-0x3f0],rdx
  20fa4d:	48 89 8d 08 fc ff ff 	mov    QWORD PTR [rbp-0x3f8],rcx
        elf.allocator = allocator;
  20fa54:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  20fa5b:	48 8b 95 10 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x3f0]
  20fa62:	48 89 51 48          	mov    QWORD PTR [rcx+0x48],rdx
        elf.in_file = file;
  20fa66:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  20fa6d:	48 8b 95 08 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x3f8]
  20fa74:	48 89 11             	mov    QWORD PTR [rcx],rdx
        elf.auto_close_stream = false;
  20fa77:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  20fa7e:	c6 41 08 00          	mov    BYTE PTR [rcx+0x8],0x0

        var file_stream = io.FileInStream.init(elf.in_file);
  20fa82:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  20fa89:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  20fa8c:	48 89 bd 70 fb ff ff 	mov    QWORD PTR [rbp-0x490],rdi
  20fa93:	48 89 c7             	mov    rdi,rax
  20fa96:	e8 f5 3e 00 00       	call   213990 <FileInStream_init>
  20fa9b:	41 b0 01             	mov    r8b,0x1
  20fa9e:	48 8d 85 f8 fb ff ff 	lea    rax,[rbp-0x408]
  20faa5:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  20faa9:	48 89 8d f8 fb ff ff 	mov    QWORD PTR [rbp-0x408],rcx
  20fab0:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  20fab4:	48 89 8d 00 fc ff ff 	mov    QWORD PTR [rbp-0x400],rcx
        const in = &file_stream.stream;
  20fabb:	48 83 c0 08          	add    rax,0x8
  20fabf:	48 89 85 f0 fb ff ff 	mov    QWORD PTR [rbp-0x410],rax

        var magic: [4]u8 = undefined;
  20fac6:	44 8b 0d 53 ae ff ff 	mov    r9d,DWORD PTR [rip+0xffffffffffffae53]        # 20a920 <__unnamed_37>
  20facd:	44 89 8d ec fb ff ff 	mov    DWORD PTR [rbp-0x414],r9d
        try in.readNoEof(magic[0..]);
  20fad4:	48 8b b5 f0 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x410]
  20fadb:	41 f6 c0 01          	test   r8b,0x1
  20fadf:	48 89 b5 68 fb ff ff 	mov    QWORD PTR [rbp-0x498],rsi
  20fae6:	0f 85 a2 22 00 00    	jne    211d8e <Elf_openFile+0x235e>
  20faec:	e9 8d 22 00 00       	jmp    211d7e <Elf_openFile+0x234e>
  20faf1:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  20faf5:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20fafc:	66 89 85 66 fb ff ff 	mov    WORD PTR [rbp-0x49a],ax
  20fb03:	e8 88 c1 ff ff       	call   20bc90 <__zig_return_error>
  20fb08:	66 8b 85 66 fb ff ff 	mov    ax,WORD PTR [rbp-0x49a]
  20fb0f:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20fb16:	5d                   	pop    rbp
  20fb17:	c3                   	ret    
  20fb18:	48 8d 85 ec fb ff ff 	lea    rax,[rbp-0x414]
        if (!mem.eql(u8, magic, "\x7fELF")) return error.InvalidFormat;
  20fb1f:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  20fb23:	48 c7 45 d0 04 00 00 	mov    QWORD PTR [rbp-0x30],0x4
  20fb2a:	00 
  20fb2b:	48 8d 35 7e 3a 03 00 	lea    rsi,[rip+0x33a7e]        # 2435b0 <__unnamed_53>
  20fb32:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  20fb36:	e8 25 3f 00 00       	call   213a60 <eql>
  20fb3b:	88 c1                	mov    cl,al
  20fb3d:	a8 01                	test   al,0x1
  20fb3f:	88 8d 65 fb ff ff    	mov    BYTE PTR [rbp-0x49b],cl
  20fb45:	75 1b                	jne    20fb62 <Elf_openFile+0x132>
  20fb47:	eb 00                	jmp    20fb49 <Elf_openFile+0x119>
  20fb49:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20fb50:	e8 3b c1 ff ff       	call   20bc90 <__zig_return_error>
  20fb55:	66 b8 21 00          	mov    ax,0x21
  20fb59:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20fb60:	5d                   	pop    rbp
  20fb61:	c3                   	ret    
  20fb62:	eb 00                	jmp    20fb64 <Elf_openFile+0x134>
  20fb64:	48 8d 7d c0          	lea    rdi,[rbp-0x40]

        elf.is_64 = switch (try in.readByte()) {
  20fb68:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  20fb6f:	48 83 c0 09          	add    rax,0x9
  20fb73:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  20fb7a:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  20fb81:	48 89 85 58 fb ff ff 	mov    QWORD PTR [rbp-0x4a8],rax
  20fb88:	e8 b3 3f 00 00       	call   213b40 <InStream(ReadError)_readByte>
  20fb8d:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  20fb92:	74 27                	je     20fbbb <Elf_openFile+0x18b>
  20fb94:	66 8b 45 c0          	mov    ax,WORD PTR [rbp-0x40]
  20fb98:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20fb9f:	66 89 85 56 fb ff ff 	mov    WORD PTR [rbp-0x4aa],ax
  20fba6:	e8 e5 c0 ff ff       	call   20bc90 <__zig_return_error>
  20fbab:	66 8b 85 56 fb ff ff 	mov    ax,WORD PTR [rbp-0x4aa]
  20fbb2:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20fbb9:	5d                   	pop    rbp
  20fbba:	c3                   	ret    
  20fbbb:	8a 45 c2             	mov    al,BYTE PTR [rbp-0x3e]
  20fbbe:	88 c1                	mov    cl,al
  20fbc0:	80 e9 01             	sub    cl,0x1
  20fbc3:	88 85 55 fb ff ff    	mov    BYTE PTR [rbp-0x4ab],al
  20fbc9:	88 8d 54 fb ff ff    	mov    BYTE PTR [rbp-0x4ac],cl
  20fbcf:	74 2d                	je     20fbfe <Elf_openFile+0x1ce>
  20fbd1:	eb 00                	jmp    20fbd3 <Elf_openFile+0x1a3>
  20fbd3:	8a 85 55 fb ff ff    	mov    al,BYTE PTR [rbp-0x4ab]
  20fbd9:	2c 02                	sub    al,0x2
  20fbdb:	88 85 53 fb ff ff    	mov    BYTE PTR [rbp-0x4ad],al
  20fbe1:	74 27                	je     20fc0a <Elf_openFile+0x1da>
  20fbe3:	eb 00                	jmp    20fbe5 <Elf_openFile+0x1b5>
            1 => false,
            2 => true,
            else => return error.InvalidFormat,
  20fbe5:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20fbec:	e8 9f c0 ff ff       	call   20bc90 <__zig_return_error>
  20fbf1:	66 b8 21 00          	mov    ax,0x21
  20fbf5:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20fbfc:	5d                   	pop    rbp
  20fbfd:	c3                   	ret    
  20fbfe:	31 c0                	xor    eax,eax
  20fc00:	88 c1                	mov    cl,al
        elf.is_64 = switch (try in.readByte()) {
  20fc02:	88 8d 52 fb ff ff    	mov    BYTE PTR [rbp-0x4ae],cl
  20fc08:	eb 0a                	jmp    20fc14 <Elf_openFile+0x1e4>
  20fc0a:	b0 01                	mov    al,0x1
  20fc0c:	88 85 52 fb ff ff    	mov    BYTE PTR [rbp-0x4ae],al
  20fc12:	eb 00                	jmp    20fc14 <Elf_openFile+0x1e4>
  20fc14:	8a 85 52 fb ff ff    	mov    al,BYTE PTR [rbp-0x4ae]
  20fc1a:	48 8d 7d b0          	lea    rdi,[rbp-0x50]
  20fc1e:	24 01                	and    al,0x1
  20fc20:	48 8b 8d 58 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x4a8]
  20fc27:	88 01                	mov    BYTE PTR [rcx],al
        };

        elf.endian = switch (try in.readByte()) {
  20fc29:	48 8b 95 18 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x3e8]
  20fc30:	48 83 c2 0a          	add    rdx,0xa
  20fc34:	48 8b b5 f0 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x410]
  20fc3b:	4c 8b 85 70 fb ff ff 	mov    r8,QWORD PTR [rbp-0x490]
  20fc42:	48 89 b5 48 fb ff ff 	mov    QWORD PTR [rbp-0x4b8],rsi
  20fc49:	4c 89 c6             	mov    rsi,r8
  20fc4c:	4c 8b 8d 48 fb ff ff 	mov    r9,QWORD PTR [rbp-0x4b8]
  20fc53:	48 89 95 40 fb ff ff 	mov    QWORD PTR [rbp-0x4c0],rdx
  20fc5a:	4c 89 ca             	mov    rdx,r9
  20fc5d:	e8 de 3e 00 00       	call   213b40 <InStream(ReadError)_readByte>
  20fc62:	66 83 7d b0 00       	cmp    WORD PTR [rbp-0x50],0x0
  20fc67:	74 27                	je     20fc90 <Elf_openFile+0x260>
  20fc69:	66 8b 45 b0          	mov    ax,WORD PTR [rbp-0x50]
  20fc6d:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20fc74:	66 89 85 3e fb ff ff 	mov    WORD PTR [rbp-0x4c2],ax
  20fc7b:	e8 10 c0 ff ff       	call   20bc90 <__zig_return_error>
  20fc80:	66 8b 85 3e fb ff ff 	mov    ax,WORD PTR [rbp-0x4c2]
  20fc87:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20fc8e:	5d                   	pop    rbp
  20fc8f:	c3                   	ret    
  20fc90:	8a 45 b2             	mov    al,BYTE PTR [rbp-0x4e]
  20fc93:	88 c1                	mov    cl,al
  20fc95:	80 e9 01             	sub    cl,0x1
  20fc98:	88 85 3d fb ff ff    	mov    BYTE PTR [rbp-0x4c3],al
  20fc9e:	88 8d 3c fb ff ff    	mov    BYTE PTR [rbp-0x4c4],cl
  20fca4:	74 2d                	je     20fcd3 <Elf_openFile+0x2a3>
  20fca6:	eb 00                	jmp    20fca8 <Elf_openFile+0x278>
  20fca8:	8a 85 3d fb ff ff    	mov    al,BYTE PTR [rbp-0x4c3]
  20fcae:	2c 02                	sub    al,0x2
  20fcb0:	88 85 3b fb ff ff    	mov    BYTE PTR [rbp-0x4c5],al
  20fcb6:	74 25                	je     20fcdd <Elf_openFile+0x2ad>
  20fcb8:	eb 00                	jmp    20fcba <Elf_openFile+0x28a>
            1 => builtin.Endian.Little,
            2 => builtin.Endian.Big,
            else => return error.InvalidFormat,
  20fcba:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20fcc1:	e8 ca bf ff ff       	call   20bc90 <__zig_return_error>
  20fcc6:	66 b8 21 00          	mov    ax,0x21
  20fcca:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20fcd1:	5d                   	pop    rbp
  20fcd2:	c3                   	ret    
  20fcd3:	b0 01                	mov    al,0x1
        elf.endian = switch (try in.readByte()) {
  20fcd5:	88 85 3a fb ff ff    	mov    BYTE PTR [rbp-0x4c6],al
  20fcdb:	eb 0c                	jmp    20fce9 <Elf_openFile+0x2b9>
  20fcdd:	31 c0                	xor    eax,eax
  20fcdf:	88 c1                	mov    cl,al
  20fce1:	88 8d 3a fb ff ff    	mov    BYTE PTR [rbp-0x4c6],cl
  20fce7:	eb 00                	jmp    20fce9 <Elf_openFile+0x2b9>
  20fce9:	8a 85 3a fb ff ff    	mov    al,BYTE PTR [rbp-0x4c6]
  20fcef:	48 8d 7d a0          	lea    rdi,[rbp-0x60]
  20fcf3:	24 01                	and    al,0x1
  20fcf5:	48 8b 8d 40 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x4c0]
  20fcfc:	88 01                	mov    BYTE PTR [rcx],al
        };

        const version_byte = try in.readByte();
  20fcfe:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  20fd05:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  20fd0c:	e8 2f 3e 00 00       	call   213b40 <InStream(ReadError)_readByte>
  20fd11:	66 83 7d a0 00       	cmp    WORD PTR [rbp-0x60],0x0
  20fd16:	74 27                	je     20fd3f <Elf_openFile+0x30f>
  20fd18:	66 8b 45 a0          	mov    ax,WORD PTR [rbp-0x60]
  20fd1c:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20fd23:	66 89 85 38 fb ff ff 	mov    WORD PTR [rbp-0x4c8],ax
  20fd2a:	e8 61 bf ff ff       	call   20bc90 <__zig_return_error>
  20fd2f:	66 8b 85 38 fb ff ff 	mov    ax,WORD PTR [rbp-0x4c8]
  20fd36:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20fd3d:	5d                   	pop    rbp
  20fd3e:	c3                   	ret    
  20fd3f:	8a 45 a2             	mov    al,BYTE PTR [rbp-0x5e]
  20fd42:	88 85 eb fb ff ff    	mov    BYTE PTR [rbp-0x415],al
        if (version_byte != 1) return error.InvalidFormat;
  20fd48:	80 bd eb fb ff ff 01 	cmp    BYTE PTR [rbp-0x415],0x1
  20fd4f:	74 19                	je     20fd6a <Elf_openFile+0x33a>
  20fd51:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20fd58:	e8 33 bf ff ff       	call   20bc90 <__zig_return_error>
  20fd5d:	66 b8 21 00          	mov    ax,0x21
  20fd61:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20fd68:	5d                   	pop    rbp
  20fd69:	c3                   	ret    
  20fd6a:	eb 00                	jmp    20fd6c <Elf_openFile+0x33c>
  20fd6c:	b8 09 00 00 00       	mov    eax,0x9
  20fd71:	89 c2                	mov    edx,eax

        // skip over padding
        try elf.in_file.seekForward(9);
  20fd73:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  20fd7a:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  20fd7d:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20fd84:	e8 87 3e 00 00       	call   213c10 <File_seekForward>
  20fd89:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  20fd8d:	66 83 7d 96 00       	cmp    WORD PTR [rbp-0x6a],0x0
  20fd92:	74 27                	je     20fdbb <Elf_openFile+0x38b>
  20fd94:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  20fd98:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20fd9f:	66 89 85 36 fb ff ff 	mov    WORD PTR [rbp-0x4ca],ax
  20fda6:	e8 e5 be ff ff       	call   20bc90 <__zig_return_error>
  20fdab:	66 8b 85 36 fb ff ff 	mov    ax,WORD PTR [rbp-0x4ca]
  20fdb2:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20fdb9:	5d                   	pop    rbp
  20fdba:	c3                   	ret    
  20fdbb:	48 8d 45 90          	lea    rax,[rbp-0x70]

        elf.file_type = switch (try in.readInt(elf.endian, u16)) {
  20fdbf:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  20fdc6:	48 83 c1 0b          	add    rcx,0xb
  20fdca:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  20fdd1:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  20fdd8:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  20fddc:	44 0f b6 c7          	movzx  r8d,dil
  20fde0:	48 8d 7d 90          	lea    rdi,[rbp-0x70]
  20fde4:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  20fdeb:	48 89 8d 28 fb ff ff 	mov    QWORD PTR [rbp-0x4d8],rcx
  20fdf2:	44 89 c1             	mov    ecx,r8d
  20fdf5:	48 89 85 20 fb ff ff 	mov    QWORD PTR [rbp-0x4e0],rax
  20fdfc:	e8 2f 3f 00 00       	call   213d30 <InStream(ReadError)_readInt>
  20fe01:	66 83 7d 90 00       	cmp    WORD PTR [rbp-0x70],0x0
  20fe06:	74 27                	je     20fe2f <Elf_openFile+0x3ff>
  20fe08:	66 8b 45 90          	mov    ax,WORD PTR [rbp-0x70]
  20fe0c:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20fe13:	66 89 85 1e fb ff ff 	mov    WORD PTR [rbp-0x4e2],ax
  20fe1a:	e8 71 be ff ff       	call   20bc90 <__zig_return_error>
  20fe1f:	66 8b 85 1e fb ff ff 	mov    ax,WORD PTR [rbp-0x4e2]
  20fe26:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20fe2d:	5d                   	pop    rbp
  20fe2e:	c3                   	ret    
  20fe2f:	0f b7 45 92          	movzx  eax,WORD PTR [rbp-0x6e]
  20fe33:	83 c0 ff             	add    eax,0xffffffff
  20fe36:	66 89 c1             	mov    cx,ax
  20fe39:	0f b7 c1             	movzx  eax,cx
  20fe3c:	89 c2                	mov    edx,eax
  20fe3e:	83 e8 03             	sub    eax,0x3
  20fe41:	48 89 95 10 fb ff ff 	mov    QWORD PTR [rbp-0x4f0],rdx
  20fe48:	89 85 0c fb ff ff    	mov    DWORD PTR [rbp-0x4f4],eax
  20fe4e:	77 17                	ja     20fe67 <Elf_openFile+0x437>
  20fe50:	48 8d 05 71 0e ff ff 	lea    rax,[rip+0xffffffffffff0e71]        # 200cc8 <__unnamed_181+0x10>
  20fe57:	48 8b 8d 10 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x4f0]
  20fe5e:	48 63 14 88          	movsxd rdx,DWORD PTR [rax+rcx*4]
  20fe62:	48 01 c2             	add    rdx,rax
  20fe65:	ff e2                	jmp    rdx
            1 => FileType.Relocatable,
            2 => FileType.Executable,
            3 => FileType.Shared,
            4 => FileType.Core,
            else => return error.InvalidFormat,
  20fe67:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20fe6e:	e8 1d be ff ff       	call   20bc90 <__zig_return_error>
  20fe73:	66 b8 21 00          	mov    ax,0x21
  20fe77:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20fe7e:	5d                   	pop    rbp
  20fe7f:	c3                   	ret    
  20fe80:	31 c0                	xor    eax,eax
  20fe82:	88 c1                	mov    cl,al
        elf.file_type = switch (try in.readInt(elf.endian, u16)) {
  20fe84:	88 8d 0b fb ff ff    	mov    BYTE PTR [rbp-0x4f5],cl
  20fe8a:	eb 1e                	jmp    20feaa <Elf_openFile+0x47a>
  20fe8c:	b0 01                	mov    al,0x1
  20fe8e:	88 85 0b fb ff ff    	mov    BYTE PTR [rbp-0x4f5],al
  20fe94:	eb 14                	jmp    20feaa <Elf_openFile+0x47a>
  20fe96:	b0 02                	mov    al,0x2
  20fe98:	88 85 0b fb ff ff    	mov    BYTE PTR [rbp-0x4f5],al
  20fe9e:	eb 0a                	jmp    20feaa <Elf_openFile+0x47a>
  20fea0:	b0 03                	mov    al,0x3
  20fea2:	88 85 0b fb ff ff    	mov    BYTE PTR [rbp-0x4f5],al
  20fea8:	eb 00                	jmp    20feaa <Elf_openFile+0x47a>
  20feaa:	8a 85 0b fb ff ff    	mov    al,BYTE PTR [rbp-0x4f5]
  20feb0:	48 8d 4d 80          	lea    rcx,[rbp-0x80]
  20feb4:	24 03                	and    al,0x3
  20feb6:	48 8b 95 28 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x4d8]
  20febd:	88 02                	mov    BYTE PTR [rdx],al
        };

        elf.arch = switch (try in.readInt(elf.endian, u16)) {
  20febf:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  20fec6:	48 83 c6 0c          	add    rsi,0xc
  20feca:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  20fed1:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  20fed8:	8a 47 0a             	mov    al,BYTE PTR [rdi+0xa]
  20fedb:	44 0f b6 c0          	movzx  r8d,al
  20fedf:	48 8d 7d 80          	lea    rdi,[rbp-0x80]
  20fee3:	4c 8b 8d 70 fb ff ff 	mov    r9,QWORD PTR [rbp-0x490]
  20feea:	48 89 b5 00 fb ff ff 	mov    QWORD PTR [rbp-0x500],rsi
  20fef1:	4c 89 ce             	mov    rsi,r9
  20fef4:	48 89 8d f8 fa ff ff 	mov    QWORD PTR [rbp-0x508],rcx
  20fefb:	44 89 c1             	mov    ecx,r8d
  20fefe:	e8 2d 3e 00 00       	call   213d30 <InStream(ReadError)_readInt>
  20ff03:	66 83 7d 80 00       	cmp    WORD PTR [rbp-0x80],0x0
  20ff08:	74 27                	je     20ff31 <Elf_openFile+0x501>
  20ff0a:	66 8b 45 80          	mov    ax,WORD PTR [rbp-0x80]
  20ff0e:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20ff15:	66 89 85 f6 fa ff ff 	mov    WORD PTR [rbp-0x50a],ax
  20ff1c:	e8 6f bd ff ff       	call   20bc90 <__zig_return_error>
  20ff21:	66 8b 85 f6 fa ff ff 	mov    ax,WORD PTR [rbp-0x50a]
  20ff28:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20ff2f:	5d                   	pop    rbp
  20ff30:	c3                   	ret    
  20ff31:	0f b7 45 82          	movzx  eax,WORD PTR [rbp-0x7e]
  20ff35:	66 89 c1             	mov    cx,ax
  20ff38:	83 e8 02             	sub    eax,0x2
  20ff3b:	66 89 8d f4 fa ff ff 	mov    WORD PTR [rbp-0x50c],cx
  20ff42:	89 85 f0 fa ff ff    	mov    DWORD PTR [rbp-0x510],eax
  20ff48:	0f 84 ee 00 00 00    	je     21003c <Elf_openFile+0x60c>
  20ff4e:	eb 00                	jmp    20ff50 <Elf_openFile+0x520>
  20ff50:	66 8b 85 f4 fa ff ff 	mov    ax,WORD PTR [rbp-0x50c]
  20ff57:	0f b7 c8             	movzx  ecx,ax
  20ff5a:	83 e9 03             	sub    ecx,0x3
  20ff5d:	89 8d ec fa ff ff    	mov    DWORD PTR [rbp-0x514],ecx
  20ff63:	0f 84 df 00 00 00    	je     210048 <Elf_openFile+0x618>
  20ff69:	eb 00                	jmp    20ff6b <Elf_openFile+0x53b>
  20ff6b:	66 8b 85 f4 fa ff ff 	mov    ax,WORD PTR [rbp-0x50c]
  20ff72:	0f b7 c8             	movzx  ecx,ax
  20ff75:	83 e9 08             	sub    ecx,0x8
  20ff78:	89 8d e8 fa ff ff    	mov    DWORD PTR [rbp-0x518],ecx
  20ff7e:	0f 84 ce 00 00 00    	je     210052 <Elf_openFile+0x622>
  20ff84:	eb 00                	jmp    20ff86 <Elf_openFile+0x556>
  20ff86:	66 8b 85 f4 fa ff ff 	mov    ax,WORD PTR [rbp-0x50c]
  20ff8d:	0f b7 c8             	movzx  ecx,ax
  20ff90:	83 e9 14             	sub    ecx,0x14
  20ff93:	89 8d e4 fa ff ff    	mov    DWORD PTR [rbp-0x51c],ecx
  20ff99:	0f 84 bd 00 00 00    	je     21005c <Elf_openFile+0x62c>
  20ff9f:	eb 00                	jmp    20ffa1 <Elf_openFile+0x571>
  20ffa1:	66 8b 85 f4 fa ff ff 	mov    ax,WORD PTR [rbp-0x50c]
  20ffa8:	0f b7 c8             	movzx  ecx,ax
  20ffab:	83 e9 28             	sub    ecx,0x28
  20ffae:	89 8d e0 fa ff ff    	mov    DWORD PTR [rbp-0x520],ecx
  20ffb4:	0f 84 ac 00 00 00    	je     210066 <Elf_openFile+0x636>
  20ffba:	eb 00                	jmp    20ffbc <Elf_openFile+0x58c>
  20ffbc:	66 8b 85 f4 fa ff ff 	mov    ax,WORD PTR [rbp-0x50c]
  20ffc3:	0f b7 c8             	movzx  ecx,ax
  20ffc6:	83 e9 2a             	sub    ecx,0x2a
  20ffc9:	89 8d dc fa ff ff    	mov    DWORD PTR [rbp-0x524],ecx
  20ffcf:	0f 84 9b 00 00 00    	je     210070 <Elf_openFile+0x640>
  20ffd5:	eb 00                	jmp    20ffd7 <Elf_openFile+0x5a7>
  20ffd7:	66 8b 85 f4 fa ff ff 	mov    ax,WORD PTR [rbp-0x50c]
  20ffde:	0f b7 c8             	movzx  ecx,ax
  20ffe1:	83 e9 32             	sub    ecx,0x32
  20ffe4:	89 8d d8 fa ff ff    	mov    DWORD PTR [rbp-0x528],ecx
  20ffea:	0f 84 8a 00 00 00    	je     21007a <Elf_openFile+0x64a>
  20fff0:	eb 00                	jmp    20fff2 <Elf_openFile+0x5c2>
  20fff2:	66 8b 85 f4 fa ff ff 	mov    ax,WORD PTR [rbp-0x50c]
  20fff9:	0f b7 c8             	movzx  ecx,ax
  20fffc:	83 e9 3e             	sub    ecx,0x3e
  20ffff:	89 8d d4 fa ff ff    	mov    DWORD PTR [rbp-0x52c],ecx
  210005:	74 7d                	je     210084 <Elf_openFile+0x654>
  210007:	eb 00                	jmp    210009 <Elf_openFile+0x5d9>
  210009:	66 8b 85 f4 fa ff ff 	mov    ax,WORD PTR [rbp-0x50c]
  210010:	0f b7 c8             	movzx  ecx,ax
  210013:	81 e9 b7 00 00 00    	sub    ecx,0xb7
  210019:	89 8d d0 fa ff ff    	mov    DWORD PTR [rbp-0x530],ecx
  21001f:	74 6d                	je     21008e <Elf_openFile+0x65e>
  210021:	eb 00                	jmp    210023 <Elf_openFile+0x5f3>
            0x28 => Arch.Arm,
            0x2A => Arch.SuperH,
            0x32 => Arch.IA_64,
            0x3E => Arch.x86_64,
            0xb7 => Arch.AArch64,
            else => return error.InvalidFormat,
  210023:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  21002a:	e8 61 bc ff ff       	call   20bc90 <__zig_return_error>
  21002f:	66 b8 21 00          	mov    ax,0x21
  210033:	48 81 c4 20 09 00 00 	add    rsp,0x920
  21003a:	5d                   	pop    rbp
  21003b:	c3                   	ret    
  21003c:	31 c0                	xor    eax,eax
  21003e:	88 c1                	mov    cl,al
        elf.arch = switch (try in.readInt(elf.endian, u16)) {
  210040:	88 8d cf fa ff ff    	mov    BYTE PTR [rbp-0x531],cl
  210046:	eb 50                	jmp    210098 <Elf_openFile+0x668>
  210048:	b0 01                	mov    al,0x1
  21004a:	88 85 cf fa ff ff    	mov    BYTE PTR [rbp-0x531],al
  210050:	eb 46                	jmp    210098 <Elf_openFile+0x668>
  210052:	b0 02                	mov    al,0x2
  210054:	88 85 cf fa ff ff    	mov    BYTE PTR [rbp-0x531],al
  21005a:	eb 3c                	jmp    210098 <Elf_openFile+0x668>
  21005c:	b0 03                	mov    al,0x3
  21005e:	88 85 cf fa ff ff    	mov    BYTE PTR [rbp-0x531],al
  210064:	eb 32                	jmp    210098 <Elf_openFile+0x668>
  210066:	b0 04                	mov    al,0x4
  210068:	88 85 cf fa ff ff    	mov    BYTE PTR [rbp-0x531],al
  21006e:	eb 28                	jmp    210098 <Elf_openFile+0x668>
  210070:	b0 05                	mov    al,0x5
  210072:	88 85 cf fa ff ff    	mov    BYTE PTR [rbp-0x531],al
  210078:	eb 1e                	jmp    210098 <Elf_openFile+0x668>
  21007a:	b0 06                	mov    al,0x6
  21007c:	88 85 cf fa ff ff    	mov    BYTE PTR [rbp-0x531],al
  210082:	eb 14                	jmp    210098 <Elf_openFile+0x668>
  210084:	b0 07                	mov    al,0x7
  210086:	88 85 cf fa ff ff    	mov    BYTE PTR [rbp-0x531],al
  21008c:	eb 0a                	jmp    210098 <Elf_openFile+0x668>
  21008e:	b0 08                	mov    al,0x8
  210090:	88 85 cf fa ff ff    	mov    BYTE PTR [rbp-0x531],al
  210096:	eb 00                	jmp    210098 <Elf_openFile+0x668>
  210098:	8a 85 cf fa ff ff    	mov    al,BYTE PTR [rbp-0x531]
  21009e:	48 8d 8d 70 ff ff ff 	lea    rcx,[rbp-0x90]
  2100a5:	24 0f                	and    al,0xf
  2100a7:	48 8b 95 00 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x500]
  2100ae:	88 02                	mov    BYTE PTR [rdx],al
        };

        const elf_version = try in.readInt(elf.endian, u32);
  2100b0:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  2100b7:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  2100be:	8a 46 0a             	mov    al,BYTE PTR [rsi+0xa]
  2100c1:	0f b6 f8             	movzx  edi,al
  2100c4:	48 8d b5 70 ff ff ff 	lea    rsi,[rbp-0x90]
  2100cb:	89 bd c8 fa ff ff    	mov    DWORD PTR [rbp-0x538],edi
  2100d1:	48 89 f7             	mov    rdi,rsi
  2100d4:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  2100db:	44 8b 85 c8 fa ff ff 	mov    r8d,DWORD PTR [rbp-0x538]
  2100e2:	48 89 8d c0 fa ff ff 	mov    QWORD PTR [rbp-0x540],rcx
  2100e9:	44 89 c1             	mov    ecx,r8d
  2100ec:	e8 4f 3d 00 00       	call   213e40 <InStream(ReadError)_readInt.32>
  2100f1:	66 83 bd 70 ff ff ff 	cmp    WORD PTR [rbp-0x90],0x0
  2100f8:	00 
  2100f9:	74 2a                	je     210125 <Elf_openFile+0x6f5>
  2100fb:	66 8b 85 70 ff ff ff 	mov    ax,WORD PTR [rbp-0x90]
  210102:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210109:	66 89 85 be fa ff ff 	mov    WORD PTR [rbp-0x542],ax
  210110:	e8 7b bb ff ff       	call   20bc90 <__zig_return_error>
  210115:	66 8b 85 be fa ff ff 	mov    ax,WORD PTR [rbp-0x542]
  21011c:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210123:	5d                   	pop    rbp
  210124:	c3                   	ret    
  210125:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
  21012b:	89 85 e4 fb ff ff    	mov    DWORD PTR [rbp-0x41c],eax
        if (elf_version != 1) return error.InvalidFormat;
  210131:	83 bd e4 fb ff ff 01 	cmp    DWORD PTR [rbp-0x41c],0x1
  210138:	74 19                	je     210153 <Elf_openFile+0x723>
  21013a:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210141:	e8 4a bb ff ff       	call   20bc90 <__zig_return_error>
  210146:	66 b8 21 00          	mov    ax,0x21
  21014a:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210151:	5d                   	pop    rbp
  210152:	c3                   	ret    
  210153:	eb 00                	jmp    210155 <Elf_openFile+0x725>

        if (elf.is_64) {
  210155:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  21015c:	f6 40 09 01          	test   BYTE PTR [rax+0x9],0x1
  210160:	75 05                	jne    210167 <Elf_openFile+0x737>
  210162:	e9 b8 01 00 00       	jmp    21031f <Elf_openFile+0x8ef>
  210167:	48 8d 85 58 ff ff ff 	lea    rax,[rbp-0xa8]
            elf.entry_addr = try in.readInt(elf.endian, u64);
  21016e:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  210175:	48 83 c1 10          	add    rcx,0x10
  210179:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  210180:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  210187:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  21018b:	44 0f b6 c7          	movzx  r8d,dil
  21018f:	48 8d bd 58 ff ff ff 	lea    rdi,[rbp-0xa8]
  210196:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  21019d:	48 89 8d b0 fa ff ff 	mov    QWORD PTR [rbp-0x550],rcx
  2101a4:	44 89 c1             	mov    ecx,r8d
  2101a7:	48 89 85 a8 fa ff ff 	mov    QWORD PTR [rbp-0x558],rax
  2101ae:	e8 9d 3d 00 00       	call   213f50 <InStream(ReadError)_readInt.33>
  2101b3:	66 83 bd 58 ff ff ff 	cmp    WORD PTR [rbp-0xa8],0x0
  2101ba:	00 
  2101bb:	74 2a                	je     2101e7 <Elf_openFile+0x7b7>
  2101bd:	66 8b 85 58 ff ff ff 	mov    ax,WORD PTR [rbp-0xa8]
  2101c4:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2101cb:	66 89 85 a6 fa ff ff 	mov    WORD PTR [rbp-0x55a],ax
  2101d2:	e8 b9 ba ff ff       	call   20bc90 <__zig_return_error>
  2101d7:	66 8b 85 a6 fa ff ff 	mov    ax,WORD PTR [rbp-0x55a]
  2101de:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2101e5:	5d                   	pop    rbp
  2101e6:	c3                   	ret    
  2101e7:	48 8d 85 38 ff ff ff 	lea    rax,[rbp-0xc8]
  2101ee:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  2101f5:	48 8b 95 b0 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x550]
  2101fc:	48 89 0a             	mov    QWORD PTR [rdx],rcx
            elf.program_header_offset = try in.readInt(elf.endian, u64);
  2101ff:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  210206:	48 83 c1 18          	add    rcx,0x18
  21020a:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  210211:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  210218:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  21021c:	44 0f b6 c7          	movzx  r8d,dil
  210220:	48 8d bd 38 ff ff ff 	lea    rdi,[rbp-0xc8]
  210227:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  21022e:	48 89 8d 98 fa ff ff 	mov    QWORD PTR [rbp-0x568],rcx
  210235:	44 89 c1             	mov    ecx,r8d
  210238:	48 89 85 90 fa ff ff 	mov    QWORD PTR [rbp-0x570],rax
  21023f:	e8 0c 3d 00 00       	call   213f50 <InStream(ReadError)_readInt.33>
  210244:	66 83 bd 38 ff ff ff 	cmp    WORD PTR [rbp-0xc8],0x0
  21024b:	00 
  21024c:	74 2a                	je     210278 <Elf_openFile+0x848>
  21024e:	66 8b 85 38 ff ff ff 	mov    ax,WORD PTR [rbp-0xc8]
  210255:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  21025c:	66 89 85 8e fa ff ff 	mov    WORD PTR [rbp-0x572],ax
  210263:	e8 28 ba ff ff       	call   20bc90 <__zig_return_error>
  210268:	66 8b 85 8e fa ff ff 	mov    ax,WORD PTR [rbp-0x572]
  21026f:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210276:	5d                   	pop    rbp
  210277:	c3                   	ret    
  210278:	48 8d 85 18 ff ff ff 	lea    rax,[rbp-0xe8]
  21027f:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  210286:	48 8b 95 98 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x568]
  21028d:	48 89 0a             	mov    QWORD PTR [rdx],rcx
            elf.section_header_offset = try in.readInt(elf.endian, u64);
  210290:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  210297:	48 83 c1 20          	add    rcx,0x20
  21029b:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  2102a2:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  2102a9:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  2102ad:	44 0f b6 c7          	movzx  r8d,dil
  2102b1:	48 8d bd 18 ff ff ff 	lea    rdi,[rbp-0xe8]
  2102b8:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  2102bf:	48 89 8d 80 fa ff ff 	mov    QWORD PTR [rbp-0x580],rcx
  2102c6:	44 89 c1             	mov    ecx,r8d
  2102c9:	48 89 85 78 fa ff ff 	mov    QWORD PTR [rbp-0x588],rax
  2102d0:	e8 7b 3c 00 00       	call   213f50 <InStream(ReadError)_readInt.33>
  2102d5:	66 83 bd 18 ff ff ff 	cmp    WORD PTR [rbp-0xe8],0x0
  2102dc:	00 
  2102dd:	74 2a                	je     210309 <Elf_openFile+0x8d9>
  2102df:	66 8b 85 18 ff ff ff 	mov    ax,WORD PTR [rbp-0xe8]
  2102e6:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2102ed:	66 89 85 76 fa ff ff 	mov    WORD PTR [rbp-0x58a],ax
  2102f4:	e8 97 b9 ff ff       	call   20bc90 <__zig_return_error>
  2102f9:	66 8b 85 76 fa ff ff 	mov    ax,WORD PTR [rbp-0x58a]
  210300:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210307:	5d                   	pop    rbp
  210308:	c3                   	ret    
  210309:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  210310:	48 8b 8d 80 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x580]
  210317:	48 89 01             	mov    QWORD PTR [rcx],rax
        if (elf.is_64) {
  21031a:	e9 d8 01 00 00       	jmp    2104f7 <Elf_openFile+0xac7>
  21031f:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
        } else {
            elf.entry_addr = u64(try in.readInt(elf.endian, u32));
  210326:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  21032d:	48 83 c1 10          	add    rcx,0x10
  210331:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  210338:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  21033f:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  210343:	44 0f b6 c7          	movzx  r8d,dil
  210347:	48 8d bd 00 ff ff ff 	lea    rdi,[rbp-0x100]
  21034e:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  210355:	48 89 8d 68 fa ff ff 	mov    QWORD PTR [rbp-0x598],rcx
  21035c:	44 89 c1             	mov    ecx,r8d
  21035f:	48 89 85 60 fa ff ff 	mov    QWORD PTR [rbp-0x5a0],rax
  210366:	e8 d5 3a 00 00       	call   213e40 <InStream(ReadError)_readInt.32>
  21036b:	66 83 bd 00 ff ff ff 	cmp    WORD PTR [rbp-0x100],0x0
  210372:	00 
  210373:	74 2a                	je     21039f <Elf_openFile+0x96f>
  210375:	66 8b 85 00 ff ff ff 	mov    ax,WORD PTR [rbp-0x100]
  21037c:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210383:	66 89 85 5e fa ff ff 	mov    WORD PTR [rbp-0x5a2],ax
  21038a:	e8 01 b9 ff ff       	call   20bc90 <__zig_return_error>
  21038f:	66 8b 85 5e fa ff ff 	mov    ax,WORD PTR [rbp-0x5a2]
  210396:	48 81 c4 20 09 00 00 	add    rsp,0x920
  21039d:	5d                   	pop    rbp
  21039e:	c3                   	ret    
  21039f:	48 8d 85 f0 fe ff ff 	lea    rax,[rbp-0x110]
  2103a6:	8b 8d 04 ff ff ff    	mov    ecx,DWORD PTR [rbp-0xfc]
  2103ac:	89 ca                	mov    edx,ecx
  2103ae:	48 8b b5 68 fa ff ff 	mov    rsi,QWORD PTR [rbp-0x598]
  2103b5:	48 89 16             	mov    QWORD PTR [rsi],rdx
            elf.program_header_offset = u64(try in.readInt(elf.endian, u32));
  2103b8:	48 8b 95 18 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x3e8]
  2103bf:	48 83 c2 18          	add    rdx,0x18
  2103c3:	48 8b bd f0 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x410]
  2103ca:	4c 8b 85 18 fc ff ff 	mov    r8,QWORD PTR [rbp-0x3e8]
  2103d1:	45 8a 48 0a          	mov    r9b,BYTE PTR [r8+0xa]
  2103d5:	41 0f b6 c9          	movzx  ecx,r9b
  2103d9:	4c 8d 85 f0 fe ff ff 	lea    r8,[rbp-0x110]
  2103e0:	48 89 bd 50 fa ff ff 	mov    QWORD PTR [rbp-0x5b0],rdi
  2103e7:	4c 89 c7             	mov    rdi,r8
  2103ea:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  2103f1:	4c 8b 85 50 fa ff ff 	mov    r8,QWORD PTR [rbp-0x5b0]
  2103f8:	48 89 95 48 fa ff ff 	mov    QWORD PTR [rbp-0x5b8],rdx
  2103ff:	4c 89 c2             	mov    rdx,r8
  210402:	48 89 85 40 fa ff ff 	mov    QWORD PTR [rbp-0x5c0],rax
  210409:	e8 32 3a 00 00       	call   213e40 <InStream(ReadError)_readInt.32>
  21040e:	66 83 bd f0 fe ff ff 	cmp    WORD PTR [rbp-0x110],0x0
  210415:	00 
  210416:	74 2a                	je     210442 <Elf_openFile+0xa12>
  210418:	66 8b 85 f0 fe ff ff 	mov    ax,WORD PTR [rbp-0x110]
  21041f:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210426:	66 89 85 3e fa ff ff 	mov    WORD PTR [rbp-0x5c2],ax
  21042d:	e8 5e b8 ff ff       	call   20bc90 <__zig_return_error>
  210432:	66 8b 85 3e fa ff ff 	mov    ax,WORD PTR [rbp-0x5c2]
  210439:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210440:	5d                   	pop    rbp
  210441:	c3                   	ret    
  210442:	48 8d 85 e0 fe ff ff 	lea    rax,[rbp-0x120]
  210449:	8b 8d f4 fe ff ff    	mov    ecx,DWORD PTR [rbp-0x10c]
  21044f:	89 ca                	mov    edx,ecx
  210451:	48 8b b5 48 fa ff ff 	mov    rsi,QWORD PTR [rbp-0x5b8]
  210458:	48 89 16             	mov    QWORD PTR [rsi],rdx
            elf.section_header_offset = u64(try in.readInt(elf.endian, u32));
  21045b:	48 8b 95 18 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x3e8]
  210462:	48 83 c2 20          	add    rdx,0x20
  210466:	48 8b bd f0 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x410]
  21046d:	4c 8b 85 18 fc ff ff 	mov    r8,QWORD PTR [rbp-0x3e8]
  210474:	45 8a 48 0a          	mov    r9b,BYTE PTR [r8+0xa]
  210478:	41 0f b6 c9          	movzx  ecx,r9b
  21047c:	4c 8d 85 e0 fe ff ff 	lea    r8,[rbp-0x120]
  210483:	48 89 bd 30 fa ff ff 	mov    QWORD PTR [rbp-0x5d0],rdi
  21048a:	4c 89 c7             	mov    rdi,r8
  21048d:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  210494:	4c 8b 85 30 fa ff ff 	mov    r8,QWORD PTR [rbp-0x5d0]
  21049b:	48 89 95 28 fa ff ff 	mov    QWORD PTR [rbp-0x5d8],rdx
  2104a2:	4c 89 c2             	mov    rdx,r8
  2104a5:	48 89 85 20 fa ff ff 	mov    QWORD PTR [rbp-0x5e0],rax
  2104ac:	e8 8f 39 00 00       	call   213e40 <InStream(ReadError)_readInt.32>
  2104b1:	66 83 bd e0 fe ff ff 	cmp    WORD PTR [rbp-0x120],0x0
  2104b8:	00 
  2104b9:	74 2a                	je     2104e5 <Elf_openFile+0xab5>
  2104bb:	66 8b 85 e0 fe ff ff 	mov    ax,WORD PTR [rbp-0x120]
  2104c2:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2104c9:	66 89 85 1e fa ff ff 	mov    WORD PTR [rbp-0x5e2],ax
  2104d0:	e8 bb b7 ff ff       	call   20bc90 <__zig_return_error>
  2104d5:	66 8b 85 1e fa ff ff 	mov    ax,WORD PTR [rbp-0x5e2]
  2104dc:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2104e3:	5d                   	pop    rbp
  2104e4:	c3                   	ret    
  2104e5:	8b 85 e4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x11c]
  2104eb:	89 c1                	mov    ecx,eax
  2104ed:	48 8b 95 28 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x5d8]
  2104f4:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  2104f7:	b8 04 00 00 00       	mov    eax,0x4
  2104fc:	89 c2                	mov    edx,eax
        }

        // skip over flags
        try elf.in_file.seekForward(4);
  2104fe:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  210505:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  210508:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  21050f:	e8 fc 36 00 00       	call   213c10 <File_seekForward>
  210514:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  21051b:	66 83 bd d6 fe ff ff 	cmp    WORD PTR [rbp-0x12a],0x0
  210522:	00 
  210523:	74 2a                	je     21054f <Elf_openFile+0xb1f>
  210525:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [rbp-0x12a]
  21052c:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210533:	66 89 85 1c fa ff ff 	mov    WORD PTR [rbp-0x5e4],ax
  21053a:	e8 51 b7 ff ff       	call   20bc90 <__zig_return_error>
  21053f:	66 8b 85 1c fa ff ff 	mov    ax,WORD PTR [rbp-0x5e4]
  210546:	48 81 c4 20 09 00 00 	add    rsp,0x920
  21054d:	5d                   	pop    rbp
  21054e:	c3                   	ret    
  21054f:	48 8d 85 d0 fe ff ff 	lea    rax,[rbp-0x130]

        const header_size = try in.readInt(elf.endian, u16);
  210556:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  21055d:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  210564:	40 8a 71 0a          	mov    sil,BYTE PTR [rcx+0xa]
  210568:	40 0f b6 ce          	movzx  ecx,sil
  21056c:	48 8d bd d0 fe ff ff 	lea    rdi,[rbp-0x130]
  210573:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  21057a:	48 89 85 10 fa ff ff 	mov    QWORD PTR [rbp-0x5f0],rax
  210581:	e8 aa 37 00 00       	call   213d30 <InStream(ReadError)_readInt>
  210586:	66 83 bd d0 fe ff ff 	cmp    WORD PTR [rbp-0x130],0x0
  21058d:	00 
  21058e:	74 2a                	je     2105ba <Elf_openFile+0xb8a>
  210590:	66 8b 85 d0 fe ff ff 	mov    ax,WORD PTR [rbp-0x130]
  210597:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  21059e:	66 89 85 0e fa ff ff 	mov    WORD PTR [rbp-0x5f2],ax
  2105a5:	e8 e6 b6 ff ff       	call   20bc90 <__zig_return_error>
  2105aa:	66 8b 85 0e fa ff ff 	mov    ax,WORD PTR [rbp-0x5f2]
  2105b1:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2105b8:	5d                   	pop    rbp
  2105b9:	c3                   	ret    
  2105ba:	66 8b 85 d2 fe ff ff 	mov    ax,WORD PTR [rbp-0x12e]
  2105c1:	66 89 85 e2 fb ff ff 	mov    WORD PTR [rbp-0x41e],ax
        if ((elf.is_64 and header_size != 64) or (!elf.is_64 and header_size != 52)) {
  2105c8:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  2105cf:	8a 51 09             	mov    dl,BYTE PTR [rcx+0x9]
  2105d2:	f6 c2 01             	test   dl,0x1
  2105d5:	88 95 0d fa ff ff    	mov    BYTE PTR [rbp-0x5f3],dl
  2105db:	75 02                	jne    2105df <Elf_openFile+0xbaf>
  2105dd:	eb 11                	jmp    2105f0 <Elf_openFile+0xbc0>
  2105df:	66 83 bd e2 fb ff ff 	cmp    WORD PTR [rbp-0x41e],0x40
  2105e6:	40 
  2105e7:	0f 95 c0             	setne  al
  2105ea:	88 85 0d fa ff ff    	mov    BYTE PTR [rbp-0x5f3],al
  2105f0:	8a 85 0d fa ff ff    	mov    al,BYTE PTR [rbp-0x5f3]
  2105f6:	a8 01                	test   al,0x1
  2105f8:	88 85 0c fa ff ff    	mov    BYTE PTR [rbp-0x5f4],al
  2105fe:	75 37                	jne    210637 <Elf_openFile+0xc07>
  210600:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210607:	8a 48 09             	mov    cl,BYTE PTR [rax+0x9]
  21060a:	80 f1 01             	xor    cl,0x1
  21060d:	f6 c1 01             	test   cl,0x1
  210610:	88 8d 0b fa ff ff    	mov    BYTE PTR [rbp-0x5f5],cl
  210616:	75 02                	jne    21061a <Elf_openFile+0xbea>
  210618:	eb 11                	jmp    21062b <Elf_openFile+0xbfb>
  21061a:	66 83 bd e2 fb ff ff 	cmp    WORD PTR [rbp-0x41e],0x34
  210621:	34 
  210622:	0f 95 c0             	setne  al
  210625:	88 85 0b fa ff ff    	mov    BYTE PTR [rbp-0x5f5],al
  21062b:	8a 85 0b fa ff ff    	mov    al,BYTE PTR [rbp-0x5f5]
  210631:	88 85 0c fa ff ff    	mov    BYTE PTR [rbp-0x5f4],al
  210637:	8a 85 0c fa ff ff    	mov    al,BYTE PTR [rbp-0x5f4]
  21063d:	a8 01                	test   al,0x1
  21063f:	75 02                	jne    210643 <Elf_openFile+0xc13>
  210641:	eb 19                	jmp    21065c <Elf_openFile+0xc2c>
            return error.InvalidFormat;
  210643:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  21064a:	e8 41 b6 ff ff       	call   20bc90 <__zig_return_error>
  21064f:	66 b8 21 00          	mov    ax,0x21
  210653:	48 81 c4 20 09 00 00 	add    rsp,0x920
  21065a:	5d                   	pop    rbp
  21065b:	c3                   	ret    
        if ((elf.is_64 and header_size != 64) or (!elf.is_64 and header_size != 52)) {
  21065c:	eb 00                	jmp    21065e <Elf_openFile+0xc2e>
  21065e:	48 8d 85 c0 fe ff ff 	lea    rax,[rbp-0x140]
        }

        const ph_entry_size = try in.readInt(elf.endian, u16);
  210665:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  21066c:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  210673:	40 8a 71 0a          	mov    sil,BYTE PTR [rcx+0xa]
  210677:	40 0f b6 ce          	movzx  ecx,sil
  21067b:	48 8d bd c0 fe ff ff 	lea    rdi,[rbp-0x140]
  210682:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  210689:	48 89 85 00 fa ff ff 	mov    QWORD PTR [rbp-0x600],rax
  210690:	e8 9b 36 00 00       	call   213d30 <InStream(ReadError)_readInt>
  210695:	66 83 bd c0 fe ff ff 	cmp    WORD PTR [rbp-0x140],0x0
  21069c:	00 
  21069d:	74 2a                	je     2106c9 <Elf_openFile+0xc99>
  21069f:	66 8b 85 c0 fe ff ff 	mov    ax,WORD PTR [rbp-0x140]
  2106a6:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2106ad:	66 89 85 fe f9 ff ff 	mov    WORD PTR [rbp-0x602],ax
  2106b4:	e8 d7 b5 ff ff       	call   20bc90 <__zig_return_error>
  2106b9:	66 8b 85 fe f9 ff ff 	mov    ax,WORD PTR [rbp-0x602]
  2106c0:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2106c7:	5d                   	pop    rbp
  2106c8:	c3                   	ret    
  2106c9:	48 8d 85 b0 fe ff ff 	lea    rax,[rbp-0x150]
  2106d0:	66 8b 8d c2 fe ff ff 	mov    cx,WORD PTR [rbp-0x13e]
  2106d7:	66 89 8d e0 fb ff ff 	mov    WORD PTR [rbp-0x420],cx
        const ph_entry_count = try in.readInt(elf.endian, u16);
  2106de:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  2106e5:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  2106ec:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  2106f0:	40 0f b6 cf          	movzx  ecx,dil
  2106f4:	48 8d bd b0 fe ff ff 	lea    rdi,[rbp-0x150]
  2106fb:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  210702:	48 89 85 f0 f9 ff ff 	mov    QWORD PTR [rbp-0x610],rax
  210709:	e8 22 36 00 00       	call   213d30 <InStream(ReadError)_readInt>
  21070e:	66 83 bd b0 fe ff ff 	cmp    WORD PTR [rbp-0x150],0x0
  210715:	00 
  210716:	74 2a                	je     210742 <Elf_openFile+0xd12>
  210718:	66 8b 85 b0 fe ff ff 	mov    ax,WORD PTR [rbp-0x150]
  21071f:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210726:	66 89 85 ee f9 ff ff 	mov    WORD PTR [rbp-0x612],ax
  21072d:	e8 5e b5 ff ff       	call   20bc90 <__zig_return_error>
  210732:	66 8b 85 ee f9 ff ff 	mov    ax,WORD PTR [rbp-0x612]
  210739:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210740:	5d                   	pop    rbp
  210741:	c3                   	ret    
  210742:	48 8d 85 a0 fe ff ff 	lea    rax,[rbp-0x160]
  210749:	66 8b 8d b2 fe ff ff 	mov    cx,WORD PTR [rbp-0x14e]
  210750:	66 89 8d de fb ff ff 	mov    WORD PTR [rbp-0x422],cx
        const sh_entry_size = try in.readInt(elf.endian, u16);
  210757:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  21075e:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  210765:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  210769:	40 0f b6 cf          	movzx  ecx,dil
  21076d:	48 8d bd a0 fe ff ff 	lea    rdi,[rbp-0x160]
  210774:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  21077b:	48 89 85 e0 f9 ff ff 	mov    QWORD PTR [rbp-0x620],rax
  210782:	e8 a9 35 00 00       	call   213d30 <InStream(ReadError)_readInt>
  210787:	66 83 bd a0 fe ff ff 	cmp    WORD PTR [rbp-0x160],0x0
  21078e:	00 
  21078f:	74 2a                	je     2107bb <Elf_openFile+0xd8b>
  210791:	66 8b 85 a0 fe ff ff 	mov    ax,WORD PTR [rbp-0x160]
  210798:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  21079f:	66 89 85 de f9 ff ff 	mov    WORD PTR [rbp-0x622],ax
  2107a6:	e8 e5 b4 ff ff       	call   20bc90 <__zig_return_error>
  2107ab:	66 8b 85 de f9 ff ff 	mov    ax,WORD PTR [rbp-0x622]
  2107b2:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2107b9:	5d                   	pop    rbp
  2107ba:	c3                   	ret    
  2107bb:	48 8d 85 90 fe ff ff 	lea    rax,[rbp-0x170]
  2107c2:	66 8b 8d a2 fe ff ff 	mov    cx,WORD PTR [rbp-0x15e]
  2107c9:	66 89 8d dc fb ff ff 	mov    WORD PTR [rbp-0x424],cx
        const sh_entry_count = try in.readInt(elf.endian, u16);
  2107d0:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  2107d7:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  2107de:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  2107e2:	40 0f b6 cf          	movzx  ecx,dil
  2107e6:	48 8d bd 90 fe ff ff 	lea    rdi,[rbp-0x170]
  2107ed:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  2107f4:	48 89 85 d0 f9 ff ff 	mov    QWORD PTR [rbp-0x630],rax
  2107fb:	e8 30 35 00 00       	call   213d30 <InStream(ReadError)_readInt>
  210800:	66 83 bd 90 fe ff ff 	cmp    WORD PTR [rbp-0x170],0x0
  210807:	00 
  210808:	74 2a                	je     210834 <Elf_openFile+0xe04>
  21080a:	66 8b 85 90 fe ff ff 	mov    ax,WORD PTR [rbp-0x170]
  210811:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210818:	66 89 85 ce f9 ff ff 	mov    WORD PTR [rbp-0x632],ax
  21081f:	e8 6c b4 ff ff       	call   20bc90 <__zig_return_error>
  210824:	66 8b 85 ce f9 ff ff 	mov    ax,WORD PTR [rbp-0x632]
  21082b:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210832:	5d                   	pop    rbp
  210833:	c3                   	ret    
  210834:	48 8d 85 80 fe ff ff 	lea    rax,[rbp-0x180]
  21083b:	66 8b 8d 92 fe ff ff 	mov    cx,WORD PTR [rbp-0x16e]
  210842:	66 89 8d da fb ff ff 	mov    WORD PTR [rbp-0x426],cx
        elf.string_section_index = u64(try in.readInt(elf.endian, u16));
  210849:	48 8b 95 18 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x3e8]
  210850:	48 83 c2 28          	add    rdx,0x28
  210854:	48 8b b5 f0 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x410]
  21085b:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  210862:	44 8a 47 0a          	mov    r8b,BYTE PTR [rdi+0xa]
  210866:	41 0f b6 c8          	movzx  ecx,r8b
  21086a:	48 8d bd 80 fe ff ff 	lea    rdi,[rbp-0x180]
  210871:	4c 8b 8d 70 fb ff ff 	mov    r9,QWORD PTR [rbp-0x490]
  210878:	48 89 b5 c0 f9 ff ff 	mov    QWORD PTR [rbp-0x640],rsi
  21087f:	4c 89 ce             	mov    rsi,r9
  210882:	4c 8b 95 c0 f9 ff ff 	mov    r10,QWORD PTR [rbp-0x640]
  210889:	48 89 95 b8 f9 ff ff 	mov    QWORD PTR [rbp-0x648],rdx
  210890:	4c 89 d2             	mov    rdx,r10
  210893:	48 89 85 b0 f9 ff ff 	mov    QWORD PTR [rbp-0x650],rax
  21089a:	e8 91 34 00 00       	call   213d30 <InStream(ReadError)_readInt>
  21089f:	66 83 bd 80 fe ff ff 	cmp    WORD PTR [rbp-0x180],0x0
  2108a6:	00 
  2108a7:	74 2a                	je     2108d3 <Elf_openFile+0xea3>
  2108a9:	66 8b 85 80 fe ff ff 	mov    ax,WORD PTR [rbp-0x180]
  2108b0:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2108b7:	66 89 85 ae f9 ff ff 	mov    WORD PTR [rbp-0x652],ax
  2108be:	e8 cd b3 ff ff       	call   20bc90 <__zig_return_error>
  2108c3:	66 8b 85 ae f9 ff ff 	mov    ax,WORD PTR [rbp-0x652]
  2108ca:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2108d1:	5d                   	pop    rbp
  2108d2:	c3                   	ret    
  2108d3:	0f b7 85 82 fe ff ff 	movzx  eax,WORD PTR [rbp-0x17e]
  2108da:	89 c1                	mov    ecx,eax
  2108dc:	48 8b 95 b8 f9 ff ff 	mov    rdx,QWORD PTR [rbp-0x648]
  2108e3:	48 89 0a             	mov    QWORD PTR [rdx],rcx

        if (elf.string_section_index >= sh_entry_count) return error.InvalidFormat;
  2108e6:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  2108ed:	48 8b 49 28          	mov    rcx,QWORD PTR [rcx+0x28]
  2108f1:	0f b7 85 da fb ff ff 	movzx  eax,WORD PTR [rbp-0x426]
  2108f8:	89 c6                	mov    esi,eax
  2108fa:	48 39 f1             	cmp    rcx,rsi
  2108fd:	72 19                	jb     210918 <Elf_openFile+0xee8>
  2108ff:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210906:	e8 85 b3 ff ff       	call   20bc90 <__zig_return_error>
  21090b:	66 b8 21 00          	mov    ax,0x21
  21090f:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210916:	5d                   	pop    rbp
  210917:	c3                   	ret    
  210918:	eb 00                	jmp    21091a <Elf_openFile+0xeea>

        const sh_byte_count = u64(sh_entry_size) * u64(sh_entry_count);
  21091a:	0f b7 85 dc fb ff ff 	movzx  eax,WORD PTR [rbp-0x424]
  210921:	0f b7 8d da fb ff ff 	movzx  ecx,WORD PTR [rbp-0x426]
  210928:	89 ca                	mov    edx,ecx
  21092a:	48 f7 e2             	mul    rdx
  21092d:	40 0f 90 c6          	seto   sil
  210931:	48 89 85 a0 f9 ff ff 	mov    QWORD PTR [rbp-0x660],rax
  210938:	40 88 b5 9f f9 ff ff 	mov    BYTE PTR [rbp-0x661],sil
  21093f:	0f 80 87 14 00 00    	jo     211dcc <Elf_openFile+0x239c>
  210945:	e9 92 14 00 00       	jmp    211ddc <Elf_openFile+0x23ac>
        const end_sh = try math.add(u64, elf.section_header_offset, sh_byte_count);
  21094a:	66 8b 85 68 fe ff ff 	mov    ax,WORD PTR [rbp-0x198]
  210951:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210958:	66 89 85 9c f9 ff ff 	mov    WORD PTR [rbp-0x664],ax
  21095f:	e8 2c b3 ff ff       	call   20bc90 <__zig_return_error>
  210964:	66 8b 85 9c f9 ff ff 	mov    ax,WORD PTR [rbp-0x664]
  21096b:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210972:	5d                   	pop    rbp
  210973:	c3                   	ret    
  210974:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  21097b:	48 89 85 c8 fb ff ff 	mov    QWORD PTR [rbp-0x438],rax
        const ph_byte_count = u64(ph_entry_size) * u64(ph_entry_count);
  210982:	0f b7 8d e0 fb ff ff 	movzx  ecx,WORD PTR [rbp-0x420]
  210989:	89 c8                	mov    eax,ecx
  21098b:	0f b7 8d de fb ff ff 	movzx  ecx,WORD PTR [rbp-0x422]
  210992:	89 ca                	mov    edx,ecx
  210994:	48 f7 e2             	mul    rdx
  210997:	40 0f 90 c6          	seto   sil
  21099b:	48 89 85 90 f9 ff ff 	mov    QWORD PTR [rbp-0x670],rax
  2109a2:	40 88 b5 8f f9 ff ff 	mov    BYTE PTR [rbp-0x671],sil
  2109a9:	0f 80 73 14 00 00    	jo     211e22 <Elf_openFile+0x23f2>
  2109af:	e9 7e 14 00 00       	jmp    211e32 <Elf_openFile+0x2402>
        const end_ph = try math.add(u64, elf.program_header_offset, ph_byte_count);
  2109b4:	66 8b 85 48 fe ff ff 	mov    ax,WORD PTR [rbp-0x1b8]
  2109bb:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2109c2:	66 89 85 8c f9 ff ff 	mov    WORD PTR [rbp-0x674],ax
  2109c9:	e8 c2 b2 ff ff       	call   20bc90 <__zig_return_error>
  2109ce:	66 8b 85 8c f9 ff ff 	mov    ax,WORD PTR [rbp-0x674]
  2109d5:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2109dc:	5d                   	pop    rbp
  2109dd:	c3                   	ret    
  2109de:	48 8d bd 28 fe ff ff 	lea    rdi,[rbp-0x1d8]
  2109e5:	48 8b 85 50 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b0]
  2109ec:	48 89 85 b8 fb ff ff 	mov    QWORD PTR [rbp-0x448],rax

        const stream_end = try elf.in_file.getEndPos();
  2109f3:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2109fa:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  2109fd:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  210a04:	e8 37 37 00 00       	call   214140 <File_getEndPos>
  210a09:	66 83 bd 28 fe ff ff 	cmp    WORD PTR [rbp-0x1d8],0x0
  210a10:	00 
  210a11:	74 2a                	je     210a3d <Elf_openFile+0x100d>
  210a13:	66 8b 85 28 fe ff ff 	mov    ax,WORD PTR [rbp-0x1d8]
  210a1a:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210a21:	66 89 85 8a f9 ff ff 	mov    WORD PTR [rbp-0x676],ax
  210a28:	e8 63 b2 ff ff       	call   20bc90 <__zig_return_error>
  210a2d:	66 8b 85 8a f9 ff ff 	mov    ax,WORD PTR [rbp-0x676]
  210a34:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210a3b:	5d                   	pop    rbp
  210a3c:	c3                   	ret    
  210a3d:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  210a44:	48 89 85 b0 fb ff ff 	mov    QWORD PTR [rbp-0x450],rax
        if (stream_end < end_sh or stream_end < end_ph) {
  210a4b:	48 8b 85 b0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x450]
  210a52:	48 3b 85 c8 fb ff ff 	cmp    rax,QWORD PTR [rbp-0x438]
  210a59:	0f 92 c1             	setb   cl
  210a5c:	f6 c1 01             	test   cl,0x1
  210a5f:	88 8d 89 f9 ff ff    	mov    BYTE PTR [rbp-0x677],cl
  210a65:	75 17                	jne    210a7e <Elf_openFile+0x104e>
  210a67:	48 8b 85 b0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x450]
  210a6e:	48 3b 85 b8 fb ff ff 	cmp    rax,QWORD PTR [rbp-0x448]
  210a75:	0f 92 c1             	setb   cl
  210a78:	88 8d 89 f9 ff ff    	mov    BYTE PTR [rbp-0x677],cl
  210a7e:	8a 85 89 f9 ff ff    	mov    al,BYTE PTR [rbp-0x677]
  210a84:	a8 01                	test   al,0x1
  210a86:	75 02                	jne    210a8a <Elf_openFile+0x105a>
  210a88:	eb 19                	jmp    210aa3 <Elf_openFile+0x1073>
            return error.InvalidFormat;
  210a8a:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210a91:	e8 fa b1 ff ff       	call   20bc90 <__zig_return_error>
  210a96:	66 b8 21 00          	mov    ax,0x21
  210a9a:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210aa1:	5d                   	pop    rbp
  210aa2:	c3                   	ret    
        if (stream_end < end_sh or stream_end < end_ph) {
  210aa3:	eb 00                	jmp    210aa5 <Elf_openFile+0x1075>
        }

        try elf.in_file.seekTo(elf.section_header_offset);
  210aa5:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210aac:	48 8b 30             	mov    rsi,QWORD PTR [rax]
  210aaf:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210ab6:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
  210aba:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210ac1:	e8 aa 37 00 00       	call   214270 <File_seekTo>
  210ac6:	66 89 85 16 fe ff ff 	mov    WORD PTR [rbp-0x1ea],ax
  210acd:	66 83 bd 16 fe ff ff 	cmp    WORD PTR [rbp-0x1ea],0x0
  210ad4:	00 
  210ad5:	74 2a                	je     210b01 <Elf_openFile+0x10d1>
  210ad7:	66 8b 85 16 fe ff ff 	mov    ax,WORD PTR [rbp-0x1ea]
  210ade:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210ae5:	66 89 85 86 f9 ff ff 	mov    WORD PTR [rbp-0x67a],ax
  210aec:	e8 9f b1 ff ff       	call   20bc90 <__zig_return_error>
  210af1:	66 8b 85 86 f9 ff ff 	mov    ax,WORD PTR [rbp-0x67a]
  210af8:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210aff:	5d                   	pop    rbp
  210b00:	c3                   	ret    
  210b01:	48 8d bd f8 fd ff ff 	lea    rdi,[rbp-0x208]

        elf.section_headers = try elf.allocator.alloc(SectionHeader, sh_entry_count);
  210b08:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210b0f:	48 83 c0 38          	add    rax,0x38
  210b13:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  210b1a:	48 8b 51 48          	mov    rdx,QWORD PTR [rcx+0x48]
  210b1e:	0f b7 b5 da fb ff ff 	movzx  esi,WORD PTR [rbp-0x426]
  210b25:	89 f1                	mov    ecx,esi
  210b27:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  210b2e:	48 89 85 78 f9 ff ff 	mov    QWORD PTR [rbp-0x688],rax
  210b35:	e8 b6 38 00 00       	call   2143f0 <Allocator_alloc.34>
  210b3a:	66 83 bd f8 fd ff ff 	cmp    WORD PTR [rbp-0x208],0x0
  210b41:	00 
  210b42:	74 2a                	je     210b6e <Elf_openFile+0x113e>
  210b44:	66 8b 85 f8 fd ff ff 	mov    ax,WORD PTR [rbp-0x208]
  210b4b:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210b52:	66 89 85 76 f9 ff ff 	mov    WORD PTR [rbp-0x68a],ax
  210b59:	e8 32 b1 ff ff       	call   20bc90 <__zig_return_error>
  210b5e:	66 8b 85 76 f9 ff ff 	mov    ax,WORD PTR [rbp-0x68a]
  210b65:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210b6c:	5d                   	pop    rbp
  210b6d:	c3                   	ret    
  210b6e:	48 8b 85 00 fe ff ff 	mov    rax,QWORD PTR [rbp-0x200]
  210b75:	48 8b 8d 78 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x688]
  210b7c:	48 89 01             	mov    QWORD PTR [rcx],rax
  210b7f:	48 8b 85 08 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1f8]
  210b86:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
        errdefer elf.allocator.free(elf.section_headers);

        if (elf.is_64) {
  210b8a:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210b91:	f6 40 09 01          	test   BYTE PTR [rax+0x9],0x1
  210b95:	75 05                	jne    210b9c <Elf_openFile+0x116c>
  210b97:	e9 b7 07 00 00       	jmp    211353 <Elf_openFile+0x1923>
            if (sh_entry_size != 64) return error.InvalidFormat;
  210b9c:	66 83 bd dc fb ff ff 	cmp    WORD PTR [rbp-0x424],0x40
  210ba3:	40 
  210ba4:	74 37                	je     210bdd <Elf_openFile+0x11ad>
        errdefer elf.allocator.free(elf.section_headers);
  210ba6:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210bad:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  210bb1:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210bb8:	48 83 c0 38          	add    rax,0x38
  210bbc:	48 89 c6             	mov    rsi,rax
  210bbf:	e8 9c 38 00 00       	call   214460 <Allocator_free>
            if (sh_entry_size != 64) return error.InvalidFormat;
  210bc4:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210bcb:	e8 c0 b0 ff ff       	call   20bc90 <__zig_return_error>
  210bd0:	66 b8 21 00          	mov    ax,0x21
  210bd4:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210bdb:	5d                   	pop    rbp
  210bdc:	c3                   	ret    
  210bdd:	eb 00                	jmp    210bdf <Elf_openFile+0x11af>
  210bdf:	be aa 00 00 00       	mov    esi,0xaa
  210be4:	b8 08 00 00 00       	mov    eax,0x8
  210be9:	89 c2                	mov    edx,eax
  210beb:	48 8d 8d a8 fb ff ff 	lea    rcx,[rbp-0x458]

            for (elf.section_headers) |*elf_section| {
  210bf2:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  210bf9:	49 89 f8             	mov    r8,rdi
  210bfc:	49 83 c0 38          	add    r8,0x38
  210c00:	48 89 bd 68 f9 ff ff 	mov    QWORD PTR [rbp-0x698],rdi
  210c07:	48 89 cf             	mov    rdi,rcx
  210c0a:	4c 89 85 60 f9 ff ff 	mov    QWORD PTR [rbp-0x6a0],r8
  210c11:	e8 9a 3c 02 00       	call   2348b0 <memset>
  210c16:	48 c7 85 a0 fb ff ff 	mov    QWORD PTR [rbp-0x460],0x0
  210c1d:	00 00 00 00 
  210c21:	48 8b 8d 68 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x698]
  210c28:	48 8b 51 40          	mov    rdx,QWORD PTR [rcx+0x40]
  210c2c:	48 89 95 58 f9 ff ff 	mov    QWORD PTR [rbp-0x6a8],rdx
  210c33:	48 8b 85 a0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x460]
  210c3a:	48 8b 8d 58 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x6a8]
  210c41:	48 39 c8             	cmp    rax,rcx
  210c44:	48 89 85 50 f9 ff ff 	mov    QWORD PTR [rbp-0x6b0],rax
  210c4b:	0f 83 fd 06 00 00    	jae    21134e <Elf_openFile+0x191e>
  210c51:	48 8d 85 d8 fd ff ff 	lea    rax,[rbp-0x228]
  210c58:	48 8b 8d 50 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x6b0]
  210c5f:	48 c1 e1 06          	shl    rcx,0x6
  210c63:	48 8b 95 60 f9 ff ff 	mov    rdx,QWORD PTR [rbp-0x6a0]
  210c6a:	48 03 0a             	add    rcx,QWORD PTR [rdx]
  210c6d:	48 89 8d a8 fb ff ff 	mov    QWORD PTR [rbp-0x458],rcx
                elf_section.name = try in.readInt(elf.endian, u32);
  210c74:	48 8b 8d a8 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x458]
  210c7b:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  210c82:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  210c89:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  210c8d:	44 0f b6 c7          	movzx  r8d,dil
  210c91:	48 8d bd d8 fd ff ff 	lea    rdi,[rbp-0x228]
  210c98:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  210c9f:	48 89 8d 48 f9 ff ff 	mov    QWORD PTR [rbp-0x6b8],rcx
  210ca6:	44 89 c1             	mov    ecx,r8d
  210ca9:	48 89 85 40 f9 ff ff 	mov    QWORD PTR [rbp-0x6c0],rax
  210cb0:	e8 8b 31 00 00       	call   213e40 <InStream(ReadError)_readInt.32>
  210cb5:	66 83 bd d8 fd ff ff 	cmp    WORD PTR [rbp-0x228],0x0
  210cbc:	00 
  210cbd:	74 48                	je     210d07 <Elf_openFile+0x12d7>
        errdefer elf.allocator.free(elf.section_headers);
  210cbf:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210cc6:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  210cca:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210cd1:	48 83 c0 38          	add    rax,0x38
  210cd5:	48 89 c6             	mov    rsi,rax
  210cd8:	e8 83 37 00 00       	call   214460 <Allocator_free>
                elf_section.name = try in.readInt(elf.endian, u32);
  210cdd:	66 8b 85 d8 fd ff ff 	mov    ax,WORD PTR [rbp-0x228]
  210ce4:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210ceb:	66 89 85 3e f9 ff ff 	mov    WORD PTR [rbp-0x6c2],ax
  210cf2:	e8 99 af ff ff       	call   20bc90 <__zig_return_error>
  210cf7:	66 8b 85 3e f9 ff ff 	mov    ax,WORD PTR [rbp-0x6c2]
  210cfe:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210d05:	5d                   	pop    rbp
  210d06:	c3                   	ret    
  210d07:	48 8d 85 c8 fd ff ff 	lea    rax,[rbp-0x238]
  210d0e:	8b 8d dc fd ff ff    	mov    ecx,DWORD PTR [rbp-0x224]
  210d14:	48 8b 95 48 f9 ff ff 	mov    rdx,QWORD PTR [rbp-0x6b8]
  210d1b:	89 0a                	mov    DWORD PTR [rdx],ecx
                elf_section.sh_type = try in.readInt(elf.endian, u32);
  210d1d:	48 8b b5 a8 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x458]
  210d24:	48 83 c6 04          	add    rsi,0x4
  210d28:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  210d2f:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  210d36:	44 8a 47 0a          	mov    r8b,BYTE PTR [rdi+0xa]
  210d3a:	41 0f b6 c8          	movzx  ecx,r8b
  210d3e:	48 8d bd c8 fd ff ff 	lea    rdi,[rbp-0x238]
  210d45:	4c 8b 8d 70 fb ff ff 	mov    r9,QWORD PTR [rbp-0x490]
  210d4c:	48 89 b5 30 f9 ff ff 	mov    QWORD PTR [rbp-0x6d0],rsi
  210d53:	4c 89 ce             	mov    rsi,r9
  210d56:	48 89 85 28 f9 ff ff 	mov    QWORD PTR [rbp-0x6d8],rax
  210d5d:	e8 de 30 00 00       	call   213e40 <InStream(ReadError)_readInt.32>
  210d62:	66 83 bd c8 fd ff ff 	cmp    WORD PTR [rbp-0x238],0x0
  210d69:	00 
  210d6a:	74 48                	je     210db4 <Elf_openFile+0x1384>
        errdefer elf.allocator.free(elf.section_headers);
  210d6c:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210d73:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  210d77:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210d7e:	48 83 c0 38          	add    rax,0x38
  210d82:	48 89 c6             	mov    rsi,rax
  210d85:	e8 d6 36 00 00       	call   214460 <Allocator_free>
                elf_section.sh_type = try in.readInt(elf.endian, u32);
  210d8a:	66 8b 85 c8 fd ff ff 	mov    ax,WORD PTR [rbp-0x238]
  210d91:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210d98:	66 89 85 26 f9 ff ff 	mov    WORD PTR [rbp-0x6da],ax
  210d9f:	e8 ec ae ff ff       	call   20bc90 <__zig_return_error>
  210da4:	66 8b 85 26 f9 ff ff 	mov    ax,WORD PTR [rbp-0x6da]
  210dab:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210db2:	5d                   	pop    rbp
  210db3:	c3                   	ret    
  210db4:	48 8d 85 b0 fd ff ff 	lea    rax,[rbp-0x250]
  210dbb:	8b 8d cc fd ff ff    	mov    ecx,DWORD PTR [rbp-0x234]
  210dc1:	48 8b 95 30 f9 ff ff 	mov    rdx,QWORD PTR [rbp-0x6d0]
  210dc8:	89 0a                	mov    DWORD PTR [rdx],ecx
                elf_section.flags = try in.readInt(elf.endian, u64);
  210dca:	48 8b b5 a8 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x458]
  210dd1:	48 83 c6 08          	add    rsi,0x8
  210dd5:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  210ddc:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  210de3:	44 8a 47 0a          	mov    r8b,BYTE PTR [rdi+0xa]
  210de7:	41 0f b6 c8          	movzx  ecx,r8b
  210deb:	48 8d bd b0 fd ff ff 	lea    rdi,[rbp-0x250]
  210df2:	4c 8b 8d 70 fb ff ff 	mov    r9,QWORD PTR [rbp-0x490]
  210df9:	48 89 b5 18 f9 ff ff 	mov    QWORD PTR [rbp-0x6e8],rsi
  210e00:	4c 89 ce             	mov    rsi,r9
  210e03:	48 89 85 10 f9 ff ff 	mov    QWORD PTR [rbp-0x6f0],rax
  210e0a:	e8 41 31 00 00       	call   213f50 <InStream(ReadError)_readInt.33>
  210e0f:	66 83 bd b0 fd ff ff 	cmp    WORD PTR [rbp-0x250],0x0
  210e16:	00 
  210e17:	74 48                	je     210e61 <Elf_openFile+0x1431>
        errdefer elf.allocator.free(elf.section_headers);
  210e19:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210e20:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  210e24:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210e2b:	48 83 c0 38          	add    rax,0x38
  210e2f:	48 89 c6             	mov    rsi,rax
  210e32:	e8 29 36 00 00       	call   214460 <Allocator_free>
                elf_section.flags = try in.readInt(elf.endian, u64);
  210e37:	66 8b 85 b0 fd ff ff 	mov    ax,WORD PTR [rbp-0x250]
  210e3e:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210e45:	66 89 85 0e f9 ff ff 	mov    WORD PTR [rbp-0x6f2],ax
  210e4c:	e8 3f ae ff ff       	call   20bc90 <__zig_return_error>
  210e51:	66 8b 85 0e f9 ff ff 	mov    ax,WORD PTR [rbp-0x6f2]
  210e58:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210e5f:	5d                   	pop    rbp
  210e60:	c3                   	ret    
  210e61:	48 8d 85 90 fd ff ff 	lea    rax,[rbp-0x270]
  210e68:	48 8b 8d b8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x248]
  210e6f:	48 8b 95 18 f9 ff ff 	mov    rdx,QWORD PTR [rbp-0x6e8]
  210e76:	48 89 0a             	mov    QWORD PTR [rdx],rcx
                elf_section.addr = try in.readInt(elf.endian, u64);
  210e79:	48 8b 8d a8 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x458]
  210e80:	48 83 c1 10          	add    rcx,0x10
  210e84:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  210e8b:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  210e92:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  210e96:	44 0f b6 c7          	movzx  r8d,dil
  210e9a:	48 8d bd 90 fd ff ff 	lea    rdi,[rbp-0x270]
  210ea1:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  210ea8:	48 89 8d 00 f9 ff ff 	mov    QWORD PTR [rbp-0x700],rcx
  210eaf:	44 89 c1             	mov    ecx,r8d
  210eb2:	48 89 85 f8 f8 ff ff 	mov    QWORD PTR [rbp-0x708],rax
  210eb9:	e8 92 30 00 00       	call   213f50 <InStream(ReadError)_readInt.33>
  210ebe:	66 83 bd 90 fd ff ff 	cmp    WORD PTR [rbp-0x270],0x0
  210ec5:	00 
  210ec6:	74 48                	je     210f10 <Elf_openFile+0x14e0>
        errdefer elf.allocator.free(elf.section_headers);
  210ec8:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210ecf:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  210ed3:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210eda:	48 83 c0 38          	add    rax,0x38
  210ede:	48 89 c6             	mov    rsi,rax
  210ee1:	e8 7a 35 00 00       	call   214460 <Allocator_free>
                elf_section.addr = try in.readInt(elf.endian, u64);
  210ee6:	66 8b 85 90 fd ff ff 	mov    ax,WORD PTR [rbp-0x270]
  210eed:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210ef4:	66 89 85 f6 f8 ff ff 	mov    WORD PTR [rbp-0x70a],ax
  210efb:	e8 90 ad ff ff       	call   20bc90 <__zig_return_error>
  210f00:	66 8b 85 f6 f8 ff ff 	mov    ax,WORD PTR [rbp-0x70a]
  210f07:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210f0e:	5d                   	pop    rbp
  210f0f:	c3                   	ret    
  210f10:	48 8d 85 70 fd ff ff 	lea    rax,[rbp-0x290]
  210f17:	48 8b 8d 98 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x268]
  210f1e:	48 8b 95 00 f9 ff ff 	mov    rdx,QWORD PTR [rbp-0x700]
  210f25:	48 89 0a             	mov    QWORD PTR [rdx],rcx
                elf_section.offset = try in.readInt(elf.endian, u64);
  210f28:	48 8b 8d a8 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x458]
  210f2f:	48 83 c1 18          	add    rcx,0x18
  210f33:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  210f3a:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  210f41:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  210f45:	44 0f b6 c7          	movzx  r8d,dil
  210f49:	48 8d bd 70 fd ff ff 	lea    rdi,[rbp-0x290]
  210f50:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  210f57:	48 89 8d e8 f8 ff ff 	mov    QWORD PTR [rbp-0x718],rcx
  210f5e:	44 89 c1             	mov    ecx,r8d
  210f61:	48 89 85 e0 f8 ff ff 	mov    QWORD PTR [rbp-0x720],rax
  210f68:	e8 e3 2f 00 00       	call   213f50 <InStream(ReadError)_readInt.33>
  210f6d:	66 83 bd 70 fd ff ff 	cmp    WORD PTR [rbp-0x290],0x0
  210f74:	00 
  210f75:	74 48                	je     210fbf <Elf_openFile+0x158f>
        errdefer elf.allocator.free(elf.section_headers);
  210f77:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210f7e:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  210f82:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210f89:	48 83 c0 38          	add    rax,0x38
  210f8d:	48 89 c6             	mov    rsi,rax
  210f90:	e8 cb 34 00 00       	call   214460 <Allocator_free>
                elf_section.offset = try in.readInt(elf.endian, u64);
  210f95:	66 8b 85 70 fd ff ff 	mov    ax,WORD PTR [rbp-0x290]
  210f9c:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210fa3:	66 89 85 de f8 ff ff 	mov    WORD PTR [rbp-0x722],ax
  210faa:	e8 e1 ac ff ff       	call   20bc90 <__zig_return_error>
  210faf:	66 8b 85 de f8 ff ff 	mov    ax,WORD PTR [rbp-0x722]
  210fb6:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210fbd:	5d                   	pop    rbp
  210fbe:	c3                   	ret    
  210fbf:	48 8d 85 50 fd ff ff 	lea    rax,[rbp-0x2b0]
  210fc6:	48 8b 8d 78 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x288]
  210fcd:	48 8b 95 e8 f8 ff ff 	mov    rdx,QWORD PTR [rbp-0x718]
  210fd4:	48 89 0a             	mov    QWORD PTR [rdx],rcx
                elf_section.size = try in.readInt(elf.endian, u64);
  210fd7:	48 8b 8d a8 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x458]
  210fde:	48 83 c1 20          	add    rcx,0x20
  210fe2:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  210fe9:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  210ff0:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  210ff4:	44 0f b6 c7          	movzx  r8d,dil
  210ff8:	48 8d bd 50 fd ff ff 	lea    rdi,[rbp-0x2b0]
  210fff:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  211006:	48 89 8d d0 f8 ff ff 	mov    QWORD PTR [rbp-0x730],rcx
  21100d:	44 89 c1             	mov    ecx,r8d
  211010:	48 89 85 c8 f8 ff ff 	mov    QWORD PTR [rbp-0x738],rax
  211017:	e8 34 2f 00 00       	call   213f50 <InStream(ReadError)_readInt.33>
  21101c:	66 83 bd 50 fd ff ff 	cmp    WORD PTR [rbp-0x2b0],0x0
  211023:	00 
  211024:	74 48                	je     21106e <Elf_openFile+0x163e>
        errdefer elf.allocator.free(elf.section_headers);
  211026:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  21102d:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  211031:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211038:	48 83 c0 38          	add    rax,0x38
  21103c:	48 89 c6             	mov    rsi,rax
  21103f:	e8 1c 34 00 00       	call   214460 <Allocator_free>
                elf_section.size = try in.readInt(elf.endian, u64);
  211044:	66 8b 85 50 fd ff ff 	mov    ax,WORD PTR [rbp-0x2b0]
  21104b:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  211052:	66 89 85 c6 f8 ff ff 	mov    WORD PTR [rbp-0x73a],ax
  211059:	e8 32 ac ff ff       	call   20bc90 <__zig_return_error>
  21105e:	66 8b 85 c6 f8 ff ff 	mov    ax,WORD PTR [rbp-0x73a]
  211065:	48 81 c4 20 09 00 00 	add    rsp,0x920
  21106c:	5d                   	pop    rbp
  21106d:	c3                   	ret    
  21106e:	48 8d 85 38 fd ff ff 	lea    rax,[rbp-0x2c8]
  211075:	48 8b 8d 58 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2a8]
  21107c:	48 8b 95 d0 f8 ff ff 	mov    rdx,QWORD PTR [rbp-0x730]
  211083:	48 89 0a             	mov    QWORD PTR [rdx],rcx
                elf_section.link = try in.readInt(elf.endian, u32);
  211086:	48 8b 8d a8 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x458]
  21108d:	48 83 c1 28          	add    rcx,0x28
  211091:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  211098:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  21109f:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  2110a3:	44 0f b6 c7          	movzx  r8d,dil
  2110a7:	48 8d bd 38 fd ff ff 	lea    rdi,[rbp-0x2c8]
  2110ae:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  2110b5:	48 89 8d b8 f8 ff ff 	mov    QWORD PTR [rbp-0x748],rcx
  2110bc:	44 89 c1             	mov    ecx,r8d
  2110bf:	48 89 85 b0 f8 ff ff 	mov    QWORD PTR [rbp-0x750],rax
  2110c6:	e8 75 2d 00 00       	call   213e40 <InStream(ReadError)_readInt.32>
  2110cb:	66 83 bd 38 fd ff ff 	cmp    WORD PTR [rbp-0x2c8],0x0
  2110d2:	00 
  2110d3:	74 48                	je     21111d <Elf_openFile+0x16ed>
        errdefer elf.allocator.free(elf.section_headers);
  2110d5:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2110dc:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  2110e0:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2110e7:	48 83 c0 38          	add    rax,0x38
  2110eb:	48 89 c6             	mov    rsi,rax
  2110ee:	e8 6d 33 00 00       	call   214460 <Allocator_free>
                elf_section.link = try in.readInt(elf.endian, u32);
  2110f3:	66 8b 85 38 fd ff ff 	mov    ax,WORD PTR [rbp-0x2c8]
  2110fa:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  211101:	66 89 85 ae f8 ff ff 	mov    WORD PTR [rbp-0x752],ax
  211108:	e8 83 ab ff ff       	call   20bc90 <__zig_return_error>
  21110d:	66 8b 85 ae f8 ff ff 	mov    ax,WORD PTR [rbp-0x752]
  211114:	48 81 c4 20 09 00 00 	add    rsp,0x920
  21111b:	5d                   	pop    rbp
  21111c:	c3                   	ret    
  21111d:	48 8d 85 28 fd ff ff 	lea    rax,[rbp-0x2d8]
  211124:	8b 8d 3c fd ff ff    	mov    ecx,DWORD PTR [rbp-0x2c4]
  21112a:	48 8b 95 b8 f8 ff ff 	mov    rdx,QWORD PTR [rbp-0x748]
  211131:	89 0a                	mov    DWORD PTR [rdx],ecx
                elf_section.info = try in.readInt(elf.endian, u32);
  211133:	48 8b b5 a8 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x458]
  21113a:	48 83 c6 2c          	add    rsi,0x2c
  21113e:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  211145:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  21114c:	44 8a 47 0a          	mov    r8b,BYTE PTR [rdi+0xa]
  211150:	41 0f b6 c8          	movzx  ecx,r8b
  211154:	48 8d bd 28 fd ff ff 	lea    rdi,[rbp-0x2d8]
  21115b:	4c 8b 8d 70 fb ff ff 	mov    r9,QWORD PTR [rbp-0x490]
  211162:	48 89 b5 a0 f8 ff ff 	mov    QWORD PTR [rbp-0x760],rsi
  211169:	4c 89 ce             	mov    rsi,r9
  21116c:	48 89 85 98 f8 ff ff 	mov    QWORD PTR [rbp-0x768],rax
  211173:	e8 c8 2c 00 00       	call   213e40 <InStream(ReadError)_readInt.32>
  211178:	66 83 bd 28 fd ff ff 	cmp    WORD PTR [rbp-0x2d8],0x0
  21117f:	00 
  211180:	74 48                	je     2111ca <Elf_openFile+0x179a>
        errdefer elf.allocator.free(elf.section_headers);
  211182:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211189:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  21118d:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211194:	48 83 c0 38          	add    rax,0x38
  211198:	48 89 c6             	mov    rsi,rax
  21119b:	e8 c0 32 00 00       	call   214460 <Allocator_free>
                elf_section.info = try in.readInt(elf.endian, u32);
  2111a0:	66 8b 85 28 fd ff ff 	mov    ax,WORD PTR [rbp-0x2d8]
  2111a7:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2111ae:	66 89 85 96 f8 ff ff 	mov    WORD PTR [rbp-0x76a],ax
  2111b5:	e8 d6 aa ff ff       	call   20bc90 <__zig_return_error>
  2111ba:	66 8b 85 96 f8 ff ff 	mov    ax,WORD PTR [rbp-0x76a]
  2111c1:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2111c8:	5d                   	pop    rbp
  2111c9:	c3                   	ret    
  2111ca:	48 8d 85 10 fd ff ff 	lea    rax,[rbp-0x2f0]
  2111d1:	8b 8d 2c fd ff ff    	mov    ecx,DWORD PTR [rbp-0x2d4]
  2111d7:	48 8b 95 a0 f8 ff ff 	mov    rdx,QWORD PTR [rbp-0x760]
  2111de:	89 0a                	mov    DWORD PTR [rdx],ecx
                elf_section.addr_align = try in.readInt(elf.endian, u64);
  2111e0:	48 8b b5 a8 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x458]
  2111e7:	48 83 c6 30          	add    rsi,0x30
  2111eb:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  2111f2:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  2111f9:	44 8a 47 0a          	mov    r8b,BYTE PTR [rdi+0xa]
  2111fd:	41 0f b6 c8          	movzx  ecx,r8b
  211201:	48 8d bd 10 fd ff ff 	lea    rdi,[rbp-0x2f0]
  211208:	4c 8b 8d 70 fb ff ff 	mov    r9,QWORD PTR [rbp-0x490]
  21120f:	48 89 b5 88 f8 ff ff 	mov    QWORD PTR [rbp-0x778],rsi
  211216:	4c 89 ce             	mov    rsi,r9
  211219:	48 89 85 80 f8 ff ff 	mov    QWORD PTR [rbp-0x780],rax
  211220:	e8 2b 2d 00 00       	call   213f50 <InStream(ReadError)_readInt.33>
  211225:	66 83 bd 10 fd ff ff 	cmp    WORD PTR [rbp-0x2f0],0x0
  21122c:	00 
  21122d:	74 48                	je     211277 <Elf_openFile+0x1847>
        errdefer elf.allocator.free(elf.section_headers);
  21122f:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211236:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  21123a:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211241:	48 83 c0 38          	add    rax,0x38
  211245:	48 89 c6             	mov    rsi,rax
  211248:	e8 13 32 00 00       	call   214460 <Allocator_free>
                elf_section.addr_align = try in.readInt(elf.endian, u64);
  21124d:	66 8b 85 10 fd ff ff 	mov    ax,WORD PTR [rbp-0x2f0]
  211254:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  21125b:	66 89 85 7e f8 ff ff 	mov    WORD PTR [rbp-0x782],ax
  211262:	e8 29 aa ff ff       	call   20bc90 <__zig_return_error>
  211267:	66 8b 85 7e f8 ff ff 	mov    ax,WORD PTR [rbp-0x782]
  21126e:	48 81 c4 20 09 00 00 	add    rsp,0x920
  211275:	5d                   	pop    rbp
  211276:	c3                   	ret    
  211277:	48 8d 85 f0 fc ff ff 	lea    rax,[rbp-0x310]
  21127e:	48 8b 8d 18 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2e8]
  211285:	48 8b 95 88 f8 ff ff 	mov    rdx,QWORD PTR [rbp-0x778]
  21128c:	48 89 0a             	mov    QWORD PTR [rdx],rcx
                elf_section.ent_size = try in.readInt(elf.endian, u64);
  21128f:	48 8b 8d a8 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x458]
  211296:	48 83 c1 38          	add    rcx,0x38
  21129a:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  2112a1:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  2112a8:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  2112ac:	44 0f b6 c7          	movzx  r8d,dil
  2112b0:	48 8d bd f0 fc ff ff 	lea    rdi,[rbp-0x310]
  2112b7:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  2112be:	48 89 8d 70 f8 ff ff 	mov    QWORD PTR [rbp-0x790],rcx
  2112c5:	44 89 c1             	mov    ecx,r8d
  2112c8:	48 89 85 68 f8 ff ff 	mov    QWORD PTR [rbp-0x798],rax
  2112cf:	e8 7c 2c 00 00       	call   213f50 <InStream(ReadError)_readInt.33>
  2112d4:	66 83 bd f0 fc ff ff 	cmp    WORD PTR [rbp-0x310],0x0
  2112db:	00 
  2112dc:	74 48                	je     211326 <Elf_openFile+0x18f6>
        errdefer elf.allocator.free(elf.section_headers);
  2112de:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2112e5:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  2112e9:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2112f0:	48 83 c0 38          	add    rax,0x38
  2112f4:	48 89 c6             	mov    rsi,rax
  2112f7:	e8 64 31 00 00       	call   214460 <Allocator_free>
                elf_section.ent_size = try in.readInt(elf.endian, u64);
  2112fc:	66 8b 85 f0 fc ff ff 	mov    ax,WORD PTR [rbp-0x310]
  211303:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  21130a:	66 89 85 66 f8 ff ff 	mov    WORD PTR [rbp-0x79a],ax
  211311:	e8 7a a9 ff ff       	call   20bc90 <__zig_return_error>
  211316:	66 8b 85 66 f8 ff ff 	mov    ax,WORD PTR [rbp-0x79a]
  21131d:	48 81 c4 20 09 00 00 	add    rsp,0x920
  211324:	5d                   	pop    rbp
  211325:	c3                   	ret    
  211326:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
  21132d:	48 8b 8d 70 f8 ff ff 	mov    rcx,QWORD PTR [rbp-0x790]
  211334:	48 89 01             	mov    QWORD PTR [rcx],rax
            for (elf.section_headers) |*elf_section| {
  211337:	48 8b 85 50 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x6b0]
  21133e:	48 83 c0 01          	add    rax,0x1
  211342:	48 89 85 a0 fb ff ff 	mov    QWORD PTR [rbp-0x460],rax
  211349:	e9 e5 f8 ff ff       	jmp    210c33 <Elf_openFile+0x1203>
        if (elf.is_64) {
  21134e:	e9 0f 08 00 00       	jmp    211b62 <Elf_openFile+0x2132>
            }
        } else {
            if (sh_entry_size != 40) return error.InvalidFormat;
  211353:	66 83 bd dc fb ff ff 	cmp    WORD PTR [rbp-0x424],0x28
  21135a:	28 
  21135b:	74 37                	je     211394 <Elf_openFile+0x1964>
        errdefer elf.allocator.free(elf.section_headers);
  21135d:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211364:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  211368:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  21136f:	48 83 c0 38          	add    rax,0x38
  211373:	48 89 c6             	mov    rsi,rax
  211376:	e8 e5 30 00 00       	call   214460 <Allocator_free>
            if (sh_entry_size != 40) return error.InvalidFormat;
  21137b:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  211382:	e8 09 a9 ff ff       	call   20bc90 <__zig_return_error>
  211387:	66 b8 21 00          	mov    ax,0x21
  21138b:	48 81 c4 20 09 00 00 	add    rsp,0x920
  211392:	5d                   	pop    rbp
  211393:	c3                   	ret    
  211394:	eb 00                	jmp    211396 <Elf_openFile+0x1966>
  211396:	be aa 00 00 00       	mov    esi,0xaa
  21139b:	b8 08 00 00 00       	mov    eax,0x8
  2113a0:	89 c2                	mov    edx,eax
  2113a2:	48 8d 8d 98 fb ff ff 	lea    rcx,[rbp-0x468]

            for (elf.section_headers) |*elf_section| {
  2113a9:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  2113b0:	49 89 f8             	mov    r8,rdi
  2113b3:	49 83 c0 38          	add    r8,0x38
  2113b7:	48 89 bd 58 f8 ff ff 	mov    QWORD PTR [rbp-0x7a8],rdi
  2113be:	48 89 cf             	mov    rdi,rcx
  2113c1:	4c 89 85 50 f8 ff ff 	mov    QWORD PTR [rbp-0x7b0],r8
  2113c8:	e8 e3 34 02 00       	call   2348b0 <memset>
  2113cd:	48 c7 85 90 fb ff ff 	mov    QWORD PTR [rbp-0x470],0x0
  2113d4:	00 00 00 00 
  2113d8:	48 8b 8d 58 f8 ff ff 	mov    rcx,QWORD PTR [rbp-0x7a8]
  2113df:	48 8b 51 40          	mov    rdx,QWORD PTR [rcx+0x40]
  2113e3:	48 89 95 48 f8 ff ff 	mov    QWORD PTR [rbp-0x7b8],rdx
  2113ea:	48 8b 85 90 fb ff ff 	mov    rax,QWORD PTR [rbp-0x470]
  2113f1:	48 8b 8d 48 f8 ff ff 	mov    rcx,QWORD PTR [rbp-0x7b8]
  2113f8:	48 39 c8             	cmp    rax,rcx
  2113fb:	48 89 85 40 f8 ff ff 	mov    QWORD PTR [rbp-0x7c0],rax
  211402:	0f 83 58 07 00 00    	jae    211b60 <Elf_openFile+0x2130>
  211408:	48 8d 85 d8 fc ff ff 	lea    rax,[rbp-0x328]
  21140f:	48 8b 8d 40 f8 ff ff 	mov    rcx,QWORD PTR [rbp-0x7c0]
  211416:	48 c1 e1 06          	shl    rcx,0x6
  21141a:	48 8b 95 50 f8 ff ff 	mov    rdx,QWORD PTR [rbp-0x7b0]
  211421:	48 03 0a             	add    rcx,QWORD PTR [rdx]
  211424:	48 89 8d 98 fb ff ff 	mov    QWORD PTR [rbp-0x468],rcx
                // TODO (multiple occurences) allow implicit cast from %u32 -> %u64 ?
                elf_section.name = try in.readInt(elf.endian, u32);
  21142b:	48 8b 8d 98 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x468]
  211432:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  211439:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  211440:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  211444:	44 0f b6 c7          	movzx  r8d,dil
  211448:	48 8d bd d8 fc ff ff 	lea    rdi,[rbp-0x328]
  21144f:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  211456:	48 89 8d 38 f8 ff ff 	mov    QWORD PTR [rbp-0x7c8],rcx
  21145d:	44 89 c1             	mov    ecx,r8d
  211460:	48 89 85 30 f8 ff ff 	mov    QWORD PTR [rbp-0x7d0],rax
  211467:	e8 d4 29 00 00       	call   213e40 <InStream(ReadError)_readInt.32>
  21146c:	66 83 bd d8 fc ff ff 	cmp    WORD PTR [rbp-0x328],0x0
  211473:	00 
  211474:	74 48                	je     2114be <Elf_openFile+0x1a8e>
        errdefer elf.allocator.free(elf.section_headers);
  211476:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  21147d:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  211481:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211488:	48 83 c0 38          	add    rax,0x38
  21148c:	48 89 c6             	mov    rsi,rax
  21148f:	e8 cc 2f 00 00       	call   214460 <Allocator_free>
                elf_section.name = try in.readInt(elf.endian, u32);
  211494:	66 8b 85 d8 fc ff ff 	mov    ax,WORD PTR [rbp-0x328]
  21149b:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2114a2:	66 89 85 2e f8 ff ff 	mov    WORD PTR [rbp-0x7d2],ax
  2114a9:	e8 e2 a7 ff ff       	call   20bc90 <__zig_return_error>
  2114ae:	66 8b 85 2e f8 ff ff 	mov    ax,WORD PTR [rbp-0x7d2]
  2114b5:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2114bc:	5d                   	pop    rbp
  2114bd:	c3                   	ret    
  2114be:	48 8d 85 c8 fc ff ff 	lea    rax,[rbp-0x338]
  2114c5:	8b 8d dc fc ff ff    	mov    ecx,DWORD PTR [rbp-0x324]
  2114cb:	48 8b 95 38 f8 ff ff 	mov    rdx,QWORD PTR [rbp-0x7c8]
  2114d2:	89 0a                	mov    DWORD PTR [rdx],ecx
                elf_section.sh_type = try in.readInt(elf.endian, u32);
  2114d4:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
  2114db:	48 83 c6 04          	add    rsi,0x4
  2114df:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  2114e6:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  2114ed:	44 8a 47 0a          	mov    r8b,BYTE PTR [rdi+0xa]
  2114f1:	41 0f b6 c8          	movzx  ecx,r8b
  2114f5:	48 8d bd c8 fc ff ff 	lea    rdi,[rbp-0x338]
  2114fc:	4c 8b 8d 70 fb ff ff 	mov    r9,QWORD PTR [rbp-0x490]
  211503:	48 89 b5 20 f8 ff ff 	mov    QWORD PTR [rbp-0x7e0],rsi
  21150a:	4c 89 ce             	mov    rsi,r9
  21150d:	48 89 85 18 f8 ff ff 	mov    QWORD PTR [rbp-0x7e8],rax
  211514:	e8 27 29 00 00       	call   213e40 <InStream(ReadError)_readInt.32>
  211519:	66 83 bd c8 fc ff ff 	cmp    WORD PTR [rbp-0x338],0x0
  211520:	00 
  211521:	74 48                	je     21156b <Elf_openFile+0x1b3b>
        errdefer elf.allocator.free(elf.section_headers);
  211523:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  21152a:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  21152e:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211535:	48 83 c0 38          	add    rax,0x38
  211539:	48 89 c6             	mov    rsi,rax
  21153c:	e8 1f 2f 00 00       	call   214460 <Allocator_free>
                elf_section.sh_type = try in.readInt(elf.endian, u32);
  211541:	66 8b 85 c8 fc ff ff 	mov    ax,WORD PTR [rbp-0x338]
  211548:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  21154f:	66 89 85 16 f8 ff ff 	mov    WORD PTR [rbp-0x7ea],ax
  211556:	e8 35 a7 ff ff       	call   20bc90 <__zig_return_error>
  21155b:	66 8b 85 16 f8 ff ff 	mov    ax,WORD PTR [rbp-0x7ea]
  211562:	48 81 c4 20 09 00 00 	add    rsp,0x920
  211569:	5d                   	pop    rbp
  21156a:	c3                   	ret    
  21156b:	48 8d 85 b8 fc ff ff 	lea    rax,[rbp-0x348]
  211572:	8b 8d cc fc ff ff    	mov    ecx,DWORD PTR [rbp-0x334]
  211578:	48 8b 95 20 f8 ff ff 	mov    rdx,QWORD PTR [rbp-0x7e0]
  21157f:	89 0a                	mov    DWORD PTR [rdx],ecx
                elf_section.flags = u64(try in.readInt(elf.endian, u32));
  211581:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
  211588:	48 83 c6 08          	add    rsi,0x8
  21158c:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  211593:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  21159a:	44 8a 47 0a          	mov    r8b,BYTE PTR [rdi+0xa]
  21159e:	41 0f b6 c8          	movzx  ecx,r8b
  2115a2:	48 8d bd b8 fc ff ff 	lea    rdi,[rbp-0x348]
  2115a9:	4c 8b 8d 70 fb ff ff 	mov    r9,QWORD PTR [rbp-0x490]
  2115b0:	48 89 b5 08 f8 ff ff 	mov    QWORD PTR [rbp-0x7f8],rsi
  2115b7:	4c 89 ce             	mov    rsi,r9
  2115ba:	48 89 85 00 f8 ff ff 	mov    QWORD PTR [rbp-0x800],rax
  2115c1:	e8 7a 28 00 00       	call   213e40 <InStream(ReadError)_readInt.32>
  2115c6:	66 83 bd b8 fc ff ff 	cmp    WORD PTR [rbp-0x348],0x0
  2115cd:	00 
  2115ce:	74 48                	je     211618 <Elf_openFile+0x1be8>
        errdefer elf.allocator.free(elf.section_headers);
  2115d0:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2115d7:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  2115db:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2115e2:	48 83 c0 38          	add    rax,0x38
  2115e6:	48 89 c6             	mov    rsi,rax
  2115e9:	e8 72 2e 00 00       	call   214460 <Allocator_free>
                elf_section.flags = u64(try in.readInt(elf.endian, u32));
  2115ee:	66 8b 85 b8 fc ff ff 	mov    ax,WORD PTR [rbp-0x348]
  2115f5:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2115fc:	66 89 85 fe f7 ff ff 	mov    WORD PTR [rbp-0x802],ax
  211603:	e8 88 a6 ff ff       	call   20bc90 <__zig_return_error>
  211608:	66 8b 85 fe f7 ff ff 	mov    ax,WORD PTR [rbp-0x802]
  21160f:	48 81 c4 20 09 00 00 	add    rsp,0x920
  211616:	5d                   	pop    rbp
  211617:	c3                   	ret    
  211618:	48 8d 85 a8 fc ff ff 	lea    rax,[rbp-0x358]
  21161f:	8b 8d bc fc ff ff    	mov    ecx,DWORD PTR [rbp-0x344]
  211625:	89 ca                	mov    edx,ecx
  211627:	48 8b b5 08 f8 ff ff 	mov    rsi,QWORD PTR [rbp-0x7f8]
  21162e:	48 89 16             	mov    QWORD PTR [rsi],rdx
                elf_section.addr = u64(try in.readInt(elf.endian, u32));
  211631:	48 8b 95 98 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x468]
  211638:	48 83 c2 10          	add    rdx,0x10
  21163c:	48 8b bd f0 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x410]
  211643:	4c 8b 85 18 fc ff ff 	mov    r8,QWORD PTR [rbp-0x3e8]
  21164a:	45 8a 48 0a          	mov    r9b,BYTE PTR [r8+0xa]
  21164e:	41 0f b6 c9          	movzx  ecx,r9b
  211652:	4c 8d 85 a8 fc ff ff 	lea    r8,[rbp-0x358]
  211659:	48 89 bd f0 f7 ff ff 	mov    QWORD PTR [rbp-0x810],rdi
  211660:	4c 89 c7             	mov    rdi,r8
  211663:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  21166a:	4c 8b 85 f0 f7 ff ff 	mov    r8,QWORD PTR [rbp-0x810]
  211671:	48 89 95 e8 f7 ff ff 	mov    QWORD PTR [rbp-0x818],rdx
  211678:	4c 89 c2             	mov    rdx,r8
  21167b:	48 89 85 e0 f7 ff ff 	mov    QWORD PTR [rbp-0x820],rax
  211682:	e8 b9 27 00 00       	call   213e40 <InStream(ReadError)_readInt.32>
  211687:	66 83 bd a8 fc ff ff 	cmp    WORD PTR [rbp-0x358],0x0
  21168e:	00 
  21168f:	74 48                	je     2116d9 <Elf_openFile+0x1ca9>
        errdefer elf.allocator.free(elf.section_headers);
  211691:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211698:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  21169c:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2116a3:	48 83 c0 38          	add    rax,0x38
  2116a7:	48 89 c6             	mov    rsi,rax
  2116aa:	e8 b1 2d 00 00       	call   214460 <Allocator_free>
                elf_section.addr = u64(try in.readInt(elf.endian, u32));
  2116af:	66 8b 85 a8 fc ff ff 	mov    ax,WORD PTR [rbp-0x358]
  2116b6:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2116bd:	66 89 85 de f7 ff ff 	mov    WORD PTR [rbp-0x822],ax
  2116c4:	e8 c7 a5 ff ff       	call   20bc90 <__zig_return_error>
  2116c9:	66 8b 85 de f7 ff ff 	mov    ax,WORD PTR [rbp-0x822]
  2116d0:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2116d7:	5d                   	pop    rbp
  2116d8:	c3                   	ret    
  2116d9:	48 8d 85 98 fc ff ff 	lea    rax,[rbp-0x368]
  2116e0:	8b 8d ac fc ff ff    	mov    ecx,DWORD PTR [rbp-0x354]
  2116e6:	89 ca                	mov    edx,ecx
  2116e8:	48 8b b5 e8 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x818]
  2116ef:	48 89 16             	mov    QWORD PTR [rsi],rdx
                elf_section.offset = u64(try in.readInt(elf.endian, u32));
  2116f2:	48 8b 95 98 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x468]
  2116f9:	48 83 c2 18          	add    rdx,0x18
  2116fd:	48 8b bd f0 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x410]
  211704:	4c 8b 85 18 fc ff ff 	mov    r8,QWORD PTR [rbp-0x3e8]
  21170b:	45 8a 48 0a          	mov    r9b,BYTE PTR [r8+0xa]
  21170f:	41 0f b6 c9          	movzx  ecx,r9b
  211713:	4c 8d 85 98 fc ff ff 	lea    r8,[rbp-0x368]
  21171a:	48 89 bd d0 f7 ff ff 	mov    QWORD PTR [rbp-0x830],rdi
  211721:	4c 89 c7             	mov    rdi,r8
  211724:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  21172b:	4c 8b 85 d0 f7 ff ff 	mov    r8,QWORD PTR [rbp-0x830]
  211732:	48 89 95 c8 f7 ff ff 	mov    QWORD PTR [rbp-0x838],rdx
  211739:	4c 89 c2             	mov    rdx,r8
  21173c:	48 89 85 c0 f7 ff ff 	mov    QWORD PTR [rbp-0x840],rax
  211743:	e8 f8 26 00 00       	call   213e40 <InStream(ReadError)_readInt.32>
  211748:	66 83 bd 98 fc ff ff 	cmp    WORD PTR [rbp-0x368],0x0
  21174f:	00 
  211750:	74 48                	je     21179a <Elf_openFile+0x1d6a>
        errdefer elf.allocator.free(elf.section_headers);
  211752:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211759:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  21175d:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211764:	48 83 c0 38          	add    rax,0x38
  211768:	48 89 c6             	mov    rsi,rax
  21176b:	e8 f0 2c 00 00       	call   214460 <Allocator_free>
                elf_section.offset = u64(try in.readInt(elf.endian, u32));
  211770:	66 8b 85 98 fc ff ff 	mov    ax,WORD PTR [rbp-0x368]
  211777:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  21177e:	66 89 85 be f7 ff ff 	mov    WORD PTR [rbp-0x842],ax
  211785:	e8 06 a5 ff ff       	call   20bc90 <__zig_return_error>
  21178a:	66 8b 85 be f7 ff ff 	mov    ax,WORD PTR [rbp-0x842]
  211791:	48 81 c4 20 09 00 00 	add    rsp,0x920
  211798:	5d                   	pop    rbp
  211799:	c3                   	ret    
  21179a:	48 8d 85 88 fc ff ff 	lea    rax,[rbp-0x378]
  2117a1:	8b 8d 9c fc ff ff    	mov    ecx,DWORD PTR [rbp-0x364]
  2117a7:	89 ca                	mov    edx,ecx
  2117a9:	48 8b b5 c8 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x838]
  2117b0:	48 89 16             	mov    QWORD PTR [rsi],rdx
                elf_section.size = u64(try in.readInt(elf.endian, u32));
  2117b3:	48 8b 95 98 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x468]
  2117ba:	48 83 c2 20          	add    rdx,0x20
  2117be:	48 8b bd f0 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x410]
  2117c5:	4c 8b 85 18 fc ff ff 	mov    r8,QWORD PTR [rbp-0x3e8]
  2117cc:	45 8a 48 0a          	mov    r9b,BYTE PTR [r8+0xa]
  2117d0:	41 0f b6 c9          	movzx  ecx,r9b
  2117d4:	4c 8d 85 88 fc ff ff 	lea    r8,[rbp-0x378]
  2117db:	48 89 bd b0 f7 ff ff 	mov    QWORD PTR [rbp-0x850],rdi
  2117e2:	4c 89 c7             	mov    rdi,r8
  2117e5:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  2117ec:	4c 8b 85 b0 f7 ff ff 	mov    r8,QWORD PTR [rbp-0x850]
  2117f3:	48 89 95 a8 f7 ff ff 	mov    QWORD PTR [rbp-0x858],rdx
  2117fa:	4c 89 c2             	mov    rdx,r8
  2117fd:	48 89 85 a0 f7 ff ff 	mov    QWORD PTR [rbp-0x860],rax
  211804:	e8 37 26 00 00       	call   213e40 <InStream(ReadError)_readInt.32>
  211809:	66 83 bd 88 fc ff ff 	cmp    WORD PTR [rbp-0x378],0x0
  211810:	00 
  211811:	74 48                	je     21185b <Elf_openFile+0x1e2b>
        errdefer elf.allocator.free(elf.section_headers);
  211813:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  21181a:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  21181e:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211825:	48 83 c0 38          	add    rax,0x38
  211829:	48 89 c6             	mov    rsi,rax
  21182c:	e8 2f 2c 00 00       	call   214460 <Allocator_free>
                elf_section.size = u64(try in.readInt(elf.endian, u32));
  211831:	66 8b 85 88 fc ff ff 	mov    ax,WORD PTR [rbp-0x378]
  211838:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  21183f:	66 89 85 9e f7 ff ff 	mov    WORD PTR [rbp-0x862],ax
  211846:	e8 45 a4 ff ff       	call   20bc90 <__zig_return_error>
  21184b:	66 8b 85 9e f7 ff ff 	mov    ax,WORD PTR [rbp-0x862]
  211852:	48 81 c4 20 09 00 00 	add    rsp,0x920
  211859:	5d                   	pop    rbp
  21185a:	c3                   	ret    
  21185b:	48 8d 85 78 fc ff ff 	lea    rax,[rbp-0x388]
  211862:	8b 8d 8c fc ff ff    	mov    ecx,DWORD PTR [rbp-0x374]
  211868:	89 ca                	mov    edx,ecx
  21186a:	48 8b b5 a8 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x858]
  211871:	48 89 16             	mov    QWORD PTR [rsi],rdx
                elf_section.link = try in.readInt(elf.endian, u32);
  211874:	48 8b 95 98 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x468]
  21187b:	48 83 c2 28          	add    rdx,0x28
  21187f:	48 8b bd f0 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x410]
  211886:	4c 8b 85 18 fc ff ff 	mov    r8,QWORD PTR [rbp-0x3e8]
  21188d:	45 8a 48 0a          	mov    r9b,BYTE PTR [r8+0xa]
  211891:	41 0f b6 c9          	movzx  ecx,r9b
  211895:	4c 8d 85 78 fc ff ff 	lea    r8,[rbp-0x388]
  21189c:	48 89 bd 90 f7 ff ff 	mov    QWORD PTR [rbp-0x870],rdi
  2118a3:	4c 89 c7             	mov    rdi,r8
  2118a6:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  2118ad:	4c 8b 85 90 f7 ff ff 	mov    r8,QWORD PTR [rbp-0x870]
  2118b4:	48 89 95 88 f7 ff ff 	mov    QWORD PTR [rbp-0x878],rdx
  2118bb:	4c 89 c2             	mov    rdx,r8
  2118be:	48 89 85 80 f7 ff ff 	mov    QWORD PTR [rbp-0x880],rax
  2118c5:	e8 76 25 00 00       	call   213e40 <InStream(ReadError)_readInt.32>
  2118ca:	66 83 bd 78 fc ff ff 	cmp    WORD PTR [rbp-0x388],0x0
  2118d1:	00 
  2118d2:	74 48                	je     21191c <Elf_openFile+0x1eec>
        errdefer elf.allocator.free(elf.section_headers);
  2118d4:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2118db:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  2118df:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2118e6:	48 83 c0 38          	add    rax,0x38
  2118ea:	48 89 c6             	mov    rsi,rax
  2118ed:	e8 6e 2b 00 00       	call   214460 <Allocator_free>
                elf_section.link = try in.readInt(elf.endian, u32);
  2118f2:	66 8b 85 78 fc ff ff 	mov    ax,WORD PTR [rbp-0x388]
  2118f9:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  211900:	66 89 85 7e f7 ff ff 	mov    WORD PTR [rbp-0x882],ax
  211907:	e8 84 a3 ff ff       	call   20bc90 <__zig_return_error>
  21190c:	66 8b 85 7e f7 ff ff 	mov    ax,WORD PTR [rbp-0x882]
  211913:	48 81 c4 20 09 00 00 	add    rsp,0x920
  21191a:	5d                   	pop    rbp
  21191b:	c3                   	ret    
  21191c:	48 8d 85 68 fc ff ff 	lea    rax,[rbp-0x398]
  211923:	8b 8d 7c fc ff ff    	mov    ecx,DWORD PTR [rbp-0x384]
  211929:	48 8b 95 88 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x878]
  211930:	89 0a                	mov    DWORD PTR [rdx],ecx
                elf_section.info = try in.readInt(elf.endian, u32);
  211932:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
  211939:	48 83 c6 2c          	add    rsi,0x2c
  21193d:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  211944:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  21194b:	44 8a 47 0a          	mov    r8b,BYTE PTR [rdi+0xa]
  21194f:	41 0f b6 c8          	movzx  ecx,r8b
  211953:	48 8d bd 68 fc ff ff 	lea    rdi,[rbp-0x398]
  21195a:	4c 8b 8d 70 fb ff ff 	mov    r9,QWORD PTR [rbp-0x490]
  211961:	48 89 b5 70 f7 ff ff 	mov    QWORD PTR [rbp-0x890],rsi
  211968:	4c 89 ce             	mov    rsi,r9
  21196b:	48 89 85 68 f7 ff ff 	mov    QWORD PTR [rbp-0x898],rax
  211972:	e8 c9 24 00 00       	call   213e40 <InStream(ReadError)_readInt.32>
  211977:	66 83 bd 68 fc ff ff 	cmp    WORD PTR [rbp-0x398],0x0
  21197e:	00 
  21197f:	74 48                	je     2119c9 <Elf_openFile+0x1f99>
        errdefer elf.allocator.free(elf.section_headers);
  211981:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211988:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  21198c:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211993:	48 83 c0 38          	add    rax,0x38
  211997:	48 89 c6             	mov    rsi,rax
  21199a:	e8 c1 2a 00 00       	call   214460 <Allocator_free>
                elf_section.info = try in.readInt(elf.endian, u32);
  21199f:	66 8b 85 68 fc ff ff 	mov    ax,WORD PTR [rbp-0x398]
  2119a6:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2119ad:	66 89 85 66 f7 ff ff 	mov    WORD PTR [rbp-0x89a],ax
  2119b4:	e8 d7 a2 ff ff       	call   20bc90 <__zig_return_error>
  2119b9:	66 8b 85 66 f7 ff ff 	mov    ax,WORD PTR [rbp-0x89a]
  2119c0:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2119c7:	5d                   	pop    rbp
  2119c8:	c3                   	ret    
  2119c9:	48 8d 85 58 fc ff ff 	lea    rax,[rbp-0x3a8]
  2119d0:	8b 8d 6c fc ff ff    	mov    ecx,DWORD PTR [rbp-0x394]
  2119d6:	48 8b 95 70 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x890]
  2119dd:	89 0a                	mov    DWORD PTR [rdx],ecx
                elf_section.addr_align = u64(try in.readInt(elf.endian, u32));
  2119df:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
  2119e6:	48 83 c6 30          	add    rsi,0x30
  2119ea:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  2119f1:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  2119f8:	44 8a 47 0a          	mov    r8b,BYTE PTR [rdi+0xa]
  2119fc:	41 0f b6 c8          	movzx  ecx,r8b
  211a00:	48 8d bd 58 fc ff ff 	lea    rdi,[rbp-0x3a8]
  211a07:	4c 8b 8d 70 fb ff ff 	mov    r9,QWORD PTR [rbp-0x490]
  211a0e:	48 89 b5 58 f7 ff ff 	mov    QWORD PTR [rbp-0x8a8],rsi
  211a15:	4c 89 ce             	mov    rsi,r9
  211a18:	48 89 85 50 f7 ff ff 	mov    QWORD PTR [rbp-0x8b0],rax
  211a1f:	e8 1c 24 00 00       	call   213e40 <InStream(ReadError)_readInt.32>
  211a24:	66 83 bd 58 fc ff ff 	cmp    WORD PTR [rbp-0x3a8],0x0
  211a2b:	00 
  211a2c:	74 48                	je     211a76 <Elf_openFile+0x2046>
        errdefer elf.allocator.free(elf.section_headers);
  211a2e:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211a35:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  211a39:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211a40:	48 83 c0 38          	add    rax,0x38
  211a44:	48 89 c6             	mov    rsi,rax
  211a47:	e8 14 2a 00 00       	call   214460 <Allocator_free>
                elf_section.addr_align = u64(try in.readInt(elf.endian, u32));
  211a4c:	66 8b 85 58 fc ff ff 	mov    ax,WORD PTR [rbp-0x3a8]
  211a53:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  211a5a:	66 89 85 4e f7 ff ff 	mov    WORD PTR [rbp-0x8b2],ax
  211a61:	e8 2a a2 ff ff       	call   20bc90 <__zig_return_error>
  211a66:	66 8b 85 4e f7 ff ff 	mov    ax,WORD PTR [rbp-0x8b2]
  211a6d:	48 81 c4 20 09 00 00 	add    rsp,0x920
  211a74:	5d                   	pop    rbp
  211a75:	c3                   	ret    
  211a76:	48 8d 85 48 fc ff ff 	lea    rax,[rbp-0x3b8]
  211a7d:	8b 8d 5c fc ff ff    	mov    ecx,DWORD PTR [rbp-0x3a4]
  211a83:	89 ca                	mov    edx,ecx
  211a85:	48 8b b5 58 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8a8]
  211a8c:	48 89 16             	mov    QWORD PTR [rsi],rdx
                elf_section.ent_size = u64(try in.readInt(elf.endian, u32));
  211a8f:	48 8b 95 98 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x468]
  211a96:	48 83 c2 38          	add    rdx,0x38
  211a9a:	48 8b bd f0 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x410]
  211aa1:	4c 8b 85 18 fc ff ff 	mov    r8,QWORD PTR [rbp-0x3e8]
  211aa8:	45 8a 48 0a          	mov    r9b,BYTE PTR [r8+0xa]
  211aac:	41 0f b6 c9          	movzx  ecx,r9b
  211ab0:	4c 8d 85 48 fc ff ff 	lea    r8,[rbp-0x3b8]
  211ab7:	48 89 bd 40 f7 ff ff 	mov    QWORD PTR [rbp-0x8c0],rdi
  211abe:	4c 89 c7             	mov    rdi,r8
  211ac1:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  211ac8:	4c 8b 85 40 f7 ff ff 	mov    r8,QWORD PTR [rbp-0x8c0]
  211acf:	48 89 95 38 f7 ff ff 	mov    QWORD PTR [rbp-0x8c8],rdx
  211ad6:	4c 89 c2             	mov    rdx,r8
  211ad9:	48 89 85 30 f7 ff ff 	mov    QWORD PTR [rbp-0x8d0],rax
  211ae0:	e8 5b 23 00 00       	call   213e40 <InStream(ReadError)_readInt.32>
  211ae5:	66 83 bd 48 fc ff ff 	cmp    WORD PTR [rbp-0x3b8],0x0
  211aec:	00 
  211aed:	74 48                	je     211b37 <Elf_openFile+0x2107>
        errdefer elf.allocator.free(elf.section_headers);
  211aef:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211af6:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  211afa:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211b01:	48 83 c0 38          	add    rax,0x38
  211b05:	48 89 c6             	mov    rsi,rax
  211b08:	e8 53 29 00 00       	call   214460 <Allocator_free>
                elf_section.ent_size = u64(try in.readInt(elf.endian, u32));
  211b0d:	66 8b 85 48 fc ff ff 	mov    ax,WORD PTR [rbp-0x3b8]
  211b14:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  211b1b:	66 89 85 2e f7 ff ff 	mov    WORD PTR [rbp-0x8d2],ax
  211b22:	e8 69 a1 ff ff       	call   20bc90 <__zig_return_error>
  211b27:	66 8b 85 2e f7 ff ff 	mov    ax,WORD PTR [rbp-0x8d2]
  211b2e:	48 81 c4 20 09 00 00 	add    rsp,0x920
  211b35:	5d                   	pop    rbp
  211b36:	c3                   	ret    
  211b37:	8b 85 4c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3b4]
  211b3d:	89 c1                	mov    ecx,eax
  211b3f:	48 8b 95 38 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x8c8]
  211b46:	48 89 0a             	mov    QWORD PTR [rdx],rcx
            for (elf.section_headers) |*elf_section| {
  211b49:	48 8b 8d 40 f8 ff ff 	mov    rcx,QWORD PTR [rbp-0x7c0]
  211b50:	48 83 c1 01          	add    rcx,0x1
  211b54:	48 89 8d 90 fb ff ff 	mov    QWORD PTR [rbp-0x470],rcx
  211b5b:	e9 8a f8 ff ff       	jmp    2113ea <Elf_openFile+0x19ba>
        if (elf.is_64) {
  211b60:	eb 00                	jmp    211b62 <Elf_openFile+0x2132>
  211b62:	be aa 00 00 00       	mov    esi,0xaa
  211b67:	b8 08 00 00 00       	mov    eax,0x8
  211b6c:	89 c2                	mov    edx,eax
  211b6e:	48 8d 8d 88 fb ff ff 	lea    rcx,[rbp-0x478]
            }
        }

        for (elf.section_headers) |*elf_section| {
  211b75:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  211b7c:	49 89 f8             	mov    r8,rdi
  211b7f:	49 83 c0 38          	add    r8,0x38
  211b83:	48 89 bd 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rdi
  211b8a:	48 89 cf             	mov    rdi,rcx
  211b8d:	4c 89 85 18 f7 ff ff 	mov    QWORD PTR [rbp-0x8e8],r8
  211b94:	e8 17 2d 02 00       	call   2348b0 <memset>
  211b99:	48 c7 85 80 fb ff ff 	mov    QWORD PTR [rbp-0x480],0x0
  211ba0:	00 00 00 00 
  211ba4:	48 8b 8d 20 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x8e0]
  211bab:	48 8b 51 40          	mov    rdx,QWORD PTR [rcx+0x40]
  211baf:	48 89 95 10 f7 ff ff 	mov    QWORD PTR [rbp-0x8f0],rdx
  211bb6:	48 8b 85 80 fb ff ff 	mov    rax,QWORD PTR [rbp-0x480]
  211bbd:	48 8b 8d 10 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x8f0]
  211bc4:	48 39 c8             	cmp    rax,rcx
  211bc7:	48 89 85 08 f7 ff ff 	mov    QWORD PTR [rbp-0x8f8],rax
  211bce:	0f 83 1a 01 00 00    	jae    211cee <Elf_openFile+0x22be>
  211bd4:	48 8b 85 08 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8f8]
  211bdb:	48 c1 e0 06          	shl    rax,0x6
  211bdf:	48 8b 8d 18 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x8e8]
  211be6:	48 03 01             	add    rax,QWORD PTR [rcx]
  211be9:	48 89 85 88 fb ff ff 	mov    QWORD PTR [rbp-0x478],rax
            if (elf_section.sh_type != SHT_NOBITS) {
  211bf0:	48 8b 85 88 fb ff ff 	mov    rax,QWORD PTR [rbp-0x478]
  211bf7:	83 78 04 08          	cmp    DWORD PTR [rax+0x4],0x8
  211bfb:	0f 84 d4 00 00 00    	je     211cd5 <Elf_openFile+0x22a5>
  211c01:	48 8d bd 30 fc ff ff 	lea    rdi,[rbp-0x3d0]
                const file_end_offset = try math.add(u64, elf_section.offset, elf_section.size);
  211c08:	48 8b 85 88 fb ff ff 	mov    rax,QWORD PTR [rbp-0x478]
  211c0f:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
  211c13:	48 8b 85 88 fb ff ff 	mov    rax,QWORD PTR [rbp-0x478]
  211c1a:	48 8b 48 20          	mov    rcx,QWORD PTR [rax+0x20]
  211c1e:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  211c25:	e8 56 24 00 00       	call   214080 <add>
  211c2a:	66 83 bd 30 fc ff ff 	cmp    WORD PTR [rbp-0x3d0],0x0
  211c31:	00 
  211c32:	74 48                	je     211c7c <Elf_openFile+0x224c>
        errdefer elf.allocator.free(elf.section_headers);
  211c34:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211c3b:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  211c3f:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211c46:	48 83 c0 38          	add    rax,0x38
  211c4a:	48 89 c6             	mov    rsi,rax
  211c4d:	e8 0e 28 00 00       	call   214460 <Allocator_free>
                const file_end_offset = try math.add(u64, elf_section.offset, elf_section.size);
  211c52:	66 8b 85 30 fc ff ff 	mov    ax,WORD PTR [rbp-0x3d0]
  211c59:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  211c60:	66 89 85 06 f7 ff ff 	mov    WORD PTR [rbp-0x8fa],ax
  211c67:	e8 24 a0 ff ff       	call   20bc90 <__zig_return_error>
  211c6c:	66 8b 85 06 f7 ff ff 	mov    ax,WORD PTR [rbp-0x8fa]
  211c73:	48 81 c4 20 09 00 00 	add    rsp,0x920
  211c7a:	5d                   	pop    rbp
  211c7b:	c3                   	ret    
  211c7c:	48 8b 85 38 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3c8]
  211c83:	48 89 85 78 fb ff ff 	mov    QWORD PTR [rbp-0x488],rax
                if (stream_end < file_end_offset) return error.InvalidFormat;
  211c8a:	48 8b 85 b0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x450]
  211c91:	48 3b 85 78 fb ff ff 	cmp    rax,QWORD PTR [rbp-0x488]
  211c98:	73 37                	jae    211cd1 <Elf_openFile+0x22a1>
        errdefer elf.allocator.free(elf.section_headers);
  211c9a:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211ca1:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  211ca5:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211cac:	48 83 c0 38          	add    rax,0x38
  211cb0:	48 89 c6             	mov    rsi,rax
  211cb3:	e8 a8 27 00 00       	call   214460 <Allocator_free>
                if (stream_end < file_end_offset) return error.InvalidFormat;
  211cb8:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  211cbf:	e8 cc 9f ff ff       	call   20bc90 <__zig_return_error>
  211cc4:	66 b8 21 00          	mov    ax,0x21
  211cc8:	48 81 c4 20 09 00 00 	add    rsp,0x920
  211ccf:	5d                   	pop    rbp
  211cd0:	c3                   	ret    
  211cd1:	eb 00                	jmp    211cd3 <Elf_openFile+0x22a3>
            if (elf_section.sh_type != SHT_NOBITS) {
  211cd3:	eb 02                	jmp    211cd7 <Elf_openFile+0x22a7>
  211cd5:	eb 00                	jmp    211cd7 <Elf_openFile+0x22a7>
        for (elf.section_headers) |*elf_section| {
  211cd7:	48 8b 85 08 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8f8]
  211cde:	48 83 c0 01          	add    rax,0x1
  211ce2:	48 89 85 80 fb ff ff 	mov    QWORD PTR [rbp-0x480],rax
  211ce9:	e9 c8 fe ff ff       	jmp    211bb6 <Elf_openFile+0x2186>
            }
        }

        elf.string_section = &elf.section_headers[elf.string_section_index];
  211cee:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211cf5:	48 83 c0 30          	add    rax,0x30
  211cf9:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  211d00:	48 89 ca             	mov    rdx,rcx
  211d03:	48 83 c2 38          	add    rdx,0x38
  211d07:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  211d0e:	48 8b 76 28          	mov    rsi,QWORD PTR [rsi+0x28]
  211d12:	48 3b 71 40          	cmp    rsi,QWORD PTR [rcx+0x40]
  211d16:	48 89 85 f8 f6 ff ff 	mov    QWORD PTR [rbp-0x908],rax
  211d1d:	48 89 b5 f0 f6 ff ff 	mov    QWORD PTR [rbp-0x910],rsi
  211d24:	48 89 95 e8 f6 ff ff 	mov    QWORD PTR [rbp-0x918],rdx
  211d2b:	0f 82 57 01 00 00    	jb     211e88 <Elf_openFile+0x2458>
  211d31:	e9 42 01 00 00       	jmp    211e78 <Elf_openFile+0x2448>
        errdefer elf.allocator.free(elf.section_headers);
  211d36:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211d3d:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  211d41:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211d48:	48 83 c0 38          	add    rax,0x38
  211d4c:	48 89 c6             	mov    rsi,rax
  211d4f:	e8 0c 27 00 00       	call   214460 <Allocator_free>
        if (elf.string_section.sh_type != SHT_STRTAB) {
            // not a string table
            return error.InvalidFormat;
  211d54:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  211d5b:	e8 30 9f ff ff       	call   20bc90 <__zig_return_error>
  211d60:	66 b8 21 00          	mov    ax,0x21
  211d64:	48 81 c4 20 09 00 00 	add    rsp,0x920
  211d6b:	5d                   	pop    rbp
  211d6c:	c3                   	ret    
  211d6d:	31 c0                	xor    eax,eax
  211d6f:	66 89 c1             	mov    cx,ax
    pub fn openFile(elf: *Elf, allocator: *mem.Allocator, file: *os.File) !void {
  211d72:	66 89 c8             	mov    ax,cx
  211d75:	48 81 c4 20 09 00 00 	add    rsp,0x920
  211d7c:	5d                   	pop    rbp
  211d7d:	c3                   	ret    
  211d7e:	48 8d 3d 73 16 03 00 	lea    rdi,[rip+0x31673]        # 2433f8 <__unnamed_20>
  211d85:	31 c0                	xor    eax,eax
  211d87:	89 c6                	mov    esi,eax
        try in.readNoEof(magic[0..]);
  211d89:	e8 72 98 ff ff       	call   20b600 <panic>
  211d8e:	48 8d 55 e0          	lea    rdx,[rbp-0x20]
  211d92:	48 8d 85 ec fb ff ff 	lea    rax,[rbp-0x414]
  211d99:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  211d9d:	48 c7 45 e8 04 00 00 	mov    QWORD PTR [rbp-0x18],0x4
  211da4:	00 
  211da5:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  211dac:	48 8b b5 68 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x498]
  211db3:	e8 08 1c 00 00       	call   2139c0 <InStream(ReadError)_readNoEof>
  211db8:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  211dbc:	66 83 7d de 00       	cmp    WORD PTR [rbp-0x22],0x0
  211dc1:	0f 85 2a dd ff ff    	jne    20faf1 <Elf_openFile+0xc1>
  211dc7:	e9 4c dd ff ff       	jmp    20fb18 <Elf_openFile+0xe8>
  211dcc:	48 8d 3d f5 13 03 00 	lea    rdi,[rip+0x313f5]        # 2431c8 <__unnamed_4>
  211dd3:	31 c0                	xor    eax,eax
  211dd5:	89 c6                	mov    esi,eax
        const sh_byte_count = u64(sh_entry_size) * u64(sh_entry_count);
  211dd7:	e8 24 98 ff ff       	call   20b600 <panic>
  211ddc:	48 8d bd 68 fe ff ff 	lea    rdi,[rbp-0x198]
  211de3:	48 8b 85 a0 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x660]
  211dea:	48 89 85 d0 fb ff ff 	mov    QWORD PTR [rbp-0x430],rax
        const end_sh = try math.add(u64, elf.section_header_offset, sh_byte_count);
  211df1:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  211df8:	48 8b 51 20          	mov    rdx,QWORD PTR [rcx+0x20]
  211dfc:	48 8b 8d d0 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x430]
  211e03:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  211e0a:	e8 71 22 00 00       	call   214080 <add>
  211e0f:	66 83 bd 68 fe ff ff 	cmp    WORD PTR [rbp-0x198],0x0
  211e16:	00 
  211e17:	0f 85 2d eb ff ff    	jne    21094a <Elf_openFile+0xf1a>
  211e1d:	e9 52 eb ff ff       	jmp    210974 <Elf_openFile+0xf44>
  211e22:	48 8d 3d 9f 13 03 00 	lea    rdi,[rip+0x3139f]        # 2431c8 <__unnamed_4>
  211e29:	31 c0                	xor    eax,eax
  211e2b:	89 c6                	mov    esi,eax
        const ph_byte_count = u64(ph_entry_size) * u64(ph_entry_count);
  211e2d:	e8 ce 97 ff ff       	call   20b600 <panic>
  211e32:	48 8d bd 48 fe ff ff 	lea    rdi,[rbp-0x1b8]
  211e39:	48 8b 85 90 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x670]
  211e40:	48 89 85 c0 fb ff ff 	mov    QWORD PTR [rbp-0x440],rax
        const end_ph = try math.add(u64, elf.program_header_offset, ph_byte_count);
  211e47:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  211e4e:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
  211e52:	48 8b 8d c0 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x440]
  211e59:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  211e60:	e8 1b 22 00 00       	call   214080 <add>
  211e65:	66 83 bd 48 fe ff ff 	cmp    WORD PTR [rbp-0x1b8],0x0
  211e6c:	00 
  211e6d:	0f 85 41 eb ff ff    	jne    2109b4 <Elf_openFile+0xf84>
  211e73:	e9 66 eb ff ff       	jmp    2109de <Elf_openFile+0xfae>
  211e78:	48 8d 3d 79 15 03 00 	lea    rdi,[rip+0x31579]        # 2433f8 <__unnamed_20>
  211e7f:	31 c0                	xor    eax,eax
  211e81:	89 c6                	mov    esi,eax
        elf.string_section = &elf.section_headers[elf.string_section_index];
  211e83:	e8 78 97 ff ff       	call   20b600 <panic>
  211e88:	48 8b 85 f0 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x910]
  211e8f:	48 c1 e0 06          	shl    rax,0x6
  211e93:	48 8b 8d e8 f6 ff ff 	mov    rcx,QWORD PTR [rbp-0x918]
  211e9a:	48 03 01             	add    rax,QWORD PTR [rcx]
  211e9d:	48 8b 95 f8 f6 ff ff 	mov    rdx,QWORD PTR [rbp-0x908]
  211ea4:	48 89 02             	mov    QWORD PTR [rdx],rax
        if (elf.string_section.sh_type != SHT_STRTAB) {
  211ea7:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211eae:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
  211eb2:	83 78 04 03          	cmp    DWORD PTR [rax+0x4],0x3
  211eb6:	0f 85 7a fe ff ff    	jne    211d36 <Elf_openFile+0x2306>
  211ebc:	e9 ac fe ff ff       	jmp    211d6d <Elf_openFile+0x233d>
  211ec1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  211ec8:	0f 1f 84 00 00 00 00 
  211ecf:	00 

0000000000211ed0 <File_close>:
    pub fn close(self: *File) void {
  211ed0:	55                   	push   rbp
  211ed1:	48 89 e5             	mov    rbp,rsp
  211ed4:	48 83 ec 10          	sub    rsp,0x10
  211ed8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
        os.close(self.handle);
  211edc:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  211ee0:	8b 3f                	mov    edi,DWORD PTR [rdi]
  211ee2:	e8 e9 35 00 00       	call   2154d0 <close>
        self.handle = undefined;
  211ee7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  211eeb:	89 38                	mov    DWORD PTR [rax],edi
    pub fn close(self: *File) void {
  211eed:	48 83 c4 10          	add    rsp,0x10
  211ef1:	5d                   	pop    rbp
  211ef2:	c3                   	ret    
  211ef3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  211efa:	84 00 00 00 00 00 

0000000000211f00 <Elf_findSection>:
        elf.allocator.free(elf.section_headers);

        if (elf.auto_close_stream) elf.in_file.close();
    }

    pub fn findSection(elf: *Elf, name: []const u8) !?*SectionHeader {
  211f00:	55                   	push   rbp
  211f01:	48 89 e5             	mov    rbp,rsp
  211f04:	48 81 ec 30 01 00 00 	sub    rsp,0x130
  211f0b:	48 89 f8             	mov    rax,rdi
  211f0e:	4c 8d 45 f0          	lea    r8,[rbp-0x10]
  211f12:	48 89 55 80          	mov    QWORD PTR [rbp-0x80],rdx
        var file_stream = io.FileInStream.init(elf.in_file);
  211f16:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
  211f1a:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
  211f1d:	48 89 bd 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rdi
  211f24:	4c 89 c7             	mov    rdi,r8
  211f27:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  211f2e:	48 89 d6             	mov    rsi,rdx
  211f31:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
  211f38:	48 89 8d 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rcx
  211f3f:	e8 4c 1a 00 00       	call   213990 <FileInStream_init>
  211f44:	be aa 00 00 00       	mov    esi,0xaa
  211f49:	41 b9 08 00 00 00    	mov    r9d,0x8
  211f4f:	44 89 ca             	mov    edx,r9d
  211f52:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
  211f59:	48 8d 8d 70 ff ff ff 	lea    rcx,[rbp-0x90]
  211f60:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  211f64:	48 89 bd 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdi
  211f6b:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  211f6f:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
        const in = &file_stream.stream;
  211f76:	48 83 c1 08          	add    rcx,0x8
  211f7a:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx

        section_loop: for (elf.section_headers) |*elf_section| {
  211f81:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  211f85:	48 89 cf             	mov    rdi,rcx
  211f88:	48 83 c7 38          	add    rdi,0x38
  211f8c:	48 89 bd 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdi
  211f93:	48 89 c7             	mov    rdi,rax
  211f96:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  211f9d:	e8 0e 29 02 00       	call   2348b0 <memset>
  211fa2:	48 c7 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],0x0
  211fa9:	00 00 00 00 
  211fad:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  211fb4:	48 8b 48 40          	mov    rcx,QWORD PTR [rax+0x40]
  211fb8:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  211fbf:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
  211fc6:	48 8b 8d 00 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x100]
  211fcd:	48 39 c8             	cmp    rax,rcx
  211fd0:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  211fd7:	0f 83 a6 02 00 00    	jae    212283 <Elf_findSection+0x383>
  211fdd:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  211fe4:	48 c1 e0 06          	shl    rax,0x6
  211fe8:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  211fef:	48 03 01             	add    rax,QWORD PTR [rcx]
  211ff2:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
            if (elf_section.sh_type == SHT_NULL) continue;
  211ff9:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  212000:	83 78 04 00          	cmp    DWORD PTR [rax+0x4],0x0
  212004:	75 05                	jne    21200b <Elf_findSection+0x10b>
  212006:	e9 61 02 00 00       	jmp    21226c <Elf_findSection+0x36c>
  21200b:	eb 00                	jmp    21200d <Elf_findSection+0x10d>

            const name_offset = elf.string_section.offset + elf_section.name;
  21200d:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  212011:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
  212015:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  212019:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  212020:	8b 11                	mov    edx,DWORD PTR [rcx]
  212022:	89 d1                	mov    ecx,edx
  212024:	48 01 c8             	add    rax,rcx
  212027:	40 0f 92 c6          	setb   sil
  21202b:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  212032:	40 88 b5 ef fe ff ff 	mov    BYTE PTR [rbp-0x111],sil
  212039:	0f 82 70 02 00 00    	jb     2122af <Elf_findSection+0x3af>
  21203f:	e9 7b 02 00 00       	jmp    2122bf <Elf_findSection+0x3bf>
            try elf.in_file.seekTo(name_offset);
  212044:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  212048:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  21204f:	66 89 85 ec fe ff ff 	mov    WORD PTR [rbp-0x114],ax
  212056:	e8 35 9c ff ff       	call   20bc90 <__zig_return_error>
  21205b:	66 8b 85 ec fe ff ff 	mov    ax,WORD PTR [rbp-0x114]
  212062:	66 89 45 d8          	mov    WORD PTR [rbp-0x28],ax
  212066:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  21206a:	48 8b 8d 30 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd0]
  212071:	48 89 39             	mov    QWORD PTR [rcx],rdi
  212074:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  212078:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21207c:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  212083:	48 81 c4 30 01 00 00 	add    rsp,0x130
  21208a:	5d                   	pop    rbp
  21208b:	c3                   	ret    
  21208c:	48 8d bd 4f ff ff ff 	lea    rdi,[rbp-0xb1]
  212093:	be aa 00 00 00       	mov    esi,0xaa
  212098:	b8 01 00 00 00       	mov    eax,0x1
  21209d:	89 c2                	mov    edx,eax

            for (name) |expected_c| {
  21209f:	e8 0c 28 02 00       	call   2348b0 <memset>
  2120a4:	48 c7 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],0x0
  2120ab:	00 00 00 00 
  2120af:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  2120b6:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
  2120ba:	48 89 bd e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rdi
  2120c1:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  2120c8:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  2120cf:	48 39 c8             	cmp    rax,rcx
  2120d2:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
  2120d9:	0f 83 dc 00 00 00    	jae    2121bb <Elf_findSection+0x2bb>
  2120df:	48 8d 7d d0          	lea    rdi,[rbp-0x30]
  2120e3:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  2120ea:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  2120ed:	48 8b 95 d8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x128]
  2120f4:	40 8a 34 11          	mov    sil,BYTE PTR [rcx+rdx*1]
  2120f8:	40 88 b5 4f ff ff ff 	mov    BYTE PTR [rbp-0xb1],sil
                const target_c = try in.readByte();
  2120ff:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  212106:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21210d:	e8 2e 1a 00 00       	call   213b40 <InStream(ReadError)_readByte>
  212112:	66 83 7d d0 00       	cmp    WORD PTR [rbp-0x30],0x0
  212117:	74 48                	je     212161 <Elf_findSection+0x261>
  212119:	66 8b 45 d0          	mov    ax,WORD PTR [rbp-0x30]
  21211d:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  212124:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  21212b:	e8 60 9b ff ff       	call   20bc90 <__zig_return_error>
  212130:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [rbp-0x12a]
  212137:	66 89 45 b8          	mov    WORD PTR [rbp-0x48],ax
  21213b:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  21213f:	48 8b 8d 30 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd0]
  212146:	48 89 39             	mov    QWORD PTR [rcx],rdi
  212149:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21214d:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  212151:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  212158:	48 81 c4 30 01 00 00 	add    rsp,0x130
  21215f:	5d                   	pop    rbp
  212160:	c3                   	ret    
  212161:	8a 45 d2             	mov    al,BYTE PTR [rbp-0x2e]
  212164:	88 85 3f ff ff ff    	mov    BYTE PTR [rbp-0xc1],al
                if (target_c == 0 or expected_c != target_c) continue :section_loop;
  21216a:	80 bd 3f ff ff ff 00 	cmp    BYTE PTR [rbp-0xc1],0x0
  212171:	0f 94 c0             	sete   al
  212174:	a8 01                	test   al,0x1
  212176:	88 85 d5 fe ff ff    	mov    BYTE PTR [rbp-0x12b],al
  21217c:	75 15                	jne    212193 <Elf_findSection+0x293>
  21217e:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [rbp-0xb1]
  212184:	3a 85 3f ff ff ff    	cmp    al,BYTE PTR [rbp-0xc1]
  21218a:	0f 95 c0             	setne  al
  21218d:	88 85 d5 fe ff ff    	mov    BYTE PTR [rbp-0x12b],al
  212193:	8a 85 d5 fe ff ff    	mov    al,BYTE PTR [rbp-0x12b]
  212199:	a8 01                	test   al,0x1
  21219b:	75 02                	jne    21219f <Elf_findSection+0x29f>
  21219d:	eb 05                	jmp    2121a4 <Elf_findSection+0x2a4>
  21219f:	e9 c8 00 00 00       	jmp    21226c <Elf_findSection+0x36c>
            for (name) |expected_c| {
  2121a4:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  2121ab:	48 83 c0 01          	add    rax,0x1
  2121af:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  2121b6:	e9 06 ff ff ff       	jmp    2120c1 <Elf_findSection+0x1c1>
  2121bb:	48 8d 7d b0          	lea    rdi,[rbp-0x50]
            }

            {
                const null_byte = try in.readByte();
  2121bf:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  2121c6:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  2121cd:	e8 6e 19 00 00       	call   213b40 <InStream(ReadError)_readByte>
  2121d2:	66 83 7d b0 00       	cmp    WORD PTR [rbp-0x50],0x0
  2121d7:	74 48                	je     212221 <Elf_findSection+0x321>
  2121d9:	66 8b 45 b0          	mov    ax,WORD PTR [rbp-0x50]
  2121dd:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  2121e4:	66 89 85 d2 fe ff ff 	mov    WORD PTR [rbp-0x12e],ax
  2121eb:	e8 a0 9a ff ff       	call   20bc90 <__zig_return_error>
  2121f0:	66 8b 85 d2 fe ff ff 	mov    ax,WORD PTR [rbp-0x12e]
  2121f7:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  2121fb:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  2121ff:	48 8b 8d 30 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd0]
  212206:	48 89 39             	mov    QWORD PTR [rcx],rdi
  212209:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  21220d:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  212211:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  212218:	48 81 c4 30 01 00 00 	add    rsp,0x130
  21221f:	5d                   	pop    rbp
  212220:	c3                   	ret    
  212221:	8a 45 b2             	mov    al,BYTE PTR [rbp-0x4e]
  212224:	88 85 3e ff ff ff    	mov    BYTE PTR [rbp-0xc2],al
                if (null_byte == 0) return elf_section;
  21222a:	80 bd 3e ff ff ff 00 	cmp    BYTE PTR [rbp-0xc2],0x0
  212231:	75 37                	jne    21226a <Elf_findSection+0x36a>
  212233:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  21223a:	66 c7 45 88 00 00    	mov    WORD PTR [rbp-0x78],0x0
  212240:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  212244:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  212248:	48 8b 8d 30 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd0]
  21224f:	48 89 01             	mov    QWORD PTR [rcx],rax
  212252:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  212256:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21225a:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  212261:	48 81 c4 30 01 00 00 	add    rsp,0x130
  212268:	5d                   	pop    rbp
  212269:	c3                   	ret    
        section_loop: for (elf.section_headers) |*elf_section| {
  21226a:	eb 00                	jmp    21226c <Elf_findSection+0x36c>
  21226c:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  212273:	48 83 c0 01          	add    rax,0x1
  212277:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  21227e:	e9 3c fd ff ff       	jmp    211fbf <Elf_findSection+0xbf>
            }
        }

        return null;
  212283:	48 8b 05 26 e0 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffee026]        # 2002b0 <__unnamed_100>
  21228a:	48 8b 8d 30 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd0]
  212291:	48 89 01             	mov    QWORD PTR [rcx],rax
  212294:	48 8b 05 1d e0 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffee01d]        # 2002b8 <__unnamed_100+0x8>
  21229b:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21229f:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  2122a6:	48 81 c4 30 01 00 00 	add    rsp,0x130
  2122ad:	5d                   	pop    rbp
  2122ae:	c3                   	ret    
  2122af:	48 8d 3d 12 0f 03 00 	lea    rdi,[rip+0x30f12]        # 2431c8 <__unnamed_4>
  2122b6:	31 c0                	xor    eax,eax
  2122b8:	89 c6                	mov    esi,eax
            const name_offset = elf.string_section.offset + elf_section.name;
  2122ba:	e8 41 93 ff ff       	call   20b600 <panic>
  2122bf:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  2122c6:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
            try elf.in_file.seekTo(name_offset);
  2122cd:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  2122d1:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  2122d4:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
  2122db:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  2122e2:	e8 89 1f 00 00       	call   214270 <File_seekTo>
  2122e7:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  2122eb:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  2122f0:	0f 85 4e fd ff ff    	jne    212044 <Elf_findSection+0x144>
  2122f6:	e9 91 fd ff ff       	jmp    21208c <Elf_findSection+0x18c>
  2122fb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000212300 <Elf_close>:
    pub fn close(elf: *Elf) void {
  212300:	55                   	push   rbp
  212301:	48 89 e5             	mov    rbp,rsp
  212304:	48 83 ec 10          	sub    rsp,0x10
  212308:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
        elf.allocator.free(elf.section_headers);
  21230c:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  212310:	48 8b 7f 48          	mov    rdi,QWORD PTR [rdi+0x48]
  212314:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  212318:	48 83 c0 38          	add    rax,0x38
  21231c:	48 89 c6             	mov    rsi,rax
  21231f:	e8 3c 21 00 00       	call   214460 <Allocator_free>
        if (elf.auto_close_stream) elf.in_file.close();
  212324:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  212328:	f6 40 08 01          	test   BYTE PTR [rax+0x8],0x1
  21232c:	75 02                	jne    212330 <Elf_close+0x30>
  21232e:	eb 0e                	jmp    21233e <Elf_close+0x3e>
  212330:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  212334:	48 8b 38             	mov    rdi,QWORD PTR [rax]
  212337:	e8 94 fb ff ff       	call   211ed0 <File_close>
  21233c:	eb 02                	jmp    212340 <Elf_close+0x40>
  21233e:	eb 00                	jmp    212340 <Elf_close+0x40>
    pub fn close(elf: *Elf) void {
  212340:	48 83 c4 10          	add    rsp,0x10
  212344:	5d                   	pop    rbp
  212345:	c3                   	ret    
  212346:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  21234d:	00 00 00 

0000000000212350 <scanAllCompileUnits>:
fn scanAllCompileUnits(st: *ElfStackTrace) !void {
  212350:	55                   	push   rbp
  212351:	48 89 e5             	mov    rbp,rsp
  212354:	48 81 ec f0 03 00 00 	sub    rsp,0x3f0
  21235b:	48 89 b5 e8 fd ff ff 	mov    QWORD PTR [rbp-0x218],rsi
    const debug_info_end = st.debug_info.offset + st.debug_info.size;
  212362:	48 8b b5 e8 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x218]
  212369:	48 8b 76 60          	mov    rsi,QWORD PTR [rsi+0x60]
  21236d:	48 8b 76 18          	mov    rsi,QWORD PTR [rsi+0x18]
  212371:	48 8b 85 e8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x218]
  212378:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
  21237c:	48 03 70 20          	add    rsi,QWORD PTR [rax+0x20]
  212380:	0f 92 c1             	setb   cl
  212383:	48 89 bd 08 fd ff ff 	mov    QWORD PTR [rbp-0x2f8],rdi
  21238a:	48 89 b5 00 fd ff ff 	mov    QWORD PTR [rbp-0x300],rsi
  212391:	88 8d ff fc ff ff    	mov    BYTE PTR [rbp-0x301],cl
  212397:	0f 82 d7 08 00 00    	jb     212c74 <scanAllCompileUnits+0x924>
  21239d:	e9 e2 08 00 00       	jmp    212c84 <scanAllCompileUnits+0x934>
    while (this_unit_offset < debug_info_end) {
  2123a2:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
  2123a9:	48 3b 85 e0 fd ff ff 	cmp    rax,QWORD PTR [rbp-0x220]
  2123b0:	0f 83 ad 08 00 00    	jae    212c63 <scanAllCompileUnits+0x913>
        try st.self_exe_file.seekTo(this_unit_offset);
  2123b6:	48 8b b5 e8 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x218]
  2123bd:	48 8b 95 d8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x228]
  2123c4:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  2123cb:	e8 a0 1e 00 00       	call   214270 <File_seekTo>
  2123d0:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  2123d4:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  2123d9:	74 27                	je     212402 <scanAllCompileUnits+0xb2>
  2123db:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  2123df:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  2123e6:	66 89 85 fc fc ff ff 	mov    WORD PTR [rbp-0x304],ax
  2123ed:	e8 9e 98 ff ff       	call   20bc90 <__zig_return_error>
  2123f2:	66 8b 85 fc fc ff ff 	mov    ax,WORD PTR [rbp-0x304]
  2123f9:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  212400:	5d                   	pop    rbp
  212401:	c3                   	ret    
  212402:	48 8d 7d d8          	lea    rdi,[rbp-0x28]
  212406:	48 8d 85 b7 fd ff ff 	lea    rax,[rbp-0x249]
  21240d:	be aa 00 00 00       	mov    esi,0xaa
  212412:	b9 01 00 00 00       	mov    ecx,0x1
  212417:	89 ca                	mov    edx,ecx
        var is_64: bool = undefined;
  212419:	49 89 c0             	mov    r8,rax
  21241c:	48 89 bd f0 fc ff ff 	mov    QWORD PTR [rbp-0x310],rdi
  212423:	4c 89 c7             	mov    rdi,r8
  212426:	48 89 85 e8 fc ff ff 	mov    QWORD PTR [rbp-0x318],rax
  21242d:	e8 7e 24 02 00       	call   2348b0 <memset>
        const unit_length = try readInitialLength(@typeOf(in_stream.readFn).ReturnType.ErrorSet, in_stream, &is_64);
  212432:	48 8b 95 b8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x248]
  212439:	48 8b bd f0 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x310]
  212440:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  212447:	48 8b 8d e8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x318]
  21244e:	e8 5d 31 00 00       	call   2155b0 <readInitialLength>
  212453:	66 83 7d d8 00       	cmp    WORD PTR [rbp-0x28],0x0
  212458:	74 27                	je     212481 <scanAllCompileUnits+0x131>
  21245a:	66 8b 45 d8          	mov    ax,WORD PTR [rbp-0x28]
  21245e:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  212465:	66 89 85 e6 fc ff ff 	mov    WORD PTR [rbp-0x31a],ax
  21246c:	e8 1f 98 ff ff       	call   20bc90 <__zig_return_error>
  212471:	66 8b 85 e6 fc ff ff 	mov    ax,WORD PTR [rbp-0x31a]
  212478:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  21247f:	5d                   	pop    rbp
  212480:	c3                   	ret    
  212481:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  212485:	48 89 85 a8 fd ff ff 	mov    QWORD PTR [rbp-0x258],rax
        if (unit_length == 0) return;
  21248c:	48 83 bd a8 fd ff ff 	cmp    QWORD PTR [rbp-0x258],0x0
  212493:	00 
  212494:	75 11                	jne    2124a7 <scanAllCompileUnits+0x157>
  212496:	31 c0                	xor    eax,eax
  212498:	66 89 c1             	mov    cx,ax
  21249b:	66 89 c8             	mov    ax,cx
  21249e:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  2124a5:	5d                   	pop    rbp
  2124a6:	c3                   	ret    
  2124a7:	eb 00                	jmp    2124a9 <scanAllCompileUnits+0x159>
        const next_offset = unit_length + (if (is_64) usize(12) else usize(4));
  2124a9:	48 8b 85 a8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x258]
  2124b0:	f6 85 b7 fd ff ff 01 	test   BYTE PTR [rbp-0x249],0x1
  2124b7:	48 89 85 d8 fc ff ff 	mov    QWORD PTR [rbp-0x328],rax
  2124be:	75 02                	jne    2124c2 <scanAllCompileUnits+0x172>
  2124c0:	eb 10                	jmp    2124d2 <scanAllCompileUnits+0x182>
  2124c2:	b8 0c 00 00 00       	mov    eax,0xc
  2124c7:	89 c1                	mov    ecx,eax
  2124c9:	48 89 8d d0 fc ff ff 	mov    QWORD PTR [rbp-0x330],rcx
  2124d0:	eb 10                	jmp    2124e2 <scanAllCompileUnits+0x192>
  2124d2:	b8 04 00 00 00       	mov    eax,0x4
  2124d7:	89 c1                	mov    ecx,eax
  2124d9:	48 89 8d d0 fc ff ff 	mov    QWORD PTR [rbp-0x330],rcx
  2124e0:	eb 00                	jmp    2124e2 <scanAllCompileUnits+0x192>
  2124e2:	48 8b 85 d0 fc ff ff 	mov    rax,QWORD PTR [rbp-0x330]
  2124e9:	48 8b 8d d8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x328]
  2124f0:	48 01 c1             	add    rcx,rax
  2124f3:	0f 92 c2             	setb   dl
  2124f6:	48 89 8d c8 fc ff ff 	mov    QWORD PTR [rbp-0x338],rcx
  2124fd:	88 95 c7 fc ff ff    	mov    BYTE PTR [rbp-0x339],dl
  212503:	0f 82 e7 07 00 00    	jb     212cf0 <scanAllCompileUnits+0x9a0>
  212509:	e9 f2 07 00 00       	jmp    212d00 <scanAllCompileUnits+0x9b0>
        const version = try in_stream.readInt(st.elf.endian, u16);
  21250e:	66 8b 45 c0          	mov    ax,WORD PTR [rbp-0x40]
  212512:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  212519:	66 89 85 c4 fc ff ff 	mov    WORD PTR [rbp-0x33c],ax
  212520:	e8 6b 97 ff ff       	call   20bc90 <__zig_return_error>
  212525:	66 8b 85 c4 fc ff ff 	mov    ax,WORD PTR [rbp-0x33c]
  21252c:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  212533:	5d                   	pop    rbp
  212534:	c3                   	ret    
  212535:	66 8b 45 c2          	mov    ax,WORD PTR [rbp-0x3e]
  212539:	66 89 85 9e fd ff ff 	mov    WORD PTR [rbp-0x262],ax
        if (version < 2 or version > 5) return error.InvalidDebugInfo;
  212540:	66 83 bd 9e fd ff ff 	cmp    WORD PTR [rbp-0x262],0x2
  212547:	02 
  212548:	0f 92 c1             	setb   cl
  21254b:	f6 c1 01             	test   cl,0x1
  21254e:	88 8d c3 fc ff ff    	mov    BYTE PTR [rbp-0x33d],cl
  212554:	75 11                	jne    212567 <scanAllCompileUnits+0x217>
  212556:	66 83 bd 9e fd ff ff 	cmp    WORD PTR [rbp-0x262],0x5
  21255d:	05 
  21255e:	0f 97 c0             	seta   al
  212561:	88 85 c3 fc ff ff    	mov    BYTE PTR [rbp-0x33d],al
  212567:	8a 85 c3 fc ff ff    	mov    al,BYTE PTR [rbp-0x33d]
  21256d:	a8 01                	test   al,0x1
  21256f:	75 02                	jne    212573 <scanAllCompileUnits+0x223>
  212571:	eb 19                	jmp    21258c <scanAllCompileUnits+0x23c>
  212573:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  21257a:	e8 11 97 ff ff       	call   20bc90 <__zig_return_error>
  21257f:	66 b8 25 00          	mov    ax,0x25
  212583:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  21258a:	5d                   	pop    rbp
  21258b:	c3                   	ret    
  21258c:	eb 00                	jmp    21258e <scanAllCompileUnits+0x23e>
        const debug_abbrev_offset = if (is_64) try in_stream.readInt(st.elf.endian, u64) else try in_stream.readInt(st.elf.endian, u32);
  21258e:	f6 85 b7 fd ff ff 01 	test   BYTE PTR [rbp-0x249],0x1
  212595:	75 02                	jne    212599 <scanAllCompileUnits+0x249>
  212597:	eb 6c                	jmp    212605 <scanAllCompileUnits+0x2b5>
  212599:	48 8d 45 a8          	lea    rax,[rbp-0x58]
  21259d:	48 8b 95 b8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x248]
  2125a4:	48 8b 8d e8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x218]
  2125ab:	40 8a 71 12          	mov    sil,BYTE PTR [rcx+0x12]
  2125af:	40 0f b6 ce          	movzx  ecx,sil
  2125b3:	48 8d 7d a8          	lea    rdi,[rbp-0x58]
  2125b7:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  2125be:	48 89 85 b8 fc ff ff 	mov    QWORD PTR [rbp-0x348],rax
  2125c5:	e8 86 19 00 00       	call   213f50 <InStream(ReadError)_readInt.33>
  2125ca:	66 83 7d a8 00       	cmp    WORD PTR [rbp-0x58],0x0
  2125cf:	74 27                	je     2125f8 <scanAllCompileUnits+0x2a8>
  2125d1:	66 8b 45 a8          	mov    ax,WORD PTR [rbp-0x58]
  2125d5:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  2125dc:	66 89 85 b6 fc ff ff 	mov    WORD PTR [rbp-0x34a],ax
  2125e3:	e8 a8 96 ff ff       	call   20bc90 <__zig_return_error>
  2125e8:	66 8b 85 b6 fc ff ff 	mov    ax,WORD PTR [rbp-0x34a]
  2125ef:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  2125f6:	5d                   	pop    rbp
  2125f7:	c3                   	ret    
  2125f8:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  2125fc:	48 89 85 a8 fc ff ff 	mov    QWORD PTR [rbp-0x358],rax
  212603:	eb 6b                	jmp    212670 <scanAllCompileUnits+0x320>
  212605:	48 8d 45 90          	lea    rax,[rbp-0x70]
  212609:	48 8b 95 b8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x248]
  212610:	48 8b 8d e8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x218]
  212617:	40 8a 71 12          	mov    sil,BYTE PTR [rcx+0x12]
  21261b:	40 0f b6 ce          	movzx  ecx,sil
  21261f:	48 8d 7d 90          	lea    rdi,[rbp-0x70]
  212623:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  21262a:	48 89 85 a0 fc ff ff 	mov    QWORD PTR [rbp-0x360],rax
  212631:	e8 0a 18 00 00       	call   213e40 <InStream(ReadError)_readInt.32>
  212636:	66 83 7d 90 00       	cmp    WORD PTR [rbp-0x70],0x0
  21263b:	74 27                	je     212664 <scanAllCompileUnits+0x314>
  21263d:	66 8b 45 90          	mov    ax,WORD PTR [rbp-0x70]
  212641:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  212648:	66 89 85 9e fc ff ff 	mov    WORD PTR [rbp-0x362],ax
  21264f:	e8 3c 96 ff ff       	call   20bc90 <__zig_return_error>
  212654:	66 8b 85 9e fc ff ff 	mov    ax,WORD PTR [rbp-0x362]
  21265b:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  212662:	5d                   	pop    rbp
  212663:	c3                   	ret    
  212664:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
  212667:	89 c1                	mov    ecx,eax
  212669:	48 89 8d a8 fc ff ff 	mov    QWORD PTR [rbp-0x358],rcx
  212670:	48 8b 85 a8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x358]
  212677:	48 8d 7d 80          	lea    rdi,[rbp-0x80]
  21267b:	48 89 85 90 fd ff ff 	mov    QWORD PTR [rbp-0x270],rax
        const address_size = try in_stream.readByte();
  212682:	48 8b 95 b8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x248]
  212689:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  212690:	e8 ab 14 00 00       	call   213b40 <InStream(ReadError)_readByte>
  212695:	66 83 7d 80 00       	cmp    WORD PTR [rbp-0x80],0x0
  21269a:	74 27                	je     2126c3 <scanAllCompileUnits+0x373>
  21269c:	66 8b 45 80          	mov    ax,WORD PTR [rbp-0x80]
  2126a0:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  2126a7:	66 89 85 9c fc ff ff 	mov    WORD PTR [rbp-0x364],ax
  2126ae:	e8 dd 95 ff ff       	call   20bc90 <__zig_return_error>
  2126b3:	66 8b 85 9c fc ff ff 	mov    ax,WORD PTR [rbp-0x364]
  2126ba:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  2126c1:	5d                   	pop    rbp
  2126c2:	c3                   	ret    
  2126c3:	8a 45 82             	mov    al,BYTE PTR [rbp-0x7e]
  2126c6:	88 85 8f fd ff ff    	mov    BYTE PTR [rbp-0x271],al
        if (address_size != @sizeOf(usize)) return error.InvalidDebugInfo;
  2126cc:	80 bd 8f fd ff ff 08 	cmp    BYTE PTR [rbp-0x271],0x8
  2126d3:	74 19                	je     2126ee <scanAllCompileUnits+0x39e>
  2126d5:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  2126dc:	e8 af 95 ff ff       	call   20bc90 <__zig_return_error>
  2126e1:	66 b8 25 00          	mov    ax,0x25
  2126e5:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  2126ec:	5d                   	pop    rbp
  2126ed:	c3                   	ret    
  2126ee:	eb 00                	jmp    2126f0 <scanAllCompileUnits+0x3a0>
  2126f0:	48 8d bd 68 ff ff ff 	lea    rdi,[rbp-0x98]
        const compile_unit_pos = try st.self_exe_file.getPos();
  2126f7:	48 8b 95 e8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x218]
  2126fe:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  212705:	e8 e6 2f 00 00       	call   2156f0 <File_getPos>
  21270a:	66 83 bd 68 ff ff ff 	cmp    WORD PTR [rbp-0x98],0x0
  212711:	00 
  212712:	74 2a                	je     21273e <scanAllCompileUnits+0x3ee>
  212714:	66 8b 85 68 ff ff ff 	mov    ax,WORD PTR [rbp-0x98]
  21271b:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  212722:	66 89 85 9a fc ff ff 	mov    WORD PTR [rbp-0x366],ax
  212729:	e8 62 95 ff ff       	call   20bc90 <__zig_return_error>
  21272e:	66 8b 85 9a fc ff ff 	mov    ax,WORD PTR [rbp-0x366]
  212735:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  21273c:	5d                   	pop    rbp
  21273d:	c3                   	ret    
  21273e:	48 8d bd 48 ff ff ff 	lea    rdi,[rbp-0xb8]
  212745:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21274c:	48 89 85 80 fd ff ff 	mov    QWORD PTR [rbp-0x280],rax
        const abbrev_table = try getAbbrevTable(st, debug_abbrev_offset);
  212753:	48 8b 95 e8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x218]
  21275a:	48 8b 8d 90 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x270]
  212761:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  212768:	e8 03 31 00 00       	call   215870 <getAbbrevTable>
  21276d:	66 83 bd 48 ff ff ff 	cmp    WORD PTR [rbp-0xb8],0x0
  212774:	00 
  212775:	74 2a                	je     2127a1 <scanAllCompileUnits+0x451>
  212777:	66 8b 85 48 ff ff ff 	mov    ax,WORD PTR [rbp-0xb8]
  21277e:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  212785:	66 89 85 98 fc ff ff 	mov    WORD PTR [rbp-0x368],ax
  21278c:	e8 ff 94 ff ff       	call   20bc90 <__zig_return_error>
  212791:	66 8b 85 98 fc ff ff 	mov    ax,WORD PTR [rbp-0x368]
  212798:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  21279f:	5d                   	pop    rbp
  2127a0:	c3                   	ret    
  2127a1:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  2127a8:	48 89 85 78 fd ff ff 	mov    QWORD PTR [rbp-0x288],rax
        try st.self_exe_file.seekTo(compile_unit_pos);
  2127af:	48 8b b5 e8 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x218]
  2127b6:	48 8b 95 80 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x280]
  2127bd:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  2127c4:	e8 a7 1a 00 00       	call   214270 <File_seekTo>
  2127c9:	66 89 85 36 ff ff ff 	mov    WORD PTR [rbp-0xca],ax
  2127d0:	66 83 bd 36 ff ff ff 	cmp    WORD PTR [rbp-0xca],0x0
  2127d7:	00 
  2127d8:	74 2a                	je     212804 <scanAllCompileUnits+0x4b4>
  2127da:	66 8b 85 36 ff ff ff 	mov    ax,WORD PTR [rbp-0xca]
  2127e1:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  2127e8:	66 89 85 96 fc ff ff 	mov    WORD PTR [rbp-0x36a],ax
  2127ef:	e8 9c 94 ff ff       	call   20bc90 <__zig_return_error>
  2127f4:	66 8b 85 96 fc ff ff 	mov    ax,WORD PTR [rbp-0x36a]
  2127fb:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  212802:	5d                   	pop    rbp
  212803:	c3                   	ret    
        const compile_unit_die = try st.allocator().create(try parseDie(st, abbrev_table, is_64));
  212804:	48 8b bd e8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x218]
  21280b:	e8 50 34 00 00       	call   215c60 <ElfStackTrace_allocator>
  212810:	48 8d bd f0 fe ff ff 	lea    rdi,[rbp-0x110]
  212817:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  21281e:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
  212825:	48 8b 85 e8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x218]
  21282c:	48 8b 8d 78 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x288]
  212833:	40 8a b5 b7 fd ff ff 	mov    sil,BYTE PTR [rbp-0x249]
  21283a:	44 0f b6 c6          	movzx  r8d,sil
  21283e:	4c 8d 8d f0 fe ff ff 	lea    r9,[rbp-0x110]
  212845:	48 89 bd 88 fc ff ff 	mov    QWORD PTR [rbp-0x378],rdi
  21284c:	4c 89 cf             	mov    rdi,r9
  21284f:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  212856:	48 89 95 80 fc ff ff 	mov    QWORD PTR [rbp-0x380],rdx
  21285d:	48 89 c2             	mov    rdx,rax
  212860:	e8 1b 34 00 00       	call   215c80 <parseDie>
  212865:	66 83 bd f0 fe ff ff 	cmp    WORD PTR [rbp-0x110],0x0
  21286c:	00 
  21286d:	74 2a                	je     212899 <scanAllCompileUnits+0x549>
  21286f:	66 8b 85 f0 fe ff ff 	mov    ax,WORD PTR [rbp-0x110]
  212876:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  21287d:	66 89 85 7e fc ff ff 	mov    WORD PTR [rbp-0x382],ax
  212884:	e8 07 94 ff ff       	call   20bc90 <__zig_return_error>
  212889:	66 8b 85 7e fc ff ff 	mov    ax,WORD PTR [rbp-0x382]
  212890:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  212897:	5d                   	pop    rbp
  212898:	c3                   	ret    
  212899:	48 8d bd a8 fe ff ff 	lea    rdi,[rbp-0x158]
  2128a0:	48 8d 85 f0 fe ff ff 	lea    rax,[rbp-0x110]
  2128a7:	48 83 c0 08          	add    rax,0x8
  2128ab:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  2128b2:	48 8b 95 80 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x380]
  2128b9:	48 89 c1             	mov    rcx,rax
  2128bc:	e8 7f 39 00 00       	call   216240 <Allocator_create.37>
  2128c1:	66 83 bd a8 fe ff ff 	cmp    WORD PTR [rbp-0x158],0x0
  2128c8:	00 
  2128c9:	74 2a                	je     2128f5 <scanAllCompileUnits+0x5a5>
  2128cb:	66 8b 85 a8 fe ff ff 	mov    ax,WORD PTR [rbp-0x158]
  2128d2:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  2128d9:	66 89 85 7c fc ff ff 	mov    WORD PTR [rbp-0x384],ax
  2128e0:	e8 ab 93 ff ff       	call   20bc90 <__zig_return_error>
  2128e5:	66 8b 85 7c fc ff ff 	mov    ax,WORD PTR [rbp-0x384]
  2128ec:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  2128f3:	5d                   	pop    rbp
  2128f4:	c3                   	ret    
  2128f5:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  2128fc:	48 89 85 70 fd ff ff 	mov    QWORD PTR [rbp-0x290],rax
        if (compile_unit_die.tag_id != DW.TAG_compile_unit) return error.InvalidDebugInfo;
  212903:	48 8b 85 70 fd ff ff 	mov    rax,QWORD PTR [rbp-0x290]
  21290a:	48 83 38 11          	cmp    QWORD PTR [rax],0x11
  21290e:	74 19                	je     212929 <scanAllCompileUnits+0x5d9>
  212910:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  212917:	e8 74 93 ff ff       	call   20bc90 <__zig_return_error>
  21291c:	66 b8 25 00          	mov    ax,0x25
  212920:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  212927:	5d                   	pop    rbp
  212928:	c3                   	ret    
  212929:	eb 00                	jmp    21292b <scanAllCompileUnits+0x5db>
  21292b:	48 8d bd 88 fe ff ff 	lea    rdi,[rbp-0x178]
  212932:	b8 11 00 00 00       	mov    eax,0x11
  212937:	89 c1                	mov    ecx,eax
            if (compile_unit_die.getAttrAddr(DW.AT_low_pc)) |low_pc| {
  212939:	48 8b 95 70 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x290]
  212940:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  212947:	e8 04 3a 00 00       	call   216350 <Die_getAttrAddr>
  21294c:	66 83 bd 88 fe ff ff 	cmp    WORD PTR [rbp-0x178],0x0
  212953:	00 
  212954:	0f 85 a1 01 00 00    	jne    212afb <scanAllCompileUnits+0x7ab>
  21295a:	b8 12 00 00 00       	mov    eax,0x12
  21295f:	89 c6                	mov    esi,eax
  212961:	48 8b 8d 90 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x170]
  212968:	48 89 8d 68 fd ff ff 	mov    QWORD PTR [rbp-0x298],rcx
                if (compile_unit_die.getAttr(DW.AT_high_pc)) |high_pc_value| {
  21296f:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  212976:	e8 f5 3a 00 00       	call   216470 <Die_getAttr>
  21297b:	48 89 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rax
  212982:	48 83 bd 70 fe ff ff 	cmp    QWORD PTR [rbp-0x190],0x0
  212989:	00 
  21298a:	0f 84 5b 01 00 00    	je     212aeb <scanAllCompileUnits+0x79b>
  212990:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  212997:	48 89 85 60 fd ff ff 	mov    QWORD PTR [rbp-0x2a0],rax
                    const pc_end = switch (high_pc_value.*) {
  21299e:	48 8b 85 60 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2a0]
  2129a5:	8a 48 18             	mov    cl,BYTE PTR [rax+0x18]
  2129a8:	84 c9                	test   cl,cl
  2129aa:	48 89 85 70 fc ff ff 	mov    QWORD PTR [rbp-0x390],rax
  2129b1:	88 8d 6f fc ff ff    	mov    BYTE PTR [rbp-0x391],cl
  2129b7:	74 2f                	je     2129e8 <scanAllCompileUnits+0x698>
  2129b9:	eb 00                	jmp    2129bb <scanAllCompileUnits+0x66b>
  2129bb:	8a 85 6f fc ff ff    	mov    al,BYTE PTR [rbp-0x391]
  2129c1:	24 0f                	and    al,0xf
  2129c3:	2c 02                	sub    al,0x2
  2129c5:	88 85 6e fc ff ff    	mov    BYTE PTR [rbp-0x392],al
  2129cb:	74 32                	je     2129ff <scanAllCompileUnits+0x6af>
  2129cd:	eb 00                	jmp    2129cf <scanAllCompileUnits+0x67f>
                        else => return error.InvalidDebugInfo,
  2129cf:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  2129d6:	e8 b5 92 ff ff       	call   20bc90 <__zig_return_error>
  2129db:	66 b8 25 00          	mov    ax,0x25
  2129df:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  2129e6:	5d                   	pop    rbp
  2129e7:	c3                   	ret    
                        FormValue.Address => |value| value,
  2129e8:	48 8b 85 70 fc ff ff 	mov    rax,QWORD PTR [rbp-0x390]
  2129ef:	8a 48 18             	mov    cl,BYTE PTR [rax+0x18]
  2129f2:	84 c9                	test   cl,cl
  2129f4:	0f 84 55 03 00 00    	je     212d4f <scanAllCompileUnits+0x9ff>
  2129fa:	e9 74 03 00 00       	jmp    212d73 <scanAllCompileUnits+0xa23>
                        FormValue.Const => |value| b: {
  2129ff:	48 8b 85 70 fc ff ff 	mov    rax,QWORD PTR [rbp-0x390]
  212a06:	8a 48 18             	mov    cl,BYTE PTR [rax+0x18]
  212a09:	80 e9 02             	sub    cl,0x2
  212a0c:	88 8d 6d fc ff ff    	mov    BYTE PTR [rbp-0x393],cl
  212a12:	0f 84 6b 03 00 00    	je     212d83 <scanAllCompileUnits+0xa33>
  212a18:	e9 ba 03 00 00       	jmp    212dd7 <scanAllCompileUnits+0xa87>
                            const offset = try value.asUnsignedLe();
  212a1d:	66 8b 85 60 fe ff ff 	mov    ax,WORD PTR [rbp-0x1a0]
  212a24:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  212a2b:	66 89 85 6a fc ff ff 	mov    WORD PTR [rbp-0x396],ax
  212a32:	e8 59 92 ff ff       	call   20bc90 <__zig_return_error>
  212a37:	66 8b 85 6a fc ff ff 	mov    ax,WORD PTR [rbp-0x396]
  212a3e:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  212a45:	5d                   	pop    rbp
  212a46:	c3                   	ret    
  212a47:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
  212a4e:	48 89 85 38 fd ff ff 	mov    QWORD PTR [rbp-0x2c8],rax
                            break :b (low_pc + offset);
  212a55:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  212a5c:	48 03 85 38 fd ff ff 	add    rax,QWORD PTR [rbp-0x2c8]
  212a63:	0f 92 c1             	setb   cl
  212a66:	48 89 85 60 fc ff ff 	mov    QWORD PTR [rbp-0x3a0],rax
  212a6d:	88 8d 5f fc ff ff    	mov    BYTE PTR [rbp-0x3a1],cl
  212a73:	0f 82 6e 03 00 00    	jb     212de7 <scanAllCompileUnits+0xa97>
  212a79:	e9 79 03 00 00       	jmp    212df7 <scanAllCompileUnits+0xaa7>
                    const pc_end = switch (high_pc_value.*) {
  212a7e:	48 8b 85 60 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3a0]
  212a85:	48 89 85 50 fc ff ff 	mov    QWORD PTR [rbp-0x3b0],rax
  212a8c:	eb 00                	jmp    212a8e <scanAllCompileUnits+0x73e>
  212a8e:	48 8b 85 50 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3b0]
  212a95:	48 8d 8d 28 fe ff ff 	lea    rcx,[rbp-0x1d8]
  212a9c:	48 89 85 30 fd ff ff 	mov    QWORD PTR [rbp-0x2d0],rax
                        .start = low_pc,
  212aa3:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
                        .end = pc_end,
  212aaa:	48 8b 95 30 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2d0]
                    break :x PcRange{
  212ab1:	48 89 85 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rax
  212ab8:	48 89 95 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rdx
  212abf:	48 8b 85 40 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c0]
  212ac6:	48 89 85 28 fe ff ff 	mov    QWORD PTR [rbp-0x1d8],rax
  212acd:	48 8b 85 48 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b8]
  212ad4:	48 89 85 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rax
  212adb:	c6 85 38 fe ff ff 01 	mov    BYTE PTR [rbp-0x1c8],0x1
  212ae2:	48 89 8d 48 fc ff ff 	mov    QWORD PTR [rbp-0x3b8],rcx
  212ae9:	eb 64                	jmp    212b4f <scanAllCompileUnits+0x7ff>
  212aeb:	48 8d 05 76 63 ff ff 	lea    rax,[rip+0xffffffffffff6376]        # 208e68 <__unnamed_55>
                    break :x null;
  212af2:	48 89 85 48 fc ff ff 	mov    QWORD PTR [rbp-0x3b8],rax
  212af9:	eb 54                	jmp    212b4f <scanAllCompileUnits+0x7ff>
            if (compile_unit_die.getAttrAddr(DW.AT_low_pc)) |low_pc| {
  212afb:	66 8b 85 88 fe ff ff 	mov    ax,WORD PTR [rbp-0x178]
  212b02:	66 89 85 2e fd ff ff 	mov    WORD PTR [rbp-0x2d2],ax
                if (err != error.MissingDebugInfo) return err;
  212b09:	66 83 bd 2e fd ff ff 	cmp    WORD PTR [rbp-0x2d2],0x24
  212b10:	24 
  212b11:	74 2a                	je     212b3d <scanAllCompileUnits+0x7ed>
  212b13:	66 8b 85 2e fd ff ff 	mov    ax,WORD PTR [rbp-0x2d2]
  212b1a:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  212b21:	66 89 85 46 fc ff ff 	mov    WORD PTR [rbp-0x3ba],ax
  212b28:	e8 63 91 ff ff       	call   20bc90 <__zig_return_error>
  212b2d:	66 8b 85 46 fc ff ff 	mov    ax,WORD PTR [rbp-0x3ba]
  212b34:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  212b3b:	5d                   	pop    rbp
  212b3c:	c3                   	ret    
  212b3d:	eb 00                	jmp    212b3f <scanAllCompileUnits+0x7ef>
  212b3f:	48 8d 05 3a 63 ff ff 	lea    rax,[rip+0xffffffffffff633a]        # 208e80 <__unnamed_56>
                break :x null;
  212b46:	48 89 85 48 fc ff ff 	mov    QWORD PTR [rbp-0x3b8],rax
  212b4d:	eb 00                	jmp    212b4f <scanAllCompileUnits+0x7ff>
        const pc_range = x: {
  212b4f:	48 8b 85 48 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3b8]
  212b56:	48 8d 95 f8 fd ff ff 	lea    rdx,[rbp-0x208]
  212b5d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  212b60:	48 89 8d 10 fd ff ff 	mov    QWORD PTR [rbp-0x2f0],rcx
  212b67:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  212b6b:	48 89 8d 18 fd ff ff 	mov    QWORD PTR [rbp-0x2e8],rcx
  212b72:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  212b76:	48 89 85 20 fd ff ff 	mov    QWORD PTR [rbp-0x2e0],rax
        try st.compile_unit_list.append(CompileUnit{
  212b7d:	48 8b 85 e8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x218]
  212b84:	48 05 a8 00 00 00    	add    rax,0xa8
            .version = version,
  212b8a:	66 8b b5 9e fd ff ff 	mov    si,WORD PTR [rbp-0x262]
            .is_64 = is_64,
  212b91:	40 8a bd b7 fd ff ff 	mov    dil,BYTE PTR [rbp-0x249]
            .die = compile_unit_die,
  212b98:	48 8b 8d 70 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x290]
            .index = cu_index,
  212b9f:	4c 8b 85 d0 fd ff ff 	mov    r8,QWORD PTR [rbp-0x230]
        try st.compile_unit_list.append(CompileUnit{
  212ba6:	66 89 b5 f8 fd ff ff 	mov    WORD PTR [rbp-0x208],si
  212bad:	40 80 e7 01          	and    dil,0x1
  212bb1:	40 88 bd fa fd ff ff 	mov    BYTE PTR [rbp-0x206],dil
  212bb8:	48 89 8d 00 fe ff ff 	mov    QWORD PTR [rbp-0x200],rcx
  212bbf:	4c 89 85 08 fe ff ff 	mov    QWORD PTR [rbp-0x1f8],r8
  212bc6:	48 8b 8d 10 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2f0]
  212bcd:	48 89 8d 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rcx
  212bd4:	48 8b 8d 18 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2e8]
  212bdb:	48 89 8d 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],rcx
  212be2:	48 8b 8d 20 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2e0]
  212be9:	48 89 8d 20 fe ff ff 	mov    QWORD PTR [rbp-0x1e0],rcx
  212bf0:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  212bf7:	48 89 c6             	mov    rsi,rax
  212bfa:	e8 e1 39 00 00       	call   2165e0 <AlignedArrayList(CompileUnit,2)_append>
  212bff:	66 89 85 f6 fd ff ff 	mov    WORD PTR [rbp-0x20a],ax
  212c06:	66 83 bd f6 fd ff ff 	cmp    WORD PTR [rbp-0x20a],0x0
  212c0d:	00 
  212c0e:	74 2a                	je     212c3a <scanAllCompileUnits+0x8ea>
  212c10:	66 8b 85 f6 fd ff ff 	mov    ax,WORD PTR [rbp-0x20a]
  212c17:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  212c1e:	66 89 85 44 fc ff ff 	mov    WORD PTR [rbp-0x3bc],ax
  212c25:	e8 66 90 ff ff       	call   20bc90 <__zig_return_error>
  212c2a:	66 8b 85 44 fc ff ff 	mov    ax,WORD PTR [rbp-0x3bc]
  212c31:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  212c38:	5d                   	pop    rbp
  212c39:	c3                   	ret    
        this_unit_offset += next_offset;
  212c3a:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
  212c41:	48 03 85 a0 fd ff ff 	add    rax,QWORD PTR [rbp-0x260]
  212c48:	0f 92 c1             	setb   cl
  212c4b:	48 89 85 38 fc ff ff 	mov    QWORD PTR [rbp-0x3c8],rax
  212c52:	88 8d 37 fc ff ff    	mov    BYTE PTR [rbp-0x3c9],cl
  212c58:	0f 82 9e 01 00 00    	jb     212dfc <scanAllCompileUnits+0xaac>
  212c5e:	e9 a9 01 00 00       	jmp    212e0c <scanAllCompileUnits+0xabc>
  212c63:	31 c0                	xor    eax,eax
  212c65:	66 89 c1             	mov    cx,ax
fn scanAllCompileUnits(st: *ElfStackTrace) !void {
  212c68:	66 89 c8             	mov    ax,cx
  212c6b:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  212c72:	5d                   	pop    rbp
  212c73:	c3                   	ret    
  212c74:	48 8d 3d 4d 05 03 00 	lea    rdi,[rip+0x3054d]        # 2431c8 <__unnamed_4>
  212c7b:	31 c0                	xor    eax,eax
  212c7d:	89 c6                	mov    esi,eax
    const debug_info_end = st.debug_info.offset + st.debug_info.size;
  212c7f:	e8 7c 89 ff ff       	call   20b600 <panic>
  212c84:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  212c88:	48 8b 85 00 fd ff ff 	mov    rax,QWORD PTR [rbp-0x300]
  212c8f:	48 89 85 e0 fd ff ff 	mov    QWORD PTR [rbp-0x220],rax
    var this_unit_offset = st.debug_info.offset;
  212c96:	48 8b 8d e8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x218]
  212c9d:	48 8b 49 60          	mov    rcx,QWORD PTR [rcx+0x60]
  212ca1:	48 8b 49 18          	mov    rcx,QWORD PTR [rcx+0x18]
  212ca5:	48 89 8d d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rcx
    var cu_index: usize = 0;
  212cac:	48 c7 85 d0 fd ff ff 	mov    QWORD PTR [rbp-0x230],0x0
  212cb3:	00 00 00 00 
    var in_file_stream = io.FileInStream.init(&st.self_exe_file);
  212cb7:	48 8b b5 e8 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x218]
  212cbe:	e8 cd 0c 00 00       	call   213990 <FileInStream_init>
  212cc3:	48 8d 85 c0 fd ff ff 	lea    rax,[rbp-0x240]
  212cca:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  212cce:	48 89 8d c0 fd ff ff 	mov    QWORD PTR [rbp-0x240],rcx
  212cd5:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  212cd9:	48 89 8d c8 fd ff ff 	mov    QWORD PTR [rbp-0x238],rcx
    const in_stream = &in_file_stream.stream;
  212ce0:	48 83 c0 08          	add    rax,0x8
  212ce4:	48 89 85 b8 fd ff ff 	mov    QWORD PTR [rbp-0x248],rax
    while (this_unit_offset < debug_info_end) {
  212ceb:	e9 b2 f6 ff ff       	jmp    2123a2 <scanAllCompileUnits+0x52>
  212cf0:	48 8d 3d d1 04 03 00 	lea    rdi,[rip+0x304d1]        # 2431c8 <__unnamed_4>
  212cf7:	31 c0                	xor    eax,eax
  212cf9:	89 c6                	mov    esi,eax
        const next_offset = unit_length + (if (is_64) usize(12) else usize(4));
  212cfb:	e8 00 89 ff ff       	call   20b600 <panic>
  212d00:	48 8d 45 c0          	lea    rax,[rbp-0x40]
  212d04:	48 8b 8d c8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x338]
  212d0b:	48 89 8d a0 fd ff ff 	mov    QWORD PTR [rbp-0x260],rcx
        const version = try in_stream.readInt(st.elf.endian, u16);
  212d12:	48 8b 95 b8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x248]
  212d19:	48 8b b5 e8 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x218]
  212d20:	40 8a 7e 12          	mov    dil,BYTE PTR [rsi+0x12]
  212d24:	40 0f b6 cf          	movzx  ecx,dil
  212d28:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  212d2c:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  212d33:	48 89 85 28 fc ff ff 	mov    QWORD PTR [rbp-0x3d8],rax
  212d3a:	e8 f1 0f 00 00       	call   213d30 <InStream(ReadError)_readInt>
  212d3f:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  212d44:	0f 85 c4 f7 ff ff    	jne    21250e <scanAllCompileUnits+0x1be>
  212d4a:	e9 e6 f7 ff ff       	jmp    212535 <scanAllCompileUnits+0x1e5>
                        FormValue.Address => |value| value,
  212d4f:	48 8b 85 70 fc ff ff 	mov    rax,QWORD PTR [rbp-0x390]
  212d56:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  212d59:	48 89 8d 58 fd ff ff 	mov    QWORD PTR [rbp-0x2a8],rcx
  212d60:	48 8b 8d 58 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2a8]
                    const pc_end = switch (high_pc_value.*) {
  212d67:	48 89 8d 50 fc ff ff 	mov    QWORD PTR [rbp-0x3b0],rcx
  212d6e:	e9 1b fd ff ff       	jmp    212a8e <scanAllCompileUnits+0x73e>
  212d73:	48 8d 3d 86 08 03 00 	lea    rdi,[rip+0x30886]        # 243600 <__unnamed_29>
  212d7a:	31 c0                	xor    eax,eax
  212d7c:	89 c6                	mov    esi,eax
                        FormValue.Address => |value| value,
  212d7e:	e8 7d 88 ff ff       	call   20b600 <panic>
  212d83:	48 8d bd 60 fe ff ff 	lea    rdi,[rbp-0x1a0]
  212d8a:	48 8d 95 40 fd ff ff 	lea    rdx,[rbp-0x2c0]
                        FormValue.Const => |value| b: {
  212d91:	48 8b 85 70 fc ff ff 	mov    rax,QWORD PTR [rbp-0x390]
  212d98:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  212d9b:	48 89 8d 40 fd ff ff 	mov    QWORD PTR [rbp-0x2c0],rcx
  212da2:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  212da6:	48 89 8d 48 fd ff ff 	mov    QWORD PTR [rbp-0x2b8],rcx
  212dad:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
  212db1:	48 89 8d 50 fd ff ff 	mov    QWORD PTR [rbp-0x2b0],rcx
                            const offset = try value.asUnsignedLe();
  212db8:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  212dbf:	e8 4c 37 00 00       	call   216510 <Constant_asUnsignedLe>
  212dc4:	66 83 bd 60 fe ff ff 	cmp    WORD PTR [rbp-0x1a0],0x0
  212dcb:	00 
  212dcc:	0f 85 4b fc ff ff    	jne    212a1d <scanAllCompileUnits+0x6cd>
  212dd2:	e9 70 fc ff ff       	jmp    212a47 <scanAllCompileUnits+0x6f7>
  212dd7:	48 8d 3d 22 08 03 00 	lea    rdi,[rip+0x30822]        # 243600 <__unnamed_29>
  212dde:	31 c0                	xor    eax,eax
  212de0:	89 c6                	mov    esi,eax
                        FormValue.Const => |value| b: {
  212de2:	e8 19 88 ff ff       	call   20b600 <panic>
  212de7:	48 8d 3d da 03 03 00 	lea    rdi,[rip+0x303da]        # 2431c8 <__unnamed_4>
  212dee:	31 c0                	xor    eax,eax
  212df0:	89 c6                	mov    esi,eax
                            break :b (low_pc + offset);
  212df2:	e8 09 88 ff ff       	call   20b600 <panic>
  212df7:	e9 82 fc ff ff       	jmp    212a7e <scanAllCompileUnits+0x72e>
  212dfc:	48 8d 3d c5 03 03 00 	lea    rdi,[rip+0x303c5]        # 2431c8 <__unnamed_4>
  212e03:	31 c0                	xor    eax,eax
  212e05:	89 c6                	mov    esi,eax
        this_unit_offset += next_offset;
  212e07:	e8 f4 87 ff ff       	call   20b600 <panic>
  212e0c:	48 8b 85 38 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3c8]
  212e13:	48 89 85 d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rax
        cu_index += 1;
  212e1a:	48 8b 8d d0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x230]
  212e21:	48 83 c1 01          	add    rcx,0x1
  212e25:	0f 92 c2             	setb   dl
  212e28:	48 89 8d 20 fc ff ff 	mov    QWORD PTR [rbp-0x3e0],rcx
  212e2f:	88 95 1f fc ff ff    	mov    BYTE PTR [rbp-0x3e1],dl
  212e35:	72 02                	jb     212e39 <scanAllCompileUnits+0xae9>
  212e37:	eb 10                	jmp    212e49 <scanAllCompileUnits+0xaf9>
  212e39:	48 8d 3d 88 03 03 00 	lea    rdi,[rip+0x30388]        # 2431c8 <__unnamed_4>
  212e40:	31 c0                	xor    eax,eax
  212e42:	89 c6                	mov    esi,eax
  212e44:	e8 b7 87 ff ff       	call   20b600 <panic>
  212e49:	48 8b 85 20 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e0]
  212e50:	48 89 85 d0 fd ff ff 	mov    QWORD PTR [rbp-0x230],rax
    while (this_unit_offset < debug_info_end) {
  212e57:	e9 46 f5 ff ff       	jmp    2123a2 <scanAllCompileUnits+0x52>
  212e5c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000212e60 <DirectAllocator_init>:
    allocator: Allocator,
    heap_handle: ?HeapHandle,

    const HeapHandle = if (builtin.os == Os.windows) os.windows.HANDLE else void;

    pub fn init() DirectAllocator {
  212e60:	55                   	push   rbp
  212e61:	48 89 e5             	mov    rbp,rsp
  212e64:	48 89 f8             	mov    rax,rdi
        return DirectAllocator{
  212e67:	48 8b 0d 42 0a 03 00 	mov    rcx,QWORD PTR [rip+0x30a42]        # 2438b0 <__unnamed_57>
  212e6e:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  212e71:	48 8b 0d 40 0a 03 00 	mov    rcx,QWORD PTR [rip+0x30a40]        # 2438b8 <__unnamed_57+0x8>
  212e78:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  212e7c:	48 8b 0d 3d 0a 03 00 	mov    rcx,QWORD PTR [rip+0x30a3d]        # 2438c0 <__unnamed_57+0x10>
  212e83:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  212e87:	48 8b 0d 3a 0a 03 00 	mov    rcx,QWORD PTR [rip+0x30a3a]        # 2438c8 <__unnamed_57+0x18>
  212e8e:	48 89 4f 18          	mov    QWORD PTR [rdi+0x18],rcx
  212e92:	5d                   	pop    rbp
  212e93:	c3                   	ret    
  212e94:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  212e9b:	00 00 00 00 00 

0000000000212ea0 <ArenaAllocator_init>:
    buffer_list: std.LinkedList([]u8),
    end_index: usize,

    const BufNode = std.LinkedList([]u8).Node;

    pub fn init(child_allocator: *Allocator) ArenaAllocator {
  212ea0:	55                   	push   rbp
  212ea1:	48 89 e5             	mov    rbp,rsp
  212ea4:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  212eab:	48 89 f8             	mov    rax,rdi
  212eae:	48 8d 4d e8          	lea    rcx,[rbp-0x18]
  212eb2:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
            .allocator = Allocator{
                .allocFn = alloc,
                .reallocFn = realloc,
                .freeFn = free,
            },
            .child_allocator = child_allocator,
  212eb6:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
            .buffer_list = std.LinkedList([]u8).init(),
  212eba:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
  212ebe:	48 89 cf             	mov    rdi,rcx
  212ec1:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  212ec5:	48 89 75 88          	mov    QWORD PTR [rbp-0x78],rsi
  212ec9:	e8 22 3b 01 00       	call   2269f0 <BaseLinkedList([]u8,void,(struct []const u8 constant))_init>
  212ece:	ba 40 00 00 00       	mov    edx,0x40
  212ed3:	48 8d 45 a8          	lea    rax,[rbp-0x58]
        return ArenaAllocator{
  212ed7:	48 8b 0d f2 09 03 00 	mov    rcx,QWORD PTR [rip+0x309f2]        # 2438d0 <__unnamed_58>
  212ede:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  212ee2:	48 8b 0d ef 09 03 00 	mov    rcx,QWORD PTR [rip+0x309ef]        # 2438d8 <__unnamed_58+0x8>
  212ee9:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
  212eed:	48 8b 0d ec 09 03 00 	mov    rcx,QWORD PTR [rip+0x309ec]        # 2438e0 <__unnamed_58+0x10>
  212ef4:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
  212ef8:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  212efc:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
  212f00:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  212f04:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  212f08:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  212f0c:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  212f10:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  212f14:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  212f18:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  212f1f:	00 
  212f20:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  212f24:	48 89 cf             	mov    rdi,rcx
  212f27:	48 89 c6             	mov    rsi,rax
  212f2a:	e8 d1 19 02 00       	call   234900 <memcpy>
  212f2f:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  212f33:	48 81 c4 80 00 00 00 	add    rsp,0x80
  212f3a:	5d                   	pop    rbp
  212f3b:	c3                   	ret    
  212f3c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000212f40 <Allocator_alloc>:
    }

    pub fn alloc(self: *Allocator, comptime T: type, n: usize) ![]T {
  212f40:	55                   	push   rbp
  212f41:	48 89 e5             	mov    rbp,rsp
  212f44:	48 83 ec 40          	sub    rsp,0x40
  212f48:	48 89 f8             	mov    rax,rdi
  212f4b:	4c 8d 45 e8          	lea    r8,[rbp-0x18]
  212f4f:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  212f53:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
        return self.alignedAlloc(T, @alignOf(T), n);
  212f57:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  212f5b:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  212f5f:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
  212f63:	4c 89 c7             	mov    rdi,r8
  212f66:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  212f6a:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  212f6e:	e8 ad 42 01 00       	call   227220 <Allocator_alignedAlloc.97>
  212f73:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  212f78:	74 0b                	je     212f85 <Allocator_alloc+0x45>
  212f7a:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  212f7e:	e8 0d 8d ff ff       	call   20bc90 <__zig_return_error>
  212f83:	eb 02                	jmp    212f87 <Allocator_alloc+0x47>
  212f85:	eb 00                	jmp    212f87 <Allocator_alloc+0x47>
  212f87:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  212f8b:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  212f8f:	48 89 01             	mov    QWORD PTR [rcx],rax
  212f92:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  212f96:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  212f9a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  212f9e:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  212fa2:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  212fa6:	48 83 c4 40          	add    rsp,0x40
  212faa:	5d                   	pop    rbp
  212fab:	c3                   	ret    
  212fac:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000212fb0 <FixedBufferAllocator_init>:
pub const FixedBufferAllocator = struct {
    allocator: Allocator,
    end_index: usize,
    buffer: []u8,

    pub fn init(buffer: []u8) FixedBufferAllocator {
  212fb0:	55                   	push   rbp
  212fb1:	48 89 e5             	mov    rbp,rsp
  212fb4:	48 83 ec 40          	sub    rsp,0x40
  212fb8:	48 89 f8             	mov    rax,rdi
  212fbb:	b9 30 00 00 00       	mov    ecx,0x30
  212fc0:	89 ca                	mov    edx,ecx
  212fc2:	4c 8d 45 d0          	lea    r8,[rbp-0x30]
        return FixedBufferAllocator{
  212fc6:	4c 8b 0d c3 05 03 00 	mov    r9,QWORD PTR [rip+0x305c3]        # 243590 <__unnamed_59>
  212fcd:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
  212fd1:	4c 8b 0d c0 05 03 00 	mov    r9,QWORD PTR [rip+0x305c0]        # 243598 <__unnamed_59+0x8>
  212fd8:	4c 89 4d d8          	mov    QWORD PTR [rbp-0x28],r9
  212fdc:	4c 8b 0d bd 05 03 00 	mov    r9,QWORD PTR [rip+0x305bd]        # 2435a0 <__unnamed_59+0x10>
  212fe3:	4c 89 4d e0          	mov    QWORD PTR [rbp-0x20],r9
  212fe7:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
  212fee:	00 
  212fef:	4c 8b 0e             	mov    r9,QWORD PTR [rsi]
  212ff2:	4c 89 4d f0          	mov    QWORD PTR [rbp-0x10],r9
  212ff6:	48 8b 76 08          	mov    rsi,QWORD PTR [rsi+0x8]
  212ffa:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  212ffe:	4c 89 c6             	mov    rsi,r8
  213001:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  213005:	e8 f6 18 02 00       	call   234900 <memcpy>
  21300a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21300e:	48 83 c4 40          	add    rsp,0x40
  213012:	5d                   	pop    rbp
  213013:	c3                   	ret    
  213014:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21301b:	00 00 00 00 00 

0000000000213020 <File_openRead>:
    pub fn openRead(allocator: *mem.Allocator, path: []const u8) OpenError!File {
  213020:	55                   	push   rbp
  213021:	48 89 e5             	mov    rbp,rsp
  213024:	48 83 ec 60          	sub    rsp,0x60
  213028:	48 89 f8             	mov    rax,rdi
  21302b:	4c 8d 45 f8          	lea    r8,[rbp-0x8]
  21302f:	45 31 c9             	xor    r9d,r9d
  213032:	45 31 d2             	xor    r10d,r10d
  213035:	45 89 d3             	mov    r11d,r10d
  213038:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            const fd = try os.posixOpen(allocator, path, flags, 0);
  21303c:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  213040:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
  213044:	4c 89 c7             	mov    rdi,r8
  213047:	48 89 75 b8          	mov    QWORD PTR [rbp-0x48],rsi
  21304b:	45 89 c8             	mov    r8d,r9d
  21304e:	4d 89 d9             	mov    r9,r11
  213051:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  213055:	e8 56 08 00 00       	call   2138b0 <posixOpen>
  21305a:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  21305f:	74 2e                	je     21308f <File_openRead+0x6f>
  213061:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  213065:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  213069:	66 89 45 ae          	mov    WORD PTR [rbp-0x52],ax
  21306d:	e8 1e 8c ff ff       	call   20bc90 <__zig_return_error>
  213072:	66 8b 45 ae          	mov    ax,WORD PTR [rbp-0x52]
  213076:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  21307a:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  21307e:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  213082:	48 89 39             	mov    QWORD PTR [rcx],rdi
  213085:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  213089:	48 83 c4 60          	add    rsp,0x60
  21308d:	5d                   	pop    rbp
  21308e:	c3                   	ret    
  21308f:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
  213093:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  213096:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
            return openHandle(fd);
  213099:	8b 75 cc             	mov    esi,DWORD PTR [rbp-0x34]
  21309c:	e8 cf a9 ff ff       	call   20da70 <File_openHandle>
  2130a1:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  2130a7:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  2130aa:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
  2130ad:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  2130b1:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  2130b5:	48 89 39             	mov    QWORD PTR [rcx],rdi
  2130b8:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  2130bc:	48 83 c4 60          	add    rsp,0x60
  2130c0:	5d                   	pop    rbp
  2130c1:	c3                   	ret    
  2130c2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2130c9:	1f 84 00 00 00 00 00 

00000000002130d0 <FixedBufferAllocator_alloc>:
            .buffer = buffer,
            .end_index = 0,
        };
    }

    fn alloc(allocator: *Allocator, n: usize, alignment: u29) ![]u8 {
  2130d0:	55                   	push   rbp
  2130d1:	48 89 e5             	mov    rbp,rsp
  2130d4:	48 81 ec 10 01 00 00 	sub    rsp,0x110
  2130db:	48 89 f8             	mov    rax,rdi
  2130de:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  2130e2:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  2130e6:	41 81 e0 ff ff ff 1f 	and    r8d,0x1fffffff
  2130ed:	44 89 45 c4          	mov    DWORD PTR [rbp-0x3c],r8d
        const self = @fieldParentPtr(FixedBufferAllocator, "allocator", allocator);
  2130f1:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  2130f5:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
        const addr = @ptrToInt(self.buffer.ptr) + self.end_index;
  2130f9:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  2130fd:	48 8b 49 20          	mov    rcx,QWORD PTR [rcx+0x20]
  213101:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  213105:	48 03 4a 18          	add    rcx,QWORD PTR [rdx+0x18]
  213109:	41 0f 92 c1          	setb   r9b
  21310d:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  213114:	48 89 bd 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdi
  21311b:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
  213122:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
  213129:	44 88 8d 5f ff ff ff 	mov    BYTE PTR [rbp-0xa1],r9b
  213130:	0f 82 f3 00 00 00    	jb     213229 <FixedBufferAllocator_alloc+0x159>
  213136:	e9 fe 00 00 00       	jmp    213239 <FixedBufferAllocator_alloc+0x169>
  21313b:	31 c0                	xor    eax,eax
  21313d:	89 c1                	mov    ecx,eax
        const rem = @rem(addr, alignment);
        const march_forward_bytes = if (rem == 0) 0 else (alignment - rem);
  21313f:	48 89 8d 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rcx
  213146:	eb 29                	jmp    213171 <FixedBufferAllocator_alloc+0xa1>
  213148:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  21314c:	8b 4d c4             	mov    ecx,DWORD PTR [rbp-0x3c]
  21314f:	89 ca                	mov    edx,ecx
  213151:	48 29 c2             	sub    rdx,rax
  213154:	40 0f 92 c6          	setb   sil
  213158:	48 89 95 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdx
  21315f:	40 88 b5 47 ff ff ff 	mov    BYTE PTR [rbp-0xb9],sil
  213166:	0f 82 2e 01 00 00    	jb     21329a <FixedBufferAllocator_alloc+0x1ca>
  21316c:	e9 39 01 00 00       	jmp    2132aa <FixedBufferAllocator_alloc+0x1da>
  213171:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  213178:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        const adjusted_index = self.end_index + march_forward_bytes;
  21317c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  213180:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  213184:	48 03 45 a0          	add    rax,QWORD PTR [rbp-0x60]
  213188:	0f 92 c1             	setb   cl
  21318b:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
  213192:	88 8d 37 ff ff ff    	mov    BYTE PTR [rbp-0xc9],cl
  213198:	0f 82 1f 01 00 00    	jb     2132bd <FixedBufferAllocator_alloc+0x1ed>
  21319e:	e9 2a 01 00 00       	jmp    2132cd <FixedBufferAllocator_alloc+0x1fd>
        const new_end_index = adjusted_index + n;
        if (new_end_index > self.buffer.len) {
            return error.OutOfMemory;
  2131a3:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  2131aa:	e8 e1 8a ff ff       	call   20bc90 <__zig_return_error>
  2131af:	48 8b 3d 02 75 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff7502]        # 20a6b8 <__unnamed_60>
  2131b6:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  2131bd:	48 89 38             	mov    QWORD PTR [rax],rdi
  2131c0:	48 8b 3d f9 74 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff74f9]        # 20a6c0 <__unnamed_60+0x8>
  2131c7:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  2131cb:	48 8b 3d f6 74 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff74f6]        # 20a6c8 <__unnamed_60+0x10>
  2131d2:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  2131d6:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  2131dd:	48 81 c4 10 01 00 00 	add    rsp,0x110
  2131e4:	5d                   	pop    rbp
  2131e5:	c3                   	ret    
        if (new_end_index > self.buffer.len) {
  2131e6:	eb 00                	jmp    2131e8 <FixedBufferAllocator_alloc+0x118>
        }
        const result = self.buffer[adjusted_index..new_end_index];
  2131e8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  2131ec:	48 89 c1             	mov    rcx,rax
  2131ef:	48 83 c1 20          	add    rcx,0x20
  2131f3:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  2131f7:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  2131fb:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
  2131ff:	48 39 f2             	cmp    rdx,rsi
  213202:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  213209:	48 89 8d 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rcx
  213210:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
  213217:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
  21321e:	0f 86 12 01 00 00    	jbe    213336 <FixedBufferAllocator_alloc+0x266>
  213224:	e9 fd 00 00 00       	jmp    213326 <FixedBufferAllocator_alloc+0x256>
  213229:	48 8d 3d 98 ff 02 00 	lea    rdi,[rip+0x2ff98]        # 2431c8 <__unnamed_4>
  213230:	31 c0                	xor    eax,eax
  213232:	89 c6                	mov    esi,eax
        const addr = @ptrToInt(self.buffer.ptr) + self.end_index;
  213234:	e8 c7 83 ff ff       	call   20b600 <panic>
  213239:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  213240:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
        const rem = @rem(addr, alignment);
  213244:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  213248:	8b 4d c4             	mov    ecx,DWORD PTR [rbp-0x3c]
  21324b:	89 ca                	mov    edx,ecx
  21324d:	48 83 fa 00          	cmp    rdx,0x0
  213251:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
  213258:	48 89 95 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rdx
  21325f:	74 29                	je     21328a <FixedBufferAllocator_alloc+0x1ba>
  213261:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  213268:	31 c9                	xor    ecx,ecx
  21326a:	89 ca                	mov    edx,ecx
  21326c:	48 8b b5 00 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x100]
  213273:	48 f7 f6             	div    rsi
  213276:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
        const march_forward_bytes = if (rem == 0) 0 else (alignment - rem);
  21327a:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
  21327f:	0f 84 b6 fe ff ff    	je     21313b <FixedBufferAllocator_alloc+0x6b>
  213285:	e9 be fe ff ff       	jmp    213148 <FixedBufferAllocator_alloc+0x78>
  21328a:	48 8d 3d 67 00 03 00 	lea    rdi,[rip+0x30067]        # 2432f8 <__unnamed_15>
  213291:	31 c0                	xor    eax,eax
  213293:	89 c6                	mov    esi,eax
        const rem = @rem(addr, alignment);
  213295:	e8 66 83 ff ff       	call   20b600 <panic>
  21329a:	48 8d 3d 27 ff 02 00 	lea    rdi,[rip+0x2ff27]        # 2431c8 <__unnamed_4>
  2132a1:	31 c0                	xor    eax,eax
  2132a3:	89 c6                	mov    esi,eax
        const march_forward_bytes = if (rem == 0) 0 else (alignment - rem);
  2132a5:	e8 56 83 ff ff       	call   20b600 <panic>
  2132aa:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  2132b1:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
  2132b8:	e9 b4 fe ff ff       	jmp    213171 <FixedBufferAllocator_alloc+0xa1>
  2132bd:	48 8d 3d 04 ff 02 00 	lea    rdi,[rip+0x2ff04]        # 2431c8 <__unnamed_4>
  2132c4:	31 c0                	xor    eax,eax
  2132c6:	89 c6                	mov    esi,eax
        const adjusted_index = self.end_index + march_forward_bytes;
  2132c8:	e8 33 83 ff ff       	call   20b600 <panic>
  2132cd:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  2132d4:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
        const new_end_index = adjusted_index + n;
  2132d8:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  2132dc:	48 03 4d c8          	add    rcx,QWORD PTR [rbp-0x38]
  2132e0:	0f 92 c2             	setb   dl
  2132e3:	48 89 8d f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rcx
  2132ea:	88 95 f7 fe ff ff    	mov    BYTE PTR [rbp-0x109],dl
  2132f0:	72 02                	jb     2132f4 <FixedBufferAllocator_alloc+0x224>
  2132f2:	eb 10                	jmp    213304 <FixedBufferAllocator_alloc+0x234>
  2132f4:	48 8d 3d cd fe 02 00 	lea    rdi,[rip+0x2fecd]        # 2431c8 <__unnamed_4>
  2132fb:	31 c0                	xor    eax,eax
  2132fd:	89 c6                	mov    esi,eax
  2132ff:	e8 fc 82 ff ff       	call   20b600 <panic>
  213304:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  21330b:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
        if (new_end_index > self.buffer.len) {
  21330f:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  213313:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  213317:	48 3b 4a 28          	cmp    rcx,QWORD PTR [rdx+0x28]
  21331b:	0f 87 82 fe ff ff    	ja     2131a3 <FixedBufferAllocator_alloc+0xd3>
  213321:	e9 c0 fe ff ff       	jmp    2131e6 <FixedBufferAllocator_alloc+0x116>
  213326:	48 8d 3d cb 00 03 00 	lea    rdi,[rip+0x300cb]        # 2433f8 <__unnamed_20>
  21332d:	31 c0                	xor    eax,eax
  21332f:	89 c6                	mov    esi,eax
        const result = self.buffer[adjusted_index..new_end_index];
  213331:	e8 ca 82 ff ff       	call   20b600 <panic>
  213336:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  21333d:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  213344:	48 39 c8             	cmp    rax,rcx
  213347:	76 10                	jbe    213359 <FixedBufferAllocator_alloc+0x289>
  213349:	48 8d 3d a8 00 03 00 	lea    rdi,[rip+0x300a8]        # 2433f8 <__unnamed_20>
  213350:	31 c0                	xor    eax,eax
  213352:	89 c6                	mov    esi,eax
  213354:	e8 a7 82 ff ff       	call   20b600 <panic>
  213359:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  213360:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  213367:	48 03 01             	add    rax,QWORD PTR [rcx]
  21336a:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  21336e:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  213375:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  21337c:	48 29 d0             	sub    rax,rdx
  21337f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  213383:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  213387:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  21338b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21338f:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
        self.end_index = new_end_index;
  213393:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  213397:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  21339b:	48 89 70 18          	mov    QWORD PTR [rax+0x18],rsi

        return result;
  21339f:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  2133a5:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  2133a9:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  2133ad:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  2133b1:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  2133b5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2133b9:	48 8b b5 70 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x90]
  2133c0:	48 89 06             	mov    QWORD PTR [rsi],rax
  2133c3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2133c7:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  2133cb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2133cf:	48 89 46 10          	mov    QWORD PTR [rsi+0x10],rax
  2133d3:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  2133da:	48 81 c4 10 01 00 00 	add    rsp,0x110
  2133e1:	5d                   	pop    rbp
  2133e2:	c3                   	ret    
  2133e3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2133ea:	84 00 00 00 00 00 

00000000002133f0 <FixedBufferAllocator_realloc>:
    }

    fn realloc(allocator: *Allocator, old_mem: []u8, new_size: usize, alignment: u29) ![]u8 {
  2133f0:	55                   	push   rbp
  2133f1:	48 89 e5             	mov    rbp,rsp
  2133f4:	48 81 ec 80 01 00 00 	sub    rsp,0x180
  2133fb:	48 89 f8             	mov    rax,rdi
  2133fe:	48 89 95 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdx
  213405:	4c 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],r8
  21340c:	41 81 e1 ff ff ff 1f 	and    r9d,0x1fffffff
  213413:	44 89 8d 3c ff ff ff 	mov    DWORD PTR [rbp-0xc4],r9d
        const self = @fieldParentPtr(FixedBufferAllocator, "allocator", allocator);
  21341a:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
  213421:	48 89 95 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rdx
        assert(old_mem.len <= self.end_index);
  213428:	48 8b 51 08          	mov    rdx,QWORD PTR [rcx+0x8]
  21342c:	4c 8b 85 30 ff ff ff 	mov    r8,QWORD PTR [rbp-0xd0]
  213433:	49 3b 50 18          	cmp    rdx,QWORD PTR [r8+0x18]
  213437:	41 0f 96 c2          	setbe  r10b
  21343b:	45 0f b6 ca          	movzx  r9d,r10b
  21343f:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
  213446:	44 89 cf             	mov    edi,r9d
  213449:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  213450:	48 89 8d e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rcx
  213457:	48 89 b5 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rsi
  21345e:	e8 9d 7b ff ff       	call   20b000 <assert>
        if (new_size <= old_mem.len) {
  213463:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  21346a:	48 8b 8d e8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x118]
  213471:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  213475:	77 32                	ja     2134a9 <FixedBufferAllocator_realloc+0xb9>
  213477:	31 c0                	xor    eax,eax
  213479:	89 c1                	mov    ecx,eax
            return old_mem[0..new_size];
  21347b:	48 8b 95 40 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc0]
  213482:	48 8b b5 e8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x118]
  213489:	48 8b 7e 08          	mov    rdi,QWORD PTR [rsi+0x8]
  21348d:	48 39 d1             	cmp    rcx,rdx
  213490:	48 89 bd d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rdi
  213497:	48 89 95 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rdx
  21349e:	0f 86 21 02 00 00    	jbe    2136c5 <FixedBufferAllocator_realloc+0x2d5>
  2134a4:	e9 0c 02 00 00       	jmp    2136b5 <FixedBufferAllocator_realloc+0x2c5>
  2134a9:	31 c0                	xor    eax,eax
  2134ab:	89 c1                	mov    ecx,eax
        } else if (old_mem.ptr == self.buffer.ptr + self.end_index - old_mem.len) {
  2134ad:	48 8b 95 e8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x118]
  2134b4:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
  2134b7:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
  2134be:	48 8b 7f 20          	mov    rdi,QWORD PTR [rdi+0x20]
  2134c2:	4c 8b 85 30 ff ff ff 	mov    r8,QWORD PTR [rbp-0xd0]
  2134c9:	49 03 78 18          	add    rdi,QWORD PTR [r8+0x18]
  2134cd:	48 2b 4a 08          	sub    rcx,QWORD PTR [rdx+0x8]
  2134d1:	48 01 cf             	add    rdi,rcx
  2134d4:	48 39 fe             	cmp    rsi,rdi
  2134d7:	0f 85 c0 00 00 00    	jne    21359d <FixedBufferAllocator_realloc+0x1ad>
            const start_index = self.end_index - old_mem.len;
  2134dd:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  2134e4:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  2134e8:	48 8b 8d e8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x118]
  2134ef:	48 2b 41 08          	sub    rax,QWORD PTR [rcx+0x8]
  2134f3:	0f 92 c2             	setb   dl
  2134f6:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
  2134fd:	88 95 c7 fe ff ff    	mov    BYTE PTR [rbp-0x139],dl
  213503:	0f 82 40 02 00 00    	jb     213749 <FixedBufferAllocator_realloc+0x359>
  213509:	e9 4b 02 00 00       	jmp    213759 <FixedBufferAllocator_realloc+0x369>
            const new_end_index = start_index + new_size;
            if (new_end_index > self.buffer.len) return error.OutOfMemory;
  21350e:	48 8b bd e0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x120]
  213515:	e8 76 87 ff ff       	call   20bc90 <__zig_return_error>
  21351a:	48 8b 3d af 71 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff71af]        # 20a6d0 <__unnamed_61>
  213521:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  213528:	48 89 38             	mov    QWORD PTR [rax],rdi
  21352b:	48 8b 3d a6 71 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff71a6]        # 20a6d8 <__unnamed_61+0x8>
  213532:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  213536:	48 8b 3d a3 71 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff71a3]        # 20a6e0 <__unnamed_61+0x10>
  21353d:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  213541:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  213548:	48 81 c4 80 01 00 00 	add    rsp,0x180
  21354f:	5d                   	pop    rbp
  213550:	c3                   	ret    
  213551:	eb 00                	jmp    213553 <FixedBufferAllocator_realloc+0x163>
            const result = self.buffer[start_index..new_end_index];
  213553:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21355a:	48 89 c1             	mov    rcx,rax
  21355d:	48 83 c1 20          	add    rcx,0x20
  213561:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
  213568:	48 8b b5 20 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe0]
  21356f:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
  213573:	48 39 f2             	cmp    rdx,rsi
  213576:	48 89 b5 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rsi
  21357d:	48 89 8d b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rcx
  213584:	48 89 95 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rdx
  21358b:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
  213592:	0f 86 3c 02 00 00    	jbe    2137d4 <FixedBufferAllocator_realloc+0x3e4>
  213598:	e9 27 02 00 00       	jmp    2137c4 <FixedBufferAllocator_realloc+0x3d4>
  21359d:	48 8d 45 98          	lea    rax,[rbp-0x68]
            self.end_index = new_end_index;
            return result;
        } else {
            const result = try alloc(allocator, new_size, alignment);
  2135a1:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
  2135a8:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  2135af:	44 8b 85 3c ff ff ff 	mov    r8d,DWORD PTR [rbp-0xc4]
  2135b6:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  2135ba:	48 8b b5 e0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x120]
  2135c1:	48 89 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rax
  2135c8:	e8 03 fb ff ff       	call   2130d0 <FixedBufferAllocator_alloc>
  2135cd:	66 83 7d 98 00       	cmp    WORD PTR [rbp-0x68],0x0
  2135d2:	74 5c                	je     213630 <FixedBufferAllocator_realloc+0x240>
  2135d4:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  2135d8:	48 8b bd e0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x120]
  2135df:	66 89 85 96 fe ff ff 	mov    WORD PTR [rbp-0x16a],ax
  2135e6:	e8 a5 86 ff ff       	call   20bc90 <__zig_return_error>
  2135eb:	66 8b 85 96 fe ff ff 	mov    ax,WORD PTR [rbp-0x16a]
  2135f2:	66 89 85 68 ff ff ff 	mov    WORD PTR [rbp-0x98],ax
  2135f9:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  213600:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  213607:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21360a:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  213611:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  213615:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  21361c:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  213620:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  213627:	48 81 c4 80 01 00 00 	add    rsp,0x180
  21362e:	5d                   	pop    rbp
  21362f:	c3                   	ret    
  213630:	48 8d bd 00 ff ff ff 	lea    rdi,[rbp-0x100]
  213637:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  21363b:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
  213642:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  213646:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
            mem.copy(u8, result, old_mem);
  21364d:	48 8b b5 e8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x118]
  213654:	e8 d7 16 01 00       	call   224d30 <copy>
            return result;
  213659:	66 c7 85 50 ff ff ff 	mov    WORD PTR [rbp-0xb0],0x0
  213660:	00 00 
  213662:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  213669:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  213670:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  213677:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  21367e:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  213685:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
  21368c:	48 89 06             	mov    QWORD PTR [rsi],rax
  21368f:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
  213696:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  21369a:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  2136a1:	48 89 46 10          	mov    QWORD PTR [rsi+0x10],rax
  2136a5:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  2136ac:	48 81 c4 80 01 00 00 	add    rsp,0x180
  2136b3:	5d                   	pop    rbp
  2136b4:	c3                   	ret    
  2136b5:	48 8d 3d 3c fd 02 00 	lea    rdi,[rip+0x2fd3c]        # 2433f8 <__unnamed_20>
  2136bc:	31 c0                	xor    eax,eax
  2136be:	89 c6                	mov    esi,eax
            return old_mem[0..new_size];
  2136c0:	e8 3b 7f ff ff       	call   20b600 <panic>
  2136c5:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  2136cc:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
  2136d3:	48 39 c8             	cmp    rax,rcx
  2136d6:	76 10                	jbe    2136e8 <FixedBufferAllocator_realloc+0x2f8>
  2136d8:	48 8d 3d 19 fd 02 00 	lea    rdi,[rip+0x2fd19]        # 2433f8 <__unnamed_20>
  2136df:	31 c0                	xor    eax,eax
  2136e1:	89 c6                	mov    esi,eax
  2136e3:	e8 18 7f ff ff       	call   20b600 <panic>
  2136e8:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  2136ef:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  2136f2:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  2136f6:	48 8b 8d d0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x130]
  2136fd:	48 83 e9 00          	sub    rcx,0x0
  213701:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  213705:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  21370b:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  21370f:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  213713:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  213717:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  21371b:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  21371f:	48 8b 95 f8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x108]
  213726:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  213729:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  21372d:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  213731:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  213735:	48 89 4a 10          	mov    QWORD PTR [rdx+0x10],rcx
  213739:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  213740:	48 81 c4 80 01 00 00 	add    rsp,0x180
  213747:	5d                   	pop    rbp
  213748:	c3                   	ret    
  213749:	48 8d 3d 78 fa 02 00 	lea    rdi,[rip+0x2fa78]        # 2431c8 <__unnamed_4>
  213750:	31 c0                	xor    eax,eax
  213752:	89 c6                	mov    esi,eax
            const start_index = self.end_index - old_mem.len;
  213754:	e8 a7 7e ff ff       	call   20b600 <panic>
  213759:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  213760:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
            const new_end_index = start_index + new_size;
  213767:	48 8b 8d 28 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd8]
  21376e:	48 03 8d 40 ff ff ff 	add    rcx,QWORD PTR [rbp-0xc0]
  213775:	0f 92 c2             	setb   dl
  213778:	48 89 8d 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rcx
  21377f:	88 95 87 fe ff ff    	mov    BYTE PTR [rbp-0x179],dl
  213785:	72 02                	jb     213789 <FixedBufferAllocator_realloc+0x399>
  213787:	eb 10                	jmp    213799 <FixedBufferAllocator_realloc+0x3a9>
  213789:	48 8d 3d 38 fa 02 00 	lea    rdi,[rip+0x2fa38]        # 2431c8 <__unnamed_4>
  213790:	31 c0                	xor    eax,eax
  213792:	89 c6                	mov    esi,eax
  213794:	e8 67 7e ff ff       	call   20b600 <panic>
  213799:	48 8b 85 88 fe ff ff 	mov    rax,QWORD PTR [rbp-0x178]
  2137a0:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
            if (new_end_index > self.buffer.len) return error.OutOfMemory;
  2137a7:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  2137ae:	48 8b 95 30 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd0]
  2137b5:	48 3b 4a 28          	cmp    rcx,QWORD PTR [rdx+0x28]
  2137b9:	0f 87 4f fd ff ff    	ja     21350e <FixedBufferAllocator_realloc+0x11e>
  2137bf:	e9 8d fd ff ff       	jmp    213551 <FixedBufferAllocator_realloc+0x161>
  2137c4:	48 8d 3d 2d fc 02 00 	lea    rdi,[rip+0x2fc2d]        # 2433f8 <__unnamed_20>
  2137cb:	31 c0                	xor    eax,eax
  2137cd:	89 c6                	mov    esi,eax
            const result = self.buffer[start_index..new_end_index];
  2137cf:	e8 2c 7e ff ff       	call   20b600 <panic>
  2137d4:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  2137db:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
  2137e2:	48 39 c8             	cmp    rax,rcx
  2137e5:	76 10                	jbe    2137f7 <FixedBufferAllocator_realloc+0x407>
  2137e7:	48 8d 3d 0a fc 02 00 	lea    rdi,[rip+0x2fc0a]        # 2433f8 <__unnamed_20>
  2137ee:	31 c0                	xor    eax,eax
  2137f0:	89 c6                	mov    esi,eax
  2137f2:	e8 09 7e ff ff       	call   20b600 <panic>
  2137f7:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
  2137fe:	48 8b 8d b0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x150]
  213805:	48 03 01             	add    rax,QWORD PTR [rcx]
  213808:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  21380c:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  213813:	48 8b 95 a8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x158]
  21381a:	48 29 d0             	sub    rax,rdx
  21381d:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  213821:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  213825:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
  21382c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  213830:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
            self.end_index = new_end_index;
  213837:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21383e:	48 8b b5 20 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe0]
  213845:	48 89 70 18          	mov    QWORD PTR [rax+0x18],rsi
            return result;
  213849:	66 c7 45 b0 00 00    	mov    WORD PTR [rbp-0x50],0x0
  21384f:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  213856:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  21385a:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  213861:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  213865:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  213869:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
  213870:	48 89 06             	mov    QWORD PTR [rsi],rax
  213873:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  213877:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  21387b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  21387f:	48 89 46 10          	mov    QWORD PTR [rsi+0x10],rax
  213883:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  21388a:	48 81 c4 80 01 00 00 	add    rsp,0x180
  213891:	5d                   	pop    rbp
  213892:	c3                   	ret    
  213893:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21389a:	84 00 00 00 00 00 

00000000002138a0 <FixedBufferAllocator_free>:
        }
    }

    fn free(allocator: *Allocator, bytes: []u8) void {}
  2138a0:	55                   	push   rbp
  2138a1:	48 89 e5             	mov    rbp,rsp
  2138a4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  2138a8:	5d                   	pop    rbp
  2138a9:	c3                   	ret    
  2138aa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000002138b0 <posixOpen>:
pub fn posixOpen(allocator: *Allocator, file_path: []const u8, flags: u32, perm: usize) PosixOpenError!i32 {
  2138b0:	55                   	push   rbp
  2138b1:	48 89 e5             	mov    rbp,rsp
  2138b4:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  2138bb:	48 89 f8             	mov    rax,rdi
  2138be:	4c 8d 55 e8          	lea    r10,[rbp-0x18]
  2138c2:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  2138c6:	44 89 45 b4          	mov    DWORD PTR [rbp-0x4c],r8d
  2138ca:	4c 89 4d a8          	mov    QWORD PTR [rbp-0x58],r9
    const path_with_null = try cstr.addNullByte(allocator, file_path);
  2138ce:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  2138d2:	48 89 7d 90          	mov    QWORD PTR [rbp-0x70],rdi
  2138d6:	4c 89 d7             	mov    rdi,r10
  2138d9:	48 89 75 88          	mov    QWORD PTR [rbp-0x78],rsi
  2138dd:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  2138e1:	e8 5a 3c 01 00       	call   227540 <addNullByte>
  2138e6:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  2138eb:	74 37                	je     213924 <posixOpen+0x74>
  2138ed:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  2138f1:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  2138f5:	66 89 85 7e ff ff ff 	mov    WORD PTR [rbp-0x82],ax
  2138fc:	e8 8f 83 ff ff       	call   20bc90 <__zig_return_error>
  213901:	66 8b 85 7e ff ff ff 	mov    ax,WORD PTR [rbp-0x82]
  213908:	66 89 45 c8          	mov    WORD PTR [rbp-0x38],ax
  21390c:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  213910:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  213914:	48 89 39             	mov    QWORD PTR [rcx],rdi
  213917:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  21391b:	48 81 c4 90 00 00 00 	add    rsp,0x90
  213922:	5d                   	pop    rbp
  213923:	c3                   	ret    
  213924:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  213928:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21392c:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  213930:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  213934:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
    return posixOpenC(path_with_null.ptr, flags, perm);
  213938:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  21393c:	8b 4d b4             	mov    ecx,DWORD PTR [rbp-0x4c]
  21393f:	4c 8b 45 a8          	mov    r8,QWORD PTR [rbp-0x58]
  213943:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
  213947:	e8 74 3d 01 00       	call   2276c0 <posixOpenC>
  21394c:	48 8d 75 98          	lea    rsi,[rbp-0x68]
    defer allocator.free(path_with_null);
  213950:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  213954:	e8 17 ea 00 00       	call   222370 <Allocator_free.73>
    return posixOpenC(path_with_null.ptr, flags, perm);
  213959:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  21395e:	74 0b                	je     21396b <posixOpen+0xbb>
  213960:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  213964:	e8 27 83 ff ff       	call   20bc90 <__zig_return_error>
  213969:	eb 02                	jmp    21396d <posixOpen+0xbd>
  21396b:	eb 00                	jmp    21396d <posixOpen+0xbd>
  21396d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  213971:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  213975:	48 89 01             	mov    QWORD PTR [rcx],rax
  213978:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  21397c:	48 81 c4 90 00 00 00 	add    rsp,0x90
  213983:	5d                   	pop    rbp
  213984:	c3                   	ret    
  213985:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21398c:	00 00 00 00 

0000000000213990 <FileInStream_init>:
    pub fn init(file: *File) FileInStream {
  213990:	55                   	push   rbp
  213991:	48 89 e5             	mov    rbp,rsp
  213994:	48 89 f8             	mov    rax,rdi
  213997:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
            .file = file,
  21399b:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
        return FileInStream{
  21399f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  2139a3:	48 8b 35 16 fc 02 00 	mov    rsi,QWORD PTR [rip+0x2fc16]        # 2435c0 <__unnamed_62>
  2139aa:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2139ae:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  2139b2:	48 89 37             	mov    QWORD PTR [rdi],rsi
  2139b5:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2139b9:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  2139bd:	5d                   	pop    rbp
  2139be:	c3                   	ret    
  2139bf:	90                   	nop

00000000002139c0 <InStream(ReadError)_readNoEof>:
        pub fn readNoEof(self: *Self, buf: []u8) !void {
  2139c0:	55                   	push   rbp
  2139c1:	48 89 e5             	mov    rbp,rsp
  2139c4:	48 83 ec 50          	sub    rsp,0x50
  2139c8:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  2139cc:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
            const amt_read = try self.read(buf);
  2139d0:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  2139d4:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  2139d8:	48 89 c7             	mov    rdi,rax
  2139db:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2139df:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
  2139e3:	48 89 c6             	mov    rsi,rax
  2139e6:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  2139ea:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  2139ee:	48 89 ca             	mov    rdx,rcx
  2139f1:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  2139f5:	e8 66 0e 00 00       	call   214860 <InStream(ReadError)_read>
  2139fa:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  2139ff:	74 1b                	je     213a1c <InStream(ReadError)_readNoEof+0x5c>
  213a01:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  213a05:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  213a09:	66 89 45 b6          	mov    WORD PTR [rbp-0x4a],ax
  213a0d:	e8 7e 82 ff ff       	call   20bc90 <__zig_return_error>
  213a12:	66 8b 45 b6          	mov    ax,WORD PTR [rbp-0x4a]
  213a16:	48 83 c4 50          	add    rsp,0x50
  213a1a:	5d                   	pop    rbp
  213a1b:	c3                   	ret    
  213a1c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  213a20:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
            if (amt_read < buf.len) return error.EndOfStream;
  213a24:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  213a28:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  213a2c:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  213a30:	73 13                	jae    213a45 <InStream(ReadError)_readNoEof+0x85>
  213a32:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  213a36:	e8 55 82 ff ff       	call   20bc90 <__zig_return_error>
  213a3b:	66 b8 20 00          	mov    ax,0x20
  213a3f:	48 83 c4 50          	add    rsp,0x50
  213a43:	5d                   	pop    rbp
  213a44:	c3                   	ret    
  213a45:	31 c0                	xor    eax,eax
  213a47:	66 89 c1             	mov    cx,ax
        pub fn readNoEof(self: *Self, buf: []u8) !void {
  213a4a:	66 89 c8             	mov    ax,cx
  213a4d:	48 83 c4 50          	add    rsp,0x50
  213a51:	5d                   	pop    rbp
  213a52:	c3                   	ret    
  213a53:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  213a5a:	84 00 00 00 00 00 

0000000000213a60 <eql>:
    assert(!lessThan(u8, "", ""));
    assert(lessThan(u8, "", "a"));
}

/// Compares two slices and returns whether they are equal.
pub fn eql(comptime T: type, a: []const T, b: []const T) bool {
  213a60:	55                   	push   rbp
  213a61:	48 89 e5             	mov    rbp,rsp
    if (a.len != b.len) return false;
  213a64:	48 83 ec 40          	sub    rsp,0x40
  213a68:	48 8b 47 08          	mov    rax,QWORD PTR [rdi+0x8]
  213a6c:	48 3b 46 08          	cmp    rax,QWORD PTR [rsi+0x8]
  213a70:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
  213a74:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  213a78:	74 0c                	je     213a86 <eql+0x26>
  213a7a:	31 c0                	xor    eax,eax
  213a7c:	88 c1                	mov    cl,al
  213a7e:	88 c8                	mov    al,cl
  213a80:	48 83 c4 40          	add    rsp,0x40
  213a84:	5d                   	pop    rbp
  213a85:	c3                   	ret    
  213a86:	eb 00                	jmp    213a88 <eql+0x28>
  213a88:	48 8d 7d ff          	lea    rdi,[rbp-0x1]
  213a8c:	be aa 00 00 00       	mov    esi,0xaa
  213a91:	b8 01 00 00 00       	mov    eax,0x1
  213a96:	89 c2                	mov    edx,eax
    for (a) |item, index| {
  213a98:	e8 13 0e 02 00       	call   2348b0 <memset>
  213a9d:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  213aa4:	00 
  213aa5:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  213aa9:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
  213aad:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  213ab1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  213ab5:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  213ab9:	48 39 c8             	cmp    rax,rcx
  213abc:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  213ac0:	73 41                	jae    213b03 <eql+0xa3>
  213ac2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  213ac6:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  213ac9:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  213acd:	40 8a 34 11          	mov    sil,BYTE PTR [rcx+rdx*1]
  213ad1:	40 88 75 ff          	mov    BYTE PTR [rbp-0x1],sil
        if (b[index] != item) return false;
  213ad5:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  213ad9:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  213add:	48 3b 4f 08          	cmp    rcx,QWORD PTR [rdi+0x8]
  213ae1:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  213ae5:	72 34                	jb     213b1b <eql+0xbb>
  213ae7:	eb 22                	jmp    213b0b <eql+0xab>
  213ae9:	31 c0                	xor    eax,eax
  213aeb:	88 c1                	mov    cl,al
  213aed:	88 c8                	mov    al,cl
  213aef:	48 83 c4 40          	add    rsp,0x40
  213af3:	5d                   	pop    rbp
  213af4:	c3                   	ret    
    for (a) |item, index| {
  213af5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  213af9:	48 83 c0 01          	add    rax,0x1
  213afd:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  213b01:	eb ae                	jmp    213ab1 <eql+0x51>
    }
    return true;
  213b03:	b0 01                	mov    al,0x1
  213b05:	48 83 c4 40          	add    rsp,0x40
  213b09:	5d                   	pop    rbp
  213b0a:	c3                   	ret    
  213b0b:	48 8d 3d e6 f8 02 00 	lea    rdi,[rip+0x2f8e6]        # 2433f8 <__unnamed_20>
  213b12:	31 c0                	xor    eax,eax
  213b14:	89 c6                	mov    esi,eax
        if (b[index] != item) return false;
  213b16:	e8 e5 7a ff ff       	call   20b600 <panic>
  213b1b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  213b1f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  213b22:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  213b26:	40 8a 34 11          	mov    sil,BYTE PTR [rcx+rdx*1]
  213b2a:	40 3a 75 ff          	cmp    sil,BYTE PTR [rbp-0x1]
  213b2e:	75 b9                	jne    213ae9 <eql+0x89>
  213b30:	eb c3                	jmp    213af5 <eql+0x95>
  213b32:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  213b39:	1f 84 00 00 00 00 00 

0000000000213b40 <InStream(ReadError)_readByte>:
        pub fn readByte(self: *Self) !u8 {
  213b40:	55                   	push   rbp
  213b41:	48 89 e5             	mov    rbp,rsp
  213b44:	48 83 ec 60          	sub    rsp,0x60
  213b48:	48 89 f8             	mov    rax,rdi
  213b4b:	b1 01                	mov    cl,0x1
  213b4d:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
            var result: [1]u8 = undefined;
  213b51:	44 8a 05 f7 51 ff ff 	mov    r8b,BYTE PTR [rip+0xffffffffffff51f7]        # 208d4f <__unnamed_63>
  213b58:	44 88 45 d7          	mov    BYTE PTR [rbp-0x29],r8b
            try self.readNoEof(result[0..]);
  213b5c:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  213b60:	f6 c1 01             	test   cl,0x1
  213b63:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  213b67:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
  213b6b:	48 89 75 b8          	mov    QWORD PTR [rbp-0x48],rsi
  213b6f:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  213b73:	75 5d                	jne    213bd2 <InStream(ReadError)_readByte+0x92>
  213b75:	eb 4b                	jmp    213bc2 <InStream(ReadError)_readByte+0x82>
  213b77:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  213b7b:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  213b7f:	66 89 45 ae          	mov    WORD PTR [rbp-0x52],ax
  213b83:	e8 08 81 ff ff       	call   20bc90 <__zig_return_error>
  213b88:	66 8b 45 ae          	mov    ax,WORD PTR [rbp-0x52]
  213b8c:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  213b90:	8b 4d e8             	mov    ecx,DWORD PTR [rbp-0x18]
  213b93:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  213b97:	89 0f                	mov    DWORD PTR [rdi],ecx
  213b99:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  213b9d:	48 83 c4 60          	add    rsp,0x60
  213ba1:	5d                   	pop    rbp
  213ba2:	c3                   	ret    
            return result[0];
  213ba3:	8a 45 d7             	mov    al,BYTE PTR [rbp-0x29]
  213ba6:	66 c7 45 e0 00 00    	mov    WORD PTR [rbp-0x20],0x0
  213bac:	88 45 e2             	mov    BYTE PTR [rbp-0x1e],al
  213baf:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
  213bb2:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  213bb6:	89 0a                	mov    DWORD PTR [rdx],ecx
  213bb8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  213bbc:	48 83 c4 60          	add    rsp,0x60
  213bc0:	5d                   	pop    rbp
  213bc1:	c3                   	ret    
  213bc2:	48 8d 3d 2f f8 02 00 	lea    rdi,[rip+0x2f82f]        # 2433f8 <__unnamed_20>
  213bc9:	31 c0                	xor    eax,eax
  213bcb:	89 c6                	mov    esi,eax
            try self.readNoEof(result[0..]);
  213bcd:	e8 2e 7a ff ff       	call   20b600 <panic>
  213bd2:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
  213bd6:	48 8d 45 d7          	lea    rax,[rbp-0x29]
  213bda:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  213bde:	48 c7 45 f8 01 00 00 	mov    QWORD PTR [rbp-0x8],0x1
  213be5:	00 
  213be6:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  213bea:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
  213bee:	e8 cd fd ff ff       	call   2139c0 <InStream(ReadError)_readNoEof>
  213bf3:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  213bf7:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  213bfc:	0f 85 75 ff ff ff    	jne    213b77 <InStream(ReadError)_readByte+0x37>
  213c02:	eb 9f                	jmp    213ba3 <InStream(ReadError)_readByte+0x63>
  213c04:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  213c0b:	00 00 00 00 00 

0000000000213c10 <File_seekForward>:
    pub fn seekForward(self: *File, amount: isize) !void {
  213c10:	55                   	push   rbp
  213c11:	48 89 e5             	mov    rbp,rsp
  213c14:	48 83 ec 60          	sub    rsp,0x60
  213c18:	b8 01 00 00 00       	mov    eax,0x1
  213c1d:	89 c1                	mov    ecx,eax
  213c1f:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  213c23:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
                const result = posix.lseek(self.handle, amount, posix.SEEK_CUR);
  213c27:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  213c2b:	8b 02                	mov    eax,DWORD PTR [rdx]
  213c2d:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  213c31:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  213c35:	89 c7                	mov    edi,eax
  213c37:	48 89 ca             	mov    rdx,rcx
  213c3a:	e8 91 0c 00 00       	call   2148d0 <lseek>
  213c3f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
                const err = posix.getErrno(result);
  213c43:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  213c47:	e8 34 94 ff ff       	call   20d080 <getErrno>
  213c4c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
                if (err > 0) {
  213c50:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
  213c55:	0f 86 b7 00 00 00    	jbe    213d12 <File_seekForward+0x102>
                    return switch (err) {
  213c5b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  213c5f:	48 89 c1             	mov    rcx,rax
  213c62:	48 83 e9 06          	sub    rcx,0x6
  213c66:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  213c6a:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  213c6e:	74 7d                	je     213ced <File_seekForward+0xdd>
  213c70:	eb 00                	jmp    213c72 <File_seekForward+0x62>
  213c72:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  213c76:	48 83 e8 09          	sub    rax,0x9
  213c7a:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  213c7e:	74 45                	je     213cc5 <File_seekForward+0xb5>
  213c80:	eb 00                	jmp    213c82 <File_seekForward+0x72>
  213c82:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  213c86:	48 83 e8 16          	sub    rax,0x16
  213c8a:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  213c8e:	74 3f                	je     213ccf <File_seekForward+0xbf>
  213c90:	eb 00                	jmp    213c92 <File_seekForward+0x82>
  213c92:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  213c96:	48 83 e8 1d          	sub    rax,0x1d
  213c9a:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  213c9e:	74 43                	je     213ce3 <File_seekForward+0xd3>
  213ca0:	eb 00                	jmp    213ca2 <File_seekForward+0x92>
  213ca2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  213ca6:	48 83 e8 4b          	sub    rax,0x4b
  213caa:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  213cae:	74 29                	je     213cd9 <File_seekForward+0xc9>
  213cb0:	eb 00                	jmp    213cb2 <File_seekForward+0xa2>
                        else => os.unexpectedErrorPosix(err),
  213cb2:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  213cb6:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  213cba:	e8 61 94 ff ff       	call   20d120 <unexpectedErrorPosix>
                    return switch (err) {
  213cbf:	66 89 45 a6          	mov    WORD PTR [rbp-0x5a],ax
  213cc3:	eb 32                	jmp    213cf7 <File_seekForward+0xe7>
  213cc5:	66 b8 1e 00          	mov    ax,0x1e
  213cc9:	66 89 45 a6          	mov    WORD PTR [rbp-0x5a],ax
  213ccd:	eb 28                	jmp    213cf7 <File_seekForward+0xe7>
  213ccf:	66 b8 22 00          	mov    ax,0x22
  213cd3:	66 89 45 a6          	mov    WORD PTR [rbp-0x5a],ax
  213cd7:	eb 1e                	jmp    213cf7 <File_seekForward+0xe7>
  213cd9:	66 b8 22 00          	mov    ax,0x22
  213cdd:	66 89 45 a6          	mov    WORD PTR [rbp-0x5a],ax
  213ce1:	eb 14                	jmp    213cf7 <File_seekForward+0xe7>
  213ce3:	66 b8 22 00          	mov    ax,0x22
  213ce7:	66 89 45 a6          	mov    WORD PTR [rbp-0x5a],ax
  213ceb:	eb 0a                	jmp    213cf7 <File_seekForward+0xe7>
  213ced:	66 b8 22 00          	mov    ax,0x22
  213cf1:	66 89 45 a6          	mov    WORD PTR [rbp-0x5a],ax
  213cf5:	eb 00                	jmp    213cf7 <File_seekForward+0xe7>
  213cf7:	66 8b 45 a6          	mov    ax,WORD PTR [rbp-0x5a]
  213cfb:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  213cff:	66 89 45 a4          	mov    WORD PTR [rbp-0x5c],ax
  213d03:	e8 88 7f ff ff       	call   20bc90 <__zig_return_error>
  213d08:	66 8b 45 a4          	mov    ax,WORD PTR [rbp-0x5c]
  213d0c:	48 83 c4 60          	add    rsp,0x60
  213d10:	5d                   	pop    rbp
  213d11:	c3                   	ret    
                if (err > 0) {
  213d12:	eb 00                	jmp    213d14 <File_seekForward+0x104>
  213d14:	31 c0                	xor    eax,eax
  213d16:	66 89 c1             	mov    cx,ax
    pub fn seekForward(self: *File, amount: isize) !void {
  213d19:	66 89 c8             	mov    ax,cx
  213d1c:	48 83 c4 60          	add    rsp,0x60
  213d20:	5d                   	pop    rbp
  213d21:	c3                   	ret    
  213d22:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  213d29:	1f 84 00 00 00 00 00 

0000000000213d30 <InStream(ReadError)_readInt>:
        pub fn readInt(self: *Self, endian: builtin.Endian, comptime T: type) !T {
  213d30:	55                   	push   rbp
  213d31:	48 89 e5             	mov    rbp,rsp
  213d34:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  213d3b:	88 c8                	mov    al,cl
  213d3d:	49 89 f8             	mov    r8,rdi
  213d40:	41 b1 01             	mov    r9b,0x1
  213d43:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
  213d47:	24 01                	and    al,0x1
  213d49:	88 45 bf             	mov    BYTE PTR [rbp-0x41],al
            var bytes: [@sizeOf(T)]u8 = undefined;
  213d4c:	66 44 8b 15 fc 4f ff 	mov    r10w,WORD PTR [rip+0xffffffffffff4ffc]        # 208d50 <__unnamed_64>
  213d53:	ff 
  213d54:	66 44 89 55 bd       	mov    WORD PTR [rbp-0x43],r10w
            try self.readNoEof(bytes[0..]);
  213d59:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  213d5d:	41 f6 c1 01          	test   r9b,0x1
  213d61:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
  213d65:	4c 89 45 a8          	mov    QWORD PTR [rbp-0x58],r8
  213d69:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  213d6d:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
  213d71:	0f 85 88 00 00 00    	jne    213dff <InStream(ReadError)_readInt+0xcf>
  213d77:	eb 76                	jmp    213def <InStream(ReadError)_readInt+0xbf>
  213d79:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  213d7d:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  213d81:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  213d85:	e8 06 7f ff ff       	call   20bc90 <__zig_return_error>
  213d8a:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  213d8e:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  213d92:	8b 4d e8             	mov    ecx,DWORD PTR [rbp-0x18]
  213d95:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  213d99:	89 0f                	mov    DWORD PTR [rdi],ecx
  213d9b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  213d9f:	48 81 c4 80 00 00 00 	add    rsp,0x80
  213da6:	5d                   	pop    rbp
  213da7:	c3                   	ret    
  213da8:	48 8d 45 d0          	lea    rax,[rbp-0x30]
  213dac:	48 8d 4d bd          	lea    rcx,[rbp-0x43]
            return mem.readInt(bytes, T, endian);
  213db0:	8a 55 bf             	mov    dl,BYTE PTR [rbp-0x41]
  213db3:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  213db7:	48 c7 45 d8 02 00 00 	mov    QWORD PTR [rbp-0x28],0x2
  213dbe:	00 
  213dbf:	0f b6 f2             	movzx  esi,dl
  213dc2:	48 8d 7d d0          	lea    rdi,[rbp-0x30]
  213dc6:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  213dca:	e8 71 0b 00 00       	call   214940 <readInt>
  213dcf:	66 c7 45 c8 00 00    	mov    WORD PTR [rbp-0x38],0x0
  213dd5:	66 89 45 ca          	mov    WORD PTR [rbp-0x36],ax
  213dd9:	8b 75 c8             	mov    esi,DWORD PTR [rbp-0x38]
  213ddc:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  213de0:	89 31                	mov    DWORD PTR [rcx],esi
  213de2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  213de6:	48 81 c4 80 00 00 00 	add    rsp,0x80
  213ded:	5d                   	pop    rbp
  213dee:	c3                   	ret    
  213def:	48 8d 3d 02 f6 02 00 	lea    rdi,[rip+0x2f602]        # 2433f8 <__unnamed_20>
  213df6:	31 c0                	xor    eax,eax
  213df8:	89 c6                	mov    esi,eax
            try self.readNoEof(bytes[0..]);
  213dfa:	e8 01 78 ff ff       	call   20b600 <panic>
  213dff:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
  213e03:	48 8d 45 bd          	lea    rax,[rbp-0x43]
  213e07:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  213e0b:	48 c7 45 f8 02 00 00 	mov    QWORD PTR [rbp-0x8],0x2
  213e12:	00 
  213e13:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  213e17:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  213e1b:	e8 a0 fb ff ff       	call   2139c0 <InStream(ReadError)_readNoEof>
  213e20:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  213e24:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  213e29:	0f 85 4a ff ff ff    	jne    213d79 <InStream(ReadError)_readInt+0x49>
  213e2f:	e9 74 ff ff ff       	jmp    213da8 <InStream(ReadError)_readInt+0x78>
  213e34:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  213e3b:	00 00 00 00 00 

0000000000213e40 <InStream(ReadError)_readInt.32>:
        pub fn readInt(self: *Self, endian: builtin.Endian, comptime T: type) !T {
  213e40:	55                   	push   rbp
  213e41:	48 89 e5             	mov    rbp,rsp
  213e44:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  213e4b:	88 c8                	mov    al,cl
  213e4d:	49 89 f8             	mov    r8,rdi
  213e50:	41 b1 01             	mov    r9b,0x1
  213e53:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  213e57:	24 01                	and    al,0x1
  213e59:	88 45 b7             	mov    BYTE PTR [rbp-0x49],al
            var bytes: [@sizeOf(T)]u8 = undefined;
  213e5c:	8b 0d be 6a ff ff    	mov    ecx,DWORD PTR [rip+0xffffffffffff6abe]        # 20a920 <__unnamed_37>
  213e62:	89 4d b3             	mov    DWORD PTR [rbp-0x4d],ecx
            try self.readNoEof(bytes[0..]);
  213e65:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  213e69:	41 f6 c1 01          	test   r9b,0x1
  213e6d:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  213e71:	4c 89 45 a0          	mov    QWORD PTR [rbp-0x60],r8
  213e75:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  213e79:	48 89 7d 90          	mov    QWORD PTR [rbp-0x70],rdi
  213e7d:	0f 85 8b 00 00 00    	jne    213f0e <InStream(ReadError)_readInt.32+0xce>
  213e83:	eb 79                	jmp    213efe <InStream(ReadError)_readInt.32+0xbe>
  213e85:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  213e89:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  213e8d:	66 89 45 8e          	mov    WORD PTR [rbp-0x72],ax
  213e91:	e8 fa 7d ff ff       	call   20bc90 <__zig_return_error>
  213e96:	66 8b 45 8e          	mov    ax,WORD PTR [rbp-0x72]
  213e9a:	66 89 45 e0          	mov    WORD PTR [rbp-0x20],ax
  213e9e:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  213ea2:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  213ea6:	48 89 39             	mov    QWORD PTR [rcx],rdi
  213ea9:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  213ead:	48 81 c4 80 00 00 00 	add    rsp,0x80
  213eb4:	5d                   	pop    rbp
  213eb5:	c3                   	ret    
  213eb6:	48 8d 45 c8          	lea    rax,[rbp-0x38]
  213eba:	48 8d 4d b3          	lea    rcx,[rbp-0x4d]
            return mem.readInt(bytes, T, endian);
  213ebe:	8a 55 b7             	mov    dl,BYTE PTR [rbp-0x49]
  213ec1:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  213ec5:	48 c7 45 d0 04 00 00 	mov    QWORD PTR [rbp-0x30],0x4
  213ecc:	00 
  213ecd:	0f b6 f2             	movzx  esi,dl
  213ed0:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  213ed4:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  213ed8:	e8 23 0c 00 00       	call   214b00 <readInt.35>
  213edd:	66 c7 45 c0 00 00    	mov    WORD PTR [rbp-0x40],0x0
  213ee3:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
  213ee6:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  213eea:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  213eee:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  213ef1:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  213ef5:	48 81 c4 80 00 00 00 	add    rsp,0x80
  213efc:	5d                   	pop    rbp
  213efd:	c3                   	ret    
  213efe:	48 8d 3d f3 f4 02 00 	lea    rdi,[rip+0x2f4f3]        # 2433f8 <__unnamed_20>
  213f05:	31 c0                	xor    eax,eax
  213f07:	89 c6                	mov    esi,eax
            try self.readNoEof(bytes[0..]);
  213f09:	e8 f2 76 ff ff       	call   20b600 <panic>
  213f0e:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
  213f12:	48 8d 45 b3          	lea    rax,[rbp-0x4d]
  213f16:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  213f1a:	48 c7 45 f8 04 00 00 	mov    QWORD PTR [rbp-0x8],0x4
  213f21:	00 
  213f22:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  213f26:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  213f2a:	e8 91 fa ff ff       	call   2139c0 <InStream(ReadError)_readNoEof>
  213f2f:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  213f33:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  213f38:	0f 85 47 ff ff ff    	jne    213e85 <InStream(ReadError)_readInt.32+0x45>
  213f3e:	e9 73 ff ff ff       	jmp    213eb6 <InStream(ReadError)_readInt.32+0x76>
  213f43:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  213f4a:	84 00 00 00 00 00 

0000000000213f50 <InStream(ReadError)_readInt.33>:
        pub fn readInt(self: *Self, endian: builtin.Endian, comptime T: type) !T {
  213f50:	55                   	push   rbp
  213f51:	48 89 e5             	mov    rbp,rsp
  213f54:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  213f5b:	88 c8                	mov    al,cl
  213f5d:	49 89 f8             	mov    r8,rdi
  213f60:	41 b1 01             	mov    r9b,0x1
  213f63:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
  213f67:	24 01                	and    al,0x1
  213f69:	88 45 a7             	mov    BYTE PTR [rbp-0x59],al
            var bytes: [@sizeOf(T)]u8 = undefined;
  213f6c:	48 8b 15 05 cd fe ff 	mov    rdx,QWORD PTR [rip+0xfffffffffffecd05]        # 200c78 <__unnamed_132>
  213f73:	48 89 55 9f          	mov    QWORD PTR [rbp-0x61],rdx
            try self.readNoEof(bytes[0..]);
  213f77:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  213f7b:	41 f6 c1 01          	test   r9b,0x1
  213f7f:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
  213f83:	4c 89 45 88          	mov    QWORD PTR [rbp-0x78],r8
  213f87:	48 89 55 80          	mov    QWORD PTR [rbp-0x80],rdx
  213f8b:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
  213f92:	0f 85 ae 00 00 00    	jne    214046 <InStream(ReadError)_readInt.33+0xf6>
  213f98:	e9 99 00 00 00       	jmp    214036 <InStream(ReadError)_readInt.33+0xe6>
  213f9d:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  213fa1:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  213fa5:	66 89 85 76 ff ff ff 	mov    WORD PTR [rbp-0x8a],ax
  213fac:	e8 df 7c ff ff       	call   20bc90 <__zig_return_error>
  213fb1:	66 8b 85 76 ff ff ff 	mov    ax,WORD PTR [rbp-0x8a]
  213fb8:	66 89 45 d8          	mov    WORD PTR [rbp-0x28],ax
  213fbc:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  213fc0:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  213fc7:	48 89 39             	mov    QWORD PTR [rcx],rdi
  213fca:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  213fce:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  213fd2:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  213fd6:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  213fdd:	5d                   	pop    rbp
  213fde:	c3                   	ret    
  213fdf:	48 8d 45 c0          	lea    rax,[rbp-0x40]
  213fe3:	48 8d 4d 9f          	lea    rcx,[rbp-0x61]
            return mem.readInt(bytes, T, endian);
  213fe7:	8a 55 a7             	mov    dl,BYTE PTR [rbp-0x59]
  213fea:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
  213fee:	48 c7 45 c8 08 00 00 	mov    QWORD PTR [rbp-0x38],0x8
  213ff5:	00 
  213ff6:	0f b6 f2             	movzx  esi,dl
  213ff9:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  213ffd:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  214004:	e8 97 0c 00 00       	call   214ca0 <readInt.36>
  214009:	66 c7 45 b0 00 00    	mov    WORD PTR [rbp-0x50],0x0
  21400f:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  214013:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  214017:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  21401e:	48 89 01             	mov    QWORD PTR [rcx],rax
  214021:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  214025:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  214029:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  21402d:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  214034:	5d                   	pop    rbp
  214035:	c3                   	ret    
  214036:	48 8d 3d bb f3 02 00 	lea    rdi,[rip+0x2f3bb]        # 2433f8 <__unnamed_20>
  21403d:	31 c0                	xor    eax,eax
  21403f:	89 c6                	mov    esi,eax
            try self.readNoEof(bytes[0..]);
  214041:	e8 ba 75 ff ff       	call   20b600 <panic>
  214046:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
  21404a:	48 8d 45 9f          	lea    rax,[rbp-0x61]
  21404e:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  214052:	48 c7 45 f8 08 00 00 	mov    QWORD PTR [rbp-0x8],0x8
  214059:	00 
  21405a:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  21405e:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  214062:	e8 59 f9 ff ff       	call   2139c0 <InStream(ReadError)_readNoEof>
  214067:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  21406b:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  214070:	0f 85 27 ff ff ff    	jne    213f9d <InStream(ReadError)_readInt.33+0x4d>
  214076:	e9 64 ff ff ff       	jmp    213fdf <InStream(ReadError)_readInt.33+0x8f>
  21407b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000214080 <add>:
pub fn mul(comptime T: type, a: T, b: T) (error{Overflow}!T) {
    var answer: T = undefined;
    return if (@mulWithOverflow(T, a, b, &answer)) error.Overflow else answer;
}

pub fn add(comptime T: type, a: T, b: T) (error{Overflow}!T) {
  214080:	55                   	push   rbp
  214081:	48 89 e5             	mov    rbp,rsp
  214084:	53                   	push   rbx
  214085:	48 83 ec 58          	sub    rsp,0x58
  214089:	48 89 f8             	mov    rax,rdi
  21408c:	41 b8 aa 00 00 00    	mov    r8d,0xaa
  214092:	41 b9 08 00 00 00    	mov    r9d,0x8
  214098:	45 89 ca             	mov    r10d,r9d
  21409b:	4c 8d 5d d0          	lea    r11,[rbp-0x30]
  21409f:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  2140a3:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
    var answer: T = undefined;
  2140a7:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  2140ab:	4c 89 df             	mov    rdi,r11
  2140ae:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
  2140b2:	44 89 c6             	mov    esi,r8d
  2140b5:	4c 89 d2             	mov    rdx,r10
  2140b8:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  2140bc:	e8 ef 07 02 00       	call   2348b0 <memset>
    return if (@addWithOverflow(T, a, b, &answer)) error.Overflow else answer;
  2140c1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2140c5:	48 03 45 d8          	add    rax,QWORD PTR [rbp-0x28]
  2140c9:	0f 92 c3             	setb   bl
  2140cc:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  2140d0:	f6 c3 01             	test   bl,0x1
  2140d3:	75 02                	jne    2140d7 <add+0x57>
  2140d5:	eb 0d                	jmp    2140e4 <add+0x64>
  2140d7:	48 8d 05 f2 c6 fe ff 	lea    rax,[rip+0xfffffffffffec6f2]        # 2007d0 <__unnamed_144>
  2140de:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  2140e2:	eb 16                	jmp    2140fa <add+0x7a>
  2140e4:	48 8d 45 e8          	lea    rax,[rbp-0x18]
  2140e8:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  2140ec:	66 c7 45 e8 00 00    	mov    WORD PTR [rbp-0x18],0x0
  2140f2:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  2140f6:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  2140fa:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  2140fe:	66 83 38 00          	cmp    WORD PTR [rax],0x0
  214102:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  214106:	74 0b                	je     214113 <add+0x93>
  214108:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21410c:	e8 7f 7b ff ff       	call   20bc90 <__zig_return_error>
  214111:	eb 02                	jmp    214115 <add+0x95>
  214113:	eb 00                	jmp    214115 <add+0x95>
  214115:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  214119:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  21411c:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  214120:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  214123:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  214127:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  21412b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21412f:	48 83 c4 58          	add    rsp,0x58
  214133:	5b                   	pop    rbx
  214134:	5d                   	pop    rbp
  214135:	c3                   	ret    
  214136:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  21413d:	00 00 00 

0000000000214140 <File_getEndPos>:
    pub fn getEndPos(self: *File) !usize {
  214140:	55                   	push   rbp
  214141:	48 89 e5             	mov    rbp,rsp
  214144:	48 81 ec 10 02 00 00 	sub    rsp,0x210
  21414b:	48 89 f8             	mov    rax,rdi
  21414e:	48 8d 8d 68 ff ff ff 	lea    rcx,[rbp-0x98]
  214155:	48 89 95 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rdx
            const stat = try os.posixFStat(self.handle);
  21415c:	48 8b 95 a8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x158]
  214163:	8b 12                	mov    edx,DWORD PTR [rdx]
  214165:	48 89 bd 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rdi
  21416c:	48 89 cf             	mov    rdi,rcx
  21416f:	48 89 b5 08 fe ff ff 	mov    QWORD PTR [rbp-0x1f8],rsi
  214176:	48 89 85 00 fe ff ff 	mov    QWORD PTR [rbp-0x200],rax
  21417d:	e8 ce 0c 00 00       	call   214e50 <posixFStat>
  214182:	66 83 bd 68 ff ff ff 	cmp    WORD PTR [rbp-0x98],0x0
  214189:	00 
  21418a:	74 54                	je     2141e0 <File_getEndPos+0xa0>
  21418c:	66 8b 85 68 ff ff ff 	mov    ax,WORD PTR [rbp-0x98]
  214193:	48 8b bd 08 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1f8]
  21419a:	66 89 85 fe fd ff ff 	mov    WORD PTR [rbp-0x202],ax
  2141a1:	e8 ea 7a ff ff       	call   20bc90 <__zig_return_error>
  2141a6:	66 8b 85 fe fd ff ff 	mov    ax,WORD PTR [rbp-0x202]
  2141ad:	66 89 85 c0 fe ff ff 	mov    WORD PTR [rbp-0x140],ax
  2141b4:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  2141bb:	48 8b 8d 10 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1f0]
  2141c2:	48 89 39             	mov    QWORD PTR [rcx],rdi
  2141c5:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  2141cc:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  2141d0:	48 8b 85 00 fe ff ff 	mov    rax,QWORD PTR [rbp-0x200]
  2141d7:	48 81 c4 10 02 00 00 	add    rsp,0x210
  2141de:	5d                   	pop    rbp
  2141df:	c3                   	ret    
  2141e0:	b8 90 00 00 00       	mov    eax,0x90
  2141e5:	89 c2                	mov    edx,eax
  2141e7:	48 8d 8d 18 fe ff ff 	lea    rcx,[rbp-0x1e8]
  2141ee:	48 8d b5 68 ff ff ff 	lea    rsi,[rbp-0x98]
  2141f5:	48 83 c6 08          	add    rsi,0x8
  2141f9:	48 89 cf             	mov    rdi,rcx
  2141fc:	e8 ff 06 02 00       	call   234900 <memcpy>
            return @intCast(usize, stat.size);
  214201:	48 8b 8d 48 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1b8]
  214208:	48 83 f9 00          	cmp    rcx,0x0
  21420c:	48 89 8d f0 fd ff ff 	mov    QWORD PTR [rbp-0x210],rcx
  214213:	7c 43                	jl     214258 <File_getEndPos+0x118>
  214215:	66 c7 85 b0 fe ff ff 	mov    WORD PTR [rbp-0x150],0x0
  21421c:	00 00 
  21421e:	48 8b 85 f0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x210]
  214225:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
  21422c:	48 8b 8d b0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x150]
  214233:	48 8b 95 10 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1f0]
  21423a:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  21423d:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  214244:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  214248:	48 8b 85 00 fe ff ff 	mov    rax,QWORD PTR [rbp-0x200]
  21424f:	48 81 c4 10 02 00 00 	add    rsp,0x210
  214256:	5d                   	pop    rbp
  214257:	c3                   	ret    
  214258:	48 8d 3d 29 f0 02 00 	lea    rdi,[rip+0x2f029]        # 243288 <__unnamed_3>
  21425f:	31 c0                	xor    eax,eax
  214261:	89 c6                	mov    esi,eax
  214263:	e8 98 73 ff ff       	call   20b600 <panic>
  214268:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  21426f:	00 

0000000000214270 <File_seekTo>:
    pub fn seekTo(self: *File, pos: usize) !void {
  214270:	55                   	push   rbp
  214271:	48 89 e5             	mov    rbp,rsp
  214274:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  21427b:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  21427f:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  214283:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
                const ipos = try math.cast(isize, pos);
  214287:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  21428b:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  21428f:	48 89 c7             	mov    rdi,rax
  214292:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  214296:	e8 d5 0d 00 00       	call   215070 <cast>
  21429b:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  2142a0:	74 1e                	je     2142c0 <File_seekTo+0x50>
  2142a2:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  2142a6:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  2142aa:	66 89 45 ae          	mov    WORD PTR [rbp-0x52],ax
  2142ae:	e8 dd 79 ff ff       	call   20bc90 <__zig_return_error>
  2142b3:	66 8b 45 ae          	mov    ax,WORD PTR [rbp-0x52]
  2142b7:	48 81 c4 90 00 00 00 	add    rsp,0x90
  2142be:	5d                   	pop    rbp
  2142bf:	c3                   	ret    
  2142c0:	31 c0                	xor    eax,eax
  2142c2:	89 c2                	mov    edx,eax
  2142c4:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  2142c8:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
                const result = posix.lseek(self.handle, ipos, posix.SEEK_SET);
  2142cc:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  2142d0:	8b 39                	mov    edi,DWORD PTR [rcx]
  2142d2:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  2142d6:	e8 f5 05 00 00       	call   2148d0 <lseek>
  2142db:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
                const err = posix.getErrno(result);
  2142df:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  2142e3:	e8 98 8d ff ff       	call   20d080 <getErrno>
  2142e8:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                if (err > 0) {
  2142ec:	48 83 7d b8 00       	cmp    QWORD PTR [rbp-0x48],0x0
  2142f1:	0f 86 dc 00 00 00    	jbe    2143d3 <File_seekTo+0x163>
                    return switch (err) {
  2142f7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  2142fb:	48 89 c1             	mov    rcx,rax
  2142fe:	48 83 e9 06          	sub    rcx,0x6
  214302:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  214306:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
  21430a:	0f 84 8f 00 00 00    	je     21439f <File_seekTo+0x12f>
  214310:	eb 00                	jmp    214312 <File_seekTo+0xa2>
  214312:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  214316:	48 83 e8 09          	sub    rax,0x9
  21431a:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  21431e:	74 4b                	je     21436b <File_seekTo+0xfb>
  214320:	eb 00                	jmp    214322 <File_seekTo+0xb2>
  214322:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  214326:	48 83 e8 16          	sub    rax,0x16
  21432a:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  21432e:	74 48                	je     214378 <File_seekTo+0x108>
  214330:	eb 00                	jmp    214332 <File_seekTo+0xc2>
  214332:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  214336:	48 83 e8 1d          	sub    rax,0x1d
  21433a:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  21433e:	74 52                	je     214392 <File_seekTo+0x122>
  214340:	eb 00                	jmp    214342 <File_seekTo+0xd2>
  214342:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  214346:	48 83 e8 4b          	sub    rax,0x4b
  21434a:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  214351:	74 32                	je     214385 <File_seekTo+0x115>
  214353:	eb 00                	jmp    214355 <File_seekTo+0xe5>
                        else => os.unexpectedErrorPosix(err),
  214355:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  214359:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  21435d:	e8 be 8d ff ff       	call   20d120 <unexpectedErrorPosix>
                    return switch (err) {
  214362:	66 89 85 76 ff ff ff 	mov    WORD PTR [rbp-0x8a],ax
  214369:	eb 41                	jmp    2143ac <File_seekTo+0x13c>
  21436b:	66 b8 1e 00          	mov    ax,0x1e
  21436f:	66 89 85 76 ff ff ff 	mov    WORD PTR [rbp-0x8a],ax
  214376:	eb 34                	jmp    2143ac <File_seekTo+0x13c>
  214378:	66 b8 22 00          	mov    ax,0x22
  21437c:	66 89 85 76 ff ff ff 	mov    WORD PTR [rbp-0x8a],ax
  214383:	eb 27                	jmp    2143ac <File_seekTo+0x13c>
  214385:	66 b8 22 00          	mov    ax,0x22
  214389:	66 89 85 76 ff ff ff 	mov    WORD PTR [rbp-0x8a],ax
  214390:	eb 1a                	jmp    2143ac <File_seekTo+0x13c>
  214392:	66 b8 22 00          	mov    ax,0x22
  214396:	66 89 85 76 ff ff ff 	mov    WORD PTR [rbp-0x8a],ax
  21439d:	eb 0d                	jmp    2143ac <File_seekTo+0x13c>
  21439f:	66 b8 22 00          	mov    ax,0x22
  2143a3:	66 89 85 76 ff ff ff 	mov    WORD PTR [rbp-0x8a],ax
  2143aa:	eb 00                	jmp    2143ac <File_seekTo+0x13c>
  2143ac:	66 8b 85 76 ff ff ff 	mov    ax,WORD PTR [rbp-0x8a]
  2143b3:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  2143b7:	66 89 85 74 ff ff ff 	mov    WORD PTR [rbp-0x8c],ax
  2143be:	e8 cd 78 ff ff       	call   20bc90 <__zig_return_error>
  2143c3:	66 8b 85 74 ff ff ff 	mov    ax,WORD PTR [rbp-0x8c]
  2143ca:	48 81 c4 90 00 00 00 	add    rsp,0x90
  2143d1:	5d                   	pop    rbp
  2143d2:	c3                   	ret    
                if (err > 0) {
  2143d3:	eb 00                	jmp    2143d5 <File_seekTo+0x165>
  2143d5:	31 c0                	xor    eax,eax
  2143d7:	66 89 c1             	mov    cx,ax
    pub fn seekTo(self: *File, pos: usize) !void {
  2143da:	66 89 c8             	mov    ax,cx
  2143dd:	48 81 c4 90 00 00 00 	add    rsp,0x90
  2143e4:	5d                   	pop    rbp
  2143e5:	c3                   	ret    
  2143e6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  2143ed:	00 00 00 

00000000002143f0 <Allocator_alloc.34>:
    pub fn alloc(self: *Allocator, comptime T: type, n: usize) ![]T {
  2143f0:	55                   	push   rbp
  2143f1:	48 89 e5             	mov    rbp,rsp
  2143f4:	48 83 ec 40          	sub    rsp,0x40
  2143f8:	48 89 f8             	mov    rax,rdi
  2143fb:	4c 8d 45 e8          	lea    r8,[rbp-0x18]
  2143ff:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  214403:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
        return self.alignedAlloc(T, @alignOf(T), n);
  214407:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  21440b:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  21440f:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
  214413:	4c 89 c7             	mov    rdi,r8
  214416:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  21441a:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  21441e:	e8 dd 0c 00 00       	call   215100 <Allocator_alignedAlloc>
  214423:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  214428:	74 0b                	je     214435 <Allocator_alloc.34+0x45>
  21442a:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  21442e:	e8 5d 78 ff ff       	call   20bc90 <__zig_return_error>
  214433:	eb 02                	jmp    214437 <Allocator_alloc.34+0x47>
  214435:	eb 00                	jmp    214437 <Allocator_alloc.34+0x47>
  214437:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21443b:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  21443f:	48 89 01             	mov    QWORD PTR [rcx],rax
  214442:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  214446:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21444a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21444e:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  214452:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  214456:	48 83 c4 40          	add    rsp,0x40
  21445a:	5d                   	pop    rbp
  21445b:	c3                   	ret    
  21445c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000214460 <Allocator_free>:
    pub fn free(self: *Allocator, memory: var) void {
  214460:	55                   	push   rbp
  214461:	48 89 e5             	mov    rbp,rsp
  214464:	48 83 ec 60          	sub    rsp,0x60
  214468:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
        const bytes = @sliceToBytes(memory);
  21446c:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  21446f:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  214473:	48 8b 76 08          	mov    rsi,QWORD PTR [rsi+0x8]
  214477:	48 c1 e6 06          	shl    rsi,0x6
  21447b:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21447f:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  214483:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  214487:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21448b:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        if (bytes.len == 0) return;
  21448f:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
  214494:	75 06                	jne    21449c <Allocator_free+0x3c>
  214496:	48 83 c4 60          	add    rsp,0x60
  21449a:	5d                   	pop    rbp
  21449b:	c3                   	ret    
  21449c:	31 c0                	xor    eax,eax
  21449e:	89 c1                	mov    ecx,eax
        const non_const_ptr = @intToPtr([*]u8, @ptrToInt(bytes.ptr));
  2144a0:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  2144a4:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
        self.freeFn(self, non_const_ptr[0..bytes.len]);
  2144a8:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  2144ac:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  2144b0:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  2144b4:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  2144b8:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
  2144bc:	48 39 f1             	cmp    rcx,rsi
  2144bf:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
  2144c3:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
  2144c7:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  2144cb:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  2144cf:	76 10                	jbe    2144e1 <Allocator_free+0x81>
  2144d1:	48 8d 3d 20 ef 02 00 	lea    rdi,[rip+0x2ef20]        # 2433f8 <__unnamed_20>
  2144d8:	31 c0                	xor    eax,eax
  2144da:	89 c6                	mov    esi,eax
  2144dc:	e8 1f 71 ff ff       	call   20b600 <panic>
  2144e1:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
  2144e5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  2144e9:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  2144ed:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  2144f1:	48 83 e9 00          	sub    rcx,0x0
  2144f5:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  2144f9:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  2144fd:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  214501:	ff d1                	call   rcx
    pub fn free(self: *Allocator, memory: var) void {
  214503:	48 83 c4 60          	add    rsp,0x60
  214507:	5d                   	pop    rbp
  214508:	c3                   	ret    
  214509:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000214510 <File_read>:
    pub fn read(self: *File, buffer: []u8) ReadError!usize {
  214510:	55                   	push   rbp
  214511:	48 89 e5             	mov    rbp,rsp
  214514:	48 81 ec c0 00 00 00 	sub    rsp,0xc0
  21451b:	48 89 f8             	mov    rax,rdi
  21451e:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
            var index: usize = 0;
  214522:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
  214529:	00 
  21452a:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  21452e:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
  214532:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
  214536:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
            while (index < buffer.len) {
  21453a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  21453e:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  214542:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  214546:	0f 83 c3 01 00 00    	jae    21470f <File_read+0x1ff>
                const amt_read = posix.read(self.handle, buffer.ptr + index, buffer.len - index);
  21454c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  214550:	8b 38                	mov    edi,DWORD PTR [rax]
  214552:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  214556:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  214559:	48 03 4d c0          	add    rcx,QWORD PTR [rbp-0x40]
  21455d:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
  214561:	48 2b 55 c0          	sub    rdx,QWORD PTR [rbp-0x40]
  214565:	40 0f 92 c6          	setb   sil
  214569:	89 7d 8c             	mov    DWORD PTR [rbp-0x74],edi
  21456c:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
  214570:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
  214577:	40 88 b5 77 ff ff ff 	mov    BYTE PTR [rbp-0x89],sil
  21457e:	0f 82 b9 01 00 00    	jb     21473d <File_read+0x22d>
  214584:	e9 c4 01 00 00       	jmp    21474d <File_read+0x23d>
                    switch (read_err) {
  214589:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  21458d:	48 83 c0 fc          	add    rax,0xfffffffffffffffc
  214591:	48 89 c1             	mov    rcx,rax
  214594:	48 83 e9 12          	sub    rcx,0x12
  214598:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  21459f:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
  2145a6:	77 17                	ja     2145bf <File_read+0xaf>
  2145a8:	48 8d 05 29 c7 fe ff 	lea    rax,[rip+0xfffffffffffec729]        # 200cd8 <__unnamed_181+0x20>
  2145af:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  2145b6:	48 63 14 88          	movsxd rdx,DWORD PTR [rax+rcx*4]
  2145ba:	48 01 c2             	add    rdx,rax
  2145bd:	ff e2                	jmp    rdx
                        else => return os.unexpectedErrorPosix(read_err),
  2145bf:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  2145c3:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  2145c7:	e8 54 8b ff ff       	call   20d120 <unexpectedErrorPosix>
  2145cc:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  2145d0:	66 89 85 5e ff ff ff 	mov    WORD PTR [rbp-0xa2],ax
  2145d7:	e8 b4 76 ff ff       	call   20bc90 <__zig_return_error>
  2145dc:	66 8b 85 5e ff ff ff 	mov    ax,WORD PTR [rbp-0xa2]
  2145e3:	66 89 45 f0          	mov    WORD PTR [rbp-0x10],ax
  2145e7:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  2145eb:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  2145ef:	48 89 37             	mov    QWORD PTR [rdi],rsi
  2145f2:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2145f6:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  2145fa:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  2145fe:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  214605:	5d                   	pop    rbp
  214606:	c3                   	ret    
                        posix.EINTR => continue,
  214607:	e9 2e ff ff ff       	jmp    21453a <File_read+0x2a>
  21460c:	48 8d 3d fd ec 02 00 	lea    rdi,[rip+0x2ecfd]        # 243310 <__unnamed_13>
  214613:	31 c0                	xor    eax,eax
  214615:	89 c6                	mov    esi,eax
                        posix.EINVAL => unreachable,
  214617:	e8 e4 6f ff ff       	call   20b600 <panic>
  21461c:	48 8d 3d ed ec 02 00 	lea    rdi,[rip+0x2eced]        # 243310 <__unnamed_13>
  214623:	31 c0                	xor    eax,eax
  214625:	89 c6                	mov    esi,eax
                        posix.EFAULT => unreachable,
  214627:	e8 d4 6f ff ff       	call   20b600 <panic>
                        posix.EBADF => return error.BadFd,
  21462c:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  214630:	e8 5b 76 ff ff       	call   20bc90 <__zig_return_error>
  214635:	48 8b 3d 04 c2 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffec204]        # 200840 <__unnamed_68>
  21463c:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  214640:	48 89 38             	mov    QWORD PTR [rax],rdi
  214643:	48 8b 3d fe c1 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffec1fe]        # 200848 <__unnamed_68+0x8>
  21464a:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  21464e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  214652:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  214659:	5d                   	pop    rbp
  21465a:	c3                   	ret    
                        posix.EIO => return error.Io,
  21465b:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  21465f:	e8 2c 76 ff ff       	call   20bc90 <__zig_return_error>
  214664:	48 8b 3d 65 c0 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffec065]        # 2006d0 <__unnamed_69>
  21466b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  21466f:	48 89 38             	mov    QWORD PTR [rax],rdi
  214672:	48 8b 3d 5f c0 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffec05f]        # 2006d8 <__unnamed_69+0x8>
  214679:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  21467d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  214681:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  214688:	5d                   	pop    rbp
  214689:	c3                   	ret    
                        posix.EISDIR => return error.IsDir,
  21468a:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  21468e:	e8 fd 75 ff ff       	call   20bc90 <__zig_return_error>
  214693:	48 8b 3d 36 bf fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffebf36]        # 2005d0 <__unnamed_70>
  21469a:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  21469e:	48 89 38             	mov    QWORD PTR [rax],rdi
  2146a1:	48 8b 3d 30 bf fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffebf30]        # 2005d8 <__unnamed_70+0x8>
  2146a8:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  2146ac:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  2146b0:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  2146b7:	5d                   	pop    rbp
  2146b8:	c3                   	ret    
                if (read_err > 0) {
  2146b9:	eb 00                	jmp    2146bb <File_read+0x1ab>
                if (amt_read == 0) return index;
  2146bb:	48 83 7d b8 00       	cmp    QWORD PTR [rbp-0x48],0x0
  2146c0:	75 2e                	jne    2146f0 <File_read+0x1e0>
  2146c2:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  2146c6:	66 c7 45 e0 00 00    	mov    WORD PTR [rbp-0x20],0x0
  2146cc:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  2146d0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2146d4:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  2146d8:	48 89 01             	mov    QWORD PTR [rcx],rax
  2146db:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2146df:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2146e3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  2146e7:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  2146ee:	5d                   	pop    rbp
  2146ef:	c3                   	ret    
                index += amt_read;
  2146f0:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  2146f4:	48 03 45 b8          	add    rax,QWORD PTR [rbp-0x48]
  2146f8:	0f 92 c1             	setb   cl
  2146fb:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
  214702:	88 8d 4f ff ff ff    	mov    BYTE PTR [rbp-0xb1],cl
  214708:	72 77                	jb     214781 <File_read+0x271>
  21470a:	e9 82 00 00 00       	jmp    214791 <File_read+0x281>
            return index;
  21470f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  214713:	66 c7 45 d0 00 00    	mov    WORD PTR [rbp-0x30],0x0
  214719:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  21471d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  214721:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  214725:	48 89 01             	mov    QWORD PTR [rcx],rax
  214728:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21472c:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  214730:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  214734:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  21473b:	5d                   	pop    rbp
  21473c:	c3                   	ret    
  21473d:	48 8d 3d 84 ea 02 00 	lea    rdi,[rip+0x2ea84]        # 2431c8 <__unnamed_4>
  214744:	31 c0                	xor    eax,eax
  214746:	89 c6                	mov    esi,eax
                const amt_read = posix.read(self.handle, buffer.ptr + index, buffer.len - index);
  214748:	e8 b3 6e ff ff       	call   20b600 <panic>
  21474d:	8b 7d 8c             	mov    edi,DWORD PTR [rbp-0x74]
  214750:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  214754:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
  21475b:	e8 50 00 00 00       	call   2147b0 <read>
  214760:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                const read_err = posix.getErrno(amt_read);
  214764:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  214768:	e8 13 89 ff ff       	call   20d080 <getErrno>
  21476d:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
                if (read_err > 0) {
  214771:	48 83 7d b0 00       	cmp    QWORD PTR [rbp-0x50],0x0
  214776:	0f 87 0d fe ff ff    	ja     214589 <File_read+0x79>
  21477c:	e9 38 ff ff ff       	jmp    2146b9 <File_read+0x1a9>
  214781:	48 8d 3d 40 ea 02 00 	lea    rdi,[rip+0x2ea40]        # 2431c8 <__unnamed_4>
  214788:	31 c0                	xor    eax,eax
  21478a:	89 c6                	mov    esi,eax
                index += amt_read;
  21478c:	e8 6f 6e ff ff       	call   20b600 <panic>
  214791:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  214798:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
            while (index < buffer.len) {
  21479c:	e9 99 fd ff ff       	jmp    21453a <File_read+0x2a>
  2147a1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2147a8:	0f 1f 84 00 00 00 00 
  2147af:	00 

00000000002147b0 <read>:
pub fn read(fd: i32, buf: [*]u8, count: usize) usize {
  2147b0:	55                   	push   rbp
  2147b1:	48 89 e5             	mov    rbp,rsp
  2147b4:	48 83 ec 20          	sub    rsp,0x20
  2147b8:	31 c0                	xor    eax,eax
  2147ba:	89 c1                	mov    ecx,eax
  2147bc:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  2147bf:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  2147c3:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    return syscall3(SYS_read, @intCast(usize, fd), @ptrToInt(buf), count);
  2147c7:	48 63 75 fc          	movsxd rsi,DWORD PTR [rbp-0x4]
  2147cb:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  2147cf:	4c 8b 45 e8          	mov    r8,QWORD PTR [rbp-0x18]
  2147d3:	48 89 cf             	mov    rdi,rcx
  2147d6:	4c 89 c1             	mov    rcx,r8
  2147d9:	e8 32 01 00 00       	call   214910 <syscall3>
  2147de:	48 83 c4 20          	add    rsp,0x20
  2147e2:	5d                   	pop    rbp
  2147e3:	c3                   	ret    
  2147e4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2147eb:	00 00 00 00 00 

00000000002147f0 <FileInStream_readFn>:
    fn readFn(in_stream: *Stream, buffer: []u8) Error!usize {
  2147f0:	55                   	push   rbp
  2147f1:	48 89 e5             	mov    rbp,rsp
  2147f4:	48 83 ec 40          	sub    rsp,0x40
  2147f8:	48 89 f8             	mov    rax,rdi
  2147fb:	4c 8d 45 f0          	lea    r8,[rbp-0x10]
  2147ff:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
        const self = @fieldParentPtr(FileInStream, "stream", in_stream);
  214803:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  214807:	48 83 ea 08          	sub    rdx,0x8
  21480b:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
        return self.file.read(buffer);
  21480f:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  214813:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
  214816:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  21481a:	4c 89 c7             	mov    rdi,r8
  21481d:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  214821:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  214825:	e8 e6 fc ff ff       	call   214510 <File_read>
  21482a:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  21482f:	74 0b                	je     21483c <FileInStream_readFn+0x4c>
  214831:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  214835:	e8 56 74 ff ff       	call   20bc90 <__zig_return_error>
  21483a:	eb 02                	jmp    21483e <FileInStream_readFn+0x4e>
  21483c:	eb 00                	jmp    21483e <FileInStream_readFn+0x4e>
  21483e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  214842:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  214846:	48 89 01             	mov    QWORD PTR [rcx],rax
  214849:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21484d:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  214851:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  214855:	48 83 c4 40          	add    rsp,0x40
  214859:	5d                   	pop    rbp
  21485a:	c3                   	ret    
  21485b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000214860 <InStream(ReadError)_read>:
        pub fn read(self: *Self, buffer: []u8) !usize {
  214860:	55                   	push   rbp
  214861:	48 89 e5             	mov    rbp,rsp
  214864:	48 83 ec 40          	sub    rsp,0x40
  214868:	48 89 f8             	mov    rax,rdi
  21486b:	4c 8d 45 f0          	lea    r8,[rbp-0x10]
  21486f:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
            return self.readFn(self, buffer);
  214873:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  214877:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
  21487a:	4c 8b 4d e8          	mov    r9,QWORD PTR [rbp-0x18]
  21487e:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  214882:	4c 89 c7             	mov    rdi,r8
  214885:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  214889:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  21488d:	4c 89 ca             	mov    rdx,r9
  214890:	4c 8b 45 d0          	mov    r8,QWORD PTR [rbp-0x30]
  214894:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  214898:	41 ff d0             	call   r8
  21489b:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  2148a0:	74 0b                	je     2148ad <InStream(ReadError)_read+0x4d>
  2148a2:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  2148a6:	e8 e5 73 ff ff       	call   20bc90 <__zig_return_error>
  2148ab:	eb 02                	jmp    2148af <InStream(ReadError)_read+0x4f>
  2148ad:	eb 00                	jmp    2148af <InStream(ReadError)_read+0x4f>
  2148af:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2148b3:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  2148b7:	48 89 01             	mov    QWORD PTR [rcx],rax
  2148ba:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2148be:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2148c2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2148c6:	48 83 c4 40          	add    rsp,0x40
  2148ca:	5d                   	pop    rbp
  2148cb:	c3                   	ret    
  2148cc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

00000000002148d0 <lseek>:
pub fn lseek(fd: i32, offset: isize, ref_pos: usize) usize {
  2148d0:	55                   	push   rbp
  2148d1:	48 89 e5             	mov    rbp,rsp
  2148d4:	48 83 ec 20          	sub    rsp,0x20
  2148d8:	b8 08 00 00 00       	mov    eax,0x8
  2148dd:	89 c1                	mov    ecx,eax
  2148df:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  2148e2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  2148e6:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    return syscall3(SYS_lseek, @intCast(usize, fd), @bitCast(usize, offset), ref_pos);
  2148ea:	48 63 75 fc          	movsxd rsi,DWORD PTR [rbp-0x4]
  2148ee:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  2148f2:	4c 8b 45 e8          	mov    r8,QWORD PTR [rbp-0x18]
  2148f6:	48 89 cf             	mov    rdi,rcx
  2148f9:	4c 89 c1             	mov    rcx,r8
  2148fc:	e8 0f 00 00 00       	call   214910 <syscall3>
  214901:	48 83 c4 20          	add    rsp,0x20
  214905:	5d                   	pop    rbp
  214906:	c3                   	ret    
  214907:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  21490e:	00 00 

0000000000214910 <syscall3>:
pub fn syscall3(number: usize, arg1: usize, arg2: usize, arg3: usize) usize {
  214910:	55                   	push   rbp
  214911:	48 89 e5             	mov    rbp,rsp
  214914:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  214918:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  21491c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  214920:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
        : [number] "{rax}" (number),
  214924:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
          [arg1] "{rdi}" (arg1),
  214928:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
          [arg2] "{rsi}" (arg2),
  21492c:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
          [arg3] "{rdx}" (arg3)
  214930:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
    return asm volatile ("syscall"
  214934:	0f 05                	syscall 
  214936:	5d                   	pop    rbp
  214937:	c3                   	ret    
  214938:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  21493f:	00 

0000000000214940 <readInt>:

/// Reads an integer from memory with size equal to bytes.len.
/// T specifies the return type, which must be large enough to store
/// the result.
/// See also ::readIntBE or ::readIntLE.
pub fn readInt(bytes: []const u8, comptime T: type, endian: builtin.Endian) T {
  214940:	55                   	push   rbp
  214941:	48 89 e5             	mov    rbp,rsp
  214944:	48 83 ec 70          	sub    rsp,0x70
  214948:	40 88 f0             	mov    al,sil
  21494b:	24 01                	and    al,0x1
  21494d:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
    if (T.bit_count == 8) {
        return bytes[0];
    }
    var result: T = 0;
  214950:	66 c7 45 fc 00 00    	mov    WORD PTR [rbp-0x4],0x0
    switch (endian) {
  214956:	8a 45 ff             	mov    al,BYTE PTR [rbp-0x1]
  214959:	84 c0                	test   al,al
  21495b:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  21495f:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
  214962:	0f 85 86 00 00 00    	jne    2149ee <readInt+0xae>
  214968:	eb 00                	jmp    21496a <readInt+0x2a>
  21496a:	8a 45 d7             	mov    al,BYTE PTR [rbp-0x29]
  21496d:	f6 d0                	not    al
  21496f:	a8 01                	test   al,0x1
  214971:	0f 84 fb 00 00 00    	je     214a72 <readInt+0x132>
  214977:	eb 00                	jmp    214979 <readInt+0x39>
  214979:	48 8d 7d fb          	lea    rdi,[rbp-0x5]
  21497d:	be aa 00 00 00       	mov    esi,0xaa
  214982:	b8 01 00 00 00       	mov    eax,0x1
  214987:	89 c2                	mov    edx,eax
        builtin.Endian.Big => {
            for (bytes) |b| {
  214989:	e8 22 ff 01 00       	call   2348b0 <memset>
  21498e:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  214995:	00 
  214996:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  21499a:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
  21499e:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  2149a2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2149a6:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  2149aa:	48 39 c8             	cmp    rax,rcx
  2149ad:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  2149b1:	73 36                	jae    2149e9 <readInt+0xa9>
  2149b3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2149b7:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  2149ba:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  2149be:	40 8a 34 11          	mov    sil,BYTE PTR [rcx+rdx*1]
  2149c2:	40 88 75 fb          	mov    BYTE PTR [rbp-0x5],sil
                result = (result << 8) | b;
  2149c6:	66 8b 7d fc          	mov    di,WORD PTR [rbp-0x4]
  2149ca:	66 c1 e7 08          	shl    di,0x8
  2149ce:	44 0f b6 45 fb       	movzx  r8d,BYTE PTR [rbp-0x5]
  2149d3:	66 45 89 c1          	mov    r9w,r8w
  2149d7:	66 44 09 cf          	or     di,r9w
  2149db:	66 89 7d fc          	mov    WORD PTR [rbp-0x4],di
            for (bytes) |b| {
  2149df:	48 83 c2 01          	add    rdx,0x1
  2149e3:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  2149e7:	eb b9                	jmp    2149a2 <readInt+0x62>
    switch (endian) {
  2149e9:	e9 94 00 00 00       	jmp    214a82 <readInt+0x142>
  2149ee:	48 8d 7d ef          	lea    rdi,[rbp-0x11]
  2149f2:	be aa 00 00 00       	mov    esi,0xaa
  2149f7:	b8 01 00 00 00       	mov    eax,0x1
  2149fc:	89 c2                	mov    edx,eax
            }
        },
        builtin.Endian.Little => {
            const ShiftType = math.Log2Int(T);
            for (bytes) |b, index| {
  2149fe:	e8 ad fe 01 00       	call   2348b0 <memset>
  214a03:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  214a0a:	00 
  214a0b:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  214a0f:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
  214a13:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
  214a17:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  214a1b:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  214a1f:	48 39 c8             	cmp    rax,rcx
  214a22:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  214a26:	73 48                	jae    214a70 <readInt+0x130>
  214a28:	b8 08 00 00 00       	mov    eax,0x8
  214a2d:	89 c1                	mov    ecx,eax
  214a2f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  214a33:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
  214a36:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  214a3a:	44 8a 04 3e          	mov    r8b,BYTE PTR [rsi+rdi*1]
  214a3e:	44 88 45 ef          	mov    BYTE PTR [rbp-0x11],r8b
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  214a42:	66 44 8b 4d fc       	mov    r9w,WORD PTR [rbp-0x4]
  214a47:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
  214a4b:	66 41 89 c2          	mov    r10w,ax
  214a4f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  214a53:	48 f7 e1             	mul    rcx
  214a56:	41 0f 90 c0          	seto   r8b
  214a5a:	66 44 89 55 ae       	mov    WORD PTR [rbp-0x52],r10w
  214a5f:	66 44 89 4d ac       	mov    WORD PTR [rbp-0x54],r9w
  214a64:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  214a68:	44 88 45 9f          	mov    BYTE PTR [rbp-0x61],r8b
  214a6c:	70 1e                	jo     214a8c <readInt+0x14c>
  214a6e:	eb 2c                	jmp    214a9c <readInt+0x15c>
    switch (endian) {
  214a70:	eb 10                	jmp    214a82 <readInt+0x142>
  214a72:	48 8d 3d 97 e8 02 00 	lea    rdi,[rip+0x2e897]        # 243310 <__unnamed_13>
  214a79:	31 c0                	xor    eax,eax
  214a7b:	89 c6                	mov    esi,eax
  214a7d:	e8 7e 6b ff ff       	call   20b600 <panic>
            }
        },
    }
    return result;
  214a82:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  214a86:	48 83 c4 70          	add    rsp,0x70
  214a8a:	5d                   	pop    rbp
  214a8b:	c3                   	ret    
  214a8c:	48 8d 3d 35 e7 02 00 	lea    rdi,[rip+0x2e735]        # 2431c8 <__unnamed_4>
  214a93:	31 c0                	xor    eax,eax
  214a95:	89 c6                	mov    esi,eax
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  214a97:	e8 64 6b ff ff       	call   20b600 <panic>
  214a9c:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  214aa0:	88 c1                	mov    cl,al
  214aa2:	89 c2                	mov    edx,eax
  214aa4:	83 e2 0f             	and    edx,0xf
  214aa7:	89 d6                	mov    esi,edx
  214aa9:	48 39 f0             	cmp    rax,rsi
  214aac:	88 4d 9e             	mov    BYTE PTR [rbp-0x62],cl
  214aaf:	75 31                	jne    214ae2 <readInt+0x1a2>
  214ab1:	8a 45 9e             	mov    al,BYTE PTR [rbp-0x62]
  214ab4:	24 0f                	and    al,0xf
  214ab6:	0f b6 c8             	movzx  ecx,al
  214ab9:	66 89 ca             	mov    dx,cx
  214abc:	66 89 d1             	mov    cx,dx
  214abf:	66 8b 55 ae          	mov    dx,WORD PTR [rbp-0x52]
  214ac3:	66 d3 e2             	shl    dx,cl
  214ac6:	66 8b 75 ac          	mov    si,WORD PTR [rbp-0x54]
  214aca:	66 09 d6             	or     si,dx
  214acd:	66 89 75 fc          	mov    WORD PTR [rbp-0x4],si
            for (bytes) |b, index| {
  214ad1:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  214ad5:	48 83 c7 01          	add    rdi,0x1
  214ad9:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  214add:	e9 35 ff ff ff       	jmp    214a17 <readInt+0xd7>
  214ae2:	48 8d 3d bf e9 02 00 	lea    rdi,[rip+0x2e9bf]        # 2434a8 <__unnamed_22>
  214ae9:	31 c0                	xor    eax,eax
  214aeb:	89 c6                	mov    esi,eax
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  214aed:	e8 0e 6b ff ff       	call   20b600 <panic>
  214af2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  214af9:	1f 84 00 00 00 00 00 

0000000000214b00 <readInt.35>:
pub fn readInt(bytes: []const u8, comptime T: type, endian: builtin.Endian) T {
  214b00:	55                   	push   rbp
  214b01:	48 89 e5             	mov    rbp,rsp
  214b04:	48 83 ec 70          	sub    rsp,0x70
  214b08:	40 88 f0             	mov    al,sil
  214b0b:	24 01                	and    al,0x1
  214b0d:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
    var result: T = 0;
  214b10:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
    switch (endian) {
  214b17:	8a 45 ff             	mov    al,BYTE PTR [rbp-0x1]
  214b1a:	84 c0                	test   al,al
  214b1c:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
  214b20:	88 45 cf             	mov    BYTE PTR [rbp-0x31],al
  214b23:	75 7e                	jne    214ba3 <readInt.35+0xa3>
  214b25:	eb 00                	jmp    214b27 <readInt.35+0x27>
  214b27:	8a 45 cf             	mov    al,BYTE PTR [rbp-0x31]
  214b2a:	f6 d0                	not    al
  214b2c:	a8 01                	test   al,0x1
  214b2e:	0f 84 ee 00 00 00    	je     214c22 <readInt.35+0x122>
  214b34:	eb 00                	jmp    214b36 <readInt.35+0x36>
  214b36:	48 8d 7d f7          	lea    rdi,[rbp-0x9]
  214b3a:	be aa 00 00 00       	mov    esi,0xaa
  214b3f:	b8 01 00 00 00       	mov    eax,0x1
  214b44:	89 c2                	mov    edx,eax
            for (bytes) |b| {
  214b46:	e8 65 fd 01 00       	call   2348b0 <memset>
  214b4b:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
  214b52:	00 
  214b53:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  214b57:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
  214b5b:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
  214b5f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  214b63:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  214b67:	48 39 c8             	cmp    rax,rcx
  214b6a:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  214b6e:	73 2e                	jae    214b9e <readInt.35+0x9e>
  214b70:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  214b74:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  214b77:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  214b7b:	40 8a 34 11          	mov    sil,BYTE PTR [rcx+rdx*1]
  214b7f:	40 88 75 f7          	mov    BYTE PTR [rbp-0x9],sil
                result = (result << 8) | b;
  214b83:	8b 7d f8             	mov    edi,DWORD PTR [rbp-0x8]
  214b86:	c1 e7 08             	shl    edi,0x8
  214b89:	44 0f b6 45 f7       	movzx  r8d,BYTE PTR [rbp-0x9]
  214b8e:	44 09 c7             	or     edi,r8d
  214b91:	89 7d f8             	mov    DWORD PTR [rbp-0x8],edi
            for (bytes) |b| {
  214b94:	48 83 c2 01          	add    rdx,0x1
  214b98:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  214b9c:	eb c1                	jmp    214b5f <readInt.35+0x5f>
    switch (endian) {
  214b9e:	e9 8f 00 00 00       	jmp    214c32 <readInt.35+0x132>
  214ba3:	48 8d 7d e7          	lea    rdi,[rbp-0x19]
  214ba7:	be aa 00 00 00       	mov    esi,0xaa
  214bac:	b8 01 00 00 00       	mov    eax,0x1
  214bb1:	89 c2                	mov    edx,eax
            for (bytes) |b, index| {
  214bb3:	e8 f8 fc 01 00       	call   2348b0 <memset>
  214bb8:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
  214bbf:	00 
  214bc0:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  214bc4:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
  214bc8:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  214bcc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  214bd0:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  214bd4:	48 39 c8             	cmp    rax,rcx
  214bd7:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  214bdb:	73 43                	jae    214c20 <readInt.35+0x120>
  214bdd:	b8 08 00 00 00       	mov    eax,0x8
  214be2:	89 c1                	mov    ecx,eax
  214be4:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  214be8:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
  214beb:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  214bef:	44 8a 04 3e          	mov    r8b,BYTE PTR [rsi+rdi*1]
  214bf3:	44 88 45 e7          	mov    BYTE PTR [rbp-0x19],r8b
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  214bf7:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  214bfa:	44 0f b6 4d e7       	movzx  r9d,BYTE PTR [rbp-0x19]
  214bff:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  214c03:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
  214c06:	48 89 f0             	mov    rax,rsi
  214c09:	48 f7 e1             	mul    rcx
  214c0c:	41 0f 90 c0          	seto   r8b
  214c10:	44 89 4d a0          	mov    DWORD PTR [rbp-0x60],r9d
  214c14:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  214c18:	44 88 45 97          	mov    BYTE PTR [rbp-0x69],r8b
  214c1c:	70 1d                	jo     214c3b <readInt.35+0x13b>
  214c1e:	eb 2b                	jmp    214c4b <readInt.35+0x14b>
    switch (endian) {
  214c20:	eb 10                	jmp    214c32 <readInt.35+0x132>
  214c22:	48 8d 3d e7 e6 02 00 	lea    rdi,[rip+0x2e6e7]        # 243310 <__unnamed_13>
  214c29:	31 c0                	xor    eax,eax
  214c2b:	89 c6                	mov    esi,eax
  214c2d:	e8 ce 69 ff ff       	call   20b600 <panic>
    return result;
  214c32:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  214c35:	48 83 c4 70          	add    rsp,0x70
  214c39:	5d                   	pop    rbp
  214c3a:	c3                   	ret    
  214c3b:	48 8d 3d 86 e5 02 00 	lea    rdi,[rip+0x2e586]        # 2431c8 <__unnamed_4>
  214c42:	31 c0                	xor    eax,eax
  214c44:	89 c6                	mov    esi,eax
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  214c46:	e8 b5 69 ff ff       	call   20b600 <panic>
  214c4b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  214c4f:	88 c1                	mov    cl,al
  214c51:	89 c2                	mov    edx,eax
  214c53:	83 e2 1f             	and    edx,0x1f
  214c56:	89 d6                	mov    esi,edx
  214c58:	48 39 f0             	cmp    rax,rsi
  214c5b:	88 4d 96             	mov    BYTE PTR [rbp-0x6a],cl
  214c5e:	75 26                	jne    214c86 <readInt.35+0x186>
  214c60:	8a 45 96             	mov    al,BYTE PTR [rbp-0x6a]
  214c63:	24 1f                	and    al,0x1f
  214c65:	0f b6 c8             	movzx  ecx,al
  214c68:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
  214c6b:	d3 e2                	shl    edx,cl
  214c6d:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
  214c70:	09 d6                	or     esi,edx
  214c72:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
            for (bytes) |b, index| {
  214c75:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  214c79:	48 83 c7 01          	add    rdi,0x1
  214c7d:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  214c81:	e9 46 ff ff ff       	jmp    214bcc <readInt.35+0xcc>
  214c86:	48 8d 3d 1b e8 02 00 	lea    rdi,[rip+0x2e81b]        # 2434a8 <__unnamed_22>
  214c8d:	31 c0                	xor    eax,eax
  214c8f:	89 c6                	mov    esi,eax
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  214c91:	e8 6a 69 ff ff       	call   20b600 <panic>
  214c96:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  214c9d:	00 00 00 

0000000000214ca0 <readInt.36>:
pub fn readInt(bytes: []const u8, comptime T: type, endian: builtin.Endian) T {
  214ca0:	55                   	push   rbp
  214ca1:	48 89 e5             	mov    rbp,rsp
  214ca4:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  214cab:	40 88 f0             	mov    al,sil
  214cae:	24 01                	and    al,0x1
  214cb0:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
    var result: T = 0;
  214cb3:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  214cba:	00 
    switch (endian) {
  214cbb:	8a 45 ff             	mov    al,BYTE PTR [rbp-0x1]
  214cbe:	84 c0                	test   al,al
  214cc0:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  214cc4:	88 45 c7             	mov    BYTE PTR [rbp-0x39],al
  214cc7:	0f 85 83 00 00 00    	jne    214d50 <readInt.36+0xb0>
  214ccd:	eb 00                	jmp    214ccf <readInt.36+0x2f>
  214ccf:	8a 45 c7             	mov    al,BYTE PTR [rbp-0x39]
  214cd2:	f6 d0                	not    al
  214cd4:	a8 01                	test   al,0x1
  214cd6:	0f 84 f4 00 00 00    	je     214dd0 <readInt.36+0x130>
  214cdc:	eb 00                	jmp    214cde <readInt.36+0x3e>
  214cde:	48 8d 7d ef          	lea    rdi,[rbp-0x11]
  214ce2:	be aa 00 00 00       	mov    esi,0xaa
  214ce7:	b8 01 00 00 00       	mov    eax,0x1
  214cec:	89 c2                	mov    edx,eax
            for (bytes) |b| {
  214cee:	e8 bd fb 01 00       	call   2348b0 <memset>
  214cf3:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  214cfa:	00 
  214cfb:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  214cff:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
  214d03:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
  214d07:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  214d0b:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  214d0f:	48 39 c8             	cmp    rax,rcx
  214d12:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  214d16:	73 33                	jae    214d4b <readInt.36+0xab>
  214d18:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  214d1c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  214d1f:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  214d23:	40 8a 34 11          	mov    sil,BYTE PTR [rcx+rdx*1]
  214d27:	40 88 75 ef          	mov    BYTE PTR [rbp-0x11],sil
                result = (result << 8) | b;
  214d2b:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  214d2f:	48 c1 e1 08          	shl    rcx,0x8
  214d33:	0f b6 7d ef          	movzx  edi,BYTE PTR [rbp-0x11]
  214d37:	41 89 f8             	mov    r8d,edi
  214d3a:	4c 09 c1             	or     rcx,r8
  214d3d:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
            for (bytes) |b| {
  214d41:	48 83 c2 01          	add    rdx,0x1
  214d45:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  214d49:	eb bc                	jmp    214d07 <readInt.36+0x67>
    switch (endian) {
  214d4b:	e9 90 00 00 00       	jmp    214de0 <readInt.36+0x140>
  214d50:	48 8d 7d df          	lea    rdi,[rbp-0x21]
  214d54:	be aa 00 00 00       	mov    esi,0xaa
  214d59:	b8 01 00 00 00       	mov    eax,0x1
  214d5e:	89 c2                	mov    edx,eax
            for (bytes) |b, index| {
  214d60:	e8 4b fb 01 00       	call   2348b0 <memset>
  214d65:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
  214d6c:	00 
  214d6d:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  214d71:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
  214d75:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  214d79:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  214d7d:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  214d81:	48 39 c8             	cmp    rax,rcx
  214d84:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  214d88:	73 44                	jae    214dce <readInt.36+0x12e>
  214d8a:	b8 08 00 00 00       	mov    eax,0x8
  214d8f:	89 c1                	mov    ecx,eax
  214d91:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  214d95:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
  214d98:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  214d9c:	44 8a 04 3e          	mov    r8b,BYTE PTR [rsi+rdi*1]
  214da0:	44 88 45 df          	mov    BYTE PTR [rbp-0x21],r8b
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  214da4:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  214da8:	0f b6 45 df          	movzx  eax,BYTE PTR [rbp-0x21]
  214dac:	41 89 c1             	mov    r9d,eax
  214daf:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  214db3:	48 f7 e1             	mul    rcx
  214db6:	41 0f 90 c0          	seto   r8b
  214dba:	4c 89 4d 98          	mov    QWORD PTR [rbp-0x68],r9
  214dbe:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
  214dc2:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  214dc6:	44 88 45 87          	mov    BYTE PTR [rbp-0x79],r8b
  214dca:	70 21                	jo     214ded <readInt.36+0x14d>
  214dcc:	eb 2f                	jmp    214dfd <readInt.36+0x15d>
    switch (endian) {
  214dce:	eb 10                	jmp    214de0 <readInt.36+0x140>
  214dd0:	48 8d 3d 39 e5 02 00 	lea    rdi,[rip+0x2e539]        # 243310 <__unnamed_13>
  214dd7:	31 c0                	xor    eax,eax
  214dd9:	89 c6                	mov    esi,eax
  214ddb:	e8 20 68 ff ff       	call   20b600 <panic>
    return result;
  214de0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  214de4:	48 81 c4 80 00 00 00 	add    rsp,0x80
  214deb:	5d                   	pop    rbp
  214dec:	c3                   	ret    
  214ded:	48 8d 3d d4 e3 02 00 	lea    rdi,[rip+0x2e3d4]        # 2431c8 <__unnamed_4>
  214df4:	31 c0                	xor    eax,eax
  214df6:	89 c6                	mov    esi,eax
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  214df8:	e8 03 68 ff ff       	call   20b600 <panic>
  214dfd:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  214e01:	88 c1                	mov    cl,al
  214e03:	89 c2                	mov    edx,eax
  214e05:	83 e2 3f             	and    edx,0x3f
  214e08:	89 d6                	mov    esi,edx
  214e0a:	48 39 f0             	cmp    rax,rsi
  214e0d:	88 4d 86             	mov    BYTE PTR [rbp-0x7a],cl
  214e10:	75 2b                	jne    214e3d <readInt.36+0x19d>
  214e12:	8a 45 86             	mov    al,BYTE PTR [rbp-0x7a]
  214e15:	24 3f                	and    al,0x3f
  214e17:	0f b6 c8             	movzx  ecx,al
  214e1a:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  214e1e:	48 d3 e2             	shl    rdx,cl
  214e21:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  214e25:	48 09 d6             	or     rsi,rdx
  214e28:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
            for (bytes) |b, index| {
  214e2c:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  214e30:	48 83 c2 01          	add    rdx,0x1
  214e34:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  214e38:	e9 3c ff ff ff       	jmp    214d79 <readInt.36+0xd9>
  214e3d:	48 8d 3d 64 e6 02 00 	lea    rdi,[rip+0x2e664]        # 2434a8 <__unnamed_22>
  214e44:	31 c0                	xor    eax,eax
  214e46:	89 c6                	mov    esi,eax
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  214e48:	e8 b3 67 ff ff       	call   20b600 <panic>
  214e4d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000214e50 <posixFStat>:
            else => unreachable,
        }
    }
}

pub fn posixFStat(fd: i32) !posix.Stat {
  214e50:	55                   	push   rbp
  214e51:	48 89 e5             	mov    rbp,rsp
  214e54:	48 81 ec 40 02 00 00 	sub    rsp,0x240
  214e5b:	48 89 f8             	mov    rax,rdi
  214e5e:	48 8d 8d 38 fe ff ff 	lea    rcx,[rbp-0x1c8]
  214e65:	4c 8d 05 ec 3e ff ff 	lea    r8,[rip+0xffffffffffff3eec]        # 208d58 <__unnamed_71>
  214e6c:	41 b9 90 00 00 00    	mov    r9d,0x90
  214e72:	45 89 ca             	mov    r10d,r9d
  214e75:	89 95 cc fe ff ff    	mov    DWORD PTR [rbp-0x134],edx
    var stat: posix.Stat = undefined;
  214e7b:	49 89 cb             	mov    r11,rcx
  214e7e:	48 89 bd 28 fe ff ff 	mov    QWORD PTR [rbp-0x1d8],rdi
  214e85:	4c 89 df             	mov    rdi,r11
  214e88:	48 89 b5 20 fe ff ff 	mov    QWORD PTR [rbp-0x1e0],rsi
  214e8f:	4c 89 c6             	mov    rsi,r8
  214e92:	4c 89 d2             	mov    rdx,r10
  214e95:	48 89 85 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],rax
  214e9c:	48 89 8d 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rcx
  214ea3:	e8 58 fa 01 00       	call   234900 <memcpy>
    const err = posix.getErrno(posix.fstat(fd, &stat));
  214ea8:	8b bd cc fe ff ff    	mov    edi,DWORD PTR [rbp-0x134]
  214eae:	48 8b b5 10 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1f0]
  214eb5:	e8 86 01 00 00       	call   215040 <fstat>
  214eba:	48 89 c7             	mov    rdi,rax
  214ebd:	e8 be 81 ff ff       	call   20d080 <getErrno>
  214ec2:	48 89 85 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rax
    if (err > 0) {
  214ec9:	48 83 bd 30 fe ff ff 	cmp    QWORD PTR [rbp-0x1d0],0x0
  214ed0:	00 
  214ed1:	0f 86 cf 00 00 00    	jbe    214fa6 <posixFStat+0x156>
        return switch (err) {
  214ed7:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  214ede:	48 89 c1             	mov    rcx,rax
  214ee1:	48 83 e9 09          	sub    rcx,0x9
  214ee5:	48 89 85 08 fe ff ff 	mov    QWORD PTR [rbp-0x1f8],rax
  214eec:	48 89 8d 00 fe ff ff 	mov    QWORD PTR [rbp-0x200],rcx
  214ef3:	74 34                	je     214f29 <posixFStat+0xd9>
  214ef5:	eb 00                	jmp    214ef7 <posixFStat+0xa7>
  214ef7:	48 8b 85 08 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1f8]
  214efe:	48 83 e8 0c          	sub    rax,0xc
  214f02:	48 89 85 f8 fd ff ff 	mov    QWORD PTR [rbp-0x208],rax
  214f09:	74 2b                	je     214f36 <posixFStat+0xe6>
  214f0b:	eb 00                	jmp    214f0d <posixFStat+0xbd>
            posix.EBADF => error.BadFd,
            posix.ENOMEM => error.SystemResources,
            else => os.unexpectedErrorPosix(err),
  214f0d:	48 8b b5 30 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1d0]
  214f14:	48 8b bd 20 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1e0]
  214f1b:	e8 00 82 ff ff       	call   20d120 <unexpectedErrorPosix>
        return switch (err) {
  214f20:	66 89 85 f6 fd ff ff 	mov    WORD PTR [rbp-0x20a],ax
  214f27:	eb 1a                	jmp    214f43 <posixFStat+0xf3>
  214f29:	66 b8 1e 00          	mov    ax,0x1e
  214f2d:	66 89 85 f6 fd ff ff 	mov    WORD PTR [rbp-0x20a],ax
  214f34:	eb 0d                	jmp    214f43 <posixFStat+0xf3>
  214f36:	66 b8 04 00          	mov    ax,0x4
  214f3a:	66 89 85 f6 fd ff ff 	mov    WORD PTR [rbp-0x20a],ax
  214f41:	eb 00                	jmp    214f43 <posixFStat+0xf3>
  214f43:	66 8b 85 f6 fd ff ff 	mov    ax,WORD PTR [rbp-0x20a]
  214f4a:	48 8b bd 20 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1e0]
  214f51:	66 89 85 f4 fd ff ff 	mov    WORD PTR [rbp-0x20c],ax
  214f58:	e8 33 6d ff ff       	call   20bc90 <__zig_return_error>
  214f5d:	b9 98 00 00 00       	mov    ecx,0x98
  214f62:	89 ca                	mov    edx,ecx
  214f64:	48 8d bd 68 ff ff ff 	lea    rdi,[rbp-0x98]
  214f6b:	66 8b 85 f4 fd ff ff 	mov    ax,WORD PTR [rbp-0x20c]
  214f72:	66 89 85 68 ff ff ff 	mov    WORD PTR [rbp-0x98],ax
  214f79:	48 8b b5 28 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1d8]
  214f80:	48 89 bd e8 fd ff ff 	mov    QWORD PTR [rbp-0x218],rdi
  214f87:	48 89 f7             	mov    rdi,rsi
  214f8a:	48 8b b5 e8 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x218]
  214f91:	e8 6a f9 01 00       	call   234900 <memcpy>
  214f96:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
  214f9d:	48 81 c4 40 02 00 00 	add    rsp,0x240
  214fa4:	5d                   	pop    rbp
  214fa5:	c3                   	ret    
    if (err > 0) {
  214fa6:	eb 00                	jmp    214fa8 <posixFStat+0x158>
  214fa8:	b8 98 00 00 00       	mov    eax,0x98
  214fad:	89 c2                	mov    edx,eax
  214faf:	48 8d 8d d0 fe ff ff 	lea    rcx,[rbp-0x130]
  214fb6:	b8 90 00 00 00       	mov    eax,0x90
  214fbb:	89 c6                	mov    esi,eax
  214fbd:	48 8d bd 38 fe ff ff 	lea    rdi,[rbp-0x1c8]
        };
    }

    return stat;
  214fc4:	66 c7 85 d0 fe ff ff 	mov    WORD PTR [rbp-0x130],0x0
  214fcb:	00 00 
  214fcd:	49 89 c8             	mov    r8,rcx
  214fd0:	49 83 c0 08          	add    r8,0x8
  214fd4:	48 89 bd e0 fd ff ff 	mov    QWORD PTR [rbp-0x220],rdi
  214fdb:	4c 89 c7             	mov    rdi,r8
  214fde:	4c 8b 85 e0 fd ff ff 	mov    r8,QWORD PTR [rbp-0x220]
  214fe5:	48 89 b5 d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rsi
  214fec:	4c 89 c6             	mov    rsi,r8
  214fef:	4c 8b 8d d8 fd ff ff 	mov    r9,QWORD PTR [rbp-0x228]
  214ff6:	48 89 95 d0 fd ff ff 	mov    QWORD PTR [rbp-0x230],rdx
  214ffd:	4c 89 ca             	mov    rdx,r9
  215000:	48 89 8d c8 fd ff ff 	mov    QWORD PTR [rbp-0x238],rcx
  215007:	e8 f4 f8 01 00       	call   234900 <memcpy>
  21500c:	48 8b 8d c8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x238]
  215013:	48 8b 95 28 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d8]
  21501a:	48 89 d7             	mov    rdi,rdx
  21501d:	48 89 ce             	mov    rsi,rcx
  215020:	48 8b 95 d0 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x230]
  215027:	e8 d4 f8 01 00       	call   234900 <memcpy>
  21502c:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
  215033:	48 81 c4 40 02 00 00 	add    rsp,0x240
  21503a:	5d                   	pop    rbp
  21503b:	c3                   	ret    
  21503c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000215040 <fstat>:

pub fn accept4(fd: i32, noalias addr: *sockaddr, noalias len: *socklen_t, flags: u32) usize {
    return syscall4(SYS_accept4, @intCast(usize, fd), @ptrToInt(addr), @ptrToInt(len), flags);
}

pub fn fstat(fd: i32, stat_buf: *Stat) usize {
  215040:	55                   	push   rbp
  215041:	48 89 e5             	mov    rbp,rsp
  215044:	48 83 ec 10          	sub    rsp,0x10
  215048:	b8 05 00 00 00       	mov    eax,0x5
  21504d:	89 c1                	mov    ecx,eax
  21504f:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  215052:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    return syscall2(SYS_fstat, @intCast(usize, fd), @ptrToInt(stat_buf));
  215056:	48 63 75 fc          	movsxd rsi,DWORD PTR [rbp-0x4]
  21505a:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21505e:	48 89 cf             	mov    rdi,rcx
  215061:	e8 fa 93 ff ff       	call   20e460 <syscall2>
  215066:	48 83 c4 10          	add    rsp,0x10
  21506a:	5d                   	pop    rbp
  21506b:	c3                   	ret    
  21506c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000215070 <cast>:
    if (negateCast(u32(@maxValue(i32) + 10))) |_| unreachable else |err| assert(err == error.Overflow);
}

/// Cast an integer to a different integer type. If the value doesn't fit,
/// return an error.
pub fn cast(comptime T: type, x: var) (error{Overflow}!T) {
  215070:	55                   	push   rbp
  215071:	48 89 e5             	mov    rbp,rsp
  215074:	48 83 ec 30          	sub    rsp,0x30
  215078:	48 89 f8             	mov    rax,rdi
  21507b:	48 b9 ff ff ff ff ff 	movabs rcx,0x7fffffffffffffff
  215082:	ff ff 7f 
  215085:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    comptime assert(@typeId(T) == builtin.TypeId.Int); // must pass an integer
    comptime assert(@typeId(@typeOf(x)) == builtin.TypeId.Int); // must pass an integer
    if (@maxValue(@typeOf(x)) > @maxValue(T) and x > @maxValue(T)) {
  215089:	48 39 4d e8          	cmp    QWORD PTR [rbp-0x18],rcx
  21508d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  215091:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  215095:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  215099:	76 2c                	jbe    2150c7 <cast+0x57>
        return error.Overflow;
  21509b:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  21509f:	e8 ec 6b ff ff       	call   20bc90 <__zig_return_error>
  2150a4:	48 8b 3d 25 b7 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffeb725]        # 2007d0 <__unnamed_144>
  2150ab:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2150af:	48 89 38             	mov    QWORD PTR [rax],rdi
  2150b2:	48 8b 3d 1f b7 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffeb71f]        # 2007d8 <__unnamed_144+0x8>
  2150b9:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  2150bd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2150c1:	48 83 c4 30          	add    rsp,0x30
  2150c5:	5d                   	pop    rbp
  2150c6:	c3                   	ret    
    } else if (@minValue(@typeOf(x)) < @minValue(T) and x < @minValue(T)) {
        return error.Overflow;
    } else {
        return @intCast(T, x);
  2150c7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2150cb:	66 c7 45 f0 00 00    	mov    WORD PTR [rbp-0x10],0x0
  2150d1:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  2150d5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2150d9:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  2150dd:	48 89 01             	mov    QWORD PTR [rcx],rax
  2150e0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2150e4:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2150e8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2150ec:	48 83 c4 30          	add    rsp,0x30
  2150f0:	5d                   	pop    rbp
  2150f1:	c3                   	ret    
  2150f2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2150f9:	1f 84 00 00 00 00 00 

0000000000215100 <Allocator_alignedAlloc>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  215100:	55                   	push   rbp
  215101:	48 89 e5             	mov    rbp,rsp
  215104:	48 81 ec 20 01 00 00 	sub    rsp,0x120
  21510b:	48 89 f8             	mov    rax,rdi
  21510e:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  215115:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  21511c:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  215123:	00 
  215124:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  21512b:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  215132:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  215139:	75 37                	jne    215172 <Allocator_alignedAlloc+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  21513b:	48 8b 05 a6 3c ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff3ca6]        # 208de8 <__unnamed_73>
  215142:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  215149:	48 89 01             	mov    QWORD PTR [rcx],rax
  21514c:	48 8b 05 9d 3c ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff3c9d]        # 208df0 <__unnamed_73+0x8>
  215153:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  215157:	48 8b 05 9a 3c ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff3c9a]        # 208df8 <__unnamed_73+0x10>
  21515e:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  215162:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  215169:	48 81 c4 20 01 00 00 	add    rsp,0x120
  215170:	5d                   	pop    rbp
  215171:	c3                   	ret    
        if (n == 0) {
  215172:	eb 00                	jmp    215174 <Allocator_alignedAlloc+0x74>
  215174:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  215178:	b8 40 00 00 00       	mov    eax,0x40
  21517d:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  21517f:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  215186:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21518d:	e8 7e 02 00 00       	call   215410 <mul>
  215192:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  215197:	74 43                	je     2151dc <Allocator_alignedAlloc+0xdc>
  215199:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  2151a0:	e8 eb 6a ff ff       	call   20bc90 <__zig_return_error>
  2151a5:	48 8b 3d 54 3c ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff3c54]        # 208e00 <__unnamed_74>
  2151ac:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  2151b3:	48 89 38             	mov    QWORD PTR [rax],rdi
  2151b6:	48 8b 3d 4b 3c ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff3c4b]        # 208e08 <__unnamed_74+0x8>
  2151bd:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  2151c1:	48 8b 3d 48 3c ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff3c48]        # 208e10 <__unnamed_74+0x10>
  2151c8:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  2151cc:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  2151d3:	48 81 c4 20 01 00 00 	add    rsp,0x120
  2151da:	5d                   	pop    rbp
  2151db:	c3                   	ret    
  2151dc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2151e0:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  2151e7:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  2151eb:	41 b8 04 00 00 00    	mov    r8d,0x4
  2151f1:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  2151f8:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  2151ff:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  215206:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  215209:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  215210:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  215217:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  21521e:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  215225:	4c 89 ce             	mov    rsi,r9
  215228:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  21522f:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  215236:	4c 89 d1             	mov    rcx,r10
  215239:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  215240:	41 ff d3             	call   r11
  215243:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  215248:	74 50                	je     21529a <Allocator_alignedAlloc+0x19a>
  21524a:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  21524e:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  215255:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  21525c:	e8 2f 6a ff ff       	call   20bc90 <__zig_return_error>
  215261:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  215268:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  21526c:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  215270:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  215277:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21527a:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  21527e:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  215282:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  215286:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  21528a:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  215291:	48 81 c4 20 01 00 00 	add    rsp,0x120
  215298:	5d                   	pop    rbp
  215299:	c3                   	ret    
  21529a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  21529e:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  2152a5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2152a9:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  2152b0:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  2152b7:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  2152be:	0f 94 c1             	sete   cl
  2152c1:	0f b6 f9             	movzx  edi,cl
  2152c4:	e8 37 5d ff ff       	call   20b000 <assert>
  2152c9:	be aa 00 00 00       	mov    esi,0xaa
  2152ce:	bf 08 00 00 00       	mov    edi,0x8
  2152d3:	89 fa                	mov    edx,edi
  2152d5:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  2152dc:	48 89 c7             	mov    rdi,rax
  2152df:	e8 cc f5 01 00       	call   2348b0 <memset>
  2152e4:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  2152eb:	00 00 00 00 
  2152ef:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  2152f6:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  2152fd:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  215304:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  21530b:	48 39 c8             	cmp    rax,rcx
  21530e:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  215315:	73 32                	jae    215349 <Allocator_alignedAlloc+0x249>
  215317:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21531e:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  215325:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  21532c:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  215333:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  215335:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21533c:	48 83 c1 01          	add    rcx,0x1
  215340:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  215347:	eb b4                	jmp    2152fd <Allocator_alignedAlloc+0x1fd>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  215349:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  215350:	48 83 e0 03          	and    rax,0x3
  215354:	48 83 f8 00          	cmp    rax,0x0
  215358:	75 28                	jne    215382 <Allocator_alignedAlloc+0x282>
  21535a:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  215361:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  215365:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  21536c:	48 89 c1             	mov    rcx,rax
  21536f:	48 83 e1 3f          	and    rcx,0x3f
  215373:	48 83 f9 00          	cmp    rcx,0x0
  215377:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  21537e:	74 12                	je     215392 <Allocator_alignedAlloc+0x292>
  215380:	eb 6f                	jmp    2153f1 <Allocator_alignedAlloc+0x2f1>
  215382:	48 8d 3d 47 e2 02 00 	lea    rdi,[rip+0x2e247]        # 2435d0 <__unnamed_75>
  215389:	31 c0                	xor    eax,eax
  21538b:	89 c6                	mov    esi,eax
  21538d:	e8 6e 62 ff ff       	call   20b600 <panic>
  215392:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  215399:	48 c1 e8 06          	shr    rax,0x6
  21539d:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  2153a1:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  2153a8:	00 00 
  2153aa:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  2153ae:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  2153b5:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  2153b9:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  2153bd:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  2153c4:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  2153cb:	48 89 01             	mov    QWORD PTR [rcx],rax
  2153ce:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  2153d5:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2153d9:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  2153dd:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  2153e1:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  2153e8:	48 81 c4 20 01 00 00 	add    rsp,0x120
  2153ef:	5d                   	pop    rbp
  2153f0:	c3                   	ret    
  2153f1:	48 8d 3d f0 e1 02 00 	lea    rdi,[rip+0x2e1f0]        # 2435e8 <__unnamed_76>
  2153f8:	31 c0                	xor    eax,eax
  2153fa:	89 c6                	mov    esi,eax
  2153fc:	e8 ff 61 ff ff       	call   20b600 <panic>
  215401:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  215408:	0f 1f 84 00 00 00 00 
  21540f:	00 

0000000000215410 <mul>:
pub fn mul(comptime T: type, a: T, b: T) (error{Overflow}!T) {
  215410:	55                   	push   rbp
  215411:	48 89 e5             	mov    rbp,rsp
  215414:	53                   	push   rbx
  215415:	48 83 ec 58          	sub    rsp,0x58
  215419:	48 89 f8             	mov    rax,rdi
  21541c:	41 b8 aa 00 00 00    	mov    r8d,0xaa
  215422:	41 b9 08 00 00 00    	mov    r9d,0x8
  215428:	45 89 ca             	mov    r10d,r9d
  21542b:	4c 8d 5d d0          	lea    r11,[rbp-0x30]
  21542f:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  215433:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
    var answer: T = undefined;
  215437:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  21543b:	4c 89 df             	mov    rdi,r11
  21543e:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
  215442:	44 89 c6             	mov    esi,r8d
  215445:	4c 89 d2             	mov    rdx,r10
  215448:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  21544c:	e8 5f f4 01 00       	call   2348b0 <memset>
    return if (@mulWithOverflow(T, a, b, &answer)) error.Overflow else answer;
  215451:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  215455:	48 f7 65 d8          	mul    QWORD PTR [rbp-0x28]
  215459:	0f 90 c3             	seto   bl
  21545c:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  215460:	f6 c3 01             	test   bl,0x1
  215463:	75 02                	jne    215467 <mul+0x57>
  215465:	eb 0d                	jmp    215474 <mul+0x64>
  215467:	48 8d 05 62 b3 fe ff 	lea    rax,[rip+0xfffffffffffeb362]        # 2007d0 <__unnamed_144>
  21546e:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  215472:	eb 16                	jmp    21548a <mul+0x7a>
  215474:	48 8d 45 e8          	lea    rax,[rbp-0x18]
  215478:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  21547c:	66 c7 45 e8 00 00    	mov    WORD PTR [rbp-0x18],0x0
  215482:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  215486:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  21548a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  21548e:	66 83 38 00          	cmp    WORD PTR [rax],0x0
  215492:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  215496:	74 0b                	je     2154a3 <mul+0x93>
  215498:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21549c:	e8 ef 67 ff ff       	call   20bc90 <__zig_return_error>
  2154a1:	eb 02                	jmp    2154a5 <mul+0x95>
  2154a3:	eb 00                	jmp    2154a5 <mul+0x95>
  2154a5:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  2154a9:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  2154ac:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  2154b0:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  2154b3:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  2154b7:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  2154bb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  2154bf:	48 83 c4 58          	add    rsp,0x58
  2154c3:	5b                   	pop    rbx
  2154c4:	5d                   	pop    rbp
  2154c5:	c3                   	ret    
  2154c6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  2154cd:	00 00 00 

00000000002154d0 <close>:
pub fn close(handle: FileHandle) void {
  2154d0:	55                   	push   rbp
  2154d1:	48 89 e5             	mov    rbp,rsp
  2154d4:	48 83 ec 40          	sub    rsp,0x40
  2154d8:	89 7d f4             	mov    DWORD PTR [rbp-0xc],edi
            const err = posix.getErrno(posix.close(handle));
  2154db:	8b 7d f4             	mov    edi,DWORD PTR [rbp-0xc]
  2154de:	e8 cd 24 01 00       	call   2279b0 <close.98>
  2154e3:	48 89 c7             	mov    rdi,rax
  2154e6:	e8 95 7b ff ff       	call   20d080 <getErrno>
  2154eb:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
            switch (err) {
  2154ef:	48 83 7d e8 04       	cmp    QWORD PTR [rbp-0x18],0x4
  2154f4:	0f 84 a9 00 00 00    	je     2155a3 <close+0xd3>
  2154fa:	48 8d 3d 4f eb 02 00 	lea    rdi,[rip+0x2eb4f]        # 244050 <emfile_promise_queue>
                    if (emfile_promise_queue.popFirst()) |p| resume p.data;
  215501:	e8 da 24 01 00       	call   2279e0 <BaseLinkedList(promise,void,(struct []const u8 constant))_popFirst>
  215506:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  21550a:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
  21550f:	0f 84 88 00 00 00    	je     21559d <close+0xcd>
  215515:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  215519:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  21551d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  215521:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  215525:	48 89 c1             	mov    rcx,rax
  215528:	48 83 c1 10          	add    rcx,0x10
  21552c:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  215530:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  215534:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  215538:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
  21553c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  215540:	48 89 c1             	mov    rcx,rax
  215543:	48 83 e1 fd          	and    rcx,0xfffffffffffffffd
  215547:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  21554b:	f0 48 0f b1 0a       	lock cmpxchg QWORD PTR [rdx],rcx
  215550:	40 0f 94 c6          	sete   sil
  215554:	40 f6 c6 01          	test   sil,0x1
  215558:	48 89 c1             	mov    rcx,rax
  21555b:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  21555f:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  215563:	75 02                	jne    215567 <close+0x97>
  215565:	eb d5                	jmp    21553c <close+0x6c>
  215567:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  21556b:	48 83 e0 01          	and    rax,0x1
  21556f:	48 83 f8 00          	cmp    rax,0x0
  215573:	75 28                	jne    21559d <close+0xcd>
  215575:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  215579:	48 83 e0 02          	and    rax,0x2
  21557d:	48 83 f8 00          	cmp    rax,0x0
  215581:	75 10                	jne    215593 <close+0xc3>
  215583:	48 8d 3d 86 dd 02 00 	lea    rdi,[rip+0x2dd86]        # 243310 <__unnamed_13>
  21558a:	31 c0                	xor    eax,eax
  21558c:	89 c6                	mov    esi,eax
  21558e:	e8 6d 60 ff ff       	call   20b600 <panic>
  215593:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  215597:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21559b:	ff 10                	call   QWORD PTR [rax]
                    return;
  21559d:	48 83 c4 40          	add    rsp,0x40
  2155a1:	5d                   	pop    rbp
  2155a2:	c3                   	ret    
                posix.EINTR => continue,
  2155a3:	e9 33 ff ff ff       	jmp    2154db <close+0xb>
  2155a8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  2155af:	00 

00000000002155b0 <readInitialLength>:
fn readInitialLength(comptime E: type, in_stream: *io.InStream(E), is_64: *bool) !u64 {
  2155b0:	55                   	push   rbp
  2155b1:	48 89 e5             	mov    rbp,rsp
  2155b4:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  2155bb:	48 89 f8             	mov    rax,rdi
  2155be:	4c 8d 45 f8          	lea    r8,[rbp-0x8]
  2155c2:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  2155c6:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
    const first_32_bits = try in_stream.readIntLe(u32);
  2155ca:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  2155ce:	48 89 7d a0          	mov    QWORD PTR [rbp-0x60],rdi
  2155d2:	4c 89 c7             	mov    rdi,r8
  2155d5:	48 89 75 98          	mov    QWORD PTR [rbp-0x68],rsi
  2155d9:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  2155dd:	e8 9e 10 00 00       	call   216680 <InStream(ReadError)_readIntLe>
  2155e2:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  2155e7:	74 39                	je     215622 <readInitialLength+0x72>
  2155e9:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  2155ed:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  2155f1:	66 89 45 8e          	mov    WORD PTR [rbp-0x72],ax
  2155f5:	e8 96 66 ff ff       	call   20bc90 <__zig_return_error>
  2155fa:	66 8b 45 8e          	mov    ax,WORD PTR [rbp-0x72]
  2155fe:	66 89 45 e0          	mov    WORD PTR [rbp-0x20],ax
  215602:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  215606:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  21560a:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21560d:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  215611:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  215615:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  215619:	48 81 c4 80 00 00 00 	add    rsp,0x80
  215620:	5d                   	pop    rbp
  215621:	c3                   	ret    
  215622:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  215625:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
    is_64.* = (first_32_bits == 0xffffffff);
  215628:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  21562c:	83 7d ac ff          	cmp    DWORD PTR [rbp-0x54],0xffffffff
  215630:	0f 94 c2             	sete   dl
  215633:	80 e2 01             	and    dl,0x1
  215636:	88 11                	mov    BYTE PTR [rcx],dl
    if (is_64.*) {
  215638:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  21563c:	f6 01 01             	test   BYTE PTR [rcx],0x1
  21563f:	75 02                	jne    215643 <readInitialLength+0x93>
  215641:	eb 45                	jmp    215688 <readInitialLength+0xd8>
  215643:	48 8d 7d d0          	lea    rdi,[rbp-0x30]
        return in_stream.readIntLe(u64);
  215647:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  21564b:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  21564f:	e8 8c 10 00 00       	call   2166e0 <InStream(ReadError)_readIntLe.38>
  215654:	66 83 7d d0 00       	cmp    WORD PTR [rbp-0x30],0x0
  215659:	74 0b                	je     215666 <readInitialLength+0xb6>
  21565b:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  21565f:	e8 2c 66 ff ff       	call   20bc90 <__zig_return_error>
  215664:	eb 02                	jmp    215668 <readInitialLength+0xb8>
  215666:	eb 00                	jmp    215668 <readInitialLength+0xb8>
  215668:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  21566c:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  215670:	48 89 01             	mov    QWORD PTR [rcx],rax
  215673:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  215677:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21567b:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  21567f:	48 81 c4 80 00 00 00 	add    rsp,0x80
  215686:	5d                   	pop    rbp
  215687:	c3                   	ret    
        if (first_32_bits >= 0xfffffff0) return error.InvalidDebugInfo;
  215688:	83 7d ac f0          	cmp    DWORD PTR [rbp-0x54],0xfffffff0
  21568c:	72 2f                	jb     2156bd <readInitialLength+0x10d>
  21568e:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  215692:	e8 f9 65 ff ff       	call   20bc90 <__zig_return_error>
  215697:	48 8b 3d b2 ab fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffeabb2]        # 200250 <__unnamed_131>
  21569e:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2156a2:	48 89 38             	mov    QWORD PTR [rax],rdi
  2156a5:	48 8b 3d ac ab fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffeabac]        # 200258 <__unnamed_131+0x8>
  2156ac:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  2156b0:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  2156b4:	48 81 c4 80 00 00 00 	add    rsp,0x80
  2156bb:	5d                   	pop    rbp
  2156bc:	c3                   	ret    
  2156bd:	eb 00                	jmp    2156bf <readInitialLength+0x10f>
        return u64(first_32_bits);
  2156bf:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
  2156c2:	89 c1                	mov    ecx,eax
  2156c4:	66 c7 45 c0 00 00    	mov    WORD PTR [rbp-0x40],0x0
  2156ca:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  2156ce:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  2156d2:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  2156d6:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  2156d9:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  2156dd:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  2156e1:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  2156e5:	48 81 c4 80 00 00 00 	add    rsp,0x80
  2156ec:	5d                   	pop    rbp
  2156ed:	c3                   	ret    
  2156ee:	66 90                	xchg   ax,ax

00000000002156f0 <File_getPos>:
    pub fn getPos(self: *File) !usize {
  2156f0:	55                   	push   rbp
  2156f1:	48 89 e5             	mov    rbp,rsp
  2156f4:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  2156fb:	48 89 f8             	mov    rax,rdi
  2156fe:	31 c9                	xor    ecx,ecx
  215700:	41 89 c8             	mov    r8d,ecx
  215703:	b9 01 00 00 00       	mov    ecx,0x1
  215708:	41 89 c9             	mov    r9d,ecx
  21570b:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
                const result = posix.lseek(self.handle, 0, posix.SEEK_CUR);
  21570f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  215713:	8b 0a                	mov    ecx,DWORD PTR [rdx]
  215715:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
  215719:	89 cf                	mov    edi,ecx
  21571b:	48 89 75 b8          	mov    QWORD PTR [rbp-0x48],rsi
  21571f:	4c 89 c6             	mov    rsi,r8
  215722:	4c 89 ca             	mov    rdx,r9
  215725:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  215729:	e8 a2 f1 ff ff       	call   2148d0 <lseek>
  21572e:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
                const err = posix.getErrno(result);
  215732:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  215736:	e8 45 79 ff ff       	call   20d080 <getErrno>
  21573b:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
                if (err > 0) {
  21573f:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
  215744:	0f 86 f4 00 00 00    	jbe    21583e <File_getPos+0x14e>
                    return switch (err) {
  21574a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21574e:	48 89 c1             	mov    rcx,rax
  215751:	48 83 e9 06          	sub    rcx,0x6
  215755:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  215759:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
  21575d:	0f 84 8c 00 00 00    	je     2157ef <File_getPos+0xff>
  215763:	eb 00                	jmp    215765 <File_getPos+0x75>
  215765:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  215769:	48 83 e8 09          	sub    rax,0x9
  21576d:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  215771:	74 48                	je     2157bb <File_getPos+0xcb>
  215773:	eb 00                	jmp    215775 <File_getPos+0x85>
  215775:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  215779:	48 83 e8 16          	sub    rax,0x16
  21577d:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  215781:	74 45                	je     2157c8 <File_getPos+0xd8>
  215783:	eb 00                	jmp    215785 <File_getPos+0x95>
  215785:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  215789:	48 83 e8 1d          	sub    rax,0x1d
  21578d:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  215791:	74 4f                	je     2157e2 <File_getPos+0xf2>
  215793:	eb 00                	jmp    215795 <File_getPos+0xa5>
  215795:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  215799:	48 83 e8 4b          	sub    rax,0x4b
  21579d:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  2157a1:	74 32                	je     2157d5 <File_getPos+0xe5>
  2157a3:	eb 00                	jmp    2157a5 <File_getPos+0xb5>
                        else => os.unexpectedErrorPosix(err),
  2157a5:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  2157a9:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  2157ad:	e8 6e 79 ff ff       	call   20d120 <unexpectedErrorPosix>
                    return switch (err) {
  2157b2:	66 89 85 7e ff ff ff 	mov    WORD PTR [rbp-0x82],ax
  2157b9:	eb 41                	jmp    2157fc <File_getPos+0x10c>
  2157bb:	66 b8 1e 00          	mov    ax,0x1e
  2157bf:	66 89 85 7e ff ff ff 	mov    WORD PTR [rbp-0x82],ax
  2157c6:	eb 34                	jmp    2157fc <File_getPos+0x10c>
  2157c8:	66 b8 22 00          	mov    ax,0x22
  2157cc:	66 89 85 7e ff ff ff 	mov    WORD PTR [rbp-0x82],ax
  2157d3:	eb 27                	jmp    2157fc <File_getPos+0x10c>
  2157d5:	66 b8 22 00          	mov    ax,0x22
  2157d9:	66 89 85 7e ff ff ff 	mov    WORD PTR [rbp-0x82],ax
  2157e0:	eb 1a                	jmp    2157fc <File_getPos+0x10c>
  2157e2:	66 b8 22 00          	mov    ax,0x22
  2157e6:	66 89 85 7e ff ff ff 	mov    WORD PTR [rbp-0x82],ax
  2157ed:	eb 0d                	jmp    2157fc <File_getPos+0x10c>
  2157ef:	66 b8 22 00          	mov    ax,0x22
  2157f3:	66 89 85 7e ff ff ff 	mov    WORD PTR [rbp-0x82],ax
  2157fa:	eb 00                	jmp    2157fc <File_getPos+0x10c>
  2157fc:	66 8b 85 7e ff ff ff 	mov    ax,WORD PTR [rbp-0x82]
  215803:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  215807:	66 89 85 7c ff ff ff 	mov    WORD PTR [rbp-0x84],ax
  21580e:	e8 7d 64 ff ff       	call   20bc90 <__zig_return_error>
  215813:	66 8b 85 7c ff ff ff 	mov    ax,WORD PTR [rbp-0x84]
  21581a:	66 89 45 f0          	mov    WORD PTR [rbp-0x10],ax
  21581e:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  215822:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  215826:	48 89 39             	mov    QWORD PTR [rcx],rdi
  215829:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  21582d:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  215831:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  215835:	48 81 c4 90 00 00 00 	add    rsp,0x90
  21583c:	5d                   	pop    rbp
  21583d:	c3                   	ret    
                if (err > 0) {
  21583e:	eb 00                	jmp    215840 <File_getPos+0x150>
                return result;
  215840:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  215844:	66 c7 45 e0 00 00    	mov    WORD PTR [rbp-0x20],0x0
  21584a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  21584e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  215852:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  215856:	48 89 01             	mov    QWORD PTR [rcx],rax
  215859:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21585d:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  215861:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  215865:	48 81 c4 90 00 00 00 	add    rsp,0x90
  21586c:	5d                   	pop    rbp
  21586d:	c3                   	ret    
  21586e:	66 90                	xchg   ax,ax

0000000000215870 <getAbbrevTable>:
fn getAbbrevTable(st: *ElfStackTrace, abbrev_offset: u64) !*const AbbrevTable {
  215870:	55                   	push   rbp
  215871:	48 89 e5             	mov    rbp,rsp
  215874:	48 81 ec 90 01 00 00 	sub    rsp,0x190
  21587b:	48 89 f8             	mov    rax,rdi
  21587e:	4c 8d 45 f0          	lea    r8,[rbp-0x10]
  215882:	48 89 95 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rdx
  215889:	48 89 8d f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rcx
    for (st.abbrev_table_list.toSlice()) |*header| {
  215890:	48 8b 8d 00 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x100]
  215897:	48 81 c1 88 00 00 00 	add    rcx,0x88
  21589e:	48 89 bd e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rdi
  2158a5:	4c 89 c7             	mov    rdi,r8
  2158a8:	48 89 b5 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rsi
  2158af:	48 89 ce             	mov    rsi,rcx
  2158b2:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  2158b9:	e8 92 0e 00 00       	call   216750 <AlignedArrayList(AbbrevTableHeader,8)_toSlice>
  2158be:	be aa 00 00 00       	mov    esi,0xaa
  2158c3:	41 b9 08 00 00 00    	mov    r9d,0x8
  2158c9:	44 89 ca             	mov    edx,r9d
  2158cc:	48 8d 85 f0 fe ff ff 	lea    rax,[rbp-0x110]
  2158d3:	48 89 c7             	mov    rdi,rax
  2158d6:	e8 d5 ef 01 00       	call   2348b0 <memset>
  2158db:	48 c7 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],0x0
  2158e2:	00 00 00 00 
  2158e6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2158ea:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
  2158f1:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  2158f8:	48 8b 8d c8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x138]
  2158ff:	48 39 c8             	cmp    rax,rcx
  215902:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
  215909:	73 7b                	jae    215986 <getAbbrevTable+0x116>
  21590b:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  215912:	48 6b c8 28          	imul   rcx,rax,0x28
  215916:	48 03 4d f0          	add    rcx,QWORD PTR [rbp-0x10]
  21591a:	48 89 8d f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rcx
        if (header.offset == abbrev_offset) {
  215921:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  215928:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  21592b:	48 3b 8d f8 fe ff ff 	cmp    rcx,QWORD PTR [rbp-0x108]
  215932:	75 3b                	jne    21596f <getAbbrevTable+0xff>
            return &header.table;
  215934:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  21593b:	48 83 c0 08          	add    rax,0x8
  21593f:	66 c7 45 d0 00 00    	mov    WORD PTR [rbp-0x30],0x0
  215945:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  215949:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  21594d:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  215954:	48 89 01             	mov    QWORD PTR [rcx],rax
  215957:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21595b:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21595f:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  215966:	48 81 c4 90 01 00 00 	add    rsp,0x190
  21596d:	5d                   	pop    rbp
  21596e:	c3                   	ret    
    for (st.abbrev_table_list.toSlice()) |*header| {
  21596f:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  215976:	48 83 c0 01          	add    rax,0x1
  21597a:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  215981:	e9 6b ff ff ff       	jmp    2158f1 <getAbbrevTable+0x81>
    try st.self_exe_file.seekTo(st.debug_abbrev.offset + abbrev_offset);
  215986:	48 8b b5 00 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x100]
  21598d:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  215994:	48 8b 40 68          	mov    rax,QWORD PTR [rax+0x68]
  215998:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  21599c:	48 03 85 f8 fe ff ff 	add    rax,QWORD PTR [rbp-0x108]
  2159a3:	0f 92 c1             	setb   cl
  2159a6:	48 89 b5 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rsi
  2159ad:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  2159b4:	88 8d af fe ff ff    	mov    BYTE PTR [rbp-0x151],cl
  2159ba:	0f 82 d1 01 00 00    	jb     215b91 <getAbbrevTable+0x321>
  2159c0:	e9 dc 01 00 00       	jmp    215ba1 <getAbbrevTable+0x331>
  2159c5:	66 8b 45 ce          	mov    ax,WORD PTR [rbp-0x32]
  2159c9:	48 8b bd d8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x128]
  2159d0:	66 89 85 ac fe ff ff 	mov    WORD PTR [rbp-0x154],ax
  2159d7:	e8 b4 62 ff ff       	call   20bc90 <__zig_return_error>
  2159dc:	66 8b 85 ac fe ff ff 	mov    ax,WORD PTR [rbp-0x154]
  2159e3:	66 89 45 b8          	mov    WORD PTR [rbp-0x48],ax
  2159e7:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  2159eb:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  2159f2:	48 89 39             	mov    QWORD PTR [rcx],rdi
  2159f5:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  2159f9:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  2159fd:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  215a04:	48 81 c4 90 01 00 00 	add    rsp,0x190
  215a0b:	5d                   	pop    rbp
  215a0c:	c3                   	ret    
  215a0d:	48 8d 7d 90          	lea    rdi,[rbp-0x70]
    try st.abbrev_table_list.append(AbbrevTableHeader{
  215a11:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  215a18:	48 05 88 00 00 00    	add    rax,0x88
        .offset = abbrev_offset,
  215a1e:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
        .table = try parseAbbrevTable(st),
  215a25:	48 8b 95 00 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x100]
  215a2c:	48 8b b5 d8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x128]
  215a33:	48 89 8d a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rcx
  215a3a:	48 89 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rax
  215a41:	e8 aa 0d 00 00       	call   2167f0 <parseAbbrevTable>
  215a46:	66 83 7d 90 00       	cmp    WORD PTR [rbp-0x70],0x0
  215a4b:	74 51                	je     215a9e <getAbbrevTable+0x22e>
  215a4d:	66 8b 45 90          	mov    ax,WORD PTR [rbp-0x70]
  215a51:	48 8b bd d8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x128]
  215a58:	66 89 85 96 fe ff ff 	mov    WORD PTR [rbp-0x16a],ax
  215a5f:	e8 2c 62 ff ff       	call   20bc90 <__zig_return_error>
  215a64:	66 8b 85 96 fe ff ff 	mov    ax,WORD PTR [rbp-0x16a]
  215a6b:	66 89 85 58 ff ff ff 	mov    WORD PTR [rbp-0xa8],ax
  215a72:	48 8b bd 58 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  215a79:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  215a80:	48 89 39             	mov    QWORD PTR [rcx],rdi
  215a83:	48 8b bd 60 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  215a8a:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  215a8e:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  215a95:	48 81 c4 90 01 00 00 	add    rsp,0x190
  215a9c:	5d                   	pop    rbp
  215a9d:	c3                   	ret    
  215a9e:	48 8d 95 30 ff ff ff 	lea    rdx,[rbp-0xd0]
    try st.abbrev_table_list.append(AbbrevTableHeader{
  215aa5:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
  215aac:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  215ab3:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  215ab7:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  215abe:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  215ac2:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
  215ac9:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  215acd:	48 89 8d 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rcx
  215ad4:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  215ad8:	48 89 8d 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rcx
  215adf:	48 8b bd d8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x128]
  215ae6:	48 8b b5 98 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x168]
  215aed:	e8 ae 13 00 00       	call   216ea0 <AlignedArrayList(AbbrevTableHeader,8)_append>
  215af2:	66 89 85 2e ff ff ff 	mov    WORD PTR [rbp-0xd2],ax
  215af9:	66 83 bd 2e ff ff ff 	cmp    WORD PTR [rbp-0xd2],0x0
  215b00:	00 
  215b01:	74 54                	je     215b57 <getAbbrevTable+0x2e7>
  215b03:	66 8b 85 2e ff ff ff 	mov    ax,WORD PTR [rbp-0xd2]
  215b0a:	48 8b bd d8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x128]
  215b11:	66 89 85 94 fe ff ff 	mov    WORD PTR [rbp-0x16c],ax
  215b18:	e8 73 61 ff ff       	call   20bc90 <__zig_return_error>
  215b1d:	66 8b 85 94 fe ff ff 	mov    ax,WORD PTR [rbp-0x16c]
  215b24:	66 89 85 18 ff ff ff 	mov    WORD PTR [rbp-0xe8],ax
  215b2b:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
  215b32:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  215b39:	48 89 39             	mov    QWORD PTR [rcx],rdi
  215b3c:	48 8b bd 20 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe0]
  215b43:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  215b47:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  215b4e:	48 81 c4 90 01 00 00 	add    rsp,0x190
  215b55:	5d                   	pop    rbp
  215b56:	c3                   	ret    
    return &st.abbrev_table_list.items[st.abbrev_table_list.len - 1].table;
  215b57:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  215b5e:	48 05 88 00 00 00    	add    rax,0x88
  215b64:	48 8b 8d 00 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x100]
  215b6b:	48 8b 89 98 00 00 00 	mov    rcx,QWORD PTR [rcx+0x98]
  215b72:	48 83 e9 01          	sub    rcx,0x1
  215b76:	0f 92 c2             	setb   dl
  215b79:	48 89 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rax
  215b80:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  215b87:	88 95 7f fe ff ff    	mov    BYTE PTR [rbp-0x181],dl
  215b8d:	72 40                	jb     215bcf <getAbbrevTable+0x35f>
  215b8f:	eb 4e                	jmp    215bdf <getAbbrevTable+0x36f>
  215b91:	48 8d 3d 30 d6 02 00 	lea    rdi,[rip+0x2d630]        # 2431c8 <__unnamed_4>
  215b98:	31 c0                	xor    eax,eax
  215b9a:	89 c6                	mov    esi,eax
    try st.self_exe_file.seekTo(st.debug_abbrev.offset + abbrev_offset);
  215b9c:	e8 5f 5a ff ff       	call   20b600 <panic>
  215ba1:	48 8b bd d8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x128]
  215ba8:	48 8b b5 b8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x148]
  215baf:	48 8b 95 b0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x150]
  215bb6:	e8 b5 e6 ff ff       	call   214270 <File_seekTo>
  215bbb:	66 89 45 ce          	mov    WORD PTR [rbp-0x32],ax
  215bbf:	66 83 7d ce 00       	cmp    WORD PTR [rbp-0x32],0x0
  215bc4:	0f 85 fb fd ff ff    	jne    2159c5 <getAbbrevTable+0x155>
  215bca:	e9 3e fe ff ff       	jmp    215a0d <getAbbrevTable+0x19d>
  215bcf:	48 8d 3d f2 d5 02 00 	lea    rdi,[rip+0x2d5f2]        # 2431c8 <__unnamed_4>
  215bd6:	31 c0                	xor    eax,eax
  215bd8:	89 c6                	mov    esi,eax
    return &st.abbrev_table_list.items[st.abbrev_table_list.len - 1].table;
  215bda:	e8 21 5a ff ff       	call   20b600 <panic>
  215bdf:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
  215be6:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
  215bed:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  215bf1:	72 10                	jb     215c03 <getAbbrevTable+0x393>
  215bf3:	48 8d 3d fe d7 02 00 	lea    rdi,[rip+0x2d7fe]        # 2433f8 <__unnamed_20>
  215bfa:	31 c0                	xor    eax,eax
  215bfc:	89 c6                	mov    esi,eax
  215bfe:	e8 fd 59 ff ff       	call   20b600 <panic>
  215c03:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
  215c0a:	48 6b c8 28          	imul   rcx,rax,0x28
  215c0e:	48 8b 95 88 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x178]
  215c15:	48 03 0a             	add    rcx,QWORD PTR [rdx]
  215c18:	48 83 c1 08          	add    rcx,0x8
  215c1c:	66 c7 85 08 ff ff ff 	mov    WORD PTR [rbp-0xf8],0x0
  215c23:	00 00 
  215c25:	48 89 8d 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rcx
  215c2c:	48 8b 8d 08 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf8]
  215c33:	48 8b b5 e0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x120]
  215c3a:	48 89 0e             	mov    QWORD PTR [rsi],rcx
  215c3d:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  215c44:	48 89 4e 08          	mov    QWORD PTR [rsi+0x8],rcx
  215c48:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  215c4f:	48 81 c4 90 01 00 00 	add    rsp,0x190
  215c56:	5d                   	pop    rbp
  215c57:	c3                   	ret    
  215c58:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  215c5f:	00 

0000000000215c60 <ElfStackTrace_allocator>:
        pub fn allocator(self: *const ElfStackTrace) *mem.Allocator {
  215c60:	55                   	push   rbp
  215c61:	48 89 e5             	mov    rbp,rsp
  215c64:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
            return self.abbrev_table_list.allocator;
  215c68:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  215c6c:	48 8b 87 a0 00 00 00 	mov    rax,QWORD PTR [rdi+0xa0]
  215c73:	5d                   	pop    rbp
  215c74:	c3                   	ret    
  215c75:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  215c7c:	00 00 00 00 

0000000000215c80 <parseDie>:
fn parseDie(st: *ElfStackTrace, abbrev_table: *const AbbrevTable, is_64: bool) !Die {
  215c80:	55                   	push   rbp
  215c81:	48 89 e5             	mov    rbp,rsp
  215c84:	48 81 ec 70 03 00 00 	sub    rsp,0x370
  215c8b:	44 88 c0             	mov    al,r8b
  215c8e:	49 89 f9             	mov    r9,rdi
  215c91:	4c 8d 55 f0          	lea    r10,[rbp-0x10]
  215c95:	48 89 95 f0 fd ff ff 	mov    QWORD PTR [rbp-0x210],rdx
  215c9c:	48 89 8d e8 fd ff ff 	mov    QWORD PTR [rbp-0x218],rcx
  215ca3:	24 01                	and    al,0x1
  215ca5:	88 85 e7 fd ff ff    	mov    BYTE PTR [rbp-0x219],al
    const in_file = &st.self_exe_file;
  215cab:	48 8b 8d f0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x210]
  215cb2:	48 89 8d d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rcx
    var in_file_stream = io.FileInStream.init(in_file);
  215cb9:	48 8b 8d d8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x228]
  215cc0:	48 89 bd 60 fd ff ff 	mov    QWORD PTR [rbp-0x2a0],rdi
  215cc7:	4c 89 d7             	mov    rdi,r10
  215cca:	48 89 b5 58 fd ff ff 	mov    QWORD PTR [rbp-0x2a8],rsi
  215cd1:	48 89 ce             	mov    rsi,rcx
  215cd4:	4c 89 8d 50 fd ff ff 	mov    QWORD PTR [rbp-0x2b0],r9
  215cdb:	e8 b0 dc ff ff       	call   213990 <FileInStream_init>
  215ce0:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
  215ce4:	48 8d 8d c8 fd ff ff 	lea    rcx,[rbp-0x238]
  215ceb:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  215cef:	48 89 95 c8 fd ff ff 	mov    QWORD PTR [rbp-0x238],rdx
  215cf6:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  215cfa:	48 89 95 d0 fd ff ff 	mov    QWORD PTR [rbp-0x230],rdx
    const in_stream = &in_file_stream.stream;
  215d01:	48 83 c1 08          	add    rcx,0x8
  215d05:	48 89 8d c0 fd ff ff 	mov    QWORD PTR [rbp-0x240],rcx
    const abbrev_code = try readULeb128(in_stream);
  215d0c:	48 8b 95 c0 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x240]
  215d13:	48 8b b5 58 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a8]
  215d1a:	e8 b1 13 00 00       	call   2170d0 <readULeb128>
  215d1f:	66 83 7d e0 00       	cmp    WORD PTR [rbp-0x20],0x0
  215d24:	74 5a                	je     215d80 <parseDie+0x100>
  215d26:	66 8b 45 e0          	mov    ax,WORD PTR [rbp-0x20]
  215d2a:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  215d31:	66 89 85 4e fd ff ff 	mov    WORD PTR [rbp-0x2b2],ax
  215d38:	e8 53 5f ff ff       	call   20bc90 <__zig_return_error>
  215d3d:	b9 38 00 00 00       	mov    ecx,0x38
  215d42:	89 ca                	mov    edx,ecx
  215d44:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  215d48:	66 8b 85 4e fd ff ff 	mov    ax,WORD PTR [rbp-0x2b2]
  215d4f:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  215d53:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  215d5a:	48 89 bd 40 fd ff ff 	mov    QWORD PTR [rbp-0x2c0],rdi
  215d61:	48 89 f7             	mov    rdi,rsi
  215d64:	48 8b b5 40 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2c0]
  215d6b:	e8 90 eb 01 00       	call   234900 <memcpy>
  215d70:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  215d77:	48 81 c4 70 03 00 00 	add    rsp,0x370
  215d7e:	5d                   	pop    rbp
  215d7f:	c3                   	ret    
  215d80:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  215d84:	48 89 85 b8 fd ff ff 	mov    QWORD PTR [rbp-0x248],rax
    const table_entry = getAbbrevTableEntry(abbrev_table, abbrev_code) orelse return error.InvalidDebugInfo;
  215d8b:	48 8b bd e8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x218]
  215d92:	48 8b b5 b8 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x248]
  215d99:	e8 82 35 00 00       	call   219320 <getAbbrevTableEntry>
  215d9e:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  215da2:	48 83 7d 90 00       	cmp    QWORD PTR [rbp-0x70],0x0
  215da7:	75 47                	jne    215df0 <parseDie+0x170>
  215da9:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  215db0:	e8 db 5e ff ff       	call   20bc90 <__zig_return_error>
  215db5:	48 8d 3d fc 31 ff ff 	lea    rdi,[rip+0xffffffffffff31fc]        # 208fb8 <__unnamed_79>
  215dbc:	b8 38 00 00 00       	mov    eax,0x38
  215dc1:	89 c2                	mov    edx,eax
  215dc3:	48 8b 8d 60 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2a0]
  215dca:	48 89 bd 38 fd ff ff 	mov    QWORD PTR [rbp-0x2c8],rdi
  215dd1:	48 89 cf             	mov    rdi,rcx
  215dd4:	48 8b b5 38 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2c8]
  215ddb:	e8 20 eb 01 00       	call   234900 <memcpy>
  215de0:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  215de7:	48 81 c4 70 03 00 00 	add    rsp,0x370
  215dee:	5d                   	pop    rbp
  215def:	c3                   	ret    
  215df0:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  215df4:	48 89 85 30 fd ff ff 	mov    QWORD PTR [rbp-0x2d0],rax
  215dfb:	48 8b 85 30 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2d0]
  215e02:	48 89 85 b0 fd ff ff 	mov    QWORD PTR [rbp-0x250],rax
        .tag_id = table_entry.tag_id,
  215e09:	48 8b 8d b0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x250]
  215e10:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
        .has_children = table_entry.has_children,
  215e14:	48 8b 95 b0 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x250]
  215e1b:	40 8a 32             	mov    sil,BYTE PTR [rdx]
        .attrs = ArrayList(Die.Attr).init(st.allocator()),
  215e1e:	48 8b bd f0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x210]
  215e25:	48 89 8d 28 fd ff ff 	mov    QWORD PTR [rbp-0x2d8],rcx
  215e2c:	40 88 b5 27 fd ff ff 	mov    BYTE PTR [rbp-0x2d9],sil
  215e33:	e8 28 fe ff ff       	call   215c60 <ElfStackTrace_allocator>
  215e38:	48 8d bd 70 ff ff ff 	lea    rdi,[rbp-0x90]
  215e3f:	48 89 c6             	mov    rsi,rax
  215e42:	e8 79 35 00 00       	call   2193c0 <AlignedArrayList(Attr,8)_init>
  215e47:	48 8d 85 80 fd ff ff 	lea    rax,[rbp-0x280]
  215e4e:	41 b8 30 00 00 00    	mov    r8d,0x30
  215e54:	44 89 c2             	mov    edx,r8d
  215e57:	48 8d 8d 40 ff ff ff 	lea    rcx,[rbp-0xc0]
    var result = Die{
  215e5e:	48 8b b5 28 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2d8]
  215e65:	48 89 b5 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rsi
  215e6c:	44 8a 8d 27 fd ff ff 	mov    r9b,BYTE PTR [rbp-0x2d9]
  215e73:	41 80 e1 01          	and    r9b,0x1
  215e77:	44 88 8d 48 ff ff ff 	mov    BYTE PTR [rbp-0xb8],r9b
  215e7e:	48 8b b5 70 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x90]
  215e85:	48 89 b5 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rsi
  215e8c:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
  215e93:	48 89 b5 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rsi
  215e9a:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  215e9e:	48 89 b5 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rsi
  215ea5:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
  215ea9:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
  215eb0:	48 89 c6             	mov    rsi,rax
  215eb3:	48 89 f7             	mov    rdi,rsi
  215eb6:	48 89 ce             	mov    rsi,rcx
  215eb9:	48 89 85 18 fd ff ff 	mov    QWORD PTR [rbp-0x2e8],rax
  215ec0:	e8 3b ea 01 00       	call   234900 <memcpy>
    try result.attrs.resize(table_entry.attrs.len);
  215ec5:	48 8b 85 18 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2e8]
  215ecc:	48 83 c0 10          	add    rax,0x10
  215ed0:	48 8b 8d b0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x250]
  215ed7:	48 8b 51 28          	mov    rdx,QWORD PTR [rcx+0x28]
  215edb:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  215ee2:	48 89 c6             	mov    rsi,rax
  215ee5:	e8 36 35 00 00       	call   219420 <AlignedArrayList(Attr,8)_resize>
  215eea:	66 89 85 3e ff ff ff 	mov    WORD PTR [rbp-0xc2],ax
  215ef1:	66 83 bd 3e ff ff ff 	cmp    WORD PTR [rbp-0xc2],0x0
  215ef8:	00 
  215ef9:	74 63                	je     215f5e <parseDie+0x2de>
  215efb:	66 8b 85 3e ff ff ff 	mov    ax,WORD PTR [rbp-0xc2]
  215f02:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  215f09:	66 89 85 16 fd ff ff 	mov    WORD PTR [rbp-0x2ea],ax
  215f10:	e8 7b 5d ff ff       	call   20bc90 <__zig_return_error>
  215f15:	b9 38 00 00 00       	mov    ecx,0x38
  215f1a:	89 ca                	mov    edx,ecx
  215f1c:	48 8d bd 00 ff ff ff 	lea    rdi,[rbp-0x100]
  215f23:	66 8b 85 16 fd ff ff 	mov    ax,WORD PTR [rbp-0x2ea]
  215f2a:	66 89 85 00 ff ff ff 	mov    WORD PTR [rbp-0x100],ax
  215f31:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  215f38:	48 89 bd 08 fd ff ff 	mov    QWORD PTR [rbp-0x2f8],rdi
  215f3f:	48 89 f7             	mov    rdi,rsi
  215f42:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  215f49:	e8 b2 e9 01 00       	call   234900 <memcpy>
  215f4e:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  215f55:	48 81 c4 70 03 00 00 	add    rsp,0x370
  215f5c:	5d                   	pop    rbp
  215f5d:	c3                   	ret    
  215f5e:	48 8d bd f0 fe ff ff 	lea    rdi,[rbp-0x110]
    for (table_entry.attrs.toSliceConst()) |attr, i| {
  215f65:	48 8b 85 b0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x250]
  215f6c:	48 83 c0 18          	add    rax,0x18
  215f70:	48 89 c6             	mov    rsi,rax
  215f73:	e8 18 35 00 00       	call   219490 <AlignedArrayList(AbbrevAttr,8)_toSliceConst>
  215f78:	48 8b 05 31 a3 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffea331]        # 2002b0 <__unnamed_100>
  215f7f:	48 89 85 70 fd ff ff 	mov    QWORD PTR [rbp-0x290],rax
  215f86:	48 8b 05 2b a3 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffea32b]        # 2002b8 <__unnamed_100+0x8>
  215f8d:	48 89 85 78 fd ff ff 	mov    QWORD PTR [rbp-0x288],rax
  215f94:	48 c7 85 68 fd ff ff 	mov    QWORD PTR [rbp-0x298],0x0
  215f9b:	00 00 00 00 
  215f9f:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  215fa6:	48 89 85 00 fd ff ff 	mov    QWORD PTR [rbp-0x300],rax
  215fad:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  215fb4:	48 8b 8d 00 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x300]
  215fbb:	48 39 c8             	cmp    rax,rcx
  215fbe:	48 89 85 f8 fc ff ff 	mov    QWORD PTR [rbp-0x308],rax
  215fc5:	0f 83 36 01 00 00    	jae    216101 <parseDie+0x481>
  215fcb:	48 8d 85 80 fd ff ff 	lea    rax,[rbp-0x280]
  215fd2:	48 8b 8d f8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x308]
  215fd9:	48 c1 e1 04          	shl    rcx,0x4
  215fdd:	48 03 8d f0 fe ff ff 	add    rcx,QWORD PTR [rbp-0x110]
  215fe4:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
  215fe7:	48 89 95 70 fd ff ff 	mov    QWORD PTR [rbp-0x290],rdx
  215fee:	48 8b 49 08          	mov    rcx,QWORD PTR [rcx+0x8]
  215ff2:	48 89 8d 78 fd ff ff 	mov    QWORD PTR [rbp-0x288],rcx
        result.attrs.items[i] = Die.Attr{
  215ff9:	48 83 c0 10          	add    rax,0x10
  215ffd:	48 8b 8d 68 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x298]
  216004:	48 3b 8d 98 fd ff ff 	cmp    rcx,QWORD PTR [rbp-0x268]
  21600b:	48 89 85 f0 fc ff ff 	mov    QWORD PTR [rbp-0x310],rax
  216012:	48 89 8d e8 fc ff ff 	mov    QWORD PTR [rbp-0x318],rcx
  216019:	0f 82 86 01 00 00    	jb     2161a5 <parseDie+0x525>
  21601f:	e9 71 01 00 00       	jmp    216195 <parseDie+0x515>
            .value = try parseFormValue(st.allocator(), in_stream, attr.form_id, is_64),
  216024:	66 8b 85 b8 fe ff ff 	mov    ax,WORD PTR [rbp-0x148]
  21602b:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  216032:	66 89 85 e6 fc ff ff 	mov    WORD PTR [rbp-0x31a],ax
  216039:	e8 52 5c ff ff       	call   20bc90 <__zig_return_error>
  21603e:	b9 38 00 00 00       	mov    ecx,0x38
  216043:	89 ca                	mov    edx,ecx
  216045:	48 8d bd 58 fe ff ff 	lea    rdi,[rbp-0x1a8]
  21604c:	66 8b 85 e6 fc ff ff 	mov    ax,WORD PTR [rbp-0x31a]
  216053:	66 89 85 58 fe ff ff 	mov    WORD PTR [rbp-0x1a8],ax
  21605a:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  216061:	48 89 bd d8 fc ff ff 	mov    QWORD PTR [rbp-0x328],rdi
  216068:	48 89 f7             	mov    rdi,rsi
  21606b:	48 8b b5 d8 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x328]
  216072:	e8 89 e8 01 00       	call   234900 <memcpy>
  216077:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  21607e:	48 81 c4 70 03 00 00 	add    rsp,0x370
  216085:	5d                   	pop    rbp
  216086:	c3                   	ret    
  216087:	b8 28 00 00 00       	mov    eax,0x28
  21608c:	89 c2                	mov    edx,eax
  21608e:	48 8d 8d 30 fe ff ff 	lea    rcx,[rbp-0x1d0]
        result.attrs.items[i] = Die.Attr{
  216095:	48 8b b5 d0 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x330]
  21609c:	48 89 b5 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rsi
  2160a3:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  2160aa:	48 89 bd 38 fe ff ff 	mov    QWORD PTR [rbp-0x1c8],rdi
  2160b1:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  2160b8:	48 89 bd 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rdi
  2160bf:	48 8b bd d0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x130]
  2160c6:	48 89 bd 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rdi
  2160cd:	48 8b bd d8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x128]
  2160d4:	48 89 bd 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rdi
  2160db:	48 8b bd c8 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x338]
  2160e2:	48 89 ce             	mov    rsi,rcx
  2160e5:	e8 16 e8 01 00       	call   234900 <memcpy>
    for (table_entry.attrs.toSliceConst()) |attr, i| {
  2160ea:	48 8b 8d f8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x308]
  2160f1:	48 83 c1 01          	add    rcx,0x1
  2160f5:	48 89 8d 68 fd ff ff 	mov    QWORD PTR [rbp-0x298],rcx
  2160fc:	e9 ac fe ff ff       	jmp    215fad <parseDie+0x32d>
  216101:	b8 38 00 00 00       	mov    eax,0x38
  216106:	89 c2                	mov    edx,eax
  216108:	48 8d 8d f8 fd ff ff 	lea    rcx,[rbp-0x208]
  21610f:	b8 30 00 00 00       	mov    eax,0x30
  216114:	89 c6                	mov    esi,eax
  216116:	48 8d bd 80 fd ff ff 	lea    rdi,[rbp-0x280]
    return result;
  21611d:	66 c7 85 f8 fd ff ff 	mov    WORD PTR [rbp-0x208],0x0
  216124:	00 00 
  216126:	49 89 c8             	mov    r8,rcx
  216129:	49 83 c0 08          	add    r8,0x8
  21612d:	48 89 bd c0 fc ff ff 	mov    QWORD PTR [rbp-0x340],rdi
  216134:	4c 89 c7             	mov    rdi,r8
  216137:	4c 8b 85 c0 fc ff ff 	mov    r8,QWORD PTR [rbp-0x340]
  21613e:	48 89 b5 b8 fc ff ff 	mov    QWORD PTR [rbp-0x348],rsi
  216145:	4c 89 c6             	mov    rsi,r8
  216148:	4c 8b 8d b8 fc ff ff 	mov    r9,QWORD PTR [rbp-0x348]
  21614f:	48 89 95 b0 fc ff ff 	mov    QWORD PTR [rbp-0x350],rdx
  216156:	4c 89 ca             	mov    rdx,r9
  216159:	48 89 8d a8 fc ff ff 	mov    QWORD PTR [rbp-0x358],rcx
  216160:	e8 9b e7 01 00       	call   234900 <memcpy>
  216165:	48 8b 8d a8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x358]
  21616c:	48 8b 95 60 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2a0]
  216173:	48 89 d7             	mov    rdi,rdx
  216176:	48 89 ce             	mov    rsi,rcx
  216179:	48 8b 95 b0 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x350]
  216180:	e8 7b e7 01 00       	call   234900 <memcpy>
  216185:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  21618c:	48 81 c4 70 03 00 00 	add    rsp,0x370
  216193:	5d                   	pop    rbp
  216194:	c3                   	ret    
  216195:	48 8d 3d 5c d2 02 00 	lea    rdi,[rip+0x2d25c]        # 2433f8 <__unnamed_20>
  21619c:	31 c0                	xor    eax,eax
  21619e:	89 c6                	mov    esi,eax
        result.attrs.items[i] = Die.Attr{
  2161a0:	e8 5b 54 ff ff       	call   20b600 <panic>
  2161a5:	48 8b 85 e8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x318]
  2161ac:	48 6b c8 28          	imul   rcx,rax,0x28
  2161b0:	48 8b 95 f0 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x310]
  2161b7:	48 03 0a             	add    rcx,QWORD PTR [rdx]
            .id = attr.attr_id,
  2161ba:	48 8b b5 70 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x290]
            .value = try parseFormValue(st.allocator(), in_stream, attr.form_id, is_64),
  2161c1:	48 8b bd f0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x210]
  2161c8:	48 89 8d c8 fc ff ff 	mov    QWORD PTR [rbp-0x338],rcx
  2161cf:	48 89 b5 d0 fc ff ff 	mov    QWORD PTR [rbp-0x330],rsi
  2161d6:	e8 85 fa ff ff       	call   215c60 <ElfStackTrace_allocator>
  2161db:	48 8d 8d b8 fe ff ff 	lea    rcx,[rbp-0x148]
  2161e2:	48 8b 95 c0 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x240]
  2161e9:	4c 8b 85 78 fd ff ff 	mov    r8,QWORD PTR [rbp-0x288]
  2161f0:	44 8a 8d e7 fd ff ff 	mov    r9b,BYTE PTR [rbp-0x219]
  2161f7:	45 0f b6 c9          	movzx  r9d,r9b
  2161fb:	48 8d bd b8 fe ff ff 	lea    rdi,[rbp-0x148]
  216202:	48 8b b5 58 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a8]
  216209:	48 89 95 a0 fc ff ff 	mov    QWORD PTR [rbp-0x360],rdx
  216210:	48 89 c2             	mov    rdx,rax
  216213:	48 8b 85 a0 fc ff ff 	mov    rax,QWORD PTR [rbp-0x360]
  21621a:	48 89 8d 98 fc ff ff 	mov    QWORD PTR [rbp-0x368],rcx
  216221:	48 89 c1             	mov    rcx,rax
  216224:	e8 07 33 00 00       	call   219530 <parseFormValue>
  216229:	66 83 bd b8 fe ff ff 	cmp    WORD PTR [rbp-0x148],0x0
  216230:	00 
  216231:	0f 85 ed fd ff ff    	jne    216024 <parseDie+0x3a4>
  216237:	e9 4b fe ff ff       	jmp    216087 <parseDie+0x407>
  21623c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000216240 <Allocator_create.37>:
    pub fn create(self: *Allocator, init: var) Error!*@typeOf(init) {
  216240:	55                   	push   rbp
  216241:	48 89 e5             	mov    rbp,rsp
  216244:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  21624b:	48 89 f8             	mov    rax,rdi
  21624e:	4c 8d 45 e8          	lea    r8,[rbp-0x18]
  216252:	41 b9 01 00 00 00    	mov    r9d,0x1
  216258:	45 89 ca             	mov    r10d,r9d
  21625b:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
        const slice = try self.alloc(T, 1);
  21625f:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  216263:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
  216267:	4c 89 c7             	mov    rdi,r8
  21626a:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
  21626e:	48 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rcx
  216275:	4c 89 d1             	mov    rcx,r10
  216278:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  21627f:	e8 ac 5c 00 00       	call   21bf30 <Allocator_alloc.53>
  216284:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  216289:	74 42                	je     2162cd <Allocator_create.37+0x8d>
  21628b:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  21628f:	48 8b 7d 80          	mov    rdi,QWORD PTR [rbp-0x80]
  216293:	66 89 85 6e ff ff ff 	mov    WORD PTR [rbp-0x92],ax
  21629a:	e8 f1 59 ff ff       	call   20bc90 <__zig_return_error>
  21629f:	66 8b 85 6e ff ff ff 	mov    ax,WORD PTR [rbp-0x92]
  2162a6:	66 89 45 c0          	mov    WORD PTR [rbp-0x40],ax
  2162aa:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  2162ae:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  2162b2:	48 89 39             	mov    QWORD PTR [rcx],rdi
  2162b5:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2162b9:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  2162bd:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  2162c4:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  2162cb:	5d                   	pop    rbp
  2162cc:	c3                   	ret    
  2162cd:	31 c0                	xor    eax,eax
  2162cf:	89 c1                	mov    ecx,eax
  2162d1:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  2162d5:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  2162d9:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  2162dd:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
        const ptr = &slice[0];
  2162e1:	48 3b 4d a0          	cmp    rcx,QWORD PTR [rbp-0x60]
  2162e5:	72 10                	jb     2162f7 <Allocator_create.37+0xb7>
  2162e7:	48 8d 3d 0a d1 02 00 	lea    rdi,[rip+0x2d10a]        # 2433f8 <__unnamed_20>
  2162ee:	31 c0                	xor    eax,eax
  2162f0:	89 c6                	mov    esi,eax
  2162f2:	e8 09 53 ff ff       	call   20b600 <panic>
  2162f7:	b8 30 00 00 00       	mov    eax,0x30
  2162fc:	89 c2                	mov    edx,eax
  2162fe:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  216302:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
        ptr.* = init;
  216306:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  21630a:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
  216311:	48 89 cf             	mov    rdi,rcx
  216314:	e8 e7 e5 01 00       	call   234900 <memcpy>
        return ptr;
  216319:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  21631d:	66 c7 45 b0 00 00    	mov    WORD PTR [rbp-0x50],0x0
  216323:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
  216327:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  21632b:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
  21632f:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  216332:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  216336:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  21633a:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  216341:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  216348:	5d                   	pop    rbp
  216349:	c3                   	ret    
  21634a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000216350 <Die_getAttrAddr>:
    fn getAttrAddr(self: *const Die, id: u64) !u64 {
  216350:	55                   	push   rbp
  216351:	48 89 e5             	mov    rbp,rsp
  216354:	48 83 ec 70          	sub    rsp,0x70
  216358:	48 89 f8             	mov    rax,rdi
  21635b:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  21635f:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
        const form_value = self.getAttr(id) orelse return error.MissingDebugInfo;
  216363:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  216367:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  21636b:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
  21636f:	48 89 cf             	mov    rdi,rcx
  216372:	48 89 75 b8          	mov    QWORD PTR [rbp-0x48],rsi
  216376:	48 89 d6             	mov    rsi,rdx
  216379:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  21637d:	e8 ee 00 00 00       	call   216470 <Die_getAttr>
  216382:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  216386:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
  21638b:	75 2c                	jne    2163b9 <Die_getAttrAddr+0x69>
  21638d:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  216391:	e8 fa 58 ff ff       	call   20bc90 <__zig_return_error>
  216396:	48 8b 3d e3 a4 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffea4e3]        # 200880 <__unnamed_117>
  21639d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  2163a1:	48 89 38             	mov    QWORD PTR [rax],rdi
  2163a4:	48 8b 3d dd a4 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffea4dd]        # 200888 <__unnamed_117+0x8>
  2163ab:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  2163af:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  2163b3:	48 83 c4 70          	add    rsp,0x70
  2163b7:	5d                   	pop    rbp
  2163b8:	c3                   	ret    
  2163b9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2163bd:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  2163c1:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  2163c5:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
        return switch (form_value.*) {
  2163c9:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  2163cd:	8a 51 18             	mov    dl,BYTE PTR [rcx+0x18]
  2163d0:	84 d2                	test   dl,dl
  2163d2:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
  2163d6:	74 0f                	je     2163e7 <Die_getAttrAddr+0x97>
  2163d8:	eb 00                	jmp    2163da <Die_getAttrAddr+0x8a>
  2163da:	48 8d 05 6f 9e fe ff 	lea    rax,[rip+0xfffffffffffe9e6f]        # 200250 <__unnamed_131>
  2163e1:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  2163e5:	eb 0d                	jmp    2163f4 <Die_getAttrAddr+0xa4>
            FormValue.Address => |value| value,
  2163e7:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2163eb:	8a 48 18             	mov    cl,BYTE PTR [rax+0x18]
  2163ee:	84 c9                	test   cl,cl
  2163f0:	74 3d                	je     21642f <Die_getAttrAddr+0xdf>
  2163f2:	eb 5e                	jmp    216452 <Die_getAttrAddr+0x102>
        return switch (form_value.*) {
  2163f4:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  2163f8:	66 83 38 00          	cmp    WORD PTR [rax],0x0
  2163fc:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  216400:	74 0b                	je     21640d <Die_getAttrAddr+0xbd>
  216402:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  216406:	e8 85 58 ff ff       	call   20bc90 <__zig_return_error>
  21640b:	eb 02                	jmp    21640f <Die_getAttrAddr+0xbf>
  21640d:	eb 00                	jmp    21640f <Die_getAttrAddr+0xbf>
  21640f:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  216413:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  216416:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  21641a:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  21641d:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  216421:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  216425:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  216429:	48 83 c4 70          	add    rsp,0x70
  21642d:	5d                   	pop    rbp
  21642e:	c3                   	ret    
  21642f:	48 8d 45 e8          	lea    rax,[rbp-0x18]
            FormValue.Address => |value| value,
  216433:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  216437:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
  21643a:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
  21643e:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  216442:	66 c7 45 e8 00 00    	mov    WORD PTR [rbp-0x18],0x0
  216448:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
        return switch (form_value.*) {
  21644c:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  216450:	eb a2                	jmp    2163f4 <Die_getAttrAddr+0xa4>
  216452:	48 8d 3d a7 d1 02 00 	lea    rdi,[rip+0x2d1a7]        # 243600 <__unnamed_29>
  216459:	31 c0                	xor    eax,eax
  21645b:	89 c6                	mov    esi,eax
            FormValue.Address => |value| value,
  21645d:	e8 9e 51 ff ff       	call   20b600 <panic>
  216462:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  216469:	1f 84 00 00 00 00 00 

0000000000216470 <Die_getAttr>:
    fn getAttr(self: *const Die, id: u64) ?*const FormValue {
  216470:	55                   	push   rbp
  216471:	48 89 e5             	mov    rbp,rsp
  216474:	48 83 ec 50          	sub    rsp,0x50
  216478:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  21647c:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  216480:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        for (self.attrs.toSliceConst()) |*attr| {
  216484:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  216488:	48 83 c6 10          	add    rsi,0x10
  21648c:	48 89 c7             	mov    rdi,rax
  21648f:	e8 0c 5b 00 00       	call   21bfa0 <AlignedArrayList(Attr,8)_toSliceConst>
  216494:	be aa 00 00 00       	mov    esi,0xaa
  216499:	b9 08 00 00 00       	mov    ecx,0x8
  21649e:	89 ca                	mov    edx,ecx
  2164a0:	48 8d 45 c8          	lea    rax,[rbp-0x38]
  2164a4:	48 89 c7             	mov    rdi,rax
  2164a7:	e8 04 e4 01 00       	call   2348b0 <memset>
  2164ac:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
  2164b3:	00 
  2164b4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2164b8:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  2164bc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  2164c0:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  2164c4:	48 39 c8             	cmp    rax,rcx
  2164c7:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  2164cb:	73 39                	jae    216506 <Die_getAttr+0x96>
  2164cd:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  2164d1:	48 6b c8 28          	imul   rcx,rax,0x28
  2164d5:	48 03 4d f0          	add    rcx,QWORD PTR [rbp-0x10]
  2164d9:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
            if (attr.id == id) return &attr.value;
  2164dd:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  2164e1:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  2164e4:	48 3b 4d d0          	cmp    rcx,QWORD PTR [rbp-0x30]
  2164e8:	75 0e                	jne    2164f8 <Die_getAttr+0x88>
  2164ea:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2164ee:	48 83 c0 08          	add    rax,0x8
  2164f2:	48 83 c4 50          	add    rsp,0x50
  2164f6:	5d                   	pop    rbp
  2164f7:	c3                   	ret    
        for (self.attrs.toSliceConst()) |*attr| {
  2164f8:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  2164fc:	48 83 c0 01          	add    rax,0x1
  216500:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  216504:	eb b6                	jmp    2164bc <Die_getAttr+0x4c>
  216506:	31 c0                	xor    eax,eax
        return null;
  216508:	48 83 c4 50          	add    rsp,0x50
  21650c:	5d                   	pop    rbp
  21650d:	c3                   	ret    
  21650e:	66 90                	xchg   ax,ax

0000000000216510 <Constant_asUnsignedLe>:
    fn asUnsignedLe(self: *const Constant) !u64 {
  216510:	55                   	push   rbp
  216511:	48 89 e5             	mov    rbp,rsp
  216514:	48 83 ec 30          	sub    rsp,0x30
  216518:	48 89 f8             	mov    rax,rdi
  21651b:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
        if (self.payload.len > @sizeOf(u64)) return error.InvalidDebugInfo;
  21651f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  216523:	48 83 7a 08 08       	cmp    QWORD PTR [rdx+0x8],0x8
  216528:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  21652c:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  216530:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  216534:	76 2c                	jbe    216562 <Constant_asUnsignedLe+0x52>
  216536:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  21653a:	e8 51 57 ff ff       	call   20bc90 <__zig_return_error>
  21653f:	48 8b 3d 0a 9d fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe9d0a]        # 200250 <__unnamed_131>
  216546:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21654a:	48 89 38             	mov    QWORD PTR [rax],rdi
  21654d:	48 8b 3d 04 9d fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe9d04]        # 200258 <__unnamed_131+0x8>
  216554:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  216558:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  21655c:	48 83 c4 30          	add    rsp,0x30
  216560:	5d                   	pop    rbp
  216561:	c3                   	ret    
  216562:	eb 00                	jmp    216564 <Constant_asUnsignedLe+0x54>
        if (self.signed) return error.InvalidDebugInfo;
  216564:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  216568:	f6 40 10 01          	test   BYTE PTR [rax+0x10],0x1
  21656c:	75 02                	jne    216570 <Constant_asUnsignedLe+0x60>
  21656e:	eb 2c                	jmp    21659c <Constant_asUnsignedLe+0x8c>
  216570:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  216574:	e8 17 57 ff ff       	call   20bc90 <__zig_return_error>
  216579:	48 8b 3d d0 9c fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe9cd0]        # 200250 <__unnamed_131>
  216580:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  216584:	48 89 38             	mov    QWORD PTR [rax],rdi
  216587:	48 8b 3d ca 9c fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe9cca]        # 200258 <__unnamed_131+0x8>
  21658e:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  216592:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  216596:	48 83 c4 30          	add    rsp,0x30
  21659a:	5d                   	pop    rbp
  21659b:	c3                   	ret    
  21659c:	eb 00                	jmp    21659e <Constant_asUnsignedLe+0x8e>
  21659e:	be 01 00 00 00       	mov    esi,0x1
        return mem.readInt(self.payload, u64, builtin.Endian.Little);
  2165a3:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  2165a7:	e8 f4 e6 ff ff       	call   214ca0 <readInt.36>
  2165ac:	66 c7 45 f0 00 00    	mov    WORD PTR [rbp-0x10],0x0
  2165b2:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  2165b6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2165ba:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  2165be:	48 89 07             	mov    QWORD PTR [rdi],rax
  2165c1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2165c5:	48 89 47 08          	mov    QWORD PTR [rdi+0x8],rax
  2165c9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2165cd:	48 83 c4 30          	add    rsp,0x30
  2165d1:	5d                   	pop    rbp
  2165d2:	c3                   	ret    
  2165d3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2165da:	84 00 00 00 00 00 

00000000002165e0 <AlignedArrayList(CompileUnit,2)_append>:

            mem.copyBackwards(T, self.items[n + items.len .. self.len], self.items[n .. self.len - items.len]);
            mem.copy(T, self.items[n .. n + items.len], items);
        }

        pub fn append(self: *Self, item: T) !void {
  2165e0:	55                   	push   rbp
  2165e1:	48 89 e5             	mov    rbp,rsp
  2165e4:	48 83 ec 60          	sub    rsp,0x60
  2165e8:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  2165ec:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
            const new_item_ptr = try self.addOne();
  2165f0:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  2165f4:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  2165f8:	48 89 c7             	mov    rdi,rax
  2165fb:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2165ff:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
  216603:	48 89 c6             	mov    rsi,rax
  216606:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  21660a:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  21660e:	48 89 ca             	mov    rdx,rcx
  216611:	e8 2a 5a 00 00       	call   21c040 <AlignedArrayList(CompileUnit,2)_addOne>
  216616:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  21661b:	74 1b                	je     216638 <AlignedArrayList(CompileUnit,2)_append+0x58>
  21661d:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  216621:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  216625:	66 89 45 b6          	mov    WORD PTR [rbp-0x4a],ax
  216629:	e8 62 56 ff ff       	call   20bc90 <__zig_return_error>
  21662e:	66 8b 45 b6          	mov    ax,WORD PTR [rbp-0x4a]
  216632:	48 83 c4 60          	add    rsp,0x60
  216636:	5d                   	pop    rbp
  216637:	c3                   	ret    
  216638:	31 c0                	xor    eax,eax
  21663a:	66 89 c1             	mov    cx,ax
  21663d:	b8 30 00 00 00       	mov    eax,0x30
  216642:	89 c2                	mov    edx,eax
  216644:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  216648:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
            new_item_ptr.* = item;
  21664c:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  216650:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  216654:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  216658:	48 89 f7             	mov    rdi,rsi
  21665b:	48 8b 75 a8          	mov    rsi,QWORD PTR [rbp-0x58]
  21665f:	66 89 4d a6          	mov    WORD PTR [rbp-0x5a],cx
  216663:	e8 98 e2 01 00       	call   234900 <memcpy>
        pub fn append(self: *Self, item: T) !void {
  216668:	66 8b 45 a6          	mov    ax,WORD PTR [rbp-0x5a]
  21666c:	48 83 c4 60          	add    rsp,0x60
  216670:	5d                   	pop    rbp
  216671:	c3                   	ret    
  216672:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  216679:	1f 84 00 00 00 00 00 

0000000000216680 <InStream(ReadError)_readIntLe>:
        pub fn readIntLe(self: *Self, comptime T: type) !T {
  216680:	55                   	push   rbp
  216681:	48 89 e5             	mov    rbp,rsp
  216684:	48 83 ec 30          	sub    rsp,0x30
  216688:	48 89 f8             	mov    rax,rdi
  21668b:	48 8d 4d f8          	lea    rcx,[rbp-0x8]
  21668f:	41 b8 01 00 00 00    	mov    r8d,0x1
  216695:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
            return self.readInt(builtin.Endian.Little, T);
  216699:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21669d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  2166a1:	48 89 cf             	mov    rdi,rcx
  2166a4:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  2166a8:	44 89 c1             	mov    ecx,r8d
  2166ab:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  2166af:	e8 8c d7 ff ff       	call   213e40 <InStream(ReadError)_readInt.32>
  2166b4:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  2166b9:	74 0b                	je     2166c6 <InStream(ReadError)_readIntLe+0x46>
  2166bb:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2166bf:	e8 cc 55 ff ff       	call   20bc90 <__zig_return_error>
  2166c4:	eb 02                	jmp    2166c8 <InStream(ReadError)_readIntLe+0x48>
  2166c6:	eb 00                	jmp    2166c8 <InStream(ReadError)_readIntLe+0x48>
  2166c8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2166cc:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2166d0:	48 89 01             	mov    QWORD PTR [rcx],rax
  2166d3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2166d7:	48 83 c4 30          	add    rsp,0x30
  2166db:	5d                   	pop    rbp
  2166dc:	c3                   	ret    
  2166dd:	0f 1f 00             	nop    DWORD PTR [rax]

00000000002166e0 <InStream(ReadError)_readIntLe.38>:
        pub fn readIntLe(self: *Self, comptime T: type) !T {
  2166e0:	55                   	push   rbp
  2166e1:	48 89 e5             	mov    rbp,rsp
  2166e4:	48 83 ec 30          	sub    rsp,0x30
  2166e8:	48 89 f8             	mov    rax,rdi
  2166eb:	48 8d 4d f0          	lea    rcx,[rbp-0x10]
  2166ef:	41 b8 01 00 00 00    	mov    r8d,0x1
  2166f5:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
            return self.readInt(builtin.Endian.Little, T);
  2166f9:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  2166fd:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  216701:	48 89 cf             	mov    rdi,rcx
  216704:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  216708:	44 89 c1             	mov    ecx,r8d
  21670b:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  21670f:	e8 3c d8 ff ff       	call   213f50 <InStream(ReadError)_readInt.33>
  216714:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  216719:	74 0b                	je     216726 <InStream(ReadError)_readIntLe.38+0x46>
  21671b:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  21671f:	e8 6c 55 ff ff       	call   20bc90 <__zig_return_error>
  216724:	eb 02                	jmp    216728 <InStream(ReadError)_readIntLe.38+0x48>
  216726:	eb 00                	jmp    216728 <InStream(ReadError)_readIntLe.38+0x48>
  216728:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21672c:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  216730:	48 89 01             	mov    QWORD PTR [rcx],rax
  216733:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  216737:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21673b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  21673f:	48 83 c4 30          	add    rsp,0x30
  216743:	5d                   	pop    rbp
  216744:	c3                   	ret    
  216745:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21674c:	00 00 00 00 

0000000000216750 <AlignedArrayList(AbbrevTableHeader,8)_toSlice>:
        pub fn toSlice(self: Self) []align(A) T {
  216750:	55                   	push   rbp
  216751:	48 89 e5             	mov    rbp,rsp
  216754:	48 83 ec 40          	sub    rsp,0x40
  216758:	48 89 f8             	mov    rax,rdi
  21675b:	31 c9                	xor    ecx,ecx
  21675d:	89 ca                	mov    edx,ecx
            return self.items[0..self.len];
  21675f:	4c 8b 46 10          	mov    r8,QWORD PTR [rsi+0x10]
  216763:	4c 8b 4e 08          	mov    r9,QWORD PTR [rsi+0x8]
  216767:	4c 39 c2             	cmp    rdx,r8
  21676a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  21676e:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  216772:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  216776:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
  21677a:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
  21677e:	76 10                	jbe    216790 <AlignedArrayList(AbbrevTableHeader,8)_toSlice+0x40>
  216780:	48 8d 3d 71 cc 02 00 	lea    rdi,[rip+0x2cc71]        # 2433f8 <__unnamed_20>
  216787:	31 c0                	xor    eax,eax
  216789:	89 c6                	mov    esi,eax
  21678b:	e8 70 4e ff ff       	call   20b600 <panic>
  216790:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  216794:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  216798:	48 39 c8             	cmp    rax,rcx
  21679b:	76 10                	jbe    2167ad <AlignedArrayList(AbbrevTableHeader,8)_toSlice+0x5d>
  21679d:	48 8d 3d 54 cc 02 00 	lea    rdi,[rip+0x2cc54]        # 2433f8 <__unnamed_20>
  2167a4:	31 c0                	xor    eax,eax
  2167a6:	89 c6                	mov    esi,eax
  2167a8:	e8 53 4e ff ff       	call   20b600 <panic>
  2167ad:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2167b1:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  2167b4:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  2167b8:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  2167bc:	48 83 e9 00          	sub    rcx,0x0
  2167c0:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  2167c4:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  2167c8:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  2167cc:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  2167cf:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  2167d3:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  2167d7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2167db:	48 83 c4 40          	add    rsp,0x40
  2167df:	5d                   	pop    rbp
  2167e0:	c3                   	ret    
  2167e1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2167e8:	0f 1f 84 00 00 00 00 
  2167ef:	00 

00000000002167f0 <parseAbbrevTable>:
fn parseAbbrevTable(st: *ElfStackTrace) !AbbrevTable {
  2167f0:	55                   	push   rbp
  2167f1:	48 89 e5             	mov    rbp,rsp
  2167f4:	48 81 ec 90 03 00 00 	sub    rsp,0x390
  2167fb:	48 89 f8             	mov    rax,rdi
  2167fe:	48 8d 4d f0          	lea    rcx,[rbp-0x10]
  216802:	48 89 95 80 fd ff ff 	mov    QWORD PTR [rbp-0x280],rdx
    const in_file = &st.self_exe_file;
  216809:	48 8b 95 80 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x280]
  216810:	48 89 95 78 fd ff ff 	mov    QWORD PTR [rbp-0x288],rdx
    var in_file_stream = io.FileInStream.init(in_file);
  216817:	48 8b 95 78 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x288]
  21681e:	48 89 bd 18 fd ff ff 	mov    QWORD PTR [rbp-0x2e8],rdi
  216825:	48 89 cf             	mov    rdi,rcx
  216828:	48 89 b5 10 fd ff ff 	mov    QWORD PTR [rbp-0x2f0],rsi
  21682f:	48 89 d6             	mov    rsi,rdx
  216832:	48 89 85 08 fd ff ff 	mov    QWORD PTR [rbp-0x2f8],rax
  216839:	e8 52 d1 ff ff       	call   213990 <FileInStream_init>
  21683e:	48 8d 85 68 fd ff ff 	lea    rax,[rbp-0x298]
  216845:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  216849:	48 89 8d 68 fd ff ff 	mov    QWORD PTR [rbp-0x298],rcx
  216850:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  216854:	48 89 8d 70 fd ff ff 	mov    QWORD PTR [rbp-0x290],rcx
    const in_stream = &in_file_stream.stream;
  21685b:	48 83 c0 08          	add    rax,0x8
  21685f:	48 89 85 60 fd ff ff 	mov    QWORD PTR [rbp-0x2a0],rax
    var result = AbbrevTable.init(st.allocator());
  216866:	48 8b bd 80 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x280]
  21686d:	e8 ee f3 ff ff       	call   215c60 <ElfStackTrace_allocator>
  216872:	48 8d 7d d0          	lea    rdi,[rbp-0x30]
  216876:	48 89 c6             	mov    rsi,rax
  216879:	e8 f2 07 00 00       	call   217070 <AlignedArrayList(AbbrevTableEntry,1)_init>
  21687e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  216882:	48 89 85 40 fd ff ff 	mov    QWORD PTR [rbp-0x2c0],rax
  216889:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21688d:	48 89 85 48 fd ff ff 	mov    QWORD PTR [rbp-0x2b8],rax
  216894:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  216898:	48 89 85 50 fd ff ff 	mov    QWORD PTR [rbp-0x2b0],rax
  21689f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2168a3:	48 89 85 58 fd ff ff 	mov    QWORD PTR [rbp-0x2a8],rax
    while (true) {
  2168aa:	eb 00                	jmp    2168ac <parseAbbrevTable+0xbc>
  2168ac:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
        const abbrev_code = try readULeb128(in_stream);
  2168b0:	48 8b 95 60 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2a0]
  2168b7:	48 8b b5 10 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f0]
  2168be:	e8 0d 08 00 00       	call   2170d0 <readULeb128>
  2168c3:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  2168c8:	74 5a                	je     216924 <parseAbbrevTable+0x134>
  2168ca:	66 8b 45 c0          	mov    ax,WORD PTR [rbp-0x40]
  2168ce:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
  2168d5:	66 89 85 06 fd ff ff 	mov    WORD PTR [rbp-0x2fa],ax
  2168dc:	e8 af 53 ff ff       	call   20bc90 <__zig_return_error>
  2168e1:	b9 28 00 00 00       	mov    ecx,0x28
  2168e6:	89 ca                	mov    edx,ecx
  2168e8:	48 8d 7d 88          	lea    rdi,[rbp-0x78]
  2168ec:	66 8b 85 06 fd ff ff 	mov    ax,WORD PTR [rbp-0x2fa]
  2168f3:	66 89 45 88          	mov    WORD PTR [rbp-0x78],ax
  2168f7:	48 8b b5 18 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2e8]
  2168fe:	48 89 bd f8 fc ff ff 	mov    QWORD PTR [rbp-0x308],rdi
  216905:	48 89 f7             	mov    rdi,rsi
  216908:	48 8b b5 f8 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x308]
  21690f:	e8 ec df 01 00       	call   234900 <memcpy>
  216914:	48 8b 85 08 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2f8]
  21691b:	48 81 c4 90 03 00 00 	add    rsp,0x390
  216922:	5d                   	pop    rbp
  216923:	c3                   	ret    
  216924:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  216928:	48 89 85 38 fd ff ff 	mov    QWORD PTR [rbp-0x2c8],rax
        if (abbrev_code == 0) return result;
  21692f:	48 83 bd 38 fd ff ff 	cmp    QWORD PTR [rbp-0x2c8],0x0
  216936:	00 
  216937:	75 6e                	jne    2169a7 <parseAbbrevTable+0x1b7>
  216939:	b8 28 00 00 00       	mov    eax,0x28
  21693e:	89 c2                	mov    edx,eax
  216940:	48 8d 8d 60 ff ff ff 	lea    rcx,[rbp-0xa0]
  216947:	66 c7 85 60 ff ff ff 	mov    WORD PTR [rbp-0xa0],0x0
  21694e:	00 00 
  216950:	48 8b b5 40 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2c0]
  216957:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
  21695e:	48 8b b5 48 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2b8]
  216965:	48 89 b5 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rsi
  21696c:	48 8b b5 50 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2b0]
  216973:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
  21697a:	48 8b b5 58 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a8]
  216981:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
  216985:	48 8b b5 18 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2e8]
  21698c:	48 89 f7             	mov    rdi,rsi
  21698f:	48 89 ce             	mov    rsi,rcx
  216992:	e8 69 df 01 00       	call   234900 <memcpy>
  216997:	48 8b 85 08 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2f8]
  21699e:	48 81 c4 90 03 00 00 	add    rsp,0x390
  2169a5:	5d                   	pop    rbp
  2169a6:	c3                   	ret    
  2169a7:	eb 00                	jmp    2169a9 <parseAbbrevTable+0x1b9>
  2169a9:	48 8d bd 50 ff ff ff 	lea    rdi,[rbp-0xb0]
            .abbrev_code = abbrev_code,
  2169b0:	48 8b 85 38 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2c8]
            .tag_id = try readULeb128(in_stream),
  2169b7:	48 8b 95 60 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2a0]
  2169be:	48 8b b5 10 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f0]
  2169c5:	48 89 85 f0 fc ff ff 	mov    QWORD PTR [rbp-0x310],rax
  2169cc:	e8 ff 06 00 00       	call   2170d0 <readULeb128>
  2169d1:	66 83 bd 50 ff ff ff 	cmp    WORD PTR [rbp-0xb0],0x0
  2169d8:	00 
  2169d9:	74 63                	je     216a3e <parseAbbrevTable+0x24e>
  2169db:	66 8b 85 50 ff ff ff 	mov    ax,WORD PTR [rbp-0xb0]
  2169e2:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
  2169e9:	66 89 85 ee fc ff ff 	mov    WORD PTR [rbp-0x312],ax
  2169f0:	e8 9b 52 ff ff       	call   20bc90 <__zig_return_error>
  2169f5:	b9 28 00 00 00       	mov    ecx,0x28
  2169fa:	89 ca                	mov    edx,ecx
  2169fc:	48 8d bd 18 ff ff ff 	lea    rdi,[rbp-0xe8]
  216a03:	66 8b 85 ee fc ff ff 	mov    ax,WORD PTR [rbp-0x312]
  216a0a:	66 89 85 18 ff ff ff 	mov    WORD PTR [rbp-0xe8],ax
  216a11:	48 8b b5 18 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2e8]
  216a18:	48 89 bd e0 fc ff ff 	mov    QWORD PTR [rbp-0x320],rdi
  216a1f:	48 89 f7             	mov    rdi,rsi
  216a22:	48 8b b5 e0 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x320]
  216a29:	e8 d2 de 01 00       	call   234900 <memcpy>
  216a2e:	48 8b 85 08 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2f8]
  216a35:	48 81 c4 90 03 00 00 	add    rsp,0x390
  216a3c:	5d                   	pop    rbp
  216a3d:	c3                   	ret    
  216a3e:	48 8d bd 10 ff ff ff 	lea    rdi,[rbp-0xf0]
  216a45:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
            .has_children = (try in_stream.readByte()) == DW.CHILDREN_yes,
  216a4c:	48 8b 95 60 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2a0]
  216a53:	48 8b b5 10 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f0]
  216a5a:	48 89 85 d8 fc ff ff 	mov    QWORD PTR [rbp-0x328],rax
  216a61:	e8 da d0 ff ff       	call   213b40 <InStream(ReadError)_readByte>
  216a66:	66 83 bd 10 ff ff ff 	cmp    WORD PTR [rbp-0xf0],0x0
  216a6d:	00 
  216a6e:	74 63                	je     216ad3 <parseAbbrevTable+0x2e3>
  216a70:	66 8b 85 10 ff ff ff 	mov    ax,WORD PTR [rbp-0xf0]
  216a77:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
  216a7e:	66 89 85 d6 fc ff ff 	mov    WORD PTR [rbp-0x32a],ax
  216a85:	e8 06 52 ff ff       	call   20bc90 <__zig_return_error>
  216a8a:	b9 28 00 00 00       	mov    ecx,0x28
  216a8f:	89 ca                	mov    edx,ecx
  216a91:	48 8d bd e0 fe ff ff 	lea    rdi,[rbp-0x120]
  216a98:	66 8b 85 d6 fc ff ff 	mov    ax,WORD PTR [rbp-0x32a]
  216a9f:	66 89 85 e0 fe ff ff 	mov    WORD PTR [rbp-0x120],ax
  216aa6:	48 8b b5 18 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2e8]
  216aad:	48 89 bd c8 fc ff ff 	mov    QWORD PTR [rbp-0x338],rdi
  216ab4:	48 89 f7             	mov    rdi,rsi
  216ab7:	48 8b b5 c8 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x338]
  216abe:	e8 3d de 01 00       	call   234900 <memcpy>
  216ac3:	48 8b 85 08 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2f8]
  216aca:	48 81 c4 90 03 00 00 	add    rsp,0x390
  216ad1:	5d                   	pop    rbp
  216ad2:	c3                   	ret    
  216ad3:	80 bd 12 ff ff ff 01 	cmp    BYTE PTR [rbp-0xee],0x1
  216ada:	0f 94 c0             	sete   al
            .attrs = ArrayList(AbbrevAttr).init(st.allocator()),
  216add:	48 8b bd 80 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x280]
  216ae4:	88 85 c7 fc ff ff    	mov    BYTE PTR [rbp-0x339],al
  216aea:	e8 71 f1 ff ff       	call   215c60 <ElfStackTrace_allocator>
  216aef:	48 8d bd c0 fe ff ff 	lea    rdi,[rbp-0x140]
  216af6:	48 89 c6             	mov    rsi,rax
  216af9:	e8 92 07 00 00       	call   217290 <AlignedArrayList(AbbrevAttr,8)_init>
  216afe:	48 8d b5 40 fd ff ff 	lea    rsi,[rbp-0x2c0]
  216b05:	48 8d 95 88 fe ff ff 	lea    rdx,[rbp-0x178]
        try result.append(AbbrevTableEntry{
  216b0c:	8a 8d c7 fc ff ff    	mov    cl,BYTE PTR [rbp-0x339]
  216b12:	80 e1 01             	and    cl,0x1
  216b15:	88 8d 88 fe ff ff    	mov    BYTE PTR [rbp-0x178],cl
  216b1b:	48 8b 85 f0 fc ff ff 	mov    rax,QWORD PTR [rbp-0x310]
  216b22:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  216b29:	48 8b bd d8 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x328]
  216b30:	48 89 bd 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rdi
  216b37:	4c 8b 85 c0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x140]
  216b3e:	4c 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],r8
  216b45:	4c 8b 85 c8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x138]
  216b4c:	4c 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],r8
  216b53:	4c 8b 85 d0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x130]
  216b5a:	4c 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],r8
  216b61:	4c 8b 85 d8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x128]
  216b68:	4c 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],r8
  216b6f:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
  216b76:	e8 75 07 00 00       	call   2172f0 <AlignedArrayList(AbbrevTableEntry,1)_append>
  216b7b:	66 89 85 86 fe ff ff 	mov    WORD PTR [rbp-0x17a],ax
  216b82:	66 83 bd 86 fe ff ff 	cmp    WORD PTR [rbp-0x17a],0x0
  216b89:	00 
  216b8a:	74 63                	je     216bef <parseAbbrevTable+0x3ff>
  216b8c:	66 8b 85 86 fe ff ff 	mov    ax,WORD PTR [rbp-0x17a]
  216b93:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
  216b9a:	66 89 85 c4 fc ff ff 	mov    WORD PTR [rbp-0x33c],ax
  216ba1:	e8 ea 50 ff ff       	call   20bc90 <__zig_return_error>
  216ba6:	b9 28 00 00 00       	mov    ecx,0x28
  216bab:	89 ca                	mov    edx,ecx
  216bad:	48 8d bd 58 fe ff ff 	lea    rdi,[rbp-0x1a8]
  216bb4:	66 8b 85 c4 fc ff ff 	mov    ax,WORD PTR [rbp-0x33c]
  216bbb:	66 89 85 58 fe ff ff 	mov    WORD PTR [rbp-0x1a8],ax
  216bc2:	48 8b b5 18 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2e8]
  216bc9:	48 89 bd b8 fc ff ff 	mov    QWORD PTR [rbp-0x348],rdi
  216bd0:	48 89 f7             	mov    rdi,rsi
  216bd3:	48 8b b5 b8 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x348]
  216bda:	e8 21 dd 01 00       	call   234900 <memcpy>
  216bdf:	48 8b 85 08 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2f8]
  216be6:	48 81 c4 90 03 00 00 	add    rsp,0x390
  216bed:	5d                   	pop    rbp
  216bee:	c3                   	ret    
  216bef:	48 8d 85 40 fd ff ff 	lea    rax,[rbp-0x2c0]
        const attrs = &result.items[result.len - 1].attrs;
  216bf6:	48 8b 8d 50 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2b0]
  216bfd:	48 83 e9 01          	sub    rcx,0x1
  216c01:	0f 92 c2             	setb   dl
  216c04:	48 89 85 b0 fc ff ff 	mov    QWORD PTR [rbp-0x350],rax
  216c0b:	48 89 8d a8 fc ff ff 	mov    QWORD PTR [rbp-0x358],rcx
  216c12:	88 95 a7 fc ff ff    	mov    BYTE PTR [rbp-0x359],dl
  216c18:	0f 82 21 02 00 00    	jb     216e3f <parseAbbrevTable+0x64f>
  216c1e:	e9 2c 02 00 00       	jmp    216e4f <parseAbbrevTable+0x65f>
        while (true) {
  216c23:	eb 00                	jmp    216c25 <parseAbbrevTable+0x435>
  216c25:	48 8d bd 48 fe ff ff 	lea    rdi,[rbp-0x1b8]
            const attr_id = try readULeb128(in_stream);
  216c2c:	48 8b 95 60 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2a0]
  216c33:	48 8b b5 10 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f0]
  216c3a:	e8 91 04 00 00       	call   2170d0 <readULeb128>
  216c3f:	66 83 bd 48 fe ff ff 	cmp    WORD PTR [rbp-0x1b8],0x0
  216c46:	00 
  216c47:	74 63                	je     216cac <parseAbbrevTable+0x4bc>
  216c49:	66 8b 85 48 fe ff ff 	mov    ax,WORD PTR [rbp-0x1b8]
  216c50:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
  216c57:	66 89 85 a4 fc ff ff 	mov    WORD PTR [rbp-0x35c],ax
  216c5e:	e8 2d 50 ff ff       	call   20bc90 <__zig_return_error>
  216c63:	b9 28 00 00 00       	mov    ecx,0x28
  216c68:	89 ca                	mov    edx,ecx
  216c6a:	48 8d bd 10 fe ff ff 	lea    rdi,[rbp-0x1f0]
  216c71:	66 8b 85 a4 fc ff ff 	mov    ax,WORD PTR [rbp-0x35c]
  216c78:	66 89 85 10 fe ff ff 	mov    WORD PTR [rbp-0x1f0],ax
  216c7f:	48 8b b5 18 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2e8]
  216c86:	48 89 bd 98 fc ff ff 	mov    QWORD PTR [rbp-0x368],rdi
  216c8d:	48 89 f7             	mov    rdi,rsi
  216c90:	48 8b b5 98 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x368]
  216c97:	e8 64 dc 01 00       	call   234900 <memcpy>
  216c9c:	48 8b 85 08 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2f8]
  216ca3:	48 81 c4 90 03 00 00 	add    rsp,0x390
  216caa:	5d                   	pop    rbp
  216cab:	c3                   	ret    
  216cac:	48 8d bd 00 fe ff ff 	lea    rdi,[rbp-0x200]
  216cb3:	48 8b 85 50 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b0]
  216cba:	48 89 85 28 fd ff ff 	mov    QWORD PTR [rbp-0x2d8],rax
            const form_id = try readULeb128(in_stream);
  216cc1:	48 8b 95 60 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2a0]
  216cc8:	48 8b b5 10 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f0]
  216ccf:	e8 fc 03 00 00       	call   2170d0 <readULeb128>
  216cd4:	66 83 bd 00 fe ff ff 	cmp    WORD PTR [rbp-0x200],0x0
  216cdb:	00 
  216cdc:	74 63                	je     216d41 <parseAbbrevTable+0x551>
  216cde:	66 8b 85 00 fe ff ff 	mov    ax,WORD PTR [rbp-0x200]
  216ce5:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
  216cec:	66 89 85 96 fc ff ff 	mov    WORD PTR [rbp-0x36a],ax
  216cf3:	e8 98 4f ff ff       	call   20bc90 <__zig_return_error>
  216cf8:	b9 28 00 00 00       	mov    ecx,0x28
  216cfd:	89 ca                	mov    edx,ecx
  216cff:	48 8d bd c8 fd ff ff 	lea    rdi,[rbp-0x238]
  216d06:	66 8b 85 96 fc ff ff 	mov    ax,WORD PTR [rbp-0x36a]
  216d0d:	66 89 85 c8 fd ff ff 	mov    WORD PTR [rbp-0x238],ax
  216d14:	48 8b b5 18 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2e8]
  216d1b:	48 89 bd 88 fc ff ff 	mov    QWORD PTR [rbp-0x378],rdi
  216d22:	48 89 f7             	mov    rdi,rsi
  216d25:	48 8b b5 88 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x378]
  216d2c:	e8 cf db 01 00       	call   234900 <memcpy>
  216d31:	48 8b 85 08 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2f8]
  216d38:	48 81 c4 90 03 00 00 	add    rsp,0x390
  216d3f:	5d                   	pop    rbp
  216d40:	c3                   	ret    
  216d41:	48 8b 85 08 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1f8]
  216d48:	48 89 85 20 fd ff ff 	mov    QWORD PTR [rbp-0x2e0],rax
            if (attr_id == 0 and form_id == 0) break;
  216d4f:	48 83 bd 28 fd ff ff 	cmp    QWORD PTR [rbp-0x2d8],0x0
  216d56:	00 
  216d57:	0f 94 c1             	sete   cl
  216d5a:	f6 c1 01             	test   cl,0x1
  216d5d:	88 8d 87 fc ff ff    	mov    BYTE PTR [rbp-0x379],cl
  216d63:	75 02                	jne    216d67 <parseAbbrevTable+0x577>
  216d65:	eb 11                	jmp    216d78 <parseAbbrevTable+0x588>
  216d67:	48 83 bd 20 fd ff ff 	cmp    QWORD PTR [rbp-0x2e0],0x0
  216d6e:	00 
  216d6f:	0f 94 c0             	sete   al
  216d72:	88 85 87 fc ff ff    	mov    BYTE PTR [rbp-0x379],al
  216d78:	8a 85 87 fc ff ff    	mov    al,BYTE PTR [rbp-0x379]
  216d7e:	a8 01                	test   al,0x1
  216d80:	75 02                	jne    216d84 <parseAbbrevTable+0x594>
  216d82:	eb 05                	jmp    216d89 <parseAbbrevTable+0x599>
  216d84:	e9 b1 00 00 00       	jmp    216e3a <parseAbbrevTable+0x64a>
  216d89:	eb 00                	jmp    216d8b <parseAbbrevTable+0x59b>
  216d8b:	48 8d 95 b8 fd ff ff 	lea    rdx,[rbp-0x248]
            try attrs.append(AbbrevAttr{
  216d92:	48 8b b5 30 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2d0]
                .attr_id = attr_id,
  216d99:	48 8b 85 28 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2d8]
                .form_id = form_id,
  216da0:	48 8b 8d 20 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2e0]
            try attrs.append(AbbrevAttr{
  216da7:	48 89 85 b8 fd ff ff 	mov    QWORD PTR [rbp-0x248],rax
  216dae:	48 89 8d c0 fd ff ff 	mov    QWORD PTR [rbp-0x240],rcx
  216db5:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
  216dbc:	e8 cf 05 00 00       	call   217390 <AlignedArrayList(AbbrevAttr,8)_append>
  216dc1:	66 89 85 b6 fd ff ff 	mov    WORD PTR [rbp-0x24a],ax
  216dc8:	66 83 bd b6 fd ff ff 	cmp    WORD PTR [rbp-0x24a],0x0
  216dcf:	00 
  216dd0:	74 63                	je     216e35 <parseAbbrevTable+0x645>
  216dd2:	66 8b 85 b6 fd ff ff 	mov    ax,WORD PTR [rbp-0x24a]
  216dd9:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
  216de0:	66 89 85 84 fc ff ff 	mov    WORD PTR [rbp-0x37c],ax
  216de7:	e8 a4 4e ff ff       	call   20bc90 <__zig_return_error>
  216dec:	b9 28 00 00 00       	mov    ecx,0x28
  216df1:	89 ca                	mov    edx,ecx
  216df3:	48 8d bd 88 fd ff ff 	lea    rdi,[rbp-0x278]
  216dfa:	66 8b 85 84 fc ff ff 	mov    ax,WORD PTR [rbp-0x37c]
  216e01:	66 89 85 88 fd ff ff 	mov    WORD PTR [rbp-0x278],ax
  216e08:	48 8b b5 18 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2e8]
  216e0f:	48 89 bd 78 fc ff ff 	mov    QWORD PTR [rbp-0x388],rdi
  216e16:	48 89 f7             	mov    rdi,rsi
  216e19:	48 8b b5 78 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x388]
  216e20:	e8 db da 01 00       	call   234900 <memcpy>
  216e25:	48 8b 85 08 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2f8]
  216e2c:	48 81 c4 90 03 00 00 	add    rsp,0x390
  216e33:	5d                   	pop    rbp
  216e34:	c3                   	ret    
        while (true) {
  216e35:	e9 e9 fd ff ff       	jmp    216c23 <parseAbbrevTable+0x433>
    while (true) {
  216e3a:	e9 6b fa ff ff       	jmp    2168aa <parseAbbrevTable+0xba>
  216e3f:	48 8d 3d 82 c3 02 00 	lea    rdi,[rip+0x2c382]        # 2431c8 <__unnamed_4>
  216e46:	31 c0                	xor    eax,eax
  216e48:	89 c6                	mov    esi,eax
        const attrs = &result.items[result.len - 1].attrs;
  216e4a:	e8 b1 47 ff ff       	call   20b600 <panic>
  216e4f:	48 8b 85 a8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x358]
  216e56:	48 8b 8d b0 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x350]
  216e5d:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  216e61:	72 10                	jb     216e73 <parseAbbrevTable+0x683>
  216e63:	48 8d 3d 8e c5 02 00 	lea    rdi,[rip+0x2c58e]        # 2433f8 <__unnamed_20>
  216e6a:	31 c0                	xor    eax,eax
  216e6c:	89 c6                	mov    esi,eax
  216e6e:	e8 8d 47 ff ff       	call   20b600 <panic>
  216e73:	48 8b 85 a8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x358]
  216e7a:	48 6b c8 38          	imul   rcx,rax,0x38
  216e7e:	48 8b 95 b0 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x350]
  216e85:	48 03 0a             	add    rcx,QWORD PTR [rdx]
  216e88:	48 83 c1 18          	add    rcx,0x18
  216e8c:	48 89 8d 30 fd ff ff 	mov    QWORD PTR [rbp-0x2d0],rcx
        while (true) {
  216e93:	e9 8b fd ff ff       	jmp    216c23 <parseAbbrevTable+0x433>
  216e98:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  216e9f:	00 

0000000000216ea0 <AlignedArrayList(AbbrevTableHeader,8)_append>:
        pub fn append(self: *Self, item: T) !void {
  216ea0:	55                   	push   rbp
  216ea1:	48 89 e5             	mov    rbp,rsp
  216ea4:	48 83 ec 60          	sub    rsp,0x60
  216ea8:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  216eac:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
            const new_item_ptr = try self.addOne();
  216eb0:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  216eb4:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  216eb8:	48 89 c7             	mov    rdi,rax
  216ebb:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  216ebf:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
  216ec3:	48 89 c6             	mov    rsi,rax
  216ec6:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  216eca:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  216ece:	48 89 ca             	mov    rdx,rcx
  216ed1:	e8 6a 00 00 00       	call   216f40 <AlignedArrayList(AbbrevTableHeader,8)_addOne>
  216ed6:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  216edb:	74 1b                	je     216ef8 <AlignedArrayList(AbbrevTableHeader,8)_append+0x58>
  216edd:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  216ee1:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  216ee5:	66 89 45 b6          	mov    WORD PTR [rbp-0x4a],ax
  216ee9:	e8 a2 4d ff ff       	call   20bc90 <__zig_return_error>
  216eee:	66 8b 45 b6          	mov    ax,WORD PTR [rbp-0x4a]
  216ef2:	48 83 c4 60          	add    rsp,0x60
  216ef6:	5d                   	pop    rbp
  216ef7:	c3                   	ret    
  216ef8:	31 c0                	xor    eax,eax
  216efa:	66 89 c1             	mov    cx,ax
  216efd:	b8 28 00 00 00       	mov    eax,0x28
  216f02:	89 c2                	mov    edx,eax
  216f04:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  216f08:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
            new_item_ptr.* = item;
  216f0c:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  216f10:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  216f14:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  216f18:	48 89 f7             	mov    rdi,rsi
  216f1b:	48 8b 75 a8          	mov    rsi,QWORD PTR [rbp-0x58]
  216f1f:	66 89 4d a6          	mov    WORD PTR [rbp-0x5a],cx
  216f23:	e8 d8 d9 01 00       	call   234900 <memcpy>
        pub fn append(self: *Self, item: T) !void {
  216f28:	66 8b 45 a6          	mov    ax,WORD PTR [rbp-0x5a]
  216f2c:	48 83 c4 60          	add    rsp,0x60
  216f30:	5d                   	pop    rbp
  216f31:	c3                   	ret    
  216f32:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  216f39:	1f 84 00 00 00 00 00 

0000000000216f40 <AlignedArrayList(AbbrevTableHeader,8)_addOne>:
                if (better_capacity >= new_capacity) break;
            }
            self.items = try self.allocator.alignedRealloc(T, A, self.items, better_capacity);
        }

        pub fn addOne(self: *Self) !*T {
  216f40:	55                   	push   rbp
  216f41:	48 89 e5             	mov    rbp,rsp
  216f44:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  216f4b:	48 89 f8             	mov    rax,rdi
  216f4e:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            const new_length = self.len + 1;
  216f52:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  216f56:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  216f5a:	48 83 c2 01          	add    rdx,0x1
  216f5e:	0f 92 c1             	setb   cl
  216f61:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  216f65:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  216f69:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  216f6d:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  216f71:	88 4d 9f             	mov    BYTE PTR [rbp-0x61],cl
  216f74:	72 57                	jb     216fcd <AlignedArrayList(AbbrevTableHeader,8)_addOne+0x8d>
  216f76:	eb 65                	jmp    216fdd <AlignedArrayList(AbbrevTableHeader,8)_addOne+0x9d>
            try self.ensureCapacity(new_length);
  216f78:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  216f7c:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  216f80:	66 89 45 9c          	mov    WORD PTR [rbp-0x64],ax
  216f84:	e8 07 4d ff ff       	call   20bc90 <__zig_return_error>
  216f89:	66 8b 45 9c          	mov    ax,WORD PTR [rbp-0x64]
  216f8d:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  216f91:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  216f95:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  216f99:	48 89 39             	mov    QWORD PTR [rcx],rdi
  216f9c:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  216fa0:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  216fa4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  216fa8:	48 81 c4 80 00 00 00 	add    rsp,0x80
  216faf:	5d                   	pop    rbp
  216fb0:	c3                   	ret    
            const result = &self.items[self.len];
  216fb1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  216fb5:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  216fb9:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
  216fbd:	48 3b 48 08          	cmp    rcx,QWORD PTR [rax+0x8]
  216fc1:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  216fc5:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
  216fc9:	72 4c                	jb     217017 <AlignedArrayList(AbbrevTableHeader,8)_addOne+0xd7>
  216fcb:	eb 3a                	jmp    217007 <AlignedArrayList(AbbrevTableHeader,8)_addOne+0xc7>
  216fcd:	48 8d 3d f4 c1 02 00 	lea    rdi,[rip+0x2c1f4]        # 2431c8 <__unnamed_4>
  216fd4:	31 c0                	xor    eax,eax
  216fd6:	89 c6                	mov    esi,eax
            const new_length = self.len + 1;
  216fd8:	e8 23 46 ff ff       	call   20b600 <panic>
  216fdd:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  216fe1:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
            try self.ensureCapacity(new_length);
  216fe5:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  216fe9:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  216fed:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  216ff1:	e8 7a 19 00 00       	call   218970 <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity>
  216ff6:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  216ffa:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  216fff:	0f 85 73 ff ff ff    	jne    216f78 <AlignedArrayList(AbbrevTableHeader,8)_addOne+0x38>
  217005:	eb aa                	jmp    216fb1 <AlignedArrayList(AbbrevTableHeader,8)_addOne+0x71>
  217007:	48 8d 3d ea c3 02 00 	lea    rdi,[rip+0x2c3ea]        # 2433f8 <__unnamed_20>
  21700e:	31 c0                	xor    eax,eax
  217010:	89 c6                	mov    esi,eax
            const result = &self.items[self.len];
  217012:	e8 e9 45 ff ff       	call   20b600 <panic>
  217017:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  21701b:	48 6b c8 28          	imul   rcx,rax,0x28
  21701f:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
  217023:	48 03 0a             	add    rcx,QWORD PTR [rdx]
  217026:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
            self.len = new_length;
  21702a:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  21702e:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  217032:	48 89 71 10          	mov    QWORD PTR [rcx+0x10],rsi
            return result;
  217036:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  21703a:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  217040:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  217044:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  217048:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  21704c:	48 89 0e             	mov    QWORD PTR [rsi],rcx
  21704f:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  217053:	48 89 4e 08          	mov    QWORD PTR [rsi+0x8],rcx
  217057:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21705b:	48 81 c4 80 00 00 00 	add    rsp,0x80
  217062:	5d                   	pop    rbp
  217063:	c3                   	ret    
  217064:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21706b:	00 00 00 00 00 

0000000000217070 <AlignedArrayList(AbbrevTableEntry,1)_init>:
        pub fn init(allocator: *Allocator) Self {
  217070:	55                   	push   rbp
  217071:	48 89 e5             	mov    rbp,rsp
  217074:	48 89 f8             	mov    rax,rdi
  217077:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
                .allocator = allocator,
  21707b:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
            return Self{
  21707f:	48 8b 0d 2a 92 fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe922a]        # 2002b0 <__unnamed_100>
  217086:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  21708a:	48 8b 0d 27 92 fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe9227]        # 2002b8 <__unnamed_100+0x8>
  217091:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  217095:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  21709c:	00 
  21709d:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2170a1:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  2170a5:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  2170a8:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2170ac:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  2170b0:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  2170b4:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  2170b8:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  2170bc:	48 89 4f 18          	mov    QWORD PTR [rdi+0x18],rcx
  2170c0:	5d                   	pop    rbp
  2170c1:	c3                   	ret    
  2170c2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2170c9:	1f 84 00 00 00 00 00 

00000000002170d0 <readULeb128>:
fn readULeb128(in_stream: var) !u64 {
  2170d0:	55                   	push   rbp
  2170d1:	48 89 e5             	mov    rbp,rsp
  2170d4:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  2170db:	48 89 f8             	mov    rax,rdi
  2170de:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
    var result: u64 = 0;
  2170e2:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
  2170e9:	00 
    var shift: usize = 0;
  2170ea:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
  2170f1:	00 
  2170f2:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  2170f6:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
  2170fa:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
    while (true) {
  2170fe:	eb 00                	jmp    217100 <readULeb128+0x30>
  217100:	48 8d 7d f8          	lea    rdi,[rbp-0x8]
        const byte = try in_stream.readByte();
  217104:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  217108:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  21710c:	e8 2f ca ff ff       	call   213b40 <InStream(ReadError)_readByte>
  217111:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  217116:	74 39                	je     217151 <readULeb128+0x81>
  217118:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  21711c:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  217120:	66 89 45 8e          	mov    WORD PTR [rbp-0x72],ax
  217124:	e8 67 4b ff ff       	call   20bc90 <__zig_return_error>
  217129:	66 8b 45 8e          	mov    ax,WORD PTR [rbp-0x72]
  21712d:	66 89 45 e0          	mov    WORD PTR [rbp-0x20],ax
  217131:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  217135:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  217139:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21713c:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  217140:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  217144:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  217148:	48 81 c4 90 00 00 00 	add    rsp,0x90
  21714f:	5d                   	pop    rbp
  217150:	c3                   	ret    
  217151:	8a 45 fa             	mov    al,BYTE PTR [rbp-0x6]
  217154:	88 45 b7             	mov    BYTE PTR [rbp-0x49],al
        var operand: u64 = undefined;
  217157:	48 b9 aa aa aa aa aa 	movabs rcx,0xaaaaaaaaaaaaaaaa
  21715e:	aa aa aa 
  217161:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
        if (@shlWithOverflow(u64, byte & 0b01111111, @intCast(u6, shift), &operand)) return error.InvalidDebugInfo;
  217165:	8a 45 b7             	mov    al,BYTE PTR [rbp-0x49]
  217168:	24 7f                	and    al,0x7f
  21716a:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  21716e:	88 ca                	mov    dl,cl
  217170:	89 ce                	mov    esi,ecx
  217172:	83 e6 3f             	and    esi,0x3f
  217175:	89 f7                	mov    edi,esi
  217177:	48 39 f9             	cmp    rcx,rdi
  21717a:	88 45 8d             	mov    BYTE PTR [rbp-0x73],al
  21717d:	88 55 8c             	mov    BYTE PTR [rbp-0x74],dl
  217180:	0f 84 94 00 00 00    	je     21721a <readULeb128+0x14a>
  217186:	e9 c9 00 00 00       	jmp    217254 <readULeb128+0x184>
  21718b:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  21718f:	e8 fc 4a ff ff       	call   20bc90 <__zig_return_error>
  217194:	48 8b 3d b5 90 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe90b5]        # 200250 <__unnamed_131>
  21719b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  21719f:	48 89 38             	mov    QWORD PTR [rax],rdi
  2171a2:	48 8b 3d af 90 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe90af]        # 200258 <__unnamed_131+0x8>
  2171a9:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  2171ad:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2171b1:	48 81 c4 90 00 00 00 	add    rsp,0x90
  2171b8:	5d                   	pop    rbp
  2171b9:	c3                   	ret    
  2171ba:	eb 00                	jmp    2171bc <readULeb128+0xec>
        result |= operand;
  2171bc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  2171c0:	48 0b 45 a8          	or     rax,QWORD PTR [rbp-0x58]
  2171c4:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
        if ((byte & 0b10000000) == 0) return result;
  2171c8:	8a 4d b7             	mov    cl,BYTE PTR [rbp-0x49]
  2171cb:	80 e1 80             	and    cl,0x80
  2171ce:	80 f9 00             	cmp    cl,0x0
  2171d1:	75 2e                	jne    217201 <readULeb128+0x131>
  2171d3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  2171d7:	66 c7 45 d0 00 00    	mov    WORD PTR [rbp-0x30],0x0
  2171dd:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  2171e1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2171e5:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  2171e9:	48 89 01             	mov    QWORD PTR [rcx],rax
  2171ec:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2171f0:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2171f4:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2171f8:	48 81 c4 90 00 00 00 	add    rsp,0x90
  2171ff:	5d                   	pop    rbp
  217200:	c3                   	ret    
        shift += 7;
  217201:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  217205:	48 83 c0 07          	add    rax,0x7
  217209:	0f 92 c1             	setb   cl
  21720c:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  217210:	88 8d 7f ff ff ff    	mov    BYTE PTR [rbp-0x81],cl
  217216:	72 4c                	jb     217264 <readULeb128+0x194>
  217218:	eb 5a                	jmp    217274 <readULeb128+0x1a4>
        if (@shlWithOverflow(u64, byte & 0b01111111, @intCast(u6, shift), &operand)) return error.InvalidDebugInfo;
  21721a:	8a 45 8d             	mov    al,BYTE PTR [rbp-0x73]
  21721d:	0f b6 c8             	movzx  ecx,al
  217220:	89 ca                	mov    edx,ecx
  217222:	40 8a 75 8c          	mov    sil,BYTE PTR [rbp-0x74]
  217226:	40 80 e6 3f          	and    sil,0x3f
  21722a:	40 0f b6 ce          	movzx  ecx,sil
  21722e:	89 cf                	mov    edi,ecx
  217230:	48 89 f9             	mov    rcx,rdi
  217233:	49 89 d0             	mov    r8,rdx
  217236:	49 d3 e0             	shl    r8,cl
  217239:	48 89 f9             	mov    rcx,rdi
  21723c:	4c 89 c7             	mov    rdi,r8
  21723f:	48 d3 ef             	shr    rdi,cl
  217242:	4c 89 45 a8          	mov    QWORD PTR [rbp-0x58],r8
  217246:	48 39 fa             	cmp    rdx,rdi
  217249:	0f 85 3c ff ff ff    	jne    21718b <readULeb128+0xbb>
  21724f:	e9 66 ff ff ff       	jmp    2171ba <readULeb128+0xea>
  217254:	48 8d 3d 4d c2 02 00 	lea    rdi,[rip+0x2c24d]        # 2434a8 <__unnamed_22>
  21725b:	31 c0                	xor    eax,eax
  21725d:	89 c6                	mov    esi,eax
  21725f:	e8 9c 43 ff ff       	call   20b600 <panic>
  217264:	48 8d 3d 5d bf 02 00 	lea    rdi,[rip+0x2bf5d]        # 2431c8 <__unnamed_4>
  21726b:	31 c0                	xor    eax,eax
  21726d:	89 c6                	mov    esi,eax
        shift += 7;
  21726f:	e8 8c 43 ff ff       	call   20b600 <panic>
  217274:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  217278:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
    while (true) {
  21727c:	e9 7d fe ff ff       	jmp    2170fe <readULeb128+0x2e>
  217281:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  217288:	0f 1f 84 00 00 00 00 
  21728f:	00 

0000000000217290 <AlignedArrayList(AbbrevAttr,8)_init>:
        pub fn init(allocator: *Allocator) Self {
  217290:	55                   	push   rbp
  217291:	48 89 e5             	mov    rbp,rsp
  217294:	48 89 f8             	mov    rax,rdi
  217297:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
                .allocator = allocator,
  21729b:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
            return Self{
  21729f:	48 8b 0d 0a 90 fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe900a]        # 2002b0 <__unnamed_100>
  2172a6:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  2172aa:	48 8b 0d 07 90 fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe9007]        # 2002b8 <__unnamed_100+0x8>
  2172b1:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  2172b5:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  2172bc:	00 
  2172bd:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2172c1:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  2172c5:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  2172c8:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2172cc:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  2172d0:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  2172d4:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  2172d8:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  2172dc:	48 89 4f 18          	mov    QWORD PTR [rdi+0x18],rcx
  2172e0:	5d                   	pop    rbp
  2172e1:	c3                   	ret    
  2172e2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2172e9:	1f 84 00 00 00 00 00 

00000000002172f0 <AlignedArrayList(AbbrevTableEntry,1)_append>:
        pub fn append(self: *Self, item: T) !void {
  2172f0:	55                   	push   rbp
  2172f1:	48 89 e5             	mov    rbp,rsp
  2172f4:	48 83 ec 60          	sub    rsp,0x60
  2172f8:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  2172fc:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
            const new_item_ptr = try self.addOne();
  217300:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  217304:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  217308:	48 89 c7             	mov    rdi,rax
  21730b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21730f:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
  217313:	48 89 c6             	mov    rsi,rax
  217316:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  21731a:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  21731e:	48 89 ca             	mov    rdx,rcx
  217321:	e8 fa 00 00 00       	call   217420 <AlignedArrayList(AbbrevTableEntry,1)_addOne>
  217326:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  21732b:	74 1b                	je     217348 <AlignedArrayList(AbbrevTableEntry,1)_append+0x58>
  21732d:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  217331:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  217335:	66 89 45 b6          	mov    WORD PTR [rbp-0x4a],ax
  217339:	e8 52 49 ff ff       	call   20bc90 <__zig_return_error>
  21733e:	66 8b 45 b6          	mov    ax,WORD PTR [rbp-0x4a]
  217342:	48 83 c4 60          	add    rsp,0x60
  217346:	5d                   	pop    rbp
  217347:	c3                   	ret    
  217348:	31 c0                	xor    eax,eax
  21734a:	66 89 c1             	mov    cx,ax
  21734d:	b8 38 00 00 00       	mov    eax,0x38
  217352:	89 c2                	mov    edx,eax
  217354:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  217358:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
            new_item_ptr.* = item;
  21735c:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  217360:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  217364:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  217368:	48 89 f7             	mov    rdi,rsi
  21736b:	48 8b 75 a8          	mov    rsi,QWORD PTR [rbp-0x58]
  21736f:	66 89 4d a6          	mov    WORD PTR [rbp-0x5a],cx
  217373:	e8 88 d5 01 00       	call   234900 <memcpy>
        pub fn append(self: *Self, item: T) !void {
  217378:	66 8b 45 a6          	mov    ax,WORD PTR [rbp-0x5a]
  21737c:	48 83 c4 60          	add    rsp,0x60
  217380:	5d                   	pop    rbp
  217381:	c3                   	ret    
  217382:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  217389:	1f 84 00 00 00 00 00 

0000000000217390 <AlignedArrayList(AbbrevAttr,8)_append>:
  217390:	55                   	push   rbp
  217391:	48 89 e5             	mov    rbp,rsp
  217394:	48 83 ec 50          	sub    rsp,0x50
  217398:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  21739c:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
            const new_item_ptr = try self.addOne();
  2173a0:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  2173a4:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  2173a8:	48 89 c7             	mov    rdi,rax
  2173ab:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2173af:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
  2173b3:	48 89 c6             	mov    rsi,rax
  2173b6:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  2173ba:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  2173be:	48 89 ca             	mov    rdx,rcx
  2173c1:	e8 ea 0a 00 00       	call   217eb0 <AlignedArrayList(AbbrevAttr,8)_addOne>
  2173c6:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  2173cb:	74 1b                	je     2173e8 <AlignedArrayList(AbbrevAttr,8)_append+0x58>
  2173cd:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  2173d1:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2173d5:	66 89 45 b6          	mov    WORD PTR [rbp-0x4a],ax
  2173d9:	e8 b2 48 ff ff       	call   20bc90 <__zig_return_error>
  2173de:	66 8b 45 b6          	mov    ax,WORD PTR [rbp-0x4a]
  2173e2:	48 83 c4 50          	add    rsp,0x50
  2173e6:	5d                   	pop    rbp
  2173e7:	c3                   	ret    
  2173e8:	31 c0                	xor    eax,eax
  2173ea:	66 89 c1             	mov    cx,ax
  2173ed:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  2173f1:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            new_item_ptr.* = item;
  2173f5:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  2173f9:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  2173fd:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  217400:	48 89 3a             	mov    QWORD PTR [rdx],rdi
  217403:	48 8b 7e 08          	mov    rdi,QWORD PTR [rsi+0x8]
  217407:	48 89 7a 08          	mov    QWORD PTR [rdx+0x8],rdi
        pub fn append(self: *Self, item: T) !void {
  21740b:	66 89 c8             	mov    ax,cx
  21740e:	48 83 c4 50          	add    rsp,0x50
  217412:	5d                   	pop    rbp
  217413:	c3                   	ret    
  217414:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21741b:	00 00 00 00 00 

0000000000217420 <AlignedArrayList(AbbrevTableEntry,1)_addOne>:
        pub fn addOne(self: *Self) !*T {
  217420:	55                   	push   rbp
  217421:	48 89 e5             	mov    rbp,rsp
  217424:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  21742b:	48 89 f8             	mov    rax,rdi
  21742e:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            const new_length = self.len + 1;
  217432:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  217436:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  21743a:	48 83 c2 01          	add    rdx,0x1
  21743e:	0f 92 c1             	setb   cl
  217441:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  217445:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  217449:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  21744d:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  217451:	88 4d 9f             	mov    BYTE PTR [rbp-0x61],cl
  217454:	72 57                	jb     2174ad <AlignedArrayList(AbbrevTableEntry,1)_addOne+0x8d>
  217456:	eb 65                	jmp    2174bd <AlignedArrayList(AbbrevTableEntry,1)_addOne+0x9d>
            try self.ensureCapacity(new_length);
  217458:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  21745c:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  217460:	66 89 45 9c          	mov    WORD PTR [rbp-0x64],ax
  217464:	e8 27 48 ff ff       	call   20bc90 <__zig_return_error>
  217469:	66 8b 45 9c          	mov    ax,WORD PTR [rbp-0x64]
  21746d:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  217471:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  217475:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  217479:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21747c:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  217480:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  217484:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  217488:	48 81 c4 80 00 00 00 	add    rsp,0x80
  21748f:	5d                   	pop    rbp
  217490:	c3                   	ret    
            const result = &self.items[self.len];
  217491:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  217495:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  217499:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
  21749d:	48 3b 48 08          	cmp    rcx,QWORD PTR [rax+0x8]
  2174a1:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  2174a5:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
  2174a9:	72 4c                	jb     2174f7 <AlignedArrayList(AbbrevTableEntry,1)_addOne+0xd7>
  2174ab:	eb 3a                	jmp    2174e7 <AlignedArrayList(AbbrevTableEntry,1)_addOne+0xc7>
  2174ad:	48 8d 3d 14 bd 02 00 	lea    rdi,[rip+0x2bd14]        # 2431c8 <__unnamed_4>
  2174b4:	31 c0                	xor    eax,eax
  2174b6:	89 c6                	mov    esi,eax
            const new_length = self.len + 1;
  2174b8:	e8 43 41 ff ff       	call   20b600 <panic>
  2174bd:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2174c1:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
            try self.ensureCapacity(new_length);
  2174c5:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  2174c9:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  2174cd:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  2174d1:	e8 7a 00 00 00       	call   217550 <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity>
  2174d6:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  2174da:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  2174df:	0f 85 73 ff ff ff    	jne    217458 <AlignedArrayList(AbbrevTableEntry,1)_addOne+0x38>
  2174e5:	eb aa                	jmp    217491 <AlignedArrayList(AbbrevTableEntry,1)_addOne+0x71>
  2174e7:	48 8d 3d 0a bf 02 00 	lea    rdi,[rip+0x2bf0a]        # 2433f8 <__unnamed_20>
  2174ee:	31 c0                	xor    eax,eax
  2174f0:	89 c6                	mov    esi,eax
            const result = &self.items[self.len];
  2174f2:	e8 09 41 ff ff       	call   20b600 <panic>
  2174f7:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  2174fb:	48 6b c8 38          	imul   rcx,rax,0x38
  2174ff:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
  217503:	48 03 0a             	add    rcx,QWORD PTR [rdx]
  217506:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
            self.len = new_length;
  21750a:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  21750e:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  217512:	48 89 71 10          	mov    QWORD PTR [rcx+0x10],rsi
            return result;
  217516:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  21751a:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  217520:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  217524:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  217528:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  21752c:	48 89 0e             	mov    QWORD PTR [rsi],rcx
  21752f:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  217533:	48 89 4e 08          	mov    QWORD PTR [rsi+0x8],rcx
  217537:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21753b:	48 81 c4 80 00 00 00 	add    rsp,0x80
  217542:	5d                   	pop    rbp
  217543:	c3                   	ret    
  217544:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21754b:	00 00 00 00 00 

0000000000217550 <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity>:
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  217550:	55                   	push   rbp
  217551:	48 89 e5             	mov    rbp,rsp
  217554:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  21755b:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  21755f:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
            var better_capacity = self.items.len;
  217563:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  217567:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  21756b:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
            if (better_capacity >= new_capacity) return;
  21756f:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  217573:	48 3b 55 c0          	cmp    rdx,QWORD PTR [rbp-0x40]
  217577:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  21757b:	72 11                	jb     21758e <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0x3e>
  21757d:	31 c0                	xor    eax,eax
  21757f:	66 89 c1             	mov    cx,ax
  217582:	66 89 c8             	mov    ax,cx
  217585:	48 81 c4 90 00 00 00 	add    rsp,0x90
  21758c:	5d                   	pop    rbp
  21758d:	c3                   	ret    
            while (true) {
  21758e:	eb 00                	jmp    217590 <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0x40>
  217590:	eb 00                	jmp    217592 <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0x42>
  217592:	31 c0                	xor    eax,eax
  217594:	88 c1                	mov    cl,al
                better_capacity += better_capacity / 2 + 8;
  217596:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  21759a:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  21759e:	f6 c1 01             	test   cl,0x1
  2175a1:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  2175a5:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  2175a9:	0f 85 8e 00 00 00    	jne    21763d <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0xed>
  2175af:	eb 72                	jmp    217623 <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0xd3>
                if (better_capacity >= new_capacity) break;
  2175b1:	eb 02                	jmp    2175b5 <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0x65>
            while (true) {
  2175b3:	eb db                	jmp    217590 <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0x40>
  2175b5:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
            self.items = try self.allocator.alignedRealloc(T, A, self.items, better_capacity);
  2175b9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2175bd:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  2175c1:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
  2175c5:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  2175c9:	4c 8b 45 b8          	mov    r8,QWORD PTR [rbp-0x48]
  2175cd:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  2175d1:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  2175d5:	e8 d6 00 00 00       	call   2176b0 <Allocator_alignedRealloc>
  2175da:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  2175df:	74 1e                	je     2175ff <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0xaf>
  2175e1:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  2175e5:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  2175e9:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  2175ed:	e8 9e 46 ff ff       	call   20bc90 <__zig_return_error>
  2175f2:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  2175f6:	48 81 c4 90 00 00 00 	add    rsp,0x90
  2175fd:	5d                   	pop    rbp
  2175fe:	c3                   	ret    
  2175ff:	31 c0                	xor    eax,eax
  217601:	66 89 c1             	mov    cx,ax
  217604:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  217608:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  21760c:	48 89 16             	mov    QWORD PTR [rsi],rdx
  21760f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  217613:	48 89 56 08          	mov    QWORD PTR [rsi+0x8],rdx
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  217617:	66 89 c8             	mov    ax,cx
  21761a:	48 81 c4 90 00 00 00 	add    rsp,0x90
  217621:	5d                   	pop    rbp
  217622:	c3                   	ret    
                better_capacity += better_capacity / 2 + 8;
  217623:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  217627:	48 c1 e8 01          	shr    rax,0x1
  21762b:	48 83 c0 08          	add    rax,0x8
  21762f:	0f 92 c1             	setb   cl
  217632:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  217636:	88 4d 87             	mov    BYTE PTR [rbp-0x79],cl
  217639:	72 12                	jb     21764d <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0xfd>
  21763b:	eb 20                	jmp    21765d <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0x10d>
  21763d:	48 8d 3d fc bb 02 00 	lea    rdi,[rip+0x2bbfc]        # 243240 <__unnamed_7>
  217644:	31 c0                	xor    eax,eax
  217646:	89 c6                	mov    esi,eax
  217648:	e8 b3 3f ff ff       	call   20b600 <panic>
  21764d:	48 8d 3d 74 bb 02 00 	lea    rdi,[rip+0x2bb74]        # 2431c8 <__unnamed_4>
  217654:	31 c0                	xor    eax,eax
  217656:	89 c6                	mov    esi,eax
  217658:	e8 a3 3f ff ff       	call   20b600 <panic>
  21765d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  217661:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  217665:	48 01 c8             	add    rax,rcx
  217668:	0f 92 c2             	setb   dl
  21766b:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  217672:	88 95 77 ff ff ff    	mov    BYTE PTR [rbp-0x89],dl
  217678:	72 02                	jb     21767c <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0x12c>
  21767a:	eb 10                	jmp    21768c <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0x13c>
  21767c:	48 8d 3d 45 bb 02 00 	lea    rdi,[rip+0x2bb45]        # 2431c8 <__unnamed_4>
  217683:	31 c0                	xor    eax,eax
  217685:	89 c6                	mov    esi,eax
  217687:	e8 74 3f ff ff       	call   20b600 <panic>
  21768c:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  217693:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                if (better_capacity >= new_capacity) break;
  217697:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  21769b:	48 3b 4d c0          	cmp    rcx,QWORD PTR [rbp-0x40]
  21769f:	0f 83 0c ff ff ff    	jae    2175b1 <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0x61>
  2176a5:	e9 09 ff ff ff       	jmp    2175b3 <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0x63>
  2176aa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000002176b0 <Allocator_alignedRealloc>:
    pub fn alignedRealloc(self: *Allocator, comptime T: type, comptime alignment: u29, old_mem: []align(alignment) T, n: usize) ![]align(alignment) T {
  2176b0:	55                   	push   rbp
  2176b1:	48 89 e5             	mov    rbp,rsp
  2176b4:	53                   	push   rbx
  2176b5:	48 81 ec 88 01 00 00 	sub    rsp,0x188
  2176bc:	48 89 f8             	mov    rax,rdi
  2176bf:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
  2176c6:	4c 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],r8
        if (old_mem.len == 0) {
  2176cd:	48 83 79 08 00       	cmp    QWORD PTR [rcx+0x8],0x0
  2176d2:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  2176d9:	48 89 b5 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rsi
  2176e0:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
  2176e7:	48 89 bd b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rdi
  2176ee:	75 64                	jne    217754 <Allocator_alignedRealloc+0xa4>
  2176f0:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
            return self.alignedAlloc(T, alignment, n);
  2176f4:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  2176fb:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  217702:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  217709:	e8 02 04 00 00       	call   217b10 <Allocator_alignedAlloc.39>
  21770e:	66 83 7d e0 00       	cmp    WORD PTR [rbp-0x20],0x0
  217713:	74 0e                	je     217723 <Allocator_alignedRealloc+0x73>
  217715:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  21771c:	e8 6f 45 ff ff       	call   20bc90 <__zig_return_error>
  217721:	eb 02                	jmp    217725 <Allocator_alignedRealloc+0x75>
  217723:	eb 00                	jmp    217725 <Allocator_alignedRealloc+0x75>
  217725:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  217729:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  217730:	48 89 01             	mov    QWORD PTR [rcx],rax
  217733:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  217737:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21773b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21773f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  217743:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21774a:	48 81 c4 88 01 00 00 	add    rsp,0x188
  217751:	5b                   	pop    rbx
  217752:	5d                   	pop    rbp
  217753:	c3                   	ret    
        if (old_mem.len == 0) {
  217754:	eb 00                	jmp    217756 <Allocator_alignedRealloc+0xa6>
        if (n == 0) {
  217756:	48 83 bd 10 ff ff ff 	cmp    QWORD PTR [rbp-0xf0],0x0
  21775d:	00 
  21775e:	75 4b                	jne    2177ab <Allocator_alignedRealloc+0xfb>
            self.free(old_mem);
  217760:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
  217767:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  21776e:	e8 8d 06 00 00       	call   217e00 <Allocator_free.40>
            return ([*]align(alignment) T)(undefined)[0..0];
  217773:	48 8b 35 1e 17 ff ff 	mov    rsi,QWORD PTR [rip+0xffffffffffff171e]        # 208e98 <__unnamed_88>
  21777a:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  217781:	48 89 37             	mov    QWORD PTR [rdi],rsi
  217784:	48 8b 35 15 17 ff ff 	mov    rsi,QWORD PTR [rip+0xffffffffffff1715]        # 208ea0 <__unnamed_88+0x8>
  21778b:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  21778f:	48 8b 35 12 17 ff ff 	mov    rsi,QWORD PTR [rip+0xffffffffffff1712]        # 208ea8 <__unnamed_88+0x10>
  217796:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  21779a:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  2177a1:	48 81 c4 88 01 00 00 	add    rsp,0x188
  2177a8:	5b                   	pop    rbx
  2177a9:	5d                   	pop    rbp
  2177aa:	c3                   	ret    
        if (n == 0) {
  2177ab:	eb 00                	jmp    2177ad <Allocator_alignedRealloc+0xfd>
  2177ad:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  2177b1:	b8 38 00 00 00       	mov    eax,0x38
  2177b6:	89 c2                	mov    edx,eax
        const old_byte_slice = @sliceToBytes(old_mem);
  2177b8:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  2177bf:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  2177c2:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  2177c6:	48 6b 71 08 38       	imul   rsi,QWORD PTR [rcx+0x8],0x38
  2177cb:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  2177cf:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  2177d3:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
  2177da:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  2177de:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  2177e5:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  2177ec:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  2177f3:	e8 18 dc ff ff       	call   215410 <mul>
  2177f8:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  2177fd:	74 44                	je     217843 <Allocator_alignedRealloc+0x193>
  2177ff:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  217806:	e8 85 44 ff ff       	call   20bc90 <__zig_return_error>
  21780b:	48 8b 3d 9e 16 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff169e]        # 208eb0 <__unnamed_89>
  217812:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  217819:	48 89 38             	mov    QWORD PTR [rax],rdi
  21781c:	48 8b 3d 95 16 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff1695]        # 208eb8 <__unnamed_89+0x8>
  217823:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  217827:	48 8b 3d 92 16 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff1692]        # 208ec0 <__unnamed_89+0x10>
  21782e:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  217832:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  217839:	48 81 c4 88 01 00 00 	add    rsp,0x188
  217840:	5b                   	pop    rbx
  217841:	5d                   	pop    rbp
  217842:	c3                   	ret    
  217843:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  217847:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  21784e:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  217852:	48 8d 8d 00 ff ff ff 	lea    rcx,[rbp-0x100]
  217859:	41 b9 01 00 00 00    	mov    r9d,0x1
  21785f:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  217866:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
        const byte_slice = try self.reallocFn(self, old_byte_slice, byte_count, alignment);
  21786d:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  217874:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  217878:	48 8b b5 18 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe8]
  21787f:	4c 8b 85 f8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x108]
  217886:	4c 8b 95 c8 fe ff ff 	mov    r10,QWORD PTR [rbp-0x138]
  21788d:	48 89 b5 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rsi
  217894:	4c 89 d6             	mov    rsi,r10
  217897:	4c 8b 9d a8 fe ff ff 	mov    r11,QWORD PTR [rbp-0x158]
  21789e:	48 89 95 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdx
  2178a5:	4c 89 da             	mov    rdx,r11
  2178a8:	48 8b 9d a0 fe ff ff 	mov    rbx,QWORD PTR [rbp-0x160]
  2178af:	ff d3                	call   rbx
  2178b1:	66 83 7d 98 00       	cmp    WORD PTR [rbp-0x68],0x0
  2178b6:	74 5d                	je     217915 <Allocator_alignedRealloc+0x265>
  2178b8:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  2178bc:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  2178c3:	66 89 85 9e fe ff ff 	mov    WORD PTR [rbp-0x162],ax
  2178ca:	e8 c1 43 ff ff       	call   20bc90 <__zig_return_error>
  2178cf:	66 8b 85 9e fe ff ff 	mov    ax,WORD PTR [rbp-0x162]
  2178d6:	66 89 85 68 ff ff ff 	mov    WORD PTR [rbp-0x98],ax
  2178dd:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  2178e4:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  2178eb:	48 89 39             	mov    QWORD PTR [rcx],rdi
  2178ee:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  2178f5:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  2178f9:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  217900:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  217904:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21790b:	48 81 c4 88 01 00 00 	add    rsp,0x188
  217912:	5b                   	pop    rbx
  217913:	5d                   	pop    rbp
  217914:	c3                   	ret    
  217915:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  217919:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  217920:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  217924:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
        assert(byte_slice.len == byte_count);
  21792b:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  217932:	48 3b 85 f8 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x108]
  217939:	0f 94 c1             	sete   cl
  21793c:	0f b6 f9             	movzx  edi,cl
  21793f:	e8 bc 36 ff ff       	call   20b000 <assert>
        if (n > old_mem.len) {
  217944:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  21794b:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  217952:	48 3b 42 08          	cmp    rax,QWORD PTR [rdx+0x8]
  217956:	76 78                	jbe    2179d0 <Allocator_alignedRealloc+0x320>
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  217958:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  21795f:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  217966:	48 39 c8             	cmp    rax,rcx
  217969:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  217970:	48 89 8d 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rcx
  217977:	0f 86 9d 00 00 00    	jbe    217a1a <Allocator_alignedRealloc+0x36a>
  21797d:	e9 88 00 00 00       	jmp    217a0a <Allocator_alignedRealloc+0x35a>
  217982:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  217989:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
  217990:	48 39 c8             	cmp    rax,rcx
  217993:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  21799a:	73 32                	jae    2179ce <Allocator_alignedRealloc+0x31e>
  21799c:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  2179a3:	48 03 8d 58 ff ff ff 	add    rcx,QWORD PTR [rbp-0xa8]
  2179aa:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
                byte.* = undefined;
  2179b1:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  2179b8:	88 01                	mov    BYTE PTR [rcx],al
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  2179ba:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  2179c1:	48 83 c1 01          	add    rcx,0x1
  2179c5:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
  2179cc:	eb b4                	jmp    217982 <Allocator_alignedRealloc+0x2d2>
        if (n > old_mem.len) {
  2179ce:	eb 02                	jmp    2179d2 <Allocator_alignedRealloc+0x322>
  2179d0:	eb 00                	jmp    2179d2 <Allocator_alignedRealloc+0x322>
  2179d2:	b8 38 00 00 00       	mov    eax,0x38
  2179d7:	89 c1                	mov    ecx,eax
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  2179d9:	48 8b 95 e8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x118]
  2179e0:	48 89 95 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdx
  2179e7:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  2179ee:	48 89 d0             	mov    rax,rdx
  2179f1:	31 f6                	xor    esi,esi
  2179f3:	48 89 95 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rdx
  2179fa:	89 f2                	mov    edx,esi
  2179fc:	48 f7 f1             	div    rcx
  2179ff:	48 83 fa 00          	cmp    rdx,0x0
  217a03:	74 7b                	je     217a80 <Allocator_alignedRealloc+0x3d0>
  217a05:	e9 ed 00 00 00       	jmp    217af7 <Allocator_alignedRealloc+0x447>
  217a0a:	48 8d 3d e7 b9 02 00 	lea    rdi,[rip+0x2b9e7]        # 2433f8 <__unnamed_20>
  217a11:	31 c0                	xor    eax,eax
  217a13:	89 c6                	mov    esi,eax
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  217a15:	e8 e6 3b ff ff       	call   20b600 <panic>
  217a1a:	be aa 00 00 00       	mov    esi,0xaa
  217a1f:	b8 08 00 00 00       	mov    eax,0x8
  217a24:	89 c2                	mov    edx,eax
  217a26:	48 8d 8d e0 fe ff ff 	lea    rcx,[rbp-0x120]
  217a2d:	48 8b bd 90 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x170]
  217a34:	48 03 bd e8 fe ff ff 	add    rdi,QWORD PTR [rbp-0x118]
  217a3b:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
  217a42:	48 8b bd 88 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x178]
  217a49:	4c 8b 85 90 fe ff ff 	mov    r8,QWORD PTR [rbp-0x170]
  217a50:	4c 29 c7             	sub    rdi,r8
  217a53:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  217a5a:	48 89 cf             	mov    rdi,rcx
  217a5d:	e8 4e ce 01 00       	call   2348b0 <memset>
  217a62:	48 c7 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],0x0
  217a69:	00 00 00 00 
  217a6d:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  217a74:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  217a7b:	e9 02 ff ff ff       	jmp    217982 <Allocator_alignedRealloc+0x2d2>
  217a80:	b8 38 00 00 00       	mov    eax,0x38
  217a85:	89 c1                	mov    ecx,eax
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  217a87:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  217a8e:	31 d2                	xor    edx,edx
  217a90:	48 f7 f1             	div    rcx
  217a93:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  217a9a:	66 c7 85 20 ff ff ff 	mov    WORD PTR [rbp-0xe0],0x0
  217aa1:	00 00 
  217aa3:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  217aaa:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  217ab1:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  217ab8:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  217abf:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  217ac6:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  217acd:	48 89 01             	mov    QWORD PTR [rcx],rax
  217ad0:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  217ad7:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  217adb:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  217ae2:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  217ae6:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  217aed:	48 81 c4 88 01 00 00 	add    rsp,0x188
  217af4:	5b                   	pop    rbx
  217af5:	5d                   	pop    rbp
  217af6:	c3                   	ret    
  217af7:	48 8d 3d ea ba 02 00 	lea    rdi,[rip+0x2baea]        # 2435e8 <__unnamed_76>
  217afe:	31 c0                	xor    eax,eax
  217b00:	89 c6                	mov    esi,eax
  217b02:	e8 f9 3a ff ff       	call   20b600 <panic>
  217b07:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  217b0e:	00 00 

0000000000217b10 <Allocator_alignedAlloc.39>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  217b10:	55                   	push   rbp
  217b11:	48 89 e5             	mov    rbp,rsp
  217b14:	48 81 ec 20 01 00 00 	sub    rsp,0x120
  217b1b:	48 89 f8             	mov    rax,rdi
  217b1e:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  217b25:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  217b2c:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  217b33:	00 
  217b34:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  217b3b:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  217b42:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  217b49:	75 37                	jne    217b82 <Allocator_alignedAlloc.39+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  217b4b:	48 8b 05 76 13 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff1376]        # 208ec8 <__unnamed_90>
  217b52:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  217b59:	48 89 01             	mov    QWORD PTR [rcx],rax
  217b5c:	48 8b 05 6d 13 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff136d]        # 208ed0 <__unnamed_90+0x8>
  217b63:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  217b67:	48 8b 05 6a 13 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff136a]        # 208ed8 <__unnamed_90+0x10>
  217b6e:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  217b72:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  217b79:	48 81 c4 20 01 00 00 	add    rsp,0x120
  217b80:	5d                   	pop    rbp
  217b81:	c3                   	ret    
        if (n == 0) {
  217b82:	eb 00                	jmp    217b84 <Allocator_alignedAlloc.39+0x74>
  217b84:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  217b88:	b8 38 00 00 00       	mov    eax,0x38
  217b8d:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  217b8f:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  217b96:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  217b9d:	e8 6e d8 ff ff       	call   215410 <mul>
  217ba2:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  217ba7:	74 43                	je     217bec <Allocator_alignedAlloc.39+0xdc>
  217ba9:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  217bb0:	e8 db 40 ff ff       	call   20bc90 <__zig_return_error>
  217bb5:	48 8b 3d 24 13 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff1324]        # 208ee0 <__unnamed_91>
  217bbc:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  217bc3:	48 89 38             	mov    QWORD PTR [rax],rdi
  217bc6:	48 8b 3d 1b 13 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff131b]        # 208ee8 <__unnamed_91+0x8>
  217bcd:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  217bd1:	48 8b 3d 18 13 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff1318]        # 208ef0 <__unnamed_91+0x10>
  217bd8:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  217bdc:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  217be3:	48 81 c4 20 01 00 00 	add    rsp,0x120
  217bea:	5d                   	pop    rbp
  217beb:	c3                   	ret    
  217bec:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  217bf0:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  217bf7:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  217bfb:	41 b8 01 00 00 00    	mov    r8d,0x1
  217c01:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  217c08:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  217c0f:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  217c16:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  217c19:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  217c20:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  217c27:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  217c2e:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  217c35:	4c 89 ce             	mov    rsi,r9
  217c38:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  217c3f:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  217c46:	4c 89 d1             	mov    rcx,r10
  217c49:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  217c50:	41 ff d3             	call   r11
  217c53:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  217c58:	74 50                	je     217caa <Allocator_alignedAlloc.39+0x19a>
  217c5a:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  217c5e:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  217c65:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  217c6c:	e8 1f 40 ff ff       	call   20bc90 <__zig_return_error>
  217c71:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  217c78:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  217c7c:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  217c80:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  217c87:	48 89 39             	mov    QWORD PTR [rcx],rdi
  217c8a:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  217c8e:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  217c92:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  217c96:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  217c9a:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  217ca1:	48 81 c4 20 01 00 00 	add    rsp,0x120
  217ca8:	5d                   	pop    rbp
  217ca9:	c3                   	ret    
  217caa:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  217cae:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  217cb5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  217cb9:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  217cc0:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  217cc7:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  217cce:	0f 94 c1             	sete   cl
  217cd1:	0f b6 f9             	movzx  edi,cl
  217cd4:	e8 27 33 ff ff       	call   20b000 <assert>
  217cd9:	be aa 00 00 00       	mov    esi,0xaa
  217cde:	bf 08 00 00 00       	mov    edi,0x8
  217ce3:	89 fa                	mov    edx,edi
  217ce5:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  217cec:	48 89 c7             	mov    rdi,rax
  217cef:	e8 bc cb 01 00       	call   2348b0 <memset>
  217cf4:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  217cfb:	00 00 00 00 
  217cff:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  217d06:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  217d0d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  217d14:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  217d1b:	48 39 c8             	cmp    rax,rcx
  217d1e:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  217d25:	73 32                	jae    217d59 <Allocator_alignedAlloc.39+0x249>
  217d27:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  217d2e:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  217d35:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  217d3c:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  217d43:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  217d45:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  217d4c:	48 83 c1 01          	add    rcx,0x1
  217d50:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  217d57:	eb b4                	jmp    217d0d <Allocator_alignedAlloc.39+0x1fd>
  217d59:	b8 38 00 00 00       	mov    eax,0x38
  217d5e:	89 c1                	mov    ecx,eax
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  217d60:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
  217d67:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
  217d6b:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
  217d72:	48 89 d0             	mov    rax,rdx
  217d75:	31 f6                	xor    esi,esi
  217d77:	48 89 95 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdx
  217d7e:	89 f2                	mov    edx,esi
  217d80:	48 f7 f1             	div    rcx
  217d83:	48 83 fa 00          	cmp    rdx,0x0
  217d87:	75 67                	jne    217df0 <Allocator_alignedAlloc.39+0x2e0>
  217d89:	b8 38 00 00 00       	mov    eax,0x38
  217d8e:	89 c1                	mov    ecx,eax
  217d90:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  217d97:	31 d2                	xor    edx,edx
  217d99:	48 f7 f1             	div    rcx
  217d9c:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  217da0:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  217da7:	00 00 
  217da9:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  217dad:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  217db4:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  217db8:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  217dbc:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  217dc3:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  217dca:	48 89 01             	mov    QWORD PTR [rcx],rax
  217dcd:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  217dd4:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  217dd8:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  217ddc:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  217de0:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  217de7:	48 81 c4 20 01 00 00 	add    rsp,0x120
  217dee:	5d                   	pop    rbp
  217def:	c3                   	ret    
  217df0:	48 8d 3d f1 b7 02 00 	lea    rdi,[rip+0x2b7f1]        # 2435e8 <__unnamed_76>
  217df7:	31 c0                	xor    eax,eax
  217df9:	89 c6                	mov    esi,eax
  217dfb:	e8 00 38 ff ff       	call   20b600 <panic>

0000000000217e00 <Allocator_free.40>:
    pub fn free(self: *Allocator, memory: var) void {
  217e00:	55                   	push   rbp
  217e01:	48 89 e5             	mov    rbp,rsp
  217e04:	48 83 ec 60          	sub    rsp,0x60
  217e08:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
        const bytes = @sliceToBytes(memory);
  217e0c:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  217e0f:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  217e13:	48 6b 76 08 38       	imul   rsi,QWORD PTR [rsi+0x8],0x38
  217e18:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  217e1c:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  217e20:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  217e24:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  217e28:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        if (bytes.len == 0) return;
  217e2c:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
  217e31:	75 06                	jne    217e39 <Allocator_free.40+0x39>
  217e33:	48 83 c4 60          	add    rsp,0x60
  217e37:	5d                   	pop    rbp
  217e38:	c3                   	ret    
  217e39:	31 c0                	xor    eax,eax
  217e3b:	89 c1                	mov    ecx,eax
        const non_const_ptr = @intToPtr([*]u8, @ptrToInt(bytes.ptr));
  217e3d:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  217e41:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
        self.freeFn(self, non_const_ptr[0..bytes.len]);
  217e45:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  217e49:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  217e4d:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  217e51:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  217e55:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
  217e59:	48 39 f1             	cmp    rcx,rsi
  217e5c:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
  217e60:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
  217e64:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  217e68:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  217e6c:	76 10                	jbe    217e7e <Allocator_free.40+0x7e>
  217e6e:	48 8d 3d 83 b5 02 00 	lea    rdi,[rip+0x2b583]        # 2433f8 <__unnamed_20>
  217e75:	31 c0                	xor    eax,eax
  217e77:	89 c6                	mov    esi,eax
  217e79:	e8 82 37 ff ff       	call   20b600 <panic>
  217e7e:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
  217e82:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  217e86:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  217e8a:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  217e8e:	48 83 e9 00          	sub    rcx,0x0
  217e92:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  217e96:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  217e9a:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  217e9e:	ff d1                	call   rcx
    pub fn free(self: *Allocator, memory: var) void {
  217ea0:	48 83 c4 60          	add    rsp,0x60
  217ea4:	5d                   	pop    rbp
  217ea5:	c3                   	ret    
  217ea6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  217ead:	00 00 00 

0000000000217eb0 <AlignedArrayList(AbbrevAttr,8)_addOne>:
        pub fn addOne(self: *Self) !*T {
  217eb0:	55                   	push   rbp
  217eb1:	48 89 e5             	mov    rbp,rsp
  217eb4:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  217ebb:	48 89 f8             	mov    rax,rdi
  217ebe:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            const new_length = self.len + 1;
  217ec2:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  217ec6:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  217eca:	48 83 c2 01          	add    rdx,0x1
  217ece:	0f 92 c1             	setb   cl
  217ed1:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  217ed5:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  217ed9:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  217edd:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  217ee1:	88 4d 9f             	mov    BYTE PTR [rbp-0x61],cl
  217ee4:	72 57                	jb     217f3d <AlignedArrayList(AbbrevAttr,8)_addOne+0x8d>
  217ee6:	eb 65                	jmp    217f4d <AlignedArrayList(AbbrevAttr,8)_addOne+0x9d>
            try self.ensureCapacity(new_length);
  217ee8:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  217eec:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  217ef0:	66 89 45 9c          	mov    WORD PTR [rbp-0x64],ax
  217ef4:	e8 97 3d ff ff       	call   20bc90 <__zig_return_error>
  217ef9:	66 8b 45 9c          	mov    ax,WORD PTR [rbp-0x64]
  217efd:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  217f01:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  217f05:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  217f09:	48 89 39             	mov    QWORD PTR [rcx],rdi
  217f0c:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  217f10:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  217f14:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  217f18:	48 81 c4 80 00 00 00 	add    rsp,0x80
  217f1f:	5d                   	pop    rbp
  217f20:	c3                   	ret    
            const result = &self.items[self.len];
  217f21:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  217f25:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  217f29:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
  217f2d:	48 3b 48 08          	cmp    rcx,QWORD PTR [rax+0x8]
  217f31:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  217f35:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
  217f39:	72 4c                	jb     217f87 <AlignedArrayList(AbbrevAttr,8)_addOne+0xd7>
  217f3b:	eb 3a                	jmp    217f77 <AlignedArrayList(AbbrevAttr,8)_addOne+0xc7>
  217f3d:	48 8d 3d 84 b2 02 00 	lea    rdi,[rip+0x2b284]        # 2431c8 <__unnamed_4>
  217f44:	31 c0                	xor    eax,eax
  217f46:	89 c6                	mov    esi,eax
            const new_length = self.len + 1;
  217f48:	e8 b3 36 ff ff       	call   20b600 <panic>
  217f4d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  217f51:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
            try self.ensureCapacity(new_length);
  217f55:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  217f59:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  217f5d:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  217f61:	e8 7a 00 00 00       	call   217fe0 <AlignedArrayList(AbbrevAttr,8)_ensureCapacity>
  217f66:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  217f6a:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  217f6f:	0f 85 73 ff ff ff    	jne    217ee8 <AlignedArrayList(AbbrevAttr,8)_addOne+0x38>
  217f75:	eb aa                	jmp    217f21 <AlignedArrayList(AbbrevAttr,8)_addOne+0x71>
  217f77:	48 8d 3d 7a b4 02 00 	lea    rdi,[rip+0x2b47a]        # 2433f8 <__unnamed_20>
  217f7e:	31 c0                	xor    eax,eax
  217f80:	89 c6                	mov    esi,eax
            const result = &self.items[self.len];
  217f82:	e8 79 36 ff ff       	call   20b600 <panic>
  217f87:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  217f8b:	48 c1 e0 04          	shl    rax,0x4
  217f8f:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  217f93:	48 03 01             	add    rax,QWORD PTR [rcx]
  217f96:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
            self.len = new_length;
  217f9a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  217f9e:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  217fa2:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
            return result;
  217fa6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  217faa:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  217fb0:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  217fb4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  217fb8:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  217fbc:	48 89 02             	mov    QWORD PTR [rdx],rax
  217fbf:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  217fc3:	48 89 42 08          	mov    QWORD PTR [rdx+0x8],rax
  217fc7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  217fcb:	48 81 c4 80 00 00 00 	add    rsp,0x80
  217fd2:	5d                   	pop    rbp
  217fd3:	c3                   	ret    
  217fd4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  217fdb:	00 00 00 00 00 

0000000000217fe0 <AlignedArrayList(AbbrevAttr,8)_ensureCapacity>:
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  217fe0:	55                   	push   rbp
  217fe1:	48 89 e5             	mov    rbp,rsp
  217fe4:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  217feb:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  217fef:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
            var better_capacity = self.items.len;
  217ff3:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  217ff7:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  217ffb:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
            if (better_capacity >= new_capacity) return;
  217fff:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  218003:	48 3b 55 c0          	cmp    rdx,QWORD PTR [rbp-0x40]
  218007:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  21800b:	72 11                	jb     21801e <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0x3e>
  21800d:	31 c0                	xor    eax,eax
  21800f:	66 89 c1             	mov    cx,ax
  218012:	66 89 c8             	mov    ax,cx
  218015:	48 81 c4 90 00 00 00 	add    rsp,0x90
  21801c:	5d                   	pop    rbp
  21801d:	c3                   	ret    
            while (true) {
  21801e:	eb 00                	jmp    218020 <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0x40>
  218020:	eb 00                	jmp    218022 <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0x42>
  218022:	31 c0                	xor    eax,eax
  218024:	88 c1                	mov    cl,al
                better_capacity += better_capacity / 2 + 8;
  218026:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  21802a:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  21802e:	f6 c1 01             	test   cl,0x1
  218031:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  218035:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  218039:	0f 85 8e 00 00 00    	jne    2180cd <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0xed>
  21803f:	eb 72                	jmp    2180b3 <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0xd3>
                if (better_capacity >= new_capacity) break;
  218041:	eb 02                	jmp    218045 <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0x65>
            while (true) {
  218043:	eb db                	jmp    218020 <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0x40>
  218045:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
            self.items = try self.allocator.alignedRealloc(T, A, self.items, better_capacity);
  218049:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21804d:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  218051:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
  218055:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  218059:	4c 8b 45 b8          	mov    r8,QWORD PTR [rbp-0x48]
  21805d:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  218061:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  218065:	e8 d6 00 00 00       	call   218140 <Allocator_alignedRealloc.41>
  21806a:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  21806f:	74 1e                	je     21808f <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0xaf>
  218071:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  218075:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  218079:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  21807d:	e8 0e 3c ff ff       	call   20bc90 <__zig_return_error>
  218082:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  218086:	48 81 c4 90 00 00 00 	add    rsp,0x90
  21808d:	5d                   	pop    rbp
  21808e:	c3                   	ret    
  21808f:	31 c0                	xor    eax,eax
  218091:	66 89 c1             	mov    cx,ax
  218094:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  218098:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  21809c:	48 89 16             	mov    QWORD PTR [rsi],rdx
  21809f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  2180a3:	48 89 56 08          	mov    QWORD PTR [rsi+0x8],rdx
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  2180a7:	66 89 c8             	mov    ax,cx
  2180aa:	48 81 c4 90 00 00 00 	add    rsp,0x90
  2180b1:	5d                   	pop    rbp
  2180b2:	c3                   	ret    
                better_capacity += better_capacity / 2 + 8;
  2180b3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  2180b7:	48 c1 e8 01          	shr    rax,0x1
  2180bb:	48 83 c0 08          	add    rax,0x8
  2180bf:	0f 92 c1             	setb   cl
  2180c2:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  2180c6:	88 4d 87             	mov    BYTE PTR [rbp-0x79],cl
  2180c9:	72 12                	jb     2180dd <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0xfd>
  2180cb:	eb 20                	jmp    2180ed <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0x10d>
  2180cd:	48 8d 3d 6c b1 02 00 	lea    rdi,[rip+0x2b16c]        # 243240 <__unnamed_7>
  2180d4:	31 c0                	xor    eax,eax
  2180d6:	89 c6                	mov    esi,eax
  2180d8:	e8 23 35 ff ff       	call   20b600 <panic>
  2180dd:	48 8d 3d e4 b0 02 00 	lea    rdi,[rip+0x2b0e4]        # 2431c8 <__unnamed_4>
  2180e4:	31 c0                	xor    eax,eax
  2180e6:	89 c6                	mov    esi,eax
  2180e8:	e8 13 35 ff ff       	call   20b600 <panic>
  2180ed:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2180f1:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  2180f5:	48 01 c8             	add    rax,rcx
  2180f8:	0f 92 c2             	setb   dl
  2180fb:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  218102:	88 95 77 ff ff ff    	mov    BYTE PTR [rbp-0x89],dl
  218108:	72 02                	jb     21810c <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0x12c>
  21810a:	eb 10                	jmp    21811c <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0x13c>
  21810c:	48 8d 3d b5 b0 02 00 	lea    rdi,[rip+0x2b0b5]        # 2431c8 <__unnamed_4>
  218113:	31 c0                	xor    eax,eax
  218115:	89 c6                	mov    esi,eax
  218117:	e8 e4 34 ff ff       	call   20b600 <panic>
  21811c:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  218123:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                if (better_capacity >= new_capacity) break;
  218127:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  21812b:	48 3b 4d c0          	cmp    rcx,QWORD PTR [rbp-0x40]
  21812f:	0f 83 0c ff ff ff    	jae    218041 <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0x61>
  218135:	e9 09 ff ff ff       	jmp    218043 <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0x63>
  21813a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000218140 <Allocator_alignedRealloc.41>:
    pub fn alignedRealloc(self: *Allocator, comptime T: type, comptime alignment: u29, old_mem: []align(alignment) T, n: usize) ![]align(alignment) T {
  218140:	55                   	push   rbp
  218141:	48 89 e5             	mov    rbp,rsp
  218144:	53                   	push   rbx
  218145:	48 81 ec 88 01 00 00 	sub    rsp,0x188
  21814c:	48 89 f8             	mov    rax,rdi
  21814f:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
  218156:	4c 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],r8
        if (old_mem.len == 0) {
  21815d:	48 83 79 08 00       	cmp    QWORD PTR [rcx+0x8],0x0
  218162:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  218169:	48 89 b5 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rsi
  218170:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
  218177:	48 89 bd b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rdi
  21817e:	75 64                	jne    2181e4 <Allocator_alignedRealloc.41+0xa4>
  218180:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
            return self.alignedAlloc(T, alignment, n);
  218184:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  21818b:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  218192:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  218199:	e8 12 04 00 00       	call   2185b0 <Allocator_alignedAlloc.42>
  21819e:	66 83 7d e0 00       	cmp    WORD PTR [rbp-0x20],0x0
  2181a3:	74 0e                	je     2181b3 <Allocator_alignedRealloc.41+0x73>
  2181a5:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  2181ac:	e8 df 3a ff ff       	call   20bc90 <__zig_return_error>
  2181b1:	eb 02                	jmp    2181b5 <Allocator_alignedRealloc.41+0x75>
  2181b3:	eb 00                	jmp    2181b5 <Allocator_alignedRealloc.41+0x75>
  2181b5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2181b9:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  2181c0:	48 89 01             	mov    QWORD PTR [rcx],rax
  2181c3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2181c7:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2181cb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2181cf:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  2181d3:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  2181da:	48 81 c4 88 01 00 00 	add    rsp,0x188
  2181e1:	5b                   	pop    rbx
  2181e2:	5d                   	pop    rbp
  2181e3:	c3                   	ret    
        if (old_mem.len == 0) {
  2181e4:	eb 00                	jmp    2181e6 <Allocator_alignedRealloc.41+0xa6>
        if (n == 0) {
  2181e6:	48 83 bd 10 ff ff ff 	cmp    QWORD PTR [rbp-0xf0],0x0
  2181ed:	00 
  2181ee:	75 4b                	jne    21823b <Allocator_alignedRealloc.41+0xfb>
            self.free(old_mem);
  2181f0:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
  2181f7:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  2181fe:	e8 bd 06 00 00       	call   2188c0 <Allocator_free.43>
            return ([*]align(alignment) T)(undefined)[0..0];
  218203:	48 8b 35 ee 0c ff ff 	mov    rsi,QWORD PTR [rip+0xffffffffffff0cee]        # 208ef8 <__unnamed_92>
  21820a:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  218211:	48 89 37             	mov    QWORD PTR [rdi],rsi
  218214:	48 8b 35 e5 0c ff ff 	mov    rsi,QWORD PTR [rip+0xffffffffffff0ce5]        # 208f00 <__unnamed_92+0x8>
  21821b:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  21821f:	48 8b 35 e2 0c ff ff 	mov    rsi,QWORD PTR [rip+0xffffffffffff0ce2]        # 208f08 <__unnamed_92+0x10>
  218226:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  21822a:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  218231:	48 81 c4 88 01 00 00 	add    rsp,0x188
  218238:	5b                   	pop    rbx
  218239:	5d                   	pop    rbp
  21823a:	c3                   	ret    
        if (n == 0) {
  21823b:	eb 00                	jmp    21823d <Allocator_alignedRealloc.41+0xfd>
  21823d:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  218241:	b8 10 00 00 00       	mov    eax,0x10
  218246:	89 c2                	mov    edx,eax
        const old_byte_slice = @sliceToBytes(old_mem);
  218248:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  21824f:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  218252:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  218256:	48 8b 71 08          	mov    rsi,QWORD PTR [rcx+0x8]
  21825a:	48 c1 e6 04          	shl    rsi,0x4
  21825e:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  218262:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  218266:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
  21826d:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  218271:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  218278:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  21827f:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  218286:	e8 85 d1 ff ff       	call   215410 <mul>
  21828b:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  218290:	74 44                	je     2182d6 <Allocator_alignedRealloc.41+0x196>
  218292:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  218299:	e8 f2 39 ff ff       	call   20bc90 <__zig_return_error>
  21829e:	48 8b 3d 6b 0c ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff0c6b]        # 208f10 <__unnamed_93>
  2182a5:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  2182ac:	48 89 38             	mov    QWORD PTR [rax],rdi
  2182af:	48 8b 3d 62 0c ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff0c62]        # 208f18 <__unnamed_93+0x8>
  2182b6:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  2182ba:	48 8b 3d 5f 0c ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff0c5f]        # 208f20 <__unnamed_93+0x10>
  2182c1:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  2182c5:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  2182cc:	48 81 c4 88 01 00 00 	add    rsp,0x188
  2182d3:	5b                   	pop    rbx
  2182d4:	5d                   	pop    rbp
  2182d5:	c3                   	ret    
  2182d6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2182da:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  2182e1:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  2182e5:	48 8d 8d 00 ff ff ff 	lea    rcx,[rbp-0x100]
  2182ec:	41 b9 08 00 00 00    	mov    r9d,0x8
  2182f2:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  2182f9:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
        const byte_slice = try self.reallocFn(self, old_byte_slice, byte_count, alignment);
  218300:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  218307:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  21830b:	48 8b b5 18 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe8]
  218312:	4c 8b 85 f8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x108]
  218319:	4c 8b 95 c8 fe ff ff 	mov    r10,QWORD PTR [rbp-0x138]
  218320:	48 89 b5 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rsi
  218327:	4c 89 d6             	mov    rsi,r10
  21832a:	4c 8b 9d a8 fe ff ff 	mov    r11,QWORD PTR [rbp-0x158]
  218331:	48 89 95 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdx
  218338:	4c 89 da             	mov    rdx,r11
  21833b:	48 8b 9d a0 fe ff ff 	mov    rbx,QWORD PTR [rbp-0x160]
  218342:	ff d3                	call   rbx
  218344:	66 83 7d 98 00       	cmp    WORD PTR [rbp-0x68],0x0
  218349:	74 5d                	je     2183a8 <Allocator_alignedRealloc.41+0x268>
  21834b:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  21834f:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  218356:	66 89 85 9e fe ff ff 	mov    WORD PTR [rbp-0x162],ax
  21835d:	e8 2e 39 ff ff       	call   20bc90 <__zig_return_error>
  218362:	66 8b 85 9e fe ff ff 	mov    ax,WORD PTR [rbp-0x162]
  218369:	66 89 85 68 ff ff ff 	mov    WORD PTR [rbp-0x98],ax
  218370:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  218377:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  21837e:	48 89 39             	mov    QWORD PTR [rcx],rdi
  218381:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  218388:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21838c:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  218393:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  218397:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21839e:	48 81 c4 88 01 00 00 	add    rsp,0x188
  2183a5:	5b                   	pop    rbx
  2183a6:	5d                   	pop    rbp
  2183a7:	c3                   	ret    
  2183a8:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2183ac:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  2183b3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  2183b7:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
        assert(byte_slice.len == byte_count);
  2183be:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  2183c5:	48 3b 85 f8 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x108]
  2183cc:	0f 94 c1             	sete   cl
  2183cf:	0f b6 f9             	movzx  edi,cl
  2183d2:	e8 29 2c ff ff       	call   20b000 <assert>
        if (n > old_mem.len) {
  2183d7:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  2183de:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  2183e5:	48 3b 42 08          	cmp    rax,QWORD PTR [rdx+0x8]
  2183e9:	76 71                	jbe    21845c <Allocator_alignedRealloc.41+0x31c>
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  2183eb:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  2183f2:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  2183f9:	48 39 c8             	cmp    rax,rcx
  2183fc:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  218403:	48 89 8d 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rcx
  21840a:	76 78                	jbe    218484 <Allocator_alignedRealloc.41+0x344>
  21840c:	eb 66                	jmp    218474 <Allocator_alignedRealloc.41+0x334>
  21840e:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  218415:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
  21841c:	48 39 c8             	cmp    rax,rcx
  21841f:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  218426:	73 32                	jae    21845a <Allocator_alignedRealloc.41+0x31a>
  218428:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  21842f:	48 03 8d 58 ff ff ff 	add    rcx,QWORD PTR [rbp-0xa8]
  218436:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
                byte.* = undefined;
  21843d:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  218444:	88 01                	mov    BYTE PTR [rcx],al
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  218446:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  21844d:	48 83 c1 01          	add    rcx,0x1
  218451:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
  218458:	eb b4                	jmp    21840e <Allocator_alignedRealloc.41+0x2ce>
        if (n > old_mem.len) {
  21845a:	eb 02                	jmp    21845e <Allocator_alignedRealloc.41+0x31e>
  21845c:	eb 00                	jmp    21845e <Allocator_alignedRealloc.41+0x31e>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  21845e:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  218465:	48 83 e0 07          	and    rax,0x7
  218469:	48 83 f8 00          	cmp    rax,0x0
  21846d:	74 7b                	je     2184ea <Allocator_alignedRealloc.41+0x3aa>
  21846f:	e9 a1 00 00 00       	jmp    218515 <Allocator_alignedRealloc.41+0x3d5>
  218474:	48 8d 3d 7d af 02 00 	lea    rdi,[rip+0x2af7d]        # 2433f8 <__unnamed_20>
  21847b:	31 c0                	xor    eax,eax
  21847d:	89 c6                	mov    esi,eax
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  21847f:	e8 7c 31 ff ff       	call   20b600 <panic>
  218484:	be aa 00 00 00       	mov    esi,0xaa
  218489:	b8 08 00 00 00       	mov    eax,0x8
  21848e:	89 c2                	mov    edx,eax
  218490:	48 8d 8d e0 fe ff ff 	lea    rcx,[rbp-0x120]
  218497:	48 8b bd 90 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x170]
  21849e:	48 03 bd e8 fe ff ff 	add    rdi,QWORD PTR [rbp-0x118]
  2184a5:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
  2184ac:	48 8b bd 88 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x178]
  2184b3:	4c 8b 85 90 fe ff ff 	mov    r8,QWORD PTR [rbp-0x170]
  2184ba:	4c 29 c7             	sub    rdi,r8
  2184bd:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  2184c4:	48 89 cf             	mov    rdi,rcx
  2184c7:	e8 e4 c3 01 00       	call   2348b0 <memset>
  2184cc:	48 c7 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],0x0
  2184d3:	00 00 00 00 
  2184d7:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  2184de:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  2184e5:	e9 24 ff ff ff       	jmp    21840e <Allocator_alignedRealloc.41+0x2ce>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  2184ea:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  2184f1:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
  2184f8:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  2184ff:	48 89 c1             	mov    rcx,rax
  218502:	48 83 e1 0f          	and    rcx,0xf
  218506:	48 83 f9 00          	cmp    rcx,0x0
  21850a:	48 89 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rax
  218511:	74 12                	je     218525 <Allocator_alignedRealloc.41+0x3e5>
  218513:	eb 7f                	jmp    218594 <Allocator_alignedRealloc.41+0x454>
  218515:	48 8d 3d b4 b0 02 00 	lea    rdi,[rip+0x2b0b4]        # 2435d0 <__unnamed_75>
  21851c:	31 c0                	xor    eax,eax
  21851e:	89 c6                	mov    esi,eax
  218520:	e8 db 30 ff ff       	call   20b600 <panic>
  218525:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  21852c:	48 c1 e8 04          	shr    rax,0x4
  218530:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  218537:	66 c7 85 20 ff ff ff 	mov    WORD PTR [rbp-0xe0],0x0
  21853e:	00 00 
  218540:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  218547:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  21854e:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  218555:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  21855c:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  218563:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  21856a:	48 89 01             	mov    QWORD PTR [rcx],rax
  21856d:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  218574:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  218578:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21857f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  218583:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21858a:	48 81 c4 88 01 00 00 	add    rsp,0x188
  218591:	5b                   	pop    rbx
  218592:	5d                   	pop    rbp
  218593:	c3                   	ret    
  218594:	48 8d 3d 4d b0 02 00 	lea    rdi,[rip+0x2b04d]        # 2435e8 <__unnamed_76>
  21859b:	31 c0                	xor    eax,eax
  21859d:	89 c6                	mov    esi,eax
  21859f:	e8 5c 30 ff ff       	call   20b600 <panic>
  2185a4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2185ab:	00 00 00 00 00 

00000000002185b0 <Allocator_alignedAlloc.42>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  2185b0:	55                   	push   rbp
  2185b1:	48 89 e5             	mov    rbp,rsp
  2185b4:	48 81 ec 20 01 00 00 	sub    rsp,0x120
  2185bb:	48 89 f8             	mov    rax,rdi
  2185be:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  2185c5:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  2185cc:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  2185d3:	00 
  2185d4:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  2185db:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  2185e2:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  2185e9:	75 37                	jne    218622 <Allocator_alignedAlloc.42+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  2185eb:	48 8b 05 36 09 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff0936]        # 208f28 <__unnamed_94>
  2185f2:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  2185f9:	48 89 01             	mov    QWORD PTR [rcx],rax
  2185fc:	48 8b 05 2d 09 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff092d]        # 208f30 <__unnamed_94+0x8>
  218603:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  218607:	48 8b 05 2a 09 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff092a]        # 208f38 <__unnamed_94+0x10>
  21860e:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  218612:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  218619:	48 81 c4 20 01 00 00 	add    rsp,0x120
  218620:	5d                   	pop    rbp
  218621:	c3                   	ret    
        if (n == 0) {
  218622:	eb 00                	jmp    218624 <Allocator_alignedAlloc.42+0x74>
  218624:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  218628:	b8 10 00 00 00       	mov    eax,0x10
  21862d:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  21862f:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  218636:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21863d:	e8 ce cd ff ff       	call   215410 <mul>
  218642:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  218647:	74 43                	je     21868c <Allocator_alignedAlloc.42+0xdc>
  218649:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  218650:	e8 3b 36 ff ff       	call   20bc90 <__zig_return_error>
  218655:	48 8b 3d e4 08 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff08e4]        # 208f40 <__unnamed_95>
  21865c:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  218663:	48 89 38             	mov    QWORD PTR [rax],rdi
  218666:	48 8b 3d db 08 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff08db]        # 208f48 <__unnamed_95+0x8>
  21866d:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  218671:	48 8b 3d d8 08 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff08d8]        # 208f50 <__unnamed_95+0x10>
  218678:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  21867c:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  218683:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21868a:	5d                   	pop    rbp
  21868b:	c3                   	ret    
  21868c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  218690:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  218697:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  21869b:	41 b8 08 00 00 00    	mov    r8d,0x8
  2186a1:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  2186a8:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  2186af:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  2186b6:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  2186b9:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  2186c0:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  2186c7:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  2186ce:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  2186d5:	4c 89 ce             	mov    rsi,r9
  2186d8:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  2186df:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  2186e6:	4c 89 d1             	mov    rcx,r10
  2186e9:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  2186f0:	41 ff d3             	call   r11
  2186f3:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  2186f8:	74 50                	je     21874a <Allocator_alignedAlloc.42+0x19a>
  2186fa:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  2186fe:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  218705:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  21870c:	e8 7f 35 ff ff       	call   20bc90 <__zig_return_error>
  218711:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  218718:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  21871c:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  218720:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  218727:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21872a:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  21872e:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  218732:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  218736:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  21873a:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  218741:	48 81 c4 20 01 00 00 	add    rsp,0x120
  218748:	5d                   	pop    rbp
  218749:	c3                   	ret    
  21874a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  21874e:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  218755:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  218759:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  218760:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  218767:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  21876e:	0f 94 c1             	sete   cl
  218771:	0f b6 f9             	movzx  edi,cl
  218774:	e8 87 28 ff ff       	call   20b000 <assert>
  218779:	be aa 00 00 00       	mov    esi,0xaa
  21877e:	bf 08 00 00 00       	mov    edi,0x8
  218783:	89 fa                	mov    edx,edi
  218785:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  21878c:	48 89 c7             	mov    rdi,rax
  21878f:	e8 1c c1 01 00       	call   2348b0 <memset>
  218794:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  21879b:	00 00 00 00 
  21879f:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  2187a6:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  2187ad:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  2187b4:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  2187bb:	48 39 c8             	cmp    rax,rcx
  2187be:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  2187c5:	73 32                	jae    2187f9 <Allocator_alignedAlloc.42+0x249>
  2187c7:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  2187ce:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  2187d5:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  2187dc:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  2187e3:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  2187e5:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  2187ec:	48 83 c1 01          	add    rcx,0x1
  2187f0:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  2187f7:	eb b4                	jmp    2187ad <Allocator_alignedAlloc.42+0x1fd>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  2187f9:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  218800:	48 83 e0 07          	and    rax,0x7
  218804:	48 83 f8 00          	cmp    rax,0x0
  218808:	75 28                	jne    218832 <Allocator_alignedAlloc.42+0x282>
  21880a:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  218811:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  218815:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  21881c:	48 89 c1             	mov    rcx,rax
  21881f:	48 83 e1 0f          	and    rcx,0xf
  218823:	48 83 f9 00          	cmp    rcx,0x0
  218827:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  21882e:	74 12                	je     218842 <Allocator_alignedAlloc.42+0x292>
  218830:	eb 6f                	jmp    2188a1 <Allocator_alignedAlloc.42+0x2f1>
  218832:	48 8d 3d 97 ad 02 00 	lea    rdi,[rip+0x2ad97]        # 2435d0 <__unnamed_75>
  218839:	31 c0                	xor    eax,eax
  21883b:	89 c6                	mov    esi,eax
  21883d:	e8 be 2d ff ff       	call   20b600 <panic>
  218842:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  218849:	48 c1 e8 04          	shr    rax,0x4
  21884d:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  218851:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  218858:	00 00 
  21885a:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  21885e:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  218865:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  218869:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  21886d:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  218874:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21887b:	48 89 01             	mov    QWORD PTR [rcx],rax
  21887e:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  218885:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  218889:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  21888d:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  218891:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  218898:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21889f:	5d                   	pop    rbp
  2188a0:	c3                   	ret    
  2188a1:	48 8d 3d 40 ad 02 00 	lea    rdi,[rip+0x2ad40]        # 2435e8 <__unnamed_76>
  2188a8:	31 c0                	xor    eax,eax
  2188aa:	89 c6                	mov    esi,eax
  2188ac:	e8 4f 2d ff ff       	call   20b600 <panic>
  2188b1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2188b8:	0f 1f 84 00 00 00 00 
  2188bf:	00 

00000000002188c0 <Allocator_free.43>:
    pub fn free(self: *Allocator, memory: var) void {
  2188c0:	55                   	push   rbp
  2188c1:	48 89 e5             	mov    rbp,rsp
  2188c4:	48 83 ec 60          	sub    rsp,0x60
  2188c8:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
        const bytes = @sliceToBytes(memory);
  2188cc:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  2188cf:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  2188d3:	48 8b 76 08          	mov    rsi,QWORD PTR [rsi+0x8]
  2188d7:	48 c1 e6 04          	shl    rsi,0x4
  2188db:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2188df:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  2188e3:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  2188e7:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2188eb:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        if (bytes.len == 0) return;
  2188ef:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
  2188f4:	75 06                	jne    2188fc <Allocator_free.43+0x3c>
  2188f6:	48 83 c4 60          	add    rsp,0x60
  2188fa:	5d                   	pop    rbp
  2188fb:	c3                   	ret    
  2188fc:	31 c0                	xor    eax,eax
  2188fe:	89 c1                	mov    ecx,eax
        const non_const_ptr = @intToPtr([*]u8, @ptrToInt(bytes.ptr));
  218900:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  218904:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
        self.freeFn(self, non_const_ptr[0..bytes.len]);
  218908:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  21890c:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  218910:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  218914:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  218918:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
  21891c:	48 39 f1             	cmp    rcx,rsi
  21891f:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
  218923:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
  218927:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  21892b:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  21892f:	76 10                	jbe    218941 <Allocator_free.43+0x81>
  218931:	48 8d 3d c0 aa 02 00 	lea    rdi,[rip+0x2aac0]        # 2433f8 <__unnamed_20>
  218938:	31 c0                	xor    eax,eax
  21893a:	89 c6                	mov    esi,eax
  21893c:	e8 bf 2c ff ff       	call   20b600 <panic>
  218941:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
  218945:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  218949:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  21894d:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  218951:	48 83 e9 00          	sub    rcx,0x0
  218955:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  218959:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  21895d:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  218961:	ff d1                	call   rcx
    pub fn free(self: *Allocator, memory: var) void {
  218963:	48 83 c4 60          	add    rsp,0x60
  218967:	5d                   	pop    rbp
  218968:	c3                   	ret    
  218969:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000218970 <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity>:
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  218970:	55                   	push   rbp
  218971:	48 89 e5             	mov    rbp,rsp
  218974:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  21897b:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  21897f:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
            var better_capacity = self.items.len;
  218983:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  218987:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  21898b:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
            if (better_capacity >= new_capacity) return;
  21898f:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  218993:	48 3b 55 c0          	cmp    rdx,QWORD PTR [rbp-0x40]
  218997:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  21899b:	72 11                	jb     2189ae <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0x3e>
  21899d:	31 c0                	xor    eax,eax
  21899f:	66 89 c1             	mov    cx,ax
  2189a2:	66 89 c8             	mov    ax,cx
  2189a5:	48 81 c4 90 00 00 00 	add    rsp,0x90
  2189ac:	5d                   	pop    rbp
  2189ad:	c3                   	ret    
            while (true) {
  2189ae:	eb 00                	jmp    2189b0 <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0x40>
  2189b0:	eb 00                	jmp    2189b2 <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0x42>
  2189b2:	31 c0                	xor    eax,eax
  2189b4:	88 c1                	mov    cl,al
                better_capacity += better_capacity / 2 + 8;
  2189b6:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  2189ba:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  2189be:	f6 c1 01             	test   cl,0x1
  2189c1:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  2189c5:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  2189c9:	0f 85 8e 00 00 00    	jne    218a5d <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0xed>
  2189cf:	eb 72                	jmp    218a43 <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0xd3>
                if (better_capacity >= new_capacity) break;
  2189d1:	eb 02                	jmp    2189d5 <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0x65>
            while (true) {
  2189d3:	eb db                	jmp    2189b0 <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0x40>
  2189d5:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
            self.items = try self.allocator.alignedRealloc(T, A, self.items, better_capacity);
  2189d9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2189dd:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  2189e1:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
  2189e5:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  2189e9:	4c 8b 45 b8          	mov    r8,QWORD PTR [rbp-0x48]
  2189ed:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  2189f1:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  2189f5:	e8 d6 00 00 00       	call   218ad0 <Allocator_alignedRealloc.44>
  2189fa:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  2189ff:	74 1e                	je     218a1f <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0xaf>
  218a01:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  218a05:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  218a09:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  218a0d:	e8 7e 32 ff ff       	call   20bc90 <__zig_return_error>
  218a12:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  218a16:	48 81 c4 90 00 00 00 	add    rsp,0x90
  218a1d:	5d                   	pop    rbp
  218a1e:	c3                   	ret    
  218a1f:	31 c0                	xor    eax,eax
  218a21:	66 89 c1             	mov    cx,ax
  218a24:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  218a28:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  218a2c:	48 89 16             	mov    QWORD PTR [rsi],rdx
  218a2f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  218a33:	48 89 56 08          	mov    QWORD PTR [rsi+0x8],rdx
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  218a37:	66 89 c8             	mov    ax,cx
  218a3a:	48 81 c4 90 00 00 00 	add    rsp,0x90
  218a41:	5d                   	pop    rbp
  218a42:	c3                   	ret    
                better_capacity += better_capacity / 2 + 8;
  218a43:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  218a47:	48 c1 e8 01          	shr    rax,0x1
  218a4b:	48 83 c0 08          	add    rax,0x8
  218a4f:	0f 92 c1             	setb   cl
  218a52:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  218a56:	88 4d 87             	mov    BYTE PTR [rbp-0x79],cl
  218a59:	72 12                	jb     218a6d <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0xfd>
  218a5b:	eb 20                	jmp    218a7d <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0x10d>
  218a5d:	48 8d 3d dc a7 02 00 	lea    rdi,[rip+0x2a7dc]        # 243240 <__unnamed_7>
  218a64:	31 c0                	xor    eax,eax
  218a66:	89 c6                	mov    esi,eax
  218a68:	e8 93 2b ff ff       	call   20b600 <panic>
  218a6d:	48 8d 3d 54 a7 02 00 	lea    rdi,[rip+0x2a754]        # 2431c8 <__unnamed_4>
  218a74:	31 c0                	xor    eax,eax
  218a76:	89 c6                	mov    esi,eax
  218a78:	e8 83 2b ff ff       	call   20b600 <panic>
  218a7d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  218a81:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  218a85:	48 01 c8             	add    rax,rcx
  218a88:	0f 92 c2             	setb   dl
  218a8b:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  218a92:	88 95 77 ff ff ff    	mov    BYTE PTR [rbp-0x89],dl
  218a98:	72 02                	jb     218a9c <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0x12c>
  218a9a:	eb 10                	jmp    218aac <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0x13c>
  218a9c:	48 8d 3d 25 a7 02 00 	lea    rdi,[rip+0x2a725]        # 2431c8 <__unnamed_4>
  218aa3:	31 c0                	xor    eax,eax
  218aa5:	89 c6                	mov    esi,eax
  218aa7:	e8 54 2b ff ff       	call   20b600 <panic>
  218aac:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  218ab3:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                if (better_capacity >= new_capacity) break;
  218ab7:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  218abb:	48 3b 4d c0          	cmp    rcx,QWORD PTR [rbp-0x40]
  218abf:	0f 83 0c ff ff ff    	jae    2189d1 <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0x61>
  218ac5:	e9 09 ff ff ff       	jmp    2189d3 <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0x63>
  218aca:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000218ad0 <Allocator_alignedRealloc.44>:
    pub fn alignedRealloc(self: *Allocator, comptime T: type, comptime alignment: u29, old_mem: []align(alignment) T, n: usize) ![]align(alignment) T {
  218ad0:	55                   	push   rbp
  218ad1:	48 89 e5             	mov    rbp,rsp
  218ad4:	53                   	push   rbx
  218ad5:	48 81 ec 88 01 00 00 	sub    rsp,0x188
  218adc:	48 89 f8             	mov    rax,rdi
  218adf:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
  218ae6:	4c 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],r8
        if (old_mem.len == 0) {
  218aed:	48 83 79 08 00       	cmp    QWORD PTR [rcx+0x8],0x0
  218af2:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  218af9:	48 89 b5 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rsi
  218b00:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
  218b07:	48 89 bd b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rdi
  218b0e:	75 64                	jne    218b74 <Allocator_alignedRealloc.44+0xa4>
  218b10:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
            return self.alignedAlloc(T, alignment, n);
  218b14:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  218b1b:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  218b22:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  218b29:	e8 22 04 00 00       	call   218f50 <Allocator_alignedAlloc.45>
  218b2e:	66 83 7d e0 00       	cmp    WORD PTR [rbp-0x20],0x0
  218b33:	74 0e                	je     218b43 <Allocator_alignedRealloc.44+0x73>
  218b35:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  218b3c:	e8 4f 31 ff ff       	call   20bc90 <__zig_return_error>
  218b41:	eb 02                	jmp    218b45 <Allocator_alignedRealloc.44+0x75>
  218b43:	eb 00                	jmp    218b45 <Allocator_alignedRealloc.44+0x75>
  218b45:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  218b49:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  218b50:	48 89 01             	mov    QWORD PTR [rcx],rax
  218b53:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  218b57:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  218b5b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  218b5f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  218b63:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  218b6a:	48 81 c4 88 01 00 00 	add    rsp,0x188
  218b71:	5b                   	pop    rbx
  218b72:	5d                   	pop    rbp
  218b73:	c3                   	ret    
        if (old_mem.len == 0) {
  218b74:	eb 00                	jmp    218b76 <Allocator_alignedRealloc.44+0xa6>
        if (n == 0) {
  218b76:	48 83 bd 10 ff ff ff 	cmp    QWORD PTR [rbp-0xf0],0x0
  218b7d:	00 
  218b7e:	75 4b                	jne    218bcb <Allocator_alignedRealloc.44+0xfb>
            self.free(old_mem);
  218b80:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
  218b87:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  218b8e:	e8 dd 06 00 00       	call   219270 <Allocator_free.46>
            return ([*]align(alignment) T)(undefined)[0..0];
  218b93:	48 8b 35 be 03 ff ff 	mov    rsi,QWORD PTR [rip+0xffffffffffff03be]        # 208f58 <__unnamed_96>
  218b9a:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  218ba1:	48 89 37             	mov    QWORD PTR [rdi],rsi
  218ba4:	48 8b 35 b5 03 ff ff 	mov    rsi,QWORD PTR [rip+0xffffffffffff03b5]        # 208f60 <__unnamed_96+0x8>
  218bab:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  218baf:	48 8b 35 b2 03 ff ff 	mov    rsi,QWORD PTR [rip+0xffffffffffff03b2]        # 208f68 <__unnamed_96+0x10>
  218bb6:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  218bba:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  218bc1:	48 81 c4 88 01 00 00 	add    rsp,0x188
  218bc8:	5b                   	pop    rbx
  218bc9:	5d                   	pop    rbp
  218bca:	c3                   	ret    
        if (n == 0) {
  218bcb:	eb 00                	jmp    218bcd <Allocator_alignedRealloc.44+0xfd>
  218bcd:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  218bd1:	b8 28 00 00 00       	mov    eax,0x28
  218bd6:	89 c2                	mov    edx,eax
        const old_byte_slice = @sliceToBytes(old_mem);
  218bd8:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  218bdf:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  218be2:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  218be6:	48 6b 71 08 28       	imul   rsi,QWORD PTR [rcx+0x8],0x28
  218beb:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  218bef:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  218bf3:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
  218bfa:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  218bfe:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  218c05:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  218c0c:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  218c13:	e8 f8 c7 ff ff       	call   215410 <mul>
  218c18:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  218c1d:	74 44                	je     218c63 <Allocator_alignedRealloc.44+0x193>
  218c1f:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  218c26:	e8 65 30 ff ff       	call   20bc90 <__zig_return_error>
  218c2b:	48 8b 3d 3e 03 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff033e]        # 208f70 <__unnamed_97>
  218c32:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  218c39:	48 89 38             	mov    QWORD PTR [rax],rdi
  218c3c:	48 8b 3d 35 03 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff0335]        # 208f78 <__unnamed_97+0x8>
  218c43:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  218c47:	48 8b 3d 32 03 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff0332]        # 208f80 <__unnamed_97+0x10>
  218c4e:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  218c52:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  218c59:	48 81 c4 88 01 00 00 	add    rsp,0x188
  218c60:	5b                   	pop    rbx
  218c61:	5d                   	pop    rbp
  218c62:	c3                   	ret    
  218c63:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  218c67:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  218c6e:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  218c72:	48 8d 8d 00 ff ff ff 	lea    rcx,[rbp-0x100]
  218c79:	41 b9 08 00 00 00    	mov    r9d,0x8
  218c7f:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  218c86:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
        const byte_slice = try self.reallocFn(self, old_byte_slice, byte_count, alignment);
  218c8d:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  218c94:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  218c98:	48 8b b5 18 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe8]
  218c9f:	4c 8b 85 f8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x108]
  218ca6:	4c 8b 95 c8 fe ff ff 	mov    r10,QWORD PTR [rbp-0x138]
  218cad:	48 89 b5 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rsi
  218cb4:	4c 89 d6             	mov    rsi,r10
  218cb7:	4c 8b 9d a8 fe ff ff 	mov    r11,QWORD PTR [rbp-0x158]
  218cbe:	48 89 95 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdx
  218cc5:	4c 89 da             	mov    rdx,r11
  218cc8:	48 8b 9d a0 fe ff ff 	mov    rbx,QWORD PTR [rbp-0x160]
  218ccf:	ff d3                	call   rbx
  218cd1:	66 83 7d 98 00       	cmp    WORD PTR [rbp-0x68],0x0
  218cd6:	74 5d                	je     218d35 <Allocator_alignedRealloc.44+0x265>
  218cd8:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  218cdc:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  218ce3:	66 89 85 9e fe ff ff 	mov    WORD PTR [rbp-0x162],ax
  218cea:	e8 a1 2f ff ff       	call   20bc90 <__zig_return_error>
  218cef:	66 8b 85 9e fe ff ff 	mov    ax,WORD PTR [rbp-0x162]
  218cf6:	66 89 85 68 ff ff ff 	mov    WORD PTR [rbp-0x98],ax
  218cfd:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  218d04:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  218d0b:	48 89 39             	mov    QWORD PTR [rcx],rdi
  218d0e:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  218d15:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  218d19:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  218d20:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  218d24:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  218d2b:	48 81 c4 88 01 00 00 	add    rsp,0x188
  218d32:	5b                   	pop    rbx
  218d33:	5d                   	pop    rbp
  218d34:	c3                   	ret    
  218d35:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  218d39:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  218d40:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  218d44:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
        assert(byte_slice.len == byte_count);
  218d4b:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  218d52:	48 3b 85 f8 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x108]
  218d59:	0f 94 c1             	sete   cl
  218d5c:	0f b6 f9             	movzx  edi,cl
  218d5f:	e8 9c 22 ff ff       	call   20b000 <assert>
        if (n > old_mem.len) {
  218d64:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  218d6b:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  218d72:	48 3b 42 08          	cmp    rax,QWORD PTR [rdx+0x8]
  218d76:	76 71                	jbe    218de9 <Allocator_alignedRealloc.44+0x319>
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  218d78:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  218d7f:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  218d86:	48 39 c8             	cmp    rax,rcx
  218d89:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  218d90:	48 89 8d 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rcx
  218d97:	76 78                	jbe    218e11 <Allocator_alignedRealloc.44+0x341>
  218d99:	eb 66                	jmp    218e01 <Allocator_alignedRealloc.44+0x331>
  218d9b:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  218da2:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
  218da9:	48 39 c8             	cmp    rax,rcx
  218dac:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  218db3:	73 32                	jae    218de7 <Allocator_alignedRealloc.44+0x317>
  218db5:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  218dbc:	48 03 8d 58 ff ff ff 	add    rcx,QWORD PTR [rbp-0xa8]
  218dc3:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
                byte.* = undefined;
  218dca:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  218dd1:	88 01                	mov    BYTE PTR [rcx],al
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  218dd3:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  218dda:	48 83 c1 01          	add    rcx,0x1
  218dde:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
  218de5:	eb b4                	jmp    218d9b <Allocator_alignedRealloc.44+0x2cb>
        if (n > old_mem.len) {
  218de7:	eb 02                	jmp    218deb <Allocator_alignedRealloc.44+0x31b>
  218de9:	eb 00                	jmp    218deb <Allocator_alignedRealloc.44+0x31b>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  218deb:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  218df2:	48 83 e0 07          	and    rax,0x7
  218df6:	48 83 f8 00          	cmp    rax,0x0
  218dfa:	74 7b                	je     218e77 <Allocator_alignedRealloc.44+0x3a7>
  218dfc:	e9 ae 00 00 00       	jmp    218eaf <Allocator_alignedRealloc.44+0x3df>
  218e01:	48 8d 3d f0 a5 02 00 	lea    rdi,[rip+0x2a5f0]        # 2433f8 <__unnamed_20>
  218e08:	31 c0                	xor    eax,eax
  218e0a:	89 c6                	mov    esi,eax
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  218e0c:	e8 ef 27 ff ff       	call   20b600 <panic>
  218e11:	be aa 00 00 00       	mov    esi,0xaa
  218e16:	b8 08 00 00 00       	mov    eax,0x8
  218e1b:	89 c2                	mov    edx,eax
  218e1d:	48 8d 8d e0 fe ff ff 	lea    rcx,[rbp-0x120]
  218e24:	48 8b bd 90 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x170]
  218e2b:	48 03 bd e8 fe ff ff 	add    rdi,QWORD PTR [rbp-0x118]
  218e32:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
  218e39:	48 8b bd 88 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x178]
  218e40:	4c 8b 85 90 fe ff ff 	mov    r8,QWORD PTR [rbp-0x170]
  218e47:	4c 29 c7             	sub    rdi,r8
  218e4a:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  218e51:	48 89 cf             	mov    rdi,rcx
  218e54:	e8 57 ba 01 00       	call   2348b0 <memset>
  218e59:	48 c7 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],0x0
  218e60:	00 00 00 00 
  218e64:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  218e6b:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  218e72:	e9 24 ff ff ff       	jmp    218d9b <Allocator_alignedRealloc.44+0x2cb>
  218e77:	b8 28 00 00 00       	mov    eax,0x28
  218e7c:	89 c1                	mov    ecx,eax
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  218e7e:	48 8b 95 e8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x118]
  218e85:	48 89 95 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdx
  218e8c:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  218e93:	48 89 d0             	mov    rax,rdx
  218e96:	31 f6                	xor    esi,esi
  218e98:	48 89 95 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rdx
  218e9f:	89 f2                	mov    edx,esi
  218ea1:	48 f7 f1             	div    rcx
  218ea4:	48 83 fa 00          	cmp    rdx,0x0
  218ea8:	74 15                	je     218ebf <Allocator_alignedRealloc.44+0x3ef>
  218eaa:	e9 87 00 00 00       	jmp    218f36 <Allocator_alignedRealloc.44+0x466>
  218eaf:	48 8d 3d 1a a7 02 00 	lea    rdi,[rip+0x2a71a]        # 2435d0 <__unnamed_75>
  218eb6:	31 c0                	xor    eax,eax
  218eb8:	89 c6                	mov    esi,eax
  218eba:	e8 41 27 ff ff       	call   20b600 <panic>
  218ebf:	b8 28 00 00 00       	mov    eax,0x28
  218ec4:	89 c1                	mov    ecx,eax
  218ec6:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  218ecd:	31 d2                	xor    edx,edx
  218ecf:	48 f7 f1             	div    rcx
  218ed2:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  218ed9:	66 c7 85 20 ff ff ff 	mov    WORD PTR [rbp-0xe0],0x0
  218ee0:	00 00 
  218ee2:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  218ee9:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  218ef0:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  218ef7:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  218efe:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  218f05:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  218f0c:	48 89 01             	mov    QWORD PTR [rcx],rax
  218f0f:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  218f16:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  218f1a:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  218f21:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  218f25:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  218f2c:	48 81 c4 88 01 00 00 	add    rsp,0x188
  218f33:	5b                   	pop    rbx
  218f34:	5d                   	pop    rbp
  218f35:	c3                   	ret    
  218f36:	48 8d 3d ab a6 02 00 	lea    rdi,[rip+0x2a6ab]        # 2435e8 <__unnamed_76>
  218f3d:	31 c0                	xor    eax,eax
  218f3f:	89 c6                	mov    esi,eax
  218f41:	e8 ba 26 ff ff       	call   20b600 <panic>
  218f46:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  218f4d:	00 00 00 

0000000000218f50 <Allocator_alignedAlloc.45>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  218f50:	55                   	push   rbp
  218f51:	48 89 e5             	mov    rbp,rsp
  218f54:	48 81 ec 20 01 00 00 	sub    rsp,0x120
  218f5b:	48 89 f8             	mov    rax,rdi
  218f5e:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  218f65:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  218f6c:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  218f73:	00 
  218f74:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  218f7b:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  218f82:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  218f89:	75 37                	jne    218fc2 <Allocator_alignedAlloc.45+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  218f8b:	48 8b 05 f6 ff fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffefff6]        # 208f88 <__unnamed_98>
  218f92:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  218f99:	48 89 01             	mov    QWORD PTR [rcx],rax
  218f9c:	48 8b 05 ed ff fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffeffed]        # 208f90 <__unnamed_98+0x8>
  218fa3:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  218fa7:	48 8b 05 ea ff fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffeffea]        # 208f98 <__unnamed_98+0x10>
  218fae:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  218fb2:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  218fb9:	48 81 c4 20 01 00 00 	add    rsp,0x120
  218fc0:	5d                   	pop    rbp
  218fc1:	c3                   	ret    
        if (n == 0) {
  218fc2:	eb 00                	jmp    218fc4 <Allocator_alignedAlloc.45+0x74>
  218fc4:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  218fc8:	b8 28 00 00 00       	mov    eax,0x28
  218fcd:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  218fcf:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  218fd6:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  218fdd:	e8 2e c4 ff ff       	call   215410 <mul>
  218fe2:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  218fe7:	74 43                	je     21902c <Allocator_alignedAlloc.45+0xdc>
  218fe9:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  218ff0:	e8 9b 2c ff ff       	call   20bc90 <__zig_return_error>
  218ff5:	48 8b 3d a4 ff fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffeffa4]        # 208fa0 <__unnamed_99>
  218ffc:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  219003:	48 89 38             	mov    QWORD PTR [rax],rdi
  219006:	48 8b 3d 9b ff fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffeff9b]        # 208fa8 <__unnamed_99+0x8>
  21900d:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  219011:	48 8b 3d 98 ff fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffeff98]        # 208fb0 <__unnamed_99+0x10>
  219018:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  21901c:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  219023:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21902a:	5d                   	pop    rbp
  21902b:	c3                   	ret    
  21902c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  219030:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  219037:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  21903b:	41 b8 08 00 00 00    	mov    r8d,0x8
  219041:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  219048:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  21904f:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  219056:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  219059:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  219060:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  219067:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  21906e:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  219075:	4c 89 ce             	mov    rsi,r9
  219078:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  21907f:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  219086:	4c 89 d1             	mov    rcx,r10
  219089:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  219090:	41 ff d3             	call   r11
  219093:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  219098:	74 50                	je     2190ea <Allocator_alignedAlloc.45+0x19a>
  21909a:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  21909e:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  2190a5:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  2190ac:	e8 df 2b ff ff       	call   20bc90 <__zig_return_error>
  2190b1:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  2190b8:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  2190bc:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  2190c0:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  2190c7:	48 89 39             	mov    QWORD PTR [rcx],rdi
  2190ca:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  2190ce:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  2190d2:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  2190d6:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  2190da:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  2190e1:	48 81 c4 20 01 00 00 	add    rsp,0x120
  2190e8:	5d                   	pop    rbp
  2190e9:	c3                   	ret    
  2190ea:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2190ee:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  2190f5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2190f9:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  219100:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  219107:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  21910e:	0f 94 c1             	sete   cl
  219111:	0f b6 f9             	movzx  edi,cl
  219114:	e8 e7 1e ff ff       	call   20b000 <assert>
  219119:	be aa 00 00 00       	mov    esi,0xaa
  21911e:	bf 08 00 00 00       	mov    edi,0x8
  219123:	89 fa                	mov    edx,edi
  219125:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  21912c:	48 89 c7             	mov    rdi,rax
  21912f:	e8 7c b7 01 00       	call   2348b0 <memset>
  219134:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  21913b:	00 00 00 00 
  21913f:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  219146:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  21914d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  219154:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  21915b:	48 39 c8             	cmp    rax,rcx
  21915e:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  219165:	73 32                	jae    219199 <Allocator_alignedAlloc.45+0x249>
  219167:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21916e:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  219175:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  21917c:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  219183:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  219185:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21918c:	48 83 c1 01          	add    rcx,0x1
  219190:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  219197:	eb b4                	jmp    21914d <Allocator_alignedAlloc.45+0x1fd>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  219199:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  2191a0:	48 83 e0 07          	and    rax,0x7
  2191a4:	48 83 f8 00          	cmp    rax,0x0
  2191a8:	75 32                	jne    2191dc <Allocator_alignedAlloc.45+0x28c>
  2191aa:	b8 28 00 00 00       	mov    eax,0x28
  2191af:	89 c1                	mov    ecx,eax
  2191b1:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
  2191b8:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
  2191bc:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
  2191c3:	48 89 d0             	mov    rax,rdx
  2191c6:	31 f6                	xor    esi,esi
  2191c8:	48 89 95 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdx
  2191cf:	89 f2                	mov    edx,esi
  2191d1:	48 f7 f1             	div    rcx
  2191d4:	48 83 fa 00          	cmp    rdx,0x0
  2191d8:	74 12                	je     2191ec <Allocator_alignedAlloc.45+0x29c>
  2191da:	eb 77                	jmp    219253 <Allocator_alignedAlloc.45+0x303>
  2191dc:	48 8d 3d ed a3 02 00 	lea    rdi,[rip+0x2a3ed]        # 2435d0 <__unnamed_75>
  2191e3:	31 c0                	xor    eax,eax
  2191e5:	89 c6                	mov    esi,eax
  2191e7:	e8 14 24 ff ff       	call   20b600 <panic>
  2191ec:	b8 28 00 00 00       	mov    eax,0x28
  2191f1:	89 c1                	mov    ecx,eax
  2191f3:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  2191fa:	31 d2                	xor    edx,edx
  2191fc:	48 f7 f1             	div    rcx
  2191ff:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  219203:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  21920a:	00 00 
  21920c:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  219210:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  219217:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  21921b:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  21921f:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  219226:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21922d:	48 89 01             	mov    QWORD PTR [rcx],rax
  219230:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  219237:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21923b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  21923f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  219243:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21924a:	48 81 c4 20 01 00 00 	add    rsp,0x120
  219251:	5d                   	pop    rbp
  219252:	c3                   	ret    
  219253:	48 8d 3d 8e a3 02 00 	lea    rdi,[rip+0x2a38e]        # 2435e8 <__unnamed_76>
  21925a:	31 c0                	xor    eax,eax
  21925c:	89 c6                	mov    esi,eax
  21925e:	e8 9d 23 ff ff       	call   20b600 <panic>
  219263:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21926a:	84 00 00 00 00 00 

0000000000219270 <Allocator_free.46>:
    pub fn free(self: *Allocator, memory: var) void {
  219270:	55                   	push   rbp
  219271:	48 89 e5             	mov    rbp,rsp
  219274:	48 83 ec 60          	sub    rsp,0x60
  219278:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
        const bytes = @sliceToBytes(memory);
  21927c:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  21927f:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  219283:	48 6b 76 08 28       	imul   rsi,QWORD PTR [rsi+0x8],0x28
  219288:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21928c:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  219290:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  219294:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  219298:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        if (bytes.len == 0) return;
  21929c:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
  2192a1:	75 06                	jne    2192a9 <Allocator_free.46+0x39>
  2192a3:	48 83 c4 60          	add    rsp,0x60
  2192a7:	5d                   	pop    rbp
  2192a8:	c3                   	ret    
  2192a9:	31 c0                	xor    eax,eax
  2192ab:	89 c1                	mov    ecx,eax
        const non_const_ptr = @intToPtr([*]u8, @ptrToInt(bytes.ptr));
  2192ad:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  2192b1:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
        self.freeFn(self, non_const_ptr[0..bytes.len]);
  2192b5:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  2192b9:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  2192bd:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  2192c1:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  2192c5:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
  2192c9:	48 39 f1             	cmp    rcx,rsi
  2192cc:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
  2192d0:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
  2192d4:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  2192d8:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  2192dc:	76 10                	jbe    2192ee <Allocator_free.46+0x7e>
  2192de:	48 8d 3d 13 a1 02 00 	lea    rdi,[rip+0x2a113]        # 2433f8 <__unnamed_20>
  2192e5:	31 c0                	xor    eax,eax
  2192e7:	89 c6                	mov    esi,eax
  2192e9:	e8 12 23 ff ff       	call   20b600 <panic>
  2192ee:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
  2192f2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  2192f6:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  2192fa:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  2192fe:	48 83 e9 00          	sub    rcx,0x0
  219302:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  219306:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  21930a:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  21930e:	ff d1                	call   rcx
    pub fn free(self: *Allocator, memory: var) void {
  219310:	48 83 c4 60          	add    rsp,0x60
  219314:	5d                   	pop    rbp
  219315:	c3                   	ret    
  219316:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  21931d:	00 00 00 

0000000000219320 <getAbbrevTableEntry>:
fn getAbbrevTableEntry(abbrev_table: *const AbbrevTable, abbrev_code: u64) ?*const AbbrevTableEntry {
  219320:	55                   	push   rbp
  219321:	48 89 e5             	mov    rbp,rsp
  219324:	48 83 ec 50          	sub    rsp,0x50
  219328:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  21932c:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  219330:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
    for (abbrev_table.toSliceConst()) |*table_entry| {
  219334:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  219338:	48 89 c7             	mov    rdi,rax
  21933b:	e8 70 12 00 00       	call   21a5b0 <AlignedArrayList(AbbrevTableEntry,1)_toSliceConst>
  219340:	be aa 00 00 00       	mov    esi,0xaa
  219345:	b9 08 00 00 00       	mov    ecx,0x8
  21934a:	89 ca                	mov    edx,ecx
  21934c:	48 8d 45 c8          	lea    rax,[rbp-0x38]
  219350:	48 89 c7             	mov    rdi,rax
  219353:	e8 58 b5 01 00       	call   2348b0 <memset>
  219358:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
  21935f:	00 
  219360:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  219364:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  219368:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  21936c:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  219370:	48 39 c8             	cmp    rax,rcx
  219373:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  219377:	73 36                	jae    2193af <getAbbrevTableEntry+0x8f>
  219379:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  21937d:	48 6b c8 38          	imul   rcx,rax,0x38
  219381:	48 03 4d f0          	add    rcx,QWORD PTR [rbp-0x10]
  219385:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
        if (table_entry.abbrev_code == abbrev_code) return table_entry;
  219389:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  21938d:	48 8b 49 08          	mov    rcx,QWORD PTR [rcx+0x8]
  219391:	48 3b 4d d0          	cmp    rcx,QWORD PTR [rbp-0x30]
  219395:	75 0a                	jne    2193a1 <getAbbrevTableEntry+0x81>
  219397:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21939b:	48 83 c4 50          	add    rsp,0x50
  21939f:	5d                   	pop    rbp
  2193a0:	c3                   	ret    
    for (abbrev_table.toSliceConst()) |*table_entry| {
  2193a1:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  2193a5:	48 83 c0 01          	add    rax,0x1
  2193a9:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  2193ad:	eb b9                	jmp    219368 <getAbbrevTableEntry+0x48>
  2193af:	31 c0                	xor    eax,eax
    return null;
  2193b1:	48 83 c4 50          	add    rsp,0x50
  2193b5:	5d                   	pop    rbp
  2193b6:	c3                   	ret    
  2193b7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  2193be:	00 00 

00000000002193c0 <AlignedArrayList(Attr,8)_init>:
        pub fn init(allocator: *Allocator) Self {
  2193c0:	55                   	push   rbp
  2193c1:	48 89 e5             	mov    rbp,rsp
  2193c4:	48 89 f8             	mov    rax,rdi
  2193c7:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
                .allocator = allocator,
  2193cb:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
            return Self{
  2193cf:	48 8b 0d da 6e fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe6eda]        # 2002b0 <__unnamed_100>
  2193d6:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  2193da:	48 8b 0d d7 6e fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe6ed7]        # 2002b8 <__unnamed_100+0x8>
  2193e1:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  2193e5:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  2193ec:	00 
  2193ed:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2193f1:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  2193f5:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  2193f8:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2193fc:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  219400:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  219404:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  219408:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  21940c:	48 89 4f 18          	mov    QWORD PTR [rdi+0x18],rcx
  219410:	5d                   	pop    rbp
  219411:	c3                   	ret    
  219412:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  219419:	1f 84 00 00 00 00 00 

0000000000219420 <AlignedArrayList(Attr,8)_resize>:
        pub fn resize(self: *Self, new_len: usize) !void {
  219420:	55                   	push   rbp
  219421:	48 89 e5             	mov    rbp,rsp
  219424:	48 83 ec 30          	sub    rsp,0x30
  219428:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  21942c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
            try self.ensureCapacity(new_len);
  219430:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  219434:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  219438:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  21943c:	e8 0f 12 00 00       	call   21a650 <AlignedArrayList(Attr,8)_ensureCapacity>
  219441:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  219445:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  21944a:	74 1b                	je     219467 <AlignedArrayList(Attr,8)_resize+0x47>
  21944c:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  219450:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  219454:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  219458:	e8 33 28 ff ff       	call   20bc90 <__zig_return_error>
  21945d:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  219461:	48 83 c4 30          	add    rsp,0x30
  219465:	5d                   	pop    rbp
  219466:	c3                   	ret    
  219467:	31 c0                	xor    eax,eax
  219469:	66 89 c1             	mov    cx,ax
            self.len = new_len;
  21946c:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  219470:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  219474:	48 89 72 10          	mov    QWORD PTR [rdx+0x10],rsi
        pub fn resize(self: *Self, new_len: usize) !void {
  219478:	66 89 c8             	mov    ax,cx
  21947b:	48 83 c4 30          	add    rsp,0x30
  21947f:	5d                   	pop    rbp
  219480:	c3                   	ret    
  219481:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  219488:	0f 1f 84 00 00 00 00 
  21948f:	00 

0000000000219490 <AlignedArrayList(AbbrevAttr,8)_toSliceConst>:
        pub fn toSliceConst(self: Self) []align(A) const T {
  219490:	55                   	push   rbp
  219491:	48 89 e5             	mov    rbp,rsp
  219494:	48 83 ec 40          	sub    rsp,0x40
  219498:	48 89 f8             	mov    rax,rdi
  21949b:	31 c9                	xor    ecx,ecx
  21949d:	89 ca                	mov    edx,ecx
            return self.items[0..self.len];
  21949f:	4c 8b 46 10          	mov    r8,QWORD PTR [rsi+0x10]
  2194a3:	4c 8b 4e 08          	mov    r9,QWORD PTR [rsi+0x8]
  2194a7:	4c 39 c2             	cmp    rdx,r8
  2194aa:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  2194ae:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  2194b2:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  2194b6:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
  2194ba:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
  2194be:	76 10                	jbe    2194d0 <AlignedArrayList(AbbrevAttr,8)_toSliceConst+0x40>
  2194c0:	48 8d 3d 31 9f 02 00 	lea    rdi,[rip+0x29f31]        # 2433f8 <__unnamed_20>
  2194c7:	31 c0                	xor    eax,eax
  2194c9:	89 c6                	mov    esi,eax
  2194cb:	e8 30 21 ff ff       	call   20b600 <panic>
  2194d0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2194d4:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  2194d8:	48 39 c8             	cmp    rax,rcx
  2194db:	76 10                	jbe    2194ed <AlignedArrayList(AbbrevAttr,8)_toSliceConst+0x5d>
  2194dd:	48 8d 3d 14 9f 02 00 	lea    rdi,[rip+0x29f14]        # 2433f8 <__unnamed_20>
  2194e4:	31 c0                	xor    eax,eax
  2194e6:	89 c6                	mov    esi,eax
  2194e8:	e8 13 21 ff ff       	call   20b600 <panic>
  2194ed:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2194f1:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  2194f4:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  2194f8:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  2194fc:	48 83 e9 00          	sub    rcx,0x0
  219500:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  219504:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  219508:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  21950c:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  21950f:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  219513:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  219517:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21951b:	48 83 c4 40          	add    rsp,0x40
  21951f:	5d                   	pop    rbp
  219520:	c3                   	ret    
  219521:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  219528:	0f 1f 84 00 00 00 00 
  21952f:	00 

0000000000219530 <parseFormValue>:
fn parseFormValue(allocator: *mem.Allocator, in_stream: var, form_id: u64, is_64: bool) ParseFormValueError!FormValue {
  219530:	55                   	push   rbp
  219531:	48 89 e5             	mov    rbp,rsp
  219534:	48 81 ec e0 09 00 00 	sub    rsp,0x9e0
  21953b:	44 88 c8             	mov    al,r9b
  21953e:	49 89 fa             	mov    r10,rdi
  219541:	48 89 95 a8 f7 ff ff 	mov    QWORD PTR [rbp-0x858],rdx
  219548:	48 89 8d a0 f7 ff ff 	mov    QWORD PTR [rbp-0x860],rcx
  21954f:	4c 89 85 98 f7 ff ff 	mov    QWORD PTR [rbp-0x868],r8
  219556:	24 01                	and    al,0x1
  219558:	88 85 97 f7 ff ff    	mov    BYTE PTR [rbp-0x869],al
    return switch (form_id) {
  21955e:	48 8b 8d 98 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x868]
  219565:	48 83 c1 ff          	add    rcx,0xffffffffffffffff
  219569:	48 89 ca             	mov    rdx,rcx
  21956c:	48 83 ea 1f          	sub    rdx,0x1f
  219570:	48 89 b5 48 f7 ff ff 	mov    QWORD PTR [rbp-0x8b8],rsi
  219577:	4c 89 95 40 f7 ff ff 	mov    QWORD PTR [rbp-0x8c0],r10
  21957e:	48 89 bd 38 f7 ff ff 	mov    QWORD PTR [rbp-0x8c8],rdi
  219585:	48 89 8d 30 f7 ff ff 	mov    QWORD PTR [rbp-0x8d0],rcx
  21958c:	48 89 95 28 f7 ff ff 	mov    QWORD PTR [rbp-0x8d8],rdx
  219593:	77 17                	ja     2195ac <parseFormValue+0x7c>
  219595:	48 8d 05 88 77 fe ff 	lea    rax,[rip+0xfffffffffffe7788]        # 200d24 <__unnamed_181+0x6c>
  21959c:	48 8b 8d 30 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x8d0]
  2195a3:	48 63 14 88          	movsxd rdx,DWORD PTR [rax+rcx*4]
  2195a7:	48 01 c2             	add    rdx,rax
  2195aa:	ff e2                	jmp    rdx
  2195ac:	48 8d 05 9d fa fe ff 	lea    rax,[rip+0xfffffffffffefa9d]        # 209050 <__unnamed_101>
  2195b3:	48 89 85 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rax
  2195ba:	e9 8f 0f 00 00       	jmp    21a54e <parseFormValue+0x101e>
  2195bf:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
        DW.FORM_addr => FormValue{ .Address = try parseFormValueTargetAddrSize(in_stream) },
  2195c3:	48 8b 95 a0 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x860]
  2195ca:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  2195d1:	e8 2a 1a 00 00       	call   21b000 <parseFormValueTargetAddrSize>
  2195d6:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  2195db:	74 5a                	je     219637 <parseFormValue+0x107>
  2195dd:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  2195e1:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  2195e8:	66 89 85 1e f7 ff ff 	mov    WORD PTR [rbp-0x8e2],ax
  2195ef:	e8 9c 26 ff ff       	call   20bc90 <__zig_return_error>
  2195f4:	b9 28 00 00 00       	mov    ecx,0x28
  2195f9:	89 ca                	mov    edx,ecx
  2195fb:	48 8d 7d b8          	lea    rdi,[rbp-0x48]
  2195ff:	66 8b 85 1e f7 ff ff 	mov    ax,WORD PTR [rbp-0x8e2]
  219606:	66 89 45 b8          	mov    WORD PTR [rbp-0x48],ax
  21960a:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  219611:	48 89 bd 10 f7 ff ff 	mov    QWORD PTR [rbp-0x8f0],rdi
  219618:	48 89 f7             	mov    rdi,rsi
  21961b:	48 8b b5 10 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8f0]
  219622:	e8 d9 b2 01 00       	call   234900 <memcpy>
  219627:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  21962e:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  219635:	5d                   	pop    rbp
  219636:	c3                   	ret    
  219637:	48 8d 85 a0 f8 ff ff 	lea    rax,[rbp-0x760]
  21963e:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  219642:	c6 45 b0 00          	mov    BYTE PTR [rbp-0x50],0x0
  219646:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
  21964a:	66 c7 85 a0 f8 ff ff 	mov    WORD PTR [rbp-0x760],0x0
  219651:	00 00 
  219653:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  219657:	48 89 8d a8 f8 ff ff 	mov    QWORD PTR [rbp-0x758],rcx
  21965e:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  219662:	48 89 8d b0 f8 ff ff 	mov    QWORD PTR [rbp-0x750],rcx
  219669:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  21966d:	48 89 8d b8 f8 ff ff 	mov    QWORD PTR [rbp-0x748],rcx
  219674:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  219678:	48 89 8d c0 f8 ff ff 	mov    QWORD PTR [rbp-0x740],rcx
    return switch (form_id) {
  21967f:	48 89 85 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rax
  219686:	e9 c3 0e 00 00       	jmp    21a54e <parseFormValue+0x101e>
  21968b:	48 8d bd 70 ff ff ff 	lea    rdi,[rbp-0x90]
  219692:	b8 01 00 00 00       	mov    eax,0x1
  219697:	41 89 c0             	mov    r8d,eax
        DW.FORM_block1 => parseFormValueBlock(allocator, in_stream, 1),
  21969a:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  2196a1:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  2196a8:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  2196af:	e8 ec 19 00 00       	call   21b0a0 <parseFormValueBlock>
  2196b4:	48 8d 8d 70 ff ff ff 	lea    rcx,[rbp-0x90]
    return switch (form_id) {
  2196bb:	48 89 8d 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rcx
  2196c2:	e9 87 0e 00 00       	jmp    21a54e <parseFormValue+0x101e>
  2196c7:	48 8d bd 48 ff ff ff 	lea    rdi,[rbp-0xb8]
  2196ce:	b8 02 00 00 00       	mov    eax,0x2
  2196d3:	41 89 c0             	mov    r8d,eax
        DW.FORM_block2 => parseFormValueBlock(allocator, in_stream, 2),
  2196d6:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  2196dd:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  2196e4:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  2196eb:	e8 b0 19 00 00       	call   21b0a0 <parseFormValueBlock>
  2196f0:	48 8d 8d 48 ff ff ff 	lea    rcx,[rbp-0xb8]
    return switch (form_id) {
  2196f7:	48 89 8d 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rcx
  2196fe:	e9 4b 0e 00 00       	jmp    21a54e <parseFormValue+0x101e>
  219703:	48 8d bd 20 ff ff ff 	lea    rdi,[rbp-0xe0]
  21970a:	b8 04 00 00 00       	mov    eax,0x4
  21970f:	41 89 c0             	mov    r8d,eax
        DW.FORM_block4 => parseFormValueBlock(allocator, in_stream, 4),
  219712:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  219719:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  219720:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  219727:	e8 74 19 00 00       	call   21b0a0 <parseFormValueBlock>
  21972c:	48 8d 8d 20 ff ff ff 	lea    rcx,[rbp-0xe0]
    return switch (form_id) {
  219733:	48 89 8d 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rcx
  21973a:	e9 0f 0e 00 00       	jmp    21a54e <parseFormValue+0x101e>
  21973f:	48 8d bd 10 ff ff ff 	lea    rdi,[rbp-0xf0]
            const block_len = try readULeb128(in_stream);
  219746:	48 8b 95 a0 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x860]
  21974d:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  219754:	e8 77 d9 ff ff       	call   2170d0 <readULeb128>
  219759:	66 83 bd 10 ff ff ff 	cmp    WORD PTR [rbp-0xf0],0x0
  219760:	00 
  219761:	74 63                	je     2197c6 <parseFormValue+0x296>
  219763:	66 8b 85 10 ff ff ff 	mov    ax,WORD PTR [rbp-0xf0]
  21976a:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  219771:	66 89 85 0e f7 ff ff 	mov    WORD PTR [rbp-0x8f2],ax
  219778:	e8 13 25 ff ff       	call   20bc90 <__zig_return_error>
  21977d:	b9 28 00 00 00       	mov    ecx,0x28
  219782:	89 ca                	mov    edx,ecx
  219784:	48 8d bd d8 fe ff ff 	lea    rdi,[rbp-0x128]
  21978b:	66 8b 85 0e f7 ff ff 	mov    ax,WORD PTR [rbp-0x8f2]
  219792:	66 89 85 d8 fe ff ff 	mov    WORD PTR [rbp-0x128],ax
  219799:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  2197a0:	48 89 bd 00 f7 ff ff 	mov    QWORD PTR [rbp-0x900],rdi
  2197a7:	48 89 f7             	mov    rdi,rsi
  2197aa:	48 8b b5 00 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x900]
  2197b1:	e8 4a b1 01 00       	call   234900 <memcpy>
  2197b6:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  2197bd:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  2197c4:	5d                   	pop    rbp
  2197c5:	c3                   	ret    
  2197c6:	48 8d bd b0 fe ff ff 	lea    rdi,[rbp-0x150]
  2197cd:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  2197d4:	48 89 85 88 f7 ff ff 	mov    QWORD PTR [rbp-0x878],rax
            return parseFormValueBlockLen(allocator, in_stream, block_len);
  2197db:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  2197e2:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  2197e9:	4c 8b 85 88 f7 ff ff 	mov    r8,QWORD PTR [rbp-0x878]
  2197f0:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  2197f7:	e8 d4 19 00 00       	call   21b1d0 <parseFormValueBlockLen>
  2197fc:	66 83 bd b0 fe ff ff 	cmp    WORD PTR [rbp-0x150],0x0
  219803:	00 
  219804:	74 0e                	je     219814 <parseFormValue+0x2e4>
  219806:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  21980d:	e8 7e 24 ff ff       	call   20bc90 <__zig_return_error>
  219812:	eb 02                	jmp    219816 <parseFormValue+0x2e6>
  219814:	eb 00                	jmp    219816 <parseFormValue+0x2e6>
  219816:	b8 28 00 00 00       	mov    eax,0x28
  21981b:	89 c2                	mov    edx,eax
  21981d:	48 8d 8d b0 fe ff ff 	lea    rcx,[rbp-0x150]
  219824:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  21982b:	48 89 f7             	mov    rdi,rsi
  21982e:	48 89 ce             	mov    rsi,rcx
  219831:	e8 ca b0 01 00       	call   234900 <memcpy>
  219836:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  21983d:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  219844:	5d                   	pop    rbp
  219845:	c3                   	ret    
  219846:	48 8d bd 88 fe ff ff 	lea    rdi,[rbp-0x178]
  21984d:	45 31 c0             	xor    r8d,r8d
  219850:	b8 01 00 00 00       	mov    eax,0x1
  219855:	41 89 c1             	mov    r9d,eax
        DW.FORM_data1 => parseFormValueConstant(allocator, in_stream, false, 1),
  219858:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  21985f:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  219866:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  21986d:	e8 ae 1a 00 00       	call   21b320 <parseFormValueConstant>
  219872:	48 8d 8d 88 fe ff ff 	lea    rcx,[rbp-0x178]
    return switch (form_id) {
  219879:	48 89 8d 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rcx
  219880:	e9 c9 0c 00 00       	jmp    21a54e <parseFormValue+0x101e>
  219885:	48 8d bd 60 fe ff ff 	lea    rdi,[rbp-0x1a0]
  21988c:	45 31 c0             	xor    r8d,r8d
  21988f:	b8 02 00 00 00       	mov    eax,0x2
  219894:	41 89 c1             	mov    r9d,eax
        DW.FORM_data2 => parseFormValueConstant(allocator, in_stream, false, 2),
  219897:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  21989e:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  2198a5:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  2198ac:	e8 6f 1a 00 00       	call   21b320 <parseFormValueConstant>
  2198b1:	48 8d 8d 60 fe ff ff 	lea    rcx,[rbp-0x1a0]
    return switch (form_id) {
  2198b8:	48 89 8d 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rcx
  2198bf:	e9 8a 0c 00 00       	jmp    21a54e <parseFormValue+0x101e>
  2198c4:	48 8d bd 38 fe ff ff 	lea    rdi,[rbp-0x1c8]
  2198cb:	45 31 c0             	xor    r8d,r8d
  2198ce:	b8 04 00 00 00       	mov    eax,0x4
  2198d3:	41 89 c1             	mov    r9d,eax
        DW.FORM_data4 => parseFormValueConstant(allocator, in_stream, false, 4),
  2198d6:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  2198dd:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  2198e4:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  2198eb:	e8 30 1a 00 00       	call   21b320 <parseFormValueConstant>
  2198f0:	48 8d 8d 38 fe ff ff 	lea    rcx,[rbp-0x1c8]
    return switch (form_id) {
  2198f7:	48 89 8d 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rcx
  2198fe:	e9 4b 0c 00 00       	jmp    21a54e <parseFormValue+0x101e>
  219903:	48 8d bd 10 fe ff ff 	lea    rdi,[rbp-0x1f0]
  21990a:	45 31 c0             	xor    r8d,r8d
  21990d:	b8 08 00 00 00       	mov    eax,0x8
  219912:	41 89 c1             	mov    r9d,eax
        DW.FORM_data8 => parseFormValueConstant(allocator, in_stream, false, 8),
  219915:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  21991c:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  219923:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  21992a:	e8 f1 19 00 00       	call   21b320 <parseFormValueConstant>
  21992f:	48 8d 8d 10 fe ff ff 	lea    rcx,[rbp-0x1f0]
    return switch (form_id) {
  219936:	48 89 8d 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rcx
  21993d:	e9 0c 0c 00 00       	jmp    21a54e <parseFormValue+0x101e>
  219942:	48 8d bd 00 fe ff ff 	lea    rdi,[rbp-0x200]
            const block_len = try readULeb128(in_stream);
  219949:	48 8b 95 a0 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x860]
  219950:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  219957:	e8 74 d7 ff ff       	call   2170d0 <readULeb128>
  21995c:	66 83 bd 00 fe ff ff 	cmp    WORD PTR [rbp-0x200],0x0
  219963:	00 
  219964:	74 63                	je     2199c9 <parseFormValue+0x499>
  219966:	66 8b 85 00 fe ff ff 	mov    ax,WORD PTR [rbp-0x200]
  21996d:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  219974:	66 89 85 fe f6 ff ff 	mov    WORD PTR [rbp-0x902],ax
  21997b:	e8 10 23 ff ff       	call   20bc90 <__zig_return_error>
  219980:	b9 28 00 00 00       	mov    ecx,0x28
  219985:	89 ca                	mov    edx,ecx
  219987:	48 8d bd c8 fd ff ff 	lea    rdi,[rbp-0x238]
  21998e:	66 8b 85 fe f6 ff ff 	mov    ax,WORD PTR [rbp-0x902]
  219995:	66 89 85 c8 fd ff ff 	mov    WORD PTR [rbp-0x238],ax
  21999c:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  2199a3:	48 89 bd f0 f6 ff ff 	mov    QWORD PTR [rbp-0x910],rdi
  2199aa:	48 89 f7             	mov    rdi,rsi
  2199ad:	48 8b b5 f0 f6 ff ff 	mov    rsi,QWORD PTR [rbp-0x910]
  2199b4:	e8 47 af 01 00       	call   234900 <memcpy>
  2199b9:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  2199c0:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  2199c7:	5d                   	pop    rbp
  2199c8:	c3                   	ret    
  2199c9:	48 8d 85 a0 fd ff ff 	lea    rax,[rbp-0x260]
  2199d0:	48 8b 8d 08 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1f8]
  2199d7:	48 89 8d 80 f7 ff ff 	mov    QWORD PTR [rbp-0x880],rcx
            const signed = form_id == DW.FORM_sdata;
  2199de:	48 83 bd 98 f7 ff ff 	cmp    QWORD PTR [rbp-0x868],0xd
  2199e5:	0d 
  2199e6:	0f 94 c2             	sete   dl
  2199e9:	80 e2 01             	and    dl,0x1
  2199ec:	88 95 7f f7 ff ff    	mov    BYTE PTR [rbp-0x881],dl
            return parseFormValueConstant(allocator, in_stream, signed, block_len);
  2199f2:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  2199f9:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  219a00:	40 8a b5 7f f7 ff ff 	mov    sil,BYTE PTR [rbp-0x881]
  219a07:	4c 8b 8d 80 f7 ff ff 	mov    r9,QWORD PTR [rbp-0x880]
  219a0e:	44 0f b6 c6          	movzx  r8d,sil
  219a12:	48 8d bd a0 fd ff ff 	lea    rdi,[rbp-0x260]
  219a19:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  219a20:	48 89 85 e8 f6 ff ff 	mov    QWORD PTR [rbp-0x918],rax
  219a27:	e8 f4 18 00 00       	call   21b320 <parseFormValueConstant>
  219a2c:	66 83 bd a0 fd ff ff 	cmp    WORD PTR [rbp-0x260],0x0
  219a33:	00 
  219a34:	74 0e                	je     219a44 <parseFormValue+0x514>
  219a36:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  219a3d:	e8 4e 22 ff ff       	call   20bc90 <__zig_return_error>
  219a42:	eb 02                	jmp    219a46 <parseFormValue+0x516>
  219a44:	eb 00                	jmp    219a46 <parseFormValue+0x516>
  219a46:	b8 28 00 00 00       	mov    eax,0x28
  219a4b:	89 c2                	mov    edx,eax
  219a4d:	48 8d 8d a0 fd ff ff 	lea    rcx,[rbp-0x260]
  219a54:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  219a5b:	48 89 f7             	mov    rdi,rsi
  219a5e:	48 89 ce             	mov    rsi,rcx
  219a61:	e8 9a ae 01 00       	call   234900 <memcpy>
  219a66:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  219a6d:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  219a74:	5d                   	pop    rbp
  219a75:	c3                   	ret    
  219a76:	48 8d bd 90 fd ff ff 	lea    rdi,[rbp-0x270]
            const size = try readULeb128(in_stream);
  219a7d:	48 8b 95 a0 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x860]
  219a84:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  219a8b:	e8 40 d6 ff ff       	call   2170d0 <readULeb128>
  219a90:	66 83 bd 90 fd ff ff 	cmp    WORD PTR [rbp-0x270],0x0
  219a97:	00 
  219a98:	74 63                	je     219afd <parseFormValue+0x5cd>
  219a9a:	66 8b 85 90 fd ff ff 	mov    ax,WORD PTR [rbp-0x270]
  219aa1:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  219aa8:	66 89 85 e6 f6 ff ff 	mov    WORD PTR [rbp-0x91a],ax
  219aaf:	e8 dc 21 ff ff       	call   20bc90 <__zig_return_error>
  219ab4:	b9 28 00 00 00       	mov    ecx,0x28
  219ab9:	89 ca                	mov    edx,ecx
  219abb:	48 8d bd 58 fd ff ff 	lea    rdi,[rbp-0x2a8]
  219ac2:	66 8b 85 e6 f6 ff ff 	mov    ax,WORD PTR [rbp-0x91a]
  219ac9:	66 89 85 58 fd ff ff 	mov    WORD PTR [rbp-0x2a8],ax
  219ad0:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  219ad7:	48 89 bd d8 f6 ff ff 	mov    QWORD PTR [rbp-0x928],rdi
  219ade:	48 89 f7             	mov    rdi,rsi
  219ae1:	48 8b b5 d8 f6 ff ff 	mov    rsi,QWORD PTR [rbp-0x928]
  219ae8:	e8 13 ae 01 00       	call   234900 <memcpy>
  219aed:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  219af4:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  219afb:	5d                   	pop    rbp
  219afc:	c3                   	ret    
  219afd:	48 8d bd 40 fd ff ff 	lea    rdi,[rbp-0x2c0]
  219b04:	48 8b 85 98 fd ff ff 	mov    rax,QWORD PTR [rbp-0x268]
  219b0b:	48 89 85 70 f7 ff ff 	mov    QWORD PTR [rbp-0x890],rax
            const buf = try readAllocBytes(allocator, in_stream, size);
  219b12:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  219b19:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  219b20:	4c 8b 85 70 f7 ff ff 	mov    r8,QWORD PTR [rbp-0x890]
  219b27:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  219b2e:	e8 6d 19 00 00       	call   21b4a0 <readAllocBytes>
  219b33:	66 83 bd 40 fd ff ff 	cmp    WORD PTR [rbp-0x2c0],0x0
  219b3a:	00 
  219b3b:	74 63                	je     219ba0 <parseFormValue+0x670>
  219b3d:	66 8b 85 40 fd ff ff 	mov    ax,WORD PTR [rbp-0x2c0]
  219b44:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  219b4b:	66 89 85 d6 f6 ff ff 	mov    WORD PTR [rbp-0x92a],ax
  219b52:	e8 39 21 ff ff       	call   20bc90 <__zig_return_error>
  219b57:	b9 28 00 00 00       	mov    ecx,0x28
  219b5c:	89 ca                	mov    edx,ecx
  219b5e:	48 8d bd 00 fd ff ff 	lea    rdi,[rbp-0x300]
  219b65:	66 8b 85 d6 f6 ff ff 	mov    ax,WORD PTR [rbp-0x92a]
  219b6c:	66 89 85 00 fd ff ff 	mov    WORD PTR [rbp-0x300],ax
  219b73:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  219b7a:	48 89 bd c8 f6 ff ff 	mov    QWORD PTR [rbp-0x938],rdi
  219b81:	48 89 f7             	mov    rdi,rsi
  219b84:	48 8b b5 c8 f6 ff ff 	mov    rsi,QWORD PTR [rbp-0x938]
  219b8b:	e8 70 ad 01 00       	call   234900 <memcpy>
  219b90:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  219b97:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  219b9e:	5d                   	pop    rbp
  219b9f:	c3                   	ret    
  219ba0:	b8 28 00 00 00       	mov    eax,0x28
  219ba5:	89 c2                	mov    edx,eax
  219ba7:	48 8d 8d b8 fc ff ff 	lea    rcx,[rbp-0x348]
  219bae:	c5 fa 6f 85 48 fd ff 	vmovdqu xmm0,XMMWORD PTR [rbp-0x2b8]
  219bb5:	ff 
  219bb6:	c5 f9 7f 85 60 f7 ff 	vmovdqa XMMWORD PTR [rbp-0x8a0],xmm0
  219bbd:	ff 
            return FormValue{ .ExprLoc = buf };
  219bbe:	c6 85 f8 fc ff ff 03 	mov    BYTE PTR [rbp-0x308],0x3
  219bc5:	48 8b b5 60 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8a0]
  219bcc:	48 89 b5 e0 fc ff ff 	mov    QWORD PTR [rbp-0x320],rsi
  219bd3:	48 8b b5 68 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x898]
  219bda:	48 89 b5 e8 fc ff ff 	mov    QWORD PTR [rbp-0x318],rsi
  219be1:	66 c7 85 b8 fc ff ff 	mov    WORD PTR [rbp-0x348],0x0
  219be8:	00 00 
  219bea:	48 8b b5 e0 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x320]
  219bf1:	48 89 b5 c0 fc ff ff 	mov    QWORD PTR [rbp-0x340],rsi
  219bf8:	48 8b b5 e8 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x318]
  219bff:	48 89 b5 c8 fc ff ff 	mov    QWORD PTR [rbp-0x338],rsi
  219c06:	48 8b b5 f0 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x310]
  219c0d:	48 89 b5 d0 fc ff ff 	mov    QWORD PTR [rbp-0x330],rsi
  219c14:	48 8b b5 f8 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x308]
  219c1b:	48 89 b5 d8 fc ff ff 	mov    QWORD PTR [rbp-0x328],rsi
  219c22:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  219c29:	48 89 f7             	mov    rdi,rsi
  219c2c:	48 89 ce             	mov    rsi,rcx
  219c2f:	e8 cc ac 01 00       	call   234900 <memcpy>
  219c34:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  219c3b:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  219c42:	5d                   	pop    rbp
  219c43:	c3                   	ret    
  219c44:	48 8d bd b0 fc ff ff 	lea    rdi,[rbp-0x350]
        DW.FORM_flag => FormValue{ .Flag = (try in_stream.readByte()) != 0 },
  219c4b:	48 8b 95 a0 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x860]
  219c52:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  219c59:	e8 e2 9e ff ff       	call   213b40 <InStream(ReadError)_readByte>
  219c5e:	66 83 bd b0 fc ff ff 	cmp    WORD PTR [rbp-0x350],0x0
  219c65:	00 
  219c66:	74 63                	je     219ccb <parseFormValue+0x79b>
  219c68:	66 8b 85 b0 fc ff ff 	mov    ax,WORD PTR [rbp-0x350]
  219c6f:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  219c76:	66 89 85 c6 f6 ff ff 	mov    WORD PTR [rbp-0x93a],ax
  219c7d:	e8 0e 20 ff ff       	call   20bc90 <__zig_return_error>
  219c82:	b9 28 00 00 00       	mov    ecx,0x28
  219c87:	89 ca                	mov    edx,ecx
  219c89:	48 8d bd 80 fc ff ff 	lea    rdi,[rbp-0x380]
  219c90:	66 8b 85 c6 f6 ff ff 	mov    ax,WORD PTR [rbp-0x93a]
  219c97:	66 89 85 80 fc ff ff 	mov    WORD PTR [rbp-0x380],ax
  219c9e:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  219ca5:	48 89 bd b8 f6 ff ff 	mov    QWORD PTR [rbp-0x948],rdi
  219cac:	48 89 f7             	mov    rdi,rsi
  219caf:	48 8b b5 b8 f6 ff ff 	mov    rsi,QWORD PTR [rbp-0x948]
  219cb6:	e8 45 ac 01 00       	call   234900 <memcpy>
  219cbb:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  219cc2:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  219cc9:	5d                   	pop    rbp
  219cca:	c3                   	ret    
  219ccb:	48 8d 85 78 f8 ff ff 	lea    rax,[rbp-0x788]
  219cd2:	8a 8d b2 fc ff ff    	mov    cl,BYTE PTR [rbp-0x34e]
  219cd8:	84 c9                	test   cl,cl
  219cda:	0f 95 c1             	setne  cl
  219cdd:	c6 85 78 fc ff ff 04 	mov    BYTE PTR [rbp-0x388],0x4
  219ce4:	80 e1 01             	and    cl,0x1
  219ce7:	88 8d 60 fc ff ff    	mov    BYTE PTR [rbp-0x3a0],cl
  219ced:	66 c7 85 78 f8 ff ff 	mov    WORD PTR [rbp-0x788],0x0
  219cf4:	00 00 
  219cf6:	48 8b 95 60 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x3a0]
  219cfd:	48 89 95 80 f8 ff ff 	mov    QWORD PTR [rbp-0x780],rdx
  219d04:	48 8b 95 68 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x398]
  219d0b:	48 89 95 88 f8 ff ff 	mov    QWORD PTR [rbp-0x778],rdx
  219d12:	48 8b 95 70 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x390]
  219d19:	48 89 95 90 f8 ff ff 	mov    QWORD PTR [rbp-0x770],rdx
  219d20:	48 8b 95 78 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x388]
  219d27:	48 89 95 98 f8 ff ff 	mov    QWORD PTR [rbp-0x768],rdx
    return switch (form_id) {
  219d2e:	48 89 85 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rax
  219d35:	e9 14 08 00 00       	jmp    21a54e <parseFormValue+0x101e>
  219d3a:	48 8d 05 37 f3 fe ff 	lea    rax,[rip+0xfffffffffffef337]        # 209078 <__unnamed_102>
  219d41:	48 89 85 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rax
  219d48:	e9 01 08 00 00       	jmp    21a54e <parseFormValue+0x101e>
  219d4d:	48 8d 85 50 fc ff ff 	lea    rax,[rbp-0x3b0]
        DW.FORM_sec_offset => FormValue{ .SecOffset = try parseFormValueDwarfOffsetSize(in_stream, is_64) },
  219d54:	48 8b 95 a0 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x860]
  219d5b:	8a 8d 97 f7 ff ff    	mov    cl,BYTE PTR [rbp-0x869]
  219d61:	0f b6 c9             	movzx  ecx,cl
  219d64:	48 8d bd 50 fc ff ff 	lea    rdi,[rbp-0x3b0]
  219d6b:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  219d72:	48 89 85 b0 f6 ff ff 	mov    QWORD PTR [rbp-0x950],rax
  219d79:	e8 32 19 00 00       	call   21b6b0 <parseFormValueDwarfOffsetSize>
  219d7e:	66 83 bd 50 fc ff ff 	cmp    WORD PTR [rbp-0x3b0],0x0
  219d85:	00 
  219d86:	74 63                	je     219deb <parseFormValue+0x8bb>
  219d88:	66 8b 85 50 fc ff ff 	mov    ax,WORD PTR [rbp-0x3b0]
  219d8f:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  219d96:	66 89 85 ae f6 ff ff 	mov    WORD PTR [rbp-0x952],ax
  219d9d:	e8 ee 1e ff ff       	call   20bc90 <__zig_return_error>
  219da2:	b9 28 00 00 00       	mov    ecx,0x28
  219da7:	89 ca                	mov    edx,ecx
  219da9:	48 8d bd 18 fc ff ff 	lea    rdi,[rbp-0x3e8]
  219db0:	66 8b 85 ae f6 ff ff 	mov    ax,WORD PTR [rbp-0x952]
  219db7:	66 89 85 18 fc ff ff 	mov    WORD PTR [rbp-0x3e8],ax
  219dbe:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  219dc5:	48 89 bd a0 f6 ff ff 	mov    QWORD PTR [rbp-0x960],rdi
  219dcc:	48 89 f7             	mov    rdi,rsi
  219dcf:	48 8b b5 a0 f6 ff ff 	mov    rsi,QWORD PTR [rbp-0x960]
  219dd6:	e8 25 ab 01 00       	call   234900 <memcpy>
  219ddb:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  219de2:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  219de9:	5d                   	pop    rbp
  219dea:	c3                   	ret    
  219deb:	48 8d 85 50 f8 ff ff 	lea    rax,[rbp-0x7b0]
  219df2:	48 8b 8d 58 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3a8]
  219df9:	c6 85 10 fc ff ff 05 	mov    BYTE PTR [rbp-0x3f0],0x5
  219e00:	48 89 8d f8 fb ff ff 	mov    QWORD PTR [rbp-0x408],rcx
  219e07:	66 c7 85 50 f8 ff ff 	mov    WORD PTR [rbp-0x7b0],0x0
  219e0e:	00 00 
  219e10:	48 8b 8d f8 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x408]
  219e17:	48 89 8d 58 f8 ff ff 	mov    QWORD PTR [rbp-0x7a8],rcx
  219e1e:	48 8b 8d 00 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x400]
  219e25:	48 89 8d 60 f8 ff ff 	mov    QWORD PTR [rbp-0x7a0],rcx
  219e2c:	48 8b 8d 08 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3f8]
  219e33:	48 89 8d 68 f8 ff ff 	mov    QWORD PTR [rbp-0x798],rcx
  219e3a:	48 8b 8d 10 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3f0]
  219e41:	48 89 8d 70 f8 ff ff 	mov    QWORD PTR [rbp-0x790],rcx
    return switch (form_id) {
  219e48:	48 89 85 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rax
  219e4f:	e9 fa 06 00 00       	jmp    21a54e <parseFormValue+0x101e>
  219e54:	48 8d bd d0 fb ff ff 	lea    rdi,[rbp-0x430]
        DW.FORM_ref1 => parseFormValueRef(allocator, in_stream, u8),
  219e5b:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  219e62:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  219e69:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  219e70:	e8 7b 19 00 00       	call   21b7f0 <parseFormValueRef>
  219e75:	48 8d 8d d0 fb ff ff 	lea    rcx,[rbp-0x430]
    return switch (form_id) {
  219e7c:	48 89 8d 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rcx
  219e83:	e9 c6 06 00 00       	jmp    21a54e <parseFormValue+0x101e>
  219e88:	48 8d bd a8 fb ff ff 	lea    rdi,[rbp-0x458]
        DW.FORM_ref2 => parseFormValueRef(allocator, in_stream, u16),
  219e8f:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  219e96:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  219e9d:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  219ea4:	e8 47 1a 00 00       	call   21b8f0 <parseFormValueRef.50>
  219ea9:	48 8d 8d a8 fb ff ff 	lea    rcx,[rbp-0x458]
    return switch (form_id) {
  219eb0:	48 89 8d 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rcx
  219eb7:	e9 92 06 00 00       	jmp    21a54e <parseFormValue+0x101e>
  219ebc:	48 8d bd 80 fb ff ff 	lea    rdi,[rbp-0x480]
        DW.FORM_ref4 => parseFormValueRef(allocator, in_stream, u32),
  219ec3:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  219eca:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  219ed1:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  219ed8:	e8 13 1b 00 00       	call   21b9f0 <parseFormValueRef.51>
  219edd:	48 8d 8d 80 fb ff ff 	lea    rcx,[rbp-0x480]
    return switch (form_id) {
  219ee4:	48 89 8d 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rcx
  219eeb:	e9 5e 06 00 00       	jmp    21a54e <parseFormValue+0x101e>
  219ef0:	48 8d bd 58 fb ff ff 	lea    rdi,[rbp-0x4a8]
        DW.FORM_ref8 => parseFormValueRef(allocator, in_stream, u64),
  219ef7:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  219efe:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  219f05:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  219f0c:	e8 df 1b 00 00       	call   21baf0 <parseFormValueRef.52>
  219f11:	48 8d 8d 58 fb ff ff 	lea    rcx,[rbp-0x4a8]
    return switch (form_id) {
  219f18:	48 89 8d 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rcx
  219f1f:	e9 2a 06 00 00       	jmp    21a54e <parseFormValue+0x101e>
  219f24:	48 8d bd 48 fb ff ff 	lea    rdi,[rbp-0x4b8]
            const ref_len = try readULeb128(in_stream);
  219f2b:	48 8b 95 a0 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x860]
  219f32:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  219f39:	e8 92 d1 ff ff       	call   2170d0 <readULeb128>
  219f3e:	66 83 bd 48 fb ff ff 	cmp    WORD PTR [rbp-0x4b8],0x0
  219f45:	00 
  219f46:	74 63                	je     219fab <parseFormValue+0xa7b>
  219f48:	66 8b 85 48 fb ff ff 	mov    ax,WORD PTR [rbp-0x4b8]
  219f4f:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  219f56:	66 89 85 9e f6 ff ff 	mov    WORD PTR [rbp-0x962],ax
  219f5d:	e8 2e 1d ff ff       	call   20bc90 <__zig_return_error>
  219f62:	b9 28 00 00 00       	mov    ecx,0x28
  219f67:	89 ca                	mov    edx,ecx
  219f69:	48 8d bd 10 fb ff ff 	lea    rdi,[rbp-0x4f0]
  219f70:	66 8b 85 9e f6 ff ff 	mov    ax,WORD PTR [rbp-0x962]
  219f77:	66 89 85 10 fb ff ff 	mov    WORD PTR [rbp-0x4f0],ax
  219f7e:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  219f85:	48 89 bd 90 f6 ff ff 	mov    QWORD PTR [rbp-0x970],rdi
  219f8c:	48 89 f7             	mov    rdi,rsi
  219f8f:	48 8b b5 90 f6 ff ff 	mov    rsi,QWORD PTR [rbp-0x970]
  219f96:	e8 65 a9 01 00       	call   234900 <memcpy>
  219f9b:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  219fa2:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  219fa9:	5d                   	pop    rbp
  219faa:	c3                   	ret    
  219fab:	48 8d bd e8 fa ff ff 	lea    rdi,[rbp-0x518]
  219fb2:	48 8b 85 50 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4b0]
  219fb9:	48 89 85 58 f7 ff ff 	mov    QWORD PTR [rbp-0x8a8],rax
            return parseFormValueRefLen(allocator, in_stream, ref_len);
  219fc0:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  219fc7:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  219fce:	4c 8b 85 58 f7 ff ff 	mov    r8,QWORD PTR [rbp-0x8a8]
  219fd5:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  219fdc:	e8 1f 1c 00 00       	call   21bc00 <parseFormValueRefLen>
  219fe1:	66 83 bd e8 fa ff ff 	cmp    WORD PTR [rbp-0x518],0x0
  219fe8:	00 
  219fe9:	74 0e                	je     219ff9 <parseFormValue+0xac9>
  219feb:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  219ff2:	e8 99 1c ff ff       	call   20bc90 <__zig_return_error>
  219ff7:	eb 02                	jmp    219ffb <parseFormValue+0xacb>
  219ff9:	eb 00                	jmp    219ffb <parseFormValue+0xacb>
  219ffb:	b8 28 00 00 00       	mov    eax,0x28
  21a000:	89 c2                	mov    edx,eax
  21a002:	48 8d 8d e8 fa ff ff 	lea    rcx,[rbp-0x518]
  21a009:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  21a010:	48 89 f7             	mov    rdi,rsi
  21a013:	48 89 ce             	mov    rsi,rcx
  21a016:	e8 e5 a8 01 00       	call   234900 <memcpy>
  21a01b:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  21a022:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  21a029:	5d                   	pop    rbp
  21a02a:	c3                   	ret    
  21a02b:	48 8d 85 d8 fa ff ff 	lea    rax,[rbp-0x528]
        DW.FORM_ref_addr => FormValue{ .RefAddr = try parseFormValueDwarfOffsetSize(in_stream, is_64) },
  21a032:	48 8b 95 a0 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x860]
  21a039:	8a 8d 97 f7 ff ff    	mov    cl,BYTE PTR [rbp-0x869]
  21a03f:	0f b6 c9             	movzx  ecx,cl
  21a042:	48 8d bd d8 fa ff ff 	lea    rdi,[rbp-0x528]
  21a049:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  21a050:	48 89 85 88 f6 ff ff 	mov    QWORD PTR [rbp-0x978],rax
  21a057:	e8 54 16 00 00       	call   21b6b0 <parseFormValueDwarfOffsetSize>
  21a05c:	66 83 bd d8 fa ff ff 	cmp    WORD PTR [rbp-0x528],0x0
  21a063:	00 
  21a064:	74 63                	je     21a0c9 <parseFormValue+0xb99>
  21a066:	66 8b 85 d8 fa ff ff 	mov    ax,WORD PTR [rbp-0x528]
  21a06d:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  21a074:	66 89 85 86 f6 ff ff 	mov    WORD PTR [rbp-0x97a],ax
  21a07b:	e8 10 1c ff ff       	call   20bc90 <__zig_return_error>
  21a080:	b9 28 00 00 00       	mov    ecx,0x28
  21a085:	89 ca                	mov    edx,ecx
  21a087:	48 8d bd a0 fa ff ff 	lea    rdi,[rbp-0x560]
  21a08e:	66 8b 85 86 f6 ff ff 	mov    ax,WORD PTR [rbp-0x97a]
  21a095:	66 89 85 a0 fa ff ff 	mov    WORD PTR [rbp-0x560],ax
  21a09c:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  21a0a3:	48 89 bd 78 f6 ff ff 	mov    QWORD PTR [rbp-0x988],rdi
  21a0aa:	48 89 f7             	mov    rdi,rsi
  21a0ad:	48 8b b5 78 f6 ff ff 	mov    rsi,QWORD PTR [rbp-0x988]
  21a0b4:	e8 47 a8 01 00       	call   234900 <memcpy>
  21a0b9:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  21a0c0:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  21a0c7:	5d                   	pop    rbp
  21a0c8:	c3                   	ret    
  21a0c9:	48 8d 85 28 f8 ff ff 	lea    rax,[rbp-0x7d8]
  21a0d0:	48 8b 8d e0 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x520]
  21a0d7:	c6 85 98 fa ff ff 07 	mov    BYTE PTR [rbp-0x568],0x7
  21a0de:	48 89 8d 80 fa ff ff 	mov    QWORD PTR [rbp-0x580],rcx
  21a0e5:	66 c7 85 28 f8 ff ff 	mov    WORD PTR [rbp-0x7d8],0x0
  21a0ec:	00 00 
  21a0ee:	48 8b 8d 80 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x580]
  21a0f5:	48 89 8d 30 f8 ff ff 	mov    QWORD PTR [rbp-0x7d0],rcx
  21a0fc:	48 8b 8d 88 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x578]
  21a103:	48 89 8d 38 f8 ff ff 	mov    QWORD PTR [rbp-0x7c8],rcx
  21a10a:	48 8b 8d 90 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x570]
  21a111:	48 89 8d 40 f8 ff ff 	mov    QWORD PTR [rbp-0x7c0],rcx
  21a118:	48 8b 8d 98 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x568]
  21a11f:	48 89 8d 48 f8 ff ff 	mov    QWORD PTR [rbp-0x7b8],rcx
    return switch (form_id) {
  21a126:	48 89 85 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rax
  21a12d:	e9 1c 04 00 00       	jmp    21a54e <parseFormValue+0x101e>
  21a132:	48 8d bd 70 fa ff ff 	lea    rdi,[rbp-0x590]
        DW.FORM_ref_sig8 => FormValue{ .RefSig8 = try in_stream.readIntLe(u64) },
  21a139:	48 8b 95 a0 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x860]
  21a140:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  21a147:	e8 94 c5 ff ff       	call   2166e0 <InStream(ReadError)_readIntLe.38>
  21a14c:	66 83 bd 70 fa ff ff 	cmp    WORD PTR [rbp-0x590],0x0
  21a153:	00 
  21a154:	74 63                	je     21a1b9 <parseFormValue+0xc89>
  21a156:	66 8b 85 70 fa ff ff 	mov    ax,WORD PTR [rbp-0x590]
  21a15d:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  21a164:	66 89 85 76 f6 ff ff 	mov    WORD PTR [rbp-0x98a],ax
  21a16b:	e8 20 1b ff ff       	call   20bc90 <__zig_return_error>
  21a170:	b9 28 00 00 00       	mov    ecx,0x28
  21a175:	89 ca                	mov    edx,ecx
  21a177:	48 8d bd 38 fa ff ff 	lea    rdi,[rbp-0x5c8]
  21a17e:	66 8b 85 76 f6 ff ff 	mov    ax,WORD PTR [rbp-0x98a]
  21a185:	66 89 85 38 fa ff ff 	mov    WORD PTR [rbp-0x5c8],ax
  21a18c:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  21a193:	48 89 bd 68 f6 ff ff 	mov    QWORD PTR [rbp-0x998],rdi
  21a19a:	48 89 f7             	mov    rdi,rsi
  21a19d:	48 8b b5 68 f6 ff ff 	mov    rsi,QWORD PTR [rbp-0x998]
  21a1a4:	e8 57 a7 01 00       	call   234900 <memcpy>
  21a1a9:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  21a1b0:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  21a1b7:	5d                   	pop    rbp
  21a1b8:	c3                   	ret    
  21a1b9:	48 8d 85 00 f8 ff ff 	lea    rax,[rbp-0x800]
  21a1c0:	48 8b 8d 78 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x588]
  21a1c7:	c6 85 30 fa ff ff 08 	mov    BYTE PTR [rbp-0x5d0],0x8
  21a1ce:	48 89 8d 18 fa ff ff 	mov    QWORD PTR [rbp-0x5e8],rcx
  21a1d5:	66 c7 85 00 f8 ff ff 	mov    WORD PTR [rbp-0x800],0x0
  21a1dc:	00 00 
  21a1de:	48 8b 8d 18 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x5e8]
  21a1e5:	48 89 8d 08 f8 ff ff 	mov    QWORD PTR [rbp-0x7f8],rcx
  21a1ec:	48 8b 8d 20 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x5e0]
  21a1f3:	48 89 8d 10 f8 ff ff 	mov    QWORD PTR [rbp-0x7f0],rcx
  21a1fa:	48 8b 8d 28 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x5d8]
  21a201:	48 89 8d 18 f8 ff ff 	mov    QWORD PTR [rbp-0x7e8],rcx
  21a208:	48 8b 8d 30 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x5d0]
  21a20f:	48 89 8d 20 f8 ff ff 	mov    QWORD PTR [rbp-0x7e0],rcx
    return switch (form_id) {
  21a216:	48 89 85 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rax
  21a21d:	e9 2c 03 00 00       	jmp    21a54e <parseFormValue+0x101e>
  21a222:	48 8d bd 00 fa ff ff 	lea    rdi,[rbp-0x600]
        DW.FORM_string => FormValue{ .String = try readStringRaw(allocator, in_stream) },
  21a229:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  21a230:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  21a237:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  21a23e:	e8 0d 1b 00 00       	call   21bd50 <readStringRaw>
  21a243:	66 83 bd 00 fa ff ff 	cmp    WORD PTR [rbp-0x600],0x0
  21a24a:	00 
  21a24b:	74 63                	je     21a2b0 <parseFormValue+0xd80>
  21a24d:	66 8b 85 00 fa ff ff 	mov    ax,WORD PTR [rbp-0x600]
  21a254:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  21a25b:	66 89 85 66 f6 ff ff 	mov    WORD PTR [rbp-0x99a],ax
  21a262:	e8 29 1a ff ff       	call   20bc90 <__zig_return_error>
  21a267:	b9 28 00 00 00       	mov    ecx,0x28
  21a26c:	89 ca                	mov    edx,ecx
  21a26e:	48 8d bd c0 f9 ff ff 	lea    rdi,[rbp-0x640]
  21a275:	66 8b 85 66 f6 ff ff 	mov    ax,WORD PTR [rbp-0x99a]
  21a27c:	66 89 85 c0 f9 ff ff 	mov    WORD PTR [rbp-0x640],ax
  21a283:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  21a28a:	48 89 bd 58 f6 ff ff 	mov    QWORD PTR [rbp-0x9a8],rdi
  21a291:	48 89 f7             	mov    rdi,rsi
  21a294:	48 8b b5 58 f6 ff ff 	mov    rsi,QWORD PTR [rbp-0x9a8]
  21a29b:	e8 60 a6 01 00       	call   234900 <memcpy>
  21a2a0:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  21a2a7:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  21a2ae:	5d                   	pop    rbp
  21a2af:	c3                   	ret    
  21a2b0:	48 8d 85 d8 f7 ff ff 	lea    rax,[rbp-0x828]
  21a2b7:	c6 85 b8 f9 ff ff 09 	mov    BYTE PTR [rbp-0x648],0x9
  21a2be:	48 8b 8d 08 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x5f8]
  21a2c5:	48 89 8d a0 f9 ff ff 	mov    QWORD PTR [rbp-0x660],rcx
  21a2cc:	48 8b 8d 10 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x5f0]
  21a2d3:	48 89 8d a8 f9 ff ff 	mov    QWORD PTR [rbp-0x658],rcx
  21a2da:	66 c7 85 d8 f7 ff ff 	mov    WORD PTR [rbp-0x828],0x0
  21a2e1:	00 00 
  21a2e3:	48 8b 8d a0 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x660]
  21a2ea:	48 89 8d e0 f7 ff ff 	mov    QWORD PTR [rbp-0x820],rcx
  21a2f1:	48 8b 8d a8 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x658]
  21a2f8:	48 89 8d e8 f7 ff ff 	mov    QWORD PTR [rbp-0x818],rcx
  21a2ff:	48 8b 8d b0 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x650]
  21a306:	48 89 8d f0 f7 ff ff 	mov    QWORD PTR [rbp-0x810],rcx
  21a30d:	48 8b 8d b8 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x648]
  21a314:	48 89 8d f8 f7 ff ff 	mov    QWORD PTR [rbp-0x808],rcx
    return switch (form_id) {
  21a31b:	48 89 85 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rax
  21a322:	e9 27 02 00 00       	jmp    21a54e <parseFormValue+0x101e>
  21a327:	48 8d 85 90 f9 ff ff 	lea    rax,[rbp-0x670]
        DW.FORM_strp => FormValue{ .StrPtr = try parseFormValueDwarfOffsetSize(in_stream, is_64) },
  21a32e:	48 8b 95 a0 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x860]
  21a335:	8a 8d 97 f7 ff ff    	mov    cl,BYTE PTR [rbp-0x869]
  21a33b:	0f b6 c9             	movzx  ecx,cl
  21a33e:	48 8d bd 90 f9 ff ff 	lea    rdi,[rbp-0x670]
  21a345:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  21a34c:	48 89 85 50 f6 ff ff 	mov    QWORD PTR [rbp-0x9b0],rax
  21a353:	e8 58 13 00 00       	call   21b6b0 <parseFormValueDwarfOffsetSize>
  21a358:	66 83 bd 90 f9 ff ff 	cmp    WORD PTR [rbp-0x670],0x0
  21a35f:	00 
  21a360:	74 63                	je     21a3c5 <parseFormValue+0xe95>
  21a362:	66 8b 85 90 f9 ff ff 	mov    ax,WORD PTR [rbp-0x670]
  21a369:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  21a370:	66 89 85 4e f6 ff ff 	mov    WORD PTR [rbp-0x9b2],ax
  21a377:	e8 14 19 ff ff       	call   20bc90 <__zig_return_error>
  21a37c:	b9 28 00 00 00       	mov    ecx,0x28
  21a381:	89 ca                	mov    edx,ecx
  21a383:	48 8d bd 58 f9 ff ff 	lea    rdi,[rbp-0x6a8]
  21a38a:	66 8b 85 4e f6 ff ff 	mov    ax,WORD PTR [rbp-0x9b2]
  21a391:	66 89 85 58 f9 ff ff 	mov    WORD PTR [rbp-0x6a8],ax
  21a398:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  21a39f:	48 89 bd 40 f6 ff ff 	mov    QWORD PTR [rbp-0x9c0],rdi
  21a3a6:	48 89 f7             	mov    rdi,rsi
  21a3a9:	48 8b b5 40 f6 ff ff 	mov    rsi,QWORD PTR [rbp-0x9c0]
  21a3b0:	e8 4b a5 01 00       	call   234900 <memcpy>
  21a3b5:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  21a3bc:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  21a3c3:	5d                   	pop    rbp
  21a3c4:	c3                   	ret    
  21a3c5:	48 8d 85 b0 f7 ff ff 	lea    rax,[rbp-0x850]
  21a3cc:	48 8b 8d 98 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x668]
  21a3d3:	c6 85 50 f9 ff ff 0a 	mov    BYTE PTR [rbp-0x6b0],0xa
  21a3da:	48 89 8d 38 f9 ff ff 	mov    QWORD PTR [rbp-0x6c8],rcx
  21a3e1:	66 c7 85 b0 f7 ff ff 	mov    WORD PTR [rbp-0x850],0x0
  21a3e8:	00 00 
  21a3ea:	48 8b 8d 38 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x6c8]
  21a3f1:	48 89 8d b8 f7 ff ff 	mov    QWORD PTR [rbp-0x848],rcx
  21a3f8:	48 8b 8d 40 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x6c0]
  21a3ff:	48 89 8d c0 f7 ff ff 	mov    QWORD PTR [rbp-0x840],rcx
  21a406:	48 8b 8d 48 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x6b8]
  21a40d:	48 89 8d c8 f7 ff ff 	mov    QWORD PTR [rbp-0x838],rcx
  21a414:	48 8b 8d 50 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x6b0]
  21a41b:	48 89 8d d0 f7 ff ff 	mov    QWORD PTR [rbp-0x830],rcx
    return switch (form_id) {
  21a422:	48 89 85 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rax
  21a429:	e9 20 01 00 00       	jmp    21a54e <parseFormValue+0x101e>
  21a42e:	48 8d bd 28 f9 ff ff 	lea    rdi,[rbp-0x6d8]
            const child_form_id = try readULeb128(in_stream);
  21a435:	48 8b 95 a0 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x860]
  21a43c:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  21a443:	e8 88 cc ff ff       	call   2170d0 <readULeb128>
  21a448:	66 83 bd 28 f9 ff ff 	cmp    WORD PTR [rbp-0x6d8],0x0
  21a44f:	00 
  21a450:	74 63                	je     21a4b5 <parseFormValue+0xf85>
  21a452:	66 8b 85 28 f9 ff ff 	mov    ax,WORD PTR [rbp-0x6d8]
  21a459:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  21a460:	66 89 85 3e f6 ff ff 	mov    WORD PTR [rbp-0x9c2],ax
  21a467:	e8 24 18 ff ff       	call   20bc90 <__zig_return_error>
  21a46c:	b9 28 00 00 00       	mov    ecx,0x28
  21a471:	89 ca                	mov    edx,ecx
  21a473:	48 8d bd f0 f8 ff ff 	lea    rdi,[rbp-0x710]
  21a47a:	66 8b 85 3e f6 ff ff 	mov    ax,WORD PTR [rbp-0x9c2]
  21a481:	66 89 85 f0 f8 ff ff 	mov    WORD PTR [rbp-0x710],ax
  21a488:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  21a48f:	48 89 bd 30 f6 ff ff 	mov    QWORD PTR [rbp-0x9d0],rdi
  21a496:	48 89 f7             	mov    rdi,rsi
  21a499:	48 8b b5 30 f6 ff ff 	mov    rsi,QWORD PTR [rbp-0x9d0]
  21a4a0:	e8 5b a4 01 00       	call   234900 <memcpy>
  21a4a5:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  21a4ac:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  21a4b3:	5d                   	pop    rbp
  21a4b4:	c3                   	ret    
  21a4b5:	48 8d 85 c8 f8 ff ff 	lea    rax,[rbp-0x738]
  21a4bc:	48 8b 8d 30 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x6d0]
  21a4c3:	48 89 8d 50 f7 ff ff 	mov    QWORD PTR [rbp-0x8b0],rcx
            return parseFormValue(allocator, in_stream, child_form_id, is_64);
  21a4ca:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  21a4d1:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  21a4d8:	4c 8b 85 50 f7 ff ff 	mov    r8,QWORD PTR [rbp-0x8b0]
  21a4df:	40 8a b5 97 f7 ff ff 	mov    sil,BYTE PTR [rbp-0x869]
  21a4e6:	44 0f b6 ce          	movzx  r9d,sil
  21a4ea:	48 8d bd c8 f8 ff ff 	lea    rdi,[rbp-0x738]
  21a4f1:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  21a4f8:	48 89 85 28 f6 ff ff 	mov    QWORD PTR [rbp-0x9d8],rax
  21a4ff:	e8 2c f0 ff ff       	call   219530 <parseFormValue>
  21a504:	66 83 bd c8 f8 ff ff 	cmp    WORD PTR [rbp-0x738],0x0
  21a50b:	00 
  21a50c:	74 0e                	je     21a51c <parseFormValue+0xfec>
  21a50e:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  21a515:	e8 76 17 ff ff       	call   20bc90 <__zig_return_error>
  21a51a:	eb 02                	jmp    21a51e <parseFormValue+0xfee>
  21a51c:	eb 00                	jmp    21a51e <parseFormValue+0xfee>
  21a51e:	b8 28 00 00 00       	mov    eax,0x28
  21a523:	89 c2                	mov    edx,eax
  21a525:	48 8d 8d c8 f8 ff ff 	lea    rcx,[rbp-0x738]
  21a52c:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  21a533:	48 89 f7             	mov    rdi,rsi
  21a536:	48 89 ce             	mov    rsi,rcx
  21a539:	e8 c2 a3 01 00       	call   234900 <memcpy>
  21a53e:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  21a545:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  21a54c:	5d                   	pop    rbp
  21a54d:	c3                   	ret    
    return switch (form_id) {
  21a54e:	48 8b 85 20 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8e0]
  21a555:	66 83 38 00          	cmp    WORD PTR [rax],0x0
  21a559:	48 89 85 20 f6 ff ff 	mov    QWORD PTR [rbp-0x9e0],rax
  21a560:	74 0e                	je     21a570 <parseFormValue+0x1040>
  21a562:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  21a569:	e8 22 17 ff ff       	call   20bc90 <__zig_return_error>
  21a56e:	eb 02                	jmp    21a572 <parseFormValue+0x1042>
  21a570:	eb 00                	jmp    21a572 <parseFormValue+0x1042>
  21a572:	b8 28 00 00 00       	mov    eax,0x28
  21a577:	89 c2                	mov    edx,eax
  21a579:	48 8b 8d 20 f6 ff ff 	mov    rcx,QWORD PTR [rbp-0x9e0]
  21a580:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  21a587:	48 89 f7             	mov    rdi,rsi
  21a58a:	48 89 ce             	mov    rsi,rcx
  21a58d:	e8 6e a3 01 00       	call   234900 <memcpy>
  21a592:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  21a599:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  21a5a0:	5d                   	pop    rbp
  21a5a1:	c3                   	ret    
  21a5a2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21a5a9:	1f 84 00 00 00 00 00 

000000000021a5b0 <AlignedArrayList(AbbrevTableEntry,1)_toSliceConst>:
        pub fn toSliceConst(self: Self) []align(A) const T {
  21a5b0:	55                   	push   rbp
  21a5b1:	48 89 e5             	mov    rbp,rsp
  21a5b4:	48 83 ec 40          	sub    rsp,0x40
  21a5b8:	48 89 f8             	mov    rax,rdi
  21a5bb:	31 c9                	xor    ecx,ecx
  21a5bd:	89 ca                	mov    edx,ecx
            return self.items[0..self.len];
  21a5bf:	4c 8b 46 10          	mov    r8,QWORD PTR [rsi+0x10]
  21a5c3:	4c 8b 4e 08          	mov    r9,QWORD PTR [rsi+0x8]
  21a5c7:	4c 39 c2             	cmp    rdx,r8
  21a5ca:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  21a5ce:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  21a5d2:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  21a5d6:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
  21a5da:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
  21a5de:	76 10                	jbe    21a5f0 <AlignedArrayList(AbbrevTableEntry,1)_toSliceConst+0x40>
  21a5e0:	48 8d 3d 11 8e 02 00 	lea    rdi,[rip+0x28e11]        # 2433f8 <__unnamed_20>
  21a5e7:	31 c0                	xor    eax,eax
  21a5e9:	89 c6                	mov    esi,eax
  21a5eb:	e8 10 10 ff ff       	call   20b600 <panic>
  21a5f0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21a5f4:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  21a5f8:	48 39 c8             	cmp    rax,rcx
  21a5fb:	76 10                	jbe    21a60d <AlignedArrayList(AbbrevTableEntry,1)_toSliceConst+0x5d>
  21a5fd:	48 8d 3d f4 8d 02 00 	lea    rdi,[rip+0x28df4]        # 2433f8 <__unnamed_20>
  21a604:	31 c0                	xor    eax,eax
  21a606:	89 c6                	mov    esi,eax
  21a608:	e8 f3 0f ff ff       	call   20b600 <panic>
  21a60d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  21a611:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  21a614:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  21a618:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  21a61c:	48 83 e9 00          	sub    rcx,0x0
  21a620:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  21a624:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  21a628:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  21a62c:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  21a62f:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  21a633:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  21a637:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21a63b:	48 83 c4 40          	add    rsp,0x40
  21a63f:	5d                   	pop    rbp
  21a640:	c3                   	ret    
  21a641:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21a648:	0f 1f 84 00 00 00 00 
  21a64f:	00 

000000000021a650 <AlignedArrayList(Attr,8)_ensureCapacity>:
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  21a650:	55                   	push   rbp
  21a651:	48 89 e5             	mov    rbp,rsp
  21a654:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  21a65b:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  21a65f:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
            var better_capacity = self.items.len;
  21a663:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  21a667:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  21a66b:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
            if (better_capacity >= new_capacity) return;
  21a66f:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  21a673:	48 3b 55 c0          	cmp    rdx,QWORD PTR [rbp-0x40]
  21a677:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  21a67b:	72 11                	jb     21a68e <AlignedArrayList(Attr,8)_ensureCapacity+0x3e>
  21a67d:	31 c0                	xor    eax,eax
  21a67f:	66 89 c1             	mov    cx,ax
  21a682:	66 89 c8             	mov    ax,cx
  21a685:	48 81 c4 90 00 00 00 	add    rsp,0x90
  21a68c:	5d                   	pop    rbp
  21a68d:	c3                   	ret    
            while (true) {
  21a68e:	eb 00                	jmp    21a690 <AlignedArrayList(Attr,8)_ensureCapacity+0x40>
  21a690:	eb 00                	jmp    21a692 <AlignedArrayList(Attr,8)_ensureCapacity+0x42>
  21a692:	31 c0                	xor    eax,eax
  21a694:	88 c1                	mov    cl,al
                better_capacity += better_capacity / 2 + 8;
  21a696:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  21a69a:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  21a69e:	f6 c1 01             	test   cl,0x1
  21a6a1:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  21a6a5:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  21a6a9:	0f 85 8e 00 00 00    	jne    21a73d <AlignedArrayList(Attr,8)_ensureCapacity+0xed>
  21a6af:	eb 72                	jmp    21a723 <AlignedArrayList(Attr,8)_ensureCapacity+0xd3>
                if (better_capacity >= new_capacity) break;
  21a6b1:	eb 02                	jmp    21a6b5 <AlignedArrayList(Attr,8)_ensureCapacity+0x65>
            while (true) {
  21a6b3:	eb db                	jmp    21a690 <AlignedArrayList(Attr,8)_ensureCapacity+0x40>
  21a6b5:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
            self.items = try self.allocator.alignedRealloc(T, A, self.items, better_capacity);
  21a6b9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21a6bd:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  21a6c1:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
  21a6c5:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  21a6c9:	4c 8b 45 b8          	mov    r8,QWORD PTR [rbp-0x48]
  21a6cd:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  21a6d1:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  21a6d5:	e8 d6 00 00 00       	call   21a7b0 <Allocator_alignedRealloc.47>
  21a6da:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  21a6df:	74 1e                	je     21a6ff <AlignedArrayList(Attr,8)_ensureCapacity+0xaf>
  21a6e1:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  21a6e5:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  21a6e9:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  21a6ed:	e8 9e 15 ff ff       	call   20bc90 <__zig_return_error>
  21a6f2:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  21a6f6:	48 81 c4 90 00 00 00 	add    rsp,0x90
  21a6fd:	5d                   	pop    rbp
  21a6fe:	c3                   	ret    
  21a6ff:	31 c0                	xor    eax,eax
  21a701:	66 89 c1             	mov    cx,ax
  21a704:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21a708:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  21a70c:	48 89 16             	mov    QWORD PTR [rsi],rdx
  21a70f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  21a713:	48 89 56 08          	mov    QWORD PTR [rsi+0x8],rdx
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  21a717:	66 89 c8             	mov    ax,cx
  21a71a:	48 81 c4 90 00 00 00 	add    rsp,0x90
  21a721:	5d                   	pop    rbp
  21a722:	c3                   	ret    
                better_capacity += better_capacity / 2 + 8;
  21a723:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  21a727:	48 c1 e8 01          	shr    rax,0x1
  21a72b:	48 83 c0 08          	add    rax,0x8
  21a72f:	0f 92 c1             	setb   cl
  21a732:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  21a736:	88 4d 87             	mov    BYTE PTR [rbp-0x79],cl
  21a739:	72 12                	jb     21a74d <AlignedArrayList(Attr,8)_ensureCapacity+0xfd>
  21a73b:	eb 20                	jmp    21a75d <AlignedArrayList(Attr,8)_ensureCapacity+0x10d>
  21a73d:	48 8d 3d fc 8a 02 00 	lea    rdi,[rip+0x28afc]        # 243240 <__unnamed_7>
  21a744:	31 c0                	xor    eax,eax
  21a746:	89 c6                	mov    esi,eax
  21a748:	e8 b3 0e ff ff       	call   20b600 <panic>
  21a74d:	48 8d 3d 74 8a 02 00 	lea    rdi,[rip+0x28a74]        # 2431c8 <__unnamed_4>
  21a754:	31 c0                	xor    eax,eax
  21a756:	89 c6                	mov    esi,eax
  21a758:	e8 a3 0e ff ff       	call   20b600 <panic>
  21a75d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  21a761:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  21a765:	48 01 c8             	add    rax,rcx
  21a768:	0f 92 c2             	setb   dl
  21a76b:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  21a772:	88 95 77 ff ff ff    	mov    BYTE PTR [rbp-0x89],dl
  21a778:	72 02                	jb     21a77c <AlignedArrayList(Attr,8)_ensureCapacity+0x12c>
  21a77a:	eb 10                	jmp    21a78c <AlignedArrayList(Attr,8)_ensureCapacity+0x13c>
  21a77c:	48 8d 3d 45 8a 02 00 	lea    rdi,[rip+0x28a45]        # 2431c8 <__unnamed_4>
  21a783:	31 c0                	xor    eax,eax
  21a785:	89 c6                	mov    esi,eax
  21a787:	e8 74 0e ff ff       	call   20b600 <panic>
  21a78c:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  21a793:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                if (better_capacity >= new_capacity) break;
  21a797:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  21a79b:	48 3b 4d c0          	cmp    rcx,QWORD PTR [rbp-0x40]
  21a79f:	0f 83 0c ff ff ff    	jae    21a6b1 <AlignedArrayList(Attr,8)_ensureCapacity+0x61>
  21a7a5:	e9 09 ff ff ff       	jmp    21a6b3 <AlignedArrayList(Attr,8)_ensureCapacity+0x63>
  21a7aa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000021a7b0 <Allocator_alignedRealloc.47>:
    pub fn alignedRealloc(self: *Allocator, comptime T: type, comptime alignment: u29, old_mem: []align(alignment) T, n: usize) ![]align(alignment) T {
  21a7b0:	55                   	push   rbp
  21a7b1:	48 89 e5             	mov    rbp,rsp
  21a7b4:	53                   	push   rbx
  21a7b5:	48 81 ec 88 01 00 00 	sub    rsp,0x188
  21a7bc:	48 89 f8             	mov    rax,rdi
  21a7bf:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
  21a7c6:	4c 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],r8
        if (old_mem.len == 0) {
  21a7cd:	48 83 79 08 00       	cmp    QWORD PTR [rcx+0x8],0x0
  21a7d2:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  21a7d9:	48 89 b5 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rsi
  21a7e0:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
  21a7e7:	48 89 bd b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rdi
  21a7ee:	75 64                	jne    21a854 <Allocator_alignedRealloc.47+0xa4>
  21a7f0:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
            return self.alignedAlloc(T, alignment, n);
  21a7f4:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  21a7fb:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  21a802:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  21a809:	e8 22 04 00 00       	call   21ac30 <Allocator_alignedAlloc.48>
  21a80e:	66 83 7d e0 00       	cmp    WORD PTR [rbp-0x20],0x0
  21a813:	74 0e                	je     21a823 <Allocator_alignedRealloc.47+0x73>
  21a815:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  21a81c:	e8 6f 14 ff ff       	call   20bc90 <__zig_return_error>
  21a821:	eb 02                	jmp    21a825 <Allocator_alignedRealloc.47+0x75>
  21a823:	eb 00                	jmp    21a825 <Allocator_alignedRealloc.47+0x75>
  21a825:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  21a829:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  21a830:	48 89 01             	mov    QWORD PTR [rcx],rax
  21a833:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21a837:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21a83b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21a83f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21a843:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21a84a:	48 81 c4 88 01 00 00 	add    rsp,0x188
  21a851:	5b                   	pop    rbx
  21a852:	5d                   	pop    rbp
  21a853:	c3                   	ret    
        if (old_mem.len == 0) {
  21a854:	eb 00                	jmp    21a856 <Allocator_alignedRealloc.47+0xa6>
        if (n == 0) {
  21a856:	48 83 bd 10 ff ff ff 	cmp    QWORD PTR [rbp-0xf0],0x0
  21a85d:	00 
  21a85e:	75 4b                	jne    21a8ab <Allocator_alignedRealloc.47+0xfb>
            self.free(old_mem);
  21a860:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
  21a867:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  21a86e:	e8 dd 06 00 00       	call   21af50 <Allocator_free.49>
            return ([*]align(alignment) T)(undefined)[0..0];
  21a873:	48 8b 35 76 e7 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffee776]        # 208ff0 <__unnamed_103>
  21a87a:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  21a881:	48 89 37             	mov    QWORD PTR [rdi],rsi
  21a884:	48 8b 35 6d e7 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffee76d]        # 208ff8 <__unnamed_103+0x8>
  21a88b:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  21a88f:	48 8b 35 6a e7 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffee76a]        # 209000 <__unnamed_103+0x10>
  21a896:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  21a89a:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21a8a1:	48 81 c4 88 01 00 00 	add    rsp,0x188
  21a8a8:	5b                   	pop    rbx
  21a8a9:	5d                   	pop    rbp
  21a8aa:	c3                   	ret    
        if (n == 0) {
  21a8ab:	eb 00                	jmp    21a8ad <Allocator_alignedRealloc.47+0xfd>
  21a8ad:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  21a8b1:	b8 28 00 00 00       	mov    eax,0x28
  21a8b6:	89 c2                	mov    edx,eax
        const old_byte_slice = @sliceToBytes(old_mem);
  21a8b8:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  21a8bf:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  21a8c2:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  21a8c6:	48 6b 71 08 28       	imul   rsi,QWORD PTR [rcx+0x8],0x28
  21a8cb:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  21a8cf:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  21a8d3:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
  21a8da:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  21a8de:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  21a8e5:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  21a8ec:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  21a8f3:	e8 18 ab ff ff       	call   215410 <mul>
  21a8f8:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  21a8fd:	74 44                	je     21a943 <Allocator_alignedRealloc.47+0x193>
  21a8ff:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  21a906:	e8 85 13 ff ff       	call   20bc90 <__zig_return_error>
  21a90b:	48 8b 3d f6 e6 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffee6f6]        # 209008 <__unnamed_104>
  21a912:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  21a919:	48 89 38             	mov    QWORD PTR [rax],rdi
  21a91c:	48 8b 3d ed e6 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffee6ed]        # 209010 <__unnamed_104+0x8>
  21a923:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  21a927:	48 8b 3d ea e6 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffee6ea]        # 209018 <__unnamed_104+0x10>
  21a92e:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  21a932:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21a939:	48 81 c4 88 01 00 00 	add    rsp,0x188
  21a940:	5b                   	pop    rbx
  21a941:	5d                   	pop    rbp
  21a942:	c3                   	ret    
  21a943:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21a947:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  21a94e:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  21a952:	48 8d 8d 00 ff ff ff 	lea    rcx,[rbp-0x100]
  21a959:	41 b9 08 00 00 00    	mov    r9d,0x8
  21a95f:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  21a966:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
        const byte_slice = try self.reallocFn(self, old_byte_slice, byte_count, alignment);
  21a96d:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  21a974:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  21a978:	48 8b b5 18 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe8]
  21a97f:	4c 8b 85 f8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x108]
  21a986:	4c 8b 95 c8 fe ff ff 	mov    r10,QWORD PTR [rbp-0x138]
  21a98d:	48 89 b5 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rsi
  21a994:	4c 89 d6             	mov    rsi,r10
  21a997:	4c 8b 9d a8 fe ff ff 	mov    r11,QWORD PTR [rbp-0x158]
  21a99e:	48 89 95 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdx
  21a9a5:	4c 89 da             	mov    rdx,r11
  21a9a8:	48 8b 9d a0 fe ff ff 	mov    rbx,QWORD PTR [rbp-0x160]
  21a9af:	ff d3                	call   rbx
  21a9b1:	66 83 7d 98 00       	cmp    WORD PTR [rbp-0x68],0x0
  21a9b6:	74 5d                	je     21aa15 <Allocator_alignedRealloc.47+0x265>
  21a9b8:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  21a9bc:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  21a9c3:	66 89 85 9e fe ff ff 	mov    WORD PTR [rbp-0x162],ax
  21a9ca:	e8 c1 12 ff ff       	call   20bc90 <__zig_return_error>
  21a9cf:	66 8b 85 9e fe ff ff 	mov    ax,WORD PTR [rbp-0x162]
  21a9d6:	66 89 85 68 ff ff ff 	mov    WORD PTR [rbp-0x98],ax
  21a9dd:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  21a9e4:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  21a9eb:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21a9ee:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  21a9f5:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21a9f9:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  21aa00:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  21aa04:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21aa0b:	48 81 c4 88 01 00 00 	add    rsp,0x188
  21aa12:	5b                   	pop    rbx
  21aa13:	5d                   	pop    rbp
  21aa14:	c3                   	ret    
  21aa15:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  21aa19:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  21aa20:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  21aa24:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
        assert(byte_slice.len == byte_count);
  21aa2b:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  21aa32:	48 3b 85 f8 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x108]
  21aa39:	0f 94 c1             	sete   cl
  21aa3c:	0f b6 f9             	movzx  edi,cl
  21aa3f:	e8 bc 05 ff ff       	call   20b000 <assert>
        if (n > old_mem.len) {
  21aa44:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  21aa4b:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  21aa52:	48 3b 42 08          	cmp    rax,QWORD PTR [rdx+0x8]
  21aa56:	76 71                	jbe    21aac9 <Allocator_alignedRealloc.47+0x319>
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  21aa58:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  21aa5f:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21aa66:	48 39 c8             	cmp    rax,rcx
  21aa69:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  21aa70:	48 89 8d 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rcx
  21aa77:	76 78                	jbe    21aaf1 <Allocator_alignedRealloc.47+0x341>
  21aa79:	eb 66                	jmp    21aae1 <Allocator_alignedRealloc.47+0x331>
  21aa7b:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  21aa82:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
  21aa89:	48 39 c8             	cmp    rax,rcx
  21aa8c:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  21aa93:	73 32                	jae    21aac7 <Allocator_alignedRealloc.47+0x317>
  21aa95:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  21aa9c:	48 03 8d 58 ff ff ff 	add    rcx,QWORD PTR [rbp-0xa8]
  21aaa3:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
                byte.* = undefined;
  21aaaa:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  21aab1:	88 01                	mov    BYTE PTR [rcx],al
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  21aab3:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  21aaba:	48 83 c1 01          	add    rcx,0x1
  21aabe:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
  21aac5:	eb b4                	jmp    21aa7b <Allocator_alignedRealloc.47+0x2cb>
        if (n > old_mem.len) {
  21aac7:	eb 02                	jmp    21aacb <Allocator_alignedRealloc.47+0x31b>
  21aac9:	eb 00                	jmp    21aacb <Allocator_alignedRealloc.47+0x31b>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  21aacb:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  21aad2:	48 83 e0 07          	and    rax,0x7
  21aad6:	48 83 f8 00          	cmp    rax,0x0
  21aada:	74 7b                	je     21ab57 <Allocator_alignedRealloc.47+0x3a7>
  21aadc:	e9 ae 00 00 00       	jmp    21ab8f <Allocator_alignedRealloc.47+0x3df>
  21aae1:	48 8d 3d 10 89 02 00 	lea    rdi,[rip+0x28910]        # 2433f8 <__unnamed_20>
  21aae8:	31 c0                	xor    eax,eax
  21aaea:	89 c6                	mov    esi,eax
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  21aaec:	e8 0f 0b ff ff       	call   20b600 <panic>
  21aaf1:	be aa 00 00 00       	mov    esi,0xaa
  21aaf6:	b8 08 00 00 00       	mov    eax,0x8
  21aafb:	89 c2                	mov    edx,eax
  21aafd:	48 8d 8d e0 fe ff ff 	lea    rcx,[rbp-0x120]
  21ab04:	48 8b bd 90 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x170]
  21ab0b:	48 03 bd e8 fe ff ff 	add    rdi,QWORD PTR [rbp-0x118]
  21ab12:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
  21ab19:	48 8b bd 88 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x178]
  21ab20:	4c 8b 85 90 fe ff ff 	mov    r8,QWORD PTR [rbp-0x170]
  21ab27:	4c 29 c7             	sub    rdi,r8
  21ab2a:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  21ab31:	48 89 cf             	mov    rdi,rcx
  21ab34:	e8 77 9d 01 00       	call   2348b0 <memset>
  21ab39:	48 c7 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],0x0
  21ab40:	00 00 00 00 
  21ab44:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  21ab4b:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  21ab52:	e9 24 ff ff ff       	jmp    21aa7b <Allocator_alignedRealloc.47+0x2cb>
  21ab57:	b8 28 00 00 00       	mov    eax,0x28
  21ab5c:	89 c1                	mov    ecx,eax
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  21ab5e:	48 8b 95 e8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x118]
  21ab65:	48 89 95 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdx
  21ab6c:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  21ab73:	48 89 d0             	mov    rax,rdx
  21ab76:	31 f6                	xor    esi,esi
  21ab78:	48 89 95 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rdx
  21ab7f:	89 f2                	mov    edx,esi
  21ab81:	48 f7 f1             	div    rcx
  21ab84:	48 83 fa 00          	cmp    rdx,0x0
  21ab88:	74 15                	je     21ab9f <Allocator_alignedRealloc.47+0x3ef>
  21ab8a:	e9 87 00 00 00       	jmp    21ac16 <Allocator_alignedRealloc.47+0x466>
  21ab8f:	48 8d 3d 3a 8a 02 00 	lea    rdi,[rip+0x28a3a]        # 2435d0 <__unnamed_75>
  21ab96:	31 c0                	xor    eax,eax
  21ab98:	89 c6                	mov    esi,eax
  21ab9a:	e8 61 0a ff ff       	call   20b600 <panic>
  21ab9f:	b8 28 00 00 00       	mov    eax,0x28
  21aba4:	89 c1                	mov    ecx,eax
  21aba6:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  21abad:	31 d2                	xor    edx,edx
  21abaf:	48 f7 f1             	div    rcx
  21abb2:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  21abb9:	66 c7 85 20 ff ff ff 	mov    WORD PTR [rbp-0xe0],0x0
  21abc0:	00 00 
  21abc2:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  21abc9:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  21abd0:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  21abd7:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  21abde:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21abe5:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  21abec:	48 89 01             	mov    QWORD PTR [rcx],rax
  21abef:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  21abf6:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21abfa:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21ac01:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21ac05:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21ac0c:	48 81 c4 88 01 00 00 	add    rsp,0x188
  21ac13:	5b                   	pop    rbx
  21ac14:	5d                   	pop    rbp
  21ac15:	c3                   	ret    
  21ac16:	48 8d 3d cb 89 02 00 	lea    rdi,[rip+0x289cb]        # 2435e8 <__unnamed_76>
  21ac1d:	31 c0                	xor    eax,eax
  21ac1f:	89 c6                	mov    esi,eax
  21ac21:	e8 da 09 ff ff       	call   20b600 <panic>
  21ac26:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  21ac2d:	00 00 00 

000000000021ac30 <Allocator_alignedAlloc.48>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  21ac30:	55                   	push   rbp
  21ac31:	48 89 e5             	mov    rbp,rsp
  21ac34:	48 81 ec 20 01 00 00 	sub    rsp,0x120
  21ac3b:	48 89 f8             	mov    rax,rdi
  21ac3e:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  21ac45:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  21ac4c:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  21ac53:	00 
  21ac54:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  21ac5b:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  21ac62:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  21ac69:	75 37                	jne    21aca2 <Allocator_alignedAlloc.48+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  21ac6b:	48 8b 05 ae e3 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffee3ae]        # 209020 <__unnamed_105>
  21ac72:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21ac79:	48 89 01             	mov    QWORD PTR [rcx],rax
  21ac7c:	48 8b 05 a5 e3 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffee3a5]        # 209028 <__unnamed_105+0x8>
  21ac83:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21ac87:	48 8b 05 a2 e3 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffee3a2]        # 209030 <__unnamed_105+0x10>
  21ac8e:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21ac92:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21ac99:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21aca0:	5d                   	pop    rbp
  21aca1:	c3                   	ret    
        if (n == 0) {
  21aca2:	eb 00                	jmp    21aca4 <Allocator_alignedAlloc.48+0x74>
  21aca4:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  21aca8:	b8 28 00 00 00       	mov    eax,0x28
  21acad:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  21acaf:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  21acb6:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21acbd:	e8 4e a7 ff ff       	call   215410 <mul>
  21acc2:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  21acc7:	74 43                	je     21ad0c <Allocator_alignedAlloc.48+0xdc>
  21acc9:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  21acd0:	e8 bb 0f ff ff       	call   20bc90 <__zig_return_error>
  21acd5:	48 8b 3d 5c e3 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffee35c]        # 209038 <__unnamed_106>
  21acdc:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21ace3:	48 89 38             	mov    QWORD PTR [rax],rdi
  21ace6:	48 8b 3d 53 e3 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffee353]        # 209040 <__unnamed_106+0x8>
  21aced:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  21acf1:	48 8b 3d 50 e3 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffee350]        # 209048 <__unnamed_106+0x10>
  21acf8:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  21acfc:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21ad03:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21ad0a:	5d                   	pop    rbp
  21ad0b:	c3                   	ret    
  21ad0c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21ad10:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  21ad17:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  21ad1b:	41 b8 08 00 00 00    	mov    r8d,0x8
  21ad21:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  21ad28:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  21ad2f:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  21ad36:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  21ad39:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  21ad40:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  21ad47:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  21ad4e:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  21ad55:	4c 89 ce             	mov    rsi,r9
  21ad58:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  21ad5f:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  21ad66:	4c 89 d1             	mov    rcx,r10
  21ad69:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  21ad70:	41 ff d3             	call   r11
  21ad73:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  21ad78:	74 50                	je     21adca <Allocator_alignedAlloc.48+0x19a>
  21ad7a:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  21ad7e:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  21ad85:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  21ad8c:	e8 ff 0e ff ff       	call   20bc90 <__zig_return_error>
  21ad91:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  21ad98:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  21ad9c:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  21ada0:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21ada7:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21adaa:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  21adae:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21adb2:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  21adb6:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  21adba:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21adc1:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21adc8:	5d                   	pop    rbp
  21adc9:	c3                   	ret    
  21adca:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  21adce:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  21add5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21add9:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  21ade0:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  21ade7:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  21adee:	0f 94 c1             	sete   cl
  21adf1:	0f b6 f9             	movzx  edi,cl
  21adf4:	e8 07 02 ff ff       	call   20b000 <assert>
  21adf9:	be aa 00 00 00       	mov    esi,0xaa
  21adfe:	bf 08 00 00 00       	mov    edi,0x8
  21ae03:	89 fa                	mov    edx,edi
  21ae05:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  21ae0c:	48 89 c7             	mov    rdi,rax
  21ae0f:	e8 9c 9a 01 00       	call   2348b0 <memset>
  21ae14:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  21ae1b:	00 00 00 00 
  21ae1f:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  21ae26:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  21ae2d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  21ae34:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  21ae3b:	48 39 c8             	cmp    rax,rcx
  21ae3e:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  21ae45:	73 32                	jae    21ae79 <Allocator_alignedAlloc.48+0x249>
  21ae47:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21ae4e:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  21ae55:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  21ae5c:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  21ae63:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  21ae65:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21ae6c:	48 83 c1 01          	add    rcx,0x1
  21ae70:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  21ae77:	eb b4                	jmp    21ae2d <Allocator_alignedAlloc.48+0x1fd>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  21ae79:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  21ae80:	48 83 e0 07          	and    rax,0x7
  21ae84:	48 83 f8 00          	cmp    rax,0x0
  21ae88:	75 32                	jne    21aebc <Allocator_alignedAlloc.48+0x28c>
  21ae8a:	b8 28 00 00 00       	mov    eax,0x28
  21ae8f:	89 c1                	mov    ecx,eax
  21ae91:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
  21ae98:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
  21ae9c:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
  21aea3:	48 89 d0             	mov    rax,rdx
  21aea6:	31 f6                	xor    esi,esi
  21aea8:	48 89 95 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdx
  21aeaf:	89 f2                	mov    edx,esi
  21aeb1:	48 f7 f1             	div    rcx
  21aeb4:	48 83 fa 00          	cmp    rdx,0x0
  21aeb8:	74 12                	je     21aecc <Allocator_alignedAlloc.48+0x29c>
  21aeba:	eb 77                	jmp    21af33 <Allocator_alignedAlloc.48+0x303>
  21aebc:	48 8d 3d 0d 87 02 00 	lea    rdi,[rip+0x2870d]        # 2435d0 <__unnamed_75>
  21aec3:	31 c0                	xor    eax,eax
  21aec5:	89 c6                	mov    esi,eax
  21aec7:	e8 34 07 ff ff       	call   20b600 <panic>
  21aecc:	b8 28 00 00 00       	mov    eax,0x28
  21aed1:	89 c1                	mov    ecx,eax
  21aed3:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  21aeda:	31 d2                	xor    edx,edx
  21aedc:	48 f7 f1             	div    rcx
  21aedf:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  21aee3:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  21aeea:	00 00 
  21aeec:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  21aef0:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  21aef7:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  21aefb:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  21aeff:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21af06:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21af0d:	48 89 01             	mov    QWORD PTR [rcx],rax
  21af10:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  21af17:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21af1b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  21af1f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21af23:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21af2a:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21af31:	5d                   	pop    rbp
  21af32:	c3                   	ret    
  21af33:	48 8d 3d ae 86 02 00 	lea    rdi,[rip+0x286ae]        # 2435e8 <__unnamed_76>
  21af3a:	31 c0                	xor    eax,eax
  21af3c:	89 c6                	mov    esi,eax
  21af3e:	e8 bd 06 ff ff       	call   20b600 <panic>
  21af43:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21af4a:	84 00 00 00 00 00 

000000000021af50 <Allocator_free.49>:
    pub fn free(self: *Allocator, memory: var) void {
  21af50:	55                   	push   rbp
  21af51:	48 89 e5             	mov    rbp,rsp
  21af54:	48 83 ec 60          	sub    rsp,0x60
  21af58:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
        const bytes = @sliceToBytes(memory);
  21af5c:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  21af5f:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  21af63:	48 6b 76 08 28       	imul   rsi,QWORD PTR [rsi+0x8],0x28
  21af68:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21af6c:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  21af70:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  21af74:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21af78:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        if (bytes.len == 0) return;
  21af7c:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
  21af81:	75 06                	jne    21af89 <Allocator_free.49+0x39>
  21af83:	48 83 c4 60          	add    rsp,0x60
  21af87:	5d                   	pop    rbp
  21af88:	c3                   	ret    
  21af89:	31 c0                	xor    eax,eax
  21af8b:	89 c1                	mov    ecx,eax
        const non_const_ptr = @intToPtr([*]u8, @ptrToInt(bytes.ptr));
  21af8d:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  21af91:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
        self.freeFn(self, non_const_ptr[0..bytes.len]);
  21af95:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  21af99:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  21af9d:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  21afa1:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  21afa5:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
  21afa9:	48 39 f1             	cmp    rcx,rsi
  21afac:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
  21afb0:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
  21afb4:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  21afb8:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  21afbc:	76 10                	jbe    21afce <Allocator_free.49+0x7e>
  21afbe:	48 8d 3d 33 84 02 00 	lea    rdi,[rip+0x28433]        # 2433f8 <__unnamed_20>
  21afc5:	31 c0                	xor    eax,eax
  21afc7:	89 c6                	mov    esi,eax
  21afc9:	e8 32 06 ff ff       	call   20b600 <panic>
  21afce:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
  21afd2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21afd6:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  21afda:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  21afde:	48 83 e9 00          	sub    rcx,0x0
  21afe2:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  21afe6:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  21afea:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  21afee:	ff d1                	call   rcx
    pub fn free(self: *Allocator, memory: var) void {
  21aff0:	48 83 c4 60          	add    rsp,0x60
  21aff4:	5d                   	pop    rbp
  21aff5:	c3                   	ret    
  21aff6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  21affd:	00 00 00 

000000000021b000 <parseFormValueTargetAddrSize>:
fn parseFormValueTargetAddrSize(in_stream: var) !u64 {
  21b000:	55                   	push   rbp
  21b001:	48 89 e5             	mov    rbp,rsp
  21b004:	48 83 ec 70          	sub    rsp,0x70
  21b008:	48 89 f8             	mov    rax,rdi
  21b00b:	48 8d 4d f0          	lea    rcx,[rbp-0x10]
  21b00f:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
    return if (@sizeOf(usize) == 4) u64(try in_stream.readIntLe(u32)) else if (@sizeOf(usize) == 8) try in_stream.readIntLe(u64) else unreachable;
  21b013:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  21b017:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  21b01b:	48 89 cf             	mov    rdi,rcx
  21b01e:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  21b022:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  21b026:	e8 b5 b6 ff ff       	call   2166e0 <InStream(ReadError)_readIntLe.38>
  21b02b:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  21b030:	74 36                	je     21b068 <parseFormValueTargetAddrSize+0x68>
  21b032:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  21b036:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  21b03a:	66 89 45 9e          	mov    WORD PTR [rbp-0x62],ax
  21b03e:	e8 4d 0c ff ff       	call   20bc90 <__zig_return_error>
  21b043:	66 8b 45 9e          	mov    ax,WORD PTR [rbp-0x62]
  21b047:	66 89 45 d0          	mov    WORD PTR [rbp-0x30],ax
  21b04b:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  21b04f:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  21b053:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21b056:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  21b05a:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21b05e:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  21b062:	48 83 c4 70          	add    rsp,0x70
  21b066:	5d                   	pop    rbp
  21b067:	c3                   	ret    
  21b068:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21b06c:	66 c7 45 c0 00 00    	mov    WORD PTR [rbp-0x40],0x0
  21b072:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  21b076:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  21b07a:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  21b07e:	48 89 01             	mov    QWORD PTR [rcx],rax
  21b081:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21b085:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21b089:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  21b08d:	48 83 c4 70          	add    rsp,0x70
  21b091:	5d                   	pop    rbp
  21b092:	c3                   	ret    
  21b093:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21b09a:	84 00 00 00 00 00 

000000000021b0a0 <parseFormValueBlock>:
fn parseFormValueBlock(allocator: *mem.Allocator, in_stream: var, size: usize) !FormValue {
  21b0a0:	55                   	push   rbp
  21b0a1:	48 89 e5             	mov    rbp,rsp
  21b0a4:	48 81 ec c0 00 00 00 	sub    rsp,0xc0
  21b0ab:	48 89 f8             	mov    rax,rdi
  21b0ae:	4c 8d 4d f0          	lea    r9,[rbp-0x10]
  21b0b2:	41 ba 01 00 00 00    	mov    r10d,0x1
  21b0b8:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
  21b0bc:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
  21b0c0:	4c 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r8
    const block_len = try in_stream.readVarInt(builtin.Endian.Little, usize, size);
  21b0c7:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
  21b0cb:	4c 8b 85 78 ff ff ff 	mov    r8,QWORD PTR [rbp-0x88]
  21b0d2:	48 89 bd 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdi
  21b0d9:	4c 89 cf             	mov    rdi,r9
  21b0dc:	48 89 b5 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rsi
  21b0e3:	44 89 d1             	mov    ecx,r10d
  21b0e6:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  21b0ed:	e8 3e c9 00 00       	call   227a30 <InStream(ReadError)_readVarInt>
  21b0f2:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  21b0f7:	74 5a                	je     21b153 <parseFormValueBlock+0xb3>
  21b0f9:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  21b0fd:	48 8b bd 60 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  21b104:	66 89 85 56 ff ff ff 	mov    WORD PTR [rbp-0xaa],ax
  21b10b:	e8 80 0b ff ff       	call   20bc90 <__zig_return_error>
  21b110:	b9 28 00 00 00       	mov    ecx,0x28
  21b115:	89 ca                	mov    edx,ecx
  21b117:	48 8d 7d b8          	lea    rdi,[rbp-0x48]
  21b11b:	66 8b 85 56 ff ff ff 	mov    ax,WORD PTR [rbp-0xaa]
  21b122:	66 89 45 b8          	mov    WORD PTR [rbp-0x48],ax
  21b126:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
  21b12d:	48 89 bd 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdi
  21b134:	48 89 f7             	mov    rdi,rsi
  21b137:	48 8b b5 48 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xb8]
  21b13e:	e8 bd 97 01 00       	call   234900 <memcpy>
  21b143:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
  21b14a:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  21b151:	5d                   	pop    rbp
  21b152:	c3                   	ret    
  21b153:	48 8d 7d 90          	lea    rdi,[rbp-0x70]
  21b157:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21b15b:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
    return parseFormValueBlockLen(allocator, in_stream, block_len);
  21b162:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
  21b166:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  21b16a:	4c 8b 85 70 ff ff ff 	mov    r8,QWORD PTR [rbp-0x90]
  21b171:	48 8b b5 60 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa0]
  21b178:	e8 53 00 00 00       	call   21b1d0 <parseFormValueBlockLen>
  21b17d:	66 83 7d 90 00       	cmp    WORD PTR [rbp-0x70],0x0
  21b182:	74 0e                	je     21b192 <parseFormValueBlock+0xf2>
  21b184:	48 8b bd 60 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  21b18b:	e8 00 0b ff ff       	call   20bc90 <__zig_return_error>
  21b190:	eb 02                	jmp    21b194 <parseFormValueBlock+0xf4>
  21b192:	eb 00                	jmp    21b194 <parseFormValueBlock+0xf4>
  21b194:	b8 28 00 00 00       	mov    eax,0x28
  21b199:	89 c2                	mov    edx,eax
  21b19b:	48 8d 4d 90          	lea    rcx,[rbp-0x70]
  21b19f:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
  21b1a6:	48 89 f7             	mov    rdi,rsi
  21b1a9:	48 89 ce             	mov    rsi,rcx
  21b1ac:	e8 4f 97 01 00       	call   234900 <memcpy>
  21b1b1:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
  21b1b8:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  21b1bf:	5d                   	pop    rbp
  21b1c0:	c3                   	ret    
  21b1c1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21b1c8:	0f 1f 84 00 00 00 00 
  21b1cf:	00 

000000000021b1d0 <parseFormValueBlockLen>:
fn parseFormValueBlockLen(allocator: *mem.Allocator, in_stream: var, size: usize) !FormValue {
  21b1d0:	55                   	push   rbp
  21b1d1:	48 89 e5             	mov    rbp,rsp
  21b1d4:	48 81 ec 00 01 00 00 	sub    rsp,0x100
  21b1db:	48 89 f8             	mov    rax,rdi
  21b1de:	4c 8d 4d e8          	lea    r9,[rbp-0x18]
  21b1e2:	48 89 95 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdx
  21b1e9:	48 89 8d 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rcx
  21b1f0:	4c 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],r8
    const buf = try readAllocBytes(allocator, in_stream, size);
  21b1f7:	48 8b 95 58 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa8]
  21b1fe:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
  21b205:	4c 8b 85 48 ff ff ff 	mov    r8,QWORD PTR [rbp-0xb8]
  21b20c:	48 89 bd 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rdi
  21b213:	4c 89 cf             	mov    rdi,r9
  21b216:	48 89 b5 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rsi
  21b21d:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  21b224:	e8 77 02 00 00       	call   21b4a0 <readAllocBytes>
  21b229:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  21b22e:	74 5a                	je     21b28a <parseFormValueBlockLen+0xba>
  21b230:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  21b234:	48 8b bd 20 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe0]
  21b23b:	66 89 85 16 ff ff ff 	mov    WORD PTR [rbp-0xea],ax
  21b242:	e8 49 0a ff ff       	call   20bc90 <__zig_return_error>
  21b247:	b9 28 00 00 00       	mov    ecx,0x28
  21b24c:	89 ca                	mov    edx,ecx
  21b24e:	48 8d 7d a8          	lea    rdi,[rbp-0x58]
  21b252:	66 8b 85 16 ff ff ff 	mov    ax,WORD PTR [rbp-0xea]
  21b259:	66 89 45 a8          	mov    WORD PTR [rbp-0x58],ax
  21b25d:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21b264:	48 89 bd 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdi
  21b26b:	48 89 f7             	mov    rdi,rsi
  21b26e:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
  21b275:	e8 86 96 01 00       	call   234900 <memcpy>
  21b27a:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  21b281:	48 81 c4 00 01 00 00 	add    rsp,0x100
  21b288:	5d                   	pop    rbp
  21b289:	c3                   	ret    
  21b28a:	b8 28 00 00 00       	mov    eax,0x28
  21b28f:	89 c2                	mov    edx,eax
  21b291:	48 8d 8d 60 ff ff ff 	lea    rcx,[rbp-0xa0]
  21b298:	c5 fa 6f 45 f0       	vmovdqu xmm0,XMMWORD PTR [rbp-0x10]
  21b29d:	c5 f9 7f 85 30 ff ff 	vmovdqa XMMWORD PTR [rbp-0xd0],xmm0
  21b2a4:	ff 
    return FormValue{ .Block = buf };
  21b2a5:	c6 45 a0 01          	mov    BYTE PTR [rbp-0x60],0x1
  21b2a9:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  21b2b0:	48 89 75 88          	mov    QWORD PTR [rbp-0x78],rsi
  21b2b4:	48 8b b5 38 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc8]
  21b2bb:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
  21b2bf:	66 c7 85 60 ff ff ff 	mov    WORD PTR [rbp-0xa0],0x0
  21b2c6:	00 00 
  21b2c8:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
  21b2cc:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
  21b2d3:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  21b2d7:	48 89 b5 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rsi
  21b2de:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  21b2e2:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
  21b2e9:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  21b2ed:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
  21b2f1:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21b2f8:	48 89 f7             	mov    rdi,rsi
  21b2fb:	48 89 ce             	mov    rsi,rcx
  21b2fe:	e8 fd 95 01 00       	call   234900 <memcpy>
  21b303:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  21b30a:	48 81 c4 00 01 00 00 	add    rsp,0x100
  21b311:	5d                   	pop    rbp
  21b312:	c3                   	ret    
  21b313:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21b31a:	84 00 00 00 00 00 

000000000021b320 <parseFormValueConstant>:
fn parseFormValueConstant(allocator: *mem.Allocator, in_stream: var, signed: bool, size: usize) !FormValue {
  21b320:	55                   	push   rbp
  21b321:	48 89 e5             	mov    rbp,rsp
  21b324:	48 81 ec 00 01 00 00 	sub    rsp,0x100
  21b32b:	44 88 c0             	mov    al,r8b
  21b32e:	49 89 fa             	mov    r10,rdi
  21b331:	4c 8d 5d e8          	lea    r11,[rbp-0x18]
  21b335:	48 89 95 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rdx
  21b33c:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  21b343:	24 01                	and    al,0x1
  21b345:	88 85 37 ff ff ff    	mov    BYTE PTR [rbp-0xc9],al
  21b34b:	4c 89 8d 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],r9
            .signed = signed,
  21b352:	8a 85 37 ff ff ff    	mov    al,BYTE PTR [rbp-0xc9]
            .payload = try readAllocBytes(allocator, in_stream, size),
  21b358:	48 8b 95 40 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc0]
  21b35f:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
  21b366:	4c 8b 85 28 ff ff ff 	mov    r8,QWORD PTR [rbp-0xd8]
  21b36d:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  21b374:	4c 89 df             	mov    rdi,r11
  21b377:	48 89 b5 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rsi
  21b37e:	4c 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],r10
  21b385:	88 85 0f ff ff ff    	mov    BYTE PTR [rbp-0xf1],al
  21b38b:	e8 10 01 00 00       	call   21b4a0 <readAllocBytes>
  21b390:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  21b395:	74 5a                	je     21b3f1 <parseFormValueConstant+0xd1>
  21b397:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  21b39b:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
  21b3a2:	66 89 85 0c ff ff ff 	mov    WORD PTR [rbp-0xf4],ax
  21b3a9:	e8 e2 08 ff ff       	call   20bc90 <__zig_return_error>
  21b3ae:	b9 28 00 00 00       	mov    ecx,0x28
  21b3b3:	89 ca                	mov    edx,ecx
  21b3b5:	48 8d 7d a8          	lea    rdi,[rbp-0x58]
  21b3b9:	66 8b 85 0c ff ff ff 	mov    ax,WORD PTR [rbp-0xf4]
  21b3c0:	66 89 45 a8          	mov    WORD PTR [rbp-0x58],ax
  21b3c4:	48 8b b5 20 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe0]
  21b3cb:	48 89 bd 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rdi
  21b3d2:	48 89 f7             	mov    rdi,rsi
  21b3d5:	48 8b b5 00 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x100]
  21b3dc:	e8 1f 95 01 00       	call   234900 <memcpy>
  21b3e1:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  21b3e8:	48 81 c4 00 01 00 00 	add    rsp,0x100
  21b3ef:	5d                   	pop    rbp
  21b3f0:	c3                   	ret    
  21b3f1:	b8 28 00 00 00       	mov    eax,0x28
  21b3f6:	89 c2                	mov    edx,eax
  21b3f8:	48 8d 8d 48 ff ff ff 	lea    rcx,[rbp-0xb8]
        .Const = Constant{
  21b3ff:	c5 fa 6f 45 f0       	vmovdqu xmm0,XMMWORD PTR [rbp-0x10]
  21b404:	c5 f9 7f 45 90       	vmovdqa XMMWORD PTR [rbp-0x70],xmm0
  21b409:	40 8a b5 0f ff ff ff 	mov    sil,BYTE PTR [rbp-0xf1]
  21b410:	40 80 e6 01          	and    sil,0x1
  21b414:	40 88 75 a0          	mov    BYTE PTR [rbp-0x60],sil
    return FormValue{
  21b418:	c6 45 88 02          	mov    BYTE PTR [rbp-0x78],0x2
  21b41c:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  21b420:	48 89 bd 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdi
  21b427:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  21b42b:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
  21b432:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  21b436:	48 89 7d 80          	mov    QWORD PTR [rbp-0x80],rdi
  21b43a:	66 c7 85 48 ff ff ff 	mov    WORD PTR [rbp-0xb8],0x0
  21b441:	00 00 
  21b443:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  21b44a:	48 89 bd 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdi
  21b451:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  21b458:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
  21b45f:	48 8b 7d 80          	mov    rdi,QWORD PTR [rbp-0x80]
  21b463:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  21b46a:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  21b46e:	48 89 bd 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdi
  21b475:	48 8b bd 20 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe0]
  21b47c:	48 89 ce             	mov    rsi,rcx
  21b47f:	e8 7c 94 01 00       	call   234900 <memcpy>
  21b484:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  21b48b:	48 81 c4 00 01 00 00 	add    rsp,0x100
  21b492:	5d                   	pop    rbp
  21b493:	c3                   	ret    
  21b494:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21b49b:	00 00 00 00 00 

000000000021b4a0 <readAllocBytes>:
fn readAllocBytes(allocator: *mem.Allocator, in_stream: var, size: usize) ![]u8 {
  21b4a0:	55                   	push   rbp
  21b4a1:	48 89 e5             	mov    rbp,rsp
  21b4a4:	48 81 ec e0 00 00 00 	sub    rsp,0xe0
  21b4ab:	48 89 f8             	mov    rax,rdi
  21b4ae:	4c 8d 4d e8          	lea    r9,[rbp-0x18]
  21b4b2:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
  21b4b9:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
  21b4c0:	4c 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],r8
    const buf = try allocator.alloc(u8, size);
  21b4c7:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  21b4ce:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
  21b4d5:	48 89 bd 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdi
  21b4dc:	4c 89 cf             	mov    rdi,r9
  21b4df:	48 89 b5 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rsi
  21b4e6:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  21b4ed:	e8 ae 6f 00 00       	call   2224a0 <Allocator_alloc.74>
  21b4f2:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  21b4f7:	74 50                	je     21b549 <readAllocBytes+0xa9>
  21b4f9:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  21b4fd:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
  21b504:	66 89 85 26 ff ff ff 	mov    WORD PTR [rbp-0xda],ax
  21b50b:	e8 80 07 ff ff       	call   20bc90 <__zig_return_error>
  21b510:	66 8b 85 26 ff ff ff 	mov    ax,WORD PTR [rbp-0xda]
  21b517:	66 89 45 b8          	mov    WORD PTR [rbp-0x48],ax
  21b51b:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  21b51f:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
  21b526:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21b529:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21b52d:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21b531:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  21b535:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  21b539:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  21b540:	48 81 c4 e0 00 00 00 	add    rsp,0xe0
  21b547:	5d                   	pop    rbp
  21b548:	c3                   	ret    
  21b549:	48 8d 7d a8          	lea    rdi,[rbp-0x58]
  21b54d:	48 8d 8d 40 ff ff ff 	lea    rcx,[rbp-0xc0]
  21b554:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21b558:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  21b55f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21b563:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
    if ((try in_stream.read(buf)) < size) return error.EndOfFile;
  21b56a:	48 8b 95 58 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa8]
  21b571:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  21b578:	e8 e3 92 ff ff       	call   214860 <InStream(ReadError)_read>
  21b57d:	66 83 7d a8 00       	cmp    WORD PTR [rbp-0x58],0x0
  21b582:	74 63                	je     21b5e7 <readAllocBytes+0x147>
  21b584:	48 8d b5 40 ff ff ff 	lea    rsi,[rbp-0xc0]
    errdefer allocator.free(buf);
  21b58b:	48 8b bd 60 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  21b592:	e8 d9 6d 00 00       	call   222370 <Allocator_free.73>
    if ((try in_stream.read(buf)) < size) return error.EndOfFile;
  21b597:	66 8b 45 a8          	mov    ax,WORD PTR [rbp-0x58]
  21b59b:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
  21b5a2:	66 89 85 24 ff ff ff 	mov    WORD PTR [rbp-0xdc],ax
  21b5a9:	e8 e2 06 ff ff       	call   20bc90 <__zig_return_error>
  21b5ae:	66 8b 85 24 ff ff ff 	mov    ax,WORD PTR [rbp-0xdc]
  21b5b5:	66 89 45 80          	mov    WORD PTR [rbp-0x80],ax
  21b5b9:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  21b5bd:	48 8b bd 38 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xc8]
  21b5c4:	48 89 37             	mov    QWORD PTR [rdi],rsi
  21b5c7:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
  21b5cb:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  21b5cf:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  21b5d3:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  21b5d7:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  21b5de:	48 81 c4 e0 00 00 00 	add    rsp,0xe0
  21b5e5:	5d                   	pop    rbp
  21b5e6:	c3                   	ret    
  21b5e7:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  21b5eb:	48 3b 85 50 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xb0]
  21b5f2:	73 56                	jae    21b64a <readAllocBytes+0x1aa>
  21b5f4:	48 8d b5 40 ff ff ff 	lea    rsi,[rbp-0xc0]
    errdefer allocator.free(buf);
  21b5fb:	48 8b bd 60 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  21b602:	e8 69 6d 00 00       	call   222370 <Allocator_free.73>
    if ((try in_stream.read(buf)) < size) return error.EndOfFile;
  21b607:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
  21b60e:	e8 7d 06 ff ff       	call   20bc90 <__zig_return_error>
  21b613:	48 8b 35 ce f0 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffef0ce]        # 20a6e8 <__unnamed_107>
  21b61a:	48 8b bd 38 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xc8]
  21b621:	48 89 37             	mov    QWORD PTR [rdi],rsi
  21b624:	48 8b 35 c5 f0 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffef0c5]        # 20a6f0 <__unnamed_107+0x8>
  21b62b:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  21b62f:	48 8b 35 c2 f0 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffef0c2]        # 20a6f8 <__unnamed_107+0x10>
  21b636:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  21b63a:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  21b641:	48 81 c4 e0 00 00 00 	add    rsp,0xe0
  21b648:	5d                   	pop    rbp
  21b649:	c3                   	ret    
  21b64a:	eb 00                	jmp    21b64c <readAllocBytes+0x1ac>
    return buf;
  21b64c:	66 c7 85 68 ff ff ff 	mov    WORD PTR [rbp-0x98],0x0
  21b653:	00 00 
  21b655:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  21b65c:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  21b663:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  21b66a:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  21b671:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  21b678:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
  21b67f:	48 89 01             	mov    QWORD PTR [rcx],rax
  21b682:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21b689:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21b68d:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  21b694:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21b698:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  21b69f:	48 81 c4 e0 00 00 00 	add    rsp,0xe0
  21b6a6:	5d                   	pop    rbp
  21b6a7:	c3                   	ret    
  21b6a8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  21b6af:	00 

000000000021b6b0 <parseFormValueDwarfOffsetSize>:
fn parseFormValueDwarfOffsetSize(in_stream: var, is_64: bool) !u64 {
  21b6b0:	55                   	push   rbp
  21b6b1:	48 89 e5             	mov    rbp,rsp
  21b6b4:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  21b6bb:	88 c8                	mov    al,cl
  21b6bd:	49 89 f8             	mov    r8,rdi
  21b6c0:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  21b6c4:	24 01                	and    al,0x1
  21b6c6:	88 45 97             	mov    BYTE PTR [rbp-0x69],al
    return if (is_64) try in_stream.readIntLe(u64) else u64(try in_stream.readIntLe(u32));
  21b6c9:	f6 45 97 01          	test   BYTE PTR [rbp-0x69],0x1
  21b6cd:	48 89 75 88          	mov    QWORD PTR [rbp-0x78],rsi
  21b6d1:	4c 89 45 80          	mov    QWORD PTR [rbp-0x80],r8
  21b6d5:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
  21b6dc:	75 02                	jne    21b6e0 <parseFormValueDwarfOffsetSize+0x30>
  21b6de:	eb 67                	jmp    21b747 <parseFormValueDwarfOffsetSize+0x97>
  21b6e0:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  21b6e4:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  21b6e8:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
  21b6ec:	e8 ef af ff ff       	call   2166e0 <InStream(ReadError)_readIntLe.38>
  21b6f1:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  21b6f6:	74 42                	je     21b73a <parseFormValueDwarfOffsetSize+0x8a>
  21b6f8:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  21b6fc:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  21b700:	66 89 85 76 ff ff ff 	mov    WORD PTR [rbp-0x8a],ax
  21b707:	e8 84 05 ff ff       	call   20bc90 <__zig_return_error>
  21b70c:	66 8b 85 76 ff ff ff 	mov    ax,WORD PTR [rbp-0x8a]
  21b713:	66 89 45 d0          	mov    WORD PTR [rbp-0x30],ax
  21b717:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  21b71b:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  21b722:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21b725:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  21b729:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21b72d:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  21b731:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  21b738:	5d                   	pop    rbp
  21b739:	c3                   	ret    
  21b73a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21b73e:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  21b745:	eb 66                	jmp    21b7ad <parseFormValueDwarfOffsetSize+0xfd>
  21b747:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  21b74b:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  21b74f:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
  21b753:	e8 28 af ff ff       	call   216680 <InStream(ReadError)_readIntLe>
  21b758:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  21b75d:	74 42                	je     21b7a1 <parseFormValueDwarfOffsetSize+0xf1>
  21b75f:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  21b763:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  21b767:	66 89 85 66 ff ff ff 	mov    WORD PTR [rbp-0x9a],ax
  21b76e:	e8 1d 05 ff ff       	call   20bc90 <__zig_return_error>
  21b773:	66 8b 85 66 ff ff ff 	mov    ax,WORD PTR [rbp-0x9a]
  21b77a:	66 89 45 b0          	mov    WORD PTR [rbp-0x50],ax
  21b77e:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  21b782:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  21b789:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21b78c:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  21b790:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21b794:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  21b798:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  21b79f:	5d                   	pop    rbp
  21b7a0:	c3                   	ret    
  21b7a1:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  21b7a4:	89 c1                	mov    ecx,eax
  21b7a6:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
  21b7ad:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  21b7b4:	66 c7 45 a0 00 00    	mov    WORD PTR [rbp-0x60],0x0
  21b7ba:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  21b7be:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  21b7c2:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  21b7c9:	48 89 01             	mov    QWORD PTR [rcx],rax
  21b7cc:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  21b7d0:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21b7d4:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  21b7d8:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  21b7df:	5d                   	pop    rbp
  21b7e0:	c3                   	ret    
  21b7e1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21b7e8:	0f 1f 84 00 00 00 00 
  21b7ef:	00 

000000000021b7f0 <parseFormValueRef>:
fn parseFormValueRef(allocator: *mem.Allocator, in_stream: var, comptime T: type) !FormValue {
  21b7f0:	55                   	push   rbp
  21b7f1:	48 89 e5             	mov    rbp,rsp
  21b7f4:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  21b7fb:	48 89 f8             	mov    rax,rdi
  21b7fe:	4c 8d 45 f8          	lea    r8,[rbp-0x8]
  21b802:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  21b806:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
    const block_len = try in_stream.readIntLe(T);
  21b80a:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
  21b80e:	48 89 7d 80          	mov    QWORD PTR [rbp-0x80],rdi
  21b812:	4c 89 c7             	mov    rdi,r8
  21b815:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
  21b81c:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  21b823:	e8 78 c3 00 00       	call   227ba0 <InStream(ReadError)_readIntLe.99>
  21b828:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  21b82d:	74 57                	je     21b886 <parseFormValueRef+0x96>
  21b82f:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  21b833:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  21b83a:	66 89 85 6e ff ff ff 	mov    WORD PTR [rbp-0x92],ax
  21b841:	e8 4a 04 ff ff       	call   20bc90 <__zig_return_error>
  21b846:	b9 28 00 00 00       	mov    ecx,0x28
  21b84b:	89 ca                	mov    edx,ecx
  21b84d:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  21b851:	66 8b 85 6e ff ff ff 	mov    ax,WORD PTR [rbp-0x92]
  21b858:	66 89 45 c8          	mov    WORD PTR [rbp-0x38],ax
  21b85c:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  21b860:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  21b867:	48 89 f7             	mov    rdi,rsi
  21b86a:	48 8b b5 60 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa0]
  21b871:	e8 8a 90 01 00       	call   234900 <memcpy>
  21b876:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21b87d:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  21b884:	5d                   	pop    rbp
  21b885:	c3                   	ret    
  21b886:	48 8d 7d a0          	lea    rdi,[rbp-0x60]
  21b88a:	8a 45 fa             	mov    al,BYTE PTR [rbp-0x6]
  21b88d:	88 45 8f             	mov    BYTE PTR [rbp-0x71],al
    return parseFormValueRefLen(allocator, in_stream, block_len);
  21b890:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  21b894:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  21b898:	0f b6 75 8f          	movzx  esi,BYTE PTR [rbp-0x71]
  21b89c:	41 89 f0             	mov    r8d,esi
  21b89f:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
  21b8a6:	e8 55 03 00 00       	call   21bc00 <parseFormValueRefLen>
  21b8ab:	66 83 7d a0 00       	cmp    WORD PTR [rbp-0x60],0x0
  21b8b0:	74 0e                	je     21b8c0 <parseFormValueRef+0xd0>
  21b8b2:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  21b8b9:	e8 d2 03 ff ff       	call   20bc90 <__zig_return_error>
  21b8be:	eb 02                	jmp    21b8c2 <parseFormValueRef+0xd2>
  21b8c0:	eb 00                	jmp    21b8c2 <parseFormValueRef+0xd2>
  21b8c2:	b8 28 00 00 00       	mov    eax,0x28
  21b8c7:	89 c2                	mov    edx,eax
  21b8c9:	48 8d 4d a0          	lea    rcx,[rbp-0x60]
  21b8cd:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  21b8d1:	48 89 f7             	mov    rdi,rsi
  21b8d4:	48 89 ce             	mov    rsi,rcx
  21b8d7:	e8 24 90 01 00       	call   234900 <memcpy>
  21b8dc:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21b8e3:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  21b8ea:	5d                   	pop    rbp
  21b8eb:	c3                   	ret    
  21b8ec:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000021b8f0 <parseFormValueRef.50>:
fn parseFormValueRef(allocator: *mem.Allocator, in_stream: var, comptime T: type) !FormValue {
  21b8f0:	55                   	push   rbp
  21b8f1:	48 89 e5             	mov    rbp,rsp
  21b8f4:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  21b8fb:	48 89 f8             	mov    rax,rdi
  21b8fe:	4c 8d 45 f8          	lea    r8,[rbp-0x8]
  21b902:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  21b906:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
    const block_len = try in_stream.readIntLe(T);
  21b90a:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
  21b90e:	48 89 7d 80          	mov    QWORD PTR [rbp-0x80],rdi
  21b912:	4c 89 c7             	mov    rdi,r8
  21b915:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
  21b91c:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  21b923:	e8 d8 c2 00 00       	call   227c00 <InStream(ReadError)_readIntLe.100>
  21b928:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  21b92d:	74 57                	je     21b986 <parseFormValueRef.50+0x96>
  21b92f:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  21b933:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  21b93a:	66 89 85 6e ff ff ff 	mov    WORD PTR [rbp-0x92],ax
  21b941:	e8 4a 03 ff ff       	call   20bc90 <__zig_return_error>
  21b946:	b9 28 00 00 00       	mov    ecx,0x28
  21b94b:	89 ca                	mov    edx,ecx
  21b94d:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  21b951:	66 8b 85 6e ff ff ff 	mov    ax,WORD PTR [rbp-0x92]
  21b958:	66 89 45 c8          	mov    WORD PTR [rbp-0x38],ax
  21b95c:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  21b960:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  21b967:	48 89 f7             	mov    rdi,rsi
  21b96a:	48 8b b5 60 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa0]
  21b971:	e8 8a 8f 01 00       	call   234900 <memcpy>
  21b976:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21b97d:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  21b984:	5d                   	pop    rbp
  21b985:	c3                   	ret    
  21b986:	48 8d 7d a0          	lea    rdi,[rbp-0x60]
  21b98a:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  21b98e:	66 89 45 8e          	mov    WORD PTR [rbp-0x72],ax
    return parseFormValueRefLen(allocator, in_stream, block_len);
  21b992:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  21b996:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  21b99a:	0f b7 75 8e          	movzx  esi,WORD PTR [rbp-0x72]
  21b99e:	41 89 f0             	mov    r8d,esi
  21b9a1:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
  21b9a8:	e8 53 02 00 00       	call   21bc00 <parseFormValueRefLen>
  21b9ad:	66 83 7d a0 00       	cmp    WORD PTR [rbp-0x60],0x0
  21b9b2:	74 0e                	je     21b9c2 <parseFormValueRef.50+0xd2>
  21b9b4:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  21b9bb:	e8 d0 02 ff ff       	call   20bc90 <__zig_return_error>
  21b9c0:	eb 02                	jmp    21b9c4 <parseFormValueRef.50+0xd4>
  21b9c2:	eb 00                	jmp    21b9c4 <parseFormValueRef.50+0xd4>
  21b9c4:	b8 28 00 00 00       	mov    eax,0x28
  21b9c9:	89 c2                	mov    edx,eax
  21b9cb:	48 8d 4d a0          	lea    rcx,[rbp-0x60]
  21b9cf:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  21b9d3:	48 89 f7             	mov    rdi,rsi
  21b9d6:	48 89 ce             	mov    rsi,rcx
  21b9d9:	e8 22 8f 01 00       	call   234900 <memcpy>
  21b9de:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21b9e5:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  21b9ec:	5d                   	pop    rbp
  21b9ed:	c3                   	ret    
  21b9ee:	66 90                	xchg   ax,ax

000000000021b9f0 <parseFormValueRef.51>:
fn parseFormValueRef(allocator: *mem.Allocator, in_stream: var, comptime T: type) !FormValue {
  21b9f0:	55                   	push   rbp
  21b9f1:	48 89 e5             	mov    rbp,rsp
  21b9f4:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  21b9fb:	48 89 f8             	mov    rax,rdi
  21b9fe:	4c 8d 45 f8          	lea    r8,[rbp-0x8]
  21ba02:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  21ba06:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
    const block_len = try in_stream.readIntLe(T);
  21ba0a:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
  21ba0e:	48 89 7d 80          	mov    QWORD PTR [rbp-0x80],rdi
  21ba12:	4c 89 c7             	mov    rdi,r8
  21ba15:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
  21ba1c:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  21ba23:	e8 58 ac ff ff       	call   216680 <InStream(ReadError)_readIntLe>
  21ba28:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  21ba2d:	74 57                	je     21ba86 <parseFormValueRef.51+0x96>
  21ba2f:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  21ba33:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  21ba3a:	66 89 85 6e ff ff ff 	mov    WORD PTR [rbp-0x92],ax
  21ba41:	e8 4a 02 ff ff       	call   20bc90 <__zig_return_error>
  21ba46:	b9 28 00 00 00       	mov    ecx,0x28
  21ba4b:	89 ca                	mov    edx,ecx
  21ba4d:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  21ba51:	66 8b 85 6e ff ff ff 	mov    ax,WORD PTR [rbp-0x92]
  21ba58:	66 89 45 c8          	mov    WORD PTR [rbp-0x38],ax
  21ba5c:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  21ba60:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  21ba67:	48 89 f7             	mov    rdi,rsi
  21ba6a:	48 8b b5 60 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa0]
  21ba71:	e8 8a 8e 01 00       	call   234900 <memcpy>
  21ba76:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21ba7d:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  21ba84:	5d                   	pop    rbp
  21ba85:	c3                   	ret    
  21ba86:	48 8d 7d a0          	lea    rdi,[rbp-0x60]
  21ba8a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  21ba8d:	89 45 8c             	mov    DWORD PTR [rbp-0x74],eax
    return parseFormValueRefLen(allocator, in_stream, block_len);
  21ba90:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  21ba94:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  21ba98:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
  21ba9b:	41 89 c0             	mov    r8d,eax
  21ba9e:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
  21baa5:	e8 56 01 00 00       	call   21bc00 <parseFormValueRefLen>
  21baaa:	66 83 7d a0 00       	cmp    WORD PTR [rbp-0x60],0x0
  21baaf:	74 0e                	je     21babf <parseFormValueRef.51+0xcf>
  21bab1:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  21bab8:	e8 d3 01 ff ff       	call   20bc90 <__zig_return_error>
  21babd:	eb 02                	jmp    21bac1 <parseFormValueRef.51+0xd1>
  21babf:	eb 00                	jmp    21bac1 <parseFormValueRef.51+0xd1>
  21bac1:	b8 28 00 00 00       	mov    eax,0x28
  21bac6:	89 c2                	mov    edx,eax
  21bac8:	48 8d 4d a0          	lea    rcx,[rbp-0x60]
  21bacc:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  21bad0:	48 89 f7             	mov    rdi,rsi
  21bad3:	48 89 ce             	mov    rsi,rcx
  21bad6:	e8 25 8e 01 00       	call   234900 <memcpy>
  21badb:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21bae2:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  21bae9:	5d                   	pop    rbp
  21baea:	c3                   	ret    
  21baeb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000021baf0 <parseFormValueRef.52>:
fn parseFormValueRef(allocator: *mem.Allocator, in_stream: var, comptime T: type) !FormValue {
  21baf0:	55                   	push   rbp
  21baf1:	48 89 e5             	mov    rbp,rsp
  21baf4:	48 81 ec b0 00 00 00 	sub    rsp,0xb0
  21bafb:	48 89 f8             	mov    rax,rdi
  21bafe:	4c 8d 45 f0          	lea    r8,[rbp-0x10]
  21bb02:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
  21bb06:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
    const block_len = try in_stream.readIntLe(T);
  21bb0a:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
  21bb0e:	48 89 bd 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdi
  21bb15:	4c 89 c7             	mov    rdi,r8
  21bb18:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
  21bb1f:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  21bb26:	e8 b5 ab ff ff       	call   2166e0 <InStream(ReadError)_readIntLe.38>
  21bb2b:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  21bb30:	74 5a                	je     21bb8c <parseFormValueRef.52+0x9c>
  21bb32:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  21bb36:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  21bb3d:	66 89 85 5e ff ff ff 	mov    WORD PTR [rbp-0xa2],ax
  21bb44:	e8 47 01 ff ff       	call   20bc90 <__zig_return_error>
  21bb49:	b9 28 00 00 00       	mov    ecx,0x28
  21bb4e:	89 ca                	mov    edx,ecx
  21bb50:	48 8d 7d b8          	lea    rdi,[rbp-0x48]
  21bb54:	66 8b 85 5e ff ff ff 	mov    ax,WORD PTR [rbp-0xa2]
  21bb5b:	66 89 45 b8          	mov    WORD PTR [rbp-0x48],ax
  21bb5f:	48 8b b5 70 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x90]
  21bb66:	48 89 bd 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdi
  21bb6d:	48 89 f7             	mov    rdi,rsi
  21bb70:	48 8b b5 50 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xb0]
  21bb77:	e8 84 8d 01 00       	call   234900 <memcpy>
  21bb7c:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  21bb83:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  21bb8a:	5d                   	pop    rbp
  21bb8b:	c3                   	ret    
  21bb8c:	48 8d 7d 90          	lea    rdi,[rbp-0x70]
  21bb90:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21bb94:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
    return parseFormValueRefLen(allocator, in_stream, block_len);
  21bb9b:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
  21bb9f:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  21bba3:	4c 8b 85 78 ff ff ff 	mov    r8,QWORD PTR [rbp-0x88]
  21bbaa:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
  21bbb1:	e8 4a 00 00 00       	call   21bc00 <parseFormValueRefLen>
  21bbb6:	66 83 7d 90 00       	cmp    WORD PTR [rbp-0x70],0x0
  21bbbb:	74 0e                	je     21bbcb <parseFormValueRef.52+0xdb>
  21bbbd:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  21bbc4:	e8 c7 00 ff ff       	call   20bc90 <__zig_return_error>
  21bbc9:	eb 02                	jmp    21bbcd <parseFormValueRef.52+0xdd>
  21bbcb:	eb 00                	jmp    21bbcd <parseFormValueRef.52+0xdd>
  21bbcd:	b8 28 00 00 00       	mov    eax,0x28
  21bbd2:	89 c2                	mov    edx,eax
  21bbd4:	48 8d 4d 90          	lea    rcx,[rbp-0x70]
  21bbd8:	48 8b b5 70 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x90]
  21bbdf:	48 89 f7             	mov    rdi,rsi
  21bbe2:	48 89 ce             	mov    rsi,rcx
  21bbe5:	e8 16 8d 01 00       	call   234900 <memcpy>
  21bbea:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  21bbf1:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  21bbf8:	5d                   	pop    rbp
  21bbf9:	c3                   	ret    
  21bbfa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000021bc00 <parseFormValueRefLen>:
fn parseFormValueRefLen(allocator: *mem.Allocator, in_stream: var, size: usize) !FormValue {
  21bc00:	55                   	push   rbp
  21bc01:	48 89 e5             	mov    rbp,rsp
  21bc04:	48 81 ec 00 01 00 00 	sub    rsp,0x100
  21bc0b:	48 89 f8             	mov    rax,rdi
  21bc0e:	4c 8d 4d e8          	lea    r9,[rbp-0x18]
  21bc12:	48 89 95 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdx
  21bc19:	48 89 8d 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rcx
  21bc20:	4c 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],r8
    const buf = try readAllocBytes(allocator, in_stream, size);
  21bc27:	48 8b 95 58 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa8]
  21bc2e:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
  21bc35:	4c 8b 85 48 ff ff ff 	mov    r8,QWORD PTR [rbp-0xb8]
  21bc3c:	48 89 bd 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rdi
  21bc43:	4c 89 cf             	mov    rdi,r9
  21bc46:	48 89 b5 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rsi
  21bc4d:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  21bc54:	e8 47 f8 ff ff       	call   21b4a0 <readAllocBytes>
  21bc59:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  21bc5e:	74 5a                	je     21bcba <parseFormValueRefLen+0xba>
  21bc60:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  21bc64:	48 8b bd 20 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe0]
  21bc6b:	66 89 85 16 ff ff ff 	mov    WORD PTR [rbp-0xea],ax
  21bc72:	e8 19 00 ff ff       	call   20bc90 <__zig_return_error>
  21bc77:	b9 28 00 00 00       	mov    ecx,0x28
  21bc7c:	89 ca                	mov    edx,ecx
  21bc7e:	48 8d 7d a8          	lea    rdi,[rbp-0x58]
  21bc82:	66 8b 85 16 ff ff ff 	mov    ax,WORD PTR [rbp-0xea]
  21bc89:	66 89 45 a8          	mov    WORD PTR [rbp-0x58],ax
  21bc8d:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21bc94:	48 89 bd 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdi
  21bc9b:	48 89 f7             	mov    rdi,rsi
  21bc9e:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
  21bca5:	e8 56 8c 01 00       	call   234900 <memcpy>
  21bcaa:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  21bcb1:	48 81 c4 00 01 00 00 	add    rsp,0x100
  21bcb8:	5d                   	pop    rbp
  21bcb9:	c3                   	ret    
  21bcba:	b8 28 00 00 00       	mov    eax,0x28
  21bcbf:	89 c2                	mov    edx,eax
  21bcc1:	48 8d 8d 60 ff ff ff 	lea    rcx,[rbp-0xa0]
  21bcc8:	c5 fa 6f 45 f0       	vmovdqu xmm0,XMMWORD PTR [rbp-0x10]
  21bccd:	c5 f9 7f 85 30 ff ff 	vmovdqa XMMWORD PTR [rbp-0xd0],xmm0
  21bcd4:	ff 
    return FormValue{ .Ref = buf };
  21bcd5:	c6 45 a0 06          	mov    BYTE PTR [rbp-0x60],0x6
  21bcd9:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  21bce0:	48 89 75 88          	mov    QWORD PTR [rbp-0x78],rsi
  21bce4:	48 8b b5 38 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc8]
  21bceb:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
  21bcef:	66 c7 85 60 ff ff ff 	mov    WORD PTR [rbp-0xa0],0x0
  21bcf6:	00 00 
  21bcf8:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
  21bcfc:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
  21bd03:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  21bd07:	48 89 b5 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rsi
  21bd0e:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  21bd12:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
  21bd19:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  21bd1d:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
  21bd21:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21bd28:	48 89 f7             	mov    rdi,rsi
  21bd2b:	48 89 ce             	mov    rsi,rcx
  21bd2e:	e8 cd 8b 01 00       	call   234900 <memcpy>
  21bd33:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  21bd3a:	48 81 c4 00 01 00 00 	add    rsp,0x100
  21bd41:	5d                   	pop    rbp
  21bd42:	c3                   	ret    
  21bd43:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21bd4a:	84 00 00 00 00 00 

000000000021bd50 <readStringRaw>:
fn readStringRaw(allocator: *mem.Allocator, in_stream: var) ![]u8 {
  21bd50:	55                   	push   rbp
  21bd51:	48 89 e5             	mov    rbp,rsp
  21bd54:	48 81 ec f0 00 00 00 	sub    rsp,0xf0
  21bd5b:	48 89 f8             	mov    rax,rdi
  21bd5e:	4c 8d 45 e0          	lea    r8,[rbp-0x20]
  21bd62:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  21bd69:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
    var buf = ArrayList(u8).init(allocator);
  21bd70:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  21bd77:	48 89 bd 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rdi
  21bd7e:	4c 89 c7             	mov    rdi,r8
  21bd81:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  21bd88:	48 89 ce             	mov    rsi,rcx
  21bd8b:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
  21bd92:	e8 09 5b 00 00       	call   2218a0 <AlignedArrayList(u8,1)_init>
  21bd97:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  21bd9b:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  21bda2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21bda6:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  21bdad:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21bdb1:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
  21bdb8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21bdbc:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
    while (true) {
  21bdc3:	eb 00                	jmp    21bdc5 <readStringRaw+0x75>
  21bdc5:	48 8d 7d d8          	lea    rdi,[rbp-0x28]
        const byte = try in_stream.readByte();
  21bdc9:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  21bdd0:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21bdd7:	e8 64 7d ff ff       	call   213b40 <InStream(ReadError)_readByte>
  21bddc:	66 83 7d d8 00       	cmp    WORD PTR [rbp-0x28],0x0
  21bde1:	74 50                	je     21be33 <readStringRaw+0xe3>
  21bde3:	66 8b 45 d8          	mov    ax,WORD PTR [rbp-0x28]
  21bde7:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  21bdee:	66 89 85 1e ff ff ff 	mov    WORD PTR [rbp-0xe2],ax
  21bdf5:	e8 96 fe fe ff       	call   20bc90 <__zig_return_error>
  21bdfa:	66 8b 85 1e ff ff ff 	mov    ax,WORD PTR [rbp-0xe2]
  21be01:	66 89 45 b8          	mov    WORD PTR [rbp-0x48],ax
  21be05:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  21be09:	48 8b 8d 30 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd0]
  21be10:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21be13:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21be17:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21be1b:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  21be1f:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  21be23:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21be2a:	48 81 c4 f0 00 00 00 	add    rsp,0xf0
  21be31:	5d                   	pop    rbp
  21be32:	c3                   	ret    
  21be33:	8a 45 da             	mov    al,BYTE PTR [rbp-0x26]
  21be36:	88 85 3f ff ff ff    	mov    BYTE PTR [rbp-0xc1],al
        if (byte == 0) break;
  21be3c:	80 bd 3f ff ff ff 00 	cmp    BYTE PTR [rbp-0xc1],0x0
  21be43:	75 02                	jne    21be47 <readStringRaw+0xf7>
  21be45:	eb 7c                	jmp    21bec3 <readStringRaw+0x173>
  21be47:	eb 00                	jmp    21be49 <readStringRaw+0xf9>
  21be49:	48 8d b5 40 ff ff ff 	lea    rsi,[rbp-0xc0]
        try buf.append(byte);
  21be50:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  21be57:	0f b6 95 3f ff ff ff 	movzx  edx,BYTE PTR [rbp-0xc1]
  21be5e:	e8 9d 5a 00 00       	call   221900 <AlignedArrayList(u8,1)_append>
  21be63:	66 89 45 b6          	mov    WORD PTR [rbp-0x4a],ax
  21be67:	66 83 7d b6 00       	cmp    WORD PTR [rbp-0x4a],0x0
  21be6c:	74 50                	je     21bebe <readStringRaw+0x16e>
  21be6e:	66 8b 45 b6          	mov    ax,WORD PTR [rbp-0x4a]
  21be72:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  21be79:	66 89 85 1c ff ff ff 	mov    WORD PTR [rbp-0xe4],ax
  21be80:	e8 0b fe fe ff       	call   20bc90 <__zig_return_error>
  21be85:	66 8b 85 1c ff ff ff 	mov    ax,WORD PTR [rbp-0xe4]
  21be8c:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  21be90:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  21be94:	48 8b 8d 30 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd0]
  21be9b:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21be9e:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  21bea2:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21bea6:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  21beaa:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  21beae:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21beb5:	48 81 c4 f0 00 00 00 	add    rsp,0xf0
  21bebc:	5d                   	pop    rbp
  21bebd:	c3                   	ret    
    while (true) {
  21bebe:	e9 00 ff ff ff       	jmp    21bdc3 <readStringRaw+0x73>
  21bec3:	48 8d 7d 88          	lea    rdi,[rbp-0x78]
  21bec7:	48 8d b5 40 ff ff ff 	lea    rsi,[rbp-0xc0]
    return buf.toSlice();
  21bece:	e8 9d 5a 00 00       	call   221970 <AlignedArrayList(u8,1)_toSlice>
  21bed3:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  21beda:	00 00 
  21bedc:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
  21bee0:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
  21bee7:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  21beeb:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
  21beef:	48 8b b5 70 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x90]
  21bef6:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
  21befd:	48 89 37             	mov    QWORD PTR [rdi],rsi
  21bf00:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
  21bf07:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  21bf0b:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  21bf0f:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  21bf13:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21bf1a:	48 81 c4 f0 00 00 00 	add    rsp,0xf0
  21bf21:	5d                   	pop    rbp
  21bf22:	c3                   	ret    
  21bf23:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21bf2a:	84 00 00 00 00 00 

000000000021bf30 <Allocator_alloc.53>:
    pub fn alloc(self: *Allocator, comptime T: type, n: usize) ![]T {
  21bf30:	55                   	push   rbp
  21bf31:	48 89 e5             	mov    rbp,rsp
  21bf34:	48 83 ec 40          	sub    rsp,0x40
  21bf38:	48 89 f8             	mov    rax,rdi
  21bf3b:	4c 8d 45 e8          	lea    r8,[rbp-0x18]
  21bf3f:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  21bf43:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
        return self.alignedAlloc(T, @alignOf(T), n);
  21bf47:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  21bf4b:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  21bf4f:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
  21bf53:	4c 89 c7             	mov    rdi,r8
  21bf56:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  21bf5a:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  21bf5e:	e8 3d be 00 00       	call   227da0 <Allocator_alignedAlloc.103>
  21bf63:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  21bf68:	74 0b                	je     21bf75 <Allocator_alloc.53+0x45>
  21bf6a:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  21bf6e:	e8 1d fd fe ff       	call   20bc90 <__zig_return_error>
  21bf73:	eb 02                	jmp    21bf77 <Allocator_alloc.53+0x47>
  21bf75:	eb 00                	jmp    21bf77 <Allocator_alloc.53+0x47>
  21bf77:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21bf7b:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  21bf7f:	48 89 01             	mov    QWORD PTR [rcx],rax
  21bf82:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21bf86:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21bf8a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21bf8e:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21bf92:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  21bf96:	48 83 c4 40          	add    rsp,0x40
  21bf9a:	5d                   	pop    rbp
  21bf9b:	c3                   	ret    
  21bf9c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000021bfa0 <AlignedArrayList(Attr,8)_toSliceConst>:
        pub fn toSliceConst(self: Self) []align(A) const T {
  21bfa0:	55                   	push   rbp
  21bfa1:	48 89 e5             	mov    rbp,rsp
  21bfa4:	48 83 ec 40          	sub    rsp,0x40
  21bfa8:	48 89 f8             	mov    rax,rdi
  21bfab:	31 c9                	xor    ecx,ecx
  21bfad:	89 ca                	mov    edx,ecx
            return self.items[0..self.len];
  21bfaf:	4c 8b 46 10          	mov    r8,QWORD PTR [rsi+0x10]
  21bfb3:	4c 8b 4e 08          	mov    r9,QWORD PTR [rsi+0x8]
  21bfb7:	4c 39 c2             	cmp    rdx,r8
  21bfba:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  21bfbe:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  21bfc2:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  21bfc6:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
  21bfca:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
  21bfce:	76 10                	jbe    21bfe0 <AlignedArrayList(Attr,8)_toSliceConst+0x40>
  21bfd0:	48 8d 3d 21 74 02 00 	lea    rdi,[rip+0x27421]        # 2433f8 <__unnamed_20>
  21bfd7:	31 c0                	xor    eax,eax
  21bfd9:	89 c6                	mov    esi,eax
  21bfdb:	e8 20 f6 fe ff       	call   20b600 <panic>
  21bfe0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21bfe4:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  21bfe8:	48 39 c8             	cmp    rax,rcx
  21bfeb:	76 10                	jbe    21bffd <AlignedArrayList(Attr,8)_toSliceConst+0x5d>
  21bfed:	48 8d 3d 04 74 02 00 	lea    rdi,[rip+0x27404]        # 2433f8 <__unnamed_20>
  21bff4:	31 c0                	xor    eax,eax
  21bff6:	89 c6                	mov    esi,eax
  21bff8:	e8 03 f6 fe ff       	call   20b600 <panic>
  21bffd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  21c001:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  21c004:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  21c008:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  21c00c:	48 83 e9 00          	sub    rcx,0x0
  21c010:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  21c014:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  21c018:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  21c01c:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  21c01f:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  21c023:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  21c027:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21c02b:	48 83 c4 40          	add    rsp,0x40
  21c02f:	5d                   	pop    rbp
  21c030:	c3                   	ret    
  21c031:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21c038:	0f 1f 84 00 00 00 00 
  21c03f:	00 

000000000021c040 <AlignedArrayList(CompileUnit,2)_addOne>:
        pub fn addOne(self: *Self) !*T {
  21c040:	55                   	push   rbp
  21c041:	48 89 e5             	mov    rbp,rsp
  21c044:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  21c04b:	48 89 f8             	mov    rax,rdi
  21c04e:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            const new_length = self.len + 1;
  21c052:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  21c056:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  21c05a:	48 83 c2 01          	add    rdx,0x1
  21c05e:	0f 92 c1             	setb   cl
  21c061:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  21c065:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  21c069:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  21c06d:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  21c071:	88 4d 9f             	mov    BYTE PTR [rbp-0x61],cl
  21c074:	72 57                	jb     21c0cd <AlignedArrayList(CompileUnit,2)_addOne+0x8d>
  21c076:	eb 65                	jmp    21c0dd <AlignedArrayList(CompileUnit,2)_addOne+0x9d>
            try self.ensureCapacity(new_length);
  21c078:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  21c07c:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  21c080:	66 89 45 9c          	mov    WORD PTR [rbp-0x64],ax
  21c084:	e8 07 fc fe ff       	call   20bc90 <__zig_return_error>
  21c089:	66 8b 45 9c          	mov    ax,WORD PTR [rbp-0x64]
  21c08d:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  21c091:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  21c095:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  21c099:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21c09c:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  21c0a0:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21c0a4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21c0a8:	48 81 c4 80 00 00 00 	add    rsp,0x80
  21c0af:	5d                   	pop    rbp
  21c0b0:	c3                   	ret    
            const result = &self.items[self.len];
  21c0b1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  21c0b5:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  21c0b9:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
  21c0bd:	48 3b 48 08          	cmp    rcx,QWORD PTR [rax+0x8]
  21c0c1:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  21c0c5:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
  21c0c9:	72 4c                	jb     21c117 <AlignedArrayList(CompileUnit,2)_addOne+0xd7>
  21c0cb:	eb 3a                	jmp    21c107 <AlignedArrayList(CompileUnit,2)_addOne+0xc7>
  21c0cd:	48 8d 3d f4 70 02 00 	lea    rdi,[rip+0x270f4]        # 2431c8 <__unnamed_4>
  21c0d4:	31 c0                	xor    eax,eax
  21c0d6:	89 c6                	mov    esi,eax
            const new_length = self.len + 1;
  21c0d8:	e8 23 f5 fe ff       	call   20b600 <panic>
  21c0dd:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  21c0e1:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
            try self.ensureCapacity(new_length);
  21c0e5:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  21c0e9:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  21c0ed:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  21c0f1:	e8 7a 00 00 00       	call   21c170 <AlignedArrayList(CompileUnit,2)_ensureCapacity>
  21c0f6:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  21c0fa:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  21c0ff:	0f 85 73 ff ff ff    	jne    21c078 <AlignedArrayList(CompileUnit,2)_addOne+0x38>
  21c105:	eb aa                	jmp    21c0b1 <AlignedArrayList(CompileUnit,2)_addOne+0x71>
  21c107:	48 8d 3d ea 72 02 00 	lea    rdi,[rip+0x272ea]        # 2433f8 <__unnamed_20>
  21c10e:	31 c0                	xor    eax,eax
  21c110:	89 c6                	mov    esi,eax
            const result = &self.items[self.len];
  21c112:	e8 e9 f4 fe ff       	call   20b600 <panic>
  21c117:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  21c11b:	48 6b c8 30          	imul   rcx,rax,0x30
  21c11f:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
  21c123:	48 03 0a             	add    rcx,QWORD PTR [rdx]
  21c126:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
            self.len = new_length;
  21c12a:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  21c12e:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  21c132:	48 89 71 10          	mov    QWORD PTR [rcx+0x10],rsi
            return result;
  21c136:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  21c13a:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  21c140:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  21c144:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  21c148:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  21c14c:	48 89 0e             	mov    QWORD PTR [rsi],rcx
  21c14f:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  21c153:	48 89 4e 08          	mov    QWORD PTR [rsi+0x8],rcx
  21c157:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21c15b:	48 81 c4 80 00 00 00 	add    rsp,0x80
  21c162:	5d                   	pop    rbp
  21c163:	c3                   	ret    
  21c164:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21c16b:	00 00 00 00 00 

000000000021c170 <AlignedArrayList(CompileUnit,2)_ensureCapacity>:
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  21c170:	55                   	push   rbp
  21c171:	48 89 e5             	mov    rbp,rsp
  21c174:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  21c17b:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  21c17f:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
            var better_capacity = self.items.len;
  21c183:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  21c187:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  21c18b:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
            if (better_capacity >= new_capacity) return;
  21c18f:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  21c193:	48 3b 55 c0          	cmp    rdx,QWORD PTR [rbp-0x40]
  21c197:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  21c19b:	72 11                	jb     21c1ae <AlignedArrayList(CompileUnit,2)_ensureCapacity+0x3e>
  21c19d:	31 c0                	xor    eax,eax
  21c19f:	66 89 c1             	mov    cx,ax
  21c1a2:	66 89 c8             	mov    ax,cx
  21c1a5:	48 81 c4 90 00 00 00 	add    rsp,0x90
  21c1ac:	5d                   	pop    rbp
  21c1ad:	c3                   	ret    
            while (true) {
  21c1ae:	eb 00                	jmp    21c1b0 <AlignedArrayList(CompileUnit,2)_ensureCapacity+0x40>
  21c1b0:	eb 00                	jmp    21c1b2 <AlignedArrayList(CompileUnit,2)_ensureCapacity+0x42>
  21c1b2:	31 c0                	xor    eax,eax
  21c1b4:	88 c1                	mov    cl,al
                better_capacity += better_capacity / 2 + 8;
  21c1b6:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  21c1ba:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  21c1be:	f6 c1 01             	test   cl,0x1
  21c1c1:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  21c1c5:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  21c1c9:	0f 85 8e 00 00 00    	jne    21c25d <AlignedArrayList(CompileUnit,2)_ensureCapacity+0xed>
  21c1cf:	eb 72                	jmp    21c243 <AlignedArrayList(CompileUnit,2)_ensureCapacity+0xd3>
                if (better_capacity >= new_capacity) break;
  21c1d1:	eb 02                	jmp    21c1d5 <AlignedArrayList(CompileUnit,2)_ensureCapacity+0x65>
            while (true) {
  21c1d3:	eb db                	jmp    21c1b0 <AlignedArrayList(CompileUnit,2)_ensureCapacity+0x40>
  21c1d5:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
            self.items = try self.allocator.alignedRealloc(T, A, self.items, better_capacity);
  21c1d9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21c1dd:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  21c1e1:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
  21c1e5:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  21c1e9:	4c 8b 45 b8          	mov    r8,QWORD PTR [rbp-0x48]
  21c1ed:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  21c1f1:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  21c1f5:	e8 d6 00 00 00       	call   21c2d0 <Allocator_alignedRealloc.54>
  21c1fa:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  21c1ff:	74 1e                	je     21c21f <AlignedArrayList(CompileUnit,2)_ensureCapacity+0xaf>
  21c201:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  21c205:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  21c209:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  21c20d:	e8 7e fa fe ff       	call   20bc90 <__zig_return_error>
  21c212:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  21c216:	48 81 c4 90 00 00 00 	add    rsp,0x90
  21c21d:	5d                   	pop    rbp
  21c21e:	c3                   	ret    
  21c21f:	31 c0                	xor    eax,eax
  21c221:	66 89 c1             	mov    cx,ax
  21c224:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21c228:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  21c22c:	48 89 16             	mov    QWORD PTR [rsi],rdx
  21c22f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  21c233:	48 89 56 08          	mov    QWORD PTR [rsi+0x8],rdx
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  21c237:	66 89 c8             	mov    ax,cx
  21c23a:	48 81 c4 90 00 00 00 	add    rsp,0x90
  21c241:	5d                   	pop    rbp
  21c242:	c3                   	ret    
                better_capacity += better_capacity / 2 + 8;
  21c243:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  21c247:	48 c1 e8 01          	shr    rax,0x1
  21c24b:	48 83 c0 08          	add    rax,0x8
  21c24f:	0f 92 c1             	setb   cl
  21c252:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  21c256:	88 4d 87             	mov    BYTE PTR [rbp-0x79],cl
  21c259:	72 12                	jb     21c26d <AlignedArrayList(CompileUnit,2)_ensureCapacity+0xfd>
  21c25b:	eb 20                	jmp    21c27d <AlignedArrayList(CompileUnit,2)_ensureCapacity+0x10d>
  21c25d:	48 8d 3d dc 6f 02 00 	lea    rdi,[rip+0x26fdc]        # 243240 <__unnamed_7>
  21c264:	31 c0                	xor    eax,eax
  21c266:	89 c6                	mov    esi,eax
  21c268:	e8 93 f3 fe ff       	call   20b600 <panic>
  21c26d:	48 8d 3d 54 6f 02 00 	lea    rdi,[rip+0x26f54]        # 2431c8 <__unnamed_4>
  21c274:	31 c0                	xor    eax,eax
  21c276:	89 c6                	mov    esi,eax
  21c278:	e8 83 f3 fe ff       	call   20b600 <panic>
  21c27d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  21c281:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  21c285:	48 01 c8             	add    rax,rcx
  21c288:	0f 92 c2             	setb   dl
  21c28b:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  21c292:	88 95 77 ff ff ff    	mov    BYTE PTR [rbp-0x89],dl
  21c298:	72 02                	jb     21c29c <AlignedArrayList(CompileUnit,2)_ensureCapacity+0x12c>
  21c29a:	eb 10                	jmp    21c2ac <AlignedArrayList(CompileUnit,2)_ensureCapacity+0x13c>
  21c29c:	48 8d 3d 25 6f 02 00 	lea    rdi,[rip+0x26f25]        # 2431c8 <__unnamed_4>
  21c2a3:	31 c0                	xor    eax,eax
  21c2a5:	89 c6                	mov    esi,eax
  21c2a7:	e8 54 f3 fe ff       	call   20b600 <panic>
  21c2ac:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  21c2b3:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                if (better_capacity >= new_capacity) break;
  21c2b7:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  21c2bb:	48 3b 4d c0          	cmp    rcx,QWORD PTR [rbp-0x40]
  21c2bf:	0f 83 0c ff ff ff    	jae    21c1d1 <AlignedArrayList(CompileUnit,2)_ensureCapacity+0x61>
  21c2c5:	e9 09 ff ff ff       	jmp    21c1d3 <AlignedArrayList(CompileUnit,2)_ensureCapacity+0x63>
  21c2ca:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000021c2d0 <Allocator_alignedRealloc.54>:
    pub fn alignedRealloc(self: *Allocator, comptime T: type, comptime alignment: u29, old_mem: []align(alignment) T, n: usize) ![]align(alignment) T {
  21c2d0:	55                   	push   rbp
  21c2d1:	48 89 e5             	mov    rbp,rsp
  21c2d4:	53                   	push   rbx
  21c2d5:	48 81 ec 88 01 00 00 	sub    rsp,0x188
  21c2dc:	48 89 f8             	mov    rax,rdi
  21c2df:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
  21c2e6:	4c 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],r8
        if (old_mem.len == 0) {
  21c2ed:	48 83 79 08 00       	cmp    QWORD PTR [rcx+0x8],0x0
  21c2f2:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  21c2f9:	48 89 b5 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rsi
  21c300:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
  21c307:	48 89 bd b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rdi
  21c30e:	75 64                	jne    21c374 <Allocator_alignedRealloc.54+0xa4>
  21c310:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
            return self.alignedAlloc(T, alignment, n);
  21c314:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  21c31b:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  21c322:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  21c329:	e8 22 04 00 00       	call   21c750 <Allocator_alignedAlloc.55>
  21c32e:	66 83 7d e0 00       	cmp    WORD PTR [rbp-0x20],0x0
  21c333:	74 0e                	je     21c343 <Allocator_alignedRealloc.54+0x73>
  21c335:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  21c33c:	e8 4f f9 fe ff       	call   20bc90 <__zig_return_error>
  21c341:	eb 02                	jmp    21c345 <Allocator_alignedRealloc.54+0x75>
  21c343:	eb 00                	jmp    21c345 <Allocator_alignedRealloc.54+0x75>
  21c345:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  21c349:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  21c350:	48 89 01             	mov    QWORD PTR [rcx],rax
  21c353:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21c357:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21c35b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21c35f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21c363:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21c36a:	48 81 c4 88 01 00 00 	add    rsp,0x188
  21c371:	5b                   	pop    rbx
  21c372:	5d                   	pop    rbp
  21c373:	c3                   	ret    
        if (old_mem.len == 0) {
  21c374:	eb 00                	jmp    21c376 <Allocator_alignedRealloc.54+0xa6>
        if (n == 0) {
  21c376:	48 83 bd 10 ff ff ff 	cmp    QWORD PTR [rbp-0xf0],0x0
  21c37d:	00 
  21c37e:	75 4b                	jne    21c3cb <Allocator_alignedRealloc.54+0xfb>
            self.free(old_mem);
  21c380:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
  21c387:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  21c38e:	e8 dd 06 00 00       	call   21ca70 <Allocator_free.56>
            return ([*]align(alignment) T)(undefined)[0..0];
  21c393:	48 8b 35 fe cc fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffeccfe]        # 209098 <__unnamed_108>
  21c39a:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  21c3a1:	48 89 37             	mov    QWORD PTR [rdi],rsi
  21c3a4:	48 8b 35 f5 cc fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffeccf5]        # 2090a0 <__unnamed_108+0x8>
  21c3ab:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  21c3af:	48 8b 35 f2 cc fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffeccf2]        # 2090a8 <__unnamed_108+0x10>
  21c3b6:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  21c3ba:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21c3c1:	48 81 c4 88 01 00 00 	add    rsp,0x188
  21c3c8:	5b                   	pop    rbx
  21c3c9:	5d                   	pop    rbp
  21c3ca:	c3                   	ret    
        if (n == 0) {
  21c3cb:	eb 00                	jmp    21c3cd <Allocator_alignedRealloc.54+0xfd>
  21c3cd:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  21c3d1:	b8 30 00 00 00       	mov    eax,0x30
  21c3d6:	89 c2                	mov    edx,eax
        const old_byte_slice = @sliceToBytes(old_mem);
  21c3d8:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  21c3df:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  21c3e2:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  21c3e6:	48 6b 71 08 30       	imul   rsi,QWORD PTR [rcx+0x8],0x30
  21c3eb:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  21c3ef:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  21c3f3:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
  21c3fa:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  21c3fe:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  21c405:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  21c40c:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  21c413:	e8 f8 8f ff ff       	call   215410 <mul>
  21c418:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  21c41d:	74 44                	je     21c463 <Allocator_alignedRealloc.54+0x193>
  21c41f:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  21c426:	e8 65 f8 fe ff       	call   20bc90 <__zig_return_error>
  21c42b:	48 8b 3d 7e cc fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffecc7e]        # 2090b0 <__unnamed_109>
  21c432:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  21c439:	48 89 38             	mov    QWORD PTR [rax],rdi
  21c43c:	48 8b 3d 75 cc fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffecc75]        # 2090b8 <__unnamed_109+0x8>
  21c443:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  21c447:	48 8b 3d 72 cc fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffecc72]        # 2090c0 <__unnamed_109+0x10>
  21c44e:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  21c452:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21c459:	48 81 c4 88 01 00 00 	add    rsp,0x188
  21c460:	5b                   	pop    rbx
  21c461:	5d                   	pop    rbp
  21c462:	c3                   	ret    
  21c463:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21c467:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  21c46e:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  21c472:	48 8d 8d 00 ff ff ff 	lea    rcx,[rbp-0x100]
  21c479:	41 b9 02 00 00 00    	mov    r9d,0x2
  21c47f:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  21c486:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
        const byte_slice = try self.reallocFn(self, old_byte_slice, byte_count, alignment);
  21c48d:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  21c494:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  21c498:	48 8b b5 18 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe8]
  21c49f:	4c 8b 85 f8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x108]
  21c4a6:	4c 8b 95 c8 fe ff ff 	mov    r10,QWORD PTR [rbp-0x138]
  21c4ad:	48 89 b5 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rsi
  21c4b4:	4c 89 d6             	mov    rsi,r10
  21c4b7:	4c 8b 9d a8 fe ff ff 	mov    r11,QWORD PTR [rbp-0x158]
  21c4be:	48 89 95 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdx
  21c4c5:	4c 89 da             	mov    rdx,r11
  21c4c8:	48 8b 9d a0 fe ff ff 	mov    rbx,QWORD PTR [rbp-0x160]
  21c4cf:	ff d3                	call   rbx
  21c4d1:	66 83 7d 98 00       	cmp    WORD PTR [rbp-0x68],0x0
  21c4d6:	74 5d                	je     21c535 <Allocator_alignedRealloc.54+0x265>
  21c4d8:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  21c4dc:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  21c4e3:	66 89 85 9e fe ff ff 	mov    WORD PTR [rbp-0x162],ax
  21c4ea:	e8 a1 f7 fe ff       	call   20bc90 <__zig_return_error>
  21c4ef:	66 8b 85 9e fe ff ff 	mov    ax,WORD PTR [rbp-0x162]
  21c4f6:	66 89 85 68 ff ff ff 	mov    WORD PTR [rbp-0x98],ax
  21c4fd:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  21c504:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  21c50b:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21c50e:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  21c515:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21c519:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  21c520:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  21c524:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21c52b:	48 81 c4 88 01 00 00 	add    rsp,0x188
  21c532:	5b                   	pop    rbx
  21c533:	5d                   	pop    rbp
  21c534:	c3                   	ret    
  21c535:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  21c539:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  21c540:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  21c544:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
        assert(byte_slice.len == byte_count);
  21c54b:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  21c552:	48 3b 85 f8 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x108]
  21c559:	0f 94 c1             	sete   cl
  21c55c:	0f b6 f9             	movzx  edi,cl
  21c55f:	e8 9c ea fe ff       	call   20b000 <assert>
        if (n > old_mem.len) {
  21c564:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  21c56b:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  21c572:	48 3b 42 08          	cmp    rax,QWORD PTR [rdx+0x8]
  21c576:	76 71                	jbe    21c5e9 <Allocator_alignedRealloc.54+0x319>
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  21c578:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  21c57f:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21c586:	48 39 c8             	cmp    rax,rcx
  21c589:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  21c590:	48 89 8d 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rcx
  21c597:	76 78                	jbe    21c611 <Allocator_alignedRealloc.54+0x341>
  21c599:	eb 66                	jmp    21c601 <Allocator_alignedRealloc.54+0x331>
  21c59b:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  21c5a2:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
  21c5a9:	48 39 c8             	cmp    rax,rcx
  21c5ac:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  21c5b3:	73 32                	jae    21c5e7 <Allocator_alignedRealloc.54+0x317>
  21c5b5:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  21c5bc:	48 03 8d 58 ff ff ff 	add    rcx,QWORD PTR [rbp-0xa8]
  21c5c3:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
                byte.* = undefined;
  21c5ca:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  21c5d1:	88 01                	mov    BYTE PTR [rcx],al
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  21c5d3:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  21c5da:	48 83 c1 01          	add    rcx,0x1
  21c5de:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
  21c5e5:	eb b4                	jmp    21c59b <Allocator_alignedRealloc.54+0x2cb>
        if (n > old_mem.len) {
  21c5e7:	eb 02                	jmp    21c5eb <Allocator_alignedRealloc.54+0x31b>
  21c5e9:	eb 00                	jmp    21c5eb <Allocator_alignedRealloc.54+0x31b>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  21c5eb:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  21c5f2:	48 83 e0 01          	and    rax,0x1
  21c5f6:	48 83 f8 00          	cmp    rax,0x0
  21c5fa:	74 7b                	je     21c677 <Allocator_alignedRealloc.54+0x3a7>
  21c5fc:	e9 ae 00 00 00       	jmp    21c6af <Allocator_alignedRealloc.54+0x3df>
  21c601:	48 8d 3d f0 6d 02 00 	lea    rdi,[rip+0x26df0]        # 2433f8 <__unnamed_20>
  21c608:	31 c0                	xor    eax,eax
  21c60a:	89 c6                	mov    esi,eax
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  21c60c:	e8 ef ef fe ff       	call   20b600 <panic>
  21c611:	be aa 00 00 00       	mov    esi,0xaa
  21c616:	b8 08 00 00 00       	mov    eax,0x8
  21c61b:	89 c2                	mov    edx,eax
  21c61d:	48 8d 8d e0 fe ff ff 	lea    rcx,[rbp-0x120]
  21c624:	48 8b bd 90 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x170]
  21c62b:	48 03 bd e8 fe ff ff 	add    rdi,QWORD PTR [rbp-0x118]
  21c632:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
  21c639:	48 8b bd 88 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x178]
  21c640:	4c 8b 85 90 fe ff ff 	mov    r8,QWORD PTR [rbp-0x170]
  21c647:	4c 29 c7             	sub    rdi,r8
  21c64a:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  21c651:	48 89 cf             	mov    rdi,rcx
  21c654:	e8 57 82 01 00       	call   2348b0 <memset>
  21c659:	48 c7 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],0x0
  21c660:	00 00 00 00 
  21c664:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  21c66b:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  21c672:	e9 24 ff ff ff       	jmp    21c59b <Allocator_alignedRealloc.54+0x2cb>
  21c677:	b8 30 00 00 00       	mov    eax,0x30
  21c67c:	89 c1                	mov    ecx,eax
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  21c67e:	48 8b 95 e8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x118]
  21c685:	48 89 95 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdx
  21c68c:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  21c693:	48 89 d0             	mov    rax,rdx
  21c696:	31 f6                	xor    esi,esi
  21c698:	48 89 95 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rdx
  21c69f:	89 f2                	mov    edx,esi
  21c6a1:	48 f7 f1             	div    rcx
  21c6a4:	48 83 fa 00          	cmp    rdx,0x0
  21c6a8:	74 15                	je     21c6bf <Allocator_alignedRealloc.54+0x3ef>
  21c6aa:	e9 87 00 00 00       	jmp    21c736 <Allocator_alignedRealloc.54+0x466>
  21c6af:	48 8d 3d 1a 6f 02 00 	lea    rdi,[rip+0x26f1a]        # 2435d0 <__unnamed_75>
  21c6b6:	31 c0                	xor    eax,eax
  21c6b8:	89 c6                	mov    esi,eax
  21c6ba:	e8 41 ef fe ff       	call   20b600 <panic>
  21c6bf:	b8 30 00 00 00       	mov    eax,0x30
  21c6c4:	89 c1                	mov    ecx,eax
  21c6c6:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  21c6cd:	31 d2                	xor    edx,edx
  21c6cf:	48 f7 f1             	div    rcx
  21c6d2:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  21c6d9:	66 c7 85 20 ff ff ff 	mov    WORD PTR [rbp-0xe0],0x0
  21c6e0:	00 00 
  21c6e2:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  21c6e9:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  21c6f0:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  21c6f7:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  21c6fe:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21c705:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  21c70c:	48 89 01             	mov    QWORD PTR [rcx],rax
  21c70f:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  21c716:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21c71a:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21c721:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21c725:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21c72c:	48 81 c4 88 01 00 00 	add    rsp,0x188
  21c733:	5b                   	pop    rbx
  21c734:	5d                   	pop    rbp
  21c735:	c3                   	ret    
  21c736:	48 8d 3d ab 6e 02 00 	lea    rdi,[rip+0x26eab]        # 2435e8 <__unnamed_76>
  21c73d:	31 c0                	xor    eax,eax
  21c73f:	89 c6                	mov    esi,eax
  21c741:	e8 ba ee fe ff       	call   20b600 <panic>
  21c746:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  21c74d:	00 00 00 

000000000021c750 <Allocator_alignedAlloc.55>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  21c750:	55                   	push   rbp
  21c751:	48 89 e5             	mov    rbp,rsp
  21c754:	48 81 ec 20 01 00 00 	sub    rsp,0x120
  21c75b:	48 89 f8             	mov    rax,rdi
  21c75e:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  21c765:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  21c76c:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  21c773:	00 
  21c774:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  21c77b:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  21c782:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  21c789:	75 37                	jne    21c7c2 <Allocator_alignedAlloc.55+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  21c78b:	48 8b 05 36 c9 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffec936]        # 2090c8 <__unnamed_110>
  21c792:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21c799:	48 89 01             	mov    QWORD PTR [rcx],rax
  21c79c:	48 8b 05 2d c9 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffec92d]        # 2090d0 <__unnamed_110+0x8>
  21c7a3:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21c7a7:	48 8b 05 2a c9 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffec92a]        # 2090d8 <__unnamed_110+0x10>
  21c7ae:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21c7b2:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21c7b9:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21c7c0:	5d                   	pop    rbp
  21c7c1:	c3                   	ret    
        if (n == 0) {
  21c7c2:	eb 00                	jmp    21c7c4 <Allocator_alignedAlloc.55+0x74>
  21c7c4:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  21c7c8:	b8 30 00 00 00       	mov    eax,0x30
  21c7cd:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  21c7cf:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  21c7d6:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21c7dd:	e8 2e 8c ff ff       	call   215410 <mul>
  21c7e2:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  21c7e7:	74 43                	je     21c82c <Allocator_alignedAlloc.55+0xdc>
  21c7e9:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  21c7f0:	e8 9b f4 fe ff       	call   20bc90 <__zig_return_error>
  21c7f5:	48 8b 3d e4 c8 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffec8e4]        # 2090e0 <__unnamed_111>
  21c7fc:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21c803:	48 89 38             	mov    QWORD PTR [rax],rdi
  21c806:	48 8b 3d db c8 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffec8db]        # 2090e8 <__unnamed_111+0x8>
  21c80d:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  21c811:	48 8b 3d d8 c8 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffec8d8]        # 2090f0 <__unnamed_111+0x10>
  21c818:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  21c81c:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21c823:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21c82a:	5d                   	pop    rbp
  21c82b:	c3                   	ret    
  21c82c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21c830:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  21c837:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  21c83b:	41 b8 02 00 00 00    	mov    r8d,0x2
  21c841:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  21c848:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  21c84f:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  21c856:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  21c859:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  21c860:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  21c867:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  21c86e:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  21c875:	4c 89 ce             	mov    rsi,r9
  21c878:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  21c87f:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  21c886:	4c 89 d1             	mov    rcx,r10
  21c889:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  21c890:	41 ff d3             	call   r11
  21c893:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  21c898:	74 50                	je     21c8ea <Allocator_alignedAlloc.55+0x19a>
  21c89a:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  21c89e:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  21c8a5:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  21c8ac:	e8 df f3 fe ff       	call   20bc90 <__zig_return_error>
  21c8b1:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  21c8b8:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  21c8bc:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  21c8c0:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21c8c7:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21c8ca:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  21c8ce:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21c8d2:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  21c8d6:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  21c8da:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21c8e1:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21c8e8:	5d                   	pop    rbp
  21c8e9:	c3                   	ret    
  21c8ea:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  21c8ee:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  21c8f5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21c8f9:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  21c900:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  21c907:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  21c90e:	0f 94 c1             	sete   cl
  21c911:	0f b6 f9             	movzx  edi,cl
  21c914:	e8 e7 e6 fe ff       	call   20b000 <assert>
  21c919:	be aa 00 00 00       	mov    esi,0xaa
  21c91e:	bf 08 00 00 00       	mov    edi,0x8
  21c923:	89 fa                	mov    edx,edi
  21c925:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  21c92c:	48 89 c7             	mov    rdi,rax
  21c92f:	e8 7c 7f 01 00       	call   2348b0 <memset>
  21c934:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  21c93b:	00 00 00 00 
  21c93f:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  21c946:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  21c94d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  21c954:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  21c95b:	48 39 c8             	cmp    rax,rcx
  21c95e:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  21c965:	73 32                	jae    21c999 <Allocator_alignedAlloc.55+0x249>
  21c967:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21c96e:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  21c975:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  21c97c:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  21c983:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  21c985:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21c98c:	48 83 c1 01          	add    rcx,0x1
  21c990:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  21c997:	eb b4                	jmp    21c94d <Allocator_alignedAlloc.55+0x1fd>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  21c999:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  21c9a0:	48 83 e0 01          	and    rax,0x1
  21c9a4:	48 83 f8 00          	cmp    rax,0x0
  21c9a8:	75 32                	jne    21c9dc <Allocator_alignedAlloc.55+0x28c>
  21c9aa:	b8 30 00 00 00       	mov    eax,0x30
  21c9af:	89 c1                	mov    ecx,eax
  21c9b1:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
  21c9b8:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
  21c9bc:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
  21c9c3:	48 89 d0             	mov    rax,rdx
  21c9c6:	31 f6                	xor    esi,esi
  21c9c8:	48 89 95 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdx
  21c9cf:	89 f2                	mov    edx,esi
  21c9d1:	48 f7 f1             	div    rcx
  21c9d4:	48 83 fa 00          	cmp    rdx,0x0
  21c9d8:	74 12                	je     21c9ec <Allocator_alignedAlloc.55+0x29c>
  21c9da:	eb 77                	jmp    21ca53 <Allocator_alignedAlloc.55+0x303>
  21c9dc:	48 8d 3d ed 6b 02 00 	lea    rdi,[rip+0x26bed]        # 2435d0 <__unnamed_75>
  21c9e3:	31 c0                	xor    eax,eax
  21c9e5:	89 c6                	mov    esi,eax
  21c9e7:	e8 14 ec fe ff       	call   20b600 <panic>
  21c9ec:	b8 30 00 00 00       	mov    eax,0x30
  21c9f1:	89 c1                	mov    ecx,eax
  21c9f3:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  21c9fa:	31 d2                	xor    edx,edx
  21c9fc:	48 f7 f1             	div    rcx
  21c9ff:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  21ca03:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  21ca0a:	00 00 
  21ca0c:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  21ca10:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  21ca17:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  21ca1b:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  21ca1f:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21ca26:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21ca2d:	48 89 01             	mov    QWORD PTR [rcx],rax
  21ca30:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  21ca37:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21ca3b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  21ca3f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21ca43:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21ca4a:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21ca51:	5d                   	pop    rbp
  21ca52:	c3                   	ret    
  21ca53:	48 8d 3d 8e 6b 02 00 	lea    rdi,[rip+0x26b8e]        # 2435e8 <__unnamed_76>
  21ca5a:	31 c0                	xor    eax,eax
  21ca5c:	89 c6                	mov    esi,eax
  21ca5e:	e8 9d eb fe ff       	call   20b600 <panic>
  21ca63:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21ca6a:	84 00 00 00 00 00 

000000000021ca70 <Allocator_free.56>:
    pub fn free(self: *Allocator, memory: var) void {
  21ca70:	55                   	push   rbp
  21ca71:	48 89 e5             	mov    rbp,rsp
  21ca74:	48 83 ec 60          	sub    rsp,0x60
  21ca78:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
        const bytes = @sliceToBytes(memory);
  21ca7c:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  21ca7f:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  21ca83:	48 6b 76 08 30       	imul   rsi,QWORD PTR [rsi+0x8],0x30
  21ca88:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21ca8c:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  21ca90:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  21ca94:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21ca98:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        if (bytes.len == 0) return;
  21ca9c:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
  21caa1:	75 06                	jne    21caa9 <Allocator_free.56+0x39>
  21caa3:	48 83 c4 60          	add    rsp,0x60
  21caa7:	5d                   	pop    rbp
  21caa8:	c3                   	ret    
  21caa9:	31 c0                	xor    eax,eax
  21caab:	89 c1                	mov    ecx,eax
        const non_const_ptr = @intToPtr([*]u8, @ptrToInt(bytes.ptr));
  21caad:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  21cab1:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
        self.freeFn(self, non_const_ptr[0..bytes.len]);
  21cab5:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  21cab9:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  21cabd:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  21cac1:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  21cac5:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
  21cac9:	48 39 f1             	cmp    rcx,rsi
  21cacc:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
  21cad0:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
  21cad4:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  21cad8:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  21cadc:	76 10                	jbe    21caee <Allocator_free.56+0x7e>
  21cade:	48 8d 3d 13 69 02 00 	lea    rdi,[rip+0x26913]        # 2433f8 <__unnamed_20>
  21cae5:	31 c0                	xor    eax,eax
  21cae7:	89 c6                	mov    esi,eax
  21cae9:	e8 12 eb fe ff       	call   20b600 <panic>
  21caee:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
  21caf2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21caf6:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  21cafa:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  21cafe:	48 83 e9 00          	sub    rcx,0x0
  21cb02:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  21cb06:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  21cb0a:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  21cb0e:	ff d1                	call   rcx
    pub fn free(self: *Allocator, memory: var) void {
  21cb10:	48 83 c4 60          	add    rsp,0x60
  21cb14:	5d                   	pop    rbp
  21cb15:	c3                   	ret    
  21cb16:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  21cb1d:	00 00 00 

000000000021cb20 <format.57>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  21cb20:	55                   	push   rbp
  21cb21:	48 89 e5             	mov    rbp,rsp
  21cb24:	48 83 ec 40          	sub    rsp,0x40
  21cb28:	48 8d 05 e9 6a 02 00 	lea    rax,[rip+0x26ae9]        # 243618 <__unnamed_112>
  21cb2f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  21cb33:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
                        try output(context, fmt[start_index..i]);
  21cb37:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  21cb3b:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  21cb3f:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  21cb43:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  21cb47:	48 89 c2             	mov    rdx,rax
  21cb4a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21cb4e:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  21cb52:	ff d0                	call   rax
  21cb54:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  21cb58:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  21cb5d:	74 1b                	je     21cb7a <format.57+0x5a>
  21cb5f:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  21cb63:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21cb67:	66 89 45 ce          	mov    WORD PTR [rbp-0x32],ax
  21cb6b:	e8 20 f1 fe ff       	call   20bc90 <__zig_return_error>
  21cb70:	66 8b 45 ce          	mov    ax,WORD PTR [rbp-0x32]
  21cb74:	48 83 c4 40          	add    rsp,0x40
  21cb78:	5d                   	pop    rbp
  21cb79:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  21cb7a:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21cb7e:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21cb82:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21cb86:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  21cb8a:	e8 71 00 00 00       	call   21cc00 <formatType.58>
  21cb8f:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  21cb93:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  21cb98:	74 1b                	je     21cbb5 <format.57+0x95>
  21cb9a:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  21cb9e:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21cba2:	66 89 45 cc          	mov    WORD PTR [rbp-0x34],ax
  21cba6:	e8 e5 f0 fe ff       	call   20bc90 <__zig_return_error>
  21cbab:	66 8b 45 cc          	mov    ax,WORD PTR [rbp-0x34]
  21cbaf:	48 83 c4 40          	add    rsp,0x40
  21cbb3:	5d                   	pop    rbp
  21cbb4:	c3                   	ret    
  21cbb5:	48 8d 15 74 6a 02 00 	lea    rdx,[rip+0x26a74]        # 243630 <__unnamed_113>
        try output(context, fmt[start_index..]);
  21cbbc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21cbc0:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  21cbc4:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21cbc8:	ff d0                	call   rax
  21cbca:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  21cbce:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  21cbd3:	74 1b                	je     21cbf0 <format.57+0xd0>
  21cbd5:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  21cbd9:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21cbdd:	66 89 45 ca          	mov    WORD PTR [rbp-0x36],ax
  21cbe1:	e8 aa f0 fe ff       	call   20bc90 <__zig_return_error>
  21cbe6:	66 8b 45 ca          	mov    ax,WORD PTR [rbp-0x36]
  21cbea:	48 83 c4 40          	add    rsp,0x40
  21cbee:	5d                   	pop    rbp
  21cbef:	c3                   	ret    
  21cbf0:	31 c0                	xor    eax,eax
  21cbf2:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  21cbf5:	66 89 c8             	mov    ax,cx
  21cbf8:	48 83 c4 40          	add    rsp,0x40
  21cbfc:	5d                   	pop    rbp
  21cbfd:	c3                   	ret    
  21cbfe:	66 90                	xchg   ax,ax

000000000021cc00 <formatType.58>:
pub fn formatType(
  21cc00:	55                   	push   rbp
  21cc01:	48 89 e5             	mov    rbp,rsp
  21cc04:	48 83 ec 30          	sub    rsp,0x30
  21cc08:	48 8d 45 e0          	lea    rax,[rbp-0x20]
  21cc0c:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  21cc10:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
                const casted_value = ([]const u8)(value);
  21cc14:	48 8b 0e             	mov    rcx,QWORD PTR [rsi]
  21cc17:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  21cc1b:	48 8b 4e 08          	mov    rcx,QWORD PTR [rsi+0x8]
  21cc1f:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
                return output(context, casted_value);
  21cc23:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  21cc27:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21cc2b:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  21cc2f:	48 89 c2             	mov    rdx,rax
  21cc32:	ff d1                	call   rcx
  21cc34:	66 83 f8 00          	cmp    ax,0x0
  21cc38:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  21cc3c:	74 0b                	je     21cc49 <formatType.58+0x49>
  21cc3e:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  21cc42:	e8 49 f0 fe ff       	call   20bc90 <__zig_return_error>
  21cc47:	eb 02                	jmp    21cc4b <formatType.58+0x4b>
  21cc49:	eb 00                	jmp    21cc4b <formatType.58+0x4b>
  21cc4b:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  21cc4f:	48 83 c4 30          	add    rsp,0x30
  21cc53:	5d                   	pop    rbp
  21cc54:	c3                   	ret    
  21cc55:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21cc5c:	00 00 00 00 

000000000021cc60 <getEnvVarOwned>:
pub fn getEnvVarOwned(allocator: *mem.Allocator, key: []const u8) GetEnvVarOwnedError![]u8 {
  21cc60:	55                   	push   rbp
  21cc61:	48 89 e5             	mov    rbp,rsp
  21cc64:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  21cc6b:	48 89 f8             	mov    rax,rdi
  21cc6e:	4c 8d 45 e8          	lea    r8,[rbp-0x18]
  21cc72:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
        const result = getEnvPosix(key) orelse return error.EnvironmentVariableNotFound;
  21cc76:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
  21cc7a:	4c 89 c7             	mov    rdi,r8
  21cc7d:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
  21cc81:	48 89 ce             	mov    rsi,rcx
  21cc84:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  21cc88:	e8 33 b4 00 00       	call   2280c0 <getEnvPosix>
  21cc8d:	f6 45 f8 01          	test   BYTE PTR [rbp-0x8],0x1
  21cc91:	75 3a                	jne    21cccd <getEnvVarOwned+0x6d>
  21cc93:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  21cc97:	e8 f4 ef fe ff       	call   20bc90 <__zig_return_error>
  21cc9c:	48 8b 3d 95 da fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffeda95]        # 20a738 <__unnamed_114>
  21cca3:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  21cca7:	48 89 38             	mov    QWORD PTR [rax],rdi
  21ccaa:	48 8b 3d 8f da fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffeda8f]        # 20a740 <__unnamed_114+0x8>
  21ccb1:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  21ccb5:	48 8b 3d 8c da fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffeda8c]        # 20a748 <__unnamed_114+0x10>
  21ccbc:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  21ccc0:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  21ccc4:	48 81 c4 80 00 00 00 	add    rsp,0x80
  21cccb:	5d                   	pop    rbp
  21cccc:	c3                   	ret    
  21cccd:	48 8d 45 e8          	lea    rax,[rbp-0x18]
  21ccd1:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  21ccd5:	48 8d 7d b8          	lea    rdi,[rbp-0x48]
  21ccd9:	48 8d 4d a0          	lea    rcx,[rbp-0x60]
  21ccdd:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  21cce1:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  21cce4:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  21cce8:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
  21ccec:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
        return mem.dupe(allocator, u8, result);
  21ccf0:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  21ccf4:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  21ccf8:	e8 c3 b6 00 00       	call   2283c0 <dupe>
  21ccfd:	66 83 7d b8 00       	cmp    WORD PTR [rbp-0x48],0x0
  21cd02:	74 0b                	je     21cd0f <getEnvVarOwned+0xaf>
  21cd04:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  21cd08:	e8 83 ef fe ff       	call   20bc90 <__zig_return_error>
  21cd0d:	eb 02                	jmp    21cd11 <getEnvVarOwned+0xb1>
  21cd0f:	eb 00                	jmp    21cd11 <getEnvVarOwned+0xb1>
  21cd11:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21cd15:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  21cd19:	48 89 01             	mov    QWORD PTR [rcx],rax
  21cd1c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  21cd20:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21cd24:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21cd28:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21cd2c:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  21cd30:	48 81 c4 80 00 00 00 	add    rsp,0x80
  21cd37:	5d                   	pop    rbp
  21cd38:	c3                   	ret    
  21cd39:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

000000000021cd40 <File_isTty>:
    pub fn isTty(self: *File) bool {
  21cd40:	55                   	push   rbp
  21cd41:	48 89 e5             	mov    rbp,rsp
  21cd44:	48 83 ec 10          	sub    rsp,0x10
  21cd48:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
        return os.isTty(self.handle);
  21cd4c:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  21cd50:	8b 3f                	mov    edi,DWORD PTR [rdi]
  21cd52:	e8 69 b7 00 00       	call   2284c0 <isTty>
  21cd57:	88 c1                	mov    cl,al
  21cd59:	88 4d f7             	mov    BYTE PTR [rbp-0x9],cl
  21cd5c:	48 83 c4 10          	add    rsp,0x10
  21cd60:	5d                   	pop    rbp
  21cd61:	c3                   	ret    
  21cd62:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21cd69:	1f 84 00 00 00 00 00 

000000000021cd70 <printSourceAtAddress>:
pub fn printSourceAtAddress(debug_info: *ElfStackTrace, out_stream: var, address: usize, tty_color: bool) !void {
  21cd70:	55                   	push   rbp
  21cd71:	48 89 e5             	mov    rbp,rsp
  21cd74:	48 81 ec c0 01 00 00 	sub    rsp,0x1c0
  21cd7b:	44 88 c0             	mov    al,r8b
  21cd7e:	4c 8d 4d f0          	lea    r9,[rbp-0x10]
  21cd82:	48 89 b5 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rsi
  21cd89:	48 89 95 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rdx
  21cd90:	48 89 8d 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rcx
  21cd97:	24 01                	and    al,0x1
  21cd99:	88 85 1f ff ff ff    	mov    BYTE PTR [rbp-0xe1],al
            const compile_unit = findCompileUnit(debug_info, address) catch {
  21cd9f:	48 8b 95 30 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd0]
  21cda6:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21cdad:	48 89 bd c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rdi
  21cdb4:	4c 89 cf             	mov    rdi,r9
  21cdb7:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  21cdbe:	e8 4d 06 00 00       	call   21d410 <findCompileUnit>
  21cdc3:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  21cdc8:	0f 84 b6 00 00 00    	je     21ce84 <printSourceAtAddress+0x114>
                if (tty_color) {
  21cdce:	f6 85 1f ff ff ff 01 	test   BYTE PTR [rbp-0xe1],0x1
  21cdd5:	75 02                	jne    21cdd9 <printSourceAtAddress+0x69>
  21cdd7:	eb 4e                	jmp    21ce27 <printSourceAtAddress+0xb7>
                    try out_stream.print("???:?:?: " ++ DIM ++ "0x{x} in ??? (???)" ++ RESET ++ "\n    ???\n\n", address);
  21cdd9:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21cde0:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
  21cde7:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21cdee:	e8 bd 0b 00 00       	call   21d9b0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.59>
  21cdf3:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  21cdf7:	66 83 7d de 00       	cmp    WORD PTR [rbp-0x22],0x0
  21cdfc:	74 27                	je     21ce25 <printSourceAtAddress+0xb5>
  21cdfe:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  21ce02:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21ce09:	66 89 85 be fe ff ff 	mov    WORD PTR [rbp-0x142],ax
  21ce10:	e8 7b ee fe ff       	call   20bc90 <__zig_return_error>
  21ce15:	66 8b 85 be fe ff ff 	mov    ax,WORD PTR [rbp-0x142]
  21ce1c:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  21ce23:	5d                   	pop    rbp
  21ce24:	c3                   	ret    
                if (tty_color) {
  21ce25:	eb 4c                	jmp    21ce73 <printSourceAtAddress+0x103>
                    try out_stream.print("???:?:?: 0x{x} in ??? (???)\n    ???\n\n", address);
  21ce27:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21ce2e:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
  21ce35:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21ce3c:	e8 bf 0b 00 00       	call   21da00 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.60>
  21ce41:	66 89 45 dc          	mov    WORD PTR [rbp-0x24],ax
  21ce45:	66 83 7d dc 00       	cmp    WORD PTR [rbp-0x24],0x0
  21ce4a:	74 27                	je     21ce73 <printSourceAtAddress+0x103>
  21ce4c:	66 8b 45 dc          	mov    ax,WORD PTR [rbp-0x24]
  21ce50:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21ce57:	66 89 85 bc fe ff ff 	mov    WORD PTR [rbp-0x144],ax
  21ce5e:	e8 2d ee fe ff       	call   20bc90 <__zig_return_error>
  21ce63:	66 8b 85 bc fe ff ff 	mov    ax,WORD PTR [rbp-0x144]
  21ce6a:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  21ce71:	5d                   	pop    rbp
  21ce72:	c3                   	ret    
  21ce73:	31 c0                	xor    eax,eax
  21ce75:	66 89 c1             	mov    cx,ax
                return;
  21ce78:	66 89 c8             	mov    ax,cx
  21ce7b:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  21ce82:	5d                   	pop    rbp
  21ce83:	c3                   	ret    
            const compile_unit = findCompileUnit(debug_info, address) catch {
  21ce84:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21ce88:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  21ce8f:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  21ce93:	b8 03 00 00 00       	mov    eax,0x3
  21ce98:	41 89 c0             	mov    r8d,eax
  21ce9b:	48 8b 8d b0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x150]
  21cea2:	48 89 8d 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rcx
            const compile_unit_name = try compile_unit.die.getAttrString(debug_info, DW.AT_name);
  21cea9:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
  21ceb0:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  21ceb4:	48 8b 8d 30 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd0]
  21cebb:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  21cec2:	e8 89 0b 00 00       	call   21da50 <Die_getAttrString>
  21cec7:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  21cecc:	74 27                	je     21cef5 <printSourceAtAddress+0x185>
  21cece:	66 8b 45 c0          	mov    ax,WORD PTR [rbp-0x40]
  21ced2:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21ced9:	66 89 85 ae fe ff ff 	mov    WORD PTR [rbp-0x152],ax
  21cee0:	e8 ab ed fe ff       	call   20bc90 <__zig_return_error>
  21cee5:	66 8b 85 ae fe ff ff 	mov    ax,WORD PTR [rbp-0x152]
  21ceec:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  21cef3:	5d                   	pop    rbp
  21cef4:	c3                   	ret    
  21cef5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21cef9:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
  21cf00:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  21cf04:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
            if (getLineNumberInfo(debug_info, compile_unit, address - 1)) |line_info| {
  21cf0b:	48 8b 95 30 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd0]
  21cf12:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  21cf19:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21cf20:	48 83 e8 01          	sub    rax,0x1
  21cf24:	40 0f 92 c6          	setb   sil
  21cf28:	48 89 95 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdx
  21cf2f:	48 89 8d 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rcx
  21cf36:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  21cf3d:	40 88 b5 8f fe ff ff 	mov    BYTE PTR [rbp-0x171],sil
  21cf44:	0f 82 4b 04 00 00    	jb     21d395 <printSourceAtAddress+0x625>
  21cf4a:	e9 56 04 00 00       	jmp    21d3a5 <printSourceAtAddress+0x635>
  21cf4f:	b8 28 00 00 00       	mov    eax,0x28
  21cf54:	89 c2                	mov    edx,eax
  21cf56:	48 8d 8d d8 fe ff ff 	lea    rcx,[rbp-0x128]
  21cf5d:	48 8d b5 78 ff ff ff 	lea    rsi,[rbp-0x88]
  21cf64:	48 83 c6 08          	add    rsi,0x8
  21cf68:	48 89 cf             	mov    rdi,rcx
  21cf6b:	e8 90 79 01 00       	call   234900 <memcpy>
                if (tty_color) {
  21cf70:	f6 85 1f ff ff ff 01 	test   BYTE PTR [rbp-0xe1],0x1
  21cf77:	75 05                	jne    21cf7e <printSourceAtAddress+0x20e>
  21cf79:	e9 ac 02 00 00       	jmp    21d22a <printSourceAtAddress+0x4ba>
  21cf7e:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
  21cf85:	48 8d 8d d8 fe ff ff 	lea    rcx,[rbp-0x128]
                    try out_stream.print(
  21cf8c:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
                        line_info.file_name,
  21cf93:	48 83 c1 10          	add    rcx,0x10
                        line_info.line,
  21cf97:	48 8b 95 d8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x128]
                        line_info.column,
  21cf9e:	4c 8b 85 e0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x120]
                        address,
  21cfa5:	4c 8b 8d 20 ff ff ff 	mov    r9,QWORD PTR [rbp-0xe0]
                    try out_stream.print(
  21cfac:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21cfb3:	48 89 95 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rdx
  21cfba:	48 89 ca             	mov    rdx,rcx
  21cfbd:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
  21cfc4:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  21cfc8:	e8 b3 38 00 00       	call   220880 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.61>
  21cfcd:	66 89 85 46 ff ff ff 	mov    WORD PTR [rbp-0xba],ax
  21cfd4:	66 83 bd 46 ff ff ff 	cmp    WORD PTR [rbp-0xba],0x0
  21cfdb:	00 
  21cfdc:	74 36                	je     21d014 <printSourceAtAddress+0x2a4>
  21cfde:	48 8d bd d8 fe ff ff 	lea    rdi,[rbp-0x128]
                defer line_info.deinit();
  21cfe5:	e8 16 39 00 00       	call   220900 <LineInfo_deinit>
                    try out_stream.print(
  21cfea:	66 8b 85 46 ff ff ff 	mov    ax,WORD PTR [rbp-0xba]
  21cff1:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21cff8:	66 89 85 7e fe ff ff 	mov    WORD PTR [rbp-0x182],ax
  21cfff:	e8 8c ec fe ff       	call   20bc90 <__zig_return_error>
  21d004:	66 8b 85 7e fe ff ff 	mov    ax,WORD PTR [rbp-0x182]
  21d00b:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  21d012:	5d                   	pop    rbp
  21d013:	c3                   	ret    
                    if (printLineFromFile(debug_info.allocator(), out_stream, line_info)) {
  21d014:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
  21d01b:	e8 40 8c ff ff       	call   215c60 <ElfStackTrace_allocator>
  21d020:	48 8d 8d d8 fe ff ff 	lea    rcx,[rbp-0x128]
  21d027:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
  21d02e:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21d035:	48 89 c6             	mov    rsi,rax
  21d038:	e8 f3 38 00 00       	call   220930 <printLineFromFile>
  21d03d:	66 89 85 44 ff ff ff 	mov    WORD PTR [rbp-0xbc],ax
  21d044:	66 83 bd 44 ff ff ff 	cmp    WORD PTR [rbp-0xbc],0x0
  21d04b:	00 
  21d04c:	0f 85 77 01 00 00    	jne    21d1c9 <printSourceAtAddress+0x459>
                        if (line_info.column == 0) {
  21d052:	48 83 bd e0 fe ff ff 	cmp    QWORD PTR [rbp-0x120],0x0
  21d059:	00 
  21d05a:	75 66                	jne    21d0c2 <printSourceAtAddress+0x352>
  21d05c:	48 8d 15 05 66 02 00 	lea    rdx,[rip+0x26605]        # 243668 <__unnamed_115>
                            try out_stream.write("\n");
  21d063:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21d06a:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21d071:	e8 6a 3c 00 00       	call   220ce0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_write>
  21d076:	66 89 85 42 ff ff ff 	mov    WORD PTR [rbp-0xbe],ax
  21d07d:	66 83 bd 42 ff ff ff 	cmp    WORD PTR [rbp-0xbe],0x0
  21d084:	00 
  21d085:	74 36                	je     21d0bd <printSourceAtAddress+0x34d>
  21d087:	48 8d bd d8 fe ff ff 	lea    rdi,[rbp-0x128]
                defer line_info.deinit();
  21d08e:	e8 6d 38 00 00       	call   220900 <LineInfo_deinit>
                            try out_stream.write("\n");
  21d093:	66 8b 85 42 ff ff ff 	mov    ax,WORD PTR [rbp-0xbe]
  21d09a:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21d0a1:	66 89 85 7c fe ff ff 	mov    WORD PTR [rbp-0x184],ax
  21d0a8:	e8 e3 eb fe ff       	call   20bc90 <__zig_return_error>
  21d0ad:	66 8b 85 7c fe ff ff 	mov    ax,WORD PTR [rbp-0x184]
  21d0b4:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  21d0bb:	5d                   	pop    rbp
  21d0bc:	c3                   	ret    
                        if (line_info.column == 0) {
  21d0bd:	e9 05 01 00 00       	jmp    21d1c7 <printSourceAtAddress+0x457>
                                var col_i: usize = 1;
  21d0c2:	48 c7 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],0x1
  21d0c9:	01 00 00 00 
                                while (col_i < line_info.column) : (col_i += 1) {
  21d0cd:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21d0d4:	48 3b 85 e0 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x120]
  21d0db:	0f 83 85 00 00 00    	jae    21d166 <printSourceAtAddress+0x3f6>
  21d0e1:	ba 20 00 00 00       	mov    edx,0x20
                                    try out_stream.writeByte(' ');
  21d0e6:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21d0ed:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21d0f4:	e8 37 3c 00 00       	call   220d30 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_writeByte>
  21d0f9:	66 89 85 40 ff ff ff 	mov    WORD PTR [rbp-0xc0],ax
  21d100:	66 83 bd 40 ff ff ff 	cmp    WORD PTR [rbp-0xc0],0x0
  21d107:	00 
  21d108:	74 36                	je     21d140 <printSourceAtAddress+0x3d0>
  21d10a:	48 8d bd d8 fe ff ff 	lea    rdi,[rbp-0x128]
                defer line_info.deinit();
  21d111:	e8 ea 37 00 00       	call   220900 <LineInfo_deinit>
                                    try out_stream.writeByte(' ');
  21d116:	66 8b 85 40 ff ff ff 	mov    ax,WORD PTR [rbp-0xc0]
  21d11d:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21d124:	66 89 85 7a fe ff ff 	mov    WORD PTR [rbp-0x186],ax
  21d12b:	e8 60 eb fe ff       	call   20bc90 <__zig_return_error>
  21d130:	66 8b 85 7a fe ff ff 	mov    ax,WORD PTR [rbp-0x186]
  21d137:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  21d13e:	5d                   	pop    rbp
  21d13f:	c3                   	ret    
                                while (col_i < line_info.column) : (col_i += 1) {
  21d140:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21d147:	48 83 c0 01          	add    rax,0x1
  21d14b:	0f 92 c1             	setb   cl
  21d14e:	48 89 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rax
  21d155:	88 8d 6f fe ff ff    	mov    BYTE PTR [rbp-0x191],cl
  21d15b:	0f 82 7f 02 00 00    	jb     21d3e0 <printSourceAtAddress+0x670>
  21d161:	e9 8a 02 00 00       	jmp    21d3f0 <printSourceAtAddress+0x680>
  21d166:	48 8d 15 13 65 02 00 	lea    rdx,[rip+0x26513]        # 243680 <__unnamed_116>
                            try out_stream.write(GREEN ++ "^" ++ RESET ++ "\n");
  21d16d:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21d174:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21d17b:	e8 60 3b 00 00       	call   220ce0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_write>
  21d180:	66 89 85 3e ff ff ff 	mov    WORD PTR [rbp-0xc2],ax
  21d187:	66 83 bd 3e ff ff ff 	cmp    WORD PTR [rbp-0xc2],0x0
  21d18e:	00 
  21d18f:	74 36                	je     21d1c7 <printSourceAtAddress+0x457>
  21d191:	48 8d bd d8 fe ff ff 	lea    rdi,[rbp-0x128]
                defer line_info.deinit();
  21d198:	e8 63 37 00 00       	call   220900 <LineInfo_deinit>
                            try out_stream.write(GREEN ++ "^" ++ RESET ++ "\n");
  21d19d:	66 8b 85 3e ff ff ff 	mov    ax,WORD PTR [rbp-0xc2]
  21d1a4:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21d1ab:	66 89 85 6c fe ff ff 	mov    WORD PTR [rbp-0x194],ax
  21d1b2:	e8 d9 ea fe ff       	call   20bc90 <__zig_return_error>
  21d1b7:	66 8b 85 6c fe ff ff 	mov    ax,WORD PTR [rbp-0x194]
  21d1be:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  21d1c5:	5d                   	pop    rbp
  21d1c6:	c3                   	ret    
                    if (printLineFromFile(debug_info.allocator(), out_stream, line_info)) {
  21d1c7:	eb 5c                	jmp    21d225 <printSourceAtAddress+0x4b5>
  21d1c9:	66 8b 85 44 ff ff ff 	mov    ax,WORD PTR [rbp-0xbc]
  21d1d0:	66 89 85 ce fe ff ff 	mov    WORD PTR [rbp-0x132],ax
                    } else |err| switch (err) {
  21d1d7:	0f b7 8d ce fe ff ff 	movzx  ecx,WORD PTR [rbp-0x132]
  21d1de:	83 e9 26             	sub    ecx,0x26
  21d1e1:	89 8d 68 fe ff ff    	mov    DWORD PTR [rbp-0x198],ecx
  21d1e7:	74 38                	je     21d221 <printSourceAtAddress+0x4b1>
  21d1e9:	eb 00                	jmp    21d1eb <printSourceAtAddress+0x47b>
  21d1eb:	48 8d bd d8 fe ff ff 	lea    rdi,[rbp-0x128]
                        else => return err,
  21d1f2:	66 8b 85 ce fe ff ff 	mov    ax,WORD PTR [rbp-0x132]
                defer line_info.deinit();
  21d1f9:	66 89 85 66 fe ff ff 	mov    WORD PTR [rbp-0x19a],ax
  21d200:	e8 fb 36 00 00       	call   220900 <LineInfo_deinit>
                        else => return err,
  21d205:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21d20c:	e8 7f ea fe ff       	call   20bc90 <__zig_return_error>
  21d211:	66 8b 85 66 fe ff ff 	mov    ax,WORD PTR [rbp-0x19a]
  21d218:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  21d21f:	5d                   	pop    rbp
  21d220:	c3                   	ret    
                    } else |err| switch (err) {
  21d221:	eb 00                	jmp    21d223 <printSourceAtAddress+0x4b3>
                    if (printLineFromFile(debug_info.allocator(), out_stream, line_info)) {
  21d223:	eb 00                	jmp    21d225 <printSourceAtAddress+0x4b5>
                if (tty_color) {
  21d225:	e9 96 00 00 00       	jmp    21d2c0 <printSourceAtAddress+0x550>
  21d22a:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
  21d231:	48 8d 8d d8 fe ff ff 	lea    rcx,[rbp-0x128]
                    try out_stream.print(
  21d238:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
                        line_info.file_name,
  21d23f:	48 83 c1 10          	add    rcx,0x10
                        line_info.line,
  21d243:	48 8b 95 d8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x128]
                        line_info.column,
  21d24a:	4c 8b 85 e0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x120]
                        address,
  21d251:	4c 8b 8d 20 ff ff ff 	mov    r9,QWORD PTR [rbp-0xe0]
                    try out_stream.print(
  21d258:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21d25f:	48 89 95 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rdx
  21d266:	48 89 ca             	mov    rdx,rcx
  21d269:	48 8b 8d 58 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1a8]
  21d270:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  21d274:	e8 57 3b 00 00       	call   220dd0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.62>
  21d279:	66 89 85 3c ff ff ff 	mov    WORD PTR [rbp-0xc4],ax
  21d280:	66 83 bd 3c ff ff ff 	cmp    WORD PTR [rbp-0xc4],0x0
  21d287:	00 
  21d288:	74 36                	je     21d2c0 <printSourceAtAddress+0x550>
  21d28a:	48 8d bd d8 fe ff ff 	lea    rdi,[rbp-0x128]
                defer line_info.deinit();
  21d291:	e8 6a 36 00 00       	call   220900 <LineInfo_deinit>
                    try out_stream.print(
  21d296:	66 8b 85 3c ff ff ff 	mov    ax,WORD PTR [rbp-0xc4]
  21d29d:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21d2a4:	66 89 85 56 fe ff ff 	mov    WORD PTR [rbp-0x1aa],ax
  21d2ab:	e8 e0 e9 fe ff       	call   20bc90 <__zig_return_error>
  21d2b0:	66 8b 85 56 fe ff ff 	mov    ax,WORD PTR [rbp-0x1aa]
  21d2b7:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  21d2be:	5d                   	pop    rbp
  21d2bf:	c3                   	ret    
  21d2c0:	48 8d bd d8 fe ff ff 	lea    rdi,[rbp-0x128]
                defer line_info.deinit();
  21d2c7:	e8 34 36 00 00       	call   220900 <LineInfo_deinit>
            if (getLineNumberInfo(debug_info, compile_unit, address - 1)) |line_info| {
  21d2cc:	e9 b3 00 00 00       	jmp    21d384 <printSourceAtAddress+0x614>
  21d2d1:	66 8b 85 78 ff ff ff 	mov    ax,WORD PTR [rbp-0x88]
  21d2d8:	66 89 85 cc fe ff ff 	mov    WORD PTR [rbp-0x134],ax
            } else |err| switch (err) {
  21d2df:	0f b7 8d cc fe ff ff 	movzx  ecx,WORD PTR [rbp-0x134]
  21d2e6:	83 c1 dc             	add    ecx,0xffffffdc
  21d2e9:	66 89 c8             	mov    ax,cx
  21d2ec:	0f b7 c8             	movzx  ecx,ax
  21d2ef:	83 e9 02             	sub    ecx,0x2
  21d2f2:	89 8d 50 fe ff ff    	mov    DWORD PTR [rbp-0x1b0],ecx
  21d2f8:	72 2c                	jb     21d326 <printSourceAtAddress+0x5b6>
  21d2fa:	eb 00                	jmp    21d2fc <printSourceAtAddress+0x58c>
                else => return err,
  21d2fc:	66 8b 85 cc fe ff ff 	mov    ax,WORD PTR [rbp-0x134]
  21d303:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21d30a:	66 89 85 4e fe ff ff 	mov    WORD PTR [rbp-0x1b2],ax
  21d311:	e8 7a e9 fe ff       	call   20bc90 <__zig_return_error>
  21d316:	66 8b 85 4e fe ff ff 	mov    ax,WORD PTR [rbp-0x1b2]
  21d31d:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  21d324:	5d                   	pop    rbp
  21d325:	c3                   	ret    
  21d326:	48 8d 8d 00 ff ff ff 	lea    rcx,[rbp-0x100]
                    try out_stream.print("0x{x} in ??? ({})\n", address, compile_unit_name);
  21d32d:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21d334:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
  21d33b:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21d342:	e8 09 3b 00 00       	call   220e50 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.63>
  21d347:	66 89 85 3a ff ff ff 	mov    WORD PTR [rbp-0xc6],ax
  21d34e:	66 83 bd 3a ff ff ff 	cmp    WORD PTR [rbp-0xc6],0x0
  21d355:	00 
  21d356:	74 2a                	je     21d382 <printSourceAtAddress+0x612>
  21d358:	66 8b 85 3a ff ff ff 	mov    ax,WORD PTR [rbp-0xc6]
  21d35f:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21d366:	66 89 85 4c fe ff ff 	mov    WORD PTR [rbp-0x1b4],ax
  21d36d:	e8 1e e9 fe ff       	call   20bc90 <__zig_return_error>
  21d372:	66 8b 85 4c fe ff ff 	mov    ax,WORD PTR [rbp-0x1b4]
  21d379:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  21d380:	5d                   	pop    rbp
  21d381:	c3                   	ret    
            if (getLineNumberInfo(debug_info, compile_unit, address - 1)) |line_info| {
  21d382:	eb 00                	jmp    21d384 <printSourceAtAddress+0x614>
  21d384:	31 c0                	xor    eax,eax
  21d386:	66 89 c1             	mov    cx,ax
pub fn printSourceAtAddress(debug_info: *ElfStackTrace, out_stream: var, address: usize, tty_color: bool) !void {
  21d389:	66 89 c8             	mov    ax,cx
  21d38c:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  21d393:	5d                   	pop    rbp
  21d394:	c3                   	ret    
  21d395:	48 8d 3d 2c 5e 02 00 	lea    rdi,[rip+0x25e2c]        # 2431c8 <__unnamed_4>
  21d39c:	31 c0                	xor    eax,eax
  21d39e:	89 c6                	mov    esi,eax
            if (getLineNumberInfo(debug_info, compile_unit, address - 1)) |line_info| {
  21d3a0:	e8 5b e2 fe ff       	call   20b600 <panic>
  21d3a5:	48 8d bd 78 ff ff ff 	lea    rdi,[rbp-0x88]
  21d3ac:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  21d3b3:	48 8b 95 a0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x160]
  21d3ba:	48 8b 8d 98 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x168]
  21d3c1:	4c 8b 85 90 fe ff ff 	mov    r8,QWORD PTR [rbp-0x170]
  21d3c8:	e8 83 08 00 00       	call   21dc50 <getLineNumberInfo>
  21d3cd:	66 83 bd 78 ff ff ff 	cmp    WORD PTR [rbp-0x88],0x0
  21d3d4:	00 
  21d3d5:	0f 85 f6 fe ff ff    	jne    21d2d1 <printSourceAtAddress+0x561>
  21d3db:	e9 6f fb ff ff       	jmp    21cf4f <printSourceAtAddress+0x1df>
  21d3e0:	48 8d 3d e1 5d 02 00 	lea    rdi,[rip+0x25de1]        # 2431c8 <__unnamed_4>
  21d3e7:	31 c0                	xor    eax,eax
  21d3e9:	89 c6                	mov    esi,eax
                                while (col_i < line_info.column) : (col_i += 1) {
  21d3eb:	e8 10 e2 fe ff       	call   20b600 <panic>
  21d3f0:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  21d3f7:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  21d3fe:	e9 ca fc ff ff       	jmp    21d0cd <printSourceAtAddress+0x35d>
  21d403:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21d40a:	84 00 00 00 00 00 

000000000021d410 <findCompileUnit>:
fn findCompileUnit(st: *ElfStackTrace, target_address: u64) !*const CompileUnit {
  21d410:	55                   	push   rbp
  21d411:	48 89 e5             	mov    rbp,rsp
  21d414:	48 81 ec d0 01 00 00 	sub    rsp,0x1d0
  21d41b:	48 89 f8             	mov    rax,rdi
  21d41e:	4c 8d 45 f0          	lea    r8,[rbp-0x10]
  21d422:	48 89 95 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rdx
  21d429:	48 89 8d f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rcx
    var in_file_stream = io.FileInStream.init(&st.self_exe_file);
  21d430:	48 8b 8d 00 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x100]
  21d437:	48 89 bd 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rdi
  21d43e:	4c 89 c7             	mov    rdi,r8
  21d441:	48 89 b5 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rsi
  21d448:	48 89 ce             	mov    rsi,rcx
  21d44b:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  21d452:	e8 39 65 ff ff       	call   213990 <FileInStream_init>
  21d457:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
  21d45b:	48 8d 85 e8 fe ff ff 	lea    rax,[rbp-0x118]
  21d462:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  21d466:	48 89 8d e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rcx
  21d46d:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  21d471:	48 89 8d f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rcx
    const in_stream = &in_file_stream.stream;
  21d478:	48 83 c0 08          	add    rax,0x8
  21d47c:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
    for (st.compile_unit_list.toSlice()) |*compile_unit| {
  21d483:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  21d48a:	48 05 a8 00 00 00    	add    rax,0xa8
  21d490:	48 89 c6             	mov    rsi,rax
  21d493:	e8 18 3a 00 00       	call   220eb0 <AlignedArrayList(CompileUnit,2)_toSlice>
  21d498:	be aa 00 00 00       	mov    esi,0xaa
  21d49d:	41 b9 08 00 00 00    	mov    r9d,0x8
  21d4a3:	44 89 ca             	mov    edx,r9d
  21d4a6:	48 8d 85 d8 fe ff ff 	lea    rax,[rbp-0x128]
  21d4ad:	48 89 c7             	mov    rdi,rax
  21d4b0:	e8 fb 73 01 00       	call   2348b0 <memset>
  21d4b5:	48 c7 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],0x0
  21d4bc:	00 00 00 00 
  21d4c0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21d4c4:	48 89 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rax
  21d4cb:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21d4d2:	48 8b 8d 70 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x190]
  21d4d9:	48 39 c8             	cmp    rax,rcx
  21d4dc:	48 89 85 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rax
  21d4e3:	0f 83 46 04 00 00    	jae    21d92f <findCompileUnit+0x51f>
  21d4e9:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
  21d4f0:	48 6b c8 30          	imul   rcx,rax,0x30
  21d4f4:	48 03 4d e0          	add    rcx,QWORD PTR [rbp-0x20]
  21d4f8:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
        if (compile_unit.pc_range) |range| {
  21d4ff:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
  21d506:	48 89 ca             	mov    rdx,rcx
  21d509:	48 83 c2 18          	add    rdx,0x18
  21d50d:	f6 41 28 01          	test   BYTE PTR [rcx+0x28],0x1
  21d511:	48 89 95 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rdx
  21d518:	75 05                	jne    21d51f <findCompileUnit+0x10f>
  21d51a:	e9 98 00 00 00       	jmp    21d5b7 <findCompileUnit+0x1a7>
  21d51f:	48 8b 85 60 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a0]
  21d526:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  21d529:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
  21d530:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  21d534:	48 89 8d c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rcx
            if (target_address >= range.start and target_address < range.end) return compile_unit;
  21d53b:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  21d542:	48 3b 8d c0 fe ff ff 	cmp    rcx,QWORD PTR [rbp-0x140]
  21d549:	0f 93 c2             	setae  dl
  21d54c:	f6 c2 01             	test   dl,0x1
  21d54f:	88 95 5f fe ff ff    	mov    BYTE PTR [rbp-0x1a1],dl
  21d555:	75 02                	jne    21d559 <findCompileUnit+0x149>
  21d557:	eb 17                	jmp    21d570 <findCompileUnit+0x160>
  21d559:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  21d560:	48 3b 85 c8 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x138]
  21d567:	0f 92 c1             	setb   cl
  21d56a:	88 8d 5f fe ff ff    	mov    BYTE PTR [rbp-0x1a1],cl
  21d570:	8a 85 5f fe ff ff    	mov    al,BYTE PTR [rbp-0x1a1]
  21d576:	a8 01                	test   al,0x1
  21d578:	75 02                	jne    21d57c <findCompileUnit+0x16c>
  21d57a:	eb 37                	jmp    21d5b3 <findCompileUnit+0x1a3>
  21d57c:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  21d583:	66 c7 45 c0 00 00    	mov    WORD PTR [rbp-0x40],0x0
  21d589:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  21d58d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  21d591:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
  21d598:	48 89 01             	mov    QWORD PTR [rcx],rax
  21d59b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21d59f:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21d5a3:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
  21d5aa:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  21d5b1:	5d                   	pop    rbp
  21d5b2:	c3                   	ret    
  21d5b3:	eb 00                	jmp    21d5b5 <findCompileUnit+0x1a5>
        if (compile_unit.pc_range) |range| {
  21d5b5:	eb 02                	jmp    21d5b9 <findCompileUnit+0x1a9>
  21d5b7:	eb 00                	jmp    21d5b9 <findCompileUnit+0x1a9>
  21d5b9:	48 8d 7d b0          	lea    rdi,[rbp-0x50]
  21d5bd:	b8 55 00 00 00       	mov    eax,0x55
  21d5c2:	89 c1                	mov    ecx,eax
        if (compile_unit.die.getAttrSecOffset(DW.AT_ranges)) |ranges_offset| {
  21d5c4:	48 8b 95 d8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x128]
  21d5cb:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  21d5cf:	48 8b b5 80 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x180]
  21d5d6:	e8 75 39 00 00       	call   220f50 <Die_getAttrSecOffset>
  21d5db:	66 83 7d b0 00       	cmp    WORD PTR [rbp-0x50],0x0
  21d5e0:	0f 85 c5 02 00 00    	jne    21d8ab <findCompileUnit+0x49b>
  21d5e6:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21d5ea:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
            var base_address: usize = 0;
  21d5f1:	48 c7 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],0x0
  21d5f8:	00 00 00 00 
            if (st.debug_ranges) |debug_ranges| {
  21d5fc:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  21d603:	48 89 c1             	mov    rcx,rax
  21d606:	48 81 c1 80 00 00 00 	add    rcx,0x80
  21d60d:	48 83 b8 80 00 00 00 	cmp    QWORD PTR [rax+0x80],0x0
  21d614:	00 
  21d615:	48 89 8d 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rcx
  21d61c:	0f 84 85 02 00 00    	je     21d8a7 <findCompileUnit+0x497>
  21d622:	48 8b 85 50 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b0]
  21d629:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  21d62c:	48 89 8d a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rcx
                try st.self_exe_file.seekTo(debug_ranges.offset + ranges_offset);
  21d633:	48 8b b5 00 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x100]
  21d63a:	48 8b 8d a8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x158]
  21d641:	48 8b 49 18          	mov    rcx,QWORD PTR [rcx+0x18]
  21d645:	48 03 8d b8 fe ff ff 	add    rcx,QWORD PTR [rbp-0x148]
  21d64c:	0f 92 c2             	setb   dl
  21d64f:	48 89 b5 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rsi
  21d656:	48 89 8d 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rcx
  21d65d:	88 95 3f fe ff ff    	mov    BYTE PTR [rbp-0x1c1],dl
  21d663:	0f 82 fe 02 00 00    	jb     21d967 <findCompileUnit+0x557>
  21d669:	e9 09 03 00 00       	jmp    21d977 <findCompileUnit+0x567>
  21d66e:	66 8b 45 9e          	mov    ax,WORD PTR [rbp-0x62]
  21d672:	48 8b bd 80 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x180]
  21d679:	66 89 85 3c fe ff ff 	mov    WORD PTR [rbp-0x1c4],ax
  21d680:	e8 0b e6 fe ff       	call   20bc90 <__zig_return_error>
  21d685:	66 8b 85 3c fe ff ff 	mov    ax,WORD PTR [rbp-0x1c4]
  21d68c:	66 89 45 88          	mov    WORD PTR [rbp-0x78],ax
  21d690:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  21d694:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
  21d69b:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21d69e:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  21d6a2:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21d6a6:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
  21d6ad:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  21d6b4:	5d                   	pop    rbp
  21d6b5:	c3                   	ret    
                while (true) {
  21d6b6:	eb 00                	jmp    21d6b8 <findCompileUnit+0x2a8>
  21d6b8:	48 8d bd 78 ff ff ff 	lea    rdi,[rbp-0x88]
                    const begin_addr = try in_stream.readIntLe(usize);
  21d6bf:	48 8b 95 e0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x120]
  21d6c6:	48 8b b5 80 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x180]
  21d6cd:	e8 5e 3a 00 00       	call   221130 <InStream(ReadError)_readIntLe.64>
  21d6d2:	66 83 bd 78 ff ff ff 	cmp    WORD PTR [rbp-0x88],0x0
  21d6d9:	00 
  21d6da:	74 54                	je     21d730 <findCompileUnit+0x320>
  21d6dc:	66 8b 85 78 ff ff ff 	mov    ax,WORD PTR [rbp-0x88]
  21d6e3:	48 8b bd 80 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x180]
  21d6ea:	66 89 85 3a fe ff ff 	mov    WORD PTR [rbp-0x1c6],ax
  21d6f1:	e8 9a e5 fe ff       	call   20bc90 <__zig_return_error>
  21d6f6:	66 8b 85 3a fe ff ff 	mov    ax,WORD PTR [rbp-0x1c6]
  21d6fd:	66 89 85 58 ff ff ff 	mov    WORD PTR [rbp-0xa8],ax
  21d704:	48 8b bd 58 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  21d70b:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
  21d712:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21d715:	48 8b bd 60 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  21d71c:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21d720:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
  21d727:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  21d72e:	5d                   	pop    rbp
  21d72f:	c3                   	ret    
  21d730:	48 8d bd 48 ff ff ff 	lea    rdi,[rbp-0xb8]
  21d737:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  21d73b:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
                    const end_addr = try in_stream.readIntLe(usize);
  21d742:	48 8b 95 e0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x120]
  21d749:	48 8b b5 80 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x180]
  21d750:	e8 db 39 00 00       	call   221130 <InStream(ReadError)_readIntLe.64>
  21d755:	66 83 bd 48 ff ff ff 	cmp    WORD PTR [rbp-0xb8],0x0
  21d75c:	00 
  21d75d:	74 54                	je     21d7b3 <findCompileUnit+0x3a3>
  21d75f:	66 8b 85 48 ff ff ff 	mov    ax,WORD PTR [rbp-0xb8]
  21d766:	48 8b bd 80 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x180]
  21d76d:	66 89 85 38 fe ff ff 	mov    WORD PTR [rbp-0x1c8],ax
  21d774:	e8 17 e5 fe ff       	call   20bc90 <__zig_return_error>
  21d779:	66 8b 85 38 fe ff ff 	mov    ax,WORD PTR [rbp-0x1c8]
  21d780:	66 89 85 28 ff ff ff 	mov    WORD PTR [rbp-0xd8],ax
  21d787:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  21d78e:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
  21d795:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21d798:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
  21d79f:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21d7a3:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
  21d7aa:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  21d7b1:	5d                   	pop    rbp
  21d7b2:	c3                   	ret    
  21d7b3:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  21d7ba:	48 89 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rax
                    if (begin_addr == 0 and end_addr == 0) {
  21d7c1:	48 83 bd a0 fe ff ff 	cmp    QWORD PTR [rbp-0x160],0x0
  21d7c8:	00 
  21d7c9:	0f 94 c1             	sete   cl
  21d7cc:	f6 c1 01             	test   cl,0x1
  21d7cf:	88 8d 37 fe ff ff    	mov    BYTE PTR [rbp-0x1c9],cl
  21d7d5:	75 02                	jne    21d7d9 <findCompileUnit+0x3c9>
  21d7d7:	eb 11                	jmp    21d7ea <findCompileUnit+0x3da>
  21d7d9:	48 83 bd 98 fe ff ff 	cmp    QWORD PTR [rbp-0x168],0x0
  21d7e0:	00 
  21d7e1:	0f 94 c0             	sete   al
  21d7e4:	88 85 37 fe ff ff    	mov    BYTE PTR [rbp-0x1c9],al
  21d7ea:	8a 85 37 fe ff ff    	mov    al,BYTE PTR [rbp-0x1c9]
  21d7f0:	a8 01                	test   al,0x1
  21d7f2:	75 02                	jne    21d7f6 <findCompileUnit+0x3e6>
  21d7f4:	eb 05                	jmp    21d7fb <findCompileUnit+0x3eb>
                        break;
  21d7f6:	e9 aa 00 00 00       	jmp    21d8a5 <findCompileUnit+0x495>
                    if (begin_addr == 0 and end_addr == 0) {
  21d7fb:	eb 00                	jmp    21d7fd <findCompileUnit+0x3ed>
                    if (begin_addr == @maxValue(usize)) {
  21d7fd:	48 83 bd a0 fe ff ff 	cmp    QWORD PTR [rbp-0x160],0xffffffffffffffff
  21d804:	ff 
  21d805:	75 13                	jne    21d81a <findCompileUnit+0x40a>
                        base_address = begin_addr;
  21d807:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
  21d80e:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
                        continue;
  21d815:	e9 9c fe ff ff       	jmp    21d6b6 <findCompileUnit+0x2a6>
                    if (begin_addr == @maxValue(usize)) {
  21d81a:	eb 00                	jmp    21d81c <findCompileUnit+0x40c>
                    if (target_address >= begin_addr and target_address < end_addr) {
  21d81c:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  21d823:	48 3b 85 a0 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x160]
  21d82a:	0f 93 c1             	setae  cl
  21d82d:	f6 c1 01             	test   cl,0x1
  21d830:	88 8d 36 fe ff ff    	mov    BYTE PTR [rbp-0x1ca],cl
  21d836:	75 02                	jne    21d83a <findCompileUnit+0x42a>
  21d838:	eb 17                	jmp    21d851 <findCompileUnit+0x441>
  21d83a:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  21d841:	48 3b 85 98 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x168]
  21d848:	0f 92 c1             	setb   cl
  21d84b:	88 8d 36 fe ff ff    	mov    BYTE PTR [rbp-0x1ca],cl
  21d851:	8a 85 36 fe ff ff    	mov    al,BYTE PTR [rbp-0x1ca]
  21d857:	a8 01                	test   al,0x1
  21d859:	75 02                	jne    21d85d <findCompileUnit+0x44d>
  21d85b:	eb 43                	jmp    21d8a0 <findCompileUnit+0x490>
                        return compile_unit;
  21d85d:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  21d864:	66 c7 85 18 ff ff ff 	mov    WORD PTR [rbp-0xe8],0x0
  21d86b:	00 00 
  21d86d:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
  21d874:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  21d87b:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
  21d882:	48 89 01             	mov    QWORD PTR [rcx],rax
  21d885:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21d88c:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21d890:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
  21d897:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  21d89e:	5d                   	pop    rbp
  21d89f:	c3                   	ret    
                while (true) {
  21d8a0:	e9 11 fe ff ff       	jmp    21d6b6 <findCompileUnit+0x2a6>
            if (st.debug_ranges) |debug_ranges| {
  21d8a5:	eb 02                	jmp    21d8a9 <findCompileUnit+0x499>
  21d8a7:	eb 00                	jmp    21d8a9 <findCompileUnit+0x499>
    for (st.compile_unit_list.toSlice()) |*compile_unit| {
  21d8a9:	eb 6d                	jmp    21d918 <findCompileUnit+0x508>
        if (compile_unit.die.getAttrSecOffset(DW.AT_ranges)) |ranges_offset| {
  21d8ab:	66 8b 45 b0          	mov    ax,WORD PTR [rbp-0x50]
  21d8af:	66 89 85 96 fe ff ff 	mov    WORD PTR [rbp-0x16a],ax
            if (err != error.MissingDebugInfo) return err;
  21d8b6:	66 83 bd 96 fe ff ff 	cmp    WORD PTR [rbp-0x16a],0x24
  21d8bd:	24 
  21d8be:	74 54                	je     21d914 <findCompileUnit+0x504>
  21d8c0:	66 8b 85 96 fe ff ff 	mov    ax,WORD PTR [rbp-0x16a]
  21d8c7:	48 8b bd 80 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x180]
  21d8ce:	66 89 85 34 fe ff ff 	mov    WORD PTR [rbp-0x1cc],ax
  21d8d5:	e8 b6 e3 fe ff       	call   20bc90 <__zig_return_error>
  21d8da:	66 8b 85 34 fe ff ff 	mov    ax,WORD PTR [rbp-0x1cc]
  21d8e1:	66 89 85 08 ff ff ff 	mov    WORD PTR [rbp-0xf8],ax
  21d8e8:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
  21d8ef:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
  21d8f6:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21d8f9:	48 8b bd 10 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf0]
  21d900:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21d904:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
  21d90b:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  21d912:	5d                   	pop    rbp
  21d913:	c3                   	ret    
  21d914:	eb 00                	jmp    21d916 <findCompileUnit+0x506>
            continue;
  21d916:	eb 00                	jmp    21d918 <findCompileUnit+0x508>
    for (st.compile_unit_list.toSlice()) |*compile_unit| {
  21d918:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
  21d91f:	48 83 c0 01          	add    rax,0x1
  21d923:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  21d92a:	e9 9c fb ff ff       	jmp    21d4cb <findCompileUnit+0xbb>
    return error.MissingDebugInfo;
  21d92f:	48 8b bd 80 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x180]
  21d936:	e8 55 e3 fe ff       	call   20bc90 <__zig_return_error>
  21d93b:	48 8b 3d 3e 2f fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe2f3e]        # 200880 <__unnamed_117>
  21d942:	48 8b 85 88 fe ff ff 	mov    rax,QWORD PTR [rbp-0x178]
  21d949:	48 89 38             	mov    QWORD PTR [rax],rdi
  21d94c:	48 8b 3d 35 2f fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe2f35]        # 200888 <__unnamed_117+0x8>
  21d953:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  21d957:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
  21d95e:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  21d965:	5d                   	pop    rbp
  21d966:	c3                   	ret    
  21d967:	48 8d 3d 5a 58 02 00 	lea    rdi,[rip+0x2585a]        # 2431c8 <__unnamed_4>
  21d96e:	31 c0                	xor    eax,eax
  21d970:	89 c6                	mov    esi,eax
                try st.self_exe_file.seekTo(debug_ranges.offset + ranges_offset);
  21d972:	e8 89 dc fe ff       	call   20b600 <panic>
  21d977:	48 8b bd 80 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x180]
  21d97e:	48 8b b5 48 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1b8]
  21d985:	48 8b 95 40 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1c0]
  21d98c:	e8 df 68 ff ff       	call   214270 <File_seekTo>
  21d991:	66 89 45 9e          	mov    WORD PTR [rbp-0x62],ax
  21d995:	66 83 7d 9e 00       	cmp    WORD PTR [rbp-0x62],0x0
  21d99a:	0f 85 ce fc ff ff    	jne    21d66e <findCompileUnit+0x25e>
  21d9a0:	e9 11 fd ff ff       	jmp    21d6b6 <findCompileUnit+0x2a6>
  21d9a5:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21d9ac:	00 00 00 00 

000000000021d9b0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.59>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  21d9b0:	55                   	push   rbp
  21d9b1:	48 89 e5             	mov    rbp,rsp
  21d9b4:	48 83 ec 20          	sub    rsp,0x20
  21d9b8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21d9bc:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
            return std.fmt.format(self, Error, self.writeFn, format, args);
  21d9c0:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21d9c4:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  21d9c8:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
  21d9cb:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  21d9cf:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  21d9d3:	e8 a8 3a 00 00       	call   221480 <format.67>
  21d9d8:	66 83 f8 00          	cmp    ax,0x0
  21d9dc:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
  21d9e0:	74 0b                	je     21d9ed <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.59+0x3d>
  21d9e2:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  21d9e6:	e8 a5 e2 fe ff       	call   20bc90 <__zig_return_error>
  21d9eb:	eb 02                	jmp    21d9ef <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.59+0x3f>
  21d9ed:	eb 00                	jmp    21d9ef <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.59+0x3f>
  21d9ef:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
  21d9f3:	48 83 c4 20          	add    rsp,0x20
  21d9f7:	5d                   	pop    rbp
  21d9f8:	c3                   	ret    
  21d9f9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

000000000021da00 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.60>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  21da00:	55                   	push   rbp
  21da01:	48 89 e5             	mov    rbp,rsp
  21da04:	48 83 ec 20          	sub    rsp,0x20
  21da08:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21da0c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
            return std.fmt.format(self, Error, self.writeFn, format, args);
  21da10:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21da14:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  21da18:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
  21da1b:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  21da1f:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  21da23:	e8 88 3b 00 00       	call   2215b0 <format.69>
  21da28:	66 83 f8 00          	cmp    ax,0x0
  21da2c:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
  21da30:	74 0b                	je     21da3d <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.60+0x3d>
  21da32:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  21da36:	e8 55 e2 fe ff       	call   20bc90 <__zig_return_error>
  21da3b:	eb 02                	jmp    21da3f <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.60+0x3f>
  21da3d:	eb 00                	jmp    21da3f <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.60+0x3f>
  21da3f:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
  21da43:	48 83 c4 20          	add    rsp,0x20
  21da47:	5d                   	pop    rbp
  21da48:	c3                   	ret    
  21da49:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

000000000021da50 <Die_getAttrString>:
    fn getAttrString(self: *const Die, st: *ElfStackTrace, id: u64) ![]u8 {
  21da50:	55                   	push   rbp
  21da51:	48 89 e5             	mov    rbp,rsp
  21da54:	48 81 ec c0 00 00 00 	sub    rsp,0xc0
  21da5b:	48 89 f8             	mov    rax,rdi
  21da5e:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
  21da62:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
  21da66:	4c 89 45 b0          	mov    QWORD PTR [rbp-0x50],r8
        const form_value = self.getAttr(id) orelse return error.MissingDebugInfo;
  21da6a:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  21da6e:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  21da72:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
  21da76:	48 89 cf             	mov    rdi,rcx
  21da79:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
  21da7d:	48 89 d6             	mov    rsi,rdx
  21da80:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  21da87:	e8 e4 89 ff ff       	call   216470 <Die_getAttr>
  21da8c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  21da90:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
  21da95:	75 3d                	jne    21dad4 <Die_getAttrString+0x84>
  21da97:	48 8b 7d 80          	mov    rdi,QWORD PTR [rbp-0x80]
  21da9b:	e8 f0 e1 fe ff       	call   20bc90 <__zig_return_error>
  21daa0:	48 8b 3d 81 b7 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffeb781]        # 209228 <__unnamed_118>
  21daa7:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  21daab:	48 89 38             	mov    QWORD PTR [rax],rdi
  21daae:	48 8b 3d 7b b7 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffeb77b]        # 209230 <__unnamed_118+0x8>
  21dab5:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  21dab9:	48 8b 3d 78 b7 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffeb778]        # 209238 <__unnamed_118+0x10>
  21dac0:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  21dac4:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  21dacb:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  21dad2:	5d                   	pop    rbp
  21dad3:	c3                   	ret    
  21dad4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21dad8:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  21dadf:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21dae6:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
        return switch (form_value.*) {
  21daea:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  21daee:	8a 51 18             	mov    dl,BYTE PTR [rcx+0x18]
  21daf1:	40 88 d6             	mov    sil,dl
  21daf4:	40 80 ee 09          	sub    sil,0x9
  21daf8:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
  21daff:	88 95 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],dl
  21db05:	40 88 b5 66 ff ff ff 	mov    BYTE PTR [rbp-0x9a],sil
  21db0c:	74 26                	je     21db34 <Die_getAttrString+0xe4>
  21db0e:	eb 00                	jmp    21db10 <Die_getAttrString+0xc0>
  21db10:	8a 85 67 ff ff ff    	mov    al,BYTE PTR [rbp-0x99]
  21db16:	24 0f                	and    al,0xf
  21db18:	2c 0a                	sub    al,0xa
  21db1a:	88 85 65 ff ff ff    	mov    BYTE PTR [rbp-0x9b],al
  21db20:	74 2c                	je     21db4e <Die_getAttrString+0xfe>
  21db22:	eb 00                	jmp    21db24 <Die_getAttrString+0xd4>
  21db24:	48 8d 05 15 b7 fe ff 	lea    rax,[rip+0xfffffffffffeb715]        # 209240 <__unnamed_119>
  21db2b:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  21db32:	eb 38                	jmp    21db6c <Die_getAttrString+0x11c>
            FormValue.String => |value| value,
  21db34:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  21db3b:	8a 48 18             	mov    cl,BYTE PTR [rax+0x18]
  21db3e:	80 e9 09             	sub    cl,0x9
  21db41:	88 8d 57 ff ff ff    	mov    BYTE PTR [rbp-0xa9],cl
  21db47:	74 75                	je     21dbbe <Die_getAttrString+0x16e>
  21db49:	e9 ac 00 00 00       	jmp    21dbfa <Die_getAttrString+0x1aa>
            FormValue.StrPtr => |offset| getString(st, offset),
  21db4e:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  21db55:	8a 48 18             	mov    cl,BYTE PTR [rax+0x18]
  21db58:	80 e9 0a             	sub    cl,0xa
  21db5b:	88 8d 56 ff ff ff    	mov    BYTE PTR [rbp-0xaa],cl
  21db61:	0f 84 a3 00 00 00    	je     21dc0a <Die_getAttrString+0x1ba>
  21db67:	e9 d1 00 00 00       	jmp    21dc3d <Die_getAttrString+0x1ed>
        return switch (form_value.*) {
  21db6c:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
  21db73:	66 83 38 00          	cmp    WORD PTR [rax],0x0
  21db77:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  21db7e:	74 0b                	je     21db8b <Die_getAttrString+0x13b>
  21db80:	48 8b 7d 80          	mov    rdi,QWORD PTR [rbp-0x80]
  21db84:	e8 07 e1 fe ff       	call   20bc90 <__zig_return_error>
  21db89:	eb 02                	jmp    21db8d <Die_getAttrString+0x13d>
  21db8b:	eb 00                	jmp    21db8d <Die_getAttrString+0x13d>
  21db8d:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  21db94:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  21db97:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
  21db9b:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  21db9e:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  21dba2:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  21dba6:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
  21dbaa:	48 89 4a 10          	mov    QWORD PTR [rdx+0x10],rcx
  21dbae:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  21dbb5:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  21dbbc:	5d                   	pop    rbp
  21dbbd:	c3                   	ret    
  21dbbe:	48 8d 45 c8          	lea    rax,[rbp-0x38]
            FormValue.String => |value| value,
  21dbc2:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  21dbc9:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
  21dbcc:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  21dbd0:	48 8b 51 08          	mov    rdx,QWORD PTR [rcx+0x8]
  21dbd4:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  21dbd8:	66 c7 45 c8 00 00    	mov    WORD PTR [rbp-0x38],0x0
  21dbde:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  21dbe2:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  21dbe6:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  21dbea:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
        return switch (form_value.*) {
  21dbee:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  21dbf5:	e9 72 ff ff ff       	jmp    21db6c <Die_getAttrString+0x11c>
  21dbfa:	48 8d 3d ff 59 02 00 	lea    rdi,[rip+0x259ff]        # 243600 <__unnamed_29>
  21dc01:	31 c0                	xor    eax,eax
  21dc03:	89 c6                	mov    esi,eax
            FormValue.String => |value| value,
  21dc05:	e8 f6 d9 fe ff       	call   20b600 <panic>
  21dc0a:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
            FormValue.StrPtr => |offset| getString(st, offset),
  21dc0e:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  21dc15:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  21dc18:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
  21dc1c:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  21dc20:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  21dc24:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  21dc28:	e8 b3 3a 00 00       	call   2216e0 <getString>
  21dc2d:	48 8d 45 e0          	lea    rax,[rbp-0x20]
        return switch (form_value.*) {
  21dc31:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  21dc38:	e9 2f ff ff ff       	jmp    21db6c <Die_getAttrString+0x11c>
  21dc3d:	48 8d 3d bc 59 02 00 	lea    rdi,[rip+0x259bc]        # 243600 <__unnamed_29>
  21dc44:	31 c0                	xor    eax,eax
  21dc46:	89 c6                	mov    esi,eax
            FormValue.StrPtr => |offset| getString(st, offset),
  21dc48:	e8 b3 d9 fe ff       	call   20b600 <panic>
  21dc4d:	0f 1f 00             	nop    DWORD PTR [rax]

000000000021dc50 <getLineNumberInfo>:
fn getLineNumberInfo(st: *ElfStackTrace, compile_unit: *const CompileUnit, target_address: usize) !LineInfo {
  21dc50:	55                   	push   rbp
  21dc51:	48 89 e5             	mov    rbp,rsp
  21dc54:	48 81 ec f0 16 00 00 	sub    rsp,0x16f0
  21dc5b:	48 89 f8             	mov    rax,rdi
  21dc5e:	4c 8d 4d e8          	lea    r9,[rbp-0x18]
  21dc62:	41 ba 1b 00 00 00    	mov    r10d,0x1b
  21dc68:	45 89 d3             	mov    r11d,r10d
  21dc6b:	48 89 95 f0 f0 ff ff 	mov    QWORD PTR [rbp-0xf10],rdx
  21dc72:	48 89 8d e8 f0 ff ff 	mov    QWORD PTR [rbp-0xf18],rcx
  21dc79:	4c 89 85 e0 f0 ff ff 	mov    QWORD PTR [rbp-0xf20],r8
    const compile_unit_cwd = try compile_unit.die.getAttrString(st, DW.AT_comp_dir);
  21dc80:	48 8b 8d e8 f0 ff ff 	mov    rcx,QWORD PTR [rbp-0xf18]
  21dc87:	48 8b 51 08          	mov    rdx,QWORD PTR [rcx+0x8]
  21dc8b:	48 8b 8d f0 f0 ff ff 	mov    rcx,QWORD PTR [rbp-0xf10]
  21dc92:	48 89 bd 60 ee ff ff 	mov    QWORD PTR [rbp-0x11a0],rdi
  21dc99:	4c 89 cf             	mov    rdi,r9
  21dc9c:	48 89 b5 58 ee ff ff 	mov    QWORD PTR [rbp-0x11a8],rsi
  21dca3:	4d 89 d8             	mov    r8,r11
  21dca6:	48 89 85 50 ee ff ff 	mov    QWORD PTR [rbp-0x11b0],rax
  21dcad:	e8 9e fd ff ff       	call   21da50 <Die_getAttrString>
  21dcb2:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  21dcb7:	74 5a                	je     21dd13 <getLineNumberInfo+0xc3>
  21dcb9:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  21dcbd:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21dcc4:	66 89 85 4e ee ff ff 	mov    WORD PTR [rbp-0x11b2],ax
  21dccb:	e8 c0 df fe ff       	call   20bc90 <__zig_return_error>
  21dcd0:	b9 30 00 00 00       	mov    ecx,0x30
  21dcd5:	89 ca                	mov    edx,ecx
  21dcd7:	48 8d 7d a0          	lea    rdi,[rbp-0x60]
  21dcdb:	66 8b 85 4e ee ff ff 	mov    ax,WORD PTR [rbp-0x11b2]
  21dce2:	66 89 45 a0          	mov    WORD PTR [rbp-0x60],ax
  21dce6:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21dced:	48 89 bd 40 ee ff ff 	mov    QWORD PTR [rbp-0x11c0],rdi
  21dcf4:	48 89 f7             	mov    rdi,rsi
  21dcf7:	48 8b b5 40 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11c0]
  21dcfe:	e8 fd 6b 01 00       	call   234900 <memcpy>
  21dd03:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21dd0a:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21dd11:	5d                   	pop    rbp
  21dd12:	c3                   	ret    
  21dd13:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21dd17:	48 89 85 d0 f0 ff ff 	mov    QWORD PTR [rbp-0xf30],rax
  21dd1e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21dd22:	48 89 85 d8 f0 ff ff 	mov    QWORD PTR [rbp-0xf28],rax
    const in_file = &st.self_exe_file;
  21dd29:	48 8b 85 f0 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xf10]
  21dd30:	48 89 85 c8 f0 ff ff 	mov    QWORD PTR [rbp-0xf38],rax
    const debug_line_end = st.debug_line.offset + st.debug_line.size;
  21dd37:	48 8b 85 f0 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xf10]
  21dd3e:	48 8b 40 78          	mov    rax,QWORD PTR [rax+0x78]
  21dd42:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  21dd46:	48 8b 8d f0 f0 ff ff 	mov    rcx,QWORD PTR [rbp-0xf10]
  21dd4d:	48 8b 49 78          	mov    rcx,QWORD PTR [rcx+0x78]
  21dd51:	48 03 41 20          	add    rax,QWORD PTR [rcx+0x20]
  21dd55:	0f 92 c2             	setb   dl
  21dd58:	48 89 85 38 ee ff ff 	mov    QWORD PTR [rbp-0x11c8],rax
  21dd5f:	88 95 37 ee ff ff    	mov    BYTE PTR [rbp-0x11c9],dl
  21dd65:	0f 82 3d 24 00 00    	jb     2201a8 <getLineNumberInfo+0x2558>
  21dd6b:	e9 48 24 00 00       	jmp    2201b8 <getLineNumberInfo+0x2568>
    while (this_offset < debug_line_end) : (this_index += 1) {
  21dd70:	48 8b 85 b8 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xf48]
  21dd77:	48 3b 85 c0 f0 ff ff 	cmp    rax,QWORD PTR [rbp-0xf40]
  21dd7e:	0f 83 dd 23 00 00    	jae    220161 <getLineNumberInfo+0x2511>
        try in_file.seekTo(this_offset);
  21dd84:	48 8b b5 c8 f0 ff ff 	mov    rsi,QWORD PTR [rbp-0xf38]
  21dd8b:	48 8b 95 b8 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf48]
  21dd92:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21dd99:	e8 d2 64 ff ff       	call   214270 <File_seekTo>
  21dd9e:	66 89 45 8e          	mov    WORD PTR [rbp-0x72],ax
  21dda2:	66 83 7d 8e 00       	cmp    WORD PTR [rbp-0x72],0x0
  21dda7:	74 60                	je     21de09 <getLineNumberInfo+0x1b9>
  21dda9:	66 8b 45 8e          	mov    ax,WORD PTR [rbp-0x72]
  21ddad:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21ddb4:	66 89 85 34 ee ff ff 	mov    WORD PTR [rbp-0x11cc],ax
  21ddbb:	e8 d0 de fe ff       	call   20bc90 <__zig_return_error>
  21ddc0:	b9 30 00 00 00       	mov    ecx,0x30
  21ddc5:	89 ca                	mov    edx,ecx
  21ddc7:	48 8d bd 58 ff ff ff 	lea    rdi,[rbp-0xa8]
  21ddce:	66 8b 85 34 ee ff ff 	mov    ax,WORD PTR [rbp-0x11cc]
  21ddd5:	66 89 85 58 ff ff ff 	mov    WORD PTR [rbp-0xa8],ax
  21dddc:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21dde3:	48 89 bd 28 ee ff ff 	mov    QWORD PTR [rbp-0x11d8],rdi
  21ddea:	48 89 f7             	mov    rdi,rsi
  21dded:	48 8b b5 28 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11d8]
  21ddf4:	e8 07 6b 01 00       	call   234900 <memcpy>
  21ddf9:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21de00:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21de07:	5d                   	pop    rbp
  21de08:	c3                   	ret    
  21de09:	48 8d bd 48 ff ff ff 	lea    rdi,[rbp-0xb8]
  21de10:	48 8d 85 97 f0 ff ff 	lea    rax,[rbp-0xf69]
  21de17:	be aa 00 00 00       	mov    esi,0xaa
  21de1c:	b9 01 00 00 00       	mov    ecx,0x1
  21de21:	89 ca                	mov    edx,ecx
        var is_64: bool = undefined;
  21de23:	49 89 c0             	mov    r8,rax
  21de26:	48 89 bd 20 ee ff ff 	mov    QWORD PTR [rbp-0x11e0],rdi
  21de2d:	4c 89 c7             	mov    rdi,r8
  21de30:	48 89 85 18 ee ff ff 	mov    QWORD PTR [rbp-0x11e8],rax
  21de37:	e8 74 6a 01 00       	call   2348b0 <memset>
        const unit_length = try readInitialLength(@typeOf(in_stream.readFn).ReturnType.ErrorSet, in_stream, &is_64);
  21de3c:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21de43:	48 8b bd 20 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11e0]
  21de4a:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21de51:	48 8b 8d 18 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x11e8]
  21de58:	e8 53 77 ff ff       	call   2155b0 <readInitialLength>
  21de5d:	66 83 bd 48 ff ff ff 	cmp    WORD PTR [rbp-0xb8],0x0
  21de64:	00 
  21de65:	74 63                	je     21deca <getLineNumberInfo+0x27a>
  21de67:	66 8b 85 48 ff ff ff 	mov    ax,WORD PTR [rbp-0xb8]
  21de6e:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21de75:	66 89 85 16 ee ff ff 	mov    WORD PTR [rbp-0x11ea],ax
  21de7c:	e8 0f de fe ff       	call   20bc90 <__zig_return_error>
  21de81:	b9 30 00 00 00       	mov    ecx,0x30
  21de86:	89 ca                	mov    edx,ecx
  21de88:	48 8d bd 08 ff ff ff 	lea    rdi,[rbp-0xf8]
  21de8f:	66 8b 85 16 ee ff ff 	mov    ax,WORD PTR [rbp-0x11ea]
  21de96:	66 89 85 08 ff ff ff 	mov    WORD PTR [rbp-0xf8],ax
  21de9d:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21dea4:	48 89 bd 08 ee ff ff 	mov    QWORD PTR [rbp-0x11f8],rdi
  21deab:	48 89 f7             	mov    rdi,rsi
  21deae:	48 8b b5 08 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11f8]
  21deb5:	e8 46 6a 01 00       	call   234900 <memcpy>
  21deba:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21dec1:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21dec8:	5d                   	pop    rbp
  21dec9:	c3                   	ret    
  21deca:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  21ded1:	48 89 85 88 f0 ff ff 	mov    QWORD PTR [rbp-0xf78],rax
        if (unit_length == 0) return error.MissingDebugInfo;
  21ded8:	48 83 bd 88 f0 ff ff 	cmp    QWORD PTR [rbp-0xf78],0x0
  21dedf:	00 
  21dee0:	75 47                	jne    21df29 <getLineNumberInfo+0x2d9>
  21dee2:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21dee9:	e8 a2 dd fe ff       	call   20bc90 <__zig_return_error>
  21deee:	48 8d 3d c3 b3 fe ff 	lea    rdi,[rip+0xfffffffffffeb3c3]        # 2092b8 <__unnamed_120>
  21def5:	b8 30 00 00 00       	mov    eax,0x30
  21defa:	89 c2                	mov    edx,eax
  21defc:	48 8b 8d 60 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x11a0]
  21df03:	48 89 bd 00 ee ff ff 	mov    QWORD PTR [rbp-0x1200],rdi
  21df0a:	48 89 cf             	mov    rdi,rcx
  21df0d:	48 8b b5 00 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x1200]
  21df14:	e8 e7 69 01 00       	call   234900 <memcpy>
  21df19:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21df20:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21df27:	5d                   	pop    rbp
  21df28:	c3                   	ret    
  21df29:	eb 00                	jmp    21df2b <getLineNumberInfo+0x2db>
        const next_offset = unit_length + (if (is_64) usize(12) else usize(4));
  21df2b:	48 8b 85 88 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xf78]
  21df32:	f6 85 97 f0 ff ff 01 	test   BYTE PTR [rbp-0xf69],0x1
  21df39:	48 89 85 f8 ed ff ff 	mov    QWORD PTR [rbp-0x1208],rax
  21df40:	75 02                	jne    21df44 <getLineNumberInfo+0x2f4>
  21df42:	eb 10                	jmp    21df54 <getLineNumberInfo+0x304>
  21df44:	b8 0c 00 00 00       	mov    eax,0xc
  21df49:	89 c1                	mov    ecx,eax
  21df4b:	48 89 8d f0 ed ff ff 	mov    QWORD PTR [rbp-0x1210],rcx
  21df52:	eb 10                	jmp    21df64 <getLineNumberInfo+0x314>
  21df54:	b8 04 00 00 00       	mov    eax,0x4
  21df59:	89 c1                	mov    ecx,eax
  21df5b:	48 89 8d f0 ed ff ff 	mov    QWORD PTR [rbp-0x1210],rcx
  21df62:	eb 00                	jmp    21df64 <getLineNumberInfo+0x314>
  21df64:	48 8b 85 f0 ed ff ff 	mov    rax,QWORD PTR [rbp-0x1210]
  21df6b:	48 8b 8d f8 ed ff ff 	mov    rcx,QWORD PTR [rbp-0x1208]
  21df72:	48 01 c1             	add    rcx,rax
  21df75:	0f 92 c2             	setb   dl
  21df78:	48 89 8d e8 ed ff ff 	mov    QWORD PTR [rbp-0x1218],rcx
  21df7f:	88 95 e7 ed ff ff    	mov    BYTE PTR [rbp-0x1219],dl
  21df85:	0f 82 99 22 00 00    	jb     220224 <getLineNumberInfo+0x25d4>
  21df8b:	e9 a4 22 00 00       	jmp    220234 <getLineNumberInfo+0x25e4>
            this_offset += next_offset;
  21df90:	48 8b 85 b8 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xf48]
  21df97:	48 03 85 80 f0 ff ff 	add    rax,QWORD PTR [rbp-0xf80]
  21df9e:	0f 92 c1             	setb   cl
  21dfa1:	48 89 85 d8 ed ff ff 	mov    QWORD PTR [rbp-0x1228],rax
  21dfa8:	88 8d d7 ed ff ff    	mov    BYTE PTR [rbp-0x1229],cl
  21dfae:	0f 82 ab 22 00 00    	jb     22025f <getLineNumberInfo+0x260f>
  21dfb4:	e9 b6 22 00 00       	jmp    22026f <getLineNumberInfo+0x261f>
        if (compile_unit.index != this_index) {
  21dfb9:	eb 00                	jmp    21dfbb <getLineNumberInfo+0x36b>
  21dfbb:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
        const version = try in_stream.readInt(st.elf.endian, u16);
  21dfc2:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21dfc9:	48 8b 8d f0 f0 ff ff 	mov    rcx,QWORD PTR [rbp-0xf10]
  21dfd0:	40 8a 71 12          	mov    sil,BYTE PTR [rcx+0x12]
  21dfd4:	40 0f b6 ce          	movzx  ecx,sil
  21dfd8:	48 8d bd 00 ff ff ff 	lea    rdi,[rbp-0x100]
  21dfdf:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21dfe6:	48 89 85 c8 ed ff ff 	mov    QWORD PTR [rbp-0x1238],rax
  21dfed:	e8 3e 5d ff ff       	call   213d30 <InStream(ReadError)_readInt>
  21dff2:	66 83 bd 00 ff ff ff 	cmp    WORD PTR [rbp-0x100],0x0
  21dff9:	00 
  21dffa:	74 63                	je     21e05f <getLineNumberInfo+0x40f>
  21dffc:	66 8b 85 00 ff ff ff 	mov    ax,WORD PTR [rbp-0x100]
  21e003:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e00a:	66 89 85 c6 ed ff ff 	mov    WORD PTR [rbp-0x123a],ax
  21e011:	e8 7a dc fe ff       	call   20bc90 <__zig_return_error>
  21e016:	b9 30 00 00 00       	mov    ecx,0x30
  21e01b:	89 ca                	mov    edx,ecx
  21e01d:	48 8d bd c8 fe ff ff 	lea    rdi,[rbp-0x138]
  21e024:	66 8b 85 c6 ed ff ff 	mov    ax,WORD PTR [rbp-0x123a]
  21e02b:	66 89 85 c8 fe ff ff 	mov    WORD PTR [rbp-0x138],ax
  21e032:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21e039:	48 89 bd b8 ed ff ff 	mov    QWORD PTR [rbp-0x1248],rdi
  21e040:	48 89 f7             	mov    rdi,rsi
  21e043:	48 8b b5 b8 ed ff ff 	mov    rsi,QWORD PTR [rbp-0x1248]
  21e04a:	e8 b1 68 01 00       	call   234900 <memcpy>
  21e04f:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21e056:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21e05d:	5d                   	pop    rbp
  21e05e:	c3                   	ret    
  21e05f:	66 8b 85 02 ff ff ff 	mov    ax,WORD PTR [rbp-0xfe]
  21e066:	66 89 85 7e f0 ff ff 	mov    WORD PTR [rbp-0xf82],ax
        if (version != 2 and version != 4) return error.InvalidDebugInfo;
  21e06d:	66 83 bd 7e f0 ff ff 	cmp    WORD PTR [rbp-0xf82],0x2
  21e074:	02 
  21e075:	0f 95 c1             	setne  cl
  21e078:	f6 c1 01             	test   cl,0x1
  21e07b:	88 8d b7 ed ff ff    	mov    BYTE PTR [rbp-0x1249],cl
  21e081:	75 02                	jne    21e085 <getLineNumberInfo+0x435>
  21e083:	eb 11                	jmp    21e096 <getLineNumberInfo+0x446>
  21e085:	66 83 bd 7e f0 ff ff 	cmp    WORD PTR [rbp-0xf82],0x4
  21e08c:	04 
  21e08d:	0f 95 c0             	setne  al
  21e090:	88 85 b7 ed ff ff    	mov    BYTE PTR [rbp-0x1249],al
  21e096:	8a 85 b7 ed ff ff    	mov    al,BYTE PTR [rbp-0x1249]
  21e09c:	a8 01                	test   al,0x1
  21e09e:	75 02                	jne    21e0a2 <getLineNumberInfo+0x452>
  21e0a0:	eb 47                	jmp    21e0e9 <getLineNumberInfo+0x499>
  21e0a2:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e0a9:	e8 e2 db fe ff       	call   20bc90 <__zig_return_error>
  21e0ae:	48 8d 3d 33 b2 fe ff 	lea    rdi,[rip+0xfffffffffffeb233]        # 2092e8 <__unnamed_121>
  21e0b5:	b8 30 00 00 00       	mov    eax,0x30
  21e0ba:	89 c2                	mov    edx,eax
  21e0bc:	48 8b 8d 60 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x11a0]
  21e0c3:	48 89 bd a8 ed ff ff 	mov    QWORD PTR [rbp-0x1258],rdi
  21e0ca:	48 89 cf             	mov    rdi,rcx
  21e0cd:	48 8b b5 a8 ed ff ff 	mov    rsi,QWORD PTR [rbp-0x1258]
  21e0d4:	e8 27 68 01 00       	call   234900 <memcpy>
  21e0d9:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21e0e0:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21e0e7:	5d                   	pop    rbp
  21e0e8:	c3                   	ret    
  21e0e9:	eb 00                	jmp    21e0eb <getLineNumberInfo+0x49b>
        const prologue_length = if (is_64) try in_stream.readInt(st.elf.endian, u64) else try in_stream.readInt(st.elf.endian, u32);
  21e0eb:	f6 85 97 f0 ff ff 01 	test   BYTE PTR [rbp-0xf69],0x1
  21e0f2:	75 05                	jne    21e0f9 <getLineNumberInfo+0x4a9>
  21e0f4:	e9 b7 00 00 00       	jmp    21e1b0 <getLineNumberInfo+0x560>
  21e0f9:	48 8d 85 b8 fe ff ff 	lea    rax,[rbp-0x148]
  21e100:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21e107:	48 8b 8d f0 f0 ff ff 	mov    rcx,QWORD PTR [rbp-0xf10]
  21e10e:	40 8a 71 12          	mov    sil,BYTE PTR [rcx+0x12]
  21e112:	40 0f b6 ce          	movzx  ecx,sil
  21e116:	48 8d bd b8 fe ff ff 	lea    rdi,[rbp-0x148]
  21e11d:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21e124:	48 89 85 a0 ed ff ff 	mov    QWORD PTR [rbp-0x1260],rax
  21e12b:	e8 20 5e ff ff       	call   213f50 <InStream(ReadError)_readInt.33>
  21e130:	66 83 bd b8 fe ff ff 	cmp    WORD PTR [rbp-0x148],0x0
  21e137:	00 
  21e138:	74 63                	je     21e19d <getLineNumberInfo+0x54d>
  21e13a:	66 8b 85 b8 fe ff ff 	mov    ax,WORD PTR [rbp-0x148]
  21e141:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e148:	66 89 85 9e ed ff ff 	mov    WORD PTR [rbp-0x1262],ax
  21e14f:	e8 3c db fe ff       	call   20bc90 <__zig_return_error>
  21e154:	b9 30 00 00 00       	mov    ecx,0x30
  21e159:	89 ca                	mov    edx,ecx
  21e15b:	48 8d bd 78 fe ff ff 	lea    rdi,[rbp-0x188]
  21e162:	66 8b 85 9e ed ff ff 	mov    ax,WORD PTR [rbp-0x1262]
  21e169:	66 89 85 78 fe ff ff 	mov    WORD PTR [rbp-0x188],ax
  21e170:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21e177:	48 89 bd 90 ed ff ff 	mov    QWORD PTR [rbp-0x1270],rdi
  21e17e:	48 89 f7             	mov    rdi,rsi
  21e181:	48 8b b5 90 ed ff ff 	mov    rsi,QWORD PTR [rbp-0x1270]
  21e188:	e8 73 67 01 00       	call   234900 <memcpy>
  21e18d:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21e194:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21e19b:	5d                   	pop    rbp
  21e19c:	c3                   	ret    
  21e19d:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  21e1a4:	48 89 85 88 ed ff ff 	mov    QWORD PTR [rbp-0x1278],rax
  21e1ab:	e9 b3 00 00 00       	jmp    21e263 <getLineNumberInfo+0x613>
  21e1b0:	48 8d 85 70 fe ff ff 	lea    rax,[rbp-0x190]
  21e1b7:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21e1be:	48 8b 8d f0 f0 ff ff 	mov    rcx,QWORD PTR [rbp-0xf10]
  21e1c5:	40 8a 71 12          	mov    sil,BYTE PTR [rcx+0x12]
  21e1c9:	40 0f b6 ce          	movzx  ecx,sil
  21e1cd:	48 8d bd 70 fe ff ff 	lea    rdi,[rbp-0x190]
  21e1d4:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21e1db:	48 89 85 80 ed ff ff 	mov    QWORD PTR [rbp-0x1280],rax
  21e1e2:	e8 59 5c ff ff       	call   213e40 <InStream(ReadError)_readInt.32>
  21e1e7:	66 83 bd 70 fe ff ff 	cmp    WORD PTR [rbp-0x190],0x0
  21e1ee:	00 
  21e1ef:	74 63                	je     21e254 <getLineNumberInfo+0x604>
  21e1f1:	66 8b 85 70 fe ff ff 	mov    ax,WORD PTR [rbp-0x190]
  21e1f8:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e1ff:	66 89 85 7e ed ff ff 	mov    WORD PTR [rbp-0x1282],ax
  21e206:	e8 85 da fe ff       	call   20bc90 <__zig_return_error>
  21e20b:	b9 30 00 00 00       	mov    ecx,0x30
  21e210:	89 ca                	mov    edx,ecx
  21e212:	48 8d bd 38 fe ff ff 	lea    rdi,[rbp-0x1c8]
  21e219:	66 8b 85 7e ed ff ff 	mov    ax,WORD PTR [rbp-0x1282]
  21e220:	66 89 85 38 fe ff ff 	mov    WORD PTR [rbp-0x1c8],ax
  21e227:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21e22e:	48 89 bd 70 ed ff ff 	mov    QWORD PTR [rbp-0x1290],rdi
  21e235:	48 89 f7             	mov    rdi,rsi
  21e238:	48 8b b5 70 ed ff ff 	mov    rsi,QWORD PTR [rbp-0x1290]
  21e23f:	e8 bc 66 01 00       	call   234900 <memcpy>
  21e244:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21e24b:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21e252:	5d                   	pop    rbp
  21e253:	c3                   	ret    
  21e254:	8b 85 74 fe ff ff    	mov    eax,DWORD PTR [rbp-0x18c]
  21e25a:	89 c1                	mov    ecx,eax
  21e25c:	48 89 8d 88 ed ff ff 	mov    QWORD PTR [rbp-0x1278],rcx
  21e263:	48 8b 85 88 ed ff ff 	mov    rax,QWORD PTR [rbp-0x1278]
  21e26a:	48 8d bd 28 fe ff ff 	lea    rdi,[rbp-0x1d8]
  21e271:	48 89 85 70 f0 ff ff 	mov    QWORD PTR [rbp-0xf90],rax
        const prog_start_offset = (try in_file.getPos()) + prologue_length;
  21e278:	48 8b 95 c8 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf38]
  21e27f:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21e286:	e8 65 74 ff ff       	call   2156f0 <File_getPos>
  21e28b:	66 83 bd 28 fe ff ff 	cmp    WORD PTR [rbp-0x1d8],0x0
  21e292:	00 
  21e293:	74 63                	je     21e2f8 <getLineNumberInfo+0x6a8>
  21e295:	66 8b 85 28 fe ff ff 	mov    ax,WORD PTR [rbp-0x1d8]
  21e29c:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e2a3:	66 89 85 6e ed ff ff 	mov    WORD PTR [rbp-0x1292],ax
  21e2aa:	e8 e1 d9 fe ff       	call   20bc90 <__zig_return_error>
  21e2af:	b9 30 00 00 00       	mov    ecx,0x30
  21e2b4:	89 ca                	mov    edx,ecx
  21e2b6:	48 8d bd e8 fd ff ff 	lea    rdi,[rbp-0x218]
  21e2bd:	66 8b 85 6e ed ff ff 	mov    ax,WORD PTR [rbp-0x1292]
  21e2c4:	66 89 85 e8 fd ff ff 	mov    WORD PTR [rbp-0x218],ax
  21e2cb:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21e2d2:	48 89 bd 60 ed ff ff 	mov    QWORD PTR [rbp-0x12a0],rdi
  21e2d9:	48 89 f7             	mov    rdi,rsi
  21e2dc:	48 8b b5 60 ed ff ff 	mov    rsi,QWORD PTR [rbp-0x12a0]
  21e2e3:	e8 18 66 01 00       	call   234900 <memcpy>
  21e2e8:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21e2ef:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21e2f6:	5d                   	pop    rbp
  21e2f7:	c3                   	ret    
  21e2f8:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  21e2ff:	48 03 85 70 f0 ff ff 	add    rax,QWORD PTR [rbp-0xf90]
  21e306:	0f 92 c1             	setb   cl
  21e309:	48 89 85 58 ed ff ff 	mov    QWORD PTR [rbp-0x12a8],rax
  21e310:	88 8d 57 ed ff ff    	mov    BYTE PTR [rbp-0x12a9],cl
  21e316:	0f 82 66 1f 00 00    	jb     220282 <getLineNumberInfo+0x2632>
  21e31c:	e9 71 1f 00 00       	jmp    220292 <getLineNumberInfo+0x2642>
        const minimum_instruction_length = try in_stream.readByte();
  21e321:	66 8b 85 e0 fd ff ff 	mov    ax,WORD PTR [rbp-0x220]
  21e328:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e32f:	66 89 85 54 ed ff ff 	mov    WORD PTR [rbp-0x12ac],ax
  21e336:	e8 55 d9 fe ff       	call   20bc90 <__zig_return_error>
  21e33b:	b9 30 00 00 00       	mov    ecx,0x30
  21e340:	89 ca                	mov    edx,ecx
  21e342:	48 8d bd a8 fd ff ff 	lea    rdi,[rbp-0x258]
  21e349:	66 8b 85 54 ed ff ff 	mov    ax,WORD PTR [rbp-0x12ac]
  21e350:	66 89 85 a8 fd ff ff 	mov    WORD PTR [rbp-0x258],ax
  21e357:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21e35e:	48 89 bd 48 ed ff ff 	mov    QWORD PTR [rbp-0x12b8],rdi
  21e365:	48 89 f7             	mov    rdi,rsi
  21e368:	48 8b b5 48 ed ff ff 	mov    rsi,QWORD PTR [rbp-0x12b8]
  21e36f:	e8 8c 65 01 00       	call   234900 <memcpy>
  21e374:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21e37b:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21e382:	5d                   	pop    rbp
  21e383:	c3                   	ret    
  21e384:	8a 85 e2 fd ff ff    	mov    al,BYTE PTR [rbp-0x21e]
  21e38a:	88 85 67 f0 ff ff    	mov    BYTE PTR [rbp-0xf99],al
        if (minimum_instruction_length == 0) return error.InvalidDebugInfo;
  21e390:	80 bd 67 f0 ff ff 00 	cmp    BYTE PTR [rbp-0xf99],0x0
  21e397:	75 47                	jne    21e3e0 <getLineNumberInfo+0x790>
  21e399:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e3a0:	e8 eb d8 fe ff       	call   20bc90 <__zig_return_error>
  21e3a5:	48 8d 3d 6c af fe ff 	lea    rdi,[rip+0xfffffffffffeaf6c]        # 209318 <__unnamed_122>
  21e3ac:	b8 30 00 00 00       	mov    eax,0x30
  21e3b1:	89 c2                	mov    edx,eax
  21e3b3:	48 8b 8d 60 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x11a0]
  21e3ba:	48 89 bd 40 ed ff ff 	mov    QWORD PTR [rbp-0x12c0],rdi
  21e3c1:	48 89 cf             	mov    rdi,rcx
  21e3c4:	48 8b b5 40 ed ff ff 	mov    rsi,QWORD PTR [rbp-0x12c0]
  21e3cb:	e8 30 65 01 00       	call   234900 <memcpy>
  21e3d0:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21e3d7:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21e3de:	5d                   	pop    rbp
  21e3df:	c3                   	ret    
  21e3e0:	eb 00                	jmp    21e3e2 <getLineNumberInfo+0x792>
        if (version >= 4) {
  21e3e2:	66 83 bd 7e f0 ff ff 	cmp    WORD PTR [rbp-0xf82],0x4
  21e3e9:	04 
  21e3ea:	0f 82 89 00 00 00    	jb     21e479 <getLineNumberInfo+0x829>
  21e3f0:	48 8d bd a0 fd ff ff 	lea    rdi,[rbp-0x260]
            _ = try in_stream.readByte();
  21e3f7:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21e3fe:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21e405:	e8 36 57 ff ff       	call   213b40 <InStream(ReadError)_readByte>
  21e40a:	66 83 bd a0 fd ff ff 	cmp    WORD PTR [rbp-0x260],0x0
  21e411:	00 
  21e412:	74 63                	je     21e477 <getLineNumberInfo+0x827>
  21e414:	66 8b 85 a0 fd ff ff 	mov    ax,WORD PTR [rbp-0x260]
  21e41b:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e422:	66 89 85 3e ed ff ff 	mov    WORD PTR [rbp-0x12c2],ax
  21e429:	e8 62 d8 fe ff       	call   20bc90 <__zig_return_error>
  21e42e:	b9 30 00 00 00       	mov    ecx,0x30
  21e433:	89 ca                	mov    edx,ecx
  21e435:	48 8d bd 68 fd ff ff 	lea    rdi,[rbp-0x298]
  21e43c:	66 8b 85 3e ed ff ff 	mov    ax,WORD PTR [rbp-0x12c2]
  21e443:	66 89 85 68 fd ff ff 	mov    WORD PTR [rbp-0x298],ax
  21e44a:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21e451:	48 89 bd 30 ed ff ff 	mov    QWORD PTR [rbp-0x12d0],rdi
  21e458:	48 89 f7             	mov    rdi,rsi
  21e45b:	48 8b b5 30 ed ff ff 	mov    rsi,QWORD PTR [rbp-0x12d0]
  21e462:	e8 99 64 01 00       	call   234900 <memcpy>
  21e467:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21e46e:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21e475:	5d                   	pop    rbp
  21e476:	c3                   	ret    
        if (version >= 4) {
  21e477:	eb 02                	jmp    21e47b <getLineNumberInfo+0x82b>
  21e479:	eb 00                	jmp    21e47b <getLineNumberInfo+0x82b>
  21e47b:	48 8d bd 60 fd ff ff 	lea    rdi,[rbp-0x2a0]
        const default_is_stmt = (try in_stream.readByte()) != 0;
  21e482:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21e489:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21e490:	e8 ab 56 ff ff       	call   213b40 <InStream(ReadError)_readByte>
  21e495:	66 83 bd 60 fd ff ff 	cmp    WORD PTR [rbp-0x2a0],0x0
  21e49c:	00 
  21e49d:	74 63                	je     21e502 <getLineNumberInfo+0x8b2>
  21e49f:	66 8b 85 60 fd ff ff 	mov    ax,WORD PTR [rbp-0x2a0]
  21e4a6:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e4ad:	66 89 85 2e ed ff ff 	mov    WORD PTR [rbp-0x12d2],ax
  21e4b4:	e8 d7 d7 fe ff       	call   20bc90 <__zig_return_error>
  21e4b9:	b9 30 00 00 00       	mov    ecx,0x30
  21e4be:	89 ca                	mov    edx,ecx
  21e4c0:	48 8d bd 28 fd ff ff 	lea    rdi,[rbp-0x2d8]
  21e4c7:	66 8b 85 2e ed ff ff 	mov    ax,WORD PTR [rbp-0x12d2]
  21e4ce:	66 89 85 28 fd ff ff 	mov    WORD PTR [rbp-0x2d8],ax
  21e4d5:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21e4dc:	48 89 bd 20 ed ff ff 	mov    QWORD PTR [rbp-0x12e0],rdi
  21e4e3:	48 89 f7             	mov    rdi,rsi
  21e4e6:	48 8b b5 20 ed ff ff 	mov    rsi,QWORD PTR [rbp-0x12e0]
  21e4ed:	e8 0e 64 01 00       	call   234900 <memcpy>
  21e4f2:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21e4f9:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21e500:	5d                   	pop    rbp
  21e501:	c3                   	ret    
  21e502:	48 8d bd 20 fd ff ff 	lea    rdi,[rbp-0x2e0]
  21e509:	80 bd 62 fd ff ff 00 	cmp    BYTE PTR [rbp-0x29e],0x0
  21e510:	0f 95 c0             	setne  al
  21e513:	24 01                	and    al,0x1
  21e515:	88 85 66 f0 ff ff    	mov    BYTE PTR [rbp-0xf9a],al
        const line_base = try in_stream.readByteSigned();
  21e51b:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21e522:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21e529:	e8 f2 3e 00 00       	call   222420 <InStream(ReadError)_readByteSigned>
  21e52e:	66 83 bd 20 fd ff ff 	cmp    WORD PTR [rbp-0x2e0],0x0
  21e535:	00 
  21e536:	74 63                	je     21e59b <getLineNumberInfo+0x94b>
  21e538:	66 8b 85 20 fd ff ff 	mov    ax,WORD PTR [rbp-0x2e0]
  21e53f:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e546:	66 89 85 1e ed ff ff 	mov    WORD PTR [rbp-0x12e2],ax
  21e54d:	e8 3e d7 fe ff       	call   20bc90 <__zig_return_error>
  21e552:	b9 30 00 00 00       	mov    ecx,0x30
  21e557:	89 ca                	mov    edx,ecx
  21e559:	48 8d bd e8 fc ff ff 	lea    rdi,[rbp-0x318]
  21e560:	66 8b 85 1e ed ff ff 	mov    ax,WORD PTR [rbp-0x12e2]
  21e567:	66 89 85 e8 fc ff ff 	mov    WORD PTR [rbp-0x318],ax
  21e56e:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21e575:	48 89 bd 10 ed ff ff 	mov    QWORD PTR [rbp-0x12f0],rdi
  21e57c:	48 89 f7             	mov    rdi,rsi
  21e57f:	48 8b b5 10 ed ff ff 	mov    rsi,QWORD PTR [rbp-0x12f0]
  21e586:	e8 75 63 01 00       	call   234900 <memcpy>
  21e58b:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21e592:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21e599:	5d                   	pop    rbp
  21e59a:	c3                   	ret    
  21e59b:	48 8d bd e0 fc ff ff 	lea    rdi,[rbp-0x320]
  21e5a2:	8a 85 22 fd ff ff    	mov    al,BYTE PTR [rbp-0x2de]
  21e5a8:	88 85 65 f0 ff ff    	mov    BYTE PTR [rbp-0xf9b],al
        const line_range = try in_stream.readByte();
  21e5ae:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21e5b5:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21e5bc:	e8 7f 55 ff ff       	call   213b40 <InStream(ReadError)_readByte>
  21e5c1:	66 83 bd e0 fc ff ff 	cmp    WORD PTR [rbp-0x320],0x0
  21e5c8:	00 
  21e5c9:	74 63                	je     21e62e <getLineNumberInfo+0x9de>
  21e5cb:	66 8b 85 e0 fc ff ff 	mov    ax,WORD PTR [rbp-0x320]
  21e5d2:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e5d9:	66 89 85 0e ed ff ff 	mov    WORD PTR [rbp-0x12f2],ax
  21e5e0:	e8 ab d6 fe ff       	call   20bc90 <__zig_return_error>
  21e5e5:	b9 30 00 00 00       	mov    ecx,0x30
  21e5ea:	89 ca                	mov    edx,ecx
  21e5ec:	48 8d bd a8 fc ff ff 	lea    rdi,[rbp-0x358]
  21e5f3:	66 8b 85 0e ed ff ff 	mov    ax,WORD PTR [rbp-0x12f2]
  21e5fa:	66 89 85 a8 fc ff ff 	mov    WORD PTR [rbp-0x358],ax
  21e601:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21e608:	48 89 bd 00 ed ff ff 	mov    QWORD PTR [rbp-0x1300],rdi
  21e60f:	48 89 f7             	mov    rdi,rsi
  21e612:	48 8b b5 00 ed ff ff 	mov    rsi,QWORD PTR [rbp-0x1300]
  21e619:	e8 e2 62 01 00       	call   234900 <memcpy>
  21e61e:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21e625:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21e62c:	5d                   	pop    rbp
  21e62d:	c3                   	ret    
  21e62e:	8a 85 e2 fc ff ff    	mov    al,BYTE PTR [rbp-0x31e]
  21e634:	88 85 64 f0 ff ff    	mov    BYTE PTR [rbp-0xf9c],al
        if (line_range == 0) return error.InvalidDebugInfo;
  21e63a:	80 bd 64 f0 ff ff 00 	cmp    BYTE PTR [rbp-0xf9c],0x0
  21e641:	75 47                	jne    21e68a <getLineNumberInfo+0xa3a>
  21e643:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e64a:	e8 41 d6 fe ff       	call   20bc90 <__zig_return_error>
  21e64f:	48 8d 3d f2 ac fe ff 	lea    rdi,[rip+0xfffffffffffeacf2]        # 209348 <__unnamed_123>
  21e656:	b8 30 00 00 00       	mov    eax,0x30
  21e65b:	89 c2                	mov    edx,eax
  21e65d:	48 8b 8d 60 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x11a0]
  21e664:	48 89 bd f8 ec ff ff 	mov    QWORD PTR [rbp-0x1308],rdi
  21e66b:	48 89 cf             	mov    rdi,rcx
  21e66e:	48 8b b5 f8 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x1308]
  21e675:	e8 86 62 01 00       	call   234900 <memcpy>
  21e67a:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21e681:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21e688:	5d                   	pop    rbp
  21e689:	c3                   	ret    
  21e68a:	eb 00                	jmp    21e68c <getLineNumberInfo+0xa3c>
  21e68c:	48 8d bd a0 fc ff ff 	lea    rdi,[rbp-0x360]
        const opcode_base = try in_stream.readByte();
  21e693:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21e69a:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21e6a1:	e8 9a 54 ff ff       	call   213b40 <InStream(ReadError)_readByte>
  21e6a6:	66 83 bd a0 fc ff ff 	cmp    WORD PTR [rbp-0x360],0x0
  21e6ad:	00 
  21e6ae:	74 63                	je     21e713 <getLineNumberInfo+0xac3>
  21e6b0:	66 8b 85 a0 fc ff ff 	mov    ax,WORD PTR [rbp-0x360]
  21e6b7:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e6be:	66 89 85 f6 ec ff ff 	mov    WORD PTR [rbp-0x130a],ax
  21e6c5:	e8 c6 d5 fe ff       	call   20bc90 <__zig_return_error>
  21e6ca:	b9 30 00 00 00       	mov    ecx,0x30
  21e6cf:	89 ca                	mov    edx,ecx
  21e6d1:	48 8d bd 68 fc ff ff 	lea    rdi,[rbp-0x398]
  21e6d8:	66 8b 85 f6 ec ff ff 	mov    ax,WORD PTR [rbp-0x130a]
  21e6df:	66 89 85 68 fc ff ff 	mov    WORD PTR [rbp-0x398],ax
  21e6e6:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21e6ed:	48 89 bd e8 ec ff ff 	mov    QWORD PTR [rbp-0x1318],rdi
  21e6f4:	48 89 f7             	mov    rdi,rsi
  21e6f7:	48 8b b5 e8 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x1318]
  21e6fe:	e8 fd 61 01 00       	call   234900 <memcpy>
  21e703:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21e70a:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21e711:	5d                   	pop    rbp
  21e712:	c3                   	ret    
  21e713:	8a 85 a2 fc ff ff    	mov    al,BYTE PTR [rbp-0x35e]
  21e719:	88 85 63 f0 ff ff    	mov    BYTE PTR [rbp-0xf9d],al
        const standard_opcode_lengths = try st.allocator().alloc(u8, opcode_base - 1);
  21e71f:	48 8b bd f0 f0 ff ff 	mov    rdi,QWORD PTR [rbp-0xf10]
  21e726:	e8 35 75 ff ff       	call   215c60 <ElfStackTrace_allocator>
  21e72b:	48 89 85 60 fc ff ff 	mov    QWORD PTR [rbp-0x3a0],rax
  21e732:	48 8b 95 60 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x3a0]
  21e739:	8a 8d 63 f0 ff ff    	mov    cl,BYTE PTR [rbp-0xf9d]
  21e73f:	80 e9 01             	sub    cl,0x1
  21e742:	40 0f 92 c6          	setb   sil
  21e746:	40 f6 c6 01          	test   sil,0x1
  21e74a:	48 89 95 e0 ec ff ff 	mov    QWORD PTR [rbp-0x1320],rdx
  21e751:	88 8d df ec ff ff    	mov    BYTE PTR [rbp-0x1321],cl
  21e757:	0f 85 70 1b 00 00    	jne    2202cd <getLineNumberInfo+0x267d>
  21e75d:	e9 7b 1b 00 00       	jmp    2202dd <getLineNumberInfo+0x268d>
  21e762:	66 8b 85 48 fc ff ff 	mov    ax,WORD PTR [rbp-0x3b8]
  21e769:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e770:	66 89 85 dc ec ff ff 	mov    WORD PTR [rbp-0x1324],ax
  21e777:	e8 14 d5 fe ff       	call   20bc90 <__zig_return_error>
  21e77c:	b9 30 00 00 00       	mov    ecx,0x30
  21e781:	89 ca                	mov    edx,ecx
  21e783:	48 8d bd 00 fc ff ff 	lea    rdi,[rbp-0x400]
  21e78a:	66 8b 85 dc ec ff ff 	mov    ax,WORD PTR [rbp-0x1324]
  21e791:	66 89 85 00 fc ff ff 	mov    WORD PTR [rbp-0x400],ax
  21e798:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21e79f:	48 89 bd d0 ec ff ff 	mov    QWORD PTR [rbp-0x1330],rdi
  21e7a6:	48 89 f7             	mov    rdi,rsi
  21e7a9:	48 8b b5 d0 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x1330]
  21e7b0:	e8 4b 61 01 00       	call   234900 <memcpy>
  21e7b5:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21e7bc:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21e7c3:	5d                   	pop    rbp
  21e7c4:	c3                   	ret    
  21e7c5:	48 8b 85 50 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3b0]
  21e7cc:	48 89 85 50 f0 ff ff 	mov    QWORD PTR [rbp-0xfb0],rax
  21e7d3:	48 8b 85 58 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3a8]
  21e7da:	48 89 85 58 f0 ff ff 	mov    QWORD PTR [rbp-0xfa8],rax
            var i: usize = 0;
  21e7e1:	48 c7 85 48 f0 ff ff 	mov    QWORD PTR [rbp-0xfb8],0x0
  21e7e8:	00 00 00 00 
            while (i < opcode_base - 1) : (i += 1) {
  21e7ec:	48 8b 85 48 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xfb8]
  21e7f3:	8a 8d 63 f0 ff ff    	mov    cl,BYTE PTR [rbp-0xf9d]
  21e7f9:	80 e9 01             	sub    cl,0x1
  21e7fc:	0f 92 c2             	setb   dl
  21e7ff:	f6 c2 01             	test   dl,0x1
  21e802:	48 89 85 c8 ec ff ff 	mov    QWORD PTR [rbp-0x1338],rax
  21e809:	88 8d c7 ec ff ff    	mov    BYTE PTR [rbp-0x1339],cl
  21e80f:	0f 85 fe 1a 00 00    	jne    220313 <getLineNumberInfo+0x26c3>
  21e815:	e9 09 1b 00 00       	jmp    220323 <getLineNumberInfo+0x26d3>
                standard_opcode_lengths[i] = try in_stream.readByte();
  21e81a:	48 8b 85 48 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xfb8]
  21e821:	48 3b 85 58 f0 ff ff 	cmp    rax,QWORD PTR [rbp-0xfa8]
  21e828:	48 89 85 b8 ec ff ff 	mov    QWORD PTR [rbp-0x1348],rax
  21e82f:	0f 82 1e 1b 00 00    	jb     220353 <getLineNumberInfo+0x2703>
  21e835:	e9 09 1b 00 00       	jmp    220343 <getLineNumberInfo+0x26f3>
  21e83a:	66 8b 85 f8 fb ff ff 	mov    ax,WORD PTR [rbp-0x408]
  21e841:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e848:	66 89 85 b6 ec ff ff 	mov    WORD PTR [rbp-0x134a],ax
  21e84f:	e8 3c d4 fe ff       	call   20bc90 <__zig_return_error>
  21e854:	b9 30 00 00 00       	mov    ecx,0x30
  21e859:	89 ca                	mov    edx,ecx
  21e85b:	48 8d bd c0 fb ff ff 	lea    rdi,[rbp-0x440]
  21e862:	66 8b 85 b6 ec ff ff 	mov    ax,WORD PTR [rbp-0x134a]
  21e869:	66 89 85 c0 fb ff ff 	mov    WORD PTR [rbp-0x440],ax
  21e870:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21e877:	48 89 bd a8 ec ff ff 	mov    QWORD PTR [rbp-0x1358],rdi
  21e87e:	48 89 f7             	mov    rdi,rsi
  21e881:	48 8b b5 a8 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x1358]
  21e888:	e8 73 60 01 00       	call   234900 <memcpy>
  21e88d:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21e894:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21e89b:	5d                   	pop    rbp
  21e89c:	c3                   	ret    
  21e89d:	8a 85 fa fb ff ff    	mov    al,BYTE PTR [rbp-0x406]
  21e8a3:	48 8b 8d a0 ec ff ff 	mov    rcx,QWORD PTR [rbp-0x1360]
  21e8aa:	88 01                	mov    BYTE PTR [rcx],al
            while (i < opcode_base - 1) : (i += 1) {
  21e8ac:	48 8b 95 48 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xfb8]
  21e8b3:	48 83 c2 01          	add    rdx,0x1
  21e8b7:	0f 92 c0             	setb   al
  21e8ba:	48 89 95 98 ec ff ff 	mov    QWORD PTR [rbp-0x1368],rdx
  21e8c1:	88 85 97 ec ff ff    	mov    BYTE PTR [rbp-0x1369],al
  21e8c7:	0f 82 c8 1a 00 00    	jb     220395 <getLineNumberInfo+0x2745>
  21e8cd:	e9 d3 1a 00 00       	jmp    2203a5 <getLineNumberInfo+0x2755>
        var include_directories = ArrayList([]u8).init(st.allocator());
  21e8d2:	48 8b bd f0 f0 ff ff 	mov    rdi,QWORD PTR [rbp-0xf10]
  21e8d9:	e8 82 73 ff ff       	call   215c60 <ElfStackTrace_allocator>
  21e8de:	48 8d bd a0 fb ff ff 	lea    rdi,[rbp-0x460]
  21e8e5:	48 89 c6             	mov    rsi,rax
  21e8e8:	e8 23 3c 00 00       	call   222510 <AlignedArrayList([]u8,8)_init>
  21e8ed:	48 8d b5 28 f0 ff ff 	lea    rsi,[rbp-0xfd8]
  21e8f4:	48 8d 95 d0 f0 ff ff 	lea    rdx,[rbp-0xf30]
  21e8fb:	48 8b 85 a0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x460]
  21e902:	48 89 85 28 f0 ff ff 	mov    QWORD PTR [rbp-0xfd8],rax
  21e909:	48 8b 85 a8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x458]
  21e910:	48 89 85 30 f0 ff ff 	mov    QWORD PTR [rbp-0xfd0],rax
  21e917:	48 8b 85 b0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x450]
  21e91e:	48 89 85 38 f0 ff ff 	mov    QWORD PTR [rbp-0xfc8],rax
  21e925:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
  21e92c:	48 89 85 40 f0 ff ff 	mov    QWORD PTR [rbp-0xfc0],rax
        try include_directories.append(compile_unit_cwd);
  21e933:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e93a:	e8 31 3c 00 00       	call   222570 <AlignedArrayList([]u8,8)_append>
  21e93f:	66 89 85 9e fb ff ff 	mov    WORD PTR [rbp-0x462],ax
  21e946:	66 83 bd 9e fb ff ff 	cmp    WORD PTR [rbp-0x462],0x0
  21e94d:	00 
  21e94e:	74 63                	je     21e9b3 <getLineNumberInfo+0xd63>
  21e950:	66 8b 85 9e fb ff ff 	mov    ax,WORD PTR [rbp-0x462]
  21e957:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e95e:	66 89 85 94 ec ff ff 	mov    WORD PTR [rbp-0x136c],ax
  21e965:	e8 26 d3 fe ff       	call   20bc90 <__zig_return_error>
  21e96a:	b9 30 00 00 00       	mov    ecx,0x30
  21e96f:	89 ca                	mov    edx,ecx
  21e971:	48 8d bd 68 fb ff ff 	lea    rdi,[rbp-0x498]
  21e978:	66 8b 85 94 ec ff ff 	mov    ax,WORD PTR [rbp-0x136c]
  21e97f:	66 89 85 68 fb ff ff 	mov    WORD PTR [rbp-0x498],ax
  21e986:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21e98d:	48 89 bd 88 ec ff ff 	mov    QWORD PTR [rbp-0x1378],rdi
  21e994:	48 89 f7             	mov    rdi,rsi
  21e997:	48 8b b5 88 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x1378]
  21e99e:	e8 5d 5f 01 00       	call   234900 <memcpy>
  21e9a3:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21e9aa:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21e9b1:	5d                   	pop    rbp
  21e9b2:	c3                   	ret    
        while (true) {
  21e9b3:	eb 00                	jmp    21e9b5 <getLineNumberInfo+0xd65>
  21e9b5:	48 8d bd 50 fb ff ff 	lea    rdi,[rbp-0x4b0]
            const dir = try st.readString();
  21e9bc:	48 8b 95 f0 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf10]
  21e9c3:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21e9ca:	e8 31 2e 00 00       	call   221800 <ElfStackTrace_readString>
  21e9cf:	66 83 bd 50 fb ff ff 	cmp    WORD PTR [rbp-0x4b0],0x0
  21e9d6:	00 
  21e9d7:	74 63                	je     21ea3c <getLineNumberInfo+0xdec>
  21e9d9:	66 8b 85 50 fb ff ff 	mov    ax,WORD PTR [rbp-0x4b0]
  21e9e0:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e9e7:	66 89 85 86 ec ff ff 	mov    WORD PTR [rbp-0x137a],ax
  21e9ee:	e8 9d d2 fe ff       	call   20bc90 <__zig_return_error>
  21e9f3:	b9 30 00 00 00       	mov    ecx,0x30
  21e9f8:	89 ca                	mov    edx,ecx
  21e9fa:	48 8d bd 08 fb ff ff 	lea    rdi,[rbp-0x4f8]
  21ea01:	66 8b 85 86 ec ff ff 	mov    ax,WORD PTR [rbp-0x137a]
  21ea08:	66 89 85 08 fb ff ff 	mov    WORD PTR [rbp-0x4f8],ax
  21ea0f:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21ea16:	48 89 bd 78 ec ff ff 	mov    QWORD PTR [rbp-0x1388],rdi
  21ea1d:	48 89 f7             	mov    rdi,rsi
  21ea20:	48 8b b5 78 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x1388]
  21ea27:	e8 d4 5e 01 00       	call   234900 <memcpy>
  21ea2c:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21ea33:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21ea3a:	5d                   	pop    rbp
  21ea3b:	c3                   	ret    
  21ea3c:	48 8b 85 58 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4a8]
  21ea43:	48 89 85 18 f0 ff ff 	mov    QWORD PTR [rbp-0xfe8],rax
  21ea4a:	48 8b 85 60 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4a0]
  21ea51:	48 89 85 20 f0 ff ff 	mov    QWORD PTR [rbp-0xfe0],rax
            if (dir.len == 0) break;
  21ea58:	48 83 bd 20 f0 ff ff 	cmp    QWORD PTR [rbp-0xfe0],0x0
  21ea5f:	00 
  21ea60:	75 05                	jne    21ea67 <getLineNumberInfo+0xe17>
  21ea62:	e9 95 00 00 00       	jmp    21eafc <getLineNumberInfo+0xeac>
  21ea67:	eb 00                	jmp    21ea69 <getLineNumberInfo+0xe19>
  21ea69:	48 8d b5 28 f0 ff ff 	lea    rsi,[rbp-0xfd8]
  21ea70:	48 8d 95 18 f0 ff ff 	lea    rdx,[rbp-0xfe8]
            try include_directories.append(dir);
  21ea77:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21ea7e:	e8 ed 3a 00 00       	call   222570 <AlignedArrayList([]u8,8)_append>
  21ea83:	66 89 85 06 fb ff ff 	mov    WORD PTR [rbp-0x4fa],ax
  21ea8a:	66 83 bd 06 fb ff ff 	cmp    WORD PTR [rbp-0x4fa],0x0
  21ea91:	00 
  21ea92:	74 63                	je     21eaf7 <getLineNumberInfo+0xea7>
  21ea94:	66 8b 85 06 fb ff ff 	mov    ax,WORD PTR [rbp-0x4fa]
  21ea9b:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21eaa2:	66 89 85 76 ec ff ff 	mov    WORD PTR [rbp-0x138a],ax
  21eaa9:	e8 e2 d1 fe ff       	call   20bc90 <__zig_return_error>
  21eaae:	b9 30 00 00 00       	mov    ecx,0x30
  21eab3:	89 ca                	mov    edx,ecx
  21eab5:	48 8d bd d0 fa ff ff 	lea    rdi,[rbp-0x530]
  21eabc:	66 8b 85 76 ec ff ff 	mov    ax,WORD PTR [rbp-0x138a]
  21eac3:	66 89 85 d0 fa ff ff 	mov    WORD PTR [rbp-0x530],ax
  21eaca:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21ead1:	48 89 bd 68 ec ff ff 	mov    QWORD PTR [rbp-0x1398],rdi
  21ead8:	48 89 f7             	mov    rdi,rsi
  21eadb:	48 8b b5 68 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x1398]
  21eae2:	e8 19 5e 01 00       	call   234900 <memcpy>
  21eae7:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21eaee:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21eaf5:	5d                   	pop    rbp
  21eaf6:	c3                   	ret    
        while (true) {
  21eaf7:	e9 b7 fe ff ff       	jmp    21e9b3 <getLineNumberInfo+0xd63>
        var file_entries = ArrayList(FileEntry).init(st.allocator());
  21eafc:	48 8b bd f0 f0 ff ff 	mov    rdi,QWORD PTR [rbp-0xf10]
  21eb03:	e8 58 71 ff ff       	call   215c60 <ElfStackTrace_allocator>
  21eb08:	48 8d bd b0 fa ff ff 	lea    rdi,[rbp-0x550]
  21eb0f:	48 89 c6             	mov    rsi,rax
  21eb12:	e8 e9 3a 00 00       	call   222600 <AlignedArrayList(FileEntry,8)_init>
  21eb17:	48 8d bd a0 fa ff ff 	lea    rdi,[rbp-0x560]
  21eb1e:	48 8d b5 28 f0 ff ff 	lea    rsi,[rbp-0xfd8]
  21eb25:	48 8b 85 b0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x550]
  21eb2c:	48 89 85 f8 ef ff ff 	mov    QWORD PTR [rbp-0x1008],rax
  21eb33:	48 8b 85 b8 fa ff ff 	mov    rax,QWORD PTR [rbp-0x548]
  21eb3a:	48 89 85 00 f0 ff ff 	mov    QWORD PTR [rbp-0x1000],rax
  21eb41:	48 8b 85 c0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x540]
  21eb48:	48 89 85 08 f0 ff ff 	mov    QWORD PTR [rbp-0xff8],rax
  21eb4f:	48 8b 85 c8 fa ff ff 	mov    rax,QWORD PTR [rbp-0x538]
  21eb56:	48 89 85 10 f0 ff ff 	mov    QWORD PTR [rbp-0xff0],rax
        var prog = LineNumberProgram.init(default_is_stmt, include_directories.toSliceConst(), &file_entries, target_address);
  21eb5d:	8a 8d 66 f0 ff ff    	mov    cl,BYTE PTR [rbp-0xf9a]
  21eb63:	88 8d 67 ec ff ff    	mov    BYTE PTR [rbp-0x1399],cl
  21eb69:	e8 f2 3a 00 00       	call   222660 <AlignedArrayList([]u8,8)_toSliceConst>
  21eb6e:	48 8d 85 30 fa ff ff 	lea    rax,[rbp-0x5d0]
  21eb75:	4c 8b 85 e0 f0 ff ff 	mov    r8,QWORD PTR [rbp-0xf20]
  21eb7c:	8a 8d 67 ec ff ff    	mov    cl,BYTE PTR [rbp-0x1399]
  21eb82:	0f b6 f1             	movzx  esi,cl
  21eb85:	48 8d bd 30 fa ff ff 	lea    rdi,[rbp-0x5d0]
  21eb8c:	48 8d 95 a0 fa ff ff 	lea    rdx,[rbp-0x560]
  21eb93:	48 8d 8d f8 ef ff ff 	lea    rcx,[rbp-0x1008]
  21eb9a:	48 89 85 58 ec ff ff 	mov    QWORD PTR [rbp-0x13a8],rax
  21eba1:	e8 5a 3b 00 00       	call   222700 <LineNumberProgram_init>
  21eba6:	be 70 00 00 00       	mov    esi,0x70
  21ebab:	89 f2                	mov    edx,esi
  21ebad:	48 8d 85 88 ef ff ff 	lea    rax,[rbp-0x1078]
  21ebb4:	48 8d 8d 30 fa ff ff 	lea    rcx,[rbp-0x5d0]
  21ebbb:	48 89 c7             	mov    rdi,rax
  21ebbe:	48 89 ce             	mov    rsi,rcx
  21ebc1:	e8 3a 5d 01 00       	call   234900 <memcpy>
        while (true) {
  21ebc6:	eb 00                	jmp    21ebc8 <getLineNumberInfo+0xf78>
  21ebc8:	48 8d bd 18 fa ff ff 	lea    rdi,[rbp-0x5e8]
            const file_name = try st.readString();
  21ebcf:	48 8b 95 f0 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf10]
  21ebd6:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21ebdd:	e8 1e 2c 00 00       	call   221800 <ElfStackTrace_readString>
  21ebe2:	66 83 bd 18 fa ff ff 	cmp    WORD PTR [rbp-0x5e8],0x0
  21ebe9:	00 
  21ebea:	74 63                	je     21ec4f <getLineNumberInfo+0xfff>
  21ebec:	66 8b 85 18 fa ff ff 	mov    ax,WORD PTR [rbp-0x5e8]
  21ebf3:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21ebfa:	66 89 85 56 ec ff ff 	mov    WORD PTR [rbp-0x13aa],ax
  21ec01:	e8 8a d0 fe ff       	call   20bc90 <__zig_return_error>
  21ec06:	b9 30 00 00 00       	mov    ecx,0x30
  21ec0b:	89 ca                	mov    edx,ecx
  21ec0d:	48 8d bd d0 f9 ff ff 	lea    rdi,[rbp-0x630]
  21ec14:	66 8b 85 56 ec ff ff 	mov    ax,WORD PTR [rbp-0x13aa]
  21ec1b:	66 89 85 d0 f9 ff ff 	mov    WORD PTR [rbp-0x630],ax
  21ec22:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21ec29:	48 89 bd 48 ec ff ff 	mov    QWORD PTR [rbp-0x13b8],rdi
  21ec30:	48 89 f7             	mov    rdi,rsi
  21ec33:	48 8b b5 48 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x13b8]
  21ec3a:	e8 c1 5c 01 00       	call   234900 <memcpy>
  21ec3f:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21ec46:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21ec4d:	5d                   	pop    rbp
  21ec4e:	c3                   	ret    
  21ec4f:	48 8b 85 20 fa ff ff 	mov    rax,QWORD PTR [rbp-0x5e0]
  21ec56:	48 89 85 78 ef ff ff 	mov    QWORD PTR [rbp-0x1088],rax
  21ec5d:	48 8b 85 28 fa ff ff 	mov    rax,QWORD PTR [rbp-0x5d8]
  21ec64:	48 89 85 80 ef ff ff 	mov    QWORD PTR [rbp-0x1080],rax
            if (file_name.len == 0) break;
  21ec6b:	48 83 bd 80 ef ff ff 	cmp    QWORD PTR [rbp-0x1080],0x0
  21ec72:	00 
  21ec73:	75 05                	jne    21ec7a <getLineNumberInfo+0x102a>
  21ec75:	e9 9a 02 00 00       	jmp    21ef14 <getLineNumberInfo+0x12c4>
  21ec7a:	eb 00                	jmp    21ec7c <getLineNumberInfo+0x102c>
  21ec7c:	48 8d bd c0 f9 ff ff 	lea    rdi,[rbp-0x640]
            const dir_index = try readULeb128(in_stream);
  21ec83:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21ec8a:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21ec91:	e8 3a 84 ff ff       	call   2170d0 <readULeb128>
  21ec96:	66 83 bd c0 f9 ff ff 	cmp    WORD PTR [rbp-0x640],0x0
  21ec9d:	00 
  21ec9e:	74 63                	je     21ed03 <getLineNumberInfo+0x10b3>
  21eca0:	66 8b 85 c0 f9 ff ff 	mov    ax,WORD PTR [rbp-0x640]
  21eca7:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21ecae:	66 89 85 46 ec ff ff 	mov    WORD PTR [rbp-0x13ba],ax
  21ecb5:	e8 d6 cf fe ff       	call   20bc90 <__zig_return_error>
  21ecba:	b9 30 00 00 00       	mov    ecx,0x30
  21ecbf:	89 ca                	mov    edx,ecx
  21ecc1:	48 8d bd 80 f9 ff ff 	lea    rdi,[rbp-0x680]
  21ecc8:	66 8b 85 46 ec ff ff 	mov    ax,WORD PTR [rbp-0x13ba]
  21eccf:	66 89 85 80 f9 ff ff 	mov    WORD PTR [rbp-0x680],ax
  21ecd6:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21ecdd:	48 89 bd 38 ec ff ff 	mov    QWORD PTR [rbp-0x13c8],rdi
  21ece4:	48 89 f7             	mov    rdi,rsi
  21ece7:	48 8b b5 38 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x13c8]
  21ecee:	e8 0d 5c 01 00       	call   234900 <memcpy>
  21ecf3:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21ecfa:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21ed01:	5d                   	pop    rbp
  21ed02:	c3                   	ret    
  21ed03:	48 8d bd 70 f9 ff ff 	lea    rdi,[rbp-0x690]
  21ed0a:	48 8b 85 c8 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x638]
  21ed11:	48 89 85 70 ef ff ff 	mov    QWORD PTR [rbp-0x1090],rax
            const mtime = try readULeb128(in_stream);
  21ed18:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21ed1f:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21ed26:	e8 a5 83 ff ff       	call   2170d0 <readULeb128>
  21ed2b:	66 83 bd 70 f9 ff ff 	cmp    WORD PTR [rbp-0x690],0x0
  21ed32:	00 
  21ed33:	74 63                	je     21ed98 <getLineNumberInfo+0x1148>
  21ed35:	66 8b 85 70 f9 ff ff 	mov    ax,WORD PTR [rbp-0x690]
  21ed3c:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21ed43:	66 89 85 36 ec ff ff 	mov    WORD PTR [rbp-0x13ca],ax
  21ed4a:	e8 41 cf fe ff       	call   20bc90 <__zig_return_error>
  21ed4f:	b9 30 00 00 00       	mov    ecx,0x30
  21ed54:	89 ca                	mov    edx,ecx
  21ed56:	48 8d bd 30 f9 ff ff 	lea    rdi,[rbp-0x6d0]
  21ed5d:	66 8b 85 36 ec ff ff 	mov    ax,WORD PTR [rbp-0x13ca]
  21ed64:	66 89 85 30 f9 ff ff 	mov    WORD PTR [rbp-0x6d0],ax
  21ed6b:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21ed72:	48 89 bd 28 ec ff ff 	mov    QWORD PTR [rbp-0x13d8],rdi
  21ed79:	48 89 f7             	mov    rdi,rsi
  21ed7c:	48 8b b5 28 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x13d8]
  21ed83:	e8 78 5b 01 00       	call   234900 <memcpy>
  21ed88:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21ed8f:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21ed96:	5d                   	pop    rbp
  21ed97:	c3                   	ret    
  21ed98:	48 8d bd 20 f9 ff ff 	lea    rdi,[rbp-0x6e0]
  21ed9f:	48 8b 85 78 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x688]
  21eda6:	48 89 85 68 ef ff ff 	mov    QWORD PTR [rbp-0x1098],rax
            const len_bytes = try readULeb128(in_stream);
  21edad:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21edb4:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21edbb:	e8 10 83 ff ff       	call   2170d0 <readULeb128>
  21edc0:	66 83 bd 20 f9 ff ff 	cmp    WORD PTR [rbp-0x6e0],0x0
  21edc7:	00 
  21edc8:	74 63                	je     21ee2d <getLineNumberInfo+0x11dd>
  21edca:	66 8b 85 20 f9 ff ff 	mov    ax,WORD PTR [rbp-0x6e0]
  21edd1:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21edd8:	66 89 85 26 ec ff ff 	mov    WORD PTR [rbp-0x13da],ax
  21eddf:	e8 ac ce fe ff       	call   20bc90 <__zig_return_error>
  21ede4:	b9 30 00 00 00       	mov    ecx,0x30
  21ede9:	89 ca                	mov    edx,ecx
  21edeb:	48 8d bd e0 f8 ff ff 	lea    rdi,[rbp-0x720]
  21edf2:	66 8b 85 26 ec ff ff 	mov    ax,WORD PTR [rbp-0x13da]
  21edf9:	66 89 85 e0 f8 ff ff 	mov    WORD PTR [rbp-0x720],ax
  21ee00:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21ee07:	48 89 bd 18 ec ff ff 	mov    QWORD PTR [rbp-0x13e8],rdi
  21ee0e:	48 89 f7             	mov    rdi,rsi
  21ee11:	48 8b b5 18 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x13e8]
  21ee18:	e8 e3 5a 01 00       	call   234900 <memcpy>
  21ee1d:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21ee24:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21ee2b:	5d                   	pop    rbp
  21ee2c:	c3                   	ret    
  21ee2d:	48 8d b5 f8 ef ff ff 	lea    rsi,[rbp-0x1008]
  21ee34:	48 8d 95 b8 f8 ff ff 	lea    rdx,[rbp-0x748]
  21ee3b:	48 8b 85 28 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x6d8]
  21ee42:	48 89 85 60 ef ff ff 	mov    QWORD PTR [rbp-0x10a0],rax
                .dir_index = dir_index,
  21ee49:	48 8b 85 70 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1090]
                .mtime = mtime,
  21ee50:	48 8b 8d 68 ef ff ff 	mov    rcx,QWORD PTR [rbp-0x1098]
                .len_bytes = len_bytes,
  21ee57:	48 8b bd 60 ef ff ff 	mov    rdi,QWORD PTR [rbp-0x10a0]
            try file_entries.append(FileEntry{
  21ee5e:	4c 8b 85 78 ef ff ff 	mov    r8,QWORD PTR [rbp-0x1088]
  21ee65:	4c 89 85 b8 f8 ff ff 	mov    QWORD PTR [rbp-0x748],r8
  21ee6c:	4c 8b 85 80 ef ff ff 	mov    r8,QWORD PTR [rbp-0x1080]
  21ee73:	4c 89 85 c0 f8 ff ff 	mov    QWORD PTR [rbp-0x740],r8
  21ee7a:	48 89 85 c8 f8 ff ff 	mov    QWORD PTR [rbp-0x738],rax
  21ee81:	48 89 8d d0 f8 ff ff 	mov    QWORD PTR [rbp-0x730],rcx
  21ee88:	48 89 bd d8 f8 ff ff 	mov    QWORD PTR [rbp-0x728],rdi
  21ee8f:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21ee96:	e8 45 39 00 00       	call   2227e0 <AlignedArrayList(FileEntry,8)_append>
  21ee9b:	66 89 85 b6 f8 ff ff 	mov    WORD PTR [rbp-0x74a],ax
  21eea2:	66 83 bd b6 f8 ff ff 	cmp    WORD PTR [rbp-0x74a],0x0
  21eea9:	00 
  21eeaa:	74 63                	je     21ef0f <getLineNumberInfo+0x12bf>
  21eeac:	66 8b 85 b6 f8 ff ff 	mov    ax,WORD PTR [rbp-0x74a]
  21eeb3:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21eeba:	66 89 85 16 ec ff ff 	mov    WORD PTR [rbp-0x13ea],ax
  21eec1:	e8 ca cd fe ff       	call   20bc90 <__zig_return_error>
  21eec6:	b9 30 00 00 00       	mov    ecx,0x30
  21eecb:	89 ca                	mov    edx,ecx
  21eecd:	48 8d bd 80 f8 ff ff 	lea    rdi,[rbp-0x780]
  21eed4:	66 8b 85 16 ec ff ff 	mov    ax,WORD PTR [rbp-0x13ea]
  21eedb:	66 89 85 80 f8 ff ff 	mov    WORD PTR [rbp-0x780],ax
  21eee2:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21eee9:	48 89 bd 08 ec ff ff 	mov    QWORD PTR [rbp-0x13f8],rdi
  21eef0:	48 89 f7             	mov    rdi,rsi
  21eef3:	48 8b b5 08 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x13f8]
  21eefa:	e8 01 5a 01 00       	call   234900 <memcpy>
  21eeff:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21ef06:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21ef0d:	5d                   	pop    rbp
  21ef0e:	c3                   	ret    
        while (true) {
  21ef0f:	e9 b2 fc ff ff       	jmp    21ebc6 <getLineNumberInfo+0xf76>
        try in_file.seekTo(prog_start_offset);
  21ef14:	48 8b b5 c8 f0 ff ff 	mov    rsi,QWORD PTR [rbp-0xf38]
  21ef1b:	48 8b 95 68 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf98]
  21ef22:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21ef29:	e8 42 53 ff ff       	call   214270 <File_seekTo>
  21ef2e:	66 89 85 7e f8 ff ff 	mov    WORD PTR [rbp-0x782],ax
  21ef35:	66 83 bd 7e f8 ff ff 	cmp    WORD PTR [rbp-0x782],0x0
  21ef3c:	00 
  21ef3d:	74 63                	je     21efa2 <getLineNumberInfo+0x1352>
  21ef3f:	66 8b 85 7e f8 ff ff 	mov    ax,WORD PTR [rbp-0x782]
  21ef46:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21ef4d:	66 89 85 06 ec ff ff 	mov    WORD PTR [rbp-0x13fa],ax
  21ef54:	e8 37 cd fe ff       	call   20bc90 <__zig_return_error>
  21ef59:	b9 30 00 00 00       	mov    ecx,0x30
  21ef5e:	89 ca                	mov    edx,ecx
  21ef60:	48 8d bd 48 f8 ff ff 	lea    rdi,[rbp-0x7b8]
  21ef67:	66 8b 85 06 ec ff ff 	mov    ax,WORD PTR [rbp-0x13fa]
  21ef6e:	66 89 85 48 f8 ff ff 	mov    WORD PTR [rbp-0x7b8],ax
  21ef75:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21ef7c:	48 89 bd f8 eb ff ff 	mov    QWORD PTR [rbp-0x1408],rdi
  21ef83:	48 89 f7             	mov    rdi,rsi
  21ef86:	48 8b b5 f8 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x1408]
  21ef8d:	e8 6e 59 01 00       	call   234900 <memcpy>
  21ef92:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21ef99:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21efa0:	5d                   	pop    rbp
  21efa1:	c3                   	ret    
        while (true) {
  21efa2:	eb 00                	jmp    21efa4 <getLineNumberInfo+0x1354>
  21efa4:	48 8d bd 40 f8 ff ff 	lea    rdi,[rbp-0x7c0]
            const opcode = try in_stream.readByte();
  21efab:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21efb2:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21efb9:	e8 82 4b ff ff       	call   213b40 <InStream(ReadError)_readByte>
  21efbe:	66 83 bd 40 f8 ff ff 	cmp    WORD PTR [rbp-0x7c0],0x0
  21efc5:	00 
  21efc6:	74 63                	je     21f02b <getLineNumberInfo+0x13db>
  21efc8:	66 8b 85 40 f8 ff ff 	mov    ax,WORD PTR [rbp-0x7c0]
  21efcf:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21efd6:	66 89 85 f6 eb ff ff 	mov    WORD PTR [rbp-0x140a],ax
  21efdd:	e8 ae cc fe ff       	call   20bc90 <__zig_return_error>
  21efe2:	b9 30 00 00 00       	mov    ecx,0x30
  21efe7:	89 ca                	mov    edx,ecx
  21efe9:	48 8d bd 08 f8 ff ff 	lea    rdi,[rbp-0x7f8]
  21eff0:	66 8b 85 f6 eb ff ff 	mov    ax,WORD PTR [rbp-0x140a]
  21eff7:	66 89 85 08 f8 ff ff 	mov    WORD PTR [rbp-0x7f8],ax
  21effe:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21f005:	48 89 bd e8 eb ff ff 	mov    QWORD PTR [rbp-0x1418],rdi
  21f00c:	48 89 f7             	mov    rdi,rsi
  21f00f:	48 8b b5 e8 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x1418]
  21f016:	e8 e5 58 01 00       	call   234900 <memcpy>
  21f01b:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21f022:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21f029:	5d                   	pop    rbp
  21f02a:	c3                   	ret    
  21f02b:	48 8d bd 5e ef ff ff 	lea    rdi,[rbp-0x10a2]
  21f032:	be aa 00 00 00       	mov    esi,0xaa
  21f037:	b8 01 00 00 00       	mov    eax,0x1
  21f03c:	89 c2                	mov    edx,eax
  21f03e:	8a 8d 42 f8 ff ff    	mov    cl,BYTE PTR [rbp-0x7be]
  21f044:	88 8d 5f ef ff ff    	mov    BYTE PTR [rbp-0x10a1],cl
            var sub_op: u8 = undefined; // TODO move this to the correct scope and fix the compiler crash
  21f04a:	e8 61 58 01 00       	call   2348b0 <memset>
            if (opcode == DW.LNS_extended_op) {
  21f04f:	80 bd 5f ef ff ff 00 	cmp    BYTE PTR [rbp-0x10a1],0x0
  21f056:	0f 85 8d 08 00 00    	jne    21f8e9 <getLineNumberInfo+0x1c99>
  21f05c:	48 8d bd f8 f7 ff ff 	lea    rdi,[rbp-0x808]
                const op_size = try readULeb128(in_stream);
  21f063:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21f06a:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21f071:	e8 5a 80 ff ff       	call   2170d0 <readULeb128>
  21f076:	66 83 bd f8 f7 ff ff 	cmp    WORD PTR [rbp-0x808],0x0
  21f07d:	00 
  21f07e:	74 63                	je     21f0e3 <getLineNumberInfo+0x1493>
  21f080:	66 8b 85 f8 f7 ff ff 	mov    ax,WORD PTR [rbp-0x808]
  21f087:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21f08e:	66 89 85 e6 eb ff ff 	mov    WORD PTR [rbp-0x141a],ax
  21f095:	e8 f6 cb fe ff       	call   20bc90 <__zig_return_error>
  21f09a:	b9 30 00 00 00       	mov    ecx,0x30
  21f09f:	89 ca                	mov    edx,ecx
  21f0a1:	48 8d bd b8 f7 ff ff 	lea    rdi,[rbp-0x848]
  21f0a8:	66 8b 85 e6 eb ff ff 	mov    ax,WORD PTR [rbp-0x141a]
  21f0af:	66 89 85 b8 f7 ff ff 	mov    WORD PTR [rbp-0x848],ax
  21f0b6:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21f0bd:	48 89 bd d8 eb ff ff 	mov    QWORD PTR [rbp-0x1428],rdi
  21f0c4:	48 89 f7             	mov    rdi,rsi
  21f0c7:	48 8b b5 d8 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x1428]
  21f0ce:	e8 2d 58 01 00       	call   234900 <memcpy>
  21f0d3:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21f0da:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21f0e1:	5d                   	pop    rbp
  21f0e2:	c3                   	ret    
  21f0e3:	48 8b 85 00 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x800]
  21f0ea:	48 89 85 50 ef ff ff 	mov    QWORD PTR [rbp-0x10b0],rax
                if (op_size < 1) return error.InvalidDebugInfo;
  21f0f1:	48 83 bd 50 ef ff ff 	cmp    QWORD PTR [rbp-0x10b0],0x1
  21f0f8:	01 
  21f0f9:	73 47                	jae    21f142 <getLineNumberInfo+0x14f2>
  21f0fb:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21f102:	e8 89 cb fe ff       	call   20bc90 <__zig_return_error>
  21f107:	48 8d 3d 6a a2 fe ff 	lea    rdi,[rip+0xfffffffffffea26a]        # 209378 <__unnamed_124>
  21f10e:	b8 30 00 00 00       	mov    eax,0x30
  21f113:	89 c2                	mov    edx,eax
  21f115:	48 8b 8d 60 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x11a0]
  21f11c:	48 89 bd d0 eb ff ff 	mov    QWORD PTR [rbp-0x1430],rdi
  21f123:	48 89 cf             	mov    rdi,rcx
  21f126:	48 8b b5 d0 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x1430]
  21f12d:	e8 ce 57 01 00       	call   234900 <memcpy>
  21f132:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21f139:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21f140:	5d                   	pop    rbp
  21f141:	c3                   	ret    
  21f142:	eb 00                	jmp    21f144 <getLineNumberInfo+0x14f4>
  21f144:	48 8d bd b0 f7 ff ff 	lea    rdi,[rbp-0x850]
                sub_op = try in_stream.readByte();
  21f14b:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21f152:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21f159:	e8 e2 49 ff ff       	call   213b40 <InStream(ReadError)_readByte>
  21f15e:	66 83 bd b0 f7 ff ff 	cmp    WORD PTR [rbp-0x850],0x0
  21f165:	00 
  21f166:	74 63                	je     21f1cb <getLineNumberInfo+0x157b>
  21f168:	66 8b 85 b0 f7 ff ff 	mov    ax,WORD PTR [rbp-0x850]
  21f16f:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21f176:	66 89 85 ce eb ff ff 	mov    WORD PTR [rbp-0x1432],ax
  21f17d:	e8 0e cb fe ff       	call   20bc90 <__zig_return_error>
  21f182:	b9 30 00 00 00       	mov    ecx,0x30
  21f187:	89 ca                	mov    edx,ecx
  21f189:	48 8d bd 78 f7 ff ff 	lea    rdi,[rbp-0x888]
  21f190:	66 8b 85 ce eb ff ff 	mov    ax,WORD PTR [rbp-0x1432]
  21f197:	66 89 85 78 f7 ff ff 	mov    WORD PTR [rbp-0x888],ax
  21f19e:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21f1a5:	48 89 bd c0 eb ff ff 	mov    QWORD PTR [rbp-0x1440],rdi
  21f1ac:	48 89 f7             	mov    rdi,rsi
  21f1af:	48 8b b5 c0 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x1440]
  21f1b6:	e8 45 57 01 00       	call   234900 <memcpy>
  21f1bb:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21f1c2:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21f1c9:	5d                   	pop    rbp
  21f1ca:	c3                   	ret    
  21f1cb:	8a 85 b2 f7 ff ff    	mov    al,BYTE PTR [rbp-0x84e]
  21f1d1:	88 85 5e ef ff ff    	mov    BYTE PTR [rbp-0x10a2],al
                switch (sub_op) {
  21f1d7:	8a 85 5e ef ff ff    	mov    al,BYTE PTR [rbp-0x10a2]
  21f1dd:	88 c1                	mov    cl,al
  21f1df:	80 e9 01             	sub    cl,0x1
  21f1e2:	88 85 bf eb ff ff    	mov    BYTE PTR [rbp-0x1441],al
  21f1e8:	88 8d be eb ff ff    	mov    BYTE PTR [rbp-0x1442],cl
  21f1ee:	0f 84 4a 01 00 00    	je     21f33e <getLineNumberInfo+0x16ee>
  21f1f4:	eb 00                	jmp    21f1f6 <getLineNumberInfo+0x15a6>
  21f1f6:	8a 85 bf eb ff ff    	mov    al,BYTE PTR [rbp-0x1441]
  21f1fc:	2c 02                	sub    al,0x2
  21f1fe:	88 85 bd eb ff ff    	mov    BYTE PTR [rbp-0x1443],al
  21f204:	0f 84 df 02 00 00    	je     21f4e9 <getLineNumberInfo+0x1899>
  21f20a:	eb 00                	jmp    21f20c <getLineNumberInfo+0x15bc>
  21f20c:	8a 85 bf eb ff ff    	mov    al,BYTE PTR [rbp-0x1441]
  21f212:	2c 03                	sub    al,0x3
  21f214:	88 85 bc eb ff ff    	mov    BYTE PTR [rbp-0x1444],al
  21f21a:	0f 84 8e 03 00 00    	je     21f5ae <getLineNumberInfo+0x195e>
  21f220:	eb 00                	jmp    21f222 <getLineNumberInfo+0x15d2>
                        const fwd_amt = math.cast(isize, op_size - 1) catch return error.InvalidDebugInfo;
  21f222:	48 8b 85 50 ef ff ff 	mov    rax,QWORD PTR [rbp-0x10b0]
  21f229:	48 83 e8 01          	sub    rax,0x1
  21f22d:	0f 92 c1             	setb   cl
  21f230:	48 89 85 b0 eb ff ff 	mov    QWORD PTR [rbp-0x1450],rax
  21f237:	88 8d af eb ff ff    	mov    BYTE PTR [rbp-0x1451],cl
  21f23d:	0f 82 75 11 00 00    	jb     2203b8 <getLineNumberInfo+0x2768>
  21f243:	e9 80 11 00 00       	jmp    2203c8 <getLineNumberInfo+0x2778>
  21f248:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21f24f:	e8 3c ca fe ff       	call   20bc90 <__zig_return_error>
  21f254:	48 8d 3d 4d a1 fe ff 	lea    rdi,[rip+0xfffffffffffea14d]        # 2093a8 <__unnamed_125>
  21f25b:	b8 30 00 00 00       	mov    eax,0x30
  21f260:	89 c2                	mov    edx,eax
  21f262:	48 8b 8d 60 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x11a0]
  21f269:	48 89 bd a0 eb ff ff 	mov    QWORD PTR [rbp-0x1460],rdi
  21f270:	48 89 cf             	mov    rdi,rcx
  21f273:	48 8b b5 a0 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x1460]
  21f27a:	e8 81 56 01 00       	call   234900 <memcpy>
  21f27f:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21f286:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21f28d:	5d                   	pop    rbp
  21f28e:	c3                   	ret    
  21f28f:	48 8b 85 70 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x890]
  21f296:	48 89 85 98 eb ff ff 	mov    QWORD PTR [rbp-0x1468],rax
  21f29d:	48 8b 85 98 eb ff ff 	mov    rax,QWORD PTR [rbp-0x1468]
  21f2a4:	48 89 85 48 ef ff ff 	mov    QWORD PTR [rbp-0x10b8],rax
                        try in_file.seekForward(fwd_amt);
  21f2ab:	48 8b b5 c8 f0 ff ff 	mov    rsi,QWORD PTR [rbp-0xf38]
  21f2b2:	48 8b 95 48 ef ff ff 	mov    rdx,QWORD PTR [rbp-0x10b8]
  21f2b9:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21f2c0:	e8 4b 49 ff ff       	call   213c10 <File_seekForward>
  21f2c5:	66 89 85 56 f7 ff ff 	mov    WORD PTR [rbp-0x8aa],ax
  21f2cc:	66 83 bd 56 f7 ff ff 	cmp    WORD PTR [rbp-0x8aa],0x0
  21f2d3:	00 
  21f2d4:	74 63                	je     21f339 <getLineNumberInfo+0x16e9>
  21f2d6:	66 8b 85 56 f7 ff ff 	mov    ax,WORD PTR [rbp-0x8aa]
  21f2dd:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21f2e4:	66 89 85 96 eb ff ff 	mov    WORD PTR [rbp-0x146a],ax
  21f2eb:	e8 a0 c9 fe ff       	call   20bc90 <__zig_return_error>
  21f2f0:	b9 30 00 00 00       	mov    ecx,0x30
  21f2f5:	89 ca                	mov    edx,ecx
  21f2f7:	48 8d bd 20 f7 ff ff 	lea    rdi,[rbp-0x8e0]
  21f2fe:	66 8b 85 96 eb ff ff 	mov    ax,WORD PTR [rbp-0x146a]
  21f305:	66 89 85 20 f7 ff ff 	mov    WORD PTR [rbp-0x8e0],ax
  21f30c:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21f313:	48 89 bd 88 eb ff ff 	mov    QWORD PTR [rbp-0x1478],rdi
  21f31a:	48 89 f7             	mov    rdi,rsi
  21f31d:	48 8b b5 88 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x1478]
  21f324:	e8 d7 55 01 00       	call   234900 <memcpy>
  21f329:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21f330:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21f337:	5d                   	pop    rbp
  21f338:	c3                   	ret    
                switch (sub_op) {
  21f339:	e9 a6 05 00 00       	jmp    21f8e4 <getLineNumberInfo+0x1c94>
  21f33e:	48 8d bd e8 f6 ff ff 	lea    rdi,[rbp-0x918]
  21f345:	48 8d 95 88 ef ff ff 	lea    rdx,[rbp-0x1078]
                        prog.end_sequence = true;
  21f34c:	c6 85 aa ef ff ff 01 	mov    BYTE PTR [rbp-0x1056],0x1
                        if (try prog.checkLineMatch()) |info| return info;
  21f353:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21f35a:	e8 b1 35 00 00       	call   222910 <LineNumberProgram_checkLineMatch>
  21f35f:	66 83 bd e8 f6 ff ff 	cmp    WORD PTR [rbp-0x918],0x0
  21f366:	00 
  21f367:	74 63                	je     21f3cc <getLineNumberInfo+0x177c>
  21f369:	66 8b 85 e8 f6 ff ff 	mov    ax,WORD PTR [rbp-0x918]
  21f370:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21f377:	66 89 85 86 eb ff ff 	mov    WORD PTR [rbp-0x147a],ax
  21f37e:	e8 0d c9 fe ff       	call   20bc90 <__zig_return_error>
  21f383:	b9 30 00 00 00       	mov    ecx,0x30
  21f388:	89 ca                	mov    edx,ecx
  21f38a:	48 8d bd 80 f6 ff ff 	lea    rdi,[rbp-0x980]
  21f391:	66 8b 85 86 eb ff ff 	mov    ax,WORD PTR [rbp-0x147a]
  21f398:	66 89 85 80 f6 ff ff 	mov    WORD PTR [rbp-0x980],ax
  21f39f:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21f3a6:	48 89 bd 78 eb ff ff 	mov    QWORD PTR [rbp-0x1488],rdi
  21f3ad:	48 89 f7             	mov    rdi,rsi
  21f3b0:	48 8b b5 78 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x1488]
  21f3b7:	e8 44 55 01 00       	call   234900 <memcpy>
  21f3bc:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21f3c3:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21f3ca:	5d                   	pop    rbp
  21f3cb:	c3                   	ret    
  21f3cc:	48 8d 85 e8 f6 ff ff 	lea    rax,[rbp-0x918]
  21f3d3:	48 83 c0 08          	add    rax,0x8
  21f3d7:	f6 85 18 f7 ff ff 01 	test   BYTE PTR [rbp-0x8e8],0x1
  21f3de:	48 89 85 70 eb ff ff 	mov    QWORD PTR [rbp-0x1490],rax
  21f3e5:	75 05                	jne    21f3ec <getLineNumberInfo+0x179c>
  21f3e7:	e9 b4 00 00 00       	jmp    21f4a0 <getLineNumberInfo+0x1850>
  21f3ec:	b8 30 00 00 00       	mov    eax,0x30
  21f3f1:	89 c2                	mov    edx,eax
  21f3f3:	48 8d 8d 50 f6 ff ff 	lea    rcx,[rbp-0x9b0]
  21f3fa:	b8 28 00 00 00       	mov    eax,0x28
  21f3ff:	89 c6                	mov    esi,eax
  21f401:	48 8d bd 20 ef ff ff 	lea    rdi,[rbp-0x10e0]
  21f408:	4c 8b 85 70 eb ff ff 	mov    r8,QWORD PTR [rbp-0x1490]
  21f40f:	49 89 f9             	mov    r9,rdi
  21f412:	48 89 bd 68 eb ff ff 	mov    QWORD PTR [rbp-0x1498],rdi
  21f419:	4c 89 cf             	mov    rdi,r9
  21f41c:	48 89 b5 60 eb ff ff 	mov    QWORD PTR [rbp-0x14a0],rsi
  21f423:	4c 89 c6             	mov    rsi,r8
  21f426:	4c 8b 85 60 eb ff ff 	mov    r8,QWORD PTR [rbp-0x14a0]
  21f42d:	48 89 95 58 eb ff ff 	mov    QWORD PTR [rbp-0x14a8],rdx
  21f434:	4c 89 c2             	mov    rdx,r8
  21f437:	48 89 8d 50 eb ff ff 	mov    QWORD PTR [rbp-0x14b0],rcx
  21f43e:	e8 bd 54 01 00       	call   234900 <memcpy>
  21f443:	66 c7 85 50 f6 ff ff 	mov    WORD PTR [rbp-0x9b0],0x0
  21f44a:	00 00 
  21f44c:	48 8b 8d 50 eb ff ff 	mov    rcx,QWORD PTR [rbp-0x14b0]
  21f453:	48 83 c1 08          	add    rcx,0x8
  21f457:	48 8b 95 68 eb ff ff 	mov    rdx,QWORD PTR [rbp-0x1498]
  21f45e:	48 89 cf             	mov    rdi,rcx
  21f461:	48 89 d6             	mov    rsi,rdx
  21f464:	48 8b 95 60 eb ff ff 	mov    rdx,QWORD PTR [rbp-0x14a0]
  21f46b:	e8 90 54 01 00       	call   234900 <memcpy>
  21f470:	48 8b 8d 50 eb ff ff 	mov    rcx,QWORD PTR [rbp-0x14b0]
  21f477:	48 8b 95 60 ee ff ff 	mov    rdx,QWORD PTR [rbp-0x11a0]
  21f47e:	48 89 d7             	mov    rdi,rdx
  21f481:	48 89 ce             	mov    rsi,rcx
  21f484:	48 8b 95 58 eb ff ff 	mov    rdx,QWORD PTR [rbp-0x14a8]
  21f48b:	e8 70 54 01 00       	call   234900 <memcpy>
  21f490:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21f497:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21f49e:	5d                   	pop    rbp
  21f49f:	c3                   	ret    
  21f4a0:	eb 00                	jmp    21f4a2 <getLineNumberInfo+0x1852>
                        return error.MissingDebugInfo;
  21f4a2:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21f4a9:	e8 e2 c7 fe ff       	call   20bc90 <__zig_return_error>
  21f4ae:	48 8d 3d 23 9f fe ff 	lea    rdi,[rip+0xfffffffffffe9f23]        # 2093d8 <__unnamed_126>
  21f4b5:	b8 30 00 00 00       	mov    eax,0x30
  21f4ba:	89 c2                	mov    edx,eax
  21f4bc:	48 8b 8d 60 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x11a0]
  21f4c3:	48 89 bd 48 eb ff ff 	mov    QWORD PTR [rbp-0x14b8],rdi
  21f4ca:	48 89 cf             	mov    rdi,rcx
  21f4cd:	48 8b b5 48 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x14b8]
  21f4d4:	e8 27 54 01 00       	call   234900 <memcpy>
  21f4d9:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21f4e0:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21f4e7:	5d                   	pop    rbp
  21f4e8:	c3                   	ret    
  21f4e9:	48 8d 85 40 f6 ff ff 	lea    rax,[rbp-0x9c0]
                        const addr = try in_stream.readInt(st.elf.endian, usize);
  21f4f0:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21f4f7:	48 8b 8d f0 f0 ff ff 	mov    rcx,QWORD PTR [rbp-0xf10]
  21f4fe:	40 8a 71 12          	mov    sil,BYTE PTR [rcx+0x12]
  21f502:	40 0f b6 ce          	movzx  ecx,sil
  21f506:	48 8d bd 40 f6 ff ff 	lea    rdi,[rbp-0x9c0]
  21f50d:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21f514:	48 89 85 40 eb ff ff 	mov    QWORD PTR [rbp-0x14c0],rax
  21f51b:	e8 80 1c 00 00       	call   2211a0 <InStream(ReadError)_readInt.65>
  21f520:	66 83 bd 40 f6 ff ff 	cmp    WORD PTR [rbp-0x9c0],0x0
  21f527:	00 
  21f528:	74 63                	je     21f58d <getLineNumberInfo+0x193d>
  21f52a:	66 8b 85 40 f6 ff ff 	mov    ax,WORD PTR [rbp-0x9c0]
  21f531:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21f538:	66 89 85 3e eb ff ff 	mov    WORD PTR [rbp-0x14c2],ax
  21f53f:	e8 4c c7 fe ff       	call   20bc90 <__zig_return_error>
  21f544:	b9 30 00 00 00       	mov    ecx,0x30
  21f549:	89 ca                	mov    edx,ecx
  21f54b:	48 8d bd 00 f6 ff ff 	lea    rdi,[rbp-0xa00]
  21f552:	66 8b 85 3e eb ff ff 	mov    ax,WORD PTR [rbp-0x14c2]
  21f559:	66 89 85 00 f6 ff ff 	mov    WORD PTR [rbp-0xa00],ax
  21f560:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21f567:	48 89 bd 30 eb ff ff 	mov    QWORD PTR [rbp-0x14d0],rdi
  21f56e:	48 89 f7             	mov    rdi,rsi
  21f571:	48 8b b5 30 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x14d0]
  21f578:	e8 83 53 01 00       	call   234900 <memcpy>
  21f57d:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21f584:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21f58b:	5d                   	pop    rbp
  21f58c:	c3                   	ret    
  21f58d:	48 8b 85 48 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x9b8]
  21f594:	48 89 85 18 ef ff ff 	mov    QWORD PTR [rbp-0x10e8],rax
                        prog.address = addr;
  21f59b:	48 8b 85 18 ef ff ff 	mov    rax,QWORD PTR [rbp-0x10e8]
  21f5a2:	48 89 85 88 ef ff ff 	mov    QWORD PTR [rbp-0x1078],rax
                switch (sub_op) {
  21f5a9:	e9 36 03 00 00       	jmp    21f8e4 <getLineNumberInfo+0x1c94>
  21f5ae:	48 8d bd e8 f5 ff ff 	lea    rdi,[rbp-0xa18]
                        const file_name = try st.readString();
  21f5b5:	48 8b 95 f0 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf10]
  21f5bc:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21f5c3:	e8 38 22 00 00       	call   221800 <ElfStackTrace_readString>
  21f5c8:	66 83 bd e8 f5 ff ff 	cmp    WORD PTR [rbp-0xa18],0x0
  21f5cf:	00 
  21f5d0:	74 63                	je     21f635 <getLineNumberInfo+0x19e5>
  21f5d2:	66 8b 85 e8 f5 ff ff 	mov    ax,WORD PTR [rbp-0xa18]
  21f5d9:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21f5e0:	66 89 85 2e eb ff ff 	mov    WORD PTR [rbp-0x14d2],ax
  21f5e7:	e8 a4 c6 fe ff       	call   20bc90 <__zig_return_error>
  21f5ec:	b9 30 00 00 00       	mov    ecx,0x30
  21f5f1:	89 ca                	mov    edx,ecx
  21f5f3:	48 8d bd a0 f5 ff ff 	lea    rdi,[rbp-0xa60]
  21f5fa:	66 8b 85 2e eb ff ff 	mov    ax,WORD PTR [rbp-0x14d2]
  21f601:	66 89 85 a0 f5 ff ff 	mov    WORD PTR [rbp-0xa60],ax
  21f608:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21f60f:	48 89 bd 20 eb ff ff 	mov    QWORD PTR [rbp-0x14e0],rdi
  21f616:	48 89 f7             	mov    rdi,rsi
  21f619:	48 8b b5 20 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x14e0]
  21f620:	e8 db 52 01 00       	call   234900 <memcpy>
  21f625:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21f62c:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21f633:	5d                   	pop    rbp
  21f634:	c3                   	ret    
  21f635:	48 8d bd 90 f5 ff ff 	lea    rdi,[rbp-0xa70]
  21f63c:	48 8b 85 f0 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa10]
  21f643:	48 89 85 08 ef ff ff 	mov    QWORD PTR [rbp-0x10f8],rax
  21f64a:	48 8b 85 f8 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa08]
  21f651:	48 89 85 10 ef ff ff 	mov    QWORD PTR [rbp-0x10f0],rax
                        const dir_index = try readULeb128(in_stream);
  21f658:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21f65f:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21f666:	e8 65 7a ff ff       	call   2170d0 <readULeb128>
  21f66b:	66 83 bd 90 f5 ff ff 	cmp    WORD PTR [rbp-0xa70],0x0
  21f672:	00 
  21f673:	74 63                	je     21f6d8 <getLineNumberInfo+0x1a88>
  21f675:	66 8b 85 90 f5 ff ff 	mov    ax,WORD PTR [rbp-0xa70]
  21f67c:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21f683:	66 89 85 1e eb ff ff 	mov    WORD PTR [rbp-0x14e2],ax
  21f68a:	e8 01 c6 fe ff       	call   20bc90 <__zig_return_error>
  21f68f:	b9 30 00 00 00       	mov    ecx,0x30
  21f694:	89 ca                	mov    edx,ecx
  21f696:	48 8d bd 50 f5 ff ff 	lea    rdi,[rbp-0xab0]
  21f69d:	66 8b 85 1e eb ff ff 	mov    ax,WORD PTR [rbp-0x14e2]
  21f6a4:	66 89 85 50 f5 ff ff 	mov    WORD PTR [rbp-0xab0],ax
  21f6ab:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21f6b2:	48 89 bd 10 eb ff ff 	mov    QWORD PTR [rbp-0x14f0],rdi
  21f6b9:	48 89 f7             	mov    rdi,rsi
  21f6bc:	48 8b b5 10 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x14f0]
  21f6c3:	e8 38 52 01 00       	call   234900 <memcpy>
  21f6c8:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21f6cf:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21f6d6:	5d                   	pop    rbp
  21f6d7:	c3                   	ret    
  21f6d8:	48 8d bd 40 f5 ff ff 	lea    rdi,[rbp-0xac0]
  21f6df:	48 8b 85 98 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa68]
  21f6e6:	48 89 85 00 ef ff ff 	mov    QWORD PTR [rbp-0x1100],rax
                        const mtime = try readULeb128(in_stream);
  21f6ed:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21f6f4:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21f6fb:	e8 d0 79 ff ff       	call   2170d0 <readULeb128>
  21f700:	66 83 bd 40 f5 ff ff 	cmp    WORD PTR [rbp-0xac0],0x0
  21f707:	00 
  21f708:	74 63                	je     21f76d <getLineNumberInfo+0x1b1d>
  21f70a:	66 8b 85 40 f5 ff ff 	mov    ax,WORD PTR [rbp-0xac0]
  21f711:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21f718:	66 89 85 0e eb ff ff 	mov    WORD PTR [rbp-0x14f2],ax
  21f71f:	e8 6c c5 fe ff       	call   20bc90 <__zig_return_error>
  21f724:	b9 30 00 00 00       	mov    ecx,0x30
  21f729:	89 ca                	mov    edx,ecx
  21f72b:	48 8d bd 00 f5 ff ff 	lea    rdi,[rbp-0xb00]
  21f732:	66 8b 85 0e eb ff ff 	mov    ax,WORD PTR [rbp-0x14f2]
  21f739:	66 89 85 00 f5 ff ff 	mov    WORD PTR [rbp-0xb00],ax
  21f740:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21f747:	48 89 bd 00 eb ff ff 	mov    QWORD PTR [rbp-0x1500],rdi
  21f74e:	48 89 f7             	mov    rdi,rsi
  21f751:	48 8b b5 00 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x1500]
  21f758:	e8 a3 51 01 00       	call   234900 <memcpy>
  21f75d:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21f764:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21f76b:	5d                   	pop    rbp
  21f76c:	c3                   	ret    
  21f76d:	48 8d bd f0 f4 ff ff 	lea    rdi,[rbp-0xb10]
  21f774:	48 8b 85 48 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xab8]
  21f77b:	48 89 85 f8 ee ff ff 	mov    QWORD PTR [rbp-0x1108],rax
                        const len_bytes = try readULeb128(in_stream);
  21f782:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21f789:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21f790:	e8 3b 79 ff ff       	call   2170d0 <readULeb128>
  21f795:	66 83 bd f0 f4 ff ff 	cmp    WORD PTR [rbp-0xb10],0x0
  21f79c:	00 
  21f79d:	74 63                	je     21f802 <getLineNumberInfo+0x1bb2>
  21f79f:	66 8b 85 f0 f4 ff ff 	mov    ax,WORD PTR [rbp-0xb10]
  21f7a6:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21f7ad:	66 89 85 fe ea ff ff 	mov    WORD PTR [rbp-0x1502],ax
  21f7b4:	e8 d7 c4 fe ff       	call   20bc90 <__zig_return_error>
  21f7b9:	b9 30 00 00 00       	mov    ecx,0x30
  21f7be:	89 ca                	mov    edx,ecx
  21f7c0:	48 8d bd b0 f4 ff ff 	lea    rdi,[rbp-0xb50]
  21f7c7:	66 8b 85 fe ea ff ff 	mov    ax,WORD PTR [rbp-0x1502]
  21f7ce:	66 89 85 b0 f4 ff ff 	mov    WORD PTR [rbp-0xb50],ax
  21f7d5:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21f7dc:	48 89 bd f0 ea ff ff 	mov    QWORD PTR [rbp-0x1510],rdi
  21f7e3:	48 89 f7             	mov    rdi,rsi
  21f7e6:	48 8b b5 f0 ea ff ff 	mov    rsi,QWORD PTR [rbp-0x1510]
  21f7ed:	e8 0e 51 01 00       	call   234900 <memcpy>
  21f7f2:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21f7f9:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21f800:	5d                   	pop    rbp
  21f801:	c3                   	ret    
  21f802:	48 8d b5 f8 ef ff ff 	lea    rsi,[rbp-0x1008]
  21f809:	48 8d 95 88 f4 ff ff 	lea    rdx,[rbp-0xb78]
  21f810:	48 8b 85 f8 f4 ff ff 	mov    rax,QWORD PTR [rbp-0xb08]
  21f817:	48 89 85 f0 ee ff ff 	mov    QWORD PTR [rbp-0x1110],rax
                            .dir_index = dir_index,
  21f81e:	48 8b 85 00 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1100]
                            .mtime = mtime,
  21f825:	48 8b 8d f8 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x1108]
                            .len_bytes = len_bytes,
  21f82c:	48 8b bd f0 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x1110]
                        try file_entries.append(FileEntry{
  21f833:	4c 8b 85 08 ef ff ff 	mov    r8,QWORD PTR [rbp-0x10f8]
  21f83a:	4c 89 85 88 f4 ff ff 	mov    QWORD PTR [rbp-0xb78],r8
  21f841:	4c 8b 85 10 ef ff ff 	mov    r8,QWORD PTR [rbp-0x10f0]
  21f848:	4c 89 85 90 f4 ff ff 	mov    QWORD PTR [rbp-0xb70],r8
  21f84f:	48 89 85 98 f4 ff ff 	mov    QWORD PTR [rbp-0xb68],rax
  21f856:	48 89 8d a0 f4 ff ff 	mov    QWORD PTR [rbp-0xb60],rcx
  21f85d:	48 89 bd a8 f4 ff ff 	mov    QWORD PTR [rbp-0xb58],rdi
  21f864:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21f86b:	e8 70 2f 00 00       	call   2227e0 <AlignedArrayList(FileEntry,8)_append>
  21f870:	66 89 85 86 f4 ff ff 	mov    WORD PTR [rbp-0xb7a],ax
  21f877:	66 83 bd 86 f4 ff ff 	cmp    WORD PTR [rbp-0xb7a],0x0
  21f87e:	00 
  21f87f:	74 63                	je     21f8e4 <getLineNumberInfo+0x1c94>
  21f881:	66 8b 85 86 f4 ff ff 	mov    ax,WORD PTR [rbp-0xb7a]
  21f888:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21f88f:	66 89 85 ee ea ff ff 	mov    WORD PTR [rbp-0x1512],ax
  21f896:	e8 f5 c3 fe ff       	call   20bc90 <__zig_return_error>
  21f89b:	b9 30 00 00 00       	mov    ecx,0x30
  21f8a0:	89 ca                	mov    edx,ecx
  21f8a2:	48 8d bd 50 f4 ff ff 	lea    rdi,[rbp-0xbb0]
  21f8a9:	66 8b 85 ee ea ff ff 	mov    ax,WORD PTR [rbp-0x1512]
  21f8b0:	66 89 85 50 f4 ff ff 	mov    WORD PTR [rbp-0xbb0],ax
  21f8b7:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21f8be:	48 89 bd e0 ea ff ff 	mov    QWORD PTR [rbp-0x1520],rdi
  21f8c5:	48 89 f7             	mov    rdi,rsi
  21f8c8:	48 8b b5 e0 ea ff ff 	mov    rsi,QWORD PTR [rbp-0x1520]
  21f8cf:	e8 2c 50 01 00       	call   234900 <memcpy>
  21f8d4:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21f8db:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21f8e2:	5d                   	pop    rbp
  21f8e3:	c3                   	ret    
            if (opcode == DW.LNS_extended_op) {
  21f8e4:	e9 4d 08 00 00       	jmp    220136 <getLineNumberInfo+0x24e6>
            } else if (opcode >= opcode_base) {
  21f8e9:	8a 85 5f ef ff ff    	mov    al,BYTE PTR [rbp-0x10a1]
  21f8ef:	3a 85 63 f0 ff ff    	cmp    al,BYTE PTR [rbp-0xf9d]
  21f8f5:	0f 82 68 01 00 00    	jb     21fa63 <getLineNumberInfo+0x1e13>
                const adjusted_opcode = opcode - opcode_base;
  21f8fb:	8a 85 5f ef ff ff    	mov    al,BYTE PTR [rbp-0x10a1]
  21f901:	2a 85 63 f0 ff ff    	sub    al,BYTE PTR [rbp-0xf9d]
  21f907:	0f 92 c1             	setb   cl
  21f90a:	f6 c1 01             	test   cl,0x1
  21f90d:	88 85 df ea ff ff    	mov    BYTE PTR [rbp-0x1521],al
  21f913:	0f 85 dc 0a 00 00    	jne    2203f5 <getLineNumberInfo+0x27a5>
  21f919:	e9 e7 0a 00 00       	jmp    220405 <getLineNumberInfo+0x27b5>
                if (try prog.checkLineMatch()) |info| return info;
  21f91e:	66 8b 85 18 f4 ff ff 	mov    ax,WORD PTR [rbp-0xbe8]
  21f925:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21f92c:	66 89 85 dc ea ff ff 	mov    WORD PTR [rbp-0x1524],ax
  21f933:	e8 58 c3 fe ff       	call   20bc90 <__zig_return_error>
  21f938:	b9 30 00 00 00       	mov    ecx,0x30
  21f93d:	89 ca                	mov    edx,ecx
  21f93f:	48 8d bd b0 f3 ff ff 	lea    rdi,[rbp-0xc50]
  21f946:	66 8b 85 dc ea ff ff 	mov    ax,WORD PTR [rbp-0x1524]
  21f94d:	66 89 85 b0 f3 ff ff 	mov    WORD PTR [rbp-0xc50],ax
  21f954:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21f95b:	48 89 bd d0 ea ff ff 	mov    QWORD PTR [rbp-0x1530],rdi
  21f962:	48 89 f7             	mov    rdi,rsi
  21f965:	48 8b b5 d0 ea ff ff 	mov    rsi,QWORD PTR [rbp-0x1530]
  21f96c:	e8 8f 4f 01 00       	call   234900 <memcpy>
  21f971:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21f978:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21f97f:	5d                   	pop    rbp
  21f980:	c3                   	ret    
  21f981:	48 8d 85 18 f4 ff ff 	lea    rax,[rbp-0xbe8]
  21f988:	48 83 c0 08          	add    rax,0x8
  21f98c:	f6 85 48 f4 ff ff 01 	test   BYTE PTR [rbp-0xbb8],0x1
  21f993:	48 89 85 c8 ea ff ff 	mov    QWORD PTR [rbp-0x1538],rax
  21f99a:	75 05                	jne    21f9a1 <getLineNumberInfo+0x1d51>
  21f99c:	e9 b4 00 00 00       	jmp    21fa55 <getLineNumberInfo+0x1e05>
  21f9a1:	b8 30 00 00 00       	mov    eax,0x30
  21f9a6:	89 c2                	mov    edx,eax
  21f9a8:	48 8d 8d 80 f3 ff ff 	lea    rcx,[rbp-0xc80]
  21f9af:	b8 28 00 00 00       	mov    eax,0x28
  21f9b4:	89 c6                	mov    esi,eax
  21f9b6:	48 8d bd c0 ee ff ff 	lea    rdi,[rbp-0x1140]
  21f9bd:	4c 8b 85 c8 ea ff ff 	mov    r8,QWORD PTR [rbp-0x1538]
  21f9c4:	49 89 f9             	mov    r9,rdi
  21f9c7:	48 89 bd c0 ea ff ff 	mov    QWORD PTR [rbp-0x1540],rdi
  21f9ce:	4c 89 cf             	mov    rdi,r9
  21f9d1:	48 89 b5 b8 ea ff ff 	mov    QWORD PTR [rbp-0x1548],rsi
  21f9d8:	4c 89 c6             	mov    rsi,r8
  21f9db:	4c 8b 85 b8 ea ff ff 	mov    r8,QWORD PTR [rbp-0x1548]
  21f9e2:	48 89 95 b0 ea ff ff 	mov    QWORD PTR [rbp-0x1550],rdx
  21f9e9:	4c 89 c2             	mov    rdx,r8
  21f9ec:	48 89 8d a8 ea ff ff 	mov    QWORD PTR [rbp-0x1558],rcx
  21f9f3:	e8 08 4f 01 00       	call   234900 <memcpy>
  21f9f8:	66 c7 85 80 f3 ff ff 	mov    WORD PTR [rbp-0xc80],0x0
  21f9ff:	00 00 
  21fa01:	48 8b 8d a8 ea ff ff 	mov    rcx,QWORD PTR [rbp-0x1558]
  21fa08:	48 83 c1 08          	add    rcx,0x8
  21fa0c:	48 8b 95 c0 ea ff ff 	mov    rdx,QWORD PTR [rbp-0x1540]
  21fa13:	48 89 cf             	mov    rdi,rcx
  21fa16:	48 89 d6             	mov    rsi,rdx
  21fa19:	48 8b 95 b8 ea ff ff 	mov    rdx,QWORD PTR [rbp-0x1548]
  21fa20:	e8 db 4e 01 00       	call   234900 <memcpy>
  21fa25:	48 8b 8d a8 ea ff ff 	mov    rcx,QWORD PTR [rbp-0x1558]
  21fa2c:	48 8b 95 60 ee ff ff 	mov    rdx,QWORD PTR [rbp-0x11a0]
  21fa33:	48 89 d7             	mov    rdi,rdx
  21fa36:	48 89 ce             	mov    rsi,rcx
  21fa39:	48 8b 95 b0 ea ff ff 	mov    rdx,QWORD PTR [rbp-0x1550]
  21fa40:	e8 bb 4e 01 00       	call   234900 <memcpy>
  21fa45:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21fa4c:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21fa53:	5d                   	pop    rbp
  21fa54:	c3                   	ret    
  21fa55:	eb 00                	jmp    21fa57 <getLineNumberInfo+0x1e07>
                prog.basic_block = false;
  21fa57:	c6 85 a9 ef ff ff 00 	mov    BYTE PTR [rbp-0x1057],0x0
            } else if (opcode >= opcode_base) {
  21fa5e:	e9 d1 06 00 00       	jmp    220134 <getLineNumberInfo+0x24e4>
                switch (opcode) {
  21fa63:	8a 85 5f ef ff ff    	mov    al,BYTE PTR [rbp-0x10a1]
  21fa69:	04 ff                	add    al,0xff
  21fa6b:	0f b6 c8             	movzx  ecx,al
  21fa6e:	89 ca                	mov    edx,ecx
  21fa70:	2c 09                	sub    al,0x9
  21fa72:	48 89 95 a0 ea ff ff 	mov    QWORD PTR [rbp-0x1560],rdx
  21fa79:	88 85 9f ea ff ff    	mov    BYTE PTR [rbp-0x1561],al
  21fa7f:	77 17                	ja     21fa98 <getLineNumberInfo+0x1e48>
  21fa81:	48 8d 05 1c 13 fe ff 	lea    rax,[rip+0xfffffffffffe131c]        # 200da4 <__unnamed_181+0xec>
  21fa88:	48 8b 8d a0 ea ff ff 	mov    rcx,QWORD PTR [rbp-0x1560]
  21fa8f:	48 63 14 88          	movsxd rdx,DWORD PTR [rax+rcx*4]
  21fa93:	48 01 c2             	add    rdx,rax
  21fa96:	ff e2                	jmp    rdx
                        if (opcode - 1 >= standard_opcode_lengths.len) return error.InvalidDebugInfo;
  21fa98:	8a 85 5f ef ff ff    	mov    al,BYTE PTR [rbp-0x10a1]
  21fa9e:	2c 01                	sub    al,0x1
  21faa0:	0f 92 c1             	setb   cl
  21faa3:	f6 c1 01             	test   cl,0x1
  21faa6:	88 85 9e ea ff ff    	mov    BYTE PTR [rbp-0x1562],al
  21faac:	0f 85 5f 0b 00 00    	jne    220611 <getLineNumberInfo+0x29c1>
  21fab2:	e9 6a 0b 00 00       	jmp    220621 <getLineNumberInfo+0x29d1>
  21fab7:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21fabe:	e8 cd c1 fe ff       	call   20bc90 <__zig_return_error>
  21fac3:	48 8d 3d 3e 99 fe ff 	lea    rdi,[rip+0xfffffffffffe993e]        # 209408 <__unnamed_127>
  21faca:	b8 30 00 00 00       	mov    eax,0x30
  21facf:	89 c2                	mov    edx,eax
  21fad1:	48 8b 8d 60 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x11a0]
  21fad8:	48 89 bd 90 ea ff ff 	mov    QWORD PTR [rbp-0x1570],rdi
  21fadf:	48 89 cf             	mov    rdi,rcx
  21fae2:	48 8b b5 90 ea ff ff 	mov    rsi,QWORD PTR [rbp-0x1570]
  21fae9:	e8 12 4e 01 00       	call   234900 <memcpy>
  21faee:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21faf5:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21fafc:	5d                   	pop    rbp
  21fafd:	c3                   	ret    
  21fafe:	eb 00                	jmp    21fb00 <getLineNumberInfo+0x1eb0>
                        const len_bytes = standard_opcode_lengths[opcode - 1];
  21fb00:	8a 85 5f ef ff ff    	mov    al,BYTE PTR [rbp-0x10a1]
  21fb06:	2c 01                	sub    al,0x1
  21fb08:	0f 92 c1             	setb   cl
  21fb0b:	f6 c1 01             	test   cl,0x1
  21fb0e:	88 85 8f ea ff ff    	mov    BYTE PTR [rbp-0x1571],al
  21fb14:	0f 85 27 0b 00 00    	jne    220641 <getLineNumberInfo+0x29f1>
  21fb1a:	e9 32 0b 00 00       	jmp    220651 <getLineNumberInfo+0x2a01>
                        try in_file.seekForward(len_bytes);
  21fb1f:	66 8b 85 7e f3 ff ff 	mov    ax,WORD PTR [rbp-0xc82]
  21fb26:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21fb2d:	66 89 85 8c ea ff ff 	mov    WORD PTR [rbp-0x1574],ax
  21fb34:	e8 57 c1 fe ff       	call   20bc90 <__zig_return_error>
  21fb39:	b9 30 00 00 00       	mov    ecx,0x30
  21fb3e:	89 ca                	mov    edx,ecx
  21fb40:	48 8d bd 48 f3 ff ff 	lea    rdi,[rbp-0xcb8]
  21fb47:	66 8b 85 8c ea ff ff 	mov    ax,WORD PTR [rbp-0x1574]
  21fb4e:	66 89 85 48 f3 ff ff 	mov    WORD PTR [rbp-0xcb8],ax
  21fb55:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21fb5c:	48 89 bd 80 ea ff ff 	mov    QWORD PTR [rbp-0x1580],rdi
  21fb63:	48 89 f7             	mov    rdi,rsi
  21fb66:	48 8b b5 80 ea ff ff 	mov    rsi,QWORD PTR [rbp-0x1580]
  21fb6d:	e8 8e 4d 01 00       	call   234900 <memcpy>
  21fb72:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21fb79:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21fb80:	5d                   	pop    rbp
  21fb81:	c3                   	ret    
                switch (opcode) {
  21fb82:	e9 ab 05 00 00       	jmp    220132 <getLineNumberInfo+0x24e2>
  21fb87:	48 8d bd 10 f3 ff ff 	lea    rdi,[rbp-0xcf0]
  21fb8e:	48 8d 95 88 ef ff ff 	lea    rdx,[rbp-0x1078]
                        if (try prog.checkLineMatch()) |info| return info;
  21fb95:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21fb9c:	e8 6f 2d 00 00       	call   222910 <LineNumberProgram_checkLineMatch>
  21fba1:	66 83 bd 10 f3 ff ff 	cmp    WORD PTR [rbp-0xcf0],0x0
  21fba8:	00 
  21fba9:	74 63                	je     21fc0e <getLineNumberInfo+0x1fbe>
  21fbab:	66 8b 85 10 f3 ff ff 	mov    ax,WORD PTR [rbp-0xcf0]
  21fbb2:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21fbb9:	66 89 85 7e ea ff ff 	mov    WORD PTR [rbp-0x1582],ax
  21fbc0:	e8 cb c0 fe ff       	call   20bc90 <__zig_return_error>
  21fbc5:	b9 30 00 00 00       	mov    ecx,0x30
  21fbca:	89 ca                	mov    edx,ecx
  21fbcc:	48 8d bd a8 f2 ff ff 	lea    rdi,[rbp-0xd58]
  21fbd3:	66 8b 85 7e ea ff ff 	mov    ax,WORD PTR [rbp-0x1582]
  21fbda:	66 89 85 a8 f2 ff ff 	mov    WORD PTR [rbp-0xd58],ax
  21fbe1:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21fbe8:	48 89 bd 70 ea ff ff 	mov    QWORD PTR [rbp-0x1590],rdi
  21fbef:	48 89 f7             	mov    rdi,rsi
  21fbf2:	48 8b b5 70 ea ff ff 	mov    rsi,QWORD PTR [rbp-0x1590]
  21fbf9:	e8 02 4d 01 00       	call   234900 <memcpy>
  21fbfe:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21fc05:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21fc0c:	5d                   	pop    rbp
  21fc0d:	c3                   	ret    
  21fc0e:	48 8d 85 10 f3 ff ff 	lea    rax,[rbp-0xcf0]
  21fc15:	48 83 c0 08          	add    rax,0x8
  21fc19:	f6 85 40 f3 ff ff 01 	test   BYTE PTR [rbp-0xcc0],0x1
  21fc20:	48 89 85 68 ea ff ff 	mov    QWORD PTR [rbp-0x1598],rax
  21fc27:	75 05                	jne    21fc2e <getLineNumberInfo+0x1fde>
  21fc29:	e9 b4 00 00 00       	jmp    21fce2 <getLineNumberInfo+0x2092>
  21fc2e:	b8 30 00 00 00       	mov    eax,0x30
  21fc33:	89 c2                	mov    edx,eax
  21fc35:	48 8d 8d 78 f2 ff ff 	lea    rcx,[rbp-0xd88]
  21fc3c:	b8 28 00 00 00       	mov    eax,0x28
  21fc41:	89 c6                	mov    esi,eax
  21fc43:	48 8d bd 90 ee ff ff 	lea    rdi,[rbp-0x1170]
  21fc4a:	4c 8b 85 68 ea ff ff 	mov    r8,QWORD PTR [rbp-0x1598]
  21fc51:	49 89 f9             	mov    r9,rdi
  21fc54:	48 89 bd 60 ea ff ff 	mov    QWORD PTR [rbp-0x15a0],rdi
  21fc5b:	4c 89 cf             	mov    rdi,r9
  21fc5e:	48 89 b5 58 ea ff ff 	mov    QWORD PTR [rbp-0x15a8],rsi
  21fc65:	4c 89 c6             	mov    rsi,r8
  21fc68:	4c 8b 85 58 ea ff ff 	mov    r8,QWORD PTR [rbp-0x15a8]
  21fc6f:	48 89 95 50 ea ff ff 	mov    QWORD PTR [rbp-0x15b0],rdx
  21fc76:	4c 89 c2             	mov    rdx,r8
  21fc79:	48 89 8d 48 ea ff ff 	mov    QWORD PTR [rbp-0x15b8],rcx
  21fc80:	e8 7b 4c 01 00       	call   234900 <memcpy>
  21fc85:	66 c7 85 78 f2 ff ff 	mov    WORD PTR [rbp-0xd88],0x0
  21fc8c:	00 00 
  21fc8e:	48 8b 8d 48 ea ff ff 	mov    rcx,QWORD PTR [rbp-0x15b8]
  21fc95:	48 83 c1 08          	add    rcx,0x8
  21fc99:	48 8b 95 60 ea ff ff 	mov    rdx,QWORD PTR [rbp-0x15a0]
  21fca0:	48 89 cf             	mov    rdi,rcx
  21fca3:	48 89 d6             	mov    rsi,rdx
  21fca6:	48 8b 95 58 ea ff ff 	mov    rdx,QWORD PTR [rbp-0x15a8]
  21fcad:	e8 4e 4c 01 00       	call   234900 <memcpy>
  21fcb2:	48 8b 8d 48 ea ff ff 	mov    rcx,QWORD PTR [rbp-0x15b8]
  21fcb9:	48 8b 95 60 ee ff ff 	mov    rdx,QWORD PTR [rbp-0x11a0]
  21fcc0:	48 89 d7             	mov    rdi,rdx
  21fcc3:	48 89 ce             	mov    rsi,rcx
  21fcc6:	48 8b 95 50 ea ff ff 	mov    rdx,QWORD PTR [rbp-0x15b0]
  21fccd:	e8 2e 4c 01 00       	call   234900 <memcpy>
  21fcd2:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21fcd9:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21fce0:	5d                   	pop    rbp
  21fce1:	c3                   	ret    
  21fce2:	eb 00                	jmp    21fce4 <getLineNumberInfo+0x2094>
                        prog.basic_block = false;
  21fce4:	c6 85 a9 ef ff ff 00 	mov    BYTE PTR [rbp-0x1057],0x0
                switch (opcode) {
  21fceb:	e9 42 04 00 00       	jmp    220132 <getLineNumberInfo+0x24e2>
  21fcf0:	48 8d bd 68 f2 ff ff 	lea    rdi,[rbp-0xd98]
                        const arg = try readULeb128(in_stream);
  21fcf7:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21fcfe:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21fd05:	e8 c6 73 ff ff       	call   2170d0 <readULeb128>
  21fd0a:	66 83 bd 68 f2 ff ff 	cmp    WORD PTR [rbp-0xd98],0x0
  21fd11:	00 
  21fd12:	74 63                	je     21fd77 <getLineNumberInfo+0x2127>
  21fd14:	66 8b 85 68 f2 ff ff 	mov    ax,WORD PTR [rbp-0xd98]
  21fd1b:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21fd22:	66 89 85 46 ea ff ff 	mov    WORD PTR [rbp-0x15ba],ax
  21fd29:	e8 62 bf fe ff       	call   20bc90 <__zig_return_error>
  21fd2e:	b9 30 00 00 00       	mov    ecx,0x30
  21fd33:	89 ca                	mov    edx,ecx
  21fd35:	48 8d bd 28 f2 ff ff 	lea    rdi,[rbp-0xdd8]
  21fd3c:	66 8b 85 46 ea ff ff 	mov    ax,WORD PTR [rbp-0x15ba]
  21fd43:	66 89 85 28 f2 ff ff 	mov    WORD PTR [rbp-0xdd8],ax
  21fd4a:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21fd51:	48 89 bd 38 ea ff ff 	mov    QWORD PTR [rbp-0x15c8],rdi
  21fd58:	48 89 f7             	mov    rdi,rsi
  21fd5b:	48 8b b5 38 ea ff ff 	mov    rsi,QWORD PTR [rbp-0x15c8]
  21fd62:	e8 99 4b 01 00       	call   234900 <memcpy>
  21fd67:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21fd6e:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21fd75:	5d                   	pop    rbp
  21fd76:	c3                   	ret    
  21fd77:	48 8d 85 88 ef ff ff 	lea    rax,[rbp-0x1078]
  21fd7e:	48 8b 8d 70 f2 ff ff 	mov    rcx,QWORD PTR [rbp-0xd90]
  21fd85:	48 89 8d 88 ee ff ff 	mov    QWORD PTR [rbp-0x1178],rcx
                        prog.address += arg * minimum_instruction_length;
  21fd8c:	48 8b 8d 88 ef ff ff 	mov    rcx,QWORD PTR [rbp-0x1078]
  21fd93:	48 8b 95 88 ee ff ff 	mov    rdx,QWORD PTR [rbp-0x1178]
  21fd9a:	0f b6 b5 67 f0 ff ff 	movzx  esi,BYTE PTR [rbp-0xf99]
  21fda1:	89 f7                	mov    edi,esi
  21fda3:	48 89 85 30 ea ff ff 	mov    QWORD PTR [rbp-0x15d0],rax
  21fdaa:	48 89 d0             	mov    rax,rdx
  21fdad:	48 f7 e7             	mul    rdi
  21fdb0:	41 0f 90 c0          	seto   r8b
  21fdb4:	48 89 8d 28 ea ff ff 	mov    QWORD PTR [rbp-0x15d8],rcx
  21fdbb:	48 89 85 20 ea ff ff 	mov    QWORD PTR [rbp-0x15e0],rax
  21fdc2:	44 88 85 1f ea ff ff 	mov    BYTE PTR [rbp-0x15e1],r8b
  21fdc9:	0f 80 fa 08 00 00    	jo     2206c9 <getLineNumberInfo+0x2a79>
  21fdcf:	e9 05 09 00 00       	jmp    2206d9 <getLineNumberInfo+0x2a89>
  21fdd4:	48 8d bd 18 f2 ff ff 	lea    rdi,[rbp-0xde8]
                        const arg = try readILeb128(in_stream);
  21fddb:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21fde2:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21fde9:	e8 12 31 00 00       	call   222f00 <readILeb128>
  21fdee:	66 83 bd 18 f2 ff ff 	cmp    WORD PTR [rbp-0xde8],0x0
  21fdf5:	00 
  21fdf6:	74 63                	je     21fe5b <getLineNumberInfo+0x220b>
  21fdf8:	66 8b 85 18 f2 ff ff 	mov    ax,WORD PTR [rbp-0xde8]
  21fdff:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21fe06:	66 89 85 1c ea ff ff 	mov    WORD PTR [rbp-0x15e4],ax
  21fe0d:	e8 7e be fe ff       	call   20bc90 <__zig_return_error>
  21fe12:	b9 30 00 00 00       	mov    ecx,0x30
  21fe17:	89 ca                	mov    edx,ecx
  21fe19:	48 8d bd d8 f1 ff ff 	lea    rdi,[rbp-0xe28]
  21fe20:	66 8b 85 1c ea ff ff 	mov    ax,WORD PTR [rbp-0x15e4]
  21fe27:	66 89 85 d8 f1 ff ff 	mov    WORD PTR [rbp-0xe28],ax
  21fe2e:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21fe35:	48 89 bd 10 ea ff ff 	mov    QWORD PTR [rbp-0x15f0],rdi
  21fe3c:	48 89 f7             	mov    rdi,rsi
  21fe3f:	48 8b b5 10 ea ff ff 	mov    rsi,QWORD PTR [rbp-0x15f0]
  21fe46:	e8 b5 4a 01 00       	call   234900 <memcpy>
  21fe4b:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21fe52:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21fe59:	5d                   	pop    rbp
  21fe5a:	c3                   	ret    
  21fe5b:	48 8d 85 88 ef ff ff 	lea    rax,[rbp-0x1078]
  21fe62:	48 8b 8d 20 f2 ff ff 	mov    rcx,QWORD PTR [rbp-0xde0]
  21fe69:	48 89 8d 80 ee ff ff 	mov    QWORD PTR [rbp-0x1180],rcx
                        prog.line += arg;
  21fe70:	48 83 c0 10          	add    rax,0x10
  21fe74:	48 8b 8d 98 ef ff ff 	mov    rcx,QWORD PTR [rbp-0x1068]
  21fe7b:	48 03 8d 80 ee ff ff 	add    rcx,QWORD PTR [rbp-0x1180]
  21fe82:	0f 90 c2             	seto   dl
  21fe85:	48 89 85 08 ea ff ff 	mov    QWORD PTR [rbp-0x15f8],rax
  21fe8c:	48 89 8d 00 ea ff ff 	mov    QWORD PTR [rbp-0x1600],rcx
  21fe93:	88 95 ff e9 ff ff    	mov    BYTE PTR [rbp-0x1601],dl
  21fe99:	0f 80 85 08 00 00    	jo     220724 <getLineNumberInfo+0x2ad4>
  21fe9f:	e9 90 08 00 00       	jmp    220734 <getLineNumberInfo+0x2ae4>
  21fea4:	48 8d bd c8 f1 ff ff 	lea    rdi,[rbp-0xe38]
                        const arg = try readULeb128(in_stream);
  21feab:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21feb2:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21feb9:	e8 12 72 ff ff       	call   2170d0 <readULeb128>
  21febe:	66 83 bd c8 f1 ff ff 	cmp    WORD PTR [rbp-0xe38],0x0
  21fec5:	00 
  21fec6:	74 63                	je     21ff2b <getLineNumberInfo+0x22db>
  21fec8:	66 8b 85 c8 f1 ff ff 	mov    ax,WORD PTR [rbp-0xe38]
  21fecf:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21fed6:	66 89 85 fc e9 ff ff 	mov    WORD PTR [rbp-0x1604],ax
  21fedd:	e8 ae bd fe ff       	call   20bc90 <__zig_return_error>
  21fee2:	b9 30 00 00 00       	mov    ecx,0x30
  21fee7:	89 ca                	mov    edx,ecx
  21fee9:	48 8d bd 88 f1 ff ff 	lea    rdi,[rbp-0xe78]
  21fef0:	66 8b 85 fc e9 ff ff 	mov    ax,WORD PTR [rbp-0x1604]
  21fef7:	66 89 85 88 f1 ff ff 	mov    WORD PTR [rbp-0xe78],ax
  21fefe:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21ff05:	48 89 bd f0 e9 ff ff 	mov    QWORD PTR [rbp-0x1610],rdi
  21ff0c:	48 89 f7             	mov    rdi,rsi
  21ff0f:	48 8b b5 f0 e9 ff ff 	mov    rsi,QWORD PTR [rbp-0x1610]
  21ff16:	e8 e5 49 01 00       	call   234900 <memcpy>
  21ff1b:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21ff22:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21ff29:	5d                   	pop    rbp
  21ff2a:	c3                   	ret    
  21ff2b:	48 8b 85 d0 f1 ff ff 	mov    rax,QWORD PTR [rbp-0xe30]
  21ff32:	48 89 85 78 ee ff ff 	mov    QWORD PTR [rbp-0x1188],rax
                        prog.file = arg;
  21ff39:	48 8b 85 78 ee ff ff 	mov    rax,QWORD PTR [rbp-0x1188]
  21ff40:	48 89 85 90 ef ff ff 	mov    QWORD PTR [rbp-0x1070],rax
                switch (opcode) {
  21ff47:	e9 e6 01 00 00       	jmp    220132 <getLineNumberInfo+0x24e2>
  21ff4c:	48 8d bd 78 f1 ff ff 	lea    rdi,[rbp-0xe88]
                        const arg = try readULeb128(in_stream);
  21ff53:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21ff5a:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21ff61:	e8 6a 71 ff ff       	call   2170d0 <readULeb128>
  21ff66:	66 83 bd 78 f1 ff ff 	cmp    WORD PTR [rbp-0xe88],0x0
  21ff6d:	00 
  21ff6e:	74 63                	je     21ffd3 <getLineNumberInfo+0x2383>
  21ff70:	66 8b 85 78 f1 ff ff 	mov    ax,WORD PTR [rbp-0xe88]
  21ff77:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21ff7e:	66 89 85 ee e9 ff ff 	mov    WORD PTR [rbp-0x1612],ax
  21ff85:	e8 06 bd fe ff       	call   20bc90 <__zig_return_error>
  21ff8a:	b9 30 00 00 00       	mov    ecx,0x30
  21ff8f:	89 ca                	mov    edx,ecx
  21ff91:	48 8d bd 38 f1 ff ff 	lea    rdi,[rbp-0xec8]
  21ff98:	66 8b 85 ee e9 ff ff 	mov    ax,WORD PTR [rbp-0x1612]
  21ff9f:	66 89 85 38 f1 ff ff 	mov    WORD PTR [rbp-0xec8],ax
  21ffa6:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21ffad:	48 89 bd e0 e9 ff ff 	mov    QWORD PTR [rbp-0x1620],rdi
  21ffb4:	48 89 f7             	mov    rdi,rsi
  21ffb7:	48 8b b5 e0 e9 ff ff 	mov    rsi,QWORD PTR [rbp-0x1620]
  21ffbe:	e8 3d 49 01 00       	call   234900 <memcpy>
  21ffc3:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21ffca:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21ffd1:	5d                   	pop    rbp
  21ffd2:	c3                   	ret    
  21ffd3:	48 8b 85 80 f1 ff ff 	mov    rax,QWORD PTR [rbp-0xe80]
  21ffda:	48 89 85 70 ee ff ff 	mov    QWORD PTR [rbp-0x1190],rax
                        prog.column = arg;
  21ffe1:	48 8b 85 70 ee ff ff 	mov    rax,QWORD PTR [rbp-0x1190]
  21ffe8:	48 89 85 a0 ef ff ff 	mov    QWORD PTR [rbp-0x1060],rax
                switch (opcode) {
  21ffef:	e9 3e 01 00 00       	jmp    220132 <getLineNumberInfo+0x24e2>
                        prog.is_stmt = !prog.is_stmt;
  21fff4:	8a 85 a8 ef ff ff    	mov    al,BYTE PTR [rbp-0x1058]
  21fffa:	34 01                	xor    al,0x1
  21fffc:	24 01                	and    al,0x1
  21fffe:	88 85 a8 ef ff ff    	mov    BYTE PTR [rbp-0x1058],al
                switch (opcode) {
  220004:	e9 29 01 00 00       	jmp    220132 <getLineNumberInfo+0x24e2>
                        prog.basic_block = true;
  220009:	c6 85 a9 ef ff ff 01 	mov    BYTE PTR [rbp-0x1057],0x1
                switch (opcode) {
  220010:	e9 1d 01 00 00       	jmp    220132 <getLineNumberInfo+0x24e2>
  220015:	b0 ff                	mov    al,0xff
                        const inc_addr = minimum_instruction_length * ((255 - opcode_base) / line_range);
  220017:	8a 8d 67 f0 ff ff    	mov    cl,BYTE PTR [rbp-0xf99]
  22001d:	2a 85 63 f0 ff ff    	sub    al,BYTE PTR [rbp-0xf9d]
  220023:	0f 92 c2             	setb   dl
  220026:	f6 c2 01             	test   dl,0x1
  220029:	88 8d df e9 ff ff    	mov    BYTE PTR [rbp-0x1621],cl
  22002f:	88 85 de e9 ff ff    	mov    BYTE PTR [rbp-0x1622],al
  220035:	0f 85 0f 07 00 00    	jne    22074a <getLineNumberInfo+0x2afa>
  22003b:	e9 1a 07 00 00       	jmp    22075a <getLineNumberInfo+0x2b0a>
  220040:	48 8d 85 30 f1 ff ff 	lea    rax,[rbp-0xed0]
                        const arg = try in_stream.readInt(st.elf.endian, u16);
  220047:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  22004e:	48 8b 8d f0 f0 ff ff 	mov    rcx,QWORD PTR [rbp-0xf10]
  220055:	40 8a 71 12          	mov    sil,BYTE PTR [rcx+0x12]
  220059:	40 0f b6 ce          	movzx  ecx,sil
  22005d:	48 8d bd 30 f1 ff ff 	lea    rdi,[rbp-0xed0]
  220064:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  22006b:	48 89 85 d0 e9 ff ff 	mov    QWORD PTR [rbp-0x1630],rax
  220072:	e8 b9 3c ff ff       	call   213d30 <InStream(ReadError)_readInt>
  220077:	66 83 bd 30 f1 ff ff 	cmp    WORD PTR [rbp-0xed0],0x0
  22007e:	00 
  22007f:	74 63                	je     2200e4 <getLineNumberInfo+0x2494>
  220081:	66 8b 85 30 f1 ff ff 	mov    ax,WORD PTR [rbp-0xed0]
  220088:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  22008f:	66 89 85 ce e9 ff ff 	mov    WORD PTR [rbp-0x1632],ax
  220096:	e8 f5 bb fe ff       	call   20bc90 <__zig_return_error>
  22009b:	b9 30 00 00 00       	mov    ecx,0x30
  2200a0:	89 ca                	mov    edx,ecx
  2200a2:	48 8d bd f8 f0 ff ff 	lea    rdi,[rbp-0xf08]
  2200a9:	66 8b 85 ce e9 ff ff 	mov    ax,WORD PTR [rbp-0x1632]
  2200b0:	66 89 85 f8 f0 ff ff 	mov    WORD PTR [rbp-0xf08],ax
  2200b7:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  2200be:	48 89 bd c0 e9 ff ff 	mov    QWORD PTR [rbp-0x1640],rdi
  2200c5:	48 89 f7             	mov    rdi,rsi
  2200c8:	48 8b b5 c0 e9 ff ff 	mov    rsi,QWORD PTR [rbp-0x1640]
  2200cf:	e8 2c 48 01 00       	call   234900 <memcpy>
  2200d4:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  2200db:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  2200e2:	5d                   	pop    rbp
  2200e3:	c3                   	ret    
  2200e4:	48 8d 85 88 ef ff ff 	lea    rax,[rbp-0x1078]
  2200eb:	66 8b 8d 32 f1 ff ff 	mov    cx,WORD PTR [rbp-0xece]
  2200f2:	66 89 8d 6c ee ff ff 	mov    WORD PTR [rbp-0x1194],cx
                        prog.address += arg;
  2200f9:	48 8b 95 88 ef ff ff 	mov    rdx,QWORD PTR [rbp-0x1078]
  220100:	0f b7 b5 6c ee ff ff 	movzx  esi,WORD PTR [rbp-0x1194]
  220107:	89 f7                	mov    edi,esi
  220109:	48 01 fa             	add    rdx,rdi
  22010c:	41 0f 92 c0          	setb   r8b
  220110:	48 89 85 b8 e9 ff ff 	mov    QWORD PTR [rbp-0x1648],rax
  220117:	48 89 95 b0 e9 ff ff 	mov    QWORD PTR [rbp-0x1650],rdx
  22011e:	44 88 85 af e9 ff ff 	mov    BYTE PTR [rbp-0x1651],r8b
  220125:	0f 82 04 07 00 00    	jb     22082f <getLineNumberInfo+0x2bdf>
  22012b:	e9 0f 07 00 00       	jmp    22083f <getLineNumberInfo+0x2bef>
                switch (opcode) {
  220130:	eb 00                	jmp    220132 <getLineNumberInfo+0x24e2>
            } else if (opcode >= opcode_base) {
  220132:	eb 00                	jmp    220134 <getLineNumberInfo+0x24e4>
            if (opcode == DW.LNS_extended_op) {
  220134:	eb 00                	jmp    220136 <getLineNumberInfo+0x24e6>
        while (true) {
  220136:	e9 67 ee ff ff       	jmp    21efa2 <getLineNumberInfo+0x1352>
    while (this_offset < debug_line_end) : (this_index += 1) {
  22013b:	48 8b 85 b0 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xf50]
  220142:	48 83 c0 01          	add    rax,0x1
  220146:	0f 92 c1             	setb   cl
  220149:	48 89 85 a0 e9 ff ff 	mov    QWORD PTR [rbp-0x1660],rax
  220150:	88 8d 9f e9 ff ff    	mov    BYTE PTR [rbp-0x1661],cl
  220156:	0f 82 f9 06 00 00    	jb     220855 <getLineNumberInfo+0x2c05>
  22015c:	e9 04 07 00 00       	jmp    220865 <getLineNumberInfo+0x2c15>
    return error.MissingDebugInfo;
  220161:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  220168:	e8 23 bb fe ff       	call   20bc90 <__zig_return_error>
  22016d:	48 8d 3d c4 92 fe ff 	lea    rdi,[rip+0xfffffffffffe92c4]        # 209438 <__unnamed_128>
  220174:	b8 30 00 00 00       	mov    eax,0x30
  220179:	89 c2                	mov    edx,eax
  22017b:	48 8b 8d 60 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x11a0]
  220182:	48 89 bd 90 e9 ff ff 	mov    QWORD PTR [rbp-0x1670],rdi
  220189:	48 89 cf             	mov    rdi,rcx
  22018c:	48 8b b5 90 e9 ff ff 	mov    rsi,QWORD PTR [rbp-0x1670]
  220193:	e8 68 47 01 00       	call   234900 <memcpy>
  220198:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  22019f:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  2201a6:	5d                   	pop    rbp
  2201a7:	c3                   	ret    
  2201a8:	48 8d 3d 19 30 02 00 	lea    rdi,[rip+0x23019]        # 2431c8 <__unnamed_4>
  2201af:	31 c0                	xor    eax,eax
  2201b1:	89 c6                	mov    esi,eax
    const debug_line_end = st.debug_line.offset + st.debug_line.size;
  2201b3:	e8 48 b4 fe ff       	call   20b600 <panic>
  2201b8:	48 8d 7d 90          	lea    rdi,[rbp-0x70]
  2201bc:	48 8b 85 38 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11c8]
  2201c3:	48 89 85 c0 f0 ff ff 	mov    QWORD PTR [rbp-0xf40],rax
    var this_offset = st.debug_line.offset;
  2201ca:	48 8b 8d f0 f0 ff ff 	mov    rcx,QWORD PTR [rbp-0xf10]
  2201d1:	48 8b 49 78          	mov    rcx,QWORD PTR [rcx+0x78]
  2201d5:	48 8b 49 18          	mov    rcx,QWORD PTR [rcx+0x18]
  2201d9:	48 89 8d b8 f0 ff ff 	mov    QWORD PTR [rbp-0xf48],rcx
    var this_index: usize = 0;
  2201e0:	48 c7 85 b0 f0 ff ff 	mov    QWORD PTR [rbp-0xf50],0x0
  2201e7:	00 00 00 00 
    var in_file_stream = io.FileInStream.init(in_file);
  2201eb:	48 8b b5 c8 f0 ff ff 	mov    rsi,QWORD PTR [rbp-0xf38]
  2201f2:	e8 99 37 ff ff       	call   213990 <FileInStream_init>
  2201f7:	48 8d 85 a0 f0 ff ff 	lea    rax,[rbp-0xf60]
  2201fe:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  220202:	48 89 8d a0 f0 ff ff 	mov    QWORD PTR [rbp-0xf60],rcx
  220209:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  22020d:	48 89 8d a8 f0 ff ff 	mov    QWORD PTR [rbp-0xf58],rcx
    const in_stream = &in_file_stream.stream;
  220214:	48 83 c0 08          	add    rax,0x8
  220218:	48 89 85 98 f0 ff ff 	mov    QWORD PTR [rbp-0xf68],rax
    while (this_offset < debug_line_end) : (this_index += 1) {
  22021f:	e9 4c db ff ff       	jmp    21dd70 <getLineNumberInfo+0x120>
  220224:	48 8d 3d 9d 2f 02 00 	lea    rdi,[rip+0x22f9d]        # 2431c8 <__unnamed_4>
  22022b:	31 c0                	xor    eax,eax
  22022d:	89 c6                	mov    esi,eax
        const next_offset = unit_length + (if (is_64) usize(12) else usize(4));
  22022f:	e8 cc b3 fe ff       	call   20b600 <panic>
  220234:	48 8b 85 e8 ed ff ff 	mov    rax,QWORD PTR [rbp-0x1218]
  22023b:	48 89 85 80 f0 ff ff 	mov    QWORD PTR [rbp-0xf80],rax
        if (compile_unit.index != this_index) {
  220242:	48 8b 8d e8 f0 ff ff 	mov    rcx,QWORD PTR [rbp-0xf18]
  220249:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
  22024d:	48 3b 8d b0 f0 ff ff 	cmp    rcx,QWORD PTR [rbp-0xf50]
  220254:	0f 85 36 dd ff ff    	jne    21df90 <getLineNumberInfo+0x340>
  22025a:	e9 5a dd ff ff       	jmp    21dfb9 <getLineNumberInfo+0x369>
  22025f:	48 8d 3d 62 2f 02 00 	lea    rdi,[rip+0x22f62]        # 2431c8 <__unnamed_4>
  220266:	31 c0                	xor    eax,eax
  220268:	89 c6                	mov    esi,eax
            this_offset += next_offset;
  22026a:	e8 91 b3 fe ff       	call   20b600 <panic>
  22026f:	48 8b 85 d8 ed ff ff 	mov    rax,QWORD PTR [rbp-0x1228]
  220276:	48 89 85 b8 f0 ff ff 	mov    QWORD PTR [rbp-0xf48],rax
            continue;
  22027d:	e9 b9 fe ff ff       	jmp    22013b <getLineNumberInfo+0x24eb>
  220282:	48 8d 3d 3f 2f 02 00 	lea    rdi,[rip+0x22f3f]        # 2431c8 <__unnamed_4>
  220289:	31 c0                	xor    eax,eax
  22028b:	89 c6                	mov    esi,eax
        const prog_start_offset = (try in_file.getPos()) + prologue_length;
  22028d:	e8 6e b3 fe ff       	call   20b600 <panic>
  220292:	48 8d bd e0 fd ff ff 	lea    rdi,[rbp-0x220]
  220299:	48 8b 85 58 ed ff ff 	mov    rax,QWORD PTR [rbp-0x12a8]
  2202a0:	48 89 85 68 f0 ff ff 	mov    QWORD PTR [rbp-0xf98],rax
        const minimum_instruction_length = try in_stream.readByte();
  2202a7:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  2202ae:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  2202b5:	e8 86 38 ff ff       	call   213b40 <InStream(ReadError)_readByte>
  2202ba:	66 83 bd e0 fd ff ff 	cmp    WORD PTR [rbp-0x220],0x0
  2202c1:	00 
  2202c2:	0f 85 59 e0 ff ff    	jne    21e321 <getLineNumberInfo+0x6d1>
  2202c8:	e9 b7 e0 ff ff       	jmp    21e384 <getLineNumberInfo+0x734>
  2202cd:	48 8d 3d f4 2e 02 00 	lea    rdi,[rip+0x22ef4]        # 2431c8 <__unnamed_4>
  2202d4:	31 c0                	xor    eax,eax
  2202d6:	89 c6                	mov    esi,eax
        const standard_opcode_lengths = try st.allocator().alloc(u8, opcode_base - 1);
  2202d8:	e8 23 b3 fe ff       	call   20b600 <panic>
  2202dd:	48 8d bd 48 fc ff ff 	lea    rdi,[rbp-0x3b8]
  2202e4:	8a 85 df ec ff ff    	mov    al,BYTE PTR [rbp-0x1321]
  2202ea:	0f b6 c8             	movzx  ecx,al
  2202ed:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  2202f4:	48 8b 95 e0 ec ff ff 	mov    rdx,QWORD PTR [rbp-0x1320]
  2202fb:	e8 a0 21 00 00       	call   2224a0 <Allocator_alloc.74>
  220300:	66 83 bd 48 fc ff ff 	cmp    WORD PTR [rbp-0x3b8],0x0
  220307:	00 
  220308:	0f 85 54 e4 ff ff    	jne    21e762 <getLineNumberInfo+0xb12>
  22030e:	e9 b2 e4 ff ff       	jmp    21e7c5 <getLineNumberInfo+0xb75>
  220313:	48 8d 3d ae 2e 02 00 	lea    rdi,[rip+0x22eae]        # 2431c8 <__unnamed_4>
  22031a:	31 c0                	xor    eax,eax
  22031c:	89 c6                	mov    esi,eax
            while (i < opcode_base - 1) : (i += 1) {
  22031e:	e8 dd b2 fe ff       	call   20b600 <panic>
  220323:	8a 85 c7 ec ff ff    	mov    al,BYTE PTR [rbp-0x1339]
  220329:	0f b6 c8             	movzx  ecx,al
  22032c:	89 ca                	mov    edx,ecx
  22032e:	48 8b b5 c8 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x1338]
  220335:	48 39 d6             	cmp    rsi,rdx
  220338:	0f 82 dc e4 ff ff    	jb     21e81a <getLineNumberInfo+0xbca>
  22033e:	e9 8f e5 ff ff       	jmp    21e8d2 <getLineNumberInfo+0xc82>
  220343:	48 8d 3d ae 30 02 00 	lea    rdi,[rip+0x230ae]        # 2433f8 <__unnamed_20>
  22034a:	31 c0                	xor    eax,eax
  22034c:	89 c6                	mov    esi,eax
                standard_opcode_lengths[i] = try in_stream.readByte();
  22034e:	e8 ad b2 fe ff       	call   20b600 <panic>
  220353:	48 8d bd f8 fb ff ff 	lea    rdi,[rbp-0x408]
  22035a:	48 8b 85 b8 ec ff ff 	mov    rax,QWORD PTR [rbp-0x1348]
  220361:	48 03 85 50 f0 ff ff 	add    rax,QWORD PTR [rbp-0xfb0]
  220368:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  22036f:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  220376:	48 89 85 a0 ec ff ff 	mov    QWORD PTR [rbp-0x1360],rax
  22037d:	e8 be 37 ff ff       	call   213b40 <InStream(ReadError)_readByte>
  220382:	66 83 bd f8 fb ff ff 	cmp    WORD PTR [rbp-0x408],0x0
  220389:	00 
  22038a:	0f 85 aa e4 ff ff    	jne    21e83a <getLineNumberInfo+0xbea>
  220390:	e9 08 e5 ff ff       	jmp    21e89d <getLineNumberInfo+0xc4d>
  220395:	48 8d 3d 2c 2e 02 00 	lea    rdi,[rip+0x22e2c]        # 2431c8 <__unnamed_4>
  22039c:	31 c0                	xor    eax,eax
  22039e:	89 c6                	mov    esi,eax
            while (i < opcode_base - 1) : (i += 1) {
  2203a0:	e8 5b b2 fe ff       	call   20b600 <panic>
  2203a5:	48 8b 85 98 ec ff ff 	mov    rax,QWORD PTR [rbp-0x1368]
  2203ac:	48 89 85 48 f0 ff ff 	mov    QWORD PTR [rbp-0xfb8],rax
  2203b3:	e9 34 e4 ff ff       	jmp    21e7ec <getLineNumberInfo+0xb9c>
  2203b8:	48 8d 3d 09 2e 02 00 	lea    rdi,[rip+0x22e09]        # 2431c8 <__unnamed_4>
  2203bf:	31 c0                	xor    eax,eax
  2203c1:	89 c6                	mov    esi,eax
                        const fwd_amt = math.cast(isize, op_size - 1) catch return error.InvalidDebugInfo;
  2203c3:	e8 38 b2 fe ff       	call   20b600 <panic>
  2203c8:	48 8d bd 68 f7 ff ff 	lea    rdi,[rbp-0x898]
  2203cf:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  2203d6:	48 8b 95 b0 eb ff ff 	mov    rdx,QWORD PTR [rbp-0x1450]
  2203dd:	e8 9e 24 00 00       	call   222880 <cast.75>
  2203e2:	66 83 bd 68 f7 ff ff 	cmp    WORD PTR [rbp-0x898],0x0
  2203e9:	00 
  2203ea:	0f 85 58 ee ff ff    	jne    21f248 <getLineNumberInfo+0x15f8>
  2203f0:	e9 9a ee ff ff       	jmp    21f28f <getLineNumberInfo+0x163f>
  2203f5:	48 8d 3d cc 2d 02 00 	lea    rdi,[rip+0x22dcc]        # 2431c8 <__unnamed_4>
  2203fc:	31 c0                	xor    eax,eax
  2203fe:	89 c6                	mov    esi,eax
                const adjusted_opcode = opcode - opcode_base;
  220400:	e8 fb b1 fe ff       	call   20b600 <panic>
  220405:	8a 85 df ea ff ff    	mov    al,BYTE PTR [rbp-0x1521]
  22040b:	88 85 ef ee ff ff    	mov    BYTE PTR [rbp-0x1111],al
                const inc_addr = minimum_instruction_length * (adjusted_opcode / line_range);
  220411:	8a 85 67 f0 ff ff    	mov    al,BYTE PTR [rbp-0xf99]
  220417:	8a 8d ef ee ff ff    	mov    cl,BYTE PTR [rbp-0x1111]
  22041d:	8a 95 64 f0 ff ff    	mov    dl,BYTE PTR [rbp-0xf9c]
  220423:	80 fa 00             	cmp    dl,0x0
  220426:	88 85 8f e9 ff ff    	mov    BYTE PTR [rbp-0x1671],al
  22042c:	88 8d 8e e9 ff ff    	mov    BYTE PTR [rbp-0x1672],cl
  220432:	88 95 8d e9 ff ff    	mov    BYTE PTR [rbp-0x1673],dl
  220438:	74 3c                	je     220476 <getLineNumberInfo+0x2826>
  22043a:	8a 85 8e e9 ff ff    	mov    al,BYTE PTR [rbp-0x1672]
  220440:	66 0f b6 c0          	movzx  ax,al
  220444:	8a 8d 8d e9 ff ff    	mov    cl,BYTE PTR [rbp-0x1673]
  22044a:	f6 f1                	div    cl
  22044c:	8a 95 8f e9 ff ff    	mov    dl,BYTE PTR [rbp-0x1671]
  220452:	88 85 8c e9 ff ff    	mov    BYTE PTR [rbp-0x1674],al
  220458:	88 d0                	mov    al,dl
  22045a:	40 8a b5 8c e9 ff ff 	mov    sil,BYTE PTR [rbp-0x1674]
  220461:	40 f6 e6             	mul    sil
  220464:	40 0f 90 c6          	seto   sil
  220468:	40 f6 c6 01          	test   sil,0x1
  22046c:	88 85 8b e9 ff ff    	mov    BYTE PTR [rbp-0x1675],al
  220472:	75 12                	jne    220486 <getLineNumberInfo+0x2836>
  220474:	eb 20                	jmp    220496 <getLineNumberInfo+0x2846>
  220476:	48 8d 3d c3 2d 02 00 	lea    rdi,[rip+0x22dc3]        # 243240 <__unnamed_7>
  22047d:	31 c0                	xor    eax,eax
  22047f:	89 c6                	mov    esi,eax
  220481:	e8 7a b1 fe ff       	call   20b600 <panic>
  220486:	48 8d 3d 3b 2d 02 00 	lea    rdi,[rip+0x22d3b]        # 2431c8 <__unnamed_4>
  22048d:	31 c0                	xor    eax,eax
  22048f:	89 c6                	mov    esi,eax
  220491:	e8 6a b1 fe ff       	call   20b600 <panic>
  220496:	8a 85 8b e9 ff ff    	mov    al,BYTE PTR [rbp-0x1675]
  22049c:	88 85 ee ee ff ff    	mov    BYTE PTR [rbp-0x1112],al
                const inc_line = i32(line_base) + i32(adjusted_opcode % line_range);
  2204a2:	0f be 8d 65 f0 ff ff 	movsx  ecx,BYTE PTR [rbp-0xf9b]
  2204a9:	8a 95 ef ee ff ff    	mov    dl,BYTE PTR [rbp-0x1111]
  2204af:	40 8a b5 64 f0 ff ff 	mov    sil,BYTE PTR [rbp-0xf9c]
  2204b6:	40 80 fe 00          	cmp    sil,0x0
  2204ba:	89 8d 84 e9 ff ff    	mov    DWORD PTR [rbp-0x167c],ecx
  2204c0:	88 95 83 e9 ff ff    	mov    BYTE PTR [rbp-0x167d],dl
  2204c6:	40 88 b5 82 e9 ff ff 	mov    BYTE PTR [rbp-0x167e],sil
  2204cd:	74 36                	je     220505 <getLineNumberInfo+0x28b5>
  2204cf:	8a 85 83 e9 ff ff    	mov    al,BYTE PTR [rbp-0x167d]
  2204d5:	66 0f b6 c0          	movzx  ax,al
  2204d9:	8a 8d 82 e9 ff ff    	mov    cl,BYTE PTR [rbp-0x167e]
  2204df:	f6 f1                	div    cl
  2204e1:	66 c1 e8 08          	shr    ax,0x8
  2204e5:	88 c2                	mov    dl,al
  2204e7:	0f b6 f2             	movzx  esi,dl
  2204ea:	8b bd 84 e9 ff ff    	mov    edi,DWORD PTR [rbp-0x167c]
  2204f0:	01 f7                	add    edi,esi
  2204f2:	0f 90 c2             	seto   dl
  2204f5:	89 bd 7c e9 ff ff    	mov    DWORD PTR [rbp-0x1684],edi
  2204fb:	88 95 7b e9 ff ff    	mov    BYTE PTR [rbp-0x1685],dl
  220501:	70 12                	jo     220515 <getLineNumberInfo+0x28c5>
  220503:	eb 20                	jmp    220525 <getLineNumberInfo+0x28d5>
  220505:	48 8d 3d ec 2d 02 00 	lea    rdi,[rip+0x22dec]        # 2432f8 <__unnamed_15>
  22050c:	31 c0                	xor    eax,eax
  22050e:	89 c6                	mov    esi,eax
  220510:	e8 eb b0 fe ff       	call   20b600 <panic>
  220515:	48 8d 3d ac 2c 02 00 	lea    rdi,[rip+0x22cac]        # 2431c8 <__unnamed_4>
  22051c:	31 c0                	xor    eax,eax
  22051e:	89 c6                	mov    esi,eax
  220520:	e8 db b0 fe ff       	call   20b600 <panic>
  220525:	48 8d 85 88 ef ff ff 	lea    rax,[rbp-0x1078]
  22052c:	8b 8d 7c e9 ff ff    	mov    ecx,DWORD PTR [rbp-0x1684]
  220532:	89 8d e8 ee ff ff    	mov    DWORD PTR [rbp-0x1118],ecx
                prog.line += inc_line;
  220538:	48 83 c0 10          	add    rax,0x10
  22053c:	48 8b 95 98 ef ff ff 	mov    rdx,QWORD PTR [rbp-0x1068]
  220543:	48 63 b5 e8 ee ff ff 	movsxd rsi,DWORD PTR [rbp-0x1118]
  22054a:	48 01 f2             	add    rdx,rsi
  22054d:	40 0f 90 c7          	seto   dil
  220551:	48 89 85 70 e9 ff ff 	mov    QWORD PTR [rbp-0x1690],rax
  220558:	48 89 95 68 e9 ff ff 	mov    QWORD PTR [rbp-0x1698],rdx
  22055f:	40 88 bd 67 e9 ff ff 	mov    BYTE PTR [rbp-0x1699],dil
  220566:	70 02                	jo     22056a <getLineNumberInfo+0x291a>
  220568:	eb 10                	jmp    22057a <getLineNumberInfo+0x292a>
  22056a:	48 8d 3d 57 2c 02 00 	lea    rdi,[rip+0x22c57]        # 2431c8 <__unnamed_4>
  220571:	31 c0                	xor    eax,eax
  220573:	89 c6                	mov    esi,eax
  220575:	e8 86 b0 fe ff       	call   20b600 <panic>
  22057a:	48 8d 85 88 ef ff ff 	lea    rax,[rbp-0x1078]
  220581:	48 8b 8d 70 e9 ff ff 	mov    rcx,QWORD PTR [rbp-0x1690]
  220588:	48 8b 95 68 e9 ff ff 	mov    rdx,QWORD PTR [rbp-0x1698]
  22058f:	48 89 11             	mov    QWORD PTR [rcx],rdx
                prog.address += inc_addr;
  220592:	48 8b b5 88 ef ff ff 	mov    rsi,QWORD PTR [rbp-0x1078]
  220599:	0f b6 bd ee ee ff ff 	movzx  edi,BYTE PTR [rbp-0x1112]
  2205a0:	41 89 f8             	mov    r8d,edi
  2205a3:	4c 01 c6             	add    rsi,r8
  2205a6:	41 0f 92 c1          	setb   r9b
  2205aa:	48 89 85 58 e9 ff ff 	mov    QWORD PTR [rbp-0x16a8],rax
  2205b1:	48 89 b5 50 e9 ff ff 	mov    QWORD PTR [rbp-0x16b0],rsi
  2205b8:	44 88 8d 4f e9 ff ff 	mov    BYTE PTR [rbp-0x16b1],r9b
  2205bf:	72 02                	jb     2205c3 <getLineNumberInfo+0x2973>
  2205c1:	eb 10                	jmp    2205d3 <getLineNumberInfo+0x2983>
  2205c3:	48 8d 3d fe 2b 02 00 	lea    rdi,[rip+0x22bfe]        # 2431c8 <__unnamed_4>
  2205ca:	31 c0                	xor    eax,eax
  2205cc:	89 c6                	mov    esi,eax
  2205ce:	e8 2d b0 fe ff       	call   20b600 <panic>
  2205d3:	48 8d bd 18 f4 ff ff 	lea    rdi,[rbp-0xbe8]
  2205da:	48 8d 95 88 ef ff ff 	lea    rdx,[rbp-0x1078]
  2205e1:	48 8b 85 58 e9 ff ff 	mov    rax,QWORD PTR [rbp-0x16a8]
  2205e8:	48 8b 8d 50 e9 ff ff 	mov    rcx,QWORD PTR [rbp-0x16b0]
  2205ef:	48 89 08             	mov    QWORD PTR [rax],rcx
                if (try prog.checkLineMatch()) |info| return info;
  2205f2:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  2205f9:	e8 12 23 00 00       	call   222910 <LineNumberProgram_checkLineMatch>
  2205fe:	66 83 bd 18 f4 ff ff 	cmp    WORD PTR [rbp-0xbe8],0x0
  220605:	00 
  220606:	0f 85 12 f3 ff ff    	jne    21f91e <getLineNumberInfo+0x1cce>
  22060c:	e9 70 f3 ff ff       	jmp    21f981 <getLineNumberInfo+0x1d31>
  220611:	48 8d 3d b0 2b 02 00 	lea    rdi,[rip+0x22bb0]        # 2431c8 <__unnamed_4>
  220618:	31 c0                	xor    eax,eax
  22061a:	89 c6                	mov    esi,eax
                        if (opcode - 1 >= standard_opcode_lengths.len) return error.InvalidDebugInfo;
  22061c:	e8 df af fe ff       	call   20b600 <panic>
  220621:	48 8b 85 58 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xfa8]
  220628:	8a 8d 9e ea ff ff    	mov    cl,BYTE PTR [rbp-0x1562]
  22062e:	0f b6 d1             	movzx  edx,cl
  220631:	89 d6                	mov    esi,edx
  220633:	48 39 c6             	cmp    rsi,rax
  220636:	0f 83 7b f4 ff ff    	jae    21fab7 <getLineNumberInfo+0x1e67>
  22063c:	e9 bd f4 ff ff       	jmp    21fafe <getLineNumberInfo+0x1eae>
  220641:	48 8d 3d 80 2b 02 00 	lea    rdi,[rip+0x22b80]        # 2431c8 <__unnamed_4>
  220648:	31 c0                	xor    eax,eax
  22064a:	89 c6                	mov    esi,eax
                        const len_bytes = standard_opcode_lengths[opcode - 1];
  22064c:	e8 af af fe ff       	call   20b600 <panic>
  220651:	8a 85 8f ea ff ff    	mov    al,BYTE PTR [rbp-0x1571]
  220657:	0f b6 c8             	movzx  ecx,al
  22065a:	89 ca                	mov    edx,ecx
  22065c:	48 3b 95 58 f0 ff ff 	cmp    rdx,QWORD PTR [rbp-0xfa8]
  220663:	48 89 95 40 e9 ff ff 	mov    QWORD PTR [rbp-0x16c0],rdx
  22066a:	72 10                	jb     22067c <getLineNumberInfo+0x2a2c>
  22066c:	48 8d 3d 85 2d 02 00 	lea    rdi,[rip+0x22d85]        # 2433f8 <__unnamed_20>
  220673:	31 c0                	xor    eax,eax
  220675:	89 c6                	mov    esi,eax
  220677:	e8 84 af fe ff       	call   20b600 <panic>
  22067c:	48 8b 85 50 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xfb0]
  220683:	48 8b 8d 40 e9 ff ff 	mov    rcx,QWORD PTR [rbp-0x16c0]
  22068a:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  22068d:	88 95 bf ee ff ff    	mov    BYTE PTR [rbp-0x1141],dl
                        try in_file.seekForward(len_bytes);
  220693:	48 8b b5 c8 f0 ff ff 	mov    rsi,QWORD PTR [rbp-0xf38]
  22069a:	0f b6 bd bf ee ff ff 	movzx  edi,BYTE PTR [rbp-0x1141]
  2206a1:	89 fa                	mov    edx,edi
  2206a3:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  2206aa:	e8 61 35 ff ff       	call   213c10 <File_seekForward>
  2206af:	66 89 85 7e f3 ff ff 	mov    WORD PTR [rbp-0xc82],ax
  2206b6:	66 83 bd 7e f3 ff ff 	cmp    WORD PTR [rbp-0xc82],0x0
  2206bd:	00 
  2206be:	0f 85 5b f4 ff ff    	jne    21fb1f <getLineNumberInfo+0x1ecf>
  2206c4:	e9 b9 f4 ff ff       	jmp    21fb82 <getLineNumberInfo+0x1f32>
  2206c9:	48 8d 3d f8 2a 02 00 	lea    rdi,[rip+0x22af8]        # 2431c8 <__unnamed_4>
  2206d0:	31 c0                	xor    eax,eax
  2206d2:	89 c6                	mov    esi,eax
                        prog.address += arg * minimum_instruction_length;
  2206d4:	e8 27 af fe ff       	call   20b600 <panic>
  2206d9:	48 8b 85 28 ea ff ff 	mov    rax,QWORD PTR [rbp-0x15d8]
  2206e0:	48 8b 8d 20 ea ff ff 	mov    rcx,QWORD PTR [rbp-0x15e0]
  2206e7:	48 01 c8             	add    rax,rcx
  2206ea:	0f 92 c2             	setb   dl
  2206ed:	48 89 85 38 e9 ff ff 	mov    QWORD PTR [rbp-0x16c8],rax
  2206f4:	88 95 37 e9 ff ff    	mov    BYTE PTR [rbp-0x16c9],dl
  2206fa:	72 02                	jb     2206fe <getLineNumberInfo+0x2aae>
  2206fc:	eb 10                	jmp    22070e <getLineNumberInfo+0x2abe>
  2206fe:	48 8d 3d c3 2a 02 00 	lea    rdi,[rip+0x22ac3]        # 2431c8 <__unnamed_4>
  220705:	31 c0                	xor    eax,eax
  220707:	89 c6                	mov    esi,eax
  220709:	e8 f2 ae fe ff       	call   20b600 <panic>
  22070e:	48 8b 85 30 ea ff ff 	mov    rax,QWORD PTR [rbp-0x15d0]
  220715:	48 8b 8d 38 e9 ff ff 	mov    rcx,QWORD PTR [rbp-0x16c8]
  22071c:	48 89 08             	mov    QWORD PTR [rax],rcx
                switch (opcode) {
  22071f:	e9 0e fa ff ff       	jmp    220132 <getLineNumberInfo+0x24e2>
  220724:	48 8d 3d 9d 2a 02 00 	lea    rdi,[rip+0x22a9d]        # 2431c8 <__unnamed_4>
  22072b:	31 c0                	xor    eax,eax
  22072d:	89 c6                	mov    esi,eax
                        prog.line += arg;
  22072f:	e8 cc ae fe ff       	call   20b600 <panic>
  220734:	48 8b 85 08 ea ff ff 	mov    rax,QWORD PTR [rbp-0x15f8]
  22073b:	48 8b 8d 00 ea ff ff 	mov    rcx,QWORD PTR [rbp-0x1600]
  220742:	48 89 08             	mov    QWORD PTR [rax],rcx
                switch (opcode) {
  220745:	e9 e8 f9 ff ff       	jmp    220132 <getLineNumberInfo+0x24e2>
  22074a:	48 8d 3d 77 2a 02 00 	lea    rdi,[rip+0x22a77]        # 2431c8 <__unnamed_4>
  220751:	31 c0                	xor    eax,eax
  220753:	89 c6                	mov    esi,eax
                        const inc_addr = minimum_instruction_length * ((255 - opcode_base) / line_range);
  220755:	e8 a6 ae fe ff       	call   20b600 <panic>
  22075a:	8a 85 64 f0 ff ff    	mov    al,BYTE PTR [rbp-0xf9c]
  220760:	3c 00                	cmp    al,0x0
  220762:	88 85 36 e9 ff ff    	mov    BYTE PTR [rbp-0x16ca],al
  220768:	74 3c                	je     2207a6 <getLineNumberInfo+0x2b56>
  22076a:	8a 85 de e9 ff ff    	mov    al,BYTE PTR [rbp-0x1622]
  220770:	66 0f b6 c0          	movzx  ax,al
  220774:	8a 8d 36 e9 ff ff    	mov    cl,BYTE PTR [rbp-0x16ca]
  22077a:	f6 f1                	div    cl
  22077c:	8a 95 df e9 ff ff    	mov    dl,BYTE PTR [rbp-0x1621]
  220782:	88 85 35 e9 ff ff    	mov    BYTE PTR [rbp-0x16cb],al
  220788:	88 d0                	mov    al,dl
  22078a:	40 8a b5 35 e9 ff ff 	mov    sil,BYTE PTR [rbp-0x16cb]
  220791:	40 f6 e6             	mul    sil
  220794:	40 0f 90 c6          	seto   sil
  220798:	40 f6 c6 01          	test   sil,0x1
  22079c:	88 85 34 e9 ff ff    	mov    BYTE PTR [rbp-0x16cc],al
  2207a2:	75 12                	jne    2207b6 <getLineNumberInfo+0x2b66>
  2207a4:	eb 20                	jmp    2207c6 <getLineNumberInfo+0x2b76>
  2207a6:	48 8d 3d 93 2a 02 00 	lea    rdi,[rip+0x22a93]        # 243240 <__unnamed_7>
  2207ad:	31 c0                	xor    eax,eax
  2207af:	89 c6                	mov    esi,eax
  2207b1:	e8 4a ae fe ff       	call   20b600 <panic>
  2207b6:	48 8d 3d 0b 2a 02 00 	lea    rdi,[rip+0x22a0b]        # 2431c8 <__unnamed_4>
  2207bd:	31 c0                	xor    eax,eax
  2207bf:	89 c6                	mov    esi,eax
  2207c1:	e8 3a ae fe ff       	call   20b600 <panic>
  2207c6:	48 8d 85 88 ef ff ff 	lea    rax,[rbp-0x1078]
  2207cd:	8a 8d 34 e9 ff ff    	mov    cl,BYTE PTR [rbp-0x16cc]
  2207d3:	88 8d 6f ee ff ff    	mov    BYTE PTR [rbp-0x1191],cl
                        prog.address += inc_addr;
  2207d9:	48 8b 95 88 ef ff ff 	mov    rdx,QWORD PTR [rbp-0x1078]
  2207e0:	0f b6 b5 6f ee ff ff 	movzx  esi,BYTE PTR [rbp-0x1191]
  2207e7:	89 f7                	mov    edi,esi
  2207e9:	48 01 fa             	add    rdx,rdi
  2207ec:	41 0f 92 c0          	setb   r8b
  2207f0:	48 89 85 28 e9 ff ff 	mov    QWORD PTR [rbp-0x16d8],rax
  2207f7:	48 89 95 20 e9 ff ff 	mov    QWORD PTR [rbp-0x16e0],rdx
  2207fe:	44 88 85 1f e9 ff ff 	mov    BYTE PTR [rbp-0x16e1],r8b
  220805:	72 02                	jb     220809 <getLineNumberInfo+0x2bb9>
  220807:	eb 10                	jmp    220819 <getLineNumberInfo+0x2bc9>
  220809:	48 8d 3d b8 29 02 00 	lea    rdi,[rip+0x229b8]        # 2431c8 <__unnamed_4>
  220810:	31 c0                	xor    eax,eax
  220812:	89 c6                	mov    esi,eax
  220814:	e8 e7 ad fe ff       	call   20b600 <panic>
  220819:	48 8b 85 28 e9 ff ff 	mov    rax,QWORD PTR [rbp-0x16d8]
  220820:	48 8b 8d 20 e9 ff ff 	mov    rcx,QWORD PTR [rbp-0x16e0]
  220827:	48 89 08             	mov    QWORD PTR [rax],rcx
                switch (opcode) {
  22082a:	e9 03 f9 ff ff       	jmp    220132 <getLineNumberInfo+0x24e2>
  22082f:	48 8d 3d 92 29 02 00 	lea    rdi,[rip+0x22992]        # 2431c8 <__unnamed_4>
  220836:	31 c0                	xor    eax,eax
  220838:	89 c6                	mov    esi,eax
                        prog.address += arg;
  22083a:	e8 c1 ad fe ff       	call   20b600 <panic>
  22083f:	48 8b 85 b8 e9 ff ff 	mov    rax,QWORD PTR [rbp-0x1648]
  220846:	48 8b 8d b0 e9 ff ff 	mov    rcx,QWORD PTR [rbp-0x1650]
  22084d:	48 89 08             	mov    QWORD PTR [rax],rcx
                switch (opcode) {
  220850:	e9 dd f8 ff ff       	jmp    220132 <getLineNumberInfo+0x24e2>
  220855:	48 8d 3d 6c 29 02 00 	lea    rdi,[rip+0x2296c]        # 2431c8 <__unnamed_4>
  22085c:	31 c0                	xor    eax,eax
  22085e:	89 c6                	mov    esi,eax
    while (this_offset < debug_line_end) : (this_index += 1) {
  220860:	e8 9b ad fe ff       	call   20b600 <panic>
  220865:	48 8b 85 a0 e9 ff ff 	mov    rax,QWORD PTR [rbp-0x1660]
  22086c:	48 89 85 b0 f0 ff ff 	mov    QWORD PTR [rbp-0xf50],rax
  220873:	e9 f8 d4 ff ff       	jmp    21dd70 <getLineNumberInfo+0x120>
  220878:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  22087f:	00 

0000000000220880 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.61>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  220880:	55                   	push   rbp
  220881:	48 89 e5             	mov    rbp,rsp
  220884:	48 83 ec 50          	sub    rsp,0x50
  220888:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
  22088c:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  220890:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  220894:	4c 89 45 e8          	mov    QWORD PTR [rbp-0x18],r8
  220898:	4c 89 4d e0          	mov    QWORD PTR [rbp-0x20],r9
            return std.fmt.format(self, Error, self.writeFn, format, args);
  22089c:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2208a0:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  2208a4:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  2208a7:	4c 8b 45 f0          	mov    r8,QWORD PTR [rbp-0x10]
  2208ab:	4c 8b 4d e8          	mov    r9,QWORD PTR [rbp-0x18]
  2208af:	4c 8b 55 e0          	mov    r10,QWORD PTR [rbp-0x20]
  2208b3:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  2208b7:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  2208bb:	48 89 ca             	mov    rdx,rcx
  2208be:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  2208c2:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  2208c6:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
  2208cb:	e8 e0 44 00 00       	call   224db0 <format.83>
  2208d0:	66 83 f8 00          	cmp    ax,0x0
  2208d4:	66 89 45 ce          	mov    WORD PTR [rbp-0x32],ax
  2208d8:	74 0b                	je     2208e5 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.61+0x65>
  2208da:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  2208de:	e8 ad b3 fe ff       	call   20bc90 <__zig_return_error>
  2208e3:	eb 02                	jmp    2208e7 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.61+0x67>
  2208e5:	eb 00                	jmp    2208e7 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.61+0x67>
  2208e7:	66 8b 45 ce          	mov    ax,WORD PTR [rbp-0x32]
  2208eb:	48 83 c4 50          	add    rsp,0x50
  2208ef:	5d                   	pop    rbp
  2208f0:	c3                   	ret    
  2208f1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2208f8:	0f 1f 84 00 00 00 00 
  2208ff:	00 

0000000000220900 <LineInfo_deinit>:
    fn deinit(self: *const LineInfo) void {
  220900:	55                   	push   rbp
  220901:	48 89 e5             	mov    rbp,rsp
  220904:	48 83 ec 10          	sub    rsp,0x10
  220908:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
        self.allocator.free(self.file_name);
  22090c:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  220910:	48 8b 7f 20          	mov    rdi,QWORD PTR [rdi+0x20]
  220914:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  220918:	48 83 c0 10          	add    rax,0x10
  22091c:	48 89 c6             	mov    rsi,rax
  22091f:	e8 4c 1a 00 00       	call   222370 <Allocator_free.73>
    fn deinit(self: *const LineInfo) void {
  220924:	48 83 c4 10          	add    rsp,0x10
  220928:	5d                   	pop    rbp
  220929:	c3                   	ret    
  22092a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000220930 <printLineFromFile>:
fn printLineFromFile(allocator: *mem.Allocator, out_stream: var, line_info: *const LineInfo) !void {
  220930:	55                   	push   rbp
  220931:	48 89 e5             	mov    rbp,rsp
  220934:	48 81 ec 10 11 00 00 	sub    rsp,0x1110
  22093b:	48 8d 45 f8          	lea    rax,[rbp-0x8]
  22093f:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  220943:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  220947:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
    var f = try os.File.openRead(allocator, line_info.file_name);
  22094b:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  22094f:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  220953:	48 83 c1 10          	add    rcx,0x10
  220957:	48 89 bd 40 ef ff ff 	mov    QWORD PTR [rbp-0x10c0],rdi
  22095e:	48 89 c7             	mov    rdi,rax
  220961:	48 8b b5 40 ef ff ff 	mov    rsi,QWORD PTR [rbp-0x10c0]
  220968:	e8 b3 26 ff ff       	call   213020 <File_openRead>
  22096d:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  220972:	74 27                	je     22099b <printLineFromFile+0x6b>
  220974:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  220978:	48 8b bd 40 ef ff ff 	mov    rdi,QWORD PTR [rbp-0x10c0]
  22097f:	66 89 85 3e ef ff ff 	mov    WORD PTR [rbp-0x10c2],ax
  220986:	e8 05 b3 fe ff       	call   20bc90 <__zig_return_error>
  22098b:	66 8b 85 3e ef ff ff 	mov    ax,WORD PTR [rbp-0x10c2]
  220992:	48 81 c4 10 11 00 00 	add    rsp,0x1110
  220999:	5d                   	pop    rbp
  22099a:	c3                   	ret    
  22099b:	48 8d 35 95 8c fe ff 	lea    rsi,[rip+0xfffffffffffe8c95]        # 209637 <__unnamed_129>
  2209a2:	b8 00 10 00 00       	mov    eax,0x1000
  2209a7:	89 c2                	mov    edx,eax
  2209a9:	48 8d 8d 88 ef ff ff 	lea    rcx,[rbp-0x1078]
  2209b0:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  2209b3:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
    var buf: [os.page_size]u8 = undefined;
  2209b6:	48 89 cf             	mov    rdi,rcx
  2209b9:	e8 42 3f 01 00       	call   234900 <memcpy>
    var line: usize = 1;
  2209be:	48 c7 85 80 ef ff ff 	mov    QWORD PTR [rbp-0x1080],0x1
  2209c5:	01 00 00 00 
    var column: usize = 1;
  2209c9:	48 c7 85 78 ef ff ff 	mov    QWORD PTR [rbp-0x1088],0x1
  2209d0:	01 00 00 00 
    var abs_index: usize = 0;
  2209d4:	48 c7 85 70 ef ff ff 	mov    QWORD PTR [rbp-0x1090],0x0
  2209db:	00 00 00 00 
    while (true) {
  2209df:	eb 00                	jmp    2209e1 <printLineFromFile+0xb1>
  2209e1:	b0 01                	mov    al,0x1
        const amt_read = try f.read(buf[0..]);
  2209e3:	a8 01                	test   al,0x1
  2209e5:	0f 85 d0 01 00 00    	jne    220bbb <printLineFromFile+0x28b>
  2209eb:	e9 bb 01 00 00       	jmp    220bab <printLineFromFile+0x27b>
  2209f0:	48 8d 7d 88          	lea    rdi,[rbp-0x78]
    defer f.close();
  2209f4:	e8 d7 14 ff ff       	call   211ed0 <File_close>
        const amt_read = try f.read(buf[0..]);
  2209f9:	66 8b 45 d0          	mov    ax,WORD PTR [rbp-0x30]
  2209fd:	48 8b bd 40 ef ff ff 	mov    rdi,QWORD PTR [rbp-0x10c0]
  220a04:	66 89 85 3c ef ff ff 	mov    WORD PTR [rbp-0x10c4],ax
  220a0b:	e8 80 b2 fe ff       	call   20bc90 <__zig_return_error>
  220a10:	66 8b 85 3c ef ff ff 	mov    ax,WORD PTR [rbp-0x10c4]
  220a17:	48 81 c4 10 11 00 00 	add    rsp,0x1110
  220a1e:	5d                   	pop    rbp
  220a1f:	c3                   	ret    
  220a20:	31 c0                	xor    eax,eax
  220a22:	89 c1                	mov    ecx,eax
  220a24:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  220a28:	48 89 95 68 ef ff ff 	mov    QWORD PTR [rbp-0x1098],rdx
        const slice = buf[0..amt_read];
  220a2f:	48 8b 95 68 ef ff ff 	mov    rdx,QWORD PTR [rbp-0x1098]
  220a36:	48 39 d1             	cmp    rcx,rdx
  220a39:	48 89 95 30 ef ff ff 	mov    QWORD PTR [rbp-0x10d0],rdx
  220a40:	0f 86 c0 01 00 00    	jbe    220c06 <printLineFromFile+0x2d6>
  220a46:	e9 ab 01 00 00       	jmp    220bf6 <printLineFromFile+0x2c6>
        for (slice) |byte| {
  220a4b:	48 8b 85 48 ef ff ff 	mov    rax,QWORD PTR [rbp-0x10b8]
  220a52:	48 8b 8d 28 ef ff ff 	mov    rcx,QWORD PTR [rbp-0x10d8]
  220a59:	48 39 c8             	cmp    rax,rcx
  220a5c:	48 89 85 20 ef ff ff 	mov    QWORD PTR [rbp-0x10e0],rax
  220a63:	0f 83 0e 01 00 00    	jae    220b77 <printLineFromFile+0x247>
  220a69:	48 8b 85 58 ef ff ff 	mov    rax,QWORD PTR [rbp-0x10a8]
  220a70:	48 8b 8d 20 ef ff ff 	mov    rcx,QWORD PTR [rbp-0x10e0]
  220a77:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  220a7a:	88 95 57 ef ff ff    	mov    BYTE PTR [rbp-0x10a9],dl
            if (line == line_info.line) {
  220a80:	48 8b 85 80 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1080]
  220a87:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  220a8b:	48 3b 06             	cmp    rax,QWORD PTR [rsi]
  220a8e:	75 79                	jne    220b09 <printLineFromFile+0x1d9>
                try out_stream.writeByte(byte);
  220a90:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  220a94:	48 8b bd 40 ef ff ff 	mov    rdi,QWORD PTR [rbp-0x10c0]
  220a9b:	0f b6 95 57 ef ff ff 	movzx  edx,BYTE PTR [rbp-0x10a9]
  220aa2:	e8 89 02 00 00       	call   220d30 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_writeByte>
  220aa7:	66 89 45 ae          	mov    WORD PTR [rbp-0x52],ax
  220aab:	66 83 7d ae 00       	cmp    WORD PTR [rbp-0x52],0x0
  220ab0:	74 30                	je     220ae2 <printLineFromFile+0x1b2>
  220ab2:	48 8d 7d 88          	lea    rdi,[rbp-0x78]
    defer f.close();
  220ab6:	e8 15 14 ff ff       	call   211ed0 <File_close>
                try out_stream.writeByte(byte);
  220abb:	66 8b 45 ae          	mov    ax,WORD PTR [rbp-0x52]
  220abf:	48 8b bd 40 ef ff ff 	mov    rdi,QWORD PTR [rbp-0x10c0]
  220ac6:	66 89 85 1e ef ff ff 	mov    WORD PTR [rbp-0x10e2],ax
  220acd:	e8 be b1 fe ff       	call   20bc90 <__zig_return_error>
  220ad2:	66 8b 85 1e ef ff ff 	mov    ax,WORD PTR [rbp-0x10e2]
  220ad9:	48 81 c4 10 11 00 00 	add    rsp,0x1110
  220ae0:	5d                   	pop    rbp
  220ae1:	c3                   	ret    
                if (byte == '\n') {
  220ae2:	80 bd 57 ef ff ff 0a 	cmp    BYTE PTR [rbp-0x10a9],0xa
  220ae9:	75 1a                	jne    220b05 <printLineFromFile+0x1d5>
  220aeb:	48 8d 7d 88          	lea    rdi,[rbp-0x78]
    defer f.close();
  220aef:	e8 dc 13 ff ff       	call   211ed0 <File_close>
  220af4:	31 c0                	xor    eax,eax
  220af6:	66 89 c1             	mov    cx,ax
                    return;
  220af9:	66 89 c8             	mov    ax,cx
  220afc:	48 81 c4 10 11 00 00 	add    rsp,0x1110
  220b03:	5d                   	pop    rbp
  220b04:	c3                   	ret    
                if (byte == '\n') {
  220b05:	eb 00                	jmp    220b07 <printLineFromFile+0x1d7>
            if (line == line_info.line) {
  220b07:	eb 02                	jmp    220b0b <printLineFromFile+0x1db>
  220b09:	eb 00                	jmp    220b0b <printLineFromFile+0x1db>
            if (byte == '\n') {
  220b0b:	80 bd 57 ef ff ff 0a 	cmp    BYTE PTR [rbp-0x10a9],0xa
  220b12:	75 26                	jne    220b3a <printLineFromFile+0x20a>
                line += 1;
  220b14:	48 8b 85 80 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1080]
  220b1b:	48 83 c0 01          	add    rax,0x1
  220b1f:	0f 92 c1             	setb   cl
  220b22:	48 89 85 10 ef ff ff 	mov    QWORD PTR [rbp-0x10f0],rax
  220b29:	88 8d 0f ef ff ff    	mov    BYTE PTR [rbp-0x10f1],cl
  220b2f:	0f 82 56 01 00 00    	jb     220c8b <printLineFromFile+0x35b>
  220b35:	e9 61 01 00 00       	jmp    220c9b <printLineFromFile+0x36b>
                column += 1;
  220b3a:	48 8b 85 78 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1088]
  220b41:	48 83 c0 01          	add    rax,0x1
  220b45:	0f 92 c1             	setb   cl
  220b48:	48 89 85 00 ef ff ff 	mov    QWORD PTR [rbp-0x1100],rax
  220b4f:	88 8d ff ee ff ff    	mov    BYTE PTR [rbp-0x1101],cl
  220b55:	0f 82 5e 01 00 00    	jb     220cb9 <printLineFromFile+0x389>
  220b5b:	e9 69 01 00 00       	jmp    220cc9 <printLineFromFile+0x399>
        for (slice) |byte| {
  220b60:	48 8b 85 20 ef ff ff 	mov    rax,QWORD PTR [rbp-0x10e0]
  220b67:	48 83 c0 01          	add    rax,0x1
  220b6b:	48 89 85 48 ef ff ff 	mov    QWORD PTR [rbp-0x10b8],rax
  220b72:	e9 d4 fe ff ff       	jmp    220a4b <printLineFromFile+0x11b>
        if (amt_read < buf.len) return error.EndOfFile;
  220b77:	48 81 bd 68 ef ff ff 	cmp    QWORD PTR [rbp-0x1098],0x1000
  220b7e:	00 10 00 00 
  220b82:	73 22                	jae    220ba6 <printLineFromFile+0x276>
  220b84:	48 8d 7d 88          	lea    rdi,[rbp-0x78]
    defer f.close();
  220b88:	e8 43 13 ff ff       	call   211ed0 <File_close>
        if (amt_read < buf.len) return error.EndOfFile;
  220b8d:	48 8b bd 40 ef ff ff 	mov    rdi,QWORD PTR [rbp-0x10c0]
  220b94:	e8 f7 b0 fe ff       	call   20bc90 <__zig_return_error>
  220b99:	66 b8 26 00          	mov    ax,0x26
  220b9d:	48 81 c4 10 11 00 00 	add    rsp,0x1110
  220ba4:	5d                   	pop    rbp
  220ba5:	c3                   	ret    
    while (true) {
  220ba6:	e9 34 fe ff ff       	jmp    2209df <printLineFromFile+0xaf>
  220bab:	48 8d 3d 46 28 02 00 	lea    rdi,[rip+0x22846]        # 2433f8 <__unnamed_20>
  220bb2:	31 c0                	xor    eax,eax
  220bb4:	89 c6                	mov    esi,eax
        const amt_read = try f.read(buf[0..]);
  220bb6:	e8 45 aa fe ff       	call   20b600 <panic>
  220bbb:	48 8d 7d d0          	lea    rdi,[rbp-0x30]
  220bbf:	48 8d 55 88          	lea    rdx,[rbp-0x78]
  220bc3:	48 8d 4d e0          	lea    rcx,[rbp-0x20]
  220bc7:	48 8d 85 88 ef ff ff 	lea    rax,[rbp-0x1078]
  220bce:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  220bd2:	48 c7 45 e8 00 10 00 	mov    QWORD PTR [rbp-0x18],0x1000
  220bd9:	00 
  220bda:	48 8b b5 40 ef ff ff 	mov    rsi,QWORD PTR [rbp-0x10c0]
  220be1:	e8 2a 39 ff ff       	call   214510 <File_read>
  220be6:	66 83 7d d0 00       	cmp    WORD PTR [rbp-0x30],0x0
  220beb:	0f 85 ff fd ff ff    	jne    2209f0 <printLineFromFile+0xc0>
  220bf1:	e9 2a fe ff ff       	jmp    220a20 <printLineFromFile+0xf0>
  220bf6:	48 8d 3d fb 27 02 00 	lea    rdi,[rip+0x227fb]        # 2433f8 <__unnamed_20>
  220bfd:	31 c0                	xor    eax,eax
  220bff:	89 c6                	mov    esi,eax
        const slice = buf[0..amt_read];
  220c01:	e8 fa a9 fe ff       	call   20b600 <panic>
  220c06:	48 8b 85 30 ef ff ff 	mov    rax,QWORD PTR [rbp-0x10d0]
  220c0d:	48 3d 00 10 00 00    	cmp    rax,0x1000
  220c13:	76 10                	jbe    220c25 <printLineFromFile+0x2f5>
  220c15:	48 8d 3d dc 27 02 00 	lea    rdi,[rip+0x227dc]        # 2433f8 <__unnamed_20>
  220c1c:	31 c0                	xor    eax,eax
  220c1e:	89 c6                	mov    esi,eax
  220c20:	e8 db a9 fe ff       	call   20b600 <panic>
  220c25:	48 8d bd 57 ef ff ff 	lea    rdi,[rbp-0x10a9]
  220c2c:	be aa 00 00 00       	mov    esi,0xaa
  220c31:	b8 01 00 00 00       	mov    eax,0x1
  220c36:	89 c2                	mov    edx,eax
  220c38:	48 8d 8d 88 ef ff ff 	lea    rcx,[rbp-0x1078]
  220c3f:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
  220c43:	48 8b 8d 30 ef ff ff 	mov    rcx,QWORD PTR [rbp-0x10d0]
  220c4a:	48 83 e9 00          	sub    rcx,0x0
  220c4e:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
  220c52:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  220c56:	48 89 8d 58 ef ff ff 	mov    QWORD PTR [rbp-0x10a8],rcx
  220c5d:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  220c61:	48 89 8d 60 ef ff ff 	mov    QWORD PTR [rbp-0x10a0],rcx
        for (slice) |byte| {
  220c68:	e8 43 3c 01 00       	call   2348b0 <memset>
  220c6d:	48 c7 85 48 ef ff ff 	mov    QWORD PTR [rbp-0x10b8],0x0
  220c74:	00 00 00 00 
  220c78:	48 8b 8d 60 ef ff ff 	mov    rcx,QWORD PTR [rbp-0x10a0]
  220c7f:	48 89 8d 28 ef ff ff 	mov    QWORD PTR [rbp-0x10d8],rcx
  220c86:	e9 c0 fd ff ff       	jmp    220a4b <printLineFromFile+0x11b>
  220c8b:	48 8d 3d 36 25 02 00 	lea    rdi,[rip+0x22536]        # 2431c8 <__unnamed_4>
  220c92:	31 c0                	xor    eax,eax
  220c94:	89 c6                	mov    esi,eax
                line += 1;
  220c96:	e8 65 a9 fe ff       	call   20b600 <panic>
  220c9b:	48 8b 85 10 ef ff ff 	mov    rax,QWORD PTR [rbp-0x10f0]
  220ca2:	48 89 85 80 ef ff ff 	mov    QWORD PTR [rbp-0x1080],rax
                column = 1;
  220ca9:	48 c7 85 78 ef ff ff 	mov    QWORD PTR [rbp-0x1088],0x1
  220cb0:	01 00 00 00 
            if (byte == '\n') {
  220cb4:	e9 a7 fe ff ff       	jmp    220b60 <printLineFromFile+0x230>
  220cb9:	48 8d 3d 08 25 02 00 	lea    rdi,[rip+0x22508]        # 2431c8 <__unnamed_4>
  220cc0:	31 c0                	xor    eax,eax
  220cc2:	89 c6                	mov    esi,eax
                column += 1;
  220cc4:	e8 37 a9 fe ff       	call   20b600 <panic>
  220cc9:	48 8b 85 00 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1100]
  220cd0:	48 89 85 78 ef ff ff 	mov    QWORD PTR [rbp-0x1088],rax
            if (byte == '\n') {
  220cd7:	e9 84 fe ff ff       	jmp    220b60 <printLineFromFile+0x230>
  220cdc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000220ce0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_write>:
        }

        pub fn write(self: *Self, bytes: []const u8) !void {
  220ce0:	55                   	push   rbp
  220ce1:	48 89 e5             	mov    rbp,rsp
  220ce4:	48 83 ec 20          	sub    rsp,0x20
  220ce8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
            return self.writeFn(self, bytes);
  220cec:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  220cf0:	48 8b 36             	mov    rsi,QWORD PTR [rsi]
  220cf3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  220cf7:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  220cfb:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
  220cff:	48 89 c6             	mov    rsi,rax
  220d02:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  220d06:	ff d0                	call   rax
  220d08:	66 83 f8 00          	cmp    ax,0x0
  220d0c:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
  220d10:	74 0b                	je     220d1d <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_write+0x3d>
  220d12:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  220d16:	e8 75 af fe ff       	call   20bc90 <__zig_return_error>
  220d1b:	eb 02                	jmp    220d1f <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_write+0x3f>
  220d1d:	eb 00                	jmp    220d1f <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_write+0x3f>
  220d1f:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
  220d23:	48 83 c4 20          	add    rsp,0x20
  220d27:	5d                   	pop    rbp
  220d28:	c3                   	ret    
  220d29:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000220d30 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_writeByte>:
        }

        pub fn writeByte(self: *Self, byte: u8) !void {
  220d30:	55                   	push   rbp
  220d31:	48 89 e5             	mov    rbp,rsp
  220d34:	48 83 ec 50          	sub    rsp,0x50
  220d38:	88 d0                	mov    al,dl
  220d3a:	b1 01                	mov    cl,0x1
  220d3c:	4c 8d 45 df          	lea    r8,[rbp-0x21]
  220d40:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  220d44:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
            const slice = (*[1]u8)(&byte)[0..];
  220d47:	4c 89 45 f8          	mov    QWORD PTR [rbp-0x8],r8
  220d4b:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  220d4f:	f6 c1 01             	test   cl,0x1
  220d52:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
  220d56:	48 89 75 b8          	mov    QWORD PTR [rbp-0x48],rsi
  220d5a:	75 29                	jne    220d85 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_writeByte+0x55>
  220d5c:	eb 17                	jmp    220d75 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_writeByte+0x45>
            return self.writeFn(self, slice);
  220d5e:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  220d62:	e8 29 af fe ff       	call   20bc90 <__zig_return_error>
  220d67:	eb 02                	jmp    220d6b <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_writeByte+0x3b>
  220d69:	eb 00                	jmp    220d6b <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_writeByte+0x3b>
  220d6b:	66 8b 45 b6          	mov    ax,WORD PTR [rbp-0x4a]
  220d6f:	48 83 c4 50          	add    rsp,0x50
  220d73:	5d                   	pop    rbp
  220d74:	c3                   	ret    
  220d75:	48 8d 3d 7c 26 02 00 	lea    rdi,[rip+0x2267c]        # 2433f8 <__unnamed_20>
  220d7c:	31 c0                	xor    eax,eax
  220d7e:	89 c6                	mov    esi,eax
            const slice = (*[1]u8)(&byte)[0..];
  220d80:	e8 7b a8 fe ff       	call   20b600 <panic>
  220d85:	48 8d 55 c8          	lea    rdx,[rbp-0x38]
  220d89:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  220d8d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  220d91:	48 c7 45 f0 01 00 00 	mov    QWORD PTR [rbp-0x10],0x1
  220d98:	00 
  220d99:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  220d9d:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  220da1:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  220da5:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
            return self.writeFn(self, slice);
  220da9:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  220dad:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  220db0:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  220db4:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  220db8:	ff d1                	call   rcx
  220dba:	66 83 f8 00          	cmp    ax,0x0
  220dbe:	66 89 45 b6          	mov    WORD PTR [rbp-0x4a],ax
  220dc2:	75 9a                	jne    220d5e <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_writeByte+0x2e>
  220dc4:	eb a3                	jmp    220d69 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_writeByte+0x39>
  220dc6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  220dcd:	00 00 00 

0000000000220dd0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.62>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  220dd0:	55                   	push   rbp
  220dd1:	48 89 e5             	mov    rbp,rsp
  220dd4:	48 83 ec 50          	sub    rsp,0x50
  220dd8:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
  220ddc:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  220de0:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  220de4:	4c 89 45 e8          	mov    QWORD PTR [rbp-0x18],r8
  220de8:	4c 89 4d e0          	mov    QWORD PTR [rbp-0x20],r9
            return std.fmt.format(self, Error, self.writeFn, format, args);
  220dec:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  220df0:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  220df4:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  220df7:	4c 8b 45 f0          	mov    r8,QWORD PTR [rbp-0x10]
  220dfb:	4c 8b 4d e8          	mov    r9,QWORD PTR [rbp-0x18]
  220dff:	4c 8b 55 e0          	mov    r10,QWORD PTR [rbp-0x20]
  220e03:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  220e07:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  220e0b:	48 89 ca             	mov    rdx,rcx
  220e0e:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  220e12:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  220e16:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
  220e1b:	e8 90 43 00 00       	call   2251b0 <format.87>
  220e20:	66 83 f8 00          	cmp    ax,0x0
  220e24:	66 89 45 ce          	mov    WORD PTR [rbp-0x32],ax
  220e28:	74 0b                	je     220e35 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.62+0x65>
  220e2a:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  220e2e:	e8 5d ae fe ff       	call   20bc90 <__zig_return_error>
  220e33:	eb 02                	jmp    220e37 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.62+0x67>
  220e35:	eb 00                	jmp    220e37 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.62+0x67>
  220e37:	66 8b 45 ce          	mov    ax,WORD PTR [rbp-0x32]
  220e3b:	48 83 c4 50          	add    rsp,0x50
  220e3f:	5d                   	pop    rbp
  220e40:	c3                   	ret    
  220e41:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  220e48:	0f 1f 84 00 00 00 00 
  220e4f:	00 

0000000000220e50 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.63>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  220e50:	55                   	push   rbp
  220e51:	48 89 e5             	mov    rbp,rsp
  220e54:	48 83 ec 30          	sub    rsp,0x30
  220e58:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  220e5c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
            return std.fmt.format(self, Error, self.writeFn, format, args);
  220e60:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  220e64:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  220e68:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
  220e6b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  220e6f:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  220e73:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  220e77:	48 89 c1             	mov    rcx,rax
  220e7a:	4c 8b 45 e0          	mov    r8,QWORD PTR [rbp-0x20]
  220e7e:	e8 bd 46 00 00       	call   225540 <format.91>
  220e83:	66 83 f8 00          	cmp    ax,0x0
  220e87:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  220e8b:	74 0b                	je     220e98 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.63+0x48>
  220e8d:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  220e91:	e8 fa ad fe ff       	call   20bc90 <__zig_return_error>
  220e96:	eb 02                	jmp    220e9a <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.63+0x4a>
  220e98:	eb 00                	jmp    220e9a <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.63+0x4a>
  220e9a:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  220e9e:	48 83 c4 30          	add    rsp,0x30
  220ea2:	5d                   	pop    rbp
  220ea3:	c3                   	ret    
  220ea4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  220eab:	00 00 00 00 00 

0000000000220eb0 <AlignedArrayList(CompileUnit,2)_toSlice>:
        pub fn toSlice(self: Self) []align(A) T {
  220eb0:	55                   	push   rbp
  220eb1:	48 89 e5             	mov    rbp,rsp
  220eb4:	48 83 ec 40          	sub    rsp,0x40
  220eb8:	48 89 f8             	mov    rax,rdi
  220ebb:	31 c9                	xor    ecx,ecx
  220ebd:	89 ca                	mov    edx,ecx
            return self.items[0..self.len];
  220ebf:	4c 8b 46 10          	mov    r8,QWORD PTR [rsi+0x10]
  220ec3:	4c 8b 4e 08          	mov    r9,QWORD PTR [rsi+0x8]
  220ec7:	4c 39 c2             	cmp    rdx,r8
  220eca:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  220ece:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  220ed2:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  220ed6:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
  220eda:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
  220ede:	76 10                	jbe    220ef0 <AlignedArrayList(CompileUnit,2)_toSlice+0x40>
  220ee0:	48 8d 3d 11 25 02 00 	lea    rdi,[rip+0x22511]        # 2433f8 <__unnamed_20>
  220ee7:	31 c0                	xor    eax,eax
  220ee9:	89 c6                	mov    esi,eax
  220eeb:	e8 10 a7 fe ff       	call   20b600 <panic>
  220ef0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  220ef4:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  220ef8:	48 39 c8             	cmp    rax,rcx
  220efb:	76 10                	jbe    220f0d <AlignedArrayList(CompileUnit,2)_toSlice+0x5d>
  220efd:	48 8d 3d f4 24 02 00 	lea    rdi,[rip+0x224f4]        # 2433f8 <__unnamed_20>
  220f04:	31 c0                	xor    eax,eax
  220f06:	89 c6                	mov    esi,eax
  220f08:	e8 f3 a6 fe ff       	call   20b600 <panic>
  220f0d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  220f11:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  220f14:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  220f18:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  220f1c:	48 83 e9 00          	sub    rcx,0x0
  220f20:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  220f24:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  220f28:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  220f2c:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  220f2f:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  220f33:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  220f37:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  220f3b:	48 83 c4 40          	add    rsp,0x40
  220f3f:	5d                   	pop    rbp
  220f40:	c3                   	ret    
  220f41:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  220f48:	0f 1f 84 00 00 00 00 
  220f4f:	00 

0000000000220f50 <Die_getAttrSecOffset>:
    fn getAttrSecOffset(self: *const Die, id: u64) !u64 {
  220f50:	55                   	push   rbp
  220f51:	48 89 e5             	mov    rbp,rsp
  220f54:	48 81 ec b0 00 00 00 	sub    rsp,0xb0
  220f5b:	48 89 f8             	mov    rax,rdi
  220f5e:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  220f62:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
        const form_value = self.getAttr(id) orelse return error.MissingDebugInfo;
  220f66:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  220f6a:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  220f6e:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
  220f72:	48 89 cf             	mov    rdi,rcx
  220f75:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
  220f79:	48 89 d6             	mov    rsi,rdx
  220f7c:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  220f80:	e8 eb 54 ff ff       	call   216470 <Die_getAttr>
  220f85:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  220f89:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
  220f8e:	75 2f                	jne    220fbf <Die_getAttrSecOffset+0x6f>
  220f90:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  220f94:	e8 f7 ac fe ff       	call   20bc90 <__zig_return_error>
  220f99:	48 8b 3d e0 f8 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffdf8e0]        # 200880 <__unnamed_117>
  220fa0:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  220fa4:	48 89 38             	mov    QWORD PTR [rax],rdi
  220fa7:	48 8b 3d da f8 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffdf8da]        # 200888 <__unnamed_117+0x8>
  220fae:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  220fb2:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  220fb6:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  220fbd:	5d                   	pop    rbp
  220fbe:	c3                   	ret    
  220fbf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  220fc3:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  220fc7:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  220fcb:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
        return switch (form_value.*) {
  220fcf:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  220fd3:	8a 51 18             	mov    dl,BYTE PTR [rcx+0x18]
  220fd6:	40 88 d6             	mov    sil,dl
  220fd9:	40 80 ee 02          	sub    sil,0x2
  220fdd:	48 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rcx
  220fe4:	88 95 77 ff ff ff    	mov    BYTE PTR [rbp-0x89],dl
  220fea:	40 88 b5 76 ff ff ff 	mov    BYTE PTR [rbp-0x8a],sil
  220ff1:	74 26                	je     221019 <Die_getAttrSecOffset+0xc9>
  220ff3:	eb 00                	jmp    220ff5 <Die_getAttrSecOffset+0xa5>
  220ff5:	8a 85 77 ff ff ff    	mov    al,BYTE PTR [rbp-0x89]
  220ffb:	24 0f                	and    al,0xf
  220ffd:	2c 05                	sub    al,0x5
  220fff:	88 85 75 ff ff ff    	mov    BYTE PTR [rbp-0x8b],al
  221005:	74 2c                	je     221033 <Die_getAttrSecOffset+0xe3>
  221007:	eb 00                	jmp    221009 <Die_getAttrSecOffset+0xb9>
  221009:	48 8d 05 40 f2 fd ff 	lea    rax,[rip+0xfffffffffffdf240]        # 200250 <__unnamed_131>
  221010:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  221017:	eb 38                	jmp    221051 <Die_getAttrSecOffset+0x101>
            FormValue.Const => |value| value.asUnsignedLe(),
  221019:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  221020:	8a 48 18             	mov    cl,BYTE PTR [rax+0x18]
  221023:	80 e9 02             	sub    cl,0x2
  221026:	88 8d 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],cl
  22102c:	74 6a                	je     221098 <Die_getAttrSecOffset+0x148>
  22102e:	e9 a4 00 00 00       	jmp    2210d7 <Die_getAttrSecOffset+0x187>
            FormValue.SecOffset => |value| value,
  221033:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  22103a:	8a 48 18             	mov    cl,BYTE PTR [rax+0x18]
  22103d:	80 e9 05             	sub    cl,0x5
  221040:	88 8d 66 ff ff ff    	mov    BYTE PTR [rbp-0x9a],cl
  221046:	0f 84 9b 00 00 00    	je     2210e7 <Die_getAttrSecOffset+0x197>
  22104c:	e9 c2 00 00 00       	jmp    221113 <Die_getAttrSecOffset+0x1c3>
        return switch (form_value.*) {
  221051:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  221058:	66 83 38 00          	cmp    WORD PTR [rax],0x0
  22105c:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  221063:	74 0b                	je     221070 <Die_getAttrSecOffset+0x120>
  221065:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  221069:	e8 22 ac fe ff       	call   20bc90 <__zig_return_error>
  22106e:	eb 02                	jmp    221072 <Die_getAttrSecOffset+0x122>
  221070:	eb 00                	jmp    221072 <Die_getAttrSecOffset+0x122>
  221072:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
  221079:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22107c:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  221080:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  221083:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  221087:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  22108b:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  22108f:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  221096:	5d                   	pop    rbp
  221097:	c3                   	ret    
  221098:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
  22109c:	48 8d 55 a8          	lea    rdx,[rbp-0x58]
            FormValue.Const => |value| value.asUnsignedLe(),
  2210a0:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  2210a7:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  2210aa:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  2210ae:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  2210b2:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
  2210b6:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
  2210ba:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
  2210be:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  2210c2:	e8 49 54 ff ff       	call   216510 <Constant_asUnsignedLe>
  2210c7:	48 8d 45 e8          	lea    rax,[rbp-0x18]
        return switch (form_value.*) {
  2210cb:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  2210d2:	e9 7a ff ff ff       	jmp    221051 <Die_getAttrSecOffset+0x101>
  2210d7:	48 8d 3d 22 25 02 00 	lea    rdi,[rip+0x22522]        # 243600 <__unnamed_29>
  2210de:	31 c0                	xor    eax,eax
  2210e0:	89 c6                	mov    esi,eax
            FormValue.Const => |value| value.asUnsignedLe(),
  2210e2:	e8 19 a5 fe ff       	call   20b600 <panic>
  2210e7:	48 8d 45 d8          	lea    rax,[rbp-0x28]
            FormValue.SecOffset => |value| value,
  2210eb:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  2210f2:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
  2210f5:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  2210f9:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  2210fd:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  221103:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
        return switch (form_value.*) {
  221107:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  22110e:	e9 3e ff ff ff       	jmp    221051 <Die_getAttrSecOffset+0x101>
  221113:	48 8d 3d e6 24 02 00 	lea    rdi,[rip+0x224e6]        # 243600 <__unnamed_29>
  22111a:	31 c0                	xor    eax,eax
  22111c:	89 c6                	mov    esi,eax
            FormValue.SecOffset => |value| value,
  22111e:	e8 dd a4 fe ff       	call   20b600 <panic>
  221123:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22112a:	84 00 00 00 00 00 

0000000000221130 <InStream(ReadError)_readIntLe.64>:
        pub fn readIntLe(self: *Self, comptime T: type) !T {
  221130:	55                   	push   rbp
  221131:	48 89 e5             	mov    rbp,rsp
  221134:	48 83 ec 30          	sub    rsp,0x30
  221138:	48 89 f8             	mov    rax,rdi
  22113b:	48 8d 4d f0          	lea    rcx,[rbp-0x10]
  22113f:	41 b8 01 00 00 00    	mov    r8d,0x1
  221145:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
            return self.readInt(builtin.Endian.Little, T);
  221149:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  22114d:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  221151:	48 89 cf             	mov    rdi,rcx
  221154:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  221158:	44 89 c1             	mov    ecx,r8d
  22115b:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  22115f:	e8 3c 00 00 00       	call   2211a0 <InStream(ReadError)_readInt.65>
  221164:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  221169:	74 0b                	je     221176 <InStream(ReadError)_readIntLe.64+0x46>
  22116b:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  22116f:	e8 1c ab fe ff       	call   20bc90 <__zig_return_error>
  221174:	eb 02                	jmp    221178 <InStream(ReadError)_readIntLe.64+0x48>
  221176:	eb 00                	jmp    221178 <InStream(ReadError)_readIntLe.64+0x48>
  221178:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22117c:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  221180:	48 89 01             	mov    QWORD PTR [rcx],rax
  221183:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  221187:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  22118b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  22118f:	48 83 c4 30          	add    rsp,0x30
  221193:	5d                   	pop    rbp
  221194:	c3                   	ret    
  221195:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22119c:	00 00 00 00 

00000000002211a0 <InStream(ReadError)_readInt.65>:
        pub fn readInt(self: *Self, endian: builtin.Endian, comptime T: type) !T {
  2211a0:	55                   	push   rbp
  2211a1:	48 89 e5             	mov    rbp,rsp
  2211a4:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  2211ab:	88 c8                	mov    al,cl
  2211ad:	49 89 f8             	mov    r8,rdi
  2211b0:	41 b1 01             	mov    r9b,0x1
  2211b3:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
  2211b7:	24 01                	and    al,0x1
  2211b9:	88 45 a7             	mov    BYTE PTR [rbp-0x59],al
            var bytes: [@sizeOf(T)]u8 = undefined;
  2211bc:	48 8b 15 b5 fa fd ff 	mov    rdx,QWORD PTR [rip+0xfffffffffffdfab5]        # 200c78 <__unnamed_132>
  2211c3:	48 89 55 9f          	mov    QWORD PTR [rbp-0x61],rdx
            try self.readNoEof(bytes[0..]);
  2211c7:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  2211cb:	41 f6 c1 01          	test   r9b,0x1
  2211cf:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
  2211d3:	4c 89 45 88          	mov    QWORD PTR [rbp-0x78],r8
  2211d7:	48 89 55 80          	mov    QWORD PTR [rbp-0x80],rdx
  2211db:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
  2211e2:	0f 85 ae 00 00 00    	jne    221296 <InStream(ReadError)_readInt.65+0xf6>
  2211e8:	e9 99 00 00 00       	jmp    221286 <InStream(ReadError)_readInt.65+0xe6>
  2211ed:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  2211f1:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  2211f5:	66 89 85 76 ff ff ff 	mov    WORD PTR [rbp-0x8a],ax
  2211fc:	e8 8f aa fe ff       	call   20bc90 <__zig_return_error>
  221201:	66 8b 85 76 ff ff ff 	mov    ax,WORD PTR [rbp-0x8a]
  221208:	66 89 45 d8          	mov    WORD PTR [rbp-0x28],ax
  22120c:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  221210:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  221217:	48 89 39             	mov    QWORD PTR [rcx],rdi
  22121a:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  22121e:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  221222:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  221226:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  22122d:	5d                   	pop    rbp
  22122e:	c3                   	ret    
  22122f:	48 8d 45 c0          	lea    rax,[rbp-0x40]
  221233:	48 8d 4d 9f          	lea    rcx,[rbp-0x61]
            return mem.readInt(bytes, T, endian);
  221237:	8a 55 a7             	mov    dl,BYTE PTR [rbp-0x59]
  22123a:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
  22123e:	48 c7 45 c8 08 00 00 	mov    QWORD PTR [rbp-0x38],0x8
  221245:	00 
  221246:	0f b6 f2             	movzx  esi,dl
  221249:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  22124d:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  221254:	e8 77 00 00 00       	call   2212d0 <readInt.66>
  221259:	66 c7 45 b0 00 00    	mov    WORD PTR [rbp-0x50],0x0
  22125f:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  221263:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  221267:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  22126e:	48 89 01             	mov    QWORD PTR [rcx],rax
  221271:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  221275:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  221279:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  22127d:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  221284:	5d                   	pop    rbp
  221285:	c3                   	ret    
  221286:	48 8d 3d 6b 21 02 00 	lea    rdi,[rip+0x2216b]        # 2433f8 <__unnamed_20>
  22128d:	31 c0                	xor    eax,eax
  22128f:	89 c6                	mov    esi,eax
            try self.readNoEof(bytes[0..]);
  221291:	e8 6a a3 fe ff       	call   20b600 <panic>
  221296:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
  22129a:	48 8d 45 9f          	lea    rax,[rbp-0x61]
  22129e:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  2212a2:	48 c7 45 f8 08 00 00 	mov    QWORD PTR [rbp-0x8],0x8
  2212a9:	00 
  2212aa:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  2212ae:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  2212b2:	e8 09 27 ff ff       	call   2139c0 <InStream(ReadError)_readNoEof>
  2212b7:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  2212bb:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  2212c0:	0f 85 27 ff ff ff    	jne    2211ed <InStream(ReadError)_readInt.65+0x4d>
  2212c6:	e9 64 ff ff ff       	jmp    22122f <InStream(ReadError)_readInt.65+0x8f>
  2212cb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000002212d0 <readInt.66>:
pub fn readInt(bytes: []const u8, comptime T: type, endian: builtin.Endian) T {
  2212d0:	55                   	push   rbp
  2212d1:	48 89 e5             	mov    rbp,rsp
  2212d4:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  2212db:	40 88 f0             	mov    al,sil
  2212de:	24 01                	and    al,0x1
  2212e0:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
    var result: T = 0;
  2212e3:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  2212ea:	00 
    switch (endian) {
  2212eb:	8a 45 ff             	mov    al,BYTE PTR [rbp-0x1]
  2212ee:	84 c0                	test   al,al
  2212f0:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  2212f4:	88 45 c7             	mov    BYTE PTR [rbp-0x39],al
  2212f7:	0f 85 83 00 00 00    	jne    221380 <readInt.66+0xb0>
  2212fd:	eb 00                	jmp    2212ff <readInt.66+0x2f>
  2212ff:	8a 45 c7             	mov    al,BYTE PTR [rbp-0x39]
  221302:	f6 d0                	not    al
  221304:	a8 01                	test   al,0x1
  221306:	0f 84 f4 00 00 00    	je     221400 <readInt.66+0x130>
  22130c:	eb 00                	jmp    22130e <readInt.66+0x3e>
  22130e:	48 8d 7d ef          	lea    rdi,[rbp-0x11]
  221312:	be aa 00 00 00       	mov    esi,0xaa
  221317:	b8 01 00 00 00       	mov    eax,0x1
  22131c:	89 c2                	mov    edx,eax
            for (bytes) |b| {
  22131e:	e8 8d 35 01 00       	call   2348b0 <memset>
  221323:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  22132a:	00 
  22132b:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  22132f:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
  221333:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
  221337:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  22133b:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  22133f:	48 39 c8             	cmp    rax,rcx
  221342:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  221346:	73 33                	jae    22137b <readInt.66+0xab>
  221348:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  22134c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22134f:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  221353:	40 8a 34 11          	mov    sil,BYTE PTR [rcx+rdx*1]
  221357:	40 88 75 ef          	mov    BYTE PTR [rbp-0x11],sil
                result = (result << 8) | b;
  22135b:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  22135f:	48 c1 e1 08          	shl    rcx,0x8
  221363:	0f b6 7d ef          	movzx  edi,BYTE PTR [rbp-0x11]
  221367:	41 89 f8             	mov    r8d,edi
  22136a:	4c 09 c1             	or     rcx,r8
  22136d:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
            for (bytes) |b| {
  221371:	48 83 c2 01          	add    rdx,0x1
  221375:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  221379:	eb bc                	jmp    221337 <readInt.66+0x67>
    switch (endian) {
  22137b:	e9 90 00 00 00       	jmp    221410 <readInt.66+0x140>
  221380:	48 8d 7d df          	lea    rdi,[rbp-0x21]
  221384:	be aa 00 00 00       	mov    esi,0xaa
  221389:	b8 01 00 00 00       	mov    eax,0x1
  22138e:	89 c2                	mov    edx,eax
            for (bytes) |b, index| {
  221390:	e8 1b 35 01 00       	call   2348b0 <memset>
  221395:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
  22139c:	00 
  22139d:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  2213a1:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
  2213a5:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  2213a9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2213ad:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  2213b1:	48 39 c8             	cmp    rax,rcx
  2213b4:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  2213b8:	73 44                	jae    2213fe <readInt.66+0x12e>
  2213ba:	b8 08 00 00 00       	mov    eax,0x8
  2213bf:	89 c1                	mov    ecx,eax
  2213c1:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  2213c5:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
  2213c8:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  2213cc:	44 8a 04 3e          	mov    r8b,BYTE PTR [rsi+rdi*1]
  2213d0:	44 88 45 df          	mov    BYTE PTR [rbp-0x21],r8b
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  2213d4:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  2213d8:	0f b6 45 df          	movzx  eax,BYTE PTR [rbp-0x21]
  2213dc:	41 89 c1             	mov    r9d,eax
  2213df:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2213e3:	48 f7 e1             	mul    rcx
  2213e6:	41 0f 90 c0          	seto   r8b
  2213ea:	4c 89 4d 98          	mov    QWORD PTR [rbp-0x68],r9
  2213ee:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
  2213f2:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  2213f6:	44 88 45 87          	mov    BYTE PTR [rbp-0x79],r8b
  2213fa:	70 21                	jo     22141d <readInt.66+0x14d>
  2213fc:	eb 2f                	jmp    22142d <readInt.66+0x15d>
    switch (endian) {
  2213fe:	eb 10                	jmp    221410 <readInt.66+0x140>
  221400:	48 8d 3d 09 1f 02 00 	lea    rdi,[rip+0x21f09]        # 243310 <__unnamed_13>
  221407:	31 c0                	xor    eax,eax
  221409:	89 c6                	mov    esi,eax
  22140b:	e8 f0 a1 fe ff       	call   20b600 <panic>
    return result;
  221410:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  221414:	48 81 c4 80 00 00 00 	add    rsp,0x80
  22141b:	5d                   	pop    rbp
  22141c:	c3                   	ret    
  22141d:	48 8d 3d a4 1d 02 00 	lea    rdi,[rip+0x21da4]        # 2431c8 <__unnamed_4>
  221424:	31 c0                	xor    eax,eax
  221426:	89 c6                	mov    esi,eax
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  221428:	e8 d3 a1 fe ff       	call   20b600 <panic>
  22142d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  221431:	88 c1                	mov    cl,al
  221433:	89 c2                	mov    edx,eax
  221435:	83 e2 3f             	and    edx,0x3f
  221438:	89 d6                	mov    esi,edx
  22143a:	48 39 f0             	cmp    rax,rsi
  22143d:	88 4d 86             	mov    BYTE PTR [rbp-0x7a],cl
  221440:	75 2b                	jne    22146d <readInt.66+0x19d>
  221442:	8a 45 86             	mov    al,BYTE PTR [rbp-0x7a]
  221445:	24 3f                	and    al,0x3f
  221447:	0f b6 c8             	movzx  ecx,al
  22144a:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  22144e:	48 d3 e2             	shl    rdx,cl
  221451:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  221455:	48 09 d6             	or     rsi,rdx
  221458:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
            for (bytes) |b, index| {
  22145c:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  221460:	48 83 c2 01          	add    rdx,0x1
  221464:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  221468:	e9 3c ff ff ff       	jmp    2213a9 <readInt.66+0xd9>
  22146d:	48 8d 3d 34 20 02 00 	lea    rdi,[rip+0x22034]        # 2434a8 <__unnamed_22>
  221474:	31 c0                	xor    eax,eax
  221476:	89 c6                	mov    esi,eax
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  221478:	e8 83 a1 fe ff       	call   20b600 <panic>
  22147d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000221480 <format.67>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  221480:	55                   	push   rbp
  221481:	48 89 e5             	mov    rbp,rsp
  221484:	48 83 ec 30          	sub    rsp,0x30
  221488:	48 8d 05 09 22 02 00 	lea    rax,[rip+0x22209]        # 243698 <__unnamed_133>
  22148f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  221493:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  221497:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
                        try output(context, fmt[start_index..i]);
  22149b:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22149f:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  2214a3:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  2214a7:	48 89 c2             	mov    rdx,rax
  2214aa:	ff d1                	call   rcx
  2214ac:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  2214b0:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  2214b5:	74 1b                	je     2214d2 <format.67+0x52>
  2214b7:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  2214bb:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  2214bf:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  2214c3:	e8 c8 a7 fe ff       	call   20bc90 <__zig_return_error>
  2214c8:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  2214cc:	48 83 c4 30          	add    rsp,0x30
  2214d0:	5d                   	pop    rbp
  2214d1:	c3                   	ret    
                    try formatType(args[next_arg], fmt[s..i], context, Errors, output);
  2214d2:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  2214d6:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  2214da:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2214de:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  2214e2:	e8 79 00 00 00       	call   221560 <formatType.68>
  2214e7:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  2214eb:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  2214f0:	74 1b                	je     22150d <format.67+0x8d>
  2214f2:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  2214f6:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  2214fa:	66 89 45 d4          	mov    WORD PTR [rbp-0x2c],ax
  2214fe:	e8 8d a7 fe ff       	call   20bc90 <__zig_return_error>
  221503:	66 8b 45 d4          	mov    ax,WORD PTR [rbp-0x2c]
  221507:	48 83 c4 30          	add    rsp,0x30
  22150b:	5d                   	pop    rbp
  22150c:	c3                   	ret    
  22150d:	48 8d 15 9c 21 02 00 	lea    rdx,[rip+0x2219c]        # 2436b0 <__unnamed_134>
        try output(context, fmt[start_index..]);
  221514:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  221518:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  22151c:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  221520:	ff d0                	call   rax
  221522:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  221526:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  22152b:	74 1b                	je     221548 <format.67+0xc8>
  22152d:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  221531:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  221535:	66 89 45 d2          	mov    WORD PTR [rbp-0x2e],ax
  221539:	e8 52 a7 fe ff       	call   20bc90 <__zig_return_error>
  22153e:	66 8b 45 d2          	mov    ax,WORD PTR [rbp-0x2e]
  221542:	48 83 c4 30          	add    rsp,0x30
  221546:	5d                   	pop    rbp
  221547:	c3                   	ret    
  221548:	31 c0                	xor    eax,eax
  22154a:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  22154d:	66 89 c8             	mov    ax,cx
  221550:	48 83 c4 30          	add    rsp,0x30
  221554:	5d                   	pop    rbp
  221555:	c3                   	ret    
  221556:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  22155d:	00 00 00 

0000000000221560 <formatType.68>:
pub fn formatType(
  221560:	55                   	push   rbp
  221561:	48 89 e5             	mov    rbp,rsp
  221564:	48 83 ec 30          	sub    rsp,0x30
  221568:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22156c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  221570:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return formatValue(value, fmt, context, Errors, output);
  221574:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  221578:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  22157c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  221580:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  221584:	e8 57 6f 00 00       	call   2284e0 <formatValue.104>
  221589:	66 83 f8 00          	cmp    ax,0x0
  22158d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  221591:	74 0b                	je     22159e <formatType.68+0x3e>
  221593:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  221597:	e8 f4 a6 fe ff       	call   20bc90 <__zig_return_error>
  22159c:	eb 02                	jmp    2215a0 <formatType.68+0x40>
  22159e:	eb 00                	jmp    2215a0 <formatType.68+0x40>
  2215a0:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  2215a4:	48 83 c4 30          	add    rsp,0x30
  2215a8:	5d                   	pop    rbp
  2215a9:	c3                   	ret    
  2215aa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000002215b0 <format.69>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  2215b0:	55                   	push   rbp
  2215b1:	48 89 e5             	mov    rbp,rsp
  2215b4:	48 83 ec 30          	sub    rsp,0x30
  2215b8:	48 8d 05 09 21 02 00 	lea    rax,[rip+0x22109]        # 2436c8 <__unnamed_135>
  2215bf:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  2215c3:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  2215c7:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
                        try output(context, fmt[start_index..i]);
  2215cb:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2215cf:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  2215d3:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  2215d7:	48 89 c2             	mov    rdx,rax
  2215da:	ff d1                	call   rcx
  2215dc:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  2215e0:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  2215e5:	74 1b                	je     221602 <format.69+0x52>
  2215e7:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  2215eb:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  2215ef:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  2215f3:	e8 98 a6 fe ff       	call   20bc90 <__zig_return_error>
  2215f8:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  2215fc:	48 83 c4 30          	add    rsp,0x30
  221600:	5d                   	pop    rbp
  221601:	c3                   	ret    
                    try formatType(args[next_arg], fmt[s..i], context, Errors, output);
  221602:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  221606:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  22160a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22160e:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  221612:	e8 79 00 00 00       	call   221690 <formatType.70>
  221617:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  22161b:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  221620:	74 1b                	je     22163d <format.69+0x8d>
  221622:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  221626:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  22162a:	66 89 45 d4          	mov    WORD PTR [rbp-0x2c],ax
  22162e:	e8 5d a6 fe ff       	call   20bc90 <__zig_return_error>
  221633:	66 8b 45 d4          	mov    ax,WORD PTR [rbp-0x2c]
  221637:	48 83 c4 30          	add    rsp,0x30
  22163b:	5d                   	pop    rbp
  22163c:	c3                   	ret    
  22163d:	48 8d 15 9c 20 02 00 	lea    rdx,[rip+0x2209c]        # 2436e0 <__unnamed_136>
        try output(context, fmt[start_index..]);
  221644:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  221648:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  22164c:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  221650:	ff d0                	call   rax
  221652:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  221656:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  22165b:	74 1b                	je     221678 <format.69+0xc8>
  22165d:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  221661:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  221665:	66 89 45 d2          	mov    WORD PTR [rbp-0x2e],ax
  221669:	e8 22 a6 fe ff       	call   20bc90 <__zig_return_error>
  22166e:	66 8b 45 d2          	mov    ax,WORD PTR [rbp-0x2e]
  221672:	48 83 c4 30          	add    rsp,0x30
  221676:	5d                   	pop    rbp
  221677:	c3                   	ret    
  221678:	31 c0                	xor    eax,eax
  22167a:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  22167d:	66 89 c8             	mov    ax,cx
  221680:	48 83 c4 30          	add    rsp,0x30
  221684:	5d                   	pop    rbp
  221685:	c3                   	ret    
  221686:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  22168d:	00 00 00 

0000000000221690 <formatType.70>:
pub fn formatType(
  221690:	55                   	push   rbp
  221691:	48 89 e5             	mov    rbp,rsp
  221694:	48 83 ec 30          	sub    rsp,0x30
  221698:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22169c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  2216a0:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return formatValue(value, fmt, context, Errors, output);
  2216a4:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2216a8:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  2216ac:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2216b0:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2216b4:	e8 77 6e 00 00       	call   228530 <formatValue.105>
  2216b9:	66 83 f8 00          	cmp    ax,0x0
  2216bd:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  2216c1:	74 0b                	je     2216ce <formatType.70+0x3e>
  2216c3:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2216c7:	e8 c4 a5 fe ff       	call   20bc90 <__zig_return_error>
  2216cc:	eb 02                	jmp    2216d0 <formatType.70+0x40>
  2216ce:	eb 00                	jmp    2216d0 <formatType.70+0x40>
  2216d0:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  2216d4:	48 83 c4 30          	add    rsp,0x30
  2216d8:	5d                   	pop    rbp
  2216d9:	c3                   	ret    
  2216da:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000002216e0 <getString>:
fn getString(st: *ElfStackTrace, offset: u64) ![]u8 {
  2216e0:	55                   	push   rbp
  2216e1:	48 89 e5             	mov    rbp,rsp
  2216e4:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  2216eb:	48 89 f8             	mov    rax,rdi
  2216ee:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
  2216f2:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
    const pos = st.debug_str.offset + offset;
  2216f6:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  2216fa:	48 8b 49 70          	mov    rcx,QWORD PTR [rcx+0x70]
  2216fe:	48 8b 49 18          	mov    rcx,QWORD PTR [rcx+0x18]
  221702:	48 03 4d b8          	add    rcx,QWORD PTR [rbp-0x48]
  221706:	41 0f 92 c0          	setb   r8b
  22170a:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  22170e:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  221712:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
  221716:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
  22171a:	44 88 45 8f          	mov    BYTE PTR [rbp-0x71],r8b
  22171e:	0f 82 93 00 00 00    	jb     2217b7 <getString+0xd7>
  221724:	e9 9e 00 00 00       	jmp    2217c7 <getString+0xe7>
    try st.self_exe_file.seekTo(pos);
  221729:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  22172d:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  221731:	66 89 45 8c          	mov    WORD PTR [rbp-0x74],ax
  221735:	e8 56 a5 fe ff       	call   20bc90 <__zig_return_error>
  22173a:	66 8b 45 8c          	mov    ax,WORD PTR [rbp-0x74]
  22173e:	66 89 45 e0          	mov    WORD PTR [rbp-0x20],ax
  221742:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  221746:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  22174a:	48 89 39             	mov    QWORD PTR [rcx],rdi
  22174d:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  221751:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  221755:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  221759:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  22175d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  221761:	48 81 c4 80 00 00 00 	add    rsp,0x80
  221768:	5d                   	pop    rbp
  221769:	c3                   	ret    
  22176a:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
    return st.readString();
  22176e:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  221772:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  221776:	e8 85 00 00 00       	call   221800 <ElfStackTrace_readString>
  22177b:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  221780:	74 0b                	je     22178d <getString+0xad>
  221782:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  221786:	e8 05 a5 fe ff       	call   20bc90 <__zig_return_error>
  22178b:	eb 02                	jmp    22178f <getString+0xaf>
  22178d:	eb 00                	jmp    22178f <getString+0xaf>
  22178f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  221793:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  221797:	48 89 01             	mov    QWORD PTR [rcx],rax
  22179a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  22179e:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2217a2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2217a6:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  2217aa:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  2217ae:	48 81 c4 80 00 00 00 	add    rsp,0x80
  2217b5:	5d                   	pop    rbp
  2217b6:	c3                   	ret    
  2217b7:	48 8d 3d 0a 1a 02 00 	lea    rdi,[rip+0x21a0a]        # 2431c8 <__unnamed_4>
  2217be:	31 c0                	xor    eax,eax
  2217c0:	89 c6                	mov    esi,eax
    const pos = st.debug_str.offset + offset;
  2217c2:	e8 39 9e fe ff       	call   20b600 <panic>
  2217c7:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  2217cb:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
    try st.self_exe_file.seekTo(pos);
  2217cf:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
  2217d3:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  2217d7:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  2217db:	e8 90 2a ff ff       	call   214270 <File_seekTo>
  2217e0:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  2217e4:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  2217e9:	0f 85 3a ff ff ff    	jne    221729 <getString+0x49>
  2217ef:	e9 76 ff ff ff       	jmp    22176a <getString+0x8a>
  2217f4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2217fb:	00 00 00 00 00 

0000000000221800 <ElfStackTrace_readString>:
        pub fn readString(self: *ElfStackTrace) ![]u8 {
  221800:	55                   	push   rbp
  221801:	48 89 e5             	mov    rbp,rsp
  221804:	48 83 ec 60          	sub    rsp,0x60
  221808:	48 89 f8             	mov    rax,rdi
  22180b:	48 8d 4d f0          	lea    rcx,[rbp-0x10]
  22180f:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            var in_file_stream = io.FileInStream.init(&self.self_exe_file);
  221813:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  221817:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  22181b:	48 89 cf             	mov    rdi,rcx
  22181e:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  221822:	48 89 d6             	mov    rsi,rdx
  221825:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  221829:	e8 62 21 ff ff       	call   213990 <FileInStream_init>
  22182e:	48 8d 45 c0          	lea    rax,[rbp-0x40]
  221832:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  221836:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
  22183a:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  22183e:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
            const in_stream = &in_file_stream.stream;
  221842:	48 83 c0 08          	add    rax,0x8
  221846:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
            return readStringRaw(self.allocator(), in_stream);
  22184a:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  22184e:	e8 0d 44 ff ff       	call   215c60 <ElfStackTrace_allocator>
  221853:	48 8d 7d d8          	lea    rdi,[rbp-0x28]
  221857:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  22185b:	48 8b 75 a8          	mov    rsi,QWORD PTR [rbp-0x58]
  22185f:	48 89 c2             	mov    rdx,rax
  221862:	e8 e9 a4 ff ff       	call   21bd50 <readStringRaw>
  221867:	66 83 7d d8 00       	cmp    WORD PTR [rbp-0x28],0x0
  22186c:	74 0b                	je     221879 <ElfStackTrace_readString+0x79>
  22186e:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  221872:	e8 19 a4 fe ff       	call   20bc90 <__zig_return_error>
  221877:	eb 02                	jmp    22187b <ElfStackTrace_readString+0x7b>
  221879:	eb 00                	jmp    22187b <ElfStackTrace_readString+0x7b>
  22187b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  22187f:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  221883:	48 89 01             	mov    QWORD PTR [rcx],rax
  221886:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  22188a:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  22188e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  221892:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  221896:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22189a:	48 83 c4 60          	add    rsp,0x60
  22189e:	5d                   	pop    rbp
  22189f:	c3                   	ret    

00000000002218a0 <AlignedArrayList(u8,1)_init>:
        pub fn init(allocator: *Allocator) Self {
  2218a0:	55                   	push   rbp
  2218a1:	48 89 e5             	mov    rbp,rsp
  2218a4:	48 89 f8             	mov    rax,rdi
  2218a7:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
                .allocator = allocator,
  2218ab:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
            return Self{
  2218af:	48 8b 0d fa e9 fd ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffde9fa]        # 2002b0 <__unnamed_100>
  2218b6:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  2218ba:	48 8b 0d f7 e9 fd ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffde9f7]        # 2002b8 <__unnamed_100+0x8>
  2218c1:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  2218c5:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  2218cc:	00 
  2218cd:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2218d1:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  2218d5:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  2218d8:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2218dc:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  2218e0:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  2218e4:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  2218e8:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  2218ec:	48 89 4f 18          	mov    QWORD PTR [rdi+0x18],rcx
  2218f0:	5d                   	pop    rbp
  2218f1:	c3                   	ret    
  2218f2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2218f9:	1f 84 00 00 00 00 00 

0000000000221900 <AlignedArrayList(u8,1)_append>:
        pub fn append(self: *Self, item: T) !void {
  221900:	55                   	push   rbp
  221901:	48 89 e5             	mov    rbp,rsp
  221904:	48 83 ec 50          	sub    rsp,0x50
  221908:	88 d0                	mov    al,dl
  22190a:	48 8d 4d f0          	lea    rcx,[rbp-0x10]
  22190e:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  221912:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
            const new_item_ptr = try self.addOne();
  221915:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  221919:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
  22191d:	48 89 cf             	mov    rdi,rcx
  221920:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
  221924:	e8 e7 00 00 00       	call   221a10 <AlignedArrayList(u8,1)_addOne>
  221929:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  22192e:	74 1b                	je     22194b <AlignedArrayList(u8,1)_append+0x4b>
  221930:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  221934:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  221938:	66 89 45 be          	mov    WORD PTR [rbp-0x42],ax
  22193c:	e8 4f a3 fe ff       	call   20bc90 <__zig_return_error>
  221941:	66 8b 45 be          	mov    ax,WORD PTR [rbp-0x42]
  221945:	48 83 c4 50          	add    rsp,0x50
  221949:	5d                   	pop    rbp
  22194a:	c3                   	ret    
  22194b:	31 c0                	xor    eax,eax
  22194d:	66 89 c1             	mov    cx,ax
  221950:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  221954:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
            new_item_ptr.* = item;
  221958:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  22195c:	40 8a 75 d7          	mov    sil,BYTE PTR [rbp-0x29]
  221960:	40 88 32             	mov    BYTE PTR [rdx],sil
        pub fn append(self: *Self, item: T) !void {
  221963:	66 89 c8             	mov    ax,cx
  221966:	48 83 c4 50          	add    rsp,0x50
  22196a:	5d                   	pop    rbp
  22196b:	c3                   	ret    
  22196c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000221970 <AlignedArrayList(u8,1)_toSlice>:
        pub fn toSlice(self: Self) []align(A) T {
  221970:	55                   	push   rbp
  221971:	48 89 e5             	mov    rbp,rsp
  221974:	48 83 ec 40          	sub    rsp,0x40
  221978:	48 89 f8             	mov    rax,rdi
  22197b:	31 c9                	xor    ecx,ecx
  22197d:	89 ca                	mov    edx,ecx
            return self.items[0..self.len];
  22197f:	4c 8b 46 10          	mov    r8,QWORD PTR [rsi+0x10]
  221983:	4c 8b 4e 08          	mov    r9,QWORD PTR [rsi+0x8]
  221987:	4c 39 c2             	cmp    rdx,r8
  22198a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  22198e:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  221992:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  221996:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
  22199a:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
  22199e:	76 10                	jbe    2219b0 <AlignedArrayList(u8,1)_toSlice+0x40>
  2219a0:	48 8d 3d 51 1a 02 00 	lea    rdi,[rip+0x21a51]        # 2433f8 <__unnamed_20>
  2219a7:	31 c0                	xor    eax,eax
  2219a9:	89 c6                	mov    esi,eax
  2219ab:	e8 50 9c fe ff       	call   20b600 <panic>
  2219b0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2219b4:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  2219b8:	48 39 c8             	cmp    rax,rcx
  2219bb:	76 10                	jbe    2219cd <AlignedArrayList(u8,1)_toSlice+0x5d>
  2219bd:	48 8d 3d 34 1a 02 00 	lea    rdi,[rip+0x21a34]        # 2433f8 <__unnamed_20>
  2219c4:	31 c0                	xor    eax,eax
  2219c6:	89 c6                	mov    esi,eax
  2219c8:	e8 33 9c fe ff       	call   20b600 <panic>
  2219cd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2219d1:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  2219d4:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  2219d8:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  2219dc:	48 83 e9 00          	sub    rcx,0x0
  2219e0:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  2219e4:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  2219e8:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  2219ec:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  2219ef:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  2219f3:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  2219f7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2219fb:	48 83 c4 40          	add    rsp,0x40
  2219ff:	5d                   	pop    rbp
  221a00:	c3                   	ret    
  221a01:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  221a08:	0f 1f 84 00 00 00 00 
  221a0f:	00 

0000000000221a10 <AlignedArrayList(u8,1)_addOne>:
        pub fn addOne(self: *Self) !*T {
  221a10:	55                   	push   rbp
  221a11:	48 89 e5             	mov    rbp,rsp
  221a14:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  221a1b:	48 89 f8             	mov    rax,rdi
  221a1e:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            const new_length = self.len + 1;
  221a22:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  221a26:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  221a2a:	48 83 c2 01          	add    rdx,0x1
  221a2e:	0f 92 c1             	setb   cl
  221a31:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  221a35:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  221a39:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  221a3d:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  221a41:	88 4d 9f             	mov    BYTE PTR [rbp-0x61],cl
  221a44:	72 57                	jb     221a9d <AlignedArrayList(u8,1)_addOne+0x8d>
  221a46:	eb 65                	jmp    221aad <AlignedArrayList(u8,1)_addOne+0x9d>
            try self.ensureCapacity(new_length);
  221a48:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  221a4c:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  221a50:	66 89 45 9c          	mov    WORD PTR [rbp-0x64],ax
  221a54:	e8 37 a2 fe ff       	call   20bc90 <__zig_return_error>
  221a59:	66 8b 45 9c          	mov    ax,WORD PTR [rbp-0x64]
  221a5d:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  221a61:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  221a65:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  221a69:	48 89 39             	mov    QWORD PTR [rcx],rdi
  221a6c:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  221a70:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  221a74:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  221a78:	48 81 c4 80 00 00 00 	add    rsp,0x80
  221a7f:	5d                   	pop    rbp
  221a80:	c3                   	ret    
            const result = &self.items[self.len];
  221a81:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  221a85:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  221a89:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
  221a8d:	48 3b 48 08          	cmp    rcx,QWORD PTR [rax+0x8]
  221a91:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  221a95:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
  221a99:	72 4c                	jb     221ae7 <AlignedArrayList(u8,1)_addOne+0xd7>
  221a9b:	eb 3a                	jmp    221ad7 <AlignedArrayList(u8,1)_addOne+0xc7>
  221a9d:	48 8d 3d 24 17 02 00 	lea    rdi,[rip+0x21724]        # 2431c8 <__unnamed_4>
  221aa4:	31 c0                	xor    eax,eax
  221aa6:	89 c6                	mov    esi,eax
            const new_length = self.len + 1;
  221aa8:	e8 53 9b fe ff       	call   20b600 <panic>
  221aad:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  221ab1:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
            try self.ensureCapacity(new_length);
  221ab5:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  221ab9:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  221abd:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  221ac1:	e8 6a 00 00 00       	call   221b30 <AlignedArrayList(u8,1)_ensureCapacity>
  221ac6:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  221aca:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  221acf:	0f 85 73 ff ff ff    	jne    221a48 <AlignedArrayList(u8,1)_addOne+0x38>
  221ad5:	eb aa                	jmp    221a81 <AlignedArrayList(u8,1)_addOne+0x71>
  221ad7:	48 8d 3d 1a 19 02 00 	lea    rdi,[rip+0x2191a]        # 2433f8 <__unnamed_20>
  221ade:	31 c0                	xor    eax,eax
  221ae0:	89 c6                	mov    esi,eax
            const result = &self.items[self.len];
  221ae2:	e8 19 9b fe ff       	call   20b600 <panic>
  221ae7:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  221aeb:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  221aef:	48 03 01             	add    rax,QWORD PTR [rcx]
  221af2:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
            self.len = new_length;
  221af6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  221afa:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  221afe:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
            return result;
  221b02:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  221b06:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  221b0c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  221b10:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  221b14:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  221b18:	48 89 02             	mov    QWORD PTR [rdx],rax
  221b1b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  221b1f:	48 89 42 08          	mov    QWORD PTR [rdx+0x8],rax
  221b23:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  221b27:	48 81 c4 80 00 00 00 	add    rsp,0x80
  221b2e:	5d                   	pop    rbp
  221b2f:	c3                   	ret    

0000000000221b30 <AlignedArrayList(u8,1)_ensureCapacity>:
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  221b30:	55                   	push   rbp
  221b31:	48 89 e5             	mov    rbp,rsp
  221b34:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  221b3b:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  221b3f:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
            var better_capacity = self.items.len;
  221b43:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  221b47:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  221b4b:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
            if (better_capacity >= new_capacity) return;
  221b4f:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  221b53:	48 3b 55 c0          	cmp    rdx,QWORD PTR [rbp-0x40]
  221b57:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  221b5b:	72 11                	jb     221b6e <AlignedArrayList(u8,1)_ensureCapacity+0x3e>
  221b5d:	31 c0                	xor    eax,eax
  221b5f:	66 89 c1             	mov    cx,ax
  221b62:	66 89 c8             	mov    ax,cx
  221b65:	48 81 c4 90 00 00 00 	add    rsp,0x90
  221b6c:	5d                   	pop    rbp
  221b6d:	c3                   	ret    
            while (true) {
  221b6e:	eb 00                	jmp    221b70 <AlignedArrayList(u8,1)_ensureCapacity+0x40>
  221b70:	eb 00                	jmp    221b72 <AlignedArrayList(u8,1)_ensureCapacity+0x42>
  221b72:	31 c0                	xor    eax,eax
  221b74:	88 c1                	mov    cl,al
                better_capacity += better_capacity / 2 + 8;
  221b76:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  221b7a:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  221b7e:	f6 c1 01             	test   cl,0x1
  221b81:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  221b85:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  221b89:	0f 85 8e 00 00 00    	jne    221c1d <AlignedArrayList(u8,1)_ensureCapacity+0xed>
  221b8f:	eb 72                	jmp    221c03 <AlignedArrayList(u8,1)_ensureCapacity+0xd3>
                if (better_capacity >= new_capacity) break;
  221b91:	eb 02                	jmp    221b95 <AlignedArrayList(u8,1)_ensureCapacity+0x65>
            while (true) {
  221b93:	eb db                	jmp    221b70 <AlignedArrayList(u8,1)_ensureCapacity+0x40>
  221b95:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
            self.items = try self.allocator.alignedRealloc(T, A, self.items, better_capacity);
  221b99:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  221b9d:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  221ba1:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
  221ba5:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  221ba9:	4c 8b 45 b8          	mov    r8,QWORD PTR [rbp-0x48]
  221bad:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  221bb1:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  221bb5:	e8 d6 00 00 00       	call   221c90 <Allocator_alignedRealloc.71>
  221bba:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  221bbf:	74 1e                	je     221bdf <AlignedArrayList(u8,1)_ensureCapacity+0xaf>
  221bc1:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  221bc5:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  221bc9:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  221bcd:	e8 be a0 fe ff       	call   20bc90 <__zig_return_error>
  221bd2:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  221bd6:	48 81 c4 90 00 00 00 	add    rsp,0x90
  221bdd:	5d                   	pop    rbp
  221bde:	c3                   	ret    
  221bdf:	31 c0                	xor    eax,eax
  221be1:	66 89 c1             	mov    cx,ax
  221be4:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  221be8:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  221bec:	48 89 16             	mov    QWORD PTR [rsi],rdx
  221bef:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  221bf3:	48 89 56 08          	mov    QWORD PTR [rsi+0x8],rdx
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  221bf7:	66 89 c8             	mov    ax,cx
  221bfa:	48 81 c4 90 00 00 00 	add    rsp,0x90
  221c01:	5d                   	pop    rbp
  221c02:	c3                   	ret    
                better_capacity += better_capacity / 2 + 8;
  221c03:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  221c07:	48 c1 e8 01          	shr    rax,0x1
  221c0b:	48 83 c0 08          	add    rax,0x8
  221c0f:	0f 92 c1             	setb   cl
  221c12:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  221c16:	88 4d 87             	mov    BYTE PTR [rbp-0x79],cl
  221c19:	72 12                	jb     221c2d <AlignedArrayList(u8,1)_ensureCapacity+0xfd>
  221c1b:	eb 20                	jmp    221c3d <AlignedArrayList(u8,1)_ensureCapacity+0x10d>
  221c1d:	48 8d 3d 1c 16 02 00 	lea    rdi,[rip+0x2161c]        # 243240 <__unnamed_7>
  221c24:	31 c0                	xor    eax,eax
  221c26:	89 c6                	mov    esi,eax
  221c28:	e8 d3 99 fe ff       	call   20b600 <panic>
  221c2d:	48 8d 3d 94 15 02 00 	lea    rdi,[rip+0x21594]        # 2431c8 <__unnamed_4>
  221c34:	31 c0                	xor    eax,eax
  221c36:	89 c6                	mov    esi,eax
  221c38:	e8 c3 99 fe ff       	call   20b600 <panic>
  221c3d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  221c41:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  221c45:	48 01 c8             	add    rax,rcx
  221c48:	0f 92 c2             	setb   dl
  221c4b:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  221c52:	88 95 77 ff ff ff    	mov    BYTE PTR [rbp-0x89],dl
  221c58:	72 02                	jb     221c5c <AlignedArrayList(u8,1)_ensureCapacity+0x12c>
  221c5a:	eb 10                	jmp    221c6c <AlignedArrayList(u8,1)_ensureCapacity+0x13c>
  221c5c:	48 8d 3d 65 15 02 00 	lea    rdi,[rip+0x21565]        # 2431c8 <__unnamed_4>
  221c63:	31 c0                	xor    eax,eax
  221c65:	89 c6                	mov    esi,eax
  221c67:	e8 94 99 fe ff       	call   20b600 <panic>
  221c6c:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  221c73:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                if (better_capacity >= new_capacity) break;
  221c77:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  221c7b:	48 3b 4d c0          	cmp    rcx,QWORD PTR [rbp-0x40]
  221c7f:	0f 83 0c ff ff ff    	jae    221b91 <AlignedArrayList(u8,1)_ensureCapacity+0x61>
  221c85:	e9 09 ff ff ff       	jmp    221b93 <AlignedArrayList(u8,1)_ensureCapacity+0x63>
  221c8a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000221c90 <Allocator_alignedRealloc.71>:
    pub fn alignedRealloc(self: *Allocator, comptime T: type, comptime alignment: u29, old_mem: []align(alignment) T, n: usize) ![]align(alignment) T {
  221c90:	55                   	push   rbp
  221c91:	48 89 e5             	mov    rbp,rsp
  221c94:	53                   	push   rbx
  221c95:	48 81 ec 88 01 00 00 	sub    rsp,0x188
  221c9c:	48 89 f8             	mov    rax,rdi
  221c9f:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
  221ca6:	4c 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],r8
        if (old_mem.len == 0) {
  221cad:	48 83 79 08 00       	cmp    QWORD PTR [rcx+0x8],0x0
  221cb2:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  221cb9:	48 89 b5 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rsi
  221cc0:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
  221cc7:	48 89 bd b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rdi
  221cce:	75 64                	jne    221d34 <Allocator_alignedRealloc.71+0xa4>
  221cd0:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
            return self.alignedAlloc(T, alignment, n);
  221cd4:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  221cdb:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  221ce2:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  221ce9:	e8 c2 03 00 00       	call   2220b0 <Allocator_alignedAlloc.72>
  221cee:	66 83 7d e0 00       	cmp    WORD PTR [rbp-0x20],0x0
  221cf3:	74 0e                	je     221d03 <Allocator_alignedRealloc.71+0x73>
  221cf5:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  221cfc:	e8 8f 9f fe ff       	call   20bc90 <__zig_return_error>
  221d01:	eb 02                	jmp    221d05 <Allocator_alignedRealloc.71+0x75>
  221d03:	eb 00                	jmp    221d05 <Allocator_alignedRealloc.71+0x75>
  221d05:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  221d09:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  221d10:	48 89 01             	mov    QWORD PTR [rcx],rax
  221d13:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  221d17:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  221d1b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  221d1f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  221d23:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  221d2a:	48 81 c4 88 01 00 00 	add    rsp,0x188
  221d31:	5b                   	pop    rbx
  221d32:	5d                   	pop    rbp
  221d33:	c3                   	ret    
        if (old_mem.len == 0) {
  221d34:	eb 00                	jmp    221d36 <Allocator_alignedRealloc.71+0xa6>
        if (n == 0) {
  221d36:	48 83 bd 10 ff ff ff 	cmp    QWORD PTR [rbp-0xf0],0x0
  221d3d:	00 
  221d3e:	75 4b                	jne    221d8b <Allocator_alignedRealloc.71+0xfb>
            self.free(old_mem);
  221d40:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
  221d47:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  221d4e:	e8 1d 06 00 00       	call   222370 <Allocator_free.73>
            return ([*]align(alignment) T)(undefined)[0..0];
  221d53:	48 8b 35 fe 74 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffe74fe]        # 209258 <__unnamed_138>
  221d5a:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  221d61:	48 89 37             	mov    QWORD PTR [rdi],rsi
  221d64:	48 8b 35 f5 74 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffe74f5]        # 209260 <__unnamed_138+0x8>
  221d6b:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  221d6f:	48 8b 35 f2 74 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffe74f2]        # 209268 <__unnamed_138+0x10>
  221d76:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  221d7a:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  221d81:	48 81 c4 88 01 00 00 	add    rsp,0x188
  221d88:	5b                   	pop    rbx
  221d89:	5d                   	pop    rbp
  221d8a:	c3                   	ret    
        if (n == 0) {
  221d8b:	eb 00                	jmp    221d8d <Allocator_alignedRealloc.71+0xfd>
  221d8d:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  221d91:	b8 01 00 00 00       	mov    eax,0x1
  221d96:	89 c2                	mov    edx,eax
        const old_byte_slice = @sliceToBytes(old_mem);
  221d98:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  221d9f:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  221da2:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  221da6:	48 8b 71 08          	mov    rsi,QWORD PTR [rcx+0x8]
  221daa:	48 c1 e6 00          	shl    rsi,0x0
  221dae:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  221db2:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  221db6:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
  221dbd:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  221dc1:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  221dc8:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  221dcf:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  221dd6:	e8 35 36 ff ff       	call   215410 <mul>
  221ddb:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  221de0:	74 44                	je     221e26 <Allocator_alignedRealloc.71+0x196>
  221de2:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  221de9:	e8 a2 9e fe ff       	call   20bc90 <__zig_return_error>
  221dee:	48 8b 3d 7b 74 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe747b]        # 209270 <__unnamed_139>
  221df5:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  221dfc:	48 89 38             	mov    QWORD PTR [rax],rdi
  221dff:	48 8b 3d 72 74 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe7472]        # 209278 <__unnamed_139+0x8>
  221e06:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  221e0a:	48 8b 3d 6f 74 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe746f]        # 209280 <__unnamed_139+0x10>
  221e11:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  221e15:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  221e1c:	48 81 c4 88 01 00 00 	add    rsp,0x188
  221e23:	5b                   	pop    rbx
  221e24:	5d                   	pop    rbp
  221e25:	c3                   	ret    
  221e26:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  221e2a:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  221e31:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  221e35:	48 8d 8d 00 ff ff ff 	lea    rcx,[rbp-0x100]
  221e3c:	41 b9 01 00 00 00    	mov    r9d,0x1
  221e42:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  221e49:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
        const byte_slice = try self.reallocFn(self, old_byte_slice, byte_count, alignment);
  221e50:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  221e57:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  221e5b:	48 8b b5 18 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe8]
  221e62:	4c 8b 85 f8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x108]
  221e69:	4c 8b 95 c8 fe ff ff 	mov    r10,QWORD PTR [rbp-0x138]
  221e70:	48 89 b5 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rsi
  221e77:	4c 89 d6             	mov    rsi,r10
  221e7a:	4c 8b 9d a8 fe ff ff 	mov    r11,QWORD PTR [rbp-0x158]
  221e81:	48 89 95 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdx
  221e88:	4c 89 da             	mov    rdx,r11
  221e8b:	48 8b 9d a0 fe ff ff 	mov    rbx,QWORD PTR [rbp-0x160]
  221e92:	ff d3                	call   rbx
  221e94:	66 83 7d 98 00       	cmp    WORD PTR [rbp-0x68],0x0
  221e99:	74 5d                	je     221ef8 <Allocator_alignedRealloc.71+0x268>
  221e9b:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  221e9f:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  221ea6:	66 89 85 9e fe ff ff 	mov    WORD PTR [rbp-0x162],ax
  221ead:	e8 de 9d fe ff       	call   20bc90 <__zig_return_error>
  221eb2:	66 8b 85 9e fe ff ff 	mov    ax,WORD PTR [rbp-0x162]
  221eb9:	66 89 85 68 ff ff ff 	mov    WORD PTR [rbp-0x98],ax
  221ec0:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  221ec7:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  221ece:	48 89 39             	mov    QWORD PTR [rcx],rdi
  221ed1:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  221ed8:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  221edc:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  221ee3:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  221ee7:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  221eee:	48 81 c4 88 01 00 00 	add    rsp,0x188
  221ef5:	5b                   	pop    rbx
  221ef6:	5d                   	pop    rbp
  221ef7:	c3                   	ret    
  221ef8:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  221efc:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  221f03:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  221f07:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
        assert(byte_slice.len == byte_count);
  221f0e:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  221f15:	48 3b 85 f8 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x108]
  221f1c:	0f 94 c1             	sete   cl
  221f1f:	0f b6 f9             	movzx  edi,cl
  221f22:	e8 d9 90 fe ff       	call   20b000 <assert>
        if (n > old_mem.len) {
  221f27:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  221f2e:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  221f35:	48 3b 42 08          	cmp    rax,QWORD PTR [rdx+0x8]
  221f39:	76 78                	jbe    221fb3 <Allocator_alignedRealloc.71+0x323>
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  221f3b:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  221f42:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  221f49:	48 39 c8             	cmp    rax,rcx
  221f4c:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  221f53:	48 89 8d 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rcx
  221f5a:	0f 86 e2 00 00 00    	jbe    222042 <Allocator_alignedRealloc.71+0x3b2>
  221f60:	e9 cd 00 00 00       	jmp    222032 <Allocator_alignedRealloc.71+0x3a2>
  221f65:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  221f6c:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
  221f73:	48 39 c8             	cmp    rax,rcx
  221f76:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  221f7d:	73 32                	jae    221fb1 <Allocator_alignedRealloc.71+0x321>
  221f7f:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  221f86:	48 03 8d 58 ff ff ff 	add    rcx,QWORD PTR [rbp-0xa8]
  221f8d:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
                byte.* = undefined;
  221f94:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  221f9b:	88 01                	mov    BYTE PTR [rcx],al
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  221f9d:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  221fa4:	48 83 c1 01          	add    rcx,0x1
  221fa8:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
  221faf:	eb b4                	jmp    221f65 <Allocator_alignedRealloc.71+0x2d5>
        if (n > old_mem.len) {
  221fb1:	eb 02                	jmp    221fb5 <Allocator_alignedRealloc.71+0x325>
  221fb3:	eb 00                	jmp    221fb5 <Allocator_alignedRealloc.71+0x325>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  221fb5:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  221fbc:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
  221fc3:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  221fca:	48 c1 e0 00          	shl    rax,0x0
  221fce:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  221fd5:	66 c7 85 20 ff ff ff 	mov    WORD PTR [rbp-0xe0],0x0
  221fdc:	00 00 
  221fde:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  221fe5:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  221fec:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  221ff3:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  221ffa:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  222001:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  222008:	48 89 01             	mov    QWORD PTR [rcx],rax
  22200b:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  222012:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  222016:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  22201d:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  222021:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  222028:	48 81 c4 88 01 00 00 	add    rsp,0x188
  22202f:	5b                   	pop    rbx
  222030:	5d                   	pop    rbp
  222031:	c3                   	ret    
  222032:	48 8d 3d bf 13 02 00 	lea    rdi,[rip+0x213bf]        # 2433f8 <__unnamed_20>
  222039:	31 c0                	xor    eax,eax
  22203b:	89 c6                	mov    esi,eax
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  22203d:	e8 be 95 fe ff       	call   20b600 <panic>
  222042:	be aa 00 00 00       	mov    esi,0xaa
  222047:	b8 08 00 00 00       	mov    eax,0x8
  22204c:	89 c2                	mov    edx,eax
  22204e:	48 8d 8d e0 fe ff ff 	lea    rcx,[rbp-0x120]
  222055:	48 8b bd 90 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x170]
  22205c:	48 03 bd e8 fe ff ff 	add    rdi,QWORD PTR [rbp-0x118]
  222063:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
  22206a:	48 8b bd 88 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x178]
  222071:	4c 8b 85 90 fe ff ff 	mov    r8,QWORD PTR [rbp-0x170]
  222078:	4c 29 c7             	sub    rdi,r8
  22207b:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  222082:	48 89 cf             	mov    rdi,rcx
  222085:	e8 26 28 01 00       	call   2348b0 <memset>
  22208a:	48 c7 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],0x0
  222091:	00 00 00 00 
  222095:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  22209c:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  2220a3:	e9 bd fe ff ff       	jmp    221f65 <Allocator_alignedRealloc.71+0x2d5>
  2220a8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  2220af:	00 

00000000002220b0 <Allocator_alignedAlloc.72>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  2220b0:	55                   	push   rbp
  2220b1:	48 89 e5             	mov    rbp,rsp
  2220b4:	48 81 ec 10 01 00 00 	sub    rsp,0x110
  2220bb:	48 89 f8             	mov    rax,rdi
  2220be:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  2220c5:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  2220cc:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  2220d3:	00 
  2220d4:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  2220db:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  2220e2:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  2220e9:	75 37                	jne    222122 <Allocator_alignedAlloc.72+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  2220eb:	48 8b 05 96 71 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe7196]        # 209288 <__unnamed_140>
  2220f2:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  2220f9:	48 89 01             	mov    QWORD PTR [rcx],rax
  2220fc:	48 8b 05 8d 71 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe718d]        # 209290 <__unnamed_140+0x8>
  222103:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  222107:	48 8b 05 8a 71 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe718a]        # 209298 <__unnamed_140+0x10>
  22210e:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  222112:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  222119:	48 81 c4 10 01 00 00 	add    rsp,0x110
  222120:	5d                   	pop    rbp
  222121:	c3                   	ret    
        if (n == 0) {
  222122:	eb 00                	jmp    222124 <Allocator_alignedAlloc.72+0x74>
  222124:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  222128:	b8 01 00 00 00       	mov    eax,0x1
  22212d:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  22212f:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  222136:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  22213d:	e8 ce 32 ff ff       	call   215410 <mul>
  222142:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  222147:	74 43                	je     22218c <Allocator_alignedAlloc.72+0xdc>
  222149:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  222150:	e8 3b 9b fe ff       	call   20bc90 <__zig_return_error>
  222155:	48 8b 3d 44 71 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe7144]        # 2092a0 <__unnamed_141>
  22215c:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  222163:	48 89 38             	mov    QWORD PTR [rax],rdi
  222166:	48 8b 3d 3b 71 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe713b]        # 2092a8 <__unnamed_141+0x8>
  22216d:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  222171:	48 8b 3d 38 71 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe7138]        # 2092b0 <__unnamed_141+0x10>
  222178:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  22217c:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  222183:	48 81 c4 10 01 00 00 	add    rsp,0x110
  22218a:	5d                   	pop    rbp
  22218b:	c3                   	ret    
  22218c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  222190:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  222197:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  22219b:	41 b8 01 00 00 00    	mov    r8d,0x1
  2221a1:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  2221a8:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  2221af:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  2221b6:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  2221b9:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  2221c0:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  2221c7:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  2221ce:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  2221d5:	4c 89 ce             	mov    rsi,r9
  2221d8:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  2221df:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  2221e6:	4c 89 d1             	mov    rcx,r10
  2221e9:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  2221f0:	41 ff d3             	call   r11
  2221f3:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  2221f8:	74 50                	je     22224a <Allocator_alignedAlloc.72+0x19a>
  2221fa:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  2221fe:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  222205:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  22220c:	e8 7f 9a fe ff       	call   20bc90 <__zig_return_error>
  222211:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  222218:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  22221c:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  222220:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  222227:	48 89 39             	mov    QWORD PTR [rcx],rdi
  22222a:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  22222e:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  222232:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  222236:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  22223a:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  222241:	48 81 c4 10 01 00 00 	add    rsp,0x110
  222248:	5d                   	pop    rbp
  222249:	c3                   	ret    
  22224a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  22224e:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  222255:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  222259:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  222260:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  222267:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  22226e:	0f 94 c1             	sete   cl
  222271:	0f b6 f9             	movzx  edi,cl
  222274:	e8 87 8d fe ff       	call   20b000 <assert>
  222279:	be aa 00 00 00       	mov    esi,0xaa
  22227e:	bf 08 00 00 00       	mov    edi,0x8
  222283:	89 fa                	mov    edx,edi
  222285:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  22228c:	48 89 c7             	mov    rdi,rax
  22228f:	e8 1c 26 01 00       	call   2348b0 <memset>
  222294:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  22229b:	00 00 00 00 
  22229f:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  2222a6:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  2222ad:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  2222b4:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  2222bb:	48 39 c8             	cmp    rax,rcx
  2222be:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  2222c5:	73 32                	jae    2222f9 <Allocator_alignedAlloc.72+0x249>
  2222c7:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  2222ce:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  2222d5:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  2222dc:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  2222e3:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  2222e5:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  2222ec:	48 83 c1 01          	add    rcx,0x1
  2222f0:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  2222f7:	eb b4                	jmp    2222ad <Allocator_alignedAlloc.72+0x1fd>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  2222f9:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  222300:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  222304:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  22230b:	48 c1 e0 00          	shl    rax,0x0
  22230f:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  222313:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  22231a:	00 00 
  22231c:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  222320:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  222327:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  22232b:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  22232f:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  222336:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  22233d:	48 89 01             	mov    QWORD PTR [rcx],rax
  222340:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  222347:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  22234b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  22234f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  222353:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  22235a:	48 81 c4 10 01 00 00 	add    rsp,0x110
  222361:	5d                   	pop    rbp
  222362:	c3                   	ret    
  222363:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22236a:	84 00 00 00 00 00 

0000000000222370 <Allocator_free.73>:
    pub fn free(self: *Allocator, memory: var) void {
  222370:	55                   	push   rbp
  222371:	48 89 e5             	mov    rbp,rsp
  222374:	48 83 ec 60          	sub    rsp,0x60
  222378:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
        const bytes = @sliceToBytes(memory);
  22237c:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  22237f:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  222383:	48 8b 76 08          	mov    rsi,QWORD PTR [rsi+0x8]
  222387:	48 c1 e6 00          	shl    rsi,0x0
  22238b:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22238f:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  222393:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  222397:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  22239b:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        if (bytes.len == 0) return;
  22239f:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
  2223a4:	75 06                	jne    2223ac <Allocator_free.73+0x3c>
  2223a6:	48 83 c4 60          	add    rsp,0x60
  2223aa:	5d                   	pop    rbp
  2223ab:	c3                   	ret    
  2223ac:	31 c0                	xor    eax,eax
  2223ae:	89 c1                	mov    ecx,eax
        const non_const_ptr = @intToPtr([*]u8, @ptrToInt(bytes.ptr));
  2223b0:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  2223b4:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
        self.freeFn(self, non_const_ptr[0..bytes.len]);
  2223b8:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  2223bc:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  2223c0:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  2223c4:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  2223c8:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
  2223cc:	48 39 f1             	cmp    rcx,rsi
  2223cf:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
  2223d3:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
  2223d7:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  2223db:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  2223df:	76 10                	jbe    2223f1 <Allocator_free.73+0x81>
  2223e1:	48 8d 3d 10 10 02 00 	lea    rdi,[rip+0x21010]        # 2433f8 <__unnamed_20>
  2223e8:	31 c0                	xor    eax,eax
  2223ea:	89 c6                	mov    esi,eax
  2223ec:	e8 0f 92 fe ff       	call   20b600 <panic>
  2223f1:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
  2223f5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  2223f9:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  2223fd:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  222401:	48 83 e9 00          	sub    rcx,0x0
  222405:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  222409:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  22240d:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  222411:	ff d1                	call   rcx
    pub fn free(self: *Allocator, memory: var) void {
  222413:	48 83 c4 60          	add    rsp,0x60
  222417:	5d                   	pop    rbp
  222418:	c3                   	ret    
  222419:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000222420 <InStream(ReadError)_readByteSigned>:
        pub fn readByteSigned(self: *Self) !i8 {
  222420:	55                   	push   rbp
  222421:	48 89 e5             	mov    rbp,rsp
  222424:	48 83 ec 50          	sub    rsp,0x50
  222428:	48 89 f8             	mov    rax,rdi
  22242b:	48 8d 4d f8          	lea    rcx,[rbp-0x8]
  22242f:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
            return @bitCast(i8, try self.readByte());
  222433:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  222437:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
  22243b:	48 89 cf             	mov    rdi,rcx
  22243e:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  222442:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  222446:	e8 f5 16 ff ff       	call   213b40 <InStream(ReadError)_readByte>
  22244b:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  222450:	74 2c                	je     22247e <InStream(ReadError)_readByteSigned+0x5e>
  222452:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  222456:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  22245a:	66 89 45 be          	mov    WORD PTR [rbp-0x42],ax
  22245e:	e8 2d 98 fe ff       	call   20bc90 <__zig_return_error>
  222463:	66 8b 45 be          	mov    ax,WORD PTR [rbp-0x42]
  222467:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  22246b:	8b 4d e8             	mov    ecx,DWORD PTR [rbp-0x18]
  22246e:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  222472:	89 0f                	mov    DWORD PTR [rdi],ecx
  222474:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  222478:	48 83 c4 50          	add    rsp,0x50
  22247c:	5d                   	pop    rbp
  22247d:	c3                   	ret    
  22247e:	8a 45 fa             	mov    al,BYTE PTR [rbp-0x6]
  222481:	66 c7 45 e0 00 00    	mov    WORD PTR [rbp-0x20],0x0
  222487:	88 45 e2             	mov    BYTE PTR [rbp-0x1e],al
  22248a:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
  22248d:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  222491:	89 0a                	mov    DWORD PTR [rdx],ecx
  222493:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  222497:	48 83 c4 50          	add    rsp,0x50
  22249b:	5d                   	pop    rbp
  22249c:	c3                   	ret    
  22249d:	0f 1f 00             	nop    DWORD PTR [rax]

00000000002224a0 <Allocator_alloc.74>:
    pub fn alloc(self: *Allocator, comptime T: type, n: usize) ![]T {
  2224a0:	55                   	push   rbp
  2224a1:	48 89 e5             	mov    rbp,rsp
  2224a4:	48 83 ec 40          	sub    rsp,0x40
  2224a8:	48 89 f8             	mov    rax,rdi
  2224ab:	4c 8d 45 e8          	lea    r8,[rbp-0x18]
  2224af:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  2224b3:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
        return self.alignedAlloc(T, @alignOf(T), n);
  2224b7:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  2224bb:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  2224bf:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
  2224c3:	4c 89 c7             	mov    rdi,r8
  2224c6:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  2224ca:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  2224ce:	e8 dd fb ff ff       	call   2220b0 <Allocator_alignedAlloc.72>
  2224d3:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  2224d8:	74 0b                	je     2224e5 <Allocator_alloc.74+0x45>
  2224da:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2224de:	e8 ad 97 fe ff       	call   20bc90 <__zig_return_error>
  2224e3:	eb 02                	jmp    2224e7 <Allocator_alloc.74+0x47>
  2224e5:	eb 00                	jmp    2224e7 <Allocator_alloc.74+0x47>
  2224e7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2224eb:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  2224ef:	48 89 01             	mov    QWORD PTR [rcx],rax
  2224f2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2224f6:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2224fa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2224fe:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  222502:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  222506:	48 83 c4 40          	add    rsp,0x40
  22250a:	5d                   	pop    rbp
  22250b:	c3                   	ret    
  22250c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000222510 <AlignedArrayList([]u8,8)_init>:
        pub fn init(allocator: *Allocator) Self {
  222510:	55                   	push   rbp
  222511:	48 89 e5             	mov    rbp,rsp
  222514:	48 89 f8             	mov    rax,rdi
  222517:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
                .allocator = allocator,
  22251b:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
            return Self{
  22251f:	48 8b 0d 8a dd fd ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffddd8a]        # 2002b0 <__unnamed_100>
  222526:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  22252a:	48 8b 0d 87 dd fd ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffddd87]        # 2002b8 <__unnamed_100+0x8>
  222531:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  222535:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  22253c:	00 
  22253d:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  222541:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  222545:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  222548:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22254c:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  222550:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  222554:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  222558:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  22255c:	48 89 4f 18          	mov    QWORD PTR [rdi+0x18],rcx
  222560:	5d                   	pop    rbp
  222561:	c3                   	ret    
  222562:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  222569:	1f 84 00 00 00 00 00 

0000000000222570 <AlignedArrayList([]u8,8)_append>:
        pub fn append(self: *Self, item: T) !void {
  222570:	55                   	push   rbp
  222571:	48 89 e5             	mov    rbp,rsp
  222574:	48 83 ec 50          	sub    rsp,0x50
  222578:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  22257c:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
            const new_item_ptr = try self.addOne();
  222580:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  222584:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  222588:	48 89 c7             	mov    rdi,rax
  22258b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  22258f:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
  222593:	48 89 c6             	mov    rsi,rax
  222596:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  22259a:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  22259e:	48 89 ca             	mov    rdx,rcx
  2225a1:	e8 fa 0b 00 00       	call   2231a0 <AlignedArrayList([]u8,8)_addOne>
  2225a6:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  2225ab:	74 1b                	je     2225c8 <AlignedArrayList([]u8,8)_append+0x58>
  2225ad:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  2225b1:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2225b5:	66 89 45 b6          	mov    WORD PTR [rbp-0x4a],ax
  2225b9:	e8 d2 96 fe ff       	call   20bc90 <__zig_return_error>
  2225be:	66 8b 45 b6          	mov    ax,WORD PTR [rbp-0x4a]
  2225c2:	48 83 c4 50          	add    rsp,0x50
  2225c6:	5d                   	pop    rbp
  2225c7:	c3                   	ret    
  2225c8:	31 c0                	xor    eax,eax
  2225ca:	66 89 c1             	mov    cx,ax
  2225cd:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  2225d1:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            new_item_ptr.* = item;
  2225d5:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  2225d9:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  2225dd:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  2225e0:	48 89 3a             	mov    QWORD PTR [rdx],rdi
  2225e3:	48 8b 7e 08          	mov    rdi,QWORD PTR [rsi+0x8]
  2225e7:	48 89 7a 08          	mov    QWORD PTR [rdx+0x8],rdi
        pub fn append(self: *Self, item: T) !void {
  2225eb:	66 89 c8             	mov    ax,cx
  2225ee:	48 83 c4 50          	add    rsp,0x50
  2225f2:	5d                   	pop    rbp
  2225f3:	c3                   	ret    
  2225f4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2225fb:	00 00 00 00 00 

0000000000222600 <AlignedArrayList(FileEntry,8)_init>:
        pub fn init(allocator: *Allocator) Self {
  222600:	55                   	push   rbp
  222601:	48 89 e5             	mov    rbp,rsp
  222604:	48 89 f8             	mov    rax,rdi
  222607:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
                .allocator = allocator,
  22260b:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
            return Self{
  22260f:	48 8b 0d 9a dc fd ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffddc9a]        # 2002b0 <__unnamed_100>
  222616:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  22261a:	48 8b 0d 97 dc fd ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffddc97]        # 2002b8 <__unnamed_100+0x8>
  222621:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  222625:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  22262c:	00 
  22262d:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  222631:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  222635:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  222638:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22263c:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  222640:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  222644:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  222648:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  22264c:	48 89 4f 18          	mov    QWORD PTR [rdi+0x18],rcx
  222650:	5d                   	pop    rbp
  222651:	c3                   	ret    
  222652:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  222659:	1f 84 00 00 00 00 00 

0000000000222660 <AlignedArrayList([]u8,8)_toSliceConst>:
        pub fn toSliceConst(self: Self) []align(A) const T {
  222660:	55                   	push   rbp
  222661:	48 89 e5             	mov    rbp,rsp
  222664:	48 83 ec 40          	sub    rsp,0x40
  222668:	48 89 f8             	mov    rax,rdi
  22266b:	31 c9                	xor    ecx,ecx
  22266d:	89 ca                	mov    edx,ecx
            return self.items[0..self.len];
  22266f:	4c 8b 46 10          	mov    r8,QWORD PTR [rsi+0x10]
  222673:	4c 8b 4e 08          	mov    r9,QWORD PTR [rsi+0x8]
  222677:	4c 39 c2             	cmp    rdx,r8
  22267a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  22267e:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  222682:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  222686:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
  22268a:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
  22268e:	76 10                	jbe    2226a0 <AlignedArrayList([]u8,8)_toSliceConst+0x40>
  222690:	48 8d 3d 61 0d 02 00 	lea    rdi,[rip+0x20d61]        # 2433f8 <__unnamed_20>
  222697:	31 c0                	xor    eax,eax
  222699:	89 c6                	mov    esi,eax
  22269b:	e8 60 8f fe ff       	call   20b600 <panic>
  2226a0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2226a4:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  2226a8:	48 39 c8             	cmp    rax,rcx
  2226ab:	76 10                	jbe    2226bd <AlignedArrayList([]u8,8)_toSliceConst+0x5d>
  2226ad:	48 8d 3d 44 0d 02 00 	lea    rdi,[rip+0x20d44]        # 2433f8 <__unnamed_20>
  2226b4:	31 c0                	xor    eax,eax
  2226b6:	89 c6                	mov    esi,eax
  2226b8:	e8 43 8f fe ff       	call   20b600 <panic>
  2226bd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2226c1:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  2226c4:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  2226c8:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  2226cc:	48 83 e9 00          	sub    rcx,0x0
  2226d0:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  2226d4:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  2226d8:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  2226dc:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  2226df:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  2226e3:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  2226e7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2226eb:	48 83 c4 40          	add    rsp,0x40
  2226ef:	5d                   	pop    rbp
  2226f0:	c3                   	ret    
  2226f1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2226f8:	0f 1f 84 00 00 00 00 
  2226ff:	00 

0000000000222700 <LineNumberProgram_init>:
    pub fn init(is_stmt: bool, include_dirs: []const []const u8, file_entries: *ArrayList(FileEntry), target_address: usize) LineNumberProgram {
  222700:	55                   	push   rbp
  222701:	48 89 e5             	mov    rbp,rsp
  222704:	41 56                	push   r14
  222706:	53                   	push   rbx
  222707:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  22270e:	40 88 f0             	mov    al,sil
  222711:	49 89 f9             	mov    r9,rdi
  222714:	be 70 00 00 00       	mov    esi,0x70
  222719:	41 89 f2             	mov    r10d,esi
  22271c:	4c 8d 5d 80          	lea    r11,[rbp-0x80]
  222720:	24 01                	and    al,0x1
  222722:	88 85 7f ff ff ff    	mov    BYTE PTR [rbp-0x81],al
  222728:	48 89 8d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rcx
  22272f:	4c 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],r8
            .is_stmt = is_stmt,
  222736:	8a 85 7f ff ff ff    	mov    al,BYTE PTR [rbp-0x81]
            .file_entries = file_entries,
  22273c:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
            .target_address = target_address,
  222743:	4c 8b 85 68 ff ff ff 	mov    r8,QWORD PTR [rbp-0x98]
        return LineNumberProgram{
  22274a:	48 c7 45 80 00 00 00 	mov    QWORD PTR [rbp-0x80],0x0
  222751:	00 
  222752:	48 c7 45 88 01 00 00 	mov    QWORD PTR [rbp-0x78],0x1
  222759:	00 
  22275a:	48 c7 45 90 01 00 00 	mov    QWORD PTR [rbp-0x70],0x1
  222761:	00 
  222762:	48 c7 45 98 00 00 00 	mov    QWORD PTR [rbp-0x68],0x0
  222769:	00 
  22276a:	24 01                	and    al,0x1
  22276c:	88 45 a0             	mov    BYTE PTR [rbp-0x60],al
  22276f:	c6 45 a1 00          	mov    BYTE PTR [rbp-0x5f],0x0
  222773:	c6 45 a2 00          	mov    BYTE PTR [rbp-0x5e],0x0
  222777:	4c 89 45 a8          	mov    QWORD PTR [rbp-0x58],r8
  22277b:	4c 8b 02             	mov    r8,QWORD PTR [rdx]
  22277e:	4c 89 45 b0          	mov    QWORD PTR [rbp-0x50],r8
  222782:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  222786:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  22278a:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
  22278e:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
  222795:	00 
  222796:	4c 89 75 d0          	mov    QWORD PTR [rbp-0x30],r14
  22279a:	4c 89 75 d8          	mov    QWORD PTR [rbp-0x28],r14
  22279e:	4c 89 75 e0          	mov    QWORD PTR [rbp-0x20],r14
  2227a2:	88 d8                	mov    al,bl
  2227a4:	24 01                	and    al,0x1
  2227a6:	88 45 e8             	mov    BYTE PTR [rbp-0x18],al
  2227a9:	88 d8                	mov    al,bl
  2227ab:	24 01                	and    al,0x1
  2227ad:	88 45 e9             	mov    BYTE PTR [rbp-0x17],al
  2227b0:	80 e3 01             	and    bl,0x1
  2227b3:	88 5d ea             	mov    BYTE PTR [rbp-0x16],bl
  2227b6:	4c 89 de             	mov    rsi,r11
  2227b9:	4c 89 d2             	mov    rdx,r10
  2227bc:	4c 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r9
  2227c3:	e8 38 21 01 00       	call   234900 <memcpy>
  2227c8:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  2227cf:	48 81 c4 90 00 00 00 	add    rsp,0x90
  2227d6:	5b                   	pop    rbx
  2227d7:	41 5e                	pop    r14
  2227d9:	5d                   	pop    rbp
  2227da:	c3                   	ret    
  2227db:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000002227e0 <AlignedArrayList(FileEntry,8)_append>:
        pub fn append(self: *Self, item: T) !void {
  2227e0:	55                   	push   rbp
  2227e1:	48 89 e5             	mov    rbp,rsp
  2227e4:	48 83 ec 60          	sub    rsp,0x60
  2227e8:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  2227ec:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
            const new_item_ptr = try self.addOne();
  2227f0:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  2227f4:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  2227f8:	48 89 c7             	mov    rdi,rax
  2227fb:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2227ff:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
  222803:	48 89 c6             	mov    rsi,rax
  222806:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  22280a:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  22280e:	48 89 ca             	mov    rdx,rcx
  222811:	e8 4a 14 00 00       	call   223c60 <AlignedArrayList(FileEntry,8)_addOne>
  222816:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  22281b:	74 1b                	je     222838 <AlignedArrayList(FileEntry,8)_append+0x58>
  22281d:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  222821:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  222825:	66 89 45 b6          	mov    WORD PTR [rbp-0x4a],ax
  222829:	e8 62 94 fe ff       	call   20bc90 <__zig_return_error>
  22282e:	66 8b 45 b6          	mov    ax,WORD PTR [rbp-0x4a]
  222832:	48 83 c4 60          	add    rsp,0x60
  222836:	5d                   	pop    rbp
  222837:	c3                   	ret    
  222838:	31 c0                	xor    eax,eax
  22283a:	66 89 c1             	mov    cx,ax
  22283d:	b8 28 00 00 00       	mov    eax,0x28
  222842:	89 c2                	mov    edx,eax
  222844:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  222848:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
            new_item_ptr.* = item;
  22284c:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  222850:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  222854:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  222858:	48 89 f7             	mov    rdi,rsi
  22285b:	48 8b 75 a8          	mov    rsi,QWORD PTR [rbp-0x58]
  22285f:	66 89 4d a6          	mov    WORD PTR [rbp-0x5a],cx
  222863:	e8 98 20 01 00       	call   234900 <memcpy>
        pub fn append(self: *Self, item: T) !void {
  222868:	66 8b 45 a6          	mov    ax,WORD PTR [rbp-0x5a]
  22286c:	48 83 c4 60          	add    rsp,0x60
  222870:	5d                   	pop    rbp
  222871:	c3                   	ret    
  222872:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  222879:	1f 84 00 00 00 00 00 

0000000000222880 <cast.75>:
pub fn cast(comptime T: type, x: var) (error{Overflow}!T) {
  222880:	55                   	push   rbp
  222881:	48 89 e5             	mov    rbp,rsp
  222884:	48 83 ec 30          	sub    rsp,0x30
  222888:	48 89 f8             	mov    rax,rdi
  22288b:	48 b9 ff ff ff ff ff 	movabs rcx,0x7fffffffffffffff
  222892:	ff ff 7f 
  222895:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    if (@maxValue(@typeOf(x)) > @maxValue(T) and x > @maxValue(T)) {
  222899:	48 39 4d e8          	cmp    QWORD PTR [rbp-0x18],rcx
  22289d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  2228a1:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  2228a5:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  2228a9:	76 2c                	jbe    2228d7 <cast.75+0x57>
        return error.Overflow;
  2228ab:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  2228af:	e8 dc 93 fe ff       	call   20bc90 <__zig_return_error>
  2228b4:	48 8b 3d 15 df fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffddf15]        # 2007d0 <__unnamed_144>
  2228bb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2228bf:	48 89 38             	mov    QWORD PTR [rax],rdi
  2228c2:	48 8b 3d 0f df fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffddf0f]        # 2007d8 <__unnamed_144+0x8>
  2228c9:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  2228cd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2228d1:	48 83 c4 30          	add    rsp,0x30
  2228d5:	5d                   	pop    rbp
  2228d6:	c3                   	ret    
        return @intCast(T, x);
  2228d7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2228db:	66 c7 45 f0 00 00    	mov    WORD PTR [rbp-0x10],0x0
  2228e1:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  2228e5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2228e9:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  2228ed:	48 89 01             	mov    QWORD PTR [rcx],rax
  2228f0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2228f4:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2228f8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2228fc:	48 83 c4 30          	add    rsp,0x30
  222900:	5d                   	pop    rbp
  222901:	c3                   	ret    
  222902:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  222909:	1f 84 00 00 00 00 00 

0000000000222910 <LineNumberProgram_checkLineMatch>:
    pub fn checkLineMatch(self: *LineNumberProgram) !?LineInfo {
  222910:	55                   	push   rbp
  222911:	48 89 e5             	mov    rbp,rsp
  222914:	53                   	push   rbx
  222915:	48 81 ec e8 01 00 00 	sub    rsp,0x1e8
  22291c:	48 89 f8             	mov    rax,rdi
  22291f:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
        if (self.target_address >= self.prev_address and self.target_address < self.address) {
  222926:	48 8b 95 f8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x108]
  22292d:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
  222931:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  222938:	48 3b 51 48          	cmp    rdx,QWORD PTR [rcx+0x48]
  22293c:	41 0f 93 c0          	setae  r8b
  222940:	41 f6 c0 01          	test   r8b,0x1
  222944:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
  22294b:	48 89 bd c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rdi
  222952:	48 89 b5 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rsi
  222959:	44 88 85 b7 fe ff ff 	mov    BYTE PTR [rbp-0x149],r8b
  222960:	75 02                	jne    222964 <LineNumberProgram_checkLineMatch+0x54>
  222962:	eb 1e                	jmp    222982 <LineNumberProgram_checkLineMatch+0x72>
  222964:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  22296b:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
  22296f:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  222976:	48 3b 01             	cmp    rax,QWORD PTR [rcx]
  222979:	0f 92 c2             	setb   dl
  22297c:	88 95 b7 fe ff ff    	mov    BYTE PTR [rbp-0x149],dl
  222982:	8a 85 b7 fe ff ff    	mov    al,BYTE PTR [rbp-0x149]
  222988:	a8 01                	test   al,0x1
  22298a:	75 05                	jne    222991 <LineNumberProgram_checkLineMatch+0x81>
  22298c:	e9 b0 03 00 00       	jmp    222d41 <LineNumberProgram_checkLineMatch+0x431>
            const file_entry = if (self.prev_file == 0) {
  222991:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  222998:	48 83 78 50 00       	cmp    QWORD PTR [rax+0x50],0x0
  22299d:	75 48                	jne    2229e7 <LineNumberProgram_checkLineMatch+0xd7>
                return error.MissingDebugInfo;
  22299f:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  2229a6:	e8 e5 92 fe ff       	call   20bc90 <__zig_return_error>
  2229ab:	48 8d 3d 76 6b fe ff 	lea    rdi,[rip+0xfffffffffffe6b76]        # 209528 <__unnamed_145>
  2229b2:	b8 38 00 00 00       	mov    eax,0x38
  2229b7:	89 c2                	mov    edx,eax
  2229b9:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  2229c0:	48 89 bd a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rdi
  2229c7:	48 89 cf             	mov    rdi,rcx
  2229ca:	48 8b b5 a8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x158]
  2229d1:	e8 2a 1f 01 00       	call   234900 <memcpy>
  2229d6:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  2229dd:	48 81 c4 e8 01 00 00 	add    rsp,0x1e8
  2229e4:	5b                   	pop    rbx
  2229e5:	5d                   	pop    rbp
  2229e6:	c3                   	ret    
            } else if (self.prev_file - 1 >= self.file_entries.len) {
  2229e7:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  2229ee:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
  2229f2:	48 83 e8 01          	sub    rax,0x1
  2229f6:	0f 92 c1             	setb   cl
  2229f9:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
  222a00:	88 8d 9f fe ff ff    	mov    BYTE PTR [rbp-0x161],cl
  222a06:	0f 82 0d 04 00 00    	jb     222e19 <LineNumberProgram_checkLineMatch+0x509>
  222a0c:	e9 18 04 00 00       	jmp    222e29 <LineNumberProgram_checkLineMatch+0x519>
                return error.InvalidDebugInfo;
  222a11:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  222a18:	e8 73 92 fe ff       	call   20bc90 <__zig_return_error>
  222a1d:	48 8d 3d 3c 6b fe ff 	lea    rdi,[rip+0xfffffffffffe6b3c]        # 209560 <__unnamed_146>
  222a24:	b8 38 00 00 00       	mov    eax,0x38
  222a29:	89 c2                	mov    edx,eax
  222a2b:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  222a32:	48 89 bd 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rdi
  222a39:	48 89 cf             	mov    rdi,rcx
  222a3c:	48 8b b5 90 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x170]
  222a43:	e8 b8 1e 01 00       	call   234900 <memcpy>
  222a48:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  222a4f:	48 81 c4 e8 01 00 00 	add    rsp,0x1e8
  222a56:	5b                   	pop    rbx
  222a57:	5d                   	pop    rbp
  222a58:	c3                   	ret    
                &self.file_entries.items[self.prev_file - 1];
  222a59:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  222a60:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  222a64:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  222a6b:	48 8b 49 50          	mov    rcx,QWORD PTR [rcx+0x50]
  222a6f:	48 83 e9 01          	sub    rcx,0x1
  222a73:	0f 92 c2             	setb   dl
  222a76:	48 89 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rax
  222a7d:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  222a84:	88 95 7f fe ff ff    	mov    BYTE PTR [rbp-0x181],dl
  222a8a:	0f 82 ba 03 00 00    	jb     222e4a <LineNumberProgram_checkLineMatch+0x53a>
  222a90:	e9 c5 03 00 00       	jmp    222e5a <LineNumberProgram_checkLineMatch+0x54a>
            const file_entry = if (self.prev_file == 0) {
  222a95:	eb 00                	jmp    222a97 <LineNumberProgram_checkLineMatch+0x187>
  222a97:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  222a9e:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
            const dir_name = if (file_entry.dir_index >= self.include_dirs.len) {
  222aa5:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  222aac:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
  222ab0:	48 8b 95 f8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x108]
  222ab7:	48 3b 4a 38          	cmp    rcx,QWORD PTR [rdx+0x38]
  222abb:	72 48                	jb     222b05 <LineNumberProgram_checkLineMatch+0x1f5>
                return error.InvalidDebugInfo;
  222abd:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  222ac4:	e8 c7 91 fe ff       	call   20bc90 <__zig_return_error>
  222ac9:	48 8d 3d c8 6a fe ff 	lea    rdi,[rip+0xfffffffffffe6ac8]        # 209598 <__unnamed_147>
  222ad0:	b8 38 00 00 00       	mov    eax,0x38
  222ad5:	89 c2                	mov    edx,eax
  222ad7:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  222ade:	48 89 bd 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rdi
  222ae5:	48 89 cf             	mov    rdi,rcx
  222ae8:	48 8b b5 68 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x198]
  222aef:	e8 0c 1e 01 00       	call   234900 <memcpy>
  222af4:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  222afb:	48 81 c4 e8 01 00 00 	add    rsp,0x1e8
  222b02:	5b                   	pop    rbx
  222b03:	5d                   	pop    rbp
  222b04:	c3                   	ret    
                self.include_dirs[file_entry.dir_index];
  222b05:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  222b0c:	48 89 c1             	mov    rcx,rax
  222b0f:	48 83 c1 30          	add    rcx,0x30
  222b13:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  222b1a:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  222b1e:	48 3b 50 38          	cmp    rdx,QWORD PTR [rax+0x38]
  222b22:	48 89 95 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rdx
  222b29:	48 89 8d 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rcx
  222b30:	0f 82 79 03 00 00    	jb     222eaf <LineNumberProgram_checkLineMatch+0x59f>
  222b36:	e9 64 03 00 00       	jmp    222e9f <LineNumberProgram_checkLineMatch+0x58f>
  222b3b:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
  222b3f:	48 8d 8d e0 fe ff ff 	lea    rcx,[rbp-0x120]
            const dir_name = if (file_entry.dir_index >= self.include_dirs.len) {
  222b46:	48 8b 85 50 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b0]
  222b4d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  222b50:	48 89 95 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rdx
  222b57:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
  222b5b:	48 89 95 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdx
            const file_name = try os.path.join(self.file_entries.allocator, dir_name, file_entry.file_name);
  222b62:	48 8b 95 f8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x108]
  222b69:	48 8b 52 40          	mov    rdx,QWORD PTR [rdx+0x40]
  222b6d:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
  222b71:	4c 8b 85 f0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x110]
  222b78:	48 8b b5 b8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x148]
  222b7f:	e8 bc 1b 00 00       	call   224740 <join>
  222b84:	66 83 7d e0 00       	cmp    WORD PTR [rbp-0x20],0x0
  222b89:	74 5b                	je     222be6 <LineNumberProgram_checkLineMatch+0x2d6>
  222b8b:	66 8b 45 e0          	mov    ax,WORD PTR [rbp-0x20]
  222b8f:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  222b96:	66 89 85 4e fe ff ff 	mov    WORD PTR [rbp-0x1b2],ax
  222b9d:	e8 ee 90 fe ff       	call   20bc90 <__zig_return_error>
  222ba2:	b9 38 00 00 00       	mov    ecx,0x38
  222ba7:	89 ca                	mov    edx,ecx
  222ba9:	48 8d 7d 90          	lea    rdi,[rbp-0x70]
  222bad:	66 8b 85 4e fe ff ff 	mov    ax,WORD PTR [rbp-0x1b2]
  222bb4:	66 89 45 90          	mov    WORD PTR [rbp-0x70],ax
  222bb8:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  222bbf:	48 89 bd 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rdi
  222bc6:	48 89 f7             	mov    rdi,rsi
  222bc9:	48 8b b5 40 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1c0]
  222bd0:	e8 2b 1d 01 00       	call   234900 <memcpy>
  222bd5:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  222bdc:	48 81 c4 e8 01 00 00 	add    rsp,0x1e8
  222be3:	5b                   	pop    rbx
  222be4:	5d                   	pop    rbp
  222be5:	c3                   	ret    
  222be6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  222bea:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  222bf1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  222bf5:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
                .line = if (self.prev_line >= 0) @intCast(usize, self.prev_line) else 0,
  222bfc:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  222c03:	48 83 78 58 00       	cmp    QWORD PTR [rax+0x58],0x0
  222c08:	7c 21                	jl     222c2b <LineNumberProgram_checkLineMatch+0x31b>
  222c0a:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  222c11:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
  222c15:	48 83 f8 00          	cmp    rax,0x0
  222c19:	48 89 85 38 fe ff ff 	mov    QWORD PTR [rbp-0x1c8],rax
  222c20:	0f 8d aa 02 00 00    	jge    222ed0 <LineNumberProgram_checkLineMatch+0x5c0>
  222c26:	e9 b8 02 00 00       	jmp    222ee3 <LineNumberProgram_checkLineMatch+0x5d3>
  222c2b:	31 c0                	xor    eax,eax
  222c2d:	89 c1                	mov    ecx,eax
  222c2f:	48 89 8d 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rcx
  222c36:	eb 00                	jmp    222c38 <LineNumberProgram_checkLineMatch+0x328>
  222c38:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  222c3f:	b9 38 00 00 00       	mov    ecx,0x38
  222c44:	89 ca                	mov    edx,ecx
  222c46:	48 8d b5 00 ff ff ff 	lea    rsi,[rbp-0x100]
  222c4d:	b9 30 00 00 00       	mov    ecx,0x30
  222c52:	89 cf                	mov    edi,ecx
  222c54:	4c 8d 85 38 ff ff ff 	lea    r8,[rbp-0xc8]
  222c5b:	b9 28 00 00 00       	mov    ecx,0x28
  222c60:	41 89 c9             	mov    r9d,ecx
  222c63:	4c 8d 95 68 ff ff ff 	lea    r10,[rbp-0x98]
                .column = self.prev_column,
  222c6a:	4c 8b 9d f8 fe ff ff 	mov    r11,QWORD PTR [rbp-0x108]
  222c71:	4d 8b 5b 60          	mov    r11,QWORD PTR [r11+0x60]
                .allocator = self.file_entries.allocator,
  222c75:	48 8b 9d f8 fe ff ff 	mov    rbx,QWORD PTR [rbp-0x108]
  222c7c:	48 8b 5b 40          	mov    rbx,QWORD PTR [rbx+0x40]
  222c80:	48 8b 5b 18          	mov    rbx,QWORD PTR [rbx+0x18]
            return LineInfo{
  222c84:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  222c8b:	4c 89 9d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r11
  222c92:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  222c99:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  222ca0:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  222ca7:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  222cab:	48 89 5d 88          	mov    QWORD PTR [rbp-0x78],rbx
  222caf:	4c 89 c0             	mov    rax,r8
  222cb2:	48 89 bd 28 fe ff ff 	mov    QWORD PTR [rbp-0x1d8],rdi
  222cb9:	48 89 c7             	mov    rdi,rax
  222cbc:	48 89 b5 20 fe ff ff 	mov    QWORD PTR [rbp-0x1e0],rsi
  222cc3:	4c 89 d6             	mov    rsi,r10
  222cc6:	48 89 95 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],rdx
  222ccd:	4c 89 ca             	mov    rdx,r9
  222cd0:	4c 89 85 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],r8
  222cd7:	e8 24 1c 01 00       	call   234900 <memcpy>
  222cdc:	c6 85 60 ff ff ff 01 	mov    BYTE PTR [rbp-0xa0],0x1
  222ce3:	66 c7 85 00 ff ff ff 	mov    WORD PTR [rbp-0x100],0x0
  222cea:	00 00 
  222cec:	48 8b 85 20 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e0]
  222cf3:	48 83 c0 08          	add    rax,0x8
  222cf7:	48 8b 95 10 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1f0]
  222cfe:	48 89 c7             	mov    rdi,rax
  222d01:	48 89 d6             	mov    rsi,rdx
  222d04:	48 8b 95 28 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d8]
  222d0b:	e8 f0 1b 01 00       	call   234900 <memcpy>
  222d10:	48 8b 85 20 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e0]
  222d17:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  222d1e:	48 89 d7             	mov    rdi,rdx
  222d21:	48 89 c6             	mov    rsi,rax
  222d24:	48 8b 95 18 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1e8]
  222d2b:	e8 d0 1b 01 00       	call   234900 <memcpy>
  222d30:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  222d37:	48 81 c4 e8 01 00 00 	add    rsp,0x1e8
  222d3e:	5b                   	pop    rbx
  222d3f:	5d                   	pop    rbp
  222d40:	c3                   	ret    
        if (self.target_address >= self.prev_address and self.target_address < self.address) {
  222d41:	eb 00                	jmp    222d43 <LineNumberProgram_checkLineMatch+0x433>
  222d43:	48 8d 05 86 68 fe ff 	lea    rax,[rip+0xfffffffffffe6886]        # 2095d0 <__unnamed_148>
  222d4a:	b9 38 00 00 00       	mov    ecx,0x38
  222d4f:	89 ca                	mov    edx,ecx
        self.prev_address = self.address;
  222d51:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
  222d58:	48 8b bd f8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x108]
  222d5f:	48 8b 3f             	mov    rdi,QWORD PTR [rdi]
  222d62:	48 89 7e 48          	mov    QWORD PTR [rsi+0x48],rdi
        self.prev_file = self.file;
  222d66:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
  222d6d:	48 8b bd f8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x108]
  222d74:	48 8b 7f 08          	mov    rdi,QWORD PTR [rdi+0x8]
  222d78:	48 89 7e 50          	mov    QWORD PTR [rsi+0x50],rdi
        self.prev_line = self.line;
  222d7c:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
  222d83:	48 8b bd f8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x108]
  222d8a:	48 8b 7f 10          	mov    rdi,QWORD PTR [rdi+0x10]
  222d8e:	48 89 7e 58          	mov    QWORD PTR [rsi+0x58],rdi
        self.prev_column = self.column;
  222d92:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
  222d99:	48 8b bd f8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x108]
  222da0:	48 8b 7f 18          	mov    rdi,QWORD PTR [rdi+0x18]
  222da4:	48 89 7e 60          	mov    QWORD PTR [rsi+0x60],rdi
        self.prev_is_stmt = self.is_stmt;
  222da8:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
  222daf:	48 8b bd f8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x108]
  222db6:	44 8a 47 20          	mov    r8b,BYTE PTR [rdi+0x20]
  222dba:	41 80 e0 01          	and    r8b,0x1
  222dbe:	44 88 46 68          	mov    BYTE PTR [rsi+0x68],r8b
        self.prev_basic_block = self.basic_block;
  222dc2:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
  222dc9:	48 8b bd f8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x108]
  222dd0:	44 8a 47 21          	mov    r8b,BYTE PTR [rdi+0x21]
  222dd4:	41 80 e0 01          	and    r8b,0x1
  222dd8:	44 88 46 69          	mov    BYTE PTR [rsi+0x69],r8b
        self.prev_end_sequence = self.end_sequence;
  222ddc:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
  222de3:	48 8b bd f8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x108]
  222dea:	44 8a 47 22          	mov    r8b,BYTE PTR [rdi+0x22]
  222dee:	41 80 e0 01          	and    r8b,0x1
  222df2:	44 88 46 6a          	mov    BYTE PTR [rsi+0x6a],r8b
        return null;
  222df6:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  222dfd:	48 89 f7             	mov    rdi,rsi
  222e00:	48 89 c6             	mov    rsi,rax
  222e03:	e8 f8 1a 01 00       	call   234900 <memcpy>
  222e08:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  222e0f:	48 81 c4 e8 01 00 00 	add    rsp,0x1e8
  222e16:	5b                   	pop    rbx
  222e17:	5d                   	pop    rbp
  222e18:	c3                   	ret    
  222e19:	48 8d 3d a8 03 02 00 	lea    rdi,[rip+0x203a8]        # 2431c8 <__unnamed_4>
  222e20:	31 c0                	xor    eax,eax
  222e22:	89 c6                	mov    esi,eax
            } else if (self.prev_file - 1 >= self.file_entries.len) {
  222e24:	e8 d7 87 fe ff       	call   20b600 <panic>
  222e29:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  222e30:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  222e34:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
  222e3b:	48 3b 48 10          	cmp    rcx,QWORD PTR [rax+0x10]
  222e3f:	0f 83 cc fb ff ff    	jae    222a11 <LineNumberProgram_checkLineMatch+0x101>
  222e45:	e9 0f fc ff ff       	jmp    222a59 <LineNumberProgram_checkLineMatch+0x149>
  222e4a:	48 8d 3d 77 03 02 00 	lea    rdi,[rip+0x20377]        # 2431c8 <__unnamed_4>
  222e51:	31 c0                	xor    eax,eax
  222e53:	89 c6                	mov    esi,eax
                &self.file_entries.items[self.prev_file - 1];
  222e55:	e8 a6 87 fe ff       	call   20b600 <panic>
  222e5a:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
  222e61:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
  222e68:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  222e6c:	72 10                	jb     222e7e <LineNumberProgram_checkLineMatch+0x56e>
  222e6e:	48 8d 3d 83 05 02 00 	lea    rdi,[rip+0x20583]        # 2433f8 <__unnamed_20>
  222e75:	31 c0                	xor    eax,eax
  222e77:	89 c6                	mov    esi,eax
  222e79:	e8 82 87 fe ff       	call   20b600 <panic>
  222e7e:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
  222e85:	48 6b c8 28          	imul   rcx,rax,0x28
  222e89:	48 8b 95 88 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x178]
  222e90:	48 03 0a             	add    rcx,QWORD PTR [rdx]
            } else if (self.prev_file - 1 >= self.file_entries.len) {
  222e93:	48 89 8d 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rcx
  222e9a:	e9 f6 fb ff ff       	jmp    222a95 <LineNumberProgram_checkLineMatch+0x185>
  222e9f:	48 8d 3d 52 05 02 00 	lea    rdi,[rip+0x20552]        # 2433f8 <__unnamed_20>
  222ea6:	31 c0                	xor    eax,eax
  222ea8:	89 c6                	mov    esi,eax
                self.include_dirs[file_entry.dir_index];
  222eaa:	e8 51 87 fe ff       	call   20b600 <panic>
  222eaf:	48 8b 85 60 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a0]
  222eb6:	48 c1 e0 04          	shl    rax,0x4
  222eba:	48 8b 8d 58 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1a8]
  222ec1:	48 03 01             	add    rax,QWORD PTR [rcx]
            const dir_name = if (file_entry.dir_index >= self.include_dirs.len) {
  222ec4:	48 89 85 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rax
  222ecb:	e9 6b fc ff ff       	jmp    222b3b <LineNumberProgram_checkLineMatch+0x22b>
                .line = if (self.prev_line >= 0) @intCast(usize, self.prev_line) else 0,
  222ed0:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  222ed7:	48 89 85 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rax
  222ede:	e9 55 fd ff ff       	jmp    222c38 <LineNumberProgram_checkLineMatch+0x328>
  222ee3:	48 8d 3d 9e 03 02 00 	lea    rdi,[rip+0x2039e]        # 243288 <__unnamed_3>
  222eea:	31 c0                	xor    eax,eax
  222eec:	89 c6                	mov    esi,eax
  222eee:	e8 0d 87 fe ff       	call   20b600 <panic>
  222ef3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  222efa:	84 00 00 00 00 00 

0000000000222f00 <readILeb128>:
fn readILeb128(in_stream: var) !i64 {
  222f00:	55                   	push   rbp
  222f01:	48 89 e5             	mov    rbp,rsp
  222f04:	48 81 ec b0 00 00 00 	sub    rsp,0xb0
  222f0b:	48 89 f8             	mov    rax,rdi
  222f0e:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
    var result: i64 = 0;
  222f12:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
  222f19:	00 
    var shift: usize = 0;
  222f1a:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
  222f21:	00 
  222f22:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  222f26:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
  222f2a:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
    while (true) {
  222f2e:	eb 00                	jmp    222f30 <readILeb128+0x30>
  222f30:	48 8d 7d f8          	lea    rdi,[rbp-0x8]
        const byte = try in_stream.readByte();
  222f34:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  222f38:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  222f3c:	e8 ff 0b ff ff       	call   213b40 <InStream(ReadError)_readByte>
  222f41:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  222f46:	74 39                	je     222f81 <readILeb128+0x81>
  222f48:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  222f4c:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  222f50:	66 89 45 8e          	mov    WORD PTR [rbp-0x72],ax
  222f54:	e8 37 8d fe ff       	call   20bc90 <__zig_return_error>
  222f59:	66 8b 45 8e          	mov    ax,WORD PTR [rbp-0x72]
  222f5d:	66 89 45 e0          	mov    WORD PTR [rbp-0x20],ax
  222f61:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  222f65:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  222f69:	48 89 39             	mov    QWORD PTR [rcx],rdi
  222f6c:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  222f70:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  222f74:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  222f78:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  222f7f:	5d                   	pop    rbp
  222f80:	c3                   	ret    
  222f81:	8a 45 fa             	mov    al,BYTE PTR [rbp-0x6]
  222f84:	88 45 b7             	mov    BYTE PTR [rbp-0x49],al
        var operand: i64 = undefined;
  222f87:	48 b9 aa aa aa aa aa 	movabs rcx,0xaaaaaaaaaaaaaaaa
  222f8e:	aa aa aa 
  222f91:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
        if (@shlWithOverflow(i64, byte & 0b01111111, @intCast(u6, shift), &operand)) return error.InvalidDebugInfo;
  222f95:	8a 45 b7             	mov    al,BYTE PTR [rbp-0x49]
  222f98:	24 7f                	and    al,0x7f
  222f9a:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  222f9e:	88 ca                	mov    dl,cl
  222fa0:	89 ce                	mov    esi,ecx
  222fa2:	83 e6 3f             	and    esi,0x3f
  222fa5:	89 f7                	mov    edi,esi
  222fa7:	48 39 f9             	cmp    rcx,rdi
  222faa:	88 45 8d             	mov    BYTE PTR [rbp-0x73],al
  222fad:	88 55 8c             	mov    BYTE PTR [rbp-0x74],dl
  222fb0:	0f 84 f3 00 00 00    	je     2230a9 <readILeb128+0x1a9>
  222fb6:	e9 28 01 00 00       	jmp    2230e3 <readILeb128+0x1e3>
  222fbb:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  222fbf:	e8 cc 8c fe ff       	call   20bc90 <__zig_return_error>
  222fc4:	48 8b 3d 85 d2 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffdd285]        # 200250 <__unnamed_131>
  222fcb:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  222fcf:	48 89 38             	mov    QWORD PTR [rax],rdi
  222fd2:	48 8b 3d 7f d2 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffdd27f]        # 200258 <__unnamed_131+0x8>
  222fd9:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  222fdd:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  222fe1:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  222fe8:	5d                   	pop    rbp
  222fe9:	c3                   	ret    
  222fea:	eb 00                	jmp    222fec <readILeb128+0xec>
        result |= operand;
  222fec:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  222ff0:	48 0b 45 a8          	or     rax,QWORD PTR [rbp-0x58]
  222ff4:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
        shift += 7;
  222ff8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  222ffc:	48 83 c0 07          	add    rax,0x7
  223000:	0f 92 c1             	setb   cl
  223003:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  223007:	88 8d 7f ff ff ff    	mov    BYTE PTR [rbp-0x81],cl
  22300d:	0f 82 e0 00 00 00    	jb     2230f3 <readILeb128+0x1f3>
  223013:	e9 eb 00 00 00       	jmp    223103 <readILeb128+0x203>
            if (shift < @sizeOf(i64) * 8 and (byte & 0b01000000) != 0) result |= -(i64(1) << @intCast(u6, shift));
  223018:	48 83 7d b8 40       	cmp    QWORD PTR [rbp-0x48],0x40
  22301d:	0f 92 c0             	setb   al
  223020:	a8 01                	test   al,0x1
  223022:	88 85 7e ff ff ff    	mov    BYTE PTR [rbp-0x82],al
  223028:	75 02                	jne    22302c <readILeb128+0x12c>
  22302a:	eb 10                	jmp    22303c <readILeb128+0x13c>
  22302c:	8a 45 b7             	mov    al,BYTE PTR [rbp-0x49]
  22302f:	24 40                	and    al,0x40
  223031:	3c 00                	cmp    al,0x0
  223033:	0f 95 c0             	setne  al
  223036:	88 85 7e ff ff ff    	mov    BYTE PTR [rbp-0x82],al
  22303c:	8a 85 7e ff ff ff    	mov    al,BYTE PTR [rbp-0x82]
  223042:	a8 01                	test   al,0x1
  223044:	75 02                	jne    223048 <readILeb128+0x148>
  223046:	eb 2c                	jmp    223074 <readILeb128+0x174>
  223048:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  22304c:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  223050:	88 ca                	mov    dl,cl
  223052:	89 ce                	mov    esi,ecx
  223054:	83 e6 3f             	and    esi,0x3f
  223057:	89 f7                	mov    edi,esi
  223059:	48 39 f9             	cmp    rcx,rdi
  22305c:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  223063:	88 95 6f ff ff ff    	mov    BYTE PTR [rbp-0x91],dl
  223069:	0f 84 ad 00 00 00    	je     22311c <readILeb128+0x21c>
  22306f:	e9 ef 00 00 00       	jmp    223163 <readILeb128+0x263>
  223074:	eb 00                	jmp    223076 <readILeb128+0x176>
            return result;
  223076:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  22307a:	66 c7 45 d0 00 00    	mov    WORD PTR [rbp-0x30],0x0
  223080:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  223084:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  223088:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  22308c:	48 89 01             	mov    QWORD PTR [rcx],rax
  22308f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  223093:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  223097:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22309b:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  2230a2:	5d                   	pop    rbp
  2230a3:	c3                   	ret    
    while (true) {
  2230a4:	e9 85 fe ff ff       	jmp    222f2e <readILeb128+0x2e>
        if (@shlWithOverflow(i64, byte & 0b01111111, @intCast(u6, shift), &operand)) return error.InvalidDebugInfo;
  2230a9:	8a 45 8d             	mov    al,BYTE PTR [rbp-0x73]
  2230ac:	0f b6 c8             	movzx  ecx,al
  2230af:	89 ca                	mov    edx,ecx
  2230b1:	40 8a 75 8c          	mov    sil,BYTE PTR [rbp-0x74]
  2230b5:	40 80 e6 3f          	and    sil,0x3f
  2230b9:	40 0f b6 ce          	movzx  ecx,sil
  2230bd:	89 cf                	mov    edi,ecx
  2230bf:	48 89 f9             	mov    rcx,rdi
  2230c2:	49 89 d0             	mov    r8,rdx
  2230c5:	49 d3 e0             	shl    r8,cl
  2230c8:	48 89 f9             	mov    rcx,rdi
  2230cb:	4c 89 c7             	mov    rdi,r8
  2230ce:	48 d3 ff             	sar    rdi,cl
  2230d1:	4c 89 45 a8          	mov    QWORD PTR [rbp-0x58],r8
  2230d5:	48 39 fa             	cmp    rdx,rdi
  2230d8:	0f 85 dd fe ff ff    	jne    222fbb <readILeb128+0xbb>
  2230de:	e9 07 ff ff ff       	jmp    222fea <readILeb128+0xea>
  2230e3:	48 8d 3d be 03 02 00 	lea    rdi,[rip+0x203be]        # 2434a8 <__unnamed_22>
  2230ea:	31 c0                	xor    eax,eax
  2230ec:	89 c6                	mov    esi,eax
  2230ee:	e8 0d 85 fe ff       	call   20b600 <panic>
  2230f3:	48 8d 3d ce 00 02 00 	lea    rdi,[rip+0x200ce]        # 2431c8 <__unnamed_4>
  2230fa:	31 c0                	xor    eax,eax
  2230fc:	89 c6                	mov    esi,eax
        shift += 7;
  2230fe:	e8 fd 84 fe ff       	call   20b600 <panic>
  223103:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  223107:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
        if ((byte & 0b10000000) == 0) {
  22310b:	8a 4d b7             	mov    cl,BYTE PTR [rbp-0x49]
  22310e:	80 e1 80             	and    cl,0x80
  223111:	80 f9 00             	cmp    cl,0x0
  223114:	0f 84 fe fe ff ff    	je     223018 <readILeb128+0x118>
  22311a:	eb 88                	jmp    2230a4 <readILeb128+0x1a4>
  22311c:	31 c0                	xor    eax,eax
  22311e:	89 c1                	mov    ecx,eax
  223120:	b8 01 00 00 00       	mov    eax,0x1
  223125:	89 c2                	mov    edx,eax
            if (shift < @sizeOf(i64) * 8 and (byte & 0b01000000) != 0) result |= -(i64(1) << @intCast(u6, shift));
  223127:	40 8a b5 6f ff ff ff 	mov    sil,BYTE PTR [rbp-0x91]
  22312e:	40 80 e6 3f          	and    sil,0x3f
  223132:	40 0f b6 c6          	movzx  eax,sil
  223136:	89 c7                	mov    edi,eax
  223138:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
  22313f:	48 89 f9             	mov    rcx,rdi
  223142:	48 d3 e2             	shl    rdx,cl
  223145:	48 8b bd 60 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  22314c:	48 29 d7             	sub    rdi,rdx
  22314f:	0f 90 c1             	seto   cl
  223152:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
  223159:	88 8d 57 ff ff ff    	mov    BYTE PTR [rbp-0xa9],cl
  22315f:	70 12                	jo     223173 <readILeb128+0x273>
  223161:	eb 20                	jmp    223183 <readILeb128+0x283>
  223163:	48 8d 3d 3e 03 02 00 	lea    rdi,[rip+0x2033e]        # 2434a8 <__unnamed_22>
  22316a:	31 c0                	xor    eax,eax
  22316c:	89 c6                	mov    esi,eax
  22316e:	e8 8d 84 fe ff       	call   20b600 <panic>
  223173:	48 8d 3d 4e 00 02 00 	lea    rdi,[rip+0x2004e]        # 2431c8 <__unnamed_4>
  22317a:	31 c0                	xor    eax,eax
  22317c:	89 c6                	mov    esi,eax
  22317e:	e8 7d 84 fe ff       	call   20b600 <panic>
  223183:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  22318a:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  223191:	48 09 c8             	or     rax,rcx
  223194:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  223198:	e9 d9 fe ff ff       	jmp    223076 <readILeb128+0x176>
  22319d:	0f 1f 00             	nop    DWORD PTR [rax]

00000000002231a0 <AlignedArrayList([]u8,8)_addOne>:
        pub fn addOne(self: *Self) !*T {
  2231a0:	55                   	push   rbp
  2231a1:	48 89 e5             	mov    rbp,rsp
  2231a4:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  2231ab:	48 89 f8             	mov    rax,rdi
  2231ae:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            const new_length = self.len + 1;
  2231b2:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  2231b6:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  2231ba:	48 83 c2 01          	add    rdx,0x1
  2231be:	0f 92 c1             	setb   cl
  2231c1:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  2231c5:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  2231c9:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  2231cd:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  2231d1:	88 4d 9f             	mov    BYTE PTR [rbp-0x61],cl
  2231d4:	72 57                	jb     22322d <AlignedArrayList([]u8,8)_addOne+0x8d>
  2231d6:	eb 65                	jmp    22323d <AlignedArrayList([]u8,8)_addOne+0x9d>
            try self.ensureCapacity(new_length);
  2231d8:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  2231dc:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  2231e0:	66 89 45 9c          	mov    WORD PTR [rbp-0x64],ax
  2231e4:	e8 a7 8a fe ff       	call   20bc90 <__zig_return_error>
  2231e9:	66 8b 45 9c          	mov    ax,WORD PTR [rbp-0x64]
  2231ed:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  2231f1:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  2231f5:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  2231f9:	48 89 39             	mov    QWORD PTR [rcx],rdi
  2231fc:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  223200:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  223204:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  223208:	48 81 c4 80 00 00 00 	add    rsp,0x80
  22320f:	5d                   	pop    rbp
  223210:	c3                   	ret    
            const result = &self.items[self.len];
  223211:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  223215:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  223219:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
  22321d:	48 3b 48 08          	cmp    rcx,QWORD PTR [rax+0x8]
  223221:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  223225:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
  223229:	72 4c                	jb     223277 <AlignedArrayList([]u8,8)_addOne+0xd7>
  22322b:	eb 3a                	jmp    223267 <AlignedArrayList([]u8,8)_addOne+0xc7>
  22322d:	48 8d 3d 94 ff 01 00 	lea    rdi,[rip+0x1ff94]        # 2431c8 <__unnamed_4>
  223234:	31 c0                	xor    eax,eax
  223236:	89 c6                	mov    esi,eax
            const new_length = self.len + 1;
  223238:	e8 c3 83 fe ff       	call   20b600 <panic>
  22323d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  223241:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
            try self.ensureCapacity(new_length);
  223245:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  223249:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  22324d:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  223251:	e8 7a 00 00 00       	call   2232d0 <AlignedArrayList([]u8,8)_ensureCapacity>
  223256:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  22325a:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  22325f:	0f 85 73 ff ff ff    	jne    2231d8 <AlignedArrayList([]u8,8)_addOne+0x38>
  223265:	eb aa                	jmp    223211 <AlignedArrayList([]u8,8)_addOne+0x71>
  223267:	48 8d 3d 8a 01 02 00 	lea    rdi,[rip+0x2018a]        # 2433f8 <__unnamed_20>
  22326e:	31 c0                	xor    eax,eax
  223270:	89 c6                	mov    esi,eax
            const result = &self.items[self.len];
  223272:	e8 89 83 fe ff       	call   20b600 <panic>
  223277:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  22327b:	48 c1 e0 04          	shl    rax,0x4
  22327f:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  223283:	48 03 01             	add    rax,QWORD PTR [rcx]
  223286:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
            self.len = new_length;
  22328a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  22328e:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  223292:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
            return result;
  223296:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  22329a:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  2232a0:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  2232a4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2232a8:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  2232ac:	48 89 02             	mov    QWORD PTR [rdx],rax
  2232af:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2232b3:	48 89 42 08          	mov    QWORD PTR [rdx+0x8],rax
  2232b7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  2232bb:	48 81 c4 80 00 00 00 	add    rsp,0x80
  2232c2:	5d                   	pop    rbp
  2232c3:	c3                   	ret    
  2232c4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2232cb:	00 00 00 00 00 

00000000002232d0 <AlignedArrayList([]u8,8)_ensureCapacity>:
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  2232d0:	55                   	push   rbp
  2232d1:	48 89 e5             	mov    rbp,rsp
  2232d4:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  2232db:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  2232df:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
            var better_capacity = self.items.len;
  2232e3:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  2232e7:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  2232eb:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
            if (better_capacity >= new_capacity) return;
  2232ef:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  2232f3:	48 3b 55 c0          	cmp    rdx,QWORD PTR [rbp-0x40]
  2232f7:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  2232fb:	72 11                	jb     22330e <AlignedArrayList([]u8,8)_ensureCapacity+0x3e>
  2232fd:	31 c0                	xor    eax,eax
  2232ff:	66 89 c1             	mov    cx,ax
  223302:	66 89 c8             	mov    ax,cx
  223305:	48 81 c4 90 00 00 00 	add    rsp,0x90
  22330c:	5d                   	pop    rbp
  22330d:	c3                   	ret    
            while (true) {
  22330e:	eb 00                	jmp    223310 <AlignedArrayList([]u8,8)_ensureCapacity+0x40>
  223310:	eb 00                	jmp    223312 <AlignedArrayList([]u8,8)_ensureCapacity+0x42>
  223312:	31 c0                	xor    eax,eax
  223314:	88 c1                	mov    cl,al
                better_capacity += better_capacity / 2 + 8;
  223316:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  22331a:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  22331e:	f6 c1 01             	test   cl,0x1
  223321:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  223325:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  223329:	0f 85 8e 00 00 00    	jne    2233bd <AlignedArrayList([]u8,8)_ensureCapacity+0xed>
  22332f:	eb 72                	jmp    2233a3 <AlignedArrayList([]u8,8)_ensureCapacity+0xd3>
                if (better_capacity >= new_capacity) break;
  223331:	eb 02                	jmp    223335 <AlignedArrayList([]u8,8)_ensureCapacity+0x65>
            while (true) {
  223333:	eb db                	jmp    223310 <AlignedArrayList([]u8,8)_ensureCapacity+0x40>
  223335:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
            self.items = try self.allocator.alignedRealloc(T, A, self.items, better_capacity);
  223339:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  22333d:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  223341:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
  223345:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  223349:	4c 8b 45 b8          	mov    r8,QWORD PTR [rbp-0x48]
  22334d:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  223351:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  223355:	e8 d6 00 00 00       	call   223430 <Allocator_alignedRealloc.76>
  22335a:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  22335f:	74 1e                	je     22337f <AlignedArrayList([]u8,8)_ensureCapacity+0xaf>
  223361:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  223365:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  223369:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  22336d:	e8 1e 89 fe ff       	call   20bc90 <__zig_return_error>
  223372:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  223376:	48 81 c4 90 00 00 00 	add    rsp,0x90
  22337d:	5d                   	pop    rbp
  22337e:	c3                   	ret    
  22337f:	31 c0                	xor    eax,eax
  223381:	66 89 c1             	mov    cx,ax
  223384:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  223388:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  22338c:	48 89 16             	mov    QWORD PTR [rsi],rdx
  22338f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  223393:	48 89 56 08          	mov    QWORD PTR [rsi+0x8],rdx
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  223397:	66 89 c8             	mov    ax,cx
  22339a:	48 81 c4 90 00 00 00 	add    rsp,0x90
  2233a1:	5d                   	pop    rbp
  2233a2:	c3                   	ret    
                better_capacity += better_capacity / 2 + 8;
  2233a3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  2233a7:	48 c1 e8 01          	shr    rax,0x1
  2233ab:	48 83 c0 08          	add    rax,0x8
  2233af:	0f 92 c1             	setb   cl
  2233b2:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  2233b6:	88 4d 87             	mov    BYTE PTR [rbp-0x79],cl
  2233b9:	72 12                	jb     2233cd <AlignedArrayList([]u8,8)_ensureCapacity+0xfd>
  2233bb:	eb 20                	jmp    2233dd <AlignedArrayList([]u8,8)_ensureCapacity+0x10d>
  2233bd:	48 8d 3d 7c fe 01 00 	lea    rdi,[rip+0x1fe7c]        # 243240 <__unnamed_7>
  2233c4:	31 c0                	xor    eax,eax
  2233c6:	89 c6                	mov    esi,eax
  2233c8:	e8 33 82 fe ff       	call   20b600 <panic>
  2233cd:	48 8d 3d f4 fd 01 00 	lea    rdi,[rip+0x1fdf4]        # 2431c8 <__unnamed_4>
  2233d4:	31 c0                	xor    eax,eax
  2233d6:	89 c6                	mov    esi,eax
  2233d8:	e8 23 82 fe ff       	call   20b600 <panic>
  2233dd:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2233e1:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  2233e5:	48 01 c8             	add    rax,rcx
  2233e8:	0f 92 c2             	setb   dl
  2233eb:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  2233f2:	88 95 77 ff ff ff    	mov    BYTE PTR [rbp-0x89],dl
  2233f8:	72 02                	jb     2233fc <AlignedArrayList([]u8,8)_ensureCapacity+0x12c>
  2233fa:	eb 10                	jmp    22340c <AlignedArrayList([]u8,8)_ensureCapacity+0x13c>
  2233fc:	48 8d 3d c5 fd 01 00 	lea    rdi,[rip+0x1fdc5]        # 2431c8 <__unnamed_4>
  223403:	31 c0                	xor    eax,eax
  223405:	89 c6                	mov    esi,eax
  223407:	e8 f4 81 fe ff       	call   20b600 <panic>
  22340c:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  223413:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                if (better_capacity >= new_capacity) break;
  223417:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  22341b:	48 3b 4d c0          	cmp    rcx,QWORD PTR [rbp-0x40]
  22341f:	0f 83 0c ff ff ff    	jae    223331 <AlignedArrayList([]u8,8)_ensureCapacity+0x61>
  223425:	e9 09 ff ff ff       	jmp    223333 <AlignedArrayList([]u8,8)_ensureCapacity+0x63>
  22342a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000223430 <Allocator_alignedRealloc.76>:
    pub fn alignedRealloc(self: *Allocator, comptime T: type, comptime alignment: u29, old_mem: []align(alignment) T, n: usize) ![]align(alignment) T {
  223430:	55                   	push   rbp
  223431:	48 89 e5             	mov    rbp,rsp
  223434:	53                   	push   rbx
  223435:	48 81 ec 88 01 00 00 	sub    rsp,0x188
  22343c:	48 89 f8             	mov    rax,rdi
  22343f:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
  223446:	4c 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],r8
        if (old_mem.len == 0) {
  22344d:	48 83 79 08 00       	cmp    QWORD PTR [rcx+0x8],0x0
  223452:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  223459:	48 89 b5 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rsi
  223460:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
  223467:	48 89 bd b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rdi
  22346e:	75 64                	jne    2234d4 <Allocator_alignedRealloc.76+0xa4>
  223470:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
            return self.alignedAlloc(T, alignment, n);
  223474:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  22347b:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  223482:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  223489:	e8 12 04 00 00       	call   2238a0 <Allocator_alignedAlloc.77>
  22348e:	66 83 7d e0 00       	cmp    WORD PTR [rbp-0x20],0x0
  223493:	74 0e                	je     2234a3 <Allocator_alignedRealloc.76+0x73>
  223495:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  22349c:	e8 ef 87 fe ff       	call   20bc90 <__zig_return_error>
  2234a1:	eb 02                	jmp    2234a5 <Allocator_alignedRealloc.76+0x75>
  2234a3:	eb 00                	jmp    2234a5 <Allocator_alignedRealloc.76+0x75>
  2234a5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2234a9:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  2234b0:	48 89 01             	mov    QWORD PTR [rcx],rax
  2234b3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2234b7:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2234bb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2234bf:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  2234c3:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  2234ca:	48 81 c4 88 01 00 00 	add    rsp,0x188
  2234d1:	5b                   	pop    rbx
  2234d2:	5d                   	pop    rbp
  2234d3:	c3                   	ret    
        if (old_mem.len == 0) {
  2234d4:	eb 00                	jmp    2234d6 <Allocator_alignedRealloc.76+0xa6>
        if (n == 0) {
  2234d6:	48 83 bd 10 ff ff ff 	cmp    QWORD PTR [rbp-0xf0],0x0
  2234dd:	00 
  2234de:	75 4b                	jne    22352b <Allocator_alignedRealloc.76+0xfb>
            self.free(old_mem);
  2234e0:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
  2234e7:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  2234ee:	e8 bd 06 00 00       	call   223bb0 <Allocator_free.78>
            return ([*]align(alignment) T)(undefined)[0..0];
  2234f3:	48 8b 35 6e 5f fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffe5f6e]        # 209468 <__unnamed_150>
  2234fa:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  223501:	48 89 37             	mov    QWORD PTR [rdi],rsi
  223504:	48 8b 35 65 5f fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffe5f65]        # 209470 <__unnamed_150+0x8>
  22350b:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  22350f:	48 8b 35 62 5f fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffe5f62]        # 209478 <__unnamed_150+0x10>
  223516:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  22351a:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  223521:	48 81 c4 88 01 00 00 	add    rsp,0x188
  223528:	5b                   	pop    rbx
  223529:	5d                   	pop    rbp
  22352a:	c3                   	ret    
        if (n == 0) {
  22352b:	eb 00                	jmp    22352d <Allocator_alignedRealloc.76+0xfd>
  22352d:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  223531:	b8 10 00 00 00       	mov    eax,0x10
  223536:	89 c2                	mov    edx,eax
        const old_byte_slice = @sliceToBytes(old_mem);
  223538:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  22353f:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  223542:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  223546:	48 8b 71 08          	mov    rsi,QWORD PTR [rcx+0x8]
  22354a:	48 c1 e6 04          	shl    rsi,0x4
  22354e:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  223552:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  223556:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
  22355d:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  223561:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  223568:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  22356f:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  223576:	e8 95 1e ff ff       	call   215410 <mul>
  22357b:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  223580:	74 44                	je     2235c6 <Allocator_alignedRealloc.76+0x196>
  223582:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  223589:	e8 02 87 fe ff       	call   20bc90 <__zig_return_error>
  22358e:	48 8b 3d eb 5e fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe5eeb]        # 209480 <__unnamed_151>
  223595:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  22359c:	48 89 38             	mov    QWORD PTR [rax],rdi
  22359f:	48 8b 3d e2 5e fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe5ee2]        # 209488 <__unnamed_151+0x8>
  2235a6:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  2235aa:	48 8b 3d df 5e fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe5edf]        # 209490 <__unnamed_151+0x10>
  2235b1:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  2235b5:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  2235bc:	48 81 c4 88 01 00 00 	add    rsp,0x188
  2235c3:	5b                   	pop    rbx
  2235c4:	5d                   	pop    rbp
  2235c5:	c3                   	ret    
  2235c6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2235ca:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  2235d1:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  2235d5:	48 8d 8d 00 ff ff ff 	lea    rcx,[rbp-0x100]
  2235dc:	41 b9 08 00 00 00    	mov    r9d,0x8
  2235e2:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  2235e9:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
        const byte_slice = try self.reallocFn(self, old_byte_slice, byte_count, alignment);
  2235f0:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  2235f7:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  2235fb:	48 8b b5 18 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe8]
  223602:	4c 8b 85 f8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x108]
  223609:	4c 8b 95 c8 fe ff ff 	mov    r10,QWORD PTR [rbp-0x138]
  223610:	48 89 b5 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rsi
  223617:	4c 89 d6             	mov    rsi,r10
  22361a:	4c 8b 9d a8 fe ff ff 	mov    r11,QWORD PTR [rbp-0x158]
  223621:	48 89 95 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdx
  223628:	4c 89 da             	mov    rdx,r11
  22362b:	48 8b 9d a0 fe ff ff 	mov    rbx,QWORD PTR [rbp-0x160]
  223632:	ff d3                	call   rbx
  223634:	66 83 7d 98 00       	cmp    WORD PTR [rbp-0x68],0x0
  223639:	74 5d                	je     223698 <Allocator_alignedRealloc.76+0x268>
  22363b:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  22363f:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  223646:	66 89 85 9e fe ff ff 	mov    WORD PTR [rbp-0x162],ax
  22364d:	e8 3e 86 fe ff       	call   20bc90 <__zig_return_error>
  223652:	66 8b 85 9e fe ff ff 	mov    ax,WORD PTR [rbp-0x162]
  223659:	66 89 85 68 ff ff ff 	mov    WORD PTR [rbp-0x98],ax
  223660:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  223667:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  22366e:	48 89 39             	mov    QWORD PTR [rcx],rdi
  223671:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  223678:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  22367c:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  223683:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  223687:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  22368e:	48 81 c4 88 01 00 00 	add    rsp,0x188
  223695:	5b                   	pop    rbx
  223696:	5d                   	pop    rbp
  223697:	c3                   	ret    
  223698:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22369c:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  2236a3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  2236a7:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
        assert(byte_slice.len == byte_count);
  2236ae:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  2236b5:	48 3b 85 f8 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x108]
  2236bc:	0f 94 c1             	sete   cl
  2236bf:	0f b6 f9             	movzx  edi,cl
  2236c2:	e8 39 79 fe ff       	call   20b000 <assert>
        if (n > old_mem.len) {
  2236c7:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  2236ce:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  2236d5:	48 3b 42 08          	cmp    rax,QWORD PTR [rdx+0x8]
  2236d9:	76 71                	jbe    22374c <Allocator_alignedRealloc.76+0x31c>
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  2236db:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  2236e2:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  2236e9:	48 39 c8             	cmp    rax,rcx
  2236ec:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  2236f3:	48 89 8d 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rcx
  2236fa:	76 78                	jbe    223774 <Allocator_alignedRealloc.76+0x344>
  2236fc:	eb 66                	jmp    223764 <Allocator_alignedRealloc.76+0x334>
  2236fe:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  223705:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
  22370c:	48 39 c8             	cmp    rax,rcx
  22370f:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  223716:	73 32                	jae    22374a <Allocator_alignedRealloc.76+0x31a>
  223718:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  22371f:	48 03 8d 58 ff ff ff 	add    rcx,QWORD PTR [rbp-0xa8]
  223726:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
                byte.* = undefined;
  22372d:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  223734:	88 01                	mov    BYTE PTR [rcx],al
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  223736:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  22373d:	48 83 c1 01          	add    rcx,0x1
  223741:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
  223748:	eb b4                	jmp    2236fe <Allocator_alignedRealloc.76+0x2ce>
        if (n > old_mem.len) {
  22374a:	eb 02                	jmp    22374e <Allocator_alignedRealloc.76+0x31e>
  22374c:	eb 00                	jmp    22374e <Allocator_alignedRealloc.76+0x31e>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  22374e:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  223755:	48 83 e0 07          	and    rax,0x7
  223759:	48 83 f8 00          	cmp    rax,0x0
  22375d:	74 7b                	je     2237da <Allocator_alignedRealloc.76+0x3aa>
  22375f:	e9 a1 00 00 00       	jmp    223805 <Allocator_alignedRealloc.76+0x3d5>
  223764:	48 8d 3d 8d fc 01 00 	lea    rdi,[rip+0x1fc8d]        # 2433f8 <__unnamed_20>
  22376b:	31 c0                	xor    eax,eax
  22376d:	89 c6                	mov    esi,eax
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  22376f:	e8 8c 7e fe ff       	call   20b600 <panic>
  223774:	be aa 00 00 00       	mov    esi,0xaa
  223779:	b8 08 00 00 00       	mov    eax,0x8
  22377e:	89 c2                	mov    edx,eax
  223780:	48 8d 8d e0 fe ff ff 	lea    rcx,[rbp-0x120]
  223787:	48 8b bd 90 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x170]
  22378e:	48 03 bd e8 fe ff ff 	add    rdi,QWORD PTR [rbp-0x118]
  223795:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
  22379c:	48 8b bd 88 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x178]
  2237a3:	4c 8b 85 90 fe ff ff 	mov    r8,QWORD PTR [rbp-0x170]
  2237aa:	4c 29 c7             	sub    rdi,r8
  2237ad:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  2237b4:	48 89 cf             	mov    rdi,rcx
  2237b7:	e8 f4 10 01 00       	call   2348b0 <memset>
  2237bc:	48 c7 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],0x0
  2237c3:	00 00 00 00 
  2237c7:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  2237ce:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  2237d5:	e9 24 ff ff ff       	jmp    2236fe <Allocator_alignedRealloc.76+0x2ce>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  2237da:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  2237e1:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
  2237e8:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  2237ef:	48 89 c1             	mov    rcx,rax
  2237f2:	48 83 e1 0f          	and    rcx,0xf
  2237f6:	48 83 f9 00          	cmp    rcx,0x0
  2237fa:	48 89 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rax
  223801:	74 12                	je     223815 <Allocator_alignedRealloc.76+0x3e5>
  223803:	eb 7f                	jmp    223884 <Allocator_alignedRealloc.76+0x454>
  223805:	48 8d 3d c4 fd 01 00 	lea    rdi,[rip+0x1fdc4]        # 2435d0 <__unnamed_75>
  22380c:	31 c0                	xor    eax,eax
  22380e:	89 c6                	mov    esi,eax
  223810:	e8 eb 7d fe ff       	call   20b600 <panic>
  223815:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  22381c:	48 c1 e8 04          	shr    rax,0x4
  223820:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  223827:	66 c7 85 20 ff ff ff 	mov    WORD PTR [rbp-0xe0],0x0
  22382e:	00 00 
  223830:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  223837:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  22383e:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  223845:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  22384c:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  223853:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  22385a:	48 89 01             	mov    QWORD PTR [rcx],rax
  22385d:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  223864:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  223868:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  22386f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  223873:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  22387a:	48 81 c4 88 01 00 00 	add    rsp,0x188
  223881:	5b                   	pop    rbx
  223882:	5d                   	pop    rbp
  223883:	c3                   	ret    
  223884:	48 8d 3d 5d fd 01 00 	lea    rdi,[rip+0x1fd5d]        # 2435e8 <__unnamed_76>
  22388b:	31 c0                	xor    eax,eax
  22388d:	89 c6                	mov    esi,eax
  22388f:	e8 6c 7d fe ff       	call   20b600 <panic>
  223894:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22389b:	00 00 00 00 00 

00000000002238a0 <Allocator_alignedAlloc.77>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  2238a0:	55                   	push   rbp
  2238a1:	48 89 e5             	mov    rbp,rsp
  2238a4:	48 81 ec 20 01 00 00 	sub    rsp,0x120
  2238ab:	48 89 f8             	mov    rax,rdi
  2238ae:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  2238b5:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  2238bc:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  2238c3:	00 
  2238c4:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  2238cb:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  2238d2:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  2238d9:	75 37                	jne    223912 <Allocator_alignedAlloc.77+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  2238db:	48 8b 05 b6 5b fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe5bb6]        # 209498 <__unnamed_152>
  2238e2:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  2238e9:	48 89 01             	mov    QWORD PTR [rcx],rax
  2238ec:	48 8b 05 ad 5b fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe5bad]        # 2094a0 <__unnamed_152+0x8>
  2238f3:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2238f7:	48 8b 05 aa 5b fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe5baa]        # 2094a8 <__unnamed_152+0x10>
  2238fe:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  223902:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  223909:	48 81 c4 20 01 00 00 	add    rsp,0x120
  223910:	5d                   	pop    rbp
  223911:	c3                   	ret    
        if (n == 0) {
  223912:	eb 00                	jmp    223914 <Allocator_alignedAlloc.77+0x74>
  223914:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  223918:	b8 10 00 00 00       	mov    eax,0x10
  22391d:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  22391f:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  223926:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  22392d:	e8 de 1a ff ff       	call   215410 <mul>
  223932:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  223937:	74 43                	je     22397c <Allocator_alignedAlloc.77+0xdc>
  223939:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  223940:	e8 4b 83 fe ff       	call   20bc90 <__zig_return_error>
  223945:	48 8b 3d 64 5b fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe5b64]        # 2094b0 <__unnamed_153>
  22394c:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  223953:	48 89 38             	mov    QWORD PTR [rax],rdi
  223956:	48 8b 3d 5b 5b fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe5b5b]        # 2094b8 <__unnamed_153+0x8>
  22395d:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  223961:	48 8b 3d 58 5b fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe5b58]        # 2094c0 <__unnamed_153+0x10>
  223968:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  22396c:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  223973:	48 81 c4 20 01 00 00 	add    rsp,0x120
  22397a:	5d                   	pop    rbp
  22397b:	c3                   	ret    
  22397c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  223980:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  223987:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  22398b:	41 b8 08 00 00 00    	mov    r8d,0x8
  223991:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  223998:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  22399f:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  2239a6:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  2239a9:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  2239b0:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  2239b7:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  2239be:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  2239c5:	4c 89 ce             	mov    rsi,r9
  2239c8:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  2239cf:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  2239d6:	4c 89 d1             	mov    rcx,r10
  2239d9:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  2239e0:	41 ff d3             	call   r11
  2239e3:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  2239e8:	74 50                	je     223a3a <Allocator_alignedAlloc.77+0x19a>
  2239ea:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  2239ee:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  2239f5:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  2239fc:	e8 8f 82 fe ff       	call   20bc90 <__zig_return_error>
  223a01:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  223a08:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  223a0c:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  223a10:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  223a17:	48 89 39             	mov    QWORD PTR [rcx],rdi
  223a1a:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  223a1e:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  223a22:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  223a26:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  223a2a:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  223a31:	48 81 c4 20 01 00 00 	add    rsp,0x120
  223a38:	5d                   	pop    rbp
  223a39:	c3                   	ret    
  223a3a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  223a3e:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  223a45:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  223a49:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  223a50:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  223a57:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  223a5e:	0f 94 c1             	sete   cl
  223a61:	0f b6 f9             	movzx  edi,cl
  223a64:	e8 97 75 fe ff       	call   20b000 <assert>
  223a69:	be aa 00 00 00       	mov    esi,0xaa
  223a6e:	bf 08 00 00 00       	mov    edi,0x8
  223a73:	89 fa                	mov    edx,edi
  223a75:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  223a7c:	48 89 c7             	mov    rdi,rax
  223a7f:	e8 2c 0e 01 00       	call   2348b0 <memset>
  223a84:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  223a8b:	00 00 00 00 
  223a8f:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  223a96:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  223a9d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  223aa4:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  223aab:	48 39 c8             	cmp    rax,rcx
  223aae:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  223ab5:	73 32                	jae    223ae9 <Allocator_alignedAlloc.77+0x249>
  223ab7:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  223abe:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  223ac5:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  223acc:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  223ad3:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  223ad5:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  223adc:	48 83 c1 01          	add    rcx,0x1
  223ae0:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  223ae7:	eb b4                	jmp    223a9d <Allocator_alignedAlloc.77+0x1fd>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  223ae9:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  223af0:	48 83 e0 07          	and    rax,0x7
  223af4:	48 83 f8 00          	cmp    rax,0x0
  223af8:	75 28                	jne    223b22 <Allocator_alignedAlloc.77+0x282>
  223afa:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  223b01:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  223b05:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  223b0c:	48 89 c1             	mov    rcx,rax
  223b0f:	48 83 e1 0f          	and    rcx,0xf
  223b13:	48 83 f9 00          	cmp    rcx,0x0
  223b17:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  223b1e:	74 12                	je     223b32 <Allocator_alignedAlloc.77+0x292>
  223b20:	eb 6f                	jmp    223b91 <Allocator_alignedAlloc.77+0x2f1>
  223b22:	48 8d 3d a7 fa 01 00 	lea    rdi,[rip+0x1faa7]        # 2435d0 <__unnamed_75>
  223b29:	31 c0                	xor    eax,eax
  223b2b:	89 c6                	mov    esi,eax
  223b2d:	e8 ce 7a fe ff       	call   20b600 <panic>
  223b32:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  223b39:	48 c1 e8 04          	shr    rax,0x4
  223b3d:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  223b41:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  223b48:	00 00 
  223b4a:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  223b4e:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  223b55:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  223b59:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  223b5d:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  223b64:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  223b6b:	48 89 01             	mov    QWORD PTR [rcx],rax
  223b6e:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  223b75:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  223b79:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  223b7d:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  223b81:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  223b88:	48 81 c4 20 01 00 00 	add    rsp,0x120
  223b8f:	5d                   	pop    rbp
  223b90:	c3                   	ret    
  223b91:	48 8d 3d 50 fa 01 00 	lea    rdi,[rip+0x1fa50]        # 2435e8 <__unnamed_76>
  223b98:	31 c0                	xor    eax,eax
  223b9a:	89 c6                	mov    esi,eax
  223b9c:	e8 5f 7a fe ff       	call   20b600 <panic>
  223ba1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  223ba8:	0f 1f 84 00 00 00 00 
  223baf:	00 

0000000000223bb0 <Allocator_free.78>:
    pub fn free(self: *Allocator, memory: var) void {
  223bb0:	55                   	push   rbp
  223bb1:	48 89 e5             	mov    rbp,rsp
  223bb4:	48 83 ec 60          	sub    rsp,0x60
  223bb8:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
        const bytes = @sliceToBytes(memory);
  223bbc:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  223bbf:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  223bc3:	48 8b 76 08          	mov    rsi,QWORD PTR [rsi+0x8]
  223bc7:	48 c1 e6 04          	shl    rsi,0x4
  223bcb:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  223bcf:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  223bd3:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  223bd7:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  223bdb:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        if (bytes.len == 0) return;
  223bdf:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
  223be4:	75 06                	jne    223bec <Allocator_free.78+0x3c>
  223be6:	48 83 c4 60          	add    rsp,0x60
  223bea:	5d                   	pop    rbp
  223beb:	c3                   	ret    
  223bec:	31 c0                	xor    eax,eax
  223bee:	89 c1                	mov    ecx,eax
        const non_const_ptr = @intToPtr([*]u8, @ptrToInt(bytes.ptr));
  223bf0:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  223bf4:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
        self.freeFn(self, non_const_ptr[0..bytes.len]);
  223bf8:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  223bfc:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  223c00:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  223c04:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  223c08:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
  223c0c:	48 39 f1             	cmp    rcx,rsi
  223c0f:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
  223c13:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
  223c17:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  223c1b:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  223c1f:	76 10                	jbe    223c31 <Allocator_free.78+0x81>
  223c21:	48 8d 3d d0 f7 01 00 	lea    rdi,[rip+0x1f7d0]        # 2433f8 <__unnamed_20>
  223c28:	31 c0                	xor    eax,eax
  223c2a:	89 c6                	mov    esi,eax
  223c2c:	e8 cf 79 fe ff       	call   20b600 <panic>
  223c31:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
  223c35:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  223c39:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  223c3d:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  223c41:	48 83 e9 00          	sub    rcx,0x0
  223c45:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  223c49:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  223c4d:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  223c51:	ff d1                	call   rcx
    pub fn free(self: *Allocator, memory: var) void {
  223c53:	48 83 c4 60          	add    rsp,0x60
  223c57:	5d                   	pop    rbp
  223c58:	c3                   	ret    
  223c59:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000223c60 <AlignedArrayList(FileEntry,8)_addOne>:
        pub fn addOne(self: *Self) !*T {
  223c60:	55                   	push   rbp
  223c61:	48 89 e5             	mov    rbp,rsp
  223c64:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  223c6b:	48 89 f8             	mov    rax,rdi
  223c6e:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            const new_length = self.len + 1;
  223c72:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  223c76:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  223c7a:	48 83 c2 01          	add    rdx,0x1
  223c7e:	0f 92 c1             	setb   cl
  223c81:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  223c85:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  223c89:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  223c8d:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  223c91:	88 4d 9f             	mov    BYTE PTR [rbp-0x61],cl
  223c94:	72 57                	jb     223ced <AlignedArrayList(FileEntry,8)_addOne+0x8d>
  223c96:	eb 65                	jmp    223cfd <AlignedArrayList(FileEntry,8)_addOne+0x9d>
            try self.ensureCapacity(new_length);
  223c98:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  223c9c:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  223ca0:	66 89 45 9c          	mov    WORD PTR [rbp-0x64],ax
  223ca4:	e8 e7 7f fe ff       	call   20bc90 <__zig_return_error>
  223ca9:	66 8b 45 9c          	mov    ax,WORD PTR [rbp-0x64]
  223cad:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  223cb1:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  223cb5:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  223cb9:	48 89 39             	mov    QWORD PTR [rcx],rdi
  223cbc:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  223cc0:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  223cc4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  223cc8:	48 81 c4 80 00 00 00 	add    rsp,0x80
  223ccf:	5d                   	pop    rbp
  223cd0:	c3                   	ret    
            const result = &self.items[self.len];
  223cd1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  223cd5:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  223cd9:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
  223cdd:	48 3b 48 08          	cmp    rcx,QWORD PTR [rax+0x8]
  223ce1:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  223ce5:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
  223ce9:	72 4c                	jb     223d37 <AlignedArrayList(FileEntry,8)_addOne+0xd7>
  223ceb:	eb 3a                	jmp    223d27 <AlignedArrayList(FileEntry,8)_addOne+0xc7>
  223ced:	48 8d 3d d4 f4 01 00 	lea    rdi,[rip+0x1f4d4]        # 2431c8 <__unnamed_4>
  223cf4:	31 c0                	xor    eax,eax
  223cf6:	89 c6                	mov    esi,eax
            const new_length = self.len + 1;
  223cf8:	e8 03 79 fe ff       	call   20b600 <panic>
  223cfd:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  223d01:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
            try self.ensureCapacity(new_length);
  223d05:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  223d09:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  223d0d:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  223d11:	e8 7a 00 00 00       	call   223d90 <AlignedArrayList(FileEntry,8)_ensureCapacity>
  223d16:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  223d1a:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  223d1f:	0f 85 73 ff ff ff    	jne    223c98 <AlignedArrayList(FileEntry,8)_addOne+0x38>
  223d25:	eb aa                	jmp    223cd1 <AlignedArrayList(FileEntry,8)_addOne+0x71>
  223d27:	48 8d 3d ca f6 01 00 	lea    rdi,[rip+0x1f6ca]        # 2433f8 <__unnamed_20>
  223d2e:	31 c0                	xor    eax,eax
  223d30:	89 c6                	mov    esi,eax
            const result = &self.items[self.len];
  223d32:	e8 c9 78 fe ff       	call   20b600 <panic>
  223d37:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  223d3b:	48 6b c8 28          	imul   rcx,rax,0x28
  223d3f:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
  223d43:	48 03 0a             	add    rcx,QWORD PTR [rdx]
  223d46:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
            self.len = new_length;
  223d4a:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  223d4e:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  223d52:	48 89 71 10          	mov    QWORD PTR [rcx+0x10],rsi
            return result;
  223d56:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  223d5a:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  223d60:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  223d64:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  223d68:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  223d6c:	48 89 0e             	mov    QWORD PTR [rsi],rcx
  223d6f:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  223d73:	48 89 4e 08          	mov    QWORD PTR [rsi+0x8],rcx
  223d77:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  223d7b:	48 81 c4 80 00 00 00 	add    rsp,0x80
  223d82:	5d                   	pop    rbp
  223d83:	c3                   	ret    
  223d84:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  223d8b:	00 00 00 00 00 

0000000000223d90 <AlignedArrayList(FileEntry,8)_ensureCapacity>:
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  223d90:	55                   	push   rbp
  223d91:	48 89 e5             	mov    rbp,rsp
  223d94:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  223d9b:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  223d9f:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
            var better_capacity = self.items.len;
  223da3:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  223da7:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  223dab:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
            if (better_capacity >= new_capacity) return;
  223daf:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  223db3:	48 3b 55 c0          	cmp    rdx,QWORD PTR [rbp-0x40]
  223db7:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  223dbb:	72 11                	jb     223dce <AlignedArrayList(FileEntry,8)_ensureCapacity+0x3e>
  223dbd:	31 c0                	xor    eax,eax
  223dbf:	66 89 c1             	mov    cx,ax
  223dc2:	66 89 c8             	mov    ax,cx
  223dc5:	48 81 c4 90 00 00 00 	add    rsp,0x90
  223dcc:	5d                   	pop    rbp
  223dcd:	c3                   	ret    
            while (true) {
  223dce:	eb 00                	jmp    223dd0 <AlignedArrayList(FileEntry,8)_ensureCapacity+0x40>
  223dd0:	eb 00                	jmp    223dd2 <AlignedArrayList(FileEntry,8)_ensureCapacity+0x42>
  223dd2:	31 c0                	xor    eax,eax
  223dd4:	88 c1                	mov    cl,al
                better_capacity += better_capacity / 2 + 8;
  223dd6:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  223dda:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  223dde:	f6 c1 01             	test   cl,0x1
  223de1:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  223de5:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  223de9:	0f 85 8e 00 00 00    	jne    223e7d <AlignedArrayList(FileEntry,8)_ensureCapacity+0xed>
  223def:	eb 72                	jmp    223e63 <AlignedArrayList(FileEntry,8)_ensureCapacity+0xd3>
                if (better_capacity >= new_capacity) break;
  223df1:	eb 02                	jmp    223df5 <AlignedArrayList(FileEntry,8)_ensureCapacity+0x65>
            while (true) {
  223df3:	eb db                	jmp    223dd0 <AlignedArrayList(FileEntry,8)_ensureCapacity+0x40>
  223df5:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
            self.items = try self.allocator.alignedRealloc(T, A, self.items, better_capacity);
  223df9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  223dfd:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  223e01:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
  223e05:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  223e09:	4c 8b 45 b8          	mov    r8,QWORD PTR [rbp-0x48]
  223e0d:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  223e11:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  223e15:	e8 d6 00 00 00       	call   223ef0 <Allocator_alignedRealloc.79>
  223e1a:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  223e1f:	74 1e                	je     223e3f <AlignedArrayList(FileEntry,8)_ensureCapacity+0xaf>
  223e21:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  223e25:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  223e29:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  223e2d:	e8 5e 7e fe ff       	call   20bc90 <__zig_return_error>
  223e32:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  223e36:	48 81 c4 90 00 00 00 	add    rsp,0x90
  223e3d:	5d                   	pop    rbp
  223e3e:	c3                   	ret    
  223e3f:	31 c0                	xor    eax,eax
  223e41:	66 89 c1             	mov    cx,ax
  223e44:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  223e48:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  223e4c:	48 89 16             	mov    QWORD PTR [rsi],rdx
  223e4f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  223e53:	48 89 56 08          	mov    QWORD PTR [rsi+0x8],rdx
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  223e57:	66 89 c8             	mov    ax,cx
  223e5a:	48 81 c4 90 00 00 00 	add    rsp,0x90
  223e61:	5d                   	pop    rbp
  223e62:	c3                   	ret    
                better_capacity += better_capacity / 2 + 8;
  223e63:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  223e67:	48 c1 e8 01          	shr    rax,0x1
  223e6b:	48 83 c0 08          	add    rax,0x8
  223e6f:	0f 92 c1             	setb   cl
  223e72:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  223e76:	88 4d 87             	mov    BYTE PTR [rbp-0x79],cl
  223e79:	72 12                	jb     223e8d <AlignedArrayList(FileEntry,8)_ensureCapacity+0xfd>
  223e7b:	eb 20                	jmp    223e9d <AlignedArrayList(FileEntry,8)_ensureCapacity+0x10d>
  223e7d:	48 8d 3d bc f3 01 00 	lea    rdi,[rip+0x1f3bc]        # 243240 <__unnamed_7>
  223e84:	31 c0                	xor    eax,eax
  223e86:	89 c6                	mov    esi,eax
  223e88:	e8 73 77 fe ff       	call   20b600 <panic>
  223e8d:	48 8d 3d 34 f3 01 00 	lea    rdi,[rip+0x1f334]        # 2431c8 <__unnamed_4>
  223e94:	31 c0                	xor    eax,eax
  223e96:	89 c6                	mov    esi,eax
  223e98:	e8 63 77 fe ff       	call   20b600 <panic>
  223e9d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  223ea1:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  223ea5:	48 01 c8             	add    rax,rcx
  223ea8:	0f 92 c2             	setb   dl
  223eab:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  223eb2:	88 95 77 ff ff ff    	mov    BYTE PTR [rbp-0x89],dl
  223eb8:	72 02                	jb     223ebc <AlignedArrayList(FileEntry,8)_ensureCapacity+0x12c>
  223eba:	eb 10                	jmp    223ecc <AlignedArrayList(FileEntry,8)_ensureCapacity+0x13c>
  223ebc:	48 8d 3d 05 f3 01 00 	lea    rdi,[rip+0x1f305]        # 2431c8 <__unnamed_4>
  223ec3:	31 c0                	xor    eax,eax
  223ec5:	89 c6                	mov    esi,eax
  223ec7:	e8 34 77 fe ff       	call   20b600 <panic>
  223ecc:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  223ed3:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                if (better_capacity >= new_capacity) break;
  223ed7:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  223edb:	48 3b 4d c0          	cmp    rcx,QWORD PTR [rbp-0x40]
  223edf:	0f 83 0c ff ff ff    	jae    223df1 <AlignedArrayList(FileEntry,8)_ensureCapacity+0x61>
  223ee5:	e9 09 ff ff ff       	jmp    223df3 <AlignedArrayList(FileEntry,8)_ensureCapacity+0x63>
  223eea:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000223ef0 <Allocator_alignedRealloc.79>:
    pub fn alignedRealloc(self: *Allocator, comptime T: type, comptime alignment: u29, old_mem: []align(alignment) T, n: usize) ![]align(alignment) T {
  223ef0:	55                   	push   rbp
  223ef1:	48 89 e5             	mov    rbp,rsp
  223ef4:	53                   	push   rbx
  223ef5:	48 81 ec 88 01 00 00 	sub    rsp,0x188
  223efc:	48 89 f8             	mov    rax,rdi
  223eff:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
  223f06:	4c 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],r8
        if (old_mem.len == 0) {
  223f0d:	48 83 79 08 00       	cmp    QWORD PTR [rcx+0x8],0x0
  223f12:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  223f19:	48 89 b5 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rsi
  223f20:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
  223f27:	48 89 bd b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rdi
  223f2e:	75 64                	jne    223f94 <Allocator_alignedRealloc.79+0xa4>
  223f30:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
            return self.alignedAlloc(T, alignment, n);
  223f34:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  223f3b:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  223f42:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  223f49:	e8 22 04 00 00       	call   224370 <Allocator_alignedAlloc.80>
  223f4e:	66 83 7d e0 00       	cmp    WORD PTR [rbp-0x20],0x0
  223f53:	74 0e                	je     223f63 <Allocator_alignedRealloc.79+0x73>
  223f55:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  223f5c:	e8 2f 7d fe ff       	call   20bc90 <__zig_return_error>
  223f61:	eb 02                	jmp    223f65 <Allocator_alignedRealloc.79+0x75>
  223f63:	eb 00                	jmp    223f65 <Allocator_alignedRealloc.79+0x75>
  223f65:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  223f69:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  223f70:	48 89 01             	mov    QWORD PTR [rcx],rax
  223f73:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  223f77:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  223f7b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  223f7f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  223f83:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  223f8a:	48 81 c4 88 01 00 00 	add    rsp,0x188
  223f91:	5b                   	pop    rbx
  223f92:	5d                   	pop    rbp
  223f93:	c3                   	ret    
        if (old_mem.len == 0) {
  223f94:	eb 00                	jmp    223f96 <Allocator_alignedRealloc.79+0xa6>
        if (n == 0) {
  223f96:	48 83 bd 10 ff ff ff 	cmp    QWORD PTR [rbp-0xf0],0x0
  223f9d:	00 
  223f9e:	75 4b                	jne    223feb <Allocator_alignedRealloc.79+0xfb>
            self.free(old_mem);
  223fa0:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
  223fa7:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  223fae:	e8 dd 06 00 00       	call   224690 <Allocator_free.81>
            return ([*]align(alignment) T)(undefined)[0..0];
  223fb3:	48 8b 35 0e 55 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffe550e]        # 2094c8 <__unnamed_154>
  223fba:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  223fc1:	48 89 37             	mov    QWORD PTR [rdi],rsi
  223fc4:	48 8b 35 05 55 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffe5505]        # 2094d0 <__unnamed_154+0x8>
  223fcb:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  223fcf:	48 8b 35 02 55 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffe5502]        # 2094d8 <__unnamed_154+0x10>
  223fd6:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  223fda:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  223fe1:	48 81 c4 88 01 00 00 	add    rsp,0x188
  223fe8:	5b                   	pop    rbx
  223fe9:	5d                   	pop    rbp
  223fea:	c3                   	ret    
        if (n == 0) {
  223feb:	eb 00                	jmp    223fed <Allocator_alignedRealloc.79+0xfd>
  223fed:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  223ff1:	b8 28 00 00 00       	mov    eax,0x28
  223ff6:	89 c2                	mov    edx,eax
        const old_byte_slice = @sliceToBytes(old_mem);
  223ff8:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  223fff:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  224002:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  224006:	48 6b 71 08 28       	imul   rsi,QWORD PTR [rcx+0x8],0x28
  22400b:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  22400f:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  224013:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
  22401a:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  22401e:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  224025:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  22402c:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  224033:	e8 d8 13 ff ff       	call   215410 <mul>
  224038:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  22403d:	74 44                	je     224083 <Allocator_alignedRealloc.79+0x193>
  22403f:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  224046:	e8 45 7c fe ff       	call   20bc90 <__zig_return_error>
  22404b:	48 8b 3d 8e 54 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe548e]        # 2094e0 <__unnamed_155>
  224052:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  224059:	48 89 38             	mov    QWORD PTR [rax],rdi
  22405c:	48 8b 3d 85 54 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe5485]        # 2094e8 <__unnamed_155+0x8>
  224063:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  224067:	48 8b 3d 82 54 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe5482]        # 2094f0 <__unnamed_155+0x10>
  22406e:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  224072:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  224079:	48 81 c4 88 01 00 00 	add    rsp,0x188
  224080:	5b                   	pop    rbx
  224081:	5d                   	pop    rbp
  224082:	c3                   	ret    
  224083:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  224087:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  22408e:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  224092:	48 8d 8d 00 ff ff ff 	lea    rcx,[rbp-0x100]
  224099:	41 b9 08 00 00 00    	mov    r9d,0x8
  22409f:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  2240a6:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
        const byte_slice = try self.reallocFn(self, old_byte_slice, byte_count, alignment);
  2240ad:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  2240b4:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  2240b8:	48 8b b5 18 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe8]
  2240bf:	4c 8b 85 f8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x108]
  2240c6:	4c 8b 95 c8 fe ff ff 	mov    r10,QWORD PTR [rbp-0x138]
  2240cd:	48 89 b5 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rsi
  2240d4:	4c 89 d6             	mov    rsi,r10
  2240d7:	4c 8b 9d a8 fe ff ff 	mov    r11,QWORD PTR [rbp-0x158]
  2240de:	48 89 95 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdx
  2240e5:	4c 89 da             	mov    rdx,r11
  2240e8:	48 8b 9d a0 fe ff ff 	mov    rbx,QWORD PTR [rbp-0x160]
  2240ef:	ff d3                	call   rbx
  2240f1:	66 83 7d 98 00       	cmp    WORD PTR [rbp-0x68],0x0
  2240f6:	74 5d                	je     224155 <Allocator_alignedRealloc.79+0x265>
  2240f8:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  2240fc:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  224103:	66 89 85 9e fe ff ff 	mov    WORD PTR [rbp-0x162],ax
  22410a:	e8 81 7b fe ff       	call   20bc90 <__zig_return_error>
  22410f:	66 8b 85 9e fe ff ff 	mov    ax,WORD PTR [rbp-0x162]
  224116:	66 89 85 68 ff ff ff 	mov    WORD PTR [rbp-0x98],ax
  22411d:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  224124:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  22412b:	48 89 39             	mov    QWORD PTR [rcx],rdi
  22412e:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  224135:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  224139:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  224140:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  224144:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  22414b:	48 81 c4 88 01 00 00 	add    rsp,0x188
  224152:	5b                   	pop    rbx
  224153:	5d                   	pop    rbp
  224154:	c3                   	ret    
  224155:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  224159:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  224160:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  224164:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
        assert(byte_slice.len == byte_count);
  22416b:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  224172:	48 3b 85 f8 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x108]
  224179:	0f 94 c1             	sete   cl
  22417c:	0f b6 f9             	movzx  edi,cl
  22417f:	e8 7c 6e fe ff       	call   20b000 <assert>
        if (n > old_mem.len) {
  224184:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  22418b:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  224192:	48 3b 42 08          	cmp    rax,QWORD PTR [rdx+0x8]
  224196:	76 71                	jbe    224209 <Allocator_alignedRealloc.79+0x319>
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  224198:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  22419f:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  2241a6:	48 39 c8             	cmp    rax,rcx
  2241a9:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  2241b0:	48 89 8d 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rcx
  2241b7:	76 78                	jbe    224231 <Allocator_alignedRealloc.79+0x341>
  2241b9:	eb 66                	jmp    224221 <Allocator_alignedRealloc.79+0x331>
  2241bb:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  2241c2:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
  2241c9:	48 39 c8             	cmp    rax,rcx
  2241cc:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  2241d3:	73 32                	jae    224207 <Allocator_alignedRealloc.79+0x317>
  2241d5:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  2241dc:	48 03 8d 58 ff ff ff 	add    rcx,QWORD PTR [rbp-0xa8]
  2241e3:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
                byte.* = undefined;
  2241ea:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  2241f1:	88 01                	mov    BYTE PTR [rcx],al
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  2241f3:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  2241fa:	48 83 c1 01          	add    rcx,0x1
  2241fe:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
  224205:	eb b4                	jmp    2241bb <Allocator_alignedRealloc.79+0x2cb>
        if (n > old_mem.len) {
  224207:	eb 02                	jmp    22420b <Allocator_alignedRealloc.79+0x31b>
  224209:	eb 00                	jmp    22420b <Allocator_alignedRealloc.79+0x31b>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  22420b:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  224212:	48 83 e0 07          	and    rax,0x7
  224216:	48 83 f8 00          	cmp    rax,0x0
  22421a:	74 7b                	je     224297 <Allocator_alignedRealloc.79+0x3a7>
  22421c:	e9 ae 00 00 00       	jmp    2242cf <Allocator_alignedRealloc.79+0x3df>
  224221:	48 8d 3d d0 f1 01 00 	lea    rdi,[rip+0x1f1d0]        # 2433f8 <__unnamed_20>
  224228:	31 c0                	xor    eax,eax
  22422a:	89 c6                	mov    esi,eax
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  22422c:	e8 cf 73 fe ff       	call   20b600 <panic>
  224231:	be aa 00 00 00       	mov    esi,0xaa
  224236:	b8 08 00 00 00       	mov    eax,0x8
  22423b:	89 c2                	mov    edx,eax
  22423d:	48 8d 8d e0 fe ff ff 	lea    rcx,[rbp-0x120]
  224244:	48 8b bd 90 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x170]
  22424b:	48 03 bd e8 fe ff ff 	add    rdi,QWORD PTR [rbp-0x118]
  224252:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
  224259:	48 8b bd 88 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x178]
  224260:	4c 8b 85 90 fe ff ff 	mov    r8,QWORD PTR [rbp-0x170]
  224267:	4c 29 c7             	sub    rdi,r8
  22426a:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  224271:	48 89 cf             	mov    rdi,rcx
  224274:	e8 37 06 01 00       	call   2348b0 <memset>
  224279:	48 c7 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],0x0
  224280:	00 00 00 00 
  224284:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  22428b:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  224292:	e9 24 ff ff ff       	jmp    2241bb <Allocator_alignedRealloc.79+0x2cb>
  224297:	b8 28 00 00 00       	mov    eax,0x28
  22429c:	89 c1                	mov    ecx,eax
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  22429e:	48 8b 95 e8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x118]
  2242a5:	48 89 95 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdx
  2242ac:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  2242b3:	48 89 d0             	mov    rax,rdx
  2242b6:	31 f6                	xor    esi,esi
  2242b8:	48 89 95 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rdx
  2242bf:	89 f2                	mov    edx,esi
  2242c1:	48 f7 f1             	div    rcx
  2242c4:	48 83 fa 00          	cmp    rdx,0x0
  2242c8:	74 15                	je     2242df <Allocator_alignedRealloc.79+0x3ef>
  2242ca:	e9 87 00 00 00       	jmp    224356 <Allocator_alignedRealloc.79+0x466>
  2242cf:	48 8d 3d fa f2 01 00 	lea    rdi,[rip+0x1f2fa]        # 2435d0 <__unnamed_75>
  2242d6:	31 c0                	xor    eax,eax
  2242d8:	89 c6                	mov    esi,eax
  2242da:	e8 21 73 fe ff       	call   20b600 <panic>
  2242df:	b8 28 00 00 00       	mov    eax,0x28
  2242e4:	89 c1                	mov    ecx,eax
  2242e6:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  2242ed:	31 d2                	xor    edx,edx
  2242ef:	48 f7 f1             	div    rcx
  2242f2:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  2242f9:	66 c7 85 20 ff ff ff 	mov    WORD PTR [rbp-0xe0],0x0
  224300:	00 00 
  224302:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  224309:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  224310:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  224317:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  22431e:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  224325:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  22432c:	48 89 01             	mov    QWORD PTR [rcx],rax
  22432f:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  224336:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  22433a:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  224341:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  224345:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  22434c:	48 81 c4 88 01 00 00 	add    rsp,0x188
  224353:	5b                   	pop    rbx
  224354:	5d                   	pop    rbp
  224355:	c3                   	ret    
  224356:	48 8d 3d 8b f2 01 00 	lea    rdi,[rip+0x1f28b]        # 2435e8 <__unnamed_76>
  22435d:	31 c0                	xor    eax,eax
  22435f:	89 c6                	mov    esi,eax
  224361:	e8 9a 72 fe ff       	call   20b600 <panic>
  224366:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  22436d:	00 00 00 

0000000000224370 <Allocator_alignedAlloc.80>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  224370:	55                   	push   rbp
  224371:	48 89 e5             	mov    rbp,rsp
  224374:	48 81 ec 20 01 00 00 	sub    rsp,0x120
  22437b:	48 89 f8             	mov    rax,rdi
  22437e:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  224385:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  22438c:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  224393:	00 
  224394:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  22439b:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  2243a2:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  2243a9:	75 37                	jne    2243e2 <Allocator_alignedAlloc.80+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  2243ab:	48 8b 05 46 51 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe5146]        # 2094f8 <__unnamed_156>
  2243b2:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  2243b9:	48 89 01             	mov    QWORD PTR [rcx],rax
  2243bc:	48 8b 05 3d 51 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe513d]        # 209500 <__unnamed_156+0x8>
  2243c3:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2243c7:	48 8b 05 3a 51 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe513a]        # 209508 <__unnamed_156+0x10>
  2243ce:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  2243d2:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  2243d9:	48 81 c4 20 01 00 00 	add    rsp,0x120
  2243e0:	5d                   	pop    rbp
  2243e1:	c3                   	ret    
        if (n == 0) {
  2243e2:	eb 00                	jmp    2243e4 <Allocator_alignedAlloc.80+0x74>
  2243e4:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  2243e8:	b8 28 00 00 00       	mov    eax,0x28
  2243ed:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  2243ef:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  2243f6:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  2243fd:	e8 0e 10 ff ff       	call   215410 <mul>
  224402:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  224407:	74 43                	je     22444c <Allocator_alignedAlloc.80+0xdc>
  224409:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  224410:	e8 7b 78 fe ff       	call   20bc90 <__zig_return_error>
  224415:	48 8b 3d f4 50 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe50f4]        # 209510 <__unnamed_157>
  22441c:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  224423:	48 89 38             	mov    QWORD PTR [rax],rdi
  224426:	48 8b 3d eb 50 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe50eb]        # 209518 <__unnamed_157+0x8>
  22442d:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  224431:	48 8b 3d e8 50 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe50e8]        # 209520 <__unnamed_157+0x10>
  224438:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  22443c:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  224443:	48 81 c4 20 01 00 00 	add    rsp,0x120
  22444a:	5d                   	pop    rbp
  22444b:	c3                   	ret    
  22444c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  224450:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  224457:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  22445b:	41 b8 08 00 00 00    	mov    r8d,0x8
  224461:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  224468:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  22446f:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  224476:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  224479:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  224480:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  224487:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  22448e:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  224495:	4c 89 ce             	mov    rsi,r9
  224498:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  22449f:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  2244a6:	4c 89 d1             	mov    rcx,r10
  2244a9:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  2244b0:	41 ff d3             	call   r11
  2244b3:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  2244b8:	74 50                	je     22450a <Allocator_alignedAlloc.80+0x19a>
  2244ba:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  2244be:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  2244c5:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  2244cc:	e8 bf 77 fe ff       	call   20bc90 <__zig_return_error>
  2244d1:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  2244d8:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  2244dc:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  2244e0:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  2244e7:	48 89 39             	mov    QWORD PTR [rcx],rdi
  2244ea:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  2244ee:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  2244f2:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  2244f6:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  2244fa:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  224501:	48 81 c4 20 01 00 00 	add    rsp,0x120
  224508:	5d                   	pop    rbp
  224509:	c3                   	ret    
  22450a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  22450e:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  224515:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  224519:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  224520:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  224527:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  22452e:	0f 94 c1             	sete   cl
  224531:	0f b6 f9             	movzx  edi,cl
  224534:	e8 c7 6a fe ff       	call   20b000 <assert>
  224539:	be aa 00 00 00       	mov    esi,0xaa
  22453e:	bf 08 00 00 00       	mov    edi,0x8
  224543:	89 fa                	mov    edx,edi
  224545:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  22454c:	48 89 c7             	mov    rdi,rax
  22454f:	e8 5c 03 01 00       	call   2348b0 <memset>
  224554:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  22455b:	00 00 00 00 
  22455f:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  224566:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  22456d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  224574:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  22457b:	48 39 c8             	cmp    rax,rcx
  22457e:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  224585:	73 32                	jae    2245b9 <Allocator_alignedAlloc.80+0x249>
  224587:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22458e:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  224595:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  22459c:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  2245a3:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  2245a5:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  2245ac:	48 83 c1 01          	add    rcx,0x1
  2245b0:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  2245b7:	eb b4                	jmp    22456d <Allocator_alignedAlloc.80+0x1fd>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  2245b9:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  2245c0:	48 83 e0 07          	and    rax,0x7
  2245c4:	48 83 f8 00          	cmp    rax,0x0
  2245c8:	75 32                	jne    2245fc <Allocator_alignedAlloc.80+0x28c>
  2245ca:	b8 28 00 00 00       	mov    eax,0x28
  2245cf:	89 c1                	mov    ecx,eax
  2245d1:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
  2245d8:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
  2245dc:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
  2245e3:	48 89 d0             	mov    rax,rdx
  2245e6:	31 f6                	xor    esi,esi
  2245e8:	48 89 95 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdx
  2245ef:	89 f2                	mov    edx,esi
  2245f1:	48 f7 f1             	div    rcx
  2245f4:	48 83 fa 00          	cmp    rdx,0x0
  2245f8:	74 12                	je     22460c <Allocator_alignedAlloc.80+0x29c>
  2245fa:	eb 77                	jmp    224673 <Allocator_alignedAlloc.80+0x303>
  2245fc:	48 8d 3d cd ef 01 00 	lea    rdi,[rip+0x1efcd]        # 2435d0 <__unnamed_75>
  224603:	31 c0                	xor    eax,eax
  224605:	89 c6                	mov    esi,eax
  224607:	e8 f4 6f fe ff       	call   20b600 <panic>
  22460c:	b8 28 00 00 00       	mov    eax,0x28
  224611:	89 c1                	mov    ecx,eax
  224613:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  22461a:	31 d2                	xor    edx,edx
  22461c:	48 f7 f1             	div    rcx
  22461f:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  224623:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  22462a:	00 00 
  22462c:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  224630:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  224637:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  22463b:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  22463f:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  224646:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  22464d:	48 89 01             	mov    QWORD PTR [rcx],rax
  224650:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  224657:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  22465b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  22465f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  224663:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  22466a:	48 81 c4 20 01 00 00 	add    rsp,0x120
  224671:	5d                   	pop    rbp
  224672:	c3                   	ret    
  224673:	48 8d 3d 6e ef 01 00 	lea    rdi,[rip+0x1ef6e]        # 2435e8 <__unnamed_76>
  22467a:	31 c0                	xor    eax,eax
  22467c:	89 c6                	mov    esi,eax
  22467e:	e8 7d 6f fe ff       	call   20b600 <panic>
  224683:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22468a:	84 00 00 00 00 00 

0000000000224690 <Allocator_free.81>:
    pub fn free(self: *Allocator, memory: var) void {
  224690:	55                   	push   rbp
  224691:	48 89 e5             	mov    rbp,rsp
  224694:	48 83 ec 60          	sub    rsp,0x60
  224698:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
        const bytes = @sliceToBytes(memory);
  22469c:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  22469f:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  2246a3:	48 6b 76 08 28       	imul   rsi,QWORD PTR [rsi+0x8],0x28
  2246a8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2246ac:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  2246b0:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  2246b4:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2246b8:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        if (bytes.len == 0) return;
  2246bc:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
  2246c1:	75 06                	jne    2246c9 <Allocator_free.81+0x39>
  2246c3:	48 83 c4 60          	add    rsp,0x60
  2246c7:	5d                   	pop    rbp
  2246c8:	c3                   	ret    
  2246c9:	31 c0                	xor    eax,eax
  2246cb:	89 c1                	mov    ecx,eax
        const non_const_ptr = @intToPtr([*]u8, @ptrToInt(bytes.ptr));
  2246cd:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  2246d1:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
        self.freeFn(self, non_const_ptr[0..bytes.len]);
  2246d5:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  2246d9:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  2246dd:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  2246e1:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  2246e5:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
  2246e9:	48 39 f1             	cmp    rcx,rsi
  2246ec:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
  2246f0:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
  2246f4:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  2246f8:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  2246fc:	76 10                	jbe    22470e <Allocator_free.81+0x7e>
  2246fe:	48 8d 3d f3 ec 01 00 	lea    rdi,[rip+0x1ecf3]        # 2433f8 <__unnamed_20>
  224705:	31 c0                	xor    eax,eax
  224707:	89 c6                	mov    esi,eax
  224709:	e8 f2 6e fe ff       	call   20b600 <panic>
  22470e:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
  224712:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  224716:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  22471a:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  22471e:	48 83 e9 00          	sub    rcx,0x0
  224722:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  224726:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  22472a:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  22472e:	ff d1                	call   rcx
    pub fn free(self: *Allocator, memory: var) void {
  224730:	48 83 c4 60          	add    rsp,0x60
  224734:	5d                   	pop    rbp
  224735:	c3                   	ret    
  224736:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  22473d:	00 00 00 

0000000000224740 <join>:
    }
}

/// Naively combines a series of paths with the native path seperator.
/// Allocates memory for the result, which must be freed by the caller.
pub fn join(allocator: *Allocator, paths: ...) ![]u8 {
  224740:	55                   	push   rbp
  224741:	48 89 e5             	mov    rbp,rsp
  224744:	48 83 ec 40          	sub    rsp,0x40
  224748:	48 89 f8             	mov    rax,rdi
  22474b:	4c 8d 4d e8          	lea    r9,[rbp-0x18]
  22474f:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
    if (is_windows) {
        return joinWindows(allocator, paths);
    } else {
        return joinPosix(allocator, paths);
  224753:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  224757:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  22475b:	4c 89 cf             	mov    rdi,r9
  22475e:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  224762:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  224766:	e8 45 00 00 00       	call   2247b0 <joinPosix>
  22476b:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  224770:	74 0b                	je     22477d <join+0x3d>
  224772:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  224776:	e8 15 75 fe ff       	call   20bc90 <__zig_return_error>
  22477b:	eb 02                	jmp    22477f <join+0x3f>
  22477d:	eb 00                	jmp    22477f <join+0x3f>
  22477f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  224783:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  224787:	48 89 01             	mov    QWORD PTR [rcx],rax
  22478a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22478e:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  224792:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  224796:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  22479a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  22479e:	48 83 c4 40          	add    rsp,0x40
  2247a2:	5d                   	pop    rbp
  2247a3:	c3                   	ret    
  2247a4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2247ab:	00 00 00 00 00 

00000000002247b0 <joinPosix>:

pub fn joinWindows(allocator: *Allocator, paths: ...) ![]u8 {
    return mem.join(allocator, sep_windows, paths);
}

pub fn joinPosix(allocator: *Allocator, paths: ...) ![]u8 {
  2247b0:	55                   	push   rbp
  2247b1:	48 89 e5             	mov    rbp,rsp
  2247b4:	48 83 ec 50          	sub    rsp,0x50
  2247b8:	48 89 f8             	mov    rax,rdi
  2247bb:	4c 8d 4d e8          	lea    r9,[rbp-0x18]
  2247bf:	41 ba 2f 00 00 00    	mov    r10d,0x2f
  2247c5:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
    return mem.join(allocator, sep_posix, paths);
  2247c9:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  2247cd:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  2247d1:	4c 89 cf             	mov    rdi,r9
  2247d4:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  2247d8:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  2247dc:	44 89 d1             	mov    ecx,r10d
  2247df:	4c 8b 4d c8          	mov    r9,QWORD PTR [rbp-0x38]
  2247e3:	4c 89 45 c0          	mov    QWORD PTR [rbp-0x40],r8
  2247e7:	4d 89 c8             	mov    r8,r9
  2247ea:	4c 8b 4d c0          	mov    r9,QWORD PTR [rbp-0x40]
  2247ee:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  2247f2:	e8 39 00 00 00       	call   224830 <join.82>
  2247f7:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  2247fc:	74 0b                	je     224809 <joinPosix+0x59>
  2247fe:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  224802:	e8 89 74 fe ff       	call   20bc90 <__zig_return_error>
  224807:	eb 02                	jmp    22480b <joinPosix+0x5b>
  224809:	eb 00                	jmp    22480b <joinPosix+0x5b>
  22480b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22480f:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  224813:	48 89 01             	mov    QWORD PTR [rcx],rax
  224816:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22481a:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  22481e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  224822:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  224826:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  22482a:	48 83 c4 50          	add    rsp,0x50
  22482e:	5d                   	pop    rbp
  22482f:	c3                   	ret    

0000000000224830 <join.82>:
    }
};

/// Naively combines a series of strings with a separator.
/// Allocates memory for the result, which must be freed by the caller.
pub fn join(allocator: *Allocator, sep: u8, strings: ...) ![]u8 {
  224830:	55                   	push   rbp
  224831:	48 89 e5             	mov    rbp,rsp
  224834:	48 81 ec c0 01 00 00 	sub    rsp,0x1c0
  22483b:	88 c8                	mov    al,cl
  22483d:	49 89 fa             	mov    r10,rdi
  224840:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  224847:	88 85 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],al
    comptime assert(strings.len >= 1);
    var total_strings_len: usize = strings.len; // 1 sep per string
  22484d:	48 c7 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],0x2
  224854:	02 00 00 00 
    {
        comptime var string_i = 0;
        inline while (string_i < strings.len) : (string_i += 1) {
            const arg = ([]const u8)(strings[string_i]);
  224858:	49 8b 10             	mov    rdx,QWORD PTR [r8]
  22485b:	48 89 95 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdx
  224862:	49 8b 50 08          	mov    rdx,QWORD PTR [r8+0x8]
  224866:	48 89 95 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rdx
            total_strings_len += arg.len;
  22486d:	48 8b 95 58 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa8]
  224874:	48 03 95 40 ff ff ff 	add    rdx,QWORD PTR [rbp-0xc0]
  22487b:	0f 92 c0             	setb   al
  22487e:	4c 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],r10
  224885:	4c 89 8d f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],r9
  22488c:	48 89 b5 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rsi
  224893:	4c 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],r8
  22489a:	48 89 bd d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rdi
  2248a1:	48 89 95 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rdx
  2248a8:	88 85 cf fe ff ff    	mov    BYTE PTR [rbp-0x131],al
  2248ae:	0f 82 24 01 00 00    	jb     2249d8 <join.82+0x1a8>
  2248b4:	e9 2f 01 00 00       	jmp    2249e8 <join.82+0x1b8>
        }
    }

    const buf = try allocator.alloc(u8, total_strings_len);
  2248b9:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  2248bd:	48 8b bd e8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x118]
  2248c4:	66 89 85 cc fe ff ff 	mov    WORD PTR [rbp-0x134],ax
  2248cb:	e8 c0 73 fe ff       	call   20bc90 <__zig_return_error>
  2248d0:	66 8b 85 cc fe ff ff 	mov    ax,WORD PTR [rbp-0x134]
  2248d7:	66 89 45 b8          	mov    WORD PTR [rbp-0x48],ax
  2248db:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  2248df:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
  2248e6:	48 89 39             	mov    QWORD PTR [rcx],rdi
  2248e9:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  2248ed:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  2248f1:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2248f5:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  2248f9:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  224900:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  224907:	5d                   	pop    rbp
  224908:	c3                   	ret    
  224909:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22490d:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  224914:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  224918:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
    errdefer allocator.free(buf);

    var buf_index: usize = 0;
  22491f:	48 c7 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],0x0
  224926:	00 00 00 00 
    comptime var string_i = 0;
    inline while (true) {
        const arg = ([]const u8)(strings[string_i]);
  22492a:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
  224931:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  224934:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  22493b:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  22493f:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
        string_i += 1;
        copy(u8, buf[buf_index..], arg);
  224946:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  22494d:	48 8b 95 30 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd0]
  224954:	48 39 d1             	cmp    rcx,rdx
  224957:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
  22495e:	48 89 95 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rdx
  224965:	0f 86 27 01 00 00    	jbe    224a92 <join.82+0x262>
  22496b:	e9 12 01 00 00       	jmp    224a82 <join.82+0x252>
        buf_index += arg.len;
        if (string_i >= strings.len) break;
        if (buf[buf_index - 1] != sep) {
            buf[buf_index] = sep;
  224970:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  224977:	48 3b 85 30 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xd0]
  22497e:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  224985:	0f 82 ff 01 00 00    	jb     224b8a <join.82+0x35a>
  22498b:	e9 ea 01 00 00       	jmp    224b7a <join.82+0x34a>
        if (buf[buf_index - 1] != sep) {
  224990:	eb 00                	jmp    224992 <join.82+0x162>
        const arg = ([]const u8)(strings[string_i]);
  224992:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  224999:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22499c:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  2249a3:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  2249a7:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
        copy(u8, buf[buf_index..], arg);
  2249ae:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  2249b5:	48 8b 95 30 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd0]
  2249bc:	48 39 d1             	cmp    rcx,rdx
  2249bf:	48 89 8d a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rcx
  2249c6:	48 89 95 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdx
  2249cd:	0f 86 20 02 00 00    	jbe    224bf3 <join.82+0x3c3>
  2249d3:	e9 0b 02 00 00       	jmp    224be3 <join.82+0x3b3>
  2249d8:	48 8d 3d e9 e7 01 00 	lea    rdi,[rip+0x1e7e9]        # 2431c8 <__unnamed_4>
  2249df:	31 c0                	xor    eax,eax
  2249e1:	89 c6                	mov    esi,eax
            total_strings_len += arg.len;
  2249e3:	e8 18 6c fe ff       	call   20b600 <panic>
  2249e8:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  2249ef:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
            const arg = ([]const u8)(strings[string_i]);
  2249f6:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  2249fd:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
  224a00:	48 89 95 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdx
  224a07:	48 8b 51 08          	mov    rdx,QWORD PTR [rcx+0x8]
  224a0b:	48 89 95 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rdx
            total_strings_len += arg.len;
  224a12:	48 8b 95 58 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa8]
  224a19:	48 03 95 40 ff ff ff 	add    rdx,QWORD PTR [rbp-0xc0]
  224a20:	40 0f 92 c6          	setb   sil
  224a24:	48 89 95 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rdx
  224a2b:	40 88 b5 97 fe ff ff 	mov    BYTE PTR [rbp-0x169],sil
  224a32:	72 02                	jb     224a36 <join.82+0x206>
  224a34:	eb 10                	jmp    224a46 <join.82+0x216>
  224a36:	48 8d 3d 8b e7 01 00 	lea    rdi,[rip+0x1e78b]        # 2431c8 <__unnamed_4>
  224a3d:	31 c0                	xor    eax,eax
  224a3f:	89 c6                	mov    esi,eax
  224a41:	e8 ba 6b fe ff       	call   20b600 <panic>
  224a46:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
  224a4a:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
  224a51:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
    const buf = try allocator.alloc(u8, total_strings_len);
  224a58:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  224a5f:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  224a66:	48 8b b5 e8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x118]
  224a6d:	e8 2e da ff ff       	call   2224a0 <Allocator_alloc.74>
  224a72:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  224a77:	0f 85 3c fe ff ff    	jne    2248b9 <join.82+0x89>
  224a7d:	e9 87 fe ff ff       	jmp    224909 <join.82+0xd9>
  224a82:	48 8d 3d 6f e9 01 00 	lea    rdi,[rip+0x1e96f]        # 2433f8 <__unnamed_20>
  224a89:	31 c0                	xor    eax,eax
  224a8b:	89 c6                	mov    esi,eax
        copy(u8, buf[buf_index..], arg);
  224a8d:	e8 6e 6b fe ff       	call   20b600 <panic>
  224a92:	48 8d 7d a8          	lea    rdi,[rbp-0x58]
  224a96:	48 8d b5 00 ff ff ff 	lea    rsi,[rbp-0x100]
  224a9d:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  224aa4:	48 03 85 28 ff ff ff 	add    rax,QWORD PTR [rbp-0xd8]
  224aab:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  224aaf:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  224ab6:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  224abd:	48 29 c8             	sub    rax,rcx
  224ac0:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  224ac4:	e8 67 02 00 00       	call   224d30 <copy>
        buf_index += arg.len;
  224ac9:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  224ad0:	48 03 85 08 ff ff ff 	add    rax,QWORD PTR [rbp-0xf8]
  224ad7:	0f 92 c2             	setb   dl
  224ada:	48 89 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rax
  224ae1:	88 95 87 fe ff ff    	mov    BYTE PTR [rbp-0x179],dl
  224ae7:	72 02                	jb     224aeb <join.82+0x2bb>
  224ae9:	eb 10                	jmp    224afb <join.82+0x2cb>
  224aeb:	48 8d 3d d6 e6 01 00 	lea    rdi,[rip+0x1e6d6]        # 2431c8 <__unnamed_4>
  224af2:	31 c0                	xor    eax,eax
  224af4:	89 c6                	mov    esi,eax
  224af6:	e8 05 6b fe ff       	call   20b600 <panic>
  224afb:	48 8b 85 88 fe ff ff 	mov    rax,QWORD PTR [rbp-0x178]
  224b02:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
        if (buf[buf_index - 1] != sep) {
  224b09:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  224b10:	48 83 e9 01          	sub    rcx,0x1
  224b14:	0f 92 c2             	setb   dl
  224b17:	48 89 8d 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rcx
  224b1e:	88 95 77 fe ff ff    	mov    BYTE PTR [rbp-0x189],dl
  224b24:	72 02                	jb     224b28 <join.82+0x2f8>
  224b26:	eb 10                	jmp    224b38 <join.82+0x308>
  224b28:	48 8d 3d 99 e6 01 00 	lea    rdi,[rip+0x1e699]        # 2431c8 <__unnamed_4>
  224b2f:	31 c0                	xor    eax,eax
  224b31:	89 c6                	mov    esi,eax
  224b33:	e8 c8 6a fe ff       	call   20b600 <panic>
  224b38:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
  224b3f:	48 3b 85 30 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xd0]
  224b46:	72 10                	jb     224b58 <join.82+0x328>
  224b48:	48 8d 3d a9 e8 01 00 	lea    rdi,[rip+0x1e8a9]        # 2433f8 <__unnamed_20>
  224b4f:	31 c0                	xor    eax,eax
  224b51:	89 c6                	mov    esi,eax
  224b53:	e8 a8 6a fe ff       	call   20b600 <panic>
  224b58:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  224b5f:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  224b66:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  224b69:	3a 95 67 ff ff ff    	cmp    dl,BYTE PTR [rbp-0x99]
  224b6f:	0f 85 fb fd ff ff    	jne    224970 <join.82+0x140>
  224b75:	e9 16 fe ff ff       	jmp    224990 <join.82+0x160>
  224b7a:	48 8d 3d 77 e8 01 00 	lea    rdi,[rip+0x1e877]        # 2433f8 <__unnamed_20>
  224b81:	31 c0                	xor    eax,eax
  224b83:	89 c6                	mov    esi,eax
            buf[buf_index] = sep;
  224b85:	e8 76 6a fe ff       	call   20b600 <panic>
  224b8a:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  224b91:	8a 8d 67 ff ff ff    	mov    cl,BYTE PTR [rbp-0x99]
  224b97:	48 8b 95 b0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x150]
  224b9e:	88 0c 10             	mov    BYTE PTR [rax+rdx*1],cl
            buf_index += 1;
  224ba1:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  224ba8:	48 83 c0 01          	add    rax,0x1
  224bac:	0f 92 c1             	setb   cl
  224baf:	48 89 85 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rax
  224bb6:	88 8d 67 fe ff ff    	mov    BYTE PTR [rbp-0x199],cl
  224bbc:	72 02                	jb     224bc0 <join.82+0x390>
  224bbe:	eb 10                	jmp    224bd0 <join.82+0x3a0>
  224bc0:	48 8d 3d 01 e6 01 00 	lea    rdi,[rip+0x1e601]        # 2431c8 <__unnamed_4>
  224bc7:	31 c0                	xor    eax,eax
  224bc9:	89 c6                	mov    esi,eax
  224bcb:	e8 30 6a fe ff       	call   20b600 <panic>
  224bd0:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
  224bd7:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
        if (buf[buf_index - 1] != sep) {
  224bde:	e9 af fd ff ff       	jmp    224992 <join.82+0x162>
  224be3:	48 8d 3d 0e e8 01 00 	lea    rdi,[rip+0x1e80e]        # 2433f8 <__unnamed_20>
  224bea:	31 c0                	xor    eax,eax
  224bec:	89 c6                	mov    esi,eax
        copy(u8, buf[buf_index..], arg);
  224bee:	e8 0d 6a fe ff       	call   20b600 <panic>
  224bf3:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  224bf7:	48 8d b5 00 ff ff ff 	lea    rsi,[rbp-0x100]
  224bfe:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
  224c05:	48 03 85 28 ff ff ff 	add    rax,QWORD PTR [rbp-0xd8]
  224c0c:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  224c10:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
  224c17:	48 8b 8d a8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x158]
  224c1e:	48 29 c8             	sub    rax,rcx
  224c21:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  224c25:	e8 06 01 00 00       	call   224d30 <copy>
        buf_index += arg.len;
  224c2a:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  224c31:	48 03 85 08 ff ff ff 	add    rax,QWORD PTR [rbp-0xf8]
  224c38:	0f 92 c2             	setb   dl
  224c3b:	48 89 85 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rax
  224c42:	88 95 57 fe ff ff    	mov    BYTE PTR [rbp-0x1a9],dl
  224c48:	72 02                	jb     224c4c <join.82+0x41c>
  224c4a:	eb 10                	jmp    224c5c <join.82+0x42c>
  224c4c:	48 8d 3d 75 e5 01 00 	lea    rdi,[rip+0x1e575]        # 2431c8 <__unnamed_4>
  224c53:	31 c0                	xor    eax,eax
  224c55:	89 c6                	mov    esi,eax
  224c57:	e8 a4 69 fe ff       	call   20b600 <panic>
  224c5c:	31 c0                	xor    eax,eax
  224c5e:	89 c1                	mov    ecx,eax
  224c60:	48 8b 95 58 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1a8]
  224c67:	48 89 95 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdx
        }
    }

    return buf[0..buf_index];
  224c6e:	48 8b b5 20 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe0]
  224c75:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
  224c7c:	48 39 f1             	cmp    rcx,rsi
  224c7f:	48 89 bd 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rdi
  224c86:	48 89 b5 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rsi
  224c8d:	76 10                	jbe    224c9f <join.82+0x46f>
  224c8f:	48 8d 3d 62 e7 01 00 	lea    rdi,[rip+0x1e762]        # 2433f8 <__unnamed_20>
  224c96:	31 c0                	xor    eax,eax
  224c98:	89 c6                	mov    esi,eax
  224c9a:	e8 61 69 fe ff       	call   20b600 <panic>
  224c9f:	48 8b 85 40 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c0]
  224ca6:	48 8b 8d 48 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1b8]
  224cad:	48 39 c8             	cmp    rax,rcx
  224cb0:	76 10                	jbe    224cc2 <join.82+0x492>
  224cb2:	48 8d 3d 3f e7 01 00 	lea    rdi,[rip+0x1e73f]        # 2433f8 <__unnamed_20>
  224cb9:	31 c0                	xor    eax,eax
  224cbb:	89 c6                	mov    esi,eax
  224cbd:	e8 3e 69 fe ff       	call   20b600 <panic>
  224cc2:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  224cc9:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  224ccd:	48 8b 85 40 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c0]
  224cd4:	48 83 e8 00          	sub    rax,0x0
  224cd8:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  224cdc:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  224ce3:	00 00 
  224ce5:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  224ce9:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  224cf0:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  224cf4:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  224cf8:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  224cff:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
  224d06:	48 89 01             	mov    QWORD PTR [rcx],rax
  224d09:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  224d10:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  224d14:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  224d18:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  224d1c:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  224d23:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  224d2a:	5d                   	pop    rbp
  224d2b:	c3                   	ret    
  224d2c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000224d30 <copy>:
pub fn copy(comptime T: type, dest: []T, source: []const T) void {
  224d30:	55                   	push   rbp
  224d31:	48 89 e5             	mov    rbp,rsp
    assert(dest.len >= source.len);
  224d34:	48 83 ec 30          	sub    rsp,0x30
  224d38:	48 8b 47 08          	mov    rax,QWORD PTR [rdi+0x8]
  224d3c:	48 3b 46 08          	cmp    rax,QWORD PTR [rsi+0x8]
  224d40:	0f 93 c1             	setae  cl
  224d43:	0f b6 d1             	movzx  edx,cl
  224d46:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  224d4a:	89 d7                	mov    edi,edx
  224d4c:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  224d50:	e8 ab 62 fe ff       	call   20b000 <assert>
    for (source) |s, i|
  224d55:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  224d5c:	00 
  224d5d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  224d61:	48 8b 70 08          	mov    rsi,QWORD PTR [rax+0x8]
  224d65:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  224d69:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  224d6d:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  224d71:	48 39 c8             	cmp    rax,rcx
  224d74:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  224d78:	73 30                	jae    224daa <copy+0x7a>
  224d7a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  224d7e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  224d81:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  224d85:	40 8a 34 11          	mov    sil,BYTE PTR [rcx+rdx*1]
  224d89:	40 88 75 ff          	mov    BYTE PTR [rbp-0x1],sil
        dest[i] = s;
  224d8d:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  224d91:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  224d95:	4c 8b 07             	mov    r8,QWORD PTR [rdi]
  224d98:	40 8a 75 ff          	mov    sil,BYTE PTR [rbp-0x1]
  224d9c:	41 88 34 08          	mov    BYTE PTR [r8+rcx*1],sil
    for (source) |s, i|
  224da0:	48 83 c2 01          	add    rdx,0x1
  224da4:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  224da8:	eb bf                	jmp    224d69 <copy+0x39>
pub fn copy(comptime T: type, dest: []T, source: []const T) void {
  224daa:	48 83 c4 30          	add    rsp,0x30
  224dae:	5d                   	pop    rbp
  224daf:	c3                   	ret    

0000000000224db0 <format.83>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  224db0:	55                   	push   rbp
  224db1:	48 89 e5             	mov    rbp,rsp
  224db4:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  224dbb:	48 8b 45 18          	mov    rax,QWORD PTR [rbp+0x18]
  224dbf:	4c 8b 55 10          	mov    r10,QWORD PTR [rbp+0x10]
  224dc3:	4c 8d 1d 2e e9 01 00 	lea    r11,[rip+0x1e92e]        # 2436f8 <__unnamed_158>
  224dca:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  224dce:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  224dd2:	4c 89 45 d0          	mov    QWORD PTR [rbp-0x30],r8
  224dd6:	4c 89 4d c8          	mov    QWORD PTR [rbp-0x38],r9
                        try output(context, fmt[start_index..i]);
  224dda:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  224dde:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  224de2:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
  224de6:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  224dea:	4c 89 da             	mov    rdx,r11
  224ded:	4c 8b 45 b8          	mov    r8,QWORD PTR [rbp-0x48]
  224df1:	4c 89 55 b0          	mov    QWORD PTR [rbp-0x50],r10
  224df5:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  224df9:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  224dfd:	41 ff d0             	call   r8
  224e00:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  224e04:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  224e09:	74 1e                	je     224e29 <format.83+0x79>
  224e0b:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  224e0f:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224e13:	66 89 45 9e          	mov    WORD PTR [rbp-0x62],ax
  224e17:	e8 74 6e fe ff       	call   20bc90 <__zig_return_error>
  224e1c:	66 8b 45 9e          	mov    ax,WORD PTR [rbp-0x62]
  224e20:	48 81 c4 80 00 00 00 	add    rsp,0x80
  224e27:	5d                   	pop    rbp
  224e28:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  224e29:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  224e2d:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  224e31:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224e35:	48 8b 75 a8          	mov    rsi,QWORD PTR [rbp-0x58]
  224e39:	e8 72 02 00 00       	call   2250b0 <formatType.84>
  224e3e:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  224e42:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  224e47:	74 1e                	je     224e67 <format.83+0xb7>
  224e49:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  224e4d:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224e51:	66 89 45 9c          	mov    WORD PTR [rbp-0x64],ax
  224e55:	e8 36 6e fe ff       	call   20bc90 <__zig_return_error>
  224e5a:	66 8b 45 9c          	mov    ax,WORD PTR [rbp-0x64]
  224e5e:	48 81 c4 80 00 00 00 	add    rsp,0x80
  224e65:	5d                   	pop    rbp
  224e66:	c3                   	ret    
  224e67:	48 8d 15 a2 e8 01 00 	lea    rdx,[rip+0x1e8a2]        # 243710 <__unnamed_159>
                        try output(context, fmt[start_index..i]);
  224e6e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  224e72:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  224e76:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224e7a:	ff d0                	call   rax
  224e7c:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  224e80:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  224e85:	74 1e                	je     224ea5 <format.83+0xf5>
  224e87:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  224e8b:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224e8f:	66 89 45 9a          	mov    WORD PTR [rbp-0x66],ax
  224e93:	e8 f8 6d fe ff       	call   20bc90 <__zig_return_error>
  224e98:	66 8b 45 9a          	mov    ax,WORD PTR [rbp-0x66]
  224e9c:	48 81 c4 80 00 00 00 	add    rsp,0x80
  224ea3:	5d                   	pop    rbp
  224ea4:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  224ea5:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  224ea9:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  224ead:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  224eb1:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224eb5:	e8 56 02 00 00       	call   225110 <formatType.85>
  224eba:	66 89 45 f8          	mov    WORD PTR [rbp-0x8],ax
  224ebe:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  224ec3:	74 1e                	je     224ee3 <format.83+0x133>
  224ec5:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  224ec9:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224ecd:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  224ed1:	e8 ba 6d fe ff       	call   20bc90 <__zig_return_error>
  224ed6:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  224eda:	48 81 c4 80 00 00 00 	add    rsp,0x80
  224ee1:	5d                   	pop    rbp
  224ee2:	c3                   	ret    
  224ee3:	48 8d 15 3e e8 01 00 	lea    rdx,[rip+0x1e83e]        # 243728 <__unnamed_160>
                        try output(context, fmt[start_index..i]);
  224eea:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  224eee:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  224ef2:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224ef6:	ff d0                	call   rax
  224ef8:	66 89 45 f6          	mov    WORD PTR [rbp-0xa],ax
  224efc:	66 83 7d f6 00       	cmp    WORD PTR [rbp-0xa],0x0
  224f01:	74 1e                	je     224f21 <format.83+0x171>
  224f03:	66 8b 45 f6          	mov    ax,WORD PTR [rbp-0xa]
  224f07:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224f0b:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  224f0f:	e8 7c 6d fe ff       	call   20bc90 <__zig_return_error>
  224f14:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  224f18:	48 81 c4 80 00 00 00 	add    rsp,0x80
  224f1f:	5d                   	pop    rbp
  224f20:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  224f21:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  224f25:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  224f29:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  224f2d:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224f31:	e8 da 01 00 00       	call   225110 <formatType.85>
  224f36:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
  224f3a:	66 83 7d f4 00       	cmp    WORD PTR [rbp-0xc],0x0
  224f3f:	74 1e                	je     224f5f <format.83+0x1af>
  224f41:	66 8b 45 f4          	mov    ax,WORD PTR [rbp-0xc]
  224f45:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224f49:	66 89 45 94          	mov    WORD PTR [rbp-0x6c],ax
  224f4d:	e8 3e 6d fe ff       	call   20bc90 <__zig_return_error>
  224f52:	66 8b 45 94          	mov    ax,WORD PTR [rbp-0x6c]
  224f56:	48 81 c4 80 00 00 00 	add    rsp,0x80
  224f5d:	5d                   	pop    rbp
  224f5e:	c3                   	ret    
  224f5f:	48 8d 15 da e7 01 00 	lea    rdx,[rip+0x1e7da]        # 243740 <__unnamed_161>
                        try output(context, fmt[start_index..i]);
  224f66:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  224f6a:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  224f6e:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224f72:	ff d0                	call   rax
  224f74:	66 89 45 f2          	mov    WORD PTR [rbp-0xe],ax
  224f78:	66 83 7d f2 00       	cmp    WORD PTR [rbp-0xe],0x0
  224f7d:	74 1e                	je     224f9d <format.83+0x1ed>
  224f7f:	66 8b 45 f2          	mov    ax,WORD PTR [rbp-0xe]
  224f83:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224f87:	66 89 45 92          	mov    WORD PTR [rbp-0x6e],ax
  224f8b:	e8 00 6d fe ff       	call   20bc90 <__zig_return_error>
  224f90:	66 8b 45 92          	mov    ax,WORD PTR [rbp-0x6e]
  224f94:	48 81 c4 80 00 00 00 	add    rsp,0x80
  224f9b:	5d                   	pop    rbp
  224f9c:	c3                   	ret    
                    try formatType(args[next_arg], fmt[s..i], context, Errors, output);
  224f9d:	48 8b 75 10          	mov    rsi,QWORD PTR [rbp+0x10]
  224fa1:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  224fa5:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  224fa9:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224fad:	e8 ae 01 00 00       	call   225160 <formatType.86>
  224fb2:	66 89 45 f0          	mov    WORD PTR [rbp-0x10],ax
  224fb6:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  224fbb:	74 1e                	je     224fdb <format.83+0x22b>
  224fbd:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  224fc1:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224fc5:	66 89 45 90          	mov    WORD PTR [rbp-0x70],ax
  224fc9:	e8 c2 6c fe ff       	call   20bc90 <__zig_return_error>
  224fce:	66 8b 45 90          	mov    ax,WORD PTR [rbp-0x70]
  224fd2:	48 81 c4 80 00 00 00 	add    rsp,0x80
  224fd9:	5d                   	pop    rbp
  224fda:	c3                   	ret    
  224fdb:	48 8d 15 76 e7 01 00 	lea    rdx,[rip+0x1e776]        # 243758 <__unnamed_162>
                        try output(context, fmt[start_index..i]);
  224fe2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  224fe6:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  224fea:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224fee:	ff d0                	call   rax
  224ff0:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  224ff4:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  224ff9:	74 1e                	je     225019 <format.83+0x269>
  224ffb:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  224fff:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  225003:	66 89 45 8e          	mov    WORD PTR [rbp-0x72],ax
  225007:	e8 84 6c fe ff       	call   20bc90 <__zig_return_error>
  22500c:	66 8b 45 8e          	mov    ax,WORD PTR [rbp-0x72]
  225010:	48 81 c4 80 00 00 00 	add    rsp,0x80
  225017:	5d                   	pop    rbp
  225018:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  225019:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  22501d:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  225021:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  225025:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  225029:	e8 82 00 00 00       	call   2250b0 <formatType.84>
  22502e:	66 89 45 ec          	mov    WORD PTR [rbp-0x14],ax
  225032:	66 83 7d ec 00       	cmp    WORD PTR [rbp-0x14],0x0
  225037:	74 1e                	je     225057 <format.83+0x2a7>
  225039:	66 8b 45 ec          	mov    ax,WORD PTR [rbp-0x14]
  22503d:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  225041:	66 89 45 8c          	mov    WORD PTR [rbp-0x74],ax
  225045:	e8 46 6c fe ff       	call   20bc90 <__zig_return_error>
  22504a:	66 8b 45 8c          	mov    ax,WORD PTR [rbp-0x74]
  22504e:	48 81 c4 80 00 00 00 	add    rsp,0x80
  225055:	5d                   	pop    rbp
  225056:	c3                   	ret    
  225057:	48 8d 15 12 e7 01 00 	lea    rdx,[rip+0x1e712]        # 243770 <__unnamed_163>
        try output(context, fmt[start_index..]);
  22505e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  225062:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  225066:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  22506a:	ff d0                	call   rax
  22506c:	66 89 45 ea          	mov    WORD PTR [rbp-0x16],ax
  225070:	66 83 7d ea 00       	cmp    WORD PTR [rbp-0x16],0x0
  225075:	74 1e                	je     225095 <format.83+0x2e5>
  225077:	66 8b 45 ea          	mov    ax,WORD PTR [rbp-0x16]
  22507b:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  22507f:	66 89 45 8a          	mov    WORD PTR [rbp-0x76],ax
  225083:	e8 08 6c fe ff       	call   20bc90 <__zig_return_error>
  225088:	66 8b 45 8a          	mov    ax,WORD PTR [rbp-0x76]
  22508c:	48 81 c4 80 00 00 00 	add    rsp,0x80
  225093:	5d                   	pop    rbp
  225094:	c3                   	ret    
  225095:	31 c0                	xor    eax,eax
  225097:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  22509a:	66 89 c8             	mov    ax,cx
  22509d:	48 81 c4 80 00 00 00 	add    rsp,0x80
  2250a4:	5d                   	pop    rbp
  2250a5:	c3                   	ret    
  2250a6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  2250ad:	00 00 00 

00000000002250b0 <formatType.84>:
pub fn formatType(
  2250b0:	55                   	push   rbp
  2250b1:	48 89 e5             	mov    rbp,rsp
  2250b4:	48 83 ec 30          	sub    rsp,0x30
  2250b8:	48 8d 45 e0          	lea    rax,[rbp-0x20]
  2250bc:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  2250c0:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
                const casted_value = ([]const u8)(value);
  2250c4:	48 8b 0e             	mov    rcx,QWORD PTR [rsi]
  2250c7:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  2250cb:	48 8b 4e 08          	mov    rcx,QWORD PTR [rsi+0x8]
  2250cf:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
                return output(context, casted_value);
  2250d3:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  2250d7:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2250db:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  2250df:	48 89 c2             	mov    rdx,rax
  2250e2:	ff d1                	call   rcx
  2250e4:	66 83 f8 00          	cmp    ax,0x0
  2250e8:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  2250ec:	74 0b                	je     2250f9 <formatType.84+0x49>
  2250ee:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  2250f2:	e8 99 6b fe ff       	call   20bc90 <__zig_return_error>
  2250f7:	eb 02                	jmp    2250fb <formatType.84+0x4b>
  2250f9:	eb 00                	jmp    2250fb <formatType.84+0x4b>
  2250fb:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  2250ff:	48 83 c4 30          	add    rsp,0x30
  225103:	5d                   	pop    rbp
  225104:	c3                   	ret    
  225105:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22510c:	00 00 00 00 

0000000000225110 <formatType.85>:
pub fn formatType(
  225110:	55                   	push   rbp
  225111:	48 89 e5             	mov    rbp,rsp
  225114:	48 83 ec 30          	sub    rsp,0x30
  225118:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22511c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  225120:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return formatValue(value, fmt, context, Errors, output);
  225124:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  225128:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  22512c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  225130:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  225134:	e8 47 34 00 00       	call   228580 <formatValue.106>
  225139:	66 83 f8 00          	cmp    ax,0x0
  22513d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  225141:	74 0b                	je     22514e <formatType.85+0x3e>
  225143:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  225147:	e8 44 6b fe ff       	call   20bc90 <__zig_return_error>
  22514c:	eb 02                	jmp    225150 <formatType.85+0x40>
  22514e:	eb 00                	jmp    225150 <formatType.85+0x40>
  225150:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  225154:	48 83 c4 30          	add    rsp,0x30
  225158:	5d                   	pop    rbp
  225159:	c3                   	ret    
  22515a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000225160 <formatType.86>:
pub fn formatType(
  225160:	55                   	push   rbp
  225161:	48 89 e5             	mov    rbp,rsp
  225164:	48 83 ec 30          	sub    rsp,0x30
  225168:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22516c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  225170:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return formatValue(value, fmt, context, Errors, output);
  225174:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  225178:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  22517c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  225180:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  225184:	e8 47 34 00 00       	call   2285d0 <formatValue.107>
  225189:	66 83 f8 00          	cmp    ax,0x0
  22518d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  225191:	74 0b                	je     22519e <formatType.86+0x3e>
  225193:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  225197:	e8 f4 6a fe ff       	call   20bc90 <__zig_return_error>
  22519c:	eb 02                	jmp    2251a0 <formatType.86+0x40>
  22519e:	eb 00                	jmp    2251a0 <formatType.86+0x40>
  2251a0:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  2251a4:	48 83 c4 30          	add    rsp,0x30
  2251a8:	5d                   	pop    rbp
  2251a9:	c3                   	ret    
  2251aa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000002251b0 <format.87>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  2251b0:	55                   	push   rbp
  2251b1:	48 89 e5             	mov    rbp,rsp
  2251b4:	48 83 ec 70          	sub    rsp,0x70
  2251b8:	48 8b 45 18          	mov    rax,QWORD PTR [rbp+0x18]
  2251bc:	4c 8b 55 10          	mov    r10,QWORD PTR [rbp+0x10]
  2251c0:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  2251c4:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  2251c8:	4c 89 45 d0          	mov    QWORD PTR [rbp-0x30],r8
  2251cc:	4c 89 4d c8          	mov    QWORD PTR [rbp-0x38],r9
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  2251d0:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  2251d4:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  2251d8:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
  2251dc:	48 89 75 b8          	mov    QWORD PTR [rbp-0x48],rsi
  2251e0:	48 89 ce             	mov    rsi,rcx
  2251e3:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  2251e7:	4c 89 55 b0          	mov    QWORD PTR [rbp-0x50],r10
  2251eb:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  2251ef:	e8 4c 02 00 00       	call   225440 <formatType.88>
  2251f4:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  2251f8:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  2251fd:	74 1b                	je     22521a <format.87+0x6a>
  2251ff:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  225203:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  225207:	66 89 45 a6          	mov    WORD PTR [rbp-0x5a],ax
  22520b:	e8 80 6a fe ff       	call   20bc90 <__zig_return_error>
  225210:	66 8b 45 a6          	mov    ax,WORD PTR [rbp-0x5a]
  225214:	48 83 c4 70          	add    rsp,0x70
  225218:	5d                   	pop    rbp
  225219:	c3                   	ret    
  22521a:	48 8d 15 67 e5 01 00 	lea    rdx,[rip+0x1e567]        # 243788 <__unnamed_164>
                        try output(context, fmt[start_index..i]);
  225221:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  225225:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  225229:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  22522d:	ff d0                	call   rax
  22522f:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  225233:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  225238:	74 1b                	je     225255 <format.87+0xa5>
  22523a:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  22523e:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  225242:	66 89 45 a4          	mov    WORD PTR [rbp-0x5c],ax
  225246:	e8 45 6a fe ff       	call   20bc90 <__zig_return_error>
  22524b:	66 8b 45 a4          	mov    ax,WORD PTR [rbp-0x5c]
  22524f:	48 83 c4 70          	add    rsp,0x70
  225253:	5d                   	pop    rbp
  225254:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  225255:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  225259:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  22525d:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  225261:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  225265:	e8 36 02 00 00       	call   2254a0 <formatType.89>
  22526a:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  22526e:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  225273:	74 1b                	je     225290 <format.87+0xe0>
  225275:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  225279:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  22527d:	66 89 45 a2          	mov    WORD PTR [rbp-0x5e],ax
  225281:	e8 0a 6a fe ff       	call   20bc90 <__zig_return_error>
  225286:	66 8b 45 a2          	mov    ax,WORD PTR [rbp-0x5e]
  22528a:	48 83 c4 70          	add    rsp,0x70
  22528e:	5d                   	pop    rbp
  22528f:	c3                   	ret    
  225290:	48 8d 15 09 e5 01 00 	lea    rdx,[rip+0x1e509]        # 2437a0 <__unnamed_165>
                        try output(context, fmt[start_index..i]);
  225297:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  22529b:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  22529f:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  2252a3:	ff d0                	call   rax
  2252a5:	66 89 45 f8          	mov    WORD PTR [rbp-0x8],ax
  2252a9:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  2252ae:	74 1b                	je     2252cb <format.87+0x11b>
  2252b0:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  2252b4:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  2252b8:	66 89 45 a0          	mov    WORD PTR [rbp-0x60],ax
  2252bc:	e8 cf 69 fe ff       	call   20bc90 <__zig_return_error>
  2252c1:	66 8b 45 a0          	mov    ax,WORD PTR [rbp-0x60]
  2252c5:	48 83 c4 70          	add    rsp,0x70
  2252c9:	5d                   	pop    rbp
  2252ca:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  2252cb:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  2252cf:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  2252d3:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  2252d7:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  2252db:	e8 c0 01 00 00       	call   2254a0 <formatType.89>
  2252e0:	66 89 45 f6          	mov    WORD PTR [rbp-0xa],ax
  2252e4:	66 83 7d f6 00       	cmp    WORD PTR [rbp-0xa],0x0
  2252e9:	74 1b                	je     225306 <format.87+0x156>
  2252eb:	66 8b 45 f6          	mov    ax,WORD PTR [rbp-0xa]
  2252ef:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  2252f3:	66 89 45 9e          	mov    WORD PTR [rbp-0x62],ax
  2252f7:	e8 94 69 fe ff       	call   20bc90 <__zig_return_error>
  2252fc:	66 8b 45 9e          	mov    ax,WORD PTR [rbp-0x62]
  225300:	48 83 c4 70          	add    rsp,0x70
  225304:	5d                   	pop    rbp
  225305:	c3                   	ret    
  225306:	48 8d 15 ab e4 01 00 	lea    rdx,[rip+0x1e4ab]        # 2437b8 <__unnamed_166>
                        try output(context, fmt[start_index..i]);
  22530d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  225311:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  225315:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  225319:	ff d0                	call   rax
  22531b:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
  22531f:	66 83 7d f4 00       	cmp    WORD PTR [rbp-0xc],0x0
  225324:	74 1b                	je     225341 <format.87+0x191>
  225326:	66 8b 45 f4          	mov    ax,WORD PTR [rbp-0xc]
  22532a:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  22532e:	66 89 45 9c          	mov    WORD PTR [rbp-0x64],ax
  225332:	e8 59 69 fe ff       	call   20bc90 <__zig_return_error>
  225337:	66 8b 45 9c          	mov    ax,WORD PTR [rbp-0x64]
  22533b:	48 83 c4 70          	add    rsp,0x70
  22533f:	5d                   	pop    rbp
  225340:	c3                   	ret    
                    try formatType(args[next_arg], fmt[s..i], context, Errors, output);
  225341:	48 8b 75 10          	mov    rsi,QWORD PTR [rbp+0x10]
  225345:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  225349:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  22534d:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  225351:	e8 9a 01 00 00       	call   2254f0 <formatType.90>
  225356:	66 89 45 f2          	mov    WORD PTR [rbp-0xe],ax
  22535a:	66 83 7d f2 00       	cmp    WORD PTR [rbp-0xe],0x0
  22535f:	74 1b                	je     22537c <format.87+0x1cc>
  225361:	66 8b 45 f2          	mov    ax,WORD PTR [rbp-0xe]
  225365:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  225369:	66 89 45 9a          	mov    WORD PTR [rbp-0x66],ax
  22536d:	e8 1e 69 fe ff       	call   20bc90 <__zig_return_error>
  225372:	66 8b 45 9a          	mov    ax,WORD PTR [rbp-0x66]
  225376:	48 83 c4 70          	add    rsp,0x70
  22537a:	5d                   	pop    rbp
  22537b:	c3                   	ret    
  22537c:	48 8d 15 4d e4 01 00 	lea    rdx,[rip+0x1e44d]        # 2437d0 <__unnamed_167>
                        try output(context, fmt[start_index..i]);
  225383:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  225387:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  22538b:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  22538f:	ff d0                	call   rax
  225391:	66 89 45 f0          	mov    WORD PTR [rbp-0x10],ax
  225395:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  22539a:	74 1b                	je     2253b7 <format.87+0x207>
  22539c:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  2253a0:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  2253a4:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  2253a8:	e8 e3 68 fe ff       	call   20bc90 <__zig_return_error>
  2253ad:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  2253b1:	48 83 c4 70          	add    rsp,0x70
  2253b5:	5d                   	pop    rbp
  2253b6:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  2253b7:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  2253bb:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  2253bf:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  2253c3:	48 8b 75 a8          	mov    rsi,QWORD PTR [rbp-0x58]
  2253c7:	e8 74 00 00 00       	call   225440 <formatType.88>
  2253cc:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  2253d0:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  2253d5:	74 1b                	je     2253f2 <format.87+0x242>
  2253d7:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  2253db:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  2253df:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  2253e3:	e8 a8 68 fe ff       	call   20bc90 <__zig_return_error>
  2253e8:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  2253ec:	48 83 c4 70          	add    rsp,0x70
  2253f0:	5d                   	pop    rbp
  2253f1:	c3                   	ret    
  2253f2:	48 8d 15 ef e3 01 00 	lea    rdx,[rip+0x1e3ef]        # 2437e8 <__unnamed_168>
        try output(context, fmt[start_index..]);
  2253f9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2253fd:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  225401:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  225405:	ff d0                	call   rax
  225407:	66 89 45 ec          	mov    WORD PTR [rbp-0x14],ax
  22540b:	66 83 7d ec 00       	cmp    WORD PTR [rbp-0x14],0x0
  225410:	74 1b                	je     22542d <format.87+0x27d>
  225412:	66 8b 45 ec          	mov    ax,WORD PTR [rbp-0x14]
  225416:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  22541a:	66 89 45 94          	mov    WORD PTR [rbp-0x6c],ax
  22541e:	e8 6d 68 fe ff       	call   20bc90 <__zig_return_error>
  225423:	66 8b 45 94          	mov    ax,WORD PTR [rbp-0x6c]
  225427:	48 83 c4 70          	add    rsp,0x70
  22542b:	5d                   	pop    rbp
  22542c:	c3                   	ret    
  22542d:	31 c0                	xor    eax,eax
  22542f:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  225432:	66 89 c8             	mov    ax,cx
  225435:	48 83 c4 70          	add    rsp,0x70
  225439:	5d                   	pop    rbp
  22543a:	c3                   	ret    
  22543b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000225440 <formatType.88>:
pub fn formatType(
  225440:	55                   	push   rbp
  225441:	48 89 e5             	mov    rbp,rsp
  225444:	48 83 ec 30          	sub    rsp,0x30
  225448:	48 8d 45 e0          	lea    rax,[rbp-0x20]
  22544c:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  225450:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
                const casted_value = ([]const u8)(value);
  225454:	48 8b 0e             	mov    rcx,QWORD PTR [rsi]
  225457:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  22545b:	48 8b 4e 08          	mov    rcx,QWORD PTR [rsi+0x8]
  22545f:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
                return output(context, casted_value);
  225463:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  225467:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  22546b:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  22546f:	48 89 c2             	mov    rdx,rax
  225472:	ff d1                	call   rcx
  225474:	66 83 f8 00          	cmp    ax,0x0
  225478:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  22547c:	74 0b                	je     225489 <formatType.88+0x49>
  22547e:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  225482:	e8 09 68 fe ff       	call   20bc90 <__zig_return_error>
  225487:	eb 02                	jmp    22548b <formatType.88+0x4b>
  225489:	eb 00                	jmp    22548b <formatType.88+0x4b>
  22548b:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  22548f:	48 83 c4 30          	add    rsp,0x30
  225493:	5d                   	pop    rbp
  225494:	c3                   	ret    
  225495:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22549c:	00 00 00 00 

00000000002254a0 <formatType.89>:
pub fn formatType(
  2254a0:	55                   	push   rbp
  2254a1:	48 89 e5             	mov    rbp,rsp
  2254a4:	48 83 ec 30          	sub    rsp,0x30
  2254a8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2254ac:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  2254b0:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return formatValue(value, fmt, context, Errors, output);
  2254b4:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2254b8:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  2254bc:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2254c0:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2254c4:	e8 57 31 00 00       	call   228620 <formatValue.108>
  2254c9:	66 83 f8 00          	cmp    ax,0x0
  2254cd:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  2254d1:	74 0b                	je     2254de <formatType.89+0x3e>
  2254d3:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2254d7:	e8 b4 67 fe ff       	call   20bc90 <__zig_return_error>
  2254dc:	eb 02                	jmp    2254e0 <formatType.89+0x40>
  2254de:	eb 00                	jmp    2254e0 <formatType.89+0x40>
  2254e0:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  2254e4:	48 83 c4 30          	add    rsp,0x30
  2254e8:	5d                   	pop    rbp
  2254e9:	c3                   	ret    
  2254ea:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000002254f0 <formatType.90>:
pub fn formatType(
  2254f0:	55                   	push   rbp
  2254f1:	48 89 e5             	mov    rbp,rsp
  2254f4:	48 83 ec 30          	sub    rsp,0x30
  2254f8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2254fc:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  225500:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return formatValue(value, fmt, context, Errors, output);
  225504:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  225508:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  22550c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  225510:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  225514:	e8 57 31 00 00       	call   228670 <formatValue.109>
  225519:	66 83 f8 00          	cmp    ax,0x0
  22551d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  225521:	74 0b                	je     22552e <formatType.90+0x3e>
  225523:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  225527:	e8 64 67 fe ff       	call   20bc90 <__zig_return_error>
  22552c:	eb 02                	jmp    225530 <formatType.90+0x40>
  22552e:	eb 00                	jmp    225530 <formatType.90+0x40>
  225530:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  225534:	48 83 c4 30          	add    rsp,0x30
  225538:	5d                   	pop    rbp
  225539:	c3                   	ret    
  22553a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000225540 <format.91>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  225540:	55                   	push   rbp
  225541:	48 89 e5             	mov    rbp,rsp
  225544:	48 83 ec 50          	sub    rsp,0x50
  225548:	48 8d 05 b1 e2 01 00 	lea    rax,[rip+0x1e2b1]        # 243800 <__unnamed_169>
  22554f:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
  225553:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  225557:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
                        try output(context, fmt[start_index..i]);
  22555b:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  22555f:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  225563:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
  225567:	48 89 c2             	mov    rdx,rax
  22556a:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
  22556e:	ff d1                	call   rcx
  225570:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  225574:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  225579:	74 1b                	je     225596 <format.91+0x56>
  22557b:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  22557f:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  225583:	66 89 45 c6          	mov    WORD PTR [rbp-0x3a],ax
  225587:	e8 04 67 fe ff       	call   20bc90 <__zig_return_error>
  22558c:	66 8b 45 c6          	mov    ax,WORD PTR [rbp-0x3a]
  225590:	48 83 c4 50          	add    rsp,0x50
  225594:	5d                   	pop    rbp
  225595:	c3                   	ret    
                    try formatType(args[next_arg], fmt[s..i], context, Errors, output);
  225596:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  22559a:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  22559e:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  2255a2:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  2255a6:	e8 e5 00 00 00       	call   225690 <formatType.92>
  2255ab:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  2255af:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  2255b4:	74 1b                	je     2255d1 <format.91+0x91>
  2255b6:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  2255ba:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  2255be:	66 89 45 c4          	mov    WORD PTR [rbp-0x3c],ax
  2255c2:	e8 c9 66 fe ff       	call   20bc90 <__zig_return_error>
  2255c7:	66 8b 45 c4          	mov    ax,WORD PTR [rbp-0x3c]
  2255cb:	48 83 c4 50          	add    rsp,0x50
  2255cf:	5d                   	pop    rbp
  2255d0:	c3                   	ret    
  2255d1:	48 8d 15 40 e2 01 00 	lea    rdx,[rip+0x1e240]        # 243818 <__unnamed_170>
                        try output(context, fmt[start_index..i]);
  2255d8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2255dc:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  2255e0:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  2255e4:	ff d0                	call   rax
  2255e6:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  2255ea:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  2255ef:	74 1b                	je     22560c <format.91+0xcc>
  2255f1:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  2255f5:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  2255f9:	66 89 45 c2          	mov    WORD PTR [rbp-0x3e],ax
  2255fd:	e8 8e 66 fe ff       	call   20bc90 <__zig_return_error>
  225602:	66 8b 45 c2          	mov    ax,WORD PTR [rbp-0x3e]
  225606:	48 83 c4 50          	add    rsp,0x50
  22560a:	5d                   	pop    rbp
  22560b:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  22560c:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  225610:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  225614:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  225618:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  22561c:	e8 bf 00 00 00       	call   2256e0 <formatType.93>
  225621:	66 89 45 f8          	mov    WORD PTR [rbp-0x8],ax
  225625:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  22562a:	74 1b                	je     225647 <format.91+0x107>
  22562c:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  225630:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  225634:	66 89 45 c0          	mov    WORD PTR [rbp-0x40],ax
  225638:	e8 53 66 fe ff       	call   20bc90 <__zig_return_error>
  22563d:	66 8b 45 c0          	mov    ax,WORD PTR [rbp-0x40]
  225641:	48 83 c4 50          	add    rsp,0x50
  225645:	5d                   	pop    rbp
  225646:	c3                   	ret    
  225647:	48 8d 15 e2 e1 01 00 	lea    rdx,[rip+0x1e1e2]        # 243830 <__unnamed_171>
        try output(context, fmt[start_index..]);
  22564e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  225652:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  225656:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  22565a:	ff d0                	call   rax
  22565c:	66 89 45 f6          	mov    WORD PTR [rbp-0xa],ax
  225660:	66 83 7d f6 00       	cmp    WORD PTR [rbp-0xa],0x0
  225665:	74 1b                	je     225682 <format.91+0x142>
  225667:	66 8b 45 f6          	mov    ax,WORD PTR [rbp-0xa]
  22566b:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  22566f:	66 89 45 be          	mov    WORD PTR [rbp-0x42],ax
  225673:	e8 18 66 fe ff       	call   20bc90 <__zig_return_error>
  225678:	66 8b 45 be          	mov    ax,WORD PTR [rbp-0x42]
  22567c:	48 83 c4 50          	add    rsp,0x50
  225680:	5d                   	pop    rbp
  225681:	c3                   	ret    
  225682:	31 c0                	xor    eax,eax
  225684:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  225687:	66 89 c8             	mov    ax,cx
  22568a:	48 83 c4 50          	add    rsp,0x50
  22568e:	5d                   	pop    rbp
  22568f:	c3                   	ret    

0000000000225690 <formatType.92>:
pub fn formatType(
  225690:	55                   	push   rbp
  225691:	48 89 e5             	mov    rbp,rsp
  225694:	48 83 ec 30          	sub    rsp,0x30
  225698:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22569c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  2256a0:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return formatValue(value, fmt, context, Errors, output);
  2256a4:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2256a8:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  2256ac:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2256b0:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2256b4:	e8 07 30 00 00       	call   2286c0 <formatValue.110>
  2256b9:	66 83 f8 00          	cmp    ax,0x0
  2256bd:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  2256c1:	74 0b                	je     2256ce <formatType.92+0x3e>
  2256c3:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2256c7:	e8 c4 65 fe ff       	call   20bc90 <__zig_return_error>
  2256cc:	eb 02                	jmp    2256d0 <formatType.92+0x40>
  2256ce:	eb 00                	jmp    2256d0 <formatType.92+0x40>
  2256d0:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  2256d4:	48 83 c4 30          	add    rsp,0x30
  2256d8:	5d                   	pop    rbp
  2256d9:	c3                   	ret    
  2256da:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000002256e0 <formatType.93>:
pub fn formatType(
  2256e0:	55                   	push   rbp
  2256e1:	48 89 e5             	mov    rbp,rsp
  2256e4:	48 83 ec 30          	sub    rsp,0x30
  2256e8:	48 8d 45 e0          	lea    rax,[rbp-0x20]
  2256ec:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  2256f0:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
                const casted_value = ([]const u8)(value);
  2256f4:	48 8b 0e             	mov    rcx,QWORD PTR [rsi]
  2256f7:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  2256fb:	48 8b 4e 08          	mov    rcx,QWORD PTR [rsi+0x8]
  2256ff:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
                return output(context, casted_value);
  225703:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  225707:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  22570b:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  22570f:	48 89 c2             	mov    rdx,rax
  225712:	ff d1                	call   rcx
  225714:	66 83 f8 00          	cmp    ax,0x0
  225718:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  22571c:	74 0b                	je     225729 <formatType.93+0x49>
  22571e:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  225722:	e8 69 65 fe ff       	call   20bc90 <__zig_return_error>
  225727:	eb 02                	jmp    22572b <formatType.93+0x4b>
  225729:	eb 00                	jmp    22572b <formatType.93+0x4b>
  22572b:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  22572f:	48 83 c4 30          	add    rsp,0x30
  225733:	5d                   	pop    rbp
  225734:	c3                   	ret    
  225735:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22573c:	00 00 00 00 

0000000000225740 <format.94>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  225740:	55                   	push   rbp
  225741:	48 89 e5             	mov    rbp,rsp
  225744:	48 83 ec 40          	sub    rsp,0x40
  225748:	48 8d 05 f9 e0 01 00 	lea    rax,[rip+0x1e0f9]        # 243848 <__unnamed_172>
  22574f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  225753:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
                        try output(context, fmt[start_index..i]);
  225757:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  22575b:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  22575f:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  225763:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  225767:	48 89 c2             	mov    rdx,rax
  22576a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  22576e:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  225772:	ff d0                	call   rax
  225774:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  225778:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  22577d:	74 1b                	je     22579a <format.94+0x5a>
  22577f:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  225783:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  225787:	66 89 45 ce          	mov    WORD PTR [rbp-0x32],ax
  22578b:	e8 00 65 fe ff       	call   20bc90 <__zig_return_error>
  225790:	66 8b 45 ce          	mov    ax,WORD PTR [rbp-0x32]
  225794:	48 83 c4 40          	add    rsp,0x40
  225798:	5d                   	pop    rbp
  225799:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  22579a:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  22579e:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2257a2:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2257a6:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  2257aa:	e8 71 00 00 00       	call   225820 <formatType.95>
  2257af:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  2257b3:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  2257b8:	74 1b                	je     2257d5 <format.94+0x95>
  2257ba:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  2257be:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2257c2:	66 89 45 cc          	mov    WORD PTR [rbp-0x34],ax
  2257c6:	e8 c5 64 fe ff       	call   20bc90 <__zig_return_error>
  2257cb:	66 8b 45 cc          	mov    ax,WORD PTR [rbp-0x34]
  2257cf:	48 83 c4 40          	add    rsp,0x40
  2257d3:	5d                   	pop    rbp
  2257d4:	c3                   	ret    
  2257d5:	48 8d 15 84 e0 01 00 	lea    rdx,[rip+0x1e084]        # 243860 <__unnamed_173>
        try output(context, fmt[start_index..]);
  2257dc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2257e0:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  2257e4:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2257e8:	ff d0                	call   rax
  2257ea:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  2257ee:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  2257f3:	74 1b                	je     225810 <format.94+0xd0>
  2257f5:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  2257f9:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2257fd:	66 89 45 ca          	mov    WORD PTR [rbp-0x36],ax
  225801:	e8 8a 64 fe ff       	call   20bc90 <__zig_return_error>
  225806:	66 8b 45 ca          	mov    ax,WORD PTR [rbp-0x36]
  22580a:	48 83 c4 40          	add    rsp,0x40
  22580e:	5d                   	pop    rbp
  22580f:	c3                   	ret    
  225810:	31 c0                	xor    eax,eax
  225812:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  225815:	66 89 c8             	mov    ax,cx
  225818:	48 83 c4 40          	add    rsp,0x40
  22581c:	5d                   	pop    rbp
  22581d:	c3                   	ret    
  22581e:	66 90                	xchg   ax,ax

0000000000225820 <formatType.95>:
pub fn formatType(
  225820:	55                   	push   rbp
  225821:	48 89 e5             	mov    rbp,rsp
  225824:	48 83 ec 30          	sub    rsp,0x30
  225828:	48 8d 45 e0          	lea    rax,[rbp-0x20]
  22582c:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  225830:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
                const casted_value = ([]const u8)(value);
  225834:	48 8b 0e             	mov    rcx,QWORD PTR [rsi]
  225837:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  22583b:	48 8b 4e 08          	mov    rcx,QWORD PTR [rsi+0x8]
  22583f:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
                return output(context, casted_value);
  225843:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  225847:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  22584b:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  22584f:	48 89 c2             	mov    rdx,rax
  225852:	ff d1                	call   rcx
  225854:	66 83 f8 00          	cmp    ax,0x0
  225858:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  22585c:	74 0b                	je     225869 <formatType.95+0x49>
  22585e:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  225862:	e8 29 64 fe ff       	call   20bc90 <__zig_return_error>
  225867:	eb 02                	jmp    22586b <formatType.95+0x4b>
  225869:	eb 00                	jmp    22586b <formatType.95+0x4b>
  22586b:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  22586f:	48 83 c4 30          	add    rsp,0x30
  225873:	5d                   	pop    rbp
  225874:	c3                   	ret    
  225875:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22587c:	00 00 00 00 

0000000000225880 <lookup>:
const elf = std.elf;
const linux = std.os.linux;
const cstr = std.cstr;
const mem = std.mem;

pub fn lookup(vername: []const u8, name: []const u8) usize {
  225880:	55                   	push   rbp
  225881:	48 89 e5             	mov    rbp,rsp
    const vdso_addr = std.os.linux_aux_raw[std.elf.AT_SYSINFO_EHDR];
  225884:	48 81 ec 10 02 00 00 	sub    rsp,0x210
  22588b:	48 8b 05 de e8 01 00 	mov    rax,QWORD PTR [rip+0x1e8de]        # 244170 <linux_aux_raw+0x108>
  225892:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    if (vdso_addr == 0) return 0;
  225896:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
  22589b:	48 89 b5 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rsi
  2258a2:	48 89 bd 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdi
  2258a9:	75 0b                	jne    2258b6 <lookup+0x36>
  2258ab:	31 c0                	xor    eax,eax
  2258ad:	48 81 c4 10 02 00 00 	add    rsp,0x210
  2258b4:	5d                   	pop    rbp
  2258b5:	c3                   	ret    

    const eh = @intToPtr(*elf.Ehdr, vdso_addr);
  2258b6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2258ba:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    var ph_addr: usize = vdso_addr + eh.e_phoff;
  2258be:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2258c2:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  2258c6:	48 03 41 20          	add    rax,QWORD PTR [rcx+0x20]
  2258ca:	0f 92 c2             	setb   dl
  2258cd:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  2258d4:	88 95 2f ff ff ff    	mov    BYTE PTR [rbp-0xd1],dl
  2258da:	0f 82 30 04 00 00    	jb     225d10 <lookup+0x490>
  2258e0:	e9 3b 04 00 00       	jmp    225d20 <lookup+0x4a0>

    var maybe_dynv: ?[*]usize = null;
    var base: usize = @maxValue(usize);
    {
        var i: usize = 0;
        while (i < eh.e_phnum) : ({
  2258e5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  2258e9:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  2258ed:	0f b7 51 38          	movzx  edx,WORD PTR [rcx+0x38]
  2258f1:	89 d1                	mov    ecx,edx
  2258f3:	48 39 c8             	cmp    rax,rcx
  2258f6:	0f 83 a9 00 00 00    	jae    2259a5 <lookup+0x125>
            i += 1;
            ph_addr += eh.e_phentsize;
        }) {
            const this_ph = @intToPtr(*elf.Phdr, ph_addr);
  2258fc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  225900:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
            switch (this_ph.p_type) {
  225904:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  225908:	8b 08                	mov    ecx,DWORD PTR [rax]
  22590a:	89 ca                	mov    edx,ecx
  22590c:	83 ea 01             	sub    edx,0x1
  22590f:	89 8d 28 ff ff ff    	mov    DWORD PTR [rbp-0xd8],ecx
  225915:	89 95 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],edx
  22591b:	74 17                	je     225934 <lookup+0xb4>
  22591d:	eb 00                	jmp    22591f <lookup+0x9f>
  22591f:	8b 85 28 ff ff ff    	mov    eax,DWORD PTR [rbp-0xd8]
  225925:	83 e8 02             	sub    eax,0x2
  225928:	89 85 20 ff ff ff    	mov    DWORD PTR [rbp-0xe0],eax
  22592e:	74 2b                	je     22595b <lookup+0xdb>
  225930:	eb 00                	jmp    225932 <lookup+0xb2>
  225932:	eb 4e                	jmp    225982 <lookup+0x102>
                elf.PT_LOAD => base = vdso_addr + this_ph.p_offset - this_ph.p_vaddr,
  225934:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  225938:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  22593c:	48 03 41 08          	add    rax,QWORD PTR [rcx+0x8]
  225940:	0f 92 c2             	setb   dl
  225943:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  22594a:	88 95 17 ff ff ff    	mov    BYTE PTR [rbp-0xe9],dl
  225950:	0f 82 fa 03 00 00    	jb     225d50 <lookup+0x4d0>
  225956:	e9 05 04 00 00       	jmp    225d60 <lookup+0x4e0>
                elf.PT_DYNAMIC => maybe_dynv = @intToPtr([*]usize, vdso_addr + this_ph.p_offset),
  22595b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22595f:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  225963:	48 03 41 08          	add    rax,QWORD PTR [rcx+0x8]
  225967:	0f 92 c2             	setb   dl
  22596a:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
  225971:	88 95 07 ff ff ff    	mov    BYTE PTR [rbp-0xf9],dl
  225977:	0f 82 26 04 00 00    	jb     225da3 <lookup+0x523>
  22597d:	e9 31 04 00 00       	jmp    225db3 <lookup+0x533>
            i += 1;
  225982:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  225986:	48 83 c0 01          	add    rax,0x1
  22598a:	0f 92 c1             	setb   cl
  22598d:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  225994:	88 8d f7 fe ff ff    	mov    BYTE PTR [rbp-0x109],cl
  22599a:	0f 82 23 04 00 00    	jb     225dc3 <lookup+0x543>
  2259a0:	e9 2e 04 00 00       	jmp    225dd3 <lookup+0x553>
                else => {},
            }
        }
    }
    const dynv = maybe_dynv orelse return 0;
  2259a5:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
  2259aa:	75 0b                	jne    2259b7 <lookup+0x137>
  2259ac:	31 c0                	xor    eax,eax
  2259ae:	48 81 c4 10 02 00 00 	add    rsp,0x210
  2259b5:	5d                   	pop    rbp
  2259b6:	c3                   	ret    
  2259b7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2259bb:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  2259c2:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  2259c9:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
    if (base == @maxValue(usize)) return 0;
  2259cd:	48 83 7d c0 ff       	cmp    QWORD PTR [rbp-0x40],0xffffffffffffffff
  2259d2:	75 0b                	jne    2259df <lookup+0x15f>
  2259d4:	31 c0                	xor    eax,eax
  2259d6:	48 81 c4 10 02 00 00 	add    rsp,0x210
  2259dd:	5d                   	pop    rbp
  2259de:	c3                   	ret    

    var maybe_strings: ?[*]u8 = null;
  2259df:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
  2259e6:	00 
    var maybe_syms: ?[*]elf.Sym = null;
  2259e7:	48 c7 45 98 00 00 00 	mov    QWORD PTR [rbp-0x68],0x0
  2259ee:	00 
    var maybe_hashtab: ?[*]linux.Elf_Symndx = null;
  2259ef:	48 c7 45 90 00 00 00 	mov    QWORD PTR [rbp-0x70],0x0
  2259f6:	00 
    var maybe_versym: ?[*]u16 = null;
  2259f7:	48 c7 45 88 00 00 00 	mov    QWORD PTR [rbp-0x78],0x0
  2259fe:	00 
    var maybe_verdef: ?*elf.Verdef = null;
  2259ff:	48 c7 45 80 00 00 00 	mov    QWORD PTR [rbp-0x80],0x0
  225a06:	00 

    {
        var i: usize = 0;
  225a07:	48 c7 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],0x0
  225a0e:	00 00 00 00 
        while (dynv[i] != 0) : (i += 2) {
  225a12:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  225a19:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  225a1d:	48 83 3c c1 00       	cmp    QWORD PTR [rcx+rax*8],0x0
  225a22:	0f 84 98 00 00 00    	je     225ac0 <lookup+0x240>
            const p = base + dynv[i + 1];
  225a28:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  225a2c:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  225a33:	48 83 c1 01          	add    rcx,0x1
  225a37:	0f 92 c2             	setb   dl
  225a3a:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
  225a41:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
  225a48:	88 95 d7 fe ff ff    	mov    BYTE PTR [rbp-0x129],dl
  225a4e:	0f 82 d1 03 00 00    	jb     225e25 <lookup+0x5a5>
  225a54:	e9 dc 03 00 00       	jmp    225e35 <lookup+0x5b5>
            switch (dynv[i]) {
  225a59:	eb 3f                	jmp    225a9a <lookup+0x21a>
                elf.DT_STRTAB => maybe_strings = @intToPtr([*]u8, p),
  225a5b:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  225a62:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            switch (dynv[i]) {
  225a66:	eb 32                	jmp    225a9a <lookup+0x21a>
                elf.DT_SYMTAB => maybe_syms = @intToPtr([*]elf.Sym, p),
  225a68:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  225a6f:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
            switch (dynv[i]) {
  225a73:	eb 25                	jmp    225a9a <lookup+0x21a>
                elf.DT_HASH => maybe_hashtab = @intToPtr([*]linux.Elf_Symndx, p),
  225a75:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  225a7c:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
            switch (dynv[i]) {
  225a80:	eb 18                	jmp    225a9a <lookup+0x21a>
                elf.DT_VERSYM => maybe_versym = @intToPtr([*]u16, p),
  225a82:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  225a89:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
            switch (dynv[i]) {
  225a8d:	eb 0b                	jmp    225a9a <lookup+0x21a>
                elf.DT_VERDEF => maybe_verdef = @intToPtr(*elf.Verdef, p),
  225a8f:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  225a96:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
        while (dynv[i] != 0) : (i += 2) {
  225a9a:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  225aa1:	48 83 c0 02          	add    rax,0x2
  225aa5:	0f 92 c1             	setb   cl
  225aa8:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
  225aaf:	88 8d c7 fe ff ff    	mov    BYTE PTR [rbp-0x139],cl
  225ab5:	0f 82 5f 04 00 00    	jb     225f1a <lookup+0x69a>
  225abb:	e9 6a 04 00 00       	jmp    225f2a <lookup+0x6aa>
                else => {},
            }
        }
    }

    const strings = maybe_strings orelse return 0;
  225ac0:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
  225ac5:	75 0b                	jne    225ad2 <lookup+0x252>
  225ac7:	31 c0                	xor    eax,eax
  225ac9:	48 81 c4 10 02 00 00 	add    rsp,0x210
  225ad0:	5d                   	pop    rbp
  225ad1:	c3                   	ret    
  225ad2:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  225ad6:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
  225add:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  225ae4:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
    const syms = maybe_syms orelse return 0;
  225aeb:	48 83 7d 98 00       	cmp    QWORD PTR [rbp-0x68],0x0
  225af0:	75 0b                	jne    225afd <lookup+0x27d>
  225af2:	31 c0                	xor    eax,eax
  225af4:	48 81 c4 10 02 00 00 	add    rsp,0x210
  225afb:	5d                   	pop    rbp
  225afc:	c3                   	ret    
  225afd:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  225b01:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  225b08:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  225b0f:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
    const hashtab = maybe_hashtab orelse return 0;
  225b16:	48 83 7d 90 00       	cmp    QWORD PTR [rbp-0x70],0x0
  225b1b:	75 0b                	jne    225b28 <lookup+0x2a8>
  225b1d:	31 c0                	xor    eax,eax
  225b1f:	48 81 c4 10 02 00 00 	add    rsp,0x210
  225b26:	5d                   	pop    rbp
  225b27:	c3                   	ret    
  225b28:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  225b2c:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
  225b33:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
  225b3a:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
    if (maybe_verdef == null) maybe_versym = null;
  225b41:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  225b45:	48 85 c9             	test   rcx,rcx
  225b48:	0f 95 c2             	setne  dl
  225b4b:	88 95 a7 fe ff ff    	mov    BYTE PTR [rbp-0x159],dl
  225b51:	75 0c                	jne    225b5f <lookup+0x2df>
  225b53:	eb 00                	jmp    225b55 <lookup+0x2d5>
  225b55:	48 c7 45 88 00 00 00 	mov    QWORD PTR [rbp-0x78],0x0
  225b5c:	00 
  225b5d:	eb 02                	jmp    225b61 <lookup+0x2e1>
  225b5f:	eb 00                	jmp    225b61 <lookup+0x2e1>

    const OK_TYPES = (1 << elf.STT_NOTYPE | 1 << elf.STT_OBJECT | 1 << elf.STT_FUNC | 1 << elf.STT_COMMON);
    const OK_BINDS = (1 << elf.STB_GLOBAL | 1 << elf.STB_WEAK | 1 << elf.STB_GNU_UNIQUE);

    var i: usize = 0;
  225b61:	48 c7 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],0x0
  225b68:	00 00 00 00 
    while (i < hashtab[1]) : (i += 1) {
  225b6c:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  225b73:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  225b7a:	8b 51 04             	mov    edx,DWORD PTR [rcx+0x4]
  225b7d:	89 d1                	mov    ecx,edx
  225b7f:	48 39 c8             	cmp    rax,rcx
  225b82:	0f 83 7d 01 00 00    	jae    225d05 <lookup+0x485>
        if (0 == (u32(1) << @intCast(u5, syms[i].st_info & 0xf) & OK_TYPES)) continue;
  225b88:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  225b8f:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  225b96:	48 8d 04 40          	lea    rax,[rax+rax*2]
  225b9a:	8a 54 c1 04          	mov    dl,BYTE PTR [rcx+rax*8+0x4]
  225b9e:	80 e2 0f             	and    dl,0xf
  225ba1:	40 88 d6             	mov    sil,dl
  225ba4:	40 88 d7             	mov    dil,dl
  225ba7:	40 38 d6             	cmp    sil,dl
  225baa:	40 88 bd a6 fe ff ff 	mov    BYTE PTR [rbp-0x15a],dil
  225bb1:	0f 84 86 03 00 00    	je     225f3d <lookup+0x6bd>
  225bb7:	e9 b4 03 00 00       	jmp    225f70 <lookup+0x6f0>
  225bbc:	e9 1e 01 00 00       	jmp    225cdf <lookup+0x45f>
  225bc1:	eb 00                	jmp    225bc3 <lookup+0x343>
        if (0 == (u32(1) << @intCast(u5, syms[i].st_info >> 4) & OK_BINDS)) continue;
  225bc3:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  225bca:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  225bd1:	48 8d 04 40          	lea    rax,[rax+rax*2]
  225bd5:	8a 54 c1 04          	mov    dl,BYTE PTR [rcx+rax*8+0x4]
  225bd9:	c0 ea 04             	shr    dl,0x4
  225bdc:	40 88 d6             	mov    sil,dl
  225bdf:	40 88 d7             	mov    dil,dl
  225be2:	40 38 d6             	cmp    sil,dl
  225be5:	40 88 bd a5 fe ff ff 	mov    BYTE PTR [rbp-0x15b],dil
  225bec:	0f 84 8e 03 00 00    	je     225f80 <lookup+0x700>
  225bf2:	e9 bf 03 00 00       	jmp    225fb6 <lookup+0x736>
  225bf7:	e9 e3 00 00 00       	jmp    225cdf <lookup+0x45f>
  225bfc:	eb 00                	jmp    225bfe <lookup+0x37e>
  225bfe:	31 c0                	xor    eax,eax
  225c00:	66 89 c1             	mov    cx,ax
        if (0 == syms[i].st_shndx) continue;
  225c03:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
  225c0a:	48 6b d2 18          	imul   rdx,rdx,0x18
  225c0e:	48 03 95 60 ff ff ff 	add    rdx,QWORD PTR [rbp-0xa0]
  225c15:	66 3b 4a 06          	cmp    cx,WORD PTR [rdx+0x6]
  225c19:	75 05                	jne    225c20 <lookup+0x3a0>
  225c1b:	e9 bf 00 00 00       	jmp    225cdf <lookup+0x45f>
  225c20:	eb 00                	jmp    225c22 <lookup+0x3a2>
        if (!mem.eql(u8, name, cstr.toSliceConst(strings + syms[i].st_name))) continue;
  225c22:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  225c29:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
  225c30:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  225c37:	48 8d 0c 49          	lea    rcx,[rcx+rcx*2]
  225c3b:	8b 34 ca             	mov    esi,DWORD PTR [rdx+rcx*8]
  225c3e:	89 f1                	mov    ecx,esi
  225c40:	48 01 c8             	add    rax,rcx
  225c43:	48 8d 4d f0          	lea    rcx,[rbp-0x10]
  225c47:	48 89 cf             	mov    rdi,rcx
  225c4a:	48 89 c6             	mov    rsi,rax
  225c4d:	48 89 8d 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rcx
  225c54:	e8 b7 2a 00 00       	call   228710 <toSliceConst>
  225c59:	48 8b bd 40 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xc0]
  225c60:	48 8b b5 98 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x168]
  225c67:	e8 f4 dd fe ff       	call   213a60 <eql>
  225c6c:	41 88 c0             	mov    r8b,al
  225c6f:	a8 01                	test   al,0x1
  225c71:	44 88 85 97 fe ff ff 	mov    BYTE PTR [rbp-0x169],r8b
  225c78:	75 04                	jne    225c7e <lookup+0x3fe>
  225c7a:	eb 00                	jmp    225c7c <lookup+0x3fc>
  225c7c:	eb 61                	jmp    225cdf <lookup+0x45f>
  225c7e:	eb 00                	jmp    225c80 <lookup+0x400>
        if (maybe_versym) |versym| {
  225c80:	48 83 7d 88 00       	cmp    QWORD PTR [rbp-0x78],0x0
  225c85:	74 21                	je     225ca8 <lookup+0x428>
  225c87:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  225c8b:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
            if (!checkver(maybe_verdef.?, versym[i], vername, strings))
  225c92:	48 83 7d 80 00       	cmp    QWORD PTR [rbp-0x80],0x0
  225c97:	0f 85 29 03 00 00    	jne    225fc6 <lookup+0x746>
  225c9d:	e9 75 03 00 00       	jmp    226017 <lookup+0x797>
                continue;
  225ca2:	eb 3b                	jmp    225cdf <lookup+0x45f>
            if (!checkver(maybe_verdef.?, versym[i], vername, strings))
  225ca4:	eb 00                	jmp    225ca6 <lookup+0x426>
        if (maybe_versym) |versym| {
  225ca6:	eb 02                	jmp    225caa <lookup+0x42a>
  225ca8:	eb 00                	jmp    225caa <lookup+0x42a>
        }
        return base + syms[i].st_value;
  225caa:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  225cae:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
  225cb5:	48 6b c9 18          	imul   rcx,rcx,0x18
  225cb9:	48 03 8d 60 ff ff ff 	add    rcx,QWORD PTR [rbp-0xa0]
  225cc0:	48 03 41 08          	add    rax,QWORD PTR [rcx+0x8]
  225cc4:	0f 92 c2             	setb   dl
  225cc7:	48 89 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rax
  225cce:	88 95 87 fe ff ff    	mov    BYTE PTR [rbp-0x179],dl
  225cd4:	0f 82 4d 03 00 00    	jb     226027 <lookup+0x7a7>
  225cda:	e9 58 03 00 00       	jmp    226037 <lookup+0x7b7>
    while (i < hashtab[1]) : (i += 1) {
  225cdf:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  225ce6:	48 83 c0 01          	add    rax,0x1
  225cea:	0f 92 c1             	setb   cl
  225ced:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  225cf4:	88 8d 77 fe ff ff    	mov    BYTE PTR [rbp-0x189],cl
  225cfa:	0f 82 47 03 00 00    	jb     226047 <lookup+0x7c7>
  225d00:	e9 52 03 00 00       	jmp    226057 <lookup+0x7d7>
  225d05:	31 c0                	xor    eax,eax
    }

    return 0;
  225d07:	48 81 c4 10 02 00 00 	add    rsp,0x210
  225d0e:	5d                   	pop    rbp
  225d0f:	c3                   	ret    
  225d10:	48 8d 3d b1 d4 01 00 	lea    rdi,[rip+0x1d4b1]        # 2431c8 <__unnamed_4>
  225d17:	31 c0                	xor    eax,eax
  225d19:	89 c6                	mov    esi,eax
    var ph_addr: usize = vdso_addr + eh.e_phoff;
  225d1b:	e8 e0 58 fe ff       	call   20b600 <panic>
  225d20:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  225d27:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
    const ph = @intToPtr(*elf.Phdr, ph_addr);
  225d2b:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  225d2f:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    var maybe_dynv: ?[*]usize = null;
  225d33:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
  225d3a:	00 
    var base: usize = @maxValue(usize);
  225d3b:	48 c7 45 c0 ff ff ff 	mov    QWORD PTR [rbp-0x40],0xffffffffffffffff
  225d42:	ff 
        var i: usize = 0;
  225d43:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
  225d4a:	00 
        while (i < eh.e_phnum) : ({
  225d4b:	e9 95 fb ff ff       	jmp    2258e5 <lookup+0x65>
  225d50:	48 8d 3d 71 d4 01 00 	lea    rdi,[rip+0x1d471]        # 2431c8 <__unnamed_4>
  225d57:	31 c0                	xor    eax,eax
  225d59:	89 c6                	mov    esi,eax
                elf.PT_LOAD => base = vdso_addr + this_ph.p_offset - this_ph.p_vaddr,
  225d5b:	e8 a0 58 fe ff       	call   20b600 <panic>
  225d60:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  225d64:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
  225d6b:	48 2b 48 10          	sub    rcx,QWORD PTR [rax+0x10]
  225d6f:	0f 92 c2             	setb   dl
  225d72:	48 89 8d 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rcx
  225d79:	88 95 67 fe ff ff    	mov    BYTE PTR [rbp-0x199],dl
  225d7f:	72 02                	jb     225d83 <lookup+0x503>
  225d81:	eb 10                	jmp    225d93 <lookup+0x513>
  225d83:	48 8d 3d 3e d4 01 00 	lea    rdi,[rip+0x1d43e]        # 2431c8 <__unnamed_4>
  225d8a:	31 c0                	xor    eax,eax
  225d8c:	89 c6                	mov    esi,eax
  225d8e:	e8 6d 58 fe ff       	call   20b600 <panic>
  225d93:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
  225d9a:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
            switch (this_ph.p_type) {
  225d9e:	e9 df fb ff ff       	jmp    225982 <lookup+0x102>
  225da3:	48 8d 3d 1e d4 01 00 	lea    rdi,[rip+0x1d41e]        # 2431c8 <__unnamed_4>
  225daa:	31 c0                	xor    eax,eax
  225dac:	89 c6                	mov    esi,eax
                elf.PT_DYNAMIC => maybe_dynv = @intToPtr([*]usize, vdso_addr + this_ph.p_offset),
  225dae:	e8 4d 58 fe ff       	call   20b600 <panic>
  225db3:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  225dba:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
            switch (this_ph.p_type) {
  225dbe:	e9 bf fb ff ff       	jmp    225982 <lookup+0x102>
  225dc3:	48 8d 3d fe d3 01 00 	lea    rdi,[rip+0x1d3fe]        # 2431c8 <__unnamed_4>
  225dca:	31 c0                	xor    eax,eax
  225dcc:	89 c6                	mov    esi,eax
            i += 1;
  225dce:	e8 2d 58 fe ff       	call   20b600 <panic>
  225dd3:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  225dda:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
            ph_addr += eh.e_phentsize;
  225dde:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  225de2:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  225de6:	0f b7 72 36          	movzx  esi,WORD PTR [rdx+0x36]
  225dea:	89 f2                	mov    edx,esi
  225dec:	48 01 d1             	add    rcx,rdx
  225def:	40 0f 92 c7          	setb   dil
  225df3:	48 89 8d 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rcx
  225dfa:	40 88 bd 57 fe ff ff 	mov    BYTE PTR [rbp-0x1a9],dil
  225e01:	72 02                	jb     225e05 <lookup+0x585>
  225e03:	eb 10                	jmp    225e15 <lookup+0x595>
  225e05:	48 8d 3d bc d3 01 00 	lea    rdi,[rip+0x1d3bc]        # 2431c8 <__unnamed_4>
  225e0c:	31 c0                	xor    eax,eax
  225e0e:	89 c6                	mov    esi,eax
  225e10:	e8 eb 57 fe ff       	call   20b600 <panic>
  225e15:	48 8b 85 58 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a8]
  225e1c:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
        while (i < eh.e_phnum) : ({
  225e20:	e9 c0 fa ff ff       	jmp    2258e5 <lookup+0x65>
  225e25:	48 8d 3d 9c d3 01 00 	lea    rdi,[rip+0x1d39c]        # 2431c8 <__unnamed_4>
  225e2c:	31 c0                	xor    eax,eax
  225e2e:	89 c6                	mov    esi,eax
            const p = base + dynv[i + 1];
  225e30:	e8 cb 57 fe ff       	call   20b600 <panic>
  225e35:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  225e39:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  225e40:	48 8b 95 d8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x128]
  225e47:	48 03 0c d0          	add    rcx,QWORD PTR [rax+rdx*8]
  225e4b:	40 0f 92 c6          	setb   sil
  225e4f:	48 89 8d 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rcx
  225e56:	40 88 b5 47 fe ff ff 	mov    BYTE PTR [rbp-0x1b9],sil
  225e5d:	72 02                	jb     225e61 <lookup+0x5e1>
  225e5f:	eb 10                	jmp    225e71 <lookup+0x5f1>
  225e61:	48 8d 3d 60 d3 01 00 	lea    rdi,[rip+0x1d360]        # 2431c8 <__unnamed_4>
  225e68:	31 c0                	xor    eax,eax
  225e6a:	89 c6                	mov    esi,eax
  225e6c:	e8 8f 57 fe ff       	call   20b600 <panic>
  225e71:	48 8b 85 48 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b8]
  225e78:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
            switch (dynv[i]) {
  225e7f:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  225e86:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  225e8a:	48 8b 0c ca          	mov    rcx,QWORD PTR [rdx+rcx*8]
  225e8e:	48 89 ca             	mov    rdx,rcx
  225e91:	48 83 ea 04          	sub    rdx,0x4
  225e95:	48 89 8d 38 fe ff ff 	mov    QWORD PTR [rbp-0x1c8],rcx
  225e9c:	48 89 95 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rdx
  225ea3:	0f 84 cc fb ff ff    	je     225a75 <lookup+0x1f5>
  225ea9:	eb 00                	jmp    225eab <lookup+0x62b>
  225eab:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  225eb2:	48 83 e8 05          	sub    rax,0x5
  225eb6:	48 89 85 28 fe ff ff 	mov    QWORD PTR [rbp-0x1d8],rax
  225ebd:	0f 84 98 fb ff ff    	je     225a5b <lookup+0x1db>
  225ec3:	eb 00                	jmp    225ec5 <lookup+0x645>
  225ec5:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  225ecc:	48 83 e8 06          	sub    rax,0x6
  225ed0:	48 89 85 20 fe ff ff 	mov    QWORD PTR [rbp-0x1e0],rax
  225ed7:	0f 84 8b fb ff ff    	je     225a68 <lookup+0x1e8>
  225edd:	eb 00                	jmp    225edf <lookup+0x65f>
  225edf:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  225ee6:	48 2d f0 ff ff 6f    	sub    rax,0x6ffffff0
  225eec:	48 89 85 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],rax
  225ef3:	0f 84 89 fb ff ff    	je     225a82 <lookup+0x202>
  225ef9:	eb 00                	jmp    225efb <lookup+0x67b>
  225efb:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  225f02:	48 2d fc ff ff 6f    	sub    rax,0x6ffffffc
  225f08:	48 89 85 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rax
  225f0f:	0f 84 7a fb ff ff    	je     225a8f <lookup+0x20f>
  225f15:	e9 3f fb ff ff       	jmp    225a59 <lookup+0x1d9>
  225f1a:	48 8d 3d a7 d2 01 00 	lea    rdi,[rip+0x1d2a7]        # 2431c8 <__unnamed_4>
  225f21:	31 c0                	xor    eax,eax
  225f23:	89 c6                	mov    esi,eax
        while (dynv[i] != 0) : (i += 2) {
  225f25:	e8 d6 56 fe ff       	call   20b600 <panic>
  225f2a:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  225f31:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  225f38:	e9 d5 fa ff ff       	jmp    225a12 <lookup+0x192>
  225f3d:	31 c0                	xor    eax,eax
  225f3f:	b9 01 00 00 00       	mov    ecx,0x1
        if (0 == (u32(1) << @intCast(u5, syms[i].st_info & 0xf) & OK_TYPES)) continue;
  225f44:	8a 95 a6 fe ff ff    	mov    dl,BYTE PTR [rbp-0x15a]
  225f4a:	80 e2 1f             	and    dl,0x1f
  225f4d:	0f b6 f2             	movzx  esi,dl
  225f50:	89 8d 0c fe ff ff    	mov    DWORD PTR [rbp-0x1f4],ecx
  225f56:	89 f1                	mov    ecx,esi
  225f58:	8b b5 0c fe ff ff    	mov    esi,DWORD PTR [rbp-0x1f4]
  225f5e:	d3 e6                	shl    esi,cl
  225f60:	83 e6 27             	and    esi,0x27
  225f63:	39 f0                	cmp    eax,esi
  225f65:	0f 84 51 fc ff ff    	je     225bbc <lookup+0x33c>
  225f6b:	e9 51 fc ff ff       	jmp    225bc1 <lookup+0x341>
  225f70:	48 8d 3d 31 d5 01 00 	lea    rdi,[rip+0x1d531]        # 2434a8 <__unnamed_22>
  225f77:	31 c0                	xor    eax,eax
  225f79:	89 c6                	mov    esi,eax
  225f7b:	e8 80 56 fe ff       	call   20b600 <panic>
  225f80:	31 c0                	xor    eax,eax
  225f82:	b9 01 00 00 00       	mov    ecx,0x1
        if (0 == (u32(1) << @intCast(u5, syms[i].st_info >> 4) & OK_BINDS)) continue;
  225f87:	8a 95 a5 fe ff ff    	mov    dl,BYTE PTR [rbp-0x15b]
  225f8d:	80 e2 1f             	and    dl,0x1f
  225f90:	0f b6 f2             	movzx  esi,dl
  225f93:	89 8d 08 fe ff ff    	mov    DWORD PTR [rbp-0x1f8],ecx
  225f99:	89 f1                	mov    ecx,esi
  225f9b:	8b b5 08 fe ff ff    	mov    esi,DWORD PTR [rbp-0x1f8]
  225fa1:	d3 e6                	shl    esi,cl
  225fa3:	81 e6 06 04 00 00    	and    esi,0x406
  225fa9:	39 f0                	cmp    eax,esi
  225fab:	0f 84 46 fc ff ff    	je     225bf7 <lookup+0x377>
  225fb1:	e9 46 fc ff ff       	jmp    225bfc <lookup+0x37c>
  225fb6:	48 8d 3d eb d4 01 00 	lea    rdi,[rip+0x1d4eb]        # 2434a8 <__unnamed_22>
  225fbd:	31 c0                	xor    eax,eax
  225fbf:	89 c6                	mov    esi,eax
  225fc1:	e8 3a 56 fe ff       	call   20b600 <panic>
            if (!checkver(maybe_verdef.?, versym[i], vername, strings))
  225fc6:	48 8b 7d 80          	mov    rdi,QWORD PTR [rbp-0x80]
  225fca:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  225fd1:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
  225fd8:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  225fdf:	0f b7 34 41          	movzx  esi,WORD PTR [rcx+rax*2]
  225fe3:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  225fea:	48 89 95 00 fe ff ff 	mov    QWORD PTR [rbp-0x200],rdx
  225ff1:	48 89 c2             	mov    rdx,rax
  225ff4:	48 8b 8d 00 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x200]
  225ffb:	e8 90 27 00 00       	call   228790 <checkver>
  226000:	41 88 c0             	mov    r8b,al
  226003:	a8 01                	test   al,0x1
  226005:	44 88 85 ff fd ff ff 	mov    BYTE PTR [rbp-0x201],r8b
  22600c:	0f 84 90 fc ff ff    	je     225ca2 <lookup+0x422>
  226012:	e9 8d fc ff ff       	jmp    225ca4 <lookup+0x424>
  226017:	48 8d 3d e2 d8 01 00 	lea    rdi,[rip+0x1d8e2]        # 243900 <__unnamed_174>
  22601e:	31 c0                	xor    eax,eax
  226020:	89 c6                	mov    esi,eax
  226022:	e8 d9 55 fe ff       	call   20b600 <panic>
  226027:	48 8d 3d 9a d1 01 00 	lea    rdi,[rip+0x1d19a]        # 2431c8 <__unnamed_4>
  22602e:	31 c0                	xor    eax,eax
  226030:	89 c6                	mov    esi,eax
        return base + syms[i].st_value;
  226032:	e8 c9 55 fe ff       	call   20b600 <panic>
  226037:	48 8b 85 88 fe ff ff 	mov    rax,QWORD PTR [rbp-0x178]
  22603e:	48 81 c4 10 02 00 00 	add    rsp,0x210
  226045:	5d                   	pop    rbp
  226046:	c3                   	ret    
  226047:	48 8d 3d 7a d1 01 00 	lea    rdi,[rip+0x1d17a]        # 2431c8 <__unnamed_4>
  22604e:	31 c0                	xor    eax,eax
  226050:	89 c6                	mov    esi,eax
    while (i < hashtab[1]) : (i += 1) {
  226052:	e8 a9 55 fe ff       	call   20b600 <panic>
  226057:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
  22605e:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
  226065:	e9 02 fb ff ff       	jmp    225b6c <lookup+0x2ec>
  22606a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000226070 <formatValue>:
        },
        else => @compileError("Unable to format type '" ++ @typeName(T) ++ "'"),
    }
}

fn formatValue(
  226070:	55                   	push   rbp
  226071:	48 89 e5             	mov    rbp,rsp
  226074:	48 83 ec 30          	sub    rsp,0x30
  226078:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22607c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  226080:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    }

    comptime var T = @typeOf(value);
    switch (@typeId(T)) {
        builtin.TypeId.Float => return formatFloatValue(value, fmt, context, Errors, output),
        builtin.TypeId.Int => return formatIntValue(value, fmt, context, Errors, output),
  226084:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  226088:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  22608c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  226090:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  226094:	e8 47 28 00 00       	call   2288e0 <formatIntValue>
  226099:	66 83 f8 00          	cmp    ax,0x0
  22609d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  2260a1:	74 0b                	je     2260ae <formatValue+0x3e>
  2260a3:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2260a7:	e8 e4 5b fe ff       	call   20bc90 <__zig_return_error>
  2260ac:	eb 02                	jmp    2260b0 <formatValue+0x40>
  2260ae:	eb 00                	jmp    2260b0 <formatValue+0x40>
  2260b0:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  2260b4:	48 83 c4 30          	add    rsp,0x30
  2260b8:	5d                   	pop    rbp
  2260b9:	c3                   	ret    
  2260ba:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000002260c0 <formatValue.96>:
fn formatValue(
  2260c0:	55                   	push   rbp
  2260c1:	48 89 e5             	mov    rbp,rsp
  2260c4:	48 83 ec 30          	sub    rsp,0x30
  2260c8:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
  2260cd:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  2260d1:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
        builtin.TypeId.Float => return formatFloatValue(value, fmt, context, Errors, output),
  2260d5:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  2260da:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  2260de:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  2260e2:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2260e6:	e8 65 28 00 00       	call   228950 <formatFloatValue>
  2260eb:	66 83 f8 00          	cmp    ax,0x0
  2260ef:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  2260f3:	74 0b                	je     226100 <formatValue.96+0x40>
  2260f5:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2260f9:	e8 92 5b fe ff       	call   20bc90 <__zig_return_error>
  2260fe:	eb 02                	jmp    226102 <formatValue.96+0x42>
  226100:	eb 00                	jmp    226102 <formatValue.96+0x42>
  226102:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  226106:	48 83 c4 30          	add    rsp,0x30
  22610a:	5d                   	pop    rbp
  22610b:	c3                   	ret    
  22610c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000226110 <min>:
pub fn min(x: var, y: var) @typeOf(x + y) {
  226110:	55                   	push   rbp
  226111:	48 89 e5             	mov    rbp,rsp
  226114:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  226118:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    return if (x < y) x else y;
  22611c:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  226120:	48 3b 75 f0          	cmp    rsi,QWORD PTR [rbp-0x10]
  226124:	73 0a                	jae    226130 <min+0x20>
  226126:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  22612a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  22612e:	eb 08                	jmp    226138 <min+0x28>
  226130:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  226134:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  226138:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22613c:	5d                   	pop    rbp
  22613d:	c3                   	ret    
  22613e:	66 90                	xchg   ax,ax

0000000000226140 <write>:
pub fn write(fd: i32, buf: [*]const u8, count: usize) usize {
  226140:	55                   	push   rbp
  226141:	48 89 e5             	mov    rbp,rsp
  226144:	48 83 ec 20          	sub    rsp,0x20
  226148:	b8 01 00 00 00       	mov    eax,0x1
  22614d:	89 c1                	mov    ecx,eax
  22614f:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  226152:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  226156:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    return syscall3(SYS_write, @intCast(usize, fd), @ptrToInt(buf), count);
  22615a:	48 63 75 fc          	movsxd rsi,DWORD PTR [rbp-0x4]
  22615e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  226162:	4c 8b 45 e8          	mov    r8,QWORD PTR [rbp-0x18]
  226166:	48 89 cf             	mov    rdi,rcx
  226169:	4c 89 c1             	mov    rcx,r8
  22616c:	e8 9f e7 fe ff       	call   214910 <syscall3>
  226171:	48 83 c4 20          	add    rsp,0x20
  226175:	5d                   	pop    rbp
  226176:	c3                   	ret    
  226177:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  22617e:	00 00 

0000000000226180 <DirectAllocator_alloc>:
    fn alloc(allocator: *Allocator, n: usize, alignment: u29) ![]u8 {
  226180:	55                   	push   rbp
  226181:	48 89 e5             	mov    rbp,rsp
  226184:	48 81 ec 60 01 00 00 	sub    rsp,0x160
  22618b:	48 89 f8             	mov    rax,rdi
  22618e:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  226192:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
  226196:	41 81 e0 ff ff ff 1f 	and    r8d,0x1fffffff
  22619d:	44 89 45 8c          	mov    DWORD PTR [rbp-0x74],r8d
        const self = @fieldParentPtr(DirectAllocator, "allocator", allocator);
  2261a1:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  2261a5:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
                const alloc_size = if (alignment <= os.page_size) n else n + alignment;
  2261a9:	44 8b 45 8c          	mov    r8d,DWORD PTR [rbp-0x74]
  2261ad:	41 81 e8 00 10 00 00 	sub    r8d,0x1000
  2261b4:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  2261bb:	48 89 bd 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rdi
  2261c2:	48 89 b5 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rsi
  2261c9:	44 89 85 34 ff ff ff 	mov    DWORD PTR [rbp-0xcc],r8d
  2261d0:	77 0f                	ja     2261e1 <DirectAllocator_alloc+0x61>
  2261d2:	eb 00                	jmp    2261d4 <DirectAllocator_alloc+0x54>
  2261d4:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  2261d8:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  2261df:	eb 29                	jmp    22620a <DirectAllocator_alloc+0x8a>
  2261e1:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  2261e5:	8b 4d 8c             	mov    ecx,DWORD PTR [rbp-0x74]
  2261e8:	89 ca                	mov    edx,ecx
  2261ea:	48 01 d0             	add    rax,rdx
  2261ed:	40 0f 92 c6          	setb   sil
  2261f1:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
  2261f8:	40 88 b5 1f ff ff ff 	mov    BYTE PTR [rbp-0xe1],sil
  2261ff:	0f 82 24 01 00 00    	jb     226329 <DirectAllocator_alloc+0x1a9>
  226205:	e9 2f 01 00 00       	jmp    226339 <DirectAllocator_alloc+0x1b9>
  22620a:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  226211:	31 c9                	xor    ecx,ecx
  226213:	89 ca                	mov    edx,ecx
  226215:	b9 03 00 00 00       	mov    ecx,0x3
  22621a:	89 ce                	mov    esi,ecx
  22621c:	b9 22 00 00 00       	mov    ecx,0x22
  226221:	41 b8 ff ff ff ff    	mov    r8d,0xffffffff
  226227:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
                const addr = p.mmap(null, alloc_size, p.PROT_READ | p.PROT_WRITE, p.MAP_PRIVATE | p.MAP_ANONYMOUS, -1, 0);
  22622e:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  226235:	48 89 d7             	mov    rdi,rdx
  226238:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  22623f:	48 89 c6             	mov    rsi,rax
  226242:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  226249:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
  226250:	48 89 c2             	mov    rdx,rax
  226253:	4c 8b 8d 08 ff ff ff 	mov    r9,QWORD PTR [rbp-0xf8]
  22625a:	e8 d1 72 fe ff       	call   20d530 <mmap>
  22625f:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
                if (addr == p.MAP_FAILED) return error.OutOfMemory;
  226266:	48 83 bd 70 ff ff ff 	cmp    QWORD PTR [rbp-0x90],0xffffffffffffffff
  22626d:	ff 
  22626e:	75 43                	jne    2262b3 <DirectAllocator_alloc+0x133>
  226270:	48 8b bd 38 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xc8]
  226277:	e8 14 5a fe ff       	call   20bc90 <__zig_return_error>
  22627c:	48 8b 3d e5 44 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe44e5]        # 20a768 <__unnamed_175>
  226283:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  22628a:	48 89 38             	mov    QWORD PTR [rax],rdi
  22628d:	48 8b 3d dc 44 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe44dc]        # 20a770 <__unnamed_175+0x8>
  226294:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  226298:	48 8b 3d d9 44 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe44d9]        # 20a778 <__unnamed_175+0x10>
  22629f:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  2262a3:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  2262aa:	48 81 c4 60 01 00 00 	add    rsp,0x160
  2262b1:	5d                   	pop    rbp
  2262b2:	c3                   	ret    
  2262b3:	eb 00                	jmp    2262b5 <DirectAllocator_alloc+0x135>
                if (alloc_size == n) return @intToPtr([*]u8, addr)[0..n];
  2262b5:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  2262bc:	48 3b 45 90          	cmp    rax,QWORD PTR [rbp-0x70]
  2262c0:	75 2c                	jne    2262ee <DirectAllocator_alloc+0x16e>
  2262c2:	31 c0                	xor    eax,eax
  2262c4:	89 c1                	mov    ecx,eax
  2262c6:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  2262cd:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  2262d1:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
  2262d5:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2262d9:	48 39 d1             	cmp    rcx,rdx
  2262dc:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
  2262e3:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
  2262ea:	76 70                	jbe    22635c <DirectAllocator_alloc+0x1dc>
  2262ec:	eb 5e                	jmp    22634c <DirectAllocator_alloc+0x1cc>
  2262ee:	eb 00                	jmp    2262f0 <DirectAllocator_alloc+0x170>
                const aligned_addr = (addr & ~usize(alignment - 1)) + alignment;
  2262f0:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  2262f7:	8b 4d 8c             	mov    ecx,DWORD PTR [rbp-0x74]
  2262fa:	83 c1 ff             	add    ecx,0xffffffff
  2262fd:	f7 c1 00 00 00 e0    	test   ecx,0xe0000000
  226303:	0f 95 c2             	setne  dl
  226306:	89 ce                	mov    esi,ecx
  226308:	f6 c2 01             	test   dl,0x1
  22630b:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  226312:	89 8d ec fe ff ff    	mov    DWORD PTR [rbp-0x114],ecx
  226318:	89 b5 e8 fe ff ff    	mov    DWORD PTR [rbp-0x118],esi
  22631e:	0f 85 96 00 00 00    	jne    2263ba <DirectAllocator_alloc+0x23a>
  226324:	e9 a1 00 00 00       	jmp    2263ca <DirectAllocator_alloc+0x24a>
  226329:	48 8d 3d 98 ce 01 00 	lea    rdi,[rip+0x1ce98]        # 2431c8 <__unnamed_4>
  226330:	31 c0                	xor    eax,eax
  226332:	89 c6                	mov    esi,eax
                const alloc_size = if (alignment <= os.page_size) n else n + alignment;
  226334:	e8 c7 52 fe ff       	call   20b600 <panic>
  226339:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  226340:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  226347:	e9 be fe ff ff       	jmp    22620a <DirectAllocator_alloc+0x8a>
  22634c:	48 8d 3d a5 d0 01 00 	lea    rdi,[rip+0x1d0a5]        # 2433f8 <__unnamed_20>
  226353:	31 c0                	xor    eax,eax
  226355:	89 c6                	mov    esi,eax
                if (alloc_size == n) return @intToPtr([*]u8, addr)[0..n];
  226357:	e8 a4 52 fe ff       	call   20b600 <panic>
  22635c:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  226363:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  226367:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  22636e:	48 83 e9 00          	sub    rcx,0x0
  226372:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  226376:	66 c7 45 d0 00 00    	mov    WORD PTR [rbp-0x30],0x0
  22637c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  226380:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  226384:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  226388:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  22638c:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  226390:	48 8b 95 40 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc0]
  226397:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  22639a:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  22639e:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  2263a2:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  2263a6:	48 89 4a 10          	mov    QWORD PTR [rdx+0x10],rcx
  2263aa:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  2263b1:	48 81 c4 60 01 00 00 	add    rsp,0x160
  2263b8:	5d                   	pop    rbp
  2263b9:	c3                   	ret    
  2263ba:	48 8d 3d 07 ce 01 00 	lea    rdi,[rip+0x1ce07]        # 2431c8 <__unnamed_4>
  2263c1:	31 c0                	xor    eax,eax
  2263c3:	89 c6                	mov    esi,eax
                const aligned_addr = (addr & ~usize(alignment - 1)) + alignment;
  2263c5:	e8 36 52 fe ff       	call   20b600 <panic>
  2263ca:	8b 85 ec fe ff ff    	mov    eax,DWORD PTR [rbp-0x114]
  2263d0:	25 ff ff ff 1f       	and    eax,0x1fffffff
  2263d5:	89 c1                	mov    ecx,eax
  2263d7:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  2263de:	c4 e2 f0 f2 ca       	andn   rcx,rcx,rdx
  2263e3:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
  2263e6:	89 c6                	mov    esi,eax
  2263e8:	48 01 f1             	add    rcx,rsi
  2263eb:	40 0f 92 c7          	setb   dil
  2263ef:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
  2263f6:	40 88 bd df fe ff ff 	mov    BYTE PTR [rbp-0x121],dil
  2263fd:	72 02                	jb     226401 <DirectAllocator_alloc+0x281>
  2263ff:	eb 10                	jmp    226411 <DirectAllocator_alloc+0x291>
  226401:	48 8d 3d c0 cd 01 00 	lea    rdi,[rip+0x1cdc0]        # 2431c8 <__unnamed_4>
  226408:	31 c0                	xor    eax,eax
  22640a:	89 c6                	mov    esi,eax
  22640c:	e8 ef 51 fe ff       	call   20b600 <panic>
  226411:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
  226418:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
                const unused_start = addr;
  22641f:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
  226426:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
                const unused_len = aligned_addr - 1 - unused_start;
  22642d:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  226434:	48 83 e9 01          	sub    rcx,0x1
  226438:	0f 92 c2             	setb   dl
  22643b:	48 89 8d d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rcx
  226442:	88 95 cf fe ff ff    	mov    BYTE PTR [rbp-0x131],dl
  226448:	72 02                	jb     22644c <DirectAllocator_alloc+0x2cc>
  22644a:	eb 10                	jmp    22645c <DirectAllocator_alloc+0x2dc>
  22644c:	48 8d 3d 75 cd 01 00 	lea    rdi,[rip+0x1cd75]        # 2431c8 <__unnamed_4>
  226453:	31 c0                	xor    eax,eax
  226455:	89 c6                	mov    esi,eax
  226457:	e8 a4 51 fe ff       	call   20b600 <panic>
  22645c:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  226463:	48 2b 85 60 ff ff ff 	sub    rax,QWORD PTR [rbp-0xa0]
  22646a:	0f 92 c1             	setb   cl
  22646d:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
  226474:	88 8d bf fe ff ff    	mov    BYTE PTR [rbp-0x141],cl
  22647a:	72 02                	jb     22647e <DirectAllocator_alloc+0x2fe>
  22647c:	eb 10                	jmp    22648e <DirectAllocator_alloc+0x30e>
  22647e:	48 8d 3d 43 cd 01 00 	lea    rdi,[rip+0x1cd43]        # 2431c8 <__unnamed_4>
  226485:	31 c0                	xor    eax,eax
  226487:	89 c6                	mov    esi,eax
  226489:	e8 72 51 fe ff       	call   20b600 <panic>
  22648e:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  226495:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
                const err = p.munmap(unused_start, unused_len);
  22649c:	48 8b bd 60 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  2264a3:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  2264aa:	e8 11 71 fe ff       	call   20d5c0 <munmap>
  2264af:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
                assert(p.getErrno(err) == 0);
  2264b6:	48 8b bd 50 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb0]
  2264bd:	e8 be 6b fe ff       	call   20d080 <getErrno>
  2264c2:	48 83 f8 00          	cmp    rax,0x0
  2264c6:	0f 94 c1             	sete   cl
  2264c9:	0f b6 f9             	movzx  edi,cl
  2264cc:	e8 2f 4b fe ff       	call   20b000 <assert>
  2264d1:	31 ff                	xor    edi,edi
  2264d3:	89 f8                	mov    eax,edi
                return @intToPtr([*]u8, aligned_addr)[0..n];
  2264d5:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
  2264dc:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  2264e0:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  2264e4:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  2264e8:	48 39 f0             	cmp    rax,rsi
  2264eb:	48 89 95 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rdx
  2264f2:	48 89 b5 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rsi
  2264f9:	76 10                	jbe    22650b <DirectAllocator_alloc+0x38b>
  2264fb:	48 8d 3d f6 ce 01 00 	lea    rdi,[rip+0x1cef6]        # 2433f8 <__unnamed_20>
  226502:	31 c0                	xor    eax,eax
  226504:	89 c6                	mov    esi,eax
  226506:	e8 f5 50 fe ff       	call   20b600 <panic>
  22650b:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  226512:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  226516:	48 8b 8d a8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x158]
  22651d:	48 83 e9 00          	sub    rcx,0x0
  226521:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
  226525:	66 c7 45 a0 00 00    	mov    WORD PTR [rbp-0x60],0x0
  22652b:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  22652f:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  226533:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  226537:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
  22653b:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  22653f:	48 8b 95 40 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc0]
  226546:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  226549:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  22654d:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  226551:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  226555:	48 89 4a 10          	mov    QWORD PTR [rdx+0x10],rcx
  226559:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  226560:	48 81 c4 60 01 00 00 	add    rsp,0x160
  226567:	5d                   	pop    rbp
  226568:	c3                   	ret    
  226569:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000226570 <DirectAllocator_realloc>:
    fn realloc(allocator: *Allocator, old_mem: []u8, new_size: usize, alignment: u29) ![]u8 {
  226570:	55                   	push   rbp
  226571:	48 89 e5             	mov    rbp,rsp
  226574:	48 81 ec a0 01 00 00 	sub    rsp,0x1a0
  22657b:	48 89 f8             	mov    rax,rdi
  22657e:	48 89 95 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdx
  226585:	4c 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],r8
  22658c:	41 81 e1 ff ff ff 1f 	and    r9d,0x1fffffff
  226593:	44 89 8d 64 ff ff ff 	mov    DWORD PTR [rbp-0x9c],r9d
        const self = @fieldParentPtr(DirectAllocator, "allocator", allocator);
  22659a:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  2265a1:	48 89 95 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdx
                if (new_size <= old_mem.len) {
  2265a8:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  2265af:	48 3b 51 08          	cmp    rdx,QWORD PTR [rcx+0x8]
  2265b3:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  2265ba:	48 89 bd 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdi
  2265c1:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
  2265c8:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  2265cf:	0f 87 04 01 00 00    	ja     2266d9 <DirectAllocator_realloc+0x169>
                    const base_addr = @ptrToInt(old_mem.ptr);
  2265d5:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  2265dc:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  2265df:	48 89 8d 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rcx
                    const old_addr_end = base_addr + old_mem.len;
  2265e6:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
  2265ed:	48 03 48 08          	add    rcx,QWORD PTR [rax+0x8]
  2265f1:	0f 92 c2             	setb   dl
  2265f4:	48 89 8d f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rcx
  2265fb:	88 95 f7 fe ff ff    	mov    BYTE PTR [rbp-0x109],dl
  226601:	0f 82 d4 01 00 00    	jb     2267db <DirectAllocator_realloc+0x26b>
  226607:	e9 df 01 00 00       	jmp    2267eb <DirectAllocator_realloc+0x27b>
  22660c:	31 c0                	xor    eax,eax
  22660e:	89 c1                	mov    ecx,eax
                    const new_addr_end_rounded = new_addr_end + if (rem == 0) 0 else (os.page_size - rem);
  226610:	48 89 8d e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rcx
  226617:	eb 29                	jmp    226642 <DirectAllocator_realloc+0xd2>
  226619:	b8 00 10 00 00       	mov    eax,0x1000
  22661e:	89 c1                	mov    ecx,eax
  226620:	48 2b 8d 38 ff ff ff 	sub    rcx,QWORD PTR [rbp-0xc8]
  226627:	0f 92 c2             	setb   dl
  22662a:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
  226631:	88 95 df fe ff ff    	mov    BYTE PTR [rbp-0x121],dl
  226637:	0f 82 58 02 00 00    	jb     226895 <DirectAllocator_realloc+0x325>
  22663d:	e9 63 02 00 00       	jmp    2268a5 <DirectAllocator_realloc+0x335>
  226642:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  226649:	48 8b 8d d0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x130]
  226650:	48 01 c1             	add    rcx,rax
  226653:	0f 92 c2             	setb   dl
  226656:	48 89 8d c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rcx
  22665d:	88 95 c7 fe ff ff    	mov    BYTE PTR [rbp-0x139],dl
  226663:	0f 82 4f 02 00 00    	jb     2268b8 <DirectAllocator_realloc+0x348>
  226669:	e9 5a 02 00 00       	jmp    2268c8 <DirectAllocator_realloc+0x358>
                        _ = os.posix.munmap(new_addr_end_rounded, old_addr_end - new_addr_end_rounded);
  22666e:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
  226675:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  22667c:	48 2b 85 30 ff ff ff 	sub    rax,QWORD PTR [rbp-0xd0]
  226683:	0f 92 c1             	setb   cl
  226686:	48 89 bd b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rdi
  22668d:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  226694:	88 8d af fe ff ff    	mov    BYTE PTR [rbp-0x151],cl
  22669a:	0f 82 4f 02 00 00    	jb     2268ef <DirectAllocator_realloc+0x37f>
  2266a0:	e9 5a 02 00 00       	jmp    2268ff <DirectAllocator_realloc+0x38f>
                    if (old_addr_end > new_addr_end_rounded) {
  2266a5:	eb 00                	jmp    2266a7 <DirectAllocator_realloc+0x137>
  2266a7:	31 c0                	xor    eax,eax
  2266a9:	89 c1                	mov    ecx,eax
                    return old_mem[0..new_size];
  2266ab:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  2266b2:	48 8b b5 00 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x100]
  2266b9:	48 8b 7e 08          	mov    rdi,QWORD PTR [rsi+0x8]
  2266bd:	48 39 d1             	cmp    rcx,rdx
  2266c0:	48 89 bd a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdi
  2266c7:	48 89 95 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rdx
  2266ce:	0f 86 5a 02 00 00    	jbe    22692e <DirectAllocator_realloc+0x3be>
  2266d4:	e9 45 02 00 00       	jmp    22691e <DirectAllocator_realloc+0x3ae>
                if (new_size <= old_mem.len) {
  2266d9:	eb 00                	jmp    2266db <DirectAllocator_realloc+0x16b>
  2266db:	48 8d 45 c0          	lea    rax,[rbp-0x40]
                const result = try alloc(allocator, new_size, alignment);
  2266df:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  2266e6:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  2266ed:	44 8b 85 64 ff ff ff 	mov    r8d,DWORD PTR [rbp-0x9c]
  2266f4:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  2266f8:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
  2266ff:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  226706:	e8 75 fa ff ff       	call   226180 <DirectAllocator_alloc>
  22670b:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  226710:	74 50                	je     226762 <DirectAllocator_realloc+0x1f2>
  226712:	66 8b 45 c0          	mov    ax,WORD PTR [rbp-0x40]
  226716:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
  22671d:	66 89 85 8e fe ff ff 	mov    WORD PTR [rbp-0x172],ax
  226724:	e8 67 55 fe ff       	call   20bc90 <__zig_return_error>
  226729:	66 8b 85 8e fe ff ff 	mov    ax,WORD PTR [rbp-0x172]
  226730:	66 89 45 90          	mov    WORD PTR [rbp-0x70],ax
  226734:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  226738:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  22673f:	48 89 39             	mov    QWORD PTR [rcx],rdi
  226742:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  226746:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  22674a:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  22674e:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  226752:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  226759:	48 81 c4 a0 01 00 00 	add    rsp,0x1a0
  226760:	5d                   	pop    rbp
  226761:	c3                   	ret    
  226762:	48 8d bd 20 ff ff ff 	lea    rdi,[rbp-0xe0]
  226769:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  22676d:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
  226774:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  226778:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
                mem.copy(u8, result, old_mem);
  22677f:	48 8b b5 00 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x100]
  226786:	e8 a5 e5 ff ff       	call   224d30 <copy>
                return result;
  22678b:	66 c7 85 78 ff ff ff 	mov    WORD PTR [rbp-0x88],0x0
  226792:	00 00 
  226794:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  22679b:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  22679f:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  2267a6:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  2267aa:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  2267b1:	48 8b b5 10 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf0]
  2267b8:	48 89 06             	mov    QWORD PTR [rsi],rax
  2267bb:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  2267bf:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  2267c3:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  2267c7:	48 89 46 10          	mov    QWORD PTR [rsi+0x10],rax
  2267cb:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  2267d2:	48 81 c4 a0 01 00 00 	add    rsp,0x1a0
  2267d9:	5d                   	pop    rbp
  2267da:	c3                   	ret    
  2267db:	48 8d 3d e6 c9 01 00 	lea    rdi,[rip+0x1c9e6]        # 2431c8 <__unnamed_4>
  2267e2:	31 c0                	xor    eax,eax
  2267e4:	89 c6                	mov    esi,eax
                    const old_addr_end = base_addr + old_mem.len;
  2267e6:	e8 15 4e fe ff       	call   20b600 <panic>
  2267eb:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  2267f2:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
                    const new_addr_end = base_addr + new_size;
  2267f9:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
  226800:	48 03 8d 68 ff ff ff 	add    rcx,QWORD PTR [rbp-0x98]
  226807:	0f 92 c2             	setb   dl
  22680a:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  226811:	88 95 7f fe ff ff    	mov    BYTE PTR [rbp-0x181],dl
  226817:	72 02                	jb     22681b <DirectAllocator_realloc+0x2ab>
  226819:	eb 10                	jmp    22682b <DirectAllocator_realloc+0x2bb>
  22681b:	48 8d 3d a6 c9 01 00 	lea    rdi,[rip+0x1c9a6]        # 2431c8 <__unnamed_4>
  226822:	31 c0                	xor    eax,eax
  226824:	89 c6                	mov    esi,eax
  226826:	e8 d5 4d fe ff       	call   20b600 <panic>
  22682b:	31 c0                	xor    eax,eax
  22682d:	88 c1                	mov    cl,al
  22682f:	48 8b 95 80 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x180]
  226836:	48 89 95 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rdx
                    const rem = @rem(new_addr_end, os.page_size);
  22683d:	48 8b b5 40 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc0]
  226844:	f6 c1 01             	test   cl,0x1
  226847:	48 89 b5 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rsi
  22684e:	75 35                	jne    226885 <DirectAllocator_realloc+0x315>
  226850:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  226857:	48 25 ff 0f 00 00    	and    rax,0xfff
  22685d:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
                    const new_addr_end_rounded = new_addr_end + if (rem == 0) 0 else (os.page_size - rem);
  226864:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  22686b:	48 83 bd 38 ff ff ff 	cmp    QWORD PTR [rbp-0xc8],0x0
  226872:	00 
  226873:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  22687a:	0f 84 8c fd ff ff    	je     22660c <DirectAllocator_realloc+0x9c>
  226880:	e9 94 fd ff ff       	jmp    226619 <DirectAllocator_realloc+0xa9>
  226885:	48 8d 3d 6c ca 01 00 	lea    rdi,[rip+0x1ca6c]        # 2432f8 <__unnamed_15>
  22688c:	31 c0                	xor    eax,eax
  22688e:	89 c6                	mov    esi,eax
                    const rem = @rem(new_addr_end, os.page_size);
  226890:	e8 6b 4d fe ff       	call   20b600 <panic>
  226895:	48 8d 3d 2c c9 01 00 	lea    rdi,[rip+0x1c92c]        # 2431c8 <__unnamed_4>
  22689c:	31 c0                	xor    eax,eax
  22689e:	89 c6                	mov    esi,eax
                    const new_addr_end_rounded = new_addr_end + if (rem == 0) 0 else (os.page_size - rem);
  2268a0:	e8 5b 4d fe ff       	call   20b600 <panic>
  2268a5:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
  2268ac:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  2268b3:	e9 8a fd ff ff       	jmp    226642 <DirectAllocator_realloc+0xd2>
  2268b8:	48 8d 3d 09 c9 01 00 	lea    rdi,[rip+0x1c909]        # 2431c8 <__unnamed_4>
  2268bf:	31 c0                	xor    eax,eax
  2268c1:	89 c6                	mov    esi,eax
  2268c3:	e8 38 4d fe ff       	call   20b600 <panic>
  2268c8:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  2268cf:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
                    if (old_addr_end > new_addr_end_rounded) {
  2268d6:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
  2268dd:	48 3b 8d 30 ff ff ff 	cmp    rcx,QWORD PTR [rbp-0xd0]
  2268e4:	0f 87 84 fd ff ff    	ja     22666e <DirectAllocator_realloc+0xfe>
  2268ea:	e9 b6 fd ff ff       	jmp    2266a5 <DirectAllocator_realloc+0x135>
  2268ef:	48 8d 3d d2 c8 01 00 	lea    rdi,[rip+0x1c8d2]        # 2431c8 <__unnamed_4>
  2268f6:	31 c0                	xor    eax,eax
  2268f8:	89 c6                	mov    esi,eax
                        _ = os.posix.munmap(new_addr_end_rounded, old_addr_end - new_addr_end_rounded);
  2268fa:	e8 01 4d fe ff       	call   20b600 <panic>
  2268ff:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  226906:	48 8b b5 b0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x150]
  22690d:	e8 ae 6c fe ff       	call   20d5c0 <munmap>
                    if (old_addr_end > new_addr_end_rounded) {
  226912:	48 89 85 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rax
  226919:	e9 89 fd ff ff       	jmp    2266a7 <DirectAllocator_realloc+0x137>
  22691e:	48 8d 3d d3 ca 01 00 	lea    rdi,[rip+0x1cad3]        # 2433f8 <__unnamed_20>
  226925:	31 c0                	xor    eax,eax
  226927:	89 c6                	mov    esi,eax
                    return old_mem[0..new_size];
  226929:	e8 d2 4c fe ff       	call   20b600 <panic>
  22692e:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
  226935:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
  22693c:	48 39 c8             	cmp    rax,rcx
  22693f:	76 10                	jbe    226951 <DirectAllocator_realloc+0x3e1>
  226941:	48 8d 3d b0 ca 01 00 	lea    rdi,[rip+0x1cab0]        # 2433f8 <__unnamed_20>
  226948:	31 c0                	xor    eax,eax
  22694a:	89 c6                	mov    esi,eax
  22694c:	e8 af 4c fe ff       	call   20b600 <panic>
  226951:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  226958:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22695b:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  22695f:	48 8b 8d 98 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x168]
  226966:	48 83 e9 00          	sub    rcx,0x0
  22696a:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  22696e:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  226974:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  226978:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  22697c:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  226980:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  226984:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  226988:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
  22698f:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  226992:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  226996:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  22699a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22699e:	48 89 4a 10          	mov    QWORD PTR [rdx+0x10],rcx
  2269a2:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  2269a9:	48 81 c4 a0 01 00 00 	add    rsp,0x1a0
  2269b0:	5d                   	pop    rbp
  2269b1:	c3                   	ret    
  2269b2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2269b9:	1f 84 00 00 00 00 00 

00000000002269c0 <DirectAllocator_free>:
    fn free(allocator: *Allocator, bytes: []u8) void {
  2269c0:	55                   	push   rbp
  2269c1:	48 89 e5             	mov    rbp,rsp
  2269c4:	48 83 ec 20          	sub    rsp,0x20
  2269c8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
        const self = @fieldParentPtr(DirectAllocator, "allocator", allocator);
  2269cc:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  2269d0:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
                _ = os.posix.munmap(@ptrToInt(bytes.ptr), bytes.len);
  2269d4:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  2269d7:	48 8b 76 08          	mov    rsi,QWORD PTR [rsi+0x8]
  2269db:	e8 e0 6b fe ff       	call   20d5c0 <munmap>
    fn free(allocator: *Allocator, bytes: []u8) void {
  2269e0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  2269e4:	48 83 c4 20          	add    rsp,0x20
  2269e8:	5d                   	pop    rbp
  2269e9:	c3                   	ret    
  2269ea:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000002269f0 <BaseLinkedList([]u8,void,(struct []const u8 constant))_init>:

        /// Initialize a linked list.
        ///
        /// Returns:
        ///     An empty linked list.
        pub fn init() Self {
  2269f0:	55                   	push   rbp
  2269f1:	48 89 e5             	mov    rbp,rsp
  2269f4:	48 89 f8             	mov    rax,rdi
            return Self{
  2269f7:	48 8b 0d b2 3d fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe3db2]        # 20a7b0 <__unnamed_176>
  2269fe:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  226a01:	48 8b 0d b0 3d fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe3db0]        # 20a7b8 <__unnamed_176+0x8>
  226a08:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  226a0c:	48 8b 0d ad 3d fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe3dad]        # 20a7c0 <__unnamed_176+0x10>
  226a13:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  226a17:	5d                   	pop    rbp
  226a18:	c3                   	ret    
  226a19:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000226a20 <ArenaAllocator_alloc>:
    fn alloc(allocator: *Allocator, n: usize, alignment: u29) ![]u8 {
  226a20:	55                   	push   rbp
  226a21:	48 89 e5             	mov    rbp,rsp
  226a24:	48 81 ec 00 02 00 00 	sub    rsp,0x200
  226a2b:	48 89 f8             	mov    rax,rdi
  226a2e:	48 89 95 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdx
  226a35:	48 89 8d 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rcx
  226a3c:	41 81 e0 ff ff ff 1f 	and    r8d,0x1fffffff
  226a43:	44 89 85 44 ff ff ff 	mov    DWORD PTR [rbp-0xbc],r8d
        const self = @fieldParentPtr(ArenaAllocator, "allocator", allocator);
  226a4a:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
  226a51:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
        var cur_node = if (self.buffer_list.last) |last_node| last_node else try self.createNode(0, n + alignment);
  226a58:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
  226a5f:	48 89 ca             	mov    rdx,rcx
  226a62:	48 83 c2 20          	add    rdx,0x20
  226a66:	48 83 c2 08          	add    rdx,0x8
  226a6a:	48 83 79 28 00       	cmp    QWORD PTR [rcx+0x28],0x0
  226a6f:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
  226a76:	48 89 bd d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rdi
  226a7d:	48 89 b5 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rsi
  226a84:	48 89 95 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rdx
  226a8b:	74 24                	je     226ab1 <ArenaAllocator_alloc+0x91>
  226a8d:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  226a94:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  226a97:	48 89 8d 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rcx
  226a9e:	48 8b 8d 30 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd0]
  226aa5:	48 89 8d b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rcx
  226aac:	e9 98 00 00 00       	jmp    226b49 <ArenaAllocator_alloc+0x129>
  226ab1:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
  226ab8:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  226abf:	8b 8d 44 ff ff ff    	mov    ecx,DWORD PTR [rbp-0xbc]
  226ac5:	89 ce                	mov    esi,ecx
  226ac7:	48 01 f0             	add    rax,rsi
  226aca:	40 0f 92 c7          	setb   dil
  226ace:	48 89 95 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rdx
  226ad5:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
  226adc:	40 88 bd a7 fe ff ff 	mov    BYTE PTR [rbp-0x159],dil
  226ae3:	0f 82 01 02 00 00    	jb     226cea <ArenaAllocator_alloc+0x2ca>
  226ae9:	e9 0c 02 00 00       	jmp    226cfa <ArenaAllocator_alloc+0x2da>
  226aee:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  226af2:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  226af9:	66 89 85 a4 fe ff ff 	mov    WORD PTR [rbp-0x15c],ax
  226b00:	e8 8b 51 fe ff       	call   20bc90 <__zig_return_error>
  226b05:	66 8b 85 a4 fe ff ff 	mov    ax,WORD PTR [rbp-0x15c]
  226b0c:	66 89 45 c8          	mov    WORD PTR [rbp-0x38],ax
  226b10:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  226b14:	48 8b 8d d0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x130]
  226b1b:	48 89 39             	mov    QWORD PTR [rcx],rdi
  226b1e:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  226b22:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  226b26:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  226b2a:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  226b2e:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  226b35:	48 81 c4 00 02 00 00 	add    rsp,0x200
  226b3c:	5d                   	pop    rbp
  226b3d:	c3                   	ret    
  226b3e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  226b42:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
  226b49:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  226b50:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
        while (true) {
  226b57:	eb 00                	jmp    226b59 <ArenaAllocator_alloc+0x139>
  226b59:	b8 20 00 00 00       	mov    eax,0x20
  226b5e:	89 c1                	mov    ecx,eax
            const cur_buf = cur_node.data[@sizeOf(BufNode)..];
  226b60:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
  226b67:	48 89 d6             	mov    rsi,rdx
  226b6a:	48 83 c6 10          	add    rsi,0x10
  226b6e:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
  226b72:	48 39 d1             	cmp    rcx,rdx
  226b75:	48 89 95 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rdx
  226b7c:	48 89 b5 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rsi
  226b83:	0f 86 b3 01 00 00    	jbe    226d3c <ArenaAllocator_alloc+0x31c>
  226b89:	e9 9e 01 00 00       	jmp    226d2c <ArenaAllocator_alloc+0x30c>
  226b8e:	31 c0                	xor    eax,eax
  226b90:	89 c1                	mov    ecx,eax
            const march_forward_bytes = if (rem == 0) 0 else (alignment - rem);
  226b92:	48 89 8d 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rcx
  226b99:	eb 2f                	jmp    226bca <ArenaAllocator_alloc+0x1aa>
  226b9b:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  226ba2:	8b 8d 44 ff ff ff    	mov    ecx,DWORD PTR [rbp-0xbc]
  226ba8:	89 ca                	mov    edx,ecx
  226baa:	48 29 c2             	sub    rdx,rax
  226bad:	40 0f 92 c6          	setb   sil
  226bb1:	48 89 95 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rdx
  226bb8:	40 88 b5 7f fe ff ff 	mov    BYTE PTR [rbp-0x181],sil
  226bbf:	0f 82 56 02 00 00    	jb     226e1b <ArenaAllocator_alloc+0x3fb>
  226bc5:	e9 61 02 00 00       	jmp    226e2b <ArenaAllocator_alloc+0x40b>
  226bca:	48 8b 85 88 fe ff ff 	mov    rax,QWORD PTR [rbp-0x178]
  226bd1:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
            const adjusted_index = self.end_index + march_forward_bytes;
  226bd8:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  226bdf:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
  226be3:	48 03 85 00 ff ff ff 	add    rax,QWORD PTR [rbp-0x100]
  226bea:	0f 92 c1             	setb   cl
  226bed:	48 89 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rax
  226bf4:	88 8d 6f fe ff ff    	mov    BYTE PTR [rbp-0x191],cl
  226bfa:	0f 82 3e 02 00 00    	jb     226e3e <ArenaAllocator_alloc+0x41e>
  226c00:	e9 49 02 00 00       	jmp    226e4e <ArenaAllocator_alloc+0x42e>
                cur_node = try self.createNode(cur_buf.len, n + alignment);
  226c05:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
  226c0c:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  226c13:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  226c1a:	8b b5 44 ff ff ff    	mov    esi,DWORD PTR [rbp-0xbc]
  226c20:	89 f7                	mov    edi,esi
  226c22:	48 01 f8             	add    rax,rdi
  226c25:	41 0f 92 c0          	setb   r8b
  226c29:	48 89 95 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rdx
  226c30:	48 89 8d 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rcx
  226c37:	48 89 85 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rax
  226c3e:	44 88 85 4f fe ff ff 	mov    BYTE PTR [rbp-0x1b1],r8b
  226c45:	0f 82 6a 02 00 00    	jb     226eb5 <ArenaAllocator_alloc+0x495>
  226c4b:	e9 75 02 00 00       	jmp    226ec5 <ArenaAllocator_alloc+0x4a5>
  226c50:	66 8b 45 a8          	mov    ax,WORD PTR [rbp-0x58]
  226c54:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  226c5b:	66 89 85 4c fe ff ff 	mov    WORD PTR [rbp-0x1b4],ax
  226c62:	e8 29 50 fe ff       	call   20bc90 <__zig_return_error>
  226c67:	66 8b 85 4c fe ff ff 	mov    ax,WORD PTR [rbp-0x1b4]
  226c6e:	66 89 45 80          	mov    WORD PTR [rbp-0x80],ax
  226c72:	48 8b 7d 80          	mov    rdi,QWORD PTR [rbp-0x80]
  226c76:	48 8b 8d d0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x130]
  226c7d:	48 89 39             	mov    QWORD PTR [rcx],rdi
  226c80:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  226c84:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  226c88:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  226c8c:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  226c90:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  226c97:	48 81 c4 00 02 00 00 	add    rsp,0x200
  226c9e:	5d                   	pop    rbp
  226c9f:	c3                   	ret    
  226ca0:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  226ca4:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
                continue;
  226cab:	e9 a7 fe ff ff       	jmp    226b57 <ArenaAllocator_alloc+0x137>
            if (new_end_index > cur_buf.len) {
  226cb0:	eb 00                	jmp    226cb2 <ArenaAllocator_alloc+0x292>
            const result = cur_buf[adjusted_index..new_end_index];
  226cb2:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  226cb9:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  226cc0:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
  226cc7:	48 39 c8             	cmp    rax,rcx
  226cca:	48 89 85 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rax
  226cd1:	48 89 8d 38 fe ff ff 	mov    QWORD PTR [rbp-0x1c8],rcx
  226cd8:	48 89 95 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rdx
  226cdf:	0f 86 25 02 00 00    	jbe    226f0a <ArenaAllocator_alloc+0x4ea>
  226ce5:	e9 10 02 00 00       	jmp    226efa <ArenaAllocator_alloc+0x4da>
  226cea:	48 8d 3d d7 c4 01 00 	lea    rdi,[rip+0x1c4d7]        # 2431c8 <__unnamed_4>
  226cf1:	31 c0                	xor    eax,eax
  226cf3:	89 c6                	mov    esi,eax
        var cur_node = if (self.buffer_list.last) |last_node| last_node else try self.createNode(0, n + alignment);
  226cf5:	e8 06 49 fe ff       	call   20b600 <panic>
  226cfa:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  226cfe:	31 c0                	xor    eax,eax
  226d00:	89 c1                	mov    ecx,eax
  226d02:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  226d09:	48 8b 95 b0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x150]
  226d10:	4c 8b 85 a8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x158]
  226d17:	e8 a4 1c 00 00       	call   2289c0 <ArenaAllocator_createNode>
  226d1c:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  226d21:	0f 85 c7 fd ff ff    	jne    226aee <ArenaAllocator_alloc+0xce>
  226d27:	e9 12 fe ff ff       	jmp    226b3e <ArenaAllocator_alloc+0x11e>
  226d2c:	48 8d 3d c5 c6 01 00 	lea    rdi,[rip+0x1c6c5]        # 2433f8 <__unnamed_20>
  226d33:	31 c0                	xor    eax,eax
  226d35:	89 c6                	mov    esi,eax
            const cur_buf = cur_node.data[@sizeOf(BufNode)..];
  226d37:	e8 c4 48 fe ff       	call   20b600 <panic>
  226d3c:	48 8b 85 90 fe ff ff 	mov    rax,QWORD PTR [rbp-0x170]
  226d43:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  226d46:	48 83 c1 20          	add    rcx,0x20
  226d4a:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
  226d4e:	48 8b 8d 98 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x168]
  226d55:	48 83 e9 20          	sub    rcx,0x20
  226d59:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
  226d5d:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  226d61:	48 89 8d 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rcx
  226d68:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  226d6c:	48 89 8d 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rcx
            const addr = @ptrToInt(cur_buf.ptr) + self.end_index;
  226d73:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
  226d7a:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
  226d81:	48 03 4a 38          	add    rcx,QWORD PTR [rdx+0x38]
  226d85:	40 0f 92 c6          	setb   sil
  226d89:	48 89 8d 28 fe ff ff 	mov    QWORD PTR [rbp-0x1d8],rcx
  226d90:	40 88 b5 27 fe ff ff 	mov    BYTE PTR [rbp-0x1d9],sil
  226d97:	72 02                	jb     226d9b <ArenaAllocator_alloc+0x37b>
  226d99:	eb 10                	jmp    226dab <ArenaAllocator_alloc+0x38b>
  226d9b:	48 8d 3d 26 c4 01 00 	lea    rdi,[rip+0x1c426]        # 2431c8 <__unnamed_4>
  226da2:	31 c0                	xor    eax,eax
  226da4:	89 c6                	mov    esi,eax
  226da6:	e8 55 48 fe ff       	call   20b600 <panic>
  226dab:	48 8b 85 28 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d8]
  226db2:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
            const rem = @rem(addr, alignment);
  226db9:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  226dc0:	8b 8d 44 ff ff ff    	mov    ecx,DWORD PTR [rbp-0xbc]
  226dc6:	89 ca                	mov    edx,ecx
  226dc8:	48 83 fa 00          	cmp    rdx,0x0
  226dcc:	48 89 85 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],rax
  226dd3:	48 89 95 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rdx
  226dda:	74 2f                	je     226e0b <ArenaAllocator_alloc+0x3eb>
  226ddc:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
  226de3:	31 c9                	xor    ecx,ecx
  226de5:	89 ca                	mov    edx,ecx
  226de7:	48 8b b5 10 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1f0]
  226dee:	48 f7 f6             	div    rsi
  226df1:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
            const march_forward_bytes = if (rem == 0) 0 else (alignment - rem);
  226df8:	48 83 bd 08 ff ff ff 	cmp    QWORD PTR [rbp-0xf8],0x0
  226dff:	00 
  226e00:	0f 84 88 fd ff ff    	je     226b8e <ArenaAllocator_alloc+0x16e>
  226e06:	e9 90 fd ff ff       	jmp    226b9b <ArenaAllocator_alloc+0x17b>
  226e0b:	48 8d 3d e6 c4 01 00 	lea    rdi,[rip+0x1c4e6]        # 2432f8 <__unnamed_15>
  226e12:	31 c0                	xor    eax,eax
  226e14:	89 c6                	mov    esi,eax
            const rem = @rem(addr, alignment);
  226e16:	e8 e5 47 fe ff       	call   20b600 <panic>
  226e1b:	48 8d 3d a6 c3 01 00 	lea    rdi,[rip+0x1c3a6]        # 2431c8 <__unnamed_4>
  226e22:	31 c0                	xor    eax,eax
  226e24:	89 c6                	mov    esi,eax
            const march_forward_bytes = if (rem == 0) 0 else (alignment - rem);
  226e26:	e8 d5 47 fe ff       	call   20b600 <panic>
  226e2b:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
  226e32:	48 89 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rax
  226e39:	e9 8c fd ff ff       	jmp    226bca <ArenaAllocator_alloc+0x1aa>
  226e3e:	48 8d 3d 83 c3 01 00 	lea    rdi,[rip+0x1c383]        # 2431c8 <__unnamed_4>
  226e45:	31 c0                	xor    eax,eax
  226e47:	89 c6                	mov    esi,eax
            const adjusted_index = self.end_index + march_forward_bytes;
  226e49:	e8 b2 47 fe ff       	call   20b600 <panic>
  226e4e:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  226e55:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
            const new_end_index = adjusted_index + n;
  226e5c:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  226e63:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  226e6a:	0f 92 c2             	setb   dl
  226e6d:	48 89 8d 08 fe ff ff 	mov    QWORD PTR [rbp-0x1f8],rcx
  226e74:	88 95 07 fe ff ff    	mov    BYTE PTR [rbp-0x1f9],dl
  226e7a:	72 02                	jb     226e7e <ArenaAllocator_alloc+0x45e>
  226e7c:	eb 10                	jmp    226e8e <ArenaAllocator_alloc+0x46e>
  226e7e:	48 8d 3d 43 c3 01 00 	lea    rdi,[rip+0x1c343]        # 2431c8 <__unnamed_4>
  226e85:	31 c0                	xor    eax,eax
  226e87:	89 c6                	mov    esi,eax
  226e89:	e8 72 47 fe ff       	call   20b600 <panic>
  226e8e:	48 8b 85 08 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1f8]
  226e95:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
            if (new_end_index > cur_buf.len) {
  226e9c:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  226ea3:	48 3b 8d 20 ff ff ff 	cmp    rcx,QWORD PTR [rbp-0xe0]
  226eaa:	0f 87 55 fd ff ff    	ja     226c05 <ArenaAllocator_alloc+0x1e5>
  226eb0:	e9 fb fd ff ff       	jmp    226cb0 <ArenaAllocator_alloc+0x290>
  226eb5:	48 8d 3d 0c c3 01 00 	lea    rdi,[rip+0x1c30c]        # 2431c8 <__unnamed_4>
  226ebc:	31 c0                	xor    eax,eax
  226ebe:	89 c6                	mov    esi,eax
                cur_node = try self.createNode(cur_buf.len, n + alignment);
  226ec0:	e8 3b 47 fe ff       	call   20b600 <panic>
  226ec5:	48 8d 7d a8          	lea    rdi,[rbp-0x58]
  226ec9:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  226ed0:	48 8b 95 60 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1a0]
  226ed7:	48 8b 8d 58 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1a8]
  226ede:	4c 8b 85 50 fe ff ff 	mov    r8,QWORD PTR [rbp-0x1b0]
  226ee5:	e8 d6 1a 00 00       	call   2289c0 <ArenaAllocator_createNode>
  226eea:	66 83 7d a8 00       	cmp    WORD PTR [rbp-0x58],0x0
  226eef:	0f 85 5b fd ff ff    	jne    226c50 <ArenaAllocator_alloc+0x230>
  226ef5:	e9 a6 fd ff ff       	jmp    226ca0 <ArenaAllocator_alloc+0x280>
  226efa:	48 8d 3d f7 c4 01 00 	lea    rdi,[rip+0x1c4f7]        # 2433f8 <__unnamed_20>
  226f01:	31 c0                	xor    eax,eax
  226f03:	89 c6                	mov    esi,eax
            const result = cur_buf[adjusted_index..new_end_index];
  226f05:	e8 f6 46 fe ff       	call   20b600 <panic>
  226f0a:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  226f11:	48 8b 8d 30 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d0]
  226f18:	48 39 c8             	cmp    rax,rcx
  226f1b:	76 10                	jbe    226f2d <ArenaAllocator_alloc+0x50d>
  226f1d:	48 8d 3d d4 c4 01 00 	lea    rdi,[rip+0x1c4d4]        # 2433f8 <__unnamed_20>
  226f24:	31 c0                	xor    eax,eax
  226f26:	89 c6                	mov    esi,eax
  226f28:	e8 d3 46 fe ff       	call   20b600 <panic>
  226f2d:	48 8b 85 40 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c0]
  226f34:	48 03 85 18 ff ff ff 	add    rax,QWORD PTR [rbp-0xe8]
  226f3b:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  226f42:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  226f49:	48 8b 8d 40 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1c0]
  226f50:	48 29 c8             	sub    rax,rcx
  226f53:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  226f5a:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  226f61:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
  226f68:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  226f6f:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
            self.end_index = new_end_index;
  226f76:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  226f7d:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  226f84:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
            return result;
  226f88:	66 c7 85 58 ff ff ff 	mov    WORD PTR [rbp-0xa8],0x0
  226f8f:	00 00 
  226f91:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
  226f98:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  226f9f:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  226fa6:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  226fad:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
  226fb4:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
  226fbb:	48 89 02             	mov    QWORD PTR [rdx],rax
  226fbe:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  226fc5:	48 89 42 08          	mov    QWORD PTR [rdx+0x8],rax
  226fc9:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  226fd0:	48 89 42 10          	mov    QWORD PTR [rdx+0x10],rax
  226fd4:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  226fdb:	48 81 c4 00 02 00 00 	add    rsp,0x200
  226fe2:	5d                   	pop    rbp
  226fe3:	c3                   	ret    
  226fe4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  226feb:	00 00 00 00 00 

0000000000226ff0 <ArenaAllocator_realloc>:
    fn realloc(allocator: *Allocator, old_mem: []u8, new_size: usize, alignment: u29) ![]u8 {
  226ff0:	55                   	push   rbp
  226ff1:	48 89 e5             	mov    rbp,rsp
  226ff4:	48 81 ec f0 00 00 00 	sub    rsp,0xf0
  226ffb:	48 89 f8             	mov    rax,rdi
  226ffe:	48 89 95 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdx
  227005:	4c 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],r8
  22700c:	41 81 e1 ff ff ff 1f 	and    r9d,0x1fffffff
  227013:	44 89 8d 64 ff ff ff 	mov    DWORD PTR [rbp-0x9c],r9d
        if (new_size <= old_mem.len) {
  22701a:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  227021:	48 3b 51 08          	cmp    rdx,QWORD PTR [rcx+0x8]
  227025:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  22702c:	48 89 bd 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rdi
  227033:	48 89 b5 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rsi
  22703a:	48 89 8d 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rcx
  227041:	77 32                	ja     227075 <ArenaAllocator_realloc+0x85>
  227043:	31 c0                	xor    eax,eax
  227045:	89 c1                	mov    ecx,eax
            return old_mem[0..new_size];
  227047:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  22704e:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  227055:	48 8b 7e 08          	mov    rdi,QWORD PTR [rsi+0x8]
  227059:	48 39 d1             	cmp    rcx,rdx
  22705c:	48 89 bd 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rdi
  227063:	48 89 95 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdx
  22706a:	0f 86 15 01 00 00    	jbe    227185 <ArenaAllocator_realloc+0x195>
  227070:	e9 00 01 00 00       	jmp    227175 <ArenaAllocator_realloc+0x185>
  227075:	48 8d 45 c0          	lea    rax,[rbp-0x40]
            const result = try alloc(allocator, new_size, alignment);
  227079:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  227080:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  227087:	44 8b 85 64 ff ff ff 	mov    r8d,DWORD PTR [rbp-0x9c]
  22708e:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  227092:	48 8b b5 38 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc8]
  227099:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  2270a0:	e8 7b f9 ff ff       	call   226a20 <ArenaAllocator_alloc>
  2270a5:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  2270aa:	74 50                	je     2270fc <ArenaAllocator_realloc+0x10c>
  2270ac:	66 8b 45 c0          	mov    ax,WORD PTR [rbp-0x40]
  2270b0:	48 8b bd 38 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xc8]
  2270b7:	66 89 85 16 ff ff ff 	mov    WORD PTR [rbp-0xea],ax
  2270be:	e8 cd 4b fe ff       	call   20bc90 <__zig_return_error>
  2270c3:	66 8b 85 16 ff ff ff 	mov    ax,WORD PTR [rbp-0xea]
  2270ca:	66 89 45 90          	mov    WORD PTR [rbp-0x70],ax
  2270ce:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  2270d2:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  2270d9:	48 89 39             	mov    QWORD PTR [rcx],rdi
  2270dc:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  2270e0:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  2270e4:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  2270e8:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  2270ec:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  2270f3:	48 81 c4 f0 00 00 00 	add    rsp,0xf0
  2270fa:	5d                   	pop    rbp
  2270fb:	c3                   	ret    
  2270fc:	48 8d bd 50 ff ff ff 	lea    rdi,[rbp-0xb0]
  227103:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  227107:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
  22710e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  227112:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
            mem.copy(u8, result, old_mem);
  227119:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  227120:	e8 0b dc ff ff       	call   224d30 <copy>
            return result;
  227125:	66 c7 85 78 ff ff ff 	mov    WORD PTR [rbp-0x88],0x0
  22712c:	00 00 
  22712e:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  227135:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  227139:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
  227140:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  227144:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  22714b:	48 8b b5 40 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc0]
  227152:	48 89 06             	mov    QWORD PTR [rsi],rax
  227155:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  227159:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  22715d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  227161:	48 89 46 10          	mov    QWORD PTR [rsi+0x10],rax
  227165:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  22716c:	48 81 c4 f0 00 00 00 	add    rsp,0xf0
  227173:	5d                   	pop    rbp
  227174:	c3                   	ret    
  227175:	48 8d 3d 7c c2 01 00 	lea    rdi,[rip+0x1c27c]        # 2433f8 <__unnamed_20>
  22717c:	31 c0                	xor    eax,eax
  22717e:	89 c6                	mov    esi,eax
            return old_mem[0..new_size];
  227180:	e8 7b 44 fe ff       	call   20b600 <panic>
  227185:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  22718c:	48 8b 8d 28 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd8]
  227193:	48 39 c8             	cmp    rax,rcx
  227196:	76 10                	jbe    2271a8 <ArenaAllocator_realloc+0x1b8>
  227198:	48 8d 3d 59 c2 01 00 	lea    rdi,[rip+0x1c259]        # 2433f8 <__unnamed_20>
  22719f:	31 c0                	xor    eax,eax
  2271a1:	89 c6                	mov    esi,eax
  2271a3:	e8 58 44 fe ff       	call   20b600 <panic>
  2271a8:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  2271af:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  2271b2:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  2271b6:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  2271bd:	48 83 e9 00          	sub    rcx,0x0
  2271c1:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  2271c5:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  2271cb:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  2271cf:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  2271d3:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  2271d7:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  2271db:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  2271df:	48 8b 95 40 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc0]
  2271e6:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  2271e9:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  2271ed:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  2271f1:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2271f5:	48 89 4a 10          	mov    QWORD PTR [rdx+0x10],rcx
  2271f9:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  227200:	48 81 c4 f0 00 00 00 	add    rsp,0xf0
  227207:	5d                   	pop    rbp
  227208:	c3                   	ret    
  227209:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000227210 <ArenaAllocator_free>:
    fn free(allocator: *Allocator, bytes: []u8) void {}
  227210:	55                   	push   rbp
  227211:	48 89 e5             	mov    rbp,rsp
  227214:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  227218:	5d                   	pop    rbp
  227219:	c3                   	ret    
  22721a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000227220 <Allocator_alignedAlloc.97>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  227220:	55                   	push   rbp
  227221:	48 89 e5             	mov    rbp,rsp
  227224:	48 81 ec 20 01 00 00 	sub    rsp,0x120
  22722b:	48 89 f8             	mov    rax,rdi
  22722e:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  227235:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  22723c:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  227243:	00 
  227244:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  22724b:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  227252:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  227259:	75 37                	jne    227292 <Allocator_alignedAlloc.97+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  22725b:	48 8b 05 26 34 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe3426]        # 20a688 <__unnamed_177>
  227262:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  227269:	48 89 01             	mov    QWORD PTR [rcx],rax
  22726c:	48 8b 05 1d 34 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe341d]        # 20a690 <__unnamed_177+0x8>
  227273:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  227277:	48 8b 05 1a 34 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe341a]        # 20a698 <__unnamed_177+0x10>
  22727e:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  227282:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  227289:	48 81 c4 20 01 00 00 	add    rsp,0x120
  227290:	5d                   	pop    rbp
  227291:	c3                   	ret    
        if (n == 0) {
  227292:	eb 00                	jmp    227294 <Allocator_alignedAlloc.97+0x74>
  227294:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  227298:	b8 c8 00 00 00       	mov    eax,0xc8
  22729d:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  22729f:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  2272a6:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  2272ad:	e8 5e e1 fe ff       	call   215410 <mul>
  2272b2:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  2272b7:	74 43                	je     2272fc <Allocator_alignedAlloc.97+0xdc>
  2272b9:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  2272c0:	e8 cb 49 fe ff       	call   20bc90 <__zig_return_error>
  2272c5:	48 8b 3d d4 33 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe33d4]        # 20a6a0 <__unnamed_178>
  2272cc:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  2272d3:	48 89 38             	mov    QWORD PTR [rax],rdi
  2272d6:	48 8b 3d cb 33 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe33cb]        # 20a6a8 <__unnamed_178+0x8>
  2272dd:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  2272e1:	48 8b 3d c8 33 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe33c8]        # 20a6b0 <__unnamed_178+0x10>
  2272e8:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  2272ec:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  2272f3:	48 81 c4 20 01 00 00 	add    rsp,0x120
  2272fa:	5d                   	pop    rbp
  2272fb:	c3                   	ret    
  2272fc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  227300:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  227307:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  22730b:	41 b8 04 00 00 00    	mov    r8d,0x4
  227311:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  227318:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  22731f:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  227326:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  227329:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  227330:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  227337:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  22733e:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  227345:	4c 89 ce             	mov    rsi,r9
  227348:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  22734f:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  227356:	4c 89 d1             	mov    rcx,r10
  227359:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  227360:	41 ff d3             	call   r11
  227363:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  227368:	74 50                	je     2273ba <Allocator_alignedAlloc.97+0x19a>
  22736a:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  22736e:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  227375:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  22737c:	e8 0f 49 fe ff       	call   20bc90 <__zig_return_error>
  227381:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  227388:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  22738c:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  227390:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  227397:	48 89 39             	mov    QWORD PTR [rcx],rdi
  22739a:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  22739e:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  2273a2:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  2273a6:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  2273aa:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  2273b1:	48 81 c4 20 01 00 00 	add    rsp,0x120
  2273b8:	5d                   	pop    rbp
  2273b9:	c3                   	ret    
  2273ba:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2273be:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  2273c5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2273c9:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  2273d0:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  2273d7:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  2273de:	0f 94 c1             	sete   cl
  2273e1:	0f b6 f9             	movzx  edi,cl
  2273e4:	e8 17 3c fe ff       	call   20b000 <assert>
  2273e9:	be aa 00 00 00       	mov    esi,0xaa
  2273ee:	bf 08 00 00 00       	mov    edi,0x8
  2273f3:	89 fa                	mov    edx,edi
  2273f5:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  2273fc:	48 89 c7             	mov    rdi,rax
  2273ff:	e8 ac d4 00 00       	call   2348b0 <memset>
  227404:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  22740b:	00 00 00 00 
  22740f:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  227416:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  22741d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  227424:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  22742b:	48 39 c8             	cmp    rax,rcx
  22742e:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  227435:	73 32                	jae    227469 <Allocator_alignedAlloc.97+0x249>
  227437:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22743e:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  227445:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  22744c:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  227453:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  227455:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22745c:	48 83 c1 01          	add    rcx,0x1
  227460:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  227467:	eb b4                	jmp    22741d <Allocator_alignedAlloc.97+0x1fd>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  227469:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  227470:	48 83 e0 03          	and    rax,0x3
  227474:	48 83 f8 00          	cmp    rax,0x0
  227478:	75 32                	jne    2274ac <Allocator_alignedAlloc.97+0x28c>
  22747a:	b8 c8 00 00 00       	mov    eax,0xc8
  22747f:	89 c1                	mov    ecx,eax
  227481:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
  227488:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
  22748c:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
  227493:	48 89 d0             	mov    rax,rdx
  227496:	31 f6                	xor    esi,esi
  227498:	48 89 95 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdx
  22749f:	89 f2                	mov    edx,esi
  2274a1:	48 f7 f1             	div    rcx
  2274a4:	48 83 fa 00          	cmp    rdx,0x0
  2274a8:	74 12                	je     2274bc <Allocator_alignedAlloc.97+0x29c>
  2274aa:	eb 77                	jmp    227523 <Allocator_alignedAlloc.97+0x303>
  2274ac:	48 8d 3d 1d c1 01 00 	lea    rdi,[rip+0x1c11d]        # 2435d0 <__unnamed_75>
  2274b3:	31 c0                	xor    eax,eax
  2274b5:	89 c6                	mov    esi,eax
  2274b7:	e8 44 41 fe ff       	call   20b600 <panic>
  2274bc:	b8 c8 00 00 00       	mov    eax,0xc8
  2274c1:	89 c1                	mov    ecx,eax
  2274c3:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  2274ca:	31 d2                	xor    edx,edx
  2274cc:	48 f7 f1             	div    rcx
  2274cf:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  2274d3:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  2274da:	00 00 
  2274dc:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  2274e0:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  2274e7:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  2274eb:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  2274ef:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  2274f6:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  2274fd:	48 89 01             	mov    QWORD PTR [rcx],rax
  227500:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  227507:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  22750b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  22750f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  227513:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  22751a:	48 81 c4 20 01 00 00 	add    rsp,0x120
  227521:	5d                   	pop    rbp
  227522:	c3                   	ret    
  227523:	48 8d 3d be c0 01 00 	lea    rdi,[rip+0x1c0be]        # 2435e8 <__unnamed_76>
  22752a:	31 c0                	xor    eax,eax
  22752c:	89 c6                	mov    esi,eax
  22752e:	e8 cd 40 fe ff       	call   20b600 <panic>
  227533:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22753a:	84 00 00 00 00 00 

0000000000227540 <addNullByte>:
    assert(len(c"123456789") == 9);
}

/// Returns a mutable slice with 1 more byte of length which is a null byte.
/// Caller owns the returned memory.
pub fn addNullByte(allocator: *mem.Allocator, slice: []const u8) ![]u8 {
  227540:	55                   	push   rbp
  227541:	48 89 e5             	mov    rbp,rsp
  227544:	48 81 ec c0 00 00 00 	sub    rsp,0xc0
  22754b:	48 89 f8             	mov    rax,rdi
  22754e:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
    const result = try allocator.alloc(u8, slice.len + 1);
  227552:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  227556:	4c 8b 41 08          	mov    r8,QWORD PTR [rcx+0x8]
  22755a:	49 83 c0 01          	add    r8,0x1
  22755e:	41 0f 92 c1          	setb   r9b
  227562:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  227566:	48 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rcx
  22756d:	48 89 bd 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdi
  227574:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
  22757b:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
  227582:	4c 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],r8
  227589:	44 88 8d 57 ff ff ff 	mov    BYTE PTR [rbp-0xa9],r9b
  227590:	0f 82 8c 00 00 00    	jb     227622 <addNullByte+0xe2>
  227596:	e9 97 00 00 00       	jmp    227632 <addNullByte+0xf2>
  22759b:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  22759f:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  2275a6:	66 89 85 54 ff ff ff 	mov    WORD PTR [rbp-0xac],ax
  2275ad:	e8 de 46 fe ff       	call   20bc90 <__zig_return_error>
  2275b2:	66 8b 85 54 ff ff ff 	mov    ax,WORD PTR [rbp-0xac]
  2275b9:	66 89 45 b8          	mov    WORD PTR [rbp-0x48],ax
  2275bd:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  2275c1:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
  2275c8:	48 89 39             	mov    QWORD PTR [rcx],rdi
  2275cb:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  2275cf:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  2275d3:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2275d7:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  2275db:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  2275df:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  2275e6:	5d                   	pop    rbp
  2275e7:	c3                   	ret    
  2275e8:	48 8d 7d 88          	lea    rdi,[rbp-0x78]
  2275ec:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2275f0:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  2275f4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2275f8:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
    mem.copy(u8, result, slice);
  2275fc:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
  227603:	e8 28 d7 ff ff       	call   224d30 <copy>
    result[slice.len] = 0;
  227608:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  22760f:	48 8b 70 08          	mov    rsi,QWORD PTR [rax+0x8]
  227613:	48 3b 75 90          	cmp    rsi,QWORD PTR [rbp-0x70]
  227617:	48 89 b5 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rsi
  22761e:	72 4d                	jb     22766d <addNullByte+0x12d>
  227620:	eb 3b                	jmp    22765d <addNullByte+0x11d>
  227622:	48 8d 3d 9f bb 01 00 	lea    rdi,[rip+0x1bb9f]        # 2431c8 <__unnamed_4>
  227629:	31 c0                	xor    eax,eax
  22762b:	89 c6                	mov    esi,eax
    const result = try allocator.alloc(u8, slice.len + 1);
  22762d:	e8 ce 3f fe ff       	call   20b600 <panic>
  227632:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
  227636:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
  22763d:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  227644:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  22764b:	e8 50 ae ff ff       	call   2224a0 <Allocator_alloc.74>
  227650:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  227655:	0f 85 40 ff ff ff    	jne    22759b <addNullByte+0x5b>
  22765b:	eb 8b                	jmp    2275e8 <addNullByte+0xa8>
  22765d:	48 8d 3d 94 bd 01 00 	lea    rdi,[rip+0x1bd94]        # 2433f8 <__unnamed_20>
  227664:	31 c0                	xor    eax,eax
  227666:	89 c6                	mov    esi,eax
    result[slice.len] = 0;
  227668:	e8 93 3f fe ff       	call   20b600 <panic>
  22766d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  227671:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
  227678:	c6 04 08 00          	mov    BYTE PTR [rax+rcx*1],0x0
    return result;
  22767c:	66 c7 45 a0 00 00    	mov    WORD PTR [rbp-0x60],0x0
  227682:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  227686:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  22768a:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  22768e:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  227692:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  227696:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  22769d:	48 89 02             	mov    QWORD PTR [rdx],rax
  2276a0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  2276a4:	48 89 42 08          	mov    QWORD PTR [rdx+0x8],rax
  2276a8:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  2276ac:	48 89 42 10          	mov    QWORD PTR [rdx+0x10],rax
  2276b0:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  2276b4:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  2276bb:	5d                   	pop    rbp
  2276bc:	c3                   	ret    
  2276bd:	0f 1f 00             	nop    DWORD PTR [rax]

00000000002276c0 <posixOpenC>:
pub fn posixOpenC(file_path: [*]const u8, flags: u32, perm: usize) !i32 {
  2276c0:	55                   	push   rbp
  2276c1:	48 89 e5             	mov    rbp,rsp
  2276c4:	48 83 ec 70          	sub    rsp,0x70
  2276c8:	48 89 f8             	mov    rax,rdi
  2276cb:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  2276cf:	89 4d e4             	mov    DWORD PTR [rbp-0x1c],ecx
  2276d2:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
  2276d6:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  2276da:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
  2276de:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
    while (true) {
  2276e2:	eb 00                	jmp    2276e4 <posixOpenC+0x24>
        const result = posix.open(file_path, flags, perm);
  2276e4:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  2276e8:	8b 75 e4             	mov    esi,DWORD PTR [rbp-0x1c]
  2276eb:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  2276ef:	e8 6c 1b 00 00       	call   229260 <open>
  2276f4:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
        const err = posix.getErrno(result);
  2276f8:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  2276fc:	e8 7f 59 fe ff       	call   20d080 <getErrno>
  227701:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
        if (err > 0) {
  227705:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
  22770a:	0f 86 57 02 00 00    	jbe    227967 <posixOpenC+0x2a7>
            switch (err) {
  227710:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  227714:	48 83 c0 ff          	add    rax,0xffffffffffffffff
  227718:	48 89 c1             	mov    rcx,rax
  22771b:	48 83 e9 4a          	sub    rcx,0x4a
  22771f:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  227723:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
  227727:	77 14                	ja     22773d <posixOpenC+0x7d>
  227729:	48 8d 05 9c 96 fd ff 	lea    rax,[rip+0xfffffffffffd969c]        # 200dcc <__unnamed_181+0x114>
  227730:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  227734:	48 63 14 88          	movsxd rdx,DWORD PTR [rax+rcx*4]
  227738:	48 01 c2             	add    rdx,rax
  22773b:	ff e2                	jmp    rdx
                else => return unexpectedErrorPosix(err),
  22773d:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  227741:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  227745:	e8 d6 59 fe ff       	call   20d120 <unexpectedErrorPosix>
  22774a:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  22774e:	66 89 45 9e          	mov    WORD PTR [rbp-0x62],ax
  227752:	e8 39 45 fe ff       	call   20bc90 <__zig_return_error>
  227757:	66 8b 45 9e          	mov    ax,WORD PTR [rbp-0x62]
  22775b:	66 89 45 f8          	mov    WORD PTR [rbp-0x8],ax
  22775f:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  227763:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  227767:	48 89 37             	mov    QWORD PTR [rdi],rsi
  22776a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  22776e:	48 83 c4 70          	add    rsp,0x70
  227772:	5d                   	pop    rbp
  227773:	c3                   	ret    
                posix.EINTR => continue,
  227774:	e9 69 ff ff ff       	jmp    2276e2 <posixOpenC+0x22>
  227779:	48 8d 3d 90 bb 01 00 	lea    rdi,[rip+0x1bb90]        # 243310 <__unnamed_13>
  227780:	31 c0                	xor    eax,eax
  227782:	89 c6                	mov    esi,eax
                posix.EFAULT => unreachable,
  227784:	e8 77 3e fe ff       	call   20b600 <panic>
  227789:	48 8d 3d 80 bb 01 00 	lea    rdi,[rip+0x1bb80]        # 243310 <__unnamed_13>
  227790:	31 c0                	xor    eax,eax
  227792:	89 c6                	mov    esi,eax
                posix.EINVAL => unreachable,
  227794:	e8 67 3e fe ff       	call   20b600 <panic>
                posix.EACCES => return PosixOpenError.AccessDenied,
  227799:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  22779d:	e8 ee 44 fe ff       	call   20bc90 <__zig_return_error>
  2277a2:	48 8b 3d d7 94 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffd94d7]        # 200c80 <__unnamed_179>
  2277a9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  2277ad:	48 89 38             	mov    QWORD PTR [rax],rdi
  2277b0:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  2277b4:	48 83 c4 70          	add    rsp,0x70
  2277b8:	5d                   	pop    rbp
  2277b9:	c3                   	ret    
                posix.EFBIG, posix.EOVERFLOW => return PosixOpenError.FileTooBig,
  2277ba:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  2277be:	e8 cd 44 fe ff       	call   20bc90 <__zig_return_error>
  2277c3:	48 8b 3d e6 94 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffd94e6]        # 200cb0 <__unnamed_180>
  2277ca:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  2277ce:	48 89 38             	mov    QWORD PTR [rax],rdi
  2277d1:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  2277d5:	48 83 c4 70          	add    rsp,0x70
  2277d9:	5d                   	pop    rbp
  2277da:	c3                   	ret    
                posix.EISDIR => return PosixOpenError.IsDir,
  2277db:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  2277df:	e8 ac 44 fe ff       	call   20bc90 <__zig_return_error>
  2277e4:	48 8b 3d cd 94 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffd94cd]        # 200cb8 <__unnamed_181>
  2277eb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  2277ef:	48 89 38             	mov    QWORD PTR [rax],rdi
  2277f2:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  2277f6:	48 83 c4 70          	add    rsp,0x70
  2277fa:	5d                   	pop    rbp
  2277fb:	c3                   	ret    
                posix.ELOOP => return PosixOpenError.SymLinkLoop,
  2277fc:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  227800:	e8 8b 44 fe ff       	call   20bc90 <__zig_return_error>
  227805:	48 8b 3d 54 94 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffd9454]        # 200c60 <__unnamed_182>
  22780c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  227810:	48 89 38             	mov    QWORD PTR [rax],rdi
  227813:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  227817:	48 83 c4 70          	add    rsp,0x70
  22781b:	5d                   	pop    rbp
  22781c:	c3                   	ret    
                posix.EMFILE => return PosixOpenError.ProcessFdQuotaExceeded,
  22781d:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  227821:	e8 6a 44 fe ff       	call   20bc90 <__zig_return_error>
  227826:	48 8b 3d 93 93 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffd9393]        # 200bc0 <__unnamed_183>
  22782d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  227831:	48 89 38             	mov    QWORD PTR [rax],rdi
  227834:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  227838:	48 83 c4 70          	add    rsp,0x70
  22783c:	5d                   	pop    rbp
  22783d:	c3                   	ret    
                posix.ENAMETOOLONG => return PosixOpenError.NameTooLong,
  22783e:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  227842:	e8 49 44 fe ff       	call   20bc90 <__zig_return_error>
  227847:	48 8b 3d 5a 94 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffd945a]        # 200ca8 <__unnamed_184>
  22784e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  227852:	48 89 38             	mov    QWORD PTR [rax],rdi
  227855:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  227859:	48 83 c4 70          	add    rsp,0x70
  22785d:	5d                   	pop    rbp
  22785e:	c3                   	ret    
                posix.ENFILE => return PosixOpenError.SystemFdQuotaExceeded,
  22785f:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  227863:	e8 28 44 fe ff       	call   20bc90 <__zig_return_error>
  227868:	48 8b 3d 61 93 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffd9361]        # 200bd0 <__unnamed_185>
  22786f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  227873:	48 89 38             	mov    QWORD PTR [rax],rdi
  227876:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  22787a:	48 83 c4 70          	add    rsp,0x70
  22787e:	5d                   	pop    rbp
  22787f:	c3                   	ret    
                posix.ENODEV => return PosixOpenError.NoDevice,
  227880:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  227884:	e8 07 44 fe ff       	call   20bc90 <__zig_return_error>
  227889:	48 8b 3d 70 93 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffd9370]        # 200c00 <__unnamed_186>
  227890:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  227894:	48 89 38             	mov    QWORD PTR [rax],rdi
  227897:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  22789b:	48 83 c4 70          	add    rsp,0x70
  22789f:	5d                   	pop    rbp
  2278a0:	c3                   	ret    
                posix.ENOENT => return PosixOpenError.PathNotFound,
  2278a1:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  2278a5:	e8 e6 43 fe ff       	call   20bc90 <__zig_return_error>
  2278aa:	48 8b 3d 3f 93 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffd933f]        # 200bf0 <__unnamed_187>
  2278b1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  2278b5:	48 89 38             	mov    QWORD PTR [rax],rdi
  2278b8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  2278bc:	48 83 c4 70          	add    rsp,0x70
  2278c0:	5d                   	pop    rbp
  2278c1:	c3                   	ret    
                posix.ENOMEM => return PosixOpenError.SystemResources,
  2278c2:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  2278c6:	e8 c5 43 fe ff       	call   20bc90 <__zig_return_error>
  2278cb:	48 8b 3d e6 92 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffd92e6]        # 200bb8 <__unnamed_188>
  2278d2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  2278d6:	48 89 38             	mov    QWORD PTR [rax],rdi
  2278d9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  2278dd:	48 83 c4 70          	add    rsp,0x70
  2278e1:	5d                   	pop    rbp
  2278e2:	c3                   	ret    
                posix.ENOSPC => return PosixOpenError.NoSpaceLeft,
  2278e3:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  2278e7:	e8 a4 43 fe ff       	call   20bc90 <__zig_return_error>
  2278ec:	48 8b 3d d5 92 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffd92d5]        # 200bc8 <__unnamed_189>
  2278f3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  2278f7:	48 89 38             	mov    QWORD PTR [rax],rdi
  2278fa:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  2278fe:	48 83 c4 70          	add    rsp,0x70
  227902:	5d                   	pop    rbp
  227903:	c3                   	ret    
                posix.ENOTDIR => return PosixOpenError.NotDir,
  227904:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  227908:	e8 83 43 fe ff       	call   20bc90 <__zig_return_error>
  22790d:	48 8b 3d 84 93 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffd9384]        # 200c98 <__unnamed_190>
  227914:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  227918:	48 89 38             	mov    QWORD PTR [rax],rdi
  22791b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  22791f:	48 83 c4 70          	add    rsp,0x70
  227923:	5d                   	pop    rbp
  227924:	c3                   	ret    
                posix.EPERM => return PosixOpenError.AccessDenied,
  227925:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  227929:	e8 62 43 fe ff       	call   20bc90 <__zig_return_error>
  22792e:	48 8b 3d 4b 93 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffd934b]        # 200c80 <__unnamed_179>
  227935:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  227939:	48 89 38             	mov    QWORD PTR [rax],rdi
  22793c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  227940:	48 83 c4 70          	add    rsp,0x70
  227944:	5d                   	pop    rbp
  227945:	c3                   	ret    
                posix.EEXIST => return PosixOpenError.PathAlreadyExists,
  227946:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  22794a:	e8 41 43 fe ff       	call   20bc90 <__zig_return_error>
  22794f:	48 8b 3d 32 93 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffd9332]        # 200c88 <__unnamed_192>
  227956:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  22795a:	48 89 38             	mov    QWORD PTR [rax],rdi
  22795d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  227961:	48 83 c4 70          	add    rsp,0x70
  227965:	5d                   	pop    rbp
  227966:	c3                   	ret    
        if (err > 0) {
  227967:	eb 00                	jmp    227969 <posixOpenC+0x2a9>
        return @intCast(i32, result);
  227969:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  22796d:	89 c1                	mov    ecx,eax
  22796f:	48 63 d1             	movsxd rdx,ecx
  227972:	48 39 d0             	cmp    rax,rdx
  227975:	89 4d 98             	mov    DWORD PTR [rbp-0x68],ecx
  227978:	75 21                	jne    22799b <posixOpenC+0x2db>
  22797a:	66 c7 45 f0 00 00    	mov    WORD PTR [rbp-0x10],0x0
  227980:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
  227983:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
  227986:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  22798a:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  22798e:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  227991:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  227995:	48 83 c4 70          	add    rsp,0x70
  227999:	5d                   	pop    rbp
  22799a:	c3                   	ret    
  22799b:	48 8d 3d 06 bb 01 00 	lea    rdi,[rip+0x1bb06]        # 2434a8 <__unnamed_22>
  2279a2:	31 c0                	xor    eax,eax
  2279a4:	89 c6                	mov    esi,eax
  2279a6:	e8 55 3c fe ff       	call   20b600 <panic>
  2279ab:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000002279b0 <close.98>:
pub fn close(fd: i32) usize {
  2279b0:	55                   	push   rbp
  2279b1:	48 89 e5             	mov    rbp,rsp
  2279b4:	48 83 ec 10          	sub    rsp,0x10
  2279b8:	b8 03 00 00 00       	mov    eax,0x3
  2279bd:	89 c1                	mov    ecx,eax
  2279bf:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    return syscall1(SYS_close, @intCast(usize, fd));
  2279c2:	48 63 75 fc          	movsxd rsi,DWORD PTR [rbp-0x4]
  2279c6:	48 89 cf             	mov    rdi,rcx
  2279c9:	e8 e2 18 00 00       	call   2292b0 <syscall1>
  2279ce:	48 83 c4 10          	add    rsp,0x10
  2279d2:	5d                   	pop    rbp
  2279d3:	c3                   	ret    
  2279d4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2279db:	00 00 00 00 00 

00000000002279e0 <BaseLinkedList(promise,void,(struct []const u8 constant))_popFirst>:

        /// Remove and return the first node in the list.
        ///
        /// Returns:
        ///     A pointer to the first node in the list.
        pub fn popFirst(list: *Self) ?*Node {
  2279e0:	55                   	push   rbp
  2279e1:	48 89 e5             	mov    rbp,rsp
  2279e4:	48 83 ec 20          	sub    rsp,0x20
  2279e8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
            const first = list.first orelse return null;
  2279ec:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  2279f0:	48 83 3f 00          	cmp    QWORD PTR [rdi],0x0
  2279f4:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  2279f8:	75 08                	jne    227a02 <BaseLinkedList(promise,void,(struct []const u8 constant))_popFirst+0x22>
  2279fa:	31 c0                	xor    eax,eax
  2279fc:	48 83 c4 20          	add    rsp,0x20
  227a00:	5d                   	pop    rbp
  227a01:	c3                   	ret    
  227a02:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  227a06:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  227a09:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  227a0d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  227a11:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
            list.remove(first);
  227a15:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  227a19:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  227a1d:	e8 de 18 00 00       	call   229300 <BaseLinkedList(promise,void,(struct []const u8 constant))_remove>
            return first;
  227a22:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  227a26:	48 83 c4 20          	add    rsp,0x20
  227a2a:	5d                   	pop    rbp
  227a2b:	c3                   	ret    
  227a2c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000227a30 <InStream(ReadError)_readVarInt>:
        pub fn readVarInt(self: *Self, endian: builtin.Endian, comptime T: type, size: usize) !T {
  227a30:	55                   	push   rbp
  227a31:	48 89 e5             	mov    rbp,rsp
  227a34:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  227a3b:	88 c8                	mov    al,cl
  227a3d:	49 89 f9             	mov    r9,rdi
  227a40:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
  227a44:	24 01                	and    al,0x1
  227a46:	88 45 bf             	mov    BYTE PTR [rbp-0x41],al
  227a49:	4c 89 45 b0          	mov    QWORD PTR [rbp-0x50],r8
            assert(size <= @sizeOf(T));
  227a4d:	48 83 7d b0 08       	cmp    QWORD PTR [rbp-0x50],0x8
  227a52:	0f 96 c0             	setbe  al
  227a55:	0f b6 c8             	movzx  ecx,al
  227a58:	48 89 7d 90          	mov    QWORD PTR [rbp-0x70],rdi
  227a5c:	89 cf                	mov    edi,ecx
  227a5e:	4c 89 4d 88          	mov    QWORD PTR [rbp-0x78],r9
  227a62:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
  227a66:	e8 95 35 fe ff       	call   20b000 <assert>
            assert(size <= 8);
  227a6b:	48 83 7d b0 08       	cmp    QWORD PTR [rbp-0x50],0x8
  227a70:	0f 96 c0             	setbe  al
  227a73:	0f b6 f8             	movzx  edi,al
  227a76:	e8 85 35 fe ff       	call   20b000 <assert>
  227a7b:	31 c9                	xor    ecx,ecx
  227a7d:	89 ca                	mov    edx,ecx
            var input_buf: [8]u8 = undefined;
  227a7f:	48 8b 35 f2 91 fd ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffd91f2]        # 200c78 <__unnamed_132>
  227a86:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
            const input_slice = input_buf[0..size];
  227a8a:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  227a8e:	48 39 f2             	cmp    rdx,rsi
  227a91:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
  227a98:	0f 86 98 00 00 00    	jbe    227b36 <InStream(ReadError)_readVarInt+0x106>
  227a9e:	e9 83 00 00 00       	jmp    227b26 <InStream(ReadError)_readVarInt+0xf6>
            try self.readNoEof(input_slice);
  227aa3:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  227aa7:	48 8b 7d 80          	mov    rdi,QWORD PTR [rbp-0x80]
  227aab:	66 89 85 76 ff ff ff 	mov    WORD PTR [rbp-0x8a],ax
  227ab2:	e8 d9 41 fe ff       	call   20bc90 <__zig_return_error>
  227ab7:	66 8b 85 76 ff ff ff 	mov    ax,WORD PTR [rbp-0x8a]
  227abe:	66 89 45 d8          	mov    WORD PTR [rbp-0x28],ax
  227ac2:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  227ac6:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  227aca:	48 89 39             	mov    QWORD PTR [rcx],rdi
  227acd:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  227ad1:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  227ad5:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  227ad9:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  227ae0:	5d                   	pop    rbp
  227ae1:	c3                   	ret    
  227ae2:	48 8d 45 98          	lea    rax,[rbp-0x68]
            return mem.readInt(input_slice, T, endian);
  227ae6:	8a 4d bf             	mov    cl,BYTE PTR [rbp-0x41]
  227ae9:	0f b6 f1             	movzx  esi,cl
  227aec:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  227af0:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  227af7:	e8 d4 97 ff ff       	call   2212d0 <readInt.66>
  227afc:	66 c7 45 c8 00 00    	mov    WORD PTR [rbp-0x38],0x0
  227b02:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  227b06:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  227b0a:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  227b0e:	48 89 07             	mov    QWORD PTR [rdi],rax
  227b11:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  227b15:	48 89 47 08          	mov    QWORD PTR [rdi+0x8],rax
  227b19:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  227b1d:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  227b24:	5d                   	pop    rbp
  227b25:	c3                   	ret    
  227b26:	48 8d 3d cb b8 01 00 	lea    rdi,[rip+0x1b8cb]        # 2433f8 <__unnamed_20>
  227b2d:	31 c0                	xor    eax,eax
  227b2f:	89 c6                	mov    esi,eax
            const input_slice = input_buf[0..size];
  227b31:	e8 ca 3a fe ff       	call   20b600 <panic>
  227b36:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  227b3d:	48 83 f8 08          	cmp    rax,0x8
  227b41:	76 10                	jbe    227b53 <InStream(ReadError)_readVarInt+0x123>
  227b43:	48 8d 3d ae b8 01 00 	lea    rdi,[rip+0x1b8ae]        # 2433f8 <__unnamed_20>
  227b4a:	31 c0                	xor    eax,eax
  227b4c:	89 c6                	mov    esi,eax
  227b4e:	e8 ad 3a fe ff       	call   20b600 <panic>
  227b53:	48 8d 55 98          	lea    rdx,[rbp-0x68]
  227b57:	48 8d 45 a8          	lea    rax,[rbp-0x58]
  227b5b:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  227b5f:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  227b66:	48 83 e8 00          	sub    rax,0x0
  227b6a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  227b6e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  227b72:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  227b76:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  227b7a:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            try self.readNoEof(input_slice);
  227b7e:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
  227b82:	48 8b 7d 80          	mov    rdi,QWORD PTR [rbp-0x80]
  227b86:	e8 35 be fe ff       	call   2139c0 <InStream(ReadError)_readNoEof>
  227b8b:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  227b8f:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  227b94:	0f 85 09 ff ff ff    	jne    227aa3 <InStream(ReadError)_readVarInt+0x73>
  227b9a:	e9 43 ff ff ff       	jmp    227ae2 <InStream(ReadError)_readVarInt+0xb2>
  227b9f:	90                   	nop

0000000000227ba0 <InStream(ReadError)_readIntLe.99>:
        pub fn readIntLe(self: *Self, comptime T: type) !T {
  227ba0:	55                   	push   rbp
  227ba1:	48 89 e5             	mov    rbp,rsp
  227ba4:	48 83 ec 30          	sub    rsp,0x30
  227ba8:	48 89 f8             	mov    rax,rdi
  227bab:	48 8d 4d f8          	lea    rcx,[rbp-0x8]
  227baf:	41 b8 01 00 00 00    	mov    r8d,0x1
  227bb5:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
            return self.readInt(builtin.Endian.Little, T);
  227bb9:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  227bbd:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  227bc1:	48 89 cf             	mov    rdi,rcx
  227bc4:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  227bc8:	44 89 c1             	mov    ecx,r8d
  227bcb:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  227bcf:	e8 8c 00 00 00       	call   227c60 <InStream(ReadError)_readInt.101>
  227bd4:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  227bd9:	74 0b                	je     227be6 <InStream(ReadError)_readIntLe.99+0x46>
  227bdb:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  227bdf:	e8 ac 40 fe ff       	call   20bc90 <__zig_return_error>
  227be4:	eb 02                	jmp    227be8 <InStream(ReadError)_readIntLe.99+0x48>
  227be6:	eb 00                	jmp    227be8 <InStream(ReadError)_readIntLe.99+0x48>
  227be8:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  227beb:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  227bef:	89 01                	mov    DWORD PTR [rcx],eax
  227bf1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  227bf5:	48 83 c4 30          	add    rsp,0x30
  227bf9:	5d                   	pop    rbp
  227bfa:	c3                   	ret    
  227bfb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000227c00 <InStream(ReadError)_readIntLe.100>:
        pub fn readIntLe(self: *Self, comptime T: type) !T {
  227c00:	55                   	push   rbp
  227c01:	48 89 e5             	mov    rbp,rsp
  227c04:	48 83 ec 30          	sub    rsp,0x30
  227c08:	48 89 f8             	mov    rax,rdi
  227c0b:	48 8d 4d f8          	lea    rcx,[rbp-0x8]
  227c0f:	41 b8 01 00 00 00    	mov    r8d,0x1
  227c15:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
            return self.readInt(builtin.Endian.Little, T);
  227c19:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  227c1d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  227c21:	48 89 cf             	mov    rdi,rcx
  227c24:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  227c28:	44 89 c1             	mov    ecx,r8d
  227c2b:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  227c2f:	e8 fc c0 fe ff       	call   213d30 <InStream(ReadError)_readInt>
  227c34:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  227c39:	74 0b                	je     227c46 <InStream(ReadError)_readIntLe.100+0x46>
  227c3b:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  227c3f:	e8 4c 40 fe ff       	call   20bc90 <__zig_return_error>
  227c44:	eb 02                	jmp    227c48 <InStream(ReadError)_readIntLe.100+0x48>
  227c46:	eb 00                	jmp    227c48 <InStream(ReadError)_readIntLe.100+0x48>
  227c48:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  227c4b:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  227c4f:	89 01                	mov    DWORD PTR [rcx],eax
  227c51:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  227c55:	48 83 c4 30          	add    rsp,0x30
  227c59:	5d                   	pop    rbp
  227c5a:	c3                   	ret    
  227c5b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000227c60 <InStream(ReadError)_readInt.101>:
        pub fn readInt(self: *Self, endian: builtin.Endian, comptime T: type) !T {
  227c60:	55                   	push   rbp
  227c61:	48 89 e5             	mov    rbp,rsp
  227c64:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  227c6b:	88 c8                	mov    al,cl
  227c6d:	49 89 f8             	mov    r8,rdi
  227c70:	41 b1 01             	mov    r9b,0x1
  227c73:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
  227c77:	24 01                	and    al,0x1
  227c79:	88 45 bf             	mov    BYTE PTR [rbp-0x41],al
            var bytes: [@sizeOf(T)]u8 = undefined;
  227c7c:	8a 05 7e 2a fe ff    	mov    al,BYTE PTR [rip+0xfffffffffffe2a7e]        # 20a700 <__unnamed_194>
  227c82:	88 45 be             	mov    BYTE PTR [rbp-0x42],al
            try self.readNoEof(bytes[0..]);
  227c85:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  227c89:	41 f6 c1 01          	test   r9b,0x1
  227c8d:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
  227c91:	4c 89 45 a8          	mov    QWORD PTR [rbp-0x58],r8
  227c95:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  227c99:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
  227c9d:	0f 85 87 00 00 00    	jne    227d2a <InStream(ReadError)_readInt.101+0xca>
  227ca3:	eb 75                	jmp    227d1a <InStream(ReadError)_readInt.101+0xba>
  227ca5:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  227ca9:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  227cad:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  227cb1:	e8 da 3f fe ff       	call   20bc90 <__zig_return_error>
  227cb6:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  227cba:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  227cbe:	8b 4d e8             	mov    ecx,DWORD PTR [rbp-0x18]
  227cc1:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  227cc5:	89 0f                	mov    DWORD PTR [rdi],ecx
  227cc7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  227ccb:	48 81 c4 80 00 00 00 	add    rsp,0x80
  227cd2:	5d                   	pop    rbp
  227cd3:	c3                   	ret    
  227cd4:	48 8d 45 d0          	lea    rax,[rbp-0x30]
  227cd8:	48 8d 4d be          	lea    rcx,[rbp-0x42]
            return mem.readInt(bytes, T, endian);
  227cdc:	8a 55 bf             	mov    dl,BYTE PTR [rbp-0x41]
  227cdf:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  227ce3:	48 c7 45 d8 01 00 00 	mov    QWORD PTR [rbp-0x28],0x1
  227cea:	00 
  227ceb:	0f b6 f2             	movzx  esi,dl
  227cee:	48 8d 7d d0          	lea    rdi,[rbp-0x30]
  227cf2:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  227cf6:	e8 65 00 00 00       	call   227d60 <readInt.102>
  227cfb:	66 c7 45 c8 00 00    	mov    WORD PTR [rbp-0x38],0x0
  227d01:	88 45 ca             	mov    BYTE PTR [rbp-0x36],al
  227d04:	8b 75 c8             	mov    esi,DWORD PTR [rbp-0x38]
  227d07:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  227d0b:	89 31                	mov    DWORD PTR [rcx],esi
  227d0d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  227d11:	48 81 c4 80 00 00 00 	add    rsp,0x80
  227d18:	5d                   	pop    rbp
  227d19:	c3                   	ret    
  227d1a:	48 8d 3d d7 b6 01 00 	lea    rdi,[rip+0x1b6d7]        # 2433f8 <__unnamed_20>
  227d21:	31 c0                	xor    eax,eax
  227d23:	89 c6                	mov    esi,eax
            try self.readNoEof(bytes[0..]);
  227d25:	e8 d6 38 fe ff       	call   20b600 <panic>
  227d2a:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
  227d2e:	48 8d 45 be          	lea    rax,[rbp-0x42]
  227d32:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  227d36:	48 c7 45 f8 01 00 00 	mov    QWORD PTR [rbp-0x8],0x1
  227d3d:	00 
  227d3e:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  227d42:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  227d46:	e8 75 bc fe ff       	call   2139c0 <InStream(ReadError)_readNoEof>
  227d4b:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  227d4f:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  227d54:	0f 85 4b ff ff ff    	jne    227ca5 <InStream(ReadError)_readInt.101+0x45>
  227d5a:	e9 75 ff ff ff       	jmp    227cd4 <InStream(ReadError)_readInt.101+0x74>
  227d5f:	90                   	nop

0000000000227d60 <readInt.102>:
pub fn readInt(bytes: []const u8, comptime T: type, endian: builtin.Endian) T {
  227d60:	55                   	push   rbp
  227d61:	48 89 e5             	mov    rbp,rsp
  227d64:	48 83 ec 10          	sub    rsp,0x10
  227d68:	40 88 f0             	mov    al,sil
  227d6b:	31 f6                	xor    esi,esi
  227d6d:	89 f1                	mov    ecx,esi
  227d6f:	24 01                	and    al,0x1
  227d71:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
        return bytes[0];
  227d74:	48 3b 4f 08          	cmp    rcx,QWORD PTR [rdi+0x8]
  227d78:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  227d7c:	72 10                	jb     227d8e <readInt.102+0x2e>
  227d7e:	48 8d 3d 73 b6 01 00 	lea    rdi,[rip+0x1b673]        # 2433f8 <__unnamed_20>
  227d85:	31 c0                	xor    eax,eax
  227d87:	89 c6                	mov    esi,eax
  227d89:	e8 72 38 fe ff       	call   20b600 <panic>
  227d8e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  227d92:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  227d95:	8a 01                	mov    al,BYTE PTR [rcx]
  227d97:	48 83 c4 10          	add    rsp,0x10
  227d9b:	5d                   	pop    rbp
  227d9c:	c3                   	ret    
  227d9d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000227da0 <Allocator_alignedAlloc.103>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  227da0:	55                   	push   rbp
  227da1:	48 89 e5             	mov    rbp,rsp
  227da4:	48 81 ec 20 01 00 00 	sub    rsp,0x120
  227dab:	48 89 f8             	mov    rax,rdi
  227dae:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  227db5:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  227dbc:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  227dc3:	00 
  227dc4:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  227dcb:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  227dd2:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  227dd9:	75 37                	jne    227e12 <Allocator_alignedAlloc.103+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  227ddb:	48 8b 05 26 29 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe2926]        # 20a708 <__unnamed_195>
  227de2:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  227de9:	48 89 01             	mov    QWORD PTR [rcx],rax
  227dec:	48 8b 05 1d 29 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe291d]        # 20a710 <__unnamed_195+0x8>
  227df3:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  227df7:	48 8b 05 1a 29 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe291a]        # 20a718 <__unnamed_195+0x10>
  227dfe:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  227e02:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  227e09:	48 81 c4 20 01 00 00 	add    rsp,0x120
  227e10:	5d                   	pop    rbp
  227e11:	c3                   	ret    
        if (n == 0) {
  227e12:	eb 00                	jmp    227e14 <Allocator_alignedAlloc.103+0x74>
  227e14:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  227e18:	b8 30 00 00 00       	mov    eax,0x30
  227e1d:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  227e1f:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  227e26:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  227e2d:	e8 de d5 fe ff       	call   215410 <mul>
  227e32:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  227e37:	74 43                	je     227e7c <Allocator_alignedAlloc.103+0xdc>
  227e39:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  227e40:	e8 4b 3e fe ff       	call   20bc90 <__zig_return_error>
  227e45:	48 8b 3d d4 28 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe28d4]        # 20a720 <__unnamed_196>
  227e4c:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  227e53:	48 89 38             	mov    QWORD PTR [rax],rdi
  227e56:	48 8b 3d cb 28 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe28cb]        # 20a728 <__unnamed_196+0x8>
  227e5d:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  227e61:	48 8b 3d c8 28 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe28c8]        # 20a730 <__unnamed_196+0x10>
  227e68:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  227e6c:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  227e73:	48 81 c4 20 01 00 00 	add    rsp,0x120
  227e7a:	5d                   	pop    rbp
  227e7b:	c3                   	ret    
  227e7c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  227e80:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  227e87:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  227e8b:	41 b8 08 00 00 00    	mov    r8d,0x8
  227e91:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  227e98:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  227e9f:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  227ea6:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  227ea9:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  227eb0:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  227eb7:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  227ebe:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  227ec5:	4c 89 ce             	mov    rsi,r9
  227ec8:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  227ecf:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  227ed6:	4c 89 d1             	mov    rcx,r10
  227ed9:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  227ee0:	41 ff d3             	call   r11
  227ee3:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  227ee8:	74 50                	je     227f3a <Allocator_alignedAlloc.103+0x19a>
  227eea:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  227eee:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  227ef5:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  227efc:	e8 8f 3d fe ff       	call   20bc90 <__zig_return_error>
  227f01:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  227f08:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  227f0c:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  227f10:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  227f17:	48 89 39             	mov    QWORD PTR [rcx],rdi
  227f1a:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  227f1e:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  227f22:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  227f26:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  227f2a:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  227f31:	48 81 c4 20 01 00 00 	add    rsp,0x120
  227f38:	5d                   	pop    rbp
  227f39:	c3                   	ret    
  227f3a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  227f3e:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  227f45:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  227f49:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  227f50:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  227f57:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  227f5e:	0f 94 c1             	sete   cl
  227f61:	0f b6 f9             	movzx  edi,cl
  227f64:	e8 97 30 fe ff       	call   20b000 <assert>
  227f69:	be aa 00 00 00       	mov    esi,0xaa
  227f6e:	bf 08 00 00 00       	mov    edi,0x8
  227f73:	89 fa                	mov    edx,edi
  227f75:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  227f7c:	48 89 c7             	mov    rdi,rax
  227f7f:	e8 2c c9 00 00       	call   2348b0 <memset>
  227f84:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  227f8b:	00 00 00 00 
  227f8f:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  227f96:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  227f9d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  227fa4:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  227fab:	48 39 c8             	cmp    rax,rcx
  227fae:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  227fb5:	73 32                	jae    227fe9 <Allocator_alignedAlloc.103+0x249>
  227fb7:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  227fbe:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  227fc5:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  227fcc:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  227fd3:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  227fd5:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  227fdc:	48 83 c1 01          	add    rcx,0x1
  227fe0:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  227fe7:	eb b4                	jmp    227f9d <Allocator_alignedAlloc.103+0x1fd>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  227fe9:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  227ff0:	48 83 e0 07          	and    rax,0x7
  227ff4:	48 83 f8 00          	cmp    rax,0x0
  227ff8:	75 32                	jne    22802c <Allocator_alignedAlloc.103+0x28c>
  227ffa:	b8 30 00 00 00       	mov    eax,0x30
  227fff:	89 c1                	mov    ecx,eax
  228001:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
  228008:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
  22800c:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
  228013:	48 89 d0             	mov    rax,rdx
  228016:	31 f6                	xor    esi,esi
  228018:	48 89 95 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdx
  22801f:	89 f2                	mov    edx,esi
  228021:	48 f7 f1             	div    rcx
  228024:	48 83 fa 00          	cmp    rdx,0x0
  228028:	74 12                	je     22803c <Allocator_alignedAlloc.103+0x29c>
  22802a:	eb 77                	jmp    2280a3 <Allocator_alignedAlloc.103+0x303>
  22802c:	48 8d 3d 9d b5 01 00 	lea    rdi,[rip+0x1b59d]        # 2435d0 <__unnamed_75>
  228033:	31 c0                	xor    eax,eax
  228035:	89 c6                	mov    esi,eax
  228037:	e8 c4 35 fe ff       	call   20b600 <panic>
  22803c:	b8 30 00 00 00       	mov    eax,0x30
  228041:	89 c1                	mov    ecx,eax
  228043:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  22804a:	31 d2                	xor    edx,edx
  22804c:	48 f7 f1             	div    rcx
  22804f:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  228053:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  22805a:	00 00 
  22805c:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  228060:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  228067:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  22806b:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  22806f:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  228076:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  22807d:	48 89 01             	mov    QWORD PTR [rcx],rax
  228080:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  228087:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  22808b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  22808f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  228093:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  22809a:	48 81 c4 20 01 00 00 	add    rsp,0x120
  2280a1:	5d                   	pop    rbp
  2280a2:	c3                   	ret    
  2280a3:	48 8d 3d 3e b5 01 00 	lea    rdi,[rip+0x1b53e]        # 2435e8 <__unnamed_76>
  2280aa:	31 c0                	xor    eax,eax
  2280ac:	89 c6                	mov    esi,eax
  2280ae:	e8 4d 35 fe ff       	call   20b600 <panic>
  2280b3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2280ba:	84 00 00 00 00 00 

00000000002280c0 <getEnvPosix>:
pub fn getEnvPosix(key: []const u8) ?[]const u8 {
  2280c0:	55                   	push   rbp
  2280c1:	48 89 e5             	mov    rbp,rsp
  2280c4:	48 81 ec 00 01 00 00 	sub    rsp,0x100
  2280cb:	48 89 f8             	mov    rax,rdi
  2280ce:	b9 aa 00 00 00       	mov    ecx,0xaa
  2280d3:	ba 08 00 00 00       	mov    edx,0x8
  2280d8:	4c 8d 45 c0          	lea    r8,[rbp-0x40]
    for (posix_environ_raw) |ptr| {
  2280dc:	48 89 7d 80          	mov    QWORD PTR [rbp-0x80],rdi
  2280e0:	4c 89 c7             	mov    rdi,r8
  2280e3:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
  2280ea:	89 ce                	mov    esi,ecx
  2280ec:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  2280f3:	e8 b8 c7 00 00       	call   2348b0 <memset>
  2280f8:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
  2280ff:	00 
  228100:	48 8b 05 a1 3f 01 00 	mov    rax,QWORD PTR [rip+0x13fa1]        # 23c0a8 <posix_environ_raw+0x8>
  228107:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  22810e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  228112:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  228119:	48 39 c8             	cmp    rax,rcx
  22811c:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  228123:	0f 83 16 01 00 00    	jae    22823f <getEnvPosix+0x17f>
  228129:	48 8b 05 70 3f 01 00 	mov    rax,QWORD PTR [rip+0x13f70]        # 23c0a0 <posix_environ_raw>
  228130:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  228137:	48 8b 04 c8          	mov    rax,QWORD PTR [rax+rcx*8]
  22813b:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
        var line_i: usize = 0;
  22813f:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
  228146:	00 
        while (ptr[line_i] != 0 and ptr[line_i] != '=') : (line_i += 1) {}
  228147:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  22814b:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  22814f:	80 3c 01 00          	cmp    BYTE PTR [rcx+rax*1],0x0
  228153:	0f 95 c2             	setne  dl
  228156:	f6 c2 01             	test   dl,0x1
  228159:	88 95 5f ff ff ff    	mov    BYTE PTR [rbp-0xa1],dl
  22815f:	75 02                	jne    228163 <getEnvPosix+0xa3>
  228161:	eb 15                	jmp    228178 <getEnvPosix+0xb8>
  228163:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  228167:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  22816b:	80 3c 01 3d          	cmp    BYTE PTR [rcx+rax*1],0x3d
  22816f:	0f 95 c2             	setne  dl
  228172:	88 95 5f ff ff ff    	mov    BYTE PTR [rbp-0xa1],dl
  228178:	8a 85 5f ff ff ff    	mov    al,BYTE PTR [rbp-0xa1]
  22817e:	a8 01                	test   al,0x1
  228180:	75 02                	jne    228184 <getEnvPosix+0xc4>
  228182:	eb 23                	jmp    2281a7 <getEnvPosix+0xe7>
  228184:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  228188:	48 83 c0 01          	add    rax,0x1
  22818c:	0f 92 c1             	setb   cl
  22818f:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
  228196:	88 8d 4f ff ff ff    	mov    BYTE PTR [rbp-0xb1],cl
  22819c:	0f 82 d1 00 00 00    	jb     228273 <getEnvPosix+0x1b3>
  2281a2:	e9 dc 00 00 00       	jmp    228283 <getEnvPosix+0x1c3>
  2281a7:	31 c0                	xor    eax,eax
  2281a9:	89 c1                	mov    ecx,eax
        const this_key = ptr[0..line_i];
  2281ab:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  2281af:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
  2281b3:	48 39 d1             	cmp    rcx,rdx
  2281b6:	48 89 b5 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rsi
  2281bd:	48 89 95 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdx
  2281c4:	0f 86 d9 00 00 00    	jbe    2282a3 <getEnvPosix+0x1e3>
  2281ca:	e9 c4 00 00 00       	jmp    228293 <getEnvPosix+0x1d3>
    for (posix_environ_raw) |ptr| {
  2281cf:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  2281d6:	48 83 c0 01          	add    rax,0x1
  2281da:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  2281de:	e9 2b ff ff ff       	jmp    22810e <getEnvPosix+0x4e>
        var end_i: usize = line_i;
  2281e3:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  2281e7:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
        while (ptr[end_i] != 0) : (end_i += 1) {}
  2281eb:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  2281ef:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  2281f3:	80 3c 01 00          	cmp    BYTE PTR [rcx+rax*1],0x0
  2281f7:	74 23                	je     22821c <getEnvPosix+0x15c>
  2281f9:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  2281fd:	48 83 c0 01          	add    rax,0x1
  228201:	0f 92 c1             	setb   cl
  228204:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  22820b:	88 8d 2f ff ff ff    	mov    BYTE PTR [rbp-0xd1],cl
  228211:	0f 82 d1 00 00 00    	jb     2282e8 <getEnvPosix+0x228>
  228217:	e9 dc 00 00 00       	jmp    2282f8 <getEnvPosix+0x238>
        const this_value = ptr[line_i + 1 .. end_i];
  22821c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  228220:	48 83 c0 01          	add    rax,0x1
  228224:	0f 92 c1             	setb   cl
  228227:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
  22822e:	88 8d 1f ff ff ff    	mov    BYTE PTR [rbp-0xe1],cl
  228234:	0f 82 ce 00 00 00    	jb     228308 <getEnvPosix+0x248>
  22823a:	e9 d9 00 00 00       	jmp    228318 <getEnvPosix+0x258>
    return null;
  22823f:	48 8b 05 9a 25 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe259a]        # 20a7e0 <__unnamed_197>
  228246:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  22824a:	48 89 01             	mov    QWORD PTR [rcx],rax
  22824d:	48 8b 05 94 25 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe2594]        # 20a7e8 <__unnamed_197+0x8>
  228254:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  228258:	48 8b 05 91 25 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe2591]        # 20a7f0 <__unnamed_197+0x10>
  22825f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  228263:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  22826a:	48 81 c4 00 01 00 00 	add    rsp,0x100
  228271:	5d                   	pop    rbp
  228272:	c3                   	ret    
  228273:	48 8d 3d 4e af 01 00 	lea    rdi,[rip+0x1af4e]        # 2431c8 <__unnamed_4>
  22827a:	31 c0                	xor    eax,eax
  22827c:	89 c6                	mov    esi,eax
        while (ptr[line_i] != 0 and ptr[line_i] != '=') : (line_i += 1) {}
  22827e:	e8 7d 33 fe ff       	call   20b600 <panic>
  228283:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  22828a:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  22828e:	e9 b4 fe ff ff       	jmp    228147 <getEnvPosix+0x87>
  228293:	48 8d 3d 5e b1 01 00 	lea    rdi,[rip+0x1b15e]        # 2433f8 <__unnamed_20>
  22829a:	31 c0                	xor    eax,eax
  22829c:	89 c6                	mov    esi,eax
        const this_key = ptr[0..line_i];
  22829e:	e8 5d 33 fe ff       	call   20b600 <panic>
  2282a3:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  2282aa:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  2282ae:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
  2282b5:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  2282b9:	c5 fa 6f 45 f0       	vmovdqu xmm0,XMMWORD PTR [rbp-0x10]
  2282be:	c5 f9 7f 45 a0       	vmovdqa XMMWORD PTR [rbp-0x60],xmm0
  2282c3:	48 8d 75 a0          	lea    rsi,[rbp-0x60]
        if (!mem.eql(u8, key, this_key)) continue;
  2282c7:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  2282ce:	e8 8d b7 fe ff       	call   213a60 <eql>
  2282d3:	88 c2                	mov    dl,al
  2282d5:	a8 01                	test   al,0x1
  2282d7:	88 95 1e ff ff ff    	mov    BYTE PTR [rbp-0xe2],dl
  2282dd:	0f 84 ec fe ff ff    	je     2281cf <getEnvPosix+0x10f>
  2282e3:	e9 fb fe ff ff       	jmp    2281e3 <getEnvPosix+0x123>
  2282e8:	48 8d 3d d9 ae 01 00 	lea    rdi,[rip+0x1aed9]        # 2431c8 <__unnamed_4>
  2282ef:	31 c0                	xor    eax,eax
  2282f1:	89 c6                	mov    esi,eax
        while (ptr[end_i] != 0) : (end_i += 1) {}
  2282f3:	e8 08 33 fe ff       	call   20b600 <panic>
  2282f8:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  2282ff:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  228303:	e9 e3 fe ff ff       	jmp    2281eb <getEnvPosix+0x12b>
  228308:	48 8d 3d b9 ae 01 00 	lea    rdi,[rip+0x1aeb9]        # 2431c8 <__unnamed_4>
  22830f:	31 c0                	xor    eax,eax
  228311:	89 c6                	mov    esi,eax
        const this_value = ptr[line_i + 1 .. end_i];
  228313:	e8 e8 32 fe ff       	call   20b600 <panic>
  228318:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  22831c:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  228320:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
  228327:	48 39 c2             	cmp    rdx,rax
  22832a:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
  228331:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  228338:	76 10                	jbe    22834a <getEnvPosix+0x28a>
  22833a:	48 8d 3d b7 b0 01 00 	lea    rdi,[rip+0x1b0b7]        # 2433f8 <__unnamed_20>
  228341:	31 c0                	xor    eax,eax
  228343:	89 c6                	mov    esi,eax
  228345:	e8 b6 32 fe ff       	call   20b600 <panic>
  22834a:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  228351:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  228358:	48 01 c8             	add    rax,rcx
  22835b:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  22835f:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  228366:	48 29 c8             	sub    rax,rcx
  228369:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  22836d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  228371:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  228375:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  228379:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
        return this_value;
  22837d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  228381:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  228385:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  228389:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  22838d:	c6 45 d8 01          	mov    BYTE PTR [rbp-0x28],0x1
  228391:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  228395:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
  228399:	48 89 02             	mov    QWORD PTR [rdx],rax
  22839c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2283a0:	48 89 42 08          	mov    QWORD PTR [rdx+0x8],rax
  2283a4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2283a8:	48 89 42 10          	mov    QWORD PTR [rdx+0x10],rax
  2283ac:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  2283b3:	48 81 c4 00 01 00 00 	add    rsp,0x100
  2283ba:	5d                   	pop    rbp
  2283bb:	c3                   	ret    
  2283bc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

00000000002283c0 <dupe>:
pub fn dupe(allocator: *Allocator, comptime T: type, m: []const T) ![]T {
  2283c0:	55                   	push   rbp
  2283c1:	48 89 e5             	mov    rbp,rsp
  2283c4:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  2283cb:	48 89 f8             	mov    rax,rdi
  2283ce:	4c 8d 45 e8          	lea    r8,[rbp-0x18]
  2283d2:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
    const new_buf = try allocator.alloc(T, m.len);
  2283d6:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  2283da:	4c 8b 49 08          	mov    r9,QWORD PTR [rcx+0x8]
  2283de:	48 89 7d 80          	mov    QWORD PTR [rbp-0x80],rdi
  2283e2:	4c 89 c7             	mov    rdi,r8
  2283e5:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
  2283ec:	48 89 8d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rcx
  2283f3:	4c 89 c9             	mov    rcx,r9
  2283f6:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  2283fd:	e8 9e a0 ff ff       	call   2224a0 <Allocator_alloc.74>
  228402:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  228407:	74 4d                	je     228456 <dupe+0x96>
  228409:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  22840d:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  228414:	66 89 85 66 ff ff ff 	mov    WORD PTR [rbp-0x9a],ax
  22841b:	e8 70 38 fe ff       	call   20bc90 <__zig_return_error>
  228420:	66 8b 85 66 ff ff ff 	mov    ax,WORD PTR [rbp-0x9a]
  228427:	66 89 45 b8          	mov    WORD PTR [rbp-0x48],ax
  22842b:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  22842f:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  228433:	48 89 39             	mov    QWORD PTR [rcx],rdi
  228436:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  22843a:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  22843e:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  228442:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  228446:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  22844d:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  228454:	5d                   	pop    rbp
  228455:	c3                   	ret    
  228456:	48 8d 7d 88          	lea    rdi,[rbp-0x78]
  22845a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22845e:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  228462:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  228466:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
    copy(T, new_buf, m);
  22846a:	48 8b b5 70 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x90]
  228471:	e8 ba c8 ff ff       	call   224d30 <copy>
    return new_buf;
  228476:	66 c7 45 a0 00 00    	mov    WORD PTR [rbp-0x60],0x0
  22847c:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  228480:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  228484:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  228488:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  22848c:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  228490:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  228494:	48 89 06             	mov    QWORD PTR [rsi],rax
  228497:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  22849b:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  22849f:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  2284a3:	48 89 46 10          	mov    QWORD PTR [rsi+0x10],rax
  2284a7:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  2284ae:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  2284b5:	5d                   	pop    rbp
  2284b6:	c3                   	ret    
  2284b7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  2284be:	00 00 

00000000002284c0 <isTty>:
pub fn isTty(handle: FileHandle) bool {
  2284c0:	55                   	push   rbp
  2284c1:	48 89 e5             	mov    rbp,rsp
  2284c4:	48 83 ec 10          	sub    rsp,0x10
  2284c8:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
            return posix.isatty(handle);
  2284cb:	8b 7d fc             	mov    edi,DWORD PTR [rbp-0x4]
  2284ce:	e8 4d 0f 00 00       	call   229420 <isatty>
  2284d3:	88 c1                	mov    cl,al
  2284d5:	88 4d fb             	mov    BYTE PTR [rbp-0x5],cl
  2284d8:	48 83 c4 10          	add    rsp,0x10
  2284dc:	5d                   	pop    rbp
  2284dd:	c3                   	ret    
  2284de:	66 90                	xchg   ax,ax

00000000002284e0 <formatValue.104>:
fn formatValue(
  2284e0:	55                   	push   rbp
  2284e1:	48 89 e5             	mov    rbp,rsp
  2284e4:	48 83 ec 30          	sub    rsp,0x30
  2284e8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2284ec:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  2284f0:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
        builtin.TypeId.Int => return formatIntValue(value, fmt, context, Errors, output),
  2284f4:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2284f8:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  2284fc:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  228500:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  228504:	e8 57 0f 00 00       	call   229460 <formatIntValue.112>
  228509:	66 83 f8 00          	cmp    ax,0x0
  22850d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  228511:	74 0b                	je     22851e <formatValue.104+0x3e>
  228513:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  228517:	e8 74 37 fe ff       	call   20bc90 <__zig_return_error>
  22851c:	eb 02                	jmp    228520 <formatValue.104+0x40>
  22851e:	eb 00                	jmp    228520 <formatValue.104+0x40>
  228520:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  228524:	48 83 c4 30          	add    rsp,0x30
  228528:	5d                   	pop    rbp
  228529:	c3                   	ret    
  22852a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000228530 <formatValue.105>:
fn formatValue(
  228530:	55                   	push   rbp
  228531:	48 89 e5             	mov    rbp,rsp
  228534:	48 83 ec 30          	sub    rsp,0x30
  228538:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22853c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  228540:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
        builtin.TypeId.Int => return formatIntValue(value, fmt, context, Errors, output),
  228544:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  228548:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  22854c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  228550:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  228554:	e8 77 0f 00 00       	call   2294d0 <formatIntValue.113>
  228559:	66 83 f8 00          	cmp    ax,0x0
  22855d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  228561:	74 0b                	je     22856e <formatValue.105+0x3e>
  228563:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  228567:	e8 24 37 fe ff       	call   20bc90 <__zig_return_error>
  22856c:	eb 02                	jmp    228570 <formatValue.105+0x40>
  22856e:	eb 00                	jmp    228570 <formatValue.105+0x40>
  228570:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  228574:	48 83 c4 30          	add    rsp,0x30
  228578:	5d                   	pop    rbp
  228579:	c3                   	ret    
  22857a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000228580 <formatValue.106>:
fn formatValue(
  228580:	55                   	push   rbp
  228581:	48 89 e5             	mov    rbp,rsp
  228584:	48 83 ec 30          	sub    rsp,0x30
  228588:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22858c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  228590:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
        builtin.TypeId.Int => return formatIntValue(value, fmt, context, Errors, output),
  228594:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  228598:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  22859c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2285a0:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2285a4:	e8 97 0f 00 00       	call   229540 <formatIntValue.114>
  2285a9:	66 83 f8 00          	cmp    ax,0x0
  2285ad:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  2285b1:	74 0b                	je     2285be <formatValue.106+0x3e>
  2285b3:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2285b7:	e8 d4 36 fe ff       	call   20bc90 <__zig_return_error>
  2285bc:	eb 02                	jmp    2285c0 <formatValue.106+0x40>
  2285be:	eb 00                	jmp    2285c0 <formatValue.106+0x40>
  2285c0:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  2285c4:	48 83 c4 30          	add    rsp,0x30
  2285c8:	5d                   	pop    rbp
  2285c9:	c3                   	ret    
  2285ca:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000002285d0 <formatValue.107>:
fn formatValue(
  2285d0:	55                   	push   rbp
  2285d1:	48 89 e5             	mov    rbp,rsp
  2285d4:	48 83 ec 30          	sub    rsp,0x30
  2285d8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2285dc:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  2285e0:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
        builtin.TypeId.Int => return formatIntValue(value, fmt, context, Errors, output),
  2285e4:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2285e8:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  2285ec:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2285f0:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2285f4:	e8 b7 0f 00 00       	call   2295b0 <formatIntValue.115>
  2285f9:	66 83 f8 00          	cmp    ax,0x0
  2285fd:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  228601:	74 0b                	je     22860e <formatValue.107+0x3e>
  228603:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  228607:	e8 84 36 fe ff       	call   20bc90 <__zig_return_error>
  22860c:	eb 02                	jmp    228610 <formatValue.107+0x40>
  22860e:	eb 00                	jmp    228610 <formatValue.107+0x40>
  228610:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  228614:	48 83 c4 30          	add    rsp,0x30
  228618:	5d                   	pop    rbp
  228619:	c3                   	ret    
  22861a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000228620 <formatValue.108>:
fn formatValue(
  228620:	55                   	push   rbp
  228621:	48 89 e5             	mov    rbp,rsp
  228624:	48 83 ec 30          	sub    rsp,0x30
  228628:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22862c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  228630:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
        builtin.TypeId.Int => return formatIntValue(value, fmt, context, Errors, output),
  228634:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  228638:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  22863c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  228640:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  228644:	e8 d7 0f 00 00       	call   229620 <formatIntValue.116>
  228649:	66 83 f8 00          	cmp    ax,0x0
  22864d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  228651:	74 0b                	je     22865e <formatValue.108+0x3e>
  228653:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  228657:	e8 34 36 fe ff       	call   20bc90 <__zig_return_error>
  22865c:	eb 02                	jmp    228660 <formatValue.108+0x40>
  22865e:	eb 00                	jmp    228660 <formatValue.108+0x40>
  228660:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  228664:	48 83 c4 30          	add    rsp,0x30
  228668:	5d                   	pop    rbp
  228669:	c3                   	ret    
  22866a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000228670 <formatValue.109>:
fn formatValue(
  228670:	55                   	push   rbp
  228671:	48 89 e5             	mov    rbp,rsp
  228674:	48 83 ec 30          	sub    rsp,0x30
  228678:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22867c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  228680:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
        builtin.TypeId.Int => return formatIntValue(value, fmt, context, Errors, output),
  228684:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  228688:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  22868c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  228690:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  228694:	e8 f7 0f 00 00       	call   229690 <formatIntValue.117>
  228699:	66 83 f8 00          	cmp    ax,0x0
  22869d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  2286a1:	74 0b                	je     2286ae <formatValue.109+0x3e>
  2286a3:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2286a7:	e8 e4 35 fe ff       	call   20bc90 <__zig_return_error>
  2286ac:	eb 02                	jmp    2286b0 <formatValue.109+0x40>
  2286ae:	eb 00                	jmp    2286b0 <formatValue.109+0x40>
  2286b0:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  2286b4:	48 83 c4 30          	add    rsp,0x30
  2286b8:	5d                   	pop    rbp
  2286b9:	c3                   	ret    
  2286ba:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000002286c0 <formatValue.110>:
fn formatValue(
  2286c0:	55                   	push   rbp
  2286c1:	48 89 e5             	mov    rbp,rsp
  2286c4:	48 83 ec 30          	sub    rsp,0x30
  2286c8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2286cc:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  2286d0:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
        builtin.TypeId.Int => return formatIntValue(value, fmt, context, Errors, output),
  2286d4:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2286d8:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  2286dc:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2286e0:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2286e4:	e8 17 10 00 00       	call   229700 <formatIntValue.118>
  2286e9:	66 83 f8 00          	cmp    ax,0x0
  2286ed:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  2286f1:	74 0b                	je     2286fe <formatValue.110+0x3e>
  2286f3:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2286f7:	e8 94 35 fe ff       	call   20bc90 <__zig_return_error>
  2286fc:	eb 02                	jmp    228700 <formatValue.110+0x40>
  2286fe:	eb 00                	jmp    228700 <formatValue.110+0x40>
  228700:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  228704:	48 83 c4 30          	add    rsp,0x30
  228708:	5d                   	pop    rbp
  228709:	c3                   	ret    
  22870a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000228710 <toSliceConst>:
pub fn toSliceConst(str: [*]const u8) []const u8 {
  228710:	55                   	push   rbp
  228711:	48 89 e5             	mov    rbp,rsp
  228714:	48 83 ec 40          	sub    rsp,0x40
  228718:	48 89 f8             	mov    rax,rdi
  22871b:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
    return str[0..len(str)];
  22871f:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  228723:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  228727:	48 89 f7             	mov    rdi,rsi
  22872a:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  22872e:	e8 3d 10 00 00       	call   229770 <len>
  228733:	31 c9                	xor    ecx,ecx
  228735:	89 ce                	mov    esi,ecx
  228737:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  22873b:	48 39 c6             	cmp    rsi,rax
  22873e:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  228742:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  228746:	76 10                	jbe    228758 <toSliceConst+0x48>
  228748:	48 8d 3d a9 ac 01 00 	lea    rdi,[rip+0x1aca9]        # 2433f8 <__unnamed_20>
  22874f:	31 c0                	xor    eax,eax
  228751:	89 c6                	mov    esi,eax
  228753:	e8 a8 2e fe ff       	call   20b600 <panic>
  228758:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  22875c:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  228760:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  228764:	48 83 e9 00          	sub    rcx,0x0
  228768:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  22876c:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  228770:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  228774:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  228777:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  22877b:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  22877f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  228783:	48 83 c4 40          	add    rsp,0x40
  228787:	5d                   	pop    rbp
  228788:	c3                   	ret    
  228789:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000228790 <checkver>:
}

fn checkver(def_arg: *elf.Verdef, vsym_arg: i32, vername: []const u8, strings: [*]u8) bool {
  228790:	55                   	push   rbp
  228791:	48 89 e5             	mov    rbp,rsp
  228794:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  22879b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  22879f:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
  2287a2:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
    var def = def_arg;
  2287a6:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2287aa:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    const vsym = @bitCast(u32, vsym_arg) & 0x7fff;
  2287ae:	8b 75 e4             	mov    esi,DWORD PTR [rbp-0x1c]
  2287b1:	81 e6 ff 7f 00 00    	and    esi,0x7fff
  2287b7:	89 75 cc             	mov    DWORD PTR [rbp-0x34],esi
  2287ba:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
    while (true) {
  2287be:	eb 00                	jmp    2287c0 <checkver+0x30>
  2287c0:	31 c0                	xor    eax,eax
  2287c2:	66 89 c1             	mov    cx,ax
        if (0 == (def.vd_flags & elf.VER_FLG_BASE) and (def.vd_ndx & 0x7fff) == vsym)
  2287c5:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  2287c9:	66 8b 72 02          	mov    si,WORD PTR [rdx+0x2]
  2287cd:	66 83 e6 01          	and    si,0x1
  2287d1:	66 39 f1             	cmp    cx,si
  2287d4:	40 0f 94 c7          	sete   dil
  2287d8:	40 f6 c7 01          	test   dil,0x1
  2287dc:	40 88 7d b7          	mov    BYTE PTR [rbp-0x49],dil
  2287e0:	75 02                	jne    2287e4 <checkver+0x54>
  2287e2:	eb 1d                	jmp    228801 <checkver+0x71>
  2287e4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2287e8:	66 8b 48 04          	mov    cx,WORD PTR [rax+0x4]
  2287ec:	66 81 e1 ff 7f       	and    cx,0x7fff
  2287f1:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
  2287f4:	0f b7 f1             	movzx  esi,cx
  2287f7:	39 d6                	cmp    esi,edx
  2287f9:	40 0f 94 c7          	sete   dil
  2287fd:	40 88 7d b7          	mov    BYTE PTR [rbp-0x49],dil
  228801:	8a 45 b7             	mov    al,BYTE PTR [rbp-0x49]
  228804:	a8 01                	test   al,0x1
  228806:	75 02                	jne    22880a <checkver+0x7a>
  228808:	eb 02                	jmp    22880c <checkver+0x7c>
            break;
  22880a:	eb 3b                	jmp    228847 <checkver+0xb7>
        if (0 == (def.vd_flags & elf.VER_FLG_BASE) and (def.vd_ndx & 0x7fff) == vsym)
  22880c:	eb 00                	jmp    22880e <checkver+0x7e>
        if (def.vd_next == 0)
  22880e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  228812:	83 78 10 00          	cmp    DWORD PTR [rax+0x10],0x0
  228816:	75 0f                	jne    228827 <checkver+0x97>
            return false;
  228818:	31 c0                	xor    eax,eax
  22881a:	88 c1                	mov    cl,al
  22881c:	88 c8                	mov    al,cl
  22881e:	48 81 c4 80 00 00 00 	add    rsp,0x80
  228825:	5d                   	pop    rbp
  228826:	c3                   	ret    
        def = @intToPtr(*elf.Verdef, @ptrToInt(def) + def.vd_next);
  228827:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  22882b:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  22882f:	8b 51 10             	mov    edx,DWORD PTR [rcx+0x10]
  228832:	89 d1                	mov    ecx,edx
  228834:	48 01 c8             	add    rax,rcx
  228837:	40 0f 92 c6          	setb   sil
  22883b:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  22883f:	40 88 75 a7          	mov    BYTE PTR [rbp-0x59],sil
  228843:	72 22                	jb     228867 <checkver+0xd7>
  228845:	eb 30                	jmp    228877 <checkver+0xe7>
    }
    const aux = @intToPtr(*elf.Verdaux, @ptrToInt(def) + def.vd_aux);
  228847:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  22884b:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  22884f:	8b 51 0c             	mov    edx,DWORD PTR [rcx+0xc]
  228852:	89 d1                	mov    ecx,edx
  228854:	48 01 c8             	add    rax,rcx
  228857:	40 0f 92 c6          	setb   sil
  22885b:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  22885f:	40 88 75 97          	mov    BYTE PTR [rbp-0x69],sil
  228863:	72 1f                	jb     228884 <checkver+0xf4>
  228865:	eb 2d                	jmp    228894 <checkver+0x104>
  228867:	48 8d 3d 5a a9 01 00 	lea    rdi,[rip+0x1a95a]        # 2431c8 <__unnamed_4>
  22886e:	31 c0                	xor    eax,eax
  228870:	89 c6                	mov    esi,eax
        def = @intToPtr(*elf.Verdef, @ptrToInt(def) + def.vd_next);
  228872:	e8 89 2d fe ff       	call   20b600 <panic>
  228877:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  22887b:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
    while (true) {
  22887f:	e9 3a ff ff ff       	jmp    2287be <checkver+0x2e>
  228884:	48 8d 3d 3d a9 01 00 	lea    rdi,[rip+0x1a93d]        # 2431c8 <__unnamed_4>
  22888b:	31 c0                	xor    eax,eax
  22888d:	89 c6                	mov    esi,eax
    const aux = @intToPtr(*elf.Verdaux, @ptrToInt(def) + def.vd_aux);
  22888f:	e8 6c 2d fe ff       	call   20b600 <panic>
  228894:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  228898:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
    return mem.eql(u8, vername, cstr.toSliceConst(strings + aux.vda_name));
  22889c:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  2288a0:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  2288a4:	8b 32                	mov    esi,DWORD PTR [rdx]
  2288a6:	89 f2                	mov    edx,esi
  2288a8:	48 01 d1             	add    rcx,rdx
  2288ab:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
  2288af:	48 89 d7             	mov    rdi,rdx
  2288b2:	48 89 ce             	mov    rsi,rcx
  2288b5:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
  2288b9:	e8 52 fe ff ff       	call   228710 <toSliceConst>
  2288be:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  2288c2:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
  2288c6:	e8 95 b1 fe ff       	call   213a60 <eql>
  2288cb:	41 88 c0             	mov    r8b,al
  2288ce:	44 88 45 87          	mov    BYTE PTR [rbp-0x79],r8b
  2288d2:	48 81 c4 80 00 00 00 	add    rsp,0x80
  2288d9:	5d                   	pop    rbp
  2288da:	c3                   	ret    
  2288db:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000002288e0 <formatIntValue>:
        else => unreachable,
    }
}

pub fn formatIntValue(
  2288e0:	55                   	push   rbp
  2288e1:	48 89 e5             	mov    rbp,rsp
  2288e4:	48 83 ec 40          	sub    rsp,0x40
  2288e8:	b8 0a 00 00 00       	mov    eax,0xa
  2288ed:	45 31 c0             	xor    r8d,r8d
  2288f0:	45 31 c9             	xor    r9d,r9d
  2288f3:	45 89 ca             	mov    r10d,r9d
  2288f6:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2288fa:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  2288fe:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            },
            else => @compileError("Unknown format character: " ++ []u8{fmt[0]}),
        }
        if (fmt.len > 1) width = comptime (parseUnsigned(usize, fmt[1..], 10) catch unreachable);
    }
    return formatInt(value, radix, uppercase, width, context, Errors, output);
  228902:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  228906:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
  22890a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22890e:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  228912:	89 c2                	mov    edx,eax
  228914:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  228918:	44 89 c1             	mov    ecx,r8d
  22891b:	4d 89 d0             	mov    r8,r10
  22891e:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
  228922:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  228926:	e8 a5 0e 00 00       	call   2297d0 <formatInt>
  22892b:	66 83 f8 00          	cmp    ax,0x0
  22892f:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  228933:	74 0b                	je     228940 <formatIntValue+0x60>
  228935:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  228939:	e8 52 33 fe ff       	call   20bc90 <__zig_return_error>
  22893e:	eb 02                	jmp    228942 <formatIntValue+0x62>
  228940:	eb 00                	jmp    228942 <formatIntValue+0x62>
  228942:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  228946:	48 83 c4 40          	add    rsp,0x40
  22894a:	5d                   	pop    rbp
  22894b:	c3                   	ret    
  22894c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000228950 <formatFloatValue>:
}

fn formatFloatValue(
  228950:	55                   	push   rbp
  228951:	48 89 e5             	mov    rbp,rsp
  228954:	48 83 ec 30          	sub    rsp,0x30
  228958:	48 8d 05 41 7a fd ff 	lea    rax,[rip+0xfffffffffffd7a41]        # 2003a0 <__unnamed_198>
  22895f:	c5 fb 11 45 f0       	vmovsd QWORD PTR [rbp-0x10],xmm0
  228964:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
  228968:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
        if (fmt.len > 1) width = comptime (parseUnsigned(usize, fmt[1..], 10) catch unreachable);
    }

    switch (float_fmt) {
        'e' => try formatFloatScientific(value, width, context, Errors, output),
        '.' => try formatFloatDecimal(value, width, context, Errors, output),
  22896c:	c5 fb 10 45 f0       	vmovsd xmm0,QWORD PTR [rbp-0x10]
  228971:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  228975:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  228979:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  22897d:	48 89 c6             	mov    rsi,rax
  228980:	e8 cb 0e 00 00       	call   229850 <formatFloatDecimal>
  228985:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  228989:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  22898e:	74 1b                	je     2289ab <formatFloatValue+0x5b>
  228990:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  228994:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  228998:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  22899c:	e8 ef 32 fe ff       	call   20bc90 <__zig_return_error>
  2289a1:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  2289a5:	48 83 c4 30          	add    rsp,0x30
  2289a9:	5d                   	pop    rbp
  2289aa:	c3                   	ret    
  2289ab:	31 c0                	xor    eax,eax
  2289ad:	66 89 c1             	mov    cx,ax
) Errors!void {
  2289b0:	66 89 c8             	mov    ax,cx
  2289b3:	48 83 c4 30          	add    rsp,0x30
  2289b7:	5d                   	pop    rbp
  2289b8:	c3                   	ret    
  2289b9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

00000000002289c0 <ArenaAllocator_createNode>:
    fn createNode(self: *ArenaAllocator, prev_len: usize, minimum_size: usize) !*BufNode {
  2289c0:	55                   	push   rbp
  2289c1:	48 89 e5             	mov    rbp,rsp
  2289c4:	48 81 ec 70 01 00 00 	sub    rsp,0x170
  2289cb:	48 89 f8             	mov    rax,rdi
  2289ce:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  2289d5:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
  2289dc:	4c 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],r8
        const actual_min_size = minimum_size + @sizeOf(BufNode);
  2289e3:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  2289ea:	48 83 c1 20          	add    rcx,0x20
  2289ee:	41 0f 92 c1          	setb   r9b
  2289f2:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  2289f9:	48 89 bd 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdi
  228a00:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
  228a07:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  228a0e:	44 88 8d ff fe ff ff 	mov    BYTE PTR [rbp-0x101],r9b
  228a15:	0f 82 dd 00 00 00    	jb     228af8 <ArenaAllocator_createNode+0x138>
  228a1b:	e9 e8 00 00 00       	jmp    228b08 <ArenaAllocator_createNode+0x148>
        while (true) {
  228a20:	eb 00                	jmp    228a22 <ArenaAllocator_createNode+0x62>
  228a22:	31 c0                	xor    eax,eax
  228a24:	88 c1                	mov    cl,al
            len += len / 2;
  228a26:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
  228a2d:	48 8b b5 48 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xb8]
  228a34:	f6 c1 01             	test   cl,0x1
  228a37:	48 89 b5 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rsi
  228a3e:	48 89 95 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdx
  228a45:	0f 85 07 01 00 00    	jne    228b52 <ArenaAllocator_createNode+0x192>
  228a4b:	e9 d9 00 00 00       	jmp    228b29 <ArenaAllocator_createNode+0x169>
            if (len >= actual_min_size) break;
  228a50:	eb 02                	jmp    228a54 <ArenaAllocator_createNode+0x94>
        while (true) {
  228a52:	eb cc                	jmp    228a20 <ArenaAllocator_createNode+0x60>
  228a54:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
        const buf = try self.child_allocator.alignedAlloc(u8, @alignOf(BufNode), len);
  228a58:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  228a5f:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
  228a63:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
  228a6a:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
  228a71:	e8 5a 03 00 00       	call   228dd0 <Allocator_alignedAlloc.111>
  228a76:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  228a7b:	74 48                	je     228ac5 <ArenaAllocator_createNode+0x105>
  228a7d:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  228a81:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
  228a88:	66 89 85 e6 fe ff ff 	mov    WORD PTR [rbp-0x11a],ax
  228a8f:	e8 fc 31 fe ff       	call   20bc90 <__zig_return_error>
  228a94:	66 8b 85 e6 fe ff ff 	mov    ax,WORD PTR [rbp-0x11a]
  228a9b:	66 89 45 c0          	mov    WORD PTR [rbp-0x40],ax
  228a9f:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  228aa3:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  228aaa:	48 89 39             	mov    QWORD PTR [rcx],rdi
  228aad:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  228ab1:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  228ab5:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  228abc:	48 81 c4 70 01 00 00 	add    rsp,0x170
  228ac3:	5d                   	pop    rbp
  228ac4:	c3                   	ret    
  228ac5:	b0 01                	mov    al,0x1
  228ac7:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  228acb:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  228ad2:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  228ad6:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
        const buf_node_slice = @bytesToSlice(BufNode, buf[0..@sizeOf(BufNode)]);
  228add:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  228ae4:	a8 01                	test   al,0x1
  228ae6:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
  228aed:	0f 85 6c 01 00 00    	jne    228c5f <ArenaAllocator_createNode+0x29f>
  228af3:	e9 57 01 00 00       	jmp    228c4f <ArenaAllocator_createNode+0x28f>
  228af8:	48 8d 3d c9 a6 01 00 	lea    rdi,[rip+0x1a6c9]        # 2431c8 <__unnamed_4>
  228aff:	31 c0                	xor    eax,eax
  228b01:	89 c6                	mov    esi,eax
        const actual_min_size = minimum_size + @sizeOf(BufNode);
  228b03:	e8 f8 2a fe ff       	call   20b600 <panic>
  228b08:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  228b0f:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        var len = prev_len;
  228b16:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  228b1d:	48 89 8d 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rcx
        while (true) {
  228b24:	e9 f7 fe ff ff       	jmp    228a20 <ArenaAllocator_createNode+0x60>
            len += len / 2;
  228b29:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  228b30:	48 c1 e8 01          	shr    rax,0x1
  228b34:	48 8b 8d e8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x118]
  228b3b:	48 01 c1             	add    rcx,rax
  228b3e:	0f 92 c2             	setb   dl
  228b41:	48 89 8d d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rcx
  228b48:	88 95 cf fe ff ff    	mov    BYTE PTR [rbp-0x131],dl
  228b4e:	72 12                	jb     228b62 <ArenaAllocator_createNode+0x1a2>
  228b50:	eb 20                	jmp    228b72 <ArenaAllocator_createNode+0x1b2>
  228b52:	48 8d 3d e7 a6 01 00 	lea    rdi,[rip+0x1a6e7]        # 243240 <__unnamed_7>
  228b59:	31 c0                	xor    eax,eax
  228b5b:	89 c6                	mov    esi,eax
  228b5d:	e8 9e 2a fe ff       	call   20b600 <panic>
  228b62:	48 8d 3d 5f a6 01 00 	lea    rdi,[rip+0x1a65f]        # 2431c8 <__unnamed_4>
  228b69:	31 c0                	xor    eax,eax
  228b6b:	89 c6                	mov    esi,eax
  228b6d:	e8 8e 2a fe ff       	call   20b600 <panic>
  228b72:	31 c0                	xor    eax,eax
  228b74:	88 c1                	mov    cl,al
  228b76:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
  228b7d:	48 89 95 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdx
            len += os.page_size - @rem(len, os.page_size);
  228b84:	48 8b b5 48 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xb8]
  228b8b:	48 8b bd 48 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb8]
  228b92:	f6 c1 01             	test   cl,0x1
  228b95:	48 89 bd c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rdi
  228b9c:	48 89 b5 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rsi
  228ba3:	75 2e                	jne    228bd3 <ArenaAllocator_createNode+0x213>
  228ba5:	b8 00 10 00 00       	mov    eax,0x1000
  228baa:	89 c1                	mov    ecx,eax
  228bac:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  228bb3:	48 81 e2 ff 0f 00 00 	and    rdx,0xfff
  228bba:	48 29 d1             	sub    rcx,rdx
  228bbd:	40 0f 92 c6          	setb   sil
  228bc1:	48 89 8d b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rcx
  228bc8:	40 88 b5 af fe ff ff 	mov    BYTE PTR [rbp-0x151],sil
  228bcf:	72 12                	jb     228be3 <ArenaAllocator_createNode+0x223>
  228bd1:	eb 20                	jmp    228bf3 <ArenaAllocator_createNode+0x233>
  228bd3:	48 8d 3d 1e a7 01 00 	lea    rdi,[rip+0x1a71e]        # 2432f8 <__unnamed_15>
  228bda:	31 c0                	xor    eax,eax
  228bdc:	89 c6                	mov    esi,eax
  228bde:	e8 1d 2a fe ff       	call   20b600 <panic>
  228be3:	48 8d 3d de a5 01 00 	lea    rdi,[rip+0x1a5de]        # 2431c8 <__unnamed_4>
  228bea:	31 c0                	xor    eax,eax
  228bec:	89 c6                	mov    esi,eax
  228bee:	e8 0d 2a fe ff       	call   20b600 <panic>
  228bf3:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  228bfa:	48 8b 8d b0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x150]
  228c01:	48 01 c8             	add    rax,rcx
  228c04:	0f 92 c2             	setb   dl
  228c07:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
  228c0e:	88 95 9f fe ff ff    	mov    BYTE PTR [rbp-0x161],dl
  228c14:	72 02                	jb     228c18 <ArenaAllocator_createNode+0x258>
  228c16:	eb 10                	jmp    228c28 <ArenaAllocator_createNode+0x268>
  228c18:	48 8d 3d a9 a5 01 00 	lea    rdi,[rip+0x1a5a9]        # 2431c8 <__unnamed_4>
  228c1f:	31 c0                	xor    eax,eax
  228c21:	89 c6                	mov    esi,eax
  228c23:	e8 d8 29 fe ff       	call   20b600 <panic>
  228c28:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
  228c2f:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
            if (len >= actual_min_size) break;
  228c36:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
  228c3d:	48 3b 8d 50 ff ff ff 	cmp    rcx,QWORD PTR [rbp-0xb0]
  228c44:	0f 83 06 fe ff ff    	jae    228a50 <ArenaAllocator_createNode+0x90>
  228c4a:	e9 03 fe ff ff       	jmp    228a52 <ArenaAllocator_createNode+0x92>
  228c4f:	48 8d 3d a2 a7 01 00 	lea    rdi,[rip+0x1a7a2]        # 2433f8 <__unnamed_20>
  228c56:	31 c0                	xor    eax,eax
  228c58:	89 c6                	mov    esi,eax
        const buf_node_slice = @bytesToSlice(BufNode, buf[0..@sizeOf(BufNode)]);
  228c5a:	e8 a1 29 fe ff       	call   20b600 <panic>
  228c5f:	b8 20 00 00 00       	mov    eax,0x20
  228c64:	89 c1                	mov    ecx,eax
  228c66:	48 8b 95 d8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x128]
  228c6d:	48 39 d1             	cmp    rcx,rdx
  228c70:	76 10                	jbe    228c82 <ArenaAllocator_createNode+0x2c2>
  228c72:	48 8d 3d 7f a7 01 00 	lea    rdi,[rip+0x1a77f]        # 2433f8 <__unnamed_20>
  228c79:	31 c0                	xor    eax,eax
  228c7b:	89 c6                	mov    esi,eax
  228c7d:	e8 7e 29 fe ff       	call   20b600 <panic>
  228c82:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  228c89:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  228c8d:	48 c7 45 b8 20 00 00 	mov    QWORD PTR [rbp-0x48],0x20
  228c94:	00 
  228c95:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  228c99:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  228c9d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  228ca1:	48 89 c1             	mov    rcx,rax
  228ca4:	48 83 e1 1f          	and    rcx,0x1f
  228ca8:	48 83 f9 00          	cmp    rcx,0x0
  228cac:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  228cb3:	75 34                	jne    228ce9 <ArenaAllocator_createNode+0x329>
  228cb5:	31 c0                	xor    eax,eax
  228cb7:	89 c1                	mov    ecx,eax
  228cb9:	48 8b 95 90 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x170]
  228cc0:	48 c1 ea 05          	shr    rdx,0x5
  228cc4:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
  228cc8:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  228ccc:	48 89 95 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rdx
  228cd3:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  228cd7:	48 89 95 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rdx
        const buf_node = &buf_node_slice[0];
  228cde:	48 3b 8d 30 ff ff ff 	cmp    rcx,QWORD PTR [rbp-0xd0]
  228ce5:	72 22                	jb     228d09 <ArenaAllocator_createNode+0x349>
  228ce7:	eb 10                	jmp    228cf9 <ArenaAllocator_createNode+0x339>
  228ce9:	48 8d 3d f8 a8 01 00 	lea    rdi,[rip+0x1a8f8]        # 2435e8 <__unnamed_76>
  228cf0:	31 c0                	xor    eax,eax
  228cf2:	89 c6                	mov    esi,eax
        const buf_node_slice = @bytesToSlice(BufNode, buf[0..@sizeOf(BufNode)]);
  228cf4:	e8 07 29 fe ff       	call   20b600 <panic>
  228cf9:	48 8d 3d f8 a6 01 00 	lea    rdi,[rip+0x1a6f8]        # 2433f8 <__unnamed_20>
  228d00:	31 c0                	xor    eax,eax
  228d02:	89 c6                	mov    esi,eax
        const buf_node = &buf_node_slice[0];
  228d04:	e8 f7 28 fe ff       	call   20b600 <panic>
  228d09:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  228d10:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
        buf_node.* = BufNode{
  228d17:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  228d1e:	48 c7 45 80 00 00 00 	mov    QWORD PTR [rbp-0x80],0x0
  228d25:	00 
  228d26:	48 c7 45 88 00 00 00 	mov    QWORD PTR [rbp-0x78],0x0
  228d2d:	00 
  228d2e:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
  228d35:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
  228d39:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  228d40:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
  228d44:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  228d48:	48 89 08             	mov    QWORD PTR [rax],rcx
  228d4b:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  228d4f:	48 89 48 08          	mov    QWORD PTR [rax+0x8],rcx
  228d53:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  228d57:	48 89 48 10          	mov    QWORD PTR [rax+0x10],rcx
  228d5b:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  228d5f:	48 89 48 18          	mov    QWORD PTR [rax+0x18],rcx
        self.buffer_list.append(buf_node);
  228d63:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  228d6a:	48 83 c0 20          	add    rax,0x20
  228d6e:	48 8b b5 20 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe0]
  228d75:	48 89 c7             	mov    rdi,rax
  228d78:	e8 33 03 00 00       	call   2290b0 <BaseLinkedList([]u8,void,(struct []const u8 constant))_append>
        self.end_index = 0;
  228d7d:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  228d84:	48 c7 40 38 00 00 00 	mov    QWORD PTR [rax+0x38],0x0
  228d8b:	00 
        return buf_node;
  228d8c:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  228d93:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  228d9a:	00 00 
  228d9c:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  228da3:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  228daa:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  228db1:	48 89 01             	mov    QWORD PTR [rcx],rax
  228db4:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  228dbb:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  228dbf:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  228dc6:	48 81 c4 70 01 00 00 	add    rsp,0x170
  228dcd:	5d                   	pop    rbp
  228dce:	c3                   	ret    
  228dcf:	90                   	nop

0000000000228dd0 <Allocator_alignedAlloc.111>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  228dd0:	55                   	push   rbp
  228dd1:	48 89 e5             	mov    rbp,rsp
  228dd4:	48 81 ec 10 01 00 00 	sub    rsp,0x110
  228ddb:	48 89 f8             	mov    rax,rdi
  228dde:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  228de5:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  228dec:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  228df3:	00 
  228df4:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  228dfb:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  228e02:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  228e09:	75 37                	jne    228e42 <Allocator_alignedAlloc.111+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  228e0b:	48 8b 05 6e 19 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe196e]        # 20a780 <__unnamed_199>
  228e12:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  228e19:	48 89 01             	mov    QWORD PTR [rcx],rax
  228e1c:	48 8b 05 65 19 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe1965]        # 20a788 <__unnamed_199+0x8>
  228e23:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  228e27:	48 8b 05 62 19 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe1962]        # 20a790 <__unnamed_199+0x10>
  228e2e:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  228e32:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  228e39:	48 81 c4 10 01 00 00 	add    rsp,0x110
  228e40:	5d                   	pop    rbp
  228e41:	c3                   	ret    
        if (n == 0) {
  228e42:	eb 00                	jmp    228e44 <Allocator_alignedAlloc.111+0x74>
  228e44:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  228e48:	b8 01 00 00 00       	mov    eax,0x1
  228e4d:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  228e4f:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  228e56:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  228e5d:	e8 ae c5 fe ff       	call   215410 <mul>
  228e62:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  228e67:	74 43                	je     228eac <Allocator_alignedAlloc.111+0xdc>
  228e69:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  228e70:	e8 1b 2e fe ff       	call   20bc90 <__zig_return_error>
  228e75:	48 8b 3d 1c 19 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe191c]        # 20a798 <__unnamed_200>
  228e7c:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  228e83:	48 89 38             	mov    QWORD PTR [rax],rdi
  228e86:	48 8b 3d 13 19 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe1913]        # 20a7a0 <__unnamed_200+0x8>
  228e8d:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  228e91:	48 8b 3d 10 19 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe1910]        # 20a7a8 <__unnamed_200+0x10>
  228e98:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  228e9c:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  228ea3:	48 81 c4 10 01 00 00 	add    rsp,0x110
  228eaa:	5d                   	pop    rbp
  228eab:	c3                   	ret    
  228eac:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  228eb0:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  228eb7:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  228ebb:	41 b8 08 00 00 00    	mov    r8d,0x8
  228ec1:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  228ec8:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  228ecf:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  228ed6:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  228ed9:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  228ee0:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  228ee7:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  228eee:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  228ef5:	4c 89 ce             	mov    rsi,r9
  228ef8:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  228eff:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  228f06:	4c 89 d1             	mov    rcx,r10
  228f09:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  228f10:	41 ff d3             	call   r11
  228f13:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  228f18:	74 50                	je     228f6a <Allocator_alignedAlloc.111+0x19a>
  228f1a:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  228f1e:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  228f25:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  228f2c:	e8 5f 2d fe ff       	call   20bc90 <__zig_return_error>
  228f31:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  228f38:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  228f3c:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  228f40:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  228f47:	48 89 39             	mov    QWORD PTR [rcx],rdi
  228f4a:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  228f4e:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  228f52:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  228f56:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  228f5a:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  228f61:	48 81 c4 10 01 00 00 	add    rsp,0x110
  228f68:	5d                   	pop    rbp
  228f69:	c3                   	ret    
  228f6a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  228f6e:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  228f75:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  228f79:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  228f80:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  228f87:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  228f8e:	0f 94 c1             	sete   cl
  228f91:	0f b6 f9             	movzx  edi,cl
  228f94:	e8 67 20 fe ff       	call   20b000 <assert>
  228f99:	be aa 00 00 00       	mov    esi,0xaa
  228f9e:	bf 08 00 00 00       	mov    edi,0x8
  228fa3:	89 fa                	mov    edx,edi
  228fa5:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  228fac:	48 89 c7             	mov    rdi,rax
  228faf:	e8 fc b8 00 00       	call   2348b0 <memset>
  228fb4:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  228fbb:	00 00 00 00 
  228fbf:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  228fc6:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  228fcd:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  228fd4:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  228fdb:	48 39 c8             	cmp    rax,rcx
  228fde:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  228fe5:	73 32                	jae    229019 <Allocator_alignedAlloc.111+0x249>
  228fe7:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  228fee:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  228ff5:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  228ffc:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  229003:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  229005:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22900c:	48 83 c1 01          	add    rcx,0x1
  229010:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  229017:	eb b4                	jmp    228fcd <Allocator_alignedAlloc.111+0x1fd>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  229019:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  229020:	48 83 e0 07          	and    rax,0x7
  229024:	48 83 f8 00          	cmp    rax,0x0
  229028:	75 6a                	jne    229094 <Allocator_alignedAlloc.111+0x2c4>
  22902a:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  229031:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  229035:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  22903c:	48 c1 e0 00          	shl    rax,0x0
  229040:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  229044:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  22904b:	00 00 
  22904d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  229051:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  229058:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  22905c:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  229060:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  229067:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  22906e:	48 89 01             	mov    QWORD PTR [rcx],rax
  229071:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  229078:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  22907c:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  229080:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  229084:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  22908b:	48 81 c4 10 01 00 00 	add    rsp,0x110
  229092:	5d                   	pop    rbp
  229093:	c3                   	ret    
  229094:	48 8d 3d 35 a5 01 00 	lea    rdi,[rip+0x1a535]        # 2435d0 <__unnamed_75>
  22909b:	31 c0                	xor    eax,eax
  22909d:	89 c6                	mov    esi,eax
  22909f:	e8 5c 25 fe ff       	call   20b600 <panic>
  2290a4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2290ab:	00 00 00 00 00 

00000000002290b0 <BaseLinkedList([]u8,void,(struct []const u8 constant))_append>:
        pub fn append(list: *Self, new_node: *Node) void {
  2290b0:	55                   	push   rbp
  2290b1:	48 89 e5             	mov    rbp,rsp
  2290b4:	48 83 ec 20          	sub    rsp,0x20
  2290b8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  2290bc:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
            if (list.last) |last| {
  2290c0:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2290c4:	48 89 f7             	mov    rdi,rsi
  2290c7:	48 83 c7 08          	add    rdi,0x8
  2290cb:	48 83 7e 08 00       	cmp    QWORD PTR [rsi+0x8],0x0
  2290d0:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2290d4:	74 1e                	je     2290f4 <BaseLinkedList([]u8,void,(struct []const u8 constant))_append+0x44>
  2290d6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2290da:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  2290dd:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
                list.insertAfter(last, new_node);
  2290e1:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  2290e5:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  2290e9:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  2290ed:	e8 1e 00 00 00       	call   229110 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertAfter>
            if (list.last) |last| {
  2290f2:	eb 0d                	jmp    229101 <BaseLinkedList([]u8,void,(struct []const u8 constant))_append+0x51>
                list.prepend(new_node);
  2290f4:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  2290f8:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  2290fc:	e8 df 00 00 00       	call   2291e0 <BaseLinkedList([]u8,void,(struct []const u8 constant))_prepend>
        pub fn append(list: *Self, new_node: *Node) void {
  229101:	48 83 c4 20          	add    rsp,0x20
  229105:	5d                   	pop    rbp
  229106:	c3                   	ret    
  229107:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  22910e:	00 00 

0000000000229110 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertAfter>:
        pub fn insertAfter(list: *Self, node: *Node, new_node: *Node) void {
  229110:	55                   	push   rbp
  229111:	48 89 e5             	mov    rbp,rsp
  229114:	48 83 ec 40          	sub    rsp,0x40
  229118:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  22911c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  229120:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
            new_node.prev = node;
  229124:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  229128:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  22912c:	48 89 32             	mov    QWORD PTR [rdx],rsi
            if (node.next) |next_node| {
  22912f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  229133:	48 89 d6             	mov    rsi,rdx
  229136:	48 83 c6 08          	add    rsi,0x8
  22913a:	48 83 7a 08 00       	cmp    QWORD PTR [rdx+0x8],0x0
  22913f:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  229143:	74 24                	je     229169 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertAfter+0x59>
  229145:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  229149:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22914c:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
                new_node.next = next_node;
  229150:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  229154:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  229158:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
                next_node.prev = new_node;
  22915c:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  229160:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  229164:	48 89 11             	mov    QWORD PTR [rcx],rdx
            if (node.next) |next_node| {
  229167:	eb 18                	jmp    229181 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertAfter+0x71>
                new_node.next = null;
  229169:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22916d:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
  229174:	00 
                list.last = new_node;
  229175:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  229179:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22917d:	48 89 48 08          	mov    QWORD PTR [rax+0x8],rcx
            node.next = new_node;
  229181:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  229185:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  229189:	48 89 48 08          	mov    QWORD PTR [rax+0x8],rcx
            list.len += 1;
  22918d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  229191:	48 89 c1             	mov    rcx,rax
  229194:	48 83 c1 10          	add    rcx,0x10
  229198:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  22919c:	48 83 c0 01          	add    rax,0x1
  2291a0:	0f 92 c2             	setb   dl
  2291a3:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  2291a7:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  2291ab:	88 55 c7             	mov    BYTE PTR [rbp-0x39],dl
  2291ae:	72 02                	jb     2291b2 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertAfter+0xa2>
  2291b0:	eb 10                	jmp    2291c2 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertAfter+0xb2>
  2291b2:	48 8d 3d 0f a0 01 00 	lea    rdi,[rip+0x1a00f]        # 2431c8 <__unnamed_4>
  2291b9:	31 c0                	xor    eax,eax
  2291bb:	89 c6                	mov    esi,eax
  2291bd:	e8 3e 24 fe ff       	call   20b600 <panic>
  2291c2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2291c6:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  2291ca:	48 89 08             	mov    QWORD PTR [rax],rcx
        pub fn insertAfter(list: *Self, node: *Node, new_node: *Node) void {
  2291cd:	48 83 c4 40          	add    rsp,0x40
  2291d1:	5d                   	pop    rbp
  2291d2:	c3                   	ret    
  2291d3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2291da:	84 00 00 00 00 00 

00000000002291e0 <BaseLinkedList([]u8,void,(struct []const u8 constant))_prepend>:
        pub fn prepend(list: *Self, new_node: *Node) void {
  2291e0:	55                   	push   rbp
  2291e1:	48 89 e5             	mov    rbp,rsp
  2291e4:	48 83 ec 20          	sub    rsp,0x20
  2291e8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  2291ec:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
            if (list.first) |first| {
  2291f0:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2291f4:	48 83 3e 00          	cmp    QWORD PTR [rsi],0x0
  2291f8:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  2291fc:	74 1e                	je     22921c <BaseLinkedList([]u8,void,(struct []const u8 constant))_prepend+0x3c>
  2291fe:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  229202:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  229205:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
                list.insertBefore(first, new_node);
  229209:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  22920d:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  229211:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  229215:	e8 16 19 00 00       	call   22ab30 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertBefore>
            if (list.first) |first| {
  22921a:	eb 3a                	jmp    229256 <BaseLinkedList([]u8,void,(struct []const u8 constant))_prepend+0x76>
                list.first = new_node;
  22921c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  229220:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  229224:	48 89 08             	mov    QWORD PTR [rax],rcx
                list.last = new_node;
  229227:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  22922b:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  22922f:	48 89 48 08          	mov    QWORD PTR [rax+0x8],rcx
                new_node.prev = null;
  229233:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  229237:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
                new_node.next = null;
  22923e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  229242:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
  229249:	00 
                list.len = 1;
  22924a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  22924e:	48 c7 40 10 01 00 00 	mov    QWORD PTR [rax+0x10],0x1
  229255:	00 
        pub fn prepend(list: *Self, new_node: *Node) void {
  229256:	48 83 c4 20          	add    rsp,0x20
  22925a:	5d                   	pop    rbp
  22925b:	c3                   	ret    
  22925c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000229260 <open>:
pub fn open(path: [*]const u8, flags: u32, perm: usize) usize {
  229260:	55                   	push   rbp
  229261:	48 89 e5             	mov    rbp,rsp
  229264:	48 83 ec 30          	sub    rsp,0x30
  229268:	b8 02 00 00 00       	mov    eax,0x2
  22926d:	89 c1                	mov    ecx,eax
  22926f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  229273:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
  229276:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    return syscall3(SYS_open, @ptrToInt(path), flags, perm);
  22927a:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  22927e:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  229281:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  229285:	89 c0                	mov    eax,eax
  229287:	89 c7                	mov    edi,eax
  229289:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  22928d:	48 89 cf             	mov    rdi,rcx
  229290:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  229294:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  229298:	48 89 ca             	mov    rdx,rcx
  22929b:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  22929f:	e8 6c b6 fe ff       	call   214910 <syscall3>
  2292a4:	48 83 c4 30          	add    rsp,0x30
  2292a8:	5d                   	pop    rbp
  2292a9:	c3                   	ret    
  2292aa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000002292b0 <syscall1>:
pub fn syscall1(number: usize, arg1: usize) usize {
  2292b0:	55                   	push   rbp
  2292b1:	48 89 e5             	mov    rbp,rsp
  2292b4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  2292b8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
        : [number] "{rax}" (number),
  2292bc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
          [arg1] "{rdi}" (arg1)
  2292c0:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
    return asm volatile ("syscall"
  2292c4:	0f 05                	syscall 
  2292c6:	5d                   	pop    rbp
  2292c7:	c3                   	ret    
  2292c8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  2292cf:	00 

00000000002292d0 <BaseLinkedList(promise,void,(struct []const u8 constant))_init>:
        pub fn init() Self {
  2292d0:	55                   	push   rbp
  2292d1:	48 89 e5             	mov    rbp,rsp
  2292d4:	48 89 f8             	mov    rax,rdi
            return Self{
  2292d7:	48 8b 0d ea 14 fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe14ea]        # 20a7c8 <__unnamed_201>
  2292de:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  2292e1:	48 8b 0d e8 14 fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe14e8]        # 20a7d0 <__unnamed_201+0x8>
  2292e8:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  2292ec:	48 8b 0d e5 14 fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe14e5]        # 20a7d8 <__unnamed_201+0x10>
  2292f3:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  2292f7:	5d                   	pop    rbp
  2292f8:	c3                   	ret    
  2292f9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000229300 <BaseLinkedList(promise,void,(struct []const u8 constant))_remove>:
        pub fn remove(list: *Self, node: *Node) void {
  229300:	55                   	push   rbp
  229301:	48 89 e5             	mov    rbp,rsp
  229304:	48 83 ec 50          	sub    rsp,0x50
  229308:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  22930c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
            if (node.prev) |prev_node| {
  229310:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  229314:	48 83 3e 00          	cmp    QWORD PTR [rsi],0x0
  229318:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  22931c:	74 1d                	je     22933b <BaseLinkedList(promise,void,(struct []const u8 constant))_remove+0x3b>
  22931e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  229322:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  229325:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
                prev_node.next = node.next;
  229329:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22932d:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  229331:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  229335:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
            if (node.prev) |prev_node| {
  229339:	eb 0f                	jmp    22934a <BaseLinkedList(promise,void,(struct []const u8 constant))_remove+0x4a>
                list.first = node.next;
  22933b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  22933f:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  229343:	48 8b 49 08          	mov    rcx,QWORD PTR [rcx+0x8]
  229347:	48 89 08             	mov    QWORD PTR [rax],rcx
            if (node.next) |next_node| {
  22934a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22934e:	48 89 c1             	mov    rcx,rax
  229351:	48 83 c1 08          	add    rcx,0x8
  229355:	48 83 78 08 00       	cmp    QWORD PTR [rax+0x8],0x0
  22935a:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  22935e:	74 1b                	je     22937b <BaseLinkedList(promise,void,(struct []const u8 constant))_remove+0x7b>
  229360:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  229364:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  229367:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
                next_node.prev = node.prev;
  22936b:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  22936f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  229373:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
  229376:	48 89 11             	mov    QWORD PTR [rcx],rdx
            if (node.next) |next_node| {
  229379:	eb 0f                	jmp    22938a <BaseLinkedList(promise,void,(struct []const u8 constant))_remove+0x8a>
                list.last = node.prev;
  22937b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  22937f:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  229383:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  229386:	48 89 48 08          	mov    QWORD PTR [rax+0x8],rcx
            list.len -= 1;
  22938a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  22938e:	48 89 c1             	mov    rcx,rax
  229391:	48 83 c1 10          	add    rcx,0x10
  229395:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  229399:	48 83 e8 01          	sub    rax,0x1
  22939d:	0f 92 c2             	setb   dl
  2293a0:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  2293a4:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  2293a8:	88 55 bf             	mov    BYTE PTR [rbp-0x41],dl
  2293ab:	72 3d                	jb     2293ea <BaseLinkedList(promise,void,(struct []const u8 constant))_remove+0xea>
  2293ad:	eb 4b                	jmp    2293fa <BaseLinkedList(promise,void,(struct []const u8 constant))_remove+0xfa>
            assert(list.len == 0 or (list.first != null and list.last != null));
  2293af:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2293b3:	48 83 38 00          	cmp    QWORD PTR [rax],0x0
  2293b7:	0f 95 c1             	setne  cl
  2293ba:	f6 c1 01             	test   cl,0x1
  2293bd:	88 4d be             	mov    BYTE PTR [rbp-0x42],cl
  2293c0:	75 02                	jne    2293c4 <BaseLinkedList(promise,void,(struct []const u8 constant))_remove+0xc4>
  2293c2:	eb 0f                	jmp    2293d3 <BaseLinkedList(promise,void,(struct []const u8 constant))_remove+0xd3>
  2293c4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2293c8:	48 83 78 08 00       	cmp    QWORD PTR [rax+0x8],0x0
  2293cd:	0f 95 c1             	setne  cl
  2293d0:	88 4d be             	mov    BYTE PTR [rbp-0x42],cl
  2293d3:	8a 45 be             	mov    al,BYTE PTR [rbp-0x42]
  2293d6:	88 45 bd             	mov    BYTE PTR [rbp-0x43],al
  2293d9:	8a 45 bd             	mov    al,BYTE PTR [rbp-0x43]
  2293dc:	0f b6 f8             	movzx  edi,al
  2293df:	e8 1c 1c fe ff       	call   20b000 <assert>
        pub fn remove(list: *Self, node: *Node) void {
  2293e4:	48 83 c4 50          	add    rsp,0x50
  2293e8:	5d                   	pop    rbp
  2293e9:	c3                   	ret    
  2293ea:	48 8d 3d d7 9d 01 00 	lea    rdi,[rip+0x19dd7]        # 2431c8 <__unnamed_4>
  2293f1:	31 c0                	xor    eax,eax
  2293f3:	89 c6                	mov    esi,eax
            list.len -= 1;
  2293f5:	e8 06 22 fe ff       	call   20b600 <panic>
  2293fa:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2293fe:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  229402:	48 89 08             	mov    QWORD PTR [rax],rcx
            assert(list.len == 0 or (list.first != null and list.last != null));
  229405:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  229409:	48 83 7a 10 00       	cmp    QWORD PTR [rdx+0x10],0x0
  22940e:	40 0f 94 c6          	sete   sil
  229412:	40 f6 c6 01          	test   sil,0x1
  229416:	40 88 75 bd          	mov    BYTE PTR [rbp-0x43],sil
  22941a:	75 bd                	jne    2293d9 <BaseLinkedList(promise,void,(struct []const u8 constant))_remove+0xd9>
  22941c:	eb 91                	jmp    2293af <BaseLinkedList(promise,void,(struct []const u8 constant))_remove+0xaf>
  22941e:	66 90                	xchg   ax,ax

0000000000229420 <isatty>:
pub fn isatty(fd: i32) bool {
  229420:	55                   	push   rbp
  229421:	48 89 e5             	mov    rbp,rsp
  229424:	48 83 ec 10          	sub    rsp,0x10
  229428:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    var wsz: winsize = undefined;
  22942b:	48 8b 05 46 78 fd ff 	mov    rax,QWORD PTR [rip+0xfffffffffffd7846]        # 200c78 <__unnamed_132>
  229432:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    return syscall3(SYS_ioctl, @intCast(usize, fd), TIOCGWINSZ, @ptrToInt(&wsz)) == 0;
  229436:	48 63 75 fc          	movsxd rsi,DWORD PTR [rbp-0x4]
  22943a:	bf 10 00 00 00       	mov    edi,0x10
  22943f:	b9 13 54 00 00       	mov    ecx,0x5413
  229444:	89 ca                	mov    edx,ecx
  229446:	48 8d 4d f0          	lea    rcx,[rbp-0x10]
  22944a:	e8 c1 b4 fe ff       	call   214910 <syscall3>
  22944f:	48 85 c0             	test   rax,rax
  229452:	0f 94 c0             	sete   al
  229455:	48 83 c4 10          	add    rsp,0x10
  229459:	5d                   	pop    rbp
  22945a:	c3                   	ret    
  22945b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000229460 <formatIntValue.112>:
pub fn formatIntValue(
  229460:	55                   	push   rbp
  229461:	48 89 e5             	mov    rbp,rsp
  229464:	48 83 ec 40          	sub    rsp,0x40
  229468:	b8 10 00 00 00       	mov    eax,0x10
  22946d:	45 31 c0             	xor    r8d,r8d
  229470:	45 31 c9             	xor    r9d,r9d
  229473:	45 89 ca             	mov    r10d,r9d
  229476:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22947a:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  22947e:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    return formatInt(value, radix, uppercase, width, context, Errors, output);
  229482:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  229486:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
  22948a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22948e:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  229492:	89 c2                	mov    edx,eax
  229494:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  229498:	44 89 c1             	mov    ecx,r8d
  22949b:	4d 89 d0             	mov    r8,r10
  22949e:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
  2294a2:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  2294a6:	e8 45 17 00 00       	call   22abf0 <formatInt.119>
  2294ab:	66 83 f8 00          	cmp    ax,0x0
  2294af:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  2294b3:	74 0b                	je     2294c0 <formatIntValue.112+0x60>
  2294b5:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2294b9:	e8 d2 27 fe ff       	call   20bc90 <__zig_return_error>
  2294be:	eb 02                	jmp    2294c2 <formatIntValue.112+0x62>
  2294c0:	eb 00                	jmp    2294c2 <formatIntValue.112+0x62>
  2294c2:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  2294c6:	48 83 c4 40          	add    rsp,0x40
  2294ca:	5d                   	pop    rbp
  2294cb:	c3                   	ret    
  2294cc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

00000000002294d0 <formatIntValue.113>:
pub fn formatIntValue(
  2294d0:	55                   	push   rbp
  2294d1:	48 89 e5             	mov    rbp,rsp
  2294d4:	48 83 ec 40          	sub    rsp,0x40
  2294d8:	b8 10 00 00 00       	mov    eax,0x10
  2294dd:	45 31 c0             	xor    r8d,r8d
  2294e0:	45 31 c9             	xor    r9d,r9d
  2294e3:	45 89 ca             	mov    r10d,r9d
  2294e6:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2294ea:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  2294ee:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    return formatInt(value, radix, uppercase, width, context, Errors, output);
  2294f2:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2294f6:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
  2294fa:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2294fe:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  229502:	89 c2                	mov    edx,eax
  229504:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  229508:	44 89 c1             	mov    ecx,r8d
  22950b:	4d 89 d0             	mov    r8,r10
  22950e:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
  229512:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  229516:	e8 d5 16 00 00       	call   22abf0 <formatInt.119>
  22951b:	66 83 f8 00          	cmp    ax,0x0
  22951f:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  229523:	74 0b                	je     229530 <formatIntValue.113+0x60>
  229525:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  229529:	e8 62 27 fe ff       	call   20bc90 <__zig_return_error>
  22952e:	eb 02                	jmp    229532 <formatIntValue.113+0x62>
  229530:	eb 00                	jmp    229532 <formatIntValue.113+0x62>
  229532:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  229536:	48 83 c4 40          	add    rsp,0x40
  22953a:	5d                   	pop    rbp
  22953b:	c3                   	ret    
  22953c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000229540 <formatIntValue.114>:
pub fn formatIntValue(
  229540:	55                   	push   rbp
  229541:	48 89 e5             	mov    rbp,rsp
  229544:	48 83 ec 40          	sub    rsp,0x40
  229548:	b8 0a 00 00 00       	mov    eax,0xa
  22954d:	45 31 c0             	xor    r8d,r8d
  229550:	45 31 c9             	xor    r9d,r9d
  229553:	45 89 ca             	mov    r10d,r9d
  229556:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22955a:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  22955e:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    return formatInt(value, radix, uppercase, width, context, Errors, output);
  229562:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  229566:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
  22956a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22956e:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  229572:	89 c2                	mov    edx,eax
  229574:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  229578:	44 89 c1             	mov    ecx,r8d
  22957b:	4d 89 d0             	mov    r8,r10
  22957e:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
  229582:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  229586:	e8 65 16 00 00       	call   22abf0 <formatInt.119>
  22958b:	66 83 f8 00          	cmp    ax,0x0
  22958f:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  229593:	74 0b                	je     2295a0 <formatIntValue.114+0x60>
  229595:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  229599:	e8 f2 26 fe ff       	call   20bc90 <__zig_return_error>
  22959e:	eb 02                	jmp    2295a2 <formatIntValue.114+0x62>
  2295a0:	eb 00                	jmp    2295a2 <formatIntValue.114+0x62>
  2295a2:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  2295a6:	48 83 c4 40          	add    rsp,0x40
  2295aa:	5d                   	pop    rbp
  2295ab:	c3                   	ret    
  2295ac:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

00000000002295b0 <formatIntValue.115>:
pub fn formatIntValue(
  2295b0:	55                   	push   rbp
  2295b1:	48 89 e5             	mov    rbp,rsp
  2295b4:	48 83 ec 40          	sub    rsp,0x40
  2295b8:	b8 10 00 00 00       	mov    eax,0x10
  2295bd:	45 31 c0             	xor    r8d,r8d
  2295c0:	45 31 c9             	xor    r9d,r9d
  2295c3:	45 89 ca             	mov    r10d,r9d
  2295c6:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2295ca:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  2295ce:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    return formatInt(value, radix, uppercase, width, context, Errors, output);
  2295d2:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2295d6:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
  2295da:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2295de:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2295e2:	89 c2                	mov    edx,eax
  2295e4:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  2295e8:	44 89 c1             	mov    ecx,r8d
  2295eb:	4d 89 d0             	mov    r8,r10
  2295ee:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
  2295f2:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  2295f6:	e8 f5 15 00 00       	call   22abf0 <formatInt.119>
  2295fb:	66 83 f8 00          	cmp    ax,0x0
  2295ff:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  229603:	74 0b                	je     229610 <formatIntValue.115+0x60>
  229605:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  229609:	e8 82 26 fe ff       	call   20bc90 <__zig_return_error>
  22960e:	eb 02                	jmp    229612 <formatIntValue.115+0x62>
  229610:	eb 00                	jmp    229612 <formatIntValue.115+0x62>
  229612:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  229616:	48 83 c4 40          	add    rsp,0x40
  22961a:	5d                   	pop    rbp
  22961b:	c3                   	ret    
  22961c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000229620 <formatIntValue.116>:
pub fn formatIntValue(
  229620:	55                   	push   rbp
  229621:	48 89 e5             	mov    rbp,rsp
  229624:	48 83 ec 40          	sub    rsp,0x40
  229628:	b8 0a 00 00 00       	mov    eax,0xa
  22962d:	45 31 c0             	xor    r8d,r8d
  229630:	45 31 c9             	xor    r9d,r9d
  229633:	45 89 ca             	mov    r10d,r9d
  229636:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22963a:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  22963e:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    return formatInt(value, radix, uppercase, width, context, Errors, output);
  229642:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  229646:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
  22964a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22964e:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  229652:	89 c2                	mov    edx,eax
  229654:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  229658:	44 89 c1             	mov    ecx,r8d
  22965b:	4d 89 d0             	mov    r8,r10
  22965e:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
  229662:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  229666:	e8 85 15 00 00       	call   22abf0 <formatInt.119>
  22966b:	66 83 f8 00          	cmp    ax,0x0
  22966f:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  229673:	74 0b                	je     229680 <formatIntValue.116+0x60>
  229675:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  229679:	e8 12 26 fe ff       	call   20bc90 <__zig_return_error>
  22967e:	eb 02                	jmp    229682 <formatIntValue.116+0x62>
  229680:	eb 00                	jmp    229682 <formatIntValue.116+0x62>
  229682:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  229686:	48 83 c4 40          	add    rsp,0x40
  22968a:	5d                   	pop    rbp
  22968b:	c3                   	ret    
  22968c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000229690 <formatIntValue.117>:
pub fn formatIntValue(
  229690:	55                   	push   rbp
  229691:	48 89 e5             	mov    rbp,rsp
  229694:	48 83 ec 40          	sub    rsp,0x40
  229698:	b8 10 00 00 00       	mov    eax,0x10
  22969d:	45 31 c0             	xor    r8d,r8d
  2296a0:	45 31 c9             	xor    r9d,r9d
  2296a3:	45 89 ca             	mov    r10d,r9d
  2296a6:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2296aa:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  2296ae:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    return formatInt(value, radix, uppercase, width, context, Errors, output);
  2296b2:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2296b6:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
  2296ba:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2296be:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2296c2:	89 c2                	mov    edx,eax
  2296c4:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  2296c8:	44 89 c1             	mov    ecx,r8d
  2296cb:	4d 89 d0             	mov    r8,r10
  2296ce:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
  2296d2:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  2296d6:	e8 15 15 00 00       	call   22abf0 <formatInt.119>
  2296db:	66 83 f8 00          	cmp    ax,0x0
  2296df:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  2296e3:	74 0b                	je     2296f0 <formatIntValue.117+0x60>
  2296e5:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2296e9:	e8 a2 25 fe ff       	call   20bc90 <__zig_return_error>
  2296ee:	eb 02                	jmp    2296f2 <formatIntValue.117+0x62>
  2296f0:	eb 00                	jmp    2296f2 <formatIntValue.117+0x62>
  2296f2:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  2296f6:	48 83 c4 40          	add    rsp,0x40
  2296fa:	5d                   	pop    rbp
  2296fb:	c3                   	ret    
  2296fc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000229700 <formatIntValue.118>:
pub fn formatIntValue(
  229700:	55                   	push   rbp
  229701:	48 89 e5             	mov    rbp,rsp
  229704:	48 83 ec 40          	sub    rsp,0x40
  229708:	b8 10 00 00 00       	mov    eax,0x10
  22970d:	45 31 c0             	xor    r8d,r8d
  229710:	45 31 c9             	xor    r9d,r9d
  229713:	45 89 ca             	mov    r10d,r9d
  229716:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22971a:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  22971e:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    return formatInt(value, radix, uppercase, width, context, Errors, output);
  229722:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  229726:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
  22972a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22972e:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  229732:	89 c2                	mov    edx,eax
  229734:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  229738:	44 89 c1             	mov    ecx,r8d
  22973b:	4d 89 d0             	mov    r8,r10
  22973e:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
  229742:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  229746:	e8 a5 14 00 00       	call   22abf0 <formatInt.119>
  22974b:	66 83 f8 00          	cmp    ax,0x0
  22974f:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  229753:	74 0b                	je     229760 <formatIntValue.118+0x60>
  229755:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  229759:	e8 32 25 fe ff       	call   20bc90 <__zig_return_error>
  22975e:	eb 02                	jmp    229762 <formatIntValue.118+0x62>
  229760:	eb 00                	jmp    229762 <formatIntValue.118+0x62>
  229762:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  229766:	48 83 c4 40          	add    rsp,0x40
  22976a:	5d                   	pop    rbp
  22976b:	c3                   	ret    
  22976c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000229770 <len>:
pub fn len(ptr: [*]const u8) usize {
  229770:	55                   	push   rbp
  229771:	48 89 e5             	mov    rbp,rsp
  229774:	48 83 ec 20          	sub    rsp,0x20
  229778:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    var count: usize = 0;
  22977c:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  229783:	00 
    while (ptr[count] != 0) : (count += 1) {}
  229784:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  229788:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  22978c:	80 3c 01 00          	cmp    BYTE PTR [rcx+rax*1],0x0
  229790:	74 16                	je     2297a8 <len+0x38>
  229792:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  229796:	48 83 c0 01          	add    rax,0x1
  22979a:	0f 92 c1             	setb   cl
  22979d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  2297a1:	88 4d e7             	mov    BYTE PTR [rbp-0x19],cl
  2297a4:	72 0c                	jb     2297b2 <len+0x42>
  2297a6:	eb 1a                	jmp    2297c2 <len+0x52>
    return count;
  2297a8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2297ac:	48 83 c4 20          	add    rsp,0x20
  2297b0:	5d                   	pop    rbp
  2297b1:	c3                   	ret    
  2297b2:	48 8d 3d 0f 9a 01 00 	lea    rdi,[rip+0x19a0f]        # 2431c8 <__unnamed_4>
  2297b9:	31 c0                	xor    eax,eax
  2297bb:	89 c6                	mov    esi,eax
    while (ptr[count] != 0) : (count += 1) {}
  2297bd:	e8 3e 1e fe ff       	call   20b600 <panic>
  2297c2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2297c6:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  2297ca:	eb b8                	jmp    229784 <len+0x14>
  2297cc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

00000000002297d0 <formatInt>:
        else => unreachable,
    };
    return output(context, buf);
}

pub fn formatInt(
  2297d0:	55                   	push   rbp
  2297d1:	48 89 e5             	mov    rbp,rsp
  2297d4:	41 56                	push   r14
  2297d6:	53                   	push   rbx
  2297d7:	48 83 ec 40          	sub    rsp,0x40
  2297db:	88 c8                	mov    al,cl
  2297dd:	41 88 d2             	mov    r10b,dl
  2297e0:	4c 8b 5d 10          	mov    r11,QWORD PTR [rbp+0x10]
  2297e4:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
  2297e8:	44 88 55 e7          	mov    BYTE PTR [rbp-0x19],r10b
  2297ec:	24 01                	and    al,0x1
  2297ee:	88 45 e6             	mov    BYTE PTR [rbp-0x1a],al
  2297f1:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
  2297f5:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
    output: fn (@typeOf(context), []const u8) Errors!void,
) Errors!void {
    if (@typeOf(value).is_signed) {
        return formatIntSigned(value, base, uppercase, width, context, Errors, output);
    } else {
        return formatIntUnsigned(value, base, uppercase, width, context, Errors, output);
  2297f9:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  2297fd:	8a 45 e7             	mov    al,BYTE PTR [rbp-0x19]
  229800:	44 8a 55 e6          	mov    r10b,BYTE PTR [rbp-0x1a]
  229804:	4c 8b 45 d8          	mov    r8,QWORD PTR [rbp-0x28]
  229808:	4c 8b 4d d0          	mov    r9,QWORD PTR [rbp-0x30]
  22980c:	48 8b 5d 10          	mov    rbx,QWORD PTR [rbp+0x10]
  229810:	49 89 e6             	mov    r14,rsp
  229813:	49 89 1e             	mov    QWORD PTR [r14],rbx
  229816:	0f b6 d0             	movzx  edx,al
  229819:	41 0f b6 ca          	movzx  ecx,r10b
  22981d:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  229821:	4c 89 5d c0          	mov    QWORD PTR [rbp-0x40],r11
  229825:	e8 46 14 00 00       	call   22ac70 <formatIntUnsigned>
  22982a:	66 83 f8 00          	cmp    ax,0x0
  22982e:	66 89 45 be          	mov    WORD PTR [rbp-0x42],ax
  229832:	74 0b                	je     22983f <formatInt+0x6f>
  229834:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  229838:	e8 53 24 fe ff       	call   20bc90 <__zig_return_error>
  22983d:	eb 02                	jmp    229841 <formatInt+0x71>
  22983f:	eb 00                	jmp    229841 <formatInt+0x71>
  229841:	66 8b 45 be          	mov    ax,WORD PTR [rbp-0x42]
  229845:	48 83 c4 40          	add    rsp,0x40
  229849:	5b                   	pop    rbx
  22984a:	41 5e                	pop    r14
  22984c:	5d                   	pop    rbp
  22984d:	c3                   	ret    
  22984e:	66 90                	xchg   ax,ax

0000000000229850 <formatFloatDecimal>:
pub fn formatFloatDecimal(
  229850:	55                   	push   rbp
  229851:	48 89 e5             	mov    rbp,rsp
  229854:	48 81 ec a0 03 00 00 	sub    rsp,0x3a0
  22985b:	c5 fb 11 85 38 ff ff 	vmovsd QWORD PTR [rbp-0xc8],xmm0
  229862:	ff 
  229863:	48 89 95 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rdx
  22986a:	48 89 8d 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rcx
    var x = f64(value);
  229871:	c5 fb 10 85 38 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xc8]
  229878:	ff 
  229879:	c5 fb 11 85 20 ff ff 	vmovsd QWORD PTR [rbp-0xe0],xmm0
  229880:	ff 
    if (math.signbit(x)) {
  229881:	c5 fb 10 85 20 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xe0]
  229888:	ff 
  229889:	48 89 bd 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rdi
  229890:	48 89 b5 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rsi
  229897:	e8 14 1c 00 00       	call   22b4b0 <signbit>
  22989c:	a8 01                	test   al,0x1
  22989e:	75 02                	jne    2298a2 <formatFloatDecimal+0x52>
  2298a0:	eb 79                	jmp    22991b <formatFloatDecimal+0xcb>
  2298a2:	48 8d 15 77 a0 01 00 	lea    rdx,[rip+0x1a077]        # 243920 <__unnamed_203>
        try output(context, "-");
  2298a9:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  2298b0:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  2298b7:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  2298be:	ff d0                	call   rax
  2298c0:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  2298c4:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  2298c9:	74 27                	je     2298f2 <formatFloatDecimal+0xa2>
  2298cb:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  2298cf:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  2298d6:	66 89 85 5e fe ff ff 	mov    WORD PTR [rbp-0x1a2],ax
  2298dd:	e8 ae 23 fe ff       	call   20bc90 <__zig_return_error>
  2298e2:	66 8b 85 5e fe ff ff 	mov    ax,WORD PTR [rbp-0x1a2]
  2298e9:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  2298f0:	5d                   	pop    rbp
  2298f1:	c3                   	ret    
  2298f2:	48 b8 00 00 00 00 00 	movabs rax,0x8000000000000000
  2298f9:	00 00 80 
        x = -x;
  2298fc:	c5 fb 10 85 20 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xe0]
  229903:	ff 
  229904:	c4 e1 f9 7e c1       	vmovq  rcx,xmm0
  229909:	48 31 c1             	xor    rcx,rax
  22990c:	c4 e1 f9 6e c1       	vmovq  xmm0,rcx
  229911:	c5 fb 11 85 20 ff ff 	vmovsd QWORD PTR [rbp-0xe0],xmm0
  229918:	ff 
    if (math.signbit(x)) {
  229919:	eb 02                	jmp    22991d <formatFloatDecimal+0xcd>
  22991b:	eb 00                	jmp    22991d <formatFloatDecimal+0xcd>
    if (math.isNan(x)) {
  22991d:	c5 fb 10 85 20 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xe0]
  229924:	ff 
  229925:	e8 b6 1b 00 00       	call   22b4e0 <isNan>
  22992a:	a8 01                	test   al,0x1
  22992c:	75 02                	jne    229930 <formatFloatDecimal+0xe0>
  22992e:	eb 4b                	jmp    22997b <formatFloatDecimal+0x12b>
  229930:	48 8d 15 01 a0 01 00 	lea    rdx,[rip+0x1a001]        # 243938 <__unnamed_204>
        return output(context, "nan");
  229937:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  22993e:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  229945:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22994c:	ff d0                	call   rax
  22994e:	66 83 f8 00          	cmp    ax,0x0
  229952:	66 89 85 5c fe ff ff 	mov    WORD PTR [rbp-0x1a4],ax
  229959:	74 0e                	je     229969 <formatFloatDecimal+0x119>
  22995b:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229962:	e8 29 23 fe ff       	call   20bc90 <__zig_return_error>
  229967:	eb 02                	jmp    22996b <formatFloatDecimal+0x11b>
  229969:	eb 00                	jmp    22996b <formatFloatDecimal+0x11b>
  22996b:	66 8b 85 5c fe ff ff 	mov    ax,WORD PTR [rbp-0x1a4]
  229972:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  229979:	5d                   	pop    rbp
  22997a:	c3                   	ret    
    if (math.isNan(x)) {
  22997b:	eb 00                	jmp    22997d <formatFloatDecimal+0x12d>
    if (math.isPositiveInf(x)) {
  22997d:	c5 fb 10 85 20 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xe0]
  229984:	ff 
  229985:	e8 96 1b 00 00       	call   22b520 <isPositiveInf>
  22998a:	a8 01                	test   al,0x1
  22998c:	75 02                	jne    229990 <formatFloatDecimal+0x140>
  22998e:	eb 4b                	jmp    2299db <formatFloatDecimal+0x18b>
  229990:	48 8d 15 b9 9f 01 00 	lea    rdx,[rip+0x19fb9]        # 243950 <__unnamed_205>
        return output(context, "inf");
  229997:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  22999e:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  2299a5:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  2299ac:	ff d0                	call   rax
  2299ae:	66 83 f8 00          	cmp    ax,0x0
  2299b2:	66 89 85 5a fe ff ff 	mov    WORD PTR [rbp-0x1a6],ax
  2299b9:	74 0e                	je     2299c9 <formatFloatDecimal+0x179>
  2299bb:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  2299c2:	e8 c9 22 fe ff       	call   20bc90 <__zig_return_error>
  2299c7:	eb 02                	jmp    2299cb <formatFloatDecimal+0x17b>
  2299c9:	eb 00                	jmp    2299cb <formatFloatDecimal+0x17b>
  2299cb:	66 8b 85 5a fe ff ff 	mov    ax,WORD PTR [rbp-0x1a6]
  2299d2:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  2299d9:	5d                   	pop    rbp
  2299da:	c3                   	ret    
    if (math.isPositiveInf(x)) {
  2299db:	eb 00                	jmp    2299dd <formatFloatDecimal+0x18d>
  2299dd:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
    if (x == 0.0) {
  2299e1:	c5 fb 10 8d 20 ff ff 	vmovsd xmm1,QWORD PTR [rbp-0xe0]
  2299e8:	ff 
  2299e9:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  2299ed:	0f 85 1d 02 00 00    	jne    229c10 <formatFloatDecimal+0x3c0>
  2299f3:	0f 8a 17 02 00 00    	jp     229c10 <formatFloatDecimal+0x3c0>
  2299f9:	48 8d 15 68 9f 01 00 	lea    rdx,[rip+0x19f68]        # 243968 <__unnamed_206>
        try output(context, "0");
  229a00:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  229a07:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  229a0e:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229a15:	ff d0                	call   rax
  229a17:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  229a1b:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  229a20:	74 27                	je     229a49 <formatFloatDecimal+0x1f9>
  229a22:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  229a26:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229a2d:	66 89 85 58 fe ff ff 	mov    WORD PTR [rbp-0x1a8],ax
  229a34:	e8 57 22 fe ff       	call   20bc90 <__zig_return_error>
  229a39:	66 8b 85 58 fe ff ff 	mov    ax,WORD PTR [rbp-0x1a8]
  229a40:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  229a47:	5d                   	pop    rbp
  229a48:	c3                   	ret    
        if (maybe_precision) |precision| {
  229a49:	48 8b 85 60 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a0]
  229a50:	f6 40 08 01          	test   BYTE PTR [rax+0x8],0x1
  229a54:	75 05                	jne    229a5b <formatFloatDecimal+0x20b>
  229a56:	e9 54 01 00 00       	jmp    229baf <formatFloatDecimal+0x35f>
  229a5b:	48 8b 85 60 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a0]
  229a62:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  229a65:	48 89 8d 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rcx
            if (precision != 0) {
  229a6c:	48 83 bd 18 ff ff ff 	cmp    QWORD PTR [rbp-0xe8],0x0
  229a73:	00 
  229a74:	0f 84 e3 00 00 00    	je     229b5d <formatFloatDecimal+0x30d>
  229a7a:	48 8d 15 ff 9e 01 00 	lea    rdx,[rip+0x19eff]        # 243980 <__unnamed_207>
                try output(context, ".");
  229a81:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  229a88:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  229a8f:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229a96:	ff d0                	call   rax
  229a98:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  229a9c:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  229aa1:	74 27                	je     229aca <formatFloatDecimal+0x27a>
  229aa3:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  229aa7:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229aae:	66 89 85 56 fe ff ff 	mov    WORD PTR [rbp-0x1aa],ax
  229ab5:	e8 d6 21 fe ff       	call   20bc90 <__zig_return_error>
  229aba:	66 8b 85 56 fe ff ff 	mov    ax,WORD PTR [rbp-0x1aa]
  229ac1:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  229ac8:	5d                   	pop    rbp
  229ac9:	c3                   	ret    
                var i: usize = 0;
  229aca:	48 c7 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],0x0
  229ad1:	00 00 00 00 
                while (i < precision) : (i += 1) {
  229ad5:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  229adc:	48 3b 85 18 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xe8]
  229ae3:	73 76                	jae    229b5b <formatFloatDecimal+0x30b>
  229ae5:	48 8d 15 ac 9e 01 00 	lea    rdx,[rip+0x19eac]        # 243998 <__unnamed_208>
                    try output(context, "0");
  229aec:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  229af3:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  229afa:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229b01:	ff d0                	call   rax
  229b03:	66 89 45 f8          	mov    WORD PTR [rbp-0x8],ax
  229b07:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  229b0c:	74 27                	je     229b35 <formatFloatDecimal+0x2e5>
  229b0e:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  229b12:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229b19:	66 89 85 54 fe ff ff 	mov    WORD PTR [rbp-0x1ac],ax
  229b20:	e8 6b 21 fe ff       	call   20bc90 <__zig_return_error>
  229b25:	66 8b 85 54 fe ff ff 	mov    ax,WORD PTR [rbp-0x1ac]
  229b2c:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  229b33:	5d                   	pop    rbp
  229b34:	c3                   	ret    
                while (i < precision) : (i += 1) {
  229b35:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  229b3c:	48 83 c0 01          	add    rax,0x1
  229b40:	0f 92 c1             	setb   cl
  229b43:	48 89 85 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rax
  229b4a:	88 8d 47 fe ff ff    	mov    BYTE PTR [rbp-0x1b9],cl
  229b50:	0f 82 42 0a 00 00    	jb     22a598 <formatFloatDecimal+0xd48>
  229b56:	e9 4d 0a 00 00       	jmp    22a5a8 <formatFloatDecimal+0xd58>
            if (precision != 0) {
  229b5b:	eb 50                	jmp    229bad <formatFloatDecimal+0x35d>
  229b5d:	48 8d 15 4c 9e 01 00 	lea    rdx,[rip+0x19e4c]        # 2439b0 <__unnamed_209>
                try output(context, ".0");
  229b64:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  229b6b:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  229b72:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229b79:	ff d0                	call   rax
  229b7b:	66 89 45 f6          	mov    WORD PTR [rbp-0xa],ax
  229b7f:	66 83 7d f6 00       	cmp    WORD PTR [rbp-0xa],0x0
  229b84:	74 27                	je     229bad <formatFloatDecimal+0x35d>
  229b86:	66 8b 45 f6          	mov    ax,WORD PTR [rbp-0xa]
  229b8a:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229b91:	66 89 85 44 fe ff ff 	mov    WORD PTR [rbp-0x1bc],ax
  229b98:	e8 f3 20 fe ff       	call   20bc90 <__zig_return_error>
  229b9d:	66 8b 85 44 fe ff ff 	mov    ax,WORD PTR [rbp-0x1bc]
  229ba4:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  229bab:	5d                   	pop    rbp
  229bac:	c3                   	ret    
        if (maybe_precision) |precision| {
  229bad:	eb 50                	jmp    229bff <formatFloatDecimal+0x3af>
  229baf:	48 8d 15 12 9e 01 00 	lea    rdx,[rip+0x19e12]        # 2439c8 <__unnamed_210>
            try output(context, "0");
  229bb6:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  229bbd:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  229bc4:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229bcb:	ff d0                	call   rax
  229bcd:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
  229bd1:	66 83 7d f4 00       	cmp    WORD PTR [rbp-0xc],0x0
  229bd6:	74 27                	je     229bff <formatFloatDecimal+0x3af>
  229bd8:	66 8b 45 f4          	mov    ax,WORD PTR [rbp-0xc]
  229bdc:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229be3:	66 89 85 42 fe ff ff 	mov    WORD PTR [rbp-0x1be],ax
  229bea:	e8 a1 20 fe ff       	call   20bc90 <__zig_return_error>
  229bef:	66 8b 85 42 fe ff ff 	mov    ax,WORD PTR [rbp-0x1be]
  229bf6:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  229bfd:	5d                   	pop    rbp
  229bfe:	c3                   	ret    
  229bff:	31 c0                	xor    eax,eax
  229c01:	66 89 c1             	mov    cx,ax
        return;
  229c04:	66 89 c8             	mov    ax,cx
  229c07:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  229c0e:	5d                   	pop    rbp
  229c0f:	c3                   	ret    
    if (x == 0.0) {
  229c10:	eb 00                	jmp    229c12 <formatFloatDecimal+0x3c2>
  229c12:	b0 01                	mov    al,0x1
    var buffer: [32]u8 = undefined;
  229c14:	48 8b 0d 25 0d fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe0d25]        # 20a940 <__unnamed_211>
  229c1b:	48 89 8d f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rcx
  229c22:	48 8b 0d 1f 0d fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe0d1f]        # 20a948 <__unnamed_211+0x8>
  229c29:	48 89 8d f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rcx
  229c30:	48 8b 0d 19 0d fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe0d19]        # 20a950 <__unnamed_211+0x10>
  229c37:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  229c3e:	48 8b 0d 13 0d fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe0d13]        # 20a958 <__unnamed_211+0x18>
  229c45:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
    var float_decimal = errol.errol3(x, buffer[0..]);
  229c4c:	c5 fb 10 85 20 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xe0]
  229c53:	ff 
  229c54:	a8 01                	test   al,0x1
  229c56:	c5 fb 11 85 38 fe ff 	vmovsd QWORD PTR [rbp-0x1c8],xmm0
  229c5d:	ff 
  229c5e:	0f 85 67 09 00 00    	jne    22a5cb <formatFloatDecimal+0xd7b>
  229c64:	e9 52 09 00 00       	jmp    22a5bb <formatFloatDecimal+0xd6b>
  229c69:	48 8d bd d8 fe ff ff 	lea    rdi,[rbp-0x128]
  229c70:	31 d2                	xor    edx,edx
    if (maybe_precision) |precision| {
  229c72:	48 8b 85 60 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a0]
  229c79:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  229c7c:	48 89 8d d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rcx
        errol.roundToPrecision(&float_decimal, precision, errol.RoundMode.Decimal);
  229c83:	48 8b b5 d0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x130]
  229c8a:	e8 21 1b 00 00       	call   22b7b0 <roundToPrecision>
        var num_digits_whole = if (float_decimal.exp > 0) @intCast(usize, float_decimal.exp) else 0;
  229c8f:	83 bd e8 fe ff ff 00 	cmp    DWORD PTR [rbp-0x118],0x0
  229c96:	7e 10                	jle    229ca8 <formatFloatDecimal+0x458>
  229c98:	48 63 85 e8 fe ff ff 	movsxd rax,DWORD PTR [rbp-0x118]
  229c9f:	48 89 85 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rax
  229ca6:	eb 0d                	jmp    229cb5 <formatFloatDecimal+0x465>
  229ca8:	31 c0                	xor    eax,eax
  229caa:	89 c1                	mov    ecx,eax
  229cac:	48 89 8d 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rcx
  229cb3:	eb 00                	jmp    229cb5 <formatFloatDecimal+0x465>
  229cb5:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  229cbc:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
        var num_digits_whole_no_pad = math.min(num_digits_whole, float_decimal.digits.len);
  229cc3:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  229cca:	48 8b b5 e0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x120]
  229cd1:	e8 3a c4 ff ff       	call   226110 <min>
  229cd6:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
        if (num_digits_whole > 0) {
  229cdd:	48 83 bd c8 fe ff ff 	cmp    QWORD PTR [rbp-0x138],0x0
  229ce4:	00 
  229ce5:	0f 86 15 01 00 00    	jbe    229e00 <formatFloatDecimal+0x5b0>
  229ceb:	31 c0                	xor    eax,eax
  229ced:	89 c1                	mov    ecx,eax
  229cef:	48 8d 95 d8 fe ff ff 	lea    rdx,[rbp-0x128]
            try output(context, float_decimal.digits[0..num_digits_whole_no_pad]);
  229cf6:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  229cfd:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
  229d04:	4c 8b 85 c0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x140]
  229d0b:	4c 8b 8d e0 fe ff ff 	mov    r9,QWORD PTR [rbp-0x120]
  229d12:	4c 39 c1             	cmp    rcx,r8
  229d15:	4c 89 8d 28 fe ff ff 	mov    QWORD PTR [rbp-0x1d8],r9
  229d1c:	48 89 95 20 fe ff ff 	mov    QWORD PTR [rbp-0x1e0],rdx
  229d23:	48 89 b5 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],rsi
  229d2a:	48 89 bd 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rdi
  229d31:	4c 89 85 08 fe ff ff 	mov    QWORD PTR [rbp-0x1f8],r8
  229d38:	0f 86 fc 08 00 00    	jbe    22a63a <formatFloatDecimal+0xdea>
  229d3e:	e9 e7 08 00 00       	jmp    22a62a <formatFloatDecimal+0xdda>
  229d43:	66 8b 45 b6          	mov    ax,WORD PTR [rbp-0x4a]
  229d47:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229d4e:	66 89 85 06 fe ff ff 	mov    WORD PTR [rbp-0x1fa],ax
  229d55:	e8 36 1f fe ff       	call   20bc90 <__zig_return_error>
  229d5a:	66 8b 85 06 fe ff ff 	mov    ax,WORD PTR [rbp-0x1fa]
  229d61:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  229d68:	5d                   	pop    rbp
  229d69:	c3                   	ret    
            var i = num_digits_whole_no_pad;
  229d6a:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  229d71:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
            while (i < num_digits_whole) : (i += 1) {
  229d78:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  229d7f:	48 3b 85 c8 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x138]
  229d86:	73 76                	jae    229dfe <formatFloatDecimal+0x5ae>
  229d88:	48 8d 15 51 9c 01 00 	lea    rdx,[rip+0x19c51]        # 2439e0 <__unnamed_212>
                try output(context, "0");
  229d8f:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  229d96:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  229d9d:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229da4:	ff d0                	call   rax
  229da6:	66 89 45 b4          	mov    WORD PTR [rbp-0x4c],ax
  229daa:	66 83 7d b4 00       	cmp    WORD PTR [rbp-0x4c],0x0
  229daf:	74 27                	je     229dd8 <formatFloatDecimal+0x588>
  229db1:	66 8b 45 b4          	mov    ax,WORD PTR [rbp-0x4c]
  229db5:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229dbc:	66 89 85 04 fe ff ff 	mov    WORD PTR [rbp-0x1fc],ax
  229dc3:	e8 c8 1e fe ff       	call   20bc90 <__zig_return_error>
  229dc8:	66 8b 85 04 fe ff ff 	mov    ax,WORD PTR [rbp-0x1fc]
  229dcf:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  229dd6:	5d                   	pop    rbp
  229dd7:	c3                   	ret    
            while (i < num_digits_whole) : (i += 1) {
  229dd8:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  229ddf:	48 83 c0 01          	add    rax,0x1
  229de3:	0f 92 c1             	setb   cl
  229de6:	48 89 85 f8 fd ff ff 	mov    QWORD PTR [rbp-0x208],rax
  229ded:	88 8d f7 fd ff ff    	mov    BYTE PTR [rbp-0x209],cl
  229df3:	0f 82 b0 08 00 00    	jb     22a6a9 <formatFloatDecimal+0xe59>
  229df9:	e9 bb 08 00 00       	jmp    22a6b9 <formatFloatDecimal+0xe69>
        if (num_digits_whole > 0) {
  229dfe:	eb 50                	jmp    229e50 <formatFloatDecimal+0x600>
  229e00:	48 8d 15 f1 9b 01 00 	lea    rdx,[rip+0x19bf1]        # 2439f8 <__unnamed_213>
            try output(context, "0");
  229e07:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  229e0e:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  229e15:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229e1c:	ff d0                	call   rax
  229e1e:	66 89 45 b2          	mov    WORD PTR [rbp-0x4e],ax
  229e22:	66 83 7d b2 00       	cmp    WORD PTR [rbp-0x4e],0x0
  229e27:	74 27                	je     229e50 <formatFloatDecimal+0x600>
  229e29:	66 8b 45 b2          	mov    ax,WORD PTR [rbp-0x4e]
  229e2d:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229e34:	66 89 85 f4 fd ff ff 	mov    WORD PTR [rbp-0x20c],ax
  229e3b:	e8 50 1e fe ff       	call   20bc90 <__zig_return_error>
  229e40:	66 8b 85 f4 fd ff ff 	mov    ax,WORD PTR [rbp-0x20c]
  229e47:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  229e4e:	5d                   	pop    rbp
  229e4f:	c3                   	ret    
        if (precision == 0) {
  229e50:	48 83 bd d0 fe ff ff 	cmp    QWORD PTR [rbp-0x130],0x0
  229e57:	00 
  229e58:	75 11                	jne    229e6b <formatFloatDecimal+0x61b>
  229e5a:	31 c0                	xor    eax,eax
  229e5c:	66 89 c1             	mov    cx,ax
            return;
  229e5f:	66 89 c8             	mov    ax,cx
  229e62:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  229e69:	5d                   	pop    rbp
  229e6a:	c3                   	ret    
        if (precision == 0) {
  229e6b:	eb 00                	jmp    229e6d <formatFloatDecimal+0x61d>
  229e6d:	48 8d 15 9c 9b 01 00 	lea    rdx,[rip+0x19b9c]        # 243a10 <__unnamed_214>
        try output(context, ".");
  229e74:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  229e7b:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  229e82:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229e89:	ff d0                	call   rax
  229e8b:	66 89 45 b0          	mov    WORD PTR [rbp-0x50],ax
  229e8f:	66 83 7d b0 00       	cmp    WORD PTR [rbp-0x50],0x0
  229e94:	74 27                	je     229ebd <formatFloatDecimal+0x66d>
  229e96:	66 8b 45 b0          	mov    ax,WORD PTR [rbp-0x50]
  229e9a:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229ea1:	66 89 85 f2 fd ff ff 	mov    WORD PTR [rbp-0x20e],ax
  229ea8:	e8 e3 1d fe ff       	call   20bc90 <__zig_return_error>
  229ead:	66 8b 85 f2 fd ff ff 	mov    ax,WORD PTR [rbp-0x20e]
  229eb4:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  229ebb:	5d                   	pop    rbp
  229ebc:	c3                   	ret    
        var printed: usize = 0;
  229ebd:	48 c7 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],0x0
  229ec4:	00 00 00 00 
        if (float_decimal.exp <= 0) {
  229ec8:	83 bd e8 fe ff ff 00 	cmp    DWORD PTR [rbp-0x118],0x0
  229ecf:	0f 8f cd 00 00 00    	jg     229fa2 <formatFloatDecimal+0x752>
  229ed5:	31 c0                	xor    eax,eax
            const zero_digit_count = @intCast(usize, -float_decimal.exp);
  229ed7:	2b 85 e8 fe ff ff    	sub    eax,DWORD PTR [rbp-0x118]
  229edd:	0f 90 c1             	seto   cl
  229ee0:	89 85 ec fd ff ff    	mov    DWORD PTR [rbp-0x214],eax
  229ee6:	88 8d eb fd ff ff    	mov    BYTE PTR [rbp-0x215],cl
  229eec:	0f 80 da 07 00 00    	jo     22a6cc <formatFloatDecimal+0xe7c>
  229ef2:	e9 e5 07 00 00       	jmp    22a6dc <formatFloatDecimal+0xe8c>
            while (i < zeros_to_print) : (i += 1) {
  229ef7:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
  229efe:	48 3b 85 a0 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x160]
  229f05:	73 76                	jae    229f7d <formatFloatDecimal+0x72d>
  229f07:	48 8d 15 1a 9b 01 00 	lea    rdx,[rip+0x19b1a]        # 243a28 <__unnamed_215>
                try output(context, "0");
  229f0e:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  229f15:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  229f1c:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229f23:	ff d0                	call   rax
  229f25:	66 89 45 ae          	mov    WORD PTR [rbp-0x52],ax
  229f29:	66 83 7d ae 00       	cmp    WORD PTR [rbp-0x52],0x0
  229f2e:	74 27                	je     229f57 <formatFloatDecimal+0x707>
  229f30:	66 8b 45 ae          	mov    ax,WORD PTR [rbp-0x52]
  229f34:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229f3b:	66 89 85 e8 fd ff ff 	mov    WORD PTR [rbp-0x218],ax
  229f42:	e8 49 1d fe ff       	call   20bc90 <__zig_return_error>
  229f47:	66 8b 85 e8 fd ff ff 	mov    ax,WORD PTR [rbp-0x218]
  229f4e:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  229f55:	5d                   	pop    rbp
  229f56:	c3                   	ret    
                printed += 1;
  229f57:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  229f5e:	48 83 c0 01          	add    rax,0x1
  229f62:	0f 92 c1             	setb   cl
  229f65:	48 89 85 e0 fd ff ff 	mov    QWORD PTR [rbp-0x220],rax
  229f6c:	88 8d df fd ff ff    	mov    BYTE PTR [rbp-0x221],cl
  229f72:	0f 82 9e 07 00 00    	jb     22a716 <formatFloatDecimal+0xec6>
  229f78:	e9 a9 07 00 00       	jmp    22a726 <formatFloatDecimal+0xed6>
            if (printed >= precision) {
  229f7d:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  229f84:	48 3b 85 d0 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x130]
  229f8b:	72 11                	jb     229f9e <formatFloatDecimal+0x74e>
  229f8d:	31 c0                	xor    eax,eax
  229f8f:	66 89 c1             	mov    cx,ax
                return;
  229f92:	66 89 c8             	mov    ax,cx
  229f95:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  229f9c:	5d                   	pop    rbp
  229f9d:	c3                   	ret    
            if (printed >= precision) {
  229f9e:	eb 00                	jmp    229fa0 <formatFloatDecimal+0x750>
        if (float_decimal.exp <= 0) {
  229fa0:	eb 02                	jmp    229fa4 <formatFloatDecimal+0x754>
  229fa2:	eb 00                	jmp    229fa4 <formatFloatDecimal+0x754>
        debug.assert(precision >= printed);
  229fa4:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  229fab:	48 3b 85 b0 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x150]
  229fb2:	0f 93 c1             	setae  cl
  229fb5:	0f b6 f9             	movzx  edi,cl
  229fb8:	e8 43 10 fe ff       	call   20b000 <assert>
        if (num_digits_whole_no_pad + precision - printed < float_decimal.digits.len) {
  229fbd:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  229fc4:	48 03 85 d0 fe ff ff 	add    rax,QWORD PTR [rbp-0x130]
  229fcb:	0f 92 c1             	setb   cl
  229fce:	48 89 85 d0 fd ff ff 	mov    QWORD PTR [rbp-0x230],rax
  229fd5:	88 8d cf fd ff ff    	mov    BYTE PTR [rbp-0x231],cl
  229fdb:	0f 82 95 07 00 00    	jb     22a776 <formatFloatDecimal+0xf26>
  229fe1:	e9 a0 07 00 00       	jmp    22a786 <formatFloatDecimal+0xf36>
  229fe6:	48 8d 85 d8 fe ff ff 	lea    rax,[rbp-0x128]
            try output(context, float_decimal.digits[num_digits_whole_no_pad .. num_digits_whole_no_pad + precision - printed]);
  229fed:	48 8b 8d 28 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd8]
  229ff4:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  229ffb:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  22a002:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  22a009:	48 03 bd d0 fe ff ff 	add    rdi,QWORD PTR [rbp-0x130]
  22a010:	41 0f 92 c0          	setb   r8b
  22a014:	48 89 85 c0 fd ff ff 	mov    QWORD PTR [rbp-0x240],rax
  22a01b:	48 89 8d b8 fd ff ff 	mov    QWORD PTR [rbp-0x248],rcx
  22a022:	48 89 b5 b0 fd ff ff 	mov    QWORD PTR [rbp-0x250],rsi
  22a029:	48 89 95 a8 fd ff ff 	mov    QWORD PTR [rbp-0x258],rdx
  22a030:	48 89 bd a0 fd ff ff 	mov    QWORD PTR [rbp-0x260],rdi
  22a037:	44 88 85 9f fd ff ff 	mov    BYTE PTR [rbp-0x261],r8b
  22a03e:	0f 82 8d 07 00 00    	jb     22a7d1 <formatFloatDecimal+0xf81>
  22a044:	e9 98 07 00 00       	jmp    22a7e1 <formatFloatDecimal+0xf91>
  22a049:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  22a04d:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22a054:	66 89 85 9c fd ff ff 	mov    WORD PTR [rbp-0x264],ax
  22a05b:	e8 30 1c fe ff       	call   20bc90 <__zig_return_error>
  22a060:	66 8b 85 9c fd ff ff 	mov    ax,WORD PTR [rbp-0x264]
  22a067:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  22a06e:	5d                   	pop    rbp
  22a06f:	c3                   	ret    
  22a070:	31 c0                	xor    eax,eax
  22a072:	66 89 c1             	mov    cx,ax
            return;
  22a075:	66 89 c8             	mov    ax,cx
  22a078:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  22a07f:	5d                   	pop    rbp
  22a080:	c3                   	ret    
  22a081:	48 8d 85 d8 fe ff ff 	lea    rax,[rbp-0x128]
            try output(context, float_decimal.digits[num_digits_whole_no_pad..]);
  22a088:	48 8b 8d 28 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd8]
  22a08f:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  22a096:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  22a09d:	48 8b bd e0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x120]
  22a0a4:	48 39 fa             	cmp    rdx,rdi
  22a0a7:	48 89 85 90 fd ff ff 	mov    QWORD PTR [rbp-0x270],rax
  22a0ae:	48 89 8d 88 fd ff ff 	mov    QWORD PTR [rbp-0x278],rcx
  22a0b5:	48 89 b5 80 fd ff ff 	mov    QWORD PTR [rbp-0x280],rsi
  22a0bc:	48 89 95 78 fd ff ff 	mov    QWORD PTR [rbp-0x288],rdx
  22a0c3:	48 89 bd 70 fd ff ff 	mov    QWORD PTR [rbp-0x290],rdi
  22a0ca:	0f 86 04 08 00 00    	jbe    22a8d4 <formatFloatDecimal+0x1084>
  22a0d0:	e9 ef 07 00 00       	jmp    22a8c4 <formatFloatDecimal+0x1074>
  22a0d5:	66 8b 85 7e ff ff ff 	mov    ax,WORD PTR [rbp-0x82]
  22a0dc:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22a0e3:	66 89 85 6e fd ff ff 	mov    WORD PTR [rbp-0x292],ax
  22a0ea:	e8 a1 1b fe ff       	call   20bc90 <__zig_return_error>
  22a0ef:	66 8b 85 6e fd ff ff 	mov    ax,WORD PTR [rbp-0x292]
  22a0f6:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  22a0fd:	5d                   	pop    rbp
  22a0fe:	c3                   	ret    
            printed += float_decimal.digits.len - num_digits_whole_no_pad;
  22a0ff:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  22a106:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  22a10d:	48 2b 8d c0 fe ff ff 	sub    rcx,QWORD PTR [rbp-0x140]
  22a114:	0f 92 c2             	setb   dl
  22a117:	48 89 85 60 fd ff ff 	mov    QWORD PTR [rbp-0x2a0],rax
  22a11e:	48 89 8d 58 fd ff ff 	mov    QWORD PTR [rbp-0x2a8],rcx
  22a125:	88 95 57 fd ff ff    	mov    BYTE PTR [rbp-0x2a9],dl
  22a12b:	0f 82 02 08 00 00    	jb     22a933 <formatFloatDecimal+0x10e3>
  22a131:	e9 0d 08 00 00       	jmp    22a943 <formatFloatDecimal+0x10f3>
            while (printed < precision) : (printed += 1) {
  22a136:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  22a13d:	48 3b 85 d0 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x130]
  22a144:	73 7f                	jae    22a1c5 <formatFloatDecimal+0x975>
  22a146:	48 8d 15 f3 98 01 00 	lea    rdx,[rip+0x198f3]        # 243a40 <__unnamed_216>
                try output(context, "0");
  22a14d:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  22a154:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  22a15b:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22a162:	ff d0                	call   rax
  22a164:	66 89 85 7c ff ff ff 	mov    WORD PTR [rbp-0x84],ax
  22a16b:	66 83 bd 7c ff ff ff 	cmp    WORD PTR [rbp-0x84],0x0
  22a172:	00 
  22a173:	74 2a                	je     22a19f <formatFloatDecimal+0x94f>
  22a175:	66 8b 85 7c ff ff ff 	mov    ax,WORD PTR [rbp-0x84]
  22a17c:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22a183:	66 89 85 54 fd ff ff 	mov    WORD PTR [rbp-0x2ac],ax
  22a18a:	e8 01 1b fe ff       	call   20bc90 <__zig_return_error>
  22a18f:	66 8b 85 54 fd ff ff 	mov    ax,WORD PTR [rbp-0x2ac]
  22a196:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  22a19d:	5d                   	pop    rbp
  22a19e:	c3                   	ret    
            while (printed < precision) : (printed += 1) {
  22a19f:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  22a1a6:	48 83 c0 01          	add    rax,0x1
  22a1aa:	0f 92 c1             	setb   cl
  22a1ad:	48 89 85 48 fd ff ff 	mov    QWORD PTR [rbp-0x2b8],rax
  22a1b4:	88 8d 47 fd ff ff    	mov    BYTE PTR [rbp-0x2b9],cl
  22a1ba:	0f 82 cb 07 00 00    	jb     22a98b <formatFloatDecimal+0x113b>
  22a1c0:	e9 d6 07 00 00       	jmp    22a99b <formatFloatDecimal+0x114b>
        if (num_digits_whole_no_pad + precision - printed < float_decimal.digits.len) {
  22a1c5:	eb 00                	jmp    22a1c7 <formatFloatDecimal+0x977>
    if (maybe_precision) |precision| {
  22a1c7:	e9 bb 03 00 00       	jmp    22a587 <formatFloatDecimal+0xd37>
        var num_digits_whole = if (float_decimal.exp > 0) @intCast(usize, float_decimal.exp) else 0;
  22a1cc:	83 bd e8 fe ff ff 00 	cmp    DWORD PTR [rbp-0x118],0x0
  22a1d3:	7e 10                	jle    22a1e5 <formatFloatDecimal+0x995>
  22a1d5:	48 63 85 e8 fe ff ff 	movsxd rax,DWORD PTR [rbp-0x118]
  22a1dc:	48 89 85 38 fd ff ff 	mov    QWORD PTR [rbp-0x2c8],rax
  22a1e3:	eb 0d                	jmp    22a1f2 <formatFloatDecimal+0x9a2>
  22a1e5:	31 c0                	xor    eax,eax
  22a1e7:	89 c1                	mov    ecx,eax
  22a1e9:	48 89 8d 38 fd ff ff 	mov    QWORD PTR [rbp-0x2c8],rcx
  22a1f0:	eb 00                	jmp    22a1f2 <formatFloatDecimal+0x9a2>
  22a1f2:	48 8b 85 38 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2c8]
  22a1f9:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
        var num_digits_whole_no_pad = math.min(num_digits_whole, float_decimal.digits.len);
  22a200:	48 8b bd 90 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x170]
  22a207:	48 8b b5 e0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x120]
  22a20e:	e8 fd be ff ff       	call   226110 <min>
  22a213:	48 89 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rax
        if (num_digits_whole > 0) {
  22a21a:	48 83 bd 90 fe ff ff 	cmp    QWORD PTR [rbp-0x170],0x0
  22a221:	00 
  22a222:	0f 86 21 01 00 00    	jbe    22a349 <formatFloatDecimal+0xaf9>
  22a228:	31 c0                	xor    eax,eax
  22a22a:	89 c1                	mov    ecx,eax
  22a22c:	48 8d 95 d8 fe ff ff 	lea    rdx,[rbp-0x128]
            try output(context, float_decimal.digits[0..num_digits_whole_no_pad]);
  22a233:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  22a23a:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
  22a241:	4c 8b 85 88 fe ff ff 	mov    r8,QWORD PTR [rbp-0x178]
  22a248:	4c 8b 8d e0 fe ff ff 	mov    r9,QWORD PTR [rbp-0x120]
  22a24f:	4c 39 c1             	cmp    rcx,r8
  22a252:	4c 89 8d 30 fd ff ff 	mov    QWORD PTR [rbp-0x2d0],r9
  22a259:	48 89 95 28 fd ff ff 	mov    QWORD PTR [rbp-0x2d8],rdx
  22a260:	48 89 b5 20 fd ff ff 	mov    QWORD PTR [rbp-0x2e0],rsi
  22a267:	48 89 bd 18 fd ff ff 	mov    QWORD PTR [rbp-0x2e8],rdi
  22a26e:	4c 89 85 10 fd ff ff 	mov    QWORD PTR [rbp-0x2f0],r8
  22a275:	0f 86 43 07 00 00    	jbe    22a9be <formatFloatDecimal+0x116e>
  22a27b:	e9 2e 07 00 00       	jmp    22a9ae <formatFloatDecimal+0x115e>
  22a280:	66 8b 85 66 ff ff ff 	mov    ax,WORD PTR [rbp-0x9a]
  22a287:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22a28e:	66 89 85 0e fd ff ff 	mov    WORD PTR [rbp-0x2f2],ax
  22a295:	e8 f6 19 fe ff       	call   20bc90 <__zig_return_error>
  22a29a:	66 8b 85 0e fd ff ff 	mov    ax,WORD PTR [rbp-0x2f2]
  22a2a1:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  22a2a8:	5d                   	pop    rbp
  22a2a9:	c3                   	ret    
            var i = num_digits_whole_no_pad;
  22a2aa:	48 8b 85 88 fe ff ff 	mov    rax,QWORD PTR [rbp-0x178]
  22a2b1:	48 89 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rax
            while (i < num_digits_whole) : (i += 1) {
  22a2b8:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
  22a2bf:	48 3b 85 90 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x170]
  22a2c6:	73 7f                	jae    22a347 <formatFloatDecimal+0xaf7>
  22a2c8:	48 8d 15 89 97 01 00 	lea    rdx,[rip+0x19789]        # 243a58 <__unnamed_217>
                try output(context, "0");
  22a2cf:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  22a2d6:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  22a2dd:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22a2e4:	ff d0                	call   rax
  22a2e6:	66 89 85 64 ff ff ff 	mov    WORD PTR [rbp-0x9c],ax
  22a2ed:	66 83 bd 64 ff ff ff 	cmp    WORD PTR [rbp-0x9c],0x0
  22a2f4:	00 
  22a2f5:	74 2a                	je     22a321 <formatFloatDecimal+0xad1>
  22a2f7:	66 8b 85 64 ff ff ff 	mov    ax,WORD PTR [rbp-0x9c]
  22a2fe:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22a305:	66 89 85 0c fd ff ff 	mov    WORD PTR [rbp-0x2f4],ax
  22a30c:	e8 7f 19 fe ff       	call   20bc90 <__zig_return_error>
  22a311:	66 8b 85 0c fd ff ff 	mov    ax,WORD PTR [rbp-0x2f4]
  22a318:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  22a31f:	5d                   	pop    rbp
  22a320:	c3                   	ret    
            while (i < num_digits_whole) : (i += 1) {
  22a321:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
  22a328:	48 83 c0 01          	add    rax,0x1
  22a32c:	0f 92 c1             	setb   cl
  22a32f:	48 89 85 00 fd ff ff 	mov    QWORD PTR [rbp-0x300],rax
  22a336:	88 8d ff fc ff ff    	mov    BYTE PTR [rbp-0x301],cl
  22a33c:	0f 82 fa 06 00 00    	jb     22aa3c <formatFloatDecimal+0x11ec>
  22a342:	e9 05 07 00 00       	jmp    22aa4c <formatFloatDecimal+0x11fc>
        if (num_digits_whole > 0) {
  22a347:	eb 59                	jmp    22a3a2 <formatFloatDecimal+0xb52>
  22a349:	48 8d 15 20 97 01 00 	lea    rdx,[rip+0x19720]        # 243a70 <__unnamed_218>
            try output(context, "0");
  22a350:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  22a357:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  22a35e:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22a365:	ff d0                	call   rax
  22a367:	66 89 85 62 ff ff ff 	mov    WORD PTR [rbp-0x9e],ax
  22a36e:	66 83 bd 62 ff ff ff 	cmp    WORD PTR [rbp-0x9e],0x0
  22a375:	00 
  22a376:	74 2a                	je     22a3a2 <formatFloatDecimal+0xb52>
  22a378:	66 8b 85 62 ff ff ff 	mov    ax,WORD PTR [rbp-0x9e]
  22a37f:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22a386:	66 89 85 fc fc ff ff 	mov    WORD PTR [rbp-0x304],ax
  22a38d:	e8 fe 18 fe ff       	call   20bc90 <__zig_return_error>
  22a392:	66 8b 85 fc fc ff ff 	mov    ax,WORD PTR [rbp-0x304]
  22a399:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  22a3a0:	5d                   	pop    rbp
  22a3a1:	c3                   	ret    
        if (float_decimal.exp >= 0 and num_digits_whole_no_pad == float_decimal.digits.len) {
  22a3a2:	83 bd e8 fe ff ff 00 	cmp    DWORD PTR [rbp-0x118],0x0
  22a3a9:	0f 9d c0             	setge  al
  22a3ac:	a8 01                	test   al,0x1
  22a3ae:	88 85 fb fc ff ff    	mov    BYTE PTR [rbp-0x305],al
  22a3b4:	75 02                	jne    22a3b8 <formatFloatDecimal+0xb68>
  22a3b6:	eb 17                	jmp    22a3cf <formatFloatDecimal+0xb7f>
  22a3b8:	48 8b 85 88 fe ff ff 	mov    rax,QWORD PTR [rbp-0x178]
  22a3bf:	48 3b 85 e0 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x120]
  22a3c6:	0f 94 c1             	sete   cl
  22a3c9:	88 8d fb fc ff ff    	mov    BYTE PTR [rbp-0x305],cl
  22a3cf:	8a 85 fb fc ff ff    	mov    al,BYTE PTR [rbp-0x305]
  22a3d5:	a8 01                	test   al,0x1
  22a3d7:	75 02                	jne    22a3db <formatFloatDecimal+0xb8b>
  22a3d9:	eb 11                	jmp    22a3ec <formatFloatDecimal+0xb9c>
  22a3db:	31 c0                	xor    eax,eax
  22a3dd:	66 89 c1             	mov    cx,ax
            return;
  22a3e0:	66 89 c8             	mov    ax,cx
  22a3e3:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  22a3ea:	5d                   	pop    rbp
  22a3eb:	c3                   	ret    
        if (float_decimal.exp >= 0 and num_digits_whole_no_pad == float_decimal.digits.len) {
  22a3ec:	eb 00                	jmp    22a3ee <formatFloatDecimal+0xb9e>
  22a3ee:	48 8d 15 93 96 01 00 	lea    rdx,[rip+0x19693]        # 243a88 <__unnamed_219>
        try output(context, ".");
  22a3f5:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  22a3fc:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  22a403:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22a40a:	ff d0                	call   rax
  22a40c:	66 89 85 60 ff ff ff 	mov    WORD PTR [rbp-0xa0],ax
  22a413:	66 83 bd 60 ff ff ff 	cmp    WORD PTR [rbp-0xa0],0x0
  22a41a:	00 
  22a41b:	74 2a                	je     22a447 <formatFloatDecimal+0xbf7>
  22a41d:	66 8b 85 60 ff ff ff 	mov    ax,WORD PTR [rbp-0xa0]
  22a424:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22a42b:	66 89 85 f8 fc ff ff 	mov    WORD PTR [rbp-0x308],ax
  22a432:	e8 59 18 fe ff       	call   20bc90 <__zig_return_error>
  22a437:	66 8b 85 f8 fc ff ff 	mov    ax,WORD PTR [rbp-0x308]
  22a43e:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  22a445:	5d                   	pop    rbp
  22a446:	c3                   	ret    
        if (float_decimal.exp < 0) {
  22a447:	83 bd e8 fe ff ff 00 	cmp    DWORD PTR [rbp-0x118],0x0
  22a44e:	0f 8d b3 00 00 00    	jge    22a507 <formatFloatDecimal+0xcb7>
  22a454:	31 c0                	xor    eax,eax
            const zero_digit_count = @intCast(usize, -float_decimal.exp);
  22a456:	2b 85 e8 fe ff ff    	sub    eax,DWORD PTR [rbp-0x118]
  22a45c:	0f 90 c1             	seto   cl
  22a45f:	89 85 f4 fc ff ff    	mov    DWORD PTR [rbp-0x30c],eax
  22a465:	88 8d f3 fc ff ff    	mov    BYTE PTR [rbp-0x30d],cl
  22a46b:	0f 80 ee 05 00 00    	jo     22aa5f <formatFloatDecimal+0x120f>
  22a471:	e9 f9 05 00 00       	jmp    22aa6f <formatFloatDecimal+0x121f>
            while (i < zero_digit_count) : (i += 1) {
  22a476:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  22a47d:	48 3b 85 78 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x188]
  22a484:	73 7f                	jae    22a505 <formatFloatDecimal+0xcb5>
  22a486:	48 8d 15 13 96 01 00 	lea    rdx,[rip+0x19613]        # 243aa0 <__unnamed_220>
                try output(context, "0");
  22a48d:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  22a494:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  22a49b:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22a4a2:	ff d0                	call   rax
  22a4a4:	66 89 85 5e ff ff ff 	mov    WORD PTR [rbp-0xa2],ax
  22a4ab:	66 83 bd 5e ff ff ff 	cmp    WORD PTR [rbp-0xa2],0x0
  22a4b2:	00 
  22a4b3:	74 2a                	je     22a4df <formatFloatDecimal+0xc8f>
  22a4b5:	66 8b 85 5e ff ff ff 	mov    ax,WORD PTR [rbp-0xa2]
  22a4bc:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22a4c3:	66 89 85 f0 fc ff ff 	mov    WORD PTR [rbp-0x310],ax
  22a4ca:	e8 c1 17 fe ff       	call   20bc90 <__zig_return_error>
  22a4cf:	66 8b 85 f0 fc ff ff 	mov    ax,WORD PTR [rbp-0x310]
  22a4d6:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  22a4dd:	5d                   	pop    rbp
  22a4de:	c3                   	ret    
            while (i < zero_digit_count) : (i += 1) {
  22a4df:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  22a4e6:	48 83 c0 01          	add    rax,0x1
  22a4ea:	0f 92 c1             	setb   cl
  22a4ed:	48 89 85 e8 fc ff ff 	mov    QWORD PTR [rbp-0x318],rax
  22a4f4:	88 8d e7 fc ff ff    	mov    BYTE PTR [rbp-0x319],cl
  22a4fa:	0f 82 8f 05 00 00    	jb     22aa8f <formatFloatDecimal+0x123f>
  22a500:	e9 9a 05 00 00       	jmp    22aa9f <formatFloatDecimal+0x124f>
        if (float_decimal.exp < 0) {
  22a505:	eb 02                	jmp    22a509 <formatFloatDecimal+0xcb9>
  22a507:	eb 00                	jmp    22a509 <formatFloatDecimal+0xcb9>
  22a509:	48 8d 85 d8 fe ff ff 	lea    rax,[rbp-0x128]
        try output(context, float_decimal.digits[num_digits_whole_no_pad..]);
  22a510:	48 8b 8d 28 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd8]
  22a517:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  22a51e:	48 8b 95 88 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x178]
  22a525:	48 8b bd e0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x120]
  22a52c:	48 39 fa             	cmp    rdx,rdi
  22a52f:	48 89 85 d8 fc ff ff 	mov    QWORD PTR [rbp-0x328],rax
  22a536:	48 89 8d d0 fc ff ff 	mov    QWORD PTR [rbp-0x330],rcx
  22a53d:	48 89 b5 c8 fc ff ff 	mov    QWORD PTR [rbp-0x338],rsi
  22a544:	48 89 95 c0 fc ff ff 	mov    QWORD PTR [rbp-0x340],rdx
  22a54b:	48 89 bd b8 fc ff ff 	mov    QWORD PTR [rbp-0x348],rdi
  22a552:	0f 86 6a 05 00 00    	jbe    22aac2 <formatFloatDecimal+0x1272>
  22a558:	e9 55 05 00 00       	jmp    22aab2 <formatFloatDecimal+0x1262>
  22a55d:	66 8b 85 46 ff ff ff 	mov    ax,WORD PTR [rbp-0xba]
  22a564:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22a56b:	66 89 85 b6 fc ff ff 	mov    WORD PTR [rbp-0x34a],ax
  22a572:	e8 19 17 fe ff       	call   20bc90 <__zig_return_error>
  22a577:	66 8b 85 b6 fc ff ff 	mov    ax,WORD PTR [rbp-0x34a]
  22a57e:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  22a585:	5d                   	pop    rbp
  22a586:	c3                   	ret    
  22a587:	31 c0                	xor    eax,eax
  22a589:	66 89 c1             	mov    cx,ax
) Errors!void {
  22a58c:	66 89 c8             	mov    ax,cx
  22a58f:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  22a596:	5d                   	pop    rbp
  22a597:	c3                   	ret    
  22a598:	48 8d 3d 29 8c 01 00 	lea    rdi,[rip+0x18c29]        # 2431c8 <__unnamed_4>
  22a59f:	31 c0                	xor    eax,eax
  22a5a1:	89 c6                	mov    esi,eax
                while (i < precision) : (i += 1) {
  22a5a3:	e8 58 10 fe ff       	call   20b600 <panic>
  22a5a8:	48 8b 85 48 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b8]
  22a5af:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
  22a5b6:	e9 1a f5 ff ff       	jmp    229ad5 <formatFloatDecimal+0x285>
  22a5bb:	48 8d 3d 36 8e 01 00 	lea    rdi,[rip+0x18e36]        # 2433f8 <__unnamed_20>
  22a5c2:	31 c0                	xor    eax,eax
  22a5c4:	89 c6                	mov    esi,eax
    var float_decimal = errol.errol3(x, buffer[0..]);
  22a5c6:	e8 35 10 fe ff       	call   20b600 <panic>
  22a5cb:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  22a5cf:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
  22a5d3:	48 8d 85 f0 fe ff ff 	lea    rax,[rbp-0x110]
  22a5da:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  22a5de:	48 c7 45 e8 20 00 00 	mov    QWORD PTR [rbp-0x18],0x20
  22a5e5:	00 
  22a5e6:	c5 fb 10 85 38 fe ff 	vmovsd xmm0,QWORD PTR [rbp-0x1c8]
  22a5ed:	ff 
  22a5ee:	e8 5d 0f 00 00       	call   22b550 <errol3>
  22a5f3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  22a5f7:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
  22a5fe:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  22a602:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
  22a609:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  22a60d:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
    if (maybe_precision) |precision| {
  22a614:	48 8b 85 60 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a0]
  22a61b:	f6 40 08 01          	test   BYTE PTR [rax+0x8],0x1
  22a61f:	0f 85 44 f6 ff ff    	jne    229c69 <formatFloatDecimal+0x419>
  22a625:	e9 a2 fb ff ff       	jmp    22a1cc <formatFloatDecimal+0x97c>
  22a62a:	48 8d 3d c7 8d 01 00 	lea    rdi,[rip+0x18dc7]        # 2433f8 <__unnamed_20>
  22a631:	31 c0                	xor    eax,eax
  22a633:	89 c6                	mov    esi,eax
            try output(context, float_decimal.digits[0..num_digits_whole_no_pad]);
  22a635:	e8 c6 0f fe ff       	call   20b600 <panic>
  22a63a:	48 8b 85 08 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1f8]
  22a641:	48 8b 8d 28 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d8]
  22a648:	48 39 c8             	cmp    rax,rcx
  22a64b:	76 10                	jbe    22a65d <formatFloatDecimal+0xe0d>
  22a64d:	48 8d 3d a4 8d 01 00 	lea    rdi,[rip+0x18da4]        # 2433f8 <__unnamed_20>
  22a654:	31 c0                	xor    eax,eax
  22a656:	89 c6                	mov    esi,eax
  22a658:	e8 a3 0f fe ff       	call   20b600 <panic>
  22a65d:	48 8d 55 b8          	lea    rdx,[rbp-0x48]
  22a661:	48 8b 85 20 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e0]
  22a668:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22a66b:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
  22a66f:	48 8b 8d 08 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1f8]
  22a676:	48 83 e9 00          	sub    rcx,0x0
  22a67a:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
  22a67e:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22a685:	48 8b b5 10 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1f0]
  22a68c:	48 8b 8d 18 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1e8]
  22a693:	ff d1                	call   rcx
  22a695:	66 89 45 b6          	mov    WORD PTR [rbp-0x4a],ax
  22a699:	66 83 7d b6 00       	cmp    WORD PTR [rbp-0x4a],0x0
  22a69e:	0f 85 9f f6 ff ff    	jne    229d43 <formatFloatDecimal+0x4f3>
  22a6a4:	e9 c1 f6 ff ff       	jmp    229d6a <formatFloatDecimal+0x51a>
  22a6a9:	48 8d 3d 18 8b 01 00 	lea    rdi,[rip+0x18b18]        # 2431c8 <__unnamed_4>
  22a6b0:	31 c0                	xor    eax,eax
  22a6b2:	89 c6                	mov    esi,eax
            while (i < num_digits_whole) : (i += 1) {
  22a6b4:	e8 47 0f fe ff       	call   20b600 <panic>
  22a6b9:	48 8b 85 f8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x208]
  22a6c0:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
  22a6c7:	e9 ac f6 ff ff       	jmp    229d78 <formatFloatDecimal+0x528>
  22a6cc:	48 8d 3d f5 8a 01 00 	lea    rdi,[rip+0x18af5]        # 2431c8 <__unnamed_4>
  22a6d3:	31 c0                	xor    eax,eax
  22a6d5:	89 c6                	mov    esi,eax
            const zero_digit_count = @intCast(usize, -float_decimal.exp);
  22a6d7:	e8 24 0f fe ff       	call   20b600 <panic>
  22a6dc:	8b 85 ec fd ff ff    	mov    eax,DWORD PTR [rbp-0x214]
  22a6e2:	48 63 c8             	movsxd rcx,eax
  22a6e5:	48 89 8d a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rcx
            const zeros_to_print = math.min(zero_digit_count, precision);
  22a6ec:	48 8b bd a8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x158]
  22a6f3:	48 8b b5 d0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x130]
  22a6fa:	e8 11 ba ff ff       	call   226110 <min>
  22a6ff:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
            var i: usize = 0;
  22a706:	48 c7 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],0x0
  22a70d:	00 00 00 00 
            while (i < zeros_to_print) : (i += 1) {
  22a711:	e9 e1 f7 ff ff       	jmp    229ef7 <formatFloatDecimal+0x6a7>
  22a716:	48 8d 3d ab 8a 01 00 	lea    rdi,[rip+0x18aab]        # 2431c8 <__unnamed_4>
  22a71d:	31 c0                	xor    eax,eax
  22a71f:	89 c6                	mov    esi,eax
                printed += 1;
  22a721:	e8 da 0e fe ff       	call   20b600 <panic>
  22a726:	48 8b 85 e0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x220]
  22a72d:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
            while (i < zeros_to_print) : (i += 1) {
  22a734:	48 8b 8d 98 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x168]
  22a73b:	48 83 c1 01          	add    rcx,0x1
  22a73f:	0f 92 c2             	setb   dl
  22a742:	48 89 8d a8 fc ff ff 	mov    QWORD PTR [rbp-0x358],rcx
  22a749:	88 95 a7 fc ff ff    	mov    BYTE PTR [rbp-0x359],dl
  22a74f:	72 02                	jb     22a753 <formatFloatDecimal+0xf03>
  22a751:	eb 10                	jmp    22a763 <formatFloatDecimal+0xf13>
  22a753:	48 8d 3d 6e 8a 01 00 	lea    rdi,[rip+0x18a6e]        # 2431c8 <__unnamed_4>
  22a75a:	31 c0                	xor    eax,eax
  22a75c:	89 c6                	mov    esi,eax
  22a75e:	e8 9d 0e fe ff       	call   20b600 <panic>
  22a763:	48 8b 85 a8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x358]
  22a76a:	48 89 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rax
  22a771:	e9 81 f7 ff ff       	jmp    229ef7 <formatFloatDecimal+0x6a7>
  22a776:	48 8d 3d 4b 8a 01 00 	lea    rdi,[rip+0x18a4b]        # 2431c8 <__unnamed_4>
  22a77d:	31 c0                	xor    eax,eax
  22a77f:	89 c6                	mov    esi,eax
        if (num_digits_whole_no_pad + precision - printed < float_decimal.digits.len) {
  22a781:	e8 7a 0e fe ff       	call   20b600 <panic>
  22a786:	48 8b 85 d0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x230]
  22a78d:	48 2b 85 b0 fe ff ff 	sub    rax,QWORD PTR [rbp-0x150]
  22a794:	0f 92 c1             	setb   cl
  22a797:	48 89 85 98 fc ff ff 	mov    QWORD PTR [rbp-0x368],rax
  22a79e:	88 8d 97 fc ff ff    	mov    BYTE PTR [rbp-0x369],cl
  22a7a4:	72 02                	jb     22a7a8 <formatFloatDecimal+0xf58>
  22a7a6:	eb 10                	jmp    22a7b8 <formatFloatDecimal+0xf68>
  22a7a8:	48 8d 3d 19 8a 01 00 	lea    rdi,[rip+0x18a19]        # 2431c8 <__unnamed_4>
  22a7af:	31 c0                	xor    eax,eax
  22a7b1:	89 c6                	mov    esi,eax
  22a7b3:	e8 48 0e fe ff       	call   20b600 <panic>
  22a7b8:	48 8b 85 98 fc ff ff 	mov    rax,QWORD PTR [rbp-0x368]
  22a7bf:	48 3b 85 e0 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x120]
  22a7c6:	0f 82 1a f8 ff ff    	jb     229fe6 <formatFloatDecimal+0x796>
  22a7cc:	e9 b0 f8 ff ff       	jmp    22a081 <formatFloatDecimal+0x831>
  22a7d1:	48 8d 3d f0 89 01 00 	lea    rdi,[rip+0x189f0]        # 2431c8 <__unnamed_4>
  22a7d8:	31 c0                	xor    eax,eax
  22a7da:	89 c6                	mov    esi,eax
            try output(context, float_decimal.digits[num_digits_whole_no_pad .. num_digits_whole_no_pad + precision - printed]);
  22a7dc:	e8 1f 0e fe ff       	call   20b600 <panic>
  22a7e1:	48 8b 85 a0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x260]
  22a7e8:	48 2b 85 b0 fe ff ff 	sub    rax,QWORD PTR [rbp-0x150]
  22a7ef:	0f 92 c1             	setb   cl
  22a7f2:	48 89 85 88 fc ff ff 	mov    QWORD PTR [rbp-0x378],rax
  22a7f9:	88 8d 87 fc ff ff    	mov    BYTE PTR [rbp-0x379],cl
  22a7ff:	72 02                	jb     22a803 <formatFloatDecimal+0xfb3>
  22a801:	eb 10                	jmp    22a813 <formatFloatDecimal+0xfc3>
  22a803:	48 8d 3d be 89 01 00 	lea    rdi,[rip+0x189be]        # 2431c8 <__unnamed_4>
  22a80a:	31 c0                	xor    eax,eax
  22a80c:	89 c6                	mov    esi,eax
  22a80e:	e8 ed 0d fe ff       	call   20b600 <panic>
  22a813:	48 8b 85 c0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x240]
  22a81a:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  22a81e:	48 8b 95 a8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x258]
  22a825:	48 8b b5 88 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x378]
  22a82c:	48 39 f2             	cmp    rdx,rsi
  22a82f:	48 89 8d 78 fc ff ff 	mov    QWORD PTR [rbp-0x388],rcx
  22a836:	76 10                	jbe    22a848 <formatFloatDecimal+0xff8>
  22a838:	48 8d 3d b9 8b 01 00 	lea    rdi,[rip+0x18bb9]        # 2433f8 <__unnamed_20>
  22a83f:	31 c0                	xor    eax,eax
  22a841:	89 c6                	mov    esi,eax
  22a843:	e8 b8 0d fe ff       	call   20b600 <panic>
  22a848:	48 8b 85 88 fc ff ff 	mov    rax,QWORD PTR [rbp-0x378]
  22a84f:	48 8b 8d 78 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x388]
  22a856:	48 39 c8             	cmp    rax,rcx
  22a859:	76 10                	jbe    22a86b <formatFloatDecimal+0x101b>
  22a85b:	48 8d 3d 96 8b 01 00 	lea    rdi,[rip+0x18b96]        # 2433f8 <__unnamed_20>
  22a862:	31 c0                	xor    eax,eax
  22a864:	89 c6                	mov    esi,eax
  22a866:	e8 95 0d fe ff       	call   20b600 <panic>
  22a86b:	48 8d 55 98          	lea    rdx,[rbp-0x68]
  22a86f:	48 8b 85 a8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x258]
  22a876:	48 8b 8d c0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x240]
  22a87d:	48 03 01             	add    rax,QWORD PTR [rcx]
  22a880:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  22a884:	48 8b 85 88 fc ff ff 	mov    rax,QWORD PTR [rbp-0x378]
  22a88b:	48 8b b5 a8 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x258]
  22a892:	48 29 f0             	sub    rax,rsi
  22a895:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  22a899:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22a8a0:	48 8b b5 b0 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x250]
  22a8a7:	48 8b 85 b8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x248]
  22a8ae:	ff d0                	call   rax
  22a8b0:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  22a8b4:	66 83 7d 96 00       	cmp    WORD PTR [rbp-0x6a],0x0
  22a8b9:	0f 85 8a f7 ff ff    	jne    22a049 <formatFloatDecimal+0x7f9>
  22a8bf:	e9 ac f7 ff ff       	jmp    22a070 <formatFloatDecimal+0x820>
  22a8c4:	48 8d 3d 2d 8b 01 00 	lea    rdi,[rip+0x18b2d]        # 2433f8 <__unnamed_20>
  22a8cb:	31 c0                	xor    eax,eax
  22a8cd:	89 c6                	mov    esi,eax
            try output(context, float_decimal.digits[num_digits_whole_no_pad..]);
  22a8cf:	e8 2c 0d fe ff       	call   20b600 <panic>
  22a8d4:	48 8d 55 80          	lea    rdx,[rbp-0x80]
  22a8d8:	48 8b 85 78 fd ff ff 	mov    rax,QWORD PTR [rbp-0x288]
  22a8df:	48 8b 8d 90 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x270]
  22a8e6:	48 03 01             	add    rax,QWORD PTR [rcx]
  22a8e9:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  22a8ed:	48 8b 85 70 fd ff ff 	mov    rax,QWORD PTR [rbp-0x290]
  22a8f4:	48 8b b5 78 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x288]
  22a8fb:	48 29 f0             	sub    rax,rsi
  22a8fe:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  22a902:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22a909:	48 8b b5 80 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x280]
  22a910:	48 8b 85 88 fd ff ff 	mov    rax,QWORD PTR [rbp-0x278]
  22a917:	ff d0                	call   rax
  22a919:	66 89 85 7e ff ff ff 	mov    WORD PTR [rbp-0x82],ax
  22a920:	66 83 bd 7e ff ff ff 	cmp    WORD PTR [rbp-0x82],0x0
  22a927:	00 
  22a928:	0f 85 a7 f7 ff ff    	jne    22a0d5 <formatFloatDecimal+0x885>
  22a92e:	e9 cc f7 ff ff       	jmp    22a0ff <formatFloatDecimal+0x8af>
  22a933:	48 8d 3d 8e 88 01 00 	lea    rdi,[rip+0x1888e]        # 2431c8 <__unnamed_4>
  22a93a:	31 c0                	xor    eax,eax
  22a93c:	89 c6                	mov    esi,eax
            printed += float_decimal.digits.len - num_digits_whole_no_pad;
  22a93e:	e8 bd 0c fe ff       	call   20b600 <panic>
  22a943:	48 8b 85 60 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2a0]
  22a94a:	48 8b 8d 58 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2a8]
  22a951:	48 01 c8             	add    rax,rcx
  22a954:	0f 92 c2             	setb   dl
  22a957:	48 89 85 70 fc ff ff 	mov    QWORD PTR [rbp-0x390],rax
  22a95e:	88 95 6f fc ff ff    	mov    BYTE PTR [rbp-0x391],dl
  22a964:	72 02                	jb     22a968 <formatFloatDecimal+0x1118>
  22a966:	eb 10                	jmp    22a978 <formatFloatDecimal+0x1128>
  22a968:	48 8d 3d 59 88 01 00 	lea    rdi,[rip+0x18859]        # 2431c8 <__unnamed_4>
  22a96f:	31 c0                	xor    eax,eax
  22a971:	89 c6                	mov    esi,eax
  22a973:	e8 88 0c fe ff       	call   20b600 <panic>
  22a978:	48 8b 85 70 fc ff ff 	mov    rax,QWORD PTR [rbp-0x390]
  22a97f:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
            while (printed < precision) : (printed += 1) {
  22a986:	e9 ab f7 ff ff       	jmp    22a136 <formatFloatDecimal+0x8e6>
  22a98b:	48 8d 3d 36 88 01 00 	lea    rdi,[rip+0x18836]        # 2431c8 <__unnamed_4>
  22a992:	31 c0                	xor    eax,eax
  22a994:	89 c6                	mov    esi,eax
  22a996:	e8 65 0c fe ff       	call   20b600 <panic>
  22a99b:	48 8b 85 48 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b8]
  22a9a2:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  22a9a9:	e9 88 f7 ff ff       	jmp    22a136 <formatFloatDecimal+0x8e6>
  22a9ae:	48 8d 3d 43 8a 01 00 	lea    rdi,[rip+0x18a43]        # 2433f8 <__unnamed_20>
  22a9b5:	31 c0                	xor    eax,eax
  22a9b7:	89 c6                	mov    esi,eax
            try output(context, float_decimal.digits[0..num_digits_whole_no_pad]);
  22a9b9:	e8 42 0c fe ff       	call   20b600 <panic>
  22a9be:	48 8b 85 10 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2f0]
  22a9c5:	48 8b 8d 30 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2d0]
  22a9cc:	48 39 c8             	cmp    rax,rcx
  22a9cf:	76 10                	jbe    22a9e1 <formatFloatDecimal+0x1191>
  22a9d1:	48 8d 3d 20 8a 01 00 	lea    rdi,[rip+0x18a20]        # 2433f8 <__unnamed_20>
  22a9d8:	31 c0                	xor    eax,eax
  22a9da:	89 c6                	mov    esi,eax
  22a9dc:	e8 1f 0c fe ff       	call   20b600 <panic>
  22a9e1:	48 8d 95 68 ff ff ff 	lea    rdx,[rbp-0x98]
  22a9e8:	48 8b 85 28 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2d8]
  22a9ef:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22a9f2:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
  22a9f9:	48 8b 8d 10 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2f0]
  22aa00:	48 83 e9 00          	sub    rcx,0x0
  22aa04:	48 89 8d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rcx
  22aa0b:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22aa12:	48 8b b5 18 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2e8]
  22aa19:	48 8b 8d 20 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2e0]
  22aa20:	ff d1                	call   rcx
  22aa22:	66 89 85 66 ff ff ff 	mov    WORD PTR [rbp-0x9a],ax
  22aa29:	66 83 bd 66 ff ff ff 	cmp    WORD PTR [rbp-0x9a],0x0
  22aa30:	00 
  22aa31:	0f 85 49 f8 ff ff    	jne    22a280 <formatFloatDecimal+0xa30>
  22aa37:	e9 6e f8 ff ff       	jmp    22a2aa <formatFloatDecimal+0xa5a>
  22aa3c:	48 8d 3d 85 87 01 00 	lea    rdi,[rip+0x18785]        # 2431c8 <__unnamed_4>
  22aa43:	31 c0                	xor    eax,eax
  22aa45:	89 c6                	mov    esi,eax
            while (i < num_digits_whole) : (i += 1) {
  22aa47:	e8 b4 0b fe ff       	call   20b600 <panic>
  22aa4c:	48 8b 85 00 fd ff ff 	mov    rax,QWORD PTR [rbp-0x300]
  22aa53:	48 89 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rax
  22aa5a:	e9 59 f8 ff ff       	jmp    22a2b8 <formatFloatDecimal+0xa68>
  22aa5f:	48 8d 3d 62 87 01 00 	lea    rdi,[rip+0x18762]        # 2431c8 <__unnamed_4>
  22aa66:	31 c0                	xor    eax,eax
  22aa68:	89 c6                	mov    esi,eax
            const zero_digit_count = @intCast(usize, -float_decimal.exp);
  22aa6a:	e8 91 0b fe ff       	call   20b600 <panic>
  22aa6f:	8b 85 f4 fc ff ff    	mov    eax,DWORD PTR [rbp-0x30c]
  22aa75:	48 63 c8             	movsxd rcx,eax
  22aa78:	48 89 8d 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rcx
            var i: usize = 0;
  22aa7f:	48 c7 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],0x0
  22aa86:	00 00 00 00 
            while (i < zero_digit_count) : (i += 1) {
  22aa8a:	e9 e7 f9 ff ff       	jmp    22a476 <formatFloatDecimal+0xc26>
  22aa8f:	48 8d 3d 32 87 01 00 	lea    rdi,[rip+0x18732]        # 2431c8 <__unnamed_4>
  22aa96:	31 c0                	xor    eax,eax
  22aa98:	89 c6                	mov    esi,eax
  22aa9a:	e8 61 0b fe ff       	call   20b600 <panic>
  22aa9f:	48 8b 85 e8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x318]
  22aaa6:	48 89 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rax
  22aaad:	e9 c4 f9 ff ff       	jmp    22a476 <formatFloatDecimal+0xc26>
  22aab2:	48 8d 3d 3f 89 01 00 	lea    rdi,[rip+0x1893f]        # 2433f8 <__unnamed_20>
  22aab9:	31 c0                	xor    eax,eax
  22aabb:	89 c6                	mov    esi,eax
        try output(context, float_decimal.digits[num_digits_whole_no_pad..]);
  22aabd:	e8 3e 0b fe ff       	call   20b600 <panic>
  22aac2:	48 8d 95 48 ff ff ff 	lea    rdx,[rbp-0xb8]
  22aac9:	48 8b 85 c0 fc ff ff 	mov    rax,QWORD PTR [rbp-0x340]
  22aad0:	48 8b 8d d8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x328]
  22aad7:	48 03 01             	add    rax,QWORD PTR [rcx]
  22aada:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  22aae1:	48 8b 85 b8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x348]
  22aae8:	48 8b b5 c0 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x340]
  22aaef:	48 29 f0             	sub    rax,rsi
  22aaf2:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
  22aaf9:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22ab00:	48 8b b5 c8 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x338]
  22ab07:	48 8b 85 d0 fc ff ff 	mov    rax,QWORD PTR [rbp-0x330]
  22ab0e:	ff d0                	call   rax
  22ab10:	66 89 85 46 ff ff ff 	mov    WORD PTR [rbp-0xba],ax
  22ab17:	66 83 bd 46 ff ff ff 	cmp    WORD PTR [rbp-0xba],0x0
  22ab1e:	00 
  22ab1f:	0f 85 38 fa ff ff    	jne    22a55d <formatFloatDecimal+0xd0d>
  22ab25:	e9 5d fa ff ff       	jmp    22a587 <formatFloatDecimal+0xd37>
  22ab2a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000022ab30 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertBefore>:
        pub fn insertBefore(list: *Self, node: *Node, new_node: *Node) void {
  22ab30:	55                   	push   rbp
  22ab31:	48 89 e5             	mov    rbp,rsp
  22ab34:	48 83 ec 40          	sub    rsp,0x40
  22ab38:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  22ab3c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  22ab40:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
            new_node.next = node;
  22ab44:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  22ab48:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  22ab4c:	48 89 72 08          	mov    QWORD PTR [rdx+0x8],rsi
            if (node.prev) |prev_node| {
  22ab50:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  22ab54:	48 83 3a 00          	cmp    QWORD PTR [rdx],0x0
  22ab58:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  22ab5c:	74 24                	je     22ab82 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertBefore+0x52>
  22ab5e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  22ab62:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22ab65:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
                new_node.prev = prev_node;
  22ab69:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22ab6d:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  22ab71:	48 89 11             	mov    QWORD PTR [rcx],rdx
                prev_node.next = new_node;
  22ab74:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  22ab78:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  22ab7c:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
            if (node.prev) |prev_node| {
  22ab80:	eb 16                	jmp    22ab98 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertBefore+0x68>
                new_node.prev = null;
  22ab82:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22ab86:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
                list.first = new_node;
  22ab8d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  22ab91:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22ab95:	48 89 08             	mov    QWORD PTR [rax],rcx
            node.prev = new_node;
  22ab98:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22ab9c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22aba0:	48 89 08             	mov    QWORD PTR [rax],rcx
            list.len += 1;
  22aba3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  22aba7:	48 89 c1             	mov    rcx,rax
  22abaa:	48 83 c1 10          	add    rcx,0x10
  22abae:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  22abb2:	48 83 c0 01          	add    rax,0x1
  22abb6:	0f 92 c2             	setb   dl
  22abb9:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  22abbd:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  22abc1:	88 55 c7             	mov    BYTE PTR [rbp-0x39],dl
  22abc4:	72 02                	jb     22abc8 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertBefore+0x98>
  22abc6:	eb 10                	jmp    22abd8 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertBefore+0xa8>
  22abc8:	48 8d 3d f9 85 01 00 	lea    rdi,[rip+0x185f9]        # 2431c8 <__unnamed_4>
  22abcf:	31 c0                	xor    eax,eax
  22abd1:	89 c6                	mov    esi,eax
  22abd3:	e8 28 0a fe ff       	call   20b600 <panic>
  22abd8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  22abdc:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  22abe0:	48 89 08             	mov    QWORD PTR [rax],rcx
        pub fn insertBefore(list: *Self, node: *Node, new_node: *Node) void {
  22abe3:	48 83 c4 40          	add    rsp,0x40
  22abe7:	5d                   	pop    rbp
  22abe8:	c3                   	ret    
  22abe9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

000000000022abf0 <formatInt.119>:
pub fn formatInt(
  22abf0:	55                   	push   rbp
  22abf1:	48 89 e5             	mov    rbp,rsp
  22abf4:	41 56                	push   r14
  22abf6:	53                   	push   rbx
  22abf7:	48 83 ec 40          	sub    rsp,0x40
  22abfb:	88 c8                	mov    al,cl
  22abfd:	41 88 d2             	mov    r10b,dl
  22ac00:	4c 8b 5d 10          	mov    r11,QWORD PTR [rbp+0x10]
  22ac04:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
  22ac08:	44 88 55 e7          	mov    BYTE PTR [rbp-0x19],r10b
  22ac0c:	24 01                	and    al,0x1
  22ac0e:	88 45 e6             	mov    BYTE PTR [rbp-0x1a],al
  22ac11:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
  22ac15:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
        return formatIntUnsigned(value, base, uppercase, width, context, Errors, output);
  22ac19:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  22ac1d:	8a 45 e7             	mov    al,BYTE PTR [rbp-0x19]
  22ac20:	44 8a 55 e6          	mov    r10b,BYTE PTR [rbp-0x1a]
  22ac24:	4c 8b 45 d8          	mov    r8,QWORD PTR [rbp-0x28]
  22ac28:	4c 8b 4d d0          	mov    r9,QWORD PTR [rbp-0x30]
  22ac2c:	48 8b 5d 10          	mov    rbx,QWORD PTR [rbp+0x10]
  22ac30:	49 89 e6             	mov    r14,rsp
  22ac33:	49 89 1e             	mov    QWORD PTR [r14],rbx
  22ac36:	0f b6 d0             	movzx  edx,al
  22ac39:	41 0f b6 ca          	movzx  ecx,r10b
  22ac3d:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  22ac41:	4c 89 5d c0          	mov    QWORD PTR [rbp-0x40],r11
  22ac45:	e8 d6 10 00 00       	call   22bd20 <formatIntUnsigned.120>
  22ac4a:	66 83 f8 00          	cmp    ax,0x0
  22ac4e:	66 89 45 be          	mov    WORD PTR [rbp-0x42],ax
  22ac52:	74 0b                	je     22ac5f <formatInt.119+0x6f>
  22ac54:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  22ac58:	e8 33 10 fe ff       	call   20bc90 <__zig_return_error>
  22ac5d:	eb 02                	jmp    22ac61 <formatInt.119+0x71>
  22ac5f:	eb 00                	jmp    22ac61 <formatInt.119+0x71>
  22ac61:	66 8b 45 be          	mov    ax,WORD PTR [rbp-0x42]
  22ac65:	48 83 c4 40          	add    rsp,0x40
  22ac69:	5b                   	pop    rbx
  22ac6a:	41 5e                	pop    r14
  22ac6c:	5d                   	pop    rbp
  22ac6d:	c3                   	ret    
  22ac6e:	66 90                	xchg   ax,ax

000000000022ac70 <formatIntUnsigned>:
        const new_width = if (width == 0) 0 else (width - 1);
        return formatIntUnsigned(new_value, base, uppercase, new_width, context, Errors, output);
    }
}

fn formatIntUnsigned(
  22ac70:	55                   	push   rbp
  22ac71:	48 89 e5             	mov    rbp,rsp
  22ac74:	41 56                	push   r14
  22ac76:	53                   	push   rbx
  22ac77:	48 81 ec 20 02 00 00 	sub    rsp,0x220
  22ac7e:	88 c8                	mov    al,cl
  22ac80:	41 88 d2             	mov    r10b,dl
  22ac83:	4c 8b 5d 10          	mov    r11,QWORD PTR [rbp+0x10]
  22ac87:	48 8d 1d 75 fb fd ff 	lea    rbx,[rip+0xfffffffffffdfb75]        # 20a803 <__unnamed_221>
  22ac8e:	b9 40 00 00 00       	mov    ecx,0x40
  22ac93:	89 ca                	mov    edx,ecx
  22ac95:	4c 8d b5 f8 fe ff ff 	lea    r14,[rbp-0x108]
  22ac9c:	48 89 b5 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rsi
  22aca3:	44 88 95 4f ff ff ff 	mov    BYTE PTR [rbp-0xb1],r10b
  22acaa:	24 01                	and    al,0x1
  22acac:	88 85 4e ff ff ff    	mov    BYTE PTR [rbp-0xb2],al
  22acb2:	4c 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],r8
  22acb9:	4c 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],r9
    comptime Errors: type,
    output: fn (@typeOf(context), []const u8) Errors!void,
) Errors!void {
    // max_int_digits accounts for the minus sign. when printing an unsigned
    // number we don't need to do that.
    var buf: [max_int_digits - 1]u8 = undefined;
  22acc0:	48 89 bd a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdi
  22acc7:	4c 89 f7             	mov    rdi,r14
  22acca:	48 89 de             	mov    rsi,rbx
  22accd:	4c 89 9d 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],r11
  22acd4:	e8 27 9c 00 00       	call   234900 <memcpy>
    var a = if (@sizeOf(@typeOf(value)) == 1) u8(value) else value;
  22acd9:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
  22ace0:	48 89 95 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rdx
    var index: usize = buf.len;
  22ace7:	48 c7 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],0x40
  22acee:	40 00 00 00 

    while (true) {
  22acf2:	eb 00                	jmp    22acf4 <formatIntUnsigned+0x84>
        const digit = a % base;
  22acf4:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  22acfb:	0f b6 8d 4f ff ff ff 	movzx  ecx,BYTE PTR [rbp-0xb1]
  22ad02:	89 ca                	mov    edx,ecx
  22ad04:	48 83 fa 00          	cmp    rdx,0x0
  22ad08:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  22ad0f:	48 89 95 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rdx
  22ad16:	0f 84 f6 01 00 00    	je     22af12 <formatIntUnsigned+0x2a2>
  22ad1c:	e9 b4 01 00 00       	jmp    22aed5 <formatIntUnsigned+0x265>
        index -= 1;
        buf[index] = digitToChar(@intCast(u8, digit), uppercase);
        a /= base;
        if (a == 0) break;
  22ad21:	eb 02                	jmp    22ad25 <formatIntUnsigned+0xb5>
    while (true) {
  22ad23:	eb cd                	jmp    22acf2 <formatIntUnsigned+0x82>
    }

    const digits_buf = buf[index..];
  22ad25:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  22ad2c:	48 83 f8 40          	cmp    rax,0x40
  22ad30:	48 89 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rax
  22ad37:	0f 86 02 03 00 00    	jbe    22b03f <formatIntUnsigned+0x3cf>
  22ad3d:	e9 ed 02 00 00       	jmp    22b02f <formatIntUnsigned+0x3bf>
    const padding = if (width > digits_buf.len) (width - digits_buf.len) else 0;
  22ad42:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  22ad49:	48 2b 85 d8 fe ff ff 	sub    rax,QWORD PTR [rbp-0x128]
  22ad50:	0f 92 c1             	setb   cl
  22ad53:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  22ad5a:	88 8d 77 fe ff ff    	mov    BYTE PTR [rbp-0x189],cl
  22ad60:	0f 82 2b 03 00 00    	jb     22b091 <formatIntUnsigned+0x421>
  22ad66:	e9 36 03 00 00       	jmp    22b0a1 <formatIntUnsigned+0x431>
  22ad6b:	31 c0                	xor    eax,eax
  22ad6d:	89 c1                	mov    ecx,eax
  22ad6f:	48 89 8d 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rcx
  22ad76:	eb 00                	jmp    22ad78 <formatIntUnsigned+0x108>
  22ad78:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
  22ad7f:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax

    if (padding > index) {
  22ad86:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  22ad8d:	48 3b 85 e8 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x118]
  22ad94:	0f 86 ef 00 00 00    	jbe    22ae89 <formatIntUnsigned+0x219>
        const zero_byte: u8 = '0';
  22ad9a:	c6 85 c7 fe ff ff 30 	mov    BYTE PTR [rbp-0x139],0x30
        var leftover_padding = padding - index;
  22ada1:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  22ada8:	48 2b 85 e8 fe ff ff 	sub    rax,QWORD PTR [rbp-0x118]
  22adaf:	0f 92 c1             	setb   cl
  22adb2:	48 89 85 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rax
  22adb9:	88 8d 5f fe ff ff    	mov    BYTE PTR [rbp-0x1a1],cl
  22adbf:	0f 82 ef 02 00 00    	jb     22b0b4 <formatIntUnsigned+0x444>
  22adc5:	e9 fa 02 00 00       	jmp    22b0c4 <formatIntUnsigned+0x454>
        while (true) {
  22adca:	eb 00                	jmp    22adcc <formatIntUnsigned+0x15c>
  22adcc:	48 8d 15 e5 8c 01 00 	lea    rdx,[rip+0x18ce5]        # 243ab8 <__unnamed_222>
            try output(context, (*[1]u8)(&zero_byte)[0..]);
  22add3:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
  22add7:	48 8b b5 38 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc8]
  22adde:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
  22ade5:	ff d0                	call   rax
  22ade7:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  22adeb:	66 83 7d de 00       	cmp    WORD PTR [rbp-0x22],0x0
  22adf0:	74 2a                	je     22ae1c <formatIntUnsigned+0x1ac>
  22adf2:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  22adf6:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
  22adfd:	66 89 85 5c fe ff ff 	mov    WORD PTR [rbp-0x1a4],ax
  22ae04:	e8 87 0e fe ff       	call   20bc90 <__zig_return_error>
  22ae09:	66 8b 85 5c fe ff ff 	mov    ax,WORD PTR [rbp-0x1a4]
  22ae10:	48 81 c4 20 02 00 00 	add    rsp,0x220
  22ae17:	5b                   	pop    rbx
  22ae18:	41 5e                	pop    r14
  22ae1a:	5d                   	pop    rbp
  22ae1b:	c3                   	ret    
            leftover_padding -= 1;
  22ae1c:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  22ae23:	48 83 e8 01          	sub    rax,0x1
  22ae27:	0f 92 c1             	setb   cl
  22ae2a:	48 89 85 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rax
  22ae31:	88 8d 4f fe ff ff    	mov    BYTE PTR [rbp-0x1b1],cl
  22ae37:	0f 82 9a 02 00 00    	jb     22b0d7 <formatIntUnsigned+0x467>
  22ae3d:	e9 a5 02 00 00       	jmp    22b0e7 <formatIntUnsigned+0x477>
            if (leftover_padding == 0) break;
  22ae42:	eb 02                	jmp    22ae46 <formatIntUnsigned+0x1d6>
        while (true) {
  22ae44:	eb 84                	jmp    22adca <formatIntUnsigned+0x15a>
  22ae46:	31 c0                	xor    eax,eax
  22ae48:	89 c1                	mov    ecx,eax
        }
        mem.set(u8, buf[0..index], '0');
  22ae4a:	48 8b 95 e8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x118]
  22ae51:	48 39 d1             	cmp    rcx,rdx
  22ae54:	48 89 95 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rdx
  22ae5b:	0f 86 b7 02 00 00    	jbe    22b118 <formatIntUnsigned+0x4a8>
  22ae61:	e9 a2 02 00 00       	jmp    22b108 <formatIntUnsigned+0x498>
        return output(context, buf);
  22ae66:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
  22ae6d:	e8 1e 0e fe ff       	call   20bc90 <__zig_return_error>
  22ae72:	eb 02                	jmp    22ae76 <formatIntUnsigned+0x206>
  22ae74:	eb 00                	jmp    22ae76 <formatIntUnsigned+0x206>
  22ae76:	66 8b 85 3e fe ff ff 	mov    ax,WORD PTR [rbp-0x1c2]
  22ae7d:	48 81 c4 20 02 00 00 	add    rsp,0x220
  22ae84:	5b                   	pop    rbx
  22ae85:	41 5e                	pop    r14
  22ae87:	5d                   	pop    rbp
  22ae88:	c3                   	ret    
    } else {
        const padded_buf = buf[index - padding ..];
  22ae89:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  22ae90:	48 2b 85 c8 fe ff ff 	sub    rax,QWORD PTR [rbp-0x138]
  22ae97:	0f 92 c1             	setb   cl
  22ae9a:	48 89 85 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rax
  22aea1:	88 8d 2f fe ff ff    	mov    BYTE PTR [rbp-0x1d1],cl
  22aea7:	0f 82 08 03 00 00    	jb     22b1b5 <formatIntUnsigned+0x545>
  22aead:	e9 13 03 00 00       	jmp    22b1c5 <formatIntUnsigned+0x555>
        mem.set(u8, padded_buf[0..padding], '0');
        return output(context, padded_buf);
  22aeb2:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
  22aeb9:	e8 d2 0d fe ff       	call   20bc90 <__zig_return_error>
  22aebe:	eb 02                	jmp    22aec2 <formatIntUnsigned+0x252>
  22aec0:	eb 00                	jmp    22aec2 <formatIntUnsigned+0x252>
  22aec2:	66 8b 85 2c fe ff ff 	mov    ax,WORD PTR [rbp-0x1d4]
  22aec9:	48 81 c4 20 02 00 00 	add    rsp,0x220
  22aed0:	5b                   	pop    rbx
  22aed1:	41 5e                	pop    r14
  22aed3:	5d                   	pop    rbp
  22aed4:	c3                   	ret    
        const digit = a % base;
  22aed5:	48 8b 85 90 fe ff ff 	mov    rax,QWORD PTR [rbp-0x170]
  22aedc:	31 c9                	xor    ecx,ecx
  22aede:	89 ca                	mov    edx,ecx
  22aee0:	48 8b b5 88 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x178]
  22aee7:	48 f7 f6             	div    rsi
  22aeea:	48 89 95 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rdx
        index -= 1;
  22aef1:	48 8b 95 e8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x118]
  22aef8:	48 83 ea 01          	sub    rdx,0x1
  22aefc:	40 0f 92 c7          	setb   dil
  22af00:	48 89 95 20 fe ff ff 	mov    QWORD PTR [rbp-0x1e0],rdx
  22af07:	40 88 bd 1f fe ff ff 	mov    BYTE PTR [rbp-0x1e1],dil
  22af0e:	72 12                	jb     22af22 <formatIntUnsigned+0x2b2>
  22af10:	eb 20                	jmp    22af32 <formatIntUnsigned+0x2c2>
  22af12:	48 8d 3d df 83 01 00 	lea    rdi,[rip+0x183df]        # 2432f8 <__unnamed_15>
  22af19:	31 c0                	xor    eax,eax
  22af1b:	89 c6                	mov    esi,eax
        const digit = a % base;
  22af1d:	e8 de 06 fe ff       	call   20b600 <panic>
  22af22:	48 8d 3d 9f 82 01 00 	lea    rdi,[rip+0x1829f]        # 2431c8 <__unnamed_4>
  22af29:	31 c0                	xor    eax,eax
  22af2b:	89 c6                	mov    esi,eax
        index -= 1;
  22af2d:	e8 ce 06 fe ff       	call   20b600 <panic>
  22af32:	48 8b 85 20 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e0]
  22af39:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
        buf[index] = digitToChar(@intCast(u8, digit), uppercase);
  22af40:	48 8b 8d e8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x118]
  22af47:	48 83 f9 40          	cmp    rcx,0x40
  22af4b:	48 89 8d 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rcx
  22af52:	72 10                	jb     22af64 <formatIntUnsigned+0x2f4>
  22af54:	48 8d 3d 9d 84 01 00 	lea    rdi,[rip+0x1849d]        # 2433f8 <__unnamed_20>
  22af5b:	31 c0                	xor    eax,eax
  22af5d:	89 c6                	mov    esi,eax
  22af5f:	e8 9c 06 fe ff       	call   20b600 <panic>
  22af64:	48 8d 85 f8 fe ff ff 	lea    rax,[rbp-0x108]
  22af6b:	48 8b 8d 10 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1f0]
  22af72:	48 01 c8             	add    rax,rcx
  22af75:	48 8b 95 e0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x120]
  22af7c:	40 88 d6             	mov    sil,dl
  22af7f:	40 0f b6 fe          	movzx  edi,sil
  22af83:	41 89 f8             	mov    r8d,edi
  22af86:	4c 39 c2             	cmp    rdx,r8
  22af89:	48 89 85 08 fe ff ff 	mov    QWORD PTR [rbp-0x1f8],rax
  22af90:	40 88 b5 07 fe ff ff 	mov    BYTE PTR [rbp-0x1f9],sil
  22af97:	75 47                	jne    22afe0 <formatIntUnsigned+0x370>
  22af99:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [rbp-0xb2]
  22af9f:	8a 8d 07 fe ff ff    	mov    cl,BYTE PTR [rbp-0x1f9]
  22afa5:	0f b6 f9             	movzx  edi,cl
  22afa8:	0f b6 f0             	movzx  esi,al
  22afab:	e8 f0 13 00 00       	call   22c3a0 <digitToChar>
  22afb0:	48 8b 95 08 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1f8]
  22afb7:	88 02                	mov    BYTE PTR [rdx],al
        a /= base;
  22afb9:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  22afc0:	0f b6 b5 4f ff ff ff 	movzx  esi,BYTE PTR [rbp-0xb1]
  22afc7:	41 89 f0             	mov    r8d,esi
  22afca:	49 83 f8 00          	cmp    r8,0x0
  22afce:	48 89 85 f8 fd ff ff 	mov    QWORD PTR [rbp-0x208],rax
  22afd5:	4c 89 85 f0 fd ff ff 	mov    QWORD PTR [rbp-0x210],r8
  22afdc:	74 41                	je     22b01f <formatIntUnsigned+0x3af>
  22afde:	eb 10                	jmp    22aff0 <formatIntUnsigned+0x380>
  22afe0:	48 8d 3d c1 84 01 00 	lea    rdi,[rip+0x184c1]        # 2434a8 <__unnamed_22>
  22afe7:	31 c0                	xor    eax,eax
  22afe9:	89 c6                	mov    esi,eax
        buf[index] = digitToChar(@intCast(u8, digit), uppercase);
  22afeb:	e8 10 06 fe ff       	call   20b600 <panic>
        a /= base;
  22aff0:	48 8b 85 f8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x208]
  22aff7:	31 c9                	xor    ecx,ecx
  22aff9:	89 ca                	mov    edx,ecx
  22affb:	48 8b b5 f0 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x210]
  22b002:	48 f7 f6             	div    rsi
  22b005:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
        if (a == 0) break;
  22b00c:	48 83 bd f0 fe ff ff 	cmp    QWORD PTR [rbp-0x110],0x0
  22b013:	00 
  22b014:	0f 84 07 fd ff ff    	je     22ad21 <formatIntUnsigned+0xb1>
  22b01a:	e9 04 fd ff ff       	jmp    22ad23 <formatIntUnsigned+0xb3>
  22b01f:	48 8d 3d 1a 82 01 00 	lea    rdi,[rip+0x1821a]        # 243240 <__unnamed_7>
  22b026:	31 c0                	xor    eax,eax
  22b028:	89 c6                	mov    esi,eax
        a /= base;
  22b02a:	e8 d1 05 fe ff       	call   20b600 <panic>
  22b02f:	48 8d 3d c2 83 01 00 	lea    rdi,[rip+0x183c2]        # 2433f8 <__unnamed_20>
  22b036:	31 c0                	xor    eax,eax
  22b038:	89 c6                	mov    esi,eax
    const digits_buf = buf[index..];
  22b03a:	e8 c1 05 fe ff       	call   20b600 <panic>
  22b03f:	b8 40 00 00 00       	mov    eax,0x40
  22b044:	89 c1                	mov    ecx,eax
  22b046:	48 8d 95 f8 fe ff ff 	lea    rdx,[rbp-0x108]
  22b04d:	48 8b b5 80 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x180]
  22b054:	48 01 f2             	add    rdx,rsi
  22b057:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  22b05b:	48 29 f1             	sub    rcx,rsi
  22b05e:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  22b062:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  22b066:	48 89 8d d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rcx
  22b06d:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22b071:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
    const padding = if (width > digits_buf.len) (width - digits_buf.len) else 0;
  22b078:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  22b07f:	48 3b 8d d8 fe ff ff 	cmp    rcx,QWORD PTR [rbp-0x128]
  22b086:	0f 87 b6 fc ff ff    	ja     22ad42 <formatIntUnsigned+0xd2>
  22b08c:	e9 da fc ff ff       	jmp    22ad6b <formatIntUnsigned+0xfb>
  22b091:	48 8d 3d 30 81 01 00 	lea    rdi,[rip+0x18130]        # 2431c8 <__unnamed_4>
  22b098:	31 c0                	xor    eax,eax
  22b09a:	89 c6                	mov    esi,eax
  22b09c:	e8 5f 05 fe ff       	call   20b600 <panic>
  22b0a1:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
  22b0a8:	48 89 85 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rax
  22b0af:	e9 c4 fc ff ff       	jmp    22ad78 <formatIntUnsigned+0x108>
  22b0b4:	48 8d 3d 0d 81 01 00 	lea    rdi,[rip+0x1810d]        # 2431c8 <__unnamed_4>
  22b0bb:	31 c0                	xor    eax,eax
  22b0bd:	89 c6                	mov    esi,eax
        var leftover_padding = padding - index;
  22b0bf:	e8 3c 05 fe ff       	call   20b600 <panic>
  22b0c4:	48 8b 85 60 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a0]
  22b0cb:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
        while (true) {
  22b0d2:	e9 f3 fc ff ff       	jmp    22adca <formatIntUnsigned+0x15a>
  22b0d7:	48 8d 3d ea 80 01 00 	lea    rdi,[rip+0x180ea]        # 2431c8 <__unnamed_4>
  22b0de:	31 c0                	xor    eax,eax
  22b0e0:	89 c6                	mov    esi,eax
            leftover_padding -= 1;
  22b0e2:	e8 19 05 fe ff       	call   20b600 <panic>
  22b0e7:	48 8b 85 50 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b0]
  22b0ee:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
            if (leftover_padding == 0) break;
  22b0f5:	48 83 bd b8 fe ff ff 	cmp    QWORD PTR [rbp-0x148],0x0
  22b0fc:	00 
  22b0fd:	0f 84 3f fd ff ff    	je     22ae42 <formatIntUnsigned+0x1d2>
  22b103:	e9 3c fd ff ff       	jmp    22ae44 <formatIntUnsigned+0x1d4>
  22b108:	48 8d 3d e9 82 01 00 	lea    rdi,[rip+0x182e9]        # 2433f8 <__unnamed_20>
  22b10f:	31 c0                	xor    eax,eax
  22b111:	89 c6                	mov    esi,eax
        mem.set(u8, buf[0..index], '0');
  22b113:	e8 e8 04 fe ff       	call   20b600 <panic>
  22b118:	48 8b 85 40 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c0]
  22b11f:	48 83 f8 40          	cmp    rax,0x40
  22b123:	76 10                	jbe    22b135 <formatIntUnsigned+0x4c5>
  22b125:	48 8d 3d cc 82 01 00 	lea    rdi,[rip+0x182cc]        # 2433f8 <__unnamed_20>
  22b12c:	31 c0                	xor    eax,eax
  22b12e:	89 c6                	mov    esi,eax
  22b130:	e8 cb 04 fe ff       	call   20b600 <panic>
  22b135:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  22b139:	be 30 00 00 00       	mov    esi,0x30
  22b13e:	48 8d 85 f8 fe ff ff 	lea    rax,[rbp-0x108]
  22b145:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  22b149:	48 8b 85 40 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c0]
  22b150:	48 83 e8 00          	sub    rax,0x0
  22b154:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  22b158:	e8 43 13 00 00       	call   22c4a0 <set>
  22b15d:	48 8d 95 78 ff ff ff 	lea    rdx,[rbp-0x88]
  22b164:	48 8d 85 f8 fe ff ff 	lea    rax,[rbp-0x108]
        return output(context, buf);
  22b16b:	48 8b 7d 10          	mov    rdi,QWORD PTR [rbp+0x10]
  22b16f:	48 8b b5 38 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc8]
  22b176:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  22b17d:	48 c7 45 80 40 00 00 	mov    QWORD PTR [rbp-0x80],0x40
  22b184:	00 
  22b185:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
  22b18c:	48 89 bd e8 fd ff ff 	mov    QWORD PTR [rbp-0x218],rdi
  22b193:	48 89 c7             	mov    rdi,rax
  22b196:	48 8b 8d e8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x218]
  22b19d:	ff d1                	call   rcx
  22b19f:	66 83 f8 00          	cmp    ax,0x0
  22b1a3:	66 89 85 3e fe ff ff 	mov    WORD PTR [rbp-0x1c2],ax
  22b1aa:	0f 85 b6 fc ff ff    	jne    22ae66 <formatIntUnsigned+0x1f6>
  22b1b0:	e9 bf fc ff ff       	jmp    22ae74 <formatIntUnsigned+0x204>
  22b1b5:	48 8d 3d 0c 80 01 00 	lea    rdi,[rip+0x1800c]        # 2431c8 <__unnamed_4>
  22b1bc:	31 c0                	xor    eax,eax
  22b1be:	89 c6                	mov    esi,eax
        const padded_buf = buf[index - padding ..];
  22b1c0:	e8 3b 04 fe ff       	call   20b600 <panic>
  22b1c5:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  22b1cc:	48 83 f8 40          	cmp    rax,0x40
  22b1d0:	76 10                	jbe    22b1e2 <formatIntUnsigned+0x572>
  22b1d2:	48 8d 3d 1f 82 01 00 	lea    rdi,[rip+0x1821f]        # 2433f8 <__unnamed_20>
  22b1d9:	31 c0                	xor    eax,eax
  22b1db:	89 c6                	mov    esi,eax
  22b1dd:	e8 1e 04 fe ff       	call   20b600 <panic>
  22b1e2:	31 c0                	xor    eax,eax
  22b1e4:	89 c1                	mov    ecx,eax
  22b1e6:	b8 40 00 00 00       	mov    eax,0x40
  22b1eb:	89 c2                	mov    edx,eax
  22b1ed:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  22b1f4:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
  22b1fb:	48 01 fe             	add    rsi,rdi
  22b1fe:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
  22b205:	48 29 fa             	sub    rdx,rdi
  22b208:	48 89 95 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdx
  22b20f:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  22b216:	48 89 95 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rdx
  22b21d:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  22b224:	48 89 95 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rdx
        mem.set(u8, padded_buf[0..padding], '0');
  22b22b:	48 8b 95 c8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x138]
  22b232:	48 8b b5 b0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x150]
  22b239:	48 39 d1             	cmp    rcx,rdx
  22b23c:	48 89 b5 e0 fd ff ff 	mov    QWORD PTR [rbp-0x220],rsi
  22b243:	48 89 95 d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rdx
  22b24a:	76 10                	jbe    22b25c <formatIntUnsigned+0x5ec>
  22b24c:	48 8d 3d a5 81 01 00 	lea    rdi,[rip+0x181a5]        # 2433f8 <__unnamed_20>
  22b253:	31 c0                	xor    eax,eax
  22b255:	89 c6                	mov    esi,eax
  22b257:	e8 a4 03 fe ff       	call   20b600 <panic>
  22b25c:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
  22b263:	48 8b 8d e0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x220]
  22b26a:	48 39 c8             	cmp    rax,rcx
  22b26d:	76 10                	jbe    22b27f <formatIntUnsigned+0x60f>
  22b26f:	48 8d 3d 82 81 01 00 	lea    rdi,[rip+0x18182]        # 2433f8 <__unnamed_20>
  22b276:	31 c0                	xor    eax,eax
  22b278:	89 c6                	mov    esi,eax
  22b27a:	e8 81 03 fe ff       	call   20b600 <panic>
  22b27f:	48 8d bd 58 ff ff ff 	lea    rdi,[rbp-0xa8]
  22b286:	be 30 00 00 00       	mov    esi,0x30
  22b28b:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
  22b292:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  22b299:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
  22b2a0:	48 83 e8 00          	sub    rax,0x0
  22b2a4:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  22b2ab:	e8 f0 11 00 00       	call   22c4a0 <set>
  22b2b0:	48 8d 95 a8 fe ff ff 	lea    rdx,[rbp-0x158]
        return output(context, padded_buf);
  22b2b7:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
  22b2bb:	48 8b b5 38 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc8]
  22b2c2:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
  22b2c9:	ff d0                	call   rax
  22b2cb:	66 83 f8 00          	cmp    ax,0x0
  22b2cf:	66 89 85 2c fe ff ff 	mov    WORD PTR [rbp-0x1d4],ax
  22b2d6:	0f 85 d6 fb ff ff    	jne    22aeb2 <formatIntUnsigned+0x242>
  22b2dc:	e9 df fb ff ff       	jmp    22aec0 <formatIntUnsigned+0x250>
  22b2e1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22b2e8:	0f 1f 84 00 00 00 00 
  22b2ef:	00 

000000000022b2f0 <charToDigit>:
    }

    return x;
}

pub fn charToDigit(c: u8, radix: u8) (error{InvalidCharacter}!u8) {
  22b2f0:	55                   	push   rbp
  22b2f1:	48 89 e5             	mov    rbp,rsp
  22b2f4:	48 83 ec 30          	sub    rsp,0x30
  22b2f8:	88 c8                	mov    al,cl
  22b2fa:	41 88 d0             	mov    r8b,dl
  22b2fd:	49 89 f9             	mov    r9,rdi
  22b300:	44 88 45 f7          	mov    BYTE PTR [rbp-0x9],r8b
  22b304:	88 45 f6             	mov    BYTE PTR [rbp-0xa],al
    const value = switch (c) {
  22b307:	8a 45 f7             	mov    al,BYTE PTR [rbp-0x9]
        '0'...'9' => c - '0',
  22b30a:	3c 30                	cmp    al,0x30
  22b30c:	41 0f 93 c0          	setae  r8b
  22b310:	3c 39                	cmp    al,0x39
  22b312:	41 0f 96 c2          	setbe  r10b
  22b316:	45 20 d0             	and    r8b,r10b
  22b319:	41 f6 c0 01          	test   r8b,0x1
  22b31d:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
  22b321:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  22b325:	4c 89 4d d8          	mov    QWORD PTR [rbp-0x28],r9
  22b329:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
  22b32c:	75 02                	jne    22b330 <charToDigit+0x40>
  22b32e:	eb 19                	jmp    22b349 <charToDigit+0x59>
  22b330:	8a 45 f7             	mov    al,BYTE PTR [rbp-0x9]
  22b333:	2c 30                	sub    al,0x30
  22b335:	0f 92 c1             	setb   cl
  22b338:	f6 c1 01             	test   cl,0x1
  22b33b:	88 45 d6             	mov    BYTE PTR [rbp-0x2a],al
  22b33e:	0f 85 d2 00 00 00    	jne    22b416 <charToDigit+0x126>
  22b344:	e9 dd 00 00 00       	jmp    22b426 <charToDigit+0x136>
        'A'...'Z' => c - 'A' + 10,
  22b349:	8a 45 d7             	mov    al,BYTE PTR [rbp-0x29]
  22b34c:	3c 41                	cmp    al,0x41
  22b34e:	0f 93 c1             	setae  cl
  22b351:	3c 5a                	cmp    al,0x5a
  22b353:	0f 96 c2             	setbe  dl
  22b356:	20 d1                	and    cl,dl
  22b358:	f6 c1 01             	test   cl,0x1
  22b35b:	75 02                	jne    22b35f <charToDigit+0x6f>
  22b35d:	eb 19                	jmp    22b378 <charToDigit+0x88>
  22b35f:	8a 45 f7             	mov    al,BYTE PTR [rbp-0x9]
  22b362:	2c 41                	sub    al,0x41
  22b364:	0f 92 c1             	setb   cl
  22b367:	f6 c1 01             	test   cl,0x1
  22b36a:	88 45 d5             	mov    BYTE PTR [rbp-0x2b],al
  22b36d:	0f 85 bb 00 00 00    	jne    22b42e <charToDigit+0x13e>
  22b373:	e9 c6 00 00 00       	jmp    22b43e <charToDigit+0x14e>
        'a'...'z' => c - 'a' + 10,
  22b378:	8a 45 d7             	mov    al,BYTE PTR [rbp-0x29]
  22b37b:	3c 61                	cmp    al,0x61
  22b37d:	0f 93 c1             	setae  cl
  22b380:	3c 7a                	cmp    al,0x7a
  22b382:	0f 96 c2             	setbe  dl
  22b385:	20 d1                	and    cl,dl
  22b387:	f6 c1 01             	test   cl,0x1
  22b38a:	75 02                	jne    22b38e <charToDigit+0x9e>
  22b38c:	eb 19                	jmp    22b3a7 <charToDigit+0xb7>
  22b38e:	8a 45 f7             	mov    al,BYTE PTR [rbp-0x9]
  22b391:	2c 61                	sub    al,0x61
  22b393:	0f 92 c1             	setb   cl
  22b396:	f6 c1 01             	test   cl,0x1
  22b399:	88 45 d4             	mov    BYTE PTR [rbp-0x2c],al
  22b39c:	0f 85 c9 00 00 00    	jne    22b46b <charToDigit+0x17b>
  22b3a2:	e9 d4 00 00 00       	jmp    22b47b <charToDigit+0x18b>
    const value = switch (c) {
  22b3a7:	eb 00                	jmp    22b3a9 <charToDigit+0xb9>
        else => return error.InvalidCharacter,
  22b3a9:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  22b3ad:	e8 de 08 fe ff       	call   20bc90 <__zig_return_error>
  22b3b2:	8b 05 70 f5 fd ff    	mov    eax,DWORD PTR [rip+0xfffffffffffdf570]        # 20a928 <__unnamed_223>
  22b3b8:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  22b3bc:	89 07                	mov    DWORD PTR [rdi],eax
  22b3be:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  22b3c2:	48 83 c4 30          	add    rsp,0x30
  22b3c6:	5d                   	pop    rbp
  22b3c7:	c3                   	ret    
    const value = switch (c) {
  22b3c8:	8a 45 d3             	mov    al,BYTE PTR [rbp-0x2d]
  22b3cb:	88 45 f5             	mov    BYTE PTR [rbp-0xb],al
    };

    if (value >= radix) return error.InvalidCharacter;
  22b3ce:	8a 45 f5             	mov    al,BYTE PTR [rbp-0xb]
  22b3d1:	3a 45 f6             	cmp    al,BYTE PTR [rbp-0xa]
  22b3d4:	72 1f                	jb     22b3f5 <charToDigit+0x105>
  22b3d6:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  22b3da:	e8 b1 08 fe ff       	call   20bc90 <__zig_return_error>
  22b3df:	8b 05 43 f5 fd ff    	mov    eax,DWORD PTR [rip+0xfffffffffffdf543]        # 20a928 <__unnamed_223>
  22b3e5:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  22b3e9:	89 07                	mov    DWORD PTR [rdi],eax
  22b3eb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  22b3ef:	48 83 c4 30          	add    rsp,0x30
  22b3f3:	5d                   	pop    rbp
  22b3f4:	c3                   	ret    
  22b3f5:	eb 00                	jmp    22b3f7 <charToDigit+0x107>

    return value;
  22b3f7:	8a 45 f5             	mov    al,BYTE PTR [rbp-0xb]
  22b3fa:	66 c7 45 f8 00 00    	mov    WORD PTR [rbp-0x8],0x0
  22b400:	88 45 fa             	mov    BYTE PTR [rbp-0x6],al
  22b403:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
  22b406:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  22b40a:	89 0a                	mov    DWORD PTR [rdx],ecx
  22b40c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  22b410:	48 83 c4 30          	add    rsp,0x30
  22b414:	5d                   	pop    rbp
  22b415:	c3                   	ret    
  22b416:	48 8d 3d ab 7d 01 00 	lea    rdi,[rip+0x17dab]        # 2431c8 <__unnamed_4>
  22b41d:	31 c0                	xor    eax,eax
  22b41f:	89 c6                	mov    esi,eax
        '0'...'9' => c - '0',
  22b421:	e8 da 01 fe ff       	call   20b600 <panic>
    const value = switch (c) {
  22b426:	8a 45 d6             	mov    al,BYTE PTR [rbp-0x2a]
  22b429:	88 45 d3             	mov    BYTE PTR [rbp-0x2d],al
  22b42c:	eb 9a                	jmp    22b3c8 <charToDigit+0xd8>
  22b42e:	48 8d 3d 93 7d 01 00 	lea    rdi,[rip+0x17d93]        # 2431c8 <__unnamed_4>
  22b435:	31 c0                	xor    eax,eax
  22b437:	89 c6                	mov    esi,eax
        'A'...'Z' => c - 'A' + 10,
  22b439:	e8 c2 01 fe ff       	call   20b600 <panic>
  22b43e:	8a 45 d5             	mov    al,BYTE PTR [rbp-0x2b]
  22b441:	04 0a                	add    al,0xa
  22b443:	0f 92 c1             	setb   cl
  22b446:	f6 c1 01             	test   cl,0x1
  22b449:	88 45 d2             	mov    BYTE PTR [rbp-0x2e],al
  22b44c:	75 02                	jne    22b450 <charToDigit+0x160>
  22b44e:	eb 10                	jmp    22b460 <charToDigit+0x170>
  22b450:	48 8d 3d 71 7d 01 00 	lea    rdi,[rip+0x17d71]        # 2431c8 <__unnamed_4>
  22b457:	31 c0                	xor    eax,eax
  22b459:	89 c6                	mov    esi,eax
  22b45b:	e8 a0 01 fe ff       	call   20b600 <panic>
    const value = switch (c) {
  22b460:	8a 45 d2             	mov    al,BYTE PTR [rbp-0x2e]
  22b463:	88 45 d3             	mov    BYTE PTR [rbp-0x2d],al
  22b466:	e9 5d ff ff ff       	jmp    22b3c8 <charToDigit+0xd8>
  22b46b:	48 8d 3d 56 7d 01 00 	lea    rdi,[rip+0x17d56]        # 2431c8 <__unnamed_4>
  22b472:	31 c0                	xor    eax,eax
  22b474:	89 c6                	mov    esi,eax
        'a'...'z' => c - 'a' + 10,
  22b476:	e8 85 01 fe ff       	call   20b600 <panic>
  22b47b:	8a 45 d4             	mov    al,BYTE PTR [rbp-0x2c]
  22b47e:	04 0a                	add    al,0xa
  22b480:	0f 92 c1             	setb   cl
  22b483:	f6 c1 01             	test   cl,0x1
  22b486:	88 45 d1             	mov    BYTE PTR [rbp-0x2f],al
  22b489:	75 02                	jne    22b48d <charToDigit+0x19d>
  22b48b:	eb 10                	jmp    22b49d <charToDigit+0x1ad>
  22b48d:	48 8d 3d 34 7d 01 00 	lea    rdi,[rip+0x17d34]        # 2431c8 <__unnamed_4>
  22b494:	31 c0                	xor    eax,eax
  22b496:	89 c6                	mov    esi,eax
  22b498:	e8 63 01 fe ff       	call   20b600 <panic>
    const value = switch (c) {
  22b49d:	8a 45 d1             	mov    al,BYTE PTR [rbp-0x2f]
  22b4a0:	88 45 d3             	mov    BYTE PTR [rbp-0x2d],al
  22b4a3:	e9 20 ff ff ff       	jmp    22b3c8 <charToDigit+0xd8>
  22b4a8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  22b4af:	00 

000000000022b4b0 <signbit>:
const std = @import("../index.zig");
const math = std.math;
const assert = std.debug.assert;

pub fn signbit(x: var) bool {
  22b4b0:	55                   	push   rbp
  22b4b1:	48 89 e5             	mov    rbp,rsp
  22b4b4:	48 83 ec 10          	sub    rsp,0x10
  22b4b8:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    const T = @typeOf(x);
    return switch (T) {
        f16 => signbit16(x),
        f32 => signbit32(x),
        f64 => signbit64(x),
  22b4bd:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  22b4c2:	e8 59 10 00 00       	call   22c520 <signbit64>
  22b4c7:	88 c1                	mov    cl,al
    return switch (T) {
  22b4c9:	88 4d f7             	mov    BYTE PTR [rbp-0x9],cl
  22b4cc:	48 83 c4 10          	add    rsp,0x10
  22b4d0:	5d                   	pop    rbp
  22b4d1:	c3                   	ret    
  22b4d2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22b4d9:	1f 84 00 00 00 00 00 

000000000022b4e0 <isNan>:
const std = @import("../index.zig");
const math = std.math;
const assert = std.debug.assert;

pub fn isNan(x: var) bool {
  22b4e0:	55                   	push   rbp
  22b4e1:	48 89 e5             	mov    rbp,rsp
  22b4e4:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
        f32 => {
            const bits = @bitCast(u32, x);
            return bits & 0x7FFFFFFF > 0x7F800000;
        },
        f64 => {
            const bits = @bitCast(u64, x);
  22b4e9:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  22b4ee:	c5 fb 11 45 f0       	vmovsd QWORD PTR [rbp-0x10],xmm0
            return (bits & (@maxValue(u64) >> 1)) > (u64(0x7FF) << 52);
  22b4f3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22b4f7:	b1 3f                	mov    cl,0x3f
  22b4f9:	88 ca                	mov    dl,cl
  22b4fb:	c4 e2 e8 f5 c0       	bzhi   rax,rax,rdx
  22b500:	48 ba 00 00 00 00 00 	movabs rdx,0x7ff0000000000000
  22b507:	00 f0 7f 
  22b50a:	48 29 d0             	sub    rax,rdx
  22b50d:	0f 97 c1             	seta   cl
  22b510:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  22b514:	88 c8                	mov    al,cl
  22b516:	5d                   	pop    rbp
  22b517:	c3                   	ret    
  22b518:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  22b51f:	00 

000000000022b520 <isPositiveInf>:
            @compileError("isInf not implemented for " ++ @typeName(T));
        },
    }
}

pub fn isPositiveInf(x: var) bool {
  22b520:	55                   	push   rbp
  22b521:	48 89 e5             	mov    rbp,rsp
  22b524:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
        },
        f32 => {
            return @bitCast(u32, x) == 0x7F800000;
        },
        f64 => {
            return @bitCast(u64, x) == 0x7FF << 52;
  22b529:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  22b52d:	48 b9 00 00 00 00 00 	movabs rcx,0x7ff0000000000000
  22b534:	00 f0 7f 
  22b537:	48 29 c8             	sub    rax,rcx
  22b53a:	0f 94 c2             	sete   dl
  22b53d:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  22b541:	88 d0                	mov    al,dl
  22b543:	5d                   	pop    rbp
  22b544:	c3                   	ret    
  22b545:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22b54c:	00 00 00 00 

000000000022b550 <errol3>:
        }
    }
}

/// Corrected Errol3 double to ASCII conversion.
pub fn errol3(value: f64, buffer: []u8) FloatDecimal {
  22b550:	55                   	push   rbp
  22b551:	48 89 e5             	mov    rbp,rsp
  22b554:	48 81 ec d0 00 00 00 	sub    rsp,0xd0
  22b55b:	48 89 f8             	mov    rax,rdi
  22b55e:	c5 fb 11 45 b8       	vmovsd QWORD PTR [rbp-0x48],xmm0
    const bits = @bitCast(u64, value);
  22b563:	c5 fb 10 45 b8       	vmovsd xmm0,QWORD PTR [rbp-0x48]
  22b568:	c4 e1 f9 7e c1       	vmovq  rcx,xmm0
  22b56d:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
    const i = tableLowerBound(bits);
  22b571:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  22b575:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
  22b57c:	48 89 cf             	mov    rdi,rcx
  22b57f:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  22b586:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
  22b58d:	e8 be 0f 00 00       	call   22c550 <tableLowerBound>
  22b592:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
    if (i < enum3.len and enum3[i] == bits) {
  22b596:	48 81 7d a8 b0 01 00 	cmp    QWORD PTR [rbp-0x58],0x1b0
  22b59d:	00 
  22b59e:	0f 92 c2             	setb   dl
  22b5a1:	f6 c2 01             	test   dl,0x1
  22b5a4:	88 95 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],dl
  22b5aa:	75 02                	jne    22b5ae <errol3+0x5e>
  22b5ac:	eb 15                	jmp    22b5c3 <errol3+0x73>
  22b5ae:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  22b5b2:	48 3d b0 01 00 00    	cmp    rax,0x1b0
  22b5b8:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  22b5bf:	72 7c                	jb     22b63d <errol3+0xed>
  22b5c1:	eb 6a                	jmp    22b62d <errol3+0xdd>
  22b5c3:	8a 85 67 ff ff ff    	mov    al,BYTE PTR [rbp-0x99]
  22b5c9:	a8 01                	test   al,0x1
  22b5cb:	75 02                	jne    22b5cf <errol3+0x7f>
  22b5cd:	eb 19                	jmp    22b5e8 <errol3+0x98>
        const data = enum3_data[i];
  22b5cf:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  22b5d3:	48 3d b0 01 00 00    	cmp    rax,0x1b0
  22b5d9:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
  22b5e0:	0f 82 8b 00 00 00    	jb     22b671 <errol3+0x121>
  22b5e6:	eb 79                	jmp    22b661 <errol3+0x111>
    if (i < enum3.len and enum3[i] == bits) {
  22b5e8:	eb 00                	jmp    22b5ea <errol3+0x9a>
  22b5ea:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
            .digits = digits,
            .exp = data.exp,
        };
    }

    return errol3u(value, buffer);
  22b5ee:	c5 fb 10 45 b8       	vmovsd xmm0,QWORD PTR [rbp-0x48]
  22b5f3:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
  22b5fa:	e8 91 10 00 00       	call   22c690 <errol3u>
  22b5ff:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
  22b603:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  22b60a:	48 89 37             	mov    QWORD PTR [rdi],rsi
  22b60d:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  22b611:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  22b615:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  22b619:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  22b61d:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  22b624:	48 81 c4 d0 00 00 00 	add    rsp,0xd0
  22b62b:	5d                   	pop    rbp
  22b62c:	c3                   	ret    
  22b62d:	48 8d 3d c4 7d 01 00 	lea    rdi,[rip+0x17dc4]        # 2433f8 <__unnamed_20>
  22b634:	31 c0                	xor    eax,eax
  22b636:	89 c6                	mov    esi,eax
    if (i < enum3.len and enum3[i] == bits) {
  22b638:	e8 c3 ff fd ff       	call   20b600 <panic>
  22b63d:	48 8d 05 f4 67 fd ff 	lea    rax,[rip+0xfffffffffffd67f4]        # 201e38 <enum3.12>
  22b644:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  22b64b:	48 8b 04 c8          	mov    rax,QWORD PTR [rax+rcx*8]
  22b64f:	48 3b 45 b0          	cmp    rax,QWORD PTR [rbp-0x50]
  22b653:	0f 94 c2             	sete   dl
  22b656:	88 95 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],dl
  22b65c:	e9 62 ff ff ff       	jmp    22b5c3 <errol3+0x73>
  22b661:	48 8d 3d 90 7d 01 00 	lea    rdi,[rip+0x17d90]        # 2433f8 <__unnamed_20>
  22b668:	31 c0                	xor    eax,eax
  22b66a:	89 c6                	mov    esi,eax
        const data = enum3_data[i];
  22b66c:	e8 8f ff fd ff       	call   20b600 <panic>
  22b671:	48 8d 05 68 52 01 00 	lea    rax,[rip+0x15268]        # 2408e0 <enum3_data.13>
  22b678:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
  22b67f:	48 6b d1 18          	imul   rdx,rcx,0x18
  22b683:	48 01 d0             	add    rax,rdx
  22b686:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  22b689:	48 89 55 90          	mov    QWORD PTR [rbp-0x70],rdx
  22b68d:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
  22b691:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  22b695:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  22b699:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        const digits = buffer[1 .. data.str.len + 1];
  22b69d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  22b6a1:	48 83 c0 01          	add    rax,0x1
  22b6a5:	40 0f 92 c6          	setb   sil
  22b6a9:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  22b6b0:	40 88 b5 47 ff ff ff 	mov    BYTE PTR [rbp-0xb9],sil
  22b6b7:	72 02                	jb     22b6bb <errol3+0x16b>
  22b6b9:	eb 10                	jmp    22b6cb <errol3+0x17b>
  22b6bb:	48 8d 3d 06 7b 01 00 	lea    rdi,[rip+0x17b06]        # 2431c8 <__unnamed_4>
  22b6c2:	31 c0                	xor    eax,eax
  22b6c4:	89 c6                	mov    esi,eax
  22b6c6:	e8 35 ff fd ff       	call   20b600 <panic>
  22b6cb:	b8 01 00 00 00       	mov    eax,0x1
  22b6d0:	89 c1                	mov    ecx,eax
  22b6d2:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  22b6d9:	48 8b 72 08          	mov    rsi,QWORD PTR [rdx+0x8]
  22b6dd:	48 8b bd 48 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb8]
  22b6e4:	48 39 f9             	cmp    rcx,rdi
  22b6e7:	48 89 b5 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rsi
  22b6ee:	76 10                	jbe    22b700 <errol3+0x1b0>
  22b6f0:	48 8d 3d 01 7d 01 00 	lea    rdi,[rip+0x17d01]        # 2433f8 <__unnamed_20>
  22b6f7:	31 c0                	xor    eax,eax
  22b6f9:	89 c6                	mov    esi,eax
  22b6fb:	e8 00 ff fd ff       	call   20b600 <panic>
  22b700:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  22b707:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
  22b70e:	48 39 c8             	cmp    rax,rcx
  22b711:	76 10                	jbe    22b723 <errol3+0x1d3>
  22b713:	48 8d 3d de 7c 01 00 	lea    rdi,[rip+0x17cde]        # 2433f8 <__unnamed_20>
  22b71a:	31 c0                	xor    eax,eax
  22b71c:	89 c6                	mov    esi,eax
  22b71e:	e8 dd fe fd ff       	call   20b600 <panic>
  22b723:	48 8d 7d 80          	lea    rdi,[rbp-0x80]
  22b727:	48 8d 75 90          	lea    rsi,[rbp-0x70]
  22b72b:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  22b732:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22b735:	48 83 c1 01          	add    rcx,0x1
  22b739:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  22b73d:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
  22b744:	48 83 e9 01          	sub    rcx,0x1
  22b748:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  22b74c:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  22b750:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
  22b754:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  22b758:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
        mem.copy(u8, digits, data.str);
  22b75c:	e8 cf 95 ff ff       	call   224d30 <copy>
            .exp = data.exp,
  22b761:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
        return FloatDecimal{
  22b764:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  22b768:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  22b76c:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  22b770:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  22b774:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
  22b777:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  22b77b:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  22b782:	48 89 01             	mov    QWORD PTR [rcx],rax
  22b785:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  22b789:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  22b78d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22b791:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  22b795:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  22b79c:	48 81 c4 d0 00 00 00 	add    rsp,0xd0
  22b7a3:	5d                   	pop    rbp
  22b7a4:	c3                   	ret    
  22b7a5:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22b7ac:	00 00 00 00 

000000000022b7b0 <roundToPrecision>:
pub fn roundToPrecision(float_decimal: *FloatDecimal, precision: usize, mode: RoundMode) void {
  22b7b0:	55                   	push   rbp
  22b7b1:	48 89 e5             	mov    rbp,rsp
  22b7b4:	48 81 ec 30 01 00 00 	sub    rsp,0x130
  22b7bb:	88 d0                	mov    al,dl
  22b7bd:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  22b7c1:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  22b7c5:	24 01                	and    al,0x1
  22b7c7:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
    var round_digit: usize = 0;
  22b7ca:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
  22b7d1:	00 
    switch (mode) {
  22b7d2:	8a 45 df             	mov    al,BYTE PTR [rbp-0x21]
  22b7d5:	84 c0                	test   al,al
  22b7d7:	88 45 b6             	mov    BYTE PTR [rbp-0x4a],al
  22b7da:	75 7f                	jne    22b85b <roundToPrecision+0xab>
  22b7dc:	eb 00                	jmp    22b7de <roundToPrecision+0x2e>
  22b7de:	8a 45 b6             	mov    al,BYTE PTR [rbp-0x4a]
  22b7e1:	f6 d0                	not    al
  22b7e3:	a8 01                	test   al,0x1
  22b7e5:	0f 84 90 00 00 00    	je     22b87b <roundToPrecision+0xcb>
  22b7eb:	eb 00                	jmp    22b7ed <roundToPrecision+0x3d>
            if (float_decimal.exp >= 0) {
  22b7ed:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22b7f1:	83 78 10 00          	cmp    DWORD PTR [rax+0x10],0x0
  22b7f5:	7c 24                	jl     22b81b <roundToPrecision+0x6b>
                round_digit = precision + @intCast(usize, float_decimal.exp);
  22b7f7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  22b7fb:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22b7ff:	48 63 49 10          	movsxd rcx,DWORD PTR [rcx+0x10]
  22b803:	48 01 c8             	add    rax,rcx
  22b806:	0f 92 c2             	setb   dl
  22b809:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  22b80d:	88 55 a7             	mov    BYTE PTR [rbp-0x59],dl
  22b810:	0f 82 4b 01 00 00    	jb     22b961 <roundToPrecision+0x1b1>
  22b816:	e9 56 01 00 00       	jmp    22b971 <roundToPrecision+0x1c1>
  22b81b:	31 c0                	xor    eax,eax
                const min_exp_required = @intCast(usize, -float_decimal.exp);
  22b81d:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22b821:	2b 41 10             	sub    eax,DWORD PTR [rcx+0x10]
  22b824:	0f 90 c2             	seto   dl
  22b827:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
  22b82a:	88 55 9f             	mov    BYTE PTR [rbp-0x61],dl
  22b82d:	0f 80 4b 01 00 00    	jo     22b97e <roundToPrecision+0x1ce>
  22b833:	e9 56 01 00 00       	jmp    22b98e <roundToPrecision+0x1de>
                    round_digit = precision - min_exp_required;
  22b838:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  22b83c:	48 2b 45 c8          	sub    rax,QWORD PTR [rbp-0x38]
  22b840:	0f 92 c1             	setb   cl
  22b843:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  22b847:	88 4d 8f             	mov    BYTE PTR [rbp-0x71],cl
  22b84a:	0f 82 5b 01 00 00    	jb     22b9ab <roundToPrecision+0x1fb>
  22b850:	e9 66 01 00 00       	jmp    22b9bb <roundToPrecision+0x20b>
                if (precision > min_exp_required) {
  22b855:	eb 00                	jmp    22b857 <roundToPrecision+0xa7>
            if (float_decimal.exp >= 0) {
  22b857:	eb 00                	jmp    22b859 <roundToPrecision+0xa9>
    switch (mode) {
  22b859:	eb 30                	jmp    22b88b <roundToPrecision+0xdb>
            round_digit = 1 + precision;
  22b85b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  22b85f:	48 83 c0 01          	add    rax,0x1
  22b863:	0f 92 c1             	setb   cl
  22b866:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  22b86a:	88 8d 7f ff ff ff    	mov    BYTE PTR [rbp-0x81],cl
  22b870:	0f 82 52 01 00 00    	jb     22b9c8 <roundToPrecision+0x218>
  22b876:	e9 5d 01 00 00       	jmp    22b9d8 <roundToPrecision+0x228>
  22b87b:	48 8d 3d 8e 7a 01 00 	lea    rdi,[rip+0x17a8e]        # 243310 <__unnamed_13>
  22b882:	31 c0                	xor    eax,eax
  22b884:	89 c6                	mov    esi,eax
    switch (mode) {
  22b886:	e8 75 fd fd ff       	call   20b600 <panic>
    if (round_digit < float_decimal.digits.len and float_decimal.digits[round_digit] - '0' >= 5) {
  22b88b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  22b88f:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22b893:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22b897:	0f 92 c2             	setb   dl
  22b89a:	f6 c2 01             	test   dl,0x1
  22b89d:	88 95 7e ff ff ff    	mov    BYTE PTR [rbp-0x82],dl
  22b8a3:	75 02                	jne    22b8a7 <roundToPrecision+0xf7>
  22b8a5:	eb 25                	jmp    22b8cc <roundToPrecision+0x11c>
  22b8a7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22b8ab:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  22b8af:	48 3b 48 08          	cmp    rcx,QWORD PTR [rax+0x8]
  22b8b3:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  22b8ba:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
  22b8c1:	0f 82 2e 01 00 00    	jb     22b9f5 <roundToPrecision+0x245>
  22b8c7:	e9 19 01 00 00       	jmp    22b9e5 <roundToPrecision+0x235>
  22b8cc:	8a 85 7e ff ff ff    	mov    al,BYTE PTR [rbp-0x82]
  22b8d2:	a8 01                	test   al,0x1
  22b8d4:	75 02                	jne    22b8d8 <roundToPrecision+0x128>
  22b8d6:	eb 7e                	jmp    22b956 <roundToPrecision+0x1a6>
  22b8d8:	bf 01 00 00 00       	mov    edi,0x1
        assert(round_digit >= 0);
  22b8dd:	e8 1e f7 fd ff       	call   20b000 <assert>
        var i = round_digit;
  22b8e2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  22b8e6:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
        while (true) {
  22b8ea:	eb 00                	jmp    22b8ec <roundToPrecision+0x13c>
            if (i == 0) {
  22b8ec:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
  22b8f1:	75 33                	jne    22b926 <roundToPrecision+0x176>
                float_decimal.exp += 1;
  22b8f3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22b8f7:	48 89 c1             	mov    rcx,rax
  22b8fa:	48 83 c1 10          	add    rcx,0x10
  22b8fe:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
  22b901:	ff c2                	inc    edx
  22b903:	40 0f 90 c6          	seto   sil
  22b907:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
  22b90e:	89 95 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],edx
  22b914:	40 88 b5 5b ff ff ff 	mov    BYTE PTR [rbp-0xa5],sil
  22b91b:	0f 80 26 01 00 00    	jo     22ba47 <roundToPrecision+0x297>
  22b921:	e9 31 01 00 00       	jmp    22ba57 <roundToPrecision+0x2a7>
            if (i == 0) {
  22b926:	eb 00                	jmp    22b928 <roundToPrecision+0x178>
            i -= 1;
  22b928:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  22b92c:	48 83 e8 01          	sub    rax,0x1
  22b930:	0f 92 c1             	setb   cl
  22b933:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
  22b93a:	88 8d 4f ff ff ff    	mov    BYTE PTR [rbp-0xb1],cl
  22b940:	0f 82 55 02 00 00    	jb     22bb9b <roundToPrecision+0x3eb>
  22b946:	e9 60 02 00 00       	jmp    22bbab <roundToPrecision+0x3fb>
                return;
  22b94b:	48 81 c4 30 01 00 00 	add    rsp,0x130
  22b952:	5d                   	pop    rbp
  22b953:	c3                   	ret    
        while (true) {
  22b954:	eb 94                	jmp    22b8ea <roundToPrecision+0x13a>
    if (round_digit < float_decimal.digits.len and float_decimal.digits[round_digit] - '0' >= 5) {
  22b956:	eb 00                	jmp    22b958 <roundToPrecision+0x1a8>
pub fn roundToPrecision(float_decimal: *FloatDecimal, precision: usize, mode: RoundMode) void {
  22b958:	48 81 c4 30 01 00 00 	add    rsp,0x130
  22b95f:	5d                   	pop    rbp
  22b960:	c3                   	ret    
  22b961:	48 8d 3d 60 78 01 00 	lea    rdi,[rip+0x17860]        # 2431c8 <__unnamed_4>
  22b968:	31 c0                	xor    eax,eax
  22b96a:	89 c6                	mov    esi,eax
                round_digit = precision + @intCast(usize, float_decimal.exp);
  22b96c:	e8 8f fc fd ff       	call   20b600 <panic>
  22b971:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  22b975:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
            if (float_decimal.exp >= 0) {
  22b979:	e9 db fe ff ff       	jmp    22b859 <roundToPrecision+0xa9>
  22b97e:	48 8d 3d 43 78 01 00 	lea    rdi,[rip+0x17843]        # 2431c8 <__unnamed_4>
  22b985:	31 c0                	xor    eax,eax
  22b987:	89 c6                	mov    esi,eax
                const min_exp_required = @intCast(usize, -float_decimal.exp);
  22b989:	e8 72 fc fd ff       	call   20b600 <panic>
  22b98e:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
  22b991:	48 63 c8             	movsxd rcx,eax
  22b994:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
                if (precision > min_exp_required) {
  22b998:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  22b99c:	48 3b 4d c8          	cmp    rcx,QWORD PTR [rbp-0x38]
  22b9a0:	0f 87 92 fe ff ff    	ja     22b838 <roundToPrecision+0x88>
  22b9a6:	e9 aa fe ff ff       	jmp    22b855 <roundToPrecision+0xa5>
  22b9ab:	48 8d 3d 16 78 01 00 	lea    rdi,[rip+0x17816]        # 2431c8 <__unnamed_4>
  22b9b2:	31 c0                	xor    eax,eax
  22b9b4:	89 c6                	mov    esi,eax
                    round_digit = precision - min_exp_required;
  22b9b6:	e8 45 fc fd ff       	call   20b600 <panic>
  22b9bb:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  22b9bf:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
                if (precision > min_exp_required) {
  22b9c3:	e9 8f fe ff ff       	jmp    22b857 <roundToPrecision+0xa7>
  22b9c8:	48 8d 3d f9 77 01 00 	lea    rdi,[rip+0x177f9]        # 2431c8 <__unnamed_4>
  22b9cf:	31 c0                	xor    eax,eax
  22b9d1:	89 c6                	mov    esi,eax
            round_digit = 1 + precision;
  22b9d3:	e8 28 fc fd ff       	call   20b600 <panic>
  22b9d8:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  22b9dc:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
    switch (mode) {
  22b9e0:	e9 a6 fe ff ff       	jmp    22b88b <roundToPrecision+0xdb>
  22b9e5:	48 8d 3d 0c 7a 01 00 	lea    rdi,[rip+0x17a0c]        # 2433f8 <__unnamed_20>
  22b9ec:	31 c0                	xor    eax,eax
  22b9ee:	89 c6                	mov    esi,eax
    if (round_digit < float_decimal.digits.len and float_decimal.digits[round_digit] - '0' >= 5) {
  22b9f0:	e8 0b fc fd ff       	call   20b600 <panic>
  22b9f5:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  22b9fc:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22b9ff:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  22ba06:	40 8a 34 11          	mov    sil,BYTE PTR [rcx+rdx*1]
  22ba0a:	40 80 ee 30          	sub    sil,0x30
  22ba0e:	40 0f 92 c7          	setb   dil
  22ba12:	40 f6 c7 01          	test   dil,0x1
  22ba16:	40 88 b5 4e ff ff ff 	mov    BYTE PTR [rbp-0xb2],sil
  22ba1d:	75 02                	jne    22ba21 <roundToPrecision+0x271>
  22ba1f:	eb 10                	jmp    22ba31 <roundToPrecision+0x281>
  22ba21:	48 8d 3d a0 77 01 00 	lea    rdi,[rip+0x177a0]        # 2431c8 <__unnamed_4>
  22ba28:	31 c0                	xor    eax,eax
  22ba2a:	89 c6                	mov    esi,eax
  22ba2c:	e8 cf fb fd ff       	call   20b600 <panic>
  22ba31:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [rbp-0xb2]
  22ba37:	3c 05                	cmp    al,0x5
  22ba39:	0f 93 c1             	setae  cl
  22ba3c:	88 8d 7e ff ff ff    	mov    BYTE PTR [rbp-0x82],cl
  22ba42:	e9 85 fe ff ff       	jmp    22b8cc <roundToPrecision+0x11c>
  22ba47:	48 8d 3d 7a 77 01 00 	lea    rdi,[rip+0x1777a]        # 2431c8 <__unnamed_4>
  22ba4e:	31 c0                	xor    eax,eax
  22ba50:	89 c6                	mov    esi,eax
                float_decimal.exp += 1;
  22ba52:	e8 a9 fb fd ff       	call   20b600 <panic>
  22ba57:	31 c0                	xor    eax,eax
  22ba59:	89 c1                	mov    ecx,eax
  22ba5b:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  22ba62:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
  22ba68:	89 02                	mov    DWORD PTR [rdx],eax
                const one_before = @intToPtr([*]u8, @ptrToInt(&float_decimal.digits[0]) - 1);
  22ba6a:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  22ba6e:	48 3b 4e 08          	cmp    rcx,QWORD PTR [rsi+0x8]
  22ba72:	48 89 b5 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rsi
  22ba79:	72 10                	jb     22ba8b <roundToPrecision+0x2db>
  22ba7b:	48 8d 3d 76 79 01 00 	lea    rdi,[rip+0x17976]        # 2433f8 <__unnamed_20>
  22ba82:	31 c0                	xor    eax,eax
  22ba84:	89 c6                	mov    esi,eax
  22ba86:	e8 75 fb fd ff       	call   20b600 <panic>
  22ba8b:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  22ba92:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22ba95:	48 83 e9 01          	sub    rcx,0x1
  22ba99:	0f 92 c2             	setb   dl
  22ba9c:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  22baa3:	88 95 37 ff ff ff    	mov    BYTE PTR [rbp-0xc9],dl
  22baa9:	72 02                	jb     22baad <roundToPrecision+0x2fd>
  22baab:	eb 10                	jmp    22babd <roundToPrecision+0x30d>
  22baad:	48 8d 3d 14 77 01 00 	lea    rdi,[rip+0x17714]        # 2431c8 <__unnamed_4>
  22bab4:	31 c0                	xor    eax,eax
  22bab6:	89 c6                	mov    esi,eax
  22bab8:	e8 43 fb fd ff       	call   20b600 <panic>
  22babd:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  22bac4:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                float_decimal.digits = one_before[0 .. float_decimal.digits.len + 1];
  22bac8:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22bacc:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  22bad0:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  22bad4:	48 83 c2 01          	add    rdx,0x1
  22bad8:	40 0f 92 c6          	setb   sil
  22badc:	48 89 8d 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rcx
  22bae3:	48 89 95 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdx
  22baea:	40 88 b5 1f ff ff ff 	mov    BYTE PTR [rbp-0xe1],sil
  22baf1:	72 02                	jb     22baf5 <roundToPrecision+0x345>
  22baf3:	eb 10                	jmp    22bb05 <roundToPrecision+0x355>
  22baf5:	48 8d 3d cc 76 01 00 	lea    rdi,[rip+0x176cc]        # 2431c8 <__unnamed_4>
  22bafc:	31 c0                	xor    eax,eax
  22bafe:	89 c6                	mov    esi,eax
  22bb00:	e8 fb fa fd ff       	call   20b600 <panic>
  22bb05:	31 c0                	xor    eax,eax
  22bb07:	89 c1                	mov    ecx,eax
  22bb09:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  22bb0d:	48 8b b5 20 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe0]
  22bb14:	48 39 f1             	cmp    rcx,rsi
  22bb17:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
  22bb1e:	76 10                	jbe    22bb30 <roundToPrecision+0x380>
  22bb20:	48 8d 3d d1 78 01 00 	lea    rdi,[rip+0x178d1]        # 2433f8 <__unnamed_20>
  22bb27:	31 c0                	xor    eax,eax
  22bb29:	89 c6                	mov    esi,eax
  22bb2b:	e8 d0 fa fd ff       	call   20b600 <panic>
  22bb30:	31 c0                	xor    eax,eax
  22bb32:	89 c1                	mov    ecx,eax
  22bb34:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
  22bb3b:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  22bb3f:	48 8b b5 20 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe0]
  22bb46:	48 83 ee 00          	sub    rsi,0x0
  22bb4a:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22bb4e:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  22bb52:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  22bb59:	48 89 37             	mov    QWORD PTR [rdi],rsi
  22bb5c:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  22bb60:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
                float_decimal.digits[0] = '1';
  22bb64:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  22bb68:	48 3b 4e 08          	cmp    rcx,QWORD PTR [rsi+0x8]
  22bb6c:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
  22bb73:	72 10                	jb     22bb85 <roundToPrecision+0x3d5>
  22bb75:	48 8d 3d 7c 78 01 00 	lea    rdi,[rip+0x1787c]        # 2433f8 <__unnamed_20>
  22bb7c:	31 c0                	xor    eax,eax
  22bb7e:	89 c6                	mov    esi,eax
  22bb80:	e8 7b fa fd ff       	call   20b600 <panic>
  22bb85:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  22bb8c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22bb8f:	c6 01 31             	mov    BYTE PTR [rcx],0x31
                return;
  22bb92:	48 81 c4 30 01 00 00 	add    rsp,0x130
  22bb99:	5d                   	pop    rbp
  22bb9a:	c3                   	ret    
  22bb9b:	48 8d 3d 26 76 01 00 	lea    rdi,[rip+0x17626]        # 2431c8 <__unnamed_4>
  22bba2:	31 c0                	xor    eax,eax
  22bba4:	89 c6                	mov    esi,eax
            i -= 1;
  22bba6:	e8 55 fa fd ff       	call   20b600 <panic>
  22bbab:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  22bbb2:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
            const new_value = (float_decimal.digits[i] - '0' + 1) % 10;
  22bbb6:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22bbba:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  22bbbe:	48 3b 51 08          	cmp    rdx,QWORD PTR [rcx+0x8]
  22bbc2:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  22bbc9:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
  22bbd0:	72 10                	jb     22bbe2 <roundToPrecision+0x432>
  22bbd2:	48 8d 3d 1f 78 01 00 	lea    rdi,[rip+0x1781f]        # 2433f8 <__unnamed_20>
  22bbd9:	31 c0                	xor    eax,eax
  22bbdb:	89 c6                	mov    esi,eax
  22bbdd:	e8 1e fa fd ff       	call   20b600 <panic>
  22bbe2:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  22bbe9:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22bbec:	48 8b 95 f8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x108]
  22bbf3:	40 8a 34 11          	mov    sil,BYTE PTR [rcx+rdx*1]
  22bbf7:	40 80 ee 30          	sub    sil,0x30
  22bbfb:	40 0f 92 c7          	setb   dil
  22bbff:	40 f6 c7 01          	test   dil,0x1
  22bc03:	40 88 b5 f7 fe ff ff 	mov    BYTE PTR [rbp-0x109],sil
  22bc0a:	75 02                	jne    22bc0e <roundToPrecision+0x45e>
  22bc0c:	eb 10                	jmp    22bc1e <roundToPrecision+0x46e>
  22bc0e:	48 8d 3d b3 75 01 00 	lea    rdi,[rip+0x175b3]        # 2431c8 <__unnamed_4>
  22bc15:	31 c0                	xor    eax,eax
  22bc17:	89 c6                	mov    esi,eax
  22bc19:	e8 e2 f9 fd ff       	call   20b600 <panic>
  22bc1e:	8a 85 f7 fe ff ff    	mov    al,BYTE PTR [rbp-0x109]
  22bc24:	04 01                	add    al,0x1
  22bc26:	0f 92 c1             	setb   cl
  22bc29:	f6 c1 01             	test   cl,0x1
  22bc2c:	88 85 f6 fe ff ff    	mov    BYTE PTR [rbp-0x10a],al
  22bc32:	75 02                	jne    22bc36 <roundToPrecision+0x486>
  22bc34:	eb 10                	jmp    22bc46 <roundToPrecision+0x496>
  22bc36:	48 8d 3d 8b 75 01 00 	lea    rdi,[rip+0x1758b]        # 2431c8 <__unnamed_4>
  22bc3d:	31 c0                	xor    eax,eax
  22bc3f:	89 c6                	mov    esi,eax
  22bc41:	e8 ba f9 fd ff       	call   20b600 <panic>
  22bc46:	31 c0                	xor    eax,eax
  22bc48:	88 c1                	mov    cl,al
  22bc4a:	f6 c1 01             	test   cl,0x1
  22bc4d:	75 45                	jne    22bc94 <roundToPrecision+0x4e4>
  22bc4f:	eb 00                	jmp    22bc51 <roundToPrecision+0x4a1>
  22bc51:	b0 0a                	mov    al,0xa
  22bc53:	8a 8d f6 fe ff ff    	mov    cl,BYTE PTR [rbp-0x10a]
  22bc59:	88 85 f5 fe ff ff    	mov    BYTE PTR [rbp-0x10b],al
  22bc5f:	66 0f b6 c1          	movzx  ax,cl
  22bc63:	8a 95 f5 fe ff ff    	mov    dl,BYTE PTR [rbp-0x10b]
  22bc69:	f6 f2                	div    dl
  22bc6b:	66 c1 e8 08          	shr    ax,0x8
  22bc6f:	40 88 c6             	mov    sil,al
  22bc72:	40 88 75 b7          	mov    BYTE PTR [rbp-0x49],sil
            float_decimal.digits[i] = new_value + '0';
  22bc76:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  22bc7a:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
  22bc7e:	4c 3b 47 08          	cmp    r8,QWORD PTR [rdi+0x8]
  22bc82:	48 89 bd e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdi
  22bc89:	4c 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],r8
  22bc90:	72 22                	jb     22bcb4 <roundToPrecision+0x504>
  22bc92:	eb 10                	jmp    22bca4 <roundToPrecision+0x4f4>
  22bc94:	48 8d 3d 5d 76 01 00 	lea    rdi,[rip+0x1765d]        # 2432f8 <__unnamed_15>
  22bc9b:	31 c0                	xor    eax,eax
  22bc9d:	89 c6                	mov    esi,eax
            const new_value = (float_decimal.digits[i] - '0' + 1) % 10;
  22bc9f:	e8 5c f9 fd ff       	call   20b600 <panic>
  22bca4:	48 8d 3d 4d 77 01 00 	lea    rdi,[rip+0x1774d]        # 2433f8 <__unnamed_20>
  22bcab:	31 c0                	xor    eax,eax
  22bcad:	89 c6                	mov    esi,eax
            float_decimal.digits[i] = new_value + '0';
  22bcaf:	e8 4c f9 fd ff       	call   20b600 <panic>
  22bcb4:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
  22bcbb:	48 8b 8d e8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x118]
  22bcc2:	48 03 01             	add    rax,QWORD PTR [rcx]
  22bcc5:	8a 55 b7             	mov    dl,BYTE PTR [rbp-0x49]
  22bcc8:	80 c2 30             	add    dl,0x30
  22bccb:	40 0f 92 c6          	setb   sil
  22bccf:	40 f6 c6 01          	test   sil,0x1
  22bcd3:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
  22bcda:	88 95 d7 fe ff ff    	mov    BYTE PTR [rbp-0x129],dl
  22bce0:	75 02                	jne    22bce4 <roundToPrecision+0x534>
  22bce2:	eb 10                	jmp    22bcf4 <roundToPrecision+0x544>
  22bce4:	48 8d 3d dd 74 01 00 	lea    rdi,[rip+0x174dd]        # 2431c8 <__unnamed_4>
  22bceb:	31 c0                	xor    eax,eax
  22bced:	89 c6                	mov    esi,eax
  22bcef:	e8 0c f9 fd ff       	call   20b600 <panic>
  22bcf4:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  22bcfb:	8a 8d d7 fe ff ff    	mov    cl,BYTE PTR [rbp-0x129]
  22bd01:	88 08                	mov    BYTE PTR [rax],cl
            if (new_value != 0) {
  22bd03:	80 7d b7 00          	cmp    BYTE PTR [rbp-0x49],0x0
  22bd07:	0f 85 3e fc ff ff    	jne    22b94b <roundToPrecision+0x19b>
  22bd0d:	e9 42 fc ff ff       	jmp    22b954 <roundToPrecision+0x1a4>
  22bd12:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22bd19:	1f 84 00 00 00 00 00 

000000000022bd20 <formatIntUnsigned.120>:
fn formatIntUnsigned(
  22bd20:	55                   	push   rbp
  22bd21:	48 89 e5             	mov    rbp,rsp
  22bd24:	41 56                	push   r14
  22bd26:	53                   	push   rbx
  22bd27:	48 81 ec 20 02 00 00 	sub    rsp,0x220
  22bd2e:	88 c8                	mov    al,cl
  22bd30:	41 88 d2             	mov    r10b,dl
  22bd33:	4c 8b 5d 10          	mov    r11,QWORD PTR [rbp+0x10]
  22bd37:	48 8d 1d 06 eb fd ff 	lea    rbx,[rip+0xfffffffffffdeb06]        # 20a844 <__unnamed_225>
  22bd3e:	b9 40 00 00 00       	mov    ecx,0x40
  22bd43:	89 ca                	mov    edx,ecx
  22bd45:	4c 8d b5 f8 fe ff ff 	lea    r14,[rbp-0x108]
  22bd4c:	48 89 b5 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rsi
  22bd53:	44 88 95 4f ff ff ff 	mov    BYTE PTR [rbp-0xb1],r10b
  22bd5a:	24 01                	and    al,0x1
  22bd5c:	88 85 4e ff ff ff    	mov    BYTE PTR [rbp-0xb2],al
  22bd62:	4c 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],r8
  22bd69:	4c 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],r9
    var buf: [max_int_digits - 1]u8 = undefined;
  22bd70:	48 89 bd a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdi
  22bd77:	4c 89 f7             	mov    rdi,r14
  22bd7a:	48 89 de             	mov    rsi,rbx
  22bd7d:	4c 89 9d 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],r11
  22bd84:	e8 77 8b 00 00       	call   234900 <memcpy>
    var a = if (@sizeOf(@typeOf(value)) == 1) u8(value) else value;
  22bd89:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
  22bd90:	48 89 95 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rdx
    var index: usize = buf.len;
  22bd97:	48 c7 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],0x40
  22bd9e:	40 00 00 00 
    while (true) {
  22bda2:	eb 00                	jmp    22bda4 <formatIntUnsigned.120+0x84>
        const digit = a % base;
  22bda4:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  22bdab:	0f b6 8d 4f ff ff ff 	movzx  ecx,BYTE PTR [rbp-0xb1]
  22bdb2:	89 ca                	mov    edx,ecx
  22bdb4:	48 83 fa 00          	cmp    rdx,0x0
  22bdb8:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  22bdbf:	48 89 95 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rdx
  22bdc6:	0f 84 f6 01 00 00    	je     22bfc2 <formatIntUnsigned.120+0x2a2>
  22bdcc:	e9 b4 01 00 00       	jmp    22bf85 <formatIntUnsigned.120+0x265>
        if (a == 0) break;
  22bdd1:	eb 02                	jmp    22bdd5 <formatIntUnsigned.120+0xb5>
    while (true) {
  22bdd3:	eb cd                	jmp    22bda2 <formatIntUnsigned.120+0x82>
    const digits_buf = buf[index..];
  22bdd5:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  22bddc:	48 83 f8 40          	cmp    rax,0x40
  22bde0:	48 89 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rax
  22bde7:	0f 86 02 03 00 00    	jbe    22c0ef <formatIntUnsigned.120+0x3cf>
  22bded:	e9 ed 02 00 00       	jmp    22c0df <formatIntUnsigned.120+0x3bf>
    const padding = if (width > digits_buf.len) (width - digits_buf.len) else 0;
  22bdf2:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  22bdf9:	48 2b 85 d8 fe ff ff 	sub    rax,QWORD PTR [rbp-0x128]
  22be00:	0f 92 c1             	setb   cl
  22be03:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  22be0a:	88 8d 77 fe ff ff    	mov    BYTE PTR [rbp-0x189],cl
  22be10:	0f 82 2b 03 00 00    	jb     22c141 <formatIntUnsigned.120+0x421>
  22be16:	e9 36 03 00 00       	jmp    22c151 <formatIntUnsigned.120+0x431>
  22be1b:	31 c0                	xor    eax,eax
  22be1d:	89 c1                	mov    ecx,eax
  22be1f:	48 89 8d 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rcx
  22be26:	eb 00                	jmp    22be28 <formatIntUnsigned.120+0x108>
  22be28:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
  22be2f:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
    if (padding > index) {
  22be36:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  22be3d:	48 3b 85 e8 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x118]
  22be44:	0f 86 ef 00 00 00    	jbe    22bf39 <formatIntUnsigned.120+0x219>
        const zero_byte: u8 = '0';
  22be4a:	c6 85 c7 fe ff ff 30 	mov    BYTE PTR [rbp-0x139],0x30
        var leftover_padding = padding - index;
  22be51:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  22be58:	48 2b 85 e8 fe ff ff 	sub    rax,QWORD PTR [rbp-0x118]
  22be5f:	0f 92 c1             	setb   cl
  22be62:	48 89 85 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rax
  22be69:	88 8d 5f fe ff ff    	mov    BYTE PTR [rbp-0x1a1],cl
  22be6f:	0f 82 ef 02 00 00    	jb     22c164 <formatIntUnsigned.120+0x444>
  22be75:	e9 fa 02 00 00       	jmp    22c174 <formatIntUnsigned.120+0x454>
        while (true) {
  22be7a:	eb 00                	jmp    22be7c <formatIntUnsigned.120+0x15c>
  22be7c:	48 8d 15 5d 7c 01 00 	lea    rdx,[rip+0x17c5d]        # 243ae0 <__unnamed_226>
            try output(context, (*[1]u8)(&zero_byte)[0..]);
  22be83:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
  22be87:	48 8b b5 38 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc8]
  22be8e:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
  22be95:	ff d0                	call   rax
  22be97:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  22be9b:	66 83 7d de 00       	cmp    WORD PTR [rbp-0x22],0x0
  22bea0:	74 2a                	je     22becc <formatIntUnsigned.120+0x1ac>
  22bea2:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  22bea6:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
  22bead:	66 89 85 5c fe ff ff 	mov    WORD PTR [rbp-0x1a4],ax
  22beb4:	e8 d7 fd fd ff       	call   20bc90 <__zig_return_error>
  22beb9:	66 8b 85 5c fe ff ff 	mov    ax,WORD PTR [rbp-0x1a4]
  22bec0:	48 81 c4 20 02 00 00 	add    rsp,0x220
  22bec7:	5b                   	pop    rbx
  22bec8:	41 5e                	pop    r14
  22beca:	5d                   	pop    rbp
  22becb:	c3                   	ret    
            leftover_padding -= 1;
  22becc:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  22bed3:	48 83 e8 01          	sub    rax,0x1
  22bed7:	0f 92 c1             	setb   cl
  22beda:	48 89 85 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rax
  22bee1:	88 8d 4f fe ff ff    	mov    BYTE PTR [rbp-0x1b1],cl
  22bee7:	0f 82 9a 02 00 00    	jb     22c187 <formatIntUnsigned.120+0x467>
  22beed:	e9 a5 02 00 00       	jmp    22c197 <formatIntUnsigned.120+0x477>
            if (leftover_padding == 0) break;
  22bef2:	eb 02                	jmp    22bef6 <formatIntUnsigned.120+0x1d6>
        while (true) {
  22bef4:	eb 84                	jmp    22be7a <formatIntUnsigned.120+0x15a>
  22bef6:	31 c0                	xor    eax,eax
  22bef8:	89 c1                	mov    ecx,eax
        mem.set(u8, buf[0..index], '0');
  22befa:	48 8b 95 e8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x118]
  22bf01:	48 39 d1             	cmp    rcx,rdx
  22bf04:	48 89 95 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rdx
  22bf0b:	0f 86 b7 02 00 00    	jbe    22c1c8 <formatIntUnsigned.120+0x4a8>
  22bf11:	e9 a2 02 00 00       	jmp    22c1b8 <formatIntUnsigned.120+0x498>
        return output(context, buf);
  22bf16:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
  22bf1d:	e8 6e fd fd ff       	call   20bc90 <__zig_return_error>
  22bf22:	eb 02                	jmp    22bf26 <formatIntUnsigned.120+0x206>
  22bf24:	eb 00                	jmp    22bf26 <formatIntUnsigned.120+0x206>
  22bf26:	66 8b 85 3e fe ff ff 	mov    ax,WORD PTR [rbp-0x1c2]
  22bf2d:	48 81 c4 20 02 00 00 	add    rsp,0x220
  22bf34:	5b                   	pop    rbx
  22bf35:	41 5e                	pop    r14
  22bf37:	5d                   	pop    rbp
  22bf38:	c3                   	ret    
        const padded_buf = buf[index - padding ..];
  22bf39:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  22bf40:	48 2b 85 c8 fe ff ff 	sub    rax,QWORD PTR [rbp-0x138]
  22bf47:	0f 92 c1             	setb   cl
  22bf4a:	48 89 85 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rax
  22bf51:	88 8d 2f fe ff ff    	mov    BYTE PTR [rbp-0x1d1],cl
  22bf57:	0f 82 08 03 00 00    	jb     22c265 <formatIntUnsigned.120+0x545>
  22bf5d:	e9 13 03 00 00       	jmp    22c275 <formatIntUnsigned.120+0x555>
        return output(context, padded_buf);
  22bf62:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
  22bf69:	e8 22 fd fd ff       	call   20bc90 <__zig_return_error>
  22bf6e:	eb 02                	jmp    22bf72 <formatIntUnsigned.120+0x252>
  22bf70:	eb 00                	jmp    22bf72 <formatIntUnsigned.120+0x252>
  22bf72:	66 8b 85 2c fe ff ff 	mov    ax,WORD PTR [rbp-0x1d4]
  22bf79:	48 81 c4 20 02 00 00 	add    rsp,0x220
  22bf80:	5b                   	pop    rbx
  22bf81:	41 5e                	pop    r14
  22bf83:	5d                   	pop    rbp
  22bf84:	c3                   	ret    
        const digit = a % base;
  22bf85:	48 8b 85 90 fe ff ff 	mov    rax,QWORD PTR [rbp-0x170]
  22bf8c:	31 c9                	xor    ecx,ecx
  22bf8e:	89 ca                	mov    edx,ecx
  22bf90:	48 8b b5 88 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x178]
  22bf97:	48 f7 f6             	div    rsi
  22bf9a:	48 89 95 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rdx
        index -= 1;
  22bfa1:	48 8b 95 e8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x118]
  22bfa8:	48 83 ea 01          	sub    rdx,0x1
  22bfac:	40 0f 92 c7          	setb   dil
  22bfb0:	48 89 95 20 fe ff ff 	mov    QWORD PTR [rbp-0x1e0],rdx
  22bfb7:	40 88 bd 1f fe ff ff 	mov    BYTE PTR [rbp-0x1e1],dil
  22bfbe:	72 12                	jb     22bfd2 <formatIntUnsigned.120+0x2b2>
  22bfc0:	eb 20                	jmp    22bfe2 <formatIntUnsigned.120+0x2c2>
  22bfc2:	48 8d 3d 2f 73 01 00 	lea    rdi,[rip+0x1732f]        # 2432f8 <__unnamed_15>
  22bfc9:	31 c0                	xor    eax,eax
  22bfcb:	89 c6                	mov    esi,eax
        const digit = a % base;
  22bfcd:	e8 2e f6 fd ff       	call   20b600 <panic>
  22bfd2:	48 8d 3d ef 71 01 00 	lea    rdi,[rip+0x171ef]        # 2431c8 <__unnamed_4>
  22bfd9:	31 c0                	xor    eax,eax
  22bfdb:	89 c6                	mov    esi,eax
        index -= 1;
  22bfdd:	e8 1e f6 fd ff       	call   20b600 <panic>
  22bfe2:	48 8b 85 20 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e0]
  22bfe9:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
        buf[index] = digitToChar(@intCast(u8, digit), uppercase);
  22bff0:	48 8b 8d e8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x118]
  22bff7:	48 83 f9 40          	cmp    rcx,0x40
  22bffb:	48 89 8d 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rcx
  22c002:	72 10                	jb     22c014 <formatIntUnsigned.120+0x2f4>
  22c004:	48 8d 3d ed 73 01 00 	lea    rdi,[rip+0x173ed]        # 2433f8 <__unnamed_20>
  22c00b:	31 c0                	xor    eax,eax
  22c00d:	89 c6                	mov    esi,eax
  22c00f:	e8 ec f5 fd ff       	call   20b600 <panic>
  22c014:	48 8d 85 f8 fe ff ff 	lea    rax,[rbp-0x108]
  22c01b:	48 8b 8d 10 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1f0]
  22c022:	48 01 c8             	add    rax,rcx
  22c025:	48 8b 95 e0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x120]
  22c02c:	40 88 d6             	mov    sil,dl
  22c02f:	40 0f b6 fe          	movzx  edi,sil
  22c033:	41 89 f8             	mov    r8d,edi
  22c036:	4c 39 c2             	cmp    rdx,r8
  22c039:	48 89 85 08 fe ff ff 	mov    QWORD PTR [rbp-0x1f8],rax
  22c040:	40 88 b5 07 fe ff ff 	mov    BYTE PTR [rbp-0x1f9],sil
  22c047:	75 47                	jne    22c090 <formatIntUnsigned.120+0x370>
  22c049:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [rbp-0xb2]
  22c04f:	8a 8d 07 fe ff ff    	mov    cl,BYTE PTR [rbp-0x1f9]
  22c055:	0f b6 f9             	movzx  edi,cl
  22c058:	0f b6 f0             	movzx  esi,al
  22c05b:	e8 40 03 00 00       	call   22c3a0 <digitToChar>
  22c060:	48 8b 95 08 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1f8]
  22c067:	88 02                	mov    BYTE PTR [rdx],al
        a /= base;
  22c069:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  22c070:	0f b6 b5 4f ff ff ff 	movzx  esi,BYTE PTR [rbp-0xb1]
  22c077:	41 89 f0             	mov    r8d,esi
  22c07a:	49 83 f8 00          	cmp    r8,0x0
  22c07e:	48 89 85 f8 fd ff ff 	mov    QWORD PTR [rbp-0x208],rax
  22c085:	4c 89 85 f0 fd ff ff 	mov    QWORD PTR [rbp-0x210],r8
  22c08c:	74 41                	je     22c0cf <formatIntUnsigned.120+0x3af>
  22c08e:	eb 10                	jmp    22c0a0 <formatIntUnsigned.120+0x380>
  22c090:	48 8d 3d 11 74 01 00 	lea    rdi,[rip+0x17411]        # 2434a8 <__unnamed_22>
  22c097:	31 c0                	xor    eax,eax
  22c099:	89 c6                	mov    esi,eax
        buf[index] = digitToChar(@intCast(u8, digit), uppercase);
  22c09b:	e8 60 f5 fd ff       	call   20b600 <panic>
        a /= base;
  22c0a0:	48 8b 85 f8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x208]
  22c0a7:	31 c9                	xor    ecx,ecx
  22c0a9:	89 ca                	mov    edx,ecx
  22c0ab:	48 8b b5 f0 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x210]
  22c0b2:	48 f7 f6             	div    rsi
  22c0b5:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
        if (a == 0) break;
  22c0bc:	48 83 bd f0 fe ff ff 	cmp    QWORD PTR [rbp-0x110],0x0
  22c0c3:	00 
  22c0c4:	0f 84 07 fd ff ff    	je     22bdd1 <formatIntUnsigned.120+0xb1>
  22c0ca:	e9 04 fd ff ff       	jmp    22bdd3 <formatIntUnsigned.120+0xb3>
  22c0cf:	48 8d 3d 6a 71 01 00 	lea    rdi,[rip+0x1716a]        # 243240 <__unnamed_7>
  22c0d6:	31 c0                	xor    eax,eax
  22c0d8:	89 c6                	mov    esi,eax
        a /= base;
  22c0da:	e8 21 f5 fd ff       	call   20b600 <panic>
  22c0df:	48 8d 3d 12 73 01 00 	lea    rdi,[rip+0x17312]        # 2433f8 <__unnamed_20>
  22c0e6:	31 c0                	xor    eax,eax
  22c0e8:	89 c6                	mov    esi,eax
    const digits_buf = buf[index..];
  22c0ea:	e8 11 f5 fd ff       	call   20b600 <panic>
  22c0ef:	b8 40 00 00 00       	mov    eax,0x40
  22c0f4:	89 c1                	mov    ecx,eax
  22c0f6:	48 8d 95 f8 fe ff ff 	lea    rdx,[rbp-0x108]
  22c0fd:	48 8b b5 80 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x180]
  22c104:	48 01 f2             	add    rdx,rsi
  22c107:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  22c10b:	48 29 f1             	sub    rcx,rsi
  22c10e:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  22c112:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  22c116:	48 89 8d d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rcx
  22c11d:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22c121:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
    const padding = if (width > digits_buf.len) (width - digits_buf.len) else 0;
  22c128:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  22c12f:	48 3b 8d d8 fe ff ff 	cmp    rcx,QWORD PTR [rbp-0x128]
  22c136:	0f 87 b6 fc ff ff    	ja     22bdf2 <formatIntUnsigned.120+0xd2>
  22c13c:	e9 da fc ff ff       	jmp    22be1b <formatIntUnsigned.120+0xfb>
  22c141:	48 8d 3d 80 70 01 00 	lea    rdi,[rip+0x17080]        # 2431c8 <__unnamed_4>
  22c148:	31 c0                	xor    eax,eax
  22c14a:	89 c6                	mov    esi,eax
  22c14c:	e8 af f4 fd ff       	call   20b600 <panic>
  22c151:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
  22c158:	48 89 85 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rax
  22c15f:	e9 c4 fc ff ff       	jmp    22be28 <formatIntUnsigned.120+0x108>
  22c164:	48 8d 3d 5d 70 01 00 	lea    rdi,[rip+0x1705d]        # 2431c8 <__unnamed_4>
  22c16b:	31 c0                	xor    eax,eax
  22c16d:	89 c6                	mov    esi,eax
        var leftover_padding = padding - index;
  22c16f:	e8 8c f4 fd ff       	call   20b600 <panic>
  22c174:	48 8b 85 60 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a0]
  22c17b:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
        while (true) {
  22c182:	e9 f3 fc ff ff       	jmp    22be7a <formatIntUnsigned.120+0x15a>
  22c187:	48 8d 3d 3a 70 01 00 	lea    rdi,[rip+0x1703a]        # 2431c8 <__unnamed_4>
  22c18e:	31 c0                	xor    eax,eax
  22c190:	89 c6                	mov    esi,eax
            leftover_padding -= 1;
  22c192:	e8 69 f4 fd ff       	call   20b600 <panic>
  22c197:	48 8b 85 50 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b0]
  22c19e:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
            if (leftover_padding == 0) break;
  22c1a5:	48 83 bd b8 fe ff ff 	cmp    QWORD PTR [rbp-0x148],0x0
  22c1ac:	00 
  22c1ad:	0f 84 3f fd ff ff    	je     22bef2 <formatIntUnsigned.120+0x1d2>
  22c1b3:	e9 3c fd ff ff       	jmp    22bef4 <formatIntUnsigned.120+0x1d4>
  22c1b8:	48 8d 3d 39 72 01 00 	lea    rdi,[rip+0x17239]        # 2433f8 <__unnamed_20>
  22c1bf:	31 c0                	xor    eax,eax
  22c1c1:	89 c6                	mov    esi,eax
        mem.set(u8, buf[0..index], '0');
  22c1c3:	e8 38 f4 fd ff       	call   20b600 <panic>
  22c1c8:	48 8b 85 40 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c0]
  22c1cf:	48 83 f8 40          	cmp    rax,0x40
  22c1d3:	76 10                	jbe    22c1e5 <formatIntUnsigned.120+0x4c5>
  22c1d5:	48 8d 3d 1c 72 01 00 	lea    rdi,[rip+0x1721c]        # 2433f8 <__unnamed_20>
  22c1dc:	31 c0                	xor    eax,eax
  22c1de:	89 c6                	mov    esi,eax
  22c1e0:	e8 1b f4 fd ff       	call   20b600 <panic>
  22c1e5:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  22c1e9:	be 30 00 00 00       	mov    esi,0x30
  22c1ee:	48 8d 85 f8 fe ff ff 	lea    rax,[rbp-0x108]
  22c1f5:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  22c1f9:	48 8b 85 40 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c0]
  22c200:	48 83 e8 00          	sub    rax,0x0
  22c204:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  22c208:	e8 93 02 00 00       	call   22c4a0 <set>
  22c20d:	48 8d 95 78 ff ff ff 	lea    rdx,[rbp-0x88]
  22c214:	48 8d 85 f8 fe ff ff 	lea    rax,[rbp-0x108]
        return output(context, buf);
  22c21b:	48 8b 7d 10          	mov    rdi,QWORD PTR [rbp+0x10]
  22c21f:	48 8b b5 38 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc8]
  22c226:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  22c22d:	48 c7 45 80 40 00 00 	mov    QWORD PTR [rbp-0x80],0x40
  22c234:	00 
  22c235:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
  22c23c:	48 89 bd e8 fd ff ff 	mov    QWORD PTR [rbp-0x218],rdi
  22c243:	48 89 c7             	mov    rdi,rax
  22c246:	48 8b 8d e8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x218]
  22c24d:	ff d1                	call   rcx
  22c24f:	66 83 f8 00          	cmp    ax,0x0
  22c253:	66 89 85 3e fe ff ff 	mov    WORD PTR [rbp-0x1c2],ax
  22c25a:	0f 85 b6 fc ff ff    	jne    22bf16 <formatIntUnsigned.120+0x1f6>
  22c260:	e9 bf fc ff ff       	jmp    22bf24 <formatIntUnsigned.120+0x204>
  22c265:	48 8d 3d 5c 6f 01 00 	lea    rdi,[rip+0x16f5c]        # 2431c8 <__unnamed_4>
  22c26c:	31 c0                	xor    eax,eax
  22c26e:	89 c6                	mov    esi,eax
        const padded_buf = buf[index - padding ..];
  22c270:	e8 8b f3 fd ff       	call   20b600 <panic>
  22c275:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  22c27c:	48 83 f8 40          	cmp    rax,0x40
  22c280:	76 10                	jbe    22c292 <formatIntUnsigned.120+0x572>
  22c282:	48 8d 3d 6f 71 01 00 	lea    rdi,[rip+0x1716f]        # 2433f8 <__unnamed_20>
  22c289:	31 c0                	xor    eax,eax
  22c28b:	89 c6                	mov    esi,eax
  22c28d:	e8 6e f3 fd ff       	call   20b600 <panic>
  22c292:	31 c0                	xor    eax,eax
  22c294:	89 c1                	mov    ecx,eax
  22c296:	b8 40 00 00 00       	mov    eax,0x40
  22c29b:	89 c2                	mov    edx,eax
  22c29d:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  22c2a4:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
  22c2ab:	48 01 fe             	add    rsi,rdi
  22c2ae:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
  22c2b5:	48 29 fa             	sub    rdx,rdi
  22c2b8:	48 89 95 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdx
  22c2bf:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  22c2c6:	48 89 95 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rdx
  22c2cd:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  22c2d4:	48 89 95 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rdx
        mem.set(u8, padded_buf[0..padding], '0');
  22c2db:	48 8b 95 c8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x138]
  22c2e2:	48 8b b5 b0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x150]
  22c2e9:	48 39 d1             	cmp    rcx,rdx
  22c2ec:	48 89 b5 e0 fd ff ff 	mov    QWORD PTR [rbp-0x220],rsi
  22c2f3:	48 89 95 d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rdx
  22c2fa:	76 10                	jbe    22c30c <formatIntUnsigned.120+0x5ec>
  22c2fc:	48 8d 3d f5 70 01 00 	lea    rdi,[rip+0x170f5]        # 2433f8 <__unnamed_20>
  22c303:	31 c0                	xor    eax,eax
  22c305:	89 c6                	mov    esi,eax
  22c307:	e8 f4 f2 fd ff       	call   20b600 <panic>
  22c30c:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
  22c313:	48 8b 8d e0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x220]
  22c31a:	48 39 c8             	cmp    rax,rcx
  22c31d:	76 10                	jbe    22c32f <formatIntUnsigned.120+0x60f>
  22c31f:	48 8d 3d d2 70 01 00 	lea    rdi,[rip+0x170d2]        # 2433f8 <__unnamed_20>
  22c326:	31 c0                	xor    eax,eax
  22c328:	89 c6                	mov    esi,eax
  22c32a:	e8 d1 f2 fd ff       	call   20b600 <panic>
  22c32f:	48 8d bd 58 ff ff ff 	lea    rdi,[rbp-0xa8]
  22c336:	be 30 00 00 00       	mov    esi,0x30
  22c33b:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
  22c342:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  22c349:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
  22c350:	48 83 e8 00          	sub    rax,0x0
  22c354:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  22c35b:	e8 40 01 00 00       	call   22c4a0 <set>
  22c360:	48 8d 95 a8 fe ff ff 	lea    rdx,[rbp-0x158]
        return output(context, padded_buf);
  22c367:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
  22c36b:	48 8b b5 38 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc8]
  22c372:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
  22c379:	ff d0                	call   rax
  22c37b:	66 83 f8 00          	cmp    ax,0x0
  22c37f:	66 89 85 2c fe ff ff 	mov    WORD PTR [rbp-0x1d4],ax
  22c386:	0f 85 d6 fb ff ff    	jne    22bf62 <formatIntUnsigned.120+0x242>
  22c38c:	e9 df fb ff ff       	jmp    22bf70 <formatIntUnsigned.120+0x250>
  22c391:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22c398:	0f 1f 84 00 00 00 00 
  22c39f:	00 

000000000022c3a0 <digitToChar>:
}

fn digitToChar(digit: u8, uppercase: bool) u8 {
  22c3a0:	55                   	push   rbp
  22c3a1:	48 89 e5             	mov    rbp,rsp
  22c3a4:	48 83 ec 10          	sub    rsp,0x10
  22c3a8:	40 88 f0             	mov    al,sil
  22c3ab:	40 88 f9             	mov    cl,dil
  22c3ae:	88 4d ff             	mov    BYTE PTR [rbp-0x1],cl
  22c3b1:	24 01                	and    al,0x1
  22c3b3:	88 45 fe             	mov    BYTE PTR [rbp-0x2],al
    return switch (digit) {
  22c3b6:	8a 45 ff             	mov    al,BYTE PTR [rbp-0x1]
        0...9 => digit + '0',
  22c3b9:	3c 09                	cmp    al,0x9
  22c3bb:	0f 96 c1             	setbe  cl
  22c3be:	80 e1 01             	and    cl,0x1
  22c3c1:	f6 c1 01             	test   cl,0x1
  22c3c4:	88 45 fd             	mov    BYTE PTR [rbp-0x3],al
  22c3c7:	75 02                	jne    22c3cb <digitToChar+0x2b>
  22c3c9:	eb 12                	jmp    22c3dd <digitToChar+0x3d>
  22c3cb:	8a 45 ff             	mov    al,BYTE PTR [rbp-0x1]
  22c3ce:	04 30                	add    al,0x30
  22c3d0:	0f 92 c1             	setb   cl
  22c3d3:	f6 c1 01             	test   cl,0x1
  22c3d6:	88 45 fc             	mov    BYTE PTR [rbp-0x4],al
  22c3d9:	75 61                	jne    22c43c <digitToChar+0x9c>
  22c3db:	eb 6f                	jmp    22c44c <digitToChar+0xac>
        10...35 => digit + ((if (uppercase) u8('A') else u8('a')) - 10),
  22c3dd:	8a 45 fd             	mov    al,BYTE PTR [rbp-0x3]
  22c3e0:	3c 0a                	cmp    al,0xa
  22c3e2:	0f 93 c1             	setae  cl
  22c3e5:	3c 23                	cmp    al,0x23
  22c3e7:	0f 96 c2             	setbe  dl
  22c3ea:	20 d1                	and    cl,dl
  22c3ec:	f6 c1 01             	test   cl,0x1
  22c3ef:	75 02                	jne    22c3f3 <digitToChar+0x53>
  22c3f1:	eb 2e                	jmp    22c421 <digitToChar+0x81>
  22c3f3:	8a 45 ff             	mov    al,BYTE PTR [rbp-0x1]
  22c3f6:	f6 45 fe 01          	test   BYTE PTR [rbp-0x2],0x1
  22c3fa:	88 45 fb             	mov    BYTE PTR [rbp-0x5],al
  22c3fd:	75 02                	jne    22c401 <digitToChar+0x61>
  22c3ff:	eb 07                	jmp    22c408 <digitToChar+0x68>
  22c401:	b0 41                	mov    al,0x41
  22c403:	88 45 fa             	mov    BYTE PTR [rbp-0x6],al
  22c406:	eb 07                	jmp    22c40f <digitToChar+0x6f>
  22c408:	b0 61                	mov    al,0x61
  22c40a:	88 45 fa             	mov    BYTE PTR [rbp-0x6],al
  22c40d:	eb 00                	jmp    22c40f <digitToChar+0x6f>
  22c40f:	8a 45 fa             	mov    al,BYTE PTR [rbp-0x6]
  22c412:	2c 0a                	sub    al,0xa
  22c414:	0f 92 c1             	setb   cl
  22c417:	f6 c1 01             	test   cl,0x1
  22c41a:	88 45 f9             	mov    BYTE PTR [rbp-0x7],al
  22c41d:	75 35                	jne    22c454 <digitToChar+0xb4>
  22c41f:	eb 43                	jmp    22c464 <digitToChar+0xc4>
    return switch (digit) {
  22c421:	eb 00                	jmp    22c423 <digitToChar+0x83>
  22c423:	48 8d 3d e6 6e 01 00 	lea    rdi,[rip+0x16ee6]        # 243310 <__unnamed_13>
  22c42a:	31 c0                	xor    eax,eax
  22c42c:	89 c6                	mov    esi,eax
        else => unreachable,
  22c42e:	e8 cd f1 fd ff       	call   20b600 <panic>
    return switch (digit) {
  22c433:	8a 45 f8             	mov    al,BYTE PTR [rbp-0x8]
  22c436:	48 83 c4 10          	add    rsp,0x10
  22c43a:	5d                   	pop    rbp
  22c43b:	c3                   	ret    
  22c43c:	48 8d 3d 85 6d 01 00 	lea    rdi,[rip+0x16d85]        # 2431c8 <__unnamed_4>
  22c443:	31 c0                	xor    eax,eax
  22c445:	89 c6                	mov    esi,eax
        0...9 => digit + '0',
  22c447:	e8 b4 f1 fd ff       	call   20b600 <panic>
    return switch (digit) {
  22c44c:	8a 45 fc             	mov    al,BYTE PTR [rbp-0x4]
  22c44f:	88 45 f8             	mov    BYTE PTR [rbp-0x8],al
  22c452:	eb df                	jmp    22c433 <digitToChar+0x93>
  22c454:	48 8d 3d 6d 6d 01 00 	lea    rdi,[rip+0x16d6d]        # 2431c8 <__unnamed_4>
  22c45b:	31 c0                	xor    eax,eax
  22c45d:	89 c6                	mov    esi,eax
        10...35 => digit + ((if (uppercase) u8('A') else u8('a')) - 10),
  22c45f:	e8 9c f1 fd ff       	call   20b600 <panic>
  22c464:	8a 45 fb             	mov    al,BYTE PTR [rbp-0x5]
  22c467:	8a 4d f9             	mov    cl,BYTE PTR [rbp-0x7]
  22c46a:	00 c8                	add    al,cl
  22c46c:	0f 92 c2             	setb   dl
  22c46f:	f6 c2 01             	test   dl,0x1
  22c472:	88 45 f7             	mov    BYTE PTR [rbp-0x9],al
  22c475:	75 02                	jne    22c479 <digitToChar+0xd9>
  22c477:	eb 10                	jmp    22c489 <digitToChar+0xe9>
  22c479:	48 8d 3d 48 6d 01 00 	lea    rdi,[rip+0x16d48]        # 2431c8 <__unnamed_4>
  22c480:	31 c0                	xor    eax,eax
  22c482:	89 c6                	mov    esi,eax
  22c484:	e8 77 f1 fd ff       	call   20b600 <panic>
    return switch (digit) {
  22c489:	8a 45 f7             	mov    al,BYTE PTR [rbp-0x9]
  22c48c:	88 45 f8             	mov    BYTE PTR [rbp-0x8],al
  22c48f:	eb a2                	jmp    22c433 <digitToChar+0x93>
  22c491:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22c498:	0f 1f 84 00 00 00 00 
  22c49f:	00 

000000000022c4a0 <set>:
pub fn set(comptime T: type, dest: []T, value: T) void {
  22c4a0:	55                   	push   rbp
  22c4a1:	48 89 e5             	mov    rbp,rsp
  22c4a4:	48 83 ec 30          	sub    rsp,0x30
  22c4a8:	40 88 f0             	mov    al,sil
  22c4ab:	be aa 00 00 00       	mov    esi,0xaa
  22c4b0:	b9 08 00 00 00       	mov    ecx,0x8
  22c4b5:	89 ca                	mov    edx,ecx
  22c4b7:	4c 8d 45 f0          	lea    r8,[rbp-0x10]
  22c4bb:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
    for (dest) |*d|
  22c4be:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  22c4c2:	4c 89 c7             	mov    rdi,r8
  22c4c5:	e8 e6 83 00 00       	call   2348b0 <memset>
  22c4ca:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
  22c4d1:	00 
  22c4d2:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  22c4d6:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
  22c4da:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  22c4de:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22c4e2:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  22c4e6:	48 39 c8             	cmp    rax,rcx
  22c4e9:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  22c4ed:	73 26                	jae    22c515 <set+0x75>
  22c4ef:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  22c4f3:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  22c4f7:	48 03 01             	add    rax,QWORD PTR [rcx]
  22c4fa:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
        d.* = value;
  22c4fe:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22c502:	8a 55 ff             	mov    dl,BYTE PTR [rbp-0x1]
  22c505:	88 10                	mov    BYTE PTR [rax],dl
    for (dest) |*d|
  22c507:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  22c50b:	48 83 c0 01          	add    rax,0x1
  22c50f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  22c513:	eb c9                	jmp    22c4de <set+0x3e>
pub fn set(comptime T: type, dest: []T, value: T) void {
  22c515:	48 83 c4 30          	add    rsp,0x30
  22c519:	5d                   	pop    rbp
  22c51a:	c3                   	ret    
  22c51b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000022c520 <signbit64>:
fn signbit32(x: f32) bool {
    const bits = @bitCast(u32, x);
    return bits >> 31 != 0;
}

fn signbit64(x: f64) bool {
  22c520:	55                   	push   rbp
  22c521:	48 89 e5             	mov    rbp,rsp
  22c524:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    const bits = @bitCast(u64, x);
  22c529:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  22c52e:	c5 fb 11 45 f0       	vmovsd QWORD PTR [rbp-0x10],xmm0
    return bits >> 63 != 0;
  22c533:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22c537:	48 c1 e8 3f          	shr    rax,0x3f
  22c53b:	48 85 c0             	test   rax,rax
  22c53e:	0f 95 c0             	setne  al
  22c541:	5d                   	pop    rbp
  22c542:	c3                   	ret    
  22c543:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22c54a:	84 00 00 00 00 00 

000000000022c550 <tableLowerBound>:
        .digits = buffer[1..buf_index],
        .exp = exp,
    };
}

fn tableLowerBound(k: u64) usize {
  22c550:	55                   	push   rbp
  22c551:	48 89 e5             	mov    rbp,rsp
  22c554:	48 83 ec 60          	sub    rsp,0x60
  22c558:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    var i = enum3.len;
  22c55c:	48 c7 45 f0 b0 01 00 	mov    QWORD PTR [rbp-0x10],0x1b0
  22c563:	00 
    var j: usize = 0;
  22c564:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
  22c56b:	00 

    while (j < enum3.len) {
  22c56c:	48 81 7d e8 b0 01 00 	cmp    QWORD PTR [rbp-0x18],0x1b0
  22c573:	00 
  22c574:	73 5b                	jae    22c5d1 <tableLowerBound+0x81>
        if (enum3[j] < k) {
  22c576:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22c57a:	48 3d b0 01 00 00    	cmp    rax,0x1b0
  22c580:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  22c584:	72 65                	jb     22c5eb <tableLowerBound+0x9b>
  22c586:	eb 53                	jmp    22c5db <tableLowerBound+0x8b>
  22c588:	b8 02 00 00 00       	mov    eax,0x2
  22c58d:	89 c1                	mov    ecx,eax
            j = 2 * j + 2;
  22c58f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22c593:	48 f7 e1             	mul    rcx
  22c596:	40 0f 90 c6          	seto   sil
  22c59a:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  22c59e:	40 88 75 d7          	mov    BYTE PTR [rbp-0x29],sil
  22c5a2:	70 5e                	jo     22c602 <tableLowerBound+0xb2>
  22c5a4:	eb 6c                	jmp    22c612 <tableLowerBound+0xc2>
  22c5a6:	b8 02 00 00 00       	mov    eax,0x2
  22c5ab:	89 c1                	mov    ecx,eax
        } else {
            i = j;
  22c5ad:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  22c5b1:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
            j = 2 * j + 1;
  22c5b5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22c5b9:	48 f7 e1             	mul    rcx
  22c5bc:	40 0f 90 c6          	seto   sil
  22c5c0:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  22c5c4:	40 88 75 c7          	mov    BYTE PTR [rbp-0x39],sil
  22c5c8:	70 78                	jo     22c642 <tableLowerBound+0xf2>
  22c5ca:	e9 83 00 00 00       	jmp    22c652 <tableLowerBound+0x102>
    while (j < enum3.len) {
  22c5cf:	eb 9b                	jmp    22c56c <tableLowerBound+0x1c>
        }
    }

    return i;
  22c5d1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22c5d5:	48 83 c4 60          	add    rsp,0x60
  22c5d9:	5d                   	pop    rbp
  22c5da:	c3                   	ret    
  22c5db:	48 8d 3d 16 6e 01 00 	lea    rdi,[rip+0x16e16]        # 2433f8 <__unnamed_20>
  22c5e2:	31 c0                	xor    eax,eax
  22c5e4:	89 c6                	mov    esi,eax
        if (enum3[j] < k) {
  22c5e6:	e8 15 f0 fd ff       	call   20b600 <panic>
  22c5eb:	48 8d 05 46 58 fd ff 	lea    rax,[rip+0xfffffffffffd5846]        # 201e38 <enum3.12>
  22c5f2:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  22c5f6:	48 8b 04 c8          	mov    rax,QWORD PTR [rax+rcx*8]
  22c5fa:	48 3b 45 f8          	cmp    rax,QWORD PTR [rbp-0x8]
  22c5fe:	72 88                	jb     22c588 <tableLowerBound+0x38>
  22c600:	eb a4                	jmp    22c5a6 <tableLowerBound+0x56>
  22c602:	48 8d 3d bf 6b 01 00 	lea    rdi,[rip+0x16bbf]        # 2431c8 <__unnamed_4>
  22c609:	31 c0                	xor    eax,eax
  22c60b:	89 c6                	mov    esi,eax
            j = 2 * j + 2;
  22c60d:	e8 ee ef fd ff       	call   20b600 <panic>
  22c612:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  22c616:	48 83 c0 02          	add    rax,0x2
  22c61a:	0f 92 c1             	setb   cl
  22c61d:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  22c621:	88 4d b7             	mov    BYTE PTR [rbp-0x49],cl
  22c624:	72 02                	jb     22c628 <tableLowerBound+0xd8>
  22c626:	eb 10                	jmp    22c638 <tableLowerBound+0xe8>
  22c628:	48 8d 3d 99 6b 01 00 	lea    rdi,[rip+0x16b99]        # 2431c8 <__unnamed_4>
  22c62f:	31 c0                	xor    eax,eax
  22c631:	89 c6                	mov    esi,eax
  22c633:	e8 c8 ef fd ff       	call   20b600 <panic>
  22c638:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  22c63c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
        if (enum3[j] < k) {
  22c640:	eb 8d                	jmp    22c5cf <tableLowerBound+0x7f>
  22c642:	48 8d 3d 7f 6b 01 00 	lea    rdi,[rip+0x16b7f]        # 2431c8 <__unnamed_4>
  22c649:	31 c0                	xor    eax,eax
  22c64b:	89 c6                	mov    esi,eax
            j = 2 * j + 1;
  22c64d:	e8 ae ef fd ff       	call   20b600 <panic>
  22c652:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  22c656:	48 83 c0 01          	add    rax,0x1
  22c65a:	0f 92 c1             	setb   cl
  22c65d:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  22c661:	88 4d a7             	mov    BYTE PTR [rbp-0x59],cl
  22c664:	72 02                	jb     22c668 <tableLowerBound+0x118>
  22c666:	eb 10                	jmp    22c678 <tableLowerBound+0x128>
  22c668:	48 8d 3d 59 6b 01 00 	lea    rdi,[rip+0x16b59]        # 2431c8 <__unnamed_4>
  22c66f:	31 c0                	xor    eax,eax
  22c671:	89 c6                	mov    esi,eax
  22c673:	e8 88 ef fd ff       	call   20b600 <panic>
  22c678:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  22c67c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
        if (enum3[j] < k) {
  22c680:	e9 4a ff ff ff       	jmp    22c5cf <tableLowerBound+0x7f>
  22c685:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22c68c:	00 00 00 00 

000000000022c690 <errol3u>:
fn errol3u(val: f64, buffer: []u8) FloatDecimal {
  22c690:	55                   	push   rbp
  22c691:	48 89 e5             	mov    rbp,rsp
  22c694:	48 81 ec 70 02 00 00 	sub    rsp,0x270
  22c69b:	48 89 f8             	mov    rax,rdi
  22c69e:	c5 fb 10 0d fa 45 fd 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffd45fa]        # 200ca0 <__unnamed_190+0x8>
  22c6a5:	ff 
  22c6a6:	c5 fb 11 85 50 ff ff 	vmovsd QWORD PTR [rbp-0xb0],xmm0
  22c6ad:	ff 
    if (val > 9.007199254740992e15 and val < 3.40282366920938e+38) {
  22c6ae:	c5 fb 10 85 50 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xb0]
  22c6b5:	ff 
  22c6b6:	c5 f9 2e c1          	vucomisd xmm0,xmm1
  22c6ba:	0f 97 c1             	seta   cl
  22c6bd:	f6 c1 01             	test   cl,0x1
  22c6c0:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
  22c6c7:	48 89 b5 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rsi
  22c6ce:	48 89 bd d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rdi
  22c6d5:	88 8d cf fe ff ff    	mov    BYTE PTR [rbp-0x131],cl
  22c6db:	75 02                	jne    22c6df <errol3u+0x4f>
  22c6dd:	eb 19                	jmp    22c6f8 <errol3u+0x68>
  22c6df:	c5 fb 10 05 61 45 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd4561]        # 200c48 <app_mask+0x8>
  22c6e6:	ff 
  22c6e7:	c5 f9 2e 85 50 ff ff 	vucomisd xmm0,QWORD PTR [rbp-0xb0]
  22c6ee:	ff 
  22c6ef:	0f 97 c0             	seta   al
  22c6f2:	88 85 cf fe ff ff    	mov    BYTE PTR [rbp-0x131],al
  22c6f8:	8a 85 cf fe ff ff    	mov    al,BYTE PTR [rbp-0x131]
  22c6fe:	a8 01                	test   al,0x1
  22c700:	75 02                	jne    22c704 <errol3u+0x74>
  22c702:	eb 46                	jmp    22c74a <errol3u+0xba>
  22c704:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
        return errolInt(val, buffer);
  22c708:	c5 fb 10 85 50 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xb0]
  22c70f:	ff 
  22c710:	48 8b b5 d8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x128]
  22c717:	e8 34 0f 00 00       	call   22d650 <errolInt>
  22c71c:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  22c720:	48 8b bd d0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x130]
  22c727:	48 89 37             	mov    QWORD PTR [rdi],rsi
  22c72a:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  22c72e:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  22c732:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  22c736:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  22c73a:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
  22c741:	48 81 c4 70 02 00 00 	add    rsp,0x270
  22c748:	5d                   	pop    rbp
  22c749:	c3                   	ret    
  22c74a:	c5 fb 10 05 b6 44 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd44b6]        # 200c08 <__unnamed_186+0x8>
  22c751:	ff 
    } else if (val >= 16.0 and val < 9.007199254740992e15) {
  22c752:	c5 fb 10 8d 50 ff ff 	vmovsd xmm1,QWORD PTR [rbp-0xb0]
  22c759:	ff 
  22c75a:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22c75e:	0f 93 c0             	setae  al
  22c761:	a8 01                	test   al,0x1
  22c763:	88 85 ce fe ff ff    	mov    BYTE PTR [rbp-0x132],al
  22c769:	75 02                	jne    22c76d <errol3u+0xdd>
  22c76b:	eb 19                	jmp    22c786 <errol3u+0xf6>
  22c76d:	c5 fb 10 05 2b 45 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd452b]        # 200ca0 <__unnamed_190+0x8>
  22c774:	ff 
  22c775:	c5 f9 2e 85 50 ff ff 	vucomisd xmm0,QWORD PTR [rbp-0xb0]
  22c77c:	ff 
  22c77d:	0f 97 c0             	seta   al
  22c780:	88 85 ce fe ff ff    	mov    BYTE PTR [rbp-0x132],al
  22c786:	8a 85 ce fe ff ff    	mov    al,BYTE PTR [rbp-0x132]
  22c78c:	a8 01                	test   al,0x1
  22c78e:	75 02                	jne    22c792 <errol3u+0x102>
  22c790:	eb 46                	jmp    22c7d8 <errol3u+0x148>
  22c792:	48 8d 7d d0          	lea    rdi,[rbp-0x30]
        return errolFixed(val, buffer);
  22c796:	c5 fb 10 85 50 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xb0]
  22c79d:	ff 
  22c79e:	48 8b b5 d8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x128]
  22c7a5:	e8 a6 1a 00 00       	call   22e250 <errolFixed>
  22c7aa:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  22c7ae:	48 8b bd d0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x130]
  22c7b5:	48 89 37             	mov    QWORD PTR [rdi],rsi
  22c7b8:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  22c7bc:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  22c7c0:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  22c7c4:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  22c7c8:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
  22c7cf:	48 81 c4 70 02 00 00 	add    rsp,0x270
  22c7d6:	5d                   	pop    rbp
  22c7d7:	c3                   	ret    
    } else if (val >= 16.0 and val < 9.007199254740992e15) {
  22c7d8:	eb 00                	jmp    22c7da <errol3u+0x14a>
    if (val > 9.007199254740992e15 and val < 3.40282366920938e+38) {
  22c7da:	eb 00                	jmp    22c7dc <errol3u+0x14c>
  22c7dc:	c5 fb 10 05 2c 44 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd442c]        # 200c10 <__unnamed_186+0x10>
  22c7e3:	ff 
  22c7e4:	c5 fb 10 0d 0c 44 fd 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffd440c]        # 200bf8 <__unnamed_187+0x8>
  22c7eb:	ff 
    const e = math.frexp(val).exponent;
  22c7ec:	c5 fb 10 95 50 ff ff 	vmovsd xmm2,QWORD PTR [rbp-0xb0]
  22c7f3:	ff 
  22c7f4:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  22c7f8:	c5 fb 11 85 c0 fe ff 	vmovsd QWORD PTR [rbp-0x140],xmm0
  22c7ff:	ff 
  22c800:	c5 f8 28 c2          	vmovaps xmm0,xmm2
  22c804:	c5 fb 11 8d b8 fe ff 	vmovsd QWORD PTR [rbp-0x148],xmm1
  22c80b:	ff 
  22c80c:	e8 0f 24 00 00       	call   22ec20 <frexp>
  22c811:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  22c814:	89 85 4c ff ff ff    	mov    DWORD PTR [rbp-0xb4],eax
    var exp = @floatToInt(i16, math.floor(307 + @intToFloat(f64, e) * 0.30103));
  22c81a:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [rbp-0xb4]
  22c820:	c5 fb 2a c0          	vcvtsi2sd xmm0,xmm0,eax
  22c824:	c5 fb 10 0d fc 43 fd 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffd43fc]        # 200c28 <__unnamed_186+0x28>
  22c82b:	ff 
  22c82c:	c5 fb 10 15 e4 43 fd 	vmovsd xmm2,QWORD PTR [rip+0xfffffffffffd43e4]        # 200c18 <__unnamed_186+0x18>
  22c833:	ff 
  22c834:	c4 e2 f9 a9 d1       	vfmadd213sd xmm2,xmm0,xmm1
  22c839:	c5 f8 28 c2          	vmovaps xmm0,xmm2
  22c83d:	e8 2e 24 00 00       	call   22ec70 <floor.0>
  22c842:	c5 f8 28 c8          	vmovaps xmm1,xmm0
  22c846:	c5 fb 2c c0          	vcvttsd2si eax,xmm0
  22c84a:	66 89 c1             	mov    cx,ax
  22c84d:	0f bf c1             	movsx  eax,cx
  22c850:	c5 fb 2a c0          	vcvtsi2sd xmm0,xmm0,eax
  22c854:	c5 f3 5c c0          	vsubsd xmm0,xmm1,xmm0
  22c858:	c5 fb 10 8d b8 fe ff 	vmovsd xmm1,QWORD PTR [rbp-0x148]
  22c85f:	ff 
  22c860:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22c864:	0f 97 c2             	seta   dl
  22c867:	c5 fb 10 95 c0 fe ff 	vmovsd xmm2,QWORD PTR [rbp-0x140]
  22c86e:	ff 
  22c86f:	c5 f9 2e c2          	vucomisd xmm0,xmm2
  22c873:	40 0f 97 c6          	seta   sil
  22c877:	40 20 f2             	and    dl,sil
  22c87a:	f6 c2 01             	test   dl,0x1
  22c87d:	66 89 8d b6 fe ff ff 	mov    WORD PTR [rbp-0x14a],cx
  22c884:	0f 85 61 05 00 00    	jne    22cdeb <errol3u+0x75b>
  22c88a:	e9 7d 05 00 00       	jmp    22ce0c <errol3u+0x77c>
        exp = 20;
  22c88f:	66 c7 85 4a ff ff ff 	mov    WORD PTR [rbp-0xb6],0x14
  22c896:	14 00 
    if (exp < 20) {
  22c898:	eb 1f                	jmp    22c8b9 <errol3u+0x229>
    } else if (@intCast(usize, exp) >= lookup_table.len) {
  22c89a:	48 0f bf 85 4a ff ff 	movsx  rax,WORD PTR [rbp-0xb6]
  22c8a1:	ff 
  22c8a2:	48 3d 58 02 00 00    	cmp    rax,0x258
  22c8a8:	72 0b                	jb     22c8b5 <errol3u+0x225>
        exp = @intCast(i16, lookup_table.len - 1);
  22c8aa:	66 c7 85 4a ff ff ff 	mov    WORD PTR [rbp-0xb6],0x257
  22c8b1:	57 02 
    } else if (@intCast(usize, exp) >= lookup_table.len) {
  22c8b3:	eb 02                	jmp    22c8b7 <errol3u+0x227>
  22c8b5:	eb 00                	jmp    22c8b7 <errol3u+0x227>
    if (exp < 20) {
  22c8b7:	eb 00                	jmp    22c8b9 <errol3u+0x229>
    var mid = lookup_table[@intCast(usize, exp)];
  22c8b9:	48 0f bf 85 4a ff ff 	movsx  rax,WORD PTR [rbp-0xb6]
  22c8c0:	ff 
  22c8c1:	48 3d 58 02 00 00    	cmp    rax,0x258
  22c8c7:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
  22c8ce:	0f 82 58 05 00 00    	jb     22ce2c <errol3u+0x79c>
  22c8d4:	e9 43 05 00 00       	jmp    22ce1c <errol3u+0x78c>
  22c8d9:	c5 fb 10 05 07 43 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd4307]        # 200be8 <__unnamed_185+0x18>
  22c8e0:	ff 
    while (mid.val > 10.0 or (mid.val == 10.0 and mid.off >= 0.0)) {
  22c8e1:	c5 fb 10 8d 38 ff ff 	vmovsd xmm1,QWORD PTR [rbp-0xc8]
  22c8e8:	ff 
  22c8e9:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22c8ed:	0f 97 c0             	seta   al
  22c8f0:	a8 01                	test   al,0x1
  22c8f2:	88 85 a7 fe ff ff    	mov    BYTE PTR [rbp-0x159],al
  22c8f8:	75 4d                	jne    22c947 <errol3u+0x2b7>
  22c8fa:	c5 fb 10 05 e6 42 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd42e6]        # 200be8 <__unnamed_185+0x18>
  22c901:	ff 
  22c902:	c5 fb 10 8d 38 ff ff 	vmovsd xmm1,QWORD PTR [rbp-0xc8]
  22c909:	ff 
  22c90a:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22c90e:	0f 94 c0             	sete   al
  22c911:	0f 9b c1             	setnp  cl
  22c914:	20 c8                	and    al,cl
  22c916:	a8 01                	test   al,0x1
  22c918:	88 85 a6 fe ff ff    	mov    BYTE PTR [rbp-0x15a],al
  22c91e:	75 02                	jne    22c922 <errol3u+0x292>
  22c920:	eb 19                	jmp    22c93b <errol3u+0x2ab>
  22c922:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
  22c926:	c5 fb 10 8d 40 ff ff 	vmovsd xmm1,QWORD PTR [rbp-0xc0]
  22c92d:	ff 
  22c92e:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22c932:	0f 93 c0             	setae  al
  22c935:	88 85 a6 fe ff ff    	mov    BYTE PTR [rbp-0x15a],al
  22c93b:	8a 85 a6 fe ff ff    	mov    al,BYTE PTR [rbp-0x15a]
  22c941:	88 85 a7 fe ff ff    	mov    BYTE PTR [rbp-0x159],al
  22c947:	8a 85 a7 fe ff ff    	mov    al,BYTE PTR [rbp-0x159]
  22c94d:	a8 01                	test   al,0x1
  22c94f:	75 02                	jne    22c953 <errol3u+0x2c3>
  22c951:	eb 22                	jmp    22c975 <errol3u+0x2e5>
        exp += 1;
  22c953:	66 8b 85 4a ff ff ff 	mov    ax,WORD PTR [rbp-0xb6]
  22c95a:	66 ff c0             	inc    ax
  22c95d:	0f 90 c1             	seto   cl
  22c960:	f6 c1 01             	test   cl,0x1
  22c963:	66 89 85 a4 fe ff ff 	mov    WORD PTR [rbp-0x15c],ax
  22c96a:	0f 85 ae 05 00 00    	jne    22cf1e <errol3u+0x88e>
  22c970:	e9 b9 05 00 00       	jmp    22cf2e <errol3u+0x89e>
    while (mid.val < 1.0 or (mid.val == 1.0 and mid.off < 0.0)) {
  22c975:	eb 00                	jmp    22c977 <errol3u+0x2e7>
  22c977:	c5 fb 10 05 79 42 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd4279]        # 200bf8 <__unnamed_187+0x8>
  22c97e:	ff 
  22c97f:	c5 f9 2e 85 38 ff ff 	vucomisd xmm0,QWORD PTR [rbp-0xc8]
  22c986:	ff 
  22c987:	0f 97 c0             	seta   al
  22c98a:	a8 01                	test   al,0x1
  22c98c:	88 85 a3 fe ff ff    	mov    BYTE PTR [rbp-0x15d],al
  22c992:	75 49                	jne    22c9dd <errol3u+0x34d>
  22c994:	c5 fb 10 05 5c 42 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd425c]        # 200bf8 <__unnamed_187+0x8>
  22c99b:	ff 
  22c99c:	c5 fb 10 8d 38 ff ff 	vmovsd xmm1,QWORD PTR [rbp-0xc8]
  22c9a3:	ff 
  22c9a4:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22c9a8:	0f 94 c0             	sete   al
  22c9ab:	0f 9b c1             	setnp  cl
  22c9ae:	20 c8                	and    al,cl
  22c9b0:	a8 01                	test   al,0x1
  22c9b2:	88 85 a2 fe ff ff    	mov    BYTE PTR [rbp-0x15e],al
  22c9b8:	75 02                	jne    22c9bc <errol3u+0x32c>
  22c9ba:	eb 15                	jmp    22c9d1 <errol3u+0x341>
  22c9bc:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
  22c9c0:	c5 f9 2e 85 40 ff ff 	vucomisd xmm0,QWORD PTR [rbp-0xc0]
  22c9c7:	ff 
  22c9c8:	0f 97 c0             	seta   al
  22c9cb:	88 85 a2 fe ff ff    	mov    BYTE PTR [rbp-0x15e],al
  22c9d1:	8a 85 a2 fe ff ff    	mov    al,BYTE PTR [rbp-0x15e]
  22c9d7:	88 85 a3 fe ff ff    	mov    BYTE PTR [rbp-0x15d],al
  22c9dd:	8a 85 a3 fe ff ff    	mov    al,BYTE PTR [rbp-0x15d]
  22c9e3:	a8 01                	test   al,0x1
  22c9e5:	75 02                	jne    22c9e9 <errol3u+0x359>
  22c9e7:	eb 22                	jmp    22ca0b <errol3u+0x37b>
        exp -= 1;
  22c9e9:	66 8b 85 4a ff ff ff 	mov    ax,WORD PTR [rbp-0xb6]
  22c9f0:	66 ff c8             	dec    ax
  22c9f3:	0f 90 c1             	seto   cl
  22c9f6:	f6 c1 01             	test   cl,0x1
  22c9f9:	66 89 85 a0 fe ff ff 	mov    WORD PTR [rbp-0x160],ax
  22ca00:	0f 85 8c 05 00 00    	jne    22cf92 <errol3u+0x902>
  22ca06:	e9 97 05 00 00       	jmp    22cfa2 <errol3u+0x912>
        .val = mid.val,
  22ca0b:	c5 fb 10 85 38 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xc8]
  22ca12:	ff 
        .off = mid.off + (fpnext(val) - val) * lten * ten / 2.0,
  22ca13:	c5 fb 10 8d 40 ff ff 	vmovsd xmm1,QWORD PTR [rbp-0xc0]
  22ca1a:	ff 
  22ca1b:	c5 fb 10 95 50 ff ff 	vmovsd xmm2,QWORD PTR [rbp-0xb0]
  22ca22:	ff 
  22ca23:	c5 fb 11 85 98 fe ff 	vmovsd QWORD PTR [rbp-0x168],xmm0
  22ca2a:	ff 
  22ca2b:	c5 f8 28 c2          	vmovaps xmm0,xmm2
  22ca2f:	c5 fb 11 8d 90 fe ff 	vmovsd QWORD PTR [rbp-0x170],xmm1
  22ca36:	ff 
  22ca37:	e8 e4 25 00 00       	call   22f020 <fpnext>
  22ca3c:	31 c0                	xor    eax,eax
  22ca3e:	88 c1                	mov    cl,al
  22ca40:	c5 fb 5c 85 50 ff ff 	vsubsd xmm0,xmm0,QWORD PTR [rbp-0xb0]
  22ca47:	ff 
  22ca48:	c5 fb 59 85 30 ff ff 	vmulsd xmm0,xmm0,QWORD PTR [rbp-0xd0]
  22ca4f:	ff 
  22ca50:	c5 fb 59 85 28 ff ff 	vmulsd xmm0,xmm0,QWORD PTR [rbp-0xd8]
  22ca57:	ff 
  22ca58:	f6 c1 01             	test   cl,0x1
  22ca5b:	c5 fb 11 85 88 fe ff 	vmovsd QWORD PTR [rbp-0x178],xmm0
  22ca62:	ff 
  22ca63:	0f 85 14 06 00 00    	jne    22d07d <errol3u+0x9ed>
  22ca69:	e9 6b 05 00 00       	jmp    22cfd9 <errol3u+0x949>
  22ca6e:	c5 fb 10 05 72 41 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd4172]        # 200be8 <__unnamed_185+0x18>
  22ca75:	ff 
    while (high.val > 10.0 or (high.val == 10.0 and high.off >= 0.0)) {
  22ca76:	c5 fb 10 8d 18 ff ff 	vmovsd xmm1,QWORD PTR [rbp-0xe8]
  22ca7d:	ff 
  22ca7e:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22ca82:	0f 97 c0             	seta   al
  22ca85:	a8 01                	test   al,0x1
  22ca87:	88 85 87 fe ff ff    	mov    BYTE PTR [rbp-0x179],al
  22ca8d:	75 4d                	jne    22cadc <errol3u+0x44c>
  22ca8f:	c5 fb 10 05 51 41 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd4151]        # 200be8 <__unnamed_185+0x18>
  22ca96:	ff 
  22ca97:	c5 fb 10 8d 18 ff ff 	vmovsd xmm1,QWORD PTR [rbp-0xe8]
  22ca9e:	ff 
  22ca9f:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22caa3:	0f 94 c0             	sete   al
  22caa6:	0f 9b c1             	setnp  cl
  22caa9:	20 c8                	and    al,cl
  22caab:	a8 01                	test   al,0x1
  22caad:	88 85 86 fe ff ff    	mov    BYTE PTR [rbp-0x17a],al
  22cab3:	75 02                	jne    22cab7 <errol3u+0x427>
  22cab5:	eb 19                	jmp    22cad0 <errol3u+0x440>
  22cab7:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
  22cabb:	c5 fb 10 8d 20 ff ff 	vmovsd xmm1,QWORD PTR [rbp-0xe0]
  22cac2:	ff 
  22cac3:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22cac7:	0f 93 c0             	setae  al
  22caca:	88 85 86 fe ff ff    	mov    BYTE PTR [rbp-0x17a],al
  22cad0:	8a 85 86 fe ff ff    	mov    al,BYTE PTR [rbp-0x17a]
  22cad6:	88 85 87 fe ff ff    	mov    BYTE PTR [rbp-0x179],al
  22cadc:	8a 85 87 fe ff ff    	mov    al,BYTE PTR [rbp-0x179]
  22cae2:	a8 01                	test   al,0x1
  22cae4:	75 02                	jne    22cae8 <errol3u+0x458>
  22cae6:	eb 22                	jmp    22cb0a <errol3u+0x47a>
        exp += 1;
  22cae8:	66 8b 85 4a ff ff ff 	mov    ax,WORD PTR [rbp-0xb6]
  22caef:	66 ff c0             	inc    ax
  22caf2:	0f 90 c1             	seto   cl
  22caf5:	f6 c1 01             	test   cl,0x1
  22caf8:	66 89 85 84 fe ff ff 	mov    WORD PTR [rbp-0x17c],ax
  22caff:	0f 85 fd 05 00 00    	jne    22d102 <errol3u+0xa72>
  22cb05:	e9 08 06 00 00       	jmp    22d112 <errol3u+0xa82>
    while (high.val < 1.0 or (high.val == 1.0 and high.off < 0.0)) {
  22cb0a:	eb 00                	jmp    22cb0c <errol3u+0x47c>
  22cb0c:	c5 fb 10 05 e4 40 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd40e4]        # 200bf8 <__unnamed_187+0x8>
  22cb13:	ff 
  22cb14:	c5 f9 2e 85 18 ff ff 	vucomisd xmm0,QWORD PTR [rbp-0xe8]
  22cb1b:	ff 
  22cb1c:	0f 97 c0             	seta   al
  22cb1f:	a8 01                	test   al,0x1
  22cb21:	88 85 83 fe ff ff    	mov    BYTE PTR [rbp-0x17d],al
  22cb27:	75 49                	jne    22cb72 <errol3u+0x4e2>
  22cb29:	c5 fb 10 05 c7 40 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd40c7]        # 200bf8 <__unnamed_187+0x8>
  22cb30:	ff 
  22cb31:	c5 fb 10 8d 18 ff ff 	vmovsd xmm1,QWORD PTR [rbp-0xe8]
  22cb38:	ff 
  22cb39:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22cb3d:	0f 94 c0             	sete   al
  22cb40:	0f 9b c1             	setnp  cl
  22cb43:	20 c8                	and    al,cl
  22cb45:	a8 01                	test   al,0x1
  22cb47:	88 85 82 fe ff ff    	mov    BYTE PTR [rbp-0x17e],al
  22cb4d:	75 02                	jne    22cb51 <errol3u+0x4c1>
  22cb4f:	eb 15                	jmp    22cb66 <errol3u+0x4d6>
  22cb51:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
  22cb55:	c5 f9 2e 85 20 ff ff 	vucomisd xmm0,QWORD PTR [rbp-0xe0]
  22cb5c:	ff 
  22cb5d:	0f 97 c0             	seta   al
  22cb60:	88 85 82 fe ff ff    	mov    BYTE PTR [rbp-0x17e],al
  22cb66:	8a 85 82 fe ff ff    	mov    al,BYTE PTR [rbp-0x17e]
  22cb6c:	88 85 83 fe ff ff    	mov    BYTE PTR [rbp-0x17d],al
  22cb72:	8a 85 83 fe ff ff    	mov    al,BYTE PTR [rbp-0x17d]
  22cb78:	a8 01                	test   al,0x1
  22cb7a:	75 02                	jne    22cb7e <errol3u+0x4ee>
  22cb7c:	eb 22                	jmp    22cba0 <errol3u+0x510>
        exp -= 1;
  22cb7e:	66 8b 85 4a ff ff ff 	mov    ax,WORD PTR [rbp-0xb6]
  22cb85:	66 ff c8             	dec    ax
  22cb88:	0f 90 c1             	seto   cl
  22cb8b:	f6 c1 01             	test   cl,0x1
  22cb8e:	66 89 85 80 fe ff ff 	mov    WORD PTR [rbp-0x180],ax
  22cb95:	0f 85 a2 05 00 00    	jne    22d13d <errol3u+0xaad>
  22cb9b:	e9 ad 05 00 00       	jmp    22d14d <errol3u+0xabd>
    var buf_index: usize = 1;
  22cba0:	48 c7 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],0x1
  22cba7:	01 00 00 00 
    while (true) {
  22cbab:	eb 00                	jmp    22cbad <errol3u+0x51d>
  22cbad:	c5 fb 10 05 5b 40 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd405b]        # 200c10 <__unnamed_186+0x10>
  22cbb4:	ff 
  22cbb5:	c5 fb 10 0d 3b 40 fd 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffd403b]        # 200bf8 <__unnamed_187+0x8>
  22cbbc:	ff 
        var hdig = @floatToInt(u8, math.floor(high.val));
  22cbbd:	c5 fb 10 95 18 ff ff 	vmovsd xmm2,QWORD PTR [rbp-0xe8]
  22cbc4:	ff 
  22cbc5:	c5 fb 11 85 78 fe ff 	vmovsd QWORD PTR [rbp-0x188],xmm0
  22cbcc:	ff 
  22cbcd:	c5 f8 28 c2          	vmovaps xmm0,xmm2
  22cbd1:	c5 fb 11 8d 70 fe ff 	vmovsd QWORD PTR [rbp-0x190],xmm1
  22cbd8:	ff 
  22cbd9:	e8 92 20 00 00       	call   22ec70 <floor.0>
  22cbde:	c5 f8 28 c8          	vmovaps xmm1,xmm0
  22cbe2:	c5 fb 2c c0          	vcvttsd2si eax,xmm0
  22cbe6:	88 c1                	mov    cl,al
  22cbe8:	0f b6 c1             	movzx  eax,cl
  22cbeb:	c5 fb 2a c0          	vcvtsi2sd xmm0,xmm0,eax
  22cbef:	c5 f3 5c c0          	vsubsd xmm0,xmm1,xmm0
  22cbf3:	c5 fb 10 8d 70 fe ff 	vmovsd xmm1,QWORD PTR [rbp-0x190]
  22cbfa:	ff 
  22cbfb:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22cbff:	0f 97 c2             	seta   dl
  22cc02:	c5 fb 10 95 78 fe ff 	vmovsd xmm2,QWORD PTR [rbp-0x188]
  22cc09:	ff 
  22cc0a:	c5 f9 2e c2          	vucomisd xmm0,xmm2
  22cc0e:	40 0f 97 c6          	seta   sil
  22cc12:	40 20 f2             	and    dl,sil
  22cc15:	f6 c2 01             	test   dl,0x1
  22cc18:	88 8d 6f fe ff ff    	mov    BYTE PTR [rbp-0x191],cl
  22cc1e:	0f 85 54 05 00 00    	jne    22d178 <errol3u+0xae8>
  22cc24:	e9 90 05 00 00       	jmp    22d1b9 <errol3u+0xb29>
  22cc29:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
        if ((high.val == @intToFloat(f64, hdig)) and (high.off < 0)) hdig -= 1;
  22cc2d:	c5 f9 2e 85 20 ff ff 	vucomisd xmm0,QWORD PTR [rbp-0xe0]
  22cc34:	ff 
  22cc35:	0f 97 c0             	seta   al
  22cc38:	88 85 6e fe ff ff    	mov    BYTE PTR [rbp-0x192],al
  22cc3e:	8a 85 6e fe ff ff    	mov    al,BYTE PTR [rbp-0x192]
  22cc44:	a8 01                	test   al,0x1
  22cc46:	75 02                	jne    22cc4a <errol3u+0x5ba>
  22cc48:	eb 1f                	jmp    22cc69 <errol3u+0x5d9>
  22cc4a:	8a 85 ff fe ff ff    	mov    al,BYTE PTR [rbp-0x101]
  22cc50:	2c 01                	sub    al,0x1
  22cc52:	0f 92 c1             	setb   cl
  22cc55:	f6 c1 01             	test   cl,0x1
  22cc58:	88 85 6d fe ff ff    	mov    BYTE PTR [rbp-0x193],al
  22cc5e:	0f 85 65 05 00 00    	jne    22d1c9 <errol3u+0xb39>
  22cc64:	e9 70 05 00 00       	jmp    22d1d9 <errol3u+0xb49>
  22cc69:	eb 00                	jmp    22cc6b <errol3u+0x5db>
  22cc6b:	c5 fb 10 05 9d 3f fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd3f9d]        # 200c10 <__unnamed_186+0x10>
  22cc72:	ff 
  22cc73:	c5 fb 10 0d 7d 3f fd 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffd3f7d]        # 200bf8 <__unnamed_187+0x8>
  22cc7a:	ff 
        var ldig = @floatToInt(u8, math.floor(low.val));
  22cc7b:	c5 fb 10 95 08 ff ff 	vmovsd xmm2,QWORD PTR [rbp-0xf8]
  22cc82:	ff 
  22cc83:	c5 fb 11 85 60 fe ff 	vmovsd QWORD PTR [rbp-0x1a0],xmm0
  22cc8a:	ff 
  22cc8b:	c5 f8 28 c2          	vmovaps xmm0,xmm2
  22cc8f:	c5 fb 11 8d 58 fe ff 	vmovsd QWORD PTR [rbp-0x1a8],xmm1
  22cc96:	ff 
  22cc97:	e8 d4 1f 00 00       	call   22ec70 <floor.0>
  22cc9c:	c5 f8 28 c8          	vmovaps xmm1,xmm0
  22cca0:	c5 fb 2c c0          	vcvttsd2si eax,xmm0
  22cca4:	88 c1                	mov    cl,al
  22cca6:	0f b6 c1             	movzx  eax,cl
  22cca9:	c5 fb 2a c0          	vcvtsi2sd xmm0,xmm0,eax
  22ccad:	c5 f3 5c c0          	vsubsd xmm0,xmm1,xmm0
  22ccb1:	c5 fb 10 8d 58 fe ff 	vmovsd xmm1,QWORD PTR [rbp-0x1a8]
  22ccb8:	ff 
  22ccb9:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22ccbd:	0f 97 c2             	seta   dl
  22ccc0:	c5 fb 10 95 60 fe ff 	vmovsd xmm2,QWORD PTR [rbp-0x1a0]
  22ccc7:	ff 
  22ccc8:	c5 f9 2e c2          	vucomisd xmm0,xmm2
  22cccc:	40 0f 97 c6          	seta   sil
  22ccd0:	40 20 f2             	and    dl,sil
  22ccd3:	f6 c2 01             	test   dl,0x1
  22ccd6:	88 8d 57 fe ff ff    	mov    BYTE PTR [rbp-0x1a9],cl
  22ccdc:	0f 85 08 05 00 00    	jne    22d1ea <errol3u+0xb5a>
  22cce2:	e9 44 05 00 00       	jmp    22d22b <errol3u+0xb9b>
  22cce7:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
        if ((low.val == @intToFloat(f64, ldig)) and (low.off < 0)) ldig -= 1;
  22cceb:	c5 f9 2e 85 10 ff ff 	vucomisd xmm0,QWORD PTR [rbp-0xf0]
  22ccf2:	ff 
  22ccf3:	0f 97 c0             	seta   al
  22ccf6:	88 85 56 fe ff ff    	mov    BYTE PTR [rbp-0x1aa],al
  22ccfc:	8a 85 56 fe ff ff    	mov    al,BYTE PTR [rbp-0x1aa]
  22cd02:	a8 01                	test   al,0x1
  22cd04:	75 02                	jne    22cd08 <errol3u+0x678>
  22cd06:	eb 1f                	jmp    22cd27 <errol3u+0x697>
  22cd08:	8a 85 fe fe ff ff    	mov    al,BYTE PTR [rbp-0x102]
  22cd0e:	2c 01                	sub    al,0x1
  22cd10:	0f 92 c1             	setb   cl
  22cd13:	f6 c1 01             	test   cl,0x1
  22cd16:	88 85 55 fe ff ff    	mov    BYTE PTR [rbp-0x1ab],al
  22cd1c:	0f 85 19 05 00 00    	jne    22d23b <errol3u+0xbab>
  22cd22:	e9 24 05 00 00       	jmp    22d24b <errol3u+0xbbb>
  22cd27:	eb 00                	jmp    22cd29 <errol3u+0x699>
        if (ldig != hdig) break;
  22cd29:	8a 85 fe fe ff ff    	mov    al,BYTE PTR [rbp-0x102]
  22cd2f:	3a 85 ff fe ff ff    	cmp    al,BYTE PTR [rbp-0x101]
  22cd35:	74 02                	je     22cd39 <errol3u+0x6a9>
  22cd37:	eb 24                	jmp    22cd5d <errol3u+0x6cd>
        buffer[buf_index] = hdig + '0';
  22cd39:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  22cd40:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
  22cd47:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22cd4b:	48 89 85 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rax
  22cd52:	0f 82 14 05 00 00    	jb     22d26c <errol3u+0xbdc>
  22cd58:	e9 ff 04 00 00       	jmp    22d25c <errol3u+0xbcc>
  22cd5d:	31 c0                	xor    eax,eax
  22cd5f:	88 c1                	mov    cl,al
    const tmp = (high.val + low.val) / 2.0;
  22cd61:	c5 fb 10 85 18 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xe8]
  22cd68:	ff 
  22cd69:	c5 fb 58 85 08 ff ff 	vaddsd xmm0,xmm0,QWORD PTR [rbp-0xf8]
  22cd70:	ff 
  22cd71:	f6 c1 01             	test   cl,0x1
  22cd74:	c5 fb 11 85 40 fe ff 	vmovsd QWORD PTR [rbp-0x1c0],xmm0
  22cd7b:	ff 
  22cd7c:	0f 85 73 06 00 00    	jne    22d3f5 <errol3u+0xd65>
  22cd82:	e9 d1 05 00 00       	jmp    22d358 <errol3u+0xcc8>
    if ((@intToFloat(f64, mdig) - tmp) == 0.5 and (mdig & 0x1) != 0) mdig -= 1;
  22cd87:	8a 85 ef fe ff ff    	mov    al,BYTE PTR [rbp-0x111]
  22cd8d:	24 01                	and    al,0x1
  22cd8f:	3c 00                	cmp    al,0x0
  22cd91:	0f 95 c0             	setne  al
  22cd94:	88 85 3f fe ff ff    	mov    BYTE PTR [rbp-0x1c1],al
  22cd9a:	8a 85 3f fe ff ff    	mov    al,BYTE PTR [rbp-0x1c1]
  22cda0:	a8 01                	test   al,0x1
  22cda2:	75 02                	jne    22cda6 <errol3u+0x716>
  22cda4:	eb 1f                	jmp    22cdc5 <errol3u+0x735>
  22cda6:	8a 85 ef fe ff ff    	mov    al,BYTE PTR [rbp-0x111]
  22cdac:	2c 01                	sub    al,0x1
  22cdae:	0f 92 c1             	setb   cl
  22cdb1:	f6 c1 01             	test   cl,0x1
  22cdb4:	88 85 3e fe ff ff    	mov    BYTE PTR [rbp-0x1c2],al
  22cdba:	0f 85 9e 06 00 00    	jne    22d45e <errol3u+0xdce>
  22cdc0:	e9 a9 06 00 00       	jmp    22d46e <errol3u+0xdde>
  22cdc5:	eb 00                	jmp    22cdc7 <errol3u+0x737>
    buffer[buf_index] = mdig + '0';
  22cdc7:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  22cdce:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
  22cdd5:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22cdd9:	48 89 85 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rax
  22cde0:	0f 82 a9 06 00 00    	jb     22d48f <errol3u+0xdff>
  22cde6:	e9 94 06 00 00       	jmp    22d47f <errol3u+0xdef>
    var exp = @floatToInt(i16, math.floor(307 + @intToFloat(f64, e) * 0.30103));
  22cdeb:	66 8b 85 b6 fe ff ff 	mov    ax,WORD PTR [rbp-0x14a]
  22cdf2:	66 89 85 4a ff ff ff 	mov    WORD PTR [rbp-0xb6],ax
    if (exp < 20) {
  22cdf9:	66 83 bd 4a ff ff ff 	cmp    WORD PTR [rbp-0xb6],0x14
  22ce00:	14 
  22ce01:	0f 8c 88 fa ff ff    	jl     22c88f <errol3u+0x1ff>
  22ce07:	e9 8e fa ff ff       	jmp    22c89a <errol3u+0x20a>
  22ce0c:	48 8d 3d ed 6c 01 00 	lea    rdi,[rip+0x16ced]        # 243b00 <__unnamed_227>
  22ce13:	31 c0                	xor    eax,eax
  22ce15:	89 c6                	mov    esi,eax
    var exp = @floatToInt(i16, math.floor(307 + @intToFloat(f64, e) * 0.30103));
  22ce17:	e8 e4 e7 fd ff       	call   20b600 <panic>
  22ce1c:	48 8d 3d d5 65 01 00 	lea    rdi,[rip+0x165d5]        # 2433f8 <__unnamed_20>
  22ce23:	31 c0                	xor    eax,eax
  22ce25:	89 c6                	mov    esi,eax
    var mid = lookup_table[@intCast(usize, exp)];
  22ce27:	e8 d4 e7 fd ff       	call   20b600 <panic>
  22ce2c:	48 8d 7d a0          	lea    rdi,[rbp-0x60]
  22ce30:	48 8d b5 38 ff ff ff 	lea    rsi,[rbp-0xc8]
  22ce37:	48 8d 05 62 96 fd ff 	lea    rax,[rip+0xfffffffffffd9662]        # 2064a0 <lookup_table.15>
  22ce3e:	48 8b 8d a8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x158]
  22ce45:	48 c1 e1 04          	shl    rcx,0x4
  22ce49:	48 01 c8             	add    rax,rcx
  22ce4c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22ce4f:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  22ce56:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  22ce5a:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
    mid = hpProd(mid, val);
  22ce61:	c5 fb 10 85 50 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xb0]
  22ce68:	ff 
  22ce69:	e8 22 1e 00 00       	call   22ec90 <hpProd>
  22ce6e:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22ce72:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
  22ce79:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  22ce7d:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
    const lten = lookup_table[@intCast(usize, exp)].val;
  22ce84:	48 0f bf 85 4a ff ff 	movsx  rax,WORD PTR [rbp-0xb6]
  22ce8b:	ff 
  22ce8c:	48 3d 58 02 00 00    	cmp    rax,0x258
  22ce92:	48 89 85 28 fe ff ff 	mov    QWORD PTR [rbp-0x1d8],rax
  22ce99:	72 10                	jb     22ceab <errol3u+0x81b>
  22ce9b:	48 8d 3d 56 65 01 00 	lea    rdi,[rip+0x16556]        # 2433f8 <__unnamed_20>
  22cea2:	31 c0                	xor    eax,eax
  22cea4:	89 c6                	mov    esi,eax
  22cea6:	e8 55 e7 fd ff       	call   20b600 <panic>
  22ceab:	48 8d 05 ee 95 fd ff 	lea    rax,[rip+0xfffffffffffd95ee]        # 2064a0 <lookup_table.15>
  22ceb2:	48 8b 8d 28 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d8]
  22ceb9:	48 c1 e1 04          	shl    rcx,0x4
  22cebd:	48 01 c8             	add    rax,rcx
  22cec0:	c5 fb 10 00          	vmovsd xmm0,QWORD PTR [rax]
  22cec4:	c5 fb 11 85 30 ff ff 	vmovsd QWORD PTR [rbp-0xd0],xmm0
  22cecb:	ff 
    exp -= 307;
  22cecc:	66 8b 95 4a ff ff ff 	mov    dx,WORD PTR [rbp-0xb6]
  22ced3:	66 81 ea 33 01       	sub    dx,0x133
  22ced8:	40 0f 90 c6          	seto   sil
  22cedc:	40 f6 c6 01          	test   sil,0x1
  22cee0:	66 89 95 26 fe ff ff 	mov    WORD PTR [rbp-0x1da],dx
  22cee7:	75 02                	jne    22ceeb <errol3u+0x85b>
  22cee9:	eb 10                	jmp    22cefb <errol3u+0x86b>
  22ceeb:	48 8d 3d d6 62 01 00 	lea    rdi,[rip+0x162d6]        # 2431c8 <__unnamed_4>
  22cef2:	31 c0                	xor    eax,eax
  22cef4:	89 c6                	mov    esi,eax
  22cef6:	e8 05 e7 fd ff       	call   20b600 <panic>
  22cefb:	c5 fb 10 05 f5 3c fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd3cf5]        # 200bf8 <__unnamed_187+0x8>
  22cf02:	ff 
  22cf03:	66 8b 85 26 fe ff ff 	mov    ax,WORD PTR [rbp-0x1da]
  22cf0a:	66 89 85 4a ff ff ff 	mov    WORD PTR [rbp-0xb6],ax
    var ten: f64 = 1.0;
  22cf11:	c5 fb 11 85 28 ff ff 	vmovsd QWORD PTR [rbp-0xd8],xmm0
  22cf18:	ff 
    while (mid.val > 10.0 or (mid.val == 10.0 and mid.off >= 0.0)) {
  22cf19:	e9 bb f9 ff ff       	jmp    22c8d9 <errol3u+0x249>
  22cf1e:	48 8d 3d a3 62 01 00 	lea    rdi,[rip+0x162a3]        # 2431c8 <__unnamed_4>
  22cf25:	31 c0                	xor    eax,eax
  22cf27:	89 c6                	mov    esi,eax
        exp += 1;
  22cf29:	e8 d2 e6 fd ff       	call   20b600 <panic>
  22cf2e:	48 8d bd 38 ff ff ff 	lea    rdi,[rbp-0xc8]
  22cf35:	66 8b 85 a4 fe ff ff 	mov    ax,WORD PTR [rbp-0x15c]
  22cf3c:	66 89 85 4a ff ff ff 	mov    WORD PTR [rbp-0xb6],ax
        hpDiv10(&mid);
  22cf43:	e8 d8 1e 00 00       	call   22ee20 <hpDiv10>
  22cf48:	31 c9                	xor    ecx,ecx
  22cf4a:	88 ca                	mov    dl,cl
        ten /= 10.0;
  22cf4c:	c5 fb 10 85 28 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xd8]
  22cf53:	ff 
  22cf54:	f6 c2 01             	test   dl,0x1
  22cf57:	c5 fb 11 85 18 fe ff 	vmovsd QWORD PTR [rbp-0x1e8],xmm0
  22cf5e:	ff 
  22cf5f:	75 21                	jne    22cf82 <errol3u+0x8f2>
  22cf61:	c5 fb 10 05 7f 3c fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd3c7f]        # 200be8 <__unnamed_185+0x18>
  22cf68:	ff 
  22cf69:	c5 fb 10 8d 18 fe ff 	vmovsd xmm1,QWORD PTR [rbp-0x1e8]
  22cf70:	ff 
  22cf71:	c5 f3 5e c0          	vdivsd xmm0,xmm1,xmm0
  22cf75:	c5 fb 11 85 28 ff ff 	vmovsd QWORD PTR [rbp-0xd8],xmm0
  22cf7c:	ff 
    while (mid.val > 10.0 or (mid.val == 10.0 and mid.off >= 0.0)) {
  22cf7d:	e9 57 f9 ff ff       	jmp    22c8d9 <errol3u+0x249>
  22cf82:	48 8d 3d b7 62 01 00 	lea    rdi,[rip+0x162b7]        # 243240 <__unnamed_7>
  22cf89:	31 c0                	xor    eax,eax
  22cf8b:	89 c6                	mov    esi,eax
        ten /= 10.0;
  22cf8d:	e8 6e e6 fd ff       	call   20b600 <panic>
  22cf92:	48 8d 3d 2f 62 01 00 	lea    rdi,[rip+0x1622f]        # 2431c8 <__unnamed_4>
  22cf99:	31 c0                	xor    eax,eax
  22cf9b:	89 c6                	mov    esi,eax
        exp -= 1;
  22cf9d:	e8 5e e6 fd ff       	call   20b600 <panic>
  22cfa2:	48 8d bd 38 ff ff ff 	lea    rdi,[rbp-0xc8]
  22cfa9:	66 8b 85 a0 fe ff ff 	mov    ax,WORD PTR [rbp-0x160]
  22cfb0:	66 89 85 4a ff ff ff 	mov    WORD PTR [rbp-0xb6],ax
        hpMul10(&mid);
  22cfb7:	e8 c4 1f 00 00       	call   22ef80 <hpMul10>
  22cfbc:	c5 fb 10 05 24 3c fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd3c24]        # 200be8 <__unnamed_185+0x18>
  22cfc3:	ff 
        ten *= 10.0;
  22cfc4:	c5 fb 59 85 28 ff ff 	vmulsd xmm0,xmm0,QWORD PTR [rbp-0xd8]
  22cfcb:	ff 
  22cfcc:	c5 fb 11 85 28 ff ff 	vmovsd QWORD PTR [rbp-0xd8],xmm0
  22cfd3:	ff 
    while (mid.val < 1.0 or (mid.val == 1.0 and mid.off < 0.0)) {
  22cfd4:	e9 9e f9 ff ff       	jmp    22c977 <errol3u+0x2e7>
  22cfd9:	c5 fb 10 05 ff 3b fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd3bff]        # 200be0 <__unnamed_185+0x10>
  22cfe0:	ff 
        .off = mid.off + (fpnext(val) - val) * lten * ten / 2.0,
  22cfe1:	c5 fb 10 8d 88 fe ff 	vmovsd xmm1,QWORD PTR [rbp-0x178]
  22cfe8:	ff 
  22cfe9:	c5 f3 5e c0          	vdivsd xmm0,xmm1,xmm0
  22cfed:	c5 fb 10 95 90 fe ff 	vmovsd xmm2,QWORD PTR [rbp-0x170]
  22cff4:	ff 
  22cff5:	c5 eb 58 c0          	vaddsd xmm0,xmm2,xmm0
    var high = HP{
  22cff9:	c5 fb 10 9d 98 fe ff 	vmovsd xmm3,QWORD PTR [rbp-0x168]
  22d000:	ff 
  22d001:	c5 fb 11 5d 90       	vmovsd QWORD PTR [rbp-0x70],xmm3
  22d006:	c5 fb 11 45 98       	vmovsd QWORD PTR [rbp-0x68],xmm0
  22d00b:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  22d00f:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  22d016:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  22d01a:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
        .val = mid.val,
  22d021:	c5 fb 10 85 38 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xc8]
  22d028:	ff 
        .off = mid.off + (fpprev(val) - val) * lten * ten / 2.0,
  22d029:	c5 fb 10 a5 40 ff ff 	vmovsd xmm4,QWORD PTR [rbp-0xc0]
  22d030:	ff 
  22d031:	c5 fb 10 ad 50 ff ff 	vmovsd xmm5,QWORD PTR [rbp-0xb0]
  22d038:	ff 
  22d039:	c5 fb 11 85 10 fe ff 	vmovsd QWORD PTR [rbp-0x1f0],xmm0
  22d040:	ff 
  22d041:	c5 f8 28 c5          	vmovaps xmm0,xmm5
  22d045:	c5 fb 11 a5 08 fe ff 	vmovsd QWORD PTR [rbp-0x1f8],xmm4
  22d04c:	ff 
  22d04d:	e8 ee 1f 00 00       	call   22f040 <fpprev>
  22d052:	31 c9                	xor    ecx,ecx
  22d054:	88 ca                	mov    dl,cl
  22d056:	c5 fb 5c 85 50 ff ff 	vsubsd xmm0,xmm0,QWORD PTR [rbp-0xb0]
  22d05d:	ff 
  22d05e:	c5 fb 59 85 30 ff ff 	vmulsd xmm0,xmm0,QWORD PTR [rbp-0xd0]
  22d065:	ff 
  22d066:	c5 fb 59 85 28 ff ff 	vmulsd xmm0,xmm0,QWORD PTR [rbp-0xd8]
  22d06d:	ff 
  22d06e:	f6 c2 01             	test   dl,0x1
  22d071:	c5 fb 11 85 00 fe ff 	vmovsd QWORD PTR [rbp-0x200],xmm0
  22d078:	ff 
  22d079:	75 77                	jne    22d0f2 <errol3u+0xa62>
  22d07b:	eb 10                	jmp    22d08d <errol3u+0x9fd>
  22d07d:	48 8d 3d bc 61 01 00 	lea    rdi,[rip+0x161bc]        # 243240 <__unnamed_7>
  22d084:	31 c0                	xor    eax,eax
  22d086:	89 c6                	mov    esi,eax
        .off = mid.off + (fpnext(val) - val) * lten * ten / 2.0,
  22d088:	e8 73 e5 fd ff       	call   20b600 <panic>
  22d08d:	48 8d bd 18 ff ff ff 	lea    rdi,[rbp-0xe8]
  22d094:	c5 fb 10 05 44 3b fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd3b44]        # 200be0 <__unnamed_185+0x10>
  22d09b:	ff 
        .off = mid.off + (fpprev(val) - val) * lten * ten / 2.0,
  22d09c:	c5 fb 10 8d 00 fe ff 	vmovsd xmm1,QWORD PTR [rbp-0x200]
  22d0a3:	ff 
  22d0a4:	c5 f3 5e c0          	vdivsd xmm0,xmm1,xmm0
  22d0a8:	c5 fb 10 95 08 fe ff 	vmovsd xmm2,QWORD PTR [rbp-0x1f8]
  22d0af:	ff 
  22d0b0:	c5 eb 58 c0          	vaddsd xmm0,xmm2,xmm0
    var low = HP{
  22d0b4:	c5 fb 10 9d 10 fe ff 	vmovsd xmm3,QWORD PTR [rbp-0x1f0]
  22d0bb:	ff 
  22d0bc:	c5 fb 11 5d 80       	vmovsd QWORD PTR [rbp-0x80],xmm3
  22d0c1:	c5 fb 11 45 88       	vmovsd QWORD PTR [rbp-0x78],xmm0
  22d0c6:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  22d0ca:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
  22d0d1:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  22d0d5:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
    hpNormalize(&high);
  22d0dc:	e8 7f 1f 00 00       	call   22f060 <hpNormalize>
  22d0e1:	48 8d bd 08 ff ff ff 	lea    rdi,[rbp-0xf8]
    hpNormalize(&low);
  22d0e8:	e8 73 1f 00 00       	call   22f060 <hpNormalize>
    while (high.val > 10.0 or (high.val == 10.0 and high.off >= 0.0)) {
  22d0ed:	e9 7c f9 ff ff       	jmp    22ca6e <errol3u+0x3de>
  22d0f2:	48 8d 3d 47 61 01 00 	lea    rdi,[rip+0x16147]        # 243240 <__unnamed_7>
  22d0f9:	31 c0                	xor    eax,eax
  22d0fb:	89 c6                	mov    esi,eax
        .off = mid.off + (fpprev(val) - val) * lten * ten / 2.0,
  22d0fd:	e8 fe e4 fd ff       	call   20b600 <panic>
  22d102:	48 8d 3d bf 60 01 00 	lea    rdi,[rip+0x160bf]        # 2431c8 <__unnamed_4>
  22d109:	31 c0                	xor    eax,eax
  22d10b:	89 c6                	mov    esi,eax
        exp += 1;
  22d10d:	e8 ee e4 fd ff       	call   20b600 <panic>
  22d112:	48 8d bd 18 ff ff ff 	lea    rdi,[rbp-0xe8]
  22d119:	66 8b 85 84 fe ff ff 	mov    ax,WORD PTR [rbp-0x17c]
  22d120:	66 89 85 4a ff ff ff 	mov    WORD PTR [rbp-0xb6],ax
        hpDiv10(&high);
  22d127:	e8 f4 1c 00 00       	call   22ee20 <hpDiv10>
  22d12c:	48 8d bd 08 ff ff ff 	lea    rdi,[rbp-0xf8]
        hpDiv10(&low);
  22d133:	e8 e8 1c 00 00       	call   22ee20 <hpDiv10>
    while (high.val > 10.0 or (high.val == 10.0 and high.off >= 0.0)) {
  22d138:	e9 31 f9 ff ff       	jmp    22ca6e <errol3u+0x3de>
  22d13d:	48 8d 3d 84 60 01 00 	lea    rdi,[rip+0x16084]        # 2431c8 <__unnamed_4>
  22d144:	31 c0                	xor    eax,eax
  22d146:	89 c6                	mov    esi,eax
        exp -= 1;
  22d148:	e8 b3 e4 fd ff       	call   20b600 <panic>
  22d14d:	48 8d bd 18 ff ff ff 	lea    rdi,[rbp-0xe8]
  22d154:	66 8b 85 80 fe ff ff 	mov    ax,WORD PTR [rbp-0x180]
  22d15b:	66 89 85 4a ff ff ff 	mov    WORD PTR [rbp-0xb6],ax
        hpMul10(&high);
  22d162:	e8 19 1e 00 00       	call   22ef80 <hpMul10>
  22d167:	48 8d bd 08 ff ff ff 	lea    rdi,[rbp-0xf8]
        hpMul10(&low);
  22d16e:	e8 0d 1e 00 00       	call   22ef80 <hpMul10>
    while (high.val < 1.0 or (high.val == 1.0 and high.off < 0.0)) {
  22d173:	e9 94 f9 ff ff       	jmp    22cb0c <errol3u+0x47c>
        var hdig = @floatToInt(u8, math.floor(high.val));
  22d178:	8a 85 6f fe ff ff    	mov    al,BYTE PTR [rbp-0x191]
  22d17e:	88 85 ff fe ff ff    	mov    BYTE PTR [rbp-0x101],al
        if ((high.val == @intToFloat(f64, hdig)) and (high.off < 0)) hdig -= 1;
  22d184:	c5 fb 10 85 18 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xe8]
  22d18b:	ff 
  22d18c:	0f b6 8d ff fe ff ff 	movzx  ecx,BYTE PTR [rbp-0x101]
  22d193:	c5 f3 2a c9          	vcvtsi2sd xmm1,xmm1,ecx
  22d197:	c5 f9 2e c1          	vucomisd xmm0,xmm1
  22d19b:	0f 94 c2             	sete   dl
  22d19e:	40 0f 9b c6          	setnp  sil
  22d1a2:	40 20 f2             	and    dl,sil
  22d1a5:	f6 c2 01             	test   dl,0x1
  22d1a8:	88 95 6e fe ff ff    	mov    BYTE PTR [rbp-0x192],dl
  22d1ae:	0f 85 75 fa ff ff    	jne    22cc29 <errol3u+0x599>
  22d1b4:	e9 85 fa ff ff       	jmp    22cc3e <errol3u+0x5ae>
  22d1b9:	48 8d 3d 40 69 01 00 	lea    rdi,[rip+0x16940]        # 243b00 <__unnamed_227>
  22d1c0:	31 c0                	xor    eax,eax
  22d1c2:	89 c6                	mov    esi,eax
        var hdig = @floatToInt(u8, math.floor(high.val));
  22d1c4:	e8 37 e4 fd ff       	call   20b600 <panic>
  22d1c9:	48 8d 3d f8 5f 01 00 	lea    rdi,[rip+0x15ff8]        # 2431c8 <__unnamed_4>
  22d1d0:	31 c0                	xor    eax,eax
  22d1d2:	89 c6                	mov    esi,eax
        if ((high.val == @intToFloat(f64, hdig)) and (high.off < 0)) hdig -= 1;
  22d1d4:	e8 27 e4 fd ff       	call   20b600 <panic>
  22d1d9:	8a 85 6d fe ff ff    	mov    al,BYTE PTR [rbp-0x193]
  22d1df:	88 85 ff fe ff ff    	mov    BYTE PTR [rbp-0x101],al
  22d1e5:	e9 81 fa ff ff       	jmp    22cc6b <errol3u+0x5db>
        var ldig = @floatToInt(u8, math.floor(low.val));
  22d1ea:	8a 85 57 fe ff ff    	mov    al,BYTE PTR [rbp-0x1a9]
  22d1f0:	88 85 fe fe ff ff    	mov    BYTE PTR [rbp-0x102],al
        if ((low.val == @intToFloat(f64, ldig)) and (low.off < 0)) ldig -= 1;
  22d1f6:	c5 fb 10 85 08 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xf8]
  22d1fd:	ff 
  22d1fe:	0f b6 8d fe fe ff ff 	movzx  ecx,BYTE PTR [rbp-0x102]
  22d205:	c5 f3 2a c9          	vcvtsi2sd xmm1,xmm1,ecx
  22d209:	c5 f9 2e c1          	vucomisd xmm0,xmm1
  22d20d:	0f 94 c2             	sete   dl
  22d210:	40 0f 9b c6          	setnp  sil
  22d214:	40 20 f2             	and    dl,sil
  22d217:	f6 c2 01             	test   dl,0x1
  22d21a:	88 95 56 fe ff ff    	mov    BYTE PTR [rbp-0x1aa],dl
  22d220:	0f 85 c1 fa ff ff    	jne    22cce7 <errol3u+0x657>
  22d226:	e9 d1 fa ff ff       	jmp    22ccfc <errol3u+0x66c>
  22d22b:	48 8d 3d ce 68 01 00 	lea    rdi,[rip+0x168ce]        # 243b00 <__unnamed_227>
  22d232:	31 c0                	xor    eax,eax
  22d234:	89 c6                	mov    esi,eax
        var ldig = @floatToInt(u8, math.floor(low.val));
  22d236:	e8 c5 e3 fd ff       	call   20b600 <panic>
  22d23b:	48 8d 3d 86 5f 01 00 	lea    rdi,[rip+0x15f86]        # 2431c8 <__unnamed_4>
  22d242:	31 c0                	xor    eax,eax
  22d244:	89 c6                	mov    esi,eax
        if ((low.val == @intToFloat(f64, ldig)) and (low.off < 0)) ldig -= 1;
  22d246:	e8 b5 e3 fd ff       	call   20b600 <panic>
  22d24b:	8a 85 55 fe ff ff    	mov    al,BYTE PTR [rbp-0x1ab]
  22d251:	88 85 fe fe ff ff    	mov    BYTE PTR [rbp-0x102],al
  22d257:	e9 cd fa ff ff       	jmp    22cd29 <errol3u+0x699>
  22d25c:	48 8d 3d 95 61 01 00 	lea    rdi,[rip+0x16195]        # 2433f8 <__unnamed_20>
  22d263:	31 c0                	xor    eax,eax
  22d265:	89 c6                	mov    esi,eax
        buffer[buf_index] = hdig + '0';
  22d267:	e8 94 e3 fd ff       	call   20b600 <panic>
  22d26c:	48 8b 85 48 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b8]
  22d273:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
  22d27a:	48 03 01             	add    rax,QWORD PTR [rcx]
  22d27d:	8a 95 ff fe ff ff    	mov    dl,BYTE PTR [rbp-0x101]
  22d283:	80 c2 30             	add    dl,0x30
  22d286:	40 0f 92 c6          	setb   sil
  22d28a:	40 f6 c6 01          	test   sil,0x1
  22d28e:	48 89 85 f8 fd ff ff 	mov    QWORD PTR [rbp-0x208],rax
  22d295:	88 95 f7 fd ff ff    	mov    BYTE PTR [rbp-0x209],dl
  22d29b:	75 02                	jne    22d29f <errol3u+0xc0f>
  22d29d:	eb 10                	jmp    22d2af <errol3u+0xc1f>
  22d29f:	48 8d 3d 22 5f 01 00 	lea    rdi,[rip+0x15f22]        # 2431c8 <__unnamed_4>
  22d2a6:	31 c0                	xor    eax,eax
  22d2a8:	89 c6                	mov    esi,eax
  22d2aa:	e8 51 e3 fd ff       	call   20b600 <panic>
  22d2af:	48 8b 85 f8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x208]
  22d2b6:	8a 8d f7 fd ff ff    	mov    cl,BYTE PTR [rbp-0x209]
  22d2bc:	88 08                	mov    BYTE PTR [rax],cl
        buf_index += 1;
  22d2be:	48 8b 95 00 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x100]
  22d2c5:	48 83 c2 01          	add    rdx,0x1
  22d2c9:	40 0f 92 c6          	setb   sil
  22d2cd:	48 89 95 e8 fd ff ff 	mov    QWORD PTR [rbp-0x218],rdx
  22d2d4:	40 88 b5 e7 fd ff ff 	mov    BYTE PTR [rbp-0x219],sil
  22d2db:	72 02                	jb     22d2df <errol3u+0xc4f>
  22d2dd:	eb 10                	jmp    22d2ef <errol3u+0xc5f>
  22d2df:	48 8d 3d e2 5e 01 00 	lea    rdi,[rip+0x15ee2]        # 2431c8 <__unnamed_4>
  22d2e6:	31 c0                	xor    eax,eax
  22d2e8:	89 c6                	mov    esi,eax
  22d2ea:	e8 11 e3 fd ff       	call   20b600 <panic>
  22d2ef:	48 8d bd 18 ff ff ff 	lea    rdi,[rbp-0xe8]
  22d2f6:	48 8b 85 e8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x218]
  22d2fd:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
        high.val -= @intToFloat(f64, hdig);
  22d304:	c5 fb 10 85 18 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xe8]
  22d30b:	ff 
  22d30c:	0f b6 8d ff fe ff ff 	movzx  ecx,BYTE PTR [rbp-0x101]
  22d313:	c5 f3 2a c9          	vcvtsi2sd xmm1,xmm1,ecx
  22d317:	c5 fb 5c c1          	vsubsd xmm0,xmm0,xmm1
  22d31b:	c5 fb 11 85 18 ff ff 	vmovsd QWORD PTR [rbp-0xe8],xmm0
  22d322:	ff 
        low.val -= @intToFloat(f64, ldig);
  22d323:	c5 fb 10 85 08 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xf8]
  22d32a:	ff 
  22d32b:	0f b6 8d fe fe ff ff 	movzx  ecx,BYTE PTR [rbp-0x102]
  22d332:	c5 f3 2a c9          	vcvtsi2sd xmm1,xmm1,ecx
  22d336:	c5 fb 5c c1          	vsubsd xmm0,xmm0,xmm1
  22d33a:	c5 fb 11 85 08 ff ff 	vmovsd QWORD PTR [rbp-0xf8],xmm0
  22d341:	ff 
        hpMul10(&high);
  22d342:	e8 39 1c 00 00       	call   22ef80 <hpMul10>
  22d347:	48 8d bd 08 ff ff ff 	lea    rdi,[rbp-0xf8]
        hpMul10(&low);
  22d34e:	e8 2d 1c 00 00       	call   22ef80 <hpMul10>
    while (true) {
  22d353:	e9 53 f8 ff ff       	jmp    22cbab <errol3u+0x51b>
  22d358:	c5 fb 10 05 b0 38 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd38b0]        # 200c10 <__unnamed_186+0x10>
  22d35f:	ff 
  22d360:	c5 fb 10 0d 90 38 fd 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffd3890]        # 200bf8 <__unnamed_187+0x8>
  22d367:	ff 
    const tmp = (high.val + low.val) / 2.0;
  22d368:	c5 fb 10 15 70 38 fd 	vmovsd xmm2,QWORD PTR [rip+0xfffffffffffd3870]        # 200be0 <__unnamed_185+0x10>
  22d36f:	ff 
  22d370:	c5 fb 10 9d 40 fe ff 	vmovsd xmm3,QWORD PTR [rbp-0x1c0]
  22d377:	ff 
  22d378:	c5 e3 5e d2          	vdivsd xmm2,xmm3,xmm2
  22d37c:	c5 fb 11 95 f0 fe ff 	vmovsd QWORD PTR [rbp-0x110],xmm2
  22d383:	ff 
    var mdig = @floatToInt(u8, math.floor(tmp + 0.5));
  22d384:	c5 fb 10 95 f0 fe ff 	vmovsd xmm2,QWORD PTR [rbp-0x110]
  22d38b:	ff 
  22d38c:	c5 fb 10 25 8c 38 fd 	vmovsd xmm4,QWORD PTR [rip+0xfffffffffffd388c]        # 200c20 <__unnamed_186+0x20>
  22d393:	ff 
  22d394:	c5 eb 58 d4          	vaddsd xmm2,xmm2,xmm4
  22d398:	c5 fb 11 85 d8 fd ff 	vmovsd QWORD PTR [rbp-0x228],xmm0
  22d39f:	ff 
  22d3a0:	c5 f8 28 c2          	vmovaps xmm0,xmm2
  22d3a4:	c5 fb 11 8d d0 fd ff 	vmovsd QWORD PTR [rbp-0x230],xmm1
  22d3ab:	ff 
  22d3ac:	e8 bf 18 00 00       	call   22ec70 <floor.0>
  22d3b1:	c5 f8 28 c8          	vmovaps xmm1,xmm0
  22d3b5:	c5 fb 2c c0          	vcvttsd2si eax,xmm0
  22d3b9:	88 c1                	mov    cl,al
  22d3bb:	0f b6 c1             	movzx  eax,cl
  22d3be:	c5 fb 2a c0          	vcvtsi2sd xmm0,xmm0,eax
  22d3c2:	c5 f3 5c c0          	vsubsd xmm0,xmm1,xmm0
  22d3c6:	c5 fb 10 8d d0 fd ff 	vmovsd xmm1,QWORD PTR [rbp-0x230]
  22d3cd:	ff 
  22d3ce:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22d3d2:	0f 97 c2             	seta   dl
  22d3d5:	c5 fb 10 95 d8 fd ff 	vmovsd xmm2,QWORD PTR [rbp-0x228]
  22d3dc:	ff 
  22d3dd:	c5 f9 2e c2          	vucomisd xmm0,xmm2
  22d3e1:	40 0f 97 c6          	seta   sil
  22d3e5:	40 20 f2             	and    dl,sil
  22d3e8:	f6 c2 01             	test   dl,0x1
  22d3eb:	88 8d cf fd ff ff    	mov    BYTE PTR [rbp-0x231],cl
  22d3f1:	75 12                	jne    22d405 <errol3u+0xd75>
  22d3f3:	eb 59                	jmp    22d44e <errol3u+0xdbe>
  22d3f5:	48 8d 3d 44 5e 01 00 	lea    rdi,[rip+0x15e44]        # 243240 <__unnamed_7>
  22d3fc:	31 c0                	xor    eax,eax
  22d3fe:	89 c6                	mov    esi,eax
    const tmp = (high.val + low.val) / 2.0;
  22d400:	e8 fb e1 fd ff       	call   20b600 <panic>
  22d405:	c5 fb 10 05 13 38 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd3813]        # 200c20 <__unnamed_186+0x20>
  22d40c:	ff 
    var mdig = @floatToInt(u8, math.floor(tmp + 0.5));
  22d40d:	8a 85 cf fd ff ff    	mov    al,BYTE PTR [rbp-0x231]
  22d413:	88 85 ef fe ff ff    	mov    BYTE PTR [rbp-0x111],al
    if ((@intToFloat(f64, mdig) - tmp) == 0.5 and (mdig & 0x1) != 0) mdig -= 1;
  22d419:	0f b6 8d ef fe ff ff 	movzx  ecx,BYTE PTR [rbp-0x111]
  22d420:	c5 f3 2a c9          	vcvtsi2sd xmm1,xmm1,ecx
  22d424:	c5 f3 5c 8d f0 fe ff 	vsubsd xmm1,xmm1,QWORD PTR [rbp-0x110]
  22d42b:	ff 
  22d42c:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22d430:	0f 94 c2             	sete   dl
  22d433:	40 0f 9b c6          	setnp  sil
  22d437:	40 20 f2             	and    dl,sil
  22d43a:	f6 c2 01             	test   dl,0x1
  22d43d:	88 95 3f fe ff ff    	mov    BYTE PTR [rbp-0x1c1],dl
  22d443:	0f 85 3e f9 ff ff    	jne    22cd87 <errol3u+0x6f7>
  22d449:	e9 4c f9 ff ff       	jmp    22cd9a <errol3u+0x70a>
  22d44e:	48 8d 3d ab 66 01 00 	lea    rdi,[rip+0x166ab]        # 243b00 <__unnamed_227>
  22d455:	31 c0                	xor    eax,eax
  22d457:	89 c6                	mov    esi,eax
    var mdig = @floatToInt(u8, math.floor(tmp + 0.5));
  22d459:	e8 a2 e1 fd ff       	call   20b600 <panic>
  22d45e:	48 8d 3d 63 5d 01 00 	lea    rdi,[rip+0x15d63]        # 2431c8 <__unnamed_4>
  22d465:	31 c0                	xor    eax,eax
  22d467:	89 c6                	mov    esi,eax
    if ((@intToFloat(f64, mdig) - tmp) == 0.5 and (mdig & 0x1) != 0) mdig -= 1;
  22d469:	e8 92 e1 fd ff       	call   20b600 <panic>
  22d46e:	8a 85 3e fe ff ff    	mov    al,BYTE PTR [rbp-0x1c2]
  22d474:	88 85 ef fe ff ff    	mov    BYTE PTR [rbp-0x111],al
  22d47a:	e9 48 f9 ff ff       	jmp    22cdc7 <errol3u+0x737>
  22d47f:	48 8d 3d 72 5f 01 00 	lea    rdi,[rip+0x15f72]        # 2433f8 <__unnamed_20>
  22d486:	31 c0                	xor    eax,eax
  22d488:	89 c6                	mov    esi,eax
    buffer[buf_index] = mdig + '0';
  22d48a:	e8 71 e1 fd ff       	call   20b600 <panic>
  22d48f:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  22d496:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
  22d49d:	48 03 01             	add    rax,QWORD PTR [rcx]
  22d4a0:	8a 95 ef fe ff ff    	mov    dl,BYTE PTR [rbp-0x111]
  22d4a6:	80 c2 30             	add    dl,0x30
  22d4a9:	40 0f 92 c6          	setb   sil
  22d4ad:	40 f6 c6 01          	test   sil,0x1
  22d4b1:	48 89 85 c0 fd ff ff 	mov    QWORD PTR [rbp-0x240],rax
  22d4b8:	88 95 bf fd ff ff    	mov    BYTE PTR [rbp-0x241],dl
  22d4be:	75 02                	jne    22d4c2 <errol3u+0xe32>
  22d4c0:	eb 10                	jmp    22d4d2 <errol3u+0xe42>
  22d4c2:	48 8d 3d ff 5c 01 00 	lea    rdi,[rip+0x15cff]        # 2431c8 <__unnamed_4>
  22d4c9:	31 c0                	xor    eax,eax
  22d4cb:	89 c6                	mov    esi,eax
  22d4cd:	e8 2e e1 fd ff       	call   20b600 <panic>
  22d4d2:	48 8b 85 c0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x240]
  22d4d9:	8a 8d bf fd ff ff    	mov    cl,BYTE PTR [rbp-0x241]
  22d4df:	88 08                	mov    BYTE PTR [rax],cl
    buf_index += 1;
  22d4e1:	48 8b 95 00 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x100]
  22d4e8:	48 83 c2 01          	add    rdx,0x1
  22d4ec:	40 0f 92 c6          	setb   sil
  22d4f0:	48 89 95 b0 fd ff ff 	mov    QWORD PTR [rbp-0x250],rdx
  22d4f7:	40 88 b5 af fd ff ff 	mov    BYTE PTR [rbp-0x251],sil
  22d4fe:	72 02                	jb     22d502 <errol3u+0xe72>
  22d500:	eb 10                	jmp    22d512 <errol3u+0xe82>
  22d502:	48 8d 3d bf 5c 01 00 	lea    rdi,[rip+0x15cbf]        # 2431c8 <__unnamed_4>
  22d509:	31 c0                	xor    eax,eax
  22d50b:	89 c6                	mov    esi,eax
  22d50d:	e8 ee e0 fd ff       	call   20b600 <panic>
  22d512:	b8 01 00 00 00       	mov    eax,0x1
  22d517:	89 c1                	mov    ecx,eax
  22d519:	48 8b 95 b0 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x250]
  22d520:	48 89 95 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rdx
        .digits = buffer[1..buf_index],
  22d527:	48 8b b5 00 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x100]
  22d52e:	48 8b bd d8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x128]
  22d535:	4c 8b 47 08          	mov    r8,QWORD PTR [rdi+0x8]
  22d539:	48 39 f1             	cmp    rcx,rsi
  22d53c:	4c 89 85 a0 fd ff ff 	mov    QWORD PTR [rbp-0x260],r8
  22d543:	48 89 b5 98 fd ff ff 	mov    QWORD PTR [rbp-0x268],rsi
  22d54a:	76 10                	jbe    22d55c <errol3u+0xecc>
  22d54c:	48 8d 3d a5 5e 01 00 	lea    rdi,[rip+0x15ea5]        # 2433f8 <__unnamed_20>
  22d553:	31 c0                	xor    eax,eax
  22d555:	89 c6                	mov    esi,eax
  22d557:	e8 a4 e0 fd ff       	call   20b600 <panic>
  22d55c:	48 8b 85 98 fd ff ff 	mov    rax,QWORD PTR [rbp-0x268]
  22d563:	48 8b 8d a0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x260]
  22d56a:	48 39 c8             	cmp    rax,rcx
  22d56d:	76 10                	jbe    22d57f <errol3u+0xeef>
  22d56f:	48 8d 3d 82 5e 01 00 	lea    rdi,[rip+0x15e82]        # 2433f8 <__unnamed_20>
  22d576:	31 c0                	xor    eax,eax
  22d578:	89 c6                	mov    esi,eax
  22d57a:	e8 81 e0 fd ff       	call   20b600 <panic>
  22d57f:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  22d586:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22d589:	48 83 c1 01          	add    rcx,0x1
  22d58d:	48 89 8d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rcx
  22d594:	48 8b 8d 98 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x268]
  22d59b:	48 83 e9 01          	sub    rcx,0x1
  22d59f:	48 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rcx
        .exp = exp,
  22d5a6:	0f bf 95 4a ff ff ff 	movsx  edx,WORD PTR [rbp-0xb6]
    return FloatDecimal{
  22d5ad:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
  22d5b4:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
  22d5bb:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  22d5c2:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
  22d5c9:	89 95 68 ff ff ff    	mov    DWORD PTR [rbp-0x98],edx
  22d5cf:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  22d5d6:	48 8b b5 d0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x130]
  22d5dd:	48 89 0e             	mov    QWORD PTR [rsi],rcx
  22d5e0:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  22d5e7:	48 89 4e 08          	mov    QWORD PTR [rsi+0x8],rcx
  22d5eb:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  22d5f2:	48 89 4e 10          	mov    QWORD PTR [rsi+0x10],rcx
  22d5f6:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
  22d5fd:	48 81 c4 70 02 00 00 	add    rsp,0x270
  22d604:	5d                   	pop    rbp
  22d605:	c3                   	ret    
  22d606:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  22d60d:	00 00 00 

000000000022d610 <slab>:
const Slab = struct {
    str: []const u8,
    exp: i32,
};

fn slab(str: []const u8, exp: i32) Slab {
  22d610:	55                   	push   rbp
  22d611:	48 89 e5             	mov    rbp,rsp
  22d614:	48 89 f8             	mov    rax,rdi
  22d617:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
    return Slab{
        .str = str,
        .exp = exp,
  22d61a:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    return Slab{
  22d61d:	48 8b 0e             	mov    rcx,QWORD PTR [rsi]
  22d620:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  22d624:	48 8b 4e 08          	mov    rcx,QWORD PTR [rsi+0x8]
  22d628:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  22d62c:	89 55 f8             	mov    DWORD PTR [rbp-0x8],edx
  22d62f:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22d633:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  22d636:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  22d63a:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  22d63e:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  22d642:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  22d646:	5d                   	pop    rbp
  22d647:	c3                   	ret    
  22d648:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  22d64f:	00 

000000000022d650 <errolInt>:

/// Integer conversion algorithm, guaranteed correct, optimal, and best.
///  @val: The val.
///  @buf: The output buffer.
///  &return: The exponent.
fn errolInt(val: f64, buffer: []u8) FloatDecimal {
  22d650:	55                   	push   rbp
  22d651:	48 89 e5             	mov    rbp,rsp
  22d654:	48 81 ec 20 03 00 00 	sub    rsp,0x320
  22d65b:	48 89 f8             	mov    rax,rdi
  22d65e:	c5 fb 10 0d 3a 36 fd 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffd363a]        # 200ca0 <__unnamed_190+0x8>
  22d665:	ff 
  22d666:	c5 fb 11 45 d0       	vmovsd QWORD PTR [rbp-0x30],xmm0
    const pow19 = u128(1e19);
  22d66b:	48 b9 00 00 e8 89 04 	movabs rcx,0x8ac7230489e80000
  22d672:	23 c7 8a 
  22d675:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
  22d679:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
  22d680:	00 

    assert((val > 9.007199254740992e15) and val < (3.40282366920938e38));
  22d681:	c5 fb 10 45 d0       	vmovsd xmm0,QWORD PTR [rbp-0x30]
  22d686:	c5 f9 2e c1          	vucomisd xmm0,xmm1
  22d68a:	0f 97 c2             	seta   dl
  22d68d:	f6 c2 01             	test   dl,0x1
  22d690:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  22d697:	48 89 b5 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rsi
  22d69e:	48 89 bd 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rdi
  22d6a5:	88 95 2f ff ff ff    	mov    BYTE PTR [rbp-0xd1],dl
  22d6ab:	75 02                	jne    22d6af <errolInt+0x5f>
  22d6ad:	eb 16                	jmp    22d6c5 <errolInt+0x75>
  22d6af:	c5 fb 10 05 91 35 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd3591]        # 200c48 <app_mask+0x8>
  22d6b6:	ff 
  22d6b7:	c5 f9 2e 45 d0       	vucomisd xmm0,QWORD PTR [rbp-0x30]
  22d6bc:	0f 97 c0             	seta   al
  22d6bf:	88 85 2f ff ff ff    	mov    BYTE PTR [rbp-0xd1],al
  22d6c5:	8a 85 2f ff ff ff    	mov    al,BYTE PTR [rbp-0xd1]
  22d6cb:	c5 fb 10 05 3d 35 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd353d]        # 200c10 <__unnamed_186+0x10>
  22d6d2:	ff 
  22d6d3:	c5 fb 10 0d 1d 35 fd 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffd351d]        # 200bf8 <__unnamed_187+0x8>
  22d6da:	ff 
  22d6db:	0f b6 f8             	movzx  edi,al
  22d6de:	c5 fb 11 8d 20 ff ff 	vmovsd QWORD PTR [rbp-0xe0],xmm1
  22d6e5:	ff 
  22d6e6:	c5 fb 11 85 18 ff ff 	vmovsd QWORD PTR [rbp-0xe8],xmm0
  22d6ed:	ff 
  22d6ee:	e8 0d d9 fd ff       	call   20b000 <assert>

    var mid = @floatToInt(u128, val);
  22d6f3:	c5 fb 10 45 d0       	vmovsd xmm0,QWORD PTR [rbp-0x30]
  22d6f8:	c5 fb 11 85 10 ff ff 	vmovsd QWORD PTR [rbp-0xf0],xmm0
  22d6ff:	ff 
  22d700:	e8 3b c7 00 00       	call   239e40 <__fixunsdfti>
  22d705:	48 89 d1             	mov    rcx,rdx
  22d708:	48 89 c6             	mov    rsi,rax
  22d70b:	48 89 c7             	mov    rdi,rax
  22d70e:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
  22d715:	48 89 d6             	mov    rsi,rdx
  22d718:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  22d71f:	e8 3c a9 00 00       	call   238060 <__floatuntidf>
  22d724:	c5 fb 10 8d 10 ff ff 	vmovsd xmm1,QWORD PTR [rbp-0xf0]
  22d72b:	ff 
  22d72c:	c5 f3 5c c0          	vsubsd xmm0,xmm1,xmm0
  22d730:	c5 fb 10 95 20 ff ff 	vmovsd xmm2,QWORD PTR [rbp-0xe0]
  22d737:	ff 
  22d738:	c5 f9 2e d0          	vucomisd xmm2,xmm0
  22d73c:	41 0f 97 c0          	seta   r8b
  22d740:	c5 fb 10 9d 18 ff ff 	vmovsd xmm3,QWORD PTR [rbp-0xe8]
  22d747:	ff 
  22d748:	c5 f9 2e c3          	vucomisd xmm0,xmm3
  22d74c:	41 0f 97 c1          	seta   r9b
  22d750:	45 20 c8             	and    r8b,r9b
  22d753:	41 f6 c0 01          	test   r8b,0x1
  22d757:	0f 85 66 02 00 00    	jne    22d9c3 <errolInt+0x373>
  22d75d:	e9 b1 02 00 00       	jmp    22da13 <errolInt+0x3c3>
    var low: u128 = mid - fpeint((fpnext(val) - val) / 2.0);
    var high: u128 = mid + fpeint((val - fpprev(val)) / 2.0);

    if (@bitCast(u64, val) & 0x1 != 0) {
        high -= 1;
  22d762:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  22d766:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  22d76a:	48 83 e8 01          	sub    rax,0x1
  22d76e:	48 83 d9 00          	sbb    rcx,0x0
  22d772:	0f 92 c2             	setb   dl
  22d775:	48 89 c6             	mov    rsi,rax
  22d778:	f6 c2 01             	test   dl,0x1
  22d77b:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  22d782:	48 89 b5 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rsi
  22d789:	48 89 8d e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rcx
  22d790:	0f 85 08 04 00 00    	jne    22db9e <errolInt+0x54e>
  22d796:	e9 13 04 00 00       	jmp    22dbae <errolInt+0x55e>
    } else {
        low -= 1;
  22d79b:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22d79f:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  22d7a3:	48 83 e8 01          	sub    rax,0x1
  22d7a7:	48 83 d9 00          	sbb    rcx,0x0
  22d7ab:	0f 92 c2             	setb   dl
  22d7ae:	48 89 c6             	mov    rsi,rax
  22d7b1:	f6 c2 01             	test   dl,0x1
  22d7b4:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
  22d7bb:	48 89 b5 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rsi
  22d7c2:	48 89 8d d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rcx
  22d7c9:	0f 85 fa 03 00 00    	jne    22dbc9 <errolInt+0x579>
  22d7cf:	e9 05 04 00 00       	jmp    22dbd9 <errolInt+0x589>
  22d7d4:	31 c0                	xor    eax,eax
  22d7d6:	88 c1                	mov    cl,al
    }

    var l64 = @intCast(u64, low % pow19);
  22d7d8:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  22d7dc:	48 8b 75 a8          	mov    rsi,QWORD PTR [rbp-0x58]
  22d7e0:	f6 c1 01             	test   cl,0x1
  22d7e3:	48 89 b5 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rsi
  22d7ea:	48 89 bd c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rdi
  22d7f1:	0f 85 3f 04 00 00    	jne    22dc36 <errolInt+0x5e6>
  22d7f7:	e9 f8 03 00 00       	jmp    22dbf4 <errolInt+0x5a4>
  22d7fc:	31 c0                	xor    eax,eax
  22d7fe:	88 c1                	mov    cl,al

    var h64 = @intCast(u64, high % pow19);
    const hf = @intCast(u64, (high / pow19) % pow19);

    if (lf != hf) {
        l64 = lf;
  22d800:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
  22d804:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
        h64 = hf;
  22d808:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  22d80f:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
        mid = mid / (pow19 / 10);
  22d816:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  22d81a:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  22d81e:	f6 c1 01             	test   cl,0x1
  22d821:	48 89 b5 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rsi
  22d828:	48 89 bd b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rdi
  22d82f:	0f 85 1a 07 00 00    	jne    22df4f <errolInt+0x8ff>
  22d835:	e9 e7 06 00 00       	jmp    22df21 <errolInt+0x8d1>
    if (lf != hf) {
  22d83a:	eb 00                	jmp    22d83c <errolInt+0x1ec>
    }

    var mi: i32 = mismatch10(l64, h64);
  22d83c:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  22d840:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
  22d847:	e8 e4 18 00 00       	call   22f130 <mismatch10>
  22d84c:	89 85 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],eax
    var x: u64 = 1;
  22d852:	48 c7 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],0x1
  22d859:	01 00 00 00 
    {
        var i: i32 = @boolToInt(lf == hf);
  22d85d:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  22d861:	48 3b b5 70 ff ff ff 	cmp    rsi,QWORD PTR [rbp-0x90]
  22d868:	0f 94 c1             	sete   cl
  22d86b:	80 e1 01             	and    cl,0x1
  22d86e:	0f b6 c1             	movzx  eax,cl
  22d871:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
        while (i < mi) : (i += 1) {
  22d877:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
  22d87d:	3b 85 6c ff ff ff    	cmp    eax,DWORD PTR [rbp-0x94]
  22d883:	7d 2e                	jge    22d8b3 <errolInt+0x263>
  22d885:	b8 0a 00 00 00       	mov    eax,0xa
  22d88a:	89 c1                	mov    ecx,eax
            x *= 10;
  22d88c:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  22d893:	48 f7 e1             	mul    rcx
  22d896:	40 0f 90 c6          	seto   sil
  22d89a:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
  22d8a1:	40 88 b5 a7 fe ff ff 	mov    BYTE PTR [rbp-0x159],sil
  22d8a8:	0f 80 b1 06 00 00    	jo     22df5f <errolInt+0x90f>
  22d8ae:	e9 bc 06 00 00       	jmp    22df6f <errolInt+0x91f>
        }
    }
    const m64 = @truncate(u64, @divTrunc(mid, x));
  22d8b3:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  22d8b7:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  22d8bb:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  22d8c2:	31 c9                	xor    ecx,ecx
  22d8c4:	48 85 c0             	test   rax,rax
  22d8c7:	48 89 bd 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rdi
  22d8ce:	48 89 b5 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rsi
  22d8d5:	48 89 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rax
  22d8dc:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  22d8e3:	0f 84 0e 07 00 00    	je     22dff7 <errolInt+0x9a7>
  22d8e9:	e9 cb 06 00 00       	jmp    22dfb9 <errolInt+0x969>

    if (lf != hf) mi += 19;
  22d8ee:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
  22d8f4:	83 c0 13             	add    eax,0x13
  22d8f7:	0f 90 c1             	seto   cl
  22d8fa:	89 85 7c fe ff ff    	mov    DWORD PTR [rbp-0x184],eax
  22d900:	88 8d 7b fe ff ff    	mov    BYTE PTR [rbp-0x185],cl
  22d906:	0f 80 fb 06 00 00    	jo     22e007 <errolInt+0x9b7>
  22d90c:	e9 06 07 00 00       	jmp    22e017 <errolInt+0x9c7>
  22d911:	eb 00                	jmp    22d913 <errolInt+0x2c3>

    var buf_index = u64toa(m64, buffer) - 1;
  22d913:	48 8b bd 50 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb0]
  22d91a:	48 8b b5 38 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc8]
  22d921:	e8 ca 19 00 00       	call   22f2f0 <u64toa>
  22d926:	48 83 e8 01          	sub    rax,0x1
  22d92a:	0f 92 c1             	setb   cl
  22d92d:	48 89 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rax
  22d934:	88 8d 6f fe ff ff    	mov    BYTE PTR [rbp-0x191],cl
  22d93a:	0f 82 e8 06 00 00    	jb     22e028 <errolInt+0x9d8>
  22d940:	e9 f3 06 00 00       	jmp    22e038 <errolInt+0x9e8>

    if (mi != 0) {
        buffer[buf_index - 1] += @boolToInt(buffer[buf_index] >= '5');
  22d945:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  22d94c:	48 83 e8 01          	sub    rax,0x1
  22d950:	0f 92 c1             	setb   cl
  22d953:	48 89 85 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rax
  22d95a:	88 8d 5f fe ff ff    	mov    BYTE PTR [rbp-0x1a1],cl
  22d960:	0f 82 f2 06 00 00    	jb     22e058 <errolInt+0xa08>
  22d966:	e9 fd 06 00 00       	jmp    22e068 <errolInt+0xa18>
    } else {
        buf_index += 1;
  22d96b:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  22d972:	48 83 c0 01          	add    rax,0x1
  22d976:	0f 92 c1             	setb   cl
  22d979:	48 89 85 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rax
  22d980:	88 8d 4f fe ff ff    	mov    BYTE PTR [rbp-0x1b1],cl
  22d986:	0f 82 ab 07 00 00    	jb     22e137 <errolInt+0xae7>
  22d98c:	e9 b6 07 00 00       	jmp    22e147 <errolInt+0xaf7>
  22d991:	31 c0                	xor    eax,eax
  22d993:	89 c1                	mov    ecx,eax
    }

    return FloatDecimal{
        .digits = buffer[0..buf_index],
  22d995:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
  22d99c:	48 8b b5 38 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc8]
  22d9a3:	48 8b 7e 08          	mov    rdi,QWORD PTR [rsi+0x8]
  22d9a7:	48 39 d1             	cmp    rcx,rdx
  22d9aa:	48 89 bd 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rdi
  22d9b1:	48 89 95 38 fe ff ff 	mov    QWORD PTR [rbp-0x1c8],rdx
  22d9b8:	0f 86 ac 07 00 00    	jbe    22e16a <errolInt+0xb1a>
  22d9be:	e9 97 07 00 00       	jmp    22e15a <errolInt+0xb0a>
    var mid = @floatToInt(u128, val);
  22d9c3:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  22d9ca:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  22d9ce:	48 8b 8d 00 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x100]
  22d9d5:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
    var low: u128 = mid - fpeint((fpnext(val) - val) / 2.0);
  22d9d9:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  22d9dd:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  22d9e1:	c5 fb 10 45 d0       	vmovsd xmm0,QWORD PTR [rbp-0x30]
  22d9e6:	48 89 95 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rdx
  22d9ed:	48 89 b5 28 fe ff ff 	mov    QWORD PTR [rbp-0x1d8],rsi
  22d9f4:	e8 27 16 00 00       	call   22f020 <fpnext>
  22d9f9:	31 ff                	xor    edi,edi
  22d9fb:	41 88 f8             	mov    r8b,dil
  22d9fe:	c5 fb 5c 45 d0       	vsubsd xmm0,xmm0,QWORD PTR [rbp-0x30]
  22da03:	41 f6 c0 01          	test   r8b,0x1
  22da07:	c5 fb 11 85 20 fe ff 	vmovsd QWORD PTR [rbp-0x1e0],xmm0
  22da0e:	ff 
  22da0f:	75 63                	jne    22da74 <errolInt+0x424>
  22da11:	eb 10                	jmp    22da23 <errolInt+0x3d3>
  22da13:	48 8d 3d e6 60 01 00 	lea    rdi,[rip+0x160e6]        # 243b00 <__unnamed_227>
  22da1a:	31 c0                	xor    eax,eax
  22da1c:	89 c6                	mov    esi,eax
    var mid = @floatToInt(u128, val);
  22da1e:	e8 dd db fd ff       	call   20b600 <panic>
    var low: u128 = mid - fpeint((fpnext(val) - val) / 2.0);
  22da23:	c5 fb 10 05 b5 31 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd31b5]        # 200be0 <__unnamed_185+0x10>
  22da2a:	ff 
  22da2b:	c5 fb 10 8d 20 fe ff 	vmovsd xmm1,QWORD PTR [rbp-0x1e0]
  22da32:	ff 
  22da33:	c5 f3 5e c0          	vdivsd xmm0,xmm1,xmm0
  22da37:	e8 74 16 00 00       	call   22f0b0 <fpeint>
  22da3c:	48 8b 8d 30 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d0]
  22da43:	48 29 c1             	sub    rcx,rax
  22da46:	48 8b 85 28 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d8]
  22da4d:	48 19 d0             	sbb    rax,rdx
  22da50:	40 0f 92 c6          	setb   sil
  22da54:	48 89 ca             	mov    rdx,rcx
  22da57:	40 f6 c6 01          	test   sil,0x1
  22da5b:	48 89 8d 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],rcx
  22da62:	48 89 95 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rdx
  22da69:	48 89 85 08 fe ff ff 	mov    QWORD PTR [rbp-0x1f8],rax
  22da70:	75 12                	jne    22da84 <errolInt+0x434>
  22da72:	eb 20                	jmp    22da94 <errolInt+0x444>
  22da74:	48 8d 3d c5 57 01 00 	lea    rdi,[rip+0x157c5]        # 243240 <__unnamed_7>
  22da7b:	31 c0                	xor    eax,eax
  22da7d:	89 c6                	mov    esi,eax
  22da7f:	e8 7c db fd ff       	call   20b600 <panic>
  22da84:	48 8d 3d 3d 57 01 00 	lea    rdi,[rip+0x1573d]        # 2431c8 <__unnamed_4>
  22da8b:	31 c0                	xor    eax,eax
  22da8d:	89 c6                	mov    esi,eax
  22da8f:	e8 6c db fd ff       	call   20b600 <panic>
  22da94:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
  22da9b:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  22da9f:	48 8b 8d 08 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1f8]
  22daa6:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
    var high: u128 = mid + fpeint((val - fpprev(val)) / 2.0);
  22daaa:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  22daae:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  22dab2:	c5 fb 10 45 d0       	vmovsd xmm0,QWORD PTR [rbp-0x30]
  22dab7:	c5 fb 10 4d d0       	vmovsd xmm1,QWORD PTR [rbp-0x30]
  22dabc:	c5 fb 11 85 00 fe ff 	vmovsd QWORD PTR [rbp-0x200],xmm0
  22dac3:	ff 
  22dac4:	c5 f8 28 c1          	vmovaps xmm0,xmm1
  22dac8:	48 89 95 f8 fd ff ff 	mov    QWORD PTR [rbp-0x208],rdx
  22dacf:	48 89 b5 f0 fd ff ff 	mov    QWORD PTR [rbp-0x210],rsi
  22dad6:	e8 65 15 00 00       	call   22f040 <fpprev>
  22dadb:	31 ff                	xor    edi,edi
  22dadd:	41 88 f8             	mov    r8b,dil
  22dae0:	c5 fb 10 8d 00 fe ff 	vmovsd xmm1,QWORD PTR [rbp-0x200]
  22dae7:	ff 
  22dae8:	c5 f3 5c c0          	vsubsd xmm0,xmm1,xmm0
  22daec:	41 f6 c0 01          	test   r8b,0x1
  22daf0:	c5 fb 11 85 e8 fd ff 	vmovsd QWORD PTR [rbp-0x218],xmm0
  22daf7:	ff 
  22daf8:	75 51                	jne    22db4b <errolInt+0x4fb>
  22dafa:	c5 fb 10 05 de 30 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd30de]        # 200be0 <__unnamed_185+0x10>
  22db01:	ff 
  22db02:	c5 fb 10 8d e8 fd ff 	vmovsd xmm1,QWORD PTR [rbp-0x218]
  22db09:	ff 
  22db0a:	c5 f3 5e c0          	vdivsd xmm0,xmm1,xmm0
  22db0e:	e8 9d 15 00 00       	call   22f0b0 <fpeint>
  22db13:	48 8b 8d f8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x208]
  22db1a:	48 01 c1             	add    rcx,rax
  22db1d:	48 8b 85 f0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x210]
  22db24:	48 11 d0             	adc    rax,rdx
  22db27:	40 0f 92 c6          	setb   sil
  22db2b:	48 89 ca             	mov    rdx,rcx
  22db2e:	40 f6 c6 01          	test   sil,0x1
  22db32:	48 89 8d e0 fd ff ff 	mov    QWORD PTR [rbp-0x220],rcx
  22db39:	48 89 95 d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rdx
  22db40:	48 89 85 d0 fd ff ff 	mov    QWORD PTR [rbp-0x230],rax
  22db47:	75 12                	jne    22db5b <errolInt+0x50b>
  22db49:	eb 20                	jmp    22db6b <errolInt+0x51b>
  22db4b:	48 8d 3d ee 56 01 00 	lea    rdi,[rip+0x156ee]        # 243240 <__unnamed_7>
  22db52:	31 c0                	xor    eax,eax
  22db54:	89 c6                	mov    esi,eax
  22db56:	e8 a5 da fd ff       	call   20b600 <panic>
  22db5b:	48 8d 3d 66 56 01 00 	lea    rdi,[rip+0x15666]        # 2431c8 <__unnamed_4>
  22db62:	31 c0                	xor    eax,eax
  22db64:	89 c6                	mov    esi,eax
  22db66:	e8 95 da fd ff       	call   20b600 <panic>
  22db6b:	48 8b 85 e0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x220]
  22db72:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  22db76:	48 8b 8d d0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x230]
  22db7d:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
    if (@bitCast(u64, val) & 0x1 != 0) {
  22db81:	c5 fb 10 45 d0       	vmovsd xmm0,QWORD PTR [rbp-0x30]
  22db86:	c4 e1 f9 7e c2       	vmovq  rdx,xmm0
  22db8b:	48 83 e2 01          	and    rdx,0x1
  22db8f:	48 83 fa 00          	cmp    rdx,0x0
  22db93:	0f 85 c9 fb ff ff    	jne    22d762 <errolInt+0x112>
  22db99:	e9 fd fb ff ff       	jmp    22d79b <errolInt+0x14b>
  22db9e:	48 8d 3d 23 56 01 00 	lea    rdi,[rip+0x15623]        # 2431c8 <__unnamed_4>
  22dba5:	31 c0                	xor    eax,eax
  22dba7:	89 c6                	mov    esi,eax
        high -= 1;
  22dba9:	e8 52 da fd ff       	call   20b600 <panic>
  22dbae:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  22dbb5:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  22dbb9:	48 8b 8d e8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x118]
  22dbc0:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
    if (@bitCast(u64, val) & 0x1 != 0) {
  22dbc4:	e9 0b fc ff ff       	jmp    22d7d4 <errolInt+0x184>
  22dbc9:	48 8d 3d f8 55 01 00 	lea    rdi,[rip+0x155f8]        # 2431c8 <__unnamed_4>
  22dbd0:	31 c0                	xor    eax,eax
  22dbd2:	89 c6                	mov    esi,eax
        low -= 1;
  22dbd4:	e8 27 da fd ff       	call   20b600 <panic>
  22dbd9:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
  22dbe0:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  22dbe4:	48 8b 8d d0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x130]
  22dbeb:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
    if (@bitCast(u64, val) & 0x1 != 0) {
  22dbef:	e9 e0 fb ff ff       	jmp    22d7d4 <errolInt+0x184>
    var l64 = @intCast(u64, low % pow19);
  22dbf4:	31 c0                	xor    eax,eax
  22dbf6:	89 c1                	mov    ecx,eax
  22dbf8:	48 ba 00 00 e8 89 04 	movabs rdx,0x8ac7230489e80000
  22dbff:	23 c7 8a 
  22dc02:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  22dc09:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  22dc10:	e8 7b df 00 00       	call   23bb90 <__umodti3>
  22dc15:	c5 f9 76 c0          	vpcmpeqd xmm0,xmm0,xmm0
  22dc19:	c5 79 d7 c0          	vpmovmskb r8d,xmm0
  22dc1d:	41 81 e8 ff ff 00 00 	sub    r8d,0xffff
  22dc24:	48 89 85 c8 fd ff ff 	mov    QWORD PTR [rbp-0x238],rax
  22dc2b:	44 89 85 c4 fd ff ff 	mov    DWORD PTR [rbp-0x23c],r8d
  22dc32:	74 12                	je     22dc46 <errolInt+0x5f6>
  22dc34:	eb 3c                	jmp    22dc72 <errolInt+0x622>
  22dc36:	48 8d 3d bb 56 01 00 	lea    rdi,[rip+0x156bb]        # 2432f8 <__unnamed_15>
  22dc3d:	31 c0                	xor    eax,eax
  22dc3f:	89 c6                	mov    esi,eax
  22dc41:	e8 ba d9 fd ff       	call   20b600 <panic>
  22dc46:	31 c0                	xor    eax,eax
  22dc48:	88 c1                	mov    cl,al
  22dc4a:	48 8b 95 c8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x238]
  22dc51:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
    const lf = @intCast(u64, (low / pow19) % pow19);
  22dc55:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  22dc59:	48 8b 75 a8          	mov    rsi,QWORD PTR [rbp-0x58]
  22dc5d:	f6 c1 01             	test   cl,0x1
  22dc60:	48 89 b5 b8 fd ff ff 	mov    QWORD PTR [rbp-0x248],rsi
  22dc67:	48 89 bd b0 fd ff ff 	mov    QWORD PTR [rbp-0x250],rdi
  22dc6e:	75 7f                	jne    22dcef <errolInt+0x69f>
  22dc70:	eb 10                	jmp    22dc82 <errolInt+0x632>
  22dc72:	48 8d 3d 2f 58 01 00 	lea    rdi,[rip+0x1582f]        # 2434a8 <__unnamed_22>
  22dc79:	31 c0                	xor    eax,eax
  22dc7b:	89 c6                	mov    esi,eax
    var l64 = @intCast(u64, low % pow19);
  22dc7d:	e8 7e d9 fd ff       	call   20b600 <panic>
  22dc82:	31 c0                	xor    eax,eax
  22dc84:	88 c1                	mov    cl,al
    const lf = @intCast(u64, (low / pow19) % pow19);
  22dc86:	31 c0                	xor    eax,eax
  22dc88:	89 c2                	mov    edx,eax
  22dc8a:	48 be 00 00 e8 89 04 	movabs rsi,0x8ac7230489e80000
  22dc91:	23 c7 8a 
  22dc94:	48 8b bd b0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x250]
  22dc9b:	4c 8b 85 b8 fd ff ff 	mov    r8,QWORD PTR [rbp-0x248]
  22dca2:	48 89 b5 a8 fd ff ff 	mov    QWORD PTR [rbp-0x258],rsi
  22dca9:	4c 89 c6             	mov    rsi,r8
  22dcac:	4c 8b 8d a8 fd ff ff 	mov    r9,QWORD PTR [rbp-0x258]
  22dcb3:	48 89 95 a0 fd ff ff 	mov    QWORD PTR [rbp-0x260],rdx
  22dcba:	4c 89 ca             	mov    rdx,r9
  22dcbd:	4c 8b 95 a0 fd ff ff 	mov    r10,QWORD PTR [rbp-0x260]
  22dcc4:	88 8d 9f fd ff ff    	mov    BYTE PTR [rbp-0x261],cl
  22dcca:	4c 89 d1             	mov    rcx,r10
  22dccd:	e8 3e de 00 00       	call   23bb10 <__udivti3>
  22dcd2:	44 8a 9d 9f fd ff ff 	mov    r11b,BYTE PTR [rbp-0x261]
  22dcd9:	41 f6 c3 01          	test   r11b,0x1
  22dcdd:	48 89 95 90 fd ff ff 	mov    QWORD PTR [rbp-0x270],rdx
  22dce4:	48 89 85 88 fd ff ff 	mov    QWORD PTR [rbp-0x278],rax
  22dceb:	75 54                	jne    22dd41 <errolInt+0x6f1>
  22dced:	eb 10                	jmp    22dcff <errolInt+0x6af>
  22dcef:	48 8d 3d 4a 55 01 00 	lea    rdi,[rip+0x1554a]        # 243240 <__unnamed_7>
  22dcf6:	31 c0                	xor    eax,eax
  22dcf8:	89 c6                	mov    esi,eax
  22dcfa:	e8 01 d9 fd ff       	call   20b600 <panic>
  22dcff:	31 c0                	xor    eax,eax
  22dd01:	89 c1                	mov    ecx,eax
  22dd03:	48 ba 00 00 e8 89 04 	movabs rdx,0x8ac7230489e80000
  22dd0a:	23 c7 8a 
  22dd0d:	48 8b bd 88 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x278]
  22dd14:	48 8b b5 90 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x270]
  22dd1b:	e8 70 de 00 00       	call   23bb90 <__umodti3>
  22dd20:	c5 f9 76 c0          	vpcmpeqd xmm0,xmm0,xmm0
  22dd24:	c5 79 d7 c0          	vpmovmskb r8d,xmm0
  22dd28:	41 81 e8 ff ff 00 00 	sub    r8d,0xffff
  22dd2f:	48 89 85 80 fd ff ff 	mov    QWORD PTR [rbp-0x280],rax
  22dd36:	44 89 85 7c fd ff ff 	mov    DWORD PTR [rbp-0x284],r8d
  22dd3d:	74 12                	je     22dd51 <errolInt+0x701>
  22dd3f:	eb 3c                	jmp    22dd7d <errolInt+0x72d>
  22dd41:	48 8d 3d b0 55 01 00 	lea    rdi,[rip+0x155b0]        # 2432f8 <__unnamed_15>
  22dd48:	31 c0                	xor    eax,eax
  22dd4a:	89 c6                	mov    esi,eax
  22dd4c:	e8 af d8 fd ff       	call   20b600 <panic>
  22dd51:	31 c0                	xor    eax,eax
  22dd53:	88 c1                	mov    cl,al
  22dd55:	48 8b 95 80 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x280]
  22dd5c:	48 89 55 80          	mov    QWORD PTR [rbp-0x80],rdx
    var h64 = @intCast(u64, high % pow19);
  22dd60:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  22dd64:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  22dd68:	f6 c1 01             	test   cl,0x1
  22dd6b:	48 89 b5 70 fd ff ff 	mov    QWORD PTR [rbp-0x290],rsi
  22dd72:	48 89 bd 68 fd ff ff 	mov    QWORD PTR [rbp-0x298],rdi
  22dd79:	75 54                	jne    22ddcf <errolInt+0x77f>
  22dd7b:	eb 10                	jmp    22dd8d <errolInt+0x73d>
  22dd7d:	48 8d 3d 24 57 01 00 	lea    rdi,[rip+0x15724]        # 2434a8 <__unnamed_22>
  22dd84:	31 c0                	xor    eax,eax
  22dd86:	89 c6                	mov    esi,eax
    const lf = @intCast(u64, (low / pow19) % pow19);
  22dd88:	e8 73 d8 fd ff       	call   20b600 <panic>
    var h64 = @intCast(u64, high % pow19);
  22dd8d:	31 c0                	xor    eax,eax
  22dd8f:	89 c1                	mov    ecx,eax
  22dd91:	48 ba 00 00 e8 89 04 	movabs rdx,0x8ac7230489e80000
  22dd98:	23 c7 8a 
  22dd9b:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  22dda2:	48 8b b5 70 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x290]
  22dda9:	e8 e2 dd 00 00       	call   23bb90 <__umodti3>
  22ddae:	c5 f9 76 c0          	vpcmpeqd xmm0,xmm0,xmm0
  22ddb2:	c5 79 d7 c0          	vpmovmskb r8d,xmm0
  22ddb6:	41 81 e8 ff ff 00 00 	sub    r8d,0xffff
  22ddbd:	48 89 85 60 fd ff ff 	mov    QWORD PTR [rbp-0x2a0],rax
  22ddc4:	44 89 85 5c fd ff ff 	mov    DWORD PTR [rbp-0x2a4],r8d
  22ddcb:	74 12                	je     22dddf <errolInt+0x78f>
  22ddcd:	eb 3f                	jmp    22de0e <errolInt+0x7be>
  22ddcf:	48 8d 3d 22 55 01 00 	lea    rdi,[rip+0x15522]        # 2432f8 <__unnamed_15>
  22ddd6:	31 c0                	xor    eax,eax
  22ddd8:	89 c6                	mov    esi,eax
  22ddda:	e8 21 d8 fd ff       	call   20b600 <panic>
  22dddf:	31 c0                	xor    eax,eax
  22dde1:	88 c1                	mov    cl,al
  22dde3:	48 8b 95 60 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2a0]
  22ddea:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
    const hf = @intCast(u64, (high / pow19) % pow19);
  22ddf1:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  22ddf5:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  22ddf9:	f6 c1 01             	test   cl,0x1
  22ddfc:	48 89 b5 50 fd ff ff 	mov    QWORD PTR [rbp-0x2b0],rsi
  22de03:	48 89 bd 48 fd ff ff 	mov    QWORD PTR [rbp-0x2b8],rdi
  22de0a:	75 7f                	jne    22de8b <errolInt+0x83b>
  22de0c:	eb 10                	jmp    22de1e <errolInt+0x7ce>
  22de0e:	48 8d 3d 93 56 01 00 	lea    rdi,[rip+0x15693]        # 2434a8 <__unnamed_22>
  22de15:	31 c0                	xor    eax,eax
  22de17:	89 c6                	mov    esi,eax
    var h64 = @intCast(u64, high % pow19);
  22de19:	e8 e2 d7 fd ff       	call   20b600 <panic>
  22de1e:	31 c0                	xor    eax,eax
  22de20:	88 c1                	mov    cl,al
    const hf = @intCast(u64, (high / pow19) % pow19);
  22de22:	31 c0                	xor    eax,eax
  22de24:	89 c2                	mov    edx,eax
  22de26:	48 be 00 00 e8 89 04 	movabs rsi,0x8ac7230489e80000
  22de2d:	23 c7 8a 
  22de30:	48 8b bd 48 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2b8]
  22de37:	4c 8b 85 50 fd ff ff 	mov    r8,QWORD PTR [rbp-0x2b0]
  22de3e:	48 89 b5 40 fd ff ff 	mov    QWORD PTR [rbp-0x2c0],rsi
  22de45:	4c 89 c6             	mov    rsi,r8
  22de48:	4c 8b 8d 40 fd ff ff 	mov    r9,QWORD PTR [rbp-0x2c0]
  22de4f:	48 89 95 38 fd ff ff 	mov    QWORD PTR [rbp-0x2c8],rdx
  22de56:	4c 89 ca             	mov    rdx,r9
  22de59:	4c 8b 95 38 fd ff ff 	mov    r10,QWORD PTR [rbp-0x2c8]
  22de60:	88 8d 37 fd ff ff    	mov    BYTE PTR [rbp-0x2c9],cl
  22de66:	4c 89 d1             	mov    rcx,r10
  22de69:	e8 a2 dc 00 00       	call   23bb10 <__udivti3>
  22de6e:	44 8a 9d 37 fd ff ff 	mov    r11b,BYTE PTR [rbp-0x2c9]
  22de75:	41 f6 c3 01          	test   r11b,0x1
  22de79:	48 89 95 28 fd ff ff 	mov    QWORD PTR [rbp-0x2d8],rdx
  22de80:	48 89 85 20 fd ff ff 	mov    QWORD PTR [rbp-0x2e0],rax
  22de87:	75 54                	jne    22dedd <errolInt+0x88d>
  22de89:	eb 10                	jmp    22de9b <errolInt+0x84b>
  22de8b:	48 8d 3d ae 53 01 00 	lea    rdi,[rip+0x153ae]        # 243240 <__unnamed_7>
  22de92:	31 c0                	xor    eax,eax
  22de94:	89 c6                	mov    esi,eax
  22de96:	e8 65 d7 fd ff       	call   20b600 <panic>
  22de9b:	31 c0                	xor    eax,eax
  22de9d:	89 c1                	mov    ecx,eax
  22de9f:	48 ba 00 00 e8 89 04 	movabs rdx,0x8ac7230489e80000
  22dea6:	23 c7 8a 
  22dea9:	48 8b bd 20 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2e0]
  22deb0:	48 8b b5 28 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2d8]
  22deb7:	e8 d4 dc 00 00       	call   23bb90 <__umodti3>
  22debc:	c5 f9 76 c0          	vpcmpeqd xmm0,xmm0,xmm0
  22dec0:	c5 79 d7 c0          	vpmovmskb r8d,xmm0
  22dec4:	41 81 e8 ff ff 00 00 	sub    r8d,0xffff
  22decb:	48 89 85 18 fd ff ff 	mov    QWORD PTR [rbp-0x2e8],rax
  22ded2:	44 89 85 14 fd ff ff 	mov    DWORD PTR [rbp-0x2ec],r8d
  22ded9:	74 12                	je     22deed <errolInt+0x89d>
  22dedb:	eb 34                	jmp    22df11 <errolInt+0x8c1>
  22dedd:	48 8d 3d 14 54 01 00 	lea    rdi,[rip+0x15414]        # 2432f8 <__unnamed_15>
  22dee4:	31 c0                	xor    eax,eax
  22dee6:	89 c6                	mov    esi,eax
  22dee8:	e8 13 d7 fd ff       	call   20b600 <panic>
  22deed:	48 8b 85 18 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2e8]
  22def4:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
    if (lf != hf) {
  22defb:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  22deff:	48 3b 8d 70 ff ff ff 	cmp    rcx,QWORD PTR [rbp-0x90]
  22df06:	0f 85 f0 f8 ff ff    	jne    22d7fc <errolInt+0x1ac>
  22df0c:	e9 29 f9 ff ff       	jmp    22d83a <errolInt+0x1ea>
  22df11:	48 8d 3d 90 55 01 00 	lea    rdi,[rip+0x15590]        # 2434a8 <__unnamed_22>
  22df18:	31 c0                	xor    eax,eax
  22df1a:	89 c6                	mov    esi,eax
    const hf = @intCast(u64, (high / pow19) % pow19);
  22df1c:	e8 df d6 fd ff       	call   20b600 <panic>
        mid = mid / (pow19 / 10);
  22df21:	31 c0                	xor    eax,eax
  22df23:	89 c1                	mov    ecx,eax
  22df25:	48 ba 00 00 64 a7 b3 	movabs rdx,0xde0b6b3a7640000
  22df2c:	b6 e0 0d 
  22df2f:	48 8b bd b0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x150]
  22df36:	48 8b b5 b8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x148]
  22df3d:	e8 ce db 00 00       	call   23bb10 <__udivti3>
  22df42:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  22df46:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
    if (lf != hf) {
  22df4a:	e9 ed f8 ff ff       	jmp    22d83c <errolInt+0x1ec>
  22df4f:	48 8d 3d ea 52 01 00 	lea    rdi,[rip+0x152ea]        # 243240 <__unnamed_7>
  22df56:	31 c0                	xor    eax,eax
  22df58:	89 c6                	mov    esi,eax
        mid = mid / (pow19 / 10);
  22df5a:	e8 a1 d6 fd ff       	call   20b600 <panic>
  22df5f:	48 8d 3d 62 52 01 00 	lea    rdi,[rip+0x15262]        # 2431c8 <__unnamed_4>
  22df66:	31 c0                	xor    eax,eax
  22df68:	89 c6                	mov    esi,eax
            x *= 10;
  22df6a:	e8 91 d6 fd ff       	call   20b600 <panic>
  22df6f:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
  22df76:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
        while (i < mi) : (i += 1) {
  22df7d:	8b 8d 5c ff ff ff    	mov    ecx,DWORD PTR [rbp-0xa4]
  22df83:	ff c1                	inc    ecx
  22df85:	0f 90 c2             	seto   dl
  22df88:	89 8d 10 fd ff ff    	mov    DWORD PTR [rbp-0x2f0],ecx
  22df8e:	88 95 0f fd ff ff    	mov    BYTE PTR [rbp-0x2f1],dl
  22df94:	70 02                	jo     22df98 <errolInt+0x948>
  22df96:	eb 10                	jmp    22dfa8 <errolInt+0x958>
  22df98:	48 8d 3d 29 52 01 00 	lea    rdi,[rip+0x15229]        # 2431c8 <__unnamed_4>
  22df9f:	31 c0                	xor    eax,eax
  22dfa1:	89 c6                	mov    esi,eax
  22dfa3:	e8 58 d6 fd ff       	call   20b600 <panic>
  22dfa8:	8b 85 10 fd ff ff    	mov    eax,DWORD PTR [rbp-0x2f0]
  22dfae:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
  22dfb4:	e9 be f8 ff ff       	jmp    22d877 <errolInt+0x227>
    const m64 = @truncate(u64, @divTrunc(mid, x));
  22dfb9:	48 8b bd 98 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x168]
  22dfc0:	48 8b b5 90 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x170]
  22dfc7:	48 8b 95 88 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x178]
  22dfce:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
  22dfd5:	e8 36 db 00 00       	call   23bb10 <__udivti3>
  22dfda:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
    if (lf != hf) mi += 19;
  22dfe1:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  22dfe5:	48 3b 85 70 ff ff ff 	cmp    rax,QWORD PTR [rbp-0x90]
  22dfec:	0f 85 fc f8 ff ff    	jne    22d8ee <errolInt+0x29e>
  22dff2:	e9 1a f9 ff ff       	jmp    22d911 <errolInt+0x2c1>
  22dff7:	48 8d 3d 42 52 01 00 	lea    rdi,[rip+0x15242]        # 243240 <__unnamed_7>
  22dffe:	31 c0                	xor    eax,eax
  22e000:	89 c6                	mov    esi,eax
    const m64 = @truncate(u64, @divTrunc(mid, x));
  22e002:	e8 f9 d5 fd ff       	call   20b600 <panic>
  22e007:	48 8d 3d ba 51 01 00 	lea    rdi,[rip+0x151ba]        # 2431c8 <__unnamed_4>
  22e00e:	31 c0                	xor    eax,eax
  22e010:	89 c6                	mov    esi,eax
    if (lf != hf) mi += 19;
  22e012:	e8 e9 d5 fd ff       	call   20b600 <panic>
  22e017:	8b 85 7c fe ff ff    	mov    eax,DWORD PTR [rbp-0x184]
  22e01d:	89 85 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],eax
  22e023:	e9 eb f8 ff ff       	jmp    22d913 <errolInt+0x2c3>
  22e028:	48 8d 3d 99 51 01 00 	lea    rdi,[rip+0x15199]        # 2431c8 <__unnamed_4>
  22e02f:	31 c0                	xor    eax,eax
  22e031:	89 c6                	mov    esi,eax
    var buf_index = u64toa(m64, buffer) - 1;
  22e033:	e8 c8 d5 fd ff       	call   20b600 <panic>
  22e038:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  22e03f:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
    if (mi != 0) {
  22e046:	83 bd 6c ff ff ff 00 	cmp    DWORD PTR [rbp-0x94],0x0
  22e04d:	0f 85 f2 f8 ff ff    	jne    22d945 <errolInt+0x2f5>
  22e053:	e9 13 f9 ff ff       	jmp    22d96b <errolInt+0x31b>
  22e058:	48 8d 3d 69 51 01 00 	lea    rdi,[rip+0x15169]        # 2431c8 <__unnamed_4>
  22e05f:	31 c0                	xor    eax,eax
  22e061:	89 c6                	mov    esi,eax
        buffer[buf_index - 1] += @boolToInt(buffer[buf_index] >= '5');
  22e063:	e8 98 d5 fd ff       	call   20b600 <panic>
  22e068:	48 8b 85 60 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a0]
  22e06f:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
  22e076:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22e07a:	72 10                	jb     22e08c <errolInt+0xa3c>
  22e07c:	48 8d 3d 75 53 01 00 	lea    rdi,[rip+0x15375]        # 2433f8 <__unnamed_20>
  22e083:	31 c0                	xor    eax,eax
  22e085:	89 c6                	mov    esi,eax
  22e087:	e8 74 d5 fd ff       	call   20b600 <panic>
  22e08c:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  22e093:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22e096:	48 89 ca             	mov    rdx,rcx
  22e099:	48 8b b5 60 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1a0]
  22e0a0:	48 01 f2             	add    rdx,rsi
  22e0a3:	40 8a 3c 31          	mov    dil,BYTE PTR [rcx+rsi*1]
  22e0a7:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
  22e0ae:	48 3b 48 08          	cmp    rcx,QWORD PTR [rax+0x8]
  22e0b2:	48 89 95 00 fd ff ff 	mov    QWORD PTR [rbp-0x300],rdx
  22e0b9:	40 88 bd ff fc ff ff 	mov    BYTE PTR [rbp-0x301],dil
  22e0c0:	48 89 8d f0 fc ff ff 	mov    QWORD PTR [rbp-0x310],rcx
  22e0c7:	72 10                	jb     22e0d9 <errolInt+0xa89>
  22e0c9:	48 8d 3d 28 53 01 00 	lea    rdi,[rip+0x15328]        # 2433f8 <__unnamed_20>
  22e0d0:	31 c0                	xor    eax,eax
  22e0d2:	89 c6                	mov    esi,eax
  22e0d4:	e8 27 d5 fd ff       	call   20b600 <panic>
  22e0d9:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  22e0e0:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22e0e3:	48 8b 95 f0 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x310]
  22e0ea:	80 3c 11 35          	cmp    BYTE PTR [rcx+rdx*1],0x35
  22e0ee:	40 0f 93 c6          	setae  sil
  22e0f2:	40 80 e6 01          	and    sil,0x1
  22e0f6:	40 8a bd ff fc ff ff 	mov    dil,BYTE PTR [rbp-0x301]
  22e0fd:	40 00 f7             	add    dil,sil
  22e100:	40 0f 92 c6          	setb   sil
  22e104:	40 f6 c6 01          	test   sil,0x1
  22e108:	40 88 bd ef fc ff ff 	mov    BYTE PTR [rbp-0x311],dil
  22e10f:	75 02                	jne    22e113 <errolInt+0xac3>
  22e111:	eb 10                	jmp    22e123 <errolInt+0xad3>
  22e113:	48 8d 3d ae 50 01 00 	lea    rdi,[rip+0x150ae]        # 2431c8 <__unnamed_4>
  22e11a:	31 c0                	xor    eax,eax
  22e11c:	89 c6                	mov    esi,eax
  22e11e:	e8 dd d4 fd ff       	call   20b600 <panic>
  22e123:	48 8b 85 00 fd ff ff 	mov    rax,QWORD PTR [rbp-0x300]
  22e12a:	8a 8d ef fc ff ff    	mov    cl,BYTE PTR [rbp-0x311]
  22e130:	88 08                	mov    BYTE PTR [rax],cl
    if (mi != 0) {
  22e132:	e9 5a f8 ff ff       	jmp    22d991 <errolInt+0x341>
  22e137:	48 8d 3d 8a 50 01 00 	lea    rdi,[rip+0x1508a]        # 2431c8 <__unnamed_4>
  22e13e:	31 c0                	xor    eax,eax
  22e140:	89 c6                	mov    esi,eax
        buf_index += 1;
  22e142:	e8 b9 d4 fd ff       	call   20b600 <panic>
  22e147:	48 8b 85 50 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b0]
  22e14e:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
    if (mi != 0) {
  22e155:	e9 37 f8 ff ff       	jmp    22d991 <errolInt+0x341>
  22e15a:	48 8d 3d 97 52 01 00 	lea    rdi,[rip+0x15297]        # 2433f8 <__unnamed_20>
  22e161:	31 c0                	xor    eax,eax
  22e163:	89 c6                	mov    esi,eax
        .digits = buffer[0..buf_index],
  22e165:	e8 96 d4 fd ff       	call   20b600 <panic>
  22e16a:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  22e171:	48 8b 8d 40 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1c0]
  22e178:	48 39 c8             	cmp    rax,rcx
  22e17b:	76 10                	jbe    22e18d <errolInt+0xb3d>
  22e17d:	48 8d 3d 74 52 01 00 	lea    rdi,[rip+0x15274]        # 2433f8 <__unnamed_20>
  22e184:	31 c0                	xor    eax,eax
  22e186:	89 c6                	mov    esi,eax
  22e188:	e8 73 d4 fd ff       	call   20b600 <panic>
  22e18d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  22e194:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22e197:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  22e19b:	48 8b 8d 38 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1c8]
  22e1a2:	48 83 e9 00          	sub    rcx,0x0
  22e1a6:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
        .exp = @intCast(i32, buf_index) + mi,
  22e1aa:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
  22e1b1:	89 ca                	mov    edx,ecx
  22e1b3:	48 63 f2             	movsxd rsi,edx
  22e1b6:	48 39 f1             	cmp    rcx,rsi
  22e1b9:	89 95 e8 fc ff ff    	mov    DWORD PTR [rbp-0x318],edx
  22e1bf:	75 1f                	jne    22e1e0 <errolInt+0xb90>
  22e1c1:	8b 85 e8 fc ff ff    	mov    eax,DWORD PTR [rbp-0x318]
  22e1c7:	03 85 6c ff ff ff    	add    eax,DWORD PTR [rbp-0x94]
  22e1cd:	0f 90 c1             	seto   cl
  22e1d0:	89 85 e4 fc ff ff    	mov    DWORD PTR [rbp-0x31c],eax
  22e1d6:	88 8d e3 fc ff ff    	mov    BYTE PTR [rbp-0x31d],cl
  22e1dc:	70 12                	jo     22e1f0 <errolInt+0xba0>
  22e1de:	eb 20                	jmp    22e200 <errolInt+0xbb0>
  22e1e0:	48 8d 3d c1 52 01 00 	lea    rdi,[rip+0x152c1]        # 2434a8 <__unnamed_22>
  22e1e7:	31 c0                	xor    eax,eax
  22e1e9:	89 c6                	mov    esi,eax
  22e1eb:	e8 10 d4 fd ff       	call   20b600 <panic>
  22e1f0:	48 8d 3d d1 4f 01 00 	lea    rdi,[rip+0x14fd1]        # 2431c8 <__unnamed_4>
  22e1f7:	31 c0                	xor    eax,eax
  22e1f9:	89 c6                	mov    esi,eax
  22e1fb:	e8 00 d4 fd ff       	call   20b600 <panic>
    return FloatDecimal{
  22e200:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22e204:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  22e208:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  22e20c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  22e210:	8b 8d e4 fc ff ff    	mov    ecx,DWORD PTR [rbp-0x31c]
  22e216:	89 4d e8             	mov    DWORD PTR [rbp-0x18],ecx
  22e219:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  22e21d:	48 8b 95 30 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd0]
  22e224:	48 89 02             	mov    QWORD PTR [rdx],rax
  22e227:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  22e22b:	48 89 42 08          	mov    QWORD PTR [rdx+0x8],rax
  22e22f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22e233:	48 89 42 10          	mov    QWORD PTR [rdx+0x10],rax
  22e237:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  22e23e:	48 81 c4 20 03 00 00 	add    rsp,0x320
  22e245:	5d                   	pop    rbp
  22e246:	c3                   	ret    
  22e247:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  22e24e:	00 00 

000000000022e250 <errolFixed>:

/// Fixed point conversion algorithm, guaranteed correct, optimal, and best.
///  @val: The val.
///  @buf: The output buffer.
///  &return: The exponent.
fn errolFixed(val: f64, buffer: []u8) FloatDecimal {
  22e250:	55                   	push   rbp
  22e251:	48 89 e5             	mov    rbp,rsp
  22e254:	48 81 ec b0 01 00 00 	sub    rsp,0x1b0
  22e25b:	48 89 f8             	mov    rax,rdi
  22e25e:	c5 fb 10 0d a2 29 fd 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffd29a2]        # 200c08 <__unnamed_186+0x8>
  22e265:	ff 
  22e266:	c5 fb 11 45 d0       	vmovsd QWORD PTR [rbp-0x30],xmm0
    assert((val >= 16.0) and (val < 9.007199254740992e15));
  22e26b:	c5 fb 10 45 d0       	vmovsd xmm0,QWORD PTR [rbp-0x30]
  22e270:	c5 f9 2e c1          	vucomisd xmm0,xmm1
  22e274:	0f 93 c1             	setae  cl
  22e277:	f6 c1 01             	test   cl,0x1
  22e27a:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  22e281:	48 89 b5 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rsi
  22e288:	48 89 bd 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdi
  22e28f:	88 8d 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],cl
  22e295:	75 02                	jne    22e299 <errolFixed+0x49>
  22e297:	eb 16                	jmp    22e2af <errolFixed+0x5f>
  22e299:	c5 fb 10 05 ff 29 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd29ff]        # 200ca0 <__unnamed_190+0x8>
  22e2a0:	ff 
  22e2a1:	c5 f9 2e 45 d0       	vucomisd xmm0,QWORD PTR [rbp-0x30]
  22e2a6:	0f 97 c0             	seta   al
  22e2a9:	88 85 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],al
  22e2af:	8a 85 67 ff ff ff    	mov    al,BYTE PTR [rbp-0x99]
  22e2b5:	c5 fb 10 05 53 29 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd2953]        # 200c10 <__unnamed_186+0x10>
  22e2bc:	ff 
  22e2bd:	c5 fb 10 0d 33 29 fd 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffd2933]        # 200bf8 <__unnamed_187+0x8>
  22e2c4:	ff 
  22e2c5:	0f b6 f8             	movzx  edi,al
  22e2c8:	c5 fb 11 8d 58 ff ff 	vmovsd QWORD PTR [rbp-0xa8],xmm1
  22e2cf:	ff 
  22e2d0:	c5 fb 11 85 50 ff ff 	vmovsd QWORD PTR [rbp-0xb0],xmm0
  22e2d7:	ff 
  22e2d8:	e8 23 cd fd ff       	call   20b000 <assert>

    const u = @floatToInt(u64, val);
  22e2dd:	c5 fb 10 45 d0       	vmovsd xmm0,QWORD PTR [rbp-0x30]
  22e2e2:	c5 fb 10 0d 66 29 fd 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffd2966]        # 200c50 <app_mask+0x10>
  22e2e9:	ff 
  22e2ea:	c5 fb 5c d1          	vsubsd xmm2,xmm0,xmm1
  22e2ee:	c4 e1 fb 2c ca       	vcvttsd2si rcx,xmm2
  22e2f3:	48 ba 00 00 00 00 00 	movabs rdx,0x8000000000000000
  22e2fa:	00 00 80 
  22e2fd:	48 31 d1             	xor    rcx,rdx
  22e300:	c4 e1 fb 2c d0       	vcvttsd2si rdx,xmm0
  22e305:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22e309:	48 0f 47 ca          	cmova  rcx,rdx
  22e30d:	c4 e1 f9 6e c9       	vmovq  xmm1,rcx
  22e312:	c5 f9 6f 15 86 1e fd 	vmovdqa xmm2,XMMWORD PTR [rip+0xfffffffffffd1e86]        # 2001a0 <__unnamed_313-0x10>
  22e319:	ff 
  22e31a:	c5 f1 62 ca          	vpunpckldq xmm1,xmm1,xmm2
  22e31e:	c5 f9 28 15 ba 23 fd 	vmovapd xmm2,XMMWORD PTR [rip+0xfffffffffffd23ba]        # 2006e0 <__unnamed_69+0x10>
  22e325:	ff 
  22e326:	c5 f1 5c ca          	vsubpd xmm1,xmm1,xmm2
  22e32a:	c5 f1 7c c9          	vhaddpd xmm1,xmm1,xmm1
  22e32e:	c5 fb 5c c1          	vsubsd xmm0,xmm0,xmm1
  22e332:	c5 fb 10 8d 58 ff ff 	vmovsd xmm1,QWORD PTR [rbp-0xa8]
  22e339:	ff 
  22e33a:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22e33e:	0f 97 c0             	seta   al
  22e341:	c5 fb 10 95 50 ff ff 	vmovsd xmm2,QWORD PTR [rbp-0xb0]
  22e348:	ff 
  22e349:	c5 f9 2e c2          	vucomisd xmm0,xmm2
  22e34d:	40 0f 97 c6          	seta   sil
  22e351:	40 20 f0             	and    al,sil
  22e354:	a8 01                	test   al,0x1
  22e356:	48 89 8d 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rcx
  22e35d:	0f 85 ac 01 00 00    	jne    22e50f <errolFixed+0x2bf>
  22e363:	e9 0e 02 00 00       	jmp    22e576 <errolFixed+0x326>
    var exp = @intCast(i32, buf_index);
    var j = buf_index;
    buffer[j] = 0;

    if (mid != 0.0) {
        while (mid != 0.0) {
  22e368:	eb 00                	jmp    22e36a <errolFixed+0x11a>
  22e36a:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
  22e36e:	c5 fb 10 4d b8       	vmovsd xmm1,QWORD PTR [rbp-0x48]
  22e373:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22e377:	74 78                	je     22e3f1 <errolFixed+0x1a1>
  22e379:	c5 fb 10 05 8f 28 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd288f]        # 200c10 <__unnamed_186+0x10>
  22e380:	ff 
  22e381:	c5 fb 10 0d 6f 28 fd 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffd286f]        # 200bf8 <__unnamed_187+0x8>
  22e388:	ff 
  22e389:	c5 fb 10 15 57 28 fd 	vmovsd xmm2,QWORD PTR [rip+0xfffffffffffd2857]        # 200be8 <__unnamed_185+0x18>
  22e390:	ff 
            lo *= 10.0;
  22e391:	c5 eb 59 55 b0       	vmulsd xmm2,xmm2,QWORD PTR [rbp-0x50]
  22e396:	c5 fb 11 55 b0       	vmovsd QWORD PTR [rbp-0x50],xmm2
            const ldig = @floatToInt(i32, lo);
  22e39b:	c5 fb 10 55 b0       	vmovsd xmm2,QWORD PTR [rbp-0x50]
  22e3a0:	c5 fb 2c c2          	vcvttsd2si eax,xmm2
  22e3a4:	c5 e3 2a d8          	vcvtsi2sd xmm3,xmm3,eax
  22e3a8:	c5 eb 5c d3          	vsubsd xmm2,xmm2,xmm3
  22e3ac:	c5 f9 2e ca          	vucomisd xmm1,xmm2
  22e3b0:	0f 97 c1             	seta   cl
  22e3b3:	c5 f9 2e d0          	vucomisd xmm2,xmm0
  22e3b7:	0f 97 c2             	seta   dl
  22e3ba:	20 d1                	and    cl,dl
  22e3bc:	f6 c1 01             	test   cl,0x1
  22e3bf:	89 85 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],eax
  22e3c5:	0f 85 d6 02 00 00    	jne    22e6a1 <errolFixed+0x451>
  22e3cb:	e9 3f 03 00 00       	jmp    22e70f <errolFixed+0x4bf>
            hi -= @intToFloat(f64, hdig);

            buffer[j] = @intCast(u8, mdig + '0');
            j += 1;

            if (hdig != ldig or j > 50) break;
  22e3d0:	48 83 7d 90 32       	cmp    QWORD PTR [rbp-0x70],0x32
  22e3d5:	0f 97 c0             	seta   al
  22e3d8:	88 85 43 ff ff ff    	mov    BYTE PTR [rbp-0xbd],al
  22e3de:	8a 85 43 ff ff ff    	mov    al,BYTE PTR [rbp-0xbd]
  22e3e4:	a8 01                	test   al,0x1
  22e3e6:	75 02                	jne    22e3ea <errolFixed+0x19a>
  22e3e8:	eb 02                	jmp    22e3ec <errolFixed+0x19c>
  22e3ea:	eb 05                	jmp    22e3f1 <errolFixed+0x1a1>
        while (mid != 0.0) {
  22e3ec:	e9 79 ff ff ff       	jmp    22e36a <errolFixed+0x11a>
  22e3f1:	c5 fb 10 05 27 28 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd2827]        # 200c20 <__unnamed_186+0x20>
  22e3f8:	ff 
        }

        if (mid > 0.5) {
  22e3f9:	c5 fb 10 4d b8       	vmovsd xmm1,QWORD PTR [rbp-0x48]
  22e3fe:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22e402:	76 23                	jbe    22e427 <errolFixed+0x1d7>
            buffer[j - 1] += 1;
  22e404:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  22e408:	48 83 e8 01          	sub    rax,0x1
  22e40c:	0f 92 c1             	setb   cl
  22e40f:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
  22e416:	88 8d 37 ff ff ff    	mov    BYTE PTR [rbp-0xc9],cl
  22e41c:	0f 82 bb 04 00 00    	jb     22e8dd <errolFixed+0x68d>
  22e422:	e9 c6 04 00 00       	jmp    22e8ed <errolFixed+0x69d>
  22e427:	c5 fb 10 05 f1 27 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd27f1]        # 200c20 <__unnamed_186+0x20>
  22e42e:	ff 
        } else if ((mid == 0.5) and (buffer[j - 1] & 0x1) != 0) {
  22e42f:	c5 fb 10 4d b8       	vmovsd xmm1,QWORD PTR [rbp-0x48]
  22e434:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22e438:	0f 94 c0             	sete   al
  22e43b:	0f 9b c1             	setnp  cl
  22e43e:	20 c8                	and    al,cl
  22e440:	a8 01                	test   al,0x1
  22e442:	88 85 36 ff ff ff    	mov    BYTE PTR [rbp-0xca],al
  22e448:	75 02                	jne    22e44c <errolFixed+0x1fc>
  22e44a:	eb 23                	jmp    22e46f <errolFixed+0x21f>
  22e44c:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  22e450:	48 83 e8 01          	sub    rax,0x1
  22e454:	0f 92 c1             	setb   cl
  22e457:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  22e45e:	88 8d 27 ff ff ff    	mov    BYTE PTR [rbp-0xd9],cl
  22e464:	0f 82 04 05 00 00    	jb     22e96e <errolFixed+0x71e>
  22e46a:	e9 0f 05 00 00       	jmp    22e97e <errolFixed+0x72e>
  22e46f:	8a 85 36 ff ff ff    	mov    al,BYTE PTR [rbp-0xca]
  22e475:	a8 01                	test   al,0x1
  22e477:	75 02                	jne    22e47b <errolFixed+0x22b>
  22e479:	eb 23                	jmp    22e49e <errolFixed+0x24e>
            buffer[j - 1] += 1;
  22e47b:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  22e47f:	48 83 e8 01          	sub    rax,0x1
  22e483:	0f 92 c1             	setb   cl
  22e486:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  22e48d:	88 8d 17 ff ff ff    	mov    BYTE PTR [rbp-0xe9],cl
  22e493:	0f 82 36 05 00 00    	jb     22e9cf <errolFixed+0x77f>
  22e499:	e9 41 05 00 00       	jmp    22e9df <errolFixed+0x78f>
        } else if ((mid == 0.5) and (buffer[j - 1] & 0x1) != 0) {
  22e49e:	eb 00                	jmp    22e4a0 <errolFixed+0x250>
        if (mid > 0.5) {
  22e4a0:	eb 00                	jmp    22e4a2 <errolFixed+0x252>
    if (mid != 0.0) {
  22e4a2:	eb 4a                	jmp    22e4ee <errolFixed+0x29e>
        }
    } else {
        while (buffer[j - 1] == '0') {
  22e4a4:	eb 00                	jmp    22e4a6 <errolFixed+0x256>
  22e4a6:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  22e4aa:	48 83 e8 01          	sub    rax,0x1
  22e4ae:	0f 92 c1             	setb   cl
  22e4b1:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
  22e4b8:	88 8d 07 ff ff ff    	mov    BYTE PTR [rbp-0xf9],cl
  22e4be:	0f 82 9c 05 00 00    	jb     22ea60 <errolFixed+0x810>
  22e4c4:	e9 a7 05 00 00       	jmp    22ea70 <errolFixed+0x820>
            buffer[j - 1] = 0;
  22e4c9:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  22e4cd:	48 83 e8 01          	sub    rax,0x1
  22e4d1:	0f 92 c1             	setb   cl
  22e4d4:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  22e4db:	88 8d f7 fe ff ff    	mov    BYTE PTR [rbp-0x109],cl
  22e4e1:	0f 82 cd 05 00 00    	jb     22eab4 <errolFixed+0x864>
  22e4e7:	e9 d8 05 00 00       	jmp    22eac4 <errolFixed+0x874>
    if (mid != 0.0) {
  22e4ec:	eb 00                	jmp    22e4ee <errolFixed+0x29e>
            j -= 1;
        }
    }

    buffer[j] = 0;
  22e4ee:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  22e4f2:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
  22e4f9:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22e4fd:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  22e504:	0f 82 41 06 00 00    	jb     22eb4b <errolFixed+0x8fb>
  22e50a:	e9 2c 06 00 00       	jmp    22eb3b <errolFixed+0x8eb>
    const u = @floatToInt(u64, val);
  22e50f:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  22e516:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
    const n = @intToFloat(f64, u);
  22e51a:	c5 f9 6f 05 7e 1c fd 	vmovdqa xmm0,XMMWORD PTR [rip+0xfffffffffffd1c7e]        # 2001a0 <__unnamed_313-0x10>
  22e521:	ff 
  22e522:	c5 fa 7e 4d c8       	vmovq  xmm1,QWORD PTR [rbp-0x38]
  22e527:	c5 f1 62 c0          	vpunpckldq xmm0,xmm1,xmm0
  22e52b:	c5 f9 28 0d ad 21 fd 	vmovapd xmm1,XMMWORD PTR [rip+0xfffffffffffd21ad]        # 2006e0 <__unnamed_69+0x10>
  22e532:	ff 
  22e533:	c5 f9 5c c1          	vsubpd xmm0,xmm0,xmm1
  22e537:	c5 f9 7c c0          	vhaddpd xmm0,xmm0,xmm0
  22e53b:	c5 fb 11 45 c0       	vmovsd QWORD PTR [rbp-0x40],xmm0
    var mid = val - n;
  22e540:	c5 fb 10 45 d0       	vmovsd xmm0,QWORD PTR [rbp-0x30]
  22e545:	c5 fb 5c 45 c0       	vsubsd xmm0,xmm0,QWORD PTR [rbp-0x40]
  22e54a:	c5 fb 11 45 b8       	vmovsd QWORD PTR [rbp-0x48],xmm0
    var lo = ((fpprev(val) - n) + mid) / 2.0;
  22e54f:	c5 fb 10 45 d0       	vmovsd xmm0,QWORD PTR [rbp-0x30]
  22e554:	e8 e7 0a 00 00       	call   22f040 <fpprev>
  22e559:	31 c9                	xor    ecx,ecx
  22e55b:	88 ca                	mov    dl,cl
  22e55d:	c5 fb 5c 45 c0       	vsubsd xmm0,xmm0,QWORD PTR [rbp-0x40]
  22e562:	c5 fb 58 45 b8       	vaddsd xmm0,xmm0,QWORD PTR [rbp-0x48]
  22e567:	f6 c2 01             	test   dl,0x1
  22e56a:	c5 fb 11 85 e0 fe ff 	vmovsd QWORD PTR [rbp-0x120],xmm0
  22e571:	ff 
  22e572:	75 52                	jne    22e5c6 <errolFixed+0x376>
  22e574:	eb 10                	jmp    22e586 <errolFixed+0x336>
  22e576:	48 8d 3d 83 55 01 00 	lea    rdi,[rip+0x15583]        # 243b00 <__unnamed_227>
  22e57d:	31 c0                	xor    eax,eax
  22e57f:	89 c6                	mov    esi,eax
    const u = @floatToInt(u64, val);
  22e581:	e8 7a d0 fd ff       	call   20b600 <panic>
  22e586:	c5 fb 10 05 52 26 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd2652]        # 200be0 <__unnamed_185+0x10>
  22e58d:	ff 
    var lo = ((fpprev(val) - n) + mid) / 2.0;
  22e58e:	c5 fb 10 8d e0 fe ff 	vmovsd xmm1,QWORD PTR [rbp-0x120]
  22e595:	ff 
  22e596:	c5 f3 5e c0          	vdivsd xmm0,xmm1,xmm0
  22e59a:	c5 fb 11 45 b0       	vmovsd QWORD PTR [rbp-0x50],xmm0
    var hi = ((fpnext(val) - n) + mid) / 2.0;
  22e59f:	c5 fb 10 45 d0       	vmovsd xmm0,QWORD PTR [rbp-0x30]
  22e5a4:	e8 77 0a 00 00       	call   22f020 <fpnext>
  22e5a9:	31 c0                	xor    eax,eax
  22e5ab:	88 c1                	mov    cl,al
  22e5ad:	c5 fb 5c 45 c0       	vsubsd xmm0,xmm0,QWORD PTR [rbp-0x40]
  22e5b2:	c5 fb 58 45 b8       	vaddsd xmm0,xmm0,QWORD PTR [rbp-0x48]
  22e5b7:	f6 c1 01             	test   cl,0x1
  22e5ba:	c5 fb 11 85 d8 fe ff 	vmovsd QWORD PTR [rbp-0x128],xmm0
  22e5c1:	ff 
  22e5c2:	75 55                	jne    22e619 <errolFixed+0x3c9>
  22e5c4:	eb 10                	jmp    22e5d6 <errolFixed+0x386>
  22e5c6:	48 8d 3d 73 4c 01 00 	lea    rdi,[rip+0x14c73]        # 243240 <__unnamed_7>
  22e5cd:	31 c0                	xor    eax,eax
  22e5cf:	89 c6                	mov    esi,eax
    var lo = ((fpprev(val) - n) + mid) / 2.0;
  22e5d1:	e8 2a d0 fd ff       	call   20b600 <panic>
  22e5d6:	c5 fb 10 05 02 26 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd2602]        # 200be0 <__unnamed_185+0x10>
  22e5dd:	ff 
    var hi = ((fpnext(val) - n) + mid) / 2.0;
  22e5de:	c5 fb 10 8d d8 fe ff 	vmovsd xmm1,QWORD PTR [rbp-0x128]
  22e5e5:	ff 
  22e5e6:	c5 f3 5e c0          	vdivsd xmm0,xmm1,xmm0
  22e5ea:	c5 fb 11 45 a8       	vmovsd QWORD PTR [rbp-0x58],xmm0
    var buf_index = u64toa(u, buffer);
  22e5ef:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  22e5f3:	48 8b b5 70 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x90]
  22e5fa:	e8 f1 0c 00 00       	call   22f2f0 <u64toa>
  22e5ff:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
    var exp = @intCast(i32, buf_index);
  22e603:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22e607:	89 c1                	mov    ecx,eax
  22e609:	48 63 f1             	movsxd rsi,ecx
  22e60c:	48 39 f0             	cmp    rax,rsi
  22e60f:	89 8d d4 fe ff ff    	mov    DWORD PTR [rbp-0x12c],ecx
  22e615:	74 12                	je     22e629 <errolFixed+0x3d9>
  22e617:	eb 3b                	jmp    22e654 <errolFixed+0x404>
  22e619:	48 8d 3d 20 4c 01 00 	lea    rdi,[rip+0x14c20]        # 243240 <__unnamed_7>
  22e620:	31 c0                	xor    eax,eax
  22e622:	89 c6                	mov    esi,eax
    var hi = ((fpnext(val) - n) + mid) / 2.0;
  22e624:	e8 d7 cf fd ff       	call   20b600 <panic>
    var exp = @intCast(i32, buf_index);
  22e629:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
  22e62f:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
    var j = buf_index;
  22e632:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  22e636:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
    buffer[j] = 0;
  22e63a:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  22e63e:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  22e645:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  22e649:	48 89 8d c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rcx
  22e650:	72 22                	jb     22e674 <errolFixed+0x424>
  22e652:	eb 10                	jmp    22e664 <errolFixed+0x414>
  22e654:	48 8d 3d 4d 4e 01 00 	lea    rdi,[rip+0x14e4d]        # 2434a8 <__unnamed_22>
  22e65b:	31 c0                	xor    eax,eax
  22e65d:	89 c6                	mov    esi,eax
    var exp = @intCast(i32, buf_index);
  22e65f:	e8 9c cf fd ff       	call   20b600 <panic>
  22e664:	48 8d 3d 8d 4d 01 00 	lea    rdi,[rip+0x14d8d]        # 2433f8 <__unnamed_20>
  22e66b:	31 c0                	xor    eax,eax
  22e66d:	89 c6                	mov    esi,eax
    buffer[j] = 0;
  22e66f:	e8 8c cf fd ff       	call   20b600 <panic>
  22e674:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
  22e678:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  22e67f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22e682:	48 8b 95 c8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x138]
  22e689:	c6 04 11 00          	mov    BYTE PTR [rcx+rdx*1],0x0
    if (mid != 0.0) {
  22e68d:	c5 fb 10 4d b8       	vmovsd xmm1,QWORD PTR [rbp-0x48]
  22e692:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22e696:	0f 85 cc fc ff ff    	jne    22e368 <errolFixed+0x118>
  22e69c:	e9 03 fe ff ff       	jmp    22e4a4 <errolFixed+0x254>
  22e6a1:	c5 fb 10 05 67 25 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd2567]        # 200c10 <__unnamed_186+0x10>
  22e6a8:	ff 
  22e6a9:	c5 fb 10 0d 47 25 fd 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffd2547]        # 200bf8 <__unnamed_187+0x8>
  22e6b0:	ff 
  22e6b1:	c5 fb 10 15 2f 25 fd 	vmovsd xmm2,QWORD PTR [rip+0xfffffffffffd252f]        # 200be8 <__unnamed_185+0x18>
  22e6b8:	ff 
            const ldig = @floatToInt(i32, lo);
  22e6b9:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
  22e6bf:	89 45 8c             	mov    DWORD PTR [rbp-0x74],eax
            lo -= @intToFloat(f64, ldig);
  22e6c2:	c5 fb 10 5d b0       	vmovsd xmm3,QWORD PTR [rbp-0x50]
  22e6c7:	c5 db 2a 65 8c       	vcvtsi2sd xmm4,xmm4,DWORD PTR [rbp-0x74]
  22e6cc:	c5 e3 5c dc          	vsubsd xmm3,xmm3,xmm4
  22e6d0:	c5 fb 11 5d b0       	vmovsd QWORD PTR [rbp-0x50],xmm3
            mid *= 10.0;
  22e6d5:	c5 eb 59 55 b8       	vmulsd xmm2,xmm2,QWORD PTR [rbp-0x48]
  22e6da:	c5 fb 11 55 b8       	vmovsd QWORD PTR [rbp-0x48],xmm2
            const mdig = @floatToInt(i32, mid);
  22e6df:	c5 fb 10 55 b8       	vmovsd xmm2,QWORD PTR [rbp-0x48]
  22e6e4:	c5 fb 2c ca          	vcvttsd2si ecx,xmm2
  22e6e8:	c5 e3 2a d9          	vcvtsi2sd xmm3,xmm3,ecx
  22e6ec:	c5 eb 5c d3          	vsubsd xmm2,xmm2,xmm3
  22e6f0:	c5 f9 2e ca          	vucomisd xmm1,xmm2
  22e6f4:	0f 97 c2             	seta   dl
  22e6f7:	c5 f9 2e d0          	vucomisd xmm2,xmm0
  22e6fb:	40 0f 97 c6          	seta   sil
  22e6ff:	40 20 f2             	and    dl,sil
  22e702:	f6 c2 01             	test   dl,0x1
  22e705:	89 8d c4 fe ff ff    	mov    DWORD PTR [rbp-0x13c],ecx
  22e70b:	75 12                	jne    22e71f <errolFixed+0x4cf>
  22e70d:	eb 7e                	jmp    22e78d <errolFixed+0x53d>
  22e70f:	48 8d 3d ea 53 01 00 	lea    rdi,[rip+0x153ea]        # 243b00 <__unnamed_227>
  22e716:	31 c0                	xor    eax,eax
  22e718:	89 c6                	mov    esi,eax
            const ldig = @floatToInt(i32, lo);
  22e71a:	e8 e1 ce fd ff       	call   20b600 <panic>
  22e71f:	c5 fb 10 05 e9 24 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd24e9]        # 200c10 <__unnamed_186+0x10>
  22e726:	ff 
  22e727:	c5 fb 10 0d c9 24 fd 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffd24c9]        # 200bf8 <__unnamed_187+0x8>
  22e72e:	ff 
  22e72f:	c5 fb 10 15 b1 24 fd 	vmovsd xmm2,QWORD PTR [rip+0xfffffffffffd24b1]        # 200be8 <__unnamed_185+0x18>
  22e736:	ff 
            const mdig = @floatToInt(i32, mid);
  22e737:	8b 85 c4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x13c]
  22e73d:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
            mid -= @intToFloat(f64, mdig);
  22e740:	c5 fb 10 5d b8       	vmovsd xmm3,QWORD PTR [rbp-0x48]
  22e745:	c5 db 2a 65 88       	vcvtsi2sd xmm4,xmm4,DWORD PTR [rbp-0x78]
  22e74a:	c5 e3 5c dc          	vsubsd xmm3,xmm3,xmm4
  22e74e:	c5 fb 11 5d b8       	vmovsd QWORD PTR [rbp-0x48],xmm3
            hi *= 10.0;
  22e753:	c5 eb 59 55 a8       	vmulsd xmm2,xmm2,QWORD PTR [rbp-0x58]
  22e758:	c5 fb 11 55 a8       	vmovsd QWORD PTR [rbp-0x58],xmm2
            const hdig = @floatToInt(i32, hi);
  22e75d:	c5 fb 10 55 a8       	vmovsd xmm2,QWORD PTR [rbp-0x58]
  22e762:	c5 fb 2c ca          	vcvttsd2si ecx,xmm2
  22e766:	c5 e3 2a d9          	vcvtsi2sd xmm3,xmm3,ecx
  22e76a:	c5 eb 5c d3          	vsubsd xmm2,xmm2,xmm3
  22e76e:	c5 f9 2e ca          	vucomisd xmm1,xmm2
  22e772:	0f 97 c2             	seta   dl
  22e775:	c5 f9 2e d0          	vucomisd xmm2,xmm0
  22e779:	40 0f 97 c6          	seta   sil
  22e77d:	40 20 f2             	and    dl,sil
  22e780:	f6 c2 01             	test   dl,0x1
  22e783:	89 8d c0 fe ff ff    	mov    DWORD PTR [rbp-0x140],ecx
  22e789:	75 12                	jne    22e79d <errolFixed+0x54d>
  22e78b:	eb 46                	jmp    22e7d3 <errolFixed+0x583>
  22e78d:	48 8d 3d 6c 53 01 00 	lea    rdi,[rip+0x1536c]        # 243b00 <__unnamed_227>
  22e794:	31 c0                	xor    eax,eax
  22e796:	89 c6                	mov    esi,eax
            const mdig = @floatToInt(i32, mid);
  22e798:	e8 63 ce fd ff       	call   20b600 <panic>
            const hdig = @floatToInt(i32, hi);
  22e79d:	8b 85 c0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x140]
  22e7a3:	89 45 84             	mov    DWORD PTR [rbp-0x7c],eax
            hi -= @intToFloat(f64, hdig);
  22e7a6:	c5 fb 10 45 a8       	vmovsd xmm0,QWORD PTR [rbp-0x58]
  22e7ab:	c5 f3 2a 4d 84       	vcvtsi2sd xmm1,xmm1,DWORD PTR [rbp-0x7c]
  22e7b0:	c5 fb 5c c1          	vsubsd xmm0,xmm0,xmm1
  22e7b4:	c5 fb 11 45 a8       	vmovsd QWORD PTR [rbp-0x58],xmm0
            buffer[j] = @intCast(u8, mdig + '0');
  22e7b9:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  22e7bd:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  22e7c4:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  22e7c8:	48 89 8d b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rcx
  22e7cf:	72 22                	jb     22e7f3 <errolFixed+0x5a3>
  22e7d1:	eb 10                	jmp    22e7e3 <errolFixed+0x593>
  22e7d3:	48 8d 3d 26 53 01 00 	lea    rdi,[rip+0x15326]        # 243b00 <__unnamed_227>
  22e7da:	31 c0                	xor    eax,eax
  22e7dc:	89 c6                	mov    esi,eax
            const hdig = @floatToInt(i32, hi);
  22e7de:	e8 1d ce fd ff       	call   20b600 <panic>
  22e7e3:	48 8d 3d 0e 4c 01 00 	lea    rdi,[rip+0x14c0e]        # 2433f8 <__unnamed_20>
  22e7ea:	31 c0                	xor    eax,eax
  22e7ec:	89 c6                	mov    esi,eax
            buffer[j] = @intCast(u8, mdig + '0');
  22e7ee:	e8 0d ce fd ff       	call   20b600 <panic>
  22e7f3:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  22e7fa:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
  22e801:	48 03 01             	add    rax,QWORD PTR [rcx]
  22e804:	8b 55 88             	mov    edx,DWORD PTR [rbp-0x78]
  22e807:	83 c2 30             	add    edx,0x30
  22e80a:	40 0f 90 c6          	seto   sil
  22e80e:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  22e815:	89 95 ac fe ff ff    	mov    DWORD PTR [rbp-0x154],edx
  22e81b:	40 88 b5 ab fe ff ff 	mov    BYTE PTR [rbp-0x155],sil
  22e822:	70 02                	jo     22e826 <errolFixed+0x5d6>
  22e824:	eb 10                	jmp    22e836 <errolFixed+0x5e6>
  22e826:	48 8d 3d 9b 49 01 00 	lea    rdi,[rip+0x1499b]        # 2431c8 <__unnamed_4>
  22e82d:	31 c0                	xor    eax,eax
  22e82f:	89 c6                	mov    esi,eax
  22e831:	e8 ca cd fd ff       	call   20b600 <panic>
  22e836:	8b 85 ac fe ff ff    	mov    eax,DWORD PTR [rbp-0x154]
  22e83c:	83 f8 00             	cmp    eax,0x0
  22e83f:	7c 17                	jl     22e858 <errolFixed+0x608>
  22e841:	8b 85 ac fe ff ff    	mov    eax,DWORD PTR [rbp-0x154]
  22e847:	88 c1                	mov    cl,al
  22e849:	0f b6 d1             	movzx  edx,cl
  22e84c:	39 d0                	cmp    eax,edx
  22e84e:	88 8d aa fe ff ff    	mov    BYTE PTR [rbp-0x156],cl
  22e854:	74 12                	je     22e868 <errolFixed+0x618>
  22e856:	eb 3d                	jmp    22e895 <errolFixed+0x645>
  22e858:	48 8d 3d 29 4a 01 00 	lea    rdi,[rip+0x14a29]        # 243288 <__unnamed_3>
  22e85f:	31 c0                	xor    eax,eax
  22e861:	89 c6                	mov    esi,eax
  22e863:	e8 98 cd fd ff       	call   20b600 <panic>
  22e868:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  22e86f:	8a 8d aa fe ff ff    	mov    cl,BYTE PTR [rbp-0x156]
  22e875:	88 08                	mov    BYTE PTR [rax],cl
            j += 1;
  22e877:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
  22e87b:	48 83 c2 01          	add    rdx,0x1
  22e87f:	40 0f 92 c6          	setb   sil
  22e883:	48 89 95 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdx
  22e88a:	40 88 b5 9f fe ff ff 	mov    BYTE PTR [rbp-0x161],sil
  22e891:	72 12                	jb     22e8a5 <errolFixed+0x655>
  22e893:	eb 20                	jmp    22e8b5 <errolFixed+0x665>
  22e895:	48 8d 3d 0c 4c 01 00 	lea    rdi,[rip+0x14c0c]        # 2434a8 <__unnamed_22>
  22e89c:	31 c0                	xor    eax,eax
  22e89e:	89 c6                	mov    esi,eax
            buffer[j] = @intCast(u8, mdig + '0');
  22e8a0:	e8 5b cd fd ff       	call   20b600 <panic>
  22e8a5:	48 8d 3d 1c 49 01 00 	lea    rdi,[rip+0x1491c]        # 2431c8 <__unnamed_4>
  22e8ac:	31 c0                	xor    eax,eax
  22e8ae:	89 c6                	mov    esi,eax
            j += 1;
  22e8b0:	e8 4b cd fd ff       	call   20b600 <panic>
  22e8b5:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
  22e8bc:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
            if (hdig != ldig or j > 50) break;
  22e8c0:	8b 4d 84             	mov    ecx,DWORD PTR [rbp-0x7c]
  22e8c3:	3b 4d 8c             	cmp    ecx,DWORD PTR [rbp-0x74]
  22e8c6:	0f 95 c2             	setne  dl
  22e8c9:	f6 c2 01             	test   dl,0x1
  22e8cc:	88 95 43 ff ff ff    	mov    BYTE PTR [rbp-0xbd],dl
  22e8d2:	0f 85 06 fb ff ff    	jne    22e3de <errolFixed+0x18e>
  22e8d8:	e9 f3 fa ff ff       	jmp    22e3d0 <errolFixed+0x180>
  22e8dd:	48 8d 3d e4 48 01 00 	lea    rdi,[rip+0x148e4]        # 2431c8 <__unnamed_4>
  22e8e4:	31 c0                	xor    eax,eax
  22e8e6:	89 c6                	mov    esi,eax
            buffer[j - 1] += 1;
  22e8e8:	e8 13 cd fd ff       	call   20b600 <panic>
  22e8ed:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  22e8f4:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
  22e8fb:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22e8ff:	72 10                	jb     22e911 <errolFixed+0x6c1>
  22e901:	48 8d 3d f0 4a 01 00 	lea    rdi,[rip+0x14af0]        # 2433f8 <__unnamed_20>
  22e908:	31 c0                	xor    eax,eax
  22e90a:	89 c6                	mov    esi,eax
  22e90c:	e8 ef cc fd ff       	call   20b600 <panic>
  22e911:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  22e918:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22e91b:	48 89 ca             	mov    rdx,rcx
  22e91e:	48 8b b5 38 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc8]
  22e925:	48 01 f2             	add    rdx,rsi
  22e928:	40 8a 3c 31          	mov    dil,BYTE PTR [rcx+rsi*1]
  22e92c:	40 80 c7 01          	add    dil,0x1
  22e930:	41 0f 92 c0          	setb   r8b
  22e934:	41 f6 c0 01          	test   r8b,0x1
  22e938:	48 89 95 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rdx
  22e93f:	40 88 bd 8f fe ff ff 	mov    BYTE PTR [rbp-0x171],dil
  22e946:	75 02                	jne    22e94a <errolFixed+0x6fa>
  22e948:	eb 10                	jmp    22e95a <errolFixed+0x70a>
  22e94a:	48 8d 3d 77 48 01 00 	lea    rdi,[rip+0x14877]        # 2431c8 <__unnamed_4>
  22e951:	31 c0                	xor    eax,eax
  22e953:	89 c6                	mov    esi,eax
  22e955:	e8 a6 cc fd ff       	call   20b600 <panic>
  22e95a:	48 8b 85 90 fe ff ff 	mov    rax,QWORD PTR [rbp-0x170]
  22e961:	8a 8d 8f fe ff ff    	mov    cl,BYTE PTR [rbp-0x171]
  22e967:	88 08                	mov    BYTE PTR [rax],cl
        if (mid > 0.5) {
  22e969:	e9 34 fb ff ff       	jmp    22e4a2 <errolFixed+0x252>
  22e96e:	48 8d 3d 53 48 01 00 	lea    rdi,[rip+0x14853]        # 2431c8 <__unnamed_4>
  22e975:	31 c0                	xor    eax,eax
  22e977:	89 c6                	mov    esi,eax
        } else if ((mid == 0.5) and (buffer[j - 1] & 0x1) != 0) {
  22e979:	e8 82 cc fd ff       	call   20b600 <panic>
  22e97e:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  22e985:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
  22e98c:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22e990:	72 10                	jb     22e9a2 <errolFixed+0x752>
  22e992:	48 8d 3d 5f 4a 01 00 	lea    rdi,[rip+0x14a5f]        # 2433f8 <__unnamed_20>
  22e999:	31 c0                	xor    eax,eax
  22e99b:	89 c6                	mov    esi,eax
  22e99d:	e8 5e cc fd ff       	call   20b600 <panic>
  22e9a2:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  22e9a9:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22e9ac:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
  22e9b3:	40 8a 34 11          	mov    sil,BYTE PTR [rcx+rdx*1]
  22e9b7:	40 80 e6 01          	and    sil,0x1
  22e9bb:	40 80 fe 00          	cmp    sil,0x0
  22e9bf:	40 0f 95 c6          	setne  sil
  22e9c3:	40 88 b5 36 ff ff ff 	mov    BYTE PTR [rbp-0xca],sil
  22e9ca:	e9 a0 fa ff ff       	jmp    22e46f <errolFixed+0x21f>
  22e9cf:	48 8d 3d f2 47 01 00 	lea    rdi,[rip+0x147f2]        # 2431c8 <__unnamed_4>
  22e9d6:	31 c0                	xor    eax,eax
  22e9d8:	89 c6                	mov    esi,eax
            buffer[j - 1] += 1;
  22e9da:	e8 21 cc fd ff       	call   20b600 <panic>
  22e9df:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  22e9e6:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
  22e9ed:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22e9f1:	72 10                	jb     22ea03 <errolFixed+0x7b3>
  22e9f3:	48 8d 3d fe 49 01 00 	lea    rdi,[rip+0x149fe]        # 2433f8 <__unnamed_20>
  22e9fa:	31 c0                	xor    eax,eax
  22e9fc:	89 c6                	mov    esi,eax
  22e9fe:	e8 fd cb fd ff       	call   20b600 <panic>
  22ea03:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  22ea0a:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22ea0d:	48 89 ca             	mov    rdx,rcx
  22ea10:	48 8b b5 18 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe8]
  22ea17:	48 01 f2             	add    rdx,rsi
  22ea1a:	40 8a 3c 31          	mov    dil,BYTE PTR [rcx+rsi*1]
  22ea1e:	40 80 c7 01          	add    dil,0x1
  22ea22:	41 0f 92 c0          	setb   r8b
  22ea26:	41 f6 c0 01          	test   r8b,0x1
  22ea2a:	48 89 95 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rdx
  22ea31:	40 88 bd 7f fe ff ff 	mov    BYTE PTR [rbp-0x181],dil
  22ea38:	75 02                	jne    22ea3c <errolFixed+0x7ec>
  22ea3a:	eb 10                	jmp    22ea4c <errolFixed+0x7fc>
  22ea3c:	48 8d 3d 85 47 01 00 	lea    rdi,[rip+0x14785]        # 2431c8 <__unnamed_4>
  22ea43:	31 c0                	xor    eax,eax
  22ea45:	89 c6                	mov    esi,eax
  22ea47:	e8 b4 cb fd ff       	call   20b600 <panic>
  22ea4c:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
  22ea53:	8a 8d 7f fe ff ff    	mov    cl,BYTE PTR [rbp-0x181]
  22ea59:	88 08                	mov    BYTE PTR [rax],cl
        } else if ((mid == 0.5) and (buffer[j - 1] & 0x1) != 0) {
  22ea5b:	e9 40 fa ff ff       	jmp    22e4a0 <errolFixed+0x250>
  22ea60:	48 8d 3d 61 47 01 00 	lea    rdi,[rip+0x14761]        # 2431c8 <__unnamed_4>
  22ea67:	31 c0                	xor    eax,eax
  22ea69:	89 c6                	mov    esi,eax
        while (buffer[j - 1] == '0') {
  22ea6b:	e8 90 cb fd ff       	call   20b600 <panic>
  22ea70:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  22ea77:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
  22ea7e:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22ea82:	72 10                	jb     22ea94 <errolFixed+0x844>
  22ea84:	48 8d 3d 6d 49 01 00 	lea    rdi,[rip+0x1496d]        # 2433f8 <__unnamed_20>
  22ea8b:	31 c0                	xor    eax,eax
  22ea8d:	89 c6                	mov    esi,eax
  22ea8f:	e8 6c cb fd ff       	call   20b600 <panic>
  22ea94:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  22ea9b:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22ea9e:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
  22eaa5:	80 3c 11 30          	cmp    BYTE PTR [rcx+rdx*1],0x30
  22eaa9:	0f 84 1a fa ff ff    	je     22e4c9 <errolFixed+0x279>
  22eaaf:	e9 38 fa ff ff       	jmp    22e4ec <errolFixed+0x29c>
  22eab4:	48 8d 3d 0d 47 01 00 	lea    rdi,[rip+0x1470d]        # 2431c8 <__unnamed_4>
  22eabb:	31 c0                	xor    eax,eax
  22eabd:	89 c6                	mov    esi,eax
            buffer[j - 1] = 0;
  22eabf:	e8 3c cb fd ff       	call   20b600 <panic>
  22eac4:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  22eacb:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
  22ead2:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22ead6:	72 10                	jb     22eae8 <errolFixed+0x898>
  22ead8:	48 8d 3d 19 49 01 00 	lea    rdi,[rip+0x14919]        # 2433f8 <__unnamed_20>
  22eadf:	31 c0                	xor    eax,eax
  22eae1:	89 c6                	mov    esi,eax
  22eae3:	e8 18 cb fd ff       	call   20b600 <panic>
  22eae8:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  22eaef:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22eaf2:	48 8b 95 f8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x108]
  22eaf9:	c6 04 11 00          	mov    BYTE PTR [rcx+rdx*1],0x0
            j -= 1;
  22eafd:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  22eb01:	48 83 e9 01          	sub    rcx,0x1
  22eb05:	40 0f 92 c6          	setb   sil
  22eb09:	48 89 8d 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rcx
  22eb10:	40 88 b5 6f fe ff ff 	mov    BYTE PTR [rbp-0x191],sil
  22eb17:	72 02                	jb     22eb1b <errolFixed+0x8cb>
  22eb19:	eb 10                	jmp    22eb2b <errolFixed+0x8db>
  22eb1b:	48 8d 3d a6 46 01 00 	lea    rdi,[rip+0x146a6]        # 2431c8 <__unnamed_4>
  22eb22:	31 c0                	xor    eax,eax
  22eb24:	89 c6                	mov    esi,eax
  22eb26:	e8 d5 ca fd ff       	call   20b600 <panic>
  22eb2b:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  22eb32:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
        while (buffer[j - 1] == '0') {
  22eb36:	e9 6b f9 ff ff       	jmp    22e4a6 <errolFixed+0x256>
  22eb3b:	48 8d 3d b6 48 01 00 	lea    rdi,[rip+0x148b6]        # 2433f8 <__unnamed_20>
  22eb42:	31 c0                	xor    eax,eax
  22eb44:	89 c6                	mov    esi,eax
    buffer[j] = 0;
  22eb46:	e8 b5 ca fd ff       	call   20b600 <panic>
  22eb4b:	31 c0                	xor    eax,eax
  22eb4d:	89 c1                	mov    ecx,eax
  22eb4f:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  22eb56:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
  22eb59:	48 8b bd e8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x118]
  22eb60:	c6 04 3e 00          	mov    BYTE PTR [rsi+rdi*1],0x0

    return FloatDecimal{
        .digits = buffer[0..j],
  22eb64:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  22eb68:	4c 8b 42 08          	mov    r8,QWORD PTR [rdx+0x8]
  22eb6c:	48 39 f1             	cmp    rcx,rsi
  22eb6f:	4c 89 85 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],r8
  22eb76:	48 89 b5 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rsi
  22eb7d:	76 10                	jbe    22eb8f <errolFixed+0x93f>
  22eb7f:	48 8d 3d 72 48 01 00 	lea    rdi,[rip+0x14872]        # 2433f8 <__unnamed_20>
  22eb86:	31 c0                	xor    eax,eax
  22eb88:	89 c6                	mov    esi,eax
  22eb8a:	e8 71 ca fd ff       	call   20b600 <panic>
  22eb8f:	48 8b 85 58 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a8]
  22eb96:	48 8b 8d 60 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1a0]
  22eb9d:	48 39 c8             	cmp    rax,rcx
  22eba0:	76 10                	jbe    22ebb2 <errolFixed+0x962>
  22eba2:	48 8d 3d 4f 48 01 00 	lea    rdi,[rip+0x1484f]        # 2433f8 <__unnamed_20>
  22eba9:	31 c0                	xor    eax,eax
  22ebab:	89 c6                	mov    esi,eax
  22ebad:	e8 4e ca fd ff       	call   20b600 <panic>
  22ebb2:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  22ebb9:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22ebbc:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  22ebc0:	48 8b 8d 58 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1a8]
  22ebc7:	48 83 e9 00          	sub    rcx,0x0
  22ebcb:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
        .exp = exp,
  22ebcf:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
    return FloatDecimal{
  22ebd2:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  22ebd6:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  22ebda:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  22ebde:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  22ebe2:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
  22ebe5:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  22ebe9:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
  22ebf0:	48 89 0e             	mov    QWORD PTR [rsi],rcx
  22ebf3:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  22ebf7:	48 89 4e 08          	mov    QWORD PTR [rsi+0x8],rcx
  22ebfb:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22ebff:	48 89 4e 10          	mov    QWORD PTR [rsi+0x10],rcx
  22ec03:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  22ec0a:	48 81 c4 b0 01 00 00 	add    rsp,0x1b0
  22ec11:	5d                   	pop    rbp
  22ec12:	c3                   	ret    
  22ec13:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22ec1a:	84 00 00 00 00 00 

000000000022ec20 <frexp>:
    };
}
pub const frexp32_result = frexp_result(f32);
pub const frexp64_result = frexp_result(f64);

pub fn frexp(x: var) frexp_result(@typeOf(x)) {
  22ec20:	55                   	push   rbp
  22ec21:	48 89 e5             	mov    rbp,rsp
  22ec24:	48 83 ec 30          	sub    rsp,0x30
  22ec28:	48 89 f8             	mov    rax,rdi
  22ec2b:	48 8d 4d f0          	lea    rcx,[rbp-0x10]
  22ec2f:	c5 fb 11 45 e8       	vmovsd QWORD PTR [rbp-0x18],xmm0
    const T = @typeOf(x);
    return switch (T) {
        f32 => frexp32(x),
        f64 => frexp64(x),
  22ec34:	c5 fb 10 45 e8       	vmovsd xmm0,QWORD PTR [rbp-0x18]
  22ec39:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  22ec3d:	48 89 cf             	mov    rdi,rcx
  22ec40:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  22ec44:	e8 27 43 00 00       	call   232f70 <frexp64>
    return switch (T) {
  22ec49:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22ec4d:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  22ec51:	48 89 01             	mov    QWORD PTR [rcx],rax
  22ec54:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  22ec58:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  22ec5c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  22ec60:	48 83 c4 30          	add    rsp,0x30
  22ec64:	5d                   	pop    rbp
  22ec65:	c3                   	ret    
  22ec66:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  22ec6d:	00 00 00 

000000000022ec70 <floor.0>:
const builtin = @import("builtin");
const assert = std.debug.assert;
const std = @import("../index.zig");
const math = std.math;

pub fn floor(x: var) @typeOf(x) {
  22ec70:	55                   	push   rbp
  22ec71:	48 89 e5             	mov    rbp,rsp
  22ec74:	48 83 ec 10          	sub    rsp,0x10
  22ec78:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    const T = @typeOf(x);
    return switch (T) {
        f16 => floor16(x),
        f32 => floor32(x),
        f64 => floor64(x),
  22ec7d:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  22ec82:	e8 f9 44 00 00       	call   233180 <floor64>
    return switch (T) {
  22ec87:	48 83 c4 10          	add    rsp,0x10
  22ec8b:	5d                   	pop    rbp
  22ec8c:	c3                   	ret    
  22ec8d:	0f 1f 00             	nop    DWORD PTR [rax]

000000000022ec90 <hpProd>:
fn hpProd(in: *const HP, val: f64) HP {
  22ec90:	55                   	push   rbp
  22ec91:	48 89 e5             	mov    rbp,rsp
  22ec94:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  22ec9b:	48 89 f8             	mov    rax,rdi
  22ec9e:	48 8d 4d d8          	lea    rcx,[rbp-0x28]
  22eca2:	48 8d 55 d0          	lea    rdx,[rbp-0x30]
  22eca6:	41 b8 aa 00 00 00    	mov    r8d,0xaa
  22ecac:	41 b9 08 00 00 00    	mov    r9d,0x8
  22ecb2:	45 89 ca             	mov    r10d,r9d
  22ecb5:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
  22ecb9:	c5 fb 11 45 e0       	vmovsd QWORD PTR [rbp-0x20],xmm0
    var hi: f64 = undefined;
  22ecbe:	48 89 ce             	mov    rsi,rcx
  22ecc1:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  22ecc5:	48 89 f7             	mov    rdi,rsi
  22ecc8:	44 89 c6             	mov    esi,r8d
  22eccb:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  22eccf:	4c 89 d2             	mov    rdx,r10
  22ecd2:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  22ecd6:	44 89 45 94          	mov    DWORD PTR [rbp-0x6c],r8d
  22ecda:	4c 89 55 88          	mov    QWORD PTR [rbp-0x78],r10
  22ecde:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
  22ece2:	e8 c9 5b 00 00       	call   2348b0 <memset>
    var lo: f64 = undefined;
  22ece7:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22eceb:	48 89 c7             	mov    rdi,rax
  22ecee:	8b 75 94             	mov    esi,DWORD PTR [rbp-0x6c]
  22ecf1:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
  22ecf5:	e8 b6 5b 00 00       	call   2348b0 <memset>
    split(in.val, &hi, &lo);
  22ecfa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22ecfe:	c5 fb 10 00          	vmovsd xmm0,QWORD PTR [rax]
  22ed02:	48 8b 7d 80          	mov    rdi,QWORD PTR [rbp-0x80]
  22ed06:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  22ed0a:	e8 c1 45 00 00       	call   2332d0 <split>
  22ed0f:	48 8d 45 c8          	lea    rax,[rbp-0x38]
  22ed13:	48 8d 4d c0          	lea    rcx,[rbp-0x40]
  22ed17:	41 b8 aa 00 00 00    	mov    r8d,0xaa
  22ed1d:	41 b9 08 00 00 00    	mov    r9d,0x8
  22ed23:	44 89 ca             	mov    edx,r9d
    var hi2: f64 = undefined;
  22ed26:	48 89 c6             	mov    rsi,rax
  22ed29:	48 89 f7             	mov    rdi,rsi
  22ed2c:	44 89 c6             	mov    esi,r8d
  22ed2f:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
  22ed36:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  22ed3d:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
  22ed44:	44 89 85 64 ff ff ff 	mov    DWORD PTR [rbp-0x9c],r8d
  22ed4b:	e8 60 5b 00 00       	call   2348b0 <memset>
    var lo2: f64 = undefined;
  22ed50:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  22ed57:	48 89 c7             	mov    rdi,rax
  22ed5a:	8b b5 64 ff ff ff    	mov    esi,DWORD PTR [rbp-0x9c]
  22ed60:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
  22ed67:	e8 44 5b 00 00       	call   2348b0 <memset>
    split(val, &hi2, &lo2);
  22ed6c:	c5 fb 10 45 e0       	vmovsd xmm0,QWORD PTR [rbp-0x20]
  22ed71:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  22ed78:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
  22ed7f:	e8 4c 45 00 00       	call   2332d0 <split>
    const p = in.val * val;
  22ed84:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22ed88:	c5 fb 10 00          	vmovsd xmm0,QWORD PTR [rax]
  22ed8c:	c5 fb 59 45 e0       	vmulsd xmm0,xmm0,QWORD PTR [rbp-0x20]
  22ed91:	c5 fb 11 45 b8       	vmovsd QWORD PTR [rbp-0x48],xmm0
    const e = ((hi * hi2 - p) + lo * hi2 + hi * lo2) + lo * lo2;
  22ed96:	c5 fb 10 45 d8       	vmovsd xmm0,QWORD PTR [rbp-0x28]
  22ed9b:	c5 fb 59 45 c8       	vmulsd xmm0,xmm0,QWORD PTR [rbp-0x38]
  22eda0:	c5 fb 5c 45 b8       	vsubsd xmm0,xmm0,QWORD PTR [rbp-0x48]
  22eda5:	c5 fb 10 4d d0       	vmovsd xmm1,QWORD PTR [rbp-0x30]
  22edaa:	c5 f3 59 4d c8       	vmulsd xmm1,xmm1,QWORD PTR [rbp-0x38]
  22edaf:	c5 fb 58 c1          	vaddsd xmm0,xmm0,xmm1
  22edb3:	c5 fb 10 4d d8       	vmovsd xmm1,QWORD PTR [rbp-0x28]
  22edb8:	c5 f3 59 4d c0       	vmulsd xmm1,xmm1,QWORD PTR [rbp-0x40]
  22edbd:	c5 fb 58 c1          	vaddsd xmm0,xmm0,xmm1
  22edc1:	c5 fb 10 4d d0       	vmovsd xmm1,QWORD PTR [rbp-0x30]
  22edc6:	c5 f3 59 4d c0       	vmulsd xmm1,xmm1,QWORD PTR [rbp-0x40]
  22edcb:	c5 fb 58 c1          	vaddsd xmm0,xmm0,xmm1
  22edcf:	c5 fb 11 45 b0       	vmovsd QWORD PTR [rbp-0x50],xmm0
        .val = p,
  22edd4:	c5 fb 10 45 b8       	vmovsd xmm0,QWORD PTR [rbp-0x48]
        .off = in.off * val + e,
  22edd9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22eddd:	c5 fb 10 48 08       	vmovsd xmm1,QWORD PTR [rax+0x8]
  22ede2:	c5 f3 59 4d e0       	vmulsd xmm1,xmm1,QWORD PTR [rbp-0x20]
  22ede7:	c5 f3 58 4d b0       	vaddsd xmm1,xmm1,QWORD PTR [rbp-0x50]
    return HP{
  22edec:	c5 fb 11 45 f0       	vmovsd QWORD PTR [rbp-0x10],xmm0
  22edf1:	c5 fb 11 4d f8       	vmovsd QWORD PTR [rbp-0x8],xmm1
  22edf6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22edfa:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  22edfe:	48 89 01             	mov    QWORD PTR [rcx],rax
  22ee01:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  22ee05:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  22ee09:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  22ee0d:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  22ee14:	5d                   	pop    rbp
  22ee15:	c3                   	ret    
  22ee16:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  22ee1d:	00 00 00 

000000000022ee20 <hpDiv10>:
fn hpDiv10(hp: *HP) void {
  22ee20:	55                   	push   rbp
  22ee21:	48 89 e5             	mov    rbp,rsp
  22ee24:	48 83 ec 50          	sub    rsp,0x50
  22ee28:	31 c0                	xor    eax,eax
  22ee2a:	88 c1                	mov    cl,al
  22ee2c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    var val = hp.val;
  22ee30:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  22ee34:	c5 fb 10 07          	vmovsd xmm0,QWORD PTR [rdi]
  22ee38:	c5 fb 11 45 f0       	vmovsd QWORD PTR [rbp-0x10],xmm0
    hp.val /= 10.0;
  22ee3d:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  22ee41:	c5 fb 10 07          	vmovsd xmm0,QWORD PTR [rdi]
  22ee45:	f6 c1 01             	test   cl,0x1
  22ee48:	c5 fb 11 45 e8       	vmovsd QWORD PTR [rbp-0x18],xmm0
  22ee4d:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  22ee51:	75 41                	jne    22ee94 <hpDiv10+0x74>
  22ee53:	31 c0                	xor    eax,eax
  22ee55:	88 c1                	mov    cl,al
  22ee57:	c5 fb 10 05 89 1d fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd1d89]        # 200be8 <__unnamed_185+0x18>
  22ee5e:	ff 
  22ee5f:	c5 fb 10 4d e8       	vmovsd xmm1,QWORD PTR [rbp-0x18]
  22ee64:	c5 f3 5e c0          	vdivsd xmm0,xmm1,xmm0
  22ee68:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  22ee6c:	c5 fb 11 02          	vmovsd QWORD PTR [rdx],xmm0
    hp.off /= 10.0;
  22ee70:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  22ee74:	48 89 f7             	mov    rdi,rsi
  22ee77:	48 83 c7 08          	add    rdi,0x8
  22ee7b:	c5 fb 10 46 08       	vmovsd xmm0,QWORD PTR [rsi+0x8]
  22ee80:	f6 c1 01             	test   cl,0x1
  22ee83:	c5 fb 11 45 d8       	vmovsd QWORD PTR [rbp-0x28],xmm0
  22ee88:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
  22ee8c:	0f 85 95 00 00 00    	jne    22ef27 <hpDiv10+0x107>
  22ee92:	eb 10                	jmp    22eea4 <hpDiv10+0x84>
  22ee94:	48 8d 3d a5 43 01 00 	lea    rdi,[rip+0x143a5]        # 243240 <__unnamed_7>
  22ee9b:	31 c0                	xor    eax,eax
  22ee9d:	89 c6                	mov    esi,eax
    hp.val /= 10.0;
  22ee9f:	e8 5c c7 fd ff       	call   20b600 <panic>
  22eea4:	31 c0                	xor    eax,eax
  22eea6:	88 c1                	mov    cl,al
  22eea8:	c5 fb 10 05 30 1d fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd1d30]        # 200be0 <__unnamed_185+0x10>
  22eeaf:	ff 
  22eeb0:	c5 fb 10 0d d8 1d fd 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffd1dd8]        # 200c90 <__unnamed_192+0x8>
  22eeb7:	ff 
  22eeb8:	c5 fb 10 15 28 1d fd 	vmovsd xmm2,QWORD PTR [rip+0xfffffffffffd1d28]        # 200be8 <__unnamed_185+0x18>
  22eebf:	ff 
    hp.off /= 10.0;
  22eec0:	c5 fb 10 5d d8       	vmovsd xmm3,QWORD PTR [rbp-0x28]
  22eec5:	c5 e3 5e d2          	vdivsd xmm2,xmm3,xmm2
  22eec9:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  22eecd:	c5 fb 11 12          	vmovsd QWORD PTR [rdx],xmm2
    val -= hp.val * 8.0;
  22eed1:	c5 fb 10 55 f0       	vmovsd xmm2,QWORD PTR [rbp-0x10]
  22eed6:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  22eeda:	c5 f3 59 0e          	vmulsd xmm1,xmm1,QWORD PTR [rsi]
  22eede:	c5 eb 5c c9          	vsubsd xmm1,xmm2,xmm1
  22eee2:	c5 fb 11 4d f0       	vmovsd QWORD PTR [rbp-0x10],xmm1
    val -= hp.val * 2.0;
  22eee7:	c5 fb 10 4d f0       	vmovsd xmm1,QWORD PTR [rbp-0x10]
  22eeec:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  22eef0:	c5 fb 59 06          	vmulsd xmm0,xmm0,QWORD PTR [rsi]
  22eef4:	c5 f3 5c c0          	vsubsd xmm0,xmm1,xmm0
  22eef8:	c5 fb 11 45 f0       	vmovsd QWORD PTR [rbp-0x10],xmm0
    hp.off += val / 10.0;
  22eefd:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  22ef01:	48 89 f7             	mov    rdi,rsi
  22ef04:	48 83 c7 08          	add    rdi,0x8
  22ef08:	c5 fb 10 46 08       	vmovsd xmm0,QWORD PTR [rsi+0x8]
  22ef0d:	c5 fb 10 4d f0       	vmovsd xmm1,QWORD PTR [rbp-0x10]
  22ef12:	f6 c1 01             	test   cl,0x1
  22ef15:	c5 fb 11 4d c8       	vmovsd QWORD PTR [rbp-0x38],xmm1
  22ef1a:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
  22ef1e:	c5 fb 11 45 b8       	vmovsd QWORD PTR [rbp-0x48],xmm0
  22ef23:	75 43                	jne    22ef68 <hpDiv10+0x148>
  22ef25:	eb 10                	jmp    22ef37 <hpDiv10+0x117>
  22ef27:	48 8d 3d 12 43 01 00 	lea    rdi,[rip+0x14312]        # 243240 <__unnamed_7>
  22ef2e:	31 c0                	xor    eax,eax
  22ef30:	89 c6                	mov    esi,eax
    hp.off /= 10.0;
  22ef32:	e8 c9 c6 fd ff       	call   20b600 <panic>
  22ef37:	c5 fb 10 05 a9 1c fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd1ca9]        # 200be8 <__unnamed_185+0x18>
  22ef3e:	ff 
    hp.off += val / 10.0;
  22ef3f:	c5 fb 10 4d c8       	vmovsd xmm1,QWORD PTR [rbp-0x38]
  22ef44:	c5 f3 5e c0          	vdivsd xmm0,xmm1,xmm0
  22ef48:	c5 fb 10 55 b8       	vmovsd xmm2,QWORD PTR [rbp-0x48]
  22ef4d:	c5 eb 58 c0          	vaddsd xmm0,xmm2,xmm0
  22ef51:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  22ef55:	c5 fb 11 00          	vmovsd QWORD PTR [rax],xmm0
    hpNormalize(hp);
  22ef59:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  22ef5d:	e8 fe 00 00 00       	call   22f060 <hpNormalize>
fn hpDiv10(hp: *HP) void {
  22ef62:	48 83 c4 50          	add    rsp,0x50
  22ef66:	5d                   	pop    rbp
  22ef67:	c3                   	ret    
  22ef68:	48 8d 3d d1 42 01 00 	lea    rdi,[rip+0x142d1]        # 243240 <__unnamed_7>
  22ef6f:	31 c0                	xor    eax,eax
  22ef71:	89 c6                	mov    esi,eax
    hp.off += val / 10.0;
  22ef73:	e8 88 c6 fd ff       	call   20b600 <panic>
  22ef78:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  22ef7f:	00 

000000000022ef80 <hpMul10>:
fn hpMul10(hp: *HP) void {
  22ef80:	55                   	push   rbp
  22ef81:	48 89 e5             	mov    rbp,rsp
  22ef84:	48 83 ec 20          	sub    rsp,0x20
  22ef88:	c5 fb 10 05 50 1c fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd1c50]        # 200be0 <__unnamed_185+0x10>
  22ef8f:	ff 
  22ef90:	c5 fb 10 0d f8 1c fd 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffd1cf8]        # 200c90 <__unnamed_192+0x8>
  22ef97:	ff 
  22ef98:	c5 fb 10 15 48 1c fd 	vmovsd xmm2,QWORD PTR [rip+0xfffffffffffd1c48]        # 200be8 <__unnamed_185+0x18>
  22ef9f:	ff 
  22efa0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    const val = hp.val;
  22efa4:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  22efa8:	c5 fb 10 1f          	vmovsd xmm3,QWORD PTR [rdi]
  22efac:	c5 fb 11 5d f0       	vmovsd QWORD PTR [rbp-0x10],xmm3
    hp.val *= 10.0;
  22efb1:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  22efb5:	c5 eb 59 1f          	vmulsd xmm3,xmm2,QWORD PTR [rdi]
  22efb9:	c5 fb 11 1f          	vmovsd QWORD PTR [rdi],xmm3
    hp.off *= 10.0;
  22efbd:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  22efc1:	c5 eb 59 57 08       	vmulsd xmm2,xmm2,QWORD PTR [rdi+0x8]
  22efc6:	c5 fb 11 57 08       	vmovsd QWORD PTR [rdi+0x8],xmm2
    var off = hp.val;
  22efcb:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  22efcf:	c5 fb 10 17          	vmovsd xmm2,QWORD PTR [rdi]
  22efd3:	c5 fb 11 55 e8       	vmovsd QWORD PTR [rbp-0x18],xmm2
    off -= val * 8.0;
  22efd8:	c5 fb 10 55 e8       	vmovsd xmm2,QWORD PTR [rbp-0x18]
  22efdd:	c5 f3 59 4d f0       	vmulsd xmm1,xmm1,QWORD PTR [rbp-0x10]
  22efe2:	c5 eb 5c c9          	vsubsd xmm1,xmm2,xmm1
  22efe6:	c5 fb 11 4d e8       	vmovsd QWORD PTR [rbp-0x18],xmm1
    off -= val * 2.0;
  22efeb:	c5 fb 10 4d e8       	vmovsd xmm1,QWORD PTR [rbp-0x18]
  22eff0:	c5 fb 59 45 f0       	vmulsd xmm0,xmm0,QWORD PTR [rbp-0x10]
  22eff5:	c5 f3 5c c0          	vsubsd xmm0,xmm1,xmm0
  22eff9:	c5 fb 11 45 e8       	vmovsd QWORD PTR [rbp-0x18],xmm0
    hp.off -= off;
  22effe:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  22f002:	c5 fb 10 47 08       	vmovsd xmm0,QWORD PTR [rdi+0x8]
  22f007:	c5 fb 5c 45 e8       	vsubsd xmm0,xmm0,QWORD PTR [rbp-0x18]
  22f00c:	c5 fb 11 47 08       	vmovsd QWORD PTR [rdi+0x8],xmm0
    hpNormalize(hp);
  22f011:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  22f015:	e8 46 00 00 00       	call   22f060 <hpNormalize>
fn hpMul10(hp: *HP) void {
  22f01a:	48 83 c4 20          	add    rsp,0x20
  22f01e:	5d                   	pop    rbp
  22f01f:	c3                   	ret    

000000000022f020 <fpnext>:
    };
}

fn fpnext(val: f64) f64 {
  22f020:	55                   	push   rbp
  22f021:	48 89 e5             	mov    rbp,rsp
  22f024:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    return @bitCast(f64, @bitCast(u64, val) +% 1);
  22f029:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  22f02e:	c4 e1 f9 7e c0       	vmovq  rax,xmm0
  22f033:	48 83 c0 01          	add    rax,0x1
  22f037:	c4 e1 f9 6e c0       	vmovq  xmm0,rax
  22f03c:	5d                   	pop    rbp
  22f03d:	c3                   	ret    
  22f03e:	66 90                	xchg   ax,ax

000000000022f040 <fpprev>:
}

fn fpprev(val: f64) f64 {
  22f040:	55                   	push   rbp
  22f041:	48 89 e5             	mov    rbp,rsp
  22f044:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    return @bitCast(f64, @bitCast(u64, val) -% 1);
  22f049:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  22f04e:	c4 e1 f9 7e c0       	vmovq  rax,xmm0
  22f053:	48 83 e8 01          	sub    rax,0x1
  22f057:	c4 e1 f9 6e c0       	vmovq  xmm0,rax
  22f05c:	5d                   	pop    rbp
  22f05d:	c3                   	ret    
  22f05e:	66 90                	xchg   ax,ax

000000000022f060 <hpNormalize>:
fn hpNormalize(hp: *HP) void {
  22f060:	55                   	push   rbp
  22f061:	48 89 e5             	mov    rbp,rsp
  22f064:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    const val = hp.val;
  22f068:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  22f06c:	c5 fb 10 07          	vmovsd xmm0,QWORD PTR [rdi]
  22f070:	c5 fb 11 45 f0       	vmovsd QWORD PTR [rbp-0x10],xmm0
    hp.val += hp.off;
  22f075:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  22f079:	c5 fb 10 07          	vmovsd xmm0,QWORD PTR [rdi]
  22f07d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  22f081:	c5 fb 58 40 08       	vaddsd xmm0,xmm0,QWORD PTR [rax+0x8]
  22f086:	c5 fb 11 07          	vmovsd QWORD PTR [rdi],xmm0
    hp.off += val - hp.val;
  22f08a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  22f08e:	c5 fb 10 40 08       	vmovsd xmm0,QWORD PTR [rax+0x8]
  22f093:	c5 fb 10 4d f0       	vmovsd xmm1,QWORD PTR [rbp-0x10]
  22f098:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  22f09c:	c5 f3 5c 0f          	vsubsd xmm1,xmm1,QWORD PTR [rdi]
  22f0a0:	c5 fb 58 c1          	vaddsd xmm0,xmm0,xmm1
  22f0a4:	c5 fb 11 40 08       	vmovsd QWORD PTR [rax+0x8],xmm0
fn hpNormalize(hp: *HP) void {
  22f0a9:	5d                   	pop    rbp
  22f0aa:	c3                   	ret    
  22f0ab:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000022f0b0 <fpeint>:
    }

    return buf_index;
}

fn fpeint(from: f64) u128 {
  22f0b0:	55                   	push   rbp
  22f0b1:	48 89 e5             	mov    rbp,rsp
  22f0b4:	48 83 ec 20          	sub    rsp,0x20
  22f0b8:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    const bits = @bitCast(u64, from);
  22f0bd:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  22f0c2:	c5 fb 11 45 f0       	vmovsd QWORD PTR [rbp-0x10],xmm0
    assert((bits & ((1 << 52) - 1)) == 0);
  22f0c7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22f0cb:	48 c1 e0 0c          	shl    rax,0xc
  22f0cf:	48 85 c0             	test   rax,rax
  22f0d2:	0f 94 c1             	sete   cl
  22f0d5:	0f b6 f9             	movzx  edi,cl
  22f0d8:	e8 23 bf fd ff       	call   20b000 <assert>

    return u128(1) << @truncate(u7, (bits >> 52) -% 1023);
  22f0dd:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22f0e1:	48 c1 e8 34          	shr    rax,0x34
  22f0e5:	89 c7                	mov    edi,eax
  22f0e7:	81 c7 01 fc ff ff    	add    edi,0xfffffc01
  22f0ed:	40 88 f9             	mov    cl,dil
  22f0f0:	bf 01 00 00 00       	mov    edi,0x1
  22f0f5:	89 f8                	mov    eax,edi
  22f0f7:	31 ff                	xor    edi,edi
  22f0f9:	89 fa                	mov    edx,edi
  22f0fb:	88 4d ef             	mov    BYTE PTR [rbp-0x11],cl
  22f0fe:	48 89 d6             	mov    rsi,rdx
  22f101:	48 0f a5 c6          	shld   rsi,rax,cl
  22f105:	8a 4d ef             	mov    cl,BYTE PTR [rbp-0x11]
  22f108:	41 88 c8             	mov    r8b,cl
  22f10b:	c4 e2 b9 f7 c0       	shlx   rax,rax,r8
  22f110:	f6 c1 40             	test   cl,0x40
  22f113:	48 0f 45 f0          	cmovne rsi,rax
  22f117:	48 0f 45 c2          	cmovne rax,rdx
  22f11b:	48 89 f2             	mov    rdx,rsi
  22f11e:	48 83 c4 20          	add    rsp,0x20
  22f122:	5d                   	pop    rbp
  22f123:	c3                   	ret    
  22f124:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22f12b:	00 00 00 00 00 

000000000022f130 <mismatch10>:
/// from zero, find the first index where the digits in the two integers
/// divergent starting from the highest index.
///   @a: Integer a.
///   @b: Integer b.
///   &returns: An index within [0, 19).
fn mismatch10(a: u64, b: u64) i32 {
  22f130:	55                   	push   rbp
  22f131:	48 89 e5             	mov    rbp,rsp
  22f134:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  22f13b:	31 c0                	xor    eax,eax
  22f13d:	88 c1                	mov    cl,al
  22f13f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  22f143:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    const pow10 = 10000000000;
    const af = a / pow10;
  22f147:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  22f14b:	f6 c1 01             	test   cl,0x1
  22f14e:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  22f152:	0f 85 94 00 00 00    	jne    22f1ec <mismatch10+0xbc>
  22f158:	eb 5e                	jmp    22f1b8 <mismatch10+0x88>
    var i: i32 = 0;
    var a_copy = a;
    var b_copy = b;

    if (af != bf) {
        i = 10;
  22f15a:	c7 45 dc 0a 00 00 00 	mov    DWORD PTR [rbp-0x24],0xa
        a_copy = af;
  22f161:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22f165:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
        b_copy = bf;
  22f169:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  22f16d:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
    if (af != bf) {
  22f171:	eb 02                	jmp    22f175 <mismatch10+0x45>
  22f173:	eb 00                	jmp    22f175 <mismatch10+0x45>
    }

    while (true) : (i += 1) {
  22f175:	eb 00                	jmp    22f177 <mismatch10+0x47>
  22f177:	eb 00                	jmp    22f179 <mismatch10+0x49>
  22f179:	31 c0                	xor    eax,eax
  22f17b:	88 c1                	mov    cl,al
        a_copy /= 10;
  22f17d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  22f181:	f6 c1 01             	test   cl,0x1
  22f184:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  22f188:	0f 85 fb 00 00 00    	jne    22f289 <mismatch10+0x159>
  22f18e:	e9 c5 00 00 00       	jmp    22f258 <mismatch10+0x128>
        b_copy /= 10;

        if (a_copy == b_copy) return i;
  22f193:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  22f196:	48 81 c4 80 00 00 00 	add    rsp,0x80
  22f19d:	5d                   	pop    rbp
  22f19e:	c3                   	ret    
    while (true) : (i += 1) {
  22f19f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  22f1a2:	ff c0                	inc    eax
  22f1a4:	0f 90 c1             	seto   cl
  22f1a7:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
  22f1aa:	88 4d b3             	mov    BYTE PTR [rbp-0x4d],cl
  22f1ad:	0f 80 1d 01 00 00    	jo     22f2d0 <mismatch10+0x1a0>
  22f1b3:	e9 28 01 00 00       	jmp    22f2e0 <mismatch10+0x1b0>
  22f1b8:	31 c0                	xor    eax,eax
  22f1ba:	88 c1                	mov    cl,al
  22f1bc:	48 ba 00 e4 0b 54 02 	movabs rdx,0x2540be400
  22f1c3:	00 00 00 
    const af = a / pow10;
  22f1c6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  22f1ca:	31 f6                	xor    esi,esi
  22f1cc:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
  22f1d0:	89 f2                	mov    edx,esi
  22f1d2:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  22f1d6:	48 f7 f7             	div    rdi
  22f1d9:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    const bf = b / pow10;
  22f1dd:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22f1e1:	f6 c1 01             	test   cl,0x1
  22f1e4:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  22f1e8:	75 5e                	jne    22f248 <mismatch10+0x118>
  22f1ea:	eb 10                	jmp    22f1fc <mismatch10+0xcc>
  22f1ec:	48 8d 3d 4d 40 01 00 	lea    rdi,[rip+0x1404d]        # 243240 <__unnamed_7>
  22f1f3:	31 c0                	xor    eax,eax
  22f1f5:	89 c6                	mov    esi,eax
    const af = a / pow10;
  22f1f7:	e8 04 c4 fd ff       	call   20b600 <panic>
  22f1fc:	48 b8 00 e4 0b 54 02 	movabs rax,0x2540be400
  22f203:	00 00 00 
    const bf = b / pow10;
  22f206:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  22f20a:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  22f20e:	48 89 c8             	mov    rax,rcx
  22f211:	31 d2                	xor    edx,edx
  22f213:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  22f217:	48 f7 f6             	div    rsi
  22f21a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    var i: i32 = 0;
  22f21e:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
    var a_copy = a;
  22f225:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  22f229:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
    var b_copy = b;
  22f22d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22f231:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
    if (af != bf) {
  22f235:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22f239:	48 3b 45 e0          	cmp    rax,QWORD PTR [rbp-0x20]
  22f23d:	0f 85 17 ff ff ff    	jne    22f15a <mismatch10+0x2a>
  22f243:	e9 2b ff ff ff       	jmp    22f173 <mismatch10+0x43>
  22f248:	48 8d 3d f1 3f 01 00 	lea    rdi,[rip+0x13ff1]        # 243240 <__unnamed_7>
  22f24f:	31 c0                	xor    eax,eax
  22f251:	89 c6                	mov    esi,eax
    const bf = b / pow10;
  22f253:	e8 a8 c3 fd ff       	call   20b600 <panic>
  22f258:	31 c0                	xor    eax,eax
  22f25a:	88 c1                	mov    cl,al
  22f25c:	b8 0a 00 00 00       	mov    eax,0xa
  22f261:	89 c2                	mov    edx,eax
        a_copy /= 10;
  22f263:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  22f267:	31 f6                	xor    esi,esi
  22f269:	48 89 55 90          	mov    QWORD PTR [rbp-0x70],rdx
  22f26d:	89 f2                	mov    edx,esi
  22f26f:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  22f273:	48 f7 f7             	div    rdi
  22f276:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
        b_copy /= 10;
  22f27a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  22f27e:	f6 c1 01             	test   cl,0x1
  22f281:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  22f285:	75 39                	jne    22f2c0 <mismatch10+0x190>
  22f287:	eb 10                	jmp    22f299 <mismatch10+0x169>
  22f289:	48 8d 3d b0 3f 01 00 	lea    rdi,[rip+0x13fb0]        # 243240 <__unnamed_7>
  22f290:	31 c0                	xor    eax,eax
  22f292:	89 c6                	mov    esi,eax
        a_copy /= 10;
  22f294:	e8 67 c3 fd ff       	call   20b600 <panic>
  22f299:	b8 0a 00 00 00       	mov    eax,0xa
  22f29e:	89 c1                	mov    ecx,eax
        b_copy /= 10;
  22f2a0:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  22f2a4:	31 d2                	xor    edx,edx
  22f2a6:	48 f7 f1             	div    rcx
  22f2a9:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
        if (a_copy == b_copy) return i;
  22f2ad:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  22f2b1:	48 3b 45 c8          	cmp    rax,QWORD PTR [rbp-0x38]
  22f2b5:	0f 84 d8 fe ff ff    	je     22f193 <mismatch10+0x63>
  22f2bb:	e9 df fe ff ff       	jmp    22f19f <mismatch10+0x6f>
  22f2c0:	48 8d 3d 79 3f 01 00 	lea    rdi,[rip+0x13f79]        # 243240 <__unnamed_7>
  22f2c7:	31 c0                	xor    eax,eax
  22f2c9:	89 c6                	mov    esi,eax
        b_copy /= 10;
  22f2cb:	e8 30 c3 fd ff       	call   20b600 <panic>
  22f2d0:	48 8d 3d f1 3e 01 00 	lea    rdi,[rip+0x13ef1]        # 2431c8 <__unnamed_4>
  22f2d7:	31 c0                	xor    eax,eax
  22f2d9:	89 c6                	mov    esi,eax
    while (true) : (i += 1) {
  22f2db:	e8 20 c3 fd ff       	call   20b600 <panic>
  22f2e0:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
  22f2e3:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
  22f2e6:	e9 8c fe ff ff       	jmp    22f177 <mismatch10+0x47>
  22f2eb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000022f2f0 <u64toa>:
fn u64toa(value_param: u64, buffer: []u8) usize {
  22f2f0:	55                   	push   rbp
  22f2f1:	48 89 e5             	mov    rbp,rsp
  22f2f4:	48 81 ec d0 0b 00 00 	sub    rsp,0xbd0
  22f2fb:	48 b8 00 00 c1 6f f2 	movabs rax,0x2386f26fc10000
  22f302:	86 23 00 
  22f305:	48 b9 00 80 c6 a4 7e 	movabs rcx,0x38d7ea4c68000
  22f30c:	8d 03 00 
  22f30f:	48 ba 00 40 7a 10 f3 	movabs rdx,0x5af3107a4000
  22f316:	5a 00 00 
  22f319:	49 b8 00 a0 72 4e 18 	movabs r8,0x9184e72a000
  22f320:	09 00 00 
  22f323:	49 b9 00 10 a5 d4 e8 	movabs r9,0xe8d4a51000
  22f32a:	00 00 00 
  22f32d:	49 ba 00 e8 76 48 17 	movabs r10,0x174876e800
  22f334:	00 00 00 
  22f337:	49 bb 00 e4 0b 54 02 	movabs r11,0x2540be400
  22f33e:	00 00 00 
  22f341:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    var value = value_param;
  22f345:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  22f349:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
    const kTen8: u64 = 100000000;
  22f34d:	48 c7 45 e8 00 e1 f5 	mov    QWORD PTR [rbp-0x18],0x5f5e100
  22f354:	05 
    const kTen9: u64 = kTen8 * 10;
  22f355:	48 c7 45 e0 00 ca 9a 	mov    QWORD PTR [rbp-0x20],0x3b9aca00
  22f35c:	3b 
    const kTen10: u64 = kTen8 * 100;
  22f35d:	4c 89 5d d8          	mov    QWORD PTR [rbp-0x28],r11
    const kTen11: u64 = kTen8 * 1000;
  22f361:	4c 89 55 d0          	mov    QWORD PTR [rbp-0x30],r10
    const kTen12: u64 = kTen8 * 10000;
  22f365:	4c 89 4d c8          	mov    QWORD PTR [rbp-0x38],r9
    const kTen13: u64 = kTen8 * 100000;
  22f369:	4c 89 45 c0          	mov    QWORD PTR [rbp-0x40],r8
    const kTen14: u64 = kTen8 * 1000000;
  22f36d:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
    const kTen15: u64 = kTen8 * 10000000;
  22f371:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
    const kTen16: u64 = kTen8 * kTen8;
  22f375:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
    var buf_index: usize = 0;
  22f379:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
  22f380:	00 
    if (value < kTen8) {
  22f381:	48 81 7d f0 00 e1 f5 	cmp    QWORD PTR [rbp-0x10],0x5f5e100
  22f388:	05 
  22f389:	48 89 b5 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rsi
  22f390:	0f 83 8d 01 00 00    	jae    22f523 <u64toa+0x233>
        const v = @intCast(u32, value);
  22f396:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22f39a:	89 c1                	mov    ecx,eax
  22f39c:	89 ca                	mov    edx,ecx
  22f39e:	89 d6                	mov    esi,edx
  22f3a0:	48 39 f0             	cmp    rax,rsi
  22f3a3:	89 8d ec fe ff ff    	mov    DWORD PTR [rbp-0x114],ecx
  22f3a9:	0f 84 34 04 00 00    	je     22f7e3 <u64toa+0x4f3>
  22f3af:	e9 4a 04 00 00       	jmp    22f7fe <u64toa+0x50e>
  22f3b4:	31 c0                	xor    eax,eax
  22f3b6:	88 c1                	mov    cl,al
            const d1: u32 = (v / 100) << 1;
  22f3b8:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
  22f3bb:	f6 c1 01             	test   cl,0x1
  22f3be:	89 85 e8 fe ff ff    	mov    DWORD PTR [rbp-0x118],eax
  22f3c4:	0f 85 7b 04 00 00    	jne    22f845 <u64toa+0x555>
  22f3ca:	e9 3f 04 00 00       	jmp    22f80e <u64toa+0x51e>
                buffer[buf_index] = c_digits_lut[d1];
  22f3cf:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f3d3:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f3da:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f3de:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
  22f3e5:	0f 82 bf 04 00 00    	jb     22f8aa <u64toa+0x5ba>
  22f3eb:	e9 aa 04 00 00       	jmp    22f89a <u64toa+0x5aa>
            if (v >= 1000) {
  22f3f0:	eb 00                	jmp    22f3f2 <u64toa+0x102>
            if (v >= 100) {
  22f3f2:	83 7d 9c 64          	cmp    DWORD PTR [rbp-0x64],0x64
  22f3f6:	72 21                	jb     22f419 <u64toa+0x129>
                buffer[buf_index] = c_digits_lut[d1 + 1];
  22f3f8:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f3fc:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f403:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f407:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
  22f40e:	0f 82 39 05 00 00    	jb     22f94d <u64toa+0x65d>
  22f414:	e9 24 05 00 00       	jmp    22f93d <u64toa+0x64d>
            if (v >= 100) {
  22f419:	eb 00                	jmp    22f41b <u64toa+0x12b>
            if (v >= 10) {
  22f41b:	83 7d 9c 0a          	cmp    DWORD PTR [rbp-0x64],0xa
  22f41f:	72 21                	jb     22f442 <u64toa+0x152>
                buffer[buf_index] = c_digits_lut[d2];
  22f421:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f425:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f42c:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f430:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  22f437:	0f 82 e3 05 00 00    	jb     22fa20 <u64toa+0x730>
  22f43d:	e9 ce 05 00 00       	jmp    22fa10 <u64toa+0x720>
            if (v >= 10) {
  22f442:	eb 00                	jmp    22f444 <u64toa+0x154>
            buffer[buf_index] = c_digits_lut[d2 + 1];
  22f444:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f448:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f44f:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f453:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
  22f45a:	0f 82 63 06 00 00    	jb     22fac3 <u64toa+0x7d3>
  22f460:	e9 4e 06 00 00       	jmp    22fab3 <u64toa+0x7c3>
  22f465:	31 c0                	xor    eax,eax
  22f467:	88 c1                	mov    cl,al
            const b: u32 = v / 10000;
  22f469:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
  22f46c:	f6 c1 01             	test   cl,0x1
  22f46f:	89 85 c4 fe ff ff    	mov    DWORD PTR [rbp-0x13c],eax
  22f475:	0f 85 3f 07 00 00    	jne    22fbba <u64toa+0x8ca>
  22f47b:	e9 06 07 00 00       	jmp    22fb86 <u64toa+0x896>
                buffer[buf_index] = c_digits_lut[d1];
  22f480:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f484:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f48b:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f48f:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
  22f496:	0f 82 a0 08 00 00    	jb     22fd3c <u64toa+0xa4c>
  22f49c:	e9 8b 08 00 00       	jmp    22fd2c <u64toa+0xa3c>
            if (value >= 10000000) {
  22f4a1:	eb 00                	jmp    22f4a3 <u64toa+0x1b3>
            if (value >= 1000000) {
  22f4a3:	48 81 7d f0 40 42 0f 	cmp    QWORD PTR [rbp-0x10],0xf4240
  22f4aa:	00 
  22f4ab:	72 21                	jb     22f4ce <u64toa+0x1de>
                buffer[buf_index] = c_digits_lut[d1 + 1];
  22f4ad:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f4b1:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f4b8:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f4bc:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  22f4c3:	0f 82 16 09 00 00    	jb     22fddf <u64toa+0xaef>
  22f4c9:	e9 01 09 00 00       	jmp    22fdcf <u64toa+0xadf>
            if (value >= 1000000) {
  22f4ce:	eb 00                	jmp    22f4d0 <u64toa+0x1e0>
            if (value >= 100000) {
  22f4d0:	48 81 7d f0 a0 86 01 	cmp    QWORD PTR [rbp-0x10],0x186a0
  22f4d7:	00 
  22f4d8:	72 21                	jb     22f4fb <u64toa+0x20b>
                buffer[buf_index] = c_digits_lut[d2];
  22f4da:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f4de:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f4e5:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f4e9:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
  22f4f0:	0f 82 bc 09 00 00    	jb     22feb2 <u64toa+0xbc2>
  22f4f6:	e9 a7 09 00 00       	jmp    22fea2 <u64toa+0xbb2>
            if (value >= 100000) {
  22f4fb:	eb 00                	jmp    22f4fd <u64toa+0x20d>
            buffer[buf_index] = c_digits_lut[d2 + 1];
  22f4fd:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f501:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f508:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f50c:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
  22f513:	0f 82 3c 0a 00 00    	jb     22ff55 <u64toa+0xc65>
  22f519:	e9 27 0a 00 00       	jmp    22ff45 <u64toa+0xc55>
    if (value < kTen8) {
  22f51e:	e9 b3 02 00 00       	jmp    22f7d6 <u64toa+0x4e6>
  22f523:	48 b8 00 00 c1 6f f2 	movabs rax,0x2386f26fc10000
  22f52a:	86 23 00 
    } else if (value < kTen16) {
  22f52d:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
  22f531:	0f 83 ba 01 00 00    	jae    22f6f1 <u64toa+0x401>
  22f537:	31 c0                	xor    eax,eax
  22f539:	88 c1                	mov    cl,al
        const v0: u32 = @intCast(u32, value / kTen8);
  22f53b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22f53f:	f6 c1 01             	test   cl,0x1
  22f542:	48 89 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rax
  22f549:	0f 85 2d 0e 00 00    	jne    23037c <u64toa+0x108c>
  22f54f:	e9 02 0e 00 00       	jmp    230356 <u64toa+0x1066>
            buffer[buf_index] = c_digits_lut[d1];
  22f554:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f558:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f55f:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f563:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  22f56a:	0f 82 5b 12 00 00    	jb     2307cb <u64toa+0x14db>
  22f570:	e9 46 12 00 00       	jmp    2307bb <u64toa+0x14cb>
        if (value >= kTen15) {
  22f575:	eb 00                	jmp    22f577 <u64toa+0x287>
  22f577:	48 b8 00 40 7a 10 f3 	movabs rax,0x5af3107a4000
  22f57e:	5a 00 00 
        if (value >= kTen14) {
  22f581:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
  22f585:	72 21                	jb     22f5a8 <u64toa+0x2b8>
            buffer[buf_index] = c_digits_lut[d1 + 1];
  22f587:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f58b:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f592:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f596:	48 89 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rax
  22f59d:	0f 82 ce 12 00 00    	jb     230871 <u64toa+0x1581>
  22f5a3:	e9 b9 12 00 00       	jmp    230861 <u64toa+0x1571>
        if (value >= kTen14) {
  22f5a8:	eb 00                	jmp    22f5aa <u64toa+0x2ba>
  22f5aa:	48 b8 00 a0 72 4e 18 	movabs rax,0x9184e72a000
  22f5b1:	09 00 00 
        if (value >= kTen13) {
  22f5b4:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
  22f5b8:	72 21                	jb     22f5db <u64toa+0x2eb>
            buffer[buf_index] = c_digits_lut[d2];
  22f5ba:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f5be:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f5c5:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f5c9:	48 89 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rax
  22f5d0:	0f 82 71 13 00 00    	jb     230947 <u64toa+0x1657>
  22f5d6:	e9 5c 13 00 00       	jmp    230937 <u64toa+0x1647>
        if (value >= kTen13) {
  22f5db:	eb 00                	jmp    22f5dd <u64toa+0x2ed>
  22f5dd:	48 b8 00 10 a5 d4 e8 	movabs rax,0xe8d4a51000
  22f5e4:	00 00 00 
        if (value >= kTen12) {
  22f5e7:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
  22f5eb:	72 21                	jb     22f60e <u64toa+0x31e>
            buffer[buf_index] = c_digits_lut[d2 + 1];
  22f5ed:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f5f1:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f5f8:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f5fc:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  22f603:	0f 82 e4 13 00 00    	jb     2309ed <u64toa+0x16fd>
  22f609:	e9 cf 13 00 00       	jmp    2309dd <u64toa+0x16ed>
        if (value >= kTen12) {
  22f60e:	eb 00                	jmp    22f610 <u64toa+0x320>
  22f610:	48 b8 00 e8 76 48 17 	movabs rax,0x174876e800
  22f617:	00 00 00 
        if (value >= kTen11) {
  22f61a:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
  22f61e:	72 21                	jb     22f641 <u64toa+0x351>
            buffer[buf_index] = c_digits_lut[d3];
  22f620:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f624:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f62b:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f62f:	48 89 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rax
  22f636:	0f 82 87 14 00 00    	jb     230ac3 <u64toa+0x17d3>
  22f63c:	e9 72 14 00 00       	jmp    230ab3 <u64toa+0x17c3>
        if (value >= kTen11) {
  22f641:	eb 00                	jmp    22f643 <u64toa+0x353>
  22f643:	48 b8 00 e4 0b 54 02 	movabs rax,0x2540be400
  22f64a:	00 00 00 
        if (value >= kTen10) {
  22f64d:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
  22f651:	72 21                	jb     22f674 <u64toa+0x384>
            buffer[buf_index] = c_digits_lut[d3 + 1];
  22f653:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f657:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f65e:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f662:	48 89 85 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rax
  22f669:	0f 82 fa 14 00 00    	jb     230b69 <u64toa+0x1879>
  22f66f:	e9 e5 14 00 00       	jmp    230b59 <u64toa+0x1869>
        if (value >= kTen10) {
  22f674:	eb 00                	jmp    22f676 <u64toa+0x386>
        if (value >= kTen9) {
  22f676:	48 81 7d f0 00 ca 9a 	cmp    QWORD PTR [rbp-0x10],0x3b9aca00
  22f67d:	3b 
  22f67e:	72 21                	jb     22f6a1 <u64toa+0x3b1>
            buffer[buf_index] = c_digits_lut[d4];
  22f680:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f684:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f68b:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f68f:	48 89 85 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rax
  22f696:	0f 82 a3 15 00 00    	jb     230c3f <u64toa+0x194f>
  22f69c:	e9 8e 15 00 00       	jmp    230c2f <u64toa+0x193f>
        if (value >= kTen9) {
  22f6a1:	eb 00                	jmp    22f6a3 <u64toa+0x3b3>
        if (value >= kTen8) {
  22f6a3:	48 81 7d f0 00 e1 f5 	cmp    QWORD PTR [rbp-0x10],0x5f5e100
  22f6aa:	05 
  22f6ab:	72 21                	jb     22f6ce <u64toa+0x3de>
            buffer[buf_index] = c_digits_lut[d4 + 1];
  22f6ad:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f6b1:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f6b8:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f6bc:	48 89 85 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rax
  22f6c3:	0f 82 1c 16 00 00    	jb     230ce5 <u64toa+0x19f5>
  22f6c9:	e9 07 16 00 00       	jmp    230cd5 <u64toa+0x19e5>
        if (value >= kTen8) {
  22f6ce:	eb 00                	jmp    22f6d0 <u64toa+0x3e0>
        buffer[buf_index] = c_digits_lut[d5];
  22f6d0:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f6d4:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f6db:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f6df:	48 89 85 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rax
  22f6e6:	0f 82 cf 16 00 00    	jb     230dbb <u64toa+0x1acb>
  22f6ec:	e9 ba 16 00 00       	jmp    230dab <u64toa+0x1abb>
  22f6f1:	31 c0                	xor    eax,eax
  22f6f3:	88 c1                	mov    cl,al
        const a = @intCast(u32, value / kTen16); // 1 to 1844
  22f6f5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22f6f9:	f6 c1 01             	test   cl,0x1
  22f6fc:	48 89 85 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rax
  22f703:	0f 85 53 1d 00 00    	jne    23145c <u64toa+0x216c>
  22f709:	e9 12 1d 00 00       	jmp    231420 <u64toa+0x2130>
            buffer[buf_index] = '0' + @intCast(u8, a);
  22f70e:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f712:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f719:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f71d:	48 89 85 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rax
  22f724:	0f 82 d1 1d 00 00    	jb     2314fb <u64toa+0x220b>
  22f72a:	e9 bc 1d 00 00       	jmp    2314eb <u64toa+0x21fb>
        } else if (a < 100) {
  22f72f:	83 bd 40 ff ff ff 64 	cmp    DWORD PTR [rbp-0xc0],0x64
  22f736:	73 30                	jae    22f768 <u64toa+0x478>
            const i: u32 = a << 1;
  22f738:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
  22f73e:	c1 e0 01             	shl    eax,0x1
  22f741:	89 85 3c ff ff ff    	mov    DWORD PTR [rbp-0xc4],eax
            buffer[buf_index] = c_digits_lut[i];
  22f747:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  22f74b:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  22f752:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  22f756:	48 89 8d 38 fe ff ff 	mov    QWORD PTR [rbp-0x1c8],rcx
  22f75d:	0f 82 5d 1e 00 00    	jb     2315c0 <u64toa+0x22d0>
  22f763:	e9 48 1e 00 00       	jmp    2315b0 <u64toa+0x22c0>
        } else if (a < 1000) {
  22f768:	81 bd 40 ff ff ff e8 	cmp    DWORD PTR [rbp-0xc0],0x3e8
  22f76f:	03 00 00 
  22f772:	73 21                	jae    22f795 <u64toa+0x4a5>
            buffer[buf_index] = '0' + @intCast(u8, a / 100);
  22f774:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f778:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f77f:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f783:	48 89 85 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rax
  22f78a:	0f 82 bf 1f 00 00    	jb     23174f <u64toa+0x245f>
  22f790:	e9 aa 1f 00 00       	jmp    23173f <u64toa+0x244f>
  22f795:	31 c0                	xor    eax,eax
  22f797:	88 c1                	mov    cl,al
            const i: u32 = (a / 100) << 1;
  22f799:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
  22f79f:	f6 c1 01             	test   cl,0x1
  22f7a2:	89 85 2c fe ff ff    	mov    DWORD PTR [rbp-0x1d4],eax
  22f7a8:	0f 85 c1 22 00 00    	jne    231a6f <u64toa+0x277f>
  22f7ae:	e9 7f 22 00 00       	jmp    231a32 <u64toa+0x2742>
        } else if (a < 100) {
  22f7b3:	eb 00                	jmp    22f7b5 <u64toa+0x4c5>
        if (a < 10) {
  22f7b5:	eb 00                	jmp    22f7b7 <u64toa+0x4c7>
  22f7b7:	31 c0                	xor    eax,eax
  22f7b9:	88 c1                	mov    cl,al
        const v0 = @intCast(u32, value / kTen8);
  22f7bb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22f7bf:	f6 c1 01             	test   cl,0x1
  22f7c2:	48 89 85 20 fe ff ff 	mov    QWORD PTR [rbp-0x1e0],rax
  22f7c9:	0f 85 57 26 00 00    	jne    231e26 <u64toa+0x2b36>
  22f7cf:	e9 2c 26 00 00       	jmp    231e00 <u64toa+0x2b10>
    if (value < kTen8) {
  22f7d4:	eb 00                	jmp    22f7d6 <u64toa+0x4e6>
    return buf_index;
  22f7d6:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f7da:	48 81 c4 d0 0b 00 00 	add    rsp,0xbd0
  22f7e1:	5d                   	pop    rbp
  22f7e2:	c3                   	ret    
        const v = @intCast(u32, value);
  22f7e3:	8b 85 ec fe ff ff    	mov    eax,DWORD PTR [rbp-0x114]
  22f7e9:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
        if (v < 10000) {
  22f7ec:	81 7d 9c 10 27 00 00 	cmp    DWORD PTR [rbp-0x64],0x2710
  22f7f3:	0f 82 bb fb ff ff    	jb     22f3b4 <u64toa+0xc4>
  22f7f9:	e9 67 fc ff ff       	jmp    22f465 <u64toa+0x175>
  22f7fe:	48 8d 3d a3 3c 01 00 	lea    rdi,[rip+0x13ca3]        # 2434a8 <__unnamed_22>
  22f805:	31 c0                	xor    eax,eax
  22f807:	89 c6                	mov    esi,eax
        const v = @intCast(u32, value);
  22f809:	e8 f2 bd fd ff       	call   20b600 <panic>
  22f80e:	31 c0                	xor    eax,eax
  22f810:	88 c1                	mov    cl,al
  22f812:	b8 64 00 00 00       	mov    eax,0x64
            const d1: u32 = (v / 100) << 1;
  22f817:	8b 95 e8 fe ff ff    	mov    edx,DWORD PTR [rbp-0x118]
  22f81d:	89 85 1c fe ff ff    	mov    DWORD PTR [rbp-0x1e4],eax
  22f823:	89 d0                	mov    eax,edx
  22f825:	31 d2                	xor    edx,edx
  22f827:	8b b5 1c fe ff ff    	mov    esi,DWORD PTR [rbp-0x1e4]
  22f82d:	f7 f6                	div    esi
  22f82f:	c1 e0 01             	shl    eax,0x1
  22f832:	89 45 98             	mov    DWORD PTR [rbp-0x68],eax
            const d2: u32 = (v % 100) << 1;
  22f835:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
  22f838:	f6 c1 01             	test   cl,0x1
  22f83b:	89 85 18 fe ff ff    	mov    DWORD PTR [rbp-0x1e8],eax
  22f841:	75 47                	jne    22f88a <u64toa+0x59a>
  22f843:	eb 10                	jmp    22f855 <u64toa+0x565>
  22f845:	48 8d 3d f4 39 01 00 	lea    rdi,[rip+0x139f4]        # 243240 <__unnamed_7>
  22f84c:	31 c0                	xor    eax,eax
  22f84e:	89 c6                	mov    esi,eax
            const d1: u32 = (v / 100) << 1;
  22f850:	e8 ab bd fd ff       	call   20b600 <panic>
  22f855:	b8 64 00 00 00       	mov    eax,0x64
            const d2: u32 = (v % 100) << 1;
  22f85a:	8b 8d 18 fe ff ff    	mov    ecx,DWORD PTR [rbp-0x1e8]
  22f860:	89 85 14 fe ff ff    	mov    DWORD PTR [rbp-0x1ec],eax
  22f866:	89 c8                	mov    eax,ecx
  22f868:	31 d2                	xor    edx,edx
  22f86a:	8b b5 14 fe ff ff    	mov    esi,DWORD PTR [rbp-0x1ec]
  22f870:	f7 f6                	div    esi
  22f872:	c1 e2 01             	shl    edx,0x1
  22f875:	89 55 94             	mov    DWORD PTR [rbp-0x6c],edx
            if (v >= 1000) {
  22f878:	81 7d 9c e8 03 00 00 	cmp    DWORD PTR [rbp-0x64],0x3e8
  22f87f:	0f 83 4a fb ff ff    	jae    22f3cf <u64toa+0xdf>
  22f885:	e9 66 fb ff ff       	jmp    22f3f0 <u64toa+0x100>
  22f88a:	48 8d 3d 67 3a 01 00 	lea    rdi,[rip+0x13a67]        # 2432f8 <__unnamed_15>
  22f891:	31 c0                	xor    eax,eax
  22f893:	89 c6                	mov    esi,eax
            const d2: u32 = (v % 100) << 1;
  22f895:	e8 66 bd fd ff       	call   20b600 <panic>
  22f89a:	48 8d 3d 57 3b 01 00 	lea    rdi,[rip+0x13b57]        # 2433f8 <__unnamed_20>
  22f8a1:	31 c0                	xor    eax,eax
  22f8a3:	89 c6                	mov    esi,eax
                buffer[buf_index] = c_digits_lut[d1];
  22f8a5:	e8 56 bd fd ff       	call   20b600 <panic>
  22f8aa:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
  22f8b1:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f8b8:	48 03 01             	add    rax,QWORD PTR [rcx]
  22f8bb:	8b 55 98             	mov    edx,DWORD PTR [rbp-0x68]
  22f8be:	89 d6                	mov    esi,edx
  22f8c0:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  22f8c7:	48 89 85 08 fe ff ff 	mov    QWORD PTR [rbp-0x1f8],rax
  22f8ce:	48 89 b5 00 fe ff ff 	mov    QWORD PTR [rbp-0x200],rsi
  22f8d5:	72 10                	jb     22f8e7 <u64toa+0x5f7>
  22f8d7:	48 8d 3d 1a 3b 01 00 	lea    rdi,[rip+0x13b1a]        # 2433f8 <__unnamed_20>
  22f8de:	31 c0                	xor    eax,eax
  22f8e0:	89 c6                	mov    esi,eax
  22f8e2:	e8 19 bd fd ff       	call   20b600 <panic>
  22f8e7:	48 8d 05 32 91 fd ff 	lea    rax,[rip+0xfffffffffffd9132]        # 208a20 <c_digits_lut>
  22f8ee:	48 8b 8d 00 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x200]
  22f8f5:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  22f8f8:	48 8b 85 08 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1f8]
  22f8ff:	88 10                	mov    BYTE PTR [rax],dl
                buf_index += 1;
  22f901:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  22f905:	48 83 c6 01          	add    rsi,0x1
  22f909:	0f 92 c2             	setb   dl
  22f90c:	48 89 b5 f8 fd ff ff 	mov    QWORD PTR [rbp-0x208],rsi
  22f913:	88 95 f7 fd ff ff    	mov    BYTE PTR [rbp-0x209],dl
  22f919:	72 02                	jb     22f91d <u64toa+0x62d>
  22f91b:	eb 10                	jmp    22f92d <u64toa+0x63d>
  22f91d:	48 8d 3d a4 38 01 00 	lea    rdi,[rip+0x138a4]        # 2431c8 <__unnamed_4>
  22f924:	31 c0                	xor    eax,eax
  22f926:	89 c6                	mov    esi,eax
  22f928:	e8 d3 bc fd ff       	call   20b600 <panic>
  22f92d:	48 8b 85 f8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x208]
  22f934:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            if (v >= 1000) {
  22f938:	e9 b5 fa ff ff       	jmp    22f3f2 <u64toa+0x102>
  22f93d:	48 8d 3d b4 3a 01 00 	lea    rdi,[rip+0x13ab4]        # 2433f8 <__unnamed_20>
  22f944:	31 c0                	xor    eax,eax
  22f946:	89 c6                	mov    esi,eax
                buffer[buf_index] = c_digits_lut[d1 + 1];
  22f948:	e8 b3 bc fd ff       	call   20b600 <panic>
  22f94d:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  22f954:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f95b:	48 03 01             	add    rax,QWORD PTR [rcx]
  22f95e:	8b 55 98             	mov    edx,DWORD PTR [rbp-0x68]
  22f961:	83 c2 01             	add    edx,0x1
  22f964:	40 0f 92 c6          	setb   sil
  22f968:	48 89 85 e8 fd ff ff 	mov    QWORD PTR [rbp-0x218],rax
  22f96f:	89 95 e4 fd ff ff    	mov    DWORD PTR [rbp-0x21c],edx
  22f975:	40 88 b5 e3 fd ff ff 	mov    BYTE PTR [rbp-0x21d],sil
  22f97c:	72 02                	jb     22f980 <u64toa+0x690>
  22f97e:	eb 10                	jmp    22f990 <u64toa+0x6a0>
  22f980:	48 8d 3d 41 38 01 00 	lea    rdi,[rip+0x13841]        # 2431c8 <__unnamed_4>
  22f987:	31 c0                	xor    eax,eax
  22f989:	89 c6                	mov    esi,eax
  22f98b:	e8 70 bc fd ff       	call   20b600 <panic>
  22f990:	8b 85 e4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x21c]
  22f996:	89 c1                	mov    ecx,eax
  22f998:	89 ca                	mov    edx,ecx
  22f99a:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  22f9a1:	48 89 95 d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rdx
  22f9a8:	72 10                	jb     22f9ba <u64toa+0x6ca>
  22f9aa:	48 8d 3d 47 3a 01 00 	lea    rdi,[rip+0x13a47]        # 2433f8 <__unnamed_20>
  22f9b1:	31 c0                	xor    eax,eax
  22f9b3:	89 c6                	mov    esi,eax
  22f9b5:	e8 46 bc fd ff       	call   20b600 <panic>
  22f9ba:	48 8d 05 5f 90 fd ff 	lea    rax,[rip+0xfffffffffffd905f]        # 208a20 <c_digits_lut>
  22f9c1:	48 8b 8d d8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x228]
  22f9c8:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  22f9cb:	48 8b 85 e8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x218]
  22f9d2:	88 10                	mov    BYTE PTR [rax],dl
                buf_index += 1;
  22f9d4:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  22f9d8:	48 83 c6 01          	add    rsi,0x1
  22f9dc:	0f 92 c2             	setb   dl
  22f9df:	48 89 b5 d0 fd ff ff 	mov    QWORD PTR [rbp-0x230],rsi
  22f9e6:	88 95 cf fd ff ff    	mov    BYTE PTR [rbp-0x231],dl
  22f9ec:	72 02                	jb     22f9f0 <u64toa+0x700>
  22f9ee:	eb 10                	jmp    22fa00 <u64toa+0x710>
  22f9f0:	48 8d 3d d1 37 01 00 	lea    rdi,[rip+0x137d1]        # 2431c8 <__unnamed_4>
  22f9f7:	31 c0                	xor    eax,eax
  22f9f9:	89 c6                	mov    esi,eax
  22f9fb:	e8 00 bc fd ff       	call   20b600 <panic>
  22fa00:	48 8b 85 d0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x230]
  22fa07:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            if (v >= 100) {
  22fa0b:	e9 0b fa ff ff       	jmp    22f41b <u64toa+0x12b>
  22fa10:	48 8d 3d e1 39 01 00 	lea    rdi,[rip+0x139e1]        # 2433f8 <__unnamed_20>
  22fa17:	31 c0                	xor    eax,eax
  22fa19:	89 c6                	mov    esi,eax
                buffer[buf_index] = c_digits_lut[d2];
  22fa1b:	e8 e0 bb fd ff       	call   20b600 <panic>
  22fa20:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  22fa27:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22fa2e:	48 03 01             	add    rax,QWORD PTR [rcx]
  22fa31:	8b 55 94             	mov    edx,DWORD PTR [rbp-0x6c]
  22fa34:	89 d6                	mov    esi,edx
  22fa36:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  22fa3d:	48 89 85 c0 fd ff ff 	mov    QWORD PTR [rbp-0x240],rax
  22fa44:	48 89 b5 b8 fd ff ff 	mov    QWORD PTR [rbp-0x248],rsi
  22fa4b:	72 10                	jb     22fa5d <u64toa+0x76d>
  22fa4d:	48 8d 3d a4 39 01 00 	lea    rdi,[rip+0x139a4]        # 2433f8 <__unnamed_20>
  22fa54:	31 c0                	xor    eax,eax
  22fa56:	89 c6                	mov    esi,eax
  22fa58:	e8 a3 bb fd ff       	call   20b600 <panic>
  22fa5d:	48 8d 05 bc 8f fd ff 	lea    rax,[rip+0xfffffffffffd8fbc]        # 208a20 <c_digits_lut>
  22fa64:	48 8b 8d b8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x248]
  22fa6b:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  22fa6e:	48 8b 85 c0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x240]
  22fa75:	88 10                	mov    BYTE PTR [rax],dl
                buf_index += 1;
  22fa77:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  22fa7b:	48 83 c6 01          	add    rsi,0x1
  22fa7f:	0f 92 c2             	setb   dl
  22fa82:	48 89 b5 b0 fd ff ff 	mov    QWORD PTR [rbp-0x250],rsi
  22fa89:	88 95 af fd ff ff    	mov    BYTE PTR [rbp-0x251],dl
  22fa8f:	72 02                	jb     22fa93 <u64toa+0x7a3>
  22fa91:	eb 10                	jmp    22faa3 <u64toa+0x7b3>
  22fa93:	48 8d 3d 2e 37 01 00 	lea    rdi,[rip+0x1372e]        # 2431c8 <__unnamed_4>
  22fa9a:	31 c0                	xor    eax,eax
  22fa9c:	89 c6                	mov    esi,eax
  22fa9e:	e8 5d bb fd ff       	call   20b600 <panic>
  22faa3:	48 8b 85 b0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x250]
  22faaa:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            if (v >= 10) {
  22faae:	e9 91 f9 ff ff       	jmp    22f444 <u64toa+0x154>
  22fab3:	48 8d 3d 3e 39 01 00 	lea    rdi,[rip+0x1393e]        # 2433f8 <__unnamed_20>
  22faba:	31 c0                	xor    eax,eax
  22fabc:	89 c6                	mov    esi,eax
            buffer[buf_index] = c_digits_lut[d2 + 1];
  22fabe:	e8 3d bb fd ff       	call   20b600 <panic>
  22fac3:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  22faca:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22fad1:	48 03 01             	add    rax,QWORD PTR [rcx]
  22fad4:	8b 55 94             	mov    edx,DWORD PTR [rbp-0x6c]
  22fad7:	83 c2 01             	add    edx,0x1
  22fada:	40 0f 92 c6          	setb   sil
  22fade:	48 89 85 a0 fd ff ff 	mov    QWORD PTR [rbp-0x260],rax
  22fae5:	89 95 9c fd ff ff    	mov    DWORD PTR [rbp-0x264],edx
  22faeb:	40 88 b5 9b fd ff ff 	mov    BYTE PTR [rbp-0x265],sil
  22faf2:	72 02                	jb     22faf6 <u64toa+0x806>
  22faf4:	eb 10                	jmp    22fb06 <u64toa+0x816>
  22faf6:	48 8d 3d cb 36 01 00 	lea    rdi,[rip+0x136cb]        # 2431c8 <__unnamed_4>
  22fafd:	31 c0                	xor    eax,eax
  22faff:	89 c6                	mov    esi,eax
  22fb01:	e8 fa ba fd ff       	call   20b600 <panic>
  22fb06:	8b 85 9c fd ff ff    	mov    eax,DWORD PTR [rbp-0x264]
  22fb0c:	89 c1                	mov    ecx,eax
  22fb0e:	89 ca                	mov    edx,ecx
  22fb10:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  22fb17:	48 89 95 90 fd ff ff 	mov    QWORD PTR [rbp-0x270],rdx
  22fb1e:	72 10                	jb     22fb30 <u64toa+0x840>
  22fb20:	48 8d 3d d1 38 01 00 	lea    rdi,[rip+0x138d1]        # 2433f8 <__unnamed_20>
  22fb27:	31 c0                	xor    eax,eax
  22fb29:	89 c6                	mov    esi,eax
  22fb2b:	e8 d0 ba fd ff       	call   20b600 <panic>
  22fb30:	48 8d 05 e9 8e fd ff 	lea    rax,[rip+0xfffffffffffd8ee9]        # 208a20 <c_digits_lut>
  22fb37:	48 8b 8d 90 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x270]
  22fb3e:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  22fb41:	48 8b 85 a0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x260]
  22fb48:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  22fb4a:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  22fb4e:	48 83 c6 01          	add    rsi,0x1
  22fb52:	0f 92 c2             	setb   dl
  22fb55:	48 89 b5 88 fd ff ff 	mov    QWORD PTR [rbp-0x278],rsi
  22fb5c:	88 95 87 fd ff ff    	mov    BYTE PTR [rbp-0x279],dl
  22fb62:	72 02                	jb     22fb66 <u64toa+0x876>
  22fb64:	eb 10                	jmp    22fb76 <u64toa+0x886>
  22fb66:	48 8d 3d 5b 36 01 00 	lea    rdi,[rip+0x1365b]        # 2431c8 <__unnamed_4>
  22fb6d:	31 c0                	xor    eax,eax
  22fb6f:	89 c6                	mov    esi,eax
  22fb71:	e8 8a ba fd ff       	call   20b600 <panic>
  22fb76:	48 8b 85 88 fd ff ff 	mov    rax,QWORD PTR [rbp-0x278]
  22fb7d:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        if (v < 10000) {
  22fb81:	e9 98 f9 ff ff       	jmp    22f51e <u64toa+0x22e>
  22fb86:	31 c0                	xor    eax,eax
  22fb88:	88 c1                	mov    cl,al
  22fb8a:	b8 10 27 00 00       	mov    eax,0x2710
            const b: u32 = v / 10000;
  22fb8f:	8b 95 c4 fe ff ff    	mov    edx,DWORD PTR [rbp-0x13c]
  22fb95:	89 85 80 fd ff ff    	mov    DWORD PTR [rbp-0x280],eax
  22fb9b:	89 d0                	mov    eax,edx
  22fb9d:	31 d2                	xor    edx,edx
  22fb9f:	8b b5 80 fd ff ff    	mov    esi,DWORD PTR [rbp-0x280]
  22fba5:	f7 f6                	div    esi
  22fba7:	89 45 90             	mov    DWORD PTR [rbp-0x70],eax
            const c: u32 = v % 10000;
  22fbaa:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
  22fbad:	f6 c1 01             	test   cl,0x1
  22fbb0:	89 85 7c fd ff ff    	mov    DWORD PTR [rbp-0x284],eax
  22fbb6:	75 46                	jne    22fbfe <u64toa+0x90e>
  22fbb8:	eb 10                	jmp    22fbca <u64toa+0x8da>
  22fbba:	48 8d 3d 7f 36 01 00 	lea    rdi,[rip+0x1367f]        # 243240 <__unnamed_7>
  22fbc1:	31 c0                	xor    eax,eax
  22fbc3:	89 c6                	mov    esi,eax
            const b: u32 = v / 10000;
  22fbc5:	e8 36 ba fd ff       	call   20b600 <panic>
  22fbca:	31 c0                	xor    eax,eax
  22fbcc:	88 c1                	mov    cl,al
  22fbce:	b8 10 27 00 00       	mov    eax,0x2710
            const c: u32 = v % 10000;
  22fbd3:	8b 95 7c fd ff ff    	mov    edx,DWORD PTR [rbp-0x284]
  22fbd9:	89 85 78 fd ff ff    	mov    DWORD PTR [rbp-0x288],eax
  22fbdf:	89 d0                	mov    eax,edx
  22fbe1:	31 d2                	xor    edx,edx
  22fbe3:	8b b5 78 fd ff ff    	mov    esi,DWORD PTR [rbp-0x288]
  22fbe9:	f7 f6                	div    esi
  22fbeb:	89 55 8c             	mov    DWORD PTR [rbp-0x74],edx
            const d1: u32 = (b / 100) << 1;
  22fbee:	8b 55 90             	mov    edx,DWORD PTR [rbp-0x70]
  22fbf1:	f6 c1 01             	test   cl,0x1
  22fbf4:	89 95 74 fd ff ff    	mov    DWORD PTR [rbp-0x28c],edx
  22fbfa:	75 49                	jne    22fc45 <u64toa+0x955>
  22fbfc:	eb 10                	jmp    22fc0e <u64toa+0x91e>
  22fbfe:	48 8d 3d f3 36 01 00 	lea    rdi,[rip+0x136f3]        # 2432f8 <__unnamed_15>
  22fc05:	31 c0                	xor    eax,eax
  22fc07:	89 c6                	mov    esi,eax
            const c: u32 = v % 10000;
  22fc09:	e8 f2 b9 fd ff       	call   20b600 <panic>
  22fc0e:	31 c0                	xor    eax,eax
  22fc10:	88 c1                	mov    cl,al
  22fc12:	b8 64 00 00 00       	mov    eax,0x64
            const d1: u32 = (b / 100) << 1;
  22fc17:	8b 95 74 fd ff ff    	mov    edx,DWORD PTR [rbp-0x28c]
  22fc1d:	89 85 70 fd ff ff    	mov    DWORD PTR [rbp-0x290],eax
  22fc23:	89 d0                	mov    eax,edx
  22fc25:	31 d2                	xor    edx,edx
  22fc27:	8b b5 70 fd ff ff    	mov    esi,DWORD PTR [rbp-0x290]
  22fc2d:	f7 f6                	div    esi
  22fc2f:	c1 e0 01             	shl    eax,0x1
  22fc32:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
            const d2: u32 = (b % 100) << 1;
  22fc35:	8b 45 90             	mov    eax,DWORD PTR [rbp-0x70]
  22fc38:	f6 c1 01             	test   cl,0x1
  22fc3b:	89 85 6c fd ff ff    	mov    DWORD PTR [rbp-0x294],eax
  22fc41:	75 49                	jne    22fc8c <u64toa+0x99c>
  22fc43:	eb 10                	jmp    22fc55 <u64toa+0x965>
  22fc45:	48 8d 3d f4 35 01 00 	lea    rdi,[rip+0x135f4]        # 243240 <__unnamed_7>
  22fc4c:	31 c0                	xor    eax,eax
  22fc4e:	89 c6                	mov    esi,eax
            const d1: u32 = (b / 100) << 1;
  22fc50:	e8 ab b9 fd ff       	call   20b600 <panic>
  22fc55:	31 c0                	xor    eax,eax
  22fc57:	88 c1                	mov    cl,al
  22fc59:	b8 64 00 00 00       	mov    eax,0x64
            const d2: u32 = (b % 100) << 1;
  22fc5e:	8b 95 6c fd ff ff    	mov    edx,DWORD PTR [rbp-0x294]
  22fc64:	89 85 68 fd ff ff    	mov    DWORD PTR [rbp-0x298],eax
  22fc6a:	89 d0                	mov    eax,edx
  22fc6c:	31 d2                	xor    edx,edx
  22fc6e:	8b b5 68 fd ff ff    	mov    esi,DWORD PTR [rbp-0x298]
  22fc74:	f7 f6                	div    esi
  22fc76:	c1 e2 01             	shl    edx,0x1
  22fc79:	89 55 84             	mov    DWORD PTR [rbp-0x7c],edx
            const d3: u32 = (c / 100) << 1;
  22fc7c:	8b 55 8c             	mov    edx,DWORD PTR [rbp-0x74]
  22fc7f:	f6 c1 01             	test   cl,0x1
  22fc82:	89 95 64 fd ff ff    	mov    DWORD PTR [rbp-0x29c],edx
  22fc88:	75 49                	jne    22fcd3 <u64toa+0x9e3>
  22fc8a:	eb 10                	jmp    22fc9c <u64toa+0x9ac>
  22fc8c:	48 8d 3d 65 36 01 00 	lea    rdi,[rip+0x13665]        # 2432f8 <__unnamed_15>
  22fc93:	31 c0                	xor    eax,eax
  22fc95:	89 c6                	mov    esi,eax
            const d2: u32 = (b % 100) << 1;
  22fc97:	e8 64 b9 fd ff       	call   20b600 <panic>
  22fc9c:	31 c0                	xor    eax,eax
  22fc9e:	88 c1                	mov    cl,al
  22fca0:	b8 64 00 00 00       	mov    eax,0x64
            const d3: u32 = (c / 100) << 1;
  22fca5:	8b 95 64 fd ff ff    	mov    edx,DWORD PTR [rbp-0x29c]
  22fcab:	89 85 60 fd ff ff    	mov    DWORD PTR [rbp-0x2a0],eax
  22fcb1:	89 d0                	mov    eax,edx
  22fcb3:	31 d2                	xor    edx,edx
  22fcb5:	8b b5 60 fd ff ff    	mov    esi,DWORD PTR [rbp-0x2a0]
  22fcbb:	f7 f6                	div    esi
  22fcbd:	c1 e0 01             	shl    eax,0x1
  22fcc0:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
            const d4: u32 = (c % 100) << 1;
  22fcc3:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
  22fcc6:	f6 c1 01             	test   cl,0x1
  22fcc9:	89 85 5c fd ff ff    	mov    DWORD PTR [rbp-0x2a4],eax
  22fccf:	75 4b                	jne    22fd1c <u64toa+0xa2c>
  22fcd1:	eb 10                	jmp    22fce3 <u64toa+0x9f3>
  22fcd3:	48 8d 3d 66 35 01 00 	lea    rdi,[rip+0x13566]        # 243240 <__unnamed_7>
  22fcda:	31 c0                	xor    eax,eax
  22fcdc:	89 c6                	mov    esi,eax
            const d3: u32 = (c / 100) << 1;
  22fcde:	e8 1d b9 fd ff       	call   20b600 <panic>
  22fce3:	b8 64 00 00 00       	mov    eax,0x64
            const d4: u32 = (c % 100) << 1;
  22fce8:	8b 8d 5c fd ff ff    	mov    ecx,DWORD PTR [rbp-0x2a4]
  22fcee:	89 85 58 fd ff ff    	mov    DWORD PTR [rbp-0x2a8],eax
  22fcf4:	89 c8                	mov    eax,ecx
  22fcf6:	31 d2                	xor    edx,edx
  22fcf8:	8b b5 58 fd ff ff    	mov    esi,DWORD PTR [rbp-0x2a8]
  22fcfe:	f7 f6                	div    esi
  22fd00:	c1 e2 01             	shl    edx,0x1
  22fd03:	89 95 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],edx
            if (value >= 10000000) {
  22fd09:	48 81 7d f0 80 96 98 	cmp    QWORD PTR [rbp-0x10],0x989680
  22fd10:	00 
  22fd11:	0f 83 69 f7 ff ff    	jae    22f480 <u64toa+0x190>
  22fd17:	e9 85 f7 ff ff       	jmp    22f4a1 <u64toa+0x1b1>
  22fd1c:	48 8d 3d d5 35 01 00 	lea    rdi,[rip+0x135d5]        # 2432f8 <__unnamed_15>
  22fd23:	31 c0                	xor    eax,eax
  22fd25:	89 c6                	mov    esi,eax
            const d4: u32 = (c % 100) << 1;
  22fd27:	e8 d4 b8 fd ff       	call   20b600 <panic>
  22fd2c:	48 8d 3d c5 36 01 00 	lea    rdi,[rip+0x136c5]        # 2433f8 <__unnamed_20>
  22fd33:	31 c0                	xor    eax,eax
  22fd35:	89 c6                	mov    esi,eax
                buffer[buf_index] = c_digits_lut[d1];
  22fd37:	e8 c4 b8 fd ff       	call   20b600 <panic>
  22fd3c:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  22fd43:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22fd4a:	48 03 01             	add    rax,QWORD PTR [rcx]
  22fd4d:	8b 55 88             	mov    edx,DWORD PTR [rbp-0x78]
  22fd50:	89 d6                	mov    esi,edx
  22fd52:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  22fd59:	48 89 85 50 fd ff ff 	mov    QWORD PTR [rbp-0x2b0],rax
  22fd60:	48 89 b5 48 fd ff ff 	mov    QWORD PTR [rbp-0x2b8],rsi
  22fd67:	72 10                	jb     22fd79 <u64toa+0xa89>
  22fd69:	48 8d 3d 88 36 01 00 	lea    rdi,[rip+0x13688]        # 2433f8 <__unnamed_20>
  22fd70:	31 c0                	xor    eax,eax
  22fd72:	89 c6                	mov    esi,eax
  22fd74:	e8 87 b8 fd ff       	call   20b600 <panic>
  22fd79:	48 8d 05 a0 8c fd ff 	lea    rax,[rip+0xfffffffffffd8ca0]        # 208a20 <c_digits_lut>
  22fd80:	48 8b 8d 48 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2b8]
  22fd87:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  22fd8a:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  22fd91:	88 10                	mov    BYTE PTR [rax],dl
                buf_index += 1;
  22fd93:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  22fd97:	48 83 c6 01          	add    rsi,0x1
  22fd9b:	0f 92 c2             	setb   dl
  22fd9e:	48 89 b5 40 fd ff ff 	mov    QWORD PTR [rbp-0x2c0],rsi
  22fda5:	88 95 3f fd ff ff    	mov    BYTE PTR [rbp-0x2c1],dl
  22fdab:	72 02                	jb     22fdaf <u64toa+0xabf>
  22fdad:	eb 10                	jmp    22fdbf <u64toa+0xacf>
  22fdaf:	48 8d 3d 12 34 01 00 	lea    rdi,[rip+0x13412]        # 2431c8 <__unnamed_4>
  22fdb6:	31 c0                	xor    eax,eax
  22fdb8:	89 c6                	mov    esi,eax
  22fdba:	e8 41 b8 fd ff       	call   20b600 <panic>
  22fdbf:	48 8b 85 40 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2c0]
  22fdc6:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            if (value >= 10000000) {
  22fdca:	e9 d4 f6 ff ff       	jmp    22f4a3 <u64toa+0x1b3>
  22fdcf:	48 8d 3d 22 36 01 00 	lea    rdi,[rip+0x13622]        # 2433f8 <__unnamed_20>
  22fdd6:	31 c0                	xor    eax,eax
  22fdd8:	89 c6                	mov    esi,eax
                buffer[buf_index] = c_digits_lut[d1 + 1];
  22fdda:	e8 21 b8 fd ff       	call   20b600 <panic>
  22fddf:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  22fde6:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22fded:	48 03 01             	add    rax,QWORD PTR [rcx]
  22fdf0:	8b 55 88             	mov    edx,DWORD PTR [rbp-0x78]
  22fdf3:	83 c2 01             	add    edx,0x1
  22fdf6:	40 0f 92 c6          	setb   sil
  22fdfa:	48 89 85 30 fd ff ff 	mov    QWORD PTR [rbp-0x2d0],rax
  22fe01:	89 95 2c fd ff ff    	mov    DWORD PTR [rbp-0x2d4],edx
  22fe07:	40 88 b5 2b fd ff ff 	mov    BYTE PTR [rbp-0x2d5],sil
  22fe0e:	72 02                	jb     22fe12 <u64toa+0xb22>
  22fe10:	eb 10                	jmp    22fe22 <u64toa+0xb32>
  22fe12:	48 8d 3d af 33 01 00 	lea    rdi,[rip+0x133af]        # 2431c8 <__unnamed_4>
  22fe19:	31 c0                	xor    eax,eax
  22fe1b:	89 c6                	mov    esi,eax
  22fe1d:	e8 de b7 fd ff       	call   20b600 <panic>
  22fe22:	8b 85 2c fd ff ff    	mov    eax,DWORD PTR [rbp-0x2d4]
  22fe28:	89 c1                	mov    ecx,eax
  22fe2a:	89 ca                	mov    edx,ecx
  22fe2c:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  22fe33:	48 89 95 20 fd ff ff 	mov    QWORD PTR [rbp-0x2e0],rdx
  22fe3a:	72 10                	jb     22fe4c <u64toa+0xb5c>
  22fe3c:	48 8d 3d b5 35 01 00 	lea    rdi,[rip+0x135b5]        # 2433f8 <__unnamed_20>
  22fe43:	31 c0                	xor    eax,eax
  22fe45:	89 c6                	mov    esi,eax
  22fe47:	e8 b4 b7 fd ff       	call   20b600 <panic>
  22fe4c:	48 8d 05 cd 8b fd ff 	lea    rax,[rip+0xfffffffffffd8bcd]        # 208a20 <c_digits_lut>
  22fe53:	48 8b 8d 20 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2e0]
  22fe5a:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  22fe5d:	48 8b 85 30 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2d0]
  22fe64:	88 10                	mov    BYTE PTR [rax],dl
                buf_index += 1;
  22fe66:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  22fe6a:	48 83 c6 01          	add    rsi,0x1
  22fe6e:	0f 92 c2             	setb   dl
  22fe71:	48 89 b5 18 fd ff ff 	mov    QWORD PTR [rbp-0x2e8],rsi
  22fe78:	88 95 17 fd ff ff    	mov    BYTE PTR [rbp-0x2e9],dl
  22fe7e:	72 02                	jb     22fe82 <u64toa+0xb92>
  22fe80:	eb 10                	jmp    22fe92 <u64toa+0xba2>
  22fe82:	48 8d 3d 3f 33 01 00 	lea    rdi,[rip+0x1333f]        # 2431c8 <__unnamed_4>
  22fe89:	31 c0                	xor    eax,eax
  22fe8b:	89 c6                	mov    esi,eax
  22fe8d:	e8 6e b7 fd ff       	call   20b600 <panic>
  22fe92:	48 8b 85 18 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2e8]
  22fe99:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            if (value >= 1000000) {
  22fe9d:	e9 2e f6 ff ff       	jmp    22f4d0 <u64toa+0x1e0>
  22fea2:	48 8d 3d 4f 35 01 00 	lea    rdi,[rip+0x1354f]        # 2433f8 <__unnamed_20>
  22fea9:	31 c0                	xor    eax,eax
  22feab:	89 c6                	mov    esi,eax
                buffer[buf_index] = c_digits_lut[d2];
  22fead:	e8 4e b7 fd ff       	call   20b600 <panic>
  22feb2:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
  22feb9:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22fec0:	48 03 01             	add    rax,QWORD PTR [rcx]
  22fec3:	8b 55 84             	mov    edx,DWORD PTR [rbp-0x7c]
  22fec6:	89 d6                	mov    esi,edx
  22fec8:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  22fecf:	48 89 85 08 fd ff ff 	mov    QWORD PTR [rbp-0x2f8],rax
  22fed6:	48 89 b5 00 fd ff ff 	mov    QWORD PTR [rbp-0x300],rsi
  22fedd:	72 10                	jb     22feef <u64toa+0xbff>
  22fedf:	48 8d 3d 12 35 01 00 	lea    rdi,[rip+0x13512]        # 2433f8 <__unnamed_20>
  22fee6:	31 c0                	xor    eax,eax
  22fee8:	89 c6                	mov    esi,eax
  22feea:	e8 11 b7 fd ff       	call   20b600 <panic>
  22feef:	48 8d 05 2a 8b fd ff 	lea    rax,[rip+0xfffffffffffd8b2a]        # 208a20 <c_digits_lut>
  22fef6:	48 8b 8d 00 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x300]
  22fefd:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  22ff00:	48 8b 85 08 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2f8]
  22ff07:	88 10                	mov    BYTE PTR [rax],dl
                buf_index += 1;
  22ff09:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  22ff0d:	48 83 c6 01          	add    rsi,0x1
  22ff11:	0f 92 c2             	setb   dl
  22ff14:	48 89 b5 f8 fc ff ff 	mov    QWORD PTR [rbp-0x308],rsi
  22ff1b:	88 95 f7 fc ff ff    	mov    BYTE PTR [rbp-0x309],dl
  22ff21:	72 02                	jb     22ff25 <u64toa+0xc35>
  22ff23:	eb 10                	jmp    22ff35 <u64toa+0xc45>
  22ff25:	48 8d 3d 9c 32 01 00 	lea    rdi,[rip+0x1329c]        # 2431c8 <__unnamed_4>
  22ff2c:	31 c0                	xor    eax,eax
  22ff2e:	89 c6                	mov    esi,eax
  22ff30:	e8 cb b6 fd ff       	call   20b600 <panic>
  22ff35:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
  22ff3c:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            if (value >= 100000) {
  22ff40:	e9 b8 f5 ff ff       	jmp    22f4fd <u64toa+0x20d>
  22ff45:	48 8d 3d ac 34 01 00 	lea    rdi,[rip+0x134ac]        # 2433f8 <__unnamed_20>
  22ff4c:	31 c0                	xor    eax,eax
  22ff4e:	89 c6                	mov    esi,eax
            buffer[buf_index] = c_digits_lut[d2 + 1];
  22ff50:	e8 ab b6 fd ff       	call   20b600 <panic>
  22ff55:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
  22ff5c:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22ff63:	48 03 01             	add    rax,QWORD PTR [rcx]
  22ff66:	8b 55 84             	mov    edx,DWORD PTR [rbp-0x7c]
  22ff69:	83 c2 01             	add    edx,0x1
  22ff6c:	40 0f 92 c6          	setb   sil
  22ff70:	48 89 85 e8 fc ff ff 	mov    QWORD PTR [rbp-0x318],rax
  22ff77:	89 95 e4 fc ff ff    	mov    DWORD PTR [rbp-0x31c],edx
  22ff7d:	40 88 b5 e3 fc ff ff 	mov    BYTE PTR [rbp-0x31d],sil
  22ff84:	72 02                	jb     22ff88 <u64toa+0xc98>
  22ff86:	eb 10                	jmp    22ff98 <u64toa+0xca8>
  22ff88:	48 8d 3d 39 32 01 00 	lea    rdi,[rip+0x13239]        # 2431c8 <__unnamed_4>
  22ff8f:	31 c0                	xor    eax,eax
  22ff91:	89 c6                	mov    esi,eax
  22ff93:	e8 68 b6 fd ff       	call   20b600 <panic>
  22ff98:	8b 85 e4 fc ff ff    	mov    eax,DWORD PTR [rbp-0x31c]
  22ff9e:	89 c1                	mov    ecx,eax
  22ffa0:	89 ca                	mov    edx,ecx
  22ffa2:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  22ffa9:	48 89 95 d8 fc ff ff 	mov    QWORD PTR [rbp-0x328],rdx
  22ffb0:	72 10                	jb     22ffc2 <u64toa+0xcd2>
  22ffb2:	48 8d 3d 3f 34 01 00 	lea    rdi,[rip+0x1343f]        # 2433f8 <__unnamed_20>
  22ffb9:	31 c0                	xor    eax,eax
  22ffbb:	89 c6                	mov    esi,eax
  22ffbd:	e8 3e b6 fd ff       	call   20b600 <panic>
  22ffc2:	48 8d 05 57 8a fd ff 	lea    rax,[rip+0xfffffffffffd8a57]        # 208a20 <c_digits_lut>
  22ffc9:	48 8b 8d d8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x328]
  22ffd0:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  22ffd3:	48 8b 85 e8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x318]
  22ffda:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  22ffdc:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  22ffe0:	48 83 c6 01          	add    rsi,0x1
  22ffe4:	0f 92 c2             	setb   dl
  22ffe7:	48 89 b5 d0 fc ff ff 	mov    QWORD PTR [rbp-0x330],rsi
  22ffee:	88 95 cf fc ff ff    	mov    BYTE PTR [rbp-0x331],dl
  22fff4:	72 02                	jb     22fff8 <u64toa+0xd08>
  22fff6:	eb 10                	jmp    230008 <u64toa+0xd18>
  22fff8:	48 8d 3d c9 31 01 00 	lea    rdi,[rip+0x131c9]        # 2431c8 <__unnamed_4>
  22ffff:	31 c0                	xor    eax,eax
  230001:	89 c6                	mov    esi,eax
  230003:	e8 f8 b5 fd ff       	call   20b600 <panic>
  230008:	48 8b 85 d0 fc ff ff 	mov    rax,QWORD PTR [rbp-0x330]
  23000f:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            buffer[buf_index] = c_digits_lut[d3];
  230013:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  230017:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  23001e:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  230022:	48 89 8d c0 fc ff ff 	mov    QWORD PTR [rbp-0x340],rcx
  230029:	72 10                	jb     23003b <u64toa+0xd4b>
  23002b:	48 8d 3d c6 33 01 00 	lea    rdi,[rip+0x133c6]        # 2433f8 <__unnamed_20>
  230032:	31 c0                	xor    eax,eax
  230034:	89 c6                	mov    esi,eax
  230036:	e8 c5 b5 fd ff       	call   20b600 <panic>
  23003b:	48 8b 85 c0 fc ff ff 	mov    rax,QWORD PTR [rbp-0x340]
  230042:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  230049:	48 03 01             	add    rax,QWORD PTR [rcx]
  23004c:	8b 55 80             	mov    edx,DWORD PTR [rbp-0x80]
  23004f:	89 d6                	mov    esi,edx
  230051:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  230058:	48 89 85 b8 fc ff ff 	mov    QWORD PTR [rbp-0x348],rax
  23005f:	48 89 b5 b0 fc ff ff 	mov    QWORD PTR [rbp-0x350],rsi
  230066:	72 10                	jb     230078 <u64toa+0xd88>
  230068:	48 8d 3d 89 33 01 00 	lea    rdi,[rip+0x13389]        # 2433f8 <__unnamed_20>
  23006f:	31 c0                	xor    eax,eax
  230071:	89 c6                	mov    esi,eax
  230073:	e8 88 b5 fd ff       	call   20b600 <panic>
  230078:	48 8d 05 a1 89 fd ff 	lea    rax,[rip+0xfffffffffffd89a1]        # 208a20 <c_digits_lut>
  23007f:	48 8b 8d b0 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x350]
  230086:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  230089:	48 8b 85 b8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x348]
  230090:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  230092:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  230096:	48 83 c6 01          	add    rsi,0x1
  23009a:	0f 92 c2             	setb   dl
  23009d:	48 89 b5 a8 fc ff ff 	mov    QWORD PTR [rbp-0x358],rsi
  2300a4:	88 95 a7 fc ff ff    	mov    BYTE PTR [rbp-0x359],dl
  2300aa:	72 02                	jb     2300ae <u64toa+0xdbe>
  2300ac:	eb 10                	jmp    2300be <u64toa+0xdce>
  2300ae:	48 8d 3d 13 31 01 00 	lea    rdi,[rip+0x13113]        # 2431c8 <__unnamed_4>
  2300b5:	31 c0                	xor    eax,eax
  2300b7:	89 c6                	mov    esi,eax
  2300b9:	e8 42 b5 fd ff       	call   20b600 <panic>
  2300be:	48 8b 85 a8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x358]
  2300c5:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            buffer[buf_index] = c_digits_lut[d3 + 1];
  2300c9:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  2300cd:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  2300d4:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  2300d8:	48 89 8d 98 fc ff ff 	mov    QWORD PTR [rbp-0x368],rcx
  2300df:	72 10                	jb     2300f1 <u64toa+0xe01>
  2300e1:	48 8d 3d 10 33 01 00 	lea    rdi,[rip+0x13310]        # 2433f8 <__unnamed_20>
  2300e8:	31 c0                	xor    eax,eax
  2300ea:	89 c6                	mov    esi,eax
  2300ec:	e8 0f b5 fd ff       	call   20b600 <panic>
  2300f1:	48 8b 85 98 fc ff ff 	mov    rax,QWORD PTR [rbp-0x368]
  2300f8:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  2300ff:	48 03 01             	add    rax,QWORD PTR [rcx]
  230102:	8b 55 80             	mov    edx,DWORD PTR [rbp-0x80]
  230105:	83 c2 01             	add    edx,0x1
  230108:	40 0f 92 c6          	setb   sil
  23010c:	48 89 85 90 fc ff ff 	mov    QWORD PTR [rbp-0x370],rax
  230113:	89 95 8c fc ff ff    	mov    DWORD PTR [rbp-0x374],edx
  230119:	40 88 b5 8b fc ff ff 	mov    BYTE PTR [rbp-0x375],sil
  230120:	72 02                	jb     230124 <u64toa+0xe34>
  230122:	eb 10                	jmp    230134 <u64toa+0xe44>
  230124:	48 8d 3d 9d 30 01 00 	lea    rdi,[rip+0x1309d]        # 2431c8 <__unnamed_4>
  23012b:	31 c0                	xor    eax,eax
  23012d:	89 c6                	mov    esi,eax
  23012f:	e8 cc b4 fd ff       	call   20b600 <panic>
  230134:	8b 85 8c fc ff ff    	mov    eax,DWORD PTR [rbp-0x374]
  23013a:	89 c1                	mov    ecx,eax
  23013c:	89 ca                	mov    edx,ecx
  23013e:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  230145:	48 89 95 80 fc ff ff 	mov    QWORD PTR [rbp-0x380],rdx
  23014c:	72 10                	jb     23015e <u64toa+0xe6e>
  23014e:	48 8d 3d a3 32 01 00 	lea    rdi,[rip+0x132a3]        # 2433f8 <__unnamed_20>
  230155:	31 c0                	xor    eax,eax
  230157:	89 c6                	mov    esi,eax
  230159:	e8 a2 b4 fd ff       	call   20b600 <panic>
  23015e:	48 8d 05 bb 88 fd ff 	lea    rax,[rip+0xfffffffffffd88bb]        # 208a20 <c_digits_lut>
  230165:	48 8b 8d 80 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x380]
  23016c:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  23016f:	48 8b 85 90 fc ff ff 	mov    rax,QWORD PTR [rbp-0x370]
  230176:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  230178:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  23017c:	48 83 c6 01          	add    rsi,0x1
  230180:	0f 92 c2             	setb   dl
  230183:	48 89 b5 78 fc ff ff 	mov    QWORD PTR [rbp-0x388],rsi
  23018a:	88 95 77 fc ff ff    	mov    BYTE PTR [rbp-0x389],dl
  230190:	72 02                	jb     230194 <u64toa+0xea4>
  230192:	eb 10                	jmp    2301a4 <u64toa+0xeb4>
  230194:	48 8d 3d 2d 30 01 00 	lea    rdi,[rip+0x1302d]        # 2431c8 <__unnamed_4>
  23019b:	31 c0                	xor    eax,eax
  23019d:	89 c6                	mov    esi,eax
  23019f:	e8 5c b4 fd ff       	call   20b600 <panic>
  2301a4:	48 8b 85 78 fc ff ff 	mov    rax,QWORD PTR [rbp-0x388]
  2301ab:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            buffer[buf_index] = c_digits_lut[d4];
  2301af:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  2301b3:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  2301ba:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  2301be:	48 89 8d 68 fc ff ff 	mov    QWORD PTR [rbp-0x398],rcx
  2301c5:	72 10                	jb     2301d7 <u64toa+0xee7>
  2301c7:	48 8d 3d 2a 32 01 00 	lea    rdi,[rip+0x1322a]        # 2433f8 <__unnamed_20>
  2301ce:	31 c0                	xor    eax,eax
  2301d0:	89 c6                	mov    esi,eax
  2301d2:	e8 29 b4 fd ff       	call   20b600 <panic>
  2301d7:	48 8b 85 68 fc ff ff 	mov    rax,QWORD PTR [rbp-0x398]
  2301de:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  2301e5:	48 03 01             	add    rax,QWORD PTR [rcx]
  2301e8:	8b 95 7c ff ff ff    	mov    edx,DWORD PTR [rbp-0x84]
  2301ee:	89 d6                	mov    esi,edx
  2301f0:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  2301f7:	48 89 85 60 fc ff ff 	mov    QWORD PTR [rbp-0x3a0],rax
  2301fe:	48 89 b5 58 fc ff ff 	mov    QWORD PTR [rbp-0x3a8],rsi
  230205:	72 10                	jb     230217 <u64toa+0xf27>
  230207:	48 8d 3d ea 31 01 00 	lea    rdi,[rip+0x131ea]        # 2433f8 <__unnamed_20>
  23020e:	31 c0                	xor    eax,eax
  230210:	89 c6                	mov    esi,eax
  230212:	e8 e9 b3 fd ff       	call   20b600 <panic>
  230217:	48 8d 05 02 88 fd ff 	lea    rax,[rip+0xfffffffffffd8802]        # 208a20 <c_digits_lut>
  23021e:	48 8b 8d 58 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3a8]
  230225:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  230228:	48 8b 85 60 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3a0]
  23022f:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  230231:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  230235:	48 83 c6 01          	add    rsi,0x1
  230239:	0f 92 c2             	setb   dl
  23023c:	48 89 b5 50 fc ff ff 	mov    QWORD PTR [rbp-0x3b0],rsi
  230243:	88 95 4f fc ff ff    	mov    BYTE PTR [rbp-0x3b1],dl
  230249:	72 02                	jb     23024d <u64toa+0xf5d>
  23024b:	eb 10                	jmp    23025d <u64toa+0xf6d>
  23024d:	48 8d 3d 74 2f 01 00 	lea    rdi,[rip+0x12f74]        # 2431c8 <__unnamed_4>
  230254:	31 c0                	xor    eax,eax
  230256:	89 c6                	mov    esi,eax
  230258:	e8 a3 b3 fd ff       	call   20b600 <panic>
  23025d:	48 8b 85 50 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3b0]
  230264:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            buffer[buf_index] = c_digits_lut[d4 + 1];
  230268:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  23026c:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  230273:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  230277:	48 89 8d 40 fc ff ff 	mov    QWORD PTR [rbp-0x3c0],rcx
  23027e:	72 10                	jb     230290 <u64toa+0xfa0>
  230280:	48 8d 3d 71 31 01 00 	lea    rdi,[rip+0x13171]        # 2433f8 <__unnamed_20>
  230287:	31 c0                	xor    eax,eax
  230289:	89 c6                	mov    esi,eax
  23028b:	e8 70 b3 fd ff       	call   20b600 <panic>
  230290:	48 8b 85 40 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3c0]
  230297:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  23029e:	48 03 01             	add    rax,QWORD PTR [rcx]
  2302a1:	8b 95 7c ff ff ff    	mov    edx,DWORD PTR [rbp-0x84]
  2302a7:	83 c2 01             	add    edx,0x1
  2302aa:	40 0f 92 c6          	setb   sil
  2302ae:	48 89 85 38 fc ff ff 	mov    QWORD PTR [rbp-0x3c8],rax
  2302b5:	89 95 34 fc ff ff    	mov    DWORD PTR [rbp-0x3cc],edx
  2302bb:	40 88 b5 33 fc ff ff 	mov    BYTE PTR [rbp-0x3cd],sil
  2302c2:	72 02                	jb     2302c6 <u64toa+0xfd6>
  2302c4:	eb 10                	jmp    2302d6 <u64toa+0xfe6>
  2302c6:	48 8d 3d fb 2e 01 00 	lea    rdi,[rip+0x12efb]        # 2431c8 <__unnamed_4>
  2302cd:	31 c0                	xor    eax,eax
  2302cf:	89 c6                	mov    esi,eax
  2302d1:	e8 2a b3 fd ff       	call   20b600 <panic>
  2302d6:	8b 85 34 fc ff ff    	mov    eax,DWORD PTR [rbp-0x3cc]
  2302dc:	89 c1                	mov    ecx,eax
  2302de:	89 ca                	mov    edx,ecx
  2302e0:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  2302e7:	48 89 95 28 fc ff ff 	mov    QWORD PTR [rbp-0x3d8],rdx
  2302ee:	72 10                	jb     230300 <u64toa+0x1010>
  2302f0:	48 8d 3d 01 31 01 00 	lea    rdi,[rip+0x13101]        # 2433f8 <__unnamed_20>
  2302f7:	31 c0                	xor    eax,eax
  2302f9:	89 c6                	mov    esi,eax
  2302fb:	e8 00 b3 fd ff       	call   20b600 <panic>
  230300:	48 8d 05 19 87 fd ff 	lea    rax,[rip+0xfffffffffffd8719]        # 208a20 <c_digits_lut>
  230307:	48 8b 8d 28 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3d8]
  23030e:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  230311:	48 8b 85 38 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3c8]
  230318:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  23031a:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  23031e:	48 83 c6 01          	add    rsi,0x1
  230322:	0f 92 c2             	setb   dl
  230325:	48 89 b5 20 fc ff ff 	mov    QWORD PTR [rbp-0x3e0],rsi
  23032c:	88 95 1f fc ff ff    	mov    BYTE PTR [rbp-0x3e1],dl
  230332:	72 02                	jb     230336 <u64toa+0x1046>
  230334:	eb 10                	jmp    230346 <u64toa+0x1056>
  230336:	48 8d 3d 8b 2e 01 00 	lea    rdi,[rip+0x12e8b]        # 2431c8 <__unnamed_4>
  23033d:	31 c0                	xor    eax,eax
  23033f:	89 c6                	mov    esi,eax
  230341:	e8 ba b2 fd ff       	call   20b600 <panic>
  230346:	48 8b 85 20 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e0]
  23034d:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        if (v < 10000) {
  230351:	e9 c8 f1 ff ff       	jmp    22f51e <u64toa+0x22e>
  230356:	b8 00 e1 f5 05       	mov    eax,0x5f5e100
  23035b:	89 c1                	mov    ecx,eax
        const v0: u32 = @intCast(u32, value / kTen8);
  23035d:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
  230364:	31 d2                	xor    edx,edx
  230366:	48 f7 f1             	div    rcx
  230369:	89 c6                	mov    esi,eax
  23036b:	89 f7                	mov    edi,esi
  23036d:	89 f9                	mov    ecx,edi
  23036f:	48 39 c8             	cmp    rax,rcx
  230372:	89 b5 18 fc ff ff    	mov    DWORD PTR [rbp-0x3e8],esi
  230378:	74 12                	je     23038c <u64toa+0x109c>
  23037a:	eb 32                	jmp    2303ae <u64toa+0x10be>
  23037c:	48 8d 3d bd 2e 01 00 	lea    rdi,[rip+0x12ebd]        # 243240 <__unnamed_7>
  230383:	31 c0                	xor    eax,eax
  230385:	89 c6                	mov    esi,eax
  230387:	e8 74 b2 fd ff       	call   20b600 <panic>
  23038c:	31 c0                	xor    eax,eax
  23038e:	88 c1                	mov    cl,al
  230390:	8b 85 18 fc ff ff    	mov    eax,DWORD PTR [rbp-0x3e8]
  230396:	89 85 78 ff ff ff    	mov    DWORD PTR [rbp-0x88],eax
        const v1: u32 = @intCast(u32, value % kTen8);
  23039c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2303a0:	f6 c1 01             	test   cl,0x1
  2303a3:	48 89 85 10 fc ff ff 	mov    QWORD PTR [rbp-0x3f0],rax
  2303aa:	75 38                	jne    2303e4 <u64toa+0x10f4>
  2303ac:	eb 10                	jmp    2303be <u64toa+0x10ce>
  2303ae:	48 8d 3d f3 30 01 00 	lea    rdi,[rip+0x130f3]        # 2434a8 <__unnamed_22>
  2303b5:	31 c0                	xor    eax,eax
  2303b7:	89 c6                	mov    esi,eax
        const v0: u32 = @intCast(u32, value / kTen8);
  2303b9:	e8 42 b2 fd ff       	call   20b600 <panic>
  2303be:	b8 00 e1 f5 05       	mov    eax,0x5f5e100
  2303c3:	89 c1                	mov    ecx,eax
        const v1: u32 = @intCast(u32, value % kTen8);
  2303c5:	48 8b 85 10 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3f0]
  2303cc:	31 d2                	xor    edx,edx
  2303ce:	48 f7 f1             	div    rcx
  2303d1:	89 d6                	mov    esi,edx
  2303d3:	89 f7                	mov    edi,esi
  2303d5:	89 f9                	mov    ecx,edi
  2303d7:	48 39 ca             	cmp    rdx,rcx
  2303da:	89 b5 0c fc ff ff    	mov    DWORD PTR [rbp-0x3f4],esi
  2303e0:	74 12                	je     2303f4 <u64toa+0x1104>
  2303e2:	eb 33                	jmp    230417 <u64toa+0x1127>
  2303e4:	48 8d 3d 0d 2f 01 00 	lea    rdi,[rip+0x12f0d]        # 2432f8 <__unnamed_15>
  2303eb:	31 c0                	xor    eax,eax
  2303ed:	89 c6                	mov    esi,eax
  2303ef:	e8 0c b2 fd ff       	call   20b600 <panic>
  2303f4:	31 c0                	xor    eax,eax
  2303f6:	88 c1                	mov    cl,al
  2303f8:	8b 85 0c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3f4]
  2303fe:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
        const b0: u32 = v0 / 10000;
  230404:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
  23040a:	f6 c1 01             	test   cl,0x1
  23040d:	89 85 08 fc ff ff    	mov    DWORD PTR [rbp-0x3f8],eax
  230413:	75 4c                	jne    230461 <u64toa+0x1171>
  230415:	eb 10                	jmp    230427 <u64toa+0x1137>
  230417:	48 8d 3d 8a 30 01 00 	lea    rdi,[rip+0x1308a]        # 2434a8 <__unnamed_22>
  23041e:	31 c0                	xor    eax,eax
  230420:	89 c6                	mov    esi,eax
        const v1: u32 = @intCast(u32, value % kTen8);
  230422:	e8 d9 b1 fd ff       	call   20b600 <panic>
  230427:	31 c0                	xor    eax,eax
  230429:	88 c1                	mov    cl,al
  23042b:	b8 10 27 00 00       	mov    eax,0x2710
        const b0: u32 = v0 / 10000;
  230430:	8b 95 08 fc ff ff    	mov    edx,DWORD PTR [rbp-0x3f8]
  230436:	89 85 04 fc ff ff    	mov    DWORD PTR [rbp-0x3fc],eax
  23043c:	89 d0                	mov    eax,edx
  23043e:	31 d2                	xor    edx,edx
  230440:	8b b5 04 fc ff ff    	mov    esi,DWORD PTR [rbp-0x3fc]
  230446:	f7 f6                	div    esi
  230448:	89 85 70 ff ff ff    	mov    DWORD PTR [rbp-0x90],eax
        const c0: u32 = v0 % 10000;
  23044e:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
  230454:	f6 c1 01             	test   cl,0x1
  230457:	89 85 00 fc ff ff    	mov    DWORD PTR [rbp-0x400],eax
  23045d:	75 4c                	jne    2304ab <u64toa+0x11bb>
  23045f:	eb 10                	jmp    230471 <u64toa+0x1181>
  230461:	48 8d 3d d8 2d 01 00 	lea    rdi,[rip+0x12dd8]        # 243240 <__unnamed_7>
  230468:	31 c0                	xor    eax,eax
  23046a:	89 c6                	mov    esi,eax
        const b0: u32 = v0 / 10000;
  23046c:	e8 8f b1 fd ff       	call   20b600 <panic>
  230471:	31 c0                	xor    eax,eax
  230473:	88 c1                	mov    cl,al
  230475:	b8 10 27 00 00       	mov    eax,0x2710
        const c0: u32 = v0 % 10000;
  23047a:	8b 95 00 fc ff ff    	mov    edx,DWORD PTR [rbp-0x400]
  230480:	89 85 fc fb ff ff    	mov    DWORD PTR [rbp-0x404],eax
  230486:	89 d0                	mov    eax,edx
  230488:	31 d2                	xor    edx,edx
  23048a:	8b b5 fc fb ff ff    	mov    esi,DWORD PTR [rbp-0x404]
  230490:	f7 f6                	div    esi
  230492:	89 95 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],edx
        const d1: u32 = (b0 / 100) << 1;
  230498:	8b 95 70 ff ff ff    	mov    edx,DWORD PTR [rbp-0x90]
  23049e:	f6 c1 01             	test   cl,0x1
  2304a1:	89 95 f8 fb ff ff    	mov    DWORD PTR [rbp-0x408],edx
  2304a7:	75 4f                	jne    2304f8 <u64toa+0x1208>
  2304a9:	eb 10                	jmp    2304bb <u64toa+0x11cb>
  2304ab:	48 8d 3d 46 2e 01 00 	lea    rdi,[rip+0x12e46]        # 2432f8 <__unnamed_15>
  2304b2:	31 c0                	xor    eax,eax
  2304b4:	89 c6                	mov    esi,eax
        const c0: u32 = v0 % 10000;
  2304b6:	e8 45 b1 fd ff       	call   20b600 <panic>
  2304bb:	31 c0                	xor    eax,eax
  2304bd:	88 c1                	mov    cl,al
  2304bf:	b8 64 00 00 00       	mov    eax,0x64
        const d1: u32 = (b0 / 100) << 1;
  2304c4:	8b 95 f8 fb ff ff    	mov    edx,DWORD PTR [rbp-0x408]
  2304ca:	89 85 f4 fb ff ff    	mov    DWORD PTR [rbp-0x40c],eax
  2304d0:	89 d0                	mov    eax,edx
  2304d2:	31 d2                	xor    edx,edx
  2304d4:	8b b5 f4 fb ff ff    	mov    esi,DWORD PTR [rbp-0x40c]
  2304da:	f7 f6                	div    esi
  2304dc:	c1 e0 01             	shl    eax,0x1
  2304df:	89 85 68 ff ff ff    	mov    DWORD PTR [rbp-0x98],eax
        const d2: u32 = (b0 % 100) << 1;
  2304e5:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [rbp-0x90]
  2304eb:	f6 c1 01             	test   cl,0x1
  2304ee:	89 85 f0 fb ff ff    	mov    DWORD PTR [rbp-0x410],eax
  2304f4:	75 4f                	jne    230545 <u64toa+0x1255>
  2304f6:	eb 10                	jmp    230508 <u64toa+0x1218>
  2304f8:	48 8d 3d 41 2d 01 00 	lea    rdi,[rip+0x12d41]        # 243240 <__unnamed_7>
  2304ff:	31 c0                	xor    eax,eax
  230501:	89 c6                	mov    esi,eax
        const d1: u32 = (b0 / 100) << 1;
  230503:	e8 f8 b0 fd ff       	call   20b600 <panic>
  230508:	31 c0                	xor    eax,eax
  23050a:	88 c1                	mov    cl,al
  23050c:	b8 64 00 00 00       	mov    eax,0x64
        const d2: u32 = (b0 % 100) << 1;
  230511:	8b 95 f0 fb ff ff    	mov    edx,DWORD PTR [rbp-0x410]
  230517:	89 85 ec fb ff ff    	mov    DWORD PTR [rbp-0x414],eax
  23051d:	89 d0                	mov    eax,edx
  23051f:	31 d2                	xor    edx,edx
  230521:	8b b5 ec fb ff ff    	mov    esi,DWORD PTR [rbp-0x414]
  230527:	f7 f6                	div    esi
  230529:	c1 e2 01             	shl    edx,0x1
  23052c:	89 95 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],edx
        const d3: u32 = (c0 / 100) << 1;
  230532:	8b 95 6c ff ff ff    	mov    edx,DWORD PTR [rbp-0x94]
  230538:	f6 c1 01             	test   cl,0x1
  23053b:	89 95 e8 fb ff ff    	mov    DWORD PTR [rbp-0x418],edx
  230541:	75 4f                	jne    230592 <u64toa+0x12a2>
  230543:	eb 10                	jmp    230555 <u64toa+0x1265>
  230545:	48 8d 3d ac 2d 01 00 	lea    rdi,[rip+0x12dac]        # 2432f8 <__unnamed_15>
  23054c:	31 c0                	xor    eax,eax
  23054e:	89 c6                	mov    esi,eax
        const d2: u32 = (b0 % 100) << 1;
  230550:	e8 ab b0 fd ff       	call   20b600 <panic>
  230555:	31 c0                	xor    eax,eax
  230557:	88 c1                	mov    cl,al
  230559:	b8 64 00 00 00       	mov    eax,0x64
        const d3: u32 = (c0 / 100) << 1;
  23055e:	8b 95 e8 fb ff ff    	mov    edx,DWORD PTR [rbp-0x418]
  230564:	89 85 e4 fb ff ff    	mov    DWORD PTR [rbp-0x41c],eax
  23056a:	89 d0                	mov    eax,edx
  23056c:	31 d2                	xor    edx,edx
  23056e:	8b b5 e4 fb ff ff    	mov    esi,DWORD PTR [rbp-0x41c]
  230574:	f7 f6                	div    esi
  230576:	c1 e0 01             	shl    eax,0x1
  230579:	89 85 60 ff ff ff    	mov    DWORD PTR [rbp-0xa0],eax
        const d4: u32 = (c0 % 100) << 1;
  23057f:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
  230585:	f6 c1 01             	test   cl,0x1
  230588:	89 85 e0 fb ff ff    	mov    DWORD PTR [rbp-0x420],eax
  23058e:	75 4f                	jne    2305df <u64toa+0x12ef>
  230590:	eb 10                	jmp    2305a2 <u64toa+0x12b2>
  230592:	48 8d 3d a7 2c 01 00 	lea    rdi,[rip+0x12ca7]        # 243240 <__unnamed_7>
  230599:	31 c0                	xor    eax,eax
  23059b:	89 c6                	mov    esi,eax
        const d3: u32 = (c0 / 100) << 1;
  23059d:	e8 5e b0 fd ff       	call   20b600 <panic>
  2305a2:	31 c0                	xor    eax,eax
  2305a4:	88 c1                	mov    cl,al
  2305a6:	b8 64 00 00 00       	mov    eax,0x64
        const d4: u32 = (c0 % 100) << 1;
  2305ab:	8b 95 e0 fb ff ff    	mov    edx,DWORD PTR [rbp-0x420]
  2305b1:	89 85 dc fb ff ff    	mov    DWORD PTR [rbp-0x424],eax
  2305b7:	89 d0                	mov    eax,edx
  2305b9:	31 d2                	xor    edx,edx
  2305bb:	8b b5 dc fb ff ff    	mov    esi,DWORD PTR [rbp-0x424]
  2305c1:	f7 f6                	div    esi
  2305c3:	c1 e2 01             	shl    edx,0x1
  2305c6:	89 95 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],edx
        const b1: u32 = v1 / 10000;
  2305cc:	8b 95 74 ff ff ff    	mov    edx,DWORD PTR [rbp-0x8c]
  2305d2:	f6 c1 01             	test   cl,0x1
  2305d5:	89 95 d8 fb ff ff    	mov    DWORD PTR [rbp-0x428],edx
  2305db:	75 4c                	jne    230629 <u64toa+0x1339>
  2305dd:	eb 10                	jmp    2305ef <u64toa+0x12ff>
  2305df:	48 8d 3d 12 2d 01 00 	lea    rdi,[rip+0x12d12]        # 2432f8 <__unnamed_15>
  2305e6:	31 c0                	xor    eax,eax
  2305e8:	89 c6                	mov    esi,eax
        const d4: u32 = (c0 % 100) << 1;
  2305ea:	e8 11 b0 fd ff       	call   20b600 <panic>
  2305ef:	31 c0                	xor    eax,eax
  2305f1:	88 c1                	mov    cl,al
  2305f3:	b8 10 27 00 00       	mov    eax,0x2710
        const b1: u32 = v1 / 10000;
  2305f8:	8b 95 d8 fb ff ff    	mov    edx,DWORD PTR [rbp-0x428]
  2305fe:	89 85 d4 fb ff ff    	mov    DWORD PTR [rbp-0x42c],eax
  230604:	89 d0                	mov    eax,edx
  230606:	31 d2                	xor    edx,edx
  230608:	8b b5 d4 fb ff ff    	mov    esi,DWORD PTR [rbp-0x42c]
  23060e:	f7 f6                	div    esi
  230610:	89 85 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],eax
        const c1: u32 = v1 % 10000;
  230616:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
  23061c:	f6 c1 01             	test   cl,0x1
  23061f:	89 85 d0 fb ff ff    	mov    DWORD PTR [rbp-0x430],eax
  230625:	75 4c                	jne    230673 <u64toa+0x1383>
  230627:	eb 10                	jmp    230639 <u64toa+0x1349>
  230629:	48 8d 3d 10 2c 01 00 	lea    rdi,[rip+0x12c10]        # 243240 <__unnamed_7>
  230630:	31 c0                	xor    eax,eax
  230632:	89 c6                	mov    esi,eax
        const b1: u32 = v1 / 10000;
  230634:	e8 c7 af fd ff       	call   20b600 <panic>
  230639:	31 c0                	xor    eax,eax
  23063b:	88 c1                	mov    cl,al
  23063d:	b8 10 27 00 00       	mov    eax,0x2710
        const c1: u32 = v1 % 10000;
  230642:	8b 95 d0 fb ff ff    	mov    edx,DWORD PTR [rbp-0x430]
  230648:	89 85 cc fb ff ff    	mov    DWORD PTR [rbp-0x434],eax
  23064e:	89 d0                	mov    eax,edx
  230650:	31 d2                	xor    edx,edx
  230652:	8b b5 cc fb ff ff    	mov    esi,DWORD PTR [rbp-0x434]
  230658:	f7 f6                	div    esi
  23065a:	89 95 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],edx
        const d5: u32 = (b1 / 100) << 1;
  230660:	8b 95 58 ff ff ff    	mov    edx,DWORD PTR [rbp-0xa8]
  230666:	f6 c1 01             	test   cl,0x1
  230669:	89 95 c8 fb ff ff    	mov    DWORD PTR [rbp-0x438],edx
  23066f:	75 4f                	jne    2306c0 <u64toa+0x13d0>
  230671:	eb 10                	jmp    230683 <u64toa+0x1393>
  230673:	48 8d 3d 7e 2c 01 00 	lea    rdi,[rip+0x12c7e]        # 2432f8 <__unnamed_15>
  23067a:	31 c0                	xor    eax,eax
  23067c:	89 c6                	mov    esi,eax
        const c1: u32 = v1 % 10000;
  23067e:	e8 7d af fd ff       	call   20b600 <panic>
  230683:	31 c0                	xor    eax,eax
  230685:	88 c1                	mov    cl,al
  230687:	b8 64 00 00 00       	mov    eax,0x64
        const d5: u32 = (b1 / 100) << 1;
  23068c:	8b 95 c8 fb ff ff    	mov    edx,DWORD PTR [rbp-0x438]
  230692:	89 85 c4 fb ff ff    	mov    DWORD PTR [rbp-0x43c],eax
  230698:	89 d0                	mov    eax,edx
  23069a:	31 d2                	xor    edx,edx
  23069c:	8b b5 c4 fb ff ff    	mov    esi,DWORD PTR [rbp-0x43c]
  2306a2:	f7 f6                	div    esi
  2306a4:	c1 e0 01             	shl    eax,0x1
  2306a7:	89 85 50 ff ff ff    	mov    DWORD PTR [rbp-0xb0],eax
        const d6: u32 = (b1 % 100) << 1;
  2306ad:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
  2306b3:	f6 c1 01             	test   cl,0x1
  2306b6:	89 85 c0 fb ff ff    	mov    DWORD PTR [rbp-0x440],eax
  2306bc:	75 4f                	jne    23070d <u64toa+0x141d>
  2306be:	eb 10                	jmp    2306d0 <u64toa+0x13e0>
  2306c0:	48 8d 3d 79 2b 01 00 	lea    rdi,[rip+0x12b79]        # 243240 <__unnamed_7>
  2306c7:	31 c0                	xor    eax,eax
  2306c9:	89 c6                	mov    esi,eax
        const d5: u32 = (b1 / 100) << 1;
  2306cb:	e8 30 af fd ff       	call   20b600 <panic>
  2306d0:	31 c0                	xor    eax,eax
  2306d2:	88 c1                	mov    cl,al
  2306d4:	b8 64 00 00 00       	mov    eax,0x64
        const d6: u32 = (b1 % 100) << 1;
  2306d9:	8b 95 c0 fb ff ff    	mov    edx,DWORD PTR [rbp-0x440]
  2306df:	89 85 bc fb ff ff    	mov    DWORD PTR [rbp-0x444],eax
  2306e5:	89 d0                	mov    eax,edx
  2306e7:	31 d2                	xor    edx,edx
  2306e9:	8b b5 bc fb ff ff    	mov    esi,DWORD PTR [rbp-0x444]
  2306ef:	f7 f6                	div    esi
  2306f1:	c1 e2 01             	shl    edx,0x1
  2306f4:	89 95 4c ff ff ff    	mov    DWORD PTR [rbp-0xb4],edx
        const d7: u32 = (c1 / 100) << 1;
  2306fa:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
  230700:	f6 c1 01             	test   cl,0x1
  230703:	89 95 b8 fb ff ff    	mov    DWORD PTR [rbp-0x448],edx
  230709:	75 4f                	jne    23075a <u64toa+0x146a>
  23070b:	eb 10                	jmp    23071d <u64toa+0x142d>
  23070d:	48 8d 3d e4 2b 01 00 	lea    rdi,[rip+0x12be4]        # 2432f8 <__unnamed_15>
  230714:	31 c0                	xor    eax,eax
  230716:	89 c6                	mov    esi,eax
        const d6: u32 = (b1 % 100) << 1;
  230718:	e8 e3 ae fd ff       	call   20b600 <panic>
  23071d:	31 c0                	xor    eax,eax
  23071f:	88 c1                	mov    cl,al
  230721:	b8 64 00 00 00       	mov    eax,0x64
        const d7: u32 = (c1 / 100) << 1;
  230726:	8b 95 b8 fb ff ff    	mov    edx,DWORD PTR [rbp-0x448]
  23072c:	89 85 b4 fb ff ff    	mov    DWORD PTR [rbp-0x44c],eax
  230732:	89 d0                	mov    eax,edx
  230734:	31 d2                	xor    edx,edx
  230736:	8b b5 b4 fb ff ff    	mov    esi,DWORD PTR [rbp-0x44c]
  23073c:	f7 f6                	div    esi
  23073e:	c1 e0 01             	shl    eax,0x1
  230741:	89 85 48 ff ff ff    	mov    DWORD PTR [rbp-0xb8],eax
        const d8: u32 = (c1 % 100) << 1;
  230747:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
  23074d:	f6 c1 01             	test   cl,0x1
  230750:	89 85 b0 fb ff ff    	mov    DWORD PTR [rbp-0x450],eax
  230756:	75 53                	jne    2307ab <u64toa+0x14bb>
  230758:	eb 10                	jmp    23076a <u64toa+0x147a>
  23075a:	48 8d 3d df 2a 01 00 	lea    rdi,[rip+0x12adf]        # 243240 <__unnamed_7>
  230761:	31 c0                	xor    eax,eax
  230763:	89 c6                	mov    esi,eax
        const d7: u32 = (c1 / 100) << 1;
  230765:	e8 96 ae fd ff       	call   20b600 <panic>
  23076a:	48 b8 00 80 c6 a4 7e 	movabs rax,0x38d7ea4c68000
  230771:	8d 03 00 
  230774:	b9 64 00 00 00       	mov    ecx,0x64
        const d8: u32 = (c1 % 100) << 1;
  230779:	8b 95 b0 fb ff ff    	mov    edx,DWORD PTR [rbp-0x450]
  23077f:	48 89 85 a8 fb ff ff 	mov    QWORD PTR [rbp-0x458],rax
  230786:	89 d0                	mov    eax,edx
  230788:	31 d2                	xor    edx,edx
  23078a:	f7 f1                	div    ecx
  23078c:	c1 e2 01             	shl    edx,0x1
  23078f:	89 95 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],edx
        if (value >= kTen15) {
  230795:	48 8b b5 a8 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x458]
  23079c:	48 39 75 f0          	cmp    QWORD PTR [rbp-0x10],rsi
  2307a0:	0f 83 ae ed ff ff    	jae    22f554 <u64toa+0x264>
  2307a6:	e9 ca ed ff ff       	jmp    22f575 <u64toa+0x285>
  2307ab:	48 8d 3d 46 2b 01 00 	lea    rdi,[rip+0x12b46]        # 2432f8 <__unnamed_15>
  2307b2:	31 c0                	xor    eax,eax
  2307b4:	89 c6                	mov    esi,eax
        const d8: u32 = (c1 % 100) << 1;
  2307b6:	e8 45 ae fd ff       	call   20b600 <panic>
  2307bb:	48 8d 3d 36 2c 01 00 	lea    rdi,[rip+0x12c36]        # 2433f8 <__unnamed_20>
  2307c2:	31 c0                	xor    eax,eax
  2307c4:	89 c6                	mov    esi,eax
            buffer[buf_index] = c_digits_lut[d1];
  2307c6:	e8 35 ae fd ff       	call   20b600 <panic>
  2307cb:	48 8b 85 90 fe ff ff 	mov    rax,QWORD PTR [rbp-0x170]
  2307d2:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  2307d9:	48 03 01             	add    rax,QWORD PTR [rcx]
  2307dc:	8b 95 68 ff ff ff    	mov    edx,DWORD PTR [rbp-0x98]
  2307e2:	89 d6                	mov    esi,edx
  2307e4:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  2307eb:	48 89 85 a0 fb ff ff 	mov    QWORD PTR [rbp-0x460],rax
  2307f2:	48 89 b5 98 fb ff ff 	mov    QWORD PTR [rbp-0x468],rsi
  2307f9:	72 10                	jb     23080b <u64toa+0x151b>
  2307fb:	48 8d 3d f6 2b 01 00 	lea    rdi,[rip+0x12bf6]        # 2433f8 <__unnamed_20>
  230802:	31 c0                	xor    eax,eax
  230804:	89 c6                	mov    esi,eax
  230806:	e8 f5 ad fd ff       	call   20b600 <panic>
  23080b:	48 8d 05 0e 82 fd ff 	lea    rax,[rip+0xfffffffffffd820e]        # 208a20 <c_digits_lut>
  230812:	48 8b 8d 98 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x468]
  230819:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  23081c:	48 8b 85 a0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x460]
  230823:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  230825:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  230829:	48 83 c6 01          	add    rsi,0x1
  23082d:	0f 92 c2             	setb   dl
  230830:	48 89 b5 90 fb ff ff 	mov    QWORD PTR [rbp-0x470],rsi
  230837:	88 95 8f fb ff ff    	mov    BYTE PTR [rbp-0x471],dl
  23083d:	72 02                	jb     230841 <u64toa+0x1551>
  23083f:	eb 10                	jmp    230851 <u64toa+0x1561>
  230841:	48 8d 3d 80 29 01 00 	lea    rdi,[rip+0x12980]        # 2431c8 <__unnamed_4>
  230848:	31 c0                	xor    eax,eax
  23084a:	89 c6                	mov    esi,eax
  23084c:	e8 af ad fd ff       	call   20b600 <panic>
  230851:	48 8b 85 90 fb ff ff 	mov    rax,QWORD PTR [rbp-0x470]
  230858:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        if (value >= kTen15) {
  23085c:	e9 16 ed ff ff       	jmp    22f577 <u64toa+0x287>
  230861:	48 8d 3d 90 2b 01 00 	lea    rdi,[rip+0x12b90]        # 2433f8 <__unnamed_20>
  230868:	31 c0                	xor    eax,eax
  23086a:	89 c6                	mov    esi,eax
            buffer[buf_index] = c_digits_lut[d1 + 1];
  23086c:	e8 8f ad fd ff       	call   20b600 <panic>
  230871:	48 8b 85 88 fe ff ff 	mov    rax,QWORD PTR [rbp-0x178]
  230878:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  23087f:	48 03 01             	add    rax,QWORD PTR [rcx]
  230882:	8b 95 68 ff ff ff    	mov    edx,DWORD PTR [rbp-0x98]
  230888:	83 c2 01             	add    edx,0x1
  23088b:	40 0f 92 c6          	setb   sil
  23088f:	48 89 85 80 fb ff ff 	mov    QWORD PTR [rbp-0x480],rax
  230896:	89 95 7c fb ff ff    	mov    DWORD PTR [rbp-0x484],edx
  23089c:	40 88 b5 7b fb ff ff 	mov    BYTE PTR [rbp-0x485],sil
  2308a3:	72 02                	jb     2308a7 <u64toa+0x15b7>
  2308a5:	eb 10                	jmp    2308b7 <u64toa+0x15c7>
  2308a7:	48 8d 3d 1a 29 01 00 	lea    rdi,[rip+0x1291a]        # 2431c8 <__unnamed_4>
  2308ae:	31 c0                	xor    eax,eax
  2308b0:	89 c6                	mov    esi,eax
  2308b2:	e8 49 ad fd ff       	call   20b600 <panic>
  2308b7:	8b 85 7c fb ff ff    	mov    eax,DWORD PTR [rbp-0x484]
  2308bd:	89 c1                	mov    ecx,eax
  2308bf:	89 ca                	mov    edx,ecx
  2308c1:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  2308c8:	48 89 95 70 fb ff ff 	mov    QWORD PTR [rbp-0x490],rdx
  2308cf:	72 10                	jb     2308e1 <u64toa+0x15f1>
  2308d1:	48 8d 3d 20 2b 01 00 	lea    rdi,[rip+0x12b20]        # 2433f8 <__unnamed_20>
  2308d8:	31 c0                	xor    eax,eax
  2308da:	89 c6                	mov    esi,eax
  2308dc:	e8 1f ad fd ff       	call   20b600 <panic>
  2308e1:	48 8d 05 38 81 fd ff 	lea    rax,[rip+0xfffffffffffd8138]        # 208a20 <c_digits_lut>
  2308e8:	48 8b 8d 70 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x490]
  2308ef:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  2308f2:	48 8b 85 80 fb ff ff 	mov    rax,QWORD PTR [rbp-0x480]
  2308f9:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  2308fb:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  2308ff:	48 83 c6 01          	add    rsi,0x1
  230903:	0f 92 c2             	setb   dl
  230906:	48 89 b5 68 fb ff ff 	mov    QWORD PTR [rbp-0x498],rsi
  23090d:	88 95 67 fb ff ff    	mov    BYTE PTR [rbp-0x499],dl
  230913:	72 02                	jb     230917 <u64toa+0x1627>
  230915:	eb 10                	jmp    230927 <u64toa+0x1637>
  230917:	48 8d 3d aa 28 01 00 	lea    rdi,[rip+0x128aa]        # 2431c8 <__unnamed_4>
  23091e:	31 c0                	xor    eax,eax
  230920:	89 c6                	mov    esi,eax
  230922:	e8 d9 ac fd ff       	call   20b600 <panic>
  230927:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
  23092e:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        if (value >= kTen14) {
  230932:	e9 73 ec ff ff       	jmp    22f5aa <u64toa+0x2ba>
  230937:	48 8d 3d ba 2a 01 00 	lea    rdi,[rip+0x12aba]        # 2433f8 <__unnamed_20>
  23093e:	31 c0                	xor    eax,eax
  230940:	89 c6                	mov    esi,eax
            buffer[buf_index] = c_digits_lut[d2];
  230942:	e8 b9 ac fd ff       	call   20b600 <panic>
  230947:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
  23094e:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  230955:	48 03 01             	add    rax,QWORD PTR [rcx]
  230958:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
  23095e:	89 d6                	mov    esi,edx
  230960:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  230967:	48 89 85 58 fb ff ff 	mov    QWORD PTR [rbp-0x4a8],rax
  23096e:	48 89 b5 50 fb ff ff 	mov    QWORD PTR [rbp-0x4b0],rsi
  230975:	72 10                	jb     230987 <u64toa+0x1697>
  230977:	48 8d 3d 7a 2a 01 00 	lea    rdi,[rip+0x12a7a]        # 2433f8 <__unnamed_20>
  23097e:	31 c0                	xor    eax,eax
  230980:	89 c6                	mov    esi,eax
  230982:	e8 79 ac fd ff       	call   20b600 <panic>
  230987:	48 8d 05 92 80 fd ff 	lea    rax,[rip+0xfffffffffffd8092]        # 208a20 <c_digits_lut>
  23098e:	48 8b 8d 50 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x4b0]
  230995:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  230998:	48 8b 85 58 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4a8]
  23099f:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  2309a1:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  2309a5:	48 83 c6 01          	add    rsi,0x1
  2309a9:	0f 92 c2             	setb   dl
  2309ac:	48 89 b5 48 fb ff ff 	mov    QWORD PTR [rbp-0x4b8],rsi
  2309b3:	88 95 47 fb ff ff    	mov    BYTE PTR [rbp-0x4b9],dl
  2309b9:	72 02                	jb     2309bd <u64toa+0x16cd>
  2309bb:	eb 10                	jmp    2309cd <u64toa+0x16dd>
  2309bd:	48 8d 3d 04 28 01 00 	lea    rdi,[rip+0x12804]        # 2431c8 <__unnamed_4>
  2309c4:	31 c0                	xor    eax,eax
  2309c6:	89 c6                	mov    esi,eax
  2309c8:	e8 33 ac fd ff       	call   20b600 <panic>
  2309cd:	48 8b 85 48 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4b8]
  2309d4:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        if (value >= kTen13) {
  2309d8:	e9 00 ec ff ff       	jmp    22f5dd <u64toa+0x2ed>
  2309dd:	48 8d 3d 14 2a 01 00 	lea    rdi,[rip+0x12a14]        # 2433f8 <__unnamed_20>
  2309e4:	31 c0                	xor    eax,eax
  2309e6:	89 c6                	mov    esi,eax
            buffer[buf_index] = c_digits_lut[d2 + 1];
  2309e8:	e8 13 ac fd ff       	call   20b600 <panic>
  2309ed:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
  2309f4:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  2309fb:	48 03 01             	add    rax,QWORD PTR [rcx]
  2309fe:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
  230a04:	83 c2 01             	add    edx,0x1
  230a07:	40 0f 92 c6          	setb   sil
  230a0b:	48 89 85 38 fb ff ff 	mov    QWORD PTR [rbp-0x4c8],rax
  230a12:	89 95 34 fb ff ff    	mov    DWORD PTR [rbp-0x4cc],edx
  230a18:	40 88 b5 33 fb ff ff 	mov    BYTE PTR [rbp-0x4cd],sil
  230a1f:	72 02                	jb     230a23 <u64toa+0x1733>
  230a21:	eb 10                	jmp    230a33 <u64toa+0x1743>
  230a23:	48 8d 3d 9e 27 01 00 	lea    rdi,[rip+0x1279e]        # 2431c8 <__unnamed_4>
  230a2a:	31 c0                	xor    eax,eax
  230a2c:	89 c6                	mov    esi,eax
  230a2e:	e8 cd ab fd ff       	call   20b600 <panic>
  230a33:	8b 85 34 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4cc]
  230a39:	89 c1                	mov    ecx,eax
  230a3b:	89 ca                	mov    edx,ecx
  230a3d:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  230a44:	48 89 95 28 fb ff ff 	mov    QWORD PTR [rbp-0x4d8],rdx
  230a4b:	72 10                	jb     230a5d <u64toa+0x176d>
  230a4d:	48 8d 3d a4 29 01 00 	lea    rdi,[rip+0x129a4]        # 2433f8 <__unnamed_20>
  230a54:	31 c0                	xor    eax,eax
  230a56:	89 c6                	mov    esi,eax
  230a58:	e8 a3 ab fd ff       	call   20b600 <panic>
  230a5d:	48 8d 05 bc 7f fd ff 	lea    rax,[rip+0xfffffffffffd7fbc]        # 208a20 <c_digits_lut>
  230a64:	48 8b 8d 28 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x4d8]
  230a6b:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  230a6e:	48 8b 85 38 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4c8]
  230a75:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  230a77:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  230a7b:	48 83 c6 01          	add    rsi,0x1
  230a7f:	0f 92 c2             	setb   dl
  230a82:	48 89 b5 20 fb ff ff 	mov    QWORD PTR [rbp-0x4e0],rsi
  230a89:	88 95 1f fb ff ff    	mov    BYTE PTR [rbp-0x4e1],dl
  230a8f:	72 02                	jb     230a93 <u64toa+0x17a3>
  230a91:	eb 10                	jmp    230aa3 <u64toa+0x17b3>
  230a93:	48 8d 3d 2e 27 01 00 	lea    rdi,[rip+0x1272e]        # 2431c8 <__unnamed_4>
  230a9a:	31 c0                	xor    eax,eax
  230a9c:	89 c6                	mov    esi,eax
  230a9e:	e8 5d ab fd ff       	call   20b600 <panic>
  230aa3:	48 8b 85 20 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4e0]
  230aaa:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        if (value >= kTen12) {
  230aae:	e9 5d eb ff ff       	jmp    22f610 <u64toa+0x320>
  230ab3:	48 8d 3d 3e 29 01 00 	lea    rdi,[rip+0x1293e]        # 2433f8 <__unnamed_20>
  230aba:	31 c0                	xor    eax,eax
  230abc:	89 c6                	mov    esi,eax
            buffer[buf_index] = c_digits_lut[d3];
  230abe:	e8 3d ab fd ff       	call   20b600 <panic>
  230ac3:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  230aca:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  230ad1:	48 03 01             	add    rax,QWORD PTR [rcx]
  230ad4:	8b 95 60 ff ff ff    	mov    edx,DWORD PTR [rbp-0xa0]
  230ada:	89 d6                	mov    esi,edx
  230adc:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  230ae3:	48 89 85 10 fb ff ff 	mov    QWORD PTR [rbp-0x4f0],rax
  230aea:	48 89 b5 08 fb ff ff 	mov    QWORD PTR [rbp-0x4f8],rsi
  230af1:	72 10                	jb     230b03 <u64toa+0x1813>
  230af3:	48 8d 3d fe 28 01 00 	lea    rdi,[rip+0x128fe]        # 2433f8 <__unnamed_20>
  230afa:	31 c0                	xor    eax,eax
  230afc:	89 c6                	mov    esi,eax
  230afe:	e8 fd aa fd ff       	call   20b600 <panic>
  230b03:	48 8d 05 16 7f fd ff 	lea    rax,[rip+0xfffffffffffd7f16]        # 208a20 <c_digits_lut>
  230b0a:	48 8b 8d 08 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x4f8]
  230b11:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  230b14:	48 8b 85 10 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f0]
  230b1b:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  230b1d:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  230b21:	48 83 c6 01          	add    rsi,0x1
  230b25:	0f 92 c2             	setb   dl
  230b28:	48 89 b5 00 fb ff ff 	mov    QWORD PTR [rbp-0x500],rsi
  230b2f:	88 95 ff fa ff ff    	mov    BYTE PTR [rbp-0x501],dl
  230b35:	72 02                	jb     230b39 <u64toa+0x1849>
  230b37:	eb 10                	jmp    230b49 <u64toa+0x1859>
  230b39:	48 8d 3d 88 26 01 00 	lea    rdi,[rip+0x12688]        # 2431c8 <__unnamed_4>
  230b40:	31 c0                	xor    eax,eax
  230b42:	89 c6                	mov    esi,eax
  230b44:	e8 b7 aa fd ff       	call   20b600 <panic>
  230b49:	48 8b 85 00 fb ff ff 	mov    rax,QWORD PTR [rbp-0x500]
  230b50:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        if (value >= kTen11) {
  230b54:	e9 ea ea ff ff       	jmp    22f643 <u64toa+0x353>
  230b59:	48 8d 3d 98 28 01 00 	lea    rdi,[rip+0x12898]        # 2433f8 <__unnamed_20>
  230b60:	31 c0                	xor    eax,eax
  230b62:	89 c6                	mov    esi,eax
            buffer[buf_index] = c_digits_lut[d3 + 1];
  230b64:	e8 97 aa fd ff       	call   20b600 <panic>
  230b69:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
  230b70:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  230b77:	48 03 01             	add    rax,QWORD PTR [rcx]
  230b7a:	8b 95 60 ff ff ff    	mov    edx,DWORD PTR [rbp-0xa0]
  230b80:	83 c2 01             	add    edx,0x1
  230b83:	40 0f 92 c6          	setb   sil
  230b87:	48 89 85 f0 fa ff ff 	mov    QWORD PTR [rbp-0x510],rax
  230b8e:	89 95 ec fa ff ff    	mov    DWORD PTR [rbp-0x514],edx
  230b94:	40 88 b5 eb fa ff ff 	mov    BYTE PTR [rbp-0x515],sil
  230b9b:	72 02                	jb     230b9f <u64toa+0x18af>
  230b9d:	eb 10                	jmp    230baf <u64toa+0x18bf>
  230b9f:	48 8d 3d 22 26 01 00 	lea    rdi,[rip+0x12622]        # 2431c8 <__unnamed_4>
  230ba6:	31 c0                	xor    eax,eax
  230ba8:	89 c6                	mov    esi,eax
  230baa:	e8 51 aa fd ff       	call   20b600 <panic>
  230baf:	8b 85 ec fa ff ff    	mov    eax,DWORD PTR [rbp-0x514]
  230bb5:	89 c1                	mov    ecx,eax
  230bb7:	89 ca                	mov    edx,ecx
  230bb9:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  230bc0:	48 89 95 e0 fa ff ff 	mov    QWORD PTR [rbp-0x520],rdx
  230bc7:	72 10                	jb     230bd9 <u64toa+0x18e9>
  230bc9:	48 8d 3d 28 28 01 00 	lea    rdi,[rip+0x12828]        # 2433f8 <__unnamed_20>
  230bd0:	31 c0                	xor    eax,eax
  230bd2:	89 c6                	mov    esi,eax
  230bd4:	e8 27 aa fd ff       	call   20b600 <panic>
  230bd9:	48 8d 05 40 7e fd ff 	lea    rax,[rip+0xfffffffffffd7e40]        # 208a20 <c_digits_lut>
  230be0:	48 8b 8d e0 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x520]
  230be7:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  230bea:	48 8b 85 f0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x510]
  230bf1:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  230bf3:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  230bf7:	48 83 c6 01          	add    rsi,0x1
  230bfb:	0f 92 c2             	setb   dl
  230bfe:	48 89 b5 d8 fa ff ff 	mov    QWORD PTR [rbp-0x528],rsi
  230c05:	88 95 d7 fa ff ff    	mov    BYTE PTR [rbp-0x529],dl
  230c0b:	72 02                	jb     230c0f <u64toa+0x191f>
  230c0d:	eb 10                	jmp    230c1f <u64toa+0x192f>
  230c0f:	48 8d 3d b2 25 01 00 	lea    rdi,[rip+0x125b2]        # 2431c8 <__unnamed_4>
  230c16:	31 c0                	xor    eax,eax
  230c18:	89 c6                	mov    esi,eax
  230c1a:	e8 e1 a9 fd ff       	call   20b600 <panic>
  230c1f:	48 8b 85 d8 fa ff ff 	mov    rax,QWORD PTR [rbp-0x528]
  230c26:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        if (value >= kTen10) {
  230c2a:	e9 47 ea ff ff       	jmp    22f676 <u64toa+0x386>
  230c2f:	48 8d 3d c2 27 01 00 	lea    rdi,[rip+0x127c2]        # 2433f8 <__unnamed_20>
  230c36:	31 c0                	xor    eax,eax
  230c38:	89 c6                	mov    esi,eax
            buffer[buf_index] = c_digits_lut[d4];
  230c3a:	e8 c1 a9 fd ff       	call   20b600 <panic>
  230c3f:	48 8b 85 60 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a0]
  230c46:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  230c4d:	48 03 01             	add    rax,QWORD PTR [rcx]
  230c50:	8b 95 5c ff ff ff    	mov    edx,DWORD PTR [rbp-0xa4]
  230c56:	89 d6                	mov    esi,edx
  230c58:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  230c5f:	48 89 85 c8 fa ff ff 	mov    QWORD PTR [rbp-0x538],rax
  230c66:	48 89 b5 c0 fa ff ff 	mov    QWORD PTR [rbp-0x540],rsi
  230c6d:	72 10                	jb     230c7f <u64toa+0x198f>
  230c6f:	48 8d 3d 82 27 01 00 	lea    rdi,[rip+0x12782]        # 2433f8 <__unnamed_20>
  230c76:	31 c0                	xor    eax,eax
  230c78:	89 c6                	mov    esi,eax
  230c7a:	e8 81 a9 fd ff       	call   20b600 <panic>
  230c7f:	48 8d 05 9a 7d fd ff 	lea    rax,[rip+0xfffffffffffd7d9a]        # 208a20 <c_digits_lut>
  230c86:	48 8b 8d c0 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x540]
  230c8d:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  230c90:	48 8b 85 c8 fa ff ff 	mov    rax,QWORD PTR [rbp-0x538]
  230c97:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  230c99:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  230c9d:	48 83 c6 01          	add    rsi,0x1
  230ca1:	0f 92 c2             	setb   dl
  230ca4:	48 89 b5 b8 fa ff ff 	mov    QWORD PTR [rbp-0x548],rsi
  230cab:	88 95 b7 fa ff ff    	mov    BYTE PTR [rbp-0x549],dl
  230cb1:	72 02                	jb     230cb5 <u64toa+0x19c5>
  230cb3:	eb 10                	jmp    230cc5 <u64toa+0x19d5>
  230cb5:	48 8d 3d 0c 25 01 00 	lea    rdi,[rip+0x1250c]        # 2431c8 <__unnamed_4>
  230cbc:	31 c0                	xor    eax,eax
  230cbe:	89 c6                	mov    esi,eax
  230cc0:	e8 3b a9 fd ff       	call   20b600 <panic>
  230cc5:	48 8b 85 b8 fa ff ff 	mov    rax,QWORD PTR [rbp-0x548]
  230ccc:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        if (value >= kTen9) {
  230cd0:	e9 ce e9 ff ff       	jmp    22f6a3 <u64toa+0x3b3>
  230cd5:	48 8d 3d 1c 27 01 00 	lea    rdi,[rip+0x1271c]        # 2433f8 <__unnamed_20>
  230cdc:	31 c0                	xor    eax,eax
  230cde:	89 c6                	mov    esi,eax
            buffer[buf_index] = c_digits_lut[d4 + 1];
  230ce0:	e8 1b a9 fd ff       	call   20b600 <panic>
  230ce5:	48 8b 85 58 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a8]
  230cec:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  230cf3:	48 03 01             	add    rax,QWORD PTR [rcx]
  230cf6:	8b 95 5c ff ff ff    	mov    edx,DWORD PTR [rbp-0xa4]
  230cfc:	83 c2 01             	add    edx,0x1
  230cff:	40 0f 92 c6          	setb   sil
  230d03:	48 89 85 a8 fa ff ff 	mov    QWORD PTR [rbp-0x558],rax
  230d0a:	89 95 a4 fa ff ff    	mov    DWORD PTR [rbp-0x55c],edx
  230d10:	40 88 b5 a3 fa ff ff 	mov    BYTE PTR [rbp-0x55d],sil
  230d17:	72 02                	jb     230d1b <u64toa+0x1a2b>
  230d19:	eb 10                	jmp    230d2b <u64toa+0x1a3b>
  230d1b:	48 8d 3d a6 24 01 00 	lea    rdi,[rip+0x124a6]        # 2431c8 <__unnamed_4>
  230d22:	31 c0                	xor    eax,eax
  230d24:	89 c6                	mov    esi,eax
  230d26:	e8 d5 a8 fd ff       	call   20b600 <panic>
  230d2b:	8b 85 a4 fa ff ff    	mov    eax,DWORD PTR [rbp-0x55c]
  230d31:	89 c1                	mov    ecx,eax
  230d33:	89 ca                	mov    edx,ecx
  230d35:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  230d3c:	48 89 95 98 fa ff ff 	mov    QWORD PTR [rbp-0x568],rdx
  230d43:	72 10                	jb     230d55 <u64toa+0x1a65>
  230d45:	48 8d 3d ac 26 01 00 	lea    rdi,[rip+0x126ac]        # 2433f8 <__unnamed_20>
  230d4c:	31 c0                	xor    eax,eax
  230d4e:	89 c6                	mov    esi,eax
  230d50:	e8 ab a8 fd ff       	call   20b600 <panic>
  230d55:	48 8d 05 c4 7c fd ff 	lea    rax,[rip+0xfffffffffffd7cc4]        # 208a20 <c_digits_lut>
  230d5c:	48 8b 8d 98 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x568]
  230d63:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  230d66:	48 8b 85 a8 fa ff ff 	mov    rax,QWORD PTR [rbp-0x558]
  230d6d:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  230d6f:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  230d73:	48 83 c6 01          	add    rsi,0x1
  230d77:	0f 92 c2             	setb   dl
  230d7a:	48 89 b5 90 fa ff ff 	mov    QWORD PTR [rbp-0x570],rsi
  230d81:	88 95 8f fa ff ff    	mov    BYTE PTR [rbp-0x571],dl
  230d87:	72 02                	jb     230d8b <u64toa+0x1a9b>
  230d89:	eb 10                	jmp    230d9b <u64toa+0x1aab>
  230d8b:	48 8d 3d 36 24 01 00 	lea    rdi,[rip+0x12436]        # 2431c8 <__unnamed_4>
  230d92:	31 c0                	xor    eax,eax
  230d94:	89 c6                	mov    esi,eax
  230d96:	e8 65 a8 fd ff       	call   20b600 <panic>
  230d9b:	48 8b 85 90 fa ff ff 	mov    rax,QWORD PTR [rbp-0x570]
  230da2:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        if (value >= kTen8) {
  230da6:	e9 25 e9 ff ff       	jmp    22f6d0 <u64toa+0x3e0>
  230dab:	48 8d 3d 46 26 01 00 	lea    rdi,[rip+0x12646]        # 2433f8 <__unnamed_20>
  230db2:	31 c0                	xor    eax,eax
  230db4:	89 c6                	mov    esi,eax
        buffer[buf_index] = c_digits_lut[d5];
  230db6:	e8 45 a8 fd ff       	call   20b600 <panic>
  230dbb:	48 8b 85 50 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b0]
  230dc2:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  230dc9:	48 03 01             	add    rax,QWORD PTR [rcx]
  230dcc:	8b 95 50 ff ff ff    	mov    edx,DWORD PTR [rbp-0xb0]
  230dd2:	89 d6                	mov    esi,edx
  230dd4:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  230ddb:	48 89 85 80 fa ff ff 	mov    QWORD PTR [rbp-0x580],rax
  230de2:	48 89 b5 78 fa ff ff 	mov    QWORD PTR [rbp-0x588],rsi
  230de9:	72 10                	jb     230dfb <u64toa+0x1b0b>
  230deb:	48 8d 3d 06 26 01 00 	lea    rdi,[rip+0x12606]        # 2433f8 <__unnamed_20>
  230df2:	31 c0                	xor    eax,eax
  230df4:	89 c6                	mov    esi,eax
  230df6:	e8 05 a8 fd ff       	call   20b600 <panic>
  230dfb:	48 8d 05 1e 7c fd ff 	lea    rax,[rip+0xfffffffffffd7c1e]        # 208a20 <c_digits_lut>
  230e02:	48 8b 8d 78 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x588]
  230e09:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  230e0c:	48 8b 85 80 fa ff ff 	mov    rax,QWORD PTR [rbp-0x580]
  230e13:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  230e15:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  230e19:	48 83 c6 01          	add    rsi,0x1
  230e1d:	0f 92 c2             	setb   dl
  230e20:	48 89 b5 70 fa ff ff 	mov    QWORD PTR [rbp-0x590],rsi
  230e27:	88 95 6f fa ff ff    	mov    BYTE PTR [rbp-0x591],dl
  230e2d:	72 02                	jb     230e31 <u64toa+0x1b41>
  230e2f:	eb 10                	jmp    230e41 <u64toa+0x1b51>
  230e31:	48 8d 3d 90 23 01 00 	lea    rdi,[rip+0x12390]        # 2431c8 <__unnamed_4>
  230e38:	31 c0                	xor    eax,eax
  230e3a:	89 c6                	mov    esi,eax
  230e3c:	e8 bf a7 fd ff       	call   20b600 <panic>
  230e41:	48 8b 85 70 fa ff ff 	mov    rax,QWORD PTR [rbp-0x590]
  230e48:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d5 + 1];
  230e4c:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  230e50:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  230e57:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  230e5b:	48 89 8d 60 fa ff ff 	mov    QWORD PTR [rbp-0x5a0],rcx
  230e62:	72 10                	jb     230e74 <u64toa+0x1b84>
  230e64:	48 8d 3d 8d 25 01 00 	lea    rdi,[rip+0x1258d]        # 2433f8 <__unnamed_20>
  230e6b:	31 c0                	xor    eax,eax
  230e6d:	89 c6                	mov    esi,eax
  230e6f:	e8 8c a7 fd ff       	call   20b600 <panic>
  230e74:	48 8b 85 60 fa ff ff 	mov    rax,QWORD PTR [rbp-0x5a0]
  230e7b:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  230e82:	48 03 01             	add    rax,QWORD PTR [rcx]
  230e85:	8b 95 50 ff ff ff    	mov    edx,DWORD PTR [rbp-0xb0]
  230e8b:	83 c2 01             	add    edx,0x1
  230e8e:	40 0f 92 c6          	setb   sil
  230e92:	48 89 85 58 fa ff ff 	mov    QWORD PTR [rbp-0x5a8],rax
  230e99:	89 95 54 fa ff ff    	mov    DWORD PTR [rbp-0x5ac],edx
  230e9f:	40 88 b5 53 fa ff ff 	mov    BYTE PTR [rbp-0x5ad],sil
  230ea6:	72 02                	jb     230eaa <u64toa+0x1bba>
  230ea8:	eb 10                	jmp    230eba <u64toa+0x1bca>
  230eaa:	48 8d 3d 17 23 01 00 	lea    rdi,[rip+0x12317]        # 2431c8 <__unnamed_4>
  230eb1:	31 c0                	xor    eax,eax
  230eb3:	89 c6                	mov    esi,eax
  230eb5:	e8 46 a7 fd ff       	call   20b600 <panic>
  230eba:	8b 85 54 fa ff ff    	mov    eax,DWORD PTR [rbp-0x5ac]
  230ec0:	89 c1                	mov    ecx,eax
  230ec2:	89 ca                	mov    edx,ecx
  230ec4:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  230ecb:	48 89 95 48 fa ff ff 	mov    QWORD PTR [rbp-0x5b8],rdx
  230ed2:	72 10                	jb     230ee4 <u64toa+0x1bf4>
  230ed4:	48 8d 3d 1d 25 01 00 	lea    rdi,[rip+0x1251d]        # 2433f8 <__unnamed_20>
  230edb:	31 c0                	xor    eax,eax
  230edd:	89 c6                	mov    esi,eax
  230edf:	e8 1c a7 fd ff       	call   20b600 <panic>
  230ee4:	48 8d 05 35 7b fd ff 	lea    rax,[rip+0xfffffffffffd7b35]        # 208a20 <c_digits_lut>
  230eeb:	48 8b 8d 48 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x5b8]
  230ef2:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  230ef5:	48 8b 85 58 fa ff ff 	mov    rax,QWORD PTR [rbp-0x5a8]
  230efc:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  230efe:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  230f02:	48 83 c6 01          	add    rsi,0x1
  230f06:	0f 92 c2             	setb   dl
  230f09:	48 89 b5 40 fa ff ff 	mov    QWORD PTR [rbp-0x5c0],rsi
  230f10:	88 95 3f fa ff ff    	mov    BYTE PTR [rbp-0x5c1],dl
  230f16:	72 02                	jb     230f1a <u64toa+0x1c2a>
  230f18:	eb 10                	jmp    230f2a <u64toa+0x1c3a>
  230f1a:	48 8d 3d a7 22 01 00 	lea    rdi,[rip+0x122a7]        # 2431c8 <__unnamed_4>
  230f21:	31 c0                	xor    eax,eax
  230f23:	89 c6                	mov    esi,eax
  230f25:	e8 d6 a6 fd ff       	call   20b600 <panic>
  230f2a:	48 8b 85 40 fa ff ff 	mov    rax,QWORD PTR [rbp-0x5c0]
  230f31:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d6];
  230f35:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  230f39:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  230f40:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  230f44:	48 89 8d 30 fa ff ff 	mov    QWORD PTR [rbp-0x5d0],rcx
  230f4b:	72 10                	jb     230f5d <u64toa+0x1c6d>
  230f4d:	48 8d 3d a4 24 01 00 	lea    rdi,[rip+0x124a4]        # 2433f8 <__unnamed_20>
  230f54:	31 c0                	xor    eax,eax
  230f56:	89 c6                	mov    esi,eax
  230f58:	e8 a3 a6 fd ff       	call   20b600 <panic>
  230f5d:	48 8b 85 30 fa ff ff 	mov    rax,QWORD PTR [rbp-0x5d0]
  230f64:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  230f6b:	48 03 01             	add    rax,QWORD PTR [rcx]
  230f6e:	8b 95 4c ff ff ff    	mov    edx,DWORD PTR [rbp-0xb4]
  230f74:	89 d6                	mov    esi,edx
  230f76:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  230f7d:	48 89 85 28 fa ff ff 	mov    QWORD PTR [rbp-0x5d8],rax
  230f84:	48 89 b5 20 fa ff ff 	mov    QWORD PTR [rbp-0x5e0],rsi
  230f8b:	72 10                	jb     230f9d <u64toa+0x1cad>
  230f8d:	48 8d 3d 64 24 01 00 	lea    rdi,[rip+0x12464]        # 2433f8 <__unnamed_20>
  230f94:	31 c0                	xor    eax,eax
  230f96:	89 c6                	mov    esi,eax
  230f98:	e8 63 a6 fd ff       	call   20b600 <panic>
  230f9d:	48 8d 05 7c 7a fd ff 	lea    rax,[rip+0xfffffffffffd7a7c]        # 208a20 <c_digits_lut>
  230fa4:	48 8b 8d 20 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x5e0]
  230fab:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  230fae:	48 8b 85 28 fa ff ff 	mov    rax,QWORD PTR [rbp-0x5d8]
  230fb5:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  230fb7:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  230fbb:	48 83 c6 01          	add    rsi,0x1
  230fbf:	0f 92 c2             	setb   dl
  230fc2:	48 89 b5 18 fa ff ff 	mov    QWORD PTR [rbp-0x5e8],rsi
  230fc9:	88 95 17 fa ff ff    	mov    BYTE PTR [rbp-0x5e9],dl
  230fcf:	72 02                	jb     230fd3 <u64toa+0x1ce3>
  230fd1:	eb 10                	jmp    230fe3 <u64toa+0x1cf3>
  230fd3:	48 8d 3d ee 21 01 00 	lea    rdi,[rip+0x121ee]        # 2431c8 <__unnamed_4>
  230fda:	31 c0                	xor    eax,eax
  230fdc:	89 c6                	mov    esi,eax
  230fde:	e8 1d a6 fd ff       	call   20b600 <panic>
  230fe3:	48 8b 85 18 fa ff ff 	mov    rax,QWORD PTR [rbp-0x5e8]
  230fea:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d6 + 1];
  230fee:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  230ff2:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  230ff9:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  230ffd:	48 89 8d 08 fa ff ff 	mov    QWORD PTR [rbp-0x5f8],rcx
  231004:	72 10                	jb     231016 <u64toa+0x1d26>
  231006:	48 8d 3d eb 23 01 00 	lea    rdi,[rip+0x123eb]        # 2433f8 <__unnamed_20>
  23100d:	31 c0                	xor    eax,eax
  23100f:	89 c6                	mov    esi,eax
  231011:	e8 ea a5 fd ff       	call   20b600 <panic>
  231016:	48 8b 85 08 fa ff ff 	mov    rax,QWORD PTR [rbp-0x5f8]
  23101d:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  231024:	48 03 01             	add    rax,QWORD PTR [rcx]
  231027:	8b 95 4c ff ff ff    	mov    edx,DWORD PTR [rbp-0xb4]
  23102d:	83 c2 01             	add    edx,0x1
  231030:	40 0f 92 c6          	setb   sil
  231034:	48 89 85 00 fa ff ff 	mov    QWORD PTR [rbp-0x600],rax
  23103b:	89 95 fc f9 ff ff    	mov    DWORD PTR [rbp-0x604],edx
  231041:	40 88 b5 fb f9 ff ff 	mov    BYTE PTR [rbp-0x605],sil
  231048:	72 02                	jb     23104c <u64toa+0x1d5c>
  23104a:	eb 10                	jmp    23105c <u64toa+0x1d6c>
  23104c:	48 8d 3d 75 21 01 00 	lea    rdi,[rip+0x12175]        # 2431c8 <__unnamed_4>
  231053:	31 c0                	xor    eax,eax
  231055:	89 c6                	mov    esi,eax
  231057:	e8 a4 a5 fd ff       	call   20b600 <panic>
  23105c:	8b 85 fc f9 ff ff    	mov    eax,DWORD PTR [rbp-0x604]
  231062:	89 c1                	mov    ecx,eax
  231064:	89 ca                	mov    edx,ecx
  231066:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  23106d:	48 89 95 f0 f9 ff ff 	mov    QWORD PTR [rbp-0x610],rdx
  231074:	72 10                	jb     231086 <u64toa+0x1d96>
  231076:	48 8d 3d 7b 23 01 00 	lea    rdi,[rip+0x1237b]        # 2433f8 <__unnamed_20>
  23107d:	31 c0                	xor    eax,eax
  23107f:	89 c6                	mov    esi,eax
  231081:	e8 7a a5 fd ff       	call   20b600 <panic>
  231086:	48 8d 05 93 79 fd ff 	lea    rax,[rip+0xfffffffffffd7993]        # 208a20 <c_digits_lut>
  23108d:	48 8b 8d f0 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x610]
  231094:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  231097:	48 8b 85 00 fa ff ff 	mov    rax,QWORD PTR [rbp-0x600]
  23109e:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  2310a0:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  2310a4:	48 83 c6 01          	add    rsi,0x1
  2310a8:	0f 92 c2             	setb   dl
  2310ab:	48 89 b5 e8 f9 ff ff 	mov    QWORD PTR [rbp-0x618],rsi
  2310b2:	88 95 e7 f9 ff ff    	mov    BYTE PTR [rbp-0x619],dl
  2310b8:	72 02                	jb     2310bc <u64toa+0x1dcc>
  2310ba:	eb 10                	jmp    2310cc <u64toa+0x1ddc>
  2310bc:	48 8d 3d 05 21 01 00 	lea    rdi,[rip+0x12105]        # 2431c8 <__unnamed_4>
  2310c3:	31 c0                	xor    eax,eax
  2310c5:	89 c6                	mov    esi,eax
  2310c7:	e8 34 a5 fd ff       	call   20b600 <panic>
  2310cc:	48 8b 85 e8 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x618]
  2310d3:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d7];
  2310d7:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  2310db:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  2310e2:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  2310e6:	48 89 8d d8 f9 ff ff 	mov    QWORD PTR [rbp-0x628],rcx
  2310ed:	72 10                	jb     2310ff <u64toa+0x1e0f>
  2310ef:	48 8d 3d 02 23 01 00 	lea    rdi,[rip+0x12302]        # 2433f8 <__unnamed_20>
  2310f6:	31 c0                	xor    eax,eax
  2310f8:	89 c6                	mov    esi,eax
  2310fa:	e8 01 a5 fd ff       	call   20b600 <panic>
  2310ff:	48 8b 85 d8 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x628]
  231106:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  23110d:	48 03 01             	add    rax,QWORD PTR [rcx]
  231110:	8b 95 48 ff ff ff    	mov    edx,DWORD PTR [rbp-0xb8]
  231116:	89 d6                	mov    esi,edx
  231118:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  23111f:	48 89 85 d0 f9 ff ff 	mov    QWORD PTR [rbp-0x630],rax
  231126:	48 89 b5 c8 f9 ff ff 	mov    QWORD PTR [rbp-0x638],rsi
  23112d:	72 10                	jb     23113f <u64toa+0x1e4f>
  23112f:	48 8d 3d c2 22 01 00 	lea    rdi,[rip+0x122c2]        # 2433f8 <__unnamed_20>
  231136:	31 c0                	xor    eax,eax
  231138:	89 c6                	mov    esi,eax
  23113a:	e8 c1 a4 fd ff       	call   20b600 <panic>
  23113f:	48 8d 05 da 78 fd ff 	lea    rax,[rip+0xfffffffffffd78da]        # 208a20 <c_digits_lut>
  231146:	48 8b 8d c8 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x638]
  23114d:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  231150:	48 8b 85 d0 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x630]
  231157:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  231159:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  23115d:	48 83 c6 01          	add    rsi,0x1
  231161:	0f 92 c2             	setb   dl
  231164:	48 89 b5 c0 f9 ff ff 	mov    QWORD PTR [rbp-0x640],rsi
  23116b:	88 95 bf f9 ff ff    	mov    BYTE PTR [rbp-0x641],dl
  231171:	72 02                	jb     231175 <u64toa+0x1e85>
  231173:	eb 10                	jmp    231185 <u64toa+0x1e95>
  231175:	48 8d 3d 4c 20 01 00 	lea    rdi,[rip+0x1204c]        # 2431c8 <__unnamed_4>
  23117c:	31 c0                	xor    eax,eax
  23117e:	89 c6                	mov    esi,eax
  231180:	e8 7b a4 fd ff       	call   20b600 <panic>
  231185:	48 8b 85 c0 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x640]
  23118c:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d7 + 1];
  231190:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  231194:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  23119b:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  23119f:	48 89 8d b0 f9 ff ff 	mov    QWORD PTR [rbp-0x650],rcx
  2311a6:	72 10                	jb     2311b8 <u64toa+0x1ec8>
  2311a8:	48 8d 3d 49 22 01 00 	lea    rdi,[rip+0x12249]        # 2433f8 <__unnamed_20>
  2311af:	31 c0                	xor    eax,eax
  2311b1:	89 c6                	mov    esi,eax
  2311b3:	e8 48 a4 fd ff       	call   20b600 <panic>
  2311b8:	48 8b 85 b0 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x650]
  2311bf:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  2311c6:	48 03 01             	add    rax,QWORD PTR [rcx]
  2311c9:	8b 95 48 ff ff ff    	mov    edx,DWORD PTR [rbp-0xb8]
  2311cf:	83 c2 01             	add    edx,0x1
  2311d2:	40 0f 92 c6          	setb   sil
  2311d6:	48 89 85 a8 f9 ff ff 	mov    QWORD PTR [rbp-0x658],rax
  2311dd:	89 95 a4 f9 ff ff    	mov    DWORD PTR [rbp-0x65c],edx
  2311e3:	40 88 b5 a3 f9 ff ff 	mov    BYTE PTR [rbp-0x65d],sil
  2311ea:	72 02                	jb     2311ee <u64toa+0x1efe>
  2311ec:	eb 10                	jmp    2311fe <u64toa+0x1f0e>
  2311ee:	48 8d 3d d3 1f 01 00 	lea    rdi,[rip+0x11fd3]        # 2431c8 <__unnamed_4>
  2311f5:	31 c0                	xor    eax,eax
  2311f7:	89 c6                	mov    esi,eax
  2311f9:	e8 02 a4 fd ff       	call   20b600 <panic>
  2311fe:	8b 85 a4 f9 ff ff    	mov    eax,DWORD PTR [rbp-0x65c]
  231204:	89 c1                	mov    ecx,eax
  231206:	89 ca                	mov    edx,ecx
  231208:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  23120f:	48 89 95 98 f9 ff ff 	mov    QWORD PTR [rbp-0x668],rdx
  231216:	72 10                	jb     231228 <u64toa+0x1f38>
  231218:	48 8d 3d d9 21 01 00 	lea    rdi,[rip+0x121d9]        # 2433f8 <__unnamed_20>
  23121f:	31 c0                	xor    eax,eax
  231221:	89 c6                	mov    esi,eax
  231223:	e8 d8 a3 fd ff       	call   20b600 <panic>
  231228:	48 8d 05 f1 77 fd ff 	lea    rax,[rip+0xfffffffffffd77f1]        # 208a20 <c_digits_lut>
  23122f:	48 8b 8d 98 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x668]
  231236:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  231239:	48 8b 85 a8 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x658]
  231240:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  231242:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  231246:	48 83 c6 01          	add    rsi,0x1
  23124a:	0f 92 c2             	setb   dl
  23124d:	48 89 b5 90 f9 ff ff 	mov    QWORD PTR [rbp-0x670],rsi
  231254:	88 95 8f f9 ff ff    	mov    BYTE PTR [rbp-0x671],dl
  23125a:	72 02                	jb     23125e <u64toa+0x1f6e>
  23125c:	eb 10                	jmp    23126e <u64toa+0x1f7e>
  23125e:	48 8d 3d 63 1f 01 00 	lea    rdi,[rip+0x11f63]        # 2431c8 <__unnamed_4>
  231265:	31 c0                	xor    eax,eax
  231267:	89 c6                	mov    esi,eax
  231269:	e8 92 a3 fd ff       	call   20b600 <panic>
  23126e:	48 8b 85 90 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x670]
  231275:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d8];
  231279:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  23127d:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  231284:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  231288:	48 89 8d 80 f9 ff ff 	mov    QWORD PTR [rbp-0x680],rcx
  23128f:	72 10                	jb     2312a1 <u64toa+0x1fb1>
  231291:	48 8d 3d 60 21 01 00 	lea    rdi,[rip+0x12160]        # 2433f8 <__unnamed_20>
  231298:	31 c0                	xor    eax,eax
  23129a:	89 c6                	mov    esi,eax
  23129c:	e8 5f a3 fd ff       	call   20b600 <panic>
  2312a1:	48 8b 85 80 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x680]
  2312a8:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  2312af:	48 03 01             	add    rax,QWORD PTR [rcx]
  2312b2:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
  2312b8:	89 d6                	mov    esi,edx
  2312ba:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  2312c1:	48 89 85 78 f9 ff ff 	mov    QWORD PTR [rbp-0x688],rax
  2312c8:	48 89 b5 70 f9 ff ff 	mov    QWORD PTR [rbp-0x690],rsi
  2312cf:	72 10                	jb     2312e1 <u64toa+0x1ff1>
  2312d1:	48 8d 3d 20 21 01 00 	lea    rdi,[rip+0x12120]        # 2433f8 <__unnamed_20>
  2312d8:	31 c0                	xor    eax,eax
  2312da:	89 c6                	mov    esi,eax
  2312dc:	e8 1f a3 fd ff       	call   20b600 <panic>
  2312e1:	48 8d 05 38 77 fd ff 	lea    rax,[rip+0xfffffffffffd7738]        # 208a20 <c_digits_lut>
  2312e8:	48 8b 8d 70 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x690]
  2312ef:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  2312f2:	48 8b 85 78 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x688]
  2312f9:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  2312fb:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  2312ff:	48 83 c6 01          	add    rsi,0x1
  231303:	0f 92 c2             	setb   dl
  231306:	48 89 b5 68 f9 ff ff 	mov    QWORD PTR [rbp-0x698],rsi
  23130d:	88 95 67 f9 ff ff    	mov    BYTE PTR [rbp-0x699],dl
  231313:	72 02                	jb     231317 <u64toa+0x2027>
  231315:	eb 10                	jmp    231327 <u64toa+0x2037>
  231317:	48 8d 3d aa 1e 01 00 	lea    rdi,[rip+0x11eaa]        # 2431c8 <__unnamed_4>
  23131e:	31 c0                	xor    eax,eax
  231320:	89 c6                	mov    esi,eax
  231322:	e8 d9 a2 fd ff       	call   20b600 <panic>
  231327:	48 8b 85 68 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x698]
  23132e:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d8 + 1];
  231332:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  231336:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  23133d:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  231341:	48 89 8d 58 f9 ff ff 	mov    QWORD PTR [rbp-0x6a8],rcx
  231348:	72 10                	jb     23135a <u64toa+0x206a>
  23134a:	48 8d 3d a7 20 01 00 	lea    rdi,[rip+0x120a7]        # 2433f8 <__unnamed_20>
  231351:	31 c0                	xor    eax,eax
  231353:	89 c6                	mov    esi,eax
  231355:	e8 a6 a2 fd ff       	call   20b600 <panic>
  23135a:	48 8b 85 58 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x6a8]
  231361:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  231368:	48 03 01             	add    rax,QWORD PTR [rcx]
  23136b:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
  231371:	83 c2 01             	add    edx,0x1
  231374:	40 0f 92 c6          	setb   sil
  231378:	48 89 85 50 f9 ff ff 	mov    QWORD PTR [rbp-0x6b0],rax
  23137f:	89 95 4c f9 ff ff    	mov    DWORD PTR [rbp-0x6b4],edx
  231385:	40 88 b5 4b f9 ff ff 	mov    BYTE PTR [rbp-0x6b5],sil
  23138c:	72 02                	jb     231390 <u64toa+0x20a0>
  23138e:	eb 10                	jmp    2313a0 <u64toa+0x20b0>
  231390:	48 8d 3d 31 1e 01 00 	lea    rdi,[rip+0x11e31]        # 2431c8 <__unnamed_4>
  231397:	31 c0                	xor    eax,eax
  231399:	89 c6                	mov    esi,eax
  23139b:	e8 60 a2 fd ff       	call   20b600 <panic>
  2313a0:	8b 85 4c f9 ff ff    	mov    eax,DWORD PTR [rbp-0x6b4]
  2313a6:	89 c1                	mov    ecx,eax
  2313a8:	89 ca                	mov    edx,ecx
  2313aa:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  2313b1:	48 89 95 40 f9 ff ff 	mov    QWORD PTR [rbp-0x6c0],rdx
  2313b8:	72 10                	jb     2313ca <u64toa+0x20da>
  2313ba:	48 8d 3d 37 20 01 00 	lea    rdi,[rip+0x12037]        # 2433f8 <__unnamed_20>
  2313c1:	31 c0                	xor    eax,eax
  2313c3:	89 c6                	mov    esi,eax
  2313c5:	e8 36 a2 fd ff       	call   20b600 <panic>
  2313ca:	48 8d 05 4f 76 fd ff 	lea    rax,[rip+0xfffffffffffd764f]        # 208a20 <c_digits_lut>
  2313d1:	48 8b 8d 40 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x6c0]
  2313d8:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  2313db:	48 8b 85 50 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x6b0]
  2313e2:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  2313e4:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  2313e8:	48 83 c6 01          	add    rsi,0x1
  2313ec:	0f 92 c2             	setb   dl
  2313ef:	48 89 b5 38 f9 ff ff 	mov    QWORD PTR [rbp-0x6c8],rsi
  2313f6:	88 95 37 f9 ff ff    	mov    BYTE PTR [rbp-0x6c9],dl
  2313fc:	72 02                	jb     231400 <u64toa+0x2110>
  2313fe:	eb 10                	jmp    231410 <u64toa+0x2120>
  231400:	48 8d 3d c1 1d 01 00 	lea    rdi,[rip+0x11dc1]        # 2431c8 <__unnamed_4>
  231407:	31 c0                	xor    eax,eax
  231409:	89 c6                	mov    esi,eax
  23140b:	e8 f0 a1 fd ff       	call   20b600 <panic>
  231410:	48 8b 85 38 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x6c8]
  231417:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
    } else if (value < kTen16) {
  23141b:	e9 b4 e3 ff ff       	jmp    22f7d4 <u64toa+0x4e4>
  231420:	48 b8 00 00 c1 6f f2 	movabs rax,0x2386f26fc10000
  231427:	86 23 00 
        const a = @intCast(u32, value / kTen16); // 1 to 1844
  23142a:	48 8b 8d 48 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1b8]
  231431:	48 89 85 28 f9 ff ff 	mov    QWORD PTR [rbp-0x6d8],rax
  231438:	48 89 c8             	mov    rax,rcx
  23143b:	31 d2                	xor    edx,edx
  23143d:	48 8b b5 28 f9 ff ff 	mov    rsi,QWORD PTR [rbp-0x6d8]
  231444:	48 f7 f6             	div    rsi
  231447:	89 c7                	mov    edi,eax
  231449:	41 89 f8             	mov    r8d,edi
  23144c:	45 89 c1             	mov    r9d,r8d
  23144f:	4c 39 c8             	cmp    rax,r9
  231452:	89 bd 24 f9 ff ff    	mov    DWORD PTR [rbp-0x6dc],edi
  231458:	74 12                	je     23146c <u64toa+0x217c>
  23145a:	eb 32                	jmp    23148e <u64toa+0x219e>
  23145c:	48 8d 3d dd 1d 01 00 	lea    rdi,[rip+0x11ddd]        # 243240 <__unnamed_7>
  231463:	31 c0                	xor    eax,eax
  231465:	89 c6                	mov    esi,eax
  231467:	e8 94 a1 fd ff       	call   20b600 <panic>
  23146c:	31 c0                	xor    eax,eax
  23146e:	88 c1                	mov    cl,al
  231470:	8b 85 24 f9 ff ff    	mov    eax,DWORD PTR [rbp-0x6dc]
  231476:	89 85 40 ff ff ff    	mov    DWORD PTR [rbp-0xc0],eax
        value %= kTen16;
  23147c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  231480:	f6 c1 01             	test   cl,0x1
  231483:	48 89 85 18 f9 ff ff 	mov    QWORD PTR [rbp-0x6e8],rax
  23148a:	75 4f                	jne    2314db <u64toa+0x21eb>
  23148c:	eb 10                	jmp    23149e <u64toa+0x21ae>
  23148e:	48 8d 3d 13 20 01 00 	lea    rdi,[rip+0x12013]        # 2434a8 <__unnamed_22>
  231495:	31 c0                	xor    eax,eax
  231497:	89 c6                	mov    esi,eax
        const a = @intCast(u32, value / kTen16); // 1 to 1844
  231499:	e8 62 a1 fd ff       	call   20b600 <panic>
  23149e:	48 b8 00 00 c1 6f f2 	movabs rax,0x2386f26fc10000
  2314a5:	86 23 00 
        value %= kTen16;
  2314a8:	48 8b 8d 18 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x6e8]
  2314af:	48 89 85 10 f9 ff ff 	mov    QWORD PTR [rbp-0x6f0],rax
  2314b6:	48 89 c8             	mov    rax,rcx
  2314b9:	31 d2                	xor    edx,edx
  2314bb:	48 8b b5 10 f9 ff ff 	mov    rsi,QWORD PTR [rbp-0x6f0]
  2314c2:	48 f7 f6             	div    rsi
  2314c5:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
        if (a < 10) {
  2314c9:	83 bd 40 ff ff ff 0a 	cmp    DWORD PTR [rbp-0xc0],0xa
  2314d0:	0f 82 38 e2 ff ff    	jb     22f70e <u64toa+0x41e>
  2314d6:	e9 54 e2 ff ff       	jmp    22f72f <u64toa+0x43f>
  2314db:	48 8d 3d 16 1e 01 00 	lea    rdi,[rip+0x11e16]        # 2432f8 <__unnamed_15>
  2314e2:	31 c0                	xor    eax,eax
  2314e4:	89 c6                	mov    esi,eax
        value %= kTen16;
  2314e6:	e8 15 a1 fd ff       	call   20b600 <panic>
  2314eb:	48 8d 3d 06 1f 01 00 	lea    rdi,[rip+0x11f06]        # 2433f8 <__unnamed_20>
  2314f2:	31 c0                	xor    eax,eax
  2314f4:	89 c6                	mov    esi,eax
            buffer[buf_index] = '0' + @intCast(u8, a);
  2314f6:	e8 05 a1 fd ff       	call   20b600 <panic>
  2314fb:	48 8b 85 40 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c0]
  231502:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  231509:	48 03 01             	add    rax,QWORD PTR [rcx]
  23150c:	8b 95 40 ff ff ff    	mov    edx,DWORD PTR [rbp-0xc0]
  231512:	40 88 d6             	mov    sil,dl
  231515:	40 0f b6 fe          	movzx  edi,sil
  231519:	39 fa                	cmp    edx,edi
  23151b:	48 89 85 08 f9 ff ff 	mov    QWORD PTR [rbp-0x6f8],rax
  231522:	40 88 b5 07 f9 ff ff 	mov    BYTE PTR [rbp-0x6f9],sil
  231529:	75 18                	jne    231543 <u64toa+0x2253>
  23152b:	8a 85 07 f9 ff ff    	mov    al,BYTE PTR [rbp-0x6f9]
  231531:	04 30                	add    al,0x30
  231533:	0f 92 c1             	setb   cl
  231536:	f6 c1 01             	test   cl,0x1
  231539:	88 85 06 f9 ff ff    	mov    BYTE PTR [rbp-0x6fa],al
  23153f:	75 12                	jne    231553 <u64toa+0x2263>
  231541:	eb 20                	jmp    231563 <u64toa+0x2273>
  231543:	48 8d 3d 5e 1f 01 00 	lea    rdi,[rip+0x11f5e]        # 2434a8 <__unnamed_22>
  23154a:	31 c0                	xor    eax,eax
  23154c:	89 c6                	mov    esi,eax
  23154e:	e8 ad a0 fd ff       	call   20b600 <panic>
  231553:	48 8d 3d 6e 1c 01 00 	lea    rdi,[rip+0x11c6e]        # 2431c8 <__unnamed_4>
  23155a:	31 c0                	xor    eax,eax
  23155c:	89 c6                	mov    esi,eax
  23155e:	e8 9d a0 fd ff       	call   20b600 <panic>
  231563:	48 8b 85 08 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x6f8]
  23156a:	8a 8d 06 f9 ff ff    	mov    cl,BYTE PTR [rbp-0x6fa]
  231570:	88 08                	mov    BYTE PTR [rax],cl
            buf_index += 1;
  231572:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  231576:	48 83 c2 01          	add    rdx,0x1
  23157a:	40 0f 92 c6          	setb   sil
  23157e:	48 89 95 f8 f8 ff ff 	mov    QWORD PTR [rbp-0x708],rdx
  231585:	40 88 b5 f7 f8 ff ff 	mov    BYTE PTR [rbp-0x709],sil
  23158c:	72 02                	jb     231590 <u64toa+0x22a0>
  23158e:	eb 10                	jmp    2315a0 <u64toa+0x22b0>
  231590:	48 8d 3d 31 1c 01 00 	lea    rdi,[rip+0x11c31]        # 2431c8 <__unnamed_4>
  231597:	31 c0                	xor    eax,eax
  231599:	89 c6                	mov    esi,eax
  23159b:	e8 60 a0 fd ff       	call   20b600 <panic>
  2315a0:	48 8b 85 f8 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x708]
  2315a7:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        if (a < 10) {
  2315ab:	e9 07 e2 ff ff       	jmp    22f7b7 <u64toa+0x4c7>
  2315b0:	48 8d 3d 41 1e 01 00 	lea    rdi,[rip+0x11e41]        # 2433f8 <__unnamed_20>
  2315b7:	31 c0                	xor    eax,eax
  2315b9:	89 c6                	mov    esi,eax
            buffer[buf_index] = c_digits_lut[i];
  2315bb:	e8 40 a0 fd ff       	call   20b600 <panic>
  2315c0:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  2315c7:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  2315ce:	48 03 01             	add    rax,QWORD PTR [rcx]
  2315d1:	8b 95 3c ff ff ff    	mov    edx,DWORD PTR [rbp-0xc4]
  2315d7:	89 d6                	mov    esi,edx
  2315d9:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  2315e0:	48 89 85 e8 f8 ff ff 	mov    QWORD PTR [rbp-0x718],rax
  2315e7:	48 89 b5 e0 f8 ff ff 	mov    QWORD PTR [rbp-0x720],rsi
  2315ee:	72 10                	jb     231600 <u64toa+0x2310>
  2315f0:	48 8d 3d 01 1e 01 00 	lea    rdi,[rip+0x11e01]        # 2433f8 <__unnamed_20>
  2315f7:	31 c0                	xor    eax,eax
  2315f9:	89 c6                	mov    esi,eax
  2315fb:	e8 00 a0 fd ff       	call   20b600 <panic>
  231600:	48 8d 05 19 74 fd ff 	lea    rax,[rip+0xfffffffffffd7419]        # 208a20 <c_digits_lut>
  231607:	48 8b 8d e0 f8 ff ff 	mov    rcx,QWORD PTR [rbp-0x720]
  23160e:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  231611:	48 8b 85 e8 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x718]
  231618:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  23161a:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  23161e:	48 83 c6 01          	add    rsi,0x1
  231622:	0f 92 c2             	setb   dl
  231625:	48 89 b5 d8 f8 ff ff 	mov    QWORD PTR [rbp-0x728],rsi
  23162c:	88 95 d7 f8 ff ff    	mov    BYTE PTR [rbp-0x729],dl
  231632:	72 02                	jb     231636 <u64toa+0x2346>
  231634:	eb 10                	jmp    231646 <u64toa+0x2356>
  231636:	48 8d 3d 8b 1b 01 00 	lea    rdi,[rip+0x11b8b]        # 2431c8 <__unnamed_4>
  23163d:	31 c0                	xor    eax,eax
  23163f:	89 c6                	mov    esi,eax
  231641:	e8 ba 9f fd ff       	call   20b600 <panic>
  231646:	48 8b 85 d8 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x728]
  23164d:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            buffer[buf_index] = c_digits_lut[i + 1];
  231651:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  231655:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  23165c:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  231660:	48 89 8d c8 f8 ff ff 	mov    QWORD PTR [rbp-0x738],rcx
  231667:	72 10                	jb     231679 <u64toa+0x2389>
  231669:	48 8d 3d 88 1d 01 00 	lea    rdi,[rip+0x11d88]        # 2433f8 <__unnamed_20>
  231670:	31 c0                	xor    eax,eax
  231672:	89 c6                	mov    esi,eax
  231674:	e8 87 9f fd ff       	call   20b600 <panic>
  231679:	48 8b 85 c8 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x738]
  231680:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  231687:	48 03 01             	add    rax,QWORD PTR [rcx]
  23168a:	8b 95 3c ff ff ff    	mov    edx,DWORD PTR [rbp-0xc4]
  231690:	83 c2 01             	add    edx,0x1
  231693:	40 0f 92 c6          	setb   sil
  231697:	48 89 85 c0 f8 ff ff 	mov    QWORD PTR [rbp-0x740],rax
  23169e:	89 95 bc f8 ff ff    	mov    DWORD PTR [rbp-0x744],edx
  2316a4:	40 88 b5 bb f8 ff ff 	mov    BYTE PTR [rbp-0x745],sil
  2316ab:	72 02                	jb     2316af <u64toa+0x23bf>
  2316ad:	eb 10                	jmp    2316bf <u64toa+0x23cf>
  2316af:	48 8d 3d 12 1b 01 00 	lea    rdi,[rip+0x11b12]        # 2431c8 <__unnamed_4>
  2316b6:	31 c0                	xor    eax,eax
  2316b8:	89 c6                	mov    esi,eax
  2316ba:	e8 41 9f fd ff       	call   20b600 <panic>
  2316bf:	8b 85 bc f8 ff ff    	mov    eax,DWORD PTR [rbp-0x744]
  2316c5:	89 c1                	mov    ecx,eax
  2316c7:	89 ca                	mov    edx,ecx
  2316c9:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  2316d0:	48 89 95 b0 f8 ff ff 	mov    QWORD PTR [rbp-0x750],rdx
  2316d7:	72 10                	jb     2316e9 <u64toa+0x23f9>
  2316d9:	48 8d 3d 18 1d 01 00 	lea    rdi,[rip+0x11d18]        # 2433f8 <__unnamed_20>
  2316e0:	31 c0                	xor    eax,eax
  2316e2:	89 c6                	mov    esi,eax
  2316e4:	e8 17 9f fd ff       	call   20b600 <panic>
  2316e9:	48 8d 05 30 73 fd ff 	lea    rax,[rip+0xfffffffffffd7330]        # 208a20 <c_digits_lut>
  2316f0:	48 8b 8d b0 f8 ff ff 	mov    rcx,QWORD PTR [rbp-0x750]
  2316f7:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  2316fa:	48 8b 85 c0 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x740]
  231701:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  231703:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  231707:	48 83 c6 01          	add    rsi,0x1
  23170b:	0f 92 c2             	setb   dl
  23170e:	48 89 b5 a8 f8 ff ff 	mov    QWORD PTR [rbp-0x758],rsi
  231715:	88 95 a7 f8 ff ff    	mov    BYTE PTR [rbp-0x759],dl
  23171b:	72 02                	jb     23171f <u64toa+0x242f>
  23171d:	eb 10                	jmp    23172f <u64toa+0x243f>
  23171f:	48 8d 3d a2 1a 01 00 	lea    rdi,[rip+0x11aa2]        # 2431c8 <__unnamed_4>
  231726:	31 c0                	xor    eax,eax
  231728:	89 c6                	mov    esi,eax
  23172a:	e8 d1 9e fd ff       	call   20b600 <panic>
  23172f:	48 8b 85 a8 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x758]
  231736:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        } else if (a < 100) {
  23173a:	e9 76 e0 ff ff       	jmp    22f7b5 <u64toa+0x4c5>
  23173f:	48 8d 3d b2 1c 01 00 	lea    rdi,[rip+0x11cb2]        # 2433f8 <__unnamed_20>
  231746:	31 c0                	xor    eax,eax
  231748:	89 c6                	mov    esi,eax
            buffer[buf_index] = '0' + @intCast(u8, a / 100);
  23174a:	e8 b1 9e fd ff       	call   20b600 <panic>
  23174f:	31 c0                	xor    eax,eax
  231751:	88 c1                	mov    cl,al
  231753:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  23175a:	48 8b b5 f0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x110]
  231761:	48 03 16             	add    rdx,QWORD PTR [rsi]
  231764:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
  23176a:	f6 c1 01             	test   cl,0x1
  23176d:	89 85 a0 f8 ff ff    	mov    DWORD PTR [rbp-0x760],eax
  231773:	48 89 95 98 f8 ff ff 	mov    QWORD PTR [rbp-0x768],rdx
  23177a:	75 32                	jne    2317ae <u64toa+0x24be>
  23177c:	b8 64 00 00 00       	mov    eax,0x64
  231781:	8b 8d a0 f8 ff ff    	mov    ecx,DWORD PTR [rbp-0x760]
  231787:	89 85 94 f8 ff ff    	mov    DWORD PTR [rbp-0x76c],eax
  23178d:	89 c8                	mov    eax,ecx
  23178f:	31 d2                	xor    edx,edx
  231791:	8b b5 94 f8 ff ff    	mov    esi,DWORD PTR [rbp-0x76c]
  231797:	f7 f6                	div    esi
  231799:	40 88 c7             	mov    dil,al
  23179c:	44 0f b6 c7          	movzx  r8d,dil
  2317a0:	44 39 c0             	cmp    eax,r8d
  2317a3:	40 88 bd 93 f8 ff ff 	mov    BYTE PTR [rbp-0x76d],dil
  2317aa:	74 12                	je     2317be <u64toa+0x24ce>
  2317ac:	eb 28                	jmp    2317d6 <u64toa+0x24e6>
  2317ae:	48 8d 3d 8b 1a 01 00 	lea    rdi,[rip+0x11a8b]        # 243240 <__unnamed_7>
  2317b5:	31 c0                	xor    eax,eax
  2317b7:	89 c6                	mov    esi,eax
  2317b9:	e8 42 9e fd ff       	call   20b600 <panic>
  2317be:	8a 85 93 f8 ff ff    	mov    al,BYTE PTR [rbp-0x76d]
  2317c4:	04 30                	add    al,0x30
  2317c6:	0f 92 c1             	setb   cl
  2317c9:	f6 c1 01             	test   cl,0x1
  2317cc:	88 85 92 f8 ff ff    	mov    BYTE PTR [rbp-0x76e],al
  2317d2:	75 12                	jne    2317e6 <u64toa+0x24f6>
  2317d4:	eb 20                	jmp    2317f6 <u64toa+0x2506>
  2317d6:	48 8d 3d cb 1c 01 00 	lea    rdi,[rip+0x11ccb]        # 2434a8 <__unnamed_22>
  2317dd:	31 c0                	xor    eax,eax
  2317df:	89 c6                	mov    esi,eax
  2317e1:	e8 1a 9e fd ff       	call   20b600 <panic>
  2317e6:	48 8d 3d db 19 01 00 	lea    rdi,[rip+0x119db]        # 2431c8 <__unnamed_4>
  2317ed:	31 c0                	xor    eax,eax
  2317ef:	89 c6                	mov    esi,eax
  2317f1:	e8 0a 9e fd ff       	call   20b600 <panic>
  2317f6:	48 8b 85 98 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x768]
  2317fd:	8a 8d 92 f8 ff ff    	mov    cl,BYTE PTR [rbp-0x76e]
  231803:	88 08                	mov    BYTE PTR [rax],cl
            buf_index += 1;
  231805:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  231809:	48 83 c2 01          	add    rdx,0x1
  23180d:	40 0f 92 c6          	setb   sil
  231811:	48 89 95 88 f8 ff ff 	mov    QWORD PTR [rbp-0x778],rdx
  231818:	40 88 b5 87 f8 ff ff 	mov    BYTE PTR [rbp-0x779],sil
  23181f:	72 02                	jb     231823 <u64toa+0x2533>
  231821:	eb 10                	jmp    231833 <u64toa+0x2543>
  231823:	48 8d 3d 9e 19 01 00 	lea    rdi,[rip+0x1199e]        # 2431c8 <__unnamed_4>
  23182a:	31 c0                	xor    eax,eax
  23182c:	89 c6                	mov    esi,eax
  23182e:	e8 cd 9d fd ff       	call   20b600 <panic>
  231833:	31 c0                	xor    eax,eax
  231835:	88 c1                	mov    cl,al
  231837:	48 8b 95 88 f8 ff ff 	mov    rdx,QWORD PTR [rbp-0x778]
  23183e:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
            const i: u32 = (a % 100) << 1;
  231842:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
  231848:	f6 c1 01             	test   cl,0x1
  23184b:	89 85 80 f8 ff ff    	mov    DWORD PTR [rbp-0x780],eax
  231851:	75 40                	jne    231893 <u64toa+0x25a3>
  231853:	b8 64 00 00 00       	mov    eax,0x64
  231858:	8b 8d 80 f8 ff ff    	mov    ecx,DWORD PTR [rbp-0x780]
  23185e:	89 85 7c f8 ff ff    	mov    DWORD PTR [rbp-0x784],eax
  231864:	89 c8                	mov    eax,ecx
  231866:	31 d2                	xor    edx,edx
  231868:	8b b5 7c f8 ff ff    	mov    esi,DWORD PTR [rbp-0x784]
  23186e:	f7 f6                	div    esi
  231870:	c1 e2 01             	shl    edx,0x1
  231873:	89 95 38 ff ff ff    	mov    DWORD PTR [rbp-0xc8],edx
            buffer[buf_index] = c_digits_lut[i];
  231879:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  23187d:	4c 8b 85 f0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x110]
  231884:	49 3b 78 08          	cmp    rdi,QWORD PTR [r8+0x8]
  231888:	48 89 bd 70 f8 ff ff 	mov    QWORD PTR [rbp-0x790],rdi
  23188f:	72 22                	jb     2318b3 <u64toa+0x25c3>
  231891:	eb 10                	jmp    2318a3 <u64toa+0x25b3>
  231893:	48 8d 3d 5e 1a 01 00 	lea    rdi,[rip+0x11a5e]        # 2432f8 <__unnamed_15>
  23189a:	31 c0                	xor    eax,eax
  23189c:	89 c6                	mov    esi,eax
            const i: u32 = (a % 100) << 1;
  23189e:	e8 5d 9d fd ff       	call   20b600 <panic>
  2318a3:	48 8d 3d 4e 1b 01 00 	lea    rdi,[rip+0x11b4e]        # 2433f8 <__unnamed_20>
  2318aa:	31 c0                	xor    eax,eax
  2318ac:	89 c6                	mov    esi,eax
            buffer[buf_index] = c_digits_lut[i];
  2318ae:	e8 4d 9d fd ff       	call   20b600 <panic>
  2318b3:	48 8b 85 70 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x790]
  2318ba:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  2318c1:	48 03 01             	add    rax,QWORD PTR [rcx]
  2318c4:	8b 95 38 ff ff ff    	mov    edx,DWORD PTR [rbp-0xc8]
  2318ca:	89 d6                	mov    esi,edx
  2318cc:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  2318d3:	48 89 85 68 f8 ff ff 	mov    QWORD PTR [rbp-0x798],rax
  2318da:	48 89 b5 60 f8 ff ff 	mov    QWORD PTR [rbp-0x7a0],rsi
  2318e1:	72 10                	jb     2318f3 <u64toa+0x2603>
  2318e3:	48 8d 3d 0e 1b 01 00 	lea    rdi,[rip+0x11b0e]        # 2433f8 <__unnamed_20>
  2318ea:	31 c0                	xor    eax,eax
  2318ec:	89 c6                	mov    esi,eax
  2318ee:	e8 0d 9d fd ff       	call   20b600 <panic>
  2318f3:	48 8d 05 26 71 fd ff 	lea    rax,[rip+0xfffffffffffd7126]        # 208a20 <c_digits_lut>
  2318fa:	48 8b 8d 60 f8 ff ff 	mov    rcx,QWORD PTR [rbp-0x7a0]
  231901:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  231904:	48 8b 85 68 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x798]
  23190b:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  23190d:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  231911:	48 83 c6 01          	add    rsi,0x1
  231915:	0f 92 c2             	setb   dl
  231918:	48 89 b5 58 f8 ff ff 	mov    QWORD PTR [rbp-0x7a8],rsi
  23191f:	88 95 57 f8 ff ff    	mov    BYTE PTR [rbp-0x7a9],dl
  231925:	72 02                	jb     231929 <u64toa+0x2639>
  231927:	eb 10                	jmp    231939 <u64toa+0x2649>
  231929:	48 8d 3d 98 18 01 00 	lea    rdi,[rip+0x11898]        # 2431c8 <__unnamed_4>
  231930:	31 c0                	xor    eax,eax
  231932:	89 c6                	mov    esi,eax
  231934:	e8 c7 9c fd ff       	call   20b600 <panic>
  231939:	48 8b 85 58 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x7a8]
  231940:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            buffer[buf_index] = c_digits_lut[i + 1];
  231944:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  231948:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  23194f:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  231953:	48 89 8d 48 f8 ff ff 	mov    QWORD PTR [rbp-0x7b8],rcx
  23195a:	72 10                	jb     23196c <u64toa+0x267c>
  23195c:	48 8d 3d 95 1a 01 00 	lea    rdi,[rip+0x11a95]        # 2433f8 <__unnamed_20>
  231963:	31 c0                	xor    eax,eax
  231965:	89 c6                	mov    esi,eax
  231967:	e8 94 9c fd ff       	call   20b600 <panic>
  23196c:	48 8b 85 48 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x7b8]
  231973:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  23197a:	48 03 01             	add    rax,QWORD PTR [rcx]
  23197d:	8b 95 38 ff ff ff    	mov    edx,DWORD PTR [rbp-0xc8]
  231983:	83 c2 01             	add    edx,0x1
  231986:	40 0f 92 c6          	setb   sil
  23198a:	48 89 85 40 f8 ff ff 	mov    QWORD PTR [rbp-0x7c0],rax
  231991:	89 95 3c f8 ff ff    	mov    DWORD PTR [rbp-0x7c4],edx
  231997:	40 88 b5 3b f8 ff ff 	mov    BYTE PTR [rbp-0x7c5],sil
  23199e:	72 02                	jb     2319a2 <u64toa+0x26b2>
  2319a0:	eb 10                	jmp    2319b2 <u64toa+0x26c2>
  2319a2:	48 8d 3d 1f 18 01 00 	lea    rdi,[rip+0x1181f]        # 2431c8 <__unnamed_4>
  2319a9:	31 c0                	xor    eax,eax
  2319ab:	89 c6                	mov    esi,eax
  2319ad:	e8 4e 9c fd ff       	call   20b600 <panic>
  2319b2:	8b 85 3c f8 ff ff    	mov    eax,DWORD PTR [rbp-0x7c4]
  2319b8:	89 c1                	mov    ecx,eax
  2319ba:	89 ca                	mov    edx,ecx
  2319bc:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  2319c3:	48 89 95 30 f8 ff ff 	mov    QWORD PTR [rbp-0x7d0],rdx
  2319ca:	72 10                	jb     2319dc <u64toa+0x26ec>
  2319cc:	48 8d 3d 25 1a 01 00 	lea    rdi,[rip+0x11a25]        # 2433f8 <__unnamed_20>
  2319d3:	31 c0                	xor    eax,eax
  2319d5:	89 c6                	mov    esi,eax
  2319d7:	e8 24 9c fd ff       	call   20b600 <panic>
  2319dc:	48 8d 05 3d 70 fd ff 	lea    rax,[rip+0xfffffffffffd703d]        # 208a20 <c_digits_lut>
  2319e3:	48 8b 8d 30 f8 ff ff 	mov    rcx,QWORD PTR [rbp-0x7d0]
  2319ea:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  2319ed:	48 8b 85 40 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x7c0]
  2319f4:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  2319f6:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  2319fa:	48 83 c6 01          	add    rsi,0x1
  2319fe:	0f 92 c2             	setb   dl
  231a01:	48 89 b5 28 f8 ff ff 	mov    QWORD PTR [rbp-0x7d8],rsi
  231a08:	88 95 27 f8 ff ff    	mov    BYTE PTR [rbp-0x7d9],dl
  231a0e:	72 02                	jb     231a12 <u64toa+0x2722>
  231a10:	eb 10                	jmp    231a22 <u64toa+0x2732>
  231a12:	48 8d 3d af 17 01 00 	lea    rdi,[rip+0x117af]        # 2431c8 <__unnamed_4>
  231a19:	31 c0                	xor    eax,eax
  231a1b:	89 c6                	mov    esi,eax
  231a1d:	e8 de 9b fd ff       	call   20b600 <panic>
  231a22:	48 8b 85 28 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x7d8]
  231a29:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        } else if (a < 1000) {
  231a2d:	e9 81 dd ff ff       	jmp    22f7b3 <u64toa+0x4c3>
  231a32:	31 c0                	xor    eax,eax
  231a34:	88 c1                	mov    cl,al
  231a36:	b8 64 00 00 00       	mov    eax,0x64
            const i: u32 = (a / 100) << 1;
  231a3b:	8b 95 2c fe ff ff    	mov    edx,DWORD PTR [rbp-0x1d4]
  231a41:	89 85 20 f8 ff ff    	mov    DWORD PTR [rbp-0x7e0],eax
  231a47:	89 d0                	mov    eax,edx
  231a49:	31 d2                	xor    edx,edx
  231a4b:	8b b5 20 f8 ff ff    	mov    esi,DWORD PTR [rbp-0x7e0]
  231a51:	f7 f6                	div    esi
  231a53:	c1 e0 01             	shl    eax,0x1
  231a56:	89 85 34 ff ff ff    	mov    DWORD PTR [rbp-0xcc],eax
            const j: u32 = (a % 100) << 1;
  231a5c:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
  231a62:	f6 c1 01             	test   cl,0x1
  231a65:	89 85 1c f8 ff ff    	mov    DWORD PTR [rbp-0x7e4],eax
  231a6b:	75 52                	jne    231abf <u64toa+0x27cf>
  231a6d:	eb 10                	jmp    231a7f <u64toa+0x278f>
  231a6f:	48 8d 3d ca 17 01 00 	lea    rdi,[rip+0x117ca]        # 243240 <__unnamed_7>
  231a76:	31 c0                	xor    eax,eax
  231a78:	89 c6                	mov    esi,eax
            const i: u32 = (a / 100) << 1;
  231a7a:	e8 81 9b fd ff       	call   20b600 <panic>
  231a7f:	b8 64 00 00 00       	mov    eax,0x64
            const j: u32 = (a % 100) << 1;
  231a84:	8b 8d 1c f8 ff ff    	mov    ecx,DWORD PTR [rbp-0x7e4]
  231a8a:	89 85 18 f8 ff ff    	mov    DWORD PTR [rbp-0x7e8],eax
  231a90:	89 c8                	mov    eax,ecx
  231a92:	31 d2                	xor    edx,edx
  231a94:	8b b5 18 f8 ff ff    	mov    esi,DWORD PTR [rbp-0x7e8]
  231a9a:	f7 f6                	div    esi
  231a9c:	c1 e2 01             	shl    edx,0x1
  231a9f:	89 95 30 ff ff ff    	mov    DWORD PTR [rbp-0xd0],edx
            buffer[buf_index] = c_digits_lut[i];
  231aa5:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  231aa9:	4c 8b 85 f0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x110]
  231ab0:	49 3b 78 08          	cmp    rdi,QWORD PTR [r8+0x8]
  231ab4:	48 89 bd 10 f8 ff ff 	mov    QWORD PTR [rbp-0x7f0],rdi
  231abb:	72 22                	jb     231adf <u64toa+0x27ef>
  231abd:	eb 10                	jmp    231acf <u64toa+0x27df>
  231abf:	48 8d 3d 32 18 01 00 	lea    rdi,[rip+0x11832]        # 2432f8 <__unnamed_15>
  231ac6:	31 c0                	xor    eax,eax
  231ac8:	89 c6                	mov    esi,eax
            const j: u32 = (a % 100) << 1;
  231aca:	e8 31 9b fd ff       	call   20b600 <panic>
  231acf:	48 8d 3d 22 19 01 00 	lea    rdi,[rip+0x11922]        # 2433f8 <__unnamed_20>
  231ad6:	31 c0                	xor    eax,eax
  231ad8:	89 c6                	mov    esi,eax
            buffer[buf_index] = c_digits_lut[i];
  231ada:	e8 21 9b fd ff       	call   20b600 <panic>
  231adf:	48 8b 85 10 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x7f0]
  231ae6:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  231aed:	48 03 01             	add    rax,QWORD PTR [rcx]
  231af0:	8b 95 34 ff ff ff    	mov    edx,DWORD PTR [rbp-0xcc]
  231af6:	89 d6                	mov    esi,edx
  231af8:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  231aff:	48 89 85 08 f8 ff ff 	mov    QWORD PTR [rbp-0x7f8],rax
  231b06:	48 89 b5 00 f8 ff ff 	mov    QWORD PTR [rbp-0x800],rsi
  231b0d:	72 10                	jb     231b1f <u64toa+0x282f>
  231b0f:	48 8d 3d e2 18 01 00 	lea    rdi,[rip+0x118e2]        # 2433f8 <__unnamed_20>
  231b16:	31 c0                	xor    eax,eax
  231b18:	89 c6                	mov    esi,eax
  231b1a:	e8 e1 9a fd ff       	call   20b600 <panic>
  231b1f:	48 8d 05 fa 6e fd ff 	lea    rax,[rip+0xfffffffffffd6efa]        # 208a20 <c_digits_lut>
  231b26:	48 8b 8d 00 f8 ff ff 	mov    rcx,QWORD PTR [rbp-0x800]
  231b2d:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  231b30:	48 8b 85 08 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x7f8]
  231b37:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  231b39:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  231b3d:	48 83 c6 01          	add    rsi,0x1
  231b41:	0f 92 c2             	setb   dl
  231b44:	48 89 b5 f8 f7 ff ff 	mov    QWORD PTR [rbp-0x808],rsi
  231b4b:	88 95 f7 f7 ff ff    	mov    BYTE PTR [rbp-0x809],dl
  231b51:	72 02                	jb     231b55 <u64toa+0x2865>
  231b53:	eb 10                	jmp    231b65 <u64toa+0x2875>
  231b55:	48 8d 3d 6c 16 01 00 	lea    rdi,[rip+0x1166c]        # 2431c8 <__unnamed_4>
  231b5c:	31 c0                	xor    eax,eax
  231b5e:	89 c6                	mov    esi,eax
  231b60:	e8 9b 9a fd ff       	call   20b600 <panic>
  231b65:	48 8b 85 f8 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x808]
  231b6c:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            buffer[buf_index] = c_digits_lut[i + 1];
  231b70:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  231b74:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  231b7b:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  231b7f:	48 89 8d e8 f7 ff ff 	mov    QWORD PTR [rbp-0x818],rcx
  231b86:	72 10                	jb     231b98 <u64toa+0x28a8>
  231b88:	48 8d 3d 69 18 01 00 	lea    rdi,[rip+0x11869]        # 2433f8 <__unnamed_20>
  231b8f:	31 c0                	xor    eax,eax
  231b91:	89 c6                	mov    esi,eax
  231b93:	e8 68 9a fd ff       	call   20b600 <panic>
  231b98:	48 8b 85 e8 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x818]
  231b9f:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  231ba6:	48 03 01             	add    rax,QWORD PTR [rcx]
  231ba9:	8b 95 34 ff ff ff    	mov    edx,DWORD PTR [rbp-0xcc]
  231baf:	83 c2 01             	add    edx,0x1
  231bb2:	40 0f 92 c6          	setb   sil
  231bb6:	48 89 85 e0 f7 ff ff 	mov    QWORD PTR [rbp-0x820],rax
  231bbd:	89 95 dc f7 ff ff    	mov    DWORD PTR [rbp-0x824],edx
  231bc3:	40 88 b5 db f7 ff ff 	mov    BYTE PTR [rbp-0x825],sil
  231bca:	72 02                	jb     231bce <u64toa+0x28de>
  231bcc:	eb 10                	jmp    231bde <u64toa+0x28ee>
  231bce:	48 8d 3d f3 15 01 00 	lea    rdi,[rip+0x115f3]        # 2431c8 <__unnamed_4>
  231bd5:	31 c0                	xor    eax,eax
  231bd7:	89 c6                	mov    esi,eax
  231bd9:	e8 22 9a fd ff       	call   20b600 <panic>
  231bde:	8b 85 dc f7 ff ff    	mov    eax,DWORD PTR [rbp-0x824]
  231be4:	89 c1                	mov    ecx,eax
  231be6:	89 ca                	mov    edx,ecx
  231be8:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  231bef:	48 89 95 d0 f7 ff ff 	mov    QWORD PTR [rbp-0x830],rdx
  231bf6:	72 10                	jb     231c08 <u64toa+0x2918>
  231bf8:	48 8d 3d f9 17 01 00 	lea    rdi,[rip+0x117f9]        # 2433f8 <__unnamed_20>
  231bff:	31 c0                	xor    eax,eax
  231c01:	89 c6                	mov    esi,eax
  231c03:	e8 f8 99 fd ff       	call   20b600 <panic>
  231c08:	48 8d 05 11 6e fd ff 	lea    rax,[rip+0xfffffffffffd6e11]        # 208a20 <c_digits_lut>
  231c0f:	48 8b 8d d0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x830]
  231c16:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  231c19:	48 8b 85 e0 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x820]
  231c20:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  231c22:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  231c26:	48 83 c6 01          	add    rsi,0x1
  231c2a:	0f 92 c2             	setb   dl
  231c2d:	48 89 b5 c8 f7 ff ff 	mov    QWORD PTR [rbp-0x838],rsi
  231c34:	88 95 c7 f7 ff ff    	mov    BYTE PTR [rbp-0x839],dl
  231c3a:	72 02                	jb     231c3e <u64toa+0x294e>
  231c3c:	eb 10                	jmp    231c4e <u64toa+0x295e>
  231c3e:	48 8d 3d 83 15 01 00 	lea    rdi,[rip+0x11583]        # 2431c8 <__unnamed_4>
  231c45:	31 c0                	xor    eax,eax
  231c47:	89 c6                	mov    esi,eax
  231c49:	e8 b2 99 fd ff       	call   20b600 <panic>
  231c4e:	48 8b 85 c8 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x838]
  231c55:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            buffer[buf_index] = c_digits_lut[j];
  231c59:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  231c5d:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  231c64:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  231c68:	48 89 8d b8 f7 ff ff 	mov    QWORD PTR [rbp-0x848],rcx
  231c6f:	72 10                	jb     231c81 <u64toa+0x2991>
  231c71:	48 8d 3d 80 17 01 00 	lea    rdi,[rip+0x11780]        # 2433f8 <__unnamed_20>
  231c78:	31 c0                	xor    eax,eax
  231c7a:	89 c6                	mov    esi,eax
  231c7c:	e8 7f 99 fd ff       	call   20b600 <panic>
  231c81:	48 8b 85 b8 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x848]
  231c88:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  231c8f:	48 03 01             	add    rax,QWORD PTR [rcx]
  231c92:	8b 95 30 ff ff ff    	mov    edx,DWORD PTR [rbp-0xd0]
  231c98:	89 d6                	mov    esi,edx
  231c9a:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  231ca1:	48 89 85 b0 f7 ff ff 	mov    QWORD PTR [rbp-0x850],rax
  231ca8:	48 89 b5 a8 f7 ff ff 	mov    QWORD PTR [rbp-0x858],rsi
  231caf:	72 10                	jb     231cc1 <u64toa+0x29d1>
  231cb1:	48 8d 3d 40 17 01 00 	lea    rdi,[rip+0x11740]        # 2433f8 <__unnamed_20>
  231cb8:	31 c0                	xor    eax,eax
  231cba:	89 c6                	mov    esi,eax
  231cbc:	e8 3f 99 fd ff       	call   20b600 <panic>
  231cc1:	48 8d 05 58 6d fd ff 	lea    rax,[rip+0xfffffffffffd6d58]        # 208a20 <c_digits_lut>
  231cc8:	48 8b 8d a8 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x858]
  231ccf:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  231cd2:	48 8b 85 b0 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x850]
  231cd9:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  231cdb:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  231cdf:	48 83 c6 01          	add    rsi,0x1
  231ce3:	0f 92 c2             	setb   dl
  231ce6:	48 89 b5 a0 f7 ff ff 	mov    QWORD PTR [rbp-0x860],rsi
  231ced:	88 95 9f f7 ff ff    	mov    BYTE PTR [rbp-0x861],dl
  231cf3:	72 02                	jb     231cf7 <u64toa+0x2a07>
  231cf5:	eb 10                	jmp    231d07 <u64toa+0x2a17>
  231cf7:	48 8d 3d ca 14 01 00 	lea    rdi,[rip+0x114ca]        # 2431c8 <__unnamed_4>
  231cfe:	31 c0                	xor    eax,eax
  231d00:	89 c6                	mov    esi,eax
  231d02:	e8 f9 98 fd ff       	call   20b600 <panic>
  231d07:	48 8b 85 a0 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x860]
  231d0e:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            buffer[buf_index] = c_digits_lut[j + 1];
  231d12:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  231d16:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  231d1d:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  231d21:	48 89 8d 90 f7 ff ff 	mov    QWORD PTR [rbp-0x870],rcx
  231d28:	72 10                	jb     231d3a <u64toa+0x2a4a>
  231d2a:	48 8d 3d c7 16 01 00 	lea    rdi,[rip+0x116c7]        # 2433f8 <__unnamed_20>
  231d31:	31 c0                	xor    eax,eax
  231d33:	89 c6                	mov    esi,eax
  231d35:	e8 c6 98 fd ff       	call   20b600 <panic>
  231d3a:	48 8b 85 90 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x870]
  231d41:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  231d48:	48 03 01             	add    rax,QWORD PTR [rcx]
  231d4b:	8b 95 30 ff ff ff    	mov    edx,DWORD PTR [rbp-0xd0]
  231d51:	83 c2 01             	add    edx,0x1
  231d54:	40 0f 92 c6          	setb   sil
  231d58:	48 89 85 88 f7 ff ff 	mov    QWORD PTR [rbp-0x878],rax
  231d5f:	89 95 84 f7 ff ff    	mov    DWORD PTR [rbp-0x87c],edx
  231d65:	40 88 b5 83 f7 ff ff 	mov    BYTE PTR [rbp-0x87d],sil
  231d6c:	72 02                	jb     231d70 <u64toa+0x2a80>
  231d6e:	eb 10                	jmp    231d80 <u64toa+0x2a90>
  231d70:	48 8d 3d 51 14 01 00 	lea    rdi,[rip+0x11451]        # 2431c8 <__unnamed_4>
  231d77:	31 c0                	xor    eax,eax
  231d79:	89 c6                	mov    esi,eax
  231d7b:	e8 80 98 fd ff       	call   20b600 <panic>
  231d80:	8b 85 84 f7 ff ff    	mov    eax,DWORD PTR [rbp-0x87c]
  231d86:	89 c1                	mov    ecx,eax
  231d88:	89 ca                	mov    edx,ecx
  231d8a:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  231d91:	48 89 95 78 f7 ff ff 	mov    QWORD PTR [rbp-0x888],rdx
  231d98:	72 10                	jb     231daa <u64toa+0x2aba>
  231d9a:	48 8d 3d 57 16 01 00 	lea    rdi,[rip+0x11657]        # 2433f8 <__unnamed_20>
  231da1:	31 c0                	xor    eax,eax
  231da3:	89 c6                	mov    esi,eax
  231da5:	e8 56 98 fd ff       	call   20b600 <panic>
  231daa:	48 8d 05 6f 6c fd ff 	lea    rax,[rip+0xfffffffffffd6c6f]        # 208a20 <c_digits_lut>
  231db1:	48 8b 8d 78 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x888]
  231db8:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  231dbb:	48 8b 85 88 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x878]
  231dc2:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  231dc4:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  231dc8:	48 83 c6 01          	add    rsi,0x1
  231dcc:	0f 92 c2             	setb   dl
  231dcf:	48 89 b5 70 f7 ff ff 	mov    QWORD PTR [rbp-0x890],rsi
  231dd6:	88 95 6f f7 ff ff    	mov    BYTE PTR [rbp-0x891],dl
  231ddc:	72 02                	jb     231de0 <u64toa+0x2af0>
  231dde:	eb 10                	jmp    231df0 <u64toa+0x2b00>
  231de0:	48 8d 3d e1 13 01 00 	lea    rdi,[rip+0x113e1]        # 2431c8 <__unnamed_4>
  231de7:	31 c0                	xor    eax,eax
  231de9:	89 c6                	mov    esi,eax
  231deb:	e8 10 98 fd ff       	call   20b600 <panic>
  231df0:	48 8b 85 70 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x890]
  231df7:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        } else if (a < 1000) {
  231dfb:	e9 b3 d9 ff ff       	jmp    22f7b3 <u64toa+0x4c3>
  231e00:	b8 00 e1 f5 05       	mov    eax,0x5f5e100
  231e05:	89 c1                	mov    ecx,eax
        const v0 = @intCast(u32, value / kTen8);
  231e07:	48 8b 85 20 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e0]
  231e0e:	31 d2                	xor    edx,edx
  231e10:	48 f7 f1             	div    rcx
  231e13:	89 c6                	mov    esi,eax
  231e15:	89 f7                	mov    edi,esi
  231e17:	89 f9                	mov    ecx,edi
  231e19:	48 39 c8             	cmp    rax,rcx
  231e1c:	89 b5 68 f7 ff ff    	mov    DWORD PTR [rbp-0x898],esi
  231e22:	74 12                	je     231e36 <u64toa+0x2b46>
  231e24:	eb 32                	jmp    231e58 <u64toa+0x2b68>
  231e26:	48 8d 3d 13 14 01 00 	lea    rdi,[rip+0x11413]        # 243240 <__unnamed_7>
  231e2d:	31 c0                	xor    eax,eax
  231e2f:	89 c6                	mov    esi,eax
  231e31:	e8 ca 97 fd ff       	call   20b600 <panic>
  231e36:	31 c0                	xor    eax,eax
  231e38:	88 c1                	mov    cl,al
  231e3a:	8b 85 68 f7 ff ff    	mov    eax,DWORD PTR [rbp-0x898]
  231e40:	89 85 2c ff ff ff    	mov    DWORD PTR [rbp-0xd4],eax
        const v1 = @intCast(u32, value % kTen8);
  231e46:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  231e4a:	f6 c1 01             	test   cl,0x1
  231e4d:	48 89 85 60 f7 ff ff 	mov    QWORD PTR [rbp-0x8a0],rax
  231e54:	75 38                	jne    231e8e <u64toa+0x2b9e>
  231e56:	eb 10                	jmp    231e68 <u64toa+0x2b78>
  231e58:	48 8d 3d 49 16 01 00 	lea    rdi,[rip+0x11649]        # 2434a8 <__unnamed_22>
  231e5f:	31 c0                	xor    eax,eax
  231e61:	89 c6                	mov    esi,eax
        const v0 = @intCast(u32, value / kTen8);
  231e63:	e8 98 97 fd ff       	call   20b600 <panic>
  231e68:	b8 00 e1 f5 05       	mov    eax,0x5f5e100
  231e6d:	89 c1                	mov    ecx,eax
        const v1 = @intCast(u32, value % kTen8);
  231e6f:	48 8b 85 60 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8a0]
  231e76:	31 d2                	xor    edx,edx
  231e78:	48 f7 f1             	div    rcx
  231e7b:	89 d6                	mov    esi,edx
  231e7d:	89 f7                	mov    edi,esi
  231e7f:	89 f9                	mov    ecx,edi
  231e81:	48 39 ca             	cmp    rdx,rcx
  231e84:	89 b5 5c f7 ff ff    	mov    DWORD PTR [rbp-0x8a4],esi
  231e8a:	74 12                	je     231e9e <u64toa+0x2bae>
  231e8c:	eb 33                	jmp    231ec1 <u64toa+0x2bd1>
  231e8e:	48 8d 3d 63 14 01 00 	lea    rdi,[rip+0x11463]        # 2432f8 <__unnamed_15>
  231e95:	31 c0                	xor    eax,eax
  231e97:	89 c6                	mov    esi,eax
  231e99:	e8 62 97 fd ff       	call   20b600 <panic>
  231e9e:	31 c0                	xor    eax,eax
  231ea0:	88 c1                	mov    cl,al
  231ea2:	8b 85 5c f7 ff ff    	mov    eax,DWORD PTR [rbp-0x8a4]
  231ea8:	89 85 28 ff ff ff    	mov    DWORD PTR [rbp-0xd8],eax
        const b0: u32 = v0 / 10000;
  231eae:	8b 85 2c ff ff ff    	mov    eax,DWORD PTR [rbp-0xd4]
  231eb4:	f6 c1 01             	test   cl,0x1
  231eb7:	89 85 58 f7 ff ff    	mov    DWORD PTR [rbp-0x8a8],eax
  231ebd:	75 4c                	jne    231f0b <u64toa+0x2c1b>
  231ebf:	eb 10                	jmp    231ed1 <u64toa+0x2be1>
  231ec1:	48 8d 3d e0 15 01 00 	lea    rdi,[rip+0x115e0]        # 2434a8 <__unnamed_22>
  231ec8:	31 c0                	xor    eax,eax
  231eca:	89 c6                	mov    esi,eax
        const v1 = @intCast(u32, value % kTen8);
  231ecc:	e8 2f 97 fd ff       	call   20b600 <panic>
  231ed1:	31 c0                	xor    eax,eax
  231ed3:	88 c1                	mov    cl,al
  231ed5:	b8 10 27 00 00       	mov    eax,0x2710
        const b0: u32 = v0 / 10000;
  231eda:	8b 95 58 f7 ff ff    	mov    edx,DWORD PTR [rbp-0x8a8]
  231ee0:	89 85 54 f7 ff ff    	mov    DWORD PTR [rbp-0x8ac],eax
  231ee6:	89 d0                	mov    eax,edx
  231ee8:	31 d2                	xor    edx,edx
  231eea:	8b b5 54 f7 ff ff    	mov    esi,DWORD PTR [rbp-0x8ac]
  231ef0:	f7 f6                	div    esi
  231ef2:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
        const c0: u32 = v0 % 10000;
  231ef8:	8b 85 2c ff ff ff    	mov    eax,DWORD PTR [rbp-0xd4]
  231efe:	f6 c1 01             	test   cl,0x1
  231f01:	89 85 50 f7 ff ff    	mov    DWORD PTR [rbp-0x8b0],eax
  231f07:	75 4c                	jne    231f55 <u64toa+0x2c65>
  231f09:	eb 10                	jmp    231f1b <u64toa+0x2c2b>
  231f0b:	48 8d 3d 2e 13 01 00 	lea    rdi,[rip+0x1132e]        # 243240 <__unnamed_7>
  231f12:	31 c0                	xor    eax,eax
  231f14:	89 c6                	mov    esi,eax
        const b0: u32 = v0 / 10000;
  231f16:	e8 e5 96 fd ff       	call   20b600 <panic>
  231f1b:	31 c0                	xor    eax,eax
  231f1d:	88 c1                	mov    cl,al
  231f1f:	b8 10 27 00 00       	mov    eax,0x2710
        const c0: u32 = v0 % 10000;
  231f24:	8b 95 50 f7 ff ff    	mov    edx,DWORD PTR [rbp-0x8b0]
  231f2a:	89 85 4c f7 ff ff    	mov    DWORD PTR [rbp-0x8b4],eax
  231f30:	89 d0                	mov    eax,edx
  231f32:	31 d2                	xor    edx,edx
  231f34:	8b b5 4c f7 ff ff    	mov    esi,DWORD PTR [rbp-0x8b4]
  231f3a:	f7 f6                	div    esi
  231f3c:	89 95 20 ff ff ff    	mov    DWORD PTR [rbp-0xe0],edx
        const d1: u32 = (b0 / 100) << 1;
  231f42:	8b 95 24 ff ff ff    	mov    edx,DWORD PTR [rbp-0xdc]
  231f48:	f6 c1 01             	test   cl,0x1
  231f4b:	89 95 48 f7 ff ff    	mov    DWORD PTR [rbp-0x8b8],edx
  231f51:	75 4f                	jne    231fa2 <u64toa+0x2cb2>
  231f53:	eb 10                	jmp    231f65 <u64toa+0x2c75>
  231f55:	48 8d 3d 9c 13 01 00 	lea    rdi,[rip+0x1139c]        # 2432f8 <__unnamed_15>
  231f5c:	31 c0                	xor    eax,eax
  231f5e:	89 c6                	mov    esi,eax
        const c0: u32 = v0 % 10000;
  231f60:	e8 9b 96 fd ff       	call   20b600 <panic>
  231f65:	31 c0                	xor    eax,eax
  231f67:	88 c1                	mov    cl,al
  231f69:	b8 64 00 00 00       	mov    eax,0x64
        const d1: u32 = (b0 / 100) << 1;
  231f6e:	8b 95 48 f7 ff ff    	mov    edx,DWORD PTR [rbp-0x8b8]
  231f74:	89 85 44 f7 ff ff    	mov    DWORD PTR [rbp-0x8bc],eax
  231f7a:	89 d0                	mov    eax,edx
  231f7c:	31 d2                	xor    edx,edx
  231f7e:	8b b5 44 f7 ff ff    	mov    esi,DWORD PTR [rbp-0x8bc]
  231f84:	f7 f6                	div    esi
  231f86:	c1 e0 01             	shl    eax,0x1
  231f89:	89 85 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],eax
        const d2: u32 = (b0 % 100) << 1;
  231f8f:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
  231f95:	f6 c1 01             	test   cl,0x1
  231f98:	89 85 40 f7 ff ff    	mov    DWORD PTR [rbp-0x8c0],eax
  231f9e:	75 4f                	jne    231fef <u64toa+0x2cff>
  231fa0:	eb 10                	jmp    231fb2 <u64toa+0x2cc2>
  231fa2:	48 8d 3d 97 12 01 00 	lea    rdi,[rip+0x11297]        # 243240 <__unnamed_7>
  231fa9:	31 c0                	xor    eax,eax
  231fab:	89 c6                	mov    esi,eax
        const d1: u32 = (b0 / 100) << 1;
  231fad:	e8 4e 96 fd ff       	call   20b600 <panic>
  231fb2:	31 c0                	xor    eax,eax
  231fb4:	88 c1                	mov    cl,al
  231fb6:	b8 64 00 00 00       	mov    eax,0x64
        const d2: u32 = (b0 % 100) << 1;
  231fbb:	8b 95 40 f7 ff ff    	mov    edx,DWORD PTR [rbp-0x8c0]
  231fc1:	89 85 3c f7 ff ff    	mov    DWORD PTR [rbp-0x8c4],eax
  231fc7:	89 d0                	mov    eax,edx
  231fc9:	31 d2                	xor    edx,edx
  231fcb:	8b b5 3c f7 ff ff    	mov    esi,DWORD PTR [rbp-0x8c4]
  231fd1:	f7 f6                	div    esi
  231fd3:	c1 e2 01             	shl    edx,0x1
  231fd6:	89 95 18 ff ff ff    	mov    DWORD PTR [rbp-0xe8],edx
        const d3: u32 = (c0 / 100) << 1;
  231fdc:	8b 95 20 ff ff ff    	mov    edx,DWORD PTR [rbp-0xe0]
  231fe2:	f6 c1 01             	test   cl,0x1
  231fe5:	89 95 38 f7 ff ff    	mov    DWORD PTR [rbp-0x8c8],edx
  231feb:	75 4f                	jne    23203c <u64toa+0x2d4c>
  231fed:	eb 10                	jmp    231fff <u64toa+0x2d0f>
  231fef:	48 8d 3d 02 13 01 00 	lea    rdi,[rip+0x11302]        # 2432f8 <__unnamed_15>
  231ff6:	31 c0                	xor    eax,eax
  231ff8:	89 c6                	mov    esi,eax
        const d2: u32 = (b0 % 100) << 1;
  231ffa:	e8 01 96 fd ff       	call   20b600 <panic>
  231fff:	31 c0                	xor    eax,eax
  232001:	88 c1                	mov    cl,al
  232003:	b8 64 00 00 00       	mov    eax,0x64
        const d3: u32 = (c0 / 100) << 1;
  232008:	8b 95 38 f7 ff ff    	mov    edx,DWORD PTR [rbp-0x8c8]
  23200e:	89 85 34 f7 ff ff    	mov    DWORD PTR [rbp-0x8cc],eax
  232014:	89 d0                	mov    eax,edx
  232016:	31 d2                	xor    edx,edx
  232018:	8b b5 34 f7 ff ff    	mov    esi,DWORD PTR [rbp-0x8cc]
  23201e:	f7 f6                	div    esi
  232020:	c1 e0 01             	shl    eax,0x1
  232023:	89 85 14 ff ff ff    	mov    DWORD PTR [rbp-0xec],eax
        const d4: u32 = (c0 % 100) << 1;
  232029:	8b 85 20 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe0]
  23202f:	f6 c1 01             	test   cl,0x1
  232032:	89 85 30 f7 ff ff    	mov    DWORD PTR [rbp-0x8d0],eax
  232038:	75 4f                	jne    232089 <u64toa+0x2d99>
  23203a:	eb 10                	jmp    23204c <u64toa+0x2d5c>
  23203c:	48 8d 3d fd 11 01 00 	lea    rdi,[rip+0x111fd]        # 243240 <__unnamed_7>
  232043:	31 c0                	xor    eax,eax
  232045:	89 c6                	mov    esi,eax
        const d3: u32 = (c0 / 100) << 1;
  232047:	e8 b4 95 fd ff       	call   20b600 <panic>
  23204c:	31 c0                	xor    eax,eax
  23204e:	88 c1                	mov    cl,al
  232050:	b8 64 00 00 00       	mov    eax,0x64
        const d4: u32 = (c0 % 100) << 1;
  232055:	8b 95 30 f7 ff ff    	mov    edx,DWORD PTR [rbp-0x8d0]
  23205b:	89 85 2c f7 ff ff    	mov    DWORD PTR [rbp-0x8d4],eax
  232061:	89 d0                	mov    eax,edx
  232063:	31 d2                	xor    edx,edx
  232065:	8b b5 2c f7 ff ff    	mov    esi,DWORD PTR [rbp-0x8d4]
  23206b:	f7 f6                	div    esi
  23206d:	c1 e2 01             	shl    edx,0x1
  232070:	89 95 10 ff ff ff    	mov    DWORD PTR [rbp-0xf0],edx
        const b1: u32 = v1 / 10000;
  232076:	8b 95 28 ff ff ff    	mov    edx,DWORD PTR [rbp-0xd8]
  23207c:	f6 c1 01             	test   cl,0x1
  23207f:	89 95 28 f7 ff ff    	mov    DWORD PTR [rbp-0x8d8],edx
  232085:	75 4c                	jne    2320d3 <u64toa+0x2de3>
  232087:	eb 10                	jmp    232099 <u64toa+0x2da9>
  232089:	48 8d 3d 68 12 01 00 	lea    rdi,[rip+0x11268]        # 2432f8 <__unnamed_15>
  232090:	31 c0                	xor    eax,eax
  232092:	89 c6                	mov    esi,eax
        const d4: u32 = (c0 % 100) << 1;
  232094:	e8 67 95 fd ff       	call   20b600 <panic>
  232099:	31 c0                	xor    eax,eax
  23209b:	88 c1                	mov    cl,al
  23209d:	b8 10 27 00 00       	mov    eax,0x2710
        const b1: u32 = v1 / 10000;
  2320a2:	8b 95 28 f7 ff ff    	mov    edx,DWORD PTR [rbp-0x8d8]
  2320a8:	89 85 24 f7 ff ff    	mov    DWORD PTR [rbp-0x8dc],eax
  2320ae:	89 d0                	mov    eax,edx
  2320b0:	31 d2                	xor    edx,edx
  2320b2:	8b b5 24 f7 ff ff    	mov    esi,DWORD PTR [rbp-0x8dc]
  2320b8:	f7 f6                	div    esi
  2320ba:	89 85 0c ff ff ff    	mov    DWORD PTR [rbp-0xf4],eax
        const c1: u32 = v1 % 10000;
  2320c0:	8b 85 28 ff ff ff    	mov    eax,DWORD PTR [rbp-0xd8]
  2320c6:	f6 c1 01             	test   cl,0x1
  2320c9:	89 85 20 f7 ff ff    	mov    DWORD PTR [rbp-0x8e0],eax
  2320cf:	75 4c                	jne    23211d <u64toa+0x2e2d>
  2320d1:	eb 10                	jmp    2320e3 <u64toa+0x2df3>
  2320d3:	48 8d 3d 66 11 01 00 	lea    rdi,[rip+0x11166]        # 243240 <__unnamed_7>
  2320da:	31 c0                	xor    eax,eax
  2320dc:	89 c6                	mov    esi,eax
        const b1: u32 = v1 / 10000;
  2320de:	e8 1d 95 fd ff       	call   20b600 <panic>
  2320e3:	31 c0                	xor    eax,eax
  2320e5:	88 c1                	mov    cl,al
  2320e7:	b8 10 27 00 00       	mov    eax,0x2710
        const c1: u32 = v1 % 10000;
  2320ec:	8b 95 20 f7 ff ff    	mov    edx,DWORD PTR [rbp-0x8e0]
  2320f2:	89 85 1c f7 ff ff    	mov    DWORD PTR [rbp-0x8e4],eax
  2320f8:	89 d0                	mov    eax,edx
  2320fa:	31 d2                	xor    edx,edx
  2320fc:	8b b5 1c f7 ff ff    	mov    esi,DWORD PTR [rbp-0x8e4]
  232102:	f7 f6                	div    esi
  232104:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
        const d5: u32 = (b1 / 100) << 1;
  23210a:	8b 95 0c ff ff ff    	mov    edx,DWORD PTR [rbp-0xf4]
  232110:	f6 c1 01             	test   cl,0x1
  232113:	89 95 18 f7 ff ff    	mov    DWORD PTR [rbp-0x8e8],edx
  232119:	75 4f                	jne    23216a <u64toa+0x2e7a>
  23211b:	eb 10                	jmp    23212d <u64toa+0x2e3d>
  23211d:	48 8d 3d d4 11 01 00 	lea    rdi,[rip+0x111d4]        # 2432f8 <__unnamed_15>
  232124:	31 c0                	xor    eax,eax
  232126:	89 c6                	mov    esi,eax
        const c1: u32 = v1 % 10000;
  232128:	e8 d3 94 fd ff       	call   20b600 <panic>
  23212d:	31 c0                	xor    eax,eax
  23212f:	88 c1                	mov    cl,al
  232131:	b8 64 00 00 00       	mov    eax,0x64
        const d5: u32 = (b1 / 100) << 1;
  232136:	8b 95 18 f7 ff ff    	mov    edx,DWORD PTR [rbp-0x8e8]
  23213c:	89 85 14 f7 ff ff    	mov    DWORD PTR [rbp-0x8ec],eax
  232142:	89 d0                	mov    eax,edx
  232144:	31 d2                	xor    edx,edx
  232146:	8b b5 14 f7 ff ff    	mov    esi,DWORD PTR [rbp-0x8ec]
  23214c:	f7 f6                	div    esi
  23214e:	c1 e0 01             	shl    eax,0x1
  232151:	89 85 04 ff ff ff    	mov    DWORD PTR [rbp-0xfc],eax
        const d6: u32 = (b1 % 100) << 1;
  232157:	8b 85 0c ff ff ff    	mov    eax,DWORD PTR [rbp-0xf4]
  23215d:	f6 c1 01             	test   cl,0x1
  232160:	89 85 10 f7 ff ff    	mov    DWORD PTR [rbp-0x8f0],eax
  232166:	75 4f                	jne    2321b7 <u64toa+0x2ec7>
  232168:	eb 10                	jmp    23217a <u64toa+0x2e8a>
  23216a:	48 8d 3d cf 10 01 00 	lea    rdi,[rip+0x110cf]        # 243240 <__unnamed_7>
  232171:	31 c0                	xor    eax,eax
  232173:	89 c6                	mov    esi,eax
        const d5: u32 = (b1 / 100) << 1;
  232175:	e8 86 94 fd ff       	call   20b600 <panic>
  23217a:	31 c0                	xor    eax,eax
  23217c:	88 c1                	mov    cl,al
  23217e:	b8 64 00 00 00       	mov    eax,0x64
        const d6: u32 = (b1 % 100) << 1;
  232183:	8b 95 10 f7 ff ff    	mov    edx,DWORD PTR [rbp-0x8f0]
  232189:	89 85 0c f7 ff ff    	mov    DWORD PTR [rbp-0x8f4],eax
  23218f:	89 d0                	mov    eax,edx
  232191:	31 d2                	xor    edx,edx
  232193:	8b b5 0c f7 ff ff    	mov    esi,DWORD PTR [rbp-0x8f4]
  232199:	f7 f6                	div    esi
  23219b:	c1 e2 01             	shl    edx,0x1
  23219e:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
        const d7: u32 = (c1 / 100) << 1;
  2321a4:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
  2321aa:	f6 c1 01             	test   cl,0x1
  2321ad:	89 95 08 f7 ff ff    	mov    DWORD PTR [rbp-0x8f8],edx
  2321b3:	75 4f                	jne    232204 <u64toa+0x2f14>
  2321b5:	eb 10                	jmp    2321c7 <u64toa+0x2ed7>
  2321b7:	48 8d 3d 3a 11 01 00 	lea    rdi,[rip+0x1113a]        # 2432f8 <__unnamed_15>
  2321be:	31 c0                	xor    eax,eax
  2321c0:	89 c6                	mov    esi,eax
        const d6: u32 = (b1 % 100) << 1;
  2321c2:	e8 39 94 fd ff       	call   20b600 <panic>
  2321c7:	31 c0                	xor    eax,eax
  2321c9:	88 c1                	mov    cl,al
  2321cb:	b8 64 00 00 00       	mov    eax,0x64
        const d7: u32 = (c1 / 100) << 1;
  2321d0:	8b 95 08 f7 ff ff    	mov    edx,DWORD PTR [rbp-0x8f8]
  2321d6:	89 85 04 f7 ff ff    	mov    DWORD PTR [rbp-0x8fc],eax
  2321dc:	89 d0                	mov    eax,edx
  2321de:	31 d2                	xor    edx,edx
  2321e0:	8b b5 04 f7 ff ff    	mov    esi,DWORD PTR [rbp-0x8fc]
  2321e6:	f7 f6                	div    esi
  2321e8:	c1 e0 01             	shl    eax,0x1
  2321eb:	89 85 fc fe ff ff    	mov    DWORD PTR [rbp-0x104],eax
        const d8: u32 = (c1 % 100) << 1;
  2321f1:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
  2321f7:	f6 c1 01             	test   cl,0x1
  2321fa:	89 85 00 f7 ff ff    	mov    DWORD PTR [rbp-0x900],eax
  232200:	75 52                	jne    232254 <u64toa+0x2f64>
  232202:	eb 10                	jmp    232214 <u64toa+0x2f24>
  232204:	48 8d 3d 35 10 01 00 	lea    rdi,[rip+0x11035]        # 243240 <__unnamed_7>
  23220b:	31 c0                	xor    eax,eax
  23220d:	89 c6                	mov    esi,eax
        const d7: u32 = (c1 / 100) << 1;
  23220f:	e8 ec 93 fd ff       	call   20b600 <panic>
  232214:	b8 64 00 00 00       	mov    eax,0x64
        const d8: u32 = (c1 % 100) << 1;
  232219:	8b 8d 00 f7 ff ff    	mov    ecx,DWORD PTR [rbp-0x900]
  23221f:	89 85 fc f6 ff ff    	mov    DWORD PTR [rbp-0x904],eax
  232225:	89 c8                	mov    eax,ecx
  232227:	31 d2                	xor    edx,edx
  232229:	8b b5 fc f6 ff ff    	mov    esi,DWORD PTR [rbp-0x904]
  23222f:	f7 f6                	div    esi
  232231:	c1 e2 01             	shl    edx,0x1
  232234:	89 95 f8 fe ff ff    	mov    DWORD PTR [rbp-0x108],edx
        buffer[buf_index] = c_digits_lut[d1];
  23223a:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  23223e:	4c 8b 85 f0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x110]
  232245:	49 3b 78 08          	cmp    rdi,QWORD PTR [r8+0x8]
  232249:	48 89 bd f0 f6 ff ff 	mov    QWORD PTR [rbp-0x910],rdi
  232250:	72 22                	jb     232274 <u64toa+0x2f84>
  232252:	eb 10                	jmp    232264 <u64toa+0x2f74>
  232254:	48 8d 3d 9d 10 01 00 	lea    rdi,[rip+0x1109d]        # 2432f8 <__unnamed_15>
  23225b:	31 c0                	xor    eax,eax
  23225d:	89 c6                	mov    esi,eax
        const d8: u32 = (c1 % 100) << 1;
  23225f:	e8 9c 93 fd ff       	call   20b600 <panic>
  232264:	48 8d 3d 8d 11 01 00 	lea    rdi,[rip+0x1118d]        # 2433f8 <__unnamed_20>
  23226b:	31 c0                	xor    eax,eax
  23226d:	89 c6                	mov    esi,eax
        buffer[buf_index] = c_digits_lut[d1];
  23226f:	e8 8c 93 fd ff       	call   20b600 <panic>
  232274:	48 8b 85 f0 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x910]
  23227b:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  232282:	48 03 01             	add    rax,QWORD PTR [rcx]
  232285:	8b 95 1c ff ff ff    	mov    edx,DWORD PTR [rbp-0xe4]
  23228b:	89 d6                	mov    esi,edx
  23228d:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  232294:	48 89 85 e8 f6 ff ff 	mov    QWORD PTR [rbp-0x918],rax
  23229b:	48 89 b5 e0 f6 ff ff 	mov    QWORD PTR [rbp-0x920],rsi
  2322a2:	72 10                	jb     2322b4 <u64toa+0x2fc4>
  2322a4:	48 8d 3d 4d 11 01 00 	lea    rdi,[rip+0x1114d]        # 2433f8 <__unnamed_20>
  2322ab:	31 c0                	xor    eax,eax
  2322ad:	89 c6                	mov    esi,eax
  2322af:	e8 4c 93 fd ff       	call   20b600 <panic>
  2322b4:	48 8d 05 65 67 fd ff 	lea    rax,[rip+0xfffffffffffd6765]        # 208a20 <c_digits_lut>
  2322bb:	48 8b 8d e0 f6 ff ff 	mov    rcx,QWORD PTR [rbp-0x920]
  2322c2:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  2322c5:	48 8b 85 e8 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x918]
  2322cc:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  2322ce:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  2322d2:	48 83 c6 01          	add    rsi,0x1
  2322d6:	0f 92 c2             	setb   dl
  2322d9:	48 89 b5 d8 f6 ff ff 	mov    QWORD PTR [rbp-0x928],rsi
  2322e0:	88 95 d7 f6 ff ff    	mov    BYTE PTR [rbp-0x929],dl
  2322e6:	72 02                	jb     2322ea <u64toa+0x2ffa>
  2322e8:	eb 10                	jmp    2322fa <u64toa+0x300a>
  2322ea:	48 8d 3d d7 0e 01 00 	lea    rdi,[rip+0x10ed7]        # 2431c8 <__unnamed_4>
  2322f1:	31 c0                	xor    eax,eax
  2322f3:	89 c6                	mov    esi,eax
  2322f5:	e8 06 93 fd ff       	call   20b600 <panic>
  2322fa:	48 8b 85 d8 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x928]
  232301:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d1 + 1];
  232305:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  232309:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  232310:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  232314:	48 89 8d c8 f6 ff ff 	mov    QWORD PTR [rbp-0x938],rcx
  23231b:	72 10                	jb     23232d <u64toa+0x303d>
  23231d:	48 8d 3d d4 10 01 00 	lea    rdi,[rip+0x110d4]        # 2433f8 <__unnamed_20>
  232324:	31 c0                	xor    eax,eax
  232326:	89 c6                	mov    esi,eax
  232328:	e8 d3 92 fd ff       	call   20b600 <panic>
  23232d:	48 8b 85 c8 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x938]
  232334:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  23233b:	48 03 01             	add    rax,QWORD PTR [rcx]
  23233e:	8b 95 1c ff ff ff    	mov    edx,DWORD PTR [rbp-0xe4]
  232344:	83 c2 01             	add    edx,0x1
  232347:	40 0f 92 c6          	setb   sil
  23234b:	48 89 85 c0 f6 ff ff 	mov    QWORD PTR [rbp-0x940],rax
  232352:	89 95 bc f6 ff ff    	mov    DWORD PTR [rbp-0x944],edx
  232358:	40 88 b5 bb f6 ff ff 	mov    BYTE PTR [rbp-0x945],sil
  23235f:	72 02                	jb     232363 <u64toa+0x3073>
  232361:	eb 10                	jmp    232373 <u64toa+0x3083>
  232363:	48 8d 3d 5e 0e 01 00 	lea    rdi,[rip+0x10e5e]        # 2431c8 <__unnamed_4>
  23236a:	31 c0                	xor    eax,eax
  23236c:	89 c6                	mov    esi,eax
  23236e:	e8 8d 92 fd ff       	call   20b600 <panic>
  232373:	8b 85 bc f6 ff ff    	mov    eax,DWORD PTR [rbp-0x944]
  232379:	89 c1                	mov    ecx,eax
  23237b:	89 ca                	mov    edx,ecx
  23237d:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  232384:	48 89 95 b0 f6 ff ff 	mov    QWORD PTR [rbp-0x950],rdx
  23238b:	72 10                	jb     23239d <u64toa+0x30ad>
  23238d:	48 8d 3d 64 10 01 00 	lea    rdi,[rip+0x11064]        # 2433f8 <__unnamed_20>
  232394:	31 c0                	xor    eax,eax
  232396:	89 c6                	mov    esi,eax
  232398:	e8 63 92 fd ff       	call   20b600 <panic>
  23239d:	48 8d 05 7c 66 fd ff 	lea    rax,[rip+0xfffffffffffd667c]        # 208a20 <c_digits_lut>
  2323a4:	48 8b 8d b0 f6 ff ff 	mov    rcx,QWORD PTR [rbp-0x950]
  2323ab:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  2323ae:	48 8b 85 c0 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x940]
  2323b5:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  2323b7:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  2323bb:	48 83 c6 01          	add    rsi,0x1
  2323bf:	0f 92 c2             	setb   dl
  2323c2:	48 89 b5 a8 f6 ff ff 	mov    QWORD PTR [rbp-0x958],rsi
  2323c9:	88 95 a7 f6 ff ff    	mov    BYTE PTR [rbp-0x959],dl
  2323cf:	72 02                	jb     2323d3 <u64toa+0x30e3>
  2323d1:	eb 10                	jmp    2323e3 <u64toa+0x30f3>
  2323d3:	48 8d 3d ee 0d 01 00 	lea    rdi,[rip+0x10dee]        # 2431c8 <__unnamed_4>
  2323da:	31 c0                	xor    eax,eax
  2323dc:	89 c6                	mov    esi,eax
  2323de:	e8 1d 92 fd ff       	call   20b600 <panic>
  2323e3:	48 8b 85 a8 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x958]
  2323ea:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d2];
  2323ee:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  2323f2:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  2323f9:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  2323fd:	48 89 8d 98 f6 ff ff 	mov    QWORD PTR [rbp-0x968],rcx
  232404:	72 10                	jb     232416 <u64toa+0x3126>
  232406:	48 8d 3d eb 0f 01 00 	lea    rdi,[rip+0x10feb]        # 2433f8 <__unnamed_20>
  23240d:	31 c0                	xor    eax,eax
  23240f:	89 c6                	mov    esi,eax
  232411:	e8 ea 91 fd ff       	call   20b600 <panic>
  232416:	48 8b 85 98 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x968]
  23241d:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  232424:	48 03 01             	add    rax,QWORD PTR [rcx]
  232427:	8b 95 18 ff ff ff    	mov    edx,DWORD PTR [rbp-0xe8]
  23242d:	89 d6                	mov    esi,edx
  23242f:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  232436:	48 89 85 90 f6 ff ff 	mov    QWORD PTR [rbp-0x970],rax
  23243d:	48 89 b5 88 f6 ff ff 	mov    QWORD PTR [rbp-0x978],rsi
  232444:	72 10                	jb     232456 <u64toa+0x3166>
  232446:	48 8d 3d ab 0f 01 00 	lea    rdi,[rip+0x10fab]        # 2433f8 <__unnamed_20>
  23244d:	31 c0                	xor    eax,eax
  23244f:	89 c6                	mov    esi,eax
  232451:	e8 aa 91 fd ff       	call   20b600 <panic>
  232456:	48 8d 05 c3 65 fd ff 	lea    rax,[rip+0xfffffffffffd65c3]        # 208a20 <c_digits_lut>
  23245d:	48 8b 8d 88 f6 ff ff 	mov    rcx,QWORD PTR [rbp-0x978]
  232464:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  232467:	48 8b 85 90 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x970]
  23246e:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  232470:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  232474:	48 83 c6 01          	add    rsi,0x1
  232478:	0f 92 c2             	setb   dl
  23247b:	48 89 b5 80 f6 ff ff 	mov    QWORD PTR [rbp-0x980],rsi
  232482:	88 95 7f f6 ff ff    	mov    BYTE PTR [rbp-0x981],dl
  232488:	72 02                	jb     23248c <u64toa+0x319c>
  23248a:	eb 10                	jmp    23249c <u64toa+0x31ac>
  23248c:	48 8d 3d 35 0d 01 00 	lea    rdi,[rip+0x10d35]        # 2431c8 <__unnamed_4>
  232493:	31 c0                	xor    eax,eax
  232495:	89 c6                	mov    esi,eax
  232497:	e8 64 91 fd ff       	call   20b600 <panic>
  23249c:	48 8b 85 80 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x980]
  2324a3:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d2 + 1];
  2324a7:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  2324ab:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  2324b2:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  2324b6:	48 89 8d 70 f6 ff ff 	mov    QWORD PTR [rbp-0x990],rcx
  2324bd:	72 10                	jb     2324cf <u64toa+0x31df>
  2324bf:	48 8d 3d 32 0f 01 00 	lea    rdi,[rip+0x10f32]        # 2433f8 <__unnamed_20>
  2324c6:	31 c0                	xor    eax,eax
  2324c8:	89 c6                	mov    esi,eax
  2324ca:	e8 31 91 fd ff       	call   20b600 <panic>
  2324cf:	48 8b 85 70 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x990]
  2324d6:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  2324dd:	48 03 01             	add    rax,QWORD PTR [rcx]
  2324e0:	8b 95 18 ff ff ff    	mov    edx,DWORD PTR [rbp-0xe8]
  2324e6:	83 c2 01             	add    edx,0x1
  2324e9:	40 0f 92 c6          	setb   sil
  2324ed:	48 89 85 68 f6 ff ff 	mov    QWORD PTR [rbp-0x998],rax
  2324f4:	89 95 64 f6 ff ff    	mov    DWORD PTR [rbp-0x99c],edx
  2324fa:	40 88 b5 63 f6 ff ff 	mov    BYTE PTR [rbp-0x99d],sil
  232501:	72 02                	jb     232505 <u64toa+0x3215>
  232503:	eb 10                	jmp    232515 <u64toa+0x3225>
  232505:	48 8d 3d bc 0c 01 00 	lea    rdi,[rip+0x10cbc]        # 2431c8 <__unnamed_4>
  23250c:	31 c0                	xor    eax,eax
  23250e:	89 c6                	mov    esi,eax
  232510:	e8 eb 90 fd ff       	call   20b600 <panic>
  232515:	8b 85 64 f6 ff ff    	mov    eax,DWORD PTR [rbp-0x99c]
  23251b:	89 c1                	mov    ecx,eax
  23251d:	89 ca                	mov    edx,ecx
  23251f:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  232526:	48 89 95 58 f6 ff ff 	mov    QWORD PTR [rbp-0x9a8],rdx
  23252d:	72 10                	jb     23253f <u64toa+0x324f>
  23252f:	48 8d 3d c2 0e 01 00 	lea    rdi,[rip+0x10ec2]        # 2433f8 <__unnamed_20>
  232536:	31 c0                	xor    eax,eax
  232538:	89 c6                	mov    esi,eax
  23253a:	e8 c1 90 fd ff       	call   20b600 <panic>
  23253f:	48 8d 05 da 64 fd ff 	lea    rax,[rip+0xfffffffffffd64da]        # 208a20 <c_digits_lut>
  232546:	48 8b 8d 58 f6 ff ff 	mov    rcx,QWORD PTR [rbp-0x9a8]
  23254d:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  232550:	48 8b 85 68 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x998]
  232557:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  232559:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  23255d:	48 83 c6 01          	add    rsi,0x1
  232561:	0f 92 c2             	setb   dl
  232564:	48 89 b5 50 f6 ff ff 	mov    QWORD PTR [rbp-0x9b0],rsi
  23256b:	88 95 4f f6 ff ff    	mov    BYTE PTR [rbp-0x9b1],dl
  232571:	72 02                	jb     232575 <u64toa+0x3285>
  232573:	eb 10                	jmp    232585 <u64toa+0x3295>
  232575:	48 8d 3d 4c 0c 01 00 	lea    rdi,[rip+0x10c4c]        # 2431c8 <__unnamed_4>
  23257c:	31 c0                	xor    eax,eax
  23257e:	89 c6                	mov    esi,eax
  232580:	e8 7b 90 fd ff       	call   20b600 <panic>
  232585:	48 8b 85 50 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x9b0]
  23258c:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d3];
  232590:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  232594:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  23259b:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  23259f:	48 89 8d 40 f6 ff ff 	mov    QWORD PTR [rbp-0x9c0],rcx
  2325a6:	72 10                	jb     2325b8 <u64toa+0x32c8>
  2325a8:	48 8d 3d 49 0e 01 00 	lea    rdi,[rip+0x10e49]        # 2433f8 <__unnamed_20>
  2325af:	31 c0                	xor    eax,eax
  2325b1:	89 c6                	mov    esi,eax
  2325b3:	e8 48 90 fd ff       	call   20b600 <panic>
  2325b8:	48 8b 85 40 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x9c0]
  2325bf:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  2325c6:	48 03 01             	add    rax,QWORD PTR [rcx]
  2325c9:	8b 95 14 ff ff ff    	mov    edx,DWORD PTR [rbp-0xec]
  2325cf:	89 d6                	mov    esi,edx
  2325d1:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  2325d8:	48 89 85 38 f6 ff ff 	mov    QWORD PTR [rbp-0x9c8],rax
  2325df:	48 89 b5 30 f6 ff ff 	mov    QWORD PTR [rbp-0x9d0],rsi
  2325e6:	72 10                	jb     2325f8 <u64toa+0x3308>
  2325e8:	48 8d 3d 09 0e 01 00 	lea    rdi,[rip+0x10e09]        # 2433f8 <__unnamed_20>
  2325ef:	31 c0                	xor    eax,eax
  2325f1:	89 c6                	mov    esi,eax
  2325f3:	e8 08 90 fd ff       	call   20b600 <panic>
  2325f8:	48 8d 05 21 64 fd ff 	lea    rax,[rip+0xfffffffffffd6421]        # 208a20 <c_digits_lut>
  2325ff:	48 8b 8d 30 f6 ff ff 	mov    rcx,QWORD PTR [rbp-0x9d0]
  232606:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  232609:	48 8b 85 38 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x9c8]
  232610:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  232612:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  232616:	48 83 c6 01          	add    rsi,0x1
  23261a:	0f 92 c2             	setb   dl
  23261d:	48 89 b5 28 f6 ff ff 	mov    QWORD PTR [rbp-0x9d8],rsi
  232624:	88 95 27 f6 ff ff    	mov    BYTE PTR [rbp-0x9d9],dl
  23262a:	72 02                	jb     23262e <u64toa+0x333e>
  23262c:	eb 10                	jmp    23263e <u64toa+0x334e>
  23262e:	48 8d 3d 93 0b 01 00 	lea    rdi,[rip+0x10b93]        # 2431c8 <__unnamed_4>
  232635:	31 c0                	xor    eax,eax
  232637:	89 c6                	mov    esi,eax
  232639:	e8 c2 8f fd ff       	call   20b600 <panic>
  23263e:	48 8b 85 28 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x9d8]
  232645:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d3 + 1];
  232649:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  23264d:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  232654:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  232658:	48 89 8d 18 f6 ff ff 	mov    QWORD PTR [rbp-0x9e8],rcx
  23265f:	72 10                	jb     232671 <u64toa+0x3381>
  232661:	48 8d 3d 90 0d 01 00 	lea    rdi,[rip+0x10d90]        # 2433f8 <__unnamed_20>
  232668:	31 c0                	xor    eax,eax
  23266a:	89 c6                	mov    esi,eax
  23266c:	e8 8f 8f fd ff       	call   20b600 <panic>
  232671:	48 8b 85 18 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x9e8]
  232678:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  23267f:	48 03 01             	add    rax,QWORD PTR [rcx]
  232682:	8b 95 14 ff ff ff    	mov    edx,DWORD PTR [rbp-0xec]
  232688:	83 c2 01             	add    edx,0x1
  23268b:	40 0f 92 c6          	setb   sil
  23268f:	48 89 85 10 f6 ff ff 	mov    QWORD PTR [rbp-0x9f0],rax
  232696:	89 95 0c f6 ff ff    	mov    DWORD PTR [rbp-0x9f4],edx
  23269c:	40 88 b5 0b f6 ff ff 	mov    BYTE PTR [rbp-0x9f5],sil
  2326a3:	72 02                	jb     2326a7 <u64toa+0x33b7>
  2326a5:	eb 10                	jmp    2326b7 <u64toa+0x33c7>
  2326a7:	48 8d 3d 1a 0b 01 00 	lea    rdi,[rip+0x10b1a]        # 2431c8 <__unnamed_4>
  2326ae:	31 c0                	xor    eax,eax
  2326b0:	89 c6                	mov    esi,eax
  2326b2:	e8 49 8f fd ff       	call   20b600 <panic>
  2326b7:	8b 85 0c f6 ff ff    	mov    eax,DWORD PTR [rbp-0x9f4]
  2326bd:	89 c1                	mov    ecx,eax
  2326bf:	89 ca                	mov    edx,ecx
  2326c1:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  2326c8:	48 89 95 00 f6 ff ff 	mov    QWORD PTR [rbp-0xa00],rdx
  2326cf:	72 10                	jb     2326e1 <u64toa+0x33f1>
  2326d1:	48 8d 3d 20 0d 01 00 	lea    rdi,[rip+0x10d20]        # 2433f8 <__unnamed_20>
  2326d8:	31 c0                	xor    eax,eax
  2326da:	89 c6                	mov    esi,eax
  2326dc:	e8 1f 8f fd ff       	call   20b600 <panic>
  2326e1:	48 8d 05 38 63 fd ff 	lea    rax,[rip+0xfffffffffffd6338]        # 208a20 <c_digits_lut>
  2326e8:	48 8b 8d 00 f6 ff ff 	mov    rcx,QWORD PTR [rbp-0xa00]
  2326ef:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  2326f2:	48 8b 85 10 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x9f0]
  2326f9:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  2326fb:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  2326ff:	48 83 c6 01          	add    rsi,0x1
  232703:	0f 92 c2             	setb   dl
  232706:	48 89 b5 f8 f5 ff ff 	mov    QWORD PTR [rbp-0xa08],rsi
  23270d:	88 95 f7 f5 ff ff    	mov    BYTE PTR [rbp-0xa09],dl
  232713:	72 02                	jb     232717 <u64toa+0x3427>
  232715:	eb 10                	jmp    232727 <u64toa+0x3437>
  232717:	48 8d 3d aa 0a 01 00 	lea    rdi,[rip+0x10aaa]        # 2431c8 <__unnamed_4>
  23271e:	31 c0                	xor    eax,eax
  232720:	89 c6                	mov    esi,eax
  232722:	e8 d9 8e fd ff       	call   20b600 <panic>
  232727:	48 8b 85 f8 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa08]
  23272e:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d4];
  232732:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  232736:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  23273d:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  232741:	48 89 8d e8 f5 ff ff 	mov    QWORD PTR [rbp-0xa18],rcx
  232748:	72 10                	jb     23275a <u64toa+0x346a>
  23274a:	48 8d 3d a7 0c 01 00 	lea    rdi,[rip+0x10ca7]        # 2433f8 <__unnamed_20>
  232751:	31 c0                	xor    eax,eax
  232753:	89 c6                	mov    esi,eax
  232755:	e8 a6 8e fd ff       	call   20b600 <panic>
  23275a:	48 8b 85 e8 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa18]
  232761:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  232768:	48 03 01             	add    rax,QWORD PTR [rcx]
  23276b:	8b 95 10 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf0]
  232771:	89 d6                	mov    esi,edx
  232773:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  23277a:	48 89 85 e0 f5 ff ff 	mov    QWORD PTR [rbp-0xa20],rax
  232781:	48 89 b5 d8 f5 ff ff 	mov    QWORD PTR [rbp-0xa28],rsi
  232788:	72 10                	jb     23279a <u64toa+0x34aa>
  23278a:	48 8d 3d 67 0c 01 00 	lea    rdi,[rip+0x10c67]        # 2433f8 <__unnamed_20>
  232791:	31 c0                	xor    eax,eax
  232793:	89 c6                	mov    esi,eax
  232795:	e8 66 8e fd ff       	call   20b600 <panic>
  23279a:	48 8d 05 7f 62 fd ff 	lea    rax,[rip+0xfffffffffffd627f]        # 208a20 <c_digits_lut>
  2327a1:	48 8b 8d d8 f5 ff ff 	mov    rcx,QWORD PTR [rbp-0xa28]
  2327a8:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  2327ab:	48 8b 85 e0 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa20]
  2327b2:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  2327b4:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  2327b8:	48 83 c6 01          	add    rsi,0x1
  2327bc:	0f 92 c2             	setb   dl
  2327bf:	48 89 b5 d0 f5 ff ff 	mov    QWORD PTR [rbp-0xa30],rsi
  2327c6:	88 95 cf f5 ff ff    	mov    BYTE PTR [rbp-0xa31],dl
  2327cc:	72 02                	jb     2327d0 <u64toa+0x34e0>
  2327ce:	eb 10                	jmp    2327e0 <u64toa+0x34f0>
  2327d0:	48 8d 3d f1 09 01 00 	lea    rdi,[rip+0x109f1]        # 2431c8 <__unnamed_4>
  2327d7:	31 c0                	xor    eax,eax
  2327d9:	89 c6                	mov    esi,eax
  2327db:	e8 20 8e fd ff       	call   20b600 <panic>
  2327e0:	48 8b 85 d0 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa30]
  2327e7:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d4 + 1];
  2327eb:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  2327ef:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  2327f6:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  2327fa:	48 89 8d c0 f5 ff ff 	mov    QWORD PTR [rbp-0xa40],rcx
  232801:	72 10                	jb     232813 <u64toa+0x3523>
  232803:	48 8d 3d ee 0b 01 00 	lea    rdi,[rip+0x10bee]        # 2433f8 <__unnamed_20>
  23280a:	31 c0                	xor    eax,eax
  23280c:	89 c6                	mov    esi,eax
  23280e:	e8 ed 8d fd ff       	call   20b600 <panic>
  232813:	48 8b 85 c0 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa40]
  23281a:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  232821:	48 03 01             	add    rax,QWORD PTR [rcx]
  232824:	8b 95 10 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf0]
  23282a:	83 c2 01             	add    edx,0x1
  23282d:	40 0f 92 c6          	setb   sil
  232831:	48 89 85 b8 f5 ff ff 	mov    QWORD PTR [rbp-0xa48],rax
  232838:	89 95 b4 f5 ff ff    	mov    DWORD PTR [rbp-0xa4c],edx
  23283e:	40 88 b5 b3 f5 ff ff 	mov    BYTE PTR [rbp-0xa4d],sil
  232845:	72 02                	jb     232849 <u64toa+0x3559>
  232847:	eb 10                	jmp    232859 <u64toa+0x3569>
  232849:	48 8d 3d 78 09 01 00 	lea    rdi,[rip+0x10978]        # 2431c8 <__unnamed_4>
  232850:	31 c0                	xor    eax,eax
  232852:	89 c6                	mov    esi,eax
  232854:	e8 a7 8d fd ff       	call   20b600 <panic>
  232859:	8b 85 b4 f5 ff ff    	mov    eax,DWORD PTR [rbp-0xa4c]
  23285f:	89 c1                	mov    ecx,eax
  232861:	89 ca                	mov    edx,ecx
  232863:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  23286a:	48 89 95 a8 f5 ff ff 	mov    QWORD PTR [rbp-0xa58],rdx
  232871:	72 10                	jb     232883 <u64toa+0x3593>
  232873:	48 8d 3d 7e 0b 01 00 	lea    rdi,[rip+0x10b7e]        # 2433f8 <__unnamed_20>
  23287a:	31 c0                	xor    eax,eax
  23287c:	89 c6                	mov    esi,eax
  23287e:	e8 7d 8d fd ff       	call   20b600 <panic>
  232883:	48 8d 05 96 61 fd ff 	lea    rax,[rip+0xfffffffffffd6196]        # 208a20 <c_digits_lut>
  23288a:	48 8b 8d a8 f5 ff ff 	mov    rcx,QWORD PTR [rbp-0xa58]
  232891:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  232894:	48 8b 85 b8 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa48]
  23289b:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  23289d:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  2328a1:	48 83 c6 01          	add    rsi,0x1
  2328a5:	0f 92 c2             	setb   dl
  2328a8:	48 89 b5 a0 f5 ff ff 	mov    QWORD PTR [rbp-0xa60],rsi
  2328af:	88 95 9f f5 ff ff    	mov    BYTE PTR [rbp-0xa61],dl
  2328b5:	72 02                	jb     2328b9 <u64toa+0x35c9>
  2328b7:	eb 10                	jmp    2328c9 <u64toa+0x35d9>
  2328b9:	48 8d 3d 08 09 01 00 	lea    rdi,[rip+0x10908]        # 2431c8 <__unnamed_4>
  2328c0:	31 c0                	xor    eax,eax
  2328c2:	89 c6                	mov    esi,eax
  2328c4:	e8 37 8d fd ff       	call   20b600 <panic>
  2328c9:	48 8b 85 a0 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa60]
  2328d0:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d5];
  2328d4:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  2328d8:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  2328df:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  2328e3:	48 89 8d 90 f5 ff ff 	mov    QWORD PTR [rbp-0xa70],rcx
  2328ea:	72 10                	jb     2328fc <u64toa+0x360c>
  2328ec:	48 8d 3d 05 0b 01 00 	lea    rdi,[rip+0x10b05]        # 2433f8 <__unnamed_20>
  2328f3:	31 c0                	xor    eax,eax
  2328f5:	89 c6                	mov    esi,eax
  2328f7:	e8 04 8d fd ff       	call   20b600 <panic>
  2328fc:	48 8b 85 90 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa70]
  232903:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  23290a:	48 03 01             	add    rax,QWORD PTR [rcx]
  23290d:	8b 95 04 ff ff ff    	mov    edx,DWORD PTR [rbp-0xfc]
  232913:	89 d6                	mov    esi,edx
  232915:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  23291c:	48 89 85 88 f5 ff ff 	mov    QWORD PTR [rbp-0xa78],rax
  232923:	48 89 b5 80 f5 ff ff 	mov    QWORD PTR [rbp-0xa80],rsi
  23292a:	72 10                	jb     23293c <u64toa+0x364c>
  23292c:	48 8d 3d c5 0a 01 00 	lea    rdi,[rip+0x10ac5]        # 2433f8 <__unnamed_20>
  232933:	31 c0                	xor    eax,eax
  232935:	89 c6                	mov    esi,eax
  232937:	e8 c4 8c fd ff       	call   20b600 <panic>
  23293c:	48 8d 05 dd 60 fd ff 	lea    rax,[rip+0xfffffffffffd60dd]        # 208a20 <c_digits_lut>
  232943:	48 8b 8d 80 f5 ff ff 	mov    rcx,QWORD PTR [rbp-0xa80]
  23294a:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  23294d:	48 8b 85 88 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa78]
  232954:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  232956:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  23295a:	48 83 c6 01          	add    rsi,0x1
  23295e:	0f 92 c2             	setb   dl
  232961:	48 89 b5 78 f5 ff ff 	mov    QWORD PTR [rbp-0xa88],rsi
  232968:	88 95 77 f5 ff ff    	mov    BYTE PTR [rbp-0xa89],dl
  23296e:	72 02                	jb     232972 <u64toa+0x3682>
  232970:	eb 10                	jmp    232982 <u64toa+0x3692>
  232972:	48 8d 3d 4f 08 01 00 	lea    rdi,[rip+0x1084f]        # 2431c8 <__unnamed_4>
  232979:	31 c0                	xor    eax,eax
  23297b:	89 c6                	mov    esi,eax
  23297d:	e8 7e 8c fd ff       	call   20b600 <panic>
  232982:	48 8b 85 78 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa88]
  232989:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d5 + 1];
  23298d:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  232991:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  232998:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  23299c:	48 89 8d 68 f5 ff ff 	mov    QWORD PTR [rbp-0xa98],rcx
  2329a3:	72 10                	jb     2329b5 <u64toa+0x36c5>
  2329a5:	48 8d 3d 4c 0a 01 00 	lea    rdi,[rip+0x10a4c]        # 2433f8 <__unnamed_20>
  2329ac:	31 c0                	xor    eax,eax
  2329ae:	89 c6                	mov    esi,eax
  2329b0:	e8 4b 8c fd ff       	call   20b600 <panic>
  2329b5:	48 8b 85 68 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa98]
  2329bc:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  2329c3:	48 03 01             	add    rax,QWORD PTR [rcx]
  2329c6:	8b 95 04 ff ff ff    	mov    edx,DWORD PTR [rbp-0xfc]
  2329cc:	83 c2 01             	add    edx,0x1
  2329cf:	40 0f 92 c6          	setb   sil
  2329d3:	48 89 85 60 f5 ff ff 	mov    QWORD PTR [rbp-0xaa0],rax
  2329da:	89 95 5c f5 ff ff    	mov    DWORD PTR [rbp-0xaa4],edx
  2329e0:	40 88 b5 5b f5 ff ff 	mov    BYTE PTR [rbp-0xaa5],sil
  2329e7:	72 02                	jb     2329eb <u64toa+0x36fb>
  2329e9:	eb 10                	jmp    2329fb <u64toa+0x370b>
  2329eb:	48 8d 3d d6 07 01 00 	lea    rdi,[rip+0x107d6]        # 2431c8 <__unnamed_4>
  2329f2:	31 c0                	xor    eax,eax
  2329f4:	89 c6                	mov    esi,eax
  2329f6:	e8 05 8c fd ff       	call   20b600 <panic>
  2329fb:	8b 85 5c f5 ff ff    	mov    eax,DWORD PTR [rbp-0xaa4]
  232a01:	89 c1                	mov    ecx,eax
  232a03:	89 ca                	mov    edx,ecx
  232a05:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  232a0c:	48 89 95 50 f5 ff ff 	mov    QWORD PTR [rbp-0xab0],rdx
  232a13:	72 10                	jb     232a25 <u64toa+0x3735>
  232a15:	48 8d 3d dc 09 01 00 	lea    rdi,[rip+0x109dc]        # 2433f8 <__unnamed_20>
  232a1c:	31 c0                	xor    eax,eax
  232a1e:	89 c6                	mov    esi,eax
  232a20:	e8 db 8b fd ff       	call   20b600 <panic>
  232a25:	48 8d 05 f4 5f fd ff 	lea    rax,[rip+0xfffffffffffd5ff4]        # 208a20 <c_digits_lut>
  232a2c:	48 8b 8d 50 f5 ff ff 	mov    rcx,QWORD PTR [rbp-0xab0]
  232a33:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  232a36:	48 8b 85 60 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa0]
  232a3d:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  232a3f:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  232a43:	48 83 c6 01          	add    rsi,0x1
  232a47:	0f 92 c2             	setb   dl
  232a4a:	48 89 b5 48 f5 ff ff 	mov    QWORD PTR [rbp-0xab8],rsi
  232a51:	88 95 47 f5 ff ff    	mov    BYTE PTR [rbp-0xab9],dl
  232a57:	72 02                	jb     232a5b <u64toa+0x376b>
  232a59:	eb 10                	jmp    232a6b <u64toa+0x377b>
  232a5b:	48 8d 3d 66 07 01 00 	lea    rdi,[rip+0x10766]        # 2431c8 <__unnamed_4>
  232a62:	31 c0                	xor    eax,eax
  232a64:	89 c6                	mov    esi,eax
  232a66:	e8 95 8b fd ff       	call   20b600 <panic>
  232a6b:	48 8b 85 48 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xab8]
  232a72:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d6];
  232a76:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  232a7a:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  232a81:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  232a85:	48 89 8d 38 f5 ff ff 	mov    QWORD PTR [rbp-0xac8],rcx
  232a8c:	72 10                	jb     232a9e <u64toa+0x37ae>
  232a8e:	48 8d 3d 63 09 01 00 	lea    rdi,[rip+0x10963]        # 2433f8 <__unnamed_20>
  232a95:	31 c0                	xor    eax,eax
  232a97:	89 c6                	mov    esi,eax
  232a99:	e8 62 8b fd ff       	call   20b600 <panic>
  232a9e:	48 8b 85 38 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xac8]
  232aa5:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  232aac:	48 03 01             	add    rax,QWORD PTR [rcx]
  232aaf:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
  232ab5:	89 d6                	mov    esi,edx
  232ab7:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  232abe:	48 89 85 30 f5 ff ff 	mov    QWORD PTR [rbp-0xad0],rax
  232ac5:	48 89 b5 28 f5 ff ff 	mov    QWORD PTR [rbp-0xad8],rsi
  232acc:	72 10                	jb     232ade <u64toa+0x37ee>
  232ace:	48 8d 3d 23 09 01 00 	lea    rdi,[rip+0x10923]        # 2433f8 <__unnamed_20>
  232ad5:	31 c0                	xor    eax,eax
  232ad7:	89 c6                	mov    esi,eax
  232ad9:	e8 22 8b fd ff       	call   20b600 <panic>
  232ade:	48 8d 05 3b 5f fd ff 	lea    rax,[rip+0xfffffffffffd5f3b]        # 208a20 <c_digits_lut>
  232ae5:	48 8b 8d 28 f5 ff ff 	mov    rcx,QWORD PTR [rbp-0xad8]
  232aec:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  232aef:	48 8b 85 30 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xad0]
  232af6:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  232af8:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  232afc:	48 83 c6 01          	add    rsi,0x1
  232b00:	0f 92 c2             	setb   dl
  232b03:	48 89 b5 20 f5 ff ff 	mov    QWORD PTR [rbp-0xae0],rsi
  232b0a:	88 95 1f f5 ff ff    	mov    BYTE PTR [rbp-0xae1],dl
  232b10:	72 02                	jb     232b14 <u64toa+0x3824>
  232b12:	eb 10                	jmp    232b24 <u64toa+0x3834>
  232b14:	48 8d 3d ad 06 01 00 	lea    rdi,[rip+0x106ad]        # 2431c8 <__unnamed_4>
  232b1b:	31 c0                	xor    eax,eax
  232b1d:	89 c6                	mov    esi,eax
  232b1f:	e8 dc 8a fd ff       	call   20b600 <panic>
  232b24:	48 8b 85 20 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xae0]
  232b2b:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d6 + 1];
  232b2f:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  232b33:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  232b3a:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  232b3e:	48 89 8d 10 f5 ff ff 	mov    QWORD PTR [rbp-0xaf0],rcx
  232b45:	72 10                	jb     232b57 <u64toa+0x3867>
  232b47:	48 8d 3d aa 08 01 00 	lea    rdi,[rip+0x108aa]        # 2433f8 <__unnamed_20>
  232b4e:	31 c0                	xor    eax,eax
  232b50:	89 c6                	mov    esi,eax
  232b52:	e8 a9 8a fd ff       	call   20b600 <panic>
  232b57:	48 8b 85 10 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaf0]
  232b5e:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  232b65:	48 03 01             	add    rax,QWORD PTR [rcx]
  232b68:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
  232b6e:	83 c2 01             	add    edx,0x1
  232b71:	40 0f 92 c6          	setb   sil
  232b75:	48 89 85 08 f5 ff ff 	mov    QWORD PTR [rbp-0xaf8],rax
  232b7c:	89 95 04 f5 ff ff    	mov    DWORD PTR [rbp-0xafc],edx
  232b82:	40 88 b5 03 f5 ff ff 	mov    BYTE PTR [rbp-0xafd],sil
  232b89:	72 02                	jb     232b8d <u64toa+0x389d>
  232b8b:	eb 10                	jmp    232b9d <u64toa+0x38ad>
  232b8d:	48 8d 3d 34 06 01 00 	lea    rdi,[rip+0x10634]        # 2431c8 <__unnamed_4>
  232b94:	31 c0                	xor    eax,eax
  232b96:	89 c6                	mov    esi,eax
  232b98:	e8 63 8a fd ff       	call   20b600 <panic>
  232b9d:	8b 85 04 f5 ff ff    	mov    eax,DWORD PTR [rbp-0xafc]
  232ba3:	89 c1                	mov    ecx,eax
  232ba5:	89 ca                	mov    edx,ecx
  232ba7:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  232bae:	48 89 95 f8 f4 ff ff 	mov    QWORD PTR [rbp-0xb08],rdx
  232bb5:	72 10                	jb     232bc7 <u64toa+0x38d7>
  232bb7:	48 8d 3d 3a 08 01 00 	lea    rdi,[rip+0x1083a]        # 2433f8 <__unnamed_20>
  232bbe:	31 c0                	xor    eax,eax
  232bc0:	89 c6                	mov    esi,eax
  232bc2:	e8 39 8a fd ff       	call   20b600 <panic>
  232bc7:	48 8d 05 52 5e fd ff 	lea    rax,[rip+0xfffffffffffd5e52]        # 208a20 <c_digits_lut>
  232bce:	48 8b 8d f8 f4 ff ff 	mov    rcx,QWORD PTR [rbp-0xb08]
  232bd5:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  232bd8:	48 8b 85 08 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaf8]
  232bdf:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  232be1:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  232be5:	48 83 c6 01          	add    rsi,0x1
  232be9:	0f 92 c2             	setb   dl
  232bec:	48 89 b5 f0 f4 ff ff 	mov    QWORD PTR [rbp-0xb10],rsi
  232bf3:	88 95 ef f4 ff ff    	mov    BYTE PTR [rbp-0xb11],dl
  232bf9:	72 02                	jb     232bfd <u64toa+0x390d>
  232bfb:	eb 10                	jmp    232c0d <u64toa+0x391d>
  232bfd:	48 8d 3d c4 05 01 00 	lea    rdi,[rip+0x105c4]        # 2431c8 <__unnamed_4>
  232c04:	31 c0                	xor    eax,eax
  232c06:	89 c6                	mov    esi,eax
  232c08:	e8 f3 89 fd ff       	call   20b600 <panic>
  232c0d:	48 8b 85 f0 f4 ff ff 	mov    rax,QWORD PTR [rbp-0xb10]
  232c14:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d7];
  232c18:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  232c1c:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  232c23:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  232c27:	48 89 8d e0 f4 ff ff 	mov    QWORD PTR [rbp-0xb20],rcx
  232c2e:	72 10                	jb     232c40 <u64toa+0x3950>
  232c30:	48 8d 3d c1 07 01 00 	lea    rdi,[rip+0x107c1]        # 2433f8 <__unnamed_20>
  232c37:	31 c0                	xor    eax,eax
  232c39:	89 c6                	mov    esi,eax
  232c3b:	e8 c0 89 fd ff       	call   20b600 <panic>
  232c40:	48 8b 85 e0 f4 ff ff 	mov    rax,QWORD PTR [rbp-0xb20]
  232c47:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  232c4e:	48 03 01             	add    rax,QWORD PTR [rcx]
  232c51:	8b 95 fc fe ff ff    	mov    edx,DWORD PTR [rbp-0x104]
  232c57:	89 d6                	mov    esi,edx
  232c59:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  232c60:	48 89 85 d8 f4 ff ff 	mov    QWORD PTR [rbp-0xb28],rax
  232c67:	48 89 b5 d0 f4 ff ff 	mov    QWORD PTR [rbp-0xb30],rsi
  232c6e:	72 10                	jb     232c80 <u64toa+0x3990>
  232c70:	48 8d 3d 81 07 01 00 	lea    rdi,[rip+0x10781]        # 2433f8 <__unnamed_20>
  232c77:	31 c0                	xor    eax,eax
  232c79:	89 c6                	mov    esi,eax
  232c7b:	e8 80 89 fd ff       	call   20b600 <panic>
  232c80:	48 8d 05 99 5d fd ff 	lea    rax,[rip+0xfffffffffffd5d99]        # 208a20 <c_digits_lut>
  232c87:	48 8b 8d d0 f4 ff ff 	mov    rcx,QWORD PTR [rbp-0xb30]
  232c8e:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  232c91:	48 8b 85 d8 f4 ff ff 	mov    rax,QWORD PTR [rbp-0xb28]
  232c98:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  232c9a:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  232c9e:	48 83 c6 01          	add    rsi,0x1
  232ca2:	0f 92 c2             	setb   dl
  232ca5:	48 89 b5 c8 f4 ff ff 	mov    QWORD PTR [rbp-0xb38],rsi
  232cac:	88 95 c7 f4 ff ff    	mov    BYTE PTR [rbp-0xb39],dl
  232cb2:	72 02                	jb     232cb6 <u64toa+0x39c6>
  232cb4:	eb 10                	jmp    232cc6 <u64toa+0x39d6>
  232cb6:	48 8d 3d 0b 05 01 00 	lea    rdi,[rip+0x1050b]        # 2431c8 <__unnamed_4>
  232cbd:	31 c0                	xor    eax,eax
  232cbf:	89 c6                	mov    esi,eax
  232cc1:	e8 3a 89 fd ff       	call   20b600 <panic>
  232cc6:	48 8b 85 c8 f4 ff ff 	mov    rax,QWORD PTR [rbp-0xb38]
  232ccd:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d7 + 1];
  232cd1:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  232cd5:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  232cdc:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  232ce0:	48 89 8d b8 f4 ff ff 	mov    QWORD PTR [rbp-0xb48],rcx
  232ce7:	72 10                	jb     232cf9 <u64toa+0x3a09>
  232ce9:	48 8d 3d 08 07 01 00 	lea    rdi,[rip+0x10708]        # 2433f8 <__unnamed_20>
  232cf0:	31 c0                	xor    eax,eax
  232cf2:	89 c6                	mov    esi,eax
  232cf4:	e8 07 89 fd ff       	call   20b600 <panic>
  232cf9:	48 8b 85 b8 f4 ff ff 	mov    rax,QWORD PTR [rbp-0xb48]
  232d00:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  232d07:	48 03 01             	add    rax,QWORD PTR [rcx]
  232d0a:	8b 95 fc fe ff ff    	mov    edx,DWORD PTR [rbp-0x104]
  232d10:	83 c2 01             	add    edx,0x1
  232d13:	40 0f 92 c6          	setb   sil
  232d17:	48 89 85 b0 f4 ff ff 	mov    QWORD PTR [rbp-0xb50],rax
  232d1e:	89 95 ac f4 ff ff    	mov    DWORD PTR [rbp-0xb54],edx
  232d24:	40 88 b5 ab f4 ff ff 	mov    BYTE PTR [rbp-0xb55],sil
  232d2b:	72 02                	jb     232d2f <u64toa+0x3a3f>
  232d2d:	eb 10                	jmp    232d3f <u64toa+0x3a4f>
  232d2f:	48 8d 3d 92 04 01 00 	lea    rdi,[rip+0x10492]        # 2431c8 <__unnamed_4>
  232d36:	31 c0                	xor    eax,eax
  232d38:	89 c6                	mov    esi,eax
  232d3a:	e8 c1 88 fd ff       	call   20b600 <panic>
  232d3f:	8b 85 ac f4 ff ff    	mov    eax,DWORD PTR [rbp-0xb54]
  232d45:	89 c1                	mov    ecx,eax
  232d47:	89 ca                	mov    edx,ecx
  232d49:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  232d50:	48 89 95 a0 f4 ff ff 	mov    QWORD PTR [rbp-0xb60],rdx
  232d57:	72 10                	jb     232d69 <u64toa+0x3a79>
  232d59:	48 8d 3d 98 06 01 00 	lea    rdi,[rip+0x10698]        # 2433f8 <__unnamed_20>
  232d60:	31 c0                	xor    eax,eax
  232d62:	89 c6                	mov    esi,eax
  232d64:	e8 97 88 fd ff       	call   20b600 <panic>
  232d69:	48 8d 05 b0 5c fd ff 	lea    rax,[rip+0xfffffffffffd5cb0]        # 208a20 <c_digits_lut>
  232d70:	48 8b 8d a0 f4 ff ff 	mov    rcx,QWORD PTR [rbp-0xb60]
  232d77:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  232d7a:	48 8b 85 b0 f4 ff ff 	mov    rax,QWORD PTR [rbp-0xb50]
  232d81:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  232d83:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  232d87:	48 83 c6 01          	add    rsi,0x1
  232d8b:	0f 92 c2             	setb   dl
  232d8e:	48 89 b5 98 f4 ff ff 	mov    QWORD PTR [rbp-0xb68],rsi
  232d95:	88 95 97 f4 ff ff    	mov    BYTE PTR [rbp-0xb69],dl
  232d9b:	72 02                	jb     232d9f <u64toa+0x3aaf>
  232d9d:	eb 10                	jmp    232daf <u64toa+0x3abf>
  232d9f:	48 8d 3d 22 04 01 00 	lea    rdi,[rip+0x10422]        # 2431c8 <__unnamed_4>
  232da6:	31 c0                	xor    eax,eax
  232da8:	89 c6                	mov    esi,eax
  232daa:	e8 51 88 fd ff       	call   20b600 <panic>
  232daf:	48 8b 85 98 f4 ff ff 	mov    rax,QWORD PTR [rbp-0xb68]
  232db6:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d8];
  232dba:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  232dbe:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  232dc5:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  232dc9:	48 89 8d 88 f4 ff ff 	mov    QWORD PTR [rbp-0xb78],rcx
  232dd0:	72 10                	jb     232de2 <u64toa+0x3af2>
  232dd2:	48 8d 3d 1f 06 01 00 	lea    rdi,[rip+0x1061f]        # 2433f8 <__unnamed_20>
  232dd9:	31 c0                	xor    eax,eax
  232ddb:	89 c6                	mov    esi,eax
  232ddd:	e8 1e 88 fd ff       	call   20b600 <panic>
  232de2:	48 8b 85 88 f4 ff ff 	mov    rax,QWORD PTR [rbp-0xb78]
  232de9:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  232df0:	48 03 01             	add    rax,QWORD PTR [rcx]
  232df3:	8b 95 f8 fe ff ff    	mov    edx,DWORD PTR [rbp-0x108]
  232df9:	89 d6                	mov    esi,edx
  232dfb:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  232e02:	48 89 85 80 f4 ff ff 	mov    QWORD PTR [rbp-0xb80],rax
  232e09:	48 89 b5 78 f4 ff ff 	mov    QWORD PTR [rbp-0xb88],rsi
  232e10:	72 10                	jb     232e22 <u64toa+0x3b32>
  232e12:	48 8d 3d df 05 01 00 	lea    rdi,[rip+0x105df]        # 2433f8 <__unnamed_20>
  232e19:	31 c0                	xor    eax,eax
  232e1b:	89 c6                	mov    esi,eax
  232e1d:	e8 de 87 fd ff       	call   20b600 <panic>
  232e22:	48 8d 05 f7 5b fd ff 	lea    rax,[rip+0xfffffffffffd5bf7]        # 208a20 <c_digits_lut>
  232e29:	48 8b 8d 78 f4 ff ff 	mov    rcx,QWORD PTR [rbp-0xb88]
  232e30:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  232e33:	48 8b 85 80 f4 ff ff 	mov    rax,QWORD PTR [rbp-0xb80]
  232e3a:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  232e3c:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  232e40:	48 83 c6 01          	add    rsi,0x1
  232e44:	0f 92 c2             	setb   dl
  232e47:	48 89 b5 70 f4 ff ff 	mov    QWORD PTR [rbp-0xb90],rsi
  232e4e:	88 95 6f f4 ff ff    	mov    BYTE PTR [rbp-0xb91],dl
  232e54:	72 02                	jb     232e58 <u64toa+0x3b68>
  232e56:	eb 10                	jmp    232e68 <u64toa+0x3b78>
  232e58:	48 8d 3d 69 03 01 00 	lea    rdi,[rip+0x10369]        # 2431c8 <__unnamed_4>
  232e5f:	31 c0                	xor    eax,eax
  232e61:	89 c6                	mov    esi,eax
  232e63:	e8 98 87 fd ff       	call   20b600 <panic>
  232e68:	48 8b 85 70 f4 ff ff 	mov    rax,QWORD PTR [rbp-0xb90]
  232e6f:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d8 + 1];
  232e73:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  232e77:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  232e7e:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  232e82:	48 89 8d 60 f4 ff ff 	mov    QWORD PTR [rbp-0xba0],rcx
  232e89:	72 10                	jb     232e9b <u64toa+0x3bab>
  232e8b:	48 8d 3d 66 05 01 00 	lea    rdi,[rip+0x10566]        # 2433f8 <__unnamed_20>
  232e92:	31 c0                	xor    eax,eax
  232e94:	89 c6                	mov    esi,eax
  232e96:	e8 65 87 fd ff       	call   20b600 <panic>
  232e9b:	48 8b 85 60 f4 ff ff 	mov    rax,QWORD PTR [rbp-0xba0]
  232ea2:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  232ea9:	48 03 01             	add    rax,QWORD PTR [rcx]
  232eac:	8b 95 f8 fe ff ff    	mov    edx,DWORD PTR [rbp-0x108]
  232eb2:	83 c2 01             	add    edx,0x1
  232eb5:	40 0f 92 c6          	setb   sil
  232eb9:	48 89 85 58 f4 ff ff 	mov    QWORD PTR [rbp-0xba8],rax
  232ec0:	89 95 54 f4 ff ff    	mov    DWORD PTR [rbp-0xbac],edx
  232ec6:	40 88 b5 53 f4 ff ff 	mov    BYTE PTR [rbp-0xbad],sil
  232ecd:	72 02                	jb     232ed1 <u64toa+0x3be1>
  232ecf:	eb 10                	jmp    232ee1 <u64toa+0x3bf1>
  232ed1:	48 8d 3d f0 02 01 00 	lea    rdi,[rip+0x102f0]        # 2431c8 <__unnamed_4>
  232ed8:	31 c0                	xor    eax,eax
  232eda:	89 c6                	mov    esi,eax
  232edc:	e8 1f 87 fd ff       	call   20b600 <panic>
  232ee1:	8b 85 54 f4 ff ff    	mov    eax,DWORD PTR [rbp-0xbac]
  232ee7:	89 c1                	mov    ecx,eax
  232ee9:	89 ca                	mov    edx,ecx
  232eeb:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  232ef2:	48 89 95 48 f4 ff ff 	mov    QWORD PTR [rbp-0xbb8],rdx
  232ef9:	72 10                	jb     232f0b <u64toa+0x3c1b>
  232efb:	48 8d 3d f6 04 01 00 	lea    rdi,[rip+0x104f6]        # 2433f8 <__unnamed_20>
  232f02:	31 c0                	xor    eax,eax
  232f04:	89 c6                	mov    esi,eax
  232f06:	e8 f5 86 fd ff       	call   20b600 <panic>
  232f0b:	48 8d 05 0e 5b fd ff 	lea    rax,[rip+0xfffffffffffd5b0e]        # 208a20 <c_digits_lut>
  232f12:	48 8b 8d 48 f4 ff ff 	mov    rcx,QWORD PTR [rbp-0xbb8]
  232f19:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  232f1c:	48 8b 85 58 f4 ff ff 	mov    rax,QWORD PTR [rbp-0xba8]
  232f23:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  232f25:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  232f29:	48 83 c6 01          	add    rsi,0x1
  232f2d:	0f 92 c2             	setb   dl
  232f30:	48 89 b5 40 f4 ff ff 	mov    QWORD PTR [rbp-0xbc0],rsi
  232f37:	88 95 3f f4 ff ff    	mov    BYTE PTR [rbp-0xbc1],dl
  232f3d:	72 02                	jb     232f41 <u64toa+0x3c51>
  232f3f:	eb 10                	jmp    232f51 <u64toa+0x3c61>
  232f41:	48 8d 3d 80 02 01 00 	lea    rdi,[rip+0x10280]        # 2431c8 <__unnamed_4>
  232f48:	31 c0                	xor    eax,eax
  232f4a:	89 c6                	mov    esi,eax
  232f4c:	e8 af 86 fd ff       	call   20b600 <panic>
  232f51:	48 8b 85 40 f4 ff ff 	mov    rax,QWORD PTR [rbp-0xbc0]
  232f58:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
    } else if (value < kTen16) {
  232f5c:	e9 73 c8 ff ff       	jmp    22f7d4 <u64toa+0x4e4>
  232f61:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  232f68:	0f 1f 84 00 00 00 00 
  232f6f:	00 

0000000000232f70 <frexp64>:
    y |= 0x3F000000;
    result.significand = @bitCast(f32, y);
    return result;
}

fn frexp64(x: f64) frexp64_result {
  232f70:	55                   	push   rbp
  232f71:	48 89 e5             	mov    rbp,rsp
  232f74:	48 83 ec 70          	sub    rsp,0x70
  232f78:	48 89 f8             	mov    rax,rdi
  232f7b:	c5 fb 11 45 e8       	vmovsd QWORD PTR [rbp-0x18],xmm0
    var result: frexp64_result = undefined;
  232f80:	48 8b 0d 29 d3 fc ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffcd329]        # 2002b0 <__unnamed_100>
  232f87:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  232f8b:	48 8b 0d 26 d3 fc ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffcd326]        # 2002b8 <__unnamed_100+0x8>
  232f92:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx

    var y = @bitCast(u64, x);
  232f96:	c5 fb 10 45 e8       	vmovsd xmm0,QWORD PTR [rbp-0x18]
  232f9b:	c4 e1 f9 7e c1       	vmovq  rcx,xmm0
  232fa0:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    const e = @intCast(i32, y >> 52) & 0x7FF;
  232fa4:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  232fa8:	48 c1 e9 34          	shr    rcx,0x34
  232fac:	89 ca                	mov    edx,ecx
  232fae:	48 63 f2             	movsxd rsi,edx
  232fb1:	48 39 f1             	cmp    rcx,rsi
  232fb4:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  232fb8:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
  232fbc:	89 55 b4             	mov    DWORD PTR [rbp-0x4c],edx
  232fbf:	0f 84 02 01 00 00    	je     2330c7 <frexp64+0x157>
  232fc5:	e9 17 01 00 00       	jmp    2330e1 <frexp64+0x171>
  232fca:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0

    if (e == 0) {
        if (x != 0) {
  232fce:	c5 fb 10 4d e8       	vmovsd xmm1,QWORD PTR [rbp-0x18]
  232fd3:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  232fd7:	74 4c                	je     233025 <frexp64+0xb5>
  232fd9:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  232fdd:	c5 fb 10 05 83 dc fc 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffcdc83]        # 200c68 <__unnamed_182+0x8>
  232fe4:	ff 
            // subnormal
            result = frexp64(x * 0x1.0p64);
  232fe5:	c5 fb 59 45 e8       	vmulsd xmm0,xmm0,QWORD PTR [rbp-0x18]
  232fea:	e8 81 ff ff ff       	call   232f70 <frexp64>
  232fef:	48 8d 7d d8          	lea    rdi,[rbp-0x28]
  232ff3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  232ff7:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  232ffb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  232fff:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
            result.exponent -= 64;
  233003:	48 83 c7 08          	add    rdi,0x8
  233007:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
  23300a:	83 e9 40             	sub    ecx,0x40
  23300d:	0f 90 c2             	seto   dl
  233010:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  233014:	89 4d a4             	mov    DWORD PTR [rbp-0x5c],ecx
  233017:	88 55 a3             	mov    BYTE PTR [rbp-0x5d],dl
  23301a:	0f 80 d1 00 00 00    	jo     2330f1 <frexp64+0x181>
  233020:	e9 dc 00 00 00       	jmp    233101 <frexp64+0x191>
        } else {
            // frexp(+-0) = (+-0, 0)
            result.significand = x;
  233025:	c5 fb 10 45 e8       	vmovsd xmm0,QWORD PTR [rbp-0x18]
  23302a:	c5 fb 11 45 d8       	vmovsd QWORD PTR [rbp-0x28],xmm0
            result.exponent = 0;
  23302f:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
        }
        return result;
  233036:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  23303a:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  23303e:	48 89 01             	mov    QWORD PTR [rcx],rax
  233041:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  233045:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  233049:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  23304d:	48 83 c4 70          	add    rsp,0x70
  233051:	5d                   	pop    rbp
  233052:	c3                   	ret    
    } else if (e == 0x7FF) {
  233053:	81 7d cc ff 07 00 00 	cmp    DWORD PTR [rbp-0x34],0x7ff
  23305a:	75 45                	jne    2330a1 <frexp64+0x131>
        // frexp(nan) = (nan, undefined)
        result.significand = x;
  23305c:	c5 fb 10 45 e8       	vmovsd xmm0,QWORD PTR [rbp-0x18]
  233061:	c5 fb 11 45 d8       	vmovsd QWORD PTR [rbp-0x28],xmm0
        result.exponent = undefined;
  233066:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax

        // frexp(+-inf) = (+-inf, 0)
        if (math.isInf(x)) {
  233069:	c5 fb 10 45 e8       	vmovsd xmm0,QWORD PTR [rbp-0x18]
  23306e:	e8 ad 02 00 00       	call   233320 <isInf>
  233073:	a8 01                	test   al,0x1
  233075:	75 02                	jne    233079 <frexp64+0x109>
  233077:	eb 09                	jmp    233082 <frexp64+0x112>
            result.exponent = 0;
  233079:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
        if (math.isInf(x)) {
  233080:	eb 02                	jmp    233084 <frexp64+0x114>
  233082:	eb 00                	jmp    233084 <frexp64+0x114>
        }

        return result;
  233084:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  233088:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  23308c:	48 89 01             	mov    QWORD PTR [rcx],rax
  23308f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  233093:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  233097:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  23309b:	48 83 c4 70          	add    rsp,0x70
  23309f:	5d                   	pop    rbp
  2330a0:	c3                   	ret    
    } else if (e == 0x7FF) {
  2330a1:	eb 00                	jmp    2330a3 <frexp64+0x133>
    if (e == 0) {
  2330a3:	eb 00                	jmp    2330a5 <frexp64+0x135>
  2330a5:	48 8d 45 d8          	lea    rax,[rbp-0x28]
    }

    result.exponent = e - 0x3FE;
  2330a9:	48 83 c0 08          	add    rax,0x8
  2330ad:	8b 4d cc             	mov    ecx,DWORD PTR [rbp-0x34]
  2330b0:	81 e9 fe 03 00 00    	sub    ecx,0x3fe
  2330b6:	0f 90 c2             	seto   dl
  2330b9:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  2330bd:	89 4d 94             	mov    DWORD PTR [rbp-0x6c],ecx
  2330c0:	88 55 93             	mov    BYTE PTR [rbp-0x6d],dl
  2330c3:	70 4a                	jo     23310f <frexp64+0x19f>
  2330c5:	eb 58                	jmp    23311f <frexp64+0x1af>
    const e = @intCast(i32, y >> 52) & 0x7FF;
  2330c7:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
  2330ca:	25 ff 07 00 00       	and    eax,0x7ff
  2330cf:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
    if (e == 0) {
  2330d2:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
  2330d6:	0f 84 ee fe ff ff    	je     232fca <frexp64+0x5a>
  2330dc:	e9 72 ff ff ff       	jmp    233053 <frexp64+0xe3>
  2330e1:	48 8d 3d c0 03 01 00 	lea    rdi,[rip+0x103c0]        # 2434a8 <__unnamed_22>
  2330e8:	31 c0                	xor    eax,eax
  2330ea:	89 c6                	mov    esi,eax
    const e = @intCast(i32, y >> 52) & 0x7FF;
  2330ec:	e8 0f 85 fd ff       	call   20b600 <panic>
  2330f1:	48 8d 3d d0 00 01 00 	lea    rdi,[rip+0x100d0]        # 2431c8 <__unnamed_4>
  2330f8:	31 c0                	xor    eax,eax
  2330fa:	89 c6                	mov    esi,eax
            result.exponent -= 64;
  2330fc:	e8 ff 84 fd ff       	call   20b600 <panic>
  233101:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  233105:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
  233108:	89 08                	mov    DWORD PTR [rax],ecx
        if (x != 0) {
  23310a:	e9 27 ff ff ff       	jmp    233036 <frexp64+0xc6>
  23310f:	48 8d 3d b2 00 01 00 	lea    rdi,[rip+0x100b2]        # 2431c8 <__unnamed_4>
  233116:	31 c0                	xor    eax,eax
  233118:	89 c6                	mov    esi,eax
    result.exponent = e - 0x3FE;
  23311a:	e8 e1 84 fd ff       	call   20b600 <panic>
  23311f:	48 b8 00 00 00 00 00 	movabs rax,0x3fe0000000000000
  233126:	00 e0 3f 
  233129:	48 b9 ff ff ff ff ff 	movabs rcx,0x800fffffffffffff
  233130:	ff 0f 80 
  233133:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  233137:	8b 75 94             	mov    esi,DWORD PTR [rbp-0x6c]
  23313a:	89 32                	mov    DWORD PTR [rdx],esi
    y &= 0x800FFFFFFFFFFFFF;
  23313c:	48 23 4d d0          	and    rcx,QWORD PTR [rbp-0x30]
  233140:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    y |= 0x3FE0000000000000;
  233144:	48 0b 45 d0          	or     rax,QWORD PTR [rbp-0x30]
  233148:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
    result.significand = @bitCast(f64, y);
  23314c:	c5 fa 7e 45 d0       	vmovq  xmm0,QWORD PTR [rbp-0x30]
  233151:	c5 fb 11 45 d8       	vmovsd QWORD PTR [rbp-0x28],xmm0
    return result;
  233156:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  23315a:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  23315e:	48 89 01             	mov    QWORD PTR [rcx],rax
  233161:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  233165:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  233169:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  23316d:	48 83 c4 70          	add    rsp,0x70
  233171:	5d                   	pop    rbp
  233172:	c3                   	ret    
  233173:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  23317a:	84 00 00 00 00 00 

0000000000233180 <floor64>:
            return -1.0;
        }
    }
}

fn floor64(x: f64) f64 {
  233180:	55                   	push   rbp
  233181:	48 89 e5             	mov    rbp,rsp
  233184:	48 83 ec 30          	sub    rsp,0x30
  233188:	be aa 00 00 00       	mov    esi,0xaa
  23318d:	b8 08 00 00 00       	mov    eax,0x8
  233192:	89 c2                	mov    edx,eax
  233194:	48 8d 4d e0          	lea    rcx,[rbp-0x20]
  233198:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    const u = @bitCast(u64, x);
  23319d:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  2331a2:	c4 e1 f9 7e c7       	vmovq  rdi,xmm0
  2331a7:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
    const e = (u >> 52) & 0x7FF;
  2331ab:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  2331af:	48 c1 ef 34          	shr    rdi,0x34
  2331b3:	48 81 e7 ff 07 00 00 	and    rdi,0x7ff
  2331ba:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    var y: f64 = undefined;
  2331be:	48 89 cf             	mov    rdi,rcx
  2331c1:	e8 ea 16 00 00       	call   2348b0 <memset>

    if (e >= 0x3FF + 52 or x == 0) {
  2331c6:	48 81 7d e8 33 04 00 	cmp    QWORD PTR [rbp-0x18],0x433
  2331cd:	00 
  2331ce:	41 0f 93 c0          	setae  r8b
  2331d2:	41 f6 c0 01          	test   r8b,0x1
  2331d6:	44 88 45 df          	mov    BYTE PTR [rbp-0x21],r8b
  2331da:	75 18                	jne    2331f4 <floor64+0x74>
  2331dc:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
  2331e0:	c5 fb 10 4d f8       	vmovsd xmm1,QWORD PTR [rbp-0x8]
  2331e5:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  2331e9:	0f 94 c0             	sete   al
  2331ec:	0f 9b c1             	setnp  cl
  2331ef:	20 c8                	and    al,cl
  2331f1:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
  2331f4:	8a 45 df             	mov    al,BYTE PTR [rbp-0x21]
  2331f7:	a8 01                	test   al,0x1
  2331f9:	75 02                	jne    2331fd <floor64+0x7d>
  2331fb:	eb 0b                	jmp    233208 <floor64+0x88>
        return x;
  2331fd:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  233202:	48 83 c4 30          	add    rsp,0x30
  233206:	5d                   	pop    rbp
  233207:	c3                   	ret    
    if (e >= 0x3FF + 52 or x == 0) {
  233208:	eb 00                	jmp    23320a <floor64+0x8a>
    }

    if (u >> 63 != 0) {
  23320a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  23320e:	48 c1 e8 3f          	shr    rax,0x3f
  233212:	48 83 f8 00          	cmp    rax,0x0
  233216:	74 21                	je     233239 <floor64+0xb9>
  233218:	c5 fb 10 05 10 da fc 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffcda10]        # 200c30 <__unnamed_186+0x30>
  23321f:	ff 
        @setFloatMode(this, builtin.FloatMode.Strict);
        y = x - math.f64_toint + math.f64_toint - x;
  233220:	c5 fb 10 4d f8       	vmovsd xmm1,QWORD PTR [rbp-0x8]
  233225:	c5 f3 5c c8          	vsubsd xmm1,xmm1,xmm0
  233229:	c5 f3 58 c0          	vaddsd xmm0,xmm1,xmm0
  23322d:	c5 fb 5c 45 f8       	vsubsd xmm0,xmm0,QWORD PTR [rbp-0x8]
  233232:	c5 fb 11 45 e0       	vmovsd QWORD PTR [rbp-0x20],xmm0
    if (u >> 63 != 0) {
  233237:	eb 1b                	jmp    233254 <floor64+0xd4>
  233239:	c5 fb 10 05 ef d9 fc 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffcd9ef]        # 200c30 <__unnamed_186+0x30>
  233240:	ff 
    } else {
        @setFloatMode(this, builtin.FloatMode.Strict);
        y = x + math.f64_toint - math.f64_toint - x;
  233241:	c5 fb 58 4d f8       	vaddsd xmm1,xmm0,QWORD PTR [rbp-0x8]
  233246:	c5 f3 5c c0          	vsubsd xmm0,xmm1,xmm0
  23324a:	c5 fb 5c 45 f8       	vsubsd xmm0,xmm0,QWORD PTR [rbp-0x8]
  23324f:	c5 fb 11 45 e0       	vmovsd QWORD PTR [rbp-0x20],xmm0
    }

    if (e <= 0x3FF - 1) {
  233254:	48 81 7d e8 fe 03 00 	cmp    QWORD PTR [rbp-0x18],0x3fe
  23325b:	00 
  23325c:	77 30                	ja     23328e <floor64+0x10e>
        math.forceEval(y);
  23325e:	c5 fb 10 45 e0       	vmovsd xmm0,QWORD PTR [rbp-0x20]
  233263:	e8 f8 00 00 00       	call   233360 <forceEval>
        if (u >> 63 != 0) {
  233268:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  23326c:	48 c1 e8 3f          	shr    rax,0x3f
  233270:	48 83 f8 00          	cmp    rax,0x0
  233274:	74 0e                	je     233284 <floor64+0x104>
  233276:	c5 fb 10 05 92 d9 fc 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffcd992]        # 200c10 <__unnamed_186+0x10>
  23327d:	ff 
            return -1.0;
  23327e:	48 83 c4 30          	add    rsp,0x30
  233282:	5d                   	pop    rbp
  233283:	c3                   	ret    
  233284:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
        } else {
            return 0.0;
  233288:	48 83 c4 30          	add    rsp,0x30
  23328c:	5d                   	pop    rbp
  23328d:	c3                   	ret    
  23328e:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
        }
    } else if (y > 0) {
  233292:	c5 fb 10 4d e0       	vmovsd xmm1,QWORD PTR [rbp-0x20]
  233297:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  23329b:	76 1c                	jbe    2332b9 <floor64+0x139>
  23329d:	c5 fb 10 05 53 d9 fc 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffcd953]        # 200bf8 <__unnamed_187+0x8>
  2332a4:	ff 
        return x + y - 1;
  2332a5:	c5 fb 10 4d f8       	vmovsd xmm1,QWORD PTR [rbp-0x8]
  2332aa:	c5 f3 58 4d e0       	vaddsd xmm1,xmm1,QWORD PTR [rbp-0x20]
  2332af:	c5 f3 5c c0          	vsubsd xmm0,xmm1,xmm0
  2332b3:	48 83 c4 30          	add    rsp,0x30
  2332b7:	5d                   	pop    rbp
  2332b8:	c3                   	ret    
    } else {
        return x + y;
  2332b9:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  2332be:	c5 fb 58 45 e0       	vaddsd xmm0,xmm0,QWORD PTR [rbp-0x20]
  2332c3:	48 83 c4 30          	add    rsp,0x30
  2332c7:	5d                   	pop    rbp
  2332c8:	c3                   	ret    
  2332c9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

00000000002332d0 <split>:
fn split(val: f64, hi: *f64, lo: *f64) void {
  2332d0:	55                   	push   rbp
  2332d1:	48 89 e5             	mov    rbp,rsp
  2332d4:	48 83 ec 20          	sub    rsp,0x20
  2332d8:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
  2332dd:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  2332e1:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
    hi.* = gethi(val);
  2332e5:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  2332e9:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  2332ee:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  2332f2:	e8 b9 00 00 00       	call   2333b0 <gethi>
  2332f7:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  2332fb:	c5 fb 11 06          	vmovsd QWORD PTR [rsi],xmm0
    lo.* = val - hi.*;
  2332ff:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  233303:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  233308:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  23330c:	c5 fb 5c 00          	vsubsd xmm0,xmm0,QWORD PTR [rax]
  233310:	c5 fb 11 07          	vmovsd QWORD PTR [rdi],xmm0
fn split(val: f64, hi: *f64, lo: *f64) void {
  233314:	48 83 c4 20          	add    rsp,0x20
  233318:	5d                   	pop    rbp
  233319:	c3                   	ret    
  23331a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000233320 <isInf>:
pub fn isInf(x: var) bool {
  233320:	55                   	push   rbp
  233321:	48 89 e5             	mov    rbp,rsp
  233324:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
            const bits = @bitCast(u64, x);
  233329:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  23332e:	c5 fb 11 45 f0       	vmovsd QWORD PTR [rbp-0x10],xmm0
            return bits & (@maxValue(u64) >> 1) == (0x7FF << 52);
  233333:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  233337:	b1 3f                	mov    cl,0x3f
  233339:	88 ca                	mov    dl,cl
  23333b:	c4 e2 e8 f5 c0       	bzhi   rax,rax,rdx
  233340:	48 ba 00 00 00 00 00 	movabs rdx,0x7ff0000000000000
  233347:	00 f0 7f 
  23334a:	48 29 d0             	sub    rax,rdx
  23334d:	0f 94 c1             	sete   cl
  233350:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  233354:	88 c8                	mov    al,cl
  233356:	5d                   	pop    rbp
  233357:	c3                   	ret    
  233358:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  23335f:	00 

0000000000233360 <forceEval>:
pub fn forceEval(value: var) void {
  233360:	55                   	push   rbp
  233361:	48 89 e5             	mov    rbp,rsp
  233364:	48 83 ec 20          	sub    rsp,0x20
  233368:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  23336c:	be aa 00 00 00       	mov    esi,0xaa
  233371:	b9 08 00 00 00       	mov    ecx,0x8
  233376:	89 ca                	mov    edx,ecx
  233378:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
            var x: f64 = undefined;
  23337d:	48 89 c7             	mov    rdi,rax
  233380:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  233384:	e8 27 15 00 00       	call   2348b0 <memset>
            const p = @ptrCast(*volatile f64, &x);
  233389:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  23338d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
            p.* = x;
  233391:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  233395:	c5 fb 10 45 f0       	vmovsd xmm0,QWORD PTR [rbp-0x10]
  23339a:	c5 fb 11 02          	vmovsd QWORD PTR [rdx],xmm0
pub fn forceEval(value: var) void {
  23339e:	48 83 c4 20          	add    rsp,0x20
  2333a2:	5d                   	pop    rbp
  2333a3:	c3                   	ret    
  2333a4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2333ab:	00 00 00 00 00 

00000000002333b0 <gethi>:
fn gethi(in: f64) f64 {
  2333b0:	55                   	push   rbp
  2333b1:	48 89 e5             	mov    rbp,rsp
  2333b4:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    const bits = @bitCast(u64, in);
  2333b9:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  2333be:	c4 e1 f9 7e c0       	vmovq  rax,xmm0
  2333c3:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    const new_bits = bits & 0xFFFFFFFFF8000000;
  2333c7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2333cb:	48 25 00 00 00 f8    	and    rax,0xfffffffff8000000
  2333d1:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    return @bitCast(f64, new_bits);
  2333d5:	c5 fa 7e 45 e8       	vmovq  xmm0,QWORD PTR [rbp-0x18]
  2333da:	5d                   	pop    rbp
  2333db:	c3                   	ret    
  2333dc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

00000000002333e0 <_start>:
}

nakedcc fn _start() noreturn {
    switch (builtin.arch) {
        builtin.Arch.x86_64 => {
            argc_ptr = asm ("lea (%%rsp), %[argc]"
  2333e0:	48 8d 04 24          	lea    rax,[rsp]
  2333e4:	48 89 05 c5 8c 00 00 	mov    QWORD PTR [rip+0x8cc5],rax        # 23c0b0 <argc_ptr>
        },
        else => @compileError("unsupported arch"),
    }
    // If LLVM inlines stack variables into _start, they will overwrite
    // the command line argument data.
    @noInlineCall(posixCallMainAndExit);
  2333eb:	e8 00 00 00 00       	call   2333f0 <posixCallMainAndExit>

00000000002333f0 <posixCallMainAndExit>:

    std.os.windows.ExitProcess(callMain());
}

// TODO https://github.com/ziglang/zig/issues/265
fn posixCallMainAndExit() noreturn {
  2333f0:	55                   	push   rbp
  2333f1:	48 89 e5             	mov    rbp,rsp
    const argc = argc_ptr[0];
  2333f4:	48 81 ec c0 00 00 00 	sub    rsp,0xc0
  2333fb:	48 8b 05 ae 8c 00 00 	mov    rax,QWORD PTR [rip+0x8cae]        # 23c0b0 <argc_ptr>
  233402:	48 8b 00             	mov    rax,QWORD PTR [rax]
  233405:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    const argv = @ptrCast([*][*]u8, argc_ptr + 1);
  233409:	48 8b 05 a0 8c 00 00 	mov    rax,QWORD PTR [rip+0x8ca0]        # 23c0b0 <argc_ptr>
  233410:	48 83 c0 08          	add    rax,0x8
  233414:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax

    const envp_optional = @ptrCast([*]?[*]u8, argv + argc + 1);
  233418:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  23341c:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  233420:	48 c1 e1 03          	shl    rcx,0x3
  233424:	48 01 c8             	add    rax,rcx
  233427:	48 83 c0 08          	add    rax,0x8
  23342b:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
    var envp_count: usize = 0;
  23342f:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
  233436:	00 
    while (envp_optional[envp_count]) |_| : (envp_count += 1) {}
  233437:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  23343b:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  23343f:	48 89 c2             	mov    rdx,rax
  233442:	48 c1 e2 03          	shl    rdx,0x3
  233446:	48 89 ce             	mov    rsi,rcx
  233449:	48 01 d6             	add    rsi,rdx
  23344c:	48 83 3c c1 00       	cmp    QWORD PTR [rcx+rax*8],0x0
  233451:	48 89 75 98          	mov    QWORD PTR [rbp-0x68],rsi
  233455:	74 28                	je     23347f <posixCallMainAndExit+0x8f>
  233457:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  23345b:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  23345e:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
  233462:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  233466:	48 83 c1 01          	add    rcx,0x1
  23346a:	0f 92 c2             	setb   dl
  23346d:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
  233471:	88 55 8f             	mov    BYTE PTR [rbp-0x71],dl
  233474:	0f 82 c6 00 00 00    	jb     233540 <posixCallMainAndExit+0x150>
  23347a:	e9 d1 00 00 00       	jmp    233550 <posixCallMainAndExit+0x160>
  23347f:	31 c0                	xor    eax,eax
  233481:	89 c1                	mov    ecx,eax
    const envp = @ptrCast([*][*]u8, envp_optional)[0..envp_count];
  233483:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  233487:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  23348b:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  23348f:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  233493:	48 39 d1             	cmp    rcx,rdx
  233496:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
  23349a:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
  2334a1:	0f 86 c6 00 00 00    	jbe    23356d <posixCallMainAndExit+0x17d>
  2334a7:	e9 b1 00 00 00       	jmp    23355d <posixCallMainAndExit+0x16d>
    if (builtin.os == builtin.Os.linux) {
        const auxv = @ptrCast([*]usize, envp.ptr + envp_count + 1);
        var i: usize = 0;
        while (auxv[i] != 0) : (i += 2) {
  2334ac:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2334b0:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  2334b4:	48 83 3c c1 00       	cmp    QWORD PTR [rcx+rax*8],0x0
  2334b9:	74 56                	je     233511 <posixCallMainAndExit+0x121>
            if (auxv[i] < std.os.linux_aux_raw.len) std.os.linux_aux_raw[auxv[i]] = auxv[i + 1];
  2334bb:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2334bf:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  2334c3:	48 83 3c c1 26       	cmp    QWORD PTR [rcx+rax*8],0x26
  2334c8:	73 22                	jae    2334ec <posixCallMainAndExit+0xfc>
  2334ca:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2334ce:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  2334d2:	48 8b 04 c1          	mov    rax,QWORD PTR [rcx+rax*8]
  2334d6:	48 83 f8 26          	cmp    rax,0x26
  2334da:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  2334e1:	0f 82 e1 00 00 00    	jb     2335c8 <posixCallMainAndExit+0x1d8>
  2334e7:	e9 cc 00 00 00       	jmp    2335b8 <posixCallMainAndExit+0x1c8>
  2334ec:	eb 00                	jmp    2334ee <posixCallMainAndExit+0xfe>
        while (auxv[i] != 0) : (i += 2) {
  2334ee:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2334f2:	48 83 c0 02          	add    rax,0x2
  2334f6:	0f 92 c1             	setb   cl
  2334f9:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  233500:	88 8d 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],cl
  233506:	0f 82 22 01 00 00    	jb     23362e <posixCallMainAndExit+0x23e>
  23350c:	e9 2d 01 00 00       	jmp    23363e <posixCallMainAndExit+0x24e>
        }
        std.debug.assert(std.os.linux_aux_raw[std.elf.AT_PAGESZ] == std.os.page_size);
  233511:	48 81 3d 7c 0b 01 00 	cmp    QWORD PTR [rip+0x10b7c],0x1000        # 244098 <linux_aux_raw+0x30>
  233518:	00 10 00 00 
  23351c:	0f 94 c0             	sete   al
  23351f:	0f b6 f8             	movzx  edi,al
  233522:	e8 d9 7a fd ff       	call   20b000 <assert>
  233527:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
    }

    std.os.posix.exit(callMainWithArgs(argc, argv, envp));
  23352b:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  23352f:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  233533:	e8 18 01 00 00       	call   233650 <callMainWithArgs>
  233538:	0f b6 f8             	movzx  edi,al
  23353b:	e8 a0 01 00 00       	call   2336e0 <exit>
  233540:	48 8d 3d 81 fc 00 00 	lea    rdi,[rip+0xfc81]        # 2431c8 <__unnamed_4>
  233547:	31 c0                	xor    eax,eax
  233549:	89 c6                	mov    esi,eax
    while (envp_optional[envp_count]) |_| : (envp_count += 1) {}
  23354b:	e8 b0 80 fd ff       	call   20b600 <panic>
  233550:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  233554:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  233558:	e9 da fe ff ff       	jmp    233437 <posixCallMainAndExit+0x47>
  23355d:	48 8d 3d 94 fe 00 00 	lea    rdi,[rip+0xfe94]        # 2433f8 <__unnamed_20>
  233564:	31 c0                	xor    eax,eax
  233566:	89 c6                	mov    esi,eax
    const envp = @ptrCast([*][*]u8, envp_optional)[0..envp_count];
  233568:	e8 93 80 fd ff       	call   20b600 <panic>
  23356d:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  233571:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  233575:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  23357c:	48 83 e9 00          	sub    rcx,0x0
  233580:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  233584:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  233588:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
  23358c:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  233590:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
        const auxv = @ptrCast([*]usize, envp.ptr + envp_count + 1);
  233594:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  233598:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  23359c:	48 c1 e2 03          	shl    rdx,0x3
  2335a0:	48 01 d1             	add    rcx,rdx
  2335a3:	48 83 c1 08          	add    rcx,0x8
  2335a7:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
        var i: usize = 0;
  2335ab:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
  2335b2:	00 
        while (auxv[i] != 0) : (i += 2) {
  2335b3:	e9 f4 fe ff ff       	jmp    2334ac <posixCallMainAndExit+0xbc>
  2335b8:	48 8d 3d 39 fe 00 00 	lea    rdi,[rip+0xfe39]        # 2433f8 <__unnamed_20>
  2335bf:	31 c0                	xor    eax,eax
  2335c1:	89 c6                	mov    esi,eax
            if (auxv[i] < std.os.linux_aux_raw.len) std.os.linux_aux_raw[auxv[i]] = auxv[i + 1];
  2335c3:	e8 38 80 fd ff       	call   20b600 <panic>
  2335c8:	48 8d 05 99 0a 01 00 	lea    rax,[rip+0x10a99]        # 244068 <linux_aux_raw>
  2335cf:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
  2335d6:	48 c1 e1 03          	shl    rcx,0x3
  2335da:	48 01 c8             	add    rax,rcx
  2335dd:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  2335e1:	48 83 c1 01          	add    rcx,0x1
  2335e5:	0f 92 c2             	setb   dl
  2335e8:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  2335ef:	48 89 8d 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rcx
  2335f6:	88 95 4f ff ff ff    	mov    BYTE PTR [rbp-0xb1],dl
  2335fc:	72 02                	jb     233600 <posixCallMainAndExit+0x210>
  2335fe:	eb 10                	jmp    233610 <posixCallMainAndExit+0x220>
  233600:	48 8d 3d c1 fb 00 00 	lea    rdi,[rip+0xfbc1]        # 2431c8 <__unnamed_4>
  233607:	31 c0                	xor    eax,eax
  233609:	89 c6                	mov    esi,eax
  23360b:	e8 f0 7f fd ff       	call   20b600 <panic>
  233610:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  233614:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
  23361b:	48 8b 04 c8          	mov    rax,QWORD PTR [rax+rcx*8]
  23361f:	48 8b 95 58 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa8]
  233626:	48 89 02             	mov    QWORD PTR [rdx],rax
  233629:	e9 c0 fe ff ff       	jmp    2334ee <posixCallMainAndExit+0xfe>
  23362e:	48 8d 3d 93 fb 00 00 	lea    rdi,[rip+0xfb93]        # 2431c8 <__unnamed_4>
  233635:	31 c0                	xor    eax,eax
  233637:	89 c6                	mov    esi,eax
        while (auxv[i] != 0) : (i += 2) {
  233639:	e8 c2 7f fd ff       	call   20b600 <panic>
  23363e:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  233645:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  233649:	e9 5e fe ff ff       	jmp    2334ac <posixCallMainAndExit+0xbc>
  23364e:	66 90                	xchg   ax,ax

0000000000233650 <callMainWithArgs>:
}

fn callMainWithArgs(argc: usize, argv: [*][*]u8, envp: [][*]u8) u8 {
  233650:	55                   	push   rbp
  233651:	48 89 e5             	mov    rbp,rsp
  233654:	48 83 ec 40          	sub    rsp,0x40
  233658:	31 c0                	xor    eax,eax
  23365a:	89 c1                	mov    ecx,eax
  23365c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  233660:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    std.os.ArgIteratorPosix.raw = argv[0..argc];
  233664:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  233668:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  23366c:	48 39 f1             	cmp    rcx,rsi
  23366f:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  233673:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  233677:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  23367b:	76 10                	jbe    23368d <callMainWithArgs+0x3d>
  23367d:	48 8d 3d 74 fd 00 00 	lea    rdi,[rip+0xfd74]        # 2433f8 <__unnamed_20>
  233684:	31 c0                	xor    eax,eax
  233686:	89 c6                	mov    esi,eax
  233688:	e8 73 7f fd ff       	call   20b600 <panic>
  23368d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  233691:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  233695:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  233699:	48 83 e9 00          	sub    rcx,0x0
  23369d:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  2336a1:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  2336a5:	48 89 0d 0c 8a 00 00 	mov    QWORD PTR [rip+0x8a0c],rcx        # 23c0b8 <raw>
  2336ac:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  2336b0:	48 89 0d 09 8a 00 00 	mov    QWORD PTR [rip+0x8a09],rcx        # 23c0c0 <raw+0x8>
    std.os.posix_environ_raw = envp;
  2336b7:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  2336bb:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
  2336be:	48 89 15 db 89 00 00 	mov    QWORD PTR [rip+0x89db],rdx        # 23c0a0 <posix_environ_raw>
  2336c5:	48 8b 51 08          	mov    rdx,QWORD PTR [rcx+0x8]
  2336c9:	48 89 15 d8 89 00 00 	mov    QWORD PTR [rip+0x89d8],rdx        # 23c0a8 <posix_environ_raw+0x8>
    return callMain();
  2336d0:	e8 4b 00 00 00       	call   233720 <callMain>
  2336d5:	48 83 c4 40          	add    rsp,0x40
  2336d9:	5d                   	pop    rbp
  2336da:	c3                   	ret    
  2336db:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000002336e0 <exit>:
pub fn exit(status: i32) noreturn {
  2336e0:	55                   	push   rbp
  2336e1:	48 89 e5             	mov    rbp,rsp
  2336e4:	48 83 ec 10          	sub    rsp,0x10
  2336e8:	b8 3c 00 00 00       	mov    eax,0x3c
  2336ed:	89 c1                	mov    ecx,eax
  2336ef:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    _ = syscall1(SYS_exit, @bitCast(usize, isize(status)));
  2336f2:	48 63 75 fc          	movsxd rsi,DWORD PTR [rbp-0x4]
  2336f6:	48 89 cf             	mov    rdi,rcx
  2336f9:	e8 b2 5b ff ff       	call   2292b0 <syscall1>
  2336fe:	48 8d 3d 0b fc 00 00 	lea    rdi,[rip+0xfc0b]        # 243310 <__unnamed_13>
  233705:	31 d2                	xor    edx,edx
  233707:	89 d6                	mov    esi,edx
    unreachable;
  233709:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  23370d:	e8 ee 7e fd ff       	call   20b600 <panic>
  233712:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  233719:	1f 84 00 00 00 00 00 

0000000000233720 <callMain>:
    while (c_envp[env_count] != null) : (env_count += 1) {}
    const envp = @ptrCast([*][*]u8, c_envp)[0..env_count];
    return callMainWithArgs(@intCast(usize, c_argc), c_argv, envp);
}

fn callMain() u8 {
  233720:	55                   	push   rbp
  233721:	48 89 e5             	mov    rbp,rsp
  233724:	48 81 ec 30 01 00 00 	sub    rsp,0x130
  23372b:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  233732:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
  233739:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  233740:	00 00 00 00 
  233744:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
  23374b:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  233752:	1e 00 00 00 
                @compileError("expected return type of main to be 'u8', 'noreturn', 'void', or '!void'");
            }
            return root.main();
        },
        builtin.TypeId.ErrorUnion => {
            root.main() catch |err| {
  233756:	e8 d5 00 00 00       	call   233830 <main>
  23375b:	66 89 85 f6 fe ff ff 	mov    WORD PTR [rbp-0x10a],ax
  233762:	66 83 bd f6 fe ff ff 	cmp    WORD PTR [rbp-0x10a],0x0
  233769:	00 
  23376a:	74 51                	je     2337bd <callMain+0x9d>
  23376c:	66 8b 85 f6 fe ff ff 	mov    ax,WORD PTR [rbp-0x10a]
  233773:	66 89 85 e6 fe ff ff 	mov    WORD PTR [rbp-0x11a],ax
                std.debug.warn("error: {}\n", @errorName(err));
  23377a:	66 8b 85 e6 fe ff ff 	mov    ax,WORD PTR [rbp-0x11a]
  233781:	66 83 f8 00          	cmp    ax,0x0
  233785:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  23378c:	0f 85 89 00 00 00    	jne    23381b <callMain+0xfb>
  233792:	eb 38                	jmp    2337cc <callMain+0xac>
                if (builtin.os != builtin.Os.zen) {
                    if (@errorReturnTrace()) |trace| {
  233794:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  23379b:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
                        std.debug.dumpStackTrace(trace);
  2337a2:	48 8b bd d8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x128]
  2337a9:	e8 02 93 fd ff       	call   20cab0 <dumpStackTrace>
                    if (@errorReturnTrace()) |trace| {
  2337ae:	eb 02                	jmp    2337b2 <callMain+0x92>
  2337b0:	eb 00                	jmp    2337b2 <callMain+0x92>
  2337b2:	b0 01                	mov    al,0x1
                    }
                }
                return 1;
  2337b4:	48 81 c4 30 01 00 00 	add    rsp,0x130
  2337bb:	5d                   	pop    rbp
  2337bc:	c3                   	ret    
  2337bd:	31 c0                	xor    eax,eax
  2337bf:	88 c1                	mov    cl,al
            };
            return 0;
  2337c1:	88 c8                	mov    al,cl
  2337c3:	48 81 c4 30 01 00 00 	add    rsp,0x130
  2337ca:	5d                   	pop    rbp
  2337cb:	c3                   	ret    
  2337cc:	48 8d 3d 25 fc 00 00 	lea    rdi,[rip+0xfc25]        # 2433f8 <__unnamed_20>
  2337d3:	31 c0                	xor    eax,eax
  2337d5:	89 c6                	mov    esi,eax
                std.debug.warn("error: {}\n", @errorName(err));
  2337d7:	e8 24 7e fd ff       	call   20b600 <panic>
  2337dc:	48 8d 05 1d 98 00 00 	lea    rax,[rip+0x981d]        # 23d000 <raw+0xf48>
  2337e3:	66 8b 8d d6 fe ff ff 	mov    cx,WORD PTR [rbp-0x12a]
  2337ea:	48 0f bf d1          	movsx  rdx,cx
  2337ee:	48 c1 e2 04          	shl    rdx,0x4
  2337f2:	48 01 d0             	add    rax,rdx
  2337f5:	48 89 c7             	mov    rdi,rax
  2337f8:	e8 13 02 00 00       	call   233a10 <warn.121>
  2337fd:	48 8d 85 f8 fe ff ff 	lea    rax,[rbp-0x108]
                    if (@errorReturnTrace()) |trace| {
  233804:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  23380b:	48 83 bd e8 fe ff ff 	cmp    QWORD PTR [rbp-0x118],0x0
  233812:	00 
  233813:	0f 85 7b ff ff ff    	jne    233794 <callMain+0x74>
  233819:	eb 95                	jmp    2337b0 <callMain+0x90>
                std.debug.warn("error: {}\n", @errorName(err));
  23381b:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [rbp-0x12a]
  233822:	66 83 f8 2a          	cmp    ax,0x2a
  233826:	72 b4                	jb     2337dc <callMain+0xbc>
  233828:	eb a2                	jmp    2337cc <callMain+0xac>
  23382a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000233830 <main>:
const io = std.io;
const builtin = @import("builtin");
const test_fn_list = builtin.__zig_test_fn_slice;
const warn = std.debug.warn;

pub fn main() !void {
  233830:	55                   	push   rbp
  233831:	48 89 e5             	mov    rbp,rsp
    var ok_count: usize = 0;
  233834:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  23383b:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  233842:	00 
    var skip_count: usize = 0;
  233843:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
  23384a:	00 
    for (test_fn_list) |test_fn, i| {
  23384b:	48 8b 05 66 70 fd ff 	mov    rax,QWORD PTR [rip+0xfffffffffffd7066]        # 20a8b8 <__unnamed_229>
  233852:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  233856:	48 8b 05 63 70 fd ff 	mov    rax,QWORD PTR [rip+0xfffffffffffd7063]        # 20a8c0 <__unnamed_229+0x8>
  23385d:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  233861:	48 8b 05 60 70 fd ff 	mov    rax,QWORD PTR [rip+0xfffffffffffd7060]        # 20a8c8 <__unnamed_229+0x10>
  233868:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  23386c:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
  233873:	00 
  233874:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
  233878:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  23387c:	48 83 f8 01          	cmp    rax,0x1
  233880:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  233884:	0f 83 c9 00 00 00    	jae    233953 <main+0x123>
  23388a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  23388e:	48 6b c8 18          	imul   rcx,rax,0x18
  233892:	48 03 0d f7 f8 00 00 	add    rcx,QWORD PTR [rip+0xf8f7]        # 243190 <__zig_test_fn_slice>
  233899:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
  23389c:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  2338a0:	48 8b 51 08          	mov    rdx,QWORD PTR [rcx+0x8]
  2338a4:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  2338a8:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
  2338ac:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
        warn("Test {}/{} {}...", i + 1, test_fn_list.len, test_fn.name);
  2338b0:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  2338b4:	48 83 c1 01          	add    rcx,0x1
  2338b8:	40 0f 92 c6          	setb   sil
  2338bc:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  2338c0:	40 88 75 a7          	mov    BYTE PTR [rbp-0x59],sil
  2338c4:	0f 82 b5 00 00 00    	jb     23397f <main+0x14f>
  2338ca:	e9 c0 00 00 00       	jmp    23398f <main+0x15f>

        if (test_fn.func()) |_| {
            ok_count += 1;
  2338cf:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2338d3:	48 83 c0 01          	add    rax,0x1
  2338d7:	0f 92 c1             	setb   cl
  2338da:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  2338de:	88 4d 97             	mov    BYTE PTR [rbp-0x69],cl
  2338e1:	0f 82 d7 00 00 00    	jb     2339be <main+0x18e>
  2338e7:	e9 e2 00 00 00       	jmp    2339ce <main+0x19e>
        if (test_fn.func()) |_| {
  2338ec:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  2338f0:	66 89 45 c6          	mov    WORD PTR [rbp-0x3a],ax
            warn("OK\n");
        } else |err| switch (err) {
  2338f4:	0f b7 4d c6          	movzx  ecx,WORD PTR [rbp-0x3a]
  2338f8:	83 e9 29             	sub    ecx,0x29
  2338fb:	89 4d 90             	mov    DWORD PTR [rbp-0x70],ecx
  2338fe:	74 20                	je     233920 <main+0xf0>
  233900:	eb 00                	jmp    233902 <main+0xd2>
            error.SkipZigTest => {
                skip_count += 1;
                warn("SKIP\n");
            },
            else => return err,
  233902:	66 8b 45 c6          	mov    ax,WORD PTR [rbp-0x3a]
  233906:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  23390a:	66 89 45 8e          	mov    WORD PTR [rbp-0x72],ax
  23390e:	e8 7d 83 fd ff       	call   20bc90 <__zig_return_error>
  233913:	66 8b 45 8e          	mov    ax,WORD PTR [rbp-0x72]
  233917:	48 81 c4 90 00 00 00 	add    rsp,0x90
  23391e:	5d                   	pop    rbp
  23391f:	c3                   	ret    
                skip_count += 1;
  233920:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  233924:	48 83 c0 01          	add    rax,0x1
  233928:	0f 92 c1             	setb   cl
  23392b:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  23392f:	88 8d 7f ff ff ff    	mov    BYTE PTR [rbp-0x81],cl
  233935:	0f 82 a5 00 00 00    	jb     2339e0 <main+0x1b0>
  23393b:	e9 b0 00 00 00       	jmp    2339f0 <main+0x1c0>
        if (test_fn.func()) |_| {
  233940:	eb 00                	jmp    233942 <main+0x112>
    for (test_fn_list) |test_fn, i| {
  233942:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  233946:	48 83 c0 01          	add    rax,0x1
  23394a:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  23394e:	e9 25 ff ff ff       	jmp    233878 <main+0x48>
        }
    }
    if (ok_count == test_fn_list.len) {
  233953:	48 83 7d f0 01       	cmp    QWORD PTR [rbp-0x10],0x1
  233958:	75 07                	jne    233961 <main+0x131>
        warn("All tests passed.\n");
  23395a:	e8 b1 03 00 00       	call   233d10 <warn.125>
    if (ok_count == test_fn_list.len) {
  23395f:	eb 0d                	jmp    23396e <main+0x13e>
    } else {
        warn("{} passed; {} skipped.\n", ok_count, skip_count);
  233961:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  233965:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  233969:	e8 52 04 00 00       	call   233dc0 <warn.126>
  23396e:	31 c0                	xor    eax,eax
  233970:	66 89 c1             	mov    cx,ax
pub fn main() !void {
  233973:	66 89 c8             	mov    ax,cx
  233976:	48 81 c4 90 00 00 00 	add    rsp,0x90
  23397d:	5d                   	pop    rbp
  23397e:	c3                   	ret    
  23397f:	48 8d 3d 42 f8 00 00 	lea    rdi,[rip+0xf842]        # 2431c8 <__unnamed_4>
  233986:	31 c0                	xor    eax,eax
  233988:	89 c6                	mov    esi,eax
        warn("Test {}/{} {}...", i + 1, test_fn_list.len, test_fn.name);
  23398a:	e8 71 7c fd ff       	call   20b600 <panic>
  23398f:	b8 01 00 00 00       	mov    eax,0x1
  233994:	89 c6                	mov    esi,eax
  233996:	48 8d 55 d0          	lea    rdx,[rbp-0x30]
  23399a:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  23399e:	e8 2d 01 00 00       	call   233ad0 <warn.122>
        if (test_fn.func()) |_| {
  2339a3:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  2339a7:	ff 55 e0             	call   QWORD PTR [rbp-0x20]
  2339aa:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  2339ae:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  2339b3:	0f 85 33 ff ff ff    	jne    2338ec <main+0xbc>
  2339b9:	e9 11 ff ff ff       	jmp    2338cf <main+0x9f>
  2339be:	48 8d 3d 03 f8 00 00 	lea    rdi,[rip+0xf803]        # 2431c8 <__unnamed_4>
  2339c5:	31 c0                	xor    eax,eax
  2339c7:	89 c6                	mov    esi,eax
            ok_count += 1;
  2339c9:	e8 32 7c fd ff       	call   20b600 <panic>
  2339ce:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  2339d2:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
            warn("OK\n");
  2339d6:	e8 d5 01 00 00       	call   233bb0 <warn.123>
        if (test_fn.func()) |_| {
  2339db:	e9 62 ff ff ff       	jmp    233942 <main+0x112>
  2339e0:	48 8d 3d e1 f7 00 00 	lea    rdi,[rip+0xf7e1]        # 2431c8 <__unnamed_4>
  2339e7:	31 c0                	xor    eax,eax
  2339e9:	89 c6                	mov    esi,eax
                skip_count += 1;
  2339eb:	e8 10 7c fd ff       	call   20b600 <panic>
  2339f0:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  2339f4:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
                warn("SKIP\n");
  2339f8:	e8 63 02 00 00       	call   233c60 <warn.124>
        } else |err| switch (err) {
  2339fd:	e9 3e ff ff ff       	jmp    233940 <main+0x110>
  233a02:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  233a09:	1f 84 00 00 00 00 00 

0000000000233a10 <warn.121>:
pub fn warn(comptime fmt: []const u8, args: ...) void {
  233a10:	55                   	push   rbp
  233a11:	48 89 e5             	mov    rbp,rsp
  233a14:	48 81 ec 50 01 00 00 	sub    rsp,0x150
  233a1b:	48 8d 85 e8 fe ff ff 	lea    rax,[rbp-0x118]
  233a22:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  233a29:	48 8d 8d 10 ff ff ff 	lea    rcx,[rbp-0xf0]
  233a30:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  233a37:	00 00 00 00 
  233a3b:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  233a42:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  233a49:	1e 00 00 00 
    const stderr = getStderrStream() catch return;
  233a4d:	48 89 bd c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rdi
  233a54:	48 89 c7             	mov    rdi,rax
  233a57:	e8 f4 8e fd ff       	call   20c950 <getStderrStream>
  233a5c:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  233a63:	00 
  233a64:	74 09                	je     233a6f <warn.121+0x5f>
  233a66:	48 81 c4 50 01 00 00 	add    rsp,0x150
  233a6d:	5d                   	pop    rbp
  233a6e:	c3                   	ret    
  233a6f:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  233a76:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
  233a7d:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  233a84:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  233a8b:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
    stderr.print(fmt, args) catch return;
  233a92:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  233a99:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  233aa0:	e8 9b 05 00 00       	call   234040 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.132>
  233aa5:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  233aac:	66 83 bd d6 fe ff ff 	cmp    WORD PTR [rbp-0x12a],0x0
  233ab3:	00 
  233ab4:	74 09                	je     233abf <warn.121+0xaf>
  233ab6:	48 81 c4 50 01 00 00 	add    rsp,0x150
  233abd:	5d                   	pop    rbp
  233abe:	c3                   	ret    
pub fn warn(comptime fmt: []const u8, args: ...) void {
  233abf:	48 81 c4 50 01 00 00 	add    rsp,0x150
  233ac6:	5d                   	pop    rbp
  233ac7:	c3                   	ret    
  233ac8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  233acf:	00 

0000000000233ad0 <warn.122>:
  233ad0:	55                   	push   rbp
  233ad1:	48 89 e5             	mov    rbp,rsp
  233ad4:	48 81 ec 60 01 00 00 	sub    rsp,0x160
  233adb:	48 8d 85 e8 fe ff ff 	lea    rax,[rbp-0x118]
  233ae2:	48 8d 8d f8 fe ff ff 	lea    rcx,[rbp-0x108]
  233ae9:	4c 8d 85 10 ff ff ff 	lea    r8,[rbp-0xf0]
  233af0:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  233af7:	00 00 00 00 
  233afb:	4c 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],r8
  233b02:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  233b09:	1e 00 00 00 
  233b0d:	48 89 bd c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rdi
  233b14:	48 89 b5 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rsi
    const stderr = getStderrStream() catch return;
  233b1b:	48 89 c7             	mov    rdi,rax
  233b1e:	48 89 ce             	mov    rsi,rcx
  233b21:	48 89 95 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rdx
  233b28:	e8 23 8e fd ff       	call   20c950 <getStderrStream>
  233b2d:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  233b34:	00 
  233b35:	74 09                	je     233b40 <warn.122+0x70>
  233b37:	48 81 c4 60 01 00 00 	add    rsp,0x160
  233b3e:	5d                   	pop    rbp
  233b3f:	c3                   	ret    
  233b40:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  233b47:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
  233b4e:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  233b55:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
  233b5c:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
    stderr.print(fmt, args) catch return;
  233b63:	48 8b b5 b8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x148]
  233b6a:	48 8b 95 c8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x138]
  233b71:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  233b78:	4c 8b 85 b0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x150]
  233b7f:	e8 0c 03 00 00       	call   233e90 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.127>
  233b84:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  233b8b:	66 83 bd d6 fe ff ff 	cmp    WORD PTR [rbp-0x12a],0x0
  233b92:	00 
  233b93:	74 09                	je     233b9e <warn.122+0xce>
  233b95:	48 81 c4 60 01 00 00 	add    rsp,0x160
  233b9c:	5d                   	pop    rbp
  233b9d:	c3                   	ret    
pub fn warn(comptime fmt: []const u8, args: ...) void {
  233b9e:	48 81 c4 60 01 00 00 	add    rsp,0x160
  233ba5:	5d                   	pop    rbp
  233ba6:	c3                   	ret    
  233ba7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  233bae:	00 00 

0000000000233bb0 <warn.123>:
  233bb0:	55                   	push   rbp
  233bb1:	48 89 e5             	mov    rbp,rsp
  233bb4:	48 81 ec 40 01 00 00 	sub    rsp,0x140
  233bbb:	48 8d bd e8 fe ff ff 	lea    rdi,[rbp-0x118]
  233bc2:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  233bc9:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
  233bd0:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  233bd7:	00 00 00 00 
  233bdb:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
  233be2:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  233be9:	1e 00 00 00 
    const stderr = getStderrStream() catch return;
  233bed:	e8 5e 8d fd ff       	call   20c950 <getStderrStream>
  233bf2:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  233bf9:	00 
  233bfa:	74 09                	je     233c05 <warn.123+0x55>
  233bfc:	48 81 c4 40 01 00 00 	add    rsp,0x140
  233c03:	5d                   	pop    rbp
  233c04:	c3                   	ret    
  233c05:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  233c0c:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
  233c13:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  233c1a:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  233c21:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
    stderr.print(fmt, args) catch return;
  233c28:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  233c2f:	e8 bc 02 00 00       	call   233ef0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.128>
  233c34:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  233c3b:	66 83 bd d6 fe ff ff 	cmp    WORD PTR [rbp-0x12a],0x0
  233c42:	00 
  233c43:	74 09                	je     233c4e <warn.123+0x9e>
  233c45:	48 81 c4 40 01 00 00 	add    rsp,0x140
  233c4c:	5d                   	pop    rbp
  233c4d:	c3                   	ret    
pub fn warn(comptime fmt: []const u8, args: ...) void {
  233c4e:	48 81 c4 40 01 00 00 	add    rsp,0x140
  233c55:	5d                   	pop    rbp
  233c56:	c3                   	ret    
  233c57:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  233c5e:	00 00 

0000000000233c60 <warn.124>:
  233c60:	55                   	push   rbp
  233c61:	48 89 e5             	mov    rbp,rsp
  233c64:	48 81 ec 40 01 00 00 	sub    rsp,0x140
  233c6b:	48 8d bd e8 fe ff ff 	lea    rdi,[rbp-0x118]
  233c72:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  233c79:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
  233c80:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  233c87:	00 00 00 00 
  233c8b:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
  233c92:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  233c99:	1e 00 00 00 
    const stderr = getStderrStream() catch return;
  233c9d:	e8 ae 8c fd ff       	call   20c950 <getStderrStream>
  233ca2:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  233ca9:	00 
  233caa:	74 09                	je     233cb5 <warn.124+0x55>
  233cac:	48 81 c4 40 01 00 00 	add    rsp,0x140
  233cb3:	5d                   	pop    rbp
  233cb4:	c3                   	ret    
  233cb5:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  233cbc:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
  233cc3:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  233cca:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  233cd1:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
    stderr.print(fmt, args) catch return;
  233cd8:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  233cdf:	e8 5c 02 00 00       	call   233f40 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.129>
  233ce4:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  233ceb:	66 83 bd d6 fe ff ff 	cmp    WORD PTR [rbp-0x12a],0x0
  233cf2:	00 
  233cf3:	74 09                	je     233cfe <warn.124+0x9e>
  233cf5:	48 81 c4 40 01 00 00 	add    rsp,0x140
  233cfc:	5d                   	pop    rbp
  233cfd:	c3                   	ret    
pub fn warn(comptime fmt: []const u8, args: ...) void {
  233cfe:	48 81 c4 40 01 00 00 	add    rsp,0x140
  233d05:	5d                   	pop    rbp
  233d06:	c3                   	ret    
  233d07:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  233d0e:	00 00 

0000000000233d10 <warn.125>:
  233d10:	55                   	push   rbp
  233d11:	48 89 e5             	mov    rbp,rsp
  233d14:	48 81 ec 40 01 00 00 	sub    rsp,0x140
  233d1b:	48 8d bd e8 fe ff ff 	lea    rdi,[rbp-0x118]
  233d22:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  233d29:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
  233d30:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  233d37:	00 00 00 00 
  233d3b:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
  233d42:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  233d49:	1e 00 00 00 
    const stderr = getStderrStream() catch return;
  233d4d:	e8 fe 8b fd ff       	call   20c950 <getStderrStream>
  233d52:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  233d59:	00 
  233d5a:	74 09                	je     233d65 <warn.125+0x55>
  233d5c:	48 81 c4 40 01 00 00 	add    rsp,0x140
  233d63:	5d                   	pop    rbp
  233d64:	c3                   	ret    
  233d65:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  233d6c:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
  233d73:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  233d7a:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  233d81:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
    stderr.print(fmt, args) catch return;
  233d88:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  233d8f:	e8 fc 01 00 00       	call   233f90 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.130>
  233d94:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  233d9b:	66 83 bd d6 fe ff ff 	cmp    WORD PTR [rbp-0x12a],0x0
  233da2:	00 
  233da3:	74 09                	je     233dae <warn.125+0x9e>
  233da5:	48 81 c4 40 01 00 00 	add    rsp,0x140
  233dac:	5d                   	pop    rbp
  233dad:	c3                   	ret    
pub fn warn(comptime fmt: []const u8, args: ...) void {
  233dae:	48 81 c4 40 01 00 00 	add    rsp,0x140
  233db5:	5d                   	pop    rbp
  233db6:	c3                   	ret    
  233db7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  233dbe:	00 00 

0000000000233dc0 <warn.126>:
  233dc0:	55                   	push   rbp
  233dc1:	48 89 e5             	mov    rbp,rsp
  233dc4:	48 81 ec 50 01 00 00 	sub    rsp,0x150
  233dcb:	48 8d 85 e8 fe ff ff 	lea    rax,[rbp-0x118]
  233dd2:	48 8d 8d f8 fe ff ff 	lea    rcx,[rbp-0x108]
  233dd9:	48 8d 95 10 ff ff ff 	lea    rdx,[rbp-0xf0]
  233de0:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  233de7:	00 00 00 00 
  233deb:	48 89 95 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rdx
  233df2:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  233df9:	1e 00 00 00 
  233dfd:	48 89 bd c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rdi
  233e04:	48 89 b5 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rsi
    const stderr = getStderrStream() catch return;
  233e0b:	48 89 c7             	mov    rdi,rax
  233e0e:	48 89 ce             	mov    rsi,rcx
  233e11:	e8 3a 8b fd ff       	call   20c950 <getStderrStream>
  233e16:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  233e1d:	00 
  233e1e:	74 09                	je     233e29 <warn.126+0x69>
  233e20:	48 81 c4 50 01 00 00 	add    rsp,0x150
  233e27:	5d                   	pop    rbp
  233e28:	c3                   	ret    
  233e29:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  233e30:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  233e37:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  233e3e:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  233e45:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
    stderr.print(fmt, args) catch return;
  233e4c:	48 8b b5 b8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x148]
  233e53:	48 8b 95 c8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x138]
  233e5a:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  233e61:	e8 7a 01 00 00       	call   233fe0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.131>
  233e66:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  233e6d:	66 83 bd d6 fe ff ff 	cmp    WORD PTR [rbp-0x12a],0x0
  233e74:	00 
  233e75:	74 09                	je     233e80 <warn.126+0xc0>
  233e77:	48 81 c4 50 01 00 00 	add    rsp,0x150
  233e7e:	5d                   	pop    rbp
  233e7f:	c3                   	ret    
pub fn warn(comptime fmt: []const u8, args: ...) void {
  233e80:	48 81 c4 50 01 00 00 	add    rsp,0x150
  233e87:	5d                   	pop    rbp
  233e88:	c3                   	ret    
  233e89:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000233e90 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.127>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  233e90:	55                   	push   rbp
  233e91:	48 89 e5             	mov    rbp,rsp
  233e94:	48 83 ec 30          	sub    rsp,0x30
  233e98:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  233e9c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  233ea0:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return std.fmt.format(self, Error, self.writeFn, format, args);
  233ea4:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  233ea8:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  233eac:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
  233eaf:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  233eb3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  233eb7:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  233ebb:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
  233ebf:	49 89 c0             	mov    r8,rax
  233ec2:	4c 8b 4d d8          	mov    r9,QWORD PTR [rbp-0x28]
  233ec6:	e8 c5 01 00 00       	call   234090 <format.133>
  233ecb:	66 83 f8 00          	cmp    ax,0x0
  233ecf:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  233ed3:	74 0b                	je     233ee0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.127+0x50>
  233ed5:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  233ed9:	e8 b2 7d fd ff       	call   20bc90 <__zig_return_error>
  233ede:	eb 02                	jmp    233ee2 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.127+0x52>
  233ee0:	eb 00                	jmp    233ee2 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.127+0x52>
  233ee2:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  233ee6:	48 83 c4 30          	add    rsp,0x30
  233eea:	5d                   	pop    rbp
  233eeb:	c3                   	ret    
  233eec:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000233ef0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.128>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  233ef0:	55                   	push   rbp
  233ef1:	48 89 e5             	mov    rbp,rsp
  233ef4:	48 83 ec 20          	sub    rsp,0x20
  233ef8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
            return std.fmt.format(self, Error, self.writeFn, format, args);
  233efc:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  233f00:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  233f04:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  233f07:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  233f0b:	e8 00 04 00 00       	call   234310 <format.136>
  233f10:	66 83 f8 00          	cmp    ax,0x0
  233f14:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  233f18:	74 0b                	je     233f25 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.128+0x35>
  233f1a:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  233f1e:	e8 6d 7d fd ff       	call   20bc90 <__zig_return_error>
  233f23:	eb 02                	jmp    233f27 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.128+0x37>
  233f25:	eb 00                	jmp    233f27 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.128+0x37>
  233f27:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  233f2b:	48 83 c4 20          	add    rsp,0x20
  233f2f:	5d                   	pop    rbp
  233f30:	c3                   	ret    
  233f31:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  233f38:	0f 1f 84 00 00 00 00 
  233f3f:	00 

0000000000233f40 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.129>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  233f40:	55                   	push   rbp
  233f41:	48 89 e5             	mov    rbp,rsp
  233f44:	48 83 ec 20          	sub    rsp,0x20
  233f48:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
            return std.fmt.format(self, Error, self.writeFn, format, args);
  233f4c:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  233f50:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  233f54:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  233f57:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  233f5b:	e8 20 04 00 00       	call   234380 <format.137>
  233f60:	66 83 f8 00          	cmp    ax,0x0
  233f64:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  233f68:	74 0b                	je     233f75 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.129+0x35>
  233f6a:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  233f6e:	e8 1d 7d fd ff       	call   20bc90 <__zig_return_error>
  233f73:	eb 02                	jmp    233f77 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.129+0x37>
  233f75:	eb 00                	jmp    233f77 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.129+0x37>
  233f77:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  233f7b:	48 83 c4 20          	add    rsp,0x20
  233f7f:	5d                   	pop    rbp
  233f80:	c3                   	ret    
  233f81:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  233f88:	0f 1f 84 00 00 00 00 
  233f8f:	00 

0000000000233f90 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.130>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  233f90:	55                   	push   rbp
  233f91:	48 89 e5             	mov    rbp,rsp
  233f94:	48 83 ec 20          	sub    rsp,0x20
  233f98:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
            return std.fmt.format(self, Error, self.writeFn, format, args);
  233f9c:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  233fa0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  233fa4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  233fa7:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  233fab:	e8 40 04 00 00       	call   2343f0 <format.138>
  233fb0:	66 83 f8 00          	cmp    ax,0x0
  233fb4:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  233fb8:	74 0b                	je     233fc5 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.130+0x35>
  233fba:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  233fbe:	e8 cd 7c fd ff       	call   20bc90 <__zig_return_error>
  233fc3:	eb 02                	jmp    233fc7 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.130+0x37>
  233fc5:	eb 00                	jmp    233fc7 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.130+0x37>
  233fc7:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  233fcb:	48 83 c4 20          	add    rsp,0x20
  233fcf:	5d                   	pop    rbp
  233fd0:	c3                   	ret    
  233fd1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  233fd8:	0f 1f 84 00 00 00 00 
  233fdf:	00 

0000000000233fe0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.131>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  233fe0:	55                   	push   rbp
  233fe1:	48 89 e5             	mov    rbp,rsp
  233fe4:	48 83 ec 30          	sub    rsp,0x30
  233fe8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  233fec:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  233ff0:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return std.fmt.format(self, Error, self.writeFn, format, args);
  233ff4:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  233ff8:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  233ffc:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
  233fff:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  234003:	4c 8b 45 e8          	mov    r8,QWORD PTR [rbp-0x18]
  234007:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  23400b:	e8 50 04 00 00       	call   234460 <format.139>
  234010:	66 83 f8 00          	cmp    ax,0x0
  234014:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  234018:	74 0b                	je     234025 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.131+0x45>
  23401a:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  23401e:	e8 6d 7c fd ff       	call   20bc90 <__zig_return_error>
  234023:	eb 02                	jmp    234027 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.131+0x47>
  234025:	eb 00                	jmp    234027 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.131+0x47>
  234027:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  23402b:	48 83 c4 30          	add    rsp,0x30
  23402f:	5d                   	pop    rbp
  234030:	c3                   	ret    
  234031:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  234038:	0f 1f 84 00 00 00 00 
  23403f:	00 

0000000000234040 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.132>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  234040:	55                   	push   rbp
  234041:	48 89 e5             	mov    rbp,rsp
  234044:	48 83 ec 20          	sub    rsp,0x20
  234048:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
            return std.fmt.format(self, Error, self.writeFn, format, args);
  23404c:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  234050:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  234054:	48 8b 00             	mov    rax,QWORD PTR [rax]
  234057:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  23405b:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  23405f:	48 89 c2             	mov    rdx,rax
  234062:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  234066:	e8 65 05 00 00       	call   2345d0 <format.141>
  23406b:	66 83 f8 00          	cmp    ax,0x0
  23406f:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
  234073:	74 0b                	je     234080 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.132+0x40>
  234075:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  234079:	e8 12 7c fd ff       	call   20bc90 <__zig_return_error>
  23407e:	eb 02                	jmp    234082 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.132+0x42>
  234080:	eb 00                	jmp    234082 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.132+0x42>
  234082:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
  234086:	48 83 c4 20          	add    rsp,0x20
  23408a:	5d                   	pop    rbp
  23408b:	c3                   	ret    
  23408c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000234090 <format.133>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  234090:	55                   	push   rbp
  234091:	48 89 e5             	mov    rbp,rsp
  234094:	48 83 ec 50          	sub    rsp,0x50
  234098:	48 8d 05 51 fc 00 00 	lea    rax,[rip+0xfc51]        # 243cf0 <__unnamed_230>
  23409f:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
  2340a3:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  2340a7:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  2340ab:	4c 89 45 d0          	mov    QWORD PTR [rbp-0x30],r8
                        try output(context, fmt[start_index..i]);
  2340af:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  2340b3:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  2340b7:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  2340bb:	48 89 c2             	mov    rdx,rax
  2340be:	4c 89 4d c0          	mov    QWORD PTR [rbp-0x40],r9
  2340c2:	ff d1                	call   rcx
  2340c4:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  2340c8:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  2340cd:	74 1b                	je     2340ea <format.133+0x5a>
  2340cf:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  2340d3:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2340d7:	66 89 45 be          	mov    WORD PTR [rbp-0x42],ax
  2340db:	e8 b0 7b fd ff       	call   20bc90 <__zig_return_error>
  2340e0:	66 8b 45 be          	mov    ax,WORD PTR [rbp-0x42]
  2340e4:	48 83 c4 50          	add    rsp,0x50
  2340e8:	5d                   	pop    rbp
  2340e9:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  2340ea:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  2340ee:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  2340f2:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  2340f6:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2340fa:	e8 61 01 00 00       	call   234260 <formatType.134>
  2340ff:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  234103:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  234108:	74 1b                	je     234125 <format.133+0x95>
  23410a:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  23410e:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  234112:	66 89 45 bc          	mov    WORD PTR [rbp-0x44],ax
  234116:	e8 75 7b fd ff       	call   20bc90 <__zig_return_error>
  23411b:	66 8b 45 bc          	mov    ax,WORD PTR [rbp-0x44]
  23411f:	48 83 c4 50          	add    rsp,0x50
  234123:	5d                   	pop    rbp
  234124:	c3                   	ret    
  234125:	48 8d 15 dc fb 00 00 	lea    rdx,[rip+0xfbdc]        # 243d08 <__unnamed_231>
                        try output(context, fmt[start_index..i]);
  23412c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  234130:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  234134:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  234138:	ff d0                	call   rax
  23413a:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  23413e:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  234143:	74 1b                	je     234160 <format.133+0xd0>
  234145:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  234149:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  23414d:	66 89 45 ba          	mov    WORD PTR [rbp-0x46],ax
  234151:	e8 3a 7b fd ff       	call   20bc90 <__zig_return_error>
  234156:	66 8b 45 ba          	mov    ax,WORD PTR [rbp-0x46]
  23415a:	48 83 c4 50          	add    rsp,0x50
  23415e:	5d                   	pop    rbp
  23415f:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  234160:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  234164:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  234168:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  23416c:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  234170:	e8 eb 00 00 00       	call   234260 <formatType.134>
  234175:	66 89 45 f8          	mov    WORD PTR [rbp-0x8],ax
  234179:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  23417e:	74 1b                	je     23419b <format.133+0x10b>
  234180:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  234184:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  234188:	66 89 45 b8          	mov    WORD PTR [rbp-0x48],ax
  23418c:	e8 ff 7a fd ff       	call   20bc90 <__zig_return_error>
  234191:	66 8b 45 b8          	mov    ax,WORD PTR [rbp-0x48]
  234195:	48 83 c4 50          	add    rsp,0x50
  234199:	5d                   	pop    rbp
  23419a:	c3                   	ret    
  23419b:	48 8d 15 7e fb 00 00 	lea    rdx,[rip+0xfb7e]        # 243d20 <__unnamed_232>
                        try output(context, fmt[start_index..i]);
  2341a2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2341a6:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  2341aa:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2341ae:	ff d0                	call   rax
  2341b0:	66 89 45 f6          	mov    WORD PTR [rbp-0xa],ax
  2341b4:	66 83 7d f6 00       	cmp    WORD PTR [rbp-0xa],0x0
  2341b9:	74 1b                	je     2341d6 <format.133+0x146>
  2341bb:	66 8b 45 f6          	mov    ax,WORD PTR [rbp-0xa]
  2341bf:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2341c3:	66 89 45 b6          	mov    WORD PTR [rbp-0x4a],ax
  2341c7:	e8 c4 7a fd ff       	call   20bc90 <__zig_return_error>
  2341cc:	66 8b 45 b6          	mov    ax,WORD PTR [rbp-0x4a]
  2341d0:	48 83 c4 50          	add    rsp,0x50
  2341d4:	5d                   	pop    rbp
  2341d5:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  2341d6:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  2341da:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  2341de:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2341e2:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
  2341e6:	e8 c5 00 00 00       	call   2342b0 <formatType.135>
  2341eb:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
  2341ef:	66 83 7d f4 00       	cmp    WORD PTR [rbp-0xc],0x0
  2341f4:	74 1b                	je     234211 <format.133+0x181>
  2341f6:	66 8b 45 f4          	mov    ax,WORD PTR [rbp-0xc]
  2341fa:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2341fe:	66 89 45 b4          	mov    WORD PTR [rbp-0x4c],ax
  234202:	e8 89 7a fd ff       	call   20bc90 <__zig_return_error>
  234207:	66 8b 45 b4          	mov    ax,WORD PTR [rbp-0x4c]
  23420b:	48 83 c4 50          	add    rsp,0x50
  23420f:	5d                   	pop    rbp
  234210:	c3                   	ret    
  234211:	48 8d 15 20 fb 00 00 	lea    rdx,[rip+0xfb20]        # 243d38 <__unnamed_233>
        try output(context, fmt[start_index..]);
  234218:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  23421c:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  234220:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  234224:	ff d0                	call   rax
  234226:	66 89 45 f2          	mov    WORD PTR [rbp-0xe],ax
  23422a:	66 83 7d f2 00       	cmp    WORD PTR [rbp-0xe],0x0
  23422f:	74 1b                	je     23424c <format.133+0x1bc>
  234231:	66 8b 45 f2          	mov    ax,WORD PTR [rbp-0xe]
  234235:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  234239:	66 89 45 b2          	mov    WORD PTR [rbp-0x4e],ax
  23423d:	e8 4e 7a fd ff       	call   20bc90 <__zig_return_error>
  234242:	66 8b 45 b2          	mov    ax,WORD PTR [rbp-0x4e]
  234246:	48 83 c4 50          	add    rsp,0x50
  23424a:	5d                   	pop    rbp
  23424b:	c3                   	ret    
  23424c:	31 c0                	xor    eax,eax
  23424e:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  234251:	66 89 c8             	mov    ax,cx
  234254:	48 83 c4 50          	add    rsp,0x50
  234258:	5d                   	pop    rbp
  234259:	c3                   	ret    
  23425a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000234260 <formatType.134>:
pub fn formatType(
  234260:	55                   	push   rbp
  234261:	48 89 e5             	mov    rbp,rsp
  234264:	48 83 ec 30          	sub    rsp,0x30
  234268:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  23426c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  234270:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return formatValue(value, fmt, context, Errors, output);
  234274:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  234278:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  23427c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  234280:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  234284:	e8 87 04 00 00       	call   234710 <formatValue.143>
  234289:	66 83 f8 00          	cmp    ax,0x0
  23428d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  234291:	74 0b                	je     23429e <formatType.134+0x3e>
  234293:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  234297:	e8 f4 79 fd ff       	call   20bc90 <__zig_return_error>
  23429c:	eb 02                	jmp    2342a0 <formatType.134+0x40>
  23429e:	eb 00                	jmp    2342a0 <formatType.134+0x40>
  2342a0:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  2342a4:	48 83 c4 30          	add    rsp,0x30
  2342a8:	5d                   	pop    rbp
  2342a9:	c3                   	ret    
  2342aa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000002342b0 <formatType.135>:
pub fn formatType(
  2342b0:	55                   	push   rbp
  2342b1:	48 89 e5             	mov    rbp,rsp
  2342b4:	48 83 ec 30          	sub    rsp,0x30
  2342b8:	48 8d 45 e0          	lea    rax,[rbp-0x20]
  2342bc:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  2342c0:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
                const casted_value = ([]const u8)(value);
  2342c4:	48 8b 0e             	mov    rcx,QWORD PTR [rsi]
  2342c7:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  2342cb:	48 8b 4e 08          	mov    rcx,QWORD PTR [rsi+0x8]
  2342cf:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
                return output(context, casted_value);
  2342d3:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  2342d7:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2342db:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  2342df:	48 89 c2             	mov    rdx,rax
  2342e2:	ff d1                	call   rcx
  2342e4:	66 83 f8 00          	cmp    ax,0x0
  2342e8:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  2342ec:	74 0b                	je     2342f9 <formatType.135+0x49>
  2342ee:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  2342f2:	e8 99 79 fd ff       	call   20bc90 <__zig_return_error>
  2342f7:	eb 02                	jmp    2342fb <formatType.135+0x4b>
  2342f9:	eb 00                	jmp    2342fb <formatType.135+0x4b>
  2342fb:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  2342ff:	48 83 c4 30          	add    rsp,0x30
  234303:	5d                   	pop    rbp
  234304:	c3                   	ret    
  234305:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  23430c:	00 00 00 00 

0000000000234310 <format.136>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  234310:	55                   	push   rbp
  234311:	48 89 e5             	mov    rbp,rsp
  234314:	48 83 ec 30          	sub    rsp,0x30
  234318:	48 8d 05 31 fa 00 00 	lea    rax,[rip+0xfa31]        # 243d50 <__unnamed_234>
  23431f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  234323:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
        try output(context, fmt[start_index..]);
  234327:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  23432b:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  23432f:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  234333:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  234337:	48 89 c2             	mov    rdx,rax
  23433a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  23433e:	ff d0                	call   rax
  234340:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  234344:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  234349:	74 1b                	je     234366 <format.136+0x56>
  23434b:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  23434f:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  234353:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  234357:	e8 34 79 fd ff       	call   20bc90 <__zig_return_error>
  23435c:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  234360:	48 83 c4 30          	add    rsp,0x30
  234364:	5d                   	pop    rbp
  234365:	c3                   	ret    
  234366:	31 c0                	xor    eax,eax
  234368:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  23436b:	66 89 c8             	mov    ax,cx
  23436e:	48 83 c4 30          	add    rsp,0x30
  234372:	5d                   	pop    rbp
  234373:	c3                   	ret    
  234374:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  23437b:	00 00 00 00 00 

0000000000234380 <format.137>:
  234380:	55                   	push   rbp
  234381:	48 89 e5             	mov    rbp,rsp
  234384:	48 83 ec 30          	sub    rsp,0x30
  234388:	48 8d 05 d9 f9 00 00 	lea    rax,[rip+0xf9d9]        # 243d68 <__unnamed_235>
  23438f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  234393:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
        try output(context, fmt[start_index..]);
  234397:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  23439b:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  23439f:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2343a3:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  2343a7:	48 89 c2             	mov    rdx,rax
  2343aa:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2343ae:	ff d0                	call   rax
  2343b0:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  2343b4:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  2343b9:	74 1b                	je     2343d6 <format.137+0x56>
  2343bb:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  2343bf:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2343c3:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  2343c7:	e8 c4 78 fd ff       	call   20bc90 <__zig_return_error>
  2343cc:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  2343d0:	48 83 c4 30          	add    rsp,0x30
  2343d4:	5d                   	pop    rbp
  2343d5:	c3                   	ret    
  2343d6:	31 c0                	xor    eax,eax
  2343d8:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  2343db:	66 89 c8             	mov    ax,cx
  2343de:	48 83 c4 30          	add    rsp,0x30
  2343e2:	5d                   	pop    rbp
  2343e3:	c3                   	ret    
  2343e4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2343eb:	00 00 00 00 00 

00000000002343f0 <format.138>:
  2343f0:	55                   	push   rbp
  2343f1:	48 89 e5             	mov    rbp,rsp
  2343f4:	48 83 ec 30          	sub    rsp,0x30
  2343f8:	48 8d 05 81 f9 00 00 	lea    rax,[rip+0xf981]        # 243d80 <__unnamed_236>
  2343ff:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  234403:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
        try output(context, fmt[start_index..]);
  234407:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  23440b:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  23440f:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  234413:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  234417:	48 89 c2             	mov    rdx,rax
  23441a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  23441e:	ff d0                	call   rax
  234420:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  234424:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  234429:	74 1b                	je     234446 <format.138+0x56>
  23442b:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  23442f:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  234433:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  234437:	e8 54 78 fd ff       	call   20bc90 <__zig_return_error>
  23443c:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  234440:	48 83 c4 30          	add    rsp,0x30
  234444:	5d                   	pop    rbp
  234445:	c3                   	ret    
  234446:	31 c0                	xor    eax,eax
  234448:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  23444b:	66 89 c8             	mov    ax,cx
  23444e:	48 83 c4 30          	add    rsp,0x30
  234452:	5d                   	pop    rbp
  234453:	c3                   	ret    
  234454:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  23445b:	00 00 00 00 00 

0000000000234460 <format.139>:
  234460:	55                   	push   rbp
  234461:	48 89 e5             	mov    rbp,rsp
  234464:	48 83 ec 40          	sub    rsp,0x40
  234468:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  23446c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  234470:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  234474:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  234478:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  23447c:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  234480:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  234484:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
  234488:	e8 f3 00 00 00       	call   234580 <formatType.140>
  23448d:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  234491:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  234496:	74 1b                	je     2344b3 <format.139+0x53>
  234498:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  23449c:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  2344a0:	66 89 45 ce          	mov    WORD PTR [rbp-0x32],ax
  2344a4:	e8 e7 77 fd ff       	call   20bc90 <__zig_return_error>
  2344a9:	66 8b 45 ce          	mov    ax,WORD PTR [rbp-0x32]
  2344ad:	48 83 c4 40          	add    rsp,0x40
  2344b1:	5d                   	pop    rbp
  2344b2:	c3                   	ret    
  2344b3:	48 8d 15 de f8 00 00 	lea    rdx,[rip+0xf8de]        # 243d98 <__unnamed_237>
                        try output(context, fmt[start_index..i]);
  2344ba:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2344be:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  2344c2:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  2344c6:	ff d0                	call   rax
  2344c8:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  2344cc:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  2344d1:	74 1b                	je     2344ee <format.139+0x8e>
  2344d3:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  2344d7:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  2344db:	66 89 45 cc          	mov    WORD PTR [rbp-0x34],ax
  2344df:	e8 ac 77 fd ff       	call   20bc90 <__zig_return_error>
  2344e4:	66 8b 45 cc          	mov    ax,WORD PTR [rbp-0x34]
  2344e8:	48 83 c4 40          	add    rsp,0x40
  2344ec:	5d                   	pop    rbp
  2344ed:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  2344ee:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  2344f2:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  2344f6:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2344fa:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  2344fe:	e8 7d 00 00 00       	call   234580 <formatType.140>
  234503:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  234507:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  23450c:	74 1b                	je     234529 <format.139+0xc9>
  23450e:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  234512:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  234516:	66 89 45 ca          	mov    WORD PTR [rbp-0x36],ax
  23451a:	e8 71 77 fd ff       	call   20bc90 <__zig_return_error>
  23451f:	66 8b 45 ca          	mov    ax,WORD PTR [rbp-0x36]
  234523:	48 83 c4 40          	add    rsp,0x40
  234527:	5d                   	pop    rbp
  234528:	c3                   	ret    
  234529:	48 8d 15 80 f8 00 00 	lea    rdx,[rip+0xf880]        # 243db0 <__unnamed_238>
        try output(context, fmt[start_index..]);
  234530:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  234534:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  234538:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  23453c:	ff d0                	call   rax
  23453e:	66 89 45 f8          	mov    WORD PTR [rbp-0x8],ax
  234542:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  234547:	74 1b                	je     234564 <format.139+0x104>
  234549:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  23454d:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  234551:	66 89 45 c8          	mov    WORD PTR [rbp-0x38],ax
  234555:	e8 36 77 fd ff       	call   20bc90 <__zig_return_error>
  23455a:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  23455e:	48 83 c4 40          	add    rsp,0x40
  234562:	5d                   	pop    rbp
  234563:	c3                   	ret    
  234564:	31 c0                	xor    eax,eax
  234566:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  234569:	66 89 c8             	mov    ax,cx
  23456c:	48 83 c4 40          	add    rsp,0x40
  234570:	5d                   	pop    rbp
  234571:	c3                   	ret    
  234572:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  234579:	1f 84 00 00 00 00 00 

0000000000234580 <formatType.140>:
pub fn formatType(
  234580:	55                   	push   rbp
  234581:	48 89 e5             	mov    rbp,rsp
  234584:	48 83 ec 30          	sub    rsp,0x30
  234588:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  23458c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  234590:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return formatValue(value, fmt, context, Errors, output);
  234594:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  234598:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  23459c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2345a0:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2345a4:	e8 b7 01 00 00       	call   234760 <formatValue.144>
  2345a9:	66 83 f8 00          	cmp    ax,0x0
  2345ad:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  2345b1:	74 0b                	je     2345be <formatType.140+0x3e>
  2345b3:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2345b7:	e8 d4 76 fd ff       	call   20bc90 <__zig_return_error>
  2345bc:	eb 02                	jmp    2345c0 <formatType.140+0x40>
  2345be:	eb 00                	jmp    2345c0 <formatType.140+0x40>
  2345c0:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  2345c4:	48 83 c4 30          	add    rsp,0x30
  2345c8:	5d                   	pop    rbp
  2345c9:	c3                   	ret    
  2345ca:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000002345d0 <format.141>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  2345d0:	55                   	push   rbp
  2345d1:	48 89 e5             	mov    rbp,rsp
  2345d4:	48 83 ec 40          	sub    rsp,0x40
  2345d8:	48 8d 05 e9 f7 00 00 	lea    rax,[rip+0xf7e9]        # 243dc8 <__unnamed_239>
  2345df:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  2345e3:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
                        try output(context, fmt[start_index..i]);
  2345e7:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  2345eb:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  2345ef:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2345f3:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  2345f7:	48 89 c2             	mov    rdx,rax
  2345fa:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2345fe:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  234602:	ff d0                	call   rax
  234604:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  234608:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  23460d:	74 1b                	je     23462a <format.141+0x5a>
  23460f:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  234613:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  234617:	66 89 45 ce          	mov    WORD PTR [rbp-0x32],ax
  23461b:	e8 70 76 fd ff       	call   20bc90 <__zig_return_error>
  234620:	66 8b 45 ce          	mov    ax,WORD PTR [rbp-0x32]
  234624:	48 83 c4 40          	add    rsp,0x40
  234628:	5d                   	pop    rbp
  234629:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  23462a:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  23462e:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  234632:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  234636:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  23463a:	e8 71 00 00 00       	call   2346b0 <formatType.142>
  23463f:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  234643:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  234648:	74 1b                	je     234665 <format.141+0x95>
  23464a:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  23464e:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  234652:	66 89 45 cc          	mov    WORD PTR [rbp-0x34],ax
  234656:	e8 35 76 fd ff       	call   20bc90 <__zig_return_error>
  23465b:	66 8b 45 cc          	mov    ax,WORD PTR [rbp-0x34]
  23465f:	48 83 c4 40          	add    rsp,0x40
  234663:	5d                   	pop    rbp
  234664:	c3                   	ret    
  234665:	48 8d 15 74 f7 00 00 	lea    rdx,[rip+0xf774]        # 243de0 <__unnamed_240>
        try output(context, fmt[start_index..]);
  23466c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  234670:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  234674:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  234678:	ff d0                	call   rax
  23467a:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  23467e:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  234683:	74 1b                	je     2346a0 <format.141+0xd0>
  234685:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  234689:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  23468d:	66 89 45 ca          	mov    WORD PTR [rbp-0x36],ax
  234691:	e8 fa 75 fd ff       	call   20bc90 <__zig_return_error>
  234696:	66 8b 45 ca          	mov    ax,WORD PTR [rbp-0x36]
  23469a:	48 83 c4 40          	add    rsp,0x40
  23469e:	5d                   	pop    rbp
  23469f:	c3                   	ret    
  2346a0:	31 c0                	xor    eax,eax
  2346a2:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  2346a5:	66 89 c8             	mov    ax,cx
  2346a8:	48 83 c4 40          	add    rsp,0x40
  2346ac:	5d                   	pop    rbp
  2346ad:	c3                   	ret    
  2346ae:	66 90                	xchg   ax,ax

00000000002346b0 <formatType.142>:
pub fn formatType(
  2346b0:	55                   	push   rbp
  2346b1:	48 89 e5             	mov    rbp,rsp
  2346b4:	48 83 ec 30          	sub    rsp,0x30
  2346b8:	48 8d 45 e0          	lea    rax,[rbp-0x20]
  2346bc:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  2346c0:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
                const casted_value = ([]const u8)(value);
  2346c4:	48 8b 0e             	mov    rcx,QWORD PTR [rsi]
  2346c7:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  2346cb:	48 8b 4e 08          	mov    rcx,QWORD PTR [rsi+0x8]
  2346cf:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
                return output(context, casted_value);
  2346d3:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  2346d7:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2346db:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  2346df:	48 89 c2             	mov    rdx,rax
  2346e2:	ff d1                	call   rcx
  2346e4:	66 83 f8 00          	cmp    ax,0x0
  2346e8:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  2346ec:	74 0b                	je     2346f9 <formatType.142+0x49>
  2346ee:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  2346f2:	e8 99 75 fd ff       	call   20bc90 <__zig_return_error>
  2346f7:	eb 02                	jmp    2346fb <formatType.142+0x4b>
  2346f9:	eb 00                	jmp    2346fb <formatType.142+0x4b>
  2346fb:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  2346ff:	48 83 c4 30          	add    rsp,0x30
  234703:	5d                   	pop    rbp
  234704:	c3                   	ret    
  234705:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  23470c:	00 00 00 00 

0000000000234710 <formatValue.143>:
fn formatValue(
  234710:	55                   	push   rbp
  234711:	48 89 e5             	mov    rbp,rsp
  234714:	48 83 ec 30          	sub    rsp,0x30
  234718:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  23471c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  234720:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
        builtin.TypeId.Int => return formatIntValue(value, fmt, context, Errors, output),
  234724:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  234728:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  23472c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  234730:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  234734:	e8 77 00 00 00       	call   2347b0 <formatIntValue.145>
  234739:	66 83 f8 00          	cmp    ax,0x0
  23473d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  234741:	74 0b                	je     23474e <formatValue.143+0x3e>
  234743:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  234747:	e8 44 75 fd ff       	call   20bc90 <__zig_return_error>
  23474c:	eb 02                	jmp    234750 <formatValue.143+0x40>
  23474e:	eb 00                	jmp    234750 <formatValue.143+0x40>
  234750:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  234754:	48 83 c4 30          	add    rsp,0x30
  234758:	5d                   	pop    rbp
  234759:	c3                   	ret    
  23475a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000234760 <formatValue.144>:
fn formatValue(
  234760:	55                   	push   rbp
  234761:	48 89 e5             	mov    rbp,rsp
  234764:	48 83 ec 30          	sub    rsp,0x30
  234768:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  23476c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  234770:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
        builtin.TypeId.Int => return formatIntValue(value, fmt, context, Errors, output),
  234774:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  234778:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  23477c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  234780:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  234784:	e8 97 00 00 00       	call   234820 <formatIntValue.146>
  234789:	66 83 f8 00          	cmp    ax,0x0
  23478d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  234791:	74 0b                	je     23479e <formatValue.144+0x3e>
  234793:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  234797:	e8 f4 74 fd ff       	call   20bc90 <__zig_return_error>
  23479c:	eb 02                	jmp    2347a0 <formatValue.144+0x40>
  23479e:	eb 00                	jmp    2347a0 <formatValue.144+0x40>
  2347a0:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  2347a4:	48 83 c4 30          	add    rsp,0x30
  2347a8:	5d                   	pop    rbp
  2347a9:	c3                   	ret    
  2347aa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000002347b0 <formatIntValue.145>:
pub fn formatIntValue(
  2347b0:	55                   	push   rbp
  2347b1:	48 89 e5             	mov    rbp,rsp
  2347b4:	48 83 ec 40          	sub    rsp,0x40
  2347b8:	b8 0a 00 00 00       	mov    eax,0xa
  2347bd:	45 31 c0             	xor    r8d,r8d
  2347c0:	45 31 c9             	xor    r9d,r9d
  2347c3:	45 89 ca             	mov    r10d,r9d
  2347c6:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2347ca:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  2347ce:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    return formatInt(value, radix, uppercase, width, context, Errors, output);
  2347d2:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2347d6:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
  2347da:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2347de:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2347e2:	89 c2                	mov    edx,eax
  2347e4:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  2347e8:	44 89 c1             	mov    ecx,r8d
  2347eb:	4d 89 d0             	mov    r8,r10
  2347ee:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
  2347f2:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  2347f6:	e8 f5 63 ff ff       	call   22abf0 <formatInt.119>
  2347fb:	66 83 f8 00          	cmp    ax,0x0
  2347ff:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  234803:	74 0b                	je     234810 <formatIntValue.145+0x60>
  234805:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  234809:	e8 82 74 fd ff       	call   20bc90 <__zig_return_error>
  23480e:	eb 02                	jmp    234812 <formatIntValue.145+0x62>
  234810:	eb 00                	jmp    234812 <formatIntValue.145+0x62>
  234812:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  234816:	48 83 c4 40          	add    rsp,0x40
  23481a:	5d                   	pop    rbp
  23481b:	c3                   	ret    
  23481c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000234820 <formatIntValue.146>:
pub fn formatIntValue(
  234820:	55                   	push   rbp
  234821:	48 89 e5             	mov    rbp,rsp
  234824:	48 83 ec 40          	sub    rsp,0x40
  234828:	b8 0a 00 00 00       	mov    eax,0xa
  23482d:	45 31 c0             	xor    r8d,r8d
  234830:	45 31 c9             	xor    r9d,r9d
  234833:	45 89 ca             	mov    r10d,r9d
  234836:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  23483a:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  23483e:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    return formatInt(value, radix, uppercase, width, context, Errors, output);
  234842:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  234846:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
  23484a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  23484e:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  234852:	89 c2                	mov    edx,eax
  234854:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  234858:	44 89 c1             	mov    ecx,r8d
  23485b:	4d 89 d0             	mov    r8,r10
  23485e:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
  234862:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  234866:	e8 85 63 ff ff       	call   22abf0 <formatInt.119>
  23486b:	66 83 f8 00          	cmp    ax,0x0
  23486f:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  234873:	74 0b                	je     234880 <formatIntValue.146+0x60>
  234875:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  234879:	e8 12 74 fd ff       	call   20bc90 <__zig_return_error>
  23487e:	eb 02                	jmp    234882 <formatIntValue.146+0x62>
  234880:	eb 00                	jmp    234882 <formatIntValue.146+0x62>
  234882:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  234886:	48 83 c4 40          	add    rsp,0x40
  23488a:	5d                   	pop    rbp
  23488b:	c3                   	ret    
  23488c:	cc                   	int3   
  23488d:	cc                   	int3   
  23488e:	cc                   	int3   
  23488f:	cc                   	int3   

0000000000234890 <panic>:

const builtin = @import("builtin");

// Avoid dragging in the runtime safety mechanisms into this .o file,
// unless we're trying to test this file.
pub fn panic(msg: []const u8, error_return_trace: ?*builtin.StackTrace) noreturn {
  234890:	55                   	push   rbp
  234891:	48 89 e5             	mov    rbp,rsp
  234894:	48 83 ec 10          	sub    rsp,0x10
  234898:	48 8d 3d 59 f5 00 00 	lea    rdi,[rip+0xf559]        # 243df8 <__unnamed_1>
  23489f:	31 c0                	xor    eax,eax
  2348a1:	89 c1                	mov    ecx,eax
  2348a3:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
    if (builtin.is_test) {
        @setCold(true);
        @import("std").debug.panic("{}", msg);
    } else {
        unreachable;
  2348a7:	48 89 ce             	mov    rsi,rcx
  2348aa:	e8 e1 ff ff ff       	call   234890 <panic>
  2348af:	90                   	nop

00000000002348b0 <memset>:
    }
}

export fn memset(dest: ?[*]u8, c: u8, n: usize) ?[*]u8 {
  2348b0:	55                   	push   rbp
  2348b1:	48 89 e5             	mov    rbp,rsp
  2348b4:	40 88 f0             	mov    al,sil
  2348b7:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  2348bb:	88 45 f7             	mov    BYTE PTR [rbp-0x9],al
  2348be:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    @setRuntimeSafety(false);

    var index: usize = 0;
  2348c2:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  2348c9:	00 
    while (index != n) : (index += 1)
  2348ca:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2348ce:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
  2348d2:	74 1c                	je     2348f0 <memset+0x40>
        dest.?[index] = c;
  2348d4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2348d8:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  2348dc:	8a 55 f7             	mov    dl,BYTE PTR [rbp-0x9]
  2348df:	88 14 01             	mov    BYTE PTR [rcx+rax*1],dl
    while (index != n) : (index += 1)
  2348e2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2348e6:	48 83 c0 01          	add    rax,0x1
  2348ea:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  2348ee:	eb da                	jmp    2348ca <memset+0x1a>

    return dest;
  2348f0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2348f4:	5d                   	pop    rbp
  2348f5:	c3                   	ret    
  2348f6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  2348fd:	00 00 00 

0000000000234900 <memcpy>:
}

export fn memcpy(noalias dest: ?[*]u8, noalias src: ?[*]const u8, n: usize) ?[*]u8 {
  234900:	55                   	push   rbp
  234901:	48 89 e5             	mov    rbp,rsp
  234904:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  234908:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  23490c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    @setRuntimeSafety(false);

    var index: usize = 0;
  234910:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  234917:	00 
    while (index != n) : (index += 1)
  234918:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  23491c:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
  234920:	74 26                	je     234948 <memcpy+0x48>
        dest.?[index] = src.?[index];
  234922:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  234926:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  23492a:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  23492e:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  234932:	40 8a 3c 16          	mov    dil,BYTE PTR [rsi+rdx*1]
  234936:	40 88 3c 01          	mov    BYTE PTR [rcx+rax*1],dil
    while (index != n) : (index += 1)
  23493a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  23493e:	48 83 c0 01          	add    rax,0x1
  234942:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  234946:	eb d0                	jmp    234918 <memcpy+0x18>

    return dest;
  234948:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  23494c:	5d                   	pop    rbp
  23494d:	c3                   	ret    
  23494e:	66 90                	xchg   ax,ax

0000000000234950 <memmove>:
}

export fn memmove(dest: ?[*]u8, src: ?[*]const u8, n: usize) ?[*]u8 {
  234950:	55                   	push   rbp
  234951:	48 89 e5             	mov    rbp,rsp
  234954:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  234958:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  23495c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    @setRuntimeSafety(false);

    if (@ptrToInt(dest) < @ptrToInt(src)) {
  234960:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  234964:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  234968:	48 39 f2             	cmp    rdx,rsi
  23496b:	73 3a                	jae    2349a7 <memmove+0x57>
        var index: usize = 0;
  23496d:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  234974:	00 
        while (index != n) : (index += 1) {
  234975:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  234979:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
  23497d:	74 26                	je     2349a5 <memmove+0x55>
            dest.?[index] = src.?[index];
  23497f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  234983:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  234987:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  23498b:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  23498f:	40 8a 3c 16          	mov    dil,BYTE PTR [rsi+rdx*1]
  234993:	40 88 3c 01          	mov    BYTE PTR [rcx+rax*1],dil
        while (index != n) : (index += 1) {
  234997:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  23499b:	48 83 c0 01          	add    rax,0x1
  23499f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  2349a3:	eb d0                	jmp    234975 <memmove+0x25>
    if (@ptrToInt(dest) < @ptrToInt(src)) {
  2349a5:	eb 37                	jmp    2349de <memmove+0x8e>
        }
    } else {
        var index = n;
  2349a7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2349ab:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
        while (index != 0) {
  2349af:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  2349b4:	74 26                	je     2349dc <memmove+0x8c>
            index -= 1;
  2349b6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2349ba:	48 83 e8 01          	sub    rax,0x1
  2349be:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
            dest.?[index] = src.?[index];
  2349c2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2349c6:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  2349ca:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  2349ce:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  2349d2:	40 8a 3c 16          	mov    dil,BYTE PTR [rsi+rdx*1]
  2349d6:	40 88 3c 01          	mov    BYTE PTR [rcx+rax*1],dil
        while (index != 0) {
  2349da:	eb d3                	jmp    2349af <memmove+0x5f>
    if (@ptrToInt(dest) < @ptrToInt(src)) {
  2349dc:	eb 00                	jmp    2349de <memmove+0x8e>
        }
    }

    return dest;
  2349de:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2349e2:	5d                   	pop    rbp
  2349e3:	c3                   	ret    
  2349e4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2349eb:	00 00 00 00 00 

00000000002349f0 <__stack_chk_fail>:
    }
    if (builtin.os == builtin.Os.linux and builtin.arch == builtin.Arch.x86_64) {
        @export("clone", clone, builtin.GlobalLinkage.Strong);
    }
}
extern fn __stack_chk_fail() noreturn {
  2349f0:	55                   	push   rbp
  2349f1:	48 89 e5             	mov    rbp,rsp
  2349f4:	48 8d 3d 15 f4 00 00 	lea    rdi,[rip+0xf415]        # 243e10 <__unnamed_2>
  2349fb:	31 c0                	xor    eax,eax
  2349fd:	89 c6                	mov    esi,eax
    @panic("stack smashing detected");
  2349ff:	e8 8c fe ff ff       	call   234890 <panic>
  234a04:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  234a0b:	00 00 00 00 00 

0000000000234a10 <clone>:

// TODO we should be able to put this directly in std/linux/x86_64.zig but
// it causes a segfault in release mode. this is a workaround of calling it
// across .o file boundaries. fix comptime @ptrCast of nakedcc functions.
nakedcc fn clone() void {
    asm volatile (
  234a10:	31 c0                	xor    eax,eax
  234a12:	b0 38                	mov    al,0x38
  234a14:	49 89 fb             	mov    r11,rdi
  234a17:	48 89 d7             	mov    rdi,rdx
  234a1a:	4c 89 c2             	mov    rdx,r8
  234a1d:	4d 89 c8             	mov    r8,r9
  234a20:	4c 8b 54 24 08       	mov    r10,QWORD PTR [rsp+0x8]
  234a25:	4d 89 d9             	mov    r9,r11
  234a28:	48 83 e6 f0          	and    rsi,0xfffffffffffffff0
  234a2c:	48 83 ee 08          	sub    rsi,0x8
  234a30:	48 89 0e             	mov    QWORD PTR [rsi],rcx
  234a33:	0f 05                	syscall 
  234a35:	85 c0                	test   eax,eax
  234a37:	75 0f                	jne    234a48 <clone+0x38>
  234a39:	31 ed                	xor    ebp,ebp
  234a3b:	5f                   	pop    rdi
  234a3c:	41 ff d1             	call   r9
  234a3f:	89 c7                	mov    edi,eax
  234a41:	31 c0                	xor    eax,eax
  234a43:	b0 3c                	mov    al,0x3c
  234a45:	0f 05                	syscall 
  234a47:	f4                   	hlt    
  234a48:	c3                   	ret    
nakedcc fn clone() void {
  234a49:	c3                   	ret    
  234a4a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000234a50 <fmodf>:
    );
}

const math = @import("../math/index.zig");

export fn fmodf(x: f32, y: f32) f32 {
  234a50:	55                   	push   rbp
  234a51:	48 89 e5             	mov    rbp,rsp
  234a54:	48 83 ec 10          	sub    rsp,0x10
  234a58:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
  234a5d:	c5 fa 11 4d f8       	vmovss DWORD PTR [rbp-0x8],xmm1
    return generic_fmod(f32, x, y);
  234a62:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  234a67:	c5 fa 10 4d f8       	vmovss xmm1,DWORD PTR [rbp-0x8]
  234a6c:	e8 0f 00 00 00       	call   234a80 <generic_fmod>
  234a71:	48 83 c4 10          	add    rsp,0x10
  234a75:	5d                   	pop    rbp
  234a76:	c3                   	ret    
  234a77:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  234a7e:	00 00 

0000000000234a80 <generic_fmod>:
}
export fn ceil(x: f64) f64 {
    return math.ceil(x);
}

fn generic_fmod(comptime T: type, x: T, y: T) T {
  234a80:	55                   	push   rbp
  234a81:	48 89 e5             	mov    rbp,rsp
  234a84:	48 83 ec 30          	sub    rsp,0x30
  234a88:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
  234a8d:	c5 fa 11 4d f8       	vmovss DWORD PTR [rbp-0x8],xmm1
    const log2uint = math.Log2Int(uint);
    const digits = if (T == f32) 23 else 52;
    const exp_bits = if (T == f32) 9 else 12;
    const bits_minus_1 = T.bit_count - 1;
    const mask = if (T == f32) 0xff else 0x7ff;
    var ux = @bitCast(uint, x);
  234a92:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  234a97:	c5 f9 7e c0          	vmovd  eax,xmm0
  234a9b:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    var uy = @bitCast(uint, y);
  234a9e:	c5 fa 10 45 f8       	vmovss xmm0,DWORD PTR [rbp-0x8]
  234aa3:	c5 f9 7e c0          	vmovd  eax,xmm0
  234aa7:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    var ex = @intCast(i32, (ux >> digits) & mask);
  234aaa:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  234aad:	c1 e8 17             	shr    eax,0x17
  234ab0:	25 ff 00 00 00       	and    eax,0xff
  234ab5:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    var ey = @intCast(i32, (uy >> digits) & mask);
  234ab8:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  234abb:	c1 e8 17             	shr    eax,0x17
  234abe:	25 ff 00 00 00       	and    eax,0xff
  234ac3:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
    const sx = if (T == f32) @intCast(u32, ux & 0x80000000) else @intCast(i32, ux >> bits_minus_1);
  234ac6:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  234ac9:	25 00 00 00 80       	and    eax,0x80000000
  234ace:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
    var i: uint = undefined;

    if (uy << 1 == 0 or isNan(uint, uy) or ex == mask)
  234ad1:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  234ad4:	c1 e0 01             	shl    eax,0x1
  234ad7:	83 f8 00             	cmp    eax,0x0
  234ada:	0f 94 c1             	sete   cl
  234add:	f6 c1 01             	test   cl,0x1
  234ae0:	88 4d df             	mov    BYTE PTR [rbp-0x21],cl
  234ae3:	75 0b                	jne    234af0 <generic_fmod+0x70>
  234ae5:	8b 7d f0             	mov    edi,DWORD PTR [rbp-0x10]
  234ae8:	e8 43 15 00 00       	call   236030 <isNan>
  234aed:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
  234af0:	8a 45 df             	mov    al,BYTE PTR [rbp-0x21]
  234af3:	a8 01                	test   al,0x1
  234af5:	88 45 de             	mov    BYTE PTR [rbp-0x22],al
  234af8:	75 0d                	jne    234b07 <generic_fmod+0x87>
  234afa:	81 7d ec ff 00 00 00 	cmp    DWORD PTR [rbp-0x14],0xff
  234b01:	0f 94 c0             	sete   al
  234b04:	88 45 de             	mov    BYTE PTR [rbp-0x22],al
  234b07:	8a 45 de             	mov    al,BYTE PTR [rbp-0x22]
  234b0a:	a8 01                	test   al,0x1
  234b0c:	75 02                	jne    234b10 <generic_fmod+0x90>
  234b0e:	eb 1e                	jmp    234b2e <generic_fmod+0xae>
        return (x * y) / (x * y);
  234b10:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  234b15:	c5 fa 59 45 f8       	vmulss xmm0,xmm0,DWORD PTR [rbp-0x8]
  234b1a:	c5 fa 10 4d fc       	vmovss xmm1,DWORD PTR [rbp-0x4]
  234b1f:	c5 f2 59 4d f8       	vmulss xmm1,xmm1,DWORD PTR [rbp-0x8]
  234b24:	c5 fa 5e c1          	vdivss xmm0,xmm0,xmm1
  234b28:	48 83 c4 30          	add    rsp,0x30
  234b2c:	5d                   	pop    rbp
  234b2d:	c3                   	ret    
    if (uy << 1 == 0 or isNan(uint, uy) or ex == mask)
  234b2e:	eb 00                	jmp    234b30 <generic_fmod+0xb0>

    if (ux << 1 <= uy << 1) {
  234b30:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  234b33:	c1 e0 01             	shl    eax,0x1
  234b36:	8b 4d f0             	mov    ecx,DWORD PTR [rbp-0x10]
  234b39:	c1 e1 01             	shl    ecx,0x1
  234b3c:	39 c8                	cmp    eax,ecx
  234b3e:	77 2c                	ja     234b6c <generic_fmod+0xec>
        if (ux << 1 == uy << 1)
  234b40:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  234b43:	c1 e0 01             	shl    eax,0x1
  234b46:	8b 4d f0             	mov    ecx,DWORD PTR [rbp-0x10]
  234b49:	c1 e1 01             	shl    ecx,0x1
  234b4c:	39 c8                	cmp    eax,ecx
  234b4e:	75 0f                	jne    234b5f <generic_fmod+0xdf>
  234b50:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
            return 0 * x;
  234b54:	c5 fa 59 45 fc       	vmulss xmm0,xmm0,DWORD PTR [rbp-0x4]
  234b59:	48 83 c4 30          	add    rsp,0x30
  234b5d:	5d                   	pop    rbp
  234b5e:	c3                   	ret    
        if (ux << 1 == uy << 1)
  234b5f:	eb 00                	jmp    234b61 <generic_fmod+0xe1>
        return x;
  234b61:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  234b66:	48 83 c4 30          	add    rsp,0x30
  234b6a:	5d                   	pop    rbp
  234b6b:	c3                   	ret    
    if (ux << 1 <= uy << 1) {
  234b6c:	eb 00                	jmp    234b6e <generic_fmod+0xee>
    }

    // normalize x and y
    if (ex == 0) {
  234b6e:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
  234b72:	75 43                	jne    234bb7 <generic_fmod+0x137>
        i = ux << exp_bits;
  234b74:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  234b77:	c1 e0 09             	shl    eax,0x9
  234b7a:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
        while (i >> bits_minus_1 == 0) : (b: {
  234b7d:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  234b80:	c1 e8 1f             	shr    eax,0x1f
  234b83:	83 f8 00             	cmp    eax,0x0
  234b86:	75 16                	jne    234b9e <generic_fmod+0x11e>
  234b88:	eb 00                	jmp    234b8a <generic_fmod+0x10a>
            ex -= 1;
  234b8a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  234b8d:	83 e8 01             	sub    eax,0x1
  234b90:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
            i <<= 1;
  234b93:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  234b96:	c1 e0 01             	shl    eax,0x1
  234b99:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
        while (i >> bits_minus_1 == 0) : (b: {
  234b9c:	eb df                	jmp    234b7d <generic_fmod+0xfd>
        }) {}
        ux <<= @intCast(log2uint, @bitCast(u32, -ex + 1));
  234b9e:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  234ba1:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
  234ba4:	ba 01 00 00 00       	mov    edx,0x1
  234ba9:	29 ca                	sub    edx,ecx
  234bab:	83 e2 1f             	and    edx,0x1f
  234bae:	89 d1                	mov    ecx,edx
  234bb0:	d3 e0                	shl    eax,cl
  234bb2:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    if (ex == 0) {
  234bb5:	eb 16                	jmp    234bcd <generic_fmod+0x14d>
    } else {
        ux &= @maxValue(uint) >> exp_bits;
  234bb7:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  234bba:	25 ff ff 7f 00       	and    eax,0x7fffff
  234bbf:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
        ux |= 1 << digits;
  234bc2:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  234bc5:	0d 00 00 80 00       	or     eax,0x800000
  234bca:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    }
    if (ey == 0) {
  234bcd:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
  234bd1:	75 43                	jne    234c16 <generic_fmod+0x196>
        i = uy << exp_bits;
  234bd3:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  234bd6:	c1 e0 09             	shl    eax,0x9
  234bd9:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
        while (i >> bits_minus_1 == 0) : (b: {
  234bdc:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  234bdf:	c1 e8 1f             	shr    eax,0x1f
  234be2:	83 f8 00             	cmp    eax,0x0
  234be5:	75 16                	jne    234bfd <generic_fmod+0x17d>
  234be7:	eb 00                	jmp    234be9 <generic_fmod+0x169>
            ey -= 1;
  234be9:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  234bec:	83 e8 01             	sub    eax,0x1
  234bef:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
            i <<= 1;
  234bf2:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  234bf5:	c1 e0 01             	shl    eax,0x1
  234bf8:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
        while (i >> bits_minus_1 == 0) : (b: {
  234bfb:	eb df                	jmp    234bdc <generic_fmod+0x15c>
        }) {}
        uy <<= @intCast(log2uint, @bitCast(u32, -ey + 1));
  234bfd:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  234c00:	8b 4d e8             	mov    ecx,DWORD PTR [rbp-0x18]
  234c03:	ba 01 00 00 00       	mov    edx,0x1
  234c08:	29 ca                	sub    edx,ecx
  234c0a:	83 e2 1f             	and    edx,0x1f
  234c0d:	89 d1                	mov    ecx,edx
  234c0f:	d3 e0                	shl    eax,cl
  234c11:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    if (ey == 0) {
  234c14:	eb 16                	jmp    234c2c <generic_fmod+0x1ac>
    } else {
        uy &= @maxValue(uint) >> exp_bits;
  234c16:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  234c19:	25 ff ff 7f 00       	and    eax,0x7fffff
  234c1e:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
        uy |= 1 << digits;
  234c21:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  234c24:	0d 00 00 80 00       	or     eax,0x800000
  234c29:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    }

    // x mod y
    while (ex > ey) : (ex -= 1) {
  234c2c:	eb 00                	jmp    234c2e <generic_fmod+0x1ae>
  234c2e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  234c31:	3b 45 e8             	cmp    eax,DWORD PTR [rbp-0x18]
  234c34:	7e 49                	jle    234c7f <generic_fmod+0x1ff>
        i = ux -% uy;
  234c36:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  234c39:	2b 45 f0             	sub    eax,DWORD PTR [rbp-0x10]
  234c3c:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
        if (i >> bits_minus_1 == 0) {
  234c3f:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  234c42:	c1 e8 1f             	shr    eax,0x1f
  234c45:	83 f8 00             	cmp    eax,0x0
  234c48:	75 1f                	jne    234c69 <generic_fmod+0x1e9>
            if (i == 0)
  234c4a:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
  234c4e:	75 0f                	jne    234c5f <generic_fmod+0x1df>
  234c50:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
                return 0 * x;
  234c54:	c5 fa 59 45 fc       	vmulss xmm0,xmm0,DWORD PTR [rbp-0x4]
  234c59:	48 83 c4 30          	add    rsp,0x30
  234c5d:	5d                   	pop    rbp
  234c5e:	c3                   	ret    
            if (i == 0)
  234c5f:	eb 00                	jmp    234c61 <generic_fmod+0x1e1>
            ux = i;
  234c61:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  234c64:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
        if (i >> bits_minus_1 == 0) {
  234c67:	eb 02                	jmp    234c6b <generic_fmod+0x1eb>
  234c69:	eb 00                	jmp    234c6b <generic_fmod+0x1eb>
        }
        ux <<= 1;
  234c6b:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  234c6e:	c1 e0 01             	shl    eax,0x1
  234c71:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    while (ex > ey) : (ex -= 1) {
  234c74:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  234c77:	83 e8 01             	sub    eax,0x1
  234c7a:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
  234c7d:	eb af                	jmp    234c2e <generic_fmod+0x1ae>
    }
    i = ux -% uy;
  234c7f:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  234c82:	2b 45 f0             	sub    eax,DWORD PTR [rbp-0x10]
  234c85:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    if (i >> bits_minus_1 == 0) {
  234c88:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  234c8b:	c1 e8 1f             	shr    eax,0x1f
  234c8e:	83 f8 00             	cmp    eax,0x0
  234c91:	75 1f                	jne    234cb2 <generic_fmod+0x232>
        if (i == 0)
  234c93:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
  234c97:	75 0f                	jne    234ca8 <generic_fmod+0x228>
  234c99:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
            return 0 * x;
  234c9d:	c5 fa 59 45 fc       	vmulss xmm0,xmm0,DWORD PTR [rbp-0x4]
  234ca2:	48 83 c4 30          	add    rsp,0x30
  234ca6:	5d                   	pop    rbp
  234ca7:	c3                   	ret    
        if (i == 0)
  234ca8:	eb 00                	jmp    234caa <generic_fmod+0x22a>
        ux = i;
  234caa:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  234cad:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    if (i >> bits_minus_1 == 0) {
  234cb0:	eb 02                	jmp    234cb4 <generic_fmod+0x234>
  234cb2:	eb 00                	jmp    234cb4 <generic_fmod+0x234>
    }
    while (ux >> digits == 0) : (b: {
  234cb4:	eb 00                	jmp    234cb6 <generic_fmod+0x236>
  234cb6:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  234cb9:	c1 e8 17             	shr    eax,0x17
  234cbc:	83 f8 00             	cmp    eax,0x0
  234cbf:	75 16                	jne    234cd7 <generic_fmod+0x257>
  234cc1:	eb 00                	jmp    234cc3 <generic_fmod+0x243>
        ux <<= 1;
  234cc3:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  234cc6:	c1 e0 01             	shl    eax,0x1
  234cc9:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
        ex -= 1;
  234ccc:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  234ccf:	83 e8 01             	sub    eax,0x1
  234cd2:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    while (ux >> digits == 0) : (b: {
  234cd5:	eb df                	jmp    234cb6 <generic_fmod+0x236>
    }) {}

    // scale result up
    if (ex > 0) {
  234cd7:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
  234cdb:	7e 1b                	jle    234cf8 <generic_fmod+0x278>
        ux -%= 1 << digits;
  234cdd:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  234ce0:	2d 00 00 80 00       	sub    eax,0x800000
  234ce5:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
        ux |= uint(@bitCast(u32, ex)) << digits;
  234ce8:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  234ceb:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
  234cee:	c1 e1 17             	shl    ecx,0x17
  234cf1:	09 c8                	or     eax,ecx
  234cf3:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    if (ex > 0) {
  234cf6:	eb 17                	jmp    234d0f <generic_fmod+0x28f>
    } else {
        ux >>= @intCast(log2uint, @bitCast(u32, -ex + 1));
  234cf8:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  234cfb:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
  234cfe:	ba 01 00 00 00       	mov    edx,0x1
  234d03:	29 ca                	sub    edx,ecx
  234d05:	83 e2 1f             	and    edx,0x1f
  234d08:	89 d1                	mov    ecx,edx
  234d0a:	d3 e8                	shr    eax,cl
  234d0c:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    }
    if (T == f32) {
        ux |= sx;
  234d0f:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  234d12:	0b 45 e4             	or     eax,DWORD PTR [rbp-0x1c]
  234d15:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    } else {
        ux |= @intCast(uint, sx) << bits_minus_1;
    }
    return @bitCast(T, ux);
  234d18:	c5 f9 6e 45 f4       	vmovd  xmm0,DWORD PTR [rbp-0xc]
  234d1d:	48 83 c4 30          	add    rsp,0x30
  234d21:	5d                   	pop    rbp
  234d22:	c3                   	ret    
  234d23:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  234d2a:	84 00 00 00 00 00 

0000000000234d30 <fmod>:
export fn fmod(x: f64, y: f64) f64 {
  234d30:	55                   	push   rbp
  234d31:	48 89 e5             	mov    rbp,rsp
  234d34:	48 83 ec 10          	sub    rsp,0x10
  234d38:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
  234d3d:	c5 fb 11 4d f0       	vmovsd QWORD PTR [rbp-0x10],xmm1
    return generic_fmod(f64, x, y);
  234d42:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  234d47:	c5 fb 10 4d f0       	vmovsd xmm1,QWORD PTR [rbp-0x10]
  234d4c:	e8 0f 00 00 00       	call   234d60 <generic_fmod.1>
  234d51:	48 83 c4 10          	add    rsp,0x10
  234d55:	5d                   	pop    rbp
  234d56:	c3                   	ret    
  234d57:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  234d5e:	00 00 

0000000000234d60 <generic_fmod.1>:
fn generic_fmod(comptime T: type, x: T, y: T) T {
  234d60:	55                   	push   rbp
  234d61:	48 89 e5             	mov    rbp,rsp
  234d64:	48 83 ec 40          	sub    rsp,0x40
  234d68:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
  234d6d:	c5 fb 11 4d f0       	vmovsd QWORD PTR [rbp-0x10],xmm1
    var ux = @bitCast(uint, x);
  234d72:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  234d77:	c4 e1 f9 7e c0       	vmovq  rax,xmm0
  234d7c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    var uy = @bitCast(uint, y);
  234d80:	c5 fb 10 45 f0       	vmovsd xmm0,QWORD PTR [rbp-0x10]
  234d85:	c4 e1 f9 7e c0       	vmovq  rax,xmm0
  234d8a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    var ex = @intCast(i32, (ux >> digits) & mask);
  234d8e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  234d92:	48 c1 e8 34          	shr    rax,0x34
  234d96:	48 25 ff 07 00 00    	and    rax,0x7ff
  234d9c:	89 c1                	mov    ecx,eax
  234d9e:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
    var ey = @intCast(i32, (uy >> digits) & mask);
  234da1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  234da5:	48 c1 e8 34          	shr    rax,0x34
  234da9:	48 25 ff 07 00 00    	and    rax,0x7ff
  234daf:	89 c1                	mov    ecx,eax
  234db1:	89 4d d8             	mov    DWORD PTR [rbp-0x28],ecx
    const sx = if (T == f32) @intCast(u32, ux & 0x80000000) else @intCast(i32, ux >> bits_minus_1);
  234db4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  234db8:	48 c1 e8 3f          	shr    rax,0x3f
  234dbc:	89 c1                	mov    ecx,eax
  234dbe:	89 4d d4             	mov    DWORD PTR [rbp-0x2c],ecx
    if (uy << 1 == 0 or isNan(uint, uy) or ex == mask)
  234dc1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  234dc5:	48 c1 e0 01          	shl    rax,0x1
  234dc9:	48 83 f8 00          	cmp    rax,0x0
  234dcd:	0f 94 c2             	sete   dl
  234dd0:	f6 c2 01             	test   dl,0x1
  234dd3:	88 55 c7             	mov    BYTE PTR [rbp-0x39],dl
  234dd6:	75 0c                	jne    234de4 <generic_fmod.1+0x84>
  234dd8:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  234ddc:	e8 6f 12 00 00       	call   236050 <isNan.5>
  234de1:	88 45 c7             	mov    BYTE PTR [rbp-0x39],al
  234de4:	8a 45 c7             	mov    al,BYTE PTR [rbp-0x39]
  234de7:	a8 01                	test   al,0x1
  234de9:	88 45 c6             	mov    BYTE PTR [rbp-0x3a],al
  234dec:	75 0d                	jne    234dfb <generic_fmod.1+0x9b>
  234dee:	81 7d dc ff 07 00 00 	cmp    DWORD PTR [rbp-0x24],0x7ff
  234df5:	0f 94 c0             	sete   al
  234df8:	88 45 c6             	mov    BYTE PTR [rbp-0x3a],al
  234dfb:	8a 45 c6             	mov    al,BYTE PTR [rbp-0x3a]
  234dfe:	a8 01                	test   al,0x1
  234e00:	75 02                	jne    234e04 <generic_fmod.1+0xa4>
  234e02:	eb 1e                	jmp    234e22 <generic_fmod.1+0xc2>
        return (x * y) / (x * y);
  234e04:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  234e09:	c5 fb 59 45 f0       	vmulsd xmm0,xmm0,QWORD PTR [rbp-0x10]
  234e0e:	c5 fb 10 4d f8       	vmovsd xmm1,QWORD PTR [rbp-0x8]
  234e13:	c5 f3 59 4d f0       	vmulsd xmm1,xmm1,QWORD PTR [rbp-0x10]
  234e18:	c5 fb 5e c1          	vdivsd xmm0,xmm0,xmm1
  234e1c:	48 83 c4 40          	add    rsp,0x40
  234e20:	5d                   	pop    rbp
  234e21:	c3                   	ret    
    if (uy << 1 == 0 or isNan(uint, uy) or ex == mask)
  234e22:	eb 00                	jmp    234e24 <generic_fmod.1+0xc4>
    if (ux << 1 <= uy << 1) {
  234e24:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  234e28:	48 c1 e0 01          	shl    rax,0x1
  234e2c:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  234e30:	48 c1 e1 01          	shl    rcx,0x1
  234e34:	48 39 c8             	cmp    rax,rcx
  234e37:	77 31                	ja     234e6a <generic_fmod.1+0x10a>
        if (ux << 1 == uy << 1)
  234e39:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  234e3d:	48 c1 e0 01          	shl    rax,0x1
  234e41:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  234e45:	48 c1 e1 01          	shl    rcx,0x1
  234e49:	48 39 c8             	cmp    rax,rcx
  234e4c:	75 0f                	jne    234e5d <generic_fmod.1+0xfd>
  234e4e:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
            return 0 * x;
  234e52:	c5 fb 59 45 f8       	vmulsd xmm0,xmm0,QWORD PTR [rbp-0x8]
  234e57:	48 83 c4 40          	add    rsp,0x40
  234e5b:	5d                   	pop    rbp
  234e5c:	c3                   	ret    
        if (ux << 1 == uy << 1)
  234e5d:	eb 00                	jmp    234e5f <generic_fmod.1+0xff>
        return x;
  234e5f:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  234e64:	48 83 c4 40          	add    rsp,0x40
  234e68:	5d                   	pop    rbp
  234e69:	c3                   	ret    
    if (ux << 1 <= uy << 1) {
  234e6a:	eb 00                	jmp    234e6c <generic_fmod.1+0x10c>
    if (ex == 0) {
  234e6c:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
  234e70:	75 4f                	jne    234ec1 <generic_fmod.1+0x161>
        i = ux << exp_bits;
  234e72:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  234e76:	48 c1 e0 0c          	shl    rax,0xc
  234e7a:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
        while (i >> bits_minus_1 == 0) : (b: {
  234e7e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  234e82:	48 c1 e8 3f          	shr    rax,0x3f
  234e86:	48 83 f8 00          	cmp    rax,0x0
  234e8a:	75 19                	jne    234ea5 <generic_fmod.1+0x145>
  234e8c:	eb 00                	jmp    234e8e <generic_fmod.1+0x12e>
            ex -= 1;
  234e8e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  234e91:	83 e8 01             	sub    eax,0x1
  234e94:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
            i <<= 1;
  234e97:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  234e9b:	48 c1 e1 01          	shl    rcx,0x1
  234e9f:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
        while (i >> bits_minus_1 == 0) : (b: {
  234ea3:	eb d9                	jmp    234e7e <generic_fmod.1+0x11e>
        ux <<= @intCast(log2uint, @bitCast(u32, -ex + 1));
  234ea5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  234ea9:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  234eac:	ba 01 00 00 00       	mov    edx,0x1
  234eb1:	29 ca                	sub    edx,ecx
  234eb3:	83 e2 3f             	and    edx,0x3f
  234eb6:	89 d1                	mov    ecx,edx
  234eb8:	48 d3 e0             	shl    rax,cl
  234ebb:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    if (ex == 0) {
  234ebf:	eb 24                	jmp    234ee5 <generic_fmod.1+0x185>
  234ec1:	48 b8 00 00 00 00 00 	movabs rax,0x10000000000000
  234ec8:	00 10 00 
  234ecb:	48 b9 ff ff ff ff ff 	movabs rcx,0xfffffffffffff
  234ed2:	ff 0f 00 
        ux &= @maxValue(uint) >> exp_bits;
  234ed5:	48 23 4d e8          	and    rcx,QWORD PTR [rbp-0x18]
  234ed9:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
        ux |= 1 << digits;
  234edd:	48 0b 45 e8          	or     rax,QWORD PTR [rbp-0x18]
  234ee1:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    if (ey == 0) {
  234ee5:	83 7d d8 00          	cmp    DWORD PTR [rbp-0x28],0x0
  234ee9:	75 4f                	jne    234f3a <generic_fmod.1+0x1da>
        i = uy << exp_bits;
  234eeb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  234eef:	48 c1 e0 0c          	shl    rax,0xc
  234ef3:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
        while (i >> bits_minus_1 == 0) : (b: {
  234ef7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  234efb:	48 c1 e8 3f          	shr    rax,0x3f
  234eff:	48 83 f8 00          	cmp    rax,0x0
  234f03:	75 19                	jne    234f1e <generic_fmod.1+0x1be>
  234f05:	eb 00                	jmp    234f07 <generic_fmod.1+0x1a7>
            ey -= 1;
  234f07:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  234f0a:	83 e8 01             	sub    eax,0x1
  234f0d:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
            i <<= 1;
  234f10:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  234f14:	48 c1 e1 01          	shl    rcx,0x1
  234f18:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
        while (i >> bits_minus_1 == 0) : (b: {
  234f1c:	eb d9                	jmp    234ef7 <generic_fmod.1+0x197>
        uy <<= @intCast(log2uint, @bitCast(u32, -ey + 1));
  234f1e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  234f22:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
  234f25:	ba 01 00 00 00       	mov    edx,0x1
  234f2a:	29 ca                	sub    edx,ecx
  234f2c:	83 e2 3f             	and    edx,0x3f
  234f2f:	89 d1                	mov    ecx,edx
  234f31:	48 d3 e0             	shl    rax,cl
  234f34:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    if (ey == 0) {
  234f38:	eb 24                	jmp    234f5e <generic_fmod.1+0x1fe>
  234f3a:	48 b8 00 00 00 00 00 	movabs rax,0x10000000000000
  234f41:	00 10 00 
  234f44:	48 b9 ff ff ff ff ff 	movabs rcx,0xfffffffffffff
  234f4b:	ff 0f 00 
        uy &= @maxValue(uint) >> exp_bits;
  234f4e:	48 23 4d e0          	and    rcx,QWORD PTR [rbp-0x20]
  234f52:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
        uy |= 1 << digits;
  234f56:	48 0b 45 e0          	or     rax,QWORD PTR [rbp-0x20]
  234f5a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    while (ex > ey) : (ex -= 1) {
  234f5e:	eb 00                	jmp    234f60 <generic_fmod.1+0x200>
  234f60:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  234f63:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
  234f66:	7e 55                	jle    234fbd <generic_fmod.1+0x25d>
        i = ux -% uy;
  234f68:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  234f6c:	48 2b 45 e0          	sub    rax,QWORD PTR [rbp-0x20]
  234f70:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
        if (i >> bits_minus_1 == 0) {
  234f74:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  234f78:	48 c1 e8 3f          	shr    rax,0x3f
  234f7c:	48 83 f8 00          	cmp    rax,0x0
  234f80:	75 22                	jne    234fa4 <generic_fmod.1+0x244>
            if (i == 0)
  234f82:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
  234f87:	75 0f                	jne    234f98 <generic_fmod.1+0x238>
  234f89:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
                return 0 * x;
  234f8d:	c5 fb 59 45 f8       	vmulsd xmm0,xmm0,QWORD PTR [rbp-0x8]
  234f92:	48 83 c4 40          	add    rsp,0x40
  234f96:	5d                   	pop    rbp
  234f97:	c3                   	ret    
            if (i == 0)
  234f98:	eb 00                	jmp    234f9a <generic_fmod.1+0x23a>
            ux = i;
  234f9a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  234f9e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
        if (i >> bits_minus_1 == 0) {
  234fa2:	eb 02                	jmp    234fa6 <generic_fmod.1+0x246>
  234fa4:	eb 00                	jmp    234fa6 <generic_fmod.1+0x246>
        ux <<= 1;
  234fa6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  234faa:	48 c1 e0 01          	shl    rax,0x1
  234fae:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    while (ex > ey) : (ex -= 1) {
  234fb2:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  234fb5:	83 e9 01             	sub    ecx,0x1
  234fb8:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
  234fbb:	eb a3                	jmp    234f60 <generic_fmod.1+0x200>
    i = ux -% uy;
  234fbd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  234fc1:	48 2b 45 e0          	sub    rax,QWORD PTR [rbp-0x20]
  234fc5:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
    if (i >> bits_minus_1 == 0) {
  234fc9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  234fcd:	48 c1 e8 3f          	shr    rax,0x3f
  234fd1:	48 83 f8 00          	cmp    rax,0x0
  234fd5:	75 22                	jne    234ff9 <generic_fmod.1+0x299>
        if (i == 0)
  234fd7:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
  234fdc:	75 0f                	jne    234fed <generic_fmod.1+0x28d>
  234fde:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
            return 0 * x;
  234fe2:	c5 fb 59 45 f8       	vmulsd xmm0,xmm0,QWORD PTR [rbp-0x8]
  234fe7:	48 83 c4 40          	add    rsp,0x40
  234feb:	5d                   	pop    rbp
  234fec:	c3                   	ret    
        if (i == 0)
  234fed:	eb 00                	jmp    234fef <generic_fmod.1+0x28f>
        ux = i;
  234fef:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  234ff3:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    if (i >> bits_minus_1 == 0) {
  234ff7:	eb 02                	jmp    234ffb <generic_fmod.1+0x29b>
  234ff9:	eb 00                	jmp    234ffb <generic_fmod.1+0x29b>
    while (ux >> digits == 0) : (b: {
  234ffb:	eb 00                	jmp    234ffd <generic_fmod.1+0x29d>
  234ffd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  235001:	48 c1 e8 34          	shr    rax,0x34
  235005:	48 83 f8 00          	cmp    rax,0x0
  235009:	75 19                	jne    235024 <generic_fmod.1+0x2c4>
  23500b:	eb 00                	jmp    23500d <generic_fmod.1+0x2ad>
        ux <<= 1;
  23500d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  235011:	48 c1 e0 01          	shl    rax,0x1
  235015:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
        ex -= 1;
  235019:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  23501c:	83 e9 01             	sub    ecx,0x1
  23501f:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
    while (ux >> digits == 0) : (b: {
  235022:	eb d9                	jmp    234ffd <generic_fmod.1+0x29d>
    if (ex > 0) {
  235024:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
  235028:	7e 2b                	jle    235055 <generic_fmod.1+0x2f5>
  23502a:	48 b8 00 00 00 00 00 	movabs rax,0x10000000000000
  235031:	00 10 00 
        ux -%= 1 << digits;
  235034:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  235038:	48 29 c1             	sub    rcx,rax
  23503b:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
        ux |= uint(@bitCast(u32, ex)) << digits;
  23503f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  235043:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  235046:	89 d1                	mov    ecx,edx
  235048:	48 c1 e1 34          	shl    rcx,0x34
  23504c:	48 09 c8             	or     rax,rcx
  23504f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    if (ex > 0) {
  235053:	eb 1a                	jmp    23506f <generic_fmod.1+0x30f>
        ux >>= @intCast(log2uint, @bitCast(u32, -ex + 1));
  235055:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  235059:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  23505c:	ba 01 00 00 00       	mov    edx,0x1
  235061:	29 ca                	sub    edx,ecx
  235063:	83 e2 3f             	and    edx,0x3f
  235066:	89 d1                	mov    ecx,edx
  235068:	48 d3 e8             	shr    rax,cl
  23506b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
        ux |= @intCast(uint, sx) << bits_minus_1;
  23506f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  235073:	48 63 4d d4          	movsxd rcx,DWORD PTR [rbp-0x2c]
  235077:	48 c1 e1 3f          	shl    rcx,0x3f
  23507b:	48 09 c8             	or     rax,rcx
  23507e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    return @bitCast(T, ux);
  235082:	c5 fa 7e 45 e8       	vmovq  xmm0,QWORD PTR [rbp-0x18]
  235087:	48 83 c4 40          	add    rsp,0x40
  23508b:	5d                   	pop    rbp
  23508c:	c3                   	ret    
  23508d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000235090 <floorf>:
export fn floorf(x: f32) f32 {
  235090:	55                   	push   rbp
  235091:	48 89 e5             	mov    rbp,rsp
  235094:	48 83 ec 10          	sub    rsp,0x10
  235098:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
    return math.floor(x);
  23509d:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  2350a2:	e8 09 00 00 00       	call   2350b0 <floor.0>
  2350a7:	48 83 c4 10          	add    rsp,0x10
  2350ab:	5d                   	pop    rbp
  2350ac:	c3                   	ret    
  2350ad:	0f 1f 00             	nop    DWORD PTR [rax]

00000000002350b0 <floor.0>:
pub fn floor(x: var) @typeOf(x) {
  2350b0:	55                   	push   rbp
  2350b1:	48 89 e5             	mov    rbp,rsp
  2350b4:	48 83 ec 10          	sub    rsp,0x10
  2350b8:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
        f32 => floor32(x),
  2350bd:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  2350c2:	e8 b9 0f 00 00       	call   236080 <floor32>
    return switch (T) {
  2350c7:	48 83 c4 10          	add    rsp,0x10
  2350cb:	5d                   	pop    rbp
  2350cc:	c3                   	ret    
  2350cd:	0f 1f 00             	nop    DWORD PTR [rax]

00000000002350d0 <ceilf>:
export fn ceilf(x: f32) f32 {
  2350d0:	55                   	push   rbp
  2350d1:	48 89 e5             	mov    rbp,rsp
  2350d4:	48 83 ec 10          	sub    rsp,0x10
  2350d8:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
    return math.ceil(x);
  2350dd:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  2350e2:	e8 09 00 00 00       	call   2350f0 <ceil.0>
  2350e7:	48 83 c4 10          	add    rsp,0x10
  2350eb:	5d                   	pop    rbp
  2350ec:	c3                   	ret    
  2350ed:	0f 1f 00             	nop    DWORD PTR [rax]

00000000002350f0 <ceil.0>:
const builtin = @import("builtin");
const std = @import("../index.zig");
const math = std.math;
const assert = std.debug.assert;

pub fn ceil(x: var) @typeOf(x) {
  2350f0:	55                   	push   rbp
  2350f1:	48 89 e5             	mov    rbp,rsp
  2350f4:	48 83 ec 10          	sub    rsp,0x10
  2350f8:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
    const T = @typeOf(x);
    return switch (T) {
        f32 => ceil32(x),
  2350fd:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  235102:	e8 59 11 00 00       	call   236260 <ceil32>
    return switch (T) {
  235107:	48 83 c4 10          	add    rsp,0x10
  23510b:	5d                   	pop    rbp
  23510c:	c3                   	ret    
  23510d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000235110 <floor>:
export fn floor(x: f64) f64 {
  235110:	55                   	push   rbp
  235111:	48 89 e5             	mov    rbp,rsp
  235114:	48 83 ec 10          	sub    rsp,0x10
  235118:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    return math.floor(x);
  23511d:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  235122:	e8 09 00 00 00       	call   235130 <floor.0.2>
  235127:	48 83 c4 10          	add    rsp,0x10
  23512b:	5d                   	pop    rbp
  23512c:	c3                   	ret    
  23512d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000235130 <floor.0.2>:
pub fn floor(x: var) @typeOf(x) {
  235130:	55                   	push   rbp
  235131:	48 89 e5             	mov    rbp,rsp
  235134:	48 83 ec 10          	sub    rsp,0x10
  235138:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
        f64 => floor64(x),
  23513d:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  235142:	e8 f9 12 00 00       	call   236440 <floor64>
    return switch (T) {
  235147:	48 83 c4 10          	add    rsp,0x10
  23514b:	5d                   	pop    rbp
  23514c:	c3                   	ret    
  23514d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000235150 <ceil>:
export fn ceil(x: f64) f64 {
  235150:	55                   	push   rbp
  235151:	48 89 e5             	mov    rbp,rsp
  235154:	48 83 ec 10          	sub    rsp,0x10
  235158:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    return math.ceil(x);
  23515d:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  235162:	e8 09 00 00 00       	call   235170 <ceil.0.3>
  235167:	48 83 c4 10          	add    rsp,0x10
  23516b:	5d                   	pop    rbp
  23516c:	c3                   	ret    
  23516d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000235170 <ceil.0.3>:
pub fn ceil(x: var) @typeOf(x) {
  235170:	55                   	push   rbp
  235171:	48 89 e5             	mov    rbp,rsp
  235174:	48 83 ec 10          	sub    rsp,0x10
  235178:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
        f64 => ceil64(x),
  23517d:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  235182:	e8 09 14 00 00       	call   236590 <ceil64>
    return switch (T) {
  235187:	48 83 c4 10          	add    rsp,0x10
  23518b:	5d                   	pop    rbp
  23518c:	c3                   	ret    
  23518d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000235190 <sqrt>:
}

// NOTE: The original code is full of implicit signed -> unsigned assumptions and u32 wraparound
// behaviour. Most intermediate i32 values are changed to u32 where appropriate but there are
// potentially some edge cases remaining that are not handled in the same way.
export fn sqrt(x: f64) f64 {
  235190:	55                   	push   rbp
  235191:	48 89 e5             	mov    rbp,rsp
  235194:	48 81 ec 60 01 00 00 	sub    rsp,0x160
  23519b:	c5 fb 10 0d 1d bb fc 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffcbb1d]        # 200cc0 <__unnamed_181+0x8>
  2351a2:	ff 
  2351a3:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    const tiny: f64 = 1.0e-300;
  2351a8:	c5 fb 11 4d f0       	vmovsd QWORD PTR [rbp-0x10],xmm1
    const sign: u32 = 0x80000000;
  2351ad:	c7 45 ec 00 00 00 80 	mov    DWORD PTR [rbp-0x14],0x80000000
    const u = @bitCast(u64, x);
  2351b4:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  2351b9:	c4 e1 f9 7e c0       	vmovq  rax,xmm0
  2351be:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax

    var ix0 = @intCast(u32, u >> 32);
  2351c2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2351c6:	48 c1 e8 20          	shr    rax,0x20
  2351ca:	89 c1                	mov    ecx,eax
  2351cc:	89 ca                	mov    edx,ecx
  2351ce:	89 d6                	mov    esi,edx
  2351d0:	48 39 f0             	cmp    rax,rsi
  2351d3:	89 4d 94             	mov    DWORD PTR [rbp-0x6c],ecx
  2351d6:	0f 84 a1 04 00 00    	je     23567d <sqrt+0x4ed>
  2351dc:	e9 c0 04 00 00       	jmp    2356a1 <sqrt+0x511>
    var ix1 = @intCast(u32, u & 0xFFFFFFFF);

    // sqrt(nan) = nan, sqrt(+inf) = +inf, sqrt(-inf) = nan
    if (ix0 & 0x7FF00000 == 0x7FF00000) {
        return x * x + x;
  2351e1:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  2351e6:	c5 fb 59 45 f8       	vmulsd xmm0,xmm0,QWORD PTR [rbp-0x8]
  2351eb:	c5 fb 58 45 f8       	vaddsd xmm0,xmm0,QWORD PTR [rbp-0x8]
  2351f0:	48 81 c4 60 01 00 00 	add    rsp,0x160
  2351f7:	5d                   	pop    rbp
  2351f8:	c3                   	ret    
    if (ix0 & 0x7FF00000 == 0x7FF00000) {
  2351f9:	eb 00                	jmp    2351fb <sqrt+0x6b>
  2351fb:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
    }

    // sqrt(+-0) = +-0
    if (x == 0.0) {
  2351ff:	c5 fb 10 4d f8       	vmovsd xmm1,QWORD PTR [rbp-0x8]
  235204:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  235208:	75 10                	jne    23521a <sqrt+0x8a>
  23520a:	7a 0e                	jp     23521a <sqrt+0x8a>
        return x;
  23520c:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  235211:	48 81 c4 60 01 00 00 	add    rsp,0x160
  235218:	5d                   	pop    rbp
  235219:	c3                   	ret    
    if (x == 0.0) {
  23521a:	eb 00                	jmp    23521c <sqrt+0x8c>
    }
    // sqrt(-ve) = snan
    if (ix0 & sign != 0) {
  23521c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  23521f:	25 00 00 00 80       	and    eax,0x80000000
  235224:	83 f8 00             	cmp    eax,0x0
  235227:	74 0e                	je     235237 <sqrt+0xa7>
        return math.snan(f64);
  235229:	e8 42 09 00 00       	call   235b70 <snan>
  23522e:	48 81 c4 60 01 00 00 	add    rsp,0x160
  235235:	5d                   	pop    rbp
  235236:	c3                   	ret    
    if (ix0 & sign != 0) {
  235237:	eb 00                	jmp    235239 <sqrt+0xa9>
    }

    // normalize x
    var m = @intCast(i32, ix0 >> 20);
  235239:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  23523c:	c1 e8 14             	shr    eax,0x14
  23523f:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
    if (m == 0) {
  235242:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
  235246:	75 7e                	jne    2352c6 <sqrt+0x136>
        // subnormal
        while (ix0 == 0) {
  235248:	eb 00                	jmp    23524a <sqrt+0xba>
  23524a:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
  23524e:	75 1a                	jne    23526a <sqrt+0xda>
            m -= 21;
  235250:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
  235253:	83 e8 15             	sub    eax,0x15
  235256:	0f 90 c1             	seto   cl
  235259:	89 45 90             	mov    DWORD PTR [rbp-0x70],eax
  23525c:	88 4d 8f             	mov    BYTE PTR [rbp-0x71],cl
  23525f:	0f 80 7f 04 00 00    	jo     2356e4 <sqrt+0x554>
  235265:	e9 8a 04 00 00       	jmp    2356f4 <sqrt+0x564>
            ix0 |= ix1 >> 11;
            ix1 <<= 21;
        }

        // subnormal
        var i: u32 = 0;
  23526a:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
        while (ix0 & 0x00100000 == 0) : (i += 1) {
  235271:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  235274:	25 00 00 10 00       	and    eax,0x100000
  235279:	83 f8 00             	cmp    eax,0x0
  23527c:	75 23                	jne    2352a1 <sqrt+0x111>
            ix0 <<= 1;
  23527e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  235281:	c1 e0 01             	shl    eax,0x1
  235284:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
        while (ix0 & 0x00100000 == 0) : (i += 1) {
  235287:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
  23528a:	83 c0 01             	add    eax,0x1
  23528d:	0f 92 c1             	setb   cl
  235290:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
  235293:	88 4d 87             	mov    BYTE PTR [rbp-0x79],cl
  235296:	0f 82 7a 04 00 00    	jb     235716 <sqrt+0x586>
  23529c:	e9 85 04 00 00       	jmp    235726 <sqrt+0x596>
        }
        m -= @intCast(i32, i) - 1;
  2352a1:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
  2352a4:	8b 4d d0             	mov    ecx,DWORD PTR [rbp-0x30]
  2352a7:	ff c9                	dec    ecx
  2352a9:	0f 90 c2             	seto   dl
  2352ac:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
  2352af:	89 8d 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],ecx
  2352b5:	88 95 7b ff ff ff    	mov    BYTE PTR [rbp-0x85],dl
  2352bb:	0f 80 70 04 00 00    	jo     235731 <sqrt+0x5a1>
  2352c1:	e9 7b 04 00 00       	jmp    235741 <sqrt+0x5b1>
    if (m == 0) {
  2352c6:	eb 00                	jmp    2352c8 <sqrt+0x138>
        ix0 |= ix1 >> @intCast(u5, 32 - i);
        ix1 <<= @intCast(u5, i);
    }

    // unbias exponent
    m -= 1023;
  2352c8:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
  2352cb:	2d ff 03 00 00       	sub    eax,0x3ff
  2352d0:	0f 90 c1             	seto   cl
  2352d3:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
  2352d9:	88 8d 73 ff ff ff    	mov    BYTE PTR [rbp-0x8d],cl
  2352df:	0f 80 6a 05 00 00    	jo     23584f <sqrt+0x6bf>
  2352e5:	e9 75 05 00 00       	jmp    23585f <sqrt+0x6cf>
    ix0 = (ix0 & 0x000FFFFF) | 0x00100000;
    if (m & 1 != 0) {
        ix0 += ix0 + (ix1 >> 31);
  2352ea:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  2352ed:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  2352f0:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
  2352f3:	c1 ea 1f             	shr    edx,0x1f
  2352f6:	01 d1                	add    ecx,edx
  2352f8:	40 0f 92 c6          	setb   sil
  2352fc:	89 85 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],eax
  235302:	89 8d 68 ff ff ff    	mov    DWORD PTR [rbp-0x98],ecx
  235308:	40 88 b5 67 ff ff ff 	mov    BYTE PTR [rbp-0x99],sil
  23530f:	0f 82 79 05 00 00    	jb     23588e <sqrt+0x6fe>
  235315:	e9 84 05 00 00       	jmp    23589e <sqrt+0x70e>
    if (m & 1 != 0) {
  23531a:	eb 00                	jmp    23531c <sqrt+0x18c>
        ix1 = ix1 +% ix1;
    }
    m >>= 1;
  23531c:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
  23531f:	c1 f8 01             	sar    eax,0x1
  235322:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax

    // sqrt(x) bit by bit
    ix0 += ix0 + (ix1 >> 31);
  235325:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  235328:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  23532b:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
  23532e:	c1 ea 1f             	shr    edx,0x1f
  235331:	01 d1                	add    ecx,edx
  235333:	40 0f 92 c6          	setb   sil
  235337:	89 85 60 ff ff ff    	mov    DWORD PTR [rbp-0xa0],eax
  23533d:	89 8d 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],ecx
  235343:	40 88 b5 5b ff ff ff 	mov    BYTE PTR [rbp-0xa5],sil
  23534a:	0f 82 96 05 00 00    	jb     2358e6 <sqrt+0x756>
  235350:	e9 a1 05 00 00       	jmp    2358f6 <sqrt+0x766>
    var s1: u32 = 0;
    var r: u32 = 0x00200000;
    var t: u32 = undefined;
    var t1: u32 = undefined;

    while (r != 0) {
  235355:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
  235359:	74 58                	je     2353b3 <sqrt+0x223>
        t = s0 +% r;
  23535b:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
  23535e:	03 45 bc             	add    eax,DWORD PTR [rbp-0x44]
  235361:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
        if (t <= ix0) {
  235364:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
  235367:	3b 45 dc             	cmp    eax,DWORD PTR [rbp-0x24]
  23536a:	77 20                	ja     23538c <sqrt+0x1fc>
            s0 = t + r;
  23536c:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
  23536f:	03 45 bc             	add    eax,DWORD PTR [rbp-0x44]
  235372:	0f 92 c1             	setb   cl
  235375:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
  23537b:	88 8d 53 ff ff ff    	mov    BYTE PTR [rbp-0xad],cl
  235381:	0f 82 28 06 00 00    	jb     2359af <sqrt+0x81f>
  235387:	e9 33 06 00 00       	jmp    2359bf <sqrt+0x82f>
        if (t <= ix0) {
  23538c:	eb 00                	jmp    23538e <sqrt+0x1fe>
            ix0 -= t;
            q += r;
        }
        ix0 = ix0 +% ix0 +% (ix1 >> 31);
  23538e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  235391:	03 45 dc             	add    eax,DWORD PTR [rbp-0x24]
  235394:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
  235397:	c1 e9 1f             	shr    ecx,0x1f
  23539a:	01 c8                	add    eax,ecx
  23539c:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
        ix1 = ix1 +% ix1;
  23539f:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  2353a2:	03 45 d8             	add    eax,DWORD PTR [rbp-0x28]
  2353a5:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
        r >>= 1;
  2353a8:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  2353ab:	c1 e8 01             	shr    eax,0x1
  2353ae:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
    while (r != 0) {
  2353b1:	eb a2                	jmp    235355 <sqrt+0x1c5>
    }

    r = sign;
  2353b3:	c7 45 bc 00 00 00 80 	mov    DWORD PTR [rbp-0x44],0x80000000
    while (r != 0) {
  2353ba:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
  2353be:	0f 84 60 01 00 00    	je     235524 <sqrt+0x394>
        t = s1 +% r;
  2353c4:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
  2353c7:	03 45 bc             	add    eax,DWORD PTR [rbp-0x44]
  2353ca:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
        t = s0;
  2353cd:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
  2353d0:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
        if (t < ix0 or (t == ix0 and t1 <= ix1)) {
  2353d3:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
  2353d6:	3b 45 dc             	cmp    eax,DWORD PTR [rbp-0x24]
  2353d9:	0f 92 c1             	setb   cl
  2353dc:	f6 c1 01             	test   cl,0x1
  2353df:	88 8d 52 ff ff ff    	mov    BYTE PTR [rbp-0xae],cl
  2353e5:	75 31                	jne    235418 <sqrt+0x288>
  2353e7:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
  2353ea:	3b 45 dc             	cmp    eax,DWORD PTR [rbp-0x24]
  2353ed:	0f 94 c1             	sete   cl
  2353f0:	f6 c1 01             	test   cl,0x1
  2353f3:	88 8d 51 ff ff ff    	mov    BYTE PTR [rbp-0xaf],cl
  2353f9:	75 02                	jne    2353fd <sqrt+0x26d>
  2353fb:	eb 0f                	jmp    23540c <sqrt+0x27c>
  2353fd:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
  235400:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
  235403:	0f 96 c1             	setbe  cl
  235406:	88 8d 51 ff ff ff    	mov    BYTE PTR [rbp-0xaf],cl
  23540c:	8a 85 51 ff ff ff    	mov    al,BYTE PTR [rbp-0xaf]
  235412:	88 85 52 ff ff ff    	mov    BYTE PTR [rbp-0xae],al
  235418:	8a 85 52 ff ff ff    	mov    al,BYTE PTR [rbp-0xae]
  23541e:	a8 01                	test   al,0x1
  235420:	75 05                	jne    235427 <sqrt+0x297>
  235422:	e9 d3 00 00 00       	jmp    2354fa <sqrt+0x36a>
            s1 = t1 +% r;
  235427:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
  23542a:	03 45 bc             	add    eax,DWORD PTR [rbp-0x44]
  23542d:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
            if (t1 & sign == sign and s1 & sign == 0) {
  235430:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
  235433:	25 00 00 00 80       	and    eax,0x80000000
  235438:	3d 00 00 00 80       	cmp    eax,0x80000000
  23543d:	0f 94 c1             	sete   cl
  235440:	f6 c1 01             	test   cl,0x1
  235443:	88 8d 50 ff ff ff    	mov    BYTE PTR [rbp-0xb0],cl
  235449:	75 02                	jne    23544d <sqrt+0x2bd>
  23544b:	eb 14                	jmp    235461 <sqrt+0x2d1>
  23544d:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
  235450:	25 00 00 00 80       	and    eax,0x80000000
  235455:	83 f8 00             	cmp    eax,0x0
  235458:	0f 94 c1             	sete   cl
  23545b:	88 8d 50 ff ff ff    	mov    BYTE PTR [rbp-0xb0],cl
  235461:	8a 85 50 ff ff ff    	mov    al,BYTE PTR [rbp-0xb0]
  235467:	a8 01                	test   al,0x1
  235469:	75 02                	jne    23546d <sqrt+0x2dd>
  23546b:	eb 20                	jmp    23548d <sqrt+0x2fd>
                s0 += 1;
  23546d:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
  235470:	83 c0 01             	add    eax,0x1
  235473:	0f 92 c1             	setb   cl
  235476:	89 85 4c ff ff ff    	mov    DWORD PTR [rbp-0xb4],eax
  23547c:	88 8d 4b ff ff ff    	mov    BYTE PTR [rbp-0xb5],cl
  235482:	0f 82 a9 05 00 00    	jb     235a31 <sqrt+0x8a1>
  235488:	e9 b4 05 00 00       	jmp    235a41 <sqrt+0x8b1>
            if (t1 & sign == sign and s1 & sign == 0) {
  23548d:	eb 00                	jmp    23548f <sqrt+0x2ff>
            }
            ix0 -= t;
  23548f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  235492:	2b 45 b8             	sub    eax,DWORD PTR [rbp-0x48]
  235495:	0f 92 c1             	setb   cl
  235498:	89 85 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],eax
  23549e:	88 8d 43 ff ff ff    	mov    BYTE PTR [rbp-0xbd],cl
  2354a4:	0f 82 a5 05 00 00    	jb     235a4f <sqrt+0x8bf>
  2354aa:	e9 b0 05 00 00       	jmp    235a5f <sqrt+0x8cf>
            if (ix1 < t1) {
                ix0 -= 1;
  2354af:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  2354b2:	83 e8 01             	sub    eax,0x1
  2354b5:	0f 92 c1             	setb   cl
  2354b8:	89 85 3c ff ff ff    	mov    DWORD PTR [rbp-0xc4],eax
  2354be:	88 8d 3b ff ff ff    	mov    BYTE PTR [rbp-0xc5],cl
  2354c4:	0f 82 af 05 00 00    	jb     235a79 <sqrt+0x8e9>
  2354ca:	e9 ba 05 00 00       	jmp    235a89 <sqrt+0x8f9>
            if (ix1 < t1) {
  2354cf:	eb 00                	jmp    2354d1 <sqrt+0x341>
            }
            ix1 = ix1 -% t1;
  2354d1:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  2354d4:	2b 45 b4             	sub    eax,DWORD PTR [rbp-0x4c]
  2354d7:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
            q1 += r;
  2354da:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  2354dd:	03 45 bc             	add    eax,DWORD PTR [rbp-0x44]
  2354e0:	0f 92 c1             	setb   cl
  2354e3:	89 85 34 ff ff ff    	mov    DWORD PTR [rbp-0xcc],eax
  2354e9:	88 8d 33 ff ff ff    	mov    BYTE PTR [rbp-0xcd],cl
  2354ef:	0f 82 a2 05 00 00    	jb     235a97 <sqrt+0x907>
  2354f5:	e9 ad 05 00 00       	jmp    235aa7 <sqrt+0x917>
        if (t < ix0 or (t == ix0 and t1 <= ix1)) {
  2354fa:	eb 00                	jmp    2354fc <sqrt+0x36c>
        }
        ix0 = ix0 +% ix0 +% (ix1 >> 31);
  2354fc:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  2354ff:	03 45 dc             	add    eax,DWORD PTR [rbp-0x24]
  235502:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
  235505:	c1 e9 1f             	shr    ecx,0x1f
  235508:	01 c8                	add    eax,ecx
  23550a:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
        ix1 = ix1 +% ix1;
  23550d:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  235510:	03 45 d8             	add    eax,DWORD PTR [rbp-0x28]
  235513:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
        r >>= 1;
  235516:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  235519:	c1 e8 01             	shr    eax,0x1
  23551c:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
    while (r != 0) {
  23551f:	e9 96 fe ff ff       	jmp    2353ba <sqrt+0x22a>
    }

    // rounding direction
    if (ix0 | ix1 != 0) {
  235524:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  235527:	0b 45 d8             	or     eax,DWORD PTR [rbp-0x28]
  23552a:	83 f8 00             	cmp    eax,0x0
  23552d:	0f 84 de 00 00 00    	je     235611 <sqrt+0x481>
  235533:	c5 fb 10 05 bd b6 fc 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffcb6bd]        # 200bf8 <__unnamed_187+0x8>
  23553a:	ff 
        var z = 1.0 - tiny; // raise inexact
  23553b:	c5 fb 11 45 a8       	vmovsd QWORD PTR [rbp-0x58],xmm0
        if (z >= 1.0) {
  235540:	c5 fb 10 4d a8       	vmovsd xmm1,QWORD PTR [rbp-0x58]
  235545:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  235549:	0f 82 be 00 00 00    	jb     23560d <sqrt+0x47d>
  23554f:	c5 fb 10 05 a1 b6 fc 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffcb6a1]        # 200bf8 <__unnamed_187+0x8>
  235556:	ff 
            z = 1.0 + tiny;
  235557:	c5 fb 11 45 a8       	vmovsd QWORD PTR [rbp-0x58],xmm0
            if (q1 == 0xFFFFFFFF) {
  23555c:	83 7d c8 ff          	cmp    DWORD PTR [rbp-0x38],0xffffffff
  235560:	75 27                	jne    235589 <sqrt+0x3f9>
                q1 = 0;
  235562:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [rbp-0x38],0x0
                q += 1;
  235569:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  23556c:	83 c0 01             	add    eax,0x1
  23556f:	0f 92 c1             	setb   cl
  235572:	89 85 2c ff ff ff    	mov    DWORD PTR [rbp-0xd4],eax
  235578:	88 8d 2b ff ff ff    	mov    BYTE PTR [rbp-0xd5],cl
  23557e:	0f 82 31 05 00 00    	jb     235ab5 <sqrt+0x925>
  235584:	e9 3c 05 00 00       	jmp    235ac5 <sqrt+0x935>
  235589:	c5 fb 10 05 67 b6 fc 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffcb667]        # 200bf8 <__unnamed_187+0x8>
  235590:	ff 
            } else if (z > 1.0) {
  235591:	c5 fb 10 4d a8       	vmovsd xmm1,QWORD PTR [rbp-0x58]
  235596:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  23559a:	76 48                	jbe    2355e4 <sqrt+0x454>
                if (q1 == 0xFFFFFFFE) {
  23559c:	83 7d c8 fe          	cmp    DWORD PTR [rbp-0x38],0xfffffffe
  2355a0:	75 20                	jne    2355c2 <sqrt+0x432>
                    q += 1;
  2355a2:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  2355a5:	83 c0 01             	add    eax,0x1
  2355a8:	0f 92 c1             	setb   cl
  2355ab:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
  2355b1:	88 8d 23 ff ff ff    	mov    BYTE PTR [rbp-0xdd],cl
  2355b7:	0f 82 16 05 00 00    	jb     235ad3 <sqrt+0x943>
  2355bd:	e9 21 05 00 00       	jmp    235ae3 <sqrt+0x953>
                if (q1 == 0xFFFFFFFE) {
  2355c2:	eb 00                	jmp    2355c4 <sqrt+0x434>
                }
                q1 += 2;
  2355c4:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  2355c7:	83 c0 02             	add    eax,0x2
  2355ca:	0f 92 c1             	setb   cl
  2355cd:	89 85 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],eax
  2355d3:	88 8d 1b ff ff ff    	mov    BYTE PTR [rbp-0xe5],cl
  2355d9:	0f 82 12 05 00 00    	jb     235af1 <sqrt+0x961>
  2355df:	e9 1d 05 00 00       	jmp    235b01 <sqrt+0x971>
            } else {
                q1 += q1 & 1;
  2355e4:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  2355e7:	8b 4d c8             	mov    ecx,DWORD PTR [rbp-0x38]
  2355ea:	83 e1 01             	and    ecx,0x1
  2355ed:	01 c8                	add    eax,ecx
  2355ef:	0f 92 c2             	setb   dl
  2355f2:	89 85 14 ff ff ff    	mov    DWORD PTR [rbp-0xec],eax
  2355f8:	88 95 13 ff ff ff    	mov    BYTE PTR [rbp-0xed],dl
  2355fe:	0f 82 0b 05 00 00    	jb     235b0f <sqrt+0x97f>
  235604:	e9 16 05 00 00       	jmp    235b1f <sqrt+0x98f>
            if (q1 == 0xFFFFFFFF) {
  235609:	eb 00                	jmp    23560b <sqrt+0x47b>
        if (z >= 1.0) {
  23560b:	eb 02                	jmp    23560f <sqrt+0x47f>
  23560d:	eb 00                	jmp    23560f <sqrt+0x47f>
    if (ix0 | ix1 != 0) {
  23560f:	eb 02                	jmp    235613 <sqrt+0x483>
  235611:	eb 00                	jmp    235613 <sqrt+0x483>
            }
        }
    }

    ix0 = (q >> 1) + 0x3FE00000;
  235613:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  235616:	c1 e8 01             	shr    eax,0x1
  235619:	05 00 00 e0 3f       	add    eax,0x3fe00000
  23561e:	0f 92 c1             	setb   cl
  235621:	89 85 0c ff ff ff    	mov    DWORD PTR [rbp-0xf4],eax
  235627:	88 8d 0b ff ff ff    	mov    BYTE PTR [rbp-0xf5],cl
  23562d:	0f 82 fa 04 00 00    	jb     235b2d <sqrt+0x99d>
  235633:	e9 05 05 00 00       	jmp    235b3d <sqrt+0x9ad>
    ix1 = q1 >> 1;
    if (q & 1 != 0) {
        ix1 |= 0x80000000;
  235638:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  23563b:	0d 00 00 00 80       	or     eax,0x80000000
  235640:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
    if (q & 1 != 0) {
  235643:	eb 02                	jmp    235647 <sqrt+0x4b7>
  235645:	eb 00                	jmp    235647 <sqrt+0x4b7>
    }

    // NOTE: musl here appears to rely on signed twos-complement wraparound. +% has the same
    // behaviour at least.
    var iix0 = @intCast(i32, ix0);
  235647:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  23564a:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
    iix0 = iix0 +% (m << 20);
  23564d:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
  235650:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
  235653:	c1 e1 14             	shl    ecx,0x14
  235656:	01 c8                	add    eax,ecx
  235658:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax

    const uz = (@intCast(u64, iix0) << 32) | ix1;
  23565b:	48 63 55 a4          	movsxd rdx,DWORD PTR [rbp-0x5c]
  23565f:	48 c1 e2 20          	shl    rdx,0x20
  235663:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  235666:	89 c6                	mov    esi,eax
  235668:	48 09 f2             	or     rdx,rsi
  23566b:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
    return @bitCast(f64, uz);
  23566f:	c5 fa 7e 45 98       	vmovq  xmm0,QWORD PTR [rbp-0x68]
  235674:	48 81 c4 60 01 00 00 	add    rsp,0x160
  23567b:	5d                   	pop    rbp
  23567c:	c3                   	ret    
  23567d:	b8 ff ff ff ff       	mov    eax,0xffffffff
  235682:	89 c1                	mov    ecx,eax
    var ix0 = @intCast(u32, u >> 32);
  235684:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
  235687:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
    var ix1 = @intCast(u32, u & 0xFFFFFFFF);
  23568a:	48 23 4d e0          	and    rcx,QWORD PTR [rbp-0x20]
  23568e:	89 ca                	mov    edx,ecx
  235690:	89 d6                	mov    esi,edx
  235692:	89 f7                	mov    edi,esi
  235694:	48 39 f9             	cmp    rcx,rdi
  235697:	89 95 04 ff ff ff    	mov    DWORD PTR [rbp-0xfc],edx
  23569d:	74 12                	je     2356b1 <sqrt+0x521>
  23569f:	eb 33                	jmp    2356d4 <sqrt+0x544>
  2356a1:	48 8d 3d 80 e7 00 00 	lea    rdi,[rip+0xe780]        # 243e28 <__unnamed_3>
  2356a8:	31 c0                	xor    eax,eax
  2356aa:	89 c6                	mov    esi,eax
    var ix0 = @intCast(u32, u >> 32);
  2356ac:	e8 df f1 ff ff       	call   234890 <panic>
    var ix1 = @intCast(u32, u & 0xFFFFFFFF);
  2356b1:	8b 85 04 ff ff ff    	mov    eax,DWORD PTR [rbp-0xfc]
  2356b7:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
    if (ix0 & 0x7FF00000 == 0x7FF00000) {
  2356ba:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  2356bd:	81 e1 00 00 f0 7f    	and    ecx,0x7ff00000
  2356c3:	81 f9 00 00 f0 7f    	cmp    ecx,0x7ff00000
  2356c9:	0f 84 12 fb ff ff    	je     2351e1 <sqrt+0x51>
  2356cf:	e9 25 fb ff ff       	jmp    2351f9 <sqrt+0x69>
  2356d4:	48 8d 3d 4d e7 00 00 	lea    rdi,[rip+0xe74d]        # 243e28 <__unnamed_3>
  2356db:	31 c0                	xor    eax,eax
  2356dd:	89 c6                	mov    esi,eax
    var ix1 = @intCast(u32, u & 0xFFFFFFFF);
  2356df:	e8 ac f1 ff ff       	call   234890 <panic>
  2356e4:	48 8d 3d 55 e7 00 00 	lea    rdi,[rip+0xe755]        # 243e40 <__unnamed_4>
  2356eb:	31 c0                	xor    eax,eax
  2356ed:	89 c6                	mov    esi,eax
            m -= 21;
  2356ef:	e8 9c f1 ff ff       	call   234890 <panic>
  2356f4:	8b 45 90             	mov    eax,DWORD PTR [rbp-0x70]
  2356f7:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
            ix0 |= ix1 >> 11;
  2356fa:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  2356fd:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
  235700:	c1 ea 0b             	shr    edx,0xb
  235703:	09 d1                	or     ecx,edx
  235705:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
            ix1 <<= 21;
  235708:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
  23570b:	c1 e1 15             	shl    ecx,0x15
  23570e:	89 4d d8             	mov    DWORD PTR [rbp-0x28],ecx
        while (ix0 == 0) {
  235711:	e9 34 fb ff ff       	jmp    23524a <sqrt+0xba>
  235716:	48 8d 3d 23 e7 00 00 	lea    rdi,[rip+0xe723]        # 243e40 <__unnamed_4>
  23571d:	31 c0                	xor    eax,eax
  23571f:	89 c6                	mov    esi,eax
        while (ix0 & 0x00100000 == 0) : (i += 1) {
  235721:	e8 6a f1 ff ff       	call   234890 <panic>
  235726:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
  235729:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
  23572c:	e9 40 fb ff ff       	jmp    235271 <sqrt+0xe1>
  235731:	48 8d 3d 08 e7 00 00 	lea    rdi,[rip+0xe708]        # 243e40 <__unnamed_4>
  235738:	31 c0                	xor    eax,eax
  23573a:	89 c6                	mov    esi,eax
        m -= @intCast(i32, i) - 1;
  23573c:	e8 4f f1 ff ff       	call   234890 <panic>
  235741:	8b 45 80             	mov    eax,DWORD PTR [rbp-0x80]
  235744:	8b 8d 7c ff ff ff    	mov    ecx,DWORD PTR [rbp-0x84]
  23574a:	29 c8                	sub    eax,ecx
  23574c:	0f 90 c2             	seto   dl
  23574f:	89 85 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],eax
  235755:	88 95 ff fe ff ff    	mov    BYTE PTR [rbp-0x101],dl
  23575b:	70 02                	jo     23575f <sqrt+0x5cf>
  23575d:	eb 10                	jmp    23576f <sqrt+0x5df>
  23575f:	48 8d 3d da e6 00 00 	lea    rdi,[rip+0xe6da]        # 243e40 <__unnamed_4>
  235766:	31 c0                	xor    eax,eax
  235768:	89 c6                	mov    esi,eax
  23576a:	e8 21 f1 ff ff       	call   234890 <panic>
  23576f:	b8 20 00 00 00       	mov    eax,0x20
  235774:	8b 8d 00 ff ff ff    	mov    ecx,DWORD PTR [rbp-0x100]
  23577a:	89 4d d4             	mov    DWORD PTR [rbp-0x2c],ecx
        ix0 |= ix1 >> @intCast(u5, 32 - i);
  23577d:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  235780:	8b 75 d8             	mov    esi,DWORD PTR [rbp-0x28]
  235783:	2b 45 d0             	sub    eax,DWORD PTR [rbp-0x30]
  235786:	40 0f 92 c7          	setb   dil
  23578a:	89 b5 f8 fe ff ff    	mov    DWORD PTR [rbp-0x108],esi
  235790:	89 95 f4 fe ff ff    	mov    DWORD PTR [rbp-0x10c],edx
  235796:	89 85 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],eax
  23579c:	40 88 bd ef fe ff ff 	mov    BYTE PTR [rbp-0x111],dil
  2357a3:	72 02                	jb     2357a7 <sqrt+0x617>
  2357a5:	eb 10                	jmp    2357b7 <sqrt+0x627>
  2357a7:	48 8d 3d 92 e6 00 00 	lea    rdi,[rip+0xe692]        # 243e40 <__unnamed_4>
  2357ae:	31 c0                	xor    eax,eax
  2357b0:	89 c6                	mov    esi,eax
  2357b2:	e8 d9 f0 ff ff       	call   234890 <panic>
  2357b7:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
  2357bd:	88 c1                	mov    cl,al
  2357bf:	83 e0 1f             	and    eax,0x1f
  2357c2:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
  2357c8:	39 c2                	cmp    edx,eax
  2357ca:	88 8d ee fe ff ff    	mov    BYTE PTR [rbp-0x112],cl
  2357d0:	75 42                	jne    235814 <sqrt+0x684>
  2357d2:	8a 8d ee fe ff ff    	mov    cl,BYTE PTR [rbp-0x112]
  2357d8:	88 c8                	mov    al,cl
  2357da:	8b 95 f8 fe ff ff    	mov    edx,DWORD PTR [rbp-0x108]
  2357e0:	c4 e2 7b f7 c2       	shrx   eax,edx,eax
  2357e5:	8b b5 f4 fe ff ff    	mov    esi,DWORD PTR [rbp-0x10c]
  2357eb:	09 c6                	or     esi,eax
  2357ed:	89 75 dc             	mov    DWORD PTR [rbp-0x24],esi
        ix1 <<= @intCast(u5, i);
  2357f0:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  2357f3:	8b 75 d0             	mov    esi,DWORD PTR [rbp-0x30]
  2357f6:	40 88 f7             	mov    dil,sil
  2357f9:	41 89 f0             	mov    r8d,esi
  2357fc:	41 83 e0 1f          	and    r8d,0x1f
  235800:	44 39 c6             	cmp    esi,r8d
  235803:	89 85 e8 fe ff ff    	mov    DWORD PTR [rbp-0x118],eax
  235809:	40 88 bd e7 fe ff ff 	mov    BYTE PTR [rbp-0x119],dil
  235810:	74 12                	je     235824 <sqrt+0x694>
  235812:	eb 2b                	jmp    23583f <sqrt+0x6af>
  235814:	48 8d 3d 0d e6 00 00 	lea    rdi,[rip+0xe60d]        # 243e28 <__unnamed_3>
  23581b:	31 c0                	xor    eax,eax
  23581d:	89 c6                	mov    esi,eax
        ix0 |= ix1 >> @intCast(u5, 32 - i);
  23581f:	e8 6c f0 ff ff       	call   234890 <panic>
        ix1 <<= @intCast(u5, i);
  235824:	8a 85 e7 fe ff ff    	mov    al,BYTE PTR [rbp-0x119]
  23582a:	24 1f                	and    al,0x1f
  23582c:	0f b6 c8             	movzx  ecx,al
  23582f:	8b 95 e8 fe ff ff    	mov    edx,DWORD PTR [rbp-0x118]
  235835:	d3 e2                	shl    edx,cl
  235837:	89 55 d8             	mov    DWORD PTR [rbp-0x28],edx
    if (m == 0) {
  23583a:	e9 89 fa ff ff       	jmp    2352c8 <sqrt+0x138>
  23583f:	48 8d 3d e2 e5 00 00 	lea    rdi,[rip+0xe5e2]        # 243e28 <__unnamed_3>
  235846:	31 c0                	xor    eax,eax
  235848:	89 c6                	mov    esi,eax
        ix1 <<= @intCast(u5, i);
  23584a:	e8 41 f0 ff ff       	call   234890 <panic>
  23584f:	48 8d 3d ea e5 00 00 	lea    rdi,[rip+0xe5ea]        # 243e40 <__unnamed_4>
  235856:	31 c0                	xor    eax,eax
  235858:	89 c6                	mov    esi,eax
    m -= 1023;
  23585a:	e8 31 f0 ff ff       	call   234890 <panic>
  23585f:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
  235865:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
    ix0 = (ix0 & 0x000FFFFF) | 0x00100000;
  235868:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  23586b:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
  235871:	81 c9 00 00 10 00    	or     ecx,0x100000
  235877:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
    if (m & 1 != 0) {
  23587a:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
  23587d:	83 e1 01             	and    ecx,0x1
  235880:	83 f9 00             	cmp    ecx,0x0
  235883:	0f 85 61 fa ff ff    	jne    2352ea <sqrt+0x15a>
  235889:	e9 8c fa ff ff       	jmp    23531a <sqrt+0x18a>
  23588e:	48 8d 3d ab e5 00 00 	lea    rdi,[rip+0xe5ab]        # 243e40 <__unnamed_4>
  235895:	31 c0                	xor    eax,eax
  235897:	89 c6                	mov    esi,eax
        ix0 += ix0 + (ix1 >> 31);
  235899:	e8 f2 ef ff ff       	call   234890 <panic>
  23589e:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
  2358a4:	8b 8d 68 ff ff ff    	mov    ecx,DWORD PTR [rbp-0x98]
  2358aa:	01 c8                	add    eax,ecx
  2358ac:	0f 92 c2             	setb   dl
  2358af:	89 85 e0 fe ff ff    	mov    DWORD PTR [rbp-0x120],eax
  2358b5:	88 95 df fe ff ff    	mov    BYTE PTR [rbp-0x121],dl
  2358bb:	72 02                	jb     2358bf <sqrt+0x72f>
  2358bd:	eb 10                	jmp    2358cf <sqrt+0x73f>
  2358bf:	48 8d 3d 7a e5 00 00 	lea    rdi,[rip+0xe57a]        # 243e40 <__unnamed_4>
  2358c6:	31 c0                	xor    eax,eax
  2358c8:	89 c6                	mov    esi,eax
  2358ca:	e8 c1 ef ff ff       	call   234890 <panic>
  2358cf:	8b 85 e0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x120]
  2358d5:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
        ix1 = ix1 +% ix1;
  2358d8:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
  2358db:	03 4d d8             	add    ecx,DWORD PTR [rbp-0x28]
  2358de:	89 4d d8             	mov    DWORD PTR [rbp-0x28],ecx
    if (m & 1 != 0) {
  2358e1:	e9 36 fa ff ff       	jmp    23531c <sqrt+0x18c>
  2358e6:	48 8d 3d 53 e5 00 00 	lea    rdi,[rip+0xe553]        # 243e40 <__unnamed_4>
  2358ed:	31 c0                	xor    eax,eax
  2358ef:	89 c6                	mov    esi,eax
    ix0 += ix0 + (ix1 >> 31);
  2358f1:	e8 9a ef ff ff       	call   234890 <panic>
  2358f6:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa0]
  2358fc:	8b 8d 5c ff ff ff    	mov    ecx,DWORD PTR [rbp-0xa4]
  235902:	01 c8                	add    eax,ecx
  235904:	0f 92 c2             	setb   dl
  235907:	89 85 d8 fe ff ff    	mov    DWORD PTR [rbp-0x128],eax
  23590d:	88 95 d7 fe ff ff    	mov    BYTE PTR [rbp-0x129],dl
  235913:	72 02                	jb     235917 <sqrt+0x787>
  235915:	eb 10                	jmp    235927 <sqrt+0x797>
  235917:	48 8d 3d 22 e5 00 00 	lea    rdi,[rip+0xe522]        # 243e40 <__unnamed_4>
  23591e:	31 c0                	xor    eax,eax
  235920:	89 c6                	mov    esi,eax
  235922:	e8 69 ef ff ff       	call   234890 <panic>
  235927:	b8 aa 00 00 00       	mov    eax,0xaa
  23592c:	b9 04 00 00 00       	mov    ecx,0x4
  235931:	89 ca                	mov    edx,ecx
  235933:	48 8d 75 b4          	lea    rsi,[rbp-0x4c]
  235937:	48 8d 7d b8          	lea    rdi,[rbp-0x48]
  23593b:	8b 8d d8 fe ff ff    	mov    ecx,DWORD PTR [rbp-0x128]
  235941:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
    ix1 = ix1 +% ix1;
  235944:	44 8b 45 d8          	mov    r8d,DWORD PTR [rbp-0x28]
  235948:	44 03 45 d8          	add    r8d,DWORD PTR [rbp-0x28]
  23594c:	44 89 45 d8          	mov    DWORD PTR [rbp-0x28],r8d
    var q: u32 = 0;
  235950:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
    var q1: u32 = 0;
  235957:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [rbp-0x38],0x0
    var s0: u32 = 0;
  23595e:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x0
    var s1: u32 = 0;
  235965:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [rbp-0x40],0x0
    var r: u32 = 0x00200000;
  23596c:	c7 45 bc 00 00 20 00 	mov    DWORD PTR [rbp-0x44],0x200000
    var t: u32 = undefined;
  235973:	48 89 b5 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rsi
  23597a:	89 c6                	mov    esi,eax
  23597c:	48 89 95 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rdx
  235983:	89 85 bc fe ff ff    	mov    DWORD PTR [rbp-0x144],eax
  235989:	e8 22 ef ff ff       	call   2348b0 <memset>
    var t1: u32 = undefined;
  23598e:	48 8b 95 c8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x138]
  235995:	48 89 d7             	mov    rdi,rdx
  235998:	8b b5 bc fe ff ff    	mov    esi,DWORD PTR [rbp-0x144]
  23599e:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  2359a5:	e8 06 ef ff ff       	call   2348b0 <memset>
    while (r != 0) {
  2359aa:	e9 a6 f9 ff ff       	jmp    235355 <sqrt+0x1c5>
  2359af:	48 8d 3d 8a e4 00 00 	lea    rdi,[rip+0xe48a]        # 243e40 <__unnamed_4>
  2359b6:	31 c0                	xor    eax,eax
  2359b8:	89 c6                	mov    esi,eax
            s0 = t + r;
  2359ba:	e8 d1 ee ff ff       	call   234890 <panic>
  2359bf:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
  2359c5:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
            ix0 -= t;
  2359c8:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  2359cb:	2b 4d b8             	sub    ecx,DWORD PTR [rbp-0x48]
  2359ce:	0f 92 c2             	setb   dl
  2359d1:	89 8d b8 fe ff ff    	mov    DWORD PTR [rbp-0x148],ecx
  2359d7:	88 95 b7 fe ff ff    	mov    BYTE PTR [rbp-0x149],dl
  2359dd:	72 02                	jb     2359e1 <sqrt+0x851>
  2359df:	eb 10                	jmp    2359f1 <sqrt+0x861>
  2359e1:	48 8d 3d 58 e4 00 00 	lea    rdi,[rip+0xe458]        # 243e40 <__unnamed_4>
  2359e8:	31 c0                	xor    eax,eax
  2359ea:	89 c6                	mov    esi,eax
  2359ec:	e8 9f ee ff ff       	call   234890 <panic>
  2359f1:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
  2359f7:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
            q += r;
  2359fa:	8b 4d cc             	mov    ecx,DWORD PTR [rbp-0x34]
  2359fd:	03 4d bc             	add    ecx,DWORD PTR [rbp-0x44]
  235a00:	0f 92 c2             	setb   dl
  235a03:	89 8d b0 fe ff ff    	mov    DWORD PTR [rbp-0x150],ecx
  235a09:	88 95 af fe ff ff    	mov    BYTE PTR [rbp-0x151],dl
  235a0f:	72 02                	jb     235a13 <sqrt+0x883>
  235a11:	eb 10                	jmp    235a23 <sqrt+0x893>
  235a13:	48 8d 3d 26 e4 00 00 	lea    rdi,[rip+0xe426]        # 243e40 <__unnamed_4>
  235a1a:	31 c0                	xor    eax,eax
  235a1c:	89 c6                	mov    esi,eax
  235a1e:	e8 6d ee ff ff       	call   234890 <panic>
  235a23:	8b 85 b0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x150]
  235a29:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
        if (t <= ix0) {
  235a2c:	e9 5d f9 ff ff       	jmp    23538e <sqrt+0x1fe>
  235a31:	48 8d 3d 08 e4 00 00 	lea    rdi,[rip+0xe408]        # 243e40 <__unnamed_4>
  235a38:	31 c0                	xor    eax,eax
  235a3a:	89 c6                	mov    esi,eax
                s0 += 1;
  235a3c:	e8 4f ee ff ff       	call   234890 <panic>
  235a41:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [rbp-0xb4]
  235a47:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
            if (t1 & sign == sign and s1 & sign == 0) {
  235a4a:	e9 40 fa ff ff       	jmp    23548f <sqrt+0x2ff>
  235a4f:	48 8d 3d ea e3 00 00 	lea    rdi,[rip+0xe3ea]        # 243e40 <__unnamed_4>
  235a56:	31 c0                	xor    eax,eax
  235a58:	89 c6                	mov    esi,eax
            ix0 -= t;
  235a5a:	e8 31 ee ff ff       	call   234890 <panic>
  235a5f:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
  235a65:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
            if (ix1 < t1) {
  235a68:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
  235a6b:	3b 4d b4             	cmp    ecx,DWORD PTR [rbp-0x4c]
  235a6e:	0f 82 3b fa ff ff    	jb     2354af <sqrt+0x31f>
  235a74:	e9 56 fa ff ff       	jmp    2354cf <sqrt+0x33f>
  235a79:	48 8d 3d c0 e3 00 00 	lea    rdi,[rip+0xe3c0]        # 243e40 <__unnamed_4>
  235a80:	31 c0                	xor    eax,eax
  235a82:	89 c6                	mov    esi,eax
                ix0 -= 1;
  235a84:	e8 07 ee ff ff       	call   234890 <panic>
  235a89:	8b 85 3c ff ff ff    	mov    eax,DWORD PTR [rbp-0xc4]
  235a8f:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
            if (ix1 < t1) {
  235a92:	e9 3a fa ff ff       	jmp    2354d1 <sqrt+0x341>
  235a97:	48 8d 3d a2 e3 00 00 	lea    rdi,[rip+0xe3a2]        # 243e40 <__unnamed_4>
  235a9e:	31 c0                	xor    eax,eax
  235aa0:	89 c6                	mov    esi,eax
            q1 += r;
  235aa2:	e8 e9 ed ff ff       	call   234890 <panic>
  235aa7:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
  235aad:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
        if (t < ix0 or (t == ix0 and t1 <= ix1)) {
  235ab0:	e9 47 fa ff ff       	jmp    2354fc <sqrt+0x36c>
  235ab5:	48 8d 3d 84 e3 00 00 	lea    rdi,[rip+0xe384]        # 243e40 <__unnamed_4>
  235abc:	31 c0                	xor    eax,eax
  235abe:	89 c6                	mov    esi,eax
                q += 1;
  235ac0:	e8 cb ed ff ff       	call   234890 <panic>
  235ac5:	8b 85 2c ff ff ff    	mov    eax,DWORD PTR [rbp-0xd4]
  235acb:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
            if (q1 == 0xFFFFFFFF) {
  235ace:	e9 38 fb ff ff       	jmp    23560b <sqrt+0x47b>
  235ad3:	48 8d 3d 66 e3 00 00 	lea    rdi,[rip+0xe366]        # 243e40 <__unnamed_4>
  235ada:	31 c0                	xor    eax,eax
  235adc:	89 c6                	mov    esi,eax
                    q += 1;
  235ade:	e8 ad ed ff ff       	call   234890 <panic>
  235ae3:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
  235ae9:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
                if (q1 == 0xFFFFFFFE) {
  235aec:	e9 d3 fa ff ff       	jmp    2355c4 <sqrt+0x434>
  235af1:	48 8d 3d 48 e3 00 00 	lea    rdi,[rip+0xe348]        # 243e40 <__unnamed_4>
  235af8:	31 c0                	xor    eax,eax
  235afa:	89 c6                	mov    esi,eax
                q1 += 2;
  235afc:	e8 8f ed ff ff       	call   234890 <panic>
  235b01:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
  235b07:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
            } else if (z > 1.0) {
  235b0a:	e9 fa fa ff ff       	jmp    235609 <sqrt+0x479>
  235b0f:	48 8d 3d 2a e3 00 00 	lea    rdi,[rip+0xe32a]        # 243e40 <__unnamed_4>
  235b16:	31 c0                	xor    eax,eax
  235b18:	89 c6                	mov    esi,eax
                q1 += q1 & 1;
  235b1a:	e8 71 ed ff ff       	call   234890 <panic>
  235b1f:	8b 85 14 ff ff ff    	mov    eax,DWORD PTR [rbp-0xec]
  235b25:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
            } else if (z > 1.0) {
  235b28:	e9 dc fa ff ff       	jmp    235609 <sqrt+0x479>
  235b2d:	48 8d 3d 0c e3 00 00 	lea    rdi,[rip+0xe30c]        # 243e40 <__unnamed_4>
  235b34:	31 c0                	xor    eax,eax
  235b36:	89 c6                	mov    esi,eax
    ix0 = (q >> 1) + 0x3FE00000;
  235b38:	e8 53 ed ff ff       	call   234890 <panic>
  235b3d:	8b 85 0c ff ff ff    	mov    eax,DWORD PTR [rbp-0xf4]
  235b43:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
    ix1 = q1 >> 1;
  235b46:	8b 4d c8             	mov    ecx,DWORD PTR [rbp-0x38]
  235b49:	c1 e9 01             	shr    ecx,0x1
  235b4c:	89 4d d8             	mov    DWORD PTR [rbp-0x28],ecx
    if (q & 1 != 0) {
  235b4f:	8b 4d cc             	mov    ecx,DWORD PTR [rbp-0x34]
  235b52:	83 e1 01             	and    ecx,0x1
  235b55:	83 f9 00             	cmp    ecx,0x0
  235b58:	0f 85 da fa ff ff    	jne    235638 <sqrt+0x4a8>
  235b5e:	e9 e2 fa ff ff       	jmp    235645 <sqrt+0x4b5>
  235b63:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  235b6a:	84 00 00 00 00 00 

0000000000235b70 <snan>:
    };
}

// Note: A signalling nan is identical to a standard right now by may have a different bit
// representation in the future when required.
pub fn snan(comptime T: type) T {
  235b70:	55                   	push   rbp
  235b71:	48 89 e5             	mov    rbp,rsp
  235b74:	c5 fb 10 05 f4 b0 fc 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffcb0f4]        # 200c70 <__unnamed_182+0x10>
  235b7b:	ff 
    return switch (T) {
  235b7c:	5d                   	pop    rbp
  235b7d:	c3                   	ret    
  235b7e:	66 90                	xchg   ax,ax

0000000000235b80 <sqrtf>:
}

export fn sqrtf(x: f32) f32 {
  235b80:	55                   	push   rbp
  235b81:	48 89 e5             	mov    rbp,rsp
  235b84:	48 81 ec b0 00 00 00 	sub    rsp,0xb0
  235b8b:	c5 fa 10 0d 7d 4d fd 	vmovss xmm1,DWORD PTR [rip+0xfffffffffffd4d7d]        # 20a910 <__unnamed_1443+0xf>
  235b92:	ff 
  235b93:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
    const tiny: f32 = 1.0e-30;
  235b98:	c5 fa 11 4d f8       	vmovss DWORD PTR [rbp-0x8],xmm1
    const sign: i32 = @bitCast(i32, u32(0x80000000));
  235b9d:	c7 45 f4 00 00 00 80 	mov    DWORD PTR [rbp-0xc],0x80000000
    var ix: i32 = @bitCast(i32, x);
  235ba4:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  235ba9:	c5 f9 7e c0          	vmovd  eax,xmm0
  235bad:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax

    if ((ix & 0x7F800000) == 0x7F800000) {
  235bb0:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  235bb3:	25 00 00 80 7f       	and    eax,0x7f800000
  235bb8:	3d 00 00 80 7f       	cmp    eax,0x7f800000
  235bbd:	75 18                	jne    235bd7 <sqrtf+0x57>
        return x * x + x; // sqrt(nan) = nan, sqrt(+inf) = +inf, sqrt(-inf) = snan
  235bbf:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  235bc4:	c5 fa 59 45 fc       	vmulss xmm0,xmm0,DWORD PTR [rbp-0x4]
  235bc9:	c5 fa 58 45 fc       	vaddss xmm0,xmm0,DWORD PTR [rbp-0x4]
  235bce:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  235bd5:	5d                   	pop    rbp
  235bd6:	c3                   	ret    
    if ((ix & 0x7F800000) == 0x7F800000) {
  235bd7:	eb 00                	jmp    235bd9 <sqrtf+0x59>
    }

    // zero
    if (ix <= 0) {
  235bd9:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
  235bdd:	7f 35                	jg     235c14 <sqrtf+0x94>
        if (ix & ~sign == 0) {
  235bdf:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  235be2:	25 ff ff ff 7f       	and    eax,0x7fffffff
  235be7:	83 f8 00             	cmp    eax,0x0
  235bea:	75 0e                	jne    235bfa <sqrtf+0x7a>
            return x; // sqrt (+-0) = +-0
  235bec:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  235bf1:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  235bf8:	5d                   	pop    rbp
  235bf9:	c3                   	ret    
        if (ix & ~sign == 0) {
  235bfa:	eb 00                	jmp    235bfc <sqrtf+0x7c>
        }
        if (ix < 0) {
  235bfc:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
  235c00:	7d 0e                	jge    235c10 <sqrtf+0x90>
            return math.snan(f32);
  235c02:	e8 19 04 00 00       	call   236020 <snan.4>
  235c07:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  235c0e:	5d                   	pop    rbp
  235c0f:	c3                   	ret    
        if (ix < 0) {
  235c10:	eb 00                	jmp    235c12 <sqrtf+0x92>
    if (ix <= 0) {
  235c12:	eb 02                	jmp    235c16 <sqrtf+0x96>
  235c14:	eb 00                	jmp    235c16 <sqrtf+0x96>
        }
    }

    // normalize
    var m = ix >> 23;
  235c16:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  235c19:	c1 f8 17             	sar    eax,0x17
  235c1c:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    if (m == 0) {
  235c1f:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
  235c23:	75 55                	jne    235c7a <sqrtf+0xfa>
        // subnormal
        var i: i32 = 0;
  235c25:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
        while (ix & 0x00800000 == 0) : (i += 1) {
  235c2c:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  235c2f:	25 00 00 80 00       	and    eax,0x800000
  235c34:	83 f8 00             	cmp    eax,0x0
  235c37:	75 22                	jne    235c5b <sqrtf+0xdb>
            ix <<= 1;
  235c39:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  235c3c:	c1 e0 01             	shl    eax,0x1
  235c3f:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
        while (ix & 0x00800000 == 0) : (i += 1) {
  235c42:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  235c45:	ff c0                	inc    eax
  235c47:	0f 90 c1             	seto   cl
  235c4a:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
  235c4d:	88 4d cf             	mov    BYTE PTR [rbp-0x31],cl
  235c50:	0f 80 7a 01 00 00    	jo     235dd0 <sqrtf+0x250>
  235c56:	e9 85 01 00 00       	jmp    235de0 <sqrtf+0x260>
        }
        m -= i - 1;
  235c5b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  235c5e:	8b 4d e8             	mov    ecx,DWORD PTR [rbp-0x18]
  235c61:	ff c9                	dec    ecx
  235c63:	0f 90 c2             	seto   dl
  235c66:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
  235c69:	89 4d c4             	mov    DWORD PTR [rbp-0x3c],ecx
  235c6c:	88 55 c3             	mov    BYTE PTR [rbp-0x3d],dl
  235c6f:	0f 80 76 01 00 00    	jo     235deb <sqrtf+0x26b>
  235c75:	e9 81 01 00 00       	jmp    235dfb <sqrtf+0x27b>
    if (m == 0) {
  235c7a:	eb 00                	jmp    235c7c <sqrtf+0xfc>
    }

    m -= 127; // unbias exponent
  235c7c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  235c7f:	83 e8 7f             	sub    eax,0x7f
  235c82:	0f 90 c1             	seto   cl
  235c85:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
  235c88:	88 4d bb             	mov    BYTE PTR [rbp-0x45],cl
  235c8b:	0f 80 a3 01 00 00    	jo     235e34 <sqrtf+0x2b4>
  235c91:	e9 ae 01 00 00       	jmp    235e44 <sqrtf+0x2c4>
    ix = (ix & 0x007FFFFF) | 0x00800000;

    if (m & 1 != 0) { // odd m, double x to even
        ix += ix;
  235c96:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  235c99:	03 45 f0             	add    eax,DWORD PTR [rbp-0x10]
  235c9c:	0f 90 c1             	seto   cl
  235c9f:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
  235ca2:	88 4d b3             	mov    BYTE PTR [rbp-0x4d],cl
  235ca5:	0f 80 c5 01 00 00    	jo     235e70 <sqrtf+0x2f0>
  235cab:	e9 d0 01 00 00       	jmp    235e80 <sqrtf+0x300>
    if (m & 1 != 0) { // odd m, double x to even
  235cb0:	eb 00                	jmp    235cb2 <sqrtf+0x132>
    }

    m >>= 1; // m = [m / 2]
  235cb2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  235cb5:	c1 f8 01             	sar    eax,0x1
  235cb8:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax

    // sqrt(x) bit by bit
    ix += ix;
  235cbb:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  235cbe:	03 45 f0             	add    eax,DWORD PTR [rbp-0x10]
  235cc1:	0f 90 c1             	seto   cl
  235cc4:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
  235cc7:	88 4d ab             	mov    BYTE PTR [rbp-0x55],cl
  235cca:	0f 80 bb 01 00 00    	jo     235e8b <sqrtf+0x30b>
  235cd0:	e9 c6 01 00 00       	jmp    235e9b <sqrtf+0x31b>
    var q: i32 = 0; // q = sqrt(x)
    var s: i32 = 0;
    var r: i32 = 0x01000000; // r = moving bit right -> left

    while (r != 0) {
  235cd5:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
  235cd9:	74 50                	je     235d2b <sqrtf+0x1ab>
        const t = s + r;
  235cdb:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  235cde:	03 45 dc             	add    eax,DWORD PTR [rbp-0x24]
  235ce1:	0f 90 c1             	seto   cl
  235ce4:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
  235ce7:	88 4d a3             	mov    BYTE PTR [rbp-0x5d],cl
  235cea:	0f 80 cb 01 00 00    	jo     235ebb <sqrtf+0x33b>
  235cf0:	e9 d6 01 00 00       	jmp    235ecb <sqrtf+0x34b>
        if (t <= ix) {
            s = t + r;
  235cf5:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  235cf8:	03 45 dc             	add    eax,DWORD PTR [rbp-0x24]
  235cfb:	0f 90 c1             	seto   cl
  235cfe:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
  235d01:	88 4d 9b             	mov    BYTE PTR [rbp-0x65],cl
  235d04:	0f 80 d8 01 00 00    	jo     235ee2 <sqrtf+0x362>
  235d0a:	e9 e3 01 00 00       	jmp    235ef2 <sqrtf+0x372>
        if (t <= ix) {
  235d0f:	eb 00                	jmp    235d11 <sqrtf+0x191>
            ix -= t;
            q += r;
        }
        ix += ix;
  235d11:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  235d14:	03 45 f0             	add    eax,DWORD PTR [rbp-0x10]
  235d17:	0f 90 c1             	seto   cl
  235d1a:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
  235d1d:	88 4d 93             	mov    BYTE PTR [rbp-0x6d],cl
  235d20:	0f 80 3b 02 00 00    	jo     235f61 <sqrtf+0x3e1>
  235d26:	e9 46 02 00 00       	jmp    235f71 <sqrtf+0x3f1>
        r >>= 1;
    }

    // floating add to find rounding direction
    if (ix != 0) {
  235d2b:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
  235d2f:	74 78                	je     235da9 <sqrtf+0x229>
  235d31:	c5 fa 10 05 db 4b fd 	vmovss xmm0,DWORD PTR [rip+0xfffffffffffd4bdb]        # 20a914 <__unnamed_1443+0x13>
  235d38:	ff 
        var z = 1.0 - tiny; // inexact
  235d39:	c5 fa 11 45 d4       	vmovss DWORD PTR [rbp-0x2c],xmm0
        if (z >= 1.0) {
  235d3e:	c5 fa 10 4d d4       	vmovss xmm1,DWORD PTR [rbp-0x2c]
  235d43:	c5 f8 2e c8          	vucomiss xmm1,xmm0
  235d47:	72 5c                	jb     235da5 <sqrtf+0x225>
  235d49:	c5 fa 10 05 c3 4b fd 	vmovss xmm0,DWORD PTR [rip+0xfffffffffffd4bc3]        # 20a914 <__unnamed_1443+0x13>
  235d50:	ff 
            z = 1.0 + tiny;
  235d51:	c5 fa 11 45 d4       	vmovss DWORD PTR [rbp-0x2c],xmm0
            if (z > 1.0) {
  235d56:	c5 fa 10 4d d4       	vmovss xmm1,DWORD PTR [rbp-0x2c]
  235d5b:	c5 f8 2e c8          	vucomiss xmm1,xmm0
  235d5f:	76 1a                	jbe    235d7b <sqrtf+0x1fb>
                q += 2;
  235d61:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  235d64:	83 c0 02             	add    eax,0x2
  235d67:	0f 90 c1             	seto   cl
  235d6a:	89 45 8c             	mov    DWORD PTR [rbp-0x74],eax
  235d6d:	88 4d 8b             	mov    BYTE PTR [rbp-0x75],cl
  235d70:	0f 80 0f 02 00 00    	jo     235f85 <sqrtf+0x405>
  235d76:	e9 1a 02 00 00       	jmp    235f95 <sqrtf+0x415>
            } else {
                if (q & 1 != 0) {
  235d7b:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  235d7e:	83 e0 01             	and    eax,0x1
  235d81:	83 f8 00             	cmp    eax,0x0
  235d84:	74 19                	je     235d9f <sqrtf+0x21f>
                    q += 1;
  235d86:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  235d89:	ff c0                	inc    eax
  235d8b:	0f 90 c1             	seto   cl
  235d8e:	89 45 84             	mov    DWORD PTR [rbp-0x7c],eax
  235d91:	88 4d 83             	mov    BYTE PTR [rbp-0x7d],cl
  235d94:	0f 80 06 02 00 00    	jo     235fa0 <sqrtf+0x420>
  235d9a:	e9 11 02 00 00       	jmp    235fb0 <sqrtf+0x430>
                if (q & 1 != 0) {
  235d9f:	eb 00                	jmp    235da1 <sqrtf+0x221>
            if (z > 1.0) {
  235da1:	eb 00                	jmp    235da3 <sqrtf+0x223>
        if (z >= 1.0) {
  235da3:	eb 02                	jmp    235da7 <sqrtf+0x227>
  235da5:	eb 00                	jmp    235da7 <sqrtf+0x227>
    if (ix != 0) {
  235da7:	eb 02                	jmp    235dab <sqrtf+0x22b>
  235da9:	eb 00                	jmp    235dab <sqrtf+0x22b>
                }
            }
        }
    }

    ix = (q >> 1) + 0x3f000000;
  235dab:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  235dae:	c1 f8 01             	sar    eax,0x1
  235db1:	05 00 00 00 3f       	add    eax,0x3f000000
  235db6:	0f 90 c1             	seto   cl
  235db9:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
  235dbf:	88 8d 7b ff ff ff    	mov    BYTE PTR [rbp-0x85],cl
  235dc5:	0f 80 f0 01 00 00    	jo     235fbb <sqrtf+0x43b>
  235dcb:	e9 fb 01 00 00       	jmp    235fcb <sqrtf+0x44b>
  235dd0:	48 8d 3d 69 e0 00 00 	lea    rdi,[rip+0xe069]        # 243e40 <__unnamed_4>
  235dd7:	31 c0                	xor    eax,eax
  235dd9:	89 c6                	mov    esi,eax
        while (ix & 0x00800000 == 0) : (i += 1) {
  235ddb:	e8 b0 ea ff ff       	call   234890 <panic>
  235de0:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
  235de3:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
  235de6:	e9 41 fe ff ff       	jmp    235c2c <sqrtf+0xac>
  235deb:	48 8d 3d 4e e0 00 00 	lea    rdi,[rip+0xe04e]        # 243e40 <__unnamed_4>
  235df2:	31 c0                	xor    eax,eax
  235df4:	89 c6                	mov    esi,eax
        m -= i - 1;
  235df6:	e8 95 ea ff ff       	call   234890 <panic>
  235dfb:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  235dfe:	8b 4d c4             	mov    ecx,DWORD PTR [rbp-0x3c]
  235e01:	29 c8                	sub    eax,ecx
  235e03:	0f 90 c2             	seto   dl
  235e06:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
  235e0c:	88 95 73 ff ff ff    	mov    BYTE PTR [rbp-0x8d],dl
  235e12:	70 02                	jo     235e16 <sqrtf+0x296>
  235e14:	eb 10                	jmp    235e26 <sqrtf+0x2a6>
  235e16:	48 8d 3d 23 e0 00 00 	lea    rdi,[rip+0xe023]        # 243e40 <__unnamed_4>
  235e1d:	31 c0                	xor    eax,eax
  235e1f:	89 c6                	mov    esi,eax
  235e21:	e8 6a ea ff ff       	call   234890 <panic>
  235e26:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
  235e2c:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    if (m == 0) {
  235e2f:	e9 48 fe ff ff       	jmp    235c7c <sqrtf+0xfc>
  235e34:	48 8d 3d 05 e0 00 00 	lea    rdi,[rip+0xe005]        # 243e40 <__unnamed_4>
  235e3b:	31 c0                	xor    eax,eax
  235e3d:	89 c6                	mov    esi,eax
    m -= 127; // unbias exponent
  235e3f:	e8 4c ea ff ff       	call   234890 <panic>
  235e44:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  235e47:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    ix = (ix & 0x007FFFFF) | 0x00800000;
  235e4a:	8b 4d f0             	mov    ecx,DWORD PTR [rbp-0x10]
  235e4d:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
  235e53:	81 c9 00 00 80 00    	or     ecx,0x800000
  235e59:	89 4d f0             	mov    DWORD PTR [rbp-0x10],ecx
    if (m & 1 != 0) { // odd m, double x to even
  235e5c:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
  235e5f:	83 e1 01             	and    ecx,0x1
  235e62:	83 f9 00             	cmp    ecx,0x0
  235e65:	0f 85 2b fe ff ff    	jne    235c96 <sqrtf+0x116>
  235e6b:	e9 40 fe ff ff       	jmp    235cb0 <sqrtf+0x130>
  235e70:	48 8d 3d c9 df 00 00 	lea    rdi,[rip+0xdfc9]        # 243e40 <__unnamed_4>
  235e77:	31 c0                	xor    eax,eax
  235e79:	89 c6                	mov    esi,eax
        ix += ix;
  235e7b:	e8 10 ea ff ff       	call   234890 <panic>
  235e80:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
  235e83:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    if (m & 1 != 0) { // odd m, double x to even
  235e86:	e9 27 fe ff ff       	jmp    235cb2 <sqrtf+0x132>
  235e8b:	48 8d 3d ae df 00 00 	lea    rdi,[rip+0xdfae]        # 243e40 <__unnamed_4>
  235e92:	31 c0                	xor    eax,eax
  235e94:	89 c6                	mov    esi,eax
    ix += ix;
  235e96:	e8 f5 e9 ff ff       	call   234890 <panic>
  235e9b:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
  235e9e:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    var q: i32 = 0; // q = sqrt(x)
  235ea1:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
    var s: i32 = 0;
  235ea8:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
    var r: i32 = 0x01000000; // r = moving bit right -> left
  235eaf:	c7 45 dc 00 00 00 01 	mov    DWORD PTR [rbp-0x24],0x1000000
    while (r != 0) {
  235eb6:	e9 1a fe ff ff       	jmp    235cd5 <sqrtf+0x155>
  235ebb:	48 8d 3d 7e df 00 00 	lea    rdi,[rip+0xdf7e]        # 243e40 <__unnamed_4>
  235ec2:	31 c0                	xor    eax,eax
  235ec4:	89 c6                	mov    esi,eax
        const t = s + r;
  235ec6:	e8 c5 e9 ff ff       	call   234890 <panic>
  235ecb:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
  235ece:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
        if (t <= ix) {
  235ed1:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
  235ed4:	3b 4d f0             	cmp    ecx,DWORD PTR [rbp-0x10]
  235ed7:	0f 8e 18 fe ff ff    	jle    235cf5 <sqrtf+0x175>
  235edd:	e9 2d fe ff ff       	jmp    235d0f <sqrtf+0x18f>
  235ee2:	48 8d 3d 57 df 00 00 	lea    rdi,[rip+0xdf57]        # 243e40 <__unnamed_4>
  235ee9:	31 c0                	xor    eax,eax
  235eeb:	89 c6                	mov    esi,eax
            s = t + r;
  235eed:	e8 9e e9 ff ff       	call   234890 <panic>
  235ef2:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
  235ef5:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
            ix -= t;
  235ef8:	8b 4d f0             	mov    ecx,DWORD PTR [rbp-0x10]
  235efb:	2b 4d d8             	sub    ecx,DWORD PTR [rbp-0x28]
  235efe:	0f 90 c2             	seto   dl
  235f01:	89 8d 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],ecx
  235f07:	88 95 6b ff ff ff    	mov    BYTE PTR [rbp-0x95],dl
  235f0d:	70 02                	jo     235f11 <sqrtf+0x391>
  235f0f:	eb 10                	jmp    235f21 <sqrtf+0x3a1>
  235f11:	48 8d 3d 28 df 00 00 	lea    rdi,[rip+0xdf28]        # 243e40 <__unnamed_4>
  235f18:	31 c0                	xor    eax,eax
  235f1a:	89 c6                	mov    esi,eax
  235f1c:	e8 6f e9 ff ff       	call   234890 <panic>
  235f21:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
  235f27:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
            q += r;
  235f2a:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
  235f2d:	03 4d dc             	add    ecx,DWORD PTR [rbp-0x24]
  235f30:	0f 90 c2             	seto   dl
  235f33:	89 8d 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],ecx
  235f39:	88 95 63 ff ff ff    	mov    BYTE PTR [rbp-0x9d],dl
  235f3f:	70 02                	jo     235f43 <sqrtf+0x3c3>
  235f41:	eb 10                	jmp    235f53 <sqrtf+0x3d3>
  235f43:	48 8d 3d f6 de 00 00 	lea    rdi,[rip+0xdef6]        # 243e40 <__unnamed_4>
  235f4a:	31 c0                	xor    eax,eax
  235f4c:	89 c6                	mov    esi,eax
  235f4e:	e8 3d e9 ff ff       	call   234890 <panic>
  235f53:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
  235f59:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
        if (t <= ix) {
  235f5c:	e9 b0 fd ff ff       	jmp    235d11 <sqrtf+0x191>
  235f61:	48 8d 3d d8 de 00 00 	lea    rdi,[rip+0xded8]        # 243e40 <__unnamed_4>
  235f68:	31 c0                	xor    eax,eax
  235f6a:	89 c6                	mov    esi,eax
        ix += ix;
  235f6c:	e8 1f e9 ff ff       	call   234890 <panic>
  235f71:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
  235f74:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
        r >>= 1;
  235f77:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  235f7a:	c1 f9 01             	sar    ecx,0x1
  235f7d:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
    while (r != 0) {
  235f80:	e9 50 fd ff ff       	jmp    235cd5 <sqrtf+0x155>
  235f85:	48 8d 3d b4 de 00 00 	lea    rdi,[rip+0xdeb4]        # 243e40 <__unnamed_4>
  235f8c:	31 c0                	xor    eax,eax
  235f8e:	89 c6                	mov    esi,eax
                q += 2;
  235f90:	e8 fb e8 ff ff       	call   234890 <panic>
  235f95:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
  235f98:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
            if (z > 1.0) {
  235f9b:	e9 03 fe ff ff       	jmp    235da3 <sqrtf+0x223>
  235fa0:	48 8d 3d 99 de 00 00 	lea    rdi,[rip+0xde99]        # 243e40 <__unnamed_4>
  235fa7:	31 c0                	xor    eax,eax
  235fa9:	89 c6                	mov    esi,eax
                    q += 1;
  235fab:	e8 e0 e8 ff ff       	call   234890 <panic>
  235fb0:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
  235fb3:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
                if (q & 1 != 0) {
  235fb6:	e9 e6 fd ff ff       	jmp    235da1 <sqrtf+0x221>
  235fbb:	48 8d 3d 7e de 00 00 	lea    rdi,[rip+0xde7e]        # 243e40 <__unnamed_4>
  235fc2:	31 c0                	xor    eax,eax
  235fc4:	89 c6                	mov    esi,eax
    ix = (q >> 1) + 0x3f000000;
  235fc6:	e8 c5 e8 ff ff       	call   234890 <panic>
  235fcb:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
  235fd1:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    ix += m << 23;
  235fd4:	8b 4d f0             	mov    ecx,DWORD PTR [rbp-0x10]
  235fd7:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
  235fda:	c1 e2 17             	shl    edx,0x17
  235fdd:	01 d1                	add    ecx,edx
  235fdf:	40 0f 90 c6          	seto   sil
  235fe3:	89 8d 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],ecx
  235fe9:	40 88 b5 5b ff ff ff 	mov    BYTE PTR [rbp-0xa5],sil
  235ff0:	70 02                	jo     235ff4 <sqrtf+0x474>
  235ff2:	eb 10                	jmp    236004 <sqrtf+0x484>
  235ff4:	48 8d 3d 45 de 00 00 	lea    rdi,[rip+0xde45]        # 243e40 <__unnamed_4>
  235ffb:	31 c0                	xor    eax,eax
  235ffd:	89 c6                	mov    esi,eax
  235fff:	e8 8c e8 ff ff       	call   234890 <panic>
  236004:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
  23600a:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    return @bitCast(f32, ix);
  23600d:	c5 f9 6e 45 f0       	vmovd  xmm0,DWORD PTR [rbp-0x10]
  236012:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  236019:	5d                   	pop    rbp
  23601a:	c3                   	ret    
  23601b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000236020 <snan.4>:
pub fn snan(comptime T: type) T {
  236020:	55                   	push   rbp
  236021:	48 89 e5             	mov    rbp,rsp
  236024:	c5 fa 10 05 f8 48 fd 	vmovss xmm0,DWORD PTR [rip+0xfffffffffffd48f8]        # 20a924 <__unnamed_37+0x4>
  23602b:	ff 
    return switch (T) {
  23602c:	5d                   	pop    rbp
  23602d:	c3                   	ret    
  23602e:	66 90                	xchg   ax,ax

0000000000236030 <isNan>:
fn isNan(comptime T: type, bits: T) bool {
  236030:	55                   	push   rbp
  236031:	48 89 e5             	mov    rbp,rsp
  236034:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
        return (bits & 0x7fffffff) > 0x7f800000;
  236037:	8b 7d fc             	mov    edi,DWORD PTR [rbp-0x4]
  23603a:	81 e7 ff ff ff 7f    	and    edi,0x7fffffff
  236040:	81 ef 00 00 80 7f    	sub    edi,0x7f800000
  236046:	0f 97 c0             	seta   al
  236049:	89 7d f8             	mov    DWORD PTR [rbp-0x8],edi
  23604c:	5d                   	pop    rbp
  23604d:	c3                   	ret    
  23604e:	66 90                	xchg   ax,ax

0000000000236050 <isNan.5>:
fn isNan(comptime T: type, bits: T) bool {
  236050:	55                   	push   rbp
  236051:	48 89 e5             	mov    rbp,rsp
  236054:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
        return (bits & (@maxValue(u64) >> 1)) > (u64(0x7ff) << 52);
  236058:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  23605c:	b0 3f                	mov    al,0x3f
  23605e:	88 c1                	mov    cl,al
  236060:	c4 e2 f0 f5 cf       	bzhi   rcx,rdi,rcx
  236065:	48 bf 00 00 00 00 00 	movabs rdi,0x7ff0000000000000
  23606c:	00 f0 7f 
  23606f:	48 29 f9             	sub    rcx,rdi
  236072:	0f 97 c0             	seta   al
  236075:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  236079:	5d                   	pop    rbp
  23607a:	c3                   	ret    
  23607b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000236080 <floor32>:
fn floor32(x: f32) f32 {
  236080:	55                   	push   rbp
  236081:	48 89 e5             	mov    rbp,rsp
  236084:	48 83 ec 30          	sub    rsp,0x30
  236088:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
    var u = @bitCast(u32, x);
  23608d:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  236092:	c5 f9 7e c0          	vmovd  eax,xmm0
  236096:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
    const e = @intCast(i32, (u >> 23) & 0xFF) - 0x7F;
  236099:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  23609c:	c1 e8 17             	shr    eax,0x17
  23609f:	25 ff 00 00 00       	and    eax,0xff
  2360a4:	83 e8 7f             	sub    eax,0x7f
  2360a7:	0f 90 c1             	seto   cl
  2360aa:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
  2360ad:	88 4d eb             	mov    BYTE PTR [rbp-0x15],cl
  2360b0:	0f 80 cf 00 00 00    	jo     236185 <floor32+0x105>
  2360b6:	e9 da 00 00 00       	jmp    236195 <floor32+0x115>
        return x;
  2360bb:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  2360c0:	48 83 c4 30          	add    rsp,0x30
  2360c4:	5d                   	pop    rbp
  2360c5:	c3                   	ret    
    if (x == 0.0) {
  2360c6:	eb 00                	jmp    2360c8 <floor32+0x48>
    if (e >= 23) {
  2360c8:	83 7d f4 17          	cmp    DWORD PTR [rbp-0xc],0x17
  2360cc:	7c 0b                	jl     2360d9 <floor32+0x59>
        return x;
  2360ce:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  2360d3:	48 83 c4 30          	add    rsp,0x30
  2360d7:	5d                   	pop    rbp
  2360d8:	c3                   	ret    
    if (e >= 23) {
  2360d9:	eb 00                	jmp    2360db <floor32+0x5b>
    if (e >= 0) {
  2360db:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
  2360df:	7c 6f                	jl     236150 <floor32+0xd0>
        m = u32(0x007FFFFF) >> @intCast(u5, e);
  2360e1:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  2360e4:	83 f8 00             	cmp    eax,0x0
  2360e7:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
  2360ea:	0f 8d eb 00 00 00    	jge    2361db <floor32+0x15b>
  2360f0:	e9 fa 00 00 00       	jmp    2361ef <floor32+0x16f>
            return x;
  2360f5:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  2360fa:	48 83 c4 30          	add    rsp,0x30
  2360fe:	5d                   	pop    rbp
  2360ff:	c3                   	ret    
        if (u & m == 0) {
  236100:	eb 00                	jmp    236102 <floor32+0x82>
  236102:	c5 fa 10 05 02 48 fd 	vmovss xmm0,DWORD PTR [rip+0xfffffffffffd4802]        # 20a90c <__unnamed_1443+0xb>
  236109:	ff 
        math.forceEval(x + 0x1.0p120);
  23610a:	c5 fa 58 45 fc       	vaddss xmm0,xmm0,DWORD PTR [rbp-0x4]
  23610f:	e8 cc 05 00 00       	call   2366e0 <forceEval>
        if (u >> 31 != 0) {
  236114:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  236117:	c1 e8 1f             	shr    eax,0x1f
  23611a:	83 f8 00             	cmp    eax,0x0
  23611d:	74 1a                	je     236139 <floor32+0xb9>
            u += m;
  23611f:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  236122:	03 45 f0             	add    eax,DWORD PTR [rbp-0x10]
  236125:	0f 92 c1             	setb   cl
  236128:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
  23612b:	88 4d df             	mov    BYTE PTR [rbp-0x21],cl
  23612e:	0f 82 02 01 00 00    	jb     236236 <floor32+0x1b6>
  236134:	e9 0d 01 00 00       	jmp    236246 <floor32+0x1c6>
        if (u >> 31 != 0) {
  236139:	eb 00                	jmp    23613b <floor32+0xbb>
        return @bitCast(f32, u & ~m);
  23613b:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  23613e:	8b 4d f0             	mov    ecx,DWORD PTR [rbp-0x10]
  236141:	83 f1 ff             	xor    ecx,0xffffffff
  236144:	21 c8                	and    eax,ecx
  236146:	c5 f9 6e c0          	vmovd  xmm0,eax
  23614a:	48 83 c4 30          	add    rsp,0x30
  23614e:	5d                   	pop    rbp
  23614f:	c3                   	ret    
  236150:	c5 fa 10 05 b4 47 fd 	vmovss xmm0,DWORD PTR [rip+0xfffffffffffd47b4]        # 20a90c <__unnamed_1443+0xb>
  236157:	ff 
        math.forceEval(x + 0x1.0p120);
  236158:	c5 fa 58 45 fc       	vaddss xmm0,xmm0,DWORD PTR [rbp-0x4]
  23615d:	e8 7e 05 00 00       	call   2366e0 <forceEval>
        if (u >> 31 == 0) {
  236162:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  236165:	c1 e8 1f             	shr    eax,0x1f
  236168:	83 f8 00             	cmp    eax,0x0
  23616b:	75 0a                	jne    236177 <floor32+0xf7>
  23616d:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
            return 0.0;
  236171:	48 83 c4 30          	add    rsp,0x30
  236175:	5d                   	pop    rbp
  236176:	c3                   	ret    
  236177:	c5 fa 10 05 99 47 fd 	vmovss xmm0,DWORD PTR [rip+0xfffffffffffd4799]        # 20a918 <__unnamed_1443+0x17>
  23617e:	ff 
            return -1.0;
  23617f:	48 83 c4 30          	add    rsp,0x30
  236183:	5d                   	pop    rbp
  236184:	c3                   	ret    
  236185:	48 8d 3d b4 dc 00 00 	lea    rdi,[rip+0xdcb4]        # 243e40 <__unnamed_4>
  23618c:	31 c0                	xor    eax,eax
  23618e:	89 c6                	mov    esi,eax
    const e = @intCast(i32, (u >> 23) & 0xFF) - 0x7F;
  236190:	e8 fb e6 ff ff       	call   234890 <panic>
  236195:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
  236199:	be aa 00 00 00       	mov    esi,0xaa
  23619e:	b8 04 00 00 00       	mov    eax,0x4
  2361a3:	89 c2                	mov    edx,eax
  2361a5:	48 8d 4d f0          	lea    rcx,[rbp-0x10]
  2361a9:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  2361ac:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    var m: u32 = undefined;
  2361af:	48 89 cf             	mov    rdi,rcx
  2361b2:	c5 fa 11 45 d8       	vmovss DWORD PTR [rbp-0x28],xmm0
  2361b7:	e8 f4 e6 ff ff       	call   2348b0 <memset>
    if (x == 0.0) {
  2361bc:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  2361c1:	c5 fa 10 4d d8       	vmovss xmm1,DWORD PTR [rbp-0x28]
  2361c6:	c5 f8 2e c1          	vucomiss xmm0,xmm1
  2361ca:	0f 85 f6 fe ff ff    	jne    2360c6 <floor32+0x46>
  2361d0:	0f 8a f0 fe ff ff    	jp     2360c6 <floor32+0x46>
  2361d6:	e9 e0 fe ff ff       	jmp    2360bb <floor32+0x3b>
        m = u32(0x007FFFFF) >> @intCast(u5, e);
  2361db:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  2361de:	88 c1                	mov    cl,al
  2361e0:	83 e0 1f             	and    eax,0x1f
  2361e3:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
  2361e6:	39 c2                	cmp    edx,eax
  2361e8:	88 4d d7             	mov    BYTE PTR [rbp-0x29],cl
  2361eb:	74 12                	je     2361ff <floor32+0x17f>
  2361ed:	eb 37                	jmp    236226 <floor32+0x1a6>
  2361ef:	48 8d 3d 62 dc 00 00 	lea    rdi,[rip+0xdc62]        # 243e58 <__unnamed_5>
  2361f6:	31 c0                	xor    eax,eax
  2361f8:	89 c6                	mov    esi,eax
  2361fa:	e8 91 e6 ff ff       	call   234890 <panic>
  2361ff:	b8 ff ff 7f 00       	mov    eax,0x7fffff
  236204:	8a 4d d7             	mov    cl,BYTE PTR [rbp-0x29]
  236207:	80 e1 1f             	and    cl,0x1f
  23620a:	0f b6 c9             	movzx  ecx,cl
  23620d:	d3 e8                	shr    eax,cl
  23620f:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
        if (u & m == 0) {
  236212:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  236215:	23 45 f0             	and    eax,DWORD PTR [rbp-0x10]
  236218:	83 f8 00             	cmp    eax,0x0
  23621b:	0f 84 d4 fe ff ff    	je     2360f5 <floor32+0x75>
  236221:	e9 da fe ff ff       	jmp    236100 <floor32+0x80>
  236226:	48 8d 3d fb db 00 00 	lea    rdi,[rip+0xdbfb]        # 243e28 <__unnamed_3>
  23622d:	31 c0                	xor    eax,eax
  23622f:	89 c6                	mov    esi,eax
        m = u32(0x007FFFFF) >> @intCast(u5, e);
  236231:	e8 5a e6 ff ff       	call   234890 <panic>
  236236:	48 8d 3d 03 dc 00 00 	lea    rdi,[rip+0xdc03]        # 243e40 <__unnamed_4>
  23623d:	31 c0                	xor    eax,eax
  23623f:	89 c6                	mov    esi,eax
            u += m;
  236241:	e8 4a e6 ff ff       	call   234890 <panic>
  236246:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  236249:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
        if (u >> 31 != 0) {
  23624c:	e9 ea fe ff ff       	jmp    23613b <floor32+0xbb>
  236251:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  236258:	0f 1f 84 00 00 00 00 
  23625f:	00 

0000000000236260 <ceil32>:
        else => @compileError("ceil not implemented for " ++ @typeName(T)),
    };
}

fn ceil32(x: f32) f32 {
  236260:	55                   	push   rbp
  236261:	48 89 e5             	mov    rbp,rsp
  236264:	48 83 ec 30          	sub    rsp,0x30
  236268:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
    var u = @bitCast(u32, x);
  23626d:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  236272:	c5 f9 7e c0          	vmovd  eax,xmm0
  236276:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
    var e = @intCast(i32, (u >> 23) & 0xFF) - 0x7F;
  236279:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  23627c:	c1 e8 17             	shr    eax,0x17
  23627f:	25 ff 00 00 00       	and    eax,0xff
  236284:	83 e8 7f             	sub    eax,0x7f
  236287:	0f 90 c1             	seto   cl
  23628a:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
  23628d:	88 4d eb             	mov    BYTE PTR [rbp-0x15],cl
  236290:	0f 80 d1 00 00 00    	jo     236367 <ceil32+0x107>
  236296:	e9 dc 00 00 00       	jmp    236377 <ceil32+0x117>
    var m: u32 = undefined;

    // TODO: Shouldn't need this explicit check.
    if (x == 0.0) {
        return x;
  23629b:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  2362a0:	48 83 c4 30          	add    rsp,0x30
  2362a4:	5d                   	pop    rbp
  2362a5:	c3                   	ret    
    if (x == 0.0) {
  2362a6:	eb 00                	jmp    2362a8 <ceil32+0x48>
    }

    if (e >= 23) {
  2362a8:	83 7d f4 17          	cmp    DWORD PTR [rbp-0xc],0x17
  2362ac:	7c 0b                	jl     2362b9 <ceil32+0x59>
        return x;
  2362ae:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  2362b3:	48 83 c4 30          	add    rsp,0x30
  2362b7:	5d                   	pop    rbp
  2362b8:	c3                   	ret    
    } else if (e >= 0) {
  2362b9:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
  2362bd:	7c 73                	jl     236332 <ceil32+0xd2>
        m = u32(0x007FFFFF) >> @intCast(u5, e);
  2362bf:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  2362c2:	83 f8 00             	cmp    eax,0x0
  2362c5:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
  2362c8:	0f 8d ef 00 00 00    	jge    2363bd <ceil32+0x15d>
  2362ce:	e9 fe 00 00 00       	jmp    2363d1 <ceil32+0x171>
        if (u & m == 0) {
            return x;
  2362d3:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  2362d8:	48 83 c4 30          	add    rsp,0x30
  2362dc:	5d                   	pop    rbp
  2362dd:	c3                   	ret    
        if (u & m == 0) {
  2362de:	eb 00                	jmp    2362e0 <ceil32+0x80>
  2362e0:	c5 fa 10 05 24 46 fd 	vmovss xmm0,DWORD PTR [rip+0xfffffffffffd4624]        # 20a90c <__unnamed_1443+0xb>
  2362e7:	ff 
        }
        math.forceEval(x + 0x1.0p120);
  2362e8:	c5 fa 58 45 fc       	vaddss xmm0,xmm0,DWORD PTR [rbp-0x4]
  2362ed:	e8 ee 03 00 00       	call   2366e0 <forceEval>
        if (u >> 31 == 0) {
  2362f2:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  2362f5:	c1 e8 1f             	shr    eax,0x1f
  2362f8:	83 f8 00             	cmp    eax,0x0
  2362fb:	75 1a                	jne    236317 <ceil32+0xb7>
            u += m;
  2362fd:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  236300:	03 45 f0             	add    eax,DWORD PTR [rbp-0x10]
  236303:	0f 92 c1             	setb   cl
  236306:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
  236309:	88 4d df             	mov    BYTE PTR [rbp-0x21],cl
  23630c:	0f 82 06 01 00 00    	jb     236418 <ceil32+0x1b8>
  236312:	e9 11 01 00 00       	jmp    236428 <ceil32+0x1c8>
        if (u >> 31 == 0) {
  236317:	eb 00                	jmp    236319 <ceil32+0xb9>
        }
        u &= ~m;
  236319:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  23631c:	8b 4d f0             	mov    ecx,DWORD PTR [rbp-0x10]
  23631f:	83 f1 ff             	xor    ecx,0xffffffff
  236322:	21 c8                	and    eax,ecx
  236324:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
        return @bitCast(f32, u);
  236327:	c5 f9 6e 45 f8       	vmovd  xmm0,DWORD PTR [rbp-0x8]
  23632c:	48 83 c4 30          	add    rsp,0x30
  236330:	5d                   	pop    rbp
  236331:	c3                   	ret    
  236332:	c5 fa 10 05 d2 45 fd 	vmovss xmm0,DWORD PTR [rip+0xfffffffffffd45d2]        # 20a90c <__unnamed_1443+0xb>
  236339:	ff 
    } else {
        math.forceEval(x + 0x1.0p120);
  23633a:	c5 fa 58 45 fc       	vaddss xmm0,xmm0,DWORD PTR [rbp-0x4]
  23633f:	e8 9c 03 00 00       	call   2366e0 <forceEval>
        if (u >> 31 != 0) {
  236344:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  236347:	c1 e8 1f             	shr    eax,0x1f
  23634a:	83 f8 00             	cmp    eax,0x0
  23634d:	74 0a                	je     236359 <ceil32+0xf9>
  23634f:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
            return -0.0;
  236353:	48 83 c4 30          	add    rsp,0x30
  236357:	5d                   	pop    rbp
  236358:	c3                   	ret    
  236359:	c5 fa 10 05 b3 45 fd 	vmovss xmm0,DWORD PTR [rip+0xfffffffffffd45b3]        # 20a914 <__unnamed_1443+0x13>
  236360:	ff 
        } else {
            return 1.0;
  236361:	48 83 c4 30          	add    rsp,0x30
  236365:	5d                   	pop    rbp
  236366:	c3                   	ret    
  236367:	48 8d 3d d2 da 00 00 	lea    rdi,[rip+0xdad2]        # 243e40 <__unnamed_4>
  23636e:	31 c0                	xor    eax,eax
  236370:	89 c6                	mov    esi,eax
    var e = @intCast(i32, (u >> 23) & 0xFF) - 0x7F;
  236372:	e8 19 e5 ff ff       	call   234890 <panic>
  236377:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
  23637b:	be aa 00 00 00       	mov    esi,0xaa
  236380:	b8 04 00 00 00       	mov    eax,0x4
  236385:	89 c2                	mov    edx,eax
  236387:	48 8d 4d f0          	lea    rcx,[rbp-0x10]
  23638b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  23638e:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    var m: u32 = undefined;
  236391:	48 89 cf             	mov    rdi,rcx
  236394:	c5 fa 11 45 d8       	vmovss DWORD PTR [rbp-0x28],xmm0
  236399:	e8 12 e5 ff ff       	call   2348b0 <memset>
    if (x == 0.0) {
  23639e:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  2363a3:	c5 fa 10 4d d8       	vmovss xmm1,DWORD PTR [rbp-0x28]
  2363a8:	c5 f8 2e c1          	vucomiss xmm0,xmm1
  2363ac:	0f 85 f4 fe ff ff    	jne    2362a6 <ceil32+0x46>
  2363b2:	0f 8a ee fe ff ff    	jp     2362a6 <ceil32+0x46>
  2363b8:	e9 de fe ff ff       	jmp    23629b <ceil32+0x3b>
        m = u32(0x007FFFFF) >> @intCast(u5, e);
  2363bd:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  2363c0:	88 c1                	mov    cl,al
  2363c2:	83 e0 1f             	and    eax,0x1f
  2363c5:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
  2363c8:	39 c2                	cmp    edx,eax
  2363ca:	88 4d d7             	mov    BYTE PTR [rbp-0x29],cl
  2363cd:	74 12                	je     2363e1 <ceil32+0x181>
  2363cf:	eb 37                	jmp    236408 <ceil32+0x1a8>
  2363d1:	48 8d 3d 80 da 00 00 	lea    rdi,[rip+0xda80]        # 243e58 <__unnamed_5>
  2363d8:	31 c0                	xor    eax,eax
  2363da:	89 c6                	mov    esi,eax
  2363dc:	e8 af e4 ff ff       	call   234890 <panic>
  2363e1:	b8 ff ff 7f 00       	mov    eax,0x7fffff
  2363e6:	8a 4d d7             	mov    cl,BYTE PTR [rbp-0x29]
  2363e9:	80 e1 1f             	and    cl,0x1f
  2363ec:	0f b6 c9             	movzx  ecx,cl
  2363ef:	d3 e8                	shr    eax,cl
  2363f1:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
        if (u & m == 0) {
  2363f4:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  2363f7:	23 45 f0             	and    eax,DWORD PTR [rbp-0x10]
  2363fa:	83 f8 00             	cmp    eax,0x0
  2363fd:	0f 84 d0 fe ff ff    	je     2362d3 <ceil32+0x73>
  236403:	e9 d6 fe ff ff       	jmp    2362de <ceil32+0x7e>
  236408:	48 8d 3d 19 da 00 00 	lea    rdi,[rip+0xda19]        # 243e28 <__unnamed_3>
  23640f:	31 c0                	xor    eax,eax
  236411:	89 c6                	mov    esi,eax
        m = u32(0x007FFFFF) >> @intCast(u5, e);
  236413:	e8 78 e4 ff ff       	call   234890 <panic>
  236418:	48 8d 3d 21 da 00 00 	lea    rdi,[rip+0xda21]        # 243e40 <__unnamed_4>
  23641f:	31 c0                	xor    eax,eax
  236421:	89 c6                	mov    esi,eax
            u += m;
  236423:	e8 68 e4 ff ff       	call   234890 <panic>
  236428:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  23642b:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
        if (u >> 31 == 0) {
  23642e:	e9 e6 fe ff ff       	jmp    236319 <ceil32+0xb9>
  236433:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  23643a:	84 00 00 00 00 00 

0000000000236440 <floor64>:
fn floor64(x: f64) f64 {
  236440:	55                   	push   rbp
  236441:	48 89 e5             	mov    rbp,rsp
  236444:	48 83 ec 30          	sub    rsp,0x30
  236448:	be aa 00 00 00       	mov    esi,0xaa
  23644d:	b8 08 00 00 00       	mov    eax,0x8
  236452:	89 c2                	mov    edx,eax
  236454:	48 8d 4d e0          	lea    rcx,[rbp-0x20]
  236458:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    const u = @bitCast(u64, x);
  23645d:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  236462:	c4 e1 f9 7e c7       	vmovq  rdi,xmm0
  236467:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
    const e = (u >> 52) & 0x7FF;
  23646b:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  23646f:	48 c1 ef 34          	shr    rdi,0x34
  236473:	48 81 e7 ff 07 00 00 	and    rdi,0x7ff
  23647a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    var y: f64 = undefined;
  23647e:	48 89 cf             	mov    rdi,rcx
  236481:	e8 2a e4 ff ff       	call   2348b0 <memset>
    if (e >= 0x3FF + 52 or x == 0) {
  236486:	48 81 7d e8 33 04 00 	cmp    QWORD PTR [rbp-0x18],0x433
  23648d:	00 
  23648e:	41 0f 93 c0          	setae  r8b
  236492:	41 f6 c0 01          	test   r8b,0x1
  236496:	44 88 45 df          	mov    BYTE PTR [rbp-0x21],r8b
  23649a:	75 18                	jne    2364b4 <floor64+0x74>
  23649c:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
  2364a0:	c5 fb 10 4d f8       	vmovsd xmm1,QWORD PTR [rbp-0x8]
  2364a5:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  2364a9:	0f 94 c0             	sete   al
  2364ac:	0f 9b c1             	setnp  cl
  2364af:	20 c8                	and    al,cl
  2364b1:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
  2364b4:	8a 45 df             	mov    al,BYTE PTR [rbp-0x21]
  2364b7:	a8 01                	test   al,0x1
  2364b9:	75 02                	jne    2364bd <floor64+0x7d>
  2364bb:	eb 0b                	jmp    2364c8 <floor64+0x88>
        return x;
  2364bd:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  2364c2:	48 83 c4 30          	add    rsp,0x30
  2364c6:	5d                   	pop    rbp
  2364c7:	c3                   	ret    
    if (e >= 0x3FF + 52 or x == 0) {
  2364c8:	eb 00                	jmp    2364ca <floor64+0x8a>
    if (u >> 63 != 0) {
  2364ca:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2364ce:	48 c1 e8 3f          	shr    rax,0x3f
  2364d2:	48 83 f8 00          	cmp    rax,0x0
  2364d6:	74 21                	je     2364f9 <floor64+0xb9>
  2364d8:	c5 fb 10 05 50 a7 fc 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffca750]        # 200c30 <__unnamed_186+0x30>
  2364df:	ff 
        y = x - math.f64_toint + math.f64_toint - x;
  2364e0:	c5 fb 10 4d f8       	vmovsd xmm1,QWORD PTR [rbp-0x8]
  2364e5:	c5 f3 5c c8          	vsubsd xmm1,xmm1,xmm0
  2364e9:	c5 f3 58 c0          	vaddsd xmm0,xmm1,xmm0
  2364ed:	c5 fb 5c 45 f8       	vsubsd xmm0,xmm0,QWORD PTR [rbp-0x8]
  2364f2:	c5 fb 11 45 e0       	vmovsd QWORD PTR [rbp-0x20],xmm0
    if (u >> 63 != 0) {
  2364f7:	eb 1b                	jmp    236514 <floor64+0xd4>
  2364f9:	c5 fb 10 05 2f a7 fc 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffca72f]        # 200c30 <__unnamed_186+0x30>
  236500:	ff 
        y = x + math.f64_toint - math.f64_toint - x;
  236501:	c5 fb 58 4d f8       	vaddsd xmm1,xmm0,QWORD PTR [rbp-0x8]
  236506:	c5 f3 5c c0          	vsubsd xmm0,xmm1,xmm0
  23650a:	c5 fb 5c 45 f8       	vsubsd xmm0,xmm0,QWORD PTR [rbp-0x8]
  23650f:	c5 fb 11 45 e0       	vmovsd QWORD PTR [rbp-0x20],xmm0
    if (e <= 0x3FF - 1) {
  236514:	48 81 7d e8 fe 03 00 	cmp    QWORD PTR [rbp-0x18],0x3fe
  23651b:	00 
  23651c:	77 30                	ja     23654e <floor64+0x10e>
        math.forceEval(y);
  23651e:	c5 fb 10 45 e0       	vmovsd xmm0,QWORD PTR [rbp-0x20]
  236523:	e8 08 02 00 00       	call   236730 <forceEval.6>
        if (u >> 63 != 0) {
  236528:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  23652c:	48 c1 e8 3f          	shr    rax,0x3f
  236530:	48 83 f8 00          	cmp    rax,0x0
  236534:	74 0e                	je     236544 <floor64+0x104>
  236536:	c5 fb 10 05 d2 a6 fc 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffca6d2]        # 200c10 <__unnamed_186+0x10>
  23653d:	ff 
            return -1.0;
  23653e:	48 83 c4 30          	add    rsp,0x30
  236542:	5d                   	pop    rbp
  236543:	c3                   	ret    
  236544:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
            return 0.0;
  236548:	48 83 c4 30          	add    rsp,0x30
  23654c:	5d                   	pop    rbp
  23654d:	c3                   	ret    
  23654e:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
    } else if (y > 0) {
  236552:	c5 fb 10 4d e0       	vmovsd xmm1,QWORD PTR [rbp-0x20]
  236557:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  23655b:	76 1c                	jbe    236579 <floor64+0x139>
  23655d:	c5 fb 10 05 93 a6 fc 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffca693]        # 200bf8 <__unnamed_187+0x8>
  236564:	ff 
        return x + y - 1;
  236565:	c5 fb 10 4d f8       	vmovsd xmm1,QWORD PTR [rbp-0x8]
  23656a:	c5 f3 58 4d e0       	vaddsd xmm1,xmm1,QWORD PTR [rbp-0x20]
  23656f:	c5 f3 5c c0          	vsubsd xmm0,xmm1,xmm0
  236573:	48 83 c4 30          	add    rsp,0x30
  236577:	5d                   	pop    rbp
  236578:	c3                   	ret    
        return x + y;
  236579:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  23657e:	c5 fb 58 45 e0       	vaddsd xmm0,xmm0,QWORD PTR [rbp-0x20]
  236583:	48 83 c4 30          	add    rsp,0x30
  236587:	5d                   	pop    rbp
  236588:	c3                   	ret    
  236589:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000236590 <ceil64>:
        }
    }
}

fn ceil64(x: f64) f64 {
  236590:	55                   	push   rbp
  236591:	48 89 e5             	mov    rbp,rsp
  236594:	48 83 ec 30          	sub    rsp,0x30
  236598:	be aa 00 00 00       	mov    esi,0xaa
  23659d:	b8 08 00 00 00       	mov    eax,0x8
  2365a2:	89 c2                	mov    edx,eax
  2365a4:	48 8d 4d e0          	lea    rcx,[rbp-0x20]
  2365a8:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    const u = @bitCast(u64, x);
  2365ad:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  2365b2:	c4 e1 f9 7e c7       	vmovq  rdi,xmm0
  2365b7:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
    const e = (u >> 52) & 0x7FF;
  2365bb:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  2365bf:	48 c1 ef 34          	shr    rdi,0x34
  2365c3:	48 81 e7 ff 07 00 00 	and    rdi,0x7ff
  2365ca:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    var y: f64 = undefined;
  2365ce:	48 89 cf             	mov    rdi,rcx
  2365d1:	e8 da e2 ff ff       	call   2348b0 <memset>

    if (e >= 0x3FF + 52 or x == 0) {
  2365d6:	48 81 7d e8 33 04 00 	cmp    QWORD PTR [rbp-0x18],0x433
  2365dd:	00 
  2365de:	41 0f 93 c0          	setae  r8b
  2365e2:	41 f6 c0 01          	test   r8b,0x1
  2365e6:	44 88 45 df          	mov    BYTE PTR [rbp-0x21],r8b
  2365ea:	75 18                	jne    236604 <ceil64+0x74>
  2365ec:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
  2365f0:	c5 fb 10 4d f8       	vmovsd xmm1,QWORD PTR [rbp-0x8]
  2365f5:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  2365f9:	0f 94 c0             	sete   al
  2365fc:	0f 9b c1             	setnp  cl
  2365ff:	20 c8                	and    al,cl
  236601:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
  236604:	8a 45 df             	mov    al,BYTE PTR [rbp-0x21]
  236607:	a8 01                	test   al,0x1
  236609:	75 02                	jne    23660d <ceil64+0x7d>
  23660b:	eb 0b                	jmp    236618 <ceil64+0x88>
        return x;
  23660d:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  236612:	48 83 c4 30          	add    rsp,0x30
  236616:	5d                   	pop    rbp
  236617:	c3                   	ret    
    if (e >= 0x3FF + 52 or x == 0) {
  236618:	eb 00                	jmp    23661a <ceil64+0x8a>
    }

    if (u >> 63 != 0) {
  23661a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  23661e:	48 c1 e8 3f          	shr    rax,0x3f
  236622:	48 83 f8 00          	cmp    rax,0x0
  236626:	74 21                	je     236649 <ceil64+0xb9>
  236628:	c5 fb 10 05 00 a6 fc 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffca600]        # 200c30 <__unnamed_186+0x30>
  23662f:	ff 
        @setFloatMode(this, builtin.FloatMode.Strict);
        y = x - math.f64_toint + math.f64_toint - x;
  236630:	c5 fb 10 4d f8       	vmovsd xmm1,QWORD PTR [rbp-0x8]
  236635:	c5 f3 5c c8          	vsubsd xmm1,xmm1,xmm0
  236639:	c5 f3 58 c0          	vaddsd xmm0,xmm1,xmm0
  23663d:	c5 fb 5c 45 f8       	vsubsd xmm0,xmm0,QWORD PTR [rbp-0x8]
  236642:	c5 fb 11 45 e0       	vmovsd QWORD PTR [rbp-0x20],xmm0
    if (u >> 63 != 0) {
  236647:	eb 1b                	jmp    236664 <ceil64+0xd4>
  236649:	c5 fb 10 05 df a5 fc 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffca5df]        # 200c30 <__unnamed_186+0x30>
  236650:	ff 
    } else {
        @setFloatMode(this, builtin.FloatMode.Strict);
        y = x + math.f64_toint - math.f64_toint - x;
  236651:	c5 fb 58 4d f8       	vaddsd xmm1,xmm0,QWORD PTR [rbp-0x8]
  236656:	c5 f3 5c c0          	vsubsd xmm0,xmm1,xmm0
  23665a:	c5 fb 5c 45 f8       	vsubsd xmm0,xmm0,QWORD PTR [rbp-0x8]
  23665f:	c5 fb 11 45 e0       	vmovsd QWORD PTR [rbp-0x20],xmm0
    }

    if (e <= 0x3FF - 1) {
  236664:	48 81 7d e8 fe 03 00 	cmp    QWORD PTR [rbp-0x18],0x3fe
  23666b:	00 
  23666c:	77 30                	ja     23669e <ceil64+0x10e>
        math.forceEval(y);
  23666e:	c5 fb 10 45 e0       	vmovsd xmm0,QWORD PTR [rbp-0x20]
  236673:	e8 b8 00 00 00       	call   236730 <forceEval.6>
        if (u >> 63 != 0) {
  236678:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  23667c:	48 c1 e8 3f          	shr    rax,0x3f
  236680:	48 83 f8 00          	cmp    rax,0x0
  236684:	74 0a                	je     236690 <ceil64+0x100>
  236686:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
            return -0.0;
  23668a:	48 83 c4 30          	add    rsp,0x30
  23668e:	5d                   	pop    rbp
  23668f:	c3                   	ret    
  236690:	c5 fb 10 05 60 a5 fc 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffca560]        # 200bf8 <__unnamed_187+0x8>
  236697:	ff 
        } else {
            return 1.0;
  236698:	48 83 c4 30          	add    rsp,0x30
  23669c:	5d                   	pop    rbp
  23669d:	c3                   	ret    
  23669e:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
        }
    } else if (y < 0) {
  2366a2:	c5 f9 2e 45 e0       	vucomisd xmm0,QWORD PTR [rbp-0x20]
  2366a7:	76 1c                	jbe    2366c5 <ceil64+0x135>
  2366a9:	c5 fb 10 05 47 a5 fc 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffca547]        # 200bf8 <__unnamed_187+0x8>
  2366b0:	ff 
        return x + y + 1;
  2366b1:	c5 fb 10 4d f8       	vmovsd xmm1,QWORD PTR [rbp-0x8]
  2366b6:	c5 f3 58 4d e0       	vaddsd xmm1,xmm1,QWORD PTR [rbp-0x20]
  2366bb:	c5 f3 58 c0          	vaddsd xmm0,xmm1,xmm0
  2366bf:	48 83 c4 30          	add    rsp,0x30
  2366c3:	5d                   	pop    rbp
  2366c4:	c3                   	ret    
    } else {
        return x + y;
  2366c5:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  2366ca:	c5 fb 58 45 e0       	vaddsd xmm0,xmm0,QWORD PTR [rbp-0x20]
  2366cf:	48 83 c4 30          	add    rsp,0x30
  2366d3:	5d                   	pop    rbp
  2366d4:	c3                   	ret    
  2366d5:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2366dc:	00 00 00 00 

00000000002366e0 <forceEval>:
  2366e0:	55                   	push   rbp
  2366e1:	48 89 e5             	mov    rbp,rsp
  2366e4:	48 83 ec 20          	sub    rsp,0x20
  2366e8:	48 8d 45 f8          	lea    rax,[rbp-0x8]
  2366ec:	be aa 00 00 00       	mov    esi,0xaa
  2366f1:	b9 04 00 00 00       	mov    ecx,0x4
  2366f6:	89 ca                	mov    edx,ecx
  2366f8:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
            var x: f32 = undefined;
  2366fd:	48 89 c7             	mov    rdi,rax
  236700:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  236704:	e8 a7 e1 ff ff       	call   2348b0 <memset>
            const p = @ptrCast(*volatile f32, &x);
  236709:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  23670d:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
            p.* = x;
  236711:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  236715:	c5 fa 10 45 f8       	vmovss xmm0,DWORD PTR [rbp-0x8]
  23671a:	c5 fa 11 02          	vmovss DWORD PTR [rdx],xmm0
pub fn forceEval(value: var) void {
  23671e:	48 83 c4 20          	add    rsp,0x20
  236722:	5d                   	pop    rbp
  236723:	c3                   	ret    
  236724:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  23672b:	00 00 00 00 00 

0000000000236730 <forceEval.6>:
  236730:	55                   	push   rbp
  236731:	48 89 e5             	mov    rbp,rsp
  236734:	48 83 ec 20          	sub    rsp,0x20
  236738:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  23673c:	be aa 00 00 00       	mov    esi,0xaa
  236741:	b9 08 00 00 00       	mov    ecx,0x8
  236746:	89 ca                	mov    edx,ecx
  236748:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
            var x: f64 = undefined;
  23674d:	48 89 c7             	mov    rdi,rax
  236750:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  236754:	e8 57 e1 ff ff       	call   2348b0 <memset>
            const p = @ptrCast(*volatile f64, &x);
  236759:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  23675d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
            p.* = x;
  236761:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  236765:	c5 fb 10 45 f0       	vmovsd xmm0,QWORD PTR [rbp-0x10]
  23676a:	c5 fb 11 02          	vmovsd QWORD PTR [rdx],xmm0
pub fn forceEval(value: var) void {
  23676e:	48 83 c4 20          	add    rsp,0x20
  236772:	5d                   	pop    rbp
  236773:	c3                   	ret    
  236774:	cc                   	int3   
  236775:	cc                   	int3   
  236776:	cc                   	int3   
  236777:	cc                   	int3   
  236778:	cc                   	int3   
  236779:	cc                   	int3   
  23677a:	cc                   	int3   
  23677b:	cc                   	int3   
  23677c:	cc                   	int3   
  23677d:	cc                   	int3   
  23677e:	cc                   	int3   
  23677f:	cc                   	int3   

0000000000236780 <assert>:
pub fn assert(ok: bool) void {
  236780:	55                   	push   rbp
  236781:	48 89 e5             	mov    rbp,rsp
  236784:	48 83 ec 10          	sub    rsp,0x10
  236788:	40 88 f8             	mov    al,dil
  23678b:	24 01                	and    al,0x1
  23678d:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
    if (!ok) {
  236790:	8a 45 ff             	mov    al,BYTE PTR [rbp-0x1]
  236793:	84 c0                	test   al,al
  236795:	75 12                	jne    2367a9 <assert+0x29>
  236797:	eb 00                	jmp    236799 <assert+0x19>
  236799:	48 8d 3d e0 d6 00 00 	lea    rdi,[rip+0xd6e0]        # 243e80 <__unnamed_1>
  2367a0:	31 c0                	xor    eax,eax
  2367a2:	89 c6                	mov    esi,eax
            unreachable; // assertion failure
  2367a4:	e8 47 00 00 00       	call   2367f0 <panic>
    if (!ok) {
  2367a9:	eb 00                	jmp    2367ab <assert+0x2b>
pub fn assert(ok: bool) void {
  2367ab:	48 83 c4 10          	add    rsp,0x10
  2367af:	5d                   	pop    rbp
  2367b0:	c3                   	ret    
  2367b1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2367b8:	0f 1f 84 00 00 00 00 
  2367bf:	00 

00000000002367c0 <__udivmoddi4>:
const udivmod = @import("udivmod.zig").udivmod;
const builtin = @import("builtin");

pub extern fn __udivmoddi4(a: u64, b: u64, maybe_rem: ?*u64) u64 {
  2367c0:	55                   	push   rbp
  2367c1:	48 89 e5             	mov    rbp,rsp
  2367c4:	48 83 ec 20          	sub    rsp,0x20
  2367c8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  2367cc:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  2367d0:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    @setRuntimeSafety(builtin.is_test);
    return udivmod(u64, a, b, maybe_rem);
  2367d4:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  2367d8:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  2367dc:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  2367e0:	e8 5b 3d 00 00       	call   23a540 <udivmod>
  2367e5:	48 83 c4 20          	add    rsp,0x20
  2367e9:	5d                   	pop    rbp
  2367ea:	c3                   	ret    
  2367eb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000002367f0 <panic>:

const __udivmoddi4 = @import("udivmoddi4.zig").__udivmoddi4;

// Avoid dragging in the runtime safety mechanisms into this .o file,
// unless we're trying to test this file.
pub fn panic(msg: []const u8, error_return_trace: ?*builtin.StackTrace) noreturn {
  2367f0:	55                   	push   rbp
  2367f1:	48 89 e5             	mov    rbp,rsp
  2367f4:	48 83 ec 10          	sub    rsp,0x10
  2367f8:	48 8d 3d 81 d6 00 00 	lea    rdi,[rip+0xd681]        # 243e80 <__unnamed_1>
  2367ff:	31 c0                	xor    eax,eax
  236801:	89 c1                	mov    ecx,eax
  236803:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
    @setCold(true);
    if (is_test) {
        std.debug.panic("{}", msg);
    } else {
        unreachable;
  236807:	48 89 ce             	mov    rsi,rcx
  23680a:	e8 e1 ff ff ff       	call   2367f0 <panic>
  23680f:	90                   	nop

0000000000236810 <__cmptf2>:
const infRep = exponentMask;

const builtin = @import("builtin");
const is_test = builtin.is_test;

pub extern fn __letf2(a: f128, b: f128) c_int {
  236810:	55                   	push   rbp
  236811:	48 89 e5             	mov    rbp,rsp
  236814:	48 83 ec 30          	sub    rsp,0x30
  236818:	0f 29 45 f0          	movaps XMMWORD PTR [rbp-0x10],xmm0
  23681c:	0f 29 4d e0          	movaps XMMWORD PTR [rbp-0x20],xmm1
    @setRuntimeSafety(is_test);

    const aInt = @bitCast(rep_t, a);
  236820:	0f 28 45 f0          	movaps xmm0,XMMWORD PTR [rbp-0x10]
  236824:	0f 29 45 d0          	movaps XMMWORD PTR [rbp-0x30],xmm0
    const bInt = @bitCast(rep_t, b);
  236828:	0f 28 45 e0          	movaps xmm0,XMMWORD PTR [rbp-0x20]
  23682c:	0f 29 45 c0          	movaps XMMWORD PTR [rbp-0x40],xmm0

    const aAbs: rep_t = aInt & absMask;
  236830:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  236834:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  236838:	b2 3f                	mov    dl,0x3f
  23683a:	40 88 d6             	mov    sil,dl
  23683d:	c4 e2 c8 f5 c9       	bzhi   rcx,rcx,rsi
  236842:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  236846:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
    const bAbs: rep_t = bInt & absMask;
  23684a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  23684e:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  236852:	c4 e2 c8 f5 c9       	bzhi   rcx,rcx,rsi
  236857:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  23685b:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx

    // If either a or b is NaN, they are unordered.
    if (aAbs > infRep or bAbs > infRep) return LE_UNORDERED;
  23685f:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  236863:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  236867:	48 f7 d8             	neg    rax
  23686a:	48 be 00 00 00 00 00 	movabs rsi,0x7fff000000000000
  236871:	00 ff 7f 
  236874:	48 19 ce             	sbb    rsi,rcx
  236877:	0f 92 c2             	setb   dl
  23687a:	f6 c2 01             	test   dl,0x1
  23687d:	48 89 75 98          	mov    QWORD PTR [rbp-0x68],rsi
  236881:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  236885:	88 55 8f             	mov    BYTE PTR [rbp-0x71],dl
  236888:	75 2b                	jne    2368b5 <__cmptf2+0xa5>
  23688a:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  23688e:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  236892:	48 f7 d8             	neg    rax
  236895:	48 ba 00 00 00 00 00 	movabs rdx,0x7fff000000000000
  23689c:	00 ff 7f 
  23689f:	48 19 ca             	sbb    rdx,rcx
  2368a2:	40 0f 92 c6          	setb   sil
  2368a6:	48 89 55 80          	mov    QWORD PTR [rbp-0x80],rdx
  2368aa:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  2368b1:	40 88 75 8f          	mov    BYTE PTR [rbp-0x71],sil
  2368b5:	8a 45 8f             	mov    al,BYTE PTR [rbp-0x71]
  2368b8:	a8 01                	test   al,0x1
  2368ba:	75 02                	jne    2368be <__cmptf2+0xae>
  2368bc:	eb 0b                	jmp    2368c9 <__cmptf2+0xb9>
  2368be:	b8 01 00 00 00       	mov    eax,0x1
  2368c3:	48 83 c4 30          	add    rsp,0x30
  2368c7:	5d                   	pop    rbp
  2368c8:	c3                   	ret    
  2368c9:	eb 00                	jmp    2368cb <__cmptf2+0xbb>

    // If a and b are both zeros, they are equal.
    if ((aAbs | bAbs) == 0) return LE_EQUAL;
  2368cb:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  2368cf:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  2368d3:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  2368d7:	48 8b 75 a8          	mov    rsi,QWORD PTR [rbp-0x58]
  2368db:	48 09 f1             	or     rcx,rsi
  2368de:	48 09 d0             	or     rax,rdx
  2368e1:	48 09 c8             	or     rax,rcx
  2368e4:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  2368eb:	75 0a                	jne    2368f7 <__cmptf2+0xe7>
  2368ed:	eb 00                	jmp    2368ef <__cmptf2+0xdf>
  2368ef:	31 c0                	xor    eax,eax
  2368f1:	48 83 c4 30          	add    rsp,0x30
  2368f5:	5d                   	pop    rbp
  2368f6:	c3                   	ret    
  2368f7:	eb 00                	jmp    2368f9 <__cmptf2+0xe9>

    // If at least one of a and b is positive, we get the same result comparing
    // a and b as signed integers as we would with a floating-point compare.
    return if ((aInt & bInt) >= 0) if (aInt < bInt)
  2368f9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2368fd:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  236901:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  236905:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  236909:	48 29 d0             	sub    rax,rdx
  23690c:	48 19 f1             	sbb    rcx,rsi
  23690f:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
  236916:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  23691d:	73 0f                	jae    23692e <__cmptf2+0x11e>
  23691f:	eb 00                	jmp    236921 <__cmptf2+0x111>
  236921:	b8 ff ff ff ff       	mov    eax,0xffffffff
  236926:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
  23692c:	eb 44                	jmp    236972 <__cmptf2+0x162>
        LE_LESS
    else if (aInt == bInt)
  23692e:	c5 fa 6f 45 d0       	vmovdqu xmm0,XMMWORD PTR [rbp-0x30]
  236933:	c5 fa 6f 4d c0       	vmovdqu xmm1,XMMWORD PTR [rbp-0x40]
  236938:	c5 f9 74 c1          	vpcmpeqb xmm0,xmm0,xmm1
  23693c:	c5 f9 d7 c0          	vpmovmskb eax,xmm0
  236940:	2d ff ff 00 00       	sub    eax,0xffff
  236945:	89 85 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],eax
  23694b:	75 0c                	jne    236959 <__cmptf2+0x149>
  23694d:	eb 00                	jmp    23694f <__cmptf2+0x13f>
  23694f:	31 c0                	xor    eax,eax
  236951:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
  236957:	eb 0d                	jmp    236966 <__cmptf2+0x156>
  236959:	b8 01 00 00 00       	mov    eax,0x1
  23695e:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
  236964:	eb 00                	jmp    236966 <__cmptf2+0x156>
  236966:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
  23696c:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
    return if ((aInt & bInt) >= 0) if (aInt < bInt)
  236972:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
  236978:	48 83 c4 30          	add    rsp,0x30
  23697c:	5d                   	pop    rbp
  23697d:	c3                   	ret    
  23697e:	66 90                	xchg   ax,ax

0000000000236980 <__gttf2>:
const GE_LESS = c_int(-1);
const GE_EQUAL = c_int(0);
const GE_GREATER = c_int(1);
const GE_UNORDERED = c_int(-1); // Note: different from LE_UNORDERED

pub extern fn __getf2(a: f128, b: f128) c_int {
  236980:	55                   	push   rbp
  236981:	48 89 e5             	mov    rbp,rsp
  236984:	48 83 ec 50          	sub    rsp,0x50
  236988:	0f 29 45 f0          	movaps XMMWORD PTR [rbp-0x10],xmm0
  23698c:	0f 29 4d e0          	movaps XMMWORD PTR [rbp-0x20],xmm1
    @setRuntimeSafety(is_test);

    const aInt = @bitCast(srep_t, a);
  236990:	0f 28 45 f0          	movaps xmm0,XMMWORD PTR [rbp-0x10]
  236994:	0f 29 45 d0          	movaps XMMWORD PTR [rbp-0x30],xmm0
    const bInt = @bitCast(srep_t, b);
  236998:	0f 28 45 e0          	movaps xmm0,XMMWORD PTR [rbp-0x20]
  23699c:	0f 29 45 c0          	movaps XMMWORD PTR [rbp-0x40],xmm0
    const aAbs = @bitCast(rep_t, aInt) & absMask;
  2369a0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2369a4:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  2369a8:	b2 3f                	mov    dl,0x3f
  2369aa:	40 88 d6             	mov    sil,dl
  2369ad:	c4 e2 c8 f5 c9       	bzhi   rcx,rcx,rsi
  2369b2:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  2369b6:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
    const bAbs = @bitCast(rep_t, bInt) & absMask;
  2369ba:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  2369be:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  2369c2:	c4 e2 c8 f5 c9       	bzhi   rcx,rcx,rsi
  2369c7:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  2369cb:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx

    if (aAbs > infRep or bAbs > infRep) return GE_UNORDERED;
  2369cf:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  2369d3:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  2369d7:	48 f7 d8             	neg    rax
  2369da:	48 be 00 00 00 00 00 	movabs rsi,0x7fff000000000000
  2369e1:	00 ff 7f 
  2369e4:	48 19 ce             	sbb    rsi,rcx
  2369e7:	0f 92 c2             	setb   dl
  2369ea:	f6 c2 01             	test   dl,0x1
  2369ed:	48 89 75 98          	mov    QWORD PTR [rbp-0x68],rsi
  2369f1:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  2369f5:	88 55 8f             	mov    BYTE PTR [rbp-0x71],dl
  2369f8:	75 2b                	jne    236a25 <__gttf2+0xa5>
  2369fa:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2369fe:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  236a02:	48 f7 d8             	neg    rax
  236a05:	48 ba 00 00 00 00 00 	movabs rdx,0x7fff000000000000
  236a0c:	00 ff 7f 
  236a0f:	48 19 ca             	sbb    rdx,rcx
  236a12:	40 0f 92 c6          	setb   sil
  236a16:	48 89 55 80          	mov    QWORD PTR [rbp-0x80],rdx
  236a1a:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  236a21:	40 88 75 8f          	mov    BYTE PTR [rbp-0x71],sil
  236a25:	8a 45 8f             	mov    al,BYTE PTR [rbp-0x71]
  236a28:	a8 01                	test   al,0x1
  236a2a:	75 02                	jne    236a2e <__gttf2+0xae>
  236a2c:	eb 0b                	jmp    236a39 <__gttf2+0xb9>
  236a2e:	b8 ff ff ff ff       	mov    eax,0xffffffff
  236a33:	48 83 c4 50          	add    rsp,0x50
  236a37:	5d                   	pop    rbp
  236a38:	c3                   	ret    
  236a39:	eb 00                	jmp    236a3b <__gttf2+0xbb>
    if ((aAbs | bAbs) == 0) return GE_EQUAL;
  236a3b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  236a3f:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  236a43:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  236a47:	48 8b 75 a8          	mov    rsi,QWORD PTR [rbp-0x58]
  236a4b:	48 09 f1             	or     rcx,rsi
  236a4e:	48 09 d0             	or     rax,rdx
  236a51:	48 09 c8             	or     rax,rcx
  236a54:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  236a5b:	75 0a                	jne    236a67 <__gttf2+0xe7>
  236a5d:	eb 00                	jmp    236a5f <__gttf2+0xdf>
  236a5f:	31 c0                	xor    eax,eax
  236a61:	48 83 c4 50          	add    rsp,0x50
  236a65:	5d                   	pop    rbp
  236a66:	c3                   	ret    
  236a67:	eb 00                	jmp    236a69 <__gttf2+0xe9>
    return if ((aInt & bInt) >= 0) if (aInt < bInt)
  236a69:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  236a6d:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  236a71:	48 85 c8             	test   rax,rcx
  236a74:	0f 88 8c 00 00 00    	js     236b06 <__gttf2+0x186>
  236a7a:	eb 00                	jmp    236a7c <__gttf2+0xfc>
  236a7c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  236a80:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  236a84:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  236a88:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  236a8c:	48 29 d0             	sub    rax,rdx
  236a8f:	48 19 f1             	sbb    rcx,rsi
  236a92:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
  236a99:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  236aa0:	7d 0f                	jge    236ab1 <__gttf2+0x131>
  236aa2:	eb 00                	jmp    236aa4 <__gttf2+0x124>
  236aa4:	b8 ff ff ff ff       	mov    eax,0xffffffff
  236aa9:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
  236aaf:	eb 44                	jmp    236af5 <__gttf2+0x175>
        GE_LESS
    else if (aInt == bInt)
  236ab1:	c5 fa 6f 45 d0       	vmovdqu xmm0,XMMWORD PTR [rbp-0x30]
  236ab6:	c5 fa 6f 4d c0       	vmovdqu xmm1,XMMWORD PTR [rbp-0x40]
  236abb:	c5 f9 74 c1          	vpcmpeqb xmm0,xmm0,xmm1
  236abf:	c5 f9 d7 c0          	vpmovmskb eax,xmm0
  236ac3:	2d ff ff 00 00       	sub    eax,0xffff
  236ac8:	89 85 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],eax
  236ace:	75 0c                	jne    236adc <__gttf2+0x15c>
  236ad0:	eb 00                	jmp    236ad2 <__gttf2+0x152>
  236ad2:	31 c0                	xor    eax,eax
  236ad4:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
  236ada:	eb 0d                	jmp    236ae9 <__gttf2+0x169>
  236adc:	b8 01 00 00 00       	mov    eax,0x1
  236ae1:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
  236ae7:	eb 00                	jmp    236ae9 <__gttf2+0x169>
  236ae9:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
  236aef:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
    return if ((aInt & bInt) >= 0) if (aInt < bInt)
  236af5:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
  236afb:	89 85 50 ff ff ff    	mov    DWORD PTR [rbp-0xb0],eax
  236b01:	e9 85 00 00 00       	jmp    236b8b <__gttf2+0x20b>
        GE_EQUAL
    else
        GE_GREATER else if (aInt > bInt)
  236b06:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  236b0a:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  236b0e:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  236b12:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  236b16:	48 29 c2             	sub    rdx,rax
  236b19:	48 19 ce             	sbb    rsi,rcx
  236b1c:	48 89 95 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdx
  236b23:	48 89 b5 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rsi
  236b2a:	7d 0f                	jge    236b3b <__gttf2+0x1bb>
  236b2c:	eb 00                	jmp    236b2e <__gttf2+0x1ae>
  236b2e:	b8 ff ff ff ff       	mov    eax,0xffffffff
  236b33:	89 85 3c ff ff ff    	mov    DWORD PTR [rbp-0xc4],eax
  236b39:	eb 44                	jmp    236b7f <__gttf2+0x1ff>
        GE_LESS
    else if (aInt == bInt)
  236b3b:	c5 fa 6f 45 d0       	vmovdqu xmm0,XMMWORD PTR [rbp-0x30]
  236b40:	c5 fa 6f 4d c0       	vmovdqu xmm1,XMMWORD PTR [rbp-0x40]
  236b45:	c5 f9 74 c1          	vpcmpeqb xmm0,xmm0,xmm1
  236b49:	c5 f9 d7 c0          	vpmovmskb eax,xmm0
  236b4d:	2d ff ff 00 00       	sub    eax,0xffff
  236b52:	89 85 38 ff ff ff    	mov    DWORD PTR [rbp-0xc8],eax
  236b58:	75 0c                	jne    236b66 <__gttf2+0x1e6>
  236b5a:	eb 00                	jmp    236b5c <__gttf2+0x1dc>
  236b5c:	31 c0                	xor    eax,eax
  236b5e:	89 85 34 ff ff ff    	mov    DWORD PTR [rbp-0xcc],eax
  236b64:	eb 0d                	jmp    236b73 <__gttf2+0x1f3>
  236b66:	b8 01 00 00 00       	mov    eax,0x1
  236b6b:	89 85 34 ff ff ff    	mov    DWORD PTR [rbp-0xcc],eax
  236b71:	eb 00                	jmp    236b73 <__gttf2+0x1f3>
  236b73:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
  236b79:	89 85 3c ff ff ff    	mov    DWORD PTR [rbp-0xc4],eax
        GE_GREATER else if (aInt > bInt)
  236b7f:	8b 85 3c ff ff ff    	mov    eax,DWORD PTR [rbp-0xc4]
  236b85:	89 85 50 ff ff ff    	mov    DWORD PTR [rbp-0xb0],eax
    return if ((aInt & bInt) >= 0) if (aInt < bInt)
  236b8b:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
  236b91:	48 83 c4 50          	add    rsp,0x50
  236b95:	5d                   	pop    rbp
  236b96:	c3                   	ret    
  236b97:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  236b9e:	00 00 

0000000000236ba0 <__extendhfsf2>:

pub extern fn __extendsftf2(a: f32) f128 {
    return extendXfYf2(f128, f32, a);
}

pub extern fn __extendhfsf2(a: u16) f32 {
  236ba0:	55                   	push   rbp
  236ba1:	48 89 e5             	mov    rbp,rsp
  236ba4:	48 83 ec 50          	sub    rsp,0x50
  236ba8:	66 89 f8             	mov    ax,di
  236bab:	be aa 00 00 00       	mov    esi,0xaa
  236bb0:	bf 04 00 00 00       	mov    edi,0x4
  236bb5:	89 fa                	mov    edx,edi
  236bb7:	48 8d 4d ec          	lea    rcx,[rbp-0x14]
  236bbb:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
    return extendXfYf2(f32, f16, @bitCast(f16, a));
  236bbf:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  236bc3:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
    const dstBits = @sizeOf(dst_t) * CHAR_BIT;
    const dstExpBits = dstBits - dstSigBits - 1;
    const dstInfExp = (1 << dstExpBits) - 1;
    const dstExpBias = dstInfExp >> 1;

    const dstMinNormal: dst_rep_t = dst_rep_t(1) << dstSigBits;
  236bc7:	c7 45 f8 00 00 80 00 	mov    DWORD PTR [rbp-0x8],0x800000

    // Break a into a sign and representation of the absolute value
    const aRep: src_rep_t = @bitCast(src_rep_t, a);
  236bce:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  236bd2:	66 89 45 f6          	mov    WORD PTR [rbp-0xa],ax
    const aAbs: src_rep_t = aRep & srcAbsMask;
  236bd6:	66 8b 45 f6          	mov    ax,WORD PTR [rbp-0xa]
  236bda:	66 25 ff 7f          	and    ax,0x7fff
  236bde:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
    const sign: src_rep_t = aRep & srcSignMask;
  236be2:	66 8b 45 f6          	mov    ax,WORD PTR [rbp-0xa]
  236be6:	66 25 00 80          	and    ax,0x8000
  236bea:	66 89 45 f2          	mov    WORD PTR [rbp-0xe],ax
    var absResult: dst_rep_t = undefined;
  236bee:	48 89 cf             	mov    rdi,rcx
  236bf1:	e8 ba dc ff ff       	call   2348b0 <memset>

    if (aAbs -% srcMinNormal < srcInfinity - srcMinNormal) {
  236bf6:	66 8b 45 f4          	mov    ax,WORD PTR [rbp-0xc]
  236bfa:	66 2d 00 04          	sub    ax,0x400
  236bfe:	66 3d 00 78          	cmp    ax,0x7800
  236c02:	73 26                	jae    236c2a <__extendhfsf2+0x8a>
        // a is a normal number.
        // Extend to the destination type by shifting the significand and
        // exponent into the proper position and rebiasing the exponent.
        absResult = dst_rep_t(aAbs) << (dstSigBits - srcSigBits);
  236c04:	0f b7 45 f4          	movzx  eax,WORD PTR [rbp-0xc]
  236c08:	c1 e0 0d             	shl    eax,0xd
  236c0b:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
        absResult += (dstExpBias - srcExpBias) << dstSigBits;
  236c0e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  236c11:	05 00 00 00 38       	add    eax,0x38000000
  236c16:	0f 92 c1             	setb   cl
  236c19:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
  236c1c:	88 4d d7             	mov    BYTE PTR [rbp-0x29],cl
  236c1f:	0f 82 84 00 00 00    	jb     236ca9 <__extendhfsf2+0x109>
  236c25:	e9 8f 00 00 00       	jmp    236cb9 <__extendhfsf2+0x119>
    } else if (aAbs >= srcInfinity) {
  236c2a:	66 81 7d f4 00 7c    	cmp    WORD PTR [rbp-0xc],0x7c00
  236c30:	72 37                	jb     236c69 <__extendhfsf2+0xc9>
        // a is NaN or infinity.
        // Conjure the result by beginning with infinity, then setting the qNaN
        // bit (if needed) and right-aligning the rest of the trailing NaN
        // payload field.
        absResult = dstInfExp << dstSigBits;
  236c32:	c7 45 ec 00 00 80 7f 	mov    DWORD PTR [rbp-0x14],0x7f800000
        absResult |= dst_rep_t(aAbs & srcQNaN) << (dstSigBits - srcSigBits);
  236c39:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  236c3c:	66 8b 4d f4          	mov    cx,WORD PTR [rbp-0xc]
  236c40:	66 81 e1 00 02       	and    cx,0x200
  236c45:	0f b7 d1             	movzx  edx,cx
  236c48:	c1 e2 0d             	shl    edx,0xd
  236c4b:	09 d0                	or     eax,edx
  236c4d:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
        absResult |= dst_rep_t(aAbs & srcNaNCode) << (dstSigBits - srcSigBits);
  236c50:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  236c53:	66 8b 4d f4          	mov    cx,WORD PTR [rbp-0xc]
  236c57:	66 81 e1 ff 01       	and    cx,0x1ff
  236c5c:	0f b7 d1             	movzx  edx,cx
  236c5f:	c1 e2 0d             	shl    edx,0xd
  236c62:	09 d0                	or     eax,edx
  236c64:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    } else if (aAbs >= srcInfinity) {
  236c67:	eb 3b                	jmp    236ca4 <__extendhfsf2+0x104>
    } else if (aAbs != 0) {
  236c69:	66 83 7d f4 00       	cmp    WORD PTR [rbp-0xc],0x0
  236c6e:	74 2b                	je     236c9b <__extendhfsf2+0xfb>
        // a is denormal.
        // renormalize the significand and clear the leading bit, then insert
        // the correct adjusted exponent in the destination type.
        const scale: u32 = @clz(aAbs) - @clz(src_rep_t(srcMinNormal));
  236c70:	66 f3 0f bd 45 f4    	lzcnt  ax,WORD PTR [rbp-0xc]
  236c76:	88 c1                	mov    cl,al
  236c78:	80 c1 fb             	add    cl,0xfb
  236c7b:	88 ca                	mov    dl,cl
  236c7d:	80 e2 1f             	and    dl,0x1f
  236c80:	28 ca                	sub    dl,cl
  236c82:	40 0f 95 c6          	setne  sil
  236c86:	40 88 cf             	mov    dil,cl
  236c89:	40 f6 c6 01          	test   sil,0x1
  236c8d:	88 4d d6             	mov    BYTE PTR [rbp-0x2a],cl
  236c90:	88 55 d5             	mov    BYTE PTR [rbp-0x2b],dl
  236c93:	40 88 7d d4          	mov    BYTE PTR [rbp-0x2c],dil
  236c97:	75 2b                	jne    236cc4 <__extendhfsf2+0x124>
  236c99:	eb 39                	jmp    236cd4 <__extendhfsf2+0x134>
        absResult ^= dstMinNormal;
        const resultExponent: u32 = dstExpBias - srcExpBias - scale + 1;
        absResult |= @intCast(dst_rep_t, resultExponent) << dstSigBits;
    } else {
        // a is zero.
        absResult = 0;
  236c9b:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
    } else if (aAbs >= srcInfinity) {
  236ca2:	eb 00                	jmp    236ca4 <__extendhfsf2+0x104>
    if (aAbs -% srcMinNormal < srcInfinity - srcMinNormal) {
  236ca4:	e9 00 01 00 00       	jmp    236da9 <__extendhfsf2+0x209>
  236ca9:	48 8d 3d e8 d1 00 00 	lea    rdi,[rip+0xd1e8]        # 243e98 <__unnamed_2>
  236cb0:	31 c0                	xor    eax,eax
  236cb2:	89 c6                	mov    esi,eax
        absResult += (dstExpBias - srcExpBias) << dstSigBits;
  236cb4:	e8 37 fb ff ff       	call   2367f0 <panic>
  236cb9:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  236cbc:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    if (aAbs -% srcMinNormal < srcInfinity - srcMinNormal) {
  236cbf:	e9 e5 00 00 00       	jmp    236da9 <__extendhfsf2+0x209>
  236cc4:	48 8d 3d cd d1 00 00 	lea    rdi,[rip+0xd1cd]        # 243e98 <__unnamed_2>
  236ccb:	31 c0                	xor    eax,eax
  236ccd:	89 c6                	mov    esi,eax
        const scale: u32 = @clz(aAbs) - @clz(src_rep_t(srcMinNormal));
  236ccf:	e8 1c fb ff ff       	call   2367f0 <panic>
  236cd4:	8a 45 d6             	mov    al,BYTE PTR [rbp-0x2a]
  236cd7:	24 1f                	and    al,0x1f
  236cd9:	0f b6 c8             	movzx  ecx,al
  236cdc:	89 4d e8             	mov    DWORD PTR [rbp-0x18],ecx
        absResult = dst_rep_t(aAbs) << @intCast(DstShift, dstSigBits - srcSigBits + scale);
  236cdf:	0f b7 4d f4          	movzx  ecx,WORD PTR [rbp-0xc]
  236ce3:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
  236ce6:	83 c2 0d             	add    edx,0xd
  236ce9:	0f 92 c0             	setb   al
  236cec:	89 4d d0             	mov    DWORD PTR [rbp-0x30],ecx
  236cef:	89 55 cc             	mov    DWORD PTR [rbp-0x34],edx
  236cf2:	88 45 cb             	mov    BYTE PTR [rbp-0x35],al
  236cf5:	72 02                	jb     236cf9 <__extendhfsf2+0x159>
  236cf7:	eb 10                	jmp    236d09 <__extendhfsf2+0x169>
  236cf9:	48 8d 3d 98 d1 00 00 	lea    rdi,[rip+0xd198]        # 243e98 <__unnamed_2>
  236d00:	31 c0                	xor    eax,eax
  236d02:	89 c6                	mov    esi,eax
  236d04:	e8 e7 fa ff ff       	call   2367f0 <panic>
  236d09:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  236d0c:	88 c1                	mov    cl,al
  236d0e:	83 e0 1f             	and    eax,0x1f
  236d11:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
  236d14:	39 c2                	cmp    edx,eax
  236d16:	88 4d ca             	mov    BYTE PTR [rbp-0x36],cl
  236d19:	75 32                	jne    236d4d <__extendhfsf2+0x1ad>
  236d1b:	b8 70 00 00 00       	mov    eax,0x70
  236d20:	8a 4d ca             	mov    cl,BYTE PTR [rbp-0x36]
  236d23:	80 e1 1f             	and    cl,0x1f
  236d26:	0f b6 c9             	movzx  ecx,cl
  236d29:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
  236d2c:	d3 e2                	shl    edx,cl
  236d2e:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
        absResult ^= dstMinNormal;
  236d31:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
  236d34:	81 f2 00 00 80 00    	xor    edx,0x800000
  236d3a:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
        const resultExponent: u32 = dstExpBias - srcExpBias - scale + 1;
  236d3d:	2b 45 e8             	sub    eax,DWORD PTR [rbp-0x18]
  236d40:	0f 92 c1             	setb   cl
  236d43:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
  236d46:	88 4d c3             	mov    BYTE PTR [rbp-0x3d],cl
  236d49:	72 12                	jb     236d5d <__extendhfsf2+0x1bd>
  236d4b:	eb 20                	jmp    236d6d <__extendhfsf2+0x1cd>
  236d4d:	48 8d 3d 5c d1 00 00 	lea    rdi,[rip+0xd15c]        # 243eb0 <__unnamed_3>
  236d54:	31 c0                	xor    eax,eax
  236d56:	89 c6                	mov    esi,eax
        absResult = dst_rep_t(aAbs) << @intCast(DstShift, dstSigBits - srcSigBits + scale);
  236d58:	e8 93 fa ff ff       	call   2367f0 <panic>
  236d5d:	48 8d 3d 34 d1 00 00 	lea    rdi,[rip+0xd134]        # 243e98 <__unnamed_2>
  236d64:	31 c0                	xor    eax,eax
  236d66:	89 c6                	mov    esi,eax
        const resultExponent: u32 = dstExpBias - srcExpBias - scale + 1;
  236d68:	e8 83 fa ff ff       	call   2367f0 <panic>
  236d6d:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
  236d70:	83 c0 01             	add    eax,0x1
  236d73:	0f 92 c1             	setb   cl
  236d76:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
  236d79:	88 4d bb             	mov    BYTE PTR [rbp-0x45],cl
  236d7c:	72 02                	jb     236d80 <__extendhfsf2+0x1e0>
  236d7e:	eb 10                	jmp    236d90 <__extendhfsf2+0x1f0>
  236d80:	48 8d 3d 11 d1 00 00 	lea    rdi,[rip+0xd111]        # 243e98 <__unnamed_2>
  236d87:	31 c0                	xor    eax,eax
  236d89:	89 c6                	mov    esi,eax
  236d8b:	e8 60 fa ff ff       	call   2367f0 <panic>
  236d90:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  236d93:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
        absResult |= @intCast(dst_rep_t, resultExponent) << dstSigBits;
  236d96:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
  236d99:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
  236d9c:	c1 e2 17             	shl    edx,0x17
  236d9f:	09 d1                	or     ecx,edx
  236da1:	89 4d ec             	mov    DWORD PTR [rbp-0x14],ecx
    } else if (aAbs != 0) {
  236da4:	e9 f9 fe ff ff       	jmp    236ca2 <__extendhfsf2+0x102>
    }

    // Apply the signbit to (dst_t)abs(a).
    const result: dst_rep_t align(@alignOf(dst_t)) = absResult | dst_rep_t(sign) << (dstBits - srcBits);
  236da9:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  236dac:	0f b7 4d f2          	movzx  ecx,WORD PTR [rbp-0xe]
  236db0:	c1 e1 10             	shl    ecx,0x10
  236db3:	09 c8                	or     eax,ecx
  236db5:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    return @bitCast(dst_t, result);
  236db8:	c5 f9 6e 45 e0       	vmovd  xmm0,DWORD PTR [rbp-0x20]
    return extendXfYf2(f32, f16, @bitCast(f16, a));
  236dbd:	48 83 c4 50          	add    rsp,0x50
  236dc1:	5d                   	pop    rbp
  236dc2:	c3                   	ret    
  236dc3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  236dca:	84 00 00 00 00 00 

0000000000236dd0 <__truncsfhf2>:
const std = @import("std");

pub extern fn __truncsfhf2(a: f32) u16 {
  236dd0:	55                   	push   rbp
  236dd1:	48 89 e5             	mov    rbp,rsp
  236dd4:	48 83 ec 70          	sub    rsp,0x70
  236dd8:	be aa 00 00 00       	mov    esi,0xaa
  236ddd:	b8 02 00 00 00       	mov    eax,0x2
  236de2:	89 c2                	mov    edx,eax
  236de4:	48 8d 4d ee          	lea    rcx,[rbp-0x12]
  236de8:	c5 fa 11 45 c8       	vmovss DWORD PTR [rbp-0x38],xmm0
    return @bitCast(u16, truncXfYf2(f16, f32, a));
  236ded:	c5 fa 10 45 c8       	vmovss xmm0,DWORD PTR [rbp-0x38]
  236df2:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0

    const dstQNaN = 1 << (dstSigBits - 1);
    const dstNaNCode = dstQNaN - 1;

    // Break a into a sign and representation of the absolute value
    const aRep: src_rep_t = @bitCast(src_rep_t, a);
  236df7:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  236dfc:	c5 f9 7e c0          	vmovd  eax,xmm0
  236e00:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
    const aAbs: src_rep_t = aRep & srcAbsMask;
  236e03:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  236e06:	25 ff ff ff 7f       	and    eax,0x7fffffff
  236e0b:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    const sign: src_rep_t = aRep & srcSignMask;
  236e0e:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  236e11:	25 00 00 00 80       	and    eax,0x80000000
  236e16:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    var absResult: dst_rep_t = undefined;
  236e19:	48 89 cf             	mov    rdi,rcx
  236e1c:	e8 8f da ff ff       	call   2348b0 <memset>

    if (aAbs -% underflow < aAbs -% overflow) {
  236e21:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  236e24:	2d 00 00 80 38       	sub    eax,0x38800000
  236e29:	8b 75 f4             	mov    esi,DWORD PTR [rbp-0xc]
  236e2c:	81 ee 00 00 80 47    	sub    esi,0x47800000
  236e32:	39 f0                	cmp    eax,esi
  236e34:	0f 83 81 00 00 00    	jae    236ebb <__truncsfhf2+0xeb>
        // The exponent of a is within the range of normal numbers in the
        // destination format.  We can convert by simply right-shifting with
        // rounding and adjusting the exponent.
        absResult = @truncate(dst_rep_t, aAbs >> (srcSigBits - dstSigBits));
  236e3a:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  236e3d:	c1 e8 0d             	shr    eax,0xd
  236e40:	66 89 c1             	mov    cx,ax
  236e43:	66 89 4d ee          	mov    WORD PTR [rbp-0x12],cx
        absResult -%= dst_rep_t(srcExpBias - dstExpBias) << dstSigBits;
  236e47:	66 8b 4d ee          	mov    cx,WORD PTR [rbp-0x12]
  236e4b:	66 81 e9 00 c0       	sub    cx,0xc000
  236e50:	66 89 4d ee          	mov    WORD PTR [rbp-0x12],cx

        const roundBits: src_rep_t = aAbs & roundMask;
  236e54:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  236e57:	25 ff 1f 00 00       	and    eax,0x1fff
  236e5c:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
        if (roundBits > halfway) {
  236e5f:	81 7d e8 00 10 00 00 	cmp    DWORD PTR [rbp-0x18],0x1000
  236e66:	76 1d                	jbe    236e85 <__truncsfhf2+0xb5>
            // Round to nearest
            absResult += 1;
  236e68:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  236e6c:	66 83 c0 01          	add    ax,0x1
  236e70:	0f 92 c1             	setb   cl
  236e73:	f6 c1 01             	test   cl,0x1
  236e76:	66 89 45 c6          	mov    WORD PTR [rbp-0x3a],ax
  236e7a:	0f 85 43 01 00 00    	jne    236fc3 <__truncsfhf2+0x1f3>
  236e80:	e9 4e 01 00 00       	jmp    236fd3 <__truncsfhf2+0x203>
        } else if (roundBits == halfway) {
  236e85:	81 7d e8 00 10 00 00 	cmp    DWORD PTR [rbp-0x18],0x1000
  236e8c:	75 24                	jne    236eb2 <__truncsfhf2+0xe2>
            // Ties to even
            absResult += absResult & 1;
  236e8e:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  236e92:	66 8b 4d ee          	mov    cx,WORD PTR [rbp-0x12]
  236e96:	66 83 e1 01          	and    cx,0x1
  236e9a:	66 01 c8             	add    ax,cx
  236e9d:	0f 92 c2             	setb   dl
  236ea0:	f6 c2 01             	test   dl,0x1
  236ea3:	66 89 45 c4          	mov    WORD PTR [rbp-0x3c],ax
  236ea7:	0f 85 33 01 00 00    	jne    236fe0 <__truncsfhf2+0x210>
  236ead:	e9 3e 01 00 00       	jmp    236ff0 <__truncsfhf2+0x220>
        } else if (roundBits == halfway) {
  236eb2:	eb 00                	jmp    236eb4 <__truncsfhf2+0xe4>
        if (roundBits > halfway) {
  236eb4:	eb 00                	jmp    236eb6 <__truncsfhf2+0xe6>
    if (aAbs -% underflow < aAbs -% overflow) {
  236eb6:	e9 c6 02 00 00       	jmp    237181 <__truncsfhf2+0x3b1>
        }
    } else if (aAbs > srcInfinity) {
  236ebb:	81 7d f4 00 00 80 7f 	cmp    DWORD PTR [rbp-0xc],0x7f800000
  236ec2:	76 43                	jbe    236f07 <__truncsfhf2+0x137>
        // a is NaN.
        // Conjure the result by beginning with infinity, setting the qNaN
        // bit and inserting the (truncated) trailing NaN field.
        absResult = @intCast(dst_rep_t, dstInfExp) << dstSigBits;
  236ec4:	66 c7 45 ee 00 7c    	mov    WORD PTR [rbp-0x12],0x7c00
        absResult |= dstQNaN;
  236eca:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  236ece:	66 0d 00 02          	or     ax,0x200
  236ed2:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
        absResult |= @intCast(dst_rep_t, ((aAbs & srcNaNCode) >> (srcSigBits - dstSigBits)) & dstNaNCode);
  236ed6:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  236eda:	8b 4d f4             	mov    ecx,DWORD PTR [rbp-0xc]
  236edd:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
  236ee3:	c1 e9 0d             	shr    ecx,0xd
  236ee6:	81 e1 ff 01 00 00    	and    ecx,0x1ff
  236eec:	66 89 ca             	mov    dx,cx
  236eef:	0f b7 f2             	movzx  esi,dx
  236ef2:	39 f1                	cmp    ecx,esi
  236ef4:	66 89 45 c2          	mov    WORD PTR [rbp-0x3e],ax
  236ef8:	66 89 55 c0          	mov    WORD PTR [rbp-0x40],dx
  236efc:	0f 84 fb 00 00 00    	je     236ffd <__truncsfhf2+0x22d>
  236f02:	e9 07 01 00 00       	jmp    23700e <__truncsfhf2+0x23e>
    } else if (aAbs >= overflow) {
  236f07:	81 7d f4 00 00 80 47 	cmp    DWORD PTR [rbp-0xc],0x47800000
  236f0e:	72 0b                	jb     236f1b <__truncsfhf2+0x14b>
        // a overflows to infinity.
        absResult = @intCast(dst_rep_t, dstInfExp) << dstSigBits;
  236f10:	66 c7 45 ee 00 7c    	mov    WORD PTR [rbp-0x12],0x7c00
    } else if (aAbs >= overflow) {
  236f16:	e9 a1 00 00 00       	jmp    236fbc <__truncsfhf2+0x1ec>
  236f1b:	b8 70 00 00 00       	mov    eax,0x70
    } else {
        // a underflows on conversion to the destination type or is an exact
        // zero.  The result may be a denormal or zero.  Extract the exponent
        // to get the shift amount for the denormalization.
        const aExp = @intCast(u32, aAbs >> srcSigBits);
  236f20:	8b 4d f4             	mov    ecx,DWORD PTR [rbp-0xc]
  236f23:	c1 e9 17             	shr    ecx,0x17
  236f26:	89 4d e4             	mov    DWORD PTR [rbp-0x1c],ecx
        const shift = @intCast(u32, srcExpBias - dstExpBias - aExp + 1);
  236f29:	2b 45 e4             	sub    eax,DWORD PTR [rbp-0x1c]
  236f2c:	0f 92 c2             	setb   dl
  236f2f:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
  236f32:	88 55 bb             	mov    BYTE PTR [rbp-0x45],dl
  236f35:	0f 82 e3 00 00 00    	jb     23701e <__truncsfhf2+0x24e>
  236f3b:	e9 ee 00 00 00       	jmp    23702e <__truncsfhf2+0x25e>

        const significand: src_rep_t = (aRep & srcSignificandMask) | srcMinNormal;

        // Right shift by the denormalization amount with sticky.
        if (shift > srcSigBits) {
            absResult = 0;
  236f40:	66 c7 45 ee 00 00    	mov    WORD PTR [rbp-0x12],0x0
        if (shift > srcSigBits) {
  236f46:	eb 72                	jmp    236fba <__truncsfhf2+0x1ea>
  236f48:	b8 20 00 00 00       	mov    eax,0x20
        } else {
            const sticky: src_rep_t = significand << @intCast(SrcShift, srcBits - shift);
  236f4d:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  236f50:	2b 45 e0             	sub    eax,DWORD PTR [rbp-0x20]
  236f53:	0f 92 c2             	setb   dl
  236f56:	89 4d b4             	mov    DWORD PTR [rbp-0x4c],ecx
  236f59:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
  236f5c:	88 55 af             	mov    BYTE PTR [rbp-0x51],dl
  236f5f:	0f 82 13 01 00 00    	jb     237078 <__truncsfhf2+0x2a8>
  236f65:	e9 1e 01 00 00       	jmp    237088 <__truncsfhf2+0x2b8>
            const denormalizedSignificand: src_rep_t = significand >> @intCast(SrcShift, shift) | sticky;
            absResult = @intCast(dst_rep_t, denormalizedSignificand >> (srcSigBits - dstSigBits));
            const roundBits: src_rep_t = denormalizedSignificand & roundMask;
            if (roundBits > halfway) {
                // Round to nearest
                absResult += 1;
  236f6a:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  236f6e:	66 83 c0 01          	add    ax,0x1
  236f72:	0f 92 c1             	setb   cl
  236f75:	f6 c1 01             	test   cl,0x1
  236f78:	66 89 45 ac          	mov    WORD PTR [rbp-0x54],ax
  236f7c:	0f 85 c5 01 00 00    	jne    237147 <__truncsfhf2+0x377>
  236f82:	e9 d0 01 00 00       	jmp    237157 <__truncsfhf2+0x387>
            } else if (roundBits == halfway) {
  236f87:	81 7d d0 00 10 00 00 	cmp    DWORD PTR [rbp-0x30],0x1000
  236f8e:	75 24                	jne    236fb4 <__truncsfhf2+0x1e4>
                // Ties to even
                absResult += absResult & 1;
  236f90:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  236f94:	66 8b 4d ee          	mov    cx,WORD PTR [rbp-0x12]
  236f98:	66 83 e1 01          	and    cx,0x1
  236f9c:	66 01 c8             	add    ax,cx
  236f9f:	0f 92 c2             	setb   dl
  236fa2:	f6 c2 01             	test   dl,0x1
  236fa5:	66 89 45 aa          	mov    WORD PTR [rbp-0x56],ax
  236fa9:	0f 85 b5 01 00 00    	jne    237164 <__truncsfhf2+0x394>
  236faf:	e9 c0 01 00 00       	jmp    237174 <__truncsfhf2+0x3a4>
            } else if (roundBits == halfway) {
  236fb4:	eb 00                	jmp    236fb6 <__truncsfhf2+0x1e6>
            if (roundBits > halfway) {
  236fb6:	eb 00                	jmp    236fb8 <__truncsfhf2+0x1e8>
        if (shift > srcSigBits) {
  236fb8:	eb 00                	jmp    236fba <__truncsfhf2+0x1ea>
    } else if (aAbs >= overflow) {
  236fba:	eb 00                	jmp    236fbc <__truncsfhf2+0x1ec>
    } else if (aAbs > srcInfinity) {
  236fbc:	eb 00                	jmp    236fbe <__truncsfhf2+0x1ee>
    if (aAbs -% underflow < aAbs -% overflow) {
  236fbe:	e9 be 01 00 00       	jmp    237181 <__truncsfhf2+0x3b1>
  236fc3:	48 8d 3d ce ce 00 00 	lea    rdi,[rip+0xcece]        # 243e98 <__unnamed_2>
  236fca:	31 c0                	xor    eax,eax
  236fcc:	89 c6                	mov    esi,eax
            absResult += 1;
  236fce:	e8 1d f8 ff ff       	call   2367f0 <panic>
  236fd3:	66 8b 45 c6          	mov    ax,WORD PTR [rbp-0x3a]
  236fd7:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
        if (roundBits > halfway) {
  236fdb:	e9 d6 fe ff ff       	jmp    236eb6 <__truncsfhf2+0xe6>
  236fe0:	48 8d 3d b1 ce 00 00 	lea    rdi,[rip+0xceb1]        # 243e98 <__unnamed_2>
  236fe7:	31 c0                	xor    eax,eax
  236fe9:	89 c6                	mov    esi,eax
            absResult += absResult & 1;
  236feb:	e8 00 f8 ff ff       	call   2367f0 <panic>
  236ff0:	66 8b 45 c4          	mov    ax,WORD PTR [rbp-0x3c]
  236ff4:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
        } else if (roundBits == halfway) {
  236ff8:	e9 b7 fe ff ff       	jmp    236eb4 <__truncsfhf2+0xe4>
        absResult |= @intCast(dst_rep_t, ((aAbs & srcNaNCode) >> (srcSigBits - dstSigBits)) & dstNaNCode);
  236ffd:	66 8b 45 c2          	mov    ax,WORD PTR [rbp-0x3e]
  237001:	66 8b 4d c0          	mov    cx,WORD PTR [rbp-0x40]
  237005:	66 09 c8             	or     ax,cx
  237008:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
    } else if (aAbs > srcInfinity) {
  23700c:	eb b0                	jmp    236fbe <__truncsfhf2+0x1ee>
  23700e:	48 8d 3d 9b ce 00 00 	lea    rdi,[rip+0xce9b]        # 243eb0 <__unnamed_3>
  237015:	31 c0                	xor    eax,eax
  237017:	89 c6                	mov    esi,eax
        absResult |= @intCast(dst_rep_t, ((aAbs & srcNaNCode) >> (srcSigBits - dstSigBits)) & dstNaNCode);
  237019:	e8 d2 f7 ff ff       	call   2367f0 <panic>
  23701e:	48 8d 3d 73 ce 00 00 	lea    rdi,[rip+0xce73]        # 243e98 <__unnamed_2>
  237025:	31 c0                	xor    eax,eax
  237027:	89 c6                	mov    esi,eax
        const shift = @intCast(u32, srcExpBias - dstExpBias - aExp + 1);
  237029:	e8 c2 f7 ff ff       	call   2367f0 <panic>
  23702e:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  237031:	83 c0 01             	add    eax,0x1
  237034:	0f 92 c1             	setb   cl
  237037:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
  23703a:	88 4d a3             	mov    BYTE PTR [rbp-0x5d],cl
  23703d:	72 02                	jb     237041 <__truncsfhf2+0x271>
  23703f:	eb 10                	jmp    237051 <__truncsfhf2+0x281>
  237041:	48 8d 3d 50 ce 00 00 	lea    rdi,[rip+0xce50]        # 243e98 <__unnamed_2>
  237048:	31 c0                	xor    eax,eax
  23704a:	89 c6                	mov    esi,eax
  23704c:	e8 9f f7 ff ff       	call   2367f0 <panic>
  237051:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
  237054:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
        const significand: src_rep_t = (aRep & srcSignificandMask) | srcMinNormal;
  237057:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
  23705a:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
  237060:	81 c9 00 00 80 00    	or     ecx,0x800000
  237066:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
        if (shift > srcSigBits) {
  237069:	83 7d e0 17          	cmp    DWORD PTR [rbp-0x20],0x17
  23706d:	0f 87 cd fe ff ff    	ja     236f40 <__truncsfhf2+0x170>
  237073:	e9 d0 fe ff ff       	jmp    236f48 <__truncsfhf2+0x178>
  237078:	48 8d 3d 19 ce 00 00 	lea    rdi,[rip+0xce19]        # 243e98 <__unnamed_2>
  23707f:	31 c0                	xor    eax,eax
  237081:	89 c6                	mov    esi,eax
            const sticky: src_rep_t = significand << @intCast(SrcShift, srcBits - shift);
  237083:	e8 68 f7 ff ff       	call   2367f0 <panic>
  237088:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
  23708b:	88 c1                	mov    cl,al
  23708d:	83 e0 1f             	and    eax,0x1f
  237090:	8b 55 b0             	mov    edx,DWORD PTR [rbp-0x50]
  237093:	39 c2                	cmp    edx,eax
  237095:	88 4d a2             	mov    BYTE PTR [rbp-0x5e],cl
  237098:	75 2e                	jne    2370c8 <__truncsfhf2+0x2f8>
  23709a:	8a 4d a2             	mov    cl,BYTE PTR [rbp-0x5e]
  23709d:	88 c8                	mov    al,cl
  23709f:	8b 55 b4             	mov    edx,DWORD PTR [rbp-0x4c]
  2370a2:	c4 e2 79 f7 c2       	shlx   eax,edx,eax
  2370a7:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
            const denormalizedSignificand: src_rep_t = significand >> @intCast(SrcShift, shift) | sticky;
  2370aa:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  2370ad:	8b 75 e0             	mov    esi,DWORD PTR [rbp-0x20]
  2370b0:	40 88 f7             	mov    dil,sil
  2370b3:	41 89 f0             	mov    r8d,esi
  2370b6:	41 83 e0 1f          	and    r8d,0x1f
  2370ba:	44 39 c6             	cmp    esi,r8d
  2370bd:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
  2370c0:	40 88 7d 9b          	mov    BYTE PTR [rbp-0x65],dil
  2370c4:	74 12                	je     2370d8 <__truncsfhf2+0x308>
  2370c6:	eb 39                	jmp    237101 <__truncsfhf2+0x331>
  2370c8:	48 8d 3d e1 cd 00 00 	lea    rdi,[rip+0xcde1]        # 243eb0 <__unnamed_3>
  2370cf:	31 c0                	xor    eax,eax
  2370d1:	89 c6                	mov    esi,eax
            const sticky: src_rep_t = significand << @intCast(SrcShift, srcBits - shift);
  2370d3:	e8 18 f7 ff ff       	call   2367f0 <panic>
            const denormalizedSignificand: src_rep_t = significand >> @intCast(SrcShift, shift) | sticky;
  2370d8:	8a 45 9b             	mov    al,BYTE PTR [rbp-0x65]
  2370db:	24 1f                	and    al,0x1f
  2370dd:	0f b6 c8             	movzx  ecx,al
  2370e0:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
  2370e3:	d3 ea                	shr    edx,cl
  2370e5:	0b 55 d8             	or     edx,DWORD PTR [rbp-0x28]
  2370e8:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
            absResult = @intCast(dst_rep_t, denormalizedSignificand >> (srcSigBits - dstSigBits));
  2370eb:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
  2370ee:	c1 ea 0d             	shr    edx,0xd
  2370f1:	66 89 d6             	mov    si,dx
  2370f4:	0f b7 fe             	movzx  edi,si
  2370f7:	39 fa                	cmp    edx,edi
  2370f9:	66 89 75 98          	mov    WORD PTR [rbp-0x68],si
  2370fd:	74 12                	je     237111 <__truncsfhf2+0x341>
  2370ff:	eb 36                	jmp    237137 <__truncsfhf2+0x367>
  237101:	48 8d 3d a8 cd 00 00 	lea    rdi,[rip+0xcda8]        # 243eb0 <__unnamed_3>
  237108:	31 c0                	xor    eax,eax
  23710a:	89 c6                	mov    esi,eax
            const denormalizedSignificand: src_rep_t = significand >> @intCast(SrcShift, shift) | sticky;
  23710c:	e8 df f6 ff ff       	call   2367f0 <panic>
            absResult = @intCast(dst_rep_t, denormalizedSignificand >> (srcSigBits - dstSigBits));
  237111:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  237115:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
            const roundBits: src_rep_t = denormalizedSignificand & roundMask;
  237119:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
  23711c:	81 e1 ff 1f 00 00    	and    ecx,0x1fff
  237122:	89 4d d0             	mov    DWORD PTR [rbp-0x30],ecx
            if (roundBits > halfway) {
  237125:	81 7d d0 00 10 00 00 	cmp    DWORD PTR [rbp-0x30],0x1000
  23712c:	0f 87 38 fe ff ff    	ja     236f6a <__truncsfhf2+0x19a>
  237132:	e9 50 fe ff ff       	jmp    236f87 <__truncsfhf2+0x1b7>
  237137:	48 8d 3d 72 cd 00 00 	lea    rdi,[rip+0xcd72]        # 243eb0 <__unnamed_3>
  23713e:	31 c0                	xor    eax,eax
  237140:	89 c6                	mov    esi,eax
            absResult = @intCast(dst_rep_t, denormalizedSignificand >> (srcSigBits - dstSigBits));
  237142:	e8 a9 f6 ff ff       	call   2367f0 <panic>
  237147:	48 8d 3d 4a cd 00 00 	lea    rdi,[rip+0xcd4a]        # 243e98 <__unnamed_2>
  23714e:	31 c0                	xor    eax,eax
  237150:	89 c6                	mov    esi,eax
                absResult += 1;
  237152:	e8 99 f6 ff ff       	call   2367f0 <panic>
  237157:	66 8b 45 ac          	mov    ax,WORD PTR [rbp-0x54]
  23715b:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
            if (roundBits > halfway) {
  23715f:	e9 54 fe ff ff       	jmp    236fb8 <__truncsfhf2+0x1e8>
  237164:	48 8d 3d 2d cd 00 00 	lea    rdi,[rip+0xcd2d]        # 243e98 <__unnamed_2>
  23716b:	31 c0                	xor    eax,eax
  23716d:	89 c6                	mov    esi,eax
                absResult += absResult & 1;
  23716f:	e8 7c f6 ff ff       	call   2367f0 <panic>
  237174:	66 8b 45 aa          	mov    ax,WORD PTR [rbp-0x56]
  237178:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
            } else if (roundBits == halfway) {
  23717c:	e9 35 fe ff ff       	jmp    236fb6 <__truncsfhf2+0x1e6>
            }
        }
    }

    const result: dst_rep_t align(@alignOf(dst_t)) = absResult | @truncate(dst_rep_t, sign >> @intCast(SrcShift, srcBits - dstBits));
  237181:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  237185:	66 8b 4d f2          	mov    cx,WORD PTR [rbp-0xe]
  237189:	66 09 c8             	or     ax,cx
  23718c:	66 89 45 ce          	mov    WORD PTR [rbp-0x32],ax
    return @bitCast(dst_t, result);
  237190:	66 8b 45 ce          	mov    ax,WORD PTR [rbp-0x32]
    return @bitCast(u16, truncXfYf2(f16, f32, a));
  237194:	48 83 c4 70          	add    rsp,0x70
  237198:	5d                   	pop    rbp
  237199:	c3                   	ret    
  23719a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000002371a0 <__unordtf2>:
        GE_EQUAL
    else
        GE_GREATER;
}

pub extern fn __unordtf2(a: f128, b: f128) c_int {
  2371a0:	55                   	push   rbp
  2371a1:	48 89 e5             	mov    rbp,rsp
  2371a4:	0f 29 45 f0          	movaps XMMWORD PTR [rbp-0x10],xmm0
  2371a8:	0f 29 4d e0          	movaps XMMWORD PTR [rbp-0x20],xmm1
    @setRuntimeSafety(is_test);

    const aAbs = @bitCast(rep_t, a) & absMask;
  2371ac:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2371b0:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  2371b4:	b2 3f                	mov    dl,0x3f
  2371b6:	40 88 d6             	mov    sil,dl
  2371b9:	c4 e2 c8 f5 c9       	bzhi   rcx,rcx,rsi
  2371be:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  2371c2:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
    const bAbs = @bitCast(rep_t, b) & absMask;
  2371c6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2371ca:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2371ce:	c4 e2 c8 f5 c9       	bzhi   rcx,rcx,rsi
  2371d3:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  2371d7:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
    return @boolToInt(aAbs > infRep or bAbs > infRep);
  2371db:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2371df:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  2371e3:	48 f7 d8             	neg    rax
  2371e6:	48 be 00 00 00 00 00 	movabs rsi,0x7fff000000000000
  2371ed:	00 ff 7f 
  2371f0:	48 19 ce             	sbb    rsi,rcx
  2371f3:	0f 92 c2             	setb   dl
  2371f6:	f6 c2 01             	test   dl,0x1
  2371f9:	48 89 75 b8          	mov    QWORD PTR [rbp-0x48],rsi
  2371fd:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  237201:	88 55 af             	mov    BYTE PTR [rbp-0x51],dl
  237204:	75 28                	jne    23722e <__unordtf2+0x8e>
  237206:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  23720a:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  23720e:	48 f7 d8             	neg    rax
  237211:	48 ba 00 00 00 00 00 	movabs rdx,0x7fff000000000000
  237218:	00 ff 7f 
  23721b:	48 19 ca             	sbb    rdx,rcx
  23721e:	40 0f 92 c6          	setb   sil
  237222:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  237226:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  23722a:	40 88 75 af          	mov    BYTE PTR [rbp-0x51],sil
  23722e:	8a 45 af             	mov    al,BYTE PTR [rbp-0x51]
  237231:	24 01                	and    al,0x1
  237233:	0f b6 c0             	movzx  eax,al
  237236:	5d                   	pop    rbp
  237237:	c3                   	ret    
  237238:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  23723f:	00 

0000000000237240 <__floattitf>:
const builtin = @import("builtin");
const is_test = builtin.is_test;

const LDBL_MANT_DIG = 113;

pub extern fn __floattitf(arg: i128) f128 {
  237240:	55                   	push   rbp
  237241:	48 89 e5             	mov    rbp,rsp
  237244:	41 57                	push   r15
  237246:	41 56                	push   r14
  237248:	53                   	push   rbx
  237249:	48 83 ec 48          	sub    rsp,0x48
  23724d:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  237251:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    @setRuntimeSafety(is_test);

    if (arg == 0)
  237255:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  237259:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  23725d:	48 09 fe             	or     rsi,rdi
  237260:	48 89 b5 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rsi
  237267:	75 14                	jne    23727d <__floattitf+0x3d>
  237269:	eb 00                	jmp    23726b <__floattitf+0x2b>
        return 0.0;
  23726b:	0f 28 05 3e 90 fc ff 	movaps xmm0,XMMWORD PTR [rip+0xfffffffffffc903e]        # 2002b0 <__unnamed_100>
  237272:	48 83 c4 48          	add    rsp,0x48
  237276:	5b                   	pop    rbx
  237277:	41 5e                	pop    r14
  237279:	41 5f                	pop    r15
  23727b:	5d                   	pop    rbp
  23727c:	c3                   	ret    
    if (arg == 0)
  23727d:	eb 00                	jmp    23727f <__floattitf+0x3f>
  23727f:	b8 80 00 00 00       	mov    eax,0x80

    var ai = arg;
  237284:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  237288:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  23728c:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  237290:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
    const N: u32 = 128;
  237294:	c7 45 c4 80 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x80
    const si = ai >> @intCast(u7, (N - 1));
  23729b:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  23729f:	48 c1 f9 3f          	sar    rcx,0x3f
  2372a3:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
  2372a7:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
    ai = ((ai ^ si) -% si);
  2372ab:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  2372af:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  2372b3:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  2372b7:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  2372bb:	48 31 fa             	xor    rdx,rdi
  2372be:	48 31 f1             	xor    rcx,rsi
  2372c1:	48 29 f1             	sub    rcx,rsi
  2372c4:	48 19 fa             	sbb    rdx,rdi
  2372c7:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  2372cb:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
    var a = @bitCast(u128, ai);
  2372cf:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  2372d3:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  2372d7:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
  2372db:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx

    const sd = @bitCast(i32, N - @clz(a)); // number of significant digits
  2372df:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  2372e3:	f3 48 0f bd d1       	lzcnt  rdx,rcx
  2372e8:	41 88 d0             	mov    r8b,dl
  2372eb:	f3 48 0f bd 55 a0    	lzcnt  rdx,QWORD PTR [rbp-0x60]
  2372f1:	41 89 d1             	mov    r9d,edx
  2372f4:	41 83 c1 40          	add    r9d,0x40
  2372f8:	45 88 ca             	mov    r10b,r9b
  2372fb:	48 85 c9             	test   rcx,rcx
  2372fe:	89 85 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],eax
  237304:	44 88 95 43 ff ff ff 	mov    BYTE PTR [rbp-0xbd],r10b
  23730b:	44 88 85 42 ff ff ff 	mov    BYTE PTR [rbp-0xbe],r8b
  237312:	75 0c                	jne    237320 <__floattitf+0xe0>
  237314:	8a 85 43 ff ff ff    	mov    al,BYTE PTR [rbp-0xbd]
  23731a:	88 85 42 ff ff ff    	mov    BYTE PTR [rbp-0xbe],al
  237320:	8a 85 42 ff ff ff    	mov    al,BYTE PTR [rbp-0xbe]
  237326:	0f b6 c8             	movzx  ecx,al
  237329:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
  23732f:	29 ca                	sub    edx,ecx
  237331:	89 55 9c             	mov    DWORD PTR [rbp-0x64],edx
    var e: i32 = sd - 1; // exponent
  237334:	8b 4d 9c             	mov    ecx,DWORD PTR [rbp-0x64]
  237337:	83 e9 01             	sub    ecx,0x1
  23733a:	89 4d 98             	mov    DWORD PTR [rbp-0x68],ecx
    if (sd > LDBL_MANT_DIG) {
  23733d:	83 7d 9c 71          	cmp    DWORD PTR [rbp-0x64],0x71
  237341:	0f 8e 7e 01 00 00    	jle    2374c5 <__floattitf+0x285>
        //                                                12345678901234567890123456
        //  1 = msb 1 bit
        //  P = bit LDBL_MANT_DIG-1 bits to the right of 1
        //  Q = bit LDBL_MANT_DIG bits to the right of 1
        //  R = "or" of all bits to the right of Q
        switch (sd) {
  237347:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
  23734a:	89 c1                	mov    ecx,eax
  23734c:	83 e9 72             	sub    ecx,0x72
  23734f:	89 85 3c ff ff ff    	mov    DWORD PTR [rbp-0xc4],eax
  237355:	89 8d 38 ff ff ff    	mov    DWORD PTR [rbp-0xc8],ecx
  23735b:	0f 84 c5 00 00 00    	je     237426 <__floattitf+0x1e6>
  237361:	eb 00                	jmp    237363 <__floattitf+0x123>
  237363:	8b 85 3c ff ff ff    	mov    eax,DWORD PTR [rbp-0xc4]
  237369:	83 e8 73             	sub    eax,0x73
  23736c:	89 85 34 ff ff ff    	mov    DWORD PTR [rbp-0xcc],eax
  237372:	0f 84 cb 00 00 00    	je     237443 <__floattitf+0x203>
  237378:	eb 00                	jmp    23737a <__floattitf+0x13a>
            LDBL_MANT_DIG + 1 => {
                a <<= 1;
            },
            LDBL_MANT_DIG + 2 => {},
            else => {
                const shift1_amt = @intCast(i32, sd - (LDBL_MANT_DIG + 2));
  23737a:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
  23737d:	83 c0 8d             	add    eax,0xffffff8d
  237380:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
                const shift1_amt_u7 = @intCast(u7, shift1_amt);
  237383:	8a 4d 94             	mov    cl,BYTE PTR [rbp-0x6c]
  237386:	80 e1 7f             	and    cl,0x7f
  237389:	88 4d 93             	mov    BYTE PTR [rbp-0x6d],cl

                const shift2_amt = @intCast(i32, N + (LDBL_MANT_DIG + 2)) - sd;
  23738c:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
  23738f:	ba f3 00 00 00       	mov    edx,0xf3
  237394:	29 c2                	sub    edx,eax
  237396:	89 55 8c             	mov    DWORD PTR [rbp-0x74],edx
                const shift2_amt_u7 = @intCast(u7, shift2_amt);
  237399:	8a 4d 8c             	mov    cl,BYTE PTR [rbp-0x74]
  23739c:	80 e1 7f             	and    cl,0x7f
  23739f:	88 4d 8b             	mov    BYTE PTR [rbp-0x75],cl

                a = (a >> shift1_amt_u7) | @boolToInt((a & (@intCast(u128, @maxValue(u128)) >> shift2_amt_u7)) != 0);
  2373a2:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  2373a6:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  2373aa:	8a 4d 93             	mov    cl,BYTE PTR [rbp-0x6d]
  2373ad:	88 8d 33 ff ff ff    	mov    BYTE PTR [rbp-0xcd],cl
  2373b3:	49 89 f0             	mov    r8,rsi
  2373b6:	49 0f ad f8          	shrd   r8,rdi,cl
  2373ba:	8a 8d 33 ff ff ff    	mov    cl,BYTE PTR [rbp-0xcd]
  2373c0:	41 88 c9             	mov    r9b,cl
  2373c3:	c4 62 b3 f7 cf       	shrx   r9,rdi,r9
  2373c8:	31 c0                	xor    eax,eax
  2373ca:	f6 c1 40             	test   cl,0x40
  2373cd:	4d 0f 45 c1          	cmovne r8,r9
  2373d1:	41 89 c2             	mov    r10d,eax
  2373d4:	4d 0f 45 ca          	cmovne r9,r10
  2373d8:	44 8a 5d 8b          	mov    r11b,BYTE PTR [rbp-0x75]
  2373dc:	48 c7 c3 ff ff ff ff 	mov    rbx,0xffffffffffffffff
  2373e3:	44 88 d9             	mov    cl,r11b
  2373e6:	49 89 de             	mov    r14,rbx
  2373e9:	4d 0f ad f6          	shrd   r14,r14,cl
  2373ed:	45 88 df             	mov    r15b,r11b
  2373f0:	c4 e2 83 f7 db       	shrx   rbx,rbx,r15
  2373f5:	41 f6 c3 40          	test   r11b,0x40
  2373f9:	4c 0f 45 f3          	cmovne r14,rbx
  2373fd:	49 0f 45 da          	cmovne rbx,r10
  237401:	4c 21 f6             	and    rsi,r14
  237404:	48 21 df             	and    rdi,rbx
  237407:	48 09 fe             	or     rsi,rdi
  23740a:	0f 95 c1             	setne  cl
  23740d:	0f b6 c1             	movzx  eax,cl
  237410:	89 c7                	mov    edi,eax
  237412:	49 09 f8             	or     r8,rdi
  237415:	4c 89 4d a8          	mov    QWORD PTR [rbp-0x58],r9
  237419:	4c 89 45 a0          	mov    QWORD PTR [rbp-0x60],r8
        switch (sd) {
  23741d:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  237424:	eb 1f                	jmp    237445 <__floattitf+0x205>
                a <<= 1;
  237426:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  23742a:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  23742e:	48 89 c2             	mov    rdx,rax
  237431:	48 01 d2             	add    rdx,rdx
  237434:	48 0f a4 c1 01       	shld   rcx,rax,0x1
  237439:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  23743d:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
        switch (sd) {
  237441:	eb 02                	jmp    237445 <__floattitf+0x205>
  237443:	eb 00                	jmp    237445 <__floattitf+0x205>
            },
        }
        // finish
        a |= @boolToInt((a & 4) != 0); // Or P into R
  237445:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  237449:	89 c1                	mov    ecx,eax
  23744b:	83 e1 04             	and    ecx,0x4
  23744e:	89 ca                	mov    edx,ecx
  237450:	48 c1 ea 02          	shr    rdx,0x2
  237454:	48 09 d0             	or     rax,rdx
  237457:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        a += 1; // round - this step may add a significant bit
  23745b:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  23745f:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  237463:	48 83 c0 01          	add    rax,0x1
  237467:	48 83 d2 00          	adc    rdx,0x0
  23746b:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  23746f:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
        a >>= 2; // dump Q and R
  237473:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  237477:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  23747b:	48 89 d6             	mov    rsi,rdx
  23747e:	48 0f a4 c6 3e       	shld   rsi,rax,0x3e
  237483:	48 c1 ea 02          	shr    rdx,0x2
  237487:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
  23748b:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
        // a is now rounded to LDBL_MANT_DIG or LDBL_MANT_DIG+1 bits
        if ((a & (u128(1) << LDBL_MANT_DIG)) != 0) {
  23748f:	40 8a 7d ae          	mov    dil,BYTE PTR [rbp-0x52]
  237493:	40 f6 c7 02          	test   dil,0x2
  237497:	74 28                	je     2374c1 <__floattitf+0x281>
  237499:	eb 00                	jmp    23749b <__floattitf+0x25b>
            a >>= 1;
  23749b:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  23749f:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  2374a3:	48 89 ca             	mov    rdx,rcx
  2374a6:	48 0f a4 c2 3f       	shld   rdx,rax,0x3f
  2374ab:	48 d1 e9             	shr    rcx,1
  2374ae:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  2374b2:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
            e += 1;
  2374b6:	8b 75 98             	mov    esi,DWORD PTR [rbp-0x68]
  2374b9:	83 c6 01             	add    esi,0x1
  2374bc:	89 75 98             	mov    DWORD PTR [rbp-0x68],esi
        if ((a & (u128(1) << LDBL_MANT_DIG)) != 0) {
  2374bf:	eb 02                	jmp    2374c3 <__floattitf+0x283>
  2374c1:	eb 00                	jmp    2374c3 <__floattitf+0x283>
    if (sd > LDBL_MANT_DIG) {
  2374c3:	eb 4b                	jmp    237510 <__floattitf+0x2d0>
        }
        // a is now rounded to LDBL_MANT_DIG bits
    } else {
        a <<= @intCast(u7, LDBL_MANT_DIG - sd);
  2374c5:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2374c9:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  2374cd:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
  2374d0:	be 71 00 00 00       	mov    esi,0x71
  2374d5:	29 d6                	sub    esi,edx
  2374d7:	40 88 f7             	mov    dil,sil
  2374da:	48 89 8d 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rcx
  2374e1:	40 88 f9             	mov    cl,dil
  2374e4:	4c 8b 85 20 ff ff ff 	mov    r8,QWORD PTR [rbp-0xe0]
  2374eb:	49 0f a5 c0          	shld   r8,rax,cl
  2374ef:	41 88 f9             	mov    r9b,dil
  2374f2:	c4 e2 b1 f7 c0       	shlx   rax,rax,r9
  2374f7:	31 d2                	xor    edx,edx
  2374f9:	40 f6 c7 40          	test   dil,0x40
  2374fd:	4c 0f 45 c0          	cmovne r8,rax
  237501:	41 89 d1             	mov    r9d,edx
  237504:	49 0f 45 c1          	cmovne rax,r9
  237508:	4c 89 45 a8          	mov    QWORD PTR [rbp-0x58],r8
  23750c:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        // a is now rounded to LDBL_MANT_DIG bits
    }

    const s = @bitCast(u128, arg) >> (128 - 64);
  237510:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  237514:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  23751b:	48 c7 45 80 00 00 00 	mov    QWORD PTR [rbp-0x80],0x0
  237522:	00 
    const high: u128 = (@intCast(u64, s) & 0x8000000000000000) | // sign
  237523:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  23752a:	48 b9 00 00 00 00 00 	movabs rcx,0x8000000000000000
  237531:	00 00 80 
  237534:	48 21 c8             	and    rax,rcx
        (@intCast(u64, (e + 16383)) << 48) | // exponent
  237537:	8b 55 98             	mov    edx,DWORD PTR [rbp-0x68]
  23753a:	81 c2 ff 3f 00 00    	add    edx,0x3fff
  237540:	89 d1                	mov    ecx,edx
  237542:	48 c1 e1 30          	shl    rcx,0x30
    const high: u128 = (@intCast(u64, s) & 0x8000000000000000) | // sign
  237546:	48 09 c8             	or     rax,rcx
        (@truncate(u64, a >> 64) & 0x0000ffffffffffff); // mantissa-high
  237549:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  23754d:	40 b6 30             	mov    sil,0x30
  237550:	40 88 f7             	mov    dil,sil
  237553:	c4 e2 c0 f5 c9       	bzhi   rcx,rcx,rdi
        (@intCast(u64, (e + 16383)) << 48) | // exponent
  237558:	48 09 c8             	or     rax,rcx
    const high: u128 = (@intCast(u64, s) & 0x8000000000000000) | // sign
  23755b:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  237562:	48 c7 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],0x0
  237569:	00 00 00 00 
    const low = @truncate(u64, a); // mantissa-low
  23756d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  237571:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax

    return @bitCast(f128, low | (high << 64));
  237578:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  23757f:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  237586:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  23758d:	48 89 8d 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rcx
  237594:	0f 28 85 50 ff ff ff 	movaps xmm0,XMMWORD PTR [rbp-0xb0]
  23759b:	48 83 c4 48          	add    rsp,0x48
  23759f:	5b                   	pop    rbx
  2375a0:	41 5e                	pop    r14
  2375a2:	41 5f                	pop    r15
  2375a4:	5d                   	pop    rbp
  2375a5:	c3                   	ret    
  2375a6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  2375ad:	00 00 00 

00000000002375b0 <__floattidf>:
const builtin = @import("builtin");
const is_test = builtin.is_test;

const DBL_MANT_DIG = 53;

pub extern fn __floattidf(arg: i128) f64 {
  2375b0:	55                   	push   rbp
  2375b1:	48 89 e5             	mov    rbp,rsp
  2375b4:	41 57                	push   r15
  2375b6:	41 56                	push   r14
  2375b8:	53                   	push   rbx
  2375b9:	48 83 ec 30          	sub    rsp,0x30
  2375bd:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  2375c1:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    @setRuntimeSafety(is_test);

    if (arg == 0)
  2375c5:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  2375c9:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2375cd:	48 09 fe             	or     rsi,rdi
  2375d0:	48 89 b5 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rsi
  2375d7:	75 11                	jne    2375ea <__floattidf+0x3a>
  2375d9:	eb 00                	jmp    2375db <__floattidf+0x2b>
  2375db:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
        return 0.0;
  2375df:	48 83 c4 30          	add    rsp,0x30
  2375e3:	5b                   	pop    rbx
  2375e4:	41 5e                	pop    r14
  2375e6:	41 5f                	pop    r15
  2375e8:	5d                   	pop    rbp
  2375e9:	c3                   	ret    
    if (arg == 0)
  2375ea:	eb 00                	jmp    2375ec <__floattidf+0x3c>
  2375ec:	b8 80 00 00 00       	mov    eax,0x80

    var ai = arg;
  2375f1:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  2375f5:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  2375f9:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  2375fd:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
    const N: u32 = 128;
  237601:	c7 45 c4 80 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x80
    const si = ai >> @intCast(u7, (N - 1));
  237608:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  23760c:	48 c1 f9 3f          	sar    rcx,0x3f
  237610:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
  237614:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
    ai = ((ai ^ si) -% si);
  237618:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  23761c:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  237620:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  237624:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  237628:	48 31 fa             	xor    rdx,rdi
  23762b:	48 31 f1             	xor    rcx,rsi
  23762e:	48 29 f1             	sub    rcx,rsi
  237631:	48 19 fa             	sbb    rdx,rdi
  237634:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  237638:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
    var a = @bitCast(u128, ai);
  23763c:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  237640:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  237644:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
  237648:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx

    const sd = @bitCast(i32, N - @clz(a)); // number of significant digits
  23764c:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  237650:	f3 48 0f bd d1       	lzcnt  rdx,rcx
  237655:	41 88 d0             	mov    r8b,dl
  237658:	f3 48 0f bd 55 a0    	lzcnt  rdx,QWORD PTR [rbp-0x60]
  23765e:	41 89 d1             	mov    r9d,edx
  237661:	41 83 c1 40          	add    r9d,0x40
  237665:	45 88 ca             	mov    r10b,r9b
  237668:	48 85 c9             	test   rcx,rcx
  23766b:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
  237671:	44 88 95 5b ff ff ff 	mov    BYTE PTR [rbp-0xa5],r10b
  237678:	44 88 85 5a ff ff ff 	mov    BYTE PTR [rbp-0xa6],r8b
  23767f:	75 0c                	jne    23768d <__floattidf+0xdd>
  237681:	8a 85 5b ff ff ff    	mov    al,BYTE PTR [rbp-0xa5]
  237687:	88 85 5a ff ff ff    	mov    BYTE PTR [rbp-0xa6],al
  23768d:	8a 85 5a ff ff ff    	mov    al,BYTE PTR [rbp-0xa6]
  237693:	0f b6 c8             	movzx  ecx,al
  237696:	8b 95 5c ff ff ff    	mov    edx,DWORD PTR [rbp-0xa4]
  23769c:	29 ca                	sub    edx,ecx
  23769e:	89 55 9c             	mov    DWORD PTR [rbp-0x64],edx
    var e: i32 = sd - 1; // exponent
  2376a1:	8b 4d 9c             	mov    ecx,DWORD PTR [rbp-0x64]
  2376a4:	83 e9 01             	sub    ecx,0x1
  2376a7:	89 4d 98             	mov    DWORD PTR [rbp-0x68],ecx
    if (sd > DBL_MANT_DIG) {
  2376aa:	83 7d 9c 35          	cmp    DWORD PTR [rbp-0x64],0x35
  2376ae:	0f 8e 7e 01 00 00    	jle    237832 <__floattidf+0x282>
        //                                                12345678901234567890123456
        //  1 = msb 1 bit
        //  P = bit DBL_MANT_DIG-1 bits to the right of 1
        //  Q = bit DBL_MANT_DIG bits to the right of 1
        //  R = "or" of all bits to the right of Q
        switch (sd) {
  2376b4:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
  2376b7:	89 c1                	mov    ecx,eax
  2376b9:	83 e9 36             	sub    ecx,0x36
  2376bc:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
  2376c2:	89 8d 50 ff ff ff    	mov    DWORD PTR [rbp-0xb0],ecx
  2376c8:	0f 84 c5 00 00 00    	je     237793 <__floattidf+0x1e3>
  2376ce:	eb 00                	jmp    2376d0 <__floattidf+0x120>
  2376d0:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
  2376d6:	83 e8 37             	sub    eax,0x37
  2376d9:	89 85 4c ff ff ff    	mov    DWORD PTR [rbp-0xb4],eax
  2376df:	0f 84 cb 00 00 00    	je     2377b0 <__floattidf+0x200>
  2376e5:	eb 00                	jmp    2376e7 <__floattidf+0x137>
            DBL_MANT_DIG + 1 => {
                a <<= 1;
            },
            DBL_MANT_DIG + 2 => {},
            else => {
                const shift1_amt = @intCast(i32, sd - (DBL_MANT_DIG + 2));
  2376e7:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
  2376ea:	83 c0 c9             	add    eax,0xffffffc9
  2376ed:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
                const shift1_amt_u7 = @intCast(u7, shift1_amt);
  2376f0:	8a 4d 94             	mov    cl,BYTE PTR [rbp-0x6c]
  2376f3:	80 e1 7f             	and    cl,0x7f
  2376f6:	88 4d 93             	mov    BYTE PTR [rbp-0x6d],cl

                const shift2_amt = @intCast(i32, N + (DBL_MANT_DIG + 2)) - sd;
  2376f9:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
  2376fc:	ba b7 00 00 00       	mov    edx,0xb7
  237701:	29 c2                	sub    edx,eax
  237703:	89 55 8c             	mov    DWORD PTR [rbp-0x74],edx
                const shift2_amt_u7 = @intCast(u7, shift2_amt);
  237706:	8a 4d 8c             	mov    cl,BYTE PTR [rbp-0x74]
  237709:	80 e1 7f             	and    cl,0x7f
  23770c:	88 4d 8b             	mov    BYTE PTR [rbp-0x75],cl

                a = (a >> shift1_amt_u7) | @boolToInt((a & (@intCast(u128, @maxValue(u128)) >> shift2_amt_u7)) != 0);
  23770f:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  237713:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  237717:	8a 4d 93             	mov    cl,BYTE PTR [rbp-0x6d]
  23771a:	88 8d 4b ff ff ff    	mov    BYTE PTR [rbp-0xb5],cl
  237720:	49 89 f0             	mov    r8,rsi
  237723:	49 0f ad f8          	shrd   r8,rdi,cl
  237727:	8a 8d 4b ff ff ff    	mov    cl,BYTE PTR [rbp-0xb5]
  23772d:	41 88 c9             	mov    r9b,cl
  237730:	c4 62 b3 f7 cf       	shrx   r9,rdi,r9
  237735:	31 c0                	xor    eax,eax
  237737:	f6 c1 40             	test   cl,0x40
  23773a:	4d 0f 45 c1          	cmovne r8,r9
  23773e:	41 89 c2             	mov    r10d,eax
  237741:	4d 0f 45 ca          	cmovne r9,r10
  237745:	44 8a 5d 8b          	mov    r11b,BYTE PTR [rbp-0x75]
  237749:	48 c7 c3 ff ff ff ff 	mov    rbx,0xffffffffffffffff
  237750:	44 88 d9             	mov    cl,r11b
  237753:	49 89 de             	mov    r14,rbx
  237756:	4d 0f ad f6          	shrd   r14,r14,cl
  23775a:	45 88 df             	mov    r15b,r11b
  23775d:	c4 e2 83 f7 db       	shrx   rbx,rbx,r15
  237762:	41 f6 c3 40          	test   r11b,0x40
  237766:	4c 0f 45 f3          	cmovne r14,rbx
  23776a:	49 0f 45 da          	cmovne rbx,r10
  23776e:	4c 21 f6             	and    rsi,r14
  237771:	48 21 df             	and    rdi,rbx
  237774:	48 09 fe             	or     rsi,rdi
  237777:	0f 95 c1             	setne  cl
  23777a:	0f b6 c1             	movzx  eax,cl
  23777d:	89 c7                	mov    edi,eax
  23777f:	49 09 f8             	or     r8,rdi
  237782:	4c 89 4d a8          	mov    QWORD PTR [rbp-0x58],r9
  237786:	4c 89 45 a0          	mov    QWORD PTR [rbp-0x60],r8
        switch (sd) {
  23778a:	48 89 b5 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rsi
  237791:	eb 1f                	jmp    2377b2 <__floattidf+0x202>
                a <<= 1;
  237793:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  237797:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  23779b:	48 89 c2             	mov    rdx,rax
  23779e:	48 01 d2             	add    rdx,rdx
  2377a1:	48 0f a4 c1 01       	shld   rcx,rax,0x1
  2377a6:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  2377aa:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
        switch (sd) {
  2377ae:	eb 02                	jmp    2377b2 <__floattidf+0x202>
  2377b0:	eb 00                	jmp    2377b2 <__floattidf+0x202>
            },
        }
        // finish
        a |= @boolToInt((a & 4) != 0); // Or P into R
  2377b2:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2377b6:	89 c1                	mov    ecx,eax
  2377b8:	83 e1 04             	and    ecx,0x4
  2377bb:	89 ca                	mov    edx,ecx
  2377bd:	48 c1 ea 02          	shr    rdx,0x2
  2377c1:	48 09 d0             	or     rax,rdx
  2377c4:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        a += 1; // round - this step may add a significant bit
  2377c8:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2377cc:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  2377d0:	48 83 c0 01          	add    rax,0x1
  2377d4:	48 83 d2 00          	adc    rdx,0x0
  2377d8:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  2377dc:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
        a >>= 2; // dump Q and R
  2377e0:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2377e4:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  2377e8:	48 89 d6             	mov    rsi,rdx
  2377eb:	48 0f a4 c6 3e       	shld   rsi,rax,0x3e
  2377f0:	48 c1 ea 02          	shr    rdx,0x2
  2377f4:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
  2377f8:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
        // a is now rounded to DBL_MANT_DIG or DBL_MANT_DIG+1 bits
        if ((a & (u128(1) << DBL_MANT_DIG)) != 0) {
  2377fc:	40 8a 7d a6          	mov    dil,BYTE PTR [rbp-0x5a]
  237800:	40 f6 c7 20          	test   dil,0x20
  237804:	74 28                	je     23782e <__floattidf+0x27e>
  237806:	eb 00                	jmp    237808 <__floattidf+0x258>
            a >>= 1;
  237808:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  23780c:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  237810:	48 89 ca             	mov    rdx,rcx
  237813:	48 0f a4 c2 3f       	shld   rdx,rax,0x3f
  237818:	48 d1 e9             	shr    rcx,1
  23781b:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  23781f:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
            e += 1;
  237823:	8b 75 98             	mov    esi,DWORD PTR [rbp-0x68]
  237826:	83 c6 01             	add    esi,0x1
  237829:	89 75 98             	mov    DWORD PTR [rbp-0x68],esi
        if ((a & (u128(1) << DBL_MANT_DIG)) != 0) {
  23782c:	eb 02                	jmp    237830 <__floattidf+0x280>
  23782e:	eb 00                	jmp    237830 <__floattidf+0x280>
    if (sd > DBL_MANT_DIG) {
  237830:	eb 4b                	jmp    23787d <__floattidf+0x2cd>
        }
        // a is now rounded to DBL_MANT_DIG bits
    } else {
        a <<= @intCast(u7, DBL_MANT_DIG - sd);
  237832:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  237836:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  23783a:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
  23783d:	be 35 00 00 00       	mov    esi,0x35
  237842:	29 d6                	sub    esi,edx
  237844:	40 88 f7             	mov    dil,sil
  237847:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  23784e:	40 88 f9             	mov    cl,dil
  237851:	4c 8b 85 38 ff ff ff 	mov    r8,QWORD PTR [rbp-0xc8]
  237858:	49 0f a5 c0          	shld   r8,rax,cl
  23785c:	41 88 f9             	mov    r9b,dil
  23785f:	c4 e2 b1 f7 c0       	shlx   rax,rax,r9
  237864:	31 d2                	xor    edx,edx
  237866:	40 f6 c7 40          	test   dil,0x40
  23786a:	4c 0f 45 c0          	cmovne r8,rax
  23786e:	41 89 d1             	mov    r9d,edx
  237871:	49 0f 45 c1          	cmovne rax,r9
  237875:	4c 89 45 a8          	mov    QWORD PTR [rbp-0x58],r8
  237879:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        // a is now rounded to DBL_MANT_DIG bits
    }

    const s = @bitCast(u128, arg) >> (128 - 32);
  23787d:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  237880:	89 c1                	mov    ecx,eax
  237882:	48 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rcx
  237889:	48 c7 45 80 00 00 00 	mov    QWORD PTR [rbp-0x80],0x0
  237890:	00 
    const high: u64 = (@intCast(u64, s) & 0x80000000) | // sign
  237891:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  237898:	89 c8                	mov    eax,ecx
  23789a:	25 00 00 00 80       	and    eax,0x80000000
  23789f:	89 c1                	mov    ecx,eax
        (@intCast(u32, (e + 1023)) << 20) | // exponent
  2378a1:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
  2378a4:	c1 e0 14             	shl    eax,0x14
  2378a7:	05 00 00 f0 3f       	add    eax,0x3ff00000
  2378ac:	89 c2                	mov    edx,eax
    const high: u64 = (@intCast(u64, s) & 0x80000000) | // sign
  2378ae:	48 09 d1             	or     rcx,rdx
        (@truncate(u32, a >> 32) & 0x000fffff); // mantissa-high
  2378b1:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
  2378b4:	89 c2                	mov    edx,eax
  2378b6:	89 d0                	mov    eax,edx
  2378b8:	25 ff ff 0f 00       	and    eax,0xfffff
  2378bd:	89 c2                	mov    edx,eax
        (@intCast(u32, (e + 1023)) << 20) | // exponent
  2378bf:	48 09 d1             	or     rcx,rdx
    const high: u64 = (@intCast(u64, s) & 0x80000000) | // sign
  2378c2:	48 89 8d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rcx
    const low: u64 = @truncate(u32, a); // mantissa-low
  2378c9:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
  2378cc:	89 c0                	mov    eax,eax
  2378ce:	89 c1                	mov    ecx,eax
  2378d0:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx

    return @bitCast(f64, low | (high << 32));
  2378d7:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  2378de:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  2378e5:	48 c1 e2 20          	shl    rdx,0x20
  2378e9:	48 09 d1             	or     rcx,rdx
  2378ec:	c4 e1 f9 6e c1       	vmovq  xmm0,rcx
  2378f1:	48 83 c4 30          	add    rsp,0x30
  2378f5:	5b                   	pop    rbx
  2378f6:	41 5e                	pop    r14
  2378f8:	41 5f                	pop    r15
  2378fa:	5d                   	pop    rbp
  2378fb:	c3                   	ret    
  2378fc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000237900 <__floattisf>:
const builtin = @import("builtin");
const is_test = builtin.is_test;

const FLT_MANT_DIG = 24;

pub extern fn __floattisf(arg: i128) f32 {
  237900:	55                   	push   rbp
  237901:	48 89 e5             	mov    rbp,rsp
  237904:	41 57                	push   r15
  237906:	41 56                	push   r14
  237908:	53                   	push   rbx
  237909:	48 83 ec 28          	sub    rsp,0x28
  23790d:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  237911:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    @setRuntimeSafety(is_test);

    if (arg == 0)
  237915:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  237919:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  23791d:	48 09 fe             	or     rsi,rdi
  237920:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
  237927:	75 11                	jne    23793a <__floattisf+0x3a>
  237929:	eb 00                	jmp    23792b <__floattisf+0x2b>
  23792b:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
        return 0.0;
  23792f:	48 83 c4 28          	add    rsp,0x28
  237933:	5b                   	pop    rbx
  237934:	41 5e                	pop    r14
  237936:	41 5f                	pop    r15
  237938:	5d                   	pop    rbp
  237939:	c3                   	ret    
    if (arg == 0)
  23793a:	eb 00                	jmp    23793c <__floattisf+0x3c>
  23793c:	b8 80 00 00 00       	mov    eax,0x80

    var ai = arg;
  237941:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  237945:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  237949:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  23794d:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
    const N: u32 = 128;
  237951:	c7 45 c4 80 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x80
    const si = ai >> @intCast(u7, (N - 1));
  237958:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  23795c:	48 c1 f9 3f          	sar    rcx,0x3f
  237960:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
  237964:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
    ai = ((ai ^ si) -% si);
  237968:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  23796c:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  237970:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  237974:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  237978:	48 31 fa             	xor    rdx,rdi
  23797b:	48 31 f1             	xor    rcx,rsi
  23797e:	48 29 f1             	sub    rcx,rsi
  237981:	48 19 fa             	sbb    rdx,rdi
  237984:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  237988:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
    var a = @bitCast(u128, ai);
  23798c:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  237990:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  237994:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
  237998:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx

    const sd = @bitCast(i32, N - @clz(a)); // number of significant digits
  23799c:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  2379a0:	f3 48 0f bd d1       	lzcnt  rdx,rcx
  2379a5:	41 88 d0             	mov    r8b,dl
  2379a8:	f3 48 0f bd 55 a0    	lzcnt  rdx,QWORD PTR [rbp-0x60]
  2379ae:	41 89 d1             	mov    r9d,edx
  2379b1:	41 83 c1 40          	add    r9d,0x40
  2379b5:	45 88 ca             	mov    r10b,r9b
  2379b8:	48 85 c9             	test   rcx,rcx
  2379bb:	89 85 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],eax
  2379c1:	44 88 95 63 ff ff ff 	mov    BYTE PTR [rbp-0x9d],r10b
  2379c8:	44 88 85 62 ff ff ff 	mov    BYTE PTR [rbp-0x9e],r8b
  2379cf:	75 0c                	jne    2379dd <__floattisf+0xdd>
  2379d1:	8a 85 63 ff ff ff    	mov    al,BYTE PTR [rbp-0x9d]
  2379d7:	88 85 62 ff ff ff    	mov    BYTE PTR [rbp-0x9e],al
  2379dd:	8a 85 62 ff ff ff    	mov    al,BYTE PTR [rbp-0x9e]
  2379e3:	0f b6 c8             	movzx  ecx,al
  2379e6:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
  2379ec:	29 ca                	sub    edx,ecx
  2379ee:	89 55 9c             	mov    DWORD PTR [rbp-0x64],edx
    var e: i32 = sd - 1; // exponent
  2379f1:	8b 4d 9c             	mov    ecx,DWORD PTR [rbp-0x64]
  2379f4:	83 e9 01             	sub    ecx,0x1
  2379f7:	89 4d 98             	mov    DWORD PTR [rbp-0x68],ecx

    if (sd > FLT_MANT_DIG) {
  2379fa:	83 7d 9c 18          	cmp    DWORD PTR [rbp-0x64],0x18
  2379fe:	0f 8e 7e 01 00 00    	jle    237b82 <__floattisf+0x282>
        //                                                12345678901234567890123456
        //  1 = msb 1 bit
        //  P = bit FLT_MANT_DIG-1 bits to the right of 1
        //  Q = bit FLT_MANT_DIG bits to the right of 1
        //  R = "or" of all bits to the right of Q
        switch (sd) {
  237a04:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
  237a07:	89 c1                	mov    ecx,eax
  237a09:	83 e9 19             	sub    ecx,0x19
  237a0c:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
  237a12:	89 8d 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],ecx
  237a18:	0f 84 c5 00 00 00    	je     237ae3 <__floattisf+0x1e3>
  237a1e:	eb 00                	jmp    237a20 <__floattisf+0x120>
  237a20:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
  237a26:	83 e8 1a             	sub    eax,0x1a
  237a29:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
  237a2f:	0f 84 cb 00 00 00    	je     237b00 <__floattisf+0x200>
  237a35:	eb 00                	jmp    237a37 <__floattisf+0x137>
            FLT_MANT_DIG + 1 => {
                a <<= 1;
            },
            FLT_MANT_DIG + 2 => {},
            else => {
                const shift1_amt = @intCast(i32, sd - (FLT_MANT_DIG + 2));
  237a37:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
  237a3a:	83 c0 e6             	add    eax,0xffffffe6
  237a3d:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
                const shift1_amt_u7 = @intCast(u7, shift1_amt);
  237a40:	8a 4d 94             	mov    cl,BYTE PTR [rbp-0x6c]
  237a43:	80 e1 7f             	and    cl,0x7f
  237a46:	88 4d 93             	mov    BYTE PTR [rbp-0x6d],cl

                const shift2_amt = @intCast(i32, N + (FLT_MANT_DIG + 2)) - sd;
  237a49:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
  237a4c:	ba 9a 00 00 00       	mov    edx,0x9a
  237a51:	29 c2                	sub    edx,eax
  237a53:	89 55 8c             	mov    DWORD PTR [rbp-0x74],edx
                const shift2_amt_u7 = @intCast(u7, shift2_amt);
  237a56:	8a 4d 8c             	mov    cl,BYTE PTR [rbp-0x74]
  237a59:	80 e1 7f             	and    cl,0x7f
  237a5c:	88 4d 8b             	mov    BYTE PTR [rbp-0x75],cl

                a = (a >> shift1_amt_u7) | @boolToInt((a & (@intCast(u128, @maxValue(u128)) >> shift2_amt_u7)) != 0);
  237a5f:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  237a63:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  237a67:	8a 4d 93             	mov    cl,BYTE PTR [rbp-0x6d]
  237a6a:	88 8d 53 ff ff ff    	mov    BYTE PTR [rbp-0xad],cl
  237a70:	49 89 f0             	mov    r8,rsi
  237a73:	49 0f ad f8          	shrd   r8,rdi,cl
  237a77:	8a 8d 53 ff ff ff    	mov    cl,BYTE PTR [rbp-0xad]
  237a7d:	41 88 c9             	mov    r9b,cl
  237a80:	c4 62 b3 f7 cf       	shrx   r9,rdi,r9
  237a85:	31 c0                	xor    eax,eax
  237a87:	f6 c1 40             	test   cl,0x40
  237a8a:	4d 0f 45 c1          	cmovne r8,r9
  237a8e:	41 89 c2             	mov    r10d,eax
  237a91:	4d 0f 45 ca          	cmovne r9,r10
  237a95:	44 8a 5d 8b          	mov    r11b,BYTE PTR [rbp-0x75]
  237a99:	48 c7 c3 ff ff ff ff 	mov    rbx,0xffffffffffffffff
  237aa0:	44 88 d9             	mov    cl,r11b
  237aa3:	49 89 de             	mov    r14,rbx
  237aa6:	4d 0f ad f6          	shrd   r14,r14,cl
  237aaa:	45 88 df             	mov    r15b,r11b
  237aad:	c4 e2 83 f7 db       	shrx   rbx,rbx,r15
  237ab2:	41 f6 c3 40          	test   r11b,0x40
  237ab6:	4c 0f 45 f3          	cmovne r14,rbx
  237aba:	49 0f 45 da          	cmovne rbx,r10
  237abe:	4c 21 f6             	and    rsi,r14
  237ac1:	48 21 df             	and    rdi,rbx
  237ac4:	48 09 fe             	or     rsi,rdi
  237ac7:	0f 95 c1             	setne  cl
  237aca:	0f b6 c1             	movzx  eax,cl
  237acd:	89 c7                	mov    edi,eax
  237acf:	49 09 f8             	or     r8,rdi
  237ad2:	4c 89 4d a8          	mov    QWORD PTR [rbp-0x58],r9
  237ad6:	4c 89 45 a0          	mov    QWORD PTR [rbp-0x60],r8
        switch (sd) {
  237ada:	48 89 b5 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rsi
  237ae1:	eb 1f                	jmp    237b02 <__floattisf+0x202>
                a <<= 1;
  237ae3:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  237ae7:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  237aeb:	48 89 c2             	mov    rdx,rax
  237aee:	48 01 d2             	add    rdx,rdx
  237af1:	48 0f a4 c1 01       	shld   rcx,rax,0x1
  237af6:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  237afa:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
        switch (sd) {
  237afe:	eb 02                	jmp    237b02 <__floattisf+0x202>
  237b00:	eb 00                	jmp    237b02 <__floattisf+0x202>
            },
        }
        // finish
        a |= @boolToInt((a & 4) != 0); // Or P into R
  237b02:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  237b06:	89 c1                	mov    ecx,eax
  237b08:	83 e1 04             	and    ecx,0x4
  237b0b:	89 ca                	mov    edx,ecx
  237b0d:	48 c1 ea 02          	shr    rdx,0x2
  237b11:	48 09 d0             	or     rax,rdx
  237b14:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        a += 1; // round - this step may add a significant bit
  237b18:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  237b1c:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  237b20:	48 83 c0 01          	add    rax,0x1
  237b24:	48 83 d2 00          	adc    rdx,0x0
  237b28:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  237b2c:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
        a >>= 2; // dump Q and R
  237b30:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  237b34:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  237b38:	48 89 d6             	mov    rsi,rdx
  237b3b:	48 0f a4 c6 3e       	shld   rsi,rax,0x3e
  237b40:	48 c1 ea 02          	shr    rdx,0x2
  237b44:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
  237b48:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
        // a is now rounded to FLT_MANT_DIG or FLT_MANT_DIG+1 bits
        if ((a & (u128(1) << FLT_MANT_DIG)) != 0) {
  237b4c:	40 8a 7d a3          	mov    dil,BYTE PTR [rbp-0x5d]
  237b50:	40 f6 c7 01          	test   dil,0x1
  237b54:	74 28                	je     237b7e <__floattisf+0x27e>
  237b56:	eb 00                	jmp    237b58 <__floattisf+0x258>
            a >>= 1;
  237b58:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  237b5c:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  237b60:	48 89 ca             	mov    rdx,rcx
  237b63:	48 0f a4 c2 3f       	shld   rdx,rax,0x3f
  237b68:	48 d1 e9             	shr    rcx,1
  237b6b:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  237b6f:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
            e += 1;
  237b73:	8b 75 98             	mov    esi,DWORD PTR [rbp-0x68]
  237b76:	83 c6 01             	add    esi,0x1
  237b79:	89 75 98             	mov    DWORD PTR [rbp-0x68],esi
        if ((a & (u128(1) << FLT_MANT_DIG)) != 0) {
  237b7c:	eb 02                	jmp    237b80 <__floattisf+0x280>
  237b7e:	eb 00                	jmp    237b80 <__floattisf+0x280>
    if (sd > FLT_MANT_DIG) {
  237b80:	eb 4b                	jmp    237bcd <__floattisf+0x2cd>
        }
        // a is now rounded to FLT_MANT_DIG bits
    } else {
        a <<= @intCast(u7, FLT_MANT_DIG - sd);
  237b82:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  237b86:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  237b8a:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
  237b8d:	be 18 00 00 00       	mov    esi,0x18
  237b92:	29 d6                	sub    esi,edx
  237b94:	40 88 f7             	mov    dil,sil
  237b97:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
  237b9e:	40 88 f9             	mov    cl,dil
  237ba1:	4c 8b 85 40 ff ff ff 	mov    r8,QWORD PTR [rbp-0xc0]
  237ba8:	49 0f a5 c0          	shld   r8,rax,cl
  237bac:	41 88 f9             	mov    r9b,dil
  237baf:	c4 e2 b1 f7 c0       	shlx   rax,rax,r9
  237bb4:	31 d2                	xor    edx,edx
  237bb6:	40 f6 c7 40          	test   dil,0x40
  237bba:	4c 0f 45 c0          	cmovne r8,rax
  237bbe:	41 89 d1             	mov    r9d,edx
  237bc1:	49 0f 45 c1          	cmovne rax,r9
  237bc5:	4c 89 45 a8          	mov    QWORD PTR [rbp-0x58],r8
  237bc9:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        // a is now rounded to FLT_MANT_DIG bits
    }

    const s = @bitCast(u128, arg) >> (128 - 32);
  237bcd:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  237bd0:	89 c1                	mov    ecx,eax
  237bd2:	48 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rcx
  237bd9:	48 c7 45 80 00 00 00 	mov    QWORD PTR [rbp-0x80],0x0
  237be0:	00 
    const r = (@intCast(u32, s) & 0x80000000) | // sign
  237be1:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
  237be7:	25 00 00 00 80       	and    eax,0x80000000
        (@intCast(u32, (e + 127)) << 23) | // exponent
  237bec:	8b 55 98             	mov    edx,DWORD PTR [rbp-0x68]
  237bef:	c1 e2 17             	shl    edx,0x17
  237bf2:	81 c2 00 00 80 3f    	add    edx,0x3f800000
    const r = (@intCast(u32, s) & 0x80000000) | // sign
  237bf8:	09 d0                	or     eax,edx
        (@truncate(u32, a) & 0x007fffff); // mantissa-high
  237bfa:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
  237bfd:	81 e2 ff ff 7f 00    	and    edx,0x7fffff
        (@intCast(u32, (e + 127)) << 23) | // exponent
  237c03:	09 d0                	or     eax,edx
    const r = (@intCast(u32, s) & 0x80000000) | // sign
  237c05:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax

    return @bitCast(f32, r);
  237c0b:	c5 f9 6e 85 74 ff ff 	vmovd  xmm0,DWORD PTR [rbp-0x8c]
  237c12:	ff 
  237c13:	48 83 c4 28          	add    rsp,0x28
  237c17:	5b                   	pop    rbx
  237c18:	41 5e                	pop    r14
  237c1a:	41 5f                	pop    r15
  237c1c:	5d                   	pop    rbp
  237c1d:	c3                   	ret    
  237c1e:	66 90                	xchg   ax,ax

0000000000237c20 <__floatunditf>:
const builtin = @import("builtin");
const is_test = builtin.is_test;
const std = @import("std");

pub extern fn __floatunditf(a: u128) f128 {
  237c20:	55                   	push   rbp
  237c21:	48 89 e5             	mov    rbp,rsp
  237c24:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  237c28:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
    @setRuntimeSafety(is_test);

    if (a == 0) {
  237c2c:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  237c30:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  237c34:	48 09 fe             	or     rsi,rdi
  237c37:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  237c3b:	75 0b                	jne    237c48 <__floatunditf+0x28>
  237c3d:	eb 00                	jmp    237c3f <__floatunditf+0x1f>
        return 0;
  237c3f:	0f 28 05 6a 86 fc ff 	movaps xmm0,XMMWORD PTR [rip+0xfffffffffffc866a]        # 2002b0 <__unnamed_100>
  237c46:	5d                   	pop    rbp
  237c47:	c3                   	ret    
    if (a == 0) {
  237c48:	eb 00                	jmp    237c4a <__floatunditf+0x2a>
    const mantissa_bits = std.math.floatMantissaBits(f128);
    const exponent_bits = std.math.floatExponentBits(f128);
    const exponent_bias = (1 << (exponent_bits - 1)) - 1;
    const implicit_bit = 1 << mantissa_bits;

    const exp = (u128.bit_count - 1) - @clz(a);
  237c4a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  237c4e:	f3 48 0f bd c8       	lzcnt  rcx,rax
  237c53:	88 ca                	mov    dl,cl
  237c55:	f3 48 0f bd 4d f0    	lzcnt  rcx,QWORD PTR [rbp-0x10]
  237c5b:	89 ce                	mov    esi,ecx
  237c5d:	83 c6 40             	add    esi,0x40
  237c60:	40 88 f7             	mov    dil,sil
  237c63:	48 85 c0             	test   rax,rax
  237c66:	40 88 7d c7          	mov    BYTE PTR [rbp-0x39],dil
  237c6a:	88 55 c6             	mov    BYTE PTR [rbp-0x3a],dl
  237c6d:	75 06                	jne    237c75 <__floatunditf+0x55>
  237c6f:	8a 45 c7             	mov    al,BYTE PTR [rbp-0x39]
  237c72:	88 45 c6             	mov    BYTE PTR [rbp-0x3a],al
  237c75:	8a 45 c6             	mov    al,BYTE PTR [rbp-0x3a]
  237c78:	b1 7f                	mov    cl,0x7f
  237c7a:	28 c1                	sub    cl,al
  237c7c:	88 4d ef             	mov    BYTE PTR [rbp-0x11],cl
    const shift = mantissa_bits - @intCast(u7, exp);
  237c7f:	8a 45 ef             	mov    al,BYTE PTR [rbp-0x11]
  237c82:	b1 70                	mov    cl,0x70
  237c84:	28 c1                	sub    cl,al
  237c86:	80 e1 7f             	and    cl,0x7f
  237c89:	88 4d ee             	mov    BYTE PTR [rbp-0x12],cl

    var result: u128 align(16) = (a << shift) ^ implicit_bit;
  237c8c:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  237c90:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  237c94:	8a 45 ee             	mov    al,BYTE PTR [rbp-0x12]
  237c97:	88 c1                	mov    cl,al
  237c99:	48 0f a5 d6          	shld   rsi,rdx,cl
  237c9d:	40 88 c7             	mov    dil,al
  237ca0:	c4 e2 c1 f7 d2       	shlx   rdx,rdx,rdi
  237ca5:	45 31 c0             	xor    r8d,r8d
  237ca8:	a8 40                	test   al,0x40
  237caa:	48 0f 45 f2          	cmovne rsi,rdx
  237cae:	44 89 c7             	mov    edi,r8d
  237cb1:	48 0f 45 d7          	cmovne rdx,rdi
  237cb5:	48 bf 00 00 00 00 00 	movabs rdi,0x1000000000000
  237cbc:	00 01 00 
  237cbf:	48 31 fe             	xor    rsi,rdi
  237cc2:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  237cc6:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
    result += (@intCast(u128, exp) + exponent_bias) << mantissa_bits;
  237cca:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  237cce:	44 0f b6 45 ef       	movzx  r8d,BYTE PTR [rbp-0x11]
  237cd3:	44 89 c6             	mov    esi,r8d
  237cd6:	48 c1 e6 30          	shl    rsi,0x30
  237cda:	48 01 f2             	add    rdx,rsi
  237cdd:	48 be 00 00 00 00 00 	movabs rsi,0x3fff000000000000
  237ce4:	00 ff 3f 
  237ce7:	48 01 f2             	add    rdx,rsi
  237cea:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx

    return @bitCast(f128, result);
  237cee:	0f 28 45 d0          	movaps xmm0,XMMWORD PTR [rbp-0x30]
  237cf2:	5d                   	pop    rbp
  237cf3:	c3                   	ret    
  237cf4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  237cfb:	00 00 00 00 00 

0000000000237d00 <__floatunsitf>:
const builtin = @import("builtin");
const is_test = builtin.is_test;
const std = @import("std");

pub extern fn __floatunsitf(a: u64) f128 {
  237d00:	55                   	push   rbp
  237d01:	48 89 e5             	mov    rbp,rsp
  237d04:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    @setRuntimeSafety(is_test);

    if (a == 0) {
  237d08:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
  237d0d:	75 09                	jne    237d18 <__floatunsitf+0x18>
        return 0;
  237d0f:	0f 28 05 9a 85 fc ff 	movaps xmm0,XMMWORD PTR [rip+0xfffffffffffc859a]        # 2002b0 <__unnamed_100>
  237d16:	5d                   	pop    rbp
  237d17:	c3                   	ret    
    if (a == 0) {
  237d18:	eb 00                	jmp    237d1a <__floatunsitf+0x1a>
    const mantissa_bits = std.math.floatMantissaBits(f128);
    const exponent_bits = std.math.floatExponentBits(f128);
    const exponent_bias = (1 << (exponent_bits - 1)) - 1;
    const implicit_bit = 1 << mantissa_bits;

    const exp = (u64.bit_count - 1) - @clz(a);
  237d1a:	f3 48 0f bd 45 f8    	lzcnt  rax,QWORD PTR [rbp-0x8]
  237d20:	88 c1                	mov    cl,al
  237d22:	b2 3f                	mov    dl,0x3f
  237d24:	28 ca                	sub    dl,cl
  237d26:	80 e2 7f             	and    dl,0x7f
  237d29:	88 55 f7             	mov    BYTE PTR [rbp-0x9],dl
    const shift = mantissa_bits - @intCast(u7, exp);
  237d2c:	8a 4d f7             	mov    cl,BYTE PTR [rbp-0x9]
  237d2f:	b2 70                	mov    dl,0x70
  237d31:	28 ca                	sub    dl,cl
  237d33:	80 e2 7f             	and    dl,0x7f
  237d36:	88 55 f6             	mov    BYTE PTR [rbp-0xa],dl

    // TODO(#1148): @bitCast alignment error
    var result align(16) = (@intCast(u128, a) << shift) ^ implicit_bit;
  237d39:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  237d3d:	8a 4d f6             	mov    cl,BYTE PTR [rbp-0xa]
  237d40:	31 f6                	xor    esi,esi
  237d42:	89 f7                	mov    edi,esi
  237d44:	88 4d df             	mov    BYTE PTR [rbp-0x21],cl
  237d47:	49 89 f8             	mov    r8,rdi
  237d4a:	49 0f a5 c0          	shld   r8,rax,cl
  237d4e:	8a 4d df             	mov    cl,BYTE PTR [rbp-0x21]
  237d51:	41 88 c9             	mov    r9b,cl
  237d54:	c4 e2 b1 f7 c0       	shlx   rax,rax,r9
  237d59:	f6 c1 40             	test   cl,0x40
  237d5c:	4c 0f 45 c0          	cmovne r8,rax
  237d60:	48 0f 45 c7          	cmovne rax,rdi
  237d64:	48 bf 00 00 00 00 00 	movabs rdi,0x1000000000000
  237d6b:	00 01 00 
  237d6e:	49 31 f8             	xor    r8,rdi
  237d71:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  237d75:	4c 89 45 e8          	mov    QWORD PTR [rbp-0x18],r8
    result += (@intCast(u128, exp) + exponent_bias) << mantissa_bits;
  237d79:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  237d7d:	0f b6 75 f7          	movzx  esi,BYTE PTR [rbp-0x9]
  237d81:	89 f7                	mov    edi,esi
  237d83:	48 c1 e7 30          	shl    rdi,0x30
  237d87:	48 01 f8             	add    rax,rdi
  237d8a:	48 bf 00 00 00 00 00 	movabs rdi,0x3fff000000000000
  237d91:	00 ff 3f 
  237d94:	48 01 f8             	add    rax,rdi
  237d97:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax

    return @bitCast(f128, result);
  237d9b:	0f 28 45 e0          	movaps xmm0,XMMWORD PTR [rbp-0x20]
  237d9f:	5d                   	pop    rbp
  237da0:	c3                   	ret    
  237da1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  237da8:	0f 1f 84 00 00 00 00 
  237daf:	00 

0000000000237db0 <__floatuntitf>:
const builtin = @import("builtin");
const is_test = builtin.is_test;

const LDBL_MANT_DIG = 113;

pub extern fn __floatuntitf(arg: u128) f128 {
  237db0:	55                   	push   rbp
  237db1:	48 89 e5             	mov    rbp,rsp
  237db4:	41 56                	push   r14
  237db6:	53                   	push   rbx
  237db7:	48 83 ec 10          	sub    rsp,0x10
  237dbb:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  237dbf:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
    @setRuntimeSafety(is_test);

    if (arg == 0)
  237dc3:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  237dc7:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  237dcb:	48 09 fe             	or     rsi,rdi
  237dce:	48 89 75 88          	mov    QWORD PTR [rbp-0x78],rsi
  237dd2:	75 12                	jne    237de6 <__floatuntitf+0x36>
  237dd4:	eb 00                	jmp    237dd6 <__floatuntitf+0x26>
        return 0.0;
  237dd6:	0f 28 05 d3 84 fc ff 	movaps xmm0,XMMWORD PTR [rip+0xfffffffffffc84d3]        # 2002b0 <__unnamed_100>
  237ddd:	48 83 c4 10          	add    rsp,0x10
  237de1:	5b                   	pop    rbx
  237de2:	41 5e                	pop    r14
  237de4:	5d                   	pop    rbp
  237de5:	c3                   	ret    
    if (arg == 0)
  237de6:	eb 00                	jmp    237de8 <__floatuntitf+0x38>
  237de8:	b8 80 00 00 00       	mov    eax,0x80

    var a = arg;
  237ded:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  237df1:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  237df5:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  237df9:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    const N: u32 = @sizeOf(u128) * 8;
  237dfd:	c7 45 cc 80 00 00 00 	mov    DWORD PTR [rbp-0x34],0x80
    const sd = @bitCast(i32, N - @clz(a)); // number of significant digits
  237e04:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  237e08:	f3 48 0f bd d1       	lzcnt  rdx,rcx
  237e0d:	40 88 d6             	mov    sil,dl
  237e10:	f3 48 0f bd 55 d0    	lzcnt  rdx,QWORD PTR [rbp-0x30]
  237e16:	89 d7                	mov    edi,edx
  237e18:	83 c7 40             	add    edi,0x40
  237e1b:	41 88 f8             	mov    r8b,dil
  237e1e:	48 85 c9             	test   rcx,rcx
  237e21:	89 45 84             	mov    DWORD PTR [rbp-0x7c],eax
  237e24:	44 88 45 83          	mov    BYTE PTR [rbp-0x7d],r8b
  237e28:	40 88 75 82          	mov    BYTE PTR [rbp-0x7e],sil
  237e2c:	75 06                	jne    237e34 <__floatuntitf+0x84>
  237e2e:	8a 45 83             	mov    al,BYTE PTR [rbp-0x7d]
  237e31:	88 45 82             	mov    BYTE PTR [rbp-0x7e],al
  237e34:	8a 45 82             	mov    al,BYTE PTR [rbp-0x7e]
  237e37:	0f b6 c8             	movzx  ecx,al
  237e3a:	8b 55 84             	mov    edx,DWORD PTR [rbp-0x7c]
  237e3d:	29 ca                	sub    edx,ecx
  237e3f:	89 55 c8             	mov    DWORD PTR [rbp-0x38],edx
    var e: i32 = sd - 1; // exponent
  237e42:	8b 4d c8             	mov    ecx,DWORD PTR [rbp-0x38]
  237e45:	83 e9 01             	sub    ecx,0x1
  237e48:	89 4d c4             	mov    DWORD PTR [rbp-0x3c],ecx
    if (sd > LDBL_MANT_DIG) {
  237e4b:	83 7d c8 71          	cmp    DWORD PTR [rbp-0x38],0x71
  237e4f:	0f 8e 6e 01 00 00    	jle    237fc3 <__floatuntitf+0x213>
        //                                                12345678901234567890123456
        //  1 = msb 1 bit
        //  P = bit LDBL_MANT_DIG-1 bits to the right of 1
        //  Q = bit LDBL_MANT_DIG bits to the right of 1
        //  R = "or" of all bits to the right of Q
        switch (sd) {
  237e55:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  237e58:	89 c1                	mov    ecx,eax
  237e5a:	83 e9 72             	sub    ecx,0x72
  237e5d:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
  237e63:	89 8d 78 ff ff ff    	mov    DWORD PTR [rbp-0x88],ecx
  237e69:	0f 84 b5 00 00 00    	je     237f24 <__floatuntitf+0x174>
  237e6f:	eb 00                	jmp    237e71 <__floatuntitf+0xc1>
  237e71:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
  237e77:	83 e8 73             	sub    eax,0x73
  237e7a:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
  237e80:	0f 84 bb 00 00 00    	je     237f41 <__floatuntitf+0x191>
  237e86:	eb 00                	jmp    237e88 <__floatuntitf+0xd8>
            LDBL_MANT_DIG + 1 => {
                a <<= 1;
            },
            LDBL_MANT_DIG + 2 => {},
            else => {
                const shift_amt = @bitCast(i32, N + (LDBL_MANT_DIG + 2)) - sd;
  237e88:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  237e8b:	b9 f3 00 00 00       	mov    ecx,0xf3
  237e90:	29 c1                	sub    ecx,eax
  237e92:	89 4d c0             	mov    DWORD PTR [rbp-0x40],ecx
                const shift_amt_u7 = @intCast(u7, shift_amt);
  237e95:	8a 55 c0             	mov    dl,BYTE PTR [rbp-0x40]
  237e98:	80 e2 7f             	and    dl,0x7f
  237e9b:	88 55 bf             	mov    BYTE PTR [rbp-0x41],dl
                a = (a >> @intCast(u7, sd - (LDBL_MANT_DIG + 2))) |
  237e9e:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  237ea2:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  237ea6:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  237ea9:	83 c0 8d             	add    eax,0xffffff8d
  237eac:	88 c2                	mov    dl,al
  237eae:	88 d1                	mov    cl,dl
  237eb0:	49 89 f0             	mov    r8,rsi
  237eb3:	49 0f ad f8          	shrd   r8,rdi,cl
  237eb7:	41 88 d1             	mov    r9b,dl
  237eba:	c4 62 b3 f7 cf       	shrx   r9,rdi,r9
  237ebf:	31 c0                	xor    eax,eax
  237ec1:	f6 c2 40             	test   dl,0x40
  237ec4:	4d 0f 45 c1          	cmovne r8,r9
  237ec8:	41 89 c2             	mov    r10d,eax
  237ecb:	4d 0f 45 ca          	cmovne r9,r10
                    @boolToInt((a & (u128(@maxValue(u128)) >> shift_amt_u7)) != 0);
  237ecf:	8a 4d bf             	mov    cl,BYTE PTR [rbp-0x41]
  237ed2:	49 c7 c3 ff ff ff ff 	mov    r11,0xffffffffffffffff
  237ed9:	88 8d 73 ff ff ff    	mov    BYTE PTR [rbp-0x8d],cl
  237edf:	4c 89 db             	mov    rbx,r11
  237ee2:	48 0f ad db          	shrd   rbx,rbx,cl
  237ee6:	8a 8d 73 ff ff ff    	mov    cl,BYTE PTR [rbp-0x8d]
  237eec:	41 88 ce             	mov    r14b,cl
  237eef:	c4 42 8b f7 db       	shrx   r11,r11,r14
  237ef4:	f6 c1 40             	test   cl,0x40
  237ef7:	49 0f 45 db          	cmovne rbx,r11
  237efb:	4d 0f 45 da          	cmovne r11,r10
  237eff:	48 21 de             	and    rsi,rbx
  237f02:	4c 21 df             	and    rdi,r11
  237f05:	48 09 fe             	or     rsi,rdi
  237f08:	0f 95 c2             	setne  dl
  237f0b:	0f b6 c2             	movzx  eax,dl
  237f0e:	89 c7                	mov    edi,eax
                a = (a >> @intCast(u7, sd - (LDBL_MANT_DIG + 2))) |
  237f10:	49 09 f8             	or     r8,rdi
  237f13:	4c 89 4d d8          	mov    QWORD PTR [rbp-0x28],r9
  237f17:	4c 89 45 d0          	mov    QWORD PTR [rbp-0x30],r8
        switch (sd) {
  237f1b:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
  237f22:	eb 1f                	jmp    237f43 <__floatuntitf+0x193>
                a <<= 1;
  237f24:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  237f28:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  237f2c:	48 89 c2             	mov    rdx,rax
  237f2f:	48 01 d2             	add    rdx,rdx
  237f32:	48 0f a4 c1 01       	shld   rcx,rax,0x1
  237f37:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  237f3b:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
        switch (sd) {
  237f3f:	eb 02                	jmp    237f43 <__floatuntitf+0x193>
  237f41:	eb 00                	jmp    237f43 <__floatuntitf+0x193>
            },
        }
        // finish
        a |= @boolToInt((a & 4) != 0); // Or P into R
  237f43:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  237f47:	89 c1                	mov    ecx,eax
  237f49:	83 e1 04             	and    ecx,0x4
  237f4c:	89 ca                	mov    edx,ecx
  237f4e:	48 c1 ea 02          	shr    rdx,0x2
  237f52:	48 09 d0             	or     rax,rdx
  237f55:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
        a += 1; // round - this step may add a significant bit
  237f59:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  237f5d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  237f61:	48 83 c0 01          	add    rax,0x1
  237f65:	48 83 d2 00          	adc    rdx,0x0
  237f69:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  237f6d:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
        a >>= 2; // dump Q and R
  237f71:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  237f75:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  237f79:	48 89 d6             	mov    rsi,rdx
  237f7c:	48 0f a4 c6 3e       	shld   rsi,rax,0x3e
  237f81:	48 c1 ea 02          	shr    rdx,0x2
  237f85:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  237f89:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        // a is now rounded to LDBL_MANT_DIG or LDBL_MANT_DIG+1 bits
        if ((a & (u128(1) << LDBL_MANT_DIG)) != 0) {
  237f8d:	40 8a 7d de          	mov    dil,BYTE PTR [rbp-0x22]
  237f91:	40 f6 c7 02          	test   dil,0x2
  237f95:	74 28                	je     237fbf <__floatuntitf+0x20f>
  237f97:	eb 00                	jmp    237f99 <__floatuntitf+0x1e9>
            a >>= 1;
  237f99:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  237f9d:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  237fa1:	48 89 ca             	mov    rdx,rcx
  237fa4:	48 0f a4 c2 3f       	shld   rdx,rax,0x3f
  237fa9:	48 d1 e9             	shr    rcx,1
  237fac:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  237fb0:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            e += 1;
  237fb4:	8b 75 c4             	mov    esi,DWORD PTR [rbp-0x3c]
  237fb7:	83 c6 01             	add    esi,0x1
  237fba:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
        if ((a & (u128(1) << LDBL_MANT_DIG)) != 0) {
  237fbd:	eb 02                	jmp    237fc1 <__floatuntitf+0x211>
  237fbf:	eb 00                	jmp    237fc1 <__floatuntitf+0x211>
    if (sd > LDBL_MANT_DIG) {
  237fc1:	eb 4b                	jmp    23800e <__floatuntitf+0x25e>
        }
        // a is now rounded to LDBL_MANT_DIG bits
    } else {
        a <<= @intCast(u7, LDBL_MANT_DIG - sd);
  237fc3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  237fc7:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  237fcb:	8b 55 c8             	mov    edx,DWORD PTR [rbp-0x38]
  237fce:	be 71 00 00 00       	mov    esi,0x71
  237fd3:	29 d6                	sub    esi,edx
  237fd5:	40 88 f7             	mov    dil,sil
  237fd8:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
  237fdf:	40 88 f9             	mov    cl,dil
  237fe2:	4c 8b 85 60 ff ff ff 	mov    r8,QWORD PTR [rbp-0xa0]
  237fe9:	49 0f a5 c0          	shld   r8,rax,cl
  237fed:	41 88 f9             	mov    r9b,dil
  237ff0:	c4 e2 b1 f7 c0       	shlx   rax,rax,r9
  237ff5:	31 d2                	xor    edx,edx
  237ff7:	40 f6 c7 40          	test   dil,0x40
  237ffb:	4c 0f 45 c0          	cmovne r8,rax
  237fff:	41 89 d1             	mov    r9d,edx
  238002:	49 0f 45 c1          	cmovne rax,r9
  238006:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
  23800a:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
        // a is now rounded to LDBL_MANT_DIG bits
    }

    const high: u128 = (@intCast(u64, (e + 16383)) << 48) | // exponent
  23800e:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
  238011:	05 ff 3f 00 00       	add    eax,0x3fff
  238016:	89 c1                	mov    ecx,eax
  238018:	48 c1 e1 30          	shl    rcx,0x30
        (@truncate(u64, a >> 64) & 0x0000ffffffffffff); // mantissa-high
  23801c:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  238020:	40 b6 30             	mov    sil,0x30
  238023:	40 88 f7             	mov    dil,sil
  238026:	c4 e2 c0 f5 d2       	bzhi   rdx,rdx,rdi
    const high: u128 = (@intCast(u64, (e + 16383)) << 48) | // exponent
  23802b:	48 09 d1             	or     rcx,rdx
  23802e:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  238032:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
  238039:	00 
    const low = @truncate(u64, a); // mantissa-low
  23803a:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  23803e:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx

    return @bitCast(f128, low | (high << 64));
  238042:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  238046:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  23804a:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
  23804e:	48 89 55 90          	mov    QWORD PTR [rbp-0x70],rdx
  238052:	0f 28 45 90          	movaps xmm0,XMMWORD PTR [rbp-0x70]
  238056:	48 83 c4 10          	add    rsp,0x10
  23805a:	5b                   	pop    rbx
  23805b:	41 5e                	pop    r14
  23805d:	5d                   	pop    rbp
  23805e:	c3                   	ret    
  23805f:	90                   	nop

0000000000238060 <__floatuntidf>:
const builtin = @import("builtin");
const is_test = builtin.is_test;

const DBL_MANT_DIG = 53;

pub extern fn __floatuntidf(arg: u128) f64 {
  238060:	55                   	push   rbp
  238061:	48 89 e5             	mov    rbp,rsp
  238064:	41 56                	push   r14
  238066:	53                   	push   rbx
  238067:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  23806b:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
    @setRuntimeSafety(is_test);

    if (arg == 0)
  23806f:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  238073:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  238077:	48 09 fe             	or     rsi,rdi
  23807a:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  23807e:	75 0b                	jne    23808b <__floatuntidf+0x2b>
  238080:	eb 00                	jmp    238082 <__floatuntidf+0x22>
  238082:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
        return 0.0;
  238086:	5b                   	pop    rbx
  238087:	41 5e                	pop    r14
  238089:	5d                   	pop    rbp
  23808a:	c3                   	ret    
    if (arg == 0)
  23808b:	eb 00                	jmp    23808d <__floatuntidf+0x2d>
  23808d:	b8 80 00 00 00       	mov    eax,0x80

    var a = arg;
  238092:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  238096:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  23809a:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  23809e:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    const N: u32 = @sizeOf(u128) * 8;
  2380a2:	c7 45 cc 80 00 00 00 	mov    DWORD PTR [rbp-0x34],0x80
    const sd = @bitCast(i32, N - @clz(a)); // number of significant digits
  2380a9:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  2380ad:	f3 48 0f bd d1       	lzcnt  rdx,rcx
  2380b2:	40 88 d6             	mov    sil,dl
  2380b5:	f3 48 0f bd 55 d0    	lzcnt  rdx,QWORD PTR [rbp-0x30]
  2380bb:	89 d7                	mov    edi,edx
  2380bd:	83 c7 40             	add    edi,0x40
  2380c0:	41 88 f8             	mov    r8b,dil
  2380c3:	48 85 c9             	test   rcx,rcx
  2380c6:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
  2380c9:	44 88 45 9b          	mov    BYTE PTR [rbp-0x65],r8b
  2380cd:	40 88 75 9a          	mov    BYTE PTR [rbp-0x66],sil
  2380d1:	75 06                	jne    2380d9 <__floatuntidf+0x79>
  2380d3:	8a 45 9b             	mov    al,BYTE PTR [rbp-0x65]
  2380d6:	88 45 9a             	mov    BYTE PTR [rbp-0x66],al
  2380d9:	8a 45 9a             	mov    al,BYTE PTR [rbp-0x66]
  2380dc:	0f b6 c8             	movzx  ecx,al
  2380df:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
  2380e2:	29 ca                	sub    edx,ecx
  2380e4:	89 55 c8             	mov    DWORD PTR [rbp-0x38],edx
    var e: i32 = sd - 1; // exponent
  2380e7:	8b 4d c8             	mov    ecx,DWORD PTR [rbp-0x38]
  2380ea:	83 e9 01             	sub    ecx,0x1
  2380ed:	89 4d c4             	mov    DWORD PTR [rbp-0x3c],ecx
    if (sd > DBL_MANT_DIG) {
  2380f0:	83 7d c8 35          	cmp    DWORD PTR [rbp-0x38],0x35
  2380f4:	0f 8e 59 01 00 00    	jle    238253 <__floatuntidf+0x1f3>
        //                                                12345678901234567890123456
        //  1 = msb 1 bit
        //  P = bit DBL_MANT_DIG-1 bits to the right of 1
        //  Q = bit DBL_MANT_DIG bits to the right of 1
        //  R = "or" of all bits to the right of Q
        switch (sd) {
  2380fa:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  2380fd:	89 c1                	mov    ecx,eax
  2380ff:	83 e9 36             	sub    ecx,0x36
  238102:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
  238105:	89 4d 90             	mov    DWORD PTR [rbp-0x70],ecx
  238108:	0f 84 a6 00 00 00    	je     2381b4 <__floatuntidf+0x154>
  23810e:	eb 00                	jmp    238110 <__floatuntidf+0xb0>
  238110:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
  238113:	83 e8 37             	sub    eax,0x37
  238116:	89 45 8c             	mov    DWORD PTR [rbp-0x74],eax
  238119:	0f 84 b2 00 00 00    	je     2381d1 <__floatuntidf+0x171>
  23811f:	eb 00                	jmp    238121 <__floatuntidf+0xc1>
            DBL_MANT_DIG + 1 => {
                a <<= 1;
            },
            DBL_MANT_DIG + 2 => {},
            else => {
                const shift_amt = @bitCast(i32, N + (DBL_MANT_DIG + 2)) - sd;
  238121:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  238124:	b9 b7 00 00 00       	mov    ecx,0xb7
  238129:	29 c1                	sub    ecx,eax
  23812b:	89 4d c0             	mov    DWORD PTR [rbp-0x40],ecx
                const shift_amt_u7 = @intCast(u7, shift_amt);
  23812e:	8a 55 c0             	mov    dl,BYTE PTR [rbp-0x40]
  238131:	80 e2 7f             	and    dl,0x7f
  238134:	88 55 bf             	mov    BYTE PTR [rbp-0x41],dl
                a = (a >> @intCast(u7, sd - (DBL_MANT_DIG + 2))) |
  238137:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  23813b:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  23813f:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  238142:	83 c0 c9             	add    eax,0xffffffc9
  238145:	88 c2                	mov    dl,al
  238147:	88 d1                	mov    cl,dl
  238149:	49 89 f0             	mov    r8,rsi
  23814c:	49 0f ad f8          	shrd   r8,rdi,cl
  238150:	41 88 d1             	mov    r9b,dl
  238153:	c4 62 b3 f7 cf       	shrx   r9,rdi,r9
  238158:	31 c0                	xor    eax,eax
  23815a:	f6 c2 40             	test   dl,0x40
  23815d:	4d 0f 45 c1          	cmovne r8,r9
  238161:	41 89 c2             	mov    r10d,eax
  238164:	4d 0f 45 ca          	cmovne r9,r10
                    @boolToInt((a & (u128(@maxValue(u128)) >> shift_amt_u7)) != 0);
  238168:	8a 4d bf             	mov    cl,BYTE PTR [rbp-0x41]
  23816b:	49 c7 c3 ff ff ff ff 	mov    r11,0xffffffffffffffff
  238172:	88 4d 8b             	mov    BYTE PTR [rbp-0x75],cl
  238175:	4c 89 db             	mov    rbx,r11
  238178:	48 0f ad db          	shrd   rbx,rbx,cl
  23817c:	8a 4d 8b             	mov    cl,BYTE PTR [rbp-0x75]
  23817f:	41 88 ce             	mov    r14b,cl
  238182:	c4 42 8b f7 db       	shrx   r11,r11,r14
  238187:	f6 c1 40             	test   cl,0x40
  23818a:	49 0f 45 db          	cmovne rbx,r11
  23818e:	4d 0f 45 da          	cmovne r11,r10
  238192:	48 21 de             	and    rsi,rbx
  238195:	4c 21 df             	and    rdi,r11
  238198:	48 09 fe             	or     rsi,rdi
  23819b:	0f 95 c2             	setne  dl
  23819e:	0f b6 c2             	movzx  eax,dl
  2381a1:	89 c7                	mov    edi,eax
                a = (a >> @intCast(u7, sd - (DBL_MANT_DIG + 2))) |
  2381a3:	49 09 f8             	or     r8,rdi
  2381a6:	4c 89 4d d8          	mov    QWORD PTR [rbp-0x28],r9
  2381aa:	4c 89 45 d0          	mov    QWORD PTR [rbp-0x30],r8
        switch (sd) {
  2381ae:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
  2381b2:	eb 1f                	jmp    2381d3 <__floatuntidf+0x173>
                a <<= 1;
  2381b4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2381b8:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  2381bc:	48 89 c2             	mov    rdx,rax
  2381bf:	48 01 d2             	add    rdx,rdx
  2381c2:	48 0f a4 c1 01       	shld   rcx,rax,0x1
  2381c7:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  2381cb:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
        switch (sd) {
  2381cf:	eb 02                	jmp    2381d3 <__floatuntidf+0x173>
  2381d1:	eb 00                	jmp    2381d3 <__floatuntidf+0x173>
            },
        }
        // finish
        a |= @boolToInt((a & 4) != 0); // Or P into R
  2381d3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2381d7:	89 c1                	mov    ecx,eax
  2381d9:	83 e1 04             	and    ecx,0x4
  2381dc:	89 ca                	mov    edx,ecx
  2381de:	48 c1 ea 02          	shr    rdx,0x2
  2381e2:	48 09 d0             	or     rax,rdx
  2381e5:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
        a += 1; // round - this step may add a significant bit
  2381e9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2381ed:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  2381f1:	48 83 c0 01          	add    rax,0x1
  2381f5:	48 83 d2 00          	adc    rdx,0x0
  2381f9:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  2381fd:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
        a >>= 2; // dump Q and R
  238201:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  238205:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  238209:	48 89 d6             	mov    rsi,rdx
  23820c:	48 0f a4 c6 3e       	shld   rsi,rax,0x3e
  238211:	48 c1 ea 02          	shr    rdx,0x2
  238215:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  238219:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        // a is now rounded to DBL_MANT_DIG or DBL_MANT_DIG+1 bits
        if ((a & (u128(1) << DBL_MANT_DIG)) != 0) {
  23821d:	40 8a 7d d6          	mov    dil,BYTE PTR [rbp-0x2a]
  238221:	40 f6 c7 20          	test   dil,0x20
  238225:	74 28                	je     23824f <__floatuntidf+0x1ef>
  238227:	eb 00                	jmp    238229 <__floatuntidf+0x1c9>
            a >>= 1;
  238229:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23822d:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  238231:	48 89 ca             	mov    rdx,rcx
  238234:	48 0f a4 c2 3f       	shld   rdx,rax,0x3f
  238239:	48 d1 e9             	shr    rcx,1
  23823c:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  238240:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            e += 1;
  238244:	8b 75 c4             	mov    esi,DWORD PTR [rbp-0x3c]
  238247:	83 c6 01             	add    esi,0x1
  23824a:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
        if ((a & (u128(1) << DBL_MANT_DIG)) != 0) {
  23824d:	eb 02                	jmp    238251 <__floatuntidf+0x1f1>
  23824f:	eb 00                	jmp    238251 <__floatuntidf+0x1f1>
    if (sd > DBL_MANT_DIG) {
  238251:	eb 4b                	jmp    23829e <__floatuntidf+0x23e>
        }
        // a is now rounded to DBL_MANT_DIG bits
    } else {
        a <<= @intCast(u7, DBL_MANT_DIG - sd);
  238253:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  238257:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  23825b:	8b 55 c8             	mov    edx,DWORD PTR [rbp-0x38]
  23825e:	be 35 00 00 00       	mov    esi,0x35
  238263:	29 d6                	sub    esi,edx
  238265:	40 88 f7             	mov    dil,sil
  238268:	48 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rcx
  23826f:	40 88 f9             	mov    cl,dil
  238272:	4c 8b 85 78 ff ff ff 	mov    r8,QWORD PTR [rbp-0x88]
  238279:	49 0f a5 c0          	shld   r8,rax,cl
  23827d:	41 88 f9             	mov    r9b,dil
  238280:	c4 e2 b1 f7 c0       	shlx   rax,rax,r9
  238285:	31 d2                	xor    edx,edx
  238287:	40 f6 c7 40          	test   dil,0x40
  23828b:	4c 0f 45 c0          	cmovne r8,rax
  23828f:	41 89 d1             	mov    r9d,edx
  238292:	49 0f 45 c1          	cmovne rax,r9
  238296:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
  23829a:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
        // a is now rounded to DBL_MANT_DIG bits
    }

    const high: u64 = @bitCast(u32, (e + 1023) << 20) | // exponent
  23829e:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
  2382a1:	c1 e0 14             	shl    eax,0x14
        (@truncate(u32, a >> 32) & 0x000FFFFF); // mantissa-high
  2382a4:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
  2382a7:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
    const high: u64 = @bitCast(u32, (e + 1023) << 20) | // exponent
  2382ad:	89 ca                	mov    edx,ecx
  2382af:	89 c6                	mov    esi,eax
  2382b1:	8d 84 16 00 00 f0 3f 	lea    eax,[rsi+rdx*1+0x3ff00000]
  2382b8:	89 c2                	mov    edx,eax
  2382ba:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
    const low = @truncate(u32, a); // mantissa-low
  2382be:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
  2382c1:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax

    return @bitCast(f64, low | (high << 32));
  2382c4:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
  2382c7:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  2382cb:	48 c1 e2 20          	shl    rdx,0x20
  2382cf:	89 c0                	mov    eax,eax
  2382d1:	89 c6                	mov    esi,eax
  2382d3:	48 09 d6             	or     rsi,rdx
  2382d6:	c4 e1 f9 6e c6       	vmovq  xmm0,rsi
  2382db:	5b                   	pop    rbx
  2382dc:	41 5e                	pop    r14
  2382de:	5d                   	pop    rbp
  2382df:	c3                   	ret    

00000000002382e0 <__floatuntisf>:
const builtin = @import("builtin");
const is_test = builtin.is_test;

const FLT_MANT_DIG = 24;

pub extern fn __floatuntisf(arg: u128) f32 {
  2382e0:	55                   	push   rbp
  2382e1:	48 89 e5             	mov    rbp,rsp
  2382e4:	41 56                	push   r14
  2382e6:	53                   	push   rbx
  2382e7:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2382eb:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
    @setRuntimeSafety(is_test);

    if (arg == 0)
  2382ef:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  2382f3:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  2382f7:	48 09 fe             	or     rsi,rdi
  2382fa:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  2382fe:	75 0b                	jne    23830b <__floatuntisf+0x2b>
  238300:	eb 00                	jmp    238302 <__floatuntisf+0x22>
  238302:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
        return 0.0;
  238306:	5b                   	pop    rbx
  238307:	41 5e                	pop    r14
  238309:	5d                   	pop    rbp
  23830a:	c3                   	ret    
    if (arg == 0)
  23830b:	eb 00                	jmp    23830d <__floatuntisf+0x2d>
  23830d:	b8 80 00 00 00       	mov    eax,0x80

    var a = arg;
  238312:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  238316:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  23831a:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  23831e:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    const N: u32 = @sizeOf(u128) * 8;
  238322:	c7 45 cc 80 00 00 00 	mov    DWORD PTR [rbp-0x34],0x80
    const sd = @bitCast(i32, N - @clz(a)); // number of significant digits
  238329:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  23832d:	f3 48 0f bd d1       	lzcnt  rdx,rcx
  238332:	40 88 d6             	mov    sil,dl
  238335:	f3 48 0f bd 55 d0    	lzcnt  rdx,QWORD PTR [rbp-0x30]
  23833b:	89 d7                	mov    edi,edx
  23833d:	83 c7 40             	add    edi,0x40
  238340:	41 88 f8             	mov    r8b,dil
  238343:	48 85 c9             	test   rcx,rcx
  238346:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
  238349:	44 88 45 a3          	mov    BYTE PTR [rbp-0x5d],r8b
  23834d:	40 88 75 a2          	mov    BYTE PTR [rbp-0x5e],sil
  238351:	75 06                	jne    238359 <__floatuntisf+0x79>
  238353:	8a 45 a3             	mov    al,BYTE PTR [rbp-0x5d]
  238356:	88 45 a2             	mov    BYTE PTR [rbp-0x5e],al
  238359:	8a 45 a2             	mov    al,BYTE PTR [rbp-0x5e]
  23835c:	0f b6 c8             	movzx  ecx,al
  23835f:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
  238362:	29 ca                	sub    edx,ecx
  238364:	89 55 c8             	mov    DWORD PTR [rbp-0x38],edx
    var e: i32 = sd - 1; // exponent
  238367:	8b 4d c8             	mov    ecx,DWORD PTR [rbp-0x38]
  23836a:	83 e9 01             	sub    ecx,0x1
  23836d:	89 4d c4             	mov    DWORD PTR [rbp-0x3c],ecx
    if (sd > FLT_MANT_DIG) {
  238370:	83 7d c8 18          	cmp    DWORD PTR [rbp-0x38],0x18
  238374:	0f 8e 59 01 00 00    	jle    2384d3 <__floatuntisf+0x1f3>
        //                                                12345678901234567890123456
        //  1 = msb 1 bit
        //  P = bit FLT_MANT_DIG-1 bits to the right of 1
        //  Q = bit FLT_MANT_DIG bits to the right of 1
        //  R = "or" of all bits to the right of Q
        switch (sd) {
  23837a:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  23837d:	89 c1                	mov    ecx,eax
  23837f:	83 e9 19             	sub    ecx,0x19
  238382:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
  238385:	89 4d 98             	mov    DWORD PTR [rbp-0x68],ecx
  238388:	0f 84 a6 00 00 00    	je     238434 <__floatuntisf+0x154>
  23838e:	eb 00                	jmp    238390 <__floatuntisf+0xb0>
  238390:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
  238393:	83 e8 1a             	sub    eax,0x1a
  238396:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
  238399:	0f 84 b2 00 00 00    	je     238451 <__floatuntisf+0x171>
  23839f:	eb 00                	jmp    2383a1 <__floatuntisf+0xc1>
            FLT_MANT_DIG + 1 => {
                a <<= 1;
            },
            FLT_MANT_DIG + 2 => {},
            else => {
                const shift_amt = @bitCast(i32, N + (FLT_MANT_DIG + 2)) - sd;
  2383a1:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  2383a4:	b9 9a 00 00 00       	mov    ecx,0x9a
  2383a9:	29 c1                	sub    ecx,eax
  2383ab:	89 4d c0             	mov    DWORD PTR [rbp-0x40],ecx
                const shift_amt_u7 = @intCast(u7, shift_amt);
  2383ae:	8a 55 c0             	mov    dl,BYTE PTR [rbp-0x40]
  2383b1:	80 e2 7f             	and    dl,0x7f
  2383b4:	88 55 bf             	mov    BYTE PTR [rbp-0x41],dl
                a = (a >> @intCast(u7, sd - (FLT_MANT_DIG + 2))) |
  2383b7:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  2383bb:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  2383bf:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  2383c2:	83 c0 e6             	add    eax,0xffffffe6
  2383c5:	88 c2                	mov    dl,al
  2383c7:	88 d1                	mov    cl,dl
  2383c9:	49 89 f0             	mov    r8,rsi
  2383cc:	49 0f ad f8          	shrd   r8,rdi,cl
  2383d0:	41 88 d1             	mov    r9b,dl
  2383d3:	c4 62 b3 f7 cf       	shrx   r9,rdi,r9
  2383d8:	31 c0                	xor    eax,eax
  2383da:	f6 c2 40             	test   dl,0x40
  2383dd:	4d 0f 45 c1          	cmovne r8,r9
  2383e1:	41 89 c2             	mov    r10d,eax
  2383e4:	4d 0f 45 ca          	cmovne r9,r10
                    @boolToInt((a & (u128(@maxValue(u128)) >> shift_amt_u7)) != 0);
  2383e8:	8a 4d bf             	mov    cl,BYTE PTR [rbp-0x41]
  2383eb:	49 c7 c3 ff ff ff ff 	mov    r11,0xffffffffffffffff
  2383f2:	88 4d 93             	mov    BYTE PTR [rbp-0x6d],cl
  2383f5:	4c 89 db             	mov    rbx,r11
  2383f8:	48 0f ad db          	shrd   rbx,rbx,cl
  2383fc:	8a 4d 93             	mov    cl,BYTE PTR [rbp-0x6d]
  2383ff:	41 88 ce             	mov    r14b,cl
  238402:	c4 42 8b f7 db       	shrx   r11,r11,r14
  238407:	f6 c1 40             	test   cl,0x40
  23840a:	49 0f 45 db          	cmovne rbx,r11
  23840e:	4d 0f 45 da          	cmovne r11,r10
  238412:	48 21 de             	and    rsi,rbx
  238415:	4c 21 df             	and    rdi,r11
  238418:	48 09 fe             	or     rsi,rdi
  23841b:	0f 95 c2             	setne  dl
  23841e:	0f b6 c2             	movzx  eax,dl
  238421:	89 c7                	mov    edi,eax
                a = (a >> @intCast(u7, sd - (FLT_MANT_DIG + 2))) |
  238423:	49 09 f8             	or     r8,rdi
  238426:	4c 89 4d d8          	mov    QWORD PTR [rbp-0x28],r9
  23842a:	4c 89 45 d0          	mov    QWORD PTR [rbp-0x30],r8
        switch (sd) {
  23842e:	48 89 75 88          	mov    QWORD PTR [rbp-0x78],rsi
  238432:	eb 1f                	jmp    238453 <__floatuntisf+0x173>
                a <<= 1;
  238434:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  238438:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  23843c:	48 89 c2             	mov    rdx,rax
  23843f:	48 01 d2             	add    rdx,rdx
  238442:	48 0f a4 c1 01       	shld   rcx,rax,0x1
  238447:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  23844b:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
        switch (sd) {
  23844f:	eb 02                	jmp    238453 <__floatuntisf+0x173>
  238451:	eb 00                	jmp    238453 <__floatuntisf+0x173>
            },
        }
        // finish
        a |= @boolToInt((a & 4) != 0); // Or P into R
  238453:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  238457:	89 c1                	mov    ecx,eax
  238459:	83 e1 04             	and    ecx,0x4
  23845c:	89 ca                	mov    edx,ecx
  23845e:	48 c1 ea 02          	shr    rdx,0x2
  238462:	48 09 d0             	or     rax,rdx
  238465:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
        a += 1; // round - this step may add a significant bit
  238469:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23846d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  238471:	48 83 c0 01          	add    rax,0x1
  238475:	48 83 d2 00          	adc    rdx,0x0
  238479:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  23847d:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
        a >>= 2; // dump Q and R
  238481:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  238485:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  238489:	48 89 d6             	mov    rsi,rdx
  23848c:	48 0f a4 c6 3e       	shld   rsi,rax,0x3e
  238491:	48 c1 ea 02          	shr    rdx,0x2
  238495:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  238499:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        // a is now rounded to FLT_MANT_DIG or FLT_MANT_DIG+1 bits
        if ((a & (u128(1) << FLT_MANT_DIG)) != 0) {
  23849d:	40 8a 7d d3          	mov    dil,BYTE PTR [rbp-0x2d]
  2384a1:	40 f6 c7 01          	test   dil,0x1
  2384a5:	74 28                	je     2384cf <__floatuntisf+0x1ef>
  2384a7:	eb 00                	jmp    2384a9 <__floatuntisf+0x1c9>
            a >>= 1;
  2384a9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2384ad:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  2384b1:	48 89 ca             	mov    rdx,rcx
  2384b4:	48 0f a4 c2 3f       	shld   rdx,rax,0x3f
  2384b9:	48 d1 e9             	shr    rcx,1
  2384bc:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  2384c0:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            e += 1;
  2384c4:	8b 75 c4             	mov    esi,DWORD PTR [rbp-0x3c]
  2384c7:	83 c6 01             	add    esi,0x1
  2384ca:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
        if ((a & (u128(1) << FLT_MANT_DIG)) != 0) {
  2384cd:	eb 02                	jmp    2384d1 <__floatuntisf+0x1f1>
  2384cf:	eb 00                	jmp    2384d1 <__floatuntisf+0x1f1>
    if (sd > FLT_MANT_DIG) {
  2384d1:	eb 45                	jmp    238518 <__floatuntisf+0x238>
        }
        // a is now rounded to FLT_MANT_DIG bits
    } else {
        a <<= @intCast(u7, FLT_MANT_DIG - sd);
  2384d3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2384d7:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  2384db:	8b 55 c8             	mov    edx,DWORD PTR [rbp-0x38]
  2384de:	be 18 00 00 00       	mov    esi,0x18
  2384e3:	29 d6                	sub    esi,edx
  2384e5:	40 88 f7             	mov    dil,sil
  2384e8:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
  2384ec:	40 88 f9             	mov    cl,dil
  2384ef:	4c 8b 45 80          	mov    r8,QWORD PTR [rbp-0x80]
  2384f3:	49 0f a5 c0          	shld   r8,rax,cl
  2384f7:	41 88 f9             	mov    r9b,dil
  2384fa:	c4 e2 b1 f7 c0       	shlx   rax,rax,r9
  2384ff:	31 d2                	xor    edx,edx
  238501:	40 f6 c7 40          	test   dil,0x40
  238505:	4c 0f 45 c0          	cmovne r8,rax
  238509:	41 89 d1             	mov    r9d,edx
  23850c:	49 0f 45 c1          	cmovne rax,r9
  238510:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
  238514:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
        // a is now rounded to FLT_MANT_DIG bits
    }

    const high = @bitCast(u32, (e + 127) << 23); // exponent
  238518:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
  23851b:	c1 e0 17             	shl    eax,0x17
  23851e:	05 00 00 80 3f       	add    eax,0x3f800000
  238523:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
    const low = @truncate(u32, a) & 0x007fffff; // mantissa
  238526:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
  238529:	25 ff ff 7f 00       	and    eax,0x7fffff
  23852e:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax

    return @bitCast(f32, high | low);
  238531:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
  238534:	0b 45 b4             	or     eax,DWORD PTR [rbp-0x4c]
  238537:	c5 f9 6e c0          	vmovd  xmm0,eax
  23853b:	5b                   	pop    rbx
  23853c:	41 5e                	pop    r14
  23853e:	5d                   	pop    rbp
  23853f:	c3                   	ret    

0000000000238540 <__extenddftf2>:
pub extern fn __extenddftf2(a: f64) f128 {
  238540:	55                   	push   rbp
  238541:	48 89 e5             	mov    rbp,rsp
  238544:	48 81 ec c0 00 00 00 	sub    rsp,0xc0
  23854b:	48 b8 00 00 00 00 00 	movabs rax,0x7fe0000000000000
  238552:	00 e0 7f 
  238555:	48 b9 00 00 00 00 00 	movabs rcx,0x10000000000000
  23855c:	00 10 00 
  23855f:	be aa 00 00 00       	mov    esi,0xaa
  238564:	ba 10 00 00 00       	mov    edx,0x10
  238569:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  23856d:	49 b8 00 00 00 00 00 	movabs r8,0x8000000000000000
  238574:	00 00 80 
  238577:	49 b9 ff ff ff ff ff 	movabs r9,0x7fffffffffffffff
  23857e:	ff ff 7f 
  238581:	c5 fb 11 45 98       	vmovsd QWORD PTR [rbp-0x68],xmm0
    return extendXfYf2(f128, f64, a);
  238586:	c5 fb 10 45 98       	vmovsd xmm0,QWORD PTR [rbp-0x68]
  23858b:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    const dstMinNormal: dst_rep_t = dst_rep_t(1) << dstSigBits;
  238590:	49 ba 00 00 00 00 00 	movabs r10,0x1000000000000
  238597:	00 01 00 
  23859a:	4c 89 55 f0          	mov    QWORD PTR [rbp-0x10],r10
  23859e:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
  2385a5:	00 
    const aRep: src_rep_t = @bitCast(src_rep_t, a);
  2385a6:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  2385ab:	c4 c1 f9 7e c2       	vmovq  r10,xmm0
  2385b0:	4c 89 55 e0          	mov    QWORD PTR [rbp-0x20],r10
    const aAbs: src_rep_t = aRep & srcAbsMask;
  2385b4:	4c 23 4d e0          	and    r9,QWORD PTR [rbp-0x20]
  2385b8:	4c 89 4d d8          	mov    QWORD PTR [rbp-0x28],r9
    const sign: src_rep_t = aRep & srcSignMask;
  2385bc:	4c 23 45 e0          	and    r8,QWORD PTR [rbp-0x20]
  2385c0:	4c 89 45 d0          	mov    QWORD PTR [rbp-0x30],r8
    var absResult: dst_rep_t = undefined;
  2385c4:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
  2385c8:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  2385cc:	e8 df c2 ff ff       	call   2348b0 <memset>
    if (aAbs -% srcMinNormal < srcInfinity - srcMinNormal) {
  2385d1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2385d5:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  2385d9:	48 29 c8             	sub    rax,rcx
  2385dc:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
  2385e0:	48 39 d0             	cmp    rax,rdx
  2385e3:	73 4a                	jae    23862f <__extenddftf2+0xef>
        absResult = dst_rep_t(aAbs) << (dstSigBits - srcSigBits);
  2385e5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2385e9:	48 89 c1             	mov    rcx,rax
  2385ec:	48 c1 e1 3c          	shl    rcx,0x3c
  2385f0:	48 c1 e8 04          	shr    rax,0x4
  2385f4:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  2385f8:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
        absResult += (dstExpBias - srcExpBias) << dstSigBits;
  2385fc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  238600:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  238604:	48 ba 00 00 00 00 00 	movabs rdx,0x3c00000000000000
  23860b:	00 00 3c 
  23860e:	48 01 d1             	add    rcx,rdx
  238611:	40 0f 92 c6          	setb   sil
  238615:	40 f6 c6 01          	test   sil,0x1
  238619:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
  23861d:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  238624:	0f 85 cf 00 00 00    	jne    2386f9 <__extenddftf2+0x1b9>
  23862a:	e9 da 00 00 00       	jmp    238709 <__extenddftf2+0x1c9>
  23862f:	48 b8 00 00 00 00 00 	movabs rax,0x7ff0000000000000
  238636:	00 f0 7f 
    } else if (aAbs >= srcInfinity) {
  238639:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
  23863d:	72 68                	jb     2386a7 <__extenddftf2+0x167>
        absResult = dstInfExp << dstSigBits;
  23863f:	48 b8 00 00 00 00 00 	movabs rax,0x7fff000000000000
  238646:	00 ff 7f 
  238649:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  23864d:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
  238654:	00 
        absResult |= dst_rep_t(aAbs & srcQNaN) << (dstSigBits - srcSigBits);
  238655:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  238659:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  23865d:	48 ba 00 00 00 00 00 	movabs rdx,0x8000000000000
  238664:	00 08 00 
  238667:	48 21 d1             	and    rcx,rdx
  23866a:	48 c1 e9 04          	shr    rcx,0x4
  23866e:	48 09 c8             	or     rax,rcx
  238671:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
        absResult |= dst_rep_t(aAbs & srcNaNCode) << (dstSigBits - srcSigBits);
  238675:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  238679:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  23867d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  238681:	40 b6 33             	mov    sil,0x33
  238684:	40 88 f7             	mov    dil,sil
  238687:	c4 e2 c0 f5 d2       	bzhi   rdx,rdx,rdi
  23868c:	48 89 d7             	mov    rdi,rdx
  23868f:	48 c1 ef 04          	shr    rdi,0x4
  238693:	48 c1 e2 3c          	shl    rdx,0x3c
  238697:	48 09 d0             	or     rax,rdx
  23869a:	48 09 f9             	or     rcx,rdi
  23869d:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  2386a1:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
    } else if (aAbs >= srcInfinity) {
  2386a5:	eb 4d                	jmp    2386f4 <__extenddftf2+0x1b4>
    } else if (aAbs != 0) {
  2386a7:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  2386ac:	74 34                	je     2386e2 <__extenddftf2+0x1a2>
        const scale: u32 = @clz(aAbs) - @clz(src_rep_t(srcMinNormal));
  2386ae:	f3 48 0f bd 45 d8    	lzcnt  rax,QWORD PTR [rbp-0x28]
  2386b4:	88 c1                	mov    cl,al
  2386b6:	80 c1 f5             	add    cl,0xf5
  2386b9:	88 ca                	mov    dl,cl
  2386bb:	80 e2 7f             	and    dl,0x7f
  2386be:	28 ca                	sub    dl,cl
  2386c0:	40 0f 95 c6          	setne  sil
  2386c4:	40 88 cf             	mov    dil,cl
  2386c7:	40 f6 c6 01          	test   sil,0x1
  2386cb:	88 8d 77 ff ff ff    	mov    BYTE PTR [rbp-0x89],cl
  2386d1:	88 95 76 ff ff ff    	mov    BYTE PTR [rbp-0x8a],dl
  2386d7:	40 88 bd 75 ff ff ff 	mov    BYTE PTR [rbp-0x8b],dil
  2386de:	75 41                	jne    238721 <__extenddftf2+0x1e1>
  2386e0:	eb 4f                	jmp    238731 <__extenddftf2+0x1f1>
        absResult = 0;
  2386e2:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
  2386e9:	00 
  2386ea:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
  2386f1:	00 
    } else if (aAbs >= srcInfinity) {
  2386f2:	eb 00                	jmp    2386f4 <__extenddftf2+0x1b4>
    if (aAbs -% srcMinNormal < srcInfinity - srcMinNormal) {
  2386f4:	e9 76 01 00 00       	jmp    23886f <__extenddftf2+0x32f>
  2386f9:	48 8d 3d 98 b7 00 00 	lea    rdi,[rip+0xb798]        # 243e98 <__unnamed_2>
  238700:	31 c0                	xor    eax,eax
  238702:	89 c6                	mov    esi,eax
        absResult += (dstExpBias - srcExpBias) << dstSigBits;
  238704:	e8 e7 e0 ff ff       	call   2367f0 <panic>
  238709:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  238710:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  238714:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  238718:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
    if (aAbs -% srcMinNormal < srcInfinity - srcMinNormal) {
  23871c:	e9 4e 01 00 00       	jmp    23886f <__extenddftf2+0x32f>
  238721:	48 8d 3d 70 b7 00 00 	lea    rdi,[rip+0xb770]        # 243e98 <__unnamed_2>
  238728:	31 c0                	xor    eax,eax
  23872a:	89 c6                	mov    esi,eax
        const scale: u32 = @clz(aAbs) - @clz(src_rep_t(srcMinNormal));
  23872c:	e8 bf e0 ff ff       	call   2367f0 <panic>
  238731:	8a 85 77 ff ff ff    	mov    al,BYTE PTR [rbp-0x89]
  238737:	24 7f                	and    al,0x7f
  238739:	0f b6 c8             	movzx  ecx,al
  23873c:	89 4d bc             	mov    DWORD PTR [rbp-0x44],ecx
  23873f:	31 c9                	xor    ecx,ecx
  238741:	89 ca                	mov    edx,ecx
        absResult = dst_rep_t(aAbs) << @intCast(DstShift, dstSigBits - srcSigBits + scale);
  238743:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  238747:	8b 4d bc             	mov    ecx,DWORD PTR [rbp-0x44]
  23874a:	83 c1 3c             	add    ecx,0x3c
  23874d:	0f 92 c0             	setb   al
  238750:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  238757:	48 89 b5 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rsi
  23875e:	89 8d 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],ecx
  238764:	88 85 5b ff ff ff    	mov    BYTE PTR [rbp-0xa5],al
  23876a:	72 02                	jb     23876e <__extenddftf2+0x22e>
  23876c:	eb 10                	jmp    23877e <__extenddftf2+0x23e>
  23876e:	48 8d 3d 23 b7 00 00 	lea    rdi,[rip+0xb723]        # 243e98 <__unnamed_2>
  238775:	31 c0                	xor    eax,eax
  238777:	89 c6                	mov    esi,eax
  238779:	e8 72 e0 ff ff       	call   2367f0 <panic>
  23877e:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
  238784:	88 c1                	mov    cl,al
  238786:	83 e0 7f             	and    eax,0x7f
  238789:	8b 95 5c ff ff ff    	mov    edx,DWORD PTR [rbp-0xa4]
  23878f:	39 c2                	cmp    edx,eax
  238791:	88 8d 5a ff ff ff    	mov    BYTE PTR [rbp-0xa6],cl
  238797:	75 68                	jne    238801 <__extenddftf2+0x2c1>
  238799:	b8 00 3c 00 00       	mov    eax,0x3c00
  23879e:	8a 8d 5a ff ff ff    	mov    cl,BYTE PTR [rbp-0xa6]
  2387a4:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  2387ab:	48 8b b5 60 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa0]
  2387b2:	48 0f a5 f2          	shld   rdx,rsi,cl
  2387b6:	8a 8d 5a ff ff ff    	mov    cl,BYTE PTR [rbp-0xa6]
  2387bc:	40 88 cf             	mov    dil,cl
  2387bf:	c4 e2 c1 f7 fe       	shlx   rdi,rsi,rdi
  2387c4:	45 31 c0             	xor    r8d,r8d
  2387c7:	f6 c1 40             	test   cl,0x40
  2387ca:	48 0f 45 d7          	cmovne rdx,rdi
  2387ce:	45 89 c1             	mov    r9d,r8d
  2387d1:	49 0f 45 f9          	cmovne rdi,r9
  2387d5:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
  2387d9:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
        absResult ^= dstMinNormal;
  2387dd:	44 8a 55 ce          	mov    r10b,BYTE PTR [rbp-0x32]
  2387e1:	41 80 f2 01          	xor    r10b,0x1
  2387e5:	44 88 55 ce          	mov    BYTE PTR [rbp-0x32],r10b
        const resultExponent: u32 = dstExpBias - srcExpBias - scale + 1;
  2387e9:	2b 45 bc             	sub    eax,DWORD PTR [rbp-0x44]
  2387ec:	41 0f 92 c2          	setb   r10b
  2387f0:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
  2387f6:	44 88 95 53 ff ff ff 	mov    BYTE PTR [rbp-0xad],r10b
  2387fd:	72 12                	jb     238811 <__extenddftf2+0x2d1>
  2387ff:	eb 20                	jmp    238821 <__extenddftf2+0x2e1>
  238801:	48 8d 3d a8 b6 00 00 	lea    rdi,[rip+0xb6a8]        # 243eb0 <__unnamed_3>
  238808:	31 c0                	xor    eax,eax
  23880a:	89 c6                	mov    esi,eax
        absResult = dst_rep_t(aAbs) << @intCast(DstShift, dstSigBits - srcSigBits + scale);
  23880c:	e8 df df ff ff       	call   2367f0 <panic>
  238811:	48 8d 3d 80 b6 00 00 	lea    rdi,[rip+0xb680]        # 243e98 <__unnamed_2>
  238818:	31 c0                	xor    eax,eax
  23881a:	89 c6                	mov    esi,eax
        const resultExponent: u32 = dstExpBias - srcExpBias - scale + 1;
  23881c:	e8 cf df ff ff       	call   2367f0 <panic>
  238821:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
  238827:	83 c0 01             	add    eax,0x1
  23882a:	0f 92 c1             	setb   cl
  23882d:	89 85 4c ff ff ff    	mov    DWORD PTR [rbp-0xb4],eax
  238833:	88 8d 4b ff ff ff    	mov    BYTE PTR [rbp-0xb5],cl
  238839:	72 02                	jb     23883d <__extenddftf2+0x2fd>
  23883b:	eb 10                	jmp    23884d <__extenddftf2+0x30d>
  23883d:	48 8d 3d 54 b6 00 00 	lea    rdi,[rip+0xb654]        # 243e98 <__unnamed_2>
  238844:	31 c0                	xor    eax,eax
  238846:	89 c6                	mov    esi,eax
  238848:	e8 a3 df ff ff       	call   2367f0 <panic>
  23884d:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [rbp-0xb4]
  238853:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
        absResult |= @intCast(dst_rep_t, resultExponent) << dstSigBits;
  238856:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  23885a:	8b 55 b8             	mov    edx,DWORD PTR [rbp-0x48]
  23885d:	89 d6                	mov    esi,edx
  23885f:	48 c1 e6 30          	shl    rsi,0x30
  238863:	48 09 f1             	or     rcx,rsi
  238866:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
    } else if (aAbs != 0) {
  23886a:	e9 83 fe ff ff       	jmp    2386f2 <__extenddftf2+0x1b2>
    const result: dst_rep_t align(@alignOf(dst_t)) = absResult | dst_rep_t(sign) << (dstBits - srcBits);
  23886f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  238873:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  238877:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  23887b:	48 09 d1             	or     rcx,rdx
  23887e:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  238882:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
    return @bitCast(dst_t, result);
  238886:	0f 28 45 a0          	movaps xmm0,XMMWORD PTR [rbp-0x60]
    return extendXfYf2(f128, f64, a);
  23888a:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  238891:	5d                   	pop    rbp
  238892:	c3                   	ret    
  238893:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  23889a:	84 00 00 00 00 00 

00000000002388a0 <__extendsftf2>:
pub extern fn __extendsftf2(a: f32) f128 {
  2388a0:	55                   	push   rbp
  2388a1:	48 89 e5             	mov    rbp,rsp
  2388a4:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  2388ab:	be aa 00 00 00       	mov    esi,0xaa
  2388b0:	b8 10 00 00 00       	mov    eax,0x10
  2388b5:	89 c2                	mov    edx,eax
  2388b7:	48 8d 4d c8          	lea    rcx,[rbp-0x38]
  2388bb:	c5 fa 11 45 ac       	vmovss DWORD PTR [rbp-0x54],xmm0
    return extendXfYf2(f128, f32, a);
  2388c0:	c5 fa 10 45 ac       	vmovss xmm0,DWORD PTR [rbp-0x54]
  2388c5:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
    const dstMinNormal: dst_rep_t = dst_rep_t(1) << dstSigBits;
  2388ca:	48 bf 00 00 00 00 00 	movabs rdi,0x1000000000000
  2388d1:	00 01 00 
  2388d4:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  2388d8:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
  2388df:	00 
    const aRep: src_rep_t = @bitCast(src_rep_t, a);
  2388e0:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  2388e5:	c5 f9 7e c0          	vmovd  eax,xmm0
  2388e9:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
    const aAbs: src_rep_t = aRep & srcAbsMask;
  2388ec:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  2388ef:	25 ff ff ff 7f       	and    eax,0x7fffffff
  2388f4:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    const sign: src_rep_t = aRep & srcSignMask;
  2388f7:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  2388fa:	25 00 00 00 80       	and    eax,0x80000000
  2388ff:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
    var absResult: dst_rep_t = undefined;
  238902:	48 89 cf             	mov    rdi,rcx
  238905:	e8 a6 bf ff ff       	call   2348b0 <memset>
    if (aAbs -% srcMinNormal < srcInfinity - srcMinNormal) {
  23890a:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  23890d:	2d 00 00 80 00       	sub    eax,0x800000
  238912:	3d 00 00 00 7f       	cmp    eax,0x7f000000
  238917:	73 45                	jae    23895e <__extendsftf2+0xbe>
        absResult = dst_rep_t(aAbs) << (dstSigBits - srcSigBits);
  238919:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  23891c:	89 c1                	mov    ecx,eax
  23891e:	48 c1 e1 19          	shl    rcx,0x19
  238922:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  238926:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
  23892d:	00 
        absResult += (dstExpBias - srcExpBias) << dstSigBits;
  23892e:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  238932:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  238936:	48 be 00 00 00 00 00 	movabs rsi,0x3f80000000000000
  23893d:	00 80 3f 
  238940:	48 01 f2             	add    rdx,rsi
  238943:	40 0f 92 c7          	setb   dil
  238947:	40 f6 c7 01          	test   dil,0x1
  23894b:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  23894f:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
  238953:	0f 85 a9 00 00 00    	jne    238a02 <__extendsftf2+0x162>
  238959:	e9 b4 00 00 00       	jmp    238a12 <__extendsftf2+0x172>
    } else if (aAbs >= srcInfinity) {
  23895e:	81 7d e0 00 00 80 7f 	cmp    DWORD PTR [rbp-0x20],0x7f800000
  238965:	72 54                	jb     2389bb <__extendsftf2+0x11b>
        absResult = dstInfExp << dstSigBits;
  238967:	48 b8 00 00 00 00 00 	movabs rax,0x7fff000000000000
  23896e:	00 ff 7f 
  238971:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  238975:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
  23897c:	00 
        absResult |= dst_rep_t(aAbs & srcQNaN) << (dstSigBits - srcSigBits);
  23897d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  238981:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
  238984:	89 ca                	mov    edx,ecx
  238986:	89 d1                	mov    ecx,edx
  238988:	81 e1 00 00 40 00    	and    ecx,0x400000
  23898e:	89 ca                	mov    edx,ecx
  238990:	48 c1 e2 19          	shl    rdx,0x19
  238994:	48 09 d0             	or     rax,rdx
  238997:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
        absResult |= dst_rep_t(aAbs & srcNaNCode) << (dstSigBits - srcSigBits);
  23899b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23899f:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
  2389a2:	89 ca                	mov    edx,ecx
  2389a4:	89 d1                	mov    ecx,edx
  2389a6:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
  2389ac:	89 ca                	mov    edx,ecx
  2389ae:	48 c1 e2 19          	shl    rdx,0x19
  2389b2:	48 09 d0             	or     rax,rdx
  2389b5:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
    } else if (aAbs >= srcInfinity) {
  2389b9:	eb 42                	jmp    2389fd <__extendsftf2+0x15d>
    } else if (aAbs != 0) {
  2389bb:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
  2389bf:	74 2a                	je     2389eb <__extendsftf2+0x14b>
        const scale: u32 = @clz(aAbs) - @clz(src_rep_t(srcMinNormal));
  2389c1:	f3 0f bd 45 e0       	lzcnt  eax,DWORD PTR [rbp-0x20]
  2389c6:	88 c1                	mov    cl,al
  2389c8:	80 c1 f8             	add    cl,0xf8
  2389cb:	88 ca                	mov    dl,cl
  2389cd:	80 e2 3f             	and    dl,0x3f
  2389d0:	28 ca                	sub    dl,cl
  2389d2:	40 0f 95 c6          	setne  sil
  2389d6:	40 88 cf             	mov    dil,cl
  2389d9:	40 f6 c6 01          	test   sil,0x1
  2389dd:	88 4d 97             	mov    BYTE PTR [rbp-0x69],cl
  2389e0:	88 55 96             	mov    BYTE PTR [rbp-0x6a],dl
  2389e3:	40 88 7d 95          	mov    BYTE PTR [rbp-0x6b],dil
  2389e7:	75 3e                	jne    238a27 <__extendsftf2+0x187>
  2389e9:	eb 4c                	jmp    238a37 <__extendsftf2+0x197>
        absResult = 0;
  2389eb:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
  2389f2:	00 
  2389f3:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
  2389fa:	00 
    } else if (aAbs >= srcInfinity) {
  2389fb:	eb 00                	jmp    2389fd <__extendsftf2+0x15d>
    if (aAbs -% srcMinNormal < srcInfinity - srcMinNormal) {
  2389fd:	e9 65 01 00 00       	jmp    238b67 <__extendsftf2+0x2c7>
  238a02:	48 8d 3d 8f b4 00 00 	lea    rdi,[rip+0xb48f]        # 243e98 <__unnamed_2>
  238a09:	31 c0                	xor    eax,eax
  238a0b:	89 c6                	mov    esi,eax
        absResult += (dstExpBias - srcExpBias) << dstSigBits;
  238a0d:	e8 de dd ff ff       	call   2367f0 <panic>
  238a12:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  238a16:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  238a1a:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  238a1e:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    if (aAbs -% srcMinNormal < srcInfinity - srcMinNormal) {
  238a22:	e9 40 01 00 00       	jmp    238b67 <__extendsftf2+0x2c7>
  238a27:	48 8d 3d 6a b4 00 00 	lea    rdi,[rip+0xb46a]        # 243e98 <__unnamed_2>
  238a2e:	31 c0                	xor    eax,eax
  238a30:	89 c6                	mov    esi,eax
        const scale: u32 = @clz(aAbs) - @clz(src_rep_t(srcMinNormal));
  238a32:	e8 b9 dd ff ff       	call   2367f0 <panic>
  238a37:	8a 45 97             	mov    al,BYTE PTR [rbp-0x69]
  238a3a:	24 3f                	and    al,0x3f
  238a3c:	0f b6 c8             	movzx  ecx,al
  238a3f:	89 4d c4             	mov    DWORD PTR [rbp-0x3c],ecx
        absResult = dst_rep_t(aAbs) << @intCast(DstShift, dstSigBits - srcSigBits + scale);
  238a42:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
  238a45:	89 ca                	mov    edx,ecx
  238a47:	31 c9                	xor    ecx,ecx
  238a49:	89 ce                	mov    esi,ecx
  238a4b:	8b 4d c4             	mov    ecx,DWORD PTR [rbp-0x3c]
  238a4e:	83 c1 59             	add    ecx,0x59
  238a51:	0f 92 c0             	setb   al
  238a54:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
  238a58:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
  238a5c:	89 8d 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],ecx
  238a62:	88 85 7b ff ff ff    	mov    BYTE PTR [rbp-0x85],al
  238a68:	72 02                	jb     238a6c <__extendsftf2+0x1cc>
  238a6a:	eb 10                	jmp    238a7c <__extendsftf2+0x1dc>
  238a6c:	48 8d 3d 25 b4 00 00 	lea    rdi,[rip+0xb425]        # 243e98 <__unnamed_2>
  238a73:	31 c0                	xor    eax,eax
  238a75:	89 c6                	mov    esi,eax
  238a77:	e8 74 dd ff ff       	call   2367f0 <panic>
  238a7c:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
  238a82:	88 c1                	mov    cl,al
  238a84:	83 e0 7f             	and    eax,0x7f
  238a87:	8b 95 7c ff ff ff    	mov    edx,DWORD PTR [rbp-0x84]
  238a8d:	39 c2                	cmp    edx,eax
  238a8f:	88 8d 7a ff ff ff    	mov    BYTE PTR [rbp-0x86],cl
  238a95:	75 62                	jne    238af9 <__extendsftf2+0x259>
  238a97:	b8 80 3f 00 00       	mov    eax,0x3f80
  238a9c:	8a 8d 7a ff ff ff    	mov    cl,BYTE PTR [rbp-0x86]
  238aa2:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
  238aa6:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
  238aaa:	48 0f a5 f2          	shld   rdx,rsi,cl
  238aae:	8a 8d 7a ff ff ff    	mov    cl,BYTE PTR [rbp-0x86]
  238ab4:	40 88 cf             	mov    dil,cl
  238ab7:	c4 e2 c1 f7 fe       	shlx   rdi,rsi,rdi
  238abc:	45 31 c0             	xor    r8d,r8d
  238abf:	f6 c1 40             	test   cl,0x40
  238ac2:	48 0f 45 d7          	cmovne rdx,rdi
  238ac6:	45 89 c1             	mov    r9d,r8d
  238ac9:	49 0f 45 f9          	cmovne rdi,r9
  238acd:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  238ad1:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
        absResult ^= dstMinNormal;
  238ad5:	44 8a 55 d6          	mov    r10b,BYTE PTR [rbp-0x2a]
  238ad9:	41 80 f2 01          	xor    r10b,0x1
  238add:	44 88 55 d6          	mov    BYTE PTR [rbp-0x2a],r10b
        const resultExponent: u32 = dstExpBias - srcExpBias - scale + 1;
  238ae1:	2b 45 c4             	sub    eax,DWORD PTR [rbp-0x3c]
  238ae4:	41 0f 92 c2          	setb   r10b
  238ae8:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
  238aee:	44 88 95 73 ff ff ff 	mov    BYTE PTR [rbp-0x8d],r10b
  238af5:	72 12                	jb     238b09 <__extendsftf2+0x269>
  238af7:	eb 20                	jmp    238b19 <__extendsftf2+0x279>
  238af9:	48 8d 3d b0 b3 00 00 	lea    rdi,[rip+0xb3b0]        # 243eb0 <__unnamed_3>
  238b00:	31 c0                	xor    eax,eax
  238b02:	89 c6                	mov    esi,eax
        absResult = dst_rep_t(aAbs) << @intCast(DstShift, dstSigBits - srcSigBits + scale);
  238b04:	e8 e7 dc ff ff       	call   2367f0 <panic>
  238b09:	48 8d 3d 88 b3 00 00 	lea    rdi,[rip+0xb388]        # 243e98 <__unnamed_2>
  238b10:	31 c0                	xor    eax,eax
  238b12:	89 c6                	mov    esi,eax
        const resultExponent: u32 = dstExpBias - srcExpBias - scale + 1;
  238b14:	e8 d7 dc ff ff       	call   2367f0 <panic>
  238b19:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
  238b1f:	83 c0 01             	add    eax,0x1
  238b22:	0f 92 c1             	setb   cl
  238b25:	89 85 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],eax
  238b2b:	88 8d 6b ff ff ff    	mov    BYTE PTR [rbp-0x95],cl
  238b31:	72 02                	jb     238b35 <__extendsftf2+0x295>
  238b33:	eb 10                	jmp    238b45 <__extendsftf2+0x2a5>
  238b35:	48 8d 3d 5c b3 00 00 	lea    rdi,[rip+0xb35c]        # 243e98 <__unnamed_2>
  238b3c:	31 c0                	xor    eax,eax
  238b3e:	89 c6                	mov    esi,eax
  238b40:	e8 ab dc ff ff       	call   2367f0 <panic>
  238b45:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
  238b4b:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
        absResult |= @intCast(dst_rep_t, resultExponent) << dstSigBits;
  238b4e:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  238b52:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
  238b55:	89 d6                	mov    esi,edx
  238b57:	48 c1 e6 30          	shl    rsi,0x30
  238b5b:	48 09 f1             	or     rcx,rsi
  238b5e:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    } else if (aAbs != 0) {
  238b62:	e9 94 fe ff ff       	jmp    2389fb <__extendsftf2+0x15b>
    const result: dst_rep_t align(@alignOf(dst_t)) = absResult | dst_rep_t(sign) << (dstBits - srcBits);
  238b67:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  238b6b:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  238b6f:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  238b72:	89 d6                	mov    esi,edx
  238b74:	48 c1 e6 20          	shl    rsi,0x20
  238b78:	48 09 f1             	or     rcx,rsi
  238b7b:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  238b7f:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
    return @bitCast(dst_t, result);
  238b83:	0f 28 45 b0          	movaps xmm0,XMMWORD PTR [rbp-0x50]
    return extendXfYf2(f128, f32, a);
  238b87:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  238b8e:	5d                   	pop    rbp
  238b8f:	c3                   	ret    

0000000000238b90 <__trunctfdf2>:
pub extern fn __trunctfdf2(a: f128) f64 {
  238b90:	55                   	push   rbp
  238b91:	48 89 e5             	mov    rbp,rsp
  238b94:	48 81 ec b0 01 00 00 	sub    rsp,0x1b0
  238b9b:	0f 29 85 40 ff ff ff 	movaps XMMWORD PTR [rbp-0xc0],xmm0
    return truncXfYf2(f64, f128, a);
  238ba2:	0f 28 85 40 ff ff ff 	movaps xmm0,XMMWORD PTR [rbp-0xc0]
  238ba9:	0f 29 45 f0          	movaps XMMWORD PTR [rbp-0x10],xmm0
    const aRep: src_rep_t = @bitCast(src_rep_t, a);
  238bad:	0f 28 45 f0          	movaps xmm0,XMMWORD PTR [rbp-0x10]
  238bb1:	0f 29 45 e0          	movaps XMMWORD PTR [rbp-0x20],xmm0
    const aAbs: src_rep_t = aRep & srcAbsMask;
  238bb5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  238bb9:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  238bbd:	b2 3f                	mov    dl,0x3f
  238bbf:	40 88 d6             	mov    sil,dl
  238bc2:	c4 e2 c8 f5 c9       	bzhi   rcx,rcx,rsi
  238bc7:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  238bcb:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
    const sign: src_rep_t = aRep & srcSignMask;
  238bcf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  238bd3:	48 b9 00 00 00 00 00 	movabs rcx,0x8000000000000000
  238bda:	00 00 80 
  238bdd:	48 21 c8             	and    rax,rcx
  238be0:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  238be4:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
  238beb:	00 
    var absResult: dst_rep_t = undefined;
  238bec:	48 b8 aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaaa
  238bf3:	aa aa aa 
  238bf6:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
    if (aAbs -% underflow < aAbs -% overflow) {
  238bfa:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  238bfe:	48 b9 00 00 00 00 00 	movabs rcx,0xc3ff000000000000
  238c05:	00 ff c3 
  238c08:	48 89 c6             	mov    rsi,rax
  238c0b:	48 01 ce             	add    rsi,rcx
  238c0e:	48 b9 00 00 00 00 00 	movabs rcx,0xbc01000000000000
  238c15:	00 01 bc 
  238c18:	48 01 c8             	add    rax,rcx
  238c1b:	48 29 c6             	sub    rsi,rax
  238c1e:	48 89 b5 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rsi
  238c25:	0f 83 ee 00 00 00    	jae    238d19 <__trunctfdf2+0x189>
  238c2b:	eb 00                	jmp    238c2d <__trunctfdf2+0x9d>
        absResult = @truncate(dst_rep_t, aAbs >> (srcSigBits - dstSigBits));
  238c2d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  238c31:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  238c35:	48 0f a4 c1 04       	shld   rcx,rax,0x4
  238c3a:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
        absResult -%= dst_rep_t(srcExpBias - dstExpBias) << dstSigBits;
  238c3e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  238c42:	48 b9 00 00 00 00 00 	movabs rcx,0x4000000000000000
  238c49:	00 00 40 
  238c4c:	48 01 c8             	add    rax,rcx
  238c4f:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
        const roundBits: src_rep_t = aAbs & roundMask;
  238c53:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  238c57:	b2 3c                	mov    dl,0x3c
  238c59:	88 d1                	mov    cl,dl
  238c5b:	c4 e2 f0 f5 c0       	bzhi   rax,rax,rcx
  238c60:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  238c64:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
  238c6b:	00 
        if (roundBits > halfway) {
  238c6c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  238c70:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  238c74:	48 be 01 00 00 00 00 	movabs rsi,0x800000000000001
  238c7b:	00 00 08 
  238c7e:	48 29 f0             	sub    rax,rsi
  238c81:	48 83 d9 00          	sbb    rcx,0x0
  238c85:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  238c8c:	48 89 8d 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rcx
  238c93:	72 25                	jb     238cba <__trunctfdf2+0x12a>
  238c95:	eb 00                	jmp    238c97 <__trunctfdf2+0x107>
            absResult += 1;
  238c97:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  238c9b:	48 83 c0 01          	add    rax,0x1
  238c9f:	0f 92 c1             	setb   cl
  238ca2:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
  238ca9:	88 8d 1f ff ff ff    	mov    BYTE PTR [rbp-0xe1],cl
  238caf:	0f 82 16 02 00 00    	jb     238ecb <__trunctfdf2+0x33b>
  238cb5:	e9 21 02 00 00       	jmp    238edb <__trunctfdf2+0x34b>
        } else if (roundBits == halfway) {
  238cba:	c5 fa 6f 45 a8       	vmovdqu xmm0,XMMWORD PTR [rbp-0x58]
  238cbf:	48 b8 00 00 00 00 00 	movabs rax,0x800000000000000
  238cc6:	00 00 08 
  238cc9:	c4 e1 f9 6e c8       	vmovq  xmm1,rax
  238cce:	c5 f9 74 c1          	vpcmpeqb xmm0,xmm0,xmm1
  238cd2:	c5 f9 d7 c8          	vpmovmskb ecx,xmm0
  238cd6:	81 e9 ff ff 00 00    	sub    ecx,0xffff
  238cdc:	89 8d 18 ff ff ff    	mov    DWORD PTR [rbp-0xe8],ecx
  238ce2:	75 2c                	jne    238d10 <__trunctfdf2+0x180>
  238ce4:	eb 00                	jmp    238ce6 <__trunctfdf2+0x156>
            absResult += absResult & 1;
  238ce6:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  238cea:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  238cee:	48 83 e1 01          	and    rcx,0x1
  238cf2:	48 01 c8             	add    rax,rcx
  238cf5:	0f 92 c2             	setb   dl
  238cf8:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
  238cff:	88 95 0f ff ff ff    	mov    BYTE PTR [rbp-0xf1],dl
  238d05:	0f 82 e0 01 00 00    	jb     238eeb <__trunctfdf2+0x35b>
  238d0b:	e9 eb 01 00 00       	jmp    238efb <__trunctfdf2+0x36b>
        } else if (roundBits == halfway) {
  238d10:	eb 00                	jmp    238d12 <__trunctfdf2+0x182>
        if (roundBits > halfway) {
  238d12:	eb 00                	jmp    238d14 <__trunctfdf2+0x184>
    if (aAbs -% underflow < aAbs -% overflow) {
  238d14:	e9 d8 04 00 00       	jmp    2391f1 <__trunctfdf2+0x661>
    } else if (aAbs > srcInfinity) {
  238d19:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  238d1d:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  238d21:	48 83 e8 01          	sub    rax,0x1
  238d25:	48 ba 00 00 00 00 00 	movabs rdx,0x7fff000000000000
  238d2c:	00 ff 7f 
  238d2f:	48 19 d1             	sbb    rcx,rdx
  238d32:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  238d39:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  238d40:	72 63                	jb     238da5 <__trunctfdf2+0x215>
  238d42:	eb 00                	jmp    238d44 <__trunctfdf2+0x1b4>
        absResult = @intCast(dst_rep_t, dstInfExp) << dstSigBits;
  238d44:	48 b8 00 00 00 00 00 	movabs rax,0x7ff0000000000000
  238d4b:	00 f0 7f 
  238d4e:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
        absResult |= dstQNaN;
  238d52:	8a 4d be             	mov    cl,BYTE PTR [rbp-0x42]
  238d55:	80 c9 08             	or     cl,0x8
  238d58:	88 4d be             	mov    BYTE PTR [rbp-0x42],cl
        absResult |= @intCast(dst_rep_t, ((aAbs & srcNaNCode) >> (srcSigBits - dstSigBits)) & dstNaNCode);
  238d5b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  238d5f:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  238d63:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  238d67:	b1 2f                	mov    cl,0x2f
  238d69:	40 88 cf             	mov    dil,cl
  238d6c:	c4 e2 c0 f5 f6       	bzhi   rsi,rsi,rdi
  238d71:	48 0f a4 d6 04       	shld   rsi,rdx,0x4
  238d76:	c5 f9 76 c0          	vpcmpeqd xmm0,xmm0,xmm0
  238d7a:	c5 79 d7 c0          	vpmovmskb r8d,xmm0
  238d7e:	41 81 e8 ff ff 00 00 	sub    r8d,0xffff
  238d85:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  238d8c:	48 89 b5 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rsi
  238d93:	44 89 85 e4 fe ff ff 	mov    DWORD PTR [rbp-0x11c],r8d
  238d9a:	0f 84 6b 01 00 00    	je     238f0b <__trunctfdf2+0x37b>
  238da0:	e9 7d 01 00 00       	jmp    238f22 <__trunctfdf2+0x392>
    } else if (aAbs >= overflow) {
  238da5:	0f b7 45 de          	movzx  eax,WORD PTR [rbp-0x22]
  238da9:	89 c1                	mov    ecx,eax
  238dab:	48 81 e9 ff 43 00 00 	sub    rcx,0x43ff
  238db2:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
  238db9:	72 15                	jb     238dd0 <__trunctfdf2+0x240>
  238dbb:	eb 00                	jmp    238dbd <__trunctfdf2+0x22d>
  238dbd:	48 b8 00 00 00 00 00 	movabs rax,0x7ff0000000000000
  238dc4:	00 f0 7f 
        absResult = @intCast(dst_rep_t, dstInfExp) << dstSigBits;
  238dc7:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
    } else if (aAbs >= overflow) {
  238dcb:	e9 f4 00 00 00       	jmp    238ec4 <__trunctfdf2+0x334>
        const aExp = @intCast(u32, aAbs >> srcSigBits);
  238dd0:	0f b7 45 de          	movzx  eax,WORD PTR [rbp-0x22]
  238dd4:	c5 f9 76 c0          	vpcmpeqd xmm0,xmm0,xmm0
  238dd8:	c5 f9 d7 c8          	vpmovmskb ecx,xmm0
  238ddc:	81 e9 ff ff 00 00    	sub    ecx,0xffff
  238de2:	89 85 d4 fe ff ff    	mov    DWORD PTR [rbp-0x12c],eax
  238de8:	89 8d d0 fe ff ff    	mov    DWORD PTR [rbp-0x130],ecx
  238dee:	0f 84 3e 01 00 00    	je     238f32 <__trunctfdf2+0x3a2>
  238df4:	e9 5d 01 00 00       	jmp    238f56 <__trunctfdf2+0x3c6>
            absResult = 0;
  238df9:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
  238e00:	00 
        if (shift > srcSigBits) {
  238e01:	e9 bc 00 00 00       	jmp    238ec2 <__trunctfdf2+0x332>
  238e06:	b8 80 00 00 00       	mov    eax,0x80
            const sticky: src_rep_t = significand << @intCast(SrcShift, srcBits - shift);
  238e0b:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  238e0f:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  238e13:	2b 45 a0             	sub    eax,DWORD PTR [rbp-0x60]
  238e16:	40 0f 92 c6          	setb   sil
  238e1a:	48 89 95 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rdx
  238e21:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
  238e28:	89 85 bc fe ff ff    	mov    DWORD PTR [rbp-0x144],eax
  238e2e:	40 88 b5 bb fe ff ff 	mov    BYTE PTR [rbp-0x145],sil
  238e35:	0f 82 a7 01 00 00    	jb     238fe2 <__trunctfdf2+0x452>
  238e3b:	e9 b2 01 00 00       	jmp    238ff2 <__trunctfdf2+0x462>
                absResult += 1;
  238e40:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  238e44:	48 83 c0 01          	add    rax,0x1
  238e48:	0f 92 c1             	setb   cl
  238e4b:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  238e52:	88 8d af fe ff ff    	mov    BYTE PTR [rbp-0x151],cl
  238e58:	0f 82 53 03 00 00    	jb     2391b1 <__trunctfdf2+0x621>
  238e5e:	e9 5e 03 00 00       	jmp    2391c1 <__trunctfdf2+0x631>
            } else if (roundBits == halfway) {
  238e63:	c5 fa 6f 85 60 ff ff 	vmovdqu xmm0,XMMWORD PTR [rbp-0xa0]
  238e6a:	ff 
  238e6b:	48 b8 00 00 00 00 00 	movabs rax,0x800000000000000
  238e72:	00 00 08 
  238e75:	c4 e1 f9 6e c8       	vmovq  xmm1,rax
  238e7a:	c5 f9 74 c1          	vpcmpeqb xmm0,xmm0,xmm1
  238e7e:	c5 f9 d7 c8          	vpmovmskb ecx,xmm0
  238e82:	81 e9 ff ff 00 00    	sub    ecx,0xffff
  238e88:	89 8d a8 fe ff ff    	mov    DWORD PTR [rbp-0x158],ecx
  238e8e:	75 2c                	jne    238ebc <__trunctfdf2+0x32c>
  238e90:	eb 00                	jmp    238e92 <__trunctfdf2+0x302>
                absResult += absResult & 1;
  238e92:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  238e96:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  238e9a:	48 83 e1 01          	and    rcx,0x1
  238e9e:	48 01 c8             	add    rax,rcx
  238ea1:	0f 92 c2             	setb   dl
  238ea4:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
  238eab:	88 95 9f fe ff ff    	mov    BYTE PTR [rbp-0x161],dl
  238eb1:	0f 82 1a 03 00 00    	jb     2391d1 <__trunctfdf2+0x641>
  238eb7:	e9 25 03 00 00       	jmp    2391e1 <__trunctfdf2+0x651>
            } else if (roundBits == halfway) {
  238ebc:	eb 00                	jmp    238ebe <__trunctfdf2+0x32e>
            if (roundBits > halfway) {
  238ebe:	eb 00                	jmp    238ec0 <__trunctfdf2+0x330>
        if (shift > srcSigBits) {
  238ec0:	eb 00                	jmp    238ec2 <__trunctfdf2+0x332>
    } else if (aAbs >= overflow) {
  238ec2:	eb 00                	jmp    238ec4 <__trunctfdf2+0x334>
    } else if (aAbs > srcInfinity) {
  238ec4:	eb 00                	jmp    238ec6 <__trunctfdf2+0x336>
    if (aAbs -% underflow < aAbs -% overflow) {
  238ec6:	e9 26 03 00 00       	jmp    2391f1 <__trunctfdf2+0x661>
  238ecb:	48 8d 3d c6 af 00 00 	lea    rdi,[rip+0xafc6]        # 243e98 <__unnamed_2>
  238ed2:	31 c0                	xor    eax,eax
  238ed4:	89 c6                	mov    esi,eax
            absResult += 1;
  238ed6:	e8 15 d9 ff ff       	call   2367f0 <panic>
  238edb:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  238ee2:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
        if (roundBits > halfway) {
  238ee6:	e9 29 fe ff ff       	jmp    238d14 <__trunctfdf2+0x184>
  238eeb:	48 8d 3d a6 af 00 00 	lea    rdi,[rip+0xafa6]        # 243e98 <__unnamed_2>
  238ef2:	31 c0                	xor    eax,eax
  238ef4:	89 c6                	mov    esi,eax
            absResult += absResult & 1;
  238ef6:	e8 f5 d8 ff ff       	call   2367f0 <panic>
  238efb:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  238f02:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
        } else if (roundBits == halfway) {
  238f06:	e9 07 fe ff ff       	jmp    238d12 <__trunctfdf2+0x182>
        absResult |= @intCast(dst_rep_t, ((aAbs & srcNaNCode) >> (srcSigBits - dstSigBits)) & dstNaNCode);
  238f0b:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  238f12:	48 8b 8d e8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x118]
  238f19:	48 09 c8             	or     rax,rcx
  238f1c:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
    } else if (aAbs > srcInfinity) {
  238f20:	eb a4                	jmp    238ec6 <__trunctfdf2+0x336>
  238f22:	48 8d 3d 87 af 00 00 	lea    rdi,[rip+0xaf87]        # 243eb0 <__unnamed_3>
  238f29:	31 c0                	xor    eax,eax
  238f2b:	89 c6                	mov    esi,eax
        absResult |= @intCast(dst_rep_t, ((aAbs & srcNaNCode) >> (srcSigBits - dstSigBits)) & dstNaNCode);
  238f2d:	e8 be d8 ff ff       	call   2367f0 <panic>
  238f32:	b8 00 3c 00 00       	mov    eax,0x3c00
        const aExp = @intCast(u32, aAbs >> srcSigBits);
  238f37:	8b 8d d4 fe ff ff    	mov    ecx,DWORD PTR [rbp-0x12c]
  238f3d:	89 4d a4             	mov    DWORD PTR [rbp-0x5c],ecx
        const shift = @intCast(u32, srcExpBias - dstExpBias - aExp + 1);
  238f40:	2b 45 a4             	sub    eax,DWORD PTR [rbp-0x5c]
  238f43:	0f 92 c2             	setb   dl
  238f46:	89 85 98 fe ff ff    	mov    DWORD PTR [rbp-0x168],eax
  238f4c:	88 95 97 fe ff ff    	mov    BYTE PTR [rbp-0x169],dl
  238f52:	72 12                	jb     238f66 <__trunctfdf2+0x3d6>
  238f54:	eb 20                	jmp    238f76 <__trunctfdf2+0x3e6>
  238f56:	48 8d 3d 53 af 00 00 	lea    rdi,[rip+0xaf53]        # 243eb0 <__unnamed_3>
  238f5d:	31 c0                	xor    eax,eax
  238f5f:	89 c6                	mov    esi,eax
        const aExp = @intCast(u32, aAbs >> srcSigBits);
  238f61:	e8 8a d8 ff ff       	call   2367f0 <panic>
  238f66:	48 8d 3d 2b af 00 00 	lea    rdi,[rip+0xaf2b]        # 243e98 <__unnamed_2>
  238f6d:	31 c0                	xor    eax,eax
  238f6f:	89 c6                	mov    esi,eax
        const shift = @intCast(u32, srcExpBias - dstExpBias - aExp + 1);
  238f71:	e8 7a d8 ff ff       	call   2367f0 <panic>
  238f76:	8b 85 98 fe ff ff    	mov    eax,DWORD PTR [rbp-0x168]
  238f7c:	83 c0 01             	add    eax,0x1
  238f7f:	0f 92 c1             	setb   cl
  238f82:	89 85 90 fe ff ff    	mov    DWORD PTR [rbp-0x170],eax
  238f88:	88 8d 8f fe ff ff    	mov    BYTE PTR [rbp-0x171],cl
  238f8e:	72 02                	jb     238f92 <__trunctfdf2+0x402>
  238f90:	eb 10                	jmp    238fa2 <__trunctfdf2+0x412>
  238f92:	48 8d 3d ff ae 00 00 	lea    rdi,[rip+0xaeff]        # 243e98 <__unnamed_2>
  238f99:	31 c0                	xor    eax,eax
  238f9b:	89 c6                	mov    esi,eax
  238f9d:	e8 4e d8 ff ff       	call   2367f0 <panic>
  238fa2:	8b 85 90 fe ff ff    	mov    eax,DWORD PTR [rbp-0x170]
  238fa8:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
        const significand: src_rep_t = (aRep & srcSignificandMask) | srcMinNormal;
  238fab:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  238faf:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  238fb3:	40 b6 30             	mov    sil,0x30
  238fb6:	40 88 f7             	mov    dil,sil
  238fb9:	c4 e2 c0 f5 d2       	bzhi   rdx,rdx,rdi
  238fbe:	48 bf 00 00 00 00 00 	movabs rdi,0x1000000000000
  238fc5:	00 01 00 
  238fc8:	48 09 fa             	or     rdx,rdi
  238fcb:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
  238fcf:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
        if (shift > srcSigBits) {
  238fd3:	83 7d a0 70          	cmp    DWORD PTR [rbp-0x60],0x70
  238fd7:	0f 87 1c fe ff ff    	ja     238df9 <__trunctfdf2+0x269>
  238fdd:	e9 24 fe ff ff       	jmp    238e06 <__trunctfdf2+0x276>
  238fe2:	48 8d 3d af ae 00 00 	lea    rdi,[rip+0xaeaf]        # 243e98 <__unnamed_2>
  238fe9:	31 c0                	xor    eax,eax
  238feb:	89 c6                	mov    esi,eax
            const sticky: src_rep_t = significand << @intCast(SrcShift, srcBits - shift);
  238fed:	e8 fe d7 ff ff       	call   2367f0 <panic>
  238ff2:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
  238ff8:	88 c1                	mov    cl,al
  238ffa:	83 e0 7f             	and    eax,0x7f
  238ffd:	8b 95 bc fe ff ff    	mov    edx,DWORD PTR [rbp-0x144]
  239003:	39 c2                	cmp    edx,eax
  239005:	88 8d 8e fe ff ff    	mov    BYTE PTR [rbp-0x172],cl
  23900b:	75 72                	jne    23907f <__trunctfdf2+0x4ef>
  23900d:	8a 8d 8e fe ff ff    	mov    cl,BYTE PTR [rbp-0x172]
  239013:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  23901a:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  239021:	48 0f a5 d0          	shld   rax,rdx,cl
  239025:	8a 8d 8e fe ff ff    	mov    cl,BYTE PTR [rbp-0x172]
  23902b:	40 88 ce             	mov    sil,cl
  23902e:	c4 e2 c9 f7 f2       	shlx   rsi,rdx,rsi
  239033:	31 ff                	xor    edi,edi
  239035:	f6 c1 40             	test   cl,0x40
  239038:	48 0f 45 c6          	cmovne rax,rsi
  23903c:	41 89 f8             	mov    r8d,edi
  23903f:	49 0f 45 f0          	cmovne rsi,r8
  239043:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  239047:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
            const denormalizedSignificand: src_rep_t = significand >> @intCast(SrcShift, shift) | sticky;
  23904b:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  23904f:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  239053:	8b 7d a0             	mov    edi,DWORD PTR [rbp-0x60]
  239056:	41 88 f9             	mov    r9b,dil
  239059:	41 89 fa             	mov    r10d,edi
  23905c:	41 83 e2 7f          	and    r10d,0x7f
  239060:	44 39 d7             	cmp    edi,r10d
  239063:	48 89 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rax
  23906a:	48 89 b5 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rsi
  239071:	44 88 8d 77 fe ff ff 	mov    BYTE PTR [rbp-0x189],r9b
  239078:	74 15                	je     23908f <__trunctfdf2+0x4ff>
  23907a:	e9 a9 00 00 00       	jmp    239128 <__trunctfdf2+0x598>
  23907f:	48 8d 3d 2a ae 00 00 	lea    rdi,[rip+0xae2a]        # 243eb0 <__unnamed_3>
  239086:	31 c0                	xor    eax,eax
  239088:	89 c6                	mov    esi,eax
            const sticky: src_rep_t = significand << @intCast(SrcShift, srcBits - shift);
  23908a:	e8 61 d7 ff ff       	call   2367f0 <panic>
            const denormalizedSignificand: src_rep_t = significand >> @intCast(SrcShift, shift) | sticky;
  23908f:	8a 8d 77 fe ff ff    	mov    cl,BYTE PTR [rbp-0x189]
  239095:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
  23909c:	48 8b 95 78 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x188]
  2390a3:	48 0f ad d0          	shrd   rax,rdx,cl
  2390a7:	8a 8d 77 fe ff ff    	mov    cl,BYTE PTR [rbp-0x189]
  2390ad:	40 88 ce             	mov    sil,cl
  2390b0:	c4 e2 cb f7 f2       	shrx   rsi,rdx,rsi
  2390b5:	31 ff                	xor    edi,edi
  2390b7:	f6 c1 40             	test   cl,0x40
  2390ba:	48 0f 45 c6          	cmovne rax,rsi
  2390be:	41 89 f8             	mov    r8d,edi
  2390c1:	49 0f 45 f0          	cmovne rsi,r8
  2390c5:	4c 8b 45 80          	mov    r8,QWORD PTR [rbp-0x80]
  2390c9:	4c 8b 4d 88          	mov    r9,QWORD PTR [rbp-0x78]
  2390cd:	4c 09 c0             	or     rax,r8
  2390d0:	4c 09 ce             	or     rsi,r9
  2390d3:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
  2390da:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
            absResult = @intCast(dst_rep_t, denormalizedSignificand >> (srcSigBits - dstSigBits));
  2390e1:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  2390e8:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
  2390ef:	49 89 f0             	mov    r8,rsi
  2390f2:	49 c1 e8 3c          	shr    r8,0x3c
  2390f6:	c4 c1 f9 6e c0       	vmovq  xmm0,r8
  2390fb:	48 0f a4 c6 04       	shld   rsi,rax,0x4
  239100:	c4 e1 f9 6e ce       	vmovq  xmm1,rsi
  239105:	c5 f1 6c c0          	vpunpcklqdq xmm0,xmm1,xmm0
  239109:	c5 f9 74 c1          	vpcmpeqb xmm0,xmm0,xmm1
  23910d:	c5 f9 d7 f8          	vpmovmskb edi,xmm0
  239111:	81 ef ff ff 00 00    	sub    edi,0xffff
  239117:	48 89 b5 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rsi
  23911e:	89 bd 64 fe ff ff    	mov    DWORD PTR [rbp-0x19c],edi
  239124:	74 12                	je     239138 <__trunctfdf2+0x5a8>
  239126:	eb 79                	jmp    2391a1 <__trunctfdf2+0x611>
  239128:	48 8d 3d 81 ad 00 00 	lea    rdi,[rip+0xad81]        # 243eb0 <__unnamed_3>
  23912f:	31 c0                	xor    eax,eax
  239131:	89 c6                	mov    esi,eax
            const denormalizedSignificand: src_rep_t = significand >> @intCast(SrcShift, shift) | sticky;
  239133:	e8 b8 d6 ff ff       	call   2367f0 <panic>
            absResult = @intCast(dst_rep_t, denormalizedSignificand >> (srcSigBits - dstSigBits));
  239138:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
  23913f:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
            const roundBits: src_rep_t = denormalizedSignificand & roundMask;
  239143:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
  23914a:	b2 3c                	mov    dl,0x3c
  23914c:	40 88 d6             	mov    sil,dl
  23914f:	c4 e2 c8 f5 c9       	bzhi   rcx,rcx,rsi
  239154:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
  23915b:	48 c7 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],0x0
  239162:	00 00 00 00 
            if (roundBits > halfway) {
  239166:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  23916d:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
  239174:	31 ff                	xor    edi,edi
  239176:	49 b8 00 00 00 00 00 	movabs r8,0x800000000000000
  23917d:	00 00 08 
  239180:	49 29 c8             	sub    r8,rcx
  239183:	89 f9                	mov    ecx,edi
  239185:	48 19 f1             	sbb    rcx,rsi
  239188:	4c 89 85 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],r8
  23918f:	48 89 8d 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rcx
  239196:	0f 82 a4 fc ff ff    	jb     238e40 <__trunctfdf2+0x2b0>
  23919c:	e9 c2 fc ff ff       	jmp    238e63 <__trunctfdf2+0x2d3>
  2391a1:	48 8d 3d 08 ad 00 00 	lea    rdi,[rip+0xad08]        # 243eb0 <__unnamed_3>
  2391a8:	31 c0                	xor    eax,eax
  2391aa:	89 c6                	mov    esi,eax
            absResult = @intCast(dst_rep_t, denormalizedSignificand >> (srcSigBits - dstSigBits));
  2391ac:	e8 3f d6 ff ff       	call   2367f0 <panic>
  2391b1:	48 8d 3d e0 ac 00 00 	lea    rdi,[rip+0xace0]        # 243e98 <__unnamed_2>
  2391b8:	31 c0                	xor    eax,eax
  2391ba:	89 c6                	mov    esi,eax
                absResult += 1;
  2391bc:	e8 2f d6 ff ff       	call   2367f0 <panic>
  2391c1:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  2391c8:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
            if (roundBits > halfway) {
  2391cc:	e9 ef fc ff ff       	jmp    238ec0 <__trunctfdf2+0x330>
  2391d1:	48 8d 3d c0 ac 00 00 	lea    rdi,[rip+0xacc0]        # 243e98 <__unnamed_2>
  2391d8:	31 c0                	xor    eax,eax
  2391da:	89 c6                	mov    esi,eax
                absResult += absResult & 1;
  2391dc:	e8 0f d6 ff ff       	call   2367f0 <panic>
  2391e1:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
  2391e8:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
            } else if (roundBits == halfway) {
  2391ec:	e9 cd fc ff ff       	jmp    238ebe <__trunctfdf2+0x32e>
    const result: dst_rep_t align(@alignOf(dst_t)) = absResult | @truncate(dst_rep_t, sign >> @intCast(SrcShift, srcBits - dstBits));
  2391f1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  2391f5:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  2391f9:	48 09 c8             	or     rax,rcx
  2391fc:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
    return @bitCast(dst_t, result);
  239203:	c5 fa 7e 85 58 ff ff 	vmovq  xmm0,QWORD PTR [rbp-0xa8]
  23920a:	ff 
    return truncXfYf2(f64, f128, a);
  23920b:	48 81 c4 b0 01 00 00 	add    rsp,0x1b0
  239212:	5d                   	pop    rbp
  239213:	c3                   	ret    
  239214:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  23921b:	00 00 00 00 00 

0000000000239220 <__trunctfsf2>:
pub extern fn __trunctfsf2(a: f128) f32 {
  239220:	55                   	push   rbp
  239221:	48 89 e5             	mov    rbp,rsp
  239224:	48 81 ec 90 01 00 00 	sub    rsp,0x190
  23922b:	0f 29 85 40 ff ff ff 	movaps XMMWORD PTR [rbp-0xc0],xmm0
    return truncXfYf2(f32, f128, a);
  239232:	0f 28 85 40 ff ff ff 	movaps xmm0,XMMWORD PTR [rbp-0xc0]
  239239:	0f 29 45 f0          	movaps XMMWORD PTR [rbp-0x10],xmm0
    const aRep: src_rep_t = @bitCast(src_rep_t, a);
  23923d:	0f 28 45 f0          	movaps xmm0,XMMWORD PTR [rbp-0x10]
  239241:	0f 29 45 e0          	movaps XMMWORD PTR [rbp-0x20],xmm0
    const aAbs: src_rep_t = aRep & srcAbsMask;
  239245:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  239249:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  23924d:	b2 3f                	mov    dl,0x3f
  23924f:	40 88 d6             	mov    sil,dl
  239252:	c4 e2 c8 f5 c9       	bzhi   rcx,rcx,rsi
  239257:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  23925b:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
    const sign: src_rep_t = aRep & srcSignMask;
  23925f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  239263:	48 b9 00 00 00 00 00 	movabs rcx,0x8000000000000000
  23926a:	00 00 80 
  23926d:	48 21 c8             	and    rax,rcx
  239270:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  239274:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
  23927b:	00 
    var absResult: dst_rep_t = undefined;
  23927c:	c7 45 bc aa aa aa aa 	mov    DWORD PTR [rbp-0x44],0xaaaaaaaa
    if (aAbs -% underflow < aAbs -% overflow) {
  239283:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  239287:	48 b9 00 00 00 00 00 	movabs rcx,0xc07f000000000000
  23928e:	00 7f c0 
  239291:	48 89 c6             	mov    rsi,rax
  239294:	48 01 ce             	add    rsi,rcx
  239297:	48 b9 00 00 00 00 00 	movabs rcx,0xbf81000000000000
  23929e:	00 81 bf 
  2392a1:	48 01 c8             	add    rax,rcx
  2392a4:	48 29 c6             	sub    rsi,rax
  2392a7:	48 89 b5 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rsi
  2392ae:	0f 83 d5 00 00 00    	jae    239389 <__trunctfsf2+0x169>
  2392b4:	eb 00                	jmp    2392b6 <__trunctfsf2+0x96>
        absResult = @truncate(dst_rep_t, aAbs >> (srcSigBits - dstSigBits));
  2392b6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2392ba:	48 c1 e8 19          	shr    rax,0x19
  2392be:	89 c1                	mov    ecx,eax
  2392c0:	89 4d bc             	mov    DWORD PTR [rbp-0x44],ecx
        absResult -%= dst_rep_t(srcExpBias - dstExpBias) << dstSigBits;
  2392c3:	8b 4d bc             	mov    ecx,DWORD PTR [rbp-0x44]
  2392c6:	81 c1 00 00 00 40    	add    ecx,0x40000000
  2392cc:	89 4d bc             	mov    DWORD PTR [rbp-0x44],ecx
        const roundBits: src_rep_t = aAbs & roundMask;
  2392cf:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2392d3:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  2392d7:	89 d1                	mov    ecx,edx
  2392d9:	81 e1 ff ff ff 01    	and    ecx,0x1ffffff
  2392df:	89 ca                	mov    edx,ecx
  2392e1:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  2392e5:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
        if (roundBits > halfway) {
  2392e9:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  2392ed:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  2392f1:	48 83 e8 01          	sub    rax,0x1
  2392f5:	48 81 da 00 00 00 01 	sbb    rdx,0x1000000
  2392fc:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  239303:	48 89 95 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rdx
  23930a:	72 22                	jb     23932e <__trunctfsf2+0x10e>
  23930c:	eb 00                	jmp    23930e <__trunctfsf2+0xee>
            absResult += 1;
  23930e:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  239311:	83 c0 01             	add    eax,0x1
  239314:	0f 92 c1             	setb   cl
  239317:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
  23931d:	88 8d 23 ff ff ff    	mov    BYTE PTR [rbp-0xdd],cl
  239323:	0f 82 ef 01 00 00    	jb     239518 <__trunctfsf2+0x2f8>
  239329:	e9 fa 01 00 00       	jmp    239528 <__trunctfsf2+0x308>
        } else if (roundBits == halfway) {
  23932e:	c5 fa 6f 45 a8       	vmovdqu xmm0,XMMWORD PTR [rbp-0x58]
  239333:	b8 00 00 00 01       	mov    eax,0x1000000
  239338:	89 c1                	mov    ecx,eax
  23933a:	c4 e1 f9 6e c9       	vmovq  xmm1,rcx
  23933f:	c5 f1 73 f9 08       	vpslldq xmm1,xmm1,0x8
  239344:	c5 f9 74 c1          	vpcmpeqb xmm0,xmm0,xmm1
  239348:	c5 f9 d7 c0          	vpmovmskb eax,xmm0
  23934c:	2d ff ff 00 00       	sub    eax,0xffff
  239351:	89 85 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],eax
  239357:	75 27                	jne    239380 <__trunctfsf2+0x160>
  239359:	eb 00                	jmp    23935b <__trunctfsf2+0x13b>
            absResult += absResult & 1;
  23935b:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  23935e:	8b 4d bc             	mov    ecx,DWORD PTR [rbp-0x44]
  239361:	83 e1 01             	and    ecx,0x1
  239364:	01 c8                	add    eax,ecx
  239366:	0f 92 c2             	setb   dl
  239369:	89 85 18 ff ff ff    	mov    DWORD PTR [rbp-0xe8],eax
  23936f:	88 95 17 ff ff ff    	mov    BYTE PTR [rbp-0xe9],dl
  239375:	0f 82 bb 01 00 00    	jb     239536 <__trunctfsf2+0x316>
  23937b:	e9 c6 01 00 00       	jmp    239546 <__trunctfsf2+0x326>
        } else if (roundBits == halfway) {
  239380:	eb 00                	jmp    239382 <__trunctfsf2+0x162>
        if (roundBits > halfway) {
  239382:	eb 00                	jmp    239384 <__trunctfsf2+0x164>
    if (aAbs -% underflow < aAbs -% overflow) {
  239384:	e9 99 04 00 00       	jmp    239822 <__trunctfsf2+0x602>
    } else if (aAbs > srcInfinity) {
  239389:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23938d:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  239391:	48 83 e8 01          	sub    rax,0x1
  239395:	48 ba 00 00 00 00 00 	movabs rdx,0x7fff000000000000
  23939c:	00 ff 7f 
  23939f:	48 19 d1             	sbb    rcx,rdx
  2393a2:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  2393a9:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
  2393b0:	72 4f                	jb     239401 <__trunctfsf2+0x1e1>
  2393b2:	eb 00                	jmp    2393b4 <__trunctfsf2+0x194>
        absResult = @intCast(dst_rep_t, dstInfExp) << dstSigBits;
  2393b4:	c7 45 bc 00 00 80 7f 	mov    DWORD PTR [rbp-0x44],0x7f800000
        absResult |= dstQNaN;
  2393bb:	8a 45 be             	mov    al,BYTE PTR [rbp-0x42]
  2393be:	0c 40                	or     al,0x40
  2393c0:	88 45 be             	mov    BYTE PTR [rbp-0x42],al
        absResult |= @intCast(dst_rep_t, ((aAbs & srcNaNCode) >> (srcSigBits - dstSigBits)) & dstNaNCode);
  2393c3:	8b 4d bc             	mov    ecx,DWORD PTR [rbp-0x44]
  2393c6:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  2393ca:	48 c1 ea 19          	shr    rdx,0x19
  2393ce:	89 d6                	mov    esi,edx
  2393d0:	81 e6 ff ff 3f 00    	and    esi,0x3fffff
  2393d6:	c5 f9 76 c0          	vpcmpeqd xmm0,xmm0,xmm0
  2393da:	c5 f9 d7 f8          	vpmovmskb edi,xmm0
  2393de:	81 ef ff ff 00 00    	sub    edi,0xffff
  2393e4:	89 8d fc fe ff ff    	mov    DWORD PTR [rbp-0x104],ecx
  2393ea:	89 b5 f8 fe ff ff    	mov    DWORD PTR [rbp-0x108],esi
  2393f0:	89 bd f4 fe ff ff    	mov    DWORD PTR [rbp-0x10c],edi
  2393f6:	0f 84 58 01 00 00    	je     239554 <__trunctfsf2+0x334>
  2393fc:	e9 66 01 00 00       	jmp    239567 <__trunctfsf2+0x347>
    } else if (aAbs >= overflow) {
  239401:	0f b7 45 de          	movzx  eax,WORD PTR [rbp-0x22]
  239405:	89 c1                	mov    ecx,eax
  239407:	48 81 e9 7f 40 00 00 	sub    rcx,0x407f
  23940e:	48 89 8d e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rcx
  239415:	72 0e                	jb     239425 <__trunctfsf2+0x205>
  239417:	eb 00                	jmp    239419 <__trunctfsf2+0x1f9>
        absResult = @intCast(dst_rep_t, dstInfExp) << dstSigBits;
  239419:	c7 45 bc 00 00 80 7f 	mov    DWORD PTR [rbp-0x44],0x7f800000
    } else if (aAbs >= overflow) {
  239420:	e9 ec 00 00 00       	jmp    239511 <__trunctfsf2+0x2f1>
        const aExp = @intCast(u32, aAbs >> srcSigBits);
  239425:	0f b7 45 de          	movzx  eax,WORD PTR [rbp-0x22]
  239429:	c5 f9 76 c0          	vpcmpeqd xmm0,xmm0,xmm0
  23942d:	c5 f9 d7 c8          	vpmovmskb ecx,xmm0
  239431:	81 e9 ff ff 00 00    	sub    ecx,0xffff
  239437:	89 85 e4 fe ff ff    	mov    DWORD PTR [rbp-0x11c],eax
  23943d:	89 8d e0 fe ff ff    	mov    DWORD PTR [rbp-0x120],ecx
  239443:	0f 84 2e 01 00 00    	je     239577 <__trunctfsf2+0x357>
  239449:	e9 4d 01 00 00       	jmp    23959b <__trunctfsf2+0x37b>
            absResult = 0;
  23944e:	c7 45 bc 00 00 00 00 	mov    DWORD PTR [rbp-0x44],0x0
        if (shift > srcSigBits) {
  239455:	e9 b5 00 00 00       	jmp    23950f <__trunctfsf2+0x2ef>
  23945a:	b8 80 00 00 00       	mov    eax,0x80
            const sticky: src_rep_t = significand << @intCast(SrcShift, srcBits - shift);
  23945f:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  239463:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  239467:	2b 45 a0             	sub    eax,DWORD PTR [rbp-0x60]
  23946a:	40 0f 92 c6          	setb   sil
  23946e:	48 89 95 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rdx
  239475:	48 89 8d d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rcx
  23947c:	89 85 cc fe ff ff    	mov    DWORD PTR [rbp-0x134],eax
  239482:	40 88 b5 cb fe ff ff 	mov    BYTE PTR [rbp-0x135],sil
  239489:	0f 82 98 01 00 00    	jb     239627 <__trunctfsf2+0x407>
  23948f:	e9 a3 01 00 00       	jmp    239637 <__trunctfsf2+0x417>
                absResult += 1;
  239494:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  239497:	83 c0 01             	add    eax,0x1
  23949a:	0f 92 c1             	setb   cl
  23949d:	89 85 c4 fe ff ff    	mov    DWORD PTR [rbp-0x13c],eax
  2394a3:	88 8d c3 fe ff ff    	mov    BYTE PTR [rbp-0x13d],cl
  2394a9:	0f 82 37 03 00 00    	jb     2397e6 <__trunctfsf2+0x5c6>
  2394af:	e9 42 03 00 00       	jmp    2397f6 <__trunctfsf2+0x5d6>
            } else if (roundBits == halfway) {
  2394b4:	c5 fa 6f 85 60 ff ff 	vmovdqu xmm0,XMMWORD PTR [rbp-0xa0]
  2394bb:	ff 
  2394bc:	b8 00 00 00 01       	mov    eax,0x1000000
  2394c1:	89 c1                	mov    ecx,eax
  2394c3:	c4 e1 f9 6e c9       	vmovq  xmm1,rcx
  2394c8:	c5 f1 73 f9 08       	vpslldq xmm1,xmm1,0x8
  2394cd:	c5 f9 74 c1          	vpcmpeqb xmm0,xmm0,xmm1
  2394d1:	c5 f9 d7 c0          	vpmovmskb eax,xmm0
  2394d5:	2d ff ff 00 00       	sub    eax,0xffff
  2394da:	89 85 bc fe ff ff    	mov    DWORD PTR [rbp-0x144],eax
  2394e0:	75 27                	jne    239509 <__trunctfsf2+0x2e9>
  2394e2:	eb 00                	jmp    2394e4 <__trunctfsf2+0x2c4>
                absResult += absResult & 1;
  2394e4:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  2394e7:	8b 4d bc             	mov    ecx,DWORD PTR [rbp-0x44]
  2394ea:	83 e1 01             	and    ecx,0x1
  2394ed:	01 c8                	add    eax,ecx
  2394ef:	0f 92 c2             	setb   dl
  2394f2:	89 85 b8 fe ff ff    	mov    DWORD PTR [rbp-0x148],eax
  2394f8:	88 95 b7 fe ff ff    	mov    BYTE PTR [rbp-0x149],dl
  2394fe:	0f 82 00 03 00 00    	jb     239804 <__trunctfsf2+0x5e4>
  239504:	e9 0b 03 00 00       	jmp    239814 <__trunctfsf2+0x5f4>
            } else if (roundBits == halfway) {
  239509:	eb 00                	jmp    23950b <__trunctfsf2+0x2eb>
            if (roundBits > halfway) {
  23950b:	eb 00                	jmp    23950d <__trunctfsf2+0x2ed>
        if (shift > srcSigBits) {
  23950d:	eb 00                	jmp    23950f <__trunctfsf2+0x2ef>
    } else if (aAbs >= overflow) {
  23950f:	eb 00                	jmp    239511 <__trunctfsf2+0x2f1>
    } else if (aAbs > srcInfinity) {
  239511:	eb 00                	jmp    239513 <__trunctfsf2+0x2f3>
    if (aAbs -% underflow < aAbs -% overflow) {
  239513:	e9 0a 03 00 00       	jmp    239822 <__trunctfsf2+0x602>
  239518:	48 8d 3d 79 a9 00 00 	lea    rdi,[rip+0xa979]        # 243e98 <__unnamed_2>
  23951f:	31 c0                	xor    eax,eax
  239521:	89 c6                	mov    esi,eax
            absResult += 1;
  239523:	e8 c8 d2 ff ff       	call   2367f0 <panic>
  239528:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
  23952e:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
        if (roundBits > halfway) {
  239531:	e9 4e fe ff ff       	jmp    239384 <__trunctfsf2+0x164>
  239536:	48 8d 3d 5b a9 00 00 	lea    rdi,[rip+0xa95b]        # 243e98 <__unnamed_2>
  23953d:	31 c0                	xor    eax,eax
  23953f:	89 c6                	mov    esi,eax
            absResult += absResult & 1;
  239541:	e8 aa d2 ff ff       	call   2367f0 <panic>
  239546:	8b 85 18 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe8]
  23954c:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
        } else if (roundBits == halfway) {
  23954f:	e9 2e fe ff ff       	jmp    239382 <__trunctfsf2+0x162>
        absResult |= @intCast(dst_rep_t, ((aAbs & srcNaNCode) >> (srcSigBits - dstSigBits)) & dstNaNCode);
  239554:	8b 85 fc fe ff ff    	mov    eax,DWORD PTR [rbp-0x104]
  23955a:	8b 8d f8 fe ff ff    	mov    ecx,DWORD PTR [rbp-0x108]
  239560:	09 c8                	or     eax,ecx
  239562:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
    } else if (aAbs > srcInfinity) {
  239565:	eb ac                	jmp    239513 <__trunctfsf2+0x2f3>
  239567:	48 8d 3d 42 a9 00 00 	lea    rdi,[rip+0xa942]        # 243eb0 <__unnamed_3>
  23956e:	31 c0                	xor    eax,eax
  239570:	89 c6                	mov    esi,eax
        absResult |= @intCast(dst_rep_t, ((aAbs & srcNaNCode) >> (srcSigBits - dstSigBits)) & dstNaNCode);
  239572:	e8 79 d2 ff ff       	call   2367f0 <panic>
  239577:	b8 80 3f 00 00       	mov    eax,0x3f80
        const aExp = @intCast(u32, aAbs >> srcSigBits);
  23957c:	8b 8d e4 fe ff ff    	mov    ecx,DWORD PTR [rbp-0x11c]
  239582:	89 4d a4             	mov    DWORD PTR [rbp-0x5c],ecx
        const shift = @intCast(u32, srcExpBias - dstExpBias - aExp + 1);
  239585:	2b 45 a4             	sub    eax,DWORD PTR [rbp-0x5c]
  239588:	0f 92 c2             	setb   dl
  23958b:	89 85 b0 fe ff ff    	mov    DWORD PTR [rbp-0x150],eax
  239591:	88 95 af fe ff ff    	mov    BYTE PTR [rbp-0x151],dl
  239597:	72 12                	jb     2395ab <__trunctfsf2+0x38b>
  239599:	eb 20                	jmp    2395bb <__trunctfsf2+0x39b>
  23959b:	48 8d 3d 0e a9 00 00 	lea    rdi,[rip+0xa90e]        # 243eb0 <__unnamed_3>
  2395a2:	31 c0                	xor    eax,eax
  2395a4:	89 c6                	mov    esi,eax
        const aExp = @intCast(u32, aAbs >> srcSigBits);
  2395a6:	e8 45 d2 ff ff       	call   2367f0 <panic>
  2395ab:	48 8d 3d e6 a8 00 00 	lea    rdi,[rip+0xa8e6]        # 243e98 <__unnamed_2>
  2395b2:	31 c0                	xor    eax,eax
  2395b4:	89 c6                	mov    esi,eax
        const shift = @intCast(u32, srcExpBias - dstExpBias - aExp + 1);
  2395b6:	e8 35 d2 ff ff       	call   2367f0 <panic>
  2395bb:	8b 85 b0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x150]
  2395c1:	83 c0 01             	add    eax,0x1
  2395c4:	0f 92 c1             	setb   cl
  2395c7:	89 85 a8 fe ff ff    	mov    DWORD PTR [rbp-0x158],eax
  2395cd:	88 8d a7 fe ff ff    	mov    BYTE PTR [rbp-0x159],cl
  2395d3:	72 02                	jb     2395d7 <__trunctfsf2+0x3b7>
  2395d5:	eb 10                	jmp    2395e7 <__trunctfsf2+0x3c7>
  2395d7:	48 8d 3d ba a8 00 00 	lea    rdi,[rip+0xa8ba]        # 243e98 <__unnamed_2>
  2395de:	31 c0                	xor    eax,eax
  2395e0:	89 c6                	mov    esi,eax
  2395e2:	e8 09 d2 ff ff       	call   2367f0 <panic>
  2395e7:	8b 85 a8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x158]
  2395ed:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
        const significand: src_rep_t = (aRep & srcSignificandMask) | srcMinNormal;
  2395f0:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  2395f4:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  2395f8:	40 b6 30             	mov    sil,0x30
  2395fb:	40 88 f7             	mov    dil,sil
  2395fe:	c4 e2 c0 f5 d2       	bzhi   rdx,rdx,rdi
  239603:	48 bf 00 00 00 00 00 	movabs rdi,0x1000000000000
  23960a:	00 01 00 
  23960d:	48 09 fa             	or     rdx,rdi
  239610:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
  239614:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
        if (shift > srcSigBits) {
  239618:	83 7d a0 70          	cmp    DWORD PTR [rbp-0x60],0x70
  23961c:	0f 87 2c fe ff ff    	ja     23944e <__trunctfsf2+0x22e>
  239622:	e9 33 fe ff ff       	jmp    23945a <__trunctfsf2+0x23a>
  239627:	48 8d 3d 6a a8 00 00 	lea    rdi,[rip+0xa86a]        # 243e98 <__unnamed_2>
  23962e:	31 c0                	xor    eax,eax
  239630:	89 c6                	mov    esi,eax
            const sticky: src_rep_t = significand << @intCast(SrcShift, srcBits - shift);
  239632:	e8 b9 d1 ff ff       	call   2367f0 <panic>
  239637:	8b 85 cc fe ff ff    	mov    eax,DWORD PTR [rbp-0x134]
  23963d:	88 c1                	mov    cl,al
  23963f:	83 e0 7f             	and    eax,0x7f
  239642:	8b 95 cc fe ff ff    	mov    edx,DWORD PTR [rbp-0x134]
  239648:	39 c2                	cmp    edx,eax
  23964a:	88 8d a6 fe ff ff    	mov    BYTE PTR [rbp-0x15a],cl
  239650:	75 72                	jne    2396c4 <__trunctfsf2+0x4a4>
  239652:	8a 8d a6 fe ff ff    	mov    cl,BYTE PTR [rbp-0x15a]
  239658:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  23965f:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
  239666:	48 0f a5 d0          	shld   rax,rdx,cl
  23966a:	8a 8d a6 fe ff ff    	mov    cl,BYTE PTR [rbp-0x15a]
  239670:	40 88 ce             	mov    sil,cl
  239673:	c4 e2 c9 f7 f2       	shlx   rsi,rdx,rsi
  239678:	31 ff                	xor    edi,edi
  23967a:	f6 c1 40             	test   cl,0x40
  23967d:	48 0f 45 c6          	cmovne rax,rsi
  239681:	41 89 f8             	mov    r8d,edi
  239684:	49 0f 45 f0          	cmovne rsi,r8
  239688:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  23968c:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
            const denormalizedSignificand: src_rep_t = significand >> @intCast(SrcShift, shift) | sticky;
  239690:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  239694:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  239698:	8b 7d a0             	mov    edi,DWORD PTR [rbp-0x60]
  23969b:	41 88 f9             	mov    r9b,dil
  23969e:	41 89 fa             	mov    r10d,edi
  2396a1:	41 83 e2 7f          	and    r10d,0x7f
  2396a5:	44 39 d7             	cmp    edi,r10d
  2396a8:	48 89 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rax
  2396af:	48 89 b5 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rsi
  2396b6:	44 88 8d 8f fe ff ff 	mov    BYTE PTR [rbp-0x171],r9b
  2396bd:	74 15                	je     2396d4 <__trunctfsf2+0x4b4>
  2396bf:	e9 9f 00 00 00       	jmp    239763 <__trunctfsf2+0x543>
  2396c4:	48 8d 3d e5 a7 00 00 	lea    rdi,[rip+0xa7e5]        # 243eb0 <__unnamed_3>
  2396cb:	31 c0                	xor    eax,eax
  2396cd:	89 c6                	mov    esi,eax
            const sticky: src_rep_t = significand << @intCast(SrcShift, srcBits - shift);
  2396cf:	e8 1c d1 ff ff       	call   2367f0 <panic>
            const denormalizedSignificand: src_rep_t = significand >> @intCast(SrcShift, shift) | sticky;
  2396d4:	8a 8d 8f fe ff ff    	mov    cl,BYTE PTR [rbp-0x171]
  2396da:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
  2396e1:	48 8b 95 90 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x170]
  2396e8:	48 0f ad d0          	shrd   rax,rdx,cl
  2396ec:	8a 8d 8f fe ff ff    	mov    cl,BYTE PTR [rbp-0x171]
  2396f2:	40 88 ce             	mov    sil,cl
  2396f5:	c4 e2 cb f7 f2       	shrx   rsi,rdx,rsi
  2396fa:	31 ff                	xor    edi,edi
  2396fc:	f6 c1 40             	test   cl,0x40
  2396ff:	48 0f 45 c6          	cmovne rax,rsi
  239703:	41 89 f8             	mov    r8d,edi
  239706:	49 0f 45 f0          	cmovne rsi,r8
  23970a:	4c 8b 45 80          	mov    r8,QWORD PTR [rbp-0x80]
  23970e:	4c 8b 4d 88          	mov    r9,QWORD PTR [rbp-0x78]
  239712:	4c 09 c0             	or     rax,r8
  239715:	4c 09 ce             	or     rsi,r9
  239718:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
  23971f:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
            absResult = @intCast(dst_rep_t, denormalizedSignificand >> (srcSigBits - dstSigBits));
  239726:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  23972d:	48 c1 e8 19          	shr    rax,0x19
  239731:	c4 e1 f9 6e c0       	vmovq  xmm0,rax
  239736:	89 c7                	mov    edi,eax
  239738:	41 89 fa             	mov    r10d,edi
  23973b:	44 89 d0             	mov    eax,r10d
  23973e:	c4 e1 f9 6e c8       	vmovq  xmm1,rax
  239743:	c5 f9 74 c1          	vpcmpeqb xmm0,xmm0,xmm1
  239747:	c5 79 d7 d0          	vpmovmskb r10d,xmm0
  23974b:	41 81 ea ff ff 00 00 	sub    r10d,0xffff
  239752:	89 bd 88 fe ff ff    	mov    DWORD PTR [rbp-0x178],edi
  239758:	44 89 95 84 fe ff ff 	mov    DWORD PTR [rbp-0x17c],r10d
  23975f:	74 12                	je     239773 <__trunctfsf2+0x553>
  239761:	eb 73                	jmp    2397d6 <__trunctfsf2+0x5b6>
  239763:	48 8d 3d 46 a7 00 00 	lea    rdi,[rip+0xa746]        # 243eb0 <__unnamed_3>
  23976a:	31 c0                	xor    eax,eax
  23976c:	89 c6                	mov    esi,eax
            const denormalizedSignificand: src_rep_t = significand >> @intCast(SrcShift, shift) | sticky;
  23976e:	e8 7d d0 ff ff       	call   2367f0 <panic>
            absResult = @intCast(dst_rep_t, denormalizedSignificand >> (srcSigBits - dstSigBits));
  239773:	8b 85 88 fe ff ff    	mov    eax,DWORD PTR [rbp-0x178]
  239779:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
            const roundBits: src_rep_t = denormalizedSignificand & roundMask;
  23977c:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
  239783:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
  23978a:	89 d6                	mov    esi,edx
  23978c:	81 e6 ff ff ff 01    	and    esi,0x1ffffff
  239792:	89 f2                	mov    edx,esi
  239794:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
  23979b:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
            if (roundBits > halfway) {
  2397a2:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  2397a9:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  2397b0:	48 f7 d9             	neg    rcx
  2397b3:	be 00 00 00 01       	mov    esi,0x1000000
  2397b8:	89 f7                	mov    edi,esi
  2397ba:	48 19 d7             	sbb    rdi,rdx
  2397bd:	48 89 bd 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rdi
  2397c4:	48 89 8d 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rcx
  2397cb:	0f 82 c3 fc ff ff    	jb     239494 <__trunctfsf2+0x274>
  2397d1:	e9 de fc ff ff       	jmp    2394b4 <__trunctfsf2+0x294>
  2397d6:	48 8d 3d d3 a6 00 00 	lea    rdi,[rip+0xa6d3]        # 243eb0 <__unnamed_3>
  2397dd:	31 c0                	xor    eax,eax
  2397df:	89 c6                	mov    esi,eax
            absResult = @intCast(dst_rep_t, denormalizedSignificand >> (srcSigBits - dstSigBits));
  2397e1:	e8 0a d0 ff ff       	call   2367f0 <panic>
  2397e6:	48 8d 3d ab a6 00 00 	lea    rdi,[rip+0xa6ab]        # 243e98 <__unnamed_2>
  2397ed:	31 c0                	xor    eax,eax
  2397ef:	89 c6                	mov    esi,eax
                absResult += 1;
  2397f1:	e8 fa cf ff ff       	call   2367f0 <panic>
  2397f6:	8b 85 c4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x13c]
  2397fc:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
            if (roundBits > halfway) {
  2397ff:	e9 09 fd ff ff       	jmp    23950d <__trunctfsf2+0x2ed>
  239804:	48 8d 3d 8d a6 00 00 	lea    rdi,[rip+0xa68d]        # 243e98 <__unnamed_2>
  23980b:	31 c0                	xor    eax,eax
  23980d:	89 c6                	mov    esi,eax
                absResult += absResult & 1;
  23980f:	e8 dc cf ff ff       	call   2367f0 <panic>
  239814:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
  23981a:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
            } else if (roundBits == halfway) {
  23981d:	e9 e9 fc ff ff       	jmp    23950b <__trunctfsf2+0x2eb>
    const result: dst_rep_t align(@alignOf(dst_t)) = absResult | @truncate(dst_rep_t, sign >> @intCast(SrcShift, srcBits - dstBits));
  239822:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  239825:	8b 4d cc             	mov    ecx,DWORD PTR [rbp-0x34]
  239828:	09 c8                	or     eax,ecx
  23982a:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
    return @bitCast(dst_t, result);
  239830:	c5 f9 6e 85 5c ff ff 	vmovd  xmm0,DWORD PTR [rbp-0xa4]
  239837:	ff 
    return truncXfYf2(f32, f128, a);
  239838:	48 81 c4 90 01 00 00 	add    rsp,0x190
  23983f:	5d                   	pop    rbp
  239840:	c3                   	ret    
  239841:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  239848:	0f 1f 84 00 00 00 00 
  23984f:	00 

0000000000239850 <__fixunssfsi>:
const fixuint = @import("fixuint.zig").fixuint;
const builtin = @import("builtin");

pub extern fn __fixunssfsi(a: f32) u32 {
  239850:	55                   	push   rbp
  239851:	48 89 e5             	mov    rbp,rsp
  239854:	48 83 ec 10          	sub    rsp,0x10
  239858:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
    @setRuntimeSafety(builtin.is_test);
    return fixuint(f32, u32, a);
  23985d:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  239862:	e8 09 00 00 00       	call   239870 <fixuint>
  239867:	48 83 c4 10          	add    rsp,0x10
  23986b:	5d                   	pop    rbp
  23986c:	c3                   	ret    
  23986d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000239870 <fixuint>:
const is_test = @import("builtin").is_test;
const Log2Int = @import("std").math.Log2Int;

pub fn fixuint(comptime fp_t: type, comptime fixuint_t: type, a: fp_t) fixuint_t {
  239870:	55                   	push   rbp
  239871:	48 89 e5             	mov    rbp,rsp
  239874:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
        f128 => 112,
        else => unreachable,
    };
    const typeWidth = rep_t.bit_count;
    const exponentBits = (typeWidth - significandBits - 1);
    const signBit = (rep_t(1) << (significandBits + exponentBits));
  239879:	c7 45 f8 00 00 00 80 	mov    DWORD PTR [rbp-0x8],0x80000000
    const maxExponent = ((1 << exponentBits) - 1);
    const exponentBias = (maxExponent >> 1);

    const implicitBit = (rep_t(1) << significandBits);
  239880:	c7 45 f4 00 00 80 00 	mov    DWORD PTR [rbp-0xc],0x800000
    const significandMask = (implicitBit - 1);
  239887:	c7 45 f0 ff ff 7f 00 	mov    DWORD PTR [rbp-0x10],0x7fffff

    // Break a into sign, exponent, significand
    const aRep: rep_t = @bitCast(rep_t, a);
  23988e:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  239893:	c5 f9 7e c0          	vmovd  eax,xmm0
  239897:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    const absMask = signBit - 1;
  23989a:	c7 45 e8 ff ff ff 7f 	mov    DWORD PTR [rbp-0x18],0x7fffffff
    const aAbs: rep_t = aRep & absMask;
  2398a1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  2398a4:	25 ff ff ff 7f       	and    eax,0x7fffffff
  2398a9:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax

    const sign = if ((aRep & signBit) != 0) i32(-1) else i32(1);
  2398ac:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  2398af:	25 00 00 00 80       	and    eax,0x80000000
  2398b4:	83 f8 00             	cmp    eax,0x0
  2398b7:	74 0a                	je     2398c3 <fixuint+0x53>
  2398b9:	b8 ff ff ff ff       	mov    eax,0xffffffff
  2398be:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
  2398c1:	eb 0a                	jmp    2398cd <fixuint+0x5d>
  2398c3:	b8 01 00 00 00       	mov    eax,0x1
  2398c8:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
  2398cb:	eb 00                	jmp    2398cd <fixuint+0x5d>
  2398cd:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
  2398d0:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    const exponent = @intCast(i32, aAbs >> significandBits) - exponentBias;
  2398d3:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  2398d6:	c1 e8 17             	shr    eax,0x17
  2398d9:	83 e8 7f             	sub    eax,0x7f
  2398dc:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
    const significand: rep_t = (aAbs & significandMask) | implicitBit;
  2398df:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  2398e2:	25 ff ff 7f 00       	and    eax,0x7fffff
  2398e7:	0d 00 00 80 00       	or     eax,0x800000
  2398ec:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax

    // If either the value or the exponent is negative, the result is zero.
    if (sign == -1 or exponent < 0) return 0;
  2398ef:	83 7d e0 ff          	cmp    DWORD PTR [rbp-0x20],0xffffffff
  2398f3:	0f 94 c1             	sete   cl
  2398f6:	f6 c1 01             	test   cl,0x1
  2398f9:	88 4d d3             	mov    BYTE PTR [rbp-0x2d],cl
  2398fc:	75 0a                	jne    239908 <fixuint+0x98>
  2398fe:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
  239902:	0f 9c c0             	setl   al
  239905:	88 45 d3             	mov    BYTE PTR [rbp-0x2d],al
  239908:	8a 45 d3             	mov    al,BYTE PTR [rbp-0x2d]
  23990b:	a8 01                	test   al,0x1
  23990d:	75 02                	jne    239911 <fixuint+0xa1>
  23990f:	eb 04                	jmp    239915 <fixuint+0xa5>
  239911:	31 c0                	xor    eax,eax
  239913:	5d                   	pop    rbp
  239914:	c3                   	ret    
  239915:	eb 00                	jmp    239917 <fixuint+0xa7>

    // If the value is too large for the integer type, saturate.
    if (@intCast(c_uint, exponent) >= fixuint_t.bit_count) return ~fixuint_t(0);
  239917:	83 7d dc 20          	cmp    DWORD PTR [rbp-0x24],0x20
  23991b:	72 07                	jb     239924 <fixuint+0xb4>
  23991d:	b8 ff ff ff ff       	mov    eax,0xffffffff
  239922:	5d                   	pop    rbp
  239923:	c3                   	ret    

    // If 0 <= exponent < significandBits, right shift to get the result.
    // Otherwise, shift left.
    if (exponent < significandBits) {
  239924:	83 7d dc 17          	cmp    DWORD PTR [rbp-0x24],0x17
  239928:	7d 16                	jge    239940 <fixuint+0xd0>
        return @intCast(fixuint_t, significand >> @intCast(Log2Int(rep_t), significandBits - exponent));
  23992a:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  23992d:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  239930:	ba 17 00 00 00       	mov    edx,0x17
  239935:	29 ca                	sub    edx,ecx
  239937:	83 e2 1f             	and    edx,0x1f
  23993a:	89 d1                	mov    ecx,edx
  23993c:	d3 e8                	shr    eax,cl
  23993e:	5d                   	pop    rbp
  23993f:	c3                   	ret    
    } else {
        return @intCast(fixuint_t, significand) << @intCast(Log2Int(fixuint_t), exponent - significandBits);
  239940:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  239943:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  239946:	83 c1 e9             	add    ecx,0xffffffe9
  239949:	83 e1 1f             	and    ecx,0x1f
  23994c:	d3 e0                	shl    eax,cl
  23994e:	5d                   	pop    rbp
  23994f:	c3                   	ret    

0000000000239950 <__fixunssfdi>:
const fixuint = @import("fixuint.zig").fixuint;
const builtin = @import("builtin");

pub extern fn __fixunssfdi(a: f32) u64 {
  239950:	55                   	push   rbp
  239951:	48 89 e5             	mov    rbp,rsp
  239954:	48 83 ec 10          	sub    rsp,0x10
  239958:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
    @setRuntimeSafety(builtin.is_test);
    return fixuint(f32, u64, a);
  23995d:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  239962:	e8 09 00 00 00       	call   239970 <fixuint.6>
  239967:	48 83 c4 10          	add    rsp,0x10
  23996b:	5d                   	pop    rbp
  23996c:	c3                   	ret    
  23996d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000239970 <fixuint.6>:
pub fn fixuint(comptime fp_t: type, comptime fixuint_t: type, a: fp_t) fixuint_t {
  239970:	55                   	push   rbp
  239971:	48 89 e5             	mov    rbp,rsp
  239974:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
    const signBit = (rep_t(1) << (significandBits + exponentBits));
  239979:	c7 45 f8 00 00 00 80 	mov    DWORD PTR [rbp-0x8],0x80000000
    const implicitBit = (rep_t(1) << significandBits);
  239980:	c7 45 f4 00 00 80 00 	mov    DWORD PTR [rbp-0xc],0x800000
    const significandMask = (implicitBit - 1);
  239987:	c7 45 f0 ff ff 7f 00 	mov    DWORD PTR [rbp-0x10],0x7fffff
    const aRep: rep_t = @bitCast(rep_t, a);
  23998e:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  239993:	c5 f9 7e c0          	vmovd  eax,xmm0
  239997:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    const absMask = signBit - 1;
  23999a:	c7 45 e8 ff ff ff 7f 	mov    DWORD PTR [rbp-0x18],0x7fffffff
    const aAbs: rep_t = aRep & absMask;
  2399a1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  2399a4:	25 ff ff ff 7f       	and    eax,0x7fffffff
  2399a9:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
    const sign = if ((aRep & signBit) != 0) i32(-1) else i32(1);
  2399ac:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  2399af:	25 00 00 00 80       	and    eax,0x80000000
  2399b4:	83 f8 00             	cmp    eax,0x0
  2399b7:	74 0a                	je     2399c3 <fixuint.6+0x53>
  2399b9:	b8 ff ff ff ff       	mov    eax,0xffffffff
  2399be:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
  2399c1:	eb 0a                	jmp    2399cd <fixuint.6+0x5d>
  2399c3:	b8 01 00 00 00       	mov    eax,0x1
  2399c8:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
  2399cb:	eb 00                	jmp    2399cd <fixuint.6+0x5d>
  2399cd:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
  2399d0:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    const exponent = @intCast(i32, aAbs >> significandBits) - exponentBias;
  2399d3:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  2399d6:	c1 e8 17             	shr    eax,0x17
  2399d9:	83 e8 7f             	sub    eax,0x7f
  2399dc:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
    const significand: rep_t = (aAbs & significandMask) | implicitBit;
  2399df:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  2399e2:	25 ff ff 7f 00       	and    eax,0x7fffff
  2399e7:	0d 00 00 80 00       	or     eax,0x800000
  2399ec:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
    if (sign == -1 or exponent < 0) return 0;
  2399ef:	83 7d e0 ff          	cmp    DWORD PTR [rbp-0x20],0xffffffff
  2399f3:	0f 94 c1             	sete   cl
  2399f6:	f6 c1 01             	test   cl,0x1
  2399f9:	88 4d d3             	mov    BYTE PTR [rbp-0x2d],cl
  2399fc:	75 0a                	jne    239a08 <fixuint.6+0x98>
  2399fe:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
  239a02:	0f 9c c0             	setl   al
  239a05:	88 45 d3             	mov    BYTE PTR [rbp-0x2d],al
  239a08:	8a 45 d3             	mov    al,BYTE PTR [rbp-0x2d]
  239a0b:	a8 01                	test   al,0x1
  239a0d:	75 02                	jne    239a11 <fixuint.6+0xa1>
  239a0f:	eb 04                	jmp    239a15 <fixuint.6+0xa5>
  239a11:	31 c0                	xor    eax,eax
  239a13:	5d                   	pop    rbp
  239a14:	c3                   	ret    
  239a15:	eb 00                	jmp    239a17 <fixuint.6+0xa7>
    if (@intCast(c_uint, exponent) >= fixuint_t.bit_count) return ~fixuint_t(0);
  239a17:	83 7d dc 40          	cmp    DWORD PTR [rbp-0x24],0x40
  239a1b:	72 09                	jb     239a26 <fixuint.6+0xb6>
  239a1d:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
  239a24:	5d                   	pop    rbp
  239a25:	c3                   	ret    
    if (exponent < significandBits) {
  239a26:	83 7d dc 17          	cmp    DWORD PTR [rbp-0x24],0x17
  239a2a:	7d 18                	jge    239a44 <fixuint.6+0xd4>
        return @intCast(fixuint_t, significand >> @intCast(Log2Int(rep_t), significandBits - exponent));
  239a2c:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  239a2f:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  239a32:	ba 17 00 00 00       	mov    edx,0x17
  239a37:	29 ca                	sub    edx,ecx
  239a39:	83 e2 1f             	and    edx,0x1f
  239a3c:	89 d1                	mov    ecx,edx
  239a3e:	d3 e8                	shr    eax,cl
  239a40:	89 c0                	mov    eax,eax
  239a42:	5d                   	pop    rbp
  239a43:	c3                   	ret    
        return @intCast(fixuint_t, significand) << @intCast(Log2Int(fixuint_t), exponent - significandBits);
  239a44:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  239a47:	89 c1                	mov    ecx,eax
  239a49:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  239a4c:	83 c0 e9             	add    eax,0xffffffe9
  239a4f:	83 e0 3f             	and    eax,0x3f
  239a52:	89 c2                	mov    edx,eax
  239a54:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  239a58:	48 89 d1             	mov    rcx,rdx
  239a5b:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  239a5f:	48 d3 e2             	shl    rdx,cl
  239a62:	48 89 d0             	mov    rax,rdx
  239a65:	5d                   	pop    rbp
  239a66:	c3                   	ret    
  239a67:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  239a6e:	00 00 

0000000000239a70 <__fixunssfti>:
const fixuint = @import("fixuint.zig").fixuint;
const builtin = @import("builtin");

pub extern fn __fixunssfti(a: f32) u128 {
  239a70:	55                   	push   rbp
  239a71:	48 89 e5             	mov    rbp,rsp
  239a74:	48 83 ec 10          	sub    rsp,0x10
  239a78:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
    @setRuntimeSafety(builtin.is_test);
    return fixuint(f32, u128, a);
  239a7d:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  239a82:	e8 09 00 00 00       	call   239a90 <fixuint.7>
  239a87:	48 83 c4 10          	add    rsp,0x10
  239a8b:	5d                   	pop    rbp
  239a8c:	c3                   	ret    
  239a8d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000239a90 <fixuint.7>:
pub fn fixuint(comptime fp_t: type, comptime fixuint_t: type, a: fp_t) fixuint_t {
  239a90:	55                   	push   rbp
  239a91:	48 89 e5             	mov    rbp,rsp
  239a94:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
    const signBit = (rep_t(1) << (significandBits + exponentBits));
  239a99:	c7 45 f8 00 00 00 80 	mov    DWORD PTR [rbp-0x8],0x80000000
    const implicitBit = (rep_t(1) << significandBits);
  239aa0:	c7 45 f4 00 00 80 00 	mov    DWORD PTR [rbp-0xc],0x800000
    const significandMask = (implicitBit - 1);
  239aa7:	c7 45 f0 ff ff 7f 00 	mov    DWORD PTR [rbp-0x10],0x7fffff
    const aRep: rep_t = @bitCast(rep_t, a);
  239aae:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  239ab3:	c5 f9 7e c0          	vmovd  eax,xmm0
  239ab7:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    const absMask = signBit - 1;
  239aba:	c7 45 e8 ff ff ff 7f 	mov    DWORD PTR [rbp-0x18],0x7fffffff
    const aAbs: rep_t = aRep & absMask;
  239ac1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  239ac4:	25 ff ff ff 7f       	and    eax,0x7fffffff
  239ac9:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
    const sign = if ((aRep & signBit) != 0) i32(-1) else i32(1);
  239acc:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  239acf:	25 00 00 00 80       	and    eax,0x80000000
  239ad4:	83 f8 00             	cmp    eax,0x0
  239ad7:	74 0a                	je     239ae3 <fixuint.7+0x53>
  239ad9:	b8 ff ff ff ff       	mov    eax,0xffffffff
  239ade:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
  239ae1:	eb 0a                	jmp    239aed <fixuint.7+0x5d>
  239ae3:	b8 01 00 00 00       	mov    eax,0x1
  239ae8:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
  239aeb:	eb 00                	jmp    239aed <fixuint.7+0x5d>
  239aed:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
  239af0:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    const exponent = @intCast(i32, aAbs >> significandBits) - exponentBias;
  239af3:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  239af6:	c1 e8 17             	shr    eax,0x17
  239af9:	83 e8 7f             	sub    eax,0x7f
  239afc:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
    const significand: rep_t = (aAbs & significandMask) | implicitBit;
  239aff:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  239b02:	25 ff ff 7f 00       	and    eax,0x7fffff
  239b07:	0d 00 00 80 00       	or     eax,0x800000
  239b0c:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
    if (sign == -1 or exponent < 0) return 0;
  239b0f:	83 7d e0 ff          	cmp    DWORD PTR [rbp-0x20],0xffffffff
  239b13:	0f 94 c1             	sete   cl
  239b16:	f6 c1 01             	test   cl,0x1
  239b19:	88 4d d3             	mov    BYTE PTR [rbp-0x2d],cl
  239b1c:	75 0a                	jne    239b28 <fixuint.7+0x98>
  239b1e:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
  239b22:	0f 9c c0             	setl   al
  239b25:	88 45 d3             	mov    BYTE PTR [rbp-0x2d],al
  239b28:	8a 45 d3             	mov    al,BYTE PTR [rbp-0x2d]
  239b2b:	a8 01                	test   al,0x1
  239b2d:	75 02                	jne    239b31 <fixuint.7+0xa1>
  239b2f:	eb 0c                	jmp    239b3d <fixuint.7+0xad>
  239b31:	31 c0                	xor    eax,eax
  239b33:	89 c1                	mov    ecx,eax
  239b35:	48 89 c8             	mov    rax,rcx
  239b38:	48 89 ca             	mov    rdx,rcx
  239b3b:	5d                   	pop    rbp
  239b3c:	c3                   	ret    
  239b3d:	eb 00                	jmp    239b3f <fixuint.7+0xaf>
    if (@intCast(c_uint, exponent) >= fixuint_t.bit_count) return ~fixuint_t(0);
  239b3f:	81 7d dc 80 00 00 00 	cmp    DWORD PTR [rbp-0x24],0x80
  239b46:	72 11                	jb     239b59 <fixuint.7+0xc9>
  239b48:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
  239b4f:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  239b53:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  239b57:	5d                   	pop    rbp
  239b58:	c3                   	ret    
    if (exponent < significandBits) {
  239b59:	83 7d dc 17          	cmp    DWORD PTR [rbp-0x24],0x17
  239b5d:	7d 1e                	jge    239b7d <fixuint.7+0xed>
        return @intCast(fixuint_t, significand >> @intCast(Log2Int(rep_t), significandBits - exponent));
  239b5f:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  239b62:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  239b65:	ba 17 00 00 00       	mov    edx,0x17
  239b6a:	29 ca                	sub    edx,ecx
  239b6c:	40 88 d6             	mov    sil,dl
  239b6f:	40 88 f1             	mov    cl,sil
  239b72:	c4 e2 73 f7 c0       	shrx   eax,eax,ecx
  239b77:	31 c9                	xor    ecx,ecx
  239b79:	89 ca                	mov    edx,ecx
  239b7b:	5d                   	pop    rbp
  239b7c:	c3                   	ret    
        return @intCast(fixuint_t, significand) << @intCast(Log2Int(fixuint_t), exponent - significandBits);
  239b7d:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  239b80:	89 c1                	mov    ecx,eax
  239b82:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  239b85:	83 c0 e9             	add    eax,0xffffffe9
  239b88:	88 c2                	mov    dl,al
  239b8a:	31 c0                	xor    eax,eax
  239b8c:	89 c6                	mov    esi,eax
  239b8e:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
  239b92:	88 d1                	mov    cl,dl
  239b94:	48 89 f7             	mov    rdi,rsi
  239b97:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
  239b9b:	4c 0f a5 c7          	shld   rdi,r8,cl
  239b9f:	41 88 d1             	mov    r9b,dl
  239ba2:	c4 42 b1 f7 c8       	shlx   r9,r8,r9
  239ba7:	f6 c2 40             	test   dl,0x40
  239baa:	49 0f 45 f9          	cmovne rdi,r9
  239bae:	4c 0f 45 ce          	cmovne r9,rsi
  239bb2:	4c 89 c8             	mov    rax,r9
  239bb5:	48 89 fa             	mov    rdx,rdi
  239bb8:	5d                   	pop    rbp
  239bb9:	c3                   	ret    
  239bba:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000239bc0 <__fixunsdfsi>:
const fixuint = @import("fixuint.zig").fixuint;
const builtin = @import("builtin");

pub extern fn __fixunsdfsi(a: f64) u32 {
  239bc0:	55                   	push   rbp
  239bc1:	48 89 e5             	mov    rbp,rsp
  239bc4:	48 83 ec 10          	sub    rsp,0x10
  239bc8:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    @setRuntimeSafety(builtin.is_test);
    return fixuint(f64, u32, a);
  239bcd:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  239bd2:	e8 09 00 00 00       	call   239be0 <fixuint.8>
  239bd7:	48 83 c4 10          	add    rsp,0x10
  239bdb:	5d                   	pop    rbp
  239bdc:	c3                   	ret    
  239bdd:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000239be0 <fixuint.8>:
pub fn fixuint(comptime fp_t: type, comptime fixuint_t: type, a: fp_t) fixuint_t {
  239be0:	55                   	push   rbp
  239be1:	48 89 e5             	mov    rbp,rsp
  239be4:	48 b8 00 00 00 00 00 	movabs rax,0x8000000000000000
  239beb:	00 00 80 
  239bee:	48 b9 ff ff ff ff ff 	movabs rcx,0x7fffffffffffffff
  239bf5:	ff ff 7f 
  239bf8:	48 ba ff ff ff ff ff 	movabs rdx,0xfffffffffffff
  239bff:	ff 0f 00 
  239c02:	48 be 00 00 00 00 00 	movabs rsi,0x10000000000000
  239c09:	00 10 00 
  239c0c:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    const signBit = (rep_t(1) << (significandBits + exponentBits));
  239c11:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    const implicitBit = (rep_t(1) << significandBits);
  239c15:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
    const significandMask = (implicitBit - 1);
  239c19:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
    const aRep: rep_t = @bitCast(rep_t, a);
  239c1d:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  239c22:	c4 e1 f9 7e c2       	vmovq  rdx,xmm0
  239c27:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
    const absMask = signBit - 1;
  239c2b:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    const aAbs: rep_t = aRep & absMask;
  239c2f:	48 23 4d d8          	and    rcx,QWORD PTR [rbp-0x28]
  239c33:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
    const sign = if ((aRep & signBit) != 0) i32(-1) else i32(1);
  239c37:	48 23 45 d8          	and    rax,QWORD PTR [rbp-0x28]
  239c3b:	48 83 f8 00          	cmp    rax,0x0
  239c3f:	74 0a                	je     239c4b <fixuint.8+0x6b>
  239c41:	b8 ff ff ff ff       	mov    eax,0xffffffff
  239c46:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
  239c49:	eb 0a                	jmp    239c55 <fixuint.8+0x75>
  239c4b:	b8 01 00 00 00       	mov    eax,0x1
  239c50:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
  239c53:	eb 00                	jmp    239c55 <fixuint.8+0x75>
  239c55:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
  239c58:	48 b9 00 00 00 00 00 	movabs rcx,0x10000000000000
  239c5f:	00 10 00 
  239c62:	48 ba ff ff ff ff ff 	movabs rdx,0xfffffffffffff
  239c69:	ff 0f 00 
  239c6c:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
    const exponent = @intCast(i32, aAbs >> significandBits) - exponentBias;
  239c6f:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  239c73:	48 c1 ee 34          	shr    rsi,0x34
  239c77:	89 f0                	mov    eax,esi
  239c79:	2d ff 03 00 00       	sub    eax,0x3ff
  239c7e:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
    const significand: rep_t = (aAbs & significandMask) | implicitBit;
  239c81:	48 23 55 c8          	and    rdx,QWORD PTR [rbp-0x38]
  239c85:	48 09 ca             	or     rdx,rcx
  239c88:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
    if (sign == -1 or exponent < 0) return 0;
  239c8c:	83 7d c4 ff          	cmp    DWORD PTR [rbp-0x3c],0xffffffff
  239c90:	40 0f 94 c7          	sete   dil
  239c94:	40 f6 c7 01          	test   dil,0x1
  239c98:	40 88 7d b3          	mov    BYTE PTR [rbp-0x4d],dil
  239c9c:	75 0a                	jne    239ca8 <fixuint.8+0xc8>
  239c9e:	83 7d c0 00          	cmp    DWORD PTR [rbp-0x40],0x0
  239ca2:	0f 9c c0             	setl   al
  239ca5:	88 45 b3             	mov    BYTE PTR [rbp-0x4d],al
  239ca8:	8a 45 b3             	mov    al,BYTE PTR [rbp-0x4d]
  239cab:	a8 01                	test   al,0x1
  239cad:	75 02                	jne    239cb1 <fixuint.8+0xd1>
  239caf:	eb 04                	jmp    239cb5 <fixuint.8+0xd5>
  239cb1:	31 c0                	xor    eax,eax
  239cb3:	5d                   	pop    rbp
  239cb4:	c3                   	ret    
  239cb5:	eb 00                	jmp    239cb7 <fixuint.8+0xd7>
    if (@intCast(c_uint, exponent) >= fixuint_t.bit_count) return ~fixuint_t(0);
  239cb7:	83 7d c0 20          	cmp    DWORD PTR [rbp-0x40],0x20
  239cbb:	72 07                	jb     239cc4 <fixuint.8+0xe4>
  239cbd:	b8 ff ff ff ff       	mov    eax,0xffffffff
  239cc2:	5d                   	pop    rbp
  239cc3:	c3                   	ret    
    if (exponent < significandBits) {
  239cc4:	83 7d c0 34          	cmp    DWORD PTR [rbp-0x40],0x34
  239cc8:	7d 1c                	jge    239ce6 <fixuint.8+0x106>
        return @intCast(fixuint_t, significand >> @intCast(Log2Int(rep_t), significandBits - exponent));
  239cca:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  239cce:	8b 4d c0             	mov    ecx,DWORD PTR [rbp-0x40]
  239cd1:	ba 34 00 00 00       	mov    edx,0x34
  239cd6:	29 ca                	sub    edx,ecx
  239cd8:	83 e2 3f             	and    edx,0x3f
  239cdb:	89 d1                	mov    ecx,edx
  239cdd:	48 d3 e8             	shr    rax,cl
  239ce0:	89 c2                	mov    edx,eax
  239ce2:	89 d0                	mov    eax,edx
  239ce4:	5d                   	pop    rbp
  239ce5:	c3                   	ret    
        return @intCast(fixuint_t, significand) << @intCast(Log2Int(fixuint_t), exponent - significandBits);
  239ce6:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
  239ce9:	8b 4d c0             	mov    ecx,DWORD PTR [rbp-0x40]
  239cec:	83 c1 cc             	add    ecx,0xffffffcc
  239cef:	83 e1 1f             	and    ecx,0x1f
  239cf2:	d3 e0                	shl    eax,cl
  239cf4:	5d                   	pop    rbp
  239cf5:	c3                   	ret    
  239cf6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  239cfd:	00 00 00 

0000000000239d00 <__fixunsdfdi>:
const fixuint = @import("fixuint.zig").fixuint;
const builtin = @import("builtin");

pub extern fn __fixunsdfdi(a: f64) u64 {
  239d00:	55                   	push   rbp
  239d01:	48 89 e5             	mov    rbp,rsp
  239d04:	48 83 ec 10          	sub    rsp,0x10
  239d08:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    @setRuntimeSafety(builtin.is_test);
    return fixuint(f64, u64, a);
  239d0d:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  239d12:	e8 09 00 00 00       	call   239d20 <fixuint.9>
  239d17:	48 83 c4 10          	add    rsp,0x10
  239d1b:	5d                   	pop    rbp
  239d1c:	c3                   	ret    
  239d1d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000239d20 <fixuint.9>:
pub fn fixuint(comptime fp_t: type, comptime fixuint_t: type, a: fp_t) fixuint_t {
  239d20:	55                   	push   rbp
  239d21:	48 89 e5             	mov    rbp,rsp
  239d24:	48 b8 00 00 00 00 00 	movabs rax,0x8000000000000000
  239d2b:	00 00 80 
  239d2e:	48 b9 ff ff ff ff ff 	movabs rcx,0x7fffffffffffffff
  239d35:	ff ff 7f 
  239d38:	48 ba ff ff ff ff ff 	movabs rdx,0xfffffffffffff
  239d3f:	ff 0f 00 
  239d42:	48 be 00 00 00 00 00 	movabs rsi,0x10000000000000
  239d49:	00 10 00 
  239d4c:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    const signBit = (rep_t(1) << (significandBits + exponentBits));
  239d51:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    const implicitBit = (rep_t(1) << significandBits);
  239d55:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
    const significandMask = (implicitBit - 1);
  239d59:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
    const aRep: rep_t = @bitCast(rep_t, a);
  239d5d:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  239d62:	c4 e1 f9 7e c2       	vmovq  rdx,xmm0
  239d67:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
    const absMask = signBit - 1;
  239d6b:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    const aAbs: rep_t = aRep & absMask;
  239d6f:	48 23 4d d8          	and    rcx,QWORD PTR [rbp-0x28]
  239d73:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
    const sign = if ((aRep & signBit) != 0) i32(-1) else i32(1);
  239d77:	48 23 45 d8          	and    rax,QWORD PTR [rbp-0x28]
  239d7b:	48 83 f8 00          	cmp    rax,0x0
  239d7f:	74 0a                	je     239d8b <fixuint.9+0x6b>
  239d81:	b8 ff ff ff ff       	mov    eax,0xffffffff
  239d86:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
  239d89:	eb 0a                	jmp    239d95 <fixuint.9+0x75>
  239d8b:	b8 01 00 00 00       	mov    eax,0x1
  239d90:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
  239d93:	eb 00                	jmp    239d95 <fixuint.9+0x75>
  239d95:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
  239d98:	48 b9 00 00 00 00 00 	movabs rcx,0x10000000000000
  239d9f:	00 10 00 
  239da2:	48 ba ff ff ff ff ff 	movabs rdx,0xfffffffffffff
  239da9:	ff 0f 00 
  239dac:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
    const exponent = @intCast(i32, aAbs >> significandBits) - exponentBias;
  239daf:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  239db3:	48 c1 ee 34          	shr    rsi,0x34
  239db7:	89 f0                	mov    eax,esi
  239db9:	2d ff 03 00 00       	sub    eax,0x3ff
  239dbe:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
    const significand: rep_t = (aAbs & significandMask) | implicitBit;
  239dc1:	48 23 55 c8          	and    rdx,QWORD PTR [rbp-0x38]
  239dc5:	48 09 ca             	or     rdx,rcx
  239dc8:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
    if (sign == -1 or exponent < 0) return 0;
  239dcc:	83 7d c4 ff          	cmp    DWORD PTR [rbp-0x3c],0xffffffff
  239dd0:	40 0f 94 c7          	sete   dil
  239dd4:	40 f6 c7 01          	test   dil,0x1
  239dd8:	40 88 7d b3          	mov    BYTE PTR [rbp-0x4d],dil
  239ddc:	75 0a                	jne    239de8 <fixuint.9+0xc8>
  239dde:	83 7d c0 00          	cmp    DWORD PTR [rbp-0x40],0x0
  239de2:	0f 9c c0             	setl   al
  239de5:	88 45 b3             	mov    BYTE PTR [rbp-0x4d],al
  239de8:	8a 45 b3             	mov    al,BYTE PTR [rbp-0x4d]
  239deb:	a8 01                	test   al,0x1
  239ded:	75 02                	jne    239df1 <fixuint.9+0xd1>
  239def:	eb 04                	jmp    239df5 <fixuint.9+0xd5>
  239df1:	31 c0                	xor    eax,eax
  239df3:	5d                   	pop    rbp
  239df4:	c3                   	ret    
  239df5:	eb 00                	jmp    239df7 <fixuint.9+0xd7>
    if (@intCast(c_uint, exponent) >= fixuint_t.bit_count) return ~fixuint_t(0);
  239df7:	83 7d c0 40          	cmp    DWORD PTR [rbp-0x40],0x40
  239dfb:	72 09                	jb     239e06 <fixuint.9+0xe6>
  239dfd:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
  239e04:	5d                   	pop    rbp
  239e05:	c3                   	ret    
    if (exponent < significandBits) {
  239e06:	83 7d c0 34          	cmp    DWORD PTR [rbp-0x40],0x34
  239e0a:	7d 18                	jge    239e24 <fixuint.9+0x104>
        return @intCast(fixuint_t, significand >> @intCast(Log2Int(rep_t), significandBits - exponent));
  239e0c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  239e10:	8b 4d c0             	mov    ecx,DWORD PTR [rbp-0x40]
  239e13:	ba 34 00 00 00       	mov    edx,0x34
  239e18:	29 ca                	sub    edx,ecx
  239e1a:	83 e2 3f             	and    edx,0x3f
  239e1d:	89 d1                	mov    ecx,edx
  239e1f:	48 d3 e8             	shr    rax,cl
  239e22:	5d                   	pop    rbp
  239e23:	c3                   	ret    
        return @intCast(fixuint_t, significand) << @intCast(Log2Int(fixuint_t), exponent - significandBits);
  239e24:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  239e28:	8b 4d c0             	mov    ecx,DWORD PTR [rbp-0x40]
  239e2b:	83 c1 cc             	add    ecx,0xffffffcc
  239e2e:	83 e1 3f             	and    ecx,0x3f
  239e31:	48 d3 e0             	shl    rax,cl
  239e34:	5d                   	pop    rbp
  239e35:	c3                   	ret    
  239e36:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  239e3d:	00 00 00 

0000000000239e40 <__fixunsdfti>:
const fixuint = @import("fixuint.zig").fixuint;
const builtin = @import("builtin");

pub extern fn __fixunsdfti(a: f64) u128 {
  239e40:	55                   	push   rbp
  239e41:	48 89 e5             	mov    rbp,rsp
  239e44:	48 83 ec 10          	sub    rsp,0x10
  239e48:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    @setRuntimeSafety(builtin.is_test);
    return fixuint(f64, u128, a);
  239e4d:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  239e52:	e8 09 00 00 00       	call   239e60 <fixuint.10>
  239e57:	48 83 c4 10          	add    rsp,0x10
  239e5b:	5d                   	pop    rbp
  239e5c:	c3                   	ret    
  239e5d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000239e60 <fixuint.10>:
pub fn fixuint(comptime fp_t: type, comptime fixuint_t: type, a: fp_t) fixuint_t {
  239e60:	55                   	push   rbp
  239e61:	48 89 e5             	mov    rbp,rsp
  239e64:	48 b8 00 00 00 00 00 	movabs rax,0x8000000000000000
  239e6b:	00 00 80 
  239e6e:	48 b9 ff ff ff ff ff 	movabs rcx,0x7fffffffffffffff
  239e75:	ff ff 7f 
  239e78:	48 ba ff ff ff ff ff 	movabs rdx,0xfffffffffffff
  239e7f:	ff 0f 00 
  239e82:	48 be 00 00 00 00 00 	movabs rsi,0x10000000000000
  239e89:	00 10 00 
  239e8c:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    const signBit = (rep_t(1) << (significandBits + exponentBits));
  239e91:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    const implicitBit = (rep_t(1) << significandBits);
  239e95:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
    const significandMask = (implicitBit - 1);
  239e99:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
    const aRep: rep_t = @bitCast(rep_t, a);
  239e9d:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  239ea2:	c4 e1 f9 7e c2       	vmovq  rdx,xmm0
  239ea7:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
    const absMask = signBit - 1;
  239eab:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    const aAbs: rep_t = aRep & absMask;
  239eaf:	48 23 4d d8          	and    rcx,QWORD PTR [rbp-0x28]
  239eb3:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
    const sign = if ((aRep & signBit) != 0) i32(-1) else i32(1);
  239eb7:	48 23 45 d8          	and    rax,QWORD PTR [rbp-0x28]
  239ebb:	48 83 f8 00          	cmp    rax,0x0
  239ebf:	74 0a                	je     239ecb <fixuint.10+0x6b>
  239ec1:	b8 ff ff ff ff       	mov    eax,0xffffffff
  239ec6:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
  239ec9:	eb 0a                	jmp    239ed5 <fixuint.10+0x75>
  239ecb:	b8 01 00 00 00       	mov    eax,0x1
  239ed0:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
  239ed3:	eb 00                	jmp    239ed5 <fixuint.10+0x75>
  239ed5:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
  239ed8:	48 b9 00 00 00 00 00 	movabs rcx,0x10000000000000
  239edf:	00 10 00 
  239ee2:	48 ba ff ff ff ff ff 	movabs rdx,0xfffffffffffff
  239ee9:	ff 0f 00 
  239eec:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
    const exponent = @intCast(i32, aAbs >> significandBits) - exponentBias;
  239eef:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  239ef3:	48 c1 ee 34          	shr    rsi,0x34
  239ef7:	89 f0                	mov    eax,esi
  239ef9:	2d ff 03 00 00       	sub    eax,0x3ff
  239efe:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
    const significand: rep_t = (aAbs & significandMask) | implicitBit;
  239f01:	48 23 55 c8          	and    rdx,QWORD PTR [rbp-0x38]
  239f05:	48 09 ca             	or     rdx,rcx
  239f08:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
    if (sign == -1 or exponent < 0) return 0;
  239f0c:	83 7d c4 ff          	cmp    DWORD PTR [rbp-0x3c],0xffffffff
  239f10:	40 0f 94 c7          	sete   dil
  239f14:	40 f6 c7 01          	test   dil,0x1
  239f18:	40 88 7d b3          	mov    BYTE PTR [rbp-0x4d],dil
  239f1c:	75 0a                	jne    239f28 <fixuint.10+0xc8>
  239f1e:	83 7d c0 00          	cmp    DWORD PTR [rbp-0x40],0x0
  239f22:	0f 9c c0             	setl   al
  239f25:	88 45 b3             	mov    BYTE PTR [rbp-0x4d],al
  239f28:	8a 45 b3             	mov    al,BYTE PTR [rbp-0x4d]
  239f2b:	a8 01                	test   al,0x1
  239f2d:	75 02                	jne    239f31 <fixuint.10+0xd1>
  239f2f:	eb 0c                	jmp    239f3d <fixuint.10+0xdd>
  239f31:	31 c0                	xor    eax,eax
  239f33:	89 c1                	mov    ecx,eax
  239f35:	48 89 c8             	mov    rax,rcx
  239f38:	48 89 ca             	mov    rdx,rcx
  239f3b:	5d                   	pop    rbp
  239f3c:	c3                   	ret    
  239f3d:	eb 00                	jmp    239f3f <fixuint.10+0xdf>
    if (@intCast(c_uint, exponent) >= fixuint_t.bit_count) return ~fixuint_t(0);
  239f3f:	81 7d c0 80 00 00 00 	cmp    DWORD PTR [rbp-0x40],0x80
  239f46:	72 11                	jb     239f59 <fixuint.10+0xf9>
  239f48:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
  239f4f:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  239f53:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  239f57:	5d                   	pop    rbp
  239f58:	c3                   	ret    
    if (exponent < significandBits) {
  239f59:	83 7d c0 34          	cmp    DWORD PTR [rbp-0x40],0x34
  239f5d:	7d 1f                	jge    239f7e <fixuint.10+0x11e>
        return @intCast(fixuint_t, significand >> @intCast(Log2Int(rep_t), significandBits - exponent));
  239f5f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  239f63:	8b 4d c0             	mov    ecx,DWORD PTR [rbp-0x40]
  239f66:	ba 34 00 00 00       	mov    edx,0x34
  239f6b:	29 ca                	sub    edx,ecx
  239f6d:	40 88 d6             	mov    sil,dl
  239f70:	40 88 f7             	mov    dil,sil
  239f73:	c4 e2 c3 f7 c0       	shrx   rax,rax,rdi
  239f78:	31 c9                	xor    ecx,ecx
  239f7a:	89 ca                	mov    edx,ecx
  239f7c:	5d                   	pop    rbp
  239f7d:	c3                   	ret    
        return @intCast(fixuint_t, significand) << @intCast(Log2Int(fixuint_t), exponent - significandBits);
  239f7e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  239f82:	8b 4d c0             	mov    ecx,DWORD PTR [rbp-0x40]
  239f85:	83 c1 cc             	add    ecx,0xffffffcc
  239f88:	88 ca                	mov    dl,cl
  239f8a:	31 c9                	xor    ecx,ecx
  239f8c:	89 ce                	mov    esi,ecx
  239f8e:	88 d1                	mov    cl,dl
  239f90:	48 89 f7             	mov    rdi,rsi
  239f93:	48 0f a5 c7          	shld   rdi,rax,cl
  239f97:	41 88 d0             	mov    r8b,dl
  239f9a:	c4 e2 b9 f7 c0       	shlx   rax,rax,r8
  239f9f:	f6 c2 40             	test   dl,0x40
  239fa2:	48 0f 45 f8          	cmovne rdi,rax
  239fa6:	48 0f 45 c6          	cmovne rax,rsi
  239faa:	48 89 fa             	mov    rdx,rdi
  239fad:	5d                   	pop    rbp
  239fae:	c3                   	ret    
  239faf:	90                   	nop

0000000000239fb0 <__fixunstfsi>:
const fixuint = @import("fixuint.zig").fixuint;
const builtin = @import("builtin");

pub extern fn __fixunstfsi(a: f128) u32 {
  239fb0:	55                   	push   rbp
  239fb1:	48 89 e5             	mov    rbp,rsp
  239fb4:	48 83 ec 10          	sub    rsp,0x10
  239fb8:	0f 29 45 f0          	movaps XMMWORD PTR [rbp-0x10],xmm0
    @setRuntimeSafety(builtin.is_test);
    return fixuint(f128, u32, a);
  239fbc:	0f 28 45 f0          	movaps xmm0,XMMWORD PTR [rbp-0x10]
  239fc0:	e8 0b 00 00 00       	call   239fd0 <fixuint.11>
  239fc5:	48 83 c4 10          	add    rsp,0x10
  239fc9:	5d                   	pop    rbp
  239fca:	c3                   	ret    
  239fcb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000239fd0 <fixuint.11>:
pub fn fixuint(comptime fp_t: type, comptime fixuint_t: type, a: fp_t) fixuint_t {
  239fd0:	55                   	push   rbp
  239fd1:	48 89 e5             	mov    rbp,rsp
  239fd4:	48 83 ec 20          	sub    rsp,0x20
  239fd8:	0f 29 45 f0          	movaps XMMWORD PTR [rbp-0x10],xmm0
    const signBit = (rep_t(1) << (significandBits + exponentBits));
  239fdc:	48 b8 00 00 00 00 00 	movabs rax,0x8000000000000000
  239fe3:	00 00 80 
  239fe6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  239fea:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  239ff1:	00 
    const implicitBit = (rep_t(1) << significandBits);
  239ff2:	48 b8 00 00 00 00 00 	movabs rax,0x1000000000000
  239ff9:	00 01 00 
  239ffc:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  23a000:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
  23a007:	00 
    const significandMask = (implicitBit - 1);
  23a008:	48 b8 ff ff ff ff ff 	movabs rax,0xffffffffffff
  23a00f:	ff 00 00 
  23a012:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  23a016:	48 c7 45 c0 ff ff ff 	mov    QWORD PTR [rbp-0x40],0xffffffffffffffff
  23a01d:	ff 
    const aRep: rep_t = @bitCast(rep_t, a);
  23a01e:	0f 28 45 f0          	movaps xmm0,XMMWORD PTR [rbp-0x10]
  23a022:	0f 29 45 b0          	movaps XMMWORD PTR [rbp-0x50],xmm0
    const absMask = signBit - 1;
  23a026:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffffffff
  23a02d:	ff ff 7f 
  23a030:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  23a034:	48 c7 45 a0 ff ff ff 	mov    QWORD PTR [rbp-0x60],0xffffffffffffffff
  23a03b:	ff 
    const aAbs: rep_t = aRep & absMask;
  23a03c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  23a040:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  23a044:	b2 3f                	mov    dl,0x3f
  23a046:	40 88 d6             	mov    sil,dl
  23a049:	c4 e2 c8 f5 c9       	bzhi   rcx,rcx,rsi
  23a04e:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  23a052:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
    const sign = if ((aRep & signBit) != 0) i32(-1) else i32(1);
  23a056:	8a 55 bf             	mov    dl,BYTE PTR [rbp-0x41]
  23a059:	f6 c2 80             	test   dl,0x80
  23a05c:	74 0f                	je     23a06d <fixuint.11+0x9d>
  23a05e:	eb 00                	jmp    23a060 <fixuint.11+0x90>
  23a060:	b8 ff ff ff ff       	mov    eax,0xffffffff
  23a065:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
  23a06b:	eb 0d                	jmp    23a07a <fixuint.11+0xaa>
  23a06d:	b8 01 00 00 00       	mov    eax,0x1
  23a072:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
  23a078:	eb 00                	jmp    23a07a <fixuint.11+0xaa>
  23a07a:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
  23a080:	89 45 8c             	mov    DWORD PTR [rbp-0x74],eax
    const exponent = @intCast(i32, aAbs >> significandBits) - exponentBias;
  23a083:	0f b7 45 9e          	movzx  eax,WORD PTR [rbp-0x62]
  23a087:	05 01 c0 ff ff       	add    eax,0xffffc001
  23a08c:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
    const significand: rep_t = (aAbs & significandMask) | implicitBit;
  23a08f:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  23a093:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  23a097:	40 b6 30             	mov    sil,0x30
  23a09a:	40 88 f7             	mov    dil,sil
  23a09d:	c4 e2 c0 f5 d2       	bzhi   rdx,rdx,rdi
  23a0a2:	48 bf 00 00 00 00 00 	movabs rdi,0x1000000000000
  23a0a9:	00 01 00 
  23a0ac:	48 09 fa             	or     rdx,rdi
  23a0af:	48 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rcx
  23a0b6:	48 89 55 80          	mov    QWORD PTR [rbp-0x80],rdx
    if (sign == -1 or exponent < 0) return 0;
  23a0ba:	83 7d 8c ff          	cmp    DWORD PTR [rbp-0x74],0xffffffff
  23a0be:	40 0f 94 c6          	sete   sil
  23a0c2:	40 f6 c6 01          	test   sil,0x1
  23a0c6:	40 88 b5 73 ff ff ff 	mov    BYTE PTR [rbp-0x8d],sil
  23a0cd:	75 0d                	jne    23a0dc <fixuint.11+0x10c>
  23a0cf:	83 7d 88 00          	cmp    DWORD PTR [rbp-0x78],0x0
  23a0d3:	0f 9c c0             	setl   al
  23a0d6:	88 85 73 ff ff ff    	mov    BYTE PTR [rbp-0x8d],al
  23a0dc:	8a 85 73 ff ff ff    	mov    al,BYTE PTR [rbp-0x8d]
  23a0e2:	a8 01                	test   al,0x1
  23a0e4:	75 02                	jne    23a0e8 <fixuint.11+0x118>
  23a0e6:	eb 08                	jmp    23a0f0 <fixuint.11+0x120>
  23a0e8:	31 c0                	xor    eax,eax
  23a0ea:	48 83 c4 20          	add    rsp,0x20
  23a0ee:	5d                   	pop    rbp
  23a0ef:	c3                   	ret    
  23a0f0:	eb 00                	jmp    23a0f2 <fixuint.11+0x122>
    if (@intCast(c_uint, exponent) >= fixuint_t.bit_count) return ~fixuint_t(0);
  23a0f2:	83 7d 88 20          	cmp    DWORD PTR [rbp-0x78],0x20
  23a0f6:	72 0b                	jb     23a103 <fixuint.11+0x133>
  23a0f8:	b8 ff ff ff ff       	mov    eax,0xffffffff
  23a0fd:	48 83 c4 20          	add    rsp,0x20
  23a101:	5d                   	pop    rbp
  23a102:	c3                   	ret    
    if (exponent < significandBits) {
  23a103:	83 7d 88 70          	cmp    DWORD PTR [rbp-0x78],0x70
  23a107:	7d 47                	jge    23a150 <fixuint.11+0x180>
        return @intCast(fixuint_t, significand >> @intCast(Log2Int(rep_t), significandBits - exponent));
  23a109:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  23a110:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  23a114:	8b 55 88             	mov    edx,DWORD PTR [rbp-0x78]
  23a117:	be 70 00 00 00       	mov    esi,0x70
  23a11c:	29 d6                	sub    esi,edx
  23a11e:	40 88 f7             	mov    dil,sil
  23a121:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
  23a128:	40 88 f9             	mov    cl,dil
  23a12b:	4c 8b 85 68 ff ff ff 	mov    r8,QWORD PTR [rbp-0x98]
  23a132:	4c 0f ad c0          	shrd   rax,r8,cl
  23a136:	41 88 f9             	mov    r9b,dil
  23a139:	c4 42 b3 f7 c8       	shrx   r9,r8,r9
  23a13e:	40 f6 c7 40          	test   dil,0x40
  23a142:	49 0f 45 c1          	cmovne rax,r9
  23a146:	89 c2                	mov    edx,eax
  23a148:	89 d0                	mov    eax,edx
  23a14a:	48 83 c4 20          	add    rsp,0x20
  23a14e:	5d                   	pop    rbp
  23a14f:	c3                   	ret    
        return @intCast(fixuint_t, significand) << @intCast(Log2Int(fixuint_t), exponent - significandBits);
  23a150:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
  23a156:	8b 4d 88             	mov    ecx,DWORD PTR [rbp-0x78]
  23a159:	83 c1 90             	add    ecx,0xffffff90
  23a15c:	83 e1 1f             	and    ecx,0x1f
  23a15f:	d3 e0                	shl    eax,cl
  23a161:	48 83 c4 20          	add    rsp,0x20
  23a165:	5d                   	pop    rbp
  23a166:	c3                   	ret    
  23a167:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  23a16e:	00 00 

000000000023a170 <__fixunstfdi>:
const fixuint = @import("fixuint.zig").fixuint;
const builtin = @import("builtin");

pub extern fn __fixunstfdi(a: f128) u64 {
  23a170:	55                   	push   rbp
  23a171:	48 89 e5             	mov    rbp,rsp
  23a174:	48 83 ec 10          	sub    rsp,0x10
  23a178:	0f 29 45 f0          	movaps XMMWORD PTR [rbp-0x10],xmm0
    @setRuntimeSafety(builtin.is_test);
    return fixuint(f128, u64, a);
  23a17c:	0f 28 45 f0          	movaps xmm0,XMMWORD PTR [rbp-0x10]
  23a180:	e8 0b 00 00 00       	call   23a190 <fixuint.12>
  23a185:	48 83 c4 10          	add    rsp,0x10
  23a189:	5d                   	pop    rbp
  23a18a:	c3                   	ret    
  23a18b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000023a190 <fixuint.12>:
pub fn fixuint(comptime fp_t: type, comptime fixuint_t: type, a: fp_t) fixuint_t {
  23a190:	55                   	push   rbp
  23a191:	48 89 e5             	mov    rbp,rsp
  23a194:	48 83 ec 20          	sub    rsp,0x20
  23a198:	0f 29 45 f0          	movaps XMMWORD PTR [rbp-0x10],xmm0
    const signBit = (rep_t(1) << (significandBits + exponentBits));
  23a19c:	48 b8 00 00 00 00 00 	movabs rax,0x8000000000000000
  23a1a3:	00 00 80 
  23a1a6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  23a1aa:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  23a1b1:	00 
    const implicitBit = (rep_t(1) << significandBits);
  23a1b2:	48 b8 00 00 00 00 00 	movabs rax,0x1000000000000
  23a1b9:	00 01 00 
  23a1bc:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  23a1c0:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
  23a1c7:	00 
    const significandMask = (implicitBit - 1);
  23a1c8:	48 b8 ff ff ff ff ff 	movabs rax,0xffffffffffff
  23a1cf:	ff 00 00 
  23a1d2:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  23a1d6:	48 c7 45 c0 ff ff ff 	mov    QWORD PTR [rbp-0x40],0xffffffffffffffff
  23a1dd:	ff 
    const aRep: rep_t = @bitCast(rep_t, a);
  23a1de:	0f 28 45 f0          	movaps xmm0,XMMWORD PTR [rbp-0x10]
  23a1e2:	0f 29 45 b0          	movaps XMMWORD PTR [rbp-0x50],xmm0
    const absMask = signBit - 1;
  23a1e6:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffffffff
  23a1ed:	ff ff 7f 
  23a1f0:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  23a1f4:	48 c7 45 a0 ff ff ff 	mov    QWORD PTR [rbp-0x60],0xffffffffffffffff
  23a1fb:	ff 
    const aAbs: rep_t = aRep & absMask;
  23a1fc:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  23a200:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  23a204:	b2 3f                	mov    dl,0x3f
  23a206:	40 88 d6             	mov    sil,dl
  23a209:	c4 e2 c8 f5 c9       	bzhi   rcx,rcx,rsi
  23a20e:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  23a212:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
    const sign = if ((aRep & signBit) != 0) i32(-1) else i32(1);
  23a216:	8a 55 bf             	mov    dl,BYTE PTR [rbp-0x41]
  23a219:	f6 c2 80             	test   dl,0x80
  23a21c:	74 0f                	je     23a22d <fixuint.12+0x9d>
  23a21e:	eb 00                	jmp    23a220 <fixuint.12+0x90>
  23a220:	b8 ff ff ff ff       	mov    eax,0xffffffff
  23a225:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
  23a22b:	eb 0d                	jmp    23a23a <fixuint.12+0xaa>
  23a22d:	b8 01 00 00 00       	mov    eax,0x1
  23a232:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
  23a238:	eb 00                	jmp    23a23a <fixuint.12+0xaa>
  23a23a:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
  23a240:	89 45 8c             	mov    DWORD PTR [rbp-0x74],eax
    const exponent = @intCast(i32, aAbs >> significandBits) - exponentBias;
  23a243:	0f b7 45 9e          	movzx  eax,WORD PTR [rbp-0x62]
  23a247:	05 01 c0 ff ff       	add    eax,0xffffc001
  23a24c:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
    const significand: rep_t = (aAbs & significandMask) | implicitBit;
  23a24f:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  23a253:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  23a257:	40 b6 30             	mov    sil,0x30
  23a25a:	40 88 f7             	mov    dil,sil
  23a25d:	c4 e2 c0 f5 d2       	bzhi   rdx,rdx,rdi
  23a262:	48 bf 00 00 00 00 00 	movabs rdi,0x1000000000000
  23a269:	00 01 00 
  23a26c:	48 09 fa             	or     rdx,rdi
  23a26f:	48 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rcx
  23a276:	48 89 55 80          	mov    QWORD PTR [rbp-0x80],rdx
    if (sign == -1 or exponent < 0) return 0;
  23a27a:	83 7d 8c ff          	cmp    DWORD PTR [rbp-0x74],0xffffffff
  23a27e:	40 0f 94 c6          	sete   sil
  23a282:	40 f6 c6 01          	test   sil,0x1
  23a286:	40 88 b5 73 ff ff ff 	mov    BYTE PTR [rbp-0x8d],sil
  23a28d:	75 0d                	jne    23a29c <fixuint.12+0x10c>
  23a28f:	83 7d 88 00          	cmp    DWORD PTR [rbp-0x78],0x0
  23a293:	0f 9c c0             	setl   al
  23a296:	88 85 73 ff ff ff    	mov    BYTE PTR [rbp-0x8d],al
  23a29c:	8a 85 73 ff ff ff    	mov    al,BYTE PTR [rbp-0x8d]
  23a2a2:	a8 01                	test   al,0x1
  23a2a4:	75 02                	jne    23a2a8 <fixuint.12+0x118>
  23a2a6:	eb 08                	jmp    23a2b0 <fixuint.12+0x120>
  23a2a8:	31 c0                	xor    eax,eax
  23a2aa:	48 83 c4 20          	add    rsp,0x20
  23a2ae:	5d                   	pop    rbp
  23a2af:	c3                   	ret    
  23a2b0:	eb 00                	jmp    23a2b2 <fixuint.12+0x122>
    if (@intCast(c_uint, exponent) >= fixuint_t.bit_count) return ~fixuint_t(0);
  23a2b2:	83 7d 88 40          	cmp    DWORD PTR [rbp-0x78],0x40
  23a2b6:	72 0d                	jb     23a2c5 <fixuint.12+0x135>
  23a2b8:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
  23a2bf:	48 83 c4 20          	add    rsp,0x20
  23a2c3:	5d                   	pop    rbp
  23a2c4:	c3                   	ret    
    if (exponent < significandBits) {
  23a2c5:	83 7d 88 70          	cmp    DWORD PTR [rbp-0x78],0x70
  23a2c9:	7d 43                	jge    23a30e <fixuint.12+0x17e>
        return @intCast(fixuint_t, significand >> @intCast(Log2Int(rep_t), significandBits - exponent));
  23a2cb:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  23a2d2:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  23a2d6:	8b 55 88             	mov    edx,DWORD PTR [rbp-0x78]
  23a2d9:	be 70 00 00 00       	mov    esi,0x70
  23a2de:	29 d6                	sub    esi,edx
  23a2e0:	40 88 f7             	mov    dil,sil
  23a2e3:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
  23a2ea:	40 88 f9             	mov    cl,dil
  23a2ed:	4c 8b 85 68 ff ff ff 	mov    r8,QWORD PTR [rbp-0x98]
  23a2f4:	4c 0f ad c0          	shrd   rax,r8,cl
  23a2f8:	41 88 f9             	mov    r9b,dil
  23a2fb:	c4 42 b3 f7 c8       	shrx   r9,r8,r9
  23a300:	40 f6 c7 40          	test   dil,0x40
  23a304:	49 0f 45 c1          	cmovne rax,r9
  23a308:	48 83 c4 20          	add    rsp,0x20
  23a30c:	5d                   	pop    rbp
  23a30d:	c3                   	ret    
        return @intCast(fixuint_t, significand) << @intCast(Log2Int(fixuint_t), exponent - significandBits);
  23a30e:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  23a315:	8b 4d 88             	mov    ecx,DWORD PTR [rbp-0x78]
  23a318:	83 c1 90             	add    ecx,0xffffff90
  23a31b:	83 e1 3f             	and    ecx,0x3f
  23a31e:	48 d3 e0             	shl    rax,cl
  23a321:	48 83 c4 20          	add    rsp,0x20
  23a325:	5d                   	pop    rbp
  23a326:	c3                   	ret    
  23a327:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  23a32e:	00 00 

000000000023a330 <__fixunstfti>:
const fixuint = @import("fixuint.zig").fixuint;
const builtin = @import("builtin");

pub extern fn __fixunstfti(a: f128) u128 {
  23a330:	55                   	push   rbp
  23a331:	48 89 e5             	mov    rbp,rsp
  23a334:	48 83 ec 10          	sub    rsp,0x10
  23a338:	0f 29 45 f0          	movaps XMMWORD PTR [rbp-0x10],xmm0
    @setRuntimeSafety(builtin.is_test);
    return fixuint(f128, u128, a);
  23a33c:	0f 28 45 f0          	movaps xmm0,XMMWORD PTR [rbp-0x10]
  23a340:	e8 0b 00 00 00       	call   23a350 <fixuint.13>
  23a345:	48 83 c4 10          	add    rsp,0x10
  23a349:	5d                   	pop    rbp
  23a34a:	c3                   	ret    
  23a34b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000023a350 <fixuint.13>:
pub fn fixuint(comptime fp_t: type, comptime fixuint_t: type, a: fp_t) fixuint_t {
  23a350:	55                   	push   rbp
  23a351:	48 89 e5             	mov    rbp,rsp
  23a354:	48 83 ec 30          	sub    rsp,0x30
  23a358:	0f 29 45 f0          	movaps XMMWORD PTR [rbp-0x10],xmm0
    const signBit = (rep_t(1) << (significandBits + exponentBits));
  23a35c:	48 b8 00 00 00 00 00 	movabs rax,0x8000000000000000
  23a363:	00 00 80 
  23a366:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  23a36a:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  23a371:	00 
    const implicitBit = (rep_t(1) << significandBits);
  23a372:	48 b8 00 00 00 00 00 	movabs rax,0x1000000000000
  23a379:	00 01 00 
  23a37c:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  23a380:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
  23a387:	00 
    const significandMask = (implicitBit - 1);
  23a388:	48 b8 ff ff ff ff ff 	movabs rax,0xffffffffffff
  23a38f:	ff 00 00 
  23a392:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  23a396:	48 c7 45 c0 ff ff ff 	mov    QWORD PTR [rbp-0x40],0xffffffffffffffff
  23a39d:	ff 
    const aRep: rep_t = @bitCast(rep_t, a);
  23a39e:	0f 28 45 f0          	movaps xmm0,XMMWORD PTR [rbp-0x10]
  23a3a2:	0f 29 45 b0          	movaps XMMWORD PTR [rbp-0x50],xmm0
    const absMask = signBit - 1;
  23a3a6:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffffffff
  23a3ad:	ff ff 7f 
  23a3b0:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  23a3b4:	48 c7 45 a0 ff ff ff 	mov    QWORD PTR [rbp-0x60],0xffffffffffffffff
  23a3bb:	ff 
    const aAbs: rep_t = aRep & absMask;
  23a3bc:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  23a3c0:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  23a3c4:	b2 3f                	mov    dl,0x3f
  23a3c6:	40 88 d6             	mov    sil,dl
  23a3c9:	c4 e2 c8 f5 c9       	bzhi   rcx,rcx,rsi
  23a3ce:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  23a3d2:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
    const sign = if ((aRep & signBit) != 0) i32(-1) else i32(1);
  23a3d6:	8a 55 bf             	mov    dl,BYTE PTR [rbp-0x41]
  23a3d9:	f6 c2 80             	test   dl,0x80
  23a3dc:	74 0f                	je     23a3ed <fixuint.13+0x9d>
  23a3de:	eb 00                	jmp    23a3e0 <fixuint.13+0x90>
  23a3e0:	b8 ff ff ff ff       	mov    eax,0xffffffff
  23a3e5:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
  23a3eb:	eb 0d                	jmp    23a3fa <fixuint.13+0xaa>
  23a3ed:	b8 01 00 00 00       	mov    eax,0x1
  23a3f2:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
  23a3f8:	eb 00                	jmp    23a3fa <fixuint.13+0xaa>
  23a3fa:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
  23a400:	89 45 8c             	mov    DWORD PTR [rbp-0x74],eax
    const exponent = @intCast(i32, aAbs >> significandBits) - exponentBias;
  23a403:	0f b7 45 9e          	movzx  eax,WORD PTR [rbp-0x62]
  23a407:	05 01 c0 ff ff       	add    eax,0xffffc001
  23a40c:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
    const significand: rep_t = (aAbs & significandMask) | implicitBit;
  23a40f:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  23a413:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  23a417:	40 b6 30             	mov    sil,0x30
  23a41a:	40 88 f7             	mov    dil,sil
  23a41d:	c4 e2 c0 f5 d2       	bzhi   rdx,rdx,rdi
  23a422:	48 bf 00 00 00 00 00 	movabs rdi,0x1000000000000
  23a429:	00 01 00 
  23a42c:	48 09 fa             	or     rdx,rdi
  23a42f:	48 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rcx
  23a436:	48 89 55 80          	mov    QWORD PTR [rbp-0x80],rdx
    if (sign == -1 or exponent < 0) return 0;
  23a43a:	83 7d 8c ff          	cmp    DWORD PTR [rbp-0x74],0xffffffff
  23a43e:	40 0f 94 c6          	sete   sil
  23a442:	40 f6 c6 01          	test   sil,0x1
  23a446:	40 88 b5 73 ff ff ff 	mov    BYTE PTR [rbp-0x8d],sil
  23a44d:	75 0d                	jne    23a45c <fixuint.13+0x10c>
  23a44f:	83 7d 88 00          	cmp    DWORD PTR [rbp-0x78],0x0
  23a453:	0f 9c c0             	setl   al
  23a456:	88 85 73 ff ff ff    	mov    BYTE PTR [rbp-0x8d],al
  23a45c:	8a 85 73 ff ff ff    	mov    al,BYTE PTR [rbp-0x8d]
  23a462:	a8 01                	test   al,0x1
  23a464:	75 02                	jne    23a468 <fixuint.13+0x118>
  23a466:	eb 10                	jmp    23a478 <fixuint.13+0x128>
  23a468:	31 c0                	xor    eax,eax
  23a46a:	89 c1                	mov    ecx,eax
  23a46c:	48 89 c8             	mov    rax,rcx
  23a46f:	48 89 ca             	mov    rdx,rcx
  23a472:	48 83 c4 30          	add    rsp,0x30
  23a476:	5d                   	pop    rbp
  23a477:	c3                   	ret    
  23a478:	eb 00                	jmp    23a47a <fixuint.13+0x12a>
    if (@intCast(c_uint, exponent) >= fixuint_t.bit_count) return ~fixuint_t(0);
  23a47a:	81 7d 88 80 00 00 00 	cmp    DWORD PTR [rbp-0x78],0x80
  23a481:	72 1b                	jb     23a49e <fixuint.13+0x14e>
  23a483:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
  23a48a:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  23a491:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  23a498:	48 83 c4 30          	add    rsp,0x30
  23a49c:	5d                   	pop    rbp
  23a49d:	c3                   	ret    
    if (exponent < significandBits) {
  23a49e:	83 7d 88 70          	cmp    DWORD PTR [rbp-0x78],0x70
  23a4a2:	7d 4f                	jge    23a4f3 <fixuint.13+0x1a3>
        return @intCast(fixuint_t, significand >> @intCast(Log2Int(rep_t), significandBits - exponent));
  23a4a4:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  23a4ab:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  23a4af:	8b 55 88             	mov    edx,DWORD PTR [rbp-0x78]
  23a4b2:	be 70 00 00 00       	mov    esi,0x70
  23a4b7:	29 d6                	sub    esi,edx
  23a4b9:	40 88 f7             	mov    dil,sil
  23a4bc:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
  23a4c3:	40 88 f9             	mov    cl,dil
  23a4c6:	4c 8b 85 60 ff ff ff 	mov    r8,QWORD PTR [rbp-0xa0]
  23a4cd:	4c 0f ad c0          	shrd   rax,r8,cl
  23a4d1:	41 88 f9             	mov    r9b,dil
  23a4d4:	c4 42 b3 f7 c8       	shrx   r9,r8,r9
  23a4d9:	31 d2                	xor    edx,edx
  23a4db:	40 f6 c7 40          	test   dil,0x40
  23a4df:	49 0f 45 c1          	cmovne rax,r9
  23a4e3:	41 89 d2             	mov    r10d,edx
  23a4e6:	4d 0f 45 ca          	cmovne r9,r10
  23a4ea:	4c 89 ca             	mov    rdx,r9
  23a4ed:	48 83 c4 30          	add    rsp,0x30
  23a4f1:	5d                   	pop    rbp
  23a4f2:	c3                   	ret    
        return @intCast(fixuint_t, significand) << @intCast(Log2Int(fixuint_t), exponent - significandBits);
  23a4f3:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  23a4fa:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  23a4fe:	8b 55 88             	mov    edx,DWORD PTR [rbp-0x78]
  23a501:	83 c2 90             	add    edx,0xffffff90
  23a504:	40 88 d6             	mov    sil,dl
  23a507:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
  23a50e:	40 88 f1             	mov    cl,sil
  23a511:	48 8b bd 58 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  23a518:	48 0f a5 c7          	shld   rdi,rax,cl
  23a51c:	41 88 f0             	mov    r8b,sil
  23a51f:	c4 e2 b9 f7 c0       	shlx   rax,rax,r8
  23a524:	31 d2                	xor    edx,edx
  23a526:	40 f6 c6 40          	test   sil,0x40
  23a52a:	48 0f 45 f8          	cmovne rdi,rax
  23a52e:	41 89 d0             	mov    r8d,edx
  23a531:	49 0f 45 c0          	cmovne rax,r8
  23a535:	48 89 fa             	mov    rdx,rdi
  23a538:	48 83 c4 30          	add    rsp,0x30
  23a53c:	5d                   	pop    rbp
  23a53d:	c3                   	ret    
  23a53e:	66 90                	xchg   ax,ax

000000000023a540 <udivmod>:
    builtin.Endian.Big => 1,
    builtin.Endian.Little => 0,
};
const high = 1 - low;

pub fn udivmod(comptime DoubleInt: type, a: DoubleInt, b: DoubleInt, maybe_rem: ?*DoubleInt) DoubleInt {
  23a540:	55                   	push   rbp
  23a541:	48 89 e5             	mov    rbp,rsp
  23a544:	48 83 ec 40          	sub    rsp,0x40
  23a548:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  23a54c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  23a550:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx

    const SingleInt = @IntType(false, @divExact(DoubleInt.bit_count, 2));
    const SignedDoubleInt = @IntType(true, DoubleInt.bit_count);
    const Log2SingleInt = @import("std").math.Log2Int(SingleInt);

    const n = @ptrCast(*const [2]SingleInt, &a).*; // TODO issue #421
  23a554:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  23a558:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
    const d = @ptrCast(*const [2]SingleInt, &b).*; // TODO issue #421
  23a55c:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  23a560:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
    var q: [2]SingleInt = undefined;
  23a564:	48 8b 15 0d 67 fc ff 	mov    rdx,QWORD PTR [rip+0xfffffffffffc670d]        # 200c78 <__unnamed_132>
  23a56b:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
    var r: [2]SingleInt = undefined;
  23a56f:	48 8b 15 02 67 fc ff 	mov    rdx,QWORD PTR [rip+0xfffffffffffc6702]        # 200c78 <__unnamed_132>
  23a576:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
    var sr: c_uint = undefined;
    // special cases, X is unknown, K != 0
    if (n[high] == 0) {
  23a57a:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
  23a57e:	75 75                	jne    23a5f5 <udivmod+0xb5>
        if (d[high] == 0) {
  23a580:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
  23a584:	75 46                	jne    23a5cc <udivmod+0x8c>
            // 0 X
            // ---
            // 0 X
            if (maybe_rem) |rem| {
  23a586:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
  23a58b:	74 2d                	je     23a5ba <udivmod+0x7a>
  23a58d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  23a591:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                rem.* = n[low] % d[low];
  23a595:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  23a599:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
  23a59c:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
  23a5a3:	89 c8                	mov    eax,ecx
  23a5a5:	31 d2                	xor    edx,edx
  23a5a7:	f7 75 d8             	div    DWORD PTR [rbp-0x28]
  23a5aa:	89 d1                	mov    ecx,edx
  23a5ac:	89 ce                	mov    esi,ecx
  23a5ae:	48 8b bd 50 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb0]
  23a5b5:	48 89 37             	mov    QWORD PTR [rdi],rsi
            if (maybe_rem) |rem| {
  23a5b8:	eb 02                	jmp    23a5bc <udivmod+0x7c>
  23a5ba:	eb 00                	jmp    23a5bc <udivmod+0x7c>
            }
            return n[low] / d[low];
  23a5bc:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  23a5bf:	31 d2                	xor    edx,edx
  23a5c1:	f7 75 d8             	div    DWORD PTR [rbp-0x28]
  23a5c4:	89 c0                	mov    eax,eax
  23a5c6:	48 83 c4 40          	add    rsp,0x40
  23a5ca:	5d                   	pop    rbp
  23a5cb:	c3                   	ret    
        if (d[high] == 0) {
  23a5cc:	eb 00                	jmp    23a5ce <udivmod+0x8e>
        }
        // 0 X
        // ---
        // K X
        if (maybe_rem) |rem| {
  23a5ce:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
  23a5d3:	74 16                	je     23a5eb <udivmod+0xab>
  23a5d5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  23a5d9:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
            rem.* = n[low];
  23a5dd:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  23a5e1:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
  23a5e4:	89 ca                	mov    edx,ecx
  23a5e6:	48 89 10             	mov    QWORD PTR [rax],rdx
        if (maybe_rem) |rem| {
  23a5e9:	eb 02                	jmp    23a5ed <udivmod+0xad>
  23a5eb:	eb 00                	jmp    23a5ed <udivmod+0xad>
  23a5ed:	31 c0                	xor    eax,eax
        }
        return 0;
  23a5ef:	48 83 c4 40          	add    rsp,0x40
  23a5f3:	5d                   	pop    rbp
  23a5f4:	c3                   	ret    
    if (n[high] == 0) {
  23a5f5:	eb 00                	jmp    23a5f7 <udivmod+0xb7>
    }
    // n[high] != 0
    if (d[low] == 0) {
  23a5f7:	83 7d d8 00          	cmp    DWORD PTR [rbp-0x28],0x0
  23a5fb:	0f 85 9e 01 00 00    	jne    23a79f <udivmod+0x25f>
        if (d[high] == 0) {
  23a601:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
  23a605:	75 46                	jne    23a64d <udivmod+0x10d>
            // K X
            // ---
            // 0 0
            if (maybe_rem) |rem| {
  23a607:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
  23a60c:	74 2d                	je     23a63b <udivmod+0xfb>
  23a60e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  23a612:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
                rem.* = n[high] % d[low];
  23a616:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  23a61a:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
  23a61d:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  23a624:	89 c8                	mov    eax,ecx
  23a626:	31 d2                	xor    edx,edx
  23a628:	f7 75 d8             	div    DWORD PTR [rbp-0x28]
  23a62b:	89 d1                	mov    ecx,edx
  23a62d:	89 ce                	mov    esi,ecx
  23a62f:	48 8b bd 48 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb8]
  23a636:	48 89 37             	mov    QWORD PTR [rdi],rsi
            if (maybe_rem) |rem| {
  23a639:	eb 02                	jmp    23a63d <udivmod+0xfd>
  23a63b:	eb 00                	jmp    23a63d <udivmod+0xfd>
            }
            return n[high] / d[low];
  23a63d:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  23a640:	31 d2                	xor    edx,edx
  23a642:	f7 75 d8             	div    DWORD PTR [rbp-0x28]
  23a645:	89 c0                	mov    eax,eax
  23a647:	48 83 c4 40          	add    rsp,0x40
  23a64b:	5d                   	pop    rbp
  23a64c:	c3                   	ret    
        if (d[high] == 0) {
  23a64d:	eb 00                	jmp    23a64f <udivmod+0x10f>
        }
        // d[high] != 0
        if (n[low] == 0) {
  23a64f:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
  23a653:	75 40                	jne    23a695 <udivmod+0x155>
            // K 0
            // ---
            // K 0
            if (maybe_rem) |rem| {
  23a655:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
  23a65a:	74 27                	je     23a683 <udivmod+0x143>
  23a65c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  23a660:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
                r[high] = n[high] % d[high];
  23a664:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  23a667:	31 d2                	xor    edx,edx
  23a669:	f7 75 dc             	div    DWORD PTR [rbp-0x24]
  23a66c:	89 55 cc             	mov    DWORD PTR [rbp-0x34],edx
                r[low] = 0;
  23a66f:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [rbp-0x38],0x0
                rem.* = @ptrCast(*align(@alignOf(SingleInt)) DoubleInt, &r[0]).*; // TODO issue #421
  23a676:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  23a67a:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  23a67e:	48 89 31             	mov    QWORD PTR [rcx],rsi
            if (maybe_rem) |rem| {
  23a681:	eb 02                	jmp    23a685 <udivmod+0x145>
  23a683:	eb 00                	jmp    23a685 <udivmod+0x145>
            }
            return n[high] / d[high];
  23a685:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  23a688:	31 d2                	xor    edx,edx
  23a68a:	f7 75 dc             	div    DWORD PTR [rbp-0x24]
  23a68d:	89 c0                	mov    eax,eax
  23a68f:	48 83 c4 40          	add    rsp,0x40
  23a693:	5d                   	pop    rbp
  23a694:	c3                   	ret    
        if (n[low] == 0) {
  23a695:	eb 00                	jmp    23a697 <udivmod+0x157>
        }
        // K K
        // ---
        // K 0
        if ((d[high] & (d[high] - 1)) == 0) {
  23a697:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  23a69a:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  23a69d:	83 e9 01             	sub    ecx,0x1
  23a6a0:	21 c8                	and    eax,ecx
  23a6a2:	83 f8 00             	cmp    eax,0x0
  23a6a5:	75 47                	jne    23a6ee <udivmod+0x1ae>
            // d is a power of 2
            if (maybe_rem) |rem| {
  23a6a7:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
  23a6ac:	74 29                	je     23a6d7 <udivmod+0x197>
  23a6ae:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  23a6b2:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
                r[low] = n[low];
  23a6b6:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
  23a6b9:	89 4d c8             	mov    DWORD PTR [rbp-0x38],ecx
                r[high] = n[high] & (d[high] - 1);
  23a6bc:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
  23a6bf:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  23a6c2:	83 ea 01             	sub    edx,0x1
  23a6c5:	21 d1                	and    ecx,edx
  23a6c7:	89 4d cc             	mov    DWORD PTR [rbp-0x34],ecx
                rem.* = @ptrCast(*align(@alignOf(SingleInt)) DoubleInt, &r[0]).*; // TODO issue #421
  23a6ca:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  23a6ce:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  23a6d2:	48 89 30             	mov    QWORD PTR [rax],rsi
            if (maybe_rem) |rem| {
  23a6d5:	eb 02                	jmp    23a6d9 <udivmod+0x199>
  23a6d7:	eb 00                	jmp    23a6d9 <udivmod+0x199>
            }
            return n[high] >> @intCast(Log2SingleInt, @ctz(d[high]));
  23a6d9:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  23a6dc:	f3 0f bc 4d dc       	tzcnt  ecx,DWORD PTR [rbp-0x24]
  23a6e1:	83 e1 1f             	and    ecx,0x1f
  23a6e4:	d3 e8                	shr    eax,cl
  23a6e6:	89 c0                	mov    eax,eax
  23a6e8:	48 83 c4 40          	add    rsp,0x40
  23a6ec:	5d                   	pop    rbp
  23a6ed:	c3                   	ret    
        if ((d[high] & (d[high] - 1)) == 0) {
  23a6ee:	eb 00                	jmp    23a6f0 <udivmod+0x1b0>
        }
        // K K
        // ---
        // K 0
        sr = @bitCast(c_uint, c_int(@clz(d[high])) - c_int(@clz(n[high])));
  23a6f0:	f3 0f bd 45 dc       	lzcnt  eax,DWORD PTR [rbp-0x24]
  23a6f5:	f3 0f bd 4d e4       	lzcnt  ecx,DWORD PTR [rbp-0x1c]
  23a6fa:	29 c8                	sub    eax,ecx
  23a6fc:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
        // 0 <= sr <= SingleInt.bit_count - 2 or sr large
        if (sr > SingleInt.bit_count - 2) {
  23a6ff:	83 7d c4 1e          	cmp    DWORD PTR [rbp-0x3c],0x1e
  23a703:	76 26                	jbe    23a72b <udivmod+0x1eb>
            if (maybe_rem) |rem| {
  23a705:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
  23a70a:	74 15                	je     23a721 <udivmod+0x1e1>
  23a70c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  23a710:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
                rem.* = a;
  23a714:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  23a718:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  23a71c:	48 89 08             	mov    QWORD PTR [rax],rcx
            if (maybe_rem) |rem| {
  23a71f:	eb 02                	jmp    23a723 <udivmod+0x1e3>
  23a721:	eb 00                	jmp    23a723 <udivmod+0x1e3>
  23a723:	31 c0                	xor    eax,eax
            }
            return 0;
  23a725:	48 83 c4 40          	add    rsp,0x40
  23a729:	5d                   	pop    rbp
  23a72a:	c3                   	ret    
        if (sr > SingleInt.bit_count - 2) {
  23a72b:	eb 00                	jmp    23a72d <udivmod+0x1ed>
        }
        sr += 1;
  23a72d:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
  23a730:	83 c0 01             	add    eax,0x1
  23a733:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
        // 1 <= sr <= SingleInt.bit_count - 1
        // q.all = a << (DoubleInt.bit_count - sr);
        q[low] = 0;
  23a736:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
        q[high] = n[low] << @intCast(Log2SingleInt, SingleInt.bit_count - sr);
  23a73d:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  23a740:	8b 4d c4             	mov    ecx,DWORD PTR [rbp-0x3c]
  23a743:	ba 20 00 00 00       	mov    edx,0x20
  23a748:	89 d6                	mov    esi,edx
  23a74a:	29 ce                	sub    esi,ecx
  23a74c:	40 88 f7             	mov    dil,sil
  23a74f:	40 88 f9             	mov    cl,dil
  23a752:	c4 e2 71 f7 c0       	shlx   eax,eax,ecx
  23a757:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
        // r.all = a >> sr;
        r[high] = n[high] >> @intCast(Log2SingleInt, sr);
  23a75a:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  23a75d:	40 8a 7d c4          	mov    dil,BYTE PTR [rbp-0x3c]
  23a761:	40 88 f9             	mov    cl,dil
  23a764:	c4 e2 73 f7 c0       	shrx   eax,eax,ecx
  23a769:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
        r[low] = (n[high] << @intCast(Log2SingleInt, SingleInt.bit_count - sr)) | (n[low] >> @intCast(Log2SingleInt, sr));
  23a76c:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  23a76f:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
  23a772:	8b 75 c4             	mov    esi,DWORD PTR [rbp-0x3c]
  23a775:	29 f2                	sub    edx,esi
  23a777:	40 88 d7             	mov    dil,dl
  23a77a:	40 88 fa             	mov    dl,dil
  23a77d:	c4 e2 69 f7 c9       	shlx   ecx,ecx,edx
  23a782:	83 e6 1f             	and    esi,0x1f
  23a785:	89 8d 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],ecx
  23a78b:	89 f1                	mov    ecx,esi
  23a78d:	d3 e8                	shr    eax,cl
  23a78f:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
  23a795:	09 c2                	or     edx,eax
  23a797:	89 55 c8             	mov    DWORD PTR [rbp-0x38],edx
    if (d[low] == 0) {
  23a79a:	e9 69 02 00 00       	jmp    23aa08 <udivmod+0x4c8>
    } else {
        // d[low] != 0
        if (d[high] == 0) {
  23a79f:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
  23a7a3:	0f 85 a2 01 00 00    	jne    23a94b <udivmod+0x40b>
            // K X
            // ---
            // 0 K
            if ((d[low] & (d[low] - 1)) == 0) {
  23a7a9:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  23a7ac:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
  23a7af:	83 e9 01             	sub    ecx,0x1
  23a7b2:	21 c8                	and    eax,ecx
  23a7b4:	83 f8 00             	cmp    eax,0x0
  23a7b7:	0f 85 84 00 00 00    	jne    23a841 <udivmod+0x301>
                // d is a power of 2
                if (maybe_rem) |rem| {
  23a7bd:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
  23a7c2:	74 20                	je     23a7e4 <udivmod+0x2a4>
  23a7c4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  23a7c8:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
                    rem.* = n[low] & (d[low] - 1);
  23a7cc:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  23a7d0:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
  23a7d3:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
  23a7d6:	83 ea 01             	sub    edx,0x1
  23a7d9:	21 d1                	and    ecx,edx
  23a7db:	89 c9                	mov    ecx,ecx
  23a7dd:	89 ce                	mov    esi,ecx
  23a7df:	48 89 30             	mov    QWORD PTR [rax],rsi
                if (maybe_rem) |rem| {
  23a7e2:	eb 02                	jmp    23a7e6 <udivmod+0x2a6>
  23a7e4:	eb 00                	jmp    23a7e6 <udivmod+0x2a6>
                }
                if (d[low] == 1) {
  23a7e6:	83 7d d8 01          	cmp    DWORD PTR [rbp-0x28],0x1
  23a7ea:	75 0a                	jne    23a7f6 <udivmod+0x2b6>
                    return a;
  23a7ec:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  23a7f0:	48 83 c4 40          	add    rsp,0x40
  23a7f4:	5d                   	pop    rbp
  23a7f5:	c3                   	ret    
                if (d[low] == 1) {
  23a7f6:	eb 00                	jmp    23a7f8 <udivmod+0x2b8>
                }
                sr = @ctz(d[low]);
  23a7f8:	f3 0f bc 45 d8       	tzcnt  eax,DWORD PTR [rbp-0x28]
  23a7fd:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
                q[high] = n[high] >> @intCast(Log2SingleInt, sr);
  23a800:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  23a803:	8a 4d c4             	mov    cl,BYTE PTR [rbp-0x3c]
  23a806:	88 ca                	mov    dl,cl
  23a808:	c4 e2 6b f7 c0       	shrx   eax,eax,edx
  23a80d:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
                q[low] = (n[high] << @intCast(Log2SingleInt, SingleInt.bit_count - sr)) | (n[low] >> @intCast(Log2SingleInt, sr));
  23a810:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  23a813:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
  23a816:	8b 75 c4             	mov    esi,DWORD PTR [rbp-0x3c]
  23a819:	bf 20 00 00 00       	mov    edi,0x20
  23a81e:	29 f7                	sub    edi,esi
  23a820:	40 88 f9             	mov    cl,dil
  23a823:	40 88 cf             	mov    dil,cl
  23a826:	c4 e2 41 f7 d2       	shlx   edx,edx,edi
  23a82b:	83 e6 1f             	and    esi,0x1f
  23a82e:	89 f1                	mov    ecx,esi
  23a830:	d3 e8                	shr    eax,cl
  23a832:	09 c2                	or     edx,eax
  23a834:	89 55 d0             	mov    DWORD PTR [rbp-0x30],edx
                return @ptrCast(*align(@alignOf(SingleInt)) DoubleInt, &q[0]).*; // TODO issue #421
  23a837:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23a83b:	48 83 c4 40          	add    rsp,0x40
  23a83f:	5d                   	pop    rbp
  23a840:	c3                   	ret    
            if ((d[low] & (d[low] - 1)) == 0) {
  23a841:	eb 00                	jmp    23a843 <udivmod+0x303>
            }
            // K X
            // ---
            // 0 K
            sr = 1 + SingleInt.bit_count + c_uint(@clz(d[low])) - c_uint(@clz(n[high]));
  23a843:	f3 0f bd 45 d8       	lzcnt  eax,DWORD PTR [rbp-0x28]
  23a848:	83 c0 21             	add    eax,0x21
  23a84b:	f3 0f bd 4d e4       	lzcnt  ecx,DWORD PTR [rbp-0x1c]
  23a850:	29 c8                	sub    eax,ecx
  23a852:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
            // 2 <= sr <= DoubleInt.bit_count - 1
            // q.all = a << (DoubleInt.bit_count - sr);
            // r.all = a >> sr;
            if (sr == SingleInt.bit_count) {
  23a855:	83 7d c4 20          	cmp    DWORD PTR [rbp-0x3c],0x20
  23a859:	75 1f                	jne    23a87a <udivmod+0x33a>
                q[low] = 0;
  23a85b:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
                q[high] = n[low];
  23a862:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  23a865:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
                r[high] = 0;
  23a868:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
                r[low] = n[high];
  23a86f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  23a872:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
            if (sr == SingleInt.bit_count) {
  23a875:	e9 cc 00 00 00       	jmp    23a946 <udivmod+0x406>
            } else if (sr < SingleInt.bit_count) {
  23a87a:	83 7d c4 20          	cmp    DWORD PTR [rbp-0x3c],0x20
  23a87e:	73 66                	jae    23a8e6 <udivmod+0x3a6>
                // 2 <= sr <= SingleInt.bit_count - 1
                q[low] = 0;
  23a880:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
                q[high] = n[low] << @intCast(Log2SingleInt, SingleInt.bit_count - sr);
  23a887:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  23a88a:	8b 4d c4             	mov    ecx,DWORD PTR [rbp-0x3c]
  23a88d:	ba 20 00 00 00       	mov    edx,0x20
  23a892:	89 d6                	mov    esi,edx
  23a894:	29 ce                	sub    esi,ecx
  23a896:	40 88 f7             	mov    dil,sil
  23a899:	40 88 f9             	mov    cl,dil
  23a89c:	c4 e2 71 f7 c0       	shlx   eax,eax,ecx
  23a8a1:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
                r[high] = n[high] >> @intCast(Log2SingleInt, sr);
  23a8a4:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  23a8a7:	40 8a 7d c4          	mov    dil,BYTE PTR [rbp-0x3c]
  23a8ab:	40 88 f9             	mov    cl,dil
  23a8ae:	c4 e2 73 f7 c0       	shrx   eax,eax,ecx
  23a8b3:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
                r[low] = (n[high] << @intCast(Log2SingleInt, SingleInt.bit_count - sr)) | (n[low] >> @intCast(Log2SingleInt, sr));
  23a8b6:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  23a8b9:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
  23a8bc:	8b 75 c4             	mov    esi,DWORD PTR [rbp-0x3c]
  23a8bf:	29 f2                	sub    edx,esi
  23a8c1:	40 88 d7             	mov    dil,dl
  23a8c4:	40 88 fa             	mov    dl,dil
  23a8c7:	c4 e2 69 f7 c9       	shlx   ecx,ecx,edx
  23a8cc:	83 e6 1f             	and    esi,0x1f
  23a8cf:	89 8d 40 ff ff ff    	mov    DWORD PTR [rbp-0xc0],ecx
  23a8d5:	89 f1                	mov    ecx,esi
  23a8d7:	d3 e8                	shr    eax,cl
  23a8d9:	8b 95 40 ff ff ff    	mov    edx,DWORD PTR [rbp-0xc0]
  23a8df:	09 c2                	or     edx,eax
  23a8e1:	89 55 c8             	mov    DWORD PTR [rbp-0x38],edx
            } else if (sr < SingleInt.bit_count) {
  23a8e4:	eb 5e                	jmp    23a944 <udivmod+0x404>
            } else {
                // SingleInt.bit_count + 1 <= sr <= DoubleInt.bit_count - 1
                q[low] = n[low] << @intCast(Log2SingleInt, DoubleInt.bit_count - sr);
  23a8e6:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  23a8e9:	8b 4d c4             	mov    ecx,DWORD PTR [rbp-0x3c]
  23a8ec:	ba 40 00 00 00       	mov    edx,0x40
  23a8f1:	89 d6                	mov    esi,edx
  23a8f3:	29 ce                	sub    esi,ecx
  23a8f5:	40 88 f7             	mov    dil,sil
  23a8f8:	40 88 f9             	mov    cl,dil
  23a8fb:	c4 e2 71 f7 c0       	shlx   eax,eax,ecx
  23a900:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
                q[high] = (n[high] << @intCast(Log2SingleInt, DoubleInt.bit_count - sr)) | (n[low] >> @intCast(Log2SingleInt, sr - SingleInt.bit_count));
  23a903:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  23a906:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
  23a909:	8b 75 c4             	mov    esi,DWORD PTR [rbp-0x3c]
  23a90c:	29 f2                	sub    edx,esi
  23a90e:	40 88 d7             	mov    dil,dl
  23a911:	40 88 fa             	mov    dl,dil
  23a914:	c4 e2 69 f7 c9       	shlx   ecx,ecx,edx
  23a919:	83 c6 e0             	add    esi,0xffffffe0
  23a91c:	40 88 f7             	mov    dil,sil
  23a91f:	40 88 fa             	mov    dl,dil
  23a922:	c4 e2 6b f7 c0       	shrx   eax,eax,edx
  23a927:	09 c1                	or     ecx,eax
  23a929:	89 4d d4             	mov    DWORD PTR [rbp-0x2c],ecx
                r[high] = 0;
  23a92c:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
                r[low] = n[high] >> @intCast(Log2SingleInt, sr - SingleInt.bit_count);
  23a933:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  23a936:	8b 4d c4             	mov    ecx,DWORD PTR [rbp-0x3c]
  23a939:	83 c1 e0             	add    ecx,0xffffffe0
  23a93c:	83 e1 1f             	and    ecx,0x1f
  23a93f:	d3 e8                	shr    eax,cl
  23a941:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
            if (sr == SingleInt.bit_count) {
  23a944:	eb 00                	jmp    23a946 <udivmod+0x406>
        if (d[high] == 0) {
  23a946:	e9 bb 00 00 00       	jmp    23aa06 <udivmod+0x4c6>
            }
        } else {
            // K X
            // ---
            // K K
            sr = @bitCast(c_uint, c_int(@clz(d[high])) - c_int(@clz(n[high])));
  23a94b:	f3 0f bd 45 dc       	lzcnt  eax,DWORD PTR [rbp-0x24]
  23a950:	f3 0f bd 4d e4       	lzcnt  ecx,DWORD PTR [rbp-0x1c]
  23a955:	29 c8                	sub    eax,ecx
  23a957:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
            // 0 <= sr <= SingleInt.bit_count - 1 or sr large
            if (sr > SingleInt.bit_count - 1) {
  23a95a:	83 7d c4 1f          	cmp    DWORD PTR [rbp-0x3c],0x1f
  23a95e:	76 26                	jbe    23a986 <udivmod+0x446>
                if (maybe_rem) |rem| {
  23a960:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
  23a965:	74 15                	je     23a97c <udivmod+0x43c>
  23a967:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  23a96b:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
                    rem.* = a;
  23a96f:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  23a973:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  23a977:	48 89 08             	mov    QWORD PTR [rax],rcx
                if (maybe_rem) |rem| {
  23a97a:	eb 02                	jmp    23a97e <udivmod+0x43e>
  23a97c:	eb 00                	jmp    23a97e <udivmod+0x43e>
  23a97e:	31 c0                	xor    eax,eax
                }
                return 0;
  23a980:	48 83 c4 40          	add    rsp,0x40
  23a984:	5d                   	pop    rbp
  23a985:	c3                   	ret    
            if (sr > SingleInt.bit_count - 1) {
  23a986:	eb 00                	jmp    23a988 <udivmod+0x448>
            }
            sr += 1;
  23a988:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
  23a98b:	83 c0 01             	add    eax,0x1
  23a98e:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
            // 1 <= sr <= SingleInt.bit_count
            // q.all = a << (DoubleInt.bit_count - sr);
            // r.all = a >> sr;
            q[low] = 0;
  23a991:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
            if (sr == SingleInt.bit_count) {
  23a998:	83 7d c4 20          	cmp    DWORD PTR [rbp-0x3c],0x20
  23a99c:	75 15                	jne    23a9b3 <udivmod+0x473>
                q[high] = n[low];
  23a99e:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  23a9a1:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
                r[high] = 0;
  23a9a4:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
                r[low] = n[high];
  23a9ab:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  23a9ae:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
            if (sr == SingleInt.bit_count) {
  23a9b1:	eb 51                	jmp    23aa04 <udivmod+0x4c4>
            } else {
                r[high] = n[high] >> @intCast(Log2SingleInt, sr);
  23a9b3:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  23a9b6:	8a 4d c4             	mov    cl,BYTE PTR [rbp-0x3c]
  23a9b9:	88 ca                	mov    dl,cl
  23a9bb:	c4 e2 6b f7 c0       	shrx   eax,eax,edx
  23a9c0:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
                r[low] = (n[high] << @intCast(Log2SingleInt, SingleInt.bit_count - sr)) | (n[low] >> @intCast(Log2SingleInt, sr));
  23a9c3:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  23a9c6:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
  23a9c9:	8b 75 c4             	mov    esi,DWORD PTR [rbp-0x3c]
  23a9cc:	bf 20 00 00 00       	mov    edi,0x20
  23a9d1:	41 89 f8             	mov    r8d,edi
  23a9d4:	41 29 f0             	sub    r8d,esi
  23a9d7:	44 88 c1             	mov    cl,r8b
  23a9da:	41 88 c8             	mov    r8b,cl
  23a9dd:	c4 e2 39 f7 d2       	shlx   edx,edx,r8d
  23a9e2:	40 88 f1             	mov    cl,sil
  23a9e5:	40 88 ce             	mov    sil,cl
  23a9e8:	c4 e2 4b f7 c0       	shrx   eax,eax,esi
  23a9ed:	09 c2                	or     edx,eax
  23a9ef:	89 55 c8             	mov    DWORD PTR [rbp-0x38],edx
                q[high] = n[low] << @intCast(Log2SingleInt, SingleInt.bit_count - sr);
  23a9f2:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  23a9f5:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
  23a9f8:	29 d7                	sub    edi,edx
  23a9fa:	83 e7 1f             	and    edi,0x1f
  23a9fd:	89 f9                	mov    ecx,edi
  23a9ff:	d3 e0                	shl    eax,cl
  23aa01:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
        if (d[high] == 0) {
  23aa04:	eb 00                	jmp    23aa06 <udivmod+0x4c6>
    if (d[low] == 0) {
  23aa06:	eb 00                	jmp    23aa08 <udivmod+0x4c8>
    // Not a special case
    // q and r are initialized with:
    // q.all = a << (DoubleInt.bit_count - sr);
    // r.all = a >> sr;
    // 1 <= sr <= DoubleInt.bit_count - 1
    var carry: u32 = 0;
  23aa08:	c7 85 7c ff ff ff 00 	mov    DWORD PTR [rbp-0x84],0x0
  23aa0f:	00 00 00 
    var r_all: DoubleInt = undefined;
    while (sr > 0) : (sr -= 1) {
  23aa12:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
  23aa16:	0f 86 af 00 00 00    	jbe    23aacb <udivmod+0x58b>
        // r:q = ((r:q)  << 1) | carry
        r[high] = (r[high] << 1) | (r[low] >> (SingleInt.bit_count - 1));
  23aa1c:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  23aa1f:	c1 e0 01             	shl    eax,0x1
  23aa22:	8b 4d c8             	mov    ecx,DWORD PTR [rbp-0x38]
  23aa25:	c1 e9 1f             	shr    ecx,0x1f
  23aa28:	09 c8                	or     eax,ecx
  23aa2a:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
        r[low] = (r[low] << 1) | (q[high] >> (SingleInt.bit_count - 1));
  23aa2d:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  23aa30:	c1 e0 01             	shl    eax,0x1
  23aa33:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
  23aa36:	c1 e9 1f             	shr    ecx,0x1f
  23aa39:	09 c8                	or     eax,ecx
  23aa3b:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
        q[high] = (q[high] << 1) | (q[low] >> (SingleInt.bit_count - 1));
  23aa3e:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
  23aa41:	c1 e0 01             	shl    eax,0x1
  23aa44:	8b 4d d0             	mov    ecx,DWORD PTR [rbp-0x30]
  23aa47:	c1 e9 1f             	shr    ecx,0x1f
  23aa4a:	09 c8                	or     eax,ecx
  23aa4c:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
        q[low] = (q[low] << 1) | carry;
  23aa4f:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
  23aa52:	c1 e0 01             	shl    eax,0x1
  23aa55:	0b 85 7c ff ff ff    	or     eax,DWORD PTR [rbp-0x84]
  23aa5b:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
        // if (r.all >= b)
        // {
        //     r.all -= b;
        //      carry = 1;
        // }
        r_all = @ptrCast(*align(@alignOf(SingleInt)) DoubleInt, &r[0]).*; // TODO issue #421
  23aa5e:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  23aa62:	48 89 95 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdx
        const s: SignedDoubleInt = @intCast(SignedDoubleInt, b -% r_all -% 1) >> (DoubleInt.bit_count - 1);
  23aa69:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  23aa6d:	48 2b 95 70 ff ff ff 	sub    rdx,QWORD PTR [rbp-0x90]
  23aa74:	48 83 ea 01          	sub    rdx,0x1
  23aa78:	48 c1 fa 3f          	sar    rdx,0x3f
  23aa7c:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
        carry = @intCast(u32, s & 1);
  23aa83:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  23aa8a:	48 83 e2 01          	and    rdx,0x1
  23aa8e:	89 d0                	mov    eax,edx
  23aa90:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
        r_all -= b & @bitCast(DoubleInt, s);
  23aa96:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  23aa9d:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  23aaa1:	48 23 b5 68 ff ff ff 	and    rsi,QWORD PTR [rbp-0x98]
  23aaa8:	48 29 f2             	sub    rdx,rsi
  23aaab:	48 89 95 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdx
        r = @ptrCast(*[2]SingleInt, &r_all).*; // TODO issue #421
  23aab2:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  23aab9:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
    while (sr > 0) : (sr -= 1) {
  23aabd:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
  23aac0:	83 e8 01             	sub    eax,0x1
  23aac3:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
  23aac6:	e9 47 ff ff ff       	jmp    23aa12 <udivmod+0x4d2>
    }
    const q_all = ((@ptrCast(*align(@alignOf(SingleInt)) DoubleInt, &q[0]).*) << 1) | carry; // TODO issue #421
  23aacb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23aacf:	48 c1 e0 01          	shl    rax,0x1
  23aad3:	8b 8d 7c ff ff ff    	mov    ecx,DWORD PTR [rbp-0x84]
  23aad9:	89 ca                	mov    edx,ecx
  23aadb:	48 09 d0             	or     rax,rdx
  23aade:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
    if (maybe_rem) |rem| {
  23aae5:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
  23aaea:	74 1e                	je     23ab0a <udivmod+0x5ca>
  23aaec:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  23aaf0:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        rem.* = r_all;
  23aaf7:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
  23aafe:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
  23ab05:	48 89 08             	mov    QWORD PTR [rax],rcx
    if (maybe_rem) |rem| {
  23ab08:	eb 02                	jmp    23ab0c <udivmod+0x5cc>
  23ab0a:	eb 00                	jmp    23ab0c <udivmod+0x5cc>
    }
    return q_all;
  23ab0c:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  23ab13:	48 83 c4 40          	add    rsp,0x40
  23ab17:	5d                   	pop    rbp
  23ab18:	c3                   	ret    
  23ab19:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

000000000023ab20 <__udivsi3>:
    const d = __udivsi3(a, b);
    rem.* = @bitCast(u32, @bitCast(i32, a) -% (@bitCast(i32, d) * @bitCast(i32, b)));
    return d;
}

extern fn __udivsi3(n: u32, d: u32) u32 {
  23ab20:	55                   	push   rbp
  23ab21:	48 89 e5             	mov    rbp,rsp
  23ab24:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  23ab27:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
    @setRuntimeSafety(is_test);

    const n_uword_bits: c_uint = u32.bit_count;
  23ab2a:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [rbp-0xc],0x20
    // special cases
    if (d == 0) return 0; // ?!
  23ab31:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
  23ab35:	75 04                	jne    23ab3b <__udivsi3+0x1b>
  23ab37:	31 c0                	xor    eax,eax
  23ab39:	5d                   	pop    rbp
  23ab3a:	c3                   	ret    
  23ab3b:	eb 00                	jmp    23ab3d <__udivsi3+0x1d>
    if (n == 0) return 0;
  23ab3d:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
  23ab41:	75 04                	jne    23ab47 <__udivsi3+0x27>
  23ab43:	31 c0                	xor    eax,eax
  23ab45:	5d                   	pop    rbp
  23ab46:	c3                   	ret    
  23ab47:	eb 00                	jmp    23ab49 <__udivsi3+0x29>
    var sr = @bitCast(c_uint, c_int(@clz(d)) - c_int(@clz(n)));
  23ab49:	f3 0f bd 45 f8       	lzcnt  eax,DWORD PTR [rbp-0x8]
  23ab4e:	f3 0f bd 4d fc       	lzcnt  ecx,DWORD PTR [rbp-0x4]
  23ab53:	29 c8                	sub    eax,ecx
  23ab55:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    // 0 <= sr <= n_uword_bits - 1 or sr large
    if (sr > n_uword_bits - 1) {
  23ab58:	83 7d f0 1f          	cmp    DWORD PTR [rbp-0x10],0x1f
  23ab5c:	76 04                	jbe    23ab62 <__udivsi3+0x42>
  23ab5e:	31 c0                	xor    eax,eax
        // d > r
        return 0;
  23ab60:	5d                   	pop    rbp
  23ab61:	c3                   	ret    
    if (sr > n_uword_bits - 1) {
  23ab62:	eb 00                	jmp    23ab64 <__udivsi3+0x44>
    }
    if (sr == n_uword_bits - 1) {
  23ab64:	83 7d f0 1f          	cmp    DWORD PTR [rbp-0x10],0x1f
  23ab68:	75 05                	jne    23ab6f <__udivsi3+0x4f>
        // d == 1
        return n;
  23ab6a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  23ab6d:	5d                   	pop    rbp
  23ab6e:	c3                   	ret    
    }
    sr += 1;
  23ab6f:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  23ab72:	83 c0 01             	add    eax,0x1
  23ab75:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    // 1 <= sr <= n_uword_bits - 1
    // Not a special case
    var q: u32 = n << @intCast(u5, n_uword_bits - sr);
  23ab78:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  23ab7b:	8b 4d f0             	mov    ecx,DWORD PTR [rbp-0x10]
  23ab7e:	ba 20 00 00 00       	mov    edx,0x20
  23ab83:	29 ca                	sub    edx,ecx
  23ab85:	40 88 d6             	mov    sil,dl
  23ab88:	40 88 f1             	mov    cl,sil
  23ab8b:	c4 e2 71 f7 c0       	shlx   eax,eax,ecx
  23ab90:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    var r: u32 = n >> @intCast(u5, sr);
  23ab93:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  23ab96:	8b 4d f0             	mov    ecx,DWORD PTR [rbp-0x10]
  23ab99:	83 e1 1f             	and    ecx,0x1f
  23ab9c:	d3 e8                	shr    eax,cl
  23ab9e:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
    var carry: u32 = 0;
  23aba1:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
    while (sr > 0) : (sr -= 1) {
  23aba8:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
  23abac:	76 4e                	jbe    23abfc <__udivsi3+0xdc>
        // r:q = ((r:q)  << 1) | carry
        r = (r << 1) | (q >> @intCast(u5, n_uword_bits - 1));
  23abae:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  23abb1:	c1 e0 01             	shl    eax,0x1
  23abb4:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
  23abb7:	c1 e9 1f             	shr    ecx,0x1f
  23abba:	09 c8                	or     eax,ecx
  23abbc:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
        q = (q << 1) | carry;
  23abbf:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  23abc2:	c1 e0 01             	shl    eax,0x1
  23abc5:	0b 45 e4             	or     eax,DWORD PTR [rbp-0x1c]
  23abc8:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
        // if (r.all >= d.all)
        // {
        //      r.all -= d.all;
        //      carry = 1;
        // }
        const s = @intCast(i32, d -% r -% 1) >> @intCast(u5, n_uword_bits - 1);
  23abcb:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  23abce:	2b 45 e8             	sub    eax,DWORD PTR [rbp-0x18]
  23abd1:	83 e8 01             	sub    eax,0x1
  23abd4:	c1 f8 1f             	sar    eax,0x1f
  23abd7:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
        carry = @intCast(u32, s & 1);
  23abda:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  23abdd:	83 e0 01             	and    eax,0x1
  23abe0:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
        r -= d & @bitCast(u32, s);
  23abe3:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  23abe6:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
  23abe9:	23 4d e0             	and    ecx,DWORD PTR [rbp-0x20]
  23abec:	29 c8                	sub    eax,ecx
  23abee:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
    while (sr > 0) : (sr -= 1) {
  23abf1:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  23abf4:	83 e8 01             	sub    eax,0x1
  23abf7:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
  23abfa:	eb ac                	jmp    23aba8 <__udivsi3+0x88>
    }
    q = (q << 1) | carry;
  23abfc:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  23abff:	c1 e0 01             	shl    eax,0x1
  23ac02:	0b 45 e4             	or     eax,DWORD PTR [rbp-0x1c]
  23ac05:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    return q;
  23ac08:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  23ac0b:	5d                   	pop    rbp
  23ac0c:	c3                   	ret    
  23ac0d:	0f 1f 00             	nop    DWORD PTR [rax]

000000000023ac10 <__udivdi3>:
extern fn __udivdi3(a: u64, b: u64) u64 {
  23ac10:	55                   	push   rbp
  23ac11:	48 89 e5             	mov    rbp,rsp
  23ac14:	48 83 ec 10          	sub    rsp,0x10
  23ac18:	31 c0                	xor    eax,eax
  23ac1a:	89 c2                	mov    edx,eax
  23ac1c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  23ac20:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    return __udivmoddi4(a, b, null);
  23ac24:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  23ac28:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  23ac2c:	e8 8f bb ff ff       	call   2367c0 <__udivmoddi4>
  23ac31:	48 83 c4 10          	add    rsp,0x10
  23ac35:	5d                   	pop    rbp
  23ac36:	c3                   	ret    
  23ac37:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  23ac3e:	00 00 

000000000023ac40 <__umoddi3>:
extern fn __umoddi3(a: u64, b: u64) u64 {
  23ac40:	55                   	push   rbp
  23ac41:	48 89 e5             	mov    rbp,rsp
  23ac44:	48 83 ec 20          	sub    rsp,0x20
  23ac48:	48 8d 55 e8          	lea    rdx,[rbp-0x18]
  23ac4c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  23ac50:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    _ = __udivmoddi4(a, b, &r);
  23ac54:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  23ac58:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  23ac5c:	e8 5f bb ff ff       	call   2367c0 <__udivmoddi4>
    return r;
  23ac61:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  23ac65:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  23ac69:	48 89 d0             	mov    rax,rdx
  23ac6c:	48 83 c4 20          	add    rsp,0x20
  23ac70:	5d                   	pop    rbp
  23ac71:	c3                   	ret    
  23ac72:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  23ac79:	1f 84 00 00 00 00 00 

000000000023ac80 <__udivmodsi4>:
extern fn __udivmodsi4(a: u32, b: u32, rem: *u32) u32 {
  23ac80:	55                   	push   rbp
  23ac81:	48 89 e5             	mov    rbp,rsp
  23ac84:	48 83 ec 20          	sub    rsp,0x20
  23ac88:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  23ac8b:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
  23ac8e:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
    const d = __udivsi3(a, b);
  23ac92:	8b 7d fc             	mov    edi,DWORD PTR [rbp-0x4]
  23ac95:	8b 75 f8             	mov    esi,DWORD PTR [rbp-0x8]
  23ac98:	e8 83 fe ff ff       	call   23ab20 <__udivsi3>
  23ac9d:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    rem.* = @bitCast(u32, @bitCast(i32, a) -% (@bitCast(i32, d) * @bitCast(i32, b)));
  23aca0:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  23aca4:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  23aca7:	8b 75 ec             	mov    esi,DWORD PTR [rbp-0x14]
  23acaa:	0f af 75 f8          	imul   esi,DWORD PTR [rbp-0x8]
  23acae:	29 f0                	sub    eax,esi
  23acb0:	89 02                	mov    DWORD PTR [rdx],eax
    return d;
  23acb2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  23acb5:	48 83 c4 20          	add    rsp,0x20
  23acb9:	5d                   	pop    rbp
  23acba:	c3                   	ret    
  23acbb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000023acc0 <isArmArch>:
fn isArmArch() bool {
  23acc0:	55                   	push   rbp
  23acc1:	48 89 e5             	mov    rbp,rsp
    return switch (builtin.arch) {
  23acc4:	31 c0                	xor    eax,eax
  23acc6:	88 c1                	mov    cl,al
  23acc8:	88 c8                	mov    al,cl
  23acca:	5d                   	pop    rbp
  23accb:	c3                   	ret    
  23accc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000023acd0 <__divti3>:
const udivmod = @import("udivmod.zig").udivmod;
const builtin = @import("builtin");
const compiler_rt = @import("index.zig");

pub extern fn __divti3(a: i128, b: i128) i128 {
  23acd0:	55                   	push   rbp
  23acd1:	48 89 e5             	mov    rbp,rsp
  23acd4:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  23acdb:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  23acdf:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  23ace3:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  23ace7:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
    @setRuntimeSafety(builtin.is_test);

    const s_a = a >> (i128.bit_count - 1);
  23aceb:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  23acef:	48 c1 f9 3f          	sar    rcx,0x3f
  23acf3:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  23acf7:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    const s_b = b >> (i128.bit_count - 1);
  23acfb:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  23acff:	48 c1 f9 3f          	sar    rcx,0x3f
  23ad03:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  23ad07:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx

    const an = (a ^ s_a) -% s_a;
  23ad0b:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  23ad0f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  23ad13:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  23ad17:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  23ad1b:	48 31 fa             	xor    rdx,rdi
  23ad1e:	48 31 f1             	xor    rcx,rsi
  23ad21:	48 29 f1             	sub    rcx,rsi
  23ad24:	48 19 fa             	sbb    rdx,rdi
  23ad27:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
  23ad2b:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
    const bn = (b ^ s_b) -% s_b;
  23ad2f:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  23ad33:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  23ad37:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
  23ad3b:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  23ad3f:	48 31 fa             	xor    rdx,rdi
  23ad42:	48 31 f1             	xor    rcx,rsi
  23ad45:	48 29 f1             	sub    rcx,rsi
  23ad48:	48 19 fa             	sbb    rdx,rdi
  23ad4b:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
  23ad4f:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx

    const r = udivmod(u128, @bitCast(u128, an), @bitCast(u128, bn), null);
  23ad53:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  23ad57:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  23ad5b:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  23ad5f:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  23ad63:	31 c0                	xor    eax,eax
  23ad65:	41 89 c0             	mov    r8d,eax
  23ad68:	e8 53 00 00 00       	call   23adc0 <udivmod.14>
  23ad6d:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  23ad71:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
    const s = s_a ^ s_b;
  23ad75:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23ad79:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  23ad7d:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  23ad81:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  23ad85:	48 31 d0             	xor    rax,rdx
  23ad88:	48 31 f1             	xor    rcx,rsi
  23ad8b:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
  23ad8f:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
    return (@bitCast(i128, r) ^ s) -% s;
  23ad93:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  23ad97:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  23ad9b:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
  23ad9f:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
  23ada3:	48 31 f1             	xor    rcx,rsi
  23ada6:	48 31 d0             	xor    rax,rdx
  23ada9:	48 29 d0             	sub    rax,rdx
  23adac:	48 19 f1             	sbb    rcx,rsi
  23adaf:	48 89 ca             	mov    rdx,rcx
  23adb2:	48 81 c4 80 00 00 00 	add    rsp,0x80
  23adb9:	5d                   	pop    rbp
  23adba:	c3                   	ret    
  23adbb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000023adc0 <udivmod.14>:
pub fn udivmod(comptime DoubleInt: type, a: DoubleInt, b: DoubleInt, maybe_rem: ?*DoubleInt) DoubleInt {
  23adc0:	55                   	push   rbp
  23adc1:	48 89 e5             	mov    rbp,rsp
  23adc4:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  23adcb:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  23adcf:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  23add3:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  23add7:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  23addb:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
    const n = @ptrCast(*const [2]SingleInt, &a).*; // TODO issue #421
  23addf:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  23ade3:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  23ade7:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  23adeb:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    const d = @ptrCast(*const [2]SingleInt, &b).*; // TODO issue #421
  23adef:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  23adf3:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
  23adf7:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  23adfb:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
    var q: [2]SingleInt = undefined;
  23adff:	48 8b 0d aa 54 fc ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffc54aa]        # 2002b0 <__unnamed_100>
  23ae06:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  23ae0a:	48 8b 0d a7 54 fc ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffc54a7]        # 2002b8 <__unnamed_100+0x8>
  23ae11:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
    var r: [2]SingleInt = undefined;
  23ae15:	48 8b 0d 94 54 fc ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffc5494]        # 2002b0 <__unnamed_100>
  23ae1c:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
  23ae20:	48 8b 0d 91 54 fc ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffc5491]        # 2002b8 <__unnamed_100+0x8>
  23ae27:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
    if (n[high] == 0) {
  23ae2b:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
  23ae30:	0f 85 af 00 00 00    	jne    23aee5 <udivmod.14+0x125>
        if (d[high] == 0) {
  23ae36:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
  23ae3b:	75 6d                	jne    23aeaa <udivmod.14+0xea>
            if (maybe_rem) |rem| {
  23ae3d:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  23ae42:	74 4a                	je     23ae8e <udivmod.14+0xce>
  23ae44:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  23ae48:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
                rem.* = n[low] % d[low];
  23ae4c:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  23ae50:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  23ae54:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  23ae58:	31 f6                	xor    esi,esi
  23ae5a:	89 f7                	mov    edi,esi
  23ae5c:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
  23ae63:	48 89 c8             	mov    rax,rcx
  23ae66:	48 89 95 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rdx
  23ae6d:	48 89 fa             	mov    rdx,rdi
  23ae70:	48 8b 8d 00 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x100]
  23ae77:	48 f7 f1             	div    rcx
  23ae7a:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  23ae81:	48 89 10             	mov    QWORD PTR [rax],rdx
  23ae84:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
  23ae8b:	00 
            if (maybe_rem) |rem| {
  23ae8c:	eb 02                	jmp    23ae90 <udivmod.14+0xd0>
  23ae8e:	eb 00                	jmp    23ae90 <udivmod.14+0xd0>
            return n[low] / d[low];
  23ae90:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  23ae94:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  23ae98:	31 d2                	xor    edx,edx
  23ae9a:	48 f7 f1             	div    rcx
  23ae9d:	31 f6                	xor    esi,esi
  23ae9f:	89 f2                	mov    edx,esi
  23aea1:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  23aea8:	5d                   	pop    rbp
  23aea9:	c3                   	ret    
        if (d[high] == 0) {
  23aeaa:	eb 00                	jmp    23aeac <udivmod.14+0xec>
        if (maybe_rem) |rem| {
  23aeac:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  23aeb1:	74 1d                	je     23aed0 <udivmod.14+0x110>
  23aeb3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  23aeb7:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
            rem.* = n[low];
  23aebb:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  23aebf:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  23aec3:	48 89 08             	mov    QWORD PTR [rax],rcx
  23aec6:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
  23aecd:	00 
        if (maybe_rem) |rem| {
  23aece:	eb 02                	jmp    23aed2 <udivmod.14+0x112>
  23aed0:	eb 00                	jmp    23aed2 <udivmod.14+0x112>
        return 0;
  23aed2:	31 c0                	xor    eax,eax
  23aed4:	89 c1                	mov    ecx,eax
  23aed6:	48 89 c8             	mov    rax,rcx
  23aed9:	48 89 ca             	mov    rdx,rcx
  23aedc:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  23aee3:	5d                   	pop    rbp
  23aee4:	c3                   	ret    
    if (n[high] == 0) {
  23aee5:	eb 00                	jmp    23aee7 <udivmod.14+0x127>
    if (d[low] == 0) {
  23aee7:	48 83 7d b8 00       	cmp    QWORD PTR [rbp-0x48],0x0
  23aeec:	0f 85 46 02 00 00    	jne    23b138 <udivmod.14+0x378>
        if (d[high] == 0) {
  23aef2:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
  23aef7:	75 73                	jne    23af6c <udivmod.14+0x1ac>
            if (maybe_rem) |rem| {
  23aef9:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  23aefe:	74 50                	je     23af50 <udivmod.14+0x190>
  23af00:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  23af04:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
                rem.* = n[high] % d[low];
  23af0b:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  23af12:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  23af16:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  23af1a:	31 f6                	xor    esi,esi
  23af1c:	89 f7                	mov    edi,esi
  23af1e:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  23af25:	48 89 c8             	mov    rax,rcx
  23af28:	48 89 95 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rdx
  23af2f:	48 89 fa             	mov    rdx,rdi
  23af32:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  23af39:	48 f7 f1             	div    rcx
  23af3c:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  23af43:	48 89 10             	mov    QWORD PTR [rax],rdx
  23af46:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
  23af4d:	00 
            if (maybe_rem) |rem| {
  23af4e:	eb 02                	jmp    23af52 <udivmod.14+0x192>
  23af50:	eb 00                	jmp    23af52 <udivmod.14+0x192>
            return n[high] / d[low];
  23af52:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23af56:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  23af5a:	31 d2                	xor    edx,edx
  23af5c:	48 f7 f1             	div    rcx
  23af5f:	31 f6                	xor    esi,esi
  23af61:	89 f2                	mov    edx,esi
  23af63:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  23af6a:	5d                   	pop    rbp
  23af6b:	c3                   	ret    
        if (d[high] == 0) {
  23af6c:	eb 00                	jmp    23af6e <udivmod.14+0x1ae>
        if (n[low] == 0) {
  23af6e:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
  23af73:	75 5f                	jne    23afd4 <udivmod.14+0x214>
            if (maybe_rem) |rem| {
  23af75:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  23af7a:	74 3c                	je     23afb8 <udivmod.14+0x1f8>
  23af7c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  23af80:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
                r[high] = n[high] % d[high];
  23af87:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23af8b:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  23af8f:	31 d2                	xor    edx,edx
  23af91:	48 f7 f1             	div    rcx
  23af94:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
                r[low] = 0;
  23af98:	48 c7 45 98 00 00 00 	mov    QWORD PTR [rbp-0x68],0x0
  23af9f:	00 
                rem.* = @ptrCast(*align(@alignOf(SingleInt)) DoubleInt, &r[0]).*; // TODO issue #421
  23afa0:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  23afa7:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  23afab:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  23afaf:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
  23afb3:	48 89 08             	mov    QWORD PTR [rax],rcx
            if (maybe_rem) |rem| {
  23afb6:	eb 02                	jmp    23afba <udivmod.14+0x1fa>
  23afb8:	eb 00                	jmp    23afba <udivmod.14+0x1fa>
            return n[high] / d[high];
  23afba:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23afbe:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  23afc2:	31 d2                	xor    edx,edx
  23afc4:	48 f7 f1             	div    rcx
  23afc7:	31 f6                	xor    esi,esi
  23afc9:	89 f2                	mov    edx,esi
  23afcb:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  23afd2:	5d                   	pop    rbp
  23afd3:	c3                   	ret    
        if (n[low] == 0) {
  23afd4:	eb 00                	jmp    23afd6 <udivmod.14+0x216>
        if ((d[high] & (d[high] - 1)) == 0) {
  23afd6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  23afda:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  23afde:	48 83 e9 01          	sub    rcx,0x1
  23afe2:	48 21 c8             	and    rax,rcx
  23afe5:	48 83 f8 00          	cmp    rax,0x0
  23afe9:	75 67                	jne    23b052 <udivmod.14+0x292>
            if (maybe_rem) |rem| {
  23afeb:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  23aff0:	74 3e                	je     23b030 <udivmod.14+0x270>
  23aff2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  23aff6:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
                r[low] = n[low];
  23affd:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  23b001:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
                r[high] = n[high] & (d[high] - 1);
  23b005:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23b009:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  23b00d:	48 83 c1 ff          	add    rcx,0xffffffffffffffff
  23b011:	48 21 c8             	and    rax,rcx
  23b014:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
                rem.* = @ptrCast(*align(@alignOf(SingleInt)) DoubleInt, &r[0]).*; // TODO issue #421
  23b018:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  23b01f:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  23b023:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  23b027:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
  23b02b:	48 89 08             	mov    QWORD PTR [rax],rcx
            if (maybe_rem) |rem| {
  23b02e:	eb 02                	jmp    23b032 <udivmod.14+0x272>
  23b030:	eb 00                	jmp    23b032 <udivmod.14+0x272>
            return n[high] >> @intCast(Log2SingleInt, @ctz(d[high]));
  23b032:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23b036:	f3 48 0f bc 4d c0    	tzcnt  rcx,QWORD PTR [rbp-0x40]
  23b03c:	88 ca                	mov    dl,cl
  23b03e:	88 d1                	mov    cl,dl
  23b040:	c4 e2 f3 f7 c0       	shrx   rax,rax,rcx
  23b045:	31 f6                	xor    esi,esi
  23b047:	89 f2                	mov    edx,esi
  23b049:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  23b050:	5d                   	pop    rbp
  23b051:	c3                   	ret    
        if ((d[high] & (d[high] - 1)) == 0) {
  23b052:	eb 00                	jmp    23b054 <udivmod.14+0x294>
        sr = @bitCast(c_uint, c_int(@clz(d[high])) - c_int(@clz(n[high])));
  23b054:	f3 48 0f bd 45 c0    	lzcnt  rax,QWORD PTR [rbp-0x40]
  23b05a:	89 c1                	mov    ecx,eax
  23b05c:	f3 48 0f bd 45 d0    	lzcnt  rax,QWORD PTR [rbp-0x30]
  23b062:	89 c2                	mov    edx,eax
  23b064:	29 d1                	sub    ecx,edx
  23b066:	89 4d 94             	mov    DWORD PTR [rbp-0x6c],ecx
        if (sr > SingleInt.bit_count - 2) {
  23b069:	83 7d 94 3e          	cmp    DWORD PTR [rbp-0x6c],0x3e
  23b06d:	76 3f                	jbe    23b0ae <udivmod.14+0x2ee>
            if (maybe_rem) |rem| {
  23b06f:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  23b074:	74 23                	je     23b099 <udivmod.14+0x2d9>
  23b076:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  23b07a:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
                rem.* = a;
  23b081:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  23b088:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  23b08c:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  23b090:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
  23b094:	48 89 08             	mov    QWORD PTR [rax],rcx
            if (maybe_rem) |rem| {
  23b097:	eb 02                	jmp    23b09b <udivmod.14+0x2db>
  23b099:	eb 00                	jmp    23b09b <udivmod.14+0x2db>
            return 0;
  23b09b:	31 c0                	xor    eax,eax
  23b09d:	89 c1                	mov    ecx,eax
  23b09f:	48 89 c8             	mov    rax,rcx
  23b0a2:	48 89 ca             	mov    rdx,rcx
  23b0a5:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  23b0ac:	5d                   	pop    rbp
  23b0ad:	c3                   	ret    
        if (sr > SingleInt.bit_count - 2) {
  23b0ae:	eb 00                	jmp    23b0b0 <udivmod.14+0x2f0>
        sr += 1;
  23b0b0:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
  23b0b3:	83 c0 01             	add    eax,0x1
  23b0b6:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
        q[low] = 0;
  23b0b9:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
  23b0c0:	00 
        q[high] = n[low] << @intCast(Log2SingleInt, SingleInt.bit_count - sr);
  23b0c1:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  23b0c5:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
  23b0c8:	ba 40 00 00 00       	mov    edx,0x40
  23b0cd:	89 d6                	mov    esi,edx
  23b0cf:	29 c6                	sub    esi,eax
  23b0d1:	40 88 f7             	mov    dil,sil
  23b0d4:	41 88 f8             	mov    r8b,dil
  23b0d7:	c4 e2 b9 f7 c9       	shlx   rcx,rcx,r8
  23b0dc:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
        r[high] = n[high] >> @intCast(Log2SingleInt, sr);
  23b0e0:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  23b0e4:	40 8a 7d 94          	mov    dil,BYTE PTR [rbp-0x6c]
  23b0e8:	41 88 f8             	mov    r8b,dil
  23b0eb:	c4 e2 bb f7 c9       	shrx   rcx,rcx,r8
  23b0f0:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
        r[low] = (n[high] << @intCast(Log2SingleInt, SingleInt.bit_count - sr)) | (n[low] >> @intCast(Log2SingleInt, sr));
  23b0f4:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  23b0f8:	4c 8b 45 d0          	mov    r8,QWORD PTR [rbp-0x30]
  23b0fc:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
  23b0ff:	41 89 c1             	mov    r9d,eax
  23b102:	44 89 c8             	mov    eax,r9d
  23b105:	29 c2                	sub    edx,eax
  23b107:	40 88 d7             	mov    dil,dl
  23b10a:	41 88 f9             	mov    r9b,dil
  23b10d:	c4 42 b1 f7 c0       	shlx   r8,r8,r9
  23b112:	83 e0 3f             	and    eax,0x3f
  23b115:	41 89 c1             	mov    r9d,eax
  23b118:	48 89 8d e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rcx
  23b11f:	4c 89 c9             	mov    rcx,r9
  23b122:	4c 8b 8d e8 fe ff ff 	mov    r9,QWORD PTR [rbp-0x118]
  23b129:	49 d3 e9             	shr    r9,cl
  23b12c:	4d 09 c8             	or     r8,r9
  23b12f:	4c 89 45 98          	mov    QWORD PTR [rbp-0x68],r8
    if (d[low] == 0) {
  23b133:	e9 df 02 00 00       	jmp    23b417 <udivmod.14+0x657>
        if (d[high] == 0) {
  23b138:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
  23b13d:	0f 85 e9 01 00 00    	jne    23b32c <udivmod.14+0x56c>
            if ((d[low] & (d[low] - 1)) == 0) {
  23b143:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  23b147:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  23b14b:	48 83 e9 01          	sub    rcx,0x1
  23b14f:	48 21 c8             	and    rax,rcx
  23b152:	48 83 f8 00          	cmp    rax,0x0
  23b156:	0f 85 ae 00 00 00    	jne    23b20a <udivmod.14+0x44a>
                if (maybe_rem) |rem| {
  23b15c:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  23b161:	74 2e                	je     23b191 <udivmod.14+0x3d1>
  23b163:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  23b167:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
                    rem.* = n[low] & (d[low] - 1);
  23b16e:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
  23b175:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  23b179:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  23b17d:	48 83 c2 ff          	add    rdx,0xffffffffffffffff
  23b181:	48 21 d1             	and    rcx,rdx
  23b184:	48 89 08             	mov    QWORD PTR [rax],rcx
  23b187:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
  23b18e:	00 
                if (maybe_rem) |rem| {
  23b18f:	eb 02                	jmp    23b193 <udivmod.14+0x3d3>
  23b191:	eb 00                	jmp    23b193 <udivmod.14+0x3d3>
                if (d[low] == 1) {
  23b193:	48 83 7d b8 01       	cmp    QWORD PTR [rbp-0x48],0x1
  23b198:	75 11                	jne    23b1ab <udivmod.14+0x3eb>
                    return a;
  23b19a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  23b19e:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  23b1a2:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  23b1a9:	5d                   	pop    rbp
  23b1aa:	c3                   	ret    
                if (d[low] == 1) {
  23b1ab:	eb 00                	jmp    23b1ad <udivmod.14+0x3ed>
                sr = @ctz(d[low]);
  23b1ad:	f3 48 0f bc 45 b8    	tzcnt  rax,QWORD PTR [rbp-0x48]
  23b1b3:	89 c1                	mov    ecx,eax
  23b1b5:	89 4d 94             	mov    DWORD PTR [rbp-0x6c],ecx
                q[high] = n[high] >> @intCast(Log2SingleInt, sr);
  23b1b8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23b1bc:	8a 55 94             	mov    dl,BYTE PTR [rbp-0x6c]
  23b1bf:	40 88 d6             	mov    sil,dl
  23b1c2:	c4 e2 cb f7 c0       	shrx   rax,rax,rsi
  23b1c7:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
                q[low] = (n[high] << @intCast(Log2SingleInt, SingleInt.bit_count - sr)) | (n[low] >> @intCast(Log2SingleInt, sr));
  23b1cb:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  23b1cf:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  23b1d3:	8b 4d 94             	mov    ecx,DWORD PTR [rbp-0x6c]
  23b1d6:	bf 40 00 00 00       	mov    edi,0x40
  23b1db:	29 cf                	sub    edi,ecx
  23b1dd:	40 88 fa             	mov    dl,dil
  23b1e0:	41 88 d0             	mov    r8b,dl
  23b1e3:	c4 e2 b9 f7 f6       	shlx   rsi,rsi,r8
  23b1e8:	88 ca                	mov    dl,cl
  23b1ea:	41 88 d0             	mov    r8b,dl
  23b1ed:	c4 e2 bb f7 c0       	shrx   rax,rax,r8
  23b1f2:	48 09 c6             	or     rsi,rax
  23b1f5:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
                return @ptrCast(*align(@alignOf(SingleInt)) DoubleInt, &q[0]).*; // TODO issue #421
  23b1f9:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  23b1fd:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  23b201:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  23b208:	5d                   	pop    rbp
  23b209:	c3                   	ret    
            if ((d[low] & (d[low] - 1)) == 0) {
  23b20a:	eb 00                	jmp    23b20c <udivmod.14+0x44c>
            sr = 1 + SingleInt.bit_count + c_uint(@clz(d[low])) - c_uint(@clz(n[high]));
  23b20c:	f3 48 0f bd 45 b8    	lzcnt  rax,QWORD PTR [rbp-0x48]
  23b212:	89 c1                	mov    ecx,eax
  23b214:	83 c1 41             	add    ecx,0x41
  23b217:	f3 48 0f bd 45 d0    	lzcnt  rax,QWORD PTR [rbp-0x30]
  23b21d:	89 c2                	mov    edx,eax
  23b21f:	29 d1                	sub    ecx,edx
  23b221:	89 4d 94             	mov    DWORD PTR [rbp-0x6c],ecx
            if (sr == SingleInt.bit_count) {
  23b224:	83 7d 94 40          	cmp    DWORD PTR [rbp-0x6c],0x40
  23b228:	75 25                	jne    23b24f <udivmod.14+0x48f>
                q[low] = 0;
  23b22a:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
  23b231:	00 
                q[high] = n[low];
  23b232:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  23b236:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
                r[high] = 0;
  23b23a:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
  23b241:	00 
                r[low] = n[high];
  23b242:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23b246:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
            if (sr == SingleInt.bit_count) {
  23b24a:	e9 d8 00 00 00       	jmp    23b327 <udivmod.14+0x567>
            } else if (sr < SingleInt.bit_count) {
  23b24f:	83 7d 94 40          	cmp    DWORD PTR [rbp-0x6c],0x40
  23b253:	73 68                	jae    23b2bd <udivmod.14+0x4fd>
                q[low] = 0;
  23b255:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
  23b25c:	00 
                q[high] = n[low] << @intCast(Log2SingleInt, SingleInt.bit_count - sr);
  23b25d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  23b261:	8b 4d 94             	mov    ecx,DWORD PTR [rbp-0x6c]
  23b264:	ba 40 00 00 00       	mov    edx,0x40
  23b269:	89 d6                	mov    esi,edx
  23b26b:	29 ce                	sub    esi,ecx
  23b26d:	40 88 f7             	mov    dil,sil
  23b270:	41 88 f8             	mov    r8b,dil
  23b273:	c4 e2 b9 f7 c0       	shlx   rax,rax,r8
  23b278:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
                r[high] = n[high] >> @intCast(Log2SingleInt, sr);
  23b27c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23b280:	40 8a 7d 94          	mov    dil,BYTE PTR [rbp-0x6c]
  23b284:	41 88 f8             	mov    r8b,dil
  23b287:	c4 e2 bb f7 c0       	shrx   rax,rax,r8
  23b28c:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
                r[low] = (n[high] << @intCast(Log2SingleInt, SingleInt.bit_count - sr)) | (n[low] >> @intCast(Log2SingleInt, sr));
  23b290:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  23b294:	4c 8b 45 d0          	mov    r8,QWORD PTR [rbp-0x30]
  23b298:	8b 4d 94             	mov    ecx,DWORD PTR [rbp-0x6c]
  23b29b:	41 89 c9             	mov    r9d,ecx
  23b29e:	44 89 c9             	mov    ecx,r9d
  23b2a1:	29 ca                	sub    edx,ecx
  23b2a3:	40 88 d7             	mov    dil,dl
  23b2a6:	41 88 f9             	mov    r9b,dil
  23b2a9:	c4 42 b1 f7 c0       	shlx   r8,r8,r9
  23b2ae:	83 e1 3f             	and    ecx,0x3f
  23b2b1:	48 d3 e8             	shr    rax,cl
  23b2b4:	49 09 c0             	or     r8,rax
  23b2b7:	4c 89 45 98          	mov    QWORD PTR [rbp-0x68],r8
            } else if (sr < SingleInt.bit_count) {
  23b2bb:	eb 68                	jmp    23b325 <udivmod.14+0x565>
                q[low] = n[low] << @intCast(Log2SingleInt, DoubleInt.bit_count - sr);
  23b2bd:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  23b2c1:	8b 4d 94             	mov    ecx,DWORD PTR [rbp-0x6c]
  23b2c4:	ba 80 00 00 00       	mov    edx,0x80
  23b2c9:	89 d6                	mov    esi,edx
  23b2cb:	29 ce                	sub    esi,ecx
  23b2cd:	40 88 f7             	mov    dil,sil
  23b2d0:	41 88 f8             	mov    r8b,dil
  23b2d3:	c4 e2 b9 f7 c0       	shlx   rax,rax,r8
  23b2d8:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
                q[high] = (n[high] << @intCast(Log2SingleInt, DoubleInt.bit_count - sr)) | (n[low] >> @intCast(Log2SingleInt, sr - SingleInt.bit_count));
  23b2dc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  23b2e0:	4c 8b 45 d0          	mov    r8,QWORD PTR [rbp-0x30]
  23b2e4:	8b 4d 94             	mov    ecx,DWORD PTR [rbp-0x6c]
  23b2e7:	29 ca                	sub    edx,ecx
  23b2e9:	40 88 d7             	mov    dil,dl
  23b2ec:	41 88 f9             	mov    r9b,dil
  23b2ef:	c4 42 b1 f7 c0       	shlx   r8,r8,r9
  23b2f4:	83 c1 c0             	add    ecx,0xffffffc0
  23b2f7:	40 88 cf             	mov    dil,cl
  23b2fa:	41 88 f9             	mov    r9b,dil
  23b2fd:	c4 e2 b3 f7 c0       	shrx   rax,rax,r9
  23b302:	49 09 c0             	or     r8,rax
  23b305:	4c 89 45 b0          	mov    QWORD PTR [rbp-0x50],r8
                r[high] = 0;
  23b309:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
  23b310:	00 
                r[low] = n[high] >> @intCast(Log2SingleInt, sr - SingleInt.bit_count);
  23b311:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23b315:	8b 4d 94             	mov    ecx,DWORD PTR [rbp-0x6c]
  23b318:	83 c1 c0             	add    ecx,0xffffffc0
  23b31b:	83 e1 3f             	and    ecx,0x3f
  23b31e:	48 d3 e8             	shr    rax,cl
  23b321:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
            if (sr == SingleInt.bit_count) {
  23b325:	eb 00                	jmp    23b327 <udivmod.14+0x567>
        if (d[high] == 0) {
  23b327:	e9 e9 00 00 00       	jmp    23b415 <udivmod.14+0x655>
            sr = @bitCast(c_uint, c_int(@clz(d[high])) - c_int(@clz(n[high])));
  23b32c:	f3 48 0f bd 45 c0    	lzcnt  rax,QWORD PTR [rbp-0x40]
  23b332:	89 c1                	mov    ecx,eax
  23b334:	f3 48 0f bd 45 d0    	lzcnt  rax,QWORD PTR [rbp-0x30]
  23b33a:	89 c2                	mov    edx,eax
  23b33c:	29 d1                	sub    ecx,edx
  23b33e:	89 4d 94             	mov    DWORD PTR [rbp-0x6c],ecx
            if (sr > SingleInt.bit_count - 1) {
  23b341:	83 7d 94 3f          	cmp    DWORD PTR [rbp-0x6c],0x3f
  23b345:	76 3f                	jbe    23b386 <udivmod.14+0x5c6>
                if (maybe_rem) |rem| {
  23b347:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  23b34c:	74 23                	je     23b371 <udivmod.14+0x5b1>
  23b34e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  23b352:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
                    rem.* = a;
  23b359:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  23b360:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  23b364:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  23b368:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
  23b36c:	48 89 08             	mov    QWORD PTR [rax],rcx
                if (maybe_rem) |rem| {
  23b36f:	eb 02                	jmp    23b373 <udivmod.14+0x5b3>
  23b371:	eb 00                	jmp    23b373 <udivmod.14+0x5b3>
                return 0;
  23b373:	31 c0                	xor    eax,eax
  23b375:	89 c1                	mov    ecx,eax
  23b377:	48 89 c8             	mov    rax,rcx
  23b37a:	48 89 ca             	mov    rdx,rcx
  23b37d:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  23b384:	5d                   	pop    rbp
  23b385:	c3                   	ret    
            if (sr > SingleInt.bit_count - 1) {
  23b386:	eb 00                	jmp    23b388 <udivmod.14+0x5c8>
            sr += 1;
  23b388:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
  23b38b:	83 c0 01             	add    eax,0x1
  23b38e:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
            q[low] = 0;
  23b391:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
  23b398:	00 
            if (sr == SingleInt.bit_count) {
  23b399:	83 7d 94 40          	cmp    DWORD PTR [rbp-0x6c],0x40
  23b39d:	75 1a                	jne    23b3b9 <udivmod.14+0x5f9>
                q[high] = n[low];
  23b39f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  23b3a3:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
                r[high] = 0;
  23b3a7:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
  23b3ae:	00 
                r[low] = n[high];
  23b3af:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23b3b3:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
            if (sr == SingleInt.bit_count) {
  23b3b7:	eb 5a                	jmp    23b413 <udivmod.14+0x653>
                r[high] = n[high] >> @intCast(Log2SingleInt, sr);
  23b3b9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23b3bd:	8a 4d 94             	mov    cl,BYTE PTR [rbp-0x6c]
  23b3c0:	88 ca                	mov    dl,cl
  23b3c2:	c4 e2 eb f7 c0       	shrx   rax,rax,rdx
  23b3c7:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
                r[low] = (n[high] << @intCast(Log2SingleInt, SingleInt.bit_count - sr)) | (n[low] >> @intCast(Log2SingleInt, sr));
  23b3cb:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  23b3cf:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  23b3d3:	8b 75 94             	mov    esi,DWORD PTR [rbp-0x6c]
  23b3d6:	bf 40 00 00 00       	mov    edi,0x40
  23b3db:	41 89 f8             	mov    r8d,edi
  23b3de:	41 29 f0             	sub    r8d,esi
  23b3e1:	44 88 c1             	mov    cl,r8b
  23b3e4:	41 88 c9             	mov    r9b,cl
  23b3e7:	c4 e2 b1 f7 d2       	shlx   rdx,rdx,r9
  23b3ec:	40 88 f1             	mov    cl,sil
  23b3ef:	41 88 c9             	mov    r9b,cl
  23b3f2:	c4 e2 b3 f7 c0       	shrx   rax,rax,r9
  23b3f7:	48 09 c2             	or     rdx,rax
  23b3fa:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
                q[high] = n[low] << @intCast(Log2SingleInt, SingleInt.bit_count - sr);
  23b3fe:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  23b402:	8b 75 94             	mov    esi,DWORD PTR [rbp-0x6c]
  23b405:	29 f7                	sub    edi,esi
  23b407:	83 e7 3f             	and    edi,0x3f
  23b40a:	89 f9                	mov    ecx,edi
  23b40c:	48 d3 e0             	shl    rax,cl
  23b40f:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
        if (d[high] == 0) {
  23b413:	eb 00                	jmp    23b415 <udivmod.14+0x655>
    if (d[low] == 0) {
  23b415:	eb 00                	jmp    23b417 <udivmod.14+0x657>
    var carry: u32 = 0;
  23b417:	c7 85 4c ff ff ff 00 	mov    DWORD PTR [rbp-0xb4],0x0
  23b41e:	00 00 00 
    while (sr > 0) : (sr -= 1) {
  23b421:	83 7d 94 00          	cmp    DWORD PTR [rbp-0x6c],0x0
  23b425:	0f 86 0d 01 00 00    	jbe    23b538 <udivmod.14+0x778>
        r[high] = (r[high] << 1) | (r[low] >> (SingleInt.bit_count - 1));
  23b42b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  23b42f:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  23b433:	48 0f a4 c1 01       	shld   rcx,rax,0x1
  23b438:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
        r[low] = (r[low] << 1) | (q[high] >> (SingleInt.bit_count - 1));
  23b43c:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  23b440:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  23b444:	48 0f a4 c8 01       	shld   rax,rcx,0x1
  23b449:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
        q[high] = (q[high] << 1) | (q[low] >> (SingleInt.bit_count - 1));
  23b44d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  23b451:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  23b455:	48 0f a4 c1 01       	shld   rcx,rax,0x1
  23b45a:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
        q[low] = (q[low] << 1) | carry;
  23b45e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  23b462:	48 01 c0             	add    rax,rax
  23b465:	8b 95 4c ff ff ff    	mov    edx,DWORD PTR [rbp-0xb4]
  23b46b:	89 d1                	mov    ecx,edx
  23b46d:	48 09 c8             	or     rax,rcx
  23b470:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
        r_all = @ptrCast(*align(@alignOf(SingleInt)) DoubleInt, &r[0]).*; // TODO issue #421
  23b474:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  23b478:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  23b47c:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
  23b483:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
        const s: SignedDoubleInt = @intCast(SignedDoubleInt, b -% r_all -% 1) >> (DoubleInt.bit_count - 1);
  23b48a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  23b48e:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  23b492:	48 8b b5 38 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc8]
  23b499:	48 8b bd 40 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xc0]
  23b4a0:	48 29 f0             	sub    rax,rsi
  23b4a3:	48 19 f9             	sbb    rcx,rdi
  23b4a6:	48 83 c0 ff          	add    rax,0xffffffffffffffff
  23b4aa:	48 83 d1 ff          	adc    rcx,0xffffffffffffffff
  23b4ae:	48 c1 f9 3f          	sar    rcx,0x3f
  23b4b2:	48 89 8d 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rcx
  23b4b9:	48 89 8d 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rcx
        carry = @intCast(u32, s & 1);
  23b4c0:	8b 95 28 ff ff ff    	mov    edx,DWORD PTR [rbp-0xd8]
  23b4c6:	83 e2 01             	and    edx,0x1
  23b4c9:	89 95 4c ff ff ff    	mov    DWORD PTR [rbp-0xb4],edx
        r_all -= b & @bitCast(DoubleInt, s);
  23b4cf:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
  23b4d6:	48 8b b5 40 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc0]
  23b4dd:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  23b4e1:	4c 8b 45 e8          	mov    r8,QWORD PTR [rbp-0x18]
  23b4e5:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  23b4ec:	4c 8b 95 30 ff ff ff 	mov    r10,QWORD PTR [rbp-0xd0]
  23b4f3:	4d 21 d0             	and    r8,r10
  23b4f6:	4c 21 cf             	and    rdi,r9
  23b4f9:	48 29 f9             	sub    rcx,rdi
  23b4fc:	4c 19 c6             	sbb    rsi,r8
  23b4ff:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  23b506:	48 89 b5 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rsi
        r = @ptrCast(*[2]SingleInt, &r_all).*; // TODO issue #421
  23b50d:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
  23b514:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
  23b518:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  23b51f:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
    while (sr > 0) : (sr -= 1) {
  23b523:	8b 55 94             	mov    edx,DWORD PTR [rbp-0x6c]
  23b526:	83 ea 01             	sub    edx,0x1
  23b529:	89 55 94             	mov    DWORD PTR [rbp-0x6c],edx
  23b52c:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
  23b533:	e9 e9 fe ff ff       	jmp    23b421 <udivmod.14+0x661>
    const q_all = ((@ptrCast(*align(@alignOf(SingleInt)) DoubleInt, &q[0]).*) << 1) | carry; // TODO issue #421
  23b538:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  23b53c:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  23b540:	48 0f a4 c1 01       	shld   rcx,rax,0x1
  23b545:	48 01 c0             	add    rax,rax
  23b548:	8b 95 4c ff ff ff    	mov    edx,DWORD PTR [rbp-0xb4]
  23b54e:	89 d6                	mov    esi,edx
  23b550:	48 09 f0             	or     rax,rsi
  23b553:	48 89 8d 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rcx
  23b55a:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
    if (maybe_rem) |rem| {
  23b561:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  23b566:	74 29                	je     23b591 <udivmod.14+0x7d1>
  23b568:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  23b56c:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
        rem.* = r_all;
  23b573:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  23b57a:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
  23b581:	48 8b 95 40 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc0]
  23b588:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
  23b58c:	48 89 08             	mov    QWORD PTR [rax],rcx
    if (maybe_rem) |rem| {
  23b58f:	eb 02                	jmp    23b593 <udivmod.14+0x7d3>
  23b591:	eb 00                	jmp    23b593 <udivmod.14+0x7d3>
    return q_all;
  23b593:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  23b59a:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
  23b5a1:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  23b5a8:	5d                   	pop    rbp
  23b5a9:	c3                   	ret    
  23b5aa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000023b5b0 <__muloti4>:
const udivmod = @import("udivmod.zig").udivmod;
const builtin = @import("builtin");
const compiler_rt = @import("index.zig");

pub extern fn __muloti4(a: i128, b: i128, overflow: *c_int) i128 {
  23b5b0:	55                   	push   rbp
  23b5b1:	48 89 e5             	mov    rbp,rsp
  23b5b4:	53                   	push   rbx
  23b5b5:	48 81 ec 88 01 00 00 	sub    rsp,0x188
  23b5bc:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  23b5c0:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  23b5c4:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  23b5c8:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  23b5cc:	4c 89 45 d0          	mov    QWORD PTR [rbp-0x30],r8
    @setRuntimeSafety(builtin.is_test);

    const min = @bitCast(i128, u128(1 << (i128.bit_count - 1)));
  23b5d0:	48 b9 00 00 00 00 00 	movabs rcx,0x8000000000000000
  23b5d7:	00 00 80 
  23b5da:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  23b5de:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
  23b5e5:	00 
    const max = ~min;
  23b5e6:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffffffff
  23b5ed:	ff ff 7f 
  23b5f0:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  23b5f4:	48 c7 45 b0 ff ff ff 	mov    QWORD PTR [rbp-0x50],0xffffffffffffffff
  23b5fb:	ff 
    overflow.* = 0;
  23b5fc:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  23b600:	c7 02 00 00 00 00    	mov    DWORD PTR [rdx],0x0

    const r = a *% b;
  23b606:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  23b60a:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  23b60e:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  23b612:	4c 8b 45 e0          	mov    r8,QWORD PTR [rbp-0x20]
  23b616:	48 89 d0             	mov    rax,rdx
  23b619:	49 0f af c0          	imul   rax,r8
  23b61d:	c4 e2 bb f6 d7       	mulx   rdx,r8,rdi
  23b622:	48 01 c2             	add    rdx,rax
  23b625:	48 0f af f7          	imul   rsi,rdi
  23b629:	48 01 f2             	add    rdx,rsi
  23b62c:	4c 89 45 a0          	mov    QWORD PTR [rbp-0x60],r8
  23b630:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
    if (a == min) {
  23b634:	c5 fa 6f 45 e8       	vmovdqu xmm0,XMMWORD PTR [rbp-0x18]
    const min = @bitCast(i128, u128(1 << (i128.bit_count - 1)));
  23b639:	c4 e1 f9 6e c9       	vmovq  xmm1,rcx
  23b63e:	c5 f1 73 f9 08       	vpslldq xmm1,xmm1,0x8
    if (a == min) {
  23b643:	c5 f9 74 c1          	vpcmpeqb xmm0,xmm0,xmm1
  23b647:	c5 79 d7 c8          	vpmovmskb r9d,xmm0
  23b64b:	41 81 e9 ff ff 00 00 	sub    r9d,0xffff
  23b652:	44 89 8d 5c ff ff ff 	mov    DWORD PTR [rbp-0xa4],r9d
  23b659:	75 7d                	jne    23b6d8 <__muloti4+0x128>
  23b65b:	eb 00                	jmp    23b65d <__muloti4+0xad>
        if (b != 0 and b != 1) {
  23b65d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  23b661:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  23b665:	48 09 c8             	or     rax,rcx
  23b668:	0f 95 c2             	setne  dl
  23b66b:	f6 c2 01             	test   dl,0x1
  23b66e:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
  23b675:	88 95 4f ff ff ff    	mov    BYTE PTR [rbp-0xb1],dl
  23b67b:	75 02                	jne    23b67f <__muloti4+0xcf>
  23b67d:	eb 2d                	jmp    23b6ac <__muloti4+0xfc>
  23b67f:	c5 fa 6f 45 d8       	vmovdqu xmm0,XMMWORD PTR [rbp-0x28]
  23b684:	b8 01 00 00 00       	mov    eax,0x1
  23b689:	89 c1                	mov    ecx,eax
  23b68b:	c4 e1 f9 6e c9       	vmovq  xmm1,rcx
  23b690:	c5 f9 74 c1          	vpcmpeqb xmm0,xmm0,xmm1
  23b694:	c5 f9 d7 c0          	vpmovmskb eax,xmm0
  23b698:	2d ff ff 00 00       	sub    eax,0xffff
  23b69d:	0f 95 c2             	setne  dl
  23b6a0:	89 85 48 ff ff ff    	mov    DWORD PTR [rbp-0xb8],eax
  23b6a6:	88 95 4f ff ff ff    	mov    BYTE PTR [rbp-0xb1],dl
  23b6ac:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [rbp-0xb1]
  23b6b2:	a8 01                	test   al,0x1
  23b6b4:	75 02                	jne    23b6b8 <__muloti4+0x108>
  23b6b6:	eb 0c                	jmp    23b6c4 <__muloti4+0x114>
            overflow.* = 1;
  23b6b8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23b6bc:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
        if (b != 0 and b != 1) {
  23b6c2:	eb 02                	jmp    23b6c6 <__muloti4+0x116>
  23b6c4:	eb 00                	jmp    23b6c6 <__muloti4+0x116>
        }
        return r;
  23b6c6:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  23b6ca:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  23b6ce:	48 81 c4 88 01 00 00 	add    rsp,0x188
  23b6d5:	5b                   	pop    rbx
  23b6d6:	5d                   	pop    rbp
  23b6d7:	c3                   	ret    
    if (a == min) {
  23b6d8:	eb 00                	jmp    23b6da <__muloti4+0x12a>
    }
    if (b == min) {
  23b6da:	c5 fa 6f 45 d8       	vmovdqu xmm0,XMMWORD PTR [rbp-0x28]
  23b6df:	48 b8 00 00 00 00 00 	movabs rax,0x8000000000000000
  23b6e6:	00 00 80 
  23b6e9:	c4 e1 f9 6e c8       	vmovq  xmm1,rax
  23b6ee:	c5 f1 73 f9 08       	vpslldq xmm1,xmm1,0x8
  23b6f3:	c5 f9 74 c1          	vpcmpeqb xmm0,xmm0,xmm1
  23b6f7:	c5 f9 d7 c8          	vpmovmskb ecx,xmm0
  23b6fb:	81 e9 ff ff 00 00    	sub    ecx,0xffff
  23b701:	89 8d 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],ecx
  23b707:	75 7d                	jne    23b786 <__muloti4+0x1d6>
  23b709:	eb 00                	jmp    23b70b <__muloti4+0x15b>
        if (a != 0 and a != 1) {
  23b70b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  23b70f:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  23b713:	48 09 c8             	or     rax,rcx
  23b716:	0f 95 c2             	setne  dl
  23b719:	f6 c2 01             	test   dl,0x1
  23b71c:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
  23b723:	88 95 37 ff ff ff    	mov    BYTE PTR [rbp-0xc9],dl
  23b729:	75 02                	jne    23b72d <__muloti4+0x17d>
  23b72b:	eb 2d                	jmp    23b75a <__muloti4+0x1aa>
  23b72d:	c5 fa 6f 45 e8       	vmovdqu xmm0,XMMWORD PTR [rbp-0x18]
  23b732:	b8 01 00 00 00       	mov    eax,0x1
  23b737:	89 c1                	mov    ecx,eax
  23b739:	c4 e1 f9 6e c9       	vmovq  xmm1,rcx
  23b73e:	c5 f9 74 c1          	vpcmpeqb xmm0,xmm0,xmm1
  23b742:	c5 f9 d7 c0          	vpmovmskb eax,xmm0
  23b746:	2d ff ff 00 00       	sub    eax,0xffff
  23b74b:	0f 95 c2             	setne  dl
  23b74e:	89 85 30 ff ff ff    	mov    DWORD PTR [rbp-0xd0],eax
  23b754:	88 95 37 ff ff ff    	mov    BYTE PTR [rbp-0xc9],dl
  23b75a:	8a 85 37 ff ff ff    	mov    al,BYTE PTR [rbp-0xc9]
  23b760:	a8 01                	test   al,0x1
  23b762:	75 02                	jne    23b766 <__muloti4+0x1b6>
  23b764:	eb 0c                	jmp    23b772 <__muloti4+0x1c2>
            overflow.* = 1;
  23b766:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23b76a:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
        if (a != 0 and a != 1) {
  23b770:	eb 02                	jmp    23b774 <__muloti4+0x1c4>
  23b772:	eb 00                	jmp    23b774 <__muloti4+0x1c4>
        }
        return r;
  23b774:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  23b778:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  23b77c:	48 81 c4 88 01 00 00 	add    rsp,0x188
  23b783:	5b                   	pop    rbx
  23b784:	5d                   	pop    rbp
  23b785:	c3                   	ret    
    if (b == min) {
  23b786:	eb 00                	jmp    23b788 <__muloti4+0x1d8>
    }

    const sa = a >> (i128.bit_count - 1);
  23b788:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  23b78c:	48 c1 f8 3f          	sar    rax,0x3f
  23b790:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  23b794:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
    const abs_a = (a ^ sa) -% sa;
  23b798:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  23b79c:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  23b7a0:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
  23b7a4:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  23b7a8:	48 31 f1             	xor    rcx,rsi
  23b7ab:	48 31 d0             	xor    rax,rdx
  23b7ae:	48 29 d0             	sub    rax,rdx
  23b7b1:	48 19 f1             	sbb    rcx,rsi
  23b7b4:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  23b7b8:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
    const sb = b >> (i128.bit_count - 1);
  23b7bc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  23b7c0:	48 c1 f8 3f          	sar    rax,0x3f
  23b7c4:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  23b7cb:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
    const abs_b = (b ^ sb) -% sb;
  23b7d2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  23b7d6:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  23b7da:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  23b7e1:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
  23b7e8:	48 31 f1             	xor    rcx,rsi
  23b7eb:	48 31 d0             	xor    rax,rdx
  23b7ee:	48 29 d0             	sub    rax,rdx
  23b7f1:	48 19 f1             	sbb    rcx,rsi
  23b7f4:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  23b7fb:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx

    if (abs_a < 2 or abs_b < 2) {
  23b802:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  23b806:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  23b80a:	48 83 e8 02          	sub    rax,0x2
  23b80e:	48 83 d9 00          	sbb    rcx,0x0
  23b812:	40 0f 9c c7          	setl   dil
  23b816:	40 f6 c7 01          	test   dil,0x1
  23b81a:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  23b821:	48 89 8d 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rcx
  23b828:	40 88 bd 1f ff ff ff 	mov    BYTE PTR [rbp-0xe1],dil
  23b82f:	75 2d                	jne    23b85e <__muloti4+0x2ae>
  23b831:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  23b838:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  23b83f:	48 83 e8 02          	sub    rax,0x2
  23b843:	48 83 d9 00          	sbb    rcx,0x0
  23b847:	0f 9c c2             	setl   dl
  23b84a:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
  23b851:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  23b858:	88 95 1f ff ff ff    	mov    BYTE PTR [rbp-0xe1],dl
  23b85e:	8a 85 1f ff ff ff    	mov    al,BYTE PTR [rbp-0xe1]
  23b864:	a8 01                	test   al,0x1
  23b866:	75 02                	jne    23b86a <__muloti4+0x2ba>
  23b868:	eb 12                	jmp    23b87c <__muloti4+0x2cc>
        return r;
  23b86a:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  23b86e:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  23b872:	48 81 c4 88 01 00 00 	add    rsp,0x188
  23b879:	5b                   	pop    rbx
  23b87a:	5d                   	pop    rbp
  23b87b:	c3                   	ret    
    if (abs_a < 2 or abs_b < 2) {
  23b87c:	eb 00                	jmp    23b87e <__muloti4+0x2ce>
    }

    if (sa == sb) {
  23b87e:	c5 fa 6f 45 90       	vmovdqu xmm0,XMMWORD PTR [rbp-0x70]
  23b883:	c5 fa 6f 8d 70 ff ff 	vmovdqu xmm1,XMMWORD PTR [rbp-0x90]
  23b88a:	ff 
  23b88b:	c5 f9 74 c1          	vpcmpeqb xmm0,xmm0,xmm1
  23b88f:	c5 f9 d7 c0          	vpmovmskb eax,xmm0
  23b893:	2d ff ff 00 00       	sub    eax,0xffff
  23b898:	89 85 04 ff ff ff    	mov    DWORD PTR [rbp-0xfc],eax
  23b89e:	0f 85 23 01 00 00    	jne    23b9c7 <__muloti4+0x417>
  23b8a4:	eb 00                	jmp    23b8a6 <__muloti4+0x2f6>
        if (abs_a > @divFloor(max, abs_b)) {
  23b8a6:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  23b8aa:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  23b8ae:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  23b8b5:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
  23b8bc:	48 c7 c7 ff ff ff ff 	mov    rdi,0xffffffffffffffff
  23b8c3:	49 b8 ff ff ff ff ff 	movabs r8,0x7fffffffffffffff
  23b8ca:	ff ff 7f 
  23b8cd:	48 89 b5 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rsi
  23b8d4:	4c 89 c6             	mov    rsi,r8
  23b8d7:	48 89 95 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rdx
  23b8de:	4c 8b 85 f8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x108]
  23b8e5:	48 89 8d e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rcx
  23b8ec:	4c 89 c1             	mov    rcx,r8
  23b8ef:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
  23b8f6:	e8 d5 f3 ff ff       	call   23acd0 <__divti3>
  23b8fb:	48 85 d2             	test   rdx,rdx
  23b8fe:	41 0f 99 c1          	setns  r9b
  23b902:	48 89 c1             	mov    rcx,rax
  23b905:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
  23b90c:	48 0f af ce          	imul   rcx,rsi
  23b910:	48 89 95 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rdx
  23b917:	48 89 c2             	mov    rdx,rax
  23b91a:	48 8b bd f0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x110]
  23b921:	c4 e2 bb f6 d7       	mulx   rdx,r8,rdi
  23b926:	48 01 ca             	add    rdx,rcx
  23b929:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
  23b930:	48 0f af cf          	imul   rcx,rdi
  23b934:	48 01 ca             	add    rdx,rcx
  23b937:	c4 e1 f9 6e c2       	vmovq  xmm0,rdx
  23b93c:	c4 c1 f9 6e c8       	vmovq  xmm1,r8
  23b941:	c5 f1 6c c0          	vpunpcklqdq xmm0,xmm1,xmm0
  23b945:	c5 f9 6f 0d 63 4a fc 	vmovdqa xmm1,XMMWORD PTR [rip+0xfffffffffffc4a63]        # 2003b0 <__unnamed_198+0x10>
  23b94c:	ff 
  23b94d:	c5 f9 74 c1          	vpcmpeqb xmm0,xmm0,xmm1
  23b951:	c5 79 d7 d0          	vpmovmskb r10d,xmm0
  23b955:	41 81 ea ff ff 00 00 	sub    r10d,0xffff
  23b95c:	41 0f 94 c3          	sete   r11b
  23b960:	45 08 cb             	or     r11b,r9b
  23b963:	48 89 c1             	mov    rcx,rax
  23b966:	48 83 c1 ff          	add    rcx,0xffffffffffffffff
  23b96a:	48 8b 95 d8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x128]
  23b971:	48 83 d2 ff          	adc    rdx,0xffffffffffffffff
  23b975:	45 84 db             	test   r11b,r11b
  23b978:	4c 8b 85 d8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x128]
  23b97f:	49 0f 45 d0          	cmovne rdx,r8
  23b983:	48 0f 45 c8          	cmovne rcx,rax
  23b987:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
  23b98e:	48 29 c1             	sub    rcx,rax
  23b991:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  23b998:	48 19 c2             	sbb    rdx,rax
  23b99b:	48 89 8d d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rcx
  23b9a2:	44 89 95 cc fe ff ff 	mov    DWORD PTR [rbp-0x134],r10d
  23b9a9:	48 89 95 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rdx
  23b9b0:	7d 0e                	jge    23b9c0 <__muloti4+0x410>
  23b9b2:	eb 00                	jmp    23b9b4 <__muloti4+0x404>
            overflow.* = 1;
  23b9b4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23b9b8:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
        if (abs_a > @divFloor(max, abs_b)) {
  23b9be:	eb 02                	jmp    23b9c2 <__muloti4+0x412>
  23b9c0:	eb 00                	jmp    23b9c2 <__muloti4+0x412>
    if (sa == sb) {
  23b9c2:	e9 2c 01 00 00       	jmp    23baf3 <__muloti4+0x543>
        }
    } else {
        if (abs_a > @divFloor(min, -abs_b)) {
  23b9c7:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  23b9cb:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  23b9cf:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  23b9d6:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
  23b9dd:	31 ff                	xor    edi,edi
  23b9df:	48 f7 da             	neg    rdx
  23b9e2:	41 89 f8             	mov    r8d,edi
  23b9e5:	4d 89 c1             	mov    r9,r8
  23b9e8:	49 19 f1             	sbb    r9,rsi
  23b9eb:	48 be 00 00 00 00 00 	movabs rsi,0x8000000000000000
  23b9f2:	00 00 80 
  23b9f5:	4c 89 c7             	mov    rdi,r8
  23b9f8:	48 89 b5 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rsi
  23b9ff:	48 89 95 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rdx
  23ba06:	48 89 8d a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rcx
  23ba0d:	4c 89 c9             	mov    rcx,r9
  23ba10:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
  23ba17:	4c 89 8d 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],r9
  23ba1e:	e8 ad f2 ff ff       	call   23acd0 <__divti3>
  23ba23:	48 85 d2             	test   rdx,rdx
  23ba26:	41 0f 99 c2          	setns  r10b
  23ba2a:	48 89 c1             	mov    rcx,rax
  23ba2d:	48 8b b5 98 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x168]
  23ba34:	48 0f af ce          	imul   rcx,rsi
  23ba38:	48 89 95 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rdx
  23ba3f:	48 89 c2             	mov    rdx,rax
  23ba42:	48 8b bd b0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x150]
  23ba49:	c4 e2 bb f6 d7       	mulx   rdx,r8,rdi
  23ba4e:	48 01 ca             	add    rdx,rcx
  23ba51:	48 8b 8d 90 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x170]
  23ba58:	48 0f af cf          	imul   rcx,rdi
  23ba5c:	48 01 ca             	add    rdx,rcx
  23ba5f:	c4 e1 f9 6e c2       	vmovq  xmm0,rdx
  23ba64:	c4 c1 f9 6e c8       	vmovq  xmm1,r8
  23ba69:	c5 f1 6c c0          	vpunpcklqdq xmm0,xmm1,xmm0
  23ba6d:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  23ba74:	c4 e1 f9 6e c9       	vmovq  xmm1,rcx
  23ba79:	c5 f1 73 f9 08       	vpslldq xmm1,xmm1,0x8
  23ba7e:	c5 f9 74 c1          	vpcmpeqb xmm0,xmm0,xmm1
  23ba82:	c5 79 d7 d8          	vpmovmskb r11d,xmm0
  23ba86:	41 81 eb ff ff 00 00 	sub    r11d,0xffff
  23ba8d:	0f 94 c3             	sete   bl
  23ba90:	44 08 d3             	or     bl,r10b
  23ba93:	48 89 c2             	mov    rdx,rax
  23ba96:	48 83 c2 ff          	add    rdx,0xffffffffffffffff
  23ba9a:	4c 8b 85 90 fe ff ff 	mov    r8,QWORD PTR [rbp-0x170]
  23baa1:	49 83 d0 ff          	adc    r8,0xffffffffffffffff
  23baa5:	84 db                	test   bl,bl
  23baa7:	4c 8b 8d 90 fe ff ff 	mov    r9,QWORD PTR [rbp-0x170]
  23baae:	4d 0f 45 c1          	cmovne r8,r9
  23bab2:	48 0f 45 d0          	cmovne rdx,rax
  23bab6:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
  23babd:	48 29 c2             	sub    rdx,rax
  23bac0:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
  23bac7:	49 19 c0             	sbb    r8,rax
  23baca:	48 89 95 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rdx
  23bad1:	44 89 9d 84 fe ff ff 	mov    DWORD PTR [rbp-0x17c],r11d
  23bad8:	4c 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],r8
  23badf:	7d 0e                	jge    23baef <__muloti4+0x53f>
  23bae1:	eb 00                	jmp    23bae3 <__muloti4+0x533>
            overflow.* = 1;
  23bae3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23bae7:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
        if (abs_a > @divFloor(min, -abs_b)) {
  23baed:	eb 02                	jmp    23baf1 <__muloti4+0x541>
  23baef:	eb 00                	jmp    23baf1 <__muloti4+0x541>
    if (sa == sb) {
  23baf1:	eb 00                	jmp    23baf3 <__muloti4+0x543>
        }
    }

    return r;
  23baf3:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  23baf7:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  23bafb:	48 81 c4 88 01 00 00 	add    rsp,0x188
  23bb02:	5b                   	pop    rbx
  23bb03:	5d                   	pop    rbp
  23bb04:	c3                   	ret    
  23bb05:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  23bb0c:	00 00 00 00 

000000000023bb10 <__udivti3>:
const udivmodti4 = @import("udivmodti4.zig");
const builtin = @import("builtin");

pub extern fn __udivti3(a: u128, b: u128) u128 {
  23bb10:	55                   	push   rbp
  23bb11:	48 89 e5             	mov    rbp,rsp
  23bb14:	48 83 ec 20          	sub    rsp,0x20
  23bb18:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  23bb1c:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  23bb20:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  23bb24:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
    @setRuntimeSafety(builtin.is_test);
    return udivmodti4.__udivmodti4(a, b, null);
  23bb28:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  23bb2c:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  23bb30:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  23bb34:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  23bb38:	31 c0                	xor    eax,eax
  23bb3a:	41 89 c0             	mov    r8d,eax
  23bb3d:	e8 0e 00 00 00       	call   23bb50 <__udivmodti4>
  23bb42:	48 83 c4 20          	add    rsp,0x20
  23bb46:	5d                   	pop    rbp
  23bb47:	c3                   	ret    
  23bb48:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  23bb4f:	00 

000000000023bb50 <__udivmodti4>:
const udivmod = @import("udivmod.zig").udivmod;
const builtin = @import("builtin");
const compiler_rt = @import("index.zig");

pub extern fn __udivmodti4(a: u128, b: u128, maybe_rem: ?*u128) u128 {
  23bb50:	55                   	push   rbp
  23bb51:	48 89 e5             	mov    rbp,rsp
  23bb54:	48 83 ec 30          	sub    rsp,0x30
  23bb58:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  23bb5c:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  23bb60:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  23bb64:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  23bb68:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
    @setRuntimeSafety(builtin.is_test);
    return udivmod(u128, a, b, maybe_rem);
  23bb6c:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  23bb70:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  23bb74:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  23bb78:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  23bb7c:	4c 8b 45 d8          	mov    r8,QWORD PTR [rbp-0x28]
  23bb80:	e8 3b f2 ff ff       	call   23adc0 <udivmod.14>
  23bb85:	48 83 c4 30          	add    rsp,0x30
  23bb89:	5d                   	pop    rbp
  23bb8a:	c3                   	ret    
  23bb8b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000023bb90 <__umodti3>:
const udivmodti4 = @import("udivmodti4.zig");
const builtin = @import("builtin");
const compiler_rt = @import("index.zig");

pub extern fn __umodti3(a: u128, b: u128) u128 {
  23bb90:	55                   	push   rbp
  23bb91:	48 89 e5             	mov    rbp,rsp
  23bb94:	48 83 ec 40          	sub    rsp,0x40
  23bb98:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  23bb9c:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  23bba0:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  23bba4:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
    @setRuntimeSafety(builtin.is_test);
    var r: u128 = undefined;
    _ = udivmodti4.__udivmodti4(a, b, &r);
  23bba8:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  23bbac:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  23bbb0:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  23bbb4:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  23bbb8:	4c 8d 45 d0          	lea    r8,[rbp-0x30]
  23bbbc:	e8 8f ff ff ff       	call   23bb50 <__udivmodti4>
    return r;
  23bbc1:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  23bbc5:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  23bbc9:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  23bbcd:	48 89 c8             	mov    rax,rcx
  23bbd0:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
  23bbd4:	48 89 f2             	mov    rdx,rsi
  23bbd7:	48 83 c4 40          	add    rsp,0x40
  23bbdb:	5d                   	pop    rbp
  23bbdc:	c3                   	ret    
