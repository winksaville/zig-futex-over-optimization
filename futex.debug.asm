
./zig-cache/test:     file format elf64-x86-64


Disassembly of section .text:

000000000020b000 <assert>:
/// This function invokes undefined behavior when `ok` is `false`.
/// In Debug and ReleaseSafe modes, calls to this function are always
/// generated, and the `unreachable` statement triggers a panic.
/// In ReleaseFast and ReleaseSmall modes, calls to this function can be
/// optimized away.
pub fn assert(ok: bool) void {
  20b000:	55                   	push   rbp
  20b001:	48 89 e5             	mov    rbp,rsp
  20b004:	48 83 ec 10          	sub    rsp,0x10
  20b008:	40 88 f8             	mov    al,dil
  20b00b:	24 01                	and    al,0x1
  20b00d:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
    if (!ok) {
  20b010:	8a 45 ff             	mov    al,BYTE PTR [rbp-0x1]
  20b013:	84 c0                	test   al,al
  20b015:	75 12                	jne    20b029 <assert+0x29>
  20b017:	eb 00                	jmp    20b019 <assert+0x19>
  20b019:	48 8d 3d 40 83 03 00 	lea    rdi,[rip+0x38340]        # 243360 <__unnamed_1>
  20b020:	31 c0                	xor    eax,eax
  20b022:	89 c6                	mov    esi,eax
        // In ReleaseFast test mode, we still want assert(false) to crash, so
        // we insert an explicit call to @panic instead of unreachable.
        // TODO we should use `assertOrPanic` in tests and remove this logic.
        if (builtin.is_test) {
            @panic("assertion failure");
  20b024:	e8 d7 05 00 00       	call   20b600 <panic>
    if (!ok) {
  20b029:	eb 00                	jmp    20b02b <assert+0x2b>
pub fn assert(ok: bool) void {
  20b02b:	48 83 c4 10          	add    rsp,0x10
  20b02f:	5d                   	pop    rbp
  20b030:	c3                   	ret    
  20b031:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20b038:	0f 1f 84 00 00 00 00 
  20b03f:	00 

000000000020b040 <Timer_clockLinux>:

    fn clockDarwin() u64 {
        return darwin.mach_absolute_time();
    }

    fn clockLinux() u64 {
  20b040:	55                   	push   rbp
  20b041:	48 89 e5             	mov    rbp,rsp
  20b044:	48 83 ec 50          	sub    rsp,0x50
  20b048:	bf 01 00 00 00       	mov    edi,0x1
  20b04d:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
        var ts: posix.timespec = undefined;
  20b051:	48 8b 05 58 52 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff5258]        # 2002b0 <__unnamed_100>
  20b058:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  20b05c:	48 8b 05 55 52 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff5255]        # 2002b8 <__unnamed_100+0x8>
  20b063:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
        var result = posix.clock_gettime(monotonic_clock_id, &ts);
  20b067:	e8 d4 20 00 00       	call   20d140 <clock_gettime>
  20b06c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
        debug.assert(posix.getErrno(result) == 0);
  20b070:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  20b074:	e8 07 20 00 00       	call   20d080 <getErrno>
  20b079:	48 83 f8 00          	cmp    rax,0x0
  20b07d:	0f 94 c1             	sete   cl
  20b080:	0f b6 f9             	movzx  edi,cl
  20b083:	e8 78 ff ff ff       	call   20b000 <assert>
        return @intCast(u64, ts.tv_sec) * u64(ns_per_s) + @intCast(u64, ts.tv_nsec);
  20b088:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20b08c:	48 83 f8 00          	cmp    rax,0x0
  20b090:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  20b094:	7c 1e                	jl     20b0b4 <Timer_clockLinux+0x74>
  20b096:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
  20b09b:	89 c1                	mov    ecx,eax
  20b09d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20b0a1:	48 f7 e1             	mul    rcx
  20b0a4:	40 0f 90 c6          	seto   sil
  20b0a8:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  20b0ac:	40 88 75 d7          	mov    BYTE PTR [rbp-0x29],sil
  20b0b0:	70 12                	jo     20b0c4 <Timer_clockLinux+0x84>
  20b0b2:	eb 20                	jmp    20b0d4 <Timer_clockLinux+0x94>
  20b0b4:	48 8d 3d cd 81 03 00 	lea    rdi,[rip+0x381cd]        # 243288 <__unnamed_3>
  20b0bb:	31 c0                	xor    eax,eax
  20b0bd:	89 c6                	mov    esi,eax
  20b0bf:	e8 3c 05 00 00       	call   20b600 <panic>
  20b0c4:	48 8d 3d fd 80 03 00 	lea    rdi,[rip+0x380fd]        # 2431c8 <__unnamed_4>
  20b0cb:	31 c0                	xor    eax,eax
  20b0cd:	89 c6                	mov    esi,eax
  20b0cf:	e8 2c 05 00 00       	call   20b600 <panic>
  20b0d4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20b0d8:	48 83 f8 00          	cmp    rax,0x0
  20b0dc:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  20b0e0:	7c 19                	jl     20b0fb <Timer_clockLinux+0xbb>
  20b0e2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  20b0e6:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  20b0ea:	48 01 c8             	add    rax,rcx
  20b0ed:	0f 92 c2             	setb   dl
  20b0f0:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  20b0f4:	88 55 bf             	mov    BYTE PTR [rbp-0x41],dl
  20b0f7:	72 12                	jb     20b10b <Timer_clockLinux+0xcb>
  20b0f9:	eb 20                	jmp    20b11b <Timer_clockLinux+0xdb>
  20b0fb:	48 8d 3d 86 81 03 00 	lea    rdi,[rip+0x38186]        # 243288 <__unnamed_3>
  20b102:	31 c0                	xor    eax,eax
  20b104:	89 c6                	mov    esi,eax
  20b106:	e8 f5 04 00 00       	call   20b600 <panic>
  20b10b:	48 8d 3d b6 80 03 00 	lea    rdi,[rip+0x380b6]        # 2431c8 <__unnamed_4>
  20b112:	31 c0                	xor    eax,eax
  20b114:	89 c6                	mov    esi,eax
  20b116:	e8 e5 04 00 00       	call   20b600 <panic>
  20b11b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  20b11f:	48 83 c4 50          	add    rsp,0x50
  20b123:	5d                   	pop    rbp
  20b124:	c3                   	ret    
  20b125:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20b12c:	00 00 00 00 

000000000020b130 <init_vdso_clock_gettime>:
        }
    }
    return syscall2(SYS_clock_gettime, @bitCast(usize, isize(clk_id)), @ptrToInt(tp));
}
var vdso_clock_gettime = init_vdso_clock_gettime;
extern fn init_vdso_clock_gettime(clk: i32, ts: *timespec) usize {
  20b130:	55                   	push   rbp
  20b131:	48 89 e5             	mov    rbp,rsp
  20b134:	48 83 ec 30          	sub    rsp,0x30
  20b138:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  20b13b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    const addr = vdso.lookup(VDSO_CGT_VER, VDSO_CGT_SYM);
  20b13f:	48 8d 3d 12 87 03 00 	lea    rdi,[rip+0x38712]        # 243858 <__unnamed_5>
  20b146:	48 8d 35 23 87 03 00 	lea    rsi,[rip+0x38723]        # 243870 <__unnamed_6>
  20b14d:	e8 ce a6 01 00       	call   225820 <lookup>
  20b152:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    var f = @intToPtr(@typeOf(init_vdso_clock_gettime), addr);
  20b156:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20b15a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    _ = @cmpxchgStrong(@typeOf(init_vdso_clock_gettime), &vdso_clock_gettime, init_vdso_clock_gettime, f, builtin.AtomicOrder.Monotonic, builtin.AtomicOrder.Monotonic);
  20b15e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20b162:	48 8d 35 c7 ff ff ff 	lea    rsi,[rip+0xffffffffffffffc7]        # 20b130 <init_vdso_clock_gettime>
  20b169:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  20b16d:	48 89 f0             	mov    rax,rsi
  20b170:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  20b174:	f0 48 0f b1 35 bb 0e 	lock cmpxchg QWORD PTR [rip+0x30ebb],rsi        # 23c038 <vdso_clock_gettime>
  20b17b:	03 00 
    if (@ptrToInt(f) == 0) return @bitCast(usize, isize(-ENOSYS));
  20b17d:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  20b181:	48 83 fe 00          	cmp    rsi,0x0
  20b185:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  20b189:	75 0d                	jne    20b198 <init_vdso_clock_gettime+0x68>
  20b18b:	48 c7 c0 da ff ff ff 	mov    rax,0xffffffffffffffda
  20b192:	48 83 c4 30          	add    rsp,0x30
  20b196:	5d                   	pop    rbp
  20b197:	c3                   	ret    
  20b198:	eb 00                	jmp    20b19a <init_vdso_clock_gettime+0x6a>
    return f(clk, ts);
  20b19a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20b19e:	8b 7d fc             	mov    edi,DWORD PTR [rbp-0x4]
  20b1a1:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20b1a5:	ff d0                	call   rax
  20b1a7:	48 83 c4 30          	add    rsp,0x30
  20b1ab:	5d                   	pop    rbp
  20b1ac:	c3                   	ret    
  20b1ad:	0f 1f 00             	nop    DWORD PTR [rax]

000000000020b1b0 <Futex>:
        _ = @atomicRmw(@typeOf(gCounter), &gCounter, AtomicRmwOp.Add, 1, AtomicOrder.SeqCst);
        pContext.counter += 1;
    }
}

test "Futex" {
  20b1b0:	55                   	push   rbp
  20b1b1:	48 89 e5             	mov    rbp,rsp
    warn("\ntest Futex:+\n");
  20b1b4:	48 81 ec 60 01 00 00 	sub    rsp,0x160
  20b1bb:	48 89 bd 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdi
  20b1c2:	e8 79 05 00 00       	call   20b740 <warn>
  20b1c7:	48 8d 3d 32 0e 03 00 	lea    rdi,[rip+0x30e32]        # 23c000 <gProducer_context>
    defer warn("test Futex:- futex_wait counts={} futex_wake counts={}\n",
        gProducer_wait_count + gConsumer_wait_count, gProducer_wake_count + gConsumer_wake_count);

    gProducer_context.init();
  20b1ce:	e8 1d 06 00 00       	call   20b7f0 <ThreadContext_init>
  20b1d3:	48 8d 3d 36 0e 03 00 	lea    rdi,[rip+0x30e36]        # 23c010 <gConsumer_context>
    gConsumer_context.init();
  20b1da:	e8 11 06 00 00       	call   20b7f0 <ThreadContext_init>
  20b1df:	48 8d 7d e8          	lea    rdi,[rbp-0x18]

    var timer = try Timer.start();
  20b1e3:	48 8b b5 50 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xb0]
  20b1ea:	e8 21 06 00 00       	call   20b810 <Timer_start>
  20b1ef:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  20b1f4:	74 29                	je     20b21f <Futex+0x6f>
        gProducer_wait_count + gConsumer_wait_count, gProducer_wake_count + gConsumer_wake_count);
  20b1f6:	48 8b 05 03 8e 03 00 	mov    rax,QWORD PTR [rip+0x38e03]        # 244000 <gProducer_wait_count>
  20b1fd:	48 03 05 04 8e 03 00 	add    rax,QWORD PTR [rip+0x38e04]        # 244008 <gConsumer_wait_count>
  20b204:	0f 92 c1             	setb   cl
  20b207:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  20b20e:	88 8d 47 ff ff ff    	mov    BYTE PTR [rbp-0xb9],cl
  20b214:	0f 82 1a 01 00 00    	jb     20b334 <Futex+0x184>
  20b21a:	e9 25 01 00 00       	jmp    20b344 <Futex+0x194>
  20b21f:	48 8d 7d 80          	lea    rdi,[rbp-0x80]
    var timer = try Timer.start();
  20b223:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20b227:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  20b22b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20b22f:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
    var start_time = timer.read();
  20b233:	e8 98 0a 00 00       	call   20bcd0 <Timer_read>
  20b238:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  20b23c:	48 8d 15 bd 0d 03 00 	lea    rdx,[rip+0x30dbd]        # 23c000 <gProducer_context>
  20b243:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax

    var producer_thread = try std.os.spawnThread(&gProducer_context, producer);
  20b24a:	48 8b b5 50 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xb0]
  20b251:	e8 ca 0a 00 00       	call   20bd20 <spawnThread>
  20b256:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  20b25b:	74 29                	je     20b286 <Futex+0xd6>
        gProducer_wait_count + gConsumer_wait_count, gProducer_wake_count + gConsumer_wake_count);
  20b25d:	48 8b 05 9c 8d 03 00 	mov    rax,QWORD PTR [rip+0x38d9c]        # 244000 <gProducer_wait_count>
  20b264:	48 03 05 9d 8d 03 00 	add    rax,QWORD PTR [rip+0x38d9d]        # 244008 <gConsumer_wait_count>
  20b26b:	0f 92 c1             	setb   cl
  20b26e:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
  20b275:	88 8d 37 ff ff ff    	mov    BYTE PTR [rbp-0xc9],cl
  20b27b:	0f 82 2f 01 00 00    	jb     20b3b0 <Futex+0x200>
  20b281:	e9 3a 01 00 00       	jmp    20b3c0 <Futex+0x210>
  20b286:	48 8d 7d a0          	lea    rdi,[rbp-0x60]
  20b28a:	48 8d 15 7f 0d 03 00 	lea    rdx,[rip+0x30d7f]        # 23c010 <gConsumer_context>
    var producer_thread = try std.os.spawnThread(&gProducer_context, producer);
  20b291:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20b295:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
    var consumer_thread = try std.os.spawnThread(&gConsumer_context, consumer);
  20b29c:	48 8b b5 50 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xb0]
  20b2a3:	e8 b8 0f 00 00       	call   20c260 <spawnThread.17>
  20b2a8:	66 83 7d a0 00       	cmp    WORD PTR [rbp-0x60],0x0
  20b2ad:	74 29                	je     20b2d8 <Futex+0x128>
        gProducer_wait_count + gConsumer_wait_count, gProducer_wake_count + gConsumer_wake_count);
  20b2af:	48 8b 05 4a 8d 03 00 	mov    rax,QWORD PTR [rip+0x38d4a]        # 244000 <gProducer_wait_count>
  20b2b6:	48 03 05 4b 8d 03 00 	add    rax,QWORD PTR [rip+0x38d4b]        # 244008 <gConsumer_wait_count>
  20b2bd:	0f 92 c1             	setb   cl
  20b2c0:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  20b2c7:	88 8d 27 ff ff ff    	mov    BYTE PTR [rbp-0xd9],cl
  20b2cd:	0f 82 59 01 00 00    	jb     20b42c <Futex+0x27c>
  20b2d3:	e9 64 01 00 00       	jmp    20b43c <Futex+0x28c>
    var consumer_thread = try std.os.spawnThread(&gConsumer_context, consumer);
  20b2d8:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  20b2dc:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax

    producer_thread.wait();
  20b2e3:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  20b2ea:	e8 b1 14 00 00       	call   20c7a0 <Thread_wait>
    consumer_thread.wait();
  20b2ef:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  20b2f6:	e8 a5 14 00 00       	call   20c7a0 <Thread_wait>
  20b2fb:	48 8d 7d 80          	lea    rdi,[rbp-0x80]

    var end_time = timer.read();
  20b2ff:	e8 cc 09 00 00       	call   20bcd0 <Timer_read>
  20b304:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
    var duration = end_time - start_time;
  20b30b:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  20b312:	48 2b 85 78 ff ff ff 	sub    rax,QWORD PTR [rbp-0x88]
  20b319:	0f 92 c1             	setb   cl
  20b31c:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  20b323:	88 8d 17 ff ff ff    	mov    BYTE PTR [rbp-0xe9],cl
  20b329:	0f 82 79 01 00 00    	jb     20b4a8 <Futex+0x2f8>
  20b32f:	e9 84 01 00 00       	jmp    20b4b8 <Futex+0x308>
  20b334:	48 8d 3d 8d 7e 03 00 	lea    rdi,[rip+0x37e8d]        # 2431c8 <__unnamed_4>
  20b33b:	31 c0                	xor    eax,eax
  20b33d:	89 c6                	mov    esi,eax
        gProducer_wait_count + gConsumer_wait_count, gProducer_wake_count + gConsumer_wake_count);
  20b33f:	e8 bc 02 00 00       	call   20b600 <panic>
  20b344:	48 8b 05 c5 8c 03 00 	mov    rax,QWORD PTR [rip+0x38cc5]        # 244010 <gProducer_wake_count>
  20b34b:	48 03 05 c6 8c 03 00 	add    rax,QWORD PTR [rip+0x38cc6]        # 244018 <gConsumer_wake_count>
  20b352:	0f 92 c1             	setb   cl
  20b355:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
  20b35c:	88 8d 07 ff ff ff    	mov    BYTE PTR [rbp-0xf9],cl
  20b362:	72 02                	jb     20b366 <Futex+0x1b6>
  20b364:	eb 10                	jmp    20b376 <Futex+0x1c6>
  20b366:	48 8d 3d 5b 7e 03 00 	lea    rdi,[rip+0x37e5b]        # 2431c8 <__unnamed_4>
  20b36d:	31 c0                	xor    eax,eax
  20b36f:	89 c6                	mov    esi,eax
  20b371:	e8 8a 02 00 00       	call   20b600 <panic>
    defer warn("test Futex:- futex_wait counts={} futex_wake counts={}\n",
  20b376:	48 8b bd 48 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb8]
  20b37d:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
  20b384:	e8 37 08 00 00       	call   20bbc0 <warn.16>
    var timer = try Timer.start();
  20b389:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  20b38d:	48 8b bd 50 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb0]
  20b394:	66 89 85 04 ff ff ff 	mov    WORD PTR [rbp-0xfc],ax
  20b39b:	e8 f0 08 00 00       	call   20bc90 <__zig_return_error>
  20b3a0:	66 8b 85 04 ff ff ff 	mov    ax,WORD PTR [rbp-0xfc]
  20b3a7:	48 81 c4 60 01 00 00 	add    rsp,0x160
  20b3ae:	5d                   	pop    rbp
  20b3af:	c3                   	ret    
  20b3b0:	48 8d 3d 11 7e 03 00 	lea    rdi,[rip+0x37e11]        # 2431c8 <__unnamed_4>
  20b3b7:	31 c0                	xor    eax,eax
  20b3b9:	89 c6                	mov    esi,eax
        gProducer_wait_count + gConsumer_wait_count, gProducer_wake_count + gConsumer_wake_count);
  20b3bb:	e8 40 02 00 00       	call   20b600 <panic>
  20b3c0:	48 8b 05 49 8c 03 00 	mov    rax,QWORD PTR [rip+0x38c49]        # 244010 <gProducer_wake_count>
  20b3c7:	48 03 05 4a 8c 03 00 	add    rax,QWORD PTR [rip+0x38c4a]        # 244018 <gConsumer_wake_count>
  20b3ce:	0f 92 c1             	setb   cl
  20b3d1:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  20b3d8:	88 8d f7 fe ff ff    	mov    BYTE PTR [rbp-0x109],cl
  20b3de:	72 02                	jb     20b3e2 <Futex+0x232>
  20b3e0:	eb 10                	jmp    20b3f2 <Futex+0x242>
  20b3e2:	48 8d 3d df 7d 03 00 	lea    rdi,[rip+0x37ddf]        # 2431c8 <__unnamed_4>
  20b3e9:	31 c0                	xor    eax,eax
  20b3eb:	89 c6                	mov    esi,eax
  20b3ed:	e8 0e 02 00 00       	call   20b600 <panic>
    defer warn("test Futex:- futex_wait counts={} futex_wake counts={}\n",
  20b3f2:	48 8b bd 38 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xc8]
  20b3f9:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
  20b400:	e8 bb 07 00 00       	call   20bbc0 <warn.16>
    var producer_thread = try std.os.spawnThread(&gProducer_context, producer);
  20b405:	66 8b 45 c0          	mov    ax,WORD PTR [rbp-0x40]
  20b409:	48 8b bd 50 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb0]
  20b410:	66 89 85 f4 fe ff ff 	mov    WORD PTR [rbp-0x10c],ax
  20b417:	e8 74 08 00 00       	call   20bc90 <__zig_return_error>
  20b41c:	66 8b 85 f4 fe ff ff 	mov    ax,WORD PTR [rbp-0x10c]
  20b423:	48 81 c4 60 01 00 00 	add    rsp,0x160
  20b42a:	5d                   	pop    rbp
  20b42b:	c3                   	ret    
  20b42c:	48 8d 3d 95 7d 03 00 	lea    rdi,[rip+0x37d95]        # 2431c8 <__unnamed_4>
  20b433:	31 c0                	xor    eax,eax
  20b435:	89 c6                	mov    esi,eax
        gProducer_wait_count + gConsumer_wait_count, gProducer_wake_count + gConsumer_wake_count);
  20b437:	e8 c4 01 00 00       	call   20b600 <panic>
  20b43c:	48 8b 05 cd 8b 03 00 	mov    rax,QWORD PTR [rip+0x38bcd]        # 244010 <gProducer_wake_count>
  20b443:	48 03 05 ce 8b 03 00 	add    rax,QWORD PTR [rip+0x38bce]        # 244018 <gConsumer_wake_count>
  20b44a:	0f 92 c1             	setb   cl
  20b44d:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  20b454:	88 8d e7 fe ff ff    	mov    BYTE PTR [rbp-0x119],cl
  20b45a:	72 02                	jb     20b45e <Futex+0x2ae>
  20b45c:	eb 10                	jmp    20b46e <Futex+0x2be>
  20b45e:	48 8d 3d 63 7d 03 00 	lea    rdi,[rip+0x37d63]        # 2431c8 <__unnamed_4>
  20b465:	31 c0                	xor    eax,eax
  20b467:	89 c6                	mov    esi,eax
  20b469:	e8 92 01 00 00       	call   20b600 <panic>
    defer warn("test Futex:- futex_wait counts={} futex_wake counts={}\n",
  20b46e:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  20b475:	48 8b b5 e8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x118]
  20b47c:	e8 3f 07 00 00       	call   20bbc0 <warn.16>
    var consumer_thread = try std.os.spawnThread(&gConsumer_context, consumer);
  20b481:	66 8b 45 a0          	mov    ax,WORD PTR [rbp-0x60]
  20b485:	48 8b bd 50 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb0]
  20b48c:	66 89 85 e4 fe ff ff 	mov    WORD PTR [rbp-0x11c],ax
  20b493:	e8 f8 07 00 00       	call   20bc90 <__zig_return_error>
  20b498:	66 8b 85 e4 fe ff ff 	mov    ax,WORD PTR [rbp-0x11c]
  20b49f:	48 81 c4 60 01 00 00 	add    rsp,0x160
  20b4a6:	5d                   	pop    rbp
  20b4a7:	c3                   	ret    
  20b4a8:	48 8d 3d 19 7d 03 00 	lea    rdi,[rip+0x37d19]        # 2431c8 <__unnamed_4>
  20b4af:	31 c0                	xor    eax,eax
  20b4b1:	89 c6                	mov    esi,eax
    var duration = end_time - start_time;
  20b4b3:	e8 48 01 00 00       	call   20b600 <panic>
  20b4b8:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  20b4bf:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
    warn("test Futex: time={.6}\n", @intToFloat(f64, end_time - start_time) / @intToFloat(f64, std.os.time.ns_per_s));
  20b4c6:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  20b4cd:	48 2b 8d 78 ff ff ff 	sub    rcx,QWORD PTR [rbp-0x88]
  20b4d4:	0f 92 c2             	setb   dl
  20b4d7:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
  20b4de:	88 95 d7 fe ff ff    	mov    BYTE PTR [rbp-0x129],dl
  20b4e4:	72 02                	jb     20b4e8 <Futex+0x338>
  20b4e6:	eb 10                	jmp    20b4f8 <Futex+0x348>
  20b4e8:	48 8d 3d d9 7c 03 00 	lea    rdi,[rip+0x37cd9]        # 2431c8 <__unnamed_4>
  20b4ef:	31 c0                	xor    eax,eax
  20b4f1:	89 c6                	mov    esi,eax
  20b4f3:	e8 08 01 00 00       	call   20b600 <panic>
  20b4f8:	31 c0                	xor    eax,eax
  20b4fa:	88 c1                	mov    cl,al
  20b4fc:	48 8b 95 d8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x128]
  20b503:	c4 e1 f9 6e c2       	vmovq  xmm0,rdx
  20b508:	c5 f9 6f 0d 90 4c ff 	vmovdqa xmm1,XMMWORD PTR [rip+0xffffffffffff4c90]        # 2001a0 <__unnamed_313-0x10>
  20b50f:	ff 
  20b510:	c5 f9 62 c1          	vpunpckldq xmm0,xmm0,xmm1
  20b514:	c5 f9 28 0d c4 51 ff 	vmovapd xmm1,XMMWORD PTR [rip+0xffffffffffff51c4]        # 2006e0 <__unnamed_69+0x10>
  20b51b:	ff 
  20b51c:	c5 f9 5c c1          	vsubpd xmm0,xmm0,xmm1
  20b520:	c5 f9 7c c0          	vhaddpd xmm0,xmm0,xmm0
  20b524:	f6 c1 01             	test   cl,0x1
  20b527:	c5 fb 11 85 c8 fe ff 	vmovsd QWORD PTR [rbp-0x138],xmm0
  20b52e:	ff 
  20b52f:	75 51                	jne    20b582 <Futex+0x3d2>
  20b531:	c5 fb 10 05 9f 56 ff 	vmovsd xmm0,QWORD PTR [rip+0xffffffffffff569f]        # 200bd8 <__unnamed_185+0x8>
  20b538:	ff 
  20b539:	c5 fb 10 8d c8 fe ff 	vmovsd xmm1,QWORD PTR [rbp-0x138]
  20b540:	ff 
  20b541:	c5 f3 5e c0          	vdivsd xmm0,xmm1,xmm0
  20b545:	e8 16 13 00 00       	call   20c860 <warn.18>

    assert(gCounter == max_counter * 2);
  20b54a:	48 81 3d cb 8a 03 00 	cmp    QWORD PTR [rip+0x38acb],0x1312d00        # 244020 <gCounter>
  20b551:	00 2d 31 01 
  20b555:	0f 94 c0             	sete   al
  20b558:	0f b6 f8             	movzx  edi,al
  20b55b:	e8 a0 fa ff ff       	call   20b000 <assert>
        gProducer_wait_count + gConsumer_wait_count, gProducer_wake_count + gConsumer_wake_count);
  20b560:	48 8b 0d 99 8a 03 00 	mov    rcx,QWORD PTR [rip+0x38a99]        # 244000 <gProducer_wait_count>
  20b567:	48 03 0d 9a 8a 03 00 	add    rcx,QWORD PTR [rip+0x38a9a]        # 244008 <gConsumer_wait_count>
  20b56e:	0f 92 c0             	setb   al
  20b571:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
  20b578:	88 85 bf fe ff ff    	mov    BYTE PTR [rbp-0x141],al
  20b57e:	72 12                	jb     20b592 <Futex+0x3e2>
  20b580:	eb 20                	jmp    20b5a2 <Futex+0x3f2>
  20b582:	48 8d 3d b7 7c 03 00 	lea    rdi,[rip+0x37cb7]        # 243240 <__unnamed_7>
  20b589:	31 c0                	xor    eax,eax
  20b58b:	89 c6                	mov    esi,eax
    warn("test Futex: time={.6}\n", @intToFloat(f64, end_time - start_time) / @intToFloat(f64, std.os.time.ns_per_s));
  20b58d:	e8 6e 00 00 00       	call   20b600 <panic>
  20b592:	48 8d 3d 2f 7c 03 00 	lea    rdi,[rip+0x37c2f]        # 2431c8 <__unnamed_4>
  20b599:	31 c0                	xor    eax,eax
  20b59b:	89 c6                	mov    esi,eax
        gProducer_wait_count + gConsumer_wait_count, gProducer_wake_count + gConsumer_wake_count);
  20b59d:	e8 5e 00 00 00       	call   20b600 <panic>
  20b5a2:	48 8b 05 67 8a 03 00 	mov    rax,QWORD PTR [rip+0x38a67]        # 244010 <gProducer_wake_count>
  20b5a9:	48 03 05 68 8a 03 00 	add    rax,QWORD PTR [rip+0x38a68]        # 244018 <gConsumer_wake_count>
  20b5b0:	0f 92 c1             	setb   cl
  20b5b3:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  20b5ba:	88 8d af fe ff ff    	mov    BYTE PTR [rbp-0x151],cl
  20b5c0:	72 02                	jb     20b5c4 <Futex+0x414>
  20b5c2:	eb 10                	jmp    20b5d4 <Futex+0x424>
  20b5c4:	48 8d 3d fd 7b 03 00 	lea    rdi,[rip+0x37bfd]        # 2431c8 <__unnamed_4>
  20b5cb:	31 c0                	xor    eax,eax
  20b5cd:	89 c6                	mov    esi,eax
  20b5cf:	e8 2c 00 00 00       	call   20b600 <panic>
    defer warn("test Futex:- futex_wait counts={} futex_wake counts={}\n",
  20b5d4:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  20b5db:	48 8b b5 b0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x150]
  20b5e2:	e8 d9 05 00 00       	call   20bbc0 <warn.16>
  20b5e7:	31 c0                	xor    eax,eax
  20b5e9:	66 89 c1             	mov    cx,ax
test "Futex" {
  20b5ec:	66 89 c8             	mov    ax,cx
  20b5ef:	48 81 c4 60 01 00 00 	add    rsp,0x160
  20b5f6:	5d                   	pop    rbp
  20b5f7:	c3                   	ret    
  20b5f8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  20b5ff:	00 

000000000020b600 <panic>:
// have to be added in the compiler.

const builtin = @import("builtin");
const std = @import("std");

pub fn panic(msg: []const u8, error_return_trace: ?*builtin.StackTrace) noreturn {
  20b600:	55                   	push   rbp
  20b601:	48 89 e5             	mov    rbp,rsp
  20b604:	48 83 ec 30          	sub    rsp,0x30
  20b608:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  20b60c:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
        // TODO: fix panic in zen.
        builtin.Os.freestanding, builtin.Os.zen => {
            while (true) {}
        },
        else => {
            const first_trace_addr = @ptrToInt(@returnAddress());
  20b610:	48 8b 75 08          	mov    rsi,QWORD PTR [rbp+0x8]
  20b614:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
            std.debug.panicExtra(error_return_trace, first_trace_addr, "{}", msg);
  20b618:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  20b61c:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  20b620:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  20b624:	c6 45 f8 01          	mov    BYTE PTR [rbp-0x8],0x1
  20b628:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  20b62c:	48 89 f7             	mov    rdi,rsi
  20b62f:	48 89 c6             	mov    rsi,rax
  20b632:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  20b636:	e8 05 00 00 00       	call   20b640 <panicExtra>
  20b63b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000020b640 <panicExtra>:
    panicExtra(null, first_trace_addr, format, args);
}

var panicking: u8 = 0; // TODO make this a bool

pub fn panicExtra(trace: ?*const builtin.StackTrace, first_trace_addr: ?usize, comptime format: []const u8, args: ...) noreturn {
  20b640:	55                   	push   rbp
  20b641:	48 89 e5             	mov    rbp,rsp
  20b644:	48 81 ec 60 01 00 00 	sub    rsp,0x160
  20b64b:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  20b652:	00 00 00 00 
  20b656:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
  20b65d:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
  20b664:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  20b66b:	1e 00 00 00 
  20b66f:	48 89 bd c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rdi
    @setCold(true);

    if (@atomicRmw(u8, &panicking, builtin.AtomicRmwOp.Xchg, 1, builtin.AtomicOrder.SeqCst) == 1) {
  20b676:	b1 01                	mov    cl,0x1
  20b678:	86 0d aa 89 03 00    	xchg   BYTE PTR [rip+0x389aa],cl        # 244028 <panicking>
  20b67e:	80 f9 01             	cmp    cl,0x1
  20b681:	48 89 b5 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rsi
  20b688:	48 89 95 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rdx
  20b68f:	75 05                	jne    20b696 <panicExtra+0x56>
        // Panicked during a panic.

        // TODO detect if a different thread caused the panic, because in that case
        // we would want to return here instead of calling abort, so that the thread
        // which first called panic can finish printing a stack trace.
        os.abort();
  20b691:	e8 8a 12 00 00       	call   20c920 <abort>
    if (@atomicRmw(u8, &panicking, builtin.AtomicRmwOp.Xchg, 1, builtin.AtomicOrder.SeqCst) == 1) {
  20b696:	eb 00                	jmp    20b698 <panicExtra+0x58>
  20b698:	48 8d bd e8 fe ff ff 	lea    rdi,[rbp-0x118]
  20b69f:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
    }
    const stderr = getStderrStream() catch os.abort();
  20b6a6:	e8 a5 12 00 00       	call   20c950 <getStderrStream>
  20b6ab:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  20b6b2:	00 
  20b6b3:	74 05                	je     20b6ba <panicExtra+0x7a>
  20b6b5:	e8 66 12 00 00       	call   20c920 <abort>
  20b6ba:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  20b6c1:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
  20b6c8:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  20b6cf:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
  20b6d6:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
    stderr.print(format ++ "\n", args) catch os.abort();
  20b6dd:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  20b6e4:	48 8b 95 a8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x158]
  20b6eb:	e8 70 13 00 00       	call   20ca60 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print>
  20b6f0:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  20b6f7:	66 83 bd d6 fe ff ff 	cmp    WORD PTR [rbp-0x12a],0x0
  20b6fe:	00 
  20b6ff:	74 05                	je     20b706 <panicExtra+0xc6>
  20b701:	e8 1a 12 00 00       	call   20c920 <abort>
    if (trace) |t| {
  20b706:	48 83 bd c8 fe ff ff 	cmp    QWORD PTR [rbp-0x138],0x0
  20b70d:	00 
  20b70e:	74 1c                	je     20b72c <panicExtra+0xec>
  20b710:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  20b717:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
        dumpStackTrace(t);
  20b71e:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  20b725:	e8 86 13 00 00       	call   20cab0 <dumpStackTrace>
    if (trace) |t| {
  20b72a:	eb 02                	jmp    20b72e <panicExtra+0xee>
  20b72c:	eb 00                	jmp    20b72e <panicExtra+0xee>
    }
    dumpCurrentStackTrace(first_trace_addr);
  20b72e:	48 8b bd b0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x150]
  20b735:	e8 26 16 00 00       	call   20cd60 <dumpCurrentStackTrace>

    os.abort();
  20b73a:	e8 e1 11 00 00       	call   20c920 <abort>
  20b73f:	90                   	nop

000000000020b740 <warn>:
pub fn warn(comptime fmt: []const u8, args: ...) void {
  20b740:	55                   	push   rbp
  20b741:	48 89 e5             	mov    rbp,rsp
  20b744:	48 81 ec 40 01 00 00 	sub    rsp,0x140
  20b74b:	48 8d bd e8 fe ff ff 	lea    rdi,[rbp-0x118]
  20b752:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  20b759:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
  20b760:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  20b767:	00 00 00 00 
  20b76b:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
  20b772:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  20b779:	1e 00 00 00 
    const stderr = getStderrStream() catch return;
  20b77d:	e8 ce 11 00 00       	call   20c950 <getStderrStream>
  20b782:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  20b789:	00 
  20b78a:	74 09                	je     20b795 <warn+0x55>
  20b78c:	48 81 c4 40 01 00 00 	add    rsp,0x140
  20b793:	5d                   	pop    rbp
  20b794:	c3                   	ret    
  20b795:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  20b79c:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
  20b7a3:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  20b7aa:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  20b7b1:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
    stderr.print(fmt, args) catch return;
  20b7b8:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  20b7bf:	e8 3c 18 00 00       	call   20d000 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.19>
  20b7c4:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  20b7cb:	66 83 bd d6 fe ff ff 	cmp    WORD PTR [rbp-0x12a],0x0
  20b7d2:	00 
  20b7d3:	74 09                	je     20b7de <warn+0x9e>
  20b7d5:	48 81 c4 40 01 00 00 	add    rsp,0x140
  20b7dc:	5d                   	pop    rbp
  20b7dd:	c3                   	ret    
pub fn warn(comptime fmt: []const u8, args: ...) void {
  20b7de:	48 81 c4 40 01 00 00 	add    rsp,0x140
  20b7e5:	5d                   	pop    rbp
  20b7e6:	c3                   	ret    
  20b7e7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  20b7ee:	00 00 

000000000020b7f0 <ThreadContext_init>:
    pub fn init(pSelf: *Self) void {
  20b7f0:	55                   	push   rbp
  20b7f1:	48 89 e5             	mov    rbp,rsp
  20b7f4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
        pSelf.counter = 0;
  20b7f8:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  20b7fc:	48 c7 47 08 00 00 00 	mov    QWORD PTR [rdi+0x8],0x0
  20b803:	00 
  20b804:	48 c7 07 00 00 00 00 	mov    QWORD PTR [rdi],0x0
    pub fn init(pSelf: *Self) void {
  20b80b:	5d                   	pop    rbp
  20b80c:	c3                   	ret    
  20b80d:	0f 1f 00             	nop    DWORD PTR [rax]

000000000020b810 <Timer_start>:
    pub fn start() TimerError!Timer {
  20b810:	55                   	push   rbp
  20b811:	48 89 e5             	mov    rbp,rsp
  20b814:	48 81 ec 30 01 00 00 	sub    rsp,0x130
  20b81b:	48 89 f8             	mov    rax,rdi
        var self: Timer = undefined;
  20b81e:	c5 fa 6f 05 8a 4a ff 	vmovdqu xmm0,XMMWORD PTR [rip+0xffffffffffff4a8a]        # 2002b0 <__unnamed_100>
  20b825:	ff 
  20b826:	c5 f9 7f 45 a0       	vmovdqa XMMWORD PTR [rbp-0x60],xmm0
                var ts: posix.timespec = undefined;
  20b82b:	c5 fa 6f 05 7d 4a ff 	vmovdqu xmm0,XMMWORD PTR [rip+0xffffffffffff4a7d]        # 2002b0 <__unnamed_100>
  20b832:	ff 
  20b833:	c5 f9 7f 45 90       	vmovdqa XMMWORD PTR [rbp-0x70],xmm0
                var result = posix.clock_getres(monotonic_clock_id, &ts);
  20b838:	b9 01 00 00 00       	mov    ecx,0x1
  20b83d:	48 8d 55 90          	lea    rdx,[rbp-0x70]
  20b841:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
  20b848:	89 cf                	mov    edi,ecx
  20b84a:	48 89 b5 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rsi
  20b851:	48 89 d6             	mov    rsi,rdx
  20b854:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  20b85b:	e8 f0 17 00 00       	call   20d050 <clock_getres>
  20b860:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
                var errno = posix.getErrno(result);
  20b864:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  20b868:	e8 13 18 00 00       	call   20d080 <getErrno>
  20b86d:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
                switch (errno) {
  20b871:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  20b875:	48 85 c0             	test   rax,rax
  20b878:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  20b87f:	74 74                	je     20b8f5 <Timer_start+0xe5>
  20b881:	eb 00                	jmp    20b883 <Timer_start+0x73>
  20b883:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  20b88a:	48 83 e8 16          	sub    rax,0x16
  20b88e:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  20b895:	74 60                	je     20b8f7 <Timer_start+0xe7>
  20b897:	eb 00                	jmp    20b899 <Timer_start+0x89>
                    else => return std.os.unexpectedErrorPosix(errno),
  20b899:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  20b89d:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  20b8a4:	e8 77 18 00 00       	call   20d120 <unexpectedErrorPosix>
  20b8a9:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  20b8b0:	66 89 85 56 ff ff ff 	mov    WORD PTR [rbp-0xaa],ax
  20b8b7:	e8 d4 03 00 00       	call   20bc90 <__zig_return_error>
  20b8bc:	66 8b 85 56 ff ff ff 	mov    ax,WORD PTR [rbp-0xaa]
  20b8c3:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  20b8c7:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  20b8cb:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  20b8d2:	48 89 37             	mov    QWORD PTR [rdi],rsi
  20b8d5:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20b8d9:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  20b8dd:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20b8e1:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  20b8e5:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  20b8ec:	48 81 c4 30 01 00 00 	add    rsp,0x130
  20b8f3:	5d                   	pop    rbp
  20b8f4:	c3                   	ret    
                switch (errno) {
  20b8f5:	eb 43                	jmp    20b93a <Timer_start+0x12a>
                    posix.EINVAL => return error.TimerUnsupported,
  20b8f7:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  20b8fe:	e8 8d 03 00 00       	call   20bc90 <__zig_return_error>
  20b903:	48 8b 3d e6 d1 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffffd1e6]        # 208af0 <__unnamed_10>
  20b90a:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  20b911:	48 89 38             	mov    QWORD PTR [rax],rdi
  20b914:	48 8b 3d dd d1 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffffd1dd]        # 208af8 <__unnamed_10+0x8>
  20b91b:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  20b91f:	48 8b 3d da d1 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffffd1da]        # 208b00 <__unnamed_10+0x10>
  20b926:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  20b92a:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  20b931:	48 81 c4 30 01 00 00 	add    rsp,0x130
  20b938:	5d                   	pop    rbp
  20b939:	c3                   	ret    
  20b93a:	48 8d 45 a0          	lea    rax,[rbp-0x60]
                self.resolution = @intCast(u64, ts.tv_sec) * u64(ns_per_s) + @intCast(u64, ts.tv_nsec);
  20b93e:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  20b942:	48 83 f9 00          	cmp    rcx,0x0
  20b946:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  20b94d:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
  20b954:	0f 8d 8c 00 00 00    	jge    20b9e6 <Timer_start+0x1d6>
  20b95a:	e9 ae 00 00 00       	jmp    20ba0d <Timer_start+0x1fd>
                if (errno != 0) return std.os.unexpectedErrorPosix(errno);
  20b95f:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  20b963:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  20b96a:	e8 b1 17 00 00       	call   20d120 <unexpectedErrorPosix>
  20b96f:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  20b976:	66 89 85 3e ff ff ff 	mov    WORD PTR [rbp-0xc2],ax
  20b97d:	e8 0e 03 00 00       	call   20bc90 <__zig_return_error>
  20b982:	66 8b 85 3e ff ff ff 	mov    ax,WORD PTR [rbp-0xc2]
  20b989:	66 89 45 d0          	mov    WORD PTR [rbp-0x30],ax
  20b98d:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  20b991:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  20b998:	48 89 37             	mov    QWORD PTR [rdi],rsi
  20b99b:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  20b99f:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  20b9a3:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  20b9a7:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  20b9ab:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  20b9b2:	48 81 c4 30 01 00 00 	add    rsp,0x130
  20b9b9:	5d                   	pop    rbp
  20b9ba:	c3                   	ret    
  20b9bb:	eb 00                	jmp    20b9bd <Timer_start+0x1ad>
  20b9bd:	48 8d 45 a0          	lea    rax,[rbp-0x60]
                self.start_time = @intCast(u64, ts.tv_sec) * u64(ns_per_s) + @intCast(u64, ts.tv_nsec);
  20b9c1:	48 83 c0 08          	add    rax,0x8
  20b9c5:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  20b9c9:	48 83 f9 00          	cmp    rcx,0x0
  20b9cd:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  20b9d4:	48 89 8d 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rcx
  20b9db:	0f 8d e2 00 00 00    	jge    20bac3 <Timer_start+0x2b3>
  20b9e1:	e9 04 01 00 00       	jmp    20baea <Timer_start+0x2da>
  20b9e6:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
  20b9eb:	89 c1                	mov    ecx,eax
                self.resolution = @intCast(u64, ts.tv_sec) * u64(ns_per_s) + @intCast(u64, ts.tv_nsec);
  20b9ed:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  20b9f4:	48 f7 e1             	mul    rcx
  20b9f7:	40 0f 90 c6          	seto   sil
  20b9fb:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
  20ba02:	40 88 b5 1f ff ff ff 	mov    BYTE PTR [rbp-0xe1],sil
  20ba09:	70 12                	jo     20ba1d <Timer_start+0x20d>
  20ba0b:	eb 20                	jmp    20ba2d <Timer_start+0x21d>
  20ba0d:	48 8d 3d 74 78 03 00 	lea    rdi,[rip+0x37874]        # 243288 <__unnamed_3>
  20ba14:	31 c0                	xor    eax,eax
  20ba16:	89 c6                	mov    esi,eax
  20ba18:	e8 e3 fb ff ff       	call   20b600 <panic>
  20ba1d:	48 8d 3d a4 77 03 00 	lea    rdi,[rip+0x377a4]        # 2431c8 <__unnamed_4>
  20ba24:	31 c0                	xor    eax,eax
  20ba26:	89 c6                	mov    esi,eax
  20ba28:	e8 d3 fb ff ff       	call   20b600 <panic>
  20ba2d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  20ba31:	48 83 f8 00          	cmp    rax,0x0
  20ba35:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
  20ba3c:	7c 25                	jl     20ba63 <Timer_start+0x253>
  20ba3e:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  20ba45:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  20ba4c:	48 01 c8             	add    rax,rcx
  20ba4f:	0f 92 c2             	setb   dl
  20ba52:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
  20ba59:	88 95 07 ff ff ff    	mov    BYTE PTR [rbp-0xf9],dl
  20ba5f:	72 12                	jb     20ba73 <Timer_start+0x263>
  20ba61:	eb 20                	jmp    20ba83 <Timer_start+0x273>
  20ba63:	48 8d 3d 1e 78 03 00 	lea    rdi,[rip+0x3781e]        # 243288 <__unnamed_3>
  20ba6a:	31 c0                	xor    eax,eax
  20ba6c:	89 c6                	mov    esi,eax
  20ba6e:	e8 8d fb ff ff       	call   20b600 <panic>
  20ba73:	48 8d 3d 4e 77 03 00 	lea    rdi,[rip+0x3774e]        # 2431c8 <__unnamed_4>
  20ba7a:	31 c0                	xor    eax,eax
  20ba7c:	89 c6                	mov    esi,eax
  20ba7e:	e8 7d fb ff ff       	call   20b600 <panic>
  20ba83:	bf 01 00 00 00       	mov    edi,0x1
  20ba88:	48 8d 75 90          	lea    rsi,[rbp-0x70]
  20ba8c:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  20ba93:	48 8b 8d 08 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf8]
  20ba9a:	48 89 08             	mov    QWORD PTR [rax],rcx
                result = posix.clock_gettime(monotonic_clock_id, &ts);
  20ba9d:	e8 9e 16 00 00       	call   20d140 <clock_gettime>
  20baa2:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
                errno = posix.getErrno(result);
  20baa6:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  20baaa:	e8 d1 15 00 00       	call   20d080 <getErrno>
  20baaf:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
                if (errno != 0) return std.os.unexpectedErrorPosix(errno);
  20bab3:	48 83 7d 80 00       	cmp    QWORD PTR [rbp-0x80],0x0
  20bab8:	0f 85 a1 fe ff ff    	jne    20b95f <Timer_start+0x14f>
  20babe:	e9 f8 fe ff ff       	jmp    20b9bb <Timer_start+0x1ab>
  20bac3:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
  20bac8:	89 c1                	mov    ecx,eax
                self.start_time = @intCast(u64, ts.tv_sec) * u64(ns_per_s) + @intCast(u64, ts.tv_nsec);
  20baca:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  20bad1:	48 f7 e1             	mul    rcx
  20bad4:	40 0f 90 c6          	seto   sil
  20bad8:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  20badf:	40 88 b5 f7 fe ff ff 	mov    BYTE PTR [rbp-0x109],sil
  20bae6:	70 12                	jo     20bafa <Timer_start+0x2ea>
  20bae8:	eb 20                	jmp    20bb0a <Timer_start+0x2fa>
  20baea:	48 8d 3d 97 77 03 00 	lea    rdi,[rip+0x37797]        # 243288 <__unnamed_3>
  20baf1:	31 c0                	xor    eax,eax
  20baf3:	89 c6                	mov    esi,eax
  20baf5:	e8 06 fb ff ff       	call   20b600 <panic>
  20bafa:	48 8d 3d c7 76 03 00 	lea    rdi,[rip+0x376c7]        # 2431c8 <__unnamed_4>
  20bb01:	31 c0                	xor    eax,eax
  20bb03:	89 c6                	mov    esi,eax
  20bb05:	e8 f6 fa ff ff       	call   20b600 <panic>
  20bb0a:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  20bb0e:	48 83 f8 00          	cmp    rax,0x0
  20bb12:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  20bb19:	7c 25                	jl     20bb40 <Timer_start+0x330>
  20bb1b:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  20bb22:	48 8b 8d e8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x118]
  20bb29:	48 01 c8             	add    rax,rcx
  20bb2c:	0f 92 c2             	setb   dl
  20bb2f:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
  20bb36:	88 95 df fe ff ff    	mov    BYTE PTR [rbp-0x121],dl
  20bb3c:	72 12                	jb     20bb50 <Timer_start+0x340>
  20bb3e:	eb 20                	jmp    20bb60 <Timer_start+0x350>
  20bb40:	48 8d 3d 41 77 03 00 	lea    rdi,[rip+0x37741]        # 243288 <__unnamed_3>
  20bb47:	31 c0                	xor    eax,eax
  20bb49:	89 c6                	mov    esi,eax
  20bb4b:	e8 b0 fa ff ff       	call   20b600 <panic>
  20bb50:	48 8d 3d 71 76 03 00 	lea    rdi,[rip+0x37671]        # 2431c8 <__unnamed_4>
  20bb57:	31 c0                	xor    eax,eax
  20bb59:	89 c6                	mov    esi,eax
  20bb5b:	e8 a0 fa ff ff       	call   20b600 <panic>
  20bb60:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  20bb67:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  20bb6e:	48 89 08             	mov    QWORD PTR [rax],rcx
        return self;
  20bb71:	66 c7 45 b8 00 00    	mov    WORD PTR [rbp-0x48],0x0
  20bb77:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  20bb7b:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
  20bb7f:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  20bb83:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
  20bb87:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  20bb8b:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
  20bb92:	48 89 16             	mov    QWORD PTR [rsi],rdx
  20bb95:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  20bb99:	48 89 56 08          	mov    QWORD PTR [rsi+0x8],rdx
  20bb9d:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  20bba1:	48 89 56 10          	mov    QWORD PTR [rsi+0x10],rdx
  20bba5:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  20bbac:	48 81 c4 30 01 00 00 	add    rsp,0x130
  20bbb3:	5d                   	pop    rbp
  20bbb4:	c3                   	ret    
  20bbb5:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20bbbc:	00 00 00 00 

000000000020bbc0 <warn.16>:
  20bbc0:	55                   	push   rbp
  20bbc1:	48 89 e5             	mov    rbp,rsp
  20bbc4:	48 81 ec 50 01 00 00 	sub    rsp,0x150
  20bbcb:	48 8d 85 e8 fe ff ff 	lea    rax,[rbp-0x118]
  20bbd2:	48 8d 8d f8 fe ff ff 	lea    rcx,[rbp-0x108]
  20bbd9:	48 8d 95 10 ff ff ff 	lea    rdx,[rbp-0xf0]
  20bbe0:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  20bbe7:	00 00 00 00 
  20bbeb:	48 89 95 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rdx
  20bbf2:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  20bbf9:	1e 00 00 00 
  20bbfd:	48 89 bd c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rdi
  20bc04:	48 89 b5 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rsi
    const stderr = getStderrStream() catch return;
  20bc0b:	48 89 c7             	mov    rdi,rax
  20bc0e:	48 89 ce             	mov    rsi,rcx
  20bc11:	e8 3a 0d 00 00       	call   20c950 <getStderrStream>
  20bc16:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  20bc1d:	00 
  20bc1e:	74 09                	je     20bc29 <warn.16+0x69>
  20bc20:	48 81 c4 50 01 00 00 	add    rsp,0x150
  20bc27:	5d                   	pop    rbp
  20bc28:	c3                   	ret    
  20bc29:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  20bc30:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  20bc37:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  20bc3e:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  20bc45:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
    stderr.print(fmt, args) catch return;
  20bc4c:	48 8b b5 b8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x148]
  20bc53:	48 8b 95 c8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x138]
  20bc5a:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  20bc61:	e8 6a 15 00 00       	call   20d1d0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.20>
  20bc66:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  20bc6d:	66 83 bd d6 fe ff ff 	cmp    WORD PTR [rbp-0x12a],0x0
  20bc74:	00 
  20bc75:	74 09                	je     20bc80 <warn.16+0xc0>
  20bc77:	48 81 c4 50 01 00 00 	add    rsp,0x150
  20bc7e:	5d                   	pop    rbp
  20bc7f:	c3                   	ret    
pub fn warn(comptime fmt: []const u8, args: ...) void {
  20bc80:	48 81 c4 50 01 00 00 	add    rsp,0x150
  20bc87:	5d                   	pop    rbp
  20bc88:	c3                   	ret    
  20bc89:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

000000000020bc90 <__zig_return_error>:
  20bc90:	55                   	push   rbp
  20bc91:	48 89 e5             	mov    rbp,rsp
  20bc94:	48 8b 45 08          	mov    rax,QWORD PTR [rbp+0x8]
  20bc98:	48 8b 4f 10          	mov    rcx,QWORD PTR [rdi+0x10]
  20bc9c:	48 8b 17             	mov    rdx,QWORD PTR [rdi]
  20bc9f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  20bca3:	48 89 d0             	mov    rax,rdx
  20bca6:	31 f6                	xor    esi,esi
  20bca8:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  20bcac:	89 f2                	mov    edx,esi
  20bcae:	48 f7 f1             	div    rcx
  20bcb1:	48 8b 4f 08          	mov    rcx,QWORD PTR [rdi+0x8]
  20bcb5:	4c 8b 45 f8          	mov    r8,QWORD PTR [rbp-0x8]
  20bcb9:	4c 89 04 d1          	mov    QWORD PTR [rcx+rdx*8],r8
  20bcbd:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  20bcc1:	48 83 c1 01          	add    rcx,0x1
  20bcc5:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  20bcc8:	5d                   	pop    rbp
  20bcc9:	c3                   	ret    
  20bcca:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000020bcd0 <Timer_read>:
    pub fn read(self: *Timer) u64 {
  20bcd0:	55                   	push   rbp
  20bcd1:	48 89 e5             	mov    rbp,rsp
  20bcd4:	48 83 ec 20          	sub    rsp,0x20
  20bcd8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
        var clock = clockNative() - self.start_time;
  20bcdc:	e8 5f f3 ff ff       	call   20b040 <Timer_clockLinux>
  20bce1:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  20bce5:	48 2b 47 08          	sub    rax,QWORD PTR [rdi+0x8]
  20bce9:	0f 92 c1             	setb   cl
  20bcec:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  20bcf0:	88 4d e7             	mov    BYTE PTR [rbp-0x19],cl
  20bcf3:	72 02                	jb     20bcf7 <Timer_read+0x27>
  20bcf5:	eb 10                	jmp    20bd07 <Timer_read+0x37>
  20bcf7:	48 8d 3d ca 74 03 00 	lea    rdi,[rip+0x374ca]        # 2431c8 <__unnamed_4>
  20bcfe:	31 c0                	xor    eax,eax
  20bd00:	89 c6                	mov    esi,eax
  20bd02:	e8 f9 f8 ff ff       	call   20b600 <panic>
  20bd07:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20bd0b:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
            Os.linux => clock,
  20bd0f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
        return switch (builtin.os) {
  20bd13:	48 83 c4 20          	add    rsp,0x20
  20bd17:	5d                   	pop    rbp
  20bd18:	c3                   	ret    
  20bd19:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

000000000020bd20 <spawnThread>:

/// caller must call wait on the returned thread
/// fn startFn(@typeOf(context)) T
/// where T is u8, noreturn, void, or !void
/// caller must call wait on the returned thread
pub fn spawnThread(context: var, comptime startFn: var) SpawnThreadError!*Thread {
  20bd20:	55                   	push   rbp
  20bd21:	48 89 e5             	mov    rbp,rsp
  20bd24:	48 81 ec 40 01 00 00 	sub    rsp,0x140
  20bd2b:	48 89 f8             	mov    rax,rdi
  20bd2e:	31 c9                	xor    ecx,ecx
  20bd30:	41 89 c8             	mov    r8d,ecx
  20bd33:	b9 00 00 80 00       	mov    ecx,0x800000
  20bd38:	41 89 c9             	mov    r9d,ecx
  20bd3b:	b9 03 00 00 00       	mov    ecx,0x3
  20bd40:	41 89 ca             	mov    r10d,ecx
  20bd43:	b9 22 01 00 00       	mov    ecx,0x122
  20bd48:	41 bb ff ff ff ff    	mov    r11d,0xffffffff
  20bd4e:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
    };

    const MAP_GROWSDOWN = if (builtin.os == builtin.Os.linux) linux.MAP_GROWSDOWN else 0;

    const mmap_len = default_stack_size;
    const stack_addr = posix.mmap(null, mmap_len, posix.PROT_READ | posix.PROT_WRITE, posix.MAP_PRIVATE | posix.MAP_ANONYMOUS | MAP_GROWSDOWN, -1, 0);
  20bd52:	48 89 7d 90          	mov    QWORD PTR [rbp-0x70],rdi
  20bd56:	4c 89 c7             	mov    rdi,r8
  20bd59:	48 89 75 88          	mov    QWORD PTR [rbp-0x78],rsi
  20bd5d:	4c 89 ce             	mov    rsi,r9
  20bd60:	4c 89 d2             	mov    rdx,r10
  20bd63:	4c 89 45 80          	mov    QWORD PTR [rbp-0x80],r8
  20bd67:	45 89 d8             	mov    r8d,r11d
  20bd6a:	4c 8b 4d 80          	mov    r9,QWORD PTR [rbp-0x80]
  20bd6e:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  20bd75:	e8 86 17 00 00       	call   20d500 <mmap>
  20bd7a:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
    if (stack_addr == posix.MAP_FAILED) return error.OutOfMemory;
  20bd7e:	48 83 7d d0 ff       	cmp    QWORD PTR [rbp-0x30],0xffffffffffffffff
  20bd83:	75 32                	jne    20bdb7 <spawnThread+0x97>
  20bd85:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  20bd89:	e8 02 ff ff ff       	call   20bc90 <__zig_return_error>
  20bd8e:	48 8b 3d db 46 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff46db]        # 200470 <__unnamed_11>
  20bd95:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  20bd99:	48 89 38             	mov    QWORD PTR [rax],rdi
  20bd9c:	48 8b 3d d5 46 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff46d5]        # 200478 <__unnamed_11+0x8>
  20bda3:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  20bda7:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  20bdae:	48 81 c4 40 01 00 00 	add    rsp,0x140
  20bdb5:	5d                   	pop    rbp
  20bdb6:	c3                   	ret    
  20bdb7:	eb 00                	jmp    20bdb9 <spawnThread+0x99>
    errdefer assert(posix.munmap(stack_addr, mmap_len) == 0);

    var stack_end: usize = stack_addr + mmap_len;
  20bdb9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20bdbd:	48 05 00 00 80 00    	add    rax,0x800000
  20bdc3:	0f 92 c1             	setb   cl
  20bdc6:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  20bdcd:	88 8d 6f ff ff ff    	mov    BYTE PTR [rbp-0x91],cl
  20bdd3:	0f 82 84 01 00 00    	jb     20bf5d <spawnThread+0x23d>
  20bdd9:	e9 8f 01 00 00       	jmp    20bf6d <spawnThread+0x24d>
            posix.EINVAL => unreachable,
            posix.ENOMEM => return SpawnThreadError.SystemResources,
            posix.ENOSPC => unreachable,
            posix.EPERM => unreachable,
            posix.EUSERS => unreachable,
            else => return unexpectedErrorPosix(err),
  20bdde:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  20bde2:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  20bde6:	e8 35 13 00 00       	call   20d120 <unexpectedErrorPosix>
  20bdeb:	b9 00 00 80 00       	mov    ecx,0x800000
  20bdf0:	89 ce                	mov    esi,ecx
    errdefer assert(posix.munmap(stack_addr, mmap_len) == 0);
  20bdf2:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  20bdf6:	66 89 85 6c ff ff ff 	mov    WORD PTR [rbp-0x94],ax
  20bdfd:	e8 8e 17 00 00       	call   20d590 <munmap>
  20be02:	48 83 f8 00          	cmp    rax,0x0
  20be06:	0f 94 c2             	sete   dl
  20be09:	0f b6 fa             	movzx  edi,dl
  20be0c:	e8 ef f1 ff ff       	call   20b000 <assert>
            else => return unexpectedErrorPosix(err),
  20be11:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  20be15:	e8 76 fe ff ff       	call   20bc90 <__zig_return_error>
  20be1a:	66 44 8b 85 6c ff ff 	mov    r8w,WORD PTR [rbp-0x94]
  20be21:	ff 
  20be22:	66 44 89 45 f0       	mov    WORD PTR [rbp-0x10],r8w
  20be27:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20be2b:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  20be2f:	48 89 06             	mov    QWORD PTR [rsi],rax
  20be32:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20be36:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  20be3a:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  20be41:	48 81 c4 40 01 00 00 	add    rsp,0x140
  20be48:	5d                   	pop    rbp
  20be49:	c3                   	ret    
            0 => return thread_ptr,
  20be4a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20be4e:	66 c7 45 e0 00 00    	mov    WORD PTR [rbp-0x20],0x0
  20be54:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  20be58:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20be5c:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  20be60:	48 89 01             	mov    QWORD PTR [rcx],rax
  20be63:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20be67:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20be6b:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  20be72:	48 81 c4 40 01 00 00 	add    rsp,0x140
  20be79:	5d                   	pop    rbp
  20be7a:	c3                   	ret    
  20be7b:	b8 00 00 80 00       	mov    eax,0x800000
  20be80:	89 c6                	mov    esi,eax
    errdefer assert(posix.munmap(stack_addr, mmap_len) == 0);
  20be82:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  20be86:	e8 05 17 00 00       	call   20d590 <munmap>
  20be8b:	48 83 f8 00          	cmp    rax,0x0
  20be8f:	0f 94 c1             	sete   cl
  20be92:	0f b6 f9             	movzx  edi,cl
  20be95:	e8 66 f1 ff ff       	call   20b000 <assert>
            posix.EAGAIN => return SpawnThreadError.ThreadQuotaExceeded,
  20be9a:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  20be9e:	e8 ed fd ff ff       	call   20bc90 <__zig_return_error>
  20bea3:	48 8b 05 96 4a ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff4a96]        # 200940 <__unnamed_12>
  20beaa:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  20beae:	48 89 06             	mov    QWORD PTR [rsi],rax
  20beb1:	48 8b 05 90 4a ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff4a90]        # 200948 <__unnamed_12+0x8>
  20beb8:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  20bebc:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  20bec3:	48 81 c4 40 01 00 00 	add    rsp,0x140
  20beca:	5d                   	pop    rbp
  20becb:	c3                   	ret    
  20becc:	48 8d 3d 2d 74 03 00 	lea    rdi,[rip+0x3742d]        # 243300 <__unnamed_13>
  20bed3:	31 c0                	xor    eax,eax
  20bed5:	89 c6                	mov    esi,eax
            posix.EINVAL => unreachable,
  20bed7:	e8 24 f7 ff ff       	call   20b600 <panic>
  20bedc:	b8 00 00 80 00       	mov    eax,0x800000
  20bee1:	89 c6                	mov    esi,eax
    errdefer assert(posix.munmap(stack_addr, mmap_len) == 0);
  20bee3:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  20bee7:	e8 a4 16 00 00       	call   20d590 <munmap>
  20beec:	48 83 f8 00          	cmp    rax,0x0
  20bef0:	0f 94 c1             	sete   cl
  20bef3:	0f b6 f9             	movzx  edi,cl
  20bef6:	e8 05 f1 ff ff       	call   20b000 <assert>
            posix.ENOMEM => return SpawnThreadError.SystemResources,
  20befb:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  20beff:	e8 8c fd ff ff       	call   20bc90 <__zig_return_error>
  20bf04:	48 8b 05 75 45 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff4575]        # 200480 <__unnamed_14>
  20bf0b:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  20bf0f:	48 89 06             	mov    QWORD PTR [rsi],rax
  20bf12:	48 8b 05 6f 45 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff456f]        # 200488 <__unnamed_14+0x8>
  20bf19:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  20bf1d:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  20bf24:	48 81 c4 40 01 00 00 	add    rsp,0x140
  20bf2b:	5d                   	pop    rbp
  20bf2c:	c3                   	ret    
  20bf2d:	48 8d 3d cc 73 03 00 	lea    rdi,[rip+0x373cc]        # 243300 <__unnamed_13>
  20bf34:	31 c0                	xor    eax,eax
  20bf36:	89 c6                	mov    esi,eax
            posix.ENOSPC => unreachable,
  20bf38:	e8 c3 f6 ff ff       	call   20b600 <panic>
  20bf3d:	48 8d 3d bc 73 03 00 	lea    rdi,[rip+0x373bc]        # 243300 <__unnamed_13>
  20bf44:	31 c0                	xor    eax,eax
  20bf46:	89 c6                	mov    esi,eax
            posix.EPERM => unreachable,
  20bf48:	e8 b3 f6 ff ff       	call   20b600 <panic>
  20bf4d:	48 8d 3d ac 73 03 00 	lea    rdi,[rip+0x373ac]        # 243300 <__unnamed_13>
  20bf54:	31 c0                	xor    eax,eax
  20bf56:	89 c6                	mov    esi,eax
            posix.EUSERS => unreachable,
  20bf58:	e8 a3 f6 ff ff       	call   20b600 <panic>
  20bf5d:	48 8d 3d 64 72 03 00 	lea    rdi,[rip+0x37264]        # 2431c8 <__unnamed_4>
  20bf64:	31 c0                	xor    eax,eax
  20bf66:	89 c6                	mov    esi,eax
    var stack_end: usize = stack_addr + mmap_len;
  20bf68:	e8 93 f6 ff ff       	call   20b600 <panic>
  20bf6d:	be aa 00 00 00       	mov    esi,0xaa
  20bf72:	b8 08 00 00 00       	mov    eax,0x8
  20bf77:	89 c2                	mov    edx,eax
  20bf79:	48 8d 4d c0          	lea    rcx,[rbp-0x40]
  20bf7d:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  20bf84:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
    var arg: usize = undefined;
  20bf88:	48 89 cf             	mov    rdi,rcx
  20bf8b:	e8 c0 88 02 00       	call   234850 <memset>
        stack_end -= @sizeOf(Context);
  20bf90:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  20bf94:	48 83 e9 08          	sub    rcx,0x8
  20bf98:	41 0f 92 c0          	setb   r8b
  20bf9c:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
  20bfa3:	44 88 85 5f ff ff ff 	mov    BYTE PTR [rbp-0xa1],r8b
  20bfaa:	72 02                	jb     20bfae <spawnThread+0x28e>
  20bfac:	eb 10                	jmp    20bfbe <spawnThread+0x29e>
  20bfae:	48 8d 3d 13 72 03 00 	lea    rdi,[rip+0x37213]        # 2431c8 <__unnamed_4>
  20bfb5:	31 c0                	xor    eax,eax
  20bfb7:	89 c6                	mov    esi,eax
  20bfb9:	e8 42 f6 ff ff       	call   20b600 <panic>
  20bfbe:	31 c0                	xor    eax,eax
  20bfc0:	88 c1                	mov    cl,al
  20bfc2:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  20bfc9:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
        stack_end -= stack_end % @alignOf(Context);
  20bfcd:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  20bfd1:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20bfd5:	f6 c1 01             	test   cl,0x1
  20bfd8:	48 89 bd 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdi
  20bfdf:	48 89 b5 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rsi
  20bfe6:	75 29                	jne    20c011 <spawnThread+0x2f1>
  20bfe8:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  20bfef:	48 83 e0 07          	and    rax,0x7
  20bff3:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
  20bffa:	48 29 c1             	sub    rcx,rax
  20bffd:	0f 92 c2             	setb   dl
  20c000:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
  20c007:	88 95 3f ff ff ff    	mov    BYTE PTR [rbp-0xc1],dl
  20c00d:	72 12                	jb     20c021 <spawnThread+0x301>
  20c00f:	eb 20                	jmp    20c031 <spawnThread+0x311>
  20c011:	48 8d 3d d0 72 03 00 	lea    rdi,[rip+0x372d0]        # 2432e8 <__unnamed_15>
  20c018:	31 c0                	xor    eax,eax
  20c01a:	89 c6                	mov    esi,eax
  20c01c:	e8 df f5 ff ff       	call   20b600 <panic>
  20c021:	48 8d 3d a0 71 03 00 	lea    rdi,[rip+0x371a0]        # 2431c8 <__unnamed_4>
  20c028:	31 c0                	xor    eax,eax
  20c02a:	89 c6                	mov    esi,eax
  20c02c:	e8 cf f5 ff ff       	call   20b600 <panic>
  20c031:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  20c038:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
        assert(stack_end >= stack_addr);
  20c03c:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  20c040:	48 3b 4d d0          	cmp    rcx,QWORD PTR [rbp-0x30]
  20c044:	0f 93 c2             	setae  dl
  20c047:	0f b6 fa             	movzx  edi,dl
  20c04a:	e8 b1 ef ff ff       	call   20b000 <assert>
        const context_ptr = @alignCast(@alignOf(Context), @intToPtr(*Context, stack_end));
  20c04f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20c053:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
        context_ptr.* = context;
  20c057:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  20c05b:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  20c05f:	48 89 08             	mov    QWORD PTR [rax],rcx
        arg = stack_end;
  20c062:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20c066:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
    stack_end -= @sizeOf(Thread);
  20c06a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20c06e:	48 83 e8 18          	sub    rax,0x18
  20c072:	0f 92 c2             	setb   dl
  20c075:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  20c07c:	88 95 2f ff ff ff    	mov    BYTE PTR [rbp-0xd1],dl
  20c082:	72 02                	jb     20c086 <spawnThread+0x366>
  20c084:	eb 10                	jmp    20c096 <spawnThread+0x376>
  20c086:	48 8d 3d 3b 71 03 00 	lea    rdi,[rip+0x3713b]        # 2431c8 <__unnamed_4>
  20c08d:	31 c0                	xor    eax,eax
  20c08f:	89 c6                	mov    esi,eax
  20c091:	e8 6a f5 ff ff       	call   20b600 <panic>
  20c096:	31 c0                	xor    eax,eax
  20c098:	88 c1                	mov    cl,al
  20c09a:	48 8b 95 30 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd0]
  20c0a1:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
    stack_end -= stack_end % @alignOf(Thread);
  20c0a5:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  20c0a9:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20c0ad:	f6 c1 01             	test   cl,0x1
  20c0b0:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  20c0b7:	48 89 b5 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rsi
  20c0be:	75 29                	jne    20c0e9 <spawnThread+0x3c9>
  20c0c0:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  20c0c7:	48 83 e0 03          	and    rax,0x3
  20c0cb:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
  20c0d2:	48 29 c1             	sub    rcx,rax
  20c0d5:	0f 92 c2             	setb   dl
  20c0d8:	48 89 8d 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rcx
  20c0df:	88 95 0f ff ff ff    	mov    BYTE PTR [rbp-0xf1],dl
  20c0e5:	72 12                	jb     20c0f9 <spawnThread+0x3d9>
  20c0e7:	eb 20                	jmp    20c109 <spawnThread+0x3e9>
  20c0e9:	48 8d 3d f8 71 03 00 	lea    rdi,[rip+0x371f8]        # 2432e8 <__unnamed_15>
  20c0f0:	31 c0                	xor    eax,eax
  20c0f2:	89 c6                	mov    esi,eax
  20c0f4:	e8 07 f5 ff ff       	call   20b600 <panic>
  20c0f9:	48 8d 3d c8 70 03 00 	lea    rdi,[rip+0x370c8]        # 2431c8 <__unnamed_4>
  20c100:	31 c0                	xor    eax,eax
  20c102:	89 c6                	mov    esi,eax
  20c104:	e8 f7 f4 ff ff       	call   20b600 <panic>
  20c109:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  20c110:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
    assert(stack_end >= stack_addr);
  20c114:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  20c118:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  20c11c:	48 29 d1             	sub    rcx,rdx
  20c11f:	40 0f 93 c6          	setae  sil
  20c123:	40 0f b6 fe          	movzx  edi,sil
  20c127:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  20c12e:	e8 cd ee ff ff       	call   20b000 <assert>
    const thread_ptr = @alignCast(@alignOf(Thread), @intToPtr(*Thread, stack_end));
  20c133:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20c137:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
    thread_ptr.data.stack_addr = stack_addr;
  20c13b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20c13f:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  20c143:	48 89 48 08          	mov    QWORD PTR [rax+0x8],rcx
    thread_ptr.data.stack_len = mmap_len;
  20c147:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20c14b:	48 c7 40 10 00 00 80 	mov    QWORD PTR [rax+0x10],0x800000
  20c152:	00 
        const newtls: usize = 0;
  20c153:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
  20c15a:	00 
        const rc = posix.clone(MainFuncs.linuxThreadMain, stack_end, flags, arg, &thread_ptr.data.handle, newtls, &thread_ptr.data.handle);
  20c15b:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  20c15f:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  20c163:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20c167:	48 89 e2             	mov    rdx,rsp
  20c16a:	48 89 02             	mov    QWORD PTR [rdx],rax
  20c16d:	48 8d 3d ec 13 00 00 	lea    rdi,[rip+0x13ec]        # 20d560 <MainFuncs_linuxThreadMain>
  20c174:	41 b8 00 0f 75 00    	mov    r8d,0x750f00
  20c17a:	44 89 c2             	mov    edx,r8d
  20c17d:	45 31 c0             	xor    r8d,r8d
  20c180:	45 89 c1             	mov    r9d,r8d
  20c183:	49 89 c0             	mov    r8,rax
  20c186:	e8 25 88 02 00       	call   2349b0 <clone>
  20c18b:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        const err = posix.getErrno(rc);
  20c18f:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  20c193:	e8 e8 0e 00 00       	call   20d080 <getErrno>
  20c198:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
        switch (err) {
  20c19c:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  20c1a0:	48 85 c0             	test   rax,rax
  20c1a3:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  20c1aa:	0f 84 9a fc ff ff    	je     20be4a <spawnThread+0x12a>
  20c1b0:	eb 00                	jmp    20c1b2 <spawnThread+0x492>
  20c1b2:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  20c1b9:	48 83 e8 01          	sub    rax,0x1
  20c1bd:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  20c1c4:	0f 84 73 fd ff ff    	je     20bf3d <spawnThread+0x21d>
  20c1ca:	eb 00                	jmp    20c1cc <spawnThread+0x4ac>
  20c1cc:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  20c1d3:	48 83 e8 0b          	sub    rax,0xb
  20c1d7:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  20c1de:	0f 84 97 fc ff ff    	je     20be7b <spawnThread+0x15b>
  20c1e4:	eb 00                	jmp    20c1e6 <spawnThread+0x4c6>
  20c1e6:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  20c1ed:	48 83 e8 0c          	sub    rax,0xc
  20c1f1:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
  20c1f8:	0f 84 de fc ff ff    	je     20bedc <spawnThread+0x1bc>
  20c1fe:	eb 00                	jmp    20c200 <spawnThread+0x4e0>
  20c200:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  20c207:	48 83 e8 16          	sub    rax,0x16
  20c20b:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
  20c212:	0f 84 b4 fc ff ff    	je     20becc <spawnThread+0x1ac>
  20c218:	eb 00                	jmp    20c21a <spawnThread+0x4fa>
  20c21a:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  20c221:	48 83 e8 1c          	sub    rax,0x1c
  20c225:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  20c22c:	0f 84 fb fc ff ff    	je     20bf2d <spawnThread+0x20d>
  20c232:	eb 00                	jmp    20c234 <spawnThread+0x514>
  20c234:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  20c23b:	48 83 e8 57          	sub    rax,0x57
  20c23f:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
  20c246:	0f 84 01 fd ff ff    	je     20bf4d <spawnThread+0x22d>
  20c24c:	e9 8d fb ff ff       	jmp    20bdde <spawnThread+0xbe>
  20c251:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20c258:	0f 1f 84 00 00 00 00 
  20c25f:	00 

000000000020c260 <spawnThread.17>:
pub fn spawnThread(context: var, comptime startFn: var) SpawnThreadError!*Thread {
  20c260:	55                   	push   rbp
  20c261:	48 89 e5             	mov    rbp,rsp
  20c264:	48 81 ec 40 01 00 00 	sub    rsp,0x140
  20c26b:	48 89 f8             	mov    rax,rdi
  20c26e:	31 c9                	xor    ecx,ecx
  20c270:	41 89 c8             	mov    r8d,ecx
  20c273:	b9 00 00 80 00       	mov    ecx,0x800000
  20c278:	41 89 c9             	mov    r9d,ecx
  20c27b:	b9 03 00 00 00       	mov    ecx,0x3
  20c280:	41 89 ca             	mov    r10d,ecx
  20c283:	b9 22 01 00 00       	mov    ecx,0x122
  20c288:	41 bb ff ff ff ff    	mov    r11d,0xffffffff
  20c28e:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
    const stack_addr = posix.mmap(null, mmap_len, posix.PROT_READ | posix.PROT_WRITE, posix.MAP_PRIVATE | posix.MAP_ANONYMOUS | MAP_GROWSDOWN, -1, 0);
  20c292:	48 89 7d 90          	mov    QWORD PTR [rbp-0x70],rdi
  20c296:	4c 89 c7             	mov    rdi,r8
  20c299:	48 89 75 88          	mov    QWORD PTR [rbp-0x78],rsi
  20c29d:	4c 89 ce             	mov    rsi,r9
  20c2a0:	4c 89 d2             	mov    rdx,r10
  20c2a3:	4c 89 45 80          	mov    QWORD PTR [rbp-0x80],r8
  20c2a7:	45 89 d8             	mov    r8d,r11d
  20c2aa:	4c 8b 4d 80          	mov    r9,QWORD PTR [rbp-0x80]
  20c2ae:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  20c2b5:	e8 46 12 00 00       	call   20d500 <mmap>
  20c2ba:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
    if (stack_addr == posix.MAP_FAILED) return error.OutOfMemory;
  20c2be:	48 83 7d d0 ff       	cmp    QWORD PTR [rbp-0x30],0xffffffffffffffff
  20c2c3:	75 32                	jne    20c2f7 <spawnThread.17+0x97>
  20c2c5:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  20c2c9:	e8 c2 f9 ff ff       	call   20bc90 <__zig_return_error>
  20c2ce:	48 8b 3d 9b 41 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff419b]        # 200470 <__unnamed_11>
  20c2d5:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  20c2d9:	48 89 38             	mov    QWORD PTR [rax],rdi
  20c2dc:	48 8b 3d 95 41 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff4195]        # 200478 <__unnamed_11+0x8>
  20c2e3:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  20c2e7:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  20c2ee:	48 81 c4 40 01 00 00 	add    rsp,0x140
  20c2f5:	5d                   	pop    rbp
  20c2f6:	c3                   	ret    
  20c2f7:	eb 00                	jmp    20c2f9 <spawnThread.17+0x99>
    var stack_end: usize = stack_addr + mmap_len;
  20c2f9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20c2fd:	48 05 00 00 80 00    	add    rax,0x800000
  20c303:	0f 92 c1             	setb   cl
  20c306:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  20c30d:	88 8d 6f ff ff ff    	mov    BYTE PTR [rbp-0x91],cl
  20c313:	0f 82 84 01 00 00    	jb     20c49d <spawnThread.17+0x23d>
  20c319:	e9 8f 01 00 00       	jmp    20c4ad <spawnThread.17+0x24d>
            else => return unexpectedErrorPosix(err),
  20c31e:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  20c322:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  20c326:	e8 f5 0d 00 00       	call   20d120 <unexpectedErrorPosix>
  20c32b:	b9 00 00 80 00       	mov    ecx,0x800000
  20c330:	89 ce                	mov    esi,ecx
    errdefer assert(posix.munmap(stack_addr, mmap_len) == 0);
  20c332:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  20c336:	66 89 85 6c ff ff ff 	mov    WORD PTR [rbp-0x94],ax
  20c33d:	e8 4e 12 00 00       	call   20d590 <munmap>
  20c342:	48 83 f8 00          	cmp    rax,0x0
  20c346:	0f 94 c2             	sete   dl
  20c349:	0f b6 fa             	movzx  edi,dl
  20c34c:	e8 af ec ff ff       	call   20b000 <assert>
            else => return unexpectedErrorPosix(err),
  20c351:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  20c355:	e8 36 f9 ff ff       	call   20bc90 <__zig_return_error>
  20c35a:	66 44 8b 85 6c ff ff 	mov    r8w,WORD PTR [rbp-0x94]
  20c361:	ff 
  20c362:	66 44 89 45 f0       	mov    WORD PTR [rbp-0x10],r8w
  20c367:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20c36b:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  20c36f:	48 89 06             	mov    QWORD PTR [rsi],rax
  20c372:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20c376:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  20c37a:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  20c381:	48 81 c4 40 01 00 00 	add    rsp,0x140
  20c388:	5d                   	pop    rbp
  20c389:	c3                   	ret    
            0 => return thread_ptr,
  20c38a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20c38e:	66 c7 45 e0 00 00    	mov    WORD PTR [rbp-0x20],0x0
  20c394:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  20c398:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20c39c:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  20c3a0:	48 89 01             	mov    QWORD PTR [rcx],rax
  20c3a3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20c3a7:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20c3ab:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  20c3b2:	48 81 c4 40 01 00 00 	add    rsp,0x140
  20c3b9:	5d                   	pop    rbp
  20c3ba:	c3                   	ret    
  20c3bb:	b8 00 00 80 00       	mov    eax,0x800000
  20c3c0:	89 c6                	mov    esi,eax
    errdefer assert(posix.munmap(stack_addr, mmap_len) == 0);
  20c3c2:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  20c3c6:	e8 c5 11 00 00       	call   20d590 <munmap>
  20c3cb:	48 83 f8 00          	cmp    rax,0x0
  20c3cf:	0f 94 c1             	sete   cl
  20c3d2:	0f b6 f9             	movzx  edi,cl
  20c3d5:	e8 26 ec ff ff       	call   20b000 <assert>
            posix.EAGAIN => return SpawnThreadError.ThreadQuotaExceeded,
  20c3da:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  20c3de:	e8 ad f8 ff ff       	call   20bc90 <__zig_return_error>
  20c3e3:	48 8b 05 56 45 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff4556]        # 200940 <__unnamed_12>
  20c3ea:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  20c3ee:	48 89 06             	mov    QWORD PTR [rsi],rax
  20c3f1:	48 8b 05 50 45 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff4550]        # 200948 <__unnamed_12+0x8>
  20c3f8:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  20c3fc:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  20c403:	48 81 c4 40 01 00 00 	add    rsp,0x140
  20c40a:	5d                   	pop    rbp
  20c40b:	c3                   	ret    
  20c40c:	48 8d 3d ed 6e 03 00 	lea    rdi,[rip+0x36eed]        # 243300 <__unnamed_13>
  20c413:	31 c0                	xor    eax,eax
  20c415:	89 c6                	mov    esi,eax
            posix.EINVAL => unreachable,
  20c417:	e8 e4 f1 ff ff       	call   20b600 <panic>
  20c41c:	b8 00 00 80 00       	mov    eax,0x800000
  20c421:	89 c6                	mov    esi,eax
    errdefer assert(posix.munmap(stack_addr, mmap_len) == 0);
  20c423:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  20c427:	e8 64 11 00 00       	call   20d590 <munmap>
  20c42c:	48 83 f8 00          	cmp    rax,0x0
  20c430:	0f 94 c1             	sete   cl
  20c433:	0f b6 f9             	movzx  edi,cl
  20c436:	e8 c5 eb ff ff       	call   20b000 <assert>
            posix.ENOMEM => return SpawnThreadError.SystemResources,
  20c43b:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  20c43f:	e8 4c f8 ff ff       	call   20bc90 <__zig_return_error>
  20c444:	48 8b 05 35 40 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff4035]        # 200480 <__unnamed_14>
  20c44b:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  20c44f:	48 89 06             	mov    QWORD PTR [rsi],rax
  20c452:	48 8b 05 2f 40 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff402f]        # 200488 <__unnamed_14+0x8>
  20c459:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  20c45d:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  20c464:	48 81 c4 40 01 00 00 	add    rsp,0x140
  20c46b:	5d                   	pop    rbp
  20c46c:	c3                   	ret    
  20c46d:	48 8d 3d 8c 6e 03 00 	lea    rdi,[rip+0x36e8c]        # 243300 <__unnamed_13>
  20c474:	31 c0                	xor    eax,eax
  20c476:	89 c6                	mov    esi,eax
            posix.ENOSPC => unreachable,
  20c478:	e8 83 f1 ff ff       	call   20b600 <panic>
  20c47d:	48 8d 3d 7c 6e 03 00 	lea    rdi,[rip+0x36e7c]        # 243300 <__unnamed_13>
  20c484:	31 c0                	xor    eax,eax
  20c486:	89 c6                	mov    esi,eax
            posix.EPERM => unreachable,
  20c488:	e8 73 f1 ff ff       	call   20b600 <panic>
  20c48d:	48 8d 3d 6c 6e 03 00 	lea    rdi,[rip+0x36e6c]        # 243300 <__unnamed_13>
  20c494:	31 c0                	xor    eax,eax
  20c496:	89 c6                	mov    esi,eax
            posix.EUSERS => unreachable,
  20c498:	e8 63 f1 ff ff       	call   20b600 <panic>
  20c49d:	48 8d 3d 24 6d 03 00 	lea    rdi,[rip+0x36d24]        # 2431c8 <__unnamed_4>
  20c4a4:	31 c0                	xor    eax,eax
  20c4a6:	89 c6                	mov    esi,eax
    var stack_end: usize = stack_addr + mmap_len;
  20c4a8:	e8 53 f1 ff ff       	call   20b600 <panic>
  20c4ad:	be aa 00 00 00       	mov    esi,0xaa
  20c4b2:	b8 08 00 00 00       	mov    eax,0x8
  20c4b7:	89 c2                	mov    edx,eax
  20c4b9:	48 8d 4d c0          	lea    rcx,[rbp-0x40]
  20c4bd:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  20c4c4:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
    var arg: usize = undefined;
  20c4c8:	48 89 cf             	mov    rdi,rcx
  20c4cb:	e8 80 83 02 00       	call   234850 <memset>
        stack_end -= @sizeOf(Context);
  20c4d0:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  20c4d4:	48 83 e9 08          	sub    rcx,0x8
  20c4d8:	41 0f 92 c0          	setb   r8b
  20c4dc:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
  20c4e3:	44 88 85 5f ff ff ff 	mov    BYTE PTR [rbp-0xa1],r8b
  20c4ea:	72 02                	jb     20c4ee <spawnThread.17+0x28e>
  20c4ec:	eb 10                	jmp    20c4fe <spawnThread.17+0x29e>
  20c4ee:	48 8d 3d d3 6c 03 00 	lea    rdi,[rip+0x36cd3]        # 2431c8 <__unnamed_4>
  20c4f5:	31 c0                	xor    eax,eax
  20c4f7:	89 c6                	mov    esi,eax
  20c4f9:	e8 02 f1 ff ff       	call   20b600 <panic>
  20c4fe:	31 c0                	xor    eax,eax
  20c500:	88 c1                	mov    cl,al
  20c502:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  20c509:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
        stack_end -= stack_end % @alignOf(Context);
  20c50d:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  20c511:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20c515:	f6 c1 01             	test   cl,0x1
  20c518:	48 89 bd 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdi
  20c51f:	48 89 b5 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rsi
  20c526:	75 29                	jne    20c551 <spawnThread.17+0x2f1>
  20c528:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  20c52f:	48 83 e0 07          	and    rax,0x7
  20c533:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
  20c53a:	48 29 c1             	sub    rcx,rax
  20c53d:	0f 92 c2             	setb   dl
  20c540:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
  20c547:	88 95 3f ff ff ff    	mov    BYTE PTR [rbp-0xc1],dl
  20c54d:	72 12                	jb     20c561 <spawnThread.17+0x301>
  20c54f:	eb 20                	jmp    20c571 <spawnThread.17+0x311>
  20c551:	48 8d 3d 90 6d 03 00 	lea    rdi,[rip+0x36d90]        # 2432e8 <__unnamed_15>
  20c558:	31 c0                	xor    eax,eax
  20c55a:	89 c6                	mov    esi,eax
  20c55c:	e8 9f f0 ff ff       	call   20b600 <panic>
  20c561:	48 8d 3d 60 6c 03 00 	lea    rdi,[rip+0x36c60]        # 2431c8 <__unnamed_4>
  20c568:	31 c0                	xor    eax,eax
  20c56a:	89 c6                	mov    esi,eax
  20c56c:	e8 8f f0 ff ff       	call   20b600 <panic>
  20c571:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  20c578:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
        assert(stack_end >= stack_addr);
  20c57c:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  20c580:	48 3b 4d d0          	cmp    rcx,QWORD PTR [rbp-0x30]
  20c584:	0f 93 c2             	setae  dl
  20c587:	0f b6 fa             	movzx  edi,dl
  20c58a:	e8 71 ea ff ff       	call   20b000 <assert>
        const context_ptr = @alignCast(@alignOf(Context), @intToPtr(*Context, stack_end));
  20c58f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20c593:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
        context_ptr.* = context;
  20c597:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  20c59b:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  20c59f:	48 89 08             	mov    QWORD PTR [rax],rcx
        arg = stack_end;
  20c5a2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20c5a6:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
    stack_end -= @sizeOf(Thread);
  20c5aa:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20c5ae:	48 83 e8 18          	sub    rax,0x18
  20c5b2:	0f 92 c2             	setb   dl
  20c5b5:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  20c5bc:	88 95 2f ff ff ff    	mov    BYTE PTR [rbp-0xd1],dl
  20c5c2:	72 02                	jb     20c5c6 <spawnThread.17+0x366>
  20c5c4:	eb 10                	jmp    20c5d6 <spawnThread.17+0x376>
  20c5c6:	48 8d 3d fb 6b 03 00 	lea    rdi,[rip+0x36bfb]        # 2431c8 <__unnamed_4>
  20c5cd:	31 c0                	xor    eax,eax
  20c5cf:	89 c6                	mov    esi,eax
  20c5d1:	e8 2a f0 ff ff       	call   20b600 <panic>
  20c5d6:	31 c0                	xor    eax,eax
  20c5d8:	88 c1                	mov    cl,al
  20c5da:	48 8b 95 30 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd0]
  20c5e1:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
    stack_end -= stack_end % @alignOf(Thread);
  20c5e5:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  20c5e9:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20c5ed:	f6 c1 01             	test   cl,0x1
  20c5f0:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  20c5f7:	48 89 b5 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rsi
  20c5fe:	75 29                	jne    20c629 <spawnThread.17+0x3c9>
  20c600:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  20c607:	48 83 e0 03          	and    rax,0x3
  20c60b:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
  20c612:	48 29 c1             	sub    rcx,rax
  20c615:	0f 92 c2             	setb   dl
  20c618:	48 89 8d 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rcx
  20c61f:	88 95 0f ff ff ff    	mov    BYTE PTR [rbp-0xf1],dl
  20c625:	72 12                	jb     20c639 <spawnThread.17+0x3d9>
  20c627:	eb 20                	jmp    20c649 <spawnThread.17+0x3e9>
  20c629:	48 8d 3d b8 6c 03 00 	lea    rdi,[rip+0x36cb8]        # 2432e8 <__unnamed_15>
  20c630:	31 c0                	xor    eax,eax
  20c632:	89 c6                	mov    esi,eax
  20c634:	e8 c7 ef ff ff       	call   20b600 <panic>
  20c639:	48 8d 3d 88 6b 03 00 	lea    rdi,[rip+0x36b88]        # 2431c8 <__unnamed_4>
  20c640:	31 c0                	xor    eax,eax
  20c642:	89 c6                	mov    esi,eax
  20c644:	e8 b7 ef ff ff       	call   20b600 <panic>
  20c649:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  20c650:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
    assert(stack_end >= stack_addr);
  20c654:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  20c658:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  20c65c:	48 29 d1             	sub    rcx,rdx
  20c65f:	40 0f 93 c6          	setae  sil
  20c663:	40 0f b6 fe          	movzx  edi,sil
  20c667:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  20c66e:	e8 8d e9 ff ff       	call   20b000 <assert>
    const thread_ptr = @alignCast(@alignOf(Thread), @intToPtr(*Thread, stack_end));
  20c673:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20c677:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
    thread_ptr.data.stack_addr = stack_addr;
  20c67b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20c67f:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  20c683:	48 89 48 08          	mov    QWORD PTR [rax+0x8],rcx
    thread_ptr.data.stack_len = mmap_len;
  20c687:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20c68b:	48 c7 40 10 00 00 80 	mov    QWORD PTR [rax+0x10],0x800000
  20c692:	00 
        const newtls: usize = 0;
  20c693:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
  20c69a:	00 
        const rc = posix.clone(MainFuncs.linuxThreadMain, stack_end, flags, arg, &thread_ptr.data.handle, newtls, &thread_ptr.data.handle);
  20c69b:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  20c69f:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  20c6a3:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20c6a7:	48 89 e2             	mov    rdx,rsp
  20c6aa:	48 89 02             	mov    QWORD PTR [rdx],rax
  20c6ad:	48 8d 3d 3c 11 00 00 	lea    rdi,[rip+0x113c]        # 20d7f0 <MainFuncs_linuxThreadMain.21>
  20c6b4:	41 b8 00 0f 75 00    	mov    r8d,0x750f00
  20c6ba:	44 89 c2             	mov    edx,r8d
  20c6bd:	45 31 c0             	xor    r8d,r8d
  20c6c0:	45 89 c1             	mov    r9d,r8d
  20c6c3:	49 89 c0             	mov    r8,rax
  20c6c6:	e8 e5 82 02 00       	call   2349b0 <clone>
  20c6cb:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        const err = posix.getErrno(rc);
  20c6cf:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  20c6d3:	e8 a8 09 00 00       	call   20d080 <getErrno>
  20c6d8:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
        switch (err) {
  20c6dc:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  20c6e0:	48 85 c0             	test   rax,rax
  20c6e3:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  20c6ea:	0f 84 9a fc ff ff    	je     20c38a <spawnThread.17+0x12a>
  20c6f0:	eb 00                	jmp    20c6f2 <spawnThread.17+0x492>
  20c6f2:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  20c6f9:	48 83 e8 01          	sub    rax,0x1
  20c6fd:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  20c704:	0f 84 73 fd ff ff    	je     20c47d <spawnThread.17+0x21d>
  20c70a:	eb 00                	jmp    20c70c <spawnThread.17+0x4ac>
  20c70c:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  20c713:	48 83 e8 0b          	sub    rax,0xb
  20c717:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  20c71e:	0f 84 97 fc ff ff    	je     20c3bb <spawnThread.17+0x15b>
  20c724:	eb 00                	jmp    20c726 <spawnThread.17+0x4c6>
  20c726:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  20c72d:	48 83 e8 0c          	sub    rax,0xc
  20c731:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
  20c738:	0f 84 de fc ff ff    	je     20c41c <spawnThread.17+0x1bc>
  20c73e:	eb 00                	jmp    20c740 <spawnThread.17+0x4e0>
  20c740:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  20c747:	48 83 e8 16          	sub    rax,0x16
  20c74b:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
  20c752:	0f 84 b4 fc ff ff    	je     20c40c <spawnThread.17+0x1ac>
  20c758:	eb 00                	jmp    20c75a <spawnThread.17+0x4fa>
  20c75a:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  20c761:	48 83 e8 1c          	sub    rax,0x1c
  20c765:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  20c76c:	0f 84 fb fc ff ff    	je     20c46d <spawnThread.17+0x20d>
  20c772:	eb 00                	jmp    20c774 <spawnThread.17+0x514>
  20c774:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  20c77b:	48 83 e8 57          	sub    rax,0x57
  20c77f:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
  20c786:	0f 84 01 fd ff ff    	je     20c48d <spawnThread.17+0x22d>
  20c78c:	e9 8d fb ff ff       	jmp    20c31e <spawnThread.17+0xbe>
  20c791:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20c798:	0f 1f 84 00 00 00 00 
  20c79f:	00 

000000000020c7a0 <Thread_wait>:
    pub fn wait(self: *const Thread) void {
  20c7a0:	55                   	push   rbp
  20c7a1:	48 89 e5             	mov    rbp,rsp
  20c7a4:	48 83 ec 40          	sub    rsp,0x40
  20c7a8:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
                while (true) {
  20c7ac:	eb 00                	jmp    20c7ae <Thread_wait+0xe>
                    const pid_value = @atomicLoad(i32, &self.data.handle, builtin.AtomicOrder.SeqCst);
  20c7ae:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20c7b2:	8b 08                	mov    ecx,DWORD PTR [rax]
  20c7b4:	89 4d ec             	mov    DWORD PTR [rbp-0x14],ecx
                    if (pid_value == 0) break;
  20c7b7:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
  20c7bb:	75 02                	jne    20c7bf <Thread_wait+0x1f>
  20c7bd:	eb 68                	jmp    20c827 <Thread_wait+0x87>
                    const rc = linux.futex_wait(@ptrToInt(&self.data.handle), linux.FUTEX_WAIT, pid_value, null);
  20c7bf:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  20c7c3:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
  20c7c6:	31 c0                	xor    eax,eax
  20c7c8:	89 c1                	mov    ecx,eax
  20c7ca:	89 c6                	mov    esi,eax
  20c7cc:	e8 4f 10 00 00       	call   20d820 <futex_wait.22>
  20c7d1:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
                    switch (linux.getErrno(rc)) {
  20c7d5:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  20c7d9:	e8 a2 08 00 00       	call   20d080 <getErrno>
  20c7de:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  20c7e2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20c7e6:	48 85 c0             	test   rax,rax
  20c7e9:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  20c7ed:	74 32                	je     20c821 <Thread_wait+0x81>
  20c7ef:	eb 00                	jmp    20c7f1 <Thread_wait+0x51>
  20c7f1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  20c7f5:	48 83 e8 04          	sub    rax,0x4
  20c7f9:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  20c7fd:	74 24                	je     20c823 <Thread_wait+0x83>
  20c7ff:	eb 00                	jmp    20c801 <Thread_wait+0x61>
  20c801:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  20c805:	48 83 e8 0b          	sub    rax,0xb
  20c809:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  20c80d:	74 16                	je     20c825 <Thread_wait+0x85>
  20c80f:	eb 00                	jmp    20c811 <Thread_wait+0x71>
  20c811:	48 8d 3d e8 6a 03 00 	lea    rdi,[rip+0x36ae8]        # 243300 <__unnamed_13>
  20c818:	31 c0                	xor    eax,eax
  20c81a:	89 c6                	mov    esi,eax
                        else => unreachable,
  20c81c:	e8 df ed ff ff       	call   20b600 <panic>
                        0 => continue,
  20c821:	eb 89                	jmp    20c7ac <Thread_wait+0xc>
                        posix.EINTR => continue,
  20c823:	eb 87                	jmp    20c7ac <Thread_wait+0xc>
                        posix.EAGAIN => continue,
  20c825:	eb 85                	jmp    20c7ac <Thread_wait+0xc>
                assert(posix.munmap(self.data.stack_addr, self.data.stack_len) == 0);
  20c827:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20c82b:	48 8b 78 08          	mov    rdi,QWORD PTR [rax+0x8]
  20c82f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20c833:	48 8b 70 10          	mov    rsi,QWORD PTR [rax+0x10]
  20c837:	e8 54 0d 00 00       	call   20d590 <munmap>
  20c83c:	48 83 f8 00          	cmp    rax,0x0
  20c840:	0f 94 c1             	sete   cl
  20c843:	0f b6 f9             	movzx  edi,cl
  20c846:	e8 b5 e7 ff ff       	call   20b000 <assert>
    pub fn wait(self: *const Thread) void {
  20c84b:	48 83 c4 40          	add    rsp,0x40
  20c84f:	5d                   	pop    rbp
  20c850:	c3                   	ret    
  20c851:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20c858:	0f 1f 84 00 00 00 00 
  20c85f:	00 

000000000020c860 <warn.18>:
  20c860:	55                   	push   rbp
  20c861:	48 89 e5             	mov    rbp,rsp
  20c864:	48 81 ec 50 01 00 00 	sub    rsp,0x150
  20c86b:	48 8d bd e8 fe ff ff 	lea    rdi,[rbp-0x118]
  20c872:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  20c879:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
  20c880:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  20c887:	00 00 00 00 
  20c88b:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
  20c892:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  20c899:	1e 00 00 00 
  20c89d:	c5 fb 11 85 c8 fe ff 	vmovsd QWORD PTR [rbp-0x138],xmm0
  20c8a4:	ff 
    const stderr = getStderrStream() catch return;
  20c8a5:	e8 a6 00 00 00       	call   20c950 <getStderrStream>
  20c8aa:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  20c8b1:	00 
  20c8b2:	74 09                	je     20c8bd <warn.18+0x5d>
  20c8b4:	48 81 c4 50 01 00 00 	add    rsp,0x150
  20c8bb:	5d                   	pop    rbp
  20c8bc:	c3                   	ret    
  20c8bd:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  20c8c4:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
  20c8cb:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  20c8d2:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  20c8d9:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
    stderr.print(fmt, args) catch return;
  20c8e0:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  20c8e7:	c5 fb 10 85 c8 fe ff 	vmovsd xmm0,QWORD PTR [rbp-0x138]
  20c8ee:	ff 
  20c8ef:	e8 8c 0f 00 00       	call   20d880 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.23>
  20c8f4:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  20c8fb:	66 83 bd d6 fe ff ff 	cmp    WORD PTR [rbp-0x12a],0x0
  20c902:	00 
  20c903:	74 09                	je     20c90e <warn.18+0xae>
  20c905:	48 81 c4 50 01 00 00 	add    rsp,0x150
  20c90c:	5d                   	pop    rbp
  20c90d:	c3                   	ret    
pub fn warn(comptime fmt: []const u8, args: ...) void {
  20c90e:	48 81 c4 50 01 00 00 	add    rsp,0x150
  20c915:	5d                   	pop    rbp
  20c916:	c3                   	ret    
  20c917:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  20c91e:	00 00 

000000000020c920 <abort>:
pub fn abort() noreturn {
  20c920:	55                   	push   rbp
  20c921:	48 89 e5             	mov    rbp,rsp
  20c924:	48 83 ec 10          	sub    rsp,0x10
  20c928:	bf 06 00 00 00       	mov    edi,0x6
            _ = posix.raise(posix.SIGABRT);
  20c92d:	e8 9e 0f 00 00       	call   20d8d0 <raise>
  20c932:	bf 09 00 00 00       	mov    edi,0x9
            _ = posix.raise(posix.SIGKILL);
  20c937:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  20c93b:	e8 90 0f 00 00       	call   20d8d0 <raise>
  20c940:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
            while (true) {}
  20c944:	eb fe                	jmp    20c944 <abort+0x24>
  20c946:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  20c94d:	00 00 00 

000000000020c950 <getStderrStream>:
pub fn getStderrStream() !*io.OutStream(io.FileOutStream.Error) {
  20c950:	55                   	push   rbp
  20c951:	48 89 e5             	mov    rbp,rsp
  20c954:	48 83 ec 70          	sub    rsp,0x70
  20c958:	48 89 f8             	mov    rax,rdi
    if (stderr_stream) |st| {
  20c95b:	48 83 3d cd 76 03 00 	cmp    QWORD PTR [rip+0x376cd],0x0        # 244030 <stderr_stream>
  20c962:	00 
  20c963:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  20c967:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  20c96b:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
  20c96f:	74 36                	je     20c9a7 <getStderrStream+0x57>
  20c971:	48 8b 05 b8 76 03 00 	mov    rax,QWORD PTR [rip+0x376b8]        # 244030 <stderr_stream>
  20c978:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
        return st;
  20c97c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  20c980:	66 c7 45 f0 00 00    	mov    WORD PTR [rbp-0x10],0x0
  20c986:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  20c98a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20c98e:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  20c992:	48 89 01             	mov    QWORD PTR [rcx],rax
  20c995:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20c999:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20c99d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  20c9a1:	48 83 c4 70          	add    rsp,0x70
  20c9a5:	5d                   	pop    rbp
  20c9a6:	c3                   	ret    
  20c9a7:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
        stderr_file = try io.getStdErr();
  20c9ab:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  20c9af:	e8 dc 0f 00 00       	call   20d990 <getStdErr>
  20c9b4:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  20c9b9:	74 36                	je     20c9f1 <getStderrStream+0xa1>
  20c9bb:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  20c9bf:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  20c9c3:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  20c9c7:	e8 c4 f2 ff ff       	call   20bc90 <__zig_return_error>
  20c9cc:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  20c9d0:	66 89 45 d0          	mov    WORD PTR [rbp-0x30],ax
  20c9d4:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  20c9d8:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  20c9dc:	48 89 39             	mov    QWORD PTR [rcx],rdi
  20c9df:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  20c9e3:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  20c9e7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  20c9eb:	48 83 c4 70          	add    rsp,0x70
  20c9ef:	5d                   	pop    rbp
  20c9f0:	c3                   	ret    
  20c9f1:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  20c9f5:	48 8d 35 24 f6 02 00 	lea    rsi,[rip+0x2f624]        # 23c020 <stderr_file>
  20c9fc:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  20c9ff:	89 05 1b f6 02 00    	mov    DWORD PTR [rip+0x2f61b],eax        # 23c020 <stderr_file>
        stderr_file_out_stream = io.FileOutStream.init(&stderr_file);
  20ca05:	e8 d6 0f 00 00       	call   20d9e0 <FileOutStream_init>
  20ca0a:	48 8d 35 17 f6 02 00 	lea    rsi,[rip+0x2f617]        # 23c028 <stderr_file_out_stream>
  20ca11:	48 83 c6 08          	add    rsi,0x8
  20ca15:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  20ca19:	48 89 3d 08 f6 02 00 	mov    QWORD PTR [rip+0x2f608],rdi        # 23c028 <stderr_file_out_stream>
  20ca20:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20ca24:	48 89 3d 05 f6 02 00 	mov    QWORD PTR [rip+0x2f605],rdi        # 23c030 <stderr_file_out_stream+0x8>
        const st = &stderr_file_out_stream.stream;
  20ca2b:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
        stderr_stream = st;
  20ca2f:	48 89 35 fa 75 03 00 	mov    QWORD PTR [rip+0x375fa],rsi        # 244030 <stderr_stream>
        return st;
  20ca36:	48 8b 35 63 69 03 00 	mov    rsi,QWORD PTR [rip+0x36963]        # 2433a0 <__unnamed_19>
  20ca3d:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  20ca41:	48 89 37             	mov    QWORD PTR [rdi],rsi
  20ca44:	48 8b 35 5d 69 03 00 	mov    rsi,QWORD PTR [rip+0x3695d]        # 2433a8 <__unnamed_19+0x8>
  20ca4b:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  20ca4f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  20ca53:	48 83 c4 70          	add    rsp,0x70
  20ca57:	5d                   	pop    rbp
  20ca58:	c3                   	ret    
  20ca59:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

000000000020ca60 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print>:
        const Self = this;
        pub const Error = WriteError;

        writeFn: fn (self: *Self, bytes: []const u8) Error!void,

        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  20ca60:	55                   	push   rbp
  20ca61:	48 89 e5             	mov    rbp,rsp
  20ca64:	48 83 ec 20          	sub    rsp,0x20
  20ca68:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
            return std.fmt.format(self, Error, self.writeFn, format, args);
  20ca6c:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20ca70:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20ca74:	48 8b 00             	mov    rax,QWORD PTR [rax]
  20ca77:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  20ca7b:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  20ca7f:	48 89 c2             	mov    rdx,rax
  20ca82:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20ca86:	e8 f5 0f 00 00       	call   20da80 <format>
  20ca8b:	66 83 f8 00          	cmp    ax,0x0
  20ca8f:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
  20ca93:	74 0b                	je     20caa0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print+0x40>
  20ca95:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  20ca99:	e8 f2 f1 ff ff       	call   20bc90 <__zig_return_error>
  20ca9e:	eb 02                	jmp    20caa2 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print+0x42>
  20caa0:	eb 00                	jmp    20caa2 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print+0x42>
  20caa2:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
  20caa6:	48 83 c4 20          	add    rsp,0x20
  20caaa:	5d                   	pop    rbp
  20caab:	c3                   	ret    
  20caac:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000020cab0 <dumpStackTrace>:
pub fn dumpStackTrace(stack_trace: *const builtin.StackTrace) void {
  20cab0:	55                   	push   rbp
  20cab1:	48 89 e5             	mov    rbp,rsp
  20cab4:	48 81 ec d0 01 00 00 	sub    rsp,0x1d0
  20cabb:	48 8d 85 e8 fe ff ff 	lea    rax,[rbp-0x118]
  20cac2:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  20cac9:	48 8d 8d 10 ff ff ff 	lea    rcx,[rbp-0xf0]
  20cad0:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  20cad7:	00 00 00 00 
  20cadb:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  20cae2:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  20cae9:	1e 00 00 00 
  20caed:	48 89 bd a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rdi
    const stderr = getStderrStream() catch return;
  20caf4:	48 89 c7             	mov    rdi,rax
  20caf7:	e8 54 fe ff ff       	call   20c950 <getStderrStream>
  20cafc:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  20cb03:	00 
  20cb04:	74 09                	je     20cb0f <dumpStackTrace+0x5f>
  20cb06:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  20cb0d:	5d                   	pop    rbp
  20cb0e:	c3                   	ret    
  20cb0f:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  20cb16:	48 89 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rax
  20cb1d:	48 8d bd c8 fe ff ff 	lea    rdi,[rbp-0x138]
  20cb24:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  20cb2b:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
  20cb32:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
    const debug_info = getSelfDebugInfo() catch |err| {
  20cb39:	e8 42 10 00 00       	call   20db80 <getSelfDebugInfo>
  20cb3e:	66 83 bd c8 fe ff ff 	cmp    WORD PTR [rbp-0x138],0x0
  20cb45:	00 
  20cb46:	74 4b                	je     20cb93 <dumpStackTrace+0xe3>
  20cb48:	66 8b 85 c8 fe ff ff 	mov    ax,WORD PTR [rbp-0x138]
  20cb4f:	66 89 85 9e fe ff ff 	mov    WORD PTR [rbp-0x162],ax
        stderr.print("Unable to dump stack trace: Unable to open debug info: {}\n", @errorName(err)) catch return;
  20cb56:	48 8b b5 a0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x160]
  20cb5d:	66 8b 85 9e fe ff ff 	mov    ax,WORD PTR [rbp-0x162]
  20cb64:	66 83 f8 00          	cmp    ax,0x0
  20cb68:	48 89 b5 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rsi
  20cb6f:	66 89 85 76 fe ff ff 	mov    WORD PTR [rbp-0x18a],ax
  20cb76:	0f 85 69 01 00 00    	jne    20cce5 <dumpStackTrace+0x235>
  20cb7c:	e9 0b 01 00 00       	jmp    20cc8c <dumpStackTrace+0x1dc>
  20cb81:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  20cb88:	5d                   	pop    rbp
  20cb89:	c3                   	ret    
        return;
  20cb8a:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  20cb91:	5d                   	pop    rbp
  20cb92:	c3                   	ret    
    const debug_info = getSelfDebugInfo() catch |err| {
  20cb93:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  20cb9a:	48 89 85 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rax
  20cba1:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
  20cba8:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
    writeStackTrace(stack_trace, stderr, getDebugInfoAllocator(), debug_info, wantTtyColor()) catch |err| {
  20cbaf:	48 8b b5 a8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x158]
  20cbb6:	48 8b 95 a0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x160]
  20cbbd:	48 89 b5 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rsi
  20cbc4:	48 89 95 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rdx
  20cbcb:	e8 00 11 00 00       	call   20dcd0 <getDebugInfoAllocator>
  20cbd0:	4c 8b 85 90 fe ff ff 	mov    r8,QWORD PTR [rbp-0x170]
  20cbd7:	48 89 85 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rax
  20cbde:	4c 89 85 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],r8
  20cbe5:	e8 a6 11 00 00       	call   20dd90 <wantTtyColor>
  20cbea:	48 8d 95 f8 fe ff ff 	lea    rdx,[rbp-0x108]
  20cbf1:	44 0f b6 c8          	movzx  r9d,al
  20cbf5:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  20cbfc:	48 8b b5 60 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1a0]
  20cc03:	4c 8b 85 58 fe ff ff 	mov    r8,QWORD PTR [rbp-0x1a8]
  20cc0a:	48 89 95 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rdx
  20cc11:	4c 89 c2             	mov    rdx,r8
  20cc14:	48 8b 8d 50 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1b0]
  20cc1b:	4c 8b 85 48 fe ff ff 	mov    r8,QWORD PTR [rbp-0x1b8]
  20cc22:	e8 99 12 00 00       	call   20dec0 <writeStackTrace>
  20cc27:	66 89 85 b4 fe ff ff 	mov    WORD PTR [rbp-0x14c],ax
  20cc2e:	66 83 bd b4 fe ff ff 	cmp    WORD PTR [rbp-0x14c],0x0
  20cc35:	00 
  20cc36:	74 4b                	je     20cc83 <dumpStackTrace+0x1d3>
  20cc38:	66 8b 85 b4 fe ff ff 	mov    ax,WORD PTR [rbp-0x14c]
  20cc3f:	66 89 85 8e fe ff ff 	mov    WORD PTR [rbp-0x172],ax
        stderr.print("Unable to dump stack trace: {}\n", @errorName(err)) catch return;
  20cc46:	48 8b b5 a0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x160]
  20cc4d:	66 8b 85 8e fe ff ff 	mov    ax,WORD PTR [rbp-0x172]
  20cc54:	66 83 f8 00          	cmp    ax,0x0
  20cc58:	48 89 b5 38 fe ff ff 	mov    QWORD PTR [rbp-0x1c8],rsi
  20cc5f:	66 89 85 36 fe ff ff 	mov    WORD PTR [rbp-0x1ca],ax
  20cc66:	0f 85 e1 00 00 00    	jne    20cd4d <dumpStackTrace+0x29d>
  20cc6c:	e9 83 00 00 00       	jmp    20ccf4 <dumpStackTrace+0x244>
  20cc71:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  20cc78:	5d                   	pop    rbp
  20cc79:	c3                   	ret    
        return;
  20cc7a:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  20cc81:	5d                   	pop    rbp
  20cc82:	c3                   	ret    
pub fn dumpStackTrace(stack_trace: *const builtin.StackTrace) void {
  20cc83:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  20cc8a:	5d                   	pop    rbp
  20cc8b:	c3                   	ret    
  20cc8c:	48 8d 3d 45 67 03 00 	lea    rdi,[rip+0x36745]        # 2433d8 <__unnamed_20>
  20cc93:	31 c0                	xor    eax,eax
  20cc95:	89 c6                	mov    esi,eax
        stderr.print("Unable to dump stack trace: Unable to open debug info: {}\n", @errorName(err)) catch return;
  20cc97:	e8 64 e9 ff ff       	call   20b600 <panic>
  20cc9c:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  20cca3:	48 8d 05 56 03 03 00 	lea    rax,[rip+0x30356]        # 23d000 <raw+0xf48>
  20ccaa:	66 8b 8d 76 fe ff ff 	mov    cx,WORD PTR [rbp-0x18a]
  20ccb1:	48 0f bf d1          	movsx  rdx,cx
  20ccb5:	48 c1 e2 04          	shl    rdx,0x4
  20ccb9:	48 01 d0             	add    rax,rdx
  20ccbc:	48 8b b5 78 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x188]
  20ccc3:	48 89 c2             	mov    rdx,rax
  20ccc6:	e8 b5 0f 00 00       	call   20dc80 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.24>
  20cccb:	66 89 85 b6 fe ff ff 	mov    WORD PTR [rbp-0x14a],ax
  20ccd2:	66 83 bd b6 fe ff ff 	cmp    WORD PTR [rbp-0x14a],0x0
  20ccd9:	00 
  20ccda:	0f 85 a1 fe ff ff    	jne    20cb81 <dumpStackTrace+0xd1>
  20cce0:	e9 a5 fe ff ff       	jmp    20cb8a <dumpStackTrace+0xda>
  20cce5:	66 8b 85 76 fe ff ff 	mov    ax,WORD PTR [rbp-0x18a]
  20ccec:	66 83 f8 2a          	cmp    ax,0x2a
  20ccf0:	72 aa                	jb     20cc9c <dumpStackTrace+0x1ec>
  20ccf2:	eb 98                	jmp    20cc8c <dumpStackTrace+0x1dc>
  20ccf4:	48 8d 3d dd 66 03 00 	lea    rdi,[rip+0x366dd]        # 2433d8 <__unnamed_20>
  20ccfb:	31 c0                	xor    eax,eax
  20ccfd:	89 c6                	mov    esi,eax
        stderr.print("Unable to dump stack trace: {}\n", @errorName(err)) catch return;
  20ccff:	e8 fc e8 ff ff       	call   20b600 <panic>
  20cd04:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  20cd0b:	48 8d 05 ee 02 03 00 	lea    rax,[rip+0x302ee]        # 23d000 <raw+0xf48>
  20cd12:	66 8b 8d 36 fe ff ff 	mov    cx,WORD PTR [rbp-0x1ca]
  20cd19:	48 0f bf d1          	movsx  rdx,cx
  20cd1d:	48 c1 e2 04          	shl    rdx,0x4
  20cd21:	48 01 d0             	add    rax,rdx
  20cd24:	48 8b b5 38 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1c8]
  20cd2b:	48 89 c2             	mov    rdx,rax
  20cd2e:	e8 1d 14 00 00       	call   20e150 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.25>
  20cd33:	66 89 85 b2 fe ff ff 	mov    WORD PTR [rbp-0x14e],ax
  20cd3a:	66 83 bd b2 fe ff ff 	cmp    WORD PTR [rbp-0x14e],0x0
  20cd41:	00 
  20cd42:	0f 85 29 ff ff ff    	jne    20cc71 <dumpStackTrace+0x1c1>
  20cd48:	e9 2d ff ff ff       	jmp    20cc7a <dumpStackTrace+0x1ca>
  20cd4d:	66 8b 85 36 fe ff ff 	mov    ax,WORD PTR [rbp-0x1ca]
  20cd54:	66 83 f8 2a          	cmp    ax,0x2a
  20cd58:	72 aa                	jb     20cd04 <dumpStackTrace+0x254>
  20cd5a:	eb 98                	jmp    20ccf4 <dumpStackTrace+0x244>
  20cd5c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000020cd60 <dumpCurrentStackTrace>:
pub fn dumpCurrentStackTrace(start_addr: ?usize) void {
  20cd60:	55                   	push   rbp
  20cd61:	48 89 e5             	mov    rbp,rsp
  20cd64:	48 81 ec d0 01 00 00 	sub    rsp,0x1d0
  20cd6b:	48 8d 85 e8 fe ff ff 	lea    rax,[rbp-0x118]
  20cd72:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  20cd79:	48 8d 8d 10 ff ff ff 	lea    rcx,[rbp-0xf0]
  20cd80:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  20cd87:	00 00 00 00 
  20cd8b:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  20cd92:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  20cd99:	1e 00 00 00 
    const stderr = getStderrStream() catch return;
  20cd9d:	48 89 bd 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rdi
  20cda4:	48 89 c7             	mov    rdi,rax
  20cda7:	e8 a4 fb ff ff       	call   20c950 <getStderrStream>
  20cdac:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  20cdb3:	00 
  20cdb4:	74 09                	je     20cdbf <dumpCurrentStackTrace+0x5f>
  20cdb6:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  20cdbd:	5d                   	pop    rbp
  20cdbe:	c3                   	ret    
  20cdbf:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  20cdc6:	48 89 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rax
  20cdcd:	48 8d bd c8 fe ff ff 	lea    rdi,[rbp-0x138]
  20cdd4:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  20cddb:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
  20cde2:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
    const debug_info = getSelfDebugInfo() catch |err| {
  20cde9:	e8 92 0d 00 00       	call   20db80 <getSelfDebugInfo>
  20cdee:	66 83 bd c8 fe ff ff 	cmp    WORD PTR [rbp-0x138],0x0
  20cdf5:	00 
  20cdf6:	74 4b                	je     20ce43 <dumpCurrentStackTrace+0xe3>
  20cdf8:	66 8b 85 c8 fe ff ff 	mov    ax,WORD PTR [rbp-0x138]
  20cdff:	66 89 85 a6 fe ff ff 	mov    WORD PTR [rbp-0x15a],ax
        stderr.print("Unable to dump stack trace: Unable to open debug info: {}\n", @errorName(err)) catch return;
  20ce06:	48 8b b5 a8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x158]
  20ce0d:	66 8b 85 a6 fe ff ff 	mov    ax,WORD PTR [rbp-0x15a]
  20ce14:	66 83 f8 00          	cmp    ax,0x0
  20ce18:	48 89 b5 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rsi
  20ce1f:	66 89 85 76 fe ff ff 	mov    WORD PTR [rbp-0x18a],ax
  20ce26:	0f 85 5b 01 00 00    	jne    20cf87 <dumpCurrentStackTrace+0x227>
  20ce2c:	e9 fd 00 00 00       	jmp    20cf2e <dumpCurrentStackTrace+0x1ce>
  20ce31:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  20ce38:	5d                   	pop    rbp
  20ce39:	c3                   	ret    
        return;
  20ce3a:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  20ce41:	5d                   	pop    rbp
  20ce42:	c3                   	ret    
    const debug_info = getSelfDebugInfo() catch |err| {
  20ce43:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  20ce4a:	48 89 85 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rax
  20ce51:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
  20ce58:	48 89 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rax
    writeCurrentStackTrace(stderr, getDebugInfoAllocator(), debug_info, wantTtyColor(), start_addr) catch |err| {
  20ce5f:	48 8b b5 a8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x158]
  20ce66:	48 89 b5 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rsi
  20ce6d:	e8 5e 0e 00 00       	call   20dcd0 <getDebugInfoAllocator>
  20ce72:	48 8b 8d 98 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x168]
  20ce79:	48 89 85 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rax
  20ce80:	48 89 8d 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rcx
  20ce87:	e8 04 0f 00 00       	call   20dd90 <wantTtyColor>
  20ce8c:	48 8d 8d f8 fe ff ff 	lea    rcx,[rbp-0x108]
  20ce93:	44 0f b6 c0          	movzx  r8d,al
  20ce97:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  20ce9e:	48 8b b5 60 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1a0]
  20cea5:	48 8b 95 58 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1a8]
  20ceac:	4c 8b 8d 50 fe ff ff 	mov    r9,QWORD PTR [rbp-0x1b0]
  20ceb3:	48 89 8d 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rcx
  20ceba:	4c 89 c9             	mov    rcx,r9
  20cebd:	4c 8b 8d 88 fe ff ff 	mov    r9,QWORD PTR [rbp-0x178]
  20cec4:	e8 d7 12 00 00       	call   20e1a0 <writeCurrentStackTrace>
  20cec9:	66 89 85 b4 fe ff ff 	mov    WORD PTR [rbp-0x14c],ax
  20ced0:	66 83 bd b4 fe ff ff 	cmp    WORD PTR [rbp-0x14c],0x0
  20ced7:	00 
  20ced8:	74 4b                	je     20cf25 <dumpCurrentStackTrace+0x1c5>
  20ceda:	66 8b 85 b4 fe ff ff 	mov    ax,WORD PTR [rbp-0x14c]
  20cee1:	66 89 85 96 fe ff ff 	mov    WORD PTR [rbp-0x16a],ax
        stderr.print("Unable to dump stack trace: {}\n", @errorName(err)) catch return;
  20cee8:	48 8b b5 a8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x158]
  20ceef:	66 8b 85 96 fe ff ff 	mov    ax,WORD PTR [rbp-0x16a]
  20cef6:	66 83 f8 00          	cmp    ax,0x0
  20cefa:	48 89 b5 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rsi
  20cf01:	66 89 85 3e fe ff ff 	mov    WORD PTR [rbp-0x1c2],ax
  20cf08:	0f 85 e1 00 00 00    	jne    20cfef <dumpCurrentStackTrace+0x28f>
  20cf0e:	e9 83 00 00 00       	jmp    20cf96 <dumpCurrentStackTrace+0x236>
  20cf13:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  20cf1a:	5d                   	pop    rbp
  20cf1b:	c3                   	ret    
        return;
  20cf1c:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  20cf23:	5d                   	pop    rbp
  20cf24:	c3                   	ret    
pub fn dumpCurrentStackTrace(start_addr: ?usize) void {
  20cf25:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  20cf2c:	5d                   	pop    rbp
  20cf2d:	c3                   	ret    
  20cf2e:	48 8d 3d a3 64 03 00 	lea    rdi,[rip+0x364a3]        # 2433d8 <__unnamed_20>
  20cf35:	31 c0                	xor    eax,eax
  20cf37:	89 c6                	mov    esi,eax
        stderr.print("Unable to dump stack trace: Unable to open debug info: {}\n", @errorName(err)) catch return;
  20cf39:	e8 c2 e6 ff ff       	call   20b600 <panic>
  20cf3e:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  20cf45:	48 8d 05 b4 00 03 00 	lea    rax,[rip+0x300b4]        # 23d000 <raw+0xf48>
  20cf4c:	66 8b 8d 76 fe ff ff 	mov    cx,WORD PTR [rbp-0x18a]
  20cf53:	48 0f bf d1          	movsx  rdx,cx
  20cf57:	48 c1 e2 04          	shl    rdx,0x4
  20cf5b:	48 01 d0             	add    rax,rdx
  20cf5e:	48 8b b5 78 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x188]
  20cf65:	48 89 c2             	mov    rdx,rax
  20cf68:	e8 13 0d 00 00       	call   20dc80 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.24>
  20cf6d:	66 89 85 b6 fe ff ff 	mov    WORD PTR [rbp-0x14a],ax
  20cf74:	66 83 bd b6 fe ff ff 	cmp    WORD PTR [rbp-0x14a],0x0
  20cf7b:	00 
  20cf7c:	0f 85 af fe ff ff    	jne    20ce31 <dumpCurrentStackTrace+0xd1>
  20cf82:	e9 b3 fe ff ff       	jmp    20ce3a <dumpCurrentStackTrace+0xda>
  20cf87:	66 8b 85 76 fe ff ff 	mov    ax,WORD PTR [rbp-0x18a]
  20cf8e:	66 83 f8 2a          	cmp    ax,0x2a
  20cf92:	72 aa                	jb     20cf3e <dumpCurrentStackTrace+0x1de>
  20cf94:	eb 98                	jmp    20cf2e <dumpCurrentStackTrace+0x1ce>
  20cf96:	48 8d 3d 3b 64 03 00 	lea    rdi,[rip+0x3643b]        # 2433d8 <__unnamed_20>
  20cf9d:	31 c0                	xor    eax,eax
  20cf9f:	89 c6                	mov    esi,eax
        stderr.print("Unable to dump stack trace: {}\n", @errorName(err)) catch return;
  20cfa1:	e8 5a e6 ff ff       	call   20b600 <panic>
  20cfa6:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  20cfad:	48 8d 05 4c 00 03 00 	lea    rax,[rip+0x3004c]        # 23d000 <raw+0xf48>
  20cfb4:	66 8b 8d 3e fe ff ff 	mov    cx,WORD PTR [rbp-0x1c2]
  20cfbb:	48 0f bf d1          	movsx  rdx,cx
  20cfbf:	48 c1 e2 04          	shl    rdx,0x4
  20cfc3:	48 01 d0             	add    rax,rdx
  20cfc6:	48 8b b5 40 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1c0]
  20cfcd:	48 89 c2             	mov    rdx,rax
  20cfd0:	e8 7b 11 00 00       	call   20e150 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.25>
  20cfd5:	66 89 85 b2 fe ff ff 	mov    WORD PTR [rbp-0x14e],ax
  20cfdc:	66 83 bd b2 fe ff ff 	cmp    WORD PTR [rbp-0x14e],0x0
  20cfe3:	00 
  20cfe4:	0f 85 29 ff ff ff    	jne    20cf13 <dumpCurrentStackTrace+0x1b3>
  20cfea:	e9 2d ff ff ff       	jmp    20cf1c <dumpCurrentStackTrace+0x1bc>
  20cfef:	66 8b 85 3e fe ff ff 	mov    ax,WORD PTR [rbp-0x1c2]
  20cff6:	66 83 f8 2a          	cmp    ax,0x2a
  20cffa:	72 aa                	jb     20cfa6 <dumpCurrentStackTrace+0x246>
  20cffc:	eb 98                	jmp    20cf96 <dumpCurrentStackTrace+0x236>
  20cffe:	66 90                	xchg   ax,ax

000000000020d000 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.19>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  20d000:	55                   	push   rbp
  20d001:	48 89 e5             	mov    rbp,rsp
  20d004:	48 83 ec 20          	sub    rsp,0x20
  20d008:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
            return std.fmt.format(self, Error, self.writeFn, format, args);
  20d00c:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20d010:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20d014:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  20d017:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  20d01b:	e8 70 13 00 00       	call   20e390 <format.26>
  20d020:	66 83 f8 00          	cmp    ax,0x0
  20d024:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  20d028:	74 0b                	je     20d035 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.19+0x35>
  20d02a:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  20d02e:	e8 5d ec ff ff       	call   20bc90 <__zig_return_error>
  20d033:	eb 02                	jmp    20d037 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.19+0x37>
  20d035:	eb 00                	jmp    20d037 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.19+0x37>
  20d037:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  20d03b:	48 83 c4 20          	add    rsp,0x20
  20d03f:	5d                   	pop    rbp
  20d040:	c3                   	ret    
  20d041:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20d048:	0f 1f 84 00 00 00 00 
  20d04f:	00 

000000000020d050 <clock_getres>:
}

pub fn clock_getres(clk_id: i32, tp: *timespec) usize {
  20d050:	55                   	push   rbp
  20d051:	48 89 e5             	mov    rbp,rsp
  20d054:	48 83 ec 10          	sub    rsp,0x10
  20d058:	b8 e5 00 00 00       	mov    eax,0xe5
  20d05d:	89 c1                	mov    ecx,eax
  20d05f:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  20d062:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    return syscall2(SYS_clock_getres, @bitCast(usize, isize(clk_id)), @ptrToInt(tp));
  20d066:	48 63 75 fc          	movsxd rsi,DWORD PTR [rbp-0x4]
  20d06a:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  20d06e:	48 89 cf             	mov    rdi,rcx
  20d071:	e8 8a 13 00 00       	call   20e400 <syscall2>
  20d076:	48 83 c4 10          	add    rsp,0x10
  20d07a:	5d                   	pop    rbp
  20d07b:	c3                   	ret    
  20d07c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000020d080 <getErrno>:
pub fn getErrno(r: usize) usize {
  20d080:	55                   	push   rbp
  20d081:	48 89 e5             	mov    rbp,rsp
  20d084:	48 83 ec 30          	sub    rsp,0x30
  20d088:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    const signed_r = @bitCast(isize, r);
  20d08c:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  20d090:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
    return if (signed_r > -4096 and signed_r < 0) @intCast(usize, -signed_r) else 0;
  20d094:	48 81 7d f0 00 f0 ff 	cmp    QWORD PTR [rbp-0x10],0xfffffffffffff000
  20d09b:	ff 
  20d09c:	0f 9f c0             	setg   al
  20d09f:	a8 01                	test   al,0x1
  20d0a1:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
  20d0a4:	75 02                	jne    20d0a8 <getErrno+0x28>
  20d0a6:	eb 0b                	jmp    20d0b3 <getErrno+0x33>
  20d0a8:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
  20d0ad:	0f 9c c0             	setl   al
  20d0b0:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
  20d0b3:	8a 45 ef             	mov    al,BYTE PTR [rbp-0x11]
  20d0b6:	a8 01                	test   al,0x1
  20d0b8:	75 02                	jne    20d0bc <getErrno+0x3c>
  20d0ba:	eb 16                	jmp    20d0d2 <getErrno+0x52>
  20d0bc:	31 c0                	xor    eax,eax
  20d0be:	89 c1                	mov    ecx,eax
  20d0c0:	48 2b 4d f0          	sub    rcx,QWORD PTR [rbp-0x10]
  20d0c4:	0f 90 c2             	seto   dl
  20d0c7:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  20d0cb:	88 55 df             	mov    BYTE PTR [rbp-0x21],dl
  20d0ce:	70 16                	jo     20d0e6 <getErrno+0x66>
  20d0d0:	eb 24                	jmp    20d0f6 <getErrno+0x76>
  20d0d2:	31 c0                	xor    eax,eax
  20d0d4:	89 c1                	mov    ecx,eax
  20d0d6:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  20d0da:	eb 00                	jmp    20d0dc <getErrno+0x5c>
  20d0dc:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20d0e0:	48 83 c4 30          	add    rsp,0x30
  20d0e4:	5d                   	pop    rbp
  20d0e5:	c3                   	ret    
  20d0e6:	48 8d 3d db 60 03 00 	lea    rdi,[rip+0x360db]        # 2431c8 <__unnamed_4>
  20d0ed:	31 c0                	xor    eax,eax
  20d0ef:	89 c6                	mov    esi,eax
  20d0f1:	e8 0a e5 ff ff       	call   20b600 <panic>
  20d0f6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20d0fa:	48 83 f8 00          	cmp    rax,0x0
  20d0fe:	7c 0a                	jl     20d10a <getErrno+0x8a>
  20d100:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20d104:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  20d108:	eb d2                	jmp    20d0dc <getErrno+0x5c>
  20d10a:	48 8d 3d 77 61 03 00 	lea    rdi,[rip+0x36177]        # 243288 <__unnamed_3>
  20d111:	31 c0                	xor    eax,eax
  20d113:	89 c6                	mov    esi,eax
  20d115:	e8 e6 e4 ff ff       	call   20b600 <panic>
  20d11a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000020d120 <unexpectedErrorPosix>:
pub fn unexpectedErrorPosix(errno: usize) UnexpectedError {
  20d120:	55                   	push   rbp
  20d121:	48 89 e5             	mov    rbp,rsp
  20d124:	48 83 ec 10          	sub    rsp,0x10
  20d128:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
    return error.Unexpected;
  20d12c:	e8 5f eb ff ff       	call   20bc90 <__zig_return_error>
  20d131:	66 b8 02 00          	mov    ax,0x2
  20d135:	48 83 c4 10          	add    rsp,0x10
  20d139:	5d                   	pop    rbp
  20d13a:	c3                   	ret    
  20d13b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000020d140 <clock_gettime>:
pub fn clock_gettime(clk_id: i32, tp: *timespec) usize {
  20d140:	55                   	push   rbp
  20d141:	48 89 e5             	mov    rbp,rsp
  20d144:	48 83 ec 30          	sub    rsp,0x30
  20d148:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  20d14b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
        const f = @atomicLoad(@typeOf(init_vdso_clock_gettime), &vdso_clock_gettime, builtin.AtomicOrder.Unordered);
  20d14f:	48 8b 35 e2 ee 02 00 	mov    rsi,QWORD PTR [rip+0x2eee2]        # 23c038 <vdso_clock_gettime>
  20d156:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
        if (@ptrToInt(f) != 0) {
  20d15a:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  20d15e:	48 83 fe 00          	cmp    rsi,0x0
  20d162:	74 41                	je     20d1a5 <clock_gettime+0x65>
            const rc = f(clk_id, tp);
  20d164:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20d168:	8b 7d fc             	mov    edi,DWORD PTR [rbp-0x4]
  20d16b:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20d16f:	ff d0                	call   rax
  20d171:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
            switch (rc) {
  20d175:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20d179:	48 89 c6             	mov    rsi,rax
  20d17c:	48 83 ee ea          	sub    rsi,0xffffffffffffffea
  20d180:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  20d184:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  20d188:	74 0f                	je     20d199 <clock_gettime+0x59>
  20d18a:	eb 00                	jmp    20d18c <clock_gettime+0x4c>
  20d18c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  20d190:	48 85 c0             	test   rax,rax
  20d193:	74 04                	je     20d199 <clock_gettime+0x59>
  20d195:	eb 00                	jmp    20d197 <clock_gettime+0x57>
  20d197:	eb 0a                	jmp    20d1a3 <clock_gettime+0x63>
                0, @bitCast(usize, isize(-EINVAL)) => return rc,
  20d199:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20d19d:	48 83 c4 30          	add    rsp,0x30
  20d1a1:	5d                   	pop    rbp
  20d1a2:	c3                   	ret    
        if (@ptrToInt(f) != 0) {
  20d1a3:	eb 02                	jmp    20d1a7 <clock_gettime+0x67>
  20d1a5:	eb 00                	jmp    20d1a7 <clock_gettime+0x67>
  20d1a7:	b8 e4 00 00 00       	mov    eax,0xe4
  20d1ac:	89 c7                	mov    edi,eax
    return syscall2(SYS_clock_gettime, @bitCast(usize, isize(clk_id)), @ptrToInt(tp));
  20d1ae:	48 63 75 fc          	movsxd rsi,DWORD PTR [rbp-0x4]
  20d1b2:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  20d1b6:	e8 45 12 00 00       	call   20e400 <syscall2>
  20d1bb:	48 83 c4 30          	add    rsp,0x30
  20d1bf:	5d                   	pop    rbp
  20d1c0:	c3                   	ret    
  20d1c1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20d1c8:	0f 1f 84 00 00 00 00 
  20d1cf:	00 

000000000020d1d0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.20>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  20d1d0:	55                   	push   rbp
  20d1d1:	48 89 e5             	mov    rbp,rsp
  20d1d4:	48 83 ec 30          	sub    rsp,0x30
  20d1d8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  20d1dc:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  20d1e0:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return std.fmt.format(self, Error, self.writeFn, format, args);
  20d1e4:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20d1e8:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  20d1ec:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
  20d1ef:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  20d1f3:	4c 8b 45 e8          	mov    r8,QWORD PTR [rbp-0x18]
  20d1f7:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  20d1fb:	e8 20 12 00 00       	call   20e420 <format.27>
  20d200:	66 83 f8 00          	cmp    ax,0x0
  20d204:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  20d208:	74 0b                	je     20d215 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.20+0x45>
  20d20a:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  20d20e:	e8 7d ea ff ff       	call   20bc90 <__zig_return_error>
  20d213:	eb 02                	jmp    20d217 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.20+0x47>
  20d215:	eb 00                	jmp    20d217 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.20+0x47>
  20d217:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  20d21b:	48 83 c4 30          	add    rsp,0x30
  20d21f:	5d                   	pop    rbp
  20d220:	c3                   	ret    
  20d221:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20d228:	0f 1f 84 00 00 00 00 
  20d22f:	00 

000000000020d230 <producer>:
fn producer(pContext: *ThreadContext) void {
  20d230:	55                   	push   rbp
  20d231:	48 89 e5             	mov    rbp,rsp
  20d234:	48 83 ec 60          	sub    rsp,0x60
  20d238:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    while (pContext.counter < max_counter) {
  20d23c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20d240:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  20d243:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  20d247:	ba 7f 96 98 00       	mov    edx,0x98967f
  20d24c:	89 d6                	mov    esi,edx
  20d24e:	31 d2                	xor    edx,edx
  20d250:	48 29 ce             	sub    rsi,rcx
  20d253:	89 d1                	mov    ecx,edx
  20d255:	48 19 c1             	sbb    rcx,rax
  20d258:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
  20d25c:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  20d260:	0f 82 9e 00 00 00    	jb     20d304 <producer+0xd4>
  20d266:	eb 00                	jmp    20d268 <producer+0x38>
  20d268:	b8 10 27 00 00       	mov    eax,0x2710
  20d26d:	89 c7                	mov    edi,eax
  20d26f:	48 8d 35 c2 6d 03 00 	lea    rsi,[rip+0x36dc2]        # 244038 <produce>
  20d276:	31 d2                	xor    edx,edx
        var produce_val = stallWhileDesiredVal(stallCountWait, &produce, consumeSignal);
  20d278:	e8 53 01 00 00       	call   20d3d0 <stallWhileDesiredVal>
  20d27d:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
        while (produce_val != produceSignal) {
  20d280:	83 7d f4 01          	cmp    DWORD PTR [rbp-0xc],0x1
  20d284:	74 19                	je     20d29f <producer+0x6f>
            gProducer_wait_count += 1;
  20d286:	48 8b 05 73 6d 03 00 	mov    rax,QWORD PTR [rip+0x36d73]        # 244000 <gProducer_wait_count>
  20d28d:	48 83 c0 01          	add    rax,0x1
  20d291:	0f 92 c1             	setb   cl
  20d294:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  20d298:	88 4d d7             	mov    BYTE PTR [rbp-0x29],cl
  20d29b:	72 6d                	jb     20d30a <producer+0xda>
  20d29d:	eb 7b                	jmp    20d31a <producer+0xea>
        _ = @atomicRmw(@typeOf(gCounter), &gCounter, AtomicRmwOp.Add, 1, AtomicOrder.SeqCst);
  20d29f:	f0 48 81 05 75 6d 03 	lock add QWORD PTR [rip+0x36d75],0x1        # 244020 <gCounter>
  20d2a6:	00 01 00 00 00 
        pContext.counter += 1;
  20d2ab:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20d2af:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  20d2b2:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
  20d2b6:	48 83 c1 01          	add    rcx,0x1
  20d2ba:	48 83 d2 00          	adc    rdx,0x0
  20d2be:	40 0f 92 c6          	setb   sil
  20d2c2:	48 89 cf             	mov    rdi,rcx
  20d2c5:	40 f6 c6 01          	test   sil,0x1
  20d2c9:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  20d2cd:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
  20d2d1:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
  20d2d5:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
  20d2d9:	75 66                	jne    20d341 <producer+0x111>
  20d2db:	eb 74                	jmp    20d351 <producer+0x121>
            gProducer_wake_count += 1;
  20d2dd:	48 8b 05 2c 6d 03 00 	mov    rax,QWORD PTR [rip+0x36d2c]        # 244010 <gProducer_wake_count>
  20d2e4:	48 83 c0 01          	add    rax,0x1
  20d2e8:	0f 92 c1             	setb   cl
  20d2eb:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  20d2ef:	88 4d a7             	mov    BYTE PTR [rbp-0x59],cl
  20d2f2:	0f 82 9e 00 00 00    	jb     20d396 <producer+0x166>
  20d2f8:	e9 a9 00 00 00       	jmp    20d3a6 <producer+0x176>
        if (produce_val != produceSignal) {
  20d2fd:	eb 00                	jmp    20d2ff <producer+0xcf>
    while (pContext.counter < max_counter) {
  20d2ff:	e9 38 ff ff ff       	jmp    20d23c <producer+0xc>
fn producer(pContext: *ThreadContext) void {
  20d304:	48 83 c4 60          	add    rsp,0x60
  20d308:	5d                   	pop    rbp
  20d309:	c3                   	ret    
  20d30a:	48 8d 3d b7 5e 03 00 	lea    rdi,[rip+0x35eb7]        # 2431c8 <__unnamed_4>
  20d311:	31 c0                	xor    eax,eax
  20d313:	89 c6                	mov    esi,eax
            gProducer_wait_count += 1;
  20d315:	e8 e6 e2 ff ff       	call   20b600 <panic>
  20d31a:	48 8d 3d 17 6d 03 00 	lea    rdi,[rip+0x36d17]        # 244038 <produce>
  20d321:	31 f6                	xor    esi,esi
  20d323:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  20d327:	48 89 05 d2 6c 03 00 	mov    QWORD PTR [rip+0x36cd2],rax        # 244000 <gProducer_wait_count>
            futex_wait(&produce, consumeSignal);
  20d32e:	e8 2d 01 00 00       	call   20d460 <futex_wait>
            produce_val = @atomicLoad(@typeOf(produce), &produce, AtomicOrder.SeqCst);
  20d333:	8b 35 ff 6c 03 00    	mov    esi,DWORD PTR [rip+0x36cff]        # 244038 <produce>
  20d339:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
        while (produce_val != produceSignal) {
  20d33c:	e9 3f ff ff ff       	jmp    20d280 <producer+0x50>
  20d341:	48 8d 3d 80 5e 03 00 	lea    rdi,[rip+0x35e80]        # 2431c8 <__unnamed_4>
  20d348:	31 c0                	xor    eax,eax
  20d34a:	89 c6                	mov    esi,eax
        pContext.counter += 1;
  20d34c:	e8 af e2 ff ff       	call   20b600 <panic>
  20d351:	b8 10 27 00 00       	mov    eax,0x2710
  20d356:	89 c7                	mov    edi,eax
  20d358:	48 8d 35 d9 6c 03 00 	lea    rsi,[rip+0x36cd9]        # 244038 <produce>
  20d35f:	31 d2                	xor    edx,edx
  20d361:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  20d365:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
  20d369:	4c 89 01             	mov    QWORD PTR [rcx],r8
  20d36c:	4c 8b 4d b0          	mov    r9,QWORD PTR [rbp-0x50]
  20d370:	4c 89 49 08          	mov    QWORD PTR [rcx+0x8],r9
        _ = @atomicRmw(@typeOf(produce), &produce, AtomicRmwOp.Xchg, consumeSignal, AtomicOrder.SeqCst);
  20d374:	31 c0                	xor    eax,eax
  20d376:	87 05 bc 6c 03 00    	xchg   DWORD PTR [rip+0x36cbc],eax        # 244038 <produce>
        produce_val = stallWhileDesiredVal(stallCountWait, &produce, consumeSignal);
  20d37c:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
  20d37f:	e8 4c 00 00 00       	call   20d3d0 <stallWhileDesiredVal>
  20d384:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
        if (produce_val != produceSignal) {
  20d387:	83 7d f4 01          	cmp    DWORD PTR [rbp-0xc],0x1
  20d38b:	0f 85 4c ff ff ff    	jne    20d2dd <producer+0xad>
  20d391:	e9 67 ff ff ff       	jmp    20d2fd <producer+0xcd>
  20d396:	48 8d 3d 2b 5e 03 00 	lea    rdi,[rip+0x35e2b]        # 2431c8 <__unnamed_4>
  20d39d:	31 c0                	xor    eax,eax
  20d39f:	89 c6                	mov    esi,eax
            gProducer_wake_count += 1;
  20d3a1:	e8 5a e2 ff ff       	call   20b600 <panic>
  20d3a6:	48 8d 3d 8b 6c 03 00 	lea    rdi,[rip+0x36c8b]        # 244038 <produce>
  20d3ad:	be 01 00 00 00       	mov    esi,0x1
  20d3b2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  20d3b6:	48 89 05 53 6c 03 00 	mov    QWORD PTR [rip+0x36c53],rax        # 244010 <gProducer_wake_count>
            futex_wake(&produce, 1);
  20d3bd:	e8 ee 00 00 00       	call   20d4b0 <futex_wake>
        if (produce_val != produceSignal) {
  20d3c2:	e9 38 ff ff ff       	jmp    20d2ff <producer+0xcf>
  20d3c7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  20d3ce:	00 00 

000000000020d3d0 <stallWhileDesiredVal>:
fn stallWhileDesiredVal(stallCount: u64, pValue: *u32, desiredValue: u32) u32 {
  20d3d0:	55                   	push   rbp
  20d3d1:	48 89 e5             	mov    rbp,rsp
  20d3d4:	48 83 ec 40          	sub    rsp,0x40
  20d3d8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  20d3dc:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  20d3e0:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
    var count = stallCount;
  20d3e3:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20d3e7:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    var val = @atomicLoad(u32, pValue, AtomicOrder.Acquire);
  20d3eb:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20d3ef:	8b 16                	mov    edx,DWORD PTR [rsi]
  20d3f1:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
    while ((val == desiredValue) and (count > 0)) {
  20d3f4:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  20d3f7:	3b 45 ec             	cmp    eax,DWORD PTR [rbp-0x14]
  20d3fa:	0f 94 c1             	sete   cl
  20d3fd:	f6 c1 01             	test   cl,0x1
  20d400:	88 4d db             	mov    BYTE PTR [rbp-0x25],cl
  20d403:	75 02                	jne    20d407 <stallWhileDesiredVal+0x37>
  20d405:	eb 0b                	jmp    20d412 <stallWhileDesiredVal+0x42>
  20d407:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
  20d40c:	0f 97 c0             	seta   al
  20d40f:	88 45 db             	mov    BYTE PTR [rbp-0x25],al
  20d412:	8a 45 db             	mov    al,BYTE PTR [rbp-0x25]
  20d415:	a8 01                	test   al,0x1
  20d417:	75 02                	jne    20d41b <stallWhileDesiredVal+0x4b>
  20d419:	eb 1f                	jmp    20d43a <stallWhileDesiredVal+0x6a>
        val = @atomicLoad(u32, pValue, AtomicOrder.Acquire);
  20d41b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20d41f:	8b 08                	mov    ecx,DWORD PTR [rax]
  20d421:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
        count -= 1;
  20d424:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20d428:	48 83 e8 01          	sub    rax,0x1
  20d42c:	0f 92 c2             	setb   dl
  20d42f:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  20d433:	88 55 cf             	mov    BYTE PTR [rbp-0x31],dl
  20d436:	72 0b                	jb     20d443 <stallWhileDesiredVal+0x73>
  20d438:	eb 19                	jmp    20d453 <stallWhileDesiredVal+0x83>
    return val;
  20d43a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  20d43d:	48 83 c4 40          	add    rsp,0x40
  20d441:	5d                   	pop    rbp
  20d442:	c3                   	ret    
  20d443:	48 8d 3d 7e 5d 03 00 	lea    rdi,[rip+0x35d7e]        # 2431c8 <__unnamed_4>
  20d44a:	31 c0                	xor    eax,eax
  20d44c:	89 c6                	mov    esi,eax
        count -= 1;
  20d44e:	e8 ad e1 ff ff       	call   20b600 <panic>
  20d453:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20d457:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    while ((val == desiredValue) and (count > 0)) {
  20d45b:	eb 97                	jmp    20d3f4 <stallWhileDesiredVal+0x24>
  20d45d:	0f 1f 00             	nop    DWORD PTR [rax]

000000000020d460 <futex_wait>:
pub fn futex_wait(pVal: *u32, expected_value: u32) void {
  20d460:	55                   	push   rbp
  20d461:	48 89 e5             	mov    rbp,rsp
  20d464:	48 83 ec 30          	sub    rsp,0x30
  20d468:	b8 ca 00 00 00       	mov    eax,0xca
  20d46d:	89 c1                	mov    ecx,eax
  20d46f:	31 c0                	xor    eax,eax
  20d471:	89 c2                	mov    edx,eax
  20d473:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  20d477:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
    _ = syscall4(SYS_futex, @ptrToInt(pVal), linux.FUTEX_WAIT, expected_value, 0);
  20d47a:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20d47e:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  20d481:	89 c7                	mov    edi,eax
  20d483:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  20d487:	48 89 cf             	mov    rdi,rcx
  20d48a:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  20d48e:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20d492:	4c 8b 45 e0          	mov    r8,QWORD PTR [rbp-0x20]
  20d496:	e8 25 11 00 00       	call   20e5c0 <syscall4>
pub fn futex_wait(pVal: *u32, expected_value: u32) void {
  20d49b:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  20d49f:	48 83 c4 30          	add    rsp,0x30
  20d4a3:	5d                   	pop    rbp
  20d4a4:	c3                   	ret    
  20d4a5:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20d4ac:	00 00 00 00 

000000000020d4b0 <futex_wake>:
pub fn futex_wake(pVal: *u32, num_threads_to_wake: u32) void {
  20d4b0:	55                   	push   rbp
  20d4b1:	48 89 e5             	mov    rbp,rsp
  20d4b4:	48 83 ec 20          	sub    rsp,0x20
  20d4b8:	b8 ca 00 00 00       	mov    eax,0xca
  20d4bd:	89 c1                	mov    ecx,eax
  20d4bf:	b8 01 00 00 00       	mov    eax,0x1
  20d4c4:	89 c2                	mov    edx,eax
  20d4c6:	31 c0                	xor    eax,eax
  20d4c8:	41 89 c0             	mov    r8d,eax
  20d4cb:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  20d4cf:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
    _ = syscall4(SYS_futex, @ptrToInt(pVal), linux.FUTEX_WAKE, num_threads_to_wake, 0);
  20d4d2:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20d4d6:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  20d4d9:	89 c7                	mov    edi,eax
  20d4db:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  20d4df:	48 89 cf             	mov    rdi,rcx
  20d4e2:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20d4e6:	e8 d5 10 00 00       	call   20e5c0 <syscall4>
pub fn futex_wake(pVal: *u32, num_threads_to_wake: u32) void {
  20d4eb:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  20d4ef:	48 83 c4 20          	add    rsp,0x20
  20d4f3:	5d                   	pop    rbp
  20d4f4:	c3                   	ret    
  20d4f5:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20d4fc:	00 00 00 00 

000000000020d500 <mmap>:
pub fn mmap(address: ?[*]u8, length: usize, prot: usize, flags: u32, fd: i32, offset: isize) usize {
  20d500:	55                   	push   rbp
  20d501:	48 89 e5             	mov    rbp,rsp
  20d504:	48 83 ec 40          	sub    rsp,0x40
  20d508:	b8 09 00 00 00       	mov    eax,0x9
  20d50d:	41 89 c2             	mov    r10d,eax
  20d510:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  20d514:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  20d518:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  20d51c:	89 4d e4             	mov    DWORD PTR [rbp-0x1c],ecx
  20d51f:	44 89 45 e0          	mov    DWORD PTR [rbp-0x20],r8d
  20d523:	4c 89 4d d8          	mov    QWORD PTR [rbp-0x28],r9
    return syscall6(SYS_mmap, @ptrToInt(address), length, prot, flags, @intCast(usize, fd), @bitCast(usize, offset));
  20d527:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20d52b:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  20d52f:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20d533:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  20d536:	4c 63 4d e0          	movsxd r9,DWORD PTR [rbp-0x20]
  20d53a:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  20d53e:	89 c0                	mov    eax,eax
  20d540:	41 89 c0             	mov    r8d,eax
  20d543:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
  20d547:	4c 89 d7             	mov    rdi,r10
  20d54a:	4c 8b 55 d0          	mov    r10,QWORD PTR [rbp-0x30]
  20d54e:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  20d552:	e8 99 10 00 00       	call   20e5f0 <syscall6>
  20d557:	48 83 c4 40          	add    rsp,0x40
  20d55b:	5d                   	pop    rbp
  20d55c:	c3                   	ret    
  20d55d:	0f 1f 00             	nop    DWORD PTR [rax]

000000000020d560 <MainFuncs_linuxThreadMain>:
        extern fn linuxThreadMain(ctx_addr: usize) u8 {
  20d560:	55                   	push   rbp
  20d561:	48 89 e5             	mov    rbp,rsp
  20d564:	48 83 ec 10          	sub    rsp,0x10
  20d568:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
            const arg = if (@sizeOf(Context) == 0) {} else @intToPtr(*const Context, ctx_addr).*;
  20d56c:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  20d570:	48 8b 3f             	mov    rdi,QWORD PTR [rdi]
  20d573:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
                    startFn(arg);
  20d577:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  20d57b:	e8 b0 fc ff ff       	call   20d230 <producer>
  20d580:	31 c0                	xor    eax,eax
  20d582:	88 c1                	mov    cl,al
                    return 0;
  20d584:	88 c8                	mov    al,cl
  20d586:	48 83 c4 10          	add    rsp,0x10
  20d58a:	5d                   	pop    rbp
  20d58b:	c3                   	ret    
  20d58c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000020d590 <munmap>:
pub fn munmap(address: usize, length: usize) usize {
  20d590:	55                   	push   rbp
  20d591:	48 89 e5             	mov    rbp,rsp
  20d594:	48 83 ec 10          	sub    rsp,0x10
  20d598:	b8 0b 00 00 00       	mov    eax,0xb
  20d59d:	89 c1                	mov    ecx,eax
  20d59f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  20d5a3:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    return syscall2(SYS_munmap, address, length);
  20d5a7:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20d5ab:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  20d5af:	48 89 cf             	mov    rdi,rcx
  20d5b2:	e8 49 0e 00 00       	call   20e400 <syscall2>
  20d5b7:	48 83 c4 10          	add    rsp,0x10
  20d5bb:	5d                   	pop    rbp
  20d5bc:	c3                   	ret    
  20d5bd:	0f 1f 00             	nop    DWORD PTR [rax]

000000000020d5c0 <consumer>:
fn consumer(pContext: *ThreadContext) void {
  20d5c0:	55                   	push   rbp
  20d5c1:	48 89 e5             	mov    rbp,rsp
  20d5c4:	48 83 ec 70          	sub    rsp,0x70
  20d5c8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    while (pContext.counter < max_counter) {
  20d5cc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20d5d0:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  20d5d3:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  20d5d7:	ba 7f 96 98 00       	mov    edx,0x98967f
  20d5dc:	89 d6                	mov    esi,edx
  20d5de:	31 d2                	xor    edx,edx
  20d5e0:	48 29 ce             	sub    rsi,rcx
  20d5e3:	89 d1                	mov    ecx,edx
  20d5e5:	48 19 c1             	sbb    rcx,rax
  20d5e8:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
  20d5ec:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  20d5f0:	0f 82 cb 00 00 00    	jb     20d6c1 <consumer+0x101>
  20d5f6:	eb 00                	jmp    20d5f8 <consumer+0x38>
  20d5f8:	b8 10 27 00 00       	mov    eax,0x2710
  20d5fd:	89 c7                	mov    edi,eax
  20d5ff:	48 8d 35 32 6a 03 00 	lea    rsi,[rip+0x36a32]        # 244038 <produce>
  20d606:	31 d2                	xor    edx,edx
        _ = @atomicRmw(@typeOf(produce), &produce, AtomicRmwOp.Xchg, produceSignal, AtomicOrder.SeqCst);
  20d608:	b8 01 00 00 00       	mov    eax,0x1
  20d60d:	87 05 25 6a 03 00    	xchg   DWORD PTR [rip+0x36a25],eax        # 244038 <produce>
        var produce_val = stallWhileNotDesiredVal(stallCountWait, &produce, consumeSignal);
  20d613:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
  20d616:	e8 45 01 00 00       	call   20d760 <stallWhileNotDesiredVal>
  20d61b:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
        if (produce_val != consumeSignal) {
  20d61e:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
  20d622:	74 20                	je     20d644 <consumer+0x84>
            gConsumer_wake_count += 1;
  20d624:	48 8b 05 ed 69 03 00 	mov    rax,QWORD PTR [rip+0x369ed]        # 244018 <gConsumer_wake_count>
  20d62b:	48 83 c0 01          	add    rax,0x1
  20d62f:	0f 92 c1             	setb   cl
  20d632:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  20d636:	88 4d cf             	mov    BYTE PTR [rbp-0x31],cl
  20d639:	0f 82 88 00 00 00    	jb     20d6c7 <consumer+0x107>
  20d63f:	e9 93 00 00 00       	jmp    20d6d7 <consumer+0x117>
        if (produce_val != consumeSignal) {
  20d644:	eb 00                	jmp    20d646 <consumer+0x86>
  20d646:	b8 10 27 00 00       	mov    eax,0x2710
  20d64b:	89 c7                	mov    edi,eax
  20d64d:	48 8d 35 e4 69 03 00 	lea    rsi,[rip+0x369e4]        # 244038 <produce>
  20d654:	31 d2                	xor    edx,edx
        produce_val = stallWhileNotDesiredVal(stallCountWait, &produce, consumeSignal);
  20d656:	e8 05 01 00 00       	call   20d760 <stallWhileNotDesiredVal>
  20d65b:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
        while (produce_val != consumeSignal) {
  20d65e:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
  20d662:	74 1c                	je     20d680 <consumer+0xc0>
            gConsumer_wait_count += 1;
  20d664:	48 8b 05 9d 69 03 00 	mov    rax,QWORD PTR [rip+0x3699d]        # 244008 <gConsumer_wait_count>
  20d66b:	48 83 c0 01          	add    rax,0x1
  20d66f:	0f 92 c1             	setb   cl
  20d672:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  20d676:	88 4d bf             	mov    BYTE PTR [rbp-0x41],cl
  20d679:	72 7d                	jb     20d6f8 <consumer+0x138>
  20d67b:	e9 88 00 00 00       	jmp    20d708 <consumer+0x148>
        _ = @atomicRmw(@typeOf(gCounter), &gCounter, AtomicRmwOp.Add, 1, AtomicOrder.SeqCst);
  20d680:	f0 48 81 05 94 69 03 	lock add QWORD PTR [rip+0x36994],0x1        # 244020 <gCounter>
  20d687:	00 01 00 00 00 
        pContext.counter += 1;
  20d68c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20d690:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  20d693:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
  20d697:	48 83 c1 01          	add    rcx,0x1
  20d69b:	48 83 d2 00          	adc    rdx,0x0
  20d69f:	40 0f 92 c6          	setb   sil
  20d6a3:	48 89 cf             	mov    rdi,rcx
  20d6a6:	40 f6 c6 01          	test   sil,0x1
  20d6aa:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  20d6ae:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  20d6b2:	48 89 7d a0          	mov    QWORD PTR [rbp-0x60],rdi
  20d6b6:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  20d6ba:	75 76                	jne    20d732 <consumer+0x172>
  20d6bc:	e9 81 00 00 00       	jmp    20d742 <consumer+0x182>
fn consumer(pContext: *ThreadContext) void {
  20d6c1:	48 83 c4 70          	add    rsp,0x70
  20d6c5:	5d                   	pop    rbp
  20d6c6:	c3                   	ret    
  20d6c7:	48 8d 3d fa 5a 03 00 	lea    rdi,[rip+0x35afa]        # 2431c8 <__unnamed_4>
  20d6ce:	31 c0                	xor    eax,eax
  20d6d0:	89 c6                	mov    esi,eax
            gConsumer_wake_count += 1;
  20d6d2:	e8 29 df ff ff       	call   20b600 <panic>
  20d6d7:	48 8d 3d 5a 69 03 00 	lea    rdi,[rip+0x3695a]        # 244038 <produce>
  20d6de:	be 01 00 00 00       	mov    esi,0x1
  20d6e3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20d6e7:	48 89 05 2a 69 03 00 	mov    QWORD PTR [rip+0x3692a],rax        # 244018 <gConsumer_wake_count>
            futex_wake(&produce, 1);
  20d6ee:	e8 bd fd ff ff       	call   20d4b0 <futex_wake>
        if (produce_val != consumeSignal) {
  20d6f3:	e9 4e ff ff ff       	jmp    20d646 <consumer+0x86>
  20d6f8:	48 8d 3d c9 5a 03 00 	lea    rdi,[rip+0x35ac9]        # 2431c8 <__unnamed_4>
  20d6ff:	31 c0                	xor    eax,eax
  20d701:	89 c6                	mov    esi,eax
            gConsumer_wait_count += 1;
  20d703:	e8 f8 de ff ff       	call   20b600 <panic>
  20d708:	48 8d 3d 29 69 03 00 	lea    rdi,[rip+0x36929]        # 244038 <produce>
  20d70f:	be 01 00 00 00       	mov    esi,0x1
  20d714:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  20d718:	48 89 05 e9 68 03 00 	mov    QWORD PTR [rip+0x368e9],rax        # 244008 <gConsumer_wait_count>
            futex_wait(&produce, produceSignal);
  20d71f:	e8 3c fd ff ff       	call   20d460 <futex_wait>
            produce_val = @atomicLoad(@typeOf(produce), &produce, AtomicOrder.SeqCst);
  20d724:	8b 35 0e 69 03 00    	mov    esi,DWORD PTR [rip+0x3690e]        # 244038 <produce>
  20d72a:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
        while (produce_val != consumeSignal) {
  20d72d:	e9 2c ff ff ff       	jmp    20d65e <consumer+0x9e>
  20d732:	48 8d 3d 8f 5a 03 00 	lea    rdi,[rip+0x35a8f]        # 2431c8 <__unnamed_4>
  20d739:	31 c0                	xor    eax,eax
  20d73b:	89 c6                	mov    esi,eax
        pContext.counter += 1;
  20d73d:	e8 be de ff ff       	call   20b600 <panic>
  20d742:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20d746:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  20d74a:	48 89 08             	mov    QWORD PTR [rax],rcx
  20d74d:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  20d751:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
    while (pContext.counter < max_counter) {
  20d755:	e9 72 fe ff ff       	jmp    20d5cc <consumer+0xc>
  20d75a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000020d760 <stallWhileNotDesiredVal>:
fn stallWhileNotDesiredVal(stallCount: u64, pValue: *u32, desiredValue: u32) u32 {
  20d760:	55                   	push   rbp
  20d761:	48 89 e5             	mov    rbp,rsp
  20d764:	48 83 ec 40          	sub    rsp,0x40
  20d768:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  20d76c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  20d770:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
    var count = stallCount;
  20d773:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20d777:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    var val = @atomicLoad(u32, pValue, AtomicOrder.Acquire);
  20d77b:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20d77f:	8b 16                	mov    edx,DWORD PTR [rsi]
  20d781:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
    while ((val != desiredValue) and (count > 0)) {
  20d784:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  20d787:	3b 45 ec             	cmp    eax,DWORD PTR [rbp-0x14]
  20d78a:	0f 95 c1             	setne  cl
  20d78d:	f6 c1 01             	test   cl,0x1
  20d790:	88 4d db             	mov    BYTE PTR [rbp-0x25],cl
  20d793:	75 02                	jne    20d797 <stallWhileNotDesiredVal+0x37>
  20d795:	eb 0b                	jmp    20d7a2 <stallWhileNotDesiredVal+0x42>
  20d797:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
  20d79c:	0f 97 c0             	seta   al
  20d79f:	88 45 db             	mov    BYTE PTR [rbp-0x25],al
  20d7a2:	8a 45 db             	mov    al,BYTE PTR [rbp-0x25]
  20d7a5:	a8 01                	test   al,0x1
  20d7a7:	75 02                	jne    20d7ab <stallWhileNotDesiredVal+0x4b>
  20d7a9:	eb 1f                	jmp    20d7ca <stallWhileNotDesiredVal+0x6a>
        val = @atomicLoad(u32, pValue, AtomicOrder.Acquire);
  20d7ab:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20d7af:	8b 08                	mov    ecx,DWORD PTR [rax]
  20d7b1:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
        count -= 1;
  20d7b4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20d7b8:	48 83 e8 01          	sub    rax,0x1
  20d7bc:	0f 92 c2             	setb   dl
  20d7bf:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  20d7c3:	88 55 cf             	mov    BYTE PTR [rbp-0x31],dl
  20d7c6:	72 0b                	jb     20d7d3 <stallWhileNotDesiredVal+0x73>
  20d7c8:	eb 19                	jmp    20d7e3 <stallWhileNotDesiredVal+0x83>
    return val;
  20d7ca:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  20d7cd:	48 83 c4 40          	add    rsp,0x40
  20d7d1:	5d                   	pop    rbp
  20d7d2:	c3                   	ret    
  20d7d3:	48 8d 3d ee 59 03 00 	lea    rdi,[rip+0x359ee]        # 2431c8 <__unnamed_4>
  20d7da:	31 c0                	xor    eax,eax
  20d7dc:	89 c6                	mov    esi,eax
        count -= 1;
  20d7de:	e8 1d de ff ff       	call   20b600 <panic>
  20d7e3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20d7e7:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    while ((val != desiredValue) and (count > 0)) {
  20d7eb:	eb 97                	jmp    20d784 <stallWhileNotDesiredVal+0x24>
  20d7ed:	0f 1f 00             	nop    DWORD PTR [rax]

000000000020d7f0 <MainFuncs_linuxThreadMain.21>:
        extern fn linuxThreadMain(ctx_addr: usize) u8 {
  20d7f0:	55                   	push   rbp
  20d7f1:	48 89 e5             	mov    rbp,rsp
  20d7f4:	48 83 ec 10          	sub    rsp,0x10
  20d7f8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
            const arg = if (@sizeOf(Context) == 0) {} else @intToPtr(*const Context, ctx_addr).*;
  20d7fc:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  20d800:	48 8b 3f             	mov    rdi,QWORD PTR [rdi]
  20d803:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
                    startFn(arg);
  20d807:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  20d80b:	e8 b0 fd ff ff       	call   20d5c0 <consumer>
  20d810:	31 c0                	xor    eax,eax
  20d812:	88 c1                	mov    cl,al
                    return 0;
  20d814:	88 c8                	mov    al,cl
  20d816:	48 83 c4 10          	add    rsp,0x10
  20d81a:	5d                   	pop    rbp
  20d81b:	c3                   	ret    
  20d81c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000020d820 <futex_wait.22>:
pub fn futex_wait(uaddr: usize, futex_op: u32, val: i32, timeout: ?*timespec) usize {
  20d820:	55                   	push   rbp
  20d821:	48 89 e5             	mov    rbp,rsp
  20d824:	48 83 ec 30          	sub    rsp,0x30
  20d828:	b8 ca 00 00 00       	mov    eax,0xca
  20d82d:	41 89 c0             	mov    r8d,eax
  20d830:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  20d834:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
  20d837:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
  20d83a:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    return syscall4(SYS_futex, uaddr, futex_op, @bitCast(u32, val), @ptrToInt(timeout));
  20d83e:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20d842:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  20d845:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
  20d848:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20d84c:	89 c0                	mov    eax,eax
  20d84e:	89 c7                	mov    edi,eax
  20d850:	89 d0                	mov    eax,edx
  20d852:	41 89 c1             	mov    r9d,eax
  20d855:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  20d859:	4c 89 c7             	mov    rdi,r8
  20d85c:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  20d860:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  20d864:	4c 89 c9             	mov    rcx,r9
  20d867:	4c 8b 45 d8          	mov    r8,QWORD PTR [rbp-0x28]
  20d86b:	e8 d0 0d 00 00       	call   20e640 <syscall4.29>
  20d870:	48 83 c4 30          	add    rsp,0x30
  20d874:	5d                   	pop    rbp
  20d875:	c3                   	ret    
  20d876:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  20d87d:	00 00 00 

000000000020d880 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.23>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  20d880:	55                   	push   rbp
  20d881:	48 89 e5             	mov    rbp,rsp
  20d884:	48 83 ec 20          	sub    rsp,0x20
  20d888:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  20d88c:	c5 fb 11 45 f0       	vmovsd QWORD PTR [rbp-0x10],xmm0
            return std.fmt.format(self, Error, self.writeFn, format, args);
  20d891:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20d895:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20d899:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  20d89c:	c5 fb 10 45 f0       	vmovsd xmm0,QWORD PTR [rbp-0x10]
  20d8a1:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  20d8a5:	e8 c6 0d 00 00       	call   20e670 <format.30>
  20d8aa:	66 83 f8 00          	cmp    ax,0x0
  20d8ae:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
  20d8b2:	74 0b                	je     20d8bf <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.23+0x3f>
  20d8b4:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  20d8b8:	e8 d3 e3 ff ff       	call   20bc90 <__zig_return_error>
  20d8bd:	eb 02                	jmp    20d8c1 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.23+0x41>
  20d8bf:	eb 00                	jmp    20d8c1 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.23+0x41>
  20d8c1:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
  20d8c5:	48 83 c4 20          	add    rsp,0x20
  20d8c9:	5d                   	pop    rbp
  20d8ca:	c3                   	ret    
  20d8cb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000020d8d0 <raise>:
pub const SIG_ERR = @intToPtr(extern fn (i32) void, @maxValue(usize));
pub const SIG_DFL = @intToPtr(extern fn (i32) void, 0);
pub const SIG_IGN = @intToPtr(extern fn (i32) void, 1);
pub const empty_sigset = []usize{0} ** sigset_t.len;

pub fn raise(sig: i32) usize {
  20d8d0:	55                   	push   rbp
  20d8d1:	48 89 e5             	mov    rbp,rsp
  20d8d4:	48 81 ec b0 00 00 00 	sub    rsp,0xb0
  20d8db:	48 8d 85 78 ff ff ff 	lea    rax,[rbp-0x88]
  20d8e2:	48 8d 0d 17 b3 ff ff 	lea    rcx,[rip+0xffffffffffffb317]        # 208c00 <__unnamed_21>
  20d8e9:	ba 80 00 00 00       	mov    edx,0x80
  20d8ee:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    var set: sigset_t = undefined;
  20d8f1:	48 89 c6             	mov    rsi,rax
  20d8f4:	48 89 f7             	mov    rdi,rsi
  20d8f7:	48 89 ce             	mov    rsi,rcx
  20d8fa:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  20d901:	e8 9a 6f 02 00       	call   2348a0 <memcpy>
    blockAppSignals(&set);
  20d906:	48 8b bd 60 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  20d90d:	e8 8e 0e 00 00       	call   20e7a0 <blockAppSignals>
  20d912:	41 b8 ba 00 00 00    	mov    r8d,0xba
  20d918:	44 89 c7             	mov    edi,r8d
    const tid = @intCast(i32, syscall0(SYS_gettid));
  20d91b:	e8 d0 0e 00 00       	call   20e7f0 <syscall0>
  20d920:	41 89 c0             	mov    r8d,eax
  20d923:	49 63 c8             	movsxd rcx,r8d
  20d926:	48 39 c8             	cmp    rax,rcx
  20d929:	44 89 85 5c ff ff ff 	mov    DWORD PTR [rbp-0xa4],r8d
  20d930:	75 46                	jne    20d978 <raise+0xa8>
  20d932:	b8 c8 00 00 00       	mov    eax,0xc8
  20d937:	89 c7                	mov    edi,eax
  20d939:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
  20d93f:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
    const ret = syscall2(SYS_tkill, @intCast(usize, tid), @intCast(usize, sig));
  20d945:	48 63 b5 74 ff ff ff 	movsxd rsi,DWORD PTR [rbp-0x8c]
  20d94c:	48 63 55 fc          	movsxd rdx,DWORD PTR [rbp-0x4]
  20d950:	e8 ab 0a 00 00       	call   20e400 <syscall2>
  20d955:	48 8d bd 78 ff ff ff 	lea    rdi,[rbp-0x88]
  20d95c:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
    restoreSignals(&set);
  20d963:	e8 98 0e 00 00       	call   20e800 <restoreSignals>
    return ret;
  20d968:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  20d96f:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  20d976:	5d                   	pop    rbp
  20d977:	c3                   	ret    
  20d978:	48 8d 3d 09 5b 03 00 	lea    rdi,[rip+0x35b09]        # 243488 <__unnamed_22>
  20d97f:	31 c0                	xor    eax,eax
  20d981:	89 c6                	mov    esi,eax
    const tid = @intCast(i32, syscall0(SYS_gettid));
  20d983:	e8 78 dc ff ff       	call   20b600 <panic>
  20d988:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  20d98f:	00 

000000000020d990 <getStdErr>:
pub fn getStdErr() GetStdIoErrs!File {
  20d990:	55                   	push   rbp
  20d991:	48 89 e5             	mov    rbp,rsp
  20d994:	48 83 ec 20          	sub    rsp,0x20
  20d998:	48 89 f8             	mov    rax,rdi
  20d99b:	48 8d 4d f8          	lea    rcx,[rbp-0x8]
  20d99f:	be 02 00 00 00       	mov    esi,0x2
    return File.openHandle(handle);
  20d9a4:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  20d9a8:	48 89 cf             	mov    rdi,rcx
  20d9ab:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  20d9af:	e8 5c 00 00 00       	call   20da10 <File_openHandle>
  20d9b4:	66 c7 45 f0 00 00    	mov    WORD PTR [rbp-0x10],0x0
  20d9ba:	8b 75 f8             	mov    esi,DWORD PTR [rbp-0x8]
  20d9bd:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
  20d9c0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20d9c4:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20d9c8:	48 89 01             	mov    QWORD PTR [rcx],rax
  20d9cb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20d9cf:	48 83 c4 20          	add    rsp,0x20
  20d9d3:	5d                   	pop    rbp
  20d9d4:	c3                   	ret    
  20d9d5:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20d9dc:	00 00 00 00 

000000000020d9e0 <FileOutStream_init>:
    pub fn init(file: *File) FileOutStream {
  20d9e0:	55                   	push   rbp
  20d9e1:	48 89 e5             	mov    rbp,rsp
  20d9e4:	48 89 f8             	mov    rax,rdi
  20d9e7:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
            .file = file,
  20d9eb:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
        return FileOutStream{
  20d9ef:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  20d9f3:	48 8b 35 b6 59 03 00 	mov    rsi,QWORD PTR [rip+0x359b6]        # 2433b0 <__unnamed_23>
  20d9fa:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  20d9fe:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20da02:	48 89 37             	mov    QWORD PTR [rdi],rsi
  20da05:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20da09:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  20da0d:	5d                   	pop    rbp
  20da0e:	c3                   	ret    
  20da0f:	90                   	nop

000000000020da10 <File_openHandle>:
        } else {
            @compileError("TODO implement openWriteMode for this OS");
        }
    }

    pub fn openHandle(handle: os.FileHandle) File {
  20da10:	55                   	push   rbp
  20da11:	48 89 e5             	mov    rbp,rsp
  20da14:	48 89 f8             	mov    rax,rdi
  20da17:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
        return File{ .handle = handle };
  20da1a:	8b 75 f4             	mov    esi,DWORD PTR [rbp-0xc]
  20da1d:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
  20da20:	8b 75 f8             	mov    esi,DWORD PTR [rbp-0x8]
  20da23:	89 37                	mov    DWORD PTR [rdi],esi
  20da25:	5d                   	pop    rbp
  20da26:	c3                   	ret    
  20da27:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  20da2e:	00 00 

000000000020da30 <FileOutStream_writeFn>:
    fn writeFn(out_stream: *Stream, bytes: []const u8) !void {
  20da30:	55                   	push   rbp
  20da31:	48 89 e5             	mov    rbp,rsp
  20da34:	48 83 ec 20          	sub    rsp,0x20
  20da38:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
        const self = @fieldParentPtr(FileOutStream, "stream", out_stream);
  20da3c:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20da40:	48 83 ee 08          	sub    rsi,0x8
  20da44:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
        return self.file.write(bytes);
  20da48:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20da4c:	48 8b 36             	mov    rsi,QWORD PTR [rsi]
  20da4f:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  20da53:	e8 f8 0d 00 00       	call   20e850 <File_write>
  20da58:	66 83 f8 00          	cmp    ax,0x0
  20da5c:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
  20da60:	74 0b                	je     20da6d <FileOutStream_writeFn+0x3d>
  20da62:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  20da66:	e8 25 e2 ff ff       	call   20bc90 <__zig_return_error>
  20da6b:	eb 02                	jmp    20da6f <FileOutStream_writeFn+0x3f>
  20da6d:	eb 00                	jmp    20da6f <FileOutStream_writeFn+0x3f>
  20da6f:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
  20da73:	48 83 c4 20          	add    rsp,0x20
  20da77:	5d                   	pop    rbp
  20da78:	c3                   	ret    
  20da79:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

000000000020da80 <format>:
const max_int_digits = 65;

/// Renders fmt string with args, calling output with slices of bytes.
/// If `output` returns an error, the error is returned from `format` and
/// `output` is not called again.
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  20da80:	55                   	push   rbp
  20da81:	48 89 e5             	mov    rbp,rsp
  20da84:	48 83 ec 30          	sub    rsp,0x30
  20da88:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  20da8c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
                '{' => {
                    state = State.Start;
                    start_index = i;
                },
                '}' => {
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  20da90:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  20da94:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  20da98:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  20da9c:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  20daa0:	48 89 ce             	mov    rsi,rcx
  20daa3:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  20daa7:	e8 74 00 00 00       	call   20db20 <formatType>
  20daac:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  20dab0:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  20dab5:	74 1b                	je     20dad2 <format+0x52>
  20dab7:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  20dabb:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  20dabf:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  20dac3:	e8 c8 e1 ff ff       	call   20bc90 <__zig_return_error>
  20dac8:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  20dacc:	48 83 c4 30          	add    rsp,0x30
  20dad0:	5d                   	pop    rbp
  20dad1:	c3                   	ret    
  20dad2:	48 8d 15 e7 58 03 00 	lea    rdx,[rip+0x358e7]        # 2433c0 <__unnamed_24>
        if (state != State.Start) {
            @compileError("Incomplete format string: " ++ fmt);
        }
    }
    if (start_index < fmt.len) {
        try output(context, fmt[start_index..]);
  20dad9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20dadd:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20dae1:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  20dae5:	ff d0                	call   rax
  20dae7:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  20daeb:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  20daf0:	74 1b                	je     20db0d <format+0x8d>
  20daf2:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  20daf6:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  20dafa:	66 89 45 d4          	mov    WORD PTR [rbp-0x2c],ax
  20dafe:	e8 8d e1 ff ff       	call   20bc90 <__zig_return_error>
  20db03:	66 8b 45 d4          	mov    ax,WORD PTR [rbp-0x2c]
  20db07:	48 83 c4 30          	add    rsp,0x30
  20db0b:	5d                   	pop    rbp
  20db0c:	c3                   	ret    
  20db0d:	31 c0                	xor    eax,eax
  20db0f:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  20db12:	66 89 c8             	mov    ax,cx
  20db15:	48 83 c4 30          	add    rsp,0x30
  20db19:	5d                   	pop    rbp
  20db1a:	c3                   	ret    
  20db1b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000020db20 <formatType>:
    }
}

pub fn formatType(
  20db20:	55                   	push   rbp
  20db21:	48 89 e5             	mov    rbp,rsp
  20db24:	48 83 ec 30          	sub    rsp,0x30
  20db28:	48 8d 45 e0          	lea    rax,[rbp-0x20]
  20db2c:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  20db30:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
                    }
                }
                return format(context, Errors, output, "{}@{x}", @typeName(T.Child), @ptrToInt(value));
            },
            builtin.TypeInfo.Pointer.Size.Slice => {
                const casted_value = ([]const u8)(value);
  20db34:	48 8b 0e             	mov    rcx,QWORD PTR [rsi]
  20db37:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  20db3b:	48 8b 4e 08          	mov    rcx,QWORD PTR [rsi+0x8]
  20db3f:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
                return output(context, casted_value);
  20db43:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  20db47:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20db4b:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  20db4f:	48 89 c2             	mov    rdx,rax
  20db52:	ff d1                	call   rcx
  20db54:	66 83 f8 00          	cmp    ax,0x0
  20db58:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  20db5c:	74 0b                	je     20db69 <formatType+0x49>
  20db5e:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  20db62:	e8 29 e1 ff ff       	call   20bc90 <__zig_return_error>
  20db67:	eb 02                	jmp    20db6b <formatType+0x4b>
  20db69:	eb 00                	jmp    20db6b <formatType+0x4b>
  20db6b:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  20db6f:	48 83 c4 30          	add    rsp,0x30
  20db73:	5d                   	pop    rbp
  20db74:	c3                   	ret    
  20db75:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20db7c:	00 00 00 00 

000000000020db80 <getSelfDebugInfo>:
pub fn getSelfDebugInfo() !*ElfStackTrace {
  20db80:	55                   	push   rbp
  20db81:	48 89 e5             	mov    rbp,rsp
  20db84:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  20db8b:	48 89 f8             	mov    rax,rdi
    if (self_debug_info) |info| {
  20db8e:	48 83 3d aa 64 03 00 	cmp    QWORD PTR [rip+0x364aa],0x0        # 244040 <self_debug_info>
  20db95:	00 
  20db96:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  20db9a:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
  20db9e:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
  20dba2:	74 39                	je     20dbdd <getSelfDebugInfo+0x5d>
  20dba4:	48 8b 05 95 64 03 00 	mov    rax,QWORD PTR [rip+0x36495]        # 244040 <self_debug_info>
  20dbab:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
        return info;
  20dbaf:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  20dbb3:	66 c7 45 f0 00 00    	mov    WORD PTR [rbp-0x10],0x0
  20dbb9:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  20dbbd:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20dbc1:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  20dbc5:	48 89 01             	mov    QWORD PTR [rcx],rax
  20dbc8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20dbcc:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20dbd0:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  20dbd4:	48 81 c4 80 00 00 00 	add    rsp,0x80
  20dbdb:	5d                   	pop    rbp
  20dbdc:	c3                   	ret    
        const info = try openSelfDebugInfo(getDebugInfoAllocator());
  20dbdd:	e8 ee 00 00 00       	call   20dcd0 <getDebugInfoAllocator>
  20dbe2:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
  20dbe6:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  20dbea:	48 89 c2             	mov    rdx,rax
  20dbed:	e8 7e 0f 00 00       	call   20eb70 <openSelfDebugInfo>
  20dbf2:	66 83 7d e0 00       	cmp    WORD PTR [rbp-0x20],0x0
  20dbf7:	74 39                	je     20dc32 <getSelfDebugInfo+0xb2>
  20dbf9:	66 8b 45 e0          	mov    ax,WORD PTR [rbp-0x20]
  20dbfd:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  20dc01:	66 89 45 86          	mov    WORD PTR [rbp-0x7a],ax
  20dc05:	e8 86 e0 ff ff       	call   20bc90 <__zig_return_error>
  20dc0a:	66 8b 45 86          	mov    ax,WORD PTR [rbp-0x7a]
  20dc0e:	66 89 45 c0          	mov    WORD PTR [rbp-0x40],ax
  20dc12:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  20dc16:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  20dc1a:	48 89 39             	mov    QWORD PTR [rcx],rdi
  20dc1d:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20dc21:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  20dc25:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  20dc29:	48 81 c4 80 00 00 00 	add    rsp,0x80
  20dc30:	5d                   	pop    rbp
  20dc31:	c3                   	ret    
  20dc32:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20dc36:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        self_debug_info = info;
  20dc3a:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  20dc3e:	48 89 05 fb 63 03 00 	mov    QWORD PTR [rip+0x363fb],rax        # 244040 <self_debug_info>
        return info;
  20dc45:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  20dc49:	66 c7 45 b0 00 00    	mov    WORD PTR [rbp-0x50],0x0
  20dc4f:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  20dc53:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20dc57:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  20dc5b:	48 89 01             	mov    QWORD PTR [rcx],rax
  20dc5e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  20dc62:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20dc66:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  20dc6a:	48 81 c4 80 00 00 00 	add    rsp,0x80
  20dc71:	5d                   	pop    rbp
  20dc72:	c3                   	ret    
  20dc73:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20dc7a:	84 00 00 00 00 00 

000000000020dc80 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.24>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  20dc80:	55                   	push   rbp
  20dc81:	48 89 e5             	mov    rbp,rsp
  20dc84:	48 83 ec 20          	sub    rsp,0x20
  20dc88:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
            return std.fmt.format(self, Error, self.writeFn, format, args);
  20dc8c:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20dc90:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20dc94:	48 8b 00             	mov    rax,QWORD PTR [rax]
  20dc97:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  20dc9b:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  20dc9f:	48 89 c2             	mov    rdx,rax
  20dca2:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20dca6:	e8 15 ee 00 00       	call   21cac0 <format.57>
  20dcab:	66 83 f8 00          	cmp    ax,0x0
  20dcaf:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
  20dcb3:	74 0b                	je     20dcc0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.24+0x40>
  20dcb5:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  20dcb9:	e8 d2 df ff ff       	call   20bc90 <__zig_return_error>
  20dcbe:	eb 02                	jmp    20dcc2 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.24+0x42>
  20dcc0:	eb 00                	jmp    20dcc2 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.24+0x42>
  20dcc2:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
  20dcc6:	48 83 c4 20          	add    rsp,0x20
  20dcca:	5d                   	pop    rbp
  20dccb:	c3                   	ret    
  20dccc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000020dcd0 <getDebugInfoAllocator>:

// TODO make thread safe
var debug_info_allocator: ?*mem.Allocator = null;
var debug_info_direct_allocator: std.heap.DirectAllocator = undefined;
var debug_info_arena_allocator: std.heap.ArenaAllocator = undefined;
fn getDebugInfoAllocator() *mem.Allocator {
  20dcd0:	55                   	push   rbp
  20dcd1:	48 89 e5             	mov    rbp,rsp
    if (debug_info_allocator) |a| return a;
  20dcd4:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  20dcdb:	48 83 3d 65 63 03 00 	cmp    QWORD PTR [rip+0x36365],0x0        # 244048 <debug_info_allocator>
  20dce2:	00 
  20dce3:	74 18                	je     20dcfd <getDebugInfoAllocator+0x2d>
  20dce5:	48 8b 05 5c 63 03 00 	mov    rax,QWORD PTR [rip+0x3635c]        # 244048 <debug_info_allocator>
  20dcec:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  20dcf0:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  20dcf4:	48 81 c4 80 00 00 00 	add    rsp,0x80
  20dcfb:	5d                   	pop    rbp
  20dcfc:	c3                   	ret    
  20dcfd:	eb 00                	jmp    20dcff <getDebugInfoAllocator+0x2f>
  20dcff:	48 8d 7d e0          	lea    rdi,[rbp-0x20]

    debug_info_direct_allocator = std.heap.DirectAllocator.init();
  20dd03:	e8 f8 50 00 00       	call   212e00 <DirectAllocator_init>
  20dd08:	48 8d 7d a0          	lea    rdi,[rbp-0x60]
  20dd0c:	48 8d 35 2d e3 02 00 	lea    rsi,[rip+0x2e32d]        # 23c040 <debug_info_direct_allocator>
  20dd13:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20dd17:	48 89 05 22 e3 02 00 	mov    QWORD PTR [rip+0x2e322],rax        # 23c040 <debug_info_direct_allocator>
  20dd1e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20dd22:	48 89 05 1f e3 02 00 	mov    QWORD PTR [rip+0x2e31f],rax        # 23c048 <debug_info_direct_allocator+0x8>
  20dd29:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20dd2d:	48 89 05 1c e3 02 00 	mov    QWORD PTR [rip+0x2e31c],rax        # 23c050 <debug_info_direct_allocator+0x10>
  20dd34:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20dd38:	48 89 05 19 e3 02 00 	mov    QWORD PTR [rip+0x2e319],rax        # 23c058 <debug_info_direct_allocator+0x18>
    debug_info_arena_allocator = std.heap.ArenaAllocator.init(&debug_info_direct_allocator.allocator);
  20dd3f:	e8 fc 50 00 00       	call   212e40 <ArenaAllocator_init>
  20dd44:	48 8d 05 15 e3 02 00 	lea    rax,[rip+0x2e315]        # 23c060 <debug_info_arena_allocator>
  20dd4b:	48 89 c6             	mov    rsi,rax
  20dd4e:	b9 40 00 00 00       	mov    ecx,0x40
  20dd53:	89 ca                	mov    edx,ecx
  20dd55:	48 8d 7d a0          	lea    rdi,[rbp-0x60]
  20dd59:	48 89 7d 90          	mov    QWORD PTR [rbp-0x70],rdi
  20dd5d:	48 89 f7             	mov    rdi,rsi
  20dd60:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  20dd64:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  20dd68:	e8 33 6b 02 00       	call   2348a0 <memcpy>
    debug_info_allocator = &debug_info_arena_allocator.allocator;
  20dd6d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  20dd71:	48 89 05 d0 62 03 00 	mov    QWORD PTR [rip+0x362d0],rax        # 244048 <debug_info_allocator>
    return &debug_info_arena_allocator.allocator;
  20dd78:	48 81 c4 80 00 00 00 	add    rsp,0x80
  20dd7f:	5d                   	pop    rbp
  20dd80:	c3                   	ret    
  20dd81:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20dd88:	0f 1f 84 00 00 00 00 
  20dd8f:	00 

000000000020dd90 <wantTtyColor>:
fn wantTtyColor() bool {
  20dd90:	55                   	push   rbp
  20dd91:	48 89 e5             	mov    rbp,rsp
  20dd94:	48 81 ec 50 02 00 00 	sub    rsp,0x250
  20dd9b:	b0 01                	mov    al,0x1
  20dd9d:	48 8d 35 8e b3 ff ff 	lea    rsi,[rip+0xffffffffffffb38e]        # 209132 <__unnamed_25>
  20dda4:	b9 80 00 00 00       	mov    ecx,0x80
  20dda9:	89 ca                	mov    edx,ecx
  20ddab:	48 8d bd d8 fd ff ff 	lea    rdi,[rbp-0x228]
  20ddb2:	4c 8d 85 10 ff ff ff 	lea    r8,[rbp-0xf0]
  20ddb9:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  20ddc0:	00 00 00 00 
  20ddc4:	4c 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],r8
  20ddcb:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  20ddd2:	1e 00 00 00 
    var bytes: [128]u8 = undefined;
  20ddd6:	88 85 bd fd ff ff    	mov    BYTE PTR [rbp-0x243],al
  20dddc:	e8 bf 6a 02 00       	call   2348a0 <memcpy>
    const allocator = &std.heap.FixedBufferAllocator.init(bytes[0..]).allocator;
  20dde1:	8a 85 bd fd ff ff    	mov    al,BYTE PTR [rbp-0x243]
  20dde7:	a8 01                	test   al,0x1
  20dde9:	75 67                	jne    20de52 <wantTtyColor+0xc2>
  20ddeb:	eb 55                	jmp    20de42 <wantTtyColor+0xb2>
  20dded:	b0 01                	mov    al,0x1
    return if (std.os.getEnvVarOwned(allocator, "ZIG_DEBUG_COLOR")) |_| true else |_| stderr_file.isTty();
  20ddef:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  20ddf6:	48 89 8d c0 fd ff ff 	mov    QWORD PTR [rbp-0x240],rcx
  20ddfd:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
  20de04:	48 89 8d c8 fd ff ff 	mov    QWORD PTR [rbp-0x238],rcx
  20de0b:	88 85 bc fd ff ff    	mov    BYTE PTR [rbp-0x244],al
  20de11:	eb 20                	jmp    20de33 <wantTtyColor+0xa3>
  20de13:	48 8d 3d 06 e2 02 00 	lea    rdi,[rip+0x2e206]        # 23c020 <stderr_file>
  20de1a:	66 8b 85 70 fe ff ff 	mov    ax,WORD PTR [rbp-0x190]
  20de21:	66 89 85 be fd ff ff 	mov    WORD PTR [rbp-0x242],ax
  20de28:	e8 b3 ee 00 00       	call   21cce0 <File_isTty>
  20de2d:	88 85 bc fd ff ff    	mov    BYTE PTR [rbp-0x244],al
  20de33:	8a 85 bc fd ff ff    	mov    al,BYTE PTR [rbp-0x244]
  20de39:	48 81 c4 50 02 00 00 	add    rsp,0x250
  20de40:	5d                   	pop    rbp
  20de41:	c3                   	ret    
  20de42:	48 8d 3d 8f 55 03 00 	lea    rdi,[rip+0x3558f]        # 2433d8 <__unnamed_20>
  20de49:	31 c0                	xor    eax,eax
  20de4b:	89 c6                	mov    esi,eax
    const allocator = &std.heap.FixedBufferAllocator.init(bytes[0..]).allocator;
  20de4d:	e8 ae d7 ff ff       	call   20b600 <panic>
  20de52:	48 8d bd b8 fe ff ff 	lea    rdi,[rbp-0x148]
  20de59:	48 8d b5 e8 fe ff ff 	lea    rsi,[rbp-0x118]
  20de60:	48 8d 85 d8 fd ff ff 	lea    rax,[rbp-0x228]
  20de67:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  20de6e:	48 c7 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],0x80
  20de75:	80 00 00 00 
  20de79:	e8 d2 50 00 00       	call   212f50 <FixedBufferAllocator_init>
  20de7e:	48 8d bd 70 fe ff ff 	lea    rdi,[rbp-0x190]
  20de85:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  20de8c:	48 8d 0d 95 57 03 00 	lea    rcx,[rip+0x35795]        # 243628 <__unnamed_26>
  20de93:	48 8d 85 b8 fe ff ff 	lea    rax,[rbp-0x148]
  20de9a:	48 89 85 d0 fd ff ff 	mov    QWORD PTR [rbp-0x230],rax
    return if (std.os.getEnvVarOwned(allocator, "ZIG_DEBUG_COLOR")) |_| true else |_| stderr_file.isTty();
  20dea1:	48 8b 95 d0 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x230]
  20dea8:	e8 53 ed 00 00       	call   21cc00 <getEnvVarOwned>
  20dead:	66 83 bd 70 fe ff ff 	cmp    WORD PTR [rbp-0x190],0x0
  20deb4:	00 
  20deb5:	0f 85 58 ff ff ff    	jne    20de13 <wantTtyColor+0x83>
  20debb:	e9 2d ff ff ff       	jmp    20dded <wantTtyColor+0x5d>

000000000020dec0 <writeStackTrace>:
pub fn writeStackTrace(stack_trace: *const builtin.StackTrace, out_stream: var, allocator: *mem.Allocator, debug_info: *ElfStackTrace, tty_color: bool) !void {
  20dec0:	55                   	push   rbp
  20dec1:	48 89 e5             	mov    rbp,rsp
  20dec4:	41 56                	push   r14
  20dec6:	53                   	push   rbx
  20dec7:	48 81 ec c0 00 00 00 	sub    rsp,0xc0
  20dece:	44 88 c8             	mov    al,r9b
  20ded1:	41 b9 aa 00 00 00    	mov    r9d,0xaa
  20ded7:	41 ba 08 00 00 00    	mov    r10d,0x8
  20dedd:	45 89 d3             	mov    r11d,r10d
  20dee0:	48 8d 5d b0          	lea    rbx,[rbp-0x50]
  20dee4:	4c 8d 75 b8          	lea    r14,[rbp-0x48]
  20dee8:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  20deec:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  20def0:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  20def4:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
  20def8:	24 01                	and    al,0x1
  20defa:	88 45 c7             	mov    BYTE PTR [rbp-0x39],al
    var frame_index: usize = undefined;
  20defd:	48 89 7d a0          	mov    QWORD PTR [rbp-0x60],rdi
  20df01:	4c 89 f7             	mov    rdi,r14
  20df04:	44 89 ce             	mov    esi,r9d
  20df07:	4c 89 da             	mov    rdx,r11
  20df0a:	48 89 5d 98          	mov    QWORD PTR [rbp-0x68],rbx
  20df0e:	4c 89 5d 90          	mov    QWORD PTR [rbp-0x70],r11
  20df12:	44 89 4d 8c          	mov    DWORD PTR [rbp-0x74],r9d
  20df16:	e8 35 69 02 00       	call   234850 <memset>
    var frames_left: usize = undefined;
  20df1b:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  20df1f:	48 89 cf             	mov    rdi,rcx
  20df22:	8b 75 8c             	mov    esi,DWORD PTR [rbp-0x74]
  20df25:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
  20df29:	e8 22 69 02 00       	call   234850 <memset>
    if (stack_trace.index < stack_trace.instruction_addresses.len) {
  20df2e:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  20df32:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  20df35:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  20df39:	48 3b 4a 10          	cmp    rcx,QWORD PTR [rdx+0x10]
  20df3d:	73 15                	jae    20df54 <writeStackTrace+0x94>
        frame_index = 0;
  20df3f:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
  20df46:	00 
        frames_left = stack_trace.index;
  20df47:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20df4b:	48 8b 00             	mov    rax,QWORD PTR [rax]
  20df4e:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
    if (stack_trace.index < stack_trace.instruction_addresses.len) {
  20df52:	eb 23                	jmp    20df77 <writeStackTrace+0xb7>
        frame_index = (stack_trace.index + 1) % stack_trace.instruction_addresses.len;
  20df54:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20df58:	48 8b 00             	mov    rax,QWORD PTR [rax]
  20df5b:	48 83 c0 01          	add    rax,0x1
  20df5f:	0f 92 c1             	setb   cl
  20df62:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  20df66:	88 8d 7f ff ff ff    	mov    BYTE PTR [rbp-0x81],cl
  20df6c:	0f 82 98 00 00 00    	jb     20e00a <writeStackTrace+0x14a>
  20df72:	e9 a3 00 00 00       	jmp    20e01a <writeStackTrace+0x15a>
    while (frames_left != 0) : ({
  20df77:	eb 00                	jmp    20df79 <writeStackTrace+0xb9>
  20df79:	48 83 7d b0 00       	cmp    QWORD PTR [rbp-0x50],0x0
  20df7e:	74 76                	je     20dff6 <writeStackTrace+0x136>
        const return_address = stack_trace.instruction_addresses[frame_index];
  20df80:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20df84:	48 89 c1             	mov    rcx,rax
  20df87:	48 83 c1 08          	add    rcx,0x8
  20df8b:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  20df8f:	48 3b 50 10          	cmp    rdx,QWORD PTR [rax+0x10]
  20df93:	48 89 95 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdx
  20df9a:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
  20dfa1:	0f 82 cf 00 00 00    	jb     20e076 <writeStackTrace+0x1b6>
  20dfa7:	e9 ba 00 00 00       	jmp    20e066 <writeStackTrace+0x1a6>
        try printSourceAtAddress(debug_info, out_stream, return_address, tty_color);
  20dfac:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  20dfb0:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  20dfb4:	66 89 85 66 ff ff ff 	mov    WORD PTR [rbp-0x9a],ax
  20dfbb:	e8 d0 dc ff ff       	call   20bc90 <__zig_return_error>
  20dfc0:	66 8b 85 66 ff ff ff 	mov    ax,WORD PTR [rbp-0x9a]
  20dfc7:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  20dfce:	5b                   	pop    rbx
  20dfcf:	41 5e                	pop    r14
  20dfd1:	5d                   	pop    rbp
  20dfd2:	c3                   	ret    
        frames_left -= 1;
  20dfd3:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20dfd7:	48 83 e8 01          	sub    rax,0x1
  20dfdb:	0f 92 c1             	setb   cl
  20dfde:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  20dfe5:	88 8d 57 ff ff ff    	mov    BYTE PTR [rbp-0xa9],cl
  20dfeb:	0f 82 cf 00 00 00    	jb     20e0c0 <writeStackTrace+0x200>
  20dff1:	e9 da 00 00 00       	jmp    20e0d0 <writeStackTrace+0x210>
  20dff6:	31 c0                	xor    eax,eax
  20dff8:	66 89 c1             	mov    cx,ax
pub fn writeStackTrace(stack_trace: *const builtin.StackTrace, out_stream: var, allocator: *mem.Allocator, debug_info: *ElfStackTrace, tty_color: bool) !void {
  20dffb:	66 89 c8             	mov    ax,cx
  20dffe:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  20e005:	5b                   	pop    rbx
  20e006:	41 5e                	pop    r14
  20e008:	5d                   	pop    rbp
  20e009:	c3                   	ret    
  20e00a:	48 8d 3d b7 51 03 00 	lea    rdi,[rip+0x351b7]        # 2431c8 <__unnamed_4>
  20e011:	31 c0                	xor    eax,eax
  20e013:	89 c6                	mov    esi,eax
        frame_index = (stack_trace.index + 1) % stack_trace.instruction_addresses.len;
  20e015:	e8 e6 d5 ff ff       	call   20b600 <panic>
  20e01a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20e01e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  20e022:	48 83 f8 00          	cmp    rax,0x0
  20e026:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  20e02d:	74 27                	je     20e056 <writeStackTrace+0x196>
  20e02f:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  20e033:	31 c9                	xor    ecx,ecx
  20e035:	89 ca                	mov    edx,ecx
  20e037:	48 8b b5 48 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xb8]
  20e03e:	48 f7 f6             	div    rsi
  20e041:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
        frames_left = stack_trace.instruction_addresses.len;
  20e045:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  20e049:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  20e04d:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
    if (stack_trace.index < stack_trace.instruction_addresses.len) {
  20e051:	e9 21 ff ff ff       	jmp    20df77 <writeStackTrace+0xb7>
  20e056:	48 8d 3d 8b 52 03 00 	lea    rdi,[rip+0x3528b]        # 2432e8 <__unnamed_15>
  20e05d:	31 c0                	xor    eax,eax
  20e05f:	89 c6                	mov    esi,eax
        frame_index = (stack_trace.index + 1) % stack_trace.instruction_addresses.len;
  20e061:	e8 9a d5 ff ff       	call   20b600 <panic>
  20e066:	48 8d 3d 6b 53 03 00 	lea    rdi,[rip+0x3536b]        # 2433d8 <__unnamed_20>
  20e06d:	31 c0                	xor    eax,eax
  20e06f:	89 c6                	mov    esi,eax
        const return_address = stack_trace.instruction_addresses[frame_index];
  20e071:	e8 8a d5 ff ff       	call   20b600 <panic>
  20e076:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  20e07d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  20e080:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  20e087:	48 8b 0c d1          	mov    rcx,QWORD PTR [rcx+rdx*8]
  20e08b:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
        try printSourceAtAddress(debug_info, out_stream, return_address, tty_color);
  20e08f:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  20e093:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  20e097:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  20e09b:	40 8a 7d c7          	mov    dil,BYTE PTR [rbp-0x39]
  20e09f:	44 0f b6 c7          	movzx  r8d,dil
  20e0a3:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  20e0a7:	e8 64 ec 00 00       	call   21cd10 <printSourceAtAddress>
  20e0ac:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  20e0b0:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  20e0b5:	0f 85 f1 fe ff ff    	jne    20dfac <writeStackTrace+0xec>
  20e0bb:	e9 13 ff ff ff       	jmp    20dfd3 <writeStackTrace+0x113>
  20e0c0:	48 8d 3d 01 51 03 00 	lea    rdi,[rip+0x35101]        # 2431c8 <__unnamed_4>
  20e0c7:	31 c0                	xor    eax,eax
  20e0c9:	89 c6                	mov    esi,eax
        frames_left -= 1;
  20e0cb:	e8 30 d5 ff ff       	call   20b600 <panic>
  20e0d0:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
  20e0d7:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
        frame_index = (frame_index + 1) % stack_trace.instruction_addresses.len;
  20e0db:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  20e0df:	48 83 c1 01          	add    rcx,0x1
  20e0e3:	0f 92 c2             	setb   dl
  20e0e6:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
  20e0ed:	88 95 3f ff ff ff    	mov    BYTE PTR [rbp-0xc1],dl
  20e0f3:	72 02                	jb     20e0f7 <writeStackTrace+0x237>
  20e0f5:	eb 10                	jmp    20e107 <writeStackTrace+0x247>
  20e0f7:	48 8d 3d ca 50 03 00 	lea    rdi,[rip+0x350ca]        # 2431c8 <__unnamed_4>
  20e0fe:	31 c0                	xor    eax,eax
  20e100:	89 c6                	mov    esi,eax
  20e102:	e8 f9 d4 ff ff       	call   20b600 <panic>
  20e107:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20e10b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  20e10f:	48 83 f8 00          	cmp    rax,0x0
  20e113:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  20e11a:	74 1e                	je     20e13a <writeStackTrace+0x27a>
  20e11c:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  20e123:	31 c9                	xor    ecx,ecx
  20e125:	89 ca                	mov    edx,ecx
  20e127:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  20e12e:	48 f7 f6             	div    rsi
  20e131:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
    while (frames_left != 0) : ({
  20e135:	e9 3f fe ff ff       	jmp    20df79 <writeStackTrace+0xb9>
  20e13a:	48 8d 3d a7 51 03 00 	lea    rdi,[rip+0x351a7]        # 2432e8 <__unnamed_15>
  20e141:	31 c0                	xor    eax,eax
  20e143:	89 c6                	mov    esi,eax
        frame_index = (frame_index + 1) % stack_trace.instruction_addresses.len;
  20e145:	e8 b6 d4 ff ff       	call   20b600 <panic>
  20e14a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000020e150 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.25>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  20e150:	55                   	push   rbp
  20e151:	48 89 e5             	mov    rbp,rsp
  20e154:	48 83 ec 20          	sub    rsp,0x20
  20e158:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
            return std.fmt.format(self, Error, self.writeFn, format, args);
  20e15c:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20e160:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  20e164:	48 8b 00             	mov    rax,QWORD PTR [rax]
  20e167:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  20e16b:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  20e16f:	48 89 c2             	mov    rdx,rax
  20e172:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20e176:	e8 65 75 01 00       	call   2256e0 <format.94>
  20e17b:	66 83 f8 00          	cmp    ax,0x0
  20e17f:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
  20e183:	74 0b                	je     20e190 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.25+0x40>
  20e185:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  20e189:	e8 02 db ff ff       	call   20bc90 <__zig_return_error>
  20e18e:	eb 02                	jmp    20e192 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.25+0x42>
  20e190:	eb 00                	jmp    20e192 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.25+0x42>
  20e192:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
  20e196:	48 83 c4 20          	add    rsp,0x20
  20e19a:	5d                   	pop    rbp
  20e19b:	c3                   	ret    
  20e19c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000020e1a0 <writeCurrentStackTrace>:
pub fn writeCurrentStackTrace(out_stream: var, allocator: *mem.Allocator, debug_info: *ElfStackTrace, tty_color: bool, start_addr: ?usize) !void {
  20e1a0:	55                   	push   rbp
  20e1a1:	48 89 e5             	mov    rbp,rsp
  20e1a4:	53                   	push   rbx
  20e1a5:	48 81 ec 88 00 00 00 	sub    rsp,0x88
  20e1ac:	44 88 c0             	mov    al,r8b
  20e1af:	41 b8 aa 00 00 00    	mov    r8d,0xaa
  20e1b5:	41 ba 10 00 00 00    	mov    r10d,0x10
  20e1bb:	45 89 d3             	mov    r11d,r10d
  20e1be:	48 8d 5d b0          	lea    rbx,[rbp-0x50]
  20e1c2:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  20e1c6:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  20e1ca:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  20e1ce:	24 01                	and    al,0x1
  20e1d0:	88 45 c7             	mov    BYTE PTR [rbp-0x39],al
    var addr_state: AddressState = undefined;
  20e1d3:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
  20e1d7:	48 89 df             	mov    rdi,rbx
  20e1da:	44 89 c6             	mov    esi,r8d
  20e1dd:	4c 89 da             	mov    rdx,r11
  20e1e0:	4c 89 4d 80          	mov    QWORD PTR [rbp-0x80],r9
  20e1e4:	e8 67 66 02 00       	call   234850 <memset>
    if (start_addr) |addr| {
  20e1e9:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  20e1ed:	f6 41 08 01          	test   BYTE PTR [rcx+0x8],0x1
  20e1f1:	75 02                	jne    20e1f5 <writeCurrentStackTrace+0x55>
  20e1f3:	eb 29                	jmp    20e21e <writeCurrentStackTrace+0x7e>
  20e1f5:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  20e1f9:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  20e1fc:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
        addr_state = AddressState{ .LookingForStartAddress = addr };
  20e200:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  20e204:	c6 45 f0 01          	mov    BYTE PTR [rbp-0x10],0x1
  20e208:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  20e20c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20e210:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
  20e214:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  20e218:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
    if (start_addr) |addr| {
  20e21c:	eb 16                	jmp    20e234 <writeCurrentStackTrace+0x94>
        addr_state = AddressState.NotLookingForStartAddress;
  20e21e:	48 8b 05 8b 20 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff208b]        # 2002b0 <__unnamed_100>
  20e225:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  20e229:	48 8b 05 88 20 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff2088]        # 2002b8 <__unnamed_100+0x8>
  20e230:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
    var fp = @ptrToInt(@frameAddress());
  20e234:	48 89 e8             	mov    rax,rbp
  20e237:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
    while (fp != 0) : (fp = @intToPtr(*const usize, fp).*) {
  20e23b:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
  20e240:	0f 84 bf 00 00 00    	je     20e305 <writeCurrentStackTrace+0x165>
        const return_address = @intToPtr(*const usize, fp + @sizeOf(usize)).*;
  20e246:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  20e24a:	48 83 c0 08          	add    rax,0x8
  20e24e:	0f 92 c1             	setb   cl
  20e251:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  20e258:	88 8d 77 ff ff ff    	mov    BYTE PTR [rbp-0x89],cl
  20e25e:	0f 82 b3 00 00 00    	jb     20e317 <writeCurrentStackTrace+0x177>
  20e264:	e9 be 00 00 00       	jmp    20e327 <writeCurrentStackTrace+0x187>
        switch (addr_state) {
  20e269:	eb 3e                	jmp    20e2a9 <writeCurrentStackTrace+0x109>
            AddressState.LookingForStartAddress => |addr| {
  20e26b:	8a 45 b8             	mov    al,BYTE PTR [rbp-0x48]
  20e26e:	f6 d0                	not    al
  20e270:	a8 01                	test   al,0x1
  20e272:	0f 84 e3 00 00 00    	je     20e35b <writeCurrentStackTrace+0x1bb>
  20e278:	e9 f9 00 00 00       	jmp    20e376 <writeCurrentStackTrace+0x1d6>
                    addr_state = AddressState.NotLookingForStartAddress;
  20e27d:	48 8b 05 2c 20 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff202c]        # 2002b0 <__unnamed_100>
  20e284:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  20e288:	48 8b 05 29 20 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff2029]        # 2002b8 <__unnamed_100+0x8>
  20e28f:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                if (return_address == addr) {
  20e293:	eb 02                	jmp    20e297 <writeCurrentStackTrace+0xf7>
                    continue;
  20e295:	eb 5e                	jmp    20e2f5 <writeCurrentStackTrace+0x155>
        switch (addr_state) {
  20e297:	eb 10                	jmp    20e2a9 <writeCurrentStackTrace+0x109>
  20e299:	48 8d 3d 60 50 03 00 	lea    rdi,[rip+0x35060]        # 243300 <__unnamed_13>
  20e2a0:	31 c0                	xor    eax,eax
  20e2a2:	89 c6                	mov    esi,eax
  20e2a4:	e8 57 d3 ff ff       	call   20b600 <panic>
        try printSourceAtAddress(debug_info, out_stream, return_address, tty_color);
  20e2a9:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  20e2ad:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  20e2b1:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  20e2b5:	8a 45 c7             	mov    al,BYTE PTR [rbp-0x39]
  20e2b8:	44 0f b6 c0          	movzx  r8d,al
  20e2bc:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  20e2c0:	e8 4b ea 00 00       	call   21cd10 <printSourceAtAddress>
  20e2c5:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
  20e2c9:	66 83 7d e6 00       	cmp    WORD PTR [rbp-0x1a],0x0
  20e2ce:	74 25                	je     20e2f5 <writeCurrentStackTrace+0x155>
  20e2d0:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
  20e2d4:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  20e2d8:	66 89 85 74 ff ff ff 	mov    WORD PTR [rbp-0x8c],ax
  20e2df:	e8 ac d9 ff ff       	call   20bc90 <__zig_return_error>
  20e2e4:	66 8b 85 74 ff ff ff 	mov    ax,WORD PTR [rbp-0x8c]
  20e2eb:	48 81 c4 88 00 00 00 	add    rsp,0x88
  20e2f2:	5b                   	pop    rbx
  20e2f3:	5d                   	pop    rbp
  20e2f4:	c3                   	ret    
    while (fp != 0) : (fp = @intToPtr(*const usize, fp).*) {
  20e2f5:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  20e2f9:	48 8b 00             	mov    rax,QWORD PTR [rax]
  20e2fc:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  20e300:	e9 36 ff ff ff       	jmp    20e23b <writeCurrentStackTrace+0x9b>
  20e305:	31 c0                	xor    eax,eax
  20e307:	66 89 c1             	mov    cx,ax
pub fn writeCurrentStackTrace(out_stream: var, allocator: *mem.Allocator, debug_info: *ElfStackTrace, tty_color: bool, start_addr: ?usize) !void {
  20e30a:	66 89 c8             	mov    ax,cx
  20e30d:	48 81 c4 88 00 00 00 	add    rsp,0x88
  20e314:	5b                   	pop    rbx
  20e315:	5d                   	pop    rbp
  20e316:	c3                   	ret    
  20e317:	48 8d 3d aa 4e 03 00 	lea    rdi,[rip+0x34eaa]        # 2431c8 <__unnamed_4>
  20e31e:	31 c0                	xor    eax,eax
  20e320:	89 c6                	mov    esi,eax
        const return_address = @intToPtr(*const usize, fp + @sizeOf(usize)).*;
  20e322:	e8 d9 d2 ff ff       	call   20b600 <panic>
  20e327:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  20e32e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  20e331:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
        switch (addr_state) {
  20e335:	8a 55 b8             	mov    dl,BYTE PTR [rbp-0x48]
  20e338:	84 d2                	test   dl,dl
  20e33a:	88 95 73 ff ff ff    	mov    BYTE PTR [rbp-0x8d],dl
  20e340:	0f 85 25 ff ff ff    	jne    20e26b <writeCurrentStackTrace+0xcb>
  20e346:	eb 00                	jmp    20e348 <writeCurrentStackTrace+0x1a8>
  20e348:	8a 85 73 ff ff ff    	mov    al,BYTE PTR [rbp-0x8d]
  20e34e:	a8 01                	test   al,0x1
  20e350:	0f 84 13 ff ff ff    	je     20e269 <writeCurrentStackTrace+0xc9>
  20e356:	e9 3e ff ff ff       	jmp    20e299 <writeCurrentStackTrace+0xf9>
            AddressState.LookingForStartAddress => |addr| {
  20e35b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20e35f:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
                if (return_address == addr) {
  20e363:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  20e367:	48 3b 45 90          	cmp    rax,QWORD PTR [rbp-0x70]
  20e36b:	0f 84 0c ff ff ff    	je     20e27d <writeCurrentStackTrace+0xdd>
  20e371:	e9 1f ff ff ff       	jmp    20e295 <writeCurrentStackTrace+0xf5>
  20e376:	48 8d 3d 63 52 03 00 	lea    rdi,[rip+0x35263]        # 2435e0 <__unnamed_29>
  20e37d:	31 c0                	xor    eax,eax
  20e37f:	89 c6                	mov    esi,eax
            AddressState.LookingForStartAddress => |addr| {
  20e381:	e8 7a d2 ff ff       	call   20b600 <panic>
  20e386:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  20e38d:	00 00 00 

000000000020e390 <format.26>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  20e390:	55                   	push   rbp
  20e391:	48 89 e5             	mov    rbp,rsp
  20e394:	48 83 ec 30          	sub    rsp,0x30
  20e398:	48 8d 05 51 50 03 00 	lea    rax,[rip+0x35051]        # 2433f0 <__unnamed_30>
  20e39f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  20e3a3:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
        try output(context, fmt[start_index..]);
  20e3a7:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  20e3ab:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20e3af:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  20e3b3:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  20e3b7:	48 89 c2             	mov    rdx,rax
  20e3ba:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  20e3be:	ff d0                	call   rax
  20e3c0:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  20e3c4:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  20e3c9:	74 1b                	je     20e3e6 <format.26+0x56>
  20e3cb:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  20e3cf:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  20e3d3:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  20e3d7:	e8 b4 d8 ff ff       	call   20bc90 <__zig_return_error>
  20e3dc:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  20e3e0:	48 83 c4 30          	add    rsp,0x30
  20e3e4:	5d                   	pop    rbp
  20e3e5:	c3                   	ret    
  20e3e6:	31 c0                	xor    eax,eax
  20e3e8:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  20e3eb:	66 89 c8             	mov    ax,cx
  20e3ee:	48 83 c4 30          	add    rsp,0x30
  20e3f2:	5d                   	pop    rbp
  20e3f3:	c3                   	ret    
  20e3f4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20e3fb:	00 00 00 00 00 

000000000020e400 <syscall2>:
          [arg1] "{rdi}" (arg1)
        : "rcx", "r11"
    );
}

pub fn syscall2(number: usize, arg1: usize, arg2: usize) usize {
  20e400:	55                   	push   rbp
  20e401:	48 89 e5             	mov    rbp,rsp
  20e404:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  20e408:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  20e40c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    return asm volatile ("syscall"
        : [ret] "={rax}" (-> usize)
        : [number] "{rax}" (number),
  20e410:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
          [arg1] "{rdi}" (arg1),
  20e414:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
          [arg2] "{rsi}" (arg2)
  20e418:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
    return asm volatile ("syscall"
  20e41c:	0f 05                	syscall 
  20e41e:	5d                   	pop    rbp
  20e41f:	c3                   	ret    

000000000020e420 <format.27>:
  20e420:	55                   	push   rbp
  20e421:	48 89 e5             	mov    rbp,rsp
  20e424:	48 83 ec 50          	sub    rsp,0x50
  20e428:	48 8d 05 e1 4f 03 00 	lea    rax,[rip+0x34fe1]        # 243410 <__unnamed_31>
  20e42f:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
  20e433:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  20e437:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  20e43b:	4c 89 45 d0          	mov    QWORD PTR [rbp-0x30],r8
                        try output(context, fmt[start_index..i]);
  20e43f:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  20e443:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  20e447:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  20e44b:	48 89 c2             	mov    rdx,rax
  20e44e:	ff d1                	call   rcx
  20e450:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  20e454:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  20e459:	74 1b                	je     20e476 <format.27+0x56>
  20e45b:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  20e45f:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20e463:	66 89 45 c6          	mov    WORD PTR [rbp-0x3a],ax
  20e467:	e8 24 d8 ff ff       	call   20bc90 <__zig_return_error>
  20e46c:	66 8b 45 c6          	mov    ax,WORD PTR [rbp-0x3a]
  20e470:	48 83 c4 50          	add    rsp,0x50
  20e474:	5d                   	pop    rbp
  20e475:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  20e476:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  20e47a:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  20e47e:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  20e482:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20e486:	e8 e5 00 00 00       	call   20e570 <formatType.28>
  20e48b:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  20e48f:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  20e494:	74 1b                	je     20e4b1 <format.27+0x91>
  20e496:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  20e49a:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20e49e:	66 89 45 c4          	mov    WORD PTR [rbp-0x3c],ax
  20e4a2:	e8 e9 d7 ff ff       	call   20bc90 <__zig_return_error>
  20e4a7:	66 8b 45 c4          	mov    ax,WORD PTR [rbp-0x3c]
  20e4ab:	48 83 c4 50          	add    rsp,0x50
  20e4af:	5d                   	pop    rbp
  20e4b0:	c3                   	ret    
  20e4b1:	48 8d 15 70 4f 03 00 	lea    rdx,[rip+0x34f70]        # 243428 <__unnamed_32>
                        try output(context, fmt[start_index..i]);
  20e4b8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20e4bc:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  20e4c0:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20e4c4:	ff d0                	call   rax
  20e4c6:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  20e4ca:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  20e4cf:	74 1b                	je     20e4ec <format.27+0xcc>
  20e4d1:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  20e4d5:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20e4d9:	66 89 45 c2          	mov    WORD PTR [rbp-0x3e],ax
  20e4dd:	e8 ae d7 ff ff       	call   20bc90 <__zig_return_error>
  20e4e2:	66 8b 45 c2          	mov    ax,WORD PTR [rbp-0x3e]
  20e4e6:	48 83 c4 50          	add    rsp,0x50
  20e4ea:	5d                   	pop    rbp
  20e4eb:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  20e4ec:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  20e4f0:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  20e4f4:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  20e4f8:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20e4fc:	e8 6f 00 00 00       	call   20e570 <formatType.28>
  20e501:	66 89 45 f8          	mov    WORD PTR [rbp-0x8],ax
  20e505:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  20e50a:	74 1b                	je     20e527 <format.27+0x107>
  20e50c:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  20e510:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20e514:	66 89 45 c0          	mov    WORD PTR [rbp-0x40],ax
  20e518:	e8 73 d7 ff ff       	call   20bc90 <__zig_return_error>
  20e51d:	66 8b 45 c0          	mov    ax,WORD PTR [rbp-0x40]
  20e521:	48 83 c4 50          	add    rsp,0x50
  20e525:	5d                   	pop    rbp
  20e526:	c3                   	ret    
  20e527:	48 8d 15 12 4f 03 00 	lea    rdx,[rip+0x34f12]        # 243440 <__unnamed_33>
        try output(context, fmt[start_index..]);
  20e52e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  20e532:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  20e536:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20e53a:	ff d0                	call   rax
  20e53c:	66 89 45 f6          	mov    WORD PTR [rbp-0xa],ax
  20e540:	66 83 7d f6 00       	cmp    WORD PTR [rbp-0xa],0x0
  20e545:	74 1b                	je     20e562 <format.27+0x142>
  20e547:	66 8b 45 f6          	mov    ax,WORD PTR [rbp-0xa]
  20e54b:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20e54f:	66 89 45 be          	mov    WORD PTR [rbp-0x42],ax
  20e553:	e8 38 d7 ff ff       	call   20bc90 <__zig_return_error>
  20e558:	66 8b 45 be          	mov    ax,WORD PTR [rbp-0x42]
  20e55c:	48 83 c4 50          	add    rsp,0x50
  20e560:	5d                   	pop    rbp
  20e561:	c3                   	ret    
  20e562:	31 c0                	xor    eax,eax
  20e564:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  20e567:	66 89 c8             	mov    ax,cx
  20e56a:	48 83 c4 50          	add    rsp,0x50
  20e56e:	5d                   	pop    rbp
  20e56f:	c3                   	ret    

000000000020e570 <formatType.28>:
pub fn formatType(
  20e570:	55                   	push   rbp
  20e571:	48 89 e5             	mov    rbp,rsp
  20e574:	48 83 ec 30          	sub    rsp,0x30
  20e578:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  20e57c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  20e580:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return formatValue(value, fmt, context, Errors, output);
  20e584:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  20e588:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  20e58c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20e590:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  20e594:	e8 77 7a 01 00       	call   226010 <formatValue>
  20e599:	66 83 f8 00          	cmp    ax,0x0
  20e59d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  20e5a1:	74 0b                	je     20e5ae <formatType.28+0x3e>
  20e5a3:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  20e5a7:	e8 e4 d6 ff ff       	call   20bc90 <__zig_return_error>
  20e5ac:	eb 02                	jmp    20e5b0 <formatType.28+0x40>
  20e5ae:	eb 00                	jmp    20e5b0 <formatType.28+0x40>
  20e5b0:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  20e5b4:	48 83 c4 30          	add    rsp,0x30
  20e5b8:	5d                   	pop    rbp
  20e5b9:	c3                   	ret    
  20e5ba:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000020e5c0 <syscall4>:
          [arg3] "{rdx}" (arg3)
        : "rcx", "r11"
    );
}

pub fn syscall4(number: usize, arg1: usize, arg2: usize, arg3: usize, arg4: usize) usize {
  20e5c0:	55                   	push   rbp
  20e5c1:	48 89 e5             	mov    rbp,rsp
  20e5c4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  20e5c8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  20e5cc:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  20e5d0:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  20e5d4:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
    return asm volatile ("syscall"
        : [ret] "={rax}" (-> usize)
        : [number] "{rax}" (number),
  20e5d8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
          [arg1] "{rdi}" (arg1),
  20e5dc:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
          [arg2] "{rsi}" (arg2),
  20e5e0:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
          [arg3] "{rdx}" (arg3),
  20e5e4:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
          [arg4] "{r10}" (arg4)
  20e5e8:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
    return asm volatile ("syscall"
  20e5ec:	0f 05                	syscall 
  20e5ee:	5d                   	pop    rbp
  20e5ef:	c3                   	ret    

000000000020e5f0 <syscall6>:
          [arg5] "{r8}" (arg5)
        : "rcx", "r11"
    );
}

pub fn syscall6(
  20e5f0:	55                   	push   rbp
  20e5f1:	48 89 e5             	mov    rbp,rsp
  20e5f4:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
  20e5f8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  20e5fc:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  20e600:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  20e604:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  20e608:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
  20e60c:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
    arg5: usize,
    arg6: usize,
) usize {
    return asm volatile ("syscall"
        : [ret] "={rax}" (-> usize)
        : [number] "{rax}" (number),
  20e610:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
          [arg1] "{rdi}" (arg1),
  20e614:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
          [arg2] "{rsi}" (arg2),
  20e618:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
          [arg3] "{rdx}" (arg3),
  20e61c:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
          [arg4] "{r10}" (arg4),
  20e620:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
          [arg5] "{r8}" (arg5),
  20e624:	4c 8b 45 d0          	mov    r8,QWORD PTR [rbp-0x30]
          [arg6] "{r9}" (arg6)
  20e628:	4c 8b 4d 10          	mov    r9,QWORD PTR [rbp+0x10]
    return asm volatile ("syscall"
  20e62c:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  20e630:	48 89 c8             	mov    rax,rcx
  20e633:	0f 05                	syscall 
  20e635:	5d                   	pop    rbp
  20e636:	c3                   	ret    
  20e637:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  20e63e:	00 00 

000000000020e640 <syscall4.29>:
pub fn syscall4(number: usize, arg1: usize, arg2: usize, arg3: usize, arg4: usize) usize {
  20e640:	55                   	push   rbp
  20e641:	48 89 e5             	mov    rbp,rsp
  20e644:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  20e648:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  20e64c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  20e650:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  20e654:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
        : [number] "{rax}" (number),
  20e658:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
          [arg1] "{rdi}" (arg1),
  20e65c:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
          [arg2] "{rsi}" (arg2),
  20e660:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
          [arg3] "{rdx}" (arg3),
  20e664:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
          [arg4] "{r10}" (arg4)
  20e668:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
    return asm volatile ("syscall"
  20e66c:	0f 05                	syscall 
  20e66e:	5d                   	pop    rbp
  20e66f:	c3                   	ret    

000000000020e670 <format.30>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  20e670:	55                   	push   rbp
  20e671:	48 89 e5             	mov    rbp,rsp
  20e674:	48 83 ec 40          	sub    rsp,0x40
  20e678:	48 8d 05 d9 4d 03 00 	lea    rax,[rip+0x34dd9]        # 243458 <__unnamed_34>
  20e67f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  20e683:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  20e687:	c5 fb 11 45 e0       	vmovsd QWORD PTR [rbp-0x20],xmm0
                        try output(context, fmt[start_index..i]);
  20e68c:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  20e690:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20e694:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  20e698:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  20e69c:	48 89 c2             	mov    rdx,rax
  20e69f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20e6a3:	ff d0                	call   rax
  20e6a5:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  20e6a9:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  20e6ae:	74 1b                	je     20e6cb <format.30+0x5b>
  20e6b0:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  20e6b4:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  20e6b8:	66 89 45 ce          	mov    WORD PTR [rbp-0x32],ax
  20e6bc:	e8 cf d5 ff ff       	call   20bc90 <__zig_return_error>
  20e6c1:	66 8b 45 ce          	mov    ax,WORD PTR [rbp-0x32]
  20e6c5:	48 83 c4 40          	add    rsp,0x40
  20e6c9:	5d                   	pop    rbp
  20e6ca:	c3                   	ret    
                    try formatType(args[next_arg], fmt[s..i], context, Errors, output);
  20e6cb:	c5 fb 10 45 e0       	vmovsd xmm0,QWORD PTR [rbp-0x20]
  20e6d0:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20e6d4:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  20e6d8:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  20e6dc:	e8 6f 00 00 00       	call   20e750 <formatType.31>
  20e6e1:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  20e6e5:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  20e6ea:	74 1b                	je     20e707 <format.30+0x97>
  20e6ec:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  20e6f0:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  20e6f4:	66 89 45 cc          	mov    WORD PTR [rbp-0x34],ax
  20e6f8:	e8 93 d5 ff ff       	call   20bc90 <__zig_return_error>
  20e6fd:	66 8b 45 cc          	mov    ax,WORD PTR [rbp-0x34]
  20e701:	48 83 c4 40          	add    rsp,0x40
  20e705:	5d                   	pop    rbp
  20e706:	c3                   	ret    
  20e707:	48 8d 15 62 4d 03 00 	lea    rdx,[rip+0x34d62]        # 243470 <__unnamed_35>
        try output(context, fmt[start_index..]);
  20e70e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20e712:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20e716:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  20e71a:	ff d0                	call   rax
  20e71c:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  20e720:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  20e725:	74 1b                	je     20e742 <format.30+0xd2>
  20e727:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  20e72b:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  20e72f:	66 89 45 ca          	mov    WORD PTR [rbp-0x36],ax
  20e733:	e8 58 d5 ff ff       	call   20bc90 <__zig_return_error>
  20e738:	66 8b 45 ca          	mov    ax,WORD PTR [rbp-0x36]
  20e73c:	48 83 c4 40          	add    rsp,0x40
  20e740:	5d                   	pop    rbp
  20e741:	c3                   	ret    
  20e742:	31 c0                	xor    eax,eax
  20e744:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  20e747:	66 89 c8             	mov    ax,cx
  20e74a:	48 83 c4 40          	add    rsp,0x40
  20e74e:	5d                   	pop    rbp
  20e74f:	c3                   	ret    

000000000020e750 <formatType.31>:
pub fn formatType(
  20e750:	55                   	push   rbp
  20e751:	48 89 e5             	mov    rbp,rsp
  20e754:	48 83 ec 30          	sub    rsp,0x30
  20e758:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
  20e75d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  20e761:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
            return formatValue(value, fmt, context, Errors, output);
  20e765:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  20e76a:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20e76e:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  20e772:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  20e776:	e8 e5 78 01 00       	call   226060 <formatValue.96>
  20e77b:	66 83 f8 00          	cmp    ax,0x0
  20e77f:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  20e783:	74 0b                	je     20e790 <formatType.31+0x40>
  20e785:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  20e789:	e8 02 d5 ff ff       	call   20bc90 <__zig_return_error>
  20e78e:	eb 02                	jmp    20e792 <formatType.31+0x42>
  20e790:	eb 00                	jmp    20e792 <formatType.31+0x42>
  20e792:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  20e796:	48 83 c4 30          	add    rsp,0x30
  20e79a:	5d                   	pop    rbp
  20e79b:	c3                   	ret    
  20e79c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000020e7a0 <blockAppSignals>:

fn blockAllSignals(set: *sigset_t) void {
    _ = syscall4(SYS_rt_sigprocmask, SIG_BLOCK, @ptrToInt(&all_mask), @ptrToInt(set), NSIG / 8);
}

fn blockAppSignals(set: *sigset_t) void {
  20e7a0:	55                   	push   rbp
  20e7a1:	48 89 e5             	mov    rbp,rsp
  20e7a4:	48 83 ec 20          	sub    rsp,0x20
  20e7a8:	b8 0e 00 00 00       	mov    eax,0xe
  20e7ad:	89 c1                	mov    ecx,eax
  20e7af:	31 c0                	xor    eax,eax
  20e7b1:	89 c6                	mov    esi,eax
  20e7b3:	48 8d 15 86 24 ff ff 	lea    rdx,[rip+0xffffffffffff2486]        # 200c40 <app_mask>
  20e7ba:	b8 08 00 00 00       	mov    eax,0x8
  20e7bf:	41 89 c0             	mov    r8d,eax
  20e7c2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    _ = syscall4(SYS_rt_sigprocmask, SIG_BLOCK, @ptrToInt(&app_mask), @ptrToInt(set), NSIG / 8);
  20e7c6:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  20e7ca:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  20e7ce:	48 89 cf             	mov    rdi,rcx
  20e7d1:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  20e7d5:	e8 66 fe ff ff       	call   20e640 <syscall4.29>
fn blockAppSignals(set: *sigset_t) void {
  20e7da:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  20e7de:	48 83 c4 20          	add    rsp,0x20
  20e7e2:	5d                   	pop    rbp
  20e7e3:	c3                   	ret    
  20e7e4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20e7eb:	00 00 00 00 00 

000000000020e7f0 <syscall0>:
pub fn syscall0(number: usize) usize {
  20e7f0:	55                   	push   rbp
  20e7f1:	48 89 e5             	mov    rbp,rsp
  20e7f4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
        : [number] "{rax}" (number)
  20e7f8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    return asm volatile ("syscall"
  20e7fc:	0f 05                	syscall 
  20e7fe:	5d                   	pop    rbp
  20e7ff:	c3                   	ret    

000000000020e800 <restoreSignals>:
}

fn restoreSignals(set: *sigset_t) void {
  20e800:	55                   	push   rbp
  20e801:	48 89 e5             	mov    rbp,rsp
  20e804:	48 83 ec 20          	sub    rsp,0x20
  20e808:	b8 0e 00 00 00       	mov    eax,0xe
  20e80d:	89 c1                	mov    ecx,eax
  20e80f:	b8 02 00 00 00       	mov    eax,0x2
  20e814:	89 c6                	mov    esi,eax
  20e816:	31 c0                	xor    eax,eax
  20e818:	89 c2                	mov    edx,eax
  20e81a:	b8 08 00 00 00       	mov    eax,0x8
  20e81f:	41 89 c0             	mov    r8d,eax
  20e822:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    _ = syscall4(SYS_rt_sigprocmask, SIG_SETMASK, @ptrToInt(set), 0, NSIG / 8);
  20e826:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  20e82a:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  20e82e:	48 89 cf             	mov    rdi,rcx
  20e831:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  20e835:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  20e839:	48 89 ca             	mov    rdx,rcx
  20e83c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20e840:	e8 fb fd ff ff       	call   20e640 <syscall4.29>
fn restoreSignals(set: *sigset_t) void {
  20e845:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  20e849:	48 83 c4 20          	add    rsp,0x20
  20e84d:	5d                   	pop    rbp
  20e84e:	c3                   	ret    
  20e84f:	90                   	nop

000000000020e850 <File_write>:
        }
    }

    pub const WriteError = os.WindowsWriteError || os.PosixWriteError;

    pub fn write(self: *File, bytes: []const u8) WriteError!void {
  20e850:	55                   	push   rbp
  20e851:	48 89 e5             	mov    rbp,rsp
  20e854:	48 83 ec 20          	sub    rsp,0x20
  20e858:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
        if (is_posix) {
            try os.posixWrite(self.handle, bytes);
  20e85c:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  20e860:	8b 36                	mov    esi,DWORD PTR [rsi]
  20e862:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  20e866:	e8 35 00 00 00       	call   20e8a0 <posixWrite>
  20e86b:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  20e86f:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  20e874:	74 1b                	je     20e891 <File_write+0x41>
  20e876:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  20e87a:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  20e87e:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
  20e882:	e8 09 d4 ff ff       	call   20bc90 <__zig_return_error>
  20e887:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
  20e88b:	48 83 c4 20          	add    rsp,0x20
  20e88f:	5d                   	pop    rbp
  20e890:	c3                   	ret    
  20e891:	31 c0                	xor    eax,eax
  20e893:	66 89 c1             	mov    cx,ax
    pub fn write(self: *File, bytes: []const u8) WriteError!void {
  20e896:	66 89 c8             	mov    ax,cx
  20e899:	48 83 c4 20          	add    rsp,0x20
  20e89d:	5d                   	pop    rbp
  20e89e:	c3                   	ret    
  20e89f:	90                   	nop

000000000020e8a0 <posixWrite>:
pub fn posixWrite(fd: i32, bytes: []const u8) !void {
  20e8a0:	55                   	push   rbp
  20e8a1:	48 89 e5             	mov    rbp,rsp
  20e8a4:	48 81 ec d0 00 00 00 	sub    rsp,0xd0
  20e8ab:	89 75 fc             	mov    DWORD PTR [rbp-0x4],esi
    var index: usize = 0;
  20e8ae:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  20e8b5:	00 
  20e8b6:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
  20e8ba:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
    while (index < bytes.len) {
  20e8be:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20e8c2:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  20e8c6:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  20e8ca:	0f 83 08 02 00 00    	jae    20ead8 <posixWrite+0x238>
        const amt_to_write = math.min(bytes.len - index, usize(max_bytes_len));
  20e8d0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20e8d4:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  20e8d8:	48 2b 4d f0          	sub    rcx,QWORD PTR [rbp-0x10]
  20e8dc:	0f 92 c2             	setb   dl
  20e8df:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
  20e8e3:	88 55 bf             	mov    BYTE PTR [rbp-0x41],dl
  20e8e6:	0f 82 fd 01 00 00    	jb     20eae9 <posixWrite+0x249>
  20e8ec:	e9 08 02 00 00       	jmp    20eaf9 <posixWrite+0x259>
            return switch (write_err) {
  20e8f1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  20e8f5:	48 89 c1             	mov    rcx,rax
  20e8f8:	48 83 e9 01          	sub    rcx,0x1
  20e8fc:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  20e900:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  20e904:	0f 84 71 01 00 00    	je     20ea7b <posixWrite+0x1db>
  20e90a:	eb 00                	jmp    20e90c <posixWrite+0x6c>
  20e90c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20e910:	48 83 e8 04          	sub    rax,0x4
  20e914:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  20e918:	0f 84 ed 00 00 00    	je     20ea0b <posixWrite+0x16b>
  20e91e:	eb 00                	jmp    20e920 <posixWrite+0x80>
  20e920:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20e924:	48 83 e8 05          	sub    rax,0x5
  20e928:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  20e92c:	0f 84 2f 01 00 00    	je     20ea61 <posixWrite+0x1c1>
  20e932:	eb 00                	jmp    20e934 <posixWrite+0x94>
  20e934:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20e938:	48 83 e8 09          	sub    rax,0x9
  20e93c:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  20e940:	0f 84 e7 00 00 00    	je     20ea2d <posixWrite+0x18d>
  20e946:	eb 00                	jmp    20e948 <posixWrite+0xa8>
  20e948:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20e94c:	48 83 e8 0b          	sub    rax,0xb
  20e950:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  20e954:	0f 84 c6 00 00 00    	je     20ea20 <posixWrite+0x180>
  20e95a:	eb 00                	jmp    20e95c <posixWrite+0xbc>
  20e95c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20e960:	48 83 e8 0e          	sub    rax,0xe
  20e964:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  20e968:	0f 84 a2 00 00 00    	je     20ea10 <posixWrite+0x170>
  20e96e:	eb 00                	jmp    20e970 <posixWrite+0xd0>
  20e970:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20e974:	48 83 e8 16          	sub    rax,0x16
  20e978:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  20e97f:	0f 84 8b 00 00 00    	je     20ea10 <posixWrite+0x170>
  20e985:	eb 00                	jmp    20e987 <posixWrite+0xe7>
  20e987:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20e98b:	48 83 e8 1b          	sub    rax,0x1b
  20e98f:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  20e996:	0f 84 b8 00 00 00    	je     20ea54 <posixWrite+0x1b4>
  20e99c:	eb 00                	jmp    20e99e <posixWrite+0xfe>
  20e99e:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20e9a2:	48 83 e8 1c          	sub    rax,0x1c
  20e9a6:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  20e9ad:	0f 84 bb 00 00 00    	je     20ea6e <posixWrite+0x1ce>
  20e9b3:	eb 00                	jmp    20e9b5 <posixWrite+0x115>
  20e9b5:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20e9b9:	48 83 e8 20          	sub    rax,0x20
  20e9bd:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  20e9c4:	0f 84 be 00 00 00    	je     20ea88 <posixWrite+0x1e8>
  20e9ca:	eb 00                	jmp    20e9cc <posixWrite+0x12c>
  20e9cc:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20e9d0:	48 83 e8 59          	sub    rax,0x59
  20e9d4:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  20e9db:	74 5d                	je     20ea3a <posixWrite+0x19a>
  20e9dd:	eb 00                	jmp    20e9df <posixWrite+0x13f>
  20e9df:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  20e9e3:	48 83 e8 7a          	sub    rax,0x7a
  20e9e7:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
  20e9ee:	74 57                	je     20ea47 <posixWrite+0x1a7>
  20e9f0:	eb 00                	jmp    20e9f2 <posixWrite+0x152>
                else => unexpectedErrorPosix(write_err),
  20e9f2:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  20e9f6:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  20e9fa:	e8 21 e7 ff ff       	call   20d120 <unexpectedErrorPosix>
            return switch (write_err) {
  20e9ff:	66 89 85 4e ff ff ff 	mov    WORD PTR [rbp-0xb2],ax
  20ea06:	e9 8a 00 00 00       	jmp    20ea95 <posixWrite+0x1f5>
                posix.EINTR => continue,
  20ea0b:	e9 ae fe ff ff       	jmp    20e8be <posixWrite+0x1e>
  20ea10:	48 8d 3d e9 48 03 00 	lea    rdi,[rip+0x348e9]        # 243300 <__unnamed_13>
  20ea17:	31 c0                	xor    eax,eax
  20ea19:	89 c6                	mov    esi,eax
                posix.EINVAL, posix.EFAULT => unreachable,
  20ea1b:	e8 e0 cb ff ff       	call   20b600 <panic>
  20ea20:	66 b8 09 00          	mov    ax,0x9
            return switch (write_err) {
  20ea24:	66 89 85 4e ff ff ff 	mov    WORD PTR [rbp-0xb2],ax
  20ea2b:	eb 68                	jmp    20ea95 <posixWrite+0x1f5>
  20ea2d:	66 b8 0a 00          	mov    ax,0xa
  20ea31:	66 89 85 4e ff ff ff 	mov    WORD PTR [rbp-0xb2],ax
  20ea38:	eb 5b                	jmp    20ea95 <posixWrite+0x1f5>
  20ea3a:	66 b8 0b 00          	mov    ax,0xb
  20ea3e:	66 89 85 4e ff ff ff 	mov    WORD PTR [rbp-0xb2],ax
  20ea45:	eb 4e                	jmp    20ea95 <posixWrite+0x1f5>
  20ea47:	66 b8 0c 00          	mov    ax,0xc
  20ea4b:	66 89 85 4e ff ff ff 	mov    WORD PTR [rbp-0xb2],ax
  20ea52:	eb 41                	jmp    20ea95 <posixWrite+0x1f5>
  20ea54:	66 b8 0d 00          	mov    ax,0xd
  20ea58:	66 89 85 4e ff ff ff 	mov    WORD PTR [rbp-0xb2],ax
  20ea5f:	eb 34                	jmp    20ea95 <posixWrite+0x1f5>
  20ea61:	66 b8 0e 00          	mov    ax,0xe
  20ea65:	66 89 85 4e ff ff ff 	mov    WORD PTR [rbp-0xb2],ax
  20ea6c:	eb 27                	jmp    20ea95 <posixWrite+0x1f5>
  20ea6e:	66 b8 0f 00          	mov    ax,0xf
  20ea72:	66 89 85 4e ff ff ff 	mov    WORD PTR [rbp-0xb2],ax
  20ea79:	eb 1a                	jmp    20ea95 <posixWrite+0x1f5>
  20ea7b:	66 b8 10 00          	mov    ax,0x10
  20ea7f:	66 89 85 4e ff ff ff 	mov    WORD PTR [rbp-0xb2],ax
  20ea86:	eb 0d                	jmp    20ea95 <posixWrite+0x1f5>
  20ea88:	66 b8 08 00          	mov    ax,0x8
  20ea8c:	66 89 85 4e ff ff ff 	mov    WORD PTR [rbp-0xb2],ax
  20ea93:	eb 00                	jmp    20ea95 <posixWrite+0x1f5>
  20ea95:	66 8b 85 4e ff ff ff 	mov    ax,WORD PTR [rbp-0xb2]
  20ea9c:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  20eaa0:	66 89 85 4c ff ff ff 	mov    WORD PTR [rbp-0xb4],ax
  20eaa7:	e8 e4 d1 ff ff       	call   20bc90 <__zig_return_error>
  20eaac:	66 8b 85 4c ff ff ff 	mov    ax,WORD PTR [rbp-0xb4]
  20eab3:	48 81 c4 d0 00 00 00 	add    rsp,0xd0
  20eaba:	5d                   	pop    rbp
  20eabb:	c3                   	ret    
        index += rc;
  20eabc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  20eac0:	48 03 45 e0          	add    rax,QWORD PTR [rbp-0x20]
  20eac4:	0f 92 c1             	setb   cl
  20eac7:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  20eace:	88 8d 3f ff ff ff    	mov    BYTE PTR [rbp-0xc1],cl
  20ead4:	72 6f                	jb     20eb45 <posixWrite+0x2a5>
  20ead6:	eb 7d                	jmp    20eb55 <posixWrite+0x2b5>
  20ead8:	31 c0                	xor    eax,eax
  20eada:	66 89 c1             	mov    cx,ax
pub fn posixWrite(fd: i32, bytes: []const u8) !void {
  20eadd:	66 89 c8             	mov    ax,cx
  20eae0:	48 81 c4 d0 00 00 00 	add    rsp,0xd0
  20eae7:	5d                   	pop    rbp
  20eae8:	c3                   	ret    
  20eae9:	48 8d 3d d8 46 03 00 	lea    rdi,[rip+0x346d8]        # 2431c8 <__unnamed_4>
  20eaf0:	31 c0                	xor    eax,eax
  20eaf2:	89 c6                	mov    esi,eax
        const amt_to_write = math.min(bytes.len - index, usize(max_bytes_len));
  20eaf4:	e8 07 cb ff ff       	call   20b600 <panic>
  20eaf9:	b8 00 f0 ff 7f       	mov    eax,0x7ffff000
  20eafe:	89 c6                	mov    esi,eax
  20eb00:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  20eb04:	e8 a7 75 01 00       	call   2260b0 <min>
  20eb09:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
        const rc = posix.write(fd, bytes.ptr + index, amt_to_write);
  20eb0d:	8b 7d fc             	mov    edi,DWORD PTR [rbp-0x4]
  20eb10:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  20eb14:	48 8b 30             	mov    rsi,QWORD PTR [rax]
  20eb17:	48 03 75 f0          	add    rsi,QWORD PTR [rbp-0x10]
  20eb1b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  20eb1f:	e8 bc 75 01 00       	call   2260e0 <write>
  20eb24:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
        const write_err = posix.getErrno(rc);
  20eb28:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  20eb2c:	e8 4f e5 ff ff       	call   20d080 <getErrno>
  20eb31:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
        if (write_err > 0) {
  20eb35:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  20eb3a:	0f 87 b1 fd ff ff    	ja     20e8f1 <posixWrite+0x51>
  20eb40:	e9 77 ff ff ff       	jmp    20eabc <posixWrite+0x21c>
  20eb45:	48 8d 3d 7c 46 03 00 	lea    rdi,[rip+0x3467c]        # 2431c8 <__unnamed_4>
  20eb4c:	31 c0                	xor    eax,eax
  20eb4e:	89 c6                	mov    esi,eax
        index += rc;
  20eb50:	e8 ab ca ff ff       	call   20b600 <panic>
  20eb55:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  20eb5c:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    while (index < bytes.len) {
  20eb60:	e9 59 fd ff ff       	jmp    20e8be <posixWrite+0x1e>
  20eb65:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20eb6c:	00 00 00 00 

000000000020eb70 <openSelfDebugInfo>:
pub fn openSelfDebugInfo(allocator: *mem.Allocator) !*ElfStackTrace {
  20eb70:	55                   	push   rbp
  20eb71:	48 89 e5             	mov    rbp,rsp
  20eb74:	48 81 ec 90 03 00 00 	sub    rsp,0x390
  20eb7b:	48 89 f8             	mov    rax,rdi
  20eb7e:	48 8d 4d e0          	lea    rcx,[rbp-0x20]
  20eb82:	48 89 95 70 fd ff ff 	mov    QWORD PTR [rbp-0x290],rdx
            const st = try allocator.create(ElfStackTrace{
  20eb89:	48 8b 95 70 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x290]
                .abbrev_table_list = ArrayList(AbbrevTableHeader).init(allocator),
  20eb90:	4c 8b 85 70 fd ff ff 	mov    r8,QWORD PTR [rbp-0x290]
  20eb97:	48 89 bd 60 fd ff ff 	mov    QWORD PTR [rbp-0x2a0],rdi
  20eb9e:	48 89 cf             	mov    rdi,rcx
  20eba1:	48 89 b5 58 fd ff ff 	mov    QWORD PTR [rbp-0x2a8],rsi
  20eba8:	4c 89 c6             	mov    rsi,r8
  20ebab:	48 89 85 50 fd ff ff 	mov    QWORD PTR [rbp-0x2b0],rax
  20ebb2:	48 89 95 48 fd ff ff 	mov    QWORD PTR [rbp-0x2b8],rdx
  20ebb9:	e8 82 0a 00 00       	call   20f640 <AlignedArrayList(AbbrevTableHeader,8)_init>
  20ebbe:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
                .compile_unit_list = ArrayList(CompileUnit).init(allocator),
  20ebc2:	48 8b b5 70 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x290]
  20ebc9:	e8 d2 0a 00 00       	call   20f6a0 <AlignedArrayList(CompileUnit,2)_init>
  20ebce:	48 8d bd e8 fe ff ff 	lea    rdi,[rbp-0x118]
  20ebd5:	48 8d 85 f8 fe ff ff 	lea    rax,[rbp-0x108]
  20ebdc:	48 8d 15 bd a0 ff ff 	lea    rdx,[rip+0xffffffffffffa0bd]        # 208ca0 <__unnamed_36>
  20ebe3:	41 b9 58 00 00 00    	mov    r9d,0x58
  20ebe9:	44 89 ce             	mov    esi,r9d
            const st = try allocator.create(ElfStackTrace{
  20ebec:	44 8b 0d 2d bd ff ff 	mov    r9d,DWORD PTR [rip+0xffffffffffffbd2d]        # 20a920 <__unnamed_37>
  20ebf3:	44 89 8d f8 fe ff ff 	mov    DWORD PTR [rbp-0x108],r9d
  20ebfa:	49 89 c0             	mov    r8,rax
  20ebfd:	49 83 c0 08          	add    r8,0x8
  20ec01:	48 89 bd 40 fd ff ff 	mov    QWORD PTR [rbp-0x2c0],rdi
  20ec08:	4c 89 c7             	mov    rdi,r8
  20ec0b:	48 89 b5 38 fd ff ff 	mov    QWORD PTR [rbp-0x2c8],rsi
  20ec12:	48 89 d6             	mov    rsi,rdx
  20ec15:	48 8b 95 38 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2c8]
  20ec1c:	48 89 8d 30 fd ff ff 	mov    QWORD PTR [rbp-0x2d0],rcx
  20ec23:	48 89 85 28 fd ff ff 	mov    QWORD PTR [rbp-0x2d8],rax
  20ec2a:	e8 71 5c 02 00       	call   2348a0 <memcpy>
  20ec2f:	48 8b 85 30 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2d0]
  20ec36:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  20ec3d:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  20ec44:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  20ec4b:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  20ec52:	48 c7 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],0x0
  20ec59:	00 00 00 00 
  20ec5d:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  20ec61:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
  20ec65:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20ec69:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
  20ec6d:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  20ec71:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
  20ec75:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  20ec79:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
  20ec7d:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  20ec81:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
  20ec85:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  20ec89:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  20ec8d:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  20ec91:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
  20ec95:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  20ec99:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
  20ec9d:	48 8b bd 40 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2c0]
  20eca4:	48 8b b5 58 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a8]
  20ecab:	48 8b 95 48 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2b8]
  20ecb2:	48 8b 8d 28 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2d8]
  20ecb9:	e8 42 0a 00 00       	call   20f700 <Allocator_create>
  20ecbe:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  20ecc5:	00 
  20ecc6:	74 54                	je     20ed1c <openSelfDebugInfo+0x1ac>
  20ecc8:	66 8b 85 e8 fe ff ff 	mov    ax,WORD PTR [rbp-0x118]
  20eccf:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20ecd6:	66 89 85 26 fd ff ff 	mov    WORD PTR [rbp-0x2da],ax
  20ecdd:	e8 ae cf ff ff       	call   20bc90 <__zig_return_error>
  20ece2:	66 8b 85 26 fd ff ff 	mov    ax,WORD PTR [rbp-0x2da]
  20ece9:	66 89 85 c8 fe ff ff 	mov    WORD PTR [rbp-0x138],ax
  20ecf0:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  20ecf7:	48 8b 8d 60 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2a0]
  20ecfe:	48 89 39             	mov    QWORD PTR [rcx],rdi
  20ed01:	48 8b bd d0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x130]
  20ed08:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  20ed0c:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  20ed13:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20ed1a:	5d                   	pop    rbp
  20ed1b:	c3                   	ret    
  20ed1c:	48 8d bd c0 fe ff ff 	lea    rdi,[rbp-0x140]
  20ed23:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  20ed2a:	48 89 85 68 fd ff ff 	mov    QWORD PTR [rbp-0x298],rax
            st.self_exe_file = try os.openSelfExe();
  20ed31:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  20ed38:	48 8b b5 58 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a8]
  20ed3f:	48 89 85 18 fd ff ff 	mov    QWORD PTR [rbp-0x2e8],rax
  20ed46:	e8 c5 0a 00 00       	call   20f810 <openSelfExe>
  20ed4b:	66 83 bd c0 fe ff ff 	cmp    WORD PTR [rbp-0x140],0x0
  20ed52:	00 
  20ed53:	74 67                	je     20edbc <openSelfDebugInfo+0x24c>
            errdefer allocator.destroy(st);
  20ed55:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  20ed5c:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20ed63:	e8 f8 0b 00 00       	call   20f960 <Allocator_destroy>
            st.self_exe_file = try os.openSelfExe();
  20ed68:	66 8b 85 c0 fe ff ff 	mov    ax,WORD PTR [rbp-0x140]
  20ed6f:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20ed76:	66 89 85 16 fd ff ff 	mov    WORD PTR [rbp-0x2ea],ax
  20ed7d:	e8 0e cf ff ff       	call   20bc90 <__zig_return_error>
  20ed82:	66 8b 85 16 fd ff ff 	mov    ax,WORD PTR [rbp-0x2ea]
  20ed89:	66 89 85 a8 fe ff ff 	mov    WORD PTR [rbp-0x158],ax
  20ed90:	48 8b b5 a8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x158]
  20ed97:	48 8b bd 60 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a0]
  20ed9e:	48 89 37             	mov    QWORD PTR [rdi],rsi
  20eda1:	48 8b b5 b0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x150]
  20eda8:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  20edac:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  20edb3:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20edba:	5d                   	pop    rbp
  20edbb:	c3                   	ret    
  20edbc:	8b 85 c4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x13c]
  20edc2:	48 8b 8d 18 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2e8]
  20edc9:	89 01                	mov    DWORD PTR [rcx],eax
            try st.elf.openFile(allocator, &st.self_exe_file);
  20edcb:	48 8b 95 68 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x298]
  20edd2:	48 83 c2 08          	add    rdx,0x8
  20edd6:	48 8b b5 70 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x290]
  20eddd:	48 8b 8d 68 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x298]
  20ede4:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20edeb:	48 89 b5 08 fd ff ff 	mov    QWORD PTR [rbp-0x2f8],rsi
  20edf2:	48 89 d6             	mov    rsi,rdx
  20edf5:	48 8b 95 08 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2f8]
  20edfc:	e8 cf 0b 00 00       	call   20f9d0 <Elf_openFile>
  20ee01:	66 89 85 a6 fe ff ff 	mov    WORD PTR [rbp-0x15a],ax
  20ee08:	66 83 bd a6 fe ff ff 	cmp    WORD PTR [rbp-0x15a],0x0
  20ee0f:	00 
  20ee10:	74 73                	je     20ee85 <openSelfDebugInfo+0x315>
            errdefer st.self_exe_file.close();
  20ee12:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  20ee19:	e8 52 30 00 00       	call   211e70 <File_close>
            errdefer allocator.destroy(st);
  20ee1e:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  20ee25:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20ee2c:	e8 2f 0b 00 00       	call   20f960 <Allocator_destroy>
            try st.elf.openFile(allocator, &st.self_exe_file);
  20ee31:	66 8b 85 a6 fe ff ff 	mov    ax,WORD PTR [rbp-0x15a]
  20ee38:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20ee3f:	66 89 85 06 fd ff ff 	mov    WORD PTR [rbp-0x2fa],ax
  20ee46:	e8 45 ce ff ff       	call   20bc90 <__zig_return_error>
  20ee4b:	66 8b 85 06 fd ff ff 	mov    ax,WORD PTR [rbp-0x2fa]
  20ee52:	66 89 85 90 fe ff ff 	mov    WORD PTR [rbp-0x170],ax
  20ee59:	48 8b b5 90 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x170]
  20ee60:	48 8b bd 60 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a0]
  20ee67:	48 89 37             	mov    QWORD PTR [rdi],rsi
  20ee6a:	48 8b b5 98 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x168]
  20ee71:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  20ee75:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  20ee7c:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20ee83:	5d                   	pop    rbp
  20ee84:	c3                   	ret    
  20ee85:	48 8d bd 80 fe ff ff 	lea    rdi,[rbp-0x180]
  20ee8c:	48 8d 0d 1d 46 03 00 	lea    rcx,[rip+0x3461d]        # 2434b0 <__unnamed_38>
            st.debug_info = (try st.elf.findSection(".debug_info")) orelse return error.MissingDebugInfo;
  20ee93:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  20ee9a:	48 83 c0 60          	add    rax,0x60
  20ee9e:	48 8b 95 68 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x298]
  20eea5:	48 83 c2 08          	add    rdx,0x8
  20eea9:	48 8b b5 58 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a8]
  20eeb0:	48 89 85 f8 fc ff ff 	mov    QWORD PTR [rbp-0x308],rax
  20eeb7:	e8 e4 2f 00 00       	call   211ea0 <Elf_findSection>
  20eebc:	66 83 bd 80 fe ff ff 	cmp    WORD PTR [rbp-0x180],0x0
  20eec3:	00 
  20eec4:	0f 84 86 00 00 00    	je     20ef50 <openSelfDebugInfo+0x3e0>
            errdefer st.elf.close();
  20eeca:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  20eed1:	48 83 c0 08          	add    rax,0x8
  20eed5:	48 89 c7             	mov    rdi,rax
  20eed8:	e8 c3 33 00 00       	call   2122a0 <Elf_close>
            errdefer st.self_exe_file.close();
  20eedd:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  20eee4:	e8 87 2f 00 00       	call   211e70 <File_close>
            errdefer allocator.destroy(st);
  20eee9:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  20eef0:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20eef7:	e8 64 0a 00 00       	call   20f960 <Allocator_destroy>
            st.debug_info = (try st.elf.findSection(".debug_info")) orelse return error.MissingDebugInfo;
  20eefc:	66 8b 8d 80 fe ff ff 	mov    cx,WORD PTR [rbp-0x180]
  20ef03:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20ef0a:	66 89 8d f6 fc ff ff 	mov    WORD PTR [rbp-0x30a],cx
  20ef11:	e8 7a cd ff ff       	call   20bc90 <__zig_return_error>
  20ef16:	66 8b 8d f6 fc ff ff 	mov    cx,WORD PTR [rbp-0x30a]
  20ef1d:	66 89 8d 60 fe ff ff 	mov    WORD PTR [rbp-0x1a0],cx
  20ef24:	48 8b 85 60 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a0]
  20ef2b:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  20ef32:	48 89 06             	mov    QWORD PTR [rsi],rax
  20ef35:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
  20ef3c:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  20ef40:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  20ef47:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20ef4e:	5d                   	pop    rbp
  20ef4f:	c3                   	ret    
  20ef50:	48 8d 85 80 fe ff ff 	lea    rax,[rbp-0x180]
  20ef57:	48 83 c0 08          	add    rax,0x8
  20ef5b:	48 83 bd 88 fe ff ff 	cmp    QWORD PTR [rbp-0x178],0x0
  20ef62:	00 
  20ef63:	48 89 85 e8 fc ff ff 	mov    QWORD PTR [rbp-0x318],rax
  20ef6a:	75 6a                	jne    20efd6 <openSelfDebugInfo+0x466>
            errdefer st.elf.close();
  20ef6c:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  20ef73:	48 83 c0 08          	add    rax,0x8
  20ef77:	48 89 c7             	mov    rdi,rax
  20ef7a:	e8 21 33 00 00       	call   2122a0 <Elf_close>
            errdefer st.self_exe_file.close();
  20ef7f:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  20ef86:	e8 e5 2e 00 00       	call   211e70 <File_close>
            errdefer allocator.destroy(st);
  20ef8b:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  20ef92:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20ef99:	e8 c2 09 00 00       	call   20f960 <Allocator_destroy>
            st.debug_info = (try st.elf.findSection(".debug_info")) orelse return error.MissingDebugInfo;
  20ef9e:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20efa5:	e8 e6 cc ff ff       	call   20bc90 <__zig_return_error>
  20efaa:	48 8b 05 cf 18 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff18cf]        # 200880 <__unnamed_117>
  20efb1:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  20efb8:	48 89 06             	mov    QWORD PTR [rsi],rax
  20efbb:	48 8b 05 c6 18 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff18c6]        # 200888 <__unnamed_117+0x8>
  20efc2:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  20efc6:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  20efcd:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20efd4:	5d                   	pop    rbp
  20efd5:	c3                   	ret    
  20efd6:	48 8b 85 e8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x318]
  20efdd:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  20efe0:	48 89 8d e0 fc ff ff 	mov    QWORD PTR [rbp-0x320],rcx
  20efe7:	48 8d bd 50 fe ff ff 	lea    rdi,[rbp-0x1b0]
  20efee:	48 8d 0d d3 44 03 00 	lea    rcx,[rip+0x344d3]        # 2434c8 <__unnamed_40>
  20eff5:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
  20effc:	48 8b 95 e0 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x320]
  20f003:	48 89 10             	mov    QWORD PTR [rax],rdx
            st.debug_abbrev = (try st.elf.findSection(".debug_abbrev")) orelse return error.MissingDebugInfo;
  20f006:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20f00d:	48 83 c6 68          	add    rsi,0x68
  20f011:	4c 8b 85 68 fd ff ff 	mov    r8,QWORD PTR [rbp-0x298]
  20f018:	49 83 c0 08          	add    r8,0x8
  20f01c:	4c 8b 8d 58 fd ff ff 	mov    r9,QWORD PTR [rbp-0x2a8]
  20f023:	48 89 b5 d8 fc ff ff 	mov    QWORD PTR [rbp-0x328],rsi
  20f02a:	4c 89 ce             	mov    rsi,r9
  20f02d:	4c 89 c2             	mov    rdx,r8
  20f030:	e8 6b 2e 00 00       	call   211ea0 <Elf_findSection>
  20f035:	66 83 bd 50 fe ff ff 	cmp    WORD PTR [rbp-0x1b0],0x0
  20f03c:	00 
  20f03d:	0f 84 86 00 00 00    	je     20f0c9 <openSelfDebugInfo+0x559>
            errdefer st.elf.close();
  20f043:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  20f04a:	48 83 c0 08          	add    rax,0x8
  20f04e:	48 89 c7             	mov    rdi,rax
  20f051:	e8 4a 32 00 00       	call   2122a0 <Elf_close>
            errdefer st.self_exe_file.close();
  20f056:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  20f05d:	e8 0e 2e 00 00       	call   211e70 <File_close>
            errdefer allocator.destroy(st);
  20f062:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  20f069:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20f070:	e8 eb 08 00 00       	call   20f960 <Allocator_destroy>
            st.debug_abbrev = (try st.elf.findSection(".debug_abbrev")) orelse return error.MissingDebugInfo;
  20f075:	66 8b 8d 50 fe ff ff 	mov    cx,WORD PTR [rbp-0x1b0]
  20f07c:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20f083:	66 89 8d d6 fc ff ff 	mov    WORD PTR [rbp-0x32a],cx
  20f08a:	e8 01 cc ff ff       	call   20bc90 <__zig_return_error>
  20f08f:	66 8b 8d d6 fc ff ff 	mov    cx,WORD PTR [rbp-0x32a]
  20f096:	66 89 8d 30 fe ff ff 	mov    WORD PTR [rbp-0x1d0],cx
  20f09d:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  20f0a4:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  20f0ab:	48 89 06             	mov    QWORD PTR [rsi],rax
  20f0ae:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  20f0b5:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  20f0b9:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  20f0c0:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20f0c7:	5d                   	pop    rbp
  20f0c8:	c3                   	ret    
  20f0c9:	48 8d 85 50 fe ff ff 	lea    rax,[rbp-0x1b0]
  20f0d0:	48 83 c0 08          	add    rax,0x8
  20f0d4:	48 83 bd 58 fe ff ff 	cmp    QWORD PTR [rbp-0x1a8],0x0
  20f0db:	00 
  20f0dc:	48 89 85 c8 fc ff ff 	mov    QWORD PTR [rbp-0x338],rax
  20f0e3:	75 6a                	jne    20f14f <openSelfDebugInfo+0x5df>
            errdefer st.elf.close();
  20f0e5:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  20f0ec:	48 83 c0 08          	add    rax,0x8
  20f0f0:	48 89 c7             	mov    rdi,rax
  20f0f3:	e8 a8 31 00 00       	call   2122a0 <Elf_close>
            errdefer st.self_exe_file.close();
  20f0f8:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  20f0ff:	e8 6c 2d 00 00       	call   211e70 <File_close>
            errdefer allocator.destroy(st);
  20f104:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  20f10b:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20f112:	e8 49 08 00 00       	call   20f960 <Allocator_destroy>
            st.debug_abbrev = (try st.elf.findSection(".debug_abbrev")) orelse return error.MissingDebugInfo;
  20f117:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20f11e:	e8 6d cb ff ff       	call   20bc90 <__zig_return_error>
  20f123:	48 8b 05 56 17 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff1756]        # 200880 <__unnamed_117>
  20f12a:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  20f131:	48 89 06             	mov    QWORD PTR [rsi],rax
  20f134:	48 8b 05 4d 17 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff174d]        # 200888 <__unnamed_117+0x8>
  20f13b:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  20f13f:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  20f146:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20f14d:	5d                   	pop    rbp
  20f14e:	c3                   	ret    
  20f14f:	48 8b 85 c8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x338]
  20f156:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  20f159:	48 89 8d c0 fc ff ff 	mov    QWORD PTR [rbp-0x340],rcx
  20f160:	48 8d bd 20 fe ff ff 	lea    rdi,[rbp-0x1e0]
  20f167:	48 8d 0d 72 43 03 00 	lea    rcx,[rip+0x34372]        # 2434e0 <__unnamed_42>
  20f16e:	48 8b 85 d8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x328]
  20f175:	48 8b 95 c0 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x340]
  20f17c:	48 89 10             	mov    QWORD PTR [rax],rdx
            st.debug_str = (try st.elf.findSection(".debug_str")) orelse return error.MissingDebugInfo;
  20f17f:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20f186:	48 83 c6 70          	add    rsi,0x70
  20f18a:	4c 8b 85 68 fd ff ff 	mov    r8,QWORD PTR [rbp-0x298]
  20f191:	49 83 c0 08          	add    r8,0x8
  20f195:	4c 8b 8d 58 fd ff ff 	mov    r9,QWORD PTR [rbp-0x2a8]
  20f19c:	48 89 b5 b8 fc ff ff 	mov    QWORD PTR [rbp-0x348],rsi
  20f1a3:	4c 89 ce             	mov    rsi,r9
  20f1a6:	4c 89 c2             	mov    rdx,r8
  20f1a9:	e8 f2 2c 00 00       	call   211ea0 <Elf_findSection>
  20f1ae:	66 83 bd 20 fe ff ff 	cmp    WORD PTR [rbp-0x1e0],0x0
  20f1b5:	00 
  20f1b6:	0f 84 86 00 00 00    	je     20f242 <openSelfDebugInfo+0x6d2>
            errdefer st.elf.close();
  20f1bc:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  20f1c3:	48 83 c0 08          	add    rax,0x8
  20f1c7:	48 89 c7             	mov    rdi,rax
  20f1ca:	e8 d1 30 00 00       	call   2122a0 <Elf_close>
            errdefer st.self_exe_file.close();
  20f1cf:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  20f1d6:	e8 95 2c 00 00       	call   211e70 <File_close>
            errdefer allocator.destroy(st);
  20f1db:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  20f1e2:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20f1e9:	e8 72 07 00 00       	call   20f960 <Allocator_destroy>
            st.debug_str = (try st.elf.findSection(".debug_str")) orelse return error.MissingDebugInfo;
  20f1ee:	66 8b 8d 20 fe ff ff 	mov    cx,WORD PTR [rbp-0x1e0]
  20f1f5:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20f1fc:	66 89 8d b6 fc ff ff 	mov    WORD PTR [rbp-0x34a],cx
  20f203:	e8 88 ca ff ff       	call   20bc90 <__zig_return_error>
  20f208:	66 8b 8d b6 fc ff ff 	mov    cx,WORD PTR [rbp-0x34a]
  20f20f:	66 89 8d 00 fe ff ff 	mov    WORD PTR [rbp-0x200],cx
  20f216:	48 8b 85 00 fe ff ff 	mov    rax,QWORD PTR [rbp-0x200]
  20f21d:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  20f224:	48 89 06             	mov    QWORD PTR [rsi],rax
  20f227:	48 8b 85 08 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1f8]
  20f22e:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  20f232:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  20f239:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20f240:	5d                   	pop    rbp
  20f241:	c3                   	ret    
  20f242:	48 8d 85 20 fe ff ff 	lea    rax,[rbp-0x1e0]
  20f249:	48 83 c0 08          	add    rax,0x8
  20f24d:	48 83 bd 28 fe ff ff 	cmp    QWORD PTR [rbp-0x1d8],0x0
  20f254:	00 
  20f255:	48 89 85 a8 fc ff ff 	mov    QWORD PTR [rbp-0x358],rax
  20f25c:	75 6a                	jne    20f2c8 <openSelfDebugInfo+0x758>
            errdefer st.elf.close();
  20f25e:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  20f265:	48 83 c0 08          	add    rax,0x8
  20f269:	48 89 c7             	mov    rdi,rax
  20f26c:	e8 2f 30 00 00       	call   2122a0 <Elf_close>
            errdefer st.self_exe_file.close();
  20f271:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  20f278:	e8 f3 2b 00 00       	call   211e70 <File_close>
            errdefer allocator.destroy(st);
  20f27d:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  20f284:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20f28b:	e8 d0 06 00 00       	call   20f960 <Allocator_destroy>
            st.debug_str = (try st.elf.findSection(".debug_str")) orelse return error.MissingDebugInfo;
  20f290:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20f297:	e8 f4 c9 ff ff       	call   20bc90 <__zig_return_error>
  20f29c:	48 8b 05 dd 15 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff15dd]        # 200880 <__unnamed_117>
  20f2a3:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  20f2aa:	48 89 06             	mov    QWORD PTR [rsi],rax
  20f2ad:	48 8b 05 d4 15 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff15d4]        # 200888 <__unnamed_117+0x8>
  20f2b4:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  20f2b8:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  20f2bf:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20f2c6:	5d                   	pop    rbp
  20f2c7:	c3                   	ret    
  20f2c8:	48 8b 85 a8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x358]
  20f2cf:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  20f2d2:	48 89 8d a0 fc ff ff 	mov    QWORD PTR [rbp-0x360],rcx
  20f2d9:	48 8d bd f0 fd ff ff 	lea    rdi,[rbp-0x210]
  20f2e0:	48 8d 0d 11 42 03 00 	lea    rcx,[rip+0x34211]        # 2434f8 <__unnamed_44>
  20f2e7:	48 8b 85 b8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x348]
  20f2ee:	48 8b 95 a0 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x360]
  20f2f5:	48 89 10             	mov    QWORD PTR [rax],rdx
            st.debug_line = (try st.elf.findSection(".debug_line")) orelse return error.MissingDebugInfo;
  20f2f8:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20f2ff:	48 83 c6 78          	add    rsi,0x78
  20f303:	4c 8b 85 68 fd ff ff 	mov    r8,QWORD PTR [rbp-0x298]
  20f30a:	49 83 c0 08          	add    r8,0x8
  20f30e:	4c 8b 8d 58 fd ff ff 	mov    r9,QWORD PTR [rbp-0x2a8]
  20f315:	48 89 b5 98 fc ff ff 	mov    QWORD PTR [rbp-0x368],rsi
  20f31c:	4c 89 ce             	mov    rsi,r9
  20f31f:	4c 89 c2             	mov    rdx,r8
  20f322:	e8 79 2b 00 00       	call   211ea0 <Elf_findSection>
  20f327:	66 83 bd f0 fd ff ff 	cmp    WORD PTR [rbp-0x210],0x0
  20f32e:	00 
  20f32f:	0f 84 86 00 00 00    	je     20f3bb <openSelfDebugInfo+0x84b>
            errdefer st.elf.close();
  20f335:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  20f33c:	48 83 c0 08          	add    rax,0x8
  20f340:	48 89 c7             	mov    rdi,rax
  20f343:	e8 58 2f 00 00       	call   2122a0 <Elf_close>
            errdefer st.self_exe_file.close();
  20f348:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  20f34f:	e8 1c 2b 00 00       	call   211e70 <File_close>
            errdefer allocator.destroy(st);
  20f354:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  20f35b:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20f362:	e8 f9 05 00 00       	call   20f960 <Allocator_destroy>
            st.debug_line = (try st.elf.findSection(".debug_line")) orelse return error.MissingDebugInfo;
  20f367:	66 8b 8d f0 fd ff ff 	mov    cx,WORD PTR [rbp-0x210]
  20f36e:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20f375:	66 89 8d 96 fc ff ff 	mov    WORD PTR [rbp-0x36a],cx
  20f37c:	e8 0f c9 ff ff       	call   20bc90 <__zig_return_error>
  20f381:	66 8b 8d 96 fc ff ff 	mov    cx,WORD PTR [rbp-0x36a]
  20f388:	66 89 8d d0 fd ff ff 	mov    WORD PTR [rbp-0x230],cx
  20f38f:	48 8b 85 d0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x230]
  20f396:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  20f39d:	48 89 06             	mov    QWORD PTR [rsi],rax
  20f3a0:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
  20f3a7:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  20f3ab:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  20f3b2:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20f3b9:	5d                   	pop    rbp
  20f3ba:	c3                   	ret    
  20f3bb:	48 8d 85 f0 fd ff ff 	lea    rax,[rbp-0x210]
  20f3c2:	48 83 c0 08          	add    rax,0x8
  20f3c6:	48 83 bd f8 fd ff ff 	cmp    QWORD PTR [rbp-0x208],0x0
  20f3cd:	00 
  20f3ce:	48 89 85 88 fc ff ff 	mov    QWORD PTR [rbp-0x378],rax
  20f3d5:	75 6a                	jne    20f441 <openSelfDebugInfo+0x8d1>
            errdefer st.elf.close();
  20f3d7:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  20f3de:	48 83 c0 08          	add    rax,0x8
  20f3e2:	48 89 c7             	mov    rdi,rax
  20f3e5:	e8 b6 2e 00 00       	call   2122a0 <Elf_close>
            errdefer st.self_exe_file.close();
  20f3ea:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  20f3f1:	e8 7a 2a 00 00       	call   211e70 <File_close>
            errdefer allocator.destroy(st);
  20f3f6:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  20f3fd:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20f404:	e8 57 05 00 00       	call   20f960 <Allocator_destroy>
            st.debug_line = (try st.elf.findSection(".debug_line")) orelse return error.MissingDebugInfo;
  20f409:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20f410:	e8 7b c8 ff ff       	call   20bc90 <__zig_return_error>
  20f415:	48 8b 05 64 14 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff1464]        # 200880 <__unnamed_117>
  20f41c:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  20f423:	48 89 06             	mov    QWORD PTR [rsi],rax
  20f426:	48 8b 05 5b 14 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff145b]        # 200888 <__unnamed_117+0x8>
  20f42d:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  20f431:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  20f438:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20f43f:	5d                   	pop    rbp
  20f440:	c3                   	ret    
  20f441:	48 8b 85 88 fc ff ff 	mov    rax,QWORD PTR [rbp-0x378]
  20f448:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  20f44b:	48 89 8d 80 fc ff ff 	mov    QWORD PTR [rbp-0x380],rcx
  20f452:	48 8d bd c0 fd ff ff 	lea    rdi,[rbp-0x240]
  20f459:	48 8d 0d b0 40 03 00 	lea    rcx,[rip+0x340b0]        # 243510 <__unnamed_46>
  20f460:	48 8b 85 98 fc ff ff 	mov    rax,QWORD PTR [rbp-0x368]
  20f467:	48 8b 95 80 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x380]
  20f46e:	48 89 10             	mov    QWORD PTR [rax],rdx
            st.debug_ranges = (try st.elf.findSection(".debug_ranges"));
  20f471:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20f478:	48 81 c6 80 00 00 00 	add    rsi,0x80
  20f47f:	4c 8b 85 68 fd ff ff 	mov    r8,QWORD PTR [rbp-0x298]
  20f486:	49 83 c0 08          	add    r8,0x8
  20f48a:	4c 8b 8d 58 fd ff ff 	mov    r9,QWORD PTR [rbp-0x2a8]
  20f491:	48 89 b5 78 fc ff ff 	mov    QWORD PTR [rbp-0x388],rsi
  20f498:	4c 89 ce             	mov    rsi,r9
  20f49b:	4c 89 c2             	mov    rdx,r8
  20f49e:	e8 fd 29 00 00       	call   211ea0 <Elf_findSection>
  20f4a3:	66 83 bd c0 fd ff ff 	cmp    WORD PTR [rbp-0x240],0x0
  20f4aa:	00 
  20f4ab:	0f 84 86 00 00 00    	je     20f537 <openSelfDebugInfo+0x9c7>
            errdefer st.elf.close();
  20f4b1:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  20f4b8:	48 83 c0 08          	add    rax,0x8
  20f4bc:	48 89 c7             	mov    rdi,rax
  20f4bf:	e8 dc 2d 00 00       	call   2122a0 <Elf_close>
            errdefer st.self_exe_file.close();
  20f4c4:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  20f4cb:	e8 a0 29 00 00       	call   211e70 <File_close>
            errdefer allocator.destroy(st);
  20f4d0:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  20f4d7:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20f4de:	e8 7d 04 00 00       	call   20f960 <Allocator_destroy>
            st.debug_ranges = (try st.elf.findSection(".debug_ranges"));
  20f4e3:	66 8b 8d c0 fd ff ff 	mov    cx,WORD PTR [rbp-0x240]
  20f4ea:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20f4f1:	66 89 8d 76 fc ff ff 	mov    WORD PTR [rbp-0x38a],cx
  20f4f8:	e8 93 c7 ff ff       	call   20bc90 <__zig_return_error>
  20f4fd:	66 8b 8d 76 fc ff ff 	mov    cx,WORD PTR [rbp-0x38a]
  20f504:	66 89 8d a0 fd ff ff 	mov    WORD PTR [rbp-0x260],cx
  20f50b:	48 8b 85 a0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x260]
  20f512:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  20f519:	48 89 06             	mov    QWORD PTR [rsi],rax
  20f51c:	48 8b 85 a8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x258]
  20f523:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  20f527:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  20f52e:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20f535:	5d                   	pop    rbp
  20f536:	c3                   	ret    
  20f537:	48 8b 85 c8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x238]
  20f53e:	48 8b 8d 78 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x388]
  20f545:	48 89 01             	mov    QWORD PTR [rcx],rax
            try scanAllCompileUnits(st);
  20f548:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20f54f:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20f556:	e8 95 2d 00 00       	call   2122f0 <scanAllCompileUnits>
  20f55b:	66 89 85 9e fd ff ff 	mov    WORD PTR [rbp-0x262],ax
  20f562:	66 83 bd 9e fd ff ff 	cmp    WORD PTR [rbp-0x262],0x0
  20f569:	00 
  20f56a:	0f 84 86 00 00 00    	je     20f5f6 <openSelfDebugInfo+0xa86>
            errdefer st.elf.close();
  20f570:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  20f577:	48 83 c0 08          	add    rax,0x8
  20f57b:	48 89 c7             	mov    rdi,rax
  20f57e:	e8 1d 2d 00 00       	call   2122a0 <Elf_close>
            errdefer st.self_exe_file.close();
  20f583:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  20f58a:	e8 e1 28 00 00       	call   211e70 <File_close>
            errdefer allocator.destroy(st);
  20f58f:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  20f596:	48 8b b5 68 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x298]
  20f59d:	e8 be 03 00 00       	call   20f960 <Allocator_destroy>
            try scanAllCompileUnits(st);
  20f5a2:	66 8b 8d 9e fd ff ff 	mov    cx,WORD PTR [rbp-0x262]
  20f5a9:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  20f5b0:	66 89 8d 74 fc ff ff 	mov    WORD PTR [rbp-0x38c],cx
  20f5b7:	e8 d4 c6 ff ff       	call   20bc90 <__zig_return_error>
  20f5bc:	66 8b 8d 74 fc ff ff 	mov    cx,WORD PTR [rbp-0x38c]
  20f5c3:	66 89 8d 88 fd ff ff 	mov    WORD PTR [rbp-0x278],cx
  20f5ca:	48 8b 85 88 fd ff ff 	mov    rax,QWORD PTR [rbp-0x278]
  20f5d1:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  20f5d8:	48 89 06             	mov    QWORD PTR [rsi],rax
  20f5db:	48 8b 85 90 fd ff ff 	mov    rax,QWORD PTR [rbp-0x270]
  20f5e2:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  20f5e6:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  20f5ed:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20f5f4:	5d                   	pop    rbp
  20f5f5:	c3                   	ret    
            return st;
  20f5f6:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  20f5fd:	66 c7 85 78 fd ff ff 	mov    WORD PTR [rbp-0x288],0x0
  20f604:	00 00 
  20f606:	48 89 85 80 fd ff ff 	mov    QWORD PTR [rbp-0x280],rax
  20f60d:	48 8b 85 78 fd ff ff 	mov    rax,QWORD PTR [rbp-0x288]
  20f614:	48 8b 8d 60 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2a0]
  20f61b:	48 89 01             	mov    QWORD PTR [rcx],rax
  20f61e:	48 8b 85 80 fd ff ff 	mov    rax,QWORD PTR [rbp-0x280]
  20f625:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  20f629:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  20f630:	48 81 c4 90 03 00 00 	add    rsp,0x390
  20f637:	5d                   	pop    rbp
  20f638:	c3                   	ret    
  20f639:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

000000000020f640 <AlignedArrayList(AbbrevTableHeader,8)_init>:
        items: []align(A) T,
        len: usize,
        allocator: *Allocator,

        /// Deinitialize with `deinit` or use `toOwnedSlice`.
        pub fn init(allocator: *Allocator) Self {
  20f640:	55                   	push   rbp
  20f641:	48 89 e5             	mov    rbp,rsp
  20f644:	48 89 f8             	mov    rax,rdi
  20f647:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
            return Self{
                .items = []align(A) T{},
                .len = 0,
                .allocator = allocator,
  20f64b:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
            return Self{
  20f64f:	48 8b 0d 5a 0c ff ff 	mov    rcx,QWORD PTR [rip+0xffffffffffff0c5a]        # 2002b0 <__unnamed_100>
  20f656:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  20f65a:	48 8b 0d 57 0c ff ff 	mov    rcx,QWORD PTR [rip+0xffffffffffff0c57]        # 2002b8 <__unnamed_100+0x8>
  20f661:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  20f665:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  20f66c:	00 
  20f66d:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  20f671:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  20f675:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  20f678:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20f67c:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  20f680:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  20f684:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  20f688:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  20f68c:	48 89 4f 18          	mov    QWORD PTR [rdi+0x18],rcx
  20f690:	5d                   	pop    rbp
  20f691:	c3                   	ret    
  20f692:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20f699:	1f 84 00 00 00 00 00 

000000000020f6a0 <AlignedArrayList(CompileUnit,2)_init>:
        pub fn init(allocator: *Allocator) Self {
  20f6a0:	55                   	push   rbp
  20f6a1:	48 89 e5             	mov    rbp,rsp
  20f6a4:	48 89 f8             	mov    rax,rdi
  20f6a7:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
                .allocator = allocator,
  20f6ab:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
            return Self{
  20f6af:	48 8b 0d fa 0b ff ff 	mov    rcx,QWORD PTR [rip+0xffffffffffff0bfa]        # 2002b0 <__unnamed_100>
  20f6b6:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  20f6ba:	48 8b 0d f7 0b ff ff 	mov    rcx,QWORD PTR [rip+0xffffffffffff0bf7]        # 2002b8 <__unnamed_100+0x8>
  20f6c1:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  20f6c5:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  20f6cc:	00 
  20f6cd:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  20f6d1:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  20f6d5:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  20f6d8:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  20f6dc:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  20f6e0:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  20f6e4:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  20f6e8:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  20f6ec:	48 89 4f 18          	mov    QWORD PTR [rdi+0x18],rcx
  20f6f0:	5d                   	pop    rbp
  20f6f1:	c3                   	ret    
  20f6f2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20f6f9:	1f 84 00 00 00 00 00 

000000000020f700 <Allocator_create>:
    /// Guaranteed: `old_mem.len` is the same as what was returned from `allocFn` or `reallocFn`
    freeFn: fn (self: *Allocator, old_mem: []u8) void,

    /// Call `destroy` with the result
    /// TODO this is deprecated. use createOne instead
    pub fn create(self: *Allocator, init: var) Error!*@typeOf(init) {
  20f700:	55                   	push   rbp
  20f701:	48 89 e5             	mov    rbp,rsp
  20f704:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  20f70b:	48 89 f8             	mov    rax,rdi
  20f70e:	4c 8d 45 e8          	lea    r8,[rbp-0x18]
  20f712:	41 b9 01 00 00 00    	mov    r9d,0x1
  20f718:	45 89 ca             	mov    r10d,r9d
  20f71b:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
        const T = @typeOf(init);
        if (@sizeOf(T) == 0) return &(T{});
        const slice = try self.alloc(T, 1);
  20f71f:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  20f723:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
  20f727:	4c 89 c7             	mov    rdi,r8
  20f72a:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
  20f72e:	48 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rcx
  20f735:	4c 89 d1             	mov    rcx,r10
  20f738:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  20f73f:	e8 9c 37 00 00       	call   212ee0 <Allocator_alloc>
  20f744:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  20f749:	74 42                	je     20f78d <Allocator_create+0x8d>
  20f74b:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  20f74f:	48 8b 7d 80          	mov    rdi,QWORD PTR [rbp-0x80]
  20f753:	66 89 85 6e ff ff ff 	mov    WORD PTR [rbp-0x92],ax
  20f75a:	e8 31 c5 ff ff       	call   20bc90 <__zig_return_error>
  20f75f:	66 8b 85 6e ff ff ff 	mov    ax,WORD PTR [rbp-0x92]
  20f766:	66 89 45 c0          	mov    WORD PTR [rbp-0x40],ax
  20f76a:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  20f76e:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  20f772:	48 89 39             	mov    QWORD PTR [rcx],rdi
  20f775:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  20f779:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  20f77d:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  20f784:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  20f78b:	5d                   	pop    rbp
  20f78c:	c3                   	ret    
  20f78d:	31 c0                	xor    eax,eax
  20f78f:	89 c1                	mov    ecx,eax
  20f791:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  20f795:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  20f799:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  20f79d:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
        const ptr = &slice[0];
  20f7a1:	48 3b 4d a0          	cmp    rcx,QWORD PTR [rbp-0x60]
  20f7a5:	72 10                	jb     20f7b7 <Allocator_create+0xb7>
  20f7a7:	48 8d 3d 2a 3c 03 00 	lea    rdi,[rip+0x33c2a]        # 2433d8 <__unnamed_20>
  20f7ae:	31 c0                	xor    eax,eax
  20f7b0:	89 c6                	mov    esi,eax
  20f7b2:	e8 49 be ff ff       	call   20b600 <panic>
  20f7b7:	b8 c8 00 00 00       	mov    eax,0xc8
  20f7bc:	89 c2                	mov    edx,eax
  20f7be:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  20f7c2:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
        ptr.* = init;
  20f7c6:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  20f7ca:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
  20f7d1:	48 89 cf             	mov    rdi,rcx
  20f7d4:	e8 c7 50 02 00       	call   2348a0 <memcpy>
        return ptr;
  20f7d9:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  20f7dd:	66 c7 45 b0 00 00    	mov    WORD PTR [rbp-0x50],0x0
  20f7e3:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
  20f7e7:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  20f7eb:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
  20f7ef:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  20f7f2:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  20f7f6:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  20f7fa:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  20f801:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  20f808:	5d                   	pop    rbp
  20f809:	c3                   	ret    
  20f80a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000020f810 <openSelfExe>:
pub fn openSelfExe() !os.File {
  20f810:	55                   	push   rbp
  20f811:	48 89 e5             	mov    rbp,rsp
  20f814:	48 81 ec d0 00 00 00 	sub    rsp,0xd0
  20f81b:	48 89 f8             	mov    rax,rdi
  20f81e:	b1 01                	mov    cl,0x1
            const proc_file_path = "/proc/self/exe";
  20f820:	48 8b 15 0b 95 ff ff 	mov    rdx,QWORD PTR [rip+0xffffffffffff950b]        # 208d32 <__unnamed_49>
  20f827:	48 89 55 aa          	mov    QWORD PTR [rbp-0x56],rdx
  20f82b:	44 8b 05 08 95 ff ff 	mov    r8d,DWORD PTR [rip+0xffffffffffff9508]        # 208d3a <__unnamed_49+0x8>
  20f832:	44 89 45 b2          	mov    DWORD PTR [rbp-0x4e],r8d
  20f836:	66 44 8b 0d 00 95 ff 	mov    r9w,WORD PTR [rip+0xffffffffffff9500]        # 208d3e <__unnamed_49+0xc>
  20f83d:	ff 
  20f83e:	66 44 89 4d b6       	mov    WORD PTR [rbp-0x4a],r9w
            var fixed_buffer_mem: [proc_file_path.len + 1]u8 = undefined;
  20f843:	48 8b 15 f6 94 ff ff 	mov    rdx,QWORD PTR [rip+0xffffffffffff94f6]        # 208d40 <__unnamed_50>
  20f84a:	48 89 55 9b          	mov    QWORD PTR [rbp-0x65],rdx
  20f84e:	44 8b 05 f3 94 ff ff 	mov    r8d,DWORD PTR [rip+0xffffffffffff94f3]        # 208d48 <__unnamed_50+0x8>
  20f855:	44 89 45 a3          	mov    DWORD PTR [rbp-0x5d],r8d
  20f859:	66 44 8b 0d eb 94 ff 	mov    r9w,WORD PTR [rip+0xffffffffffff94eb]        # 208d4c <__unnamed_50+0xc>
  20f860:	ff 
  20f861:	66 44 89 4d a7       	mov    WORD PTR [rbp-0x59],r9w
  20f866:	44 8a 15 e1 94 ff ff 	mov    r10b,BYTE PTR [rip+0xffffffffffff94e1]        # 208d4e <__unnamed_50+0xe>
  20f86d:	44 88 55 a9          	mov    BYTE PTR [rbp-0x57],r10b
            var fixed_allocator = std.heap.FixedBufferAllocator.init(fixed_buffer_mem[0..]);
  20f871:	f6 c1 01             	test   cl,0x1
  20f874:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  20f87b:	48 89 b5 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rsi
  20f882:	48 89 bd 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdi
  20f889:	75 40                	jne    20f8cb <openSelfExe+0xbb>
  20f88b:	eb 2e                	jmp    20f8bb <openSelfExe+0xab>
            return os.File.openRead(&fixed_allocator.allocator, proc_file_path);
  20f88d:	48 8b bd 58 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  20f894:	e8 f7 c3 ff ff       	call   20bc90 <__zig_return_error>
  20f899:	eb 02                	jmp    20f89d <openSelfExe+0x8d>
  20f89b:	eb 00                	jmp    20f89d <openSelfExe+0x8d>
  20f89d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  20f8a1:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
  20f8a8:	48 89 01             	mov    QWORD PTR [rcx],rax
  20f8ab:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  20f8b2:	48 81 c4 d0 00 00 00 	add    rsp,0xd0
  20f8b9:	5d                   	pop    rbp
  20f8ba:	c3                   	ret    
  20f8bb:	48 8d 3d 16 3b 03 00 	lea    rdi,[rip+0x33b16]        # 2433d8 <__unnamed_20>
  20f8c2:	31 c0                	xor    eax,eax
  20f8c4:	89 c6                	mov    esi,eax
            var fixed_allocator = std.heap.FixedBufferAllocator.init(fixed_buffer_mem[0..]);
  20f8c6:	e8 35 bd ff ff       	call   20b600 <panic>
  20f8cb:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  20f8cf:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
  20f8d3:	48 8d 45 9b          	lea    rax,[rbp-0x65]
  20f8d7:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  20f8db:	48 c7 45 f8 0f 00 00 	mov    QWORD PTR [rbp-0x8],0xf
  20f8e2:	00 
  20f8e3:	e8 68 36 00 00       	call   212f50 <FixedBufferAllocator_init>
  20f8e8:	48 8d 7d b8          	lea    rdi,[rbp-0x48]
  20f8ec:	48 8d 0d 6d 3c 03 00 	lea    rcx,[rip+0x33c6d]        # 243560 <__unnamed_51>
  20f8f3:	48 8d 85 68 ff ff ff 	lea    rax,[rbp-0x98]
  20f8fa:	ba 30 00 00 00       	mov    edx,0x30
  20f8ff:	48 8d 75 c0          	lea    rsi,[rbp-0x40]
  20f903:	49 89 c0             	mov    r8,rax
  20f906:	48 89 bd 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdi
  20f90d:	4c 89 c7             	mov    rdi,r8
  20f910:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  20f917:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  20f91e:	e8 7d 4f 02 00       	call   2348a0 <memcpy>
            return os.File.openRead(&fixed_allocator.allocator, proc_file_path);
  20f923:	48 8b bd 48 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb8]
  20f92a:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  20f931:	48 8b 95 40 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc0]
  20f938:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
  20f93f:	e8 7c 36 00 00       	call   212fc0 <File_openRead>
  20f944:	66 83 7d b8 00       	cmp    WORD PTR [rbp-0x48],0x0
  20f949:	0f 85 3e ff ff ff    	jne    20f88d <openSelfExe+0x7d>
  20f94f:	e9 47 ff ff ff       	jmp    20f89b <openSelfExe+0x8b>
  20f954:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  20f95b:	00 00 00 00 00 

000000000020f960 <Allocator_destroy>:
        const slice = try self.alloc(T, 1);
        return &slice[0];
    }

    /// `ptr` should be the return value of `create`
    pub fn destroy(self: *Allocator, ptr: var) void {
  20f960:	55                   	push   rbp
  20f961:	48 89 e5             	mov    rbp,rsp
  20f964:	48 83 ec 40          	sub    rsp,0x40
  20f968:	b0 01                	mov    al,0x1
  20f96a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  20f96e:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
        const non_const_ptr = @intToPtr([*]u8, @ptrToInt(ptr));
  20f972:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  20f976:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
        self.freeFn(self, non_const_ptr[0..@sizeOf(@typeOf(ptr).Child)]);
  20f97a:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  20f97e:	48 8b 76 10          	mov    rsi,QWORD PTR [rsi+0x10]
  20f982:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  20f986:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  20f98a:	a8 01                	test   al,0x1
  20f98c:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  20f990:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  20f994:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
  20f998:	75 10                	jne    20f9aa <Allocator_destroy+0x4a>
  20f99a:	48 8d 3d 37 3a 03 00 	lea    rdi,[rip+0x33a37]        # 2433d8 <__unnamed_20>
  20f9a1:	31 c0                	xor    eax,eax
  20f9a3:	89 c6                	mov    esi,eax
  20f9a5:	e8 56 bc ff ff       	call   20b600 <panic>
  20f9aa:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
  20f9ae:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  20f9b2:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  20f9b6:	48 c7 45 f8 c8 00 00 	mov    QWORD PTR [rbp-0x8],0xc8
  20f9bd:	00 
  20f9be:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  20f9c2:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  20f9c6:	ff d1                	call   rcx
    pub fn destroy(self: *Allocator, ptr: var) void {
  20f9c8:	48 83 c4 40          	add    rsp,0x40
  20f9cc:	5d                   	pop    rbp
  20f9cd:	c3                   	ret    
  20f9ce:	66 90                	xchg   ax,ax

000000000020f9d0 <Elf_openFile>:
        try elf.openFile(allocator, *elf.prealloc_file);
        elf.auto_close_stream = true;
    }

    /// Call close when done.
    pub fn openFile(elf: *Elf, allocator: *mem.Allocator, file: *os.File) !void {
  20f9d0:	55                   	push   rbp
  20f9d1:	48 89 e5             	mov    rbp,rsp
  20f9d4:	48 81 ec 20 09 00 00 	sub    rsp,0x920
  20f9db:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  20f9df:	48 89 b5 18 fc ff ff 	mov    QWORD PTR [rbp-0x3e8],rsi
  20f9e6:	48 89 95 10 fc ff ff 	mov    QWORD PTR [rbp-0x3f0],rdx
  20f9ed:	48 89 8d 08 fc ff ff 	mov    QWORD PTR [rbp-0x3f8],rcx
        elf.allocator = allocator;
  20f9f4:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  20f9fb:	48 8b 95 10 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x3f0]
  20fa02:	48 89 51 48          	mov    QWORD PTR [rcx+0x48],rdx
        elf.in_file = file;
  20fa06:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  20fa0d:	48 8b 95 08 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x3f8]
  20fa14:	48 89 11             	mov    QWORD PTR [rcx],rdx
        elf.auto_close_stream = false;
  20fa17:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  20fa1e:	c6 41 08 00          	mov    BYTE PTR [rcx+0x8],0x0

        var file_stream = io.FileInStream.init(elf.in_file);
  20fa22:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  20fa29:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  20fa2c:	48 89 bd 70 fb ff ff 	mov    QWORD PTR [rbp-0x490],rdi
  20fa33:	48 89 c7             	mov    rdi,rax
  20fa36:	e8 f5 3e 00 00       	call   213930 <FileInStream_init>
  20fa3b:	41 b0 01             	mov    r8b,0x1
  20fa3e:	48 8d 85 f8 fb ff ff 	lea    rax,[rbp-0x408]
  20fa45:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  20fa49:	48 89 8d f8 fb ff ff 	mov    QWORD PTR [rbp-0x408],rcx
  20fa50:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  20fa54:	48 89 8d 00 fc ff ff 	mov    QWORD PTR [rbp-0x400],rcx
        const in = &file_stream.stream;
  20fa5b:	48 83 c0 08          	add    rax,0x8
  20fa5f:	48 89 85 f0 fb ff ff 	mov    QWORD PTR [rbp-0x410],rax

        var magic: [4]u8 = undefined;
  20fa66:	44 8b 0d b3 ae ff ff 	mov    r9d,DWORD PTR [rip+0xffffffffffffaeb3]        # 20a920 <__unnamed_37>
  20fa6d:	44 89 8d ec fb ff ff 	mov    DWORD PTR [rbp-0x414],r9d
        try in.readNoEof(magic[0..]);
  20fa74:	48 8b b5 f0 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x410]
  20fa7b:	41 f6 c0 01          	test   r8b,0x1
  20fa7f:	48 89 b5 68 fb ff ff 	mov    QWORD PTR [rbp-0x498],rsi
  20fa86:	0f 85 a2 22 00 00    	jne    211d2e <Elf_openFile+0x235e>
  20fa8c:	e9 8d 22 00 00       	jmp    211d1e <Elf_openFile+0x234e>
  20fa91:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  20fa95:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20fa9c:	66 89 85 66 fb ff ff 	mov    WORD PTR [rbp-0x49a],ax
  20faa3:	e8 e8 c1 ff ff       	call   20bc90 <__zig_return_error>
  20faa8:	66 8b 85 66 fb ff ff 	mov    ax,WORD PTR [rbp-0x49a]
  20faaf:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20fab6:	5d                   	pop    rbp
  20fab7:	c3                   	ret    
  20fab8:	48 8d 85 ec fb ff ff 	lea    rax,[rbp-0x414]
        if (!mem.eql(u8, magic, "\x7fELF")) return error.InvalidFormat;
  20fabf:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  20fac3:	48 c7 45 d0 04 00 00 	mov    QWORD PTR [rbp-0x30],0x4
  20faca:	00 
  20facb:	48 8d 35 be 3a 03 00 	lea    rsi,[rip+0x33abe]        # 243590 <__unnamed_53>
  20fad2:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  20fad6:	e8 25 3f 00 00       	call   213a00 <eql>
  20fadb:	88 c1                	mov    cl,al
  20fadd:	a8 01                	test   al,0x1
  20fadf:	88 8d 65 fb ff ff    	mov    BYTE PTR [rbp-0x49b],cl
  20fae5:	75 1b                	jne    20fb02 <Elf_openFile+0x132>
  20fae7:	eb 00                	jmp    20fae9 <Elf_openFile+0x119>
  20fae9:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20faf0:	e8 9b c1 ff ff       	call   20bc90 <__zig_return_error>
  20faf5:	66 b8 21 00          	mov    ax,0x21
  20faf9:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20fb00:	5d                   	pop    rbp
  20fb01:	c3                   	ret    
  20fb02:	eb 00                	jmp    20fb04 <Elf_openFile+0x134>
  20fb04:	48 8d 7d c0          	lea    rdi,[rbp-0x40]

        elf.is_64 = switch (try in.readByte()) {
  20fb08:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  20fb0f:	48 83 c0 09          	add    rax,0x9
  20fb13:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  20fb1a:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  20fb21:	48 89 85 58 fb ff ff 	mov    QWORD PTR [rbp-0x4a8],rax
  20fb28:	e8 b3 3f 00 00       	call   213ae0 <InStream(ReadError)_readByte>
  20fb2d:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  20fb32:	74 27                	je     20fb5b <Elf_openFile+0x18b>
  20fb34:	66 8b 45 c0          	mov    ax,WORD PTR [rbp-0x40]
  20fb38:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20fb3f:	66 89 85 56 fb ff ff 	mov    WORD PTR [rbp-0x4aa],ax
  20fb46:	e8 45 c1 ff ff       	call   20bc90 <__zig_return_error>
  20fb4b:	66 8b 85 56 fb ff ff 	mov    ax,WORD PTR [rbp-0x4aa]
  20fb52:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20fb59:	5d                   	pop    rbp
  20fb5a:	c3                   	ret    
  20fb5b:	8a 45 c2             	mov    al,BYTE PTR [rbp-0x3e]
  20fb5e:	88 c1                	mov    cl,al
  20fb60:	80 e9 01             	sub    cl,0x1
  20fb63:	88 85 55 fb ff ff    	mov    BYTE PTR [rbp-0x4ab],al
  20fb69:	88 8d 54 fb ff ff    	mov    BYTE PTR [rbp-0x4ac],cl
  20fb6f:	74 2d                	je     20fb9e <Elf_openFile+0x1ce>
  20fb71:	eb 00                	jmp    20fb73 <Elf_openFile+0x1a3>
  20fb73:	8a 85 55 fb ff ff    	mov    al,BYTE PTR [rbp-0x4ab]
  20fb79:	2c 02                	sub    al,0x2
  20fb7b:	88 85 53 fb ff ff    	mov    BYTE PTR [rbp-0x4ad],al
  20fb81:	74 27                	je     20fbaa <Elf_openFile+0x1da>
  20fb83:	eb 00                	jmp    20fb85 <Elf_openFile+0x1b5>
            1 => false,
            2 => true,
            else => return error.InvalidFormat,
  20fb85:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20fb8c:	e8 ff c0 ff ff       	call   20bc90 <__zig_return_error>
  20fb91:	66 b8 21 00          	mov    ax,0x21
  20fb95:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20fb9c:	5d                   	pop    rbp
  20fb9d:	c3                   	ret    
  20fb9e:	31 c0                	xor    eax,eax
  20fba0:	88 c1                	mov    cl,al
        elf.is_64 = switch (try in.readByte()) {
  20fba2:	88 8d 52 fb ff ff    	mov    BYTE PTR [rbp-0x4ae],cl
  20fba8:	eb 0a                	jmp    20fbb4 <Elf_openFile+0x1e4>
  20fbaa:	b0 01                	mov    al,0x1
  20fbac:	88 85 52 fb ff ff    	mov    BYTE PTR [rbp-0x4ae],al
  20fbb2:	eb 00                	jmp    20fbb4 <Elf_openFile+0x1e4>
  20fbb4:	8a 85 52 fb ff ff    	mov    al,BYTE PTR [rbp-0x4ae]
  20fbba:	48 8d 7d b0          	lea    rdi,[rbp-0x50]
  20fbbe:	24 01                	and    al,0x1
  20fbc0:	48 8b 8d 58 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x4a8]
  20fbc7:	88 01                	mov    BYTE PTR [rcx],al
        };

        elf.endian = switch (try in.readByte()) {
  20fbc9:	48 8b 95 18 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x3e8]
  20fbd0:	48 83 c2 0a          	add    rdx,0xa
  20fbd4:	48 8b b5 f0 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x410]
  20fbdb:	4c 8b 85 70 fb ff ff 	mov    r8,QWORD PTR [rbp-0x490]
  20fbe2:	48 89 b5 48 fb ff ff 	mov    QWORD PTR [rbp-0x4b8],rsi
  20fbe9:	4c 89 c6             	mov    rsi,r8
  20fbec:	4c 8b 8d 48 fb ff ff 	mov    r9,QWORD PTR [rbp-0x4b8]
  20fbf3:	48 89 95 40 fb ff ff 	mov    QWORD PTR [rbp-0x4c0],rdx
  20fbfa:	4c 89 ca             	mov    rdx,r9
  20fbfd:	e8 de 3e 00 00       	call   213ae0 <InStream(ReadError)_readByte>
  20fc02:	66 83 7d b0 00       	cmp    WORD PTR [rbp-0x50],0x0
  20fc07:	74 27                	je     20fc30 <Elf_openFile+0x260>
  20fc09:	66 8b 45 b0          	mov    ax,WORD PTR [rbp-0x50]
  20fc0d:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20fc14:	66 89 85 3e fb ff ff 	mov    WORD PTR [rbp-0x4c2],ax
  20fc1b:	e8 70 c0 ff ff       	call   20bc90 <__zig_return_error>
  20fc20:	66 8b 85 3e fb ff ff 	mov    ax,WORD PTR [rbp-0x4c2]
  20fc27:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20fc2e:	5d                   	pop    rbp
  20fc2f:	c3                   	ret    
  20fc30:	8a 45 b2             	mov    al,BYTE PTR [rbp-0x4e]
  20fc33:	88 c1                	mov    cl,al
  20fc35:	80 e9 01             	sub    cl,0x1
  20fc38:	88 85 3d fb ff ff    	mov    BYTE PTR [rbp-0x4c3],al
  20fc3e:	88 8d 3c fb ff ff    	mov    BYTE PTR [rbp-0x4c4],cl
  20fc44:	74 2d                	je     20fc73 <Elf_openFile+0x2a3>
  20fc46:	eb 00                	jmp    20fc48 <Elf_openFile+0x278>
  20fc48:	8a 85 3d fb ff ff    	mov    al,BYTE PTR [rbp-0x4c3]
  20fc4e:	2c 02                	sub    al,0x2
  20fc50:	88 85 3b fb ff ff    	mov    BYTE PTR [rbp-0x4c5],al
  20fc56:	74 25                	je     20fc7d <Elf_openFile+0x2ad>
  20fc58:	eb 00                	jmp    20fc5a <Elf_openFile+0x28a>
            1 => builtin.Endian.Little,
            2 => builtin.Endian.Big,
            else => return error.InvalidFormat,
  20fc5a:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20fc61:	e8 2a c0 ff ff       	call   20bc90 <__zig_return_error>
  20fc66:	66 b8 21 00          	mov    ax,0x21
  20fc6a:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20fc71:	5d                   	pop    rbp
  20fc72:	c3                   	ret    
  20fc73:	b0 01                	mov    al,0x1
        elf.endian = switch (try in.readByte()) {
  20fc75:	88 85 3a fb ff ff    	mov    BYTE PTR [rbp-0x4c6],al
  20fc7b:	eb 0c                	jmp    20fc89 <Elf_openFile+0x2b9>
  20fc7d:	31 c0                	xor    eax,eax
  20fc7f:	88 c1                	mov    cl,al
  20fc81:	88 8d 3a fb ff ff    	mov    BYTE PTR [rbp-0x4c6],cl
  20fc87:	eb 00                	jmp    20fc89 <Elf_openFile+0x2b9>
  20fc89:	8a 85 3a fb ff ff    	mov    al,BYTE PTR [rbp-0x4c6]
  20fc8f:	48 8d 7d a0          	lea    rdi,[rbp-0x60]
  20fc93:	24 01                	and    al,0x1
  20fc95:	48 8b 8d 40 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x4c0]
  20fc9c:	88 01                	mov    BYTE PTR [rcx],al
        };

        const version_byte = try in.readByte();
  20fc9e:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  20fca5:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  20fcac:	e8 2f 3e 00 00       	call   213ae0 <InStream(ReadError)_readByte>
  20fcb1:	66 83 7d a0 00       	cmp    WORD PTR [rbp-0x60],0x0
  20fcb6:	74 27                	je     20fcdf <Elf_openFile+0x30f>
  20fcb8:	66 8b 45 a0          	mov    ax,WORD PTR [rbp-0x60]
  20fcbc:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20fcc3:	66 89 85 38 fb ff ff 	mov    WORD PTR [rbp-0x4c8],ax
  20fcca:	e8 c1 bf ff ff       	call   20bc90 <__zig_return_error>
  20fccf:	66 8b 85 38 fb ff ff 	mov    ax,WORD PTR [rbp-0x4c8]
  20fcd6:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20fcdd:	5d                   	pop    rbp
  20fcde:	c3                   	ret    
  20fcdf:	8a 45 a2             	mov    al,BYTE PTR [rbp-0x5e]
  20fce2:	88 85 eb fb ff ff    	mov    BYTE PTR [rbp-0x415],al
        if (version_byte != 1) return error.InvalidFormat;
  20fce8:	80 bd eb fb ff ff 01 	cmp    BYTE PTR [rbp-0x415],0x1
  20fcef:	74 19                	je     20fd0a <Elf_openFile+0x33a>
  20fcf1:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20fcf8:	e8 93 bf ff ff       	call   20bc90 <__zig_return_error>
  20fcfd:	66 b8 21 00          	mov    ax,0x21
  20fd01:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20fd08:	5d                   	pop    rbp
  20fd09:	c3                   	ret    
  20fd0a:	eb 00                	jmp    20fd0c <Elf_openFile+0x33c>
  20fd0c:	b8 09 00 00 00       	mov    eax,0x9
  20fd11:	89 c2                	mov    edx,eax

        // skip over padding
        try elf.in_file.seekForward(9);
  20fd13:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  20fd1a:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  20fd1d:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20fd24:	e8 87 3e 00 00       	call   213bb0 <File_seekForward>
  20fd29:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  20fd2d:	66 83 7d 96 00       	cmp    WORD PTR [rbp-0x6a],0x0
  20fd32:	74 27                	je     20fd5b <Elf_openFile+0x38b>
  20fd34:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  20fd38:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20fd3f:	66 89 85 36 fb ff ff 	mov    WORD PTR [rbp-0x4ca],ax
  20fd46:	e8 45 bf ff ff       	call   20bc90 <__zig_return_error>
  20fd4b:	66 8b 85 36 fb ff ff 	mov    ax,WORD PTR [rbp-0x4ca]
  20fd52:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20fd59:	5d                   	pop    rbp
  20fd5a:	c3                   	ret    
  20fd5b:	48 8d 45 90          	lea    rax,[rbp-0x70]

        elf.file_type = switch (try in.readInt(elf.endian, u16)) {
  20fd5f:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  20fd66:	48 83 c1 0b          	add    rcx,0xb
  20fd6a:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  20fd71:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  20fd78:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  20fd7c:	44 0f b6 c7          	movzx  r8d,dil
  20fd80:	48 8d 7d 90          	lea    rdi,[rbp-0x70]
  20fd84:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  20fd8b:	48 89 8d 28 fb ff ff 	mov    QWORD PTR [rbp-0x4d8],rcx
  20fd92:	44 89 c1             	mov    ecx,r8d
  20fd95:	48 89 85 20 fb ff ff 	mov    QWORD PTR [rbp-0x4e0],rax
  20fd9c:	e8 2f 3f 00 00       	call   213cd0 <InStream(ReadError)_readInt>
  20fda1:	66 83 7d 90 00       	cmp    WORD PTR [rbp-0x70],0x0
  20fda6:	74 27                	je     20fdcf <Elf_openFile+0x3ff>
  20fda8:	66 8b 45 90          	mov    ax,WORD PTR [rbp-0x70]
  20fdac:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20fdb3:	66 89 85 1e fb ff ff 	mov    WORD PTR [rbp-0x4e2],ax
  20fdba:	e8 d1 be ff ff       	call   20bc90 <__zig_return_error>
  20fdbf:	66 8b 85 1e fb ff ff 	mov    ax,WORD PTR [rbp-0x4e2]
  20fdc6:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20fdcd:	5d                   	pop    rbp
  20fdce:	c3                   	ret    
  20fdcf:	0f b7 45 92          	movzx  eax,WORD PTR [rbp-0x6e]
  20fdd3:	83 c0 ff             	add    eax,0xffffffff
  20fdd6:	66 89 c1             	mov    cx,ax
  20fdd9:	0f b7 c1             	movzx  eax,cx
  20fddc:	89 c2                	mov    edx,eax
  20fdde:	83 e8 03             	sub    eax,0x3
  20fde1:	48 89 95 10 fb ff ff 	mov    QWORD PTR [rbp-0x4f0],rdx
  20fde8:	89 85 0c fb ff ff    	mov    DWORD PTR [rbp-0x4f4],eax
  20fdee:	77 17                	ja     20fe07 <Elf_openFile+0x437>
  20fdf0:	48 8d 05 d1 0e ff ff 	lea    rax,[rip+0xffffffffffff0ed1]        # 200cc8 <__unnamed_181+0x10>
  20fdf7:	48 8b 8d 10 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x4f0]
  20fdfe:	48 63 14 88          	movsxd rdx,DWORD PTR [rax+rcx*4]
  20fe02:	48 01 c2             	add    rdx,rax
  20fe05:	ff e2                	jmp    rdx
            1 => FileType.Relocatable,
            2 => FileType.Executable,
            3 => FileType.Shared,
            4 => FileType.Core,
            else => return error.InvalidFormat,
  20fe07:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20fe0e:	e8 7d be ff ff       	call   20bc90 <__zig_return_error>
  20fe13:	66 b8 21 00          	mov    ax,0x21
  20fe17:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20fe1e:	5d                   	pop    rbp
  20fe1f:	c3                   	ret    
  20fe20:	31 c0                	xor    eax,eax
  20fe22:	88 c1                	mov    cl,al
        elf.file_type = switch (try in.readInt(elf.endian, u16)) {
  20fe24:	88 8d 0b fb ff ff    	mov    BYTE PTR [rbp-0x4f5],cl
  20fe2a:	eb 1e                	jmp    20fe4a <Elf_openFile+0x47a>
  20fe2c:	b0 01                	mov    al,0x1
  20fe2e:	88 85 0b fb ff ff    	mov    BYTE PTR [rbp-0x4f5],al
  20fe34:	eb 14                	jmp    20fe4a <Elf_openFile+0x47a>
  20fe36:	b0 02                	mov    al,0x2
  20fe38:	88 85 0b fb ff ff    	mov    BYTE PTR [rbp-0x4f5],al
  20fe3e:	eb 0a                	jmp    20fe4a <Elf_openFile+0x47a>
  20fe40:	b0 03                	mov    al,0x3
  20fe42:	88 85 0b fb ff ff    	mov    BYTE PTR [rbp-0x4f5],al
  20fe48:	eb 00                	jmp    20fe4a <Elf_openFile+0x47a>
  20fe4a:	8a 85 0b fb ff ff    	mov    al,BYTE PTR [rbp-0x4f5]
  20fe50:	48 8d 4d 80          	lea    rcx,[rbp-0x80]
  20fe54:	24 03                	and    al,0x3
  20fe56:	48 8b 95 28 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x4d8]
  20fe5d:	88 02                	mov    BYTE PTR [rdx],al
        };

        elf.arch = switch (try in.readInt(elf.endian, u16)) {
  20fe5f:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  20fe66:	48 83 c6 0c          	add    rsi,0xc
  20fe6a:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  20fe71:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  20fe78:	8a 47 0a             	mov    al,BYTE PTR [rdi+0xa]
  20fe7b:	44 0f b6 c0          	movzx  r8d,al
  20fe7f:	48 8d 7d 80          	lea    rdi,[rbp-0x80]
  20fe83:	4c 8b 8d 70 fb ff ff 	mov    r9,QWORD PTR [rbp-0x490]
  20fe8a:	48 89 b5 00 fb ff ff 	mov    QWORD PTR [rbp-0x500],rsi
  20fe91:	4c 89 ce             	mov    rsi,r9
  20fe94:	48 89 8d f8 fa ff ff 	mov    QWORD PTR [rbp-0x508],rcx
  20fe9b:	44 89 c1             	mov    ecx,r8d
  20fe9e:	e8 2d 3e 00 00       	call   213cd0 <InStream(ReadError)_readInt>
  20fea3:	66 83 7d 80 00       	cmp    WORD PTR [rbp-0x80],0x0
  20fea8:	74 27                	je     20fed1 <Elf_openFile+0x501>
  20feaa:	66 8b 45 80          	mov    ax,WORD PTR [rbp-0x80]
  20feae:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20feb5:	66 89 85 f6 fa ff ff 	mov    WORD PTR [rbp-0x50a],ax
  20febc:	e8 cf bd ff ff       	call   20bc90 <__zig_return_error>
  20fec1:	66 8b 85 f6 fa ff ff 	mov    ax,WORD PTR [rbp-0x50a]
  20fec8:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20fecf:	5d                   	pop    rbp
  20fed0:	c3                   	ret    
  20fed1:	0f b7 45 82          	movzx  eax,WORD PTR [rbp-0x7e]
  20fed5:	66 89 c1             	mov    cx,ax
  20fed8:	83 e8 02             	sub    eax,0x2
  20fedb:	66 89 8d f4 fa ff ff 	mov    WORD PTR [rbp-0x50c],cx
  20fee2:	89 85 f0 fa ff ff    	mov    DWORD PTR [rbp-0x510],eax
  20fee8:	0f 84 ee 00 00 00    	je     20ffdc <Elf_openFile+0x60c>
  20feee:	eb 00                	jmp    20fef0 <Elf_openFile+0x520>
  20fef0:	66 8b 85 f4 fa ff ff 	mov    ax,WORD PTR [rbp-0x50c]
  20fef7:	0f b7 c8             	movzx  ecx,ax
  20fefa:	83 e9 03             	sub    ecx,0x3
  20fefd:	89 8d ec fa ff ff    	mov    DWORD PTR [rbp-0x514],ecx
  20ff03:	0f 84 df 00 00 00    	je     20ffe8 <Elf_openFile+0x618>
  20ff09:	eb 00                	jmp    20ff0b <Elf_openFile+0x53b>
  20ff0b:	66 8b 85 f4 fa ff ff 	mov    ax,WORD PTR [rbp-0x50c]
  20ff12:	0f b7 c8             	movzx  ecx,ax
  20ff15:	83 e9 08             	sub    ecx,0x8
  20ff18:	89 8d e8 fa ff ff    	mov    DWORD PTR [rbp-0x518],ecx
  20ff1e:	0f 84 ce 00 00 00    	je     20fff2 <Elf_openFile+0x622>
  20ff24:	eb 00                	jmp    20ff26 <Elf_openFile+0x556>
  20ff26:	66 8b 85 f4 fa ff ff 	mov    ax,WORD PTR [rbp-0x50c]
  20ff2d:	0f b7 c8             	movzx  ecx,ax
  20ff30:	83 e9 14             	sub    ecx,0x14
  20ff33:	89 8d e4 fa ff ff    	mov    DWORD PTR [rbp-0x51c],ecx
  20ff39:	0f 84 bd 00 00 00    	je     20fffc <Elf_openFile+0x62c>
  20ff3f:	eb 00                	jmp    20ff41 <Elf_openFile+0x571>
  20ff41:	66 8b 85 f4 fa ff ff 	mov    ax,WORD PTR [rbp-0x50c]
  20ff48:	0f b7 c8             	movzx  ecx,ax
  20ff4b:	83 e9 28             	sub    ecx,0x28
  20ff4e:	89 8d e0 fa ff ff    	mov    DWORD PTR [rbp-0x520],ecx
  20ff54:	0f 84 ac 00 00 00    	je     210006 <Elf_openFile+0x636>
  20ff5a:	eb 00                	jmp    20ff5c <Elf_openFile+0x58c>
  20ff5c:	66 8b 85 f4 fa ff ff 	mov    ax,WORD PTR [rbp-0x50c]
  20ff63:	0f b7 c8             	movzx  ecx,ax
  20ff66:	83 e9 2a             	sub    ecx,0x2a
  20ff69:	89 8d dc fa ff ff    	mov    DWORD PTR [rbp-0x524],ecx
  20ff6f:	0f 84 9b 00 00 00    	je     210010 <Elf_openFile+0x640>
  20ff75:	eb 00                	jmp    20ff77 <Elf_openFile+0x5a7>
  20ff77:	66 8b 85 f4 fa ff ff 	mov    ax,WORD PTR [rbp-0x50c]
  20ff7e:	0f b7 c8             	movzx  ecx,ax
  20ff81:	83 e9 32             	sub    ecx,0x32
  20ff84:	89 8d d8 fa ff ff    	mov    DWORD PTR [rbp-0x528],ecx
  20ff8a:	0f 84 8a 00 00 00    	je     21001a <Elf_openFile+0x64a>
  20ff90:	eb 00                	jmp    20ff92 <Elf_openFile+0x5c2>
  20ff92:	66 8b 85 f4 fa ff ff 	mov    ax,WORD PTR [rbp-0x50c]
  20ff99:	0f b7 c8             	movzx  ecx,ax
  20ff9c:	83 e9 3e             	sub    ecx,0x3e
  20ff9f:	89 8d d4 fa ff ff    	mov    DWORD PTR [rbp-0x52c],ecx
  20ffa5:	74 7d                	je     210024 <Elf_openFile+0x654>
  20ffa7:	eb 00                	jmp    20ffa9 <Elf_openFile+0x5d9>
  20ffa9:	66 8b 85 f4 fa ff ff 	mov    ax,WORD PTR [rbp-0x50c]
  20ffb0:	0f b7 c8             	movzx  ecx,ax
  20ffb3:	81 e9 b7 00 00 00    	sub    ecx,0xb7
  20ffb9:	89 8d d0 fa ff ff    	mov    DWORD PTR [rbp-0x530],ecx
  20ffbf:	74 6d                	je     21002e <Elf_openFile+0x65e>
  20ffc1:	eb 00                	jmp    20ffc3 <Elf_openFile+0x5f3>
            0x28 => Arch.Arm,
            0x2A => Arch.SuperH,
            0x32 => Arch.IA_64,
            0x3E => Arch.x86_64,
            0xb7 => Arch.AArch64,
            else => return error.InvalidFormat,
  20ffc3:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  20ffca:	e8 c1 bc ff ff       	call   20bc90 <__zig_return_error>
  20ffcf:	66 b8 21 00          	mov    ax,0x21
  20ffd3:	48 81 c4 20 09 00 00 	add    rsp,0x920
  20ffda:	5d                   	pop    rbp
  20ffdb:	c3                   	ret    
  20ffdc:	31 c0                	xor    eax,eax
  20ffde:	88 c1                	mov    cl,al
        elf.arch = switch (try in.readInt(elf.endian, u16)) {
  20ffe0:	88 8d cf fa ff ff    	mov    BYTE PTR [rbp-0x531],cl
  20ffe6:	eb 50                	jmp    210038 <Elf_openFile+0x668>
  20ffe8:	b0 01                	mov    al,0x1
  20ffea:	88 85 cf fa ff ff    	mov    BYTE PTR [rbp-0x531],al
  20fff0:	eb 46                	jmp    210038 <Elf_openFile+0x668>
  20fff2:	b0 02                	mov    al,0x2
  20fff4:	88 85 cf fa ff ff    	mov    BYTE PTR [rbp-0x531],al
  20fffa:	eb 3c                	jmp    210038 <Elf_openFile+0x668>
  20fffc:	b0 03                	mov    al,0x3
  20fffe:	88 85 cf fa ff ff    	mov    BYTE PTR [rbp-0x531],al
  210004:	eb 32                	jmp    210038 <Elf_openFile+0x668>
  210006:	b0 04                	mov    al,0x4
  210008:	88 85 cf fa ff ff    	mov    BYTE PTR [rbp-0x531],al
  21000e:	eb 28                	jmp    210038 <Elf_openFile+0x668>
  210010:	b0 05                	mov    al,0x5
  210012:	88 85 cf fa ff ff    	mov    BYTE PTR [rbp-0x531],al
  210018:	eb 1e                	jmp    210038 <Elf_openFile+0x668>
  21001a:	b0 06                	mov    al,0x6
  21001c:	88 85 cf fa ff ff    	mov    BYTE PTR [rbp-0x531],al
  210022:	eb 14                	jmp    210038 <Elf_openFile+0x668>
  210024:	b0 07                	mov    al,0x7
  210026:	88 85 cf fa ff ff    	mov    BYTE PTR [rbp-0x531],al
  21002c:	eb 0a                	jmp    210038 <Elf_openFile+0x668>
  21002e:	b0 08                	mov    al,0x8
  210030:	88 85 cf fa ff ff    	mov    BYTE PTR [rbp-0x531],al
  210036:	eb 00                	jmp    210038 <Elf_openFile+0x668>
  210038:	8a 85 cf fa ff ff    	mov    al,BYTE PTR [rbp-0x531]
  21003e:	48 8d 8d 70 ff ff ff 	lea    rcx,[rbp-0x90]
  210045:	24 0f                	and    al,0xf
  210047:	48 8b 95 00 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x500]
  21004e:	88 02                	mov    BYTE PTR [rdx],al
        };

        const elf_version = try in.readInt(elf.endian, u32);
  210050:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  210057:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  21005e:	8a 46 0a             	mov    al,BYTE PTR [rsi+0xa]
  210061:	0f b6 f8             	movzx  edi,al
  210064:	48 8d b5 70 ff ff ff 	lea    rsi,[rbp-0x90]
  21006b:	89 bd c8 fa ff ff    	mov    DWORD PTR [rbp-0x538],edi
  210071:	48 89 f7             	mov    rdi,rsi
  210074:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  21007b:	44 8b 85 c8 fa ff ff 	mov    r8d,DWORD PTR [rbp-0x538]
  210082:	48 89 8d c0 fa ff ff 	mov    QWORD PTR [rbp-0x540],rcx
  210089:	44 89 c1             	mov    ecx,r8d
  21008c:	e8 4f 3d 00 00       	call   213de0 <InStream(ReadError)_readInt.32>
  210091:	66 83 bd 70 ff ff ff 	cmp    WORD PTR [rbp-0x90],0x0
  210098:	00 
  210099:	74 2a                	je     2100c5 <Elf_openFile+0x6f5>
  21009b:	66 8b 85 70 ff ff ff 	mov    ax,WORD PTR [rbp-0x90]
  2100a2:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2100a9:	66 89 85 be fa ff ff 	mov    WORD PTR [rbp-0x542],ax
  2100b0:	e8 db bb ff ff       	call   20bc90 <__zig_return_error>
  2100b5:	66 8b 85 be fa ff ff 	mov    ax,WORD PTR [rbp-0x542]
  2100bc:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2100c3:	5d                   	pop    rbp
  2100c4:	c3                   	ret    
  2100c5:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
  2100cb:	89 85 e4 fb ff ff    	mov    DWORD PTR [rbp-0x41c],eax
        if (elf_version != 1) return error.InvalidFormat;
  2100d1:	83 bd e4 fb ff ff 01 	cmp    DWORD PTR [rbp-0x41c],0x1
  2100d8:	74 19                	je     2100f3 <Elf_openFile+0x723>
  2100da:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2100e1:	e8 aa bb ff ff       	call   20bc90 <__zig_return_error>
  2100e6:	66 b8 21 00          	mov    ax,0x21
  2100ea:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2100f1:	5d                   	pop    rbp
  2100f2:	c3                   	ret    
  2100f3:	eb 00                	jmp    2100f5 <Elf_openFile+0x725>

        if (elf.is_64) {
  2100f5:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2100fc:	f6 40 09 01          	test   BYTE PTR [rax+0x9],0x1
  210100:	75 05                	jne    210107 <Elf_openFile+0x737>
  210102:	e9 b8 01 00 00       	jmp    2102bf <Elf_openFile+0x8ef>
  210107:	48 8d 85 58 ff ff ff 	lea    rax,[rbp-0xa8]
            elf.entry_addr = try in.readInt(elf.endian, u64);
  21010e:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  210115:	48 83 c1 10          	add    rcx,0x10
  210119:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  210120:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  210127:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  21012b:	44 0f b6 c7          	movzx  r8d,dil
  21012f:	48 8d bd 58 ff ff ff 	lea    rdi,[rbp-0xa8]
  210136:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  21013d:	48 89 8d b0 fa ff ff 	mov    QWORD PTR [rbp-0x550],rcx
  210144:	44 89 c1             	mov    ecx,r8d
  210147:	48 89 85 a8 fa ff ff 	mov    QWORD PTR [rbp-0x558],rax
  21014e:	e8 9d 3d 00 00       	call   213ef0 <InStream(ReadError)_readInt.33>
  210153:	66 83 bd 58 ff ff ff 	cmp    WORD PTR [rbp-0xa8],0x0
  21015a:	00 
  21015b:	74 2a                	je     210187 <Elf_openFile+0x7b7>
  21015d:	66 8b 85 58 ff ff ff 	mov    ax,WORD PTR [rbp-0xa8]
  210164:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  21016b:	66 89 85 a6 fa ff ff 	mov    WORD PTR [rbp-0x55a],ax
  210172:	e8 19 bb ff ff       	call   20bc90 <__zig_return_error>
  210177:	66 8b 85 a6 fa ff ff 	mov    ax,WORD PTR [rbp-0x55a]
  21017e:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210185:	5d                   	pop    rbp
  210186:	c3                   	ret    
  210187:	48 8d 85 38 ff ff ff 	lea    rax,[rbp-0xc8]
  21018e:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  210195:	48 8b 95 b0 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x550]
  21019c:	48 89 0a             	mov    QWORD PTR [rdx],rcx
            elf.program_header_offset = try in.readInt(elf.endian, u64);
  21019f:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  2101a6:	48 83 c1 18          	add    rcx,0x18
  2101aa:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  2101b1:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  2101b8:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  2101bc:	44 0f b6 c7          	movzx  r8d,dil
  2101c0:	48 8d bd 38 ff ff ff 	lea    rdi,[rbp-0xc8]
  2101c7:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  2101ce:	48 89 8d 98 fa ff ff 	mov    QWORD PTR [rbp-0x568],rcx
  2101d5:	44 89 c1             	mov    ecx,r8d
  2101d8:	48 89 85 90 fa ff ff 	mov    QWORD PTR [rbp-0x570],rax
  2101df:	e8 0c 3d 00 00       	call   213ef0 <InStream(ReadError)_readInt.33>
  2101e4:	66 83 bd 38 ff ff ff 	cmp    WORD PTR [rbp-0xc8],0x0
  2101eb:	00 
  2101ec:	74 2a                	je     210218 <Elf_openFile+0x848>
  2101ee:	66 8b 85 38 ff ff ff 	mov    ax,WORD PTR [rbp-0xc8]
  2101f5:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2101fc:	66 89 85 8e fa ff ff 	mov    WORD PTR [rbp-0x572],ax
  210203:	e8 88 ba ff ff       	call   20bc90 <__zig_return_error>
  210208:	66 8b 85 8e fa ff ff 	mov    ax,WORD PTR [rbp-0x572]
  21020f:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210216:	5d                   	pop    rbp
  210217:	c3                   	ret    
  210218:	48 8d 85 18 ff ff ff 	lea    rax,[rbp-0xe8]
  21021f:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  210226:	48 8b 95 98 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x568]
  21022d:	48 89 0a             	mov    QWORD PTR [rdx],rcx
            elf.section_header_offset = try in.readInt(elf.endian, u64);
  210230:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  210237:	48 83 c1 20          	add    rcx,0x20
  21023b:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  210242:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  210249:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  21024d:	44 0f b6 c7          	movzx  r8d,dil
  210251:	48 8d bd 18 ff ff ff 	lea    rdi,[rbp-0xe8]
  210258:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  21025f:	48 89 8d 80 fa ff ff 	mov    QWORD PTR [rbp-0x580],rcx
  210266:	44 89 c1             	mov    ecx,r8d
  210269:	48 89 85 78 fa ff ff 	mov    QWORD PTR [rbp-0x588],rax
  210270:	e8 7b 3c 00 00       	call   213ef0 <InStream(ReadError)_readInt.33>
  210275:	66 83 bd 18 ff ff ff 	cmp    WORD PTR [rbp-0xe8],0x0
  21027c:	00 
  21027d:	74 2a                	je     2102a9 <Elf_openFile+0x8d9>
  21027f:	66 8b 85 18 ff ff ff 	mov    ax,WORD PTR [rbp-0xe8]
  210286:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  21028d:	66 89 85 76 fa ff ff 	mov    WORD PTR [rbp-0x58a],ax
  210294:	e8 f7 b9 ff ff       	call   20bc90 <__zig_return_error>
  210299:	66 8b 85 76 fa ff ff 	mov    ax,WORD PTR [rbp-0x58a]
  2102a0:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2102a7:	5d                   	pop    rbp
  2102a8:	c3                   	ret    
  2102a9:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  2102b0:	48 8b 8d 80 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x580]
  2102b7:	48 89 01             	mov    QWORD PTR [rcx],rax
        if (elf.is_64) {
  2102ba:	e9 d8 01 00 00       	jmp    210497 <Elf_openFile+0xac7>
  2102bf:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
        } else {
            elf.entry_addr = u64(try in.readInt(elf.endian, u32));
  2102c6:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  2102cd:	48 83 c1 10          	add    rcx,0x10
  2102d1:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  2102d8:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  2102df:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  2102e3:	44 0f b6 c7          	movzx  r8d,dil
  2102e7:	48 8d bd 00 ff ff ff 	lea    rdi,[rbp-0x100]
  2102ee:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  2102f5:	48 89 8d 68 fa ff ff 	mov    QWORD PTR [rbp-0x598],rcx
  2102fc:	44 89 c1             	mov    ecx,r8d
  2102ff:	48 89 85 60 fa ff ff 	mov    QWORD PTR [rbp-0x5a0],rax
  210306:	e8 d5 3a 00 00       	call   213de0 <InStream(ReadError)_readInt.32>
  21030b:	66 83 bd 00 ff ff ff 	cmp    WORD PTR [rbp-0x100],0x0
  210312:	00 
  210313:	74 2a                	je     21033f <Elf_openFile+0x96f>
  210315:	66 8b 85 00 ff ff ff 	mov    ax,WORD PTR [rbp-0x100]
  21031c:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210323:	66 89 85 5e fa ff ff 	mov    WORD PTR [rbp-0x5a2],ax
  21032a:	e8 61 b9 ff ff       	call   20bc90 <__zig_return_error>
  21032f:	66 8b 85 5e fa ff ff 	mov    ax,WORD PTR [rbp-0x5a2]
  210336:	48 81 c4 20 09 00 00 	add    rsp,0x920
  21033d:	5d                   	pop    rbp
  21033e:	c3                   	ret    
  21033f:	48 8d 85 f0 fe ff ff 	lea    rax,[rbp-0x110]
  210346:	8b 8d 04 ff ff ff    	mov    ecx,DWORD PTR [rbp-0xfc]
  21034c:	89 ca                	mov    edx,ecx
  21034e:	48 8b b5 68 fa ff ff 	mov    rsi,QWORD PTR [rbp-0x598]
  210355:	48 89 16             	mov    QWORD PTR [rsi],rdx
            elf.program_header_offset = u64(try in.readInt(elf.endian, u32));
  210358:	48 8b 95 18 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x3e8]
  21035f:	48 83 c2 18          	add    rdx,0x18
  210363:	48 8b bd f0 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x410]
  21036a:	4c 8b 85 18 fc ff ff 	mov    r8,QWORD PTR [rbp-0x3e8]
  210371:	45 8a 48 0a          	mov    r9b,BYTE PTR [r8+0xa]
  210375:	41 0f b6 c9          	movzx  ecx,r9b
  210379:	4c 8d 85 f0 fe ff ff 	lea    r8,[rbp-0x110]
  210380:	48 89 bd 50 fa ff ff 	mov    QWORD PTR [rbp-0x5b0],rdi
  210387:	4c 89 c7             	mov    rdi,r8
  21038a:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  210391:	4c 8b 85 50 fa ff ff 	mov    r8,QWORD PTR [rbp-0x5b0]
  210398:	48 89 95 48 fa ff ff 	mov    QWORD PTR [rbp-0x5b8],rdx
  21039f:	4c 89 c2             	mov    rdx,r8
  2103a2:	48 89 85 40 fa ff ff 	mov    QWORD PTR [rbp-0x5c0],rax
  2103a9:	e8 32 3a 00 00       	call   213de0 <InStream(ReadError)_readInt.32>
  2103ae:	66 83 bd f0 fe ff ff 	cmp    WORD PTR [rbp-0x110],0x0
  2103b5:	00 
  2103b6:	74 2a                	je     2103e2 <Elf_openFile+0xa12>
  2103b8:	66 8b 85 f0 fe ff ff 	mov    ax,WORD PTR [rbp-0x110]
  2103bf:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2103c6:	66 89 85 3e fa ff ff 	mov    WORD PTR [rbp-0x5c2],ax
  2103cd:	e8 be b8 ff ff       	call   20bc90 <__zig_return_error>
  2103d2:	66 8b 85 3e fa ff ff 	mov    ax,WORD PTR [rbp-0x5c2]
  2103d9:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2103e0:	5d                   	pop    rbp
  2103e1:	c3                   	ret    
  2103e2:	48 8d 85 e0 fe ff ff 	lea    rax,[rbp-0x120]
  2103e9:	8b 8d f4 fe ff ff    	mov    ecx,DWORD PTR [rbp-0x10c]
  2103ef:	89 ca                	mov    edx,ecx
  2103f1:	48 8b b5 48 fa ff ff 	mov    rsi,QWORD PTR [rbp-0x5b8]
  2103f8:	48 89 16             	mov    QWORD PTR [rsi],rdx
            elf.section_header_offset = u64(try in.readInt(elf.endian, u32));
  2103fb:	48 8b 95 18 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x3e8]
  210402:	48 83 c2 20          	add    rdx,0x20
  210406:	48 8b bd f0 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x410]
  21040d:	4c 8b 85 18 fc ff ff 	mov    r8,QWORD PTR [rbp-0x3e8]
  210414:	45 8a 48 0a          	mov    r9b,BYTE PTR [r8+0xa]
  210418:	41 0f b6 c9          	movzx  ecx,r9b
  21041c:	4c 8d 85 e0 fe ff ff 	lea    r8,[rbp-0x120]
  210423:	48 89 bd 30 fa ff ff 	mov    QWORD PTR [rbp-0x5d0],rdi
  21042a:	4c 89 c7             	mov    rdi,r8
  21042d:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  210434:	4c 8b 85 30 fa ff ff 	mov    r8,QWORD PTR [rbp-0x5d0]
  21043b:	48 89 95 28 fa ff ff 	mov    QWORD PTR [rbp-0x5d8],rdx
  210442:	4c 89 c2             	mov    rdx,r8
  210445:	48 89 85 20 fa ff ff 	mov    QWORD PTR [rbp-0x5e0],rax
  21044c:	e8 8f 39 00 00       	call   213de0 <InStream(ReadError)_readInt.32>
  210451:	66 83 bd e0 fe ff ff 	cmp    WORD PTR [rbp-0x120],0x0
  210458:	00 
  210459:	74 2a                	je     210485 <Elf_openFile+0xab5>
  21045b:	66 8b 85 e0 fe ff ff 	mov    ax,WORD PTR [rbp-0x120]
  210462:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210469:	66 89 85 1e fa ff ff 	mov    WORD PTR [rbp-0x5e2],ax
  210470:	e8 1b b8 ff ff       	call   20bc90 <__zig_return_error>
  210475:	66 8b 85 1e fa ff ff 	mov    ax,WORD PTR [rbp-0x5e2]
  21047c:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210483:	5d                   	pop    rbp
  210484:	c3                   	ret    
  210485:	8b 85 e4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x11c]
  21048b:	89 c1                	mov    ecx,eax
  21048d:	48 8b 95 28 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x5d8]
  210494:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  210497:	b8 04 00 00 00       	mov    eax,0x4
  21049c:	89 c2                	mov    edx,eax
        }

        // skip over flags
        try elf.in_file.seekForward(4);
  21049e:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  2104a5:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  2104a8:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2104af:	e8 fc 36 00 00       	call   213bb0 <File_seekForward>
  2104b4:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  2104bb:	66 83 bd d6 fe ff ff 	cmp    WORD PTR [rbp-0x12a],0x0
  2104c2:	00 
  2104c3:	74 2a                	je     2104ef <Elf_openFile+0xb1f>
  2104c5:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [rbp-0x12a]
  2104cc:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2104d3:	66 89 85 1c fa ff ff 	mov    WORD PTR [rbp-0x5e4],ax
  2104da:	e8 b1 b7 ff ff       	call   20bc90 <__zig_return_error>
  2104df:	66 8b 85 1c fa ff ff 	mov    ax,WORD PTR [rbp-0x5e4]
  2104e6:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2104ed:	5d                   	pop    rbp
  2104ee:	c3                   	ret    
  2104ef:	48 8d 85 d0 fe ff ff 	lea    rax,[rbp-0x130]

        const header_size = try in.readInt(elf.endian, u16);
  2104f6:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  2104fd:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  210504:	40 8a 71 0a          	mov    sil,BYTE PTR [rcx+0xa]
  210508:	40 0f b6 ce          	movzx  ecx,sil
  21050c:	48 8d bd d0 fe ff ff 	lea    rdi,[rbp-0x130]
  210513:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  21051a:	48 89 85 10 fa ff ff 	mov    QWORD PTR [rbp-0x5f0],rax
  210521:	e8 aa 37 00 00       	call   213cd0 <InStream(ReadError)_readInt>
  210526:	66 83 bd d0 fe ff ff 	cmp    WORD PTR [rbp-0x130],0x0
  21052d:	00 
  21052e:	74 2a                	je     21055a <Elf_openFile+0xb8a>
  210530:	66 8b 85 d0 fe ff ff 	mov    ax,WORD PTR [rbp-0x130]
  210537:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  21053e:	66 89 85 0e fa ff ff 	mov    WORD PTR [rbp-0x5f2],ax
  210545:	e8 46 b7 ff ff       	call   20bc90 <__zig_return_error>
  21054a:	66 8b 85 0e fa ff ff 	mov    ax,WORD PTR [rbp-0x5f2]
  210551:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210558:	5d                   	pop    rbp
  210559:	c3                   	ret    
  21055a:	66 8b 85 d2 fe ff ff 	mov    ax,WORD PTR [rbp-0x12e]
  210561:	66 89 85 e2 fb ff ff 	mov    WORD PTR [rbp-0x41e],ax
        if ((elf.is_64 and header_size != 64) or (!elf.is_64 and header_size != 52)) {
  210568:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  21056f:	8a 51 09             	mov    dl,BYTE PTR [rcx+0x9]
  210572:	f6 c2 01             	test   dl,0x1
  210575:	88 95 0d fa ff ff    	mov    BYTE PTR [rbp-0x5f3],dl
  21057b:	75 02                	jne    21057f <Elf_openFile+0xbaf>
  21057d:	eb 11                	jmp    210590 <Elf_openFile+0xbc0>
  21057f:	66 83 bd e2 fb ff ff 	cmp    WORD PTR [rbp-0x41e],0x40
  210586:	40 
  210587:	0f 95 c0             	setne  al
  21058a:	88 85 0d fa ff ff    	mov    BYTE PTR [rbp-0x5f3],al
  210590:	8a 85 0d fa ff ff    	mov    al,BYTE PTR [rbp-0x5f3]
  210596:	a8 01                	test   al,0x1
  210598:	88 85 0c fa ff ff    	mov    BYTE PTR [rbp-0x5f4],al
  21059e:	75 37                	jne    2105d7 <Elf_openFile+0xc07>
  2105a0:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2105a7:	8a 48 09             	mov    cl,BYTE PTR [rax+0x9]
  2105aa:	80 f1 01             	xor    cl,0x1
  2105ad:	f6 c1 01             	test   cl,0x1
  2105b0:	88 8d 0b fa ff ff    	mov    BYTE PTR [rbp-0x5f5],cl
  2105b6:	75 02                	jne    2105ba <Elf_openFile+0xbea>
  2105b8:	eb 11                	jmp    2105cb <Elf_openFile+0xbfb>
  2105ba:	66 83 bd e2 fb ff ff 	cmp    WORD PTR [rbp-0x41e],0x34
  2105c1:	34 
  2105c2:	0f 95 c0             	setne  al
  2105c5:	88 85 0b fa ff ff    	mov    BYTE PTR [rbp-0x5f5],al
  2105cb:	8a 85 0b fa ff ff    	mov    al,BYTE PTR [rbp-0x5f5]
  2105d1:	88 85 0c fa ff ff    	mov    BYTE PTR [rbp-0x5f4],al
  2105d7:	8a 85 0c fa ff ff    	mov    al,BYTE PTR [rbp-0x5f4]
  2105dd:	a8 01                	test   al,0x1
  2105df:	75 02                	jne    2105e3 <Elf_openFile+0xc13>
  2105e1:	eb 19                	jmp    2105fc <Elf_openFile+0xc2c>
            return error.InvalidFormat;
  2105e3:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2105ea:	e8 a1 b6 ff ff       	call   20bc90 <__zig_return_error>
  2105ef:	66 b8 21 00          	mov    ax,0x21
  2105f3:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2105fa:	5d                   	pop    rbp
  2105fb:	c3                   	ret    
        if ((elf.is_64 and header_size != 64) or (!elf.is_64 and header_size != 52)) {
  2105fc:	eb 00                	jmp    2105fe <Elf_openFile+0xc2e>
  2105fe:	48 8d 85 c0 fe ff ff 	lea    rax,[rbp-0x140]
        }

        const ph_entry_size = try in.readInt(elf.endian, u16);
  210605:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  21060c:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  210613:	40 8a 71 0a          	mov    sil,BYTE PTR [rcx+0xa]
  210617:	40 0f b6 ce          	movzx  ecx,sil
  21061b:	48 8d bd c0 fe ff ff 	lea    rdi,[rbp-0x140]
  210622:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  210629:	48 89 85 00 fa ff ff 	mov    QWORD PTR [rbp-0x600],rax
  210630:	e8 9b 36 00 00       	call   213cd0 <InStream(ReadError)_readInt>
  210635:	66 83 bd c0 fe ff ff 	cmp    WORD PTR [rbp-0x140],0x0
  21063c:	00 
  21063d:	74 2a                	je     210669 <Elf_openFile+0xc99>
  21063f:	66 8b 85 c0 fe ff ff 	mov    ax,WORD PTR [rbp-0x140]
  210646:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  21064d:	66 89 85 fe f9 ff ff 	mov    WORD PTR [rbp-0x602],ax
  210654:	e8 37 b6 ff ff       	call   20bc90 <__zig_return_error>
  210659:	66 8b 85 fe f9 ff ff 	mov    ax,WORD PTR [rbp-0x602]
  210660:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210667:	5d                   	pop    rbp
  210668:	c3                   	ret    
  210669:	48 8d 85 b0 fe ff ff 	lea    rax,[rbp-0x150]
  210670:	66 8b 8d c2 fe ff ff 	mov    cx,WORD PTR [rbp-0x13e]
  210677:	66 89 8d e0 fb ff ff 	mov    WORD PTR [rbp-0x420],cx
        const ph_entry_count = try in.readInt(elf.endian, u16);
  21067e:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  210685:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  21068c:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  210690:	40 0f b6 cf          	movzx  ecx,dil
  210694:	48 8d bd b0 fe ff ff 	lea    rdi,[rbp-0x150]
  21069b:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  2106a2:	48 89 85 f0 f9 ff ff 	mov    QWORD PTR [rbp-0x610],rax
  2106a9:	e8 22 36 00 00       	call   213cd0 <InStream(ReadError)_readInt>
  2106ae:	66 83 bd b0 fe ff ff 	cmp    WORD PTR [rbp-0x150],0x0
  2106b5:	00 
  2106b6:	74 2a                	je     2106e2 <Elf_openFile+0xd12>
  2106b8:	66 8b 85 b0 fe ff ff 	mov    ax,WORD PTR [rbp-0x150]
  2106bf:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2106c6:	66 89 85 ee f9 ff ff 	mov    WORD PTR [rbp-0x612],ax
  2106cd:	e8 be b5 ff ff       	call   20bc90 <__zig_return_error>
  2106d2:	66 8b 85 ee f9 ff ff 	mov    ax,WORD PTR [rbp-0x612]
  2106d9:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2106e0:	5d                   	pop    rbp
  2106e1:	c3                   	ret    
  2106e2:	48 8d 85 a0 fe ff ff 	lea    rax,[rbp-0x160]
  2106e9:	66 8b 8d b2 fe ff ff 	mov    cx,WORD PTR [rbp-0x14e]
  2106f0:	66 89 8d de fb ff ff 	mov    WORD PTR [rbp-0x422],cx
        const sh_entry_size = try in.readInt(elf.endian, u16);
  2106f7:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  2106fe:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  210705:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  210709:	40 0f b6 cf          	movzx  ecx,dil
  21070d:	48 8d bd a0 fe ff ff 	lea    rdi,[rbp-0x160]
  210714:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  21071b:	48 89 85 e0 f9 ff ff 	mov    QWORD PTR [rbp-0x620],rax
  210722:	e8 a9 35 00 00       	call   213cd0 <InStream(ReadError)_readInt>
  210727:	66 83 bd a0 fe ff ff 	cmp    WORD PTR [rbp-0x160],0x0
  21072e:	00 
  21072f:	74 2a                	je     21075b <Elf_openFile+0xd8b>
  210731:	66 8b 85 a0 fe ff ff 	mov    ax,WORD PTR [rbp-0x160]
  210738:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  21073f:	66 89 85 de f9 ff ff 	mov    WORD PTR [rbp-0x622],ax
  210746:	e8 45 b5 ff ff       	call   20bc90 <__zig_return_error>
  21074b:	66 8b 85 de f9 ff ff 	mov    ax,WORD PTR [rbp-0x622]
  210752:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210759:	5d                   	pop    rbp
  21075a:	c3                   	ret    
  21075b:	48 8d 85 90 fe ff ff 	lea    rax,[rbp-0x170]
  210762:	66 8b 8d a2 fe ff ff 	mov    cx,WORD PTR [rbp-0x15e]
  210769:	66 89 8d dc fb ff ff 	mov    WORD PTR [rbp-0x424],cx
        const sh_entry_count = try in.readInt(elf.endian, u16);
  210770:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  210777:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  21077e:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  210782:	40 0f b6 cf          	movzx  ecx,dil
  210786:	48 8d bd 90 fe ff ff 	lea    rdi,[rbp-0x170]
  21078d:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  210794:	48 89 85 d0 f9 ff ff 	mov    QWORD PTR [rbp-0x630],rax
  21079b:	e8 30 35 00 00       	call   213cd0 <InStream(ReadError)_readInt>
  2107a0:	66 83 bd 90 fe ff ff 	cmp    WORD PTR [rbp-0x170],0x0
  2107a7:	00 
  2107a8:	74 2a                	je     2107d4 <Elf_openFile+0xe04>
  2107aa:	66 8b 85 90 fe ff ff 	mov    ax,WORD PTR [rbp-0x170]
  2107b1:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2107b8:	66 89 85 ce f9 ff ff 	mov    WORD PTR [rbp-0x632],ax
  2107bf:	e8 cc b4 ff ff       	call   20bc90 <__zig_return_error>
  2107c4:	66 8b 85 ce f9 ff ff 	mov    ax,WORD PTR [rbp-0x632]
  2107cb:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2107d2:	5d                   	pop    rbp
  2107d3:	c3                   	ret    
  2107d4:	48 8d 85 80 fe ff ff 	lea    rax,[rbp-0x180]
  2107db:	66 8b 8d 92 fe ff ff 	mov    cx,WORD PTR [rbp-0x16e]
  2107e2:	66 89 8d da fb ff ff 	mov    WORD PTR [rbp-0x426],cx
        elf.string_section_index = u64(try in.readInt(elf.endian, u16));
  2107e9:	48 8b 95 18 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x3e8]
  2107f0:	48 83 c2 28          	add    rdx,0x28
  2107f4:	48 8b b5 f0 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x410]
  2107fb:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  210802:	44 8a 47 0a          	mov    r8b,BYTE PTR [rdi+0xa]
  210806:	41 0f b6 c8          	movzx  ecx,r8b
  21080a:	48 8d bd 80 fe ff ff 	lea    rdi,[rbp-0x180]
  210811:	4c 8b 8d 70 fb ff ff 	mov    r9,QWORD PTR [rbp-0x490]
  210818:	48 89 b5 c0 f9 ff ff 	mov    QWORD PTR [rbp-0x640],rsi
  21081f:	4c 89 ce             	mov    rsi,r9
  210822:	4c 8b 95 c0 f9 ff ff 	mov    r10,QWORD PTR [rbp-0x640]
  210829:	48 89 95 b8 f9 ff ff 	mov    QWORD PTR [rbp-0x648],rdx
  210830:	4c 89 d2             	mov    rdx,r10
  210833:	48 89 85 b0 f9 ff ff 	mov    QWORD PTR [rbp-0x650],rax
  21083a:	e8 91 34 00 00       	call   213cd0 <InStream(ReadError)_readInt>
  21083f:	66 83 bd 80 fe ff ff 	cmp    WORD PTR [rbp-0x180],0x0
  210846:	00 
  210847:	74 2a                	je     210873 <Elf_openFile+0xea3>
  210849:	66 8b 85 80 fe ff ff 	mov    ax,WORD PTR [rbp-0x180]
  210850:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210857:	66 89 85 ae f9 ff ff 	mov    WORD PTR [rbp-0x652],ax
  21085e:	e8 2d b4 ff ff       	call   20bc90 <__zig_return_error>
  210863:	66 8b 85 ae f9 ff ff 	mov    ax,WORD PTR [rbp-0x652]
  21086a:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210871:	5d                   	pop    rbp
  210872:	c3                   	ret    
  210873:	0f b7 85 82 fe ff ff 	movzx  eax,WORD PTR [rbp-0x17e]
  21087a:	89 c1                	mov    ecx,eax
  21087c:	48 8b 95 b8 f9 ff ff 	mov    rdx,QWORD PTR [rbp-0x648]
  210883:	48 89 0a             	mov    QWORD PTR [rdx],rcx

        if (elf.string_section_index >= sh_entry_count) return error.InvalidFormat;
  210886:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  21088d:	48 8b 49 28          	mov    rcx,QWORD PTR [rcx+0x28]
  210891:	0f b7 85 da fb ff ff 	movzx  eax,WORD PTR [rbp-0x426]
  210898:	89 c6                	mov    esi,eax
  21089a:	48 39 f1             	cmp    rcx,rsi
  21089d:	72 19                	jb     2108b8 <Elf_openFile+0xee8>
  21089f:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2108a6:	e8 e5 b3 ff ff       	call   20bc90 <__zig_return_error>
  2108ab:	66 b8 21 00          	mov    ax,0x21
  2108af:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2108b6:	5d                   	pop    rbp
  2108b7:	c3                   	ret    
  2108b8:	eb 00                	jmp    2108ba <Elf_openFile+0xeea>

        const sh_byte_count = u64(sh_entry_size) * u64(sh_entry_count);
  2108ba:	0f b7 85 dc fb ff ff 	movzx  eax,WORD PTR [rbp-0x424]
  2108c1:	0f b7 8d da fb ff ff 	movzx  ecx,WORD PTR [rbp-0x426]
  2108c8:	89 ca                	mov    edx,ecx
  2108ca:	48 f7 e2             	mul    rdx
  2108cd:	40 0f 90 c6          	seto   sil
  2108d1:	48 89 85 a0 f9 ff ff 	mov    QWORD PTR [rbp-0x660],rax
  2108d8:	40 88 b5 9f f9 ff ff 	mov    BYTE PTR [rbp-0x661],sil
  2108df:	0f 80 87 14 00 00    	jo     211d6c <Elf_openFile+0x239c>
  2108e5:	e9 92 14 00 00       	jmp    211d7c <Elf_openFile+0x23ac>
        const end_sh = try math.add(u64, elf.section_header_offset, sh_byte_count);
  2108ea:	66 8b 85 68 fe ff ff 	mov    ax,WORD PTR [rbp-0x198]
  2108f1:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2108f8:	66 89 85 9c f9 ff ff 	mov    WORD PTR [rbp-0x664],ax
  2108ff:	e8 8c b3 ff ff       	call   20bc90 <__zig_return_error>
  210904:	66 8b 85 9c f9 ff ff 	mov    ax,WORD PTR [rbp-0x664]
  21090b:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210912:	5d                   	pop    rbp
  210913:	c3                   	ret    
  210914:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  21091b:	48 89 85 c8 fb ff ff 	mov    QWORD PTR [rbp-0x438],rax
        const ph_byte_count = u64(ph_entry_size) * u64(ph_entry_count);
  210922:	0f b7 8d e0 fb ff ff 	movzx  ecx,WORD PTR [rbp-0x420]
  210929:	89 c8                	mov    eax,ecx
  21092b:	0f b7 8d de fb ff ff 	movzx  ecx,WORD PTR [rbp-0x422]
  210932:	89 ca                	mov    edx,ecx
  210934:	48 f7 e2             	mul    rdx
  210937:	40 0f 90 c6          	seto   sil
  21093b:	48 89 85 90 f9 ff ff 	mov    QWORD PTR [rbp-0x670],rax
  210942:	40 88 b5 8f f9 ff ff 	mov    BYTE PTR [rbp-0x671],sil
  210949:	0f 80 73 14 00 00    	jo     211dc2 <Elf_openFile+0x23f2>
  21094f:	e9 7e 14 00 00       	jmp    211dd2 <Elf_openFile+0x2402>
        const end_ph = try math.add(u64, elf.program_header_offset, ph_byte_count);
  210954:	66 8b 85 48 fe ff ff 	mov    ax,WORD PTR [rbp-0x1b8]
  21095b:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210962:	66 89 85 8c f9 ff ff 	mov    WORD PTR [rbp-0x674],ax
  210969:	e8 22 b3 ff ff       	call   20bc90 <__zig_return_error>
  21096e:	66 8b 85 8c f9 ff ff 	mov    ax,WORD PTR [rbp-0x674]
  210975:	48 81 c4 20 09 00 00 	add    rsp,0x920
  21097c:	5d                   	pop    rbp
  21097d:	c3                   	ret    
  21097e:	48 8d bd 28 fe ff ff 	lea    rdi,[rbp-0x1d8]
  210985:	48 8b 85 50 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b0]
  21098c:	48 89 85 b8 fb ff ff 	mov    QWORD PTR [rbp-0x448],rax

        const stream_end = try elf.in_file.getEndPos();
  210993:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  21099a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  21099d:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  2109a4:	e8 37 37 00 00       	call   2140e0 <File_getEndPos>
  2109a9:	66 83 bd 28 fe ff ff 	cmp    WORD PTR [rbp-0x1d8],0x0
  2109b0:	00 
  2109b1:	74 2a                	je     2109dd <Elf_openFile+0x100d>
  2109b3:	66 8b 85 28 fe ff ff 	mov    ax,WORD PTR [rbp-0x1d8]
  2109ba:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2109c1:	66 89 85 8a f9 ff ff 	mov    WORD PTR [rbp-0x676],ax
  2109c8:	e8 c3 b2 ff ff       	call   20bc90 <__zig_return_error>
  2109cd:	66 8b 85 8a f9 ff ff 	mov    ax,WORD PTR [rbp-0x676]
  2109d4:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2109db:	5d                   	pop    rbp
  2109dc:	c3                   	ret    
  2109dd:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  2109e4:	48 89 85 b0 fb ff ff 	mov    QWORD PTR [rbp-0x450],rax
        if (stream_end < end_sh or stream_end < end_ph) {
  2109eb:	48 8b 85 b0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x450]
  2109f2:	48 3b 85 c8 fb ff ff 	cmp    rax,QWORD PTR [rbp-0x438]
  2109f9:	0f 92 c1             	setb   cl
  2109fc:	f6 c1 01             	test   cl,0x1
  2109ff:	88 8d 89 f9 ff ff    	mov    BYTE PTR [rbp-0x677],cl
  210a05:	75 17                	jne    210a1e <Elf_openFile+0x104e>
  210a07:	48 8b 85 b0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x450]
  210a0e:	48 3b 85 b8 fb ff ff 	cmp    rax,QWORD PTR [rbp-0x448]
  210a15:	0f 92 c1             	setb   cl
  210a18:	88 8d 89 f9 ff ff    	mov    BYTE PTR [rbp-0x677],cl
  210a1e:	8a 85 89 f9 ff ff    	mov    al,BYTE PTR [rbp-0x677]
  210a24:	a8 01                	test   al,0x1
  210a26:	75 02                	jne    210a2a <Elf_openFile+0x105a>
  210a28:	eb 19                	jmp    210a43 <Elf_openFile+0x1073>
            return error.InvalidFormat;
  210a2a:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210a31:	e8 5a b2 ff ff       	call   20bc90 <__zig_return_error>
  210a36:	66 b8 21 00          	mov    ax,0x21
  210a3a:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210a41:	5d                   	pop    rbp
  210a42:	c3                   	ret    
        if (stream_end < end_sh or stream_end < end_ph) {
  210a43:	eb 00                	jmp    210a45 <Elf_openFile+0x1075>
        }

        try elf.in_file.seekTo(elf.section_header_offset);
  210a45:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210a4c:	48 8b 30             	mov    rsi,QWORD PTR [rax]
  210a4f:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210a56:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
  210a5a:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210a61:	e8 aa 37 00 00       	call   214210 <File_seekTo>
  210a66:	66 89 85 16 fe ff ff 	mov    WORD PTR [rbp-0x1ea],ax
  210a6d:	66 83 bd 16 fe ff ff 	cmp    WORD PTR [rbp-0x1ea],0x0
  210a74:	00 
  210a75:	74 2a                	je     210aa1 <Elf_openFile+0x10d1>
  210a77:	66 8b 85 16 fe ff ff 	mov    ax,WORD PTR [rbp-0x1ea]
  210a7e:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210a85:	66 89 85 86 f9 ff ff 	mov    WORD PTR [rbp-0x67a],ax
  210a8c:	e8 ff b1 ff ff       	call   20bc90 <__zig_return_error>
  210a91:	66 8b 85 86 f9 ff ff 	mov    ax,WORD PTR [rbp-0x67a]
  210a98:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210a9f:	5d                   	pop    rbp
  210aa0:	c3                   	ret    
  210aa1:	48 8d bd f8 fd ff ff 	lea    rdi,[rbp-0x208]

        elf.section_headers = try elf.allocator.alloc(SectionHeader, sh_entry_count);
  210aa8:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210aaf:	48 83 c0 38          	add    rax,0x38
  210ab3:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  210aba:	48 8b 51 48          	mov    rdx,QWORD PTR [rcx+0x48]
  210abe:	0f b7 b5 da fb ff ff 	movzx  esi,WORD PTR [rbp-0x426]
  210ac5:	89 f1                	mov    ecx,esi
  210ac7:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  210ace:	48 89 85 78 f9 ff ff 	mov    QWORD PTR [rbp-0x688],rax
  210ad5:	e8 b6 38 00 00       	call   214390 <Allocator_alloc.34>
  210ada:	66 83 bd f8 fd ff ff 	cmp    WORD PTR [rbp-0x208],0x0
  210ae1:	00 
  210ae2:	74 2a                	je     210b0e <Elf_openFile+0x113e>
  210ae4:	66 8b 85 f8 fd ff ff 	mov    ax,WORD PTR [rbp-0x208]
  210aeb:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210af2:	66 89 85 76 f9 ff ff 	mov    WORD PTR [rbp-0x68a],ax
  210af9:	e8 92 b1 ff ff       	call   20bc90 <__zig_return_error>
  210afe:	66 8b 85 76 f9 ff ff 	mov    ax,WORD PTR [rbp-0x68a]
  210b05:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210b0c:	5d                   	pop    rbp
  210b0d:	c3                   	ret    
  210b0e:	48 8b 85 00 fe ff ff 	mov    rax,QWORD PTR [rbp-0x200]
  210b15:	48 8b 8d 78 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x688]
  210b1c:	48 89 01             	mov    QWORD PTR [rcx],rax
  210b1f:	48 8b 85 08 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1f8]
  210b26:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
        errdefer elf.allocator.free(elf.section_headers);

        if (elf.is_64) {
  210b2a:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210b31:	f6 40 09 01          	test   BYTE PTR [rax+0x9],0x1
  210b35:	75 05                	jne    210b3c <Elf_openFile+0x116c>
  210b37:	e9 b7 07 00 00       	jmp    2112f3 <Elf_openFile+0x1923>
            if (sh_entry_size != 64) return error.InvalidFormat;
  210b3c:	66 83 bd dc fb ff ff 	cmp    WORD PTR [rbp-0x424],0x40
  210b43:	40 
  210b44:	74 37                	je     210b7d <Elf_openFile+0x11ad>
        errdefer elf.allocator.free(elf.section_headers);
  210b46:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210b4d:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  210b51:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210b58:	48 83 c0 38          	add    rax,0x38
  210b5c:	48 89 c6             	mov    rsi,rax
  210b5f:	e8 9c 38 00 00       	call   214400 <Allocator_free>
            if (sh_entry_size != 64) return error.InvalidFormat;
  210b64:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210b6b:	e8 20 b1 ff ff       	call   20bc90 <__zig_return_error>
  210b70:	66 b8 21 00          	mov    ax,0x21
  210b74:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210b7b:	5d                   	pop    rbp
  210b7c:	c3                   	ret    
  210b7d:	eb 00                	jmp    210b7f <Elf_openFile+0x11af>
  210b7f:	be aa 00 00 00       	mov    esi,0xaa
  210b84:	b8 08 00 00 00       	mov    eax,0x8
  210b89:	89 c2                	mov    edx,eax
  210b8b:	48 8d 8d a8 fb ff ff 	lea    rcx,[rbp-0x458]

            for (elf.section_headers) |*elf_section| {
  210b92:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  210b99:	49 89 f8             	mov    r8,rdi
  210b9c:	49 83 c0 38          	add    r8,0x38
  210ba0:	48 89 bd 68 f9 ff ff 	mov    QWORD PTR [rbp-0x698],rdi
  210ba7:	48 89 cf             	mov    rdi,rcx
  210baa:	4c 89 85 60 f9 ff ff 	mov    QWORD PTR [rbp-0x6a0],r8
  210bb1:	e8 9a 3c 02 00       	call   234850 <memset>
  210bb6:	48 c7 85 a0 fb ff ff 	mov    QWORD PTR [rbp-0x460],0x0
  210bbd:	00 00 00 00 
  210bc1:	48 8b 8d 68 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x698]
  210bc8:	48 8b 51 40          	mov    rdx,QWORD PTR [rcx+0x40]
  210bcc:	48 89 95 58 f9 ff ff 	mov    QWORD PTR [rbp-0x6a8],rdx
  210bd3:	48 8b 85 a0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x460]
  210bda:	48 8b 8d 58 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x6a8]
  210be1:	48 39 c8             	cmp    rax,rcx
  210be4:	48 89 85 50 f9 ff ff 	mov    QWORD PTR [rbp-0x6b0],rax
  210beb:	0f 83 fd 06 00 00    	jae    2112ee <Elf_openFile+0x191e>
  210bf1:	48 8d 85 d8 fd ff ff 	lea    rax,[rbp-0x228]
  210bf8:	48 8b 8d 50 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x6b0]
  210bff:	48 c1 e1 06          	shl    rcx,0x6
  210c03:	48 8b 95 60 f9 ff ff 	mov    rdx,QWORD PTR [rbp-0x6a0]
  210c0a:	48 03 0a             	add    rcx,QWORD PTR [rdx]
  210c0d:	48 89 8d a8 fb ff ff 	mov    QWORD PTR [rbp-0x458],rcx
                elf_section.name = try in.readInt(elf.endian, u32);
  210c14:	48 8b 8d a8 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x458]
  210c1b:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  210c22:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  210c29:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  210c2d:	44 0f b6 c7          	movzx  r8d,dil
  210c31:	48 8d bd d8 fd ff ff 	lea    rdi,[rbp-0x228]
  210c38:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  210c3f:	48 89 8d 48 f9 ff ff 	mov    QWORD PTR [rbp-0x6b8],rcx
  210c46:	44 89 c1             	mov    ecx,r8d
  210c49:	48 89 85 40 f9 ff ff 	mov    QWORD PTR [rbp-0x6c0],rax
  210c50:	e8 8b 31 00 00       	call   213de0 <InStream(ReadError)_readInt.32>
  210c55:	66 83 bd d8 fd ff ff 	cmp    WORD PTR [rbp-0x228],0x0
  210c5c:	00 
  210c5d:	74 48                	je     210ca7 <Elf_openFile+0x12d7>
        errdefer elf.allocator.free(elf.section_headers);
  210c5f:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210c66:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  210c6a:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210c71:	48 83 c0 38          	add    rax,0x38
  210c75:	48 89 c6             	mov    rsi,rax
  210c78:	e8 83 37 00 00       	call   214400 <Allocator_free>
                elf_section.name = try in.readInt(elf.endian, u32);
  210c7d:	66 8b 85 d8 fd ff ff 	mov    ax,WORD PTR [rbp-0x228]
  210c84:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210c8b:	66 89 85 3e f9 ff ff 	mov    WORD PTR [rbp-0x6c2],ax
  210c92:	e8 f9 af ff ff       	call   20bc90 <__zig_return_error>
  210c97:	66 8b 85 3e f9 ff ff 	mov    ax,WORD PTR [rbp-0x6c2]
  210c9e:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210ca5:	5d                   	pop    rbp
  210ca6:	c3                   	ret    
  210ca7:	48 8d 85 c8 fd ff ff 	lea    rax,[rbp-0x238]
  210cae:	8b 8d dc fd ff ff    	mov    ecx,DWORD PTR [rbp-0x224]
  210cb4:	48 8b 95 48 f9 ff ff 	mov    rdx,QWORD PTR [rbp-0x6b8]
  210cbb:	89 0a                	mov    DWORD PTR [rdx],ecx
                elf_section.sh_type = try in.readInt(elf.endian, u32);
  210cbd:	48 8b b5 a8 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x458]
  210cc4:	48 83 c6 04          	add    rsi,0x4
  210cc8:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  210ccf:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  210cd6:	44 8a 47 0a          	mov    r8b,BYTE PTR [rdi+0xa]
  210cda:	41 0f b6 c8          	movzx  ecx,r8b
  210cde:	48 8d bd c8 fd ff ff 	lea    rdi,[rbp-0x238]
  210ce5:	4c 8b 8d 70 fb ff ff 	mov    r9,QWORD PTR [rbp-0x490]
  210cec:	48 89 b5 30 f9 ff ff 	mov    QWORD PTR [rbp-0x6d0],rsi
  210cf3:	4c 89 ce             	mov    rsi,r9
  210cf6:	48 89 85 28 f9 ff ff 	mov    QWORD PTR [rbp-0x6d8],rax
  210cfd:	e8 de 30 00 00       	call   213de0 <InStream(ReadError)_readInt.32>
  210d02:	66 83 bd c8 fd ff ff 	cmp    WORD PTR [rbp-0x238],0x0
  210d09:	00 
  210d0a:	74 48                	je     210d54 <Elf_openFile+0x1384>
        errdefer elf.allocator.free(elf.section_headers);
  210d0c:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210d13:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  210d17:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210d1e:	48 83 c0 38          	add    rax,0x38
  210d22:	48 89 c6             	mov    rsi,rax
  210d25:	e8 d6 36 00 00       	call   214400 <Allocator_free>
                elf_section.sh_type = try in.readInt(elf.endian, u32);
  210d2a:	66 8b 85 c8 fd ff ff 	mov    ax,WORD PTR [rbp-0x238]
  210d31:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210d38:	66 89 85 26 f9 ff ff 	mov    WORD PTR [rbp-0x6da],ax
  210d3f:	e8 4c af ff ff       	call   20bc90 <__zig_return_error>
  210d44:	66 8b 85 26 f9 ff ff 	mov    ax,WORD PTR [rbp-0x6da]
  210d4b:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210d52:	5d                   	pop    rbp
  210d53:	c3                   	ret    
  210d54:	48 8d 85 b0 fd ff ff 	lea    rax,[rbp-0x250]
  210d5b:	8b 8d cc fd ff ff    	mov    ecx,DWORD PTR [rbp-0x234]
  210d61:	48 8b 95 30 f9 ff ff 	mov    rdx,QWORD PTR [rbp-0x6d0]
  210d68:	89 0a                	mov    DWORD PTR [rdx],ecx
                elf_section.flags = try in.readInt(elf.endian, u64);
  210d6a:	48 8b b5 a8 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x458]
  210d71:	48 83 c6 08          	add    rsi,0x8
  210d75:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  210d7c:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  210d83:	44 8a 47 0a          	mov    r8b,BYTE PTR [rdi+0xa]
  210d87:	41 0f b6 c8          	movzx  ecx,r8b
  210d8b:	48 8d bd b0 fd ff ff 	lea    rdi,[rbp-0x250]
  210d92:	4c 8b 8d 70 fb ff ff 	mov    r9,QWORD PTR [rbp-0x490]
  210d99:	48 89 b5 18 f9 ff ff 	mov    QWORD PTR [rbp-0x6e8],rsi
  210da0:	4c 89 ce             	mov    rsi,r9
  210da3:	48 89 85 10 f9 ff ff 	mov    QWORD PTR [rbp-0x6f0],rax
  210daa:	e8 41 31 00 00       	call   213ef0 <InStream(ReadError)_readInt.33>
  210daf:	66 83 bd b0 fd ff ff 	cmp    WORD PTR [rbp-0x250],0x0
  210db6:	00 
  210db7:	74 48                	je     210e01 <Elf_openFile+0x1431>
        errdefer elf.allocator.free(elf.section_headers);
  210db9:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210dc0:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  210dc4:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210dcb:	48 83 c0 38          	add    rax,0x38
  210dcf:	48 89 c6             	mov    rsi,rax
  210dd2:	e8 29 36 00 00       	call   214400 <Allocator_free>
                elf_section.flags = try in.readInt(elf.endian, u64);
  210dd7:	66 8b 85 b0 fd ff ff 	mov    ax,WORD PTR [rbp-0x250]
  210dde:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210de5:	66 89 85 0e f9 ff ff 	mov    WORD PTR [rbp-0x6f2],ax
  210dec:	e8 9f ae ff ff       	call   20bc90 <__zig_return_error>
  210df1:	66 8b 85 0e f9 ff ff 	mov    ax,WORD PTR [rbp-0x6f2]
  210df8:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210dff:	5d                   	pop    rbp
  210e00:	c3                   	ret    
  210e01:	48 8d 85 90 fd ff ff 	lea    rax,[rbp-0x270]
  210e08:	48 8b 8d b8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x248]
  210e0f:	48 8b 95 18 f9 ff ff 	mov    rdx,QWORD PTR [rbp-0x6e8]
  210e16:	48 89 0a             	mov    QWORD PTR [rdx],rcx
                elf_section.addr = try in.readInt(elf.endian, u64);
  210e19:	48 8b 8d a8 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x458]
  210e20:	48 83 c1 10          	add    rcx,0x10
  210e24:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  210e2b:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  210e32:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  210e36:	44 0f b6 c7          	movzx  r8d,dil
  210e3a:	48 8d bd 90 fd ff ff 	lea    rdi,[rbp-0x270]
  210e41:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  210e48:	48 89 8d 00 f9 ff ff 	mov    QWORD PTR [rbp-0x700],rcx
  210e4f:	44 89 c1             	mov    ecx,r8d
  210e52:	48 89 85 f8 f8 ff ff 	mov    QWORD PTR [rbp-0x708],rax
  210e59:	e8 92 30 00 00       	call   213ef0 <InStream(ReadError)_readInt.33>
  210e5e:	66 83 bd 90 fd ff ff 	cmp    WORD PTR [rbp-0x270],0x0
  210e65:	00 
  210e66:	74 48                	je     210eb0 <Elf_openFile+0x14e0>
        errdefer elf.allocator.free(elf.section_headers);
  210e68:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210e6f:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  210e73:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210e7a:	48 83 c0 38          	add    rax,0x38
  210e7e:	48 89 c6             	mov    rsi,rax
  210e81:	e8 7a 35 00 00       	call   214400 <Allocator_free>
                elf_section.addr = try in.readInt(elf.endian, u64);
  210e86:	66 8b 85 90 fd ff ff 	mov    ax,WORD PTR [rbp-0x270]
  210e8d:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210e94:	66 89 85 f6 f8 ff ff 	mov    WORD PTR [rbp-0x70a],ax
  210e9b:	e8 f0 ad ff ff       	call   20bc90 <__zig_return_error>
  210ea0:	66 8b 85 f6 f8 ff ff 	mov    ax,WORD PTR [rbp-0x70a]
  210ea7:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210eae:	5d                   	pop    rbp
  210eaf:	c3                   	ret    
  210eb0:	48 8d 85 70 fd ff ff 	lea    rax,[rbp-0x290]
  210eb7:	48 8b 8d 98 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x268]
  210ebe:	48 8b 95 00 f9 ff ff 	mov    rdx,QWORD PTR [rbp-0x700]
  210ec5:	48 89 0a             	mov    QWORD PTR [rdx],rcx
                elf_section.offset = try in.readInt(elf.endian, u64);
  210ec8:	48 8b 8d a8 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x458]
  210ecf:	48 83 c1 18          	add    rcx,0x18
  210ed3:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  210eda:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  210ee1:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  210ee5:	44 0f b6 c7          	movzx  r8d,dil
  210ee9:	48 8d bd 70 fd ff ff 	lea    rdi,[rbp-0x290]
  210ef0:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  210ef7:	48 89 8d e8 f8 ff ff 	mov    QWORD PTR [rbp-0x718],rcx
  210efe:	44 89 c1             	mov    ecx,r8d
  210f01:	48 89 85 e0 f8 ff ff 	mov    QWORD PTR [rbp-0x720],rax
  210f08:	e8 e3 2f 00 00       	call   213ef0 <InStream(ReadError)_readInt.33>
  210f0d:	66 83 bd 70 fd ff ff 	cmp    WORD PTR [rbp-0x290],0x0
  210f14:	00 
  210f15:	74 48                	je     210f5f <Elf_openFile+0x158f>
        errdefer elf.allocator.free(elf.section_headers);
  210f17:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210f1e:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  210f22:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210f29:	48 83 c0 38          	add    rax,0x38
  210f2d:	48 89 c6             	mov    rsi,rax
  210f30:	e8 cb 34 00 00       	call   214400 <Allocator_free>
                elf_section.offset = try in.readInt(elf.endian, u64);
  210f35:	66 8b 85 70 fd ff ff 	mov    ax,WORD PTR [rbp-0x290]
  210f3c:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210f43:	66 89 85 de f8 ff ff 	mov    WORD PTR [rbp-0x722],ax
  210f4a:	e8 41 ad ff ff       	call   20bc90 <__zig_return_error>
  210f4f:	66 8b 85 de f8 ff ff 	mov    ax,WORD PTR [rbp-0x722]
  210f56:	48 81 c4 20 09 00 00 	add    rsp,0x920
  210f5d:	5d                   	pop    rbp
  210f5e:	c3                   	ret    
  210f5f:	48 8d 85 50 fd ff ff 	lea    rax,[rbp-0x2b0]
  210f66:	48 8b 8d 78 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x288]
  210f6d:	48 8b 95 e8 f8 ff ff 	mov    rdx,QWORD PTR [rbp-0x718]
  210f74:	48 89 0a             	mov    QWORD PTR [rdx],rcx
                elf_section.size = try in.readInt(elf.endian, u64);
  210f77:	48 8b 8d a8 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x458]
  210f7e:	48 83 c1 20          	add    rcx,0x20
  210f82:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  210f89:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  210f90:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  210f94:	44 0f b6 c7          	movzx  r8d,dil
  210f98:	48 8d bd 50 fd ff ff 	lea    rdi,[rbp-0x2b0]
  210f9f:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  210fa6:	48 89 8d d0 f8 ff ff 	mov    QWORD PTR [rbp-0x730],rcx
  210fad:	44 89 c1             	mov    ecx,r8d
  210fb0:	48 89 85 c8 f8 ff ff 	mov    QWORD PTR [rbp-0x738],rax
  210fb7:	e8 34 2f 00 00       	call   213ef0 <InStream(ReadError)_readInt.33>
  210fbc:	66 83 bd 50 fd ff ff 	cmp    WORD PTR [rbp-0x2b0],0x0
  210fc3:	00 
  210fc4:	74 48                	je     21100e <Elf_openFile+0x163e>
        errdefer elf.allocator.free(elf.section_headers);
  210fc6:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210fcd:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  210fd1:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  210fd8:	48 83 c0 38          	add    rax,0x38
  210fdc:	48 89 c6             	mov    rsi,rax
  210fdf:	e8 1c 34 00 00       	call   214400 <Allocator_free>
                elf_section.size = try in.readInt(elf.endian, u64);
  210fe4:	66 8b 85 50 fd ff ff 	mov    ax,WORD PTR [rbp-0x2b0]
  210feb:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  210ff2:	66 89 85 c6 f8 ff ff 	mov    WORD PTR [rbp-0x73a],ax
  210ff9:	e8 92 ac ff ff       	call   20bc90 <__zig_return_error>
  210ffe:	66 8b 85 c6 f8 ff ff 	mov    ax,WORD PTR [rbp-0x73a]
  211005:	48 81 c4 20 09 00 00 	add    rsp,0x920
  21100c:	5d                   	pop    rbp
  21100d:	c3                   	ret    
  21100e:	48 8d 85 38 fd ff ff 	lea    rax,[rbp-0x2c8]
  211015:	48 8b 8d 58 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2a8]
  21101c:	48 8b 95 d0 f8 ff ff 	mov    rdx,QWORD PTR [rbp-0x730]
  211023:	48 89 0a             	mov    QWORD PTR [rdx],rcx
                elf_section.link = try in.readInt(elf.endian, u32);
  211026:	48 8b 8d a8 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x458]
  21102d:	48 83 c1 28          	add    rcx,0x28
  211031:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  211038:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  21103f:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  211043:	44 0f b6 c7          	movzx  r8d,dil
  211047:	48 8d bd 38 fd ff ff 	lea    rdi,[rbp-0x2c8]
  21104e:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  211055:	48 89 8d b8 f8 ff ff 	mov    QWORD PTR [rbp-0x748],rcx
  21105c:	44 89 c1             	mov    ecx,r8d
  21105f:	48 89 85 b0 f8 ff ff 	mov    QWORD PTR [rbp-0x750],rax
  211066:	e8 75 2d 00 00       	call   213de0 <InStream(ReadError)_readInt.32>
  21106b:	66 83 bd 38 fd ff ff 	cmp    WORD PTR [rbp-0x2c8],0x0
  211072:	00 
  211073:	74 48                	je     2110bd <Elf_openFile+0x16ed>
        errdefer elf.allocator.free(elf.section_headers);
  211075:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  21107c:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  211080:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211087:	48 83 c0 38          	add    rax,0x38
  21108b:	48 89 c6             	mov    rsi,rax
  21108e:	e8 6d 33 00 00       	call   214400 <Allocator_free>
                elf_section.link = try in.readInt(elf.endian, u32);
  211093:	66 8b 85 38 fd ff ff 	mov    ax,WORD PTR [rbp-0x2c8]
  21109a:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2110a1:	66 89 85 ae f8 ff ff 	mov    WORD PTR [rbp-0x752],ax
  2110a8:	e8 e3 ab ff ff       	call   20bc90 <__zig_return_error>
  2110ad:	66 8b 85 ae f8 ff ff 	mov    ax,WORD PTR [rbp-0x752]
  2110b4:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2110bb:	5d                   	pop    rbp
  2110bc:	c3                   	ret    
  2110bd:	48 8d 85 28 fd ff ff 	lea    rax,[rbp-0x2d8]
  2110c4:	8b 8d 3c fd ff ff    	mov    ecx,DWORD PTR [rbp-0x2c4]
  2110ca:	48 8b 95 b8 f8 ff ff 	mov    rdx,QWORD PTR [rbp-0x748]
  2110d1:	89 0a                	mov    DWORD PTR [rdx],ecx
                elf_section.info = try in.readInt(elf.endian, u32);
  2110d3:	48 8b b5 a8 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x458]
  2110da:	48 83 c6 2c          	add    rsi,0x2c
  2110de:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  2110e5:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  2110ec:	44 8a 47 0a          	mov    r8b,BYTE PTR [rdi+0xa]
  2110f0:	41 0f b6 c8          	movzx  ecx,r8b
  2110f4:	48 8d bd 28 fd ff ff 	lea    rdi,[rbp-0x2d8]
  2110fb:	4c 8b 8d 70 fb ff ff 	mov    r9,QWORD PTR [rbp-0x490]
  211102:	48 89 b5 a0 f8 ff ff 	mov    QWORD PTR [rbp-0x760],rsi
  211109:	4c 89 ce             	mov    rsi,r9
  21110c:	48 89 85 98 f8 ff ff 	mov    QWORD PTR [rbp-0x768],rax
  211113:	e8 c8 2c 00 00       	call   213de0 <InStream(ReadError)_readInt.32>
  211118:	66 83 bd 28 fd ff ff 	cmp    WORD PTR [rbp-0x2d8],0x0
  21111f:	00 
  211120:	74 48                	je     21116a <Elf_openFile+0x179a>
        errdefer elf.allocator.free(elf.section_headers);
  211122:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211129:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  21112d:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211134:	48 83 c0 38          	add    rax,0x38
  211138:	48 89 c6             	mov    rsi,rax
  21113b:	e8 c0 32 00 00       	call   214400 <Allocator_free>
                elf_section.info = try in.readInt(elf.endian, u32);
  211140:	66 8b 85 28 fd ff ff 	mov    ax,WORD PTR [rbp-0x2d8]
  211147:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  21114e:	66 89 85 96 f8 ff ff 	mov    WORD PTR [rbp-0x76a],ax
  211155:	e8 36 ab ff ff       	call   20bc90 <__zig_return_error>
  21115a:	66 8b 85 96 f8 ff ff 	mov    ax,WORD PTR [rbp-0x76a]
  211161:	48 81 c4 20 09 00 00 	add    rsp,0x920
  211168:	5d                   	pop    rbp
  211169:	c3                   	ret    
  21116a:	48 8d 85 10 fd ff ff 	lea    rax,[rbp-0x2f0]
  211171:	8b 8d 2c fd ff ff    	mov    ecx,DWORD PTR [rbp-0x2d4]
  211177:	48 8b 95 a0 f8 ff ff 	mov    rdx,QWORD PTR [rbp-0x760]
  21117e:	89 0a                	mov    DWORD PTR [rdx],ecx
                elf_section.addr_align = try in.readInt(elf.endian, u64);
  211180:	48 8b b5 a8 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x458]
  211187:	48 83 c6 30          	add    rsi,0x30
  21118b:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  211192:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  211199:	44 8a 47 0a          	mov    r8b,BYTE PTR [rdi+0xa]
  21119d:	41 0f b6 c8          	movzx  ecx,r8b
  2111a1:	48 8d bd 10 fd ff ff 	lea    rdi,[rbp-0x2f0]
  2111a8:	4c 8b 8d 70 fb ff ff 	mov    r9,QWORD PTR [rbp-0x490]
  2111af:	48 89 b5 88 f8 ff ff 	mov    QWORD PTR [rbp-0x778],rsi
  2111b6:	4c 89 ce             	mov    rsi,r9
  2111b9:	48 89 85 80 f8 ff ff 	mov    QWORD PTR [rbp-0x780],rax
  2111c0:	e8 2b 2d 00 00       	call   213ef0 <InStream(ReadError)_readInt.33>
  2111c5:	66 83 bd 10 fd ff ff 	cmp    WORD PTR [rbp-0x2f0],0x0
  2111cc:	00 
  2111cd:	74 48                	je     211217 <Elf_openFile+0x1847>
        errdefer elf.allocator.free(elf.section_headers);
  2111cf:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2111d6:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  2111da:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2111e1:	48 83 c0 38          	add    rax,0x38
  2111e5:	48 89 c6             	mov    rsi,rax
  2111e8:	e8 13 32 00 00       	call   214400 <Allocator_free>
                elf_section.addr_align = try in.readInt(elf.endian, u64);
  2111ed:	66 8b 85 10 fd ff ff 	mov    ax,WORD PTR [rbp-0x2f0]
  2111f4:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2111fb:	66 89 85 7e f8 ff ff 	mov    WORD PTR [rbp-0x782],ax
  211202:	e8 89 aa ff ff       	call   20bc90 <__zig_return_error>
  211207:	66 8b 85 7e f8 ff ff 	mov    ax,WORD PTR [rbp-0x782]
  21120e:	48 81 c4 20 09 00 00 	add    rsp,0x920
  211215:	5d                   	pop    rbp
  211216:	c3                   	ret    
  211217:	48 8d 85 f0 fc ff ff 	lea    rax,[rbp-0x310]
  21121e:	48 8b 8d 18 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2e8]
  211225:	48 8b 95 88 f8 ff ff 	mov    rdx,QWORD PTR [rbp-0x778]
  21122c:	48 89 0a             	mov    QWORD PTR [rdx],rcx
                elf_section.ent_size = try in.readInt(elf.endian, u64);
  21122f:	48 8b 8d a8 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x458]
  211236:	48 83 c1 38          	add    rcx,0x38
  21123a:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  211241:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  211248:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  21124c:	44 0f b6 c7          	movzx  r8d,dil
  211250:	48 8d bd f0 fc ff ff 	lea    rdi,[rbp-0x310]
  211257:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  21125e:	48 89 8d 70 f8 ff ff 	mov    QWORD PTR [rbp-0x790],rcx
  211265:	44 89 c1             	mov    ecx,r8d
  211268:	48 89 85 68 f8 ff ff 	mov    QWORD PTR [rbp-0x798],rax
  21126f:	e8 7c 2c 00 00       	call   213ef0 <InStream(ReadError)_readInt.33>
  211274:	66 83 bd f0 fc ff ff 	cmp    WORD PTR [rbp-0x310],0x0
  21127b:	00 
  21127c:	74 48                	je     2112c6 <Elf_openFile+0x18f6>
        errdefer elf.allocator.free(elf.section_headers);
  21127e:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211285:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  211289:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211290:	48 83 c0 38          	add    rax,0x38
  211294:	48 89 c6             	mov    rsi,rax
  211297:	e8 64 31 00 00       	call   214400 <Allocator_free>
                elf_section.ent_size = try in.readInt(elf.endian, u64);
  21129c:	66 8b 85 f0 fc ff ff 	mov    ax,WORD PTR [rbp-0x310]
  2112a3:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2112aa:	66 89 85 66 f8 ff ff 	mov    WORD PTR [rbp-0x79a],ax
  2112b1:	e8 da a9 ff ff       	call   20bc90 <__zig_return_error>
  2112b6:	66 8b 85 66 f8 ff ff 	mov    ax,WORD PTR [rbp-0x79a]
  2112bd:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2112c4:	5d                   	pop    rbp
  2112c5:	c3                   	ret    
  2112c6:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
  2112cd:	48 8b 8d 70 f8 ff ff 	mov    rcx,QWORD PTR [rbp-0x790]
  2112d4:	48 89 01             	mov    QWORD PTR [rcx],rax
            for (elf.section_headers) |*elf_section| {
  2112d7:	48 8b 85 50 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x6b0]
  2112de:	48 83 c0 01          	add    rax,0x1
  2112e2:	48 89 85 a0 fb ff ff 	mov    QWORD PTR [rbp-0x460],rax
  2112e9:	e9 e5 f8 ff ff       	jmp    210bd3 <Elf_openFile+0x1203>
        if (elf.is_64) {
  2112ee:	e9 0f 08 00 00       	jmp    211b02 <Elf_openFile+0x2132>
            }
        } else {
            if (sh_entry_size != 40) return error.InvalidFormat;
  2112f3:	66 83 bd dc fb ff ff 	cmp    WORD PTR [rbp-0x424],0x28
  2112fa:	28 
  2112fb:	74 37                	je     211334 <Elf_openFile+0x1964>
        errdefer elf.allocator.free(elf.section_headers);
  2112fd:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211304:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  211308:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  21130f:	48 83 c0 38          	add    rax,0x38
  211313:	48 89 c6             	mov    rsi,rax
  211316:	e8 e5 30 00 00       	call   214400 <Allocator_free>
            if (sh_entry_size != 40) return error.InvalidFormat;
  21131b:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  211322:	e8 69 a9 ff ff       	call   20bc90 <__zig_return_error>
  211327:	66 b8 21 00          	mov    ax,0x21
  21132b:	48 81 c4 20 09 00 00 	add    rsp,0x920
  211332:	5d                   	pop    rbp
  211333:	c3                   	ret    
  211334:	eb 00                	jmp    211336 <Elf_openFile+0x1966>
  211336:	be aa 00 00 00       	mov    esi,0xaa
  21133b:	b8 08 00 00 00       	mov    eax,0x8
  211340:	89 c2                	mov    edx,eax
  211342:	48 8d 8d 98 fb ff ff 	lea    rcx,[rbp-0x468]

            for (elf.section_headers) |*elf_section| {
  211349:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  211350:	49 89 f8             	mov    r8,rdi
  211353:	49 83 c0 38          	add    r8,0x38
  211357:	48 89 bd 58 f8 ff ff 	mov    QWORD PTR [rbp-0x7a8],rdi
  21135e:	48 89 cf             	mov    rdi,rcx
  211361:	4c 89 85 50 f8 ff ff 	mov    QWORD PTR [rbp-0x7b0],r8
  211368:	e8 e3 34 02 00       	call   234850 <memset>
  21136d:	48 c7 85 90 fb ff ff 	mov    QWORD PTR [rbp-0x470],0x0
  211374:	00 00 00 00 
  211378:	48 8b 8d 58 f8 ff ff 	mov    rcx,QWORD PTR [rbp-0x7a8]
  21137f:	48 8b 51 40          	mov    rdx,QWORD PTR [rcx+0x40]
  211383:	48 89 95 48 f8 ff ff 	mov    QWORD PTR [rbp-0x7b8],rdx
  21138a:	48 8b 85 90 fb ff ff 	mov    rax,QWORD PTR [rbp-0x470]
  211391:	48 8b 8d 48 f8 ff ff 	mov    rcx,QWORD PTR [rbp-0x7b8]
  211398:	48 39 c8             	cmp    rax,rcx
  21139b:	48 89 85 40 f8 ff ff 	mov    QWORD PTR [rbp-0x7c0],rax
  2113a2:	0f 83 58 07 00 00    	jae    211b00 <Elf_openFile+0x2130>
  2113a8:	48 8d 85 d8 fc ff ff 	lea    rax,[rbp-0x328]
  2113af:	48 8b 8d 40 f8 ff ff 	mov    rcx,QWORD PTR [rbp-0x7c0]
  2113b6:	48 c1 e1 06          	shl    rcx,0x6
  2113ba:	48 8b 95 50 f8 ff ff 	mov    rdx,QWORD PTR [rbp-0x7b0]
  2113c1:	48 03 0a             	add    rcx,QWORD PTR [rdx]
  2113c4:	48 89 8d 98 fb ff ff 	mov    QWORD PTR [rbp-0x468],rcx
                // TODO (multiple occurences) allow implicit cast from %u32 -> %u64 ?
                elf_section.name = try in.readInt(elf.endian, u32);
  2113cb:	48 8b 8d 98 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x468]
  2113d2:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  2113d9:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  2113e0:	40 8a 7e 0a          	mov    dil,BYTE PTR [rsi+0xa]
  2113e4:	44 0f b6 c7          	movzx  r8d,dil
  2113e8:	48 8d bd d8 fc ff ff 	lea    rdi,[rbp-0x328]
  2113ef:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  2113f6:	48 89 8d 38 f8 ff ff 	mov    QWORD PTR [rbp-0x7c8],rcx
  2113fd:	44 89 c1             	mov    ecx,r8d
  211400:	48 89 85 30 f8 ff ff 	mov    QWORD PTR [rbp-0x7d0],rax
  211407:	e8 d4 29 00 00       	call   213de0 <InStream(ReadError)_readInt.32>
  21140c:	66 83 bd d8 fc ff ff 	cmp    WORD PTR [rbp-0x328],0x0
  211413:	00 
  211414:	74 48                	je     21145e <Elf_openFile+0x1a8e>
        errdefer elf.allocator.free(elf.section_headers);
  211416:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  21141d:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  211421:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211428:	48 83 c0 38          	add    rax,0x38
  21142c:	48 89 c6             	mov    rsi,rax
  21142f:	e8 cc 2f 00 00       	call   214400 <Allocator_free>
                elf_section.name = try in.readInt(elf.endian, u32);
  211434:	66 8b 85 d8 fc ff ff 	mov    ax,WORD PTR [rbp-0x328]
  21143b:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  211442:	66 89 85 2e f8 ff ff 	mov    WORD PTR [rbp-0x7d2],ax
  211449:	e8 42 a8 ff ff       	call   20bc90 <__zig_return_error>
  21144e:	66 8b 85 2e f8 ff ff 	mov    ax,WORD PTR [rbp-0x7d2]
  211455:	48 81 c4 20 09 00 00 	add    rsp,0x920
  21145c:	5d                   	pop    rbp
  21145d:	c3                   	ret    
  21145e:	48 8d 85 c8 fc ff ff 	lea    rax,[rbp-0x338]
  211465:	8b 8d dc fc ff ff    	mov    ecx,DWORD PTR [rbp-0x324]
  21146b:	48 8b 95 38 f8 ff ff 	mov    rdx,QWORD PTR [rbp-0x7c8]
  211472:	89 0a                	mov    DWORD PTR [rdx],ecx
                elf_section.sh_type = try in.readInt(elf.endian, u32);
  211474:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
  21147b:	48 83 c6 04          	add    rsi,0x4
  21147f:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  211486:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  21148d:	44 8a 47 0a          	mov    r8b,BYTE PTR [rdi+0xa]
  211491:	41 0f b6 c8          	movzx  ecx,r8b
  211495:	48 8d bd c8 fc ff ff 	lea    rdi,[rbp-0x338]
  21149c:	4c 8b 8d 70 fb ff ff 	mov    r9,QWORD PTR [rbp-0x490]
  2114a3:	48 89 b5 20 f8 ff ff 	mov    QWORD PTR [rbp-0x7e0],rsi
  2114aa:	4c 89 ce             	mov    rsi,r9
  2114ad:	48 89 85 18 f8 ff ff 	mov    QWORD PTR [rbp-0x7e8],rax
  2114b4:	e8 27 29 00 00       	call   213de0 <InStream(ReadError)_readInt.32>
  2114b9:	66 83 bd c8 fc ff ff 	cmp    WORD PTR [rbp-0x338],0x0
  2114c0:	00 
  2114c1:	74 48                	je     21150b <Elf_openFile+0x1b3b>
        errdefer elf.allocator.free(elf.section_headers);
  2114c3:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2114ca:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  2114ce:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2114d5:	48 83 c0 38          	add    rax,0x38
  2114d9:	48 89 c6             	mov    rsi,rax
  2114dc:	e8 1f 2f 00 00       	call   214400 <Allocator_free>
                elf_section.sh_type = try in.readInt(elf.endian, u32);
  2114e1:	66 8b 85 c8 fc ff ff 	mov    ax,WORD PTR [rbp-0x338]
  2114e8:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2114ef:	66 89 85 16 f8 ff ff 	mov    WORD PTR [rbp-0x7ea],ax
  2114f6:	e8 95 a7 ff ff       	call   20bc90 <__zig_return_error>
  2114fb:	66 8b 85 16 f8 ff ff 	mov    ax,WORD PTR [rbp-0x7ea]
  211502:	48 81 c4 20 09 00 00 	add    rsp,0x920
  211509:	5d                   	pop    rbp
  21150a:	c3                   	ret    
  21150b:	48 8d 85 b8 fc ff ff 	lea    rax,[rbp-0x348]
  211512:	8b 8d cc fc ff ff    	mov    ecx,DWORD PTR [rbp-0x334]
  211518:	48 8b 95 20 f8 ff ff 	mov    rdx,QWORD PTR [rbp-0x7e0]
  21151f:	89 0a                	mov    DWORD PTR [rdx],ecx
                elf_section.flags = u64(try in.readInt(elf.endian, u32));
  211521:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
  211528:	48 83 c6 08          	add    rsi,0x8
  21152c:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  211533:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  21153a:	44 8a 47 0a          	mov    r8b,BYTE PTR [rdi+0xa]
  21153e:	41 0f b6 c8          	movzx  ecx,r8b
  211542:	48 8d bd b8 fc ff ff 	lea    rdi,[rbp-0x348]
  211549:	4c 8b 8d 70 fb ff ff 	mov    r9,QWORD PTR [rbp-0x490]
  211550:	48 89 b5 08 f8 ff ff 	mov    QWORD PTR [rbp-0x7f8],rsi
  211557:	4c 89 ce             	mov    rsi,r9
  21155a:	48 89 85 00 f8 ff ff 	mov    QWORD PTR [rbp-0x800],rax
  211561:	e8 7a 28 00 00       	call   213de0 <InStream(ReadError)_readInt.32>
  211566:	66 83 bd b8 fc ff ff 	cmp    WORD PTR [rbp-0x348],0x0
  21156d:	00 
  21156e:	74 48                	je     2115b8 <Elf_openFile+0x1be8>
        errdefer elf.allocator.free(elf.section_headers);
  211570:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211577:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  21157b:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211582:	48 83 c0 38          	add    rax,0x38
  211586:	48 89 c6             	mov    rsi,rax
  211589:	e8 72 2e 00 00       	call   214400 <Allocator_free>
                elf_section.flags = u64(try in.readInt(elf.endian, u32));
  21158e:	66 8b 85 b8 fc ff ff 	mov    ax,WORD PTR [rbp-0x348]
  211595:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  21159c:	66 89 85 fe f7 ff ff 	mov    WORD PTR [rbp-0x802],ax
  2115a3:	e8 e8 a6 ff ff       	call   20bc90 <__zig_return_error>
  2115a8:	66 8b 85 fe f7 ff ff 	mov    ax,WORD PTR [rbp-0x802]
  2115af:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2115b6:	5d                   	pop    rbp
  2115b7:	c3                   	ret    
  2115b8:	48 8d 85 a8 fc ff ff 	lea    rax,[rbp-0x358]
  2115bf:	8b 8d bc fc ff ff    	mov    ecx,DWORD PTR [rbp-0x344]
  2115c5:	89 ca                	mov    edx,ecx
  2115c7:	48 8b b5 08 f8 ff ff 	mov    rsi,QWORD PTR [rbp-0x7f8]
  2115ce:	48 89 16             	mov    QWORD PTR [rsi],rdx
                elf_section.addr = u64(try in.readInt(elf.endian, u32));
  2115d1:	48 8b 95 98 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x468]
  2115d8:	48 83 c2 10          	add    rdx,0x10
  2115dc:	48 8b bd f0 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x410]
  2115e3:	4c 8b 85 18 fc ff ff 	mov    r8,QWORD PTR [rbp-0x3e8]
  2115ea:	45 8a 48 0a          	mov    r9b,BYTE PTR [r8+0xa]
  2115ee:	41 0f b6 c9          	movzx  ecx,r9b
  2115f2:	4c 8d 85 a8 fc ff ff 	lea    r8,[rbp-0x358]
  2115f9:	48 89 bd f0 f7 ff ff 	mov    QWORD PTR [rbp-0x810],rdi
  211600:	4c 89 c7             	mov    rdi,r8
  211603:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  21160a:	4c 8b 85 f0 f7 ff ff 	mov    r8,QWORD PTR [rbp-0x810]
  211611:	48 89 95 e8 f7 ff ff 	mov    QWORD PTR [rbp-0x818],rdx
  211618:	4c 89 c2             	mov    rdx,r8
  21161b:	48 89 85 e0 f7 ff ff 	mov    QWORD PTR [rbp-0x820],rax
  211622:	e8 b9 27 00 00       	call   213de0 <InStream(ReadError)_readInt.32>
  211627:	66 83 bd a8 fc ff ff 	cmp    WORD PTR [rbp-0x358],0x0
  21162e:	00 
  21162f:	74 48                	je     211679 <Elf_openFile+0x1ca9>
        errdefer elf.allocator.free(elf.section_headers);
  211631:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211638:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  21163c:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211643:	48 83 c0 38          	add    rax,0x38
  211647:	48 89 c6             	mov    rsi,rax
  21164a:	e8 b1 2d 00 00       	call   214400 <Allocator_free>
                elf_section.addr = u64(try in.readInt(elf.endian, u32));
  21164f:	66 8b 85 a8 fc ff ff 	mov    ax,WORD PTR [rbp-0x358]
  211656:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  21165d:	66 89 85 de f7 ff ff 	mov    WORD PTR [rbp-0x822],ax
  211664:	e8 27 a6 ff ff       	call   20bc90 <__zig_return_error>
  211669:	66 8b 85 de f7 ff ff 	mov    ax,WORD PTR [rbp-0x822]
  211670:	48 81 c4 20 09 00 00 	add    rsp,0x920
  211677:	5d                   	pop    rbp
  211678:	c3                   	ret    
  211679:	48 8d 85 98 fc ff ff 	lea    rax,[rbp-0x368]
  211680:	8b 8d ac fc ff ff    	mov    ecx,DWORD PTR [rbp-0x354]
  211686:	89 ca                	mov    edx,ecx
  211688:	48 8b b5 e8 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x818]
  21168f:	48 89 16             	mov    QWORD PTR [rsi],rdx
                elf_section.offset = u64(try in.readInt(elf.endian, u32));
  211692:	48 8b 95 98 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x468]
  211699:	48 83 c2 18          	add    rdx,0x18
  21169d:	48 8b bd f0 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x410]
  2116a4:	4c 8b 85 18 fc ff ff 	mov    r8,QWORD PTR [rbp-0x3e8]
  2116ab:	45 8a 48 0a          	mov    r9b,BYTE PTR [r8+0xa]
  2116af:	41 0f b6 c9          	movzx  ecx,r9b
  2116b3:	4c 8d 85 98 fc ff ff 	lea    r8,[rbp-0x368]
  2116ba:	48 89 bd d0 f7 ff ff 	mov    QWORD PTR [rbp-0x830],rdi
  2116c1:	4c 89 c7             	mov    rdi,r8
  2116c4:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  2116cb:	4c 8b 85 d0 f7 ff ff 	mov    r8,QWORD PTR [rbp-0x830]
  2116d2:	48 89 95 c8 f7 ff ff 	mov    QWORD PTR [rbp-0x838],rdx
  2116d9:	4c 89 c2             	mov    rdx,r8
  2116dc:	48 89 85 c0 f7 ff ff 	mov    QWORD PTR [rbp-0x840],rax
  2116e3:	e8 f8 26 00 00       	call   213de0 <InStream(ReadError)_readInt.32>
  2116e8:	66 83 bd 98 fc ff ff 	cmp    WORD PTR [rbp-0x368],0x0
  2116ef:	00 
  2116f0:	74 48                	je     21173a <Elf_openFile+0x1d6a>
        errdefer elf.allocator.free(elf.section_headers);
  2116f2:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2116f9:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  2116fd:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211704:	48 83 c0 38          	add    rax,0x38
  211708:	48 89 c6             	mov    rsi,rax
  21170b:	e8 f0 2c 00 00       	call   214400 <Allocator_free>
                elf_section.offset = u64(try in.readInt(elf.endian, u32));
  211710:	66 8b 85 98 fc ff ff 	mov    ax,WORD PTR [rbp-0x368]
  211717:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  21171e:	66 89 85 be f7 ff ff 	mov    WORD PTR [rbp-0x842],ax
  211725:	e8 66 a5 ff ff       	call   20bc90 <__zig_return_error>
  21172a:	66 8b 85 be f7 ff ff 	mov    ax,WORD PTR [rbp-0x842]
  211731:	48 81 c4 20 09 00 00 	add    rsp,0x920
  211738:	5d                   	pop    rbp
  211739:	c3                   	ret    
  21173a:	48 8d 85 88 fc ff ff 	lea    rax,[rbp-0x378]
  211741:	8b 8d 9c fc ff ff    	mov    ecx,DWORD PTR [rbp-0x364]
  211747:	89 ca                	mov    edx,ecx
  211749:	48 8b b5 c8 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x838]
  211750:	48 89 16             	mov    QWORD PTR [rsi],rdx
                elf_section.size = u64(try in.readInt(elf.endian, u32));
  211753:	48 8b 95 98 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x468]
  21175a:	48 83 c2 20          	add    rdx,0x20
  21175e:	48 8b bd f0 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x410]
  211765:	4c 8b 85 18 fc ff ff 	mov    r8,QWORD PTR [rbp-0x3e8]
  21176c:	45 8a 48 0a          	mov    r9b,BYTE PTR [r8+0xa]
  211770:	41 0f b6 c9          	movzx  ecx,r9b
  211774:	4c 8d 85 88 fc ff ff 	lea    r8,[rbp-0x378]
  21177b:	48 89 bd b0 f7 ff ff 	mov    QWORD PTR [rbp-0x850],rdi
  211782:	4c 89 c7             	mov    rdi,r8
  211785:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  21178c:	4c 8b 85 b0 f7 ff ff 	mov    r8,QWORD PTR [rbp-0x850]
  211793:	48 89 95 a8 f7 ff ff 	mov    QWORD PTR [rbp-0x858],rdx
  21179a:	4c 89 c2             	mov    rdx,r8
  21179d:	48 89 85 a0 f7 ff ff 	mov    QWORD PTR [rbp-0x860],rax
  2117a4:	e8 37 26 00 00       	call   213de0 <InStream(ReadError)_readInt.32>
  2117a9:	66 83 bd 88 fc ff ff 	cmp    WORD PTR [rbp-0x378],0x0
  2117b0:	00 
  2117b1:	74 48                	je     2117fb <Elf_openFile+0x1e2b>
        errdefer elf.allocator.free(elf.section_headers);
  2117b3:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2117ba:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  2117be:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2117c5:	48 83 c0 38          	add    rax,0x38
  2117c9:	48 89 c6             	mov    rsi,rax
  2117cc:	e8 2f 2c 00 00       	call   214400 <Allocator_free>
                elf_section.size = u64(try in.readInt(elf.endian, u32));
  2117d1:	66 8b 85 88 fc ff ff 	mov    ax,WORD PTR [rbp-0x378]
  2117d8:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2117df:	66 89 85 9e f7 ff ff 	mov    WORD PTR [rbp-0x862],ax
  2117e6:	e8 a5 a4 ff ff       	call   20bc90 <__zig_return_error>
  2117eb:	66 8b 85 9e f7 ff ff 	mov    ax,WORD PTR [rbp-0x862]
  2117f2:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2117f9:	5d                   	pop    rbp
  2117fa:	c3                   	ret    
  2117fb:	48 8d 85 78 fc ff ff 	lea    rax,[rbp-0x388]
  211802:	8b 8d 8c fc ff ff    	mov    ecx,DWORD PTR [rbp-0x374]
  211808:	89 ca                	mov    edx,ecx
  21180a:	48 8b b5 a8 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x858]
  211811:	48 89 16             	mov    QWORD PTR [rsi],rdx
                elf_section.link = try in.readInt(elf.endian, u32);
  211814:	48 8b 95 98 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x468]
  21181b:	48 83 c2 28          	add    rdx,0x28
  21181f:	48 8b bd f0 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x410]
  211826:	4c 8b 85 18 fc ff ff 	mov    r8,QWORD PTR [rbp-0x3e8]
  21182d:	45 8a 48 0a          	mov    r9b,BYTE PTR [r8+0xa]
  211831:	41 0f b6 c9          	movzx  ecx,r9b
  211835:	4c 8d 85 78 fc ff ff 	lea    r8,[rbp-0x388]
  21183c:	48 89 bd 90 f7 ff ff 	mov    QWORD PTR [rbp-0x870],rdi
  211843:	4c 89 c7             	mov    rdi,r8
  211846:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  21184d:	4c 8b 85 90 f7 ff ff 	mov    r8,QWORD PTR [rbp-0x870]
  211854:	48 89 95 88 f7 ff ff 	mov    QWORD PTR [rbp-0x878],rdx
  21185b:	4c 89 c2             	mov    rdx,r8
  21185e:	48 89 85 80 f7 ff ff 	mov    QWORD PTR [rbp-0x880],rax
  211865:	e8 76 25 00 00       	call   213de0 <InStream(ReadError)_readInt.32>
  21186a:	66 83 bd 78 fc ff ff 	cmp    WORD PTR [rbp-0x388],0x0
  211871:	00 
  211872:	74 48                	je     2118bc <Elf_openFile+0x1eec>
        errdefer elf.allocator.free(elf.section_headers);
  211874:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  21187b:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  21187f:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211886:	48 83 c0 38          	add    rax,0x38
  21188a:	48 89 c6             	mov    rsi,rax
  21188d:	e8 6e 2b 00 00       	call   214400 <Allocator_free>
                elf_section.link = try in.readInt(elf.endian, u32);
  211892:	66 8b 85 78 fc ff ff 	mov    ax,WORD PTR [rbp-0x388]
  211899:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2118a0:	66 89 85 7e f7 ff ff 	mov    WORD PTR [rbp-0x882],ax
  2118a7:	e8 e4 a3 ff ff       	call   20bc90 <__zig_return_error>
  2118ac:	66 8b 85 7e f7 ff ff 	mov    ax,WORD PTR [rbp-0x882]
  2118b3:	48 81 c4 20 09 00 00 	add    rsp,0x920
  2118ba:	5d                   	pop    rbp
  2118bb:	c3                   	ret    
  2118bc:	48 8d 85 68 fc ff ff 	lea    rax,[rbp-0x398]
  2118c3:	8b 8d 7c fc ff ff    	mov    ecx,DWORD PTR [rbp-0x384]
  2118c9:	48 8b 95 88 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x878]
  2118d0:	89 0a                	mov    DWORD PTR [rdx],ecx
                elf_section.info = try in.readInt(elf.endian, u32);
  2118d2:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
  2118d9:	48 83 c6 2c          	add    rsi,0x2c
  2118dd:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  2118e4:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  2118eb:	44 8a 47 0a          	mov    r8b,BYTE PTR [rdi+0xa]
  2118ef:	41 0f b6 c8          	movzx  ecx,r8b
  2118f3:	48 8d bd 68 fc ff ff 	lea    rdi,[rbp-0x398]
  2118fa:	4c 8b 8d 70 fb ff ff 	mov    r9,QWORD PTR [rbp-0x490]
  211901:	48 89 b5 70 f7 ff ff 	mov    QWORD PTR [rbp-0x890],rsi
  211908:	4c 89 ce             	mov    rsi,r9
  21190b:	48 89 85 68 f7 ff ff 	mov    QWORD PTR [rbp-0x898],rax
  211912:	e8 c9 24 00 00       	call   213de0 <InStream(ReadError)_readInt.32>
  211917:	66 83 bd 68 fc ff ff 	cmp    WORD PTR [rbp-0x398],0x0
  21191e:	00 
  21191f:	74 48                	je     211969 <Elf_openFile+0x1f99>
        errdefer elf.allocator.free(elf.section_headers);
  211921:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211928:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  21192c:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211933:	48 83 c0 38          	add    rax,0x38
  211937:	48 89 c6             	mov    rsi,rax
  21193a:	e8 c1 2a 00 00       	call   214400 <Allocator_free>
                elf_section.info = try in.readInt(elf.endian, u32);
  21193f:	66 8b 85 68 fc ff ff 	mov    ax,WORD PTR [rbp-0x398]
  211946:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  21194d:	66 89 85 66 f7 ff ff 	mov    WORD PTR [rbp-0x89a],ax
  211954:	e8 37 a3 ff ff       	call   20bc90 <__zig_return_error>
  211959:	66 8b 85 66 f7 ff ff 	mov    ax,WORD PTR [rbp-0x89a]
  211960:	48 81 c4 20 09 00 00 	add    rsp,0x920
  211967:	5d                   	pop    rbp
  211968:	c3                   	ret    
  211969:	48 8d 85 58 fc ff ff 	lea    rax,[rbp-0x3a8]
  211970:	8b 8d 6c fc ff ff    	mov    ecx,DWORD PTR [rbp-0x394]
  211976:	48 8b 95 70 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x890]
  21197d:	89 0a                	mov    DWORD PTR [rdx],ecx
                elf_section.addr_align = u64(try in.readInt(elf.endian, u32));
  21197f:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
  211986:	48 83 c6 30          	add    rsi,0x30
  21198a:	48 8b 95 f0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x410]
  211991:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  211998:	44 8a 47 0a          	mov    r8b,BYTE PTR [rdi+0xa]
  21199c:	41 0f b6 c8          	movzx  ecx,r8b
  2119a0:	48 8d bd 58 fc ff ff 	lea    rdi,[rbp-0x3a8]
  2119a7:	4c 8b 8d 70 fb ff ff 	mov    r9,QWORD PTR [rbp-0x490]
  2119ae:	48 89 b5 58 f7 ff ff 	mov    QWORD PTR [rbp-0x8a8],rsi
  2119b5:	4c 89 ce             	mov    rsi,r9
  2119b8:	48 89 85 50 f7 ff ff 	mov    QWORD PTR [rbp-0x8b0],rax
  2119bf:	e8 1c 24 00 00       	call   213de0 <InStream(ReadError)_readInt.32>
  2119c4:	66 83 bd 58 fc ff ff 	cmp    WORD PTR [rbp-0x3a8],0x0
  2119cb:	00 
  2119cc:	74 48                	je     211a16 <Elf_openFile+0x2046>
        errdefer elf.allocator.free(elf.section_headers);
  2119ce:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2119d5:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  2119d9:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  2119e0:	48 83 c0 38          	add    rax,0x38
  2119e4:	48 89 c6             	mov    rsi,rax
  2119e7:	e8 14 2a 00 00       	call   214400 <Allocator_free>
                elf_section.addr_align = u64(try in.readInt(elf.endian, u32));
  2119ec:	66 8b 85 58 fc ff ff 	mov    ax,WORD PTR [rbp-0x3a8]
  2119f3:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  2119fa:	66 89 85 4e f7 ff ff 	mov    WORD PTR [rbp-0x8b2],ax
  211a01:	e8 8a a2 ff ff       	call   20bc90 <__zig_return_error>
  211a06:	66 8b 85 4e f7 ff ff 	mov    ax,WORD PTR [rbp-0x8b2]
  211a0d:	48 81 c4 20 09 00 00 	add    rsp,0x920
  211a14:	5d                   	pop    rbp
  211a15:	c3                   	ret    
  211a16:	48 8d 85 48 fc ff ff 	lea    rax,[rbp-0x3b8]
  211a1d:	8b 8d 5c fc ff ff    	mov    ecx,DWORD PTR [rbp-0x3a4]
  211a23:	89 ca                	mov    edx,ecx
  211a25:	48 8b b5 58 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8a8]
  211a2c:	48 89 16             	mov    QWORD PTR [rsi],rdx
                elf_section.ent_size = u64(try in.readInt(elf.endian, u32));
  211a2f:	48 8b 95 98 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x468]
  211a36:	48 83 c2 38          	add    rdx,0x38
  211a3a:	48 8b bd f0 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x410]
  211a41:	4c 8b 85 18 fc ff ff 	mov    r8,QWORD PTR [rbp-0x3e8]
  211a48:	45 8a 48 0a          	mov    r9b,BYTE PTR [r8+0xa]
  211a4c:	41 0f b6 c9          	movzx  ecx,r9b
  211a50:	4c 8d 85 48 fc ff ff 	lea    r8,[rbp-0x3b8]
  211a57:	48 89 bd 40 f7 ff ff 	mov    QWORD PTR [rbp-0x8c0],rdi
  211a5e:	4c 89 c7             	mov    rdi,r8
  211a61:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  211a68:	4c 8b 85 40 f7 ff ff 	mov    r8,QWORD PTR [rbp-0x8c0]
  211a6f:	48 89 95 38 f7 ff ff 	mov    QWORD PTR [rbp-0x8c8],rdx
  211a76:	4c 89 c2             	mov    rdx,r8
  211a79:	48 89 85 30 f7 ff ff 	mov    QWORD PTR [rbp-0x8d0],rax
  211a80:	e8 5b 23 00 00       	call   213de0 <InStream(ReadError)_readInt.32>
  211a85:	66 83 bd 48 fc ff ff 	cmp    WORD PTR [rbp-0x3b8],0x0
  211a8c:	00 
  211a8d:	74 48                	je     211ad7 <Elf_openFile+0x2107>
        errdefer elf.allocator.free(elf.section_headers);
  211a8f:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211a96:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  211a9a:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211aa1:	48 83 c0 38          	add    rax,0x38
  211aa5:	48 89 c6             	mov    rsi,rax
  211aa8:	e8 53 29 00 00       	call   214400 <Allocator_free>
                elf_section.ent_size = u64(try in.readInt(elf.endian, u32));
  211aad:	66 8b 85 48 fc ff ff 	mov    ax,WORD PTR [rbp-0x3b8]
  211ab4:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  211abb:	66 89 85 2e f7 ff ff 	mov    WORD PTR [rbp-0x8d2],ax
  211ac2:	e8 c9 a1 ff ff       	call   20bc90 <__zig_return_error>
  211ac7:	66 8b 85 2e f7 ff ff 	mov    ax,WORD PTR [rbp-0x8d2]
  211ace:	48 81 c4 20 09 00 00 	add    rsp,0x920
  211ad5:	5d                   	pop    rbp
  211ad6:	c3                   	ret    
  211ad7:	8b 85 4c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3b4]
  211add:	89 c1                	mov    ecx,eax
  211adf:	48 8b 95 38 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x8c8]
  211ae6:	48 89 0a             	mov    QWORD PTR [rdx],rcx
            for (elf.section_headers) |*elf_section| {
  211ae9:	48 8b 8d 40 f8 ff ff 	mov    rcx,QWORD PTR [rbp-0x7c0]
  211af0:	48 83 c1 01          	add    rcx,0x1
  211af4:	48 89 8d 90 fb ff ff 	mov    QWORD PTR [rbp-0x470],rcx
  211afb:	e9 8a f8 ff ff       	jmp    21138a <Elf_openFile+0x19ba>
        if (elf.is_64) {
  211b00:	eb 00                	jmp    211b02 <Elf_openFile+0x2132>
  211b02:	be aa 00 00 00       	mov    esi,0xaa
  211b07:	b8 08 00 00 00       	mov    eax,0x8
  211b0c:	89 c2                	mov    edx,eax
  211b0e:	48 8d 8d 88 fb ff ff 	lea    rcx,[rbp-0x478]
            }
        }

        for (elf.section_headers) |*elf_section| {
  211b15:	48 8b bd 18 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e8]
  211b1c:	49 89 f8             	mov    r8,rdi
  211b1f:	49 83 c0 38          	add    r8,0x38
  211b23:	48 89 bd 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rdi
  211b2a:	48 89 cf             	mov    rdi,rcx
  211b2d:	4c 89 85 18 f7 ff ff 	mov    QWORD PTR [rbp-0x8e8],r8
  211b34:	e8 17 2d 02 00       	call   234850 <memset>
  211b39:	48 c7 85 80 fb ff ff 	mov    QWORD PTR [rbp-0x480],0x0
  211b40:	00 00 00 00 
  211b44:	48 8b 8d 20 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x8e0]
  211b4b:	48 8b 51 40          	mov    rdx,QWORD PTR [rcx+0x40]
  211b4f:	48 89 95 10 f7 ff ff 	mov    QWORD PTR [rbp-0x8f0],rdx
  211b56:	48 8b 85 80 fb ff ff 	mov    rax,QWORD PTR [rbp-0x480]
  211b5d:	48 8b 8d 10 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x8f0]
  211b64:	48 39 c8             	cmp    rax,rcx
  211b67:	48 89 85 08 f7 ff ff 	mov    QWORD PTR [rbp-0x8f8],rax
  211b6e:	0f 83 1a 01 00 00    	jae    211c8e <Elf_openFile+0x22be>
  211b74:	48 8b 85 08 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8f8]
  211b7b:	48 c1 e0 06          	shl    rax,0x6
  211b7f:	48 8b 8d 18 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x8e8]
  211b86:	48 03 01             	add    rax,QWORD PTR [rcx]
  211b89:	48 89 85 88 fb ff ff 	mov    QWORD PTR [rbp-0x478],rax
            if (elf_section.sh_type != SHT_NOBITS) {
  211b90:	48 8b 85 88 fb ff ff 	mov    rax,QWORD PTR [rbp-0x478]
  211b97:	83 78 04 08          	cmp    DWORD PTR [rax+0x4],0x8
  211b9b:	0f 84 d4 00 00 00    	je     211c75 <Elf_openFile+0x22a5>
  211ba1:	48 8d bd 30 fc ff ff 	lea    rdi,[rbp-0x3d0]
                const file_end_offset = try math.add(u64, elf_section.offset, elf_section.size);
  211ba8:	48 8b 85 88 fb ff ff 	mov    rax,QWORD PTR [rbp-0x478]
  211baf:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
  211bb3:	48 8b 85 88 fb ff ff 	mov    rax,QWORD PTR [rbp-0x478]
  211bba:	48 8b 48 20          	mov    rcx,QWORD PTR [rax+0x20]
  211bbe:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  211bc5:	e8 56 24 00 00       	call   214020 <add>
  211bca:	66 83 bd 30 fc ff ff 	cmp    WORD PTR [rbp-0x3d0],0x0
  211bd1:	00 
  211bd2:	74 48                	je     211c1c <Elf_openFile+0x224c>
        errdefer elf.allocator.free(elf.section_headers);
  211bd4:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211bdb:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  211bdf:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211be6:	48 83 c0 38          	add    rax,0x38
  211bea:	48 89 c6             	mov    rsi,rax
  211bed:	e8 0e 28 00 00       	call   214400 <Allocator_free>
                const file_end_offset = try math.add(u64, elf_section.offset, elf_section.size);
  211bf2:	66 8b 85 30 fc ff ff 	mov    ax,WORD PTR [rbp-0x3d0]
  211bf9:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  211c00:	66 89 85 06 f7 ff ff 	mov    WORD PTR [rbp-0x8fa],ax
  211c07:	e8 84 a0 ff ff       	call   20bc90 <__zig_return_error>
  211c0c:	66 8b 85 06 f7 ff ff 	mov    ax,WORD PTR [rbp-0x8fa]
  211c13:	48 81 c4 20 09 00 00 	add    rsp,0x920
  211c1a:	5d                   	pop    rbp
  211c1b:	c3                   	ret    
  211c1c:	48 8b 85 38 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3c8]
  211c23:	48 89 85 78 fb ff ff 	mov    QWORD PTR [rbp-0x488],rax
                if (stream_end < file_end_offset) return error.InvalidFormat;
  211c2a:	48 8b 85 b0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x450]
  211c31:	48 3b 85 78 fb ff ff 	cmp    rax,QWORD PTR [rbp-0x488]
  211c38:	73 37                	jae    211c71 <Elf_openFile+0x22a1>
        errdefer elf.allocator.free(elf.section_headers);
  211c3a:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211c41:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  211c45:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211c4c:	48 83 c0 38          	add    rax,0x38
  211c50:	48 89 c6             	mov    rsi,rax
  211c53:	e8 a8 27 00 00       	call   214400 <Allocator_free>
                if (stream_end < file_end_offset) return error.InvalidFormat;
  211c58:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  211c5f:	e8 2c a0 ff ff       	call   20bc90 <__zig_return_error>
  211c64:	66 b8 21 00          	mov    ax,0x21
  211c68:	48 81 c4 20 09 00 00 	add    rsp,0x920
  211c6f:	5d                   	pop    rbp
  211c70:	c3                   	ret    
  211c71:	eb 00                	jmp    211c73 <Elf_openFile+0x22a3>
            if (elf_section.sh_type != SHT_NOBITS) {
  211c73:	eb 02                	jmp    211c77 <Elf_openFile+0x22a7>
  211c75:	eb 00                	jmp    211c77 <Elf_openFile+0x22a7>
        for (elf.section_headers) |*elf_section| {
  211c77:	48 8b 85 08 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8f8]
  211c7e:	48 83 c0 01          	add    rax,0x1
  211c82:	48 89 85 80 fb ff ff 	mov    QWORD PTR [rbp-0x480],rax
  211c89:	e9 c8 fe ff ff       	jmp    211b56 <Elf_openFile+0x2186>
            }
        }

        elf.string_section = &elf.section_headers[elf.string_section_index];
  211c8e:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211c95:	48 83 c0 30          	add    rax,0x30
  211c99:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  211ca0:	48 89 ca             	mov    rdx,rcx
  211ca3:	48 83 c2 38          	add    rdx,0x38
  211ca7:	48 8b b5 18 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3e8]
  211cae:	48 8b 76 28          	mov    rsi,QWORD PTR [rsi+0x28]
  211cb2:	48 3b 71 40          	cmp    rsi,QWORD PTR [rcx+0x40]
  211cb6:	48 89 85 f8 f6 ff ff 	mov    QWORD PTR [rbp-0x908],rax
  211cbd:	48 89 b5 f0 f6 ff ff 	mov    QWORD PTR [rbp-0x910],rsi
  211cc4:	48 89 95 e8 f6 ff ff 	mov    QWORD PTR [rbp-0x918],rdx
  211ccb:	0f 82 57 01 00 00    	jb     211e28 <Elf_openFile+0x2458>
  211cd1:	e9 42 01 00 00       	jmp    211e18 <Elf_openFile+0x2448>
        errdefer elf.allocator.free(elf.section_headers);
  211cd6:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211cdd:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  211ce1:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211ce8:	48 83 c0 38          	add    rax,0x38
  211cec:	48 89 c6             	mov    rsi,rax
  211cef:	e8 0c 27 00 00       	call   214400 <Allocator_free>
        if (elf.string_section.sh_type != SHT_STRTAB) {
            // not a string table
            return error.InvalidFormat;
  211cf4:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  211cfb:	e8 90 9f ff ff       	call   20bc90 <__zig_return_error>
  211d00:	66 b8 21 00          	mov    ax,0x21
  211d04:	48 81 c4 20 09 00 00 	add    rsp,0x920
  211d0b:	5d                   	pop    rbp
  211d0c:	c3                   	ret    
  211d0d:	31 c0                	xor    eax,eax
  211d0f:	66 89 c1             	mov    cx,ax
    pub fn openFile(elf: *Elf, allocator: *mem.Allocator, file: *os.File) !void {
  211d12:	66 89 c8             	mov    ax,cx
  211d15:	48 81 c4 20 09 00 00 	add    rsp,0x920
  211d1c:	5d                   	pop    rbp
  211d1d:	c3                   	ret    
  211d1e:	48 8d 3d b3 16 03 00 	lea    rdi,[rip+0x316b3]        # 2433d8 <__unnamed_20>
  211d25:	31 c0                	xor    eax,eax
  211d27:	89 c6                	mov    esi,eax
        try in.readNoEof(magic[0..]);
  211d29:	e8 d2 98 ff ff       	call   20b600 <panic>
  211d2e:	48 8d 55 e0          	lea    rdx,[rbp-0x20]
  211d32:	48 8d 85 ec fb ff ff 	lea    rax,[rbp-0x414]
  211d39:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  211d3d:	48 c7 45 e8 04 00 00 	mov    QWORD PTR [rbp-0x18],0x4
  211d44:	00 
  211d45:	48 8b bd 70 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x490]
  211d4c:	48 8b b5 68 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x498]
  211d53:	e8 08 1c 00 00       	call   213960 <InStream(ReadError)_readNoEof>
  211d58:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  211d5c:	66 83 7d de 00       	cmp    WORD PTR [rbp-0x22],0x0
  211d61:	0f 85 2a dd ff ff    	jne    20fa91 <Elf_openFile+0xc1>
  211d67:	e9 4c dd ff ff       	jmp    20fab8 <Elf_openFile+0xe8>
  211d6c:	48 8d 3d 55 14 03 00 	lea    rdi,[rip+0x31455]        # 2431c8 <__unnamed_4>
  211d73:	31 c0                	xor    eax,eax
  211d75:	89 c6                	mov    esi,eax
        const sh_byte_count = u64(sh_entry_size) * u64(sh_entry_count);
  211d77:	e8 84 98 ff ff       	call   20b600 <panic>
  211d7c:	48 8d bd 68 fe ff ff 	lea    rdi,[rbp-0x198]
  211d83:	48 8b 85 a0 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x660]
  211d8a:	48 89 85 d0 fb ff ff 	mov    QWORD PTR [rbp-0x430],rax
        const end_sh = try math.add(u64, elf.section_header_offset, sh_byte_count);
  211d91:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  211d98:	48 8b 51 20          	mov    rdx,QWORD PTR [rcx+0x20]
  211d9c:	48 8b 8d d0 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x430]
  211da3:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  211daa:	e8 71 22 00 00       	call   214020 <add>
  211daf:	66 83 bd 68 fe ff ff 	cmp    WORD PTR [rbp-0x198],0x0
  211db6:	00 
  211db7:	0f 85 2d eb ff ff    	jne    2108ea <Elf_openFile+0xf1a>
  211dbd:	e9 52 eb ff ff       	jmp    210914 <Elf_openFile+0xf44>
  211dc2:	48 8d 3d ff 13 03 00 	lea    rdi,[rip+0x313ff]        # 2431c8 <__unnamed_4>
  211dc9:	31 c0                	xor    eax,eax
  211dcb:	89 c6                	mov    esi,eax
        const ph_byte_count = u64(ph_entry_size) * u64(ph_entry_count);
  211dcd:	e8 2e 98 ff ff       	call   20b600 <panic>
  211dd2:	48 8d bd 48 fe ff ff 	lea    rdi,[rbp-0x1b8]
  211dd9:	48 8b 85 90 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x670]
  211de0:	48 89 85 c0 fb ff ff 	mov    QWORD PTR [rbp-0x440],rax
        const end_ph = try math.add(u64, elf.program_header_offset, ph_byte_count);
  211de7:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
  211dee:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
  211df2:	48 8b 8d c0 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x440]
  211df9:	48 8b b5 70 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x490]
  211e00:	e8 1b 22 00 00       	call   214020 <add>
  211e05:	66 83 bd 48 fe ff ff 	cmp    WORD PTR [rbp-0x1b8],0x0
  211e0c:	00 
  211e0d:	0f 85 41 eb ff ff    	jne    210954 <Elf_openFile+0xf84>
  211e13:	e9 66 eb ff ff       	jmp    21097e <Elf_openFile+0xfae>
  211e18:	48 8d 3d b9 15 03 00 	lea    rdi,[rip+0x315b9]        # 2433d8 <__unnamed_20>
  211e1f:	31 c0                	xor    eax,eax
  211e21:	89 c6                	mov    esi,eax
        elf.string_section = &elf.section_headers[elf.string_section_index];
  211e23:	e8 d8 97 ff ff       	call   20b600 <panic>
  211e28:	48 8b 85 f0 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x910]
  211e2f:	48 c1 e0 06          	shl    rax,0x6
  211e33:	48 8b 8d e8 f6 ff ff 	mov    rcx,QWORD PTR [rbp-0x918]
  211e3a:	48 03 01             	add    rax,QWORD PTR [rcx]
  211e3d:	48 8b 95 f8 f6 ff ff 	mov    rdx,QWORD PTR [rbp-0x908]
  211e44:	48 89 02             	mov    QWORD PTR [rdx],rax
        if (elf.string_section.sh_type != SHT_STRTAB) {
  211e47:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
  211e4e:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
  211e52:	83 78 04 03          	cmp    DWORD PTR [rax+0x4],0x3
  211e56:	0f 85 7a fe ff ff    	jne    211cd6 <Elf_openFile+0x2306>
  211e5c:	e9 ac fe ff ff       	jmp    211d0d <Elf_openFile+0x233d>
  211e61:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  211e68:	0f 1f 84 00 00 00 00 
  211e6f:	00 

0000000000211e70 <File_close>:
    pub fn close(self: *File) void {
  211e70:	55                   	push   rbp
  211e71:	48 89 e5             	mov    rbp,rsp
  211e74:	48 83 ec 10          	sub    rsp,0x10
  211e78:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
        os.close(self.handle);
  211e7c:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  211e80:	8b 3f                	mov    edi,DWORD PTR [rdi]
  211e82:	e8 e9 35 00 00       	call   215470 <close>
        self.handle = undefined;
  211e87:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  211e8b:	89 38                	mov    DWORD PTR [rax],edi
    pub fn close(self: *File) void {
  211e8d:	48 83 c4 10          	add    rsp,0x10
  211e91:	5d                   	pop    rbp
  211e92:	c3                   	ret    
  211e93:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  211e9a:	84 00 00 00 00 00 

0000000000211ea0 <Elf_findSection>:
        elf.allocator.free(elf.section_headers);

        if (elf.auto_close_stream) elf.in_file.close();
    }

    pub fn findSection(elf: *Elf, name: []const u8) !?*SectionHeader {
  211ea0:	55                   	push   rbp
  211ea1:	48 89 e5             	mov    rbp,rsp
  211ea4:	48 81 ec 30 01 00 00 	sub    rsp,0x130
  211eab:	48 89 f8             	mov    rax,rdi
  211eae:	4c 8d 45 f0          	lea    r8,[rbp-0x10]
  211eb2:	48 89 55 80          	mov    QWORD PTR [rbp-0x80],rdx
        var file_stream = io.FileInStream.init(elf.in_file);
  211eb6:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
  211eba:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
  211ebd:	48 89 bd 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rdi
  211ec4:	4c 89 c7             	mov    rdi,r8
  211ec7:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  211ece:	48 89 d6             	mov    rsi,rdx
  211ed1:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
  211ed8:	48 89 8d 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rcx
  211edf:	e8 4c 1a 00 00       	call   213930 <FileInStream_init>
  211ee4:	be aa 00 00 00       	mov    esi,0xaa
  211ee9:	41 b9 08 00 00 00    	mov    r9d,0x8
  211eef:	44 89 ca             	mov    edx,r9d
  211ef2:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
  211ef9:	48 8d 8d 70 ff ff ff 	lea    rcx,[rbp-0x90]
  211f00:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  211f04:	48 89 bd 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdi
  211f0b:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  211f0f:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
        const in = &file_stream.stream;
  211f16:	48 83 c1 08          	add    rcx,0x8
  211f1a:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx

        section_loop: for (elf.section_headers) |*elf_section| {
  211f21:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  211f25:	48 89 cf             	mov    rdi,rcx
  211f28:	48 83 c7 38          	add    rdi,0x38
  211f2c:	48 89 bd 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdi
  211f33:	48 89 c7             	mov    rdi,rax
  211f36:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  211f3d:	e8 0e 29 02 00       	call   234850 <memset>
  211f42:	48 c7 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],0x0
  211f49:	00 00 00 00 
  211f4d:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  211f54:	48 8b 48 40          	mov    rcx,QWORD PTR [rax+0x40]
  211f58:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  211f5f:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
  211f66:	48 8b 8d 00 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x100]
  211f6d:	48 39 c8             	cmp    rax,rcx
  211f70:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  211f77:	0f 83 a6 02 00 00    	jae    212223 <Elf_findSection+0x383>
  211f7d:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  211f84:	48 c1 e0 06          	shl    rax,0x6
  211f88:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  211f8f:	48 03 01             	add    rax,QWORD PTR [rcx]
  211f92:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
            if (elf_section.sh_type == SHT_NULL) continue;
  211f99:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  211fa0:	83 78 04 00          	cmp    DWORD PTR [rax+0x4],0x0
  211fa4:	75 05                	jne    211fab <Elf_findSection+0x10b>
  211fa6:	e9 61 02 00 00       	jmp    21220c <Elf_findSection+0x36c>
  211fab:	eb 00                	jmp    211fad <Elf_findSection+0x10d>

            const name_offset = elf.string_section.offset + elf_section.name;
  211fad:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  211fb1:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
  211fb5:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  211fb9:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  211fc0:	8b 11                	mov    edx,DWORD PTR [rcx]
  211fc2:	89 d1                	mov    ecx,edx
  211fc4:	48 01 c8             	add    rax,rcx
  211fc7:	40 0f 92 c6          	setb   sil
  211fcb:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  211fd2:	40 88 b5 ef fe ff ff 	mov    BYTE PTR [rbp-0x111],sil
  211fd9:	0f 82 70 02 00 00    	jb     21224f <Elf_findSection+0x3af>
  211fdf:	e9 7b 02 00 00       	jmp    21225f <Elf_findSection+0x3bf>
            try elf.in_file.seekTo(name_offset);
  211fe4:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  211fe8:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  211fef:	66 89 85 ec fe ff ff 	mov    WORD PTR [rbp-0x114],ax
  211ff6:	e8 95 9c ff ff       	call   20bc90 <__zig_return_error>
  211ffb:	66 8b 85 ec fe ff ff 	mov    ax,WORD PTR [rbp-0x114]
  212002:	66 89 45 d8          	mov    WORD PTR [rbp-0x28],ax
  212006:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  21200a:	48 8b 8d 30 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd0]
  212011:	48 89 39             	mov    QWORD PTR [rcx],rdi
  212014:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  212018:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21201c:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  212023:	48 81 c4 30 01 00 00 	add    rsp,0x130
  21202a:	5d                   	pop    rbp
  21202b:	c3                   	ret    
  21202c:	48 8d bd 4f ff ff ff 	lea    rdi,[rbp-0xb1]
  212033:	be aa 00 00 00       	mov    esi,0xaa
  212038:	b8 01 00 00 00       	mov    eax,0x1
  21203d:	89 c2                	mov    edx,eax

            for (name) |expected_c| {
  21203f:	e8 0c 28 02 00       	call   234850 <memset>
  212044:	48 c7 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],0x0
  21204b:	00 00 00 00 
  21204f:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  212056:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
  21205a:	48 89 bd e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rdi
  212061:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  212068:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  21206f:	48 39 c8             	cmp    rax,rcx
  212072:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
  212079:	0f 83 dc 00 00 00    	jae    21215b <Elf_findSection+0x2bb>
  21207f:	48 8d 7d d0          	lea    rdi,[rbp-0x30]
  212083:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  21208a:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  21208d:	48 8b 95 d8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x128]
  212094:	40 8a 34 11          	mov    sil,BYTE PTR [rcx+rdx*1]
  212098:	40 88 b5 4f ff ff ff 	mov    BYTE PTR [rbp-0xb1],sil
                const target_c = try in.readByte();
  21209f:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  2120a6:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  2120ad:	e8 2e 1a 00 00       	call   213ae0 <InStream(ReadError)_readByte>
  2120b2:	66 83 7d d0 00       	cmp    WORD PTR [rbp-0x30],0x0
  2120b7:	74 48                	je     212101 <Elf_findSection+0x261>
  2120b9:	66 8b 45 d0          	mov    ax,WORD PTR [rbp-0x30]
  2120bd:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  2120c4:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  2120cb:	e8 c0 9b ff ff       	call   20bc90 <__zig_return_error>
  2120d0:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [rbp-0x12a]
  2120d7:	66 89 45 b8          	mov    WORD PTR [rbp-0x48],ax
  2120db:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  2120df:	48 8b 8d 30 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd0]
  2120e6:	48 89 39             	mov    QWORD PTR [rcx],rdi
  2120e9:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  2120ed:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  2120f1:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  2120f8:	48 81 c4 30 01 00 00 	add    rsp,0x130
  2120ff:	5d                   	pop    rbp
  212100:	c3                   	ret    
  212101:	8a 45 d2             	mov    al,BYTE PTR [rbp-0x2e]
  212104:	88 85 3f ff ff ff    	mov    BYTE PTR [rbp-0xc1],al
                if (target_c == 0 or expected_c != target_c) continue :section_loop;
  21210a:	80 bd 3f ff ff ff 00 	cmp    BYTE PTR [rbp-0xc1],0x0
  212111:	0f 94 c0             	sete   al
  212114:	a8 01                	test   al,0x1
  212116:	88 85 d5 fe ff ff    	mov    BYTE PTR [rbp-0x12b],al
  21211c:	75 15                	jne    212133 <Elf_findSection+0x293>
  21211e:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [rbp-0xb1]
  212124:	3a 85 3f ff ff ff    	cmp    al,BYTE PTR [rbp-0xc1]
  21212a:	0f 95 c0             	setne  al
  21212d:	88 85 d5 fe ff ff    	mov    BYTE PTR [rbp-0x12b],al
  212133:	8a 85 d5 fe ff ff    	mov    al,BYTE PTR [rbp-0x12b]
  212139:	a8 01                	test   al,0x1
  21213b:	75 02                	jne    21213f <Elf_findSection+0x29f>
  21213d:	eb 05                	jmp    212144 <Elf_findSection+0x2a4>
  21213f:	e9 c8 00 00 00       	jmp    21220c <Elf_findSection+0x36c>
            for (name) |expected_c| {
  212144:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  21214b:	48 83 c0 01          	add    rax,0x1
  21214f:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  212156:	e9 06 ff ff ff       	jmp    212061 <Elf_findSection+0x1c1>
  21215b:	48 8d 7d b0          	lea    rdi,[rbp-0x50]
            }

            {
                const null_byte = try in.readByte();
  21215f:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  212166:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21216d:	e8 6e 19 00 00       	call   213ae0 <InStream(ReadError)_readByte>
  212172:	66 83 7d b0 00       	cmp    WORD PTR [rbp-0x50],0x0
  212177:	74 48                	je     2121c1 <Elf_findSection+0x321>
  212179:	66 8b 45 b0          	mov    ax,WORD PTR [rbp-0x50]
  21217d:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  212184:	66 89 85 d2 fe ff ff 	mov    WORD PTR [rbp-0x12e],ax
  21218b:	e8 00 9b ff ff       	call   20bc90 <__zig_return_error>
  212190:	66 8b 85 d2 fe ff ff 	mov    ax,WORD PTR [rbp-0x12e]
  212197:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  21219b:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  21219f:	48 8b 8d 30 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd0]
  2121a6:	48 89 39             	mov    QWORD PTR [rcx],rdi
  2121a9:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  2121ad:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  2121b1:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  2121b8:	48 81 c4 30 01 00 00 	add    rsp,0x130
  2121bf:	5d                   	pop    rbp
  2121c0:	c3                   	ret    
  2121c1:	8a 45 b2             	mov    al,BYTE PTR [rbp-0x4e]
  2121c4:	88 85 3e ff ff ff    	mov    BYTE PTR [rbp-0xc2],al
                if (null_byte == 0) return elf_section;
  2121ca:	80 bd 3e ff ff ff 00 	cmp    BYTE PTR [rbp-0xc2],0x0
  2121d1:	75 37                	jne    21220a <Elf_findSection+0x36a>
  2121d3:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  2121da:	66 c7 45 88 00 00    	mov    WORD PTR [rbp-0x78],0x0
  2121e0:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  2121e4:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  2121e8:	48 8b 8d 30 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd0]
  2121ef:	48 89 01             	mov    QWORD PTR [rcx],rax
  2121f2:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  2121f6:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2121fa:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  212201:	48 81 c4 30 01 00 00 	add    rsp,0x130
  212208:	5d                   	pop    rbp
  212209:	c3                   	ret    
        section_loop: for (elf.section_headers) |*elf_section| {
  21220a:	eb 00                	jmp    21220c <Elf_findSection+0x36c>
  21220c:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  212213:	48 83 c0 01          	add    rax,0x1
  212217:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  21221e:	e9 3c fd ff ff       	jmp    211f5f <Elf_findSection+0xbf>
            }
        }

        return null;
  212223:	48 8b 05 86 e0 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffee086]        # 2002b0 <__unnamed_100>
  21222a:	48 8b 8d 30 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd0]
  212231:	48 89 01             	mov    QWORD PTR [rcx],rax
  212234:	48 8b 05 7d e0 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffee07d]        # 2002b8 <__unnamed_100+0x8>
  21223b:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21223f:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  212246:	48 81 c4 30 01 00 00 	add    rsp,0x130
  21224d:	5d                   	pop    rbp
  21224e:	c3                   	ret    
  21224f:	48 8d 3d 72 0f 03 00 	lea    rdi,[rip+0x30f72]        # 2431c8 <__unnamed_4>
  212256:	31 c0                	xor    eax,eax
  212258:	89 c6                	mov    esi,eax
            const name_offset = elf.string_section.offset + elf_section.name;
  21225a:	e8 a1 93 ff ff       	call   20b600 <panic>
  21225f:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  212266:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
            try elf.in_file.seekTo(name_offset);
  21226d:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  212271:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  212274:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
  21227b:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  212282:	e8 89 1f 00 00       	call   214210 <File_seekTo>
  212287:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  21228b:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  212290:	0f 85 4e fd ff ff    	jne    211fe4 <Elf_findSection+0x144>
  212296:	e9 91 fd ff ff       	jmp    21202c <Elf_findSection+0x18c>
  21229b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000002122a0 <Elf_close>:
    pub fn close(elf: *Elf) void {
  2122a0:	55                   	push   rbp
  2122a1:	48 89 e5             	mov    rbp,rsp
  2122a4:	48 83 ec 10          	sub    rsp,0x10
  2122a8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
        elf.allocator.free(elf.section_headers);
  2122ac:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  2122b0:	48 8b 7f 48          	mov    rdi,QWORD PTR [rdi+0x48]
  2122b4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2122b8:	48 83 c0 38          	add    rax,0x38
  2122bc:	48 89 c6             	mov    rsi,rax
  2122bf:	e8 3c 21 00 00       	call   214400 <Allocator_free>
        if (elf.auto_close_stream) elf.in_file.close();
  2122c4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2122c8:	f6 40 08 01          	test   BYTE PTR [rax+0x8],0x1
  2122cc:	75 02                	jne    2122d0 <Elf_close+0x30>
  2122ce:	eb 0e                	jmp    2122de <Elf_close+0x3e>
  2122d0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2122d4:	48 8b 38             	mov    rdi,QWORD PTR [rax]
  2122d7:	e8 94 fb ff ff       	call   211e70 <File_close>
  2122dc:	eb 02                	jmp    2122e0 <Elf_close+0x40>
  2122de:	eb 00                	jmp    2122e0 <Elf_close+0x40>
    pub fn close(elf: *Elf) void {
  2122e0:	48 83 c4 10          	add    rsp,0x10
  2122e4:	5d                   	pop    rbp
  2122e5:	c3                   	ret    
  2122e6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  2122ed:	00 00 00 

00000000002122f0 <scanAllCompileUnits>:
fn scanAllCompileUnits(st: *ElfStackTrace) !void {
  2122f0:	55                   	push   rbp
  2122f1:	48 89 e5             	mov    rbp,rsp
  2122f4:	48 81 ec f0 03 00 00 	sub    rsp,0x3f0
  2122fb:	48 89 b5 e8 fd ff ff 	mov    QWORD PTR [rbp-0x218],rsi
    const debug_info_end = st.debug_info.offset + st.debug_info.size;
  212302:	48 8b b5 e8 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x218]
  212309:	48 8b 76 60          	mov    rsi,QWORD PTR [rsi+0x60]
  21230d:	48 8b 76 18          	mov    rsi,QWORD PTR [rsi+0x18]
  212311:	48 8b 85 e8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x218]
  212318:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
  21231c:	48 03 70 20          	add    rsi,QWORD PTR [rax+0x20]
  212320:	0f 92 c1             	setb   cl
  212323:	48 89 bd 08 fd ff ff 	mov    QWORD PTR [rbp-0x2f8],rdi
  21232a:	48 89 b5 00 fd ff ff 	mov    QWORD PTR [rbp-0x300],rsi
  212331:	88 8d ff fc ff ff    	mov    BYTE PTR [rbp-0x301],cl
  212337:	0f 82 d7 08 00 00    	jb     212c14 <scanAllCompileUnits+0x924>
  21233d:	e9 e2 08 00 00       	jmp    212c24 <scanAllCompileUnits+0x934>
    while (this_unit_offset < debug_info_end) {
  212342:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
  212349:	48 3b 85 e0 fd ff ff 	cmp    rax,QWORD PTR [rbp-0x220]
  212350:	0f 83 ad 08 00 00    	jae    212c03 <scanAllCompileUnits+0x913>
        try st.self_exe_file.seekTo(this_unit_offset);
  212356:	48 8b b5 e8 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x218]
  21235d:	48 8b 95 d8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x228]
  212364:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  21236b:	e8 a0 1e 00 00       	call   214210 <File_seekTo>
  212370:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  212374:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  212379:	74 27                	je     2123a2 <scanAllCompileUnits+0xb2>
  21237b:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  21237f:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  212386:	66 89 85 fc fc ff ff 	mov    WORD PTR [rbp-0x304],ax
  21238d:	e8 fe 98 ff ff       	call   20bc90 <__zig_return_error>
  212392:	66 8b 85 fc fc ff ff 	mov    ax,WORD PTR [rbp-0x304]
  212399:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  2123a0:	5d                   	pop    rbp
  2123a1:	c3                   	ret    
  2123a2:	48 8d 7d d8          	lea    rdi,[rbp-0x28]
  2123a6:	48 8d 85 b7 fd ff ff 	lea    rax,[rbp-0x249]
  2123ad:	be aa 00 00 00       	mov    esi,0xaa
  2123b2:	b9 01 00 00 00       	mov    ecx,0x1
  2123b7:	89 ca                	mov    edx,ecx
        var is_64: bool = undefined;
  2123b9:	49 89 c0             	mov    r8,rax
  2123bc:	48 89 bd f0 fc ff ff 	mov    QWORD PTR [rbp-0x310],rdi
  2123c3:	4c 89 c7             	mov    rdi,r8
  2123c6:	48 89 85 e8 fc ff ff 	mov    QWORD PTR [rbp-0x318],rax
  2123cd:	e8 7e 24 02 00       	call   234850 <memset>
        const unit_length = try readInitialLength(@typeOf(in_stream.readFn).ReturnType.ErrorSet, in_stream, &is_64);
  2123d2:	48 8b 95 b8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x248]
  2123d9:	48 8b bd f0 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x310]
  2123e0:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  2123e7:	48 8b 8d e8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x318]
  2123ee:	e8 5d 31 00 00       	call   215550 <readInitialLength>
  2123f3:	66 83 7d d8 00       	cmp    WORD PTR [rbp-0x28],0x0
  2123f8:	74 27                	je     212421 <scanAllCompileUnits+0x131>
  2123fa:	66 8b 45 d8          	mov    ax,WORD PTR [rbp-0x28]
  2123fe:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  212405:	66 89 85 e6 fc ff ff 	mov    WORD PTR [rbp-0x31a],ax
  21240c:	e8 7f 98 ff ff       	call   20bc90 <__zig_return_error>
  212411:	66 8b 85 e6 fc ff ff 	mov    ax,WORD PTR [rbp-0x31a]
  212418:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  21241f:	5d                   	pop    rbp
  212420:	c3                   	ret    
  212421:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  212425:	48 89 85 a8 fd ff ff 	mov    QWORD PTR [rbp-0x258],rax
        if (unit_length == 0) return;
  21242c:	48 83 bd a8 fd ff ff 	cmp    QWORD PTR [rbp-0x258],0x0
  212433:	00 
  212434:	75 11                	jne    212447 <scanAllCompileUnits+0x157>
  212436:	31 c0                	xor    eax,eax
  212438:	66 89 c1             	mov    cx,ax
  21243b:	66 89 c8             	mov    ax,cx
  21243e:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  212445:	5d                   	pop    rbp
  212446:	c3                   	ret    
  212447:	eb 00                	jmp    212449 <scanAllCompileUnits+0x159>
        const next_offset = unit_length + (if (is_64) usize(12) else usize(4));
  212449:	48 8b 85 a8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x258]
  212450:	f6 85 b7 fd ff ff 01 	test   BYTE PTR [rbp-0x249],0x1
  212457:	48 89 85 d8 fc ff ff 	mov    QWORD PTR [rbp-0x328],rax
  21245e:	75 02                	jne    212462 <scanAllCompileUnits+0x172>
  212460:	eb 10                	jmp    212472 <scanAllCompileUnits+0x182>
  212462:	b8 0c 00 00 00       	mov    eax,0xc
  212467:	89 c1                	mov    ecx,eax
  212469:	48 89 8d d0 fc ff ff 	mov    QWORD PTR [rbp-0x330],rcx
  212470:	eb 10                	jmp    212482 <scanAllCompileUnits+0x192>
  212472:	b8 04 00 00 00       	mov    eax,0x4
  212477:	89 c1                	mov    ecx,eax
  212479:	48 89 8d d0 fc ff ff 	mov    QWORD PTR [rbp-0x330],rcx
  212480:	eb 00                	jmp    212482 <scanAllCompileUnits+0x192>
  212482:	48 8b 85 d0 fc ff ff 	mov    rax,QWORD PTR [rbp-0x330]
  212489:	48 8b 8d d8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x328]
  212490:	48 01 c1             	add    rcx,rax
  212493:	0f 92 c2             	setb   dl
  212496:	48 89 8d c8 fc ff ff 	mov    QWORD PTR [rbp-0x338],rcx
  21249d:	88 95 c7 fc ff ff    	mov    BYTE PTR [rbp-0x339],dl
  2124a3:	0f 82 e7 07 00 00    	jb     212c90 <scanAllCompileUnits+0x9a0>
  2124a9:	e9 f2 07 00 00       	jmp    212ca0 <scanAllCompileUnits+0x9b0>
        const version = try in_stream.readInt(st.elf.endian, u16);
  2124ae:	66 8b 45 c0          	mov    ax,WORD PTR [rbp-0x40]
  2124b2:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  2124b9:	66 89 85 c4 fc ff ff 	mov    WORD PTR [rbp-0x33c],ax
  2124c0:	e8 cb 97 ff ff       	call   20bc90 <__zig_return_error>
  2124c5:	66 8b 85 c4 fc ff ff 	mov    ax,WORD PTR [rbp-0x33c]
  2124cc:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  2124d3:	5d                   	pop    rbp
  2124d4:	c3                   	ret    
  2124d5:	66 8b 45 c2          	mov    ax,WORD PTR [rbp-0x3e]
  2124d9:	66 89 85 9e fd ff ff 	mov    WORD PTR [rbp-0x262],ax
        if (version < 2 or version > 5) return error.InvalidDebugInfo;
  2124e0:	66 83 bd 9e fd ff ff 	cmp    WORD PTR [rbp-0x262],0x2
  2124e7:	02 
  2124e8:	0f 92 c1             	setb   cl
  2124eb:	f6 c1 01             	test   cl,0x1
  2124ee:	88 8d c3 fc ff ff    	mov    BYTE PTR [rbp-0x33d],cl
  2124f4:	75 11                	jne    212507 <scanAllCompileUnits+0x217>
  2124f6:	66 83 bd 9e fd ff ff 	cmp    WORD PTR [rbp-0x262],0x5
  2124fd:	05 
  2124fe:	0f 97 c0             	seta   al
  212501:	88 85 c3 fc ff ff    	mov    BYTE PTR [rbp-0x33d],al
  212507:	8a 85 c3 fc ff ff    	mov    al,BYTE PTR [rbp-0x33d]
  21250d:	a8 01                	test   al,0x1
  21250f:	75 02                	jne    212513 <scanAllCompileUnits+0x223>
  212511:	eb 19                	jmp    21252c <scanAllCompileUnits+0x23c>
  212513:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  21251a:	e8 71 97 ff ff       	call   20bc90 <__zig_return_error>
  21251f:	66 b8 25 00          	mov    ax,0x25
  212523:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  21252a:	5d                   	pop    rbp
  21252b:	c3                   	ret    
  21252c:	eb 00                	jmp    21252e <scanAllCompileUnits+0x23e>
        const debug_abbrev_offset = if (is_64) try in_stream.readInt(st.elf.endian, u64) else try in_stream.readInt(st.elf.endian, u32);
  21252e:	f6 85 b7 fd ff ff 01 	test   BYTE PTR [rbp-0x249],0x1
  212535:	75 02                	jne    212539 <scanAllCompileUnits+0x249>
  212537:	eb 6c                	jmp    2125a5 <scanAllCompileUnits+0x2b5>
  212539:	48 8d 45 a8          	lea    rax,[rbp-0x58]
  21253d:	48 8b 95 b8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x248]
  212544:	48 8b 8d e8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x218]
  21254b:	40 8a 71 12          	mov    sil,BYTE PTR [rcx+0x12]
  21254f:	40 0f b6 ce          	movzx  ecx,sil
  212553:	48 8d 7d a8          	lea    rdi,[rbp-0x58]
  212557:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  21255e:	48 89 85 b8 fc ff ff 	mov    QWORD PTR [rbp-0x348],rax
  212565:	e8 86 19 00 00       	call   213ef0 <InStream(ReadError)_readInt.33>
  21256a:	66 83 7d a8 00       	cmp    WORD PTR [rbp-0x58],0x0
  21256f:	74 27                	je     212598 <scanAllCompileUnits+0x2a8>
  212571:	66 8b 45 a8          	mov    ax,WORD PTR [rbp-0x58]
  212575:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  21257c:	66 89 85 b6 fc ff ff 	mov    WORD PTR [rbp-0x34a],ax
  212583:	e8 08 97 ff ff       	call   20bc90 <__zig_return_error>
  212588:	66 8b 85 b6 fc ff ff 	mov    ax,WORD PTR [rbp-0x34a]
  21258f:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  212596:	5d                   	pop    rbp
  212597:	c3                   	ret    
  212598:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  21259c:	48 89 85 a8 fc ff ff 	mov    QWORD PTR [rbp-0x358],rax
  2125a3:	eb 6b                	jmp    212610 <scanAllCompileUnits+0x320>
  2125a5:	48 8d 45 90          	lea    rax,[rbp-0x70]
  2125a9:	48 8b 95 b8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x248]
  2125b0:	48 8b 8d e8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x218]
  2125b7:	40 8a 71 12          	mov    sil,BYTE PTR [rcx+0x12]
  2125bb:	40 0f b6 ce          	movzx  ecx,sil
  2125bf:	48 8d 7d 90          	lea    rdi,[rbp-0x70]
  2125c3:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  2125ca:	48 89 85 a0 fc ff ff 	mov    QWORD PTR [rbp-0x360],rax
  2125d1:	e8 0a 18 00 00       	call   213de0 <InStream(ReadError)_readInt.32>
  2125d6:	66 83 7d 90 00       	cmp    WORD PTR [rbp-0x70],0x0
  2125db:	74 27                	je     212604 <scanAllCompileUnits+0x314>
  2125dd:	66 8b 45 90          	mov    ax,WORD PTR [rbp-0x70]
  2125e1:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  2125e8:	66 89 85 9e fc ff ff 	mov    WORD PTR [rbp-0x362],ax
  2125ef:	e8 9c 96 ff ff       	call   20bc90 <__zig_return_error>
  2125f4:	66 8b 85 9e fc ff ff 	mov    ax,WORD PTR [rbp-0x362]
  2125fb:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  212602:	5d                   	pop    rbp
  212603:	c3                   	ret    
  212604:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
  212607:	89 c1                	mov    ecx,eax
  212609:	48 89 8d a8 fc ff ff 	mov    QWORD PTR [rbp-0x358],rcx
  212610:	48 8b 85 a8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x358]
  212617:	48 8d 7d 80          	lea    rdi,[rbp-0x80]
  21261b:	48 89 85 90 fd ff ff 	mov    QWORD PTR [rbp-0x270],rax
        const address_size = try in_stream.readByte();
  212622:	48 8b 95 b8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x248]
  212629:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  212630:	e8 ab 14 00 00       	call   213ae0 <InStream(ReadError)_readByte>
  212635:	66 83 7d 80 00       	cmp    WORD PTR [rbp-0x80],0x0
  21263a:	74 27                	je     212663 <scanAllCompileUnits+0x373>
  21263c:	66 8b 45 80          	mov    ax,WORD PTR [rbp-0x80]
  212640:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  212647:	66 89 85 9c fc ff ff 	mov    WORD PTR [rbp-0x364],ax
  21264e:	e8 3d 96 ff ff       	call   20bc90 <__zig_return_error>
  212653:	66 8b 85 9c fc ff ff 	mov    ax,WORD PTR [rbp-0x364]
  21265a:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  212661:	5d                   	pop    rbp
  212662:	c3                   	ret    
  212663:	8a 45 82             	mov    al,BYTE PTR [rbp-0x7e]
  212666:	88 85 8f fd ff ff    	mov    BYTE PTR [rbp-0x271],al
        if (address_size != @sizeOf(usize)) return error.InvalidDebugInfo;
  21266c:	80 bd 8f fd ff ff 08 	cmp    BYTE PTR [rbp-0x271],0x8
  212673:	74 19                	je     21268e <scanAllCompileUnits+0x39e>
  212675:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  21267c:	e8 0f 96 ff ff       	call   20bc90 <__zig_return_error>
  212681:	66 b8 25 00          	mov    ax,0x25
  212685:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  21268c:	5d                   	pop    rbp
  21268d:	c3                   	ret    
  21268e:	eb 00                	jmp    212690 <scanAllCompileUnits+0x3a0>
  212690:	48 8d bd 68 ff ff ff 	lea    rdi,[rbp-0x98]
        const compile_unit_pos = try st.self_exe_file.getPos();
  212697:	48 8b 95 e8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x218]
  21269e:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  2126a5:	e8 e6 2f 00 00       	call   215690 <File_getPos>
  2126aa:	66 83 bd 68 ff ff ff 	cmp    WORD PTR [rbp-0x98],0x0
  2126b1:	00 
  2126b2:	74 2a                	je     2126de <scanAllCompileUnits+0x3ee>
  2126b4:	66 8b 85 68 ff ff ff 	mov    ax,WORD PTR [rbp-0x98]
  2126bb:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  2126c2:	66 89 85 9a fc ff ff 	mov    WORD PTR [rbp-0x366],ax
  2126c9:	e8 c2 95 ff ff       	call   20bc90 <__zig_return_error>
  2126ce:	66 8b 85 9a fc ff ff 	mov    ax,WORD PTR [rbp-0x366]
  2126d5:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  2126dc:	5d                   	pop    rbp
  2126dd:	c3                   	ret    
  2126de:	48 8d bd 48 ff ff ff 	lea    rdi,[rbp-0xb8]
  2126e5:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  2126ec:	48 89 85 80 fd ff ff 	mov    QWORD PTR [rbp-0x280],rax
        const abbrev_table = try getAbbrevTable(st, debug_abbrev_offset);
  2126f3:	48 8b 95 e8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x218]
  2126fa:	48 8b 8d 90 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x270]
  212701:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  212708:	e8 03 31 00 00       	call   215810 <getAbbrevTable>
  21270d:	66 83 bd 48 ff ff ff 	cmp    WORD PTR [rbp-0xb8],0x0
  212714:	00 
  212715:	74 2a                	je     212741 <scanAllCompileUnits+0x451>
  212717:	66 8b 85 48 ff ff ff 	mov    ax,WORD PTR [rbp-0xb8]
  21271e:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  212725:	66 89 85 98 fc ff ff 	mov    WORD PTR [rbp-0x368],ax
  21272c:	e8 5f 95 ff ff       	call   20bc90 <__zig_return_error>
  212731:	66 8b 85 98 fc ff ff 	mov    ax,WORD PTR [rbp-0x368]
  212738:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  21273f:	5d                   	pop    rbp
  212740:	c3                   	ret    
  212741:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  212748:	48 89 85 78 fd ff ff 	mov    QWORD PTR [rbp-0x288],rax
        try st.self_exe_file.seekTo(compile_unit_pos);
  21274f:	48 8b b5 e8 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x218]
  212756:	48 8b 95 80 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x280]
  21275d:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  212764:	e8 a7 1a 00 00       	call   214210 <File_seekTo>
  212769:	66 89 85 36 ff ff ff 	mov    WORD PTR [rbp-0xca],ax
  212770:	66 83 bd 36 ff ff ff 	cmp    WORD PTR [rbp-0xca],0x0
  212777:	00 
  212778:	74 2a                	je     2127a4 <scanAllCompileUnits+0x4b4>
  21277a:	66 8b 85 36 ff ff ff 	mov    ax,WORD PTR [rbp-0xca]
  212781:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  212788:	66 89 85 96 fc ff ff 	mov    WORD PTR [rbp-0x36a],ax
  21278f:	e8 fc 94 ff ff       	call   20bc90 <__zig_return_error>
  212794:	66 8b 85 96 fc ff ff 	mov    ax,WORD PTR [rbp-0x36a]
  21279b:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  2127a2:	5d                   	pop    rbp
  2127a3:	c3                   	ret    
        const compile_unit_die = try st.allocator().create(try parseDie(st, abbrev_table, is_64));
  2127a4:	48 8b bd e8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x218]
  2127ab:	e8 50 34 00 00       	call   215c00 <ElfStackTrace_allocator>
  2127b0:	48 8d bd f0 fe ff ff 	lea    rdi,[rbp-0x110]
  2127b7:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  2127be:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
  2127c5:	48 8b 85 e8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x218]
  2127cc:	48 8b 8d 78 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x288]
  2127d3:	40 8a b5 b7 fd ff ff 	mov    sil,BYTE PTR [rbp-0x249]
  2127da:	44 0f b6 c6          	movzx  r8d,sil
  2127de:	4c 8d 8d f0 fe ff ff 	lea    r9,[rbp-0x110]
  2127e5:	48 89 bd 88 fc ff ff 	mov    QWORD PTR [rbp-0x378],rdi
  2127ec:	4c 89 cf             	mov    rdi,r9
  2127ef:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  2127f6:	48 89 95 80 fc ff ff 	mov    QWORD PTR [rbp-0x380],rdx
  2127fd:	48 89 c2             	mov    rdx,rax
  212800:	e8 1b 34 00 00       	call   215c20 <parseDie>
  212805:	66 83 bd f0 fe ff ff 	cmp    WORD PTR [rbp-0x110],0x0
  21280c:	00 
  21280d:	74 2a                	je     212839 <scanAllCompileUnits+0x549>
  21280f:	66 8b 85 f0 fe ff ff 	mov    ax,WORD PTR [rbp-0x110]
  212816:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  21281d:	66 89 85 7e fc ff ff 	mov    WORD PTR [rbp-0x382],ax
  212824:	e8 67 94 ff ff       	call   20bc90 <__zig_return_error>
  212829:	66 8b 85 7e fc ff ff 	mov    ax,WORD PTR [rbp-0x382]
  212830:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  212837:	5d                   	pop    rbp
  212838:	c3                   	ret    
  212839:	48 8d bd a8 fe ff ff 	lea    rdi,[rbp-0x158]
  212840:	48 8d 85 f0 fe ff ff 	lea    rax,[rbp-0x110]
  212847:	48 83 c0 08          	add    rax,0x8
  21284b:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  212852:	48 8b 95 80 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x380]
  212859:	48 89 c1             	mov    rcx,rax
  21285c:	e8 7f 39 00 00       	call   2161e0 <Allocator_create.37>
  212861:	66 83 bd a8 fe ff ff 	cmp    WORD PTR [rbp-0x158],0x0
  212868:	00 
  212869:	74 2a                	je     212895 <scanAllCompileUnits+0x5a5>
  21286b:	66 8b 85 a8 fe ff ff 	mov    ax,WORD PTR [rbp-0x158]
  212872:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  212879:	66 89 85 7c fc ff ff 	mov    WORD PTR [rbp-0x384],ax
  212880:	e8 0b 94 ff ff       	call   20bc90 <__zig_return_error>
  212885:	66 8b 85 7c fc ff ff 	mov    ax,WORD PTR [rbp-0x384]
  21288c:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  212893:	5d                   	pop    rbp
  212894:	c3                   	ret    
  212895:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  21289c:	48 89 85 70 fd ff ff 	mov    QWORD PTR [rbp-0x290],rax
        if (compile_unit_die.tag_id != DW.TAG_compile_unit) return error.InvalidDebugInfo;
  2128a3:	48 8b 85 70 fd ff ff 	mov    rax,QWORD PTR [rbp-0x290]
  2128aa:	48 83 38 11          	cmp    QWORD PTR [rax],0x11
  2128ae:	74 19                	je     2128c9 <scanAllCompileUnits+0x5d9>
  2128b0:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  2128b7:	e8 d4 93 ff ff       	call   20bc90 <__zig_return_error>
  2128bc:	66 b8 25 00          	mov    ax,0x25
  2128c0:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  2128c7:	5d                   	pop    rbp
  2128c8:	c3                   	ret    
  2128c9:	eb 00                	jmp    2128cb <scanAllCompileUnits+0x5db>
  2128cb:	48 8d bd 88 fe ff ff 	lea    rdi,[rbp-0x178]
  2128d2:	b8 11 00 00 00       	mov    eax,0x11
  2128d7:	89 c1                	mov    ecx,eax
            if (compile_unit_die.getAttrAddr(DW.AT_low_pc)) |low_pc| {
  2128d9:	48 8b 95 70 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x290]
  2128e0:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  2128e7:	e8 04 3a 00 00       	call   2162f0 <Die_getAttrAddr>
  2128ec:	66 83 bd 88 fe ff ff 	cmp    WORD PTR [rbp-0x178],0x0
  2128f3:	00 
  2128f4:	0f 85 a1 01 00 00    	jne    212a9b <scanAllCompileUnits+0x7ab>
  2128fa:	b8 12 00 00 00       	mov    eax,0x12
  2128ff:	89 c6                	mov    esi,eax
  212901:	48 8b 8d 90 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x170]
  212908:	48 89 8d 68 fd ff ff 	mov    QWORD PTR [rbp-0x298],rcx
                if (compile_unit_die.getAttr(DW.AT_high_pc)) |high_pc_value| {
  21290f:	48 8b bd 70 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x290]
  212916:	e8 f5 3a 00 00       	call   216410 <Die_getAttr>
  21291b:	48 89 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rax
  212922:	48 83 bd 70 fe ff ff 	cmp    QWORD PTR [rbp-0x190],0x0
  212929:	00 
  21292a:	0f 84 5b 01 00 00    	je     212a8b <scanAllCompileUnits+0x79b>
  212930:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  212937:	48 89 85 60 fd ff ff 	mov    QWORD PTR [rbp-0x2a0],rax
                    const pc_end = switch (high_pc_value.*) {
  21293e:	48 8b 85 60 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2a0]
  212945:	8a 48 18             	mov    cl,BYTE PTR [rax+0x18]
  212948:	84 c9                	test   cl,cl
  21294a:	48 89 85 70 fc ff ff 	mov    QWORD PTR [rbp-0x390],rax
  212951:	88 8d 6f fc ff ff    	mov    BYTE PTR [rbp-0x391],cl
  212957:	74 2f                	je     212988 <scanAllCompileUnits+0x698>
  212959:	eb 00                	jmp    21295b <scanAllCompileUnits+0x66b>
  21295b:	8a 85 6f fc ff ff    	mov    al,BYTE PTR [rbp-0x391]
  212961:	24 0f                	and    al,0xf
  212963:	2c 02                	sub    al,0x2
  212965:	88 85 6e fc ff ff    	mov    BYTE PTR [rbp-0x392],al
  21296b:	74 32                	je     21299f <scanAllCompileUnits+0x6af>
  21296d:	eb 00                	jmp    21296f <scanAllCompileUnits+0x67f>
                        else => return error.InvalidDebugInfo,
  21296f:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  212976:	e8 15 93 ff ff       	call   20bc90 <__zig_return_error>
  21297b:	66 b8 25 00          	mov    ax,0x25
  21297f:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  212986:	5d                   	pop    rbp
  212987:	c3                   	ret    
                        FormValue.Address => |value| value,
  212988:	48 8b 85 70 fc ff ff 	mov    rax,QWORD PTR [rbp-0x390]
  21298f:	8a 48 18             	mov    cl,BYTE PTR [rax+0x18]
  212992:	84 c9                	test   cl,cl
  212994:	0f 84 55 03 00 00    	je     212cef <scanAllCompileUnits+0x9ff>
  21299a:	e9 74 03 00 00       	jmp    212d13 <scanAllCompileUnits+0xa23>
                        FormValue.Const => |value| b: {
  21299f:	48 8b 85 70 fc ff ff 	mov    rax,QWORD PTR [rbp-0x390]
  2129a6:	8a 48 18             	mov    cl,BYTE PTR [rax+0x18]
  2129a9:	80 e9 02             	sub    cl,0x2
  2129ac:	88 8d 6d fc ff ff    	mov    BYTE PTR [rbp-0x393],cl
  2129b2:	0f 84 6b 03 00 00    	je     212d23 <scanAllCompileUnits+0xa33>
  2129b8:	e9 ba 03 00 00       	jmp    212d77 <scanAllCompileUnits+0xa87>
                            const offset = try value.asUnsignedLe();
  2129bd:	66 8b 85 60 fe ff ff 	mov    ax,WORD PTR [rbp-0x1a0]
  2129c4:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  2129cb:	66 89 85 6a fc ff ff 	mov    WORD PTR [rbp-0x396],ax
  2129d2:	e8 b9 92 ff ff       	call   20bc90 <__zig_return_error>
  2129d7:	66 8b 85 6a fc ff ff 	mov    ax,WORD PTR [rbp-0x396]
  2129de:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  2129e5:	5d                   	pop    rbp
  2129e6:	c3                   	ret    
  2129e7:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
  2129ee:	48 89 85 38 fd ff ff 	mov    QWORD PTR [rbp-0x2c8],rax
                            break :b (low_pc + offset);
  2129f5:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  2129fc:	48 03 85 38 fd ff ff 	add    rax,QWORD PTR [rbp-0x2c8]
  212a03:	0f 92 c1             	setb   cl
  212a06:	48 89 85 60 fc ff ff 	mov    QWORD PTR [rbp-0x3a0],rax
  212a0d:	88 8d 5f fc ff ff    	mov    BYTE PTR [rbp-0x3a1],cl
  212a13:	0f 82 6e 03 00 00    	jb     212d87 <scanAllCompileUnits+0xa97>
  212a19:	e9 79 03 00 00       	jmp    212d97 <scanAllCompileUnits+0xaa7>
                    const pc_end = switch (high_pc_value.*) {
  212a1e:	48 8b 85 60 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3a0]
  212a25:	48 89 85 50 fc ff ff 	mov    QWORD PTR [rbp-0x3b0],rax
  212a2c:	eb 00                	jmp    212a2e <scanAllCompileUnits+0x73e>
  212a2e:	48 8b 85 50 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3b0]
  212a35:	48 8d 8d 28 fe ff ff 	lea    rcx,[rbp-0x1d8]
  212a3c:	48 89 85 30 fd ff ff 	mov    QWORD PTR [rbp-0x2d0],rax
                        .start = low_pc,
  212a43:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
                        .end = pc_end,
  212a4a:	48 8b 95 30 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2d0]
                    break :x PcRange{
  212a51:	48 89 85 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rax
  212a58:	48 89 95 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rdx
  212a5f:	48 8b 85 40 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c0]
  212a66:	48 89 85 28 fe ff ff 	mov    QWORD PTR [rbp-0x1d8],rax
  212a6d:	48 8b 85 48 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b8]
  212a74:	48 89 85 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rax
  212a7b:	c6 85 38 fe ff ff 01 	mov    BYTE PTR [rbp-0x1c8],0x1
  212a82:	48 89 8d 48 fc ff ff 	mov    QWORD PTR [rbp-0x3b8],rcx
  212a89:	eb 64                	jmp    212aef <scanAllCompileUnits+0x7ff>
  212a8b:	48 8d 05 d6 63 ff ff 	lea    rax,[rip+0xffffffffffff63d6]        # 208e68 <__unnamed_55>
                    break :x null;
  212a92:	48 89 85 48 fc ff ff 	mov    QWORD PTR [rbp-0x3b8],rax
  212a99:	eb 54                	jmp    212aef <scanAllCompileUnits+0x7ff>
            if (compile_unit_die.getAttrAddr(DW.AT_low_pc)) |low_pc| {
  212a9b:	66 8b 85 88 fe ff ff 	mov    ax,WORD PTR [rbp-0x178]
  212aa2:	66 89 85 2e fd ff ff 	mov    WORD PTR [rbp-0x2d2],ax
                if (err != error.MissingDebugInfo) return err;
  212aa9:	66 83 bd 2e fd ff ff 	cmp    WORD PTR [rbp-0x2d2],0x24
  212ab0:	24 
  212ab1:	74 2a                	je     212add <scanAllCompileUnits+0x7ed>
  212ab3:	66 8b 85 2e fd ff ff 	mov    ax,WORD PTR [rbp-0x2d2]
  212aba:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  212ac1:	66 89 85 46 fc ff ff 	mov    WORD PTR [rbp-0x3ba],ax
  212ac8:	e8 c3 91 ff ff       	call   20bc90 <__zig_return_error>
  212acd:	66 8b 85 46 fc ff ff 	mov    ax,WORD PTR [rbp-0x3ba]
  212ad4:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  212adb:	5d                   	pop    rbp
  212adc:	c3                   	ret    
  212add:	eb 00                	jmp    212adf <scanAllCompileUnits+0x7ef>
  212adf:	48 8d 05 9a 63 ff ff 	lea    rax,[rip+0xffffffffffff639a]        # 208e80 <__unnamed_56>
                break :x null;
  212ae6:	48 89 85 48 fc ff ff 	mov    QWORD PTR [rbp-0x3b8],rax
  212aed:	eb 00                	jmp    212aef <scanAllCompileUnits+0x7ff>
        const pc_range = x: {
  212aef:	48 8b 85 48 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3b8]
  212af6:	48 8d 95 f8 fd ff ff 	lea    rdx,[rbp-0x208]
  212afd:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  212b00:	48 89 8d 10 fd ff ff 	mov    QWORD PTR [rbp-0x2f0],rcx
  212b07:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  212b0b:	48 89 8d 18 fd ff ff 	mov    QWORD PTR [rbp-0x2e8],rcx
  212b12:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  212b16:	48 89 85 20 fd ff ff 	mov    QWORD PTR [rbp-0x2e0],rax
        try st.compile_unit_list.append(CompileUnit{
  212b1d:	48 8b 85 e8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x218]
  212b24:	48 05 a8 00 00 00    	add    rax,0xa8
            .version = version,
  212b2a:	66 8b b5 9e fd ff ff 	mov    si,WORD PTR [rbp-0x262]
            .is_64 = is_64,
  212b31:	40 8a bd b7 fd ff ff 	mov    dil,BYTE PTR [rbp-0x249]
            .die = compile_unit_die,
  212b38:	48 8b 8d 70 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x290]
            .index = cu_index,
  212b3f:	4c 8b 85 d0 fd ff ff 	mov    r8,QWORD PTR [rbp-0x230]
        try st.compile_unit_list.append(CompileUnit{
  212b46:	66 89 b5 f8 fd ff ff 	mov    WORD PTR [rbp-0x208],si
  212b4d:	40 80 e7 01          	and    dil,0x1
  212b51:	40 88 bd fa fd ff ff 	mov    BYTE PTR [rbp-0x206],dil
  212b58:	48 89 8d 00 fe ff ff 	mov    QWORD PTR [rbp-0x200],rcx
  212b5f:	4c 89 85 08 fe ff ff 	mov    QWORD PTR [rbp-0x1f8],r8
  212b66:	48 8b 8d 10 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2f0]
  212b6d:	48 89 8d 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rcx
  212b74:	48 8b 8d 18 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2e8]
  212b7b:	48 89 8d 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],rcx
  212b82:	48 8b 8d 20 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2e0]
  212b89:	48 89 8d 20 fe ff ff 	mov    QWORD PTR [rbp-0x1e0],rcx
  212b90:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  212b97:	48 89 c6             	mov    rsi,rax
  212b9a:	e8 e1 39 00 00       	call   216580 <AlignedArrayList(CompileUnit,2)_append>
  212b9f:	66 89 85 f6 fd ff ff 	mov    WORD PTR [rbp-0x20a],ax
  212ba6:	66 83 bd f6 fd ff ff 	cmp    WORD PTR [rbp-0x20a],0x0
  212bad:	00 
  212bae:	74 2a                	je     212bda <scanAllCompileUnits+0x8ea>
  212bb0:	66 8b 85 f6 fd ff ff 	mov    ax,WORD PTR [rbp-0x20a]
  212bb7:	48 8b bd 08 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f8]
  212bbe:	66 89 85 44 fc ff ff 	mov    WORD PTR [rbp-0x3bc],ax
  212bc5:	e8 c6 90 ff ff       	call   20bc90 <__zig_return_error>
  212bca:	66 8b 85 44 fc ff ff 	mov    ax,WORD PTR [rbp-0x3bc]
  212bd1:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  212bd8:	5d                   	pop    rbp
  212bd9:	c3                   	ret    
        this_unit_offset += next_offset;
  212bda:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
  212be1:	48 03 85 a0 fd ff ff 	add    rax,QWORD PTR [rbp-0x260]
  212be8:	0f 92 c1             	setb   cl
  212beb:	48 89 85 38 fc ff ff 	mov    QWORD PTR [rbp-0x3c8],rax
  212bf2:	88 8d 37 fc ff ff    	mov    BYTE PTR [rbp-0x3c9],cl
  212bf8:	0f 82 9e 01 00 00    	jb     212d9c <scanAllCompileUnits+0xaac>
  212bfe:	e9 a9 01 00 00       	jmp    212dac <scanAllCompileUnits+0xabc>
  212c03:	31 c0                	xor    eax,eax
  212c05:	66 89 c1             	mov    cx,ax
fn scanAllCompileUnits(st: *ElfStackTrace) !void {
  212c08:	66 89 c8             	mov    ax,cx
  212c0b:	48 81 c4 f0 03 00 00 	add    rsp,0x3f0
  212c12:	5d                   	pop    rbp
  212c13:	c3                   	ret    
  212c14:	48 8d 3d ad 05 03 00 	lea    rdi,[rip+0x305ad]        # 2431c8 <__unnamed_4>
  212c1b:	31 c0                	xor    eax,eax
  212c1d:	89 c6                	mov    esi,eax
    const debug_info_end = st.debug_info.offset + st.debug_info.size;
  212c1f:	e8 dc 89 ff ff       	call   20b600 <panic>
  212c24:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  212c28:	48 8b 85 00 fd ff ff 	mov    rax,QWORD PTR [rbp-0x300]
  212c2f:	48 89 85 e0 fd ff ff 	mov    QWORD PTR [rbp-0x220],rax
    var this_unit_offset = st.debug_info.offset;
  212c36:	48 8b 8d e8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x218]
  212c3d:	48 8b 49 60          	mov    rcx,QWORD PTR [rcx+0x60]
  212c41:	48 8b 49 18          	mov    rcx,QWORD PTR [rcx+0x18]
  212c45:	48 89 8d d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rcx
    var cu_index: usize = 0;
  212c4c:	48 c7 85 d0 fd ff ff 	mov    QWORD PTR [rbp-0x230],0x0
  212c53:	00 00 00 00 
    var in_file_stream = io.FileInStream.init(&st.self_exe_file);
  212c57:	48 8b b5 e8 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x218]
  212c5e:	e8 cd 0c 00 00       	call   213930 <FileInStream_init>
  212c63:	48 8d 85 c0 fd ff ff 	lea    rax,[rbp-0x240]
  212c6a:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  212c6e:	48 89 8d c0 fd ff ff 	mov    QWORD PTR [rbp-0x240],rcx
  212c75:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  212c79:	48 89 8d c8 fd ff ff 	mov    QWORD PTR [rbp-0x238],rcx
    const in_stream = &in_file_stream.stream;
  212c80:	48 83 c0 08          	add    rax,0x8
  212c84:	48 89 85 b8 fd ff ff 	mov    QWORD PTR [rbp-0x248],rax
    while (this_unit_offset < debug_info_end) {
  212c8b:	e9 b2 f6 ff ff       	jmp    212342 <scanAllCompileUnits+0x52>
  212c90:	48 8d 3d 31 05 03 00 	lea    rdi,[rip+0x30531]        # 2431c8 <__unnamed_4>
  212c97:	31 c0                	xor    eax,eax
  212c99:	89 c6                	mov    esi,eax
        const next_offset = unit_length + (if (is_64) usize(12) else usize(4));
  212c9b:	e8 60 89 ff ff       	call   20b600 <panic>
  212ca0:	48 8d 45 c0          	lea    rax,[rbp-0x40]
  212ca4:	48 8b 8d c8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x338]
  212cab:	48 89 8d a0 fd ff ff 	mov    QWORD PTR [rbp-0x260],rcx
        const version = try in_stream.readInt(st.elf.endian, u16);
  212cb2:	48 8b 95 b8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x248]
  212cb9:	48 8b b5 e8 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x218]
  212cc0:	40 8a 7e 12          	mov    dil,BYTE PTR [rsi+0x12]
  212cc4:	40 0f b6 cf          	movzx  ecx,dil
  212cc8:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  212ccc:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  212cd3:	48 89 85 28 fc ff ff 	mov    QWORD PTR [rbp-0x3d8],rax
  212cda:	e8 f1 0f 00 00       	call   213cd0 <InStream(ReadError)_readInt>
  212cdf:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  212ce4:	0f 85 c4 f7 ff ff    	jne    2124ae <scanAllCompileUnits+0x1be>
  212cea:	e9 e6 f7 ff ff       	jmp    2124d5 <scanAllCompileUnits+0x1e5>
                        FormValue.Address => |value| value,
  212cef:	48 8b 85 70 fc ff ff 	mov    rax,QWORD PTR [rbp-0x390]
  212cf6:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  212cf9:	48 89 8d 58 fd ff ff 	mov    QWORD PTR [rbp-0x2a8],rcx
  212d00:	48 8b 8d 58 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2a8]
                    const pc_end = switch (high_pc_value.*) {
  212d07:	48 89 8d 50 fc ff ff 	mov    QWORD PTR [rbp-0x3b0],rcx
  212d0e:	e9 1b fd ff ff       	jmp    212a2e <scanAllCompileUnits+0x73e>
  212d13:	48 8d 3d c6 08 03 00 	lea    rdi,[rip+0x308c6]        # 2435e0 <__unnamed_29>
  212d1a:	31 c0                	xor    eax,eax
  212d1c:	89 c6                	mov    esi,eax
                        FormValue.Address => |value| value,
  212d1e:	e8 dd 88 ff ff       	call   20b600 <panic>
  212d23:	48 8d bd 60 fe ff ff 	lea    rdi,[rbp-0x1a0]
  212d2a:	48 8d 95 40 fd ff ff 	lea    rdx,[rbp-0x2c0]
                        FormValue.Const => |value| b: {
  212d31:	48 8b 85 70 fc ff ff 	mov    rax,QWORD PTR [rbp-0x390]
  212d38:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  212d3b:	48 89 8d 40 fd ff ff 	mov    QWORD PTR [rbp-0x2c0],rcx
  212d42:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  212d46:	48 89 8d 48 fd ff ff 	mov    QWORD PTR [rbp-0x2b8],rcx
  212d4d:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
  212d51:	48 89 8d 50 fd ff ff 	mov    QWORD PTR [rbp-0x2b0],rcx
                            const offset = try value.asUnsignedLe();
  212d58:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  212d5f:	e8 4c 37 00 00       	call   2164b0 <Constant_asUnsignedLe>
  212d64:	66 83 bd 60 fe ff ff 	cmp    WORD PTR [rbp-0x1a0],0x0
  212d6b:	00 
  212d6c:	0f 85 4b fc ff ff    	jne    2129bd <scanAllCompileUnits+0x6cd>
  212d72:	e9 70 fc ff ff       	jmp    2129e7 <scanAllCompileUnits+0x6f7>
  212d77:	48 8d 3d 62 08 03 00 	lea    rdi,[rip+0x30862]        # 2435e0 <__unnamed_29>
  212d7e:	31 c0                	xor    eax,eax
  212d80:	89 c6                	mov    esi,eax
                        FormValue.Const => |value| b: {
  212d82:	e8 79 88 ff ff       	call   20b600 <panic>
  212d87:	48 8d 3d 3a 04 03 00 	lea    rdi,[rip+0x3043a]        # 2431c8 <__unnamed_4>
  212d8e:	31 c0                	xor    eax,eax
  212d90:	89 c6                	mov    esi,eax
                            break :b (low_pc + offset);
  212d92:	e8 69 88 ff ff       	call   20b600 <panic>
  212d97:	e9 82 fc ff ff       	jmp    212a1e <scanAllCompileUnits+0x72e>
  212d9c:	48 8d 3d 25 04 03 00 	lea    rdi,[rip+0x30425]        # 2431c8 <__unnamed_4>
  212da3:	31 c0                	xor    eax,eax
  212da5:	89 c6                	mov    esi,eax
        this_unit_offset += next_offset;
  212da7:	e8 54 88 ff ff       	call   20b600 <panic>
  212dac:	48 8b 85 38 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3c8]
  212db3:	48 89 85 d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rax
        cu_index += 1;
  212dba:	48 8b 8d d0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x230]
  212dc1:	48 83 c1 01          	add    rcx,0x1
  212dc5:	0f 92 c2             	setb   dl
  212dc8:	48 89 8d 20 fc ff ff 	mov    QWORD PTR [rbp-0x3e0],rcx
  212dcf:	88 95 1f fc ff ff    	mov    BYTE PTR [rbp-0x3e1],dl
  212dd5:	72 02                	jb     212dd9 <scanAllCompileUnits+0xae9>
  212dd7:	eb 10                	jmp    212de9 <scanAllCompileUnits+0xaf9>
  212dd9:	48 8d 3d e8 03 03 00 	lea    rdi,[rip+0x303e8]        # 2431c8 <__unnamed_4>
  212de0:	31 c0                	xor    eax,eax
  212de2:	89 c6                	mov    esi,eax
  212de4:	e8 17 88 ff ff       	call   20b600 <panic>
  212de9:	48 8b 85 20 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e0]
  212df0:	48 89 85 d0 fd ff ff 	mov    QWORD PTR [rbp-0x230],rax
    while (this_unit_offset < debug_info_end) {
  212df7:	e9 46 f5 ff ff       	jmp    212342 <scanAllCompileUnits+0x52>
  212dfc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000212e00 <DirectAllocator_init>:
    allocator: Allocator,
    heap_handle: ?HeapHandle,

    const HeapHandle = if (builtin.os == Os.windows) os.windows.HANDLE else void;

    pub fn init() DirectAllocator {
  212e00:	55                   	push   rbp
  212e01:	48 89 e5             	mov    rbp,rsp
  212e04:	48 89 f8             	mov    rax,rdi
        return DirectAllocator{
  212e07:	48 8b 0d 82 0a 03 00 	mov    rcx,QWORD PTR [rip+0x30a82]        # 243890 <__unnamed_57>
  212e0e:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  212e11:	48 8b 0d 80 0a 03 00 	mov    rcx,QWORD PTR [rip+0x30a80]        # 243898 <__unnamed_57+0x8>
  212e18:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  212e1c:	48 8b 0d 7d 0a 03 00 	mov    rcx,QWORD PTR [rip+0x30a7d]        # 2438a0 <__unnamed_57+0x10>
  212e23:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  212e27:	48 8b 0d 7a 0a 03 00 	mov    rcx,QWORD PTR [rip+0x30a7a]        # 2438a8 <__unnamed_57+0x18>
  212e2e:	48 89 4f 18          	mov    QWORD PTR [rdi+0x18],rcx
  212e32:	5d                   	pop    rbp
  212e33:	c3                   	ret    
  212e34:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  212e3b:	00 00 00 00 00 

0000000000212e40 <ArenaAllocator_init>:
    buffer_list: std.LinkedList([]u8),
    end_index: usize,

    const BufNode = std.LinkedList([]u8).Node;

    pub fn init(child_allocator: *Allocator) ArenaAllocator {
  212e40:	55                   	push   rbp
  212e41:	48 89 e5             	mov    rbp,rsp
  212e44:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  212e4b:	48 89 f8             	mov    rax,rdi
  212e4e:	48 8d 4d e8          	lea    rcx,[rbp-0x18]
  212e52:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
            .allocator = Allocator{
                .allocFn = alloc,
                .reallocFn = realloc,
                .freeFn = free,
            },
            .child_allocator = child_allocator,
  212e56:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
            .buffer_list = std.LinkedList([]u8).init(),
  212e5a:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
  212e5e:	48 89 cf             	mov    rdi,rcx
  212e61:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  212e65:	48 89 75 88          	mov    QWORD PTR [rbp-0x78],rsi
  212e69:	e8 22 3b 01 00       	call   226990 <BaseLinkedList([]u8,void,(struct []const u8 constant))_init>
  212e6e:	ba 40 00 00 00       	mov    edx,0x40
  212e73:	48 8d 45 a8          	lea    rax,[rbp-0x58]
        return ArenaAllocator{
  212e77:	48 8b 0d 32 0a 03 00 	mov    rcx,QWORD PTR [rip+0x30a32]        # 2438b0 <__unnamed_58>
  212e7e:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  212e82:	48 8b 0d 2f 0a 03 00 	mov    rcx,QWORD PTR [rip+0x30a2f]        # 2438b8 <__unnamed_58+0x8>
  212e89:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
  212e8d:	48 8b 0d 2c 0a 03 00 	mov    rcx,QWORD PTR [rip+0x30a2c]        # 2438c0 <__unnamed_58+0x10>
  212e94:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
  212e98:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  212e9c:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
  212ea0:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  212ea4:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  212ea8:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  212eac:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  212eb0:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  212eb4:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  212eb8:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  212ebf:	00 
  212ec0:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  212ec4:	48 89 cf             	mov    rdi,rcx
  212ec7:	48 89 c6             	mov    rsi,rax
  212eca:	e8 d1 19 02 00       	call   2348a0 <memcpy>
  212ecf:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  212ed3:	48 81 c4 80 00 00 00 	add    rsp,0x80
  212eda:	5d                   	pop    rbp
  212edb:	c3                   	ret    
  212edc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000212ee0 <Allocator_alloc>:
    }

    pub fn alloc(self: *Allocator, comptime T: type, n: usize) ![]T {
  212ee0:	55                   	push   rbp
  212ee1:	48 89 e5             	mov    rbp,rsp
  212ee4:	48 83 ec 40          	sub    rsp,0x40
  212ee8:	48 89 f8             	mov    rax,rdi
  212eeb:	4c 8d 45 e8          	lea    r8,[rbp-0x18]
  212eef:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  212ef3:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
        return self.alignedAlloc(T, @alignOf(T), n);
  212ef7:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  212efb:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  212eff:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
  212f03:	4c 89 c7             	mov    rdi,r8
  212f06:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  212f0a:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  212f0e:	e8 ad 42 01 00       	call   2271c0 <Allocator_alignedAlloc.97>
  212f13:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  212f18:	74 0b                	je     212f25 <Allocator_alloc+0x45>
  212f1a:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  212f1e:	e8 6d 8d ff ff       	call   20bc90 <__zig_return_error>
  212f23:	eb 02                	jmp    212f27 <Allocator_alloc+0x47>
  212f25:	eb 00                	jmp    212f27 <Allocator_alloc+0x47>
  212f27:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  212f2b:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  212f2f:	48 89 01             	mov    QWORD PTR [rcx],rax
  212f32:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  212f36:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  212f3a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  212f3e:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  212f42:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  212f46:	48 83 c4 40          	add    rsp,0x40
  212f4a:	5d                   	pop    rbp
  212f4b:	c3                   	ret    
  212f4c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000212f50 <FixedBufferAllocator_init>:
pub const FixedBufferAllocator = struct {
    allocator: Allocator,
    end_index: usize,
    buffer: []u8,

    pub fn init(buffer: []u8) FixedBufferAllocator {
  212f50:	55                   	push   rbp
  212f51:	48 89 e5             	mov    rbp,rsp
  212f54:	48 83 ec 40          	sub    rsp,0x40
  212f58:	48 89 f8             	mov    rax,rdi
  212f5b:	b9 30 00 00 00       	mov    ecx,0x30
  212f60:	89 ca                	mov    edx,ecx
  212f62:	4c 8d 45 d0          	lea    r8,[rbp-0x30]
        return FixedBufferAllocator{
  212f66:	4c 8b 0d 03 06 03 00 	mov    r9,QWORD PTR [rip+0x30603]        # 243570 <__unnamed_59>
  212f6d:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
  212f71:	4c 8b 0d 00 06 03 00 	mov    r9,QWORD PTR [rip+0x30600]        # 243578 <__unnamed_59+0x8>
  212f78:	4c 89 4d d8          	mov    QWORD PTR [rbp-0x28],r9
  212f7c:	4c 8b 0d fd 05 03 00 	mov    r9,QWORD PTR [rip+0x305fd]        # 243580 <__unnamed_59+0x10>
  212f83:	4c 89 4d e0          	mov    QWORD PTR [rbp-0x20],r9
  212f87:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
  212f8e:	00 
  212f8f:	4c 8b 0e             	mov    r9,QWORD PTR [rsi]
  212f92:	4c 89 4d f0          	mov    QWORD PTR [rbp-0x10],r9
  212f96:	48 8b 76 08          	mov    rsi,QWORD PTR [rsi+0x8]
  212f9a:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  212f9e:	4c 89 c6             	mov    rsi,r8
  212fa1:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  212fa5:	e8 f6 18 02 00       	call   2348a0 <memcpy>
  212faa:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  212fae:	48 83 c4 40          	add    rsp,0x40
  212fb2:	5d                   	pop    rbp
  212fb3:	c3                   	ret    
  212fb4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  212fbb:	00 00 00 00 00 

0000000000212fc0 <File_openRead>:
    pub fn openRead(allocator: *mem.Allocator, path: []const u8) OpenError!File {
  212fc0:	55                   	push   rbp
  212fc1:	48 89 e5             	mov    rbp,rsp
  212fc4:	48 83 ec 60          	sub    rsp,0x60
  212fc8:	48 89 f8             	mov    rax,rdi
  212fcb:	4c 8d 45 f8          	lea    r8,[rbp-0x8]
  212fcf:	45 31 c9             	xor    r9d,r9d
  212fd2:	45 31 d2             	xor    r10d,r10d
  212fd5:	45 89 d3             	mov    r11d,r10d
  212fd8:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            const fd = try os.posixOpen(allocator, path, flags, 0);
  212fdc:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  212fe0:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
  212fe4:	4c 89 c7             	mov    rdi,r8
  212fe7:	48 89 75 b8          	mov    QWORD PTR [rbp-0x48],rsi
  212feb:	45 89 c8             	mov    r8d,r9d
  212fee:	4d 89 d9             	mov    r9,r11
  212ff1:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  212ff5:	e8 56 08 00 00       	call   213850 <posixOpen>
  212ffa:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  212fff:	74 2e                	je     21302f <File_openRead+0x6f>
  213001:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  213005:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  213009:	66 89 45 ae          	mov    WORD PTR [rbp-0x52],ax
  21300d:	e8 7e 8c ff ff       	call   20bc90 <__zig_return_error>
  213012:	66 8b 45 ae          	mov    ax,WORD PTR [rbp-0x52]
  213016:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  21301a:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  21301e:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  213022:	48 89 39             	mov    QWORD PTR [rcx],rdi
  213025:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  213029:	48 83 c4 60          	add    rsp,0x60
  21302d:	5d                   	pop    rbp
  21302e:	c3                   	ret    
  21302f:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
  213033:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  213036:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
            return openHandle(fd);
  213039:	8b 75 cc             	mov    esi,DWORD PTR [rbp-0x34]
  21303c:	e8 cf a9 ff ff       	call   20da10 <File_openHandle>
  213041:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  213047:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  21304a:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
  21304d:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  213051:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  213055:	48 89 39             	mov    QWORD PTR [rcx],rdi
  213058:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  21305c:	48 83 c4 60          	add    rsp,0x60
  213060:	5d                   	pop    rbp
  213061:	c3                   	ret    
  213062:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  213069:	1f 84 00 00 00 00 00 

0000000000213070 <FixedBufferAllocator_alloc>:
            .buffer = buffer,
            .end_index = 0,
        };
    }

    fn alloc(allocator: *Allocator, n: usize, alignment: u29) ![]u8 {
  213070:	55                   	push   rbp
  213071:	48 89 e5             	mov    rbp,rsp
  213074:	48 81 ec 10 01 00 00 	sub    rsp,0x110
  21307b:	48 89 f8             	mov    rax,rdi
  21307e:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  213082:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  213086:	41 81 e0 ff ff ff 1f 	and    r8d,0x1fffffff
  21308d:	44 89 45 c4          	mov    DWORD PTR [rbp-0x3c],r8d
        const self = @fieldParentPtr(FixedBufferAllocator, "allocator", allocator);
  213091:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  213095:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
        const addr = @ptrToInt(self.buffer.ptr) + self.end_index;
  213099:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  21309d:	48 8b 49 20          	mov    rcx,QWORD PTR [rcx+0x20]
  2130a1:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  2130a5:	48 03 4a 18          	add    rcx,QWORD PTR [rdx+0x18]
  2130a9:	41 0f 92 c1          	setb   r9b
  2130ad:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  2130b4:	48 89 bd 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdi
  2130bb:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
  2130c2:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
  2130c9:	44 88 8d 5f ff ff ff 	mov    BYTE PTR [rbp-0xa1],r9b
  2130d0:	0f 82 f3 00 00 00    	jb     2131c9 <FixedBufferAllocator_alloc+0x159>
  2130d6:	e9 fe 00 00 00       	jmp    2131d9 <FixedBufferAllocator_alloc+0x169>
  2130db:	31 c0                	xor    eax,eax
  2130dd:	89 c1                	mov    ecx,eax
        const rem = @rem(addr, alignment);
        const march_forward_bytes = if (rem == 0) 0 else (alignment - rem);
  2130df:	48 89 8d 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rcx
  2130e6:	eb 29                	jmp    213111 <FixedBufferAllocator_alloc+0xa1>
  2130e8:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  2130ec:	8b 4d c4             	mov    ecx,DWORD PTR [rbp-0x3c]
  2130ef:	89 ca                	mov    edx,ecx
  2130f1:	48 29 c2             	sub    rdx,rax
  2130f4:	40 0f 92 c6          	setb   sil
  2130f8:	48 89 95 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdx
  2130ff:	40 88 b5 47 ff ff ff 	mov    BYTE PTR [rbp-0xb9],sil
  213106:	0f 82 2e 01 00 00    	jb     21323a <FixedBufferAllocator_alloc+0x1ca>
  21310c:	e9 39 01 00 00       	jmp    21324a <FixedBufferAllocator_alloc+0x1da>
  213111:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  213118:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        const adjusted_index = self.end_index + march_forward_bytes;
  21311c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  213120:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  213124:	48 03 45 a0          	add    rax,QWORD PTR [rbp-0x60]
  213128:	0f 92 c1             	setb   cl
  21312b:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
  213132:	88 8d 37 ff ff ff    	mov    BYTE PTR [rbp-0xc9],cl
  213138:	0f 82 1f 01 00 00    	jb     21325d <FixedBufferAllocator_alloc+0x1ed>
  21313e:	e9 2a 01 00 00       	jmp    21326d <FixedBufferAllocator_alloc+0x1fd>
        const new_end_index = adjusted_index + n;
        if (new_end_index > self.buffer.len) {
            return error.OutOfMemory;
  213143:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  21314a:	e8 41 8b ff ff       	call   20bc90 <__zig_return_error>
  21314f:	48 8b 3d 62 75 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff7562]        # 20a6b8 <__unnamed_60>
  213156:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21315d:	48 89 38             	mov    QWORD PTR [rax],rdi
  213160:	48 8b 3d 59 75 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff7559]        # 20a6c0 <__unnamed_60+0x8>
  213167:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  21316b:	48 8b 3d 56 75 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff7556]        # 20a6c8 <__unnamed_60+0x10>
  213172:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  213176:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  21317d:	48 81 c4 10 01 00 00 	add    rsp,0x110
  213184:	5d                   	pop    rbp
  213185:	c3                   	ret    
        if (new_end_index > self.buffer.len) {
  213186:	eb 00                	jmp    213188 <FixedBufferAllocator_alloc+0x118>
        }
        const result = self.buffer[adjusted_index..new_end_index];
  213188:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21318c:	48 89 c1             	mov    rcx,rax
  21318f:	48 83 c1 20          	add    rcx,0x20
  213193:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  213197:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  21319b:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
  21319f:	48 39 f2             	cmp    rdx,rsi
  2131a2:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  2131a9:	48 89 8d 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rcx
  2131b0:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
  2131b7:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
  2131be:	0f 86 12 01 00 00    	jbe    2132d6 <FixedBufferAllocator_alloc+0x266>
  2131c4:	e9 fd 00 00 00       	jmp    2132c6 <FixedBufferAllocator_alloc+0x256>
  2131c9:	48 8d 3d f8 ff 02 00 	lea    rdi,[rip+0x2fff8]        # 2431c8 <__unnamed_4>
  2131d0:	31 c0                	xor    eax,eax
  2131d2:	89 c6                	mov    esi,eax
        const addr = @ptrToInt(self.buffer.ptr) + self.end_index;
  2131d4:	e8 27 84 ff ff       	call   20b600 <panic>
  2131d9:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  2131e0:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
        const rem = @rem(addr, alignment);
  2131e4:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  2131e8:	8b 4d c4             	mov    ecx,DWORD PTR [rbp-0x3c]
  2131eb:	89 ca                	mov    edx,ecx
  2131ed:	48 83 fa 00          	cmp    rdx,0x0
  2131f1:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
  2131f8:	48 89 95 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rdx
  2131ff:	74 29                	je     21322a <FixedBufferAllocator_alloc+0x1ba>
  213201:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  213208:	31 c9                	xor    ecx,ecx
  21320a:	89 ca                	mov    edx,ecx
  21320c:	48 8b b5 00 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x100]
  213213:	48 f7 f6             	div    rsi
  213216:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
        const march_forward_bytes = if (rem == 0) 0 else (alignment - rem);
  21321a:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
  21321f:	0f 84 b6 fe ff ff    	je     2130db <FixedBufferAllocator_alloc+0x6b>
  213225:	e9 be fe ff ff       	jmp    2130e8 <FixedBufferAllocator_alloc+0x78>
  21322a:	48 8d 3d b7 00 03 00 	lea    rdi,[rip+0x300b7]        # 2432e8 <__unnamed_15>
  213231:	31 c0                	xor    eax,eax
  213233:	89 c6                	mov    esi,eax
        const rem = @rem(addr, alignment);
  213235:	e8 c6 83 ff ff       	call   20b600 <panic>
  21323a:	48 8d 3d 87 ff 02 00 	lea    rdi,[rip+0x2ff87]        # 2431c8 <__unnamed_4>
  213241:	31 c0                	xor    eax,eax
  213243:	89 c6                	mov    esi,eax
        const march_forward_bytes = if (rem == 0) 0 else (alignment - rem);
  213245:	e8 b6 83 ff ff       	call   20b600 <panic>
  21324a:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  213251:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
  213258:	e9 b4 fe ff ff       	jmp    213111 <FixedBufferAllocator_alloc+0xa1>
  21325d:	48 8d 3d 64 ff 02 00 	lea    rdi,[rip+0x2ff64]        # 2431c8 <__unnamed_4>
  213264:	31 c0                	xor    eax,eax
  213266:	89 c6                	mov    esi,eax
        const adjusted_index = self.end_index + march_forward_bytes;
  213268:	e8 93 83 ff ff       	call   20b600 <panic>
  21326d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  213274:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
        const new_end_index = adjusted_index + n;
  213278:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  21327c:	48 03 4d c8          	add    rcx,QWORD PTR [rbp-0x38]
  213280:	0f 92 c2             	setb   dl
  213283:	48 89 8d f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rcx
  21328a:	88 95 f7 fe ff ff    	mov    BYTE PTR [rbp-0x109],dl
  213290:	72 02                	jb     213294 <FixedBufferAllocator_alloc+0x224>
  213292:	eb 10                	jmp    2132a4 <FixedBufferAllocator_alloc+0x234>
  213294:	48 8d 3d 2d ff 02 00 	lea    rdi,[rip+0x2ff2d]        # 2431c8 <__unnamed_4>
  21329b:	31 c0                	xor    eax,eax
  21329d:	89 c6                	mov    esi,eax
  21329f:	e8 5c 83 ff ff       	call   20b600 <panic>
  2132a4:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  2132ab:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
        if (new_end_index > self.buffer.len) {
  2132af:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  2132b3:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  2132b7:	48 3b 4a 28          	cmp    rcx,QWORD PTR [rdx+0x28]
  2132bb:	0f 87 82 fe ff ff    	ja     213143 <FixedBufferAllocator_alloc+0xd3>
  2132c1:	e9 c0 fe ff ff       	jmp    213186 <FixedBufferAllocator_alloc+0x116>
  2132c6:	48 8d 3d 0b 01 03 00 	lea    rdi,[rip+0x3010b]        # 2433d8 <__unnamed_20>
  2132cd:	31 c0                	xor    eax,eax
  2132cf:	89 c6                	mov    esi,eax
        const result = self.buffer[adjusted_index..new_end_index];
  2132d1:	e8 2a 83 ff ff       	call   20b600 <panic>
  2132d6:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  2132dd:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  2132e4:	48 39 c8             	cmp    rax,rcx
  2132e7:	76 10                	jbe    2132f9 <FixedBufferAllocator_alloc+0x289>
  2132e9:	48 8d 3d e8 00 03 00 	lea    rdi,[rip+0x300e8]        # 2433d8 <__unnamed_20>
  2132f0:	31 c0                	xor    eax,eax
  2132f2:	89 c6                	mov    esi,eax
  2132f4:	e8 07 83 ff ff       	call   20b600 <panic>
  2132f9:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  213300:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  213307:	48 03 01             	add    rax,QWORD PTR [rcx]
  21330a:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  21330e:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  213315:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  21331c:	48 29 d0             	sub    rax,rdx
  21331f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  213323:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  213327:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  21332b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21332f:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
        self.end_index = new_end_index;
  213333:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  213337:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  21333b:	48 89 70 18          	mov    QWORD PTR [rax+0x18],rsi

        return result;
  21333f:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  213345:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  213349:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  21334d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  213351:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  213355:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  213359:	48 8b b5 70 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x90]
  213360:	48 89 06             	mov    QWORD PTR [rsi],rax
  213363:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  213367:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  21336b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21336f:	48 89 46 10          	mov    QWORD PTR [rsi+0x10],rax
  213373:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  21337a:	48 81 c4 10 01 00 00 	add    rsp,0x110
  213381:	5d                   	pop    rbp
  213382:	c3                   	ret    
  213383:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21338a:	84 00 00 00 00 00 

0000000000213390 <FixedBufferAllocator_realloc>:
    }

    fn realloc(allocator: *Allocator, old_mem: []u8, new_size: usize, alignment: u29) ![]u8 {
  213390:	55                   	push   rbp
  213391:	48 89 e5             	mov    rbp,rsp
  213394:	48 81 ec 80 01 00 00 	sub    rsp,0x180
  21339b:	48 89 f8             	mov    rax,rdi
  21339e:	48 89 95 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdx
  2133a5:	4c 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],r8
  2133ac:	41 81 e1 ff ff ff 1f 	and    r9d,0x1fffffff
  2133b3:	44 89 8d 3c ff ff ff 	mov    DWORD PTR [rbp-0xc4],r9d
        const self = @fieldParentPtr(FixedBufferAllocator, "allocator", allocator);
  2133ba:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
  2133c1:	48 89 95 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rdx
        assert(old_mem.len <= self.end_index);
  2133c8:	48 8b 51 08          	mov    rdx,QWORD PTR [rcx+0x8]
  2133cc:	4c 8b 85 30 ff ff ff 	mov    r8,QWORD PTR [rbp-0xd0]
  2133d3:	49 3b 50 18          	cmp    rdx,QWORD PTR [r8+0x18]
  2133d7:	41 0f 96 c2          	setbe  r10b
  2133db:	45 0f b6 ca          	movzx  r9d,r10b
  2133df:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
  2133e6:	44 89 cf             	mov    edi,r9d
  2133e9:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  2133f0:	48 89 8d e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rcx
  2133f7:	48 89 b5 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rsi
  2133fe:	e8 fd 7b ff ff       	call   20b000 <assert>
        if (new_size <= old_mem.len) {
  213403:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  21340a:	48 8b 8d e8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x118]
  213411:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  213415:	77 32                	ja     213449 <FixedBufferAllocator_realloc+0xb9>
  213417:	31 c0                	xor    eax,eax
  213419:	89 c1                	mov    ecx,eax
            return old_mem[0..new_size];
  21341b:	48 8b 95 40 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc0]
  213422:	48 8b b5 e8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x118]
  213429:	48 8b 7e 08          	mov    rdi,QWORD PTR [rsi+0x8]
  21342d:	48 39 d1             	cmp    rcx,rdx
  213430:	48 89 bd d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rdi
  213437:	48 89 95 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rdx
  21343e:	0f 86 21 02 00 00    	jbe    213665 <FixedBufferAllocator_realloc+0x2d5>
  213444:	e9 0c 02 00 00       	jmp    213655 <FixedBufferAllocator_realloc+0x2c5>
  213449:	31 c0                	xor    eax,eax
  21344b:	89 c1                	mov    ecx,eax
        } else if (old_mem.ptr == self.buffer.ptr + self.end_index - old_mem.len) {
  21344d:	48 8b 95 e8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x118]
  213454:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
  213457:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
  21345e:	48 8b 7f 20          	mov    rdi,QWORD PTR [rdi+0x20]
  213462:	4c 8b 85 30 ff ff ff 	mov    r8,QWORD PTR [rbp-0xd0]
  213469:	49 03 78 18          	add    rdi,QWORD PTR [r8+0x18]
  21346d:	48 2b 4a 08          	sub    rcx,QWORD PTR [rdx+0x8]
  213471:	48 01 cf             	add    rdi,rcx
  213474:	48 39 fe             	cmp    rsi,rdi
  213477:	0f 85 c0 00 00 00    	jne    21353d <FixedBufferAllocator_realloc+0x1ad>
            const start_index = self.end_index - old_mem.len;
  21347d:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  213484:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  213488:	48 8b 8d e8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x118]
  21348f:	48 2b 41 08          	sub    rax,QWORD PTR [rcx+0x8]
  213493:	0f 92 c2             	setb   dl
  213496:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
  21349d:	88 95 c7 fe ff ff    	mov    BYTE PTR [rbp-0x139],dl
  2134a3:	0f 82 40 02 00 00    	jb     2136e9 <FixedBufferAllocator_realloc+0x359>
  2134a9:	e9 4b 02 00 00       	jmp    2136f9 <FixedBufferAllocator_realloc+0x369>
            const new_end_index = start_index + new_size;
            if (new_end_index > self.buffer.len) return error.OutOfMemory;
  2134ae:	48 8b bd e0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x120]
  2134b5:	e8 d6 87 ff ff       	call   20bc90 <__zig_return_error>
  2134ba:	48 8b 3d 0f 72 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff720f]        # 20a6d0 <__unnamed_61>
  2134c1:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  2134c8:	48 89 38             	mov    QWORD PTR [rax],rdi
  2134cb:	48 8b 3d 06 72 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff7206]        # 20a6d8 <__unnamed_61+0x8>
  2134d2:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  2134d6:	48 8b 3d 03 72 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff7203]        # 20a6e0 <__unnamed_61+0x10>
  2134dd:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  2134e1:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  2134e8:	48 81 c4 80 01 00 00 	add    rsp,0x180
  2134ef:	5d                   	pop    rbp
  2134f0:	c3                   	ret    
  2134f1:	eb 00                	jmp    2134f3 <FixedBufferAllocator_realloc+0x163>
            const result = self.buffer[start_index..new_end_index];
  2134f3:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  2134fa:	48 89 c1             	mov    rcx,rax
  2134fd:	48 83 c1 20          	add    rcx,0x20
  213501:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
  213508:	48 8b b5 20 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe0]
  21350f:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
  213513:	48 39 f2             	cmp    rdx,rsi
  213516:	48 89 b5 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rsi
  21351d:	48 89 8d b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rcx
  213524:	48 89 95 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rdx
  21352b:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
  213532:	0f 86 3c 02 00 00    	jbe    213774 <FixedBufferAllocator_realloc+0x3e4>
  213538:	e9 27 02 00 00       	jmp    213764 <FixedBufferAllocator_realloc+0x3d4>
  21353d:	48 8d 45 98          	lea    rax,[rbp-0x68]
            self.end_index = new_end_index;
            return result;
        } else {
            const result = try alloc(allocator, new_size, alignment);
  213541:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
  213548:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  21354f:	44 8b 85 3c ff ff ff 	mov    r8d,DWORD PTR [rbp-0xc4]
  213556:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  21355a:	48 8b b5 e0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x120]
  213561:	48 89 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rax
  213568:	e8 03 fb ff ff       	call   213070 <FixedBufferAllocator_alloc>
  21356d:	66 83 7d 98 00       	cmp    WORD PTR [rbp-0x68],0x0
  213572:	74 5c                	je     2135d0 <FixedBufferAllocator_realloc+0x240>
  213574:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  213578:	48 8b bd e0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x120]
  21357f:	66 89 85 96 fe ff ff 	mov    WORD PTR [rbp-0x16a],ax
  213586:	e8 05 87 ff ff       	call   20bc90 <__zig_return_error>
  21358b:	66 8b 85 96 fe ff ff 	mov    ax,WORD PTR [rbp-0x16a]
  213592:	66 89 85 68 ff ff ff 	mov    WORD PTR [rbp-0x98],ax
  213599:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  2135a0:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  2135a7:	48 89 39             	mov    QWORD PTR [rcx],rdi
  2135aa:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  2135b1:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  2135b5:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  2135bc:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  2135c0:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  2135c7:	48 81 c4 80 01 00 00 	add    rsp,0x180
  2135ce:	5d                   	pop    rbp
  2135cf:	c3                   	ret    
  2135d0:	48 8d bd 00 ff ff ff 	lea    rdi,[rbp-0x100]
  2135d7:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2135db:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
  2135e2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  2135e6:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
            mem.copy(u8, result, old_mem);
  2135ed:	48 8b b5 e8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x118]
  2135f4:	e8 d7 16 01 00       	call   224cd0 <copy>
            return result;
  2135f9:	66 c7 85 50 ff ff ff 	mov    WORD PTR [rbp-0xb0],0x0
  213600:	00 00 
  213602:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  213609:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  213610:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  213617:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  21361e:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  213625:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
  21362c:	48 89 06             	mov    QWORD PTR [rsi],rax
  21362f:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
  213636:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  21363a:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  213641:	48 89 46 10          	mov    QWORD PTR [rsi+0x10],rax
  213645:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  21364c:	48 81 c4 80 01 00 00 	add    rsp,0x180
  213653:	5d                   	pop    rbp
  213654:	c3                   	ret    
  213655:	48 8d 3d 7c fd 02 00 	lea    rdi,[rip+0x2fd7c]        # 2433d8 <__unnamed_20>
  21365c:	31 c0                	xor    eax,eax
  21365e:	89 c6                	mov    esi,eax
            return old_mem[0..new_size];
  213660:	e8 9b 7f ff ff       	call   20b600 <panic>
  213665:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21366c:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
  213673:	48 39 c8             	cmp    rax,rcx
  213676:	76 10                	jbe    213688 <FixedBufferAllocator_realloc+0x2f8>
  213678:	48 8d 3d 59 fd 02 00 	lea    rdi,[rip+0x2fd59]        # 2433d8 <__unnamed_20>
  21367f:	31 c0                	xor    eax,eax
  213681:	89 c6                	mov    esi,eax
  213683:	e8 78 7f ff ff       	call   20b600 <panic>
  213688:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  21368f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  213692:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  213696:	48 8b 8d d0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x130]
  21369d:	48 83 e9 00          	sub    rcx,0x0
  2136a1:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  2136a5:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  2136ab:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  2136af:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  2136b3:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  2136b7:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  2136bb:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  2136bf:	48 8b 95 f8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x108]
  2136c6:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  2136c9:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  2136cd:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  2136d1:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2136d5:	48 89 4a 10          	mov    QWORD PTR [rdx+0x10],rcx
  2136d9:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  2136e0:	48 81 c4 80 01 00 00 	add    rsp,0x180
  2136e7:	5d                   	pop    rbp
  2136e8:	c3                   	ret    
  2136e9:	48 8d 3d d8 fa 02 00 	lea    rdi,[rip+0x2fad8]        # 2431c8 <__unnamed_4>
  2136f0:	31 c0                	xor    eax,eax
  2136f2:	89 c6                	mov    esi,eax
            const start_index = self.end_index - old_mem.len;
  2136f4:	e8 07 7f ff ff       	call   20b600 <panic>
  2136f9:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  213700:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
            const new_end_index = start_index + new_size;
  213707:	48 8b 8d 28 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd8]
  21370e:	48 03 8d 40 ff ff ff 	add    rcx,QWORD PTR [rbp-0xc0]
  213715:	0f 92 c2             	setb   dl
  213718:	48 89 8d 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rcx
  21371f:	88 95 87 fe ff ff    	mov    BYTE PTR [rbp-0x179],dl
  213725:	72 02                	jb     213729 <FixedBufferAllocator_realloc+0x399>
  213727:	eb 10                	jmp    213739 <FixedBufferAllocator_realloc+0x3a9>
  213729:	48 8d 3d 98 fa 02 00 	lea    rdi,[rip+0x2fa98]        # 2431c8 <__unnamed_4>
  213730:	31 c0                	xor    eax,eax
  213732:	89 c6                	mov    esi,eax
  213734:	e8 c7 7e ff ff       	call   20b600 <panic>
  213739:	48 8b 85 88 fe ff ff 	mov    rax,QWORD PTR [rbp-0x178]
  213740:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
            if (new_end_index > self.buffer.len) return error.OutOfMemory;
  213747:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21374e:	48 8b 95 30 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd0]
  213755:	48 3b 4a 28          	cmp    rcx,QWORD PTR [rdx+0x28]
  213759:	0f 87 4f fd ff ff    	ja     2134ae <FixedBufferAllocator_realloc+0x11e>
  21375f:	e9 8d fd ff ff       	jmp    2134f1 <FixedBufferAllocator_realloc+0x161>
  213764:	48 8d 3d 6d fc 02 00 	lea    rdi,[rip+0x2fc6d]        # 2433d8 <__unnamed_20>
  21376b:	31 c0                	xor    eax,eax
  21376d:	89 c6                	mov    esi,eax
            const result = self.buffer[start_index..new_end_index];
  21376f:	e8 8c 7e ff ff       	call   20b600 <panic>
  213774:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  21377b:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
  213782:	48 39 c8             	cmp    rax,rcx
  213785:	76 10                	jbe    213797 <FixedBufferAllocator_realloc+0x407>
  213787:	48 8d 3d 4a fc 02 00 	lea    rdi,[rip+0x2fc4a]        # 2433d8 <__unnamed_20>
  21378e:	31 c0                	xor    eax,eax
  213790:	89 c6                	mov    esi,eax
  213792:	e8 69 7e ff ff       	call   20b600 <panic>
  213797:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
  21379e:	48 8b 8d b0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x150]
  2137a5:	48 03 01             	add    rax,QWORD PTR [rcx]
  2137a8:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  2137ac:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  2137b3:	48 8b 95 a8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x158]
  2137ba:	48 29 d0             	sub    rax,rdx
  2137bd:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  2137c1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2137c5:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
  2137cc:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2137d0:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
            self.end_index = new_end_index;
  2137d7:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  2137de:	48 8b b5 20 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe0]
  2137e5:	48 89 70 18          	mov    QWORD PTR [rax+0x18],rsi
            return result;
  2137e9:	66 c7 45 b0 00 00    	mov    WORD PTR [rbp-0x50],0x0
  2137ef:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  2137f6:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  2137fa:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  213801:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  213805:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  213809:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
  213810:	48 89 06             	mov    QWORD PTR [rsi],rax
  213813:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  213817:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  21381b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  21381f:	48 89 46 10          	mov    QWORD PTR [rsi+0x10],rax
  213823:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  21382a:	48 81 c4 80 01 00 00 	add    rsp,0x180
  213831:	5d                   	pop    rbp
  213832:	c3                   	ret    
  213833:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21383a:	84 00 00 00 00 00 

0000000000213840 <FixedBufferAllocator_free>:
        }
    }

    fn free(allocator: *Allocator, bytes: []u8) void {}
  213840:	55                   	push   rbp
  213841:	48 89 e5             	mov    rbp,rsp
  213844:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  213848:	5d                   	pop    rbp
  213849:	c3                   	ret    
  21384a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000213850 <posixOpen>:
pub fn posixOpen(allocator: *Allocator, file_path: []const u8, flags: u32, perm: usize) PosixOpenError!i32 {
  213850:	55                   	push   rbp
  213851:	48 89 e5             	mov    rbp,rsp
  213854:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  21385b:	48 89 f8             	mov    rax,rdi
  21385e:	4c 8d 55 e8          	lea    r10,[rbp-0x18]
  213862:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  213866:	44 89 45 b4          	mov    DWORD PTR [rbp-0x4c],r8d
  21386a:	4c 89 4d a8          	mov    QWORD PTR [rbp-0x58],r9
    const path_with_null = try cstr.addNullByte(allocator, file_path);
  21386e:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  213872:	48 89 7d 90          	mov    QWORD PTR [rbp-0x70],rdi
  213876:	4c 89 d7             	mov    rdi,r10
  213879:	48 89 75 88          	mov    QWORD PTR [rbp-0x78],rsi
  21387d:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  213881:	e8 5a 3c 01 00       	call   2274e0 <addNullByte>
  213886:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  21388b:	74 37                	je     2138c4 <posixOpen+0x74>
  21388d:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  213891:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  213895:	66 89 85 7e ff ff ff 	mov    WORD PTR [rbp-0x82],ax
  21389c:	e8 ef 83 ff ff       	call   20bc90 <__zig_return_error>
  2138a1:	66 8b 85 7e ff ff ff 	mov    ax,WORD PTR [rbp-0x82]
  2138a8:	66 89 45 c8          	mov    WORD PTR [rbp-0x38],ax
  2138ac:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2138b0:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  2138b4:	48 89 39             	mov    QWORD PTR [rcx],rdi
  2138b7:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  2138bb:	48 81 c4 90 00 00 00 	add    rsp,0x90
  2138c2:	5d                   	pop    rbp
  2138c3:	c3                   	ret    
  2138c4:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  2138c8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2138cc:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  2138d0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2138d4:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
    return posixOpenC(path_with_null.ptr, flags, perm);
  2138d8:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  2138dc:	8b 4d b4             	mov    ecx,DWORD PTR [rbp-0x4c]
  2138df:	4c 8b 45 a8          	mov    r8,QWORD PTR [rbp-0x58]
  2138e3:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
  2138e7:	e8 74 3d 01 00       	call   227660 <posixOpenC>
  2138ec:	48 8d 75 98          	lea    rsi,[rbp-0x68]
    defer allocator.free(path_with_null);
  2138f0:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  2138f4:	e8 17 ea 00 00       	call   222310 <Allocator_free.73>
    return posixOpenC(path_with_null.ptr, flags, perm);
  2138f9:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  2138fe:	74 0b                	je     21390b <posixOpen+0xbb>
  213900:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  213904:	e8 87 83 ff ff       	call   20bc90 <__zig_return_error>
  213909:	eb 02                	jmp    21390d <posixOpen+0xbd>
  21390b:	eb 00                	jmp    21390d <posixOpen+0xbd>
  21390d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  213911:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  213915:	48 89 01             	mov    QWORD PTR [rcx],rax
  213918:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  21391c:	48 81 c4 90 00 00 00 	add    rsp,0x90
  213923:	5d                   	pop    rbp
  213924:	c3                   	ret    
  213925:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21392c:	00 00 00 00 

0000000000213930 <FileInStream_init>:
    pub fn init(file: *File) FileInStream {
  213930:	55                   	push   rbp
  213931:	48 89 e5             	mov    rbp,rsp
  213934:	48 89 f8             	mov    rax,rdi
  213937:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
            .file = file,
  21393b:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
        return FileInStream{
  21393f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  213943:	48 8b 35 56 fc 02 00 	mov    rsi,QWORD PTR [rip+0x2fc56]        # 2435a0 <__unnamed_62>
  21394a:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21394e:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  213952:	48 89 37             	mov    QWORD PTR [rdi],rsi
  213955:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  213959:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  21395d:	5d                   	pop    rbp
  21395e:	c3                   	ret    
  21395f:	90                   	nop

0000000000213960 <InStream(ReadError)_readNoEof>:
        pub fn readNoEof(self: *Self, buf: []u8) !void {
  213960:	55                   	push   rbp
  213961:	48 89 e5             	mov    rbp,rsp
  213964:	48 83 ec 50          	sub    rsp,0x50
  213968:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  21396c:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
            const amt_read = try self.read(buf);
  213970:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  213974:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  213978:	48 89 c7             	mov    rdi,rax
  21397b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21397f:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
  213983:	48 89 c6             	mov    rsi,rax
  213986:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  21398a:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  21398e:	48 89 ca             	mov    rdx,rcx
  213991:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  213995:	e8 66 0e 00 00       	call   214800 <InStream(ReadError)_read>
  21399a:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  21399f:	74 1b                	je     2139bc <InStream(ReadError)_readNoEof+0x5c>
  2139a1:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  2139a5:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2139a9:	66 89 45 b6          	mov    WORD PTR [rbp-0x4a],ax
  2139ad:	e8 de 82 ff ff       	call   20bc90 <__zig_return_error>
  2139b2:	66 8b 45 b6          	mov    ax,WORD PTR [rbp-0x4a]
  2139b6:	48 83 c4 50          	add    rsp,0x50
  2139ba:	5d                   	pop    rbp
  2139bb:	c3                   	ret    
  2139bc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2139c0:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
            if (amt_read < buf.len) return error.EndOfStream;
  2139c4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2139c8:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  2139cc:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  2139d0:	73 13                	jae    2139e5 <InStream(ReadError)_readNoEof+0x85>
  2139d2:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2139d6:	e8 b5 82 ff ff       	call   20bc90 <__zig_return_error>
  2139db:	66 b8 20 00          	mov    ax,0x20
  2139df:	48 83 c4 50          	add    rsp,0x50
  2139e3:	5d                   	pop    rbp
  2139e4:	c3                   	ret    
  2139e5:	31 c0                	xor    eax,eax
  2139e7:	66 89 c1             	mov    cx,ax
        pub fn readNoEof(self: *Self, buf: []u8) !void {
  2139ea:	66 89 c8             	mov    ax,cx
  2139ed:	48 83 c4 50          	add    rsp,0x50
  2139f1:	5d                   	pop    rbp
  2139f2:	c3                   	ret    
  2139f3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2139fa:	84 00 00 00 00 00 

0000000000213a00 <eql>:
    assert(!lessThan(u8, "", ""));
    assert(lessThan(u8, "", "a"));
}

/// Compares two slices and returns whether they are equal.
pub fn eql(comptime T: type, a: []const T, b: []const T) bool {
  213a00:	55                   	push   rbp
  213a01:	48 89 e5             	mov    rbp,rsp
    if (a.len != b.len) return false;
  213a04:	48 83 ec 40          	sub    rsp,0x40
  213a08:	48 8b 47 08          	mov    rax,QWORD PTR [rdi+0x8]
  213a0c:	48 3b 46 08          	cmp    rax,QWORD PTR [rsi+0x8]
  213a10:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
  213a14:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  213a18:	74 0c                	je     213a26 <eql+0x26>
  213a1a:	31 c0                	xor    eax,eax
  213a1c:	88 c1                	mov    cl,al
  213a1e:	88 c8                	mov    al,cl
  213a20:	48 83 c4 40          	add    rsp,0x40
  213a24:	5d                   	pop    rbp
  213a25:	c3                   	ret    
  213a26:	eb 00                	jmp    213a28 <eql+0x28>
  213a28:	48 8d 7d ff          	lea    rdi,[rbp-0x1]
  213a2c:	be aa 00 00 00       	mov    esi,0xaa
  213a31:	b8 01 00 00 00       	mov    eax,0x1
  213a36:	89 c2                	mov    edx,eax
    for (a) |item, index| {
  213a38:	e8 13 0e 02 00       	call   234850 <memset>
  213a3d:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  213a44:	00 
  213a45:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  213a49:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
  213a4d:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  213a51:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  213a55:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  213a59:	48 39 c8             	cmp    rax,rcx
  213a5c:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  213a60:	73 41                	jae    213aa3 <eql+0xa3>
  213a62:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  213a66:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  213a69:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  213a6d:	40 8a 34 11          	mov    sil,BYTE PTR [rcx+rdx*1]
  213a71:	40 88 75 ff          	mov    BYTE PTR [rbp-0x1],sil
        if (b[index] != item) return false;
  213a75:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  213a79:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  213a7d:	48 3b 4f 08          	cmp    rcx,QWORD PTR [rdi+0x8]
  213a81:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  213a85:	72 34                	jb     213abb <eql+0xbb>
  213a87:	eb 22                	jmp    213aab <eql+0xab>
  213a89:	31 c0                	xor    eax,eax
  213a8b:	88 c1                	mov    cl,al
  213a8d:	88 c8                	mov    al,cl
  213a8f:	48 83 c4 40          	add    rsp,0x40
  213a93:	5d                   	pop    rbp
  213a94:	c3                   	ret    
    for (a) |item, index| {
  213a95:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  213a99:	48 83 c0 01          	add    rax,0x1
  213a9d:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  213aa1:	eb ae                	jmp    213a51 <eql+0x51>
    }
    return true;
  213aa3:	b0 01                	mov    al,0x1
  213aa5:	48 83 c4 40          	add    rsp,0x40
  213aa9:	5d                   	pop    rbp
  213aaa:	c3                   	ret    
  213aab:	48 8d 3d 26 f9 02 00 	lea    rdi,[rip+0x2f926]        # 2433d8 <__unnamed_20>
  213ab2:	31 c0                	xor    eax,eax
  213ab4:	89 c6                	mov    esi,eax
        if (b[index] != item) return false;
  213ab6:	e8 45 7b ff ff       	call   20b600 <panic>
  213abb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  213abf:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  213ac2:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  213ac6:	40 8a 34 11          	mov    sil,BYTE PTR [rcx+rdx*1]
  213aca:	40 3a 75 ff          	cmp    sil,BYTE PTR [rbp-0x1]
  213ace:	75 b9                	jne    213a89 <eql+0x89>
  213ad0:	eb c3                	jmp    213a95 <eql+0x95>
  213ad2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  213ad9:	1f 84 00 00 00 00 00 

0000000000213ae0 <InStream(ReadError)_readByte>:
        pub fn readByte(self: *Self) !u8 {
  213ae0:	55                   	push   rbp
  213ae1:	48 89 e5             	mov    rbp,rsp
  213ae4:	48 83 ec 60          	sub    rsp,0x60
  213ae8:	48 89 f8             	mov    rax,rdi
  213aeb:	b1 01                	mov    cl,0x1
  213aed:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
            var result: [1]u8 = undefined;
  213af1:	44 8a 05 57 52 ff ff 	mov    r8b,BYTE PTR [rip+0xffffffffffff5257]        # 208d4f <__unnamed_63>
  213af8:	44 88 45 d7          	mov    BYTE PTR [rbp-0x29],r8b
            try self.readNoEof(result[0..]);
  213afc:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  213b00:	f6 c1 01             	test   cl,0x1
  213b03:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  213b07:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
  213b0b:	48 89 75 b8          	mov    QWORD PTR [rbp-0x48],rsi
  213b0f:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  213b13:	75 5d                	jne    213b72 <InStream(ReadError)_readByte+0x92>
  213b15:	eb 4b                	jmp    213b62 <InStream(ReadError)_readByte+0x82>
  213b17:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  213b1b:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  213b1f:	66 89 45 ae          	mov    WORD PTR [rbp-0x52],ax
  213b23:	e8 68 81 ff ff       	call   20bc90 <__zig_return_error>
  213b28:	66 8b 45 ae          	mov    ax,WORD PTR [rbp-0x52]
  213b2c:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  213b30:	8b 4d e8             	mov    ecx,DWORD PTR [rbp-0x18]
  213b33:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  213b37:	89 0f                	mov    DWORD PTR [rdi],ecx
  213b39:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  213b3d:	48 83 c4 60          	add    rsp,0x60
  213b41:	5d                   	pop    rbp
  213b42:	c3                   	ret    
            return result[0];
  213b43:	8a 45 d7             	mov    al,BYTE PTR [rbp-0x29]
  213b46:	66 c7 45 e0 00 00    	mov    WORD PTR [rbp-0x20],0x0
  213b4c:	88 45 e2             	mov    BYTE PTR [rbp-0x1e],al
  213b4f:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
  213b52:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  213b56:	89 0a                	mov    DWORD PTR [rdx],ecx
  213b58:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  213b5c:	48 83 c4 60          	add    rsp,0x60
  213b60:	5d                   	pop    rbp
  213b61:	c3                   	ret    
  213b62:	48 8d 3d 6f f8 02 00 	lea    rdi,[rip+0x2f86f]        # 2433d8 <__unnamed_20>
  213b69:	31 c0                	xor    eax,eax
  213b6b:	89 c6                	mov    esi,eax
            try self.readNoEof(result[0..]);
  213b6d:	e8 8e 7a ff ff       	call   20b600 <panic>
  213b72:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
  213b76:	48 8d 45 d7          	lea    rax,[rbp-0x29]
  213b7a:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  213b7e:	48 c7 45 f8 01 00 00 	mov    QWORD PTR [rbp-0x8],0x1
  213b85:	00 
  213b86:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  213b8a:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
  213b8e:	e8 cd fd ff ff       	call   213960 <InStream(ReadError)_readNoEof>
  213b93:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  213b97:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  213b9c:	0f 85 75 ff ff ff    	jne    213b17 <InStream(ReadError)_readByte+0x37>
  213ba2:	eb 9f                	jmp    213b43 <InStream(ReadError)_readByte+0x63>
  213ba4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  213bab:	00 00 00 00 00 

0000000000213bb0 <File_seekForward>:
    pub fn seekForward(self: *File, amount: isize) !void {
  213bb0:	55                   	push   rbp
  213bb1:	48 89 e5             	mov    rbp,rsp
  213bb4:	48 83 ec 60          	sub    rsp,0x60
  213bb8:	b8 01 00 00 00       	mov    eax,0x1
  213bbd:	89 c1                	mov    ecx,eax
  213bbf:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  213bc3:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
                const result = posix.lseek(self.handle, amount, posix.SEEK_CUR);
  213bc7:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  213bcb:	8b 02                	mov    eax,DWORD PTR [rdx]
  213bcd:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  213bd1:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  213bd5:	89 c7                	mov    edi,eax
  213bd7:	48 89 ca             	mov    rdx,rcx
  213bda:	e8 91 0c 00 00       	call   214870 <lseek>
  213bdf:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
                const err = posix.getErrno(result);
  213be3:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  213be7:	e8 94 94 ff ff       	call   20d080 <getErrno>
  213bec:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
                if (err > 0) {
  213bf0:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
  213bf5:	0f 86 b7 00 00 00    	jbe    213cb2 <File_seekForward+0x102>
                    return switch (err) {
  213bfb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  213bff:	48 89 c1             	mov    rcx,rax
  213c02:	48 83 e9 06          	sub    rcx,0x6
  213c06:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  213c0a:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  213c0e:	74 7d                	je     213c8d <File_seekForward+0xdd>
  213c10:	eb 00                	jmp    213c12 <File_seekForward+0x62>
  213c12:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  213c16:	48 83 e8 09          	sub    rax,0x9
  213c1a:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  213c1e:	74 45                	je     213c65 <File_seekForward+0xb5>
  213c20:	eb 00                	jmp    213c22 <File_seekForward+0x72>
  213c22:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  213c26:	48 83 e8 16          	sub    rax,0x16
  213c2a:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  213c2e:	74 3f                	je     213c6f <File_seekForward+0xbf>
  213c30:	eb 00                	jmp    213c32 <File_seekForward+0x82>
  213c32:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  213c36:	48 83 e8 1d          	sub    rax,0x1d
  213c3a:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  213c3e:	74 43                	je     213c83 <File_seekForward+0xd3>
  213c40:	eb 00                	jmp    213c42 <File_seekForward+0x92>
  213c42:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  213c46:	48 83 e8 4b          	sub    rax,0x4b
  213c4a:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  213c4e:	74 29                	je     213c79 <File_seekForward+0xc9>
  213c50:	eb 00                	jmp    213c52 <File_seekForward+0xa2>
                        else => os.unexpectedErrorPosix(err),
  213c52:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  213c56:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  213c5a:	e8 c1 94 ff ff       	call   20d120 <unexpectedErrorPosix>
                    return switch (err) {
  213c5f:	66 89 45 a6          	mov    WORD PTR [rbp-0x5a],ax
  213c63:	eb 32                	jmp    213c97 <File_seekForward+0xe7>
  213c65:	66 b8 1e 00          	mov    ax,0x1e
  213c69:	66 89 45 a6          	mov    WORD PTR [rbp-0x5a],ax
  213c6d:	eb 28                	jmp    213c97 <File_seekForward+0xe7>
  213c6f:	66 b8 22 00          	mov    ax,0x22
  213c73:	66 89 45 a6          	mov    WORD PTR [rbp-0x5a],ax
  213c77:	eb 1e                	jmp    213c97 <File_seekForward+0xe7>
  213c79:	66 b8 22 00          	mov    ax,0x22
  213c7d:	66 89 45 a6          	mov    WORD PTR [rbp-0x5a],ax
  213c81:	eb 14                	jmp    213c97 <File_seekForward+0xe7>
  213c83:	66 b8 22 00          	mov    ax,0x22
  213c87:	66 89 45 a6          	mov    WORD PTR [rbp-0x5a],ax
  213c8b:	eb 0a                	jmp    213c97 <File_seekForward+0xe7>
  213c8d:	66 b8 22 00          	mov    ax,0x22
  213c91:	66 89 45 a6          	mov    WORD PTR [rbp-0x5a],ax
  213c95:	eb 00                	jmp    213c97 <File_seekForward+0xe7>
  213c97:	66 8b 45 a6          	mov    ax,WORD PTR [rbp-0x5a]
  213c9b:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  213c9f:	66 89 45 a4          	mov    WORD PTR [rbp-0x5c],ax
  213ca3:	e8 e8 7f ff ff       	call   20bc90 <__zig_return_error>
  213ca8:	66 8b 45 a4          	mov    ax,WORD PTR [rbp-0x5c]
  213cac:	48 83 c4 60          	add    rsp,0x60
  213cb0:	5d                   	pop    rbp
  213cb1:	c3                   	ret    
                if (err > 0) {
  213cb2:	eb 00                	jmp    213cb4 <File_seekForward+0x104>
  213cb4:	31 c0                	xor    eax,eax
  213cb6:	66 89 c1             	mov    cx,ax
    pub fn seekForward(self: *File, amount: isize) !void {
  213cb9:	66 89 c8             	mov    ax,cx
  213cbc:	48 83 c4 60          	add    rsp,0x60
  213cc0:	5d                   	pop    rbp
  213cc1:	c3                   	ret    
  213cc2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  213cc9:	1f 84 00 00 00 00 00 

0000000000213cd0 <InStream(ReadError)_readInt>:
        pub fn readInt(self: *Self, endian: builtin.Endian, comptime T: type) !T {
  213cd0:	55                   	push   rbp
  213cd1:	48 89 e5             	mov    rbp,rsp
  213cd4:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  213cdb:	88 c8                	mov    al,cl
  213cdd:	49 89 f8             	mov    r8,rdi
  213ce0:	41 b1 01             	mov    r9b,0x1
  213ce3:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
  213ce7:	24 01                	and    al,0x1
  213ce9:	88 45 bf             	mov    BYTE PTR [rbp-0x41],al
            var bytes: [@sizeOf(T)]u8 = undefined;
  213cec:	66 44 8b 15 5c 50 ff 	mov    r10w,WORD PTR [rip+0xffffffffffff505c]        # 208d50 <__unnamed_64>
  213cf3:	ff 
  213cf4:	66 44 89 55 bd       	mov    WORD PTR [rbp-0x43],r10w
            try self.readNoEof(bytes[0..]);
  213cf9:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  213cfd:	41 f6 c1 01          	test   r9b,0x1
  213d01:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
  213d05:	4c 89 45 a8          	mov    QWORD PTR [rbp-0x58],r8
  213d09:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  213d0d:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
  213d11:	0f 85 88 00 00 00    	jne    213d9f <InStream(ReadError)_readInt+0xcf>
  213d17:	eb 76                	jmp    213d8f <InStream(ReadError)_readInt+0xbf>
  213d19:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  213d1d:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  213d21:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  213d25:	e8 66 7f ff ff       	call   20bc90 <__zig_return_error>
  213d2a:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  213d2e:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  213d32:	8b 4d e8             	mov    ecx,DWORD PTR [rbp-0x18]
  213d35:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  213d39:	89 0f                	mov    DWORD PTR [rdi],ecx
  213d3b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  213d3f:	48 81 c4 80 00 00 00 	add    rsp,0x80
  213d46:	5d                   	pop    rbp
  213d47:	c3                   	ret    
  213d48:	48 8d 45 d0          	lea    rax,[rbp-0x30]
  213d4c:	48 8d 4d bd          	lea    rcx,[rbp-0x43]
            return mem.readInt(bytes, T, endian);
  213d50:	8a 55 bf             	mov    dl,BYTE PTR [rbp-0x41]
  213d53:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  213d57:	48 c7 45 d8 02 00 00 	mov    QWORD PTR [rbp-0x28],0x2
  213d5e:	00 
  213d5f:	0f b6 f2             	movzx  esi,dl
  213d62:	48 8d 7d d0          	lea    rdi,[rbp-0x30]
  213d66:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  213d6a:	e8 71 0b 00 00       	call   2148e0 <readInt>
  213d6f:	66 c7 45 c8 00 00    	mov    WORD PTR [rbp-0x38],0x0
  213d75:	66 89 45 ca          	mov    WORD PTR [rbp-0x36],ax
  213d79:	8b 75 c8             	mov    esi,DWORD PTR [rbp-0x38]
  213d7c:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  213d80:	89 31                	mov    DWORD PTR [rcx],esi
  213d82:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  213d86:	48 81 c4 80 00 00 00 	add    rsp,0x80
  213d8d:	5d                   	pop    rbp
  213d8e:	c3                   	ret    
  213d8f:	48 8d 3d 42 f6 02 00 	lea    rdi,[rip+0x2f642]        # 2433d8 <__unnamed_20>
  213d96:	31 c0                	xor    eax,eax
  213d98:	89 c6                	mov    esi,eax
            try self.readNoEof(bytes[0..]);
  213d9a:	e8 61 78 ff ff       	call   20b600 <panic>
  213d9f:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
  213da3:	48 8d 45 bd          	lea    rax,[rbp-0x43]
  213da7:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  213dab:	48 c7 45 f8 02 00 00 	mov    QWORD PTR [rbp-0x8],0x2
  213db2:	00 
  213db3:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  213db7:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  213dbb:	e8 a0 fb ff ff       	call   213960 <InStream(ReadError)_readNoEof>
  213dc0:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  213dc4:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  213dc9:	0f 85 4a ff ff ff    	jne    213d19 <InStream(ReadError)_readInt+0x49>
  213dcf:	e9 74 ff ff ff       	jmp    213d48 <InStream(ReadError)_readInt+0x78>
  213dd4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  213ddb:	00 00 00 00 00 

0000000000213de0 <InStream(ReadError)_readInt.32>:
        pub fn readInt(self: *Self, endian: builtin.Endian, comptime T: type) !T {
  213de0:	55                   	push   rbp
  213de1:	48 89 e5             	mov    rbp,rsp
  213de4:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  213deb:	88 c8                	mov    al,cl
  213ded:	49 89 f8             	mov    r8,rdi
  213df0:	41 b1 01             	mov    r9b,0x1
  213df3:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  213df7:	24 01                	and    al,0x1
  213df9:	88 45 b7             	mov    BYTE PTR [rbp-0x49],al
            var bytes: [@sizeOf(T)]u8 = undefined;
  213dfc:	8b 0d 1e 6b ff ff    	mov    ecx,DWORD PTR [rip+0xffffffffffff6b1e]        # 20a920 <__unnamed_37>
  213e02:	89 4d b3             	mov    DWORD PTR [rbp-0x4d],ecx
            try self.readNoEof(bytes[0..]);
  213e05:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  213e09:	41 f6 c1 01          	test   r9b,0x1
  213e0d:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  213e11:	4c 89 45 a0          	mov    QWORD PTR [rbp-0x60],r8
  213e15:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  213e19:	48 89 7d 90          	mov    QWORD PTR [rbp-0x70],rdi
  213e1d:	0f 85 8b 00 00 00    	jne    213eae <InStream(ReadError)_readInt.32+0xce>
  213e23:	eb 79                	jmp    213e9e <InStream(ReadError)_readInt.32+0xbe>
  213e25:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  213e29:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  213e2d:	66 89 45 8e          	mov    WORD PTR [rbp-0x72],ax
  213e31:	e8 5a 7e ff ff       	call   20bc90 <__zig_return_error>
  213e36:	66 8b 45 8e          	mov    ax,WORD PTR [rbp-0x72]
  213e3a:	66 89 45 e0          	mov    WORD PTR [rbp-0x20],ax
  213e3e:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  213e42:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  213e46:	48 89 39             	mov    QWORD PTR [rcx],rdi
  213e49:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  213e4d:	48 81 c4 80 00 00 00 	add    rsp,0x80
  213e54:	5d                   	pop    rbp
  213e55:	c3                   	ret    
  213e56:	48 8d 45 c8          	lea    rax,[rbp-0x38]
  213e5a:	48 8d 4d b3          	lea    rcx,[rbp-0x4d]
            return mem.readInt(bytes, T, endian);
  213e5e:	8a 55 b7             	mov    dl,BYTE PTR [rbp-0x49]
  213e61:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  213e65:	48 c7 45 d0 04 00 00 	mov    QWORD PTR [rbp-0x30],0x4
  213e6c:	00 
  213e6d:	0f b6 f2             	movzx  esi,dl
  213e70:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  213e74:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  213e78:	e8 23 0c 00 00       	call   214aa0 <readInt.35>
  213e7d:	66 c7 45 c0 00 00    	mov    WORD PTR [rbp-0x40],0x0
  213e83:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
  213e86:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  213e8a:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  213e8e:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  213e91:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  213e95:	48 81 c4 80 00 00 00 	add    rsp,0x80
  213e9c:	5d                   	pop    rbp
  213e9d:	c3                   	ret    
  213e9e:	48 8d 3d 33 f5 02 00 	lea    rdi,[rip+0x2f533]        # 2433d8 <__unnamed_20>
  213ea5:	31 c0                	xor    eax,eax
  213ea7:	89 c6                	mov    esi,eax
            try self.readNoEof(bytes[0..]);
  213ea9:	e8 52 77 ff ff       	call   20b600 <panic>
  213eae:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
  213eb2:	48 8d 45 b3          	lea    rax,[rbp-0x4d]
  213eb6:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  213eba:	48 c7 45 f8 04 00 00 	mov    QWORD PTR [rbp-0x8],0x4
  213ec1:	00 
  213ec2:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  213ec6:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  213eca:	e8 91 fa ff ff       	call   213960 <InStream(ReadError)_readNoEof>
  213ecf:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  213ed3:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  213ed8:	0f 85 47 ff ff ff    	jne    213e25 <InStream(ReadError)_readInt.32+0x45>
  213ede:	e9 73 ff ff ff       	jmp    213e56 <InStream(ReadError)_readInt.32+0x76>
  213ee3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  213eea:	84 00 00 00 00 00 

0000000000213ef0 <InStream(ReadError)_readInt.33>:
        pub fn readInt(self: *Self, endian: builtin.Endian, comptime T: type) !T {
  213ef0:	55                   	push   rbp
  213ef1:	48 89 e5             	mov    rbp,rsp
  213ef4:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  213efb:	88 c8                	mov    al,cl
  213efd:	49 89 f8             	mov    r8,rdi
  213f00:	41 b1 01             	mov    r9b,0x1
  213f03:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
  213f07:	24 01                	and    al,0x1
  213f09:	88 45 a7             	mov    BYTE PTR [rbp-0x59],al
            var bytes: [@sizeOf(T)]u8 = undefined;
  213f0c:	48 8b 15 65 cd fe ff 	mov    rdx,QWORD PTR [rip+0xfffffffffffecd65]        # 200c78 <__unnamed_132>
  213f13:	48 89 55 9f          	mov    QWORD PTR [rbp-0x61],rdx
            try self.readNoEof(bytes[0..]);
  213f17:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  213f1b:	41 f6 c1 01          	test   r9b,0x1
  213f1f:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
  213f23:	4c 89 45 88          	mov    QWORD PTR [rbp-0x78],r8
  213f27:	48 89 55 80          	mov    QWORD PTR [rbp-0x80],rdx
  213f2b:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
  213f32:	0f 85 ae 00 00 00    	jne    213fe6 <InStream(ReadError)_readInt.33+0xf6>
  213f38:	e9 99 00 00 00       	jmp    213fd6 <InStream(ReadError)_readInt.33+0xe6>
  213f3d:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  213f41:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  213f45:	66 89 85 76 ff ff ff 	mov    WORD PTR [rbp-0x8a],ax
  213f4c:	e8 3f 7d ff ff       	call   20bc90 <__zig_return_error>
  213f51:	66 8b 85 76 ff ff ff 	mov    ax,WORD PTR [rbp-0x8a]
  213f58:	66 89 45 d8          	mov    WORD PTR [rbp-0x28],ax
  213f5c:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  213f60:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  213f67:	48 89 39             	mov    QWORD PTR [rcx],rdi
  213f6a:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  213f6e:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  213f72:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  213f76:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  213f7d:	5d                   	pop    rbp
  213f7e:	c3                   	ret    
  213f7f:	48 8d 45 c0          	lea    rax,[rbp-0x40]
  213f83:	48 8d 4d 9f          	lea    rcx,[rbp-0x61]
            return mem.readInt(bytes, T, endian);
  213f87:	8a 55 a7             	mov    dl,BYTE PTR [rbp-0x59]
  213f8a:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
  213f8e:	48 c7 45 c8 08 00 00 	mov    QWORD PTR [rbp-0x38],0x8
  213f95:	00 
  213f96:	0f b6 f2             	movzx  esi,dl
  213f99:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  213f9d:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  213fa4:	e8 97 0c 00 00       	call   214c40 <readInt.36>
  213fa9:	66 c7 45 b0 00 00    	mov    WORD PTR [rbp-0x50],0x0
  213faf:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  213fb3:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  213fb7:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  213fbe:	48 89 01             	mov    QWORD PTR [rcx],rax
  213fc1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  213fc5:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  213fc9:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  213fcd:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  213fd4:	5d                   	pop    rbp
  213fd5:	c3                   	ret    
  213fd6:	48 8d 3d fb f3 02 00 	lea    rdi,[rip+0x2f3fb]        # 2433d8 <__unnamed_20>
  213fdd:	31 c0                	xor    eax,eax
  213fdf:	89 c6                	mov    esi,eax
            try self.readNoEof(bytes[0..]);
  213fe1:	e8 1a 76 ff ff       	call   20b600 <panic>
  213fe6:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
  213fea:	48 8d 45 9f          	lea    rax,[rbp-0x61]
  213fee:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  213ff2:	48 c7 45 f8 08 00 00 	mov    QWORD PTR [rbp-0x8],0x8
  213ff9:	00 
  213ffa:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  213ffe:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  214002:	e8 59 f9 ff ff       	call   213960 <InStream(ReadError)_readNoEof>
  214007:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  21400b:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  214010:	0f 85 27 ff ff ff    	jne    213f3d <InStream(ReadError)_readInt.33+0x4d>
  214016:	e9 64 ff ff ff       	jmp    213f7f <InStream(ReadError)_readInt.33+0x8f>
  21401b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000214020 <add>:
pub fn mul(comptime T: type, a: T, b: T) (error{Overflow}!T) {
    var answer: T = undefined;
    return if (@mulWithOverflow(T, a, b, &answer)) error.Overflow else answer;
}

pub fn add(comptime T: type, a: T, b: T) (error{Overflow}!T) {
  214020:	55                   	push   rbp
  214021:	48 89 e5             	mov    rbp,rsp
  214024:	53                   	push   rbx
  214025:	48 83 ec 58          	sub    rsp,0x58
  214029:	48 89 f8             	mov    rax,rdi
  21402c:	41 b8 aa 00 00 00    	mov    r8d,0xaa
  214032:	41 b9 08 00 00 00    	mov    r9d,0x8
  214038:	45 89 ca             	mov    r10d,r9d
  21403b:	4c 8d 5d d0          	lea    r11,[rbp-0x30]
  21403f:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  214043:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
    var answer: T = undefined;
  214047:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  21404b:	4c 89 df             	mov    rdi,r11
  21404e:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
  214052:	44 89 c6             	mov    esi,r8d
  214055:	4c 89 d2             	mov    rdx,r10
  214058:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  21405c:	e8 ef 07 02 00       	call   234850 <memset>
    return if (@addWithOverflow(T, a, b, &answer)) error.Overflow else answer;
  214061:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  214065:	48 03 45 d8          	add    rax,QWORD PTR [rbp-0x28]
  214069:	0f 92 c3             	setb   bl
  21406c:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  214070:	f6 c3 01             	test   bl,0x1
  214073:	75 02                	jne    214077 <add+0x57>
  214075:	eb 0d                	jmp    214084 <add+0x64>
  214077:	48 8d 05 52 c7 fe ff 	lea    rax,[rip+0xfffffffffffec752]        # 2007d0 <__unnamed_144>
  21407e:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  214082:	eb 16                	jmp    21409a <add+0x7a>
  214084:	48 8d 45 e8          	lea    rax,[rbp-0x18]
  214088:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  21408c:	66 c7 45 e8 00 00    	mov    WORD PTR [rbp-0x18],0x0
  214092:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  214096:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  21409a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  21409e:	66 83 38 00          	cmp    WORD PTR [rax],0x0
  2140a2:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  2140a6:	74 0b                	je     2140b3 <add+0x93>
  2140a8:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  2140ac:	e8 df 7b ff ff       	call   20bc90 <__zig_return_error>
  2140b1:	eb 02                	jmp    2140b5 <add+0x95>
  2140b3:	eb 00                	jmp    2140b5 <add+0x95>
  2140b5:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  2140b9:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  2140bc:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  2140c0:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  2140c3:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  2140c7:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  2140cb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  2140cf:	48 83 c4 58          	add    rsp,0x58
  2140d3:	5b                   	pop    rbx
  2140d4:	5d                   	pop    rbp
  2140d5:	c3                   	ret    
  2140d6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  2140dd:	00 00 00 

00000000002140e0 <File_getEndPos>:
    pub fn getEndPos(self: *File) !usize {
  2140e0:	55                   	push   rbp
  2140e1:	48 89 e5             	mov    rbp,rsp
  2140e4:	48 81 ec 10 02 00 00 	sub    rsp,0x210
  2140eb:	48 89 f8             	mov    rax,rdi
  2140ee:	48 8d 8d 68 ff ff ff 	lea    rcx,[rbp-0x98]
  2140f5:	48 89 95 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rdx
            const stat = try os.posixFStat(self.handle);
  2140fc:	48 8b 95 a8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x158]
  214103:	8b 12                	mov    edx,DWORD PTR [rdx]
  214105:	48 89 bd 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rdi
  21410c:	48 89 cf             	mov    rdi,rcx
  21410f:	48 89 b5 08 fe ff ff 	mov    QWORD PTR [rbp-0x1f8],rsi
  214116:	48 89 85 00 fe ff ff 	mov    QWORD PTR [rbp-0x200],rax
  21411d:	e8 ce 0c 00 00       	call   214df0 <posixFStat>
  214122:	66 83 bd 68 ff ff ff 	cmp    WORD PTR [rbp-0x98],0x0
  214129:	00 
  21412a:	74 54                	je     214180 <File_getEndPos+0xa0>
  21412c:	66 8b 85 68 ff ff ff 	mov    ax,WORD PTR [rbp-0x98]
  214133:	48 8b bd 08 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1f8]
  21413a:	66 89 85 fe fd ff ff 	mov    WORD PTR [rbp-0x202],ax
  214141:	e8 4a 7b ff ff       	call   20bc90 <__zig_return_error>
  214146:	66 8b 85 fe fd ff ff 	mov    ax,WORD PTR [rbp-0x202]
  21414d:	66 89 85 c0 fe ff ff 	mov    WORD PTR [rbp-0x140],ax
  214154:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21415b:	48 8b 8d 10 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1f0]
  214162:	48 89 39             	mov    QWORD PTR [rcx],rdi
  214165:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  21416c:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  214170:	48 8b 85 00 fe ff ff 	mov    rax,QWORD PTR [rbp-0x200]
  214177:	48 81 c4 10 02 00 00 	add    rsp,0x210
  21417e:	5d                   	pop    rbp
  21417f:	c3                   	ret    
  214180:	b8 90 00 00 00       	mov    eax,0x90
  214185:	89 c2                	mov    edx,eax
  214187:	48 8d 8d 18 fe ff ff 	lea    rcx,[rbp-0x1e8]
  21418e:	48 8d b5 68 ff ff ff 	lea    rsi,[rbp-0x98]
  214195:	48 83 c6 08          	add    rsi,0x8
  214199:	48 89 cf             	mov    rdi,rcx
  21419c:	e8 ff 06 02 00       	call   2348a0 <memcpy>
            return @intCast(usize, stat.size);
  2141a1:	48 8b 8d 48 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1b8]
  2141a8:	48 83 f9 00          	cmp    rcx,0x0
  2141ac:	48 89 8d f0 fd ff ff 	mov    QWORD PTR [rbp-0x210],rcx
  2141b3:	7c 43                	jl     2141f8 <File_getEndPos+0x118>
  2141b5:	66 c7 85 b0 fe ff ff 	mov    WORD PTR [rbp-0x150],0x0
  2141bc:	00 00 
  2141be:	48 8b 85 f0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x210]
  2141c5:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
  2141cc:	48 8b 8d b0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x150]
  2141d3:	48 8b 95 10 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1f0]
  2141da:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  2141dd:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  2141e4:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  2141e8:	48 8b 85 00 fe ff ff 	mov    rax,QWORD PTR [rbp-0x200]
  2141ef:	48 81 c4 10 02 00 00 	add    rsp,0x210
  2141f6:	5d                   	pop    rbp
  2141f7:	c3                   	ret    
  2141f8:	48 8d 3d 89 f0 02 00 	lea    rdi,[rip+0x2f089]        # 243288 <__unnamed_3>
  2141ff:	31 c0                	xor    eax,eax
  214201:	89 c6                	mov    esi,eax
  214203:	e8 f8 73 ff ff       	call   20b600 <panic>
  214208:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  21420f:	00 

0000000000214210 <File_seekTo>:
    pub fn seekTo(self: *File, pos: usize) !void {
  214210:	55                   	push   rbp
  214211:	48 89 e5             	mov    rbp,rsp
  214214:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  21421b:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  21421f:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  214223:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
                const ipos = try math.cast(isize, pos);
  214227:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  21422b:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  21422f:	48 89 c7             	mov    rdi,rax
  214232:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  214236:	e8 d5 0d 00 00       	call   215010 <cast>
  21423b:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  214240:	74 1e                	je     214260 <File_seekTo+0x50>
  214242:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  214246:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  21424a:	66 89 45 ae          	mov    WORD PTR [rbp-0x52],ax
  21424e:	e8 3d 7a ff ff       	call   20bc90 <__zig_return_error>
  214253:	66 8b 45 ae          	mov    ax,WORD PTR [rbp-0x52]
  214257:	48 81 c4 90 00 00 00 	add    rsp,0x90
  21425e:	5d                   	pop    rbp
  21425f:	c3                   	ret    
  214260:	31 c0                	xor    eax,eax
  214262:	89 c2                	mov    edx,eax
  214264:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  214268:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
                const result = posix.lseek(self.handle, ipos, posix.SEEK_SET);
  21426c:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  214270:	8b 39                	mov    edi,DWORD PTR [rcx]
  214272:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  214276:	e8 f5 05 00 00       	call   214870 <lseek>
  21427b:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
                const err = posix.getErrno(result);
  21427f:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  214283:	e8 f8 8d ff ff       	call   20d080 <getErrno>
  214288:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                if (err > 0) {
  21428c:	48 83 7d b8 00       	cmp    QWORD PTR [rbp-0x48],0x0
  214291:	0f 86 dc 00 00 00    	jbe    214373 <File_seekTo+0x163>
                    return switch (err) {
  214297:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21429b:	48 89 c1             	mov    rcx,rax
  21429e:	48 83 e9 06          	sub    rcx,0x6
  2142a2:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  2142a6:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
  2142aa:	0f 84 8f 00 00 00    	je     21433f <File_seekTo+0x12f>
  2142b0:	eb 00                	jmp    2142b2 <File_seekTo+0xa2>
  2142b2:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2142b6:	48 83 e8 09          	sub    rax,0x9
  2142ba:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  2142be:	74 4b                	je     21430b <File_seekTo+0xfb>
  2142c0:	eb 00                	jmp    2142c2 <File_seekTo+0xb2>
  2142c2:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2142c6:	48 83 e8 16          	sub    rax,0x16
  2142ca:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  2142ce:	74 48                	je     214318 <File_seekTo+0x108>
  2142d0:	eb 00                	jmp    2142d2 <File_seekTo+0xc2>
  2142d2:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2142d6:	48 83 e8 1d          	sub    rax,0x1d
  2142da:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  2142de:	74 52                	je     214332 <File_seekTo+0x122>
  2142e0:	eb 00                	jmp    2142e2 <File_seekTo+0xd2>
  2142e2:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2142e6:	48 83 e8 4b          	sub    rax,0x4b
  2142ea:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  2142f1:	74 32                	je     214325 <File_seekTo+0x115>
  2142f3:	eb 00                	jmp    2142f5 <File_seekTo+0xe5>
                        else => os.unexpectedErrorPosix(err),
  2142f5:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  2142f9:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  2142fd:	e8 1e 8e ff ff       	call   20d120 <unexpectedErrorPosix>
                    return switch (err) {
  214302:	66 89 85 76 ff ff ff 	mov    WORD PTR [rbp-0x8a],ax
  214309:	eb 41                	jmp    21434c <File_seekTo+0x13c>
  21430b:	66 b8 1e 00          	mov    ax,0x1e
  21430f:	66 89 85 76 ff ff ff 	mov    WORD PTR [rbp-0x8a],ax
  214316:	eb 34                	jmp    21434c <File_seekTo+0x13c>
  214318:	66 b8 22 00          	mov    ax,0x22
  21431c:	66 89 85 76 ff ff ff 	mov    WORD PTR [rbp-0x8a],ax
  214323:	eb 27                	jmp    21434c <File_seekTo+0x13c>
  214325:	66 b8 22 00          	mov    ax,0x22
  214329:	66 89 85 76 ff ff ff 	mov    WORD PTR [rbp-0x8a],ax
  214330:	eb 1a                	jmp    21434c <File_seekTo+0x13c>
  214332:	66 b8 22 00          	mov    ax,0x22
  214336:	66 89 85 76 ff ff ff 	mov    WORD PTR [rbp-0x8a],ax
  21433d:	eb 0d                	jmp    21434c <File_seekTo+0x13c>
  21433f:	66 b8 22 00          	mov    ax,0x22
  214343:	66 89 85 76 ff ff ff 	mov    WORD PTR [rbp-0x8a],ax
  21434a:	eb 00                	jmp    21434c <File_seekTo+0x13c>
  21434c:	66 8b 85 76 ff ff ff 	mov    ax,WORD PTR [rbp-0x8a]
  214353:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  214357:	66 89 85 74 ff ff ff 	mov    WORD PTR [rbp-0x8c],ax
  21435e:	e8 2d 79 ff ff       	call   20bc90 <__zig_return_error>
  214363:	66 8b 85 74 ff ff ff 	mov    ax,WORD PTR [rbp-0x8c]
  21436a:	48 81 c4 90 00 00 00 	add    rsp,0x90
  214371:	5d                   	pop    rbp
  214372:	c3                   	ret    
                if (err > 0) {
  214373:	eb 00                	jmp    214375 <File_seekTo+0x165>
  214375:	31 c0                	xor    eax,eax
  214377:	66 89 c1             	mov    cx,ax
    pub fn seekTo(self: *File, pos: usize) !void {
  21437a:	66 89 c8             	mov    ax,cx
  21437d:	48 81 c4 90 00 00 00 	add    rsp,0x90
  214384:	5d                   	pop    rbp
  214385:	c3                   	ret    
  214386:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  21438d:	00 00 00 

0000000000214390 <Allocator_alloc.34>:
    pub fn alloc(self: *Allocator, comptime T: type, n: usize) ![]T {
  214390:	55                   	push   rbp
  214391:	48 89 e5             	mov    rbp,rsp
  214394:	48 83 ec 40          	sub    rsp,0x40
  214398:	48 89 f8             	mov    rax,rdi
  21439b:	4c 8d 45 e8          	lea    r8,[rbp-0x18]
  21439f:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  2143a3:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
        return self.alignedAlloc(T, @alignOf(T), n);
  2143a7:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  2143ab:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  2143af:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
  2143b3:	4c 89 c7             	mov    rdi,r8
  2143b6:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  2143ba:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  2143be:	e8 dd 0c 00 00       	call   2150a0 <Allocator_alignedAlloc>
  2143c3:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  2143c8:	74 0b                	je     2143d5 <Allocator_alloc.34+0x45>
  2143ca:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2143ce:	e8 bd 78 ff ff       	call   20bc90 <__zig_return_error>
  2143d3:	eb 02                	jmp    2143d7 <Allocator_alloc.34+0x47>
  2143d5:	eb 00                	jmp    2143d7 <Allocator_alloc.34+0x47>
  2143d7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2143db:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  2143df:	48 89 01             	mov    QWORD PTR [rcx],rax
  2143e2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2143e6:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2143ea:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2143ee:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  2143f2:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  2143f6:	48 83 c4 40          	add    rsp,0x40
  2143fa:	5d                   	pop    rbp
  2143fb:	c3                   	ret    
  2143fc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000214400 <Allocator_free>:
    pub fn free(self: *Allocator, memory: var) void {
  214400:	55                   	push   rbp
  214401:	48 89 e5             	mov    rbp,rsp
  214404:	48 83 ec 60          	sub    rsp,0x60
  214408:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
        const bytes = @sliceToBytes(memory);
  21440c:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  21440f:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  214413:	48 8b 76 08          	mov    rsi,QWORD PTR [rsi+0x8]
  214417:	48 c1 e6 06          	shl    rsi,0x6
  21441b:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21441f:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  214423:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  214427:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21442b:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        if (bytes.len == 0) return;
  21442f:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
  214434:	75 06                	jne    21443c <Allocator_free+0x3c>
  214436:	48 83 c4 60          	add    rsp,0x60
  21443a:	5d                   	pop    rbp
  21443b:	c3                   	ret    
  21443c:	31 c0                	xor    eax,eax
  21443e:	89 c1                	mov    ecx,eax
        const non_const_ptr = @intToPtr([*]u8, @ptrToInt(bytes.ptr));
  214440:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  214444:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
        self.freeFn(self, non_const_ptr[0..bytes.len]);
  214448:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  21444c:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  214450:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  214454:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  214458:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
  21445c:	48 39 f1             	cmp    rcx,rsi
  21445f:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
  214463:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
  214467:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  21446b:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  21446f:	76 10                	jbe    214481 <Allocator_free+0x81>
  214471:	48 8d 3d 60 ef 02 00 	lea    rdi,[rip+0x2ef60]        # 2433d8 <__unnamed_20>
  214478:	31 c0                	xor    eax,eax
  21447a:	89 c6                	mov    esi,eax
  21447c:	e8 7f 71 ff ff       	call   20b600 <panic>
  214481:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
  214485:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  214489:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  21448d:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  214491:	48 83 e9 00          	sub    rcx,0x0
  214495:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  214499:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  21449d:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  2144a1:	ff d1                	call   rcx
    pub fn free(self: *Allocator, memory: var) void {
  2144a3:	48 83 c4 60          	add    rsp,0x60
  2144a7:	5d                   	pop    rbp
  2144a8:	c3                   	ret    
  2144a9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

00000000002144b0 <File_read>:
    pub fn read(self: *File, buffer: []u8) ReadError!usize {
  2144b0:	55                   	push   rbp
  2144b1:	48 89 e5             	mov    rbp,rsp
  2144b4:	48 81 ec c0 00 00 00 	sub    rsp,0xc0
  2144bb:	48 89 f8             	mov    rax,rdi
  2144be:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
            var index: usize = 0;
  2144c2:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
  2144c9:	00 
  2144ca:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  2144ce:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
  2144d2:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
  2144d6:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
            while (index < buffer.len) {
  2144da:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  2144de:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  2144e2:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  2144e6:	0f 83 c3 01 00 00    	jae    2146af <File_read+0x1ff>
                const amt_read = posix.read(self.handle, buffer.ptr + index, buffer.len - index);
  2144ec:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2144f0:	8b 38                	mov    edi,DWORD PTR [rax]
  2144f2:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2144f6:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  2144f9:	48 03 4d c0          	add    rcx,QWORD PTR [rbp-0x40]
  2144fd:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
  214501:	48 2b 55 c0          	sub    rdx,QWORD PTR [rbp-0x40]
  214505:	40 0f 92 c6          	setb   sil
  214509:	89 7d 8c             	mov    DWORD PTR [rbp-0x74],edi
  21450c:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
  214510:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
  214517:	40 88 b5 77 ff ff ff 	mov    BYTE PTR [rbp-0x89],sil
  21451e:	0f 82 b9 01 00 00    	jb     2146dd <File_read+0x22d>
  214524:	e9 c4 01 00 00       	jmp    2146ed <File_read+0x23d>
                    switch (read_err) {
  214529:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  21452d:	48 83 c0 fc          	add    rax,0xfffffffffffffffc
  214531:	48 89 c1             	mov    rcx,rax
  214534:	48 83 e9 12          	sub    rcx,0x12
  214538:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  21453f:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
  214546:	77 17                	ja     21455f <File_read+0xaf>
  214548:	48 8d 05 89 c7 fe ff 	lea    rax,[rip+0xfffffffffffec789]        # 200cd8 <__unnamed_181+0x20>
  21454f:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  214556:	48 63 14 88          	movsxd rdx,DWORD PTR [rax+rcx*4]
  21455a:	48 01 c2             	add    rdx,rax
  21455d:	ff e2                	jmp    rdx
                        else => return os.unexpectedErrorPosix(read_err),
  21455f:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  214563:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  214567:	e8 b4 8b ff ff       	call   20d120 <unexpectedErrorPosix>
  21456c:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  214570:	66 89 85 5e ff ff ff 	mov    WORD PTR [rbp-0xa2],ax
  214577:	e8 14 77 ff ff       	call   20bc90 <__zig_return_error>
  21457c:	66 8b 85 5e ff ff ff 	mov    ax,WORD PTR [rbp-0xa2]
  214583:	66 89 45 f0          	mov    WORD PTR [rbp-0x10],ax
  214587:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  21458b:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  21458f:	48 89 37             	mov    QWORD PTR [rdi],rsi
  214592:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  214596:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  21459a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  21459e:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  2145a5:	5d                   	pop    rbp
  2145a6:	c3                   	ret    
                        posix.EINTR => continue,
  2145a7:	e9 2e ff ff ff       	jmp    2144da <File_read+0x2a>
  2145ac:	48 8d 3d 4d ed 02 00 	lea    rdi,[rip+0x2ed4d]        # 243300 <__unnamed_13>
  2145b3:	31 c0                	xor    eax,eax
  2145b5:	89 c6                	mov    esi,eax
                        posix.EINVAL => unreachable,
  2145b7:	e8 44 70 ff ff       	call   20b600 <panic>
  2145bc:	48 8d 3d 3d ed 02 00 	lea    rdi,[rip+0x2ed3d]        # 243300 <__unnamed_13>
  2145c3:	31 c0                	xor    eax,eax
  2145c5:	89 c6                	mov    esi,eax
                        posix.EFAULT => unreachable,
  2145c7:	e8 34 70 ff ff       	call   20b600 <panic>
                        posix.EBADF => return error.BadFd,
  2145cc:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  2145d0:	e8 bb 76 ff ff       	call   20bc90 <__zig_return_error>
  2145d5:	48 8b 3d 64 c2 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffec264]        # 200840 <__unnamed_68>
  2145dc:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  2145e0:	48 89 38             	mov    QWORD PTR [rax],rdi
  2145e3:	48 8b 3d 5e c2 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffec25e]        # 200848 <__unnamed_68+0x8>
  2145ea:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  2145ee:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  2145f2:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  2145f9:	5d                   	pop    rbp
  2145fa:	c3                   	ret    
                        posix.EIO => return error.Io,
  2145fb:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  2145ff:	e8 8c 76 ff ff       	call   20bc90 <__zig_return_error>
  214604:	48 8b 3d c5 c0 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffec0c5]        # 2006d0 <__unnamed_69>
  21460b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  21460f:	48 89 38             	mov    QWORD PTR [rax],rdi
  214612:	48 8b 3d bf c0 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffec0bf]        # 2006d8 <__unnamed_69+0x8>
  214619:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  21461d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  214621:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  214628:	5d                   	pop    rbp
  214629:	c3                   	ret    
                        posix.EISDIR => return error.IsDir,
  21462a:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  21462e:	e8 5d 76 ff ff       	call   20bc90 <__zig_return_error>
  214633:	48 8b 3d 96 bf fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffebf96]        # 2005d0 <__unnamed_70>
  21463a:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  21463e:	48 89 38             	mov    QWORD PTR [rax],rdi
  214641:	48 8b 3d 90 bf fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffebf90]        # 2005d8 <__unnamed_70+0x8>
  214648:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  21464c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  214650:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  214657:	5d                   	pop    rbp
  214658:	c3                   	ret    
                if (read_err > 0) {
  214659:	eb 00                	jmp    21465b <File_read+0x1ab>
                if (amt_read == 0) return index;
  21465b:	48 83 7d b8 00       	cmp    QWORD PTR [rbp-0x48],0x0
  214660:	75 2e                	jne    214690 <File_read+0x1e0>
  214662:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  214666:	66 c7 45 e0 00 00    	mov    WORD PTR [rbp-0x20],0x0
  21466c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  214670:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  214674:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  214678:	48 89 01             	mov    QWORD PTR [rcx],rax
  21467b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21467f:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  214683:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  214687:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  21468e:	5d                   	pop    rbp
  21468f:	c3                   	ret    
                index += amt_read;
  214690:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  214694:	48 03 45 b8          	add    rax,QWORD PTR [rbp-0x48]
  214698:	0f 92 c1             	setb   cl
  21469b:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
  2146a2:	88 8d 4f ff ff ff    	mov    BYTE PTR [rbp-0xb1],cl
  2146a8:	72 77                	jb     214721 <File_read+0x271>
  2146aa:	e9 82 00 00 00       	jmp    214731 <File_read+0x281>
            return index;
  2146af:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  2146b3:	66 c7 45 d0 00 00    	mov    WORD PTR [rbp-0x30],0x0
  2146b9:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  2146bd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2146c1:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  2146c5:	48 89 01             	mov    QWORD PTR [rcx],rax
  2146c8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2146cc:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2146d0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  2146d4:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  2146db:	5d                   	pop    rbp
  2146dc:	c3                   	ret    
  2146dd:	48 8d 3d e4 ea 02 00 	lea    rdi,[rip+0x2eae4]        # 2431c8 <__unnamed_4>
  2146e4:	31 c0                	xor    eax,eax
  2146e6:	89 c6                	mov    esi,eax
                const amt_read = posix.read(self.handle, buffer.ptr + index, buffer.len - index);
  2146e8:	e8 13 6f ff ff       	call   20b600 <panic>
  2146ed:	8b 7d 8c             	mov    edi,DWORD PTR [rbp-0x74]
  2146f0:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  2146f4:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
  2146fb:	e8 50 00 00 00       	call   214750 <read>
  214700:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                const read_err = posix.getErrno(amt_read);
  214704:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  214708:	e8 73 89 ff ff       	call   20d080 <getErrno>
  21470d:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
                if (read_err > 0) {
  214711:	48 83 7d b0 00       	cmp    QWORD PTR [rbp-0x50],0x0
  214716:	0f 87 0d fe ff ff    	ja     214529 <File_read+0x79>
  21471c:	e9 38 ff ff ff       	jmp    214659 <File_read+0x1a9>
  214721:	48 8d 3d a0 ea 02 00 	lea    rdi,[rip+0x2eaa0]        # 2431c8 <__unnamed_4>
  214728:	31 c0                	xor    eax,eax
  21472a:	89 c6                	mov    esi,eax
                index += amt_read;
  21472c:	e8 cf 6e ff ff       	call   20b600 <panic>
  214731:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  214738:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
            while (index < buffer.len) {
  21473c:	e9 99 fd ff ff       	jmp    2144da <File_read+0x2a>
  214741:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  214748:	0f 1f 84 00 00 00 00 
  21474f:	00 

0000000000214750 <read>:
pub fn read(fd: i32, buf: [*]u8, count: usize) usize {
  214750:	55                   	push   rbp
  214751:	48 89 e5             	mov    rbp,rsp
  214754:	48 83 ec 20          	sub    rsp,0x20
  214758:	31 c0                	xor    eax,eax
  21475a:	89 c1                	mov    ecx,eax
  21475c:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  21475f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  214763:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    return syscall3(SYS_read, @intCast(usize, fd), @ptrToInt(buf), count);
  214767:	48 63 75 fc          	movsxd rsi,DWORD PTR [rbp-0x4]
  21476b:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21476f:	4c 8b 45 e8          	mov    r8,QWORD PTR [rbp-0x18]
  214773:	48 89 cf             	mov    rdi,rcx
  214776:	4c 89 c1             	mov    rcx,r8
  214779:	e8 32 01 00 00       	call   2148b0 <syscall3>
  21477e:	48 83 c4 20          	add    rsp,0x20
  214782:	5d                   	pop    rbp
  214783:	c3                   	ret    
  214784:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21478b:	00 00 00 00 00 

0000000000214790 <FileInStream_readFn>:
    fn readFn(in_stream: *Stream, buffer: []u8) Error!usize {
  214790:	55                   	push   rbp
  214791:	48 89 e5             	mov    rbp,rsp
  214794:	48 83 ec 40          	sub    rsp,0x40
  214798:	48 89 f8             	mov    rax,rdi
  21479b:	4c 8d 45 f0          	lea    r8,[rbp-0x10]
  21479f:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
        const self = @fieldParentPtr(FileInStream, "stream", in_stream);
  2147a3:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  2147a7:	48 83 ea 08          	sub    rdx,0x8
  2147ab:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
        return self.file.read(buffer);
  2147af:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  2147b3:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
  2147b6:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  2147ba:	4c 89 c7             	mov    rdi,r8
  2147bd:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  2147c1:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  2147c5:	e8 e6 fc ff ff       	call   2144b0 <File_read>
  2147ca:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  2147cf:	74 0b                	je     2147dc <FileInStream_readFn+0x4c>
  2147d1:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  2147d5:	e8 b6 74 ff ff       	call   20bc90 <__zig_return_error>
  2147da:	eb 02                	jmp    2147de <FileInStream_readFn+0x4e>
  2147dc:	eb 00                	jmp    2147de <FileInStream_readFn+0x4e>
  2147de:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2147e2:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  2147e6:	48 89 01             	mov    QWORD PTR [rcx],rax
  2147e9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2147ed:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2147f1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2147f5:	48 83 c4 40          	add    rsp,0x40
  2147f9:	5d                   	pop    rbp
  2147fa:	c3                   	ret    
  2147fb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000214800 <InStream(ReadError)_read>:
        pub fn read(self: *Self, buffer: []u8) !usize {
  214800:	55                   	push   rbp
  214801:	48 89 e5             	mov    rbp,rsp
  214804:	48 83 ec 40          	sub    rsp,0x40
  214808:	48 89 f8             	mov    rax,rdi
  21480b:	4c 8d 45 f0          	lea    r8,[rbp-0x10]
  21480f:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
            return self.readFn(self, buffer);
  214813:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  214817:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
  21481a:	4c 8b 4d e8          	mov    r9,QWORD PTR [rbp-0x18]
  21481e:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  214822:	4c 89 c7             	mov    rdi,r8
  214825:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  214829:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  21482d:	4c 89 ca             	mov    rdx,r9
  214830:	4c 8b 45 d0          	mov    r8,QWORD PTR [rbp-0x30]
  214834:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  214838:	41 ff d0             	call   r8
  21483b:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  214840:	74 0b                	je     21484d <InStream(ReadError)_read+0x4d>
  214842:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  214846:	e8 45 74 ff ff       	call   20bc90 <__zig_return_error>
  21484b:	eb 02                	jmp    21484f <InStream(ReadError)_read+0x4f>
  21484d:	eb 00                	jmp    21484f <InStream(ReadError)_read+0x4f>
  21484f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  214853:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  214857:	48 89 01             	mov    QWORD PTR [rcx],rax
  21485a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21485e:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  214862:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  214866:	48 83 c4 40          	add    rsp,0x40
  21486a:	5d                   	pop    rbp
  21486b:	c3                   	ret    
  21486c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000214870 <lseek>:
pub fn lseek(fd: i32, offset: isize, ref_pos: usize) usize {
  214870:	55                   	push   rbp
  214871:	48 89 e5             	mov    rbp,rsp
  214874:	48 83 ec 20          	sub    rsp,0x20
  214878:	b8 08 00 00 00       	mov    eax,0x8
  21487d:	89 c1                	mov    ecx,eax
  21487f:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  214882:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  214886:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    return syscall3(SYS_lseek, @intCast(usize, fd), @bitCast(usize, offset), ref_pos);
  21488a:	48 63 75 fc          	movsxd rsi,DWORD PTR [rbp-0x4]
  21488e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  214892:	4c 8b 45 e8          	mov    r8,QWORD PTR [rbp-0x18]
  214896:	48 89 cf             	mov    rdi,rcx
  214899:	4c 89 c1             	mov    rcx,r8
  21489c:	e8 0f 00 00 00       	call   2148b0 <syscall3>
  2148a1:	48 83 c4 20          	add    rsp,0x20
  2148a5:	5d                   	pop    rbp
  2148a6:	c3                   	ret    
  2148a7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  2148ae:	00 00 

00000000002148b0 <syscall3>:
pub fn syscall3(number: usize, arg1: usize, arg2: usize, arg3: usize) usize {
  2148b0:	55                   	push   rbp
  2148b1:	48 89 e5             	mov    rbp,rsp
  2148b4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  2148b8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  2148bc:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  2148c0:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
        : [number] "{rax}" (number),
  2148c4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
          [arg1] "{rdi}" (arg1),
  2148c8:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
          [arg2] "{rsi}" (arg2),
  2148cc:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
          [arg3] "{rdx}" (arg3)
  2148d0:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
    return asm volatile ("syscall"
  2148d4:	0f 05                	syscall 
  2148d6:	5d                   	pop    rbp
  2148d7:	c3                   	ret    
  2148d8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  2148df:	00 

00000000002148e0 <readInt>:

/// Reads an integer from memory with size equal to bytes.len.
/// T specifies the return type, which must be large enough to store
/// the result.
/// See also ::readIntBE or ::readIntLE.
pub fn readInt(bytes: []const u8, comptime T: type, endian: builtin.Endian) T {
  2148e0:	55                   	push   rbp
  2148e1:	48 89 e5             	mov    rbp,rsp
  2148e4:	48 83 ec 70          	sub    rsp,0x70
  2148e8:	40 88 f0             	mov    al,sil
  2148eb:	24 01                	and    al,0x1
  2148ed:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
    if (T.bit_count == 8) {
        return bytes[0];
    }
    var result: T = 0;
  2148f0:	66 c7 45 fc 00 00    	mov    WORD PTR [rbp-0x4],0x0
    switch (endian) {
  2148f6:	8a 45 ff             	mov    al,BYTE PTR [rbp-0x1]
  2148f9:	84 c0                	test   al,al
  2148fb:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  2148ff:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
  214902:	0f 85 86 00 00 00    	jne    21498e <readInt+0xae>
  214908:	eb 00                	jmp    21490a <readInt+0x2a>
  21490a:	8a 45 d7             	mov    al,BYTE PTR [rbp-0x29]
  21490d:	f6 d0                	not    al
  21490f:	a8 01                	test   al,0x1
  214911:	0f 84 fb 00 00 00    	je     214a12 <readInt+0x132>
  214917:	eb 00                	jmp    214919 <readInt+0x39>
  214919:	48 8d 7d fb          	lea    rdi,[rbp-0x5]
  21491d:	be aa 00 00 00       	mov    esi,0xaa
  214922:	b8 01 00 00 00       	mov    eax,0x1
  214927:	89 c2                	mov    edx,eax
        builtin.Endian.Big => {
            for (bytes) |b| {
  214929:	e8 22 ff 01 00       	call   234850 <memset>
  21492e:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  214935:	00 
  214936:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  21493a:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
  21493e:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  214942:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  214946:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  21494a:	48 39 c8             	cmp    rax,rcx
  21494d:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  214951:	73 36                	jae    214989 <readInt+0xa9>
  214953:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  214957:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  21495a:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  21495e:	40 8a 34 11          	mov    sil,BYTE PTR [rcx+rdx*1]
  214962:	40 88 75 fb          	mov    BYTE PTR [rbp-0x5],sil
                result = (result << 8) | b;
  214966:	66 8b 7d fc          	mov    di,WORD PTR [rbp-0x4]
  21496a:	66 c1 e7 08          	shl    di,0x8
  21496e:	44 0f b6 45 fb       	movzx  r8d,BYTE PTR [rbp-0x5]
  214973:	66 45 89 c1          	mov    r9w,r8w
  214977:	66 44 09 cf          	or     di,r9w
  21497b:	66 89 7d fc          	mov    WORD PTR [rbp-0x4],di
            for (bytes) |b| {
  21497f:	48 83 c2 01          	add    rdx,0x1
  214983:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  214987:	eb b9                	jmp    214942 <readInt+0x62>
    switch (endian) {
  214989:	e9 94 00 00 00       	jmp    214a22 <readInt+0x142>
  21498e:	48 8d 7d ef          	lea    rdi,[rbp-0x11]
  214992:	be aa 00 00 00       	mov    esi,0xaa
  214997:	b8 01 00 00 00       	mov    eax,0x1
  21499c:	89 c2                	mov    edx,eax
            }
        },
        builtin.Endian.Little => {
            const ShiftType = math.Log2Int(T);
            for (bytes) |b, index| {
  21499e:	e8 ad fe 01 00       	call   234850 <memset>
  2149a3:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  2149aa:	00 
  2149ab:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  2149af:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
  2149b3:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
  2149b7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2149bb:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  2149bf:	48 39 c8             	cmp    rax,rcx
  2149c2:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  2149c6:	73 48                	jae    214a10 <readInt+0x130>
  2149c8:	b8 08 00 00 00       	mov    eax,0x8
  2149cd:	89 c1                	mov    ecx,eax
  2149cf:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  2149d3:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
  2149d6:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  2149da:	44 8a 04 3e          	mov    r8b,BYTE PTR [rsi+rdi*1]
  2149de:	44 88 45 ef          	mov    BYTE PTR [rbp-0x11],r8b
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  2149e2:	66 44 8b 4d fc       	mov    r9w,WORD PTR [rbp-0x4]
  2149e7:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
  2149eb:	66 41 89 c2          	mov    r10w,ax
  2149ef:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2149f3:	48 f7 e1             	mul    rcx
  2149f6:	41 0f 90 c0          	seto   r8b
  2149fa:	66 44 89 55 ae       	mov    WORD PTR [rbp-0x52],r10w
  2149ff:	66 44 89 4d ac       	mov    WORD PTR [rbp-0x54],r9w
  214a04:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  214a08:	44 88 45 9f          	mov    BYTE PTR [rbp-0x61],r8b
  214a0c:	70 1e                	jo     214a2c <readInt+0x14c>
  214a0e:	eb 2c                	jmp    214a3c <readInt+0x15c>
    switch (endian) {
  214a10:	eb 10                	jmp    214a22 <readInt+0x142>
  214a12:	48 8d 3d e7 e8 02 00 	lea    rdi,[rip+0x2e8e7]        # 243300 <__unnamed_13>
  214a19:	31 c0                	xor    eax,eax
  214a1b:	89 c6                	mov    esi,eax
  214a1d:	e8 de 6b ff ff       	call   20b600 <panic>
            }
        },
    }
    return result;
  214a22:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  214a26:	48 83 c4 70          	add    rsp,0x70
  214a2a:	5d                   	pop    rbp
  214a2b:	c3                   	ret    
  214a2c:	48 8d 3d 95 e7 02 00 	lea    rdi,[rip+0x2e795]        # 2431c8 <__unnamed_4>
  214a33:	31 c0                	xor    eax,eax
  214a35:	89 c6                	mov    esi,eax
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  214a37:	e8 c4 6b ff ff       	call   20b600 <panic>
  214a3c:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  214a40:	88 c1                	mov    cl,al
  214a42:	89 c2                	mov    edx,eax
  214a44:	83 e2 0f             	and    edx,0xf
  214a47:	89 d6                	mov    esi,edx
  214a49:	48 39 f0             	cmp    rax,rsi
  214a4c:	88 4d 9e             	mov    BYTE PTR [rbp-0x62],cl
  214a4f:	75 31                	jne    214a82 <readInt+0x1a2>
  214a51:	8a 45 9e             	mov    al,BYTE PTR [rbp-0x62]
  214a54:	24 0f                	and    al,0xf
  214a56:	0f b6 c8             	movzx  ecx,al
  214a59:	66 89 ca             	mov    dx,cx
  214a5c:	66 89 d1             	mov    cx,dx
  214a5f:	66 8b 55 ae          	mov    dx,WORD PTR [rbp-0x52]
  214a63:	66 d3 e2             	shl    dx,cl
  214a66:	66 8b 75 ac          	mov    si,WORD PTR [rbp-0x54]
  214a6a:	66 09 d6             	or     si,dx
  214a6d:	66 89 75 fc          	mov    WORD PTR [rbp-0x4],si
            for (bytes) |b, index| {
  214a71:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  214a75:	48 83 c7 01          	add    rdi,0x1
  214a79:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  214a7d:	e9 35 ff ff ff       	jmp    2149b7 <readInt+0xd7>
  214a82:	48 8d 3d ff e9 02 00 	lea    rdi,[rip+0x2e9ff]        # 243488 <__unnamed_22>
  214a89:	31 c0                	xor    eax,eax
  214a8b:	89 c6                	mov    esi,eax
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  214a8d:	e8 6e 6b ff ff       	call   20b600 <panic>
  214a92:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  214a99:	1f 84 00 00 00 00 00 

0000000000214aa0 <readInt.35>:
pub fn readInt(bytes: []const u8, comptime T: type, endian: builtin.Endian) T {
  214aa0:	55                   	push   rbp
  214aa1:	48 89 e5             	mov    rbp,rsp
  214aa4:	48 83 ec 70          	sub    rsp,0x70
  214aa8:	40 88 f0             	mov    al,sil
  214aab:	24 01                	and    al,0x1
  214aad:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
    var result: T = 0;
  214ab0:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
    switch (endian) {
  214ab7:	8a 45 ff             	mov    al,BYTE PTR [rbp-0x1]
  214aba:	84 c0                	test   al,al
  214abc:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
  214ac0:	88 45 cf             	mov    BYTE PTR [rbp-0x31],al
  214ac3:	75 7e                	jne    214b43 <readInt.35+0xa3>
  214ac5:	eb 00                	jmp    214ac7 <readInt.35+0x27>
  214ac7:	8a 45 cf             	mov    al,BYTE PTR [rbp-0x31]
  214aca:	f6 d0                	not    al
  214acc:	a8 01                	test   al,0x1
  214ace:	0f 84 ee 00 00 00    	je     214bc2 <readInt.35+0x122>
  214ad4:	eb 00                	jmp    214ad6 <readInt.35+0x36>
  214ad6:	48 8d 7d f7          	lea    rdi,[rbp-0x9]
  214ada:	be aa 00 00 00       	mov    esi,0xaa
  214adf:	b8 01 00 00 00       	mov    eax,0x1
  214ae4:	89 c2                	mov    edx,eax
            for (bytes) |b| {
  214ae6:	e8 65 fd 01 00       	call   234850 <memset>
  214aeb:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
  214af2:	00 
  214af3:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  214af7:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
  214afb:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
  214aff:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  214b03:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  214b07:	48 39 c8             	cmp    rax,rcx
  214b0a:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  214b0e:	73 2e                	jae    214b3e <readInt.35+0x9e>
  214b10:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  214b14:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  214b17:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  214b1b:	40 8a 34 11          	mov    sil,BYTE PTR [rcx+rdx*1]
  214b1f:	40 88 75 f7          	mov    BYTE PTR [rbp-0x9],sil
                result = (result << 8) | b;
  214b23:	8b 7d f8             	mov    edi,DWORD PTR [rbp-0x8]
  214b26:	c1 e7 08             	shl    edi,0x8
  214b29:	44 0f b6 45 f7       	movzx  r8d,BYTE PTR [rbp-0x9]
  214b2e:	44 09 c7             	or     edi,r8d
  214b31:	89 7d f8             	mov    DWORD PTR [rbp-0x8],edi
            for (bytes) |b| {
  214b34:	48 83 c2 01          	add    rdx,0x1
  214b38:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  214b3c:	eb c1                	jmp    214aff <readInt.35+0x5f>
    switch (endian) {
  214b3e:	e9 8f 00 00 00       	jmp    214bd2 <readInt.35+0x132>
  214b43:	48 8d 7d e7          	lea    rdi,[rbp-0x19]
  214b47:	be aa 00 00 00       	mov    esi,0xaa
  214b4c:	b8 01 00 00 00       	mov    eax,0x1
  214b51:	89 c2                	mov    edx,eax
            for (bytes) |b, index| {
  214b53:	e8 f8 fc 01 00       	call   234850 <memset>
  214b58:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
  214b5f:	00 
  214b60:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  214b64:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
  214b68:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  214b6c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  214b70:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  214b74:	48 39 c8             	cmp    rax,rcx
  214b77:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  214b7b:	73 43                	jae    214bc0 <readInt.35+0x120>
  214b7d:	b8 08 00 00 00       	mov    eax,0x8
  214b82:	89 c1                	mov    ecx,eax
  214b84:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  214b88:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
  214b8b:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  214b8f:	44 8a 04 3e          	mov    r8b,BYTE PTR [rsi+rdi*1]
  214b93:	44 88 45 e7          	mov    BYTE PTR [rbp-0x19],r8b
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  214b97:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  214b9a:	44 0f b6 4d e7       	movzx  r9d,BYTE PTR [rbp-0x19]
  214b9f:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  214ba3:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
  214ba6:	48 89 f0             	mov    rax,rsi
  214ba9:	48 f7 e1             	mul    rcx
  214bac:	41 0f 90 c0          	seto   r8b
  214bb0:	44 89 4d a0          	mov    DWORD PTR [rbp-0x60],r9d
  214bb4:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  214bb8:	44 88 45 97          	mov    BYTE PTR [rbp-0x69],r8b
  214bbc:	70 1d                	jo     214bdb <readInt.35+0x13b>
  214bbe:	eb 2b                	jmp    214beb <readInt.35+0x14b>
    switch (endian) {
  214bc0:	eb 10                	jmp    214bd2 <readInt.35+0x132>
  214bc2:	48 8d 3d 37 e7 02 00 	lea    rdi,[rip+0x2e737]        # 243300 <__unnamed_13>
  214bc9:	31 c0                	xor    eax,eax
  214bcb:	89 c6                	mov    esi,eax
  214bcd:	e8 2e 6a ff ff       	call   20b600 <panic>
    return result;
  214bd2:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  214bd5:	48 83 c4 70          	add    rsp,0x70
  214bd9:	5d                   	pop    rbp
  214bda:	c3                   	ret    
  214bdb:	48 8d 3d e6 e5 02 00 	lea    rdi,[rip+0x2e5e6]        # 2431c8 <__unnamed_4>
  214be2:	31 c0                	xor    eax,eax
  214be4:	89 c6                	mov    esi,eax
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  214be6:	e8 15 6a ff ff       	call   20b600 <panic>
  214beb:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  214bef:	88 c1                	mov    cl,al
  214bf1:	89 c2                	mov    edx,eax
  214bf3:	83 e2 1f             	and    edx,0x1f
  214bf6:	89 d6                	mov    esi,edx
  214bf8:	48 39 f0             	cmp    rax,rsi
  214bfb:	88 4d 96             	mov    BYTE PTR [rbp-0x6a],cl
  214bfe:	75 26                	jne    214c26 <readInt.35+0x186>
  214c00:	8a 45 96             	mov    al,BYTE PTR [rbp-0x6a]
  214c03:	24 1f                	and    al,0x1f
  214c05:	0f b6 c8             	movzx  ecx,al
  214c08:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
  214c0b:	d3 e2                	shl    edx,cl
  214c0d:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
  214c10:	09 d6                	or     esi,edx
  214c12:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
            for (bytes) |b, index| {
  214c15:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  214c19:	48 83 c7 01          	add    rdi,0x1
  214c1d:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  214c21:	e9 46 ff ff ff       	jmp    214b6c <readInt.35+0xcc>
  214c26:	48 8d 3d 5b e8 02 00 	lea    rdi,[rip+0x2e85b]        # 243488 <__unnamed_22>
  214c2d:	31 c0                	xor    eax,eax
  214c2f:	89 c6                	mov    esi,eax
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  214c31:	e8 ca 69 ff ff       	call   20b600 <panic>
  214c36:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  214c3d:	00 00 00 

0000000000214c40 <readInt.36>:
pub fn readInt(bytes: []const u8, comptime T: type, endian: builtin.Endian) T {
  214c40:	55                   	push   rbp
  214c41:	48 89 e5             	mov    rbp,rsp
  214c44:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  214c4b:	40 88 f0             	mov    al,sil
  214c4e:	24 01                	and    al,0x1
  214c50:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
    var result: T = 0;
  214c53:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  214c5a:	00 
    switch (endian) {
  214c5b:	8a 45 ff             	mov    al,BYTE PTR [rbp-0x1]
  214c5e:	84 c0                	test   al,al
  214c60:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  214c64:	88 45 c7             	mov    BYTE PTR [rbp-0x39],al
  214c67:	0f 85 83 00 00 00    	jne    214cf0 <readInt.36+0xb0>
  214c6d:	eb 00                	jmp    214c6f <readInt.36+0x2f>
  214c6f:	8a 45 c7             	mov    al,BYTE PTR [rbp-0x39]
  214c72:	f6 d0                	not    al
  214c74:	a8 01                	test   al,0x1
  214c76:	0f 84 f4 00 00 00    	je     214d70 <readInt.36+0x130>
  214c7c:	eb 00                	jmp    214c7e <readInt.36+0x3e>
  214c7e:	48 8d 7d ef          	lea    rdi,[rbp-0x11]
  214c82:	be aa 00 00 00       	mov    esi,0xaa
  214c87:	b8 01 00 00 00       	mov    eax,0x1
  214c8c:	89 c2                	mov    edx,eax
            for (bytes) |b| {
  214c8e:	e8 bd fb 01 00       	call   234850 <memset>
  214c93:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  214c9a:	00 
  214c9b:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  214c9f:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
  214ca3:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
  214ca7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  214cab:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  214caf:	48 39 c8             	cmp    rax,rcx
  214cb2:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  214cb6:	73 33                	jae    214ceb <readInt.36+0xab>
  214cb8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  214cbc:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  214cbf:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  214cc3:	40 8a 34 11          	mov    sil,BYTE PTR [rcx+rdx*1]
  214cc7:	40 88 75 ef          	mov    BYTE PTR [rbp-0x11],sil
                result = (result << 8) | b;
  214ccb:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  214ccf:	48 c1 e1 08          	shl    rcx,0x8
  214cd3:	0f b6 7d ef          	movzx  edi,BYTE PTR [rbp-0x11]
  214cd7:	41 89 f8             	mov    r8d,edi
  214cda:	4c 09 c1             	or     rcx,r8
  214cdd:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
            for (bytes) |b| {
  214ce1:	48 83 c2 01          	add    rdx,0x1
  214ce5:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  214ce9:	eb bc                	jmp    214ca7 <readInt.36+0x67>
    switch (endian) {
  214ceb:	e9 90 00 00 00       	jmp    214d80 <readInt.36+0x140>
  214cf0:	48 8d 7d df          	lea    rdi,[rbp-0x21]
  214cf4:	be aa 00 00 00       	mov    esi,0xaa
  214cf9:	b8 01 00 00 00       	mov    eax,0x1
  214cfe:	89 c2                	mov    edx,eax
            for (bytes) |b, index| {
  214d00:	e8 4b fb 01 00       	call   234850 <memset>
  214d05:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
  214d0c:	00 
  214d0d:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  214d11:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
  214d15:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  214d19:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  214d1d:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  214d21:	48 39 c8             	cmp    rax,rcx
  214d24:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  214d28:	73 44                	jae    214d6e <readInt.36+0x12e>
  214d2a:	b8 08 00 00 00       	mov    eax,0x8
  214d2f:	89 c1                	mov    ecx,eax
  214d31:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  214d35:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
  214d38:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  214d3c:	44 8a 04 3e          	mov    r8b,BYTE PTR [rsi+rdi*1]
  214d40:	44 88 45 df          	mov    BYTE PTR [rbp-0x21],r8b
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  214d44:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  214d48:	0f b6 45 df          	movzx  eax,BYTE PTR [rbp-0x21]
  214d4c:	41 89 c1             	mov    r9d,eax
  214d4f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  214d53:	48 f7 e1             	mul    rcx
  214d56:	41 0f 90 c0          	seto   r8b
  214d5a:	4c 89 4d 98          	mov    QWORD PTR [rbp-0x68],r9
  214d5e:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
  214d62:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  214d66:	44 88 45 87          	mov    BYTE PTR [rbp-0x79],r8b
  214d6a:	70 21                	jo     214d8d <readInt.36+0x14d>
  214d6c:	eb 2f                	jmp    214d9d <readInt.36+0x15d>
    switch (endian) {
  214d6e:	eb 10                	jmp    214d80 <readInt.36+0x140>
  214d70:	48 8d 3d 89 e5 02 00 	lea    rdi,[rip+0x2e589]        # 243300 <__unnamed_13>
  214d77:	31 c0                	xor    eax,eax
  214d79:	89 c6                	mov    esi,eax
  214d7b:	e8 80 68 ff ff       	call   20b600 <panic>
    return result;
  214d80:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  214d84:	48 81 c4 80 00 00 00 	add    rsp,0x80
  214d8b:	5d                   	pop    rbp
  214d8c:	c3                   	ret    
  214d8d:	48 8d 3d 34 e4 02 00 	lea    rdi,[rip+0x2e434]        # 2431c8 <__unnamed_4>
  214d94:	31 c0                	xor    eax,eax
  214d96:	89 c6                	mov    esi,eax
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  214d98:	e8 63 68 ff ff       	call   20b600 <panic>
  214d9d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  214da1:	88 c1                	mov    cl,al
  214da3:	89 c2                	mov    edx,eax
  214da5:	83 e2 3f             	and    edx,0x3f
  214da8:	89 d6                	mov    esi,edx
  214daa:	48 39 f0             	cmp    rax,rsi
  214dad:	88 4d 86             	mov    BYTE PTR [rbp-0x7a],cl
  214db0:	75 2b                	jne    214ddd <readInt.36+0x19d>
  214db2:	8a 45 86             	mov    al,BYTE PTR [rbp-0x7a]
  214db5:	24 3f                	and    al,0x3f
  214db7:	0f b6 c8             	movzx  ecx,al
  214dba:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  214dbe:	48 d3 e2             	shl    rdx,cl
  214dc1:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  214dc5:	48 09 d6             	or     rsi,rdx
  214dc8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
            for (bytes) |b, index| {
  214dcc:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  214dd0:	48 83 c2 01          	add    rdx,0x1
  214dd4:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  214dd8:	e9 3c ff ff ff       	jmp    214d19 <readInt.36+0xd9>
  214ddd:	48 8d 3d a4 e6 02 00 	lea    rdi,[rip+0x2e6a4]        # 243488 <__unnamed_22>
  214de4:	31 c0                	xor    eax,eax
  214de6:	89 c6                	mov    esi,eax
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  214de8:	e8 13 68 ff ff       	call   20b600 <panic>
  214ded:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000214df0 <posixFStat>:
            else => unreachable,
        }
    }
}

pub fn posixFStat(fd: i32) !posix.Stat {
  214df0:	55                   	push   rbp
  214df1:	48 89 e5             	mov    rbp,rsp
  214df4:	48 81 ec 40 02 00 00 	sub    rsp,0x240
  214dfb:	48 89 f8             	mov    rax,rdi
  214dfe:	48 8d 8d 38 fe ff ff 	lea    rcx,[rbp-0x1c8]
  214e05:	4c 8d 05 4c 3f ff ff 	lea    r8,[rip+0xffffffffffff3f4c]        # 208d58 <__unnamed_71>
  214e0c:	41 b9 90 00 00 00    	mov    r9d,0x90
  214e12:	45 89 ca             	mov    r10d,r9d
  214e15:	89 95 cc fe ff ff    	mov    DWORD PTR [rbp-0x134],edx
    var stat: posix.Stat = undefined;
  214e1b:	49 89 cb             	mov    r11,rcx
  214e1e:	48 89 bd 28 fe ff ff 	mov    QWORD PTR [rbp-0x1d8],rdi
  214e25:	4c 89 df             	mov    rdi,r11
  214e28:	48 89 b5 20 fe ff ff 	mov    QWORD PTR [rbp-0x1e0],rsi
  214e2f:	4c 89 c6             	mov    rsi,r8
  214e32:	4c 89 d2             	mov    rdx,r10
  214e35:	48 89 85 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],rax
  214e3c:	48 89 8d 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rcx
  214e43:	e8 58 fa 01 00       	call   2348a0 <memcpy>
    const err = posix.getErrno(posix.fstat(fd, &stat));
  214e48:	8b bd cc fe ff ff    	mov    edi,DWORD PTR [rbp-0x134]
  214e4e:	48 8b b5 10 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1f0]
  214e55:	e8 86 01 00 00       	call   214fe0 <fstat>
  214e5a:	48 89 c7             	mov    rdi,rax
  214e5d:	e8 1e 82 ff ff       	call   20d080 <getErrno>
  214e62:	48 89 85 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rax
    if (err > 0) {
  214e69:	48 83 bd 30 fe ff ff 	cmp    QWORD PTR [rbp-0x1d0],0x0
  214e70:	00 
  214e71:	0f 86 cf 00 00 00    	jbe    214f46 <posixFStat+0x156>
        return switch (err) {
  214e77:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  214e7e:	48 89 c1             	mov    rcx,rax
  214e81:	48 83 e9 09          	sub    rcx,0x9
  214e85:	48 89 85 08 fe ff ff 	mov    QWORD PTR [rbp-0x1f8],rax
  214e8c:	48 89 8d 00 fe ff ff 	mov    QWORD PTR [rbp-0x200],rcx
  214e93:	74 34                	je     214ec9 <posixFStat+0xd9>
  214e95:	eb 00                	jmp    214e97 <posixFStat+0xa7>
  214e97:	48 8b 85 08 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1f8]
  214e9e:	48 83 e8 0c          	sub    rax,0xc
  214ea2:	48 89 85 f8 fd ff ff 	mov    QWORD PTR [rbp-0x208],rax
  214ea9:	74 2b                	je     214ed6 <posixFStat+0xe6>
  214eab:	eb 00                	jmp    214ead <posixFStat+0xbd>
            posix.EBADF => error.BadFd,
            posix.ENOMEM => error.SystemResources,
            else => os.unexpectedErrorPosix(err),
  214ead:	48 8b b5 30 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1d0]
  214eb4:	48 8b bd 20 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1e0]
  214ebb:	e8 60 82 ff ff       	call   20d120 <unexpectedErrorPosix>
        return switch (err) {
  214ec0:	66 89 85 f6 fd ff ff 	mov    WORD PTR [rbp-0x20a],ax
  214ec7:	eb 1a                	jmp    214ee3 <posixFStat+0xf3>
  214ec9:	66 b8 1e 00          	mov    ax,0x1e
  214ecd:	66 89 85 f6 fd ff ff 	mov    WORD PTR [rbp-0x20a],ax
  214ed4:	eb 0d                	jmp    214ee3 <posixFStat+0xf3>
  214ed6:	66 b8 04 00          	mov    ax,0x4
  214eda:	66 89 85 f6 fd ff ff 	mov    WORD PTR [rbp-0x20a],ax
  214ee1:	eb 00                	jmp    214ee3 <posixFStat+0xf3>
  214ee3:	66 8b 85 f6 fd ff ff 	mov    ax,WORD PTR [rbp-0x20a]
  214eea:	48 8b bd 20 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1e0]
  214ef1:	66 89 85 f4 fd ff ff 	mov    WORD PTR [rbp-0x20c],ax
  214ef8:	e8 93 6d ff ff       	call   20bc90 <__zig_return_error>
  214efd:	b9 98 00 00 00       	mov    ecx,0x98
  214f02:	89 ca                	mov    edx,ecx
  214f04:	48 8d bd 68 ff ff ff 	lea    rdi,[rbp-0x98]
  214f0b:	66 8b 85 f4 fd ff ff 	mov    ax,WORD PTR [rbp-0x20c]
  214f12:	66 89 85 68 ff ff ff 	mov    WORD PTR [rbp-0x98],ax
  214f19:	48 8b b5 28 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1d8]
  214f20:	48 89 bd e8 fd ff ff 	mov    QWORD PTR [rbp-0x218],rdi
  214f27:	48 89 f7             	mov    rdi,rsi
  214f2a:	48 8b b5 e8 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x218]
  214f31:	e8 6a f9 01 00       	call   2348a0 <memcpy>
  214f36:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
  214f3d:	48 81 c4 40 02 00 00 	add    rsp,0x240
  214f44:	5d                   	pop    rbp
  214f45:	c3                   	ret    
    if (err > 0) {
  214f46:	eb 00                	jmp    214f48 <posixFStat+0x158>
  214f48:	b8 98 00 00 00       	mov    eax,0x98
  214f4d:	89 c2                	mov    edx,eax
  214f4f:	48 8d 8d d0 fe ff ff 	lea    rcx,[rbp-0x130]
  214f56:	b8 90 00 00 00       	mov    eax,0x90
  214f5b:	89 c6                	mov    esi,eax
  214f5d:	48 8d bd 38 fe ff ff 	lea    rdi,[rbp-0x1c8]
        };
    }

    return stat;
  214f64:	66 c7 85 d0 fe ff ff 	mov    WORD PTR [rbp-0x130],0x0
  214f6b:	00 00 
  214f6d:	49 89 c8             	mov    r8,rcx
  214f70:	49 83 c0 08          	add    r8,0x8
  214f74:	48 89 bd e0 fd ff ff 	mov    QWORD PTR [rbp-0x220],rdi
  214f7b:	4c 89 c7             	mov    rdi,r8
  214f7e:	4c 8b 85 e0 fd ff ff 	mov    r8,QWORD PTR [rbp-0x220]
  214f85:	48 89 b5 d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rsi
  214f8c:	4c 89 c6             	mov    rsi,r8
  214f8f:	4c 8b 8d d8 fd ff ff 	mov    r9,QWORD PTR [rbp-0x228]
  214f96:	48 89 95 d0 fd ff ff 	mov    QWORD PTR [rbp-0x230],rdx
  214f9d:	4c 89 ca             	mov    rdx,r9
  214fa0:	48 89 8d c8 fd ff ff 	mov    QWORD PTR [rbp-0x238],rcx
  214fa7:	e8 f4 f8 01 00       	call   2348a0 <memcpy>
  214fac:	48 8b 8d c8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x238]
  214fb3:	48 8b 95 28 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d8]
  214fba:	48 89 d7             	mov    rdi,rdx
  214fbd:	48 89 ce             	mov    rsi,rcx
  214fc0:	48 8b 95 d0 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x230]
  214fc7:	e8 d4 f8 01 00       	call   2348a0 <memcpy>
  214fcc:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
  214fd3:	48 81 c4 40 02 00 00 	add    rsp,0x240
  214fda:	5d                   	pop    rbp
  214fdb:	c3                   	ret    
  214fdc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000214fe0 <fstat>:

pub fn accept4(fd: i32, noalias addr: *sockaddr, noalias len: *socklen_t, flags: u32) usize {
    return syscall4(SYS_accept4, @intCast(usize, fd), @ptrToInt(addr), @ptrToInt(len), flags);
}

pub fn fstat(fd: i32, stat_buf: *Stat) usize {
  214fe0:	55                   	push   rbp
  214fe1:	48 89 e5             	mov    rbp,rsp
  214fe4:	48 83 ec 10          	sub    rsp,0x10
  214fe8:	b8 05 00 00 00       	mov    eax,0x5
  214fed:	89 c1                	mov    ecx,eax
  214fef:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  214ff2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    return syscall2(SYS_fstat, @intCast(usize, fd), @ptrToInt(stat_buf));
  214ff6:	48 63 75 fc          	movsxd rsi,DWORD PTR [rbp-0x4]
  214ffa:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  214ffe:	48 89 cf             	mov    rdi,rcx
  215001:	e8 fa 93 ff ff       	call   20e400 <syscall2>
  215006:	48 83 c4 10          	add    rsp,0x10
  21500a:	5d                   	pop    rbp
  21500b:	c3                   	ret    
  21500c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000215010 <cast>:
    if (negateCast(u32(@maxValue(i32) + 10))) |_| unreachable else |err| assert(err == error.Overflow);
}

/// Cast an integer to a different integer type. If the value doesn't fit,
/// return an error.
pub fn cast(comptime T: type, x: var) (error{Overflow}!T) {
  215010:	55                   	push   rbp
  215011:	48 89 e5             	mov    rbp,rsp
  215014:	48 83 ec 30          	sub    rsp,0x30
  215018:	48 89 f8             	mov    rax,rdi
  21501b:	48 b9 ff ff ff ff ff 	movabs rcx,0x7fffffffffffffff
  215022:	ff ff 7f 
  215025:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    comptime assert(@typeId(T) == builtin.TypeId.Int); // must pass an integer
    comptime assert(@typeId(@typeOf(x)) == builtin.TypeId.Int); // must pass an integer
    if (@maxValue(@typeOf(x)) > @maxValue(T) and x > @maxValue(T)) {
  215029:	48 39 4d e8          	cmp    QWORD PTR [rbp-0x18],rcx
  21502d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  215031:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  215035:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  215039:	76 2c                	jbe    215067 <cast+0x57>
        return error.Overflow;
  21503b:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  21503f:	e8 4c 6c ff ff       	call   20bc90 <__zig_return_error>
  215044:	48 8b 3d 85 b7 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffeb785]        # 2007d0 <__unnamed_144>
  21504b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21504f:	48 89 38             	mov    QWORD PTR [rax],rdi
  215052:	48 8b 3d 7f b7 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffeb77f]        # 2007d8 <__unnamed_144+0x8>
  215059:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  21505d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  215061:	48 83 c4 30          	add    rsp,0x30
  215065:	5d                   	pop    rbp
  215066:	c3                   	ret    
    } else if (@minValue(@typeOf(x)) < @minValue(T) and x < @minValue(T)) {
        return error.Overflow;
    } else {
        return @intCast(T, x);
  215067:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21506b:	66 c7 45 f0 00 00    	mov    WORD PTR [rbp-0x10],0x0
  215071:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  215075:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  215079:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  21507d:	48 89 01             	mov    QWORD PTR [rcx],rax
  215080:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  215084:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  215088:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  21508c:	48 83 c4 30          	add    rsp,0x30
  215090:	5d                   	pop    rbp
  215091:	c3                   	ret    
  215092:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  215099:	1f 84 00 00 00 00 00 

00000000002150a0 <Allocator_alignedAlloc>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  2150a0:	55                   	push   rbp
  2150a1:	48 89 e5             	mov    rbp,rsp
  2150a4:	48 81 ec 20 01 00 00 	sub    rsp,0x120
  2150ab:	48 89 f8             	mov    rax,rdi
  2150ae:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  2150b5:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  2150bc:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  2150c3:	00 
  2150c4:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  2150cb:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  2150d2:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  2150d9:	75 37                	jne    215112 <Allocator_alignedAlloc+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  2150db:	48 8b 05 06 3d ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff3d06]        # 208de8 <__unnamed_73>
  2150e2:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  2150e9:	48 89 01             	mov    QWORD PTR [rcx],rax
  2150ec:	48 8b 05 fd 3c ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff3cfd]        # 208df0 <__unnamed_73+0x8>
  2150f3:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2150f7:	48 8b 05 fa 3c ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff3cfa]        # 208df8 <__unnamed_73+0x10>
  2150fe:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  215102:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  215109:	48 81 c4 20 01 00 00 	add    rsp,0x120
  215110:	5d                   	pop    rbp
  215111:	c3                   	ret    
        if (n == 0) {
  215112:	eb 00                	jmp    215114 <Allocator_alignedAlloc+0x74>
  215114:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  215118:	b8 40 00 00 00       	mov    eax,0x40
  21511d:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  21511f:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  215126:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21512d:	e8 7e 02 00 00       	call   2153b0 <mul>
  215132:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  215137:	74 43                	je     21517c <Allocator_alignedAlloc+0xdc>
  215139:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  215140:	e8 4b 6b ff ff       	call   20bc90 <__zig_return_error>
  215145:	48 8b 3d b4 3c ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff3cb4]        # 208e00 <__unnamed_74>
  21514c:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  215153:	48 89 38             	mov    QWORD PTR [rax],rdi
  215156:	48 8b 3d ab 3c ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff3cab]        # 208e08 <__unnamed_74+0x8>
  21515d:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  215161:	48 8b 3d a8 3c ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff3ca8]        # 208e10 <__unnamed_74+0x10>
  215168:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  21516c:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  215173:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21517a:	5d                   	pop    rbp
  21517b:	c3                   	ret    
  21517c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  215180:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  215187:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  21518b:	41 b8 04 00 00 00    	mov    r8d,0x4
  215191:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  215198:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  21519f:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  2151a6:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  2151a9:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  2151b0:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  2151b7:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  2151be:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  2151c5:	4c 89 ce             	mov    rsi,r9
  2151c8:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  2151cf:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  2151d6:	4c 89 d1             	mov    rcx,r10
  2151d9:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  2151e0:	41 ff d3             	call   r11
  2151e3:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  2151e8:	74 50                	je     21523a <Allocator_alignedAlloc+0x19a>
  2151ea:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  2151ee:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  2151f5:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  2151fc:	e8 8f 6a ff ff       	call   20bc90 <__zig_return_error>
  215201:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  215208:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  21520c:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  215210:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  215217:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21521a:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  21521e:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  215222:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  215226:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  21522a:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  215231:	48 81 c4 20 01 00 00 	add    rsp,0x120
  215238:	5d                   	pop    rbp
  215239:	c3                   	ret    
  21523a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  21523e:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  215245:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  215249:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  215250:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  215257:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  21525e:	0f 94 c1             	sete   cl
  215261:	0f b6 f9             	movzx  edi,cl
  215264:	e8 97 5d ff ff       	call   20b000 <assert>
  215269:	be aa 00 00 00       	mov    esi,0xaa
  21526e:	bf 08 00 00 00       	mov    edi,0x8
  215273:	89 fa                	mov    edx,edi
  215275:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  21527c:	48 89 c7             	mov    rdi,rax
  21527f:	e8 cc f5 01 00       	call   234850 <memset>
  215284:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  21528b:	00 00 00 00 
  21528f:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  215296:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  21529d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  2152a4:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  2152ab:	48 39 c8             	cmp    rax,rcx
  2152ae:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  2152b5:	73 32                	jae    2152e9 <Allocator_alignedAlloc+0x249>
  2152b7:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  2152be:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  2152c5:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  2152cc:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  2152d3:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  2152d5:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  2152dc:	48 83 c1 01          	add    rcx,0x1
  2152e0:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  2152e7:	eb b4                	jmp    21529d <Allocator_alignedAlloc+0x1fd>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  2152e9:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  2152f0:	48 83 e0 03          	and    rax,0x3
  2152f4:	48 83 f8 00          	cmp    rax,0x0
  2152f8:	75 28                	jne    215322 <Allocator_alignedAlloc+0x282>
  2152fa:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  215301:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  215305:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  21530c:	48 89 c1             	mov    rcx,rax
  21530f:	48 83 e1 3f          	and    rcx,0x3f
  215313:	48 83 f9 00          	cmp    rcx,0x0
  215317:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  21531e:	74 12                	je     215332 <Allocator_alignedAlloc+0x292>
  215320:	eb 6f                	jmp    215391 <Allocator_alignedAlloc+0x2f1>
  215322:	48 8d 3d 87 e2 02 00 	lea    rdi,[rip+0x2e287]        # 2435b0 <__unnamed_75>
  215329:	31 c0                	xor    eax,eax
  21532b:	89 c6                	mov    esi,eax
  21532d:	e8 ce 62 ff ff       	call   20b600 <panic>
  215332:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  215339:	48 c1 e8 06          	shr    rax,0x6
  21533d:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  215341:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  215348:	00 00 
  21534a:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  21534e:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  215355:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  215359:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  21535d:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  215364:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21536b:	48 89 01             	mov    QWORD PTR [rcx],rax
  21536e:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  215375:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  215379:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  21537d:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  215381:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  215388:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21538f:	5d                   	pop    rbp
  215390:	c3                   	ret    
  215391:	48 8d 3d 30 e2 02 00 	lea    rdi,[rip+0x2e230]        # 2435c8 <__unnamed_76>
  215398:	31 c0                	xor    eax,eax
  21539a:	89 c6                	mov    esi,eax
  21539c:	e8 5f 62 ff ff       	call   20b600 <panic>
  2153a1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2153a8:	0f 1f 84 00 00 00 00 
  2153af:	00 

00000000002153b0 <mul>:
pub fn mul(comptime T: type, a: T, b: T) (error{Overflow}!T) {
  2153b0:	55                   	push   rbp
  2153b1:	48 89 e5             	mov    rbp,rsp
  2153b4:	53                   	push   rbx
  2153b5:	48 83 ec 58          	sub    rsp,0x58
  2153b9:	48 89 f8             	mov    rax,rdi
  2153bc:	41 b8 aa 00 00 00    	mov    r8d,0xaa
  2153c2:	41 b9 08 00 00 00    	mov    r9d,0x8
  2153c8:	45 89 ca             	mov    r10d,r9d
  2153cb:	4c 8d 5d d0          	lea    r11,[rbp-0x30]
  2153cf:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  2153d3:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
    var answer: T = undefined;
  2153d7:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  2153db:	4c 89 df             	mov    rdi,r11
  2153de:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
  2153e2:	44 89 c6             	mov    esi,r8d
  2153e5:	4c 89 d2             	mov    rdx,r10
  2153e8:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  2153ec:	e8 5f f4 01 00       	call   234850 <memset>
    return if (@mulWithOverflow(T, a, b, &answer)) error.Overflow else answer;
  2153f1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2153f5:	48 f7 65 d8          	mul    QWORD PTR [rbp-0x28]
  2153f9:	0f 90 c3             	seto   bl
  2153fc:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  215400:	f6 c3 01             	test   bl,0x1
  215403:	75 02                	jne    215407 <mul+0x57>
  215405:	eb 0d                	jmp    215414 <mul+0x64>
  215407:	48 8d 05 c2 b3 fe ff 	lea    rax,[rip+0xfffffffffffeb3c2]        # 2007d0 <__unnamed_144>
  21540e:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  215412:	eb 16                	jmp    21542a <mul+0x7a>
  215414:	48 8d 45 e8          	lea    rax,[rbp-0x18]
  215418:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  21541c:	66 c7 45 e8 00 00    	mov    WORD PTR [rbp-0x18],0x0
  215422:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  215426:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  21542a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  21542e:	66 83 38 00          	cmp    WORD PTR [rax],0x0
  215432:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  215436:	74 0b                	je     215443 <mul+0x93>
  215438:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21543c:	e8 4f 68 ff ff       	call   20bc90 <__zig_return_error>
  215441:	eb 02                	jmp    215445 <mul+0x95>
  215443:	eb 00                	jmp    215445 <mul+0x95>
  215445:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  215449:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  21544c:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  215450:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  215453:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  215457:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  21545b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21545f:	48 83 c4 58          	add    rsp,0x58
  215463:	5b                   	pop    rbx
  215464:	5d                   	pop    rbp
  215465:	c3                   	ret    
  215466:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  21546d:	00 00 00 

0000000000215470 <close>:
pub fn close(handle: FileHandle) void {
  215470:	55                   	push   rbp
  215471:	48 89 e5             	mov    rbp,rsp
  215474:	48 83 ec 40          	sub    rsp,0x40
  215478:	89 7d f4             	mov    DWORD PTR [rbp-0xc],edi
            const err = posix.getErrno(posix.close(handle));
  21547b:	8b 7d f4             	mov    edi,DWORD PTR [rbp-0xc]
  21547e:	e8 cd 24 01 00       	call   227950 <close.98>
  215483:	48 89 c7             	mov    rdi,rax
  215486:	e8 f5 7b ff ff       	call   20d080 <getErrno>
  21548b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
            switch (err) {
  21548f:	48 83 7d e8 04       	cmp    QWORD PTR [rbp-0x18],0x4
  215494:	0f 84 a9 00 00 00    	je     215543 <close+0xd3>
  21549a:	48 8d 3d af eb 02 00 	lea    rdi,[rip+0x2ebaf]        # 244050 <emfile_promise_queue>
                    if (emfile_promise_queue.popFirst()) |p| resume p.data;
  2154a1:	e8 da 24 01 00       	call   227980 <BaseLinkedList(promise,void,(struct []const u8 constant))_popFirst>
  2154a6:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  2154aa:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
  2154af:	0f 84 88 00 00 00    	je     21553d <close+0xcd>
  2154b5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2154b9:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  2154bd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2154c1:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  2154c5:	48 89 c1             	mov    rcx,rax
  2154c8:	48 83 c1 10          	add    rcx,0x10
  2154cc:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  2154d0:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  2154d4:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  2154d8:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
  2154dc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2154e0:	48 89 c1             	mov    rcx,rax
  2154e3:	48 83 e1 fd          	and    rcx,0xfffffffffffffffd
  2154e7:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  2154eb:	f0 48 0f b1 0a       	lock cmpxchg QWORD PTR [rdx],rcx
  2154f0:	40 0f 94 c6          	sete   sil
  2154f4:	40 f6 c6 01          	test   sil,0x1
  2154f8:	48 89 c1             	mov    rcx,rax
  2154fb:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  2154ff:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  215503:	75 02                	jne    215507 <close+0x97>
  215505:	eb d5                	jmp    2154dc <close+0x6c>
  215507:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  21550b:	48 83 e0 01          	and    rax,0x1
  21550f:	48 83 f8 00          	cmp    rax,0x0
  215513:	75 28                	jne    21553d <close+0xcd>
  215515:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  215519:	48 83 e0 02          	and    rax,0x2
  21551d:	48 83 f8 00          	cmp    rax,0x0
  215521:	75 10                	jne    215533 <close+0xc3>
  215523:	48 8d 3d d6 dd 02 00 	lea    rdi,[rip+0x2ddd6]        # 243300 <__unnamed_13>
  21552a:	31 c0                	xor    eax,eax
  21552c:	89 c6                	mov    esi,eax
  21552e:	e8 cd 60 ff ff       	call   20b600 <panic>
  215533:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  215537:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21553b:	ff 10                	call   QWORD PTR [rax]
                    return;
  21553d:	48 83 c4 40          	add    rsp,0x40
  215541:	5d                   	pop    rbp
  215542:	c3                   	ret    
                posix.EINTR => continue,
  215543:	e9 33 ff ff ff       	jmp    21547b <close+0xb>
  215548:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  21554f:	00 

0000000000215550 <readInitialLength>:
fn readInitialLength(comptime E: type, in_stream: *io.InStream(E), is_64: *bool) !u64 {
  215550:	55                   	push   rbp
  215551:	48 89 e5             	mov    rbp,rsp
  215554:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  21555b:	48 89 f8             	mov    rax,rdi
  21555e:	4c 8d 45 f8          	lea    r8,[rbp-0x8]
  215562:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  215566:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
    const first_32_bits = try in_stream.readIntLe(u32);
  21556a:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  21556e:	48 89 7d a0          	mov    QWORD PTR [rbp-0x60],rdi
  215572:	4c 89 c7             	mov    rdi,r8
  215575:	48 89 75 98          	mov    QWORD PTR [rbp-0x68],rsi
  215579:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  21557d:	e8 9e 10 00 00       	call   216620 <InStream(ReadError)_readIntLe>
  215582:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  215587:	74 39                	je     2155c2 <readInitialLength+0x72>
  215589:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  21558d:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  215591:	66 89 45 8e          	mov    WORD PTR [rbp-0x72],ax
  215595:	e8 f6 66 ff ff       	call   20bc90 <__zig_return_error>
  21559a:	66 8b 45 8e          	mov    ax,WORD PTR [rbp-0x72]
  21559e:	66 89 45 e0          	mov    WORD PTR [rbp-0x20],ax
  2155a2:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2155a6:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  2155aa:	48 89 39             	mov    QWORD PTR [rcx],rdi
  2155ad:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  2155b1:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  2155b5:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  2155b9:	48 81 c4 80 00 00 00 	add    rsp,0x80
  2155c0:	5d                   	pop    rbp
  2155c1:	c3                   	ret    
  2155c2:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  2155c5:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
    is_64.* = (first_32_bits == 0xffffffff);
  2155c8:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  2155cc:	83 7d ac ff          	cmp    DWORD PTR [rbp-0x54],0xffffffff
  2155d0:	0f 94 c2             	sete   dl
  2155d3:	80 e2 01             	and    dl,0x1
  2155d6:	88 11                	mov    BYTE PTR [rcx],dl
    if (is_64.*) {
  2155d8:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  2155dc:	f6 01 01             	test   BYTE PTR [rcx],0x1
  2155df:	75 02                	jne    2155e3 <readInitialLength+0x93>
  2155e1:	eb 45                	jmp    215628 <readInitialLength+0xd8>
  2155e3:	48 8d 7d d0          	lea    rdi,[rbp-0x30]
        return in_stream.readIntLe(u64);
  2155e7:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  2155eb:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  2155ef:	e8 8c 10 00 00       	call   216680 <InStream(ReadError)_readIntLe.38>
  2155f4:	66 83 7d d0 00       	cmp    WORD PTR [rbp-0x30],0x0
  2155f9:	74 0b                	je     215606 <readInitialLength+0xb6>
  2155fb:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  2155ff:	e8 8c 66 ff ff       	call   20bc90 <__zig_return_error>
  215604:	eb 02                	jmp    215608 <readInitialLength+0xb8>
  215606:	eb 00                	jmp    215608 <readInitialLength+0xb8>
  215608:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  21560c:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  215610:	48 89 01             	mov    QWORD PTR [rcx],rax
  215613:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  215617:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21561b:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  21561f:	48 81 c4 80 00 00 00 	add    rsp,0x80
  215626:	5d                   	pop    rbp
  215627:	c3                   	ret    
        if (first_32_bits >= 0xfffffff0) return error.InvalidDebugInfo;
  215628:	83 7d ac f0          	cmp    DWORD PTR [rbp-0x54],0xfffffff0
  21562c:	72 2f                	jb     21565d <readInitialLength+0x10d>
  21562e:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  215632:	e8 59 66 ff ff       	call   20bc90 <__zig_return_error>
  215637:	48 8b 3d 12 ac fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffeac12]        # 200250 <__unnamed_131>
  21563e:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  215642:	48 89 38             	mov    QWORD PTR [rax],rdi
  215645:	48 8b 3d 0c ac fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffeac0c]        # 200258 <__unnamed_131+0x8>
  21564c:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  215650:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  215654:	48 81 c4 80 00 00 00 	add    rsp,0x80
  21565b:	5d                   	pop    rbp
  21565c:	c3                   	ret    
  21565d:	eb 00                	jmp    21565f <readInitialLength+0x10f>
        return u64(first_32_bits);
  21565f:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
  215662:	89 c1                	mov    ecx,eax
  215664:	66 c7 45 c0 00 00    	mov    WORD PTR [rbp-0x40],0x0
  21566a:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  21566e:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  215672:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  215676:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  215679:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  21567d:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  215681:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  215685:	48 81 c4 80 00 00 00 	add    rsp,0x80
  21568c:	5d                   	pop    rbp
  21568d:	c3                   	ret    
  21568e:	66 90                	xchg   ax,ax

0000000000215690 <File_getPos>:
    pub fn getPos(self: *File) !usize {
  215690:	55                   	push   rbp
  215691:	48 89 e5             	mov    rbp,rsp
  215694:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  21569b:	48 89 f8             	mov    rax,rdi
  21569e:	31 c9                	xor    ecx,ecx
  2156a0:	41 89 c8             	mov    r8d,ecx
  2156a3:	b9 01 00 00 00       	mov    ecx,0x1
  2156a8:	41 89 c9             	mov    r9d,ecx
  2156ab:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
                const result = posix.lseek(self.handle, 0, posix.SEEK_CUR);
  2156af:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  2156b3:	8b 0a                	mov    ecx,DWORD PTR [rdx]
  2156b5:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
  2156b9:	89 cf                	mov    edi,ecx
  2156bb:	48 89 75 b8          	mov    QWORD PTR [rbp-0x48],rsi
  2156bf:	4c 89 c6             	mov    rsi,r8
  2156c2:	4c 89 ca             	mov    rdx,r9
  2156c5:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  2156c9:	e8 a2 f1 ff ff       	call   214870 <lseek>
  2156ce:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
                const err = posix.getErrno(result);
  2156d2:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  2156d6:	e8 a5 79 ff ff       	call   20d080 <getErrno>
  2156db:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
                if (err > 0) {
  2156df:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
  2156e4:	0f 86 f4 00 00 00    	jbe    2157de <File_getPos+0x14e>
                    return switch (err) {
  2156ea:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2156ee:	48 89 c1             	mov    rcx,rax
  2156f1:	48 83 e9 06          	sub    rcx,0x6
  2156f5:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  2156f9:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
  2156fd:	0f 84 8c 00 00 00    	je     21578f <File_getPos+0xff>
  215703:	eb 00                	jmp    215705 <File_getPos+0x75>
  215705:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  215709:	48 83 e8 09          	sub    rax,0x9
  21570d:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  215711:	74 48                	je     21575b <File_getPos+0xcb>
  215713:	eb 00                	jmp    215715 <File_getPos+0x85>
  215715:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  215719:	48 83 e8 16          	sub    rax,0x16
  21571d:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  215721:	74 45                	je     215768 <File_getPos+0xd8>
  215723:	eb 00                	jmp    215725 <File_getPos+0x95>
  215725:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  215729:	48 83 e8 1d          	sub    rax,0x1d
  21572d:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  215731:	74 4f                	je     215782 <File_getPos+0xf2>
  215733:	eb 00                	jmp    215735 <File_getPos+0xa5>
  215735:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  215739:	48 83 e8 4b          	sub    rax,0x4b
  21573d:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  215741:	74 32                	je     215775 <File_getPos+0xe5>
  215743:	eb 00                	jmp    215745 <File_getPos+0xb5>
                        else => os.unexpectedErrorPosix(err),
  215745:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  215749:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  21574d:	e8 ce 79 ff ff       	call   20d120 <unexpectedErrorPosix>
                    return switch (err) {
  215752:	66 89 85 7e ff ff ff 	mov    WORD PTR [rbp-0x82],ax
  215759:	eb 41                	jmp    21579c <File_getPos+0x10c>
  21575b:	66 b8 1e 00          	mov    ax,0x1e
  21575f:	66 89 85 7e ff ff ff 	mov    WORD PTR [rbp-0x82],ax
  215766:	eb 34                	jmp    21579c <File_getPos+0x10c>
  215768:	66 b8 22 00          	mov    ax,0x22
  21576c:	66 89 85 7e ff ff ff 	mov    WORD PTR [rbp-0x82],ax
  215773:	eb 27                	jmp    21579c <File_getPos+0x10c>
  215775:	66 b8 22 00          	mov    ax,0x22
  215779:	66 89 85 7e ff ff ff 	mov    WORD PTR [rbp-0x82],ax
  215780:	eb 1a                	jmp    21579c <File_getPos+0x10c>
  215782:	66 b8 22 00          	mov    ax,0x22
  215786:	66 89 85 7e ff ff ff 	mov    WORD PTR [rbp-0x82],ax
  21578d:	eb 0d                	jmp    21579c <File_getPos+0x10c>
  21578f:	66 b8 22 00          	mov    ax,0x22
  215793:	66 89 85 7e ff ff ff 	mov    WORD PTR [rbp-0x82],ax
  21579a:	eb 00                	jmp    21579c <File_getPos+0x10c>
  21579c:	66 8b 85 7e ff ff ff 	mov    ax,WORD PTR [rbp-0x82]
  2157a3:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  2157a7:	66 89 85 7c ff ff ff 	mov    WORD PTR [rbp-0x84],ax
  2157ae:	e8 dd 64 ff ff       	call   20bc90 <__zig_return_error>
  2157b3:	66 8b 85 7c ff ff ff 	mov    ax,WORD PTR [rbp-0x84]
  2157ba:	66 89 45 f0          	mov    WORD PTR [rbp-0x10],ax
  2157be:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  2157c2:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  2157c6:	48 89 39             	mov    QWORD PTR [rcx],rdi
  2157c9:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  2157cd:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  2157d1:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  2157d5:	48 81 c4 90 00 00 00 	add    rsp,0x90
  2157dc:	5d                   	pop    rbp
  2157dd:	c3                   	ret    
                if (err > 0) {
  2157de:	eb 00                	jmp    2157e0 <File_getPos+0x150>
                return result;
  2157e0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2157e4:	66 c7 45 e0 00 00    	mov    WORD PTR [rbp-0x20],0x0
  2157ea:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  2157ee:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2157f2:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  2157f6:	48 89 01             	mov    QWORD PTR [rcx],rax
  2157f9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2157fd:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  215801:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  215805:	48 81 c4 90 00 00 00 	add    rsp,0x90
  21580c:	5d                   	pop    rbp
  21580d:	c3                   	ret    
  21580e:	66 90                	xchg   ax,ax

0000000000215810 <getAbbrevTable>:
fn getAbbrevTable(st: *ElfStackTrace, abbrev_offset: u64) !*const AbbrevTable {
  215810:	55                   	push   rbp
  215811:	48 89 e5             	mov    rbp,rsp
  215814:	48 81 ec 90 01 00 00 	sub    rsp,0x190
  21581b:	48 89 f8             	mov    rax,rdi
  21581e:	4c 8d 45 f0          	lea    r8,[rbp-0x10]
  215822:	48 89 95 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rdx
  215829:	48 89 8d f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rcx
    for (st.abbrev_table_list.toSlice()) |*header| {
  215830:	48 8b 8d 00 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x100]
  215837:	48 81 c1 88 00 00 00 	add    rcx,0x88
  21583e:	48 89 bd e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rdi
  215845:	4c 89 c7             	mov    rdi,r8
  215848:	48 89 b5 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rsi
  21584f:	48 89 ce             	mov    rsi,rcx
  215852:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  215859:	e8 92 0e 00 00       	call   2166f0 <AlignedArrayList(AbbrevTableHeader,8)_toSlice>
  21585e:	be aa 00 00 00       	mov    esi,0xaa
  215863:	41 b9 08 00 00 00    	mov    r9d,0x8
  215869:	44 89 ca             	mov    edx,r9d
  21586c:	48 8d 85 f0 fe ff ff 	lea    rax,[rbp-0x110]
  215873:	48 89 c7             	mov    rdi,rax
  215876:	e8 d5 ef 01 00       	call   234850 <memset>
  21587b:	48 c7 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],0x0
  215882:	00 00 00 00 
  215886:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21588a:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
  215891:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  215898:	48 8b 8d c8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x138]
  21589f:	48 39 c8             	cmp    rax,rcx
  2158a2:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
  2158a9:	73 7b                	jae    215926 <getAbbrevTable+0x116>
  2158ab:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  2158b2:	48 6b c8 28          	imul   rcx,rax,0x28
  2158b6:	48 03 4d f0          	add    rcx,QWORD PTR [rbp-0x10]
  2158ba:	48 89 8d f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rcx
        if (header.offset == abbrev_offset) {
  2158c1:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  2158c8:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  2158cb:	48 3b 8d f8 fe ff ff 	cmp    rcx,QWORD PTR [rbp-0x108]
  2158d2:	75 3b                	jne    21590f <getAbbrevTable+0xff>
            return &header.table;
  2158d4:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  2158db:	48 83 c0 08          	add    rax,0x8
  2158df:	66 c7 45 d0 00 00    	mov    WORD PTR [rbp-0x30],0x0
  2158e5:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  2158e9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2158ed:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  2158f4:	48 89 01             	mov    QWORD PTR [rcx],rax
  2158f7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2158fb:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2158ff:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  215906:	48 81 c4 90 01 00 00 	add    rsp,0x190
  21590d:	5d                   	pop    rbp
  21590e:	c3                   	ret    
    for (st.abbrev_table_list.toSlice()) |*header| {
  21590f:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  215916:	48 83 c0 01          	add    rax,0x1
  21591a:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  215921:	e9 6b ff ff ff       	jmp    215891 <getAbbrevTable+0x81>
    try st.self_exe_file.seekTo(st.debug_abbrev.offset + abbrev_offset);
  215926:	48 8b b5 00 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x100]
  21592d:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  215934:	48 8b 40 68          	mov    rax,QWORD PTR [rax+0x68]
  215938:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  21593c:	48 03 85 f8 fe ff ff 	add    rax,QWORD PTR [rbp-0x108]
  215943:	0f 92 c1             	setb   cl
  215946:	48 89 b5 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rsi
  21594d:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  215954:	88 8d af fe ff ff    	mov    BYTE PTR [rbp-0x151],cl
  21595a:	0f 82 d1 01 00 00    	jb     215b31 <getAbbrevTable+0x321>
  215960:	e9 dc 01 00 00       	jmp    215b41 <getAbbrevTable+0x331>
  215965:	66 8b 45 ce          	mov    ax,WORD PTR [rbp-0x32]
  215969:	48 8b bd d8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x128]
  215970:	66 89 85 ac fe ff ff 	mov    WORD PTR [rbp-0x154],ax
  215977:	e8 14 63 ff ff       	call   20bc90 <__zig_return_error>
  21597c:	66 8b 85 ac fe ff ff 	mov    ax,WORD PTR [rbp-0x154]
  215983:	66 89 45 b8          	mov    WORD PTR [rbp-0x48],ax
  215987:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  21598b:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  215992:	48 89 39             	mov    QWORD PTR [rcx],rdi
  215995:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  215999:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21599d:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  2159a4:	48 81 c4 90 01 00 00 	add    rsp,0x190
  2159ab:	5d                   	pop    rbp
  2159ac:	c3                   	ret    
  2159ad:	48 8d 7d 90          	lea    rdi,[rbp-0x70]
    try st.abbrev_table_list.append(AbbrevTableHeader{
  2159b1:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  2159b8:	48 05 88 00 00 00    	add    rax,0x88
        .offset = abbrev_offset,
  2159be:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
        .table = try parseAbbrevTable(st),
  2159c5:	48 8b 95 00 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x100]
  2159cc:	48 8b b5 d8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x128]
  2159d3:	48 89 8d a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rcx
  2159da:	48 89 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rax
  2159e1:	e8 aa 0d 00 00       	call   216790 <parseAbbrevTable>
  2159e6:	66 83 7d 90 00       	cmp    WORD PTR [rbp-0x70],0x0
  2159eb:	74 51                	je     215a3e <getAbbrevTable+0x22e>
  2159ed:	66 8b 45 90          	mov    ax,WORD PTR [rbp-0x70]
  2159f1:	48 8b bd d8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x128]
  2159f8:	66 89 85 96 fe ff ff 	mov    WORD PTR [rbp-0x16a],ax
  2159ff:	e8 8c 62 ff ff       	call   20bc90 <__zig_return_error>
  215a04:	66 8b 85 96 fe ff ff 	mov    ax,WORD PTR [rbp-0x16a]
  215a0b:	66 89 85 58 ff ff ff 	mov    WORD PTR [rbp-0xa8],ax
  215a12:	48 8b bd 58 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  215a19:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  215a20:	48 89 39             	mov    QWORD PTR [rcx],rdi
  215a23:	48 8b bd 60 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  215a2a:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  215a2e:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  215a35:	48 81 c4 90 01 00 00 	add    rsp,0x190
  215a3c:	5d                   	pop    rbp
  215a3d:	c3                   	ret    
  215a3e:	48 8d 95 30 ff ff ff 	lea    rdx,[rbp-0xd0]
    try st.abbrev_table_list.append(AbbrevTableHeader{
  215a45:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
  215a4c:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  215a53:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  215a57:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  215a5e:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  215a62:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
  215a69:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  215a6d:	48 89 8d 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rcx
  215a74:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  215a78:	48 89 8d 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rcx
  215a7f:	48 8b bd d8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x128]
  215a86:	48 8b b5 98 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x168]
  215a8d:	e8 ae 13 00 00       	call   216e40 <AlignedArrayList(AbbrevTableHeader,8)_append>
  215a92:	66 89 85 2e ff ff ff 	mov    WORD PTR [rbp-0xd2],ax
  215a99:	66 83 bd 2e ff ff ff 	cmp    WORD PTR [rbp-0xd2],0x0
  215aa0:	00 
  215aa1:	74 54                	je     215af7 <getAbbrevTable+0x2e7>
  215aa3:	66 8b 85 2e ff ff ff 	mov    ax,WORD PTR [rbp-0xd2]
  215aaa:	48 8b bd d8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x128]
  215ab1:	66 89 85 94 fe ff ff 	mov    WORD PTR [rbp-0x16c],ax
  215ab8:	e8 d3 61 ff ff       	call   20bc90 <__zig_return_error>
  215abd:	66 8b 85 94 fe ff ff 	mov    ax,WORD PTR [rbp-0x16c]
  215ac4:	66 89 85 18 ff ff ff 	mov    WORD PTR [rbp-0xe8],ax
  215acb:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
  215ad2:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  215ad9:	48 89 39             	mov    QWORD PTR [rcx],rdi
  215adc:	48 8b bd 20 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe0]
  215ae3:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  215ae7:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  215aee:	48 81 c4 90 01 00 00 	add    rsp,0x190
  215af5:	5d                   	pop    rbp
  215af6:	c3                   	ret    
    return &st.abbrev_table_list.items[st.abbrev_table_list.len - 1].table;
  215af7:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  215afe:	48 05 88 00 00 00    	add    rax,0x88
  215b04:	48 8b 8d 00 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x100]
  215b0b:	48 8b 89 98 00 00 00 	mov    rcx,QWORD PTR [rcx+0x98]
  215b12:	48 83 e9 01          	sub    rcx,0x1
  215b16:	0f 92 c2             	setb   dl
  215b19:	48 89 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rax
  215b20:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  215b27:	88 95 7f fe ff ff    	mov    BYTE PTR [rbp-0x181],dl
  215b2d:	72 40                	jb     215b6f <getAbbrevTable+0x35f>
  215b2f:	eb 4e                	jmp    215b7f <getAbbrevTable+0x36f>
  215b31:	48 8d 3d 90 d6 02 00 	lea    rdi,[rip+0x2d690]        # 2431c8 <__unnamed_4>
  215b38:	31 c0                	xor    eax,eax
  215b3a:	89 c6                	mov    esi,eax
    try st.self_exe_file.seekTo(st.debug_abbrev.offset + abbrev_offset);
  215b3c:	e8 bf 5a ff ff       	call   20b600 <panic>
  215b41:	48 8b bd d8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x128]
  215b48:	48 8b b5 b8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x148]
  215b4f:	48 8b 95 b0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x150]
  215b56:	e8 b5 e6 ff ff       	call   214210 <File_seekTo>
  215b5b:	66 89 45 ce          	mov    WORD PTR [rbp-0x32],ax
  215b5f:	66 83 7d ce 00       	cmp    WORD PTR [rbp-0x32],0x0
  215b64:	0f 85 fb fd ff ff    	jne    215965 <getAbbrevTable+0x155>
  215b6a:	e9 3e fe ff ff       	jmp    2159ad <getAbbrevTable+0x19d>
  215b6f:	48 8d 3d 52 d6 02 00 	lea    rdi,[rip+0x2d652]        # 2431c8 <__unnamed_4>
  215b76:	31 c0                	xor    eax,eax
  215b78:	89 c6                	mov    esi,eax
    return &st.abbrev_table_list.items[st.abbrev_table_list.len - 1].table;
  215b7a:	e8 81 5a ff ff       	call   20b600 <panic>
  215b7f:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
  215b86:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
  215b8d:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  215b91:	72 10                	jb     215ba3 <getAbbrevTable+0x393>
  215b93:	48 8d 3d 3e d8 02 00 	lea    rdi,[rip+0x2d83e]        # 2433d8 <__unnamed_20>
  215b9a:	31 c0                	xor    eax,eax
  215b9c:	89 c6                	mov    esi,eax
  215b9e:	e8 5d 5a ff ff       	call   20b600 <panic>
  215ba3:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
  215baa:	48 6b c8 28          	imul   rcx,rax,0x28
  215bae:	48 8b 95 88 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x178]
  215bb5:	48 03 0a             	add    rcx,QWORD PTR [rdx]
  215bb8:	48 83 c1 08          	add    rcx,0x8
  215bbc:	66 c7 85 08 ff ff ff 	mov    WORD PTR [rbp-0xf8],0x0
  215bc3:	00 00 
  215bc5:	48 89 8d 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rcx
  215bcc:	48 8b 8d 08 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf8]
  215bd3:	48 8b b5 e0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x120]
  215bda:	48 89 0e             	mov    QWORD PTR [rsi],rcx
  215bdd:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  215be4:	48 89 4e 08          	mov    QWORD PTR [rsi+0x8],rcx
  215be8:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  215bef:	48 81 c4 90 01 00 00 	add    rsp,0x190
  215bf6:	5d                   	pop    rbp
  215bf7:	c3                   	ret    
  215bf8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  215bff:	00 

0000000000215c00 <ElfStackTrace_allocator>:
        pub fn allocator(self: *const ElfStackTrace) *mem.Allocator {
  215c00:	55                   	push   rbp
  215c01:	48 89 e5             	mov    rbp,rsp
  215c04:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
            return self.abbrev_table_list.allocator;
  215c08:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  215c0c:	48 8b 87 a0 00 00 00 	mov    rax,QWORD PTR [rdi+0xa0]
  215c13:	5d                   	pop    rbp
  215c14:	c3                   	ret    
  215c15:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  215c1c:	00 00 00 00 

0000000000215c20 <parseDie>:
fn parseDie(st: *ElfStackTrace, abbrev_table: *const AbbrevTable, is_64: bool) !Die {
  215c20:	55                   	push   rbp
  215c21:	48 89 e5             	mov    rbp,rsp
  215c24:	48 81 ec 70 03 00 00 	sub    rsp,0x370
  215c2b:	44 88 c0             	mov    al,r8b
  215c2e:	49 89 f9             	mov    r9,rdi
  215c31:	4c 8d 55 f0          	lea    r10,[rbp-0x10]
  215c35:	48 89 95 f0 fd ff ff 	mov    QWORD PTR [rbp-0x210],rdx
  215c3c:	48 89 8d e8 fd ff ff 	mov    QWORD PTR [rbp-0x218],rcx
  215c43:	24 01                	and    al,0x1
  215c45:	88 85 e7 fd ff ff    	mov    BYTE PTR [rbp-0x219],al
    const in_file = &st.self_exe_file;
  215c4b:	48 8b 8d f0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x210]
  215c52:	48 89 8d d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rcx
    var in_file_stream = io.FileInStream.init(in_file);
  215c59:	48 8b 8d d8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x228]
  215c60:	48 89 bd 60 fd ff ff 	mov    QWORD PTR [rbp-0x2a0],rdi
  215c67:	4c 89 d7             	mov    rdi,r10
  215c6a:	48 89 b5 58 fd ff ff 	mov    QWORD PTR [rbp-0x2a8],rsi
  215c71:	48 89 ce             	mov    rsi,rcx
  215c74:	4c 89 8d 50 fd ff ff 	mov    QWORD PTR [rbp-0x2b0],r9
  215c7b:	e8 b0 dc ff ff       	call   213930 <FileInStream_init>
  215c80:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
  215c84:	48 8d 8d c8 fd ff ff 	lea    rcx,[rbp-0x238]
  215c8b:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  215c8f:	48 89 95 c8 fd ff ff 	mov    QWORD PTR [rbp-0x238],rdx
  215c96:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  215c9a:	48 89 95 d0 fd ff ff 	mov    QWORD PTR [rbp-0x230],rdx
    const in_stream = &in_file_stream.stream;
  215ca1:	48 83 c1 08          	add    rcx,0x8
  215ca5:	48 89 8d c0 fd ff ff 	mov    QWORD PTR [rbp-0x240],rcx
    const abbrev_code = try readULeb128(in_stream);
  215cac:	48 8b 95 c0 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x240]
  215cb3:	48 8b b5 58 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a8]
  215cba:	e8 b1 13 00 00       	call   217070 <readULeb128>
  215cbf:	66 83 7d e0 00       	cmp    WORD PTR [rbp-0x20],0x0
  215cc4:	74 5a                	je     215d20 <parseDie+0x100>
  215cc6:	66 8b 45 e0          	mov    ax,WORD PTR [rbp-0x20]
  215cca:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  215cd1:	66 89 85 4e fd ff ff 	mov    WORD PTR [rbp-0x2b2],ax
  215cd8:	e8 b3 5f ff ff       	call   20bc90 <__zig_return_error>
  215cdd:	b9 38 00 00 00       	mov    ecx,0x38
  215ce2:	89 ca                	mov    edx,ecx
  215ce4:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  215ce8:	66 8b 85 4e fd ff ff 	mov    ax,WORD PTR [rbp-0x2b2]
  215cef:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  215cf3:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  215cfa:	48 89 bd 40 fd ff ff 	mov    QWORD PTR [rbp-0x2c0],rdi
  215d01:	48 89 f7             	mov    rdi,rsi
  215d04:	48 8b b5 40 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2c0]
  215d0b:	e8 90 eb 01 00       	call   2348a0 <memcpy>
  215d10:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  215d17:	48 81 c4 70 03 00 00 	add    rsp,0x370
  215d1e:	5d                   	pop    rbp
  215d1f:	c3                   	ret    
  215d20:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  215d24:	48 89 85 b8 fd ff ff 	mov    QWORD PTR [rbp-0x248],rax
    const table_entry = getAbbrevTableEntry(abbrev_table, abbrev_code) orelse return error.InvalidDebugInfo;
  215d2b:	48 8b bd e8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x218]
  215d32:	48 8b b5 b8 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x248]
  215d39:	e8 82 35 00 00       	call   2192c0 <getAbbrevTableEntry>
  215d3e:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  215d42:	48 83 7d 90 00       	cmp    QWORD PTR [rbp-0x70],0x0
  215d47:	75 47                	jne    215d90 <parseDie+0x170>
  215d49:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  215d50:	e8 3b 5f ff ff       	call   20bc90 <__zig_return_error>
  215d55:	48 8d 3d 5c 32 ff ff 	lea    rdi,[rip+0xffffffffffff325c]        # 208fb8 <__unnamed_79>
  215d5c:	b8 38 00 00 00       	mov    eax,0x38
  215d61:	89 c2                	mov    edx,eax
  215d63:	48 8b 8d 60 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2a0]
  215d6a:	48 89 bd 38 fd ff ff 	mov    QWORD PTR [rbp-0x2c8],rdi
  215d71:	48 89 cf             	mov    rdi,rcx
  215d74:	48 8b b5 38 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2c8]
  215d7b:	e8 20 eb 01 00       	call   2348a0 <memcpy>
  215d80:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  215d87:	48 81 c4 70 03 00 00 	add    rsp,0x370
  215d8e:	5d                   	pop    rbp
  215d8f:	c3                   	ret    
  215d90:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  215d94:	48 89 85 30 fd ff ff 	mov    QWORD PTR [rbp-0x2d0],rax
  215d9b:	48 8b 85 30 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2d0]
  215da2:	48 89 85 b0 fd ff ff 	mov    QWORD PTR [rbp-0x250],rax
        .tag_id = table_entry.tag_id,
  215da9:	48 8b 8d b0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x250]
  215db0:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
        .has_children = table_entry.has_children,
  215db4:	48 8b 95 b0 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x250]
  215dbb:	40 8a 32             	mov    sil,BYTE PTR [rdx]
        .attrs = ArrayList(Die.Attr).init(st.allocator()),
  215dbe:	48 8b bd f0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x210]
  215dc5:	48 89 8d 28 fd ff ff 	mov    QWORD PTR [rbp-0x2d8],rcx
  215dcc:	40 88 b5 27 fd ff ff 	mov    BYTE PTR [rbp-0x2d9],sil
  215dd3:	e8 28 fe ff ff       	call   215c00 <ElfStackTrace_allocator>
  215dd8:	48 8d bd 70 ff ff ff 	lea    rdi,[rbp-0x90]
  215ddf:	48 89 c6             	mov    rsi,rax
  215de2:	e8 79 35 00 00       	call   219360 <AlignedArrayList(Attr,8)_init>
  215de7:	48 8d 85 80 fd ff ff 	lea    rax,[rbp-0x280]
  215dee:	41 b8 30 00 00 00    	mov    r8d,0x30
  215df4:	44 89 c2             	mov    edx,r8d
  215df7:	48 8d 8d 40 ff ff ff 	lea    rcx,[rbp-0xc0]
    var result = Die{
  215dfe:	48 8b b5 28 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2d8]
  215e05:	48 89 b5 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rsi
  215e0c:	44 8a 8d 27 fd ff ff 	mov    r9b,BYTE PTR [rbp-0x2d9]
  215e13:	41 80 e1 01          	and    r9b,0x1
  215e17:	44 88 8d 48 ff ff ff 	mov    BYTE PTR [rbp-0xb8],r9b
  215e1e:	48 8b b5 70 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x90]
  215e25:	48 89 b5 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rsi
  215e2c:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
  215e33:	48 89 b5 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rsi
  215e3a:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  215e3e:	48 89 b5 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rsi
  215e45:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
  215e49:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
  215e50:	48 89 c6             	mov    rsi,rax
  215e53:	48 89 f7             	mov    rdi,rsi
  215e56:	48 89 ce             	mov    rsi,rcx
  215e59:	48 89 85 18 fd ff ff 	mov    QWORD PTR [rbp-0x2e8],rax
  215e60:	e8 3b ea 01 00       	call   2348a0 <memcpy>
    try result.attrs.resize(table_entry.attrs.len);
  215e65:	48 8b 85 18 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2e8]
  215e6c:	48 83 c0 10          	add    rax,0x10
  215e70:	48 8b 8d b0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x250]
  215e77:	48 8b 51 28          	mov    rdx,QWORD PTR [rcx+0x28]
  215e7b:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  215e82:	48 89 c6             	mov    rsi,rax
  215e85:	e8 36 35 00 00       	call   2193c0 <AlignedArrayList(Attr,8)_resize>
  215e8a:	66 89 85 3e ff ff ff 	mov    WORD PTR [rbp-0xc2],ax
  215e91:	66 83 bd 3e ff ff ff 	cmp    WORD PTR [rbp-0xc2],0x0
  215e98:	00 
  215e99:	74 63                	je     215efe <parseDie+0x2de>
  215e9b:	66 8b 85 3e ff ff ff 	mov    ax,WORD PTR [rbp-0xc2]
  215ea2:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  215ea9:	66 89 85 16 fd ff ff 	mov    WORD PTR [rbp-0x2ea],ax
  215eb0:	e8 db 5d ff ff       	call   20bc90 <__zig_return_error>
  215eb5:	b9 38 00 00 00       	mov    ecx,0x38
  215eba:	89 ca                	mov    edx,ecx
  215ebc:	48 8d bd 00 ff ff ff 	lea    rdi,[rbp-0x100]
  215ec3:	66 8b 85 16 fd ff ff 	mov    ax,WORD PTR [rbp-0x2ea]
  215eca:	66 89 85 00 ff ff ff 	mov    WORD PTR [rbp-0x100],ax
  215ed1:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  215ed8:	48 89 bd 08 fd ff ff 	mov    QWORD PTR [rbp-0x2f8],rdi
  215edf:	48 89 f7             	mov    rdi,rsi
  215ee2:	48 8b b5 08 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f8]
  215ee9:	e8 b2 e9 01 00       	call   2348a0 <memcpy>
  215eee:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  215ef5:	48 81 c4 70 03 00 00 	add    rsp,0x370
  215efc:	5d                   	pop    rbp
  215efd:	c3                   	ret    
  215efe:	48 8d bd f0 fe ff ff 	lea    rdi,[rbp-0x110]
    for (table_entry.attrs.toSliceConst()) |attr, i| {
  215f05:	48 8b 85 b0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x250]
  215f0c:	48 83 c0 18          	add    rax,0x18
  215f10:	48 89 c6             	mov    rsi,rax
  215f13:	e8 18 35 00 00       	call   219430 <AlignedArrayList(AbbrevAttr,8)_toSliceConst>
  215f18:	48 8b 05 91 a3 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffea391]        # 2002b0 <__unnamed_100>
  215f1f:	48 89 85 70 fd ff ff 	mov    QWORD PTR [rbp-0x290],rax
  215f26:	48 8b 05 8b a3 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffea38b]        # 2002b8 <__unnamed_100+0x8>
  215f2d:	48 89 85 78 fd ff ff 	mov    QWORD PTR [rbp-0x288],rax
  215f34:	48 c7 85 68 fd ff ff 	mov    QWORD PTR [rbp-0x298],0x0
  215f3b:	00 00 00 00 
  215f3f:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  215f46:	48 89 85 00 fd ff ff 	mov    QWORD PTR [rbp-0x300],rax
  215f4d:	48 8b 85 68 fd ff ff 	mov    rax,QWORD PTR [rbp-0x298]
  215f54:	48 8b 8d 00 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x300]
  215f5b:	48 39 c8             	cmp    rax,rcx
  215f5e:	48 89 85 f8 fc ff ff 	mov    QWORD PTR [rbp-0x308],rax
  215f65:	0f 83 36 01 00 00    	jae    2160a1 <parseDie+0x481>
  215f6b:	48 8d 85 80 fd ff ff 	lea    rax,[rbp-0x280]
  215f72:	48 8b 8d f8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x308]
  215f79:	48 c1 e1 04          	shl    rcx,0x4
  215f7d:	48 03 8d f0 fe ff ff 	add    rcx,QWORD PTR [rbp-0x110]
  215f84:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
  215f87:	48 89 95 70 fd ff ff 	mov    QWORD PTR [rbp-0x290],rdx
  215f8e:	48 8b 49 08          	mov    rcx,QWORD PTR [rcx+0x8]
  215f92:	48 89 8d 78 fd ff ff 	mov    QWORD PTR [rbp-0x288],rcx
        result.attrs.items[i] = Die.Attr{
  215f99:	48 83 c0 10          	add    rax,0x10
  215f9d:	48 8b 8d 68 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x298]
  215fa4:	48 3b 8d 98 fd ff ff 	cmp    rcx,QWORD PTR [rbp-0x268]
  215fab:	48 89 85 f0 fc ff ff 	mov    QWORD PTR [rbp-0x310],rax
  215fb2:	48 89 8d e8 fc ff ff 	mov    QWORD PTR [rbp-0x318],rcx
  215fb9:	0f 82 86 01 00 00    	jb     216145 <parseDie+0x525>
  215fbf:	e9 71 01 00 00       	jmp    216135 <parseDie+0x515>
            .value = try parseFormValue(st.allocator(), in_stream, attr.form_id, is_64),
  215fc4:	66 8b 85 b8 fe ff ff 	mov    ax,WORD PTR [rbp-0x148]
  215fcb:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
  215fd2:	66 89 85 e6 fc ff ff 	mov    WORD PTR [rbp-0x31a],ax
  215fd9:	e8 b2 5c ff ff       	call   20bc90 <__zig_return_error>
  215fde:	b9 38 00 00 00       	mov    ecx,0x38
  215fe3:	89 ca                	mov    edx,ecx
  215fe5:	48 8d bd 58 fe ff ff 	lea    rdi,[rbp-0x1a8]
  215fec:	66 8b 85 e6 fc ff ff 	mov    ax,WORD PTR [rbp-0x31a]
  215ff3:	66 89 85 58 fe ff ff 	mov    WORD PTR [rbp-0x1a8],ax
  215ffa:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
  216001:	48 89 bd d8 fc ff ff 	mov    QWORD PTR [rbp-0x328],rdi
  216008:	48 89 f7             	mov    rdi,rsi
  21600b:	48 8b b5 d8 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x328]
  216012:	e8 89 e8 01 00       	call   2348a0 <memcpy>
  216017:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  21601e:	48 81 c4 70 03 00 00 	add    rsp,0x370
  216025:	5d                   	pop    rbp
  216026:	c3                   	ret    
  216027:	b8 28 00 00 00       	mov    eax,0x28
  21602c:	89 c2                	mov    edx,eax
  21602e:	48 8d 8d 30 fe ff ff 	lea    rcx,[rbp-0x1d0]
        result.attrs.items[i] = Die.Attr{
  216035:	48 8b b5 d0 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x330]
  21603c:	48 89 b5 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rsi
  216043:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21604a:	48 89 bd 38 fe ff ff 	mov    QWORD PTR [rbp-0x1c8],rdi
  216051:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  216058:	48 89 bd 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rdi
  21605f:	48 8b bd d0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x130]
  216066:	48 89 bd 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rdi
  21606d:	48 8b bd d8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x128]
  216074:	48 89 bd 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rdi
  21607b:	48 8b bd c8 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x338]
  216082:	48 89 ce             	mov    rsi,rcx
  216085:	e8 16 e8 01 00       	call   2348a0 <memcpy>
    for (table_entry.attrs.toSliceConst()) |attr, i| {
  21608a:	48 8b 8d f8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x308]
  216091:	48 83 c1 01          	add    rcx,0x1
  216095:	48 89 8d 68 fd ff ff 	mov    QWORD PTR [rbp-0x298],rcx
  21609c:	e9 ac fe ff ff       	jmp    215f4d <parseDie+0x32d>
  2160a1:	b8 38 00 00 00       	mov    eax,0x38
  2160a6:	89 c2                	mov    edx,eax
  2160a8:	48 8d 8d f8 fd ff ff 	lea    rcx,[rbp-0x208]
  2160af:	b8 30 00 00 00       	mov    eax,0x30
  2160b4:	89 c6                	mov    esi,eax
  2160b6:	48 8d bd 80 fd ff ff 	lea    rdi,[rbp-0x280]
    return result;
  2160bd:	66 c7 85 f8 fd ff ff 	mov    WORD PTR [rbp-0x208],0x0
  2160c4:	00 00 
  2160c6:	49 89 c8             	mov    r8,rcx
  2160c9:	49 83 c0 08          	add    r8,0x8
  2160cd:	48 89 bd c0 fc ff ff 	mov    QWORD PTR [rbp-0x340],rdi
  2160d4:	4c 89 c7             	mov    rdi,r8
  2160d7:	4c 8b 85 c0 fc ff ff 	mov    r8,QWORD PTR [rbp-0x340]
  2160de:	48 89 b5 b8 fc ff ff 	mov    QWORD PTR [rbp-0x348],rsi
  2160e5:	4c 89 c6             	mov    rsi,r8
  2160e8:	4c 8b 8d b8 fc ff ff 	mov    r9,QWORD PTR [rbp-0x348]
  2160ef:	48 89 95 b0 fc ff ff 	mov    QWORD PTR [rbp-0x350],rdx
  2160f6:	4c 89 ca             	mov    rdx,r9
  2160f9:	48 89 8d a8 fc ff ff 	mov    QWORD PTR [rbp-0x358],rcx
  216100:	e8 9b e7 01 00       	call   2348a0 <memcpy>
  216105:	48 8b 8d a8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x358]
  21610c:	48 8b 95 60 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2a0]
  216113:	48 89 d7             	mov    rdi,rdx
  216116:	48 89 ce             	mov    rsi,rcx
  216119:	48 8b 95 b0 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x350]
  216120:	e8 7b e7 01 00       	call   2348a0 <memcpy>
  216125:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  21612c:	48 81 c4 70 03 00 00 	add    rsp,0x370
  216133:	5d                   	pop    rbp
  216134:	c3                   	ret    
  216135:	48 8d 3d 9c d2 02 00 	lea    rdi,[rip+0x2d29c]        # 2433d8 <__unnamed_20>
  21613c:	31 c0                	xor    eax,eax
  21613e:	89 c6                	mov    esi,eax
        result.attrs.items[i] = Die.Attr{
  216140:	e8 bb 54 ff ff       	call   20b600 <panic>
  216145:	48 8b 85 e8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x318]
  21614c:	48 6b c8 28          	imul   rcx,rax,0x28
  216150:	48 8b 95 f0 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x310]
  216157:	48 03 0a             	add    rcx,QWORD PTR [rdx]
            .id = attr.attr_id,
  21615a:	48 8b b5 70 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x290]
            .value = try parseFormValue(st.allocator(), in_stream, attr.form_id, is_64),
  216161:	48 8b bd f0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x210]
  216168:	48 89 8d c8 fc ff ff 	mov    QWORD PTR [rbp-0x338],rcx
  21616f:	48 89 b5 d0 fc ff ff 	mov    QWORD PTR [rbp-0x330],rsi
  216176:	e8 85 fa ff ff       	call   215c00 <ElfStackTrace_allocator>
  21617b:	48 8d 8d b8 fe ff ff 	lea    rcx,[rbp-0x148]
  216182:	48 8b 95 c0 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x240]
  216189:	4c 8b 85 78 fd ff ff 	mov    r8,QWORD PTR [rbp-0x288]
  216190:	44 8a 8d e7 fd ff ff 	mov    r9b,BYTE PTR [rbp-0x219]
  216197:	45 0f b6 c9          	movzx  r9d,r9b
  21619b:	48 8d bd b8 fe ff ff 	lea    rdi,[rbp-0x148]
  2161a2:	48 8b b5 58 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a8]
  2161a9:	48 89 95 a0 fc ff ff 	mov    QWORD PTR [rbp-0x360],rdx
  2161b0:	48 89 c2             	mov    rdx,rax
  2161b3:	48 8b 85 a0 fc ff ff 	mov    rax,QWORD PTR [rbp-0x360]
  2161ba:	48 89 8d 98 fc ff ff 	mov    QWORD PTR [rbp-0x368],rcx
  2161c1:	48 89 c1             	mov    rcx,rax
  2161c4:	e8 07 33 00 00       	call   2194d0 <parseFormValue>
  2161c9:	66 83 bd b8 fe ff ff 	cmp    WORD PTR [rbp-0x148],0x0
  2161d0:	00 
  2161d1:	0f 85 ed fd ff ff    	jne    215fc4 <parseDie+0x3a4>
  2161d7:	e9 4b fe ff ff       	jmp    216027 <parseDie+0x407>
  2161dc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

00000000002161e0 <Allocator_create.37>:
    pub fn create(self: *Allocator, init: var) Error!*@typeOf(init) {
  2161e0:	55                   	push   rbp
  2161e1:	48 89 e5             	mov    rbp,rsp
  2161e4:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  2161eb:	48 89 f8             	mov    rax,rdi
  2161ee:	4c 8d 45 e8          	lea    r8,[rbp-0x18]
  2161f2:	41 b9 01 00 00 00    	mov    r9d,0x1
  2161f8:	45 89 ca             	mov    r10d,r9d
  2161fb:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
        const slice = try self.alloc(T, 1);
  2161ff:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  216203:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
  216207:	4c 89 c7             	mov    rdi,r8
  21620a:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
  21620e:	48 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rcx
  216215:	4c 89 d1             	mov    rcx,r10
  216218:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  21621f:	e8 ac 5c 00 00       	call   21bed0 <Allocator_alloc.53>
  216224:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  216229:	74 42                	je     21626d <Allocator_create.37+0x8d>
  21622b:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  21622f:	48 8b 7d 80          	mov    rdi,QWORD PTR [rbp-0x80]
  216233:	66 89 85 6e ff ff ff 	mov    WORD PTR [rbp-0x92],ax
  21623a:	e8 51 5a ff ff       	call   20bc90 <__zig_return_error>
  21623f:	66 8b 85 6e ff ff ff 	mov    ax,WORD PTR [rbp-0x92]
  216246:	66 89 45 c0          	mov    WORD PTR [rbp-0x40],ax
  21624a:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21624e:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  216252:	48 89 39             	mov    QWORD PTR [rcx],rdi
  216255:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  216259:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21625d:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  216264:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  21626b:	5d                   	pop    rbp
  21626c:	c3                   	ret    
  21626d:	31 c0                	xor    eax,eax
  21626f:	89 c1                	mov    ecx,eax
  216271:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  216275:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  216279:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  21627d:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
        const ptr = &slice[0];
  216281:	48 3b 4d a0          	cmp    rcx,QWORD PTR [rbp-0x60]
  216285:	72 10                	jb     216297 <Allocator_create.37+0xb7>
  216287:	48 8d 3d 4a d1 02 00 	lea    rdi,[rip+0x2d14a]        # 2433d8 <__unnamed_20>
  21628e:	31 c0                	xor    eax,eax
  216290:	89 c6                	mov    esi,eax
  216292:	e8 69 53 ff ff       	call   20b600 <panic>
  216297:	b8 30 00 00 00       	mov    eax,0x30
  21629c:	89 c2                	mov    edx,eax
  21629e:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  2162a2:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
        ptr.* = init;
  2162a6:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  2162aa:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
  2162b1:	48 89 cf             	mov    rdi,rcx
  2162b4:	e8 e7 e5 01 00       	call   2348a0 <memcpy>
        return ptr;
  2162b9:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  2162bd:	66 c7 45 b0 00 00    	mov    WORD PTR [rbp-0x50],0x0
  2162c3:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
  2162c7:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  2162cb:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
  2162cf:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  2162d2:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  2162d6:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  2162da:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  2162e1:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  2162e8:	5d                   	pop    rbp
  2162e9:	c3                   	ret    
  2162ea:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000002162f0 <Die_getAttrAddr>:
    fn getAttrAddr(self: *const Die, id: u64) !u64 {
  2162f0:	55                   	push   rbp
  2162f1:	48 89 e5             	mov    rbp,rsp
  2162f4:	48 83 ec 70          	sub    rsp,0x70
  2162f8:	48 89 f8             	mov    rax,rdi
  2162fb:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  2162ff:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
        const form_value = self.getAttr(id) orelse return error.MissingDebugInfo;
  216303:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  216307:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  21630b:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
  21630f:	48 89 cf             	mov    rdi,rcx
  216312:	48 89 75 b8          	mov    QWORD PTR [rbp-0x48],rsi
  216316:	48 89 d6             	mov    rsi,rdx
  216319:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  21631d:	e8 ee 00 00 00       	call   216410 <Die_getAttr>
  216322:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  216326:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
  21632b:	75 2c                	jne    216359 <Die_getAttrAddr+0x69>
  21632d:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  216331:	e8 5a 59 ff ff       	call   20bc90 <__zig_return_error>
  216336:	48 8b 3d 43 a5 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffea543]        # 200880 <__unnamed_117>
  21633d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  216341:	48 89 38             	mov    QWORD PTR [rax],rdi
  216344:	48 8b 3d 3d a5 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffea53d]        # 200888 <__unnamed_117+0x8>
  21634b:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  21634f:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  216353:	48 83 c4 70          	add    rsp,0x70
  216357:	5d                   	pop    rbp
  216358:	c3                   	ret    
  216359:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21635d:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  216361:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  216365:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
        return switch (form_value.*) {
  216369:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  21636d:	8a 51 18             	mov    dl,BYTE PTR [rcx+0x18]
  216370:	84 d2                	test   dl,dl
  216372:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
  216376:	74 0f                	je     216387 <Die_getAttrAddr+0x97>
  216378:	eb 00                	jmp    21637a <Die_getAttrAddr+0x8a>
  21637a:	48 8d 05 cf 9e fe ff 	lea    rax,[rip+0xfffffffffffe9ecf]        # 200250 <__unnamed_131>
  216381:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  216385:	eb 0d                	jmp    216394 <Die_getAttrAddr+0xa4>
            FormValue.Address => |value| value,
  216387:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  21638b:	8a 48 18             	mov    cl,BYTE PTR [rax+0x18]
  21638e:	84 c9                	test   cl,cl
  216390:	74 3d                	je     2163cf <Die_getAttrAddr+0xdf>
  216392:	eb 5e                	jmp    2163f2 <Die_getAttrAddr+0x102>
        return switch (form_value.*) {
  216394:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  216398:	66 83 38 00          	cmp    WORD PTR [rax],0x0
  21639c:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  2163a0:	74 0b                	je     2163ad <Die_getAttrAddr+0xbd>
  2163a2:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  2163a6:	e8 e5 58 ff ff       	call   20bc90 <__zig_return_error>
  2163ab:	eb 02                	jmp    2163af <Die_getAttrAddr+0xbf>
  2163ad:	eb 00                	jmp    2163af <Die_getAttrAddr+0xbf>
  2163af:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  2163b3:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  2163b6:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  2163ba:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  2163bd:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  2163c1:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  2163c5:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  2163c9:	48 83 c4 70          	add    rsp,0x70
  2163cd:	5d                   	pop    rbp
  2163ce:	c3                   	ret    
  2163cf:	48 8d 45 e8          	lea    rax,[rbp-0x18]
            FormValue.Address => |value| value,
  2163d3:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  2163d7:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
  2163da:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
  2163de:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  2163e2:	66 c7 45 e8 00 00    	mov    WORD PTR [rbp-0x18],0x0
  2163e8:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
        return switch (form_value.*) {
  2163ec:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  2163f0:	eb a2                	jmp    216394 <Die_getAttrAddr+0xa4>
  2163f2:	48 8d 3d e7 d1 02 00 	lea    rdi,[rip+0x2d1e7]        # 2435e0 <__unnamed_29>
  2163f9:	31 c0                	xor    eax,eax
  2163fb:	89 c6                	mov    esi,eax
            FormValue.Address => |value| value,
  2163fd:	e8 fe 51 ff ff       	call   20b600 <panic>
  216402:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  216409:	1f 84 00 00 00 00 00 

0000000000216410 <Die_getAttr>:
    fn getAttr(self: *const Die, id: u64) ?*const FormValue {
  216410:	55                   	push   rbp
  216411:	48 89 e5             	mov    rbp,rsp
  216414:	48 83 ec 50          	sub    rsp,0x50
  216418:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  21641c:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  216420:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        for (self.attrs.toSliceConst()) |*attr| {
  216424:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  216428:	48 83 c6 10          	add    rsi,0x10
  21642c:	48 89 c7             	mov    rdi,rax
  21642f:	e8 0c 5b 00 00       	call   21bf40 <AlignedArrayList(Attr,8)_toSliceConst>
  216434:	be aa 00 00 00       	mov    esi,0xaa
  216439:	b9 08 00 00 00       	mov    ecx,0x8
  21643e:	89 ca                	mov    edx,ecx
  216440:	48 8d 45 c8          	lea    rax,[rbp-0x38]
  216444:	48 89 c7             	mov    rdi,rax
  216447:	e8 04 e4 01 00       	call   234850 <memset>
  21644c:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
  216453:	00 
  216454:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  216458:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  21645c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  216460:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  216464:	48 39 c8             	cmp    rax,rcx
  216467:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  21646b:	73 39                	jae    2164a6 <Die_getAttr+0x96>
  21646d:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  216471:	48 6b c8 28          	imul   rcx,rax,0x28
  216475:	48 03 4d f0          	add    rcx,QWORD PTR [rbp-0x10]
  216479:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
            if (attr.id == id) return &attr.value;
  21647d:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  216481:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  216484:	48 3b 4d d0          	cmp    rcx,QWORD PTR [rbp-0x30]
  216488:	75 0e                	jne    216498 <Die_getAttr+0x88>
  21648a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21648e:	48 83 c0 08          	add    rax,0x8
  216492:	48 83 c4 50          	add    rsp,0x50
  216496:	5d                   	pop    rbp
  216497:	c3                   	ret    
        for (self.attrs.toSliceConst()) |*attr| {
  216498:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  21649c:	48 83 c0 01          	add    rax,0x1
  2164a0:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  2164a4:	eb b6                	jmp    21645c <Die_getAttr+0x4c>
  2164a6:	31 c0                	xor    eax,eax
        return null;
  2164a8:	48 83 c4 50          	add    rsp,0x50
  2164ac:	5d                   	pop    rbp
  2164ad:	c3                   	ret    
  2164ae:	66 90                	xchg   ax,ax

00000000002164b0 <Constant_asUnsignedLe>:
    fn asUnsignedLe(self: *const Constant) !u64 {
  2164b0:	55                   	push   rbp
  2164b1:	48 89 e5             	mov    rbp,rsp
  2164b4:	48 83 ec 30          	sub    rsp,0x30
  2164b8:	48 89 f8             	mov    rax,rdi
  2164bb:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
        if (self.payload.len > @sizeOf(u64)) return error.InvalidDebugInfo;
  2164bf:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  2164c3:	48 83 7a 08 08       	cmp    QWORD PTR [rdx+0x8],0x8
  2164c8:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  2164cc:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  2164d0:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  2164d4:	76 2c                	jbe    216502 <Constant_asUnsignedLe+0x52>
  2164d6:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  2164da:	e8 b1 57 ff ff       	call   20bc90 <__zig_return_error>
  2164df:	48 8b 3d 6a 9d fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe9d6a]        # 200250 <__unnamed_131>
  2164e6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2164ea:	48 89 38             	mov    QWORD PTR [rax],rdi
  2164ed:	48 8b 3d 64 9d fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe9d64]        # 200258 <__unnamed_131+0x8>
  2164f4:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  2164f8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2164fc:	48 83 c4 30          	add    rsp,0x30
  216500:	5d                   	pop    rbp
  216501:	c3                   	ret    
  216502:	eb 00                	jmp    216504 <Constant_asUnsignedLe+0x54>
        if (self.signed) return error.InvalidDebugInfo;
  216504:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  216508:	f6 40 10 01          	test   BYTE PTR [rax+0x10],0x1
  21650c:	75 02                	jne    216510 <Constant_asUnsignedLe+0x60>
  21650e:	eb 2c                	jmp    21653c <Constant_asUnsignedLe+0x8c>
  216510:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  216514:	e8 77 57 ff ff       	call   20bc90 <__zig_return_error>
  216519:	48 8b 3d 30 9d fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe9d30]        # 200250 <__unnamed_131>
  216520:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  216524:	48 89 38             	mov    QWORD PTR [rax],rdi
  216527:	48 8b 3d 2a 9d fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe9d2a]        # 200258 <__unnamed_131+0x8>
  21652e:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  216532:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  216536:	48 83 c4 30          	add    rsp,0x30
  21653a:	5d                   	pop    rbp
  21653b:	c3                   	ret    
  21653c:	eb 00                	jmp    21653e <Constant_asUnsignedLe+0x8e>
  21653e:	be 01 00 00 00       	mov    esi,0x1
        return mem.readInt(self.payload, u64, builtin.Endian.Little);
  216543:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  216547:	e8 f4 e6 ff ff       	call   214c40 <readInt.36>
  21654c:	66 c7 45 f0 00 00    	mov    WORD PTR [rbp-0x10],0x0
  216552:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  216556:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21655a:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  21655e:	48 89 07             	mov    QWORD PTR [rdi],rax
  216561:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  216565:	48 89 47 08          	mov    QWORD PTR [rdi+0x8],rax
  216569:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  21656d:	48 83 c4 30          	add    rsp,0x30
  216571:	5d                   	pop    rbp
  216572:	c3                   	ret    
  216573:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21657a:	84 00 00 00 00 00 

0000000000216580 <AlignedArrayList(CompileUnit,2)_append>:

            mem.copyBackwards(T, self.items[n + items.len .. self.len], self.items[n .. self.len - items.len]);
            mem.copy(T, self.items[n .. n + items.len], items);
        }

        pub fn append(self: *Self, item: T) !void {
  216580:	55                   	push   rbp
  216581:	48 89 e5             	mov    rbp,rsp
  216584:	48 83 ec 60          	sub    rsp,0x60
  216588:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  21658c:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
            const new_item_ptr = try self.addOne();
  216590:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  216594:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  216598:	48 89 c7             	mov    rdi,rax
  21659b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21659f:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
  2165a3:	48 89 c6             	mov    rsi,rax
  2165a6:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  2165aa:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  2165ae:	48 89 ca             	mov    rdx,rcx
  2165b1:	e8 2a 5a 00 00       	call   21bfe0 <AlignedArrayList(CompileUnit,2)_addOne>
  2165b6:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  2165bb:	74 1b                	je     2165d8 <AlignedArrayList(CompileUnit,2)_append+0x58>
  2165bd:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  2165c1:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2165c5:	66 89 45 b6          	mov    WORD PTR [rbp-0x4a],ax
  2165c9:	e8 c2 56 ff ff       	call   20bc90 <__zig_return_error>
  2165ce:	66 8b 45 b6          	mov    ax,WORD PTR [rbp-0x4a]
  2165d2:	48 83 c4 60          	add    rsp,0x60
  2165d6:	5d                   	pop    rbp
  2165d7:	c3                   	ret    
  2165d8:	31 c0                	xor    eax,eax
  2165da:	66 89 c1             	mov    cx,ax
  2165dd:	b8 30 00 00 00       	mov    eax,0x30
  2165e2:	89 c2                	mov    edx,eax
  2165e4:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2165e8:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
            new_item_ptr.* = item;
  2165ec:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  2165f0:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  2165f4:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  2165f8:	48 89 f7             	mov    rdi,rsi
  2165fb:	48 8b 75 a8          	mov    rsi,QWORD PTR [rbp-0x58]
  2165ff:	66 89 4d a6          	mov    WORD PTR [rbp-0x5a],cx
  216603:	e8 98 e2 01 00       	call   2348a0 <memcpy>
        pub fn append(self: *Self, item: T) !void {
  216608:	66 8b 45 a6          	mov    ax,WORD PTR [rbp-0x5a]
  21660c:	48 83 c4 60          	add    rsp,0x60
  216610:	5d                   	pop    rbp
  216611:	c3                   	ret    
  216612:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  216619:	1f 84 00 00 00 00 00 

0000000000216620 <InStream(ReadError)_readIntLe>:
        pub fn readIntLe(self: *Self, comptime T: type) !T {
  216620:	55                   	push   rbp
  216621:	48 89 e5             	mov    rbp,rsp
  216624:	48 83 ec 30          	sub    rsp,0x30
  216628:	48 89 f8             	mov    rax,rdi
  21662b:	48 8d 4d f8          	lea    rcx,[rbp-0x8]
  21662f:	41 b8 01 00 00 00    	mov    r8d,0x1
  216635:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
            return self.readInt(builtin.Endian.Little, T);
  216639:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21663d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  216641:	48 89 cf             	mov    rdi,rcx
  216644:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  216648:	44 89 c1             	mov    ecx,r8d
  21664b:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  21664f:	e8 8c d7 ff ff       	call   213de0 <InStream(ReadError)_readInt.32>
  216654:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  216659:	74 0b                	je     216666 <InStream(ReadError)_readIntLe+0x46>
  21665b:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21665f:	e8 2c 56 ff ff       	call   20bc90 <__zig_return_error>
  216664:	eb 02                	jmp    216668 <InStream(ReadError)_readIntLe+0x48>
  216666:	eb 00                	jmp    216668 <InStream(ReadError)_readIntLe+0x48>
  216668:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21666c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  216670:	48 89 01             	mov    QWORD PTR [rcx],rax
  216673:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  216677:	48 83 c4 30          	add    rsp,0x30
  21667b:	5d                   	pop    rbp
  21667c:	c3                   	ret    
  21667d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000216680 <InStream(ReadError)_readIntLe.38>:
        pub fn readIntLe(self: *Self, comptime T: type) !T {
  216680:	55                   	push   rbp
  216681:	48 89 e5             	mov    rbp,rsp
  216684:	48 83 ec 30          	sub    rsp,0x30
  216688:	48 89 f8             	mov    rax,rdi
  21668b:	48 8d 4d f0          	lea    rcx,[rbp-0x10]
  21668f:	41 b8 01 00 00 00    	mov    r8d,0x1
  216695:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
            return self.readInt(builtin.Endian.Little, T);
  216699:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  21669d:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2166a1:	48 89 cf             	mov    rdi,rcx
  2166a4:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  2166a8:	44 89 c1             	mov    ecx,r8d
  2166ab:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  2166af:	e8 3c d8 ff ff       	call   213ef0 <InStream(ReadError)_readInt.33>
  2166b4:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  2166b9:	74 0b                	je     2166c6 <InStream(ReadError)_readIntLe.38+0x46>
  2166bb:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  2166bf:	e8 cc 55 ff ff       	call   20bc90 <__zig_return_error>
  2166c4:	eb 02                	jmp    2166c8 <InStream(ReadError)_readIntLe.38+0x48>
  2166c6:	eb 00                	jmp    2166c8 <InStream(ReadError)_readIntLe.38+0x48>
  2166c8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2166cc:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  2166d0:	48 89 01             	mov    QWORD PTR [rcx],rax
  2166d3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2166d7:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2166db:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2166df:	48 83 c4 30          	add    rsp,0x30
  2166e3:	5d                   	pop    rbp
  2166e4:	c3                   	ret    
  2166e5:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2166ec:	00 00 00 00 

00000000002166f0 <AlignedArrayList(AbbrevTableHeader,8)_toSlice>:
        pub fn toSlice(self: Self) []align(A) T {
  2166f0:	55                   	push   rbp
  2166f1:	48 89 e5             	mov    rbp,rsp
  2166f4:	48 83 ec 40          	sub    rsp,0x40
  2166f8:	48 89 f8             	mov    rax,rdi
  2166fb:	31 c9                	xor    ecx,ecx
  2166fd:	89 ca                	mov    edx,ecx
            return self.items[0..self.len];
  2166ff:	4c 8b 46 10          	mov    r8,QWORD PTR [rsi+0x10]
  216703:	4c 8b 4e 08          	mov    r9,QWORD PTR [rsi+0x8]
  216707:	4c 39 c2             	cmp    rdx,r8
  21670a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  21670e:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  216712:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  216716:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
  21671a:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
  21671e:	76 10                	jbe    216730 <AlignedArrayList(AbbrevTableHeader,8)_toSlice+0x40>
  216720:	48 8d 3d b1 cc 02 00 	lea    rdi,[rip+0x2ccb1]        # 2433d8 <__unnamed_20>
  216727:	31 c0                	xor    eax,eax
  216729:	89 c6                	mov    esi,eax
  21672b:	e8 d0 4e ff ff       	call   20b600 <panic>
  216730:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  216734:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  216738:	48 39 c8             	cmp    rax,rcx
  21673b:	76 10                	jbe    21674d <AlignedArrayList(AbbrevTableHeader,8)_toSlice+0x5d>
  21673d:	48 8d 3d 94 cc 02 00 	lea    rdi,[rip+0x2cc94]        # 2433d8 <__unnamed_20>
  216744:	31 c0                	xor    eax,eax
  216746:	89 c6                	mov    esi,eax
  216748:	e8 b3 4e ff ff       	call   20b600 <panic>
  21674d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  216751:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  216754:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  216758:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  21675c:	48 83 e9 00          	sub    rcx,0x0
  216760:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  216764:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  216768:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  21676c:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  21676f:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  216773:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  216777:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21677b:	48 83 c4 40          	add    rsp,0x40
  21677f:	5d                   	pop    rbp
  216780:	c3                   	ret    
  216781:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  216788:	0f 1f 84 00 00 00 00 
  21678f:	00 

0000000000216790 <parseAbbrevTable>:
fn parseAbbrevTable(st: *ElfStackTrace) !AbbrevTable {
  216790:	55                   	push   rbp
  216791:	48 89 e5             	mov    rbp,rsp
  216794:	48 81 ec 90 03 00 00 	sub    rsp,0x390
  21679b:	48 89 f8             	mov    rax,rdi
  21679e:	48 8d 4d f0          	lea    rcx,[rbp-0x10]
  2167a2:	48 89 95 80 fd ff ff 	mov    QWORD PTR [rbp-0x280],rdx
    const in_file = &st.self_exe_file;
  2167a9:	48 8b 95 80 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x280]
  2167b0:	48 89 95 78 fd ff ff 	mov    QWORD PTR [rbp-0x288],rdx
    var in_file_stream = io.FileInStream.init(in_file);
  2167b7:	48 8b 95 78 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x288]
  2167be:	48 89 bd 18 fd ff ff 	mov    QWORD PTR [rbp-0x2e8],rdi
  2167c5:	48 89 cf             	mov    rdi,rcx
  2167c8:	48 89 b5 10 fd ff ff 	mov    QWORD PTR [rbp-0x2f0],rsi
  2167cf:	48 89 d6             	mov    rsi,rdx
  2167d2:	48 89 85 08 fd ff ff 	mov    QWORD PTR [rbp-0x2f8],rax
  2167d9:	e8 52 d1 ff ff       	call   213930 <FileInStream_init>
  2167de:	48 8d 85 68 fd ff ff 	lea    rax,[rbp-0x298]
  2167e5:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  2167e9:	48 89 8d 68 fd ff ff 	mov    QWORD PTR [rbp-0x298],rcx
  2167f0:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  2167f4:	48 89 8d 70 fd ff ff 	mov    QWORD PTR [rbp-0x290],rcx
    const in_stream = &in_file_stream.stream;
  2167fb:	48 83 c0 08          	add    rax,0x8
  2167ff:	48 89 85 60 fd ff ff 	mov    QWORD PTR [rbp-0x2a0],rax
    var result = AbbrevTable.init(st.allocator());
  216806:	48 8b bd 80 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x280]
  21680d:	e8 ee f3 ff ff       	call   215c00 <ElfStackTrace_allocator>
  216812:	48 8d 7d d0          	lea    rdi,[rbp-0x30]
  216816:	48 89 c6             	mov    rsi,rax
  216819:	e8 f2 07 00 00       	call   217010 <AlignedArrayList(AbbrevTableEntry,1)_init>
  21681e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  216822:	48 89 85 40 fd ff ff 	mov    QWORD PTR [rbp-0x2c0],rax
  216829:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21682d:	48 89 85 48 fd ff ff 	mov    QWORD PTR [rbp-0x2b8],rax
  216834:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  216838:	48 89 85 50 fd ff ff 	mov    QWORD PTR [rbp-0x2b0],rax
  21683f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  216843:	48 89 85 58 fd ff ff 	mov    QWORD PTR [rbp-0x2a8],rax
    while (true) {
  21684a:	eb 00                	jmp    21684c <parseAbbrevTable+0xbc>
  21684c:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
        const abbrev_code = try readULeb128(in_stream);
  216850:	48 8b 95 60 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2a0]
  216857:	48 8b b5 10 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f0]
  21685e:	e8 0d 08 00 00       	call   217070 <readULeb128>
  216863:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  216868:	74 5a                	je     2168c4 <parseAbbrevTable+0x134>
  21686a:	66 8b 45 c0          	mov    ax,WORD PTR [rbp-0x40]
  21686e:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
  216875:	66 89 85 06 fd ff ff 	mov    WORD PTR [rbp-0x2fa],ax
  21687c:	e8 0f 54 ff ff       	call   20bc90 <__zig_return_error>
  216881:	b9 28 00 00 00       	mov    ecx,0x28
  216886:	89 ca                	mov    edx,ecx
  216888:	48 8d 7d 88          	lea    rdi,[rbp-0x78]
  21688c:	66 8b 85 06 fd ff ff 	mov    ax,WORD PTR [rbp-0x2fa]
  216893:	66 89 45 88          	mov    WORD PTR [rbp-0x78],ax
  216897:	48 8b b5 18 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2e8]
  21689e:	48 89 bd f8 fc ff ff 	mov    QWORD PTR [rbp-0x308],rdi
  2168a5:	48 89 f7             	mov    rdi,rsi
  2168a8:	48 8b b5 f8 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x308]
  2168af:	e8 ec df 01 00       	call   2348a0 <memcpy>
  2168b4:	48 8b 85 08 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2f8]
  2168bb:	48 81 c4 90 03 00 00 	add    rsp,0x390
  2168c2:	5d                   	pop    rbp
  2168c3:	c3                   	ret    
  2168c4:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2168c8:	48 89 85 38 fd ff ff 	mov    QWORD PTR [rbp-0x2c8],rax
        if (abbrev_code == 0) return result;
  2168cf:	48 83 bd 38 fd ff ff 	cmp    QWORD PTR [rbp-0x2c8],0x0
  2168d6:	00 
  2168d7:	75 6e                	jne    216947 <parseAbbrevTable+0x1b7>
  2168d9:	b8 28 00 00 00       	mov    eax,0x28
  2168de:	89 c2                	mov    edx,eax
  2168e0:	48 8d 8d 60 ff ff ff 	lea    rcx,[rbp-0xa0]
  2168e7:	66 c7 85 60 ff ff ff 	mov    WORD PTR [rbp-0xa0],0x0
  2168ee:	00 00 
  2168f0:	48 8b b5 40 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2c0]
  2168f7:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
  2168fe:	48 8b b5 48 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2b8]
  216905:	48 89 b5 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rsi
  21690c:	48 8b b5 50 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2b0]
  216913:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
  21691a:	48 8b b5 58 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a8]
  216921:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
  216925:	48 8b b5 18 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2e8]
  21692c:	48 89 f7             	mov    rdi,rsi
  21692f:	48 89 ce             	mov    rsi,rcx
  216932:	e8 69 df 01 00       	call   2348a0 <memcpy>
  216937:	48 8b 85 08 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2f8]
  21693e:	48 81 c4 90 03 00 00 	add    rsp,0x390
  216945:	5d                   	pop    rbp
  216946:	c3                   	ret    
  216947:	eb 00                	jmp    216949 <parseAbbrevTable+0x1b9>
  216949:	48 8d bd 50 ff ff ff 	lea    rdi,[rbp-0xb0]
            .abbrev_code = abbrev_code,
  216950:	48 8b 85 38 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2c8]
            .tag_id = try readULeb128(in_stream),
  216957:	48 8b 95 60 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2a0]
  21695e:	48 8b b5 10 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f0]
  216965:	48 89 85 f0 fc ff ff 	mov    QWORD PTR [rbp-0x310],rax
  21696c:	e8 ff 06 00 00       	call   217070 <readULeb128>
  216971:	66 83 bd 50 ff ff ff 	cmp    WORD PTR [rbp-0xb0],0x0
  216978:	00 
  216979:	74 63                	je     2169de <parseAbbrevTable+0x24e>
  21697b:	66 8b 85 50 ff ff ff 	mov    ax,WORD PTR [rbp-0xb0]
  216982:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
  216989:	66 89 85 ee fc ff ff 	mov    WORD PTR [rbp-0x312],ax
  216990:	e8 fb 52 ff ff       	call   20bc90 <__zig_return_error>
  216995:	b9 28 00 00 00       	mov    ecx,0x28
  21699a:	89 ca                	mov    edx,ecx
  21699c:	48 8d bd 18 ff ff ff 	lea    rdi,[rbp-0xe8]
  2169a3:	66 8b 85 ee fc ff ff 	mov    ax,WORD PTR [rbp-0x312]
  2169aa:	66 89 85 18 ff ff ff 	mov    WORD PTR [rbp-0xe8],ax
  2169b1:	48 8b b5 18 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2e8]
  2169b8:	48 89 bd e0 fc ff ff 	mov    QWORD PTR [rbp-0x320],rdi
  2169bf:	48 89 f7             	mov    rdi,rsi
  2169c2:	48 8b b5 e0 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x320]
  2169c9:	e8 d2 de 01 00       	call   2348a0 <memcpy>
  2169ce:	48 8b 85 08 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2f8]
  2169d5:	48 81 c4 90 03 00 00 	add    rsp,0x390
  2169dc:	5d                   	pop    rbp
  2169dd:	c3                   	ret    
  2169de:	48 8d bd 10 ff ff ff 	lea    rdi,[rbp-0xf0]
  2169e5:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
            .has_children = (try in_stream.readByte()) == DW.CHILDREN_yes,
  2169ec:	48 8b 95 60 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2a0]
  2169f3:	48 8b b5 10 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f0]
  2169fa:	48 89 85 d8 fc ff ff 	mov    QWORD PTR [rbp-0x328],rax
  216a01:	e8 da d0 ff ff       	call   213ae0 <InStream(ReadError)_readByte>
  216a06:	66 83 bd 10 ff ff ff 	cmp    WORD PTR [rbp-0xf0],0x0
  216a0d:	00 
  216a0e:	74 63                	je     216a73 <parseAbbrevTable+0x2e3>
  216a10:	66 8b 85 10 ff ff ff 	mov    ax,WORD PTR [rbp-0xf0]
  216a17:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
  216a1e:	66 89 85 d6 fc ff ff 	mov    WORD PTR [rbp-0x32a],ax
  216a25:	e8 66 52 ff ff       	call   20bc90 <__zig_return_error>
  216a2a:	b9 28 00 00 00       	mov    ecx,0x28
  216a2f:	89 ca                	mov    edx,ecx
  216a31:	48 8d bd e0 fe ff ff 	lea    rdi,[rbp-0x120]
  216a38:	66 8b 85 d6 fc ff ff 	mov    ax,WORD PTR [rbp-0x32a]
  216a3f:	66 89 85 e0 fe ff ff 	mov    WORD PTR [rbp-0x120],ax
  216a46:	48 8b b5 18 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2e8]
  216a4d:	48 89 bd c8 fc ff ff 	mov    QWORD PTR [rbp-0x338],rdi
  216a54:	48 89 f7             	mov    rdi,rsi
  216a57:	48 8b b5 c8 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x338]
  216a5e:	e8 3d de 01 00       	call   2348a0 <memcpy>
  216a63:	48 8b 85 08 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2f8]
  216a6a:	48 81 c4 90 03 00 00 	add    rsp,0x390
  216a71:	5d                   	pop    rbp
  216a72:	c3                   	ret    
  216a73:	80 bd 12 ff ff ff 01 	cmp    BYTE PTR [rbp-0xee],0x1
  216a7a:	0f 94 c0             	sete   al
            .attrs = ArrayList(AbbrevAttr).init(st.allocator()),
  216a7d:	48 8b bd 80 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x280]
  216a84:	88 85 c7 fc ff ff    	mov    BYTE PTR [rbp-0x339],al
  216a8a:	e8 71 f1 ff ff       	call   215c00 <ElfStackTrace_allocator>
  216a8f:	48 8d bd c0 fe ff ff 	lea    rdi,[rbp-0x140]
  216a96:	48 89 c6             	mov    rsi,rax
  216a99:	e8 92 07 00 00       	call   217230 <AlignedArrayList(AbbrevAttr,8)_init>
  216a9e:	48 8d b5 40 fd ff ff 	lea    rsi,[rbp-0x2c0]
  216aa5:	48 8d 95 88 fe ff ff 	lea    rdx,[rbp-0x178]
        try result.append(AbbrevTableEntry{
  216aac:	8a 8d c7 fc ff ff    	mov    cl,BYTE PTR [rbp-0x339]
  216ab2:	80 e1 01             	and    cl,0x1
  216ab5:	88 8d 88 fe ff ff    	mov    BYTE PTR [rbp-0x178],cl
  216abb:	48 8b 85 f0 fc ff ff 	mov    rax,QWORD PTR [rbp-0x310]
  216ac2:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  216ac9:	48 8b bd d8 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x328]
  216ad0:	48 89 bd 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rdi
  216ad7:	4c 8b 85 c0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x140]
  216ade:	4c 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],r8
  216ae5:	4c 8b 85 c8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x138]
  216aec:	4c 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],r8
  216af3:	4c 8b 85 d0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x130]
  216afa:	4c 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],r8
  216b01:	4c 8b 85 d8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x128]
  216b08:	4c 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],r8
  216b0f:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
  216b16:	e8 75 07 00 00       	call   217290 <AlignedArrayList(AbbrevTableEntry,1)_append>
  216b1b:	66 89 85 86 fe ff ff 	mov    WORD PTR [rbp-0x17a],ax
  216b22:	66 83 bd 86 fe ff ff 	cmp    WORD PTR [rbp-0x17a],0x0
  216b29:	00 
  216b2a:	74 63                	je     216b8f <parseAbbrevTable+0x3ff>
  216b2c:	66 8b 85 86 fe ff ff 	mov    ax,WORD PTR [rbp-0x17a]
  216b33:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
  216b3a:	66 89 85 c4 fc ff ff 	mov    WORD PTR [rbp-0x33c],ax
  216b41:	e8 4a 51 ff ff       	call   20bc90 <__zig_return_error>
  216b46:	b9 28 00 00 00       	mov    ecx,0x28
  216b4b:	89 ca                	mov    edx,ecx
  216b4d:	48 8d bd 58 fe ff ff 	lea    rdi,[rbp-0x1a8]
  216b54:	66 8b 85 c4 fc ff ff 	mov    ax,WORD PTR [rbp-0x33c]
  216b5b:	66 89 85 58 fe ff ff 	mov    WORD PTR [rbp-0x1a8],ax
  216b62:	48 8b b5 18 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2e8]
  216b69:	48 89 bd b8 fc ff ff 	mov    QWORD PTR [rbp-0x348],rdi
  216b70:	48 89 f7             	mov    rdi,rsi
  216b73:	48 8b b5 b8 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x348]
  216b7a:	e8 21 dd 01 00       	call   2348a0 <memcpy>
  216b7f:	48 8b 85 08 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2f8]
  216b86:	48 81 c4 90 03 00 00 	add    rsp,0x390
  216b8d:	5d                   	pop    rbp
  216b8e:	c3                   	ret    
  216b8f:	48 8d 85 40 fd ff ff 	lea    rax,[rbp-0x2c0]
        const attrs = &result.items[result.len - 1].attrs;
  216b96:	48 8b 8d 50 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2b0]
  216b9d:	48 83 e9 01          	sub    rcx,0x1
  216ba1:	0f 92 c2             	setb   dl
  216ba4:	48 89 85 b0 fc ff ff 	mov    QWORD PTR [rbp-0x350],rax
  216bab:	48 89 8d a8 fc ff ff 	mov    QWORD PTR [rbp-0x358],rcx
  216bb2:	88 95 a7 fc ff ff    	mov    BYTE PTR [rbp-0x359],dl
  216bb8:	0f 82 21 02 00 00    	jb     216ddf <parseAbbrevTable+0x64f>
  216bbe:	e9 2c 02 00 00       	jmp    216def <parseAbbrevTable+0x65f>
        while (true) {
  216bc3:	eb 00                	jmp    216bc5 <parseAbbrevTable+0x435>
  216bc5:	48 8d bd 48 fe ff ff 	lea    rdi,[rbp-0x1b8]
            const attr_id = try readULeb128(in_stream);
  216bcc:	48 8b 95 60 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2a0]
  216bd3:	48 8b b5 10 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f0]
  216bda:	e8 91 04 00 00       	call   217070 <readULeb128>
  216bdf:	66 83 bd 48 fe ff ff 	cmp    WORD PTR [rbp-0x1b8],0x0
  216be6:	00 
  216be7:	74 63                	je     216c4c <parseAbbrevTable+0x4bc>
  216be9:	66 8b 85 48 fe ff ff 	mov    ax,WORD PTR [rbp-0x1b8]
  216bf0:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
  216bf7:	66 89 85 a4 fc ff ff 	mov    WORD PTR [rbp-0x35c],ax
  216bfe:	e8 8d 50 ff ff       	call   20bc90 <__zig_return_error>
  216c03:	b9 28 00 00 00       	mov    ecx,0x28
  216c08:	89 ca                	mov    edx,ecx
  216c0a:	48 8d bd 10 fe ff ff 	lea    rdi,[rbp-0x1f0]
  216c11:	66 8b 85 a4 fc ff ff 	mov    ax,WORD PTR [rbp-0x35c]
  216c18:	66 89 85 10 fe ff ff 	mov    WORD PTR [rbp-0x1f0],ax
  216c1f:	48 8b b5 18 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2e8]
  216c26:	48 89 bd 98 fc ff ff 	mov    QWORD PTR [rbp-0x368],rdi
  216c2d:	48 89 f7             	mov    rdi,rsi
  216c30:	48 8b b5 98 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x368]
  216c37:	e8 64 dc 01 00       	call   2348a0 <memcpy>
  216c3c:	48 8b 85 08 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2f8]
  216c43:	48 81 c4 90 03 00 00 	add    rsp,0x390
  216c4a:	5d                   	pop    rbp
  216c4b:	c3                   	ret    
  216c4c:	48 8d bd 00 fe ff ff 	lea    rdi,[rbp-0x200]
  216c53:	48 8b 85 50 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b0]
  216c5a:	48 89 85 28 fd ff ff 	mov    QWORD PTR [rbp-0x2d8],rax
            const form_id = try readULeb128(in_stream);
  216c61:	48 8b 95 60 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2a0]
  216c68:	48 8b b5 10 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2f0]
  216c6f:	e8 fc 03 00 00       	call   217070 <readULeb128>
  216c74:	66 83 bd 00 fe ff ff 	cmp    WORD PTR [rbp-0x200],0x0
  216c7b:	00 
  216c7c:	74 63                	je     216ce1 <parseAbbrevTable+0x551>
  216c7e:	66 8b 85 00 fe ff ff 	mov    ax,WORD PTR [rbp-0x200]
  216c85:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
  216c8c:	66 89 85 96 fc ff ff 	mov    WORD PTR [rbp-0x36a],ax
  216c93:	e8 f8 4f ff ff       	call   20bc90 <__zig_return_error>
  216c98:	b9 28 00 00 00       	mov    ecx,0x28
  216c9d:	89 ca                	mov    edx,ecx
  216c9f:	48 8d bd c8 fd ff ff 	lea    rdi,[rbp-0x238]
  216ca6:	66 8b 85 96 fc ff ff 	mov    ax,WORD PTR [rbp-0x36a]
  216cad:	66 89 85 c8 fd ff ff 	mov    WORD PTR [rbp-0x238],ax
  216cb4:	48 8b b5 18 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2e8]
  216cbb:	48 89 bd 88 fc ff ff 	mov    QWORD PTR [rbp-0x378],rdi
  216cc2:	48 89 f7             	mov    rdi,rsi
  216cc5:	48 8b b5 88 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x378]
  216ccc:	e8 cf db 01 00       	call   2348a0 <memcpy>
  216cd1:	48 8b 85 08 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2f8]
  216cd8:	48 81 c4 90 03 00 00 	add    rsp,0x390
  216cdf:	5d                   	pop    rbp
  216ce0:	c3                   	ret    
  216ce1:	48 8b 85 08 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1f8]
  216ce8:	48 89 85 20 fd ff ff 	mov    QWORD PTR [rbp-0x2e0],rax
            if (attr_id == 0 and form_id == 0) break;
  216cef:	48 83 bd 28 fd ff ff 	cmp    QWORD PTR [rbp-0x2d8],0x0
  216cf6:	00 
  216cf7:	0f 94 c1             	sete   cl
  216cfa:	f6 c1 01             	test   cl,0x1
  216cfd:	88 8d 87 fc ff ff    	mov    BYTE PTR [rbp-0x379],cl
  216d03:	75 02                	jne    216d07 <parseAbbrevTable+0x577>
  216d05:	eb 11                	jmp    216d18 <parseAbbrevTable+0x588>
  216d07:	48 83 bd 20 fd ff ff 	cmp    QWORD PTR [rbp-0x2e0],0x0
  216d0e:	00 
  216d0f:	0f 94 c0             	sete   al
  216d12:	88 85 87 fc ff ff    	mov    BYTE PTR [rbp-0x379],al
  216d18:	8a 85 87 fc ff ff    	mov    al,BYTE PTR [rbp-0x379]
  216d1e:	a8 01                	test   al,0x1
  216d20:	75 02                	jne    216d24 <parseAbbrevTable+0x594>
  216d22:	eb 05                	jmp    216d29 <parseAbbrevTable+0x599>
  216d24:	e9 b1 00 00 00       	jmp    216dda <parseAbbrevTable+0x64a>
  216d29:	eb 00                	jmp    216d2b <parseAbbrevTable+0x59b>
  216d2b:	48 8d 95 b8 fd ff ff 	lea    rdx,[rbp-0x248]
            try attrs.append(AbbrevAttr{
  216d32:	48 8b b5 30 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2d0]
                .attr_id = attr_id,
  216d39:	48 8b 85 28 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2d8]
                .form_id = form_id,
  216d40:	48 8b 8d 20 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2e0]
            try attrs.append(AbbrevAttr{
  216d47:	48 89 85 b8 fd ff ff 	mov    QWORD PTR [rbp-0x248],rax
  216d4e:	48 89 8d c0 fd ff ff 	mov    QWORD PTR [rbp-0x240],rcx
  216d55:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
  216d5c:	e8 cf 05 00 00       	call   217330 <AlignedArrayList(AbbrevAttr,8)_append>
  216d61:	66 89 85 b6 fd ff ff 	mov    WORD PTR [rbp-0x24a],ax
  216d68:	66 83 bd b6 fd ff ff 	cmp    WORD PTR [rbp-0x24a],0x0
  216d6f:	00 
  216d70:	74 63                	je     216dd5 <parseAbbrevTable+0x645>
  216d72:	66 8b 85 b6 fd ff ff 	mov    ax,WORD PTR [rbp-0x24a]
  216d79:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
  216d80:	66 89 85 84 fc ff ff 	mov    WORD PTR [rbp-0x37c],ax
  216d87:	e8 04 4f ff ff       	call   20bc90 <__zig_return_error>
  216d8c:	b9 28 00 00 00       	mov    ecx,0x28
  216d91:	89 ca                	mov    edx,ecx
  216d93:	48 8d bd 88 fd ff ff 	lea    rdi,[rbp-0x278]
  216d9a:	66 8b 85 84 fc ff ff 	mov    ax,WORD PTR [rbp-0x37c]
  216da1:	66 89 85 88 fd ff ff 	mov    WORD PTR [rbp-0x278],ax
  216da8:	48 8b b5 18 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2e8]
  216daf:	48 89 bd 78 fc ff ff 	mov    QWORD PTR [rbp-0x388],rdi
  216db6:	48 89 f7             	mov    rdi,rsi
  216db9:	48 8b b5 78 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x388]
  216dc0:	e8 db da 01 00       	call   2348a0 <memcpy>
  216dc5:	48 8b 85 08 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2f8]
  216dcc:	48 81 c4 90 03 00 00 	add    rsp,0x390
  216dd3:	5d                   	pop    rbp
  216dd4:	c3                   	ret    
        while (true) {
  216dd5:	e9 e9 fd ff ff       	jmp    216bc3 <parseAbbrevTable+0x433>
    while (true) {
  216dda:	e9 6b fa ff ff       	jmp    21684a <parseAbbrevTable+0xba>
  216ddf:	48 8d 3d e2 c3 02 00 	lea    rdi,[rip+0x2c3e2]        # 2431c8 <__unnamed_4>
  216de6:	31 c0                	xor    eax,eax
  216de8:	89 c6                	mov    esi,eax
        const attrs = &result.items[result.len - 1].attrs;
  216dea:	e8 11 48 ff ff       	call   20b600 <panic>
  216def:	48 8b 85 a8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x358]
  216df6:	48 8b 8d b0 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x350]
  216dfd:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  216e01:	72 10                	jb     216e13 <parseAbbrevTable+0x683>
  216e03:	48 8d 3d ce c5 02 00 	lea    rdi,[rip+0x2c5ce]        # 2433d8 <__unnamed_20>
  216e0a:	31 c0                	xor    eax,eax
  216e0c:	89 c6                	mov    esi,eax
  216e0e:	e8 ed 47 ff ff       	call   20b600 <panic>
  216e13:	48 8b 85 a8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x358]
  216e1a:	48 6b c8 38          	imul   rcx,rax,0x38
  216e1e:	48 8b 95 b0 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x350]
  216e25:	48 03 0a             	add    rcx,QWORD PTR [rdx]
  216e28:	48 83 c1 18          	add    rcx,0x18
  216e2c:	48 89 8d 30 fd ff ff 	mov    QWORD PTR [rbp-0x2d0],rcx
        while (true) {
  216e33:	e9 8b fd ff ff       	jmp    216bc3 <parseAbbrevTable+0x433>
  216e38:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  216e3f:	00 

0000000000216e40 <AlignedArrayList(AbbrevTableHeader,8)_append>:
        pub fn append(self: *Self, item: T) !void {
  216e40:	55                   	push   rbp
  216e41:	48 89 e5             	mov    rbp,rsp
  216e44:	48 83 ec 60          	sub    rsp,0x60
  216e48:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  216e4c:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
            const new_item_ptr = try self.addOne();
  216e50:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  216e54:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  216e58:	48 89 c7             	mov    rdi,rax
  216e5b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  216e5f:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
  216e63:	48 89 c6             	mov    rsi,rax
  216e66:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  216e6a:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  216e6e:	48 89 ca             	mov    rdx,rcx
  216e71:	e8 6a 00 00 00       	call   216ee0 <AlignedArrayList(AbbrevTableHeader,8)_addOne>
  216e76:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  216e7b:	74 1b                	je     216e98 <AlignedArrayList(AbbrevTableHeader,8)_append+0x58>
  216e7d:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  216e81:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  216e85:	66 89 45 b6          	mov    WORD PTR [rbp-0x4a],ax
  216e89:	e8 02 4e ff ff       	call   20bc90 <__zig_return_error>
  216e8e:	66 8b 45 b6          	mov    ax,WORD PTR [rbp-0x4a]
  216e92:	48 83 c4 60          	add    rsp,0x60
  216e96:	5d                   	pop    rbp
  216e97:	c3                   	ret    
  216e98:	31 c0                	xor    eax,eax
  216e9a:	66 89 c1             	mov    cx,ax
  216e9d:	b8 28 00 00 00       	mov    eax,0x28
  216ea2:	89 c2                	mov    edx,eax
  216ea4:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  216ea8:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
            new_item_ptr.* = item;
  216eac:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  216eb0:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  216eb4:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  216eb8:	48 89 f7             	mov    rdi,rsi
  216ebb:	48 8b 75 a8          	mov    rsi,QWORD PTR [rbp-0x58]
  216ebf:	66 89 4d a6          	mov    WORD PTR [rbp-0x5a],cx
  216ec3:	e8 d8 d9 01 00       	call   2348a0 <memcpy>
        pub fn append(self: *Self, item: T) !void {
  216ec8:	66 8b 45 a6          	mov    ax,WORD PTR [rbp-0x5a]
  216ecc:	48 83 c4 60          	add    rsp,0x60
  216ed0:	5d                   	pop    rbp
  216ed1:	c3                   	ret    
  216ed2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  216ed9:	1f 84 00 00 00 00 00 

0000000000216ee0 <AlignedArrayList(AbbrevTableHeader,8)_addOne>:
                if (better_capacity >= new_capacity) break;
            }
            self.items = try self.allocator.alignedRealloc(T, A, self.items, better_capacity);
        }

        pub fn addOne(self: *Self) !*T {
  216ee0:	55                   	push   rbp
  216ee1:	48 89 e5             	mov    rbp,rsp
  216ee4:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  216eeb:	48 89 f8             	mov    rax,rdi
  216eee:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            const new_length = self.len + 1;
  216ef2:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  216ef6:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  216efa:	48 83 c2 01          	add    rdx,0x1
  216efe:	0f 92 c1             	setb   cl
  216f01:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  216f05:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  216f09:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  216f0d:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  216f11:	88 4d 9f             	mov    BYTE PTR [rbp-0x61],cl
  216f14:	72 57                	jb     216f6d <AlignedArrayList(AbbrevTableHeader,8)_addOne+0x8d>
  216f16:	eb 65                	jmp    216f7d <AlignedArrayList(AbbrevTableHeader,8)_addOne+0x9d>
            try self.ensureCapacity(new_length);
  216f18:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  216f1c:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  216f20:	66 89 45 9c          	mov    WORD PTR [rbp-0x64],ax
  216f24:	e8 67 4d ff ff       	call   20bc90 <__zig_return_error>
  216f29:	66 8b 45 9c          	mov    ax,WORD PTR [rbp-0x64]
  216f2d:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  216f31:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  216f35:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  216f39:	48 89 39             	mov    QWORD PTR [rcx],rdi
  216f3c:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  216f40:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  216f44:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  216f48:	48 81 c4 80 00 00 00 	add    rsp,0x80
  216f4f:	5d                   	pop    rbp
  216f50:	c3                   	ret    
            const result = &self.items[self.len];
  216f51:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  216f55:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  216f59:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
  216f5d:	48 3b 48 08          	cmp    rcx,QWORD PTR [rax+0x8]
  216f61:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  216f65:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
  216f69:	72 4c                	jb     216fb7 <AlignedArrayList(AbbrevTableHeader,8)_addOne+0xd7>
  216f6b:	eb 3a                	jmp    216fa7 <AlignedArrayList(AbbrevTableHeader,8)_addOne+0xc7>
  216f6d:	48 8d 3d 54 c2 02 00 	lea    rdi,[rip+0x2c254]        # 2431c8 <__unnamed_4>
  216f74:	31 c0                	xor    eax,eax
  216f76:	89 c6                	mov    esi,eax
            const new_length = self.len + 1;
  216f78:	e8 83 46 ff ff       	call   20b600 <panic>
  216f7d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  216f81:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
            try self.ensureCapacity(new_length);
  216f85:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  216f89:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  216f8d:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  216f91:	e8 7a 19 00 00       	call   218910 <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity>
  216f96:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  216f9a:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  216f9f:	0f 85 73 ff ff ff    	jne    216f18 <AlignedArrayList(AbbrevTableHeader,8)_addOne+0x38>
  216fa5:	eb aa                	jmp    216f51 <AlignedArrayList(AbbrevTableHeader,8)_addOne+0x71>
  216fa7:	48 8d 3d 2a c4 02 00 	lea    rdi,[rip+0x2c42a]        # 2433d8 <__unnamed_20>
  216fae:	31 c0                	xor    eax,eax
  216fb0:	89 c6                	mov    esi,eax
            const result = &self.items[self.len];
  216fb2:	e8 49 46 ff ff       	call   20b600 <panic>
  216fb7:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  216fbb:	48 6b c8 28          	imul   rcx,rax,0x28
  216fbf:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
  216fc3:	48 03 0a             	add    rcx,QWORD PTR [rdx]
  216fc6:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
            self.len = new_length;
  216fca:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  216fce:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  216fd2:	48 89 71 10          	mov    QWORD PTR [rcx+0x10],rsi
            return result;
  216fd6:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  216fda:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  216fe0:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  216fe4:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  216fe8:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  216fec:	48 89 0e             	mov    QWORD PTR [rsi],rcx
  216fef:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  216ff3:	48 89 4e 08          	mov    QWORD PTR [rsi+0x8],rcx
  216ff7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  216ffb:	48 81 c4 80 00 00 00 	add    rsp,0x80
  217002:	5d                   	pop    rbp
  217003:	c3                   	ret    
  217004:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21700b:	00 00 00 00 00 

0000000000217010 <AlignedArrayList(AbbrevTableEntry,1)_init>:
        pub fn init(allocator: *Allocator) Self {
  217010:	55                   	push   rbp
  217011:	48 89 e5             	mov    rbp,rsp
  217014:	48 89 f8             	mov    rax,rdi
  217017:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
                .allocator = allocator,
  21701b:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
            return Self{
  21701f:	48 8b 0d 8a 92 fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe928a]        # 2002b0 <__unnamed_100>
  217026:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  21702a:	48 8b 0d 87 92 fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe9287]        # 2002b8 <__unnamed_100+0x8>
  217031:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  217035:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  21703c:	00 
  21703d:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  217041:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  217045:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  217048:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21704c:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  217050:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  217054:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  217058:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  21705c:	48 89 4f 18          	mov    QWORD PTR [rdi+0x18],rcx
  217060:	5d                   	pop    rbp
  217061:	c3                   	ret    
  217062:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  217069:	1f 84 00 00 00 00 00 

0000000000217070 <readULeb128>:
fn readULeb128(in_stream: var) !u64 {
  217070:	55                   	push   rbp
  217071:	48 89 e5             	mov    rbp,rsp
  217074:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  21707b:	48 89 f8             	mov    rax,rdi
  21707e:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
    var result: u64 = 0;
  217082:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
  217089:	00 
    var shift: usize = 0;
  21708a:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
  217091:	00 
  217092:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  217096:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
  21709a:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
    while (true) {
  21709e:	eb 00                	jmp    2170a0 <readULeb128+0x30>
  2170a0:	48 8d 7d f8          	lea    rdi,[rbp-0x8]
        const byte = try in_stream.readByte();
  2170a4:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  2170a8:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  2170ac:	e8 2f ca ff ff       	call   213ae0 <InStream(ReadError)_readByte>
  2170b1:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  2170b6:	74 39                	je     2170f1 <readULeb128+0x81>
  2170b8:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  2170bc:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  2170c0:	66 89 45 8e          	mov    WORD PTR [rbp-0x72],ax
  2170c4:	e8 c7 4b ff ff       	call   20bc90 <__zig_return_error>
  2170c9:	66 8b 45 8e          	mov    ax,WORD PTR [rbp-0x72]
  2170cd:	66 89 45 e0          	mov    WORD PTR [rbp-0x20],ax
  2170d1:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2170d5:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  2170d9:	48 89 39             	mov    QWORD PTR [rcx],rdi
  2170dc:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  2170e0:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  2170e4:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2170e8:	48 81 c4 90 00 00 00 	add    rsp,0x90
  2170ef:	5d                   	pop    rbp
  2170f0:	c3                   	ret    
  2170f1:	8a 45 fa             	mov    al,BYTE PTR [rbp-0x6]
  2170f4:	88 45 b7             	mov    BYTE PTR [rbp-0x49],al
        var operand: u64 = undefined;
  2170f7:	48 b9 aa aa aa aa aa 	movabs rcx,0xaaaaaaaaaaaaaaaa
  2170fe:	aa aa aa 
  217101:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
        if (@shlWithOverflow(u64, byte & 0b01111111, @intCast(u6, shift), &operand)) return error.InvalidDebugInfo;
  217105:	8a 45 b7             	mov    al,BYTE PTR [rbp-0x49]
  217108:	24 7f                	and    al,0x7f
  21710a:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  21710e:	88 ca                	mov    dl,cl
  217110:	89 ce                	mov    esi,ecx
  217112:	83 e6 3f             	and    esi,0x3f
  217115:	89 f7                	mov    edi,esi
  217117:	48 39 f9             	cmp    rcx,rdi
  21711a:	88 45 8d             	mov    BYTE PTR [rbp-0x73],al
  21711d:	88 55 8c             	mov    BYTE PTR [rbp-0x74],dl
  217120:	0f 84 94 00 00 00    	je     2171ba <readULeb128+0x14a>
  217126:	e9 c9 00 00 00       	jmp    2171f4 <readULeb128+0x184>
  21712b:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  21712f:	e8 5c 4b ff ff       	call   20bc90 <__zig_return_error>
  217134:	48 8b 3d 15 91 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe9115]        # 200250 <__unnamed_131>
  21713b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  21713f:	48 89 38             	mov    QWORD PTR [rax],rdi
  217142:	48 8b 3d 0f 91 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe910f]        # 200258 <__unnamed_131+0x8>
  217149:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  21714d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  217151:	48 81 c4 90 00 00 00 	add    rsp,0x90
  217158:	5d                   	pop    rbp
  217159:	c3                   	ret    
  21715a:	eb 00                	jmp    21715c <readULeb128+0xec>
        result |= operand;
  21715c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  217160:	48 0b 45 a8          	or     rax,QWORD PTR [rbp-0x58]
  217164:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
        if ((byte & 0b10000000) == 0) return result;
  217168:	8a 4d b7             	mov    cl,BYTE PTR [rbp-0x49]
  21716b:	80 e1 80             	and    cl,0x80
  21716e:	80 f9 00             	cmp    cl,0x0
  217171:	75 2e                	jne    2171a1 <readULeb128+0x131>
  217173:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  217177:	66 c7 45 d0 00 00    	mov    WORD PTR [rbp-0x30],0x0
  21717d:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  217181:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  217185:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  217189:	48 89 01             	mov    QWORD PTR [rcx],rax
  21718c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  217190:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  217194:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  217198:	48 81 c4 90 00 00 00 	add    rsp,0x90
  21719f:	5d                   	pop    rbp
  2171a0:	c3                   	ret    
        shift += 7;
  2171a1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  2171a5:	48 83 c0 07          	add    rax,0x7
  2171a9:	0f 92 c1             	setb   cl
  2171ac:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  2171b0:	88 8d 7f ff ff ff    	mov    BYTE PTR [rbp-0x81],cl
  2171b6:	72 4c                	jb     217204 <readULeb128+0x194>
  2171b8:	eb 5a                	jmp    217214 <readULeb128+0x1a4>
        if (@shlWithOverflow(u64, byte & 0b01111111, @intCast(u6, shift), &operand)) return error.InvalidDebugInfo;
  2171ba:	8a 45 8d             	mov    al,BYTE PTR [rbp-0x73]
  2171bd:	0f b6 c8             	movzx  ecx,al
  2171c0:	89 ca                	mov    edx,ecx
  2171c2:	40 8a 75 8c          	mov    sil,BYTE PTR [rbp-0x74]
  2171c6:	40 80 e6 3f          	and    sil,0x3f
  2171ca:	40 0f b6 ce          	movzx  ecx,sil
  2171ce:	89 cf                	mov    edi,ecx
  2171d0:	48 89 f9             	mov    rcx,rdi
  2171d3:	49 89 d0             	mov    r8,rdx
  2171d6:	49 d3 e0             	shl    r8,cl
  2171d9:	48 89 f9             	mov    rcx,rdi
  2171dc:	4c 89 c7             	mov    rdi,r8
  2171df:	48 d3 ef             	shr    rdi,cl
  2171e2:	4c 89 45 a8          	mov    QWORD PTR [rbp-0x58],r8
  2171e6:	48 39 fa             	cmp    rdx,rdi
  2171e9:	0f 85 3c ff ff ff    	jne    21712b <readULeb128+0xbb>
  2171ef:	e9 66 ff ff ff       	jmp    21715a <readULeb128+0xea>
  2171f4:	48 8d 3d 8d c2 02 00 	lea    rdi,[rip+0x2c28d]        # 243488 <__unnamed_22>
  2171fb:	31 c0                	xor    eax,eax
  2171fd:	89 c6                	mov    esi,eax
  2171ff:	e8 fc 43 ff ff       	call   20b600 <panic>
  217204:	48 8d 3d bd bf 02 00 	lea    rdi,[rip+0x2bfbd]        # 2431c8 <__unnamed_4>
  21720b:	31 c0                	xor    eax,eax
  21720d:	89 c6                	mov    esi,eax
        shift += 7;
  21720f:	e8 ec 43 ff ff       	call   20b600 <panic>
  217214:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  217218:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
    while (true) {
  21721c:	e9 7d fe ff ff       	jmp    21709e <readULeb128+0x2e>
  217221:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  217228:	0f 1f 84 00 00 00 00 
  21722f:	00 

0000000000217230 <AlignedArrayList(AbbrevAttr,8)_init>:
        pub fn init(allocator: *Allocator) Self {
  217230:	55                   	push   rbp
  217231:	48 89 e5             	mov    rbp,rsp
  217234:	48 89 f8             	mov    rax,rdi
  217237:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
                .allocator = allocator,
  21723b:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
            return Self{
  21723f:	48 8b 0d 6a 90 fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe906a]        # 2002b0 <__unnamed_100>
  217246:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  21724a:	48 8b 0d 67 90 fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe9067]        # 2002b8 <__unnamed_100+0x8>
  217251:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  217255:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  21725c:	00 
  21725d:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  217261:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  217265:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  217268:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21726c:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  217270:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  217274:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  217278:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  21727c:	48 89 4f 18          	mov    QWORD PTR [rdi+0x18],rcx
  217280:	5d                   	pop    rbp
  217281:	c3                   	ret    
  217282:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  217289:	1f 84 00 00 00 00 00 

0000000000217290 <AlignedArrayList(AbbrevTableEntry,1)_append>:
        pub fn append(self: *Self, item: T) !void {
  217290:	55                   	push   rbp
  217291:	48 89 e5             	mov    rbp,rsp
  217294:	48 83 ec 60          	sub    rsp,0x60
  217298:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  21729c:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
            const new_item_ptr = try self.addOne();
  2172a0:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  2172a4:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  2172a8:	48 89 c7             	mov    rdi,rax
  2172ab:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2172af:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
  2172b3:	48 89 c6             	mov    rsi,rax
  2172b6:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  2172ba:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  2172be:	48 89 ca             	mov    rdx,rcx
  2172c1:	e8 fa 00 00 00       	call   2173c0 <AlignedArrayList(AbbrevTableEntry,1)_addOne>
  2172c6:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  2172cb:	74 1b                	je     2172e8 <AlignedArrayList(AbbrevTableEntry,1)_append+0x58>
  2172cd:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  2172d1:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2172d5:	66 89 45 b6          	mov    WORD PTR [rbp-0x4a],ax
  2172d9:	e8 b2 49 ff ff       	call   20bc90 <__zig_return_error>
  2172de:	66 8b 45 b6          	mov    ax,WORD PTR [rbp-0x4a]
  2172e2:	48 83 c4 60          	add    rsp,0x60
  2172e6:	5d                   	pop    rbp
  2172e7:	c3                   	ret    
  2172e8:	31 c0                	xor    eax,eax
  2172ea:	66 89 c1             	mov    cx,ax
  2172ed:	b8 38 00 00 00       	mov    eax,0x38
  2172f2:	89 c2                	mov    edx,eax
  2172f4:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2172f8:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
            new_item_ptr.* = item;
  2172fc:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  217300:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  217304:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  217308:	48 89 f7             	mov    rdi,rsi
  21730b:	48 8b 75 a8          	mov    rsi,QWORD PTR [rbp-0x58]
  21730f:	66 89 4d a6          	mov    WORD PTR [rbp-0x5a],cx
  217313:	e8 88 d5 01 00       	call   2348a0 <memcpy>
        pub fn append(self: *Self, item: T) !void {
  217318:	66 8b 45 a6          	mov    ax,WORD PTR [rbp-0x5a]
  21731c:	48 83 c4 60          	add    rsp,0x60
  217320:	5d                   	pop    rbp
  217321:	c3                   	ret    
  217322:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  217329:	1f 84 00 00 00 00 00 

0000000000217330 <AlignedArrayList(AbbrevAttr,8)_append>:
  217330:	55                   	push   rbp
  217331:	48 89 e5             	mov    rbp,rsp
  217334:	48 83 ec 50          	sub    rsp,0x50
  217338:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  21733c:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
            const new_item_ptr = try self.addOne();
  217340:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  217344:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  217348:	48 89 c7             	mov    rdi,rax
  21734b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21734f:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
  217353:	48 89 c6             	mov    rsi,rax
  217356:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  21735a:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  21735e:	48 89 ca             	mov    rdx,rcx
  217361:	e8 ea 0a 00 00       	call   217e50 <AlignedArrayList(AbbrevAttr,8)_addOne>
  217366:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  21736b:	74 1b                	je     217388 <AlignedArrayList(AbbrevAttr,8)_append+0x58>
  21736d:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  217371:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  217375:	66 89 45 b6          	mov    WORD PTR [rbp-0x4a],ax
  217379:	e8 12 49 ff ff       	call   20bc90 <__zig_return_error>
  21737e:	66 8b 45 b6          	mov    ax,WORD PTR [rbp-0x4a]
  217382:	48 83 c4 50          	add    rsp,0x50
  217386:	5d                   	pop    rbp
  217387:	c3                   	ret    
  217388:	31 c0                	xor    eax,eax
  21738a:	66 89 c1             	mov    cx,ax
  21738d:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  217391:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            new_item_ptr.* = item;
  217395:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  217399:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  21739d:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  2173a0:	48 89 3a             	mov    QWORD PTR [rdx],rdi
  2173a3:	48 8b 7e 08          	mov    rdi,QWORD PTR [rsi+0x8]
  2173a7:	48 89 7a 08          	mov    QWORD PTR [rdx+0x8],rdi
        pub fn append(self: *Self, item: T) !void {
  2173ab:	66 89 c8             	mov    ax,cx
  2173ae:	48 83 c4 50          	add    rsp,0x50
  2173b2:	5d                   	pop    rbp
  2173b3:	c3                   	ret    
  2173b4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2173bb:	00 00 00 00 00 

00000000002173c0 <AlignedArrayList(AbbrevTableEntry,1)_addOne>:
        pub fn addOne(self: *Self) !*T {
  2173c0:	55                   	push   rbp
  2173c1:	48 89 e5             	mov    rbp,rsp
  2173c4:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  2173cb:	48 89 f8             	mov    rax,rdi
  2173ce:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            const new_length = self.len + 1;
  2173d2:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  2173d6:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  2173da:	48 83 c2 01          	add    rdx,0x1
  2173de:	0f 92 c1             	setb   cl
  2173e1:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  2173e5:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  2173e9:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  2173ed:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  2173f1:	88 4d 9f             	mov    BYTE PTR [rbp-0x61],cl
  2173f4:	72 57                	jb     21744d <AlignedArrayList(AbbrevTableEntry,1)_addOne+0x8d>
  2173f6:	eb 65                	jmp    21745d <AlignedArrayList(AbbrevTableEntry,1)_addOne+0x9d>
            try self.ensureCapacity(new_length);
  2173f8:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  2173fc:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  217400:	66 89 45 9c          	mov    WORD PTR [rbp-0x64],ax
  217404:	e8 87 48 ff ff       	call   20bc90 <__zig_return_error>
  217409:	66 8b 45 9c          	mov    ax,WORD PTR [rbp-0x64]
  21740d:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  217411:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  217415:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  217419:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21741c:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  217420:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  217424:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  217428:	48 81 c4 80 00 00 00 	add    rsp,0x80
  21742f:	5d                   	pop    rbp
  217430:	c3                   	ret    
            const result = &self.items[self.len];
  217431:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  217435:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  217439:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
  21743d:	48 3b 48 08          	cmp    rcx,QWORD PTR [rax+0x8]
  217441:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  217445:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
  217449:	72 4c                	jb     217497 <AlignedArrayList(AbbrevTableEntry,1)_addOne+0xd7>
  21744b:	eb 3a                	jmp    217487 <AlignedArrayList(AbbrevTableEntry,1)_addOne+0xc7>
  21744d:	48 8d 3d 74 bd 02 00 	lea    rdi,[rip+0x2bd74]        # 2431c8 <__unnamed_4>
  217454:	31 c0                	xor    eax,eax
  217456:	89 c6                	mov    esi,eax
            const new_length = self.len + 1;
  217458:	e8 a3 41 ff ff       	call   20b600 <panic>
  21745d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  217461:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
            try self.ensureCapacity(new_length);
  217465:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  217469:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  21746d:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  217471:	e8 7a 00 00 00       	call   2174f0 <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity>
  217476:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  21747a:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  21747f:	0f 85 73 ff ff ff    	jne    2173f8 <AlignedArrayList(AbbrevTableEntry,1)_addOne+0x38>
  217485:	eb aa                	jmp    217431 <AlignedArrayList(AbbrevTableEntry,1)_addOne+0x71>
  217487:	48 8d 3d 4a bf 02 00 	lea    rdi,[rip+0x2bf4a]        # 2433d8 <__unnamed_20>
  21748e:	31 c0                	xor    eax,eax
  217490:	89 c6                	mov    esi,eax
            const result = &self.items[self.len];
  217492:	e8 69 41 ff ff       	call   20b600 <panic>
  217497:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  21749b:	48 6b c8 38          	imul   rcx,rax,0x38
  21749f:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
  2174a3:	48 03 0a             	add    rcx,QWORD PTR [rdx]
  2174a6:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
            self.len = new_length;
  2174aa:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  2174ae:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  2174b2:	48 89 71 10          	mov    QWORD PTR [rcx+0x10],rsi
            return result;
  2174b6:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  2174ba:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  2174c0:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  2174c4:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  2174c8:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  2174cc:	48 89 0e             	mov    QWORD PTR [rsi],rcx
  2174cf:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  2174d3:	48 89 4e 08          	mov    QWORD PTR [rsi+0x8],rcx
  2174d7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  2174db:	48 81 c4 80 00 00 00 	add    rsp,0x80
  2174e2:	5d                   	pop    rbp
  2174e3:	c3                   	ret    
  2174e4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2174eb:	00 00 00 00 00 

00000000002174f0 <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity>:
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  2174f0:	55                   	push   rbp
  2174f1:	48 89 e5             	mov    rbp,rsp
  2174f4:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  2174fb:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  2174ff:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
            var better_capacity = self.items.len;
  217503:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  217507:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  21750b:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
            if (better_capacity >= new_capacity) return;
  21750f:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  217513:	48 3b 55 c0          	cmp    rdx,QWORD PTR [rbp-0x40]
  217517:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  21751b:	72 11                	jb     21752e <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0x3e>
  21751d:	31 c0                	xor    eax,eax
  21751f:	66 89 c1             	mov    cx,ax
  217522:	66 89 c8             	mov    ax,cx
  217525:	48 81 c4 90 00 00 00 	add    rsp,0x90
  21752c:	5d                   	pop    rbp
  21752d:	c3                   	ret    
            while (true) {
  21752e:	eb 00                	jmp    217530 <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0x40>
  217530:	eb 00                	jmp    217532 <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0x42>
  217532:	31 c0                	xor    eax,eax
  217534:	88 c1                	mov    cl,al
                better_capacity += better_capacity / 2 + 8;
  217536:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  21753a:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  21753e:	f6 c1 01             	test   cl,0x1
  217541:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  217545:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  217549:	0f 85 8e 00 00 00    	jne    2175dd <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0xed>
  21754f:	eb 72                	jmp    2175c3 <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0xd3>
                if (better_capacity >= new_capacity) break;
  217551:	eb 02                	jmp    217555 <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0x65>
            while (true) {
  217553:	eb db                	jmp    217530 <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0x40>
  217555:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
            self.items = try self.allocator.alignedRealloc(T, A, self.items, better_capacity);
  217559:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21755d:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  217561:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
  217565:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  217569:	4c 8b 45 b8          	mov    r8,QWORD PTR [rbp-0x48]
  21756d:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  217571:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  217575:	e8 d6 00 00 00       	call   217650 <Allocator_alignedRealloc>
  21757a:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  21757f:	74 1e                	je     21759f <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0xaf>
  217581:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  217585:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  217589:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  21758d:	e8 fe 46 ff ff       	call   20bc90 <__zig_return_error>
  217592:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  217596:	48 81 c4 90 00 00 00 	add    rsp,0x90
  21759d:	5d                   	pop    rbp
  21759e:	c3                   	ret    
  21759f:	31 c0                	xor    eax,eax
  2175a1:	66 89 c1             	mov    cx,ax
  2175a4:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  2175a8:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  2175ac:	48 89 16             	mov    QWORD PTR [rsi],rdx
  2175af:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  2175b3:	48 89 56 08          	mov    QWORD PTR [rsi+0x8],rdx
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  2175b7:	66 89 c8             	mov    ax,cx
  2175ba:	48 81 c4 90 00 00 00 	add    rsp,0x90
  2175c1:	5d                   	pop    rbp
  2175c2:	c3                   	ret    
                better_capacity += better_capacity / 2 + 8;
  2175c3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  2175c7:	48 c1 e8 01          	shr    rax,0x1
  2175cb:	48 83 c0 08          	add    rax,0x8
  2175cf:	0f 92 c1             	setb   cl
  2175d2:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  2175d6:	88 4d 87             	mov    BYTE PTR [rbp-0x79],cl
  2175d9:	72 12                	jb     2175ed <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0xfd>
  2175db:	eb 20                	jmp    2175fd <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0x10d>
  2175dd:	48 8d 3d 5c bc 02 00 	lea    rdi,[rip+0x2bc5c]        # 243240 <__unnamed_7>
  2175e4:	31 c0                	xor    eax,eax
  2175e6:	89 c6                	mov    esi,eax
  2175e8:	e8 13 40 ff ff       	call   20b600 <panic>
  2175ed:	48 8d 3d d4 bb 02 00 	lea    rdi,[rip+0x2bbd4]        # 2431c8 <__unnamed_4>
  2175f4:	31 c0                	xor    eax,eax
  2175f6:	89 c6                	mov    esi,eax
  2175f8:	e8 03 40 ff ff       	call   20b600 <panic>
  2175fd:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  217601:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  217605:	48 01 c8             	add    rax,rcx
  217608:	0f 92 c2             	setb   dl
  21760b:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  217612:	88 95 77 ff ff ff    	mov    BYTE PTR [rbp-0x89],dl
  217618:	72 02                	jb     21761c <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0x12c>
  21761a:	eb 10                	jmp    21762c <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0x13c>
  21761c:	48 8d 3d a5 bb 02 00 	lea    rdi,[rip+0x2bba5]        # 2431c8 <__unnamed_4>
  217623:	31 c0                	xor    eax,eax
  217625:	89 c6                	mov    esi,eax
  217627:	e8 d4 3f ff ff       	call   20b600 <panic>
  21762c:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  217633:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                if (better_capacity >= new_capacity) break;
  217637:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  21763b:	48 3b 4d c0          	cmp    rcx,QWORD PTR [rbp-0x40]
  21763f:	0f 83 0c ff ff ff    	jae    217551 <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0x61>
  217645:	e9 09 ff ff ff       	jmp    217553 <AlignedArrayList(AbbrevTableEntry,1)_ensureCapacity+0x63>
  21764a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000217650 <Allocator_alignedRealloc>:
    pub fn alignedRealloc(self: *Allocator, comptime T: type, comptime alignment: u29, old_mem: []align(alignment) T, n: usize) ![]align(alignment) T {
  217650:	55                   	push   rbp
  217651:	48 89 e5             	mov    rbp,rsp
  217654:	53                   	push   rbx
  217655:	48 81 ec 88 01 00 00 	sub    rsp,0x188
  21765c:	48 89 f8             	mov    rax,rdi
  21765f:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
  217666:	4c 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],r8
        if (old_mem.len == 0) {
  21766d:	48 83 79 08 00       	cmp    QWORD PTR [rcx+0x8],0x0
  217672:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  217679:	48 89 b5 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rsi
  217680:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
  217687:	48 89 bd b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rdi
  21768e:	75 64                	jne    2176f4 <Allocator_alignedRealloc+0xa4>
  217690:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
            return self.alignedAlloc(T, alignment, n);
  217694:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  21769b:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  2176a2:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  2176a9:	e8 02 04 00 00       	call   217ab0 <Allocator_alignedAlloc.39>
  2176ae:	66 83 7d e0 00       	cmp    WORD PTR [rbp-0x20],0x0
  2176b3:	74 0e                	je     2176c3 <Allocator_alignedRealloc+0x73>
  2176b5:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  2176bc:	e8 cf 45 ff ff       	call   20bc90 <__zig_return_error>
  2176c1:	eb 02                	jmp    2176c5 <Allocator_alignedRealloc+0x75>
  2176c3:	eb 00                	jmp    2176c5 <Allocator_alignedRealloc+0x75>
  2176c5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2176c9:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  2176d0:	48 89 01             	mov    QWORD PTR [rcx],rax
  2176d3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2176d7:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2176db:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2176df:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  2176e3:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  2176ea:	48 81 c4 88 01 00 00 	add    rsp,0x188
  2176f1:	5b                   	pop    rbx
  2176f2:	5d                   	pop    rbp
  2176f3:	c3                   	ret    
        if (old_mem.len == 0) {
  2176f4:	eb 00                	jmp    2176f6 <Allocator_alignedRealloc+0xa6>
        if (n == 0) {
  2176f6:	48 83 bd 10 ff ff ff 	cmp    QWORD PTR [rbp-0xf0],0x0
  2176fd:	00 
  2176fe:	75 4b                	jne    21774b <Allocator_alignedRealloc+0xfb>
            self.free(old_mem);
  217700:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
  217707:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  21770e:	e8 8d 06 00 00       	call   217da0 <Allocator_free.40>
            return ([*]align(alignment) T)(undefined)[0..0];
  217713:	48 8b 35 7e 17 ff ff 	mov    rsi,QWORD PTR [rip+0xffffffffffff177e]        # 208e98 <__unnamed_88>
  21771a:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  217721:	48 89 37             	mov    QWORD PTR [rdi],rsi
  217724:	48 8b 35 75 17 ff ff 	mov    rsi,QWORD PTR [rip+0xffffffffffff1775]        # 208ea0 <__unnamed_88+0x8>
  21772b:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  21772f:	48 8b 35 72 17 ff ff 	mov    rsi,QWORD PTR [rip+0xffffffffffff1772]        # 208ea8 <__unnamed_88+0x10>
  217736:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  21773a:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  217741:	48 81 c4 88 01 00 00 	add    rsp,0x188
  217748:	5b                   	pop    rbx
  217749:	5d                   	pop    rbp
  21774a:	c3                   	ret    
        if (n == 0) {
  21774b:	eb 00                	jmp    21774d <Allocator_alignedRealloc+0xfd>
  21774d:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  217751:	b8 38 00 00 00       	mov    eax,0x38
  217756:	89 c2                	mov    edx,eax
        const old_byte_slice = @sliceToBytes(old_mem);
  217758:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  21775f:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  217762:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  217766:	48 6b 71 08 38       	imul   rsi,QWORD PTR [rcx+0x8],0x38
  21776b:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  21776f:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  217773:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
  21777a:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  21777e:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  217785:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  21778c:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  217793:	e8 18 dc ff ff       	call   2153b0 <mul>
  217798:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  21779d:	74 44                	je     2177e3 <Allocator_alignedRealloc+0x193>
  21779f:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  2177a6:	e8 e5 44 ff ff       	call   20bc90 <__zig_return_error>
  2177ab:	48 8b 3d fe 16 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff16fe]        # 208eb0 <__unnamed_89>
  2177b2:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  2177b9:	48 89 38             	mov    QWORD PTR [rax],rdi
  2177bc:	48 8b 3d f5 16 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff16f5]        # 208eb8 <__unnamed_89+0x8>
  2177c3:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  2177c7:	48 8b 3d f2 16 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff16f2]        # 208ec0 <__unnamed_89+0x10>
  2177ce:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  2177d2:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  2177d9:	48 81 c4 88 01 00 00 	add    rsp,0x188
  2177e0:	5b                   	pop    rbx
  2177e1:	5d                   	pop    rbp
  2177e2:	c3                   	ret    
  2177e3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2177e7:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  2177ee:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  2177f2:	48 8d 8d 00 ff ff ff 	lea    rcx,[rbp-0x100]
  2177f9:	41 b9 01 00 00 00    	mov    r9d,0x1
  2177ff:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  217806:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
        const byte_slice = try self.reallocFn(self, old_byte_slice, byte_count, alignment);
  21780d:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  217814:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  217818:	48 8b b5 18 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe8]
  21781f:	4c 8b 85 f8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x108]
  217826:	4c 8b 95 c8 fe ff ff 	mov    r10,QWORD PTR [rbp-0x138]
  21782d:	48 89 b5 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rsi
  217834:	4c 89 d6             	mov    rsi,r10
  217837:	4c 8b 9d a8 fe ff ff 	mov    r11,QWORD PTR [rbp-0x158]
  21783e:	48 89 95 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdx
  217845:	4c 89 da             	mov    rdx,r11
  217848:	48 8b 9d a0 fe ff ff 	mov    rbx,QWORD PTR [rbp-0x160]
  21784f:	ff d3                	call   rbx
  217851:	66 83 7d 98 00       	cmp    WORD PTR [rbp-0x68],0x0
  217856:	74 5d                	je     2178b5 <Allocator_alignedRealloc+0x265>
  217858:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  21785c:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  217863:	66 89 85 9e fe ff ff 	mov    WORD PTR [rbp-0x162],ax
  21786a:	e8 21 44 ff ff       	call   20bc90 <__zig_return_error>
  21786f:	66 8b 85 9e fe ff ff 	mov    ax,WORD PTR [rbp-0x162]
  217876:	66 89 85 68 ff ff ff 	mov    WORD PTR [rbp-0x98],ax
  21787d:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  217884:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  21788b:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21788e:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  217895:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  217899:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  2178a0:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  2178a4:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  2178ab:	48 81 c4 88 01 00 00 	add    rsp,0x188
  2178b2:	5b                   	pop    rbx
  2178b3:	5d                   	pop    rbp
  2178b4:	c3                   	ret    
  2178b5:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2178b9:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  2178c0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  2178c4:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
        assert(byte_slice.len == byte_count);
  2178cb:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  2178d2:	48 3b 85 f8 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x108]
  2178d9:	0f 94 c1             	sete   cl
  2178dc:	0f b6 f9             	movzx  edi,cl
  2178df:	e8 1c 37 ff ff       	call   20b000 <assert>
        if (n > old_mem.len) {
  2178e4:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  2178eb:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  2178f2:	48 3b 42 08          	cmp    rax,QWORD PTR [rdx+0x8]
  2178f6:	76 78                	jbe    217970 <Allocator_alignedRealloc+0x320>
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  2178f8:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  2178ff:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  217906:	48 39 c8             	cmp    rax,rcx
  217909:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  217910:	48 89 8d 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rcx
  217917:	0f 86 9d 00 00 00    	jbe    2179ba <Allocator_alignedRealloc+0x36a>
  21791d:	e9 88 00 00 00       	jmp    2179aa <Allocator_alignedRealloc+0x35a>
  217922:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  217929:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
  217930:	48 39 c8             	cmp    rax,rcx
  217933:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  21793a:	73 32                	jae    21796e <Allocator_alignedRealloc+0x31e>
  21793c:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  217943:	48 03 8d 58 ff ff ff 	add    rcx,QWORD PTR [rbp-0xa8]
  21794a:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
                byte.* = undefined;
  217951:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  217958:	88 01                	mov    BYTE PTR [rcx],al
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  21795a:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  217961:	48 83 c1 01          	add    rcx,0x1
  217965:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
  21796c:	eb b4                	jmp    217922 <Allocator_alignedRealloc+0x2d2>
        if (n > old_mem.len) {
  21796e:	eb 02                	jmp    217972 <Allocator_alignedRealloc+0x322>
  217970:	eb 00                	jmp    217972 <Allocator_alignedRealloc+0x322>
  217972:	b8 38 00 00 00       	mov    eax,0x38
  217977:	89 c1                	mov    ecx,eax
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  217979:	48 8b 95 e8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x118]
  217980:	48 89 95 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdx
  217987:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  21798e:	48 89 d0             	mov    rax,rdx
  217991:	31 f6                	xor    esi,esi
  217993:	48 89 95 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rdx
  21799a:	89 f2                	mov    edx,esi
  21799c:	48 f7 f1             	div    rcx
  21799f:	48 83 fa 00          	cmp    rdx,0x0
  2179a3:	74 7b                	je     217a20 <Allocator_alignedRealloc+0x3d0>
  2179a5:	e9 ed 00 00 00       	jmp    217a97 <Allocator_alignedRealloc+0x447>
  2179aa:	48 8d 3d 27 ba 02 00 	lea    rdi,[rip+0x2ba27]        # 2433d8 <__unnamed_20>
  2179b1:	31 c0                	xor    eax,eax
  2179b3:	89 c6                	mov    esi,eax
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  2179b5:	e8 46 3c ff ff       	call   20b600 <panic>
  2179ba:	be aa 00 00 00       	mov    esi,0xaa
  2179bf:	b8 08 00 00 00       	mov    eax,0x8
  2179c4:	89 c2                	mov    edx,eax
  2179c6:	48 8d 8d e0 fe ff ff 	lea    rcx,[rbp-0x120]
  2179cd:	48 8b bd 90 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x170]
  2179d4:	48 03 bd e8 fe ff ff 	add    rdi,QWORD PTR [rbp-0x118]
  2179db:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
  2179e2:	48 8b bd 88 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x178]
  2179e9:	4c 8b 85 90 fe ff ff 	mov    r8,QWORD PTR [rbp-0x170]
  2179f0:	4c 29 c7             	sub    rdi,r8
  2179f3:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  2179fa:	48 89 cf             	mov    rdi,rcx
  2179fd:	e8 4e ce 01 00       	call   234850 <memset>
  217a02:	48 c7 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],0x0
  217a09:	00 00 00 00 
  217a0d:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  217a14:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  217a1b:	e9 02 ff ff ff       	jmp    217922 <Allocator_alignedRealloc+0x2d2>
  217a20:	b8 38 00 00 00       	mov    eax,0x38
  217a25:	89 c1                	mov    ecx,eax
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  217a27:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  217a2e:	31 d2                	xor    edx,edx
  217a30:	48 f7 f1             	div    rcx
  217a33:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  217a3a:	66 c7 85 20 ff ff ff 	mov    WORD PTR [rbp-0xe0],0x0
  217a41:	00 00 
  217a43:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  217a4a:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  217a51:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  217a58:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  217a5f:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  217a66:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  217a6d:	48 89 01             	mov    QWORD PTR [rcx],rax
  217a70:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  217a77:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  217a7b:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  217a82:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  217a86:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  217a8d:	48 81 c4 88 01 00 00 	add    rsp,0x188
  217a94:	5b                   	pop    rbx
  217a95:	5d                   	pop    rbp
  217a96:	c3                   	ret    
  217a97:	48 8d 3d 2a bb 02 00 	lea    rdi,[rip+0x2bb2a]        # 2435c8 <__unnamed_76>
  217a9e:	31 c0                	xor    eax,eax
  217aa0:	89 c6                	mov    esi,eax
  217aa2:	e8 59 3b ff ff       	call   20b600 <panic>
  217aa7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  217aae:	00 00 

0000000000217ab0 <Allocator_alignedAlloc.39>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  217ab0:	55                   	push   rbp
  217ab1:	48 89 e5             	mov    rbp,rsp
  217ab4:	48 81 ec 20 01 00 00 	sub    rsp,0x120
  217abb:	48 89 f8             	mov    rax,rdi
  217abe:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  217ac5:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  217acc:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  217ad3:	00 
  217ad4:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  217adb:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  217ae2:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  217ae9:	75 37                	jne    217b22 <Allocator_alignedAlloc.39+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  217aeb:	48 8b 05 d6 13 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff13d6]        # 208ec8 <__unnamed_90>
  217af2:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  217af9:	48 89 01             	mov    QWORD PTR [rcx],rax
  217afc:	48 8b 05 cd 13 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff13cd]        # 208ed0 <__unnamed_90+0x8>
  217b03:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  217b07:	48 8b 05 ca 13 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff13ca]        # 208ed8 <__unnamed_90+0x10>
  217b0e:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  217b12:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  217b19:	48 81 c4 20 01 00 00 	add    rsp,0x120
  217b20:	5d                   	pop    rbp
  217b21:	c3                   	ret    
        if (n == 0) {
  217b22:	eb 00                	jmp    217b24 <Allocator_alignedAlloc.39+0x74>
  217b24:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  217b28:	b8 38 00 00 00       	mov    eax,0x38
  217b2d:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  217b2f:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  217b36:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  217b3d:	e8 6e d8 ff ff       	call   2153b0 <mul>
  217b42:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  217b47:	74 43                	je     217b8c <Allocator_alignedAlloc.39+0xdc>
  217b49:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  217b50:	e8 3b 41 ff ff       	call   20bc90 <__zig_return_error>
  217b55:	48 8b 3d 84 13 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff1384]        # 208ee0 <__unnamed_91>
  217b5c:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  217b63:	48 89 38             	mov    QWORD PTR [rax],rdi
  217b66:	48 8b 3d 7b 13 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff137b]        # 208ee8 <__unnamed_91+0x8>
  217b6d:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  217b71:	48 8b 3d 78 13 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff1378]        # 208ef0 <__unnamed_91+0x10>
  217b78:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  217b7c:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  217b83:	48 81 c4 20 01 00 00 	add    rsp,0x120
  217b8a:	5d                   	pop    rbp
  217b8b:	c3                   	ret    
  217b8c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  217b90:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  217b97:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  217b9b:	41 b8 01 00 00 00    	mov    r8d,0x1
  217ba1:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  217ba8:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  217baf:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  217bb6:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  217bb9:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  217bc0:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  217bc7:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  217bce:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  217bd5:	4c 89 ce             	mov    rsi,r9
  217bd8:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  217bdf:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  217be6:	4c 89 d1             	mov    rcx,r10
  217be9:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  217bf0:	41 ff d3             	call   r11
  217bf3:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  217bf8:	74 50                	je     217c4a <Allocator_alignedAlloc.39+0x19a>
  217bfa:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  217bfe:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  217c05:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  217c0c:	e8 7f 40 ff ff       	call   20bc90 <__zig_return_error>
  217c11:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  217c18:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  217c1c:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  217c20:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  217c27:	48 89 39             	mov    QWORD PTR [rcx],rdi
  217c2a:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  217c2e:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  217c32:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  217c36:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  217c3a:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  217c41:	48 81 c4 20 01 00 00 	add    rsp,0x120
  217c48:	5d                   	pop    rbp
  217c49:	c3                   	ret    
  217c4a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  217c4e:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  217c55:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  217c59:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  217c60:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  217c67:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  217c6e:	0f 94 c1             	sete   cl
  217c71:	0f b6 f9             	movzx  edi,cl
  217c74:	e8 87 33 ff ff       	call   20b000 <assert>
  217c79:	be aa 00 00 00       	mov    esi,0xaa
  217c7e:	bf 08 00 00 00       	mov    edi,0x8
  217c83:	89 fa                	mov    edx,edi
  217c85:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  217c8c:	48 89 c7             	mov    rdi,rax
  217c8f:	e8 bc cb 01 00       	call   234850 <memset>
  217c94:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  217c9b:	00 00 00 00 
  217c9f:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  217ca6:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  217cad:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  217cb4:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  217cbb:	48 39 c8             	cmp    rax,rcx
  217cbe:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  217cc5:	73 32                	jae    217cf9 <Allocator_alignedAlloc.39+0x249>
  217cc7:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  217cce:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  217cd5:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  217cdc:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  217ce3:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  217ce5:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  217cec:	48 83 c1 01          	add    rcx,0x1
  217cf0:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  217cf7:	eb b4                	jmp    217cad <Allocator_alignedAlloc.39+0x1fd>
  217cf9:	b8 38 00 00 00       	mov    eax,0x38
  217cfe:	89 c1                	mov    ecx,eax
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  217d00:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
  217d07:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
  217d0b:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
  217d12:	48 89 d0             	mov    rax,rdx
  217d15:	31 f6                	xor    esi,esi
  217d17:	48 89 95 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdx
  217d1e:	89 f2                	mov    edx,esi
  217d20:	48 f7 f1             	div    rcx
  217d23:	48 83 fa 00          	cmp    rdx,0x0
  217d27:	75 67                	jne    217d90 <Allocator_alignedAlloc.39+0x2e0>
  217d29:	b8 38 00 00 00       	mov    eax,0x38
  217d2e:	89 c1                	mov    ecx,eax
  217d30:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  217d37:	31 d2                	xor    edx,edx
  217d39:	48 f7 f1             	div    rcx
  217d3c:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  217d40:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  217d47:	00 00 
  217d49:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  217d4d:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  217d54:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  217d58:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  217d5c:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  217d63:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  217d6a:	48 89 01             	mov    QWORD PTR [rcx],rax
  217d6d:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  217d74:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  217d78:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  217d7c:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  217d80:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  217d87:	48 81 c4 20 01 00 00 	add    rsp,0x120
  217d8e:	5d                   	pop    rbp
  217d8f:	c3                   	ret    
  217d90:	48 8d 3d 31 b8 02 00 	lea    rdi,[rip+0x2b831]        # 2435c8 <__unnamed_76>
  217d97:	31 c0                	xor    eax,eax
  217d99:	89 c6                	mov    esi,eax
  217d9b:	e8 60 38 ff ff       	call   20b600 <panic>

0000000000217da0 <Allocator_free.40>:
    pub fn free(self: *Allocator, memory: var) void {
  217da0:	55                   	push   rbp
  217da1:	48 89 e5             	mov    rbp,rsp
  217da4:	48 83 ec 60          	sub    rsp,0x60
  217da8:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
        const bytes = @sliceToBytes(memory);
  217dac:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  217daf:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  217db3:	48 6b 76 08 38       	imul   rsi,QWORD PTR [rsi+0x8],0x38
  217db8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  217dbc:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  217dc0:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  217dc4:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  217dc8:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        if (bytes.len == 0) return;
  217dcc:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
  217dd1:	75 06                	jne    217dd9 <Allocator_free.40+0x39>
  217dd3:	48 83 c4 60          	add    rsp,0x60
  217dd7:	5d                   	pop    rbp
  217dd8:	c3                   	ret    
  217dd9:	31 c0                	xor    eax,eax
  217ddb:	89 c1                	mov    ecx,eax
        const non_const_ptr = @intToPtr([*]u8, @ptrToInt(bytes.ptr));
  217ddd:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  217de1:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
        self.freeFn(self, non_const_ptr[0..bytes.len]);
  217de5:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  217de9:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  217ded:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  217df1:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  217df5:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
  217df9:	48 39 f1             	cmp    rcx,rsi
  217dfc:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
  217e00:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
  217e04:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  217e08:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  217e0c:	76 10                	jbe    217e1e <Allocator_free.40+0x7e>
  217e0e:	48 8d 3d c3 b5 02 00 	lea    rdi,[rip+0x2b5c3]        # 2433d8 <__unnamed_20>
  217e15:	31 c0                	xor    eax,eax
  217e17:	89 c6                	mov    esi,eax
  217e19:	e8 e2 37 ff ff       	call   20b600 <panic>
  217e1e:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
  217e22:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  217e26:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  217e2a:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  217e2e:	48 83 e9 00          	sub    rcx,0x0
  217e32:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  217e36:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  217e3a:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  217e3e:	ff d1                	call   rcx
    pub fn free(self: *Allocator, memory: var) void {
  217e40:	48 83 c4 60          	add    rsp,0x60
  217e44:	5d                   	pop    rbp
  217e45:	c3                   	ret    
  217e46:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  217e4d:	00 00 00 

0000000000217e50 <AlignedArrayList(AbbrevAttr,8)_addOne>:
        pub fn addOne(self: *Self) !*T {
  217e50:	55                   	push   rbp
  217e51:	48 89 e5             	mov    rbp,rsp
  217e54:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  217e5b:	48 89 f8             	mov    rax,rdi
  217e5e:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            const new_length = self.len + 1;
  217e62:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  217e66:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  217e6a:	48 83 c2 01          	add    rdx,0x1
  217e6e:	0f 92 c1             	setb   cl
  217e71:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  217e75:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  217e79:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  217e7d:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  217e81:	88 4d 9f             	mov    BYTE PTR [rbp-0x61],cl
  217e84:	72 57                	jb     217edd <AlignedArrayList(AbbrevAttr,8)_addOne+0x8d>
  217e86:	eb 65                	jmp    217eed <AlignedArrayList(AbbrevAttr,8)_addOne+0x9d>
            try self.ensureCapacity(new_length);
  217e88:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  217e8c:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  217e90:	66 89 45 9c          	mov    WORD PTR [rbp-0x64],ax
  217e94:	e8 f7 3d ff ff       	call   20bc90 <__zig_return_error>
  217e99:	66 8b 45 9c          	mov    ax,WORD PTR [rbp-0x64]
  217e9d:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  217ea1:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  217ea5:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  217ea9:	48 89 39             	mov    QWORD PTR [rcx],rdi
  217eac:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  217eb0:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  217eb4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  217eb8:	48 81 c4 80 00 00 00 	add    rsp,0x80
  217ebf:	5d                   	pop    rbp
  217ec0:	c3                   	ret    
            const result = &self.items[self.len];
  217ec1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  217ec5:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  217ec9:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
  217ecd:	48 3b 48 08          	cmp    rcx,QWORD PTR [rax+0x8]
  217ed1:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  217ed5:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
  217ed9:	72 4c                	jb     217f27 <AlignedArrayList(AbbrevAttr,8)_addOne+0xd7>
  217edb:	eb 3a                	jmp    217f17 <AlignedArrayList(AbbrevAttr,8)_addOne+0xc7>
  217edd:	48 8d 3d e4 b2 02 00 	lea    rdi,[rip+0x2b2e4]        # 2431c8 <__unnamed_4>
  217ee4:	31 c0                	xor    eax,eax
  217ee6:	89 c6                	mov    esi,eax
            const new_length = self.len + 1;
  217ee8:	e8 13 37 ff ff       	call   20b600 <panic>
  217eed:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  217ef1:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
            try self.ensureCapacity(new_length);
  217ef5:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  217ef9:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  217efd:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  217f01:	e8 7a 00 00 00       	call   217f80 <AlignedArrayList(AbbrevAttr,8)_ensureCapacity>
  217f06:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  217f0a:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  217f0f:	0f 85 73 ff ff ff    	jne    217e88 <AlignedArrayList(AbbrevAttr,8)_addOne+0x38>
  217f15:	eb aa                	jmp    217ec1 <AlignedArrayList(AbbrevAttr,8)_addOne+0x71>
  217f17:	48 8d 3d ba b4 02 00 	lea    rdi,[rip+0x2b4ba]        # 2433d8 <__unnamed_20>
  217f1e:	31 c0                	xor    eax,eax
  217f20:	89 c6                	mov    esi,eax
            const result = &self.items[self.len];
  217f22:	e8 d9 36 ff ff       	call   20b600 <panic>
  217f27:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  217f2b:	48 c1 e0 04          	shl    rax,0x4
  217f2f:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  217f33:	48 03 01             	add    rax,QWORD PTR [rcx]
  217f36:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
            self.len = new_length;
  217f3a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  217f3e:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  217f42:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
            return result;
  217f46:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  217f4a:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  217f50:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  217f54:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  217f58:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  217f5c:	48 89 02             	mov    QWORD PTR [rdx],rax
  217f5f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  217f63:	48 89 42 08          	mov    QWORD PTR [rdx+0x8],rax
  217f67:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  217f6b:	48 81 c4 80 00 00 00 	add    rsp,0x80
  217f72:	5d                   	pop    rbp
  217f73:	c3                   	ret    
  217f74:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  217f7b:	00 00 00 00 00 

0000000000217f80 <AlignedArrayList(AbbrevAttr,8)_ensureCapacity>:
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  217f80:	55                   	push   rbp
  217f81:	48 89 e5             	mov    rbp,rsp
  217f84:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  217f8b:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  217f8f:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
            var better_capacity = self.items.len;
  217f93:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  217f97:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  217f9b:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
            if (better_capacity >= new_capacity) return;
  217f9f:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  217fa3:	48 3b 55 c0          	cmp    rdx,QWORD PTR [rbp-0x40]
  217fa7:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  217fab:	72 11                	jb     217fbe <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0x3e>
  217fad:	31 c0                	xor    eax,eax
  217faf:	66 89 c1             	mov    cx,ax
  217fb2:	66 89 c8             	mov    ax,cx
  217fb5:	48 81 c4 90 00 00 00 	add    rsp,0x90
  217fbc:	5d                   	pop    rbp
  217fbd:	c3                   	ret    
            while (true) {
  217fbe:	eb 00                	jmp    217fc0 <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0x40>
  217fc0:	eb 00                	jmp    217fc2 <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0x42>
  217fc2:	31 c0                	xor    eax,eax
  217fc4:	88 c1                	mov    cl,al
                better_capacity += better_capacity / 2 + 8;
  217fc6:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  217fca:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  217fce:	f6 c1 01             	test   cl,0x1
  217fd1:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  217fd5:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  217fd9:	0f 85 8e 00 00 00    	jne    21806d <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0xed>
  217fdf:	eb 72                	jmp    218053 <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0xd3>
                if (better_capacity >= new_capacity) break;
  217fe1:	eb 02                	jmp    217fe5 <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0x65>
            while (true) {
  217fe3:	eb db                	jmp    217fc0 <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0x40>
  217fe5:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
            self.items = try self.allocator.alignedRealloc(T, A, self.items, better_capacity);
  217fe9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  217fed:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  217ff1:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
  217ff5:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  217ff9:	4c 8b 45 b8          	mov    r8,QWORD PTR [rbp-0x48]
  217ffd:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  218001:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  218005:	e8 d6 00 00 00       	call   2180e0 <Allocator_alignedRealloc.41>
  21800a:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  21800f:	74 1e                	je     21802f <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0xaf>
  218011:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  218015:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  218019:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  21801d:	e8 6e 3c ff ff       	call   20bc90 <__zig_return_error>
  218022:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  218026:	48 81 c4 90 00 00 00 	add    rsp,0x90
  21802d:	5d                   	pop    rbp
  21802e:	c3                   	ret    
  21802f:	31 c0                	xor    eax,eax
  218031:	66 89 c1             	mov    cx,ax
  218034:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  218038:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  21803c:	48 89 16             	mov    QWORD PTR [rsi],rdx
  21803f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  218043:	48 89 56 08          	mov    QWORD PTR [rsi+0x8],rdx
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  218047:	66 89 c8             	mov    ax,cx
  21804a:	48 81 c4 90 00 00 00 	add    rsp,0x90
  218051:	5d                   	pop    rbp
  218052:	c3                   	ret    
                better_capacity += better_capacity / 2 + 8;
  218053:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  218057:	48 c1 e8 01          	shr    rax,0x1
  21805b:	48 83 c0 08          	add    rax,0x8
  21805f:	0f 92 c1             	setb   cl
  218062:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  218066:	88 4d 87             	mov    BYTE PTR [rbp-0x79],cl
  218069:	72 12                	jb     21807d <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0xfd>
  21806b:	eb 20                	jmp    21808d <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0x10d>
  21806d:	48 8d 3d cc b1 02 00 	lea    rdi,[rip+0x2b1cc]        # 243240 <__unnamed_7>
  218074:	31 c0                	xor    eax,eax
  218076:	89 c6                	mov    esi,eax
  218078:	e8 83 35 ff ff       	call   20b600 <panic>
  21807d:	48 8d 3d 44 b1 02 00 	lea    rdi,[rip+0x2b144]        # 2431c8 <__unnamed_4>
  218084:	31 c0                	xor    eax,eax
  218086:	89 c6                	mov    esi,eax
  218088:	e8 73 35 ff ff       	call   20b600 <panic>
  21808d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  218091:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  218095:	48 01 c8             	add    rax,rcx
  218098:	0f 92 c2             	setb   dl
  21809b:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  2180a2:	88 95 77 ff ff ff    	mov    BYTE PTR [rbp-0x89],dl
  2180a8:	72 02                	jb     2180ac <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0x12c>
  2180aa:	eb 10                	jmp    2180bc <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0x13c>
  2180ac:	48 8d 3d 15 b1 02 00 	lea    rdi,[rip+0x2b115]        # 2431c8 <__unnamed_4>
  2180b3:	31 c0                	xor    eax,eax
  2180b5:	89 c6                	mov    esi,eax
  2180b7:	e8 44 35 ff ff       	call   20b600 <panic>
  2180bc:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  2180c3:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                if (better_capacity >= new_capacity) break;
  2180c7:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  2180cb:	48 3b 4d c0          	cmp    rcx,QWORD PTR [rbp-0x40]
  2180cf:	0f 83 0c ff ff ff    	jae    217fe1 <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0x61>
  2180d5:	e9 09 ff ff ff       	jmp    217fe3 <AlignedArrayList(AbbrevAttr,8)_ensureCapacity+0x63>
  2180da:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000002180e0 <Allocator_alignedRealloc.41>:
    pub fn alignedRealloc(self: *Allocator, comptime T: type, comptime alignment: u29, old_mem: []align(alignment) T, n: usize) ![]align(alignment) T {
  2180e0:	55                   	push   rbp
  2180e1:	48 89 e5             	mov    rbp,rsp
  2180e4:	53                   	push   rbx
  2180e5:	48 81 ec 88 01 00 00 	sub    rsp,0x188
  2180ec:	48 89 f8             	mov    rax,rdi
  2180ef:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
  2180f6:	4c 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],r8
        if (old_mem.len == 0) {
  2180fd:	48 83 79 08 00       	cmp    QWORD PTR [rcx+0x8],0x0
  218102:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  218109:	48 89 b5 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rsi
  218110:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
  218117:	48 89 bd b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rdi
  21811e:	75 64                	jne    218184 <Allocator_alignedRealloc.41+0xa4>
  218120:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
            return self.alignedAlloc(T, alignment, n);
  218124:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  21812b:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  218132:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  218139:	e8 12 04 00 00       	call   218550 <Allocator_alignedAlloc.42>
  21813e:	66 83 7d e0 00       	cmp    WORD PTR [rbp-0x20],0x0
  218143:	74 0e                	je     218153 <Allocator_alignedRealloc.41+0x73>
  218145:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  21814c:	e8 3f 3b ff ff       	call   20bc90 <__zig_return_error>
  218151:	eb 02                	jmp    218155 <Allocator_alignedRealloc.41+0x75>
  218153:	eb 00                	jmp    218155 <Allocator_alignedRealloc.41+0x75>
  218155:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  218159:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  218160:	48 89 01             	mov    QWORD PTR [rcx],rax
  218163:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  218167:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21816b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21816f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  218173:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21817a:	48 81 c4 88 01 00 00 	add    rsp,0x188
  218181:	5b                   	pop    rbx
  218182:	5d                   	pop    rbp
  218183:	c3                   	ret    
        if (old_mem.len == 0) {
  218184:	eb 00                	jmp    218186 <Allocator_alignedRealloc.41+0xa6>
        if (n == 0) {
  218186:	48 83 bd 10 ff ff ff 	cmp    QWORD PTR [rbp-0xf0],0x0
  21818d:	00 
  21818e:	75 4b                	jne    2181db <Allocator_alignedRealloc.41+0xfb>
            self.free(old_mem);
  218190:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
  218197:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  21819e:	e8 bd 06 00 00       	call   218860 <Allocator_free.43>
            return ([*]align(alignment) T)(undefined)[0..0];
  2181a3:	48 8b 35 4e 0d ff ff 	mov    rsi,QWORD PTR [rip+0xffffffffffff0d4e]        # 208ef8 <__unnamed_92>
  2181aa:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  2181b1:	48 89 37             	mov    QWORD PTR [rdi],rsi
  2181b4:	48 8b 35 45 0d ff ff 	mov    rsi,QWORD PTR [rip+0xffffffffffff0d45]        # 208f00 <__unnamed_92+0x8>
  2181bb:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  2181bf:	48 8b 35 42 0d ff ff 	mov    rsi,QWORD PTR [rip+0xffffffffffff0d42]        # 208f08 <__unnamed_92+0x10>
  2181c6:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  2181ca:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  2181d1:	48 81 c4 88 01 00 00 	add    rsp,0x188
  2181d8:	5b                   	pop    rbx
  2181d9:	5d                   	pop    rbp
  2181da:	c3                   	ret    
        if (n == 0) {
  2181db:	eb 00                	jmp    2181dd <Allocator_alignedRealloc.41+0xfd>
  2181dd:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  2181e1:	b8 10 00 00 00       	mov    eax,0x10
  2181e6:	89 c2                	mov    edx,eax
        const old_byte_slice = @sliceToBytes(old_mem);
  2181e8:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  2181ef:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  2181f2:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  2181f6:	48 8b 71 08          	mov    rsi,QWORD PTR [rcx+0x8]
  2181fa:	48 c1 e6 04          	shl    rsi,0x4
  2181fe:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  218202:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  218206:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
  21820d:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  218211:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  218218:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  21821f:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  218226:	e8 85 d1 ff ff       	call   2153b0 <mul>
  21822b:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  218230:	74 44                	je     218276 <Allocator_alignedRealloc.41+0x196>
  218232:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  218239:	e8 52 3a ff ff       	call   20bc90 <__zig_return_error>
  21823e:	48 8b 3d cb 0c ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff0ccb]        # 208f10 <__unnamed_93>
  218245:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  21824c:	48 89 38             	mov    QWORD PTR [rax],rdi
  21824f:	48 8b 3d c2 0c ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff0cc2]        # 208f18 <__unnamed_93+0x8>
  218256:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  21825a:	48 8b 3d bf 0c ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff0cbf]        # 208f20 <__unnamed_93+0x10>
  218261:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  218265:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21826c:	48 81 c4 88 01 00 00 	add    rsp,0x188
  218273:	5b                   	pop    rbx
  218274:	5d                   	pop    rbp
  218275:	c3                   	ret    
  218276:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21827a:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  218281:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  218285:	48 8d 8d 00 ff ff ff 	lea    rcx,[rbp-0x100]
  21828c:	41 b9 08 00 00 00    	mov    r9d,0x8
  218292:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  218299:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
        const byte_slice = try self.reallocFn(self, old_byte_slice, byte_count, alignment);
  2182a0:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  2182a7:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  2182ab:	48 8b b5 18 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe8]
  2182b2:	4c 8b 85 f8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x108]
  2182b9:	4c 8b 95 c8 fe ff ff 	mov    r10,QWORD PTR [rbp-0x138]
  2182c0:	48 89 b5 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rsi
  2182c7:	4c 89 d6             	mov    rsi,r10
  2182ca:	4c 8b 9d a8 fe ff ff 	mov    r11,QWORD PTR [rbp-0x158]
  2182d1:	48 89 95 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdx
  2182d8:	4c 89 da             	mov    rdx,r11
  2182db:	48 8b 9d a0 fe ff ff 	mov    rbx,QWORD PTR [rbp-0x160]
  2182e2:	ff d3                	call   rbx
  2182e4:	66 83 7d 98 00       	cmp    WORD PTR [rbp-0x68],0x0
  2182e9:	74 5d                	je     218348 <Allocator_alignedRealloc.41+0x268>
  2182eb:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  2182ef:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  2182f6:	66 89 85 9e fe ff ff 	mov    WORD PTR [rbp-0x162],ax
  2182fd:	e8 8e 39 ff ff       	call   20bc90 <__zig_return_error>
  218302:	66 8b 85 9e fe ff ff 	mov    ax,WORD PTR [rbp-0x162]
  218309:	66 89 85 68 ff ff ff 	mov    WORD PTR [rbp-0x98],ax
  218310:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  218317:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  21831e:	48 89 39             	mov    QWORD PTR [rcx],rdi
  218321:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  218328:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21832c:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  218333:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  218337:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21833e:	48 81 c4 88 01 00 00 	add    rsp,0x188
  218345:	5b                   	pop    rbx
  218346:	5d                   	pop    rbp
  218347:	c3                   	ret    
  218348:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  21834c:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  218353:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  218357:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
        assert(byte_slice.len == byte_count);
  21835e:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  218365:	48 3b 85 f8 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x108]
  21836c:	0f 94 c1             	sete   cl
  21836f:	0f b6 f9             	movzx  edi,cl
  218372:	e8 89 2c ff ff       	call   20b000 <assert>
        if (n > old_mem.len) {
  218377:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  21837e:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  218385:	48 3b 42 08          	cmp    rax,QWORD PTR [rdx+0x8]
  218389:	76 71                	jbe    2183fc <Allocator_alignedRealloc.41+0x31c>
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  21838b:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  218392:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  218399:	48 39 c8             	cmp    rax,rcx
  21839c:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  2183a3:	48 89 8d 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rcx
  2183aa:	76 78                	jbe    218424 <Allocator_alignedRealloc.41+0x344>
  2183ac:	eb 66                	jmp    218414 <Allocator_alignedRealloc.41+0x334>
  2183ae:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  2183b5:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
  2183bc:	48 39 c8             	cmp    rax,rcx
  2183bf:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  2183c6:	73 32                	jae    2183fa <Allocator_alignedRealloc.41+0x31a>
  2183c8:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  2183cf:	48 03 8d 58 ff ff ff 	add    rcx,QWORD PTR [rbp-0xa8]
  2183d6:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
                byte.* = undefined;
  2183dd:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  2183e4:	88 01                	mov    BYTE PTR [rcx],al
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  2183e6:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  2183ed:	48 83 c1 01          	add    rcx,0x1
  2183f1:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
  2183f8:	eb b4                	jmp    2183ae <Allocator_alignedRealloc.41+0x2ce>
        if (n > old_mem.len) {
  2183fa:	eb 02                	jmp    2183fe <Allocator_alignedRealloc.41+0x31e>
  2183fc:	eb 00                	jmp    2183fe <Allocator_alignedRealloc.41+0x31e>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  2183fe:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  218405:	48 83 e0 07          	and    rax,0x7
  218409:	48 83 f8 00          	cmp    rax,0x0
  21840d:	74 7b                	je     21848a <Allocator_alignedRealloc.41+0x3aa>
  21840f:	e9 a1 00 00 00       	jmp    2184b5 <Allocator_alignedRealloc.41+0x3d5>
  218414:	48 8d 3d bd af 02 00 	lea    rdi,[rip+0x2afbd]        # 2433d8 <__unnamed_20>
  21841b:	31 c0                	xor    eax,eax
  21841d:	89 c6                	mov    esi,eax
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  21841f:	e8 dc 31 ff ff       	call   20b600 <panic>
  218424:	be aa 00 00 00       	mov    esi,0xaa
  218429:	b8 08 00 00 00       	mov    eax,0x8
  21842e:	89 c2                	mov    edx,eax
  218430:	48 8d 8d e0 fe ff ff 	lea    rcx,[rbp-0x120]
  218437:	48 8b bd 90 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x170]
  21843e:	48 03 bd e8 fe ff ff 	add    rdi,QWORD PTR [rbp-0x118]
  218445:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
  21844c:	48 8b bd 88 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x178]
  218453:	4c 8b 85 90 fe ff ff 	mov    r8,QWORD PTR [rbp-0x170]
  21845a:	4c 29 c7             	sub    rdi,r8
  21845d:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  218464:	48 89 cf             	mov    rdi,rcx
  218467:	e8 e4 c3 01 00       	call   234850 <memset>
  21846c:	48 c7 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],0x0
  218473:	00 00 00 00 
  218477:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  21847e:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  218485:	e9 24 ff ff ff       	jmp    2183ae <Allocator_alignedRealloc.41+0x2ce>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  21848a:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  218491:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
  218498:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  21849f:	48 89 c1             	mov    rcx,rax
  2184a2:	48 83 e1 0f          	and    rcx,0xf
  2184a6:	48 83 f9 00          	cmp    rcx,0x0
  2184aa:	48 89 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rax
  2184b1:	74 12                	je     2184c5 <Allocator_alignedRealloc.41+0x3e5>
  2184b3:	eb 7f                	jmp    218534 <Allocator_alignedRealloc.41+0x454>
  2184b5:	48 8d 3d f4 b0 02 00 	lea    rdi,[rip+0x2b0f4]        # 2435b0 <__unnamed_75>
  2184bc:	31 c0                	xor    eax,eax
  2184be:	89 c6                	mov    esi,eax
  2184c0:	e8 3b 31 ff ff       	call   20b600 <panic>
  2184c5:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  2184cc:	48 c1 e8 04          	shr    rax,0x4
  2184d0:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  2184d7:	66 c7 85 20 ff ff ff 	mov    WORD PTR [rbp-0xe0],0x0
  2184de:	00 00 
  2184e0:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  2184e7:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  2184ee:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  2184f5:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  2184fc:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  218503:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  21850a:	48 89 01             	mov    QWORD PTR [rcx],rax
  21850d:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  218514:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  218518:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21851f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  218523:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21852a:	48 81 c4 88 01 00 00 	add    rsp,0x188
  218531:	5b                   	pop    rbx
  218532:	5d                   	pop    rbp
  218533:	c3                   	ret    
  218534:	48 8d 3d 8d b0 02 00 	lea    rdi,[rip+0x2b08d]        # 2435c8 <__unnamed_76>
  21853b:	31 c0                	xor    eax,eax
  21853d:	89 c6                	mov    esi,eax
  21853f:	e8 bc 30 ff ff       	call   20b600 <panic>
  218544:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21854b:	00 00 00 00 00 

0000000000218550 <Allocator_alignedAlloc.42>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  218550:	55                   	push   rbp
  218551:	48 89 e5             	mov    rbp,rsp
  218554:	48 81 ec 20 01 00 00 	sub    rsp,0x120
  21855b:	48 89 f8             	mov    rax,rdi
  21855e:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  218565:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  21856c:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  218573:	00 
  218574:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  21857b:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  218582:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  218589:	75 37                	jne    2185c2 <Allocator_alignedAlloc.42+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  21858b:	48 8b 05 96 09 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff0996]        # 208f28 <__unnamed_94>
  218592:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  218599:	48 89 01             	mov    QWORD PTR [rcx],rax
  21859c:	48 8b 05 8d 09 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff098d]        # 208f30 <__unnamed_94+0x8>
  2185a3:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2185a7:	48 8b 05 8a 09 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff098a]        # 208f38 <__unnamed_94+0x10>
  2185ae:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  2185b2:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  2185b9:	48 81 c4 20 01 00 00 	add    rsp,0x120
  2185c0:	5d                   	pop    rbp
  2185c1:	c3                   	ret    
        if (n == 0) {
  2185c2:	eb 00                	jmp    2185c4 <Allocator_alignedAlloc.42+0x74>
  2185c4:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  2185c8:	b8 10 00 00 00       	mov    eax,0x10
  2185cd:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  2185cf:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  2185d6:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  2185dd:	e8 ce cd ff ff       	call   2153b0 <mul>
  2185e2:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  2185e7:	74 43                	je     21862c <Allocator_alignedAlloc.42+0xdc>
  2185e9:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  2185f0:	e8 9b 36 ff ff       	call   20bc90 <__zig_return_error>
  2185f5:	48 8b 3d 44 09 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff0944]        # 208f40 <__unnamed_95>
  2185fc:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  218603:	48 89 38             	mov    QWORD PTR [rax],rdi
  218606:	48 8b 3d 3b 09 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff093b]        # 208f48 <__unnamed_95+0x8>
  21860d:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  218611:	48 8b 3d 38 09 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff0938]        # 208f50 <__unnamed_95+0x10>
  218618:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  21861c:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  218623:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21862a:	5d                   	pop    rbp
  21862b:	c3                   	ret    
  21862c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  218630:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  218637:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  21863b:	41 b8 08 00 00 00    	mov    r8d,0x8
  218641:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  218648:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  21864f:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  218656:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  218659:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  218660:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  218667:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  21866e:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  218675:	4c 89 ce             	mov    rsi,r9
  218678:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  21867f:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  218686:	4c 89 d1             	mov    rcx,r10
  218689:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  218690:	41 ff d3             	call   r11
  218693:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  218698:	74 50                	je     2186ea <Allocator_alignedAlloc.42+0x19a>
  21869a:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  21869e:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  2186a5:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  2186ac:	e8 df 35 ff ff       	call   20bc90 <__zig_return_error>
  2186b1:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  2186b8:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  2186bc:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  2186c0:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  2186c7:	48 89 39             	mov    QWORD PTR [rcx],rdi
  2186ca:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  2186ce:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  2186d2:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  2186d6:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  2186da:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  2186e1:	48 81 c4 20 01 00 00 	add    rsp,0x120
  2186e8:	5d                   	pop    rbp
  2186e9:	c3                   	ret    
  2186ea:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2186ee:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  2186f5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2186f9:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  218700:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  218707:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  21870e:	0f 94 c1             	sete   cl
  218711:	0f b6 f9             	movzx  edi,cl
  218714:	e8 e7 28 ff ff       	call   20b000 <assert>
  218719:	be aa 00 00 00       	mov    esi,0xaa
  21871e:	bf 08 00 00 00       	mov    edi,0x8
  218723:	89 fa                	mov    edx,edi
  218725:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  21872c:	48 89 c7             	mov    rdi,rax
  21872f:	e8 1c c1 01 00       	call   234850 <memset>
  218734:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  21873b:	00 00 00 00 
  21873f:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  218746:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  21874d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  218754:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  21875b:	48 39 c8             	cmp    rax,rcx
  21875e:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  218765:	73 32                	jae    218799 <Allocator_alignedAlloc.42+0x249>
  218767:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21876e:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  218775:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  21877c:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  218783:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  218785:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21878c:	48 83 c1 01          	add    rcx,0x1
  218790:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  218797:	eb b4                	jmp    21874d <Allocator_alignedAlloc.42+0x1fd>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  218799:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  2187a0:	48 83 e0 07          	and    rax,0x7
  2187a4:	48 83 f8 00          	cmp    rax,0x0
  2187a8:	75 28                	jne    2187d2 <Allocator_alignedAlloc.42+0x282>
  2187aa:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  2187b1:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  2187b5:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  2187bc:	48 89 c1             	mov    rcx,rax
  2187bf:	48 83 e1 0f          	and    rcx,0xf
  2187c3:	48 83 f9 00          	cmp    rcx,0x0
  2187c7:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  2187ce:	74 12                	je     2187e2 <Allocator_alignedAlloc.42+0x292>
  2187d0:	eb 6f                	jmp    218841 <Allocator_alignedAlloc.42+0x2f1>
  2187d2:	48 8d 3d d7 ad 02 00 	lea    rdi,[rip+0x2add7]        # 2435b0 <__unnamed_75>
  2187d9:	31 c0                	xor    eax,eax
  2187db:	89 c6                	mov    esi,eax
  2187dd:	e8 1e 2e ff ff       	call   20b600 <panic>
  2187e2:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  2187e9:	48 c1 e8 04          	shr    rax,0x4
  2187ed:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  2187f1:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  2187f8:	00 00 
  2187fa:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  2187fe:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  218805:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  218809:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  21880d:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  218814:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21881b:	48 89 01             	mov    QWORD PTR [rcx],rax
  21881e:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  218825:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  218829:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  21882d:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  218831:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  218838:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21883f:	5d                   	pop    rbp
  218840:	c3                   	ret    
  218841:	48 8d 3d 80 ad 02 00 	lea    rdi,[rip+0x2ad80]        # 2435c8 <__unnamed_76>
  218848:	31 c0                	xor    eax,eax
  21884a:	89 c6                	mov    esi,eax
  21884c:	e8 af 2d ff ff       	call   20b600 <panic>
  218851:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  218858:	0f 1f 84 00 00 00 00 
  21885f:	00 

0000000000218860 <Allocator_free.43>:
    pub fn free(self: *Allocator, memory: var) void {
  218860:	55                   	push   rbp
  218861:	48 89 e5             	mov    rbp,rsp
  218864:	48 83 ec 60          	sub    rsp,0x60
  218868:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
        const bytes = @sliceToBytes(memory);
  21886c:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  21886f:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  218873:	48 8b 76 08          	mov    rsi,QWORD PTR [rsi+0x8]
  218877:	48 c1 e6 04          	shl    rsi,0x4
  21887b:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21887f:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  218883:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  218887:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21888b:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        if (bytes.len == 0) return;
  21888f:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
  218894:	75 06                	jne    21889c <Allocator_free.43+0x3c>
  218896:	48 83 c4 60          	add    rsp,0x60
  21889a:	5d                   	pop    rbp
  21889b:	c3                   	ret    
  21889c:	31 c0                	xor    eax,eax
  21889e:	89 c1                	mov    ecx,eax
        const non_const_ptr = @intToPtr([*]u8, @ptrToInt(bytes.ptr));
  2188a0:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  2188a4:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
        self.freeFn(self, non_const_ptr[0..bytes.len]);
  2188a8:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  2188ac:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  2188b0:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  2188b4:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  2188b8:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
  2188bc:	48 39 f1             	cmp    rcx,rsi
  2188bf:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
  2188c3:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
  2188c7:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  2188cb:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  2188cf:	76 10                	jbe    2188e1 <Allocator_free.43+0x81>
  2188d1:	48 8d 3d 00 ab 02 00 	lea    rdi,[rip+0x2ab00]        # 2433d8 <__unnamed_20>
  2188d8:	31 c0                	xor    eax,eax
  2188da:	89 c6                	mov    esi,eax
  2188dc:	e8 1f 2d ff ff       	call   20b600 <panic>
  2188e1:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
  2188e5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  2188e9:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  2188ed:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  2188f1:	48 83 e9 00          	sub    rcx,0x0
  2188f5:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  2188f9:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  2188fd:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  218901:	ff d1                	call   rcx
    pub fn free(self: *Allocator, memory: var) void {
  218903:	48 83 c4 60          	add    rsp,0x60
  218907:	5d                   	pop    rbp
  218908:	c3                   	ret    
  218909:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000218910 <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity>:
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  218910:	55                   	push   rbp
  218911:	48 89 e5             	mov    rbp,rsp
  218914:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  21891b:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  21891f:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
            var better_capacity = self.items.len;
  218923:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  218927:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  21892b:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
            if (better_capacity >= new_capacity) return;
  21892f:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  218933:	48 3b 55 c0          	cmp    rdx,QWORD PTR [rbp-0x40]
  218937:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  21893b:	72 11                	jb     21894e <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0x3e>
  21893d:	31 c0                	xor    eax,eax
  21893f:	66 89 c1             	mov    cx,ax
  218942:	66 89 c8             	mov    ax,cx
  218945:	48 81 c4 90 00 00 00 	add    rsp,0x90
  21894c:	5d                   	pop    rbp
  21894d:	c3                   	ret    
            while (true) {
  21894e:	eb 00                	jmp    218950 <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0x40>
  218950:	eb 00                	jmp    218952 <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0x42>
  218952:	31 c0                	xor    eax,eax
  218954:	88 c1                	mov    cl,al
                better_capacity += better_capacity / 2 + 8;
  218956:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  21895a:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  21895e:	f6 c1 01             	test   cl,0x1
  218961:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  218965:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  218969:	0f 85 8e 00 00 00    	jne    2189fd <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0xed>
  21896f:	eb 72                	jmp    2189e3 <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0xd3>
                if (better_capacity >= new_capacity) break;
  218971:	eb 02                	jmp    218975 <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0x65>
            while (true) {
  218973:	eb db                	jmp    218950 <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0x40>
  218975:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
            self.items = try self.allocator.alignedRealloc(T, A, self.items, better_capacity);
  218979:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21897d:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  218981:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
  218985:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  218989:	4c 8b 45 b8          	mov    r8,QWORD PTR [rbp-0x48]
  21898d:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  218991:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  218995:	e8 d6 00 00 00       	call   218a70 <Allocator_alignedRealloc.44>
  21899a:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  21899f:	74 1e                	je     2189bf <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0xaf>
  2189a1:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  2189a5:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  2189a9:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  2189ad:	e8 de 32 ff ff       	call   20bc90 <__zig_return_error>
  2189b2:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  2189b6:	48 81 c4 90 00 00 00 	add    rsp,0x90
  2189bd:	5d                   	pop    rbp
  2189be:	c3                   	ret    
  2189bf:	31 c0                	xor    eax,eax
  2189c1:	66 89 c1             	mov    cx,ax
  2189c4:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  2189c8:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  2189cc:	48 89 16             	mov    QWORD PTR [rsi],rdx
  2189cf:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  2189d3:	48 89 56 08          	mov    QWORD PTR [rsi+0x8],rdx
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  2189d7:	66 89 c8             	mov    ax,cx
  2189da:	48 81 c4 90 00 00 00 	add    rsp,0x90
  2189e1:	5d                   	pop    rbp
  2189e2:	c3                   	ret    
                better_capacity += better_capacity / 2 + 8;
  2189e3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  2189e7:	48 c1 e8 01          	shr    rax,0x1
  2189eb:	48 83 c0 08          	add    rax,0x8
  2189ef:	0f 92 c1             	setb   cl
  2189f2:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  2189f6:	88 4d 87             	mov    BYTE PTR [rbp-0x79],cl
  2189f9:	72 12                	jb     218a0d <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0xfd>
  2189fb:	eb 20                	jmp    218a1d <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0x10d>
  2189fd:	48 8d 3d 3c a8 02 00 	lea    rdi,[rip+0x2a83c]        # 243240 <__unnamed_7>
  218a04:	31 c0                	xor    eax,eax
  218a06:	89 c6                	mov    esi,eax
  218a08:	e8 f3 2b ff ff       	call   20b600 <panic>
  218a0d:	48 8d 3d b4 a7 02 00 	lea    rdi,[rip+0x2a7b4]        # 2431c8 <__unnamed_4>
  218a14:	31 c0                	xor    eax,eax
  218a16:	89 c6                	mov    esi,eax
  218a18:	e8 e3 2b ff ff       	call   20b600 <panic>
  218a1d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  218a21:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  218a25:	48 01 c8             	add    rax,rcx
  218a28:	0f 92 c2             	setb   dl
  218a2b:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  218a32:	88 95 77 ff ff ff    	mov    BYTE PTR [rbp-0x89],dl
  218a38:	72 02                	jb     218a3c <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0x12c>
  218a3a:	eb 10                	jmp    218a4c <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0x13c>
  218a3c:	48 8d 3d 85 a7 02 00 	lea    rdi,[rip+0x2a785]        # 2431c8 <__unnamed_4>
  218a43:	31 c0                	xor    eax,eax
  218a45:	89 c6                	mov    esi,eax
  218a47:	e8 b4 2b ff ff       	call   20b600 <panic>
  218a4c:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  218a53:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                if (better_capacity >= new_capacity) break;
  218a57:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  218a5b:	48 3b 4d c0          	cmp    rcx,QWORD PTR [rbp-0x40]
  218a5f:	0f 83 0c ff ff ff    	jae    218971 <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0x61>
  218a65:	e9 09 ff ff ff       	jmp    218973 <AlignedArrayList(AbbrevTableHeader,8)_ensureCapacity+0x63>
  218a6a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000218a70 <Allocator_alignedRealloc.44>:
    pub fn alignedRealloc(self: *Allocator, comptime T: type, comptime alignment: u29, old_mem: []align(alignment) T, n: usize) ![]align(alignment) T {
  218a70:	55                   	push   rbp
  218a71:	48 89 e5             	mov    rbp,rsp
  218a74:	53                   	push   rbx
  218a75:	48 81 ec 88 01 00 00 	sub    rsp,0x188
  218a7c:	48 89 f8             	mov    rax,rdi
  218a7f:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
  218a86:	4c 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],r8
        if (old_mem.len == 0) {
  218a8d:	48 83 79 08 00       	cmp    QWORD PTR [rcx+0x8],0x0
  218a92:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  218a99:	48 89 b5 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rsi
  218aa0:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
  218aa7:	48 89 bd b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rdi
  218aae:	75 64                	jne    218b14 <Allocator_alignedRealloc.44+0xa4>
  218ab0:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
            return self.alignedAlloc(T, alignment, n);
  218ab4:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  218abb:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  218ac2:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  218ac9:	e8 22 04 00 00       	call   218ef0 <Allocator_alignedAlloc.45>
  218ace:	66 83 7d e0 00       	cmp    WORD PTR [rbp-0x20],0x0
  218ad3:	74 0e                	je     218ae3 <Allocator_alignedRealloc.44+0x73>
  218ad5:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  218adc:	e8 af 31 ff ff       	call   20bc90 <__zig_return_error>
  218ae1:	eb 02                	jmp    218ae5 <Allocator_alignedRealloc.44+0x75>
  218ae3:	eb 00                	jmp    218ae5 <Allocator_alignedRealloc.44+0x75>
  218ae5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  218ae9:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  218af0:	48 89 01             	mov    QWORD PTR [rcx],rax
  218af3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  218af7:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  218afb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  218aff:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  218b03:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  218b0a:	48 81 c4 88 01 00 00 	add    rsp,0x188
  218b11:	5b                   	pop    rbx
  218b12:	5d                   	pop    rbp
  218b13:	c3                   	ret    
        if (old_mem.len == 0) {
  218b14:	eb 00                	jmp    218b16 <Allocator_alignedRealloc.44+0xa6>
        if (n == 0) {
  218b16:	48 83 bd 10 ff ff ff 	cmp    QWORD PTR [rbp-0xf0],0x0
  218b1d:	00 
  218b1e:	75 4b                	jne    218b6b <Allocator_alignedRealloc.44+0xfb>
            self.free(old_mem);
  218b20:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
  218b27:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  218b2e:	e8 dd 06 00 00       	call   219210 <Allocator_free.46>
            return ([*]align(alignment) T)(undefined)[0..0];
  218b33:	48 8b 35 1e 04 ff ff 	mov    rsi,QWORD PTR [rip+0xffffffffffff041e]        # 208f58 <__unnamed_96>
  218b3a:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  218b41:	48 89 37             	mov    QWORD PTR [rdi],rsi
  218b44:	48 8b 35 15 04 ff ff 	mov    rsi,QWORD PTR [rip+0xffffffffffff0415]        # 208f60 <__unnamed_96+0x8>
  218b4b:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  218b4f:	48 8b 35 12 04 ff ff 	mov    rsi,QWORD PTR [rip+0xffffffffffff0412]        # 208f68 <__unnamed_96+0x10>
  218b56:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  218b5a:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  218b61:	48 81 c4 88 01 00 00 	add    rsp,0x188
  218b68:	5b                   	pop    rbx
  218b69:	5d                   	pop    rbp
  218b6a:	c3                   	ret    
        if (n == 0) {
  218b6b:	eb 00                	jmp    218b6d <Allocator_alignedRealloc.44+0xfd>
  218b6d:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  218b71:	b8 28 00 00 00       	mov    eax,0x28
  218b76:	89 c2                	mov    edx,eax
        const old_byte_slice = @sliceToBytes(old_mem);
  218b78:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  218b7f:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  218b82:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  218b86:	48 6b 71 08 28       	imul   rsi,QWORD PTR [rcx+0x8],0x28
  218b8b:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  218b8f:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  218b93:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
  218b9a:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  218b9e:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  218ba5:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  218bac:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  218bb3:	e8 f8 c7 ff ff       	call   2153b0 <mul>
  218bb8:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  218bbd:	74 44                	je     218c03 <Allocator_alignedRealloc.44+0x193>
  218bbf:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  218bc6:	e8 c5 30 ff ff       	call   20bc90 <__zig_return_error>
  218bcb:	48 8b 3d 9e 03 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff039e]        # 208f70 <__unnamed_97>
  218bd2:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  218bd9:	48 89 38             	mov    QWORD PTR [rax],rdi
  218bdc:	48 8b 3d 95 03 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff0395]        # 208f78 <__unnamed_97+0x8>
  218be3:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  218be7:	48 8b 3d 92 03 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff0392]        # 208f80 <__unnamed_97+0x10>
  218bee:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  218bf2:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  218bf9:	48 81 c4 88 01 00 00 	add    rsp,0x188
  218c00:	5b                   	pop    rbx
  218c01:	5d                   	pop    rbp
  218c02:	c3                   	ret    
  218c03:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  218c07:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  218c0e:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  218c12:	48 8d 8d 00 ff ff ff 	lea    rcx,[rbp-0x100]
  218c19:	41 b9 08 00 00 00    	mov    r9d,0x8
  218c1f:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  218c26:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
        const byte_slice = try self.reallocFn(self, old_byte_slice, byte_count, alignment);
  218c2d:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  218c34:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  218c38:	48 8b b5 18 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe8]
  218c3f:	4c 8b 85 f8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x108]
  218c46:	4c 8b 95 c8 fe ff ff 	mov    r10,QWORD PTR [rbp-0x138]
  218c4d:	48 89 b5 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rsi
  218c54:	4c 89 d6             	mov    rsi,r10
  218c57:	4c 8b 9d a8 fe ff ff 	mov    r11,QWORD PTR [rbp-0x158]
  218c5e:	48 89 95 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdx
  218c65:	4c 89 da             	mov    rdx,r11
  218c68:	48 8b 9d a0 fe ff ff 	mov    rbx,QWORD PTR [rbp-0x160]
  218c6f:	ff d3                	call   rbx
  218c71:	66 83 7d 98 00       	cmp    WORD PTR [rbp-0x68],0x0
  218c76:	74 5d                	je     218cd5 <Allocator_alignedRealloc.44+0x265>
  218c78:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  218c7c:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  218c83:	66 89 85 9e fe ff ff 	mov    WORD PTR [rbp-0x162],ax
  218c8a:	e8 01 30 ff ff       	call   20bc90 <__zig_return_error>
  218c8f:	66 8b 85 9e fe ff ff 	mov    ax,WORD PTR [rbp-0x162]
  218c96:	66 89 85 68 ff ff ff 	mov    WORD PTR [rbp-0x98],ax
  218c9d:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  218ca4:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  218cab:	48 89 39             	mov    QWORD PTR [rcx],rdi
  218cae:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  218cb5:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  218cb9:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  218cc0:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  218cc4:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  218ccb:	48 81 c4 88 01 00 00 	add    rsp,0x188
  218cd2:	5b                   	pop    rbx
  218cd3:	5d                   	pop    rbp
  218cd4:	c3                   	ret    
  218cd5:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  218cd9:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  218ce0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  218ce4:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
        assert(byte_slice.len == byte_count);
  218ceb:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  218cf2:	48 3b 85 f8 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x108]
  218cf9:	0f 94 c1             	sete   cl
  218cfc:	0f b6 f9             	movzx  edi,cl
  218cff:	e8 fc 22 ff ff       	call   20b000 <assert>
        if (n > old_mem.len) {
  218d04:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  218d0b:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  218d12:	48 3b 42 08          	cmp    rax,QWORD PTR [rdx+0x8]
  218d16:	76 71                	jbe    218d89 <Allocator_alignedRealloc.44+0x319>
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  218d18:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  218d1f:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  218d26:	48 39 c8             	cmp    rax,rcx
  218d29:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  218d30:	48 89 8d 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rcx
  218d37:	76 78                	jbe    218db1 <Allocator_alignedRealloc.44+0x341>
  218d39:	eb 66                	jmp    218da1 <Allocator_alignedRealloc.44+0x331>
  218d3b:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  218d42:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
  218d49:	48 39 c8             	cmp    rax,rcx
  218d4c:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  218d53:	73 32                	jae    218d87 <Allocator_alignedRealloc.44+0x317>
  218d55:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  218d5c:	48 03 8d 58 ff ff ff 	add    rcx,QWORD PTR [rbp-0xa8]
  218d63:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
                byte.* = undefined;
  218d6a:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  218d71:	88 01                	mov    BYTE PTR [rcx],al
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  218d73:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  218d7a:	48 83 c1 01          	add    rcx,0x1
  218d7e:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
  218d85:	eb b4                	jmp    218d3b <Allocator_alignedRealloc.44+0x2cb>
        if (n > old_mem.len) {
  218d87:	eb 02                	jmp    218d8b <Allocator_alignedRealloc.44+0x31b>
  218d89:	eb 00                	jmp    218d8b <Allocator_alignedRealloc.44+0x31b>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  218d8b:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  218d92:	48 83 e0 07          	and    rax,0x7
  218d96:	48 83 f8 00          	cmp    rax,0x0
  218d9a:	74 7b                	je     218e17 <Allocator_alignedRealloc.44+0x3a7>
  218d9c:	e9 ae 00 00 00       	jmp    218e4f <Allocator_alignedRealloc.44+0x3df>
  218da1:	48 8d 3d 30 a6 02 00 	lea    rdi,[rip+0x2a630]        # 2433d8 <__unnamed_20>
  218da8:	31 c0                	xor    eax,eax
  218daa:	89 c6                	mov    esi,eax
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  218dac:	e8 4f 28 ff ff       	call   20b600 <panic>
  218db1:	be aa 00 00 00       	mov    esi,0xaa
  218db6:	b8 08 00 00 00       	mov    eax,0x8
  218dbb:	89 c2                	mov    edx,eax
  218dbd:	48 8d 8d e0 fe ff ff 	lea    rcx,[rbp-0x120]
  218dc4:	48 8b bd 90 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x170]
  218dcb:	48 03 bd e8 fe ff ff 	add    rdi,QWORD PTR [rbp-0x118]
  218dd2:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
  218dd9:	48 8b bd 88 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x178]
  218de0:	4c 8b 85 90 fe ff ff 	mov    r8,QWORD PTR [rbp-0x170]
  218de7:	4c 29 c7             	sub    rdi,r8
  218dea:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  218df1:	48 89 cf             	mov    rdi,rcx
  218df4:	e8 57 ba 01 00       	call   234850 <memset>
  218df9:	48 c7 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],0x0
  218e00:	00 00 00 00 
  218e04:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  218e0b:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  218e12:	e9 24 ff ff ff       	jmp    218d3b <Allocator_alignedRealloc.44+0x2cb>
  218e17:	b8 28 00 00 00       	mov    eax,0x28
  218e1c:	89 c1                	mov    ecx,eax
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  218e1e:	48 8b 95 e8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x118]
  218e25:	48 89 95 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdx
  218e2c:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  218e33:	48 89 d0             	mov    rax,rdx
  218e36:	31 f6                	xor    esi,esi
  218e38:	48 89 95 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rdx
  218e3f:	89 f2                	mov    edx,esi
  218e41:	48 f7 f1             	div    rcx
  218e44:	48 83 fa 00          	cmp    rdx,0x0
  218e48:	74 15                	je     218e5f <Allocator_alignedRealloc.44+0x3ef>
  218e4a:	e9 87 00 00 00       	jmp    218ed6 <Allocator_alignedRealloc.44+0x466>
  218e4f:	48 8d 3d 5a a7 02 00 	lea    rdi,[rip+0x2a75a]        # 2435b0 <__unnamed_75>
  218e56:	31 c0                	xor    eax,eax
  218e58:	89 c6                	mov    esi,eax
  218e5a:	e8 a1 27 ff ff       	call   20b600 <panic>
  218e5f:	b8 28 00 00 00       	mov    eax,0x28
  218e64:	89 c1                	mov    ecx,eax
  218e66:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  218e6d:	31 d2                	xor    edx,edx
  218e6f:	48 f7 f1             	div    rcx
  218e72:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  218e79:	66 c7 85 20 ff ff ff 	mov    WORD PTR [rbp-0xe0],0x0
  218e80:	00 00 
  218e82:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  218e89:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  218e90:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  218e97:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  218e9e:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  218ea5:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  218eac:	48 89 01             	mov    QWORD PTR [rcx],rax
  218eaf:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  218eb6:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  218eba:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  218ec1:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  218ec5:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  218ecc:	48 81 c4 88 01 00 00 	add    rsp,0x188
  218ed3:	5b                   	pop    rbx
  218ed4:	5d                   	pop    rbp
  218ed5:	c3                   	ret    
  218ed6:	48 8d 3d eb a6 02 00 	lea    rdi,[rip+0x2a6eb]        # 2435c8 <__unnamed_76>
  218edd:	31 c0                	xor    eax,eax
  218edf:	89 c6                	mov    esi,eax
  218ee1:	e8 1a 27 ff ff       	call   20b600 <panic>
  218ee6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  218eed:	00 00 00 

0000000000218ef0 <Allocator_alignedAlloc.45>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  218ef0:	55                   	push   rbp
  218ef1:	48 89 e5             	mov    rbp,rsp
  218ef4:	48 81 ec 20 01 00 00 	sub    rsp,0x120
  218efb:	48 89 f8             	mov    rax,rdi
  218efe:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  218f05:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  218f0c:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  218f13:	00 
  218f14:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  218f1b:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  218f22:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  218f29:	75 37                	jne    218f62 <Allocator_alignedAlloc.45+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  218f2b:	48 8b 05 56 00 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff0056]        # 208f88 <__unnamed_98>
  218f32:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  218f39:	48 89 01             	mov    QWORD PTR [rcx],rax
  218f3c:	48 8b 05 4d 00 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff004d]        # 208f90 <__unnamed_98+0x8>
  218f43:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  218f47:	48 8b 05 4a 00 ff ff 	mov    rax,QWORD PTR [rip+0xffffffffffff004a]        # 208f98 <__unnamed_98+0x10>
  218f4e:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  218f52:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  218f59:	48 81 c4 20 01 00 00 	add    rsp,0x120
  218f60:	5d                   	pop    rbp
  218f61:	c3                   	ret    
        if (n == 0) {
  218f62:	eb 00                	jmp    218f64 <Allocator_alignedAlloc.45+0x74>
  218f64:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  218f68:	b8 28 00 00 00       	mov    eax,0x28
  218f6d:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  218f6f:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  218f76:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  218f7d:	e8 2e c4 ff ff       	call   2153b0 <mul>
  218f82:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  218f87:	74 43                	je     218fcc <Allocator_alignedAlloc.45+0xdc>
  218f89:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  218f90:	e8 fb 2c ff ff       	call   20bc90 <__zig_return_error>
  218f95:	48 8b 3d 04 00 ff ff 	mov    rdi,QWORD PTR [rip+0xffffffffffff0004]        # 208fa0 <__unnamed_99>
  218f9c:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  218fa3:	48 89 38             	mov    QWORD PTR [rax],rdi
  218fa6:	48 8b 3d fb ff fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffefffb]        # 208fa8 <__unnamed_99+0x8>
  218fad:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  218fb1:	48 8b 3d f8 ff fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffefff8]        # 208fb0 <__unnamed_99+0x10>
  218fb8:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  218fbc:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  218fc3:	48 81 c4 20 01 00 00 	add    rsp,0x120
  218fca:	5d                   	pop    rbp
  218fcb:	c3                   	ret    
  218fcc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  218fd0:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  218fd7:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  218fdb:	41 b8 08 00 00 00    	mov    r8d,0x8
  218fe1:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  218fe8:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  218fef:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  218ff6:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  218ff9:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  219000:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  219007:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  21900e:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  219015:	4c 89 ce             	mov    rsi,r9
  219018:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  21901f:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  219026:	4c 89 d1             	mov    rcx,r10
  219029:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  219030:	41 ff d3             	call   r11
  219033:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  219038:	74 50                	je     21908a <Allocator_alignedAlloc.45+0x19a>
  21903a:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  21903e:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  219045:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  21904c:	e8 3f 2c ff ff       	call   20bc90 <__zig_return_error>
  219051:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  219058:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  21905c:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  219060:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  219067:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21906a:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  21906e:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  219072:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  219076:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  21907a:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  219081:	48 81 c4 20 01 00 00 	add    rsp,0x120
  219088:	5d                   	pop    rbp
  219089:	c3                   	ret    
  21908a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  21908e:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  219095:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  219099:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  2190a0:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  2190a7:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  2190ae:	0f 94 c1             	sete   cl
  2190b1:	0f b6 f9             	movzx  edi,cl
  2190b4:	e8 47 1f ff ff       	call   20b000 <assert>
  2190b9:	be aa 00 00 00       	mov    esi,0xaa
  2190be:	bf 08 00 00 00       	mov    edi,0x8
  2190c3:	89 fa                	mov    edx,edi
  2190c5:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  2190cc:	48 89 c7             	mov    rdi,rax
  2190cf:	e8 7c b7 01 00       	call   234850 <memset>
  2190d4:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  2190db:	00 00 00 00 
  2190df:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  2190e6:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  2190ed:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  2190f4:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  2190fb:	48 39 c8             	cmp    rax,rcx
  2190fe:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  219105:	73 32                	jae    219139 <Allocator_alignedAlloc.45+0x249>
  219107:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21910e:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  219115:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  21911c:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  219123:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  219125:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21912c:	48 83 c1 01          	add    rcx,0x1
  219130:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  219137:	eb b4                	jmp    2190ed <Allocator_alignedAlloc.45+0x1fd>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  219139:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  219140:	48 83 e0 07          	and    rax,0x7
  219144:	48 83 f8 00          	cmp    rax,0x0
  219148:	75 32                	jne    21917c <Allocator_alignedAlloc.45+0x28c>
  21914a:	b8 28 00 00 00       	mov    eax,0x28
  21914f:	89 c1                	mov    ecx,eax
  219151:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
  219158:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
  21915c:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
  219163:	48 89 d0             	mov    rax,rdx
  219166:	31 f6                	xor    esi,esi
  219168:	48 89 95 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdx
  21916f:	89 f2                	mov    edx,esi
  219171:	48 f7 f1             	div    rcx
  219174:	48 83 fa 00          	cmp    rdx,0x0
  219178:	74 12                	je     21918c <Allocator_alignedAlloc.45+0x29c>
  21917a:	eb 77                	jmp    2191f3 <Allocator_alignedAlloc.45+0x303>
  21917c:	48 8d 3d 2d a4 02 00 	lea    rdi,[rip+0x2a42d]        # 2435b0 <__unnamed_75>
  219183:	31 c0                	xor    eax,eax
  219185:	89 c6                	mov    esi,eax
  219187:	e8 74 24 ff ff       	call   20b600 <panic>
  21918c:	b8 28 00 00 00       	mov    eax,0x28
  219191:	89 c1                	mov    ecx,eax
  219193:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  21919a:	31 d2                	xor    edx,edx
  21919c:	48 f7 f1             	div    rcx
  21919f:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  2191a3:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  2191aa:	00 00 
  2191ac:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  2191b0:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  2191b7:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  2191bb:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  2191bf:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  2191c6:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  2191cd:	48 89 01             	mov    QWORD PTR [rcx],rax
  2191d0:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  2191d7:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2191db:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  2191df:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  2191e3:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  2191ea:	48 81 c4 20 01 00 00 	add    rsp,0x120
  2191f1:	5d                   	pop    rbp
  2191f2:	c3                   	ret    
  2191f3:	48 8d 3d ce a3 02 00 	lea    rdi,[rip+0x2a3ce]        # 2435c8 <__unnamed_76>
  2191fa:	31 c0                	xor    eax,eax
  2191fc:	89 c6                	mov    esi,eax
  2191fe:	e8 fd 23 ff ff       	call   20b600 <panic>
  219203:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21920a:	84 00 00 00 00 00 

0000000000219210 <Allocator_free.46>:
    pub fn free(self: *Allocator, memory: var) void {
  219210:	55                   	push   rbp
  219211:	48 89 e5             	mov    rbp,rsp
  219214:	48 83 ec 60          	sub    rsp,0x60
  219218:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
        const bytes = @sliceToBytes(memory);
  21921c:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  21921f:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  219223:	48 6b 76 08 28       	imul   rsi,QWORD PTR [rsi+0x8],0x28
  219228:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21922c:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  219230:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  219234:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  219238:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        if (bytes.len == 0) return;
  21923c:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
  219241:	75 06                	jne    219249 <Allocator_free.46+0x39>
  219243:	48 83 c4 60          	add    rsp,0x60
  219247:	5d                   	pop    rbp
  219248:	c3                   	ret    
  219249:	31 c0                	xor    eax,eax
  21924b:	89 c1                	mov    ecx,eax
        const non_const_ptr = @intToPtr([*]u8, @ptrToInt(bytes.ptr));
  21924d:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  219251:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
        self.freeFn(self, non_const_ptr[0..bytes.len]);
  219255:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  219259:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  21925d:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  219261:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  219265:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
  219269:	48 39 f1             	cmp    rcx,rsi
  21926c:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
  219270:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
  219274:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  219278:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  21927c:	76 10                	jbe    21928e <Allocator_free.46+0x7e>
  21927e:	48 8d 3d 53 a1 02 00 	lea    rdi,[rip+0x2a153]        # 2433d8 <__unnamed_20>
  219285:	31 c0                	xor    eax,eax
  219287:	89 c6                	mov    esi,eax
  219289:	e8 72 23 ff ff       	call   20b600 <panic>
  21928e:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
  219292:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  219296:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  21929a:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  21929e:	48 83 e9 00          	sub    rcx,0x0
  2192a2:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  2192a6:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  2192aa:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  2192ae:	ff d1                	call   rcx
    pub fn free(self: *Allocator, memory: var) void {
  2192b0:	48 83 c4 60          	add    rsp,0x60
  2192b4:	5d                   	pop    rbp
  2192b5:	c3                   	ret    
  2192b6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  2192bd:	00 00 00 

00000000002192c0 <getAbbrevTableEntry>:
fn getAbbrevTableEntry(abbrev_table: *const AbbrevTable, abbrev_code: u64) ?*const AbbrevTableEntry {
  2192c0:	55                   	push   rbp
  2192c1:	48 89 e5             	mov    rbp,rsp
  2192c4:	48 83 ec 50          	sub    rsp,0x50
  2192c8:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  2192cc:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  2192d0:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
    for (abbrev_table.toSliceConst()) |*table_entry| {
  2192d4:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  2192d8:	48 89 c7             	mov    rdi,rax
  2192db:	e8 70 12 00 00       	call   21a550 <AlignedArrayList(AbbrevTableEntry,1)_toSliceConst>
  2192e0:	be aa 00 00 00       	mov    esi,0xaa
  2192e5:	b9 08 00 00 00       	mov    ecx,0x8
  2192ea:	89 ca                	mov    edx,ecx
  2192ec:	48 8d 45 c8          	lea    rax,[rbp-0x38]
  2192f0:	48 89 c7             	mov    rdi,rax
  2192f3:	e8 58 b5 01 00       	call   234850 <memset>
  2192f8:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
  2192ff:	00 
  219300:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  219304:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  219308:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  21930c:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  219310:	48 39 c8             	cmp    rax,rcx
  219313:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  219317:	73 36                	jae    21934f <getAbbrevTableEntry+0x8f>
  219319:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  21931d:	48 6b c8 38          	imul   rcx,rax,0x38
  219321:	48 03 4d f0          	add    rcx,QWORD PTR [rbp-0x10]
  219325:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
        if (table_entry.abbrev_code == abbrev_code) return table_entry;
  219329:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  21932d:	48 8b 49 08          	mov    rcx,QWORD PTR [rcx+0x8]
  219331:	48 3b 4d d0          	cmp    rcx,QWORD PTR [rbp-0x30]
  219335:	75 0a                	jne    219341 <getAbbrevTableEntry+0x81>
  219337:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21933b:	48 83 c4 50          	add    rsp,0x50
  21933f:	5d                   	pop    rbp
  219340:	c3                   	ret    
    for (abbrev_table.toSliceConst()) |*table_entry| {
  219341:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  219345:	48 83 c0 01          	add    rax,0x1
  219349:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  21934d:	eb b9                	jmp    219308 <getAbbrevTableEntry+0x48>
  21934f:	31 c0                	xor    eax,eax
    return null;
  219351:	48 83 c4 50          	add    rsp,0x50
  219355:	5d                   	pop    rbp
  219356:	c3                   	ret    
  219357:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  21935e:	00 00 

0000000000219360 <AlignedArrayList(Attr,8)_init>:
        pub fn init(allocator: *Allocator) Self {
  219360:	55                   	push   rbp
  219361:	48 89 e5             	mov    rbp,rsp
  219364:	48 89 f8             	mov    rax,rdi
  219367:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
                .allocator = allocator,
  21936b:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
            return Self{
  21936f:	48 8b 0d 3a 6f fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe6f3a]        # 2002b0 <__unnamed_100>
  219376:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  21937a:	48 8b 0d 37 6f fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe6f37]        # 2002b8 <__unnamed_100+0x8>
  219381:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  219385:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  21938c:	00 
  21938d:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  219391:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  219395:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  219398:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21939c:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  2193a0:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  2193a4:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  2193a8:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  2193ac:	48 89 4f 18          	mov    QWORD PTR [rdi+0x18],rcx
  2193b0:	5d                   	pop    rbp
  2193b1:	c3                   	ret    
  2193b2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2193b9:	1f 84 00 00 00 00 00 

00000000002193c0 <AlignedArrayList(Attr,8)_resize>:
        pub fn resize(self: *Self, new_len: usize) !void {
  2193c0:	55                   	push   rbp
  2193c1:	48 89 e5             	mov    rbp,rsp
  2193c4:	48 83 ec 30          	sub    rsp,0x30
  2193c8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  2193cc:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
            try self.ensureCapacity(new_len);
  2193d0:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  2193d4:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  2193d8:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2193dc:	e8 0f 12 00 00       	call   21a5f0 <AlignedArrayList(Attr,8)_ensureCapacity>
  2193e1:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  2193e5:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  2193ea:	74 1b                	je     219407 <AlignedArrayList(Attr,8)_resize+0x47>
  2193ec:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  2193f0:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2193f4:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  2193f8:	e8 93 28 ff ff       	call   20bc90 <__zig_return_error>
  2193fd:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  219401:	48 83 c4 30          	add    rsp,0x30
  219405:	5d                   	pop    rbp
  219406:	c3                   	ret    
  219407:	31 c0                	xor    eax,eax
  219409:	66 89 c1             	mov    cx,ax
            self.len = new_len;
  21940c:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  219410:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  219414:	48 89 72 10          	mov    QWORD PTR [rdx+0x10],rsi
        pub fn resize(self: *Self, new_len: usize) !void {
  219418:	66 89 c8             	mov    ax,cx
  21941b:	48 83 c4 30          	add    rsp,0x30
  21941f:	5d                   	pop    rbp
  219420:	c3                   	ret    
  219421:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  219428:	0f 1f 84 00 00 00 00 
  21942f:	00 

0000000000219430 <AlignedArrayList(AbbrevAttr,8)_toSliceConst>:
        pub fn toSliceConst(self: Self) []align(A) const T {
  219430:	55                   	push   rbp
  219431:	48 89 e5             	mov    rbp,rsp
  219434:	48 83 ec 40          	sub    rsp,0x40
  219438:	48 89 f8             	mov    rax,rdi
  21943b:	31 c9                	xor    ecx,ecx
  21943d:	89 ca                	mov    edx,ecx
            return self.items[0..self.len];
  21943f:	4c 8b 46 10          	mov    r8,QWORD PTR [rsi+0x10]
  219443:	4c 8b 4e 08          	mov    r9,QWORD PTR [rsi+0x8]
  219447:	4c 39 c2             	cmp    rdx,r8
  21944a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  21944e:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  219452:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  219456:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
  21945a:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
  21945e:	76 10                	jbe    219470 <AlignedArrayList(AbbrevAttr,8)_toSliceConst+0x40>
  219460:	48 8d 3d 71 9f 02 00 	lea    rdi,[rip+0x29f71]        # 2433d8 <__unnamed_20>
  219467:	31 c0                	xor    eax,eax
  219469:	89 c6                	mov    esi,eax
  21946b:	e8 90 21 ff ff       	call   20b600 <panic>
  219470:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  219474:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  219478:	48 39 c8             	cmp    rax,rcx
  21947b:	76 10                	jbe    21948d <AlignedArrayList(AbbrevAttr,8)_toSliceConst+0x5d>
  21947d:	48 8d 3d 54 9f 02 00 	lea    rdi,[rip+0x29f54]        # 2433d8 <__unnamed_20>
  219484:	31 c0                	xor    eax,eax
  219486:	89 c6                	mov    esi,eax
  219488:	e8 73 21 ff ff       	call   20b600 <panic>
  21948d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  219491:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  219494:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  219498:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  21949c:	48 83 e9 00          	sub    rcx,0x0
  2194a0:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  2194a4:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  2194a8:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  2194ac:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  2194af:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  2194b3:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  2194b7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2194bb:	48 83 c4 40          	add    rsp,0x40
  2194bf:	5d                   	pop    rbp
  2194c0:	c3                   	ret    
  2194c1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2194c8:	0f 1f 84 00 00 00 00 
  2194cf:	00 

00000000002194d0 <parseFormValue>:
fn parseFormValue(allocator: *mem.Allocator, in_stream: var, form_id: u64, is_64: bool) ParseFormValueError!FormValue {
  2194d0:	55                   	push   rbp
  2194d1:	48 89 e5             	mov    rbp,rsp
  2194d4:	48 81 ec e0 09 00 00 	sub    rsp,0x9e0
  2194db:	44 88 c8             	mov    al,r9b
  2194de:	49 89 fa             	mov    r10,rdi
  2194e1:	48 89 95 a8 f7 ff ff 	mov    QWORD PTR [rbp-0x858],rdx
  2194e8:	48 89 8d a0 f7 ff ff 	mov    QWORD PTR [rbp-0x860],rcx
  2194ef:	4c 89 85 98 f7 ff ff 	mov    QWORD PTR [rbp-0x868],r8
  2194f6:	24 01                	and    al,0x1
  2194f8:	88 85 97 f7 ff ff    	mov    BYTE PTR [rbp-0x869],al
    return switch (form_id) {
  2194fe:	48 8b 8d 98 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x868]
  219505:	48 83 c1 ff          	add    rcx,0xffffffffffffffff
  219509:	48 89 ca             	mov    rdx,rcx
  21950c:	48 83 ea 1f          	sub    rdx,0x1f
  219510:	48 89 b5 48 f7 ff ff 	mov    QWORD PTR [rbp-0x8b8],rsi
  219517:	4c 89 95 40 f7 ff ff 	mov    QWORD PTR [rbp-0x8c0],r10
  21951e:	48 89 bd 38 f7 ff ff 	mov    QWORD PTR [rbp-0x8c8],rdi
  219525:	48 89 8d 30 f7 ff ff 	mov    QWORD PTR [rbp-0x8d0],rcx
  21952c:	48 89 95 28 f7 ff ff 	mov    QWORD PTR [rbp-0x8d8],rdx
  219533:	77 17                	ja     21954c <parseFormValue+0x7c>
  219535:	48 8d 05 e8 77 fe ff 	lea    rax,[rip+0xfffffffffffe77e8]        # 200d24 <__unnamed_181+0x6c>
  21953c:	48 8b 8d 30 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x8d0]
  219543:	48 63 14 88          	movsxd rdx,DWORD PTR [rax+rcx*4]
  219547:	48 01 c2             	add    rdx,rax
  21954a:	ff e2                	jmp    rdx
  21954c:	48 8d 05 fd fa fe ff 	lea    rax,[rip+0xfffffffffffefafd]        # 209050 <__unnamed_101>
  219553:	48 89 85 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rax
  21955a:	e9 8f 0f 00 00       	jmp    21a4ee <parseFormValue+0x101e>
  21955f:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
        DW.FORM_addr => FormValue{ .Address = try parseFormValueTargetAddrSize(in_stream) },
  219563:	48 8b 95 a0 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x860]
  21956a:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  219571:	e8 2a 1a 00 00       	call   21afa0 <parseFormValueTargetAddrSize>
  219576:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  21957b:	74 5a                	je     2195d7 <parseFormValue+0x107>
  21957d:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  219581:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  219588:	66 89 85 1e f7 ff ff 	mov    WORD PTR [rbp-0x8e2],ax
  21958f:	e8 fc 26 ff ff       	call   20bc90 <__zig_return_error>
  219594:	b9 28 00 00 00       	mov    ecx,0x28
  219599:	89 ca                	mov    edx,ecx
  21959b:	48 8d 7d b8          	lea    rdi,[rbp-0x48]
  21959f:	66 8b 85 1e f7 ff ff 	mov    ax,WORD PTR [rbp-0x8e2]
  2195a6:	66 89 45 b8          	mov    WORD PTR [rbp-0x48],ax
  2195aa:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  2195b1:	48 89 bd 10 f7 ff ff 	mov    QWORD PTR [rbp-0x8f0],rdi
  2195b8:	48 89 f7             	mov    rdi,rsi
  2195bb:	48 8b b5 10 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8f0]
  2195c2:	e8 d9 b2 01 00       	call   2348a0 <memcpy>
  2195c7:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  2195ce:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  2195d5:	5d                   	pop    rbp
  2195d6:	c3                   	ret    
  2195d7:	48 8d 85 a0 f8 ff ff 	lea    rax,[rbp-0x760]
  2195de:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  2195e2:	c6 45 b0 00          	mov    BYTE PTR [rbp-0x50],0x0
  2195e6:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
  2195ea:	66 c7 85 a0 f8 ff ff 	mov    WORD PTR [rbp-0x760],0x0
  2195f1:	00 00 
  2195f3:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  2195f7:	48 89 8d a8 f8 ff ff 	mov    QWORD PTR [rbp-0x758],rcx
  2195fe:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  219602:	48 89 8d b0 f8 ff ff 	mov    QWORD PTR [rbp-0x750],rcx
  219609:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  21960d:	48 89 8d b8 f8 ff ff 	mov    QWORD PTR [rbp-0x748],rcx
  219614:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  219618:	48 89 8d c0 f8 ff ff 	mov    QWORD PTR [rbp-0x740],rcx
    return switch (form_id) {
  21961f:	48 89 85 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rax
  219626:	e9 c3 0e 00 00       	jmp    21a4ee <parseFormValue+0x101e>
  21962b:	48 8d bd 70 ff ff ff 	lea    rdi,[rbp-0x90]
  219632:	b8 01 00 00 00       	mov    eax,0x1
  219637:	41 89 c0             	mov    r8d,eax
        DW.FORM_block1 => parseFormValueBlock(allocator, in_stream, 1),
  21963a:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  219641:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  219648:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  21964f:	e8 ec 19 00 00       	call   21b040 <parseFormValueBlock>
  219654:	48 8d 8d 70 ff ff ff 	lea    rcx,[rbp-0x90]
    return switch (form_id) {
  21965b:	48 89 8d 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rcx
  219662:	e9 87 0e 00 00       	jmp    21a4ee <parseFormValue+0x101e>
  219667:	48 8d bd 48 ff ff ff 	lea    rdi,[rbp-0xb8]
  21966e:	b8 02 00 00 00       	mov    eax,0x2
  219673:	41 89 c0             	mov    r8d,eax
        DW.FORM_block2 => parseFormValueBlock(allocator, in_stream, 2),
  219676:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  21967d:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  219684:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  21968b:	e8 b0 19 00 00       	call   21b040 <parseFormValueBlock>
  219690:	48 8d 8d 48 ff ff ff 	lea    rcx,[rbp-0xb8]
    return switch (form_id) {
  219697:	48 89 8d 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rcx
  21969e:	e9 4b 0e 00 00       	jmp    21a4ee <parseFormValue+0x101e>
  2196a3:	48 8d bd 20 ff ff ff 	lea    rdi,[rbp-0xe0]
  2196aa:	b8 04 00 00 00       	mov    eax,0x4
  2196af:	41 89 c0             	mov    r8d,eax
        DW.FORM_block4 => parseFormValueBlock(allocator, in_stream, 4),
  2196b2:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  2196b9:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  2196c0:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  2196c7:	e8 74 19 00 00       	call   21b040 <parseFormValueBlock>
  2196cc:	48 8d 8d 20 ff ff ff 	lea    rcx,[rbp-0xe0]
    return switch (form_id) {
  2196d3:	48 89 8d 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rcx
  2196da:	e9 0f 0e 00 00       	jmp    21a4ee <parseFormValue+0x101e>
  2196df:	48 8d bd 10 ff ff ff 	lea    rdi,[rbp-0xf0]
            const block_len = try readULeb128(in_stream);
  2196e6:	48 8b 95 a0 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x860]
  2196ed:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  2196f4:	e8 77 d9 ff ff       	call   217070 <readULeb128>
  2196f9:	66 83 bd 10 ff ff ff 	cmp    WORD PTR [rbp-0xf0],0x0
  219700:	00 
  219701:	74 63                	je     219766 <parseFormValue+0x296>
  219703:	66 8b 85 10 ff ff ff 	mov    ax,WORD PTR [rbp-0xf0]
  21970a:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  219711:	66 89 85 0e f7 ff ff 	mov    WORD PTR [rbp-0x8f2],ax
  219718:	e8 73 25 ff ff       	call   20bc90 <__zig_return_error>
  21971d:	b9 28 00 00 00       	mov    ecx,0x28
  219722:	89 ca                	mov    edx,ecx
  219724:	48 8d bd d8 fe ff ff 	lea    rdi,[rbp-0x128]
  21972b:	66 8b 85 0e f7 ff ff 	mov    ax,WORD PTR [rbp-0x8f2]
  219732:	66 89 85 d8 fe ff ff 	mov    WORD PTR [rbp-0x128],ax
  219739:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  219740:	48 89 bd 00 f7 ff ff 	mov    QWORD PTR [rbp-0x900],rdi
  219747:	48 89 f7             	mov    rdi,rsi
  21974a:	48 8b b5 00 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x900]
  219751:	e8 4a b1 01 00       	call   2348a0 <memcpy>
  219756:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  21975d:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  219764:	5d                   	pop    rbp
  219765:	c3                   	ret    
  219766:	48 8d bd b0 fe ff ff 	lea    rdi,[rbp-0x150]
  21976d:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  219774:	48 89 85 88 f7 ff ff 	mov    QWORD PTR [rbp-0x878],rax
            return parseFormValueBlockLen(allocator, in_stream, block_len);
  21977b:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  219782:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  219789:	4c 8b 85 88 f7 ff ff 	mov    r8,QWORD PTR [rbp-0x878]
  219790:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  219797:	e8 d4 19 00 00       	call   21b170 <parseFormValueBlockLen>
  21979c:	66 83 bd b0 fe ff ff 	cmp    WORD PTR [rbp-0x150],0x0
  2197a3:	00 
  2197a4:	74 0e                	je     2197b4 <parseFormValue+0x2e4>
  2197a6:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  2197ad:	e8 de 24 ff ff       	call   20bc90 <__zig_return_error>
  2197b2:	eb 02                	jmp    2197b6 <parseFormValue+0x2e6>
  2197b4:	eb 00                	jmp    2197b6 <parseFormValue+0x2e6>
  2197b6:	b8 28 00 00 00       	mov    eax,0x28
  2197bb:	89 c2                	mov    edx,eax
  2197bd:	48 8d 8d b0 fe ff ff 	lea    rcx,[rbp-0x150]
  2197c4:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  2197cb:	48 89 f7             	mov    rdi,rsi
  2197ce:	48 89 ce             	mov    rsi,rcx
  2197d1:	e8 ca b0 01 00       	call   2348a0 <memcpy>
  2197d6:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  2197dd:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  2197e4:	5d                   	pop    rbp
  2197e5:	c3                   	ret    
  2197e6:	48 8d bd 88 fe ff ff 	lea    rdi,[rbp-0x178]
  2197ed:	45 31 c0             	xor    r8d,r8d
  2197f0:	b8 01 00 00 00       	mov    eax,0x1
  2197f5:	41 89 c1             	mov    r9d,eax
        DW.FORM_data1 => parseFormValueConstant(allocator, in_stream, false, 1),
  2197f8:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  2197ff:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  219806:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  21980d:	e8 ae 1a 00 00       	call   21b2c0 <parseFormValueConstant>
  219812:	48 8d 8d 88 fe ff ff 	lea    rcx,[rbp-0x178]
    return switch (form_id) {
  219819:	48 89 8d 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rcx
  219820:	e9 c9 0c 00 00       	jmp    21a4ee <parseFormValue+0x101e>
  219825:	48 8d bd 60 fe ff ff 	lea    rdi,[rbp-0x1a0]
  21982c:	45 31 c0             	xor    r8d,r8d
  21982f:	b8 02 00 00 00       	mov    eax,0x2
  219834:	41 89 c1             	mov    r9d,eax
        DW.FORM_data2 => parseFormValueConstant(allocator, in_stream, false, 2),
  219837:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  21983e:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  219845:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  21984c:	e8 6f 1a 00 00       	call   21b2c0 <parseFormValueConstant>
  219851:	48 8d 8d 60 fe ff ff 	lea    rcx,[rbp-0x1a0]
    return switch (form_id) {
  219858:	48 89 8d 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rcx
  21985f:	e9 8a 0c 00 00       	jmp    21a4ee <parseFormValue+0x101e>
  219864:	48 8d bd 38 fe ff ff 	lea    rdi,[rbp-0x1c8]
  21986b:	45 31 c0             	xor    r8d,r8d
  21986e:	b8 04 00 00 00       	mov    eax,0x4
  219873:	41 89 c1             	mov    r9d,eax
        DW.FORM_data4 => parseFormValueConstant(allocator, in_stream, false, 4),
  219876:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  21987d:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  219884:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  21988b:	e8 30 1a 00 00       	call   21b2c0 <parseFormValueConstant>
  219890:	48 8d 8d 38 fe ff ff 	lea    rcx,[rbp-0x1c8]
    return switch (form_id) {
  219897:	48 89 8d 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rcx
  21989e:	e9 4b 0c 00 00       	jmp    21a4ee <parseFormValue+0x101e>
  2198a3:	48 8d bd 10 fe ff ff 	lea    rdi,[rbp-0x1f0]
  2198aa:	45 31 c0             	xor    r8d,r8d
  2198ad:	b8 08 00 00 00       	mov    eax,0x8
  2198b2:	41 89 c1             	mov    r9d,eax
        DW.FORM_data8 => parseFormValueConstant(allocator, in_stream, false, 8),
  2198b5:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  2198bc:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  2198c3:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  2198ca:	e8 f1 19 00 00       	call   21b2c0 <parseFormValueConstant>
  2198cf:	48 8d 8d 10 fe ff ff 	lea    rcx,[rbp-0x1f0]
    return switch (form_id) {
  2198d6:	48 89 8d 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rcx
  2198dd:	e9 0c 0c 00 00       	jmp    21a4ee <parseFormValue+0x101e>
  2198e2:	48 8d bd 00 fe ff ff 	lea    rdi,[rbp-0x200]
            const block_len = try readULeb128(in_stream);
  2198e9:	48 8b 95 a0 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x860]
  2198f0:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  2198f7:	e8 74 d7 ff ff       	call   217070 <readULeb128>
  2198fc:	66 83 bd 00 fe ff ff 	cmp    WORD PTR [rbp-0x200],0x0
  219903:	00 
  219904:	74 63                	je     219969 <parseFormValue+0x499>
  219906:	66 8b 85 00 fe ff ff 	mov    ax,WORD PTR [rbp-0x200]
  21990d:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  219914:	66 89 85 fe f6 ff ff 	mov    WORD PTR [rbp-0x902],ax
  21991b:	e8 70 23 ff ff       	call   20bc90 <__zig_return_error>
  219920:	b9 28 00 00 00       	mov    ecx,0x28
  219925:	89 ca                	mov    edx,ecx
  219927:	48 8d bd c8 fd ff ff 	lea    rdi,[rbp-0x238]
  21992e:	66 8b 85 fe f6 ff ff 	mov    ax,WORD PTR [rbp-0x902]
  219935:	66 89 85 c8 fd ff ff 	mov    WORD PTR [rbp-0x238],ax
  21993c:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  219943:	48 89 bd f0 f6 ff ff 	mov    QWORD PTR [rbp-0x910],rdi
  21994a:	48 89 f7             	mov    rdi,rsi
  21994d:	48 8b b5 f0 f6 ff ff 	mov    rsi,QWORD PTR [rbp-0x910]
  219954:	e8 47 af 01 00       	call   2348a0 <memcpy>
  219959:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  219960:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  219967:	5d                   	pop    rbp
  219968:	c3                   	ret    
  219969:	48 8d 85 a0 fd ff ff 	lea    rax,[rbp-0x260]
  219970:	48 8b 8d 08 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1f8]
  219977:	48 89 8d 80 f7 ff ff 	mov    QWORD PTR [rbp-0x880],rcx
            const signed = form_id == DW.FORM_sdata;
  21997e:	48 83 bd 98 f7 ff ff 	cmp    QWORD PTR [rbp-0x868],0xd
  219985:	0d 
  219986:	0f 94 c2             	sete   dl
  219989:	80 e2 01             	and    dl,0x1
  21998c:	88 95 7f f7 ff ff    	mov    BYTE PTR [rbp-0x881],dl
            return parseFormValueConstant(allocator, in_stream, signed, block_len);
  219992:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  219999:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  2199a0:	40 8a b5 7f f7 ff ff 	mov    sil,BYTE PTR [rbp-0x881]
  2199a7:	4c 8b 8d 80 f7 ff ff 	mov    r9,QWORD PTR [rbp-0x880]
  2199ae:	44 0f b6 c6          	movzx  r8d,sil
  2199b2:	48 8d bd a0 fd ff ff 	lea    rdi,[rbp-0x260]
  2199b9:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  2199c0:	48 89 85 e8 f6 ff ff 	mov    QWORD PTR [rbp-0x918],rax
  2199c7:	e8 f4 18 00 00       	call   21b2c0 <parseFormValueConstant>
  2199cc:	66 83 bd a0 fd ff ff 	cmp    WORD PTR [rbp-0x260],0x0
  2199d3:	00 
  2199d4:	74 0e                	je     2199e4 <parseFormValue+0x514>
  2199d6:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  2199dd:	e8 ae 22 ff ff       	call   20bc90 <__zig_return_error>
  2199e2:	eb 02                	jmp    2199e6 <parseFormValue+0x516>
  2199e4:	eb 00                	jmp    2199e6 <parseFormValue+0x516>
  2199e6:	b8 28 00 00 00       	mov    eax,0x28
  2199eb:	89 c2                	mov    edx,eax
  2199ed:	48 8d 8d a0 fd ff ff 	lea    rcx,[rbp-0x260]
  2199f4:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  2199fb:	48 89 f7             	mov    rdi,rsi
  2199fe:	48 89 ce             	mov    rsi,rcx
  219a01:	e8 9a ae 01 00       	call   2348a0 <memcpy>
  219a06:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  219a0d:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  219a14:	5d                   	pop    rbp
  219a15:	c3                   	ret    
  219a16:	48 8d bd 90 fd ff ff 	lea    rdi,[rbp-0x270]
            const size = try readULeb128(in_stream);
  219a1d:	48 8b 95 a0 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x860]
  219a24:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  219a2b:	e8 40 d6 ff ff       	call   217070 <readULeb128>
  219a30:	66 83 bd 90 fd ff ff 	cmp    WORD PTR [rbp-0x270],0x0
  219a37:	00 
  219a38:	74 63                	je     219a9d <parseFormValue+0x5cd>
  219a3a:	66 8b 85 90 fd ff ff 	mov    ax,WORD PTR [rbp-0x270]
  219a41:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  219a48:	66 89 85 e6 f6 ff ff 	mov    WORD PTR [rbp-0x91a],ax
  219a4f:	e8 3c 22 ff ff       	call   20bc90 <__zig_return_error>
  219a54:	b9 28 00 00 00       	mov    ecx,0x28
  219a59:	89 ca                	mov    edx,ecx
  219a5b:	48 8d bd 58 fd ff ff 	lea    rdi,[rbp-0x2a8]
  219a62:	66 8b 85 e6 f6 ff ff 	mov    ax,WORD PTR [rbp-0x91a]
  219a69:	66 89 85 58 fd ff ff 	mov    WORD PTR [rbp-0x2a8],ax
  219a70:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  219a77:	48 89 bd d8 f6 ff ff 	mov    QWORD PTR [rbp-0x928],rdi
  219a7e:	48 89 f7             	mov    rdi,rsi
  219a81:	48 8b b5 d8 f6 ff ff 	mov    rsi,QWORD PTR [rbp-0x928]
  219a88:	e8 13 ae 01 00       	call   2348a0 <memcpy>
  219a8d:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  219a94:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  219a9b:	5d                   	pop    rbp
  219a9c:	c3                   	ret    
  219a9d:	48 8d bd 40 fd ff ff 	lea    rdi,[rbp-0x2c0]
  219aa4:	48 8b 85 98 fd ff ff 	mov    rax,QWORD PTR [rbp-0x268]
  219aab:	48 89 85 70 f7 ff ff 	mov    QWORD PTR [rbp-0x890],rax
            const buf = try readAllocBytes(allocator, in_stream, size);
  219ab2:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  219ab9:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  219ac0:	4c 8b 85 70 f7 ff ff 	mov    r8,QWORD PTR [rbp-0x890]
  219ac7:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  219ace:	e8 6d 19 00 00       	call   21b440 <readAllocBytes>
  219ad3:	66 83 bd 40 fd ff ff 	cmp    WORD PTR [rbp-0x2c0],0x0
  219ada:	00 
  219adb:	74 63                	je     219b40 <parseFormValue+0x670>
  219add:	66 8b 85 40 fd ff ff 	mov    ax,WORD PTR [rbp-0x2c0]
  219ae4:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  219aeb:	66 89 85 d6 f6 ff ff 	mov    WORD PTR [rbp-0x92a],ax
  219af2:	e8 99 21 ff ff       	call   20bc90 <__zig_return_error>
  219af7:	b9 28 00 00 00       	mov    ecx,0x28
  219afc:	89 ca                	mov    edx,ecx
  219afe:	48 8d bd 00 fd ff ff 	lea    rdi,[rbp-0x300]
  219b05:	66 8b 85 d6 f6 ff ff 	mov    ax,WORD PTR [rbp-0x92a]
  219b0c:	66 89 85 00 fd ff ff 	mov    WORD PTR [rbp-0x300],ax
  219b13:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  219b1a:	48 89 bd c8 f6 ff ff 	mov    QWORD PTR [rbp-0x938],rdi
  219b21:	48 89 f7             	mov    rdi,rsi
  219b24:	48 8b b5 c8 f6 ff ff 	mov    rsi,QWORD PTR [rbp-0x938]
  219b2b:	e8 70 ad 01 00       	call   2348a0 <memcpy>
  219b30:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  219b37:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  219b3e:	5d                   	pop    rbp
  219b3f:	c3                   	ret    
  219b40:	b8 28 00 00 00       	mov    eax,0x28
  219b45:	89 c2                	mov    edx,eax
  219b47:	48 8d 8d b8 fc ff ff 	lea    rcx,[rbp-0x348]
  219b4e:	c5 fa 6f 85 48 fd ff 	vmovdqu xmm0,XMMWORD PTR [rbp-0x2b8]
  219b55:	ff 
  219b56:	c5 f9 7f 85 60 f7 ff 	vmovdqa XMMWORD PTR [rbp-0x8a0],xmm0
  219b5d:	ff 
            return FormValue{ .ExprLoc = buf };
  219b5e:	c6 85 f8 fc ff ff 03 	mov    BYTE PTR [rbp-0x308],0x3
  219b65:	48 8b b5 60 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8a0]
  219b6c:	48 89 b5 e0 fc ff ff 	mov    QWORD PTR [rbp-0x320],rsi
  219b73:	48 8b b5 68 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x898]
  219b7a:	48 89 b5 e8 fc ff ff 	mov    QWORD PTR [rbp-0x318],rsi
  219b81:	66 c7 85 b8 fc ff ff 	mov    WORD PTR [rbp-0x348],0x0
  219b88:	00 00 
  219b8a:	48 8b b5 e0 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x320]
  219b91:	48 89 b5 c0 fc ff ff 	mov    QWORD PTR [rbp-0x340],rsi
  219b98:	48 8b b5 e8 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x318]
  219b9f:	48 89 b5 c8 fc ff ff 	mov    QWORD PTR [rbp-0x338],rsi
  219ba6:	48 8b b5 f0 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x310]
  219bad:	48 89 b5 d0 fc ff ff 	mov    QWORD PTR [rbp-0x330],rsi
  219bb4:	48 8b b5 f8 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x308]
  219bbb:	48 89 b5 d8 fc ff ff 	mov    QWORD PTR [rbp-0x328],rsi
  219bc2:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  219bc9:	48 89 f7             	mov    rdi,rsi
  219bcc:	48 89 ce             	mov    rsi,rcx
  219bcf:	e8 cc ac 01 00       	call   2348a0 <memcpy>
  219bd4:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  219bdb:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  219be2:	5d                   	pop    rbp
  219be3:	c3                   	ret    
  219be4:	48 8d bd b0 fc ff ff 	lea    rdi,[rbp-0x350]
        DW.FORM_flag => FormValue{ .Flag = (try in_stream.readByte()) != 0 },
  219beb:	48 8b 95 a0 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x860]
  219bf2:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  219bf9:	e8 e2 9e ff ff       	call   213ae0 <InStream(ReadError)_readByte>
  219bfe:	66 83 bd b0 fc ff ff 	cmp    WORD PTR [rbp-0x350],0x0
  219c05:	00 
  219c06:	74 63                	je     219c6b <parseFormValue+0x79b>
  219c08:	66 8b 85 b0 fc ff ff 	mov    ax,WORD PTR [rbp-0x350]
  219c0f:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  219c16:	66 89 85 c6 f6 ff ff 	mov    WORD PTR [rbp-0x93a],ax
  219c1d:	e8 6e 20 ff ff       	call   20bc90 <__zig_return_error>
  219c22:	b9 28 00 00 00       	mov    ecx,0x28
  219c27:	89 ca                	mov    edx,ecx
  219c29:	48 8d bd 80 fc ff ff 	lea    rdi,[rbp-0x380]
  219c30:	66 8b 85 c6 f6 ff ff 	mov    ax,WORD PTR [rbp-0x93a]
  219c37:	66 89 85 80 fc ff ff 	mov    WORD PTR [rbp-0x380],ax
  219c3e:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  219c45:	48 89 bd b8 f6 ff ff 	mov    QWORD PTR [rbp-0x948],rdi
  219c4c:	48 89 f7             	mov    rdi,rsi
  219c4f:	48 8b b5 b8 f6 ff ff 	mov    rsi,QWORD PTR [rbp-0x948]
  219c56:	e8 45 ac 01 00       	call   2348a0 <memcpy>
  219c5b:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  219c62:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  219c69:	5d                   	pop    rbp
  219c6a:	c3                   	ret    
  219c6b:	48 8d 85 78 f8 ff ff 	lea    rax,[rbp-0x788]
  219c72:	8a 8d b2 fc ff ff    	mov    cl,BYTE PTR [rbp-0x34e]
  219c78:	84 c9                	test   cl,cl
  219c7a:	0f 95 c1             	setne  cl
  219c7d:	c6 85 78 fc ff ff 04 	mov    BYTE PTR [rbp-0x388],0x4
  219c84:	80 e1 01             	and    cl,0x1
  219c87:	88 8d 60 fc ff ff    	mov    BYTE PTR [rbp-0x3a0],cl
  219c8d:	66 c7 85 78 f8 ff ff 	mov    WORD PTR [rbp-0x788],0x0
  219c94:	00 00 
  219c96:	48 8b 95 60 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x3a0]
  219c9d:	48 89 95 80 f8 ff ff 	mov    QWORD PTR [rbp-0x780],rdx
  219ca4:	48 8b 95 68 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x398]
  219cab:	48 89 95 88 f8 ff ff 	mov    QWORD PTR [rbp-0x778],rdx
  219cb2:	48 8b 95 70 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x390]
  219cb9:	48 89 95 90 f8 ff ff 	mov    QWORD PTR [rbp-0x770],rdx
  219cc0:	48 8b 95 78 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x388]
  219cc7:	48 89 95 98 f8 ff ff 	mov    QWORD PTR [rbp-0x768],rdx
    return switch (form_id) {
  219cce:	48 89 85 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rax
  219cd5:	e9 14 08 00 00       	jmp    21a4ee <parseFormValue+0x101e>
  219cda:	48 8d 05 97 f3 fe ff 	lea    rax,[rip+0xfffffffffffef397]        # 209078 <__unnamed_102>
  219ce1:	48 89 85 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rax
  219ce8:	e9 01 08 00 00       	jmp    21a4ee <parseFormValue+0x101e>
  219ced:	48 8d 85 50 fc ff ff 	lea    rax,[rbp-0x3b0]
        DW.FORM_sec_offset => FormValue{ .SecOffset = try parseFormValueDwarfOffsetSize(in_stream, is_64) },
  219cf4:	48 8b 95 a0 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x860]
  219cfb:	8a 8d 97 f7 ff ff    	mov    cl,BYTE PTR [rbp-0x869]
  219d01:	0f b6 c9             	movzx  ecx,cl
  219d04:	48 8d bd 50 fc ff ff 	lea    rdi,[rbp-0x3b0]
  219d0b:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  219d12:	48 89 85 b0 f6 ff ff 	mov    QWORD PTR [rbp-0x950],rax
  219d19:	e8 32 19 00 00       	call   21b650 <parseFormValueDwarfOffsetSize>
  219d1e:	66 83 bd 50 fc ff ff 	cmp    WORD PTR [rbp-0x3b0],0x0
  219d25:	00 
  219d26:	74 63                	je     219d8b <parseFormValue+0x8bb>
  219d28:	66 8b 85 50 fc ff ff 	mov    ax,WORD PTR [rbp-0x3b0]
  219d2f:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  219d36:	66 89 85 ae f6 ff ff 	mov    WORD PTR [rbp-0x952],ax
  219d3d:	e8 4e 1f ff ff       	call   20bc90 <__zig_return_error>
  219d42:	b9 28 00 00 00       	mov    ecx,0x28
  219d47:	89 ca                	mov    edx,ecx
  219d49:	48 8d bd 18 fc ff ff 	lea    rdi,[rbp-0x3e8]
  219d50:	66 8b 85 ae f6 ff ff 	mov    ax,WORD PTR [rbp-0x952]
  219d57:	66 89 85 18 fc ff ff 	mov    WORD PTR [rbp-0x3e8],ax
  219d5e:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  219d65:	48 89 bd a0 f6 ff ff 	mov    QWORD PTR [rbp-0x960],rdi
  219d6c:	48 89 f7             	mov    rdi,rsi
  219d6f:	48 8b b5 a0 f6 ff ff 	mov    rsi,QWORD PTR [rbp-0x960]
  219d76:	e8 25 ab 01 00       	call   2348a0 <memcpy>
  219d7b:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  219d82:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  219d89:	5d                   	pop    rbp
  219d8a:	c3                   	ret    
  219d8b:	48 8d 85 50 f8 ff ff 	lea    rax,[rbp-0x7b0]
  219d92:	48 8b 8d 58 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3a8]
  219d99:	c6 85 10 fc ff ff 05 	mov    BYTE PTR [rbp-0x3f0],0x5
  219da0:	48 89 8d f8 fb ff ff 	mov    QWORD PTR [rbp-0x408],rcx
  219da7:	66 c7 85 50 f8 ff ff 	mov    WORD PTR [rbp-0x7b0],0x0
  219dae:	00 00 
  219db0:	48 8b 8d f8 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x408]
  219db7:	48 89 8d 58 f8 ff ff 	mov    QWORD PTR [rbp-0x7a8],rcx
  219dbe:	48 8b 8d 00 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x400]
  219dc5:	48 89 8d 60 f8 ff ff 	mov    QWORD PTR [rbp-0x7a0],rcx
  219dcc:	48 8b 8d 08 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3f8]
  219dd3:	48 89 8d 68 f8 ff ff 	mov    QWORD PTR [rbp-0x798],rcx
  219dda:	48 8b 8d 10 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3f0]
  219de1:	48 89 8d 70 f8 ff ff 	mov    QWORD PTR [rbp-0x790],rcx
    return switch (form_id) {
  219de8:	48 89 85 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rax
  219def:	e9 fa 06 00 00       	jmp    21a4ee <parseFormValue+0x101e>
  219df4:	48 8d bd d0 fb ff ff 	lea    rdi,[rbp-0x430]
        DW.FORM_ref1 => parseFormValueRef(allocator, in_stream, u8),
  219dfb:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  219e02:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  219e09:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  219e10:	e8 7b 19 00 00       	call   21b790 <parseFormValueRef>
  219e15:	48 8d 8d d0 fb ff ff 	lea    rcx,[rbp-0x430]
    return switch (form_id) {
  219e1c:	48 89 8d 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rcx
  219e23:	e9 c6 06 00 00       	jmp    21a4ee <parseFormValue+0x101e>
  219e28:	48 8d bd a8 fb ff ff 	lea    rdi,[rbp-0x458]
        DW.FORM_ref2 => parseFormValueRef(allocator, in_stream, u16),
  219e2f:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  219e36:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  219e3d:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  219e44:	e8 47 1a 00 00       	call   21b890 <parseFormValueRef.50>
  219e49:	48 8d 8d a8 fb ff ff 	lea    rcx,[rbp-0x458]
    return switch (form_id) {
  219e50:	48 89 8d 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rcx
  219e57:	e9 92 06 00 00       	jmp    21a4ee <parseFormValue+0x101e>
  219e5c:	48 8d bd 80 fb ff ff 	lea    rdi,[rbp-0x480]
        DW.FORM_ref4 => parseFormValueRef(allocator, in_stream, u32),
  219e63:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  219e6a:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  219e71:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  219e78:	e8 13 1b 00 00       	call   21b990 <parseFormValueRef.51>
  219e7d:	48 8d 8d 80 fb ff ff 	lea    rcx,[rbp-0x480]
    return switch (form_id) {
  219e84:	48 89 8d 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rcx
  219e8b:	e9 5e 06 00 00       	jmp    21a4ee <parseFormValue+0x101e>
  219e90:	48 8d bd 58 fb ff ff 	lea    rdi,[rbp-0x4a8]
        DW.FORM_ref8 => parseFormValueRef(allocator, in_stream, u64),
  219e97:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  219e9e:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  219ea5:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  219eac:	e8 df 1b 00 00       	call   21ba90 <parseFormValueRef.52>
  219eb1:	48 8d 8d 58 fb ff ff 	lea    rcx,[rbp-0x4a8]
    return switch (form_id) {
  219eb8:	48 89 8d 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rcx
  219ebf:	e9 2a 06 00 00       	jmp    21a4ee <parseFormValue+0x101e>
  219ec4:	48 8d bd 48 fb ff ff 	lea    rdi,[rbp-0x4b8]
            const ref_len = try readULeb128(in_stream);
  219ecb:	48 8b 95 a0 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x860]
  219ed2:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  219ed9:	e8 92 d1 ff ff       	call   217070 <readULeb128>
  219ede:	66 83 bd 48 fb ff ff 	cmp    WORD PTR [rbp-0x4b8],0x0
  219ee5:	00 
  219ee6:	74 63                	je     219f4b <parseFormValue+0xa7b>
  219ee8:	66 8b 85 48 fb ff ff 	mov    ax,WORD PTR [rbp-0x4b8]
  219eef:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  219ef6:	66 89 85 9e f6 ff ff 	mov    WORD PTR [rbp-0x962],ax
  219efd:	e8 8e 1d ff ff       	call   20bc90 <__zig_return_error>
  219f02:	b9 28 00 00 00       	mov    ecx,0x28
  219f07:	89 ca                	mov    edx,ecx
  219f09:	48 8d bd 10 fb ff ff 	lea    rdi,[rbp-0x4f0]
  219f10:	66 8b 85 9e f6 ff ff 	mov    ax,WORD PTR [rbp-0x962]
  219f17:	66 89 85 10 fb ff ff 	mov    WORD PTR [rbp-0x4f0],ax
  219f1e:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  219f25:	48 89 bd 90 f6 ff ff 	mov    QWORD PTR [rbp-0x970],rdi
  219f2c:	48 89 f7             	mov    rdi,rsi
  219f2f:	48 8b b5 90 f6 ff ff 	mov    rsi,QWORD PTR [rbp-0x970]
  219f36:	e8 65 a9 01 00       	call   2348a0 <memcpy>
  219f3b:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  219f42:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  219f49:	5d                   	pop    rbp
  219f4a:	c3                   	ret    
  219f4b:	48 8d bd e8 fa ff ff 	lea    rdi,[rbp-0x518]
  219f52:	48 8b 85 50 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4b0]
  219f59:	48 89 85 58 f7 ff ff 	mov    QWORD PTR [rbp-0x8a8],rax
            return parseFormValueRefLen(allocator, in_stream, ref_len);
  219f60:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  219f67:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  219f6e:	4c 8b 85 58 f7 ff ff 	mov    r8,QWORD PTR [rbp-0x8a8]
  219f75:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  219f7c:	e8 1f 1c 00 00       	call   21bba0 <parseFormValueRefLen>
  219f81:	66 83 bd e8 fa ff ff 	cmp    WORD PTR [rbp-0x518],0x0
  219f88:	00 
  219f89:	74 0e                	je     219f99 <parseFormValue+0xac9>
  219f8b:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  219f92:	e8 f9 1c ff ff       	call   20bc90 <__zig_return_error>
  219f97:	eb 02                	jmp    219f9b <parseFormValue+0xacb>
  219f99:	eb 00                	jmp    219f9b <parseFormValue+0xacb>
  219f9b:	b8 28 00 00 00       	mov    eax,0x28
  219fa0:	89 c2                	mov    edx,eax
  219fa2:	48 8d 8d e8 fa ff ff 	lea    rcx,[rbp-0x518]
  219fa9:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  219fb0:	48 89 f7             	mov    rdi,rsi
  219fb3:	48 89 ce             	mov    rsi,rcx
  219fb6:	e8 e5 a8 01 00       	call   2348a0 <memcpy>
  219fbb:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  219fc2:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  219fc9:	5d                   	pop    rbp
  219fca:	c3                   	ret    
  219fcb:	48 8d 85 d8 fa ff ff 	lea    rax,[rbp-0x528]
        DW.FORM_ref_addr => FormValue{ .RefAddr = try parseFormValueDwarfOffsetSize(in_stream, is_64) },
  219fd2:	48 8b 95 a0 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x860]
  219fd9:	8a 8d 97 f7 ff ff    	mov    cl,BYTE PTR [rbp-0x869]
  219fdf:	0f b6 c9             	movzx  ecx,cl
  219fe2:	48 8d bd d8 fa ff ff 	lea    rdi,[rbp-0x528]
  219fe9:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  219ff0:	48 89 85 88 f6 ff ff 	mov    QWORD PTR [rbp-0x978],rax
  219ff7:	e8 54 16 00 00       	call   21b650 <parseFormValueDwarfOffsetSize>
  219ffc:	66 83 bd d8 fa ff ff 	cmp    WORD PTR [rbp-0x528],0x0
  21a003:	00 
  21a004:	74 63                	je     21a069 <parseFormValue+0xb99>
  21a006:	66 8b 85 d8 fa ff ff 	mov    ax,WORD PTR [rbp-0x528]
  21a00d:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  21a014:	66 89 85 86 f6 ff ff 	mov    WORD PTR [rbp-0x97a],ax
  21a01b:	e8 70 1c ff ff       	call   20bc90 <__zig_return_error>
  21a020:	b9 28 00 00 00       	mov    ecx,0x28
  21a025:	89 ca                	mov    edx,ecx
  21a027:	48 8d bd a0 fa ff ff 	lea    rdi,[rbp-0x560]
  21a02e:	66 8b 85 86 f6 ff ff 	mov    ax,WORD PTR [rbp-0x97a]
  21a035:	66 89 85 a0 fa ff ff 	mov    WORD PTR [rbp-0x560],ax
  21a03c:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  21a043:	48 89 bd 78 f6 ff ff 	mov    QWORD PTR [rbp-0x988],rdi
  21a04a:	48 89 f7             	mov    rdi,rsi
  21a04d:	48 8b b5 78 f6 ff ff 	mov    rsi,QWORD PTR [rbp-0x988]
  21a054:	e8 47 a8 01 00       	call   2348a0 <memcpy>
  21a059:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  21a060:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  21a067:	5d                   	pop    rbp
  21a068:	c3                   	ret    
  21a069:	48 8d 85 28 f8 ff ff 	lea    rax,[rbp-0x7d8]
  21a070:	48 8b 8d e0 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x520]
  21a077:	c6 85 98 fa ff ff 07 	mov    BYTE PTR [rbp-0x568],0x7
  21a07e:	48 89 8d 80 fa ff ff 	mov    QWORD PTR [rbp-0x580],rcx
  21a085:	66 c7 85 28 f8 ff ff 	mov    WORD PTR [rbp-0x7d8],0x0
  21a08c:	00 00 
  21a08e:	48 8b 8d 80 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x580]
  21a095:	48 89 8d 30 f8 ff ff 	mov    QWORD PTR [rbp-0x7d0],rcx
  21a09c:	48 8b 8d 88 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x578]
  21a0a3:	48 89 8d 38 f8 ff ff 	mov    QWORD PTR [rbp-0x7c8],rcx
  21a0aa:	48 8b 8d 90 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x570]
  21a0b1:	48 89 8d 40 f8 ff ff 	mov    QWORD PTR [rbp-0x7c0],rcx
  21a0b8:	48 8b 8d 98 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x568]
  21a0bf:	48 89 8d 48 f8 ff ff 	mov    QWORD PTR [rbp-0x7b8],rcx
    return switch (form_id) {
  21a0c6:	48 89 85 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rax
  21a0cd:	e9 1c 04 00 00       	jmp    21a4ee <parseFormValue+0x101e>
  21a0d2:	48 8d bd 70 fa ff ff 	lea    rdi,[rbp-0x590]
        DW.FORM_ref_sig8 => FormValue{ .RefSig8 = try in_stream.readIntLe(u64) },
  21a0d9:	48 8b 95 a0 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x860]
  21a0e0:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  21a0e7:	e8 94 c5 ff ff       	call   216680 <InStream(ReadError)_readIntLe.38>
  21a0ec:	66 83 bd 70 fa ff ff 	cmp    WORD PTR [rbp-0x590],0x0
  21a0f3:	00 
  21a0f4:	74 63                	je     21a159 <parseFormValue+0xc89>
  21a0f6:	66 8b 85 70 fa ff ff 	mov    ax,WORD PTR [rbp-0x590]
  21a0fd:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  21a104:	66 89 85 76 f6 ff ff 	mov    WORD PTR [rbp-0x98a],ax
  21a10b:	e8 80 1b ff ff       	call   20bc90 <__zig_return_error>
  21a110:	b9 28 00 00 00       	mov    ecx,0x28
  21a115:	89 ca                	mov    edx,ecx
  21a117:	48 8d bd 38 fa ff ff 	lea    rdi,[rbp-0x5c8]
  21a11e:	66 8b 85 76 f6 ff ff 	mov    ax,WORD PTR [rbp-0x98a]
  21a125:	66 89 85 38 fa ff ff 	mov    WORD PTR [rbp-0x5c8],ax
  21a12c:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  21a133:	48 89 bd 68 f6 ff ff 	mov    QWORD PTR [rbp-0x998],rdi
  21a13a:	48 89 f7             	mov    rdi,rsi
  21a13d:	48 8b b5 68 f6 ff ff 	mov    rsi,QWORD PTR [rbp-0x998]
  21a144:	e8 57 a7 01 00       	call   2348a0 <memcpy>
  21a149:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  21a150:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  21a157:	5d                   	pop    rbp
  21a158:	c3                   	ret    
  21a159:	48 8d 85 00 f8 ff ff 	lea    rax,[rbp-0x800]
  21a160:	48 8b 8d 78 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x588]
  21a167:	c6 85 30 fa ff ff 08 	mov    BYTE PTR [rbp-0x5d0],0x8
  21a16e:	48 89 8d 18 fa ff ff 	mov    QWORD PTR [rbp-0x5e8],rcx
  21a175:	66 c7 85 00 f8 ff ff 	mov    WORD PTR [rbp-0x800],0x0
  21a17c:	00 00 
  21a17e:	48 8b 8d 18 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x5e8]
  21a185:	48 89 8d 08 f8 ff ff 	mov    QWORD PTR [rbp-0x7f8],rcx
  21a18c:	48 8b 8d 20 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x5e0]
  21a193:	48 89 8d 10 f8 ff ff 	mov    QWORD PTR [rbp-0x7f0],rcx
  21a19a:	48 8b 8d 28 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x5d8]
  21a1a1:	48 89 8d 18 f8 ff ff 	mov    QWORD PTR [rbp-0x7e8],rcx
  21a1a8:	48 8b 8d 30 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x5d0]
  21a1af:	48 89 8d 20 f8 ff ff 	mov    QWORD PTR [rbp-0x7e0],rcx
    return switch (form_id) {
  21a1b6:	48 89 85 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rax
  21a1bd:	e9 2c 03 00 00       	jmp    21a4ee <parseFormValue+0x101e>
  21a1c2:	48 8d bd 00 fa ff ff 	lea    rdi,[rbp-0x600]
        DW.FORM_string => FormValue{ .String = try readStringRaw(allocator, in_stream) },
  21a1c9:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  21a1d0:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  21a1d7:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  21a1de:	e8 0d 1b 00 00       	call   21bcf0 <readStringRaw>
  21a1e3:	66 83 bd 00 fa ff ff 	cmp    WORD PTR [rbp-0x600],0x0
  21a1ea:	00 
  21a1eb:	74 63                	je     21a250 <parseFormValue+0xd80>
  21a1ed:	66 8b 85 00 fa ff ff 	mov    ax,WORD PTR [rbp-0x600]
  21a1f4:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  21a1fb:	66 89 85 66 f6 ff ff 	mov    WORD PTR [rbp-0x99a],ax
  21a202:	e8 89 1a ff ff       	call   20bc90 <__zig_return_error>
  21a207:	b9 28 00 00 00       	mov    ecx,0x28
  21a20c:	89 ca                	mov    edx,ecx
  21a20e:	48 8d bd c0 f9 ff ff 	lea    rdi,[rbp-0x640]
  21a215:	66 8b 85 66 f6 ff ff 	mov    ax,WORD PTR [rbp-0x99a]
  21a21c:	66 89 85 c0 f9 ff ff 	mov    WORD PTR [rbp-0x640],ax
  21a223:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  21a22a:	48 89 bd 58 f6 ff ff 	mov    QWORD PTR [rbp-0x9a8],rdi
  21a231:	48 89 f7             	mov    rdi,rsi
  21a234:	48 8b b5 58 f6 ff ff 	mov    rsi,QWORD PTR [rbp-0x9a8]
  21a23b:	e8 60 a6 01 00       	call   2348a0 <memcpy>
  21a240:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  21a247:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  21a24e:	5d                   	pop    rbp
  21a24f:	c3                   	ret    
  21a250:	48 8d 85 d8 f7 ff ff 	lea    rax,[rbp-0x828]
  21a257:	c6 85 b8 f9 ff ff 09 	mov    BYTE PTR [rbp-0x648],0x9
  21a25e:	48 8b 8d 08 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x5f8]
  21a265:	48 89 8d a0 f9 ff ff 	mov    QWORD PTR [rbp-0x660],rcx
  21a26c:	48 8b 8d 10 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x5f0]
  21a273:	48 89 8d a8 f9 ff ff 	mov    QWORD PTR [rbp-0x658],rcx
  21a27a:	66 c7 85 d8 f7 ff ff 	mov    WORD PTR [rbp-0x828],0x0
  21a281:	00 00 
  21a283:	48 8b 8d a0 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x660]
  21a28a:	48 89 8d e0 f7 ff ff 	mov    QWORD PTR [rbp-0x820],rcx
  21a291:	48 8b 8d a8 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x658]
  21a298:	48 89 8d e8 f7 ff ff 	mov    QWORD PTR [rbp-0x818],rcx
  21a29f:	48 8b 8d b0 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x650]
  21a2a6:	48 89 8d f0 f7 ff ff 	mov    QWORD PTR [rbp-0x810],rcx
  21a2ad:	48 8b 8d b8 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x648]
  21a2b4:	48 89 8d f8 f7 ff ff 	mov    QWORD PTR [rbp-0x808],rcx
    return switch (form_id) {
  21a2bb:	48 89 85 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rax
  21a2c2:	e9 27 02 00 00       	jmp    21a4ee <parseFormValue+0x101e>
  21a2c7:	48 8d 85 90 f9 ff ff 	lea    rax,[rbp-0x670]
        DW.FORM_strp => FormValue{ .StrPtr = try parseFormValueDwarfOffsetSize(in_stream, is_64) },
  21a2ce:	48 8b 95 a0 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x860]
  21a2d5:	8a 8d 97 f7 ff ff    	mov    cl,BYTE PTR [rbp-0x869]
  21a2db:	0f b6 c9             	movzx  ecx,cl
  21a2de:	48 8d bd 90 f9 ff ff 	lea    rdi,[rbp-0x670]
  21a2e5:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  21a2ec:	48 89 85 50 f6 ff ff 	mov    QWORD PTR [rbp-0x9b0],rax
  21a2f3:	e8 58 13 00 00       	call   21b650 <parseFormValueDwarfOffsetSize>
  21a2f8:	66 83 bd 90 f9 ff ff 	cmp    WORD PTR [rbp-0x670],0x0
  21a2ff:	00 
  21a300:	74 63                	je     21a365 <parseFormValue+0xe95>
  21a302:	66 8b 85 90 f9 ff ff 	mov    ax,WORD PTR [rbp-0x670]
  21a309:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  21a310:	66 89 85 4e f6 ff ff 	mov    WORD PTR [rbp-0x9b2],ax
  21a317:	e8 74 19 ff ff       	call   20bc90 <__zig_return_error>
  21a31c:	b9 28 00 00 00       	mov    ecx,0x28
  21a321:	89 ca                	mov    edx,ecx
  21a323:	48 8d bd 58 f9 ff ff 	lea    rdi,[rbp-0x6a8]
  21a32a:	66 8b 85 4e f6 ff ff 	mov    ax,WORD PTR [rbp-0x9b2]
  21a331:	66 89 85 58 f9 ff ff 	mov    WORD PTR [rbp-0x6a8],ax
  21a338:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  21a33f:	48 89 bd 40 f6 ff ff 	mov    QWORD PTR [rbp-0x9c0],rdi
  21a346:	48 89 f7             	mov    rdi,rsi
  21a349:	48 8b b5 40 f6 ff ff 	mov    rsi,QWORD PTR [rbp-0x9c0]
  21a350:	e8 4b a5 01 00       	call   2348a0 <memcpy>
  21a355:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  21a35c:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  21a363:	5d                   	pop    rbp
  21a364:	c3                   	ret    
  21a365:	48 8d 85 b0 f7 ff ff 	lea    rax,[rbp-0x850]
  21a36c:	48 8b 8d 98 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x668]
  21a373:	c6 85 50 f9 ff ff 0a 	mov    BYTE PTR [rbp-0x6b0],0xa
  21a37a:	48 89 8d 38 f9 ff ff 	mov    QWORD PTR [rbp-0x6c8],rcx
  21a381:	66 c7 85 b0 f7 ff ff 	mov    WORD PTR [rbp-0x850],0x0
  21a388:	00 00 
  21a38a:	48 8b 8d 38 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x6c8]
  21a391:	48 89 8d b8 f7 ff ff 	mov    QWORD PTR [rbp-0x848],rcx
  21a398:	48 8b 8d 40 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x6c0]
  21a39f:	48 89 8d c0 f7 ff ff 	mov    QWORD PTR [rbp-0x840],rcx
  21a3a6:	48 8b 8d 48 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x6b8]
  21a3ad:	48 89 8d c8 f7 ff ff 	mov    QWORD PTR [rbp-0x838],rcx
  21a3b4:	48 8b 8d 50 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x6b0]
  21a3bb:	48 89 8d d0 f7 ff ff 	mov    QWORD PTR [rbp-0x830],rcx
    return switch (form_id) {
  21a3c2:	48 89 85 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],rax
  21a3c9:	e9 20 01 00 00       	jmp    21a4ee <parseFormValue+0x101e>
  21a3ce:	48 8d bd 28 f9 ff ff 	lea    rdi,[rbp-0x6d8]
            const child_form_id = try readULeb128(in_stream);
  21a3d5:	48 8b 95 a0 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x860]
  21a3dc:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  21a3e3:	e8 88 cc ff ff       	call   217070 <readULeb128>
  21a3e8:	66 83 bd 28 f9 ff ff 	cmp    WORD PTR [rbp-0x6d8],0x0
  21a3ef:	00 
  21a3f0:	74 63                	je     21a455 <parseFormValue+0xf85>
  21a3f2:	66 8b 85 28 f9 ff ff 	mov    ax,WORD PTR [rbp-0x6d8]
  21a3f9:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  21a400:	66 89 85 3e f6 ff ff 	mov    WORD PTR [rbp-0x9c2],ax
  21a407:	e8 84 18 ff ff       	call   20bc90 <__zig_return_error>
  21a40c:	b9 28 00 00 00       	mov    ecx,0x28
  21a411:	89 ca                	mov    edx,ecx
  21a413:	48 8d bd f0 f8 ff ff 	lea    rdi,[rbp-0x710]
  21a41a:	66 8b 85 3e f6 ff ff 	mov    ax,WORD PTR [rbp-0x9c2]
  21a421:	66 89 85 f0 f8 ff ff 	mov    WORD PTR [rbp-0x710],ax
  21a428:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  21a42f:	48 89 bd 30 f6 ff ff 	mov    QWORD PTR [rbp-0x9d0],rdi
  21a436:	48 89 f7             	mov    rdi,rsi
  21a439:	48 8b b5 30 f6 ff ff 	mov    rsi,QWORD PTR [rbp-0x9d0]
  21a440:	e8 5b a4 01 00       	call   2348a0 <memcpy>
  21a445:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  21a44c:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  21a453:	5d                   	pop    rbp
  21a454:	c3                   	ret    
  21a455:	48 8d 85 c8 f8 ff ff 	lea    rax,[rbp-0x738]
  21a45c:	48 8b 8d 30 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x6d0]
  21a463:	48 89 8d 50 f7 ff ff 	mov    QWORD PTR [rbp-0x8b0],rcx
            return parseFormValue(allocator, in_stream, child_form_id, is_64);
  21a46a:	48 8b 95 a8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x858]
  21a471:	48 8b 8d a0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x860]
  21a478:	4c 8b 85 50 f7 ff ff 	mov    r8,QWORD PTR [rbp-0x8b0]
  21a47f:	40 8a b5 97 f7 ff ff 	mov    sil,BYTE PTR [rbp-0x869]
  21a486:	44 0f b6 ce          	movzx  r9d,sil
  21a48a:	48 8d bd c8 f8 ff ff 	lea    rdi,[rbp-0x738]
  21a491:	48 8b b5 48 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8b8]
  21a498:	48 89 85 28 f6 ff ff 	mov    QWORD PTR [rbp-0x9d8],rax
  21a49f:	e8 2c f0 ff ff       	call   2194d0 <parseFormValue>
  21a4a4:	66 83 bd c8 f8 ff ff 	cmp    WORD PTR [rbp-0x738],0x0
  21a4ab:	00 
  21a4ac:	74 0e                	je     21a4bc <parseFormValue+0xfec>
  21a4ae:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  21a4b5:	e8 d6 17 ff ff       	call   20bc90 <__zig_return_error>
  21a4ba:	eb 02                	jmp    21a4be <parseFormValue+0xfee>
  21a4bc:	eb 00                	jmp    21a4be <parseFormValue+0xfee>
  21a4be:	b8 28 00 00 00       	mov    eax,0x28
  21a4c3:	89 c2                	mov    edx,eax
  21a4c5:	48 8d 8d c8 f8 ff ff 	lea    rcx,[rbp-0x738]
  21a4cc:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  21a4d3:	48 89 f7             	mov    rdi,rsi
  21a4d6:	48 89 ce             	mov    rsi,rcx
  21a4d9:	e8 c2 a3 01 00       	call   2348a0 <memcpy>
  21a4de:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  21a4e5:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  21a4ec:	5d                   	pop    rbp
  21a4ed:	c3                   	ret    
    return switch (form_id) {
  21a4ee:	48 8b 85 20 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8e0]
  21a4f5:	66 83 38 00          	cmp    WORD PTR [rax],0x0
  21a4f9:	48 89 85 20 f6 ff ff 	mov    QWORD PTR [rbp-0x9e0],rax
  21a500:	74 0e                	je     21a510 <parseFormValue+0x1040>
  21a502:	48 8b bd 48 f7 ff ff 	mov    rdi,QWORD PTR [rbp-0x8b8]
  21a509:	e8 82 17 ff ff       	call   20bc90 <__zig_return_error>
  21a50e:	eb 02                	jmp    21a512 <parseFormValue+0x1042>
  21a510:	eb 00                	jmp    21a512 <parseFormValue+0x1042>
  21a512:	b8 28 00 00 00       	mov    eax,0x28
  21a517:	89 c2                	mov    edx,eax
  21a519:	48 8b 8d 20 f6 ff ff 	mov    rcx,QWORD PTR [rbp-0x9e0]
  21a520:	48 8b b5 38 f7 ff ff 	mov    rsi,QWORD PTR [rbp-0x8c8]
  21a527:	48 89 f7             	mov    rdi,rsi
  21a52a:	48 89 ce             	mov    rsi,rcx
  21a52d:	e8 6e a3 01 00       	call   2348a0 <memcpy>
  21a532:	48 8b 85 40 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8c0]
  21a539:	48 81 c4 e0 09 00 00 	add    rsp,0x9e0
  21a540:	5d                   	pop    rbp
  21a541:	c3                   	ret    
  21a542:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21a549:	1f 84 00 00 00 00 00 

000000000021a550 <AlignedArrayList(AbbrevTableEntry,1)_toSliceConst>:
        pub fn toSliceConst(self: Self) []align(A) const T {
  21a550:	55                   	push   rbp
  21a551:	48 89 e5             	mov    rbp,rsp
  21a554:	48 83 ec 40          	sub    rsp,0x40
  21a558:	48 89 f8             	mov    rax,rdi
  21a55b:	31 c9                	xor    ecx,ecx
  21a55d:	89 ca                	mov    edx,ecx
            return self.items[0..self.len];
  21a55f:	4c 8b 46 10          	mov    r8,QWORD PTR [rsi+0x10]
  21a563:	4c 8b 4e 08          	mov    r9,QWORD PTR [rsi+0x8]
  21a567:	4c 39 c2             	cmp    rdx,r8
  21a56a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  21a56e:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  21a572:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  21a576:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
  21a57a:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
  21a57e:	76 10                	jbe    21a590 <AlignedArrayList(AbbrevTableEntry,1)_toSliceConst+0x40>
  21a580:	48 8d 3d 51 8e 02 00 	lea    rdi,[rip+0x28e51]        # 2433d8 <__unnamed_20>
  21a587:	31 c0                	xor    eax,eax
  21a589:	89 c6                	mov    esi,eax
  21a58b:	e8 70 10 ff ff       	call   20b600 <panic>
  21a590:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21a594:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  21a598:	48 39 c8             	cmp    rax,rcx
  21a59b:	76 10                	jbe    21a5ad <AlignedArrayList(AbbrevTableEntry,1)_toSliceConst+0x5d>
  21a59d:	48 8d 3d 34 8e 02 00 	lea    rdi,[rip+0x28e34]        # 2433d8 <__unnamed_20>
  21a5a4:	31 c0                	xor    eax,eax
  21a5a6:	89 c6                	mov    esi,eax
  21a5a8:	e8 53 10 ff ff       	call   20b600 <panic>
  21a5ad:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  21a5b1:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  21a5b4:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  21a5b8:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  21a5bc:	48 83 e9 00          	sub    rcx,0x0
  21a5c0:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  21a5c4:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  21a5c8:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  21a5cc:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  21a5cf:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  21a5d3:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  21a5d7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21a5db:	48 83 c4 40          	add    rsp,0x40
  21a5df:	5d                   	pop    rbp
  21a5e0:	c3                   	ret    
  21a5e1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21a5e8:	0f 1f 84 00 00 00 00 
  21a5ef:	00 

000000000021a5f0 <AlignedArrayList(Attr,8)_ensureCapacity>:
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  21a5f0:	55                   	push   rbp
  21a5f1:	48 89 e5             	mov    rbp,rsp
  21a5f4:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  21a5fb:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  21a5ff:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
            var better_capacity = self.items.len;
  21a603:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  21a607:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  21a60b:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
            if (better_capacity >= new_capacity) return;
  21a60f:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  21a613:	48 3b 55 c0          	cmp    rdx,QWORD PTR [rbp-0x40]
  21a617:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  21a61b:	72 11                	jb     21a62e <AlignedArrayList(Attr,8)_ensureCapacity+0x3e>
  21a61d:	31 c0                	xor    eax,eax
  21a61f:	66 89 c1             	mov    cx,ax
  21a622:	66 89 c8             	mov    ax,cx
  21a625:	48 81 c4 90 00 00 00 	add    rsp,0x90
  21a62c:	5d                   	pop    rbp
  21a62d:	c3                   	ret    
            while (true) {
  21a62e:	eb 00                	jmp    21a630 <AlignedArrayList(Attr,8)_ensureCapacity+0x40>
  21a630:	eb 00                	jmp    21a632 <AlignedArrayList(Attr,8)_ensureCapacity+0x42>
  21a632:	31 c0                	xor    eax,eax
  21a634:	88 c1                	mov    cl,al
                better_capacity += better_capacity / 2 + 8;
  21a636:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  21a63a:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  21a63e:	f6 c1 01             	test   cl,0x1
  21a641:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  21a645:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  21a649:	0f 85 8e 00 00 00    	jne    21a6dd <AlignedArrayList(Attr,8)_ensureCapacity+0xed>
  21a64f:	eb 72                	jmp    21a6c3 <AlignedArrayList(Attr,8)_ensureCapacity+0xd3>
                if (better_capacity >= new_capacity) break;
  21a651:	eb 02                	jmp    21a655 <AlignedArrayList(Attr,8)_ensureCapacity+0x65>
            while (true) {
  21a653:	eb db                	jmp    21a630 <AlignedArrayList(Attr,8)_ensureCapacity+0x40>
  21a655:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
            self.items = try self.allocator.alignedRealloc(T, A, self.items, better_capacity);
  21a659:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21a65d:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  21a661:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
  21a665:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  21a669:	4c 8b 45 b8          	mov    r8,QWORD PTR [rbp-0x48]
  21a66d:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  21a671:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  21a675:	e8 d6 00 00 00       	call   21a750 <Allocator_alignedRealloc.47>
  21a67a:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  21a67f:	74 1e                	je     21a69f <AlignedArrayList(Attr,8)_ensureCapacity+0xaf>
  21a681:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  21a685:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  21a689:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  21a68d:	e8 fe 15 ff ff       	call   20bc90 <__zig_return_error>
  21a692:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  21a696:	48 81 c4 90 00 00 00 	add    rsp,0x90
  21a69d:	5d                   	pop    rbp
  21a69e:	c3                   	ret    
  21a69f:	31 c0                	xor    eax,eax
  21a6a1:	66 89 c1             	mov    cx,ax
  21a6a4:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21a6a8:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  21a6ac:	48 89 16             	mov    QWORD PTR [rsi],rdx
  21a6af:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  21a6b3:	48 89 56 08          	mov    QWORD PTR [rsi+0x8],rdx
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  21a6b7:	66 89 c8             	mov    ax,cx
  21a6ba:	48 81 c4 90 00 00 00 	add    rsp,0x90
  21a6c1:	5d                   	pop    rbp
  21a6c2:	c3                   	ret    
                better_capacity += better_capacity / 2 + 8;
  21a6c3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  21a6c7:	48 c1 e8 01          	shr    rax,0x1
  21a6cb:	48 83 c0 08          	add    rax,0x8
  21a6cf:	0f 92 c1             	setb   cl
  21a6d2:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  21a6d6:	88 4d 87             	mov    BYTE PTR [rbp-0x79],cl
  21a6d9:	72 12                	jb     21a6ed <AlignedArrayList(Attr,8)_ensureCapacity+0xfd>
  21a6db:	eb 20                	jmp    21a6fd <AlignedArrayList(Attr,8)_ensureCapacity+0x10d>
  21a6dd:	48 8d 3d 5c 8b 02 00 	lea    rdi,[rip+0x28b5c]        # 243240 <__unnamed_7>
  21a6e4:	31 c0                	xor    eax,eax
  21a6e6:	89 c6                	mov    esi,eax
  21a6e8:	e8 13 0f ff ff       	call   20b600 <panic>
  21a6ed:	48 8d 3d d4 8a 02 00 	lea    rdi,[rip+0x28ad4]        # 2431c8 <__unnamed_4>
  21a6f4:	31 c0                	xor    eax,eax
  21a6f6:	89 c6                	mov    esi,eax
  21a6f8:	e8 03 0f ff ff       	call   20b600 <panic>
  21a6fd:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  21a701:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  21a705:	48 01 c8             	add    rax,rcx
  21a708:	0f 92 c2             	setb   dl
  21a70b:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  21a712:	88 95 77 ff ff ff    	mov    BYTE PTR [rbp-0x89],dl
  21a718:	72 02                	jb     21a71c <AlignedArrayList(Attr,8)_ensureCapacity+0x12c>
  21a71a:	eb 10                	jmp    21a72c <AlignedArrayList(Attr,8)_ensureCapacity+0x13c>
  21a71c:	48 8d 3d a5 8a 02 00 	lea    rdi,[rip+0x28aa5]        # 2431c8 <__unnamed_4>
  21a723:	31 c0                	xor    eax,eax
  21a725:	89 c6                	mov    esi,eax
  21a727:	e8 d4 0e ff ff       	call   20b600 <panic>
  21a72c:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  21a733:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                if (better_capacity >= new_capacity) break;
  21a737:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  21a73b:	48 3b 4d c0          	cmp    rcx,QWORD PTR [rbp-0x40]
  21a73f:	0f 83 0c ff ff ff    	jae    21a651 <AlignedArrayList(Attr,8)_ensureCapacity+0x61>
  21a745:	e9 09 ff ff ff       	jmp    21a653 <AlignedArrayList(Attr,8)_ensureCapacity+0x63>
  21a74a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000021a750 <Allocator_alignedRealloc.47>:
    pub fn alignedRealloc(self: *Allocator, comptime T: type, comptime alignment: u29, old_mem: []align(alignment) T, n: usize) ![]align(alignment) T {
  21a750:	55                   	push   rbp
  21a751:	48 89 e5             	mov    rbp,rsp
  21a754:	53                   	push   rbx
  21a755:	48 81 ec 88 01 00 00 	sub    rsp,0x188
  21a75c:	48 89 f8             	mov    rax,rdi
  21a75f:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
  21a766:	4c 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],r8
        if (old_mem.len == 0) {
  21a76d:	48 83 79 08 00       	cmp    QWORD PTR [rcx+0x8],0x0
  21a772:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  21a779:	48 89 b5 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rsi
  21a780:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
  21a787:	48 89 bd b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rdi
  21a78e:	75 64                	jne    21a7f4 <Allocator_alignedRealloc.47+0xa4>
  21a790:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
            return self.alignedAlloc(T, alignment, n);
  21a794:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  21a79b:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  21a7a2:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  21a7a9:	e8 22 04 00 00       	call   21abd0 <Allocator_alignedAlloc.48>
  21a7ae:	66 83 7d e0 00       	cmp    WORD PTR [rbp-0x20],0x0
  21a7b3:	74 0e                	je     21a7c3 <Allocator_alignedRealloc.47+0x73>
  21a7b5:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  21a7bc:	e8 cf 14 ff ff       	call   20bc90 <__zig_return_error>
  21a7c1:	eb 02                	jmp    21a7c5 <Allocator_alignedRealloc.47+0x75>
  21a7c3:	eb 00                	jmp    21a7c5 <Allocator_alignedRealloc.47+0x75>
  21a7c5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  21a7c9:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  21a7d0:	48 89 01             	mov    QWORD PTR [rcx],rax
  21a7d3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21a7d7:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21a7db:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21a7df:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21a7e3:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21a7ea:	48 81 c4 88 01 00 00 	add    rsp,0x188
  21a7f1:	5b                   	pop    rbx
  21a7f2:	5d                   	pop    rbp
  21a7f3:	c3                   	ret    
        if (old_mem.len == 0) {
  21a7f4:	eb 00                	jmp    21a7f6 <Allocator_alignedRealloc.47+0xa6>
        if (n == 0) {
  21a7f6:	48 83 bd 10 ff ff ff 	cmp    QWORD PTR [rbp-0xf0],0x0
  21a7fd:	00 
  21a7fe:	75 4b                	jne    21a84b <Allocator_alignedRealloc.47+0xfb>
            self.free(old_mem);
  21a800:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
  21a807:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  21a80e:	e8 dd 06 00 00       	call   21aef0 <Allocator_free.49>
            return ([*]align(alignment) T)(undefined)[0..0];
  21a813:	48 8b 35 d6 e7 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffee7d6]        # 208ff0 <__unnamed_103>
  21a81a:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  21a821:	48 89 37             	mov    QWORD PTR [rdi],rsi
  21a824:	48 8b 35 cd e7 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffee7cd]        # 208ff8 <__unnamed_103+0x8>
  21a82b:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  21a82f:	48 8b 35 ca e7 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffee7ca]        # 209000 <__unnamed_103+0x10>
  21a836:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  21a83a:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21a841:	48 81 c4 88 01 00 00 	add    rsp,0x188
  21a848:	5b                   	pop    rbx
  21a849:	5d                   	pop    rbp
  21a84a:	c3                   	ret    
        if (n == 0) {
  21a84b:	eb 00                	jmp    21a84d <Allocator_alignedRealloc.47+0xfd>
  21a84d:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  21a851:	b8 28 00 00 00       	mov    eax,0x28
  21a856:	89 c2                	mov    edx,eax
        const old_byte_slice = @sliceToBytes(old_mem);
  21a858:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  21a85f:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  21a862:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  21a866:	48 6b 71 08 28       	imul   rsi,QWORD PTR [rcx+0x8],0x28
  21a86b:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  21a86f:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  21a873:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
  21a87a:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  21a87e:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  21a885:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  21a88c:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  21a893:	e8 18 ab ff ff       	call   2153b0 <mul>
  21a898:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  21a89d:	74 44                	je     21a8e3 <Allocator_alignedRealloc.47+0x193>
  21a89f:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  21a8a6:	e8 e5 13 ff ff       	call   20bc90 <__zig_return_error>
  21a8ab:	48 8b 3d 56 e7 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffee756]        # 209008 <__unnamed_104>
  21a8b2:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  21a8b9:	48 89 38             	mov    QWORD PTR [rax],rdi
  21a8bc:	48 8b 3d 4d e7 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffee74d]        # 209010 <__unnamed_104+0x8>
  21a8c3:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  21a8c7:	48 8b 3d 4a e7 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffee74a]        # 209018 <__unnamed_104+0x10>
  21a8ce:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  21a8d2:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21a8d9:	48 81 c4 88 01 00 00 	add    rsp,0x188
  21a8e0:	5b                   	pop    rbx
  21a8e1:	5d                   	pop    rbp
  21a8e2:	c3                   	ret    
  21a8e3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21a8e7:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  21a8ee:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  21a8f2:	48 8d 8d 00 ff ff ff 	lea    rcx,[rbp-0x100]
  21a8f9:	41 b9 08 00 00 00    	mov    r9d,0x8
  21a8ff:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  21a906:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
        const byte_slice = try self.reallocFn(self, old_byte_slice, byte_count, alignment);
  21a90d:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  21a914:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  21a918:	48 8b b5 18 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe8]
  21a91f:	4c 8b 85 f8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x108]
  21a926:	4c 8b 95 c8 fe ff ff 	mov    r10,QWORD PTR [rbp-0x138]
  21a92d:	48 89 b5 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rsi
  21a934:	4c 89 d6             	mov    rsi,r10
  21a937:	4c 8b 9d a8 fe ff ff 	mov    r11,QWORD PTR [rbp-0x158]
  21a93e:	48 89 95 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdx
  21a945:	4c 89 da             	mov    rdx,r11
  21a948:	48 8b 9d a0 fe ff ff 	mov    rbx,QWORD PTR [rbp-0x160]
  21a94f:	ff d3                	call   rbx
  21a951:	66 83 7d 98 00       	cmp    WORD PTR [rbp-0x68],0x0
  21a956:	74 5d                	je     21a9b5 <Allocator_alignedRealloc.47+0x265>
  21a958:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  21a95c:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  21a963:	66 89 85 9e fe ff ff 	mov    WORD PTR [rbp-0x162],ax
  21a96a:	e8 21 13 ff ff       	call   20bc90 <__zig_return_error>
  21a96f:	66 8b 85 9e fe ff ff 	mov    ax,WORD PTR [rbp-0x162]
  21a976:	66 89 85 68 ff ff ff 	mov    WORD PTR [rbp-0x98],ax
  21a97d:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  21a984:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  21a98b:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21a98e:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  21a995:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21a999:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  21a9a0:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  21a9a4:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21a9ab:	48 81 c4 88 01 00 00 	add    rsp,0x188
  21a9b2:	5b                   	pop    rbx
  21a9b3:	5d                   	pop    rbp
  21a9b4:	c3                   	ret    
  21a9b5:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  21a9b9:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  21a9c0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  21a9c4:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
        assert(byte_slice.len == byte_count);
  21a9cb:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  21a9d2:	48 3b 85 f8 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x108]
  21a9d9:	0f 94 c1             	sete   cl
  21a9dc:	0f b6 f9             	movzx  edi,cl
  21a9df:	e8 1c 06 ff ff       	call   20b000 <assert>
        if (n > old_mem.len) {
  21a9e4:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  21a9eb:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  21a9f2:	48 3b 42 08          	cmp    rax,QWORD PTR [rdx+0x8]
  21a9f6:	76 71                	jbe    21aa69 <Allocator_alignedRealloc.47+0x319>
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  21a9f8:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  21a9ff:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21aa06:	48 39 c8             	cmp    rax,rcx
  21aa09:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  21aa10:	48 89 8d 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rcx
  21aa17:	76 78                	jbe    21aa91 <Allocator_alignedRealloc.47+0x341>
  21aa19:	eb 66                	jmp    21aa81 <Allocator_alignedRealloc.47+0x331>
  21aa1b:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  21aa22:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
  21aa29:	48 39 c8             	cmp    rax,rcx
  21aa2c:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  21aa33:	73 32                	jae    21aa67 <Allocator_alignedRealloc.47+0x317>
  21aa35:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  21aa3c:	48 03 8d 58 ff ff ff 	add    rcx,QWORD PTR [rbp-0xa8]
  21aa43:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
                byte.* = undefined;
  21aa4a:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  21aa51:	88 01                	mov    BYTE PTR [rcx],al
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  21aa53:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  21aa5a:	48 83 c1 01          	add    rcx,0x1
  21aa5e:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
  21aa65:	eb b4                	jmp    21aa1b <Allocator_alignedRealloc.47+0x2cb>
        if (n > old_mem.len) {
  21aa67:	eb 02                	jmp    21aa6b <Allocator_alignedRealloc.47+0x31b>
  21aa69:	eb 00                	jmp    21aa6b <Allocator_alignedRealloc.47+0x31b>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  21aa6b:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  21aa72:	48 83 e0 07          	and    rax,0x7
  21aa76:	48 83 f8 00          	cmp    rax,0x0
  21aa7a:	74 7b                	je     21aaf7 <Allocator_alignedRealloc.47+0x3a7>
  21aa7c:	e9 ae 00 00 00       	jmp    21ab2f <Allocator_alignedRealloc.47+0x3df>
  21aa81:	48 8d 3d 50 89 02 00 	lea    rdi,[rip+0x28950]        # 2433d8 <__unnamed_20>
  21aa88:	31 c0                	xor    eax,eax
  21aa8a:	89 c6                	mov    esi,eax
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  21aa8c:	e8 6f 0b ff ff       	call   20b600 <panic>
  21aa91:	be aa 00 00 00       	mov    esi,0xaa
  21aa96:	b8 08 00 00 00       	mov    eax,0x8
  21aa9b:	89 c2                	mov    edx,eax
  21aa9d:	48 8d 8d e0 fe ff ff 	lea    rcx,[rbp-0x120]
  21aaa4:	48 8b bd 90 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x170]
  21aaab:	48 03 bd e8 fe ff ff 	add    rdi,QWORD PTR [rbp-0x118]
  21aab2:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
  21aab9:	48 8b bd 88 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x178]
  21aac0:	4c 8b 85 90 fe ff ff 	mov    r8,QWORD PTR [rbp-0x170]
  21aac7:	4c 29 c7             	sub    rdi,r8
  21aaca:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  21aad1:	48 89 cf             	mov    rdi,rcx
  21aad4:	e8 77 9d 01 00       	call   234850 <memset>
  21aad9:	48 c7 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],0x0
  21aae0:	00 00 00 00 
  21aae4:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  21aaeb:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  21aaf2:	e9 24 ff ff ff       	jmp    21aa1b <Allocator_alignedRealloc.47+0x2cb>
  21aaf7:	b8 28 00 00 00       	mov    eax,0x28
  21aafc:	89 c1                	mov    ecx,eax
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  21aafe:	48 8b 95 e8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x118]
  21ab05:	48 89 95 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdx
  21ab0c:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  21ab13:	48 89 d0             	mov    rax,rdx
  21ab16:	31 f6                	xor    esi,esi
  21ab18:	48 89 95 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rdx
  21ab1f:	89 f2                	mov    edx,esi
  21ab21:	48 f7 f1             	div    rcx
  21ab24:	48 83 fa 00          	cmp    rdx,0x0
  21ab28:	74 15                	je     21ab3f <Allocator_alignedRealloc.47+0x3ef>
  21ab2a:	e9 87 00 00 00       	jmp    21abb6 <Allocator_alignedRealloc.47+0x466>
  21ab2f:	48 8d 3d 7a 8a 02 00 	lea    rdi,[rip+0x28a7a]        # 2435b0 <__unnamed_75>
  21ab36:	31 c0                	xor    eax,eax
  21ab38:	89 c6                	mov    esi,eax
  21ab3a:	e8 c1 0a ff ff       	call   20b600 <panic>
  21ab3f:	b8 28 00 00 00       	mov    eax,0x28
  21ab44:	89 c1                	mov    ecx,eax
  21ab46:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  21ab4d:	31 d2                	xor    edx,edx
  21ab4f:	48 f7 f1             	div    rcx
  21ab52:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  21ab59:	66 c7 85 20 ff ff ff 	mov    WORD PTR [rbp-0xe0],0x0
  21ab60:	00 00 
  21ab62:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  21ab69:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  21ab70:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  21ab77:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  21ab7e:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21ab85:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  21ab8c:	48 89 01             	mov    QWORD PTR [rcx],rax
  21ab8f:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  21ab96:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21ab9a:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21aba1:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21aba5:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21abac:	48 81 c4 88 01 00 00 	add    rsp,0x188
  21abb3:	5b                   	pop    rbx
  21abb4:	5d                   	pop    rbp
  21abb5:	c3                   	ret    
  21abb6:	48 8d 3d 0b 8a 02 00 	lea    rdi,[rip+0x28a0b]        # 2435c8 <__unnamed_76>
  21abbd:	31 c0                	xor    eax,eax
  21abbf:	89 c6                	mov    esi,eax
  21abc1:	e8 3a 0a ff ff       	call   20b600 <panic>
  21abc6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  21abcd:	00 00 00 

000000000021abd0 <Allocator_alignedAlloc.48>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  21abd0:	55                   	push   rbp
  21abd1:	48 89 e5             	mov    rbp,rsp
  21abd4:	48 81 ec 20 01 00 00 	sub    rsp,0x120
  21abdb:	48 89 f8             	mov    rax,rdi
  21abde:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  21abe5:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  21abec:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  21abf3:	00 
  21abf4:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  21abfb:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  21ac02:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  21ac09:	75 37                	jne    21ac42 <Allocator_alignedAlloc.48+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  21ac0b:	48 8b 05 0e e4 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffee40e]        # 209020 <__unnamed_105>
  21ac12:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21ac19:	48 89 01             	mov    QWORD PTR [rcx],rax
  21ac1c:	48 8b 05 05 e4 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffee405]        # 209028 <__unnamed_105+0x8>
  21ac23:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21ac27:	48 8b 05 02 e4 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffee402]        # 209030 <__unnamed_105+0x10>
  21ac2e:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21ac32:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21ac39:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21ac40:	5d                   	pop    rbp
  21ac41:	c3                   	ret    
        if (n == 0) {
  21ac42:	eb 00                	jmp    21ac44 <Allocator_alignedAlloc.48+0x74>
  21ac44:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  21ac48:	b8 28 00 00 00       	mov    eax,0x28
  21ac4d:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  21ac4f:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  21ac56:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21ac5d:	e8 4e a7 ff ff       	call   2153b0 <mul>
  21ac62:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  21ac67:	74 43                	je     21acac <Allocator_alignedAlloc.48+0xdc>
  21ac69:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  21ac70:	e8 1b 10 ff ff       	call   20bc90 <__zig_return_error>
  21ac75:	48 8b 3d bc e3 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffee3bc]        # 209038 <__unnamed_106>
  21ac7c:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21ac83:	48 89 38             	mov    QWORD PTR [rax],rdi
  21ac86:	48 8b 3d b3 e3 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffee3b3]        # 209040 <__unnamed_106+0x8>
  21ac8d:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  21ac91:	48 8b 3d b0 e3 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffee3b0]        # 209048 <__unnamed_106+0x10>
  21ac98:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  21ac9c:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21aca3:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21acaa:	5d                   	pop    rbp
  21acab:	c3                   	ret    
  21acac:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21acb0:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  21acb7:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  21acbb:	41 b8 08 00 00 00    	mov    r8d,0x8
  21acc1:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  21acc8:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  21accf:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  21acd6:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  21acd9:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  21ace0:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  21ace7:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  21acee:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  21acf5:	4c 89 ce             	mov    rsi,r9
  21acf8:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  21acff:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  21ad06:	4c 89 d1             	mov    rcx,r10
  21ad09:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  21ad10:	41 ff d3             	call   r11
  21ad13:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  21ad18:	74 50                	je     21ad6a <Allocator_alignedAlloc.48+0x19a>
  21ad1a:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  21ad1e:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  21ad25:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  21ad2c:	e8 5f 0f ff ff       	call   20bc90 <__zig_return_error>
  21ad31:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  21ad38:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  21ad3c:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  21ad40:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21ad47:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21ad4a:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  21ad4e:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21ad52:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  21ad56:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  21ad5a:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21ad61:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21ad68:	5d                   	pop    rbp
  21ad69:	c3                   	ret    
  21ad6a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  21ad6e:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  21ad75:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21ad79:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  21ad80:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  21ad87:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  21ad8e:	0f 94 c1             	sete   cl
  21ad91:	0f b6 f9             	movzx  edi,cl
  21ad94:	e8 67 02 ff ff       	call   20b000 <assert>
  21ad99:	be aa 00 00 00       	mov    esi,0xaa
  21ad9e:	bf 08 00 00 00       	mov    edi,0x8
  21ada3:	89 fa                	mov    edx,edi
  21ada5:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  21adac:	48 89 c7             	mov    rdi,rax
  21adaf:	e8 9c 9a 01 00       	call   234850 <memset>
  21adb4:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  21adbb:	00 00 00 00 
  21adbf:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  21adc6:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  21adcd:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  21add4:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  21addb:	48 39 c8             	cmp    rax,rcx
  21adde:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  21ade5:	73 32                	jae    21ae19 <Allocator_alignedAlloc.48+0x249>
  21ade7:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21adee:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  21adf5:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  21adfc:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  21ae03:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  21ae05:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21ae0c:	48 83 c1 01          	add    rcx,0x1
  21ae10:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  21ae17:	eb b4                	jmp    21adcd <Allocator_alignedAlloc.48+0x1fd>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  21ae19:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  21ae20:	48 83 e0 07          	and    rax,0x7
  21ae24:	48 83 f8 00          	cmp    rax,0x0
  21ae28:	75 32                	jne    21ae5c <Allocator_alignedAlloc.48+0x28c>
  21ae2a:	b8 28 00 00 00       	mov    eax,0x28
  21ae2f:	89 c1                	mov    ecx,eax
  21ae31:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
  21ae38:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
  21ae3c:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
  21ae43:	48 89 d0             	mov    rax,rdx
  21ae46:	31 f6                	xor    esi,esi
  21ae48:	48 89 95 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdx
  21ae4f:	89 f2                	mov    edx,esi
  21ae51:	48 f7 f1             	div    rcx
  21ae54:	48 83 fa 00          	cmp    rdx,0x0
  21ae58:	74 12                	je     21ae6c <Allocator_alignedAlloc.48+0x29c>
  21ae5a:	eb 77                	jmp    21aed3 <Allocator_alignedAlloc.48+0x303>
  21ae5c:	48 8d 3d 4d 87 02 00 	lea    rdi,[rip+0x2874d]        # 2435b0 <__unnamed_75>
  21ae63:	31 c0                	xor    eax,eax
  21ae65:	89 c6                	mov    esi,eax
  21ae67:	e8 94 07 ff ff       	call   20b600 <panic>
  21ae6c:	b8 28 00 00 00       	mov    eax,0x28
  21ae71:	89 c1                	mov    ecx,eax
  21ae73:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  21ae7a:	31 d2                	xor    edx,edx
  21ae7c:	48 f7 f1             	div    rcx
  21ae7f:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  21ae83:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  21ae8a:	00 00 
  21ae8c:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  21ae90:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  21ae97:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  21ae9b:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  21ae9f:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21aea6:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21aead:	48 89 01             	mov    QWORD PTR [rcx],rax
  21aeb0:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  21aeb7:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21aebb:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  21aebf:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21aec3:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21aeca:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21aed1:	5d                   	pop    rbp
  21aed2:	c3                   	ret    
  21aed3:	48 8d 3d ee 86 02 00 	lea    rdi,[rip+0x286ee]        # 2435c8 <__unnamed_76>
  21aeda:	31 c0                	xor    eax,eax
  21aedc:	89 c6                	mov    esi,eax
  21aede:	e8 1d 07 ff ff       	call   20b600 <panic>
  21aee3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21aeea:	84 00 00 00 00 00 

000000000021aef0 <Allocator_free.49>:
    pub fn free(self: *Allocator, memory: var) void {
  21aef0:	55                   	push   rbp
  21aef1:	48 89 e5             	mov    rbp,rsp
  21aef4:	48 83 ec 60          	sub    rsp,0x60
  21aef8:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
        const bytes = @sliceToBytes(memory);
  21aefc:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  21aeff:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  21af03:	48 6b 76 08 28       	imul   rsi,QWORD PTR [rsi+0x8],0x28
  21af08:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21af0c:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  21af10:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  21af14:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21af18:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        if (bytes.len == 0) return;
  21af1c:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
  21af21:	75 06                	jne    21af29 <Allocator_free.49+0x39>
  21af23:	48 83 c4 60          	add    rsp,0x60
  21af27:	5d                   	pop    rbp
  21af28:	c3                   	ret    
  21af29:	31 c0                	xor    eax,eax
  21af2b:	89 c1                	mov    ecx,eax
        const non_const_ptr = @intToPtr([*]u8, @ptrToInt(bytes.ptr));
  21af2d:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  21af31:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
        self.freeFn(self, non_const_ptr[0..bytes.len]);
  21af35:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  21af39:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  21af3d:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  21af41:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  21af45:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
  21af49:	48 39 f1             	cmp    rcx,rsi
  21af4c:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
  21af50:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
  21af54:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  21af58:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  21af5c:	76 10                	jbe    21af6e <Allocator_free.49+0x7e>
  21af5e:	48 8d 3d 73 84 02 00 	lea    rdi,[rip+0x28473]        # 2433d8 <__unnamed_20>
  21af65:	31 c0                	xor    eax,eax
  21af67:	89 c6                	mov    esi,eax
  21af69:	e8 92 06 ff ff       	call   20b600 <panic>
  21af6e:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
  21af72:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21af76:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  21af7a:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  21af7e:	48 83 e9 00          	sub    rcx,0x0
  21af82:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  21af86:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  21af8a:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  21af8e:	ff d1                	call   rcx
    pub fn free(self: *Allocator, memory: var) void {
  21af90:	48 83 c4 60          	add    rsp,0x60
  21af94:	5d                   	pop    rbp
  21af95:	c3                   	ret    
  21af96:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  21af9d:	00 00 00 

000000000021afa0 <parseFormValueTargetAddrSize>:
fn parseFormValueTargetAddrSize(in_stream: var) !u64 {
  21afa0:	55                   	push   rbp
  21afa1:	48 89 e5             	mov    rbp,rsp
  21afa4:	48 83 ec 70          	sub    rsp,0x70
  21afa8:	48 89 f8             	mov    rax,rdi
  21afab:	48 8d 4d f0          	lea    rcx,[rbp-0x10]
  21afaf:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
    return if (@sizeOf(usize) == 4) u64(try in_stream.readIntLe(u32)) else if (@sizeOf(usize) == 8) try in_stream.readIntLe(u64) else unreachable;
  21afb3:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  21afb7:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  21afbb:	48 89 cf             	mov    rdi,rcx
  21afbe:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  21afc2:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  21afc6:	e8 b5 b6 ff ff       	call   216680 <InStream(ReadError)_readIntLe.38>
  21afcb:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  21afd0:	74 36                	je     21b008 <parseFormValueTargetAddrSize+0x68>
  21afd2:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  21afd6:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  21afda:	66 89 45 9e          	mov    WORD PTR [rbp-0x62],ax
  21afde:	e8 ad 0c ff ff       	call   20bc90 <__zig_return_error>
  21afe3:	66 8b 45 9e          	mov    ax,WORD PTR [rbp-0x62]
  21afe7:	66 89 45 d0          	mov    WORD PTR [rbp-0x30],ax
  21afeb:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  21afef:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  21aff3:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21aff6:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  21affa:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21affe:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  21b002:	48 83 c4 70          	add    rsp,0x70
  21b006:	5d                   	pop    rbp
  21b007:	c3                   	ret    
  21b008:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21b00c:	66 c7 45 c0 00 00    	mov    WORD PTR [rbp-0x40],0x0
  21b012:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  21b016:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  21b01a:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  21b01e:	48 89 01             	mov    QWORD PTR [rcx],rax
  21b021:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21b025:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21b029:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  21b02d:	48 83 c4 70          	add    rsp,0x70
  21b031:	5d                   	pop    rbp
  21b032:	c3                   	ret    
  21b033:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21b03a:	84 00 00 00 00 00 

000000000021b040 <parseFormValueBlock>:
fn parseFormValueBlock(allocator: *mem.Allocator, in_stream: var, size: usize) !FormValue {
  21b040:	55                   	push   rbp
  21b041:	48 89 e5             	mov    rbp,rsp
  21b044:	48 81 ec c0 00 00 00 	sub    rsp,0xc0
  21b04b:	48 89 f8             	mov    rax,rdi
  21b04e:	4c 8d 4d f0          	lea    r9,[rbp-0x10]
  21b052:	41 ba 01 00 00 00    	mov    r10d,0x1
  21b058:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
  21b05c:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
  21b060:	4c 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r8
    const block_len = try in_stream.readVarInt(builtin.Endian.Little, usize, size);
  21b067:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
  21b06b:	4c 8b 85 78 ff ff ff 	mov    r8,QWORD PTR [rbp-0x88]
  21b072:	48 89 bd 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdi
  21b079:	4c 89 cf             	mov    rdi,r9
  21b07c:	48 89 b5 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rsi
  21b083:	44 89 d1             	mov    ecx,r10d
  21b086:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  21b08d:	e8 3e c9 00 00       	call   2279d0 <InStream(ReadError)_readVarInt>
  21b092:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  21b097:	74 5a                	je     21b0f3 <parseFormValueBlock+0xb3>
  21b099:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  21b09d:	48 8b bd 60 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  21b0a4:	66 89 85 56 ff ff ff 	mov    WORD PTR [rbp-0xaa],ax
  21b0ab:	e8 e0 0b ff ff       	call   20bc90 <__zig_return_error>
  21b0b0:	b9 28 00 00 00       	mov    ecx,0x28
  21b0b5:	89 ca                	mov    edx,ecx
  21b0b7:	48 8d 7d b8          	lea    rdi,[rbp-0x48]
  21b0bb:	66 8b 85 56 ff ff ff 	mov    ax,WORD PTR [rbp-0xaa]
  21b0c2:	66 89 45 b8          	mov    WORD PTR [rbp-0x48],ax
  21b0c6:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
  21b0cd:	48 89 bd 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdi
  21b0d4:	48 89 f7             	mov    rdi,rsi
  21b0d7:	48 8b b5 48 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xb8]
  21b0de:	e8 bd 97 01 00       	call   2348a0 <memcpy>
  21b0e3:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
  21b0ea:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  21b0f1:	5d                   	pop    rbp
  21b0f2:	c3                   	ret    
  21b0f3:	48 8d 7d 90          	lea    rdi,[rbp-0x70]
  21b0f7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21b0fb:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
    return parseFormValueBlockLen(allocator, in_stream, block_len);
  21b102:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
  21b106:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  21b10a:	4c 8b 85 70 ff ff ff 	mov    r8,QWORD PTR [rbp-0x90]
  21b111:	48 8b b5 60 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa0]
  21b118:	e8 53 00 00 00       	call   21b170 <parseFormValueBlockLen>
  21b11d:	66 83 7d 90 00       	cmp    WORD PTR [rbp-0x70],0x0
  21b122:	74 0e                	je     21b132 <parseFormValueBlock+0xf2>
  21b124:	48 8b bd 60 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  21b12b:	e8 60 0b ff ff       	call   20bc90 <__zig_return_error>
  21b130:	eb 02                	jmp    21b134 <parseFormValueBlock+0xf4>
  21b132:	eb 00                	jmp    21b134 <parseFormValueBlock+0xf4>
  21b134:	b8 28 00 00 00       	mov    eax,0x28
  21b139:	89 c2                	mov    edx,eax
  21b13b:	48 8d 4d 90          	lea    rcx,[rbp-0x70]
  21b13f:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
  21b146:	48 89 f7             	mov    rdi,rsi
  21b149:	48 89 ce             	mov    rsi,rcx
  21b14c:	e8 4f 97 01 00       	call   2348a0 <memcpy>
  21b151:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
  21b158:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  21b15f:	5d                   	pop    rbp
  21b160:	c3                   	ret    
  21b161:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21b168:	0f 1f 84 00 00 00 00 
  21b16f:	00 

000000000021b170 <parseFormValueBlockLen>:
fn parseFormValueBlockLen(allocator: *mem.Allocator, in_stream: var, size: usize) !FormValue {
  21b170:	55                   	push   rbp
  21b171:	48 89 e5             	mov    rbp,rsp
  21b174:	48 81 ec 00 01 00 00 	sub    rsp,0x100
  21b17b:	48 89 f8             	mov    rax,rdi
  21b17e:	4c 8d 4d e8          	lea    r9,[rbp-0x18]
  21b182:	48 89 95 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdx
  21b189:	48 89 8d 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rcx
  21b190:	4c 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],r8
    const buf = try readAllocBytes(allocator, in_stream, size);
  21b197:	48 8b 95 58 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa8]
  21b19e:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
  21b1a5:	4c 8b 85 48 ff ff ff 	mov    r8,QWORD PTR [rbp-0xb8]
  21b1ac:	48 89 bd 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rdi
  21b1b3:	4c 89 cf             	mov    rdi,r9
  21b1b6:	48 89 b5 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rsi
  21b1bd:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  21b1c4:	e8 77 02 00 00       	call   21b440 <readAllocBytes>
  21b1c9:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  21b1ce:	74 5a                	je     21b22a <parseFormValueBlockLen+0xba>
  21b1d0:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  21b1d4:	48 8b bd 20 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe0]
  21b1db:	66 89 85 16 ff ff ff 	mov    WORD PTR [rbp-0xea],ax
  21b1e2:	e8 a9 0a ff ff       	call   20bc90 <__zig_return_error>
  21b1e7:	b9 28 00 00 00       	mov    ecx,0x28
  21b1ec:	89 ca                	mov    edx,ecx
  21b1ee:	48 8d 7d a8          	lea    rdi,[rbp-0x58]
  21b1f2:	66 8b 85 16 ff ff ff 	mov    ax,WORD PTR [rbp-0xea]
  21b1f9:	66 89 45 a8          	mov    WORD PTR [rbp-0x58],ax
  21b1fd:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21b204:	48 89 bd 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdi
  21b20b:	48 89 f7             	mov    rdi,rsi
  21b20e:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
  21b215:	e8 86 96 01 00       	call   2348a0 <memcpy>
  21b21a:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  21b221:	48 81 c4 00 01 00 00 	add    rsp,0x100
  21b228:	5d                   	pop    rbp
  21b229:	c3                   	ret    
  21b22a:	b8 28 00 00 00       	mov    eax,0x28
  21b22f:	89 c2                	mov    edx,eax
  21b231:	48 8d 8d 60 ff ff ff 	lea    rcx,[rbp-0xa0]
  21b238:	c5 fa 6f 45 f0       	vmovdqu xmm0,XMMWORD PTR [rbp-0x10]
  21b23d:	c5 f9 7f 85 30 ff ff 	vmovdqa XMMWORD PTR [rbp-0xd0],xmm0
  21b244:	ff 
    return FormValue{ .Block = buf };
  21b245:	c6 45 a0 01          	mov    BYTE PTR [rbp-0x60],0x1
  21b249:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  21b250:	48 89 75 88          	mov    QWORD PTR [rbp-0x78],rsi
  21b254:	48 8b b5 38 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc8]
  21b25b:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
  21b25f:	66 c7 85 60 ff ff ff 	mov    WORD PTR [rbp-0xa0],0x0
  21b266:	00 00 
  21b268:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
  21b26c:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
  21b273:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  21b277:	48 89 b5 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rsi
  21b27e:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  21b282:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
  21b289:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  21b28d:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
  21b291:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21b298:	48 89 f7             	mov    rdi,rsi
  21b29b:	48 89 ce             	mov    rsi,rcx
  21b29e:	e8 fd 95 01 00       	call   2348a0 <memcpy>
  21b2a3:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  21b2aa:	48 81 c4 00 01 00 00 	add    rsp,0x100
  21b2b1:	5d                   	pop    rbp
  21b2b2:	c3                   	ret    
  21b2b3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21b2ba:	84 00 00 00 00 00 

000000000021b2c0 <parseFormValueConstant>:
fn parseFormValueConstant(allocator: *mem.Allocator, in_stream: var, signed: bool, size: usize) !FormValue {
  21b2c0:	55                   	push   rbp
  21b2c1:	48 89 e5             	mov    rbp,rsp
  21b2c4:	48 81 ec 00 01 00 00 	sub    rsp,0x100
  21b2cb:	44 88 c0             	mov    al,r8b
  21b2ce:	49 89 fa             	mov    r10,rdi
  21b2d1:	4c 8d 5d e8          	lea    r11,[rbp-0x18]
  21b2d5:	48 89 95 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rdx
  21b2dc:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  21b2e3:	24 01                	and    al,0x1
  21b2e5:	88 85 37 ff ff ff    	mov    BYTE PTR [rbp-0xc9],al
  21b2eb:	4c 89 8d 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],r9
            .signed = signed,
  21b2f2:	8a 85 37 ff ff ff    	mov    al,BYTE PTR [rbp-0xc9]
            .payload = try readAllocBytes(allocator, in_stream, size),
  21b2f8:	48 8b 95 40 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc0]
  21b2ff:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
  21b306:	4c 8b 85 28 ff ff ff 	mov    r8,QWORD PTR [rbp-0xd8]
  21b30d:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  21b314:	4c 89 df             	mov    rdi,r11
  21b317:	48 89 b5 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rsi
  21b31e:	4c 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],r10
  21b325:	88 85 0f ff ff ff    	mov    BYTE PTR [rbp-0xf1],al
  21b32b:	e8 10 01 00 00       	call   21b440 <readAllocBytes>
  21b330:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  21b335:	74 5a                	je     21b391 <parseFormValueConstant+0xd1>
  21b337:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  21b33b:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
  21b342:	66 89 85 0c ff ff ff 	mov    WORD PTR [rbp-0xf4],ax
  21b349:	e8 42 09 ff ff       	call   20bc90 <__zig_return_error>
  21b34e:	b9 28 00 00 00       	mov    ecx,0x28
  21b353:	89 ca                	mov    edx,ecx
  21b355:	48 8d 7d a8          	lea    rdi,[rbp-0x58]
  21b359:	66 8b 85 0c ff ff ff 	mov    ax,WORD PTR [rbp-0xf4]
  21b360:	66 89 45 a8          	mov    WORD PTR [rbp-0x58],ax
  21b364:	48 8b b5 20 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe0]
  21b36b:	48 89 bd 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rdi
  21b372:	48 89 f7             	mov    rdi,rsi
  21b375:	48 8b b5 00 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x100]
  21b37c:	e8 1f 95 01 00       	call   2348a0 <memcpy>
  21b381:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  21b388:	48 81 c4 00 01 00 00 	add    rsp,0x100
  21b38f:	5d                   	pop    rbp
  21b390:	c3                   	ret    
  21b391:	b8 28 00 00 00       	mov    eax,0x28
  21b396:	89 c2                	mov    edx,eax
  21b398:	48 8d 8d 48 ff ff ff 	lea    rcx,[rbp-0xb8]
        .Const = Constant{
  21b39f:	c5 fa 6f 45 f0       	vmovdqu xmm0,XMMWORD PTR [rbp-0x10]
  21b3a4:	c5 f9 7f 45 90       	vmovdqa XMMWORD PTR [rbp-0x70],xmm0
  21b3a9:	40 8a b5 0f ff ff ff 	mov    sil,BYTE PTR [rbp-0xf1]
  21b3b0:	40 80 e6 01          	and    sil,0x1
  21b3b4:	40 88 75 a0          	mov    BYTE PTR [rbp-0x60],sil
    return FormValue{
  21b3b8:	c6 45 88 02          	mov    BYTE PTR [rbp-0x78],0x2
  21b3bc:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  21b3c0:	48 89 bd 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdi
  21b3c7:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  21b3cb:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
  21b3d2:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  21b3d6:	48 89 7d 80          	mov    QWORD PTR [rbp-0x80],rdi
  21b3da:	66 c7 85 48 ff ff ff 	mov    WORD PTR [rbp-0xb8],0x0
  21b3e1:	00 00 
  21b3e3:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  21b3ea:	48 89 bd 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdi
  21b3f1:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  21b3f8:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
  21b3ff:	48 8b 7d 80          	mov    rdi,QWORD PTR [rbp-0x80]
  21b403:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  21b40a:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  21b40e:	48 89 bd 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdi
  21b415:	48 8b bd 20 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe0]
  21b41c:	48 89 ce             	mov    rsi,rcx
  21b41f:	e8 7c 94 01 00       	call   2348a0 <memcpy>
  21b424:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  21b42b:	48 81 c4 00 01 00 00 	add    rsp,0x100
  21b432:	5d                   	pop    rbp
  21b433:	c3                   	ret    
  21b434:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21b43b:	00 00 00 00 00 

000000000021b440 <readAllocBytes>:
fn readAllocBytes(allocator: *mem.Allocator, in_stream: var, size: usize) ![]u8 {
  21b440:	55                   	push   rbp
  21b441:	48 89 e5             	mov    rbp,rsp
  21b444:	48 81 ec e0 00 00 00 	sub    rsp,0xe0
  21b44b:	48 89 f8             	mov    rax,rdi
  21b44e:	4c 8d 4d e8          	lea    r9,[rbp-0x18]
  21b452:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
  21b459:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
  21b460:	4c 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],r8
    const buf = try allocator.alloc(u8, size);
  21b467:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  21b46e:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
  21b475:	48 89 bd 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdi
  21b47c:	4c 89 cf             	mov    rdi,r9
  21b47f:	48 89 b5 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rsi
  21b486:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  21b48d:	e8 ae 6f 00 00       	call   222440 <Allocator_alloc.74>
  21b492:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  21b497:	74 50                	je     21b4e9 <readAllocBytes+0xa9>
  21b499:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  21b49d:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
  21b4a4:	66 89 85 26 ff ff ff 	mov    WORD PTR [rbp-0xda],ax
  21b4ab:	e8 e0 07 ff ff       	call   20bc90 <__zig_return_error>
  21b4b0:	66 8b 85 26 ff ff ff 	mov    ax,WORD PTR [rbp-0xda]
  21b4b7:	66 89 45 b8          	mov    WORD PTR [rbp-0x48],ax
  21b4bb:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  21b4bf:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
  21b4c6:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21b4c9:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21b4cd:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21b4d1:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  21b4d5:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  21b4d9:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  21b4e0:	48 81 c4 e0 00 00 00 	add    rsp,0xe0
  21b4e7:	5d                   	pop    rbp
  21b4e8:	c3                   	ret    
  21b4e9:	48 8d 7d a8          	lea    rdi,[rbp-0x58]
  21b4ed:	48 8d 8d 40 ff ff ff 	lea    rcx,[rbp-0xc0]
  21b4f4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21b4f8:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  21b4ff:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21b503:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
    if ((try in_stream.read(buf)) < size) return error.EndOfFile;
  21b50a:	48 8b 95 58 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa8]
  21b511:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  21b518:	e8 e3 92 ff ff       	call   214800 <InStream(ReadError)_read>
  21b51d:	66 83 7d a8 00       	cmp    WORD PTR [rbp-0x58],0x0
  21b522:	74 63                	je     21b587 <readAllocBytes+0x147>
  21b524:	48 8d b5 40 ff ff ff 	lea    rsi,[rbp-0xc0]
    errdefer allocator.free(buf);
  21b52b:	48 8b bd 60 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  21b532:	e8 d9 6d 00 00       	call   222310 <Allocator_free.73>
    if ((try in_stream.read(buf)) < size) return error.EndOfFile;
  21b537:	66 8b 45 a8          	mov    ax,WORD PTR [rbp-0x58]
  21b53b:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
  21b542:	66 89 85 24 ff ff ff 	mov    WORD PTR [rbp-0xdc],ax
  21b549:	e8 42 07 ff ff       	call   20bc90 <__zig_return_error>
  21b54e:	66 8b 85 24 ff ff ff 	mov    ax,WORD PTR [rbp-0xdc]
  21b555:	66 89 45 80          	mov    WORD PTR [rbp-0x80],ax
  21b559:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  21b55d:	48 8b bd 38 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xc8]
  21b564:	48 89 37             	mov    QWORD PTR [rdi],rsi
  21b567:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
  21b56b:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  21b56f:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  21b573:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  21b577:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  21b57e:	48 81 c4 e0 00 00 00 	add    rsp,0xe0
  21b585:	5d                   	pop    rbp
  21b586:	c3                   	ret    
  21b587:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  21b58b:	48 3b 85 50 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xb0]
  21b592:	73 56                	jae    21b5ea <readAllocBytes+0x1aa>
  21b594:	48 8d b5 40 ff ff ff 	lea    rsi,[rbp-0xc0]
    errdefer allocator.free(buf);
  21b59b:	48 8b bd 60 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  21b5a2:	e8 69 6d 00 00       	call   222310 <Allocator_free.73>
    if ((try in_stream.read(buf)) < size) return error.EndOfFile;
  21b5a7:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
  21b5ae:	e8 dd 06 ff ff       	call   20bc90 <__zig_return_error>
  21b5b3:	48 8b 35 2e f1 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffef12e]        # 20a6e8 <__unnamed_107>
  21b5ba:	48 8b bd 38 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xc8]
  21b5c1:	48 89 37             	mov    QWORD PTR [rdi],rsi
  21b5c4:	48 8b 35 25 f1 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffef125]        # 20a6f0 <__unnamed_107+0x8>
  21b5cb:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  21b5cf:	48 8b 35 22 f1 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffef122]        # 20a6f8 <__unnamed_107+0x10>
  21b5d6:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  21b5da:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  21b5e1:	48 81 c4 e0 00 00 00 	add    rsp,0xe0
  21b5e8:	5d                   	pop    rbp
  21b5e9:	c3                   	ret    
  21b5ea:	eb 00                	jmp    21b5ec <readAllocBytes+0x1ac>
    return buf;
  21b5ec:	66 c7 85 68 ff ff ff 	mov    WORD PTR [rbp-0x98],0x0
  21b5f3:	00 00 
  21b5f5:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  21b5fc:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  21b603:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  21b60a:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  21b611:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  21b618:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
  21b61f:	48 89 01             	mov    QWORD PTR [rcx],rax
  21b622:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21b629:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21b62d:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  21b634:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21b638:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  21b63f:	48 81 c4 e0 00 00 00 	add    rsp,0xe0
  21b646:	5d                   	pop    rbp
  21b647:	c3                   	ret    
  21b648:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  21b64f:	00 

000000000021b650 <parseFormValueDwarfOffsetSize>:
fn parseFormValueDwarfOffsetSize(in_stream: var, is_64: bool) !u64 {
  21b650:	55                   	push   rbp
  21b651:	48 89 e5             	mov    rbp,rsp
  21b654:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  21b65b:	88 c8                	mov    al,cl
  21b65d:	49 89 f8             	mov    r8,rdi
  21b660:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  21b664:	24 01                	and    al,0x1
  21b666:	88 45 97             	mov    BYTE PTR [rbp-0x69],al
    return if (is_64) try in_stream.readIntLe(u64) else u64(try in_stream.readIntLe(u32));
  21b669:	f6 45 97 01          	test   BYTE PTR [rbp-0x69],0x1
  21b66d:	48 89 75 88          	mov    QWORD PTR [rbp-0x78],rsi
  21b671:	4c 89 45 80          	mov    QWORD PTR [rbp-0x80],r8
  21b675:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
  21b67c:	75 02                	jne    21b680 <parseFormValueDwarfOffsetSize+0x30>
  21b67e:	eb 67                	jmp    21b6e7 <parseFormValueDwarfOffsetSize+0x97>
  21b680:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  21b684:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  21b688:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
  21b68c:	e8 ef af ff ff       	call   216680 <InStream(ReadError)_readIntLe.38>
  21b691:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  21b696:	74 42                	je     21b6da <parseFormValueDwarfOffsetSize+0x8a>
  21b698:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  21b69c:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  21b6a0:	66 89 85 76 ff ff ff 	mov    WORD PTR [rbp-0x8a],ax
  21b6a7:	e8 e4 05 ff ff       	call   20bc90 <__zig_return_error>
  21b6ac:	66 8b 85 76 ff ff ff 	mov    ax,WORD PTR [rbp-0x8a]
  21b6b3:	66 89 45 d0          	mov    WORD PTR [rbp-0x30],ax
  21b6b7:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  21b6bb:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  21b6c2:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21b6c5:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  21b6c9:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21b6cd:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  21b6d1:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  21b6d8:	5d                   	pop    rbp
  21b6d9:	c3                   	ret    
  21b6da:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21b6de:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  21b6e5:	eb 66                	jmp    21b74d <parseFormValueDwarfOffsetSize+0xfd>
  21b6e7:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  21b6eb:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  21b6ef:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
  21b6f3:	e8 28 af ff ff       	call   216620 <InStream(ReadError)_readIntLe>
  21b6f8:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  21b6fd:	74 42                	je     21b741 <parseFormValueDwarfOffsetSize+0xf1>
  21b6ff:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  21b703:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  21b707:	66 89 85 66 ff ff ff 	mov    WORD PTR [rbp-0x9a],ax
  21b70e:	e8 7d 05 ff ff       	call   20bc90 <__zig_return_error>
  21b713:	66 8b 85 66 ff ff ff 	mov    ax,WORD PTR [rbp-0x9a]
  21b71a:	66 89 45 b0          	mov    WORD PTR [rbp-0x50],ax
  21b71e:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  21b722:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  21b729:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21b72c:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  21b730:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21b734:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  21b738:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  21b73f:	5d                   	pop    rbp
  21b740:	c3                   	ret    
  21b741:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  21b744:	89 c1                	mov    ecx,eax
  21b746:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
  21b74d:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  21b754:	66 c7 45 a0 00 00    	mov    WORD PTR [rbp-0x60],0x0
  21b75a:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  21b75e:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  21b762:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  21b769:	48 89 01             	mov    QWORD PTR [rcx],rax
  21b76c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  21b770:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21b774:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  21b778:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  21b77f:	5d                   	pop    rbp
  21b780:	c3                   	ret    
  21b781:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21b788:	0f 1f 84 00 00 00 00 
  21b78f:	00 

000000000021b790 <parseFormValueRef>:
fn parseFormValueRef(allocator: *mem.Allocator, in_stream: var, comptime T: type) !FormValue {
  21b790:	55                   	push   rbp
  21b791:	48 89 e5             	mov    rbp,rsp
  21b794:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  21b79b:	48 89 f8             	mov    rax,rdi
  21b79e:	4c 8d 45 f8          	lea    r8,[rbp-0x8]
  21b7a2:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  21b7a6:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
    const block_len = try in_stream.readIntLe(T);
  21b7aa:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
  21b7ae:	48 89 7d 80          	mov    QWORD PTR [rbp-0x80],rdi
  21b7b2:	4c 89 c7             	mov    rdi,r8
  21b7b5:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
  21b7bc:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  21b7c3:	e8 78 c3 00 00       	call   227b40 <InStream(ReadError)_readIntLe.99>
  21b7c8:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  21b7cd:	74 57                	je     21b826 <parseFormValueRef+0x96>
  21b7cf:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  21b7d3:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  21b7da:	66 89 85 6e ff ff ff 	mov    WORD PTR [rbp-0x92],ax
  21b7e1:	e8 aa 04 ff ff       	call   20bc90 <__zig_return_error>
  21b7e6:	b9 28 00 00 00       	mov    ecx,0x28
  21b7eb:	89 ca                	mov    edx,ecx
  21b7ed:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  21b7f1:	66 8b 85 6e ff ff ff 	mov    ax,WORD PTR [rbp-0x92]
  21b7f8:	66 89 45 c8          	mov    WORD PTR [rbp-0x38],ax
  21b7fc:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  21b800:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  21b807:	48 89 f7             	mov    rdi,rsi
  21b80a:	48 8b b5 60 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa0]
  21b811:	e8 8a 90 01 00       	call   2348a0 <memcpy>
  21b816:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21b81d:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  21b824:	5d                   	pop    rbp
  21b825:	c3                   	ret    
  21b826:	48 8d 7d a0          	lea    rdi,[rbp-0x60]
  21b82a:	8a 45 fa             	mov    al,BYTE PTR [rbp-0x6]
  21b82d:	88 45 8f             	mov    BYTE PTR [rbp-0x71],al
    return parseFormValueRefLen(allocator, in_stream, block_len);
  21b830:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  21b834:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  21b838:	0f b6 75 8f          	movzx  esi,BYTE PTR [rbp-0x71]
  21b83c:	41 89 f0             	mov    r8d,esi
  21b83f:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
  21b846:	e8 55 03 00 00       	call   21bba0 <parseFormValueRefLen>
  21b84b:	66 83 7d a0 00       	cmp    WORD PTR [rbp-0x60],0x0
  21b850:	74 0e                	je     21b860 <parseFormValueRef+0xd0>
  21b852:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  21b859:	e8 32 04 ff ff       	call   20bc90 <__zig_return_error>
  21b85e:	eb 02                	jmp    21b862 <parseFormValueRef+0xd2>
  21b860:	eb 00                	jmp    21b862 <parseFormValueRef+0xd2>
  21b862:	b8 28 00 00 00       	mov    eax,0x28
  21b867:	89 c2                	mov    edx,eax
  21b869:	48 8d 4d a0          	lea    rcx,[rbp-0x60]
  21b86d:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  21b871:	48 89 f7             	mov    rdi,rsi
  21b874:	48 89 ce             	mov    rsi,rcx
  21b877:	e8 24 90 01 00       	call   2348a0 <memcpy>
  21b87c:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21b883:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  21b88a:	5d                   	pop    rbp
  21b88b:	c3                   	ret    
  21b88c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000021b890 <parseFormValueRef.50>:
fn parseFormValueRef(allocator: *mem.Allocator, in_stream: var, comptime T: type) !FormValue {
  21b890:	55                   	push   rbp
  21b891:	48 89 e5             	mov    rbp,rsp
  21b894:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  21b89b:	48 89 f8             	mov    rax,rdi
  21b89e:	4c 8d 45 f8          	lea    r8,[rbp-0x8]
  21b8a2:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  21b8a6:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
    const block_len = try in_stream.readIntLe(T);
  21b8aa:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
  21b8ae:	48 89 7d 80          	mov    QWORD PTR [rbp-0x80],rdi
  21b8b2:	4c 89 c7             	mov    rdi,r8
  21b8b5:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
  21b8bc:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  21b8c3:	e8 d8 c2 00 00       	call   227ba0 <InStream(ReadError)_readIntLe.100>
  21b8c8:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  21b8cd:	74 57                	je     21b926 <parseFormValueRef.50+0x96>
  21b8cf:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  21b8d3:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  21b8da:	66 89 85 6e ff ff ff 	mov    WORD PTR [rbp-0x92],ax
  21b8e1:	e8 aa 03 ff ff       	call   20bc90 <__zig_return_error>
  21b8e6:	b9 28 00 00 00       	mov    ecx,0x28
  21b8eb:	89 ca                	mov    edx,ecx
  21b8ed:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  21b8f1:	66 8b 85 6e ff ff ff 	mov    ax,WORD PTR [rbp-0x92]
  21b8f8:	66 89 45 c8          	mov    WORD PTR [rbp-0x38],ax
  21b8fc:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  21b900:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  21b907:	48 89 f7             	mov    rdi,rsi
  21b90a:	48 8b b5 60 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa0]
  21b911:	e8 8a 8f 01 00       	call   2348a0 <memcpy>
  21b916:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21b91d:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  21b924:	5d                   	pop    rbp
  21b925:	c3                   	ret    
  21b926:	48 8d 7d a0          	lea    rdi,[rbp-0x60]
  21b92a:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  21b92e:	66 89 45 8e          	mov    WORD PTR [rbp-0x72],ax
    return parseFormValueRefLen(allocator, in_stream, block_len);
  21b932:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  21b936:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  21b93a:	0f b7 75 8e          	movzx  esi,WORD PTR [rbp-0x72]
  21b93e:	41 89 f0             	mov    r8d,esi
  21b941:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
  21b948:	e8 53 02 00 00       	call   21bba0 <parseFormValueRefLen>
  21b94d:	66 83 7d a0 00       	cmp    WORD PTR [rbp-0x60],0x0
  21b952:	74 0e                	je     21b962 <parseFormValueRef.50+0xd2>
  21b954:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  21b95b:	e8 30 03 ff ff       	call   20bc90 <__zig_return_error>
  21b960:	eb 02                	jmp    21b964 <parseFormValueRef.50+0xd4>
  21b962:	eb 00                	jmp    21b964 <parseFormValueRef.50+0xd4>
  21b964:	b8 28 00 00 00       	mov    eax,0x28
  21b969:	89 c2                	mov    edx,eax
  21b96b:	48 8d 4d a0          	lea    rcx,[rbp-0x60]
  21b96f:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  21b973:	48 89 f7             	mov    rdi,rsi
  21b976:	48 89 ce             	mov    rsi,rcx
  21b979:	e8 22 8f 01 00       	call   2348a0 <memcpy>
  21b97e:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21b985:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  21b98c:	5d                   	pop    rbp
  21b98d:	c3                   	ret    
  21b98e:	66 90                	xchg   ax,ax

000000000021b990 <parseFormValueRef.51>:
fn parseFormValueRef(allocator: *mem.Allocator, in_stream: var, comptime T: type) !FormValue {
  21b990:	55                   	push   rbp
  21b991:	48 89 e5             	mov    rbp,rsp
  21b994:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  21b99b:	48 89 f8             	mov    rax,rdi
  21b99e:	4c 8d 45 f8          	lea    r8,[rbp-0x8]
  21b9a2:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  21b9a6:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
    const block_len = try in_stream.readIntLe(T);
  21b9aa:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
  21b9ae:	48 89 7d 80          	mov    QWORD PTR [rbp-0x80],rdi
  21b9b2:	4c 89 c7             	mov    rdi,r8
  21b9b5:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
  21b9bc:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  21b9c3:	e8 58 ac ff ff       	call   216620 <InStream(ReadError)_readIntLe>
  21b9c8:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  21b9cd:	74 57                	je     21ba26 <parseFormValueRef.51+0x96>
  21b9cf:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  21b9d3:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  21b9da:	66 89 85 6e ff ff ff 	mov    WORD PTR [rbp-0x92],ax
  21b9e1:	e8 aa 02 ff ff       	call   20bc90 <__zig_return_error>
  21b9e6:	b9 28 00 00 00       	mov    ecx,0x28
  21b9eb:	89 ca                	mov    edx,ecx
  21b9ed:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  21b9f1:	66 8b 85 6e ff ff ff 	mov    ax,WORD PTR [rbp-0x92]
  21b9f8:	66 89 45 c8          	mov    WORD PTR [rbp-0x38],ax
  21b9fc:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  21ba00:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  21ba07:	48 89 f7             	mov    rdi,rsi
  21ba0a:	48 8b b5 60 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa0]
  21ba11:	e8 8a 8e 01 00       	call   2348a0 <memcpy>
  21ba16:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21ba1d:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  21ba24:	5d                   	pop    rbp
  21ba25:	c3                   	ret    
  21ba26:	48 8d 7d a0          	lea    rdi,[rbp-0x60]
  21ba2a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  21ba2d:	89 45 8c             	mov    DWORD PTR [rbp-0x74],eax
    return parseFormValueRefLen(allocator, in_stream, block_len);
  21ba30:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  21ba34:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  21ba38:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
  21ba3b:	41 89 c0             	mov    r8d,eax
  21ba3e:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
  21ba45:	e8 56 01 00 00       	call   21bba0 <parseFormValueRefLen>
  21ba4a:	66 83 7d a0 00       	cmp    WORD PTR [rbp-0x60],0x0
  21ba4f:	74 0e                	je     21ba5f <parseFormValueRef.51+0xcf>
  21ba51:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  21ba58:	e8 33 02 ff ff       	call   20bc90 <__zig_return_error>
  21ba5d:	eb 02                	jmp    21ba61 <parseFormValueRef.51+0xd1>
  21ba5f:	eb 00                	jmp    21ba61 <parseFormValueRef.51+0xd1>
  21ba61:	b8 28 00 00 00       	mov    eax,0x28
  21ba66:	89 c2                	mov    edx,eax
  21ba68:	48 8d 4d a0          	lea    rcx,[rbp-0x60]
  21ba6c:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  21ba70:	48 89 f7             	mov    rdi,rsi
  21ba73:	48 89 ce             	mov    rsi,rcx
  21ba76:	e8 25 8e 01 00       	call   2348a0 <memcpy>
  21ba7b:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21ba82:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  21ba89:	5d                   	pop    rbp
  21ba8a:	c3                   	ret    
  21ba8b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000021ba90 <parseFormValueRef.52>:
fn parseFormValueRef(allocator: *mem.Allocator, in_stream: var, comptime T: type) !FormValue {
  21ba90:	55                   	push   rbp
  21ba91:	48 89 e5             	mov    rbp,rsp
  21ba94:	48 81 ec b0 00 00 00 	sub    rsp,0xb0
  21ba9b:	48 89 f8             	mov    rax,rdi
  21ba9e:	4c 8d 45 f0          	lea    r8,[rbp-0x10]
  21baa2:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
  21baa6:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
    const block_len = try in_stream.readIntLe(T);
  21baaa:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
  21baae:	48 89 bd 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdi
  21bab5:	4c 89 c7             	mov    rdi,r8
  21bab8:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
  21babf:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  21bac6:	e8 b5 ab ff ff       	call   216680 <InStream(ReadError)_readIntLe.38>
  21bacb:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  21bad0:	74 5a                	je     21bb2c <parseFormValueRef.52+0x9c>
  21bad2:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  21bad6:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  21badd:	66 89 85 5e ff ff ff 	mov    WORD PTR [rbp-0xa2],ax
  21bae4:	e8 a7 01 ff ff       	call   20bc90 <__zig_return_error>
  21bae9:	b9 28 00 00 00       	mov    ecx,0x28
  21baee:	89 ca                	mov    edx,ecx
  21baf0:	48 8d 7d b8          	lea    rdi,[rbp-0x48]
  21baf4:	66 8b 85 5e ff ff ff 	mov    ax,WORD PTR [rbp-0xa2]
  21bafb:	66 89 45 b8          	mov    WORD PTR [rbp-0x48],ax
  21baff:	48 8b b5 70 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x90]
  21bb06:	48 89 bd 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdi
  21bb0d:	48 89 f7             	mov    rdi,rsi
  21bb10:	48 8b b5 50 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xb0]
  21bb17:	e8 84 8d 01 00       	call   2348a0 <memcpy>
  21bb1c:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  21bb23:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  21bb2a:	5d                   	pop    rbp
  21bb2b:	c3                   	ret    
  21bb2c:	48 8d 7d 90          	lea    rdi,[rbp-0x70]
  21bb30:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21bb34:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
    return parseFormValueRefLen(allocator, in_stream, block_len);
  21bb3b:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
  21bb3f:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  21bb43:	4c 8b 85 78 ff ff ff 	mov    r8,QWORD PTR [rbp-0x88]
  21bb4a:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
  21bb51:	e8 4a 00 00 00       	call   21bba0 <parseFormValueRefLen>
  21bb56:	66 83 7d 90 00       	cmp    WORD PTR [rbp-0x70],0x0
  21bb5b:	74 0e                	je     21bb6b <parseFormValueRef.52+0xdb>
  21bb5d:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  21bb64:	e8 27 01 ff ff       	call   20bc90 <__zig_return_error>
  21bb69:	eb 02                	jmp    21bb6d <parseFormValueRef.52+0xdd>
  21bb6b:	eb 00                	jmp    21bb6d <parseFormValueRef.52+0xdd>
  21bb6d:	b8 28 00 00 00       	mov    eax,0x28
  21bb72:	89 c2                	mov    edx,eax
  21bb74:	48 8d 4d 90          	lea    rcx,[rbp-0x70]
  21bb78:	48 8b b5 70 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x90]
  21bb7f:	48 89 f7             	mov    rdi,rsi
  21bb82:	48 89 ce             	mov    rsi,rcx
  21bb85:	e8 16 8d 01 00       	call   2348a0 <memcpy>
  21bb8a:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  21bb91:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  21bb98:	5d                   	pop    rbp
  21bb99:	c3                   	ret    
  21bb9a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000021bba0 <parseFormValueRefLen>:
fn parseFormValueRefLen(allocator: *mem.Allocator, in_stream: var, size: usize) !FormValue {
  21bba0:	55                   	push   rbp
  21bba1:	48 89 e5             	mov    rbp,rsp
  21bba4:	48 81 ec 00 01 00 00 	sub    rsp,0x100
  21bbab:	48 89 f8             	mov    rax,rdi
  21bbae:	4c 8d 4d e8          	lea    r9,[rbp-0x18]
  21bbb2:	48 89 95 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdx
  21bbb9:	48 89 8d 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rcx
  21bbc0:	4c 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],r8
    const buf = try readAllocBytes(allocator, in_stream, size);
  21bbc7:	48 8b 95 58 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa8]
  21bbce:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
  21bbd5:	4c 8b 85 48 ff ff ff 	mov    r8,QWORD PTR [rbp-0xb8]
  21bbdc:	48 89 bd 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rdi
  21bbe3:	4c 89 cf             	mov    rdi,r9
  21bbe6:	48 89 b5 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rsi
  21bbed:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  21bbf4:	e8 47 f8 ff ff       	call   21b440 <readAllocBytes>
  21bbf9:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  21bbfe:	74 5a                	je     21bc5a <parseFormValueRefLen+0xba>
  21bc00:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  21bc04:	48 8b bd 20 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe0]
  21bc0b:	66 89 85 16 ff ff ff 	mov    WORD PTR [rbp-0xea],ax
  21bc12:	e8 79 00 ff ff       	call   20bc90 <__zig_return_error>
  21bc17:	b9 28 00 00 00       	mov    ecx,0x28
  21bc1c:	89 ca                	mov    edx,ecx
  21bc1e:	48 8d 7d a8          	lea    rdi,[rbp-0x58]
  21bc22:	66 8b 85 16 ff ff ff 	mov    ax,WORD PTR [rbp-0xea]
  21bc29:	66 89 45 a8          	mov    WORD PTR [rbp-0x58],ax
  21bc2d:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21bc34:	48 89 bd 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdi
  21bc3b:	48 89 f7             	mov    rdi,rsi
  21bc3e:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
  21bc45:	e8 56 8c 01 00       	call   2348a0 <memcpy>
  21bc4a:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  21bc51:	48 81 c4 00 01 00 00 	add    rsp,0x100
  21bc58:	5d                   	pop    rbp
  21bc59:	c3                   	ret    
  21bc5a:	b8 28 00 00 00       	mov    eax,0x28
  21bc5f:	89 c2                	mov    edx,eax
  21bc61:	48 8d 8d 60 ff ff ff 	lea    rcx,[rbp-0xa0]
  21bc68:	c5 fa 6f 45 f0       	vmovdqu xmm0,XMMWORD PTR [rbp-0x10]
  21bc6d:	c5 f9 7f 85 30 ff ff 	vmovdqa XMMWORD PTR [rbp-0xd0],xmm0
  21bc74:	ff 
    return FormValue{ .Ref = buf };
  21bc75:	c6 45 a0 06          	mov    BYTE PTR [rbp-0x60],0x6
  21bc79:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  21bc80:	48 89 75 88          	mov    QWORD PTR [rbp-0x78],rsi
  21bc84:	48 8b b5 38 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc8]
  21bc8b:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
  21bc8f:	66 c7 85 60 ff ff ff 	mov    WORD PTR [rbp-0xa0],0x0
  21bc96:	00 00 
  21bc98:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
  21bc9c:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
  21bca3:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  21bca7:	48 89 b5 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rsi
  21bcae:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  21bcb2:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
  21bcb9:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  21bcbd:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
  21bcc1:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21bcc8:	48 89 f7             	mov    rdi,rsi
  21bccb:	48 89 ce             	mov    rsi,rcx
  21bcce:	e8 cd 8b 01 00       	call   2348a0 <memcpy>
  21bcd3:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  21bcda:	48 81 c4 00 01 00 00 	add    rsp,0x100
  21bce1:	5d                   	pop    rbp
  21bce2:	c3                   	ret    
  21bce3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21bcea:	84 00 00 00 00 00 

000000000021bcf0 <readStringRaw>:
fn readStringRaw(allocator: *mem.Allocator, in_stream: var) ![]u8 {
  21bcf0:	55                   	push   rbp
  21bcf1:	48 89 e5             	mov    rbp,rsp
  21bcf4:	48 81 ec f0 00 00 00 	sub    rsp,0xf0
  21bcfb:	48 89 f8             	mov    rax,rdi
  21bcfe:	4c 8d 45 e0          	lea    r8,[rbp-0x20]
  21bd02:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  21bd09:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
    var buf = ArrayList(u8).init(allocator);
  21bd10:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  21bd17:	48 89 bd 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rdi
  21bd1e:	4c 89 c7             	mov    rdi,r8
  21bd21:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  21bd28:	48 89 ce             	mov    rsi,rcx
  21bd2b:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
  21bd32:	e8 09 5b 00 00       	call   221840 <AlignedArrayList(u8,1)_init>
  21bd37:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  21bd3b:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  21bd42:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21bd46:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  21bd4d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21bd51:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
  21bd58:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21bd5c:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
    while (true) {
  21bd63:	eb 00                	jmp    21bd65 <readStringRaw+0x75>
  21bd65:	48 8d 7d d8          	lea    rdi,[rbp-0x28]
        const byte = try in_stream.readByte();
  21bd69:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  21bd70:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21bd77:	e8 64 7d ff ff       	call   213ae0 <InStream(ReadError)_readByte>
  21bd7c:	66 83 7d d8 00       	cmp    WORD PTR [rbp-0x28],0x0
  21bd81:	74 50                	je     21bdd3 <readStringRaw+0xe3>
  21bd83:	66 8b 45 d8          	mov    ax,WORD PTR [rbp-0x28]
  21bd87:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  21bd8e:	66 89 85 1e ff ff ff 	mov    WORD PTR [rbp-0xe2],ax
  21bd95:	e8 f6 fe fe ff       	call   20bc90 <__zig_return_error>
  21bd9a:	66 8b 85 1e ff ff ff 	mov    ax,WORD PTR [rbp-0xe2]
  21bda1:	66 89 45 b8          	mov    WORD PTR [rbp-0x48],ax
  21bda5:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  21bda9:	48 8b 8d 30 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd0]
  21bdb0:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21bdb3:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  21bdb7:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21bdbb:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  21bdbf:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  21bdc3:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21bdca:	48 81 c4 f0 00 00 00 	add    rsp,0xf0
  21bdd1:	5d                   	pop    rbp
  21bdd2:	c3                   	ret    
  21bdd3:	8a 45 da             	mov    al,BYTE PTR [rbp-0x26]
  21bdd6:	88 85 3f ff ff ff    	mov    BYTE PTR [rbp-0xc1],al
        if (byte == 0) break;
  21bddc:	80 bd 3f ff ff ff 00 	cmp    BYTE PTR [rbp-0xc1],0x0
  21bde3:	75 02                	jne    21bde7 <readStringRaw+0xf7>
  21bde5:	eb 7c                	jmp    21be63 <readStringRaw+0x173>
  21bde7:	eb 00                	jmp    21bde9 <readStringRaw+0xf9>
  21bde9:	48 8d b5 40 ff ff ff 	lea    rsi,[rbp-0xc0]
        try buf.append(byte);
  21bdf0:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  21bdf7:	0f b6 95 3f ff ff ff 	movzx  edx,BYTE PTR [rbp-0xc1]
  21bdfe:	e8 9d 5a 00 00       	call   2218a0 <AlignedArrayList(u8,1)_append>
  21be03:	66 89 45 b6          	mov    WORD PTR [rbp-0x4a],ax
  21be07:	66 83 7d b6 00       	cmp    WORD PTR [rbp-0x4a],0x0
  21be0c:	74 50                	je     21be5e <readStringRaw+0x16e>
  21be0e:	66 8b 45 b6          	mov    ax,WORD PTR [rbp-0x4a]
  21be12:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  21be19:	66 89 85 1c ff ff ff 	mov    WORD PTR [rbp-0xe4],ax
  21be20:	e8 6b fe fe ff       	call   20bc90 <__zig_return_error>
  21be25:	66 8b 85 1c ff ff ff 	mov    ax,WORD PTR [rbp-0xe4]
  21be2c:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  21be30:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  21be34:	48 8b 8d 30 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd0]
  21be3b:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21be3e:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  21be42:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21be46:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  21be4a:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  21be4e:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21be55:	48 81 c4 f0 00 00 00 	add    rsp,0xf0
  21be5c:	5d                   	pop    rbp
  21be5d:	c3                   	ret    
    while (true) {
  21be5e:	e9 00 ff ff ff       	jmp    21bd63 <readStringRaw+0x73>
  21be63:	48 8d 7d 88          	lea    rdi,[rbp-0x78]
  21be67:	48 8d b5 40 ff ff ff 	lea    rsi,[rbp-0xc0]
    return buf.toSlice();
  21be6e:	e8 9d 5a 00 00       	call   221910 <AlignedArrayList(u8,1)_toSlice>
  21be73:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  21be7a:	00 00 
  21be7c:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
  21be80:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
  21be87:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  21be8b:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
  21be8f:	48 8b b5 70 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x90]
  21be96:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
  21be9d:	48 89 37             	mov    QWORD PTR [rdi],rsi
  21bea0:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
  21bea7:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  21beab:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  21beaf:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  21beb3:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21beba:	48 81 c4 f0 00 00 00 	add    rsp,0xf0
  21bec1:	5d                   	pop    rbp
  21bec2:	c3                   	ret    
  21bec3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21beca:	84 00 00 00 00 00 

000000000021bed0 <Allocator_alloc.53>:
    pub fn alloc(self: *Allocator, comptime T: type, n: usize) ![]T {
  21bed0:	55                   	push   rbp
  21bed1:	48 89 e5             	mov    rbp,rsp
  21bed4:	48 83 ec 40          	sub    rsp,0x40
  21bed8:	48 89 f8             	mov    rax,rdi
  21bedb:	4c 8d 45 e8          	lea    r8,[rbp-0x18]
  21bedf:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  21bee3:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
        return self.alignedAlloc(T, @alignOf(T), n);
  21bee7:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  21beeb:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  21beef:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
  21bef3:	4c 89 c7             	mov    rdi,r8
  21bef6:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  21befa:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  21befe:	e8 3d be 00 00       	call   227d40 <Allocator_alignedAlloc.103>
  21bf03:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  21bf08:	74 0b                	je     21bf15 <Allocator_alloc.53+0x45>
  21bf0a:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  21bf0e:	e8 7d fd fe ff       	call   20bc90 <__zig_return_error>
  21bf13:	eb 02                	jmp    21bf17 <Allocator_alloc.53+0x47>
  21bf15:	eb 00                	jmp    21bf17 <Allocator_alloc.53+0x47>
  21bf17:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21bf1b:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  21bf1f:	48 89 01             	mov    QWORD PTR [rcx],rax
  21bf22:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21bf26:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21bf2a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21bf2e:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21bf32:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  21bf36:	48 83 c4 40          	add    rsp,0x40
  21bf3a:	5d                   	pop    rbp
  21bf3b:	c3                   	ret    
  21bf3c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000021bf40 <AlignedArrayList(Attr,8)_toSliceConst>:
        pub fn toSliceConst(self: Self) []align(A) const T {
  21bf40:	55                   	push   rbp
  21bf41:	48 89 e5             	mov    rbp,rsp
  21bf44:	48 83 ec 40          	sub    rsp,0x40
  21bf48:	48 89 f8             	mov    rax,rdi
  21bf4b:	31 c9                	xor    ecx,ecx
  21bf4d:	89 ca                	mov    edx,ecx
            return self.items[0..self.len];
  21bf4f:	4c 8b 46 10          	mov    r8,QWORD PTR [rsi+0x10]
  21bf53:	4c 8b 4e 08          	mov    r9,QWORD PTR [rsi+0x8]
  21bf57:	4c 39 c2             	cmp    rdx,r8
  21bf5a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  21bf5e:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  21bf62:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  21bf66:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
  21bf6a:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
  21bf6e:	76 10                	jbe    21bf80 <AlignedArrayList(Attr,8)_toSliceConst+0x40>
  21bf70:	48 8d 3d 61 74 02 00 	lea    rdi,[rip+0x27461]        # 2433d8 <__unnamed_20>
  21bf77:	31 c0                	xor    eax,eax
  21bf79:	89 c6                	mov    esi,eax
  21bf7b:	e8 80 f6 fe ff       	call   20b600 <panic>
  21bf80:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21bf84:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  21bf88:	48 39 c8             	cmp    rax,rcx
  21bf8b:	76 10                	jbe    21bf9d <AlignedArrayList(Attr,8)_toSliceConst+0x5d>
  21bf8d:	48 8d 3d 44 74 02 00 	lea    rdi,[rip+0x27444]        # 2433d8 <__unnamed_20>
  21bf94:	31 c0                	xor    eax,eax
  21bf96:	89 c6                	mov    esi,eax
  21bf98:	e8 63 f6 fe ff       	call   20b600 <panic>
  21bf9d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  21bfa1:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  21bfa4:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  21bfa8:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  21bfac:	48 83 e9 00          	sub    rcx,0x0
  21bfb0:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  21bfb4:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  21bfb8:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  21bfbc:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  21bfbf:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  21bfc3:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  21bfc7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21bfcb:	48 83 c4 40          	add    rsp,0x40
  21bfcf:	5d                   	pop    rbp
  21bfd0:	c3                   	ret    
  21bfd1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21bfd8:	0f 1f 84 00 00 00 00 
  21bfdf:	00 

000000000021bfe0 <AlignedArrayList(CompileUnit,2)_addOne>:
        pub fn addOne(self: *Self) !*T {
  21bfe0:	55                   	push   rbp
  21bfe1:	48 89 e5             	mov    rbp,rsp
  21bfe4:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  21bfeb:	48 89 f8             	mov    rax,rdi
  21bfee:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            const new_length = self.len + 1;
  21bff2:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  21bff6:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  21bffa:	48 83 c2 01          	add    rdx,0x1
  21bffe:	0f 92 c1             	setb   cl
  21c001:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  21c005:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  21c009:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  21c00d:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  21c011:	88 4d 9f             	mov    BYTE PTR [rbp-0x61],cl
  21c014:	72 57                	jb     21c06d <AlignedArrayList(CompileUnit,2)_addOne+0x8d>
  21c016:	eb 65                	jmp    21c07d <AlignedArrayList(CompileUnit,2)_addOne+0x9d>
            try self.ensureCapacity(new_length);
  21c018:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  21c01c:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  21c020:	66 89 45 9c          	mov    WORD PTR [rbp-0x64],ax
  21c024:	e8 67 fc fe ff       	call   20bc90 <__zig_return_error>
  21c029:	66 8b 45 9c          	mov    ax,WORD PTR [rbp-0x64]
  21c02d:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  21c031:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  21c035:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  21c039:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21c03c:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  21c040:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21c044:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21c048:	48 81 c4 80 00 00 00 	add    rsp,0x80
  21c04f:	5d                   	pop    rbp
  21c050:	c3                   	ret    
            const result = &self.items[self.len];
  21c051:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  21c055:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  21c059:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
  21c05d:	48 3b 48 08          	cmp    rcx,QWORD PTR [rax+0x8]
  21c061:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  21c065:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
  21c069:	72 4c                	jb     21c0b7 <AlignedArrayList(CompileUnit,2)_addOne+0xd7>
  21c06b:	eb 3a                	jmp    21c0a7 <AlignedArrayList(CompileUnit,2)_addOne+0xc7>
  21c06d:	48 8d 3d 54 71 02 00 	lea    rdi,[rip+0x27154]        # 2431c8 <__unnamed_4>
  21c074:	31 c0                	xor    eax,eax
  21c076:	89 c6                	mov    esi,eax
            const new_length = self.len + 1;
  21c078:	e8 83 f5 fe ff       	call   20b600 <panic>
  21c07d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  21c081:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
            try self.ensureCapacity(new_length);
  21c085:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  21c089:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  21c08d:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  21c091:	e8 7a 00 00 00       	call   21c110 <AlignedArrayList(CompileUnit,2)_ensureCapacity>
  21c096:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  21c09a:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  21c09f:	0f 85 73 ff ff ff    	jne    21c018 <AlignedArrayList(CompileUnit,2)_addOne+0x38>
  21c0a5:	eb aa                	jmp    21c051 <AlignedArrayList(CompileUnit,2)_addOne+0x71>
  21c0a7:	48 8d 3d 2a 73 02 00 	lea    rdi,[rip+0x2732a]        # 2433d8 <__unnamed_20>
  21c0ae:	31 c0                	xor    eax,eax
  21c0b0:	89 c6                	mov    esi,eax
            const result = &self.items[self.len];
  21c0b2:	e8 49 f5 fe ff       	call   20b600 <panic>
  21c0b7:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  21c0bb:	48 6b c8 30          	imul   rcx,rax,0x30
  21c0bf:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
  21c0c3:	48 03 0a             	add    rcx,QWORD PTR [rdx]
  21c0c6:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
            self.len = new_length;
  21c0ca:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  21c0ce:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  21c0d2:	48 89 71 10          	mov    QWORD PTR [rcx+0x10],rsi
            return result;
  21c0d6:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  21c0da:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  21c0e0:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  21c0e4:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  21c0e8:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  21c0ec:	48 89 0e             	mov    QWORD PTR [rsi],rcx
  21c0ef:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  21c0f3:	48 89 4e 08          	mov    QWORD PTR [rsi+0x8],rcx
  21c0f7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21c0fb:	48 81 c4 80 00 00 00 	add    rsp,0x80
  21c102:	5d                   	pop    rbp
  21c103:	c3                   	ret    
  21c104:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21c10b:	00 00 00 00 00 

000000000021c110 <AlignedArrayList(CompileUnit,2)_ensureCapacity>:
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  21c110:	55                   	push   rbp
  21c111:	48 89 e5             	mov    rbp,rsp
  21c114:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  21c11b:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  21c11f:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
            var better_capacity = self.items.len;
  21c123:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  21c127:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  21c12b:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
            if (better_capacity >= new_capacity) return;
  21c12f:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  21c133:	48 3b 55 c0          	cmp    rdx,QWORD PTR [rbp-0x40]
  21c137:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  21c13b:	72 11                	jb     21c14e <AlignedArrayList(CompileUnit,2)_ensureCapacity+0x3e>
  21c13d:	31 c0                	xor    eax,eax
  21c13f:	66 89 c1             	mov    cx,ax
  21c142:	66 89 c8             	mov    ax,cx
  21c145:	48 81 c4 90 00 00 00 	add    rsp,0x90
  21c14c:	5d                   	pop    rbp
  21c14d:	c3                   	ret    
            while (true) {
  21c14e:	eb 00                	jmp    21c150 <AlignedArrayList(CompileUnit,2)_ensureCapacity+0x40>
  21c150:	eb 00                	jmp    21c152 <AlignedArrayList(CompileUnit,2)_ensureCapacity+0x42>
  21c152:	31 c0                	xor    eax,eax
  21c154:	88 c1                	mov    cl,al
                better_capacity += better_capacity / 2 + 8;
  21c156:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  21c15a:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  21c15e:	f6 c1 01             	test   cl,0x1
  21c161:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  21c165:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  21c169:	0f 85 8e 00 00 00    	jne    21c1fd <AlignedArrayList(CompileUnit,2)_ensureCapacity+0xed>
  21c16f:	eb 72                	jmp    21c1e3 <AlignedArrayList(CompileUnit,2)_ensureCapacity+0xd3>
                if (better_capacity >= new_capacity) break;
  21c171:	eb 02                	jmp    21c175 <AlignedArrayList(CompileUnit,2)_ensureCapacity+0x65>
            while (true) {
  21c173:	eb db                	jmp    21c150 <AlignedArrayList(CompileUnit,2)_ensureCapacity+0x40>
  21c175:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
            self.items = try self.allocator.alignedRealloc(T, A, self.items, better_capacity);
  21c179:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21c17d:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  21c181:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
  21c185:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  21c189:	4c 8b 45 b8          	mov    r8,QWORD PTR [rbp-0x48]
  21c18d:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  21c191:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  21c195:	e8 d6 00 00 00       	call   21c270 <Allocator_alignedRealloc.54>
  21c19a:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  21c19f:	74 1e                	je     21c1bf <AlignedArrayList(CompileUnit,2)_ensureCapacity+0xaf>
  21c1a1:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  21c1a5:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  21c1a9:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  21c1ad:	e8 de fa fe ff       	call   20bc90 <__zig_return_error>
  21c1b2:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  21c1b6:	48 81 c4 90 00 00 00 	add    rsp,0x90
  21c1bd:	5d                   	pop    rbp
  21c1be:	c3                   	ret    
  21c1bf:	31 c0                	xor    eax,eax
  21c1c1:	66 89 c1             	mov    cx,ax
  21c1c4:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21c1c8:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  21c1cc:	48 89 16             	mov    QWORD PTR [rsi],rdx
  21c1cf:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  21c1d3:	48 89 56 08          	mov    QWORD PTR [rsi+0x8],rdx
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  21c1d7:	66 89 c8             	mov    ax,cx
  21c1da:	48 81 c4 90 00 00 00 	add    rsp,0x90
  21c1e1:	5d                   	pop    rbp
  21c1e2:	c3                   	ret    
                better_capacity += better_capacity / 2 + 8;
  21c1e3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  21c1e7:	48 c1 e8 01          	shr    rax,0x1
  21c1eb:	48 83 c0 08          	add    rax,0x8
  21c1ef:	0f 92 c1             	setb   cl
  21c1f2:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  21c1f6:	88 4d 87             	mov    BYTE PTR [rbp-0x79],cl
  21c1f9:	72 12                	jb     21c20d <AlignedArrayList(CompileUnit,2)_ensureCapacity+0xfd>
  21c1fb:	eb 20                	jmp    21c21d <AlignedArrayList(CompileUnit,2)_ensureCapacity+0x10d>
  21c1fd:	48 8d 3d 3c 70 02 00 	lea    rdi,[rip+0x2703c]        # 243240 <__unnamed_7>
  21c204:	31 c0                	xor    eax,eax
  21c206:	89 c6                	mov    esi,eax
  21c208:	e8 f3 f3 fe ff       	call   20b600 <panic>
  21c20d:	48 8d 3d b4 6f 02 00 	lea    rdi,[rip+0x26fb4]        # 2431c8 <__unnamed_4>
  21c214:	31 c0                	xor    eax,eax
  21c216:	89 c6                	mov    esi,eax
  21c218:	e8 e3 f3 fe ff       	call   20b600 <panic>
  21c21d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  21c221:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  21c225:	48 01 c8             	add    rax,rcx
  21c228:	0f 92 c2             	setb   dl
  21c22b:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  21c232:	88 95 77 ff ff ff    	mov    BYTE PTR [rbp-0x89],dl
  21c238:	72 02                	jb     21c23c <AlignedArrayList(CompileUnit,2)_ensureCapacity+0x12c>
  21c23a:	eb 10                	jmp    21c24c <AlignedArrayList(CompileUnit,2)_ensureCapacity+0x13c>
  21c23c:	48 8d 3d 85 6f 02 00 	lea    rdi,[rip+0x26f85]        # 2431c8 <__unnamed_4>
  21c243:	31 c0                	xor    eax,eax
  21c245:	89 c6                	mov    esi,eax
  21c247:	e8 b4 f3 fe ff       	call   20b600 <panic>
  21c24c:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  21c253:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                if (better_capacity >= new_capacity) break;
  21c257:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  21c25b:	48 3b 4d c0          	cmp    rcx,QWORD PTR [rbp-0x40]
  21c25f:	0f 83 0c ff ff ff    	jae    21c171 <AlignedArrayList(CompileUnit,2)_ensureCapacity+0x61>
  21c265:	e9 09 ff ff ff       	jmp    21c173 <AlignedArrayList(CompileUnit,2)_ensureCapacity+0x63>
  21c26a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000021c270 <Allocator_alignedRealloc.54>:
    pub fn alignedRealloc(self: *Allocator, comptime T: type, comptime alignment: u29, old_mem: []align(alignment) T, n: usize) ![]align(alignment) T {
  21c270:	55                   	push   rbp
  21c271:	48 89 e5             	mov    rbp,rsp
  21c274:	53                   	push   rbx
  21c275:	48 81 ec 88 01 00 00 	sub    rsp,0x188
  21c27c:	48 89 f8             	mov    rax,rdi
  21c27f:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
  21c286:	4c 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],r8
        if (old_mem.len == 0) {
  21c28d:	48 83 79 08 00       	cmp    QWORD PTR [rcx+0x8],0x0
  21c292:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  21c299:	48 89 b5 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rsi
  21c2a0:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
  21c2a7:	48 89 bd b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rdi
  21c2ae:	75 64                	jne    21c314 <Allocator_alignedRealloc.54+0xa4>
  21c2b0:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
            return self.alignedAlloc(T, alignment, n);
  21c2b4:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  21c2bb:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  21c2c2:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  21c2c9:	e8 22 04 00 00       	call   21c6f0 <Allocator_alignedAlloc.55>
  21c2ce:	66 83 7d e0 00       	cmp    WORD PTR [rbp-0x20],0x0
  21c2d3:	74 0e                	je     21c2e3 <Allocator_alignedRealloc.54+0x73>
  21c2d5:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  21c2dc:	e8 af f9 fe ff       	call   20bc90 <__zig_return_error>
  21c2e1:	eb 02                	jmp    21c2e5 <Allocator_alignedRealloc.54+0x75>
  21c2e3:	eb 00                	jmp    21c2e5 <Allocator_alignedRealloc.54+0x75>
  21c2e5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  21c2e9:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  21c2f0:	48 89 01             	mov    QWORD PTR [rcx],rax
  21c2f3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21c2f7:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21c2fb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21c2ff:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21c303:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21c30a:	48 81 c4 88 01 00 00 	add    rsp,0x188
  21c311:	5b                   	pop    rbx
  21c312:	5d                   	pop    rbp
  21c313:	c3                   	ret    
        if (old_mem.len == 0) {
  21c314:	eb 00                	jmp    21c316 <Allocator_alignedRealloc.54+0xa6>
        if (n == 0) {
  21c316:	48 83 bd 10 ff ff ff 	cmp    QWORD PTR [rbp-0xf0],0x0
  21c31d:	00 
  21c31e:	75 4b                	jne    21c36b <Allocator_alignedRealloc.54+0xfb>
            self.free(old_mem);
  21c320:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
  21c327:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  21c32e:	e8 dd 06 00 00       	call   21ca10 <Allocator_free.56>
            return ([*]align(alignment) T)(undefined)[0..0];
  21c333:	48 8b 35 5e cd fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffecd5e]        # 209098 <__unnamed_108>
  21c33a:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  21c341:	48 89 37             	mov    QWORD PTR [rdi],rsi
  21c344:	48 8b 35 55 cd fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffecd55]        # 2090a0 <__unnamed_108+0x8>
  21c34b:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  21c34f:	48 8b 35 52 cd fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffecd52]        # 2090a8 <__unnamed_108+0x10>
  21c356:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  21c35a:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21c361:	48 81 c4 88 01 00 00 	add    rsp,0x188
  21c368:	5b                   	pop    rbx
  21c369:	5d                   	pop    rbp
  21c36a:	c3                   	ret    
        if (n == 0) {
  21c36b:	eb 00                	jmp    21c36d <Allocator_alignedRealloc.54+0xfd>
  21c36d:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  21c371:	b8 30 00 00 00       	mov    eax,0x30
  21c376:	89 c2                	mov    edx,eax
        const old_byte_slice = @sliceToBytes(old_mem);
  21c378:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  21c37f:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  21c382:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  21c386:	48 6b 71 08 30       	imul   rsi,QWORD PTR [rcx+0x8],0x30
  21c38b:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  21c38f:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  21c393:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
  21c39a:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  21c39e:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  21c3a5:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  21c3ac:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  21c3b3:	e8 f8 8f ff ff       	call   2153b0 <mul>
  21c3b8:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  21c3bd:	74 44                	je     21c403 <Allocator_alignedRealloc.54+0x193>
  21c3bf:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  21c3c6:	e8 c5 f8 fe ff       	call   20bc90 <__zig_return_error>
  21c3cb:	48 8b 3d de cc fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffeccde]        # 2090b0 <__unnamed_109>
  21c3d2:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  21c3d9:	48 89 38             	mov    QWORD PTR [rax],rdi
  21c3dc:	48 8b 3d d5 cc fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffeccd5]        # 2090b8 <__unnamed_109+0x8>
  21c3e3:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  21c3e7:	48 8b 3d d2 cc fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffeccd2]        # 2090c0 <__unnamed_109+0x10>
  21c3ee:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  21c3f2:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21c3f9:	48 81 c4 88 01 00 00 	add    rsp,0x188
  21c400:	5b                   	pop    rbx
  21c401:	5d                   	pop    rbp
  21c402:	c3                   	ret    
  21c403:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21c407:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  21c40e:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  21c412:	48 8d 8d 00 ff ff ff 	lea    rcx,[rbp-0x100]
  21c419:	41 b9 02 00 00 00    	mov    r9d,0x2
  21c41f:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  21c426:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
        const byte_slice = try self.reallocFn(self, old_byte_slice, byte_count, alignment);
  21c42d:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  21c434:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  21c438:	48 8b b5 18 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe8]
  21c43f:	4c 8b 85 f8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x108]
  21c446:	4c 8b 95 c8 fe ff ff 	mov    r10,QWORD PTR [rbp-0x138]
  21c44d:	48 89 b5 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rsi
  21c454:	4c 89 d6             	mov    rsi,r10
  21c457:	4c 8b 9d a8 fe ff ff 	mov    r11,QWORD PTR [rbp-0x158]
  21c45e:	48 89 95 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdx
  21c465:	4c 89 da             	mov    rdx,r11
  21c468:	48 8b 9d a0 fe ff ff 	mov    rbx,QWORD PTR [rbp-0x160]
  21c46f:	ff d3                	call   rbx
  21c471:	66 83 7d 98 00       	cmp    WORD PTR [rbp-0x68],0x0
  21c476:	74 5d                	je     21c4d5 <Allocator_alignedRealloc.54+0x265>
  21c478:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  21c47c:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  21c483:	66 89 85 9e fe ff ff 	mov    WORD PTR [rbp-0x162],ax
  21c48a:	e8 01 f8 fe ff       	call   20bc90 <__zig_return_error>
  21c48f:	66 8b 85 9e fe ff ff 	mov    ax,WORD PTR [rbp-0x162]
  21c496:	66 89 85 68 ff ff ff 	mov    WORD PTR [rbp-0x98],ax
  21c49d:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  21c4a4:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  21c4ab:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21c4ae:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  21c4b5:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21c4b9:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  21c4c0:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  21c4c4:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21c4cb:	48 81 c4 88 01 00 00 	add    rsp,0x188
  21c4d2:	5b                   	pop    rbx
  21c4d3:	5d                   	pop    rbp
  21c4d4:	c3                   	ret    
  21c4d5:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  21c4d9:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  21c4e0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  21c4e4:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
        assert(byte_slice.len == byte_count);
  21c4eb:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  21c4f2:	48 3b 85 f8 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x108]
  21c4f9:	0f 94 c1             	sete   cl
  21c4fc:	0f b6 f9             	movzx  edi,cl
  21c4ff:	e8 fc ea fe ff       	call   20b000 <assert>
        if (n > old_mem.len) {
  21c504:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  21c50b:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  21c512:	48 3b 42 08          	cmp    rax,QWORD PTR [rdx+0x8]
  21c516:	76 71                	jbe    21c589 <Allocator_alignedRealloc.54+0x319>
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  21c518:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  21c51f:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21c526:	48 39 c8             	cmp    rax,rcx
  21c529:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  21c530:	48 89 8d 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rcx
  21c537:	76 78                	jbe    21c5b1 <Allocator_alignedRealloc.54+0x341>
  21c539:	eb 66                	jmp    21c5a1 <Allocator_alignedRealloc.54+0x331>
  21c53b:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  21c542:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
  21c549:	48 39 c8             	cmp    rax,rcx
  21c54c:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  21c553:	73 32                	jae    21c587 <Allocator_alignedRealloc.54+0x317>
  21c555:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  21c55c:	48 03 8d 58 ff ff ff 	add    rcx,QWORD PTR [rbp-0xa8]
  21c563:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
                byte.* = undefined;
  21c56a:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  21c571:	88 01                	mov    BYTE PTR [rcx],al
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  21c573:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  21c57a:	48 83 c1 01          	add    rcx,0x1
  21c57e:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
  21c585:	eb b4                	jmp    21c53b <Allocator_alignedRealloc.54+0x2cb>
        if (n > old_mem.len) {
  21c587:	eb 02                	jmp    21c58b <Allocator_alignedRealloc.54+0x31b>
  21c589:	eb 00                	jmp    21c58b <Allocator_alignedRealloc.54+0x31b>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  21c58b:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  21c592:	48 83 e0 01          	and    rax,0x1
  21c596:	48 83 f8 00          	cmp    rax,0x0
  21c59a:	74 7b                	je     21c617 <Allocator_alignedRealloc.54+0x3a7>
  21c59c:	e9 ae 00 00 00       	jmp    21c64f <Allocator_alignedRealloc.54+0x3df>
  21c5a1:	48 8d 3d 30 6e 02 00 	lea    rdi,[rip+0x26e30]        # 2433d8 <__unnamed_20>
  21c5a8:	31 c0                	xor    eax,eax
  21c5aa:	89 c6                	mov    esi,eax
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  21c5ac:	e8 4f f0 fe ff       	call   20b600 <panic>
  21c5b1:	be aa 00 00 00       	mov    esi,0xaa
  21c5b6:	b8 08 00 00 00       	mov    eax,0x8
  21c5bb:	89 c2                	mov    edx,eax
  21c5bd:	48 8d 8d e0 fe ff ff 	lea    rcx,[rbp-0x120]
  21c5c4:	48 8b bd 90 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x170]
  21c5cb:	48 03 bd e8 fe ff ff 	add    rdi,QWORD PTR [rbp-0x118]
  21c5d2:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
  21c5d9:	48 8b bd 88 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x178]
  21c5e0:	4c 8b 85 90 fe ff ff 	mov    r8,QWORD PTR [rbp-0x170]
  21c5e7:	4c 29 c7             	sub    rdi,r8
  21c5ea:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  21c5f1:	48 89 cf             	mov    rdi,rcx
  21c5f4:	e8 57 82 01 00       	call   234850 <memset>
  21c5f9:	48 c7 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],0x0
  21c600:	00 00 00 00 
  21c604:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  21c60b:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  21c612:	e9 24 ff ff ff       	jmp    21c53b <Allocator_alignedRealloc.54+0x2cb>
  21c617:	b8 30 00 00 00       	mov    eax,0x30
  21c61c:	89 c1                	mov    ecx,eax
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  21c61e:	48 8b 95 e8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x118]
  21c625:	48 89 95 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdx
  21c62c:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  21c633:	48 89 d0             	mov    rax,rdx
  21c636:	31 f6                	xor    esi,esi
  21c638:	48 89 95 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rdx
  21c63f:	89 f2                	mov    edx,esi
  21c641:	48 f7 f1             	div    rcx
  21c644:	48 83 fa 00          	cmp    rdx,0x0
  21c648:	74 15                	je     21c65f <Allocator_alignedRealloc.54+0x3ef>
  21c64a:	e9 87 00 00 00       	jmp    21c6d6 <Allocator_alignedRealloc.54+0x466>
  21c64f:	48 8d 3d 5a 6f 02 00 	lea    rdi,[rip+0x26f5a]        # 2435b0 <__unnamed_75>
  21c656:	31 c0                	xor    eax,eax
  21c658:	89 c6                	mov    esi,eax
  21c65a:	e8 a1 ef fe ff       	call   20b600 <panic>
  21c65f:	b8 30 00 00 00       	mov    eax,0x30
  21c664:	89 c1                	mov    ecx,eax
  21c666:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  21c66d:	31 d2                	xor    edx,edx
  21c66f:	48 f7 f1             	div    rcx
  21c672:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  21c679:	66 c7 85 20 ff ff ff 	mov    WORD PTR [rbp-0xe0],0x0
  21c680:	00 00 
  21c682:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  21c689:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  21c690:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  21c697:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  21c69e:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21c6a5:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  21c6ac:	48 89 01             	mov    QWORD PTR [rcx],rax
  21c6af:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  21c6b6:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21c6ba:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21c6c1:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21c6c5:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21c6cc:	48 81 c4 88 01 00 00 	add    rsp,0x188
  21c6d3:	5b                   	pop    rbx
  21c6d4:	5d                   	pop    rbp
  21c6d5:	c3                   	ret    
  21c6d6:	48 8d 3d eb 6e 02 00 	lea    rdi,[rip+0x26eeb]        # 2435c8 <__unnamed_76>
  21c6dd:	31 c0                	xor    eax,eax
  21c6df:	89 c6                	mov    esi,eax
  21c6e1:	e8 1a ef fe ff       	call   20b600 <panic>
  21c6e6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  21c6ed:	00 00 00 

000000000021c6f0 <Allocator_alignedAlloc.55>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  21c6f0:	55                   	push   rbp
  21c6f1:	48 89 e5             	mov    rbp,rsp
  21c6f4:	48 81 ec 20 01 00 00 	sub    rsp,0x120
  21c6fb:	48 89 f8             	mov    rax,rdi
  21c6fe:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  21c705:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  21c70c:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  21c713:	00 
  21c714:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  21c71b:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  21c722:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  21c729:	75 37                	jne    21c762 <Allocator_alignedAlloc.55+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  21c72b:	48 8b 05 96 c9 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffec996]        # 2090c8 <__unnamed_110>
  21c732:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21c739:	48 89 01             	mov    QWORD PTR [rcx],rax
  21c73c:	48 8b 05 8d c9 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffec98d]        # 2090d0 <__unnamed_110+0x8>
  21c743:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21c747:	48 8b 05 8a c9 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffec98a]        # 2090d8 <__unnamed_110+0x10>
  21c74e:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21c752:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21c759:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21c760:	5d                   	pop    rbp
  21c761:	c3                   	ret    
        if (n == 0) {
  21c762:	eb 00                	jmp    21c764 <Allocator_alignedAlloc.55+0x74>
  21c764:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  21c768:	b8 30 00 00 00       	mov    eax,0x30
  21c76d:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  21c76f:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  21c776:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21c77d:	e8 2e 8c ff ff       	call   2153b0 <mul>
  21c782:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  21c787:	74 43                	je     21c7cc <Allocator_alignedAlloc.55+0xdc>
  21c789:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  21c790:	e8 fb f4 fe ff       	call   20bc90 <__zig_return_error>
  21c795:	48 8b 3d 44 c9 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffec944]        # 2090e0 <__unnamed_111>
  21c79c:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21c7a3:	48 89 38             	mov    QWORD PTR [rax],rdi
  21c7a6:	48 8b 3d 3b c9 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffec93b]        # 2090e8 <__unnamed_111+0x8>
  21c7ad:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  21c7b1:	48 8b 3d 38 c9 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffec938]        # 2090f0 <__unnamed_111+0x10>
  21c7b8:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  21c7bc:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21c7c3:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21c7ca:	5d                   	pop    rbp
  21c7cb:	c3                   	ret    
  21c7cc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21c7d0:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  21c7d7:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  21c7db:	41 b8 02 00 00 00    	mov    r8d,0x2
  21c7e1:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  21c7e8:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  21c7ef:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  21c7f6:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  21c7f9:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  21c800:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  21c807:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  21c80e:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  21c815:	4c 89 ce             	mov    rsi,r9
  21c818:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  21c81f:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  21c826:	4c 89 d1             	mov    rcx,r10
  21c829:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  21c830:	41 ff d3             	call   r11
  21c833:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  21c838:	74 50                	je     21c88a <Allocator_alignedAlloc.55+0x19a>
  21c83a:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  21c83e:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  21c845:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  21c84c:	e8 3f f4 fe ff       	call   20bc90 <__zig_return_error>
  21c851:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  21c858:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  21c85c:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  21c860:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21c867:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21c86a:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  21c86e:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21c872:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  21c876:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  21c87a:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21c881:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21c888:	5d                   	pop    rbp
  21c889:	c3                   	ret    
  21c88a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  21c88e:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  21c895:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21c899:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  21c8a0:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  21c8a7:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  21c8ae:	0f 94 c1             	sete   cl
  21c8b1:	0f b6 f9             	movzx  edi,cl
  21c8b4:	e8 47 e7 fe ff       	call   20b000 <assert>
  21c8b9:	be aa 00 00 00       	mov    esi,0xaa
  21c8be:	bf 08 00 00 00       	mov    edi,0x8
  21c8c3:	89 fa                	mov    edx,edi
  21c8c5:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  21c8cc:	48 89 c7             	mov    rdi,rax
  21c8cf:	e8 7c 7f 01 00       	call   234850 <memset>
  21c8d4:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  21c8db:	00 00 00 00 
  21c8df:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  21c8e6:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  21c8ed:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  21c8f4:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  21c8fb:	48 39 c8             	cmp    rax,rcx
  21c8fe:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  21c905:	73 32                	jae    21c939 <Allocator_alignedAlloc.55+0x249>
  21c907:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21c90e:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  21c915:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  21c91c:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  21c923:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  21c925:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  21c92c:	48 83 c1 01          	add    rcx,0x1
  21c930:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  21c937:	eb b4                	jmp    21c8ed <Allocator_alignedAlloc.55+0x1fd>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  21c939:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  21c940:	48 83 e0 01          	and    rax,0x1
  21c944:	48 83 f8 00          	cmp    rax,0x0
  21c948:	75 32                	jne    21c97c <Allocator_alignedAlloc.55+0x28c>
  21c94a:	b8 30 00 00 00       	mov    eax,0x30
  21c94f:	89 c1                	mov    ecx,eax
  21c951:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
  21c958:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
  21c95c:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
  21c963:	48 89 d0             	mov    rax,rdx
  21c966:	31 f6                	xor    esi,esi
  21c968:	48 89 95 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdx
  21c96f:	89 f2                	mov    edx,esi
  21c971:	48 f7 f1             	div    rcx
  21c974:	48 83 fa 00          	cmp    rdx,0x0
  21c978:	74 12                	je     21c98c <Allocator_alignedAlloc.55+0x29c>
  21c97a:	eb 77                	jmp    21c9f3 <Allocator_alignedAlloc.55+0x303>
  21c97c:	48 8d 3d 2d 6c 02 00 	lea    rdi,[rip+0x26c2d]        # 2435b0 <__unnamed_75>
  21c983:	31 c0                	xor    eax,eax
  21c985:	89 c6                	mov    esi,eax
  21c987:	e8 74 ec fe ff       	call   20b600 <panic>
  21c98c:	b8 30 00 00 00       	mov    eax,0x30
  21c991:	89 c1                	mov    ecx,eax
  21c993:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  21c99a:	31 d2                	xor    edx,edx
  21c99c:	48 f7 f1             	div    rcx
  21c99f:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  21c9a3:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  21c9aa:	00 00 
  21c9ac:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  21c9b0:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  21c9b7:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  21c9bb:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  21c9bf:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21c9c6:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21c9cd:	48 89 01             	mov    QWORD PTR [rcx],rax
  21c9d0:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  21c9d7:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21c9db:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  21c9df:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21c9e3:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  21c9ea:	48 81 c4 20 01 00 00 	add    rsp,0x120
  21c9f1:	5d                   	pop    rbp
  21c9f2:	c3                   	ret    
  21c9f3:	48 8d 3d ce 6b 02 00 	lea    rdi,[rip+0x26bce]        # 2435c8 <__unnamed_76>
  21c9fa:	31 c0                	xor    eax,eax
  21c9fc:	89 c6                	mov    esi,eax
  21c9fe:	e8 fd eb fe ff       	call   20b600 <panic>
  21ca03:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21ca0a:	84 00 00 00 00 00 

000000000021ca10 <Allocator_free.56>:
    pub fn free(self: *Allocator, memory: var) void {
  21ca10:	55                   	push   rbp
  21ca11:	48 89 e5             	mov    rbp,rsp
  21ca14:	48 83 ec 60          	sub    rsp,0x60
  21ca18:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
        const bytes = @sliceToBytes(memory);
  21ca1c:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  21ca1f:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  21ca23:	48 6b 76 08 30       	imul   rsi,QWORD PTR [rsi+0x8],0x30
  21ca28:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21ca2c:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  21ca30:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  21ca34:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21ca38:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        if (bytes.len == 0) return;
  21ca3c:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
  21ca41:	75 06                	jne    21ca49 <Allocator_free.56+0x39>
  21ca43:	48 83 c4 60          	add    rsp,0x60
  21ca47:	5d                   	pop    rbp
  21ca48:	c3                   	ret    
  21ca49:	31 c0                	xor    eax,eax
  21ca4b:	89 c1                	mov    ecx,eax
        const non_const_ptr = @intToPtr([*]u8, @ptrToInt(bytes.ptr));
  21ca4d:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  21ca51:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
        self.freeFn(self, non_const_ptr[0..bytes.len]);
  21ca55:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  21ca59:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  21ca5d:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  21ca61:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  21ca65:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
  21ca69:	48 39 f1             	cmp    rcx,rsi
  21ca6c:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
  21ca70:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
  21ca74:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  21ca78:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  21ca7c:	76 10                	jbe    21ca8e <Allocator_free.56+0x7e>
  21ca7e:	48 8d 3d 53 69 02 00 	lea    rdi,[rip+0x26953]        # 2433d8 <__unnamed_20>
  21ca85:	31 c0                	xor    eax,eax
  21ca87:	89 c6                	mov    esi,eax
  21ca89:	e8 72 eb fe ff       	call   20b600 <panic>
  21ca8e:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
  21ca92:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21ca96:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  21ca9a:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  21ca9e:	48 83 e9 00          	sub    rcx,0x0
  21caa2:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  21caa6:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  21caaa:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  21caae:	ff d1                	call   rcx
    pub fn free(self: *Allocator, memory: var) void {
  21cab0:	48 83 c4 60          	add    rsp,0x60
  21cab4:	5d                   	pop    rbp
  21cab5:	c3                   	ret    
  21cab6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  21cabd:	00 00 00 

000000000021cac0 <format.57>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  21cac0:	55                   	push   rbp
  21cac1:	48 89 e5             	mov    rbp,rsp
  21cac4:	48 83 ec 40          	sub    rsp,0x40
  21cac8:	48 8d 05 29 6b 02 00 	lea    rax,[rip+0x26b29]        # 2435f8 <__unnamed_112>
  21cacf:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  21cad3:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
                        try output(context, fmt[start_index..i]);
  21cad7:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  21cadb:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  21cadf:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  21cae3:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  21cae7:	48 89 c2             	mov    rdx,rax
  21caea:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  21caee:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  21caf2:	ff d0                	call   rax
  21caf4:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  21caf8:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  21cafd:	74 1b                	je     21cb1a <format.57+0x5a>
  21caff:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  21cb03:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21cb07:	66 89 45 ce          	mov    WORD PTR [rbp-0x32],ax
  21cb0b:	e8 80 f1 fe ff       	call   20bc90 <__zig_return_error>
  21cb10:	66 8b 45 ce          	mov    ax,WORD PTR [rbp-0x32]
  21cb14:	48 83 c4 40          	add    rsp,0x40
  21cb18:	5d                   	pop    rbp
  21cb19:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  21cb1a:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  21cb1e:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  21cb22:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21cb26:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  21cb2a:	e8 71 00 00 00       	call   21cba0 <formatType.58>
  21cb2f:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  21cb33:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  21cb38:	74 1b                	je     21cb55 <format.57+0x95>
  21cb3a:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  21cb3e:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21cb42:	66 89 45 cc          	mov    WORD PTR [rbp-0x34],ax
  21cb46:	e8 45 f1 fe ff       	call   20bc90 <__zig_return_error>
  21cb4b:	66 8b 45 cc          	mov    ax,WORD PTR [rbp-0x34]
  21cb4f:	48 83 c4 40          	add    rsp,0x40
  21cb53:	5d                   	pop    rbp
  21cb54:	c3                   	ret    
  21cb55:	48 8d 15 b4 6a 02 00 	lea    rdx,[rip+0x26ab4]        # 243610 <__unnamed_113>
        try output(context, fmt[start_index..]);
  21cb5c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21cb60:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  21cb64:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21cb68:	ff d0                	call   rax
  21cb6a:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  21cb6e:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  21cb73:	74 1b                	je     21cb90 <format.57+0xd0>
  21cb75:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  21cb79:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  21cb7d:	66 89 45 ca          	mov    WORD PTR [rbp-0x36],ax
  21cb81:	e8 0a f1 fe ff       	call   20bc90 <__zig_return_error>
  21cb86:	66 8b 45 ca          	mov    ax,WORD PTR [rbp-0x36]
  21cb8a:	48 83 c4 40          	add    rsp,0x40
  21cb8e:	5d                   	pop    rbp
  21cb8f:	c3                   	ret    
  21cb90:	31 c0                	xor    eax,eax
  21cb92:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  21cb95:	66 89 c8             	mov    ax,cx
  21cb98:	48 83 c4 40          	add    rsp,0x40
  21cb9c:	5d                   	pop    rbp
  21cb9d:	c3                   	ret    
  21cb9e:	66 90                	xchg   ax,ax

000000000021cba0 <formatType.58>:
pub fn formatType(
  21cba0:	55                   	push   rbp
  21cba1:	48 89 e5             	mov    rbp,rsp
  21cba4:	48 83 ec 30          	sub    rsp,0x30
  21cba8:	48 8d 45 e0          	lea    rax,[rbp-0x20]
  21cbac:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  21cbb0:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
                const casted_value = ([]const u8)(value);
  21cbb4:	48 8b 0e             	mov    rcx,QWORD PTR [rsi]
  21cbb7:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  21cbbb:	48 8b 4e 08          	mov    rcx,QWORD PTR [rsi+0x8]
  21cbbf:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
                return output(context, casted_value);
  21cbc3:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  21cbc7:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21cbcb:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  21cbcf:	48 89 c2             	mov    rdx,rax
  21cbd2:	ff d1                	call   rcx
  21cbd4:	66 83 f8 00          	cmp    ax,0x0
  21cbd8:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  21cbdc:	74 0b                	je     21cbe9 <formatType.58+0x49>
  21cbde:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  21cbe2:	e8 a9 f0 fe ff       	call   20bc90 <__zig_return_error>
  21cbe7:	eb 02                	jmp    21cbeb <formatType.58+0x4b>
  21cbe9:	eb 00                	jmp    21cbeb <formatType.58+0x4b>
  21cbeb:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  21cbef:	48 83 c4 30          	add    rsp,0x30
  21cbf3:	5d                   	pop    rbp
  21cbf4:	c3                   	ret    
  21cbf5:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21cbfc:	00 00 00 00 

000000000021cc00 <getEnvVarOwned>:
pub fn getEnvVarOwned(allocator: *mem.Allocator, key: []const u8) GetEnvVarOwnedError![]u8 {
  21cc00:	55                   	push   rbp
  21cc01:	48 89 e5             	mov    rbp,rsp
  21cc04:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  21cc0b:	48 89 f8             	mov    rax,rdi
  21cc0e:	4c 8d 45 e8          	lea    r8,[rbp-0x18]
  21cc12:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
        const result = getEnvPosix(key) orelse return error.EnvironmentVariableNotFound;
  21cc16:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
  21cc1a:	4c 89 c7             	mov    rdi,r8
  21cc1d:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
  21cc21:	48 89 ce             	mov    rsi,rcx
  21cc24:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  21cc28:	e8 33 b4 00 00       	call   228060 <getEnvPosix>
  21cc2d:	f6 45 f8 01          	test   BYTE PTR [rbp-0x8],0x1
  21cc31:	75 3a                	jne    21cc6d <getEnvVarOwned+0x6d>
  21cc33:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  21cc37:	e8 54 f0 fe ff       	call   20bc90 <__zig_return_error>
  21cc3c:	48 8b 3d f5 da fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffedaf5]        # 20a738 <__unnamed_114>
  21cc43:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  21cc47:	48 89 38             	mov    QWORD PTR [rax],rdi
  21cc4a:	48 8b 3d ef da fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffedaef]        # 20a740 <__unnamed_114+0x8>
  21cc51:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  21cc55:	48 8b 3d ec da fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffedaec]        # 20a748 <__unnamed_114+0x10>
  21cc5c:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  21cc60:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  21cc64:	48 81 c4 80 00 00 00 	add    rsp,0x80
  21cc6b:	5d                   	pop    rbp
  21cc6c:	c3                   	ret    
  21cc6d:	48 8d 45 e8          	lea    rax,[rbp-0x18]
  21cc71:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  21cc75:	48 8d 7d b8          	lea    rdi,[rbp-0x48]
  21cc79:	48 8d 4d a0          	lea    rcx,[rbp-0x60]
  21cc7d:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  21cc81:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  21cc84:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  21cc88:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
  21cc8c:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
        return mem.dupe(allocator, u8, result);
  21cc90:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  21cc94:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  21cc98:	e8 c3 b6 00 00       	call   228360 <dupe>
  21cc9d:	66 83 7d b8 00       	cmp    WORD PTR [rbp-0x48],0x0
  21cca2:	74 0b                	je     21ccaf <getEnvVarOwned+0xaf>
  21cca4:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  21cca8:	e8 e3 ef fe ff       	call   20bc90 <__zig_return_error>
  21ccad:	eb 02                	jmp    21ccb1 <getEnvVarOwned+0xb1>
  21ccaf:	eb 00                	jmp    21ccb1 <getEnvVarOwned+0xb1>
  21ccb1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21ccb5:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  21ccb9:	48 89 01             	mov    QWORD PTR [rcx],rax
  21ccbc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  21ccc0:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21ccc4:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21ccc8:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  21cccc:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  21ccd0:	48 81 c4 80 00 00 00 	add    rsp,0x80
  21ccd7:	5d                   	pop    rbp
  21ccd8:	c3                   	ret    
  21ccd9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

000000000021cce0 <File_isTty>:
    pub fn isTty(self: *File) bool {
  21cce0:	55                   	push   rbp
  21cce1:	48 89 e5             	mov    rbp,rsp
  21cce4:	48 83 ec 10          	sub    rsp,0x10
  21cce8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
        return os.isTty(self.handle);
  21ccec:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  21ccf0:	8b 3f                	mov    edi,DWORD PTR [rdi]
  21ccf2:	e8 69 b7 00 00       	call   228460 <isTty>
  21ccf7:	88 c1                	mov    cl,al
  21ccf9:	88 4d f7             	mov    BYTE PTR [rbp-0x9],cl
  21ccfc:	48 83 c4 10          	add    rsp,0x10
  21cd00:	5d                   	pop    rbp
  21cd01:	c3                   	ret    
  21cd02:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21cd09:	1f 84 00 00 00 00 00 

000000000021cd10 <printSourceAtAddress>:
pub fn printSourceAtAddress(debug_info: *ElfStackTrace, out_stream: var, address: usize, tty_color: bool) !void {
  21cd10:	55                   	push   rbp
  21cd11:	48 89 e5             	mov    rbp,rsp
  21cd14:	48 81 ec c0 01 00 00 	sub    rsp,0x1c0
  21cd1b:	44 88 c0             	mov    al,r8b
  21cd1e:	4c 8d 4d f0          	lea    r9,[rbp-0x10]
  21cd22:	48 89 b5 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rsi
  21cd29:	48 89 95 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rdx
  21cd30:	48 89 8d 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rcx
  21cd37:	24 01                	and    al,0x1
  21cd39:	88 85 1f ff ff ff    	mov    BYTE PTR [rbp-0xe1],al
            const compile_unit = findCompileUnit(debug_info, address) catch {
  21cd3f:	48 8b 95 30 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd0]
  21cd46:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  21cd4d:	48 89 bd c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rdi
  21cd54:	4c 89 cf             	mov    rdi,r9
  21cd57:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  21cd5e:	e8 4d 06 00 00       	call   21d3b0 <findCompileUnit>
  21cd63:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  21cd68:	0f 84 b6 00 00 00    	je     21ce24 <printSourceAtAddress+0x114>
                if (tty_color) {
  21cd6e:	f6 85 1f ff ff ff 01 	test   BYTE PTR [rbp-0xe1],0x1
  21cd75:	75 02                	jne    21cd79 <printSourceAtAddress+0x69>
  21cd77:	eb 4e                	jmp    21cdc7 <printSourceAtAddress+0xb7>
                    try out_stream.print("???:?:?: " ++ DIM ++ "0x{x} in ??? (???)" ++ RESET ++ "\n    ???\n\n", address);
  21cd79:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21cd80:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
  21cd87:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21cd8e:	e8 bd 0b 00 00       	call   21d950 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.59>
  21cd93:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  21cd97:	66 83 7d de 00       	cmp    WORD PTR [rbp-0x22],0x0
  21cd9c:	74 27                	je     21cdc5 <printSourceAtAddress+0xb5>
  21cd9e:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  21cda2:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21cda9:	66 89 85 be fe ff ff 	mov    WORD PTR [rbp-0x142],ax
  21cdb0:	e8 db ee fe ff       	call   20bc90 <__zig_return_error>
  21cdb5:	66 8b 85 be fe ff ff 	mov    ax,WORD PTR [rbp-0x142]
  21cdbc:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  21cdc3:	5d                   	pop    rbp
  21cdc4:	c3                   	ret    
                if (tty_color) {
  21cdc5:	eb 4c                	jmp    21ce13 <printSourceAtAddress+0x103>
                    try out_stream.print("???:?:?: 0x{x} in ??? (???)\n    ???\n\n", address);
  21cdc7:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21cdce:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
  21cdd5:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21cddc:	e8 bf 0b 00 00       	call   21d9a0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.60>
  21cde1:	66 89 45 dc          	mov    WORD PTR [rbp-0x24],ax
  21cde5:	66 83 7d dc 00       	cmp    WORD PTR [rbp-0x24],0x0
  21cdea:	74 27                	je     21ce13 <printSourceAtAddress+0x103>
  21cdec:	66 8b 45 dc          	mov    ax,WORD PTR [rbp-0x24]
  21cdf0:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21cdf7:	66 89 85 bc fe ff ff 	mov    WORD PTR [rbp-0x144],ax
  21cdfe:	e8 8d ee fe ff       	call   20bc90 <__zig_return_error>
  21ce03:	66 8b 85 bc fe ff ff 	mov    ax,WORD PTR [rbp-0x144]
  21ce0a:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  21ce11:	5d                   	pop    rbp
  21ce12:	c3                   	ret    
  21ce13:	31 c0                	xor    eax,eax
  21ce15:	66 89 c1             	mov    cx,ax
                return;
  21ce18:	66 89 c8             	mov    ax,cx
  21ce1b:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  21ce22:	5d                   	pop    rbp
  21ce23:	c3                   	ret    
            const compile_unit = findCompileUnit(debug_info, address) catch {
  21ce24:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21ce28:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  21ce2f:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  21ce33:	b8 03 00 00 00       	mov    eax,0x3
  21ce38:	41 89 c0             	mov    r8d,eax
  21ce3b:	48 8b 8d b0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x150]
  21ce42:	48 89 8d 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rcx
            const compile_unit_name = try compile_unit.die.getAttrString(debug_info, DW.AT_name);
  21ce49:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
  21ce50:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  21ce54:	48 8b 8d 30 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd0]
  21ce5b:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  21ce62:	e8 89 0b 00 00       	call   21d9f0 <Die_getAttrString>
  21ce67:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  21ce6c:	74 27                	je     21ce95 <printSourceAtAddress+0x185>
  21ce6e:	66 8b 45 c0          	mov    ax,WORD PTR [rbp-0x40]
  21ce72:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21ce79:	66 89 85 ae fe ff ff 	mov    WORD PTR [rbp-0x152],ax
  21ce80:	e8 0b ee fe ff       	call   20bc90 <__zig_return_error>
  21ce85:	66 8b 85 ae fe ff ff 	mov    ax,WORD PTR [rbp-0x152]
  21ce8c:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  21ce93:	5d                   	pop    rbp
  21ce94:	c3                   	ret    
  21ce95:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21ce99:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
  21cea0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  21cea4:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
            if (getLineNumberInfo(debug_info, compile_unit, address - 1)) |line_info| {
  21ceab:	48 8b 95 30 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd0]
  21ceb2:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  21ceb9:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21cec0:	48 83 e8 01          	sub    rax,0x1
  21cec4:	40 0f 92 c6          	setb   sil
  21cec8:	48 89 95 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdx
  21cecf:	48 89 8d 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rcx
  21ced6:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  21cedd:	40 88 b5 8f fe ff ff 	mov    BYTE PTR [rbp-0x171],sil
  21cee4:	0f 82 4b 04 00 00    	jb     21d335 <printSourceAtAddress+0x625>
  21ceea:	e9 56 04 00 00       	jmp    21d345 <printSourceAtAddress+0x635>
  21ceef:	b8 28 00 00 00       	mov    eax,0x28
  21cef4:	89 c2                	mov    edx,eax
  21cef6:	48 8d 8d d8 fe ff ff 	lea    rcx,[rbp-0x128]
  21cefd:	48 8d b5 78 ff ff ff 	lea    rsi,[rbp-0x88]
  21cf04:	48 83 c6 08          	add    rsi,0x8
  21cf08:	48 89 cf             	mov    rdi,rcx
  21cf0b:	e8 90 79 01 00       	call   2348a0 <memcpy>
                if (tty_color) {
  21cf10:	f6 85 1f ff ff ff 01 	test   BYTE PTR [rbp-0xe1],0x1
  21cf17:	75 05                	jne    21cf1e <printSourceAtAddress+0x20e>
  21cf19:	e9 ac 02 00 00       	jmp    21d1ca <printSourceAtAddress+0x4ba>
  21cf1e:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
  21cf25:	48 8d 8d d8 fe ff ff 	lea    rcx,[rbp-0x128]
                    try out_stream.print(
  21cf2c:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
                        line_info.file_name,
  21cf33:	48 83 c1 10          	add    rcx,0x10
                        line_info.line,
  21cf37:	48 8b 95 d8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x128]
                        line_info.column,
  21cf3e:	4c 8b 85 e0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x120]
                        address,
  21cf45:	4c 8b 8d 20 ff ff ff 	mov    r9,QWORD PTR [rbp-0xe0]
                    try out_stream.print(
  21cf4c:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21cf53:	48 89 95 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rdx
  21cf5a:	48 89 ca             	mov    rdx,rcx
  21cf5d:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
  21cf64:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  21cf68:	e8 b3 38 00 00       	call   220820 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.61>
  21cf6d:	66 89 85 46 ff ff ff 	mov    WORD PTR [rbp-0xba],ax
  21cf74:	66 83 bd 46 ff ff ff 	cmp    WORD PTR [rbp-0xba],0x0
  21cf7b:	00 
  21cf7c:	74 36                	je     21cfb4 <printSourceAtAddress+0x2a4>
  21cf7e:	48 8d bd d8 fe ff ff 	lea    rdi,[rbp-0x128]
                defer line_info.deinit();
  21cf85:	e8 16 39 00 00       	call   2208a0 <LineInfo_deinit>
                    try out_stream.print(
  21cf8a:	66 8b 85 46 ff ff ff 	mov    ax,WORD PTR [rbp-0xba]
  21cf91:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21cf98:	66 89 85 7e fe ff ff 	mov    WORD PTR [rbp-0x182],ax
  21cf9f:	e8 ec ec fe ff       	call   20bc90 <__zig_return_error>
  21cfa4:	66 8b 85 7e fe ff ff 	mov    ax,WORD PTR [rbp-0x182]
  21cfab:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  21cfb2:	5d                   	pop    rbp
  21cfb3:	c3                   	ret    
                    if (printLineFromFile(debug_info.allocator(), out_stream, line_info)) {
  21cfb4:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
  21cfbb:	e8 40 8c ff ff       	call   215c00 <ElfStackTrace_allocator>
  21cfc0:	48 8d 8d d8 fe ff ff 	lea    rcx,[rbp-0x128]
  21cfc7:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
  21cfce:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21cfd5:	48 89 c6             	mov    rsi,rax
  21cfd8:	e8 f3 38 00 00       	call   2208d0 <printLineFromFile>
  21cfdd:	66 89 85 44 ff ff ff 	mov    WORD PTR [rbp-0xbc],ax
  21cfe4:	66 83 bd 44 ff ff ff 	cmp    WORD PTR [rbp-0xbc],0x0
  21cfeb:	00 
  21cfec:	0f 85 77 01 00 00    	jne    21d169 <printSourceAtAddress+0x459>
                        if (line_info.column == 0) {
  21cff2:	48 83 bd e0 fe ff ff 	cmp    QWORD PTR [rbp-0x120],0x0
  21cff9:	00 
  21cffa:	75 66                	jne    21d062 <printSourceAtAddress+0x352>
  21cffc:	48 8d 15 45 66 02 00 	lea    rdx,[rip+0x26645]        # 243648 <__unnamed_115>
                            try out_stream.write("\n");
  21d003:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21d00a:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21d011:	e8 6a 3c 00 00       	call   220c80 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_write>
  21d016:	66 89 85 42 ff ff ff 	mov    WORD PTR [rbp-0xbe],ax
  21d01d:	66 83 bd 42 ff ff ff 	cmp    WORD PTR [rbp-0xbe],0x0
  21d024:	00 
  21d025:	74 36                	je     21d05d <printSourceAtAddress+0x34d>
  21d027:	48 8d bd d8 fe ff ff 	lea    rdi,[rbp-0x128]
                defer line_info.deinit();
  21d02e:	e8 6d 38 00 00       	call   2208a0 <LineInfo_deinit>
                            try out_stream.write("\n");
  21d033:	66 8b 85 42 ff ff ff 	mov    ax,WORD PTR [rbp-0xbe]
  21d03a:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21d041:	66 89 85 7c fe ff ff 	mov    WORD PTR [rbp-0x184],ax
  21d048:	e8 43 ec fe ff       	call   20bc90 <__zig_return_error>
  21d04d:	66 8b 85 7c fe ff ff 	mov    ax,WORD PTR [rbp-0x184]
  21d054:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  21d05b:	5d                   	pop    rbp
  21d05c:	c3                   	ret    
                        if (line_info.column == 0) {
  21d05d:	e9 05 01 00 00       	jmp    21d167 <printSourceAtAddress+0x457>
                                var col_i: usize = 1;
  21d062:	48 c7 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],0x1
  21d069:	01 00 00 00 
                                while (col_i < line_info.column) : (col_i += 1) {
  21d06d:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21d074:	48 3b 85 e0 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x120]
  21d07b:	0f 83 85 00 00 00    	jae    21d106 <printSourceAtAddress+0x3f6>
  21d081:	ba 20 00 00 00       	mov    edx,0x20
                                    try out_stream.writeByte(' ');
  21d086:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21d08d:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21d094:	e8 37 3c 00 00       	call   220cd0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_writeByte>
  21d099:	66 89 85 40 ff ff ff 	mov    WORD PTR [rbp-0xc0],ax
  21d0a0:	66 83 bd 40 ff ff ff 	cmp    WORD PTR [rbp-0xc0],0x0
  21d0a7:	00 
  21d0a8:	74 36                	je     21d0e0 <printSourceAtAddress+0x3d0>
  21d0aa:	48 8d bd d8 fe ff ff 	lea    rdi,[rbp-0x128]
                defer line_info.deinit();
  21d0b1:	e8 ea 37 00 00       	call   2208a0 <LineInfo_deinit>
                                    try out_stream.writeByte(' ');
  21d0b6:	66 8b 85 40 ff ff ff 	mov    ax,WORD PTR [rbp-0xc0]
  21d0bd:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21d0c4:	66 89 85 7a fe ff ff 	mov    WORD PTR [rbp-0x186],ax
  21d0cb:	e8 c0 eb fe ff       	call   20bc90 <__zig_return_error>
  21d0d0:	66 8b 85 7a fe ff ff 	mov    ax,WORD PTR [rbp-0x186]
  21d0d7:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  21d0de:	5d                   	pop    rbp
  21d0df:	c3                   	ret    
                                while (col_i < line_info.column) : (col_i += 1) {
  21d0e0:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21d0e7:	48 83 c0 01          	add    rax,0x1
  21d0eb:	0f 92 c1             	setb   cl
  21d0ee:	48 89 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rax
  21d0f5:	88 8d 6f fe ff ff    	mov    BYTE PTR [rbp-0x191],cl
  21d0fb:	0f 82 7f 02 00 00    	jb     21d380 <printSourceAtAddress+0x670>
  21d101:	e9 8a 02 00 00       	jmp    21d390 <printSourceAtAddress+0x680>
  21d106:	48 8d 15 53 65 02 00 	lea    rdx,[rip+0x26553]        # 243660 <__unnamed_116>
                            try out_stream.write(GREEN ++ "^" ++ RESET ++ "\n");
  21d10d:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21d114:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21d11b:	e8 60 3b 00 00       	call   220c80 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_write>
  21d120:	66 89 85 3e ff ff ff 	mov    WORD PTR [rbp-0xc2],ax
  21d127:	66 83 bd 3e ff ff ff 	cmp    WORD PTR [rbp-0xc2],0x0
  21d12e:	00 
  21d12f:	74 36                	je     21d167 <printSourceAtAddress+0x457>
  21d131:	48 8d bd d8 fe ff ff 	lea    rdi,[rbp-0x128]
                defer line_info.deinit();
  21d138:	e8 63 37 00 00       	call   2208a0 <LineInfo_deinit>
                            try out_stream.write(GREEN ++ "^" ++ RESET ++ "\n");
  21d13d:	66 8b 85 3e ff ff ff 	mov    ax,WORD PTR [rbp-0xc2]
  21d144:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21d14b:	66 89 85 6c fe ff ff 	mov    WORD PTR [rbp-0x194],ax
  21d152:	e8 39 eb fe ff       	call   20bc90 <__zig_return_error>
  21d157:	66 8b 85 6c fe ff ff 	mov    ax,WORD PTR [rbp-0x194]
  21d15e:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  21d165:	5d                   	pop    rbp
  21d166:	c3                   	ret    
                    if (printLineFromFile(debug_info.allocator(), out_stream, line_info)) {
  21d167:	eb 5c                	jmp    21d1c5 <printSourceAtAddress+0x4b5>
  21d169:	66 8b 85 44 ff ff ff 	mov    ax,WORD PTR [rbp-0xbc]
  21d170:	66 89 85 ce fe ff ff 	mov    WORD PTR [rbp-0x132],ax
                    } else |err| switch (err) {
  21d177:	0f b7 8d ce fe ff ff 	movzx  ecx,WORD PTR [rbp-0x132]
  21d17e:	83 e9 26             	sub    ecx,0x26
  21d181:	89 8d 68 fe ff ff    	mov    DWORD PTR [rbp-0x198],ecx
  21d187:	74 38                	je     21d1c1 <printSourceAtAddress+0x4b1>
  21d189:	eb 00                	jmp    21d18b <printSourceAtAddress+0x47b>
  21d18b:	48 8d bd d8 fe ff ff 	lea    rdi,[rbp-0x128]
                        else => return err,
  21d192:	66 8b 85 ce fe ff ff 	mov    ax,WORD PTR [rbp-0x132]
                defer line_info.deinit();
  21d199:	66 89 85 66 fe ff ff 	mov    WORD PTR [rbp-0x19a],ax
  21d1a0:	e8 fb 36 00 00       	call   2208a0 <LineInfo_deinit>
                        else => return err,
  21d1a5:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21d1ac:	e8 df ea fe ff       	call   20bc90 <__zig_return_error>
  21d1b1:	66 8b 85 66 fe ff ff 	mov    ax,WORD PTR [rbp-0x19a]
  21d1b8:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  21d1bf:	5d                   	pop    rbp
  21d1c0:	c3                   	ret    
                    } else |err| switch (err) {
  21d1c1:	eb 00                	jmp    21d1c3 <printSourceAtAddress+0x4b3>
                    if (printLineFromFile(debug_info.allocator(), out_stream, line_info)) {
  21d1c3:	eb 00                	jmp    21d1c5 <printSourceAtAddress+0x4b5>
                if (tty_color) {
  21d1c5:	e9 96 00 00 00       	jmp    21d260 <printSourceAtAddress+0x550>
  21d1ca:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
  21d1d1:	48 8d 8d d8 fe ff ff 	lea    rcx,[rbp-0x128]
                    try out_stream.print(
  21d1d8:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
                        line_info.file_name,
  21d1df:	48 83 c1 10          	add    rcx,0x10
                        line_info.line,
  21d1e3:	48 8b 95 d8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x128]
                        line_info.column,
  21d1ea:	4c 8b 85 e0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x120]
                        address,
  21d1f1:	4c 8b 8d 20 ff ff ff 	mov    r9,QWORD PTR [rbp-0xe0]
                    try out_stream.print(
  21d1f8:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21d1ff:	48 89 95 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rdx
  21d206:	48 89 ca             	mov    rdx,rcx
  21d209:	48 8b 8d 58 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1a8]
  21d210:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  21d214:	e8 57 3b 00 00       	call   220d70 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.62>
  21d219:	66 89 85 3c ff ff ff 	mov    WORD PTR [rbp-0xc4],ax
  21d220:	66 83 bd 3c ff ff ff 	cmp    WORD PTR [rbp-0xc4],0x0
  21d227:	00 
  21d228:	74 36                	je     21d260 <printSourceAtAddress+0x550>
  21d22a:	48 8d bd d8 fe ff ff 	lea    rdi,[rbp-0x128]
                defer line_info.deinit();
  21d231:	e8 6a 36 00 00       	call   2208a0 <LineInfo_deinit>
                    try out_stream.print(
  21d236:	66 8b 85 3c ff ff ff 	mov    ax,WORD PTR [rbp-0xc4]
  21d23d:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21d244:	66 89 85 56 fe ff ff 	mov    WORD PTR [rbp-0x1aa],ax
  21d24b:	e8 40 ea fe ff       	call   20bc90 <__zig_return_error>
  21d250:	66 8b 85 56 fe ff ff 	mov    ax,WORD PTR [rbp-0x1aa]
  21d257:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  21d25e:	5d                   	pop    rbp
  21d25f:	c3                   	ret    
  21d260:	48 8d bd d8 fe ff ff 	lea    rdi,[rbp-0x128]
                defer line_info.deinit();
  21d267:	e8 34 36 00 00       	call   2208a0 <LineInfo_deinit>
            if (getLineNumberInfo(debug_info, compile_unit, address - 1)) |line_info| {
  21d26c:	e9 b3 00 00 00       	jmp    21d324 <printSourceAtAddress+0x614>
  21d271:	66 8b 85 78 ff ff ff 	mov    ax,WORD PTR [rbp-0x88]
  21d278:	66 89 85 cc fe ff ff 	mov    WORD PTR [rbp-0x134],ax
            } else |err| switch (err) {
  21d27f:	0f b7 8d cc fe ff ff 	movzx  ecx,WORD PTR [rbp-0x134]
  21d286:	83 c1 dc             	add    ecx,0xffffffdc
  21d289:	66 89 c8             	mov    ax,cx
  21d28c:	0f b7 c8             	movzx  ecx,ax
  21d28f:	83 e9 02             	sub    ecx,0x2
  21d292:	89 8d 50 fe ff ff    	mov    DWORD PTR [rbp-0x1b0],ecx
  21d298:	72 2c                	jb     21d2c6 <printSourceAtAddress+0x5b6>
  21d29a:	eb 00                	jmp    21d29c <printSourceAtAddress+0x58c>
                else => return err,
  21d29c:	66 8b 85 cc fe ff ff 	mov    ax,WORD PTR [rbp-0x134]
  21d2a3:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21d2aa:	66 89 85 4e fe ff ff 	mov    WORD PTR [rbp-0x1b2],ax
  21d2b1:	e8 da e9 fe ff       	call   20bc90 <__zig_return_error>
  21d2b6:	66 8b 85 4e fe ff ff 	mov    ax,WORD PTR [rbp-0x1b2]
  21d2bd:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  21d2c4:	5d                   	pop    rbp
  21d2c5:	c3                   	ret    
  21d2c6:	48 8d 8d 00 ff ff ff 	lea    rcx,[rbp-0x100]
                    try out_stream.print("0x{x} in ??? ({})\n", address, compile_unit_name);
  21d2cd:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  21d2d4:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
  21d2db:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21d2e2:	e8 09 3b 00 00       	call   220df0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.63>
  21d2e7:	66 89 85 3a ff ff ff 	mov    WORD PTR [rbp-0xc6],ax
  21d2ee:	66 83 bd 3a ff ff ff 	cmp    WORD PTR [rbp-0xc6],0x0
  21d2f5:	00 
  21d2f6:	74 2a                	je     21d322 <printSourceAtAddress+0x612>
  21d2f8:	66 8b 85 3a ff ff ff 	mov    ax,WORD PTR [rbp-0xc6]
  21d2ff:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  21d306:	66 89 85 4c fe ff ff 	mov    WORD PTR [rbp-0x1b4],ax
  21d30d:	e8 7e e9 fe ff       	call   20bc90 <__zig_return_error>
  21d312:	66 8b 85 4c fe ff ff 	mov    ax,WORD PTR [rbp-0x1b4]
  21d319:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  21d320:	5d                   	pop    rbp
  21d321:	c3                   	ret    
            if (getLineNumberInfo(debug_info, compile_unit, address - 1)) |line_info| {
  21d322:	eb 00                	jmp    21d324 <printSourceAtAddress+0x614>
  21d324:	31 c0                	xor    eax,eax
  21d326:	66 89 c1             	mov    cx,ax
pub fn printSourceAtAddress(debug_info: *ElfStackTrace, out_stream: var, address: usize, tty_color: bool) !void {
  21d329:	66 89 c8             	mov    ax,cx
  21d32c:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  21d333:	5d                   	pop    rbp
  21d334:	c3                   	ret    
  21d335:	48 8d 3d 8c 5e 02 00 	lea    rdi,[rip+0x25e8c]        # 2431c8 <__unnamed_4>
  21d33c:	31 c0                	xor    eax,eax
  21d33e:	89 c6                	mov    esi,eax
            if (getLineNumberInfo(debug_info, compile_unit, address - 1)) |line_info| {
  21d340:	e8 bb e2 fe ff       	call   20b600 <panic>
  21d345:	48 8d bd 78 ff ff ff 	lea    rdi,[rbp-0x88]
  21d34c:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  21d353:	48 8b 95 a0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x160]
  21d35a:	48 8b 8d 98 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x168]
  21d361:	4c 8b 85 90 fe ff ff 	mov    r8,QWORD PTR [rbp-0x170]
  21d368:	e8 83 08 00 00       	call   21dbf0 <getLineNumberInfo>
  21d36d:	66 83 bd 78 ff ff ff 	cmp    WORD PTR [rbp-0x88],0x0
  21d374:	00 
  21d375:	0f 85 f6 fe ff ff    	jne    21d271 <printSourceAtAddress+0x561>
  21d37b:	e9 6f fb ff ff       	jmp    21ceef <printSourceAtAddress+0x1df>
  21d380:	48 8d 3d 41 5e 02 00 	lea    rdi,[rip+0x25e41]        # 2431c8 <__unnamed_4>
  21d387:	31 c0                	xor    eax,eax
  21d389:	89 c6                	mov    esi,eax
                                while (col_i < line_info.column) : (col_i += 1) {
  21d38b:	e8 70 e2 fe ff       	call   20b600 <panic>
  21d390:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  21d397:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  21d39e:	e9 ca fc ff ff       	jmp    21d06d <printSourceAtAddress+0x35d>
  21d3a3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21d3aa:	84 00 00 00 00 00 

000000000021d3b0 <findCompileUnit>:
fn findCompileUnit(st: *ElfStackTrace, target_address: u64) !*const CompileUnit {
  21d3b0:	55                   	push   rbp
  21d3b1:	48 89 e5             	mov    rbp,rsp
  21d3b4:	48 81 ec d0 01 00 00 	sub    rsp,0x1d0
  21d3bb:	48 89 f8             	mov    rax,rdi
  21d3be:	4c 8d 45 f0          	lea    r8,[rbp-0x10]
  21d3c2:	48 89 95 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rdx
  21d3c9:	48 89 8d f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rcx
    var in_file_stream = io.FileInStream.init(&st.self_exe_file);
  21d3d0:	48 8b 8d 00 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x100]
  21d3d7:	48 89 bd 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rdi
  21d3de:	4c 89 c7             	mov    rdi,r8
  21d3e1:	48 89 b5 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rsi
  21d3e8:	48 89 ce             	mov    rsi,rcx
  21d3eb:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  21d3f2:	e8 39 65 ff ff       	call   213930 <FileInStream_init>
  21d3f7:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
  21d3fb:	48 8d 85 e8 fe ff ff 	lea    rax,[rbp-0x118]
  21d402:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  21d406:	48 89 8d e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rcx
  21d40d:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  21d411:	48 89 8d f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rcx
    const in_stream = &in_file_stream.stream;
  21d418:	48 83 c0 08          	add    rax,0x8
  21d41c:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
    for (st.compile_unit_list.toSlice()) |*compile_unit| {
  21d423:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  21d42a:	48 05 a8 00 00 00    	add    rax,0xa8
  21d430:	48 89 c6             	mov    rsi,rax
  21d433:	e8 18 3a 00 00       	call   220e50 <AlignedArrayList(CompileUnit,2)_toSlice>
  21d438:	be aa 00 00 00       	mov    esi,0xaa
  21d43d:	41 b9 08 00 00 00    	mov    r9d,0x8
  21d443:	44 89 ca             	mov    edx,r9d
  21d446:	48 8d 85 d8 fe ff ff 	lea    rax,[rbp-0x128]
  21d44d:	48 89 c7             	mov    rdi,rax
  21d450:	e8 fb 73 01 00       	call   234850 <memset>
  21d455:	48 c7 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],0x0
  21d45c:	00 00 00 00 
  21d460:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  21d464:	48 89 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rax
  21d46b:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  21d472:	48 8b 8d 70 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x190]
  21d479:	48 39 c8             	cmp    rax,rcx
  21d47c:	48 89 85 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rax
  21d483:	0f 83 46 04 00 00    	jae    21d8cf <findCompileUnit+0x51f>
  21d489:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
  21d490:	48 6b c8 30          	imul   rcx,rax,0x30
  21d494:	48 03 4d e0          	add    rcx,QWORD PTR [rbp-0x20]
  21d498:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
        if (compile_unit.pc_range) |range| {
  21d49f:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
  21d4a6:	48 89 ca             	mov    rdx,rcx
  21d4a9:	48 83 c2 18          	add    rdx,0x18
  21d4ad:	f6 41 28 01          	test   BYTE PTR [rcx+0x28],0x1
  21d4b1:	48 89 95 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rdx
  21d4b8:	75 05                	jne    21d4bf <findCompileUnit+0x10f>
  21d4ba:	e9 98 00 00 00       	jmp    21d557 <findCompileUnit+0x1a7>
  21d4bf:	48 8b 85 60 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a0]
  21d4c6:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  21d4c9:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
  21d4d0:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  21d4d4:	48 89 8d c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rcx
            if (target_address >= range.start and target_address < range.end) return compile_unit;
  21d4db:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  21d4e2:	48 3b 8d c0 fe ff ff 	cmp    rcx,QWORD PTR [rbp-0x140]
  21d4e9:	0f 93 c2             	setae  dl
  21d4ec:	f6 c2 01             	test   dl,0x1
  21d4ef:	88 95 5f fe ff ff    	mov    BYTE PTR [rbp-0x1a1],dl
  21d4f5:	75 02                	jne    21d4f9 <findCompileUnit+0x149>
  21d4f7:	eb 17                	jmp    21d510 <findCompileUnit+0x160>
  21d4f9:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  21d500:	48 3b 85 c8 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x138]
  21d507:	0f 92 c1             	setb   cl
  21d50a:	88 8d 5f fe ff ff    	mov    BYTE PTR [rbp-0x1a1],cl
  21d510:	8a 85 5f fe ff ff    	mov    al,BYTE PTR [rbp-0x1a1]
  21d516:	a8 01                	test   al,0x1
  21d518:	75 02                	jne    21d51c <findCompileUnit+0x16c>
  21d51a:	eb 37                	jmp    21d553 <findCompileUnit+0x1a3>
  21d51c:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  21d523:	66 c7 45 c0 00 00    	mov    WORD PTR [rbp-0x40],0x0
  21d529:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  21d52d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  21d531:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
  21d538:	48 89 01             	mov    QWORD PTR [rcx],rax
  21d53b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  21d53f:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21d543:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
  21d54a:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  21d551:	5d                   	pop    rbp
  21d552:	c3                   	ret    
  21d553:	eb 00                	jmp    21d555 <findCompileUnit+0x1a5>
        if (compile_unit.pc_range) |range| {
  21d555:	eb 02                	jmp    21d559 <findCompileUnit+0x1a9>
  21d557:	eb 00                	jmp    21d559 <findCompileUnit+0x1a9>
  21d559:	48 8d 7d b0          	lea    rdi,[rbp-0x50]
  21d55d:	b8 55 00 00 00       	mov    eax,0x55
  21d562:	89 c1                	mov    ecx,eax
        if (compile_unit.die.getAttrSecOffset(DW.AT_ranges)) |ranges_offset| {
  21d564:	48 8b 95 d8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x128]
  21d56b:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  21d56f:	48 8b b5 80 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x180]
  21d576:	e8 75 39 00 00       	call   220ef0 <Die_getAttrSecOffset>
  21d57b:	66 83 7d b0 00       	cmp    WORD PTR [rbp-0x50],0x0
  21d580:	0f 85 c5 02 00 00    	jne    21d84b <findCompileUnit+0x49b>
  21d586:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  21d58a:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
            var base_address: usize = 0;
  21d591:	48 c7 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],0x0
  21d598:	00 00 00 00 
            if (st.debug_ranges) |debug_ranges| {
  21d59c:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  21d5a3:	48 89 c1             	mov    rcx,rax
  21d5a6:	48 81 c1 80 00 00 00 	add    rcx,0x80
  21d5ad:	48 83 b8 80 00 00 00 	cmp    QWORD PTR [rax+0x80],0x0
  21d5b4:	00 
  21d5b5:	48 89 8d 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rcx
  21d5bc:	0f 84 85 02 00 00    	je     21d847 <findCompileUnit+0x497>
  21d5c2:	48 8b 85 50 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b0]
  21d5c9:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  21d5cc:	48 89 8d a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rcx
                try st.self_exe_file.seekTo(debug_ranges.offset + ranges_offset);
  21d5d3:	48 8b b5 00 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x100]
  21d5da:	48 8b 8d a8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x158]
  21d5e1:	48 8b 49 18          	mov    rcx,QWORD PTR [rcx+0x18]
  21d5e5:	48 03 8d b8 fe ff ff 	add    rcx,QWORD PTR [rbp-0x148]
  21d5ec:	0f 92 c2             	setb   dl
  21d5ef:	48 89 b5 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rsi
  21d5f6:	48 89 8d 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rcx
  21d5fd:	88 95 3f fe ff ff    	mov    BYTE PTR [rbp-0x1c1],dl
  21d603:	0f 82 fe 02 00 00    	jb     21d907 <findCompileUnit+0x557>
  21d609:	e9 09 03 00 00       	jmp    21d917 <findCompileUnit+0x567>
  21d60e:	66 8b 45 9e          	mov    ax,WORD PTR [rbp-0x62]
  21d612:	48 8b bd 80 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x180]
  21d619:	66 89 85 3c fe ff ff 	mov    WORD PTR [rbp-0x1c4],ax
  21d620:	e8 6b e6 fe ff       	call   20bc90 <__zig_return_error>
  21d625:	66 8b 85 3c fe ff ff 	mov    ax,WORD PTR [rbp-0x1c4]
  21d62c:	66 89 45 88          	mov    WORD PTR [rbp-0x78],ax
  21d630:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  21d634:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
  21d63b:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21d63e:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  21d642:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21d646:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
  21d64d:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  21d654:	5d                   	pop    rbp
  21d655:	c3                   	ret    
                while (true) {
  21d656:	eb 00                	jmp    21d658 <findCompileUnit+0x2a8>
  21d658:	48 8d bd 78 ff ff ff 	lea    rdi,[rbp-0x88]
                    const begin_addr = try in_stream.readIntLe(usize);
  21d65f:	48 8b 95 e0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x120]
  21d666:	48 8b b5 80 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x180]
  21d66d:	e8 5e 3a 00 00       	call   2210d0 <InStream(ReadError)_readIntLe.64>
  21d672:	66 83 bd 78 ff ff ff 	cmp    WORD PTR [rbp-0x88],0x0
  21d679:	00 
  21d67a:	74 54                	je     21d6d0 <findCompileUnit+0x320>
  21d67c:	66 8b 85 78 ff ff ff 	mov    ax,WORD PTR [rbp-0x88]
  21d683:	48 8b bd 80 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x180]
  21d68a:	66 89 85 3a fe ff ff 	mov    WORD PTR [rbp-0x1c6],ax
  21d691:	e8 fa e5 fe ff       	call   20bc90 <__zig_return_error>
  21d696:	66 8b 85 3a fe ff ff 	mov    ax,WORD PTR [rbp-0x1c6]
  21d69d:	66 89 85 58 ff ff ff 	mov    WORD PTR [rbp-0xa8],ax
  21d6a4:	48 8b bd 58 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  21d6ab:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
  21d6b2:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21d6b5:	48 8b bd 60 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  21d6bc:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21d6c0:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
  21d6c7:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  21d6ce:	5d                   	pop    rbp
  21d6cf:	c3                   	ret    
  21d6d0:	48 8d bd 48 ff ff ff 	lea    rdi,[rbp-0xb8]
  21d6d7:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  21d6db:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
                    const end_addr = try in_stream.readIntLe(usize);
  21d6e2:	48 8b 95 e0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x120]
  21d6e9:	48 8b b5 80 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x180]
  21d6f0:	e8 db 39 00 00       	call   2210d0 <InStream(ReadError)_readIntLe.64>
  21d6f5:	66 83 bd 48 ff ff ff 	cmp    WORD PTR [rbp-0xb8],0x0
  21d6fc:	00 
  21d6fd:	74 54                	je     21d753 <findCompileUnit+0x3a3>
  21d6ff:	66 8b 85 48 ff ff ff 	mov    ax,WORD PTR [rbp-0xb8]
  21d706:	48 8b bd 80 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x180]
  21d70d:	66 89 85 38 fe ff ff 	mov    WORD PTR [rbp-0x1c8],ax
  21d714:	e8 77 e5 fe ff       	call   20bc90 <__zig_return_error>
  21d719:	66 8b 85 38 fe ff ff 	mov    ax,WORD PTR [rbp-0x1c8]
  21d720:	66 89 85 28 ff ff ff 	mov    WORD PTR [rbp-0xd8],ax
  21d727:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  21d72e:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
  21d735:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21d738:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
  21d73f:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21d743:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
  21d74a:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  21d751:	5d                   	pop    rbp
  21d752:	c3                   	ret    
  21d753:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  21d75a:	48 89 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rax
                    if (begin_addr == 0 and end_addr == 0) {
  21d761:	48 83 bd a0 fe ff ff 	cmp    QWORD PTR [rbp-0x160],0x0
  21d768:	00 
  21d769:	0f 94 c1             	sete   cl
  21d76c:	f6 c1 01             	test   cl,0x1
  21d76f:	88 8d 37 fe ff ff    	mov    BYTE PTR [rbp-0x1c9],cl
  21d775:	75 02                	jne    21d779 <findCompileUnit+0x3c9>
  21d777:	eb 11                	jmp    21d78a <findCompileUnit+0x3da>
  21d779:	48 83 bd 98 fe ff ff 	cmp    QWORD PTR [rbp-0x168],0x0
  21d780:	00 
  21d781:	0f 94 c0             	sete   al
  21d784:	88 85 37 fe ff ff    	mov    BYTE PTR [rbp-0x1c9],al
  21d78a:	8a 85 37 fe ff ff    	mov    al,BYTE PTR [rbp-0x1c9]
  21d790:	a8 01                	test   al,0x1
  21d792:	75 02                	jne    21d796 <findCompileUnit+0x3e6>
  21d794:	eb 05                	jmp    21d79b <findCompileUnit+0x3eb>
                        break;
  21d796:	e9 aa 00 00 00       	jmp    21d845 <findCompileUnit+0x495>
                    if (begin_addr == 0 and end_addr == 0) {
  21d79b:	eb 00                	jmp    21d79d <findCompileUnit+0x3ed>
                    if (begin_addr == @maxValue(usize)) {
  21d79d:	48 83 bd a0 fe ff ff 	cmp    QWORD PTR [rbp-0x160],0xffffffffffffffff
  21d7a4:	ff 
  21d7a5:	75 13                	jne    21d7ba <findCompileUnit+0x40a>
                        base_address = begin_addr;
  21d7a7:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
  21d7ae:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
                        continue;
  21d7b5:	e9 9c fe ff ff       	jmp    21d656 <findCompileUnit+0x2a6>
                    if (begin_addr == @maxValue(usize)) {
  21d7ba:	eb 00                	jmp    21d7bc <findCompileUnit+0x40c>
                    if (target_address >= begin_addr and target_address < end_addr) {
  21d7bc:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  21d7c3:	48 3b 85 a0 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x160]
  21d7ca:	0f 93 c1             	setae  cl
  21d7cd:	f6 c1 01             	test   cl,0x1
  21d7d0:	88 8d 36 fe ff ff    	mov    BYTE PTR [rbp-0x1ca],cl
  21d7d6:	75 02                	jne    21d7da <findCompileUnit+0x42a>
  21d7d8:	eb 17                	jmp    21d7f1 <findCompileUnit+0x441>
  21d7da:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  21d7e1:	48 3b 85 98 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x168]
  21d7e8:	0f 92 c1             	setb   cl
  21d7eb:	88 8d 36 fe ff ff    	mov    BYTE PTR [rbp-0x1ca],cl
  21d7f1:	8a 85 36 fe ff ff    	mov    al,BYTE PTR [rbp-0x1ca]
  21d7f7:	a8 01                	test   al,0x1
  21d7f9:	75 02                	jne    21d7fd <findCompileUnit+0x44d>
  21d7fb:	eb 43                	jmp    21d840 <findCompileUnit+0x490>
                        return compile_unit;
  21d7fd:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  21d804:	66 c7 85 18 ff ff ff 	mov    WORD PTR [rbp-0xe8],0x0
  21d80b:	00 00 
  21d80d:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
  21d814:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  21d81b:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
  21d822:	48 89 01             	mov    QWORD PTR [rcx],rax
  21d825:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  21d82c:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  21d830:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
  21d837:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  21d83e:	5d                   	pop    rbp
  21d83f:	c3                   	ret    
                while (true) {
  21d840:	e9 11 fe ff ff       	jmp    21d656 <findCompileUnit+0x2a6>
            if (st.debug_ranges) |debug_ranges| {
  21d845:	eb 02                	jmp    21d849 <findCompileUnit+0x499>
  21d847:	eb 00                	jmp    21d849 <findCompileUnit+0x499>
    for (st.compile_unit_list.toSlice()) |*compile_unit| {
  21d849:	eb 6d                	jmp    21d8b8 <findCompileUnit+0x508>
        if (compile_unit.die.getAttrSecOffset(DW.AT_ranges)) |ranges_offset| {
  21d84b:	66 8b 45 b0          	mov    ax,WORD PTR [rbp-0x50]
  21d84f:	66 89 85 96 fe ff ff 	mov    WORD PTR [rbp-0x16a],ax
            if (err != error.MissingDebugInfo) return err;
  21d856:	66 83 bd 96 fe ff ff 	cmp    WORD PTR [rbp-0x16a],0x24
  21d85d:	24 
  21d85e:	74 54                	je     21d8b4 <findCompileUnit+0x504>
  21d860:	66 8b 85 96 fe ff ff 	mov    ax,WORD PTR [rbp-0x16a]
  21d867:	48 8b bd 80 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x180]
  21d86e:	66 89 85 34 fe ff ff 	mov    WORD PTR [rbp-0x1cc],ax
  21d875:	e8 16 e4 fe ff       	call   20bc90 <__zig_return_error>
  21d87a:	66 8b 85 34 fe ff ff 	mov    ax,WORD PTR [rbp-0x1cc]
  21d881:	66 89 85 08 ff ff ff 	mov    WORD PTR [rbp-0xf8],ax
  21d888:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
  21d88f:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
  21d896:	48 89 39             	mov    QWORD PTR [rcx],rdi
  21d899:	48 8b bd 10 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf0]
  21d8a0:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  21d8a4:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
  21d8ab:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  21d8b2:	5d                   	pop    rbp
  21d8b3:	c3                   	ret    
  21d8b4:	eb 00                	jmp    21d8b6 <findCompileUnit+0x506>
            continue;
  21d8b6:	eb 00                	jmp    21d8b8 <findCompileUnit+0x508>
    for (st.compile_unit_list.toSlice()) |*compile_unit| {
  21d8b8:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
  21d8bf:	48 83 c0 01          	add    rax,0x1
  21d8c3:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  21d8ca:	e9 9c fb ff ff       	jmp    21d46b <findCompileUnit+0xbb>
    return error.MissingDebugInfo;
  21d8cf:	48 8b bd 80 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x180]
  21d8d6:	e8 b5 e3 fe ff       	call   20bc90 <__zig_return_error>
  21d8db:	48 8b 3d 9e 2f fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe2f9e]        # 200880 <__unnamed_117>
  21d8e2:	48 8b 85 88 fe ff ff 	mov    rax,QWORD PTR [rbp-0x178]
  21d8e9:	48 89 38             	mov    QWORD PTR [rax],rdi
  21d8ec:	48 8b 3d 95 2f fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe2f95]        # 200888 <__unnamed_117+0x8>
  21d8f3:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  21d8f7:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
  21d8fe:	48 81 c4 d0 01 00 00 	add    rsp,0x1d0
  21d905:	5d                   	pop    rbp
  21d906:	c3                   	ret    
  21d907:	48 8d 3d ba 58 02 00 	lea    rdi,[rip+0x258ba]        # 2431c8 <__unnamed_4>
  21d90e:	31 c0                	xor    eax,eax
  21d910:	89 c6                	mov    esi,eax
                try st.self_exe_file.seekTo(debug_ranges.offset + ranges_offset);
  21d912:	e8 e9 dc fe ff       	call   20b600 <panic>
  21d917:	48 8b bd 80 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x180]
  21d91e:	48 8b b5 48 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1b8]
  21d925:	48 8b 95 40 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1c0]
  21d92c:	e8 df 68 ff ff       	call   214210 <File_seekTo>
  21d931:	66 89 45 9e          	mov    WORD PTR [rbp-0x62],ax
  21d935:	66 83 7d 9e 00       	cmp    WORD PTR [rbp-0x62],0x0
  21d93a:	0f 85 ce fc ff ff    	jne    21d60e <findCompileUnit+0x25e>
  21d940:	e9 11 fd ff ff       	jmp    21d656 <findCompileUnit+0x2a6>
  21d945:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  21d94c:	00 00 00 00 

000000000021d950 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.59>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  21d950:	55                   	push   rbp
  21d951:	48 89 e5             	mov    rbp,rsp
  21d954:	48 83 ec 20          	sub    rsp,0x20
  21d958:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21d95c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
            return std.fmt.format(self, Error, self.writeFn, format, args);
  21d960:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21d964:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  21d968:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
  21d96b:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  21d96f:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  21d973:	e8 a8 3a 00 00       	call   221420 <format.67>
  21d978:	66 83 f8 00          	cmp    ax,0x0
  21d97c:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
  21d980:	74 0b                	je     21d98d <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.59+0x3d>
  21d982:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  21d986:	e8 05 e3 fe ff       	call   20bc90 <__zig_return_error>
  21d98b:	eb 02                	jmp    21d98f <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.59+0x3f>
  21d98d:	eb 00                	jmp    21d98f <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.59+0x3f>
  21d98f:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
  21d993:	48 83 c4 20          	add    rsp,0x20
  21d997:	5d                   	pop    rbp
  21d998:	c3                   	ret    
  21d999:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

000000000021d9a0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.60>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  21d9a0:	55                   	push   rbp
  21d9a1:	48 89 e5             	mov    rbp,rsp
  21d9a4:	48 83 ec 20          	sub    rsp,0x20
  21d9a8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  21d9ac:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
            return std.fmt.format(self, Error, self.writeFn, format, args);
  21d9b0:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  21d9b4:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  21d9b8:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
  21d9bb:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  21d9bf:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  21d9c3:	e8 88 3b 00 00       	call   221550 <format.69>
  21d9c8:	66 83 f8 00          	cmp    ax,0x0
  21d9cc:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
  21d9d0:	74 0b                	je     21d9dd <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.60+0x3d>
  21d9d2:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  21d9d6:	e8 b5 e2 fe ff       	call   20bc90 <__zig_return_error>
  21d9db:	eb 02                	jmp    21d9df <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.60+0x3f>
  21d9dd:	eb 00                	jmp    21d9df <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.60+0x3f>
  21d9df:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
  21d9e3:	48 83 c4 20          	add    rsp,0x20
  21d9e7:	5d                   	pop    rbp
  21d9e8:	c3                   	ret    
  21d9e9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

000000000021d9f0 <Die_getAttrString>:
    fn getAttrString(self: *const Die, st: *ElfStackTrace, id: u64) ![]u8 {
  21d9f0:	55                   	push   rbp
  21d9f1:	48 89 e5             	mov    rbp,rsp
  21d9f4:	48 81 ec c0 00 00 00 	sub    rsp,0xc0
  21d9fb:	48 89 f8             	mov    rax,rdi
  21d9fe:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
  21da02:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
  21da06:	4c 89 45 b0          	mov    QWORD PTR [rbp-0x50],r8
        const form_value = self.getAttr(id) orelse return error.MissingDebugInfo;
  21da0a:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  21da0e:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  21da12:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
  21da16:	48 89 cf             	mov    rdi,rcx
  21da19:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
  21da1d:	48 89 d6             	mov    rsi,rdx
  21da20:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  21da27:	e8 e4 89 ff ff       	call   216410 <Die_getAttr>
  21da2c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  21da30:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
  21da35:	75 3d                	jne    21da74 <Die_getAttrString+0x84>
  21da37:	48 8b 7d 80          	mov    rdi,QWORD PTR [rbp-0x80]
  21da3b:	e8 50 e2 fe ff       	call   20bc90 <__zig_return_error>
  21da40:	48 8b 3d e1 b7 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffeb7e1]        # 209228 <__unnamed_118>
  21da47:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  21da4b:	48 89 38             	mov    QWORD PTR [rax],rdi
  21da4e:	48 8b 3d db b7 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffeb7db]        # 209230 <__unnamed_118+0x8>
  21da55:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  21da59:	48 8b 3d d8 b7 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffeb7d8]        # 209238 <__unnamed_118+0x10>
  21da60:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  21da64:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  21da6b:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  21da72:	5d                   	pop    rbp
  21da73:	c3                   	ret    
  21da74:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21da78:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  21da7f:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  21da86:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
        return switch (form_value.*) {
  21da8a:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  21da8e:	8a 51 18             	mov    dl,BYTE PTR [rcx+0x18]
  21da91:	40 88 d6             	mov    sil,dl
  21da94:	40 80 ee 09          	sub    sil,0x9
  21da98:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
  21da9f:	88 95 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],dl
  21daa5:	40 88 b5 66 ff ff ff 	mov    BYTE PTR [rbp-0x9a],sil
  21daac:	74 26                	je     21dad4 <Die_getAttrString+0xe4>
  21daae:	eb 00                	jmp    21dab0 <Die_getAttrString+0xc0>
  21dab0:	8a 85 67 ff ff ff    	mov    al,BYTE PTR [rbp-0x99]
  21dab6:	24 0f                	and    al,0xf
  21dab8:	2c 0a                	sub    al,0xa
  21daba:	88 85 65 ff ff ff    	mov    BYTE PTR [rbp-0x9b],al
  21dac0:	74 2c                	je     21daee <Die_getAttrString+0xfe>
  21dac2:	eb 00                	jmp    21dac4 <Die_getAttrString+0xd4>
  21dac4:	48 8d 05 75 b7 fe ff 	lea    rax,[rip+0xfffffffffffeb775]        # 209240 <__unnamed_119>
  21dacb:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  21dad2:	eb 38                	jmp    21db0c <Die_getAttrString+0x11c>
            FormValue.String => |value| value,
  21dad4:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  21dadb:	8a 48 18             	mov    cl,BYTE PTR [rax+0x18]
  21dade:	80 e9 09             	sub    cl,0x9
  21dae1:	88 8d 57 ff ff ff    	mov    BYTE PTR [rbp-0xa9],cl
  21dae7:	74 75                	je     21db5e <Die_getAttrString+0x16e>
  21dae9:	e9 ac 00 00 00       	jmp    21db9a <Die_getAttrString+0x1aa>
            FormValue.StrPtr => |offset| getString(st, offset),
  21daee:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  21daf5:	8a 48 18             	mov    cl,BYTE PTR [rax+0x18]
  21daf8:	80 e9 0a             	sub    cl,0xa
  21dafb:	88 8d 56 ff ff ff    	mov    BYTE PTR [rbp-0xaa],cl
  21db01:	0f 84 a3 00 00 00    	je     21dbaa <Die_getAttrString+0x1ba>
  21db07:	e9 d1 00 00 00       	jmp    21dbdd <Die_getAttrString+0x1ed>
        return switch (form_value.*) {
  21db0c:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
  21db13:	66 83 38 00          	cmp    WORD PTR [rax],0x0
  21db17:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  21db1e:	74 0b                	je     21db2b <Die_getAttrString+0x13b>
  21db20:	48 8b 7d 80          	mov    rdi,QWORD PTR [rbp-0x80]
  21db24:	e8 67 e1 fe ff       	call   20bc90 <__zig_return_error>
  21db29:	eb 02                	jmp    21db2d <Die_getAttrString+0x13d>
  21db2b:	eb 00                	jmp    21db2d <Die_getAttrString+0x13d>
  21db2d:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  21db34:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  21db37:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
  21db3b:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  21db3e:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  21db42:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  21db46:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
  21db4a:	48 89 4a 10          	mov    QWORD PTR [rdx+0x10],rcx
  21db4e:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  21db55:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  21db5c:	5d                   	pop    rbp
  21db5d:	c3                   	ret    
  21db5e:	48 8d 45 c8          	lea    rax,[rbp-0x38]
            FormValue.String => |value| value,
  21db62:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  21db69:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
  21db6c:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  21db70:	48 8b 51 08          	mov    rdx,QWORD PTR [rcx+0x8]
  21db74:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  21db78:	66 c7 45 c8 00 00    	mov    WORD PTR [rbp-0x38],0x0
  21db7e:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  21db82:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  21db86:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  21db8a:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
        return switch (form_value.*) {
  21db8e:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  21db95:	e9 72 ff ff ff       	jmp    21db0c <Die_getAttrString+0x11c>
  21db9a:	48 8d 3d 3f 5a 02 00 	lea    rdi,[rip+0x25a3f]        # 2435e0 <__unnamed_29>
  21dba1:	31 c0                	xor    eax,eax
  21dba3:	89 c6                	mov    esi,eax
            FormValue.String => |value| value,
  21dba5:	e8 56 da fe ff       	call   20b600 <panic>
  21dbaa:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
            FormValue.StrPtr => |offset| getString(st, offset),
  21dbae:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  21dbb5:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  21dbb8:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
  21dbbc:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  21dbc0:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  21dbc4:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  21dbc8:	e8 b3 3a 00 00       	call   221680 <getString>
  21dbcd:	48 8d 45 e0          	lea    rax,[rbp-0x20]
        return switch (form_value.*) {
  21dbd1:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  21dbd8:	e9 2f ff ff ff       	jmp    21db0c <Die_getAttrString+0x11c>
  21dbdd:	48 8d 3d fc 59 02 00 	lea    rdi,[rip+0x259fc]        # 2435e0 <__unnamed_29>
  21dbe4:	31 c0                	xor    eax,eax
  21dbe6:	89 c6                	mov    esi,eax
            FormValue.StrPtr => |offset| getString(st, offset),
  21dbe8:	e8 13 da fe ff       	call   20b600 <panic>
  21dbed:	0f 1f 00             	nop    DWORD PTR [rax]

000000000021dbf0 <getLineNumberInfo>:
fn getLineNumberInfo(st: *ElfStackTrace, compile_unit: *const CompileUnit, target_address: usize) !LineInfo {
  21dbf0:	55                   	push   rbp
  21dbf1:	48 89 e5             	mov    rbp,rsp
  21dbf4:	48 81 ec f0 16 00 00 	sub    rsp,0x16f0
  21dbfb:	48 89 f8             	mov    rax,rdi
  21dbfe:	4c 8d 4d e8          	lea    r9,[rbp-0x18]
  21dc02:	41 ba 1b 00 00 00    	mov    r10d,0x1b
  21dc08:	45 89 d3             	mov    r11d,r10d
  21dc0b:	48 89 95 f0 f0 ff ff 	mov    QWORD PTR [rbp-0xf10],rdx
  21dc12:	48 89 8d e8 f0 ff ff 	mov    QWORD PTR [rbp-0xf18],rcx
  21dc19:	4c 89 85 e0 f0 ff ff 	mov    QWORD PTR [rbp-0xf20],r8
    const compile_unit_cwd = try compile_unit.die.getAttrString(st, DW.AT_comp_dir);
  21dc20:	48 8b 8d e8 f0 ff ff 	mov    rcx,QWORD PTR [rbp-0xf18]
  21dc27:	48 8b 51 08          	mov    rdx,QWORD PTR [rcx+0x8]
  21dc2b:	48 8b 8d f0 f0 ff ff 	mov    rcx,QWORD PTR [rbp-0xf10]
  21dc32:	48 89 bd 60 ee ff ff 	mov    QWORD PTR [rbp-0x11a0],rdi
  21dc39:	4c 89 cf             	mov    rdi,r9
  21dc3c:	48 89 b5 58 ee ff ff 	mov    QWORD PTR [rbp-0x11a8],rsi
  21dc43:	4d 89 d8             	mov    r8,r11
  21dc46:	48 89 85 50 ee ff ff 	mov    QWORD PTR [rbp-0x11b0],rax
  21dc4d:	e8 9e fd ff ff       	call   21d9f0 <Die_getAttrString>
  21dc52:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  21dc57:	74 5a                	je     21dcb3 <getLineNumberInfo+0xc3>
  21dc59:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  21dc5d:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21dc64:	66 89 85 4e ee ff ff 	mov    WORD PTR [rbp-0x11b2],ax
  21dc6b:	e8 20 e0 fe ff       	call   20bc90 <__zig_return_error>
  21dc70:	b9 30 00 00 00       	mov    ecx,0x30
  21dc75:	89 ca                	mov    edx,ecx
  21dc77:	48 8d 7d a0          	lea    rdi,[rbp-0x60]
  21dc7b:	66 8b 85 4e ee ff ff 	mov    ax,WORD PTR [rbp-0x11b2]
  21dc82:	66 89 45 a0          	mov    WORD PTR [rbp-0x60],ax
  21dc86:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21dc8d:	48 89 bd 40 ee ff ff 	mov    QWORD PTR [rbp-0x11c0],rdi
  21dc94:	48 89 f7             	mov    rdi,rsi
  21dc97:	48 8b b5 40 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11c0]
  21dc9e:	e8 fd 6b 01 00       	call   2348a0 <memcpy>
  21dca3:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21dcaa:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21dcb1:	5d                   	pop    rbp
  21dcb2:	c3                   	ret    
  21dcb3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  21dcb7:	48 89 85 d0 f0 ff ff 	mov    QWORD PTR [rbp-0xf30],rax
  21dcbe:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  21dcc2:	48 89 85 d8 f0 ff ff 	mov    QWORD PTR [rbp-0xf28],rax
    const in_file = &st.self_exe_file;
  21dcc9:	48 8b 85 f0 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xf10]
  21dcd0:	48 89 85 c8 f0 ff ff 	mov    QWORD PTR [rbp-0xf38],rax
    const debug_line_end = st.debug_line.offset + st.debug_line.size;
  21dcd7:	48 8b 85 f0 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xf10]
  21dcde:	48 8b 40 78          	mov    rax,QWORD PTR [rax+0x78]
  21dce2:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  21dce6:	48 8b 8d f0 f0 ff ff 	mov    rcx,QWORD PTR [rbp-0xf10]
  21dced:	48 8b 49 78          	mov    rcx,QWORD PTR [rcx+0x78]
  21dcf1:	48 03 41 20          	add    rax,QWORD PTR [rcx+0x20]
  21dcf5:	0f 92 c2             	setb   dl
  21dcf8:	48 89 85 38 ee ff ff 	mov    QWORD PTR [rbp-0x11c8],rax
  21dcff:	88 95 37 ee ff ff    	mov    BYTE PTR [rbp-0x11c9],dl
  21dd05:	0f 82 3d 24 00 00    	jb     220148 <getLineNumberInfo+0x2558>
  21dd0b:	e9 48 24 00 00       	jmp    220158 <getLineNumberInfo+0x2568>
    while (this_offset < debug_line_end) : (this_index += 1) {
  21dd10:	48 8b 85 b8 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xf48]
  21dd17:	48 3b 85 c0 f0 ff ff 	cmp    rax,QWORD PTR [rbp-0xf40]
  21dd1e:	0f 83 dd 23 00 00    	jae    220101 <getLineNumberInfo+0x2511>
        try in_file.seekTo(this_offset);
  21dd24:	48 8b b5 c8 f0 ff ff 	mov    rsi,QWORD PTR [rbp-0xf38]
  21dd2b:	48 8b 95 b8 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf48]
  21dd32:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21dd39:	e8 d2 64 ff ff       	call   214210 <File_seekTo>
  21dd3e:	66 89 45 8e          	mov    WORD PTR [rbp-0x72],ax
  21dd42:	66 83 7d 8e 00       	cmp    WORD PTR [rbp-0x72],0x0
  21dd47:	74 60                	je     21dda9 <getLineNumberInfo+0x1b9>
  21dd49:	66 8b 45 8e          	mov    ax,WORD PTR [rbp-0x72]
  21dd4d:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21dd54:	66 89 85 34 ee ff ff 	mov    WORD PTR [rbp-0x11cc],ax
  21dd5b:	e8 30 df fe ff       	call   20bc90 <__zig_return_error>
  21dd60:	b9 30 00 00 00       	mov    ecx,0x30
  21dd65:	89 ca                	mov    edx,ecx
  21dd67:	48 8d bd 58 ff ff ff 	lea    rdi,[rbp-0xa8]
  21dd6e:	66 8b 85 34 ee ff ff 	mov    ax,WORD PTR [rbp-0x11cc]
  21dd75:	66 89 85 58 ff ff ff 	mov    WORD PTR [rbp-0xa8],ax
  21dd7c:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21dd83:	48 89 bd 28 ee ff ff 	mov    QWORD PTR [rbp-0x11d8],rdi
  21dd8a:	48 89 f7             	mov    rdi,rsi
  21dd8d:	48 8b b5 28 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11d8]
  21dd94:	e8 07 6b 01 00       	call   2348a0 <memcpy>
  21dd99:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21dda0:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21dda7:	5d                   	pop    rbp
  21dda8:	c3                   	ret    
  21dda9:	48 8d bd 48 ff ff ff 	lea    rdi,[rbp-0xb8]
  21ddb0:	48 8d 85 97 f0 ff ff 	lea    rax,[rbp-0xf69]
  21ddb7:	be aa 00 00 00       	mov    esi,0xaa
  21ddbc:	b9 01 00 00 00       	mov    ecx,0x1
  21ddc1:	89 ca                	mov    edx,ecx
        var is_64: bool = undefined;
  21ddc3:	49 89 c0             	mov    r8,rax
  21ddc6:	48 89 bd 20 ee ff ff 	mov    QWORD PTR [rbp-0x11e0],rdi
  21ddcd:	4c 89 c7             	mov    rdi,r8
  21ddd0:	48 89 85 18 ee ff ff 	mov    QWORD PTR [rbp-0x11e8],rax
  21ddd7:	e8 74 6a 01 00       	call   234850 <memset>
        const unit_length = try readInitialLength(@typeOf(in_stream.readFn).ReturnType.ErrorSet, in_stream, &is_64);
  21dddc:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21dde3:	48 8b bd 20 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11e0]
  21ddea:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21ddf1:	48 8b 8d 18 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x11e8]
  21ddf8:	e8 53 77 ff ff       	call   215550 <readInitialLength>
  21ddfd:	66 83 bd 48 ff ff ff 	cmp    WORD PTR [rbp-0xb8],0x0
  21de04:	00 
  21de05:	74 63                	je     21de6a <getLineNumberInfo+0x27a>
  21de07:	66 8b 85 48 ff ff ff 	mov    ax,WORD PTR [rbp-0xb8]
  21de0e:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21de15:	66 89 85 16 ee ff ff 	mov    WORD PTR [rbp-0x11ea],ax
  21de1c:	e8 6f de fe ff       	call   20bc90 <__zig_return_error>
  21de21:	b9 30 00 00 00       	mov    ecx,0x30
  21de26:	89 ca                	mov    edx,ecx
  21de28:	48 8d bd 08 ff ff ff 	lea    rdi,[rbp-0xf8]
  21de2f:	66 8b 85 16 ee ff ff 	mov    ax,WORD PTR [rbp-0x11ea]
  21de36:	66 89 85 08 ff ff ff 	mov    WORD PTR [rbp-0xf8],ax
  21de3d:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21de44:	48 89 bd 08 ee ff ff 	mov    QWORD PTR [rbp-0x11f8],rdi
  21de4b:	48 89 f7             	mov    rdi,rsi
  21de4e:	48 8b b5 08 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11f8]
  21de55:	e8 46 6a 01 00       	call   2348a0 <memcpy>
  21de5a:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21de61:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21de68:	5d                   	pop    rbp
  21de69:	c3                   	ret    
  21de6a:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  21de71:	48 89 85 88 f0 ff ff 	mov    QWORD PTR [rbp-0xf78],rax
        if (unit_length == 0) return error.MissingDebugInfo;
  21de78:	48 83 bd 88 f0 ff ff 	cmp    QWORD PTR [rbp-0xf78],0x0
  21de7f:	00 
  21de80:	75 47                	jne    21dec9 <getLineNumberInfo+0x2d9>
  21de82:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21de89:	e8 02 de fe ff       	call   20bc90 <__zig_return_error>
  21de8e:	48 8d 3d 23 b4 fe ff 	lea    rdi,[rip+0xfffffffffffeb423]        # 2092b8 <__unnamed_120>
  21de95:	b8 30 00 00 00       	mov    eax,0x30
  21de9a:	89 c2                	mov    edx,eax
  21de9c:	48 8b 8d 60 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x11a0]
  21dea3:	48 89 bd 00 ee ff ff 	mov    QWORD PTR [rbp-0x1200],rdi
  21deaa:	48 89 cf             	mov    rdi,rcx
  21dead:	48 8b b5 00 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x1200]
  21deb4:	e8 e7 69 01 00       	call   2348a0 <memcpy>
  21deb9:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21dec0:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21dec7:	5d                   	pop    rbp
  21dec8:	c3                   	ret    
  21dec9:	eb 00                	jmp    21decb <getLineNumberInfo+0x2db>
        const next_offset = unit_length + (if (is_64) usize(12) else usize(4));
  21decb:	48 8b 85 88 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xf78]
  21ded2:	f6 85 97 f0 ff ff 01 	test   BYTE PTR [rbp-0xf69],0x1
  21ded9:	48 89 85 f8 ed ff ff 	mov    QWORD PTR [rbp-0x1208],rax
  21dee0:	75 02                	jne    21dee4 <getLineNumberInfo+0x2f4>
  21dee2:	eb 10                	jmp    21def4 <getLineNumberInfo+0x304>
  21dee4:	b8 0c 00 00 00       	mov    eax,0xc
  21dee9:	89 c1                	mov    ecx,eax
  21deeb:	48 89 8d f0 ed ff ff 	mov    QWORD PTR [rbp-0x1210],rcx
  21def2:	eb 10                	jmp    21df04 <getLineNumberInfo+0x314>
  21def4:	b8 04 00 00 00       	mov    eax,0x4
  21def9:	89 c1                	mov    ecx,eax
  21defb:	48 89 8d f0 ed ff ff 	mov    QWORD PTR [rbp-0x1210],rcx
  21df02:	eb 00                	jmp    21df04 <getLineNumberInfo+0x314>
  21df04:	48 8b 85 f0 ed ff ff 	mov    rax,QWORD PTR [rbp-0x1210]
  21df0b:	48 8b 8d f8 ed ff ff 	mov    rcx,QWORD PTR [rbp-0x1208]
  21df12:	48 01 c1             	add    rcx,rax
  21df15:	0f 92 c2             	setb   dl
  21df18:	48 89 8d e8 ed ff ff 	mov    QWORD PTR [rbp-0x1218],rcx
  21df1f:	88 95 e7 ed ff ff    	mov    BYTE PTR [rbp-0x1219],dl
  21df25:	0f 82 99 22 00 00    	jb     2201c4 <getLineNumberInfo+0x25d4>
  21df2b:	e9 a4 22 00 00       	jmp    2201d4 <getLineNumberInfo+0x25e4>
            this_offset += next_offset;
  21df30:	48 8b 85 b8 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xf48]
  21df37:	48 03 85 80 f0 ff ff 	add    rax,QWORD PTR [rbp-0xf80]
  21df3e:	0f 92 c1             	setb   cl
  21df41:	48 89 85 d8 ed ff ff 	mov    QWORD PTR [rbp-0x1228],rax
  21df48:	88 8d d7 ed ff ff    	mov    BYTE PTR [rbp-0x1229],cl
  21df4e:	0f 82 ab 22 00 00    	jb     2201ff <getLineNumberInfo+0x260f>
  21df54:	e9 b6 22 00 00       	jmp    22020f <getLineNumberInfo+0x261f>
        if (compile_unit.index != this_index) {
  21df59:	eb 00                	jmp    21df5b <getLineNumberInfo+0x36b>
  21df5b:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
        const version = try in_stream.readInt(st.elf.endian, u16);
  21df62:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21df69:	48 8b 8d f0 f0 ff ff 	mov    rcx,QWORD PTR [rbp-0xf10]
  21df70:	40 8a 71 12          	mov    sil,BYTE PTR [rcx+0x12]
  21df74:	40 0f b6 ce          	movzx  ecx,sil
  21df78:	48 8d bd 00 ff ff ff 	lea    rdi,[rbp-0x100]
  21df7f:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21df86:	48 89 85 c8 ed ff ff 	mov    QWORD PTR [rbp-0x1238],rax
  21df8d:	e8 3e 5d ff ff       	call   213cd0 <InStream(ReadError)_readInt>
  21df92:	66 83 bd 00 ff ff ff 	cmp    WORD PTR [rbp-0x100],0x0
  21df99:	00 
  21df9a:	74 63                	je     21dfff <getLineNumberInfo+0x40f>
  21df9c:	66 8b 85 00 ff ff ff 	mov    ax,WORD PTR [rbp-0x100]
  21dfa3:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21dfaa:	66 89 85 c6 ed ff ff 	mov    WORD PTR [rbp-0x123a],ax
  21dfb1:	e8 da dc fe ff       	call   20bc90 <__zig_return_error>
  21dfb6:	b9 30 00 00 00       	mov    ecx,0x30
  21dfbb:	89 ca                	mov    edx,ecx
  21dfbd:	48 8d bd c8 fe ff ff 	lea    rdi,[rbp-0x138]
  21dfc4:	66 8b 85 c6 ed ff ff 	mov    ax,WORD PTR [rbp-0x123a]
  21dfcb:	66 89 85 c8 fe ff ff 	mov    WORD PTR [rbp-0x138],ax
  21dfd2:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21dfd9:	48 89 bd b8 ed ff ff 	mov    QWORD PTR [rbp-0x1248],rdi
  21dfe0:	48 89 f7             	mov    rdi,rsi
  21dfe3:	48 8b b5 b8 ed ff ff 	mov    rsi,QWORD PTR [rbp-0x1248]
  21dfea:	e8 b1 68 01 00       	call   2348a0 <memcpy>
  21dfef:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21dff6:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21dffd:	5d                   	pop    rbp
  21dffe:	c3                   	ret    
  21dfff:	66 8b 85 02 ff ff ff 	mov    ax,WORD PTR [rbp-0xfe]
  21e006:	66 89 85 7e f0 ff ff 	mov    WORD PTR [rbp-0xf82],ax
        if (version != 2 and version != 4) return error.InvalidDebugInfo;
  21e00d:	66 83 bd 7e f0 ff ff 	cmp    WORD PTR [rbp-0xf82],0x2
  21e014:	02 
  21e015:	0f 95 c1             	setne  cl
  21e018:	f6 c1 01             	test   cl,0x1
  21e01b:	88 8d b7 ed ff ff    	mov    BYTE PTR [rbp-0x1249],cl
  21e021:	75 02                	jne    21e025 <getLineNumberInfo+0x435>
  21e023:	eb 11                	jmp    21e036 <getLineNumberInfo+0x446>
  21e025:	66 83 bd 7e f0 ff ff 	cmp    WORD PTR [rbp-0xf82],0x4
  21e02c:	04 
  21e02d:	0f 95 c0             	setne  al
  21e030:	88 85 b7 ed ff ff    	mov    BYTE PTR [rbp-0x1249],al
  21e036:	8a 85 b7 ed ff ff    	mov    al,BYTE PTR [rbp-0x1249]
  21e03c:	a8 01                	test   al,0x1
  21e03e:	75 02                	jne    21e042 <getLineNumberInfo+0x452>
  21e040:	eb 47                	jmp    21e089 <getLineNumberInfo+0x499>
  21e042:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e049:	e8 42 dc fe ff       	call   20bc90 <__zig_return_error>
  21e04e:	48 8d 3d 93 b2 fe ff 	lea    rdi,[rip+0xfffffffffffeb293]        # 2092e8 <__unnamed_121>
  21e055:	b8 30 00 00 00       	mov    eax,0x30
  21e05a:	89 c2                	mov    edx,eax
  21e05c:	48 8b 8d 60 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x11a0]
  21e063:	48 89 bd a8 ed ff ff 	mov    QWORD PTR [rbp-0x1258],rdi
  21e06a:	48 89 cf             	mov    rdi,rcx
  21e06d:	48 8b b5 a8 ed ff ff 	mov    rsi,QWORD PTR [rbp-0x1258]
  21e074:	e8 27 68 01 00       	call   2348a0 <memcpy>
  21e079:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21e080:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21e087:	5d                   	pop    rbp
  21e088:	c3                   	ret    
  21e089:	eb 00                	jmp    21e08b <getLineNumberInfo+0x49b>
        const prologue_length = if (is_64) try in_stream.readInt(st.elf.endian, u64) else try in_stream.readInt(st.elf.endian, u32);
  21e08b:	f6 85 97 f0 ff ff 01 	test   BYTE PTR [rbp-0xf69],0x1
  21e092:	75 05                	jne    21e099 <getLineNumberInfo+0x4a9>
  21e094:	e9 b7 00 00 00       	jmp    21e150 <getLineNumberInfo+0x560>
  21e099:	48 8d 85 b8 fe ff ff 	lea    rax,[rbp-0x148]
  21e0a0:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21e0a7:	48 8b 8d f0 f0 ff ff 	mov    rcx,QWORD PTR [rbp-0xf10]
  21e0ae:	40 8a 71 12          	mov    sil,BYTE PTR [rcx+0x12]
  21e0b2:	40 0f b6 ce          	movzx  ecx,sil
  21e0b6:	48 8d bd b8 fe ff ff 	lea    rdi,[rbp-0x148]
  21e0bd:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21e0c4:	48 89 85 a0 ed ff ff 	mov    QWORD PTR [rbp-0x1260],rax
  21e0cb:	e8 20 5e ff ff       	call   213ef0 <InStream(ReadError)_readInt.33>
  21e0d0:	66 83 bd b8 fe ff ff 	cmp    WORD PTR [rbp-0x148],0x0
  21e0d7:	00 
  21e0d8:	74 63                	je     21e13d <getLineNumberInfo+0x54d>
  21e0da:	66 8b 85 b8 fe ff ff 	mov    ax,WORD PTR [rbp-0x148]
  21e0e1:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e0e8:	66 89 85 9e ed ff ff 	mov    WORD PTR [rbp-0x1262],ax
  21e0ef:	e8 9c db fe ff       	call   20bc90 <__zig_return_error>
  21e0f4:	b9 30 00 00 00       	mov    ecx,0x30
  21e0f9:	89 ca                	mov    edx,ecx
  21e0fb:	48 8d bd 78 fe ff ff 	lea    rdi,[rbp-0x188]
  21e102:	66 8b 85 9e ed ff ff 	mov    ax,WORD PTR [rbp-0x1262]
  21e109:	66 89 85 78 fe ff ff 	mov    WORD PTR [rbp-0x188],ax
  21e110:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21e117:	48 89 bd 90 ed ff ff 	mov    QWORD PTR [rbp-0x1270],rdi
  21e11e:	48 89 f7             	mov    rdi,rsi
  21e121:	48 8b b5 90 ed ff ff 	mov    rsi,QWORD PTR [rbp-0x1270]
  21e128:	e8 73 67 01 00       	call   2348a0 <memcpy>
  21e12d:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21e134:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21e13b:	5d                   	pop    rbp
  21e13c:	c3                   	ret    
  21e13d:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  21e144:	48 89 85 88 ed ff ff 	mov    QWORD PTR [rbp-0x1278],rax
  21e14b:	e9 b3 00 00 00       	jmp    21e203 <getLineNumberInfo+0x613>
  21e150:	48 8d 85 70 fe ff ff 	lea    rax,[rbp-0x190]
  21e157:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21e15e:	48 8b 8d f0 f0 ff ff 	mov    rcx,QWORD PTR [rbp-0xf10]
  21e165:	40 8a 71 12          	mov    sil,BYTE PTR [rcx+0x12]
  21e169:	40 0f b6 ce          	movzx  ecx,sil
  21e16d:	48 8d bd 70 fe ff ff 	lea    rdi,[rbp-0x190]
  21e174:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21e17b:	48 89 85 80 ed ff ff 	mov    QWORD PTR [rbp-0x1280],rax
  21e182:	e8 59 5c ff ff       	call   213de0 <InStream(ReadError)_readInt.32>
  21e187:	66 83 bd 70 fe ff ff 	cmp    WORD PTR [rbp-0x190],0x0
  21e18e:	00 
  21e18f:	74 63                	je     21e1f4 <getLineNumberInfo+0x604>
  21e191:	66 8b 85 70 fe ff ff 	mov    ax,WORD PTR [rbp-0x190]
  21e198:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e19f:	66 89 85 7e ed ff ff 	mov    WORD PTR [rbp-0x1282],ax
  21e1a6:	e8 e5 da fe ff       	call   20bc90 <__zig_return_error>
  21e1ab:	b9 30 00 00 00       	mov    ecx,0x30
  21e1b0:	89 ca                	mov    edx,ecx
  21e1b2:	48 8d bd 38 fe ff ff 	lea    rdi,[rbp-0x1c8]
  21e1b9:	66 8b 85 7e ed ff ff 	mov    ax,WORD PTR [rbp-0x1282]
  21e1c0:	66 89 85 38 fe ff ff 	mov    WORD PTR [rbp-0x1c8],ax
  21e1c7:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21e1ce:	48 89 bd 70 ed ff ff 	mov    QWORD PTR [rbp-0x1290],rdi
  21e1d5:	48 89 f7             	mov    rdi,rsi
  21e1d8:	48 8b b5 70 ed ff ff 	mov    rsi,QWORD PTR [rbp-0x1290]
  21e1df:	e8 bc 66 01 00       	call   2348a0 <memcpy>
  21e1e4:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21e1eb:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21e1f2:	5d                   	pop    rbp
  21e1f3:	c3                   	ret    
  21e1f4:	8b 85 74 fe ff ff    	mov    eax,DWORD PTR [rbp-0x18c]
  21e1fa:	89 c1                	mov    ecx,eax
  21e1fc:	48 89 8d 88 ed ff ff 	mov    QWORD PTR [rbp-0x1278],rcx
  21e203:	48 8b 85 88 ed ff ff 	mov    rax,QWORD PTR [rbp-0x1278]
  21e20a:	48 8d bd 28 fe ff ff 	lea    rdi,[rbp-0x1d8]
  21e211:	48 89 85 70 f0 ff ff 	mov    QWORD PTR [rbp-0xf90],rax
        const prog_start_offset = (try in_file.getPos()) + prologue_length;
  21e218:	48 8b 95 c8 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf38]
  21e21f:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21e226:	e8 65 74 ff ff       	call   215690 <File_getPos>
  21e22b:	66 83 bd 28 fe ff ff 	cmp    WORD PTR [rbp-0x1d8],0x0
  21e232:	00 
  21e233:	74 63                	je     21e298 <getLineNumberInfo+0x6a8>
  21e235:	66 8b 85 28 fe ff ff 	mov    ax,WORD PTR [rbp-0x1d8]
  21e23c:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e243:	66 89 85 6e ed ff ff 	mov    WORD PTR [rbp-0x1292],ax
  21e24a:	e8 41 da fe ff       	call   20bc90 <__zig_return_error>
  21e24f:	b9 30 00 00 00       	mov    ecx,0x30
  21e254:	89 ca                	mov    edx,ecx
  21e256:	48 8d bd e8 fd ff ff 	lea    rdi,[rbp-0x218]
  21e25d:	66 8b 85 6e ed ff ff 	mov    ax,WORD PTR [rbp-0x1292]
  21e264:	66 89 85 e8 fd ff ff 	mov    WORD PTR [rbp-0x218],ax
  21e26b:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21e272:	48 89 bd 60 ed ff ff 	mov    QWORD PTR [rbp-0x12a0],rdi
  21e279:	48 89 f7             	mov    rdi,rsi
  21e27c:	48 8b b5 60 ed ff ff 	mov    rsi,QWORD PTR [rbp-0x12a0]
  21e283:	e8 18 66 01 00       	call   2348a0 <memcpy>
  21e288:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21e28f:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21e296:	5d                   	pop    rbp
  21e297:	c3                   	ret    
  21e298:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  21e29f:	48 03 85 70 f0 ff ff 	add    rax,QWORD PTR [rbp-0xf90]
  21e2a6:	0f 92 c1             	setb   cl
  21e2a9:	48 89 85 58 ed ff ff 	mov    QWORD PTR [rbp-0x12a8],rax
  21e2b0:	88 8d 57 ed ff ff    	mov    BYTE PTR [rbp-0x12a9],cl
  21e2b6:	0f 82 66 1f 00 00    	jb     220222 <getLineNumberInfo+0x2632>
  21e2bc:	e9 71 1f 00 00       	jmp    220232 <getLineNumberInfo+0x2642>
        const minimum_instruction_length = try in_stream.readByte();
  21e2c1:	66 8b 85 e0 fd ff ff 	mov    ax,WORD PTR [rbp-0x220]
  21e2c8:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e2cf:	66 89 85 54 ed ff ff 	mov    WORD PTR [rbp-0x12ac],ax
  21e2d6:	e8 b5 d9 fe ff       	call   20bc90 <__zig_return_error>
  21e2db:	b9 30 00 00 00       	mov    ecx,0x30
  21e2e0:	89 ca                	mov    edx,ecx
  21e2e2:	48 8d bd a8 fd ff ff 	lea    rdi,[rbp-0x258]
  21e2e9:	66 8b 85 54 ed ff ff 	mov    ax,WORD PTR [rbp-0x12ac]
  21e2f0:	66 89 85 a8 fd ff ff 	mov    WORD PTR [rbp-0x258],ax
  21e2f7:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21e2fe:	48 89 bd 48 ed ff ff 	mov    QWORD PTR [rbp-0x12b8],rdi
  21e305:	48 89 f7             	mov    rdi,rsi
  21e308:	48 8b b5 48 ed ff ff 	mov    rsi,QWORD PTR [rbp-0x12b8]
  21e30f:	e8 8c 65 01 00       	call   2348a0 <memcpy>
  21e314:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21e31b:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21e322:	5d                   	pop    rbp
  21e323:	c3                   	ret    
  21e324:	8a 85 e2 fd ff ff    	mov    al,BYTE PTR [rbp-0x21e]
  21e32a:	88 85 67 f0 ff ff    	mov    BYTE PTR [rbp-0xf99],al
        if (minimum_instruction_length == 0) return error.InvalidDebugInfo;
  21e330:	80 bd 67 f0 ff ff 00 	cmp    BYTE PTR [rbp-0xf99],0x0
  21e337:	75 47                	jne    21e380 <getLineNumberInfo+0x790>
  21e339:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e340:	e8 4b d9 fe ff       	call   20bc90 <__zig_return_error>
  21e345:	48 8d 3d cc af fe ff 	lea    rdi,[rip+0xfffffffffffeafcc]        # 209318 <__unnamed_122>
  21e34c:	b8 30 00 00 00       	mov    eax,0x30
  21e351:	89 c2                	mov    edx,eax
  21e353:	48 8b 8d 60 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x11a0]
  21e35a:	48 89 bd 40 ed ff ff 	mov    QWORD PTR [rbp-0x12c0],rdi
  21e361:	48 89 cf             	mov    rdi,rcx
  21e364:	48 8b b5 40 ed ff ff 	mov    rsi,QWORD PTR [rbp-0x12c0]
  21e36b:	e8 30 65 01 00       	call   2348a0 <memcpy>
  21e370:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21e377:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21e37e:	5d                   	pop    rbp
  21e37f:	c3                   	ret    
  21e380:	eb 00                	jmp    21e382 <getLineNumberInfo+0x792>
        if (version >= 4) {
  21e382:	66 83 bd 7e f0 ff ff 	cmp    WORD PTR [rbp-0xf82],0x4
  21e389:	04 
  21e38a:	0f 82 89 00 00 00    	jb     21e419 <getLineNumberInfo+0x829>
  21e390:	48 8d bd a0 fd ff ff 	lea    rdi,[rbp-0x260]
            _ = try in_stream.readByte();
  21e397:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21e39e:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21e3a5:	e8 36 57 ff ff       	call   213ae0 <InStream(ReadError)_readByte>
  21e3aa:	66 83 bd a0 fd ff ff 	cmp    WORD PTR [rbp-0x260],0x0
  21e3b1:	00 
  21e3b2:	74 63                	je     21e417 <getLineNumberInfo+0x827>
  21e3b4:	66 8b 85 a0 fd ff ff 	mov    ax,WORD PTR [rbp-0x260]
  21e3bb:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e3c2:	66 89 85 3e ed ff ff 	mov    WORD PTR [rbp-0x12c2],ax
  21e3c9:	e8 c2 d8 fe ff       	call   20bc90 <__zig_return_error>
  21e3ce:	b9 30 00 00 00       	mov    ecx,0x30
  21e3d3:	89 ca                	mov    edx,ecx
  21e3d5:	48 8d bd 68 fd ff ff 	lea    rdi,[rbp-0x298]
  21e3dc:	66 8b 85 3e ed ff ff 	mov    ax,WORD PTR [rbp-0x12c2]
  21e3e3:	66 89 85 68 fd ff ff 	mov    WORD PTR [rbp-0x298],ax
  21e3ea:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21e3f1:	48 89 bd 30 ed ff ff 	mov    QWORD PTR [rbp-0x12d0],rdi
  21e3f8:	48 89 f7             	mov    rdi,rsi
  21e3fb:	48 8b b5 30 ed ff ff 	mov    rsi,QWORD PTR [rbp-0x12d0]
  21e402:	e8 99 64 01 00       	call   2348a0 <memcpy>
  21e407:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21e40e:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21e415:	5d                   	pop    rbp
  21e416:	c3                   	ret    
        if (version >= 4) {
  21e417:	eb 02                	jmp    21e41b <getLineNumberInfo+0x82b>
  21e419:	eb 00                	jmp    21e41b <getLineNumberInfo+0x82b>
  21e41b:	48 8d bd 60 fd ff ff 	lea    rdi,[rbp-0x2a0]
        const default_is_stmt = (try in_stream.readByte()) != 0;
  21e422:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21e429:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21e430:	e8 ab 56 ff ff       	call   213ae0 <InStream(ReadError)_readByte>
  21e435:	66 83 bd 60 fd ff ff 	cmp    WORD PTR [rbp-0x2a0],0x0
  21e43c:	00 
  21e43d:	74 63                	je     21e4a2 <getLineNumberInfo+0x8b2>
  21e43f:	66 8b 85 60 fd ff ff 	mov    ax,WORD PTR [rbp-0x2a0]
  21e446:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e44d:	66 89 85 2e ed ff ff 	mov    WORD PTR [rbp-0x12d2],ax
  21e454:	e8 37 d8 fe ff       	call   20bc90 <__zig_return_error>
  21e459:	b9 30 00 00 00       	mov    ecx,0x30
  21e45e:	89 ca                	mov    edx,ecx
  21e460:	48 8d bd 28 fd ff ff 	lea    rdi,[rbp-0x2d8]
  21e467:	66 8b 85 2e ed ff ff 	mov    ax,WORD PTR [rbp-0x12d2]
  21e46e:	66 89 85 28 fd ff ff 	mov    WORD PTR [rbp-0x2d8],ax
  21e475:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21e47c:	48 89 bd 20 ed ff ff 	mov    QWORD PTR [rbp-0x12e0],rdi
  21e483:	48 89 f7             	mov    rdi,rsi
  21e486:	48 8b b5 20 ed ff ff 	mov    rsi,QWORD PTR [rbp-0x12e0]
  21e48d:	e8 0e 64 01 00       	call   2348a0 <memcpy>
  21e492:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21e499:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21e4a0:	5d                   	pop    rbp
  21e4a1:	c3                   	ret    
  21e4a2:	48 8d bd 20 fd ff ff 	lea    rdi,[rbp-0x2e0]
  21e4a9:	80 bd 62 fd ff ff 00 	cmp    BYTE PTR [rbp-0x29e],0x0
  21e4b0:	0f 95 c0             	setne  al
  21e4b3:	24 01                	and    al,0x1
  21e4b5:	88 85 66 f0 ff ff    	mov    BYTE PTR [rbp-0xf9a],al
        const line_base = try in_stream.readByteSigned();
  21e4bb:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21e4c2:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21e4c9:	e8 f2 3e 00 00       	call   2223c0 <InStream(ReadError)_readByteSigned>
  21e4ce:	66 83 bd 20 fd ff ff 	cmp    WORD PTR [rbp-0x2e0],0x0
  21e4d5:	00 
  21e4d6:	74 63                	je     21e53b <getLineNumberInfo+0x94b>
  21e4d8:	66 8b 85 20 fd ff ff 	mov    ax,WORD PTR [rbp-0x2e0]
  21e4df:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e4e6:	66 89 85 1e ed ff ff 	mov    WORD PTR [rbp-0x12e2],ax
  21e4ed:	e8 9e d7 fe ff       	call   20bc90 <__zig_return_error>
  21e4f2:	b9 30 00 00 00       	mov    ecx,0x30
  21e4f7:	89 ca                	mov    edx,ecx
  21e4f9:	48 8d bd e8 fc ff ff 	lea    rdi,[rbp-0x318]
  21e500:	66 8b 85 1e ed ff ff 	mov    ax,WORD PTR [rbp-0x12e2]
  21e507:	66 89 85 e8 fc ff ff 	mov    WORD PTR [rbp-0x318],ax
  21e50e:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21e515:	48 89 bd 10 ed ff ff 	mov    QWORD PTR [rbp-0x12f0],rdi
  21e51c:	48 89 f7             	mov    rdi,rsi
  21e51f:	48 8b b5 10 ed ff ff 	mov    rsi,QWORD PTR [rbp-0x12f0]
  21e526:	e8 75 63 01 00       	call   2348a0 <memcpy>
  21e52b:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21e532:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21e539:	5d                   	pop    rbp
  21e53a:	c3                   	ret    
  21e53b:	48 8d bd e0 fc ff ff 	lea    rdi,[rbp-0x320]
  21e542:	8a 85 22 fd ff ff    	mov    al,BYTE PTR [rbp-0x2de]
  21e548:	88 85 65 f0 ff ff    	mov    BYTE PTR [rbp-0xf9b],al
        const line_range = try in_stream.readByte();
  21e54e:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21e555:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21e55c:	e8 7f 55 ff ff       	call   213ae0 <InStream(ReadError)_readByte>
  21e561:	66 83 bd e0 fc ff ff 	cmp    WORD PTR [rbp-0x320],0x0
  21e568:	00 
  21e569:	74 63                	je     21e5ce <getLineNumberInfo+0x9de>
  21e56b:	66 8b 85 e0 fc ff ff 	mov    ax,WORD PTR [rbp-0x320]
  21e572:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e579:	66 89 85 0e ed ff ff 	mov    WORD PTR [rbp-0x12f2],ax
  21e580:	e8 0b d7 fe ff       	call   20bc90 <__zig_return_error>
  21e585:	b9 30 00 00 00       	mov    ecx,0x30
  21e58a:	89 ca                	mov    edx,ecx
  21e58c:	48 8d bd a8 fc ff ff 	lea    rdi,[rbp-0x358]
  21e593:	66 8b 85 0e ed ff ff 	mov    ax,WORD PTR [rbp-0x12f2]
  21e59a:	66 89 85 a8 fc ff ff 	mov    WORD PTR [rbp-0x358],ax
  21e5a1:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21e5a8:	48 89 bd 00 ed ff ff 	mov    QWORD PTR [rbp-0x1300],rdi
  21e5af:	48 89 f7             	mov    rdi,rsi
  21e5b2:	48 8b b5 00 ed ff ff 	mov    rsi,QWORD PTR [rbp-0x1300]
  21e5b9:	e8 e2 62 01 00       	call   2348a0 <memcpy>
  21e5be:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21e5c5:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21e5cc:	5d                   	pop    rbp
  21e5cd:	c3                   	ret    
  21e5ce:	8a 85 e2 fc ff ff    	mov    al,BYTE PTR [rbp-0x31e]
  21e5d4:	88 85 64 f0 ff ff    	mov    BYTE PTR [rbp-0xf9c],al
        if (line_range == 0) return error.InvalidDebugInfo;
  21e5da:	80 bd 64 f0 ff ff 00 	cmp    BYTE PTR [rbp-0xf9c],0x0
  21e5e1:	75 47                	jne    21e62a <getLineNumberInfo+0xa3a>
  21e5e3:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e5ea:	e8 a1 d6 fe ff       	call   20bc90 <__zig_return_error>
  21e5ef:	48 8d 3d 52 ad fe ff 	lea    rdi,[rip+0xfffffffffffead52]        # 209348 <__unnamed_123>
  21e5f6:	b8 30 00 00 00       	mov    eax,0x30
  21e5fb:	89 c2                	mov    edx,eax
  21e5fd:	48 8b 8d 60 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x11a0]
  21e604:	48 89 bd f8 ec ff ff 	mov    QWORD PTR [rbp-0x1308],rdi
  21e60b:	48 89 cf             	mov    rdi,rcx
  21e60e:	48 8b b5 f8 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x1308]
  21e615:	e8 86 62 01 00       	call   2348a0 <memcpy>
  21e61a:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21e621:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21e628:	5d                   	pop    rbp
  21e629:	c3                   	ret    
  21e62a:	eb 00                	jmp    21e62c <getLineNumberInfo+0xa3c>
  21e62c:	48 8d bd a0 fc ff ff 	lea    rdi,[rbp-0x360]
        const opcode_base = try in_stream.readByte();
  21e633:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21e63a:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21e641:	e8 9a 54 ff ff       	call   213ae0 <InStream(ReadError)_readByte>
  21e646:	66 83 bd a0 fc ff ff 	cmp    WORD PTR [rbp-0x360],0x0
  21e64d:	00 
  21e64e:	74 63                	je     21e6b3 <getLineNumberInfo+0xac3>
  21e650:	66 8b 85 a0 fc ff ff 	mov    ax,WORD PTR [rbp-0x360]
  21e657:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e65e:	66 89 85 f6 ec ff ff 	mov    WORD PTR [rbp-0x130a],ax
  21e665:	e8 26 d6 fe ff       	call   20bc90 <__zig_return_error>
  21e66a:	b9 30 00 00 00       	mov    ecx,0x30
  21e66f:	89 ca                	mov    edx,ecx
  21e671:	48 8d bd 68 fc ff ff 	lea    rdi,[rbp-0x398]
  21e678:	66 8b 85 f6 ec ff ff 	mov    ax,WORD PTR [rbp-0x130a]
  21e67f:	66 89 85 68 fc ff ff 	mov    WORD PTR [rbp-0x398],ax
  21e686:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21e68d:	48 89 bd e8 ec ff ff 	mov    QWORD PTR [rbp-0x1318],rdi
  21e694:	48 89 f7             	mov    rdi,rsi
  21e697:	48 8b b5 e8 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x1318]
  21e69e:	e8 fd 61 01 00       	call   2348a0 <memcpy>
  21e6a3:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21e6aa:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21e6b1:	5d                   	pop    rbp
  21e6b2:	c3                   	ret    
  21e6b3:	8a 85 a2 fc ff ff    	mov    al,BYTE PTR [rbp-0x35e]
  21e6b9:	88 85 63 f0 ff ff    	mov    BYTE PTR [rbp-0xf9d],al
        const standard_opcode_lengths = try st.allocator().alloc(u8, opcode_base - 1);
  21e6bf:	48 8b bd f0 f0 ff ff 	mov    rdi,QWORD PTR [rbp-0xf10]
  21e6c6:	e8 35 75 ff ff       	call   215c00 <ElfStackTrace_allocator>
  21e6cb:	48 89 85 60 fc ff ff 	mov    QWORD PTR [rbp-0x3a0],rax
  21e6d2:	48 8b 95 60 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x3a0]
  21e6d9:	8a 8d 63 f0 ff ff    	mov    cl,BYTE PTR [rbp-0xf9d]
  21e6df:	80 e9 01             	sub    cl,0x1
  21e6e2:	40 0f 92 c6          	setb   sil
  21e6e6:	40 f6 c6 01          	test   sil,0x1
  21e6ea:	48 89 95 e0 ec ff ff 	mov    QWORD PTR [rbp-0x1320],rdx
  21e6f1:	88 8d df ec ff ff    	mov    BYTE PTR [rbp-0x1321],cl
  21e6f7:	0f 85 70 1b 00 00    	jne    22026d <getLineNumberInfo+0x267d>
  21e6fd:	e9 7b 1b 00 00       	jmp    22027d <getLineNumberInfo+0x268d>
  21e702:	66 8b 85 48 fc ff ff 	mov    ax,WORD PTR [rbp-0x3b8]
  21e709:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e710:	66 89 85 dc ec ff ff 	mov    WORD PTR [rbp-0x1324],ax
  21e717:	e8 74 d5 fe ff       	call   20bc90 <__zig_return_error>
  21e71c:	b9 30 00 00 00       	mov    ecx,0x30
  21e721:	89 ca                	mov    edx,ecx
  21e723:	48 8d bd 00 fc ff ff 	lea    rdi,[rbp-0x400]
  21e72a:	66 8b 85 dc ec ff ff 	mov    ax,WORD PTR [rbp-0x1324]
  21e731:	66 89 85 00 fc ff ff 	mov    WORD PTR [rbp-0x400],ax
  21e738:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21e73f:	48 89 bd d0 ec ff ff 	mov    QWORD PTR [rbp-0x1330],rdi
  21e746:	48 89 f7             	mov    rdi,rsi
  21e749:	48 8b b5 d0 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x1330]
  21e750:	e8 4b 61 01 00       	call   2348a0 <memcpy>
  21e755:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21e75c:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21e763:	5d                   	pop    rbp
  21e764:	c3                   	ret    
  21e765:	48 8b 85 50 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3b0]
  21e76c:	48 89 85 50 f0 ff ff 	mov    QWORD PTR [rbp-0xfb0],rax
  21e773:	48 8b 85 58 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3a8]
  21e77a:	48 89 85 58 f0 ff ff 	mov    QWORD PTR [rbp-0xfa8],rax
            var i: usize = 0;
  21e781:	48 c7 85 48 f0 ff ff 	mov    QWORD PTR [rbp-0xfb8],0x0
  21e788:	00 00 00 00 
            while (i < opcode_base - 1) : (i += 1) {
  21e78c:	48 8b 85 48 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xfb8]
  21e793:	8a 8d 63 f0 ff ff    	mov    cl,BYTE PTR [rbp-0xf9d]
  21e799:	80 e9 01             	sub    cl,0x1
  21e79c:	0f 92 c2             	setb   dl
  21e79f:	f6 c2 01             	test   dl,0x1
  21e7a2:	48 89 85 c8 ec ff ff 	mov    QWORD PTR [rbp-0x1338],rax
  21e7a9:	88 8d c7 ec ff ff    	mov    BYTE PTR [rbp-0x1339],cl
  21e7af:	0f 85 fe 1a 00 00    	jne    2202b3 <getLineNumberInfo+0x26c3>
  21e7b5:	e9 09 1b 00 00       	jmp    2202c3 <getLineNumberInfo+0x26d3>
                standard_opcode_lengths[i] = try in_stream.readByte();
  21e7ba:	48 8b 85 48 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xfb8]
  21e7c1:	48 3b 85 58 f0 ff ff 	cmp    rax,QWORD PTR [rbp-0xfa8]
  21e7c8:	48 89 85 b8 ec ff ff 	mov    QWORD PTR [rbp-0x1348],rax
  21e7cf:	0f 82 1e 1b 00 00    	jb     2202f3 <getLineNumberInfo+0x2703>
  21e7d5:	e9 09 1b 00 00       	jmp    2202e3 <getLineNumberInfo+0x26f3>
  21e7da:	66 8b 85 f8 fb ff ff 	mov    ax,WORD PTR [rbp-0x408]
  21e7e1:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e7e8:	66 89 85 b6 ec ff ff 	mov    WORD PTR [rbp-0x134a],ax
  21e7ef:	e8 9c d4 fe ff       	call   20bc90 <__zig_return_error>
  21e7f4:	b9 30 00 00 00       	mov    ecx,0x30
  21e7f9:	89 ca                	mov    edx,ecx
  21e7fb:	48 8d bd c0 fb ff ff 	lea    rdi,[rbp-0x440]
  21e802:	66 8b 85 b6 ec ff ff 	mov    ax,WORD PTR [rbp-0x134a]
  21e809:	66 89 85 c0 fb ff ff 	mov    WORD PTR [rbp-0x440],ax
  21e810:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21e817:	48 89 bd a8 ec ff ff 	mov    QWORD PTR [rbp-0x1358],rdi
  21e81e:	48 89 f7             	mov    rdi,rsi
  21e821:	48 8b b5 a8 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x1358]
  21e828:	e8 73 60 01 00       	call   2348a0 <memcpy>
  21e82d:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21e834:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21e83b:	5d                   	pop    rbp
  21e83c:	c3                   	ret    
  21e83d:	8a 85 fa fb ff ff    	mov    al,BYTE PTR [rbp-0x406]
  21e843:	48 8b 8d a0 ec ff ff 	mov    rcx,QWORD PTR [rbp-0x1360]
  21e84a:	88 01                	mov    BYTE PTR [rcx],al
            while (i < opcode_base - 1) : (i += 1) {
  21e84c:	48 8b 95 48 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xfb8]
  21e853:	48 83 c2 01          	add    rdx,0x1
  21e857:	0f 92 c0             	setb   al
  21e85a:	48 89 95 98 ec ff ff 	mov    QWORD PTR [rbp-0x1368],rdx
  21e861:	88 85 97 ec ff ff    	mov    BYTE PTR [rbp-0x1369],al
  21e867:	0f 82 c8 1a 00 00    	jb     220335 <getLineNumberInfo+0x2745>
  21e86d:	e9 d3 1a 00 00       	jmp    220345 <getLineNumberInfo+0x2755>
        var include_directories = ArrayList([]u8).init(st.allocator());
  21e872:	48 8b bd f0 f0 ff ff 	mov    rdi,QWORD PTR [rbp-0xf10]
  21e879:	e8 82 73 ff ff       	call   215c00 <ElfStackTrace_allocator>
  21e87e:	48 8d bd a0 fb ff ff 	lea    rdi,[rbp-0x460]
  21e885:	48 89 c6             	mov    rsi,rax
  21e888:	e8 23 3c 00 00       	call   2224b0 <AlignedArrayList([]u8,8)_init>
  21e88d:	48 8d b5 28 f0 ff ff 	lea    rsi,[rbp-0xfd8]
  21e894:	48 8d 95 d0 f0 ff ff 	lea    rdx,[rbp-0xf30]
  21e89b:	48 8b 85 a0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x460]
  21e8a2:	48 89 85 28 f0 ff ff 	mov    QWORD PTR [rbp-0xfd8],rax
  21e8a9:	48 8b 85 a8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x458]
  21e8b0:	48 89 85 30 f0 ff ff 	mov    QWORD PTR [rbp-0xfd0],rax
  21e8b7:	48 8b 85 b0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x450]
  21e8be:	48 89 85 38 f0 ff ff 	mov    QWORD PTR [rbp-0xfc8],rax
  21e8c5:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
  21e8cc:	48 89 85 40 f0 ff ff 	mov    QWORD PTR [rbp-0xfc0],rax
        try include_directories.append(compile_unit_cwd);
  21e8d3:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e8da:	e8 31 3c 00 00       	call   222510 <AlignedArrayList([]u8,8)_append>
  21e8df:	66 89 85 9e fb ff ff 	mov    WORD PTR [rbp-0x462],ax
  21e8e6:	66 83 bd 9e fb ff ff 	cmp    WORD PTR [rbp-0x462],0x0
  21e8ed:	00 
  21e8ee:	74 63                	je     21e953 <getLineNumberInfo+0xd63>
  21e8f0:	66 8b 85 9e fb ff ff 	mov    ax,WORD PTR [rbp-0x462]
  21e8f7:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e8fe:	66 89 85 94 ec ff ff 	mov    WORD PTR [rbp-0x136c],ax
  21e905:	e8 86 d3 fe ff       	call   20bc90 <__zig_return_error>
  21e90a:	b9 30 00 00 00       	mov    ecx,0x30
  21e90f:	89 ca                	mov    edx,ecx
  21e911:	48 8d bd 68 fb ff ff 	lea    rdi,[rbp-0x498]
  21e918:	66 8b 85 94 ec ff ff 	mov    ax,WORD PTR [rbp-0x136c]
  21e91f:	66 89 85 68 fb ff ff 	mov    WORD PTR [rbp-0x498],ax
  21e926:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21e92d:	48 89 bd 88 ec ff ff 	mov    QWORD PTR [rbp-0x1378],rdi
  21e934:	48 89 f7             	mov    rdi,rsi
  21e937:	48 8b b5 88 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x1378]
  21e93e:	e8 5d 5f 01 00       	call   2348a0 <memcpy>
  21e943:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21e94a:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21e951:	5d                   	pop    rbp
  21e952:	c3                   	ret    
        while (true) {
  21e953:	eb 00                	jmp    21e955 <getLineNumberInfo+0xd65>
  21e955:	48 8d bd 50 fb ff ff 	lea    rdi,[rbp-0x4b0]
            const dir = try st.readString();
  21e95c:	48 8b 95 f0 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf10]
  21e963:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21e96a:	e8 31 2e 00 00       	call   2217a0 <ElfStackTrace_readString>
  21e96f:	66 83 bd 50 fb ff ff 	cmp    WORD PTR [rbp-0x4b0],0x0
  21e976:	00 
  21e977:	74 63                	je     21e9dc <getLineNumberInfo+0xdec>
  21e979:	66 8b 85 50 fb ff ff 	mov    ax,WORD PTR [rbp-0x4b0]
  21e980:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21e987:	66 89 85 86 ec ff ff 	mov    WORD PTR [rbp-0x137a],ax
  21e98e:	e8 fd d2 fe ff       	call   20bc90 <__zig_return_error>
  21e993:	b9 30 00 00 00       	mov    ecx,0x30
  21e998:	89 ca                	mov    edx,ecx
  21e99a:	48 8d bd 08 fb ff ff 	lea    rdi,[rbp-0x4f8]
  21e9a1:	66 8b 85 86 ec ff ff 	mov    ax,WORD PTR [rbp-0x137a]
  21e9a8:	66 89 85 08 fb ff ff 	mov    WORD PTR [rbp-0x4f8],ax
  21e9af:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21e9b6:	48 89 bd 78 ec ff ff 	mov    QWORD PTR [rbp-0x1388],rdi
  21e9bd:	48 89 f7             	mov    rdi,rsi
  21e9c0:	48 8b b5 78 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x1388]
  21e9c7:	e8 d4 5e 01 00       	call   2348a0 <memcpy>
  21e9cc:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21e9d3:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21e9da:	5d                   	pop    rbp
  21e9db:	c3                   	ret    
  21e9dc:	48 8b 85 58 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4a8]
  21e9e3:	48 89 85 18 f0 ff ff 	mov    QWORD PTR [rbp-0xfe8],rax
  21e9ea:	48 8b 85 60 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4a0]
  21e9f1:	48 89 85 20 f0 ff ff 	mov    QWORD PTR [rbp-0xfe0],rax
            if (dir.len == 0) break;
  21e9f8:	48 83 bd 20 f0 ff ff 	cmp    QWORD PTR [rbp-0xfe0],0x0
  21e9ff:	00 
  21ea00:	75 05                	jne    21ea07 <getLineNumberInfo+0xe17>
  21ea02:	e9 95 00 00 00       	jmp    21ea9c <getLineNumberInfo+0xeac>
  21ea07:	eb 00                	jmp    21ea09 <getLineNumberInfo+0xe19>
  21ea09:	48 8d b5 28 f0 ff ff 	lea    rsi,[rbp-0xfd8]
  21ea10:	48 8d 95 18 f0 ff ff 	lea    rdx,[rbp-0xfe8]
            try include_directories.append(dir);
  21ea17:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21ea1e:	e8 ed 3a 00 00       	call   222510 <AlignedArrayList([]u8,8)_append>
  21ea23:	66 89 85 06 fb ff ff 	mov    WORD PTR [rbp-0x4fa],ax
  21ea2a:	66 83 bd 06 fb ff ff 	cmp    WORD PTR [rbp-0x4fa],0x0
  21ea31:	00 
  21ea32:	74 63                	je     21ea97 <getLineNumberInfo+0xea7>
  21ea34:	66 8b 85 06 fb ff ff 	mov    ax,WORD PTR [rbp-0x4fa]
  21ea3b:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21ea42:	66 89 85 76 ec ff ff 	mov    WORD PTR [rbp-0x138a],ax
  21ea49:	e8 42 d2 fe ff       	call   20bc90 <__zig_return_error>
  21ea4e:	b9 30 00 00 00       	mov    ecx,0x30
  21ea53:	89 ca                	mov    edx,ecx
  21ea55:	48 8d bd d0 fa ff ff 	lea    rdi,[rbp-0x530]
  21ea5c:	66 8b 85 76 ec ff ff 	mov    ax,WORD PTR [rbp-0x138a]
  21ea63:	66 89 85 d0 fa ff ff 	mov    WORD PTR [rbp-0x530],ax
  21ea6a:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21ea71:	48 89 bd 68 ec ff ff 	mov    QWORD PTR [rbp-0x1398],rdi
  21ea78:	48 89 f7             	mov    rdi,rsi
  21ea7b:	48 8b b5 68 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x1398]
  21ea82:	e8 19 5e 01 00       	call   2348a0 <memcpy>
  21ea87:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21ea8e:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21ea95:	5d                   	pop    rbp
  21ea96:	c3                   	ret    
        while (true) {
  21ea97:	e9 b7 fe ff ff       	jmp    21e953 <getLineNumberInfo+0xd63>
        var file_entries = ArrayList(FileEntry).init(st.allocator());
  21ea9c:	48 8b bd f0 f0 ff ff 	mov    rdi,QWORD PTR [rbp-0xf10]
  21eaa3:	e8 58 71 ff ff       	call   215c00 <ElfStackTrace_allocator>
  21eaa8:	48 8d bd b0 fa ff ff 	lea    rdi,[rbp-0x550]
  21eaaf:	48 89 c6             	mov    rsi,rax
  21eab2:	e8 e9 3a 00 00       	call   2225a0 <AlignedArrayList(FileEntry,8)_init>
  21eab7:	48 8d bd a0 fa ff ff 	lea    rdi,[rbp-0x560]
  21eabe:	48 8d b5 28 f0 ff ff 	lea    rsi,[rbp-0xfd8]
  21eac5:	48 8b 85 b0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x550]
  21eacc:	48 89 85 f8 ef ff ff 	mov    QWORD PTR [rbp-0x1008],rax
  21ead3:	48 8b 85 b8 fa ff ff 	mov    rax,QWORD PTR [rbp-0x548]
  21eada:	48 89 85 00 f0 ff ff 	mov    QWORD PTR [rbp-0x1000],rax
  21eae1:	48 8b 85 c0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x540]
  21eae8:	48 89 85 08 f0 ff ff 	mov    QWORD PTR [rbp-0xff8],rax
  21eaef:	48 8b 85 c8 fa ff ff 	mov    rax,QWORD PTR [rbp-0x538]
  21eaf6:	48 89 85 10 f0 ff ff 	mov    QWORD PTR [rbp-0xff0],rax
        var prog = LineNumberProgram.init(default_is_stmt, include_directories.toSliceConst(), &file_entries, target_address);
  21eafd:	8a 8d 66 f0 ff ff    	mov    cl,BYTE PTR [rbp-0xf9a]
  21eb03:	88 8d 67 ec ff ff    	mov    BYTE PTR [rbp-0x1399],cl
  21eb09:	e8 f2 3a 00 00       	call   222600 <AlignedArrayList([]u8,8)_toSliceConst>
  21eb0e:	48 8d 85 30 fa ff ff 	lea    rax,[rbp-0x5d0]
  21eb15:	4c 8b 85 e0 f0 ff ff 	mov    r8,QWORD PTR [rbp-0xf20]
  21eb1c:	8a 8d 67 ec ff ff    	mov    cl,BYTE PTR [rbp-0x1399]
  21eb22:	0f b6 f1             	movzx  esi,cl
  21eb25:	48 8d bd 30 fa ff ff 	lea    rdi,[rbp-0x5d0]
  21eb2c:	48 8d 95 a0 fa ff ff 	lea    rdx,[rbp-0x560]
  21eb33:	48 8d 8d f8 ef ff ff 	lea    rcx,[rbp-0x1008]
  21eb3a:	48 89 85 58 ec ff ff 	mov    QWORD PTR [rbp-0x13a8],rax
  21eb41:	e8 5a 3b 00 00       	call   2226a0 <LineNumberProgram_init>
  21eb46:	be 70 00 00 00       	mov    esi,0x70
  21eb4b:	89 f2                	mov    edx,esi
  21eb4d:	48 8d 85 88 ef ff ff 	lea    rax,[rbp-0x1078]
  21eb54:	48 8d 8d 30 fa ff ff 	lea    rcx,[rbp-0x5d0]
  21eb5b:	48 89 c7             	mov    rdi,rax
  21eb5e:	48 89 ce             	mov    rsi,rcx
  21eb61:	e8 3a 5d 01 00       	call   2348a0 <memcpy>
        while (true) {
  21eb66:	eb 00                	jmp    21eb68 <getLineNumberInfo+0xf78>
  21eb68:	48 8d bd 18 fa ff ff 	lea    rdi,[rbp-0x5e8]
            const file_name = try st.readString();
  21eb6f:	48 8b 95 f0 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf10]
  21eb76:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21eb7d:	e8 1e 2c 00 00       	call   2217a0 <ElfStackTrace_readString>
  21eb82:	66 83 bd 18 fa ff ff 	cmp    WORD PTR [rbp-0x5e8],0x0
  21eb89:	00 
  21eb8a:	74 63                	je     21ebef <getLineNumberInfo+0xfff>
  21eb8c:	66 8b 85 18 fa ff ff 	mov    ax,WORD PTR [rbp-0x5e8]
  21eb93:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21eb9a:	66 89 85 56 ec ff ff 	mov    WORD PTR [rbp-0x13aa],ax
  21eba1:	e8 ea d0 fe ff       	call   20bc90 <__zig_return_error>
  21eba6:	b9 30 00 00 00       	mov    ecx,0x30
  21ebab:	89 ca                	mov    edx,ecx
  21ebad:	48 8d bd d0 f9 ff ff 	lea    rdi,[rbp-0x630]
  21ebb4:	66 8b 85 56 ec ff ff 	mov    ax,WORD PTR [rbp-0x13aa]
  21ebbb:	66 89 85 d0 f9 ff ff 	mov    WORD PTR [rbp-0x630],ax
  21ebc2:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21ebc9:	48 89 bd 48 ec ff ff 	mov    QWORD PTR [rbp-0x13b8],rdi
  21ebd0:	48 89 f7             	mov    rdi,rsi
  21ebd3:	48 8b b5 48 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x13b8]
  21ebda:	e8 c1 5c 01 00       	call   2348a0 <memcpy>
  21ebdf:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21ebe6:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21ebed:	5d                   	pop    rbp
  21ebee:	c3                   	ret    
  21ebef:	48 8b 85 20 fa ff ff 	mov    rax,QWORD PTR [rbp-0x5e0]
  21ebf6:	48 89 85 78 ef ff ff 	mov    QWORD PTR [rbp-0x1088],rax
  21ebfd:	48 8b 85 28 fa ff ff 	mov    rax,QWORD PTR [rbp-0x5d8]
  21ec04:	48 89 85 80 ef ff ff 	mov    QWORD PTR [rbp-0x1080],rax
            if (file_name.len == 0) break;
  21ec0b:	48 83 bd 80 ef ff ff 	cmp    QWORD PTR [rbp-0x1080],0x0
  21ec12:	00 
  21ec13:	75 05                	jne    21ec1a <getLineNumberInfo+0x102a>
  21ec15:	e9 9a 02 00 00       	jmp    21eeb4 <getLineNumberInfo+0x12c4>
  21ec1a:	eb 00                	jmp    21ec1c <getLineNumberInfo+0x102c>
  21ec1c:	48 8d bd c0 f9 ff ff 	lea    rdi,[rbp-0x640]
            const dir_index = try readULeb128(in_stream);
  21ec23:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21ec2a:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21ec31:	e8 3a 84 ff ff       	call   217070 <readULeb128>
  21ec36:	66 83 bd c0 f9 ff ff 	cmp    WORD PTR [rbp-0x640],0x0
  21ec3d:	00 
  21ec3e:	74 63                	je     21eca3 <getLineNumberInfo+0x10b3>
  21ec40:	66 8b 85 c0 f9 ff ff 	mov    ax,WORD PTR [rbp-0x640]
  21ec47:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21ec4e:	66 89 85 46 ec ff ff 	mov    WORD PTR [rbp-0x13ba],ax
  21ec55:	e8 36 d0 fe ff       	call   20bc90 <__zig_return_error>
  21ec5a:	b9 30 00 00 00       	mov    ecx,0x30
  21ec5f:	89 ca                	mov    edx,ecx
  21ec61:	48 8d bd 80 f9 ff ff 	lea    rdi,[rbp-0x680]
  21ec68:	66 8b 85 46 ec ff ff 	mov    ax,WORD PTR [rbp-0x13ba]
  21ec6f:	66 89 85 80 f9 ff ff 	mov    WORD PTR [rbp-0x680],ax
  21ec76:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21ec7d:	48 89 bd 38 ec ff ff 	mov    QWORD PTR [rbp-0x13c8],rdi
  21ec84:	48 89 f7             	mov    rdi,rsi
  21ec87:	48 8b b5 38 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x13c8]
  21ec8e:	e8 0d 5c 01 00       	call   2348a0 <memcpy>
  21ec93:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21ec9a:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21eca1:	5d                   	pop    rbp
  21eca2:	c3                   	ret    
  21eca3:	48 8d bd 70 f9 ff ff 	lea    rdi,[rbp-0x690]
  21ecaa:	48 8b 85 c8 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x638]
  21ecb1:	48 89 85 70 ef ff ff 	mov    QWORD PTR [rbp-0x1090],rax
            const mtime = try readULeb128(in_stream);
  21ecb8:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21ecbf:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21ecc6:	e8 a5 83 ff ff       	call   217070 <readULeb128>
  21eccb:	66 83 bd 70 f9 ff ff 	cmp    WORD PTR [rbp-0x690],0x0
  21ecd2:	00 
  21ecd3:	74 63                	je     21ed38 <getLineNumberInfo+0x1148>
  21ecd5:	66 8b 85 70 f9 ff ff 	mov    ax,WORD PTR [rbp-0x690]
  21ecdc:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21ece3:	66 89 85 36 ec ff ff 	mov    WORD PTR [rbp-0x13ca],ax
  21ecea:	e8 a1 cf fe ff       	call   20bc90 <__zig_return_error>
  21ecef:	b9 30 00 00 00       	mov    ecx,0x30
  21ecf4:	89 ca                	mov    edx,ecx
  21ecf6:	48 8d bd 30 f9 ff ff 	lea    rdi,[rbp-0x6d0]
  21ecfd:	66 8b 85 36 ec ff ff 	mov    ax,WORD PTR [rbp-0x13ca]
  21ed04:	66 89 85 30 f9 ff ff 	mov    WORD PTR [rbp-0x6d0],ax
  21ed0b:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21ed12:	48 89 bd 28 ec ff ff 	mov    QWORD PTR [rbp-0x13d8],rdi
  21ed19:	48 89 f7             	mov    rdi,rsi
  21ed1c:	48 8b b5 28 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x13d8]
  21ed23:	e8 78 5b 01 00       	call   2348a0 <memcpy>
  21ed28:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21ed2f:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21ed36:	5d                   	pop    rbp
  21ed37:	c3                   	ret    
  21ed38:	48 8d bd 20 f9 ff ff 	lea    rdi,[rbp-0x6e0]
  21ed3f:	48 8b 85 78 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x688]
  21ed46:	48 89 85 68 ef ff ff 	mov    QWORD PTR [rbp-0x1098],rax
            const len_bytes = try readULeb128(in_stream);
  21ed4d:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21ed54:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21ed5b:	e8 10 83 ff ff       	call   217070 <readULeb128>
  21ed60:	66 83 bd 20 f9 ff ff 	cmp    WORD PTR [rbp-0x6e0],0x0
  21ed67:	00 
  21ed68:	74 63                	je     21edcd <getLineNumberInfo+0x11dd>
  21ed6a:	66 8b 85 20 f9 ff ff 	mov    ax,WORD PTR [rbp-0x6e0]
  21ed71:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21ed78:	66 89 85 26 ec ff ff 	mov    WORD PTR [rbp-0x13da],ax
  21ed7f:	e8 0c cf fe ff       	call   20bc90 <__zig_return_error>
  21ed84:	b9 30 00 00 00       	mov    ecx,0x30
  21ed89:	89 ca                	mov    edx,ecx
  21ed8b:	48 8d bd e0 f8 ff ff 	lea    rdi,[rbp-0x720]
  21ed92:	66 8b 85 26 ec ff ff 	mov    ax,WORD PTR [rbp-0x13da]
  21ed99:	66 89 85 e0 f8 ff ff 	mov    WORD PTR [rbp-0x720],ax
  21eda0:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21eda7:	48 89 bd 18 ec ff ff 	mov    QWORD PTR [rbp-0x13e8],rdi
  21edae:	48 89 f7             	mov    rdi,rsi
  21edb1:	48 8b b5 18 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x13e8]
  21edb8:	e8 e3 5a 01 00       	call   2348a0 <memcpy>
  21edbd:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21edc4:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21edcb:	5d                   	pop    rbp
  21edcc:	c3                   	ret    
  21edcd:	48 8d b5 f8 ef ff ff 	lea    rsi,[rbp-0x1008]
  21edd4:	48 8d 95 b8 f8 ff ff 	lea    rdx,[rbp-0x748]
  21eddb:	48 8b 85 28 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x6d8]
  21ede2:	48 89 85 60 ef ff ff 	mov    QWORD PTR [rbp-0x10a0],rax
                .dir_index = dir_index,
  21ede9:	48 8b 85 70 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1090]
                .mtime = mtime,
  21edf0:	48 8b 8d 68 ef ff ff 	mov    rcx,QWORD PTR [rbp-0x1098]
                .len_bytes = len_bytes,
  21edf7:	48 8b bd 60 ef ff ff 	mov    rdi,QWORD PTR [rbp-0x10a0]
            try file_entries.append(FileEntry{
  21edfe:	4c 8b 85 78 ef ff ff 	mov    r8,QWORD PTR [rbp-0x1088]
  21ee05:	4c 89 85 b8 f8 ff ff 	mov    QWORD PTR [rbp-0x748],r8
  21ee0c:	4c 8b 85 80 ef ff ff 	mov    r8,QWORD PTR [rbp-0x1080]
  21ee13:	4c 89 85 c0 f8 ff ff 	mov    QWORD PTR [rbp-0x740],r8
  21ee1a:	48 89 85 c8 f8 ff ff 	mov    QWORD PTR [rbp-0x738],rax
  21ee21:	48 89 8d d0 f8 ff ff 	mov    QWORD PTR [rbp-0x730],rcx
  21ee28:	48 89 bd d8 f8 ff ff 	mov    QWORD PTR [rbp-0x728],rdi
  21ee2f:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21ee36:	e8 45 39 00 00       	call   222780 <AlignedArrayList(FileEntry,8)_append>
  21ee3b:	66 89 85 b6 f8 ff ff 	mov    WORD PTR [rbp-0x74a],ax
  21ee42:	66 83 bd b6 f8 ff ff 	cmp    WORD PTR [rbp-0x74a],0x0
  21ee49:	00 
  21ee4a:	74 63                	je     21eeaf <getLineNumberInfo+0x12bf>
  21ee4c:	66 8b 85 b6 f8 ff ff 	mov    ax,WORD PTR [rbp-0x74a]
  21ee53:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21ee5a:	66 89 85 16 ec ff ff 	mov    WORD PTR [rbp-0x13ea],ax
  21ee61:	e8 2a ce fe ff       	call   20bc90 <__zig_return_error>
  21ee66:	b9 30 00 00 00       	mov    ecx,0x30
  21ee6b:	89 ca                	mov    edx,ecx
  21ee6d:	48 8d bd 80 f8 ff ff 	lea    rdi,[rbp-0x780]
  21ee74:	66 8b 85 16 ec ff ff 	mov    ax,WORD PTR [rbp-0x13ea]
  21ee7b:	66 89 85 80 f8 ff ff 	mov    WORD PTR [rbp-0x780],ax
  21ee82:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21ee89:	48 89 bd 08 ec ff ff 	mov    QWORD PTR [rbp-0x13f8],rdi
  21ee90:	48 89 f7             	mov    rdi,rsi
  21ee93:	48 8b b5 08 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x13f8]
  21ee9a:	e8 01 5a 01 00       	call   2348a0 <memcpy>
  21ee9f:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21eea6:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21eead:	5d                   	pop    rbp
  21eeae:	c3                   	ret    
        while (true) {
  21eeaf:	e9 b2 fc ff ff       	jmp    21eb66 <getLineNumberInfo+0xf76>
        try in_file.seekTo(prog_start_offset);
  21eeb4:	48 8b b5 c8 f0 ff ff 	mov    rsi,QWORD PTR [rbp-0xf38]
  21eebb:	48 8b 95 68 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf98]
  21eec2:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21eec9:	e8 42 53 ff ff       	call   214210 <File_seekTo>
  21eece:	66 89 85 7e f8 ff ff 	mov    WORD PTR [rbp-0x782],ax
  21eed5:	66 83 bd 7e f8 ff ff 	cmp    WORD PTR [rbp-0x782],0x0
  21eedc:	00 
  21eedd:	74 63                	je     21ef42 <getLineNumberInfo+0x1352>
  21eedf:	66 8b 85 7e f8 ff ff 	mov    ax,WORD PTR [rbp-0x782]
  21eee6:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21eeed:	66 89 85 06 ec ff ff 	mov    WORD PTR [rbp-0x13fa],ax
  21eef4:	e8 97 cd fe ff       	call   20bc90 <__zig_return_error>
  21eef9:	b9 30 00 00 00       	mov    ecx,0x30
  21eefe:	89 ca                	mov    edx,ecx
  21ef00:	48 8d bd 48 f8 ff ff 	lea    rdi,[rbp-0x7b8]
  21ef07:	66 8b 85 06 ec ff ff 	mov    ax,WORD PTR [rbp-0x13fa]
  21ef0e:	66 89 85 48 f8 ff ff 	mov    WORD PTR [rbp-0x7b8],ax
  21ef15:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21ef1c:	48 89 bd f8 eb ff ff 	mov    QWORD PTR [rbp-0x1408],rdi
  21ef23:	48 89 f7             	mov    rdi,rsi
  21ef26:	48 8b b5 f8 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x1408]
  21ef2d:	e8 6e 59 01 00       	call   2348a0 <memcpy>
  21ef32:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21ef39:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21ef40:	5d                   	pop    rbp
  21ef41:	c3                   	ret    
        while (true) {
  21ef42:	eb 00                	jmp    21ef44 <getLineNumberInfo+0x1354>
  21ef44:	48 8d bd 40 f8 ff ff 	lea    rdi,[rbp-0x7c0]
            const opcode = try in_stream.readByte();
  21ef4b:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21ef52:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21ef59:	e8 82 4b ff ff       	call   213ae0 <InStream(ReadError)_readByte>
  21ef5e:	66 83 bd 40 f8 ff ff 	cmp    WORD PTR [rbp-0x7c0],0x0
  21ef65:	00 
  21ef66:	74 63                	je     21efcb <getLineNumberInfo+0x13db>
  21ef68:	66 8b 85 40 f8 ff ff 	mov    ax,WORD PTR [rbp-0x7c0]
  21ef6f:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21ef76:	66 89 85 f6 eb ff ff 	mov    WORD PTR [rbp-0x140a],ax
  21ef7d:	e8 0e cd fe ff       	call   20bc90 <__zig_return_error>
  21ef82:	b9 30 00 00 00       	mov    ecx,0x30
  21ef87:	89 ca                	mov    edx,ecx
  21ef89:	48 8d bd 08 f8 ff ff 	lea    rdi,[rbp-0x7f8]
  21ef90:	66 8b 85 f6 eb ff ff 	mov    ax,WORD PTR [rbp-0x140a]
  21ef97:	66 89 85 08 f8 ff ff 	mov    WORD PTR [rbp-0x7f8],ax
  21ef9e:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21efa5:	48 89 bd e8 eb ff ff 	mov    QWORD PTR [rbp-0x1418],rdi
  21efac:	48 89 f7             	mov    rdi,rsi
  21efaf:	48 8b b5 e8 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x1418]
  21efb6:	e8 e5 58 01 00       	call   2348a0 <memcpy>
  21efbb:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21efc2:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21efc9:	5d                   	pop    rbp
  21efca:	c3                   	ret    
  21efcb:	48 8d bd 5e ef ff ff 	lea    rdi,[rbp-0x10a2]
  21efd2:	be aa 00 00 00       	mov    esi,0xaa
  21efd7:	b8 01 00 00 00       	mov    eax,0x1
  21efdc:	89 c2                	mov    edx,eax
  21efde:	8a 8d 42 f8 ff ff    	mov    cl,BYTE PTR [rbp-0x7be]
  21efe4:	88 8d 5f ef ff ff    	mov    BYTE PTR [rbp-0x10a1],cl
            var sub_op: u8 = undefined; // TODO move this to the correct scope and fix the compiler crash
  21efea:	e8 61 58 01 00       	call   234850 <memset>
            if (opcode == DW.LNS_extended_op) {
  21efef:	80 bd 5f ef ff ff 00 	cmp    BYTE PTR [rbp-0x10a1],0x0
  21eff6:	0f 85 8d 08 00 00    	jne    21f889 <getLineNumberInfo+0x1c99>
  21effc:	48 8d bd f8 f7 ff ff 	lea    rdi,[rbp-0x808]
                const op_size = try readULeb128(in_stream);
  21f003:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21f00a:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21f011:	e8 5a 80 ff ff       	call   217070 <readULeb128>
  21f016:	66 83 bd f8 f7 ff ff 	cmp    WORD PTR [rbp-0x808],0x0
  21f01d:	00 
  21f01e:	74 63                	je     21f083 <getLineNumberInfo+0x1493>
  21f020:	66 8b 85 f8 f7 ff ff 	mov    ax,WORD PTR [rbp-0x808]
  21f027:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21f02e:	66 89 85 e6 eb ff ff 	mov    WORD PTR [rbp-0x141a],ax
  21f035:	e8 56 cc fe ff       	call   20bc90 <__zig_return_error>
  21f03a:	b9 30 00 00 00       	mov    ecx,0x30
  21f03f:	89 ca                	mov    edx,ecx
  21f041:	48 8d bd b8 f7 ff ff 	lea    rdi,[rbp-0x848]
  21f048:	66 8b 85 e6 eb ff ff 	mov    ax,WORD PTR [rbp-0x141a]
  21f04f:	66 89 85 b8 f7 ff ff 	mov    WORD PTR [rbp-0x848],ax
  21f056:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21f05d:	48 89 bd d8 eb ff ff 	mov    QWORD PTR [rbp-0x1428],rdi
  21f064:	48 89 f7             	mov    rdi,rsi
  21f067:	48 8b b5 d8 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x1428]
  21f06e:	e8 2d 58 01 00       	call   2348a0 <memcpy>
  21f073:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21f07a:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21f081:	5d                   	pop    rbp
  21f082:	c3                   	ret    
  21f083:	48 8b 85 00 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x800]
  21f08a:	48 89 85 50 ef ff ff 	mov    QWORD PTR [rbp-0x10b0],rax
                if (op_size < 1) return error.InvalidDebugInfo;
  21f091:	48 83 bd 50 ef ff ff 	cmp    QWORD PTR [rbp-0x10b0],0x1
  21f098:	01 
  21f099:	73 47                	jae    21f0e2 <getLineNumberInfo+0x14f2>
  21f09b:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21f0a2:	e8 e9 cb fe ff       	call   20bc90 <__zig_return_error>
  21f0a7:	48 8d 3d ca a2 fe ff 	lea    rdi,[rip+0xfffffffffffea2ca]        # 209378 <__unnamed_124>
  21f0ae:	b8 30 00 00 00       	mov    eax,0x30
  21f0b3:	89 c2                	mov    edx,eax
  21f0b5:	48 8b 8d 60 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x11a0]
  21f0bc:	48 89 bd d0 eb ff ff 	mov    QWORD PTR [rbp-0x1430],rdi
  21f0c3:	48 89 cf             	mov    rdi,rcx
  21f0c6:	48 8b b5 d0 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x1430]
  21f0cd:	e8 ce 57 01 00       	call   2348a0 <memcpy>
  21f0d2:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21f0d9:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21f0e0:	5d                   	pop    rbp
  21f0e1:	c3                   	ret    
  21f0e2:	eb 00                	jmp    21f0e4 <getLineNumberInfo+0x14f4>
  21f0e4:	48 8d bd b0 f7 ff ff 	lea    rdi,[rbp-0x850]
                sub_op = try in_stream.readByte();
  21f0eb:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21f0f2:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21f0f9:	e8 e2 49 ff ff       	call   213ae0 <InStream(ReadError)_readByte>
  21f0fe:	66 83 bd b0 f7 ff ff 	cmp    WORD PTR [rbp-0x850],0x0
  21f105:	00 
  21f106:	74 63                	je     21f16b <getLineNumberInfo+0x157b>
  21f108:	66 8b 85 b0 f7 ff ff 	mov    ax,WORD PTR [rbp-0x850]
  21f10f:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21f116:	66 89 85 ce eb ff ff 	mov    WORD PTR [rbp-0x1432],ax
  21f11d:	e8 6e cb fe ff       	call   20bc90 <__zig_return_error>
  21f122:	b9 30 00 00 00       	mov    ecx,0x30
  21f127:	89 ca                	mov    edx,ecx
  21f129:	48 8d bd 78 f7 ff ff 	lea    rdi,[rbp-0x888]
  21f130:	66 8b 85 ce eb ff ff 	mov    ax,WORD PTR [rbp-0x1432]
  21f137:	66 89 85 78 f7 ff ff 	mov    WORD PTR [rbp-0x888],ax
  21f13e:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21f145:	48 89 bd c0 eb ff ff 	mov    QWORD PTR [rbp-0x1440],rdi
  21f14c:	48 89 f7             	mov    rdi,rsi
  21f14f:	48 8b b5 c0 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x1440]
  21f156:	e8 45 57 01 00       	call   2348a0 <memcpy>
  21f15b:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21f162:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21f169:	5d                   	pop    rbp
  21f16a:	c3                   	ret    
  21f16b:	8a 85 b2 f7 ff ff    	mov    al,BYTE PTR [rbp-0x84e]
  21f171:	88 85 5e ef ff ff    	mov    BYTE PTR [rbp-0x10a2],al
                switch (sub_op) {
  21f177:	8a 85 5e ef ff ff    	mov    al,BYTE PTR [rbp-0x10a2]
  21f17d:	88 c1                	mov    cl,al
  21f17f:	80 e9 01             	sub    cl,0x1
  21f182:	88 85 bf eb ff ff    	mov    BYTE PTR [rbp-0x1441],al
  21f188:	88 8d be eb ff ff    	mov    BYTE PTR [rbp-0x1442],cl
  21f18e:	0f 84 4a 01 00 00    	je     21f2de <getLineNumberInfo+0x16ee>
  21f194:	eb 00                	jmp    21f196 <getLineNumberInfo+0x15a6>
  21f196:	8a 85 bf eb ff ff    	mov    al,BYTE PTR [rbp-0x1441]
  21f19c:	2c 02                	sub    al,0x2
  21f19e:	88 85 bd eb ff ff    	mov    BYTE PTR [rbp-0x1443],al
  21f1a4:	0f 84 df 02 00 00    	je     21f489 <getLineNumberInfo+0x1899>
  21f1aa:	eb 00                	jmp    21f1ac <getLineNumberInfo+0x15bc>
  21f1ac:	8a 85 bf eb ff ff    	mov    al,BYTE PTR [rbp-0x1441]
  21f1b2:	2c 03                	sub    al,0x3
  21f1b4:	88 85 bc eb ff ff    	mov    BYTE PTR [rbp-0x1444],al
  21f1ba:	0f 84 8e 03 00 00    	je     21f54e <getLineNumberInfo+0x195e>
  21f1c0:	eb 00                	jmp    21f1c2 <getLineNumberInfo+0x15d2>
                        const fwd_amt = math.cast(isize, op_size - 1) catch return error.InvalidDebugInfo;
  21f1c2:	48 8b 85 50 ef ff ff 	mov    rax,QWORD PTR [rbp-0x10b0]
  21f1c9:	48 83 e8 01          	sub    rax,0x1
  21f1cd:	0f 92 c1             	setb   cl
  21f1d0:	48 89 85 b0 eb ff ff 	mov    QWORD PTR [rbp-0x1450],rax
  21f1d7:	88 8d af eb ff ff    	mov    BYTE PTR [rbp-0x1451],cl
  21f1dd:	0f 82 75 11 00 00    	jb     220358 <getLineNumberInfo+0x2768>
  21f1e3:	e9 80 11 00 00       	jmp    220368 <getLineNumberInfo+0x2778>
  21f1e8:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21f1ef:	e8 9c ca fe ff       	call   20bc90 <__zig_return_error>
  21f1f4:	48 8d 3d ad a1 fe ff 	lea    rdi,[rip+0xfffffffffffea1ad]        # 2093a8 <__unnamed_125>
  21f1fb:	b8 30 00 00 00       	mov    eax,0x30
  21f200:	89 c2                	mov    edx,eax
  21f202:	48 8b 8d 60 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x11a0]
  21f209:	48 89 bd a0 eb ff ff 	mov    QWORD PTR [rbp-0x1460],rdi
  21f210:	48 89 cf             	mov    rdi,rcx
  21f213:	48 8b b5 a0 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x1460]
  21f21a:	e8 81 56 01 00       	call   2348a0 <memcpy>
  21f21f:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21f226:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21f22d:	5d                   	pop    rbp
  21f22e:	c3                   	ret    
  21f22f:	48 8b 85 70 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x890]
  21f236:	48 89 85 98 eb ff ff 	mov    QWORD PTR [rbp-0x1468],rax
  21f23d:	48 8b 85 98 eb ff ff 	mov    rax,QWORD PTR [rbp-0x1468]
  21f244:	48 89 85 48 ef ff ff 	mov    QWORD PTR [rbp-0x10b8],rax
                        try in_file.seekForward(fwd_amt);
  21f24b:	48 8b b5 c8 f0 ff ff 	mov    rsi,QWORD PTR [rbp-0xf38]
  21f252:	48 8b 95 48 ef ff ff 	mov    rdx,QWORD PTR [rbp-0x10b8]
  21f259:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21f260:	e8 4b 49 ff ff       	call   213bb0 <File_seekForward>
  21f265:	66 89 85 56 f7 ff ff 	mov    WORD PTR [rbp-0x8aa],ax
  21f26c:	66 83 bd 56 f7 ff ff 	cmp    WORD PTR [rbp-0x8aa],0x0
  21f273:	00 
  21f274:	74 63                	je     21f2d9 <getLineNumberInfo+0x16e9>
  21f276:	66 8b 85 56 f7 ff ff 	mov    ax,WORD PTR [rbp-0x8aa]
  21f27d:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21f284:	66 89 85 96 eb ff ff 	mov    WORD PTR [rbp-0x146a],ax
  21f28b:	e8 00 ca fe ff       	call   20bc90 <__zig_return_error>
  21f290:	b9 30 00 00 00       	mov    ecx,0x30
  21f295:	89 ca                	mov    edx,ecx
  21f297:	48 8d bd 20 f7 ff ff 	lea    rdi,[rbp-0x8e0]
  21f29e:	66 8b 85 96 eb ff ff 	mov    ax,WORD PTR [rbp-0x146a]
  21f2a5:	66 89 85 20 f7 ff ff 	mov    WORD PTR [rbp-0x8e0],ax
  21f2ac:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21f2b3:	48 89 bd 88 eb ff ff 	mov    QWORD PTR [rbp-0x1478],rdi
  21f2ba:	48 89 f7             	mov    rdi,rsi
  21f2bd:	48 8b b5 88 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x1478]
  21f2c4:	e8 d7 55 01 00       	call   2348a0 <memcpy>
  21f2c9:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21f2d0:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21f2d7:	5d                   	pop    rbp
  21f2d8:	c3                   	ret    
                switch (sub_op) {
  21f2d9:	e9 a6 05 00 00       	jmp    21f884 <getLineNumberInfo+0x1c94>
  21f2de:	48 8d bd e8 f6 ff ff 	lea    rdi,[rbp-0x918]
  21f2e5:	48 8d 95 88 ef ff ff 	lea    rdx,[rbp-0x1078]
                        prog.end_sequence = true;
  21f2ec:	c6 85 aa ef ff ff 01 	mov    BYTE PTR [rbp-0x1056],0x1
                        if (try prog.checkLineMatch()) |info| return info;
  21f2f3:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21f2fa:	e8 b1 35 00 00       	call   2228b0 <LineNumberProgram_checkLineMatch>
  21f2ff:	66 83 bd e8 f6 ff ff 	cmp    WORD PTR [rbp-0x918],0x0
  21f306:	00 
  21f307:	74 63                	je     21f36c <getLineNumberInfo+0x177c>
  21f309:	66 8b 85 e8 f6 ff ff 	mov    ax,WORD PTR [rbp-0x918]
  21f310:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21f317:	66 89 85 86 eb ff ff 	mov    WORD PTR [rbp-0x147a],ax
  21f31e:	e8 6d c9 fe ff       	call   20bc90 <__zig_return_error>
  21f323:	b9 30 00 00 00       	mov    ecx,0x30
  21f328:	89 ca                	mov    edx,ecx
  21f32a:	48 8d bd 80 f6 ff ff 	lea    rdi,[rbp-0x980]
  21f331:	66 8b 85 86 eb ff ff 	mov    ax,WORD PTR [rbp-0x147a]
  21f338:	66 89 85 80 f6 ff ff 	mov    WORD PTR [rbp-0x980],ax
  21f33f:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21f346:	48 89 bd 78 eb ff ff 	mov    QWORD PTR [rbp-0x1488],rdi
  21f34d:	48 89 f7             	mov    rdi,rsi
  21f350:	48 8b b5 78 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x1488]
  21f357:	e8 44 55 01 00       	call   2348a0 <memcpy>
  21f35c:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21f363:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21f36a:	5d                   	pop    rbp
  21f36b:	c3                   	ret    
  21f36c:	48 8d 85 e8 f6 ff ff 	lea    rax,[rbp-0x918]
  21f373:	48 83 c0 08          	add    rax,0x8
  21f377:	f6 85 18 f7 ff ff 01 	test   BYTE PTR [rbp-0x8e8],0x1
  21f37e:	48 89 85 70 eb ff ff 	mov    QWORD PTR [rbp-0x1490],rax
  21f385:	75 05                	jne    21f38c <getLineNumberInfo+0x179c>
  21f387:	e9 b4 00 00 00       	jmp    21f440 <getLineNumberInfo+0x1850>
  21f38c:	b8 30 00 00 00       	mov    eax,0x30
  21f391:	89 c2                	mov    edx,eax
  21f393:	48 8d 8d 50 f6 ff ff 	lea    rcx,[rbp-0x9b0]
  21f39a:	b8 28 00 00 00       	mov    eax,0x28
  21f39f:	89 c6                	mov    esi,eax
  21f3a1:	48 8d bd 20 ef ff ff 	lea    rdi,[rbp-0x10e0]
  21f3a8:	4c 8b 85 70 eb ff ff 	mov    r8,QWORD PTR [rbp-0x1490]
  21f3af:	49 89 f9             	mov    r9,rdi
  21f3b2:	48 89 bd 68 eb ff ff 	mov    QWORD PTR [rbp-0x1498],rdi
  21f3b9:	4c 89 cf             	mov    rdi,r9
  21f3bc:	48 89 b5 60 eb ff ff 	mov    QWORD PTR [rbp-0x14a0],rsi
  21f3c3:	4c 89 c6             	mov    rsi,r8
  21f3c6:	4c 8b 85 60 eb ff ff 	mov    r8,QWORD PTR [rbp-0x14a0]
  21f3cd:	48 89 95 58 eb ff ff 	mov    QWORD PTR [rbp-0x14a8],rdx
  21f3d4:	4c 89 c2             	mov    rdx,r8
  21f3d7:	48 89 8d 50 eb ff ff 	mov    QWORD PTR [rbp-0x14b0],rcx
  21f3de:	e8 bd 54 01 00       	call   2348a0 <memcpy>
  21f3e3:	66 c7 85 50 f6 ff ff 	mov    WORD PTR [rbp-0x9b0],0x0
  21f3ea:	00 00 
  21f3ec:	48 8b 8d 50 eb ff ff 	mov    rcx,QWORD PTR [rbp-0x14b0]
  21f3f3:	48 83 c1 08          	add    rcx,0x8
  21f3f7:	48 8b 95 68 eb ff ff 	mov    rdx,QWORD PTR [rbp-0x1498]
  21f3fe:	48 89 cf             	mov    rdi,rcx
  21f401:	48 89 d6             	mov    rsi,rdx
  21f404:	48 8b 95 60 eb ff ff 	mov    rdx,QWORD PTR [rbp-0x14a0]
  21f40b:	e8 90 54 01 00       	call   2348a0 <memcpy>
  21f410:	48 8b 8d 50 eb ff ff 	mov    rcx,QWORD PTR [rbp-0x14b0]
  21f417:	48 8b 95 60 ee ff ff 	mov    rdx,QWORD PTR [rbp-0x11a0]
  21f41e:	48 89 d7             	mov    rdi,rdx
  21f421:	48 89 ce             	mov    rsi,rcx
  21f424:	48 8b 95 58 eb ff ff 	mov    rdx,QWORD PTR [rbp-0x14a8]
  21f42b:	e8 70 54 01 00       	call   2348a0 <memcpy>
  21f430:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21f437:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21f43e:	5d                   	pop    rbp
  21f43f:	c3                   	ret    
  21f440:	eb 00                	jmp    21f442 <getLineNumberInfo+0x1852>
                        return error.MissingDebugInfo;
  21f442:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21f449:	e8 42 c8 fe ff       	call   20bc90 <__zig_return_error>
  21f44e:	48 8d 3d 83 9f fe ff 	lea    rdi,[rip+0xfffffffffffe9f83]        # 2093d8 <__unnamed_126>
  21f455:	b8 30 00 00 00       	mov    eax,0x30
  21f45a:	89 c2                	mov    edx,eax
  21f45c:	48 8b 8d 60 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x11a0]
  21f463:	48 89 bd 48 eb ff ff 	mov    QWORD PTR [rbp-0x14b8],rdi
  21f46a:	48 89 cf             	mov    rdi,rcx
  21f46d:	48 8b b5 48 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x14b8]
  21f474:	e8 27 54 01 00       	call   2348a0 <memcpy>
  21f479:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21f480:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21f487:	5d                   	pop    rbp
  21f488:	c3                   	ret    
  21f489:	48 8d 85 40 f6 ff ff 	lea    rax,[rbp-0x9c0]
                        const addr = try in_stream.readInt(st.elf.endian, usize);
  21f490:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21f497:	48 8b 8d f0 f0 ff ff 	mov    rcx,QWORD PTR [rbp-0xf10]
  21f49e:	40 8a 71 12          	mov    sil,BYTE PTR [rcx+0x12]
  21f4a2:	40 0f b6 ce          	movzx  ecx,sil
  21f4a6:	48 8d bd 40 f6 ff ff 	lea    rdi,[rbp-0x9c0]
  21f4ad:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21f4b4:	48 89 85 40 eb ff ff 	mov    QWORD PTR [rbp-0x14c0],rax
  21f4bb:	e8 80 1c 00 00       	call   221140 <InStream(ReadError)_readInt.65>
  21f4c0:	66 83 bd 40 f6 ff ff 	cmp    WORD PTR [rbp-0x9c0],0x0
  21f4c7:	00 
  21f4c8:	74 63                	je     21f52d <getLineNumberInfo+0x193d>
  21f4ca:	66 8b 85 40 f6 ff ff 	mov    ax,WORD PTR [rbp-0x9c0]
  21f4d1:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21f4d8:	66 89 85 3e eb ff ff 	mov    WORD PTR [rbp-0x14c2],ax
  21f4df:	e8 ac c7 fe ff       	call   20bc90 <__zig_return_error>
  21f4e4:	b9 30 00 00 00       	mov    ecx,0x30
  21f4e9:	89 ca                	mov    edx,ecx
  21f4eb:	48 8d bd 00 f6 ff ff 	lea    rdi,[rbp-0xa00]
  21f4f2:	66 8b 85 3e eb ff ff 	mov    ax,WORD PTR [rbp-0x14c2]
  21f4f9:	66 89 85 00 f6 ff ff 	mov    WORD PTR [rbp-0xa00],ax
  21f500:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21f507:	48 89 bd 30 eb ff ff 	mov    QWORD PTR [rbp-0x14d0],rdi
  21f50e:	48 89 f7             	mov    rdi,rsi
  21f511:	48 8b b5 30 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x14d0]
  21f518:	e8 83 53 01 00       	call   2348a0 <memcpy>
  21f51d:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21f524:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21f52b:	5d                   	pop    rbp
  21f52c:	c3                   	ret    
  21f52d:	48 8b 85 48 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x9b8]
  21f534:	48 89 85 18 ef ff ff 	mov    QWORD PTR [rbp-0x10e8],rax
                        prog.address = addr;
  21f53b:	48 8b 85 18 ef ff ff 	mov    rax,QWORD PTR [rbp-0x10e8]
  21f542:	48 89 85 88 ef ff ff 	mov    QWORD PTR [rbp-0x1078],rax
                switch (sub_op) {
  21f549:	e9 36 03 00 00       	jmp    21f884 <getLineNumberInfo+0x1c94>
  21f54e:	48 8d bd e8 f5 ff ff 	lea    rdi,[rbp-0xa18]
                        const file_name = try st.readString();
  21f555:	48 8b 95 f0 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf10]
  21f55c:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21f563:	e8 38 22 00 00       	call   2217a0 <ElfStackTrace_readString>
  21f568:	66 83 bd e8 f5 ff ff 	cmp    WORD PTR [rbp-0xa18],0x0
  21f56f:	00 
  21f570:	74 63                	je     21f5d5 <getLineNumberInfo+0x19e5>
  21f572:	66 8b 85 e8 f5 ff ff 	mov    ax,WORD PTR [rbp-0xa18]
  21f579:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21f580:	66 89 85 2e eb ff ff 	mov    WORD PTR [rbp-0x14d2],ax
  21f587:	e8 04 c7 fe ff       	call   20bc90 <__zig_return_error>
  21f58c:	b9 30 00 00 00       	mov    ecx,0x30
  21f591:	89 ca                	mov    edx,ecx
  21f593:	48 8d bd a0 f5 ff ff 	lea    rdi,[rbp-0xa60]
  21f59a:	66 8b 85 2e eb ff ff 	mov    ax,WORD PTR [rbp-0x14d2]
  21f5a1:	66 89 85 a0 f5 ff ff 	mov    WORD PTR [rbp-0xa60],ax
  21f5a8:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21f5af:	48 89 bd 20 eb ff ff 	mov    QWORD PTR [rbp-0x14e0],rdi
  21f5b6:	48 89 f7             	mov    rdi,rsi
  21f5b9:	48 8b b5 20 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x14e0]
  21f5c0:	e8 db 52 01 00       	call   2348a0 <memcpy>
  21f5c5:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21f5cc:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21f5d3:	5d                   	pop    rbp
  21f5d4:	c3                   	ret    
  21f5d5:	48 8d bd 90 f5 ff ff 	lea    rdi,[rbp-0xa70]
  21f5dc:	48 8b 85 f0 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa10]
  21f5e3:	48 89 85 08 ef ff ff 	mov    QWORD PTR [rbp-0x10f8],rax
  21f5ea:	48 8b 85 f8 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa08]
  21f5f1:	48 89 85 10 ef ff ff 	mov    QWORD PTR [rbp-0x10f0],rax
                        const dir_index = try readULeb128(in_stream);
  21f5f8:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21f5ff:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21f606:	e8 65 7a ff ff       	call   217070 <readULeb128>
  21f60b:	66 83 bd 90 f5 ff ff 	cmp    WORD PTR [rbp-0xa70],0x0
  21f612:	00 
  21f613:	74 63                	je     21f678 <getLineNumberInfo+0x1a88>
  21f615:	66 8b 85 90 f5 ff ff 	mov    ax,WORD PTR [rbp-0xa70]
  21f61c:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21f623:	66 89 85 1e eb ff ff 	mov    WORD PTR [rbp-0x14e2],ax
  21f62a:	e8 61 c6 fe ff       	call   20bc90 <__zig_return_error>
  21f62f:	b9 30 00 00 00       	mov    ecx,0x30
  21f634:	89 ca                	mov    edx,ecx
  21f636:	48 8d bd 50 f5 ff ff 	lea    rdi,[rbp-0xab0]
  21f63d:	66 8b 85 1e eb ff ff 	mov    ax,WORD PTR [rbp-0x14e2]
  21f644:	66 89 85 50 f5 ff ff 	mov    WORD PTR [rbp-0xab0],ax
  21f64b:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21f652:	48 89 bd 10 eb ff ff 	mov    QWORD PTR [rbp-0x14f0],rdi
  21f659:	48 89 f7             	mov    rdi,rsi
  21f65c:	48 8b b5 10 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x14f0]
  21f663:	e8 38 52 01 00       	call   2348a0 <memcpy>
  21f668:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21f66f:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21f676:	5d                   	pop    rbp
  21f677:	c3                   	ret    
  21f678:	48 8d bd 40 f5 ff ff 	lea    rdi,[rbp-0xac0]
  21f67f:	48 8b 85 98 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa68]
  21f686:	48 89 85 00 ef ff ff 	mov    QWORD PTR [rbp-0x1100],rax
                        const mtime = try readULeb128(in_stream);
  21f68d:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21f694:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21f69b:	e8 d0 79 ff ff       	call   217070 <readULeb128>
  21f6a0:	66 83 bd 40 f5 ff ff 	cmp    WORD PTR [rbp-0xac0],0x0
  21f6a7:	00 
  21f6a8:	74 63                	je     21f70d <getLineNumberInfo+0x1b1d>
  21f6aa:	66 8b 85 40 f5 ff ff 	mov    ax,WORD PTR [rbp-0xac0]
  21f6b1:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21f6b8:	66 89 85 0e eb ff ff 	mov    WORD PTR [rbp-0x14f2],ax
  21f6bf:	e8 cc c5 fe ff       	call   20bc90 <__zig_return_error>
  21f6c4:	b9 30 00 00 00       	mov    ecx,0x30
  21f6c9:	89 ca                	mov    edx,ecx
  21f6cb:	48 8d bd 00 f5 ff ff 	lea    rdi,[rbp-0xb00]
  21f6d2:	66 8b 85 0e eb ff ff 	mov    ax,WORD PTR [rbp-0x14f2]
  21f6d9:	66 89 85 00 f5 ff ff 	mov    WORD PTR [rbp-0xb00],ax
  21f6e0:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21f6e7:	48 89 bd 00 eb ff ff 	mov    QWORD PTR [rbp-0x1500],rdi
  21f6ee:	48 89 f7             	mov    rdi,rsi
  21f6f1:	48 8b b5 00 eb ff ff 	mov    rsi,QWORD PTR [rbp-0x1500]
  21f6f8:	e8 a3 51 01 00       	call   2348a0 <memcpy>
  21f6fd:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21f704:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21f70b:	5d                   	pop    rbp
  21f70c:	c3                   	ret    
  21f70d:	48 8d bd f0 f4 ff ff 	lea    rdi,[rbp-0xb10]
  21f714:	48 8b 85 48 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xab8]
  21f71b:	48 89 85 f8 ee ff ff 	mov    QWORD PTR [rbp-0x1108],rax
                        const len_bytes = try readULeb128(in_stream);
  21f722:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21f729:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21f730:	e8 3b 79 ff ff       	call   217070 <readULeb128>
  21f735:	66 83 bd f0 f4 ff ff 	cmp    WORD PTR [rbp-0xb10],0x0
  21f73c:	00 
  21f73d:	74 63                	je     21f7a2 <getLineNumberInfo+0x1bb2>
  21f73f:	66 8b 85 f0 f4 ff ff 	mov    ax,WORD PTR [rbp-0xb10]
  21f746:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21f74d:	66 89 85 fe ea ff ff 	mov    WORD PTR [rbp-0x1502],ax
  21f754:	e8 37 c5 fe ff       	call   20bc90 <__zig_return_error>
  21f759:	b9 30 00 00 00       	mov    ecx,0x30
  21f75e:	89 ca                	mov    edx,ecx
  21f760:	48 8d bd b0 f4 ff ff 	lea    rdi,[rbp-0xb50]
  21f767:	66 8b 85 fe ea ff ff 	mov    ax,WORD PTR [rbp-0x1502]
  21f76e:	66 89 85 b0 f4 ff ff 	mov    WORD PTR [rbp-0xb50],ax
  21f775:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21f77c:	48 89 bd f0 ea ff ff 	mov    QWORD PTR [rbp-0x1510],rdi
  21f783:	48 89 f7             	mov    rdi,rsi
  21f786:	48 8b b5 f0 ea ff ff 	mov    rsi,QWORD PTR [rbp-0x1510]
  21f78d:	e8 0e 51 01 00       	call   2348a0 <memcpy>
  21f792:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21f799:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21f7a0:	5d                   	pop    rbp
  21f7a1:	c3                   	ret    
  21f7a2:	48 8d b5 f8 ef ff ff 	lea    rsi,[rbp-0x1008]
  21f7a9:	48 8d 95 88 f4 ff ff 	lea    rdx,[rbp-0xb78]
  21f7b0:	48 8b 85 f8 f4 ff ff 	mov    rax,QWORD PTR [rbp-0xb08]
  21f7b7:	48 89 85 f0 ee ff ff 	mov    QWORD PTR [rbp-0x1110],rax
                            .dir_index = dir_index,
  21f7be:	48 8b 85 00 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1100]
                            .mtime = mtime,
  21f7c5:	48 8b 8d f8 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x1108]
                            .len_bytes = len_bytes,
  21f7cc:	48 8b bd f0 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x1110]
                        try file_entries.append(FileEntry{
  21f7d3:	4c 8b 85 08 ef ff ff 	mov    r8,QWORD PTR [rbp-0x10f8]
  21f7da:	4c 89 85 88 f4 ff ff 	mov    QWORD PTR [rbp-0xb78],r8
  21f7e1:	4c 8b 85 10 ef ff ff 	mov    r8,QWORD PTR [rbp-0x10f0]
  21f7e8:	4c 89 85 90 f4 ff ff 	mov    QWORD PTR [rbp-0xb70],r8
  21f7ef:	48 89 85 98 f4 ff ff 	mov    QWORD PTR [rbp-0xb68],rax
  21f7f6:	48 89 8d a0 f4 ff ff 	mov    QWORD PTR [rbp-0xb60],rcx
  21f7fd:	48 89 bd a8 f4 ff ff 	mov    QWORD PTR [rbp-0xb58],rdi
  21f804:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21f80b:	e8 70 2f 00 00       	call   222780 <AlignedArrayList(FileEntry,8)_append>
  21f810:	66 89 85 86 f4 ff ff 	mov    WORD PTR [rbp-0xb7a],ax
  21f817:	66 83 bd 86 f4 ff ff 	cmp    WORD PTR [rbp-0xb7a],0x0
  21f81e:	00 
  21f81f:	74 63                	je     21f884 <getLineNumberInfo+0x1c94>
  21f821:	66 8b 85 86 f4 ff ff 	mov    ax,WORD PTR [rbp-0xb7a]
  21f828:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21f82f:	66 89 85 ee ea ff ff 	mov    WORD PTR [rbp-0x1512],ax
  21f836:	e8 55 c4 fe ff       	call   20bc90 <__zig_return_error>
  21f83b:	b9 30 00 00 00       	mov    ecx,0x30
  21f840:	89 ca                	mov    edx,ecx
  21f842:	48 8d bd 50 f4 ff ff 	lea    rdi,[rbp-0xbb0]
  21f849:	66 8b 85 ee ea ff ff 	mov    ax,WORD PTR [rbp-0x1512]
  21f850:	66 89 85 50 f4 ff ff 	mov    WORD PTR [rbp-0xbb0],ax
  21f857:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21f85e:	48 89 bd e0 ea ff ff 	mov    QWORD PTR [rbp-0x1520],rdi
  21f865:	48 89 f7             	mov    rdi,rsi
  21f868:	48 8b b5 e0 ea ff ff 	mov    rsi,QWORD PTR [rbp-0x1520]
  21f86f:	e8 2c 50 01 00       	call   2348a0 <memcpy>
  21f874:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21f87b:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21f882:	5d                   	pop    rbp
  21f883:	c3                   	ret    
            if (opcode == DW.LNS_extended_op) {
  21f884:	e9 4d 08 00 00       	jmp    2200d6 <getLineNumberInfo+0x24e6>
            } else if (opcode >= opcode_base) {
  21f889:	8a 85 5f ef ff ff    	mov    al,BYTE PTR [rbp-0x10a1]
  21f88f:	3a 85 63 f0 ff ff    	cmp    al,BYTE PTR [rbp-0xf9d]
  21f895:	0f 82 68 01 00 00    	jb     21fa03 <getLineNumberInfo+0x1e13>
                const adjusted_opcode = opcode - opcode_base;
  21f89b:	8a 85 5f ef ff ff    	mov    al,BYTE PTR [rbp-0x10a1]
  21f8a1:	2a 85 63 f0 ff ff    	sub    al,BYTE PTR [rbp-0xf9d]
  21f8a7:	0f 92 c1             	setb   cl
  21f8aa:	f6 c1 01             	test   cl,0x1
  21f8ad:	88 85 df ea ff ff    	mov    BYTE PTR [rbp-0x1521],al
  21f8b3:	0f 85 dc 0a 00 00    	jne    220395 <getLineNumberInfo+0x27a5>
  21f8b9:	e9 e7 0a 00 00       	jmp    2203a5 <getLineNumberInfo+0x27b5>
                if (try prog.checkLineMatch()) |info| return info;
  21f8be:	66 8b 85 18 f4 ff ff 	mov    ax,WORD PTR [rbp-0xbe8]
  21f8c5:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21f8cc:	66 89 85 dc ea ff ff 	mov    WORD PTR [rbp-0x1524],ax
  21f8d3:	e8 b8 c3 fe ff       	call   20bc90 <__zig_return_error>
  21f8d8:	b9 30 00 00 00       	mov    ecx,0x30
  21f8dd:	89 ca                	mov    edx,ecx
  21f8df:	48 8d bd b0 f3 ff ff 	lea    rdi,[rbp-0xc50]
  21f8e6:	66 8b 85 dc ea ff ff 	mov    ax,WORD PTR [rbp-0x1524]
  21f8ed:	66 89 85 b0 f3 ff ff 	mov    WORD PTR [rbp-0xc50],ax
  21f8f4:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21f8fb:	48 89 bd d0 ea ff ff 	mov    QWORD PTR [rbp-0x1530],rdi
  21f902:	48 89 f7             	mov    rdi,rsi
  21f905:	48 8b b5 d0 ea ff ff 	mov    rsi,QWORD PTR [rbp-0x1530]
  21f90c:	e8 8f 4f 01 00       	call   2348a0 <memcpy>
  21f911:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21f918:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21f91f:	5d                   	pop    rbp
  21f920:	c3                   	ret    
  21f921:	48 8d 85 18 f4 ff ff 	lea    rax,[rbp-0xbe8]
  21f928:	48 83 c0 08          	add    rax,0x8
  21f92c:	f6 85 48 f4 ff ff 01 	test   BYTE PTR [rbp-0xbb8],0x1
  21f933:	48 89 85 c8 ea ff ff 	mov    QWORD PTR [rbp-0x1538],rax
  21f93a:	75 05                	jne    21f941 <getLineNumberInfo+0x1d51>
  21f93c:	e9 b4 00 00 00       	jmp    21f9f5 <getLineNumberInfo+0x1e05>
  21f941:	b8 30 00 00 00       	mov    eax,0x30
  21f946:	89 c2                	mov    edx,eax
  21f948:	48 8d 8d 80 f3 ff ff 	lea    rcx,[rbp-0xc80]
  21f94f:	b8 28 00 00 00       	mov    eax,0x28
  21f954:	89 c6                	mov    esi,eax
  21f956:	48 8d bd c0 ee ff ff 	lea    rdi,[rbp-0x1140]
  21f95d:	4c 8b 85 c8 ea ff ff 	mov    r8,QWORD PTR [rbp-0x1538]
  21f964:	49 89 f9             	mov    r9,rdi
  21f967:	48 89 bd c0 ea ff ff 	mov    QWORD PTR [rbp-0x1540],rdi
  21f96e:	4c 89 cf             	mov    rdi,r9
  21f971:	48 89 b5 b8 ea ff ff 	mov    QWORD PTR [rbp-0x1548],rsi
  21f978:	4c 89 c6             	mov    rsi,r8
  21f97b:	4c 8b 85 b8 ea ff ff 	mov    r8,QWORD PTR [rbp-0x1548]
  21f982:	48 89 95 b0 ea ff ff 	mov    QWORD PTR [rbp-0x1550],rdx
  21f989:	4c 89 c2             	mov    rdx,r8
  21f98c:	48 89 8d a8 ea ff ff 	mov    QWORD PTR [rbp-0x1558],rcx
  21f993:	e8 08 4f 01 00       	call   2348a0 <memcpy>
  21f998:	66 c7 85 80 f3 ff ff 	mov    WORD PTR [rbp-0xc80],0x0
  21f99f:	00 00 
  21f9a1:	48 8b 8d a8 ea ff ff 	mov    rcx,QWORD PTR [rbp-0x1558]
  21f9a8:	48 83 c1 08          	add    rcx,0x8
  21f9ac:	48 8b 95 c0 ea ff ff 	mov    rdx,QWORD PTR [rbp-0x1540]
  21f9b3:	48 89 cf             	mov    rdi,rcx
  21f9b6:	48 89 d6             	mov    rsi,rdx
  21f9b9:	48 8b 95 b8 ea ff ff 	mov    rdx,QWORD PTR [rbp-0x1548]
  21f9c0:	e8 db 4e 01 00       	call   2348a0 <memcpy>
  21f9c5:	48 8b 8d a8 ea ff ff 	mov    rcx,QWORD PTR [rbp-0x1558]
  21f9cc:	48 8b 95 60 ee ff ff 	mov    rdx,QWORD PTR [rbp-0x11a0]
  21f9d3:	48 89 d7             	mov    rdi,rdx
  21f9d6:	48 89 ce             	mov    rsi,rcx
  21f9d9:	48 8b 95 b0 ea ff ff 	mov    rdx,QWORD PTR [rbp-0x1550]
  21f9e0:	e8 bb 4e 01 00       	call   2348a0 <memcpy>
  21f9e5:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21f9ec:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21f9f3:	5d                   	pop    rbp
  21f9f4:	c3                   	ret    
  21f9f5:	eb 00                	jmp    21f9f7 <getLineNumberInfo+0x1e07>
                prog.basic_block = false;
  21f9f7:	c6 85 a9 ef ff ff 00 	mov    BYTE PTR [rbp-0x1057],0x0
            } else if (opcode >= opcode_base) {
  21f9fe:	e9 d1 06 00 00       	jmp    2200d4 <getLineNumberInfo+0x24e4>
                switch (opcode) {
  21fa03:	8a 85 5f ef ff ff    	mov    al,BYTE PTR [rbp-0x10a1]
  21fa09:	04 ff                	add    al,0xff
  21fa0b:	0f b6 c8             	movzx  ecx,al
  21fa0e:	89 ca                	mov    edx,ecx
  21fa10:	2c 09                	sub    al,0x9
  21fa12:	48 89 95 a0 ea ff ff 	mov    QWORD PTR [rbp-0x1560],rdx
  21fa19:	88 85 9f ea ff ff    	mov    BYTE PTR [rbp-0x1561],al
  21fa1f:	77 17                	ja     21fa38 <getLineNumberInfo+0x1e48>
  21fa21:	48 8d 05 7c 13 fe ff 	lea    rax,[rip+0xfffffffffffe137c]        # 200da4 <__unnamed_181+0xec>
  21fa28:	48 8b 8d a0 ea ff ff 	mov    rcx,QWORD PTR [rbp-0x1560]
  21fa2f:	48 63 14 88          	movsxd rdx,DWORD PTR [rax+rcx*4]
  21fa33:	48 01 c2             	add    rdx,rax
  21fa36:	ff e2                	jmp    rdx
                        if (opcode - 1 >= standard_opcode_lengths.len) return error.InvalidDebugInfo;
  21fa38:	8a 85 5f ef ff ff    	mov    al,BYTE PTR [rbp-0x10a1]
  21fa3e:	2c 01                	sub    al,0x1
  21fa40:	0f 92 c1             	setb   cl
  21fa43:	f6 c1 01             	test   cl,0x1
  21fa46:	88 85 9e ea ff ff    	mov    BYTE PTR [rbp-0x1562],al
  21fa4c:	0f 85 5f 0b 00 00    	jne    2205b1 <getLineNumberInfo+0x29c1>
  21fa52:	e9 6a 0b 00 00       	jmp    2205c1 <getLineNumberInfo+0x29d1>
  21fa57:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21fa5e:	e8 2d c2 fe ff       	call   20bc90 <__zig_return_error>
  21fa63:	48 8d 3d 9e 99 fe ff 	lea    rdi,[rip+0xfffffffffffe999e]        # 209408 <__unnamed_127>
  21fa6a:	b8 30 00 00 00       	mov    eax,0x30
  21fa6f:	89 c2                	mov    edx,eax
  21fa71:	48 8b 8d 60 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x11a0]
  21fa78:	48 89 bd 90 ea ff ff 	mov    QWORD PTR [rbp-0x1570],rdi
  21fa7f:	48 89 cf             	mov    rdi,rcx
  21fa82:	48 8b b5 90 ea ff ff 	mov    rsi,QWORD PTR [rbp-0x1570]
  21fa89:	e8 12 4e 01 00       	call   2348a0 <memcpy>
  21fa8e:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21fa95:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21fa9c:	5d                   	pop    rbp
  21fa9d:	c3                   	ret    
  21fa9e:	eb 00                	jmp    21faa0 <getLineNumberInfo+0x1eb0>
                        const len_bytes = standard_opcode_lengths[opcode - 1];
  21faa0:	8a 85 5f ef ff ff    	mov    al,BYTE PTR [rbp-0x10a1]
  21faa6:	2c 01                	sub    al,0x1
  21faa8:	0f 92 c1             	setb   cl
  21faab:	f6 c1 01             	test   cl,0x1
  21faae:	88 85 8f ea ff ff    	mov    BYTE PTR [rbp-0x1571],al
  21fab4:	0f 85 27 0b 00 00    	jne    2205e1 <getLineNumberInfo+0x29f1>
  21faba:	e9 32 0b 00 00       	jmp    2205f1 <getLineNumberInfo+0x2a01>
                        try in_file.seekForward(len_bytes);
  21fabf:	66 8b 85 7e f3 ff ff 	mov    ax,WORD PTR [rbp-0xc82]
  21fac6:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21facd:	66 89 85 8c ea ff ff 	mov    WORD PTR [rbp-0x1574],ax
  21fad4:	e8 b7 c1 fe ff       	call   20bc90 <__zig_return_error>
  21fad9:	b9 30 00 00 00       	mov    ecx,0x30
  21fade:	89 ca                	mov    edx,ecx
  21fae0:	48 8d bd 48 f3 ff ff 	lea    rdi,[rbp-0xcb8]
  21fae7:	66 8b 85 8c ea ff ff 	mov    ax,WORD PTR [rbp-0x1574]
  21faee:	66 89 85 48 f3 ff ff 	mov    WORD PTR [rbp-0xcb8],ax
  21faf5:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21fafc:	48 89 bd 80 ea ff ff 	mov    QWORD PTR [rbp-0x1580],rdi
  21fb03:	48 89 f7             	mov    rdi,rsi
  21fb06:	48 8b b5 80 ea ff ff 	mov    rsi,QWORD PTR [rbp-0x1580]
  21fb0d:	e8 8e 4d 01 00       	call   2348a0 <memcpy>
  21fb12:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21fb19:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21fb20:	5d                   	pop    rbp
  21fb21:	c3                   	ret    
                switch (opcode) {
  21fb22:	e9 ab 05 00 00       	jmp    2200d2 <getLineNumberInfo+0x24e2>
  21fb27:	48 8d bd 10 f3 ff ff 	lea    rdi,[rbp-0xcf0]
  21fb2e:	48 8d 95 88 ef ff ff 	lea    rdx,[rbp-0x1078]
                        if (try prog.checkLineMatch()) |info| return info;
  21fb35:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21fb3c:	e8 6f 2d 00 00       	call   2228b0 <LineNumberProgram_checkLineMatch>
  21fb41:	66 83 bd 10 f3 ff ff 	cmp    WORD PTR [rbp-0xcf0],0x0
  21fb48:	00 
  21fb49:	74 63                	je     21fbae <getLineNumberInfo+0x1fbe>
  21fb4b:	66 8b 85 10 f3 ff ff 	mov    ax,WORD PTR [rbp-0xcf0]
  21fb52:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21fb59:	66 89 85 7e ea ff ff 	mov    WORD PTR [rbp-0x1582],ax
  21fb60:	e8 2b c1 fe ff       	call   20bc90 <__zig_return_error>
  21fb65:	b9 30 00 00 00       	mov    ecx,0x30
  21fb6a:	89 ca                	mov    edx,ecx
  21fb6c:	48 8d bd a8 f2 ff ff 	lea    rdi,[rbp-0xd58]
  21fb73:	66 8b 85 7e ea ff ff 	mov    ax,WORD PTR [rbp-0x1582]
  21fb7a:	66 89 85 a8 f2 ff ff 	mov    WORD PTR [rbp-0xd58],ax
  21fb81:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21fb88:	48 89 bd 70 ea ff ff 	mov    QWORD PTR [rbp-0x1590],rdi
  21fb8f:	48 89 f7             	mov    rdi,rsi
  21fb92:	48 8b b5 70 ea ff ff 	mov    rsi,QWORD PTR [rbp-0x1590]
  21fb99:	e8 02 4d 01 00       	call   2348a0 <memcpy>
  21fb9e:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21fba5:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21fbac:	5d                   	pop    rbp
  21fbad:	c3                   	ret    
  21fbae:	48 8d 85 10 f3 ff ff 	lea    rax,[rbp-0xcf0]
  21fbb5:	48 83 c0 08          	add    rax,0x8
  21fbb9:	f6 85 40 f3 ff ff 01 	test   BYTE PTR [rbp-0xcc0],0x1
  21fbc0:	48 89 85 68 ea ff ff 	mov    QWORD PTR [rbp-0x1598],rax
  21fbc7:	75 05                	jne    21fbce <getLineNumberInfo+0x1fde>
  21fbc9:	e9 b4 00 00 00       	jmp    21fc82 <getLineNumberInfo+0x2092>
  21fbce:	b8 30 00 00 00       	mov    eax,0x30
  21fbd3:	89 c2                	mov    edx,eax
  21fbd5:	48 8d 8d 78 f2 ff ff 	lea    rcx,[rbp-0xd88]
  21fbdc:	b8 28 00 00 00       	mov    eax,0x28
  21fbe1:	89 c6                	mov    esi,eax
  21fbe3:	48 8d bd 90 ee ff ff 	lea    rdi,[rbp-0x1170]
  21fbea:	4c 8b 85 68 ea ff ff 	mov    r8,QWORD PTR [rbp-0x1598]
  21fbf1:	49 89 f9             	mov    r9,rdi
  21fbf4:	48 89 bd 60 ea ff ff 	mov    QWORD PTR [rbp-0x15a0],rdi
  21fbfb:	4c 89 cf             	mov    rdi,r9
  21fbfe:	48 89 b5 58 ea ff ff 	mov    QWORD PTR [rbp-0x15a8],rsi
  21fc05:	4c 89 c6             	mov    rsi,r8
  21fc08:	4c 8b 85 58 ea ff ff 	mov    r8,QWORD PTR [rbp-0x15a8]
  21fc0f:	48 89 95 50 ea ff ff 	mov    QWORD PTR [rbp-0x15b0],rdx
  21fc16:	4c 89 c2             	mov    rdx,r8
  21fc19:	48 89 8d 48 ea ff ff 	mov    QWORD PTR [rbp-0x15b8],rcx
  21fc20:	e8 7b 4c 01 00       	call   2348a0 <memcpy>
  21fc25:	66 c7 85 78 f2 ff ff 	mov    WORD PTR [rbp-0xd88],0x0
  21fc2c:	00 00 
  21fc2e:	48 8b 8d 48 ea ff ff 	mov    rcx,QWORD PTR [rbp-0x15b8]
  21fc35:	48 83 c1 08          	add    rcx,0x8
  21fc39:	48 8b 95 60 ea ff ff 	mov    rdx,QWORD PTR [rbp-0x15a0]
  21fc40:	48 89 cf             	mov    rdi,rcx
  21fc43:	48 89 d6             	mov    rsi,rdx
  21fc46:	48 8b 95 58 ea ff ff 	mov    rdx,QWORD PTR [rbp-0x15a8]
  21fc4d:	e8 4e 4c 01 00       	call   2348a0 <memcpy>
  21fc52:	48 8b 8d 48 ea ff ff 	mov    rcx,QWORD PTR [rbp-0x15b8]
  21fc59:	48 8b 95 60 ee ff ff 	mov    rdx,QWORD PTR [rbp-0x11a0]
  21fc60:	48 89 d7             	mov    rdi,rdx
  21fc63:	48 89 ce             	mov    rsi,rcx
  21fc66:	48 8b 95 50 ea ff ff 	mov    rdx,QWORD PTR [rbp-0x15b0]
  21fc6d:	e8 2e 4c 01 00       	call   2348a0 <memcpy>
  21fc72:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21fc79:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21fc80:	5d                   	pop    rbp
  21fc81:	c3                   	ret    
  21fc82:	eb 00                	jmp    21fc84 <getLineNumberInfo+0x2094>
                        prog.basic_block = false;
  21fc84:	c6 85 a9 ef ff ff 00 	mov    BYTE PTR [rbp-0x1057],0x0
                switch (opcode) {
  21fc8b:	e9 42 04 00 00       	jmp    2200d2 <getLineNumberInfo+0x24e2>
  21fc90:	48 8d bd 68 f2 ff ff 	lea    rdi,[rbp-0xd98]
                        const arg = try readULeb128(in_stream);
  21fc97:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21fc9e:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21fca5:	e8 c6 73 ff ff       	call   217070 <readULeb128>
  21fcaa:	66 83 bd 68 f2 ff ff 	cmp    WORD PTR [rbp-0xd98],0x0
  21fcb1:	00 
  21fcb2:	74 63                	je     21fd17 <getLineNumberInfo+0x2127>
  21fcb4:	66 8b 85 68 f2 ff ff 	mov    ax,WORD PTR [rbp-0xd98]
  21fcbb:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21fcc2:	66 89 85 46 ea ff ff 	mov    WORD PTR [rbp-0x15ba],ax
  21fcc9:	e8 c2 bf fe ff       	call   20bc90 <__zig_return_error>
  21fcce:	b9 30 00 00 00       	mov    ecx,0x30
  21fcd3:	89 ca                	mov    edx,ecx
  21fcd5:	48 8d bd 28 f2 ff ff 	lea    rdi,[rbp-0xdd8]
  21fcdc:	66 8b 85 46 ea ff ff 	mov    ax,WORD PTR [rbp-0x15ba]
  21fce3:	66 89 85 28 f2 ff ff 	mov    WORD PTR [rbp-0xdd8],ax
  21fcea:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21fcf1:	48 89 bd 38 ea ff ff 	mov    QWORD PTR [rbp-0x15c8],rdi
  21fcf8:	48 89 f7             	mov    rdi,rsi
  21fcfb:	48 8b b5 38 ea ff ff 	mov    rsi,QWORD PTR [rbp-0x15c8]
  21fd02:	e8 99 4b 01 00       	call   2348a0 <memcpy>
  21fd07:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21fd0e:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21fd15:	5d                   	pop    rbp
  21fd16:	c3                   	ret    
  21fd17:	48 8d 85 88 ef ff ff 	lea    rax,[rbp-0x1078]
  21fd1e:	48 8b 8d 70 f2 ff ff 	mov    rcx,QWORD PTR [rbp-0xd90]
  21fd25:	48 89 8d 88 ee ff ff 	mov    QWORD PTR [rbp-0x1178],rcx
                        prog.address += arg * minimum_instruction_length;
  21fd2c:	48 8b 8d 88 ef ff ff 	mov    rcx,QWORD PTR [rbp-0x1078]
  21fd33:	48 8b 95 88 ee ff ff 	mov    rdx,QWORD PTR [rbp-0x1178]
  21fd3a:	0f b6 b5 67 f0 ff ff 	movzx  esi,BYTE PTR [rbp-0xf99]
  21fd41:	89 f7                	mov    edi,esi
  21fd43:	48 89 85 30 ea ff ff 	mov    QWORD PTR [rbp-0x15d0],rax
  21fd4a:	48 89 d0             	mov    rax,rdx
  21fd4d:	48 f7 e7             	mul    rdi
  21fd50:	41 0f 90 c0          	seto   r8b
  21fd54:	48 89 8d 28 ea ff ff 	mov    QWORD PTR [rbp-0x15d8],rcx
  21fd5b:	48 89 85 20 ea ff ff 	mov    QWORD PTR [rbp-0x15e0],rax
  21fd62:	44 88 85 1f ea ff ff 	mov    BYTE PTR [rbp-0x15e1],r8b
  21fd69:	0f 80 fa 08 00 00    	jo     220669 <getLineNumberInfo+0x2a79>
  21fd6f:	e9 05 09 00 00       	jmp    220679 <getLineNumberInfo+0x2a89>
  21fd74:	48 8d bd 18 f2 ff ff 	lea    rdi,[rbp-0xde8]
                        const arg = try readILeb128(in_stream);
  21fd7b:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21fd82:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21fd89:	e8 12 31 00 00       	call   222ea0 <readILeb128>
  21fd8e:	66 83 bd 18 f2 ff ff 	cmp    WORD PTR [rbp-0xde8],0x0
  21fd95:	00 
  21fd96:	74 63                	je     21fdfb <getLineNumberInfo+0x220b>
  21fd98:	66 8b 85 18 f2 ff ff 	mov    ax,WORD PTR [rbp-0xde8]
  21fd9f:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21fda6:	66 89 85 1c ea ff ff 	mov    WORD PTR [rbp-0x15e4],ax
  21fdad:	e8 de be fe ff       	call   20bc90 <__zig_return_error>
  21fdb2:	b9 30 00 00 00       	mov    ecx,0x30
  21fdb7:	89 ca                	mov    edx,ecx
  21fdb9:	48 8d bd d8 f1 ff ff 	lea    rdi,[rbp-0xe28]
  21fdc0:	66 8b 85 1c ea ff ff 	mov    ax,WORD PTR [rbp-0x15e4]
  21fdc7:	66 89 85 d8 f1 ff ff 	mov    WORD PTR [rbp-0xe28],ax
  21fdce:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21fdd5:	48 89 bd 10 ea ff ff 	mov    QWORD PTR [rbp-0x15f0],rdi
  21fddc:	48 89 f7             	mov    rdi,rsi
  21fddf:	48 8b b5 10 ea ff ff 	mov    rsi,QWORD PTR [rbp-0x15f0]
  21fde6:	e8 b5 4a 01 00       	call   2348a0 <memcpy>
  21fdeb:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21fdf2:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21fdf9:	5d                   	pop    rbp
  21fdfa:	c3                   	ret    
  21fdfb:	48 8d 85 88 ef ff ff 	lea    rax,[rbp-0x1078]
  21fe02:	48 8b 8d 20 f2 ff ff 	mov    rcx,QWORD PTR [rbp-0xde0]
  21fe09:	48 89 8d 80 ee ff ff 	mov    QWORD PTR [rbp-0x1180],rcx
                        prog.line += arg;
  21fe10:	48 83 c0 10          	add    rax,0x10
  21fe14:	48 8b 8d 98 ef ff ff 	mov    rcx,QWORD PTR [rbp-0x1068]
  21fe1b:	48 03 8d 80 ee ff ff 	add    rcx,QWORD PTR [rbp-0x1180]
  21fe22:	0f 90 c2             	seto   dl
  21fe25:	48 89 85 08 ea ff ff 	mov    QWORD PTR [rbp-0x15f8],rax
  21fe2c:	48 89 8d 00 ea ff ff 	mov    QWORD PTR [rbp-0x1600],rcx
  21fe33:	88 95 ff e9 ff ff    	mov    BYTE PTR [rbp-0x1601],dl
  21fe39:	0f 80 85 08 00 00    	jo     2206c4 <getLineNumberInfo+0x2ad4>
  21fe3f:	e9 90 08 00 00       	jmp    2206d4 <getLineNumberInfo+0x2ae4>
  21fe44:	48 8d bd c8 f1 ff ff 	lea    rdi,[rbp-0xe38]
                        const arg = try readULeb128(in_stream);
  21fe4b:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21fe52:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21fe59:	e8 12 72 ff ff       	call   217070 <readULeb128>
  21fe5e:	66 83 bd c8 f1 ff ff 	cmp    WORD PTR [rbp-0xe38],0x0
  21fe65:	00 
  21fe66:	74 63                	je     21fecb <getLineNumberInfo+0x22db>
  21fe68:	66 8b 85 c8 f1 ff ff 	mov    ax,WORD PTR [rbp-0xe38]
  21fe6f:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21fe76:	66 89 85 fc e9 ff ff 	mov    WORD PTR [rbp-0x1604],ax
  21fe7d:	e8 0e be fe ff       	call   20bc90 <__zig_return_error>
  21fe82:	b9 30 00 00 00       	mov    ecx,0x30
  21fe87:	89 ca                	mov    edx,ecx
  21fe89:	48 8d bd 88 f1 ff ff 	lea    rdi,[rbp-0xe78]
  21fe90:	66 8b 85 fc e9 ff ff 	mov    ax,WORD PTR [rbp-0x1604]
  21fe97:	66 89 85 88 f1 ff ff 	mov    WORD PTR [rbp-0xe78],ax
  21fe9e:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21fea5:	48 89 bd f0 e9 ff ff 	mov    QWORD PTR [rbp-0x1610],rdi
  21feac:	48 89 f7             	mov    rdi,rsi
  21feaf:	48 8b b5 f0 e9 ff ff 	mov    rsi,QWORD PTR [rbp-0x1610]
  21feb6:	e8 e5 49 01 00       	call   2348a0 <memcpy>
  21febb:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21fec2:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21fec9:	5d                   	pop    rbp
  21feca:	c3                   	ret    
  21fecb:	48 8b 85 d0 f1 ff ff 	mov    rax,QWORD PTR [rbp-0xe30]
  21fed2:	48 89 85 78 ee ff ff 	mov    QWORD PTR [rbp-0x1188],rax
                        prog.file = arg;
  21fed9:	48 8b 85 78 ee ff ff 	mov    rax,QWORD PTR [rbp-0x1188]
  21fee0:	48 89 85 90 ef ff ff 	mov    QWORD PTR [rbp-0x1070],rax
                switch (opcode) {
  21fee7:	e9 e6 01 00 00       	jmp    2200d2 <getLineNumberInfo+0x24e2>
  21feec:	48 8d bd 78 f1 ff ff 	lea    rdi,[rbp-0xe88]
                        const arg = try readULeb128(in_stream);
  21fef3:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21fefa:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  21ff01:	e8 6a 71 ff ff       	call   217070 <readULeb128>
  21ff06:	66 83 bd 78 f1 ff ff 	cmp    WORD PTR [rbp-0xe88],0x0
  21ff0d:	00 
  21ff0e:	74 63                	je     21ff73 <getLineNumberInfo+0x2383>
  21ff10:	66 8b 85 78 f1 ff ff 	mov    ax,WORD PTR [rbp-0xe88]
  21ff17:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  21ff1e:	66 89 85 ee e9 ff ff 	mov    WORD PTR [rbp-0x1612],ax
  21ff25:	e8 66 bd fe ff       	call   20bc90 <__zig_return_error>
  21ff2a:	b9 30 00 00 00       	mov    ecx,0x30
  21ff2f:	89 ca                	mov    edx,ecx
  21ff31:	48 8d bd 38 f1 ff ff 	lea    rdi,[rbp-0xec8]
  21ff38:	66 8b 85 ee e9 ff ff 	mov    ax,WORD PTR [rbp-0x1612]
  21ff3f:	66 89 85 38 f1 ff ff 	mov    WORD PTR [rbp-0xec8],ax
  21ff46:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  21ff4d:	48 89 bd e0 e9 ff ff 	mov    QWORD PTR [rbp-0x1620],rdi
  21ff54:	48 89 f7             	mov    rdi,rsi
  21ff57:	48 8b b5 e0 e9 ff ff 	mov    rsi,QWORD PTR [rbp-0x1620]
  21ff5e:	e8 3d 49 01 00       	call   2348a0 <memcpy>
  21ff63:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  21ff6a:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  21ff71:	5d                   	pop    rbp
  21ff72:	c3                   	ret    
  21ff73:	48 8b 85 80 f1 ff ff 	mov    rax,QWORD PTR [rbp-0xe80]
  21ff7a:	48 89 85 70 ee ff ff 	mov    QWORD PTR [rbp-0x1190],rax
                        prog.column = arg;
  21ff81:	48 8b 85 70 ee ff ff 	mov    rax,QWORD PTR [rbp-0x1190]
  21ff88:	48 89 85 a0 ef ff ff 	mov    QWORD PTR [rbp-0x1060],rax
                switch (opcode) {
  21ff8f:	e9 3e 01 00 00       	jmp    2200d2 <getLineNumberInfo+0x24e2>
                        prog.is_stmt = !prog.is_stmt;
  21ff94:	8a 85 a8 ef ff ff    	mov    al,BYTE PTR [rbp-0x1058]
  21ff9a:	34 01                	xor    al,0x1
  21ff9c:	24 01                	and    al,0x1
  21ff9e:	88 85 a8 ef ff ff    	mov    BYTE PTR [rbp-0x1058],al
                switch (opcode) {
  21ffa4:	e9 29 01 00 00       	jmp    2200d2 <getLineNumberInfo+0x24e2>
                        prog.basic_block = true;
  21ffa9:	c6 85 a9 ef ff ff 01 	mov    BYTE PTR [rbp-0x1057],0x1
                switch (opcode) {
  21ffb0:	e9 1d 01 00 00       	jmp    2200d2 <getLineNumberInfo+0x24e2>
  21ffb5:	b0 ff                	mov    al,0xff
                        const inc_addr = minimum_instruction_length * ((255 - opcode_base) / line_range);
  21ffb7:	8a 8d 67 f0 ff ff    	mov    cl,BYTE PTR [rbp-0xf99]
  21ffbd:	2a 85 63 f0 ff ff    	sub    al,BYTE PTR [rbp-0xf9d]
  21ffc3:	0f 92 c2             	setb   dl
  21ffc6:	f6 c2 01             	test   dl,0x1
  21ffc9:	88 8d df e9 ff ff    	mov    BYTE PTR [rbp-0x1621],cl
  21ffcf:	88 85 de e9 ff ff    	mov    BYTE PTR [rbp-0x1622],al
  21ffd5:	0f 85 0f 07 00 00    	jne    2206ea <getLineNumberInfo+0x2afa>
  21ffdb:	e9 1a 07 00 00       	jmp    2206fa <getLineNumberInfo+0x2b0a>
  21ffe0:	48 8d 85 30 f1 ff ff 	lea    rax,[rbp-0xed0]
                        const arg = try in_stream.readInt(st.elf.endian, u16);
  21ffe7:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  21ffee:	48 8b 8d f0 f0 ff ff 	mov    rcx,QWORD PTR [rbp-0xf10]
  21fff5:	40 8a 71 12          	mov    sil,BYTE PTR [rcx+0x12]
  21fff9:	40 0f b6 ce          	movzx  ecx,sil
  21fffd:	48 8d bd 30 f1 ff ff 	lea    rdi,[rbp-0xed0]
  220004:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  22000b:	48 89 85 d0 e9 ff ff 	mov    QWORD PTR [rbp-0x1630],rax
  220012:	e8 b9 3c ff ff       	call   213cd0 <InStream(ReadError)_readInt>
  220017:	66 83 bd 30 f1 ff ff 	cmp    WORD PTR [rbp-0xed0],0x0
  22001e:	00 
  22001f:	74 63                	je     220084 <getLineNumberInfo+0x2494>
  220021:	66 8b 85 30 f1 ff ff 	mov    ax,WORD PTR [rbp-0xed0]
  220028:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  22002f:	66 89 85 ce e9 ff ff 	mov    WORD PTR [rbp-0x1632],ax
  220036:	e8 55 bc fe ff       	call   20bc90 <__zig_return_error>
  22003b:	b9 30 00 00 00       	mov    ecx,0x30
  220040:	89 ca                	mov    edx,ecx
  220042:	48 8d bd f8 f0 ff ff 	lea    rdi,[rbp-0xf08]
  220049:	66 8b 85 ce e9 ff ff 	mov    ax,WORD PTR [rbp-0x1632]
  220050:	66 89 85 f8 f0 ff ff 	mov    WORD PTR [rbp-0xf08],ax
  220057:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
  22005e:	48 89 bd c0 e9 ff ff 	mov    QWORD PTR [rbp-0x1640],rdi
  220065:	48 89 f7             	mov    rdi,rsi
  220068:	48 8b b5 c0 e9 ff ff 	mov    rsi,QWORD PTR [rbp-0x1640]
  22006f:	e8 2c 48 01 00       	call   2348a0 <memcpy>
  220074:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  22007b:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  220082:	5d                   	pop    rbp
  220083:	c3                   	ret    
  220084:	48 8d 85 88 ef ff ff 	lea    rax,[rbp-0x1078]
  22008b:	66 8b 8d 32 f1 ff ff 	mov    cx,WORD PTR [rbp-0xece]
  220092:	66 89 8d 6c ee ff ff 	mov    WORD PTR [rbp-0x1194],cx
                        prog.address += arg;
  220099:	48 8b 95 88 ef ff ff 	mov    rdx,QWORD PTR [rbp-0x1078]
  2200a0:	0f b7 b5 6c ee ff ff 	movzx  esi,WORD PTR [rbp-0x1194]
  2200a7:	89 f7                	mov    edi,esi
  2200a9:	48 01 fa             	add    rdx,rdi
  2200ac:	41 0f 92 c0          	setb   r8b
  2200b0:	48 89 85 b8 e9 ff ff 	mov    QWORD PTR [rbp-0x1648],rax
  2200b7:	48 89 95 b0 e9 ff ff 	mov    QWORD PTR [rbp-0x1650],rdx
  2200be:	44 88 85 af e9 ff ff 	mov    BYTE PTR [rbp-0x1651],r8b
  2200c5:	0f 82 04 07 00 00    	jb     2207cf <getLineNumberInfo+0x2bdf>
  2200cb:	e9 0f 07 00 00       	jmp    2207df <getLineNumberInfo+0x2bef>
                switch (opcode) {
  2200d0:	eb 00                	jmp    2200d2 <getLineNumberInfo+0x24e2>
            } else if (opcode >= opcode_base) {
  2200d2:	eb 00                	jmp    2200d4 <getLineNumberInfo+0x24e4>
            if (opcode == DW.LNS_extended_op) {
  2200d4:	eb 00                	jmp    2200d6 <getLineNumberInfo+0x24e6>
        while (true) {
  2200d6:	e9 67 ee ff ff       	jmp    21ef42 <getLineNumberInfo+0x1352>
    while (this_offset < debug_line_end) : (this_index += 1) {
  2200db:	48 8b 85 b0 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xf50]
  2200e2:	48 83 c0 01          	add    rax,0x1
  2200e6:	0f 92 c1             	setb   cl
  2200e9:	48 89 85 a0 e9 ff ff 	mov    QWORD PTR [rbp-0x1660],rax
  2200f0:	88 8d 9f e9 ff ff    	mov    BYTE PTR [rbp-0x1661],cl
  2200f6:	0f 82 f9 06 00 00    	jb     2207f5 <getLineNumberInfo+0x2c05>
  2200fc:	e9 04 07 00 00       	jmp    220805 <getLineNumberInfo+0x2c15>
    return error.MissingDebugInfo;
  220101:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  220108:	e8 83 bb fe ff       	call   20bc90 <__zig_return_error>
  22010d:	48 8d 3d 24 93 fe ff 	lea    rdi,[rip+0xfffffffffffe9324]        # 209438 <__unnamed_128>
  220114:	b8 30 00 00 00       	mov    eax,0x30
  220119:	89 c2                	mov    edx,eax
  22011b:	48 8b 8d 60 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x11a0]
  220122:	48 89 bd 90 e9 ff ff 	mov    QWORD PTR [rbp-0x1670],rdi
  220129:	48 89 cf             	mov    rdi,rcx
  22012c:	48 8b b5 90 e9 ff ff 	mov    rsi,QWORD PTR [rbp-0x1670]
  220133:	e8 68 47 01 00       	call   2348a0 <memcpy>
  220138:	48 8b 85 50 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11b0]
  22013f:	48 81 c4 f0 16 00 00 	add    rsp,0x16f0
  220146:	5d                   	pop    rbp
  220147:	c3                   	ret    
  220148:	48 8d 3d 79 30 02 00 	lea    rdi,[rip+0x23079]        # 2431c8 <__unnamed_4>
  22014f:	31 c0                	xor    eax,eax
  220151:	89 c6                	mov    esi,eax
    const debug_line_end = st.debug_line.offset + st.debug_line.size;
  220153:	e8 a8 b4 fe ff       	call   20b600 <panic>
  220158:	48 8d 7d 90          	lea    rdi,[rbp-0x70]
  22015c:	48 8b 85 38 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11c8]
  220163:	48 89 85 c0 f0 ff ff 	mov    QWORD PTR [rbp-0xf40],rax
    var this_offset = st.debug_line.offset;
  22016a:	48 8b 8d f0 f0 ff ff 	mov    rcx,QWORD PTR [rbp-0xf10]
  220171:	48 8b 49 78          	mov    rcx,QWORD PTR [rcx+0x78]
  220175:	48 8b 49 18          	mov    rcx,QWORD PTR [rcx+0x18]
  220179:	48 89 8d b8 f0 ff ff 	mov    QWORD PTR [rbp-0xf48],rcx
    var this_index: usize = 0;
  220180:	48 c7 85 b0 f0 ff ff 	mov    QWORD PTR [rbp-0xf50],0x0
  220187:	00 00 00 00 
    var in_file_stream = io.FileInStream.init(in_file);
  22018b:	48 8b b5 c8 f0 ff ff 	mov    rsi,QWORD PTR [rbp-0xf38]
  220192:	e8 99 37 ff ff       	call   213930 <FileInStream_init>
  220197:	48 8d 85 a0 f0 ff ff 	lea    rax,[rbp-0xf60]
  22019e:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  2201a2:	48 89 8d a0 f0 ff ff 	mov    QWORD PTR [rbp-0xf60],rcx
  2201a9:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  2201ad:	48 89 8d a8 f0 ff ff 	mov    QWORD PTR [rbp-0xf58],rcx
    const in_stream = &in_file_stream.stream;
  2201b4:	48 83 c0 08          	add    rax,0x8
  2201b8:	48 89 85 98 f0 ff ff 	mov    QWORD PTR [rbp-0xf68],rax
    while (this_offset < debug_line_end) : (this_index += 1) {
  2201bf:	e9 4c db ff ff       	jmp    21dd10 <getLineNumberInfo+0x120>
  2201c4:	48 8d 3d fd 2f 02 00 	lea    rdi,[rip+0x22ffd]        # 2431c8 <__unnamed_4>
  2201cb:	31 c0                	xor    eax,eax
  2201cd:	89 c6                	mov    esi,eax
        const next_offset = unit_length + (if (is_64) usize(12) else usize(4));
  2201cf:	e8 2c b4 fe ff       	call   20b600 <panic>
  2201d4:	48 8b 85 e8 ed ff ff 	mov    rax,QWORD PTR [rbp-0x1218]
  2201db:	48 89 85 80 f0 ff ff 	mov    QWORD PTR [rbp-0xf80],rax
        if (compile_unit.index != this_index) {
  2201e2:	48 8b 8d e8 f0 ff ff 	mov    rcx,QWORD PTR [rbp-0xf18]
  2201e9:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
  2201ed:	48 3b 8d b0 f0 ff ff 	cmp    rcx,QWORD PTR [rbp-0xf50]
  2201f4:	0f 85 36 dd ff ff    	jne    21df30 <getLineNumberInfo+0x340>
  2201fa:	e9 5a dd ff ff       	jmp    21df59 <getLineNumberInfo+0x369>
  2201ff:	48 8d 3d c2 2f 02 00 	lea    rdi,[rip+0x22fc2]        # 2431c8 <__unnamed_4>
  220206:	31 c0                	xor    eax,eax
  220208:	89 c6                	mov    esi,eax
            this_offset += next_offset;
  22020a:	e8 f1 b3 fe ff       	call   20b600 <panic>
  22020f:	48 8b 85 d8 ed ff ff 	mov    rax,QWORD PTR [rbp-0x1228]
  220216:	48 89 85 b8 f0 ff ff 	mov    QWORD PTR [rbp-0xf48],rax
            continue;
  22021d:	e9 b9 fe ff ff       	jmp    2200db <getLineNumberInfo+0x24eb>
  220222:	48 8d 3d 9f 2f 02 00 	lea    rdi,[rip+0x22f9f]        # 2431c8 <__unnamed_4>
  220229:	31 c0                	xor    eax,eax
  22022b:	89 c6                	mov    esi,eax
        const prog_start_offset = (try in_file.getPos()) + prologue_length;
  22022d:	e8 ce b3 fe ff       	call   20b600 <panic>
  220232:	48 8d bd e0 fd ff ff 	lea    rdi,[rbp-0x220]
  220239:	48 8b 85 58 ed ff ff 	mov    rax,QWORD PTR [rbp-0x12a8]
  220240:	48 89 85 68 f0 ff ff 	mov    QWORD PTR [rbp-0xf98],rax
        const minimum_instruction_length = try in_stream.readByte();
  220247:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  22024e:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  220255:	e8 86 38 ff ff       	call   213ae0 <InStream(ReadError)_readByte>
  22025a:	66 83 bd e0 fd ff ff 	cmp    WORD PTR [rbp-0x220],0x0
  220261:	00 
  220262:	0f 85 59 e0 ff ff    	jne    21e2c1 <getLineNumberInfo+0x6d1>
  220268:	e9 b7 e0 ff ff       	jmp    21e324 <getLineNumberInfo+0x734>
  22026d:	48 8d 3d 54 2f 02 00 	lea    rdi,[rip+0x22f54]        # 2431c8 <__unnamed_4>
  220274:	31 c0                	xor    eax,eax
  220276:	89 c6                	mov    esi,eax
        const standard_opcode_lengths = try st.allocator().alloc(u8, opcode_base - 1);
  220278:	e8 83 b3 fe ff       	call   20b600 <panic>
  22027d:	48 8d bd 48 fc ff ff 	lea    rdi,[rbp-0x3b8]
  220284:	8a 85 df ec ff ff    	mov    al,BYTE PTR [rbp-0x1321]
  22028a:	0f b6 c8             	movzx  ecx,al
  22028d:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  220294:	48 8b 95 e0 ec ff ff 	mov    rdx,QWORD PTR [rbp-0x1320]
  22029b:	e8 a0 21 00 00       	call   222440 <Allocator_alloc.74>
  2202a0:	66 83 bd 48 fc ff ff 	cmp    WORD PTR [rbp-0x3b8],0x0
  2202a7:	00 
  2202a8:	0f 85 54 e4 ff ff    	jne    21e702 <getLineNumberInfo+0xb12>
  2202ae:	e9 b2 e4 ff ff       	jmp    21e765 <getLineNumberInfo+0xb75>
  2202b3:	48 8d 3d 0e 2f 02 00 	lea    rdi,[rip+0x22f0e]        # 2431c8 <__unnamed_4>
  2202ba:	31 c0                	xor    eax,eax
  2202bc:	89 c6                	mov    esi,eax
            while (i < opcode_base - 1) : (i += 1) {
  2202be:	e8 3d b3 fe ff       	call   20b600 <panic>
  2202c3:	8a 85 c7 ec ff ff    	mov    al,BYTE PTR [rbp-0x1339]
  2202c9:	0f b6 c8             	movzx  ecx,al
  2202cc:	89 ca                	mov    edx,ecx
  2202ce:	48 8b b5 c8 ec ff ff 	mov    rsi,QWORD PTR [rbp-0x1338]
  2202d5:	48 39 d6             	cmp    rsi,rdx
  2202d8:	0f 82 dc e4 ff ff    	jb     21e7ba <getLineNumberInfo+0xbca>
  2202de:	e9 8f e5 ff ff       	jmp    21e872 <getLineNumberInfo+0xc82>
  2202e3:	48 8d 3d ee 30 02 00 	lea    rdi,[rip+0x230ee]        # 2433d8 <__unnamed_20>
  2202ea:	31 c0                	xor    eax,eax
  2202ec:	89 c6                	mov    esi,eax
                standard_opcode_lengths[i] = try in_stream.readByte();
  2202ee:	e8 0d b3 fe ff       	call   20b600 <panic>
  2202f3:	48 8d bd f8 fb ff ff 	lea    rdi,[rbp-0x408]
  2202fa:	48 8b 85 b8 ec ff ff 	mov    rax,QWORD PTR [rbp-0x1348]
  220301:	48 03 85 50 f0 ff ff 	add    rax,QWORD PTR [rbp-0xfb0]
  220308:	48 8b 95 98 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xf68]
  22030f:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  220316:	48 89 85 a0 ec ff ff 	mov    QWORD PTR [rbp-0x1360],rax
  22031d:	e8 be 37 ff ff       	call   213ae0 <InStream(ReadError)_readByte>
  220322:	66 83 bd f8 fb ff ff 	cmp    WORD PTR [rbp-0x408],0x0
  220329:	00 
  22032a:	0f 85 aa e4 ff ff    	jne    21e7da <getLineNumberInfo+0xbea>
  220330:	e9 08 e5 ff ff       	jmp    21e83d <getLineNumberInfo+0xc4d>
  220335:	48 8d 3d 8c 2e 02 00 	lea    rdi,[rip+0x22e8c]        # 2431c8 <__unnamed_4>
  22033c:	31 c0                	xor    eax,eax
  22033e:	89 c6                	mov    esi,eax
            while (i < opcode_base - 1) : (i += 1) {
  220340:	e8 bb b2 fe ff       	call   20b600 <panic>
  220345:	48 8b 85 98 ec ff ff 	mov    rax,QWORD PTR [rbp-0x1368]
  22034c:	48 89 85 48 f0 ff ff 	mov    QWORD PTR [rbp-0xfb8],rax
  220353:	e9 34 e4 ff ff       	jmp    21e78c <getLineNumberInfo+0xb9c>
  220358:	48 8d 3d 69 2e 02 00 	lea    rdi,[rip+0x22e69]        # 2431c8 <__unnamed_4>
  22035f:	31 c0                	xor    eax,eax
  220361:	89 c6                	mov    esi,eax
                        const fwd_amt = math.cast(isize, op_size - 1) catch return error.InvalidDebugInfo;
  220363:	e8 98 b2 fe ff       	call   20b600 <panic>
  220368:	48 8d bd 68 f7 ff ff 	lea    rdi,[rbp-0x898]
  22036f:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  220376:	48 8b 95 b0 eb ff ff 	mov    rdx,QWORD PTR [rbp-0x1450]
  22037d:	e8 9e 24 00 00       	call   222820 <cast.75>
  220382:	66 83 bd 68 f7 ff ff 	cmp    WORD PTR [rbp-0x898],0x0
  220389:	00 
  22038a:	0f 85 58 ee ff ff    	jne    21f1e8 <getLineNumberInfo+0x15f8>
  220390:	e9 9a ee ff ff       	jmp    21f22f <getLineNumberInfo+0x163f>
  220395:	48 8d 3d 2c 2e 02 00 	lea    rdi,[rip+0x22e2c]        # 2431c8 <__unnamed_4>
  22039c:	31 c0                	xor    eax,eax
  22039e:	89 c6                	mov    esi,eax
                const adjusted_opcode = opcode - opcode_base;
  2203a0:	e8 5b b2 fe ff       	call   20b600 <panic>
  2203a5:	8a 85 df ea ff ff    	mov    al,BYTE PTR [rbp-0x1521]
  2203ab:	88 85 ef ee ff ff    	mov    BYTE PTR [rbp-0x1111],al
                const inc_addr = minimum_instruction_length * (adjusted_opcode / line_range);
  2203b1:	8a 85 67 f0 ff ff    	mov    al,BYTE PTR [rbp-0xf99]
  2203b7:	8a 8d ef ee ff ff    	mov    cl,BYTE PTR [rbp-0x1111]
  2203bd:	8a 95 64 f0 ff ff    	mov    dl,BYTE PTR [rbp-0xf9c]
  2203c3:	80 fa 00             	cmp    dl,0x0
  2203c6:	88 85 8f e9 ff ff    	mov    BYTE PTR [rbp-0x1671],al
  2203cc:	88 8d 8e e9 ff ff    	mov    BYTE PTR [rbp-0x1672],cl
  2203d2:	88 95 8d e9 ff ff    	mov    BYTE PTR [rbp-0x1673],dl
  2203d8:	74 3c                	je     220416 <getLineNumberInfo+0x2826>
  2203da:	8a 85 8e e9 ff ff    	mov    al,BYTE PTR [rbp-0x1672]
  2203e0:	66 0f b6 c0          	movzx  ax,al
  2203e4:	8a 8d 8d e9 ff ff    	mov    cl,BYTE PTR [rbp-0x1673]
  2203ea:	f6 f1                	div    cl
  2203ec:	8a 95 8f e9 ff ff    	mov    dl,BYTE PTR [rbp-0x1671]
  2203f2:	88 85 8c e9 ff ff    	mov    BYTE PTR [rbp-0x1674],al
  2203f8:	88 d0                	mov    al,dl
  2203fa:	40 8a b5 8c e9 ff ff 	mov    sil,BYTE PTR [rbp-0x1674]
  220401:	40 f6 e6             	mul    sil
  220404:	40 0f 90 c6          	seto   sil
  220408:	40 f6 c6 01          	test   sil,0x1
  22040c:	88 85 8b e9 ff ff    	mov    BYTE PTR [rbp-0x1675],al
  220412:	75 12                	jne    220426 <getLineNumberInfo+0x2836>
  220414:	eb 20                	jmp    220436 <getLineNumberInfo+0x2846>
  220416:	48 8d 3d 23 2e 02 00 	lea    rdi,[rip+0x22e23]        # 243240 <__unnamed_7>
  22041d:	31 c0                	xor    eax,eax
  22041f:	89 c6                	mov    esi,eax
  220421:	e8 da b1 fe ff       	call   20b600 <panic>
  220426:	48 8d 3d 9b 2d 02 00 	lea    rdi,[rip+0x22d9b]        # 2431c8 <__unnamed_4>
  22042d:	31 c0                	xor    eax,eax
  22042f:	89 c6                	mov    esi,eax
  220431:	e8 ca b1 fe ff       	call   20b600 <panic>
  220436:	8a 85 8b e9 ff ff    	mov    al,BYTE PTR [rbp-0x1675]
  22043c:	88 85 ee ee ff ff    	mov    BYTE PTR [rbp-0x1112],al
                const inc_line = i32(line_base) + i32(adjusted_opcode % line_range);
  220442:	0f be 8d 65 f0 ff ff 	movsx  ecx,BYTE PTR [rbp-0xf9b]
  220449:	8a 95 ef ee ff ff    	mov    dl,BYTE PTR [rbp-0x1111]
  22044f:	40 8a b5 64 f0 ff ff 	mov    sil,BYTE PTR [rbp-0xf9c]
  220456:	40 80 fe 00          	cmp    sil,0x0
  22045a:	89 8d 84 e9 ff ff    	mov    DWORD PTR [rbp-0x167c],ecx
  220460:	88 95 83 e9 ff ff    	mov    BYTE PTR [rbp-0x167d],dl
  220466:	40 88 b5 82 e9 ff ff 	mov    BYTE PTR [rbp-0x167e],sil
  22046d:	74 36                	je     2204a5 <getLineNumberInfo+0x28b5>
  22046f:	8a 85 83 e9 ff ff    	mov    al,BYTE PTR [rbp-0x167d]
  220475:	66 0f b6 c0          	movzx  ax,al
  220479:	8a 8d 82 e9 ff ff    	mov    cl,BYTE PTR [rbp-0x167e]
  22047f:	f6 f1                	div    cl
  220481:	66 c1 e8 08          	shr    ax,0x8
  220485:	88 c2                	mov    dl,al
  220487:	0f b6 f2             	movzx  esi,dl
  22048a:	8b bd 84 e9 ff ff    	mov    edi,DWORD PTR [rbp-0x167c]
  220490:	01 f7                	add    edi,esi
  220492:	0f 90 c2             	seto   dl
  220495:	89 bd 7c e9 ff ff    	mov    DWORD PTR [rbp-0x1684],edi
  22049b:	88 95 7b e9 ff ff    	mov    BYTE PTR [rbp-0x1685],dl
  2204a1:	70 12                	jo     2204b5 <getLineNumberInfo+0x28c5>
  2204a3:	eb 20                	jmp    2204c5 <getLineNumberInfo+0x28d5>
  2204a5:	48 8d 3d 3c 2e 02 00 	lea    rdi,[rip+0x22e3c]        # 2432e8 <__unnamed_15>
  2204ac:	31 c0                	xor    eax,eax
  2204ae:	89 c6                	mov    esi,eax
  2204b0:	e8 4b b1 fe ff       	call   20b600 <panic>
  2204b5:	48 8d 3d 0c 2d 02 00 	lea    rdi,[rip+0x22d0c]        # 2431c8 <__unnamed_4>
  2204bc:	31 c0                	xor    eax,eax
  2204be:	89 c6                	mov    esi,eax
  2204c0:	e8 3b b1 fe ff       	call   20b600 <panic>
  2204c5:	48 8d 85 88 ef ff ff 	lea    rax,[rbp-0x1078]
  2204cc:	8b 8d 7c e9 ff ff    	mov    ecx,DWORD PTR [rbp-0x1684]
  2204d2:	89 8d e8 ee ff ff    	mov    DWORD PTR [rbp-0x1118],ecx
                prog.line += inc_line;
  2204d8:	48 83 c0 10          	add    rax,0x10
  2204dc:	48 8b 95 98 ef ff ff 	mov    rdx,QWORD PTR [rbp-0x1068]
  2204e3:	48 63 b5 e8 ee ff ff 	movsxd rsi,DWORD PTR [rbp-0x1118]
  2204ea:	48 01 f2             	add    rdx,rsi
  2204ed:	40 0f 90 c7          	seto   dil
  2204f1:	48 89 85 70 e9 ff ff 	mov    QWORD PTR [rbp-0x1690],rax
  2204f8:	48 89 95 68 e9 ff ff 	mov    QWORD PTR [rbp-0x1698],rdx
  2204ff:	40 88 bd 67 e9 ff ff 	mov    BYTE PTR [rbp-0x1699],dil
  220506:	70 02                	jo     22050a <getLineNumberInfo+0x291a>
  220508:	eb 10                	jmp    22051a <getLineNumberInfo+0x292a>
  22050a:	48 8d 3d b7 2c 02 00 	lea    rdi,[rip+0x22cb7]        # 2431c8 <__unnamed_4>
  220511:	31 c0                	xor    eax,eax
  220513:	89 c6                	mov    esi,eax
  220515:	e8 e6 b0 fe ff       	call   20b600 <panic>
  22051a:	48 8d 85 88 ef ff ff 	lea    rax,[rbp-0x1078]
  220521:	48 8b 8d 70 e9 ff ff 	mov    rcx,QWORD PTR [rbp-0x1690]
  220528:	48 8b 95 68 e9 ff ff 	mov    rdx,QWORD PTR [rbp-0x1698]
  22052f:	48 89 11             	mov    QWORD PTR [rcx],rdx
                prog.address += inc_addr;
  220532:	48 8b b5 88 ef ff ff 	mov    rsi,QWORD PTR [rbp-0x1078]
  220539:	0f b6 bd ee ee ff ff 	movzx  edi,BYTE PTR [rbp-0x1112]
  220540:	41 89 f8             	mov    r8d,edi
  220543:	4c 01 c6             	add    rsi,r8
  220546:	41 0f 92 c1          	setb   r9b
  22054a:	48 89 85 58 e9 ff ff 	mov    QWORD PTR [rbp-0x16a8],rax
  220551:	48 89 b5 50 e9 ff ff 	mov    QWORD PTR [rbp-0x16b0],rsi
  220558:	44 88 8d 4f e9 ff ff 	mov    BYTE PTR [rbp-0x16b1],r9b
  22055f:	72 02                	jb     220563 <getLineNumberInfo+0x2973>
  220561:	eb 10                	jmp    220573 <getLineNumberInfo+0x2983>
  220563:	48 8d 3d 5e 2c 02 00 	lea    rdi,[rip+0x22c5e]        # 2431c8 <__unnamed_4>
  22056a:	31 c0                	xor    eax,eax
  22056c:	89 c6                	mov    esi,eax
  22056e:	e8 8d b0 fe ff       	call   20b600 <panic>
  220573:	48 8d bd 18 f4 ff ff 	lea    rdi,[rbp-0xbe8]
  22057a:	48 8d 95 88 ef ff ff 	lea    rdx,[rbp-0x1078]
  220581:	48 8b 85 58 e9 ff ff 	mov    rax,QWORD PTR [rbp-0x16a8]
  220588:	48 8b 8d 50 e9 ff ff 	mov    rcx,QWORD PTR [rbp-0x16b0]
  22058f:	48 89 08             	mov    QWORD PTR [rax],rcx
                if (try prog.checkLineMatch()) |info| return info;
  220592:	48 8b b5 58 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a8]
  220599:	e8 12 23 00 00       	call   2228b0 <LineNumberProgram_checkLineMatch>
  22059e:	66 83 bd 18 f4 ff ff 	cmp    WORD PTR [rbp-0xbe8],0x0
  2205a5:	00 
  2205a6:	0f 85 12 f3 ff ff    	jne    21f8be <getLineNumberInfo+0x1cce>
  2205ac:	e9 70 f3 ff ff       	jmp    21f921 <getLineNumberInfo+0x1d31>
  2205b1:	48 8d 3d 10 2c 02 00 	lea    rdi,[rip+0x22c10]        # 2431c8 <__unnamed_4>
  2205b8:	31 c0                	xor    eax,eax
  2205ba:	89 c6                	mov    esi,eax
                        if (opcode - 1 >= standard_opcode_lengths.len) return error.InvalidDebugInfo;
  2205bc:	e8 3f b0 fe ff       	call   20b600 <panic>
  2205c1:	48 8b 85 58 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xfa8]
  2205c8:	8a 8d 9e ea ff ff    	mov    cl,BYTE PTR [rbp-0x1562]
  2205ce:	0f b6 d1             	movzx  edx,cl
  2205d1:	89 d6                	mov    esi,edx
  2205d3:	48 39 c6             	cmp    rsi,rax
  2205d6:	0f 83 7b f4 ff ff    	jae    21fa57 <getLineNumberInfo+0x1e67>
  2205dc:	e9 bd f4 ff ff       	jmp    21fa9e <getLineNumberInfo+0x1eae>
  2205e1:	48 8d 3d e0 2b 02 00 	lea    rdi,[rip+0x22be0]        # 2431c8 <__unnamed_4>
  2205e8:	31 c0                	xor    eax,eax
  2205ea:	89 c6                	mov    esi,eax
                        const len_bytes = standard_opcode_lengths[opcode - 1];
  2205ec:	e8 0f b0 fe ff       	call   20b600 <panic>
  2205f1:	8a 85 8f ea ff ff    	mov    al,BYTE PTR [rbp-0x1571]
  2205f7:	0f b6 c8             	movzx  ecx,al
  2205fa:	89 ca                	mov    edx,ecx
  2205fc:	48 3b 95 58 f0 ff ff 	cmp    rdx,QWORD PTR [rbp-0xfa8]
  220603:	48 89 95 40 e9 ff ff 	mov    QWORD PTR [rbp-0x16c0],rdx
  22060a:	72 10                	jb     22061c <getLineNumberInfo+0x2a2c>
  22060c:	48 8d 3d c5 2d 02 00 	lea    rdi,[rip+0x22dc5]        # 2433d8 <__unnamed_20>
  220613:	31 c0                	xor    eax,eax
  220615:	89 c6                	mov    esi,eax
  220617:	e8 e4 af fe ff       	call   20b600 <panic>
  22061c:	48 8b 85 50 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xfb0]
  220623:	48 8b 8d 40 e9 ff ff 	mov    rcx,QWORD PTR [rbp-0x16c0]
  22062a:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  22062d:	88 95 bf ee ff ff    	mov    BYTE PTR [rbp-0x1141],dl
                        try in_file.seekForward(len_bytes);
  220633:	48 8b b5 c8 f0 ff ff 	mov    rsi,QWORD PTR [rbp-0xf38]
  22063a:	0f b6 bd bf ee ff ff 	movzx  edi,BYTE PTR [rbp-0x1141]
  220641:	89 fa                	mov    edx,edi
  220643:	48 8b bd 58 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11a8]
  22064a:	e8 61 35 ff ff       	call   213bb0 <File_seekForward>
  22064f:	66 89 85 7e f3 ff ff 	mov    WORD PTR [rbp-0xc82],ax
  220656:	66 83 bd 7e f3 ff ff 	cmp    WORD PTR [rbp-0xc82],0x0
  22065d:	00 
  22065e:	0f 85 5b f4 ff ff    	jne    21fabf <getLineNumberInfo+0x1ecf>
  220664:	e9 b9 f4 ff ff       	jmp    21fb22 <getLineNumberInfo+0x1f32>
  220669:	48 8d 3d 58 2b 02 00 	lea    rdi,[rip+0x22b58]        # 2431c8 <__unnamed_4>
  220670:	31 c0                	xor    eax,eax
  220672:	89 c6                	mov    esi,eax
                        prog.address += arg * minimum_instruction_length;
  220674:	e8 87 af fe ff       	call   20b600 <panic>
  220679:	48 8b 85 28 ea ff ff 	mov    rax,QWORD PTR [rbp-0x15d8]
  220680:	48 8b 8d 20 ea ff ff 	mov    rcx,QWORD PTR [rbp-0x15e0]
  220687:	48 01 c8             	add    rax,rcx
  22068a:	0f 92 c2             	setb   dl
  22068d:	48 89 85 38 e9 ff ff 	mov    QWORD PTR [rbp-0x16c8],rax
  220694:	88 95 37 e9 ff ff    	mov    BYTE PTR [rbp-0x16c9],dl
  22069a:	72 02                	jb     22069e <getLineNumberInfo+0x2aae>
  22069c:	eb 10                	jmp    2206ae <getLineNumberInfo+0x2abe>
  22069e:	48 8d 3d 23 2b 02 00 	lea    rdi,[rip+0x22b23]        # 2431c8 <__unnamed_4>
  2206a5:	31 c0                	xor    eax,eax
  2206a7:	89 c6                	mov    esi,eax
  2206a9:	e8 52 af fe ff       	call   20b600 <panic>
  2206ae:	48 8b 85 30 ea ff ff 	mov    rax,QWORD PTR [rbp-0x15d0]
  2206b5:	48 8b 8d 38 e9 ff ff 	mov    rcx,QWORD PTR [rbp-0x16c8]
  2206bc:	48 89 08             	mov    QWORD PTR [rax],rcx
                switch (opcode) {
  2206bf:	e9 0e fa ff ff       	jmp    2200d2 <getLineNumberInfo+0x24e2>
  2206c4:	48 8d 3d fd 2a 02 00 	lea    rdi,[rip+0x22afd]        # 2431c8 <__unnamed_4>
  2206cb:	31 c0                	xor    eax,eax
  2206cd:	89 c6                	mov    esi,eax
                        prog.line += arg;
  2206cf:	e8 2c af fe ff       	call   20b600 <panic>
  2206d4:	48 8b 85 08 ea ff ff 	mov    rax,QWORD PTR [rbp-0x15f8]
  2206db:	48 8b 8d 00 ea ff ff 	mov    rcx,QWORD PTR [rbp-0x1600]
  2206e2:	48 89 08             	mov    QWORD PTR [rax],rcx
                switch (opcode) {
  2206e5:	e9 e8 f9 ff ff       	jmp    2200d2 <getLineNumberInfo+0x24e2>
  2206ea:	48 8d 3d d7 2a 02 00 	lea    rdi,[rip+0x22ad7]        # 2431c8 <__unnamed_4>
  2206f1:	31 c0                	xor    eax,eax
  2206f3:	89 c6                	mov    esi,eax
                        const inc_addr = minimum_instruction_length * ((255 - opcode_base) / line_range);
  2206f5:	e8 06 af fe ff       	call   20b600 <panic>
  2206fa:	8a 85 64 f0 ff ff    	mov    al,BYTE PTR [rbp-0xf9c]
  220700:	3c 00                	cmp    al,0x0
  220702:	88 85 36 e9 ff ff    	mov    BYTE PTR [rbp-0x16ca],al
  220708:	74 3c                	je     220746 <getLineNumberInfo+0x2b56>
  22070a:	8a 85 de e9 ff ff    	mov    al,BYTE PTR [rbp-0x1622]
  220710:	66 0f b6 c0          	movzx  ax,al
  220714:	8a 8d 36 e9 ff ff    	mov    cl,BYTE PTR [rbp-0x16ca]
  22071a:	f6 f1                	div    cl
  22071c:	8a 95 df e9 ff ff    	mov    dl,BYTE PTR [rbp-0x1621]
  220722:	88 85 35 e9 ff ff    	mov    BYTE PTR [rbp-0x16cb],al
  220728:	88 d0                	mov    al,dl
  22072a:	40 8a b5 35 e9 ff ff 	mov    sil,BYTE PTR [rbp-0x16cb]
  220731:	40 f6 e6             	mul    sil
  220734:	40 0f 90 c6          	seto   sil
  220738:	40 f6 c6 01          	test   sil,0x1
  22073c:	88 85 34 e9 ff ff    	mov    BYTE PTR [rbp-0x16cc],al
  220742:	75 12                	jne    220756 <getLineNumberInfo+0x2b66>
  220744:	eb 20                	jmp    220766 <getLineNumberInfo+0x2b76>
  220746:	48 8d 3d f3 2a 02 00 	lea    rdi,[rip+0x22af3]        # 243240 <__unnamed_7>
  22074d:	31 c0                	xor    eax,eax
  22074f:	89 c6                	mov    esi,eax
  220751:	e8 aa ae fe ff       	call   20b600 <panic>
  220756:	48 8d 3d 6b 2a 02 00 	lea    rdi,[rip+0x22a6b]        # 2431c8 <__unnamed_4>
  22075d:	31 c0                	xor    eax,eax
  22075f:	89 c6                	mov    esi,eax
  220761:	e8 9a ae fe ff       	call   20b600 <panic>
  220766:	48 8d 85 88 ef ff ff 	lea    rax,[rbp-0x1078]
  22076d:	8a 8d 34 e9 ff ff    	mov    cl,BYTE PTR [rbp-0x16cc]
  220773:	88 8d 6f ee ff ff    	mov    BYTE PTR [rbp-0x1191],cl
                        prog.address += inc_addr;
  220779:	48 8b 95 88 ef ff ff 	mov    rdx,QWORD PTR [rbp-0x1078]
  220780:	0f b6 b5 6f ee ff ff 	movzx  esi,BYTE PTR [rbp-0x1191]
  220787:	89 f7                	mov    edi,esi
  220789:	48 01 fa             	add    rdx,rdi
  22078c:	41 0f 92 c0          	setb   r8b
  220790:	48 89 85 28 e9 ff ff 	mov    QWORD PTR [rbp-0x16d8],rax
  220797:	48 89 95 20 e9 ff ff 	mov    QWORD PTR [rbp-0x16e0],rdx
  22079e:	44 88 85 1f e9 ff ff 	mov    BYTE PTR [rbp-0x16e1],r8b
  2207a5:	72 02                	jb     2207a9 <getLineNumberInfo+0x2bb9>
  2207a7:	eb 10                	jmp    2207b9 <getLineNumberInfo+0x2bc9>
  2207a9:	48 8d 3d 18 2a 02 00 	lea    rdi,[rip+0x22a18]        # 2431c8 <__unnamed_4>
  2207b0:	31 c0                	xor    eax,eax
  2207b2:	89 c6                	mov    esi,eax
  2207b4:	e8 47 ae fe ff       	call   20b600 <panic>
  2207b9:	48 8b 85 28 e9 ff ff 	mov    rax,QWORD PTR [rbp-0x16d8]
  2207c0:	48 8b 8d 20 e9 ff ff 	mov    rcx,QWORD PTR [rbp-0x16e0]
  2207c7:	48 89 08             	mov    QWORD PTR [rax],rcx
                switch (opcode) {
  2207ca:	e9 03 f9 ff ff       	jmp    2200d2 <getLineNumberInfo+0x24e2>
  2207cf:	48 8d 3d f2 29 02 00 	lea    rdi,[rip+0x229f2]        # 2431c8 <__unnamed_4>
  2207d6:	31 c0                	xor    eax,eax
  2207d8:	89 c6                	mov    esi,eax
                        prog.address += arg;
  2207da:	e8 21 ae fe ff       	call   20b600 <panic>
  2207df:	48 8b 85 b8 e9 ff ff 	mov    rax,QWORD PTR [rbp-0x1648]
  2207e6:	48 8b 8d b0 e9 ff ff 	mov    rcx,QWORD PTR [rbp-0x1650]
  2207ed:	48 89 08             	mov    QWORD PTR [rax],rcx
                switch (opcode) {
  2207f0:	e9 dd f8 ff ff       	jmp    2200d2 <getLineNumberInfo+0x24e2>
  2207f5:	48 8d 3d cc 29 02 00 	lea    rdi,[rip+0x229cc]        # 2431c8 <__unnamed_4>
  2207fc:	31 c0                	xor    eax,eax
  2207fe:	89 c6                	mov    esi,eax
    while (this_offset < debug_line_end) : (this_index += 1) {
  220800:	e8 fb ad fe ff       	call   20b600 <panic>
  220805:	48 8b 85 a0 e9 ff ff 	mov    rax,QWORD PTR [rbp-0x1660]
  22080c:	48 89 85 b0 f0 ff ff 	mov    QWORD PTR [rbp-0xf50],rax
  220813:	e9 f8 d4 ff ff       	jmp    21dd10 <getLineNumberInfo+0x120>
  220818:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  22081f:	00 

0000000000220820 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.61>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  220820:	55                   	push   rbp
  220821:	48 89 e5             	mov    rbp,rsp
  220824:	48 83 ec 50          	sub    rsp,0x50
  220828:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
  22082c:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  220830:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  220834:	4c 89 45 e8          	mov    QWORD PTR [rbp-0x18],r8
  220838:	4c 89 4d e0          	mov    QWORD PTR [rbp-0x20],r9
            return std.fmt.format(self, Error, self.writeFn, format, args);
  22083c:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  220840:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  220844:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  220847:	4c 8b 45 f0          	mov    r8,QWORD PTR [rbp-0x10]
  22084b:	4c 8b 4d e8          	mov    r9,QWORD PTR [rbp-0x18]
  22084f:	4c 8b 55 e0          	mov    r10,QWORD PTR [rbp-0x20]
  220853:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  220857:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  22085b:	48 89 ca             	mov    rdx,rcx
  22085e:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  220862:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  220866:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
  22086b:	e8 e0 44 00 00       	call   224d50 <format.83>
  220870:	66 83 f8 00          	cmp    ax,0x0
  220874:	66 89 45 ce          	mov    WORD PTR [rbp-0x32],ax
  220878:	74 0b                	je     220885 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.61+0x65>
  22087a:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  22087e:	e8 0d b4 fe ff       	call   20bc90 <__zig_return_error>
  220883:	eb 02                	jmp    220887 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.61+0x67>
  220885:	eb 00                	jmp    220887 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.61+0x67>
  220887:	66 8b 45 ce          	mov    ax,WORD PTR [rbp-0x32]
  22088b:	48 83 c4 50          	add    rsp,0x50
  22088f:	5d                   	pop    rbp
  220890:	c3                   	ret    
  220891:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  220898:	0f 1f 84 00 00 00 00 
  22089f:	00 

00000000002208a0 <LineInfo_deinit>:
    fn deinit(self: *const LineInfo) void {
  2208a0:	55                   	push   rbp
  2208a1:	48 89 e5             	mov    rbp,rsp
  2208a4:	48 83 ec 10          	sub    rsp,0x10
  2208a8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
        self.allocator.free(self.file_name);
  2208ac:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  2208b0:	48 8b 7f 20          	mov    rdi,QWORD PTR [rdi+0x20]
  2208b4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2208b8:	48 83 c0 10          	add    rax,0x10
  2208bc:	48 89 c6             	mov    rsi,rax
  2208bf:	e8 4c 1a 00 00       	call   222310 <Allocator_free.73>
    fn deinit(self: *const LineInfo) void {
  2208c4:	48 83 c4 10          	add    rsp,0x10
  2208c8:	5d                   	pop    rbp
  2208c9:	c3                   	ret    
  2208ca:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000002208d0 <printLineFromFile>:
fn printLineFromFile(allocator: *mem.Allocator, out_stream: var, line_info: *const LineInfo) !void {
  2208d0:	55                   	push   rbp
  2208d1:	48 89 e5             	mov    rbp,rsp
  2208d4:	48 81 ec 10 11 00 00 	sub    rsp,0x1110
  2208db:	48 8d 45 f8          	lea    rax,[rbp-0x8]
  2208df:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  2208e3:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  2208e7:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
    var f = try os.File.openRead(allocator, line_info.file_name);
  2208eb:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  2208ef:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  2208f3:	48 83 c1 10          	add    rcx,0x10
  2208f7:	48 89 bd 40 ef ff ff 	mov    QWORD PTR [rbp-0x10c0],rdi
  2208fe:	48 89 c7             	mov    rdi,rax
  220901:	48 8b b5 40 ef ff ff 	mov    rsi,QWORD PTR [rbp-0x10c0]
  220908:	e8 b3 26 ff ff       	call   212fc0 <File_openRead>
  22090d:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  220912:	74 27                	je     22093b <printLineFromFile+0x6b>
  220914:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  220918:	48 8b bd 40 ef ff ff 	mov    rdi,QWORD PTR [rbp-0x10c0]
  22091f:	66 89 85 3e ef ff ff 	mov    WORD PTR [rbp-0x10c2],ax
  220926:	e8 65 b3 fe ff       	call   20bc90 <__zig_return_error>
  22092b:	66 8b 85 3e ef ff ff 	mov    ax,WORD PTR [rbp-0x10c2]
  220932:	48 81 c4 10 11 00 00 	add    rsp,0x1110
  220939:	5d                   	pop    rbp
  22093a:	c3                   	ret    
  22093b:	48 8d 35 f5 8c fe ff 	lea    rsi,[rip+0xfffffffffffe8cf5]        # 209637 <__unnamed_129>
  220942:	b8 00 10 00 00       	mov    eax,0x1000
  220947:	89 c2                	mov    edx,eax
  220949:	48 8d 8d 88 ef ff ff 	lea    rcx,[rbp-0x1078]
  220950:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  220953:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
    var buf: [os.page_size]u8 = undefined;
  220956:	48 89 cf             	mov    rdi,rcx
  220959:	e8 42 3f 01 00       	call   2348a0 <memcpy>
    var line: usize = 1;
  22095e:	48 c7 85 80 ef ff ff 	mov    QWORD PTR [rbp-0x1080],0x1
  220965:	01 00 00 00 
    var column: usize = 1;
  220969:	48 c7 85 78 ef ff ff 	mov    QWORD PTR [rbp-0x1088],0x1
  220970:	01 00 00 00 
    var abs_index: usize = 0;
  220974:	48 c7 85 70 ef ff ff 	mov    QWORD PTR [rbp-0x1090],0x0
  22097b:	00 00 00 00 
    while (true) {
  22097f:	eb 00                	jmp    220981 <printLineFromFile+0xb1>
  220981:	b0 01                	mov    al,0x1
        const amt_read = try f.read(buf[0..]);
  220983:	a8 01                	test   al,0x1
  220985:	0f 85 d0 01 00 00    	jne    220b5b <printLineFromFile+0x28b>
  22098b:	e9 bb 01 00 00       	jmp    220b4b <printLineFromFile+0x27b>
  220990:	48 8d 7d 88          	lea    rdi,[rbp-0x78]
    defer f.close();
  220994:	e8 d7 14 ff ff       	call   211e70 <File_close>
        const amt_read = try f.read(buf[0..]);
  220999:	66 8b 45 d0          	mov    ax,WORD PTR [rbp-0x30]
  22099d:	48 8b bd 40 ef ff ff 	mov    rdi,QWORD PTR [rbp-0x10c0]
  2209a4:	66 89 85 3c ef ff ff 	mov    WORD PTR [rbp-0x10c4],ax
  2209ab:	e8 e0 b2 fe ff       	call   20bc90 <__zig_return_error>
  2209b0:	66 8b 85 3c ef ff ff 	mov    ax,WORD PTR [rbp-0x10c4]
  2209b7:	48 81 c4 10 11 00 00 	add    rsp,0x1110
  2209be:	5d                   	pop    rbp
  2209bf:	c3                   	ret    
  2209c0:	31 c0                	xor    eax,eax
  2209c2:	89 c1                	mov    ecx,eax
  2209c4:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  2209c8:	48 89 95 68 ef ff ff 	mov    QWORD PTR [rbp-0x1098],rdx
        const slice = buf[0..amt_read];
  2209cf:	48 8b 95 68 ef ff ff 	mov    rdx,QWORD PTR [rbp-0x1098]
  2209d6:	48 39 d1             	cmp    rcx,rdx
  2209d9:	48 89 95 30 ef ff ff 	mov    QWORD PTR [rbp-0x10d0],rdx
  2209e0:	0f 86 c0 01 00 00    	jbe    220ba6 <printLineFromFile+0x2d6>
  2209e6:	e9 ab 01 00 00       	jmp    220b96 <printLineFromFile+0x2c6>
        for (slice) |byte| {
  2209eb:	48 8b 85 48 ef ff ff 	mov    rax,QWORD PTR [rbp-0x10b8]
  2209f2:	48 8b 8d 28 ef ff ff 	mov    rcx,QWORD PTR [rbp-0x10d8]
  2209f9:	48 39 c8             	cmp    rax,rcx
  2209fc:	48 89 85 20 ef ff ff 	mov    QWORD PTR [rbp-0x10e0],rax
  220a03:	0f 83 0e 01 00 00    	jae    220b17 <printLineFromFile+0x247>
  220a09:	48 8b 85 58 ef ff ff 	mov    rax,QWORD PTR [rbp-0x10a8]
  220a10:	48 8b 8d 20 ef ff ff 	mov    rcx,QWORD PTR [rbp-0x10e0]
  220a17:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  220a1a:	88 95 57 ef ff ff    	mov    BYTE PTR [rbp-0x10a9],dl
            if (line == line_info.line) {
  220a20:	48 8b 85 80 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1080]
  220a27:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  220a2b:	48 3b 06             	cmp    rax,QWORD PTR [rsi]
  220a2e:	75 79                	jne    220aa9 <printLineFromFile+0x1d9>
                try out_stream.writeByte(byte);
  220a30:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  220a34:	48 8b bd 40 ef ff ff 	mov    rdi,QWORD PTR [rbp-0x10c0]
  220a3b:	0f b6 95 57 ef ff ff 	movzx  edx,BYTE PTR [rbp-0x10a9]
  220a42:	e8 89 02 00 00       	call   220cd0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_writeByte>
  220a47:	66 89 45 ae          	mov    WORD PTR [rbp-0x52],ax
  220a4b:	66 83 7d ae 00       	cmp    WORD PTR [rbp-0x52],0x0
  220a50:	74 30                	je     220a82 <printLineFromFile+0x1b2>
  220a52:	48 8d 7d 88          	lea    rdi,[rbp-0x78]
    defer f.close();
  220a56:	e8 15 14 ff ff       	call   211e70 <File_close>
                try out_stream.writeByte(byte);
  220a5b:	66 8b 45 ae          	mov    ax,WORD PTR [rbp-0x52]
  220a5f:	48 8b bd 40 ef ff ff 	mov    rdi,QWORD PTR [rbp-0x10c0]
  220a66:	66 89 85 1e ef ff ff 	mov    WORD PTR [rbp-0x10e2],ax
  220a6d:	e8 1e b2 fe ff       	call   20bc90 <__zig_return_error>
  220a72:	66 8b 85 1e ef ff ff 	mov    ax,WORD PTR [rbp-0x10e2]
  220a79:	48 81 c4 10 11 00 00 	add    rsp,0x1110
  220a80:	5d                   	pop    rbp
  220a81:	c3                   	ret    
                if (byte == '\n') {
  220a82:	80 bd 57 ef ff ff 0a 	cmp    BYTE PTR [rbp-0x10a9],0xa
  220a89:	75 1a                	jne    220aa5 <printLineFromFile+0x1d5>
  220a8b:	48 8d 7d 88          	lea    rdi,[rbp-0x78]
    defer f.close();
  220a8f:	e8 dc 13 ff ff       	call   211e70 <File_close>
  220a94:	31 c0                	xor    eax,eax
  220a96:	66 89 c1             	mov    cx,ax
                    return;
  220a99:	66 89 c8             	mov    ax,cx
  220a9c:	48 81 c4 10 11 00 00 	add    rsp,0x1110
  220aa3:	5d                   	pop    rbp
  220aa4:	c3                   	ret    
                if (byte == '\n') {
  220aa5:	eb 00                	jmp    220aa7 <printLineFromFile+0x1d7>
            if (line == line_info.line) {
  220aa7:	eb 02                	jmp    220aab <printLineFromFile+0x1db>
  220aa9:	eb 00                	jmp    220aab <printLineFromFile+0x1db>
            if (byte == '\n') {
  220aab:	80 bd 57 ef ff ff 0a 	cmp    BYTE PTR [rbp-0x10a9],0xa
  220ab2:	75 26                	jne    220ada <printLineFromFile+0x20a>
                line += 1;
  220ab4:	48 8b 85 80 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1080]
  220abb:	48 83 c0 01          	add    rax,0x1
  220abf:	0f 92 c1             	setb   cl
  220ac2:	48 89 85 10 ef ff ff 	mov    QWORD PTR [rbp-0x10f0],rax
  220ac9:	88 8d 0f ef ff ff    	mov    BYTE PTR [rbp-0x10f1],cl
  220acf:	0f 82 56 01 00 00    	jb     220c2b <printLineFromFile+0x35b>
  220ad5:	e9 61 01 00 00       	jmp    220c3b <printLineFromFile+0x36b>
                column += 1;
  220ada:	48 8b 85 78 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1088]
  220ae1:	48 83 c0 01          	add    rax,0x1
  220ae5:	0f 92 c1             	setb   cl
  220ae8:	48 89 85 00 ef ff ff 	mov    QWORD PTR [rbp-0x1100],rax
  220aef:	88 8d ff ee ff ff    	mov    BYTE PTR [rbp-0x1101],cl
  220af5:	0f 82 5e 01 00 00    	jb     220c59 <printLineFromFile+0x389>
  220afb:	e9 69 01 00 00       	jmp    220c69 <printLineFromFile+0x399>
        for (slice) |byte| {
  220b00:	48 8b 85 20 ef ff ff 	mov    rax,QWORD PTR [rbp-0x10e0]
  220b07:	48 83 c0 01          	add    rax,0x1
  220b0b:	48 89 85 48 ef ff ff 	mov    QWORD PTR [rbp-0x10b8],rax
  220b12:	e9 d4 fe ff ff       	jmp    2209eb <printLineFromFile+0x11b>
        if (amt_read < buf.len) return error.EndOfFile;
  220b17:	48 81 bd 68 ef ff ff 	cmp    QWORD PTR [rbp-0x1098],0x1000
  220b1e:	00 10 00 00 
  220b22:	73 22                	jae    220b46 <printLineFromFile+0x276>
  220b24:	48 8d 7d 88          	lea    rdi,[rbp-0x78]
    defer f.close();
  220b28:	e8 43 13 ff ff       	call   211e70 <File_close>
        if (amt_read < buf.len) return error.EndOfFile;
  220b2d:	48 8b bd 40 ef ff ff 	mov    rdi,QWORD PTR [rbp-0x10c0]
  220b34:	e8 57 b1 fe ff       	call   20bc90 <__zig_return_error>
  220b39:	66 b8 26 00          	mov    ax,0x26
  220b3d:	48 81 c4 10 11 00 00 	add    rsp,0x1110
  220b44:	5d                   	pop    rbp
  220b45:	c3                   	ret    
    while (true) {
  220b46:	e9 34 fe ff ff       	jmp    22097f <printLineFromFile+0xaf>
  220b4b:	48 8d 3d 86 28 02 00 	lea    rdi,[rip+0x22886]        # 2433d8 <__unnamed_20>
  220b52:	31 c0                	xor    eax,eax
  220b54:	89 c6                	mov    esi,eax
        const amt_read = try f.read(buf[0..]);
  220b56:	e8 a5 aa fe ff       	call   20b600 <panic>
  220b5b:	48 8d 7d d0          	lea    rdi,[rbp-0x30]
  220b5f:	48 8d 55 88          	lea    rdx,[rbp-0x78]
  220b63:	48 8d 4d e0          	lea    rcx,[rbp-0x20]
  220b67:	48 8d 85 88 ef ff ff 	lea    rax,[rbp-0x1078]
  220b6e:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  220b72:	48 c7 45 e8 00 10 00 	mov    QWORD PTR [rbp-0x18],0x1000
  220b79:	00 
  220b7a:	48 8b b5 40 ef ff ff 	mov    rsi,QWORD PTR [rbp-0x10c0]
  220b81:	e8 2a 39 ff ff       	call   2144b0 <File_read>
  220b86:	66 83 7d d0 00       	cmp    WORD PTR [rbp-0x30],0x0
  220b8b:	0f 85 ff fd ff ff    	jne    220990 <printLineFromFile+0xc0>
  220b91:	e9 2a fe ff ff       	jmp    2209c0 <printLineFromFile+0xf0>
  220b96:	48 8d 3d 3b 28 02 00 	lea    rdi,[rip+0x2283b]        # 2433d8 <__unnamed_20>
  220b9d:	31 c0                	xor    eax,eax
  220b9f:	89 c6                	mov    esi,eax
        const slice = buf[0..amt_read];
  220ba1:	e8 5a aa fe ff       	call   20b600 <panic>
  220ba6:	48 8b 85 30 ef ff ff 	mov    rax,QWORD PTR [rbp-0x10d0]
  220bad:	48 3d 00 10 00 00    	cmp    rax,0x1000
  220bb3:	76 10                	jbe    220bc5 <printLineFromFile+0x2f5>
  220bb5:	48 8d 3d 1c 28 02 00 	lea    rdi,[rip+0x2281c]        # 2433d8 <__unnamed_20>
  220bbc:	31 c0                	xor    eax,eax
  220bbe:	89 c6                	mov    esi,eax
  220bc0:	e8 3b aa fe ff       	call   20b600 <panic>
  220bc5:	48 8d bd 57 ef ff ff 	lea    rdi,[rbp-0x10a9]
  220bcc:	be aa 00 00 00       	mov    esi,0xaa
  220bd1:	b8 01 00 00 00       	mov    eax,0x1
  220bd6:	89 c2                	mov    edx,eax
  220bd8:	48 8d 8d 88 ef ff ff 	lea    rcx,[rbp-0x1078]
  220bdf:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
  220be3:	48 8b 8d 30 ef ff ff 	mov    rcx,QWORD PTR [rbp-0x10d0]
  220bea:	48 83 e9 00          	sub    rcx,0x0
  220bee:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
  220bf2:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  220bf6:	48 89 8d 58 ef ff ff 	mov    QWORD PTR [rbp-0x10a8],rcx
  220bfd:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  220c01:	48 89 8d 60 ef ff ff 	mov    QWORD PTR [rbp-0x10a0],rcx
        for (slice) |byte| {
  220c08:	e8 43 3c 01 00       	call   234850 <memset>
  220c0d:	48 c7 85 48 ef ff ff 	mov    QWORD PTR [rbp-0x10b8],0x0
  220c14:	00 00 00 00 
  220c18:	48 8b 8d 60 ef ff ff 	mov    rcx,QWORD PTR [rbp-0x10a0]
  220c1f:	48 89 8d 28 ef ff ff 	mov    QWORD PTR [rbp-0x10d8],rcx
  220c26:	e9 c0 fd ff ff       	jmp    2209eb <printLineFromFile+0x11b>
  220c2b:	48 8d 3d 96 25 02 00 	lea    rdi,[rip+0x22596]        # 2431c8 <__unnamed_4>
  220c32:	31 c0                	xor    eax,eax
  220c34:	89 c6                	mov    esi,eax
                line += 1;
  220c36:	e8 c5 a9 fe ff       	call   20b600 <panic>
  220c3b:	48 8b 85 10 ef ff ff 	mov    rax,QWORD PTR [rbp-0x10f0]
  220c42:	48 89 85 80 ef ff ff 	mov    QWORD PTR [rbp-0x1080],rax
                column = 1;
  220c49:	48 c7 85 78 ef ff ff 	mov    QWORD PTR [rbp-0x1088],0x1
  220c50:	01 00 00 00 
            if (byte == '\n') {
  220c54:	e9 a7 fe ff ff       	jmp    220b00 <printLineFromFile+0x230>
  220c59:	48 8d 3d 68 25 02 00 	lea    rdi,[rip+0x22568]        # 2431c8 <__unnamed_4>
  220c60:	31 c0                	xor    eax,eax
  220c62:	89 c6                	mov    esi,eax
                column += 1;
  220c64:	e8 97 a9 fe ff       	call   20b600 <panic>
  220c69:	48 8b 85 00 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1100]
  220c70:	48 89 85 78 ef ff ff 	mov    QWORD PTR [rbp-0x1088],rax
            if (byte == '\n') {
  220c77:	e9 84 fe ff ff       	jmp    220b00 <printLineFromFile+0x230>
  220c7c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000220c80 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_write>:
        }

        pub fn write(self: *Self, bytes: []const u8) !void {
  220c80:	55                   	push   rbp
  220c81:	48 89 e5             	mov    rbp,rsp
  220c84:	48 83 ec 20          	sub    rsp,0x20
  220c88:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
            return self.writeFn(self, bytes);
  220c8c:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  220c90:	48 8b 36             	mov    rsi,QWORD PTR [rsi]
  220c93:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  220c97:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  220c9b:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
  220c9f:	48 89 c6             	mov    rsi,rax
  220ca2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  220ca6:	ff d0                	call   rax
  220ca8:	66 83 f8 00          	cmp    ax,0x0
  220cac:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
  220cb0:	74 0b                	je     220cbd <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_write+0x3d>
  220cb2:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  220cb6:	e8 d5 af fe ff       	call   20bc90 <__zig_return_error>
  220cbb:	eb 02                	jmp    220cbf <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_write+0x3f>
  220cbd:	eb 00                	jmp    220cbf <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_write+0x3f>
  220cbf:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
  220cc3:	48 83 c4 20          	add    rsp,0x20
  220cc7:	5d                   	pop    rbp
  220cc8:	c3                   	ret    
  220cc9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000220cd0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_writeByte>:
        }

        pub fn writeByte(self: *Self, byte: u8) !void {
  220cd0:	55                   	push   rbp
  220cd1:	48 89 e5             	mov    rbp,rsp
  220cd4:	48 83 ec 50          	sub    rsp,0x50
  220cd8:	88 d0                	mov    al,dl
  220cda:	b1 01                	mov    cl,0x1
  220cdc:	4c 8d 45 df          	lea    r8,[rbp-0x21]
  220ce0:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  220ce4:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
            const slice = (*[1]u8)(&byte)[0..];
  220ce7:	4c 89 45 f8          	mov    QWORD PTR [rbp-0x8],r8
  220ceb:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  220cef:	f6 c1 01             	test   cl,0x1
  220cf2:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
  220cf6:	48 89 75 b8          	mov    QWORD PTR [rbp-0x48],rsi
  220cfa:	75 29                	jne    220d25 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_writeByte+0x55>
  220cfc:	eb 17                	jmp    220d15 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_writeByte+0x45>
            return self.writeFn(self, slice);
  220cfe:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  220d02:	e8 89 af fe ff       	call   20bc90 <__zig_return_error>
  220d07:	eb 02                	jmp    220d0b <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_writeByte+0x3b>
  220d09:	eb 00                	jmp    220d0b <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_writeByte+0x3b>
  220d0b:	66 8b 45 b6          	mov    ax,WORD PTR [rbp-0x4a]
  220d0f:	48 83 c4 50          	add    rsp,0x50
  220d13:	5d                   	pop    rbp
  220d14:	c3                   	ret    
  220d15:	48 8d 3d bc 26 02 00 	lea    rdi,[rip+0x226bc]        # 2433d8 <__unnamed_20>
  220d1c:	31 c0                	xor    eax,eax
  220d1e:	89 c6                	mov    esi,eax
            const slice = (*[1]u8)(&byte)[0..];
  220d20:	e8 db a8 fe ff       	call   20b600 <panic>
  220d25:	48 8d 55 c8          	lea    rdx,[rbp-0x38]
  220d29:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  220d2d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  220d31:	48 c7 45 f0 01 00 00 	mov    QWORD PTR [rbp-0x10],0x1
  220d38:	00 
  220d39:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  220d3d:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  220d41:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  220d45:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
            return self.writeFn(self, slice);
  220d49:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  220d4d:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  220d50:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  220d54:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  220d58:	ff d1                	call   rcx
  220d5a:	66 83 f8 00          	cmp    ax,0x0
  220d5e:	66 89 45 b6          	mov    WORD PTR [rbp-0x4a],ax
  220d62:	75 9a                	jne    220cfe <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_writeByte+0x2e>
  220d64:	eb a3                	jmp    220d09 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_writeByte+0x39>
  220d66:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  220d6d:	00 00 00 

0000000000220d70 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.62>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  220d70:	55                   	push   rbp
  220d71:	48 89 e5             	mov    rbp,rsp
  220d74:	48 83 ec 50          	sub    rsp,0x50
  220d78:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
  220d7c:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  220d80:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  220d84:	4c 89 45 e8          	mov    QWORD PTR [rbp-0x18],r8
  220d88:	4c 89 4d e0          	mov    QWORD PTR [rbp-0x20],r9
            return std.fmt.format(self, Error, self.writeFn, format, args);
  220d8c:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  220d90:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  220d94:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  220d97:	4c 8b 45 f0          	mov    r8,QWORD PTR [rbp-0x10]
  220d9b:	4c 8b 4d e8          	mov    r9,QWORD PTR [rbp-0x18]
  220d9f:	4c 8b 55 e0          	mov    r10,QWORD PTR [rbp-0x20]
  220da3:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  220da7:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  220dab:	48 89 ca             	mov    rdx,rcx
  220dae:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  220db2:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  220db6:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
  220dbb:	e8 90 43 00 00       	call   225150 <format.87>
  220dc0:	66 83 f8 00          	cmp    ax,0x0
  220dc4:	66 89 45 ce          	mov    WORD PTR [rbp-0x32],ax
  220dc8:	74 0b                	je     220dd5 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.62+0x65>
  220dca:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  220dce:	e8 bd ae fe ff       	call   20bc90 <__zig_return_error>
  220dd3:	eb 02                	jmp    220dd7 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.62+0x67>
  220dd5:	eb 00                	jmp    220dd7 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.62+0x67>
  220dd7:	66 8b 45 ce          	mov    ax,WORD PTR [rbp-0x32]
  220ddb:	48 83 c4 50          	add    rsp,0x50
  220ddf:	5d                   	pop    rbp
  220de0:	c3                   	ret    
  220de1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  220de8:	0f 1f 84 00 00 00 00 
  220def:	00 

0000000000220df0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.63>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  220df0:	55                   	push   rbp
  220df1:	48 89 e5             	mov    rbp,rsp
  220df4:	48 83 ec 30          	sub    rsp,0x30
  220df8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  220dfc:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
            return std.fmt.format(self, Error, self.writeFn, format, args);
  220e00:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  220e04:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  220e08:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
  220e0b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  220e0f:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  220e13:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  220e17:	48 89 c1             	mov    rcx,rax
  220e1a:	4c 8b 45 e0          	mov    r8,QWORD PTR [rbp-0x20]
  220e1e:	e8 bd 46 00 00       	call   2254e0 <format.91>
  220e23:	66 83 f8 00          	cmp    ax,0x0
  220e27:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  220e2b:	74 0b                	je     220e38 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.63+0x48>
  220e2d:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  220e31:	e8 5a ae fe ff       	call   20bc90 <__zig_return_error>
  220e36:	eb 02                	jmp    220e3a <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.63+0x4a>
  220e38:	eb 00                	jmp    220e3a <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.63+0x4a>
  220e3a:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  220e3e:	48 83 c4 30          	add    rsp,0x30
  220e42:	5d                   	pop    rbp
  220e43:	c3                   	ret    
  220e44:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  220e4b:	00 00 00 00 00 

0000000000220e50 <AlignedArrayList(CompileUnit,2)_toSlice>:
        pub fn toSlice(self: Self) []align(A) T {
  220e50:	55                   	push   rbp
  220e51:	48 89 e5             	mov    rbp,rsp
  220e54:	48 83 ec 40          	sub    rsp,0x40
  220e58:	48 89 f8             	mov    rax,rdi
  220e5b:	31 c9                	xor    ecx,ecx
  220e5d:	89 ca                	mov    edx,ecx
            return self.items[0..self.len];
  220e5f:	4c 8b 46 10          	mov    r8,QWORD PTR [rsi+0x10]
  220e63:	4c 8b 4e 08          	mov    r9,QWORD PTR [rsi+0x8]
  220e67:	4c 39 c2             	cmp    rdx,r8
  220e6a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  220e6e:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  220e72:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  220e76:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
  220e7a:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
  220e7e:	76 10                	jbe    220e90 <AlignedArrayList(CompileUnit,2)_toSlice+0x40>
  220e80:	48 8d 3d 51 25 02 00 	lea    rdi,[rip+0x22551]        # 2433d8 <__unnamed_20>
  220e87:	31 c0                	xor    eax,eax
  220e89:	89 c6                	mov    esi,eax
  220e8b:	e8 70 a7 fe ff       	call   20b600 <panic>
  220e90:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  220e94:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  220e98:	48 39 c8             	cmp    rax,rcx
  220e9b:	76 10                	jbe    220ead <AlignedArrayList(CompileUnit,2)_toSlice+0x5d>
  220e9d:	48 8d 3d 34 25 02 00 	lea    rdi,[rip+0x22534]        # 2433d8 <__unnamed_20>
  220ea4:	31 c0                	xor    eax,eax
  220ea6:	89 c6                	mov    esi,eax
  220ea8:	e8 53 a7 fe ff       	call   20b600 <panic>
  220ead:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  220eb1:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  220eb4:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  220eb8:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  220ebc:	48 83 e9 00          	sub    rcx,0x0
  220ec0:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  220ec4:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  220ec8:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  220ecc:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  220ecf:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  220ed3:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  220ed7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  220edb:	48 83 c4 40          	add    rsp,0x40
  220edf:	5d                   	pop    rbp
  220ee0:	c3                   	ret    
  220ee1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  220ee8:	0f 1f 84 00 00 00 00 
  220eef:	00 

0000000000220ef0 <Die_getAttrSecOffset>:
    fn getAttrSecOffset(self: *const Die, id: u64) !u64 {
  220ef0:	55                   	push   rbp
  220ef1:	48 89 e5             	mov    rbp,rsp
  220ef4:	48 81 ec b0 00 00 00 	sub    rsp,0xb0
  220efb:	48 89 f8             	mov    rax,rdi
  220efe:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  220f02:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
        const form_value = self.getAttr(id) orelse return error.MissingDebugInfo;
  220f06:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  220f0a:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  220f0e:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
  220f12:	48 89 cf             	mov    rdi,rcx
  220f15:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
  220f19:	48 89 d6             	mov    rsi,rdx
  220f1c:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  220f20:	e8 eb 54 ff ff       	call   216410 <Die_getAttr>
  220f25:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  220f29:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
  220f2e:	75 2f                	jne    220f5f <Die_getAttrSecOffset+0x6f>
  220f30:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  220f34:	e8 57 ad fe ff       	call   20bc90 <__zig_return_error>
  220f39:	48 8b 3d 40 f9 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffdf940]        # 200880 <__unnamed_117>
  220f40:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  220f44:	48 89 38             	mov    QWORD PTR [rax],rdi
  220f47:	48 8b 3d 3a f9 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffdf93a]        # 200888 <__unnamed_117+0x8>
  220f4e:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  220f52:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  220f56:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  220f5d:	5d                   	pop    rbp
  220f5e:	c3                   	ret    
  220f5f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  220f63:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  220f67:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  220f6b:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
        return switch (form_value.*) {
  220f6f:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  220f73:	8a 51 18             	mov    dl,BYTE PTR [rcx+0x18]
  220f76:	40 88 d6             	mov    sil,dl
  220f79:	40 80 ee 02          	sub    sil,0x2
  220f7d:	48 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rcx
  220f84:	88 95 77 ff ff ff    	mov    BYTE PTR [rbp-0x89],dl
  220f8a:	40 88 b5 76 ff ff ff 	mov    BYTE PTR [rbp-0x8a],sil
  220f91:	74 26                	je     220fb9 <Die_getAttrSecOffset+0xc9>
  220f93:	eb 00                	jmp    220f95 <Die_getAttrSecOffset+0xa5>
  220f95:	8a 85 77 ff ff ff    	mov    al,BYTE PTR [rbp-0x89]
  220f9b:	24 0f                	and    al,0xf
  220f9d:	2c 05                	sub    al,0x5
  220f9f:	88 85 75 ff ff ff    	mov    BYTE PTR [rbp-0x8b],al
  220fa5:	74 2c                	je     220fd3 <Die_getAttrSecOffset+0xe3>
  220fa7:	eb 00                	jmp    220fa9 <Die_getAttrSecOffset+0xb9>
  220fa9:	48 8d 05 a0 f2 fd ff 	lea    rax,[rip+0xfffffffffffdf2a0]        # 200250 <__unnamed_131>
  220fb0:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  220fb7:	eb 38                	jmp    220ff1 <Die_getAttrSecOffset+0x101>
            FormValue.Const => |value| value.asUnsignedLe(),
  220fb9:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  220fc0:	8a 48 18             	mov    cl,BYTE PTR [rax+0x18]
  220fc3:	80 e9 02             	sub    cl,0x2
  220fc6:	88 8d 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],cl
  220fcc:	74 6a                	je     221038 <Die_getAttrSecOffset+0x148>
  220fce:	e9 a4 00 00 00       	jmp    221077 <Die_getAttrSecOffset+0x187>
            FormValue.SecOffset => |value| value,
  220fd3:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  220fda:	8a 48 18             	mov    cl,BYTE PTR [rax+0x18]
  220fdd:	80 e9 05             	sub    cl,0x5
  220fe0:	88 8d 66 ff ff ff    	mov    BYTE PTR [rbp-0x9a],cl
  220fe6:	0f 84 9b 00 00 00    	je     221087 <Die_getAttrSecOffset+0x197>
  220fec:	e9 c2 00 00 00       	jmp    2210b3 <Die_getAttrSecOffset+0x1c3>
        return switch (form_value.*) {
  220ff1:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  220ff8:	66 83 38 00          	cmp    WORD PTR [rax],0x0
  220ffc:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  221003:	74 0b                	je     221010 <Die_getAttrSecOffset+0x120>
  221005:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  221009:	e8 82 ac fe ff       	call   20bc90 <__zig_return_error>
  22100e:	eb 02                	jmp    221012 <Die_getAttrSecOffset+0x122>
  221010:	eb 00                	jmp    221012 <Die_getAttrSecOffset+0x122>
  221012:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
  221019:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22101c:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  221020:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  221023:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  221027:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  22102b:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  22102f:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  221036:	5d                   	pop    rbp
  221037:	c3                   	ret    
  221038:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
  22103c:	48 8d 55 a8          	lea    rdx,[rbp-0x58]
            FormValue.Const => |value| value.asUnsignedLe(),
  221040:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  221047:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22104a:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  22104e:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  221052:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
  221056:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
  22105a:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
  22105e:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  221062:	e8 49 54 ff ff       	call   2164b0 <Constant_asUnsignedLe>
  221067:	48 8d 45 e8          	lea    rax,[rbp-0x18]
        return switch (form_value.*) {
  22106b:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  221072:	e9 7a ff ff ff       	jmp    220ff1 <Die_getAttrSecOffset+0x101>
  221077:	48 8d 3d 62 25 02 00 	lea    rdi,[rip+0x22562]        # 2435e0 <__unnamed_29>
  22107e:	31 c0                	xor    eax,eax
  221080:	89 c6                	mov    esi,eax
            FormValue.Const => |value| value.asUnsignedLe(),
  221082:	e8 79 a5 fe ff       	call   20b600 <panic>
  221087:	48 8d 45 d8          	lea    rax,[rbp-0x28]
            FormValue.SecOffset => |value| value,
  22108b:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  221092:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
  221095:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  221099:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  22109d:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  2210a3:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
        return switch (form_value.*) {
  2210a7:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  2210ae:	e9 3e ff ff ff       	jmp    220ff1 <Die_getAttrSecOffset+0x101>
  2210b3:	48 8d 3d 26 25 02 00 	lea    rdi,[rip+0x22526]        # 2435e0 <__unnamed_29>
  2210ba:	31 c0                	xor    eax,eax
  2210bc:	89 c6                	mov    esi,eax
            FormValue.SecOffset => |value| value,
  2210be:	e8 3d a5 fe ff       	call   20b600 <panic>
  2210c3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2210ca:	84 00 00 00 00 00 

00000000002210d0 <InStream(ReadError)_readIntLe.64>:
        pub fn readIntLe(self: *Self, comptime T: type) !T {
  2210d0:	55                   	push   rbp
  2210d1:	48 89 e5             	mov    rbp,rsp
  2210d4:	48 83 ec 30          	sub    rsp,0x30
  2210d8:	48 89 f8             	mov    rax,rdi
  2210db:	48 8d 4d f0          	lea    rcx,[rbp-0x10]
  2210df:	41 b8 01 00 00 00    	mov    r8d,0x1
  2210e5:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
            return self.readInt(builtin.Endian.Little, T);
  2210e9:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  2210ed:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2210f1:	48 89 cf             	mov    rdi,rcx
  2210f4:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  2210f8:	44 89 c1             	mov    ecx,r8d
  2210fb:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  2210ff:	e8 3c 00 00 00       	call   221140 <InStream(ReadError)_readInt.65>
  221104:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  221109:	74 0b                	je     221116 <InStream(ReadError)_readIntLe.64+0x46>
  22110b:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  22110f:	e8 7c ab fe ff       	call   20bc90 <__zig_return_error>
  221114:	eb 02                	jmp    221118 <InStream(ReadError)_readIntLe.64+0x48>
  221116:	eb 00                	jmp    221118 <InStream(ReadError)_readIntLe.64+0x48>
  221118:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22111c:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  221120:	48 89 01             	mov    QWORD PTR [rcx],rax
  221123:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  221127:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  22112b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  22112f:	48 83 c4 30          	add    rsp,0x30
  221133:	5d                   	pop    rbp
  221134:	c3                   	ret    
  221135:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22113c:	00 00 00 00 

0000000000221140 <InStream(ReadError)_readInt.65>:
        pub fn readInt(self: *Self, endian: builtin.Endian, comptime T: type) !T {
  221140:	55                   	push   rbp
  221141:	48 89 e5             	mov    rbp,rsp
  221144:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  22114b:	88 c8                	mov    al,cl
  22114d:	49 89 f8             	mov    r8,rdi
  221150:	41 b1 01             	mov    r9b,0x1
  221153:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
  221157:	24 01                	and    al,0x1
  221159:	88 45 a7             	mov    BYTE PTR [rbp-0x59],al
            var bytes: [@sizeOf(T)]u8 = undefined;
  22115c:	48 8b 15 15 fb fd ff 	mov    rdx,QWORD PTR [rip+0xfffffffffffdfb15]        # 200c78 <__unnamed_132>
  221163:	48 89 55 9f          	mov    QWORD PTR [rbp-0x61],rdx
            try self.readNoEof(bytes[0..]);
  221167:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  22116b:	41 f6 c1 01          	test   r9b,0x1
  22116f:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
  221173:	4c 89 45 88          	mov    QWORD PTR [rbp-0x78],r8
  221177:	48 89 55 80          	mov    QWORD PTR [rbp-0x80],rdx
  22117b:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
  221182:	0f 85 ae 00 00 00    	jne    221236 <InStream(ReadError)_readInt.65+0xf6>
  221188:	e9 99 00 00 00       	jmp    221226 <InStream(ReadError)_readInt.65+0xe6>
  22118d:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  221191:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  221195:	66 89 85 76 ff ff ff 	mov    WORD PTR [rbp-0x8a],ax
  22119c:	e8 ef aa fe ff       	call   20bc90 <__zig_return_error>
  2211a1:	66 8b 85 76 ff ff ff 	mov    ax,WORD PTR [rbp-0x8a]
  2211a8:	66 89 45 d8          	mov    WORD PTR [rbp-0x28],ax
  2211ac:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  2211b0:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  2211b7:	48 89 39             	mov    QWORD PTR [rcx],rdi
  2211ba:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2211be:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  2211c2:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  2211c6:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  2211cd:	5d                   	pop    rbp
  2211ce:	c3                   	ret    
  2211cf:	48 8d 45 c0          	lea    rax,[rbp-0x40]
  2211d3:	48 8d 4d 9f          	lea    rcx,[rbp-0x61]
            return mem.readInt(bytes, T, endian);
  2211d7:	8a 55 a7             	mov    dl,BYTE PTR [rbp-0x59]
  2211da:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
  2211de:	48 c7 45 c8 08 00 00 	mov    QWORD PTR [rbp-0x38],0x8
  2211e5:	00 
  2211e6:	0f b6 f2             	movzx  esi,dl
  2211e9:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  2211ed:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  2211f4:	e8 77 00 00 00       	call   221270 <readInt.66>
  2211f9:	66 c7 45 b0 00 00    	mov    WORD PTR [rbp-0x50],0x0
  2211ff:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  221203:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  221207:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  22120e:	48 89 01             	mov    QWORD PTR [rcx],rax
  221211:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  221215:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  221219:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  22121d:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  221224:	5d                   	pop    rbp
  221225:	c3                   	ret    
  221226:	48 8d 3d ab 21 02 00 	lea    rdi,[rip+0x221ab]        # 2433d8 <__unnamed_20>
  22122d:	31 c0                	xor    eax,eax
  22122f:	89 c6                	mov    esi,eax
            try self.readNoEof(bytes[0..]);
  221231:	e8 ca a3 fe ff       	call   20b600 <panic>
  221236:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
  22123a:	48 8d 45 9f          	lea    rax,[rbp-0x61]
  22123e:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  221242:	48 c7 45 f8 08 00 00 	mov    QWORD PTR [rbp-0x8],0x8
  221249:	00 
  22124a:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  22124e:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  221252:	e8 09 27 ff ff       	call   213960 <InStream(ReadError)_readNoEof>
  221257:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  22125b:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  221260:	0f 85 27 ff ff ff    	jne    22118d <InStream(ReadError)_readInt.65+0x4d>
  221266:	e9 64 ff ff ff       	jmp    2211cf <InStream(ReadError)_readInt.65+0x8f>
  22126b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000221270 <readInt.66>:
pub fn readInt(bytes: []const u8, comptime T: type, endian: builtin.Endian) T {
  221270:	55                   	push   rbp
  221271:	48 89 e5             	mov    rbp,rsp
  221274:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  22127b:	40 88 f0             	mov    al,sil
  22127e:	24 01                	and    al,0x1
  221280:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
    var result: T = 0;
  221283:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  22128a:	00 
    switch (endian) {
  22128b:	8a 45 ff             	mov    al,BYTE PTR [rbp-0x1]
  22128e:	84 c0                	test   al,al
  221290:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  221294:	88 45 c7             	mov    BYTE PTR [rbp-0x39],al
  221297:	0f 85 83 00 00 00    	jne    221320 <readInt.66+0xb0>
  22129d:	eb 00                	jmp    22129f <readInt.66+0x2f>
  22129f:	8a 45 c7             	mov    al,BYTE PTR [rbp-0x39]
  2212a2:	f6 d0                	not    al
  2212a4:	a8 01                	test   al,0x1
  2212a6:	0f 84 f4 00 00 00    	je     2213a0 <readInt.66+0x130>
  2212ac:	eb 00                	jmp    2212ae <readInt.66+0x3e>
  2212ae:	48 8d 7d ef          	lea    rdi,[rbp-0x11]
  2212b2:	be aa 00 00 00       	mov    esi,0xaa
  2212b7:	b8 01 00 00 00       	mov    eax,0x1
  2212bc:	89 c2                	mov    edx,eax
            for (bytes) |b| {
  2212be:	e8 8d 35 01 00       	call   234850 <memset>
  2212c3:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  2212ca:	00 
  2212cb:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  2212cf:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
  2212d3:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
  2212d7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2212db:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  2212df:	48 39 c8             	cmp    rax,rcx
  2212e2:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  2212e6:	73 33                	jae    22131b <readInt.66+0xab>
  2212e8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2212ec:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  2212ef:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  2212f3:	40 8a 34 11          	mov    sil,BYTE PTR [rcx+rdx*1]
  2212f7:	40 88 75 ef          	mov    BYTE PTR [rbp-0x11],sil
                result = (result << 8) | b;
  2212fb:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  2212ff:	48 c1 e1 08          	shl    rcx,0x8
  221303:	0f b6 7d ef          	movzx  edi,BYTE PTR [rbp-0x11]
  221307:	41 89 f8             	mov    r8d,edi
  22130a:	4c 09 c1             	or     rcx,r8
  22130d:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
            for (bytes) |b| {
  221311:	48 83 c2 01          	add    rdx,0x1
  221315:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  221319:	eb bc                	jmp    2212d7 <readInt.66+0x67>
    switch (endian) {
  22131b:	e9 90 00 00 00       	jmp    2213b0 <readInt.66+0x140>
  221320:	48 8d 7d df          	lea    rdi,[rbp-0x21]
  221324:	be aa 00 00 00       	mov    esi,0xaa
  221329:	b8 01 00 00 00       	mov    eax,0x1
  22132e:	89 c2                	mov    edx,eax
            for (bytes) |b, index| {
  221330:	e8 1b 35 01 00       	call   234850 <memset>
  221335:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
  22133c:	00 
  22133d:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  221341:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
  221345:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  221349:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  22134d:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  221351:	48 39 c8             	cmp    rax,rcx
  221354:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  221358:	73 44                	jae    22139e <readInt.66+0x12e>
  22135a:	b8 08 00 00 00       	mov    eax,0x8
  22135f:	89 c1                	mov    ecx,eax
  221361:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  221365:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
  221368:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  22136c:	44 8a 04 3e          	mov    r8b,BYTE PTR [rsi+rdi*1]
  221370:	44 88 45 df          	mov    BYTE PTR [rbp-0x21],r8b
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  221374:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  221378:	0f b6 45 df          	movzx  eax,BYTE PTR [rbp-0x21]
  22137c:	41 89 c1             	mov    r9d,eax
  22137f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  221383:	48 f7 e1             	mul    rcx
  221386:	41 0f 90 c0          	seto   r8b
  22138a:	4c 89 4d 98          	mov    QWORD PTR [rbp-0x68],r9
  22138e:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
  221392:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  221396:	44 88 45 87          	mov    BYTE PTR [rbp-0x79],r8b
  22139a:	70 21                	jo     2213bd <readInt.66+0x14d>
  22139c:	eb 2f                	jmp    2213cd <readInt.66+0x15d>
    switch (endian) {
  22139e:	eb 10                	jmp    2213b0 <readInt.66+0x140>
  2213a0:	48 8d 3d 59 1f 02 00 	lea    rdi,[rip+0x21f59]        # 243300 <__unnamed_13>
  2213a7:	31 c0                	xor    eax,eax
  2213a9:	89 c6                	mov    esi,eax
  2213ab:	e8 50 a2 fe ff       	call   20b600 <panic>
    return result;
  2213b0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2213b4:	48 81 c4 80 00 00 00 	add    rsp,0x80
  2213bb:	5d                   	pop    rbp
  2213bc:	c3                   	ret    
  2213bd:	48 8d 3d 04 1e 02 00 	lea    rdi,[rip+0x21e04]        # 2431c8 <__unnamed_4>
  2213c4:	31 c0                	xor    eax,eax
  2213c6:	89 c6                	mov    esi,eax
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  2213c8:	e8 33 a2 fe ff       	call   20b600 <panic>
  2213cd:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  2213d1:	88 c1                	mov    cl,al
  2213d3:	89 c2                	mov    edx,eax
  2213d5:	83 e2 3f             	and    edx,0x3f
  2213d8:	89 d6                	mov    esi,edx
  2213da:	48 39 f0             	cmp    rax,rsi
  2213dd:	88 4d 86             	mov    BYTE PTR [rbp-0x7a],cl
  2213e0:	75 2b                	jne    22140d <readInt.66+0x19d>
  2213e2:	8a 45 86             	mov    al,BYTE PTR [rbp-0x7a]
  2213e5:	24 3f                	and    al,0x3f
  2213e7:	0f b6 c8             	movzx  ecx,al
  2213ea:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  2213ee:	48 d3 e2             	shl    rdx,cl
  2213f1:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  2213f5:	48 09 d6             	or     rsi,rdx
  2213f8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
            for (bytes) |b, index| {
  2213fc:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  221400:	48 83 c2 01          	add    rdx,0x1
  221404:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  221408:	e9 3c ff ff ff       	jmp    221349 <readInt.66+0xd9>
  22140d:	48 8d 3d 74 20 02 00 	lea    rdi,[rip+0x22074]        # 243488 <__unnamed_22>
  221414:	31 c0                	xor    eax,eax
  221416:	89 c6                	mov    esi,eax
                result = result | (T(b) << @intCast(ShiftType, index * 8));
  221418:	e8 e3 a1 fe ff       	call   20b600 <panic>
  22141d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000221420 <format.67>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  221420:	55                   	push   rbp
  221421:	48 89 e5             	mov    rbp,rsp
  221424:	48 83 ec 30          	sub    rsp,0x30
  221428:	48 8d 05 49 22 02 00 	lea    rax,[rip+0x22249]        # 243678 <__unnamed_133>
  22142f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  221433:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  221437:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
                        try output(context, fmt[start_index..i]);
  22143b:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22143f:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  221443:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  221447:	48 89 c2             	mov    rdx,rax
  22144a:	ff d1                	call   rcx
  22144c:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  221450:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  221455:	74 1b                	je     221472 <format.67+0x52>
  221457:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  22145b:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  22145f:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  221463:	e8 28 a8 fe ff       	call   20bc90 <__zig_return_error>
  221468:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  22146c:	48 83 c4 30          	add    rsp,0x30
  221470:	5d                   	pop    rbp
  221471:	c3                   	ret    
                    try formatType(args[next_arg], fmt[s..i], context, Errors, output);
  221472:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  221476:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  22147a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22147e:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  221482:	e8 79 00 00 00       	call   221500 <formatType.68>
  221487:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  22148b:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  221490:	74 1b                	je     2214ad <format.67+0x8d>
  221492:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  221496:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  22149a:	66 89 45 d4          	mov    WORD PTR [rbp-0x2c],ax
  22149e:	e8 ed a7 fe ff       	call   20bc90 <__zig_return_error>
  2214a3:	66 8b 45 d4          	mov    ax,WORD PTR [rbp-0x2c]
  2214a7:	48 83 c4 30          	add    rsp,0x30
  2214ab:	5d                   	pop    rbp
  2214ac:	c3                   	ret    
  2214ad:	48 8d 15 dc 21 02 00 	lea    rdx,[rip+0x221dc]        # 243690 <__unnamed_134>
        try output(context, fmt[start_index..]);
  2214b4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2214b8:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  2214bc:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  2214c0:	ff d0                	call   rax
  2214c2:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  2214c6:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  2214cb:	74 1b                	je     2214e8 <format.67+0xc8>
  2214cd:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  2214d1:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  2214d5:	66 89 45 d2          	mov    WORD PTR [rbp-0x2e],ax
  2214d9:	e8 b2 a7 fe ff       	call   20bc90 <__zig_return_error>
  2214de:	66 8b 45 d2          	mov    ax,WORD PTR [rbp-0x2e]
  2214e2:	48 83 c4 30          	add    rsp,0x30
  2214e6:	5d                   	pop    rbp
  2214e7:	c3                   	ret    
  2214e8:	31 c0                	xor    eax,eax
  2214ea:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  2214ed:	66 89 c8             	mov    ax,cx
  2214f0:	48 83 c4 30          	add    rsp,0x30
  2214f4:	5d                   	pop    rbp
  2214f5:	c3                   	ret    
  2214f6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  2214fd:	00 00 00 

0000000000221500 <formatType.68>:
pub fn formatType(
  221500:	55                   	push   rbp
  221501:	48 89 e5             	mov    rbp,rsp
  221504:	48 83 ec 30          	sub    rsp,0x30
  221508:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22150c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  221510:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return formatValue(value, fmt, context, Errors, output);
  221514:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  221518:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  22151c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  221520:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  221524:	e8 57 6f 00 00       	call   228480 <formatValue.104>
  221529:	66 83 f8 00          	cmp    ax,0x0
  22152d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  221531:	74 0b                	je     22153e <formatType.68+0x3e>
  221533:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  221537:	e8 54 a7 fe ff       	call   20bc90 <__zig_return_error>
  22153c:	eb 02                	jmp    221540 <formatType.68+0x40>
  22153e:	eb 00                	jmp    221540 <formatType.68+0x40>
  221540:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  221544:	48 83 c4 30          	add    rsp,0x30
  221548:	5d                   	pop    rbp
  221549:	c3                   	ret    
  22154a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000221550 <format.69>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  221550:	55                   	push   rbp
  221551:	48 89 e5             	mov    rbp,rsp
  221554:	48 83 ec 30          	sub    rsp,0x30
  221558:	48 8d 05 49 21 02 00 	lea    rax,[rip+0x22149]        # 2436a8 <__unnamed_135>
  22155f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  221563:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  221567:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
                        try output(context, fmt[start_index..i]);
  22156b:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22156f:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  221573:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  221577:	48 89 c2             	mov    rdx,rax
  22157a:	ff d1                	call   rcx
  22157c:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  221580:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  221585:	74 1b                	je     2215a2 <format.69+0x52>
  221587:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  22158b:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  22158f:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  221593:	e8 f8 a6 fe ff       	call   20bc90 <__zig_return_error>
  221598:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  22159c:	48 83 c4 30          	add    rsp,0x30
  2215a0:	5d                   	pop    rbp
  2215a1:	c3                   	ret    
                    try formatType(args[next_arg], fmt[s..i], context, Errors, output);
  2215a2:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  2215a6:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  2215aa:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2215ae:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  2215b2:	e8 79 00 00 00       	call   221630 <formatType.70>
  2215b7:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  2215bb:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  2215c0:	74 1b                	je     2215dd <format.69+0x8d>
  2215c2:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  2215c6:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  2215ca:	66 89 45 d4          	mov    WORD PTR [rbp-0x2c],ax
  2215ce:	e8 bd a6 fe ff       	call   20bc90 <__zig_return_error>
  2215d3:	66 8b 45 d4          	mov    ax,WORD PTR [rbp-0x2c]
  2215d7:	48 83 c4 30          	add    rsp,0x30
  2215db:	5d                   	pop    rbp
  2215dc:	c3                   	ret    
  2215dd:	48 8d 15 dc 20 02 00 	lea    rdx,[rip+0x220dc]        # 2436c0 <__unnamed_136>
        try output(context, fmt[start_index..]);
  2215e4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2215e8:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  2215ec:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  2215f0:	ff d0                	call   rax
  2215f2:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  2215f6:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  2215fb:	74 1b                	je     221618 <format.69+0xc8>
  2215fd:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  221601:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  221605:	66 89 45 d2          	mov    WORD PTR [rbp-0x2e],ax
  221609:	e8 82 a6 fe ff       	call   20bc90 <__zig_return_error>
  22160e:	66 8b 45 d2          	mov    ax,WORD PTR [rbp-0x2e]
  221612:	48 83 c4 30          	add    rsp,0x30
  221616:	5d                   	pop    rbp
  221617:	c3                   	ret    
  221618:	31 c0                	xor    eax,eax
  22161a:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  22161d:	66 89 c8             	mov    ax,cx
  221620:	48 83 c4 30          	add    rsp,0x30
  221624:	5d                   	pop    rbp
  221625:	c3                   	ret    
  221626:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  22162d:	00 00 00 

0000000000221630 <formatType.70>:
pub fn formatType(
  221630:	55                   	push   rbp
  221631:	48 89 e5             	mov    rbp,rsp
  221634:	48 83 ec 30          	sub    rsp,0x30
  221638:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22163c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  221640:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return formatValue(value, fmt, context, Errors, output);
  221644:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  221648:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  22164c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  221650:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  221654:	e8 77 6e 00 00       	call   2284d0 <formatValue.105>
  221659:	66 83 f8 00          	cmp    ax,0x0
  22165d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  221661:	74 0b                	je     22166e <formatType.70+0x3e>
  221663:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  221667:	e8 24 a6 fe ff       	call   20bc90 <__zig_return_error>
  22166c:	eb 02                	jmp    221670 <formatType.70+0x40>
  22166e:	eb 00                	jmp    221670 <formatType.70+0x40>
  221670:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  221674:	48 83 c4 30          	add    rsp,0x30
  221678:	5d                   	pop    rbp
  221679:	c3                   	ret    
  22167a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000221680 <getString>:
fn getString(st: *ElfStackTrace, offset: u64) ![]u8 {
  221680:	55                   	push   rbp
  221681:	48 89 e5             	mov    rbp,rsp
  221684:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  22168b:	48 89 f8             	mov    rax,rdi
  22168e:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
  221692:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
    const pos = st.debug_str.offset + offset;
  221696:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  22169a:	48 8b 49 70          	mov    rcx,QWORD PTR [rcx+0x70]
  22169e:	48 8b 49 18          	mov    rcx,QWORD PTR [rcx+0x18]
  2216a2:	48 03 4d b8          	add    rcx,QWORD PTR [rbp-0x48]
  2216a6:	41 0f 92 c0          	setb   r8b
  2216aa:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  2216ae:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  2216b2:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
  2216b6:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
  2216ba:	44 88 45 8f          	mov    BYTE PTR [rbp-0x71],r8b
  2216be:	0f 82 93 00 00 00    	jb     221757 <getString+0xd7>
  2216c4:	e9 9e 00 00 00       	jmp    221767 <getString+0xe7>
    try st.self_exe_file.seekTo(pos);
  2216c9:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  2216cd:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  2216d1:	66 89 45 8c          	mov    WORD PTR [rbp-0x74],ax
  2216d5:	e8 b6 a5 fe ff       	call   20bc90 <__zig_return_error>
  2216da:	66 8b 45 8c          	mov    ax,WORD PTR [rbp-0x74]
  2216de:	66 89 45 e0          	mov    WORD PTR [rbp-0x20],ax
  2216e2:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2216e6:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  2216ea:	48 89 39             	mov    QWORD PTR [rcx],rdi
  2216ed:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  2216f1:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  2216f5:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  2216f9:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  2216fd:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  221701:	48 81 c4 80 00 00 00 	add    rsp,0x80
  221708:	5d                   	pop    rbp
  221709:	c3                   	ret    
  22170a:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
    return st.readString();
  22170e:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  221712:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  221716:	e8 85 00 00 00       	call   2217a0 <ElfStackTrace_readString>
  22171b:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  221720:	74 0b                	je     22172d <getString+0xad>
  221722:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  221726:	e8 65 a5 fe ff       	call   20bc90 <__zig_return_error>
  22172b:	eb 02                	jmp    22172f <getString+0xaf>
  22172d:	eb 00                	jmp    22172f <getString+0xaf>
  22172f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  221733:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  221737:	48 89 01             	mov    QWORD PTR [rcx],rax
  22173a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  22173e:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  221742:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  221746:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  22174a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  22174e:	48 81 c4 80 00 00 00 	add    rsp,0x80
  221755:	5d                   	pop    rbp
  221756:	c3                   	ret    
  221757:	48 8d 3d 6a 1a 02 00 	lea    rdi,[rip+0x21a6a]        # 2431c8 <__unnamed_4>
  22175e:	31 c0                	xor    eax,eax
  221760:	89 c6                	mov    esi,eax
    const pos = st.debug_str.offset + offset;
  221762:	e8 99 9e fe ff       	call   20b600 <panic>
  221767:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  22176b:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
    try st.self_exe_file.seekTo(pos);
  22176f:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
  221773:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  221777:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  22177b:	e8 90 2a ff ff       	call   214210 <File_seekTo>
  221780:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  221784:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  221789:	0f 85 3a ff ff ff    	jne    2216c9 <getString+0x49>
  22178f:	e9 76 ff ff ff       	jmp    22170a <getString+0x8a>
  221794:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22179b:	00 00 00 00 00 

00000000002217a0 <ElfStackTrace_readString>:
        pub fn readString(self: *ElfStackTrace) ![]u8 {
  2217a0:	55                   	push   rbp
  2217a1:	48 89 e5             	mov    rbp,rsp
  2217a4:	48 83 ec 60          	sub    rsp,0x60
  2217a8:	48 89 f8             	mov    rax,rdi
  2217ab:	48 8d 4d f0          	lea    rcx,[rbp-0x10]
  2217af:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            var in_file_stream = io.FileInStream.init(&self.self_exe_file);
  2217b3:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  2217b7:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  2217bb:	48 89 cf             	mov    rdi,rcx
  2217be:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  2217c2:	48 89 d6             	mov    rsi,rdx
  2217c5:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  2217c9:	e8 62 21 ff ff       	call   213930 <FileInStream_init>
  2217ce:	48 8d 45 c0          	lea    rax,[rbp-0x40]
  2217d2:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  2217d6:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
  2217da:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  2217de:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
            const in_stream = &in_file_stream.stream;
  2217e2:	48 83 c0 08          	add    rax,0x8
  2217e6:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
            return readStringRaw(self.allocator(), in_stream);
  2217ea:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  2217ee:	e8 0d 44 ff ff       	call   215c00 <ElfStackTrace_allocator>
  2217f3:	48 8d 7d d8          	lea    rdi,[rbp-0x28]
  2217f7:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  2217fb:	48 8b 75 a8          	mov    rsi,QWORD PTR [rbp-0x58]
  2217ff:	48 89 c2             	mov    rdx,rax
  221802:	e8 e9 a4 ff ff       	call   21bcf0 <readStringRaw>
  221807:	66 83 7d d8 00       	cmp    WORD PTR [rbp-0x28],0x0
  22180c:	74 0b                	je     221819 <ElfStackTrace_readString+0x79>
  22180e:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  221812:	e8 79 a4 fe ff       	call   20bc90 <__zig_return_error>
  221817:	eb 02                	jmp    22181b <ElfStackTrace_readString+0x7b>
  221819:	eb 00                	jmp    22181b <ElfStackTrace_readString+0x7b>
  22181b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  22181f:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  221823:	48 89 01             	mov    QWORD PTR [rcx],rax
  221826:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  22182a:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  22182e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  221832:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  221836:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22183a:	48 83 c4 60          	add    rsp,0x60
  22183e:	5d                   	pop    rbp
  22183f:	c3                   	ret    

0000000000221840 <AlignedArrayList(u8,1)_init>:
        pub fn init(allocator: *Allocator) Self {
  221840:	55                   	push   rbp
  221841:	48 89 e5             	mov    rbp,rsp
  221844:	48 89 f8             	mov    rax,rdi
  221847:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
                .allocator = allocator,
  22184b:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
            return Self{
  22184f:	48 8b 0d 5a ea fd ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffdea5a]        # 2002b0 <__unnamed_100>
  221856:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  22185a:	48 8b 0d 57 ea fd ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffdea57]        # 2002b8 <__unnamed_100+0x8>
  221861:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  221865:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  22186c:	00 
  22186d:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  221871:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  221875:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  221878:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22187c:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  221880:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  221884:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  221888:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  22188c:	48 89 4f 18          	mov    QWORD PTR [rdi+0x18],rcx
  221890:	5d                   	pop    rbp
  221891:	c3                   	ret    
  221892:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  221899:	1f 84 00 00 00 00 00 

00000000002218a0 <AlignedArrayList(u8,1)_append>:
        pub fn append(self: *Self, item: T) !void {
  2218a0:	55                   	push   rbp
  2218a1:	48 89 e5             	mov    rbp,rsp
  2218a4:	48 83 ec 50          	sub    rsp,0x50
  2218a8:	88 d0                	mov    al,dl
  2218aa:	48 8d 4d f0          	lea    rcx,[rbp-0x10]
  2218ae:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  2218b2:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
            const new_item_ptr = try self.addOne();
  2218b5:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  2218b9:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
  2218bd:	48 89 cf             	mov    rdi,rcx
  2218c0:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
  2218c4:	e8 e7 00 00 00       	call   2219b0 <AlignedArrayList(u8,1)_addOne>
  2218c9:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  2218ce:	74 1b                	je     2218eb <AlignedArrayList(u8,1)_append+0x4b>
  2218d0:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  2218d4:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  2218d8:	66 89 45 be          	mov    WORD PTR [rbp-0x42],ax
  2218dc:	e8 af a3 fe ff       	call   20bc90 <__zig_return_error>
  2218e1:	66 8b 45 be          	mov    ax,WORD PTR [rbp-0x42]
  2218e5:	48 83 c4 50          	add    rsp,0x50
  2218e9:	5d                   	pop    rbp
  2218ea:	c3                   	ret    
  2218eb:	31 c0                	xor    eax,eax
  2218ed:	66 89 c1             	mov    cx,ax
  2218f0:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  2218f4:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
            new_item_ptr.* = item;
  2218f8:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  2218fc:	40 8a 75 d7          	mov    sil,BYTE PTR [rbp-0x29]
  221900:	40 88 32             	mov    BYTE PTR [rdx],sil
        pub fn append(self: *Self, item: T) !void {
  221903:	66 89 c8             	mov    ax,cx
  221906:	48 83 c4 50          	add    rsp,0x50
  22190a:	5d                   	pop    rbp
  22190b:	c3                   	ret    
  22190c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000221910 <AlignedArrayList(u8,1)_toSlice>:
        pub fn toSlice(self: Self) []align(A) T {
  221910:	55                   	push   rbp
  221911:	48 89 e5             	mov    rbp,rsp
  221914:	48 83 ec 40          	sub    rsp,0x40
  221918:	48 89 f8             	mov    rax,rdi
  22191b:	31 c9                	xor    ecx,ecx
  22191d:	89 ca                	mov    edx,ecx
            return self.items[0..self.len];
  22191f:	4c 8b 46 10          	mov    r8,QWORD PTR [rsi+0x10]
  221923:	4c 8b 4e 08          	mov    r9,QWORD PTR [rsi+0x8]
  221927:	4c 39 c2             	cmp    rdx,r8
  22192a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  22192e:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  221932:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  221936:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
  22193a:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
  22193e:	76 10                	jbe    221950 <AlignedArrayList(u8,1)_toSlice+0x40>
  221940:	48 8d 3d 91 1a 02 00 	lea    rdi,[rip+0x21a91]        # 2433d8 <__unnamed_20>
  221947:	31 c0                	xor    eax,eax
  221949:	89 c6                	mov    esi,eax
  22194b:	e8 b0 9c fe ff       	call   20b600 <panic>
  221950:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  221954:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  221958:	48 39 c8             	cmp    rax,rcx
  22195b:	76 10                	jbe    22196d <AlignedArrayList(u8,1)_toSlice+0x5d>
  22195d:	48 8d 3d 74 1a 02 00 	lea    rdi,[rip+0x21a74]        # 2433d8 <__unnamed_20>
  221964:	31 c0                	xor    eax,eax
  221966:	89 c6                	mov    esi,eax
  221968:	e8 93 9c fe ff       	call   20b600 <panic>
  22196d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  221971:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  221974:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  221978:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  22197c:	48 83 e9 00          	sub    rcx,0x0
  221980:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  221984:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  221988:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  22198c:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  22198f:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  221993:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  221997:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22199b:	48 83 c4 40          	add    rsp,0x40
  22199f:	5d                   	pop    rbp
  2219a0:	c3                   	ret    
  2219a1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2219a8:	0f 1f 84 00 00 00 00 
  2219af:	00 

00000000002219b0 <AlignedArrayList(u8,1)_addOne>:
        pub fn addOne(self: *Self) !*T {
  2219b0:	55                   	push   rbp
  2219b1:	48 89 e5             	mov    rbp,rsp
  2219b4:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  2219bb:	48 89 f8             	mov    rax,rdi
  2219be:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            const new_length = self.len + 1;
  2219c2:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  2219c6:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  2219ca:	48 83 c2 01          	add    rdx,0x1
  2219ce:	0f 92 c1             	setb   cl
  2219d1:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  2219d5:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  2219d9:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  2219dd:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  2219e1:	88 4d 9f             	mov    BYTE PTR [rbp-0x61],cl
  2219e4:	72 57                	jb     221a3d <AlignedArrayList(u8,1)_addOne+0x8d>
  2219e6:	eb 65                	jmp    221a4d <AlignedArrayList(u8,1)_addOne+0x9d>
            try self.ensureCapacity(new_length);
  2219e8:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  2219ec:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  2219f0:	66 89 45 9c          	mov    WORD PTR [rbp-0x64],ax
  2219f4:	e8 97 a2 fe ff       	call   20bc90 <__zig_return_error>
  2219f9:	66 8b 45 9c          	mov    ax,WORD PTR [rbp-0x64]
  2219fd:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  221a01:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  221a05:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  221a09:	48 89 39             	mov    QWORD PTR [rcx],rdi
  221a0c:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  221a10:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  221a14:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  221a18:	48 81 c4 80 00 00 00 	add    rsp,0x80
  221a1f:	5d                   	pop    rbp
  221a20:	c3                   	ret    
            const result = &self.items[self.len];
  221a21:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  221a25:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  221a29:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
  221a2d:	48 3b 48 08          	cmp    rcx,QWORD PTR [rax+0x8]
  221a31:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  221a35:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
  221a39:	72 4c                	jb     221a87 <AlignedArrayList(u8,1)_addOne+0xd7>
  221a3b:	eb 3a                	jmp    221a77 <AlignedArrayList(u8,1)_addOne+0xc7>
  221a3d:	48 8d 3d 84 17 02 00 	lea    rdi,[rip+0x21784]        # 2431c8 <__unnamed_4>
  221a44:	31 c0                	xor    eax,eax
  221a46:	89 c6                	mov    esi,eax
            const new_length = self.len + 1;
  221a48:	e8 b3 9b fe ff       	call   20b600 <panic>
  221a4d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  221a51:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
            try self.ensureCapacity(new_length);
  221a55:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  221a59:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  221a5d:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  221a61:	e8 6a 00 00 00       	call   221ad0 <AlignedArrayList(u8,1)_ensureCapacity>
  221a66:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  221a6a:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  221a6f:	0f 85 73 ff ff ff    	jne    2219e8 <AlignedArrayList(u8,1)_addOne+0x38>
  221a75:	eb aa                	jmp    221a21 <AlignedArrayList(u8,1)_addOne+0x71>
  221a77:	48 8d 3d 5a 19 02 00 	lea    rdi,[rip+0x2195a]        # 2433d8 <__unnamed_20>
  221a7e:	31 c0                	xor    eax,eax
  221a80:	89 c6                	mov    esi,eax
            const result = &self.items[self.len];
  221a82:	e8 79 9b fe ff       	call   20b600 <panic>
  221a87:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  221a8b:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  221a8f:	48 03 01             	add    rax,QWORD PTR [rcx]
  221a92:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
            self.len = new_length;
  221a96:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  221a9a:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  221a9e:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
            return result;
  221aa2:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  221aa6:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  221aac:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  221ab0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  221ab4:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  221ab8:	48 89 02             	mov    QWORD PTR [rdx],rax
  221abb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  221abf:	48 89 42 08          	mov    QWORD PTR [rdx+0x8],rax
  221ac3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  221ac7:	48 81 c4 80 00 00 00 	add    rsp,0x80
  221ace:	5d                   	pop    rbp
  221acf:	c3                   	ret    

0000000000221ad0 <AlignedArrayList(u8,1)_ensureCapacity>:
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  221ad0:	55                   	push   rbp
  221ad1:	48 89 e5             	mov    rbp,rsp
  221ad4:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  221adb:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  221adf:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
            var better_capacity = self.items.len;
  221ae3:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  221ae7:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  221aeb:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
            if (better_capacity >= new_capacity) return;
  221aef:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  221af3:	48 3b 55 c0          	cmp    rdx,QWORD PTR [rbp-0x40]
  221af7:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  221afb:	72 11                	jb     221b0e <AlignedArrayList(u8,1)_ensureCapacity+0x3e>
  221afd:	31 c0                	xor    eax,eax
  221aff:	66 89 c1             	mov    cx,ax
  221b02:	66 89 c8             	mov    ax,cx
  221b05:	48 81 c4 90 00 00 00 	add    rsp,0x90
  221b0c:	5d                   	pop    rbp
  221b0d:	c3                   	ret    
            while (true) {
  221b0e:	eb 00                	jmp    221b10 <AlignedArrayList(u8,1)_ensureCapacity+0x40>
  221b10:	eb 00                	jmp    221b12 <AlignedArrayList(u8,1)_ensureCapacity+0x42>
  221b12:	31 c0                	xor    eax,eax
  221b14:	88 c1                	mov    cl,al
                better_capacity += better_capacity / 2 + 8;
  221b16:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  221b1a:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  221b1e:	f6 c1 01             	test   cl,0x1
  221b21:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  221b25:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  221b29:	0f 85 8e 00 00 00    	jne    221bbd <AlignedArrayList(u8,1)_ensureCapacity+0xed>
  221b2f:	eb 72                	jmp    221ba3 <AlignedArrayList(u8,1)_ensureCapacity+0xd3>
                if (better_capacity >= new_capacity) break;
  221b31:	eb 02                	jmp    221b35 <AlignedArrayList(u8,1)_ensureCapacity+0x65>
            while (true) {
  221b33:	eb db                	jmp    221b10 <AlignedArrayList(u8,1)_ensureCapacity+0x40>
  221b35:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
            self.items = try self.allocator.alignedRealloc(T, A, self.items, better_capacity);
  221b39:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  221b3d:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  221b41:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
  221b45:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  221b49:	4c 8b 45 b8          	mov    r8,QWORD PTR [rbp-0x48]
  221b4d:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  221b51:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  221b55:	e8 d6 00 00 00       	call   221c30 <Allocator_alignedRealloc.71>
  221b5a:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  221b5f:	74 1e                	je     221b7f <AlignedArrayList(u8,1)_ensureCapacity+0xaf>
  221b61:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  221b65:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  221b69:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  221b6d:	e8 1e a1 fe ff       	call   20bc90 <__zig_return_error>
  221b72:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  221b76:	48 81 c4 90 00 00 00 	add    rsp,0x90
  221b7d:	5d                   	pop    rbp
  221b7e:	c3                   	ret    
  221b7f:	31 c0                	xor    eax,eax
  221b81:	66 89 c1             	mov    cx,ax
  221b84:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  221b88:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  221b8c:	48 89 16             	mov    QWORD PTR [rsi],rdx
  221b8f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  221b93:	48 89 56 08          	mov    QWORD PTR [rsi+0x8],rdx
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  221b97:	66 89 c8             	mov    ax,cx
  221b9a:	48 81 c4 90 00 00 00 	add    rsp,0x90
  221ba1:	5d                   	pop    rbp
  221ba2:	c3                   	ret    
                better_capacity += better_capacity / 2 + 8;
  221ba3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  221ba7:	48 c1 e8 01          	shr    rax,0x1
  221bab:	48 83 c0 08          	add    rax,0x8
  221baf:	0f 92 c1             	setb   cl
  221bb2:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  221bb6:	88 4d 87             	mov    BYTE PTR [rbp-0x79],cl
  221bb9:	72 12                	jb     221bcd <AlignedArrayList(u8,1)_ensureCapacity+0xfd>
  221bbb:	eb 20                	jmp    221bdd <AlignedArrayList(u8,1)_ensureCapacity+0x10d>
  221bbd:	48 8d 3d 7c 16 02 00 	lea    rdi,[rip+0x2167c]        # 243240 <__unnamed_7>
  221bc4:	31 c0                	xor    eax,eax
  221bc6:	89 c6                	mov    esi,eax
  221bc8:	e8 33 9a fe ff       	call   20b600 <panic>
  221bcd:	48 8d 3d f4 15 02 00 	lea    rdi,[rip+0x215f4]        # 2431c8 <__unnamed_4>
  221bd4:	31 c0                	xor    eax,eax
  221bd6:	89 c6                	mov    esi,eax
  221bd8:	e8 23 9a fe ff       	call   20b600 <panic>
  221bdd:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  221be1:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  221be5:	48 01 c8             	add    rax,rcx
  221be8:	0f 92 c2             	setb   dl
  221beb:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  221bf2:	88 95 77 ff ff ff    	mov    BYTE PTR [rbp-0x89],dl
  221bf8:	72 02                	jb     221bfc <AlignedArrayList(u8,1)_ensureCapacity+0x12c>
  221bfa:	eb 10                	jmp    221c0c <AlignedArrayList(u8,1)_ensureCapacity+0x13c>
  221bfc:	48 8d 3d c5 15 02 00 	lea    rdi,[rip+0x215c5]        # 2431c8 <__unnamed_4>
  221c03:	31 c0                	xor    eax,eax
  221c05:	89 c6                	mov    esi,eax
  221c07:	e8 f4 99 fe ff       	call   20b600 <panic>
  221c0c:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  221c13:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                if (better_capacity >= new_capacity) break;
  221c17:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  221c1b:	48 3b 4d c0          	cmp    rcx,QWORD PTR [rbp-0x40]
  221c1f:	0f 83 0c ff ff ff    	jae    221b31 <AlignedArrayList(u8,1)_ensureCapacity+0x61>
  221c25:	e9 09 ff ff ff       	jmp    221b33 <AlignedArrayList(u8,1)_ensureCapacity+0x63>
  221c2a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000221c30 <Allocator_alignedRealloc.71>:
    pub fn alignedRealloc(self: *Allocator, comptime T: type, comptime alignment: u29, old_mem: []align(alignment) T, n: usize) ![]align(alignment) T {
  221c30:	55                   	push   rbp
  221c31:	48 89 e5             	mov    rbp,rsp
  221c34:	53                   	push   rbx
  221c35:	48 81 ec 88 01 00 00 	sub    rsp,0x188
  221c3c:	48 89 f8             	mov    rax,rdi
  221c3f:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
  221c46:	4c 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],r8
        if (old_mem.len == 0) {
  221c4d:	48 83 79 08 00       	cmp    QWORD PTR [rcx+0x8],0x0
  221c52:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  221c59:	48 89 b5 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rsi
  221c60:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
  221c67:	48 89 bd b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rdi
  221c6e:	75 64                	jne    221cd4 <Allocator_alignedRealloc.71+0xa4>
  221c70:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
            return self.alignedAlloc(T, alignment, n);
  221c74:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  221c7b:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  221c82:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  221c89:	e8 c2 03 00 00       	call   222050 <Allocator_alignedAlloc.72>
  221c8e:	66 83 7d e0 00       	cmp    WORD PTR [rbp-0x20],0x0
  221c93:	74 0e                	je     221ca3 <Allocator_alignedRealloc.71+0x73>
  221c95:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  221c9c:	e8 ef 9f fe ff       	call   20bc90 <__zig_return_error>
  221ca1:	eb 02                	jmp    221ca5 <Allocator_alignedRealloc.71+0x75>
  221ca3:	eb 00                	jmp    221ca5 <Allocator_alignedRealloc.71+0x75>
  221ca5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  221ca9:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  221cb0:	48 89 01             	mov    QWORD PTR [rcx],rax
  221cb3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  221cb7:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  221cbb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  221cbf:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  221cc3:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  221cca:	48 81 c4 88 01 00 00 	add    rsp,0x188
  221cd1:	5b                   	pop    rbx
  221cd2:	5d                   	pop    rbp
  221cd3:	c3                   	ret    
        if (old_mem.len == 0) {
  221cd4:	eb 00                	jmp    221cd6 <Allocator_alignedRealloc.71+0xa6>
        if (n == 0) {
  221cd6:	48 83 bd 10 ff ff ff 	cmp    QWORD PTR [rbp-0xf0],0x0
  221cdd:	00 
  221cde:	75 4b                	jne    221d2b <Allocator_alignedRealloc.71+0xfb>
            self.free(old_mem);
  221ce0:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
  221ce7:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  221cee:	e8 1d 06 00 00       	call   222310 <Allocator_free.73>
            return ([*]align(alignment) T)(undefined)[0..0];
  221cf3:	48 8b 35 5e 75 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffe755e]        # 209258 <__unnamed_138>
  221cfa:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  221d01:	48 89 37             	mov    QWORD PTR [rdi],rsi
  221d04:	48 8b 35 55 75 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffe7555]        # 209260 <__unnamed_138+0x8>
  221d0b:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  221d0f:	48 8b 35 52 75 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffe7552]        # 209268 <__unnamed_138+0x10>
  221d16:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  221d1a:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  221d21:	48 81 c4 88 01 00 00 	add    rsp,0x188
  221d28:	5b                   	pop    rbx
  221d29:	5d                   	pop    rbp
  221d2a:	c3                   	ret    
        if (n == 0) {
  221d2b:	eb 00                	jmp    221d2d <Allocator_alignedRealloc.71+0xfd>
  221d2d:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  221d31:	b8 01 00 00 00       	mov    eax,0x1
  221d36:	89 c2                	mov    edx,eax
        const old_byte_slice = @sliceToBytes(old_mem);
  221d38:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  221d3f:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  221d42:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  221d46:	48 8b 71 08          	mov    rsi,QWORD PTR [rcx+0x8]
  221d4a:	48 c1 e6 00          	shl    rsi,0x0
  221d4e:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  221d52:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  221d56:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
  221d5d:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  221d61:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  221d68:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  221d6f:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  221d76:	e8 35 36 ff ff       	call   2153b0 <mul>
  221d7b:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  221d80:	74 44                	je     221dc6 <Allocator_alignedRealloc.71+0x196>
  221d82:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  221d89:	e8 02 9f fe ff       	call   20bc90 <__zig_return_error>
  221d8e:	48 8b 3d db 74 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe74db]        # 209270 <__unnamed_139>
  221d95:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  221d9c:	48 89 38             	mov    QWORD PTR [rax],rdi
  221d9f:	48 8b 3d d2 74 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe74d2]        # 209278 <__unnamed_139+0x8>
  221da6:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  221daa:	48 8b 3d cf 74 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe74cf]        # 209280 <__unnamed_139+0x10>
  221db1:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  221db5:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  221dbc:	48 81 c4 88 01 00 00 	add    rsp,0x188
  221dc3:	5b                   	pop    rbx
  221dc4:	5d                   	pop    rbp
  221dc5:	c3                   	ret    
  221dc6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  221dca:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  221dd1:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  221dd5:	48 8d 8d 00 ff ff ff 	lea    rcx,[rbp-0x100]
  221ddc:	41 b9 01 00 00 00    	mov    r9d,0x1
  221de2:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  221de9:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
        const byte_slice = try self.reallocFn(self, old_byte_slice, byte_count, alignment);
  221df0:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  221df7:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  221dfb:	48 8b b5 18 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe8]
  221e02:	4c 8b 85 f8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x108]
  221e09:	4c 8b 95 c8 fe ff ff 	mov    r10,QWORD PTR [rbp-0x138]
  221e10:	48 89 b5 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rsi
  221e17:	4c 89 d6             	mov    rsi,r10
  221e1a:	4c 8b 9d a8 fe ff ff 	mov    r11,QWORD PTR [rbp-0x158]
  221e21:	48 89 95 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdx
  221e28:	4c 89 da             	mov    rdx,r11
  221e2b:	48 8b 9d a0 fe ff ff 	mov    rbx,QWORD PTR [rbp-0x160]
  221e32:	ff d3                	call   rbx
  221e34:	66 83 7d 98 00       	cmp    WORD PTR [rbp-0x68],0x0
  221e39:	74 5d                	je     221e98 <Allocator_alignedRealloc.71+0x268>
  221e3b:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  221e3f:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  221e46:	66 89 85 9e fe ff ff 	mov    WORD PTR [rbp-0x162],ax
  221e4d:	e8 3e 9e fe ff       	call   20bc90 <__zig_return_error>
  221e52:	66 8b 85 9e fe ff ff 	mov    ax,WORD PTR [rbp-0x162]
  221e59:	66 89 85 68 ff ff ff 	mov    WORD PTR [rbp-0x98],ax
  221e60:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  221e67:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  221e6e:	48 89 39             	mov    QWORD PTR [rcx],rdi
  221e71:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  221e78:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  221e7c:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  221e83:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  221e87:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  221e8e:	48 81 c4 88 01 00 00 	add    rsp,0x188
  221e95:	5b                   	pop    rbx
  221e96:	5d                   	pop    rbp
  221e97:	c3                   	ret    
  221e98:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  221e9c:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  221ea3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  221ea7:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
        assert(byte_slice.len == byte_count);
  221eae:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  221eb5:	48 3b 85 f8 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x108]
  221ebc:	0f 94 c1             	sete   cl
  221ebf:	0f b6 f9             	movzx  edi,cl
  221ec2:	e8 39 91 fe ff       	call   20b000 <assert>
        if (n > old_mem.len) {
  221ec7:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  221ece:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  221ed5:	48 3b 42 08          	cmp    rax,QWORD PTR [rdx+0x8]
  221ed9:	76 78                	jbe    221f53 <Allocator_alignedRealloc.71+0x323>
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  221edb:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  221ee2:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  221ee9:	48 39 c8             	cmp    rax,rcx
  221eec:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  221ef3:	48 89 8d 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rcx
  221efa:	0f 86 e2 00 00 00    	jbe    221fe2 <Allocator_alignedRealloc.71+0x3b2>
  221f00:	e9 cd 00 00 00       	jmp    221fd2 <Allocator_alignedRealloc.71+0x3a2>
  221f05:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  221f0c:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
  221f13:	48 39 c8             	cmp    rax,rcx
  221f16:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  221f1d:	73 32                	jae    221f51 <Allocator_alignedRealloc.71+0x321>
  221f1f:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  221f26:	48 03 8d 58 ff ff ff 	add    rcx,QWORD PTR [rbp-0xa8]
  221f2d:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
                byte.* = undefined;
  221f34:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  221f3b:	88 01                	mov    BYTE PTR [rcx],al
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  221f3d:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  221f44:	48 83 c1 01          	add    rcx,0x1
  221f48:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
  221f4f:	eb b4                	jmp    221f05 <Allocator_alignedRealloc.71+0x2d5>
        if (n > old_mem.len) {
  221f51:	eb 02                	jmp    221f55 <Allocator_alignedRealloc.71+0x325>
  221f53:	eb 00                	jmp    221f55 <Allocator_alignedRealloc.71+0x325>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  221f55:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  221f5c:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
  221f63:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  221f6a:	48 c1 e0 00          	shl    rax,0x0
  221f6e:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  221f75:	66 c7 85 20 ff ff ff 	mov    WORD PTR [rbp-0xe0],0x0
  221f7c:	00 00 
  221f7e:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  221f85:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  221f8c:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  221f93:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  221f9a:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  221fa1:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  221fa8:	48 89 01             	mov    QWORD PTR [rcx],rax
  221fab:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  221fb2:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  221fb6:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  221fbd:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  221fc1:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  221fc8:	48 81 c4 88 01 00 00 	add    rsp,0x188
  221fcf:	5b                   	pop    rbx
  221fd0:	5d                   	pop    rbp
  221fd1:	c3                   	ret    
  221fd2:	48 8d 3d ff 13 02 00 	lea    rdi,[rip+0x213ff]        # 2433d8 <__unnamed_20>
  221fd9:	31 c0                	xor    eax,eax
  221fdb:	89 c6                	mov    esi,eax
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  221fdd:	e8 1e 96 fe ff       	call   20b600 <panic>
  221fe2:	be aa 00 00 00       	mov    esi,0xaa
  221fe7:	b8 08 00 00 00       	mov    eax,0x8
  221fec:	89 c2                	mov    edx,eax
  221fee:	48 8d 8d e0 fe ff ff 	lea    rcx,[rbp-0x120]
  221ff5:	48 8b bd 90 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x170]
  221ffc:	48 03 bd e8 fe ff ff 	add    rdi,QWORD PTR [rbp-0x118]
  222003:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
  22200a:	48 8b bd 88 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x178]
  222011:	4c 8b 85 90 fe ff ff 	mov    r8,QWORD PTR [rbp-0x170]
  222018:	4c 29 c7             	sub    rdi,r8
  22201b:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  222022:	48 89 cf             	mov    rdi,rcx
  222025:	e8 26 28 01 00       	call   234850 <memset>
  22202a:	48 c7 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],0x0
  222031:	00 00 00 00 
  222035:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  22203c:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  222043:	e9 bd fe ff ff       	jmp    221f05 <Allocator_alignedRealloc.71+0x2d5>
  222048:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  22204f:	00 

0000000000222050 <Allocator_alignedAlloc.72>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  222050:	55                   	push   rbp
  222051:	48 89 e5             	mov    rbp,rsp
  222054:	48 81 ec 10 01 00 00 	sub    rsp,0x110
  22205b:	48 89 f8             	mov    rax,rdi
  22205e:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  222065:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  22206c:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  222073:	00 
  222074:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  22207b:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  222082:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  222089:	75 37                	jne    2220c2 <Allocator_alignedAlloc.72+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  22208b:	48 8b 05 f6 71 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe71f6]        # 209288 <__unnamed_140>
  222092:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  222099:	48 89 01             	mov    QWORD PTR [rcx],rax
  22209c:	48 8b 05 ed 71 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe71ed]        # 209290 <__unnamed_140+0x8>
  2220a3:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2220a7:	48 8b 05 ea 71 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe71ea]        # 209298 <__unnamed_140+0x10>
  2220ae:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  2220b2:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  2220b9:	48 81 c4 10 01 00 00 	add    rsp,0x110
  2220c0:	5d                   	pop    rbp
  2220c1:	c3                   	ret    
        if (n == 0) {
  2220c2:	eb 00                	jmp    2220c4 <Allocator_alignedAlloc.72+0x74>
  2220c4:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  2220c8:	b8 01 00 00 00       	mov    eax,0x1
  2220cd:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  2220cf:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  2220d6:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  2220dd:	e8 ce 32 ff ff       	call   2153b0 <mul>
  2220e2:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  2220e7:	74 43                	je     22212c <Allocator_alignedAlloc.72+0xdc>
  2220e9:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  2220f0:	e8 9b 9b fe ff       	call   20bc90 <__zig_return_error>
  2220f5:	48 8b 3d a4 71 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe71a4]        # 2092a0 <__unnamed_141>
  2220fc:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  222103:	48 89 38             	mov    QWORD PTR [rax],rdi
  222106:	48 8b 3d 9b 71 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe719b]        # 2092a8 <__unnamed_141+0x8>
  22210d:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  222111:	48 8b 3d 98 71 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe7198]        # 2092b0 <__unnamed_141+0x10>
  222118:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  22211c:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  222123:	48 81 c4 10 01 00 00 	add    rsp,0x110
  22212a:	5d                   	pop    rbp
  22212b:	c3                   	ret    
  22212c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  222130:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  222137:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  22213b:	41 b8 01 00 00 00    	mov    r8d,0x1
  222141:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  222148:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  22214f:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  222156:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  222159:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  222160:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  222167:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  22216e:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  222175:	4c 89 ce             	mov    rsi,r9
  222178:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  22217f:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  222186:	4c 89 d1             	mov    rcx,r10
  222189:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  222190:	41 ff d3             	call   r11
  222193:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  222198:	74 50                	je     2221ea <Allocator_alignedAlloc.72+0x19a>
  22219a:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  22219e:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  2221a5:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  2221ac:	e8 df 9a fe ff       	call   20bc90 <__zig_return_error>
  2221b1:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  2221b8:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  2221bc:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  2221c0:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  2221c7:	48 89 39             	mov    QWORD PTR [rcx],rdi
  2221ca:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  2221ce:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  2221d2:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  2221d6:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  2221da:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  2221e1:	48 81 c4 10 01 00 00 	add    rsp,0x110
  2221e8:	5d                   	pop    rbp
  2221e9:	c3                   	ret    
  2221ea:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2221ee:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  2221f5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2221f9:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  222200:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  222207:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  22220e:	0f 94 c1             	sete   cl
  222211:	0f b6 f9             	movzx  edi,cl
  222214:	e8 e7 8d fe ff       	call   20b000 <assert>
  222219:	be aa 00 00 00       	mov    esi,0xaa
  22221e:	bf 08 00 00 00       	mov    edi,0x8
  222223:	89 fa                	mov    edx,edi
  222225:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  22222c:	48 89 c7             	mov    rdi,rax
  22222f:	e8 1c 26 01 00       	call   234850 <memset>
  222234:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  22223b:	00 00 00 00 
  22223f:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  222246:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  22224d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  222254:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  22225b:	48 39 c8             	cmp    rax,rcx
  22225e:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  222265:	73 32                	jae    222299 <Allocator_alignedAlloc.72+0x249>
  222267:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22226e:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  222275:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  22227c:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  222283:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  222285:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22228c:	48 83 c1 01          	add    rcx,0x1
  222290:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  222297:	eb b4                	jmp    22224d <Allocator_alignedAlloc.72+0x1fd>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  222299:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  2222a0:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  2222a4:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  2222ab:	48 c1 e0 00          	shl    rax,0x0
  2222af:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  2222b3:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  2222ba:	00 00 
  2222bc:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  2222c0:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  2222c7:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  2222cb:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  2222cf:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  2222d6:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  2222dd:	48 89 01             	mov    QWORD PTR [rcx],rax
  2222e0:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  2222e7:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2222eb:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  2222ef:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  2222f3:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  2222fa:	48 81 c4 10 01 00 00 	add    rsp,0x110
  222301:	5d                   	pop    rbp
  222302:	c3                   	ret    
  222303:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22230a:	84 00 00 00 00 00 

0000000000222310 <Allocator_free.73>:
    pub fn free(self: *Allocator, memory: var) void {
  222310:	55                   	push   rbp
  222311:	48 89 e5             	mov    rbp,rsp
  222314:	48 83 ec 60          	sub    rsp,0x60
  222318:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
        const bytes = @sliceToBytes(memory);
  22231c:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  22231f:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  222323:	48 8b 76 08          	mov    rsi,QWORD PTR [rsi+0x8]
  222327:	48 c1 e6 00          	shl    rsi,0x0
  22232b:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22232f:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  222333:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  222337:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  22233b:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        if (bytes.len == 0) return;
  22233f:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
  222344:	75 06                	jne    22234c <Allocator_free.73+0x3c>
  222346:	48 83 c4 60          	add    rsp,0x60
  22234a:	5d                   	pop    rbp
  22234b:	c3                   	ret    
  22234c:	31 c0                	xor    eax,eax
  22234e:	89 c1                	mov    ecx,eax
        const non_const_ptr = @intToPtr([*]u8, @ptrToInt(bytes.ptr));
  222350:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  222354:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
        self.freeFn(self, non_const_ptr[0..bytes.len]);
  222358:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  22235c:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  222360:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  222364:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  222368:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
  22236c:	48 39 f1             	cmp    rcx,rsi
  22236f:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
  222373:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
  222377:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  22237b:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  22237f:	76 10                	jbe    222391 <Allocator_free.73+0x81>
  222381:	48 8d 3d 50 10 02 00 	lea    rdi,[rip+0x21050]        # 2433d8 <__unnamed_20>
  222388:	31 c0                	xor    eax,eax
  22238a:	89 c6                	mov    esi,eax
  22238c:	e8 6f 92 fe ff       	call   20b600 <panic>
  222391:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
  222395:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  222399:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  22239d:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  2223a1:	48 83 e9 00          	sub    rcx,0x0
  2223a5:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  2223a9:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  2223ad:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  2223b1:	ff d1                	call   rcx
    pub fn free(self: *Allocator, memory: var) void {
  2223b3:	48 83 c4 60          	add    rsp,0x60
  2223b7:	5d                   	pop    rbp
  2223b8:	c3                   	ret    
  2223b9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

00000000002223c0 <InStream(ReadError)_readByteSigned>:
        pub fn readByteSigned(self: *Self) !i8 {
  2223c0:	55                   	push   rbp
  2223c1:	48 89 e5             	mov    rbp,rsp
  2223c4:	48 83 ec 50          	sub    rsp,0x50
  2223c8:	48 89 f8             	mov    rax,rdi
  2223cb:	48 8d 4d f8          	lea    rcx,[rbp-0x8]
  2223cf:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
            return @bitCast(i8, try self.readByte());
  2223d3:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  2223d7:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
  2223db:	48 89 cf             	mov    rdi,rcx
  2223de:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  2223e2:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  2223e6:	e8 f5 16 ff ff       	call   213ae0 <InStream(ReadError)_readByte>
  2223eb:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  2223f0:	74 2c                	je     22241e <InStream(ReadError)_readByteSigned+0x5e>
  2223f2:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  2223f6:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2223fa:	66 89 45 be          	mov    WORD PTR [rbp-0x42],ax
  2223fe:	e8 8d 98 fe ff       	call   20bc90 <__zig_return_error>
  222403:	66 8b 45 be          	mov    ax,WORD PTR [rbp-0x42]
  222407:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  22240b:	8b 4d e8             	mov    ecx,DWORD PTR [rbp-0x18]
  22240e:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  222412:	89 0f                	mov    DWORD PTR [rdi],ecx
  222414:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  222418:	48 83 c4 50          	add    rsp,0x50
  22241c:	5d                   	pop    rbp
  22241d:	c3                   	ret    
  22241e:	8a 45 fa             	mov    al,BYTE PTR [rbp-0x6]
  222421:	66 c7 45 e0 00 00    	mov    WORD PTR [rbp-0x20],0x0
  222427:	88 45 e2             	mov    BYTE PTR [rbp-0x1e],al
  22242a:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
  22242d:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  222431:	89 0a                	mov    DWORD PTR [rdx],ecx
  222433:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  222437:	48 83 c4 50          	add    rsp,0x50
  22243b:	5d                   	pop    rbp
  22243c:	c3                   	ret    
  22243d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000222440 <Allocator_alloc.74>:
    pub fn alloc(self: *Allocator, comptime T: type, n: usize) ![]T {
  222440:	55                   	push   rbp
  222441:	48 89 e5             	mov    rbp,rsp
  222444:	48 83 ec 40          	sub    rsp,0x40
  222448:	48 89 f8             	mov    rax,rdi
  22244b:	4c 8d 45 e8          	lea    r8,[rbp-0x18]
  22244f:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  222453:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
        return self.alignedAlloc(T, @alignOf(T), n);
  222457:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  22245b:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  22245f:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
  222463:	4c 89 c7             	mov    rdi,r8
  222466:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  22246a:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  22246e:	e8 dd fb ff ff       	call   222050 <Allocator_alignedAlloc.72>
  222473:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  222478:	74 0b                	je     222485 <Allocator_alloc.74+0x45>
  22247a:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  22247e:	e8 0d 98 fe ff       	call   20bc90 <__zig_return_error>
  222483:	eb 02                	jmp    222487 <Allocator_alloc.74+0x47>
  222485:	eb 00                	jmp    222487 <Allocator_alloc.74+0x47>
  222487:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22248b:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  22248f:	48 89 01             	mov    QWORD PTR [rcx],rax
  222492:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  222496:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  22249a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  22249e:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  2224a2:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  2224a6:	48 83 c4 40          	add    rsp,0x40
  2224aa:	5d                   	pop    rbp
  2224ab:	c3                   	ret    
  2224ac:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

00000000002224b0 <AlignedArrayList([]u8,8)_init>:
        pub fn init(allocator: *Allocator) Self {
  2224b0:	55                   	push   rbp
  2224b1:	48 89 e5             	mov    rbp,rsp
  2224b4:	48 89 f8             	mov    rax,rdi
  2224b7:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
                .allocator = allocator,
  2224bb:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
            return Self{
  2224bf:	48 8b 0d ea dd fd ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffdddea]        # 2002b0 <__unnamed_100>
  2224c6:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  2224ca:	48 8b 0d e7 dd fd ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffddde7]        # 2002b8 <__unnamed_100+0x8>
  2224d1:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  2224d5:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  2224dc:	00 
  2224dd:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2224e1:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  2224e5:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  2224e8:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2224ec:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  2224f0:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  2224f4:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  2224f8:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  2224fc:	48 89 4f 18          	mov    QWORD PTR [rdi+0x18],rcx
  222500:	5d                   	pop    rbp
  222501:	c3                   	ret    
  222502:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  222509:	1f 84 00 00 00 00 00 

0000000000222510 <AlignedArrayList([]u8,8)_append>:
        pub fn append(self: *Self, item: T) !void {
  222510:	55                   	push   rbp
  222511:	48 89 e5             	mov    rbp,rsp
  222514:	48 83 ec 50          	sub    rsp,0x50
  222518:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  22251c:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
            const new_item_ptr = try self.addOne();
  222520:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  222524:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  222528:	48 89 c7             	mov    rdi,rax
  22252b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  22252f:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
  222533:	48 89 c6             	mov    rsi,rax
  222536:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  22253a:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  22253e:	48 89 ca             	mov    rdx,rcx
  222541:	e8 fa 0b 00 00       	call   223140 <AlignedArrayList([]u8,8)_addOne>
  222546:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  22254b:	74 1b                	je     222568 <AlignedArrayList([]u8,8)_append+0x58>
  22254d:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  222551:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  222555:	66 89 45 b6          	mov    WORD PTR [rbp-0x4a],ax
  222559:	e8 32 97 fe ff       	call   20bc90 <__zig_return_error>
  22255e:	66 8b 45 b6          	mov    ax,WORD PTR [rbp-0x4a]
  222562:	48 83 c4 50          	add    rsp,0x50
  222566:	5d                   	pop    rbp
  222567:	c3                   	ret    
  222568:	31 c0                	xor    eax,eax
  22256a:	66 89 c1             	mov    cx,ax
  22256d:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  222571:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            new_item_ptr.* = item;
  222575:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  222579:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  22257d:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  222580:	48 89 3a             	mov    QWORD PTR [rdx],rdi
  222583:	48 8b 7e 08          	mov    rdi,QWORD PTR [rsi+0x8]
  222587:	48 89 7a 08          	mov    QWORD PTR [rdx+0x8],rdi
        pub fn append(self: *Self, item: T) !void {
  22258b:	66 89 c8             	mov    ax,cx
  22258e:	48 83 c4 50          	add    rsp,0x50
  222592:	5d                   	pop    rbp
  222593:	c3                   	ret    
  222594:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22259b:	00 00 00 00 00 

00000000002225a0 <AlignedArrayList(FileEntry,8)_init>:
        pub fn init(allocator: *Allocator) Self {
  2225a0:	55                   	push   rbp
  2225a1:	48 89 e5             	mov    rbp,rsp
  2225a4:	48 89 f8             	mov    rax,rdi
  2225a7:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
                .allocator = allocator,
  2225ab:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
            return Self{
  2225af:	48 8b 0d fa dc fd ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffddcfa]        # 2002b0 <__unnamed_100>
  2225b6:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  2225ba:	48 8b 0d f7 dc fd ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffddcf7]        # 2002b8 <__unnamed_100+0x8>
  2225c1:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  2225c5:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  2225cc:	00 
  2225cd:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2225d1:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  2225d5:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  2225d8:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2225dc:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  2225e0:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  2225e4:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  2225e8:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  2225ec:	48 89 4f 18          	mov    QWORD PTR [rdi+0x18],rcx
  2225f0:	5d                   	pop    rbp
  2225f1:	c3                   	ret    
  2225f2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2225f9:	1f 84 00 00 00 00 00 

0000000000222600 <AlignedArrayList([]u8,8)_toSliceConst>:
        pub fn toSliceConst(self: Self) []align(A) const T {
  222600:	55                   	push   rbp
  222601:	48 89 e5             	mov    rbp,rsp
  222604:	48 83 ec 40          	sub    rsp,0x40
  222608:	48 89 f8             	mov    rax,rdi
  22260b:	31 c9                	xor    ecx,ecx
  22260d:	89 ca                	mov    edx,ecx
            return self.items[0..self.len];
  22260f:	4c 8b 46 10          	mov    r8,QWORD PTR [rsi+0x10]
  222613:	4c 8b 4e 08          	mov    r9,QWORD PTR [rsi+0x8]
  222617:	4c 39 c2             	cmp    rdx,r8
  22261a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  22261e:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  222622:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  222626:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
  22262a:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
  22262e:	76 10                	jbe    222640 <AlignedArrayList([]u8,8)_toSliceConst+0x40>
  222630:	48 8d 3d a1 0d 02 00 	lea    rdi,[rip+0x20da1]        # 2433d8 <__unnamed_20>
  222637:	31 c0                	xor    eax,eax
  222639:	89 c6                	mov    esi,eax
  22263b:	e8 c0 8f fe ff       	call   20b600 <panic>
  222640:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  222644:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  222648:	48 39 c8             	cmp    rax,rcx
  22264b:	76 10                	jbe    22265d <AlignedArrayList([]u8,8)_toSliceConst+0x5d>
  22264d:	48 8d 3d 84 0d 02 00 	lea    rdi,[rip+0x20d84]        # 2433d8 <__unnamed_20>
  222654:	31 c0                	xor    eax,eax
  222656:	89 c6                	mov    esi,eax
  222658:	e8 a3 8f fe ff       	call   20b600 <panic>
  22265d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  222661:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  222664:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  222668:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  22266c:	48 83 e9 00          	sub    rcx,0x0
  222670:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  222674:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  222678:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  22267c:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  22267f:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  222683:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  222687:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22268b:	48 83 c4 40          	add    rsp,0x40
  22268f:	5d                   	pop    rbp
  222690:	c3                   	ret    
  222691:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  222698:	0f 1f 84 00 00 00 00 
  22269f:	00 

00000000002226a0 <LineNumberProgram_init>:
    pub fn init(is_stmt: bool, include_dirs: []const []const u8, file_entries: *ArrayList(FileEntry), target_address: usize) LineNumberProgram {
  2226a0:	55                   	push   rbp
  2226a1:	48 89 e5             	mov    rbp,rsp
  2226a4:	41 56                	push   r14
  2226a6:	53                   	push   rbx
  2226a7:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  2226ae:	40 88 f0             	mov    al,sil
  2226b1:	49 89 f9             	mov    r9,rdi
  2226b4:	be 70 00 00 00       	mov    esi,0x70
  2226b9:	41 89 f2             	mov    r10d,esi
  2226bc:	4c 8d 5d 80          	lea    r11,[rbp-0x80]
  2226c0:	24 01                	and    al,0x1
  2226c2:	88 85 7f ff ff ff    	mov    BYTE PTR [rbp-0x81],al
  2226c8:	48 89 8d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rcx
  2226cf:	4c 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],r8
            .is_stmt = is_stmt,
  2226d6:	8a 85 7f ff ff ff    	mov    al,BYTE PTR [rbp-0x81]
            .file_entries = file_entries,
  2226dc:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
            .target_address = target_address,
  2226e3:	4c 8b 85 68 ff ff ff 	mov    r8,QWORD PTR [rbp-0x98]
        return LineNumberProgram{
  2226ea:	48 c7 45 80 00 00 00 	mov    QWORD PTR [rbp-0x80],0x0
  2226f1:	00 
  2226f2:	48 c7 45 88 01 00 00 	mov    QWORD PTR [rbp-0x78],0x1
  2226f9:	00 
  2226fa:	48 c7 45 90 01 00 00 	mov    QWORD PTR [rbp-0x70],0x1
  222701:	00 
  222702:	48 c7 45 98 00 00 00 	mov    QWORD PTR [rbp-0x68],0x0
  222709:	00 
  22270a:	24 01                	and    al,0x1
  22270c:	88 45 a0             	mov    BYTE PTR [rbp-0x60],al
  22270f:	c6 45 a1 00          	mov    BYTE PTR [rbp-0x5f],0x0
  222713:	c6 45 a2 00          	mov    BYTE PTR [rbp-0x5e],0x0
  222717:	4c 89 45 a8          	mov    QWORD PTR [rbp-0x58],r8
  22271b:	4c 8b 02             	mov    r8,QWORD PTR [rdx]
  22271e:	4c 89 45 b0          	mov    QWORD PTR [rbp-0x50],r8
  222722:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  222726:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  22272a:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
  22272e:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
  222735:	00 
  222736:	4c 89 75 d0          	mov    QWORD PTR [rbp-0x30],r14
  22273a:	4c 89 75 d8          	mov    QWORD PTR [rbp-0x28],r14
  22273e:	4c 89 75 e0          	mov    QWORD PTR [rbp-0x20],r14
  222742:	88 d8                	mov    al,bl
  222744:	24 01                	and    al,0x1
  222746:	88 45 e8             	mov    BYTE PTR [rbp-0x18],al
  222749:	88 d8                	mov    al,bl
  22274b:	24 01                	and    al,0x1
  22274d:	88 45 e9             	mov    BYTE PTR [rbp-0x17],al
  222750:	80 e3 01             	and    bl,0x1
  222753:	88 5d ea             	mov    BYTE PTR [rbp-0x16],bl
  222756:	4c 89 de             	mov    rsi,r11
  222759:	4c 89 d2             	mov    rdx,r10
  22275c:	4c 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r9
  222763:	e8 38 21 01 00       	call   2348a0 <memcpy>
  222768:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  22276f:	48 81 c4 90 00 00 00 	add    rsp,0x90
  222776:	5b                   	pop    rbx
  222777:	41 5e                	pop    r14
  222779:	5d                   	pop    rbp
  22277a:	c3                   	ret    
  22277b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000222780 <AlignedArrayList(FileEntry,8)_append>:
        pub fn append(self: *Self, item: T) !void {
  222780:	55                   	push   rbp
  222781:	48 89 e5             	mov    rbp,rsp
  222784:	48 83 ec 60          	sub    rsp,0x60
  222788:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  22278c:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
            const new_item_ptr = try self.addOne();
  222790:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  222794:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  222798:	48 89 c7             	mov    rdi,rax
  22279b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  22279f:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
  2227a3:	48 89 c6             	mov    rsi,rax
  2227a6:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  2227aa:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  2227ae:	48 89 ca             	mov    rdx,rcx
  2227b1:	e8 4a 14 00 00       	call   223c00 <AlignedArrayList(FileEntry,8)_addOne>
  2227b6:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  2227bb:	74 1b                	je     2227d8 <AlignedArrayList(FileEntry,8)_append+0x58>
  2227bd:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  2227c1:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2227c5:	66 89 45 b6          	mov    WORD PTR [rbp-0x4a],ax
  2227c9:	e8 c2 94 fe ff       	call   20bc90 <__zig_return_error>
  2227ce:	66 8b 45 b6          	mov    ax,WORD PTR [rbp-0x4a]
  2227d2:	48 83 c4 60          	add    rsp,0x60
  2227d6:	5d                   	pop    rbp
  2227d7:	c3                   	ret    
  2227d8:	31 c0                	xor    eax,eax
  2227da:	66 89 c1             	mov    cx,ax
  2227dd:	b8 28 00 00 00       	mov    eax,0x28
  2227e2:	89 c2                	mov    edx,eax
  2227e4:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2227e8:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
            new_item_ptr.* = item;
  2227ec:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  2227f0:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  2227f4:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  2227f8:	48 89 f7             	mov    rdi,rsi
  2227fb:	48 8b 75 a8          	mov    rsi,QWORD PTR [rbp-0x58]
  2227ff:	66 89 4d a6          	mov    WORD PTR [rbp-0x5a],cx
  222803:	e8 98 20 01 00       	call   2348a0 <memcpy>
        pub fn append(self: *Self, item: T) !void {
  222808:	66 8b 45 a6          	mov    ax,WORD PTR [rbp-0x5a]
  22280c:	48 83 c4 60          	add    rsp,0x60
  222810:	5d                   	pop    rbp
  222811:	c3                   	ret    
  222812:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  222819:	1f 84 00 00 00 00 00 

0000000000222820 <cast.75>:
pub fn cast(comptime T: type, x: var) (error{Overflow}!T) {
  222820:	55                   	push   rbp
  222821:	48 89 e5             	mov    rbp,rsp
  222824:	48 83 ec 30          	sub    rsp,0x30
  222828:	48 89 f8             	mov    rax,rdi
  22282b:	48 b9 ff ff ff ff ff 	movabs rcx,0x7fffffffffffffff
  222832:	ff ff 7f 
  222835:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    if (@maxValue(@typeOf(x)) > @maxValue(T) and x > @maxValue(T)) {
  222839:	48 39 4d e8          	cmp    QWORD PTR [rbp-0x18],rcx
  22283d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  222841:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  222845:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  222849:	76 2c                	jbe    222877 <cast.75+0x57>
        return error.Overflow;
  22284b:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  22284f:	e8 3c 94 fe ff       	call   20bc90 <__zig_return_error>
  222854:	48 8b 3d 75 df fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffddf75]        # 2007d0 <__unnamed_144>
  22285b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  22285f:	48 89 38             	mov    QWORD PTR [rax],rdi
  222862:	48 8b 3d 6f df fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffddf6f]        # 2007d8 <__unnamed_144+0x8>
  222869:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  22286d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  222871:	48 83 c4 30          	add    rsp,0x30
  222875:	5d                   	pop    rbp
  222876:	c3                   	ret    
        return @intCast(T, x);
  222877:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22287b:	66 c7 45 f0 00 00    	mov    WORD PTR [rbp-0x10],0x0
  222881:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  222885:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  222889:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  22288d:	48 89 01             	mov    QWORD PTR [rcx],rax
  222890:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  222894:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  222898:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  22289c:	48 83 c4 30          	add    rsp,0x30
  2228a0:	5d                   	pop    rbp
  2228a1:	c3                   	ret    
  2228a2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2228a9:	1f 84 00 00 00 00 00 

00000000002228b0 <LineNumberProgram_checkLineMatch>:
    pub fn checkLineMatch(self: *LineNumberProgram) !?LineInfo {
  2228b0:	55                   	push   rbp
  2228b1:	48 89 e5             	mov    rbp,rsp
  2228b4:	53                   	push   rbx
  2228b5:	48 81 ec e8 01 00 00 	sub    rsp,0x1e8
  2228bc:	48 89 f8             	mov    rax,rdi
  2228bf:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
        if (self.target_address >= self.prev_address and self.target_address < self.address) {
  2228c6:	48 8b 95 f8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x108]
  2228cd:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
  2228d1:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  2228d8:	48 3b 51 48          	cmp    rdx,QWORD PTR [rcx+0x48]
  2228dc:	41 0f 93 c0          	setae  r8b
  2228e0:	41 f6 c0 01          	test   r8b,0x1
  2228e4:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
  2228eb:	48 89 bd c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rdi
  2228f2:	48 89 b5 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rsi
  2228f9:	44 88 85 b7 fe ff ff 	mov    BYTE PTR [rbp-0x149],r8b
  222900:	75 02                	jne    222904 <LineNumberProgram_checkLineMatch+0x54>
  222902:	eb 1e                	jmp    222922 <LineNumberProgram_checkLineMatch+0x72>
  222904:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  22290b:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
  22290f:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  222916:	48 3b 01             	cmp    rax,QWORD PTR [rcx]
  222919:	0f 92 c2             	setb   dl
  22291c:	88 95 b7 fe ff ff    	mov    BYTE PTR [rbp-0x149],dl
  222922:	8a 85 b7 fe ff ff    	mov    al,BYTE PTR [rbp-0x149]
  222928:	a8 01                	test   al,0x1
  22292a:	75 05                	jne    222931 <LineNumberProgram_checkLineMatch+0x81>
  22292c:	e9 b0 03 00 00       	jmp    222ce1 <LineNumberProgram_checkLineMatch+0x431>
            const file_entry = if (self.prev_file == 0) {
  222931:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  222938:	48 83 78 50 00       	cmp    QWORD PTR [rax+0x50],0x0
  22293d:	75 48                	jne    222987 <LineNumberProgram_checkLineMatch+0xd7>
                return error.MissingDebugInfo;
  22293f:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  222946:	e8 45 93 fe ff       	call   20bc90 <__zig_return_error>
  22294b:	48 8d 3d d6 6b fe ff 	lea    rdi,[rip+0xfffffffffffe6bd6]        # 209528 <__unnamed_145>
  222952:	b8 38 00 00 00       	mov    eax,0x38
  222957:	89 c2                	mov    edx,eax
  222959:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  222960:	48 89 bd a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rdi
  222967:	48 89 cf             	mov    rdi,rcx
  22296a:	48 8b b5 a8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x158]
  222971:	e8 2a 1f 01 00       	call   2348a0 <memcpy>
  222976:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  22297d:	48 81 c4 e8 01 00 00 	add    rsp,0x1e8
  222984:	5b                   	pop    rbx
  222985:	5d                   	pop    rbp
  222986:	c3                   	ret    
            } else if (self.prev_file - 1 >= self.file_entries.len) {
  222987:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  22298e:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
  222992:	48 83 e8 01          	sub    rax,0x1
  222996:	0f 92 c1             	setb   cl
  222999:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
  2229a0:	88 8d 9f fe ff ff    	mov    BYTE PTR [rbp-0x161],cl
  2229a6:	0f 82 0d 04 00 00    	jb     222db9 <LineNumberProgram_checkLineMatch+0x509>
  2229ac:	e9 18 04 00 00       	jmp    222dc9 <LineNumberProgram_checkLineMatch+0x519>
                return error.InvalidDebugInfo;
  2229b1:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  2229b8:	e8 d3 92 fe ff       	call   20bc90 <__zig_return_error>
  2229bd:	48 8d 3d 9c 6b fe ff 	lea    rdi,[rip+0xfffffffffffe6b9c]        # 209560 <__unnamed_146>
  2229c4:	b8 38 00 00 00       	mov    eax,0x38
  2229c9:	89 c2                	mov    edx,eax
  2229cb:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  2229d2:	48 89 bd 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rdi
  2229d9:	48 89 cf             	mov    rdi,rcx
  2229dc:	48 8b b5 90 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x170]
  2229e3:	e8 b8 1e 01 00       	call   2348a0 <memcpy>
  2229e8:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  2229ef:	48 81 c4 e8 01 00 00 	add    rsp,0x1e8
  2229f6:	5b                   	pop    rbx
  2229f7:	5d                   	pop    rbp
  2229f8:	c3                   	ret    
                &self.file_entries.items[self.prev_file - 1];
  2229f9:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  222a00:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  222a04:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  222a0b:	48 8b 49 50          	mov    rcx,QWORD PTR [rcx+0x50]
  222a0f:	48 83 e9 01          	sub    rcx,0x1
  222a13:	0f 92 c2             	setb   dl
  222a16:	48 89 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rax
  222a1d:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  222a24:	88 95 7f fe ff ff    	mov    BYTE PTR [rbp-0x181],dl
  222a2a:	0f 82 ba 03 00 00    	jb     222dea <LineNumberProgram_checkLineMatch+0x53a>
  222a30:	e9 c5 03 00 00       	jmp    222dfa <LineNumberProgram_checkLineMatch+0x54a>
            const file_entry = if (self.prev_file == 0) {
  222a35:	eb 00                	jmp    222a37 <LineNumberProgram_checkLineMatch+0x187>
  222a37:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  222a3e:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
            const dir_name = if (file_entry.dir_index >= self.include_dirs.len) {
  222a45:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  222a4c:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
  222a50:	48 8b 95 f8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x108]
  222a57:	48 3b 4a 38          	cmp    rcx,QWORD PTR [rdx+0x38]
  222a5b:	72 48                	jb     222aa5 <LineNumberProgram_checkLineMatch+0x1f5>
                return error.InvalidDebugInfo;
  222a5d:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  222a64:	e8 27 92 fe ff       	call   20bc90 <__zig_return_error>
  222a69:	48 8d 3d 28 6b fe ff 	lea    rdi,[rip+0xfffffffffffe6b28]        # 209598 <__unnamed_147>
  222a70:	b8 38 00 00 00       	mov    eax,0x38
  222a75:	89 c2                	mov    edx,eax
  222a77:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  222a7e:	48 89 bd 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rdi
  222a85:	48 89 cf             	mov    rdi,rcx
  222a88:	48 8b b5 68 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x198]
  222a8f:	e8 0c 1e 01 00       	call   2348a0 <memcpy>
  222a94:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  222a9b:	48 81 c4 e8 01 00 00 	add    rsp,0x1e8
  222aa2:	5b                   	pop    rbx
  222aa3:	5d                   	pop    rbp
  222aa4:	c3                   	ret    
                self.include_dirs[file_entry.dir_index];
  222aa5:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  222aac:	48 89 c1             	mov    rcx,rax
  222aaf:	48 83 c1 30          	add    rcx,0x30
  222ab3:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  222aba:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  222abe:	48 3b 50 38          	cmp    rdx,QWORD PTR [rax+0x38]
  222ac2:	48 89 95 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rdx
  222ac9:	48 89 8d 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rcx
  222ad0:	0f 82 79 03 00 00    	jb     222e4f <LineNumberProgram_checkLineMatch+0x59f>
  222ad6:	e9 64 03 00 00       	jmp    222e3f <LineNumberProgram_checkLineMatch+0x58f>
  222adb:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
  222adf:	48 8d 8d e0 fe ff ff 	lea    rcx,[rbp-0x120]
            const dir_name = if (file_entry.dir_index >= self.include_dirs.len) {
  222ae6:	48 8b 85 50 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b0]
  222aed:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  222af0:	48 89 95 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rdx
  222af7:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
  222afb:	48 89 95 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdx
            const file_name = try os.path.join(self.file_entries.allocator, dir_name, file_entry.file_name);
  222b02:	48 8b 95 f8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x108]
  222b09:	48 8b 52 40          	mov    rdx,QWORD PTR [rdx+0x40]
  222b0d:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
  222b11:	4c 8b 85 f0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x110]
  222b18:	48 8b b5 b8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x148]
  222b1f:	e8 bc 1b 00 00       	call   2246e0 <join>
  222b24:	66 83 7d e0 00       	cmp    WORD PTR [rbp-0x20],0x0
  222b29:	74 5b                	je     222b86 <LineNumberProgram_checkLineMatch+0x2d6>
  222b2b:	66 8b 45 e0          	mov    ax,WORD PTR [rbp-0x20]
  222b2f:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  222b36:	66 89 85 4e fe ff ff 	mov    WORD PTR [rbp-0x1b2],ax
  222b3d:	e8 4e 91 fe ff       	call   20bc90 <__zig_return_error>
  222b42:	b9 38 00 00 00       	mov    ecx,0x38
  222b47:	89 ca                	mov    edx,ecx
  222b49:	48 8d 7d 90          	lea    rdi,[rbp-0x70]
  222b4d:	66 8b 85 4e fe ff ff 	mov    ax,WORD PTR [rbp-0x1b2]
  222b54:	66 89 45 90          	mov    WORD PTR [rbp-0x70],ax
  222b58:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  222b5f:	48 89 bd 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rdi
  222b66:	48 89 f7             	mov    rdi,rsi
  222b69:	48 8b b5 40 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1c0]
  222b70:	e8 2b 1d 01 00       	call   2348a0 <memcpy>
  222b75:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  222b7c:	48 81 c4 e8 01 00 00 	add    rsp,0x1e8
  222b83:	5b                   	pop    rbx
  222b84:	5d                   	pop    rbp
  222b85:	c3                   	ret    
  222b86:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  222b8a:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  222b91:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  222b95:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
                .line = if (self.prev_line >= 0) @intCast(usize, self.prev_line) else 0,
  222b9c:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  222ba3:	48 83 78 58 00       	cmp    QWORD PTR [rax+0x58],0x0
  222ba8:	7c 21                	jl     222bcb <LineNumberProgram_checkLineMatch+0x31b>
  222baa:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  222bb1:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
  222bb5:	48 83 f8 00          	cmp    rax,0x0
  222bb9:	48 89 85 38 fe ff ff 	mov    QWORD PTR [rbp-0x1c8],rax
  222bc0:	0f 8d aa 02 00 00    	jge    222e70 <LineNumberProgram_checkLineMatch+0x5c0>
  222bc6:	e9 b8 02 00 00       	jmp    222e83 <LineNumberProgram_checkLineMatch+0x5d3>
  222bcb:	31 c0                	xor    eax,eax
  222bcd:	89 c1                	mov    ecx,eax
  222bcf:	48 89 8d 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rcx
  222bd6:	eb 00                	jmp    222bd8 <LineNumberProgram_checkLineMatch+0x328>
  222bd8:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  222bdf:	b9 38 00 00 00       	mov    ecx,0x38
  222be4:	89 ca                	mov    edx,ecx
  222be6:	48 8d b5 00 ff ff ff 	lea    rsi,[rbp-0x100]
  222bed:	b9 30 00 00 00       	mov    ecx,0x30
  222bf2:	89 cf                	mov    edi,ecx
  222bf4:	4c 8d 85 38 ff ff ff 	lea    r8,[rbp-0xc8]
  222bfb:	b9 28 00 00 00       	mov    ecx,0x28
  222c00:	41 89 c9             	mov    r9d,ecx
  222c03:	4c 8d 95 68 ff ff ff 	lea    r10,[rbp-0x98]
                .column = self.prev_column,
  222c0a:	4c 8b 9d f8 fe ff ff 	mov    r11,QWORD PTR [rbp-0x108]
  222c11:	4d 8b 5b 60          	mov    r11,QWORD PTR [r11+0x60]
                .allocator = self.file_entries.allocator,
  222c15:	48 8b 9d f8 fe ff ff 	mov    rbx,QWORD PTR [rbp-0x108]
  222c1c:	48 8b 5b 40          	mov    rbx,QWORD PTR [rbx+0x40]
  222c20:	48 8b 5b 18          	mov    rbx,QWORD PTR [rbx+0x18]
            return LineInfo{
  222c24:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  222c2b:	4c 89 9d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r11
  222c32:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  222c39:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  222c40:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  222c47:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  222c4b:	48 89 5d 88          	mov    QWORD PTR [rbp-0x78],rbx
  222c4f:	4c 89 c0             	mov    rax,r8
  222c52:	48 89 bd 28 fe ff ff 	mov    QWORD PTR [rbp-0x1d8],rdi
  222c59:	48 89 c7             	mov    rdi,rax
  222c5c:	48 89 b5 20 fe ff ff 	mov    QWORD PTR [rbp-0x1e0],rsi
  222c63:	4c 89 d6             	mov    rsi,r10
  222c66:	48 89 95 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],rdx
  222c6d:	4c 89 ca             	mov    rdx,r9
  222c70:	4c 89 85 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],r8
  222c77:	e8 24 1c 01 00       	call   2348a0 <memcpy>
  222c7c:	c6 85 60 ff ff ff 01 	mov    BYTE PTR [rbp-0xa0],0x1
  222c83:	66 c7 85 00 ff ff ff 	mov    WORD PTR [rbp-0x100],0x0
  222c8a:	00 00 
  222c8c:	48 8b 85 20 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e0]
  222c93:	48 83 c0 08          	add    rax,0x8
  222c97:	48 8b 95 10 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1f0]
  222c9e:	48 89 c7             	mov    rdi,rax
  222ca1:	48 89 d6             	mov    rsi,rdx
  222ca4:	48 8b 95 28 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d8]
  222cab:	e8 f0 1b 01 00       	call   2348a0 <memcpy>
  222cb0:	48 8b 85 20 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e0]
  222cb7:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  222cbe:	48 89 d7             	mov    rdi,rdx
  222cc1:	48 89 c6             	mov    rsi,rax
  222cc4:	48 8b 95 18 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1e8]
  222ccb:	e8 d0 1b 01 00       	call   2348a0 <memcpy>
  222cd0:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  222cd7:	48 81 c4 e8 01 00 00 	add    rsp,0x1e8
  222cde:	5b                   	pop    rbx
  222cdf:	5d                   	pop    rbp
  222ce0:	c3                   	ret    
        if (self.target_address >= self.prev_address and self.target_address < self.address) {
  222ce1:	eb 00                	jmp    222ce3 <LineNumberProgram_checkLineMatch+0x433>
  222ce3:	48 8d 05 e6 68 fe ff 	lea    rax,[rip+0xfffffffffffe68e6]        # 2095d0 <__unnamed_148>
  222cea:	b9 38 00 00 00       	mov    ecx,0x38
  222cef:	89 ca                	mov    edx,ecx
        self.prev_address = self.address;
  222cf1:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
  222cf8:	48 8b bd f8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x108]
  222cff:	48 8b 3f             	mov    rdi,QWORD PTR [rdi]
  222d02:	48 89 7e 48          	mov    QWORD PTR [rsi+0x48],rdi
        self.prev_file = self.file;
  222d06:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
  222d0d:	48 8b bd f8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x108]
  222d14:	48 8b 7f 08          	mov    rdi,QWORD PTR [rdi+0x8]
  222d18:	48 89 7e 50          	mov    QWORD PTR [rsi+0x50],rdi
        self.prev_line = self.line;
  222d1c:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
  222d23:	48 8b bd f8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x108]
  222d2a:	48 8b 7f 10          	mov    rdi,QWORD PTR [rdi+0x10]
  222d2e:	48 89 7e 58          	mov    QWORD PTR [rsi+0x58],rdi
        self.prev_column = self.column;
  222d32:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
  222d39:	48 8b bd f8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x108]
  222d40:	48 8b 7f 18          	mov    rdi,QWORD PTR [rdi+0x18]
  222d44:	48 89 7e 60          	mov    QWORD PTR [rsi+0x60],rdi
        self.prev_is_stmt = self.is_stmt;
  222d48:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
  222d4f:	48 8b bd f8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x108]
  222d56:	44 8a 47 20          	mov    r8b,BYTE PTR [rdi+0x20]
  222d5a:	41 80 e0 01          	and    r8b,0x1
  222d5e:	44 88 46 68          	mov    BYTE PTR [rsi+0x68],r8b
        self.prev_basic_block = self.basic_block;
  222d62:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
  222d69:	48 8b bd f8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x108]
  222d70:	44 8a 47 21          	mov    r8b,BYTE PTR [rdi+0x21]
  222d74:	41 80 e0 01          	and    r8b,0x1
  222d78:	44 88 46 69          	mov    BYTE PTR [rsi+0x69],r8b
        self.prev_end_sequence = self.end_sequence;
  222d7c:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
  222d83:	48 8b bd f8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x108]
  222d8a:	44 8a 47 22          	mov    r8b,BYTE PTR [rdi+0x22]
  222d8e:	41 80 e0 01          	and    r8b,0x1
  222d92:	44 88 46 6a          	mov    BYTE PTR [rsi+0x6a],r8b
        return null;
  222d96:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  222d9d:	48 89 f7             	mov    rdi,rsi
  222da0:	48 89 c6             	mov    rsi,rax
  222da3:	e8 f8 1a 01 00       	call   2348a0 <memcpy>
  222da8:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  222daf:	48 81 c4 e8 01 00 00 	add    rsp,0x1e8
  222db6:	5b                   	pop    rbx
  222db7:	5d                   	pop    rbp
  222db8:	c3                   	ret    
  222db9:	48 8d 3d 08 04 02 00 	lea    rdi,[rip+0x20408]        # 2431c8 <__unnamed_4>
  222dc0:	31 c0                	xor    eax,eax
  222dc2:	89 c6                	mov    esi,eax
            } else if (self.prev_file - 1 >= self.file_entries.len) {
  222dc4:	e8 37 88 fe ff       	call   20b600 <panic>
  222dc9:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  222dd0:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  222dd4:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
  222ddb:	48 3b 48 10          	cmp    rcx,QWORD PTR [rax+0x10]
  222ddf:	0f 83 cc fb ff ff    	jae    2229b1 <LineNumberProgram_checkLineMatch+0x101>
  222de5:	e9 0f fc ff ff       	jmp    2229f9 <LineNumberProgram_checkLineMatch+0x149>
  222dea:	48 8d 3d d7 03 02 00 	lea    rdi,[rip+0x203d7]        # 2431c8 <__unnamed_4>
  222df1:	31 c0                	xor    eax,eax
  222df3:	89 c6                	mov    esi,eax
                &self.file_entries.items[self.prev_file - 1];
  222df5:	e8 06 88 fe ff       	call   20b600 <panic>
  222dfa:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
  222e01:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
  222e08:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  222e0c:	72 10                	jb     222e1e <LineNumberProgram_checkLineMatch+0x56e>
  222e0e:	48 8d 3d c3 05 02 00 	lea    rdi,[rip+0x205c3]        # 2433d8 <__unnamed_20>
  222e15:	31 c0                	xor    eax,eax
  222e17:	89 c6                	mov    esi,eax
  222e19:	e8 e2 87 fe ff       	call   20b600 <panic>
  222e1e:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
  222e25:	48 6b c8 28          	imul   rcx,rax,0x28
  222e29:	48 8b 95 88 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x178]
  222e30:	48 03 0a             	add    rcx,QWORD PTR [rdx]
            } else if (self.prev_file - 1 >= self.file_entries.len) {
  222e33:	48 89 8d 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rcx
  222e3a:	e9 f6 fb ff ff       	jmp    222a35 <LineNumberProgram_checkLineMatch+0x185>
  222e3f:	48 8d 3d 92 05 02 00 	lea    rdi,[rip+0x20592]        # 2433d8 <__unnamed_20>
  222e46:	31 c0                	xor    eax,eax
  222e48:	89 c6                	mov    esi,eax
                self.include_dirs[file_entry.dir_index];
  222e4a:	e8 b1 87 fe ff       	call   20b600 <panic>
  222e4f:	48 8b 85 60 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a0]
  222e56:	48 c1 e0 04          	shl    rax,0x4
  222e5a:	48 8b 8d 58 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1a8]
  222e61:	48 03 01             	add    rax,QWORD PTR [rcx]
            const dir_name = if (file_entry.dir_index >= self.include_dirs.len) {
  222e64:	48 89 85 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rax
  222e6b:	e9 6b fc ff ff       	jmp    222adb <LineNumberProgram_checkLineMatch+0x22b>
                .line = if (self.prev_line >= 0) @intCast(usize, self.prev_line) else 0,
  222e70:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  222e77:	48 89 85 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rax
  222e7e:	e9 55 fd ff ff       	jmp    222bd8 <LineNumberProgram_checkLineMatch+0x328>
  222e83:	48 8d 3d fe 03 02 00 	lea    rdi,[rip+0x203fe]        # 243288 <__unnamed_3>
  222e8a:	31 c0                	xor    eax,eax
  222e8c:	89 c6                	mov    esi,eax
  222e8e:	e8 6d 87 fe ff       	call   20b600 <panic>
  222e93:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  222e9a:	84 00 00 00 00 00 

0000000000222ea0 <readILeb128>:
fn readILeb128(in_stream: var) !i64 {
  222ea0:	55                   	push   rbp
  222ea1:	48 89 e5             	mov    rbp,rsp
  222ea4:	48 81 ec b0 00 00 00 	sub    rsp,0xb0
  222eab:	48 89 f8             	mov    rax,rdi
  222eae:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
    var result: i64 = 0;
  222eb2:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
  222eb9:	00 
    var shift: usize = 0;
  222eba:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
  222ec1:	00 
  222ec2:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  222ec6:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
  222eca:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
    while (true) {
  222ece:	eb 00                	jmp    222ed0 <readILeb128+0x30>
  222ed0:	48 8d 7d f8          	lea    rdi,[rbp-0x8]
        const byte = try in_stream.readByte();
  222ed4:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  222ed8:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  222edc:	e8 ff 0b ff ff       	call   213ae0 <InStream(ReadError)_readByte>
  222ee1:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  222ee6:	74 39                	je     222f21 <readILeb128+0x81>
  222ee8:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  222eec:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  222ef0:	66 89 45 8e          	mov    WORD PTR [rbp-0x72],ax
  222ef4:	e8 97 8d fe ff       	call   20bc90 <__zig_return_error>
  222ef9:	66 8b 45 8e          	mov    ax,WORD PTR [rbp-0x72]
  222efd:	66 89 45 e0          	mov    WORD PTR [rbp-0x20],ax
  222f01:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  222f05:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  222f09:	48 89 39             	mov    QWORD PTR [rcx],rdi
  222f0c:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  222f10:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  222f14:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  222f18:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  222f1f:	5d                   	pop    rbp
  222f20:	c3                   	ret    
  222f21:	8a 45 fa             	mov    al,BYTE PTR [rbp-0x6]
  222f24:	88 45 b7             	mov    BYTE PTR [rbp-0x49],al
        var operand: i64 = undefined;
  222f27:	48 b9 aa aa aa aa aa 	movabs rcx,0xaaaaaaaaaaaaaaaa
  222f2e:	aa aa aa 
  222f31:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
        if (@shlWithOverflow(i64, byte & 0b01111111, @intCast(u6, shift), &operand)) return error.InvalidDebugInfo;
  222f35:	8a 45 b7             	mov    al,BYTE PTR [rbp-0x49]
  222f38:	24 7f                	and    al,0x7f
  222f3a:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  222f3e:	88 ca                	mov    dl,cl
  222f40:	89 ce                	mov    esi,ecx
  222f42:	83 e6 3f             	and    esi,0x3f
  222f45:	89 f7                	mov    edi,esi
  222f47:	48 39 f9             	cmp    rcx,rdi
  222f4a:	88 45 8d             	mov    BYTE PTR [rbp-0x73],al
  222f4d:	88 55 8c             	mov    BYTE PTR [rbp-0x74],dl
  222f50:	0f 84 f3 00 00 00    	je     223049 <readILeb128+0x1a9>
  222f56:	e9 28 01 00 00       	jmp    223083 <readILeb128+0x1e3>
  222f5b:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  222f5f:	e8 2c 8d fe ff       	call   20bc90 <__zig_return_error>
  222f64:	48 8b 3d e5 d2 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffdd2e5]        # 200250 <__unnamed_131>
  222f6b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  222f6f:	48 89 38             	mov    QWORD PTR [rax],rdi
  222f72:	48 8b 3d df d2 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffdd2df]        # 200258 <__unnamed_131+0x8>
  222f79:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  222f7d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  222f81:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  222f88:	5d                   	pop    rbp
  222f89:	c3                   	ret    
  222f8a:	eb 00                	jmp    222f8c <readILeb128+0xec>
        result |= operand;
  222f8c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  222f90:	48 0b 45 a8          	or     rax,QWORD PTR [rbp-0x58]
  222f94:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
        shift += 7;
  222f98:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  222f9c:	48 83 c0 07          	add    rax,0x7
  222fa0:	0f 92 c1             	setb   cl
  222fa3:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  222fa7:	88 8d 7f ff ff ff    	mov    BYTE PTR [rbp-0x81],cl
  222fad:	0f 82 e0 00 00 00    	jb     223093 <readILeb128+0x1f3>
  222fb3:	e9 eb 00 00 00       	jmp    2230a3 <readILeb128+0x203>
            if (shift < @sizeOf(i64) * 8 and (byte & 0b01000000) != 0) result |= -(i64(1) << @intCast(u6, shift));
  222fb8:	48 83 7d b8 40       	cmp    QWORD PTR [rbp-0x48],0x40
  222fbd:	0f 92 c0             	setb   al
  222fc0:	a8 01                	test   al,0x1
  222fc2:	88 85 7e ff ff ff    	mov    BYTE PTR [rbp-0x82],al
  222fc8:	75 02                	jne    222fcc <readILeb128+0x12c>
  222fca:	eb 10                	jmp    222fdc <readILeb128+0x13c>
  222fcc:	8a 45 b7             	mov    al,BYTE PTR [rbp-0x49]
  222fcf:	24 40                	and    al,0x40
  222fd1:	3c 00                	cmp    al,0x0
  222fd3:	0f 95 c0             	setne  al
  222fd6:	88 85 7e ff ff ff    	mov    BYTE PTR [rbp-0x82],al
  222fdc:	8a 85 7e ff ff ff    	mov    al,BYTE PTR [rbp-0x82]
  222fe2:	a8 01                	test   al,0x1
  222fe4:	75 02                	jne    222fe8 <readILeb128+0x148>
  222fe6:	eb 2c                	jmp    223014 <readILeb128+0x174>
  222fe8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  222fec:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  222ff0:	88 ca                	mov    dl,cl
  222ff2:	89 ce                	mov    esi,ecx
  222ff4:	83 e6 3f             	and    esi,0x3f
  222ff7:	89 f7                	mov    edi,esi
  222ff9:	48 39 f9             	cmp    rcx,rdi
  222ffc:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  223003:	88 95 6f ff ff ff    	mov    BYTE PTR [rbp-0x91],dl
  223009:	0f 84 ad 00 00 00    	je     2230bc <readILeb128+0x21c>
  22300f:	e9 ef 00 00 00       	jmp    223103 <readILeb128+0x263>
  223014:	eb 00                	jmp    223016 <readILeb128+0x176>
            return result;
  223016:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  22301a:	66 c7 45 d0 00 00    	mov    WORD PTR [rbp-0x30],0x0
  223020:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  223024:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  223028:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  22302c:	48 89 01             	mov    QWORD PTR [rcx],rax
  22302f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  223033:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  223037:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22303b:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  223042:	5d                   	pop    rbp
  223043:	c3                   	ret    
    while (true) {
  223044:	e9 85 fe ff ff       	jmp    222ece <readILeb128+0x2e>
        if (@shlWithOverflow(i64, byte & 0b01111111, @intCast(u6, shift), &operand)) return error.InvalidDebugInfo;
  223049:	8a 45 8d             	mov    al,BYTE PTR [rbp-0x73]
  22304c:	0f b6 c8             	movzx  ecx,al
  22304f:	89 ca                	mov    edx,ecx
  223051:	40 8a 75 8c          	mov    sil,BYTE PTR [rbp-0x74]
  223055:	40 80 e6 3f          	and    sil,0x3f
  223059:	40 0f b6 ce          	movzx  ecx,sil
  22305d:	89 cf                	mov    edi,ecx
  22305f:	48 89 f9             	mov    rcx,rdi
  223062:	49 89 d0             	mov    r8,rdx
  223065:	49 d3 e0             	shl    r8,cl
  223068:	48 89 f9             	mov    rcx,rdi
  22306b:	4c 89 c7             	mov    rdi,r8
  22306e:	48 d3 ff             	sar    rdi,cl
  223071:	4c 89 45 a8          	mov    QWORD PTR [rbp-0x58],r8
  223075:	48 39 fa             	cmp    rdx,rdi
  223078:	0f 85 dd fe ff ff    	jne    222f5b <readILeb128+0xbb>
  22307e:	e9 07 ff ff ff       	jmp    222f8a <readILeb128+0xea>
  223083:	48 8d 3d fe 03 02 00 	lea    rdi,[rip+0x203fe]        # 243488 <__unnamed_22>
  22308a:	31 c0                	xor    eax,eax
  22308c:	89 c6                	mov    esi,eax
  22308e:	e8 6d 85 fe ff       	call   20b600 <panic>
  223093:	48 8d 3d 2e 01 02 00 	lea    rdi,[rip+0x2012e]        # 2431c8 <__unnamed_4>
  22309a:	31 c0                	xor    eax,eax
  22309c:	89 c6                	mov    esi,eax
        shift += 7;
  22309e:	e8 5d 85 fe ff       	call   20b600 <panic>
  2230a3:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  2230a7:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
        if ((byte & 0b10000000) == 0) {
  2230ab:	8a 4d b7             	mov    cl,BYTE PTR [rbp-0x49]
  2230ae:	80 e1 80             	and    cl,0x80
  2230b1:	80 f9 00             	cmp    cl,0x0
  2230b4:	0f 84 fe fe ff ff    	je     222fb8 <readILeb128+0x118>
  2230ba:	eb 88                	jmp    223044 <readILeb128+0x1a4>
  2230bc:	31 c0                	xor    eax,eax
  2230be:	89 c1                	mov    ecx,eax
  2230c0:	b8 01 00 00 00       	mov    eax,0x1
  2230c5:	89 c2                	mov    edx,eax
            if (shift < @sizeOf(i64) * 8 and (byte & 0b01000000) != 0) result |= -(i64(1) << @intCast(u6, shift));
  2230c7:	40 8a b5 6f ff ff ff 	mov    sil,BYTE PTR [rbp-0x91]
  2230ce:	40 80 e6 3f          	and    sil,0x3f
  2230d2:	40 0f b6 c6          	movzx  eax,sil
  2230d6:	89 c7                	mov    edi,eax
  2230d8:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
  2230df:	48 89 f9             	mov    rcx,rdi
  2230e2:	48 d3 e2             	shl    rdx,cl
  2230e5:	48 8b bd 60 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  2230ec:	48 29 d7             	sub    rdi,rdx
  2230ef:	0f 90 c1             	seto   cl
  2230f2:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
  2230f9:	88 8d 57 ff ff ff    	mov    BYTE PTR [rbp-0xa9],cl
  2230ff:	70 12                	jo     223113 <readILeb128+0x273>
  223101:	eb 20                	jmp    223123 <readILeb128+0x283>
  223103:	48 8d 3d 7e 03 02 00 	lea    rdi,[rip+0x2037e]        # 243488 <__unnamed_22>
  22310a:	31 c0                	xor    eax,eax
  22310c:	89 c6                	mov    esi,eax
  22310e:	e8 ed 84 fe ff       	call   20b600 <panic>
  223113:	48 8d 3d ae 00 02 00 	lea    rdi,[rip+0x200ae]        # 2431c8 <__unnamed_4>
  22311a:	31 c0                	xor    eax,eax
  22311c:	89 c6                	mov    esi,eax
  22311e:	e8 dd 84 fe ff       	call   20b600 <panic>
  223123:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  22312a:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  223131:	48 09 c8             	or     rax,rcx
  223134:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  223138:	e9 d9 fe ff ff       	jmp    223016 <readILeb128+0x176>
  22313d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000223140 <AlignedArrayList([]u8,8)_addOne>:
        pub fn addOne(self: *Self) !*T {
  223140:	55                   	push   rbp
  223141:	48 89 e5             	mov    rbp,rsp
  223144:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  22314b:	48 89 f8             	mov    rax,rdi
  22314e:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            const new_length = self.len + 1;
  223152:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  223156:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  22315a:	48 83 c2 01          	add    rdx,0x1
  22315e:	0f 92 c1             	setb   cl
  223161:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  223165:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  223169:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  22316d:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  223171:	88 4d 9f             	mov    BYTE PTR [rbp-0x61],cl
  223174:	72 57                	jb     2231cd <AlignedArrayList([]u8,8)_addOne+0x8d>
  223176:	eb 65                	jmp    2231dd <AlignedArrayList([]u8,8)_addOne+0x9d>
            try self.ensureCapacity(new_length);
  223178:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  22317c:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  223180:	66 89 45 9c          	mov    WORD PTR [rbp-0x64],ax
  223184:	e8 07 8b fe ff       	call   20bc90 <__zig_return_error>
  223189:	66 8b 45 9c          	mov    ax,WORD PTR [rbp-0x64]
  22318d:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  223191:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  223195:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  223199:	48 89 39             	mov    QWORD PTR [rcx],rdi
  22319c:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  2231a0:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  2231a4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  2231a8:	48 81 c4 80 00 00 00 	add    rsp,0x80
  2231af:	5d                   	pop    rbp
  2231b0:	c3                   	ret    
            const result = &self.items[self.len];
  2231b1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2231b5:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  2231b9:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
  2231bd:	48 3b 48 08          	cmp    rcx,QWORD PTR [rax+0x8]
  2231c1:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  2231c5:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
  2231c9:	72 4c                	jb     223217 <AlignedArrayList([]u8,8)_addOne+0xd7>
  2231cb:	eb 3a                	jmp    223207 <AlignedArrayList([]u8,8)_addOne+0xc7>
  2231cd:	48 8d 3d f4 ff 01 00 	lea    rdi,[rip+0x1fff4]        # 2431c8 <__unnamed_4>
  2231d4:	31 c0                	xor    eax,eax
  2231d6:	89 c6                	mov    esi,eax
            const new_length = self.len + 1;
  2231d8:	e8 23 84 fe ff       	call   20b600 <panic>
  2231dd:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2231e1:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
            try self.ensureCapacity(new_length);
  2231e5:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  2231e9:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  2231ed:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  2231f1:	e8 7a 00 00 00       	call   223270 <AlignedArrayList([]u8,8)_ensureCapacity>
  2231f6:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  2231fa:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  2231ff:	0f 85 73 ff ff ff    	jne    223178 <AlignedArrayList([]u8,8)_addOne+0x38>
  223205:	eb aa                	jmp    2231b1 <AlignedArrayList([]u8,8)_addOne+0x71>
  223207:	48 8d 3d ca 01 02 00 	lea    rdi,[rip+0x201ca]        # 2433d8 <__unnamed_20>
  22320e:	31 c0                	xor    eax,eax
  223210:	89 c6                	mov    esi,eax
            const result = &self.items[self.len];
  223212:	e8 e9 83 fe ff       	call   20b600 <panic>
  223217:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  22321b:	48 c1 e0 04          	shl    rax,0x4
  22321f:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  223223:	48 03 01             	add    rax,QWORD PTR [rcx]
  223226:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
            self.len = new_length;
  22322a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  22322e:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  223232:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
            return result;
  223236:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  22323a:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  223240:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  223244:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  223248:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  22324c:	48 89 02             	mov    QWORD PTR [rdx],rax
  22324f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  223253:	48 89 42 08          	mov    QWORD PTR [rdx+0x8],rax
  223257:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  22325b:	48 81 c4 80 00 00 00 	add    rsp,0x80
  223262:	5d                   	pop    rbp
  223263:	c3                   	ret    
  223264:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22326b:	00 00 00 00 00 

0000000000223270 <AlignedArrayList([]u8,8)_ensureCapacity>:
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  223270:	55                   	push   rbp
  223271:	48 89 e5             	mov    rbp,rsp
  223274:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  22327b:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  22327f:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
            var better_capacity = self.items.len;
  223283:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  223287:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  22328b:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
            if (better_capacity >= new_capacity) return;
  22328f:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  223293:	48 3b 55 c0          	cmp    rdx,QWORD PTR [rbp-0x40]
  223297:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  22329b:	72 11                	jb     2232ae <AlignedArrayList([]u8,8)_ensureCapacity+0x3e>
  22329d:	31 c0                	xor    eax,eax
  22329f:	66 89 c1             	mov    cx,ax
  2232a2:	66 89 c8             	mov    ax,cx
  2232a5:	48 81 c4 90 00 00 00 	add    rsp,0x90
  2232ac:	5d                   	pop    rbp
  2232ad:	c3                   	ret    
            while (true) {
  2232ae:	eb 00                	jmp    2232b0 <AlignedArrayList([]u8,8)_ensureCapacity+0x40>
  2232b0:	eb 00                	jmp    2232b2 <AlignedArrayList([]u8,8)_ensureCapacity+0x42>
  2232b2:	31 c0                	xor    eax,eax
  2232b4:	88 c1                	mov    cl,al
                better_capacity += better_capacity / 2 + 8;
  2232b6:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  2232ba:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  2232be:	f6 c1 01             	test   cl,0x1
  2232c1:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  2232c5:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  2232c9:	0f 85 8e 00 00 00    	jne    22335d <AlignedArrayList([]u8,8)_ensureCapacity+0xed>
  2232cf:	eb 72                	jmp    223343 <AlignedArrayList([]u8,8)_ensureCapacity+0xd3>
                if (better_capacity >= new_capacity) break;
  2232d1:	eb 02                	jmp    2232d5 <AlignedArrayList([]u8,8)_ensureCapacity+0x65>
            while (true) {
  2232d3:	eb db                	jmp    2232b0 <AlignedArrayList([]u8,8)_ensureCapacity+0x40>
  2232d5:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
            self.items = try self.allocator.alignedRealloc(T, A, self.items, better_capacity);
  2232d9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2232dd:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  2232e1:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
  2232e5:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  2232e9:	4c 8b 45 b8          	mov    r8,QWORD PTR [rbp-0x48]
  2232ed:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  2232f1:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  2232f5:	e8 d6 00 00 00       	call   2233d0 <Allocator_alignedRealloc.76>
  2232fa:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  2232ff:	74 1e                	je     22331f <AlignedArrayList([]u8,8)_ensureCapacity+0xaf>
  223301:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  223305:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  223309:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  22330d:	e8 7e 89 fe ff       	call   20bc90 <__zig_return_error>
  223312:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  223316:	48 81 c4 90 00 00 00 	add    rsp,0x90
  22331d:	5d                   	pop    rbp
  22331e:	c3                   	ret    
  22331f:	31 c0                	xor    eax,eax
  223321:	66 89 c1             	mov    cx,ax
  223324:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  223328:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  22332c:	48 89 16             	mov    QWORD PTR [rsi],rdx
  22332f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  223333:	48 89 56 08          	mov    QWORD PTR [rsi+0x8],rdx
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  223337:	66 89 c8             	mov    ax,cx
  22333a:	48 81 c4 90 00 00 00 	add    rsp,0x90
  223341:	5d                   	pop    rbp
  223342:	c3                   	ret    
                better_capacity += better_capacity / 2 + 8;
  223343:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  223347:	48 c1 e8 01          	shr    rax,0x1
  22334b:	48 83 c0 08          	add    rax,0x8
  22334f:	0f 92 c1             	setb   cl
  223352:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  223356:	88 4d 87             	mov    BYTE PTR [rbp-0x79],cl
  223359:	72 12                	jb     22336d <AlignedArrayList([]u8,8)_ensureCapacity+0xfd>
  22335b:	eb 20                	jmp    22337d <AlignedArrayList([]u8,8)_ensureCapacity+0x10d>
  22335d:	48 8d 3d dc fe 01 00 	lea    rdi,[rip+0x1fedc]        # 243240 <__unnamed_7>
  223364:	31 c0                	xor    eax,eax
  223366:	89 c6                	mov    esi,eax
  223368:	e8 93 82 fe ff       	call   20b600 <panic>
  22336d:	48 8d 3d 54 fe 01 00 	lea    rdi,[rip+0x1fe54]        # 2431c8 <__unnamed_4>
  223374:	31 c0                	xor    eax,eax
  223376:	89 c6                	mov    esi,eax
  223378:	e8 83 82 fe ff       	call   20b600 <panic>
  22337d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  223381:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  223385:	48 01 c8             	add    rax,rcx
  223388:	0f 92 c2             	setb   dl
  22338b:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  223392:	88 95 77 ff ff ff    	mov    BYTE PTR [rbp-0x89],dl
  223398:	72 02                	jb     22339c <AlignedArrayList([]u8,8)_ensureCapacity+0x12c>
  22339a:	eb 10                	jmp    2233ac <AlignedArrayList([]u8,8)_ensureCapacity+0x13c>
  22339c:	48 8d 3d 25 fe 01 00 	lea    rdi,[rip+0x1fe25]        # 2431c8 <__unnamed_4>
  2233a3:	31 c0                	xor    eax,eax
  2233a5:	89 c6                	mov    esi,eax
  2233a7:	e8 54 82 fe ff       	call   20b600 <panic>
  2233ac:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  2233b3:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                if (better_capacity >= new_capacity) break;
  2233b7:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  2233bb:	48 3b 4d c0          	cmp    rcx,QWORD PTR [rbp-0x40]
  2233bf:	0f 83 0c ff ff ff    	jae    2232d1 <AlignedArrayList([]u8,8)_ensureCapacity+0x61>
  2233c5:	e9 09 ff ff ff       	jmp    2232d3 <AlignedArrayList([]u8,8)_ensureCapacity+0x63>
  2233ca:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000002233d0 <Allocator_alignedRealloc.76>:
    pub fn alignedRealloc(self: *Allocator, comptime T: type, comptime alignment: u29, old_mem: []align(alignment) T, n: usize) ![]align(alignment) T {
  2233d0:	55                   	push   rbp
  2233d1:	48 89 e5             	mov    rbp,rsp
  2233d4:	53                   	push   rbx
  2233d5:	48 81 ec 88 01 00 00 	sub    rsp,0x188
  2233dc:	48 89 f8             	mov    rax,rdi
  2233df:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
  2233e6:	4c 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],r8
        if (old_mem.len == 0) {
  2233ed:	48 83 79 08 00       	cmp    QWORD PTR [rcx+0x8],0x0
  2233f2:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  2233f9:	48 89 b5 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rsi
  223400:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
  223407:	48 89 bd b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rdi
  22340e:	75 64                	jne    223474 <Allocator_alignedRealloc.76+0xa4>
  223410:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
            return self.alignedAlloc(T, alignment, n);
  223414:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  22341b:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  223422:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  223429:	e8 12 04 00 00       	call   223840 <Allocator_alignedAlloc.77>
  22342e:	66 83 7d e0 00       	cmp    WORD PTR [rbp-0x20],0x0
  223433:	74 0e                	je     223443 <Allocator_alignedRealloc.76+0x73>
  223435:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  22343c:	e8 4f 88 fe ff       	call   20bc90 <__zig_return_error>
  223441:	eb 02                	jmp    223445 <Allocator_alignedRealloc.76+0x75>
  223443:	eb 00                	jmp    223445 <Allocator_alignedRealloc.76+0x75>
  223445:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  223449:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  223450:	48 89 01             	mov    QWORD PTR [rcx],rax
  223453:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  223457:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  22345b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22345f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  223463:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  22346a:	48 81 c4 88 01 00 00 	add    rsp,0x188
  223471:	5b                   	pop    rbx
  223472:	5d                   	pop    rbp
  223473:	c3                   	ret    
        if (old_mem.len == 0) {
  223474:	eb 00                	jmp    223476 <Allocator_alignedRealloc.76+0xa6>
        if (n == 0) {
  223476:	48 83 bd 10 ff ff ff 	cmp    QWORD PTR [rbp-0xf0],0x0
  22347d:	00 
  22347e:	75 4b                	jne    2234cb <Allocator_alignedRealloc.76+0xfb>
            self.free(old_mem);
  223480:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
  223487:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  22348e:	e8 bd 06 00 00       	call   223b50 <Allocator_free.78>
            return ([*]align(alignment) T)(undefined)[0..0];
  223493:	48 8b 35 ce 5f fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffe5fce]        # 209468 <__unnamed_150>
  22349a:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  2234a1:	48 89 37             	mov    QWORD PTR [rdi],rsi
  2234a4:	48 8b 35 c5 5f fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffe5fc5]        # 209470 <__unnamed_150+0x8>
  2234ab:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  2234af:	48 8b 35 c2 5f fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffe5fc2]        # 209478 <__unnamed_150+0x10>
  2234b6:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  2234ba:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  2234c1:	48 81 c4 88 01 00 00 	add    rsp,0x188
  2234c8:	5b                   	pop    rbx
  2234c9:	5d                   	pop    rbp
  2234ca:	c3                   	ret    
        if (n == 0) {
  2234cb:	eb 00                	jmp    2234cd <Allocator_alignedRealloc.76+0xfd>
  2234cd:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  2234d1:	b8 10 00 00 00       	mov    eax,0x10
  2234d6:	89 c2                	mov    edx,eax
        const old_byte_slice = @sliceToBytes(old_mem);
  2234d8:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  2234df:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  2234e2:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  2234e6:	48 8b 71 08          	mov    rsi,QWORD PTR [rcx+0x8]
  2234ea:	48 c1 e6 04          	shl    rsi,0x4
  2234ee:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  2234f2:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  2234f6:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
  2234fd:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  223501:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  223508:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  22350f:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  223516:	e8 95 1e ff ff       	call   2153b0 <mul>
  22351b:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  223520:	74 44                	je     223566 <Allocator_alignedRealloc.76+0x196>
  223522:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  223529:	e8 62 87 fe ff       	call   20bc90 <__zig_return_error>
  22352e:	48 8b 3d 4b 5f fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe5f4b]        # 209480 <__unnamed_151>
  223535:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  22353c:	48 89 38             	mov    QWORD PTR [rax],rdi
  22353f:	48 8b 3d 42 5f fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe5f42]        # 209488 <__unnamed_151+0x8>
  223546:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  22354a:	48 8b 3d 3f 5f fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe5f3f]        # 209490 <__unnamed_151+0x10>
  223551:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  223555:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  22355c:	48 81 c4 88 01 00 00 	add    rsp,0x188
  223563:	5b                   	pop    rbx
  223564:	5d                   	pop    rbp
  223565:	c3                   	ret    
  223566:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  22356a:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  223571:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  223575:	48 8d 8d 00 ff ff ff 	lea    rcx,[rbp-0x100]
  22357c:	41 b9 08 00 00 00    	mov    r9d,0x8
  223582:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  223589:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
        const byte_slice = try self.reallocFn(self, old_byte_slice, byte_count, alignment);
  223590:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  223597:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  22359b:	48 8b b5 18 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe8]
  2235a2:	4c 8b 85 f8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x108]
  2235a9:	4c 8b 95 c8 fe ff ff 	mov    r10,QWORD PTR [rbp-0x138]
  2235b0:	48 89 b5 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rsi
  2235b7:	4c 89 d6             	mov    rsi,r10
  2235ba:	4c 8b 9d a8 fe ff ff 	mov    r11,QWORD PTR [rbp-0x158]
  2235c1:	48 89 95 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdx
  2235c8:	4c 89 da             	mov    rdx,r11
  2235cb:	48 8b 9d a0 fe ff ff 	mov    rbx,QWORD PTR [rbp-0x160]
  2235d2:	ff d3                	call   rbx
  2235d4:	66 83 7d 98 00       	cmp    WORD PTR [rbp-0x68],0x0
  2235d9:	74 5d                	je     223638 <Allocator_alignedRealloc.76+0x268>
  2235db:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  2235df:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  2235e6:	66 89 85 9e fe ff ff 	mov    WORD PTR [rbp-0x162],ax
  2235ed:	e8 9e 86 fe ff       	call   20bc90 <__zig_return_error>
  2235f2:	66 8b 85 9e fe ff ff 	mov    ax,WORD PTR [rbp-0x162]
  2235f9:	66 89 85 68 ff ff ff 	mov    WORD PTR [rbp-0x98],ax
  223600:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  223607:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  22360e:	48 89 39             	mov    QWORD PTR [rcx],rdi
  223611:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  223618:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  22361c:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  223623:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  223627:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  22362e:	48 81 c4 88 01 00 00 	add    rsp,0x188
  223635:	5b                   	pop    rbx
  223636:	5d                   	pop    rbp
  223637:	c3                   	ret    
  223638:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22363c:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  223643:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  223647:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
        assert(byte_slice.len == byte_count);
  22364e:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  223655:	48 3b 85 f8 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x108]
  22365c:	0f 94 c1             	sete   cl
  22365f:	0f b6 f9             	movzx  edi,cl
  223662:	e8 99 79 fe ff       	call   20b000 <assert>
        if (n > old_mem.len) {
  223667:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  22366e:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  223675:	48 3b 42 08          	cmp    rax,QWORD PTR [rdx+0x8]
  223679:	76 71                	jbe    2236ec <Allocator_alignedRealloc.76+0x31c>
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  22367b:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  223682:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  223689:	48 39 c8             	cmp    rax,rcx
  22368c:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  223693:	48 89 8d 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rcx
  22369a:	76 78                	jbe    223714 <Allocator_alignedRealloc.76+0x344>
  22369c:	eb 66                	jmp    223704 <Allocator_alignedRealloc.76+0x334>
  22369e:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  2236a5:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
  2236ac:	48 39 c8             	cmp    rax,rcx
  2236af:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  2236b6:	73 32                	jae    2236ea <Allocator_alignedRealloc.76+0x31a>
  2236b8:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  2236bf:	48 03 8d 58 ff ff ff 	add    rcx,QWORD PTR [rbp-0xa8]
  2236c6:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
                byte.* = undefined;
  2236cd:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  2236d4:	88 01                	mov    BYTE PTR [rcx],al
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  2236d6:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  2236dd:	48 83 c1 01          	add    rcx,0x1
  2236e1:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
  2236e8:	eb b4                	jmp    22369e <Allocator_alignedRealloc.76+0x2ce>
        if (n > old_mem.len) {
  2236ea:	eb 02                	jmp    2236ee <Allocator_alignedRealloc.76+0x31e>
  2236ec:	eb 00                	jmp    2236ee <Allocator_alignedRealloc.76+0x31e>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  2236ee:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  2236f5:	48 83 e0 07          	and    rax,0x7
  2236f9:	48 83 f8 00          	cmp    rax,0x0
  2236fd:	74 7b                	je     22377a <Allocator_alignedRealloc.76+0x3aa>
  2236ff:	e9 a1 00 00 00       	jmp    2237a5 <Allocator_alignedRealloc.76+0x3d5>
  223704:	48 8d 3d cd fc 01 00 	lea    rdi,[rip+0x1fccd]        # 2433d8 <__unnamed_20>
  22370b:	31 c0                	xor    eax,eax
  22370d:	89 c6                	mov    esi,eax
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  22370f:	e8 ec 7e fe ff       	call   20b600 <panic>
  223714:	be aa 00 00 00       	mov    esi,0xaa
  223719:	b8 08 00 00 00       	mov    eax,0x8
  22371e:	89 c2                	mov    edx,eax
  223720:	48 8d 8d e0 fe ff ff 	lea    rcx,[rbp-0x120]
  223727:	48 8b bd 90 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x170]
  22372e:	48 03 bd e8 fe ff ff 	add    rdi,QWORD PTR [rbp-0x118]
  223735:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
  22373c:	48 8b bd 88 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x178]
  223743:	4c 8b 85 90 fe ff ff 	mov    r8,QWORD PTR [rbp-0x170]
  22374a:	4c 29 c7             	sub    rdi,r8
  22374d:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  223754:	48 89 cf             	mov    rdi,rcx
  223757:	e8 f4 10 01 00       	call   234850 <memset>
  22375c:	48 c7 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],0x0
  223763:	00 00 00 00 
  223767:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  22376e:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  223775:	e9 24 ff ff ff       	jmp    22369e <Allocator_alignedRealloc.76+0x2ce>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  22377a:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  223781:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
  223788:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  22378f:	48 89 c1             	mov    rcx,rax
  223792:	48 83 e1 0f          	and    rcx,0xf
  223796:	48 83 f9 00          	cmp    rcx,0x0
  22379a:	48 89 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rax
  2237a1:	74 12                	je     2237b5 <Allocator_alignedRealloc.76+0x3e5>
  2237a3:	eb 7f                	jmp    223824 <Allocator_alignedRealloc.76+0x454>
  2237a5:	48 8d 3d 04 fe 01 00 	lea    rdi,[rip+0x1fe04]        # 2435b0 <__unnamed_75>
  2237ac:	31 c0                	xor    eax,eax
  2237ae:	89 c6                	mov    esi,eax
  2237b0:	e8 4b 7e fe ff       	call   20b600 <panic>
  2237b5:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  2237bc:	48 c1 e8 04          	shr    rax,0x4
  2237c0:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  2237c7:	66 c7 85 20 ff ff ff 	mov    WORD PTR [rbp-0xe0],0x0
  2237ce:	00 00 
  2237d0:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  2237d7:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  2237de:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  2237e5:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  2237ec:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  2237f3:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  2237fa:	48 89 01             	mov    QWORD PTR [rcx],rax
  2237fd:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  223804:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  223808:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  22380f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  223813:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  22381a:	48 81 c4 88 01 00 00 	add    rsp,0x188
  223821:	5b                   	pop    rbx
  223822:	5d                   	pop    rbp
  223823:	c3                   	ret    
  223824:	48 8d 3d 9d fd 01 00 	lea    rdi,[rip+0x1fd9d]        # 2435c8 <__unnamed_76>
  22382b:	31 c0                	xor    eax,eax
  22382d:	89 c6                	mov    esi,eax
  22382f:	e8 cc 7d fe ff       	call   20b600 <panic>
  223834:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22383b:	00 00 00 00 00 

0000000000223840 <Allocator_alignedAlloc.77>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  223840:	55                   	push   rbp
  223841:	48 89 e5             	mov    rbp,rsp
  223844:	48 81 ec 20 01 00 00 	sub    rsp,0x120
  22384b:	48 89 f8             	mov    rax,rdi
  22384e:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  223855:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  22385c:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  223863:	00 
  223864:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  22386b:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  223872:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  223879:	75 37                	jne    2238b2 <Allocator_alignedAlloc.77+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  22387b:	48 8b 05 16 5c fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe5c16]        # 209498 <__unnamed_152>
  223882:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  223889:	48 89 01             	mov    QWORD PTR [rcx],rax
  22388c:	48 8b 05 0d 5c fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe5c0d]        # 2094a0 <__unnamed_152+0x8>
  223893:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  223897:	48 8b 05 0a 5c fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe5c0a]        # 2094a8 <__unnamed_152+0x10>
  22389e:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  2238a2:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  2238a9:	48 81 c4 20 01 00 00 	add    rsp,0x120
  2238b0:	5d                   	pop    rbp
  2238b1:	c3                   	ret    
        if (n == 0) {
  2238b2:	eb 00                	jmp    2238b4 <Allocator_alignedAlloc.77+0x74>
  2238b4:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  2238b8:	b8 10 00 00 00       	mov    eax,0x10
  2238bd:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  2238bf:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  2238c6:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  2238cd:	e8 de 1a ff ff       	call   2153b0 <mul>
  2238d2:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  2238d7:	74 43                	je     22391c <Allocator_alignedAlloc.77+0xdc>
  2238d9:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  2238e0:	e8 ab 83 fe ff       	call   20bc90 <__zig_return_error>
  2238e5:	48 8b 3d c4 5b fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe5bc4]        # 2094b0 <__unnamed_153>
  2238ec:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  2238f3:	48 89 38             	mov    QWORD PTR [rax],rdi
  2238f6:	48 8b 3d bb 5b fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe5bbb]        # 2094b8 <__unnamed_153+0x8>
  2238fd:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  223901:	48 8b 3d b8 5b fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe5bb8]        # 2094c0 <__unnamed_153+0x10>
  223908:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  22390c:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  223913:	48 81 c4 20 01 00 00 	add    rsp,0x120
  22391a:	5d                   	pop    rbp
  22391b:	c3                   	ret    
  22391c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  223920:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  223927:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  22392b:	41 b8 08 00 00 00    	mov    r8d,0x8
  223931:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  223938:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  22393f:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  223946:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  223949:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  223950:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  223957:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  22395e:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  223965:	4c 89 ce             	mov    rsi,r9
  223968:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  22396f:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  223976:	4c 89 d1             	mov    rcx,r10
  223979:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  223980:	41 ff d3             	call   r11
  223983:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  223988:	74 50                	je     2239da <Allocator_alignedAlloc.77+0x19a>
  22398a:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  22398e:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  223995:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  22399c:	e8 ef 82 fe ff       	call   20bc90 <__zig_return_error>
  2239a1:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  2239a8:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  2239ac:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  2239b0:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  2239b7:	48 89 39             	mov    QWORD PTR [rcx],rdi
  2239ba:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  2239be:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  2239c2:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  2239c6:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  2239ca:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  2239d1:	48 81 c4 20 01 00 00 	add    rsp,0x120
  2239d8:	5d                   	pop    rbp
  2239d9:	c3                   	ret    
  2239da:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2239de:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  2239e5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2239e9:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  2239f0:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  2239f7:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  2239fe:	0f 94 c1             	sete   cl
  223a01:	0f b6 f9             	movzx  edi,cl
  223a04:	e8 f7 75 fe ff       	call   20b000 <assert>
  223a09:	be aa 00 00 00       	mov    esi,0xaa
  223a0e:	bf 08 00 00 00       	mov    edi,0x8
  223a13:	89 fa                	mov    edx,edi
  223a15:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  223a1c:	48 89 c7             	mov    rdi,rax
  223a1f:	e8 2c 0e 01 00       	call   234850 <memset>
  223a24:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  223a2b:	00 00 00 00 
  223a2f:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  223a36:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  223a3d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  223a44:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  223a4b:	48 39 c8             	cmp    rax,rcx
  223a4e:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  223a55:	73 32                	jae    223a89 <Allocator_alignedAlloc.77+0x249>
  223a57:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  223a5e:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  223a65:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  223a6c:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  223a73:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  223a75:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  223a7c:	48 83 c1 01          	add    rcx,0x1
  223a80:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  223a87:	eb b4                	jmp    223a3d <Allocator_alignedAlloc.77+0x1fd>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  223a89:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  223a90:	48 83 e0 07          	and    rax,0x7
  223a94:	48 83 f8 00          	cmp    rax,0x0
  223a98:	75 28                	jne    223ac2 <Allocator_alignedAlloc.77+0x282>
  223a9a:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  223aa1:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  223aa5:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  223aac:	48 89 c1             	mov    rcx,rax
  223aaf:	48 83 e1 0f          	and    rcx,0xf
  223ab3:	48 83 f9 00          	cmp    rcx,0x0
  223ab7:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  223abe:	74 12                	je     223ad2 <Allocator_alignedAlloc.77+0x292>
  223ac0:	eb 6f                	jmp    223b31 <Allocator_alignedAlloc.77+0x2f1>
  223ac2:	48 8d 3d e7 fa 01 00 	lea    rdi,[rip+0x1fae7]        # 2435b0 <__unnamed_75>
  223ac9:	31 c0                	xor    eax,eax
  223acb:	89 c6                	mov    esi,eax
  223acd:	e8 2e 7b fe ff       	call   20b600 <panic>
  223ad2:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  223ad9:	48 c1 e8 04          	shr    rax,0x4
  223add:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  223ae1:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  223ae8:	00 00 
  223aea:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  223aee:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  223af5:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  223af9:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  223afd:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  223b04:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  223b0b:	48 89 01             	mov    QWORD PTR [rcx],rax
  223b0e:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  223b15:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  223b19:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  223b1d:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  223b21:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  223b28:	48 81 c4 20 01 00 00 	add    rsp,0x120
  223b2f:	5d                   	pop    rbp
  223b30:	c3                   	ret    
  223b31:	48 8d 3d 90 fa 01 00 	lea    rdi,[rip+0x1fa90]        # 2435c8 <__unnamed_76>
  223b38:	31 c0                	xor    eax,eax
  223b3a:	89 c6                	mov    esi,eax
  223b3c:	e8 bf 7a fe ff       	call   20b600 <panic>
  223b41:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  223b48:	0f 1f 84 00 00 00 00 
  223b4f:	00 

0000000000223b50 <Allocator_free.78>:
    pub fn free(self: *Allocator, memory: var) void {
  223b50:	55                   	push   rbp
  223b51:	48 89 e5             	mov    rbp,rsp
  223b54:	48 83 ec 60          	sub    rsp,0x60
  223b58:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
        const bytes = @sliceToBytes(memory);
  223b5c:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  223b5f:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  223b63:	48 8b 76 08          	mov    rsi,QWORD PTR [rsi+0x8]
  223b67:	48 c1 e6 04          	shl    rsi,0x4
  223b6b:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  223b6f:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  223b73:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  223b77:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  223b7b:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        if (bytes.len == 0) return;
  223b7f:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
  223b84:	75 06                	jne    223b8c <Allocator_free.78+0x3c>
  223b86:	48 83 c4 60          	add    rsp,0x60
  223b8a:	5d                   	pop    rbp
  223b8b:	c3                   	ret    
  223b8c:	31 c0                	xor    eax,eax
  223b8e:	89 c1                	mov    ecx,eax
        const non_const_ptr = @intToPtr([*]u8, @ptrToInt(bytes.ptr));
  223b90:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  223b94:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
        self.freeFn(self, non_const_ptr[0..bytes.len]);
  223b98:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  223b9c:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  223ba0:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  223ba4:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  223ba8:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
  223bac:	48 39 f1             	cmp    rcx,rsi
  223baf:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
  223bb3:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
  223bb7:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  223bbb:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  223bbf:	76 10                	jbe    223bd1 <Allocator_free.78+0x81>
  223bc1:	48 8d 3d 10 f8 01 00 	lea    rdi,[rip+0x1f810]        # 2433d8 <__unnamed_20>
  223bc8:	31 c0                	xor    eax,eax
  223bca:	89 c6                	mov    esi,eax
  223bcc:	e8 2f 7a fe ff       	call   20b600 <panic>
  223bd1:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
  223bd5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  223bd9:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  223bdd:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  223be1:	48 83 e9 00          	sub    rcx,0x0
  223be5:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  223be9:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  223bed:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  223bf1:	ff d1                	call   rcx
    pub fn free(self: *Allocator, memory: var) void {
  223bf3:	48 83 c4 60          	add    rsp,0x60
  223bf7:	5d                   	pop    rbp
  223bf8:	c3                   	ret    
  223bf9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000223c00 <AlignedArrayList(FileEntry,8)_addOne>:
        pub fn addOne(self: *Self) !*T {
  223c00:	55                   	push   rbp
  223c01:	48 89 e5             	mov    rbp,rsp
  223c04:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  223c0b:	48 89 f8             	mov    rax,rdi
  223c0e:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            const new_length = self.len + 1;
  223c12:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  223c16:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  223c1a:	48 83 c2 01          	add    rdx,0x1
  223c1e:	0f 92 c1             	setb   cl
  223c21:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  223c25:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  223c29:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  223c2d:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  223c31:	88 4d 9f             	mov    BYTE PTR [rbp-0x61],cl
  223c34:	72 57                	jb     223c8d <AlignedArrayList(FileEntry,8)_addOne+0x8d>
  223c36:	eb 65                	jmp    223c9d <AlignedArrayList(FileEntry,8)_addOne+0x9d>
            try self.ensureCapacity(new_length);
  223c38:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  223c3c:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  223c40:	66 89 45 9c          	mov    WORD PTR [rbp-0x64],ax
  223c44:	e8 47 80 fe ff       	call   20bc90 <__zig_return_error>
  223c49:	66 8b 45 9c          	mov    ax,WORD PTR [rbp-0x64]
  223c4d:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  223c51:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  223c55:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  223c59:	48 89 39             	mov    QWORD PTR [rcx],rdi
  223c5c:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  223c60:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  223c64:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  223c68:	48 81 c4 80 00 00 00 	add    rsp,0x80
  223c6f:	5d                   	pop    rbp
  223c70:	c3                   	ret    
            const result = &self.items[self.len];
  223c71:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  223c75:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  223c79:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
  223c7d:	48 3b 48 08          	cmp    rcx,QWORD PTR [rax+0x8]
  223c81:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  223c85:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
  223c89:	72 4c                	jb     223cd7 <AlignedArrayList(FileEntry,8)_addOne+0xd7>
  223c8b:	eb 3a                	jmp    223cc7 <AlignedArrayList(FileEntry,8)_addOne+0xc7>
  223c8d:	48 8d 3d 34 f5 01 00 	lea    rdi,[rip+0x1f534]        # 2431c8 <__unnamed_4>
  223c94:	31 c0                	xor    eax,eax
  223c96:	89 c6                	mov    esi,eax
            const new_length = self.len + 1;
  223c98:	e8 63 79 fe ff       	call   20b600 <panic>
  223c9d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  223ca1:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
            try self.ensureCapacity(new_length);
  223ca5:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  223ca9:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  223cad:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  223cb1:	e8 7a 00 00 00       	call   223d30 <AlignedArrayList(FileEntry,8)_ensureCapacity>
  223cb6:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  223cba:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  223cbf:	0f 85 73 ff ff ff    	jne    223c38 <AlignedArrayList(FileEntry,8)_addOne+0x38>
  223cc5:	eb aa                	jmp    223c71 <AlignedArrayList(FileEntry,8)_addOne+0x71>
  223cc7:	48 8d 3d 0a f7 01 00 	lea    rdi,[rip+0x1f70a]        # 2433d8 <__unnamed_20>
  223cce:	31 c0                	xor    eax,eax
  223cd0:	89 c6                	mov    esi,eax
            const result = &self.items[self.len];
  223cd2:	e8 29 79 fe ff       	call   20b600 <panic>
  223cd7:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  223cdb:	48 6b c8 28          	imul   rcx,rax,0x28
  223cdf:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
  223ce3:	48 03 0a             	add    rcx,QWORD PTR [rdx]
  223ce6:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
            self.len = new_length;
  223cea:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  223cee:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  223cf2:	48 89 71 10          	mov    QWORD PTR [rcx+0x10],rsi
            return result;
  223cf6:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  223cfa:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  223d00:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  223d04:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  223d08:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  223d0c:	48 89 0e             	mov    QWORD PTR [rsi],rcx
  223d0f:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  223d13:	48 89 4e 08          	mov    QWORD PTR [rsi+0x8],rcx
  223d17:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  223d1b:	48 81 c4 80 00 00 00 	add    rsp,0x80
  223d22:	5d                   	pop    rbp
  223d23:	c3                   	ret    
  223d24:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  223d2b:	00 00 00 00 00 

0000000000223d30 <AlignedArrayList(FileEntry,8)_ensureCapacity>:
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  223d30:	55                   	push   rbp
  223d31:	48 89 e5             	mov    rbp,rsp
  223d34:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  223d3b:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  223d3f:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
            var better_capacity = self.items.len;
  223d43:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  223d47:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  223d4b:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
            if (better_capacity >= new_capacity) return;
  223d4f:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  223d53:	48 3b 55 c0          	cmp    rdx,QWORD PTR [rbp-0x40]
  223d57:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
  223d5b:	72 11                	jb     223d6e <AlignedArrayList(FileEntry,8)_ensureCapacity+0x3e>
  223d5d:	31 c0                	xor    eax,eax
  223d5f:	66 89 c1             	mov    cx,ax
  223d62:	66 89 c8             	mov    ax,cx
  223d65:	48 81 c4 90 00 00 00 	add    rsp,0x90
  223d6c:	5d                   	pop    rbp
  223d6d:	c3                   	ret    
            while (true) {
  223d6e:	eb 00                	jmp    223d70 <AlignedArrayList(FileEntry,8)_ensureCapacity+0x40>
  223d70:	eb 00                	jmp    223d72 <AlignedArrayList(FileEntry,8)_ensureCapacity+0x42>
  223d72:	31 c0                	xor    eax,eax
  223d74:	88 c1                	mov    cl,al
                better_capacity += better_capacity / 2 + 8;
  223d76:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  223d7a:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  223d7e:	f6 c1 01             	test   cl,0x1
  223d81:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  223d85:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  223d89:	0f 85 8e 00 00 00    	jne    223e1d <AlignedArrayList(FileEntry,8)_ensureCapacity+0xed>
  223d8f:	eb 72                	jmp    223e03 <AlignedArrayList(FileEntry,8)_ensureCapacity+0xd3>
                if (better_capacity >= new_capacity) break;
  223d91:	eb 02                	jmp    223d95 <AlignedArrayList(FileEntry,8)_ensureCapacity+0x65>
            while (true) {
  223d93:	eb db                	jmp    223d70 <AlignedArrayList(FileEntry,8)_ensureCapacity+0x40>
  223d95:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
            self.items = try self.allocator.alignedRealloc(T, A, self.items, better_capacity);
  223d99:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  223d9d:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  223da1:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
  223da5:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  223da9:	4c 8b 45 b8          	mov    r8,QWORD PTR [rbp-0x48]
  223dad:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  223db1:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  223db5:	e8 d6 00 00 00       	call   223e90 <Allocator_alignedRealloc.79>
  223dba:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  223dbf:	74 1e                	je     223ddf <AlignedArrayList(FileEntry,8)_ensureCapacity+0xaf>
  223dc1:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  223dc5:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  223dc9:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  223dcd:	e8 be 7e fe ff       	call   20bc90 <__zig_return_error>
  223dd2:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  223dd6:	48 81 c4 90 00 00 00 	add    rsp,0x90
  223ddd:	5d                   	pop    rbp
  223dde:	c3                   	ret    
  223ddf:	31 c0                	xor    eax,eax
  223de1:	66 89 c1             	mov    cx,ax
  223de4:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  223de8:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  223dec:	48 89 16             	mov    QWORD PTR [rsi],rdx
  223def:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  223df3:	48 89 56 08          	mov    QWORD PTR [rsi+0x8],rdx
        pub fn ensureCapacity(self: *Self, new_capacity: usize) !void {
  223df7:	66 89 c8             	mov    ax,cx
  223dfa:	48 81 c4 90 00 00 00 	add    rsp,0x90
  223e01:	5d                   	pop    rbp
  223e02:	c3                   	ret    
                better_capacity += better_capacity / 2 + 8;
  223e03:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  223e07:	48 c1 e8 01          	shr    rax,0x1
  223e0b:	48 83 c0 08          	add    rax,0x8
  223e0f:	0f 92 c1             	setb   cl
  223e12:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  223e16:	88 4d 87             	mov    BYTE PTR [rbp-0x79],cl
  223e19:	72 12                	jb     223e2d <AlignedArrayList(FileEntry,8)_ensureCapacity+0xfd>
  223e1b:	eb 20                	jmp    223e3d <AlignedArrayList(FileEntry,8)_ensureCapacity+0x10d>
  223e1d:	48 8d 3d 1c f4 01 00 	lea    rdi,[rip+0x1f41c]        # 243240 <__unnamed_7>
  223e24:	31 c0                	xor    eax,eax
  223e26:	89 c6                	mov    esi,eax
  223e28:	e8 d3 77 fe ff       	call   20b600 <panic>
  223e2d:	48 8d 3d 94 f3 01 00 	lea    rdi,[rip+0x1f394]        # 2431c8 <__unnamed_4>
  223e34:	31 c0                	xor    eax,eax
  223e36:	89 c6                	mov    esi,eax
  223e38:	e8 c3 77 fe ff       	call   20b600 <panic>
  223e3d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  223e41:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  223e45:	48 01 c8             	add    rax,rcx
  223e48:	0f 92 c2             	setb   dl
  223e4b:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  223e52:	88 95 77 ff ff ff    	mov    BYTE PTR [rbp-0x89],dl
  223e58:	72 02                	jb     223e5c <AlignedArrayList(FileEntry,8)_ensureCapacity+0x12c>
  223e5a:	eb 10                	jmp    223e6c <AlignedArrayList(FileEntry,8)_ensureCapacity+0x13c>
  223e5c:	48 8d 3d 65 f3 01 00 	lea    rdi,[rip+0x1f365]        # 2431c8 <__unnamed_4>
  223e63:	31 c0                	xor    eax,eax
  223e65:	89 c6                	mov    esi,eax
  223e67:	e8 94 77 fe ff       	call   20b600 <panic>
  223e6c:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  223e73:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                if (better_capacity >= new_capacity) break;
  223e77:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  223e7b:	48 3b 4d c0          	cmp    rcx,QWORD PTR [rbp-0x40]
  223e7f:	0f 83 0c ff ff ff    	jae    223d91 <AlignedArrayList(FileEntry,8)_ensureCapacity+0x61>
  223e85:	e9 09 ff ff ff       	jmp    223d93 <AlignedArrayList(FileEntry,8)_ensureCapacity+0x63>
  223e8a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000223e90 <Allocator_alignedRealloc.79>:
    pub fn alignedRealloc(self: *Allocator, comptime T: type, comptime alignment: u29, old_mem: []align(alignment) T, n: usize) ![]align(alignment) T {
  223e90:	55                   	push   rbp
  223e91:	48 89 e5             	mov    rbp,rsp
  223e94:	53                   	push   rbx
  223e95:	48 81 ec 88 01 00 00 	sub    rsp,0x188
  223e9c:	48 89 f8             	mov    rax,rdi
  223e9f:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
  223ea6:	4c 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],r8
        if (old_mem.len == 0) {
  223ead:	48 83 79 08 00       	cmp    QWORD PTR [rcx+0x8],0x0
  223eb2:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  223eb9:	48 89 b5 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rsi
  223ec0:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
  223ec7:	48 89 bd b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rdi
  223ece:	75 64                	jne    223f34 <Allocator_alignedRealloc.79+0xa4>
  223ed0:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
            return self.alignedAlloc(T, alignment, n);
  223ed4:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  223edb:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  223ee2:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  223ee9:	e8 22 04 00 00       	call   224310 <Allocator_alignedAlloc.80>
  223eee:	66 83 7d e0 00       	cmp    WORD PTR [rbp-0x20],0x0
  223ef3:	74 0e                	je     223f03 <Allocator_alignedRealloc.79+0x73>
  223ef5:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  223efc:	e8 8f 7d fe ff       	call   20bc90 <__zig_return_error>
  223f01:	eb 02                	jmp    223f05 <Allocator_alignedRealloc.79+0x75>
  223f03:	eb 00                	jmp    223f05 <Allocator_alignedRealloc.79+0x75>
  223f05:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  223f09:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  223f10:	48 89 01             	mov    QWORD PTR [rcx],rax
  223f13:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  223f17:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  223f1b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  223f1f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  223f23:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  223f2a:	48 81 c4 88 01 00 00 	add    rsp,0x188
  223f31:	5b                   	pop    rbx
  223f32:	5d                   	pop    rbp
  223f33:	c3                   	ret    
        if (old_mem.len == 0) {
  223f34:	eb 00                	jmp    223f36 <Allocator_alignedRealloc.79+0xa6>
        if (n == 0) {
  223f36:	48 83 bd 10 ff ff ff 	cmp    QWORD PTR [rbp-0xf0],0x0
  223f3d:	00 
  223f3e:	75 4b                	jne    223f8b <Allocator_alignedRealloc.79+0xfb>
            self.free(old_mem);
  223f40:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
  223f47:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
  223f4e:	e8 dd 06 00 00       	call   224630 <Allocator_free.81>
            return ([*]align(alignment) T)(undefined)[0..0];
  223f53:	48 8b 35 6e 55 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffe556e]        # 2094c8 <__unnamed_154>
  223f5a:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  223f61:	48 89 37             	mov    QWORD PTR [rdi],rsi
  223f64:	48 8b 35 65 55 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffe5565]        # 2094d0 <__unnamed_154+0x8>
  223f6b:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  223f6f:	48 8b 35 62 55 fe ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffe5562]        # 2094d8 <__unnamed_154+0x10>
  223f76:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  223f7a:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  223f81:	48 81 c4 88 01 00 00 	add    rsp,0x188
  223f88:	5b                   	pop    rbx
  223f89:	5d                   	pop    rbp
  223f8a:	c3                   	ret    
        if (n == 0) {
  223f8b:	eb 00                	jmp    223f8d <Allocator_alignedRealloc.79+0xfd>
  223f8d:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  223f91:	b8 28 00 00 00       	mov    eax,0x28
  223f96:	89 c2                	mov    edx,eax
        const old_byte_slice = @sliceToBytes(old_mem);
  223f98:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  223f9f:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  223fa2:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  223fa6:	48 6b 71 08 28       	imul   rsi,QWORD PTR [rcx+0x8],0x28
  223fab:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  223faf:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  223fb3:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
  223fba:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  223fbe:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  223fc5:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  223fcc:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  223fd3:	e8 d8 13 ff ff       	call   2153b0 <mul>
  223fd8:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  223fdd:	74 44                	je     224023 <Allocator_alignedRealloc.79+0x193>
  223fdf:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  223fe6:	e8 a5 7c fe ff       	call   20bc90 <__zig_return_error>
  223feb:	48 8b 3d ee 54 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe54ee]        # 2094e0 <__unnamed_155>
  223ff2:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  223ff9:	48 89 38             	mov    QWORD PTR [rax],rdi
  223ffc:	48 8b 3d e5 54 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe54e5]        # 2094e8 <__unnamed_155+0x8>
  224003:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  224007:	48 8b 3d e2 54 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe54e2]        # 2094f0 <__unnamed_155+0x10>
  22400e:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  224012:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  224019:	48 81 c4 88 01 00 00 	add    rsp,0x188
  224020:	5b                   	pop    rbx
  224021:	5d                   	pop    rbp
  224022:	c3                   	ret    
  224023:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  224027:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  22402e:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  224032:	48 8d 8d 00 ff ff ff 	lea    rcx,[rbp-0x100]
  224039:	41 b9 08 00 00 00    	mov    r9d,0x8
  22403f:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  224046:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
        const byte_slice = try self.reallocFn(self, old_byte_slice, byte_count, alignment);
  22404d:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
  224054:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  224058:	48 8b b5 18 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe8]
  22405f:	4c 8b 85 f8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x108]
  224066:	4c 8b 95 c8 fe ff ff 	mov    r10,QWORD PTR [rbp-0x138]
  22406d:	48 89 b5 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rsi
  224074:	4c 89 d6             	mov    rsi,r10
  224077:	4c 8b 9d a8 fe ff ff 	mov    r11,QWORD PTR [rbp-0x158]
  22407e:	48 89 95 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdx
  224085:	4c 89 da             	mov    rdx,r11
  224088:	48 8b 9d a0 fe ff ff 	mov    rbx,QWORD PTR [rbp-0x160]
  22408f:	ff d3                	call   rbx
  224091:	66 83 7d 98 00       	cmp    WORD PTR [rbp-0x68],0x0
  224096:	74 5d                	je     2240f5 <Allocator_alignedRealloc.79+0x265>
  224098:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  22409c:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  2240a3:	66 89 85 9e fe ff ff 	mov    WORD PTR [rbp-0x162],ax
  2240aa:	e8 e1 7b fe ff       	call   20bc90 <__zig_return_error>
  2240af:	66 8b 85 9e fe ff ff 	mov    ax,WORD PTR [rbp-0x162]
  2240b6:	66 89 85 68 ff ff ff 	mov    WORD PTR [rbp-0x98],ax
  2240bd:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  2240c4:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  2240cb:	48 89 39             	mov    QWORD PTR [rcx],rdi
  2240ce:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  2240d5:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  2240d9:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  2240e0:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  2240e4:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  2240eb:	48 81 c4 88 01 00 00 	add    rsp,0x188
  2240f2:	5b                   	pop    rbx
  2240f3:	5d                   	pop    rbp
  2240f4:	c3                   	ret    
  2240f5:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2240f9:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  224100:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  224104:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
        assert(byte_slice.len == byte_count);
  22410b:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  224112:	48 3b 85 f8 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x108]
  224119:	0f 94 c1             	sete   cl
  22411c:	0f b6 f9             	movzx  edi,cl
  22411f:	e8 dc 6e fe ff       	call   20b000 <assert>
        if (n > old_mem.len) {
  224124:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  22412b:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  224132:	48 3b 42 08          	cmp    rax,QWORD PTR [rdx+0x8]
  224136:	76 71                	jbe    2241a9 <Allocator_alignedRealloc.79+0x319>
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  224138:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  22413f:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  224146:	48 39 c8             	cmp    rax,rcx
  224149:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  224150:	48 89 8d 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rcx
  224157:	76 78                	jbe    2241d1 <Allocator_alignedRealloc.79+0x341>
  224159:	eb 66                	jmp    2241c1 <Allocator_alignedRealloc.79+0x331>
  22415b:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  224162:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
  224169:	48 39 c8             	cmp    rax,rcx
  22416c:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  224173:	73 32                	jae    2241a7 <Allocator_alignedRealloc.79+0x317>
  224175:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  22417c:	48 03 8d 58 ff ff ff 	add    rcx,QWORD PTR [rbp-0xa8]
  224183:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
                byte.* = undefined;
  22418a:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  224191:	88 01                	mov    BYTE PTR [rcx],al
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  224193:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  22419a:	48 83 c1 01          	add    rcx,0x1
  22419e:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
  2241a5:	eb b4                	jmp    22415b <Allocator_alignedRealloc.79+0x2cb>
        if (n > old_mem.len) {
  2241a7:	eb 02                	jmp    2241ab <Allocator_alignedRealloc.79+0x31b>
  2241a9:	eb 00                	jmp    2241ab <Allocator_alignedRealloc.79+0x31b>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  2241ab:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  2241b2:	48 83 e0 07          	and    rax,0x7
  2241b6:	48 83 f8 00          	cmp    rax,0x0
  2241ba:	74 7b                	je     224237 <Allocator_alignedRealloc.79+0x3a7>
  2241bc:	e9 ae 00 00 00       	jmp    22426f <Allocator_alignedRealloc.79+0x3df>
  2241c1:	48 8d 3d 10 f2 01 00 	lea    rdi,[rip+0x1f210]        # 2433d8 <__unnamed_20>
  2241c8:	31 c0                	xor    eax,eax
  2241ca:	89 c6                	mov    esi,eax
            for (byte_slice[old_byte_slice.len..]) |*byte| {
  2241cc:	e8 2f 74 fe ff       	call   20b600 <panic>
  2241d1:	be aa 00 00 00       	mov    esi,0xaa
  2241d6:	b8 08 00 00 00       	mov    eax,0x8
  2241db:	89 c2                	mov    edx,eax
  2241dd:	48 8d 8d e0 fe ff ff 	lea    rcx,[rbp-0x120]
  2241e4:	48 8b bd 90 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x170]
  2241eb:	48 03 bd e8 fe ff ff 	add    rdi,QWORD PTR [rbp-0x118]
  2241f2:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
  2241f9:	48 8b bd 88 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x178]
  224200:	4c 8b 85 90 fe ff ff 	mov    r8,QWORD PTR [rbp-0x170]
  224207:	4c 29 c7             	sub    rdi,r8
  22420a:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
  224211:	48 89 cf             	mov    rdi,rcx
  224214:	e8 37 06 01 00       	call   234850 <memset>
  224219:	48 c7 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],0x0
  224220:	00 00 00 00 
  224224:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  22422b:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  224232:	e9 24 ff ff ff       	jmp    22415b <Allocator_alignedRealloc.79+0x2cb>
  224237:	b8 28 00 00 00       	mov    eax,0x28
  22423c:	89 c1                	mov    ecx,eax
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  22423e:	48 8b 95 e8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x118]
  224245:	48 89 95 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdx
  22424c:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  224253:	48 89 d0             	mov    rax,rdx
  224256:	31 f6                	xor    esi,esi
  224258:	48 89 95 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rdx
  22425f:	89 f2                	mov    edx,esi
  224261:	48 f7 f1             	div    rcx
  224264:	48 83 fa 00          	cmp    rdx,0x0
  224268:	74 15                	je     22427f <Allocator_alignedRealloc.79+0x3ef>
  22426a:	e9 87 00 00 00       	jmp    2242f6 <Allocator_alignedRealloc.79+0x466>
  22426f:	48 8d 3d 3a f3 01 00 	lea    rdi,[rip+0x1f33a]        # 2435b0 <__unnamed_75>
  224276:	31 c0                	xor    eax,eax
  224278:	89 c6                	mov    esi,eax
  22427a:	e8 81 73 fe ff       	call   20b600 <panic>
  22427f:	b8 28 00 00 00       	mov    eax,0x28
  224284:	89 c1                	mov    ecx,eax
  224286:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  22428d:	31 d2                	xor    edx,edx
  22428f:	48 f7 f1             	div    rcx
  224292:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  224299:	66 c7 85 20 ff ff ff 	mov    WORD PTR [rbp-0xe0],0x0
  2242a0:	00 00 
  2242a2:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  2242a9:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  2242b0:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  2242b7:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  2242be:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  2242c5:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  2242cc:	48 89 01             	mov    QWORD PTR [rcx],rax
  2242cf:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  2242d6:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2242da:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  2242e1:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  2242e5:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  2242ec:	48 81 c4 88 01 00 00 	add    rsp,0x188
  2242f3:	5b                   	pop    rbx
  2242f4:	5d                   	pop    rbp
  2242f5:	c3                   	ret    
  2242f6:	48 8d 3d cb f2 01 00 	lea    rdi,[rip+0x1f2cb]        # 2435c8 <__unnamed_76>
  2242fd:	31 c0                	xor    eax,eax
  2242ff:	89 c6                	mov    esi,eax
  224301:	e8 fa 72 fe ff       	call   20b600 <panic>
  224306:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  22430d:	00 00 00 

0000000000224310 <Allocator_alignedAlloc.80>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  224310:	55                   	push   rbp
  224311:	48 89 e5             	mov    rbp,rsp
  224314:	48 81 ec 20 01 00 00 	sub    rsp,0x120
  22431b:	48 89 f8             	mov    rax,rdi
  22431e:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  224325:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  22432c:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  224333:	00 
  224334:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  22433b:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  224342:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  224349:	75 37                	jne    224382 <Allocator_alignedAlloc.80+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  22434b:	48 8b 05 a6 51 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe51a6]        # 2094f8 <__unnamed_156>
  224352:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  224359:	48 89 01             	mov    QWORD PTR [rcx],rax
  22435c:	48 8b 05 9d 51 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe519d]        # 209500 <__unnamed_156+0x8>
  224363:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  224367:	48 8b 05 9a 51 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe519a]        # 209508 <__unnamed_156+0x10>
  22436e:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  224372:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  224379:	48 81 c4 20 01 00 00 	add    rsp,0x120
  224380:	5d                   	pop    rbp
  224381:	c3                   	ret    
        if (n == 0) {
  224382:	eb 00                	jmp    224384 <Allocator_alignedAlloc.80+0x74>
  224384:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  224388:	b8 28 00 00 00       	mov    eax,0x28
  22438d:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  22438f:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  224396:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  22439d:	e8 0e 10 ff ff       	call   2153b0 <mul>
  2243a2:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  2243a7:	74 43                	je     2243ec <Allocator_alignedAlloc.80+0xdc>
  2243a9:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  2243b0:	e8 db 78 fe ff       	call   20bc90 <__zig_return_error>
  2243b5:	48 8b 3d 54 51 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe5154]        # 209510 <__unnamed_157>
  2243bc:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  2243c3:	48 89 38             	mov    QWORD PTR [rax],rdi
  2243c6:	48 8b 3d 4b 51 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe514b]        # 209518 <__unnamed_157+0x8>
  2243cd:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  2243d1:	48 8b 3d 48 51 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe5148]        # 209520 <__unnamed_157+0x10>
  2243d8:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  2243dc:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  2243e3:	48 81 c4 20 01 00 00 	add    rsp,0x120
  2243ea:	5d                   	pop    rbp
  2243eb:	c3                   	ret    
  2243ec:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2243f0:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  2243f7:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  2243fb:	41 b8 08 00 00 00    	mov    r8d,0x8
  224401:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  224408:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  22440f:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  224416:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  224419:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  224420:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  224427:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  22442e:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  224435:	4c 89 ce             	mov    rsi,r9
  224438:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  22443f:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  224446:	4c 89 d1             	mov    rcx,r10
  224449:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  224450:	41 ff d3             	call   r11
  224453:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  224458:	74 50                	je     2244aa <Allocator_alignedAlloc.80+0x19a>
  22445a:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  22445e:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  224465:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  22446c:	e8 1f 78 fe ff       	call   20bc90 <__zig_return_error>
  224471:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  224478:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  22447c:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  224480:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  224487:	48 89 39             	mov    QWORD PTR [rcx],rdi
  22448a:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  22448e:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  224492:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  224496:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  22449a:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  2244a1:	48 81 c4 20 01 00 00 	add    rsp,0x120
  2244a8:	5d                   	pop    rbp
  2244a9:	c3                   	ret    
  2244aa:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2244ae:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  2244b5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2244b9:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  2244c0:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  2244c7:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  2244ce:	0f 94 c1             	sete   cl
  2244d1:	0f b6 f9             	movzx  edi,cl
  2244d4:	e8 27 6b fe ff       	call   20b000 <assert>
  2244d9:	be aa 00 00 00       	mov    esi,0xaa
  2244de:	bf 08 00 00 00       	mov    edi,0x8
  2244e3:	89 fa                	mov    edx,edi
  2244e5:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  2244ec:	48 89 c7             	mov    rdi,rax
  2244ef:	e8 5c 03 01 00       	call   234850 <memset>
  2244f4:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  2244fb:	00 00 00 00 
  2244ff:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  224506:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  22450d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  224514:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  22451b:	48 39 c8             	cmp    rax,rcx
  22451e:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  224525:	73 32                	jae    224559 <Allocator_alignedAlloc.80+0x249>
  224527:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22452e:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  224535:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  22453c:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  224543:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  224545:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22454c:	48 83 c1 01          	add    rcx,0x1
  224550:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  224557:	eb b4                	jmp    22450d <Allocator_alignedAlloc.80+0x1fd>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  224559:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  224560:	48 83 e0 07          	and    rax,0x7
  224564:	48 83 f8 00          	cmp    rax,0x0
  224568:	75 32                	jne    22459c <Allocator_alignedAlloc.80+0x28c>
  22456a:	b8 28 00 00 00       	mov    eax,0x28
  22456f:	89 c1                	mov    ecx,eax
  224571:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
  224578:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
  22457c:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
  224583:	48 89 d0             	mov    rax,rdx
  224586:	31 f6                	xor    esi,esi
  224588:	48 89 95 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdx
  22458f:	89 f2                	mov    edx,esi
  224591:	48 f7 f1             	div    rcx
  224594:	48 83 fa 00          	cmp    rdx,0x0
  224598:	74 12                	je     2245ac <Allocator_alignedAlloc.80+0x29c>
  22459a:	eb 77                	jmp    224613 <Allocator_alignedAlloc.80+0x303>
  22459c:	48 8d 3d 0d f0 01 00 	lea    rdi,[rip+0x1f00d]        # 2435b0 <__unnamed_75>
  2245a3:	31 c0                	xor    eax,eax
  2245a5:	89 c6                	mov    esi,eax
  2245a7:	e8 54 70 fe ff       	call   20b600 <panic>
  2245ac:	b8 28 00 00 00       	mov    eax,0x28
  2245b1:	89 c1                	mov    ecx,eax
  2245b3:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  2245ba:	31 d2                	xor    edx,edx
  2245bc:	48 f7 f1             	div    rcx
  2245bf:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  2245c3:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  2245ca:	00 00 
  2245cc:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  2245d0:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  2245d7:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  2245db:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  2245df:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  2245e6:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  2245ed:	48 89 01             	mov    QWORD PTR [rcx],rax
  2245f0:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  2245f7:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2245fb:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  2245ff:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  224603:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  22460a:	48 81 c4 20 01 00 00 	add    rsp,0x120
  224611:	5d                   	pop    rbp
  224612:	c3                   	ret    
  224613:	48 8d 3d ae ef 01 00 	lea    rdi,[rip+0x1efae]        # 2435c8 <__unnamed_76>
  22461a:	31 c0                	xor    eax,eax
  22461c:	89 c6                	mov    esi,eax
  22461e:	e8 dd 6f fe ff       	call   20b600 <panic>
  224623:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22462a:	84 00 00 00 00 00 

0000000000224630 <Allocator_free.81>:
    pub fn free(self: *Allocator, memory: var) void {
  224630:	55                   	push   rbp
  224631:	48 89 e5             	mov    rbp,rsp
  224634:	48 83 ec 60          	sub    rsp,0x60
  224638:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
        const bytes = @sliceToBytes(memory);
  22463c:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  22463f:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  224643:	48 6b 76 08 28       	imul   rsi,QWORD PTR [rsi+0x8],0x28
  224648:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22464c:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  224650:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  224654:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  224658:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        if (bytes.len == 0) return;
  22465c:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
  224661:	75 06                	jne    224669 <Allocator_free.81+0x39>
  224663:	48 83 c4 60          	add    rsp,0x60
  224667:	5d                   	pop    rbp
  224668:	c3                   	ret    
  224669:	31 c0                	xor    eax,eax
  22466b:	89 c1                	mov    ecx,eax
        const non_const_ptr = @intToPtr([*]u8, @ptrToInt(bytes.ptr));
  22466d:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  224671:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
        self.freeFn(self, non_const_ptr[0..bytes.len]);
  224675:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  224679:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  22467d:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  224681:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  224685:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
  224689:	48 39 f1             	cmp    rcx,rsi
  22468c:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
  224690:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
  224694:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  224698:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  22469c:	76 10                	jbe    2246ae <Allocator_free.81+0x7e>
  22469e:	48 8d 3d 33 ed 01 00 	lea    rdi,[rip+0x1ed33]        # 2433d8 <__unnamed_20>
  2246a5:	31 c0                	xor    eax,eax
  2246a7:	89 c6                	mov    esi,eax
  2246a9:	e8 52 6f fe ff       	call   20b600 <panic>
  2246ae:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
  2246b2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  2246b6:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  2246ba:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  2246be:	48 83 e9 00          	sub    rcx,0x0
  2246c2:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  2246c6:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  2246ca:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  2246ce:	ff d1                	call   rcx
    pub fn free(self: *Allocator, memory: var) void {
  2246d0:	48 83 c4 60          	add    rsp,0x60
  2246d4:	5d                   	pop    rbp
  2246d5:	c3                   	ret    
  2246d6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  2246dd:	00 00 00 

00000000002246e0 <join>:
    }
}

/// Naively combines a series of paths with the native path seperator.
/// Allocates memory for the result, which must be freed by the caller.
pub fn join(allocator: *Allocator, paths: ...) ![]u8 {
  2246e0:	55                   	push   rbp
  2246e1:	48 89 e5             	mov    rbp,rsp
  2246e4:	48 83 ec 40          	sub    rsp,0x40
  2246e8:	48 89 f8             	mov    rax,rdi
  2246eb:	4c 8d 4d e8          	lea    r9,[rbp-0x18]
  2246ef:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
    if (is_windows) {
        return joinWindows(allocator, paths);
    } else {
        return joinPosix(allocator, paths);
  2246f3:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  2246f7:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  2246fb:	4c 89 cf             	mov    rdi,r9
  2246fe:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  224702:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  224706:	e8 45 00 00 00       	call   224750 <joinPosix>
  22470b:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  224710:	74 0b                	je     22471d <join+0x3d>
  224712:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  224716:	e8 75 75 fe ff       	call   20bc90 <__zig_return_error>
  22471b:	eb 02                	jmp    22471f <join+0x3f>
  22471d:	eb 00                	jmp    22471f <join+0x3f>
  22471f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  224723:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  224727:	48 89 01             	mov    QWORD PTR [rcx],rax
  22472a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22472e:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  224732:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  224736:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  22473a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  22473e:	48 83 c4 40          	add    rsp,0x40
  224742:	5d                   	pop    rbp
  224743:	c3                   	ret    
  224744:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22474b:	00 00 00 00 00 

0000000000224750 <joinPosix>:

pub fn joinWindows(allocator: *Allocator, paths: ...) ![]u8 {
    return mem.join(allocator, sep_windows, paths);
}

pub fn joinPosix(allocator: *Allocator, paths: ...) ![]u8 {
  224750:	55                   	push   rbp
  224751:	48 89 e5             	mov    rbp,rsp
  224754:	48 83 ec 50          	sub    rsp,0x50
  224758:	48 89 f8             	mov    rax,rdi
  22475b:	4c 8d 4d e8          	lea    r9,[rbp-0x18]
  22475f:	41 ba 2f 00 00 00    	mov    r10d,0x2f
  224765:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
    return mem.join(allocator, sep_posix, paths);
  224769:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  22476d:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  224771:	4c 89 cf             	mov    rdi,r9
  224774:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  224778:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  22477c:	44 89 d1             	mov    ecx,r10d
  22477f:	4c 8b 4d c8          	mov    r9,QWORD PTR [rbp-0x38]
  224783:	4c 89 45 c0          	mov    QWORD PTR [rbp-0x40],r8
  224787:	4d 89 c8             	mov    r8,r9
  22478a:	4c 8b 4d c0          	mov    r9,QWORD PTR [rbp-0x40]
  22478e:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  224792:	e8 39 00 00 00       	call   2247d0 <join.82>
  224797:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  22479c:	74 0b                	je     2247a9 <joinPosix+0x59>
  22479e:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  2247a2:	e8 e9 74 fe ff       	call   20bc90 <__zig_return_error>
  2247a7:	eb 02                	jmp    2247ab <joinPosix+0x5b>
  2247a9:	eb 00                	jmp    2247ab <joinPosix+0x5b>
  2247ab:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2247af:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  2247b3:	48 89 01             	mov    QWORD PTR [rcx],rax
  2247b6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2247ba:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2247be:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2247c2:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  2247c6:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  2247ca:	48 83 c4 50          	add    rsp,0x50
  2247ce:	5d                   	pop    rbp
  2247cf:	c3                   	ret    

00000000002247d0 <join.82>:
    }
};

/// Naively combines a series of strings with a separator.
/// Allocates memory for the result, which must be freed by the caller.
pub fn join(allocator: *Allocator, sep: u8, strings: ...) ![]u8 {
  2247d0:	55                   	push   rbp
  2247d1:	48 89 e5             	mov    rbp,rsp
  2247d4:	48 81 ec c0 01 00 00 	sub    rsp,0x1c0
  2247db:	88 c8                	mov    al,cl
  2247dd:	49 89 fa             	mov    r10,rdi
  2247e0:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  2247e7:	88 85 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],al
    comptime assert(strings.len >= 1);
    var total_strings_len: usize = strings.len; // 1 sep per string
  2247ed:	48 c7 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],0x2
  2247f4:	02 00 00 00 
    {
        comptime var string_i = 0;
        inline while (string_i < strings.len) : (string_i += 1) {
            const arg = ([]const u8)(strings[string_i]);
  2247f8:	49 8b 10             	mov    rdx,QWORD PTR [r8]
  2247fb:	48 89 95 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdx
  224802:	49 8b 50 08          	mov    rdx,QWORD PTR [r8+0x8]
  224806:	48 89 95 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rdx
            total_strings_len += arg.len;
  22480d:	48 8b 95 58 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa8]
  224814:	48 03 95 40 ff ff ff 	add    rdx,QWORD PTR [rbp-0xc0]
  22481b:	0f 92 c0             	setb   al
  22481e:	4c 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],r10
  224825:	4c 89 8d f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],r9
  22482c:	48 89 b5 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rsi
  224833:	4c 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],r8
  22483a:	48 89 bd d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rdi
  224841:	48 89 95 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rdx
  224848:	88 85 cf fe ff ff    	mov    BYTE PTR [rbp-0x131],al
  22484e:	0f 82 24 01 00 00    	jb     224978 <join.82+0x1a8>
  224854:	e9 2f 01 00 00       	jmp    224988 <join.82+0x1b8>
        }
    }

    const buf = try allocator.alloc(u8, total_strings_len);
  224859:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  22485d:	48 8b bd e8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x118]
  224864:	66 89 85 cc fe ff ff 	mov    WORD PTR [rbp-0x134],ax
  22486b:	e8 20 74 fe ff       	call   20bc90 <__zig_return_error>
  224870:	66 8b 85 cc fe ff ff 	mov    ax,WORD PTR [rbp-0x134]
  224877:	66 89 45 b8          	mov    WORD PTR [rbp-0x48],ax
  22487b:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  22487f:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
  224886:	48 89 39             	mov    QWORD PTR [rcx],rdi
  224889:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  22488d:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  224891:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  224895:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  224899:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  2248a0:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  2248a7:	5d                   	pop    rbp
  2248a8:	c3                   	ret    
  2248a9:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2248ad:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  2248b4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2248b8:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
    errdefer allocator.free(buf);

    var buf_index: usize = 0;
  2248bf:	48 c7 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],0x0
  2248c6:	00 00 00 00 
    comptime var string_i = 0;
    inline while (true) {
        const arg = ([]const u8)(strings[string_i]);
  2248ca:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
  2248d1:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  2248d4:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  2248db:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  2248df:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
        string_i += 1;
        copy(u8, buf[buf_index..], arg);
  2248e6:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  2248ed:	48 8b 95 30 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd0]
  2248f4:	48 39 d1             	cmp    rcx,rdx
  2248f7:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
  2248fe:	48 89 95 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rdx
  224905:	0f 86 27 01 00 00    	jbe    224a32 <join.82+0x262>
  22490b:	e9 12 01 00 00       	jmp    224a22 <join.82+0x252>
        buf_index += arg.len;
        if (string_i >= strings.len) break;
        if (buf[buf_index - 1] != sep) {
            buf[buf_index] = sep;
  224910:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  224917:	48 3b 85 30 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xd0]
  22491e:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  224925:	0f 82 ff 01 00 00    	jb     224b2a <join.82+0x35a>
  22492b:	e9 ea 01 00 00       	jmp    224b1a <join.82+0x34a>
        if (buf[buf_index - 1] != sep) {
  224930:	eb 00                	jmp    224932 <join.82+0x162>
        const arg = ([]const u8)(strings[string_i]);
  224932:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  224939:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22493c:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  224943:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  224947:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
        copy(u8, buf[buf_index..], arg);
  22494e:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  224955:	48 8b 95 30 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd0]
  22495c:	48 39 d1             	cmp    rcx,rdx
  22495f:	48 89 8d a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rcx
  224966:	48 89 95 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdx
  22496d:	0f 86 20 02 00 00    	jbe    224b93 <join.82+0x3c3>
  224973:	e9 0b 02 00 00       	jmp    224b83 <join.82+0x3b3>
  224978:	48 8d 3d 49 e8 01 00 	lea    rdi,[rip+0x1e849]        # 2431c8 <__unnamed_4>
  22497f:	31 c0                	xor    eax,eax
  224981:	89 c6                	mov    esi,eax
            total_strings_len += arg.len;
  224983:	e8 78 6c fe ff       	call   20b600 <panic>
  224988:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  22498f:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
            const arg = ([]const u8)(strings[string_i]);
  224996:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22499d:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
  2249a0:	48 89 95 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdx
  2249a7:	48 8b 51 08          	mov    rdx,QWORD PTR [rcx+0x8]
  2249ab:	48 89 95 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rdx
            total_strings_len += arg.len;
  2249b2:	48 8b 95 58 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa8]
  2249b9:	48 03 95 40 ff ff ff 	add    rdx,QWORD PTR [rbp-0xc0]
  2249c0:	40 0f 92 c6          	setb   sil
  2249c4:	48 89 95 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rdx
  2249cb:	40 88 b5 97 fe ff ff 	mov    BYTE PTR [rbp-0x169],sil
  2249d2:	72 02                	jb     2249d6 <join.82+0x206>
  2249d4:	eb 10                	jmp    2249e6 <join.82+0x216>
  2249d6:	48 8d 3d eb e7 01 00 	lea    rdi,[rip+0x1e7eb]        # 2431c8 <__unnamed_4>
  2249dd:	31 c0                	xor    eax,eax
  2249df:	89 c6                	mov    esi,eax
  2249e1:	e8 1a 6c fe ff       	call   20b600 <panic>
  2249e6:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
  2249ea:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
  2249f1:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
    const buf = try allocator.alloc(u8, total_strings_len);
  2249f8:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  2249ff:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  224a06:	48 8b b5 e8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x118]
  224a0d:	e8 2e da ff ff       	call   222440 <Allocator_alloc.74>
  224a12:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  224a17:	0f 85 3c fe ff ff    	jne    224859 <join.82+0x89>
  224a1d:	e9 87 fe ff ff       	jmp    2248a9 <join.82+0xd9>
  224a22:	48 8d 3d af e9 01 00 	lea    rdi,[rip+0x1e9af]        # 2433d8 <__unnamed_20>
  224a29:	31 c0                	xor    eax,eax
  224a2b:	89 c6                	mov    esi,eax
        copy(u8, buf[buf_index..], arg);
  224a2d:	e8 ce 6b fe ff       	call   20b600 <panic>
  224a32:	48 8d 7d a8          	lea    rdi,[rbp-0x58]
  224a36:	48 8d b5 00 ff ff ff 	lea    rsi,[rbp-0x100]
  224a3d:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  224a44:	48 03 85 28 ff ff ff 	add    rax,QWORD PTR [rbp-0xd8]
  224a4b:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  224a4f:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  224a56:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  224a5d:	48 29 c8             	sub    rax,rcx
  224a60:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  224a64:	e8 67 02 00 00       	call   224cd0 <copy>
        buf_index += arg.len;
  224a69:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  224a70:	48 03 85 08 ff ff ff 	add    rax,QWORD PTR [rbp-0xf8]
  224a77:	0f 92 c2             	setb   dl
  224a7a:	48 89 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rax
  224a81:	88 95 87 fe ff ff    	mov    BYTE PTR [rbp-0x179],dl
  224a87:	72 02                	jb     224a8b <join.82+0x2bb>
  224a89:	eb 10                	jmp    224a9b <join.82+0x2cb>
  224a8b:	48 8d 3d 36 e7 01 00 	lea    rdi,[rip+0x1e736]        # 2431c8 <__unnamed_4>
  224a92:	31 c0                	xor    eax,eax
  224a94:	89 c6                	mov    esi,eax
  224a96:	e8 65 6b fe ff       	call   20b600 <panic>
  224a9b:	48 8b 85 88 fe ff ff 	mov    rax,QWORD PTR [rbp-0x178]
  224aa2:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
        if (buf[buf_index - 1] != sep) {
  224aa9:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  224ab0:	48 83 e9 01          	sub    rcx,0x1
  224ab4:	0f 92 c2             	setb   dl
  224ab7:	48 89 8d 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rcx
  224abe:	88 95 77 fe ff ff    	mov    BYTE PTR [rbp-0x189],dl
  224ac4:	72 02                	jb     224ac8 <join.82+0x2f8>
  224ac6:	eb 10                	jmp    224ad8 <join.82+0x308>
  224ac8:	48 8d 3d f9 e6 01 00 	lea    rdi,[rip+0x1e6f9]        # 2431c8 <__unnamed_4>
  224acf:	31 c0                	xor    eax,eax
  224ad1:	89 c6                	mov    esi,eax
  224ad3:	e8 28 6b fe ff       	call   20b600 <panic>
  224ad8:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
  224adf:	48 3b 85 30 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xd0]
  224ae6:	72 10                	jb     224af8 <join.82+0x328>
  224ae8:	48 8d 3d e9 e8 01 00 	lea    rdi,[rip+0x1e8e9]        # 2433d8 <__unnamed_20>
  224aef:	31 c0                	xor    eax,eax
  224af1:	89 c6                	mov    esi,eax
  224af3:	e8 08 6b fe ff       	call   20b600 <panic>
  224af8:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  224aff:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
  224b06:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  224b09:	3a 95 67 ff ff ff    	cmp    dl,BYTE PTR [rbp-0x99]
  224b0f:	0f 85 fb fd ff ff    	jne    224910 <join.82+0x140>
  224b15:	e9 16 fe ff ff       	jmp    224930 <join.82+0x160>
  224b1a:	48 8d 3d b7 e8 01 00 	lea    rdi,[rip+0x1e8b7]        # 2433d8 <__unnamed_20>
  224b21:	31 c0                	xor    eax,eax
  224b23:	89 c6                	mov    esi,eax
            buf[buf_index] = sep;
  224b25:	e8 d6 6a fe ff       	call   20b600 <panic>
  224b2a:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  224b31:	8a 8d 67 ff ff ff    	mov    cl,BYTE PTR [rbp-0x99]
  224b37:	48 8b 95 b0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x150]
  224b3e:	88 0c 10             	mov    BYTE PTR [rax+rdx*1],cl
            buf_index += 1;
  224b41:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  224b48:	48 83 c0 01          	add    rax,0x1
  224b4c:	0f 92 c1             	setb   cl
  224b4f:	48 89 85 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rax
  224b56:	88 8d 67 fe ff ff    	mov    BYTE PTR [rbp-0x199],cl
  224b5c:	72 02                	jb     224b60 <join.82+0x390>
  224b5e:	eb 10                	jmp    224b70 <join.82+0x3a0>
  224b60:	48 8d 3d 61 e6 01 00 	lea    rdi,[rip+0x1e661]        # 2431c8 <__unnamed_4>
  224b67:	31 c0                	xor    eax,eax
  224b69:	89 c6                	mov    esi,eax
  224b6b:	e8 90 6a fe ff       	call   20b600 <panic>
  224b70:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
  224b77:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
        if (buf[buf_index - 1] != sep) {
  224b7e:	e9 af fd ff ff       	jmp    224932 <join.82+0x162>
  224b83:	48 8d 3d 4e e8 01 00 	lea    rdi,[rip+0x1e84e]        # 2433d8 <__unnamed_20>
  224b8a:	31 c0                	xor    eax,eax
  224b8c:	89 c6                	mov    esi,eax
        copy(u8, buf[buf_index..], arg);
  224b8e:	e8 6d 6a fe ff       	call   20b600 <panic>
  224b93:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  224b97:	48 8d b5 00 ff ff ff 	lea    rsi,[rbp-0x100]
  224b9e:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
  224ba5:	48 03 85 28 ff ff ff 	add    rax,QWORD PTR [rbp-0xd8]
  224bac:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  224bb0:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
  224bb7:	48 8b 8d a8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x158]
  224bbe:	48 29 c8             	sub    rax,rcx
  224bc1:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  224bc5:	e8 06 01 00 00       	call   224cd0 <copy>
        buf_index += arg.len;
  224bca:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  224bd1:	48 03 85 08 ff ff ff 	add    rax,QWORD PTR [rbp-0xf8]
  224bd8:	0f 92 c2             	setb   dl
  224bdb:	48 89 85 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rax
  224be2:	88 95 57 fe ff ff    	mov    BYTE PTR [rbp-0x1a9],dl
  224be8:	72 02                	jb     224bec <join.82+0x41c>
  224bea:	eb 10                	jmp    224bfc <join.82+0x42c>
  224bec:	48 8d 3d d5 e5 01 00 	lea    rdi,[rip+0x1e5d5]        # 2431c8 <__unnamed_4>
  224bf3:	31 c0                	xor    eax,eax
  224bf5:	89 c6                	mov    esi,eax
  224bf7:	e8 04 6a fe ff       	call   20b600 <panic>
  224bfc:	31 c0                	xor    eax,eax
  224bfe:	89 c1                	mov    ecx,eax
  224c00:	48 8b 95 58 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1a8]
  224c07:	48 89 95 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdx
        }
    }

    return buf[0..buf_index];
  224c0e:	48 8b b5 20 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe0]
  224c15:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
  224c1c:	48 39 f1             	cmp    rcx,rsi
  224c1f:	48 89 bd 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rdi
  224c26:	48 89 b5 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rsi
  224c2d:	76 10                	jbe    224c3f <join.82+0x46f>
  224c2f:	48 8d 3d a2 e7 01 00 	lea    rdi,[rip+0x1e7a2]        # 2433d8 <__unnamed_20>
  224c36:	31 c0                	xor    eax,eax
  224c38:	89 c6                	mov    esi,eax
  224c3a:	e8 c1 69 fe ff       	call   20b600 <panic>
  224c3f:	48 8b 85 40 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c0]
  224c46:	48 8b 8d 48 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1b8]
  224c4d:	48 39 c8             	cmp    rax,rcx
  224c50:	76 10                	jbe    224c62 <join.82+0x492>
  224c52:	48 8d 3d 7f e7 01 00 	lea    rdi,[rip+0x1e77f]        # 2433d8 <__unnamed_20>
  224c59:	31 c0                	xor    eax,eax
  224c5b:	89 c6                	mov    esi,eax
  224c5d:	e8 9e 69 fe ff       	call   20b600 <panic>
  224c62:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  224c69:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  224c6d:	48 8b 85 40 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c0]
  224c74:	48 83 e8 00          	sub    rax,0x0
  224c78:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  224c7c:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  224c83:	00 00 
  224c85:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  224c89:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  224c90:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  224c94:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  224c98:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  224c9f:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
  224ca6:	48 89 01             	mov    QWORD PTR [rcx],rax
  224ca9:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  224cb0:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  224cb4:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  224cb8:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  224cbc:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  224cc3:	48 81 c4 c0 01 00 00 	add    rsp,0x1c0
  224cca:	5d                   	pop    rbp
  224ccb:	c3                   	ret    
  224ccc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000224cd0 <copy>:
pub fn copy(comptime T: type, dest: []T, source: []const T) void {
  224cd0:	55                   	push   rbp
  224cd1:	48 89 e5             	mov    rbp,rsp
    assert(dest.len >= source.len);
  224cd4:	48 83 ec 30          	sub    rsp,0x30
  224cd8:	48 8b 47 08          	mov    rax,QWORD PTR [rdi+0x8]
  224cdc:	48 3b 46 08          	cmp    rax,QWORD PTR [rsi+0x8]
  224ce0:	0f 93 c1             	setae  cl
  224ce3:	0f b6 d1             	movzx  edx,cl
  224ce6:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  224cea:	89 d7                	mov    edi,edx
  224cec:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  224cf0:	e8 0b 63 fe ff       	call   20b000 <assert>
    for (source) |s, i|
  224cf5:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  224cfc:	00 
  224cfd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  224d01:	48 8b 70 08          	mov    rsi,QWORD PTR [rax+0x8]
  224d05:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  224d09:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  224d0d:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  224d11:	48 39 c8             	cmp    rax,rcx
  224d14:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  224d18:	73 30                	jae    224d4a <copy+0x7a>
  224d1a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  224d1e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  224d21:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  224d25:	40 8a 34 11          	mov    sil,BYTE PTR [rcx+rdx*1]
  224d29:	40 88 75 ff          	mov    BYTE PTR [rbp-0x1],sil
        dest[i] = s;
  224d2d:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  224d31:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  224d35:	4c 8b 07             	mov    r8,QWORD PTR [rdi]
  224d38:	40 8a 75 ff          	mov    sil,BYTE PTR [rbp-0x1]
  224d3c:	41 88 34 08          	mov    BYTE PTR [r8+rcx*1],sil
    for (source) |s, i|
  224d40:	48 83 c2 01          	add    rdx,0x1
  224d44:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  224d48:	eb bf                	jmp    224d09 <copy+0x39>
pub fn copy(comptime T: type, dest: []T, source: []const T) void {
  224d4a:	48 83 c4 30          	add    rsp,0x30
  224d4e:	5d                   	pop    rbp
  224d4f:	c3                   	ret    

0000000000224d50 <format.83>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  224d50:	55                   	push   rbp
  224d51:	48 89 e5             	mov    rbp,rsp
  224d54:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  224d5b:	48 8b 45 18          	mov    rax,QWORD PTR [rbp+0x18]
  224d5f:	4c 8b 55 10          	mov    r10,QWORD PTR [rbp+0x10]
  224d63:	4c 8d 1d 6e e9 01 00 	lea    r11,[rip+0x1e96e]        # 2436d8 <__unnamed_158>
  224d6a:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  224d6e:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  224d72:	4c 89 45 d0          	mov    QWORD PTR [rbp-0x30],r8
  224d76:	4c 89 4d c8          	mov    QWORD PTR [rbp-0x38],r9
                        try output(context, fmt[start_index..i]);
  224d7a:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  224d7e:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  224d82:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
  224d86:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  224d8a:	4c 89 da             	mov    rdx,r11
  224d8d:	4c 8b 45 b8          	mov    r8,QWORD PTR [rbp-0x48]
  224d91:	4c 89 55 b0          	mov    QWORD PTR [rbp-0x50],r10
  224d95:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  224d99:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  224d9d:	41 ff d0             	call   r8
  224da0:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  224da4:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  224da9:	74 1e                	je     224dc9 <format.83+0x79>
  224dab:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  224daf:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224db3:	66 89 45 9e          	mov    WORD PTR [rbp-0x62],ax
  224db7:	e8 d4 6e fe ff       	call   20bc90 <__zig_return_error>
  224dbc:	66 8b 45 9e          	mov    ax,WORD PTR [rbp-0x62]
  224dc0:	48 81 c4 80 00 00 00 	add    rsp,0x80
  224dc7:	5d                   	pop    rbp
  224dc8:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  224dc9:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  224dcd:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  224dd1:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224dd5:	48 8b 75 a8          	mov    rsi,QWORD PTR [rbp-0x58]
  224dd9:	e8 72 02 00 00       	call   225050 <formatType.84>
  224dde:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  224de2:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  224de7:	74 1e                	je     224e07 <format.83+0xb7>
  224de9:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  224ded:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224df1:	66 89 45 9c          	mov    WORD PTR [rbp-0x64],ax
  224df5:	e8 96 6e fe ff       	call   20bc90 <__zig_return_error>
  224dfa:	66 8b 45 9c          	mov    ax,WORD PTR [rbp-0x64]
  224dfe:	48 81 c4 80 00 00 00 	add    rsp,0x80
  224e05:	5d                   	pop    rbp
  224e06:	c3                   	ret    
  224e07:	48 8d 15 e2 e8 01 00 	lea    rdx,[rip+0x1e8e2]        # 2436f0 <__unnamed_159>
                        try output(context, fmt[start_index..i]);
  224e0e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  224e12:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  224e16:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224e1a:	ff d0                	call   rax
  224e1c:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  224e20:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  224e25:	74 1e                	je     224e45 <format.83+0xf5>
  224e27:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  224e2b:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224e2f:	66 89 45 9a          	mov    WORD PTR [rbp-0x66],ax
  224e33:	e8 58 6e fe ff       	call   20bc90 <__zig_return_error>
  224e38:	66 8b 45 9a          	mov    ax,WORD PTR [rbp-0x66]
  224e3c:	48 81 c4 80 00 00 00 	add    rsp,0x80
  224e43:	5d                   	pop    rbp
  224e44:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  224e45:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  224e49:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  224e4d:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  224e51:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224e55:	e8 56 02 00 00       	call   2250b0 <formatType.85>
  224e5a:	66 89 45 f8          	mov    WORD PTR [rbp-0x8],ax
  224e5e:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  224e63:	74 1e                	je     224e83 <format.83+0x133>
  224e65:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  224e69:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224e6d:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  224e71:	e8 1a 6e fe ff       	call   20bc90 <__zig_return_error>
  224e76:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  224e7a:	48 81 c4 80 00 00 00 	add    rsp,0x80
  224e81:	5d                   	pop    rbp
  224e82:	c3                   	ret    
  224e83:	48 8d 15 7e e8 01 00 	lea    rdx,[rip+0x1e87e]        # 243708 <__unnamed_160>
                        try output(context, fmt[start_index..i]);
  224e8a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  224e8e:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  224e92:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224e96:	ff d0                	call   rax
  224e98:	66 89 45 f6          	mov    WORD PTR [rbp-0xa],ax
  224e9c:	66 83 7d f6 00       	cmp    WORD PTR [rbp-0xa],0x0
  224ea1:	74 1e                	je     224ec1 <format.83+0x171>
  224ea3:	66 8b 45 f6          	mov    ax,WORD PTR [rbp-0xa]
  224ea7:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224eab:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  224eaf:	e8 dc 6d fe ff       	call   20bc90 <__zig_return_error>
  224eb4:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  224eb8:	48 81 c4 80 00 00 00 	add    rsp,0x80
  224ebf:	5d                   	pop    rbp
  224ec0:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  224ec1:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  224ec5:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  224ec9:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  224ecd:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224ed1:	e8 da 01 00 00       	call   2250b0 <formatType.85>
  224ed6:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
  224eda:	66 83 7d f4 00       	cmp    WORD PTR [rbp-0xc],0x0
  224edf:	74 1e                	je     224eff <format.83+0x1af>
  224ee1:	66 8b 45 f4          	mov    ax,WORD PTR [rbp-0xc]
  224ee5:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224ee9:	66 89 45 94          	mov    WORD PTR [rbp-0x6c],ax
  224eed:	e8 9e 6d fe ff       	call   20bc90 <__zig_return_error>
  224ef2:	66 8b 45 94          	mov    ax,WORD PTR [rbp-0x6c]
  224ef6:	48 81 c4 80 00 00 00 	add    rsp,0x80
  224efd:	5d                   	pop    rbp
  224efe:	c3                   	ret    
  224eff:	48 8d 15 1a e8 01 00 	lea    rdx,[rip+0x1e81a]        # 243720 <__unnamed_161>
                        try output(context, fmt[start_index..i]);
  224f06:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  224f0a:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  224f0e:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224f12:	ff d0                	call   rax
  224f14:	66 89 45 f2          	mov    WORD PTR [rbp-0xe],ax
  224f18:	66 83 7d f2 00       	cmp    WORD PTR [rbp-0xe],0x0
  224f1d:	74 1e                	je     224f3d <format.83+0x1ed>
  224f1f:	66 8b 45 f2          	mov    ax,WORD PTR [rbp-0xe]
  224f23:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224f27:	66 89 45 92          	mov    WORD PTR [rbp-0x6e],ax
  224f2b:	e8 60 6d fe ff       	call   20bc90 <__zig_return_error>
  224f30:	66 8b 45 92          	mov    ax,WORD PTR [rbp-0x6e]
  224f34:	48 81 c4 80 00 00 00 	add    rsp,0x80
  224f3b:	5d                   	pop    rbp
  224f3c:	c3                   	ret    
                    try formatType(args[next_arg], fmt[s..i], context, Errors, output);
  224f3d:	48 8b 75 10          	mov    rsi,QWORD PTR [rbp+0x10]
  224f41:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  224f45:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  224f49:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224f4d:	e8 ae 01 00 00       	call   225100 <formatType.86>
  224f52:	66 89 45 f0          	mov    WORD PTR [rbp-0x10],ax
  224f56:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  224f5b:	74 1e                	je     224f7b <format.83+0x22b>
  224f5d:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  224f61:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224f65:	66 89 45 90          	mov    WORD PTR [rbp-0x70],ax
  224f69:	e8 22 6d fe ff       	call   20bc90 <__zig_return_error>
  224f6e:	66 8b 45 90          	mov    ax,WORD PTR [rbp-0x70]
  224f72:	48 81 c4 80 00 00 00 	add    rsp,0x80
  224f79:	5d                   	pop    rbp
  224f7a:	c3                   	ret    
  224f7b:	48 8d 15 b6 e7 01 00 	lea    rdx,[rip+0x1e7b6]        # 243738 <__unnamed_162>
                        try output(context, fmt[start_index..i]);
  224f82:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  224f86:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  224f8a:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224f8e:	ff d0                	call   rax
  224f90:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  224f94:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  224f99:	74 1e                	je     224fb9 <format.83+0x269>
  224f9b:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  224f9f:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224fa3:	66 89 45 8e          	mov    WORD PTR [rbp-0x72],ax
  224fa7:	e8 e4 6c fe ff       	call   20bc90 <__zig_return_error>
  224fac:	66 8b 45 8e          	mov    ax,WORD PTR [rbp-0x72]
  224fb0:	48 81 c4 80 00 00 00 	add    rsp,0x80
  224fb7:	5d                   	pop    rbp
  224fb8:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  224fb9:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  224fbd:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  224fc1:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224fc5:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  224fc9:	e8 82 00 00 00       	call   225050 <formatType.84>
  224fce:	66 89 45 ec          	mov    WORD PTR [rbp-0x14],ax
  224fd2:	66 83 7d ec 00       	cmp    WORD PTR [rbp-0x14],0x0
  224fd7:	74 1e                	je     224ff7 <format.83+0x2a7>
  224fd9:	66 8b 45 ec          	mov    ax,WORD PTR [rbp-0x14]
  224fdd:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  224fe1:	66 89 45 8c          	mov    WORD PTR [rbp-0x74],ax
  224fe5:	e8 a6 6c fe ff       	call   20bc90 <__zig_return_error>
  224fea:	66 8b 45 8c          	mov    ax,WORD PTR [rbp-0x74]
  224fee:	48 81 c4 80 00 00 00 	add    rsp,0x80
  224ff5:	5d                   	pop    rbp
  224ff6:	c3                   	ret    
  224ff7:	48 8d 15 52 e7 01 00 	lea    rdx,[rip+0x1e752]        # 243750 <__unnamed_163>
        try output(context, fmt[start_index..]);
  224ffe:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  225002:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  225006:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  22500a:	ff d0                	call   rax
  22500c:	66 89 45 ea          	mov    WORD PTR [rbp-0x16],ax
  225010:	66 83 7d ea 00       	cmp    WORD PTR [rbp-0x16],0x0
  225015:	74 1e                	je     225035 <format.83+0x2e5>
  225017:	66 8b 45 ea          	mov    ax,WORD PTR [rbp-0x16]
  22501b:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  22501f:	66 89 45 8a          	mov    WORD PTR [rbp-0x76],ax
  225023:	e8 68 6c fe ff       	call   20bc90 <__zig_return_error>
  225028:	66 8b 45 8a          	mov    ax,WORD PTR [rbp-0x76]
  22502c:	48 81 c4 80 00 00 00 	add    rsp,0x80
  225033:	5d                   	pop    rbp
  225034:	c3                   	ret    
  225035:	31 c0                	xor    eax,eax
  225037:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  22503a:	66 89 c8             	mov    ax,cx
  22503d:	48 81 c4 80 00 00 00 	add    rsp,0x80
  225044:	5d                   	pop    rbp
  225045:	c3                   	ret    
  225046:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  22504d:	00 00 00 

0000000000225050 <formatType.84>:
pub fn formatType(
  225050:	55                   	push   rbp
  225051:	48 89 e5             	mov    rbp,rsp
  225054:	48 83 ec 30          	sub    rsp,0x30
  225058:	48 8d 45 e0          	lea    rax,[rbp-0x20]
  22505c:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  225060:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
                const casted_value = ([]const u8)(value);
  225064:	48 8b 0e             	mov    rcx,QWORD PTR [rsi]
  225067:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  22506b:	48 8b 4e 08          	mov    rcx,QWORD PTR [rsi+0x8]
  22506f:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
                return output(context, casted_value);
  225073:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  225077:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  22507b:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  22507f:	48 89 c2             	mov    rdx,rax
  225082:	ff d1                	call   rcx
  225084:	66 83 f8 00          	cmp    ax,0x0
  225088:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  22508c:	74 0b                	je     225099 <formatType.84+0x49>
  22508e:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  225092:	e8 f9 6b fe ff       	call   20bc90 <__zig_return_error>
  225097:	eb 02                	jmp    22509b <formatType.84+0x4b>
  225099:	eb 00                	jmp    22509b <formatType.84+0x4b>
  22509b:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  22509f:	48 83 c4 30          	add    rsp,0x30
  2250a3:	5d                   	pop    rbp
  2250a4:	c3                   	ret    
  2250a5:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2250ac:	00 00 00 00 

00000000002250b0 <formatType.85>:
pub fn formatType(
  2250b0:	55                   	push   rbp
  2250b1:	48 89 e5             	mov    rbp,rsp
  2250b4:	48 83 ec 30          	sub    rsp,0x30
  2250b8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2250bc:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  2250c0:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return formatValue(value, fmt, context, Errors, output);
  2250c4:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2250c8:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  2250cc:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2250d0:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2250d4:	e8 47 34 00 00       	call   228520 <formatValue.106>
  2250d9:	66 83 f8 00          	cmp    ax,0x0
  2250dd:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  2250e1:	74 0b                	je     2250ee <formatType.85+0x3e>
  2250e3:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2250e7:	e8 a4 6b fe ff       	call   20bc90 <__zig_return_error>
  2250ec:	eb 02                	jmp    2250f0 <formatType.85+0x40>
  2250ee:	eb 00                	jmp    2250f0 <formatType.85+0x40>
  2250f0:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  2250f4:	48 83 c4 30          	add    rsp,0x30
  2250f8:	5d                   	pop    rbp
  2250f9:	c3                   	ret    
  2250fa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000225100 <formatType.86>:
pub fn formatType(
  225100:	55                   	push   rbp
  225101:	48 89 e5             	mov    rbp,rsp
  225104:	48 83 ec 30          	sub    rsp,0x30
  225108:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22510c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  225110:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return formatValue(value, fmt, context, Errors, output);
  225114:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  225118:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  22511c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  225120:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  225124:	e8 47 34 00 00       	call   228570 <formatValue.107>
  225129:	66 83 f8 00          	cmp    ax,0x0
  22512d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  225131:	74 0b                	je     22513e <formatType.86+0x3e>
  225133:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  225137:	e8 54 6b fe ff       	call   20bc90 <__zig_return_error>
  22513c:	eb 02                	jmp    225140 <formatType.86+0x40>
  22513e:	eb 00                	jmp    225140 <formatType.86+0x40>
  225140:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  225144:	48 83 c4 30          	add    rsp,0x30
  225148:	5d                   	pop    rbp
  225149:	c3                   	ret    
  22514a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000225150 <format.87>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  225150:	55                   	push   rbp
  225151:	48 89 e5             	mov    rbp,rsp
  225154:	48 83 ec 70          	sub    rsp,0x70
  225158:	48 8b 45 18          	mov    rax,QWORD PTR [rbp+0x18]
  22515c:	4c 8b 55 10          	mov    r10,QWORD PTR [rbp+0x10]
  225160:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  225164:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  225168:	4c 89 45 d0          	mov    QWORD PTR [rbp-0x30],r8
  22516c:	4c 89 4d c8          	mov    QWORD PTR [rbp-0x38],r9
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  225170:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  225174:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  225178:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
  22517c:	48 89 75 b8          	mov    QWORD PTR [rbp-0x48],rsi
  225180:	48 89 ce             	mov    rsi,rcx
  225183:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  225187:	4c 89 55 b0          	mov    QWORD PTR [rbp-0x50],r10
  22518b:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  22518f:	e8 4c 02 00 00       	call   2253e0 <formatType.88>
  225194:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  225198:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  22519d:	74 1b                	je     2251ba <format.87+0x6a>
  22519f:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  2251a3:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  2251a7:	66 89 45 a6          	mov    WORD PTR [rbp-0x5a],ax
  2251ab:	e8 e0 6a fe ff       	call   20bc90 <__zig_return_error>
  2251b0:	66 8b 45 a6          	mov    ax,WORD PTR [rbp-0x5a]
  2251b4:	48 83 c4 70          	add    rsp,0x70
  2251b8:	5d                   	pop    rbp
  2251b9:	c3                   	ret    
  2251ba:	48 8d 15 a7 e5 01 00 	lea    rdx,[rip+0x1e5a7]        # 243768 <__unnamed_164>
                        try output(context, fmt[start_index..i]);
  2251c1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2251c5:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  2251c9:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  2251cd:	ff d0                	call   rax
  2251cf:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  2251d3:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  2251d8:	74 1b                	je     2251f5 <format.87+0xa5>
  2251da:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  2251de:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  2251e2:	66 89 45 a4          	mov    WORD PTR [rbp-0x5c],ax
  2251e6:	e8 a5 6a fe ff       	call   20bc90 <__zig_return_error>
  2251eb:	66 8b 45 a4          	mov    ax,WORD PTR [rbp-0x5c]
  2251ef:	48 83 c4 70          	add    rsp,0x70
  2251f3:	5d                   	pop    rbp
  2251f4:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  2251f5:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  2251f9:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  2251fd:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  225201:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  225205:	e8 36 02 00 00       	call   225440 <formatType.89>
  22520a:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  22520e:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  225213:	74 1b                	je     225230 <format.87+0xe0>
  225215:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  225219:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  22521d:	66 89 45 a2          	mov    WORD PTR [rbp-0x5e],ax
  225221:	e8 6a 6a fe ff       	call   20bc90 <__zig_return_error>
  225226:	66 8b 45 a2          	mov    ax,WORD PTR [rbp-0x5e]
  22522a:	48 83 c4 70          	add    rsp,0x70
  22522e:	5d                   	pop    rbp
  22522f:	c3                   	ret    
  225230:	48 8d 15 49 e5 01 00 	lea    rdx,[rip+0x1e549]        # 243780 <__unnamed_165>
                        try output(context, fmt[start_index..i]);
  225237:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  22523b:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  22523f:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  225243:	ff d0                	call   rax
  225245:	66 89 45 f8          	mov    WORD PTR [rbp-0x8],ax
  225249:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  22524e:	74 1b                	je     22526b <format.87+0x11b>
  225250:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  225254:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  225258:	66 89 45 a0          	mov    WORD PTR [rbp-0x60],ax
  22525c:	e8 2f 6a fe ff       	call   20bc90 <__zig_return_error>
  225261:	66 8b 45 a0          	mov    ax,WORD PTR [rbp-0x60]
  225265:	48 83 c4 70          	add    rsp,0x70
  225269:	5d                   	pop    rbp
  22526a:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  22526b:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  22526f:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  225273:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  225277:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  22527b:	e8 c0 01 00 00       	call   225440 <formatType.89>
  225280:	66 89 45 f6          	mov    WORD PTR [rbp-0xa],ax
  225284:	66 83 7d f6 00       	cmp    WORD PTR [rbp-0xa],0x0
  225289:	74 1b                	je     2252a6 <format.87+0x156>
  22528b:	66 8b 45 f6          	mov    ax,WORD PTR [rbp-0xa]
  22528f:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  225293:	66 89 45 9e          	mov    WORD PTR [rbp-0x62],ax
  225297:	e8 f4 69 fe ff       	call   20bc90 <__zig_return_error>
  22529c:	66 8b 45 9e          	mov    ax,WORD PTR [rbp-0x62]
  2252a0:	48 83 c4 70          	add    rsp,0x70
  2252a4:	5d                   	pop    rbp
  2252a5:	c3                   	ret    
  2252a6:	48 8d 15 eb e4 01 00 	lea    rdx,[rip+0x1e4eb]        # 243798 <__unnamed_166>
                        try output(context, fmt[start_index..i]);
  2252ad:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2252b1:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  2252b5:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  2252b9:	ff d0                	call   rax
  2252bb:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
  2252bf:	66 83 7d f4 00       	cmp    WORD PTR [rbp-0xc],0x0
  2252c4:	74 1b                	je     2252e1 <format.87+0x191>
  2252c6:	66 8b 45 f4          	mov    ax,WORD PTR [rbp-0xc]
  2252ca:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  2252ce:	66 89 45 9c          	mov    WORD PTR [rbp-0x64],ax
  2252d2:	e8 b9 69 fe ff       	call   20bc90 <__zig_return_error>
  2252d7:	66 8b 45 9c          	mov    ax,WORD PTR [rbp-0x64]
  2252db:	48 83 c4 70          	add    rsp,0x70
  2252df:	5d                   	pop    rbp
  2252e0:	c3                   	ret    
                    try formatType(args[next_arg], fmt[s..i], context, Errors, output);
  2252e1:	48 8b 75 10          	mov    rsi,QWORD PTR [rbp+0x10]
  2252e5:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  2252e9:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  2252ed:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  2252f1:	e8 9a 01 00 00       	call   225490 <formatType.90>
  2252f6:	66 89 45 f2          	mov    WORD PTR [rbp-0xe],ax
  2252fa:	66 83 7d f2 00       	cmp    WORD PTR [rbp-0xe],0x0
  2252ff:	74 1b                	je     22531c <format.87+0x1cc>
  225301:	66 8b 45 f2          	mov    ax,WORD PTR [rbp-0xe]
  225305:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  225309:	66 89 45 9a          	mov    WORD PTR [rbp-0x66],ax
  22530d:	e8 7e 69 fe ff       	call   20bc90 <__zig_return_error>
  225312:	66 8b 45 9a          	mov    ax,WORD PTR [rbp-0x66]
  225316:	48 83 c4 70          	add    rsp,0x70
  22531a:	5d                   	pop    rbp
  22531b:	c3                   	ret    
  22531c:	48 8d 15 8d e4 01 00 	lea    rdx,[rip+0x1e48d]        # 2437b0 <__unnamed_167>
                        try output(context, fmt[start_index..i]);
  225323:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  225327:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  22532b:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  22532f:	ff d0                	call   rax
  225331:	66 89 45 f0          	mov    WORD PTR [rbp-0x10],ax
  225335:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  22533a:	74 1b                	je     225357 <format.87+0x207>
  22533c:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  225340:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  225344:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  225348:	e8 43 69 fe ff       	call   20bc90 <__zig_return_error>
  22534d:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  225351:	48 83 c4 70          	add    rsp,0x70
  225355:	5d                   	pop    rbp
  225356:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  225357:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  22535b:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  22535f:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  225363:	48 8b 75 a8          	mov    rsi,QWORD PTR [rbp-0x58]
  225367:	e8 74 00 00 00       	call   2253e0 <formatType.88>
  22536c:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  225370:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  225375:	74 1b                	je     225392 <format.87+0x242>
  225377:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  22537b:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  22537f:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  225383:	e8 08 69 fe ff       	call   20bc90 <__zig_return_error>
  225388:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  22538c:	48 83 c4 70          	add    rsp,0x70
  225390:	5d                   	pop    rbp
  225391:	c3                   	ret    
  225392:	48 8d 15 2f e4 01 00 	lea    rdx,[rip+0x1e42f]        # 2437c8 <__unnamed_168>
        try output(context, fmt[start_index..]);
  225399:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  22539d:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  2253a1:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  2253a5:	ff d0                	call   rax
  2253a7:	66 89 45 ec          	mov    WORD PTR [rbp-0x14],ax
  2253ab:	66 83 7d ec 00       	cmp    WORD PTR [rbp-0x14],0x0
  2253b0:	74 1b                	je     2253cd <format.87+0x27d>
  2253b2:	66 8b 45 ec          	mov    ax,WORD PTR [rbp-0x14]
  2253b6:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  2253ba:	66 89 45 94          	mov    WORD PTR [rbp-0x6c],ax
  2253be:	e8 cd 68 fe ff       	call   20bc90 <__zig_return_error>
  2253c3:	66 8b 45 94          	mov    ax,WORD PTR [rbp-0x6c]
  2253c7:	48 83 c4 70          	add    rsp,0x70
  2253cb:	5d                   	pop    rbp
  2253cc:	c3                   	ret    
  2253cd:	31 c0                	xor    eax,eax
  2253cf:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  2253d2:	66 89 c8             	mov    ax,cx
  2253d5:	48 83 c4 70          	add    rsp,0x70
  2253d9:	5d                   	pop    rbp
  2253da:	c3                   	ret    
  2253db:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000002253e0 <formatType.88>:
pub fn formatType(
  2253e0:	55                   	push   rbp
  2253e1:	48 89 e5             	mov    rbp,rsp
  2253e4:	48 83 ec 30          	sub    rsp,0x30
  2253e8:	48 8d 45 e0          	lea    rax,[rbp-0x20]
  2253ec:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  2253f0:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
                const casted_value = ([]const u8)(value);
  2253f4:	48 8b 0e             	mov    rcx,QWORD PTR [rsi]
  2253f7:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  2253fb:	48 8b 4e 08          	mov    rcx,QWORD PTR [rsi+0x8]
  2253ff:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
                return output(context, casted_value);
  225403:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  225407:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  22540b:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  22540f:	48 89 c2             	mov    rdx,rax
  225412:	ff d1                	call   rcx
  225414:	66 83 f8 00          	cmp    ax,0x0
  225418:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  22541c:	74 0b                	je     225429 <formatType.88+0x49>
  22541e:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  225422:	e8 69 68 fe ff       	call   20bc90 <__zig_return_error>
  225427:	eb 02                	jmp    22542b <formatType.88+0x4b>
  225429:	eb 00                	jmp    22542b <formatType.88+0x4b>
  22542b:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  22542f:	48 83 c4 30          	add    rsp,0x30
  225433:	5d                   	pop    rbp
  225434:	c3                   	ret    
  225435:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22543c:	00 00 00 00 

0000000000225440 <formatType.89>:
pub fn formatType(
  225440:	55                   	push   rbp
  225441:	48 89 e5             	mov    rbp,rsp
  225444:	48 83 ec 30          	sub    rsp,0x30
  225448:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22544c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  225450:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return formatValue(value, fmt, context, Errors, output);
  225454:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  225458:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  22545c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  225460:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  225464:	e8 57 31 00 00       	call   2285c0 <formatValue.108>
  225469:	66 83 f8 00          	cmp    ax,0x0
  22546d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  225471:	74 0b                	je     22547e <formatType.89+0x3e>
  225473:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  225477:	e8 14 68 fe ff       	call   20bc90 <__zig_return_error>
  22547c:	eb 02                	jmp    225480 <formatType.89+0x40>
  22547e:	eb 00                	jmp    225480 <formatType.89+0x40>
  225480:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  225484:	48 83 c4 30          	add    rsp,0x30
  225488:	5d                   	pop    rbp
  225489:	c3                   	ret    
  22548a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000225490 <formatType.90>:
pub fn formatType(
  225490:	55                   	push   rbp
  225491:	48 89 e5             	mov    rbp,rsp
  225494:	48 83 ec 30          	sub    rsp,0x30
  225498:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22549c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  2254a0:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return formatValue(value, fmt, context, Errors, output);
  2254a4:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2254a8:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  2254ac:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2254b0:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2254b4:	e8 57 31 00 00       	call   228610 <formatValue.109>
  2254b9:	66 83 f8 00          	cmp    ax,0x0
  2254bd:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  2254c1:	74 0b                	je     2254ce <formatType.90+0x3e>
  2254c3:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2254c7:	e8 c4 67 fe ff       	call   20bc90 <__zig_return_error>
  2254cc:	eb 02                	jmp    2254d0 <formatType.90+0x40>
  2254ce:	eb 00                	jmp    2254d0 <formatType.90+0x40>
  2254d0:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  2254d4:	48 83 c4 30          	add    rsp,0x30
  2254d8:	5d                   	pop    rbp
  2254d9:	c3                   	ret    
  2254da:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000002254e0 <format.91>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  2254e0:	55                   	push   rbp
  2254e1:	48 89 e5             	mov    rbp,rsp
  2254e4:	48 83 ec 50          	sub    rsp,0x50
  2254e8:	48 8d 05 f1 e2 01 00 	lea    rax,[rip+0x1e2f1]        # 2437e0 <__unnamed_169>
  2254ef:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
  2254f3:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  2254f7:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
                        try output(context, fmt[start_index..i]);
  2254fb:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  2254ff:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  225503:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
  225507:	48 89 c2             	mov    rdx,rax
  22550a:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
  22550e:	ff d1                	call   rcx
  225510:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  225514:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  225519:	74 1b                	je     225536 <format.91+0x56>
  22551b:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  22551f:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  225523:	66 89 45 c6          	mov    WORD PTR [rbp-0x3a],ax
  225527:	e8 64 67 fe ff       	call   20bc90 <__zig_return_error>
  22552c:	66 8b 45 c6          	mov    ax,WORD PTR [rbp-0x3a]
  225530:	48 83 c4 50          	add    rsp,0x50
  225534:	5d                   	pop    rbp
  225535:	c3                   	ret    
                    try formatType(args[next_arg], fmt[s..i], context, Errors, output);
  225536:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  22553a:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  22553e:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  225542:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  225546:	e8 e5 00 00 00       	call   225630 <formatType.92>
  22554b:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  22554f:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  225554:	74 1b                	je     225571 <format.91+0x91>
  225556:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  22555a:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  22555e:	66 89 45 c4          	mov    WORD PTR [rbp-0x3c],ax
  225562:	e8 29 67 fe ff       	call   20bc90 <__zig_return_error>
  225567:	66 8b 45 c4          	mov    ax,WORD PTR [rbp-0x3c]
  22556b:	48 83 c4 50          	add    rsp,0x50
  22556f:	5d                   	pop    rbp
  225570:	c3                   	ret    
  225571:	48 8d 15 80 e2 01 00 	lea    rdx,[rip+0x1e280]        # 2437f8 <__unnamed_170>
                        try output(context, fmt[start_index..i]);
  225578:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  22557c:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  225580:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  225584:	ff d0                	call   rax
  225586:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  22558a:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  22558f:	74 1b                	je     2255ac <format.91+0xcc>
  225591:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  225595:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  225599:	66 89 45 c2          	mov    WORD PTR [rbp-0x3e],ax
  22559d:	e8 ee 66 fe ff       	call   20bc90 <__zig_return_error>
  2255a2:	66 8b 45 c2          	mov    ax,WORD PTR [rbp-0x3e]
  2255a6:	48 83 c4 50          	add    rsp,0x50
  2255aa:	5d                   	pop    rbp
  2255ab:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  2255ac:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  2255b0:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  2255b4:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  2255b8:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  2255bc:	e8 bf 00 00 00       	call   225680 <formatType.93>
  2255c1:	66 89 45 f8          	mov    WORD PTR [rbp-0x8],ax
  2255c5:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  2255ca:	74 1b                	je     2255e7 <format.91+0x107>
  2255cc:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  2255d0:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  2255d4:	66 89 45 c0          	mov    WORD PTR [rbp-0x40],ax
  2255d8:	e8 b3 66 fe ff       	call   20bc90 <__zig_return_error>
  2255dd:	66 8b 45 c0          	mov    ax,WORD PTR [rbp-0x40]
  2255e1:	48 83 c4 50          	add    rsp,0x50
  2255e5:	5d                   	pop    rbp
  2255e6:	c3                   	ret    
  2255e7:	48 8d 15 22 e2 01 00 	lea    rdx,[rip+0x1e222]        # 243810 <__unnamed_171>
        try output(context, fmt[start_index..]);
  2255ee:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2255f2:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  2255f6:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  2255fa:	ff d0                	call   rax
  2255fc:	66 89 45 f6          	mov    WORD PTR [rbp-0xa],ax
  225600:	66 83 7d f6 00       	cmp    WORD PTR [rbp-0xa],0x0
  225605:	74 1b                	je     225622 <format.91+0x142>
  225607:	66 8b 45 f6          	mov    ax,WORD PTR [rbp-0xa]
  22560b:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  22560f:	66 89 45 be          	mov    WORD PTR [rbp-0x42],ax
  225613:	e8 78 66 fe ff       	call   20bc90 <__zig_return_error>
  225618:	66 8b 45 be          	mov    ax,WORD PTR [rbp-0x42]
  22561c:	48 83 c4 50          	add    rsp,0x50
  225620:	5d                   	pop    rbp
  225621:	c3                   	ret    
  225622:	31 c0                	xor    eax,eax
  225624:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  225627:	66 89 c8             	mov    ax,cx
  22562a:	48 83 c4 50          	add    rsp,0x50
  22562e:	5d                   	pop    rbp
  22562f:	c3                   	ret    

0000000000225630 <formatType.92>:
pub fn formatType(
  225630:	55                   	push   rbp
  225631:	48 89 e5             	mov    rbp,rsp
  225634:	48 83 ec 30          	sub    rsp,0x30
  225638:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22563c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  225640:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return formatValue(value, fmt, context, Errors, output);
  225644:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  225648:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  22564c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  225650:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  225654:	e8 07 30 00 00       	call   228660 <formatValue.110>
  225659:	66 83 f8 00          	cmp    ax,0x0
  22565d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  225661:	74 0b                	je     22566e <formatType.92+0x3e>
  225663:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  225667:	e8 24 66 fe ff       	call   20bc90 <__zig_return_error>
  22566c:	eb 02                	jmp    225670 <formatType.92+0x40>
  22566e:	eb 00                	jmp    225670 <formatType.92+0x40>
  225670:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  225674:	48 83 c4 30          	add    rsp,0x30
  225678:	5d                   	pop    rbp
  225679:	c3                   	ret    
  22567a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000225680 <formatType.93>:
pub fn formatType(
  225680:	55                   	push   rbp
  225681:	48 89 e5             	mov    rbp,rsp
  225684:	48 83 ec 30          	sub    rsp,0x30
  225688:	48 8d 45 e0          	lea    rax,[rbp-0x20]
  22568c:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  225690:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
                const casted_value = ([]const u8)(value);
  225694:	48 8b 0e             	mov    rcx,QWORD PTR [rsi]
  225697:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  22569b:	48 8b 4e 08          	mov    rcx,QWORD PTR [rsi+0x8]
  22569f:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
                return output(context, casted_value);
  2256a3:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  2256a7:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2256ab:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  2256af:	48 89 c2             	mov    rdx,rax
  2256b2:	ff d1                	call   rcx
  2256b4:	66 83 f8 00          	cmp    ax,0x0
  2256b8:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  2256bc:	74 0b                	je     2256c9 <formatType.93+0x49>
  2256be:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  2256c2:	e8 c9 65 fe ff       	call   20bc90 <__zig_return_error>
  2256c7:	eb 02                	jmp    2256cb <formatType.93+0x4b>
  2256c9:	eb 00                	jmp    2256cb <formatType.93+0x4b>
  2256cb:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  2256cf:	48 83 c4 30          	add    rsp,0x30
  2256d3:	5d                   	pop    rbp
  2256d4:	c3                   	ret    
  2256d5:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2256dc:	00 00 00 00 

00000000002256e0 <format.94>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  2256e0:	55                   	push   rbp
  2256e1:	48 89 e5             	mov    rbp,rsp
  2256e4:	48 83 ec 40          	sub    rsp,0x40
  2256e8:	48 8d 05 39 e1 01 00 	lea    rax,[rip+0x1e139]        # 243828 <__unnamed_172>
  2256ef:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  2256f3:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
                        try output(context, fmt[start_index..i]);
  2256f7:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  2256fb:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  2256ff:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  225703:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  225707:	48 89 c2             	mov    rdx,rax
  22570a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  22570e:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  225712:	ff d0                	call   rax
  225714:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  225718:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  22571d:	74 1b                	je     22573a <format.94+0x5a>
  22571f:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  225723:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  225727:	66 89 45 ce          	mov    WORD PTR [rbp-0x32],ax
  22572b:	e8 60 65 fe ff       	call   20bc90 <__zig_return_error>
  225730:	66 8b 45 ce          	mov    ax,WORD PTR [rbp-0x32]
  225734:	48 83 c4 40          	add    rsp,0x40
  225738:	5d                   	pop    rbp
  225739:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  22573a:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  22573e:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  225742:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  225746:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  22574a:	e8 71 00 00 00       	call   2257c0 <formatType.95>
  22574f:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  225753:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  225758:	74 1b                	je     225775 <format.94+0x95>
  22575a:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  22575e:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  225762:	66 89 45 cc          	mov    WORD PTR [rbp-0x34],ax
  225766:	e8 25 65 fe ff       	call   20bc90 <__zig_return_error>
  22576b:	66 8b 45 cc          	mov    ax,WORD PTR [rbp-0x34]
  22576f:	48 83 c4 40          	add    rsp,0x40
  225773:	5d                   	pop    rbp
  225774:	c3                   	ret    
  225775:	48 8d 15 c4 e0 01 00 	lea    rdx,[rip+0x1e0c4]        # 243840 <__unnamed_173>
        try output(context, fmt[start_index..]);
  22577c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  225780:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  225784:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  225788:	ff d0                	call   rax
  22578a:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  22578e:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  225793:	74 1b                	je     2257b0 <format.94+0xd0>
  225795:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  225799:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  22579d:	66 89 45 ca          	mov    WORD PTR [rbp-0x36],ax
  2257a1:	e8 ea 64 fe ff       	call   20bc90 <__zig_return_error>
  2257a6:	66 8b 45 ca          	mov    ax,WORD PTR [rbp-0x36]
  2257aa:	48 83 c4 40          	add    rsp,0x40
  2257ae:	5d                   	pop    rbp
  2257af:	c3                   	ret    
  2257b0:	31 c0                	xor    eax,eax
  2257b2:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  2257b5:	66 89 c8             	mov    ax,cx
  2257b8:	48 83 c4 40          	add    rsp,0x40
  2257bc:	5d                   	pop    rbp
  2257bd:	c3                   	ret    
  2257be:	66 90                	xchg   ax,ax

00000000002257c0 <formatType.95>:
pub fn formatType(
  2257c0:	55                   	push   rbp
  2257c1:	48 89 e5             	mov    rbp,rsp
  2257c4:	48 83 ec 30          	sub    rsp,0x30
  2257c8:	48 8d 45 e0          	lea    rax,[rbp-0x20]
  2257cc:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  2257d0:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
                const casted_value = ([]const u8)(value);
  2257d4:	48 8b 0e             	mov    rcx,QWORD PTR [rsi]
  2257d7:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  2257db:	48 8b 4e 08          	mov    rcx,QWORD PTR [rsi+0x8]
  2257df:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
                return output(context, casted_value);
  2257e3:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  2257e7:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2257eb:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  2257ef:	48 89 c2             	mov    rdx,rax
  2257f2:	ff d1                	call   rcx
  2257f4:	66 83 f8 00          	cmp    ax,0x0
  2257f8:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  2257fc:	74 0b                	je     225809 <formatType.95+0x49>
  2257fe:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  225802:	e8 89 64 fe ff       	call   20bc90 <__zig_return_error>
  225807:	eb 02                	jmp    22580b <formatType.95+0x4b>
  225809:	eb 00                	jmp    22580b <formatType.95+0x4b>
  22580b:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  22580f:	48 83 c4 30          	add    rsp,0x30
  225813:	5d                   	pop    rbp
  225814:	c3                   	ret    
  225815:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22581c:	00 00 00 00 

0000000000225820 <lookup>:
const elf = std.elf;
const linux = std.os.linux;
const cstr = std.cstr;
const mem = std.mem;

pub fn lookup(vername: []const u8, name: []const u8) usize {
  225820:	55                   	push   rbp
  225821:	48 89 e5             	mov    rbp,rsp
    const vdso_addr = std.os.linux_aux_raw[std.elf.AT_SYSINFO_EHDR];
  225824:	48 81 ec 10 02 00 00 	sub    rsp,0x210
  22582b:	48 8b 05 3e e9 01 00 	mov    rax,QWORD PTR [rip+0x1e93e]        # 244170 <linux_aux_raw+0x108>
  225832:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    if (vdso_addr == 0) return 0;
  225836:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
  22583b:	48 89 b5 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rsi
  225842:	48 89 bd 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdi
  225849:	75 0b                	jne    225856 <lookup+0x36>
  22584b:	31 c0                	xor    eax,eax
  22584d:	48 81 c4 10 02 00 00 	add    rsp,0x210
  225854:	5d                   	pop    rbp
  225855:	c3                   	ret    

    const eh = @intToPtr(*elf.Ehdr, vdso_addr);
  225856:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22585a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    var ph_addr: usize = vdso_addr + eh.e_phoff;
  22585e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  225862:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  225866:	48 03 41 20          	add    rax,QWORD PTR [rcx+0x20]
  22586a:	0f 92 c2             	setb   dl
  22586d:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  225874:	88 95 2f ff ff ff    	mov    BYTE PTR [rbp-0xd1],dl
  22587a:	0f 82 30 04 00 00    	jb     225cb0 <lookup+0x490>
  225880:	e9 3b 04 00 00       	jmp    225cc0 <lookup+0x4a0>

    var maybe_dynv: ?[*]usize = null;
    var base: usize = @maxValue(usize);
    {
        var i: usize = 0;
        while (i < eh.e_phnum) : ({
  225885:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  225889:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  22588d:	0f b7 51 38          	movzx  edx,WORD PTR [rcx+0x38]
  225891:	89 d1                	mov    ecx,edx
  225893:	48 39 c8             	cmp    rax,rcx
  225896:	0f 83 a9 00 00 00    	jae    225945 <lookup+0x125>
            i += 1;
            ph_addr += eh.e_phentsize;
        }) {
            const this_ph = @intToPtr(*elf.Phdr, ph_addr);
  22589c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2258a0:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
            switch (this_ph.p_type) {
  2258a4:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  2258a8:	8b 08                	mov    ecx,DWORD PTR [rax]
  2258aa:	89 ca                	mov    edx,ecx
  2258ac:	83 ea 01             	sub    edx,0x1
  2258af:	89 8d 28 ff ff ff    	mov    DWORD PTR [rbp-0xd8],ecx
  2258b5:	89 95 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],edx
  2258bb:	74 17                	je     2258d4 <lookup+0xb4>
  2258bd:	eb 00                	jmp    2258bf <lookup+0x9f>
  2258bf:	8b 85 28 ff ff ff    	mov    eax,DWORD PTR [rbp-0xd8]
  2258c5:	83 e8 02             	sub    eax,0x2
  2258c8:	89 85 20 ff ff ff    	mov    DWORD PTR [rbp-0xe0],eax
  2258ce:	74 2b                	je     2258fb <lookup+0xdb>
  2258d0:	eb 00                	jmp    2258d2 <lookup+0xb2>
  2258d2:	eb 4e                	jmp    225922 <lookup+0x102>
                elf.PT_LOAD => base = vdso_addr + this_ph.p_offset - this_ph.p_vaddr,
  2258d4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2258d8:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  2258dc:	48 03 41 08          	add    rax,QWORD PTR [rcx+0x8]
  2258e0:	0f 92 c2             	setb   dl
  2258e3:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  2258ea:	88 95 17 ff ff ff    	mov    BYTE PTR [rbp-0xe9],dl
  2258f0:	0f 82 fa 03 00 00    	jb     225cf0 <lookup+0x4d0>
  2258f6:	e9 05 04 00 00       	jmp    225d00 <lookup+0x4e0>
                elf.PT_DYNAMIC => maybe_dynv = @intToPtr([*]usize, vdso_addr + this_ph.p_offset),
  2258fb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2258ff:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  225903:	48 03 41 08          	add    rax,QWORD PTR [rcx+0x8]
  225907:	0f 92 c2             	setb   dl
  22590a:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
  225911:	88 95 07 ff ff ff    	mov    BYTE PTR [rbp-0xf9],dl
  225917:	0f 82 26 04 00 00    	jb     225d43 <lookup+0x523>
  22591d:	e9 31 04 00 00       	jmp    225d53 <lookup+0x533>
            i += 1;
  225922:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  225926:	48 83 c0 01          	add    rax,0x1
  22592a:	0f 92 c1             	setb   cl
  22592d:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  225934:	88 8d f7 fe ff ff    	mov    BYTE PTR [rbp-0x109],cl
  22593a:	0f 82 23 04 00 00    	jb     225d63 <lookup+0x543>
  225940:	e9 2e 04 00 00       	jmp    225d73 <lookup+0x553>
                else => {},
            }
        }
    }
    const dynv = maybe_dynv orelse return 0;
  225945:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
  22594a:	75 0b                	jne    225957 <lookup+0x137>
  22594c:	31 c0                	xor    eax,eax
  22594e:	48 81 c4 10 02 00 00 	add    rsp,0x210
  225955:	5d                   	pop    rbp
  225956:	c3                   	ret    
  225957:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  22595b:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  225962:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  225969:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
    if (base == @maxValue(usize)) return 0;
  22596d:	48 83 7d c0 ff       	cmp    QWORD PTR [rbp-0x40],0xffffffffffffffff
  225972:	75 0b                	jne    22597f <lookup+0x15f>
  225974:	31 c0                	xor    eax,eax
  225976:	48 81 c4 10 02 00 00 	add    rsp,0x210
  22597d:	5d                   	pop    rbp
  22597e:	c3                   	ret    

    var maybe_strings: ?[*]u8 = null;
  22597f:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
  225986:	00 
    var maybe_syms: ?[*]elf.Sym = null;
  225987:	48 c7 45 98 00 00 00 	mov    QWORD PTR [rbp-0x68],0x0
  22598e:	00 
    var maybe_hashtab: ?[*]linux.Elf_Symndx = null;
  22598f:	48 c7 45 90 00 00 00 	mov    QWORD PTR [rbp-0x70],0x0
  225996:	00 
    var maybe_versym: ?[*]u16 = null;
  225997:	48 c7 45 88 00 00 00 	mov    QWORD PTR [rbp-0x78],0x0
  22599e:	00 
    var maybe_verdef: ?*elf.Verdef = null;
  22599f:	48 c7 45 80 00 00 00 	mov    QWORD PTR [rbp-0x80],0x0
  2259a6:	00 

    {
        var i: usize = 0;
  2259a7:	48 c7 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],0x0
  2259ae:	00 00 00 00 
        while (dynv[i] != 0) : (i += 2) {
  2259b2:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  2259b9:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  2259bd:	48 83 3c c1 00       	cmp    QWORD PTR [rcx+rax*8],0x0
  2259c2:	0f 84 98 00 00 00    	je     225a60 <lookup+0x240>
            const p = base + dynv[i + 1];
  2259c8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  2259cc:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  2259d3:	48 83 c1 01          	add    rcx,0x1
  2259d7:	0f 92 c2             	setb   dl
  2259da:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
  2259e1:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
  2259e8:	88 95 d7 fe ff ff    	mov    BYTE PTR [rbp-0x129],dl
  2259ee:	0f 82 d1 03 00 00    	jb     225dc5 <lookup+0x5a5>
  2259f4:	e9 dc 03 00 00       	jmp    225dd5 <lookup+0x5b5>
            switch (dynv[i]) {
  2259f9:	eb 3f                	jmp    225a3a <lookup+0x21a>
                elf.DT_STRTAB => maybe_strings = @intToPtr([*]u8, p),
  2259fb:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  225a02:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            switch (dynv[i]) {
  225a06:	eb 32                	jmp    225a3a <lookup+0x21a>
                elf.DT_SYMTAB => maybe_syms = @intToPtr([*]elf.Sym, p),
  225a08:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  225a0f:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
            switch (dynv[i]) {
  225a13:	eb 25                	jmp    225a3a <lookup+0x21a>
                elf.DT_HASH => maybe_hashtab = @intToPtr([*]linux.Elf_Symndx, p),
  225a15:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  225a1c:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
            switch (dynv[i]) {
  225a20:	eb 18                	jmp    225a3a <lookup+0x21a>
                elf.DT_VERSYM => maybe_versym = @intToPtr([*]u16, p),
  225a22:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  225a29:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
            switch (dynv[i]) {
  225a2d:	eb 0b                	jmp    225a3a <lookup+0x21a>
                elf.DT_VERDEF => maybe_verdef = @intToPtr(*elf.Verdef, p),
  225a2f:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  225a36:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
        while (dynv[i] != 0) : (i += 2) {
  225a3a:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  225a41:	48 83 c0 02          	add    rax,0x2
  225a45:	0f 92 c1             	setb   cl
  225a48:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
  225a4f:	88 8d c7 fe ff ff    	mov    BYTE PTR [rbp-0x139],cl
  225a55:	0f 82 5f 04 00 00    	jb     225eba <lookup+0x69a>
  225a5b:	e9 6a 04 00 00       	jmp    225eca <lookup+0x6aa>
                else => {},
            }
        }
    }

    const strings = maybe_strings orelse return 0;
  225a60:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
  225a65:	75 0b                	jne    225a72 <lookup+0x252>
  225a67:	31 c0                	xor    eax,eax
  225a69:	48 81 c4 10 02 00 00 	add    rsp,0x210
  225a70:	5d                   	pop    rbp
  225a71:	c3                   	ret    
  225a72:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  225a76:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
  225a7d:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  225a84:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
    const syms = maybe_syms orelse return 0;
  225a8b:	48 83 7d 98 00       	cmp    QWORD PTR [rbp-0x68],0x0
  225a90:	75 0b                	jne    225a9d <lookup+0x27d>
  225a92:	31 c0                	xor    eax,eax
  225a94:	48 81 c4 10 02 00 00 	add    rsp,0x210
  225a9b:	5d                   	pop    rbp
  225a9c:	c3                   	ret    
  225a9d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  225aa1:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  225aa8:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  225aaf:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
    const hashtab = maybe_hashtab orelse return 0;
  225ab6:	48 83 7d 90 00       	cmp    QWORD PTR [rbp-0x70],0x0
  225abb:	75 0b                	jne    225ac8 <lookup+0x2a8>
  225abd:	31 c0                	xor    eax,eax
  225abf:	48 81 c4 10 02 00 00 	add    rsp,0x210
  225ac6:	5d                   	pop    rbp
  225ac7:	c3                   	ret    
  225ac8:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  225acc:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
  225ad3:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
  225ada:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
    if (maybe_verdef == null) maybe_versym = null;
  225ae1:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  225ae5:	48 85 c9             	test   rcx,rcx
  225ae8:	0f 95 c2             	setne  dl
  225aeb:	88 95 a7 fe ff ff    	mov    BYTE PTR [rbp-0x159],dl
  225af1:	75 0c                	jne    225aff <lookup+0x2df>
  225af3:	eb 00                	jmp    225af5 <lookup+0x2d5>
  225af5:	48 c7 45 88 00 00 00 	mov    QWORD PTR [rbp-0x78],0x0
  225afc:	00 
  225afd:	eb 02                	jmp    225b01 <lookup+0x2e1>
  225aff:	eb 00                	jmp    225b01 <lookup+0x2e1>

    const OK_TYPES = (1 << elf.STT_NOTYPE | 1 << elf.STT_OBJECT | 1 << elf.STT_FUNC | 1 << elf.STT_COMMON);
    const OK_BINDS = (1 << elf.STB_GLOBAL | 1 << elf.STB_WEAK | 1 << elf.STB_GNU_UNIQUE);

    var i: usize = 0;
  225b01:	48 c7 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],0x0
  225b08:	00 00 00 00 
    while (i < hashtab[1]) : (i += 1) {
  225b0c:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  225b13:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  225b1a:	8b 51 04             	mov    edx,DWORD PTR [rcx+0x4]
  225b1d:	89 d1                	mov    ecx,edx
  225b1f:	48 39 c8             	cmp    rax,rcx
  225b22:	0f 83 7d 01 00 00    	jae    225ca5 <lookup+0x485>
        if (0 == (u32(1) << @intCast(u5, syms[i].st_info & 0xf) & OK_TYPES)) continue;
  225b28:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  225b2f:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  225b36:	48 8d 04 40          	lea    rax,[rax+rax*2]
  225b3a:	8a 54 c1 04          	mov    dl,BYTE PTR [rcx+rax*8+0x4]
  225b3e:	80 e2 0f             	and    dl,0xf
  225b41:	40 88 d6             	mov    sil,dl
  225b44:	40 88 d7             	mov    dil,dl
  225b47:	40 38 d6             	cmp    sil,dl
  225b4a:	40 88 bd a6 fe ff ff 	mov    BYTE PTR [rbp-0x15a],dil
  225b51:	0f 84 86 03 00 00    	je     225edd <lookup+0x6bd>
  225b57:	e9 b4 03 00 00       	jmp    225f10 <lookup+0x6f0>
  225b5c:	e9 1e 01 00 00       	jmp    225c7f <lookup+0x45f>
  225b61:	eb 00                	jmp    225b63 <lookup+0x343>
        if (0 == (u32(1) << @intCast(u5, syms[i].st_info >> 4) & OK_BINDS)) continue;
  225b63:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  225b6a:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  225b71:	48 8d 04 40          	lea    rax,[rax+rax*2]
  225b75:	8a 54 c1 04          	mov    dl,BYTE PTR [rcx+rax*8+0x4]
  225b79:	c0 ea 04             	shr    dl,0x4
  225b7c:	40 88 d6             	mov    sil,dl
  225b7f:	40 88 d7             	mov    dil,dl
  225b82:	40 38 d6             	cmp    sil,dl
  225b85:	40 88 bd a5 fe ff ff 	mov    BYTE PTR [rbp-0x15b],dil
  225b8c:	0f 84 8e 03 00 00    	je     225f20 <lookup+0x700>
  225b92:	e9 bf 03 00 00       	jmp    225f56 <lookup+0x736>
  225b97:	e9 e3 00 00 00       	jmp    225c7f <lookup+0x45f>
  225b9c:	eb 00                	jmp    225b9e <lookup+0x37e>
  225b9e:	31 c0                	xor    eax,eax
  225ba0:	66 89 c1             	mov    cx,ax
        if (0 == syms[i].st_shndx) continue;
  225ba3:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
  225baa:	48 6b d2 18          	imul   rdx,rdx,0x18
  225bae:	48 03 95 60 ff ff ff 	add    rdx,QWORD PTR [rbp-0xa0]
  225bb5:	66 3b 4a 06          	cmp    cx,WORD PTR [rdx+0x6]
  225bb9:	75 05                	jne    225bc0 <lookup+0x3a0>
  225bbb:	e9 bf 00 00 00       	jmp    225c7f <lookup+0x45f>
  225bc0:	eb 00                	jmp    225bc2 <lookup+0x3a2>
        if (!mem.eql(u8, name, cstr.toSliceConst(strings + syms[i].st_name))) continue;
  225bc2:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  225bc9:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
  225bd0:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  225bd7:	48 8d 0c 49          	lea    rcx,[rcx+rcx*2]
  225bdb:	8b 34 ca             	mov    esi,DWORD PTR [rdx+rcx*8]
  225bde:	89 f1                	mov    ecx,esi
  225be0:	48 01 c8             	add    rax,rcx
  225be3:	48 8d 4d f0          	lea    rcx,[rbp-0x10]
  225be7:	48 89 cf             	mov    rdi,rcx
  225bea:	48 89 c6             	mov    rsi,rax
  225bed:	48 89 8d 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rcx
  225bf4:	e8 b7 2a 00 00       	call   2286b0 <toSliceConst>
  225bf9:	48 8b bd 40 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xc0]
  225c00:	48 8b b5 98 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x168]
  225c07:	e8 f4 dd fe ff       	call   213a00 <eql>
  225c0c:	41 88 c0             	mov    r8b,al
  225c0f:	a8 01                	test   al,0x1
  225c11:	44 88 85 97 fe ff ff 	mov    BYTE PTR [rbp-0x169],r8b
  225c18:	75 04                	jne    225c1e <lookup+0x3fe>
  225c1a:	eb 00                	jmp    225c1c <lookup+0x3fc>
  225c1c:	eb 61                	jmp    225c7f <lookup+0x45f>
  225c1e:	eb 00                	jmp    225c20 <lookup+0x400>
        if (maybe_versym) |versym| {
  225c20:	48 83 7d 88 00       	cmp    QWORD PTR [rbp-0x78],0x0
  225c25:	74 21                	je     225c48 <lookup+0x428>
  225c27:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  225c2b:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
            if (!checkver(maybe_verdef.?, versym[i], vername, strings))
  225c32:	48 83 7d 80 00       	cmp    QWORD PTR [rbp-0x80],0x0
  225c37:	0f 85 29 03 00 00    	jne    225f66 <lookup+0x746>
  225c3d:	e9 75 03 00 00       	jmp    225fb7 <lookup+0x797>
                continue;
  225c42:	eb 3b                	jmp    225c7f <lookup+0x45f>
            if (!checkver(maybe_verdef.?, versym[i], vername, strings))
  225c44:	eb 00                	jmp    225c46 <lookup+0x426>
        if (maybe_versym) |versym| {
  225c46:	eb 02                	jmp    225c4a <lookup+0x42a>
  225c48:	eb 00                	jmp    225c4a <lookup+0x42a>
        }
        return base + syms[i].st_value;
  225c4a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  225c4e:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
  225c55:	48 6b c9 18          	imul   rcx,rcx,0x18
  225c59:	48 03 8d 60 ff ff ff 	add    rcx,QWORD PTR [rbp-0xa0]
  225c60:	48 03 41 08          	add    rax,QWORD PTR [rcx+0x8]
  225c64:	0f 92 c2             	setb   dl
  225c67:	48 89 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rax
  225c6e:	88 95 87 fe ff ff    	mov    BYTE PTR [rbp-0x179],dl
  225c74:	0f 82 4d 03 00 00    	jb     225fc7 <lookup+0x7a7>
  225c7a:	e9 58 03 00 00       	jmp    225fd7 <lookup+0x7b7>
    while (i < hashtab[1]) : (i += 1) {
  225c7f:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  225c86:	48 83 c0 01          	add    rax,0x1
  225c8a:	0f 92 c1             	setb   cl
  225c8d:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  225c94:	88 8d 77 fe ff ff    	mov    BYTE PTR [rbp-0x189],cl
  225c9a:	0f 82 47 03 00 00    	jb     225fe7 <lookup+0x7c7>
  225ca0:	e9 52 03 00 00       	jmp    225ff7 <lookup+0x7d7>
  225ca5:	31 c0                	xor    eax,eax
    }

    return 0;
  225ca7:	48 81 c4 10 02 00 00 	add    rsp,0x210
  225cae:	5d                   	pop    rbp
  225caf:	c3                   	ret    
  225cb0:	48 8d 3d 11 d5 01 00 	lea    rdi,[rip+0x1d511]        # 2431c8 <__unnamed_4>
  225cb7:	31 c0                	xor    eax,eax
  225cb9:	89 c6                	mov    esi,eax
    var ph_addr: usize = vdso_addr + eh.e_phoff;
  225cbb:	e8 40 59 fe ff       	call   20b600 <panic>
  225cc0:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  225cc7:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
    const ph = @intToPtr(*elf.Phdr, ph_addr);
  225ccb:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  225ccf:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    var maybe_dynv: ?[*]usize = null;
  225cd3:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
  225cda:	00 
    var base: usize = @maxValue(usize);
  225cdb:	48 c7 45 c0 ff ff ff 	mov    QWORD PTR [rbp-0x40],0xffffffffffffffff
  225ce2:	ff 
        var i: usize = 0;
  225ce3:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
  225cea:	00 
        while (i < eh.e_phnum) : ({
  225ceb:	e9 95 fb ff ff       	jmp    225885 <lookup+0x65>
  225cf0:	48 8d 3d d1 d4 01 00 	lea    rdi,[rip+0x1d4d1]        # 2431c8 <__unnamed_4>
  225cf7:	31 c0                	xor    eax,eax
  225cf9:	89 c6                	mov    esi,eax
                elf.PT_LOAD => base = vdso_addr + this_ph.p_offset - this_ph.p_vaddr,
  225cfb:	e8 00 59 fe ff       	call   20b600 <panic>
  225d00:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  225d04:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
  225d0b:	48 2b 48 10          	sub    rcx,QWORD PTR [rax+0x10]
  225d0f:	0f 92 c2             	setb   dl
  225d12:	48 89 8d 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rcx
  225d19:	88 95 67 fe ff ff    	mov    BYTE PTR [rbp-0x199],dl
  225d1f:	72 02                	jb     225d23 <lookup+0x503>
  225d21:	eb 10                	jmp    225d33 <lookup+0x513>
  225d23:	48 8d 3d 9e d4 01 00 	lea    rdi,[rip+0x1d49e]        # 2431c8 <__unnamed_4>
  225d2a:	31 c0                	xor    eax,eax
  225d2c:	89 c6                	mov    esi,eax
  225d2e:	e8 cd 58 fe ff       	call   20b600 <panic>
  225d33:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
  225d3a:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
            switch (this_ph.p_type) {
  225d3e:	e9 df fb ff ff       	jmp    225922 <lookup+0x102>
  225d43:	48 8d 3d 7e d4 01 00 	lea    rdi,[rip+0x1d47e]        # 2431c8 <__unnamed_4>
  225d4a:	31 c0                	xor    eax,eax
  225d4c:	89 c6                	mov    esi,eax
                elf.PT_DYNAMIC => maybe_dynv = @intToPtr([*]usize, vdso_addr + this_ph.p_offset),
  225d4e:	e8 ad 58 fe ff       	call   20b600 <panic>
  225d53:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  225d5a:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
            switch (this_ph.p_type) {
  225d5e:	e9 bf fb ff ff       	jmp    225922 <lookup+0x102>
  225d63:	48 8d 3d 5e d4 01 00 	lea    rdi,[rip+0x1d45e]        # 2431c8 <__unnamed_4>
  225d6a:	31 c0                	xor    eax,eax
  225d6c:	89 c6                	mov    esi,eax
            i += 1;
  225d6e:	e8 8d 58 fe ff       	call   20b600 <panic>
  225d73:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  225d7a:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
            ph_addr += eh.e_phentsize;
  225d7e:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  225d82:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  225d86:	0f b7 72 36          	movzx  esi,WORD PTR [rdx+0x36]
  225d8a:	89 f2                	mov    edx,esi
  225d8c:	48 01 d1             	add    rcx,rdx
  225d8f:	40 0f 92 c7          	setb   dil
  225d93:	48 89 8d 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rcx
  225d9a:	40 88 bd 57 fe ff ff 	mov    BYTE PTR [rbp-0x1a9],dil
  225da1:	72 02                	jb     225da5 <lookup+0x585>
  225da3:	eb 10                	jmp    225db5 <lookup+0x595>
  225da5:	48 8d 3d 1c d4 01 00 	lea    rdi,[rip+0x1d41c]        # 2431c8 <__unnamed_4>
  225dac:	31 c0                	xor    eax,eax
  225dae:	89 c6                	mov    esi,eax
  225db0:	e8 4b 58 fe ff       	call   20b600 <panic>
  225db5:	48 8b 85 58 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a8]
  225dbc:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
        while (i < eh.e_phnum) : ({
  225dc0:	e9 c0 fa ff ff       	jmp    225885 <lookup+0x65>
  225dc5:	48 8d 3d fc d3 01 00 	lea    rdi,[rip+0x1d3fc]        # 2431c8 <__unnamed_4>
  225dcc:	31 c0                	xor    eax,eax
  225dce:	89 c6                	mov    esi,eax
            const p = base + dynv[i + 1];
  225dd0:	e8 2b 58 fe ff       	call   20b600 <panic>
  225dd5:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  225dd9:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  225de0:	48 8b 95 d8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x128]
  225de7:	48 03 0c d0          	add    rcx,QWORD PTR [rax+rdx*8]
  225deb:	40 0f 92 c6          	setb   sil
  225def:	48 89 8d 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rcx
  225df6:	40 88 b5 47 fe ff ff 	mov    BYTE PTR [rbp-0x1b9],sil
  225dfd:	72 02                	jb     225e01 <lookup+0x5e1>
  225dff:	eb 10                	jmp    225e11 <lookup+0x5f1>
  225e01:	48 8d 3d c0 d3 01 00 	lea    rdi,[rip+0x1d3c0]        # 2431c8 <__unnamed_4>
  225e08:	31 c0                	xor    eax,eax
  225e0a:	89 c6                	mov    esi,eax
  225e0c:	e8 ef 57 fe ff       	call   20b600 <panic>
  225e11:	48 8b 85 48 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b8]
  225e18:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
            switch (dynv[i]) {
  225e1f:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  225e26:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  225e2a:	48 8b 0c ca          	mov    rcx,QWORD PTR [rdx+rcx*8]
  225e2e:	48 89 ca             	mov    rdx,rcx
  225e31:	48 83 ea 04          	sub    rdx,0x4
  225e35:	48 89 8d 38 fe ff ff 	mov    QWORD PTR [rbp-0x1c8],rcx
  225e3c:	48 89 95 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rdx
  225e43:	0f 84 cc fb ff ff    	je     225a15 <lookup+0x1f5>
  225e49:	eb 00                	jmp    225e4b <lookup+0x62b>
  225e4b:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  225e52:	48 83 e8 05          	sub    rax,0x5
  225e56:	48 89 85 28 fe ff ff 	mov    QWORD PTR [rbp-0x1d8],rax
  225e5d:	0f 84 98 fb ff ff    	je     2259fb <lookup+0x1db>
  225e63:	eb 00                	jmp    225e65 <lookup+0x645>
  225e65:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  225e6c:	48 83 e8 06          	sub    rax,0x6
  225e70:	48 89 85 20 fe ff ff 	mov    QWORD PTR [rbp-0x1e0],rax
  225e77:	0f 84 8b fb ff ff    	je     225a08 <lookup+0x1e8>
  225e7d:	eb 00                	jmp    225e7f <lookup+0x65f>
  225e7f:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  225e86:	48 2d f0 ff ff 6f    	sub    rax,0x6ffffff0
  225e8c:	48 89 85 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],rax
  225e93:	0f 84 89 fb ff ff    	je     225a22 <lookup+0x202>
  225e99:	eb 00                	jmp    225e9b <lookup+0x67b>
  225e9b:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  225ea2:	48 2d fc ff ff 6f    	sub    rax,0x6ffffffc
  225ea8:	48 89 85 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rax
  225eaf:	0f 84 7a fb ff ff    	je     225a2f <lookup+0x20f>
  225eb5:	e9 3f fb ff ff       	jmp    2259f9 <lookup+0x1d9>
  225eba:	48 8d 3d 07 d3 01 00 	lea    rdi,[rip+0x1d307]        # 2431c8 <__unnamed_4>
  225ec1:	31 c0                	xor    eax,eax
  225ec3:	89 c6                	mov    esi,eax
        while (dynv[i] != 0) : (i += 2) {
  225ec5:	e8 36 57 fe ff       	call   20b600 <panic>
  225eca:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  225ed1:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  225ed8:	e9 d5 fa ff ff       	jmp    2259b2 <lookup+0x192>
  225edd:	31 c0                	xor    eax,eax
  225edf:	b9 01 00 00 00       	mov    ecx,0x1
        if (0 == (u32(1) << @intCast(u5, syms[i].st_info & 0xf) & OK_TYPES)) continue;
  225ee4:	8a 95 a6 fe ff ff    	mov    dl,BYTE PTR [rbp-0x15a]
  225eea:	80 e2 1f             	and    dl,0x1f
  225eed:	0f b6 f2             	movzx  esi,dl
  225ef0:	89 8d 0c fe ff ff    	mov    DWORD PTR [rbp-0x1f4],ecx
  225ef6:	89 f1                	mov    ecx,esi
  225ef8:	8b b5 0c fe ff ff    	mov    esi,DWORD PTR [rbp-0x1f4]
  225efe:	d3 e6                	shl    esi,cl
  225f00:	83 e6 27             	and    esi,0x27
  225f03:	39 f0                	cmp    eax,esi
  225f05:	0f 84 51 fc ff ff    	je     225b5c <lookup+0x33c>
  225f0b:	e9 51 fc ff ff       	jmp    225b61 <lookup+0x341>
  225f10:	48 8d 3d 71 d5 01 00 	lea    rdi,[rip+0x1d571]        # 243488 <__unnamed_22>
  225f17:	31 c0                	xor    eax,eax
  225f19:	89 c6                	mov    esi,eax
  225f1b:	e8 e0 56 fe ff       	call   20b600 <panic>
  225f20:	31 c0                	xor    eax,eax
  225f22:	b9 01 00 00 00       	mov    ecx,0x1
        if (0 == (u32(1) << @intCast(u5, syms[i].st_info >> 4) & OK_BINDS)) continue;
  225f27:	8a 95 a5 fe ff ff    	mov    dl,BYTE PTR [rbp-0x15b]
  225f2d:	80 e2 1f             	and    dl,0x1f
  225f30:	0f b6 f2             	movzx  esi,dl
  225f33:	89 8d 08 fe ff ff    	mov    DWORD PTR [rbp-0x1f8],ecx
  225f39:	89 f1                	mov    ecx,esi
  225f3b:	8b b5 08 fe ff ff    	mov    esi,DWORD PTR [rbp-0x1f8]
  225f41:	d3 e6                	shl    esi,cl
  225f43:	81 e6 06 04 00 00    	and    esi,0x406
  225f49:	39 f0                	cmp    eax,esi
  225f4b:	0f 84 46 fc ff ff    	je     225b97 <lookup+0x377>
  225f51:	e9 46 fc ff ff       	jmp    225b9c <lookup+0x37c>
  225f56:	48 8d 3d 2b d5 01 00 	lea    rdi,[rip+0x1d52b]        # 243488 <__unnamed_22>
  225f5d:	31 c0                	xor    eax,eax
  225f5f:	89 c6                	mov    esi,eax
  225f61:	e8 9a 56 fe ff       	call   20b600 <panic>
            if (!checkver(maybe_verdef.?, versym[i], vername, strings))
  225f66:	48 8b 7d 80          	mov    rdi,QWORD PTR [rbp-0x80]
  225f6a:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  225f71:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
  225f78:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  225f7f:	0f b7 34 41          	movzx  esi,WORD PTR [rcx+rax*2]
  225f83:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  225f8a:	48 89 95 00 fe ff ff 	mov    QWORD PTR [rbp-0x200],rdx
  225f91:	48 89 c2             	mov    rdx,rax
  225f94:	48 8b 8d 00 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x200]
  225f9b:	e8 90 27 00 00       	call   228730 <checkver>
  225fa0:	41 88 c0             	mov    r8b,al
  225fa3:	a8 01                	test   al,0x1
  225fa5:	44 88 85 ff fd ff ff 	mov    BYTE PTR [rbp-0x201],r8b
  225fac:	0f 84 90 fc ff ff    	je     225c42 <lookup+0x422>
  225fb2:	e9 8d fc ff ff       	jmp    225c44 <lookup+0x424>
  225fb7:	48 8d 3d 22 d9 01 00 	lea    rdi,[rip+0x1d922]        # 2438e0 <__unnamed_174>
  225fbe:	31 c0                	xor    eax,eax
  225fc0:	89 c6                	mov    esi,eax
  225fc2:	e8 39 56 fe ff       	call   20b600 <panic>
  225fc7:	48 8d 3d fa d1 01 00 	lea    rdi,[rip+0x1d1fa]        # 2431c8 <__unnamed_4>
  225fce:	31 c0                	xor    eax,eax
  225fd0:	89 c6                	mov    esi,eax
        return base + syms[i].st_value;
  225fd2:	e8 29 56 fe ff       	call   20b600 <panic>
  225fd7:	48 8b 85 88 fe ff ff 	mov    rax,QWORD PTR [rbp-0x178]
  225fde:	48 81 c4 10 02 00 00 	add    rsp,0x210
  225fe5:	5d                   	pop    rbp
  225fe6:	c3                   	ret    
  225fe7:	48 8d 3d da d1 01 00 	lea    rdi,[rip+0x1d1da]        # 2431c8 <__unnamed_4>
  225fee:	31 c0                	xor    eax,eax
  225ff0:	89 c6                	mov    esi,eax
    while (i < hashtab[1]) : (i += 1) {
  225ff2:	e8 09 56 fe ff       	call   20b600 <panic>
  225ff7:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
  225ffe:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
  226005:	e9 02 fb ff ff       	jmp    225b0c <lookup+0x2ec>
  22600a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000226010 <formatValue>:
        },
        else => @compileError("Unable to format type '" ++ @typeName(T) ++ "'"),
    }
}

fn formatValue(
  226010:	55                   	push   rbp
  226011:	48 89 e5             	mov    rbp,rsp
  226014:	48 83 ec 30          	sub    rsp,0x30
  226018:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22601c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  226020:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    }

    comptime var T = @typeOf(value);
    switch (@typeId(T)) {
        builtin.TypeId.Float => return formatFloatValue(value, fmt, context, Errors, output),
        builtin.TypeId.Int => return formatIntValue(value, fmt, context, Errors, output),
  226024:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  226028:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  22602c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  226030:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  226034:	e8 47 28 00 00       	call   228880 <formatIntValue>
  226039:	66 83 f8 00          	cmp    ax,0x0
  22603d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  226041:	74 0b                	je     22604e <formatValue+0x3e>
  226043:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  226047:	e8 44 5c fe ff       	call   20bc90 <__zig_return_error>
  22604c:	eb 02                	jmp    226050 <formatValue+0x40>
  22604e:	eb 00                	jmp    226050 <formatValue+0x40>
  226050:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  226054:	48 83 c4 30          	add    rsp,0x30
  226058:	5d                   	pop    rbp
  226059:	c3                   	ret    
  22605a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000226060 <formatValue.96>:
fn formatValue(
  226060:	55                   	push   rbp
  226061:	48 89 e5             	mov    rbp,rsp
  226064:	48 83 ec 30          	sub    rsp,0x30
  226068:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
  22606d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  226071:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
        builtin.TypeId.Float => return formatFloatValue(value, fmt, context, Errors, output),
  226075:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  22607a:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  22607e:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  226082:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  226086:	e8 65 28 00 00       	call   2288f0 <formatFloatValue>
  22608b:	66 83 f8 00          	cmp    ax,0x0
  22608f:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  226093:	74 0b                	je     2260a0 <formatValue.96+0x40>
  226095:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  226099:	e8 f2 5b fe ff       	call   20bc90 <__zig_return_error>
  22609e:	eb 02                	jmp    2260a2 <formatValue.96+0x42>
  2260a0:	eb 00                	jmp    2260a2 <formatValue.96+0x42>
  2260a2:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  2260a6:	48 83 c4 30          	add    rsp,0x30
  2260aa:	5d                   	pop    rbp
  2260ab:	c3                   	ret    
  2260ac:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

00000000002260b0 <min>:
pub fn min(x: var, y: var) @typeOf(x + y) {
  2260b0:	55                   	push   rbp
  2260b1:	48 89 e5             	mov    rbp,rsp
  2260b4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  2260b8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    return if (x < y) x else y;
  2260bc:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2260c0:	48 3b 75 f0          	cmp    rsi,QWORD PTR [rbp-0x10]
  2260c4:	73 0a                	jae    2260d0 <min+0x20>
  2260c6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2260ca:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  2260ce:	eb 08                	jmp    2260d8 <min+0x28>
  2260d0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2260d4:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  2260d8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2260dc:	5d                   	pop    rbp
  2260dd:	c3                   	ret    
  2260de:	66 90                	xchg   ax,ax

00000000002260e0 <write>:
pub fn write(fd: i32, buf: [*]const u8, count: usize) usize {
  2260e0:	55                   	push   rbp
  2260e1:	48 89 e5             	mov    rbp,rsp
  2260e4:	48 83 ec 20          	sub    rsp,0x20
  2260e8:	b8 01 00 00 00       	mov    eax,0x1
  2260ed:	89 c1                	mov    ecx,eax
  2260ef:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  2260f2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  2260f6:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    return syscall3(SYS_write, @intCast(usize, fd), @ptrToInt(buf), count);
  2260fa:	48 63 75 fc          	movsxd rsi,DWORD PTR [rbp-0x4]
  2260fe:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  226102:	4c 8b 45 e8          	mov    r8,QWORD PTR [rbp-0x18]
  226106:	48 89 cf             	mov    rdi,rcx
  226109:	4c 89 c1             	mov    rcx,r8
  22610c:	e8 9f e7 fe ff       	call   2148b0 <syscall3>
  226111:	48 83 c4 20          	add    rsp,0x20
  226115:	5d                   	pop    rbp
  226116:	c3                   	ret    
  226117:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  22611e:	00 00 

0000000000226120 <DirectAllocator_alloc>:
    fn alloc(allocator: *Allocator, n: usize, alignment: u29) ![]u8 {
  226120:	55                   	push   rbp
  226121:	48 89 e5             	mov    rbp,rsp
  226124:	48 81 ec 60 01 00 00 	sub    rsp,0x160
  22612b:	48 89 f8             	mov    rax,rdi
  22612e:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  226132:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
  226136:	41 81 e0 ff ff ff 1f 	and    r8d,0x1fffffff
  22613d:	44 89 45 8c          	mov    DWORD PTR [rbp-0x74],r8d
        const self = @fieldParentPtr(DirectAllocator, "allocator", allocator);
  226141:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  226145:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
                const alloc_size = if (alignment <= os.page_size) n else n + alignment;
  226149:	44 8b 45 8c          	mov    r8d,DWORD PTR [rbp-0x74]
  22614d:	41 81 e8 00 10 00 00 	sub    r8d,0x1000
  226154:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  22615b:	48 89 bd 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rdi
  226162:	48 89 b5 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rsi
  226169:	44 89 85 34 ff ff ff 	mov    DWORD PTR [rbp-0xcc],r8d
  226170:	77 0f                	ja     226181 <DirectAllocator_alloc+0x61>
  226172:	eb 00                	jmp    226174 <DirectAllocator_alloc+0x54>
  226174:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  226178:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  22617f:	eb 29                	jmp    2261aa <DirectAllocator_alloc+0x8a>
  226181:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  226185:	8b 4d 8c             	mov    ecx,DWORD PTR [rbp-0x74]
  226188:	89 ca                	mov    edx,ecx
  22618a:	48 01 d0             	add    rax,rdx
  22618d:	40 0f 92 c6          	setb   sil
  226191:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
  226198:	40 88 b5 1f ff ff ff 	mov    BYTE PTR [rbp-0xe1],sil
  22619f:	0f 82 24 01 00 00    	jb     2262c9 <DirectAllocator_alloc+0x1a9>
  2261a5:	e9 2f 01 00 00       	jmp    2262d9 <DirectAllocator_alloc+0x1b9>
  2261aa:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  2261b1:	31 c9                	xor    ecx,ecx
  2261b3:	89 ca                	mov    edx,ecx
  2261b5:	b9 03 00 00 00       	mov    ecx,0x3
  2261ba:	89 ce                	mov    esi,ecx
  2261bc:	b9 22 00 00 00       	mov    ecx,0x22
  2261c1:	41 b8 ff ff ff ff    	mov    r8d,0xffffffff
  2261c7:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
                const addr = p.mmap(null, alloc_size, p.PROT_READ | p.PROT_WRITE, p.MAP_PRIVATE | p.MAP_ANONYMOUS, -1, 0);
  2261ce:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  2261d5:	48 89 d7             	mov    rdi,rdx
  2261d8:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  2261df:	48 89 c6             	mov    rsi,rax
  2261e2:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  2261e9:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
  2261f0:	48 89 c2             	mov    rdx,rax
  2261f3:	4c 8b 8d 08 ff ff ff 	mov    r9,QWORD PTR [rbp-0xf8]
  2261fa:	e8 01 73 fe ff       	call   20d500 <mmap>
  2261ff:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
                if (addr == p.MAP_FAILED) return error.OutOfMemory;
  226206:	48 83 bd 70 ff ff ff 	cmp    QWORD PTR [rbp-0x90],0xffffffffffffffff
  22620d:	ff 
  22620e:	75 43                	jne    226253 <DirectAllocator_alloc+0x133>
  226210:	48 8b bd 38 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xc8]
  226217:	e8 74 5a fe ff       	call   20bc90 <__zig_return_error>
  22621c:	48 8b 3d 45 45 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe4545]        # 20a768 <__unnamed_175>
  226223:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  22622a:	48 89 38             	mov    QWORD PTR [rax],rdi
  22622d:	48 8b 3d 3c 45 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe453c]        # 20a770 <__unnamed_175+0x8>
  226234:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  226238:	48 8b 3d 39 45 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe4539]        # 20a778 <__unnamed_175+0x10>
  22623f:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  226243:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  22624a:	48 81 c4 60 01 00 00 	add    rsp,0x160
  226251:	5d                   	pop    rbp
  226252:	c3                   	ret    
  226253:	eb 00                	jmp    226255 <DirectAllocator_alloc+0x135>
                if (alloc_size == n) return @intToPtr([*]u8, addr)[0..n];
  226255:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  22625c:	48 3b 45 90          	cmp    rax,QWORD PTR [rbp-0x70]
  226260:	75 2c                	jne    22628e <DirectAllocator_alloc+0x16e>
  226262:	31 c0                	xor    eax,eax
  226264:	89 c1                	mov    ecx,eax
  226266:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  22626d:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  226271:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
  226275:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  226279:	48 39 d1             	cmp    rcx,rdx
  22627c:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
  226283:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
  22628a:	76 70                	jbe    2262fc <DirectAllocator_alloc+0x1dc>
  22628c:	eb 5e                	jmp    2262ec <DirectAllocator_alloc+0x1cc>
  22628e:	eb 00                	jmp    226290 <DirectAllocator_alloc+0x170>
                const aligned_addr = (addr & ~usize(alignment - 1)) + alignment;
  226290:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  226297:	8b 4d 8c             	mov    ecx,DWORD PTR [rbp-0x74]
  22629a:	83 c1 ff             	add    ecx,0xffffffff
  22629d:	f7 c1 00 00 00 e0    	test   ecx,0xe0000000
  2262a3:	0f 95 c2             	setne  dl
  2262a6:	89 ce                	mov    esi,ecx
  2262a8:	f6 c2 01             	test   dl,0x1
  2262ab:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  2262b2:	89 8d ec fe ff ff    	mov    DWORD PTR [rbp-0x114],ecx
  2262b8:	89 b5 e8 fe ff ff    	mov    DWORD PTR [rbp-0x118],esi
  2262be:	0f 85 96 00 00 00    	jne    22635a <DirectAllocator_alloc+0x23a>
  2262c4:	e9 a1 00 00 00       	jmp    22636a <DirectAllocator_alloc+0x24a>
  2262c9:	48 8d 3d f8 ce 01 00 	lea    rdi,[rip+0x1cef8]        # 2431c8 <__unnamed_4>
  2262d0:	31 c0                	xor    eax,eax
  2262d2:	89 c6                	mov    esi,eax
                const alloc_size = if (alignment <= os.page_size) n else n + alignment;
  2262d4:	e8 27 53 fe ff       	call   20b600 <panic>
  2262d9:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  2262e0:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  2262e7:	e9 be fe ff ff       	jmp    2261aa <DirectAllocator_alloc+0x8a>
  2262ec:	48 8d 3d e5 d0 01 00 	lea    rdi,[rip+0x1d0e5]        # 2433d8 <__unnamed_20>
  2262f3:	31 c0                	xor    eax,eax
  2262f5:	89 c6                	mov    esi,eax
                if (alloc_size == n) return @intToPtr([*]u8, addr)[0..n];
  2262f7:	e8 04 53 fe ff       	call   20b600 <panic>
  2262fc:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  226303:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  226307:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  22630e:	48 83 e9 00          	sub    rcx,0x0
  226312:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  226316:	66 c7 45 d0 00 00    	mov    WORD PTR [rbp-0x30],0x0
  22631c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  226320:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  226324:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  226328:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  22632c:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  226330:	48 8b 95 40 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc0]
  226337:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  22633a:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  22633e:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  226342:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  226346:	48 89 4a 10          	mov    QWORD PTR [rdx+0x10],rcx
  22634a:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  226351:	48 81 c4 60 01 00 00 	add    rsp,0x160
  226358:	5d                   	pop    rbp
  226359:	c3                   	ret    
  22635a:	48 8d 3d 67 ce 01 00 	lea    rdi,[rip+0x1ce67]        # 2431c8 <__unnamed_4>
  226361:	31 c0                	xor    eax,eax
  226363:	89 c6                	mov    esi,eax
                const aligned_addr = (addr & ~usize(alignment - 1)) + alignment;
  226365:	e8 96 52 fe ff       	call   20b600 <panic>
  22636a:	8b 85 ec fe ff ff    	mov    eax,DWORD PTR [rbp-0x114]
  226370:	25 ff ff ff 1f       	and    eax,0x1fffffff
  226375:	89 c1                	mov    ecx,eax
  226377:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  22637e:	c4 e2 f0 f2 ca       	andn   rcx,rcx,rdx
  226383:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
  226386:	89 c6                	mov    esi,eax
  226388:	48 01 f1             	add    rcx,rsi
  22638b:	40 0f 92 c7          	setb   dil
  22638f:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
  226396:	40 88 bd df fe ff ff 	mov    BYTE PTR [rbp-0x121],dil
  22639d:	72 02                	jb     2263a1 <DirectAllocator_alloc+0x281>
  22639f:	eb 10                	jmp    2263b1 <DirectAllocator_alloc+0x291>
  2263a1:	48 8d 3d 20 ce 01 00 	lea    rdi,[rip+0x1ce20]        # 2431c8 <__unnamed_4>
  2263a8:	31 c0                	xor    eax,eax
  2263aa:	89 c6                	mov    esi,eax
  2263ac:	e8 4f 52 fe ff       	call   20b600 <panic>
  2263b1:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
  2263b8:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
                const unused_start = addr;
  2263bf:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
  2263c6:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
                const unused_len = aligned_addr - 1 - unused_start;
  2263cd:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  2263d4:	48 83 e9 01          	sub    rcx,0x1
  2263d8:	0f 92 c2             	setb   dl
  2263db:	48 89 8d d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rcx
  2263e2:	88 95 cf fe ff ff    	mov    BYTE PTR [rbp-0x131],dl
  2263e8:	72 02                	jb     2263ec <DirectAllocator_alloc+0x2cc>
  2263ea:	eb 10                	jmp    2263fc <DirectAllocator_alloc+0x2dc>
  2263ec:	48 8d 3d d5 cd 01 00 	lea    rdi,[rip+0x1cdd5]        # 2431c8 <__unnamed_4>
  2263f3:	31 c0                	xor    eax,eax
  2263f5:	89 c6                	mov    esi,eax
  2263f7:	e8 04 52 fe ff       	call   20b600 <panic>
  2263fc:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  226403:	48 2b 85 60 ff ff ff 	sub    rax,QWORD PTR [rbp-0xa0]
  22640a:	0f 92 c1             	setb   cl
  22640d:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
  226414:	88 8d bf fe ff ff    	mov    BYTE PTR [rbp-0x141],cl
  22641a:	72 02                	jb     22641e <DirectAllocator_alloc+0x2fe>
  22641c:	eb 10                	jmp    22642e <DirectAllocator_alloc+0x30e>
  22641e:	48 8d 3d a3 cd 01 00 	lea    rdi,[rip+0x1cda3]        # 2431c8 <__unnamed_4>
  226425:	31 c0                	xor    eax,eax
  226427:	89 c6                	mov    esi,eax
  226429:	e8 d2 51 fe ff       	call   20b600 <panic>
  22642e:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  226435:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
                const err = p.munmap(unused_start, unused_len);
  22643c:	48 8b bd 60 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  226443:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  22644a:	e8 41 71 fe ff       	call   20d590 <munmap>
  22644f:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
                assert(p.getErrno(err) == 0);
  226456:	48 8b bd 50 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb0]
  22645d:	e8 1e 6c fe ff       	call   20d080 <getErrno>
  226462:	48 83 f8 00          	cmp    rax,0x0
  226466:	0f 94 c1             	sete   cl
  226469:	0f b6 f9             	movzx  edi,cl
  22646c:	e8 8f 4b fe ff       	call   20b000 <assert>
  226471:	31 ff                	xor    edi,edi
  226473:	89 f8                	mov    eax,edi
                return @intToPtr([*]u8, aligned_addr)[0..n];
  226475:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
  22647c:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  226480:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  226484:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  226488:	48 39 f0             	cmp    rax,rsi
  22648b:	48 89 95 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rdx
  226492:	48 89 b5 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rsi
  226499:	76 10                	jbe    2264ab <DirectAllocator_alloc+0x38b>
  22649b:	48 8d 3d 36 cf 01 00 	lea    rdi,[rip+0x1cf36]        # 2433d8 <__unnamed_20>
  2264a2:	31 c0                	xor    eax,eax
  2264a4:	89 c6                	mov    esi,eax
  2264a6:	e8 55 51 fe ff       	call   20b600 <panic>
  2264ab:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  2264b2:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  2264b6:	48 8b 8d a8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x158]
  2264bd:	48 83 e9 00          	sub    rcx,0x0
  2264c1:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
  2264c5:	66 c7 45 a0 00 00    	mov    WORD PTR [rbp-0x60],0x0
  2264cb:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  2264cf:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  2264d3:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  2264d7:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
  2264db:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  2264df:	48 8b 95 40 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc0]
  2264e6:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  2264e9:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  2264ed:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  2264f1:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  2264f5:	48 89 4a 10          	mov    QWORD PTR [rdx+0x10],rcx
  2264f9:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  226500:	48 81 c4 60 01 00 00 	add    rsp,0x160
  226507:	5d                   	pop    rbp
  226508:	c3                   	ret    
  226509:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000226510 <DirectAllocator_realloc>:
    fn realloc(allocator: *Allocator, old_mem: []u8, new_size: usize, alignment: u29) ![]u8 {
  226510:	55                   	push   rbp
  226511:	48 89 e5             	mov    rbp,rsp
  226514:	48 81 ec a0 01 00 00 	sub    rsp,0x1a0
  22651b:	48 89 f8             	mov    rax,rdi
  22651e:	48 89 95 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdx
  226525:	4c 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],r8
  22652c:	41 81 e1 ff ff ff 1f 	and    r9d,0x1fffffff
  226533:	44 89 8d 64 ff ff ff 	mov    DWORD PTR [rbp-0x9c],r9d
        const self = @fieldParentPtr(DirectAllocator, "allocator", allocator);
  22653a:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  226541:	48 89 95 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdx
                if (new_size <= old_mem.len) {
  226548:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  22654f:	48 3b 51 08          	cmp    rdx,QWORD PTR [rcx+0x8]
  226553:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  22655a:	48 89 bd 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdi
  226561:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
  226568:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  22656f:	0f 87 04 01 00 00    	ja     226679 <DirectAllocator_realloc+0x169>
                    const base_addr = @ptrToInt(old_mem.ptr);
  226575:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  22657c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22657f:	48 89 8d 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rcx
                    const old_addr_end = base_addr + old_mem.len;
  226586:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
  22658d:	48 03 48 08          	add    rcx,QWORD PTR [rax+0x8]
  226591:	0f 92 c2             	setb   dl
  226594:	48 89 8d f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rcx
  22659b:	88 95 f7 fe ff ff    	mov    BYTE PTR [rbp-0x109],dl
  2265a1:	0f 82 d4 01 00 00    	jb     22677b <DirectAllocator_realloc+0x26b>
  2265a7:	e9 df 01 00 00       	jmp    22678b <DirectAllocator_realloc+0x27b>
  2265ac:	31 c0                	xor    eax,eax
  2265ae:	89 c1                	mov    ecx,eax
                    const new_addr_end_rounded = new_addr_end + if (rem == 0) 0 else (os.page_size - rem);
  2265b0:	48 89 8d e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rcx
  2265b7:	eb 29                	jmp    2265e2 <DirectAllocator_realloc+0xd2>
  2265b9:	b8 00 10 00 00       	mov    eax,0x1000
  2265be:	89 c1                	mov    ecx,eax
  2265c0:	48 2b 8d 38 ff ff ff 	sub    rcx,QWORD PTR [rbp-0xc8]
  2265c7:	0f 92 c2             	setb   dl
  2265ca:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
  2265d1:	88 95 df fe ff ff    	mov    BYTE PTR [rbp-0x121],dl
  2265d7:	0f 82 58 02 00 00    	jb     226835 <DirectAllocator_realloc+0x325>
  2265dd:	e9 63 02 00 00       	jmp    226845 <DirectAllocator_realloc+0x335>
  2265e2:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  2265e9:	48 8b 8d d0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x130]
  2265f0:	48 01 c1             	add    rcx,rax
  2265f3:	0f 92 c2             	setb   dl
  2265f6:	48 89 8d c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rcx
  2265fd:	88 95 c7 fe ff ff    	mov    BYTE PTR [rbp-0x139],dl
  226603:	0f 82 4f 02 00 00    	jb     226858 <DirectAllocator_realloc+0x348>
  226609:	e9 5a 02 00 00       	jmp    226868 <DirectAllocator_realloc+0x358>
                        _ = os.posix.munmap(new_addr_end_rounded, old_addr_end - new_addr_end_rounded);
  22660e:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
  226615:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  22661c:	48 2b 85 30 ff ff ff 	sub    rax,QWORD PTR [rbp-0xd0]
  226623:	0f 92 c1             	setb   cl
  226626:	48 89 bd b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rdi
  22662d:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  226634:	88 8d af fe ff ff    	mov    BYTE PTR [rbp-0x151],cl
  22663a:	0f 82 4f 02 00 00    	jb     22688f <DirectAllocator_realloc+0x37f>
  226640:	e9 5a 02 00 00       	jmp    22689f <DirectAllocator_realloc+0x38f>
                    if (old_addr_end > new_addr_end_rounded) {
  226645:	eb 00                	jmp    226647 <DirectAllocator_realloc+0x137>
  226647:	31 c0                	xor    eax,eax
  226649:	89 c1                	mov    ecx,eax
                    return old_mem[0..new_size];
  22664b:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  226652:	48 8b b5 00 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x100]
  226659:	48 8b 7e 08          	mov    rdi,QWORD PTR [rsi+0x8]
  22665d:	48 39 d1             	cmp    rcx,rdx
  226660:	48 89 bd a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdi
  226667:	48 89 95 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rdx
  22666e:	0f 86 5a 02 00 00    	jbe    2268ce <DirectAllocator_realloc+0x3be>
  226674:	e9 45 02 00 00       	jmp    2268be <DirectAllocator_realloc+0x3ae>
                if (new_size <= old_mem.len) {
  226679:	eb 00                	jmp    22667b <DirectAllocator_realloc+0x16b>
  22667b:	48 8d 45 c0          	lea    rax,[rbp-0x40]
                const result = try alloc(allocator, new_size, alignment);
  22667f:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  226686:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  22668d:	44 8b 85 64 ff ff ff 	mov    r8d,DWORD PTR [rbp-0x9c]
  226694:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  226698:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
  22669f:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  2266a6:	e8 75 fa ff ff       	call   226120 <DirectAllocator_alloc>
  2266ab:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  2266b0:	74 50                	je     226702 <DirectAllocator_realloc+0x1f2>
  2266b2:	66 8b 45 c0          	mov    ax,WORD PTR [rbp-0x40]
  2266b6:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
  2266bd:	66 89 85 8e fe ff ff 	mov    WORD PTR [rbp-0x172],ax
  2266c4:	e8 c7 55 fe ff       	call   20bc90 <__zig_return_error>
  2266c9:	66 8b 85 8e fe ff ff 	mov    ax,WORD PTR [rbp-0x172]
  2266d0:	66 89 45 90          	mov    WORD PTR [rbp-0x70],ax
  2266d4:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  2266d8:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  2266df:	48 89 39             	mov    QWORD PTR [rcx],rdi
  2266e2:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  2266e6:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  2266ea:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  2266ee:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  2266f2:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  2266f9:	48 81 c4 a0 01 00 00 	add    rsp,0x1a0
  226700:	5d                   	pop    rbp
  226701:	c3                   	ret    
  226702:	48 8d bd 20 ff ff ff 	lea    rdi,[rbp-0xe0]
  226709:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  22670d:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
  226714:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  226718:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
                mem.copy(u8, result, old_mem);
  22671f:	48 8b b5 00 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x100]
  226726:	e8 a5 e5 ff ff       	call   224cd0 <copy>
                return result;
  22672b:	66 c7 85 78 ff ff ff 	mov    WORD PTR [rbp-0x88],0x0
  226732:	00 00 
  226734:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  22673b:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  22673f:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  226746:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  22674a:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  226751:	48 8b b5 10 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf0]
  226758:	48 89 06             	mov    QWORD PTR [rsi],rax
  22675b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  22675f:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  226763:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  226767:	48 89 46 10          	mov    QWORD PTR [rsi+0x10],rax
  22676b:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  226772:	48 81 c4 a0 01 00 00 	add    rsp,0x1a0
  226779:	5d                   	pop    rbp
  22677a:	c3                   	ret    
  22677b:	48 8d 3d 46 ca 01 00 	lea    rdi,[rip+0x1ca46]        # 2431c8 <__unnamed_4>
  226782:	31 c0                	xor    eax,eax
  226784:	89 c6                	mov    esi,eax
                    const old_addr_end = base_addr + old_mem.len;
  226786:	e8 75 4e fe ff       	call   20b600 <panic>
  22678b:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  226792:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
                    const new_addr_end = base_addr + new_size;
  226799:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
  2267a0:	48 03 8d 68 ff ff ff 	add    rcx,QWORD PTR [rbp-0x98]
  2267a7:	0f 92 c2             	setb   dl
  2267aa:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  2267b1:	88 95 7f fe ff ff    	mov    BYTE PTR [rbp-0x181],dl
  2267b7:	72 02                	jb     2267bb <DirectAllocator_realloc+0x2ab>
  2267b9:	eb 10                	jmp    2267cb <DirectAllocator_realloc+0x2bb>
  2267bb:	48 8d 3d 06 ca 01 00 	lea    rdi,[rip+0x1ca06]        # 2431c8 <__unnamed_4>
  2267c2:	31 c0                	xor    eax,eax
  2267c4:	89 c6                	mov    esi,eax
  2267c6:	e8 35 4e fe ff       	call   20b600 <panic>
  2267cb:	31 c0                	xor    eax,eax
  2267cd:	88 c1                	mov    cl,al
  2267cf:	48 8b 95 80 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x180]
  2267d6:	48 89 95 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rdx
                    const rem = @rem(new_addr_end, os.page_size);
  2267dd:	48 8b b5 40 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc0]
  2267e4:	f6 c1 01             	test   cl,0x1
  2267e7:	48 89 b5 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rsi
  2267ee:	75 35                	jne    226825 <DirectAllocator_realloc+0x315>
  2267f0:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  2267f7:	48 25 ff 0f 00 00    	and    rax,0xfff
  2267fd:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
                    const new_addr_end_rounded = new_addr_end + if (rem == 0) 0 else (os.page_size - rem);
  226804:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  22680b:	48 83 bd 38 ff ff ff 	cmp    QWORD PTR [rbp-0xc8],0x0
  226812:	00 
  226813:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  22681a:	0f 84 8c fd ff ff    	je     2265ac <DirectAllocator_realloc+0x9c>
  226820:	e9 94 fd ff ff       	jmp    2265b9 <DirectAllocator_realloc+0xa9>
  226825:	48 8d 3d bc ca 01 00 	lea    rdi,[rip+0x1cabc]        # 2432e8 <__unnamed_15>
  22682c:	31 c0                	xor    eax,eax
  22682e:	89 c6                	mov    esi,eax
                    const rem = @rem(new_addr_end, os.page_size);
  226830:	e8 cb 4d fe ff       	call   20b600 <panic>
  226835:	48 8d 3d 8c c9 01 00 	lea    rdi,[rip+0x1c98c]        # 2431c8 <__unnamed_4>
  22683c:	31 c0                	xor    eax,eax
  22683e:	89 c6                	mov    esi,eax
                    const new_addr_end_rounded = new_addr_end + if (rem == 0) 0 else (os.page_size - rem);
  226840:	e8 bb 4d fe ff       	call   20b600 <panic>
  226845:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
  22684c:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  226853:	e9 8a fd ff ff       	jmp    2265e2 <DirectAllocator_realloc+0xd2>
  226858:	48 8d 3d 69 c9 01 00 	lea    rdi,[rip+0x1c969]        # 2431c8 <__unnamed_4>
  22685f:	31 c0                	xor    eax,eax
  226861:	89 c6                	mov    esi,eax
  226863:	e8 98 4d fe ff       	call   20b600 <panic>
  226868:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  22686f:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
                    if (old_addr_end > new_addr_end_rounded) {
  226876:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
  22687d:	48 3b 8d 30 ff ff ff 	cmp    rcx,QWORD PTR [rbp-0xd0]
  226884:	0f 87 84 fd ff ff    	ja     22660e <DirectAllocator_realloc+0xfe>
  22688a:	e9 b6 fd ff ff       	jmp    226645 <DirectAllocator_realloc+0x135>
  22688f:	48 8d 3d 32 c9 01 00 	lea    rdi,[rip+0x1c932]        # 2431c8 <__unnamed_4>
  226896:	31 c0                	xor    eax,eax
  226898:	89 c6                	mov    esi,eax
                        _ = os.posix.munmap(new_addr_end_rounded, old_addr_end - new_addr_end_rounded);
  22689a:	e8 61 4d fe ff       	call   20b600 <panic>
  22689f:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
  2268a6:	48 8b b5 b0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x150]
  2268ad:	e8 de 6c fe ff       	call   20d590 <munmap>
                    if (old_addr_end > new_addr_end_rounded) {
  2268b2:	48 89 85 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rax
  2268b9:	e9 89 fd ff ff       	jmp    226647 <DirectAllocator_realloc+0x137>
  2268be:	48 8d 3d 13 cb 01 00 	lea    rdi,[rip+0x1cb13]        # 2433d8 <__unnamed_20>
  2268c5:	31 c0                	xor    eax,eax
  2268c7:	89 c6                	mov    esi,eax
                    return old_mem[0..new_size];
  2268c9:	e8 32 4d fe ff       	call   20b600 <panic>
  2268ce:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
  2268d5:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
  2268dc:	48 39 c8             	cmp    rax,rcx
  2268df:	76 10                	jbe    2268f1 <DirectAllocator_realloc+0x3e1>
  2268e1:	48 8d 3d f0 ca 01 00 	lea    rdi,[rip+0x1caf0]        # 2433d8 <__unnamed_20>
  2268e8:	31 c0                	xor    eax,eax
  2268ea:	89 c6                	mov    esi,eax
  2268ec:	e8 0f 4d fe ff       	call   20b600 <panic>
  2268f1:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  2268f8:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  2268fb:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  2268ff:	48 8b 8d 98 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x168]
  226906:	48 83 e9 00          	sub    rcx,0x0
  22690a:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  22690e:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  226914:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  226918:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  22691c:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  226920:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  226924:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  226928:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
  22692f:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  226932:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  226936:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  22693a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22693e:	48 89 4a 10          	mov    QWORD PTR [rdx+0x10],rcx
  226942:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  226949:	48 81 c4 a0 01 00 00 	add    rsp,0x1a0
  226950:	5d                   	pop    rbp
  226951:	c3                   	ret    
  226952:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  226959:	1f 84 00 00 00 00 00 

0000000000226960 <DirectAllocator_free>:
    fn free(allocator: *Allocator, bytes: []u8) void {
  226960:	55                   	push   rbp
  226961:	48 89 e5             	mov    rbp,rsp
  226964:	48 83 ec 20          	sub    rsp,0x20
  226968:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
        const self = @fieldParentPtr(DirectAllocator, "allocator", allocator);
  22696c:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  226970:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
                _ = os.posix.munmap(@ptrToInt(bytes.ptr), bytes.len);
  226974:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
  226977:	48 8b 76 08          	mov    rsi,QWORD PTR [rsi+0x8]
  22697b:	e8 10 6c fe ff       	call   20d590 <munmap>
    fn free(allocator: *Allocator, bytes: []u8) void {
  226980:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  226984:	48 83 c4 20          	add    rsp,0x20
  226988:	5d                   	pop    rbp
  226989:	c3                   	ret    
  22698a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000226990 <BaseLinkedList([]u8,void,(struct []const u8 constant))_init>:

        /// Initialize a linked list.
        ///
        /// Returns:
        ///     An empty linked list.
        pub fn init() Self {
  226990:	55                   	push   rbp
  226991:	48 89 e5             	mov    rbp,rsp
  226994:	48 89 f8             	mov    rax,rdi
            return Self{
  226997:	48 8b 0d 12 3e fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe3e12]        # 20a7b0 <__unnamed_176>
  22699e:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  2269a1:	48 8b 0d 10 3e fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe3e10]        # 20a7b8 <__unnamed_176+0x8>
  2269a8:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  2269ac:	48 8b 0d 0d 3e fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe3e0d]        # 20a7c0 <__unnamed_176+0x10>
  2269b3:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  2269b7:	5d                   	pop    rbp
  2269b8:	c3                   	ret    
  2269b9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

00000000002269c0 <ArenaAllocator_alloc>:
    fn alloc(allocator: *Allocator, n: usize, alignment: u29) ![]u8 {
  2269c0:	55                   	push   rbp
  2269c1:	48 89 e5             	mov    rbp,rsp
  2269c4:	48 81 ec 00 02 00 00 	sub    rsp,0x200
  2269cb:	48 89 f8             	mov    rax,rdi
  2269ce:	48 89 95 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdx
  2269d5:	48 89 8d 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rcx
  2269dc:	41 81 e0 ff ff ff 1f 	and    r8d,0x1fffffff
  2269e3:	44 89 85 44 ff ff ff 	mov    DWORD PTR [rbp-0xbc],r8d
        const self = @fieldParentPtr(ArenaAllocator, "allocator", allocator);
  2269ea:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
  2269f1:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
        var cur_node = if (self.buffer_list.last) |last_node| last_node else try self.createNode(0, n + alignment);
  2269f8:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
  2269ff:	48 89 ca             	mov    rdx,rcx
  226a02:	48 83 c2 20          	add    rdx,0x20
  226a06:	48 83 c2 08          	add    rdx,0x8
  226a0a:	48 83 79 28 00       	cmp    QWORD PTR [rcx+0x28],0x0
  226a0f:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
  226a16:	48 89 bd d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rdi
  226a1d:	48 89 b5 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rsi
  226a24:	48 89 95 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rdx
  226a2b:	74 24                	je     226a51 <ArenaAllocator_alloc+0x91>
  226a2d:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  226a34:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  226a37:	48 89 8d 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rcx
  226a3e:	48 8b 8d 30 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd0]
  226a45:	48 89 8d b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rcx
  226a4c:	e9 98 00 00 00       	jmp    226ae9 <ArenaAllocator_alloc+0x129>
  226a51:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
  226a58:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  226a5f:	8b 8d 44 ff ff ff    	mov    ecx,DWORD PTR [rbp-0xbc]
  226a65:	89 ce                	mov    esi,ecx
  226a67:	48 01 f0             	add    rax,rsi
  226a6a:	40 0f 92 c7          	setb   dil
  226a6e:	48 89 95 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rdx
  226a75:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
  226a7c:	40 88 bd a7 fe ff ff 	mov    BYTE PTR [rbp-0x159],dil
  226a83:	0f 82 01 02 00 00    	jb     226c8a <ArenaAllocator_alloc+0x2ca>
  226a89:	e9 0c 02 00 00       	jmp    226c9a <ArenaAllocator_alloc+0x2da>
  226a8e:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
  226a92:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  226a99:	66 89 85 a4 fe ff ff 	mov    WORD PTR [rbp-0x15c],ax
  226aa0:	e8 eb 51 fe ff       	call   20bc90 <__zig_return_error>
  226aa5:	66 8b 85 a4 fe ff ff 	mov    ax,WORD PTR [rbp-0x15c]
  226aac:	66 89 45 c8          	mov    WORD PTR [rbp-0x38],ax
  226ab0:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  226ab4:	48 8b 8d d0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x130]
  226abb:	48 89 39             	mov    QWORD PTR [rcx],rdi
  226abe:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  226ac2:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  226ac6:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  226aca:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  226ace:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  226ad5:	48 81 c4 00 02 00 00 	add    rsp,0x200
  226adc:	5d                   	pop    rbp
  226add:	c3                   	ret    
  226ade:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  226ae2:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
  226ae9:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  226af0:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
        while (true) {
  226af7:	eb 00                	jmp    226af9 <ArenaAllocator_alloc+0x139>
  226af9:	b8 20 00 00 00       	mov    eax,0x20
  226afe:	89 c1                	mov    ecx,eax
            const cur_buf = cur_node.data[@sizeOf(BufNode)..];
  226b00:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
  226b07:	48 89 d6             	mov    rsi,rdx
  226b0a:	48 83 c6 10          	add    rsi,0x10
  226b0e:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
  226b12:	48 39 d1             	cmp    rcx,rdx
  226b15:	48 89 95 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rdx
  226b1c:	48 89 b5 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rsi
  226b23:	0f 86 b3 01 00 00    	jbe    226cdc <ArenaAllocator_alloc+0x31c>
  226b29:	e9 9e 01 00 00       	jmp    226ccc <ArenaAllocator_alloc+0x30c>
  226b2e:	31 c0                	xor    eax,eax
  226b30:	89 c1                	mov    ecx,eax
            const march_forward_bytes = if (rem == 0) 0 else (alignment - rem);
  226b32:	48 89 8d 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rcx
  226b39:	eb 2f                	jmp    226b6a <ArenaAllocator_alloc+0x1aa>
  226b3b:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  226b42:	8b 8d 44 ff ff ff    	mov    ecx,DWORD PTR [rbp-0xbc]
  226b48:	89 ca                	mov    edx,ecx
  226b4a:	48 29 c2             	sub    rdx,rax
  226b4d:	40 0f 92 c6          	setb   sil
  226b51:	48 89 95 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rdx
  226b58:	40 88 b5 7f fe ff ff 	mov    BYTE PTR [rbp-0x181],sil
  226b5f:	0f 82 56 02 00 00    	jb     226dbb <ArenaAllocator_alloc+0x3fb>
  226b65:	e9 61 02 00 00       	jmp    226dcb <ArenaAllocator_alloc+0x40b>
  226b6a:	48 8b 85 88 fe ff ff 	mov    rax,QWORD PTR [rbp-0x178]
  226b71:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
            const adjusted_index = self.end_index + march_forward_bytes;
  226b78:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  226b7f:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
  226b83:	48 03 85 00 ff ff ff 	add    rax,QWORD PTR [rbp-0x100]
  226b8a:	0f 92 c1             	setb   cl
  226b8d:	48 89 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rax
  226b94:	88 8d 6f fe ff ff    	mov    BYTE PTR [rbp-0x191],cl
  226b9a:	0f 82 3e 02 00 00    	jb     226dde <ArenaAllocator_alloc+0x41e>
  226ba0:	e9 49 02 00 00       	jmp    226dee <ArenaAllocator_alloc+0x42e>
                cur_node = try self.createNode(cur_buf.len, n + alignment);
  226ba5:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
  226bac:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  226bb3:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  226bba:	8b b5 44 ff ff ff    	mov    esi,DWORD PTR [rbp-0xbc]
  226bc0:	89 f7                	mov    edi,esi
  226bc2:	48 01 f8             	add    rax,rdi
  226bc5:	41 0f 92 c0          	setb   r8b
  226bc9:	48 89 95 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rdx
  226bd0:	48 89 8d 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rcx
  226bd7:	48 89 85 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rax
  226bde:	44 88 85 4f fe ff ff 	mov    BYTE PTR [rbp-0x1b1],r8b
  226be5:	0f 82 6a 02 00 00    	jb     226e55 <ArenaAllocator_alloc+0x495>
  226beb:	e9 75 02 00 00       	jmp    226e65 <ArenaAllocator_alloc+0x4a5>
  226bf0:	66 8b 45 a8          	mov    ax,WORD PTR [rbp-0x58]
  226bf4:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  226bfb:	66 89 85 4c fe ff ff 	mov    WORD PTR [rbp-0x1b4],ax
  226c02:	e8 89 50 fe ff       	call   20bc90 <__zig_return_error>
  226c07:	66 8b 85 4c fe ff ff 	mov    ax,WORD PTR [rbp-0x1b4]
  226c0e:	66 89 45 80          	mov    WORD PTR [rbp-0x80],ax
  226c12:	48 8b 7d 80          	mov    rdi,QWORD PTR [rbp-0x80]
  226c16:	48 8b 8d d0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x130]
  226c1d:	48 89 39             	mov    QWORD PTR [rcx],rdi
  226c20:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  226c24:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  226c28:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  226c2c:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  226c30:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  226c37:	48 81 c4 00 02 00 00 	add    rsp,0x200
  226c3e:	5d                   	pop    rbp
  226c3f:	c3                   	ret    
  226c40:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  226c44:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
                continue;
  226c4b:	e9 a7 fe ff ff       	jmp    226af7 <ArenaAllocator_alloc+0x137>
            if (new_end_index > cur_buf.len) {
  226c50:	eb 00                	jmp    226c52 <ArenaAllocator_alloc+0x292>
            const result = cur_buf[adjusted_index..new_end_index];
  226c52:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  226c59:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  226c60:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
  226c67:	48 39 c8             	cmp    rax,rcx
  226c6a:	48 89 85 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rax
  226c71:	48 89 8d 38 fe ff ff 	mov    QWORD PTR [rbp-0x1c8],rcx
  226c78:	48 89 95 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rdx
  226c7f:	0f 86 25 02 00 00    	jbe    226eaa <ArenaAllocator_alloc+0x4ea>
  226c85:	e9 10 02 00 00       	jmp    226e9a <ArenaAllocator_alloc+0x4da>
  226c8a:	48 8d 3d 37 c5 01 00 	lea    rdi,[rip+0x1c537]        # 2431c8 <__unnamed_4>
  226c91:	31 c0                	xor    eax,eax
  226c93:	89 c6                	mov    esi,eax
        var cur_node = if (self.buffer_list.last) |last_node| last_node else try self.createNode(0, n + alignment);
  226c95:	e8 66 49 fe ff       	call   20b600 <panic>
  226c9a:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  226c9e:	31 c0                	xor    eax,eax
  226ca0:	89 c1                	mov    ecx,eax
  226ca2:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  226ca9:	48 8b 95 b0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x150]
  226cb0:	4c 8b 85 a8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x158]
  226cb7:	e8 a4 1c 00 00       	call   228960 <ArenaAllocator_createNode>
  226cbc:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  226cc1:	0f 85 c7 fd ff ff    	jne    226a8e <ArenaAllocator_alloc+0xce>
  226cc7:	e9 12 fe ff ff       	jmp    226ade <ArenaAllocator_alloc+0x11e>
  226ccc:	48 8d 3d 05 c7 01 00 	lea    rdi,[rip+0x1c705]        # 2433d8 <__unnamed_20>
  226cd3:	31 c0                	xor    eax,eax
  226cd5:	89 c6                	mov    esi,eax
            const cur_buf = cur_node.data[@sizeOf(BufNode)..];
  226cd7:	e8 24 49 fe ff       	call   20b600 <panic>
  226cdc:	48 8b 85 90 fe ff ff 	mov    rax,QWORD PTR [rbp-0x170]
  226ce3:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  226ce6:	48 83 c1 20          	add    rcx,0x20
  226cea:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
  226cee:	48 8b 8d 98 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x168]
  226cf5:	48 83 e9 20          	sub    rcx,0x20
  226cf9:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
  226cfd:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  226d01:	48 89 8d 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rcx
  226d08:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  226d0c:	48 89 8d 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rcx
            const addr = @ptrToInt(cur_buf.ptr) + self.end_index;
  226d13:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
  226d1a:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
  226d21:	48 03 4a 38          	add    rcx,QWORD PTR [rdx+0x38]
  226d25:	40 0f 92 c6          	setb   sil
  226d29:	48 89 8d 28 fe ff ff 	mov    QWORD PTR [rbp-0x1d8],rcx
  226d30:	40 88 b5 27 fe ff ff 	mov    BYTE PTR [rbp-0x1d9],sil
  226d37:	72 02                	jb     226d3b <ArenaAllocator_alloc+0x37b>
  226d39:	eb 10                	jmp    226d4b <ArenaAllocator_alloc+0x38b>
  226d3b:	48 8d 3d 86 c4 01 00 	lea    rdi,[rip+0x1c486]        # 2431c8 <__unnamed_4>
  226d42:	31 c0                	xor    eax,eax
  226d44:	89 c6                	mov    esi,eax
  226d46:	e8 b5 48 fe ff       	call   20b600 <panic>
  226d4b:	48 8b 85 28 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d8]
  226d52:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
            const rem = @rem(addr, alignment);
  226d59:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  226d60:	8b 8d 44 ff ff ff    	mov    ecx,DWORD PTR [rbp-0xbc]
  226d66:	89 ca                	mov    edx,ecx
  226d68:	48 83 fa 00          	cmp    rdx,0x0
  226d6c:	48 89 85 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],rax
  226d73:	48 89 95 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rdx
  226d7a:	74 2f                	je     226dab <ArenaAllocator_alloc+0x3eb>
  226d7c:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
  226d83:	31 c9                	xor    ecx,ecx
  226d85:	89 ca                	mov    edx,ecx
  226d87:	48 8b b5 10 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1f0]
  226d8e:	48 f7 f6             	div    rsi
  226d91:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
            const march_forward_bytes = if (rem == 0) 0 else (alignment - rem);
  226d98:	48 83 bd 08 ff ff ff 	cmp    QWORD PTR [rbp-0xf8],0x0
  226d9f:	00 
  226da0:	0f 84 88 fd ff ff    	je     226b2e <ArenaAllocator_alloc+0x16e>
  226da6:	e9 90 fd ff ff       	jmp    226b3b <ArenaAllocator_alloc+0x17b>
  226dab:	48 8d 3d 36 c5 01 00 	lea    rdi,[rip+0x1c536]        # 2432e8 <__unnamed_15>
  226db2:	31 c0                	xor    eax,eax
  226db4:	89 c6                	mov    esi,eax
            const rem = @rem(addr, alignment);
  226db6:	e8 45 48 fe ff       	call   20b600 <panic>
  226dbb:	48 8d 3d 06 c4 01 00 	lea    rdi,[rip+0x1c406]        # 2431c8 <__unnamed_4>
  226dc2:	31 c0                	xor    eax,eax
  226dc4:	89 c6                	mov    esi,eax
            const march_forward_bytes = if (rem == 0) 0 else (alignment - rem);
  226dc6:	e8 35 48 fe ff       	call   20b600 <panic>
  226dcb:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
  226dd2:	48 89 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rax
  226dd9:	e9 8c fd ff ff       	jmp    226b6a <ArenaAllocator_alloc+0x1aa>
  226dde:	48 8d 3d e3 c3 01 00 	lea    rdi,[rip+0x1c3e3]        # 2431c8 <__unnamed_4>
  226de5:	31 c0                	xor    eax,eax
  226de7:	89 c6                	mov    esi,eax
            const adjusted_index = self.end_index + march_forward_bytes;
  226de9:	e8 12 48 fe ff       	call   20b600 <panic>
  226dee:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  226df5:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
            const new_end_index = adjusted_index + n;
  226dfc:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  226e03:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  226e0a:	0f 92 c2             	setb   dl
  226e0d:	48 89 8d 08 fe ff ff 	mov    QWORD PTR [rbp-0x1f8],rcx
  226e14:	88 95 07 fe ff ff    	mov    BYTE PTR [rbp-0x1f9],dl
  226e1a:	72 02                	jb     226e1e <ArenaAllocator_alloc+0x45e>
  226e1c:	eb 10                	jmp    226e2e <ArenaAllocator_alloc+0x46e>
  226e1e:	48 8d 3d a3 c3 01 00 	lea    rdi,[rip+0x1c3a3]        # 2431c8 <__unnamed_4>
  226e25:	31 c0                	xor    eax,eax
  226e27:	89 c6                	mov    esi,eax
  226e29:	e8 d2 47 fe ff       	call   20b600 <panic>
  226e2e:	48 8b 85 08 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1f8]
  226e35:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
            if (new_end_index > cur_buf.len) {
  226e3c:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  226e43:	48 3b 8d 20 ff ff ff 	cmp    rcx,QWORD PTR [rbp-0xe0]
  226e4a:	0f 87 55 fd ff ff    	ja     226ba5 <ArenaAllocator_alloc+0x1e5>
  226e50:	e9 fb fd ff ff       	jmp    226c50 <ArenaAllocator_alloc+0x290>
  226e55:	48 8d 3d 6c c3 01 00 	lea    rdi,[rip+0x1c36c]        # 2431c8 <__unnamed_4>
  226e5c:	31 c0                	xor    eax,eax
  226e5e:	89 c6                	mov    esi,eax
                cur_node = try self.createNode(cur_buf.len, n + alignment);
  226e60:	e8 9b 47 fe ff       	call   20b600 <panic>
  226e65:	48 8d 7d a8          	lea    rdi,[rbp-0x58]
  226e69:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  226e70:	48 8b 95 60 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1a0]
  226e77:	48 8b 8d 58 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1a8]
  226e7e:	4c 8b 85 50 fe ff ff 	mov    r8,QWORD PTR [rbp-0x1b0]
  226e85:	e8 d6 1a 00 00       	call   228960 <ArenaAllocator_createNode>
  226e8a:	66 83 7d a8 00       	cmp    WORD PTR [rbp-0x58],0x0
  226e8f:	0f 85 5b fd ff ff    	jne    226bf0 <ArenaAllocator_alloc+0x230>
  226e95:	e9 a6 fd ff ff       	jmp    226c40 <ArenaAllocator_alloc+0x280>
  226e9a:	48 8d 3d 37 c5 01 00 	lea    rdi,[rip+0x1c537]        # 2433d8 <__unnamed_20>
  226ea1:	31 c0                	xor    eax,eax
  226ea3:	89 c6                	mov    esi,eax
            const result = cur_buf[adjusted_index..new_end_index];
  226ea5:	e8 56 47 fe ff       	call   20b600 <panic>
  226eaa:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  226eb1:	48 8b 8d 30 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d0]
  226eb8:	48 39 c8             	cmp    rax,rcx
  226ebb:	76 10                	jbe    226ecd <ArenaAllocator_alloc+0x50d>
  226ebd:	48 8d 3d 14 c5 01 00 	lea    rdi,[rip+0x1c514]        # 2433d8 <__unnamed_20>
  226ec4:	31 c0                	xor    eax,eax
  226ec6:	89 c6                	mov    esi,eax
  226ec8:	e8 33 47 fe ff       	call   20b600 <panic>
  226ecd:	48 8b 85 40 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c0]
  226ed4:	48 03 85 18 ff ff ff 	add    rax,QWORD PTR [rbp-0xe8]
  226edb:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  226ee2:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  226ee9:	48 8b 8d 40 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1c0]
  226ef0:	48 29 c8             	sub    rax,rcx
  226ef3:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  226efa:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  226f01:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
  226f08:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  226f0f:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
            self.end_index = new_end_index;
  226f16:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  226f1d:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  226f24:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
            return result;
  226f28:	66 c7 85 58 ff ff ff 	mov    WORD PTR [rbp-0xa8],0x0
  226f2f:	00 00 
  226f31:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
  226f38:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  226f3f:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  226f46:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  226f4d:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
  226f54:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
  226f5b:	48 89 02             	mov    QWORD PTR [rdx],rax
  226f5e:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  226f65:	48 89 42 08          	mov    QWORD PTR [rdx+0x8],rax
  226f69:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  226f70:	48 89 42 10          	mov    QWORD PTR [rdx+0x10],rax
  226f74:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  226f7b:	48 81 c4 00 02 00 00 	add    rsp,0x200
  226f82:	5d                   	pop    rbp
  226f83:	c3                   	ret    
  226f84:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  226f8b:	00 00 00 00 00 

0000000000226f90 <ArenaAllocator_realloc>:
    fn realloc(allocator: *Allocator, old_mem: []u8, new_size: usize, alignment: u29) ![]u8 {
  226f90:	55                   	push   rbp
  226f91:	48 89 e5             	mov    rbp,rsp
  226f94:	48 81 ec f0 00 00 00 	sub    rsp,0xf0
  226f9b:	48 89 f8             	mov    rax,rdi
  226f9e:	48 89 95 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdx
  226fa5:	4c 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],r8
  226fac:	41 81 e1 ff ff ff 1f 	and    r9d,0x1fffffff
  226fb3:	44 89 8d 64 ff ff ff 	mov    DWORD PTR [rbp-0x9c],r9d
        if (new_size <= old_mem.len) {
  226fba:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  226fc1:	48 3b 51 08          	cmp    rdx,QWORD PTR [rcx+0x8]
  226fc5:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  226fcc:	48 89 bd 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rdi
  226fd3:	48 89 b5 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rsi
  226fda:	48 89 8d 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rcx
  226fe1:	77 32                	ja     227015 <ArenaAllocator_realloc+0x85>
  226fe3:	31 c0                	xor    eax,eax
  226fe5:	89 c1                	mov    ecx,eax
            return old_mem[0..new_size];
  226fe7:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  226fee:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  226ff5:	48 8b 7e 08          	mov    rdi,QWORD PTR [rsi+0x8]
  226ff9:	48 39 d1             	cmp    rcx,rdx
  226ffc:	48 89 bd 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rdi
  227003:	48 89 95 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdx
  22700a:	0f 86 15 01 00 00    	jbe    227125 <ArenaAllocator_realloc+0x195>
  227010:	e9 00 01 00 00       	jmp    227115 <ArenaAllocator_realloc+0x185>
  227015:	48 8d 45 c0          	lea    rax,[rbp-0x40]
            const result = try alloc(allocator, new_size, alignment);
  227019:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  227020:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  227027:	44 8b 85 64 ff ff ff 	mov    r8d,DWORD PTR [rbp-0x9c]
  22702e:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  227032:	48 8b b5 38 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc8]
  227039:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  227040:	e8 7b f9 ff ff       	call   2269c0 <ArenaAllocator_alloc>
  227045:	66 83 7d c0 00       	cmp    WORD PTR [rbp-0x40],0x0
  22704a:	74 50                	je     22709c <ArenaAllocator_realloc+0x10c>
  22704c:	66 8b 45 c0          	mov    ax,WORD PTR [rbp-0x40]
  227050:	48 8b bd 38 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xc8]
  227057:	66 89 85 16 ff ff ff 	mov    WORD PTR [rbp-0xea],ax
  22705e:	e8 2d 4c fe ff       	call   20bc90 <__zig_return_error>
  227063:	66 8b 85 16 ff ff ff 	mov    ax,WORD PTR [rbp-0xea]
  22706a:	66 89 45 90          	mov    WORD PTR [rbp-0x70],ax
  22706e:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  227072:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  227079:	48 89 39             	mov    QWORD PTR [rcx],rdi
  22707c:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  227080:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  227084:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  227088:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  22708c:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  227093:	48 81 c4 f0 00 00 00 	add    rsp,0xf0
  22709a:	5d                   	pop    rbp
  22709b:	c3                   	ret    
  22709c:	48 8d bd 50 ff ff ff 	lea    rdi,[rbp-0xb0]
  2270a3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2270a7:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
  2270ae:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2270b2:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
            mem.copy(u8, result, old_mem);
  2270b9:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  2270c0:	e8 0b dc ff ff       	call   224cd0 <copy>
            return result;
  2270c5:	66 c7 85 78 ff ff ff 	mov    WORD PTR [rbp-0x88],0x0
  2270cc:	00 00 
  2270ce:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  2270d5:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  2270d9:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
  2270e0:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  2270e4:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  2270eb:	48 8b b5 40 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc0]
  2270f2:	48 89 06             	mov    QWORD PTR [rsi],rax
  2270f5:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  2270f9:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  2270fd:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  227101:	48 89 46 10          	mov    QWORD PTR [rsi+0x10],rax
  227105:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  22710c:	48 81 c4 f0 00 00 00 	add    rsp,0xf0
  227113:	5d                   	pop    rbp
  227114:	c3                   	ret    
  227115:	48 8d 3d bc c2 01 00 	lea    rdi,[rip+0x1c2bc]        # 2433d8 <__unnamed_20>
  22711c:	31 c0                	xor    eax,eax
  22711e:	89 c6                	mov    esi,eax
            return old_mem[0..new_size];
  227120:	e8 db 44 fe ff       	call   20b600 <panic>
  227125:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  22712c:	48 8b 8d 28 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd8]
  227133:	48 39 c8             	cmp    rax,rcx
  227136:	76 10                	jbe    227148 <ArenaAllocator_realloc+0x1b8>
  227138:	48 8d 3d 99 c2 01 00 	lea    rdi,[rip+0x1c299]        # 2433d8 <__unnamed_20>
  22713f:	31 c0                	xor    eax,eax
  227141:	89 c6                	mov    esi,eax
  227143:	e8 b8 44 fe ff       	call   20b600 <panic>
  227148:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  22714f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  227152:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  227156:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  22715d:	48 83 e9 00          	sub    rcx,0x0
  227161:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  227165:	66 c7 45 d8 00 00    	mov    WORD PTR [rbp-0x28],0x0
  22716b:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  22716f:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  227173:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  227177:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  22717b:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  22717f:	48 8b 95 40 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc0]
  227186:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  227189:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  22718d:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  227191:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  227195:	48 89 4a 10          	mov    QWORD PTR [rdx+0x10],rcx
  227199:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  2271a0:	48 81 c4 f0 00 00 00 	add    rsp,0xf0
  2271a7:	5d                   	pop    rbp
  2271a8:	c3                   	ret    
  2271a9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

00000000002271b0 <ArenaAllocator_free>:
    fn free(allocator: *Allocator, bytes: []u8) void {}
  2271b0:	55                   	push   rbp
  2271b1:	48 89 e5             	mov    rbp,rsp
  2271b4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  2271b8:	5d                   	pop    rbp
  2271b9:	c3                   	ret    
  2271ba:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000002271c0 <Allocator_alignedAlloc.97>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  2271c0:	55                   	push   rbp
  2271c1:	48 89 e5             	mov    rbp,rsp
  2271c4:	48 81 ec 20 01 00 00 	sub    rsp,0x120
  2271cb:	48 89 f8             	mov    rax,rdi
  2271ce:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  2271d5:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  2271dc:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  2271e3:	00 
  2271e4:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  2271eb:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  2271f2:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  2271f9:	75 37                	jne    227232 <Allocator_alignedAlloc.97+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  2271fb:	48 8b 05 86 34 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe3486]        # 20a688 <__unnamed_177>
  227202:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  227209:	48 89 01             	mov    QWORD PTR [rcx],rax
  22720c:	48 8b 05 7d 34 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe347d]        # 20a690 <__unnamed_177+0x8>
  227213:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  227217:	48 8b 05 7a 34 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe347a]        # 20a698 <__unnamed_177+0x10>
  22721e:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  227222:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  227229:	48 81 c4 20 01 00 00 	add    rsp,0x120
  227230:	5d                   	pop    rbp
  227231:	c3                   	ret    
        if (n == 0) {
  227232:	eb 00                	jmp    227234 <Allocator_alignedAlloc.97+0x74>
  227234:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  227238:	b8 c8 00 00 00       	mov    eax,0xc8
  22723d:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  22723f:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  227246:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  22724d:	e8 5e e1 fe ff       	call   2153b0 <mul>
  227252:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  227257:	74 43                	je     22729c <Allocator_alignedAlloc.97+0xdc>
  227259:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  227260:	e8 2b 4a fe ff       	call   20bc90 <__zig_return_error>
  227265:	48 8b 3d 34 34 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe3434]        # 20a6a0 <__unnamed_178>
  22726c:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  227273:	48 89 38             	mov    QWORD PTR [rax],rdi
  227276:	48 8b 3d 2b 34 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe342b]        # 20a6a8 <__unnamed_178+0x8>
  22727d:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  227281:	48 8b 3d 28 34 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe3428]        # 20a6b0 <__unnamed_178+0x10>
  227288:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  22728c:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  227293:	48 81 c4 20 01 00 00 	add    rsp,0x120
  22729a:	5d                   	pop    rbp
  22729b:	c3                   	ret    
  22729c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2272a0:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  2272a7:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  2272ab:	41 b8 04 00 00 00    	mov    r8d,0x4
  2272b1:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  2272b8:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  2272bf:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  2272c6:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  2272c9:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  2272d0:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  2272d7:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  2272de:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  2272e5:	4c 89 ce             	mov    rsi,r9
  2272e8:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  2272ef:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  2272f6:	4c 89 d1             	mov    rcx,r10
  2272f9:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  227300:	41 ff d3             	call   r11
  227303:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  227308:	74 50                	je     22735a <Allocator_alignedAlloc.97+0x19a>
  22730a:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  22730e:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  227315:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  22731c:	e8 6f 49 fe ff       	call   20bc90 <__zig_return_error>
  227321:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  227328:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  22732c:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  227330:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  227337:	48 89 39             	mov    QWORD PTR [rcx],rdi
  22733a:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  22733e:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  227342:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  227346:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  22734a:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  227351:	48 81 c4 20 01 00 00 	add    rsp,0x120
  227358:	5d                   	pop    rbp
  227359:	c3                   	ret    
  22735a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  22735e:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  227365:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  227369:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  227370:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  227377:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  22737e:	0f 94 c1             	sete   cl
  227381:	0f b6 f9             	movzx  edi,cl
  227384:	e8 77 3c fe ff       	call   20b000 <assert>
  227389:	be aa 00 00 00       	mov    esi,0xaa
  22738e:	bf 08 00 00 00       	mov    edi,0x8
  227393:	89 fa                	mov    edx,edi
  227395:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  22739c:	48 89 c7             	mov    rdi,rax
  22739f:	e8 ac d4 00 00       	call   234850 <memset>
  2273a4:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  2273ab:	00 00 00 00 
  2273af:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  2273b6:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  2273bd:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  2273c4:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  2273cb:	48 39 c8             	cmp    rax,rcx
  2273ce:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  2273d5:	73 32                	jae    227409 <Allocator_alignedAlloc.97+0x249>
  2273d7:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  2273de:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  2273e5:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  2273ec:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  2273f3:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  2273f5:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  2273fc:	48 83 c1 01          	add    rcx,0x1
  227400:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  227407:	eb b4                	jmp    2273bd <Allocator_alignedAlloc.97+0x1fd>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  227409:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  227410:	48 83 e0 03          	and    rax,0x3
  227414:	48 83 f8 00          	cmp    rax,0x0
  227418:	75 32                	jne    22744c <Allocator_alignedAlloc.97+0x28c>
  22741a:	b8 c8 00 00 00       	mov    eax,0xc8
  22741f:	89 c1                	mov    ecx,eax
  227421:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
  227428:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
  22742c:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
  227433:	48 89 d0             	mov    rax,rdx
  227436:	31 f6                	xor    esi,esi
  227438:	48 89 95 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdx
  22743f:	89 f2                	mov    edx,esi
  227441:	48 f7 f1             	div    rcx
  227444:	48 83 fa 00          	cmp    rdx,0x0
  227448:	74 12                	je     22745c <Allocator_alignedAlloc.97+0x29c>
  22744a:	eb 77                	jmp    2274c3 <Allocator_alignedAlloc.97+0x303>
  22744c:	48 8d 3d 5d c1 01 00 	lea    rdi,[rip+0x1c15d]        # 2435b0 <__unnamed_75>
  227453:	31 c0                	xor    eax,eax
  227455:	89 c6                	mov    esi,eax
  227457:	e8 a4 41 fe ff       	call   20b600 <panic>
  22745c:	b8 c8 00 00 00       	mov    eax,0xc8
  227461:	89 c1                	mov    ecx,eax
  227463:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  22746a:	31 d2                	xor    edx,edx
  22746c:	48 f7 f1             	div    rcx
  22746f:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  227473:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  22747a:	00 00 
  22747c:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  227480:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  227487:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  22748b:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  22748f:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  227496:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  22749d:	48 89 01             	mov    QWORD PTR [rcx],rax
  2274a0:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  2274a7:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2274ab:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  2274af:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  2274b3:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  2274ba:	48 81 c4 20 01 00 00 	add    rsp,0x120
  2274c1:	5d                   	pop    rbp
  2274c2:	c3                   	ret    
  2274c3:	48 8d 3d fe c0 01 00 	lea    rdi,[rip+0x1c0fe]        # 2435c8 <__unnamed_76>
  2274ca:	31 c0                	xor    eax,eax
  2274cc:	89 c6                	mov    esi,eax
  2274ce:	e8 2d 41 fe ff       	call   20b600 <panic>
  2274d3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2274da:	84 00 00 00 00 00 

00000000002274e0 <addNullByte>:
    assert(len(c"123456789") == 9);
}

/// Returns a mutable slice with 1 more byte of length which is a null byte.
/// Caller owns the returned memory.
pub fn addNullByte(allocator: *mem.Allocator, slice: []const u8) ![]u8 {
  2274e0:	55                   	push   rbp
  2274e1:	48 89 e5             	mov    rbp,rsp
  2274e4:	48 81 ec c0 00 00 00 	sub    rsp,0xc0
  2274eb:	48 89 f8             	mov    rax,rdi
  2274ee:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
    const result = try allocator.alloc(u8, slice.len + 1);
  2274f2:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  2274f6:	4c 8b 41 08          	mov    r8,QWORD PTR [rcx+0x8]
  2274fa:	49 83 c0 01          	add    r8,0x1
  2274fe:	41 0f 92 c1          	setb   r9b
  227502:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  227506:	48 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rcx
  22750d:	48 89 bd 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdi
  227514:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
  22751b:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
  227522:	4c 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],r8
  227529:	44 88 8d 57 ff ff ff 	mov    BYTE PTR [rbp-0xa9],r9b
  227530:	0f 82 8c 00 00 00    	jb     2275c2 <addNullByte+0xe2>
  227536:	e9 97 00 00 00       	jmp    2275d2 <addNullByte+0xf2>
  22753b:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  22753f:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
  227546:	66 89 85 54 ff ff ff 	mov    WORD PTR [rbp-0xac],ax
  22754d:	e8 3e 47 fe ff       	call   20bc90 <__zig_return_error>
  227552:	66 8b 85 54 ff ff ff 	mov    ax,WORD PTR [rbp-0xac]
  227559:	66 89 45 b8          	mov    WORD PTR [rbp-0x48],ax
  22755d:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  227561:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
  227568:	48 89 39             	mov    QWORD PTR [rcx],rdi
  22756b:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  22756f:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  227573:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  227577:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  22757b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  22757f:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  227586:	5d                   	pop    rbp
  227587:	c3                   	ret    
  227588:	48 8d 7d 88          	lea    rdi,[rbp-0x78]
  22758c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  227590:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  227594:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  227598:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
    mem.copy(u8, result, slice);
  22759c:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
  2275a3:	e8 28 d7 ff ff       	call   224cd0 <copy>
    result[slice.len] = 0;
  2275a8:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  2275af:	48 8b 70 08          	mov    rsi,QWORD PTR [rax+0x8]
  2275b3:	48 3b 75 90          	cmp    rsi,QWORD PTR [rbp-0x70]
  2275b7:	48 89 b5 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rsi
  2275be:	72 4d                	jb     22760d <addNullByte+0x12d>
  2275c0:	eb 3b                	jmp    2275fd <addNullByte+0x11d>
  2275c2:	48 8d 3d ff bb 01 00 	lea    rdi,[rip+0x1bbff]        # 2431c8 <__unnamed_4>
  2275c9:	31 c0                	xor    eax,eax
  2275cb:	89 c6                	mov    esi,eax
    const result = try allocator.alloc(u8, slice.len + 1);
  2275cd:	e8 2e 40 fe ff       	call   20b600 <panic>
  2275d2:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
  2275d6:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
  2275dd:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  2275e4:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  2275eb:	e8 50 ae ff ff       	call   222440 <Allocator_alloc.74>
  2275f0:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  2275f5:	0f 85 40 ff ff ff    	jne    22753b <addNullByte+0x5b>
  2275fb:	eb 8b                	jmp    227588 <addNullByte+0xa8>
  2275fd:	48 8d 3d d4 bd 01 00 	lea    rdi,[rip+0x1bdd4]        # 2433d8 <__unnamed_20>
  227604:	31 c0                	xor    eax,eax
  227606:	89 c6                	mov    esi,eax
    result[slice.len] = 0;
  227608:	e8 f3 3f fe ff       	call   20b600 <panic>
  22760d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  227611:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
  227618:	c6 04 08 00          	mov    BYTE PTR [rax+rcx*1],0x0
    return result;
  22761c:	66 c7 45 a0 00 00    	mov    WORD PTR [rbp-0x60],0x0
  227622:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  227626:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  22762a:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  22762e:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  227632:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  227636:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  22763d:	48 89 02             	mov    QWORD PTR [rdx],rax
  227640:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  227644:	48 89 42 08          	mov    QWORD PTR [rdx+0x8],rax
  227648:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  22764c:	48 89 42 10          	mov    QWORD PTR [rdx+0x10],rax
  227650:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  227654:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  22765b:	5d                   	pop    rbp
  22765c:	c3                   	ret    
  22765d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000227660 <posixOpenC>:
pub fn posixOpenC(file_path: [*]const u8, flags: u32, perm: usize) !i32 {
  227660:	55                   	push   rbp
  227661:	48 89 e5             	mov    rbp,rsp
  227664:	48 83 ec 70          	sub    rsp,0x70
  227668:	48 89 f8             	mov    rax,rdi
  22766b:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  22766f:	89 4d e4             	mov    DWORD PTR [rbp-0x1c],ecx
  227672:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
  227676:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  22767a:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
  22767e:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
    while (true) {
  227682:	eb 00                	jmp    227684 <posixOpenC+0x24>
        const result = posix.open(file_path, flags, perm);
  227684:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  227688:	8b 75 e4             	mov    esi,DWORD PTR [rbp-0x1c]
  22768b:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  22768f:	e8 6c 1b 00 00       	call   229200 <open>
  227694:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
        const err = posix.getErrno(result);
  227698:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  22769c:	e8 df 59 fe ff       	call   20d080 <getErrno>
  2276a1:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
        if (err > 0) {
  2276a5:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
  2276aa:	0f 86 57 02 00 00    	jbe    227907 <posixOpenC+0x2a7>
            switch (err) {
  2276b0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2276b4:	48 83 c0 ff          	add    rax,0xffffffffffffffff
  2276b8:	48 89 c1             	mov    rcx,rax
  2276bb:	48 83 e9 4a          	sub    rcx,0x4a
  2276bf:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  2276c3:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
  2276c7:	77 14                	ja     2276dd <posixOpenC+0x7d>
  2276c9:	48 8d 05 fc 96 fd ff 	lea    rax,[rip+0xfffffffffffd96fc]        # 200dcc <__unnamed_181+0x114>
  2276d0:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  2276d4:	48 63 14 88          	movsxd rdx,DWORD PTR [rax+rcx*4]
  2276d8:	48 01 c2             	add    rdx,rax
  2276db:	ff e2                	jmp    rdx
                else => return unexpectedErrorPosix(err),
  2276dd:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  2276e1:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  2276e5:	e8 36 5a fe ff       	call   20d120 <unexpectedErrorPosix>
  2276ea:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  2276ee:	66 89 45 9e          	mov    WORD PTR [rbp-0x62],ax
  2276f2:	e8 99 45 fe ff       	call   20bc90 <__zig_return_error>
  2276f7:	66 8b 45 9e          	mov    ax,WORD PTR [rbp-0x62]
  2276fb:	66 89 45 f8          	mov    WORD PTR [rbp-0x8],ax
  2276ff:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  227703:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  227707:	48 89 37             	mov    QWORD PTR [rdi],rsi
  22770a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  22770e:	48 83 c4 70          	add    rsp,0x70
  227712:	5d                   	pop    rbp
  227713:	c3                   	ret    
                posix.EINTR => continue,
  227714:	e9 69 ff ff ff       	jmp    227682 <posixOpenC+0x22>
  227719:	48 8d 3d e0 bb 01 00 	lea    rdi,[rip+0x1bbe0]        # 243300 <__unnamed_13>
  227720:	31 c0                	xor    eax,eax
  227722:	89 c6                	mov    esi,eax
                posix.EFAULT => unreachable,
  227724:	e8 d7 3e fe ff       	call   20b600 <panic>
  227729:	48 8d 3d d0 bb 01 00 	lea    rdi,[rip+0x1bbd0]        # 243300 <__unnamed_13>
  227730:	31 c0                	xor    eax,eax
  227732:	89 c6                	mov    esi,eax
                posix.EINVAL => unreachable,
  227734:	e8 c7 3e fe ff       	call   20b600 <panic>
                posix.EACCES => return PosixOpenError.AccessDenied,
  227739:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  22773d:	e8 4e 45 fe ff       	call   20bc90 <__zig_return_error>
  227742:	48 8b 3d 37 95 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffd9537]        # 200c80 <__unnamed_179>
  227749:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  22774d:	48 89 38             	mov    QWORD PTR [rax],rdi
  227750:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  227754:	48 83 c4 70          	add    rsp,0x70
  227758:	5d                   	pop    rbp
  227759:	c3                   	ret    
                posix.EFBIG, posix.EOVERFLOW => return PosixOpenError.FileTooBig,
  22775a:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  22775e:	e8 2d 45 fe ff       	call   20bc90 <__zig_return_error>
  227763:	48 8b 3d 46 95 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffd9546]        # 200cb0 <__unnamed_180>
  22776a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  22776e:	48 89 38             	mov    QWORD PTR [rax],rdi
  227771:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  227775:	48 83 c4 70          	add    rsp,0x70
  227779:	5d                   	pop    rbp
  22777a:	c3                   	ret    
                posix.EISDIR => return PosixOpenError.IsDir,
  22777b:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  22777f:	e8 0c 45 fe ff       	call   20bc90 <__zig_return_error>
  227784:	48 8b 3d 2d 95 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffd952d]        # 200cb8 <__unnamed_181>
  22778b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  22778f:	48 89 38             	mov    QWORD PTR [rax],rdi
  227792:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  227796:	48 83 c4 70          	add    rsp,0x70
  22779a:	5d                   	pop    rbp
  22779b:	c3                   	ret    
                posix.ELOOP => return PosixOpenError.SymLinkLoop,
  22779c:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  2277a0:	e8 eb 44 fe ff       	call   20bc90 <__zig_return_error>
  2277a5:	48 8b 3d b4 94 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffd94b4]        # 200c60 <__unnamed_182>
  2277ac:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  2277b0:	48 89 38             	mov    QWORD PTR [rax],rdi
  2277b3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  2277b7:	48 83 c4 70          	add    rsp,0x70
  2277bb:	5d                   	pop    rbp
  2277bc:	c3                   	ret    
                posix.EMFILE => return PosixOpenError.ProcessFdQuotaExceeded,
  2277bd:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  2277c1:	e8 ca 44 fe ff       	call   20bc90 <__zig_return_error>
  2277c6:	48 8b 3d f3 93 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffd93f3]        # 200bc0 <__unnamed_183>
  2277cd:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  2277d1:	48 89 38             	mov    QWORD PTR [rax],rdi
  2277d4:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  2277d8:	48 83 c4 70          	add    rsp,0x70
  2277dc:	5d                   	pop    rbp
  2277dd:	c3                   	ret    
                posix.ENAMETOOLONG => return PosixOpenError.NameTooLong,
  2277de:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  2277e2:	e8 a9 44 fe ff       	call   20bc90 <__zig_return_error>
  2277e7:	48 8b 3d ba 94 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffd94ba]        # 200ca8 <__unnamed_184>
  2277ee:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  2277f2:	48 89 38             	mov    QWORD PTR [rax],rdi
  2277f5:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  2277f9:	48 83 c4 70          	add    rsp,0x70
  2277fd:	5d                   	pop    rbp
  2277fe:	c3                   	ret    
                posix.ENFILE => return PosixOpenError.SystemFdQuotaExceeded,
  2277ff:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  227803:	e8 88 44 fe ff       	call   20bc90 <__zig_return_error>
  227808:	48 8b 3d c1 93 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffd93c1]        # 200bd0 <__unnamed_185>
  22780f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  227813:	48 89 38             	mov    QWORD PTR [rax],rdi
  227816:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  22781a:	48 83 c4 70          	add    rsp,0x70
  22781e:	5d                   	pop    rbp
  22781f:	c3                   	ret    
                posix.ENODEV => return PosixOpenError.NoDevice,
  227820:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  227824:	e8 67 44 fe ff       	call   20bc90 <__zig_return_error>
  227829:	48 8b 3d d0 93 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffd93d0]        # 200c00 <__unnamed_186>
  227830:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  227834:	48 89 38             	mov    QWORD PTR [rax],rdi
  227837:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  22783b:	48 83 c4 70          	add    rsp,0x70
  22783f:	5d                   	pop    rbp
  227840:	c3                   	ret    
                posix.ENOENT => return PosixOpenError.PathNotFound,
  227841:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  227845:	e8 46 44 fe ff       	call   20bc90 <__zig_return_error>
  22784a:	48 8b 3d 9f 93 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffd939f]        # 200bf0 <__unnamed_187>
  227851:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  227855:	48 89 38             	mov    QWORD PTR [rax],rdi
  227858:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  22785c:	48 83 c4 70          	add    rsp,0x70
  227860:	5d                   	pop    rbp
  227861:	c3                   	ret    
                posix.ENOMEM => return PosixOpenError.SystemResources,
  227862:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  227866:	e8 25 44 fe ff       	call   20bc90 <__zig_return_error>
  22786b:	48 8b 3d 46 93 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffd9346]        # 200bb8 <__unnamed_188>
  227872:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  227876:	48 89 38             	mov    QWORD PTR [rax],rdi
  227879:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  22787d:	48 83 c4 70          	add    rsp,0x70
  227881:	5d                   	pop    rbp
  227882:	c3                   	ret    
                posix.ENOSPC => return PosixOpenError.NoSpaceLeft,
  227883:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  227887:	e8 04 44 fe ff       	call   20bc90 <__zig_return_error>
  22788c:	48 8b 3d 35 93 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffd9335]        # 200bc8 <__unnamed_189>
  227893:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  227897:	48 89 38             	mov    QWORD PTR [rax],rdi
  22789a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  22789e:	48 83 c4 70          	add    rsp,0x70
  2278a2:	5d                   	pop    rbp
  2278a3:	c3                   	ret    
                posix.ENOTDIR => return PosixOpenError.NotDir,
  2278a4:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  2278a8:	e8 e3 43 fe ff       	call   20bc90 <__zig_return_error>
  2278ad:	48 8b 3d e4 93 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffd93e4]        # 200c98 <__unnamed_190>
  2278b4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  2278b8:	48 89 38             	mov    QWORD PTR [rax],rdi
  2278bb:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  2278bf:	48 83 c4 70          	add    rsp,0x70
  2278c3:	5d                   	pop    rbp
  2278c4:	c3                   	ret    
                posix.EPERM => return PosixOpenError.AccessDenied,
  2278c5:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  2278c9:	e8 c2 43 fe ff       	call   20bc90 <__zig_return_error>
  2278ce:	48 8b 3d ab 93 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffd93ab]        # 200c80 <__unnamed_179>
  2278d5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  2278d9:	48 89 38             	mov    QWORD PTR [rax],rdi
  2278dc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  2278e0:	48 83 c4 70          	add    rsp,0x70
  2278e4:	5d                   	pop    rbp
  2278e5:	c3                   	ret    
                posix.EEXIST => return PosixOpenError.PathAlreadyExists,
  2278e6:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  2278ea:	e8 a1 43 fe ff       	call   20bc90 <__zig_return_error>
  2278ef:	48 8b 3d 92 93 fd ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffd9392]        # 200c88 <__unnamed_192>
  2278f6:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  2278fa:	48 89 38             	mov    QWORD PTR [rax],rdi
  2278fd:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  227901:	48 83 c4 70          	add    rsp,0x70
  227905:	5d                   	pop    rbp
  227906:	c3                   	ret    
        if (err > 0) {
  227907:	eb 00                	jmp    227909 <posixOpenC+0x2a9>
        return @intCast(i32, result);
  227909:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  22790d:	89 c1                	mov    ecx,eax
  22790f:	48 63 d1             	movsxd rdx,ecx
  227912:	48 39 d0             	cmp    rax,rdx
  227915:	89 4d 98             	mov    DWORD PTR [rbp-0x68],ecx
  227918:	75 21                	jne    22793b <posixOpenC+0x2db>
  22791a:	66 c7 45 f0 00 00    	mov    WORD PTR [rbp-0x10],0x0
  227920:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
  227923:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
  227926:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  22792a:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  22792e:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  227931:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  227935:	48 83 c4 70          	add    rsp,0x70
  227939:	5d                   	pop    rbp
  22793a:	c3                   	ret    
  22793b:	48 8d 3d 46 bb 01 00 	lea    rdi,[rip+0x1bb46]        # 243488 <__unnamed_22>
  227942:	31 c0                	xor    eax,eax
  227944:	89 c6                	mov    esi,eax
  227946:	e8 b5 3c fe ff       	call   20b600 <panic>
  22794b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000227950 <close.98>:
pub fn close(fd: i32) usize {
  227950:	55                   	push   rbp
  227951:	48 89 e5             	mov    rbp,rsp
  227954:	48 83 ec 10          	sub    rsp,0x10
  227958:	b8 03 00 00 00       	mov    eax,0x3
  22795d:	89 c1                	mov    ecx,eax
  22795f:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    return syscall1(SYS_close, @intCast(usize, fd));
  227962:	48 63 75 fc          	movsxd rsi,DWORD PTR [rbp-0x4]
  227966:	48 89 cf             	mov    rdi,rcx
  227969:	e8 e2 18 00 00       	call   229250 <syscall1>
  22796e:	48 83 c4 10          	add    rsp,0x10
  227972:	5d                   	pop    rbp
  227973:	c3                   	ret    
  227974:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22797b:	00 00 00 00 00 

0000000000227980 <BaseLinkedList(promise,void,(struct []const u8 constant))_popFirst>:

        /// Remove and return the first node in the list.
        ///
        /// Returns:
        ///     A pointer to the first node in the list.
        pub fn popFirst(list: *Self) ?*Node {
  227980:	55                   	push   rbp
  227981:	48 89 e5             	mov    rbp,rsp
  227984:	48 83 ec 20          	sub    rsp,0x20
  227988:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
            const first = list.first orelse return null;
  22798c:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  227990:	48 83 3f 00          	cmp    QWORD PTR [rdi],0x0
  227994:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  227998:	75 08                	jne    2279a2 <BaseLinkedList(promise,void,(struct []const u8 constant))_popFirst+0x22>
  22799a:	31 c0                	xor    eax,eax
  22799c:	48 83 c4 20          	add    rsp,0x20
  2279a0:	5d                   	pop    rbp
  2279a1:	c3                   	ret    
  2279a2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2279a6:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  2279a9:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  2279ad:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2279b1:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
            list.remove(first);
  2279b5:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  2279b9:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  2279bd:	e8 de 18 00 00       	call   2292a0 <BaseLinkedList(promise,void,(struct []const u8 constant))_remove>
            return first;
  2279c2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2279c6:	48 83 c4 20          	add    rsp,0x20
  2279ca:	5d                   	pop    rbp
  2279cb:	c3                   	ret    
  2279cc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

00000000002279d0 <InStream(ReadError)_readVarInt>:
        pub fn readVarInt(self: *Self, endian: builtin.Endian, comptime T: type, size: usize) !T {
  2279d0:	55                   	push   rbp
  2279d1:	48 89 e5             	mov    rbp,rsp
  2279d4:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  2279db:	88 c8                	mov    al,cl
  2279dd:	49 89 f9             	mov    r9,rdi
  2279e0:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
  2279e4:	24 01                	and    al,0x1
  2279e6:	88 45 bf             	mov    BYTE PTR [rbp-0x41],al
  2279e9:	4c 89 45 b0          	mov    QWORD PTR [rbp-0x50],r8
            assert(size <= @sizeOf(T));
  2279ed:	48 83 7d b0 08       	cmp    QWORD PTR [rbp-0x50],0x8
  2279f2:	0f 96 c0             	setbe  al
  2279f5:	0f b6 c8             	movzx  ecx,al
  2279f8:	48 89 7d 90          	mov    QWORD PTR [rbp-0x70],rdi
  2279fc:	89 cf                	mov    edi,ecx
  2279fe:	4c 89 4d 88          	mov    QWORD PTR [rbp-0x78],r9
  227a02:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
  227a06:	e8 f5 35 fe ff       	call   20b000 <assert>
            assert(size <= 8);
  227a0b:	48 83 7d b0 08       	cmp    QWORD PTR [rbp-0x50],0x8
  227a10:	0f 96 c0             	setbe  al
  227a13:	0f b6 f8             	movzx  edi,al
  227a16:	e8 e5 35 fe ff       	call   20b000 <assert>
  227a1b:	31 c9                	xor    ecx,ecx
  227a1d:	89 ca                	mov    edx,ecx
            var input_buf: [8]u8 = undefined;
  227a1f:	48 8b 35 52 92 fd ff 	mov    rsi,QWORD PTR [rip+0xfffffffffffd9252]        # 200c78 <__unnamed_132>
  227a26:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
            const input_slice = input_buf[0..size];
  227a2a:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  227a2e:	48 39 f2             	cmp    rdx,rsi
  227a31:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
  227a38:	0f 86 98 00 00 00    	jbe    227ad6 <InStream(ReadError)_readVarInt+0x106>
  227a3e:	e9 83 00 00 00       	jmp    227ac6 <InStream(ReadError)_readVarInt+0xf6>
            try self.readNoEof(input_slice);
  227a43:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  227a47:	48 8b 7d 80          	mov    rdi,QWORD PTR [rbp-0x80]
  227a4b:	66 89 85 76 ff ff ff 	mov    WORD PTR [rbp-0x8a],ax
  227a52:	e8 39 42 fe ff       	call   20bc90 <__zig_return_error>
  227a57:	66 8b 85 76 ff ff ff 	mov    ax,WORD PTR [rbp-0x8a]
  227a5e:	66 89 45 d8          	mov    WORD PTR [rbp-0x28],ax
  227a62:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  227a66:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  227a6a:	48 89 39             	mov    QWORD PTR [rcx],rdi
  227a6d:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  227a71:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  227a75:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  227a79:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  227a80:	5d                   	pop    rbp
  227a81:	c3                   	ret    
  227a82:	48 8d 45 98          	lea    rax,[rbp-0x68]
            return mem.readInt(input_slice, T, endian);
  227a86:	8a 4d bf             	mov    cl,BYTE PTR [rbp-0x41]
  227a89:	0f b6 f1             	movzx  esi,cl
  227a8c:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
  227a90:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  227a97:	e8 d4 97 ff ff       	call   221270 <readInt.66>
  227a9c:	66 c7 45 c8 00 00    	mov    WORD PTR [rbp-0x38],0x0
  227aa2:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  227aa6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  227aaa:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  227aae:	48 89 07             	mov    QWORD PTR [rdi],rax
  227ab1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  227ab5:	48 89 47 08          	mov    QWORD PTR [rdi+0x8],rax
  227ab9:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  227abd:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  227ac4:	5d                   	pop    rbp
  227ac5:	c3                   	ret    
  227ac6:	48 8d 3d 0b b9 01 00 	lea    rdi,[rip+0x1b90b]        # 2433d8 <__unnamed_20>
  227acd:	31 c0                	xor    eax,eax
  227acf:	89 c6                	mov    esi,eax
            const input_slice = input_buf[0..size];
  227ad1:	e8 2a 3b fe ff       	call   20b600 <panic>
  227ad6:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  227add:	48 83 f8 08          	cmp    rax,0x8
  227ae1:	76 10                	jbe    227af3 <InStream(ReadError)_readVarInt+0x123>
  227ae3:	48 8d 3d ee b8 01 00 	lea    rdi,[rip+0x1b8ee]        # 2433d8 <__unnamed_20>
  227aea:	31 c0                	xor    eax,eax
  227aec:	89 c6                	mov    esi,eax
  227aee:	e8 0d 3b fe ff       	call   20b600 <panic>
  227af3:	48 8d 55 98          	lea    rdx,[rbp-0x68]
  227af7:	48 8d 45 a8          	lea    rax,[rbp-0x58]
  227afb:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  227aff:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  227b06:	48 83 e8 00          	sub    rax,0x0
  227b0a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  227b0e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  227b12:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  227b16:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  227b1a:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            try self.readNoEof(input_slice);
  227b1e:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
  227b22:	48 8b 7d 80          	mov    rdi,QWORD PTR [rbp-0x80]
  227b26:	e8 35 be fe ff       	call   213960 <InStream(ReadError)_readNoEof>
  227b2b:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  227b2f:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  227b34:	0f 85 09 ff ff ff    	jne    227a43 <InStream(ReadError)_readVarInt+0x73>
  227b3a:	e9 43 ff ff ff       	jmp    227a82 <InStream(ReadError)_readVarInt+0xb2>
  227b3f:	90                   	nop

0000000000227b40 <InStream(ReadError)_readIntLe.99>:
        pub fn readIntLe(self: *Self, comptime T: type) !T {
  227b40:	55                   	push   rbp
  227b41:	48 89 e5             	mov    rbp,rsp
  227b44:	48 83 ec 30          	sub    rsp,0x30
  227b48:	48 89 f8             	mov    rax,rdi
  227b4b:	48 8d 4d f8          	lea    rcx,[rbp-0x8]
  227b4f:	41 b8 01 00 00 00    	mov    r8d,0x1
  227b55:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
            return self.readInt(builtin.Endian.Little, T);
  227b59:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  227b5d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  227b61:	48 89 cf             	mov    rdi,rcx
  227b64:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  227b68:	44 89 c1             	mov    ecx,r8d
  227b6b:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  227b6f:	e8 8c 00 00 00       	call   227c00 <InStream(ReadError)_readInt.101>
  227b74:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  227b79:	74 0b                	je     227b86 <InStream(ReadError)_readIntLe.99+0x46>
  227b7b:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  227b7f:	e8 0c 41 fe ff       	call   20bc90 <__zig_return_error>
  227b84:	eb 02                	jmp    227b88 <InStream(ReadError)_readIntLe.99+0x48>
  227b86:	eb 00                	jmp    227b88 <InStream(ReadError)_readIntLe.99+0x48>
  227b88:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  227b8b:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  227b8f:	89 01                	mov    DWORD PTR [rcx],eax
  227b91:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  227b95:	48 83 c4 30          	add    rsp,0x30
  227b99:	5d                   	pop    rbp
  227b9a:	c3                   	ret    
  227b9b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000227ba0 <InStream(ReadError)_readIntLe.100>:
        pub fn readIntLe(self: *Self, comptime T: type) !T {
  227ba0:	55                   	push   rbp
  227ba1:	48 89 e5             	mov    rbp,rsp
  227ba4:	48 83 ec 30          	sub    rsp,0x30
  227ba8:	48 89 f8             	mov    rax,rdi
  227bab:	48 8d 4d f8          	lea    rcx,[rbp-0x8]
  227baf:	41 b8 01 00 00 00    	mov    r8d,0x1
  227bb5:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
            return self.readInt(builtin.Endian.Little, T);
  227bb9:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  227bbd:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  227bc1:	48 89 cf             	mov    rdi,rcx
  227bc4:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  227bc8:	44 89 c1             	mov    ecx,r8d
  227bcb:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  227bcf:	e8 fc c0 fe ff       	call   213cd0 <InStream(ReadError)_readInt>
  227bd4:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  227bd9:	74 0b                	je     227be6 <InStream(ReadError)_readIntLe.100+0x46>
  227bdb:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  227bdf:	e8 ac 40 fe ff       	call   20bc90 <__zig_return_error>
  227be4:	eb 02                	jmp    227be8 <InStream(ReadError)_readIntLe.100+0x48>
  227be6:	eb 00                	jmp    227be8 <InStream(ReadError)_readIntLe.100+0x48>
  227be8:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  227beb:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  227bef:	89 01                	mov    DWORD PTR [rcx],eax
  227bf1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  227bf5:	48 83 c4 30          	add    rsp,0x30
  227bf9:	5d                   	pop    rbp
  227bfa:	c3                   	ret    
  227bfb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000227c00 <InStream(ReadError)_readInt.101>:
        pub fn readInt(self: *Self, endian: builtin.Endian, comptime T: type) !T {
  227c00:	55                   	push   rbp
  227c01:	48 89 e5             	mov    rbp,rsp
  227c04:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  227c0b:	88 c8                	mov    al,cl
  227c0d:	49 89 f8             	mov    r8,rdi
  227c10:	41 b1 01             	mov    r9b,0x1
  227c13:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
  227c17:	24 01                	and    al,0x1
  227c19:	88 45 bf             	mov    BYTE PTR [rbp-0x41],al
            var bytes: [@sizeOf(T)]u8 = undefined;
  227c1c:	8a 05 de 2a fe ff    	mov    al,BYTE PTR [rip+0xfffffffffffe2ade]        # 20a700 <__unnamed_194>
  227c22:	88 45 be             	mov    BYTE PTR [rbp-0x42],al
            try self.readNoEof(bytes[0..]);
  227c25:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  227c29:	41 f6 c1 01          	test   r9b,0x1
  227c2d:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
  227c31:	4c 89 45 a8          	mov    QWORD PTR [rbp-0x58],r8
  227c35:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  227c39:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
  227c3d:	0f 85 87 00 00 00    	jne    227cca <InStream(ReadError)_readInt.101+0xca>
  227c43:	eb 75                	jmp    227cba <InStream(ReadError)_readInt.101+0xba>
  227c45:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  227c49:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  227c4d:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  227c51:	e8 3a 40 fe ff       	call   20bc90 <__zig_return_error>
  227c56:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  227c5a:	66 89 45 e8          	mov    WORD PTR [rbp-0x18],ax
  227c5e:	8b 4d e8             	mov    ecx,DWORD PTR [rbp-0x18]
  227c61:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  227c65:	89 0f                	mov    DWORD PTR [rdi],ecx
  227c67:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  227c6b:	48 81 c4 80 00 00 00 	add    rsp,0x80
  227c72:	5d                   	pop    rbp
  227c73:	c3                   	ret    
  227c74:	48 8d 45 d0          	lea    rax,[rbp-0x30]
  227c78:	48 8d 4d be          	lea    rcx,[rbp-0x42]
            return mem.readInt(bytes, T, endian);
  227c7c:	8a 55 bf             	mov    dl,BYTE PTR [rbp-0x41]
  227c7f:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  227c83:	48 c7 45 d8 01 00 00 	mov    QWORD PTR [rbp-0x28],0x1
  227c8a:	00 
  227c8b:	0f b6 f2             	movzx  esi,dl
  227c8e:	48 8d 7d d0          	lea    rdi,[rbp-0x30]
  227c92:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  227c96:	e8 65 00 00 00       	call   227d00 <readInt.102>
  227c9b:	66 c7 45 c8 00 00    	mov    WORD PTR [rbp-0x38],0x0
  227ca1:	88 45 ca             	mov    BYTE PTR [rbp-0x36],al
  227ca4:	8b 75 c8             	mov    esi,DWORD PTR [rbp-0x38]
  227ca7:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  227cab:	89 31                	mov    DWORD PTR [rcx],esi
  227cad:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  227cb1:	48 81 c4 80 00 00 00 	add    rsp,0x80
  227cb8:	5d                   	pop    rbp
  227cb9:	c3                   	ret    
  227cba:	48 8d 3d 17 b7 01 00 	lea    rdi,[rip+0x1b717]        # 2433d8 <__unnamed_20>
  227cc1:	31 c0                	xor    eax,eax
  227cc3:	89 c6                	mov    esi,eax
            try self.readNoEof(bytes[0..]);
  227cc5:	e8 36 39 fe ff       	call   20b600 <panic>
  227cca:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
  227cce:	48 8d 45 be          	lea    rax,[rbp-0x42]
  227cd2:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  227cd6:	48 c7 45 f8 01 00 00 	mov    QWORD PTR [rbp-0x8],0x1
  227cdd:	00 
  227cde:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  227ce2:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  227ce6:	e8 75 bc fe ff       	call   213960 <InStream(ReadError)_readNoEof>
  227ceb:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  227cef:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
  227cf4:	0f 85 4b ff ff ff    	jne    227c45 <InStream(ReadError)_readInt.101+0x45>
  227cfa:	e9 75 ff ff ff       	jmp    227c74 <InStream(ReadError)_readInt.101+0x74>
  227cff:	90                   	nop

0000000000227d00 <readInt.102>:
pub fn readInt(bytes: []const u8, comptime T: type, endian: builtin.Endian) T {
  227d00:	55                   	push   rbp
  227d01:	48 89 e5             	mov    rbp,rsp
  227d04:	48 83 ec 10          	sub    rsp,0x10
  227d08:	40 88 f0             	mov    al,sil
  227d0b:	31 f6                	xor    esi,esi
  227d0d:	89 f1                	mov    ecx,esi
  227d0f:	24 01                	and    al,0x1
  227d11:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
        return bytes[0];
  227d14:	48 3b 4f 08          	cmp    rcx,QWORD PTR [rdi+0x8]
  227d18:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  227d1c:	72 10                	jb     227d2e <readInt.102+0x2e>
  227d1e:	48 8d 3d b3 b6 01 00 	lea    rdi,[rip+0x1b6b3]        # 2433d8 <__unnamed_20>
  227d25:	31 c0                	xor    eax,eax
  227d27:	89 c6                	mov    esi,eax
  227d29:	e8 d2 38 fe ff       	call   20b600 <panic>
  227d2e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  227d32:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  227d35:	8a 01                	mov    al,BYTE PTR [rcx]
  227d37:	48 83 c4 10          	add    rsp,0x10
  227d3b:	5d                   	pop    rbp
  227d3c:	c3                   	ret    
  227d3d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000227d40 <Allocator_alignedAlloc.103>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  227d40:	55                   	push   rbp
  227d41:	48 89 e5             	mov    rbp,rsp
  227d44:	48 81 ec 20 01 00 00 	sub    rsp,0x120
  227d4b:	48 89 f8             	mov    rax,rdi
  227d4e:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  227d55:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  227d5c:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  227d63:	00 
  227d64:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  227d6b:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  227d72:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  227d79:	75 37                	jne    227db2 <Allocator_alignedAlloc.103+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  227d7b:	48 8b 05 86 29 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe2986]        # 20a708 <__unnamed_195>
  227d82:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  227d89:	48 89 01             	mov    QWORD PTR [rcx],rax
  227d8c:	48 8b 05 7d 29 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe297d]        # 20a710 <__unnamed_195+0x8>
  227d93:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  227d97:	48 8b 05 7a 29 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe297a]        # 20a718 <__unnamed_195+0x10>
  227d9e:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  227da2:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  227da9:	48 81 c4 20 01 00 00 	add    rsp,0x120
  227db0:	5d                   	pop    rbp
  227db1:	c3                   	ret    
        if (n == 0) {
  227db2:	eb 00                	jmp    227db4 <Allocator_alignedAlloc.103+0x74>
  227db4:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  227db8:	b8 30 00 00 00       	mov    eax,0x30
  227dbd:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  227dbf:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  227dc6:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  227dcd:	e8 de d5 fe ff       	call   2153b0 <mul>
  227dd2:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  227dd7:	74 43                	je     227e1c <Allocator_alignedAlloc.103+0xdc>
  227dd9:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  227de0:	e8 ab 3e fe ff       	call   20bc90 <__zig_return_error>
  227de5:	48 8b 3d 34 29 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe2934]        # 20a720 <__unnamed_196>
  227dec:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  227df3:	48 89 38             	mov    QWORD PTR [rax],rdi
  227df6:	48 8b 3d 2b 29 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe292b]        # 20a728 <__unnamed_196+0x8>
  227dfd:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  227e01:	48 8b 3d 28 29 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe2928]        # 20a730 <__unnamed_196+0x10>
  227e08:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  227e0c:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  227e13:	48 81 c4 20 01 00 00 	add    rsp,0x120
  227e1a:	5d                   	pop    rbp
  227e1b:	c3                   	ret    
  227e1c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  227e20:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  227e27:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  227e2b:	41 b8 08 00 00 00    	mov    r8d,0x8
  227e31:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  227e38:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  227e3f:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  227e46:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  227e49:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  227e50:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  227e57:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  227e5e:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  227e65:	4c 89 ce             	mov    rsi,r9
  227e68:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  227e6f:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  227e76:	4c 89 d1             	mov    rcx,r10
  227e79:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  227e80:	41 ff d3             	call   r11
  227e83:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  227e88:	74 50                	je     227eda <Allocator_alignedAlloc.103+0x19a>
  227e8a:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  227e8e:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  227e95:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  227e9c:	e8 ef 3d fe ff       	call   20bc90 <__zig_return_error>
  227ea1:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  227ea8:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  227eac:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  227eb0:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  227eb7:	48 89 39             	mov    QWORD PTR [rcx],rdi
  227eba:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  227ebe:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  227ec2:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  227ec6:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  227eca:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  227ed1:	48 81 c4 20 01 00 00 	add    rsp,0x120
  227ed8:	5d                   	pop    rbp
  227ed9:	c3                   	ret    
  227eda:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  227ede:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  227ee5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  227ee9:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  227ef0:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  227ef7:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  227efe:	0f 94 c1             	sete   cl
  227f01:	0f b6 f9             	movzx  edi,cl
  227f04:	e8 f7 30 fe ff       	call   20b000 <assert>
  227f09:	be aa 00 00 00       	mov    esi,0xaa
  227f0e:	bf 08 00 00 00       	mov    edi,0x8
  227f13:	89 fa                	mov    edx,edi
  227f15:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  227f1c:	48 89 c7             	mov    rdi,rax
  227f1f:	e8 2c c9 00 00       	call   234850 <memset>
  227f24:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  227f2b:	00 00 00 00 
  227f2f:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  227f36:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  227f3d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  227f44:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  227f4b:	48 39 c8             	cmp    rax,rcx
  227f4e:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  227f55:	73 32                	jae    227f89 <Allocator_alignedAlloc.103+0x249>
  227f57:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  227f5e:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  227f65:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  227f6c:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  227f73:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  227f75:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  227f7c:	48 83 c1 01          	add    rcx,0x1
  227f80:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  227f87:	eb b4                	jmp    227f3d <Allocator_alignedAlloc.103+0x1fd>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  227f89:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  227f90:	48 83 e0 07          	and    rax,0x7
  227f94:	48 83 f8 00          	cmp    rax,0x0
  227f98:	75 32                	jne    227fcc <Allocator_alignedAlloc.103+0x28c>
  227f9a:	b8 30 00 00 00       	mov    eax,0x30
  227f9f:	89 c1                	mov    ecx,eax
  227fa1:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
  227fa8:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
  227fac:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
  227fb3:	48 89 d0             	mov    rax,rdx
  227fb6:	31 f6                	xor    esi,esi
  227fb8:	48 89 95 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdx
  227fbf:	89 f2                	mov    edx,esi
  227fc1:	48 f7 f1             	div    rcx
  227fc4:	48 83 fa 00          	cmp    rdx,0x0
  227fc8:	74 12                	je     227fdc <Allocator_alignedAlloc.103+0x29c>
  227fca:	eb 77                	jmp    228043 <Allocator_alignedAlloc.103+0x303>
  227fcc:	48 8d 3d dd b5 01 00 	lea    rdi,[rip+0x1b5dd]        # 2435b0 <__unnamed_75>
  227fd3:	31 c0                	xor    eax,eax
  227fd5:	89 c6                	mov    esi,eax
  227fd7:	e8 24 36 fe ff       	call   20b600 <panic>
  227fdc:	b8 30 00 00 00       	mov    eax,0x30
  227fe1:	89 c1                	mov    ecx,eax
  227fe3:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  227fea:	31 d2                	xor    edx,edx
  227fec:	48 f7 f1             	div    rcx
  227fef:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  227ff3:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  227ffa:	00 00 
  227ffc:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  228000:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  228007:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  22800b:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  22800f:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  228016:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  22801d:	48 89 01             	mov    QWORD PTR [rcx],rax
  228020:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  228027:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  22802b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  22802f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  228033:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  22803a:	48 81 c4 20 01 00 00 	add    rsp,0x120
  228041:	5d                   	pop    rbp
  228042:	c3                   	ret    
  228043:	48 8d 3d 7e b5 01 00 	lea    rdi,[rip+0x1b57e]        # 2435c8 <__unnamed_76>
  22804a:	31 c0                	xor    eax,eax
  22804c:	89 c6                	mov    esi,eax
  22804e:	e8 ad 35 fe ff       	call   20b600 <panic>
  228053:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22805a:	84 00 00 00 00 00 

0000000000228060 <getEnvPosix>:
pub fn getEnvPosix(key: []const u8) ?[]const u8 {
  228060:	55                   	push   rbp
  228061:	48 89 e5             	mov    rbp,rsp
  228064:	48 81 ec 00 01 00 00 	sub    rsp,0x100
  22806b:	48 89 f8             	mov    rax,rdi
  22806e:	b9 aa 00 00 00       	mov    ecx,0xaa
  228073:	ba 08 00 00 00       	mov    edx,0x8
  228078:	4c 8d 45 c0          	lea    r8,[rbp-0x40]
    for (posix_environ_raw) |ptr| {
  22807c:	48 89 7d 80          	mov    QWORD PTR [rbp-0x80],rdi
  228080:	4c 89 c7             	mov    rdi,r8
  228083:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
  22808a:	89 ce                	mov    esi,ecx
  22808c:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  228093:	e8 b8 c7 00 00       	call   234850 <memset>
  228098:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
  22809f:	00 
  2280a0:	48 8b 05 01 40 01 00 	mov    rax,QWORD PTR [rip+0x14001]        # 23c0a8 <posix_environ_raw+0x8>
  2280a7:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  2280ae:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  2280b2:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  2280b9:	48 39 c8             	cmp    rax,rcx
  2280bc:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  2280c3:	0f 83 16 01 00 00    	jae    2281df <getEnvPosix+0x17f>
  2280c9:	48 8b 05 d0 3f 01 00 	mov    rax,QWORD PTR [rip+0x13fd0]        # 23c0a0 <posix_environ_raw>
  2280d0:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  2280d7:	48 8b 04 c8          	mov    rax,QWORD PTR [rax+rcx*8]
  2280db:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
        var line_i: usize = 0;
  2280df:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
  2280e6:	00 
        while (ptr[line_i] != 0 and ptr[line_i] != '=') : (line_i += 1) {}
  2280e7:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  2280eb:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  2280ef:	80 3c 01 00          	cmp    BYTE PTR [rcx+rax*1],0x0
  2280f3:	0f 95 c2             	setne  dl
  2280f6:	f6 c2 01             	test   dl,0x1
  2280f9:	88 95 5f ff ff ff    	mov    BYTE PTR [rbp-0xa1],dl
  2280ff:	75 02                	jne    228103 <getEnvPosix+0xa3>
  228101:	eb 15                	jmp    228118 <getEnvPosix+0xb8>
  228103:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  228107:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  22810b:	80 3c 01 3d          	cmp    BYTE PTR [rcx+rax*1],0x3d
  22810f:	0f 95 c2             	setne  dl
  228112:	88 95 5f ff ff ff    	mov    BYTE PTR [rbp-0xa1],dl
  228118:	8a 85 5f ff ff ff    	mov    al,BYTE PTR [rbp-0xa1]
  22811e:	a8 01                	test   al,0x1
  228120:	75 02                	jne    228124 <getEnvPosix+0xc4>
  228122:	eb 23                	jmp    228147 <getEnvPosix+0xe7>
  228124:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  228128:	48 83 c0 01          	add    rax,0x1
  22812c:	0f 92 c1             	setb   cl
  22812f:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
  228136:	88 8d 4f ff ff ff    	mov    BYTE PTR [rbp-0xb1],cl
  22813c:	0f 82 d1 00 00 00    	jb     228213 <getEnvPosix+0x1b3>
  228142:	e9 dc 00 00 00       	jmp    228223 <getEnvPosix+0x1c3>
  228147:	31 c0                	xor    eax,eax
  228149:	89 c1                	mov    ecx,eax
        const this_key = ptr[0..line_i];
  22814b:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  22814f:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
  228153:	48 39 d1             	cmp    rcx,rdx
  228156:	48 89 b5 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rsi
  22815d:	48 89 95 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdx
  228164:	0f 86 d9 00 00 00    	jbe    228243 <getEnvPosix+0x1e3>
  22816a:	e9 c4 00 00 00       	jmp    228233 <getEnvPosix+0x1d3>
    for (posix_environ_raw) |ptr| {
  22816f:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  228176:	48 83 c0 01          	add    rax,0x1
  22817a:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  22817e:	e9 2b ff ff ff       	jmp    2280ae <getEnvPosix+0x4e>
        var end_i: usize = line_i;
  228183:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  228187:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
        while (ptr[end_i] != 0) : (end_i += 1) {}
  22818b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  22818f:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  228193:	80 3c 01 00          	cmp    BYTE PTR [rcx+rax*1],0x0
  228197:	74 23                	je     2281bc <getEnvPosix+0x15c>
  228199:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  22819d:	48 83 c0 01          	add    rax,0x1
  2281a1:	0f 92 c1             	setb   cl
  2281a4:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  2281ab:	88 8d 2f ff ff ff    	mov    BYTE PTR [rbp-0xd1],cl
  2281b1:	0f 82 d1 00 00 00    	jb     228288 <getEnvPosix+0x228>
  2281b7:	e9 dc 00 00 00       	jmp    228298 <getEnvPosix+0x238>
        const this_value = ptr[line_i + 1 .. end_i];
  2281bc:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  2281c0:	48 83 c0 01          	add    rax,0x1
  2281c4:	0f 92 c1             	setb   cl
  2281c7:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
  2281ce:	88 8d 1f ff ff ff    	mov    BYTE PTR [rbp-0xe1],cl
  2281d4:	0f 82 ce 00 00 00    	jb     2282a8 <getEnvPosix+0x248>
  2281da:	e9 d9 00 00 00       	jmp    2282b8 <getEnvPosix+0x258>
    return null;
  2281df:	48 8b 05 fa 25 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe25fa]        # 20a7e0 <__unnamed_197>
  2281e6:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  2281ea:	48 89 01             	mov    QWORD PTR [rcx],rax
  2281ed:	48 8b 05 f4 25 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe25f4]        # 20a7e8 <__unnamed_197+0x8>
  2281f4:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  2281f8:	48 8b 05 f1 25 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe25f1]        # 20a7f0 <__unnamed_197+0x10>
  2281ff:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  228203:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  22820a:	48 81 c4 00 01 00 00 	add    rsp,0x100
  228211:	5d                   	pop    rbp
  228212:	c3                   	ret    
  228213:	48 8d 3d ae af 01 00 	lea    rdi,[rip+0x1afae]        # 2431c8 <__unnamed_4>
  22821a:	31 c0                	xor    eax,eax
  22821c:	89 c6                	mov    esi,eax
        while (ptr[line_i] != 0 and ptr[line_i] != '=') : (line_i += 1) {}
  22821e:	e8 dd 33 fe ff       	call   20b600 <panic>
  228223:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  22822a:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  22822e:	e9 b4 fe ff ff       	jmp    2280e7 <getEnvPosix+0x87>
  228233:	48 8d 3d 9e b1 01 00 	lea    rdi,[rip+0x1b19e]        # 2433d8 <__unnamed_20>
  22823a:	31 c0                	xor    eax,eax
  22823c:	89 c6                	mov    esi,eax
        const this_key = ptr[0..line_i];
  22823e:	e8 bd 33 fe ff       	call   20b600 <panic>
  228243:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  22824a:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  22824e:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
  228255:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  228259:	c5 fa 6f 45 f0       	vmovdqu xmm0,XMMWORD PTR [rbp-0x10]
  22825e:	c5 f9 7f 45 a0       	vmovdqa XMMWORD PTR [rbp-0x60],xmm0
  228263:	48 8d 75 a0          	lea    rsi,[rbp-0x60]
        if (!mem.eql(u8, key, this_key)) continue;
  228267:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  22826e:	e8 8d b7 fe ff       	call   213a00 <eql>
  228273:	88 c2                	mov    dl,al
  228275:	a8 01                	test   al,0x1
  228277:	88 95 1e ff ff ff    	mov    BYTE PTR [rbp-0xe2],dl
  22827d:	0f 84 ec fe ff ff    	je     22816f <getEnvPosix+0x10f>
  228283:	e9 fb fe ff ff       	jmp    228183 <getEnvPosix+0x123>
  228288:	48 8d 3d 39 af 01 00 	lea    rdi,[rip+0x1af39]        # 2431c8 <__unnamed_4>
  22828f:	31 c0                	xor    eax,eax
  228291:	89 c6                	mov    esi,eax
        while (ptr[end_i] != 0) : (end_i += 1) {}
  228293:	e8 68 33 fe ff       	call   20b600 <panic>
  228298:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  22829f:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  2282a3:	e9 e3 fe ff ff       	jmp    22818b <getEnvPosix+0x12b>
  2282a8:	48 8d 3d 19 af 01 00 	lea    rdi,[rip+0x1af19]        # 2431c8 <__unnamed_4>
  2282af:	31 c0                	xor    eax,eax
  2282b1:	89 c6                	mov    esi,eax
        const this_value = ptr[line_i + 1 .. end_i];
  2282b3:	e8 48 33 fe ff       	call   20b600 <panic>
  2282b8:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  2282bc:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  2282c0:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
  2282c7:	48 39 c2             	cmp    rdx,rax
  2282ca:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
  2282d1:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  2282d8:	76 10                	jbe    2282ea <getEnvPosix+0x28a>
  2282da:	48 8d 3d f7 b0 01 00 	lea    rdi,[rip+0x1b0f7]        # 2433d8 <__unnamed_20>
  2282e1:	31 c0                	xor    eax,eax
  2282e3:	89 c6                	mov    esi,eax
  2282e5:	e8 16 33 fe ff       	call   20b600 <panic>
  2282ea:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  2282f1:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  2282f8:	48 01 c8             	add    rax,rcx
  2282fb:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  2282ff:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  228306:	48 29 c8             	sub    rax,rcx
  228309:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  22830d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  228311:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  228315:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  228319:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
        return this_value;
  22831d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  228321:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  228325:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  228329:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  22832d:	c6 45 d8 01          	mov    BYTE PTR [rbp-0x28],0x1
  228331:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  228335:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
  228339:	48 89 02             	mov    QWORD PTR [rdx],rax
  22833c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  228340:	48 89 42 08          	mov    QWORD PTR [rdx+0x8],rax
  228344:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  228348:	48 89 42 10          	mov    QWORD PTR [rdx+0x10],rax
  22834c:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  228353:	48 81 c4 00 01 00 00 	add    rsp,0x100
  22835a:	5d                   	pop    rbp
  22835b:	c3                   	ret    
  22835c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000228360 <dupe>:
pub fn dupe(allocator: *Allocator, comptime T: type, m: []const T) ![]T {
  228360:	55                   	push   rbp
  228361:	48 89 e5             	mov    rbp,rsp
  228364:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  22836b:	48 89 f8             	mov    rax,rdi
  22836e:	4c 8d 45 e8          	lea    r8,[rbp-0x18]
  228372:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
    const new_buf = try allocator.alloc(T, m.len);
  228376:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  22837a:	4c 8b 49 08          	mov    r9,QWORD PTR [rcx+0x8]
  22837e:	48 89 7d 80          	mov    QWORD PTR [rbp-0x80],rdi
  228382:	4c 89 c7             	mov    rdi,r8
  228385:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
  22838c:	48 89 8d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rcx
  228393:	4c 89 c9             	mov    rcx,r9
  228396:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  22839d:	e8 9e a0 ff ff       	call   222440 <Allocator_alloc.74>
  2283a2:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  2283a7:	74 4d                	je     2283f6 <dupe+0x96>
  2283a9:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  2283ad:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  2283b4:	66 89 85 66 ff ff ff 	mov    WORD PTR [rbp-0x9a],ax
  2283bb:	e8 d0 38 fe ff       	call   20bc90 <__zig_return_error>
  2283c0:	66 8b 85 66 ff ff ff 	mov    ax,WORD PTR [rbp-0x9a]
  2283c7:	66 89 45 b8          	mov    WORD PTR [rbp-0x48],ax
  2283cb:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  2283cf:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  2283d3:	48 89 39             	mov    QWORD PTR [rcx],rdi
  2283d6:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  2283da:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  2283de:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2283e2:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  2283e6:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  2283ed:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  2283f4:	5d                   	pop    rbp
  2283f5:	c3                   	ret    
  2283f6:	48 8d 7d 88          	lea    rdi,[rbp-0x78]
  2283fa:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2283fe:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  228402:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  228406:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
    copy(T, new_buf, m);
  22840a:	48 8b b5 70 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x90]
  228411:	e8 ba c8 ff ff       	call   224cd0 <copy>
    return new_buf;
  228416:	66 c7 45 a0 00 00    	mov    WORD PTR [rbp-0x60],0x0
  22841c:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  228420:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  228424:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  228428:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  22842c:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  228430:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  228434:	48 89 06             	mov    QWORD PTR [rsi],rax
  228437:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  22843b:	48 89 46 08          	mov    QWORD PTR [rsi+0x8],rax
  22843f:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  228443:	48 89 46 10          	mov    QWORD PTR [rsi+0x10],rax
  228447:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  22844e:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  228455:	5d                   	pop    rbp
  228456:	c3                   	ret    
  228457:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  22845e:	00 00 

0000000000228460 <isTty>:
pub fn isTty(handle: FileHandle) bool {
  228460:	55                   	push   rbp
  228461:	48 89 e5             	mov    rbp,rsp
  228464:	48 83 ec 10          	sub    rsp,0x10
  228468:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
            return posix.isatty(handle);
  22846b:	8b 7d fc             	mov    edi,DWORD PTR [rbp-0x4]
  22846e:	e8 4d 0f 00 00       	call   2293c0 <isatty>
  228473:	88 c1                	mov    cl,al
  228475:	88 4d fb             	mov    BYTE PTR [rbp-0x5],cl
  228478:	48 83 c4 10          	add    rsp,0x10
  22847c:	5d                   	pop    rbp
  22847d:	c3                   	ret    
  22847e:	66 90                	xchg   ax,ax

0000000000228480 <formatValue.104>:
fn formatValue(
  228480:	55                   	push   rbp
  228481:	48 89 e5             	mov    rbp,rsp
  228484:	48 83 ec 30          	sub    rsp,0x30
  228488:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22848c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  228490:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
        builtin.TypeId.Int => return formatIntValue(value, fmt, context, Errors, output),
  228494:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  228498:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  22849c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2284a0:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2284a4:	e8 57 0f 00 00       	call   229400 <formatIntValue.112>
  2284a9:	66 83 f8 00          	cmp    ax,0x0
  2284ad:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  2284b1:	74 0b                	je     2284be <formatValue.104+0x3e>
  2284b3:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2284b7:	e8 d4 37 fe ff       	call   20bc90 <__zig_return_error>
  2284bc:	eb 02                	jmp    2284c0 <formatValue.104+0x40>
  2284be:	eb 00                	jmp    2284c0 <formatValue.104+0x40>
  2284c0:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  2284c4:	48 83 c4 30          	add    rsp,0x30
  2284c8:	5d                   	pop    rbp
  2284c9:	c3                   	ret    
  2284ca:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000002284d0 <formatValue.105>:
fn formatValue(
  2284d0:	55                   	push   rbp
  2284d1:	48 89 e5             	mov    rbp,rsp
  2284d4:	48 83 ec 30          	sub    rsp,0x30
  2284d8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2284dc:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  2284e0:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
        builtin.TypeId.Int => return formatIntValue(value, fmt, context, Errors, output),
  2284e4:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2284e8:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  2284ec:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2284f0:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2284f4:	e8 77 0f 00 00       	call   229470 <formatIntValue.113>
  2284f9:	66 83 f8 00          	cmp    ax,0x0
  2284fd:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  228501:	74 0b                	je     22850e <formatValue.105+0x3e>
  228503:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  228507:	e8 84 37 fe ff       	call   20bc90 <__zig_return_error>
  22850c:	eb 02                	jmp    228510 <formatValue.105+0x40>
  22850e:	eb 00                	jmp    228510 <formatValue.105+0x40>
  228510:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  228514:	48 83 c4 30          	add    rsp,0x30
  228518:	5d                   	pop    rbp
  228519:	c3                   	ret    
  22851a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000228520 <formatValue.106>:
fn formatValue(
  228520:	55                   	push   rbp
  228521:	48 89 e5             	mov    rbp,rsp
  228524:	48 83 ec 30          	sub    rsp,0x30
  228528:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22852c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  228530:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
        builtin.TypeId.Int => return formatIntValue(value, fmt, context, Errors, output),
  228534:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  228538:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  22853c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  228540:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  228544:	e8 97 0f 00 00       	call   2294e0 <formatIntValue.114>
  228549:	66 83 f8 00          	cmp    ax,0x0
  22854d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  228551:	74 0b                	je     22855e <formatValue.106+0x3e>
  228553:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  228557:	e8 34 37 fe ff       	call   20bc90 <__zig_return_error>
  22855c:	eb 02                	jmp    228560 <formatValue.106+0x40>
  22855e:	eb 00                	jmp    228560 <formatValue.106+0x40>
  228560:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  228564:	48 83 c4 30          	add    rsp,0x30
  228568:	5d                   	pop    rbp
  228569:	c3                   	ret    
  22856a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000228570 <formatValue.107>:
fn formatValue(
  228570:	55                   	push   rbp
  228571:	48 89 e5             	mov    rbp,rsp
  228574:	48 83 ec 30          	sub    rsp,0x30
  228578:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22857c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  228580:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
        builtin.TypeId.Int => return formatIntValue(value, fmt, context, Errors, output),
  228584:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  228588:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  22858c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  228590:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  228594:	e8 b7 0f 00 00       	call   229550 <formatIntValue.115>
  228599:	66 83 f8 00          	cmp    ax,0x0
  22859d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  2285a1:	74 0b                	je     2285ae <formatValue.107+0x3e>
  2285a3:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2285a7:	e8 e4 36 fe ff       	call   20bc90 <__zig_return_error>
  2285ac:	eb 02                	jmp    2285b0 <formatValue.107+0x40>
  2285ae:	eb 00                	jmp    2285b0 <formatValue.107+0x40>
  2285b0:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  2285b4:	48 83 c4 30          	add    rsp,0x30
  2285b8:	5d                   	pop    rbp
  2285b9:	c3                   	ret    
  2285ba:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000002285c0 <formatValue.108>:
fn formatValue(
  2285c0:	55                   	push   rbp
  2285c1:	48 89 e5             	mov    rbp,rsp
  2285c4:	48 83 ec 30          	sub    rsp,0x30
  2285c8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2285cc:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  2285d0:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
        builtin.TypeId.Int => return formatIntValue(value, fmt, context, Errors, output),
  2285d4:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2285d8:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  2285dc:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2285e0:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2285e4:	e8 d7 0f 00 00       	call   2295c0 <formatIntValue.116>
  2285e9:	66 83 f8 00          	cmp    ax,0x0
  2285ed:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  2285f1:	74 0b                	je     2285fe <formatValue.108+0x3e>
  2285f3:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2285f7:	e8 94 36 fe ff       	call   20bc90 <__zig_return_error>
  2285fc:	eb 02                	jmp    228600 <formatValue.108+0x40>
  2285fe:	eb 00                	jmp    228600 <formatValue.108+0x40>
  228600:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  228604:	48 83 c4 30          	add    rsp,0x30
  228608:	5d                   	pop    rbp
  228609:	c3                   	ret    
  22860a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000228610 <formatValue.109>:
fn formatValue(
  228610:	55                   	push   rbp
  228611:	48 89 e5             	mov    rbp,rsp
  228614:	48 83 ec 30          	sub    rsp,0x30
  228618:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22861c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  228620:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
        builtin.TypeId.Int => return formatIntValue(value, fmt, context, Errors, output),
  228624:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  228628:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  22862c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  228630:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  228634:	e8 f7 0f 00 00       	call   229630 <formatIntValue.117>
  228639:	66 83 f8 00          	cmp    ax,0x0
  22863d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  228641:	74 0b                	je     22864e <formatValue.109+0x3e>
  228643:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  228647:	e8 44 36 fe ff       	call   20bc90 <__zig_return_error>
  22864c:	eb 02                	jmp    228650 <formatValue.109+0x40>
  22864e:	eb 00                	jmp    228650 <formatValue.109+0x40>
  228650:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  228654:	48 83 c4 30          	add    rsp,0x30
  228658:	5d                   	pop    rbp
  228659:	c3                   	ret    
  22865a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000228660 <formatValue.110>:
fn formatValue(
  228660:	55                   	push   rbp
  228661:	48 89 e5             	mov    rbp,rsp
  228664:	48 83 ec 30          	sub    rsp,0x30
  228668:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22866c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  228670:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
        builtin.TypeId.Int => return formatIntValue(value, fmt, context, Errors, output),
  228674:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  228678:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  22867c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  228680:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  228684:	e8 17 10 00 00       	call   2296a0 <formatIntValue.118>
  228689:	66 83 f8 00          	cmp    ax,0x0
  22868d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  228691:	74 0b                	je     22869e <formatValue.110+0x3e>
  228693:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  228697:	e8 f4 35 fe ff       	call   20bc90 <__zig_return_error>
  22869c:	eb 02                	jmp    2286a0 <formatValue.110+0x40>
  22869e:	eb 00                	jmp    2286a0 <formatValue.110+0x40>
  2286a0:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  2286a4:	48 83 c4 30          	add    rsp,0x30
  2286a8:	5d                   	pop    rbp
  2286a9:	c3                   	ret    
  2286aa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000002286b0 <toSliceConst>:
pub fn toSliceConst(str: [*]const u8) []const u8 {
  2286b0:	55                   	push   rbp
  2286b1:	48 89 e5             	mov    rbp,rsp
  2286b4:	48 83 ec 40          	sub    rsp,0x40
  2286b8:	48 89 f8             	mov    rax,rdi
  2286bb:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
    return str[0..len(str)];
  2286bf:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  2286c3:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2286c7:	48 89 f7             	mov    rdi,rsi
  2286ca:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  2286ce:	e8 3d 10 00 00       	call   229710 <len>
  2286d3:	31 c9                	xor    ecx,ecx
  2286d5:	89 ce                	mov    esi,ecx
  2286d7:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  2286db:	48 39 c6             	cmp    rsi,rax
  2286de:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  2286e2:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  2286e6:	76 10                	jbe    2286f8 <toSliceConst+0x48>
  2286e8:	48 8d 3d e9 ac 01 00 	lea    rdi,[rip+0x1ace9]        # 2433d8 <__unnamed_20>
  2286ef:	31 c0                	xor    eax,eax
  2286f1:	89 c6                	mov    esi,eax
  2286f3:	e8 08 2f fe ff       	call   20b600 <panic>
  2286f8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2286fc:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  228700:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  228704:	48 83 e9 00          	sub    rcx,0x0
  228708:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  22870c:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  228710:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  228714:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  228717:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  22871b:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  22871f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  228723:	48 83 c4 40          	add    rsp,0x40
  228727:	5d                   	pop    rbp
  228728:	c3                   	ret    
  228729:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000228730 <checkver>:
}

fn checkver(def_arg: *elf.Verdef, vsym_arg: i32, vername: []const u8, strings: [*]u8) bool {
  228730:	55                   	push   rbp
  228731:	48 89 e5             	mov    rbp,rsp
  228734:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  22873b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  22873f:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
  228742:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
    var def = def_arg;
  228746:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22874a:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    const vsym = @bitCast(u32, vsym_arg) & 0x7fff;
  22874e:	8b 75 e4             	mov    esi,DWORD PTR [rbp-0x1c]
  228751:	81 e6 ff 7f 00 00    	and    esi,0x7fff
  228757:	89 75 cc             	mov    DWORD PTR [rbp-0x34],esi
  22875a:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
    while (true) {
  22875e:	eb 00                	jmp    228760 <checkver+0x30>
  228760:	31 c0                	xor    eax,eax
  228762:	66 89 c1             	mov    cx,ax
        if (0 == (def.vd_flags & elf.VER_FLG_BASE) and (def.vd_ndx & 0x7fff) == vsym)
  228765:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  228769:	66 8b 72 02          	mov    si,WORD PTR [rdx+0x2]
  22876d:	66 83 e6 01          	and    si,0x1
  228771:	66 39 f1             	cmp    cx,si
  228774:	40 0f 94 c7          	sete   dil
  228778:	40 f6 c7 01          	test   dil,0x1
  22877c:	40 88 7d b7          	mov    BYTE PTR [rbp-0x49],dil
  228780:	75 02                	jne    228784 <checkver+0x54>
  228782:	eb 1d                	jmp    2287a1 <checkver+0x71>
  228784:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  228788:	66 8b 48 04          	mov    cx,WORD PTR [rax+0x4]
  22878c:	66 81 e1 ff 7f       	and    cx,0x7fff
  228791:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
  228794:	0f b7 f1             	movzx  esi,cx
  228797:	39 d6                	cmp    esi,edx
  228799:	40 0f 94 c7          	sete   dil
  22879d:	40 88 7d b7          	mov    BYTE PTR [rbp-0x49],dil
  2287a1:	8a 45 b7             	mov    al,BYTE PTR [rbp-0x49]
  2287a4:	a8 01                	test   al,0x1
  2287a6:	75 02                	jne    2287aa <checkver+0x7a>
  2287a8:	eb 02                	jmp    2287ac <checkver+0x7c>
            break;
  2287aa:	eb 3b                	jmp    2287e7 <checkver+0xb7>
        if (0 == (def.vd_flags & elf.VER_FLG_BASE) and (def.vd_ndx & 0x7fff) == vsym)
  2287ac:	eb 00                	jmp    2287ae <checkver+0x7e>
        if (def.vd_next == 0)
  2287ae:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2287b2:	83 78 10 00          	cmp    DWORD PTR [rax+0x10],0x0
  2287b6:	75 0f                	jne    2287c7 <checkver+0x97>
            return false;
  2287b8:	31 c0                	xor    eax,eax
  2287ba:	88 c1                	mov    cl,al
  2287bc:	88 c8                	mov    al,cl
  2287be:	48 81 c4 80 00 00 00 	add    rsp,0x80
  2287c5:	5d                   	pop    rbp
  2287c6:	c3                   	ret    
        def = @intToPtr(*elf.Verdef, @ptrToInt(def) + def.vd_next);
  2287c7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2287cb:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  2287cf:	8b 51 10             	mov    edx,DWORD PTR [rcx+0x10]
  2287d2:	89 d1                	mov    ecx,edx
  2287d4:	48 01 c8             	add    rax,rcx
  2287d7:	40 0f 92 c6          	setb   sil
  2287db:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  2287df:	40 88 75 a7          	mov    BYTE PTR [rbp-0x59],sil
  2287e3:	72 22                	jb     228807 <checkver+0xd7>
  2287e5:	eb 30                	jmp    228817 <checkver+0xe7>
    }
    const aux = @intToPtr(*elf.Verdaux, @ptrToInt(def) + def.vd_aux);
  2287e7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2287eb:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  2287ef:	8b 51 0c             	mov    edx,DWORD PTR [rcx+0xc]
  2287f2:	89 d1                	mov    ecx,edx
  2287f4:	48 01 c8             	add    rax,rcx
  2287f7:	40 0f 92 c6          	setb   sil
  2287fb:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  2287ff:	40 88 75 97          	mov    BYTE PTR [rbp-0x69],sil
  228803:	72 1f                	jb     228824 <checkver+0xf4>
  228805:	eb 2d                	jmp    228834 <checkver+0x104>
  228807:	48 8d 3d ba a9 01 00 	lea    rdi,[rip+0x1a9ba]        # 2431c8 <__unnamed_4>
  22880e:	31 c0                	xor    eax,eax
  228810:	89 c6                	mov    esi,eax
        def = @intToPtr(*elf.Verdef, @ptrToInt(def) + def.vd_next);
  228812:	e8 e9 2d fe ff       	call   20b600 <panic>
  228817:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  22881b:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
    while (true) {
  22881f:	e9 3a ff ff ff       	jmp    22875e <checkver+0x2e>
  228824:	48 8d 3d 9d a9 01 00 	lea    rdi,[rip+0x1a99d]        # 2431c8 <__unnamed_4>
  22882b:	31 c0                	xor    eax,eax
  22882d:	89 c6                	mov    esi,eax
    const aux = @intToPtr(*elf.Verdaux, @ptrToInt(def) + def.vd_aux);
  22882f:	e8 cc 2d fe ff       	call   20b600 <panic>
  228834:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  228838:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
    return mem.eql(u8, vername, cstr.toSliceConst(strings + aux.vda_name));
  22883c:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  228840:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  228844:	8b 32                	mov    esi,DWORD PTR [rdx]
  228846:	89 f2                	mov    edx,esi
  228848:	48 01 d1             	add    rcx,rdx
  22884b:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
  22884f:	48 89 d7             	mov    rdi,rdx
  228852:	48 89 ce             	mov    rsi,rcx
  228855:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
  228859:	e8 52 fe ff ff       	call   2286b0 <toSliceConst>
  22885e:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  228862:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
  228866:	e8 95 b1 fe ff       	call   213a00 <eql>
  22886b:	41 88 c0             	mov    r8b,al
  22886e:	44 88 45 87          	mov    BYTE PTR [rbp-0x79],r8b
  228872:	48 81 c4 80 00 00 00 	add    rsp,0x80
  228879:	5d                   	pop    rbp
  22887a:	c3                   	ret    
  22887b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000228880 <formatIntValue>:
        else => unreachable,
    }
}

pub fn formatIntValue(
  228880:	55                   	push   rbp
  228881:	48 89 e5             	mov    rbp,rsp
  228884:	48 83 ec 40          	sub    rsp,0x40
  228888:	b8 0a 00 00 00       	mov    eax,0xa
  22888d:	45 31 c0             	xor    r8d,r8d
  228890:	45 31 c9             	xor    r9d,r9d
  228893:	45 89 ca             	mov    r10d,r9d
  228896:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22889a:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  22889e:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            },
            else => @compileError("Unknown format character: " ++ []u8{fmt[0]}),
        }
        if (fmt.len > 1) width = comptime (parseUnsigned(usize, fmt[1..], 10) catch unreachable);
    }
    return formatInt(value, radix, uppercase, width, context, Errors, output);
  2288a2:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2288a6:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
  2288aa:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2288ae:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2288b2:	89 c2                	mov    edx,eax
  2288b4:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  2288b8:	44 89 c1             	mov    ecx,r8d
  2288bb:	4d 89 d0             	mov    r8,r10
  2288be:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
  2288c2:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  2288c6:	e8 a5 0e 00 00       	call   229770 <formatInt>
  2288cb:	66 83 f8 00          	cmp    ax,0x0
  2288cf:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  2288d3:	74 0b                	je     2288e0 <formatIntValue+0x60>
  2288d5:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2288d9:	e8 b2 33 fe ff       	call   20bc90 <__zig_return_error>
  2288de:	eb 02                	jmp    2288e2 <formatIntValue+0x62>
  2288e0:	eb 00                	jmp    2288e2 <formatIntValue+0x62>
  2288e2:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  2288e6:	48 83 c4 40          	add    rsp,0x40
  2288ea:	5d                   	pop    rbp
  2288eb:	c3                   	ret    
  2288ec:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

00000000002288f0 <formatFloatValue>:
}

fn formatFloatValue(
  2288f0:	55                   	push   rbp
  2288f1:	48 89 e5             	mov    rbp,rsp
  2288f4:	48 83 ec 30          	sub    rsp,0x30
  2288f8:	48 8d 05 a1 7a fd ff 	lea    rax,[rip+0xfffffffffffd7aa1]        # 2003a0 <__unnamed_198>
  2288ff:	c5 fb 11 45 f0       	vmovsd QWORD PTR [rbp-0x10],xmm0
  228904:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
  228908:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
        if (fmt.len > 1) width = comptime (parseUnsigned(usize, fmt[1..], 10) catch unreachable);
    }

    switch (float_fmt) {
        'e' => try formatFloatScientific(value, width, context, Errors, output),
        '.' => try formatFloatDecimal(value, width, context, Errors, output),
  22890c:	c5 fb 10 45 f0       	vmovsd xmm0,QWORD PTR [rbp-0x10]
  228911:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  228915:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  228919:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  22891d:	48 89 c6             	mov    rsi,rax
  228920:	e8 cb 0e 00 00       	call   2297f0 <formatFloatDecimal>
  228925:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  228929:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  22892e:	74 1b                	je     22894b <formatFloatValue+0x5b>
  228930:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  228934:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  228938:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  22893c:	e8 4f 33 fe ff       	call   20bc90 <__zig_return_error>
  228941:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  228945:	48 83 c4 30          	add    rsp,0x30
  228949:	5d                   	pop    rbp
  22894a:	c3                   	ret    
  22894b:	31 c0                	xor    eax,eax
  22894d:	66 89 c1             	mov    cx,ax
) Errors!void {
  228950:	66 89 c8             	mov    ax,cx
  228953:	48 83 c4 30          	add    rsp,0x30
  228957:	5d                   	pop    rbp
  228958:	c3                   	ret    
  228959:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000228960 <ArenaAllocator_createNode>:
    fn createNode(self: *ArenaAllocator, prev_len: usize, minimum_size: usize) !*BufNode {
  228960:	55                   	push   rbp
  228961:	48 89 e5             	mov    rbp,rsp
  228964:	48 81 ec 70 01 00 00 	sub    rsp,0x170
  22896b:	48 89 f8             	mov    rax,rdi
  22896e:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  228975:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
  22897c:	4c 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],r8
        const actual_min_size = minimum_size + @sizeOf(BufNode);
  228983:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  22898a:	48 83 c1 20          	add    rcx,0x20
  22898e:	41 0f 92 c1          	setb   r9b
  228992:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  228999:	48 89 bd 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdi
  2289a0:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
  2289a7:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  2289ae:	44 88 8d ff fe ff ff 	mov    BYTE PTR [rbp-0x101],r9b
  2289b5:	0f 82 dd 00 00 00    	jb     228a98 <ArenaAllocator_createNode+0x138>
  2289bb:	e9 e8 00 00 00       	jmp    228aa8 <ArenaAllocator_createNode+0x148>
        while (true) {
  2289c0:	eb 00                	jmp    2289c2 <ArenaAllocator_createNode+0x62>
  2289c2:	31 c0                	xor    eax,eax
  2289c4:	88 c1                	mov    cl,al
            len += len / 2;
  2289c6:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
  2289cd:	48 8b b5 48 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xb8]
  2289d4:	f6 c1 01             	test   cl,0x1
  2289d7:	48 89 b5 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rsi
  2289de:	48 89 95 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdx
  2289e5:	0f 85 07 01 00 00    	jne    228af2 <ArenaAllocator_createNode+0x192>
  2289eb:	e9 d9 00 00 00       	jmp    228ac9 <ArenaAllocator_createNode+0x169>
            if (len >= actual_min_size) break;
  2289f0:	eb 02                	jmp    2289f4 <ArenaAllocator_createNode+0x94>
        while (true) {
  2289f2:	eb cc                	jmp    2289c0 <ArenaAllocator_createNode+0x60>
  2289f4:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
        const buf = try self.child_allocator.alignedAlloc(u8, @alignOf(BufNode), len);
  2289f8:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  2289ff:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
  228a03:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
  228a0a:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
  228a11:	e8 5a 03 00 00       	call   228d70 <Allocator_alignedAlloc.111>
  228a16:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
  228a1b:	74 48                	je     228a65 <ArenaAllocator_createNode+0x105>
  228a1d:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
  228a21:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
  228a28:	66 89 85 e6 fe ff ff 	mov    WORD PTR [rbp-0x11a],ax
  228a2f:	e8 5c 32 fe ff       	call   20bc90 <__zig_return_error>
  228a34:	66 8b 85 e6 fe ff ff 	mov    ax,WORD PTR [rbp-0x11a]
  228a3b:	66 89 45 c0          	mov    WORD PTR [rbp-0x40],ax
  228a3f:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
  228a43:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  228a4a:	48 89 39             	mov    QWORD PTR [rcx],rdi
  228a4d:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  228a51:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  228a55:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  228a5c:	48 81 c4 70 01 00 00 	add    rsp,0x170
  228a63:	5d                   	pop    rbp
  228a64:	c3                   	ret    
  228a65:	b0 01                	mov    al,0x1
  228a67:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  228a6b:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  228a72:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  228a76:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
        const buf_node_slice = @bytesToSlice(BufNode, buf[0..@sizeOf(BufNode)]);
  228a7d:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  228a84:	a8 01                	test   al,0x1
  228a86:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
  228a8d:	0f 85 6c 01 00 00    	jne    228bff <ArenaAllocator_createNode+0x29f>
  228a93:	e9 57 01 00 00       	jmp    228bef <ArenaAllocator_createNode+0x28f>
  228a98:	48 8d 3d 29 a7 01 00 	lea    rdi,[rip+0x1a729]        # 2431c8 <__unnamed_4>
  228a9f:	31 c0                	xor    eax,eax
  228aa1:	89 c6                	mov    esi,eax
        const actual_min_size = minimum_size + @sizeOf(BufNode);
  228aa3:	e8 58 2b fe ff       	call   20b600 <panic>
  228aa8:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  228aaf:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        var len = prev_len;
  228ab6:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  228abd:	48 89 8d 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rcx
        while (true) {
  228ac4:	e9 f7 fe ff ff       	jmp    2289c0 <ArenaAllocator_createNode+0x60>
            len += len / 2;
  228ac9:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  228ad0:	48 c1 e8 01          	shr    rax,0x1
  228ad4:	48 8b 8d e8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x118]
  228adb:	48 01 c1             	add    rcx,rax
  228ade:	0f 92 c2             	setb   dl
  228ae1:	48 89 8d d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rcx
  228ae8:	88 95 cf fe ff ff    	mov    BYTE PTR [rbp-0x131],dl
  228aee:	72 12                	jb     228b02 <ArenaAllocator_createNode+0x1a2>
  228af0:	eb 20                	jmp    228b12 <ArenaAllocator_createNode+0x1b2>
  228af2:	48 8d 3d 47 a7 01 00 	lea    rdi,[rip+0x1a747]        # 243240 <__unnamed_7>
  228af9:	31 c0                	xor    eax,eax
  228afb:	89 c6                	mov    esi,eax
  228afd:	e8 fe 2a fe ff       	call   20b600 <panic>
  228b02:	48 8d 3d bf a6 01 00 	lea    rdi,[rip+0x1a6bf]        # 2431c8 <__unnamed_4>
  228b09:	31 c0                	xor    eax,eax
  228b0b:	89 c6                	mov    esi,eax
  228b0d:	e8 ee 2a fe ff       	call   20b600 <panic>
  228b12:	31 c0                	xor    eax,eax
  228b14:	88 c1                	mov    cl,al
  228b16:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
  228b1d:	48 89 95 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdx
            len += os.page_size - @rem(len, os.page_size);
  228b24:	48 8b b5 48 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xb8]
  228b2b:	48 8b bd 48 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb8]
  228b32:	f6 c1 01             	test   cl,0x1
  228b35:	48 89 bd c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rdi
  228b3c:	48 89 b5 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rsi
  228b43:	75 2e                	jne    228b73 <ArenaAllocator_createNode+0x213>
  228b45:	b8 00 10 00 00       	mov    eax,0x1000
  228b4a:	89 c1                	mov    ecx,eax
  228b4c:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  228b53:	48 81 e2 ff 0f 00 00 	and    rdx,0xfff
  228b5a:	48 29 d1             	sub    rcx,rdx
  228b5d:	40 0f 92 c6          	setb   sil
  228b61:	48 89 8d b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rcx
  228b68:	40 88 b5 af fe ff ff 	mov    BYTE PTR [rbp-0x151],sil
  228b6f:	72 12                	jb     228b83 <ArenaAllocator_createNode+0x223>
  228b71:	eb 20                	jmp    228b93 <ArenaAllocator_createNode+0x233>
  228b73:	48 8d 3d 6e a7 01 00 	lea    rdi,[rip+0x1a76e]        # 2432e8 <__unnamed_15>
  228b7a:	31 c0                	xor    eax,eax
  228b7c:	89 c6                	mov    esi,eax
  228b7e:	e8 7d 2a fe ff       	call   20b600 <panic>
  228b83:	48 8d 3d 3e a6 01 00 	lea    rdi,[rip+0x1a63e]        # 2431c8 <__unnamed_4>
  228b8a:	31 c0                	xor    eax,eax
  228b8c:	89 c6                	mov    esi,eax
  228b8e:	e8 6d 2a fe ff       	call   20b600 <panic>
  228b93:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  228b9a:	48 8b 8d b0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x150]
  228ba1:	48 01 c8             	add    rax,rcx
  228ba4:	0f 92 c2             	setb   dl
  228ba7:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
  228bae:	88 95 9f fe ff ff    	mov    BYTE PTR [rbp-0x161],dl
  228bb4:	72 02                	jb     228bb8 <ArenaAllocator_createNode+0x258>
  228bb6:	eb 10                	jmp    228bc8 <ArenaAllocator_createNode+0x268>
  228bb8:	48 8d 3d 09 a6 01 00 	lea    rdi,[rip+0x1a609]        # 2431c8 <__unnamed_4>
  228bbf:	31 c0                	xor    eax,eax
  228bc1:	89 c6                	mov    esi,eax
  228bc3:	e8 38 2a fe ff       	call   20b600 <panic>
  228bc8:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
  228bcf:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
            if (len >= actual_min_size) break;
  228bd6:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
  228bdd:	48 3b 8d 50 ff ff ff 	cmp    rcx,QWORD PTR [rbp-0xb0]
  228be4:	0f 83 06 fe ff ff    	jae    2289f0 <ArenaAllocator_createNode+0x90>
  228bea:	e9 03 fe ff ff       	jmp    2289f2 <ArenaAllocator_createNode+0x92>
  228bef:	48 8d 3d e2 a7 01 00 	lea    rdi,[rip+0x1a7e2]        # 2433d8 <__unnamed_20>
  228bf6:	31 c0                	xor    eax,eax
  228bf8:	89 c6                	mov    esi,eax
        const buf_node_slice = @bytesToSlice(BufNode, buf[0..@sizeOf(BufNode)]);
  228bfa:	e8 01 2a fe ff       	call   20b600 <panic>
  228bff:	b8 20 00 00 00       	mov    eax,0x20
  228c04:	89 c1                	mov    ecx,eax
  228c06:	48 8b 95 d8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x128]
  228c0d:	48 39 d1             	cmp    rcx,rdx
  228c10:	76 10                	jbe    228c22 <ArenaAllocator_createNode+0x2c2>
  228c12:	48 8d 3d bf a7 01 00 	lea    rdi,[rip+0x1a7bf]        # 2433d8 <__unnamed_20>
  228c19:	31 c0                	xor    eax,eax
  228c1b:	89 c6                	mov    esi,eax
  228c1d:	e8 de 29 fe ff       	call   20b600 <panic>
  228c22:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  228c29:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  228c2d:	48 c7 45 b8 20 00 00 	mov    QWORD PTR [rbp-0x48],0x20
  228c34:	00 
  228c35:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  228c39:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  228c3d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  228c41:	48 89 c1             	mov    rcx,rax
  228c44:	48 83 e1 1f          	and    rcx,0x1f
  228c48:	48 83 f9 00          	cmp    rcx,0x0
  228c4c:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  228c53:	75 34                	jne    228c89 <ArenaAllocator_createNode+0x329>
  228c55:	31 c0                	xor    eax,eax
  228c57:	89 c1                	mov    ecx,eax
  228c59:	48 8b 95 90 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x170]
  228c60:	48 c1 ea 05          	shr    rdx,0x5
  228c64:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
  228c68:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  228c6c:	48 89 95 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rdx
  228c73:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  228c77:	48 89 95 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rdx
        const buf_node = &buf_node_slice[0];
  228c7e:	48 3b 8d 30 ff ff ff 	cmp    rcx,QWORD PTR [rbp-0xd0]
  228c85:	72 22                	jb     228ca9 <ArenaAllocator_createNode+0x349>
  228c87:	eb 10                	jmp    228c99 <ArenaAllocator_createNode+0x339>
  228c89:	48 8d 3d 38 a9 01 00 	lea    rdi,[rip+0x1a938]        # 2435c8 <__unnamed_76>
  228c90:	31 c0                	xor    eax,eax
  228c92:	89 c6                	mov    esi,eax
        const buf_node_slice = @bytesToSlice(BufNode, buf[0..@sizeOf(BufNode)]);
  228c94:	e8 67 29 fe ff       	call   20b600 <panic>
  228c99:	48 8d 3d 38 a7 01 00 	lea    rdi,[rip+0x1a738]        # 2433d8 <__unnamed_20>
  228ca0:	31 c0                	xor    eax,eax
  228ca2:	89 c6                	mov    esi,eax
        const buf_node = &buf_node_slice[0];
  228ca4:	e8 57 29 fe ff       	call   20b600 <panic>
  228ca9:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  228cb0:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
        buf_node.* = BufNode{
  228cb7:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  228cbe:	48 c7 45 80 00 00 00 	mov    QWORD PTR [rbp-0x80],0x0
  228cc5:	00 
  228cc6:	48 c7 45 88 00 00 00 	mov    QWORD PTR [rbp-0x78],0x0
  228ccd:	00 
  228cce:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
  228cd5:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
  228cd9:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  228ce0:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
  228ce4:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  228ce8:	48 89 08             	mov    QWORD PTR [rax],rcx
  228ceb:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  228cef:	48 89 48 08          	mov    QWORD PTR [rax+0x8],rcx
  228cf3:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  228cf7:	48 89 48 10          	mov    QWORD PTR [rax+0x10],rcx
  228cfb:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  228cff:	48 89 48 18          	mov    QWORD PTR [rax+0x18],rcx
        self.buffer_list.append(buf_node);
  228d03:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  228d0a:	48 83 c0 20          	add    rax,0x20
  228d0e:	48 8b b5 20 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe0]
  228d15:	48 89 c7             	mov    rdi,rax
  228d18:	e8 33 03 00 00       	call   229050 <BaseLinkedList([]u8,void,(struct []const u8 constant))_append>
        self.end_index = 0;
  228d1d:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  228d24:	48 c7 40 38 00 00 00 	mov    QWORD PTR [rax+0x38],0x0
  228d2b:	00 
        return buf_node;
  228d2c:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  228d33:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  228d3a:	00 00 
  228d3c:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  228d43:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  228d4a:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
  228d51:	48 89 01             	mov    QWORD PTR [rcx],rax
  228d54:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  228d5b:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  228d5f:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  228d66:	48 81 c4 70 01 00 00 	add    rsp,0x170
  228d6d:	5d                   	pop    rbp
  228d6e:	c3                   	ret    
  228d6f:	90                   	nop

0000000000228d70 <Allocator_alignedAlloc.111>:
    pub fn alignedAlloc(self: *Allocator, comptime T: type, comptime alignment: u29, n: usize) ![]align(alignment) T {
  228d70:	55                   	push   rbp
  228d71:	48 89 e5             	mov    rbp,rsp
  228d74:	48 81 ec 10 01 00 00 	sub    rsp,0x110
  228d7b:	48 89 f8             	mov    rax,rdi
  228d7e:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  228d85:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
        if (n == 0) {
  228d8c:	48 83 bd 60 ff ff ff 	cmp    QWORD PTR [rbp-0xa0],0x0
  228d93:	00 
  228d94:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  228d9b:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  228da2:	48 89 bd 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdi
  228da9:	75 37                	jne    228de2 <Allocator_alignedAlloc.111+0x72>
            return ([*]align(alignment) T)(undefined)[0..0];
  228dab:	48 8b 05 ce 19 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe19ce]        # 20a780 <__unnamed_199>
  228db2:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  228db9:	48 89 01             	mov    QWORD PTR [rcx],rax
  228dbc:	48 8b 05 c5 19 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe19c5]        # 20a788 <__unnamed_199+0x8>
  228dc3:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  228dc7:	48 8b 05 c2 19 fe ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe19c2]        # 20a790 <__unnamed_199+0x10>
  228dce:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  228dd2:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  228dd9:	48 81 c4 10 01 00 00 	add    rsp,0x110
  228de0:	5d                   	pop    rbp
  228de1:	c3                   	ret    
        if (n == 0) {
  228de2:	eb 00                	jmp    228de4 <Allocator_alignedAlloc.111+0x74>
  228de4:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  228de8:	b8 01 00 00 00       	mov    eax,0x1
  228ded:	89 c2                	mov    edx,eax
        const byte_count = math.mul(usize, @sizeOf(T), n) catch return Error.OutOfMemory;
  228def:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  228df6:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  228dfd:	e8 ae c5 fe ff       	call   2153b0 <mul>
  228e02:	66 83 7d f0 00       	cmp    WORD PTR [rbp-0x10],0x0
  228e07:	74 43                	je     228e4c <Allocator_alignedAlloc.111+0xdc>
  228e09:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  228e10:	e8 7b 2e fe ff       	call   20bc90 <__zig_return_error>
  228e15:	48 8b 3d 7c 19 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe197c]        # 20a798 <__unnamed_200>
  228e1c:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  228e23:	48 89 38             	mov    QWORD PTR [rax],rdi
  228e26:	48 8b 3d 73 19 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe1973]        # 20a7a0 <__unnamed_200+0x8>
  228e2d:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
  228e31:	48 8b 3d 70 19 fe ff 	mov    rdi,QWORD PTR [rip+0xfffffffffffe1970]        # 20a7a8 <__unnamed_200+0x10>
  228e38:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
  228e3c:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  228e43:	48 81 c4 10 01 00 00 	add    rsp,0x110
  228e4a:	5d                   	pop    rbp
  228e4b:	c3                   	ret    
  228e4c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  228e50:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  228e57:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  228e5b:	41 b8 08 00 00 00    	mov    r8d,0x8
  228e61:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  228e68:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        const byte_slice = try self.allocFn(self, byte_count, alignment);
  228e6f:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  228e76:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  228e79:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  228e80:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  228e87:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  228e8e:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
  228e95:	4c 89 ce             	mov    rsi,r9
  228e98:	4c 8b 95 10 ff ff ff 	mov    r10,QWORD PTR [rbp-0xf0]
  228e9f:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  228ea6:	4c 89 d1             	mov    rcx,r10
  228ea9:	4c 8b 9d 08 ff ff ff 	mov    r11,QWORD PTR [rbp-0xf8]
  228eb0:	41 ff d3             	call   r11
  228eb3:	66 83 7d c8 00       	cmp    WORD PTR [rbp-0x38],0x0
  228eb8:	74 50                	je     228f0a <Allocator_alignedAlloc.111+0x19a>
  228eba:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  228ebe:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  228ec5:	66 89 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],ax
  228ecc:	e8 bf 2d fe ff       	call   20bc90 <__zig_return_error>
  228ed1:	66 8b 85 06 ff ff ff 	mov    ax,WORD PTR [rbp-0xfa]
  228ed8:	66 89 45 98          	mov    WORD PTR [rbp-0x68],ax
  228edc:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
  228ee0:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  228ee7:	48 89 39             	mov    QWORD PTR [rcx],rdi
  228eea:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  228eee:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
  228ef2:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  228ef6:	48 89 79 10          	mov    QWORD PTR [rcx+0x10],rdi
  228efa:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  228f01:	48 81 c4 10 01 00 00 	add    rsp,0x110
  228f08:	5d                   	pop    rbp
  228f09:	c3                   	ret    
  228f0a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  228f0e:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  228f15:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  228f19:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
        assert(byte_slice.len == byte_count);
  228f20:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  228f27:	48 3b 85 58 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xa8]
  228f2e:	0f 94 c1             	sete   cl
  228f31:	0f b6 f9             	movzx  edi,cl
  228f34:	e8 c7 20 fe ff       	call   20b000 <assert>
  228f39:	be aa 00 00 00       	mov    esi,0xaa
  228f3e:	bf 08 00 00 00       	mov    edi,0x8
  228f43:	89 fa                	mov    edx,edi
  228f45:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
        for (byte_slice) |*byte| {
  228f4c:	48 89 c7             	mov    rdi,rax
  228f4f:	e8 fc b8 00 00       	call   234850 <memset>
  228f54:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  228f5b:	00 00 00 00 
  228f5f:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  228f66:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  228f6d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  228f74:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
  228f7b:	48 39 c8             	cmp    rax,rcx
  228f7e:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  228f85:	73 32                	jae    228fb9 <Allocator_alignedAlloc.111+0x249>
  228f87:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  228f8e:	48 03 8d 48 ff ff ff 	add    rcx,QWORD PTR [rbp-0xb8]
  228f95:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
            byte.* = undefined;
  228f9c:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  228fa3:	88 01                	mov    BYTE PTR [rcx],al
        for (byte_slice) |*byte| {
  228fa5:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  228fac:	48 83 c1 01          	add    rcx,0x1
  228fb0:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  228fb7:	eb b4                	jmp    228f6d <Allocator_alignedAlloc.111+0x1fd>
        return @bytesToSlice(T, @alignCast(alignment, byte_slice));
  228fb9:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  228fc0:	48 83 e0 07          	and    rax,0x7
  228fc4:	48 83 f8 00          	cmp    rax,0x0
  228fc8:	75 6a                	jne    229034 <Allocator_alignedAlloc.111+0x2c4>
  228fca:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  228fd1:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  228fd5:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  228fdc:	48 c1 e0 00          	shl    rax,0x0
  228fe0:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  228fe4:	66 c7 85 70 ff ff ff 	mov    WORD PTR [rbp-0x90],0x0
  228feb:	00 00 
  228fed:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  228ff1:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  228ff8:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  228ffc:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  229000:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  229007:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
  22900e:	48 89 01             	mov    QWORD PTR [rcx],rax
  229011:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  229018:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  22901c:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  229020:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  229024:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  22902b:	48 81 c4 10 01 00 00 	add    rsp,0x110
  229032:	5d                   	pop    rbp
  229033:	c3                   	ret    
  229034:	48 8d 3d 75 a5 01 00 	lea    rdi,[rip+0x1a575]        # 2435b0 <__unnamed_75>
  22903b:	31 c0                	xor    eax,eax
  22903d:	89 c6                	mov    esi,eax
  22903f:	e8 bc 25 fe ff       	call   20b600 <panic>
  229044:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22904b:	00 00 00 00 00 

0000000000229050 <BaseLinkedList([]u8,void,(struct []const u8 constant))_append>:
        pub fn append(list: *Self, new_node: *Node) void {
  229050:	55                   	push   rbp
  229051:	48 89 e5             	mov    rbp,rsp
  229054:	48 83 ec 20          	sub    rsp,0x20
  229058:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  22905c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
            if (list.last) |last| {
  229060:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  229064:	48 89 f7             	mov    rdi,rsi
  229067:	48 83 c7 08          	add    rdi,0x8
  22906b:	48 83 7e 08 00       	cmp    QWORD PTR [rsi+0x8],0x0
  229070:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  229074:	74 1e                	je     229094 <BaseLinkedList([]u8,void,(struct []const u8 constant))_append+0x44>
  229076:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  22907a:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22907d:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
                list.insertAfter(last, new_node);
  229081:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  229085:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  229089:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  22908d:	e8 1e 00 00 00       	call   2290b0 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertAfter>
            if (list.last) |last| {
  229092:	eb 0d                	jmp    2290a1 <BaseLinkedList([]u8,void,(struct []const u8 constant))_append+0x51>
                list.prepend(new_node);
  229094:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  229098:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  22909c:	e8 df 00 00 00       	call   229180 <BaseLinkedList([]u8,void,(struct []const u8 constant))_prepend>
        pub fn append(list: *Self, new_node: *Node) void {
  2290a1:	48 83 c4 20          	add    rsp,0x20
  2290a5:	5d                   	pop    rbp
  2290a6:	c3                   	ret    
  2290a7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  2290ae:	00 00 

00000000002290b0 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertAfter>:
        pub fn insertAfter(list: *Self, node: *Node, new_node: *Node) void {
  2290b0:	55                   	push   rbp
  2290b1:	48 89 e5             	mov    rbp,rsp
  2290b4:	48 83 ec 40          	sub    rsp,0x40
  2290b8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  2290bc:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  2290c0:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
            new_node.prev = node;
  2290c4:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  2290c8:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  2290cc:	48 89 32             	mov    QWORD PTR [rdx],rsi
            if (node.next) |next_node| {
  2290cf:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  2290d3:	48 89 d6             	mov    rsi,rdx
  2290d6:	48 83 c6 08          	add    rsi,0x8
  2290da:	48 83 7a 08 00       	cmp    QWORD PTR [rdx+0x8],0x0
  2290df:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  2290e3:	74 24                	je     229109 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertAfter+0x59>
  2290e5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2290e9:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  2290ec:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
                new_node.next = next_node;
  2290f0:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2290f4:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  2290f8:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
                next_node.prev = new_node;
  2290fc:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  229100:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  229104:	48 89 11             	mov    QWORD PTR [rcx],rdx
            if (node.next) |next_node| {
  229107:	eb 18                	jmp    229121 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertAfter+0x71>
                new_node.next = null;
  229109:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22910d:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
  229114:	00 
                list.last = new_node;
  229115:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  229119:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22911d:	48 89 48 08          	mov    QWORD PTR [rax+0x8],rcx
            node.next = new_node;
  229121:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  229125:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  229129:	48 89 48 08          	mov    QWORD PTR [rax+0x8],rcx
            list.len += 1;
  22912d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  229131:	48 89 c1             	mov    rcx,rax
  229134:	48 83 c1 10          	add    rcx,0x10
  229138:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  22913c:	48 83 c0 01          	add    rax,0x1
  229140:	0f 92 c2             	setb   dl
  229143:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  229147:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  22914b:	88 55 c7             	mov    BYTE PTR [rbp-0x39],dl
  22914e:	72 02                	jb     229152 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertAfter+0xa2>
  229150:	eb 10                	jmp    229162 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertAfter+0xb2>
  229152:	48 8d 3d 6f a0 01 00 	lea    rdi,[rip+0x1a06f]        # 2431c8 <__unnamed_4>
  229159:	31 c0                	xor    eax,eax
  22915b:	89 c6                	mov    esi,eax
  22915d:	e8 9e 24 fe ff       	call   20b600 <panic>
  229162:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  229166:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  22916a:	48 89 08             	mov    QWORD PTR [rax],rcx
        pub fn insertAfter(list: *Self, node: *Node, new_node: *Node) void {
  22916d:	48 83 c4 40          	add    rsp,0x40
  229171:	5d                   	pop    rbp
  229172:	c3                   	ret    
  229173:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22917a:	84 00 00 00 00 00 

0000000000229180 <BaseLinkedList([]u8,void,(struct []const u8 constant))_prepend>:
        pub fn prepend(list: *Self, new_node: *Node) void {
  229180:	55                   	push   rbp
  229181:	48 89 e5             	mov    rbp,rsp
  229184:	48 83 ec 20          	sub    rsp,0x20
  229188:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  22918c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
            if (list.first) |first| {
  229190:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  229194:	48 83 3e 00          	cmp    QWORD PTR [rsi],0x0
  229198:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  22919c:	74 1e                	je     2291bc <BaseLinkedList([]u8,void,(struct []const u8 constant))_prepend+0x3c>
  22919e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2291a2:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  2291a5:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
                list.insertBefore(first, new_node);
  2291a9:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  2291ad:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  2291b1:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  2291b5:	e8 16 19 00 00       	call   22aad0 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertBefore>
            if (list.first) |first| {
  2291ba:	eb 3a                	jmp    2291f6 <BaseLinkedList([]u8,void,(struct []const u8 constant))_prepend+0x76>
                list.first = new_node;
  2291bc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2291c0:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  2291c4:	48 89 08             	mov    QWORD PTR [rax],rcx
                list.last = new_node;
  2291c7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2291cb:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  2291cf:	48 89 48 08          	mov    QWORD PTR [rax+0x8],rcx
                new_node.prev = null;
  2291d3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2291d7:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
                new_node.next = null;
  2291de:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2291e2:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
  2291e9:	00 
                list.len = 1;
  2291ea:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2291ee:	48 c7 40 10 01 00 00 	mov    QWORD PTR [rax+0x10],0x1
  2291f5:	00 
        pub fn prepend(list: *Self, new_node: *Node) void {
  2291f6:	48 83 c4 20          	add    rsp,0x20
  2291fa:	5d                   	pop    rbp
  2291fb:	c3                   	ret    
  2291fc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000229200 <open>:
pub fn open(path: [*]const u8, flags: u32, perm: usize) usize {
  229200:	55                   	push   rbp
  229201:	48 89 e5             	mov    rbp,rsp
  229204:	48 83 ec 30          	sub    rsp,0x30
  229208:	b8 02 00 00 00       	mov    eax,0x2
  22920d:	89 c1                	mov    ecx,eax
  22920f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  229213:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
  229216:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    return syscall3(SYS_open, @ptrToInt(path), flags, perm);
  22921a:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  22921e:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  229221:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  229225:	89 c0                	mov    eax,eax
  229227:	89 c7                	mov    edi,eax
  229229:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  22922d:	48 89 cf             	mov    rdi,rcx
  229230:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  229234:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  229238:	48 89 ca             	mov    rdx,rcx
  22923b:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  22923f:	e8 6c b6 fe ff       	call   2148b0 <syscall3>
  229244:	48 83 c4 30          	add    rsp,0x30
  229248:	5d                   	pop    rbp
  229249:	c3                   	ret    
  22924a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000229250 <syscall1>:
pub fn syscall1(number: usize, arg1: usize) usize {
  229250:	55                   	push   rbp
  229251:	48 89 e5             	mov    rbp,rsp
  229254:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  229258:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
        : [number] "{rax}" (number),
  22925c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
          [arg1] "{rdi}" (arg1)
  229260:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
    return asm volatile ("syscall"
  229264:	0f 05                	syscall 
  229266:	5d                   	pop    rbp
  229267:	c3                   	ret    
  229268:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  22926f:	00 

0000000000229270 <BaseLinkedList(promise,void,(struct []const u8 constant))_init>:
        pub fn init() Self {
  229270:	55                   	push   rbp
  229271:	48 89 e5             	mov    rbp,rsp
  229274:	48 89 f8             	mov    rax,rdi
            return Self{
  229277:	48 8b 0d 4a 15 fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe154a]        # 20a7c8 <__unnamed_201>
  22927e:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  229281:	48 8b 0d 48 15 fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe1548]        # 20a7d0 <__unnamed_201+0x8>
  229288:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  22928c:	48 8b 0d 45 15 fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe1545]        # 20a7d8 <__unnamed_201+0x10>
  229293:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  229297:	5d                   	pop    rbp
  229298:	c3                   	ret    
  229299:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

00000000002292a0 <BaseLinkedList(promise,void,(struct []const u8 constant))_remove>:
        pub fn remove(list: *Self, node: *Node) void {
  2292a0:	55                   	push   rbp
  2292a1:	48 89 e5             	mov    rbp,rsp
  2292a4:	48 83 ec 50          	sub    rsp,0x50
  2292a8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  2292ac:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
            if (node.prev) |prev_node| {
  2292b0:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  2292b4:	48 83 3e 00          	cmp    QWORD PTR [rsi],0x0
  2292b8:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
  2292bc:	74 1d                	je     2292db <BaseLinkedList(promise,void,(struct []const u8 constant))_remove+0x3b>
  2292be:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2292c2:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  2292c5:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
                prev_node.next = node.next;
  2292c9:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2292cd:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  2292d1:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  2292d5:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
            if (node.prev) |prev_node| {
  2292d9:	eb 0f                	jmp    2292ea <BaseLinkedList(promise,void,(struct []const u8 constant))_remove+0x4a>
                list.first = node.next;
  2292db:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2292df:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  2292e3:	48 8b 49 08          	mov    rcx,QWORD PTR [rcx+0x8]
  2292e7:	48 89 08             	mov    QWORD PTR [rax],rcx
            if (node.next) |next_node| {
  2292ea:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2292ee:	48 89 c1             	mov    rcx,rax
  2292f1:	48 83 c1 08          	add    rcx,0x8
  2292f5:	48 83 78 08 00       	cmp    QWORD PTR [rax+0x8],0x0
  2292fa:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  2292fe:	74 1b                	je     22931b <BaseLinkedList(promise,void,(struct []const u8 constant))_remove+0x7b>
  229300:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  229304:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  229307:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
                next_node.prev = node.prev;
  22930b:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  22930f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  229313:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
  229316:	48 89 11             	mov    QWORD PTR [rcx],rdx
            if (node.next) |next_node| {
  229319:	eb 0f                	jmp    22932a <BaseLinkedList(promise,void,(struct []const u8 constant))_remove+0x8a>
                list.last = node.prev;
  22931b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  22931f:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  229323:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  229326:	48 89 48 08          	mov    QWORD PTR [rax+0x8],rcx
            list.len -= 1;
  22932a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  22932e:	48 89 c1             	mov    rcx,rax
  229331:	48 83 c1 10          	add    rcx,0x10
  229335:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  229339:	48 83 e8 01          	sub    rax,0x1
  22933d:	0f 92 c2             	setb   dl
  229340:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  229344:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  229348:	88 55 bf             	mov    BYTE PTR [rbp-0x41],dl
  22934b:	72 3d                	jb     22938a <BaseLinkedList(promise,void,(struct []const u8 constant))_remove+0xea>
  22934d:	eb 4b                	jmp    22939a <BaseLinkedList(promise,void,(struct []const u8 constant))_remove+0xfa>
            assert(list.len == 0 or (list.first != null and list.last != null));
  22934f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  229353:	48 83 38 00          	cmp    QWORD PTR [rax],0x0
  229357:	0f 95 c1             	setne  cl
  22935a:	f6 c1 01             	test   cl,0x1
  22935d:	88 4d be             	mov    BYTE PTR [rbp-0x42],cl
  229360:	75 02                	jne    229364 <BaseLinkedList(promise,void,(struct []const u8 constant))_remove+0xc4>
  229362:	eb 0f                	jmp    229373 <BaseLinkedList(promise,void,(struct []const u8 constant))_remove+0xd3>
  229364:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  229368:	48 83 78 08 00       	cmp    QWORD PTR [rax+0x8],0x0
  22936d:	0f 95 c1             	setne  cl
  229370:	88 4d be             	mov    BYTE PTR [rbp-0x42],cl
  229373:	8a 45 be             	mov    al,BYTE PTR [rbp-0x42]
  229376:	88 45 bd             	mov    BYTE PTR [rbp-0x43],al
  229379:	8a 45 bd             	mov    al,BYTE PTR [rbp-0x43]
  22937c:	0f b6 f8             	movzx  edi,al
  22937f:	e8 7c 1c fe ff       	call   20b000 <assert>
        pub fn remove(list: *Self, node: *Node) void {
  229384:	48 83 c4 50          	add    rsp,0x50
  229388:	5d                   	pop    rbp
  229389:	c3                   	ret    
  22938a:	48 8d 3d 37 9e 01 00 	lea    rdi,[rip+0x19e37]        # 2431c8 <__unnamed_4>
  229391:	31 c0                	xor    eax,eax
  229393:	89 c6                	mov    esi,eax
            list.len -= 1;
  229395:	e8 66 22 fe ff       	call   20b600 <panic>
  22939a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  22939e:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  2293a2:	48 89 08             	mov    QWORD PTR [rax],rcx
            assert(list.len == 0 or (list.first != null and list.last != null));
  2293a5:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  2293a9:	48 83 7a 10 00       	cmp    QWORD PTR [rdx+0x10],0x0
  2293ae:	40 0f 94 c6          	sete   sil
  2293b2:	40 f6 c6 01          	test   sil,0x1
  2293b6:	40 88 75 bd          	mov    BYTE PTR [rbp-0x43],sil
  2293ba:	75 bd                	jne    229379 <BaseLinkedList(promise,void,(struct []const u8 constant))_remove+0xd9>
  2293bc:	eb 91                	jmp    22934f <BaseLinkedList(promise,void,(struct []const u8 constant))_remove+0xaf>
  2293be:	66 90                	xchg   ax,ax

00000000002293c0 <isatty>:
pub fn isatty(fd: i32) bool {
  2293c0:	55                   	push   rbp
  2293c1:	48 89 e5             	mov    rbp,rsp
  2293c4:	48 83 ec 10          	sub    rsp,0x10
  2293c8:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    var wsz: winsize = undefined;
  2293cb:	48 8b 05 a6 78 fd ff 	mov    rax,QWORD PTR [rip+0xfffffffffffd78a6]        # 200c78 <__unnamed_132>
  2293d2:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    return syscall3(SYS_ioctl, @intCast(usize, fd), TIOCGWINSZ, @ptrToInt(&wsz)) == 0;
  2293d6:	48 63 75 fc          	movsxd rsi,DWORD PTR [rbp-0x4]
  2293da:	bf 10 00 00 00       	mov    edi,0x10
  2293df:	b9 13 54 00 00       	mov    ecx,0x5413
  2293e4:	89 ca                	mov    edx,ecx
  2293e6:	48 8d 4d f0          	lea    rcx,[rbp-0x10]
  2293ea:	e8 c1 b4 fe ff       	call   2148b0 <syscall3>
  2293ef:	48 85 c0             	test   rax,rax
  2293f2:	0f 94 c0             	sete   al
  2293f5:	48 83 c4 10          	add    rsp,0x10
  2293f9:	5d                   	pop    rbp
  2293fa:	c3                   	ret    
  2293fb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000229400 <formatIntValue.112>:
pub fn formatIntValue(
  229400:	55                   	push   rbp
  229401:	48 89 e5             	mov    rbp,rsp
  229404:	48 83 ec 40          	sub    rsp,0x40
  229408:	b8 10 00 00 00       	mov    eax,0x10
  22940d:	45 31 c0             	xor    r8d,r8d
  229410:	45 31 c9             	xor    r9d,r9d
  229413:	45 89 ca             	mov    r10d,r9d
  229416:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22941a:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  22941e:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    return formatInt(value, radix, uppercase, width, context, Errors, output);
  229422:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  229426:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
  22942a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22942e:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  229432:	89 c2                	mov    edx,eax
  229434:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  229438:	44 89 c1             	mov    ecx,r8d
  22943b:	4d 89 d0             	mov    r8,r10
  22943e:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
  229442:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  229446:	e8 45 17 00 00       	call   22ab90 <formatInt.119>
  22944b:	66 83 f8 00          	cmp    ax,0x0
  22944f:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  229453:	74 0b                	je     229460 <formatIntValue.112+0x60>
  229455:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  229459:	e8 32 28 fe ff       	call   20bc90 <__zig_return_error>
  22945e:	eb 02                	jmp    229462 <formatIntValue.112+0x62>
  229460:	eb 00                	jmp    229462 <formatIntValue.112+0x62>
  229462:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  229466:	48 83 c4 40          	add    rsp,0x40
  22946a:	5d                   	pop    rbp
  22946b:	c3                   	ret    
  22946c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000229470 <formatIntValue.113>:
pub fn formatIntValue(
  229470:	55                   	push   rbp
  229471:	48 89 e5             	mov    rbp,rsp
  229474:	48 83 ec 40          	sub    rsp,0x40
  229478:	b8 10 00 00 00       	mov    eax,0x10
  22947d:	45 31 c0             	xor    r8d,r8d
  229480:	45 31 c9             	xor    r9d,r9d
  229483:	45 89 ca             	mov    r10d,r9d
  229486:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22948a:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  22948e:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    return formatInt(value, radix, uppercase, width, context, Errors, output);
  229492:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  229496:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
  22949a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22949e:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2294a2:	89 c2                	mov    edx,eax
  2294a4:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  2294a8:	44 89 c1             	mov    ecx,r8d
  2294ab:	4d 89 d0             	mov    r8,r10
  2294ae:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
  2294b2:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  2294b6:	e8 d5 16 00 00       	call   22ab90 <formatInt.119>
  2294bb:	66 83 f8 00          	cmp    ax,0x0
  2294bf:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  2294c3:	74 0b                	je     2294d0 <formatIntValue.113+0x60>
  2294c5:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2294c9:	e8 c2 27 fe ff       	call   20bc90 <__zig_return_error>
  2294ce:	eb 02                	jmp    2294d2 <formatIntValue.113+0x62>
  2294d0:	eb 00                	jmp    2294d2 <formatIntValue.113+0x62>
  2294d2:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  2294d6:	48 83 c4 40          	add    rsp,0x40
  2294da:	5d                   	pop    rbp
  2294db:	c3                   	ret    
  2294dc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

00000000002294e0 <formatIntValue.114>:
pub fn formatIntValue(
  2294e0:	55                   	push   rbp
  2294e1:	48 89 e5             	mov    rbp,rsp
  2294e4:	48 83 ec 40          	sub    rsp,0x40
  2294e8:	b8 0a 00 00 00       	mov    eax,0xa
  2294ed:	45 31 c0             	xor    r8d,r8d
  2294f0:	45 31 c9             	xor    r9d,r9d
  2294f3:	45 89 ca             	mov    r10d,r9d
  2294f6:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2294fa:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  2294fe:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    return formatInt(value, radix, uppercase, width, context, Errors, output);
  229502:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  229506:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
  22950a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22950e:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  229512:	89 c2                	mov    edx,eax
  229514:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  229518:	44 89 c1             	mov    ecx,r8d
  22951b:	4d 89 d0             	mov    r8,r10
  22951e:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
  229522:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  229526:	e8 65 16 00 00       	call   22ab90 <formatInt.119>
  22952b:	66 83 f8 00          	cmp    ax,0x0
  22952f:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  229533:	74 0b                	je     229540 <formatIntValue.114+0x60>
  229535:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  229539:	e8 52 27 fe ff       	call   20bc90 <__zig_return_error>
  22953e:	eb 02                	jmp    229542 <formatIntValue.114+0x62>
  229540:	eb 00                	jmp    229542 <formatIntValue.114+0x62>
  229542:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  229546:	48 83 c4 40          	add    rsp,0x40
  22954a:	5d                   	pop    rbp
  22954b:	c3                   	ret    
  22954c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000229550 <formatIntValue.115>:
pub fn formatIntValue(
  229550:	55                   	push   rbp
  229551:	48 89 e5             	mov    rbp,rsp
  229554:	48 83 ec 40          	sub    rsp,0x40
  229558:	b8 10 00 00 00       	mov    eax,0x10
  22955d:	45 31 c0             	xor    r8d,r8d
  229560:	45 31 c9             	xor    r9d,r9d
  229563:	45 89 ca             	mov    r10d,r9d
  229566:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22956a:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  22956e:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    return formatInt(value, radix, uppercase, width, context, Errors, output);
  229572:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  229576:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
  22957a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22957e:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  229582:	89 c2                	mov    edx,eax
  229584:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  229588:	44 89 c1             	mov    ecx,r8d
  22958b:	4d 89 d0             	mov    r8,r10
  22958e:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
  229592:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  229596:	e8 f5 15 00 00       	call   22ab90 <formatInt.119>
  22959b:	66 83 f8 00          	cmp    ax,0x0
  22959f:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  2295a3:	74 0b                	je     2295b0 <formatIntValue.115+0x60>
  2295a5:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2295a9:	e8 e2 26 fe ff       	call   20bc90 <__zig_return_error>
  2295ae:	eb 02                	jmp    2295b2 <formatIntValue.115+0x62>
  2295b0:	eb 00                	jmp    2295b2 <formatIntValue.115+0x62>
  2295b2:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  2295b6:	48 83 c4 40          	add    rsp,0x40
  2295ba:	5d                   	pop    rbp
  2295bb:	c3                   	ret    
  2295bc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

00000000002295c0 <formatIntValue.116>:
pub fn formatIntValue(
  2295c0:	55                   	push   rbp
  2295c1:	48 89 e5             	mov    rbp,rsp
  2295c4:	48 83 ec 40          	sub    rsp,0x40
  2295c8:	b8 0a 00 00 00       	mov    eax,0xa
  2295cd:	45 31 c0             	xor    r8d,r8d
  2295d0:	45 31 c9             	xor    r9d,r9d
  2295d3:	45 89 ca             	mov    r10d,r9d
  2295d6:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2295da:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  2295de:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    return formatInt(value, radix, uppercase, width, context, Errors, output);
  2295e2:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2295e6:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
  2295ea:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2295ee:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2295f2:	89 c2                	mov    edx,eax
  2295f4:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  2295f8:	44 89 c1             	mov    ecx,r8d
  2295fb:	4d 89 d0             	mov    r8,r10
  2295fe:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
  229602:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  229606:	e8 85 15 00 00       	call   22ab90 <formatInt.119>
  22960b:	66 83 f8 00          	cmp    ax,0x0
  22960f:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  229613:	74 0b                	je     229620 <formatIntValue.116+0x60>
  229615:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  229619:	e8 72 26 fe ff       	call   20bc90 <__zig_return_error>
  22961e:	eb 02                	jmp    229622 <formatIntValue.116+0x62>
  229620:	eb 00                	jmp    229622 <formatIntValue.116+0x62>
  229622:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  229626:	48 83 c4 40          	add    rsp,0x40
  22962a:	5d                   	pop    rbp
  22962b:	c3                   	ret    
  22962c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000229630 <formatIntValue.117>:
pub fn formatIntValue(
  229630:	55                   	push   rbp
  229631:	48 89 e5             	mov    rbp,rsp
  229634:	48 83 ec 40          	sub    rsp,0x40
  229638:	b8 10 00 00 00       	mov    eax,0x10
  22963d:	45 31 c0             	xor    r8d,r8d
  229640:	45 31 c9             	xor    r9d,r9d
  229643:	45 89 ca             	mov    r10d,r9d
  229646:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22964a:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  22964e:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    return formatInt(value, radix, uppercase, width, context, Errors, output);
  229652:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  229656:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
  22965a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22965e:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  229662:	89 c2                	mov    edx,eax
  229664:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  229668:	44 89 c1             	mov    ecx,r8d
  22966b:	4d 89 d0             	mov    r8,r10
  22966e:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
  229672:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  229676:	e8 15 15 00 00       	call   22ab90 <formatInt.119>
  22967b:	66 83 f8 00          	cmp    ax,0x0
  22967f:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  229683:	74 0b                	je     229690 <formatIntValue.117+0x60>
  229685:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  229689:	e8 02 26 fe ff       	call   20bc90 <__zig_return_error>
  22968e:	eb 02                	jmp    229692 <formatIntValue.117+0x62>
  229690:	eb 00                	jmp    229692 <formatIntValue.117+0x62>
  229692:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  229696:	48 83 c4 40          	add    rsp,0x40
  22969a:	5d                   	pop    rbp
  22969b:	c3                   	ret    
  22969c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

00000000002296a0 <formatIntValue.118>:
pub fn formatIntValue(
  2296a0:	55                   	push   rbp
  2296a1:	48 89 e5             	mov    rbp,rsp
  2296a4:	48 83 ec 40          	sub    rsp,0x40
  2296a8:	b8 10 00 00 00       	mov    eax,0x10
  2296ad:	45 31 c0             	xor    r8d,r8d
  2296b0:	45 31 c9             	xor    r9d,r9d
  2296b3:	45 89 ca             	mov    r10d,r9d
  2296b6:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2296ba:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  2296be:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    return formatInt(value, radix, uppercase, width, context, Errors, output);
  2296c2:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2296c6:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
  2296ca:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2296ce:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2296d2:	89 c2                	mov    edx,eax
  2296d4:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  2296d8:	44 89 c1             	mov    ecx,r8d
  2296db:	4d 89 d0             	mov    r8,r10
  2296de:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
  2296e2:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  2296e6:	e8 a5 14 00 00       	call   22ab90 <formatInt.119>
  2296eb:	66 83 f8 00          	cmp    ax,0x0
  2296ef:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  2296f3:	74 0b                	je     229700 <formatIntValue.118+0x60>
  2296f5:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2296f9:	e8 92 25 fe ff       	call   20bc90 <__zig_return_error>
  2296fe:	eb 02                	jmp    229702 <formatIntValue.118+0x62>
  229700:	eb 00                	jmp    229702 <formatIntValue.118+0x62>
  229702:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  229706:	48 83 c4 40          	add    rsp,0x40
  22970a:	5d                   	pop    rbp
  22970b:	c3                   	ret    
  22970c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000229710 <len>:
pub fn len(ptr: [*]const u8) usize {
  229710:	55                   	push   rbp
  229711:	48 89 e5             	mov    rbp,rsp
  229714:	48 83 ec 20          	sub    rsp,0x20
  229718:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    var count: usize = 0;
  22971c:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  229723:	00 
    while (ptr[count] != 0) : (count += 1) {}
  229724:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  229728:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  22972c:	80 3c 01 00          	cmp    BYTE PTR [rcx+rax*1],0x0
  229730:	74 16                	je     229748 <len+0x38>
  229732:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  229736:	48 83 c0 01          	add    rax,0x1
  22973a:	0f 92 c1             	setb   cl
  22973d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  229741:	88 4d e7             	mov    BYTE PTR [rbp-0x19],cl
  229744:	72 0c                	jb     229752 <len+0x42>
  229746:	eb 1a                	jmp    229762 <len+0x52>
    return count;
  229748:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22974c:	48 83 c4 20          	add    rsp,0x20
  229750:	5d                   	pop    rbp
  229751:	c3                   	ret    
  229752:	48 8d 3d 6f 9a 01 00 	lea    rdi,[rip+0x19a6f]        # 2431c8 <__unnamed_4>
  229759:	31 c0                	xor    eax,eax
  22975b:	89 c6                	mov    esi,eax
    while (ptr[count] != 0) : (count += 1) {}
  22975d:	e8 9e 1e fe ff       	call   20b600 <panic>
  229762:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  229766:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  22976a:	eb b8                	jmp    229724 <len+0x14>
  22976c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000229770 <formatInt>:
        else => unreachable,
    };
    return output(context, buf);
}

pub fn formatInt(
  229770:	55                   	push   rbp
  229771:	48 89 e5             	mov    rbp,rsp
  229774:	41 56                	push   r14
  229776:	53                   	push   rbx
  229777:	48 83 ec 40          	sub    rsp,0x40
  22977b:	88 c8                	mov    al,cl
  22977d:	41 88 d2             	mov    r10b,dl
  229780:	4c 8b 5d 10          	mov    r11,QWORD PTR [rbp+0x10]
  229784:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
  229788:	44 88 55 e7          	mov    BYTE PTR [rbp-0x19],r10b
  22978c:	24 01                	and    al,0x1
  22978e:	88 45 e6             	mov    BYTE PTR [rbp-0x1a],al
  229791:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
  229795:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
    output: fn (@typeOf(context), []const u8) Errors!void,
) Errors!void {
    if (@typeOf(value).is_signed) {
        return formatIntSigned(value, base, uppercase, width, context, Errors, output);
    } else {
        return formatIntUnsigned(value, base, uppercase, width, context, Errors, output);
  229799:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  22979d:	8a 45 e7             	mov    al,BYTE PTR [rbp-0x19]
  2297a0:	44 8a 55 e6          	mov    r10b,BYTE PTR [rbp-0x1a]
  2297a4:	4c 8b 45 d8          	mov    r8,QWORD PTR [rbp-0x28]
  2297a8:	4c 8b 4d d0          	mov    r9,QWORD PTR [rbp-0x30]
  2297ac:	48 8b 5d 10          	mov    rbx,QWORD PTR [rbp+0x10]
  2297b0:	49 89 e6             	mov    r14,rsp
  2297b3:	49 89 1e             	mov    QWORD PTR [r14],rbx
  2297b6:	0f b6 d0             	movzx  edx,al
  2297b9:	41 0f b6 ca          	movzx  ecx,r10b
  2297bd:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  2297c1:	4c 89 5d c0          	mov    QWORD PTR [rbp-0x40],r11
  2297c5:	e8 46 14 00 00       	call   22ac10 <formatIntUnsigned>
  2297ca:	66 83 f8 00          	cmp    ax,0x0
  2297ce:	66 89 45 be          	mov    WORD PTR [rbp-0x42],ax
  2297d2:	74 0b                	je     2297df <formatInt+0x6f>
  2297d4:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2297d8:	e8 b3 24 fe ff       	call   20bc90 <__zig_return_error>
  2297dd:	eb 02                	jmp    2297e1 <formatInt+0x71>
  2297df:	eb 00                	jmp    2297e1 <formatInt+0x71>
  2297e1:	66 8b 45 be          	mov    ax,WORD PTR [rbp-0x42]
  2297e5:	48 83 c4 40          	add    rsp,0x40
  2297e9:	5b                   	pop    rbx
  2297ea:	41 5e                	pop    r14
  2297ec:	5d                   	pop    rbp
  2297ed:	c3                   	ret    
  2297ee:	66 90                	xchg   ax,ax

00000000002297f0 <formatFloatDecimal>:
pub fn formatFloatDecimal(
  2297f0:	55                   	push   rbp
  2297f1:	48 89 e5             	mov    rbp,rsp
  2297f4:	48 81 ec a0 03 00 00 	sub    rsp,0x3a0
  2297fb:	c5 fb 11 85 38 ff ff 	vmovsd QWORD PTR [rbp-0xc8],xmm0
  229802:	ff 
  229803:	48 89 95 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rdx
  22980a:	48 89 8d 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rcx
    var x = f64(value);
  229811:	c5 fb 10 85 38 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xc8]
  229818:	ff 
  229819:	c5 fb 11 85 20 ff ff 	vmovsd QWORD PTR [rbp-0xe0],xmm0
  229820:	ff 
    if (math.signbit(x)) {
  229821:	c5 fb 10 85 20 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xe0]
  229828:	ff 
  229829:	48 89 bd 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rdi
  229830:	48 89 b5 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rsi
  229837:	e8 14 1c 00 00       	call   22b450 <signbit>
  22983c:	a8 01                	test   al,0x1
  22983e:	75 02                	jne    229842 <formatFloatDecimal+0x52>
  229840:	eb 79                	jmp    2298bb <formatFloatDecimal+0xcb>
  229842:	48 8d 15 b7 a0 01 00 	lea    rdx,[rip+0x1a0b7]        # 243900 <__unnamed_203>
        try output(context, "-");
  229849:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  229850:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  229857:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22985e:	ff d0                	call   rax
  229860:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  229864:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  229869:	74 27                	je     229892 <formatFloatDecimal+0xa2>
  22986b:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  22986f:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229876:	66 89 85 5e fe ff ff 	mov    WORD PTR [rbp-0x1a2],ax
  22987d:	e8 0e 24 fe ff       	call   20bc90 <__zig_return_error>
  229882:	66 8b 85 5e fe ff ff 	mov    ax,WORD PTR [rbp-0x1a2]
  229889:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  229890:	5d                   	pop    rbp
  229891:	c3                   	ret    
  229892:	48 b8 00 00 00 00 00 	movabs rax,0x8000000000000000
  229899:	00 00 80 
        x = -x;
  22989c:	c5 fb 10 85 20 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xe0]
  2298a3:	ff 
  2298a4:	c4 e1 f9 7e c1       	vmovq  rcx,xmm0
  2298a9:	48 31 c1             	xor    rcx,rax
  2298ac:	c4 e1 f9 6e c1       	vmovq  xmm0,rcx
  2298b1:	c5 fb 11 85 20 ff ff 	vmovsd QWORD PTR [rbp-0xe0],xmm0
  2298b8:	ff 
    if (math.signbit(x)) {
  2298b9:	eb 02                	jmp    2298bd <formatFloatDecimal+0xcd>
  2298bb:	eb 00                	jmp    2298bd <formatFloatDecimal+0xcd>
    if (math.isNan(x)) {
  2298bd:	c5 fb 10 85 20 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xe0]
  2298c4:	ff 
  2298c5:	e8 b6 1b 00 00       	call   22b480 <isNan>
  2298ca:	a8 01                	test   al,0x1
  2298cc:	75 02                	jne    2298d0 <formatFloatDecimal+0xe0>
  2298ce:	eb 4b                	jmp    22991b <formatFloatDecimal+0x12b>
  2298d0:	48 8d 15 41 a0 01 00 	lea    rdx,[rip+0x1a041]        # 243918 <__unnamed_204>
        return output(context, "nan");
  2298d7:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  2298de:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  2298e5:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  2298ec:	ff d0                	call   rax
  2298ee:	66 83 f8 00          	cmp    ax,0x0
  2298f2:	66 89 85 5c fe ff ff 	mov    WORD PTR [rbp-0x1a4],ax
  2298f9:	74 0e                	je     229909 <formatFloatDecimal+0x119>
  2298fb:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229902:	e8 89 23 fe ff       	call   20bc90 <__zig_return_error>
  229907:	eb 02                	jmp    22990b <formatFloatDecimal+0x11b>
  229909:	eb 00                	jmp    22990b <formatFloatDecimal+0x11b>
  22990b:	66 8b 85 5c fe ff ff 	mov    ax,WORD PTR [rbp-0x1a4]
  229912:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  229919:	5d                   	pop    rbp
  22991a:	c3                   	ret    
    if (math.isNan(x)) {
  22991b:	eb 00                	jmp    22991d <formatFloatDecimal+0x12d>
    if (math.isPositiveInf(x)) {
  22991d:	c5 fb 10 85 20 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xe0]
  229924:	ff 
  229925:	e8 96 1b 00 00       	call   22b4c0 <isPositiveInf>
  22992a:	a8 01                	test   al,0x1
  22992c:	75 02                	jne    229930 <formatFloatDecimal+0x140>
  22992e:	eb 4b                	jmp    22997b <formatFloatDecimal+0x18b>
  229930:	48 8d 15 f9 9f 01 00 	lea    rdx,[rip+0x19ff9]        # 243930 <__unnamed_205>
        return output(context, "inf");
  229937:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  22993e:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  229945:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22994c:	ff d0                	call   rax
  22994e:	66 83 f8 00          	cmp    ax,0x0
  229952:	66 89 85 5a fe ff ff 	mov    WORD PTR [rbp-0x1a6],ax
  229959:	74 0e                	je     229969 <formatFloatDecimal+0x179>
  22995b:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229962:	e8 29 23 fe ff       	call   20bc90 <__zig_return_error>
  229967:	eb 02                	jmp    22996b <formatFloatDecimal+0x17b>
  229969:	eb 00                	jmp    22996b <formatFloatDecimal+0x17b>
  22996b:	66 8b 85 5a fe ff ff 	mov    ax,WORD PTR [rbp-0x1a6]
  229972:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  229979:	5d                   	pop    rbp
  22997a:	c3                   	ret    
    if (math.isPositiveInf(x)) {
  22997b:	eb 00                	jmp    22997d <formatFloatDecimal+0x18d>
  22997d:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
    if (x == 0.0) {
  229981:	c5 fb 10 8d 20 ff ff 	vmovsd xmm1,QWORD PTR [rbp-0xe0]
  229988:	ff 
  229989:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22998d:	0f 85 1d 02 00 00    	jne    229bb0 <formatFloatDecimal+0x3c0>
  229993:	0f 8a 17 02 00 00    	jp     229bb0 <formatFloatDecimal+0x3c0>
  229999:	48 8d 15 a8 9f 01 00 	lea    rdx,[rip+0x19fa8]        # 243948 <__unnamed_206>
        try output(context, "0");
  2299a0:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  2299a7:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  2299ae:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  2299b5:	ff d0                	call   rax
  2299b7:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  2299bb:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  2299c0:	74 27                	je     2299e9 <formatFloatDecimal+0x1f9>
  2299c2:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  2299c6:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  2299cd:	66 89 85 58 fe ff ff 	mov    WORD PTR [rbp-0x1a8],ax
  2299d4:	e8 b7 22 fe ff       	call   20bc90 <__zig_return_error>
  2299d9:	66 8b 85 58 fe ff ff 	mov    ax,WORD PTR [rbp-0x1a8]
  2299e0:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  2299e7:	5d                   	pop    rbp
  2299e8:	c3                   	ret    
        if (maybe_precision) |precision| {
  2299e9:	48 8b 85 60 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a0]
  2299f0:	f6 40 08 01          	test   BYTE PTR [rax+0x8],0x1
  2299f4:	75 05                	jne    2299fb <formatFloatDecimal+0x20b>
  2299f6:	e9 54 01 00 00       	jmp    229b4f <formatFloatDecimal+0x35f>
  2299fb:	48 8b 85 60 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a0]
  229a02:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  229a05:	48 89 8d 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rcx
            if (precision != 0) {
  229a0c:	48 83 bd 18 ff ff ff 	cmp    QWORD PTR [rbp-0xe8],0x0
  229a13:	00 
  229a14:	0f 84 e3 00 00 00    	je     229afd <formatFloatDecimal+0x30d>
  229a1a:	48 8d 15 3f 9f 01 00 	lea    rdx,[rip+0x19f3f]        # 243960 <__unnamed_207>
                try output(context, ".");
  229a21:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  229a28:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  229a2f:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229a36:	ff d0                	call   rax
  229a38:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  229a3c:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  229a41:	74 27                	je     229a6a <formatFloatDecimal+0x27a>
  229a43:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  229a47:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229a4e:	66 89 85 56 fe ff ff 	mov    WORD PTR [rbp-0x1aa],ax
  229a55:	e8 36 22 fe ff       	call   20bc90 <__zig_return_error>
  229a5a:	66 8b 85 56 fe ff ff 	mov    ax,WORD PTR [rbp-0x1aa]
  229a61:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  229a68:	5d                   	pop    rbp
  229a69:	c3                   	ret    
                var i: usize = 0;
  229a6a:	48 c7 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],0x0
  229a71:	00 00 00 00 
                while (i < precision) : (i += 1) {
  229a75:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  229a7c:	48 3b 85 18 ff ff ff 	cmp    rax,QWORD PTR [rbp-0xe8]
  229a83:	73 76                	jae    229afb <formatFloatDecimal+0x30b>
  229a85:	48 8d 15 ec 9e 01 00 	lea    rdx,[rip+0x19eec]        # 243978 <__unnamed_208>
                    try output(context, "0");
  229a8c:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  229a93:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  229a9a:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229aa1:	ff d0                	call   rax
  229aa3:	66 89 45 f8          	mov    WORD PTR [rbp-0x8],ax
  229aa7:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  229aac:	74 27                	je     229ad5 <formatFloatDecimal+0x2e5>
  229aae:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  229ab2:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229ab9:	66 89 85 54 fe ff ff 	mov    WORD PTR [rbp-0x1ac],ax
  229ac0:	e8 cb 21 fe ff       	call   20bc90 <__zig_return_error>
  229ac5:	66 8b 85 54 fe ff ff 	mov    ax,WORD PTR [rbp-0x1ac]
  229acc:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  229ad3:	5d                   	pop    rbp
  229ad4:	c3                   	ret    
                while (i < precision) : (i += 1) {
  229ad5:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  229adc:	48 83 c0 01          	add    rax,0x1
  229ae0:	0f 92 c1             	setb   cl
  229ae3:	48 89 85 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rax
  229aea:	88 8d 47 fe ff ff    	mov    BYTE PTR [rbp-0x1b9],cl
  229af0:	0f 82 42 0a 00 00    	jb     22a538 <formatFloatDecimal+0xd48>
  229af6:	e9 4d 0a 00 00       	jmp    22a548 <formatFloatDecimal+0xd58>
            if (precision != 0) {
  229afb:	eb 50                	jmp    229b4d <formatFloatDecimal+0x35d>
  229afd:	48 8d 15 8c 9e 01 00 	lea    rdx,[rip+0x19e8c]        # 243990 <__unnamed_209>
                try output(context, ".0");
  229b04:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  229b0b:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  229b12:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229b19:	ff d0                	call   rax
  229b1b:	66 89 45 f6          	mov    WORD PTR [rbp-0xa],ax
  229b1f:	66 83 7d f6 00       	cmp    WORD PTR [rbp-0xa],0x0
  229b24:	74 27                	je     229b4d <formatFloatDecimal+0x35d>
  229b26:	66 8b 45 f6          	mov    ax,WORD PTR [rbp-0xa]
  229b2a:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229b31:	66 89 85 44 fe ff ff 	mov    WORD PTR [rbp-0x1bc],ax
  229b38:	e8 53 21 fe ff       	call   20bc90 <__zig_return_error>
  229b3d:	66 8b 85 44 fe ff ff 	mov    ax,WORD PTR [rbp-0x1bc]
  229b44:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  229b4b:	5d                   	pop    rbp
  229b4c:	c3                   	ret    
        if (maybe_precision) |precision| {
  229b4d:	eb 50                	jmp    229b9f <formatFloatDecimal+0x3af>
  229b4f:	48 8d 15 52 9e 01 00 	lea    rdx,[rip+0x19e52]        # 2439a8 <__unnamed_210>
            try output(context, "0");
  229b56:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  229b5d:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  229b64:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229b6b:	ff d0                	call   rax
  229b6d:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
  229b71:	66 83 7d f4 00       	cmp    WORD PTR [rbp-0xc],0x0
  229b76:	74 27                	je     229b9f <formatFloatDecimal+0x3af>
  229b78:	66 8b 45 f4          	mov    ax,WORD PTR [rbp-0xc]
  229b7c:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229b83:	66 89 85 42 fe ff ff 	mov    WORD PTR [rbp-0x1be],ax
  229b8a:	e8 01 21 fe ff       	call   20bc90 <__zig_return_error>
  229b8f:	66 8b 85 42 fe ff ff 	mov    ax,WORD PTR [rbp-0x1be]
  229b96:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  229b9d:	5d                   	pop    rbp
  229b9e:	c3                   	ret    
  229b9f:	31 c0                	xor    eax,eax
  229ba1:	66 89 c1             	mov    cx,ax
        return;
  229ba4:	66 89 c8             	mov    ax,cx
  229ba7:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  229bae:	5d                   	pop    rbp
  229baf:	c3                   	ret    
    if (x == 0.0) {
  229bb0:	eb 00                	jmp    229bb2 <formatFloatDecimal+0x3c2>
  229bb2:	b0 01                	mov    al,0x1
    var buffer: [32]u8 = undefined;
  229bb4:	48 8b 0d 85 0d fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe0d85]        # 20a940 <__unnamed_211>
  229bbb:	48 89 8d f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rcx
  229bc2:	48 8b 0d 7f 0d fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe0d7f]        # 20a948 <__unnamed_211+0x8>
  229bc9:	48 89 8d f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rcx
  229bd0:	48 8b 0d 79 0d fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe0d79]        # 20a950 <__unnamed_211+0x10>
  229bd7:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  229bde:	48 8b 0d 73 0d fe ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffe0d73]        # 20a958 <__unnamed_211+0x18>
  229be5:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
    var float_decimal = errol.errol3(x, buffer[0..]);
  229bec:	c5 fb 10 85 20 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xe0]
  229bf3:	ff 
  229bf4:	a8 01                	test   al,0x1
  229bf6:	c5 fb 11 85 38 fe ff 	vmovsd QWORD PTR [rbp-0x1c8],xmm0
  229bfd:	ff 
  229bfe:	0f 85 67 09 00 00    	jne    22a56b <formatFloatDecimal+0xd7b>
  229c04:	e9 52 09 00 00       	jmp    22a55b <formatFloatDecimal+0xd6b>
  229c09:	48 8d bd d8 fe ff ff 	lea    rdi,[rbp-0x128]
  229c10:	31 d2                	xor    edx,edx
    if (maybe_precision) |precision| {
  229c12:	48 8b 85 60 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a0]
  229c19:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  229c1c:	48 89 8d d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rcx
        errol.roundToPrecision(&float_decimal, precision, errol.RoundMode.Decimal);
  229c23:	48 8b b5 d0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x130]
  229c2a:	e8 21 1b 00 00       	call   22b750 <roundToPrecision>
        var num_digits_whole = if (float_decimal.exp > 0) @intCast(usize, float_decimal.exp) else 0;
  229c2f:	83 bd e8 fe ff ff 00 	cmp    DWORD PTR [rbp-0x118],0x0
  229c36:	7e 10                	jle    229c48 <formatFloatDecimal+0x458>
  229c38:	48 63 85 e8 fe ff ff 	movsxd rax,DWORD PTR [rbp-0x118]
  229c3f:	48 89 85 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rax
  229c46:	eb 0d                	jmp    229c55 <formatFloatDecimal+0x465>
  229c48:	31 c0                	xor    eax,eax
  229c4a:	89 c1                	mov    ecx,eax
  229c4c:	48 89 8d 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rcx
  229c53:	eb 00                	jmp    229c55 <formatFloatDecimal+0x465>
  229c55:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  229c5c:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
        var num_digits_whole_no_pad = math.min(num_digits_whole, float_decimal.digits.len);
  229c63:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
  229c6a:	48 8b b5 e0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x120]
  229c71:	e8 3a c4 ff ff       	call   2260b0 <min>
  229c76:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
        if (num_digits_whole > 0) {
  229c7d:	48 83 bd c8 fe ff ff 	cmp    QWORD PTR [rbp-0x138],0x0
  229c84:	00 
  229c85:	0f 86 15 01 00 00    	jbe    229da0 <formatFloatDecimal+0x5b0>
  229c8b:	31 c0                	xor    eax,eax
  229c8d:	89 c1                	mov    ecx,eax
  229c8f:	48 8d 95 d8 fe ff ff 	lea    rdx,[rbp-0x128]
            try output(context, float_decimal.digits[0..num_digits_whole_no_pad]);
  229c96:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  229c9d:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
  229ca4:	4c 8b 85 c0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x140]
  229cab:	4c 8b 8d e0 fe ff ff 	mov    r9,QWORD PTR [rbp-0x120]
  229cb2:	4c 39 c1             	cmp    rcx,r8
  229cb5:	4c 89 8d 28 fe ff ff 	mov    QWORD PTR [rbp-0x1d8],r9
  229cbc:	48 89 95 20 fe ff ff 	mov    QWORD PTR [rbp-0x1e0],rdx
  229cc3:	48 89 b5 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],rsi
  229cca:	48 89 bd 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rdi
  229cd1:	4c 89 85 08 fe ff ff 	mov    QWORD PTR [rbp-0x1f8],r8
  229cd8:	0f 86 fc 08 00 00    	jbe    22a5da <formatFloatDecimal+0xdea>
  229cde:	e9 e7 08 00 00       	jmp    22a5ca <formatFloatDecimal+0xdda>
  229ce3:	66 8b 45 b6          	mov    ax,WORD PTR [rbp-0x4a]
  229ce7:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229cee:	66 89 85 06 fe ff ff 	mov    WORD PTR [rbp-0x1fa],ax
  229cf5:	e8 96 1f fe ff       	call   20bc90 <__zig_return_error>
  229cfa:	66 8b 85 06 fe ff ff 	mov    ax,WORD PTR [rbp-0x1fa]
  229d01:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  229d08:	5d                   	pop    rbp
  229d09:	c3                   	ret    
            var i = num_digits_whole_no_pad;
  229d0a:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  229d11:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
            while (i < num_digits_whole) : (i += 1) {
  229d18:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  229d1f:	48 3b 85 c8 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x138]
  229d26:	73 76                	jae    229d9e <formatFloatDecimal+0x5ae>
  229d28:	48 8d 15 91 9c 01 00 	lea    rdx,[rip+0x19c91]        # 2439c0 <__unnamed_212>
                try output(context, "0");
  229d2f:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  229d36:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  229d3d:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229d44:	ff d0                	call   rax
  229d46:	66 89 45 b4          	mov    WORD PTR [rbp-0x4c],ax
  229d4a:	66 83 7d b4 00       	cmp    WORD PTR [rbp-0x4c],0x0
  229d4f:	74 27                	je     229d78 <formatFloatDecimal+0x588>
  229d51:	66 8b 45 b4          	mov    ax,WORD PTR [rbp-0x4c]
  229d55:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229d5c:	66 89 85 04 fe ff ff 	mov    WORD PTR [rbp-0x1fc],ax
  229d63:	e8 28 1f fe ff       	call   20bc90 <__zig_return_error>
  229d68:	66 8b 85 04 fe ff ff 	mov    ax,WORD PTR [rbp-0x1fc]
  229d6f:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  229d76:	5d                   	pop    rbp
  229d77:	c3                   	ret    
            while (i < num_digits_whole) : (i += 1) {
  229d78:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  229d7f:	48 83 c0 01          	add    rax,0x1
  229d83:	0f 92 c1             	setb   cl
  229d86:	48 89 85 f8 fd ff ff 	mov    QWORD PTR [rbp-0x208],rax
  229d8d:	88 8d f7 fd ff ff    	mov    BYTE PTR [rbp-0x209],cl
  229d93:	0f 82 b0 08 00 00    	jb     22a649 <formatFloatDecimal+0xe59>
  229d99:	e9 bb 08 00 00       	jmp    22a659 <formatFloatDecimal+0xe69>
        if (num_digits_whole > 0) {
  229d9e:	eb 50                	jmp    229df0 <formatFloatDecimal+0x600>
  229da0:	48 8d 15 31 9c 01 00 	lea    rdx,[rip+0x19c31]        # 2439d8 <__unnamed_213>
            try output(context, "0");
  229da7:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  229dae:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  229db5:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229dbc:	ff d0                	call   rax
  229dbe:	66 89 45 b2          	mov    WORD PTR [rbp-0x4e],ax
  229dc2:	66 83 7d b2 00       	cmp    WORD PTR [rbp-0x4e],0x0
  229dc7:	74 27                	je     229df0 <formatFloatDecimal+0x600>
  229dc9:	66 8b 45 b2          	mov    ax,WORD PTR [rbp-0x4e]
  229dcd:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229dd4:	66 89 85 f4 fd ff ff 	mov    WORD PTR [rbp-0x20c],ax
  229ddb:	e8 b0 1e fe ff       	call   20bc90 <__zig_return_error>
  229de0:	66 8b 85 f4 fd ff ff 	mov    ax,WORD PTR [rbp-0x20c]
  229de7:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  229dee:	5d                   	pop    rbp
  229def:	c3                   	ret    
        if (precision == 0) {
  229df0:	48 83 bd d0 fe ff ff 	cmp    QWORD PTR [rbp-0x130],0x0
  229df7:	00 
  229df8:	75 11                	jne    229e0b <formatFloatDecimal+0x61b>
  229dfa:	31 c0                	xor    eax,eax
  229dfc:	66 89 c1             	mov    cx,ax
            return;
  229dff:	66 89 c8             	mov    ax,cx
  229e02:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  229e09:	5d                   	pop    rbp
  229e0a:	c3                   	ret    
        if (precision == 0) {
  229e0b:	eb 00                	jmp    229e0d <formatFloatDecimal+0x61d>
  229e0d:	48 8d 15 dc 9b 01 00 	lea    rdx,[rip+0x19bdc]        # 2439f0 <__unnamed_214>
        try output(context, ".");
  229e14:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  229e1b:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  229e22:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229e29:	ff d0                	call   rax
  229e2b:	66 89 45 b0          	mov    WORD PTR [rbp-0x50],ax
  229e2f:	66 83 7d b0 00       	cmp    WORD PTR [rbp-0x50],0x0
  229e34:	74 27                	je     229e5d <formatFloatDecimal+0x66d>
  229e36:	66 8b 45 b0          	mov    ax,WORD PTR [rbp-0x50]
  229e3a:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229e41:	66 89 85 f2 fd ff ff 	mov    WORD PTR [rbp-0x20e],ax
  229e48:	e8 43 1e fe ff       	call   20bc90 <__zig_return_error>
  229e4d:	66 8b 85 f2 fd ff ff 	mov    ax,WORD PTR [rbp-0x20e]
  229e54:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  229e5b:	5d                   	pop    rbp
  229e5c:	c3                   	ret    
        var printed: usize = 0;
  229e5d:	48 c7 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],0x0
  229e64:	00 00 00 00 
        if (float_decimal.exp <= 0) {
  229e68:	83 bd e8 fe ff ff 00 	cmp    DWORD PTR [rbp-0x118],0x0
  229e6f:	0f 8f cd 00 00 00    	jg     229f42 <formatFloatDecimal+0x752>
  229e75:	31 c0                	xor    eax,eax
            const zero_digit_count = @intCast(usize, -float_decimal.exp);
  229e77:	2b 85 e8 fe ff ff    	sub    eax,DWORD PTR [rbp-0x118]
  229e7d:	0f 90 c1             	seto   cl
  229e80:	89 85 ec fd ff ff    	mov    DWORD PTR [rbp-0x214],eax
  229e86:	88 8d eb fd ff ff    	mov    BYTE PTR [rbp-0x215],cl
  229e8c:	0f 80 da 07 00 00    	jo     22a66c <formatFloatDecimal+0xe7c>
  229e92:	e9 e5 07 00 00       	jmp    22a67c <formatFloatDecimal+0xe8c>
            while (i < zeros_to_print) : (i += 1) {
  229e97:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
  229e9e:	48 3b 85 a0 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x160]
  229ea5:	73 76                	jae    229f1d <formatFloatDecimal+0x72d>
  229ea7:	48 8d 15 5a 9b 01 00 	lea    rdx,[rip+0x19b5a]        # 243a08 <__unnamed_215>
                try output(context, "0");
  229eae:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  229eb5:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  229ebc:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229ec3:	ff d0                	call   rax
  229ec5:	66 89 45 ae          	mov    WORD PTR [rbp-0x52],ax
  229ec9:	66 83 7d ae 00       	cmp    WORD PTR [rbp-0x52],0x0
  229ece:	74 27                	je     229ef7 <formatFloatDecimal+0x707>
  229ed0:	66 8b 45 ae          	mov    ax,WORD PTR [rbp-0x52]
  229ed4:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229edb:	66 89 85 e8 fd ff ff 	mov    WORD PTR [rbp-0x218],ax
  229ee2:	e8 a9 1d fe ff       	call   20bc90 <__zig_return_error>
  229ee7:	66 8b 85 e8 fd ff ff 	mov    ax,WORD PTR [rbp-0x218]
  229eee:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  229ef5:	5d                   	pop    rbp
  229ef6:	c3                   	ret    
                printed += 1;
  229ef7:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  229efe:	48 83 c0 01          	add    rax,0x1
  229f02:	0f 92 c1             	setb   cl
  229f05:	48 89 85 e0 fd ff ff 	mov    QWORD PTR [rbp-0x220],rax
  229f0c:	88 8d df fd ff ff    	mov    BYTE PTR [rbp-0x221],cl
  229f12:	0f 82 9e 07 00 00    	jb     22a6b6 <formatFloatDecimal+0xec6>
  229f18:	e9 a9 07 00 00       	jmp    22a6c6 <formatFloatDecimal+0xed6>
            if (printed >= precision) {
  229f1d:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  229f24:	48 3b 85 d0 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x130]
  229f2b:	72 11                	jb     229f3e <formatFloatDecimal+0x74e>
  229f2d:	31 c0                	xor    eax,eax
  229f2f:	66 89 c1             	mov    cx,ax
                return;
  229f32:	66 89 c8             	mov    ax,cx
  229f35:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  229f3c:	5d                   	pop    rbp
  229f3d:	c3                   	ret    
            if (printed >= precision) {
  229f3e:	eb 00                	jmp    229f40 <formatFloatDecimal+0x750>
        if (float_decimal.exp <= 0) {
  229f40:	eb 02                	jmp    229f44 <formatFloatDecimal+0x754>
  229f42:	eb 00                	jmp    229f44 <formatFloatDecimal+0x754>
        debug.assert(precision >= printed);
  229f44:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  229f4b:	48 3b 85 b0 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x150]
  229f52:	0f 93 c1             	setae  cl
  229f55:	0f b6 f9             	movzx  edi,cl
  229f58:	e8 a3 10 fe ff       	call   20b000 <assert>
        if (num_digits_whole_no_pad + precision - printed < float_decimal.digits.len) {
  229f5d:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  229f64:	48 03 85 d0 fe ff ff 	add    rax,QWORD PTR [rbp-0x130]
  229f6b:	0f 92 c1             	setb   cl
  229f6e:	48 89 85 d0 fd ff ff 	mov    QWORD PTR [rbp-0x230],rax
  229f75:	88 8d cf fd ff ff    	mov    BYTE PTR [rbp-0x231],cl
  229f7b:	0f 82 95 07 00 00    	jb     22a716 <formatFloatDecimal+0xf26>
  229f81:	e9 a0 07 00 00       	jmp    22a726 <formatFloatDecimal+0xf36>
  229f86:	48 8d 85 d8 fe ff ff 	lea    rax,[rbp-0x128]
            try output(context, float_decimal.digits[num_digits_whole_no_pad .. num_digits_whole_no_pad + precision - printed]);
  229f8d:	48 8b 8d 28 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd8]
  229f94:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  229f9b:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  229fa2:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  229fa9:	48 03 bd d0 fe ff ff 	add    rdi,QWORD PTR [rbp-0x130]
  229fb0:	41 0f 92 c0          	setb   r8b
  229fb4:	48 89 85 c0 fd ff ff 	mov    QWORD PTR [rbp-0x240],rax
  229fbb:	48 89 8d b8 fd ff ff 	mov    QWORD PTR [rbp-0x248],rcx
  229fc2:	48 89 b5 b0 fd ff ff 	mov    QWORD PTR [rbp-0x250],rsi
  229fc9:	48 89 95 a8 fd ff ff 	mov    QWORD PTR [rbp-0x258],rdx
  229fd0:	48 89 bd a0 fd ff ff 	mov    QWORD PTR [rbp-0x260],rdi
  229fd7:	44 88 85 9f fd ff ff 	mov    BYTE PTR [rbp-0x261],r8b
  229fde:	0f 82 8d 07 00 00    	jb     22a771 <formatFloatDecimal+0xf81>
  229fe4:	e9 98 07 00 00       	jmp    22a781 <formatFloatDecimal+0xf91>
  229fe9:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
  229fed:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  229ff4:	66 89 85 9c fd ff ff 	mov    WORD PTR [rbp-0x264],ax
  229ffb:	e8 90 1c fe ff       	call   20bc90 <__zig_return_error>
  22a000:	66 8b 85 9c fd ff ff 	mov    ax,WORD PTR [rbp-0x264]
  22a007:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  22a00e:	5d                   	pop    rbp
  22a00f:	c3                   	ret    
  22a010:	31 c0                	xor    eax,eax
  22a012:	66 89 c1             	mov    cx,ax
            return;
  22a015:	66 89 c8             	mov    ax,cx
  22a018:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  22a01f:	5d                   	pop    rbp
  22a020:	c3                   	ret    
  22a021:	48 8d 85 d8 fe ff ff 	lea    rax,[rbp-0x128]
            try output(context, float_decimal.digits[num_digits_whole_no_pad..]);
  22a028:	48 8b 8d 28 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd8]
  22a02f:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  22a036:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  22a03d:	48 8b bd e0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x120]
  22a044:	48 39 fa             	cmp    rdx,rdi
  22a047:	48 89 85 90 fd ff ff 	mov    QWORD PTR [rbp-0x270],rax
  22a04e:	48 89 8d 88 fd ff ff 	mov    QWORD PTR [rbp-0x278],rcx
  22a055:	48 89 b5 80 fd ff ff 	mov    QWORD PTR [rbp-0x280],rsi
  22a05c:	48 89 95 78 fd ff ff 	mov    QWORD PTR [rbp-0x288],rdx
  22a063:	48 89 bd 70 fd ff ff 	mov    QWORD PTR [rbp-0x290],rdi
  22a06a:	0f 86 04 08 00 00    	jbe    22a874 <formatFloatDecimal+0x1084>
  22a070:	e9 ef 07 00 00       	jmp    22a864 <formatFloatDecimal+0x1074>
  22a075:	66 8b 85 7e ff ff ff 	mov    ax,WORD PTR [rbp-0x82]
  22a07c:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22a083:	66 89 85 6e fd ff ff 	mov    WORD PTR [rbp-0x292],ax
  22a08a:	e8 01 1c fe ff       	call   20bc90 <__zig_return_error>
  22a08f:	66 8b 85 6e fd ff ff 	mov    ax,WORD PTR [rbp-0x292]
  22a096:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  22a09d:	5d                   	pop    rbp
  22a09e:	c3                   	ret    
            printed += float_decimal.digits.len - num_digits_whole_no_pad;
  22a09f:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  22a0a6:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
  22a0ad:	48 2b 8d c0 fe ff ff 	sub    rcx,QWORD PTR [rbp-0x140]
  22a0b4:	0f 92 c2             	setb   dl
  22a0b7:	48 89 85 60 fd ff ff 	mov    QWORD PTR [rbp-0x2a0],rax
  22a0be:	48 89 8d 58 fd ff ff 	mov    QWORD PTR [rbp-0x2a8],rcx
  22a0c5:	88 95 57 fd ff ff    	mov    BYTE PTR [rbp-0x2a9],dl
  22a0cb:	0f 82 02 08 00 00    	jb     22a8d3 <formatFloatDecimal+0x10e3>
  22a0d1:	e9 0d 08 00 00       	jmp    22a8e3 <formatFloatDecimal+0x10f3>
            while (printed < precision) : (printed += 1) {
  22a0d6:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  22a0dd:	48 3b 85 d0 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x130]
  22a0e4:	73 7f                	jae    22a165 <formatFloatDecimal+0x975>
  22a0e6:	48 8d 15 33 99 01 00 	lea    rdx,[rip+0x19933]        # 243a20 <__unnamed_216>
                try output(context, "0");
  22a0ed:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  22a0f4:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  22a0fb:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22a102:	ff d0                	call   rax
  22a104:	66 89 85 7c ff ff ff 	mov    WORD PTR [rbp-0x84],ax
  22a10b:	66 83 bd 7c ff ff ff 	cmp    WORD PTR [rbp-0x84],0x0
  22a112:	00 
  22a113:	74 2a                	je     22a13f <formatFloatDecimal+0x94f>
  22a115:	66 8b 85 7c ff ff ff 	mov    ax,WORD PTR [rbp-0x84]
  22a11c:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22a123:	66 89 85 54 fd ff ff 	mov    WORD PTR [rbp-0x2ac],ax
  22a12a:	e8 61 1b fe ff       	call   20bc90 <__zig_return_error>
  22a12f:	66 8b 85 54 fd ff ff 	mov    ax,WORD PTR [rbp-0x2ac]
  22a136:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  22a13d:	5d                   	pop    rbp
  22a13e:	c3                   	ret    
            while (printed < precision) : (printed += 1) {
  22a13f:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  22a146:	48 83 c0 01          	add    rax,0x1
  22a14a:	0f 92 c1             	setb   cl
  22a14d:	48 89 85 48 fd ff ff 	mov    QWORD PTR [rbp-0x2b8],rax
  22a154:	88 8d 47 fd ff ff    	mov    BYTE PTR [rbp-0x2b9],cl
  22a15a:	0f 82 cb 07 00 00    	jb     22a92b <formatFloatDecimal+0x113b>
  22a160:	e9 d6 07 00 00       	jmp    22a93b <formatFloatDecimal+0x114b>
        if (num_digits_whole_no_pad + precision - printed < float_decimal.digits.len) {
  22a165:	eb 00                	jmp    22a167 <formatFloatDecimal+0x977>
    if (maybe_precision) |precision| {
  22a167:	e9 bb 03 00 00       	jmp    22a527 <formatFloatDecimal+0xd37>
        var num_digits_whole = if (float_decimal.exp > 0) @intCast(usize, float_decimal.exp) else 0;
  22a16c:	83 bd e8 fe ff ff 00 	cmp    DWORD PTR [rbp-0x118],0x0
  22a173:	7e 10                	jle    22a185 <formatFloatDecimal+0x995>
  22a175:	48 63 85 e8 fe ff ff 	movsxd rax,DWORD PTR [rbp-0x118]
  22a17c:	48 89 85 38 fd ff ff 	mov    QWORD PTR [rbp-0x2c8],rax
  22a183:	eb 0d                	jmp    22a192 <formatFloatDecimal+0x9a2>
  22a185:	31 c0                	xor    eax,eax
  22a187:	89 c1                	mov    ecx,eax
  22a189:	48 89 8d 38 fd ff ff 	mov    QWORD PTR [rbp-0x2c8],rcx
  22a190:	eb 00                	jmp    22a192 <formatFloatDecimal+0x9a2>
  22a192:	48 8b 85 38 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2c8]
  22a199:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
        var num_digits_whole_no_pad = math.min(num_digits_whole, float_decimal.digits.len);
  22a1a0:	48 8b bd 90 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x170]
  22a1a7:	48 8b b5 e0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x120]
  22a1ae:	e8 fd be ff ff       	call   2260b0 <min>
  22a1b3:	48 89 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rax
        if (num_digits_whole > 0) {
  22a1ba:	48 83 bd 90 fe ff ff 	cmp    QWORD PTR [rbp-0x170],0x0
  22a1c1:	00 
  22a1c2:	0f 86 21 01 00 00    	jbe    22a2e9 <formatFloatDecimal+0xaf9>
  22a1c8:	31 c0                	xor    eax,eax
  22a1ca:	89 c1                	mov    ecx,eax
  22a1cc:	48 8d 95 d8 fe ff ff 	lea    rdx,[rbp-0x128]
            try output(context, float_decimal.digits[0..num_digits_whole_no_pad]);
  22a1d3:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
  22a1da:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
  22a1e1:	4c 8b 85 88 fe ff ff 	mov    r8,QWORD PTR [rbp-0x178]
  22a1e8:	4c 8b 8d e0 fe ff ff 	mov    r9,QWORD PTR [rbp-0x120]
  22a1ef:	4c 39 c1             	cmp    rcx,r8
  22a1f2:	4c 89 8d 30 fd ff ff 	mov    QWORD PTR [rbp-0x2d0],r9
  22a1f9:	48 89 95 28 fd ff ff 	mov    QWORD PTR [rbp-0x2d8],rdx
  22a200:	48 89 b5 20 fd ff ff 	mov    QWORD PTR [rbp-0x2e0],rsi
  22a207:	48 89 bd 18 fd ff ff 	mov    QWORD PTR [rbp-0x2e8],rdi
  22a20e:	4c 89 85 10 fd ff ff 	mov    QWORD PTR [rbp-0x2f0],r8
  22a215:	0f 86 43 07 00 00    	jbe    22a95e <formatFloatDecimal+0x116e>
  22a21b:	e9 2e 07 00 00       	jmp    22a94e <formatFloatDecimal+0x115e>
  22a220:	66 8b 85 66 ff ff ff 	mov    ax,WORD PTR [rbp-0x9a]
  22a227:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22a22e:	66 89 85 0e fd ff ff 	mov    WORD PTR [rbp-0x2f2],ax
  22a235:	e8 56 1a fe ff       	call   20bc90 <__zig_return_error>
  22a23a:	66 8b 85 0e fd ff ff 	mov    ax,WORD PTR [rbp-0x2f2]
  22a241:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  22a248:	5d                   	pop    rbp
  22a249:	c3                   	ret    
            var i = num_digits_whole_no_pad;
  22a24a:	48 8b 85 88 fe ff ff 	mov    rax,QWORD PTR [rbp-0x178]
  22a251:	48 89 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rax
            while (i < num_digits_whole) : (i += 1) {
  22a258:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
  22a25f:	48 3b 85 90 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x170]
  22a266:	73 7f                	jae    22a2e7 <formatFloatDecimal+0xaf7>
  22a268:	48 8d 15 c9 97 01 00 	lea    rdx,[rip+0x197c9]        # 243a38 <__unnamed_217>
                try output(context, "0");
  22a26f:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  22a276:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  22a27d:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22a284:	ff d0                	call   rax
  22a286:	66 89 85 64 ff ff ff 	mov    WORD PTR [rbp-0x9c],ax
  22a28d:	66 83 bd 64 ff ff ff 	cmp    WORD PTR [rbp-0x9c],0x0
  22a294:	00 
  22a295:	74 2a                	je     22a2c1 <formatFloatDecimal+0xad1>
  22a297:	66 8b 85 64 ff ff ff 	mov    ax,WORD PTR [rbp-0x9c]
  22a29e:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22a2a5:	66 89 85 0c fd ff ff 	mov    WORD PTR [rbp-0x2f4],ax
  22a2ac:	e8 df 19 fe ff       	call   20bc90 <__zig_return_error>
  22a2b1:	66 8b 85 0c fd ff ff 	mov    ax,WORD PTR [rbp-0x2f4]
  22a2b8:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  22a2bf:	5d                   	pop    rbp
  22a2c0:	c3                   	ret    
            while (i < num_digits_whole) : (i += 1) {
  22a2c1:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
  22a2c8:	48 83 c0 01          	add    rax,0x1
  22a2cc:	0f 92 c1             	setb   cl
  22a2cf:	48 89 85 00 fd ff ff 	mov    QWORD PTR [rbp-0x300],rax
  22a2d6:	88 8d ff fc ff ff    	mov    BYTE PTR [rbp-0x301],cl
  22a2dc:	0f 82 fa 06 00 00    	jb     22a9dc <formatFloatDecimal+0x11ec>
  22a2e2:	e9 05 07 00 00       	jmp    22a9ec <formatFloatDecimal+0x11fc>
        if (num_digits_whole > 0) {
  22a2e7:	eb 59                	jmp    22a342 <formatFloatDecimal+0xb52>
  22a2e9:	48 8d 15 60 97 01 00 	lea    rdx,[rip+0x19760]        # 243a50 <__unnamed_218>
            try output(context, "0");
  22a2f0:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  22a2f7:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  22a2fe:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22a305:	ff d0                	call   rax
  22a307:	66 89 85 62 ff ff ff 	mov    WORD PTR [rbp-0x9e],ax
  22a30e:	66 83 bd 62 ff ff ff 	cmp    WORD PTR [rbp-0x9e],0x0
  22a315:	00 
  22a316:	74 2a                	je     22a342 <formatFloatDecimal+0xb52>
  22a318:	66 8b 85 62 ff ff ff 	mov    ax,WORD PTR [rbp-0x9e]
  22a31f:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22a326:	66 89 85 fc fc ff ff 	mov    WORD PTR [rbp-0x304],ax
  22a32d:	e8 5e 19 fe ff       	call   20bc90 <__zig_return_error>
  22a332:	66 8b 85 fc fc ff ff 	mov    ax,WORD PTR [rbp-0x304]
  22a339:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  22a340:	5d                   	pop    rbp
  22a341:	c3                   	ret    
        if (float_decimal.exp >= 0 and num_digits_whole_no_pad == float_decimal.digits.len) {
  22a342:	83 bd e8 fe ff ff 00 	cmp    DWORD PTR [rbp-0x118],0x0
  22a349:	0f 9d c0             	setge  al
  22a34c:	a8 01                	test   al,0x1
  22a34e:	88 85 fb fc ff ff    	mov    BYTE PTR [rbp-0x305],al
  22a354:	75 02                	jne    22a358 <formatFloatDecimal+0xb68>
  22a356:	eb 17                	jmp    22a36f <formatFloatDecimal+0xb7f>
  22a358:	48 8b 85 88 fe ff ff 	mov    rax,QWORD PTR [rbp-0x178]
  22a35f:	48 3b 85 e0 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x120]
  22a366:	0f 94 c1             	sete   cl
  22a369:	88 8d fb fc ff ff    	mov    BYTE PTR [rbp-0x305],cl
  22a36f:	8a 85 fb fc ff ff    	mov    al,BYTE PTR [rbp-0x305]
  22a375:	a8 01                	test   al,0x1
  22a377:	75 02                	jne    22a37b <formatFloatDecimal+0xb8b>
  22a379:	eb 11                	jmp    22a38c <formatFloatDecimal+0xb9c>
  22a37b:	31 c0                	xor    eax,eax
  22a37d:	66 89 c1             	mov    cx,ax
            return;
  22a380:	66 89 c8             	mov    ax,cx
  22a383:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  22a38a:	5d                   	pop    rbp
  22a38b:	c3                   	ret    
        if (float_decimal.exp >= 0 and num_digits_whole_no_pad == float_decimal.digits.len) {
  22a38c:	eb 00                	jmp    22a38e <formatFloatDecimal+0xb9e>
  22a38e:	48 8d 15 d3 96 01 00 	lea    rdx,[rip+0x196d3]        # 243a68 <__unnamed_219>
        try output(context, ".");
  22a395:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  22a39c:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  22a3a3:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22a3aa:	ff d0                	call   rax
  22a3ac:	66 89 85 60 ff ff ff 	mov    WORD PTR [rbp-0xa0],ax
  22a3b3:	66 83 bd 60 ff ff ff 	cmp    WORD PTR [rbp-0xa0],0x0
  22a3ba:	00 
  22a3bb:	74 2a                	je     22a3e7 <formatFloatDecimal+0xbf7>
  22a3bd:	66 8b 85 60 ff ff ff 	mov    ax,WORD PTR [rbp-0xa0]
  22a3c4:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22a3cb:	66 89 85 f8 fc ff ff 	mov    WORD PTR [rbp-0x308],ax
  22a3d2:	e8 b9 18 fe ff       	call   20bc90 <__zig_return_error>
  22a3d7:	66 8b 85 f8 fc ff ff 	mov    ax,WORD PTR [rbp-0x308]
  22a3de:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  22a3e5:	5d                   	pop    rbp
  22a3e6:	c3                   	ret    
        if (float_decimal.exp < 0) {
  22a3e7:	83 bd e8 fe ff ff 00 	cmp    DWORD PTR [rbp-0x118],0x0
  22a3ee:	0f 8d b3 00 00 00    	jge    22a4a7 <formatFloatDecimal+0xcb7>
  22a3f4:	31 c0                	xor    eax,eax
            const zero_digit_count = @intCast(usize, -float_decimal.exp);
  22a3f6:	2b 85 e8 fe ff ff    	sub    eax,DWORD PTR [rbp-0x118]
  22a3fc:	0f 90 c1             	seto   cl
  22a3ff:	89 85 f4 fc ff ff    	mov    DWORD PTR [rbp-0x30c],eax
  22a405:	88 8d f3 fc ff ff    	mov    BYTE PTR [rbp-0x30d],cl
  22a40b:	0f 80 ee 05 00 00    	jo     22a9ff <formatFloatDecimal+0x120f>
  22a411:	e9 f9 05 00 00       	jmp    22aa0f <formatFloatDecimal+0x121f>
            while (i < zero_digit_count) : (i += 1) {
  22a416:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  22a41d:	48 3b 85 78 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x188]
  22a424:	73 7f                	jae    22a4a5 <formatFloatDecimal+0xcb5>
  22a426:	48 8d 15 53 96 01 00 	lea    rdx,[rip+0x19653]        # 243a80 <__unnamed_220>
                try output(context, "0");
  22a42d:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  22a434:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  22a43b:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22a442:	ff d0                	call   rax
  22a444:	66 89 85 5e ff ff ff 	mov    WORD PTR [rbp-0xa2],ax
  22a44b:	66 83 bd 5e ff ff ff 	cmp    WORD PTR [rbp-0xa2],0x0
  22a452:	00 
  22a453:	74 2a                	je     22a47f <formatFloatDecimal+0xc8f>
  22a455:	66 8b 85 5e ff ff ff 	mov    ax,WORD PTR [rbp-0xa2]
  22a45c:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22a463:	66 89 85 f0 fc ff ff 	mov    WORD PTR [rbp-0x310],ax
  22a46a:	e8 21 18 fe ff       	call   20bc90 <__zig_return_error>
  22a46f:	66 8b 85 f0 fc ff ff 	mov    ax,WORD PTR [rbp-0x310]
  22a476:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  22a47d:	5d                   	pop    rbp
  22a47e:	c3                   	ret    
            while (i < zero_digit_count) : (i += 1) {
  22a47f:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  22a486:	48 83 c0 01          	add    rax,0x1
  22a48a:	0f 92 c1             	setb   cl
  22a48d:	48 89 85 e8 fc ff ff 	mov    QWORD PTR [rbp-0x318],rax
  22a494:	88 8d e7 fc ff ff    	mov    BYTE PTR [rbp-0x319],cl
  22a49a:	0f 82 8f 05 00 00    	jb     22aa2f <formatFloatDecimal+0x123f>
  22a4a0:	e9 9a 05 00 00       	jmp    22aa3f <formatFloatDecimal+0x124f>
        if (float_decimal.exp < 0) {
  22a4a5:	eb 02                	jmp    22a4a9 <formatFloatDecimal+0xcb9>
  22a4a7:	eb 00                	jmp    22a4a9 <formatFloatDecimal+0xcb9>
  22a4a9:	48 8d 85 d8 fe ff ff 	lea    rax,[rbp-0x128]
        try output(context, float_decimal.digits[num_digits_whole_no_pad..]);
  22a4b0:	48 8b 8d 28 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd8]
  22a4b7:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
  22a4be:	48 8b 95 88 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x178]
  22a4c5:	48 8b bd e0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x120]
  22a4cc:	48 39 fa             	cmp    rdx,rdi
  22a4cf:	48 89 85 d8 fc ff ff 	mov    QWORD PTR [rbp-0x328],rax
  22a4d6:	48 89 8d d0 fc ff ff 	mov    QWORD PTR [rbp-0x330],rcx
  22a4dd:	48 89 b5 c8 fc ff ff 	mov    QWORD PTR [rbp-0x338],rsi
  22a4e4:	48 89 95 c0 fc ff ff 	mov    QWORD PTR [rbp-0x340],rdx
  22a4eb:	48 89 bd b8 fc ff ff 	mov    QWORD PTR [rbp-0x348],rdi
  22a4f2:	0f 86 6a 05 00 00    	jbe    22aa62 <formatFloatDecimal+0x1272>
  22a4f8:	e9 55 05 00 00       	jmp    22aa52 <formatFloatDecimal+0x1262>
  22a4fd:	66 8b 85 46 ff ff ff 	mov    ax,WORD PTR [rbp-0xba]
  22a504:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22a50b:	66 89 85 b6 fc ff ff 	mov    WORD PTR [rbp-0x34a],ax
  22a512:	e8 79 17 fe ff       	call   20bc90 <__zig_return_error>
  22a517:	66 8b 85 b6 fc ff ff 	mov    ax,WORD PTR [rbp-0x34a]
  22a51e:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  22a525:	5d                   	pop    rbp
  22a526:	c3                   	ret    
  22a527:	31 c0                	xor    eax,eax
  22a529:	66 89 c1             	mov    cx,ax
) Errors!void {
  22a52c:	66 89 c8             	mov    ax,cx
  22a52f:	48 81 c4 a0 03 00 00 	add    rsp,0x3a0
  22a536:	5d                   	pop    rbp
  22a537:	c3                   	ret    
  22a538:	48 8d 3d 89 8c 01 00 	lea    rdi,[rip+0x18c89]        # 2431c8 <__unnamed_4>
  22a53f:	31 c0                	xor    eax,eax
  22a541:	89 c6                	mov    esi,eax
                while (i < precision) : (i += 1) {
  22a543:	e8 b8 10 fe ff       	call   20b600 <panic>
  22a548:	48 8b 85 48 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b8]
  22a54f:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
  22a556:	e9 1a f5 ff ff       	jmp    229a75 <formatFloatDecimal+0x285>
  22a55b:	48 8d 3d 76 8e 01 00 	lea    rdi,[rip+0x18e76]        # 2433d8 <__unnamed_20>
  22a562:	31 c0                	xor    eax,eax
  22a564:	89 c6                	mov    esi,eax
    var float_decimal = errol.errol3(x, buffer[0..]);
  22a566:	e8 95 10 fe ff       	call   20b600 <panic>
  22a56b:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  22a56f:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
  22a573:	48 8d 85 f0 fe ff ff 	lea    rax,[rbp-0x110]
  22a57a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  22a57e:	48 c7 45 e8 20 00 00 	mov    QWORD PTR [rbp-0x18],0x20
  22a585:	00 
  22a586:	c5 fb 10 85 38 fe ff 	vmovsd xmm0,QWORD PTR [rbp-0x1c8]
  22a58d:	ff 
  22a58e:	e8 5d 0f 00 00       	call   22b4f0 <errol3>
  22a593:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  22a597:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
  22a59e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  22a5a2:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
  22a5a9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  22a5ad:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
    if (maybe_precision) |precision| {
  22a5b4:	48 8b 85 60 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a0]
  22a5bb:	f6 40 08 01          	test   BYTE PTR [rax+0x8],0x1
  22a5bf:	0f 85 44 f6 ff ff    	jne    229c09 <formatFloatDecimal+0x419>
  22a5c5:	e9 a2 fb ff ff       	jmp    22a16c <formatFloatDecimal+0x97c>
  22a5ca:	48 8d 3d 07 8e 01 00 	lea    rdi,[rip+0x18e07]        # 2433d8 <__unnamed_20>
  22a5d1:	31 c0                	xor    eax,eax
  22a5d3:	89 c6                	mov    esi,eax
            try output(context, float_decimal.digits[0..num_digits_whole_no_pad]);
  22a5d5:	e8 26 10 fe ff       	call   20b600 <panic>
  22a5da:	48 8b 85 08 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1f8]
  22a5e1:	48 8b 8d 28 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d8]
  22a5e8:	48 39 c8             	cmp    rax,rcx
  22a5eb:	76 10                	jbe    22a5fd <formatFloatDecimal+0xe0d>
  22a5ed:	48 8d 3d e4 8d 01 00 	lea    rdi,[rip+0x18de4]        # 2433d8 <__unnamed_20>
  22a5f4:	31 c0                	xor    eax,eax
  22a5f6:	89 c6                	mov    esi,eax
  22a5f8:	e8 03 10 fe ff       	call   20b600 <panic>
  22a5fd:	48 8d 55 b8          	lea    rdx,[rbp-0x48]
  22a601:	48 8b 85 20 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e0]
  22a608:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22a60b:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
  22a60f:	48 8b 8d 08 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1f8]
  22a616:	48 83 e9 00          	sub    rcx,0x0
  22a61a:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
  22a61e:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22a625:	48 8b b5 10 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1f0]
  22a62c:	48 8b 8d 18 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1e8]
  22a633:	ff d1                	call   rcx
  22a635:	66 89 45 b6          	mov    WORD PTR [rbp-0x4a],ax
  22a639:	66 83 7d b6 00       	cmp    WORD PTR [rbp-0x4a],0x0
  22a63e:	0f 85 9f f6 ff ff    	jne    229ce3 <formatFloatDecimal+0x4f3>
  22a644:	e9 c1 f6 ff ff       	jmp    229d0a <formatFloatDecimal+0x51a>
  22a649:	48 8d 3d 78 8b 01 00 	lea    rdi,[rip+0x18b78]        # 2431c8 <__unnamed_4>
  22a650:	31 c0                	xor    eax,eax
  22a652:	89 c6                	mov    esi,eax
            while (i < num_digits_whole) : (i += 1) {
  22a654:	e8 a7 0f fe ff       	call   20b600 <panic>
  22a659:	48 8b 85 f8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x208]
  22a660:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
  22a667:	e9 ac f6 ff ff       	jmp    229d18 <formatFloatDecimal+0x528>
  22a66c:	48 8d 3d 55 8b 01 00 	lea    rdi,[rip+0x18b55]        # 2431c8 <__unnamed_4>
  22a673:	31 c0                	xor    eax,eax
  22a675:	89 c6                	mov    esi,eax
            const zero_digit_count = @intCast(usize, -float_decimal.exp);
  22a677:	e8 84 0f fe ff       	call   20b600 <panic>
  22a67c:	8b 85 ec fd ff ff    	mov    eax,DWORD PTR [rbp-0x214]
  22a682:	48 63 c8             	movsxd rcx,eax
  22a685:	48 89 8d a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rcx
            const zeros_to_print = math.min(zero_digit_count, precision);
  22a68c:	48 8b bd a8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x158]
  22a693:	48 8b b5 d0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x130]
  22a69a:	e8 11 ba ff ff       	call   2260b0 <min>
  22a69f:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
            var i: usize = 0;
  22a6a6:	48 c7 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],0x0
  22a6ad:	00 00 00 00 
            while (i < zeros_to_print) : (i += 1) {
  22a6b1:	e9 e1 f7 ff ff       	jmp    229e97 <formatFloatDecimal+0x6a7>
  22a6b6:	48 8d 3d 0b 8b 01 00 	lea    rdi,[rip+0x18b0b]        # 2431c8 <__unnamed_4>
  22a6bd:	31 c0                	xor    eax,eax
  22a6bf:	89 c6                	mov    esi,eax
                printed += 1;
  22a6c1:	e8 3a 0f fe ff       	call   20b600 <panic>
  22a6c6:	48 8b 85 e0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x220]
  22a6cd:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
            while (i < zeros_to_print) : (i += 1) {
  22a6d4:	48 8b 8d 98 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x168]
  22a6db:	48 83 c1 01          	add    rcx,0x1
  22a6df:	0f 92 c2             	setb   dl
  22a6e2:	48 89 8d a8 fc ff ff 	mov    QWORD PTR [rbp-0x358],rcx
  22a6e9:	88 95 a7 fc ff ff    	mov    BYTE PTR [rbp-0x359],dl
  22a6ef:	72 02                	jb     22a6f3 <formatFloatDecimal+0xf03>
  22a6f1:	eb 10                	jmp    22a703 <formatFloatDecimal+0xf13>
  22a6f3:	48 8d 3d ce 8a 01 00 	lea    rdi,[rip+0x18ace]        # 2431c8 <__unnamed_4>
  22a6fa:	31 c0                	xor    eax,eax
  22a6fc:	89 c6                	mov    esi,eax
  22a6fe:	e8 fd 0e fe ff       	call   20b600 <panic>
  22a703:	48 8b 85 a8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x358]
  22a70a:	48 89 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rax
  22a711:	e9 81 f7 ff ff       	jmp    229e97 <formatFloatDecimal+0x6a7>
  22a716:	48 8d 3d ab 8a 01 00 	lea    rdi,[rip+0x18aab]        # 2431c8 <__unnamed_4>
  22a71d:	31 c0                	xor    eax,eax
  22a71f:	89 c6                	mov    esi,eax
        if (num_digits_whole_no_pad + precision - printed < float_decimal.digits.len) {
  22a721:	e8 da 0e fe ff       	call   20b600 <panic>
  22a726:	48 8b 85 d0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x230]
  22a72d:	48 2b 85 b0 fe ff ff 	sub    rax,QWORD PTR [rbp-0x150]
  22a734:	0f 92 c1             	setb   cl
  22a737:	48 89 85 98 fc ff ff 	mov    QWORD PTR [rbp-0x368],rax
  22a73e:	88 8d 97 fc ff ff    	mov    BYTE PTR [rbp-0x369],cl
  22a744:	72 02                	jb     22a748 <formatFloatDecimal+0xf58>
  22a746:	eb 10                	jmp    22a758 <formatFloatDecimal+0xf68>
  22a748:	48 8d 3d 79 8a 01 00 	lea    rdi,[rip+0x18a79]        # 2431c8 <__unnamed_4>
  22a74f:	31 c0                	xor    eax,eax
  22a751:	89 c6                	mov    esi,eax
  22a753:	e8 a8 0e fe ff       	call   20b600 <panic>
  22a758:	48 8b 85 98 fc ff ff 	mov    rax,QWORD PTR [rbp-0x368]
  22a75f:	48 3b 85 e0 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x120]
  22a766:	0f 82 1a f8 ff ff    	jb     229f86 <formatFloatDecimal+0x796>
  22a76c:	e9 b0 f8 ff ff       	jmp    22a021 <formatFloatDecimal+0x831>
  22a771:	48 8d 3d 50 8a 01 00 	lea    rdi,[rip+0x18a50]        # 2431c8 <__unnamed_4>
  22a778:	31 c0                	xor    eax,eax
  22a77a:	89 c6                	mov    esi,eax
            try output(context, float_decimal.digits[num_digits_whole_no_pad .. num_digits_whole_no_pad + precision - printed]);
  22a77c:	e8 7f 0e fe ff       	call   20b600 <panic>
  22a781:	48 8b 85 a0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x260]
  22a788:	48 2b 85 b0 fe ff ff 	sub    rax,QWORD PTR [rbp-0x150]
  22a78f:	0f 92 c1             	setb   cl
  22a792:	48 89 85 88 fc ff ff 	mov    QWORD PTR [rbp-0x378],rax
  22a799:	88 8d 87 fc ff ff    	mov    BYTE PTR [rbp-0x379],cl
  22a79f:	72 02                	jb     22a7a3 <formatFloatDecimal+0xfb3>
  22a7a1:	eb 10                	jmp    22a7b3 <formatFloatDecimal+0xfc3>
  22a7a3:	48 8d 3d 1e 8a 01 00 	lea    rdi,[rip+0x18a1e]        # 2431c8 <__unnamed_4>
  22a7aa:	31 c0                	xor    eax,eax
  22a7ac:	89 c6                	mov    esi,eax
  22a7ae:	e8 4d 0e fe ff       	call   20b600 <panic>
  22a7b3:	48 8b 85 c0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x240]
  22a7ba:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  22a7be:	48 8b 95 a8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x258]
  22a7c5:	48 8b b5 88 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x378]
  22a7cc:	48 39 f2             	cmp    rdx,rsi
  22a7cf:	48 89 8d 78 fc ff ff 	mov    QWORD PTR [rbp-0x388],rcx
  22a7d6:	76 10                	jbe    22a7e8 <formatFloatDecimal+0xff8>
  22a7d8:	48 8d 3d f9 8b 01 00 	lea    rdi,[rip+0x18bf9]        # 2433d8 <__unnamed_20>
  22a7df:	31 c0                	xor    eax,eax
  22a7e1:	89 c6                	mov    esi,eax
  22a7e3:	e8 18 0e fe ff       	call   20b600 <panic>
  22a7e8:	48 8b 85 88 fc ff ff 	mov    rax,QWORD PTR [rbp-0x378]
  22a7ef:	48 8b 8d 78 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x388]
  22a7f6:	48 39 c8             	cmp    rax,rcx
  22a7f9:	76 10                	jbe    22a80b <formatFloatDecimal+0x101b>
  22a7fb:	48 8d 3d d6 8b 01 00 	lea    rdi,[rip+0x18bd6]        # 2433d8 <__unnamed_20>
  22a802:	31 c0                	xor    eax,eax
  22a804:	89 c6                	mov    esi,eax
  22a806:	e8 f5 0d fe ff       	call   20b600 <panic>
  22a80b:	48 8d 55 98          	lea    rdx,[rbp-0x68]
  22a80f:	48 8b 85 a8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x258]
  22a816:	48 8b 8d c0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x240]
  22a81d:	48 03 01             	add    rax,QWORD PTR [rcx]
  22a820:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  22a824:	48 8b 85 88 fc ff ff 	mov    rax,QWORD PTR [rbp-0x378]
  22a82b:	48 8b b5 a8 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x258]
  22a832:	48 29 f0             	sub    rax,rsi
  22a835:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  22a839:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22a840:	48 8b b5 b0 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x250]
  22a847:	48 8b 85 b8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x248]
  22a84e:	ff d0                	call   rax
  22a850:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  22a854:	66 83 7d 96 00       	cmp    WORD PTR [rbp-0x6a],0x0
  22a859:	0f 85 8a f7 ff ff    	jne    229fe9 <formatFloatDecimal+0x7f9>
  22a85f:	e9 ac f7 ff ff       	jmp    22a010 <formatFloatDecimal+0x820>
  22a864:	48 8d 3d 6d 8b 01 00 	lea    rdi,[rip+0x18b6d]        # 2433d8 <__unnamed_20>
  22a86b:	31 c0                	xor    eax,eax
  22a86d:	89 c6                	mov    esi,eax
            try output(context, float_decimal.digits[num_digits_whole_no_pad..]);
  22a86f:	e8 8c 0d fe ff       	call   20b600 <panic>
  22a874:	48 8d 55 80          	lea    rdx,[rbp-0x80]
  22a878:	48 8b 85 78 fd ff ff 	mov    rax,QWORD PTR [rbp-0x288]
  22a87f:	48 8b 8d 90 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x270]
  22a886:	48 03 01             	add    rax,QWORD PTR [rcx]
  22a889:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  22a88d:	48 8b 85 70 fd ff ff 	mov    rax,QWORD PTR [rbp-0x290]
  22a894:	48 8b b5 78 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x288]
  22a89b:	48 29 f0             	sub    rax,rsi
  22a89e:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  22a8a2:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22a8a9:	48 8b b5 80 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x280]
  22a8b0:	48 8b 85 88 fd ff ff 	mov    rax,QWORD PTR [rbp-0x278]
  22a8b7:	ff d0                	call   rax
  22a8b9:	66 89 85 7e ff ff ff 	mov    WORD PTR [rbp-0x82],ax
  22a8c0:	66 83 bd 7e ff ff ff 	cmp    WORD PTR [rbp-0x82],0x0
  22a8c7:	00 
  22a8c8:	0f 85 a7 f7 ff ff    	jne    22a075 <formatFloatDecimal+0x885>
  22a8ce:	e9 cc f7 ff ff       	jmp    22a09f <formatFloatDecimal+0x8af>
  22a8d3:	48 8d 3d ee 88 01 00 	lea    rdi,[rip+0x188ee]        # 2431c8 <__unnamed_4>
  22a8da:	31 c0                	xor    eax,eax
  22a8dc:	89 c6                	mov    esi,eax
            printed += float_decimal.digits.len - num_digits_whole_no_pad;
  22a8de:	e8 1d 0d fe ff       	call   20b600 <panic>
  22a8e3:	48 8b 85 60 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2a0]
  22a8ea:	48 8b 8d 58 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2a8]
  22a8f1:	48 01 c8             	add    rax,rcx
  22a8f4:	0f 92 c2             	setb   dl
  22a8f7:	48 89 85 70 fc ff ff 	mov    QWORD PTR [rbp-0x390],rax
  22a8fe:	88 95 6f fc ff ff    	mov    BYTE PTR [rbp-0x391],dl
  22a904:	72 02                	jb     22a908 <formatFloatDecimal+0x1118>
  22a906:	eb 10                	jmp    22a918 <formatFloatDecimal+0x1128>
  22a908:	48 8d 3d b9 88 01 00 	lea    rdi,[rip+0x188b9]        # 2431c8 <__unnamed_4>
  22a90f:	31 c0                	xor    eax,eax
  22a911:	89 c6                	mov    esi,eax
  22a913:	e8 e8 0c fe ff       	call   20b600 <panic>
  22a918:	48 8b 85 70 fc ff ff 	mov    rax,QWORD PTR [rbp-0x390]
  22a91f:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
            while (printed < precision) : (printed += 1) {
  22a926:	e9 ab f7 ff ff       	jmp    22a0d6 <formatFloatDecimal+0x8e6>
  22a92b:	48 8d 3d 96 88 01 00 	lea    rdi,[rip+0x18896]        # 2431c8 <__unnamed_4>
  22a932:	31 c0                	xor    eax,eax
  22a934:	89 c6                	mov    esi,eax
  22a936:	e8 c5 0c fe ff       	call   20b600 <panic>
  22a93b:	48 8b 85 48 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b8]
  22a942:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  22a949:	e9 88 f7 ff ff       	jmp    22a0d6 <formatFloatDecimal+0x8e6>
  22a94e:	48 8d 3d 83 8a 01 00 	lea    rdi,[rip+0x18a83]        # 2433d8 <__unnamed_20>
  22a955:	31 c0                	xor    eax,eax
  22a957:	89 c6                	mov    esi,eax
            try output(context, float_decimal.digits[0..num_digits_whole_no_pad]);
  22a959:	e8 a2 0c fe ff       	call   20b600 <panic>
  22a95e:	48 8b 85 10 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2f0]
  22a965:	48 8b 8d 30 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2d0]
  22a96c:	48 39 c8             	cmp    rax,rcx
  22a96f:	76 10                	jbe    22a981 <formatFloatDecimal+0x1191>
  22a971:	48 8d 3d 60 8a 01 00 	lea    rdi,[rip+0x18a60]        # 2433d8 <__unnamed_20>
  22a978:	31 c0                	xor    eax,eax
  22a97a:	89 c6                	mov    esi,eax
  22a97c:	e8 7f 0c fe ff       	call   20b600 <panic>
  22a981:	48 8d 95 68 ff ff ff 	lea    rdx,[rbp-0x98]
  22a988:	48 8b 85 28 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2d8]
  22a98f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22a992:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
  22a999:	48 8b 8d 10 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2f0]
  22a9a0:	48 83 e9 00          	sub    rcx,0x0
  22a9a4:	48 89 8d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rcx
  22a9ab:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22a9b2:	48 8b b5 18 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2e8]
  22a9b9:	48 8b 8d 20 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2e0]
  22a9c0:	ff d1                	call   rcx
  22a9c2:	66 89 85 66 ff ff ff 	mov    WORD PTR [rbp-0x9a],ax
  22a9c9:	66 83 bd 66 ff ff ff 	cmp    WORD PTR [rbp-0x9a],0x0
  22a9d0:	00 
  22a9d1:	0f 85 49 f8 ff ff    	jne    22a220 <formatFloatDecimal+0xa30>
  22a9d7:	e9 6e f8 ff ff       	jmp    22a24a <formatFloatDecimal+0xa5a>
  22a9dc:	48 8d 3d e5 87 01 00 	lea    rdi,[rip+0x187e5]        # 2431c8 <__unnamed_4>
  22a9e3:	31 c0                	xor    eax,eax
  22a9e5:	89 c6                	mov    esi,eax
            while (i < num_digits_whole) : (i += 1) {
  22a9e7:	e8 14 0c fe ff       	call   20b600 <panic>
  22a9ec:	48 8b 85 00 fd ff ff 	mov    rax,QWORD PTR [rbp-0x300]
  22a9f3:	48 89 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rax
  22a9fa:	e9 59 f8 ff ff       	jmp    22a258 <formatFloatDecimal+0xa68>
  22a9ff:	48 8d 3d c2 87 01 00 	lea    rdi,[rip+0x187c2]        # 2431c8 <__unnamed_4>
  22aa06:	31 c0                	xor    eax,eax
  22aa08:	89 c6                	mov    esi,eax
            const zero_digit_count = @intCast(usize, -float_decimal.exp);
  22aa0a:	e8 f1 0b fe ff       	call   20b600 <panic>
  22aa0f:	8b 85 f4 fc ff ff    	mov    eax,DWORD PTR [rbp-0x30c]
  22aa15:	48 63 c8             	movsxd rcx,eax
  22aa18:	48 89 8d 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rcx
            var i: usize = 0;
  22aa1f:	48 c7 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],0x0
  22aa26:	00 00 00 00 
            while (i < zero_digit_count) : (i += 1) {
  22aa2a:	e9 e7 f9 ff ff       	jmp    22a416 <formatFloatDecimal+0xc26>
  22aa2f:	48 8d 3d 92 87 01 00 	lea    rdi,[rip+0x18792]        # 2431c8 <__unnamed_4>
  22aa36:	31 c0                	xor    eax,eax
  22aa38:	89 c6                	mov    esi,eax
  22aa3a:	e8 c1 0b fe ff       	call   20b600 <panic>
  22aa3f:	48 8b 85 e8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x318]
  22aa46:	48 89 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rax
  22aa4d:	e9 c4 f9 ff ff       	jmp    22a416 <formatFloatDecimal+0xc26>
  22aa52:	48 8d 3d 7f 89 01 00 	lea    rdi,[rip+0x1897f]        # 2433d8 <__unnamed_20>
  22aa59:	31 c0                	xor    eax,eax
  22aa5b:	89 c6                	mov    esi,eax
        try output(context, float_decimal.digits[num_digits_whole_no_pad..]);
  22aa5d:	e8 9e 0b fe ff       	call   20b600 <panic>
  22aa62:	48 8d 95 48 ff ff ff 	lea    rdx,[rbp-0xb8]
  22aa69:	48 8b 85 c0 fc ff ff 	mov    rax,QWORD PTR [rbp-0x340]
  22aa70:	48 8b 8d d8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x328]
  22aa77:	48 03 01             	add    rax,QWORD PTR [rcx]
  22aa7a:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  22aa81:	48 8b 85 b8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x348]
  22aa88:	48 8b b5 c0 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x340]
  22aa8f:	48 29 f0             	sub    rax,rsi
  22aa92:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
  22aa99:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
  22aaa0:	48 8b b5 c8 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x338]
  22aaa7:	48 8b 85 d0 fc ff ff 	mov    rax,QWORD PTR [rbp-0x330]
  22aaae:	ff d0                	call   rax
  22aab0:	66 89 85 46 ff ff ff 	mov    WORD PTR [rbp-0xba],ax
  22aab7:	66 83 bd 46 ff ff ff 	cmp    WORD PTR [rbp-0xba],0x0
  22aabe:	00 
  22aabf:	0f 85 38 fa ff ff    	jne    22a4fd <formatFloatDecimal+0xd0d>
  22aac5:	e9 5d fa ff ff       	jmp    22a527 <formatFloatDecimal+0xd37>
  22aaca:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000022aad0 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertBefore>:
        pub fn insertBefore(list: *Self, node: *Node, new_node: *Node) void {
  22aad0:	55                   	push   rbp
  22aad1:	48 89 e5             	mov    rbp,rsp
  22aad4:	48 83 ec 40          	sub    rsp,0x40
  22aad8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  22aadc:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  22aae0:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
            new_node.next = node;
  22aae4:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  22aae8:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  22aaec:	48 89 72 08          	mov    QWORD PTR [rdx+0x8],rsi
            if (node.prev) |prev_node| {
  22aaf0:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  22aaf4:	48 83 3a 00          	cmp    QWORD PTR [rdx],0x0
  22aaf8:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  22aafc:	74 24                	je     22ab22 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertBefore+0x52>
  22aafe:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  22ab02:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22ab05:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
                new_node.prev = prev_node;
  22ab09:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22ab0d:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  22ab11:	48 89 11             	mov    QWORD PTR [rcx],rdx
                prev_node.next = new_node;
  22ab14:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  22ab18:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  22ab1c:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
            if (node.prev) |prev_node| {
  22ab20:	eb 16                	jmp    22ab38 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertBefore+0x68>
                new_node.prev = null;
  22ab22:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22ab26:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
                list.first = new_node;
  22ab2d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  22ab31:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22ab35:	48 89 08             	mov    QWORD PTR [rax],rcx
            node.prev = new_node;
  22ab38:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22ab3c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22ab40:	48 89 08             	mov    QWORD PTR [rax],rcx
            list.len += 1;
  22ab43:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  22ab47:	48 89 c1             	mov    rcx,rax
  22ab4a:	48 83 c1 10          	add    rcx,0x10
  22ab4e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  22ab52:	48 83 c0 01          	add    rax,0x1
  22ab56:	0f 92 c2             	setb   dl
  22ab59:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  22ab5d:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  22ab61:	88 55 c7             	mov    BYTE PTR [rbp-0x39],dl
  22ab64:	72 02                	jb     22ab68 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertBefore+0x98>
  22ab66:	eb 10                	jmp    22ab78 <BaseLinkedList([]u8,void,(struct []const u8 constant))_insertBefore+0xa8>
  22ab68:	48 8d 3d 59 86 01 00 	lea    rdi,[rip+0x18659]        # 2431c8 <__unnamed_4>
  22ab6f:	31 c0                	xor    eax,eax
  22ab71:	89 c6                	mov    esi,eax
  22ab73:	e8 88 0a fe ff       	call   20b600 <panic>
  22ab78:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  22ab7c:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  22ab80:	48 89 08             	mov    QWORD PTR [rax],rcx
        pub fn insertBefore(list: *Self, node: *Node, new_node: *Node) void {
  22ab83:	48 83 c4 40          	add    rsp,0x40
  22ab87:	5d                   	pop    rbp
  22ab88:	c3                   	ret    
  22ab89:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

000000000022ab90 <formatInt.119>:
pub fn formatInt(
  22ab90:	55                   	push   rbp
  22ab91:	48 89 e5             	mov    rbp,rsp
  22ab94:	41 56                	push   r14
  22ab96:	53                   	push   rbx
  22ab97:	48 83 ec 40          	sub    rsp,0x40
  22ab9b:	88 c8                	mov    al,cl
  22ab9d:	41 88 d2             	mov    r10b,dl
  22aba0:	4c 8b 5d 10          	mov    r11,QWORD PTR [rbp+0x10]
  22aba4:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
  22aba8:	44 88 55 e7          	mov    BYTE PTR [rbp-0x19],r10b
  22abac:	24 01                	and    al,0x1
  22abae:	88 45 e6             	mov    BYTE PTR [rbp-0x1a],al
  22abb1:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
  22abb5:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
        return formatIntUnsigned(value, base, uppercase, width, context, Errors, output);
  22abb9:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  22abbd:	8a 45 e7             	mov    al,BYTE PTR [rbp-0x19]
  22abc0:	44 8a 55 e6          	mov    r10b,BYTE PTR [rbp-0x1a]
  22abc4:	4c 8b 45 d8          	mov    r8,QWORD PTR [rbp-0x28]
  22abc8:	4c 8b 4d d0          	mov    r9,QWORD PTR [rbp-0x30]
  22abcc:	48 8b 5d 10          	mov    rbx,QWORD PTR [rbp+0x10]
  22abd0:	49 89 e6             	mov    r14,rsp
  22abd3:	49 89 1e             	mov    QWORD PTR [r14],rbx
  22abd6:	0f b6 d0             	movzx  edx,al
  22abd9:	41 0f b6 ca          	movzx  ecx,r10b
  22abdd:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  22abe1:	4c 89 5d c0          	mov    QWORD PTR [rbp-0x40],r11
  22abe5:	e8 d6 10 00 00       	call   22bcc0 <formatIntUnsigned.120>
  22abea:	66 83 f8 00          	cmp    ax,0x0
  22abee:	66 89 45 be          	mov    WORD PTR [rbp-0x42],ax
  22abf2:	74 0b                	je     22abff <formatInt.119+0x6f>
  22abf4:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  22abf8:	e8 93 10 fe ff       	call   20bc90 <__zig_return_error>
  22abfd:	eb 02                	jmp    22ac01 <formatInt.119+0x71>
  22abff:	eb 00                	jmp    22ac01 <formatInt.119+0x71>
  22ac01:	66 8b 45 be          	mov    ax,WORD PTR [rbp-0x42]
  22ac05:	48 83 c4 40          	add    rsp,0x40
  22ac09:	5b                   	pop    rbx
  22ac0a:	41 5e                	pop    r14
  22ac0c:	5d                   	pop    rbp
  22ac0d:	c3                   	ret    
  22ac0e:	66 90                	xchg   ax,ax

000000000022ac10 <formatIntUnsigned>:
        const new_width = if (width == 0) 0 else (width - 1);
        return formatIntUnsigned(new_value, base, uppercase, new_width, context, Errors, output);
    }
}

fn formatIntUnsigned(
  22ac10:	55                   	push   rbp
  22ac11:	48 89 e5             	mov    rbp,rsp
  22ac14:	41 56                	push   r14
  22ac16:	53                   	push   rbx
  22ac17:	48 81 ec 20 02 00 00 	sub    rsp,0x220
  22ac1e:	88 c8                	mov    al,cl
  22ac20:	41 88 d2             	mov    r10b,dl
  22ac23:	4c 8b 5d 10          	mov    r11,QWORD PTR [rbp+0x10]
  22ac27:	48 8d 1d d5 fb fd ff 	lea    rbx,[rip+0xfffffffffffdfbd5]        # 20a803 <__unnamed_221>
  22ac2e:	b9 40 00 00 00       	mov    ecx,0x40
  22ac33:	89 ca                	mov    edx,ecx
  22ac35:	4c 8d b5 f8 fe ff ff 	lea    r14,[rbp-0x108]
  22ac3c:	48 89 b5 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rsi
  22ac43:	44 88 95 4f ff ff ff 	mov    BYTE PTR [rbp-0xb1],r10b
  22ac4a:	24 01                	and    al,0x1
  22ac4c:	88 85 4e ff ff ff    	mov    BYTE PTR [rbp-0xb2],al
  22ac52:	4c 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],r8
  22ac59:	4c 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],r9
    comptime Errors: type,
    output: fn (@typeOf(context), []const u8) Errors!void,
) Errors!void {
    // max_int_digits accounts for the minus sign. when printing an unsigned
    // number we don't need to do that.
    var buf: [max_int_digits - 1]u8 = undefined;
  22ac60:	48 89 bd a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdi
  22ac67:	4c 89 f7             	mov    rdi,r14
  22ac6a:	48 89 de             	mov    rsi,rbx
  22ac6d:	4c 89 9d 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],r11
  22ac74:	e8 27 9c 00 00       	call   2348a0 <memcpy>
    var a = if (@sizeOf(@typeOf(value)) == 1) u8(value) else value;
  22ac79:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
  22ac80:	48 89 95 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rdx
    var index: usize = buf.len;
  22ac87:	48 c7 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],0x40
  22ac8e:	40 00 00 00 

    while (true) {
  22ac92:	eb 00                	jmp    22ac94 <formatIntUnsigned+0x84>
        const digit = a % base;
  22ac94:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  22ac9b:	0f b6 8d 4f ff ff ff 	movzx  ecx,BYTE PTR [rbp-0xb1]
  22aca2:	89 ca                	mov    edx,ecx
  22aca4:	48 83 fa 00          	cmp    rdx,0x0
  22aca8:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  22acaf:	48 89 95 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rdx
  22acb6:	0f 84 f6 01 00 00    	je     22aeb2 <formatIntUnsigned+0x2a2>
  22acbc:	e9 b4 01 00 00       	jmp    22ae75 <formatIntUnsigned+0x265>
        index -= 1;
        buf[index] = digitToChar(@intCast(u8, digit), uppercase);
        a /= base;
        if (a == 0) break;
  22acc1:	eb 02                	jmp    22acc5 <formatIntUnsigned+0xb5>
    while (true) {
  22acc3:	eb cd                	jmp    22ac92 <formatIntUnsigned+0x82>
    }

    const digits_buf = buf[index..];
  22acc5:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  22accc:	48 83 f8 40          	cmp    rax,0x40
  22acd0:	48 89 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rax
  22acd7:	0f 86 02 03 00 00    	jbe    22afdf <formatIntUnsigned+0x3cf>
  22acdd:	e9 ed 02 00 00       	jmp    22afcf <formatIntUnsigned+0x3bf>
    const padding = if (width > digits_buf.len) (width - digits_buf.len) else 0;
  22ace2:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  22ace9:	48 2b 85 d8 fe ff ff 	sub    rax,QWORD PTR [rbp-0x128]
  22acf0:	0f 92 c1             	setb   cl
  22acf3:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  22acfa:	88 8d 77 fe ff ff    	mov    BYTE PTR [rbp-0x189],cl
  22ad00:	0f 82 2b 03 00 00    	jb     22b031 <formatIntUnsigned+0x421>
  22ad06:	e9 36 03 00 00       	jmp    22b041 <formatIntUnsigned+0x431>
  22ad0b:	31 c0                	xor    eax,eax
  22ad0d:	89 c1                	mov    ecx,eax
  22ad0f:	48 89 8d 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rcx
  22ad16:	eb 00                	jmp    22ad18 <formatIntUnsigned+0x108>
  22ad18:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
  22ad1f:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax

    if (padding > index) {
  22ad26:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  22ad2d:	48 3b 85 e8 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x118]
  22ad34:	0f 86 ef 00 00 00    	jbe    22ae29 <formatIntUnsigned+0x219>
        const zero_byte: u8 = '0';
  22ad3a:	c6 85 c7 fe ff ff 30 	mov    BYTE PTR [rbp-0x139],0x30
        var leftover_padding = padding - index;
  22ad41:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  22ad48:	48 2b 85 e8 fe ff ff 	sub    rax,QWORD PTR [rbp-0x118]
  22ad4f:	0f 92 c1             	setb   cl
  22ad52:	48 89 85 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rax
  22ad59:	88 8d 5f fe ff ff    	mov    BYTE PTR [rbp-0x1a1],cl
  22ad5f:	0f 82 ef 02 00 00    	jb     22b054 <formatIntUnsigned+0x444>
  22ad65:	e9 fa 02 00 00       	jmp    22b064 <formatIntUnsigned+0x454>
        while (true) {
  22ad6a:	eb 00                	jmp    22ad6c <formatIntUnsigned+0x15c>
  22ad6c:	48 8d 15 25 8d 01 00 	lea    rdx,[rip+0x18d25]        # 243a98 <__unnamed_222>
            try output(context, (*[1]u8)(&zero_byte)[0..]);
  22ad73:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
  22ad77:	48 8b b5 38 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc8]
  22ad7e:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
  22ad85:	ff d0                	call   rax
  22ad87:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  22ad8b:	66 83 7d de 00       	cmp    WORD PTR [rbp-0x22],0x0
  22ad90:	74 2a                	je     22adbc <formatIntUnsigned+0x1ac>
  22ad92:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  22ad96:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
  22ad9d:	66 89 85 5c fe ff ff 	mov    WORD PTR [rbp-0x1a4],ax
  22ada4:	e8 e7 0e fe ff       	call   20bc90 <__zig_return_error>
  22ada9:	66 8b 85 5c fe ff ff 	mov    ax,WORD PTR [rbp-0x1a4]
  22adb0:	48 81 c4 20 02 00 00 	add    rsp,0x220
  22adb7:	5b                   	pop    rbx
  22adb8:	41 5e                	pop    r14
  22adba:	5d                   	pop    rbp
  22adbb:	c3                   	ret    
            leftover_padding -= 1;
  22adbc:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  22adc3:	48 83 e8 01          	sub    rax,0x1
  22adc7:	0f 92 c1             	setb   cl
  22adca:	48 89 85 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rax
  22add1:	88 8d 4f fe ff ff    	mov    BYTE PTR [rbp-0x1b1],cl
  22add7:	0f 82 9a 02 00 00    	jb     22b077 <formatIntUnsigned+0x467>
  22addd:	e9 a5 02 00 00       	jmp    22b087 <formatIntUnsigned+0x477>
            if (leftover_padding == 0) break;
  22ade2:	eb 02                	jmp    22ade6 <formatIntUnsigned+0x1d6>
        while (true) {
  22ade4:	eb 84                	jmp    22ad6a <formatIntUnsigned+0x15a>
  22ade6:	31 c0                	xor    eax,eax
  22ade8:	89 c1                	mov    ecx,eax
        }
        mem.set(u8, buf[0..index], '0');
  22adea:	48 8b 95 e8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x118]
  22adf1:	48 39 d1             	cmp    rcx,rdx
  22adf4:	48 89 95 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rdx
  22adfb:	0f 86 b7 02 00 00    	jbe    22b0b8 <formatIntUnsigned+0x4a8>
  22ae01:	e9 a2 02 00 00       	jmp    22b0a8 <formatIntUnsigned+0x498>
        return output(context, buf);
  22ae06:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
  22ae0d:	e8 7e 0e fe ff       	call   20bc90 <__zig_return_error>
  22ae12:	eb 02                	jmp    22ae16 <formatIntUnsigned+0x206>
  22ae14:	eb 00                	jmp    22ae16 <formatIntUnsigned+0x206>
  22ae16:	66 8b 85 3e fe ff ff 	mov    ax,WORD PTR [rbp-0x1c2]
  22ae1d:	48 81 c4 20 02 00 00 	add    rsp,0x220
  22ae24:	5b                   	pop    rbx
  22ae25:	41 5e                	pop    r14
  22ae27:	5d                   	pop    rbp
  22ae28:	c3                   	ret    
    } else {
        const padded_buf = buf[index - padding ..];
  22ae29:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  22ae30:	48 2b 85 c8 fe ff ff 	sub    rax,QWORD PTR [rbp-0x138]
  22ae37:	0f 92 c1             	setb   cl
  22ae3a:	48 89 85 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rax
  22ae41:	88 8d 2f fe ff ff    	mov    BYTE PTR [rbp-0x1d1],cl
  22ae47:	0f 82 08 03 00 00    	jb     22b155 <formatIntUnsigned+0x545>
  22ae4d:	e9 13 03 00 00       	jmp    22b165 <formatIntUnsigned+0x555>
        mem.set(u8, padded_buf[0..padding], '0');
        return output(context, padded_buf);
  22ae52:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
  22ae59:	e8 32 0e fe ff       	call   20bc90 <__zig_return_error>
  22ae5e:	eb 02                	jmp    22ae62 <formatIntUnsigned+0x252>
  22ae60:	eb 00                	jmp    22ae62 <formatIntUnsigned+0x252>
  22ae62:	66 8b 85 2c fe ff ff 	mov    ax,WORD PTR [rbp-0x1d4]
  22ae69:	48 81 c4 20 02 00 00 	add    rsp,0x220
  22ae70:	5b                   	pop    rbx
  22ae71:	41 5e                	pop    r14
  22ae73:	5d                   	pop    rbp
  22ae74:	c3                   	ret    
        const digit = a % base;
  22ae75:	48 8b 85 90 fe ff ff 	mov    rax,QWORD PTR [rbp-0x170]
  22ae7c:	31 c9                	xor    ecx,ecx
  22ae7e:	89 ca                	mov    edx,ecx
  22ae80:	48 8b b5 88 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x178]
  22ae87:	48 f7 f6             	div    rsi
  22ae8a:	48 89 95 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rdx
        index -= 1;
  22ae91:	48 8b 95 e8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x118]
  22ae98:	48 83 ea 01          	sub    rdx,0x1
  22ae9c:	40 0f 92 c7          	setb   dil
  22aea0:	48 89 95 20 fe ff ff 	mov    QWORD PTR [rbp-0x1e0],rdx
  22aea7:	40 88 bd 1f fe ff ff 	mov    BYTE PTR [rbp-0x1e1],dil
  22aeae:	72 12                	jb     22aec2 <formatIntUnsigned+0x2b2>
  22aeb0:	eb 20                	jmp    22aed2 <formatIntUnsigned+0x2c2>
  22aeb2:	48 8d 3d 2f 84 01 00 	lea    rdi,[rip+0x1842f]        # 2432e8 <__unnamed_15>
  22aeb9:	31 c0                	xor    eax,eax
  22aebb:	89 c6                	mov    esi,eax
        const digit = a % base;
  22aebd:	e8 3e 07 fe ff       	call   20b600 <panic>
  22aec2:	48 8d 3d ff 82 01 00 	lea    rdi,[rip+0x182ff]        # 2431c8 <__unnamed_4>
  22aec9:	31 c0                	xor    eax,eax
  22aecb:	89 c6                	mov    esi,eax
        index -= 1;
  22aecd:	e8 2e 07 fe ff       	call   20b600 <panic>
  22aed2:	48 8b 85 20 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e0]
  22aed9:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
        buf[index] = digitToChar(@intCast(u8, digit), uppercase);
  22aee0:	48 8b 8d e8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x118]
  22aee7:	48 83 f9 40          	cmp    rcx,0x40
  22aeeb:	48 89 8d 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rcx
  22aef2:	72 10                	jb     22af04 <formatIntUnsigned+0x2f4>
  22aef4:	48 8d 3d dd 84 01 00 	lea    rdi,[rip+0x184dd]        # 2433d8 <__unnamed_20>
  22aefb:	31 c0                	xor    eax,eax
  22aefd:	89 c6                	mov    esi,eax
  22aeff:	e8 fc 06 fe ff       	call   20b600 <panic>
  22af04:	48 8d 85 f8 fe ff ff 	lea    rax,[rbp-0x108]
  22af0b:	48 8b 8d 10 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1f0]
  22af12:	48 01 c8             	add    rax,rcx
  22af15:	48 8b 95 e0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x120]
  22af1c:	40 88 d6             	mov    sil,dl
  22af1f:	40 0f b6 fe          	movzx  edi,sil
  22af23:	41 89 f8             	mov    r8d,edi
  22af26:	4c 39 c2             	cmp    rdx,r8
  22af29:	48 89 85 08 fe ff ff 	mov    QWORD PTR [rbp-0x1f8],rax
  22af30:	40 88 b5 07 fe ff ff 	mov    BYTE PTR [rbp-0x1f9],sil
  22af37:	75 47                	jne    22af80 <formatIntUnsigned+0x370>
  22af39:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [rbp-0xb2]
  22af3f:	8a 8d 07 fe ff ff    	mov    cl,BYTE PTR [rbp-0x1f9]
  22af45:	0f b6 f9             	movzx  edi,cl
  22af48:	0f b6 f0             	movzx  esi,al
  22af4b:	e8 f0 13 00 00       	call   22c340 <digitToChar>
  22af50:	48 8b 95 08 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1f8]
  22af57:	88 02                	mov    BYTE PTR [rdx],al
        a /= base;
  22af59:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  22af60:	0f b6 b5 4f ff ff ff 	movzx  esi,BYTE PTR [rbp-0xb1]
  22af67:	41 89 f0             	mov    r8d,esi
  22af6a:	49 83 f8 00          	cmp    r8,0x0
  22af6e:	48 89 85 f8 fd ff ff 	mov    QWORD PTR [rbp-0x208],rax
  22af75:	4c 89 85 f0 fd ff ff 	mov    QWORD PTR [rbp-0x210],r8
  22af7c:	74 41                	je     22afbf <formatIntUnsigned+0x3af>
  22af7e:	eb 10                	jmp    22af90 <formatIntUnsigned+0x380>
  22af80:	48 8d 3d 01 85 01 00 	lea    rdi,[rip+0x18501]        # 243488 <__unnamed_22>
  22af87:	31 c0                	xor    eax,eax
  22af89:	89 c6                	mov    esi,eax
        buf[index] = digitToChar(@intCast(u8, digit), uppercase);
  22af8b:	e8 70 06 fe ff       	call   20b600 <panic>
        a /= base;
  22af90:	48 8b 85 f8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x208]
  22af97:	31 c9                	xor    ecx,ecx
  22af99:	89 ca                	mov    edx,ecx
  22af9b:	48 8b b5 f0 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x210]
  22afa2:	48 f7 f6             	div    rsi
  22afa5:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
        if (a == 0) break;
  22afac:	48 83 bd f0 fe ff ff 	cmp    QWORD PTR [rbp-0x110],0x0
  22afb3:	00 
  22afb4:	0f 84 07 fd ff ff    	je     22acc1 <formatIntUnsigned+0xb1>
  22afba:	e9 04 fd ff ff       	jmp    22acc3 <formatIntUnsigned+0xb3>
  22afbf:	48 8d 3d 7a 82 01 00 	lea    rdi,[rip+0x1827a]        # 243240 <__unnamed_7>
  22afc6:	31 c0                	xor    eax,eax
  22afc8:	89 c6                	mov    esi,eax
        a /= base;
  22afca:	e8 31 06 fe ff       	call   20b600 <panic>
  22afcf:	48 8d 3d 02 84 01 00 	lea    rdi,[rip+0x18402]        # 2433d8 <__unnamed_20>
  22afd6:	31 c0                	xor    eax,eax
  22afd8:	89 c6                	mov    esi,eax
    const digits_buf = buf[index..];
  22afda:	e8 21 06 fe ff       	call   20b600 <panic>
  22afdf:	b8 40 00 00 00       	mov    eax,0x40
  22afe4:	89 c1                	mov    ecx,eax
  22afe6:	48 8d 95 f8 fe ff ff 	lea    rdx,[rbp-0x108]
  22afed:	48 8b b5 80 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x180]
  22aff4:	48 01 f2             	add    rdx,rsi
  22aff7:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  22affb:	48 29 f1             	sub    rcx,rsi
  22affe:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  22b002:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  22b006:	48 89 8d d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rcx
  22b00d:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22b011:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
    const padding = if (width > digits_buf.len) (width - digits_buf.len) else 0;
  22b018:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  22b01f:	48 3b 8d d8 fe ff ff 	cmp    rcx,QWORD PTR [rbp-0x128]
  22b026:	0f 87 b6 fc ff ff    	ja     22ace2 <formatIntUnsigned+0xd2>
  22b02c:	e9 da fc ff ff       	jmp    22ad0b <formatIntUnsigned+0xfb>
  22b031:	48 8d 3d 90 81 01 00 	lea    rdi,[rip+0x18190]        # 2431c8 <__unnamed_4>
  22b038:	31 c0                	xor    eax,eax
  22b03a:	89 c6                	mov    esi,eax
  22b03c:	e8 bf 05 fe ff       	call   20b600 <panic>
  22b041:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
  22b048:	48 89 85 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rax
  22b04f:	e9 c4 fc ff ff       	jmp    22ad18 <formatIntUnsigned+0x108>
  22b054:	48 8d 3d 6d 81 01 00 	lea    rdi,[rip+0x1816d]        # 2431c8 <__unnamed_4>
  22b05b:	31 c0                	xor    eax,eax
  22b05d:	89 c6                	mov    esi,eax
        var leftover_padding = padding - index;
  22b05f:	e8 9c 05 fe ff       	call   20b600 <panic>
  22b064:	48 8b 85 60 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a0]
  22b06b:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
        while (true) {
  22b072:	e9 f3 fc ff ff       	jmp    22ad6a <formatIntUnsigned+0x15a>
  22b077:	48 8d 3d 4a 81 01 00 	lea    rdi,[rip+0x1814a]        # 2431c8 <__unnamed_4>
  22b07e:	31 c0                	xor    eax,eax
  22b080:	89 c6                	mov    esi,eax
            leftover_padding -= 1;
  22b082:	e8 79 05 fe ff       	call   20b600 <panic>
  22b087:	48 8b 85 50 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b0]
  22b08e:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
            if (leftover_padding == 0) break;
  22b095:	48 83 bd b8 fe ff ff 	cmp    QWORD PTR [rbp-0x148],0x0
  22b09c:	00 
  22b09d:	0f 84 3f fd ff ff    	je     22ade2 <formatIntUnsigned+0x1d2>
  22b0a3:	e9 3c fd ff ff       	jmp    22ade4 <formatIntUnsigned+0x1d4>
  22b0a8:	48 8d 3d 29 83 01 00 	lea    rdi,[rip+0x18329]        # 2433d8 <__unnamed_20>
  22b0af:	31 c0                	xor    eax,eax
  22b0b1:	89 c6                	mov    esi,eax
        mem.set(u8, buf[0..index], '0');
  22b0b3:	e8 48 05 fe ff       	call   20b600 <panic>
  22b0b8:	48 8b 85 40 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c0]
  22b0bf:	48 83 f8 40          	cmp    rax,0x40
  22b0c3:	76 10                	jbe    22b0d5 <formatIntUnsigned+0x4c5>
  22b0c5:	48 8d 3d 0c 83 01 00 	lea    rdi,[rip+0x1830c]        # 2433d8 <__unnamed_20>
  22b0cc:	31 c0                	xor    eax,eax
  22b0ce:	89 c6                	mov    esi,eax
  22b0d0:	e8 2b 05 fe ff       	call   20b600 <panic>
  22b0d5:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  22b0d9:	be 30 00 00 00       	mov    esi,0x30
  22b0de:	48 8d 85 f8 fe ff ff 	lea    rax,[rbp-0x108]
  22b0e5:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  22b0e9:	48 8b 85 40 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c0]
  22b0f0:	48 83 e8 00          	sub    rax,0x0
  22b0f4:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  22b0f8:	e8 43 13 00 00       	call   22c440 <set>
  22b0fd:	48 8d 95 78 ff ff ff 	lea    rdx,[rbp-0x88]
  22b104:	48 8d 85 f8 fe ff ff 	lea    rax,[rbp-0x108]
        return output(context, buf);
  22b10b:	48 8b 7d 10          	mov    rdi,QWORD PTR [rbp+0x10]
  22b10f:	48 8b b5 38 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc8]
  22b116:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  22b11d:	48 c7 45 80 40 00 00 	mov    QWORD PTR [rbp-0x80],0x40
  22b124:	00 
  22b125:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
  22b12c:	48 89 bd e8 fd ff ff 	mov    QWORD PTR [rbp-0x218],rdi
  22b133:	48 89 c7             	mov    rdi,rax
  22b136:	48 8b 8d e8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x218]
  22b13d:	ff d1                	call   rcx
  22b13f:	66 83 f8 00          	cmp    ax,0x0
  22b143:	66 89 85 3e fe ff ff 	mov    WORD PTR [rbp-0x1c2],ax
  22b14a:	0f 85 b6 fc ff ff    	jne    22ae06 <formatIntUnsigned+0x1f6>
  22b150:	e9 bf fc ff ff       	jmp    22ae14 <formatIntUnsigned+0x204>
  22b155:	48 8d 3d 6c 80 01 00 	lea    rdi,[rip+0x1806c]        # 2431c8 <__unnamed_4>
  22b15c:	31 c0                	xor    eax,eax
  22b15e:	89 c6                	mov    esi,eax
        const padded_buf = buf[index - padding ..];
  22b160:	e8 9b 04 fe ff       	call   20b600 <panic>
  22b165:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  22b16c:	48 83 f8 40          	cmp    rax,0x40
  22b170:	76 10                	jbe    22b182 <formatIntUnsigned+0x572>
  22b172:	48 8d 3d 5f 82 01 00 	lea    rdi,[rip+0x1825f]        # 2433d8 <__unnamed_20>
  22b179:	31 c0                	xor    eax,eax
  22b17b:	89 c6                	mov    esi,eax
  22b17d:	e8 7e 04 fe ff       	call   20b600 <panic>
  22b182:	31 c0                	xor    eax,eax
  22b184:	89 c1                	mov    ecx,eax
  22b186:	b8 40 00 00 00       	mov    eax,0x40
  22b18b:	89 c2                	mov    edx,eax
  22b18d:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  22b194:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
  22b19b:	48 01 fe             	add    rsi,rdi
  22b19e:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
  22b1a5:	48 29 fa             	sub    rdx,rdi
  22b1a8:	48 89 95 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdx
  22b1af:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  22b1b6:	48 89 95 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rdx
  22b1bd:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  22b1c4:	48 89 95 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rdx
        mem.set(u8, padded_buf[0..padding], '0');
  22b1cb:	48 8b 95 c8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x138]
  22b1d2:	48 8b b5 b0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x150]
  22b1d9:	48 39 d1             	cmp    rcx,rdx
  22b1dc:	48 89 b5 e0 fd ff ff 	mov    QWORD PTR [rbp-0x220],rsi
  22b1e3:	48 89 95 d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rdx
  22b1ea:	76 10                	jbe    22b1fc <formatIntUnsigned+0x5ec>
  22b1ec:	48 8d 3d e5 81 01 00 	lea    rdi,[rip+0x181e5]        # 2433d8 <__unnamed_20>
  22b1f3:	31 c0                	xor    eax,eax
  22b1f5:	89 c6                	mov    esi,eax
  22b1f7:	e8 04 04 fe ff       	call   20b600 <panic>
  22b1fc:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
  22b203:	48 8b 8d e0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x220]
  22b20a:	48 39 c8             	cmp    rax,rcx
  22b20d:	76 10                	jbe    22b21f <formatIntUnsigned+0x60f>
  22b20f:	48 8d 3d c2 81 01 00 	lea    rdi,[rip+0x181c2]        # 2433d8 <__unnamed_20>
  22b216:	31 c0                	xor    eax,eax
  22b218:	89 c6                	mov    esi,eax
  22b21a:	e8 e1 03 fe ff       	call   20b600 <panic>
  22b21f:	48 8d bd 58 ff ff ff 	lea    rdi,[rbp-0xa8]
  22b226:	be 30 00 00 00       	mov    esi,0x30
  22b22b:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
  22b232:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  22b239:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
  22b240:	48 83 e8 00          	sub    rax,0x0
  22b244:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  22b24b:	e8 f0 11 00 00       	call   22c440 <set>
  22b250:	48 8d 95 a8 fe ff ff 	lea    rdx,[rbp-0x158]
        return output(context, padded_buf);
  22b257:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
  22b25b:	48 8b b5 38 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc8]
  22b262:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
  22b269:	ff d0                	call   rax
  22b26b:	66 83 f8 00          	cmp    ax,0x0
  22b26f:	66 89 85 2c fe ff ff 	mov    WORD PTR [rbp-0x1d4],ax
  22b276:	0f 85 d6 fb ff ff    	jne    22ae52 <formatIntUnsigned+0x242>
  22b27c:	e9 df fb ff ff       	jmp    22ae60 <formatIntUnsigned+0x250>
  22b281:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22b288:	0f 1f 84 00 00 00 00 
  22b28f:	00 

000000000022b290 <charToDigit>:
    }

    return x;
}

pub fn charToDigit(c: u8, radix: u8) (error{InvalidCharacter}!u8) {
  22b290:	55                   	push   rbp
  22b291:	48 89 e5             	mov    rbp,rsp
  22b294:	48 83 ec 30          	sub    rsp,0x30
  22b298:	88 c8                	mov    al,cl
  22b29a:	41 88 d0             	mov    r8b,dl
  22b29d:	49 89 f9             	mov    r9,rdi
  22b2a0:	44 88 45 f7          	mov    BYTE PTR [rbp-0x9],r8b
  22b2a4:	88 45 f6             	mov    BYTE PTR [rbp-0xa],al
    const value = switch (c) {
  22b2a7:	8a 45 f7             	mov    al,BYTE PTR [rbp-0x9]
        '0'...'9' => c - '0',
  22b2aa:	3c 30                	cmp    al,0x30
  22b2ac:	41 0f 93 c0          	setae  r8b
  22b2b0:	3c 39                	cmp    al,0x39
  22b2b2:	41 0f 96 c2          	setbe  r10b
  22b2b6:	45 20 d0             	and    r8b,r10b
  22b2b9:	41 f6 c0 01          	test   r8b,0x1
  22b2bd:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
  22b2c1:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  22b2c5:	4c 89 4d d8          	mov    QWORD PTR [rbp-0x28],r9
  22b2c9:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
  22b2cc:	75 02                	jne    22b2d0 <charToDigit+0x40>
  22b2ce:	eb 19                	jmp    22b2e9 <charToDigit+0x59>
  22b2d0:	8a 45 f7             	mov    al,BYTE PTR [rbp-0x9]
  22b2d3:	2c 30                	sub    al,0x30
  22b2d5:	0f 92 c1             	setb   cl
  22b2d8:	f6 c1 01             	test   cl,0x1
  22b2db:	88 45 d6             	mov    BYTE PTR [rbp-0x2a],al
  22b2de:	0f 85 d2 00 00 00    	jne    22b3b6 <charToDigit+0x126>
  22b2e4:	e9 dd 00 00 00       	jmp    22b3c6 <charToDigit+0x136>
        'A'...'Z' => c - 'A' + 10,
  22b2e9:	8a 45 d7             	mov    al,BYTE PTR [rbp-0x29]
  22b2ec:	3c 41                	cmp    al,0x41
  22b2ee:	0f 93 c1             	setae  cl
  22b2f1:	3c 5a                	cmp    al,0x5a
  22b2f3:	0f 96 c2             	setbe  dl
  22b2f6:	20 d1                	and    cl,dl
  22b2f8:	f6 c1 01             	test   cl,0x1
  22b2fb:	75 02                	jne    22b2ff <charToDigit+0x6f>
  22b2fd:	eb 19                	jmp    22b318 <charToDigit+0x88>
  22b2ff:	8a 45 f7             	mov    al,BYTE PTR [rbp-0x9]
  22b302:	2c 41                	sub    al,0x41
  22b304:	0f 92 c1             	setb   cl
  22b307:	f6 c1 01             	test   cl,0x1
  22b30a:	88 45 d5             	mov    BYTE PTR [rbp-0x2b],al
  22b30d:	0f 85 bb 00 00 00    	jne    22b3ce <charToDigit+0x13e>
  22b313:	e9 c6 00 00 00       	jmp    22b3de <charToDigit+0x14e>
        'a'...'z' => c - 'a' + 10,
  22b318:	8a 45 d7             	mov    al,BYTE PTR [rbp-0x29]
  22b31b:	3c 61                	cmp    al,0x61
  22b31d:	0f 93 c1             	setae  cl
  22b320:	3c 7a                	cmp    al,0x7a
  22b322:	0f 96 c2             	setbe  dl
  22b325:	20 d1                	and    cl,dl
  22b327:	f6 c1 01             	test   cl,0x1
  22b32a:	75 02                	jne    22b32e <charToDigit+0x9e>
  22b32c:	eb 19                	jmp    22b347 <charToDigit+0xb7>
  22b32e:	8a 45 f7             	mov    al,BYTE PTR [rbp-0x9]
  22b331:	2c 61                	sub    al,0x61
  22b333:	0f 92 c1             	setb   cl
  22b336:	f6 c1 01             	test   cl,0x1
  22b339:	88 45 d4             	mov    BYTE PTR [rbp-0x2c],al
  22b33c:	0f 85 c9 00 00 00    	jne    22b40b <charToDigit+0x17b>
  22b342:	e9 d4 00 00 00       	jmp    22b41b <charToDigit+0x18b>
    const value = switch (c) {
  22b347:	eb 00                	jmp    22b349 <charToDigit+0xb9>
        else => return error.InvalidCharacter,
  22b349:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  22b34d:	e8 3e 09 fe ff       	call   20bc90 <__zig_return_error>
  22b352:	8b 05 d0 f5 fd ff    	mov    eax,DWORD PTR [rip+0xfffffffffffdf5d0]        # 20a928 <__unnamed_223>
  22b358:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  22b35c:	89 07                	mov    DWORD PTR [rdi],eax
  22b35e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  22b362:	48 83 c4 30          	add    rsp,0x30
  22b366:	5d                   	pop    rbp
  22b367:	c3                   	ret    
    const value = switch (c) {
  22b368:	8a 45 d3             	mov    al,BYTE PTR [rbp-0x2d]
  22b36b:	88 45 f5             	mov    BYTE PTR [rbp-0xb],al
    };

    if (value >= radix) return error.InvalidCharacter;
  22b36e:	8a 45 f5             	mov    al,BYTE PTR [rbp-0xb]
  22b371:	3a 45 f6             	cmp    al,BYTE PTR [rbp-0xa]
  22b374:	72 1f                	jb     22b395 <charToDigit+0x105>
  22b376:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  22b37a:	e8 11 09 fe ff       	call   20bc90 <__zig_return_error>
  22b37f:	8b 05 a3 f5 fd ff    	mov    eax,DWORD PTR [rip+0xfffffffffffdf5a3]        # 20a928 <__unnamed_223>
  22b385:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  22b389:	89 07                	mov    DWORD PTR [rdi],eax
  22b38b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  22b38f:	48 83 c4 30          	add    rsp,0x30
  22b393:	5d                   	pop    rbp
  22b394:	c3                   	ret    
  22b395:	eb 00                	jmp    22b397 <charToDigit+0x107>

    return value;
  22b397:	8a 45 f5             	mov    al,BYTE PTR [rbp-0xb]
  22b39a:	66 c7 45 f8 00 00    	mov    WORD PTR [rbp-0x8],0x0
  22b3a0:	88 45 fa             	mov    BYTE PTR [rbp-0x6],al
  22b3a3:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
  22b3a6:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  22b3aa:	89 0a                	mov    DWORD PTR [rdx],ecx
  22b3ac:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  22b3b0:	48 83 c4 30          	add    rsp,0x30
  22b3b4:	5d                   	pop    rbp
  22b3b5:	c3                   	ret    
  22b3b6:	48 8d 3d 0b 7e 01 00 	lea    rdi,[rip+0x17e0b]        # 2431c8 <__unnamed_4>
  22b3bd:	31 c0                	xor    eax,eax
  22b3bf:	89 c6                	mov    esi,eax
        '0'...'9' => c - '0',
  22b3c1:	e8 3a 02 fe ff       	call   20b600 <panic>
    const value = switch (c) {
  22b3c6:	8a 45 d6             	mov    al,BYTE PTR [rbp-0x2a]
  22b3c9:	88 45 d3             	mov    BYTE PTR [rbp-0x2d],al
  22b3cc:	eb 9a                	jmp    22b368 <charToDigit+0xd8>
  22b3ce:	48 8d 3d f3 7d 01 00 	lea    rdi,[rip+0x17df3]        # 2431c8 <__unnamed_4>
  22b3d5:	31 c0                	xor    eax,eax
  22b3d7:	89 c6                	mov    esi,eax
        'A'...'Z' => c - 'A' + 10,
  22b3d9:	e8 22 02 fe ff       	call   20b600 <panic>
  22b3de:	8a 45 d5             	mov    al,BYTE PTR [rbp-0x2b]
  22b3e1:	04 0a                	add    al,0xa
  22b3e3:	0f 92 c1             	setb   cl
  22b3e6:	f6 c1 01             	test   cl,0x1
  22b3e9:	88 45 d2             	mov    BYTE PTR [rbp-0x2e],al
  22b3ec:	75 02                	jne    22b3f0 <charToDigit+0x160>
  22b3ee:	eb 10                	jmp    22b400 <charToDigit+0x170>
  22b3f0:	48 8d 3d d1 7d 01 00 	lea    rdi,[rip+0x17dd1]        # 2431c8 <__unnamed_4>
  22b3f7:	31 c0                	xor    eax,eax
  22b3f9:	89 c6                	mov    esi,eax
  22b3fb:	e8 00 02 fe ff       	call   20b600 <panic>
    const value = switch (c) {
  22b400:	8a 45 d2             	mov    al,BYTE PTR [rbp-0x2e]
  22b403:	88 45 d3             	mov    BYTE PTR [rbp-0x2d],al
  22b406:	e9 5d ff ff ff       	jmp    22b368 <charToDigit+0xd8>
  22b40b:	48 8d 3d b6 7d 01 00 	lea    rdi,[rip+0x17db6]        # 2431c8 <__unnamed_4>
  22b412:	31 c0                	xor    eax,eax
  22b414:	89 c6                	mov    esi,eax
        'a'...'z' => c - 'a' + 10,
  22b416:	e8 e5 01 fe ff       	call   20b600 <panic>
  22b41b:	8a 45 d4             	mov    al,BYTE PTR [rbp-0x2c]
  22b41e:	04 0a                	add    al,0xa
  22b420:	0f 92 c1             	setb   cl
  22b423:	f6 c1 01             	test   cl,0x1
  22b426:	88 45 d1             	mov    BYTE PTR [rbp-0x2f],al
  22b429:	75 02                	jne    22b42d <charToDigit+0x19d>
  22b42b:	eb 10                	jmp    22b43d <charToDigit+0x1ad>
  22b42d:	48 8d 3d 94 7d 01 00 	lea    rdi,[rip+0x17d94]        # 2431c8 <__unnamed_4>
  22b434:	31 c0                	xor    eax,eax
  22b436:	89 c6                	mov    esi,eax
  22b438:	e8 c3 01 fe ff       	call   20b600 <panic>
    const value = switch (c) {
  22b43d:	8a 45 d1             	mov    al,BYTE PTR [rbp-0x2f]
  22b440:	88 45 d3             	mov    BYTE PTR [rbp-0x2d],al
  22b443:	e9 20 ff ff ff       	jmp    22b368 <charToDigit+0xd8>
  22b448:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  22b44f:	00 

000000000022b450 <signbit>:
const std = @import("../index.zig");
const math = std.math;
const assert = std.debug.assert;

pub fn signbit(x: var) bool {
  22b450:	55                   	push   rbp
  22b451:	48 89 e5             	mov    rbp,rsp
  22b454:	48 83 ec 10          	sub    rsp,0x10
  22b458:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    const T = @typeOf(x);
    return switch (T) {
        f16 => signbit16(x),
        f32 => signbit32(x),
        f64 => signbit64(x),
  22b45d:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  22b462:	e8 59 10 00 00       	call   22c4c0 <signbit64>
  22b467:	88 c1                	mov    cl,al
    return switch (T) {
  22b469:	88 4d f7             	mov    BYTE PTR [rbp-0x9],cl
  22b46c:	48 83 c4 10          	add    rsp,0x10
  22b470:	5d                   	pop    rbp
  22b471:	c3                   	ret    
  22b472:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22b479:	1f 84 00 00 00 00 00 

000000000022b480 <isNan>:
const std = @import("../index.zig");
const math = std.math;
const assert = std.debug.assert;

pub fn isNan(x: var) bool {
  22b480:	55                   	push   rbp
  22b481:	48 89 e5             	mov    rbp,rsp
  22b484:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
        f32 => {
            const bits = @bitCast(u32, x);
            return bits & 0x7FFFFFFF > 0x7F800000;
        },
        f64 => {
            const bits = @bitCast(u64, x);
  22b489:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  22b48e:	c5 fb 11 45 f0       	vmovsd QWORD PTR [rbp-0x10],xmm0
            return (bits & (@maxValue(u64) >> 1)) > (u64(0x7FF) << 52);
  22b493:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22b497:	b1 3f                	mov    cl,0x3f
  22b499:	88 ca                	mov    dl,cl
  22b49b:	c4 e2 e8 f5 c0       	bzhi   rax,rax,rdx
  22b4a0:	48 ba 00 00 00 00 00 	movabs rdx,0x7ff0000000000000
  22b4a7:	00 f0 7f 
  22b4aa:	48 29 d0             	sub    rax,rdx
  22b4ad:	0f 97 c1             	seta   cl
  22b4b0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  22b4b4:	88 c8                	mov    al,cl
  22b4b6:	5d                   	pop    rbp
  22b4b7:	c3                   	ret    
  22b4b8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  22b4bf:	00 

000000000022b4c0 <isPositiveInf>:
            @compileError("isInf not implemented for " ++ @typeName(T));
        },
    }
}

pub fn isPositiveInf(x: var) bool {
  22b4c0:	55                   	push   rbp
  22b4c1:	48 89 e5             	mov    rbp,rsp
  22b4c4:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
        },
        f32 => {
            return @bitCast(u32, x) == 0x7F800000;
        },
        f64 => {
            return @bitCast(u64, x) == 0x7FF << 52;
  22b4c9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  22b4cd:	48 b9 00 00 00 00 00 	movabs rcx,0x7ff0000000000000
  22b4d4:	00 f0 7f 
  22b4d7:	48 29 c8             	sub    rax,rcx
  22b4da:	0f 94 c2             	sete   dl
  22b4dd:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  22b4e1:	88 d0                	mov    al,dl
  22b4e3:	5d                   	pop    rbp
  22b4e4:	c3                   	ret    
  22b4e5:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22b4ec:	00 00 00 00 

000000000022b4f0 <errol3>:
        }
    }
}

/// Corrected Errol3 double to ASCII conversion.
pub fn errol3(value: f64, buffer: []u8) FloatDecimal {
  22b4f0:	55                   	push   rbp
  22b4f1:	48 89 e5             	mov    rbp,rsp
  22b4f4:	48 81 ec d0 00 00 00 	sub    rsp,0xd0
  22b4fb:	48 89 f8             	mov    rax,rdi
  22b4fe:	c5 fb 11 45 b8       	vmovsd QWORD PTR [rbp-0x48],xmm0
    const bits = @bitCast(u64, value);
  22b503:	c5 fb 10 45 b8       	vmovsd xmm0,QWORD PTR [rbp-0x48]
  22b508:	c4 e1 f9 7e c1       	vmovq  rcx,xmm0
  22b50d:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
    const i = tableLowerBound(bits);
  22b511:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  22b515:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
  22b51c:	48 89 cf             	mov    rdi,rcx
  22b51f:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  22b526:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
  22b52d:	e8 be 0f 00 00       	call   22c4f0 <tableLowerBound>
  22b532:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
    if (i < enum3.len and enum3[i] == bits) {
  22b536:	48 81 7d a8 b0 01 00 	cmp    QWORD PTR [rbp-0x58],0x1b0
  22b53d:	00 
  22b53e:	0f 92 c2             	setb   dl
  22b541:	f6 c2 01             	test   dl,0x1
  22b544:	88 95 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],dl
  22b54a:	75 02                	jne    22b54e <errol3+0x5e>
  22b54c:	eb 15                	jmp    22b563 <errol3+0x73>
  22b54e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  22b552:	48 3d b0 01 00 00    	cmp    rax,0x1b0
  22b558:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  22b55f:	72 7c                	jb     22b5dd <errol3+0xed>
  22b561:	eb 6a                	jmp    22b5cd <errol3+0xdd>
  22b563:	8a 85 67 ff ff ff    	mov    al,BYTE PTR [rbp-0x99]
  22b569:	a8 01                	test   al,0x1
  22b56b:	75 02                	jne    22b56f <errol3+0x7f>
  22b56d:	eb 19                	jmp    22b588 <errol3+0x98>
        const data = enum3_data[i];
  22b56f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  22b573:	48 3d b0 01 00 00    	cmp    rax,0x1b0
  22b579:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
  22b580:	0f 82 8b 00 00 00    	jb     22b611 <errol3+0x121>
  22b586:	eb 79                	jmp    22b601 <errol3+0x111>
    if (i < enum3.len and enum3[i] == bits) {
  22b588:	eb 00                	jmp    22b58a <errol3+0x9a>
  22b58a:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
            .digits = digits,
            .exp = data.exp,
        };
    }

    return errol3u(value, buffer);
  22b58e:	c5 fb 10 45 b8       	vmovsd xmm0,QWORD PTR [rbp-0x48]
  22b593:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
  22b59a:	e8 91 10 00 00       	call   22c630 <errol3u>
  22b59f:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
  22b5a3:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
  22b5aa:	48 89 37             	mov    QWORD PTR [rdi],rsi
  22b5ad:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  22b5b1:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  22b5b5:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  22b5b9:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  22b5bd:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  22b5c4:	48 81 c4 d0 00 00 00 	add    rsp,0xd0
  22b5cb:	5d                   	pop    rbp
  22b5cc:	c3                   	ret    
  22b5cd:	48 8d 3d 04 7e 01 00 	lea    rdi,[rip+0x17e04]        # 2433d8 <__unnamed_20>
  22b5d4:	31 c0                	xor    eax,eax
  22b5d6:	89 c6                	mov    esi,eax
    if (i < enum3.len and enum3[i] == bits) {
  22b5d8:	e8 23 00 fe ff       	call   20b600 <panic>
  22b5dd:	48 8d 05 54 68 fd ff 	lea    rax,[rip+0xfffffffffffd6854]        # 201e38 <enum3.12>
  22b5e4:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  22b5eb:	48 8b 04 c8          	mov    rax,QWORD PTR [rax+rcx*8]
  22b5ef:	48 3b 45 b0          	cmp    rax,QWORD PTR [rbp-0x50]
  22b5f3:	0f 94 c2             	sete   dl
  22b5f6:	88 95 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],dl
  22b5fc:	e9 62 ff ff ff       	jmp    22b563 <errol3+0x73>
  22b601:	48 8d 3d d0 7d 01 00 	lea    rdi,[rip+0x17dd0]        # 2433d8 <__unnamed_20>
  22b608:	31 c0                	xor    eax,eax
  22b60a:	89 c6                	mov    esi,eax
        const data = enum3_data[i];
  22b60c:	e8 ef ff fd ff       	call   20b600 <panic>
  22b611:	48 8d 05 c8 52 01 00 	lea    rax,[rip+0x152c8]        # 2408e0 <enum3_data.13>
  22b618:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
  22b61f:	48 6b d1 18          	imul   rdx,rcx,0x18
  22b623:	48 01 d0             	add    rax,rdx
  22b626:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  22b629:	48 89 55 90          	mov    QWORD PTR [rbp-0x70],rdx
  22b62d:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
  22b631:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  22b635:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  22b639:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        const digits = buffer[1 .. data.str.len + 1];
  22b63d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  22b641:	48 83 c0 01          	add    rax,0x1
  22b645:	40 0f 92 c6          	setb   sil
  22b649:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  22b650:	40 88 b5 47 ff ff ff 	mov    BYTE PTR [rbp-0xb9],sil
  22b657:	72 02                	jb     22b65b <errol3+0x16b>
  22b659:	eb 10                	jmp    22b66b <errol3+0x17b>
  22b65b:	48 8d 3d 66 7b 01 00 	lea    rdi,[rip+0x17b66]        # 2431c8 <__unnamed_4>
  22b662:	31 c0                	xor    eax,eax
  22b664:	89 c6                	mov    esi,eax
  22b666:	e8 95 ff fd ff       	call   20b600 <panic>
  22b66b:	b8 01 00 00 00       	mov    eax,0x1
  22b670:	89 c1                	mov    ecx,eax
  22b672:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  22b679:	48 8b 72 08          	mov    rsi,QWORD PTR [rdx+0x8]
  22b67d:	48 8b bd 48 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb8]
  22b684:	48 39 f9             	cmp    rcx,rdi
  22b687:	48 89 b5 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rsi
  22b68e:	76 10                	jbe    22b6a0 <errol3+0x1b0>
  22b690:	48 8d 3d 41 7d 01 00 	lea    rdi,[rip+0x17d41]        # 2433d8 <__unnamed_20>
  22b697:	31 c0                	xor    eax,eax
  22b699:	89 c6                	mov    esi,eax
  22b69b:	e8 60 ff fd ff       	call   20b600 <panic>
  22b6a0:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  22b6a7:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
  22b6ae:	48 39 c8             	cmp    rax,rcx
  22b6b1:	76 10                	jbe    22b6c3 <errol3+0x1d3>
  22b6b3:	48 8d 3d 1e 7d 01 00 	lea    rdi,[rip+0x17d1e]        # 2433d8 <__unnamed_20>
  22b6ba:	31 c0                	xor    eax,eax
  22b6bc:	89 c6                	mov    esi,eax
  22b6be:	e8 3d ff fd ff       	call   20b600 <panic>
  22b6c3:	48 8d 7d 80          	lea    rdi,[rbp-0x80]
  22b6c7:	48 8d 75 90          	lea    rsi,[rbp-0x70]
  22b6cb:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  22b6d2:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22b6d5:	48 83 c1 01          	add    rcx,0x1
  22b6d9:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  22b6dd:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
  22b6e4:	48 83 e9 01          	sub    rcx,0x1
  22b6e8:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  22b6ec:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  22b6f0:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
  22b6f4:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  22b6f8:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
        mem.copy(u8, digits, data.str);
  22b6fc:	e8 cf 95 ff ff       	call   224cd0 <copy>
            .exp = data.exp,
  22b701:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
        return FloatDecimal{
  22b704:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  22b708:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  22b70c:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  22b710:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  22b714:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
  22b717:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  22b71b:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  22b722:	48 89 01             	mov    QWORD PTR [rcx],rax
  22b725:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  22b729:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  22b72d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22b731:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  22b735:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  22b73c:	48 81 c4 d0 00 00 00 	add    rsp,0xd0
  22b743:	5d                   	pop    rbp
  22b744:	c3                   	ret    
  22b745:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22b74c:	00 00 00 00 

000000000022b750 <roundToPrecision>:
pub fn roundToPrecision(float_decimal: *FloatDecimal, precision: usize, mode: RoundMode) void {
  22b750:	55                   	push   rbp
  22b751:	48 89 e5             	mov    rbp,rsp
  22b754:	48 81 ec 30 01 00 00 	sub    rsp,0x130
  22b75b:	88 d0                	mov    al,dl
  22b75d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  22b761:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  22b765:	24 01                	and    al,0x1
  22b767:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
    var round_digit: usize = 0;
  22b76a:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
  22b771:	00 
    switch (mode) {
  22b772:	8a 45 df             	mov    al,BYTE PTR [rbp-0x21]
  22b775:	84 c0                	test   al,al
  22b777:	88 45 b6             	mov    BYTE PTR [rbp-0x4a],al
  22b77a:	75 7f                	jne    22b7fb <roundToPrecision+0xab>
  22b77c:	eb 00                	jmp    22b77e <roundToPrecision+0x2e>
  22b77e:	8a 45 b6             	mov    al,BYTE PTR [rbp-0x4a]
  22b781:	f6 d0                	not    al
  22b783:	a8 01                	test   al,0x1
  22b785:	0f 84 90 00 00 00    	je     22b81b <roundToPrecision+0xcb>
  22b78b:	eb 00                	jmp    22b78d <roundToPrecision+0x3d>
            if (float_decimal.exp >= 0) {
  22b78d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22b791:	83 78 10 00          	cmp    DWORD PTR [rax+0x10],0x0
  22b795:	7c 24                	jl     22b7bb <roundToPrecision+0x6b>
                round_digit = precision + @intCast(usize, float_decimal.exp);
  22b797:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  22b79b:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22b79f:	48 63 49 10          	movsxd rcx,DWORD PTR [rcx+0x10]
  22b7a3:	48 01 c8             	add    rax,rcx
  22b7a6:	0f 92 c2             	setb   dl
  22b7a9:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  22b7ad:	88 55 a7             	mov    BYTE PTR [rbp-0x59],dl
  22b7b0:	0f 82 4b 01 00 00    	jb     22b901 <roundToPrecision+0x1b1>
  22b7b6:	e9 56 01 00 00       	jmp    22b911 <roundToPrecision+0x1c1>
  22b7bb:	31 c0                	xor    eax,eax
                const min_exp_required = @intCast(usize, -float_decimal.exp);
  22b7bd:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22b7c1:	2b 41 10             	sub    eax,DWORD PTR [rcx+0x10]
  22b7c4:	0f 90 c2             	seto   dl
  22b7c7:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
  22b7ca:	88 55 9f             	mov    BYTE PTR [rbp-0x61],dl
  22b7cd:	0f 80 4b 01 00 00    	jo     22b91e <roundToPrecision+0x1ce>
  22b7d3:	e9 56 01 00 00       	jmp    22b92e <roundToPrecision+0x1de>
                    round_digit = precision - min_exp_required;
  22b7d8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  22b7dc:	48 2b 45 c8          	sub    rax,QWORD PTR [rbp-0x38]
  22b7e0:	0f 92 c1             	setb   cl
  22b7e3:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  22b7e7:	88 4d 8f             	mov    BYTE PTR [rbp-0x71],cl
  22b7ea:	0f 82 5b 01 00 00    	jb     22b94b <roundToPrecision+0x1fb>
  22b7f0:	e9 66 01 00 00       	jmp    22b95b <roundToPrecision+0x20b>
                if (precision > min_exp_required) {
  22b7f5:	eb 00                	jmp    22b7f7 <roundToPrecision+0xa7>
            if (float_decimal.exp >= 0) {
  22b7f7:	eb 00                	jmp    22b7f9 <roundToPrecision+0xa9>
    switch (mode) {
  22b7f9:	eb 30                	jmp    22b82b <roundToPrecision+0xdb>
            round_digit = 1 + precision;
  22b7fb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  22b7ff:	48 83 c0 01          	add    rax,0x1
  22b803:	0f 92 c1             	setb   cl
  22b806:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  22b80a:	88 8d 7f ff ff ff    	mov    BYTE PTR [rbp-0x81],cl
  22b810:	0f 82 52 01 00 00    	jb     22b968 <roundToPrecision+0x218>
  22b816:	e9 5d 01 00 00       	jmp    22b978 <roundToPrecision+0x228>
  22b81b:	48 8d 3d de 7a 01 00 	lea    rdi,[rip+0x17ade]        # 243300 <__unnamed_13>
  22b822:	31 c0                	xor    eax,eax
  22b824:	89 c6                	mov    esi,eax
    switch (mode) {
  22b826:	e8 d5 fd fd ff       	call   20b600 <panic>
    if (round_digit < float_decimal.digits.len and float_decimal.digits[round_digit] - '0' >= 5) {
  22b82b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  22b82f:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22b833:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22b837:	0f 92 c2             	setb   dl
  22b83a:	f6 c2 01             	test   dl,0x1
  22b83d:	88 95 7e ff ff ff    	mov    BYTE PTR [rbp-0x82],dl
  22b843:	75 02                	jne    22b847 <roundToPrecision+0xf7>
  22b845:	eb 25                	jmp    22b86c <roundToPrecision+0x11c>
  22b847:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22b84b:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  22b84f:	48 3b 48 08          	cmp    rcx,QWORD PTR [rax+0x8]
  22b853:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  22b85a:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
  22b861:	0f 82 2e 01 00 00    	jb     22b995 <roundToPrecision+0x245>
  22b867:	e9 19 01 00 00       	jmp    22b985 <roundToPrecision+0x235>
  22b86c:	8a 85 7e ff ff ff    	mov    al,BYTE PTR [rbp-0x82]
  22b872:	a8 01                	test   al,0x1
  22b874:	75 02                	jne    22b878 <roundToPrecision+0x128>
  22b876:	eb 7e                	jmp    22b8f6 <roundToPrecision+0x1a6>
  22b878:	bf 01 00 00 00       	mov    edi,0x1
        assert(round_digit >= 0);
  22b87d:	e8 7e f7 fd ff       	call   20b000 <assert>
        var i = round_digit;
  22b882:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  22b886:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
        while (true) {
  22b88a:	eb 00                	jmp    22b88c <roundToPrecision+0x13c>
            if (i == 0) {
  22b88c:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
  22b891:	75 33                	jne    22b8c6 <roundToPrecision+0x176>
                float_decimal.exp += 1;
  22b893:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22b897:	48 89 c1             	mov    rcx,rax
  22b89a:	48 83 c1 10          	add    rcx,0x10
  22b89e:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
  22b8a1:	ff c2                	inc    edx
  22b8a3:	40 0f 90 c6          	seto   sil
  22b8a7:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
  22b8ae:	89 95 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],edx
  22b8b4:	40 88 b5 5b ff ff ff 	mov    BYTE PTR [rbp-0xa5],sil
  22b8bb:	0f 80 26 01 00 00    	jo     22b9e7 <roundToPrecision+0x297>
  22b8c1:	e9 31 01 00 00       	jmp    22b9f7 <roundToPrecision+0x2a7>
            if (i == 0) {
  22b8c6:	eb 00                	jmp    22b8c8 <roundToPrecision+0x178>
            i -= 1;
  22b8c8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  22b8cc:	48 83 e8 01          	sub    rax,0x1
  22b8d0:	0f 92 c1             	setb   cl
  22b8d3:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
  22b8da:	88 8d 4f ff ff ff    	mov    BYTE PTR [rbp-0xb1],cl
  22b8e0:	0f 82 55 02 00 00    	jb     22bb3b <roundToPrecision+0x3eb>
  22b8e6:	e9 60 02 00 00       	jmp    22bb4b <roundToPrecision+0x3fb>
                return;
  22b8eb:	48 81 c4 30 01 00 00 	add    rsp,0x130
  22b8f2:	5d                   	pop    rbp
  22b8f3:	c3                   	ret    
        while (true) {
  22b8f4:	eb 94                	jmp    22b88a <roundToPrecision+0x13a>
    if (round_digit < float_decimal.digits.len and float_decimal.digits[round_digit] - '0' >= 5) {
  22b8f6:	eb 00                	jmp    22b8f8 <roundToPrecision+0x1a8>
pub fn roundToPrecision(float_decimal: *FloatDecimal, precision: usize, mode: RoundMode) void {
  22b8f8:	48 81 c4 30 01 00 00 	add    rsp,0x130
  22b8ff:	5d                   	pop    rbp
  22b900:	c3                   	ret    
  22b901:	48 8d 3d c0 78 01 00 	lea    rdi,[rip+0x178c0]        # 2431c8 <__unnamed_4>
  22b908:	31 c0                	xor    eax,eax
  22b90a:	89 c6                	mov    esi,eax
                round_digit = precision + @intCast(usize, float_decimal.exp);
  22b90c:	e8 ef fc fd ff       	call   20b600 <panic>
  22b911:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  22b915:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
            if (float_decimal.exp >= 0) {
  22b919:	e9 db fe ff ff       	jmp    22b7f9 <roundToPrecision+0xa9>
  22b91e:	48 8d 3d a3 78 01 00 	lea    rdi,[rip+0x178a3]        # 2431c8 <__unnamed_4>
  22b925:	31 c0                	xor    eax,eax
  22b927:	89 c6                	mov    esi,eax
                const min_exp_required = @intCast(usize, -float_decimal.exp);
  22b929:	e8 d2 fc fd ff       	call   20b600 <panic>
  22b92e:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
  22b931:	48 63 c8             	movsxd rcx,eax
  22b934:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
                if (precision > min_exp_required) {
  22b938:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  22b93c:	48 3b 4d c8          	cmp    rcx,QWORD PTR [rbp-0x38]
  22b940:	0f 87 92 fe ff ff    	ja     22b7d8 <roundToPrecision+0x88>
  22b946:	e9 aa fe ff ff       	jmp    22b7f5 <roundToPrecision+0xa5>
  22b94b:	48 8d 3d 76 78 01 00 	lea    rdi,[rip+0x17876]        # 2431c8 <__unnamed_4>
  22b952:	31 c0                	xor    eax,eax
  22b954:	89 c6                	mov    esi,eax
                    round_digit = precision - min_exp_required;
  22b956:	e8 a5 fc fd ff       	call   20b600 <panic>
  22b95b:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  22b95f:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
                if (precision > min_exp_required) {
  22b963:	e9 8f fe ff ff       	jmp    22b7f7 <roundToPrecision+0xa7>
  22b968:	48 8d 3d 59 78 01 00 	lea    rdi,[rip+0x17859]        # 2431c8 <__unnamed_4>
  22b96f:	31 c0                	xor    eax,eax
  22b971:	89 c6                	mov    esi,eax
            round_digit = 1 + precision;
  22b973:	e8 88 fc fd ff       	call   20b600 <panic>
  22b978:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  22b97c:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
    switch (mode) {
  22b980:	e9 a6 fe ff ff       	jmp    22b82b <roundToPrecision+0xdb>
  22b985:	48 8d 3d 4c 7a 01 00 	lea    rdi,[rip+0x17a4c]        # 2433d8 <__unnamed_20>
  22b98c:	31 c0                	xor    eax,eax
  22b98e:	89 c6                	mov    esi,eax
    if (round_digit < float_decimal.digits.len and float_decimal.digits[round_digit] - '0' >= 5) {
  22b990:	e8 6b fc fd ff       	call   20b600 <panic>
  22b995:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  22b99c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22b99f:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  22b9a6:	40 8a 34 11          	mov    sil,BYTE PTR [rcx+rdx*1]
  22b9aa:	40 80 ee 30          	sub    sil,0x30
  22b9ae:	40 0f 92 c7          	setb   dil
  22b9b2:	40 f6 c7 01          	test   dil,0x1
  22b9b6:	40 88 b5 4e ff ff ff 	mov    BYTE PTR [rbp-0xb2],sil
  22b9bd:	75 02                	jne    22b9c1 <roundToPrecision+0x271>
  22b9bf:	eb 10                	jmp    22b9d1 <roundToPrecision+0x281>
  22b9c1:	48 8d 3d 00 78 01 00 	lea    rdi,[rip+0x17800]        # 2431c8 <__unnamed_4>
  22b9c8:	31 c0                	xor    eax,eax
  22b9ca:	89 c6                	mov    esi,eax
  22b9cc:	e8 2f fc fd ff       	call   20b600 <panic>
  22b9d1:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [rbp-0xb2]
  22b9d7:	3c 05                	cmp    al,0x5
  22b9d9:	0f 93 c1             	setae  cl
  22b9dc:	88 8d 7e ff ff ff    	mov    BYTE PTR [rbp-0x82],cl
  22b9e2:	e9 85 fe ff ff       	jmp    22b86c <roundToPrecision+0x11c>
  22b9e7:	48 8d 3d da 77 01 00 	lea    rdi,[rip+0x177da]        # 2431c8 <__unnamed_4>
  22b9ee:	31 c0                	xor    eax,eax
  22b9f0:	89 c6                	mov    esi,eax
                float_decimal.exp += 1;
  22b9f2:	e8 09 fc fd ff       	call   20b600 <panic>
  22b9f7:	31 c0                	xor    eax,eax
  22b9f9:	89 c1                	mov    ecx,eax
  22b9fb:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  22ba02:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
  22ba08:	89 02                	mov    DWORD PTR [rdx],eax
                const one_before = @intToPtr([*]u8, @ptrToInt(&float_decimal.digits[0]) - 1);
  22ba0a:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  22ba0e:	48 3b 4e 08          	cmp    rcx,QWORD PTR [rsi+0x8]
  22ba12:	48 89 b5 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rsi
  22ba19:	72 10                	jb     22ba2b <roundToPrecision+0x2db>
  22ba1b:	48 8d 3d b6 79 01 00 	lea    rdi,[rip+0x179b6]        # 2433d8 <__unnamed_20>
  22ba22:	31 c0                	xor    eax,eax
  22ba24:	89 c6                	mov    esi,eax
  22ba26:	e8 d5 fb fd ff       	call   20b600 <panic>
  22ba2b:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  22ba32:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22ba35:	48 83 e9 01          	sub    rcx,0x1
  22ba39:	0f 92 c2             	setb   dl
  22ba3c:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  22ba43:	88 95 37 ff ff ff    	mov    BYTE PTR [rbp-0xc9],dl
  22ba49:	72 02                	jb     22ba4d <roundToPrecision+0x2fd>
  22ba4b:	eb 10                	jmp    22ba5d <roundToPrecision+0x30d>
  22ba4d:	48 8d 3d 74 77 01 00 	lea    rdi,[rip+0x17774]        # 2431c8 <__unnamed_4>
  22ba54:	31 c0                	xor    eax,eax
  22ba56:	89 c6                	mov    esi,eax
  22ba58:	e8 a3 fb fd ff       	call   20b600 <panic>
  22ba5d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  22ba64:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                float_decimal.digits = one_before[0 .. float_decimal.digits.len + 1];
  22ba68:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22ba6c:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  22ba70:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  22ba74:	48 83 c2 01          	add    rdx,0x1
  22ba78:	40 0f 92 c6          	setb   sil
  22ba7c:	48 89 8d 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rcx
  22ba83:	48 89 95 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdx
  22ba8a:	40 88 b5 1f ff ff ff 	mov    BYTE PTR [rbp-0xe1],sil
  22ba91:	72 02                	jb     22ba95 <roundToPrecision+0x345>
  22ba93:	eb 10                	jmp    22baa5 <roundToPrecision+0x355>
  22ba95:	48 8d 3d 2c 77 01 00 	lea    rdi,[rip+0x1772c]        # 2431c8 <__unnamed_4>
  22ba9c:	31 c0                	xor    eax,eax
  22ba9e:	89 c6                	mov    esi,eax
  22baa0:	e8 5b fb fd ff       	call   20b600 <panic>
  22baa5:	31 c0                	xor    eax,eax
  22baa7:	89 c1                	mov    ecx,eax
  22baa9:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  22baad:	48 8b b5 20 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe0]
  22bab4:	48 39 f1             	cmp    rcx,rsi
  22bab7:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
  22babe:	76 10                	jbe    22bad0 <roundToPrecision+0x380>
  22bac0:	48 8d 3d 11 79 01 00 	lea    rdi,[rip+0x17911]        # 2433d8 <__unnamed_20>
  22bac7:	31 c0                	xor    eax,eax
  22bac9:	89 c6                	mov    esi,eax
  22bacb:	e8 30 fb fd ff       	call   20b600 <panic>
  22bad0:	31 c0                	xor    eax,eax
  22bad2:	89 c1                	mov    ecx,eax
  22bad4:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
  22badb:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  22badf:	48 8b b5 20 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe0]
  22bae6:	48 83 ee 00          	sub    rsi,0x0
  22baea:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  22baee:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  22baf2:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
  22baf9:	48 89 37             	mov    QWORD PTR [rdi],rsi
  22bafc:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  22bb00:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
                float_decimal.digits[0] = '1';
  22bb04:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  22bb08:	48 3b 4e 08          	cmp    rcx,QWORD PTR [rsi+0x8]
  22bb0c:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
  22bb13:	72 10                	jb     22bb25 <roundToPrecision+0x3d5>
  22bb15:	48 8d 3d bc 78 01 00 	lea    rdi,[rip+0x178bc]        # 2433d8 <__unnamed_20>
  22bb1c:	31 c0                	xor    eax,eax
  22bb1e:	89 c6                	mov    esi,eax
  22bb20:	e8 db fa fd ff       	call   20b600 <panic>
  22bb25:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  22bb2c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22bb2f:	c6 01 31             	mov    BYTE PTR [rcx],0x31
                return;
  22bb32:	48 81 c4 30 01 00 00 	add    rsp,0x130
  22bb39:	5d                   	pop    rbp
  22bb3a:	c3                   	ret    
  22bb3b:	48 8d 3d 86 76 01 00 	lea    rdi,[rip+0x17686]        # 2431c8 <__unnamed_4>
  22bb42:	31 c0                	xor    eax,eax
  22bb44:	89 c6                	mov    esi,eax
            i -= 1;
  22bb46:	e8 b5 fa fd ff       	call   20b600 <panic>
  22bb4b:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  22bb52:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
            const new_value = (float_decimal.digits[i] - '0' + 1) % 10;
  22bb56:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22bb5a:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  22bb5e:	48 3b 51 08          	cmp    rdx,QWORD PTR [rcx+0x8]
  22bb62:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  22bb69:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
  22bb70:	72 10                	jb     22bb82 <roundToPrecision+0x432>
  22bb72:	48 8d 3d 5f 78 01 00 	lea    rdi,[rip+0x1785f]        # 2433d8 <__unnamed_20>
  22bb79:	31 c0                	xor    eax,eax
  22bb7b:	89 c6                	mov    esi,eax
  22bb7d:	e8 7e fa fd ff       	call   20b600 <panic>
  22bb82:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  22bb89:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22bb8c:	48 8b 95 f8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x108]
  22bb93:	40 8a 34 11          	mov    sil,BYTE PTR [rcx+rdx*1]
  22bb97:	40 80 ee 30          	sub    sil,0x30
  22bb9b:	40 0f 92 c7          	setb   dil
  22bb9f:	40 f6 c7 01          	test   dil,0x1
  22bba3:	40 88 b5 f7 fe ff ff 	mov    BYTE PTR [rbp-0x109],sil
  22bbaa:	75 02                	jne    22bbae <roundToPrecision+0x45e>
  22bbac:	eb 10                	jmp    22bbbe <roundToPrecision+0x46e>
  22bbae:	48 8d 3d 13 76 01 00 	lea    rdi,[rip+0x17613]        # 2431c8 <__unnamed_4>
  22bbb5:	31 c0                	xor    eax,eax
  22bbb7:	89 c6                	mov    esi,eax
  22bbb9:	e8 42 fa fd ff       	call   20b600 <panic>
  22bbbe:	8a 85 f7 fe ff ff    	mov    al,BYTE PTR [rbp-0x109]
  22bbc4:	04 01                	add    al,0x1
  22bbc6:	0f 92 c1             	setb   cl
  22bbc9:	f6 c1 01             	test   cl,0x1
  22bbcc:	88 85 f6 fe ff ff    	mov    BYTE PTR [rbp-0x10a],al
  22bbd2:	75 02                	jne    22bbd6 <roundToPrecision+0x486>
  22bbd4:	eb 10                	jmp    22bbe6 <roundToPrecision+0x496>
  22bbd6:	48 8d 3d eb 75 01 00 	lea    rdi,[rip+0x175eb]        # 2431c8 <__unnamed_4>
  22bbdd:	31 c0                	xor    eax,eax
  22bbdf:	89 c6                	mov    esi,eax
  22bbe1:	e8 1a fa fd ff       	call   20b600 <panic>
  22bbe6:	31 c0                	xor    eax,eax
  22bbe8:	88 c1                	mov    cl,al
  22bbea:	f6 c1 01             	test   cl,0x1
  22bbed:	75 45                	jne    22bc34 <roundToPrecision+0x4e4>
  22bbef:	eb 00                	jmp    22bbf1 <roundToPrecision+0x4a1>
  22bbf1:	b0 0a                	mov    al,0xa
  22bbf3:	8a 8d f6 fe ff ff    	mov    cl,BYTE PTR [rbp-0x10a]
  22bbf9:	88 85 f5 fe ff ff    	mov    BYTE PTR [rbp-0x10b],al
  22bbff:	66 0f b6 c1          	movzx  ax,cl
  22bc03:	8a 95 f5 fe ff ff    	mov    dl,BYTE PTR [rbp-0x10b]
  22bc09:	f6 f2                	div    dl
  22bc0b:	66 c1 e8 08          	shr    ax,0x8
  22bc0f:	40 88 c6             	mov    sil,al
  22bc12:	40 88 75 b7          	mov    BYTE PTR [rbp-0x49],sil
            float_decimal.digits[i] = new_value + '0';
  22bc16:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  22bc1a:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
  22bc1e:	4c 3b 47 08          	cmp    r8,QWORD PTR [rdi+0x8]
  22bc22:	48 89 bd e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdi
  22bc29:	4c 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],r8
  22bc30:	72 22                	jb     22bc54 <roundToPrecision+0x504>
  22bc32:	eb 10                	jmp    22bc44 <roundToPrecision+0x4f4>
  22bc34:	48 8d 3d ad 76 01 00 	lea    rdi,[rip+0x176ad]        # 2432e8 <__unnamed_15>
  22bc3b:	31 c0                	xor    eax,eax
  22bc3d:	89 c6                	mov    esi,eax
            const new_value = (float_decimal.digits[i] - '0' + 1) % 10;
  22bc3f:	e8 bc f9 fd ff       	call   20b600 <panic>
  22bc44:	48 8d 3d 8d 77 01 00 	lea    rdi,[rip+0x1778d]        # 2433d8 <__unnamed_20>
  22bc4b:	31 c0                	xor    eax,eax
  22bc4d:	89 c6                	mov    esi,eax
            float_decimal.digits[i] = new_value + '0';
  22bc4f:	e8 ac f9 fd ff       	call   20b600 <panic>
  22bc54:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
  22bc5b:	48 8b 8d e8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x118]
  22bc62:	48 03 01             	add    rax,QWORD PTR [rcx]
  22bc65:	8a 55 b7             	mov    dl,BYTE PTR [rbp-0x49]
  22bc68:	80 c2 30             	add    dl,0x30
  22bc6b:	40 0f 92 c6          	setb   sil
  22bc6f:	40 f6 c6 01          	test   sil,0x1
  22bc73:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
  22bc7a:	88 95 d7 fe ff ff    	mov    BYTE PTR [rbp-0x129],dl
  22bc80:	75 02                	jne    22bc84 <roundToPrecision+0x534>
  22bc82:	eb 10                	jmp    22bc94 <roundToPrecision+0x544>
  22bc84:	48 8d 3d 3d 75 01 00 	lea    rdi,[rip+0x1753d]        # 2431c8 <__unnamed_4>
  22bc8b:	31 c0                	xor    eax,eax
  22bc8d:	89 c6                	mov    esi,eax
  22bc8f:	e8 6c f9 fd ff       	call   20b600 <panic>
  22bc94:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  22bc9b:	8a 8d d7 fe ff ff    	mov    cl,BYTE PTR [rbp-0x129]
  22bca1:	88 08                	mov    BYTE PTR [rax],cl
            if (new_value != 0) {
  22bca3:	80 7d b7 00          	cmp    BYTE PTR [rbp-0x49],0x0
  22bca7:	0f 85 3e fc ff ff    	jne    22b8eb <roundToPrecision+0x19b>
  22bcad:	e9 42 fc ff ff       	jmp    22b8f4 <roundToPrecision+0x1a4>
  22bcb2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22bcb9:	1f 84 00 00 00 00 00 

000000000022bcc0 <formatIntUnsigned.120>:
fn formatIntUnsigned(
  22bcc0:	55                   	push   rbp
  22bcc1:	48 89 e5             	mov    rbp,rsp
  22bcc4:	41 56                	push   r14
  22bcc6:	53                   	push   rbx
  22bcc7:	48 81 ec 20 02 00 00 	sub    rsp,0x220
  22bcce:	88 c8                	mov    al,cl
  22bcd0:	41 88 d2             	mov    r10b,dl
  22bcd3:	4c 8b 5d 10          	mov    r11,QWORD PTR [rbp+0x10]
  22bcd7:	48 8d 1d 66 eb fd ff 	lea    rbx,[rip+0xfffffffffffdeb66]        # 20a844 <__unnamed_225>
  22bcde:	b9 40 00 00 00       	mov    ecx,0x40
  22bce3:	89 ca                	mov    edx,ecx
  22bce5:	4c 8d b5 f8 fe ff ff 	lea    r14,[rbp-0x108]
  22bcec:	48 89 b5 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rsi
  22bcf3:	44 88 95 4f ff ff ff 	mov    BYTE PTR [rbp-0xb1],r10b
  22bcfa:	24 01                	and    al,0x1
  22bcfc:	88 85 4e ff ff ff    	mov    BYTE PTR [rbp-0xb2],al
  22bd02:	4c 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],r8
  22bd09:	4c 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],r9
    var buf: [max_int_digits - 1]u8 = undefined;
  22bd10:	48 89 bd a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdi
  22bd17:	4c 89 f7             	mov    rdi,r14
  22bd1a:	48 89 de             	mov    rsi,rbx
  22bd1d:	4c 89 9d 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],r11
  22bd24:	e8 77 8b 00 00       	call   2348a0 <memcpy>
    var a = if (@sizeOf(@typeOf(value)) == 1) u8(value) else value;
  22bd29:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
  22bd30:	48 89 95 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rdx
    var index: usize = buf.len;
  22bd37:	48 c7 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],0x40
  22bd3e:	40 00 00 00 
    while (true) {
  22bd42:	eb 00                	jmp    22bd44 <formatIntUnsigned.120+0x84>
        const digit = a % base;
  22bd44:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  22bd4b:	0f b6 8d 4f ff ff ff 	movzx  ecx,BYTE PTR [rbp-0xb1]
  22bd52:	89 ca                	mov    edx,ecx
  22bd54:	48 83 fa 00          	cmp    rdx,0x0
  22bd58:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  22bd5f:	48 89 95 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rdx
  22bd66:	0f 84 f6 01 00 00    	je     22bf62 <formatIntUnsigned.120+0x2a2>
  22bd6c:	e9 b4 01 00 00       	jmp    22bf25 <formatIntUnsigned.120+0x265>
        if (a == 0) break;
  22bd71:	eb 02                	jmp    22bd75 <formatIntUnsigned.120+0xb5>
    while (true) {
  22bd73:	eb cd                	jmp    22bd42 <formatIntUnsigned.120+0x82>
    const digits_buf = buf[index..];
  22bd75:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  22bd7c:	48 83 f8 40          	cmp    rax,0x40
  22bd80:	48 89 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rax
  22bd87:	0f 86 02 03 00 00    	jbe    22c08f <formatIntUnsigned.120+0x3cf>
  22bd8d:	e9 ed 02 00 00       	jmp    22c07f <formatIntUnsigned.120+0x3bf>
    const padding = if (width > digits_buf.len) (width - digits_buf.len) else 0;
  22bd92:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  22bd99:	48 2b 85 d8 fe ff ff 	sub    rax,QWORD PTR [rbp-0x128]
  22bda0:	0f 92 c1             	setb   cl
  22bda3:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  22bdaa:	88 8d 77 fe ff ff    	mov    BYTE PTR [rbp-0x189],cl
  22bdb0:	0f 82 2b 03 00 00    	jb     22c0e1 <formatIntUnsigned.120+0x421>
  22bdb6:	e9 36 03 00 00       	jmp    22c0f1 <formatIntUnsigned.120+0x431>
  22bdbb:	31 c0                	xor    eax,eax
  22bdbd:	89 c1                	mov    ecx,eax
  22bdbf:	48 89 8d 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rcx
  22bdc6:	eb 00                	jmp    22bdc8 <formatIntUnsigned.120+0x108>
  22bdc8:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
  22bdcf:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
    if (padding > index) {
  22bdd6:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  22bddd:	48 3b 85 e8 fe ff ff 	cmp    rax,QWORD PTR [rbp-0x118]
  22bde4:	0f 86 ef 00 00 00    	jbe    22bed9 <formatIntUnsigned.120+0x219>
        const zero_byte: u8 = '0';
  22bdea:	c6 85 c7 fe ff ff 30 	mov    BYTE PTR [rbp-0x139],0x30
        var leftover_padding = padding - index;
  22bdf1:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  22bdf8:	48 2b 85 e8 fe ff ff 	sub    rax,QWORD PTR [rbp-0x118]
  22bdff:	0f 92 c1             	setb   cl
  22be02:	48 89 85 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rax
  22be09:	88 8d 5f fe ff ff    	mov    BYTE PTR [rbp-0x1a1],cl
  22be0f:	0f 82 ef 02 00 00    	jb     22c104 <formatIntUnsigned.120+0x444>
  22be15:	e9 fa 02 00 00       	jmp    22c114 <formatIntUnsigned.120+0x454>
        while (true) {
  22be1a:	eb 00                	jmp    22be1c <formatIntUnsigned.120+0x15c>
  22be1c:	48 8d 15 9d 7c 01 00 	lea    rdx,[rip+0x17c9d]        # 243ac0 <__unnamed_226>
            try output(context, (*[1]u8)(&zero_byte)[0..]);
  22be23:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
  22be27:	48 8b b5 38 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc8]
  22be2e:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
  22be35:	ff d0                	call   rax
  22be37:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  22be3b:	66 83 7d de 00       	cmp    WORD PTR [rbp-0x22],0x0
  22be40:	74 2a                	je     22be6c <formatIntUnsigned.120+0x1ac>
  22be42:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  22be46:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
  22be4d:	66 89 85 5c fe ff ff 	mov    WORD PTR [rbp-0x1a4],ax
  22be54:	e8 37 fe fd ff       	call   20bc90 <__zig_return_error>
  22be59:	66 8b 85 5c fe ff ff 	mov    ax,WORD PTR [rbp-0x1a4]
  22be60:	48 81 c4 20 02 00 00 	add    rsp,0x220
  22be67:	5b                   	pop    rbx
  22be68:	41 5e                	pop    r14
  22be6a:	5d                   	pop    rbp
  22be6b:	c3                   	ret    
            leftover_padding -= 1;
  22be6c:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  22be73:	48 83 e8 01          	sub    rax,0x1
  22be77:	0f 92 c1             	setb   cl
  22be7a:	48 89 85 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rax
  22be81:	88 8d 4f fe ff ff    	mov    BYTE PTR [rbp-0x1b1],cl
  22be87:	0f 82 9a 02 00 00    	jb     22c127 <formatIntUnsigned.120+0x467>
  22be8d:	e9 a5 02 00 00       	jmp    22c137 <formatIntUnsigned.120+0x477>
            if (leftover_padding == 0) break;
  22be92:	eb 02                	jmp    22be96 <formatIntUnsigned.120+0x1d6>
        while (true) {
  22be94:	eb 84                	jmp    22be1a <formatIntUnsigned.120+0x15a>
  22be96:	31 c0                	xor    eax,eax
  22be98:	89 c1                	mov    ecx,eax
        mem.set(u8, buf[0..index], '0');
  22be9a:	48 8b 95 e8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x118]
  22bea1:	48 39 d1             	cmp    rcx,rdx
  22bea4:	48 89 95 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rdx
  22beab:	0f 86 b7 02 00 00    	jbe    22c168 <formatIntUnsigned.120+0x4a8>
  22beb1:	e9 a2 02 00 00       	jmp    22c158 <formatIntUnsigned.120+0x498>
        return output(context, buf);
  22beb6:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
  22bebd:	e8 ce fd fd ff       	call   20bc90 <__zig_return_error>
  22bec2:	eb 02                	jmp    22bec6 <formatIntUnsigned.120+0x206>
  22bec4:	eb 00                	jmp    22bec6 <formatIntUnsigned.120+0x206>
  22bec6:	66 8b 85 3e fe ff ff 	mov    ax,WORD PTR [rbp-0x1c2]
  22becd:	48 81 c4 20 02 00 00 	add    rsp,0x220
  22bed4:	5b                   	pop    rbx
  22bed5:	41 5e                	pop    r14
  22bed7:	5d                   	pop    rbp
  22bed8:	c3                   	ret    
        const padded_buf = buf[index - padding ..];
  22bed9:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  22bee0:	48 2b 85 c8 fe ff ff 	sub    rax,QWORD PTR [rbp-0x138]
  22bee7:	0f 92 c1             	setb   cl
  22beea:	48 89 85 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rax
  22bef1:	88 8d 2f fe ff ff    	mov    BYTE PTR [rbp-0x1d1],cl
  22bef7:	0f 82 08 03 00 00    	jb     22c205 <formatIntUnsigned.120+0x545>
  22befd:	e9 13 03 00 00       	jmp    22c215 <formatIntUnsigned.120+0x555>
        return output(context, padded_buf);
  22bf02:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
  22bf09:	e8 82 fd fd ff       	call   20bc90 <__zig_return_error>
  22bf0e:	eb 02                	jmp    22bf12 <formatIntUnsigned.120+0x252>
  22bf10:	eb 00                	jmp    22bf12 <formatIntUnsigned.120+0x252>
  22bf12:	66 8b 85 2c fe ff ff 	mov    ax,WORD PTR [rbp-0x1d4]
  22bf19:	48 81 c4 20 02 00 00 	add    rsp,0x220
  22bf20:	5b                   	pop    rbx
  22bf21:	41 5e                	pop    r14
  22bf23:	5d                   	pop    rbp
  22bf24:	c3                   	ret    
        const digit = a % base;
  22bf25:	48 8b 85 90 fe ff ff 	mov    rax,QWORD PTR [rbp-0x170]
  22bf2c:	31 c9                	xor    ecx,ecx
  22bf2e:	89 ca                	mov    edx,ecx
  22bf30:	48 8b b5 88 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x178]
  22bf37:	48 f7 f6             	div    rsi
  22bf3a:	48 89 95 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rdx
        index -= 1;
  22bf41:	48 8b 95 e8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x118]
  22bf48:	48 83 ea 01          	sub    rdx,0x1
  22bf4c:	40 0f 92 c7          	setb   dil
  22bf50:	48 89 95 20 fe ff ff 	mov    QWORD PTR [rbp-0x1e0],rdx
  22bf57:	40 88 bd 1f fe ff ff 	mov    BYTE PTR [rbp-0x1e1],dil
  22bf5e:	72 12                	jb     22bf72 <formatIntUnsigned.120+0x2b2>
  22bf60:	eb 20                	jmp    22bf82 <formatIntUnsigned.120+0x2c2>
  22bf62:	48 8d 3d 7f 73 01 00 	lea    rdi,[rip+0x1737f]        # 2432e8 <__unnamed_15>
  22bf69:	31 c0                	xor    eax,eax
  22bf6b:	89 c6                	mov    esi,eax
        const digit = a % base;
  22bf6d:	e8 8e f6 fd ff       	call   20b600 <panic>
  22bf72:	48 8d 3d 4f 72 01 00 	lea    rdi,[rip+0x1724f]        # 2431c8 <__unnamed_4>
  22bf79:	31 c0                	xor    eax,eax
  22bf7b:	89 c6                	mov    esi,eax
        index -= 1;
  22bf7d:	e8 7e f6 fd ff       	call   20b600 <panic>
  22bf82:	48 8b 85 20 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e0]
  22bf89:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
        buf[index] = digitToChar(@intCast(u8, digit), uppercase);
  22bf90:	48 8b 8d e8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x118]
  22bf97:	48 83 f9 40          	cmp    rcx,0x40
  22bf9b:	48 89 8d 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rcx
  22bfa2:	72 10                	jb     22bfb4 <formatIntUnsigned.120+0x2f4>
  22bfa4:	48 8d 3d 2d 74 01 00 	lea    rdi,[rip+0x1742d]        # 2433d8 <__unnamed_20>
  22bfab:	31 c0                	xor    eax,eax
  22bfad:	89 c6                	mov    esi,eax
  22bfaf:	e8 4c f6 fd ff       	call   20b600 <panic>
  22bfb4:	48 8d 85 f8 fe ff ff 	lea    rax,[rbp-0x108]
  22bfbb:	48 8b 8d 10 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1f0]
  22bfc2:	48 01 c8             	add    rax,rcx
  22bfc5:	48 8b 95 e0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x120]
  22bfcc:	40 88 d6             	mov    sil,dl
  22bfcf:	40 0f b6 fe          	movzx  edi,sil
  22bfd3:	41 89 f8             	mov    r8d,edi
  22bfd6:	4c 39 c2             	cmp    rdx,r8
  22bfd9:	48 89 85 08 fe ff ff 	mov    QWORD PTR [rbp-0x1f8],rax
  22bfe0:	40 88 b5 07 fe ff ff 	mov    BYTE PTR [rbp-0x1f9],sil
  22bfe7:	75 47                	jne    22c030 <formatIntUnsigned.120+0x370>
  22bfe9:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [rbp-0xb2]
  22bfef:	8a 8d 07 fe ff ff    	mov    cl,BYTE PTR [rbp-0x1f9]
  22bff5:	0f b6 f9             	movzx  edi,cl
  22bff8:	0f b6 f0             	movzx  esi,al
  22bffb:	e8 40 03 00 00       	call   22c340 <digitToChar>
  22c000:	48 8b 95 08 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1f8]
  22c007:	88 02                	mov    BYTE PTR [rdx],al
        a /= base;
  22c009:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  22c010:	0f b6 b5 4f ff ff ff 	movzx  esi,BYTE PTR [rbp-0xb1]
  22c017:	41 89 f0             	mov    r8d,esi
  22c01a:	49 83 f8 00          	cmp    r8,0x0
  22c01e:	48 89 85 f8 fd ff ff 	mov    QWORD PTR [rbp-0x208],rax
  22c025:	4c 89 85 f0 fd ff ff 	mov    QWORD PTR [rbp-0x210],r8
  22c02c:	74 41                	je     22c06f <formatIntUnsigned.120+0x3af>
  22c02e:	eb 10                	jmp    22c040 <formatIntUnsigned.120+0x380>
  22c030:	48 8d 3d 51 74 01 00 	lea    rdi,[rip+0x17451]        # 243488 <__unnamed_22>
  22c037:	31 c0                	xor    eax,eax
  22c039:	89 c6                	mov    esi,eax
        buf[index] = digitToChar(@intCast(u8, digit), uppercase);
  22c03b:	e8 c0 f5 fd ff       	call   20b600 <panic>
        a /= base;
  22c040:	48 8b 85 f8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x208]
  22c047:	31 c9                	xor    ecx,ecx
  22c049:	89 ca                	mov    edx,ecx
  22c04b:	48 8b b5 f0 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x210]
  22c052:	48 f7 f6             	div    rsi
  22c055:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
        if (a == 0) break;
  22c05c:	48 83 bd f0 fe ff ff 	cmp    QWORD PTR [rbp-0x110],0x0
  22c063:	00 
  22c064:	0f 84 07 fd ff ff    	je     22bd71 <formatIntUnsigned.120+0xb1>
  22c06a:	e9 04 fd ff ff       	jmp    22bd73 <formatIntUnsigned.120+0xb3>
  22c06f:	48 8d 3d ca 71 01 00 	lea    rdi,[rip+0x171ca]        # 243240 <__unnamed_7>
  22c076:	31 c0                	xor    eax,eax
  22c078:	89 c6                	mov    esi,eax
        a /= base;
  22c07a:	e8 81 f5 fd ff       	call   20b600 <panic>
  22c07f:	48 8d 3d 52 73 01 00 	lea    rdi,[rip+0x17352]        # 2433d8 <__unnamed_20>
  22c086:	31 c0                	xor    eax,eax
  22c088:	89 c6                	mov    esi,eax
    const digits_buf = buf[index..];
  22c08a:	e8 71 f5 fd ff       	call   20b600 <panic>
  22c08f:	b8 40 00 00 00       	mov    eax,0x40
  22c094:	89 c1                	mov    ecx,eax
  22c096:	48 8d 95 f8 fe ff ff 	lea    rdx,[rbp-0x108]
  22c09d:	48 8b b5 80 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x180]
  22c0a4:	48 01 f2             	add    rdx,rsi
  22c0a7:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  22c0ab:	48 29 f1             	sub    rcx,rsi
  22c0ae:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  22c0b2:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  22c0b6:	48 89 8d d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rcx
  22c0bd:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22c0c1:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
    const padding = if (width > digits_buf.len) (width - digits_buf.len) else 0;
  22c0c8:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  22c0cf:	48 3b 8d d8 fe ff ff 	cmp    rcx,QWORD PTR [rbp-0x128]
  22c0d6:	0f 87 b6 fc ff ff    	ja     22bd92 <formatIntUnsigned.120+0xd2>
  22c0dc:	e9 da fc ff ff       	jmp    22bdbb <formatIntUnsigned.120+0xfb>
  22c0e1:	48 8d 3d e0 70 01 00 	lea    rdi,[rip+0x170e0]        # 2431c8 <__unnamed_4>
  22c0e8:	31 c0                	xor    eax,eax
  22c0ea:	89 c6                	mov    esi,eax
  22c0ec:	e8 0f f5 fd ff       	call   20b600 <panic>
  22c0f1:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
  22c0f8:	48 89 85 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rax
  22c0ff:	e9 c4 fc ff ff       	jmp    22bdc8 <formatIntUnsigned.120+0x108>
  22c104:	48 8d 3d bd 70 01 00 	lea    rdi,[rip+0x170bd]        # 2431c8 <__unnamed_4>
  22c10b:	31 c0                	xor    eax,eax
  22c10d:	89 c6                	mov    esi,eax
        var leftover_padding = padding - index;
  22c10f:	e8 ec f4 fd ff       	call   20b600 <panic>
  22c114:	48 8b 85 60 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a0]
  22c11b:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
        while (true) {
  22c122:	e9 f3 fc ff ff       	jmp    22be1a <formatIntUnsigned.120+0x15a>
  22c127:	48 8d 3d 9a 70 01 00 	lea    rdi,[rip+0x1709a]        # 2431c8 <__unnamed_4>
  22c12e:	31 c0                	xor    eax,eax
  22c130:	89 c6                	mov    esi,eax
            leftover_padding -= 1;
  22c132:	e8 c9 f4 fd ff       	call   20b600 <panic>
  22c137:	48 8b 85 50 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b0]
  22c13e:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
            if (leftover_padding == 0) break;
  22c145:	48 83 bd b8 fe ff ff 	cmp    QWORD PTR [rbp-0x148],0x0
  22c14c:	00 
  22c14d:	0f 84 3f fd ff ff    	je     22be92 <formatIntUnsigned.120+0x1d2>
  22c153:	e9 3c fd ff ff       	jmp    22be94 <formatIntUnsigned.120+0x1d4>
  22c158:	48 8d 3d 79 72 01 00 	lea    rdi,[rip+0x17279]        # 2433d8 <__unnamed_20>
  22c15f:	31 c0                	xor    eax,eax
  22c161:	89 c6                	mov    esi,eax
        mem.set(u8, buf[0..index], '0');
  22c163:	e8 98 f4 fd ff       	call   20b600 <panic>
  22c168:	48 8b 85 40 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c0]
  22c16f:	48 83 f8 40          	cmp    rax,0x40
  22c173:	76 10                	jbe    22c185 <formatIntUnsigned.120+0x4c5>
  22c175:	48 8d 3d 5c 72 01 00 	lea    rdi,[rip+0x1725c]        # 2433d8 <__unnamed_20>
  22c17c:	31 c0                	xor    eax,eax
  22c17e:	89 c6                	mov    esi,eax
  22c180:	e8 7b f4 fd ff       	call   20b600 <panic>
  22c185:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
  22c189:	be 30 00 00 00       	mov    esi,0x30
  22c18e:	48 8d 85 f8 fe ff ff 	lea    rax,[rbp-0x108]
  22c195:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  22c199:	48 8b 85 40 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c0]
  22c1a0:	48 83 e8 00          	sub    rax,0x0
  22c1a4:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  22c1a8:	e8 93 02 00 00       	call   22c440 <set>
  22c1ad:	48 8d 95 78 ff ff ff 	lea    rdx,[rbp-0x88]
  22c1b4:	48 8d 85 f8 fe ff ff 	lea    rax,[rbp-0x108]
        return output(context, buf);
  22c1bb:	48 8b 7d 10          	mov    rdi,QWORD PTR [rbp+0x10]
  22c1bf:	48 8b b5 38 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc8]
  22c1c6:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  22c1cd:	48 c7 45 80 40 00 00 	mov    QWORD PTR [rbp-0x80],0x40
  22c1d4:	00 
  22c1d5:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
  22c1dc:	48 89 bd e8 fd ff ff 	mov    QWORD PTR [rbp-0x218],rdi
  22c1e3:	48 89 c7             	mov    rdi,rax
  22c1e6:	48 8b 8d e8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x218]
  22c1ed:	ff d1                	call   rcx
  22c1ef:	66 83 f8 00          	cmp    ax,0x0
  22c1f3:	66 89 85 3e fe ff ff 	mov    WORD PTR [rbp-0x1c2],ax
  22c1fa:	0f 85 b6 fc ff ff    	jne    22beb6 <formatIntUnsigned.120+0x1f6>
  22c200:	e9 bf fc ff ff       	jmp    22bec4 <formatIntUnsigned.120+0x204>
  22c205:	48 8d 3d bc 6f 01 00 	lea    rdi,[rip+0x16fbc]        # 2431c8 <__unnamed_4>
  22c20c:	31 c0                	xor    eax,eax
  22c20e:	89 c6                	mov    esi,eax
        const padded_buf = buf[index - padding ..];
  22c210:	e8 eb f3 fd ff       	call   20b600 <panic>
  22c215:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  22c21c:	48 83 f8 40          	cmp    rax,0x40
  22c220:	76 10                	jbe    22c232 <formatIntUnsigned.120+0x572>
  22c222:	48 8d 3d af 71 01 00 	lea    rdi,[rip+0x171af]        # 2433d8 <__unnamed_20>
  22c229:	31 c0                	xor    eax,eax
  22c22b:	89 c6                	mov    esi,eax
  22c22d:	e8 ce f3 fd ff       	call   20b600 <panic>
  22c232:	31 c0                	xor    eax,eax
  22c234:	89 c1                	mov    ecx,eax
  22c236:	b8 40 00 00 00       	mov    eax,0x40
  22c23b:	89 c2                	mov    edx,eax
  22c23d:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  22c244:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
  22c24b:	48 01 fe             	add    rsi,rdi
  22c24e:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
  22c255:	48 29 fa             	sub    rdx,rdi
  22c258:	48 89 95 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdx
  22c25f:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  22c266:	48 89 95 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rdx
  22c26d:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  22c274:	48 89 95 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rdx
        mem.set(u8, padded_buf[0..padding], '0');
  22c27b:	48 8b 95 c8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x138]
  22c282:	48 8b b5 b0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x150]
  22c289:	48 39 d1             	cmp    rcx,rdx
  22c28c:	48 89 b5 e0 fd ff ff 	mov    QWORD PTR [rbp-0x220],rsi
  22c293:	48 89 95 d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rdx
  22c29a:	76 10                	jbe    22c2ac <formatIntUnsigned.120+0x5ec>
  22c29c:	48 8d 3d 35 71 01 00 	lea    rdi,[rip+0x17135]        # 2433d8 <__unnamed_20>
  22c2a3:	31 c0                	xor    eax,eax
  22c2a5:	89 c6                	mov    esi,eax
  22c2a7:	e8 54 f3 fd ff       	call   20b600 <panic>
  22c2ac:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
  22c2b3:	48 8b 8d e0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x220]
  22c2ba:	48 39 c8             	cmp    rax,rcx
  22c2bd:	76 10                	jbe    22c2cf <formatIntUnsigned.120+0x60f>
  22c2bf:	48 8d 3d 12 71 01 00 	lea    rdi,[rip+0x17112]        # 2433d8 <__unnamed_20>
  22c2c6:	31 c0                	xor    eax,eax
  22c2c8:	89 c6                	mov    esi,eax
  22c2ca:	e8 31 f3 fd ff       	call   20b600 <panic>
  22c2cf:	48 8d bd 58 ff ff ff 	lea    rdi,[rbp-0xa8]
  22c2d6:	be 30 00 00 00       	mov    esi,0x30
  22c2db:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
  22c2e2:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  22c2e9:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
  22c2f0:	48 83 e8 00          	sub    rax,0x0
  22c2f4:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  22c2fb:	e8 40 01 00 00       	call   22c440 <set>
  22c300:	48 8d 95 a8 fe ff ff 	lea    rdx,[rbp-0x158]
        return output(context, padded_buf);
  22c307:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
  22c30b:	48 8b b5 38 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc8]
  22c312:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
  22c319:	ff d0                	call   rax
  22c31b:	66 83 f8 00          	cmp    ax,0x0
  22c31f:	66 89 85 2c fe ff ff 	mov    WORD PTR [rbp-0x1d4],ax
  22c326:	0f 85 d6 fb ff ff    	jne    22bf02 <formatIntUnsigned.120+0x242>
  22c32c:	e9 df fb ff ff       	jmp    22bf10 <formatIntUnsigned.120+0x250>
  22c331:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22c338:	0f 1f 84 00 00 00 00 
  22c33f:	00 

000000000022c340 <digitToChar>:
}

fn digitToChar(digit: u8, uppercase: bool) u8 {
  22c340:	55                   	push   rbp
  22c341:	48 89 e5             	mov    rbp,rsp
  22c344:	48 83 ec 10          	sub    rsp,0x10
  22c348:	40 88 f0             	mov    al,sil
  22c34b:	40 88 f9             	mov    cl,dil
  22c34e:	88 4d ff             	mov    BYTE PTR [rbp-0x1],cl
  22c351:	24 01                	and    al,0x1
  22c353:	88 45 fe             	mov    BYTE PTR [rbp-0x2],al
    return switch (digit) {
  22c356:	8a 45 ff             	mov    al,BYTE PTR [rbp-0x1]
        0...9 => digit + '0',
  22c359:	3c 09                	cmp    al,0x9
  22c35b:	0f 96 c1             	setbe  cl
  22c35e:	80 e1 01             	and    cl,0x1
  22c361:	f6 c1 01             	test   cl,0x1
  22c364:	88 45 fd             	mov    BYTE PTR [rbp-0x3],al
  22c367:	75 02                	jne    22c36b <digitToChar+0x2b>
  22c369:	eb 12                	jmp    22c37d <digitToChar+0x3d>
  22c36b:	8a 45 ff             	mov    al,BYTE PTR [rbp-0x1]
  22c36e:	04 30                	add    al,0x30
  22c370:	0f 92 c1             	setb   cl
  22c373:	f6 c1 01             	test   cl,0x1
  22c376:	88 45 fc             	mov    BYTE PTR [rbp-0x4],al
  22c379:	75 61                	jne    22c3dc <digitToChar+0x9c>
  22c37b:	eb 6f                	jmp    22c3ec <digitToChar+0xac>
        10...35 => digit + ((if (uppercase) u8('A') else u8('a')) - 10),
  22c37d:	8a 45 fd             	mov    al,BYTE PTR [rbp-0x3]
  22c380:	3c 0a                	cmp    al,0xa
  22c382:	0f 93 c1             	setae  cl
  22c385:	3c 23                	cmp    al,0x23
  22c387:	0f 96 c2             	setbe  dl
  22c38a:	20 d1                	and    cl,dl
  22c38c:	f6 c1 01             	test   cl,0x1
  22c38f:	75 02                	jne    22c393 <digitToChar+0x53>
  22c391:	eb 2e                	jmp    22c3c1 <digitToChar+0x81>
  22c393:	8a 45 ff             	mov    al,BYTE PTR [rbp-0x1]
  22c396:	f6 45 fe 01          	test   BYTE PTR [rbp-0x2],0x1
  22c39a:	88 45 fb             	mov    BYTE PTR [rbp-0x5],al
  22c39d:	75 02                	jne    22c3a1 <digitToChar+0x61>
  22c39f:	eb 07                	jmp    22c3a8 <digitToChar+0x68>
  22c3a1:	b0 41                	mov    al,0x41
  22c3a3:	88 45 fa             	mov    BYTE PTR [rbp-0x6],al
  22c3a6:	eb 07                	jmp    22c3af <digitToChar+0x6f>
  22c3a8:	b0 61                	mov    al,0x61
  22c3aa:	88 45 fa             	mov    BYTE PTR [rbp-0x6],al
  22c3ad:	eb 00                	jmp    22c3af <digitToChar+0x6f>
  22c3af:	8a 45 fa             	mov    al,BYTE PTR [rbp-0x6]
  22c3b2:	2c 0a                	sub    al,0xa
  22c3b4:	0f 92 c1             	setb   cl
  22c3b7:	f6 c1 01             	test   cl,0x1
  22c3ba:	88 45 f9             	mov    BYTE PTR [rbp-0x7],al
  22c3bd:	75 35                	jne    22c3f4 <digitToChar+0xb4>
  22c3bf:	eb 43                	jmp    22c404 <digitToChar+0xc4>
    return switch (digit) {
  22c3c1:	eb 00                	jmp    22c3c3 <digitToChar+0x83>
  22c3c3:	48 8d 3d 36 6f 01 00 	lea    rdi,[rip+0x16f36]        # 243300 <__unnamed_13>
  22c3ca:	31 c0                	xor    eax,eax
  22c3cc:	89 c6                	mov    esi,eax
        else => unreachable,
  22c3ce:	e8 2d f2 fd ff       	call   20b600 <panic>
    return switch (digit) {
  22c3d3:	8a 45 f8             	mov    al,BYTE PTR [rbp-0x8]
  22c3d6:	48 83 c4 10          	add    rsp,0x10
  22c3da:	5d                   	pop    rbp
  22c3db:	c3                   	ret    
  22c3dc:	48 8d 3d e5 6d 01 00 	lea    rdi,[rip+0x16de5]        # 2431c8 <__unnamed_4>
  22c3e3:	31 c0                	xor    eax,eax
  22c3e5:	89 c6                	mov    esi,eax
        0...9 => digit + '0',
  22c3e7:	e8 14 f2 fd ff       	call   20b600 <panic>
    return switch (digit) {
  22c3ec:	8a 45 fc             	mov    al,BYTE PTR [rbp-0x4]
  22c3ef:	88 45 f8             	mov    BYTE PTR [rbp-0x8],al
  22c3f2:	eb df                	jmp    22c3d3 <digitToChar+0x93>
  22c3f4:	48 8d 3d cd 6d 01 00 	lea    rdi,[rip+0x16dcd]        # 2431c8 <__unnamed_4>
  22c3fb:	31 c0                	xor    eax,eax
  22c3fd:	89 c6                	mov    esi,eax
        10...35 => digit + ((if (uppercase) u8('A') else u8('a')) - 10),
  22c3ff:	e8 fc f1 fd ff       	call   20b600 <panic>
  22c404:	8a 45 fb             	mov    al,BYTE PTR [rbp-0x5]
  22c407:	8a 4d f9             	mov    cl,BYTE PTR [rbp-0x7]
  22c40a:	00 c8                	add    al,cl
  22c40c:	0f 92 c2             	setb   dl
  22c40f:	f6 c2 01             	test   dl,0x1
  22c412:	88 45 f7             	mov    BYTE PTR [rbp-0x9],al
  22c415:	75 02                	jne    22c419 <digitToChar+0xd9>
  22c417:	eb 10                	jmp    22c429 <digitToChar+0xe9>
  22c419:	48 8d 3d a8 6d 01 00 	lea    rdi,[rip+0x16da8]        # 2431c8 <__unnamed_4>
  22c420:	31 c0                	xor    eax,eax
  22c422:	89 c6                	mov    esi,eax
  22c424:	e8 d7 f1 fd ff       	call   20b600 <panic>
    return switch (digit) {
  22c429:	8a 45 f7             	mov    al,BYTE PTR [rbp-0x9]
  22c42c:	88 45 f8             	mov    BYTE PTR [rbp-0x8],al
  22c42f:	eb a2                	jmp    22c3d3 <digitToChar+0x93>
  22c431:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22c438:	0f 1f 84 00 00 00 00 
  22c43f:	00 

000000000022c440 <set>:
pub fn set(comptime T: type, dest: []T, value: T) void {
  22c440:	55                   	push   rbp
  22c441:	48 89 e5             	mov    rbp,rsp
  22c444:	48 83 ec 30          	sub    rsp,0x30
  22c448:	40 88 f0             	mov    al,sil
  22c44b:	be aa 00 00 00       	mov    esi,0xaa
  22c450:	b9 08 00 00 00       	mov    ecx,0x8
  22c455:	89 ca                	mov    edx,ecx
  22c457:	4c 8d 45 f0          	lea    r8,[rbp-0x10]
  22c45b:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
    for (dest) |*d|
  22c45e:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  22c462:	4c 89 c7             	mov    rdi,r8
  22c465:	e8 e6 83 00 00       	call   234850 <memset>
  22c46a:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
  22c471:	00 
  22c472:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  22c476:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
  22c47a:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  22c47e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22c482:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  22c486:	48 39 c8             	cmp    rax,rcx
  22c489:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  22c48d:	73 26                	jae    22c4b5 <set+0x75>
  22c48f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  22c493:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  22c497:	48 03 01             	add    rax,QWORD PTR [rcx]
  22c49a:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
        d.* = value;
  22c49e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22c4a2:	8a 55 ff             	mov    dl,BYTE PTR [rbp-0x1]
  22c4a5:	88 10                	mov    BYTE PTR [rax],dl
    for (dest) |*d|
  22c4a7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  22c4ab:	48 83 c0 01          	add    rax,0x1
  22c4af:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  22c4b3:	eb c9                	jmp    22c47e <set+0x3e>
pub fn set(comptime T: type, dest: []T, value: T) void {
  22c4b5:	48 83 c4 30          	add    rsp,0x30
  22c4b9:	5d                   	pop    rbp
  22c4ba:	c3                   	ret    
  22c4bb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000022c4c0 <signbit64>:
fn signbit32(x: f32) bool {
    const bits = @bitCast(u32, x);
    return bits >> 31 != 0;
}

fn signbit64(x: f64) bool {
  22c4c0:	55                   	push   rbp
  22c4c1:	48 89 e5             	mov    rbp,rsp
  22c4c4:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    const bits = @bitCast(u64, x);
  22c4c9:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  22c4ce:	c5 fb 11 45 f0       	vmovsd QWORD PTR [rbp-0x10],xmm0
    return bits >> 63 != 0;
  22c4d3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22c4d7:	48 c1 e8 3f          	shr    rax,0x3f
  22c4db:	48 85 c0             	test   rax,rax
  22c4de:	0f 95 c0             	setne  al
  22c4e1:	5d                   	pop    rbp
  22c4e2:	c3                   	ret    
  22c4e3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22c4ea:	84 00 00 00 00 00 

000000000022c4f0 <tableLowerBound>:
        .digits = buffer[1..buf_index],
        .exp = exp,
    };
}

fn tableLowerBound(k: u64) usize {
  22c4f0:	55                   	push   rbp
  22c4f1:	48 89 e5             	mov    rbp,rsp
  22c4f4:	48 83 ec 60          	sub    rsp,0x60
  22c4f8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    var i = enum3.len;
  22c4fc:	48 c7 45 f0 b0 01 00 	mov    QWORD PTR [rbp-0x10],0x1b0
  22c503:	00 
    var j: usize = 0;
  22c504:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
  22c50b:	00 

    while (j < enum3.len) {
  22c50c:	48 81 7d e8 b0 01 00 	cmp    QWORD PTR [rbp-0x18],0x1b0
  22c513:	00 
  22c514:	73 5b                	jae    22c571 <tableLowerBound+0x81>
        if (enum3[j] < k) {
  22c516:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22c51a:	48 3d b0 01 00 00    	cmp    rax,0x1b0
  22c520:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  22c524:	72 65                	jb     22c58b <tableLowerBound+0x9b>
  22c526:	eb 53                	jmp    22c57b <tableLowerBound+0x8b>
  22c528:	b8 02 00 00 00       	mov    eax,0x2
  22c52d:	89 c1                	mov    ecx,eax
            j = 2 * j + 2;
  22c52f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22c533:	48 f7 e1             	mul    rcx
  22c536:	40 0f 90 c6          	seto   sil
  22c53a:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  22c53e:	40 88 75 d7          	mov    BYTE PTR [rbp-0x29],sil
  22c542:	70 5e                	jo     22c5a2 <tableLowerBound+0xb2>
  22c544:	eb 6c                	jmp    22c5b2 <tableLowerBound+0xc2>
  22c546:	b8 02 00 00 00       	mov    eax,0x2
  22c54b:	89 c1                	mov    ecx,eax
        } else {
            i = j;
  22c54d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  22c551:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
            j = 2 * j + 1;
  22c555:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22c559:	48 f7 e1             	mul    rcx
  22c55c:	40 0f 90 c6          	seto   sil
  22c560:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  22c564:	40 88 75 c7          	mov    BYTE PTR [rbp-0x39],sil
  22c568:	70 78                	jo     22c5e2 <tableLowerBound+0xf2>
  22c56a:	e9 83 00 00 00       	jmp    22c5f2 <tableLowerBound+0x102>
    while (j < enum3.len) {
  22c56f:	eb 9b                	jmp    22c50c <tableLowerBound+0x1c>
        }
    }

    return i;
  22c571:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22c575:	48 83 c4 60          	add    rsp,0x60
  22c579:	5d                   	pop    rbp
  22c57a:	c3                   	ret    
  22c57b:	48 8d 3d 56 6e 01 00 	lea    rdi,[rip+0x16e56]        # 2433d8 <__unnamed_20>
  22c582:	31 c0                	xor    eax,eax
  22c584:	89 c6                	mov    esi,eax
        if (enum3[j] < k) {
  22c586:	e8 75 f0 fd ff       	call   20b600 <panic>
  22c58b:	48 8d 05 a6 58 fd ff 	lea    rax,[rip+0xfffffffffffd58a6]        # 201e38 <enum3.12>
  22c592:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  22c596:	48 8b 04 c8          	mov    rax,QWORD PTR [rax+rcx*8]
  22c59a:	48 3b 45 f8          	cmp    rax,QWORD PTR [rbp-0x8]
  22c59e:	72 88                	jb     22c528 <tableLowerBound+0x38>
  22c5a0:	eb a4                	jmp    22c546 <tableLowerBound+0x56>
  22c5a2:	48 8d 3d 1f 6c 01 00 	lea    rdi,[rip+0x16c1f]        # 2431c8 <__unnamed_4>
  22c5a9:	31 c0                	xor    eax,eax
  22c5ab:	89 c6                	mov    esi,eax
            j = 2 * j + 2;
  22c5ad:	e8 4e f0 fd ff       	call   20b600 <panic>
  22c5b2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  22c5b6:	48 83 c0 02          	add    rax,0x2
  22c5ba:	0f 92 c1             	setb   cl
  22c5bd:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  22c5c1:	88 4d b7             	mov    BYTE PTR [rbp-0x49],cl
  22c5c4:	72 02                	jb     22c5c8 <tableLowerBound+0xd8>
  22c5c6:	eb 10                	jmp    22c5d8 <tableLowerBound+0xe8>
  22c5c8:	48 8d 3d f9 6b 01 00 	lea    rdi,[rip+0x16bf9]        # 2431c8 <__unnamed_4>
  22c5cf:	31 c0                	xor    eax,eax
  22c5d1:	89 c6                	mov    esi,eax
  22c5d3:	e8 28 f0 fd ff       	call   20b600 <panic>
  22c5d8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  22c5dc:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
        if (enum3[j] < k) {
  22c5e0:	eb 8d                	jmp    22c56f <tableLowerBound+0x7f>
  22c5e2:	48 8d 3d df 6b 01 00 	lea    rdi,[rip+0x16bdf]        # 2431c8 <__unnamed_4>
  22c5e9:	31 c0                	xor    eax,eax
  22c5eb:	89 c6                	mov    esi,eax
            j = 2 * j + 1;
  22c5ed:	e8 0e f0 fd ff       	call   20b600 <panic>
  22c5f2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  22c5f6:	48 83 c0 01          	add    rax,0x1
  22c5fa:	0f 92 c1             	setb   cl
  22c5fd:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  22c601:	88 4d a7             	mov    BYTE PTR [rbp-0x59],cl
  22c604:	72 02                	jb     22c608 <tableLowerBound+0x118>
  22c606:	eb 10                	jmp    22c618 <tableLowerBound+0x128>
  22c608:	48 8d 3d b9 6b 01 00 	lea    rdi,[rip+0x16bb9]        # 2431c8 <__unnamed_4>
  22c60f:	31 c0                	xor    eax,eax
  22c611:	89 c6                	mov    esi,eax
  22c613:	e8 e8 ef fd ff       	call   20b600 <panic>
  22c618:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  22c61c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
        if (enum3[j] < k) {
  22c620:	e9 4a ff ff ff       	jmp    22c56f <tableLowerBound+0x7f>
  22c625:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22c62c:	00 00 00 00 

000000000022c630 <errol3u>:
fn errol3u(val: f64, buffer: []u8) FloatDecimal {
  22c630:	55                   	push   rbp
  22c631:	48 89 e5             	mov    rbp,rsp
  22c634:	48 81 ec 70 02 00 00 	sub    rsp,0x270
  22c63b:	48 89 f8             	mov    rax,rdi
  22c63e:	c5 fb 10 0d 5a 46 fd 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffd465a]        # 200ca0 <__unnamed_190+0x8>
  22c645:	ff 
  22c646:	c5 fb 11 85 50 ff ff 	vmovsd QWORD PTR [rbp-0xb0],xmm0
  22c64d:	ff 
    if (val > 9.007199254740992e15 and val < 3.40282366920938e+38) {
  22c64e:	c5 fb 10 85 50 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xb0]
  22c655:	ff 
  22c656:	c5 f9 2e c1          	vucomisd xmm0,xmm1
  22c65a:	0f 97 c1             	seta   cl
  22c65d:	f6 c1 01             	test   cl,0x1
  22c660:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
  22c667:	48 89 b5 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rsi
  22c66e:	48 89 bd d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rdi
  22c675:	88 8d cf fe ff ff    	mov    BYTE PTR [rbp-0x131],cl
  22c67b:	75 02                	jne    22c67f <errol3u+0x4f>
  22c67d:	eb 19                	jmp    22c698 <errol3u+0x68>
  22c67f:	c5 fb 10 05 c1 45 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd45c1]        # 200c48 <app_mask+0x8>
  22c686:	ff 
  22c687:	c5 f9 2e 85 50 ff ff 	vucomisd xmm0,QWORD PTR [rbp-0xb0]
  22c68e:	ff 
  22c68f:	0f 97 c0             	seta   al
  22c692:	88 85 cf fe ff ff    	mov    BYTE PTR [rbp-0x131],al
  22c698:	8a 85 cf fe ff ff    	mov    al,BYTE PTR [rbp-0x131]
  22c69e:	a8 01                	test   al,0x1
  22c6a0:	75 02                	jne    22c6a4 <errol3u+0x74>
  22c6a2:	eb 46                	jmp    22c6ea <errol3u+0xba>
  22c6a4:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
        return errolInt(val, buffer);
  22c6a8:	c5 fb 10 85 50 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xb0]
  22c6af:	ff 
  22c6b0:	48 8b b5 d8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x128]
  22c6b7:	e8 34 0f 00 00       	call   22d5f0 <errolInt>
  22c6bc:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  22c6c0:	48 8b bd d0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x130]
  22c6c7:	48 89 37             	mov    QWORD PTR [rdi],rsi
  22c6ca:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  22c6ce:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  22c6d2:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  22c6d6:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  22c6da:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
  22c6e1:	48 81 c4 70 02 00 00 	add    rsp,0x270
  22c6e8:	5d                   	pop    rbp
  22c6e9:	c3                   	ret    
  22c6ea:	c5 fb 10 05 16 45 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd4516]        # 200c08 <__unnamed_186+0x8>
  22c6f1:	ff 
    } else if (val >= 16.0 and val < 9.007199254740992e15) {
  22c6f2:	c5 fb 10 8d 50 ff ff 	vmovsd xmm1,QWORD PTR [rbp-0xb0]
  22c6f9:	ff 
  22c6fa:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22c6fe:	0f 93 c0             	setae  al
  22c701:	a8 01                	test   al,0x1
  22c703:	88 85 ce fe ff ff    	mov    BYTE PTR [rbp-0x132],al
  22c709:	75 02                	jne    22c70d <errol3u+0xdd>
  22c70b:	eb 19                	jmp    22c726 <errol3u+0xf6>
  22c70d:	c5 fb 10 05 8b 45 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd458b]        # 200ca0 <__unnamed_190+0x8>
  22c714:	ff 
  22c715:	c5 f9 2e 85 50 ff ff 	vucomisd xmm0,QWORD PTR [rbp-0xb0]
  22c71c:	ff 
  22c71d:	0f 97 c0             	seta   al
  22c720:	88 85 ce fe ff ff    	mov    BYTE PTR [rbp-0x132],al
  22c726:	8a 85 ce fe ff ff    	mov    al,BYTE PTR [rbp-0x132]
  22c72c:	a8 01                	test   al,0x1
  22c72e:	75 02                	jne    22c732 <errol3u+0x102>
  22c730:	eb 46                	jmp    22c778 <errol3u+0x148>
  22c732:	48 8d 7d d0          	lea    rdi,[rbp-0x30]
        return errolFixed(val, buffer);
  22c736:	c5 fb 10 85 50 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xb0]
  22c73d:	ff 
  22c73e:	48 8b b5 d8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x128]
  22c745:	e8 a6 1a 00 00       	call   22e1f0 <errolFixed>
  22c74a:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  22c74e:	48 8b bd d0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x130]
  22c755:	48 89 37             	mov    QWORD PTR [rdi],rsi
  22c758:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  22c75c:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
  22c760:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  22c764:	48 89 77 10          	mov    QWORD PTR [rdi+0x10],rsi
  22c768:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
  22c76f:	48 81 c4 70 02 00 00 	add    rsp,0x270
  22c776:	5d                   	pop    rbp
  22c777:	c3                   	ret    
    } else if (val >= 16.0 and val < 9.007199254740992e15) {
  22c778:	eb 00                	jmp    22c77a <errol3u+0x14a>
    if (val > 9.007199254740992e15 and val < 3.40282366920938e+38) {
  22c77a:	eb 00                	jmp    22c77c <errol3u+0x14c>
  22c77c:	c5 fb 10 05 8c 44 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd448c]        # 200c10 <__unnamed_186+0x10>
  22c783:	ff 
  22c784:	c5 fb 10 0d 6c 44 fd 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffd446c]        # 200bf8 <__unnamed_187+0x8>
  22c78b:	ff 
    const e = math.frexp(val).exponent;
  22c78c:	c5 fb 10 95 50 ff ff 	vmovsd xmm2,QWORD PTR [rbp-0xb0]
  22c793:	ff 
  22c794:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  22c798:	c5 fb 11 85 c0 fe ff 	vmovsd QWORD PTR [rbp-0x140],xmm0
  22c79f:	ff 
  22c7a0:	c5 f8 28 c2          	vmovaps xmm0,xmm2
  22c7a4:	c5 fb 11 8d b8 fe ff 	vmovsd QWORD PTR [rbp-0x148],xmm1
  22c7ab:	ff 
  22c7ac:	e8 0f 24 00 00       	call   22ebc0 <frexp>
  22c7b1:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  22c7b4:	89 85 4c ff ff ff    	mov    DWORD PTR [rbp-0xb4],eax
    var exp = @floatToInt(i16, math.floor(307 + @intToFloat(f64, e) * 0.30103));
  22c7ba:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [rbp-0xb4]
  22c7c0:	c5 fb 2a c0          	vcvtsi2sd xmm0,xmm0,eax
  22c7c4:	c5 fb 10 0d 5c 44 fd 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffd445c]        # 200c28 <__unnamed_186+0x28>
  22c7cb:	ff 
  22c7cc:	c5 fb 10 15 44 44 fd 	vmovsd xmm2,QWORD PTR [rip+0xfffffffffffd4444]        # 200c18 <__unnamed_186+0x18>
  22c7d3:	ff 
  22c7d4:	c4 e2 f9 a9 d1       	vfmadd213sd xmm2,xmm0,xmm1
  22c7d9:	c5 f8 28 c2          	vmovaps xmm0,xmm2
  22c7dd:	e8 2e 24 00 00       	call   22ec10 <floor.0>
  22c7e2:	c5 f8 28 c8          	vmovaps xmm1,xmm0
  22c7e6:	c5 fb 2c c0          	vcvttsd2si eax,xmm0
  22c7ea:	66 89 c1             	mov    cx,ax
  22c7ed:	0f bf c1             	movsx  eax,cx
  22c7f0:	c5 fb 2a c0          	vcvtsi2sd xmm0,xmm0,eax
  22c7f4:	c5 f3 5c c0          	vsubsd xmm0,xmm1,xmm0
  22c7f8:	c5 fb 10 8d b8 fe ff 	vmovsd xmm1,QWORD PTR [rbp-0x148]
  22c7ff:	ff 
  22c800:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22c804:	0f 97 c2             	seta   dl
  22c807:	c5 fb 10 95 c0 fe ff 	vmovsd xmm2,QWORD PTR [rbp-0x140]
  22c80e:	ff 
  22c80f:	c5 f9 2e c2          	vucomisd xmm0,xmm2
  22c813:	40 0f 97 c6          	seta   sil
  22c817:	40 20 f2             	and    dl,sil
  22c81a:	f6 c2 01             	test   dl,0x1
  22c81d:	66 89 8d b6 fe ff ff 	mov    WORD PTR [rbp-0x14a],cx
  22c824:	0f 85 61 05 00 00    	jne    22cd8b <errol3u+0x75b>
  22c82a:	e9 7d 05 00 00       	jmp    22cdac <errol3u+0x77c>
        exp = 20;
  22c82f:	66 c7 85 4a ff ff ff 	mov    WORD PTR [rbp-0xb6],0x14
  22c836:	14 00 
    if (exp < 20) {
  22c838:	eb 1f                	jmp    22c859 <errol3u+0x229>
    } else if (@intCast(usize, exp) >= lookup_table.len) {
  22c83a:	48 0f bf 85 4a ff ff 	movsx  rax,WORD PTR [rbp-0xb6]
  22c841:	ff 
  22c842:	48 3d 58 02 00 00    	cmp    rax,0x258
  22c848:	72 0b                	jb     22c855 <errol3u+0x225>
        exp = @intCast(i16, lookup_table.len - 1);
  22c84a:	66 c7 85 4a ff ff ff 	mov    WORD PTR [rbp-0xb6],0x257
  22c851:	57 02 
    } else if (@intCast(usize, exp) >= lookup_table.len) {
  22c853:	eb 02                	jmp    22c857 <errol3u+0x227>
  22c855:	eb 00                	jmp    22c857 <errol3u+0x227>
    if (exp < 20) {
  22c857:	eb 00                	jmp    22c859 <errol3u+0x229>
    var mid = lookup_table[@intCast(usize, exp)];
  22c859:	48 0f bf 85 4a ff ff 	movsx  rax,WORD PTR [rbp-0xb6]
  22c860:	ff 
  22c861:	48 3d 58 02 00 00    	cmp    rax,0x258
  22c867:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
  22c86e:	0f 82 58 05 00 00    	jb     22cdcc <errol3u+0x79c>
  22c874:	e9 43 05 00 00       	jmp    22cdbc <errol3u+0x78c>
  22c879:	c5 fb 10 05 67 43 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd4367]        # 200be8 <__unnamed_185+0x18>
  22c880:	ff 
    while (mid.val > 10.0 or (mid.val == 10.0 and mid.off >= 0.0)) {
  22c881:	c5 fb 10 8d 38 ff ff 	vmovsd xmm1,QWORD PTR [rbp-0xc8]
  22c888:	ff 
  22c889:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22c88d:	0f 97 c0             	seta   al
  22c890:	a8 01                	test   al,0x1
  22c892:	88 85 a7 fe ff ff    	mov    BYTE PTR [rbp-0x159],al
  22c898:	75 4d                	jne    22c8e7 <errol3u+0x2b7>
  22c89a:	c5 fb 10 05 46 43 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd4346]        # 200be8 <__unnamed_185+0x18>
  22c8a1:	ff 
  22c8a2:	c5 fb 10 8d 38 ff ff 	vmovsd xmm1,QWORD PTR [rbp-0xc8]
  22c8a9:	ff 
  22c8aa:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22c8ae:	0f 94 c0             	sete   al
  22c8b1:	0f 9b c1             	setnp  cl
  22c8b4:	20 c8                	and    al,cl
  22c8b6:	a8 01                	test   al,0x1
  22c8b8:	88 85 a6 fe ff ff    	mov    BYTE PTR [rbp-0x15a],al
  22c8be:	75 02                	jne    22c8c2 <errol3u+0x292>
  22c8c0:	eb 19                	jmp    22c8db <errol3u+0x2ab>
  22c8c2:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
  22c8c6:	c5 fb 10 8d 40 ff ff 	vmovsd xmm1,QWORD PTR [rbp-0xc0]
  22c8cd:	ff 
  22c8ce:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22c8d2:	0f 93 c0             	setae  al
  22c8d5:	88 85 a6 fe ff ff    	mov    BYTE PTR [rbp-0x15a],al
  22c8db:	8a 85 a6 fe ff ff    	mov    al,BYTE PTR [rbp-0x15a]
  22c8e1:	88 85 a7 fe ff ff    	mov    BYTE PTR [rbp-0x159],al
  22c8e7:	8a 85 a7 fe ff ff    	mov    al,BYTE PTR [rbp-0x159]
  22c8ed:	a8 01                	test   al,0x1
  22c8ef:	75 02                	jne    22c8f3 <errol3u+0x2c3>
  22c8f1:	eb 22                	jmp    22c915 <errol3u+0x2e5>
        exp += 1;
  22c8f3:	66 8b 85 4a ff ff ff 	mov    ax,WORD PTR [rbp-0xb6]
  22c8fa:	66 ff c0             	inc    ax
  22c8fd:	0f 90 c1             	seto   cl
  22c900:	f6 c1 01             	test   cl,0x1
  22c903:	66 89 85 a4 fe ff ff 	mov    WORD PTR [rbp-0x15c],ax
  22c90a:	0f 85 ae 05 00 00    	jne    22cebe <errol3u+0x88e>
  22c910:	e9 b9 05 00 00       	jmp    22cece <errol3u+0x89e>
    while (mid.val < 1.0 or (mid.val == 1.0 and mid.off < 0.0)) {
  22c915:	eb 00                	jmp    22c917 <errol3u+0x2e7>
  22c917:	c5 fb 10 05 d9 42 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd42d9]        # 200bf8 <__unnamed_187+0x8>
  22c91e:	ff 
  22c91f:	c5 f9 2e 85 38 ff ff 	vucomisd xmm0,QWORD PTR [rbp-0xc8]
  22c926:	ff 
  22c927:	0f 97 c0             	seta   al
  22c92a:	a8 01                	test   al,0x1
  22c92c:	88 85 a3 fe ff ff    	mov    BYTE PTR [rbp-0x15d],al
  22c932:	75 49                	jne    22c97d <errol3u+0x34d>
  22c934:	c5 fb 10 05 bc 42 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd42bc]        # 200bf8 <__unnamed_187+0x8>
  22c93b:	ff 
  22c93c:	c5 fb 10 8d 38 ff ff 	vmovsd xmm1,QWORD PTR [rbp-0xc8]
  22c943:	ff 
  22c944:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22c948:	0f 94 c0             	sete   al
  22c94b:	0f 9b c1             	setnp  cl
  22c94e:	20 c8                	and    al,cl
  22c950:	a8 01                	test   al,0x1
  22c952:	88 85 a2 fe ff ff    	mov    BYTE PTR [rbp-0x15e],al
  22c958:	75 02                	jne    22c95c <errol3u+0x32c>
  22c95a:	eb 15                	jmp    22c971 <errol3u+0x341>
  22c95c:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
  22c960:	c5 f9 2e 85 40 ff ff 	vucomisd xmm0,QWORD PTR [rbp-0xc0]
  22c967:	ff 
  22c968:	0f 97 c0             	seta   al
  22c96b:	88 85 a2 fe ff ff    	mov    BYTE PTR [rbp-0x15e],al
  22c971:	8a 85 a2 fe ff ff    	mov    al,BYTE PTR [rbp-0x15e]
  22c977:	88 85 a3 fe ff ff    	mov    BYTE PTR [rbp-0x15d],al
  22c97d:	8a 85 a3 fe ff ff    	mov    al,BYTE PTR [rbp-0x15d]
  22c983:	a8 01                	test   al,0x1
  22c985:	75 02                	jne    22c989 <errol3u+0x359>
  22c987:	eb 22                	jmp    22c9ab <errol3u+0x37b>
        exp -= 1;
  22c989:	66 8b 85 4a ff ff ff 	mov    ax,WORD PTR [rbp-0xb6]
  22c990:	66 ff c8             	dec    ax
  22c993:	0f 90 c1             	seto   cl
  22c996:	f6 c1 01             	test   cl,0x1
  22c999:	66 89 85 a0 fe ff ff 	mov    WORD PTR [rbp-0x160],ax
  22c9a0:	0f 85 8c 05 00 00    	jne    22cf32 <errol3u+0x902>
  22c9a6:	e9 97 05 00 00       	jmp    22cf42 <errol3u+0x912>
        .val = mid.val,
  22c9ab:	c5 fb 10 85 38 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xc8]
  22c9b2:	ff 
        .off = mid.off + (fpnext(val) - val) * lten * ten / 2.0,
  22c9b3:	c5 fb 10 8d 40 ff ff 	vmovsd xmm1,QWORD PTR [rbp-0xc0]
  22c9ba:	ff 
  22c9bb:	c5 fb 10 95 50 ff ff 	vmovsd xmm2,QWORD PTR [rbp-0xb0]
  22c9c2:	ff 
  22c9c3:	c5 fb 11 85 98 fe ff 	vmovsd QWORD PTR [rbp-0x168],xmm0
  22c9ca:	ff 
  22c9cb:	c5 f8 28 c2          	vmovaps xmm0,xmm2
  22c9cf:	c5 fb 11 8d 90 fe ff 	vmovsd QWORD PTR [rbp-0x170],xmm1
  22c9d6:	ff 
  22c9d7:	e8 e4 25 00 00       	call   22efc0 <fpnext>
  22c9dc:	31 c0                	xor    eax,eax
  22c9de:	88 c1                	mov    cl,al
  22c9e0:	c5 fb 5c 85 50 ff ff 	vsubsd xmm0,xmm0,QWORD PTR [rbp-0xb0]
  22c9e7:	ff 
  22c9e8:	c5 fb 59 85 30 ff ff 	vmulsd xmm0,xmm0,QWORD PTR [rbp-0xd0]
  22c9ef:	ff 
  22c9f0:	c5 fb 59 85 28 ff ff 	vmulsd xmm0,xmm0,QWORD PTR [rbp-0xd8]
  22c9f7:	ff 
  22c9f8:	f6 c1 01             	test   cl,0x1
  22c9fb:	c5 fb 11 85 88 fe ff 	vmovsd QWORD PTR [rbp-0x178],xmm0
  22ca02:	ff 
  22ca03:	0f 85 14 06 00 00    	jne    22d01d <errol3u+0x9ed>
  22ca09:	e9 6b 05 00 00       	jmp    22cf79 <errol3u+0x949>
  22ca0e:	c5 fb 10 05 d2 41 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd41d2]        # 200be8 <__unnamed_185+0x18>
  22ca15:	ff 
    while (high.val > 10.0 or (high.val == 10.0 and high.off >= 0.0)) {
  22ca16:	c5 fb 10 8d 18 ff ff 	vmovsd xmm1,QWORD PTR [rbp-0xe8]
  22ca1d:	ff 
  22ca1e:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22ca22:	0f 97 c0             	seta   al
  22ca25:	a8 01                	test   al,0x1
  22ca27:	88 85 87 fe ff ff    	mov    BYTE PTR [rbp-0x179],al
  22ca2d:	75 4d                	jne    22ca7c <errol3u+0x44c>
  22ca2f:	c5 fb 10 05 b1 41 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd41b1]        # 200be8 <__unnamed_185+0x18>
  22ca36:	ff 
  22ca37:	c5 fb 10 8d 18 ff ff 	vmovsd xmm1,QWORD PTR [rbp-0xe8]
  22ca3e:	ff 
  22ca3f:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22ca43:	0f 94 c0             	sete   al
  22ca46:	0f 9b c1             	setnp  cl
  22ca49:	20 c8                	and    al,cl
  22ca4b:	a8 01                	test   al,0x1
  22ca4d:	88 85 86 fe ff ff    	mov    BYTE PTR [rbp-0x17a],al
  22ca53:	75 02                	jne    22ca57 <errol3u+0x427>
  22ca55:	eb 19                	jmp    22ca70 <errol3u+0x440>
  22ca57:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
  22ca5b:	c5 fb 10 8d 20 ff ff 	vmovsd xmm1,QWORD PTR [rbp-0xe0]
  22ca62:	ff 
  22ca63:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22ca67:	0f 93 c0             	setae  al
  22ca6a:	88 85 86 fe ff ff    	mov    BYTE PTR [rbp-0x17a],al
  22ca70:	8a 85 86 fe ff ff    	mov    al,BYTE PTR [rbp-0x17a]
  22ca76:	88 85 87 fe ff ff    	mov    BYTE PTR [rbp-0x179],al
  22ca7c:	8a 85 87 fe ff ff    	mov    al,BYTE PTR [rbp-0x179]
  22ca82:	a8 01                	test   al,0x1
  22ca84:	75 02                	jne    22ca88 <errol3u+0x458>
  22ca86:	eb 22                	jmp    22caaa <errol3u+0x47a>
        exp += 1;
  22ca88:	66 8b 85 4a ff ff ff 	mov    ax,WORD PTR [rbp-0xb6]
  22ca8f:	66 ff c0             	inc    ax
  22ca92:	0f 90 c1             	seto   cl
  22ca95:	f6 c1 01             	test   cl,0x1
  22ca98:	66 89 85 84 fe ff ff 	mov    WORD PTR [rbp-0x17c],ax
  22ca9f:	0f 85 fd 05 00 00    	jne    22d0a2 <errol3u+0xa72>
  22caa5:	e9 08 06 00 00       	jmp    22d0b2 <errol3u+0xa82>
    while (high.val < 1.0 or (high.val == 1.0 and high.off < 0.0)) {
  22caaa:	eb 00                	jmp    22caac <errol3u+0x47c>
  22caac:	c5 fb 10 05 44 41 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd4144]        # 200bf8 <__unnamed_187+0x8>
  22cab3:	ff 
  22cab4:	c5 f9 2e 85 18 ff ff 	vucomisd xmm0,QWORD PTR [rbp-0xe8]
  22cabb:	ff 
  22cabc:	0f 97 c0             	seta   al
  22cabf:	a8 01                	test   al,0x1
  22cac1:	88 85 83 fe ff ff    	mov    BYTE PTR [rbp-0x17d],al
  22cac7:	75 49                	jne    22cb12 <errol3u+0x4e2>
  22cac9:	c5 fb 10 05 27 41 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd4127]        # 200bf8 <__unnamed_187+0x8>
  22cad0:	ff 
  22cad1:	c5 fb 10 8d 18 ff ff 	vmovsd xmm1,QWORD PTR [rbp-0xe8]
  22cad8:	ff 
  22cad9:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22cadd:	0f 94 c0             	sete   al
  22cae0:	0f 9b c1             	setnp  cl
  22cae3:	20 c8                	and    al,cl
  22cae5:	a8 01                	test   al,0x1
  22cae7:	88 85 82 fe ff ff    	mov    BYTE PTR [rbp-0x17e],al
  22caed:	75 02                	jne    22caf1 <errol3u+0x4c1>
  22caef:	eb 15                	jmp    22cb06 <errol3u+0x4d6>
  22caf1:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
  22caf5:	c5 f9 2e 85 20 ff ff 	vucomisd xmm0,QWORD PTR [rbp-0xe0]
  22cafc:	ff 
  22cafd:	0f 97 c0             	seta   al
  22cb00:	88 85 82 fe ff ff    	mov    BYTE PTR [rbp-0x17e],al
  22cb06:	8a 85 82 fe ff ff    	mov    al,BYTE PTR [rbp-0x17e]
  22cb0c:	88 85 83 fe ff ff    	mov    BYTE PTR [rbp-0x17d],al
  22cb12:	8a 85 83 fe ff ff    	mov    al,BYTE PTR [rbp-0x17d]
  22cb18:	a8 01                	test   al,0x1
  22cb1a:	75 02                	jne    22cb1e <errol3u+0x4ee>
  22cb1c:	eb 22                	jmp    22cb40 <errol3u+0x510>
        exp -= 1;
  22cb1e:	66 8b 85 4a ff ff ff 	mov    ax,WORD PTR [rbp-0xb6]
  22cb25:	66 ff c8             	dec    ax
  22cb28:	0f 90 c1             	seto   cl
  22cb2b:	f6 c1 01             	test   cl,0x1
  22cb2e:	66 89 85 80 fe ff ff 	mov    WORD PTR [rbp-0x180],ax
  22cb35:	0f 85 a2 05 00 00    	jne    22d0dd <errol3u+0xaad>
  22cb3b:	e9 ad 05 00 00       	jmp    22d0ed <errol3u+0xabd>
    var buf_index: usize = 1;
  22cb40:	48 c7 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],0x1
  22cb47:	01 00 00 00 
    while (true) {
  22cb4b:	eb 00                	jmp    22cb4d <errol3u+0x51d>
  22cb4d:	c5 fb 10 05 bb 40 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd40bb]        # 200c10 <__unnamed_186+0x10>
  22cb54:	ff 
  22cb55:	c5 fb 10 0d 9b 40 fd 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffd409b]        # 200bf8 <__unnamed_187+0x8>
  22cb5c:	ff 
        var hdig = @floatToInt(u8, math.floor(high.val));
  22cb5d:	c5 fb 10 95 18 ff ff 	vmovsd xmm2,QWORD PTR [rbp-0xe8]
  22cb64:	ff 
  22cb65:	c5 fb 11 85 78 fe ff 	vmovsd QWORD PTR [rbp-0x188],xmm0
  22cb6c:	ff 
  22cb6d:	c5 f8 28 c2          	vmovaps xmm0,xmm2
  22cb71:	c5 fb 11 8d 70 fe ff 	vmovsd QWORD PTR [rbp-0x190],xmm1
  22cb78:	ff 
  22cb79:	e8 92 20 00 00       	call   22ec10 <floor.0>
  22cb7e:	c5 f8 28 c8          	vmovaps xmm1,xmm0
  22cb82:	c5 fb 2c c0          	vcvttsd2si eax,xmm0
  22cb86:	88 c1                	mov    cl,al
  22cb88:	0f b6 c1             	movzx  eax,cl
  22cb8b:	c5 fb 2a c0          	vcvtsi2sd xmm0,xmm0,eax
  22cb8f:	c5 f3 5c c0          	vsubsd xmm0,xmm1,xmm0
  22cb93:	c5 fb 10 8d 70 fe ff 	vmovsd xmm1,QWORD PTR [rbp-0x190]
  22cb9a:	ff 
  22cb9b:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22cb9f:	0f 97 c2             	seta   dl
  22cba2:	c5 fb 10 95 78 fe ff 	vmovsd xmm2,QWORD PTR [rbp-0x188]
  22cba9:	ff 
  22cbaa:	c5 f9 2e c2          	vucomisd xmm0,xmm2
  22cbae:	40 0f 97 c6          	seta   sil
  22cbb2:	40 20 f2             	and    dl,sil
  22cbb5:	f6 c2 01             	test   dl,0x1
  22cbb8:	88 8d 6f fe ff ff    	mov    BYTE PTR [rbp-0x191],cl
  22cbbe:	0f 85 54 05 00 00    	jne    22d118 <errol3u+0xae8>
  22cbc4:	e9 90 05 00 00       	jmp    22d159 <errol3u+0xb29>
  22cbc9:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
        if ((high.val == @intToFloat(f64, hdig)) and (high.off < 0)) hdig -= 1;
  22cbcd:	c5 f9 2e 85 20 ff ff 	vucomisd xmm0,QWORD PTR [rbp-0xe0]
  22cbd4:	ff 
  22cbd5:	0f 97 c0             	seta   al
  22cbd8:	88 85 6e fe ff ff    	mov    BYTE PTR [rbp-0x192],al
  22cbde:	8a 85 6e fe ff ff    	mov    al,BYTE PTR [rbp-0x192]
  22cbe4:	a8 01                	test   al,0x1
  22cbe6:	75 02                	jne    22cbea <errol3u+0x5ba>
  22cbe8:	eb 1f                	jmp    22cc09 <errol3u+0x5d9>
  22cbea:	8a 85 ff fe ff ff    	mov    al,BYTE PTR [rbp-0x101]
  22cbf0:	2c 01                	sub    al,0x1
  22cbf2:	0f 92 c1             	setb   cl
  22cbf5:	f6 c1 01             	test   cl,0x1
  22cbf8:	88 85 6d fe ff ff    	mov    BYTE PTR [rbp-0x193],al
  22cbfe:	0f 85 65 05 00 00    	jne    22d169 <errol3u+0xb39>
  22cc04:	e9 70 05 00 00       	jmp    22d179 <errol3u+0xb49>
  22cc09:	eb 00                	jmp    22cc0b <errol3u+0x5db>
  22cc0b:	c5 fb 10 05 fd 3f fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd3ffd]        # 200c10 <__unnamed_186+0x10>
  22cc12:	ff 
  22cc13:	c5 fb 10 0d dd 3f fd 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffd3fdd]        # 200bf8 <__unnamed_187+0x8>
  22cc1a:	ff 
        var ldig = @floatToInt(u8, math.floor(low.val));
  22cc1b:	c5 fb 10 95 08 ff ff 	vmovsd xmm2,QWORD PTR [rbp-0xf8]
  22cc22:	ff 
  22cc23:	c5 fb 11 85 60 fe ff 	vmovsd QWORD PTR [rbp-0x1a0],xmm0
  22cc2a:	ff 
  22cc2b:	c5 f8 28 c2          	vmovaps xmm0,xmm2
  22cc2f:	c5 fb 11 8d 58 fe ff 	vmovsd QWORD PTR [rbp-0x1a8],xmm1
  22cc36:	ff 
  22cc37:	e8 d4 1f 00 00       	call   22ec10 <floor.0>
  22cc3c:	c5 f8 28 c8          	vmovaps xmm1,xmm0
  22cc40:	c5 fb 2c c0          	vcvttsd2si eax,xmm0
  22cc44:	88 c1                	mov    cl,al
  22cc46:	0f b6 c1             	movzx  eax,cl
  22cc49:	c5 fb 2a c0          	vcvtsi2sd xmm0,xmm0,eax
  22cc4d:	c5 f3 5c c0          	vsubsd xmm0,xmm1,xmm0
  22cc51:	c5 fb 10 8d 58 fe ff 	vmovsd xmm1,QWORD PTR [rbp-0x1a8]
  22cc58:	ff 
  22cc59:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22cc5d:	0f 97 c2             	seta   dl
  22cc60:	c5 fb 10 95 60 fe ff 	vmovsd xmm2,QWORD PTR [rbp-0x1a0]
  22cc67:	ff 
  22cc68:	c5 f9 2e c2          	vucomisd xmm0,xmm2
  22cc6c:	40 0f 97 c6          	seta   sil
  22cc70:	40 20 f2             	and    dl,sil
  22cc73:	f6 c2 01             	test   dl,0x1
  22cc76:	88 8d 57 fe ff ff    	mov    BYTE PTR [rbp-0x1a9],cl
  22cc7c:	0f 85 08 05 00 00    	jne    22d18a <errol3u+0xb5a>
  22cc82:	e9 44 05 00 00       	jmp    22d1cb <errol3u+0xb9b>
  22cc87:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
        if ((low.val == @intToFloat(f64, ldig)) and (low.off < 0)) ldig -= 1;
  22cc8b:	c5 f9 2e 85 10 ff ff 	vucomisd xmm0,QWORD PTR [rbp-0xf0]
  22cc92:	ff 
  22cc93:	0f 97 c0             	seta   al
  22cc96:	88 85 56 fe ff ff    	mov    BYTE PTR [rbp-0x1aa],al
  22cc9c:	8a 85 56 fe ff ff    	mov    al,BYTE PTR [rbp-0x1aa]
  22cca2:	a8 01                	test   al,0x1
  22cca4:	75 02                	jne    22cca8 <errol3u+0x678>
  22cca6:	eb 1f                	jmp    22ccc7 <errol3u+0x697>
  22cca8:	8a 85 fe fe ff ff    	mov    al,BYTE PTR [rbp-0x102]
  22ccae:	2c 01                	sub    al,0x1
  22ccb0:	0f 92 c1             	setb   cl
  22ccb3:	f6 c1 01             	test   cl,0x1
  22ccb6:	88 85 55 fe ff ff    	mov    BYTE PTR [rbp-0x1ab],al
  22ccbc:	0f 85 19 05 00 00    	jne    22d1db <errol3u+0xbab>
  22ccc2:	e9 24 05 00 00       	jmp    22d1eb <errol3u+0xbbb>
  22ccc7:	eb 00                	jmp    22ccc9 <errol3u+0x699>
        if (ldig != hdig) break;
  22ccc9:	8a 85 fe fe ff ff    	mov    al,BYTE PTR [rbp-0x102]
  22cccf:	3a 85 ff fe ff ff    	cmp    al,BYTE PTR [rbp-0x101]
  22ccd5:	74 02                	je     22ccd9 <errol3u+0x6a9>
  22ccd7:	eb 24                	jmp    22ccfd <errol3u+0x6cd>
        buffer[buf_index] = hdig + '0';
  22ccd9:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  22cce0:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
  22cce7:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22cceb:	48 89 85 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rax
  22ccf2:	0f 82 14 05 00 00    	jb     22d20c <errol3u+0xbdc>
  22ccf8:	e9 ff 04 00 00       	jmp    22d1fc <errol3u+0xbcc>
  22ccfd:	31 c0                	xor    eax,eax
  22ccff:	88 c1                	mov    cl,al
    const tmp = (high.val + low.val) / 2.0;
  22cd01:	c5 fb 10 85 18 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xe8]
  22cd08:	ff 
  22cd09:	c5 fb 58 85 08 ff ff 	vaddsd xmm0,xmm0,QWORD PTR [rbp-0xf8]
  22cd10:	ff 
  22cd11:	f6 c1 01             	test   cl,0x1
  22cd14:	c5 fb 11 85 40 fe ff 	vmovsd QWORD PTR [rbp-0x1c0],xmm0
  22cd1b:	ff 
  22cd1c:	0f 85 73 06 00 00    	jne    22d395 <errol3u+0xd65>
  22cd22:	e9 d1 05 00 00       	jmp    22d2f8 <errol3u+0xcc8>
    if ((@intToFloat(f64, mdig) - tmp) == 0.5 and (mdig & 0x1) != 0) mdig -= 1;
  22cd27:	8a 85 ef fe ff ff    	mov    al,BYTE PTR [rbp-0x111]
  22cd2d:	24 01                	and    al,0x1
  22cd2f:	3c 00                	cmp    al,0x0
  22cd31:	0f 95 c0             	setne  al
  22cd34:	88 85 3f fe ff ff    	mov    BYTE PTR [rbp-0x1c1],al
  22cd3a:	8a 85 3f fe ff ff    	mov    al,BYTE PTR [rbp-0x1c1]
  22cd40:	a8 01                	test   al,0x1
  22cd42:	75 02                	jne    22cd46 <errol3u+0x716>
  22cd44:	eb 1f                	jmp    22cd65 <errol3u+0x735>
  22cd46:	8a 85 ef fe ff ff    	mov    al,BYTE PTR [rbp-0x111]
  22cd4c:	2c 01                	sub    al,0x1
  22cd4e:	0f 92 c1             	setb   cl
  22cd51:	f6 c1 01             	test   cl,0x1
  22cd54:	88 85 3e fe ff ff    	mov    BYTE PTR [rbp-0x1c2],al
  22cd5a:	0f 85 9e 06 00 00    	jne    22d3fe <errol3u+0xdce>
  22cd60:	e9 a9 06 00 00       	jmp    22d40e <errol3u+0xdde>
  22cd65:	eb 00                	jmp    22cd67 <errol3u+0x737>
    buffer[buf_index] = mdig + '0';
  22cd67:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  22cd6e:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
  22cd75:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22cd79:	48 89 85 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rax
  22cd80:	0f 82 a9 06 00 00    	jb     22d42f <errol3u+0xdff>
  22cd86:	e9 94 06 00 00       	jmp    22d41f <errol3u+0xdef>
    var exp = @floatToInt(i16, math.floor(307 + @intToFloat(f64, e) * 0.30103));
  22cd8b:	66 8b 85 b6 fe ff ff 	mov    ax,WORD PTR [rbp-0x14a]
  22cd92:	66 89 85 4a ff ff ff 	mov    WORD PTR [rbp-0xb6],ax
    if (exp < 20) {
  22cd99:	66 83 bd 4a ff ff ff 	cmp    WORD PTR [rbp-0xb6],0x14
  22cda0:	14 
  22cda1:	0f 8c 88 fa ff ff    	jl     22c82f <errol3u+0x1ff>
  22cda7:	e9 8e fa ff ff       	jmp    22c83a <errol3u+0x20a>
  22cdac:	48 8d 3d 2d 6d 01 00 	lea    rdi,[rip+0x16d2d]        # 243ae0 <__unnamed_227>
  22cdb3:	31 c0                	xor    eax,eax
  22cdb5:	89 c6                	mov    esi,eax
    var exp = @floatToInt(i16, math.floor(307 + @intToFloat(f64, e) * 0.30103));
  22cdb7:	e8 44 e8 fd ff       	call   20b600 <panic>
  22cdbc:	48 8d 3d 15 66 01 00 	lea    rdi,[rip+0x16615]        # 2433d8 <__unnamed_20>
  22cdc3:	31 c0                	xor    eax,eax
  22cdc5:	89 c6                	mov    esi,eax
    var mid = lookup_table[@intCast(usize, exp)];
  22cdc7:	e8 34 e8 fd ff       	call   20b600 <panic>
  22cdcc:	48 8d 7d a0          	lea    rdi,[rbp-0x60]
  22cdd0:	48 8d b5 38 ff ff ff 	lea    rsi,[rbp-0xc8]
  22cdd7:	48 8d 05 c2 96 fd ff 	lea    rax,[rip+0xfffffffffffd96c2]        # 2064a0 <lookup_table.15>
  22cdde:	48 8b 8d a8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x158]
  22cde5:	48 c1 e1 04          	shl    rcx,0x4
  22cde9:	48 01 c8             	add    rax,rcx
  22cdec:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22cdef:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  22cdf6:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  22cdfa:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
    mid = hpProd(mid, val);
  22ce01:	c5 fb 10 85 50 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xb0]
  22ce08:	ff 
  22ce09:	e8 22 1e 00 00       	call   22ec30 <hpProd>
  22ce0e:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22ce12:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
  22ce19:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  22ce1d:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
    const lten = lookup_table[@intCast(usize, exp)].val;
  22ce24:	48 0f bf 85 4a ff ff 	movsx  rax,WORD PTR [rbp-0xb6]
  22ce2b:	ff 
  22ce2c:	48 3d 58 02 00 00    	cmp    rax,0x258
  22ce32:	48 89 85 28 fe ff ff 	mov    QWORD PTR [rbp-0x1d8],rax
  22ce39:	72 10                	jb     22ce4b <errol3u+0x81b>
  22ce3b:	48 8d 3d 96 65 01 00 	lea    rdi,[rip+0x16596]        # 2433d8 <__unnamed_20>
  22ce42:	31 c0                	xor    eax,eax
  22ce44:	89 c6                	mov    esi,eax
  22ce46:	e8 b5 e7 fd ff       	call   20b600 <panic>
  22ce4b:	48 8d 05 4e 96 fd ff 	lea    rax,[rip+0xfffffffffffd964e]        # 2064a0 <lookup_table.15>
  22ce52:	48 8b 8d 28 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d8]
  22ce59:	48 c1 e1 04          	shl    rcx,0x4
  22ce5d:	48 01 c8             	add    rax,rcx
  22ce60:	c5 fb 10 00          	vmovsd xmm0,QWORD PTR [rax]
  22ce64:	c5 fb 11 85 30 ff ff 	vmovsd QWORD PTR [rbp-0xd0],xmm0
  22ce6b:	ff 
    exp -= 307;
  22ce6c:	66 8b 95 4a ff ff ff 	mov    dx,WORD PTR [rbp-0xb6]
  22ce73:	66 81 ea 33 01       	sub    dx,0x133
  22ce78:	40 0f 90 c6          	seto   sil
  22ce7c:	40 f6 c6 01          	test   sil,0x1
  22ce80:	66 89 95 26 fe ff ff 	mov    WORD PTR [rbp-0x1da],dx
  22ce87:	75 02                	jne    22ce8b <errol3u+0x85b>
  22ce89:	eb 10                	jmp    22ce9b <errol3u+0x86b>
  22ce8b:	48 8d 3d 36 63 01 00 	lea    rdi,[rip+0x16336]        # 2431c8 <__unnamed_4>
  22ce92:	31 c0                	xor    eax,eax
  22ce94:	89 c6                	mov    esi,eax
  22ce96:	e8 65 e7 fd ff       	call   20b600 <panic>
  22ce9b:	c5 fb 10 05 55 3d fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd3d55]        # 200bf8 <__unnamed_187+0x8>
  22cea2:	ff 
  22cea3:	66 8b 85 26 fe ff ff 	mov    ax,WORD PTR [rbp-0x1da]
  22ceaa:	66 89 85 4a ff ff ff 	mov    WORD PTR [rbp-0xb6],ax
    var ten: f64 = 1.0;
  22ceb1:	c5 fb 11 85 28 ff ff 	vmovsd QWORD PTR [rbp-0xd8],xmm0
  22ceb8:	ff 
    while (mid.val > 10.0 or (mid.val == 10.0 and mid.off >= 0.0)) {
  22ceb9:	e9 bb f9 ff ff       	jmp    22c879 <errol3u+0x249>
  22cebe:	48 8d 3d 03 63 01 00 	lea    rdi,[rip+0x16303]        # 2431c8 <__unnamed_4>
  22cec5:	31 c0                	xor    eax,eax
  22cec7:	89 c6                	mov    esi,eax
        exp += 1;
  22cec9:	e8 32 e7 fd ff       	call   20b600 <panic>
  22cece:	48 8d bd 38 ff ff ff 	lea    rdi,[rbp-0xc8]
  22ced5:	66 8b 85 a4 fe ff ff 	mov    ax,WORD PTR [rbp-0x15c]
  22cedc:	66 89 85 4a ff ff ff 	mov    WORD PTR [rbp-0xb6],ax
        hpDiv10(&mid);
  22cee3:	e8 d8 1e 00 00       	call   22edc0 <hpDiv10>
  22cee8:	31 c9                	xor    ecx,ecx
  22ceea:	88 ca                	mov    dl,cl
        ten /= 10.0;
  22ceec:	c5 fb 10 85 28 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xd8]
  22cef3:	ff 
  22cef4:	f6 c2 01             	test   dl,0x1
  22cef7:	c5 fb 11 85 18 fe ff 	vmovsd QWORD PTR [rbp-0x1e8],xmm0
  22cefe:	ff 
  22ceff:	75 21                	jne    22cf22 <errol3u+0x8f2>
  22cf01:	c5 fb 10 05 df 3c fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd3cdf]        # 200be8 <__unnamed_185+0x18>
  22cf08:	ff 
  22cf09:	c5 fb 10 8d 18 fe ff 	vmovsd xmm1,QWORD PTR [rbp-0x1e8]
  22cf10:	ff 
  22cf11:	c5 f3 5e c0          	vdivsd xmm0,xmm1,xmm0
  22cf15:	c5 fb 11 85 28 ff ff 	vmovsd QWORD PTR [rbp-0xd8],xmm0
  22cf1c:	ff 
    while (mid.val > 10.0 or (mid.val == 10.0 and mid.off >= 0.0)) {
  22cf1d:	e9 57 f9 ff ff       	jmp    22c879 <errol3u+0x249>
  22cf22:	48 8d 3d 17 63 01 00 	lea    rdi,[rip+0x16317]        # 243240 <__unnamed_7>
  22cf29:	31 c0                	xor    eax,eax
  22cf2b:	89 c6                	mov    esi,eax
        ten /= 10.0;
  22cf2d:	e8 ce e6 fd ff       	call   20b600 <panic>
  22cf32:	48 8d 3d 8f 62 01 00 	lea    rdi,[rip+0x1628f]        # 2431c8 <__unnamed_4>
  22cf39:	31 c0                	xor    eax,eax
  22cf3b:	89 c6                	mov    esi,eax
        exp -= 1;
  22cf3d:	e8 be e6 fd ff       	call   20b600 <panic>
  22cf42:	48 8d bd 38 ff ff ff 	lea    rdi,[rbp-0xc8]
  22cf49:	66 8b 85 a0 fe ff ff 	mov    ax,WORD PTR [rbp-0x160]
  22cf50:	66 89 85 4a ff ff ff 	mov    WORD PTR [rbp-0xb6],ax
        hpMul10(&mid);
  22cf57:	e8 c4 1f 00 00       	call   22ef20 <hpMul10>
  22cf5c:	c5 fb 10 05 84 3c fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd3c84]        # 200be8 <__unnamed_185+0x18>
  22cf63:	ff 
        ten *= 10.0;
  22cf64:	c5 fb 59 85 28 ff ff 	vmulsd xmm0,xmm0,QWORD PTR [rbp-0xd8]
  22cf6b:	ff 
  22cf6c:	c5 fb 11 85 28 ff ff 	vmovsd QWORD PTR [rbp-0xd8],xmm0
  22cf73:	ff 
    while (mid.val < 1.0 or (mid.val == 1.0 and mid.off < 0.0)) {
  22cf74:	e9 9e f9 ff ff       	jmp    22c917 <errol3u+0x2e7>
  22cf79:	c5 fb 10 05 5f 3c fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd3c5f]        # 200be0 <__unnamed_185+0x10>
  22cf80:	ff 
        .off = mid.off + (fpnext(val) - val) * lten * ten / 2.0,
  22cf81:	c5 fb 10 8d 88 fe ff 	vmovsd xmm1,QWORD PTR [rbp-0x178]
  22cf88:	ff 
  22cf89:	c5 f3 5e c0          	vdivsd xmm0,xmm1,xmm0
  22cf8d:	c5 fb 10 95 90 fe ff 	vmovsd xmm2,QWORD PTR [rbp-0x170]
  22cf94:	ff 
  22cf95:	c5 eb 58 c0          	vaddsd xmm0,xmm2,xmm0
    var high = HP{
  22cf99:	c5 fb 10 9d 98 fe ff 	vmovsd xmm3,QWORD PTR [rbp-0x168]
  22cfa0:	ff 
  22cfa1:	c5 fb 11 5d 90       	vmovsd QWORD PTR [rbp-0x70],xmm3
  22cfa6:	c5 fb 11 45 98       	vmovsd QWORD PTR [rbp-0x68],xmm0
  22cfab:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  22cfaf:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  22cfb6:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  22cfba:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
        .val = mid.val,
  22cfc1:	c5 fb 10 85 38 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xc8]
  22cfc8:	ff 
        .off = mid.off + (fpprev(val) - val) * lten * ten / 2.0,
  22cfc9:	c5 fb 10 a5 40 ff ff 	vmovsd xmm4,QWORD PTR [rbp-0xc0]
  22cfd0:	ff 
  22cfd1:	c5 fb 10 ad 50 ff ff 	vmovsd xmm5,QWORD PTR [rbp-0xb0]
  22cfd8:	ff 
  22cfd9:	c5 fb 11 85 10 fe ff 	vmovsd QWORD PTR [rbp-0x1f0],xmm0
  22cfe0:	ff 
  22cfe1:	c5 f8 28 c5          	vmovaps xmm0,xmm5
  22cfe5:	c5 fb 11 a5 08 fe ff 	vmovsd QWORD PTR [rbp-0x1f8],xmm4
  22cfec:	ff 
  22cfed:	e8 ee 1f 00 00       	call   22efe0 <fpprev>
  22cff2:	31 c9                	xor    ecx,ecx
  22cff4:	88 ca                	mov    dl,cl
  22cff6:	c5 fb 5c 85 50 ff ff 	vsubsd xmm0,xmm0,QWORD PTR [rbp-0xb0]
  22cffd:	ff 
  22cffe:	c5 fb 59 85 30 ff ff 	vmulsd xmm0,xmm0,QWORD PTR [rbp-0xd0]
  22d005:	ff 
  22d006:	c5 fb 59 85 28 ff ff 	vmulsd xmm0,xmm0,QWORD PTR [rbp-0xd8]
  22d00d:	ff 
  22d00e:	f6 c2 01             	test   dl,0x1
  22d011:	c5 fb 11 85 00 fe ff 	vmovsd QWORD PTR [rbp-0x200],xmm0
  22d018:	ff 
  22d019:	75 77                	jne    22d092 <errol3u+0xa62>
  22d01b:	eb 10                	jmp    22d02d <errol3u+0x9fd>
  22d01d:	48 8d 3d 1c 62 01 00 	lea    rdi,[rip+0x1621c]        # 243240 <__unnamed_7>
  22d024:	31 c0                	xor    eax,eax
  22d026:	89 c6                	mov    esi,eax
        .off = mid.off + (fpnext(val) - val) * lten * ten / 2.0,
  22d028:	e8 d3 e5 fd ff       	call   20b600 <panic>
  22d02d:	48 8d bd 18 ff ff ff 	lea    rdi,[rbp-0xe8]
  22d034:	c5 fb 10 05 a4 3b fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd3ba4]        # 200be0 <__unnamed_185+0x10>
  22d03b:	ff 
        .off = mid.off + (fpprev(val) - val) * lten * ten / 2.0,
  22d03c:	c5 fb 10 8d 00 fe ff 	vmovsd xmm1,QWORD PTR [rbp-0x200]
  22d043:	ff 
  22d044:	c5 f3 5e c0          	vdivsd xmm0,xmm1,xmm0
  22d048:	c5 fb 10 95 08 fe ff 	vmovsd xmm2,QWORD PTR [rbp-0x1f8]
  22d04f:	ff 
  22d050:	c5 eb 58 c0          	vaddsd xmm0,xmm2,xmm0
    var low = HP{
  22d054:	c5 fb 10 9d 10 fe ff 	vmovsd xmm3,QWORD PTR [rbp-0x1f0]
  22d05b:	ff 
  22d05c:	c5 fb 11 5d 80       	vmovsd QWORD PTR [rbp-0x80],xmm3
  22d061:	c5 fb 11 45 88       	vmovsd QWORD PTR [rbp-0x78],xmm0
  22d066:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  22d06a:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
  22d071:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  22d075:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
    hpNormalize(&high);
  22d07c:	e8 7f 1f 00 00       	call   22f000 <hpNormalize>
  22d081:	48 8d bd 08 ff ff ff 	lea    rdi,[rbp-0xf8]
    hpNormalize(&low);
  22d088:	e8 73 1f 00 00       	call   22f000 <hpNormalize>
    while (high.val > 10.0 or (high.val == 10.0 and high.off >= 0.0)) {
  22d08d:	e9 7c f9 ff ff       	jmp    22ca0e <errol3u+0x3de>
  22d092:	48 8d 3d a7 61 01 00 	lea    rdi,[rip+0x161a7]        # 243240 <__unnamed_7>
  22d099:	31 c0                	xor    eax,eax
  22d09b:	89 c6                	mov    esi,eax
        .off = mid.off + (fpprev(val) - val) * lten * ten / 2.0,
  22d09d:	e8 5e e5 fd ff       	call   20b600 <panic>
  22d0a2:	48 8d 3d 1f 61 01 00 	lea    rdi,[rip+0x1611f]        # 2431c8 <__unnamed_4>
  22d0a9:	31 c0                	xor    eax,eax
  22d0ab:	89 c6                	mov    esi,eax
        exp += 1;
  22d0ad:	e8 4e e5 fd ff       	call   20b600 <panic>
  22d0b2:	48 8d bd 18 ff ff ff 	lea    rdi,[rbp-0xe8]
  22d0b9:	66 8b 85 84 fe ff ff 	mov    ax,WORD PTR [rbp-0x17c]
  22d0c0:	66 89 85 4a ff ff ff 	mov    WORD PTR [rbp-0xb6],ax
        hpDiv10(&high);
  22d0c7:	e8 f4 1c 00 00       	call   22edc0 <hpDiv10>
  22d0cc:	48 8d bd 08 ff ff ff 	lea    rdi,[rbp-0xf8]
        hpDiv10(&low);
  22d0d3:	e8 e8 1c 00 00       	call   22edc0 <hpDiv10>
    while (high.val > 10.0 or (high.val == 10.0 and high.off >= 0.0)) {
  22d0d8:	e9 31 f9 ff ff       	jmp    22ca0e <errol3u+0x3de>
  22d0dd:	48 8d 3d e4 60 01 00 	lea    rdi,[rip+0x160e4]        # 2431c8 <__unnamed_4>
  22d0e4:	31 c0                	xor    eax,eax
  22d0e6:	89 c6                	mov    esi,eax
        exp -= 1;
  22d0e8:	e8 13 e5 fd ff       	call   20b600 <panic>
  22d0ed:	48 8d bd 18 ff ff ff 	lea    rdi,[rbp-0xe8]
  22d0f4:	66 8b 85 80 fe ff ff 	mov    ax,WORD PTR [rbp-0x180]
  22d0fb:	66 89 85 4a ff ff ff 	mov    WORD PTR [rbp-0xb6],ax
        hpMul10(&high);
  22d102:	e8 19 1e 00 00       	call   22ef20 <hpMul10>
  22d107:	48 8d bd 08 ff ff ff 	lea    rdi,[rbp-0xf8]
        hpMul10(&low);
  22d10e:	e8 0d 1e 00 00       	call   22ef20 <hpMul10>
    while (high.val < 1.0 or (high.val == 1.0 and high.off < 0.0)) {
  22d113:	e9 94 f9 ff ff       	jmp    22caac <errol3u+0x47c>
        var hdig = @floatToInt(u8, math.floor(high.val));
  22d118:	8a 85 6f fe ff ff    	mov    al,BYTE PTR [rbp-0x191]
  22d11e:	88 85 ff fe ff ff    	mov    BYTE PTR [rbp-0x101],al
        if ((high.val == @intToFloat(f64, hdig)) and (high.off < 0)) hdig -= 1;
  22d124:	c5 fb 10 85 18 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xe8]
  22d12b:	ff 
  22d12c:	0f b6 8d ff fe ff ff 	movzx  ecx,BYTE PTR [rbp-0x101]
  22d133:	c5 f3 2a c9          	vcvtsi2sd xmm1,xmm1,ecx
  22d137:	c5 f9 2e c1          	vucomisd xmm0,xmm1
  22d13b:	0f 94 c2             	sete   dl
  22d13e:	40 0f 9b c6          	setnp  sil
  22d142:	40 20 f2             	and    dl,sil
  22d145:	f6 c2 01             	test   dl,0x1
  22d148:	88 95 6e fe ff ff    	mov    BYTE PTR [rbp-0x192],dl
  22d14e:	0f 85 75 fa ff ff    	jne    22cbc9 <errol3u+0x599>
  22d154:	e9 85 fa ff ff       	jmp    22cbde <errol3u+0x5ae>
  22d159:	48 8d 3d 80 69 01 00 	lea    rdi,[rip+0x16980]        # 243ae0 <__unnamed_227>
  22d160:	31 c0                	xor    eax,eax
  22d162:	89 c6                	mov    esi,eax
        var hdig = @floatToInt(u8, math.floor(high.val));
  22d164:	e8 97 e4 fd ff       	call   20b600 <panic>
  22d169:	48 8d 3d 58 60 01 00 	lea    rdi,[rip+0x16058]        # 2431c8 <__unnamed_4>
  22d170:	31 c0                	xor    eax,eax
  22d172:	89 c6                	mov    esi,eax
        if ((high.val == @intToFloat(f64, hdig)) and (high.off < 0)) hdig -= 1;
  22d174:	e8 87 e4 fd ff       	call   20b600 <panic>
  22d179:	8a 85 6d fe ff ff    	mov    al,BYTE PTR [rbp-0x193]
  22d17f:	88 85 ff fe ff ff    	mov    BYTE PTR [rbp-0x101],al
  22d185:	e9 81 fa ff ff       	jmp    22cc0b <errol3u+0x5db>
        var ldig = @floatToInt(u8, math.floor(low.val));
  22d18a:	8a 85 57 fe ff ff    	mov    al,BYTE PTR [rbp-0x1a9]
  22d190:	88 85 fe fe ff ff    	mov    BYTE PTR [rbp-0x102],al
        if ((low.val == @intToFloat(f64, ldig)) and (low.off < 0)) ldig -= 1;
  22d196:	c5 fb 10 85 08 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xf8]
  22d19d:	ff 
  22d19e:	0f b6 8d fe fe ff ff 	movzx  ecx,BYTE PTR [rbp-0x102]
  22d1a5:	c5 f3 2a c9          	vcvtsi2sd xmm1,xmm1,ecx
  22d1a9:	c5 f9 2e c1          	vucomisd xmm0,xmm1
  22d1ad:	0f 94 c2             	sete   dl
  22d1b0:	40 0f 9b c6          	setnp  sil
  22d1b4:	40 20 f2             	and    dl,sil
  22d1b7:	f6 c2 01             	test   dl,0x1
  22d1ba:	88 95 56 fe ff ff    	mov    BYTE PTR [rbp-0x1aa],dl
  22d1c0:	0f 85 c1 fa ff ff    	jne    22cc87 <errol3u+0x657>
  22d1c6:	e9 d1 fa ff ff       	jmp    22cc9c <errol3u+0x66c>
  22d1cb:	48 8d 3d 0e 69 01 00 	lea    rdi,[rip+0x1690e]        # 243ae0 <__unnamed_227>
  22d1d2:	31 c0                	xor    eax,eax
  22d1d4:	89 c6                	mov    esi,eax
        var ldig = @floatToInt(u8, math.floor(low.val));
  22d1d6:	e8 25 e4 fd ff       	call   20b600 <panic>
  22d1db:	48 8d 3d e6 5f 01 00 	lea    rdi,[rip+0x15fe6]        # 2431c8 <__unnamed_4>
  22d1e2:	31 c0                	xor    eax,eax
  22d1e4:	89 c6                	mov    esi,eax
        if ((low.val == @intToFloat(f64, ldig)) and (low.off < 0)) ldig -= 1;
  22d1e6:	e8 15 e4 fd ff       	call   20b600 <panic>
  22d1eb:	8a 85 55 fe ff ff    	mov    al,BYTE PTR [rbp-0x1ab]
  22d1f1:	88 85 fe fe ff ff    	mov    BYTE PTR [rbp-0x102],al
  22d1f7:	e9 cd fa ff ff       	jmp    22ccc9 <errol3u+0x699>
  22d1fc:	48 8d 3d d5 61 01 00 	lea    rdi,[rip+0x161d5]        # 2433d8 <__unnamed_20>
  22d203:	31 c0                	xor    eax,eax
  22d205:	89 c6                	mov    esi,eax
        buffer[buf_index] = hdig + '0';
  22d207:	e8 f4 e3 fd ff       	call   20b600 <panic>
  22d20c:	48 8b 85 48 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b8]
  22d213:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
  22d21a:	48 03 01             	add    rax,QWORD PTR [rcx]
  22d21d:	8a 95 ff fe ff ff    	mov    dl,BYTE PTR [rbp-0x101]
  22d223:	80 c2 30             	add    dl,0x30
  22d226:	40 0f 92 c6          	setb   sil
  22d22a:	40 f6 c6 01          	test   sil,0x1
  22d22e:	48 89 85 f8 fd ff ff 	mov    QWORD PTR [rbp-0x208],rax
  22d235:	88 95 f7 fd ff ff    	mov    BYTE PTR [rbp-0x209],dl
  22d23b:	75 02                	jne    22d23f <errol3u+0xc0f>
  22d23d:	eb 10                	jmp    22d24f <errol3u+0xc1f>
  22d23f:	48 8d 3d 82 5f 01 00 	lea    rdi,[rip+0x15f82]        # 2431c8 <__unnamed_4>
  22d246:	31 c0                	xor    eax,eax
  22d248:	89 c6                	mov    esi,eax
  22d24a:	e8 b1 e3 fd ff       	call   20b600 <panic>
  22d24f:	48 8b 85 f8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x208]
  22d256:	8a 8d f7 fd ff ff    	mov    cl,BYTE PTR [rbp-0x209]
  22d25c:	88 08                	mov    BYTE PTR [rax],cl
        buf_index += 1;
  22d25e:	48 8b 95 00 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x100]
  22d265:	48 83 c2 01          	add    rdx,0x1
  22d269:	40 0f 92 c6          	setb   sil
  22d26d:	48 89 95 e8 fd ff ff 	mov    QWORD PTR [rbp-0x218],rdx
  22d274:	40 88 b5 e7 fd ff ff 	mov    BYTE PTR [rbp-0x219],sil
  22d27b:	72 02                	jb     22d27f <errol3u+0xc4f>
  22d27d:	eb 10                	jmp    22d28f <errol3u+0xc5f>
  22d27f:	48 8d 3d 42 5f 01 00 	lea    rdi,[rip+0x15f42]        # 2431c8 <__unnamed_4>
  22d286:	31 c0                	xor    eax,eax
  22d288:	89 c6                	mov    esi,eax
  22d28a:	e8 71 e3 fd ff       	call   20b600 <panic>
  22d28f:	48 8d bd 18 ff ff ff 	lea    rdi,[rbp-0xe8]
  22d296:	48 8b 85 e8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x218]
  22d29d:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
        high.val -= @intToFloat(f64, hdig);
  22d2a4:	c5 fb 10 85 18 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xe8]
  22d2ab:	ff 
  22d2ac:	0f b6 8d ff fe ff ff 	movzx  ecx,BYTE PTR [rbp-0x101]
  22d2b3:	c5 f3 2a c9          	vcvtsi2sd xmm1,xmm1,ecx
  22d2b7:	c5 fb 5c c1          	vsubsd xmm0,xmm0,xmm1
  22d2bb:	c5 fb 11 85 18 ff ff 	vmovsd QWORD PTR [rbp-0xe8],xmm0
  22d2c2:	ff 
        low.val -= @intToFloat(f64, ldig);
  22d2c3:	c5 fb 10 85 08 ff ff 	vmovsd xmm0,QWORD PTR [rbp-0xf8]
  22d2ca:	ff 
  22d2cb:	0f b6 8d fe fe ff ff 	movzx  ecx,BYTE PTR [rbp-0x102]
  22d2d2:	c5 f3 2a c9          	vcvtsi2sd xmm1,xmm1,ecx
  22d2d6:	c5 fb 5c c1          	vsubsd xmm0,xmm0,xmm1
  22d2da:	c5 fb 11 85 08 ff ff 	vmovsd QWORD PTR [rbp-0xf8],xmm0
  22d2e1:	ff 
        hpMul10(&high);
  22d2e2:	e8 39 1c 00 00       	call   22ef20 <hpMul10>
  22d2e7:	48 8d bd 08 ff ff ff 	lea    rdi,[rbp-0xf8]
        hpMul10(&low);
  22d2ee:	e8 2d 1c 00 00       	call   22ef20 <hpMul10>
    while (true) {
  22d2f3:	e9 53 f8 ff ff       	jmp    22cb4b <errol3u+0x51b>
  22d2f8:	c5 fb 10 05 10 39 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd3910]        # 200c10 <__unnamed_186+0x10>
  22d2ff:	ff 
  22d300:	c5 fb 10 0d f0 38 fd 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffd38f0]        # 200bf8 <__unnamed_187+0x8>
  22d307:	ff 
    const tmp = (high.val + low.val) / 2.0;
  22d308:	c5 fb 10 15 d0 38 fd 	vmovsd xmm2,QWORD PTR [rip+0xfffffffffffd38d0]        # 200be0 <__unnamed_185+0x10>
  22d30f:	ff 
  22d310:	c5 fb 10 9d 40 fe ff 	vmovsd xmm3,QWORD PTR [rbp-0x1c0]
  22d317:	ff 
  22d318:	c5 e3 5e d2          	vdivsd xmm2,xmm3,xmm2
  22d31c:	c5 fb 11 95 f0 fe ff 	vmovsd QWORD PTR [rbp-0x110],xmm2
  22d323:	ff 
    var mdig = @floatToInt(u8, math.floor(tmp + 0.5));
  22d324:	c5 fb 10 95 f0 fe ff 	vmovsd xmm2,QWORD PTR [rbp-0x110]
  22d32b:	ff 
  22d32c:	c5 fb 10 25 ec 38 fd 	vmovsd xmm4,QWORD PTR [rip+0xfffffffffffd38ec]        # 200c20 <__unnamed_186+0x20>
  22d333:	ff 
  22d334:	c5 eb 58 d4          	vaddsd xmm2,xmm2,xmm4
  22d338:	c5 fb 11 85 d8 fd ff 	vmovsd QWORD PTR [rbp-0x228],xmm0
  22d33f:	ff 
  22d340:	c5 f8 28 c2          	vmovaps xmm0,xmm2
  22d344:	c5 fb 11 8d d0 fd ff 	vmovsd QWORD PTR [rbp-0x230],xmm1
  22d34b:	ff 
  22d34c:	e8 bf 18 00 00       	call   22ec10 <floor.0>
  22d351:	c5 f8 28 c8          	vmovaps xmm1,xmm0
  22d355:	c5 fb 2c c0          	vcvttsd2si eax,xmm0
  22d359:	88 c1                	mov    cl,al
  22d35b:	0f b6 c1             	movzx  eax,cl
  22d35e:	c5 fb 2a c0          	vcvtsi2sd xmm0,xmm0,eax
  22d362:	c5 f3 5c c0          	vsubsd xmm0,xmm1,xmm0
  22d366:	c5 fb 10 8d d0 fd ff 	vmovsd xmm1,QWORD PTR [rbp-0x230]
  22d36d:	ff 
  22d36e:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22d372:	0f 97 c2             	seta   dl
  22d375:	c5 fb 10 95 d8 fd ff 	vmovsd xmm2,QWORD PTR [rbp-0x228]
  22d37c:	ff 
  22d37d:	c5 f9 2e c2          	vucomisd xmm0,xmm2
  22d381:	40 0f 97 c6          	seta   sil
  22d385:	40 20 f2             	and    dl,sil
  22d388:	f6 c2 01             	test   dl,0x1
  22d38b:	88 8d cf fd ff ff    	mov    BYTE PTR [rbp-0x231],cl
  22d391:	75 12                	jne    22d3a5 <errol3u+0xd75>
  22d393:	eb 59                	jmp    22d3ee <errol3u+0xdbe>
  22d395:	48 8d 3d a4 5e 01 00 	lea    rdi,[rip+0x15ea4]        # 243240 <__unnamed_7>
  22d39c:	31 c0                	xor    eax,eax
  22d39e:	89 c6                	mov    esi,eax
    const tmp = (high.val + low.val) / 2.0;
  22d3a0:	e8 5b e2 fd ff       	call   20b600 <panic>
  22d3a5:	c5 fb 10 05 73 38 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd3873]        # 200c20 <__unnamed_186+0x20>
  22d3ac:	ff 
    var mdig = @floatToInt(u8, math.floor(tmp + 0.5));
  22d3ad:	8a 85 cf fd ff ff    	mov    al,BYTE PTR [rbp-0x231]
  22d3b3:	88 85 ef fe ff ff    	mov    BYTE PTR [rbp-0x111],al
    if ((@intToFloat(f64, mdig) - tmp) == 0.5 and (mdig & 0x1) != 0) mdig -= 1;
  22d3b9:	0f b6 8d ef fe ff ff 	movzx  ecx,BYTE PTR [rbp-0x111]
  22d3c0:	c5 f3 2a c9          	vcvtsi2sd xmm1,xmm1,ecx
  22d3c4:	c5 f3 5c 8d f0 fe ff 	vsubsd xmm1,xmm1,QWORD PTR [rbp-0x110]
  22d3cb:	ff 
  22d3cc:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22d3d0:	0f 94 c2             	sete   dl
  22d3d3:	40 0f 9b c6          	setnp  sil
  22d3d7:	40 20 f2             	and    dl,sil
  22d3da:	f6 c2 01             	test   dl,0x1
  22d3dd:	88 95 3f fe ff ff    	mov    BYTE PTR [rbp-0x1c1],dl
  22d3e3:	0f 85 3e f9 ff ff    	jne    22cd27 <errol3u+0x6f7>
  22d3e9:	e9 4c f9 ff ff       	jmp    22cd3a <errol3u+0x70a>
  22d3ee:	48 8d 3d eb 66 01 00 	lea    rdi,[rip+0x166eb]        # 243ae0 <__unnamed_227>
  22d3f5:	31 c0                	xor    eax,eax
  22d3f7:	89 c6                	mov    esi,eax
    var mdig = @floatToInt(u8, math.floor(tmp + 0.5));
  22d3f9:	e8 02 e2 fd ff       	call   20b600 <panic>
  22d3fe:	48 8d 3d c3 5d 01 00 	lea    rdi,[rip+0x15dc3]        # 2431c8 <__unnamed_4>
  22d405:	31 c0                	xor    eax,eax
  22d407:	89 c6                	mov    esi,eax
    if ((@intToFloat(f64, mdig) - tmp) == 0.5 and (mdig & 0x1) != 0) mdig -= 1;
  22d409:	e8 f2 e1 fd ff       	call   20b600 <panic>
  22d40e:	8a 85 3e fe ff ff    	mov    al,BYTE PTR [rbp-0x1c2]
  22d414:	88 85 ef fe ff ff    	mov    BYTE PTR [rbp-0x111],al
  22d41a:	e9 48 f9 ff ff       	jmp    22cd67 <errol3u+0x737>
  22d41f:	48 8d 3d b2 5f 01 00 	lea    rdi,[rip+0x15fb2]        # 2433d8 <__unnamed_20>
  22d426:	31 c0                	xor    eax,eax
  22d428:	89 c6                	mov    esi,eax
    buffer[buf_index] = mdig + '0';
  22d42a:	e8 d1 e1 fd ff       	call   20b600 <panic>
  22d42f:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  22d436:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
  22d43d:	48 03 01             	add    rax,QWORD PTR [rcx]
  22d440:	8a 95 ef fe ff ff    	mov    dl,BYTE PTR [rbp-0x111]
  22d446:	80 c2 30             	add    dl,0x30
  22d449:	40 0f 92 c6          	setb   sil
  22d44d:	40 f6 c6 01          	test   sil,0x1
  22d451:	48 89 85 c0 fd ff ff 	mov    QWORD PTR [rbp-0x240],rax
  22d458:	88 95 bf fd ff ff    	mov    BYTE PTR [rbp-0x241],dl
  22d45e:	75 02                	jne    22d462 <errol3u+0xe32>
  22d460:	eb 10                	jmp    22d472 <errol3u+0xe42>
  22d462:	48 8d 3d 5f 5d 01 00 	lea    rdi,[rip+0x15d5f]        # 2431c8 <__unnamed_4>
  22d469:	31 c0                	xor    eax,eax
  22d46b:	89 c6                	mov    esi,eax
  22d46d:	e8 8e e1 fd ff       	call   20b600 <panic>
  22d472:	48 8b 85 c0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x240]
  22d479:	8a 8d bf fd ff ff    	mov    cl,BYTE PTR [rbp-0x241]
  22d47f:	88 08                	mov    BYTE PTR [rax],cl
    buf_index += 1;
  22d481:	48 8b 95 00 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x100]
  22d488:	48 83 c2 01          	add    rdx,0x1
  22d48c:	40 0f 92 c6          	setb   sil
  22d490:	48 89 95 b0 fd ff ff 	mov    QWORD PTR [rbp-0x250],rdx
  22d497:	40 88 b5 af fd ff ff 	mov    BYTE PTR [rbp-0x251],sil
  22d49e:	72 02                	jb     22d4a2 <errol3u+0xe72>
  22d4a0:	eb 10                	jmp    22d4b2 <errol3u+0xe82>
  22d4a2:	48 8d 3d 1f 5d 01 00 	lea    rdi,[rip+0x15d1f]        # 2431c8 <__unnamed_4>
  22d4a9:	31 c0                	xor    eax,eax
  22d4ab:	89 c6                	mov    esi,eax
  22d4ad:	e8 4e e1 fd ff       	call   20b600 <panic>
  22d4b2:	b8 01 00 00 00       	mov    eax,0x1
  22d4b7:	89 c1                	mov    ecx,eax
  22d4b9:	48 8b 95 b0 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x250]
  22d4c0:	48 89 95 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rdx
        .digits = buffer[1..buf_index],
  22d4c7:	48 8b b5 00 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x100]
  22d4ce:	48 8b bd d8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x128]
  22d4d5:	4c 8b 47 08          	mov    r8,QWORD PTR [rdi+0x8]
  22d4d9:	48 39 f1             	cmp    rcx,rsi
  22d4dc:	4c 89 85 a0 fd ff ff 	mov    QWORD PTR [rbp-0x260],r8
  22d4e3:	48 89 b5 98 fd ff ff 	mov    QWORD PTR [rbp-0x268],rsi
  22d4ea:	76 10                	jbe    22d4fc <errol3u+0xecc>
  22d4ec:	48 8d 3d e5 5e 01 00 	lea    rdi,[rip+0x15ee5]        # 2433d8 <__unnamed_20>
  22d4f3:	31 c0                	xor    eax,eax
  22d4f5:	89 c6                	mov    esi,eax
  22d4f7:	e8 04 e1 fd ff       	call   20b600 <panic>
  22d4fc:	48 8b 85 98 fd ff ff 	mov    rax,QWORD PTR [rbp-0x268]
  22d503:	48 8b 8d a0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x260]
  22d50a:	48 39 c8             	cmp    rax,rcx
  22d50d:	76 10                	jbe    22d51f <errol3u+0xeef>
  22d50f:	48 8d 3d c2 5e 01 00 	lea    rdi,[rip+0x15ec2]        # 2433d8 <__unnamed_20>
  22d516:	31 c0                	xor    eax,eax
  22d518:	89 c6                	mov    esi,eax
  22d51a:	e8 e1 e0 fd ff       	call   20b600 <panic>
  22d51f:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  22d526:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22d529:	48 83 c1 01          	add    rcx,0x1
  22d52d:	48 89 8d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rcx
  22d534:	48 8b 8d 98 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x268]
  22d53b:	48 83 e9 01          	sub    rcx,0x1
  22d53f:	48 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rcx
        .exp = exp,
  22d546:	0f bf 95 4a ff ff ff 	movsx  edx,WORD PTR [rbp-0xb6]
    return FloatDecimal{
  22d54d:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
  22d554:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
  22d55b:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  22d562:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
  22d569:	89 95 68 ff ff ff    	mov    DWORD PTR [rbp-0x98],edx
  22d56f:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  22d576:	48 8b b5 d0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x130]
  22d57d:	48 89 0e             	mov    QWORD PTR [rsi],rcx
  22d580:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  22d587:	48 89 4e 08          	mov    QWORD PTR [rsi+0x8],rcx
  22d58b:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  22d592:	48 89 4e 10          	mov    QWORD PTR [rsi+0x10],rcx
  22d596:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
  22d59d:	48 81 c4 70 02 00 00 	add    rsp,0x270
  22d5a4:	5d                   	pop    rbp
  22d5a5:	c3                   	ret    
  22d5a6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  22d5ad:	00 00 00 

000000000022d5b0 <slab>:
const Slab = struct {
    str: []const u8,
    exp: i32,
};

fn slab(str: []const u8, exp: i32) Slab {
  22d5b0:	55                   	push   rbp
  22d5b1:	48 89 e5             	mov    rbp,rsp
  22d5b4:	48 89 f8             	mov    rax,rdi
  22d5b7:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
    return Slab{
        .str = str,
        .exp = exp,
  22d5ba:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    return Slab{
  22d5bd:	48 8b 0e             	mov    rcx,QWORD PTR [rsi]
  22d5c0:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  22d5c4:	48 8b 4e 08          	mov    rcx,QWORD PTR [rsi+0x8]
  22d5c8:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  22d5cc:	89 55 f8             	mov    DWORD PTR [rbp-0x8],edx
  22d5cf:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22d5d3:	48 89 0f             	mov    QWORD PTR [rdi],rcx
  22d5d6:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  22d5da:	48 89 4f 08          	mov    QWORD PTR [rdi+0x8],rcx
  22d5de:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  22d5e2:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
  22d5e6:	5d                   	pop    rbp
  22d5e7:	c3                   	ret    
  22d5e8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  22d5ef:	00 

000000000022d5f0 <errolInt>:

/// Integer conversion algorithm, guaranteed correct, optimal, and best.
///  @val: The val.
///  @buf: The output buffer.
///  &return: The exponent.
fn errolInt(val: f64, buffer: []u8) FloatDecimal {
  22d5f0:	55                   	push   rbp
  22d5f1:	48 89 e5             	mov    rbp,rsp
  22d5f4:	48 81 ec 20 03 00 00 	sub    rsp,0x320
  22d5fb:	48 89 f8             	mov    rax,rdi
  22d5fe:	c5 fb 10 0d 9a 36 fd 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffd369a]        # 200ca0 <__unnamed_190+0x8>
  22d605:	ff 
  22d606:	c5 fb 11 45 d0       	vmovsd QWORD PTR [rbp-0x30],xmm0
    const pow19 = u128(1e19);
  22d60b:	48 b9 00 00 e8 89 04 	movabs rcx,0x8ac7230489e80000
  22d612:	23 c7 8a 
  22d615:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
  22d619:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
  22d620:	00 

    assert((val > 9.007199254740992e15) and val < (3.40282366920938e38));
  22d621:	c5 fb 10 45 d0       	vmovsd xmm0,QWORD PTR [rbp-0x30]
  22d626:	c5 f9 2e c1          	vucomisd xmm0,xmm1
  22d62a:	0f 97 c2             	seta   dl
  22d62d:	f6 c2 01             	test   dl,0x1
  22d630:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  22d637:	48 89 b5 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rsi
  22d63e:	48 89 bd 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rdi
  22d645:	88 95 2f ff ff ff    	mov    BYTE PTR [rbp-0xd1],dl
  22d64b:	75 02                	jne    22d64f <errolInt+0x5f>
  22d64d:	eb 16                	jmp    22d665 <errolInt+0x75>
  22d64f:	c5 fb 10 05 f1 35 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd35f1]        # 200c48 <app_mask+0x8>
  22d656:	ff 
  22d657:	c5 f9 2e 45 d0       	vucomisd xmm0,QWORD PTR [rbp-0x30]
  22d65c:	0f 97 c0             	seta   al
  22d65f:	88 85 2f ff ff ff    	mov    BYTE PTR [rbp-0xd1],al
  22d665:	8a 85 2f ff ff ff    	mov    al,BYTE PTR [rbp-0xd1]
  22d66b:	c5 fb 10 05 9d 35 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd359d]        # 200c10 <__unnamed_186+0x10>
  22d672:	ff 
  22d673:	c5 fb 10 0d 7d 35 fd 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffd357d]        # 200bf8 <__unnamed_187+0x8>
  22d67a:	ff 
  22d67b:	0f b6 f8             	movzx  edi,al
  22d67e:	c5 fb 11 8d 20 ff ff 	vmovsd QWORD PTR [rbp-0xe0],xmm1
  22d685:	ff 
  22d686:	c5 fb 11 85 18 ff ff 	vmovsd QWORD PTR [rbp-0xe8],xmm0
  22d68d:	ff 
  22d68e:	e8 6d d9 fd ff       	call   20b000 <assert>

    var mid = @floatToInt(u128, val);
  22d693:	c5 fb 10 45 d0       	vmovsd xmm0,QWORD PTR [rbp-0x30]
  22d698:	c5 fb 11 85 10 ff ff 	vmovsd QWORD PTR [rbp-0xf0],xmm0
  22d69f:	ff 
  22d6a0:	e8 3b c7 00 00       	call   239de0 <__fixunsdfti>
  22d6a5:	48 89 d1             	mov    rcx,rdx
  22d6a8:	48 89 c6             	mov    rsi,rax
  22d6ab:	48 89 c7             	mov    rdi,rax
  22d6ae:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
  22d6b5:	48 89 d6             	mov    rsi,rdx
  22d6b8:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  22d6bf:	e8 3c a9 00 00       	call   238000 <__floatuntidf>
  22d6c4:	c5 fb 10 8d 10 ff ff 	vmovsd xmm1,QWORD PTR [rbp-0xf0]
  22d6cb:	ff 
  22d6cc:	c5 f3 5c c0          	vsubsd xmm0,xmm1,xmm0
  22d6d0:	c5 fb 10 95 20 ff ff 	vmovsd xmm2,QWORD PTR [rbp-0xe0]
  22d6d7:	ff 
  22d6d8:	c5 f9 2e d0          	vucomisd xmm2,xmm0
  22d6dc:	41 0f 97 c0          	seta   r8b
  22d6e0:	c5 fb 10 9d 18 ff ff 	vmovsd xmm3,QWORD PTR [rbp-0xe8]
  22d6e7:	ff 
  22d6e8:	c5 f9 2e c3          	vucomisd xmm0,xmm3
  22d6ec:	41 0f 97 c1          	seta   r9b
  22d6f0:	45 20 c8             	and    r8b,r9b
  22d6f3:	41 f6 c0 01          	test   r8b,0x1
  22d6f7:	0f 85 66 02 00 00    	jne    22d963 <errolInt+0x373>
  22d6fd:	e9 b1 02 00 00       	jmp    22d9b3 <errolInt+0x3c3>
    var low: u128 = mid - fpeint((fpnext(val) - val) / 2.0);
    var high: u128 = mid + fpeint((val - fpprev(val)) / 2.0);

    if (@bitCast(u64, val) & 0x1 != 0) {
        high -= 1;
  22d702:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  22d706:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  22d70a:	48 83 e8 01          	sub    rax,0x1
  22d70e:	48 83 d9 00          	sbb    rcx,0x0
  22d712:	0f 92 c2             	setb   dl
  22d715:	48 89 c6             	mov    rsi,rax
  22d718:	f6 c2 01             	test   dl,0x1
  22d71b:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  22d722:	48 89 b5 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rsi
  22d729:	48 89 8d e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rcx
  22d730:	0f 85 08 04 00 00    	jne    22db3e <errolInt+0x54e>
  22d736:	e9 13 04 00 00       	jmp    22db4e <errolInt+0x55e>
    } else {
        low -= 1;
  22d73b:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22d73f:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  22d743:	48 83 e8 01          	sub    rax,0x1
  22d747:	48 83 d9 00          	sbb    rcx,0x0
  22d74b:	0f 92 c2             	setb   dl
  22d74e:	48 89 c6             	mov    rsi,rax
  22d751:	f6 c2 01             	test   dl,0x1
  22d754:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
  22d75b:	48 89 b5 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rsi
  22d762:	48 89 8d d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rcx
  22d769:	0f 85 fa 03 00 00    	jne    22db69 <errolInt+0x579>
  22d76f:	e9 05 04 00 00       	jmp    22db79 <errolInt+0x589>
  22d774:	31 c0                	xor    eax,eax
  22d776:	88 c1                	mov    cl,al
    }

    var l64 = @intCast(u64, low % pow19);
  22d778:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  22d77c:	48 8b 75 a8          	mov    rsi,QWORD PTR [rbp-0x58]
  22d780:	f6 c1 01             	test   cl,0x1
  22d783:	48 89 b5 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rsi
  22d78a:	48 89 bd c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rdi
  22d791:	0f 85 3f 04 00 00    	jne    22dbd6 <errolInt+0x5e6>
  22d797:	e9 f8 03 00 00       	jmp    22db94 <errolInt+0x5a4>
  22d79c:	31 c0                	xor    eax,eax
  22d79e:	88 c1                	mov    cl,al

    var h64 = @intCast(u64, high % pow19);
    const hf = @intCast(u64, (high / pow19) % pow19);

    if (lf != hf) {
        l64 = lf;
  22d7a0:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
  22d7a4:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
        h64 = hf;
  22d7a8:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  22d7af:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
        mid = mid / (pow19 / 10);
  22d7b6:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  22d7ba:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  22d7be:	f6 c1 01             	test   cl,0x1
  22d7c1:	48 89 b5 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rsi
  22d7c8:	48 89 bd b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rdi
  22d7cf:	0f 85 1a 07 00 00    	jne    22deef <errolInt+0x8ff>
  22d7d5:	e9 e7 06 00 00       	jmp    22dec1 <errolInt+0x8d1>
    if (lf != hf) {
  22d7da:	eb 00                	jmp    22d7dc <errolInt+0x1ec>
    }

    var mi: i32 = mismatch10(l64, h64);
  22d7dc:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
  22d7e0:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
  22d7e7:	e8 e4 18 00 00       	call   22f0d0 <mismatch10>
  22d7ec:	89 85 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],eax
    var x: u64 = 1;
  22d7f2:	48 c7 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],0x1
  22d7f9:	01 00 00 00 
    {
        var i: i32 = @boolToInt(lf == hf);
  22d7fd:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
  22d801:	48 3b b5 70 ff ff ff 	cmp    rsi,QWORD PTR [rbp-0x90]
  22d808:	0f 94 c1             	sete   cl
  22d80b:	80 e1 01             	and    cl,0x1
  22d80e:	0f b6 c1             	movzx  eax,cl
  22d811:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
        while (i < mi) : (i += 1) {
  22d817:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
  22d81d:	3b 85 6c ff ff ff    	cmp    eax,DWORD PTR [rbp-0x94]
  22d823:	7d 2e                	jge    22d853 <errolInt+0x263>
  22d825:	b8 0a 00 00 00       	mov    eax,0xa
  22d82a:	89 c1                	mov    ecx,eax
            x *= 10;
  22d82c:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  22d833:	48 f7 e1             	mul    rcx
  22d836:	40 0f 90 c6          	seto   sil
  22d83a:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
  22d841:	40 88 b5 a7 fe ff ff 	mov    BYTE PTR [rbp-0x159],sil
  22d848:	0f 80 b1 06 00 00    	jo     22deff <errolInt+0x90f>
  22d84e:	e9 bc 06 00 00       	jmp    22df0f <errolInt+0x91f>
        }
    }
    const m64 = @truncate(u64, @divTrunc(mid, x));
  22d853:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  22d857:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  22d85b:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  22d862:	31 c9                	xor    ecx,ecx
  22d864:	48 85 c0             	test   rax,rax
  22d867:	48 89 bd 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rdi
  22d86e:	48 89 b5 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rsi
  22d875:	48 89 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rax
  22d87c:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
  22d883:	0f 84 0e 07 00 00    	je     22df97 <errolInt+0x9a7>
  22d889:	e9 cb 06 00 00       	jmp    22df59 <errolInt+0x969>

    if (lf != hf) mi += 19;
  22d88e:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
  22d894:	83 c0 13             	add    eax,0x13
  22d897:	0f 90 c1             	seto   cl
  22d89a:	89 85 7c fe ff ff    	mov    DWORD PTR [rbp-0x184],eax
  22d8a0:	88 8d 7b fe ff ff    	mov    BYTE PTR [rbp-0x185],cl
  22d8a6:	0f 80 fb 06 00 00    	jo     22dfa7 <errolInt+0x9b7>
  22d8ac:	e9 06 07 00 00       	jmp    22dfb7 <errolInt+0x9c7>
  22d8b1:	eb 00                	jmp    22d8b3 <errolInt+0x2c3>

    var buf_index = u64toa(m64, buffer) - 1;
  22d8b3:	48 8b bd 50 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb0]
  22d8ba:	48 8b b5 38 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc8]
  22d8c1:	e8 ca 19 00 00       	call   22f290 <u64toa>
  22d8c6:	48 83 e8 01          	sub    rax,0x1
  22d8ca:	0f 92 c1             	setb   cl
  22d8cd:	48 89 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rax
  22d8d4:	88 8d 6f fe ff ff    	mov    BYTE PTR [rbp-0x191],cl
  22d8da:	0f 82 e8 06 00 00    	jb     22dfc8 <errolInt+0x9d8>
  22d8e0:	e9 f3 06 00 00       	jmp    22dfd8 <errolInt+0x9e8>

    if (mi != 0) {
        buffer[buf_index - 1] += @boolToInt(buffer[buf_index] >= '5');
  22d8e5:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  22d8ec:	48 83 e8 01          	sub    rax,0x1
  22d8f0:	0f 92 c1             	setb   cl
  22d8f3:	48 89 85 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rax
  22d8fa:	88 8d 5f fe ff ff    	mov    BYTE PTR [rbp-0x1a1],cl
  22d900:	0f 82 f2 06 00 00    	jb     22dff8 <errolInt+0xa08>
  22d906:	e9 fd 06 00 00       	jmp    22e008 <errolInt+0xa18>
    } else {
        buf_index += 1;
  22d90b:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  22d912:	48 83 c0 01          	add    rax,0x1
  22d916:	0f 92 c1             	setb   cl
  22d919:	48 89 85 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rax
  22d920:	88 8d 4f fe ff ff    	mov    BYTE PTR [rbp-0x1b1],cl
  22d926:	0f 82 ab 07 00 00    	jb     22e0d7 <errolInt+0xae7>
  22d92c:	e9 b6 07 00 00       	jmp    22e0e7 <errolInt+0xaf7>
  22d931:	31 c0                	xor    eax,eax
  22d933:	89 c1                	mov    ecx,eax
    }

    return FloatDecimal{
        .digits = buffer[0..buf_index],
  22d935:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
  22d93c:	48 8b b5 38 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc8]
  22d943:	48 8b 7e 08          	mov    rdi,QWORD PTR [rsi+0x8]
  22d947:	48 39 d1             	cmp    rcx,rdx
  22d94a:	48 89 bd 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rdi
  22d951:	48 89 95 38 fe ff ff 	mov    QWORD PTR [rbp-0x1c8],rdx
  22d958:	0f 86 ac 07 00 00    	jbe    22e10a <errolInt+0xb1a>
  22d95e:	e9 97 07 00 00       	jmp    22e0fa <errolInt+0xb0a>
    var mid = @floatToInt(u128, val);
  22d963:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  22d96a:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  22d96e:	48 8b 8d 00 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x100]
  22d975:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
    var low: u128 = mid - fpeint((fpnext(val) - val) / 2.0);
  22d979:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  22d97d:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  22d981:	c5 fb 10 45 d0       	vmovsd xmm0,QWORD PTR [rbp-0x30]
  22d986:	48 89 95 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rdx
  22d98d:	48 89 b5 28 fe ff ff 	mov    QWORD PTR [rbp-0x1d8],rsi
  22d994:	e8 27 16 00 00       	call   22efc0 <fpnext>
  22d999:	31 ff                	xor    edi,edi
  22d99b:	41 88 f8             	mov    r8b,dil
  22d99e:	c5 fb 5c 45 d0       	vsubsd xmm0,xmm0,QWORD PTR [rbp-0x30]
  22d9a3:	41 f6 c0 01          	test   r8b,0x1
  22d9a7:	c5 fb 11 85 20 fe ff 	vmovsd QWORD PTR [rbp-0x1e0],xmm0
  22d9ae:	ff 
  22d9af:	75 63                	jne    22da14 <errolInt+0x424>
  22d9b1:	eb 10                	jmp    22d9c3 <errolInt+0x3d3>
  22d9b3:	48 8d 3d 26 61 01 00 	lea    rdi,[rip+0x16126]        # 243ae0 <__unnamed_227>
  22d9ba:	31 c0                	xor    eax,eax
  22d9bc:	89 c6                	mov    esi,eax
    var mid = @floatToInt(u128, val);
  22d9be:	e8 3d dc fd ff       	call   20b600 <panic>
    var low: u128 = mid - fpeint((fpnext(val) - val) / 2.0);
  22d9c3:	c5 fb 10 05 15 32 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd3215]        # 200be0 <__unnamed_185+0x10>
  22d9ca:	ff 
  22d9cb:	c5 fb 10 8d 20 fe ff 	vmovsd xmm1,QWORD PTR [rbp-0x1e0]
  22d9d2:	ff 
  22d9d3:	c5 f3 5e c0          	vdivsd xmm0,xmm1,xmm0
  22d9d7:	e8 74 16 00 00       	call   22f050 <fpeint>
  22d9dc:	48 8b 8d 30 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d0]
  22d9e3:	48 29 c1             	sub    rcx,rax
  22d9e6:	48 8b 85 28 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d8]
  22d9ed:	48 19 d0             	sbb    rax,rdx
  22d9f0:	40 0f 92 c6          	setb   sil
  22d9f4:	48 89 ca             	mov    rdx,rcx
  22d9f7:	40 f6 c6 01          	test   sil,0x1
  22d9fb:	48 89 8d 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],rcx
  22da02:	48 89 95 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rdx
  22da09:	48 89 85 08 fe ff ff 	mov    QWORD PTR [rbp-0x1f8],rax
  22da10:	75 12                	jne    22da24 <errolInt+0x434>
  22da12:	eb 20                	jmp    22da34 <errolInt+0x444>
  22da14:	48 8d 3d 25 58 01 00 	lea    rdi,[rip+0x15825]        # 243240 <__unnamed_7>
  22da1b:	31 c0                	xor    eax,eax
  22da1d:	89 c6                	mov    esi,eax
  22da1f:	e8 dc db fd ff       	call   20b600 <panic>
  22da24:	48 8d 3d 9d 57 01 00 	lea    rdi,[rip+0x1579d]        # 2431c8 <__unnamed_4>
  22da2b:	31 c0                	xor    eax,eax
  22da2d:	89 c6                	mov    esi,eax
  22da2f:	e8 cc db fd ff       	call   20b600 <panic>
  22da34:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
  22da3b:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  22da3f:	48 8b 8d 08 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1f8]
  22da46:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
    var high: u128 = mid + fpeint((val - fpprev(val)) / 2.0);
  22da4a:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  22da4e:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  22da52:	c5 fb 10 45 d0       	vmovsd xmm0,QWORD PTR [rbp-0x30]
  22da57:	c5 fb 10 4d d0       	vmovsd xmm1,QWORD PTR [rbp-0x30]
  22da5c:	c5 fb 11 85 00 fe ff 	vmovsd QWORD PTR [rbp-0x200],xmm0
  22da63:	ff 
  22da64:	c5 f8 28 c1          	vmovaps xmm0,xmm1
  22da68:	48 89 95 f8 fd ff ff 	mov    QWORD PTR [rbp-0x208],rdx
  22da6f:	48 89 b5 f0 fd ff ff 	mov    QWORD PTR [rbp-0x210],rsi
  22da76:	e8 65 15 00 00       	call   22efe0 <fpprev>
  22da7b:	31 ff                	xor    edi,edi
  22da7d:	41 88 f8             	mov    r8b,dil
  22da80:	c5 fb 10 8d 00 fe ff 	vmovsd xmm1,QWORD PTR [rbp-0x200]
  22da87:	ff 
  22da88:	c5 f3 5c c0          	vsubsd xmm0,xmm1,xmm0
  22da8c:	41 f6 c0 01          	test   r8b,0x1
  22da90:	c5 fb 11 85 e8 fd ff 	vmovsd QWORD PTR [rbp-0x218],xmm0
  22da97:	ff 
  22da98:	75 51                	jne    22daeb <errolInt+0x4fb>
  22da9a:	c5 fb 10 05 3e 31 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd313e]        # 200be0 <__unnamed_185+0x10>
  22daa1:	ff 
  22daa2:	c5 fb 10 8d e8 fd ff 	vmovsd xmm1,QWORD PTR [rbp-0x218]
  22daa9:	ff 
  22daaa:	c5 f3 5e c0          	vdivsd xmm0,xmm1,xmm0
  22daae:	e8 9d 15 00 00       	call   22f050 <fpeint>
  22dab3:	48 8b 8d f8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x208]
  22daba:	48 01 c1             	add    rcx,rax
  22dabd:	48 8b 85 f0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x210]
  22dac4:	48 11 d0             	adc    rax,rdx
  22dac7:	40 0f 92 c6          	setb   sil
  22dacb:	48 89 ca             	mov    rdx,rcx
  22dace:	40 f6 c6 01          	test   sil,0x1
  22dad2:	48 89 8d e0 fd ff ff 	mov    QWORD PTR [rbp-0x220],rcx
  22dad9:	48 89 95 d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rdx
  22dae0:	48 89 85 d0 fd ff ff 	mov    QWORD PTR [rbp-0x230],rax
  22dae7:	75 12                	jne    22dafb <errolInt+0x50b>
  22dae9:	eb 20                	jmp    22db0b <errolInt+0x51b>
  22daeb:	48 8d 3d 4e 57 01 00 	lea    rdi,[rip+0x1574e]        # 243240 <__unnamed_7>
  22daf2:	31 c0                	xor    eax,eax
  22daf4:	89 c6                	mov    esi,eax
  22daf6:	e8 05 db fd ff       	call   20b600 <panic>
  22dafb:	48 8d 3d c6 56 01 00 	lea    rdi,[rip+0x156c6]        # 2431c8 <__unnamed_4>
  22db02:	31 c0                	xor    eax,eax
  22db04:	89 c6                	mov    esi,eax
  22db06:	e8 f5 da fd ff       	call   20b600 <panic>
  22db0b:	48 8b 85 e0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x220]
  22db12:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  22db16:	48 8b 8d d0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x230]
  22db1d:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
    if (@bitCast(u64, val) & 0x1 != 0) {
  22db21:	c5 fb 10 45 d0       	vmovsd xmm0,QWORD PTR [rbp-0x30]
  22db26:	c4 e1 f9 7e c2       	vmovq  rdx,xmm0
  22db2b:	48 83 e2 01          	and    rdx,0x1
  22db2f:	48 83 fa 00          	cmp    rdx,0x0
  22db33:	0f 85 c9 fb ff ff    	jne    22d702 <errolInt+0x112>
  22db39:	e9 fd fb ff ff       	jmp    22d73b <errolInt+0x14b>
  22db3e:	48 8d 3d 83 56 01 00 	lea    rdi,[rip+0x15683]        # 2431c8 <__unnamed_4>
  22db45:	31 c0                	xor    eax,eax
  22db47:	89 c6                	mov    esi,eax
        high -= 1;
  22db49:	e8 b2 da fd ff       	call   20b600 <panic>
  22db4e:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  22db55:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  22db59:	48 8b 8d e8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x118]
  22db60:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
    if (@bitCast(u64, val) & 0x1 != 0) {
  22db64:	e9 0b fc ff ff       	jmp    22d774 <errolInt+0x184>
  22db69:	48 8d 3d 58 56 01 00 	lea    rdi,[rip+0x15658]        # 2431c8 <__unnamed_4>
  22db70:	31 c0                	xor    eax,eax
  22db72:	89 c6                	mov    esi,eax
        low -= 1;
  22db74:	e8 87 da fd ff       	call   20b600 <panic>
  22db79:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
  22db80:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  22db84:	48 8b 8d d0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x130]
  22db8b:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
    if (@bitCast(u64, val) & 0x1 != 0) {
  22db8f:	e9 e0 fb ff ff       	jmp    22d774 <errolInt+0x184>
    var l64 = @intCast(u64, low % pow19);
  22db94:	31 c0                	xor    eax,eax
  22db96:	89 c1                	mov    ecx,eax
  22db98:	48 ba 00 00 e8 89 04 	movabs rdx,0x8ac7230489e80000
  22db9f:	23 c7 8a 
  22dba2:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
  22dba9:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  22dbb0:	e8 7b df 00 00       	call   23bb30 <__umodti3>
  22dbb5:	c5 f9 76 c0          	vpcmpeqd xmm0,xmm0,xmm0
  22dbb9:	c5 79 d7 c0          	vpmovmskb r8d,xmm0
  22dbbd:	41 81 e8 ff ff 00 00 	sub    r8d,0xffff
  22dbc4:	48 89 85 c8 fd ff ff 	mov    QWORD PTR [rbp-0x238],rax
  22dbcb:	44 89 85 c4 fd ff ff 	mov    DWORD PTR [rbp-0x23c],r8d
  22dbd2:	74 12                	je     22dbe6 <errolInt+0x5f6>
  22dbd4:	eb 3c                	jmp    22dc12 <errolInt+0x622>
  22dbd6:	48 8d 3d 0b 57 01 00 	lea    rdi,[rip+0x1570b]        # 2432e8 <__unnamed_15>
  22dbdd:	31 c0                	xor    eax,eax
  22dbdf:	89 c6                	mov    esi,eax
  22dbe1:	e8 1a da fd ff       	call   20b600 <panic>
  22dbe6:	31 c0                	xor    eax,eax
  22dbe8:	88 c1                	mov    cl,al
  22dbea:	48 8b 95 c8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x238]
  22dbf1:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
    const lf = @intCast(u64, (low / pow19) % pow19);
  22dbf5:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  22dbf9:	48 8b 75 a8          	mov    rsi,QWORD PTR [rbp-0x58]
  22dbfd:	f6 c1 01             	test   cl,0x1
  22dc00:	48 89 b5 b8 fd ff ff 	mov    QWORD PTR [rbp-0x248],rsi
  22dc07:	48 89 bd b0 fd ff ff 	mov    QWORD PTR [rbp-0x250],rdi
  22dc0e:	75 7f                	jne    22dc8f <errolInt+0x69f>
  22dc10:	eb 10                	jmp    22dc22 <errolInt+0x632>
  22dc12:	48 8d 3d 6f 58 01 00 	lea    rdi,[rip+0x1586f]        # 243488 <__unnamed_22>
  22dc19:	31 c0                	xor    eax,eax
  22dc1b:	89 c6                	mov    esi,eax
    var l64 = @intCast(u64, low % pow19);
  22dc1d:	e8 de d9 fd ff       	call   20b600 <panic>
  22dc22:	31 c0                	xor    eax,eax
  22dc24:	88 c1                	mov    cl,al
    const lf = @intCast(u64, (low / pow19) % pow19);
  22dc26:	31 c0                	xor    eax,eax
  22dc28:	89 c2                	mov    edx,eax
  22dc2a:	48 be 00 00 e8 89 04 	movabs rsi,0x8ac7230489e80000
  22dc31:	23 c7 8a 
  22dc34:	48 8b bd b0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x250]
  22dc3b:	4c 8b 85 b8 fd ff ff 	mov    r8,QWORD PTR [rbp-0x248]
  22dc42:	48 89 b5 a8 fd ff ff 	mov    QWORD PTR [rbp-0x258],rsi
  22dc49:	4c 89 c6             	mov    rsi,r8
  22dc4c:	4c 8b 8d a8 fd ff ff 	mov    r9,QWORD PTR [rbp-0x258]
  22dc53:	48 89 95 a0 fd ff ff 	mov    QWORD PTR [rbp-0x260],rdx
  22dc5a:	4c 89 ca             	mov    rdx,r9
  22dc5d:	4c 8b 95 a0 fd ff ff 	mov    r10,QWORD PTR [rbp-0x260]
  22dc64:	88 8d 9f fd ff ff    	mov    BYTE PTR [rbp-0x261],cl
  22dc6a:	4c 89 d1             	mov    rcx,r10
  22dc6d:	e8 3e de 00 00       	call   23bab0 <__udivti3>
  22dc72:	44 8a 9d 9f fd ff ff 	mov    r11b,BYTE PTR [rbp-0x261]
  22dc79:	41 f6 c3 01          	test   r11b,0x1
  22dc7d:	48 89 95 90 fd ff ff 	mov    QWORD PTR [rbp-0x270],rdx
  22dc84:	48 89 85 88 fd ff ff 	mov    QWORD PTR [rbp-0x278],rax
  22dc8b:	75 54                	jne    22dce1 <errolInt+0x6f1>
  22dc8d:	eb 10                	jmp    22dc9f <errolInt+0x6af>
  22dc8f:	48 8d 3d aa 55 01 00 	lea    rdi,[rip+0x155aa]        # 243240 <__unnamed_7>
  22dc96:	31 c0                	xor    eax,eax
  22dc98:	89 c6                	mov    esi,eax
  22dc9a:	e8 61 d9 fd ff       	call   20b600 <panic>
  22dc9f:	31 c0                	xor    eax,eax
  22dca1:	89 c1                	mov    ecx,eax
  22dca3:	48 ba 00 00 e8 89 04 	movabs rdx,0x8ac7230489e80000
  22dcaa:	23 c7 8a 
  22dcad:	48 8b bd 88 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x278]
  22dcb4:	48 8b b5 90 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x270]
  22dcbb:	e8 70 de 00 00       	call   23bb30 <__umodti3>
  22dcc0:	c5 f9 76 c0          	vpcmpeqd xmm0,xmm0,xmm0
  22dcc4:	c5 79 d7 c0          	vpmovmskb r8d,xmm0
  22dcc8:	41 81 e8 ff ff 00 00 	sub    r8d,0xffff
  22dccf:	48 89 85 80 fd ff ff 	mov    QWORD PTR [rbp-0x280],rax
  22dcd6:	44 89 85 7c fd ff ff 	mov    DWORD PTR [rbp-0x284],r8d
  22dcdd:	74 12                	je     22dcf1 <errolInt+0x701>
  22dcdf:	eb 3c                	jmp    22dd1d <errolInt+0x72d>
  22dce1:	48 8d 3d 00 56 01 00 	lea    rdi,[rip+0x15600]        # 2432e8 <__unnamed_15>
  22dce8:	31 c0                	xor    eax,eax
  22dcea:	89 c6                	mov    esi,eax
  22dcec:	e8 0f d9 fd ff       	call   20b600 <panic>
  22dcf1:	31 c0                	xor    eax,eax
  22dcf3:	88 c1                	mov    cl,al
  22dcf5:	48 8b 95 80 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x280]
  22dcfc:	48 89 55 80          	mov    QWORD PTR [rbp-0x80],rdx
    var h64 = @intCast(u64, high % pow19);
  22dd00:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  22dd04:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  22dd08:	f6 c1 01             	test   cl,0x1
  22dd0b:	48 89 b5 70 fd ff ff 	mov    QWORD PTR [rbp-0x290],rsi
  22dd12:	48 89 bd 68 fd ff ff 	mov    QWORD PTR [rbp-0x298],rdi
  22dd19:	75 54                	jne    22dd6f <errolInt+0x77f>
  22dd1b:	eb 10                	jmp    22dd2d <errolInt+0x73d>
  22dd1d:	48 8d 3d 64 57 01 00 	lea    rdi,[rip+0x15764]        # 243488 <__unnamed_22>
  22dd24:	31 c0                	xor    eax,eax
  22dd26:	89 c6                	mov    esi,eax
    const lf = @intCast(u64, (low / pow19) % pow19);
  22dd28:	e8 d3 d8 fd ff       	call   20b600 <panic>
    var h64 = @intCast(u64, high % pow19);
  22dd2d:	31 c0                	xor    eax,eax
  22dd2f:	89 c1                	mov    ecx,eax
  22dd31:	48 ba 00 00 e8 89 04 	movabs rdx,0x8ac7230489e80000
  22dd38:	23 c7 8a 
  22dd3b:	48 8b bd 68 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x298]
  22dd42:	48 8b b5 70 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x290]
  22dd49:	e8 e2 dd 00 00       	call   23bb30 <__umodti3>
  22dd4e:	c5 f9 76 c0          	vpcmpeqd xmm0,xmm0,xmm0
  22dd52:	c5 79 d7 c0          	vpmovmskb r8d,xmm0
  22dd56:	41 81 e8 ff ff 00 00 	sub    r8d,0xffff
  22dd5d:	48 89 85 60 fd ff ff 	mov    QWORD PTR [rbp-0x2a0],rax
  22dd64:	44 89 85 5c fd ff ff 	mov    DWORD PTR [rbp-0x2a4],r8d
  22dd6b:	74 12                	je     22dd7f <errolInt+0x78f>
  22dd6d:	eb 3f                	jmp    22ddae <errolInt+0x7be>
  22dd6f:	48 8d 3d 72 55 01 00 	lea    rdi,[rip+0x15572]        # 2432e8 <__unnamed_15>
  22dd76:	31 c0                	xor    eax,eax
  22dd78:	89 c6                	mov    esi,eax
  22dd7a:	e8 81 d8 fd ff       	call   20b600 <panic>
  22dd7f:	31 c0                	xor    eax,eax
  22dd81:	88 c1                	mov    cl,al
  22dd83:	48 8b 95 60 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2a0]
  22dd8a:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
    const hf = @intCast(u64, (high / pow19) % pow19);
  22dd91:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  22dd95:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  22dd99:	f6 c1 01             	test   cl,0x1
  22dd9c:	48 89 b5 50 fd ff ff 	mov    QWORD PTR [rbp-0x2b0],rsi
  22dda3:	48 89 bd 48 fd ff ff 	mov    QWORD PTR [rbp-0x2b8],rdi
  22ddaa:	75 7f                	jne    22de2b <errolInt+0x83b>
  22ddac:	eb 10                	jmp    22ddbe <errolInt+0x7ce>
  22ddae:	48 8d 3d d3 56 01 00 	lea    rdi,[rip+0x156d3]        # 243488 <__unnamed_22>
  22ddb5:	31 c0                	xor    eax,eax
  22ddb7:	89 c6                	mov    esi,eax
    var h64 = @intCast(u64, high % pow19);
  22ddb9:	e8 42 d8 fd ff       	call   20b600 <panic>
  22ddbe:	31 c0                	xor    eax,eax
  22ddc0:	88 c1                	mov    cl,al
    const hf = @intCast(u64, (high / pow19) % pow19);
  22ddc2:	31 c0                	xor    eax,eax
  22ddc4:	89 c2                	mov    edx,eax
  22ddc6:	48 be 00 00 e8 89 04 	movabs rsi,0x8ac7230489e80000
  22ddcd:	23 c7 8a 
  22ddd0:	48 8b bd 48 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2b8]
  22ddd7:	4c 8b 85 50 fd ff ff 	mov    r8,QWORD PTR [rbp-0x2b0]
  22ddde:	48 89 b5 40 fd ff ff 	mov    QWORD PTR [rbp-0x2c0],rsi
  22dde5:	4c 89 c6             	mov    rsi,r8
  22dde8:	4c 8b 8d 40 fd ff ff 	mov    r9,QWORD PTR [rbp-0x2c0]
  22ddef:	48 89 95 38 fd ff ff 	mov    QWORD PTR [rbp-0x2c8],rdx
  22ddf6:	4c 89 ca             	mov    rdx,r9
  22ddf9:	4c 8b 95 38 fd ff ff 	mov    r10,QWORD PTR [rbp-0x2c8]
  22de00:	88 8d 37 fd ff ff    	mov    BYTE PTR [rbp-0x2c9],cl
  22de06:	4c 89 d1             	mov    rcx,r10
  22de09:	e8 a2 dc 00 00       	call   23bab0 <__udivti3>
  22de0e:	44 8a 9d 37 fd ff ff 	mov    r11b,BYTE PTR [rbp-0x2c9]
  22de15:	41 f6 c3 01          	test   r11b,0x1
  22de19:	48 89 95 28 fd ff ff 	mov    QWORD PTR [rbp-0x2d8],rdx
  22de20:	48 89 85 20 fd ff ff 	mov    QWORD PTR [rbp-0x2e0],rax
  22de27:	75 54                	jne    22de7d <errolInt+0x88d>
  22de29:	eb 10                	jmp    22de3b <errolInt+0x84b>
  22de2b:	48 8d 3d 0e 54 01 00 	lea    rdi,[rip+0x1540e]        # 243240 <__unnamed_7>
  22de32:	31 c0                	xor    eax,eax
  22de34:	89 c6                	mov    esi,eax
  22de36:	e8 c5 d7 fd ff       	call   20b600 <panic>
  22de3b:	31 c0                	xor    eax,eax
  22de3d:	89 c1                	mov    ecx,eax
  22de3f:	48 ba 00 00 e8 89 04 	movabs rdx,0x8ac7230489e80000
  22de46:	23 c7 8a 
  22de49:	48 8b bd 20 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2e0]
  22de50:	48 8b b5 28 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2d8]
  22de57:	e8 d4 dc 00 00       	call   23bb30 <__umodti3>
  22de5c:	c5 f9 76 c0          	vpcmpeqd xmm0,xmm0,xmm0
  22de60:	c5 79 d7 c0          	vpmovmskb r8d,xmm0
  22de64:	41 81 e8 ff ff 00 00 	sub    r8d,0xffff
  22de6b:	48 89 85 18 fd ff ff 	mov    QWORD PTR [rbp-0x2e8],rax
  22de72:	44 89 85 14 fd ff ff 	mov    DWORD PTR [rbp-0x2ec],r8d
  22de79:	74 12                	je     22de8d <errolInt+0x89d>
  22de7b:	eb 34                	jmp    22deb1 <errolInt+0x8c1>
  22de7d:	48 8d 3d 64 54 01 00 	lea    rdi,[rip+0x15464]        # 2432e8 <__unnamed_15>
  22de84:	31 c0                	xor    eax,eax
  22de86:	89 c6                	mov    esi,eax
  22de88:	e8 73 d7 fd ff       	call   20b600 <panic>
  22de8d:	48 8b 85 18 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2e8]
  22de94:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
    if (lf != hf) {
  22de9b:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  22de9f:	48 3b 8d 70 ff ff ff 	cmp    rcx,QWORD PTR [rbp-0x90]
  22dea6:	0f 85 f0 f8 ff ff    	jne    22d79c <errolInt+0x1ac>
  22deac:	e9 29 f9 ff ff       	jmp    22d7da <errolInt+0x1ea>
  22deb1:	48 8d 3d d0 55 01 00 	lea    rdi,[rip+0x155d0]        # 243488 <__unnamed_22>
  22deb8:	31 c0                	xor    eax,eax
  22deba:	89 c6                	mov    esi,eax
    const hf = @intCast(u64, (high / pow19) % pow19);
  22debc:	e8 3f d7 fd ff       	call   20b600 <panic>
        mid = mid / (pow19 / 10);
  22dec1:	31 c0                	xor    eax,eax
  22dec3:	89 c1                	mov    ecx,eax
  22dec5:	48 ba 00 00 64 a7 b3 	movabs rdx,0xde0b6b3a7640000
  22decc:	b6 e0 0d 
  22decf:	48 8b bd b0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x150]
  22ded6:	48 8b b5 b8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x148]
  22dedd:	e8 ce db 00 00       	call   23bab0 <__udivti3>
  22dee2:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  22dee6:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
    if (lf != hf) {
  22deea:	e9 ed f8 ff ff       	jmp    22d7dc <errolInt+0x1ec>
  22deef:	48 8d 3d 4a 53 01 00 	lea    rdi,[rip+0x1534a]        # 243240 <__unnamed_7>
  22def6:	31 c0                	xor    eax,eax
  22def8:	89 c6                	mov    esi,eax
        mid = mid / (pow19 / 10);
  22defa:	e8 01 d7 fd ff       	call   20b600 <panic>
  22deff:	48 8d 3d c2 52 01 00 	lea    rdi,[rip+0x152c2]        # 2431c8 <__unnamed_4>
  22df06:	31 c0                	xor    eax,eax
  22df08:	89 c6                	mov    esi,eax
            x *= 10;
  22df0a:	e8 f1 d6 fd ff       	call   20b600 <panic>
  22df0f:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
  22df16:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
        while (i < mi) : (i += 1) {
  22df1d:	8b 8d 5c ff ff ff    	mov    ecx,DWORD PTR [rbp-0xa4]
  22df23:	ff c1                	inc    ecx
  22df25:	0f 90 c2             	seto   dl
  22df28:	89 8d 10 fd ff ff    	mov    DWORD PTR [rbp-0x2f0],ecx
  22df2e:	88 95 0f fd ff ff    	mov    BYTE PTR [rbp-0x2f1],dl
  22df34:	70 02                	jo     22df38 <errolInt+0x948>
  22df36:	eb 10                	jmp    22df48 <errolInt+0x958>
  22df38:	48 8d 3d 89 52 01 00 	lea    rdi,[rip+0x15289]        # 2431c8 <__unnamed_4>
  22df3f:	31 c0                	xor    eax,eax
  22df41:	89 c6                	mov    esi,eax
  22df43:	e8 b8 d6 fd ff       	call   20b600 <panic>
  22df48:	8b 85 10 fd ff ff    	mov    eax,DWORD PTR [rbp-0x2f0]
  22df4e:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
  22df54:	e9 be f8 ff ff       	jmp    22d817 <errolInt+0x227>
    const m64 = @truncate(u64, @divTrunc(mid, x));
  22df59:	48 8b bd 98 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x168]
  22df60:	48 8b b5 90 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x170]
  22df67:	48 8b 95 88 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x178]
  22df6e:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
  22df75:	e8 36 db 00 00       	call   23bab0 <__udivti3>
  22df7a:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
    if (lf != hf) mi += 19;
  22df81:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  22df85:	48 3b 85 70 ff ff ff 	cmp    rax,QWORD PTR [rbp-0x90]
  22df8c:	0f 85 fc f8 ff ff    	jne    22d88e <errolInt+0x29e>
  22df92:	e9 1a f9 ff ff       	jmp    22d8b1 <errolInt+0x2c1>
  22df97:	48 8d 3d a2 52 01 00 	lea    rdi,[rip+0x152a2]        # 243240 <__unnamed_7>
  22df9e:	31 c0                	xor    eax,eax
  22dfa0:	89 c6                	mov    esi,eax
    const m64 = @truncate(u64, @divTrunc(mid, x));
  22dfa2:	e8 59 d6 fd ff       	call   20b600 <panic>
  22dfa7:	48 8d 3d 1a 52 01 00 	lea    rdi,[rip+0x1521a]        # 2431c8 <__unnamed_4>
  22dfae:	31 c0                	xor    eax,eax
  22dfb0:	89 c6                	mov    esi,eax
    if (lf != hf) mi += 19;
  22dfb2:	e8 49 d6 fd ff       	call   20b600 <panic>
  22dfb7:	8b 85 7c fe ff ff    	mov    eax,DWORD PTR [rbp-0x184]
  22dfbd:	89 85 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],eax
  22dfc3:	e9 eb f8 ff ff       	jmp    22d8b3 <errolInt+0x2c3>
  22dfc8:	48 8d 3d f9 51 01 00 	lea    rdi,[rip+0x151f9]        # 2431c8 <__unnamed_4>
  22dfcf:	31 c0                	xor    eax,eax
  22dfd1:	89 c6                	mov    esi,eax
    var buf_index = u64toa(m64, buffer) - 1;
  22dfd3:	e8 28 d6 fd ff       	call   20b600 <panic>
  22dfd8:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  22dfdf:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
    if (mi != 0) {
  22dfe6:	83 bd 6c ff ff ff 00 	cmp    DWORD PTR [rbp-0x94],0x0
  22dfed:	0f 85 f2 f8 ff ff    	jne    22d8e5 <errolInt+0x2f5>
  22dff3:	e9 13 f9 ff ff       	jmp    22d90b <errolInt+0x31b>
  22dff8:	48 8d 3d c9 51 01 00 	lea    rdi,[rip+0x151c9]        # 2431c8 <__unnamed_4>
  22dfff:	31 c0                	xor    eax,eax
  22e001:	89 c6                	mov    esi,eax
        buffer[buf_index - 1] += @boolToInt(buffer[buf_index] >= '5');
  22e003:	e8 f8 d5 fd ff       	call   20b600 <panic>
  22e008:	48 8b 85 60 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a0]
  22e00f:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
  22e016:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22e01a:	72 10                	jb     22e02c <errolInt+0xa3c>
  22e01c:	48 8d 3d b5 53 01 00 	lea    rdi,[rip+0x153b5]        # 2433d8 <__unnamed_20>
  22e023:	31 c0                	xor    eax,eax
  22e025:	89 c6                	mov    esi,eax
  22e027:	e8 d4 d5 fd ff       	call   20b600 <panic>
  22e02c:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  22e033:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22e036:	48 89 ca             	mov    rdx,rcx
  22e039:	48 8b b5 60 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1a0]
  22e040:	48 01 f2             	add    rdx,rsi
  22e043:	40 8a 3c 31          	mov    dil,BYTE PTR [rcx+rsi*1]
  22e047:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
  22e04e:	48 3b 48 08          	cmp    rcx,QWORD PTR [rax+0x8]
  22e052:	48 89 95 00 fd ff ff 	mov    QWORD PTR [rbp-0x300],rdx
  22e059:	40 88 bd ff fc ff ff 	mov    BYTE PTR [rbp-0x301],dil
  22e060:	48 89 8d f0 fc ff ff 	mov    QWORD PTR [rbp-0x310],rcx
  22e067:	72 10                	jb     22e079 <errolInt+0xa89>
  22e069:	48 8d 3d 68 53 01 00 	lea    rdi,[rip+0x15368]        # 2433d8 <__unnamed_20>
  22e070:	31 c0                	xor    eax,eax
  22e072:	89 c6                	mov    esi,eax
  22e074:	e8 87 d5 fd ff       	call   20b600 <panic>
  22e079:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  22e080:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22e083:	48 8b 95 f0 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x310]
  22e08a:	80 3c 11 35          	cmp    BYTE PTR [rcx+rdx*1],0x35
  22e08e:	40 0f 93 c6          	setae  sil
  22e092:	40 80 e6 01          	and    sil,0x1
  22e096:	40 8a bd ff fc ff ff 	mov    dil,BYTE PTR [rbp-0x301]
  22e09d:	40 00 f7             	add    dil,sil
  22e0a0:	40 0f 92 c6          	setb   sil
  22e0a4:	40 f6 c6 01          	test   sil,0x1
  22e0a8:	40 88 bd ef fc ff ff 	mov    BYTE PTR [rbp-0x311],dil
  22e0af:	75 02                	jne    22e0b3 <errolInt+0xac3>
  22e0b1:	eb 10                	jmp    22e0c3 <errolInt+0xad3>
  22e0b3:	48 8d 3d 0e 51 01 00 	lea    rdi,[rip+0x1510e]        # 2431c8 <__unnamed_4>
  22e0ba:	31 c0                	xor    eax,eax
  22e0bc:	89 c6                	mov    esi,eax
  22e0be:	e8 3d d5 fd ff       	call   20b600 <panic>
  22e0c3:	48 8b 85 00 fd ff ff 	mov    rax,QWORD PTR [rbp-0x300]
  22e0ca:	8a 8d ef fc ff ff    	mov    cl,BYTE PTR [rbp-0x311]
  22e0d0:	88 08                	mov    BYTE PTR [rax],cl
    if (mi != 0) {
  22e0d2:	e9 5a f8 ff ff       	jmp    22d931 <errolInt+0x341>
  22e0d7:	48 8d 3d ea 50 01 00 	lea    rdi,[rip+0x150ea]        # 2431c8 <__unnamed_4>
  22e0de:	31 c0                	xor    eax,eax
  22e0e0:	89 c6                	mov    esi,eax
        buf_index += 1;
  22e0e2:	e8 19 d5 fd ff       	call   20b600 <panic>
  22e0e7:	48 8b 85 50 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b0]
  22e0ee:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
    if (mi != 0) {
  22e0f5:	e9 37 f8 ff ff       	jmp    22d931 <errolInt+0x341>
  22e0fa:	48 8d 3d d7 52 01 00 	lea    rdi,[rip+0x152d7]        # 2433d8 <__unnamed_20>
  22e101:	31 c0                	xor    eax,eax
  22e103:	89 c6                	mov    esi,eax
        .digits = buffer[0..buf_index],
  22e105:	e8 f6 d4 fd ff       	call   20b600 <panic>
  22e10a:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  22e111:	48 8b 8d 40 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1c0]
  22e118:	48 39 c8             	cmp    rax,rcx
  22e11b:	76 10                	jbe    22e12d <errolInt+0xb3d>
  22e11d:	48 8d 3d b4 52 01 00 	lea    rdi,[rip+0x152b4]        # 2433d8 <__unnamed_20>
  22e124:	31 c0                	xor    eax,eax
  22e126:	89 c6                	mov    esi,eax
  22e128:	e8 d3 d4 fd ff       	call   20b600 <panic>
  22e12d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  22e134:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22e137:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  22e13b:	48 8b 8d 38 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1c8]
  22e142:	48 83 e9 00          	sub    rcx,0x0
  22e146:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
        .exp = @intCast(i32, buf_index) + mi,
  22e14a:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
  22e151:	89 ca                	mov    edx,ecx
  22e153:	48 63 f2             	movsxd rsi,edx
  22e156:	48 39 f1             	cmp    rcx,rsi
  22e159:	89 95 e8 fc ff ff    	mov    DWORD PTR [rbp-0x318],edx
  22e15f:	75 1f                	jne    22e180 <errolInt+0xb90>
  22e161:	8b 85 e8 fc ff ff    	mov    eax,DWORD PTR [rbp-0x318]
  22e167:	03 85 6c ff ff ff    	add    eax,DWORD PTR [rbp-0x94]
  22e16d:	0f 90 c1             	seto   cl
  22e170:	89 85 e4 fc ff ff    	mov    DWORD PTR [rbp-0x31c],eax
  22e176:	88 8d e3 fc ff ff    	mov    BYTE PTR [rbp-0x31d],cl
  22e17c:	70 12                	jo     22e190 <errolInt+0xba0>
  22e17e:	eb 20                	jmp    22e1a0 <errolInt+0xbb0>
  22e180:	48 8d 3d 01 53 01 00 	lea    rdi,[rip+0x15301]        # 243488 <__unnamed_22>
  22e187:	31 c0                	xor    eax,eax
  22e189:	89 c6                	mov    esi,eax
  22e18b:	e8 70 d4 fd ff       	call   20b600 <panic>
  22e190:	48 8d 3d 31 50 01 00 	lea    rdi,[rip+0x15031]        # 2431c8 <__unnamed_4>
  22e197:	31 c0                	xor    eax,eax
  22e199:	89 c6                	mov    esi,eax
  22e19b:	e8 60 d4 fd ff       	call   20b600 <panic>
    return FloatDecimal{
  22e1a0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22e1a4:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  22e1a8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  22e1ac:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  22e1b0:	8b 8d e4 fc ff ff    	mov    ecx,DWORD PTR [rbp-0x31c]
  22e1b6:	89 4d e8             	mov    DWORD PTR [rbp-0x18],ecx
  22e1b9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  22e1bd:	48 8b 95 30 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd0]
  22e1c4:	48 89 02             	mov    QWORD PTR [rdx],rax
  22e1c7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  22e1cb:	48 89 42 08          	mov    QWORD PTR [rdx+0x8],rax
  22e1cf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22e1d3:	48 89 42 10          	mov    QWORD PTR [rdx+0x10],rax
  22e1d7:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  22e1de:	48 81 c4 20 03 00 00 	add    rsp,0x320
  22e1e5:	5d                   	pop    rbp
  22e1e6:	c3                   	ret    
  22e1e7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  22e1ee:	00 00 

000000000022e1f0 <errolFixed>:

/// Fixed point conversion algorithm, guaranteed correct, optimal, and best.
///  @val: The val.
///  @buf: The output buffer.
///  &return: The exponent.
fn errolFixed(val: f64, buffer: []u8) FloatDecimal {
  22e1f0:	55                   	push   rbp
  22e1f1:	48 89 e5             	mov    rbp,rsp
  22e1f4:	48 81 ec b0 01 00 00 	sub    rsp,0x1b0
  22e1fb:	48 89 f8             	mov    rax,rdi
  22e1fe:	c5 fb 10 0d 02 2a fd 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffd2a02]        # 200c08 <__unnamed_186+0x8>
  22e205:	ff 
  22e206:	c5 fb 11 45 d0       	vmovsd QWORD PTR [rbp-0x30],xmm0
    assert((val >= 16.0) and (val < 9.007199254740992e15));
  22e20b:	c5 fb 10 45 d0       	vmovsd xmm0,QWORD PTR [rbp-0x30]
  22e210:	c5 f9 2e c1          	vucomisd xmm0,xmm1
  22e214:	0f 93 c1             	setae  cl
  22e217:	f6 c1 01             	test   cl,0x1
  22e21a:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  22e221:	48 89 b5 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rsi
  22e228:	48 89 bd 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdi
  22e22f:	88 8d 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],cl
  22e235:	75 02                	jne    22e239 <errolFixed+0x49>
  22e237:	eb 16                	jmp    22e24f <errolFixed+0x5f>
  22e239:	c5 fb 10 05 5f 2a fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd2a5f]        # 200ca0 <__unnamed_190+0x8>
  22e240:	ff 
  22e241:	c5 f9 2e 45 d0       	vucomisd xmm0,QWORD PTR [rbp-0x30]
  22e246:	0f 97 c0             	seta   al
  22e249:	88 85 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],al
  22e24f:	8a 85 67 ff ff ff    	mov    al,BYTE PTR [rbp-0x99]
  22e255:	c5 fb 10 05 b3 29 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd29b3]        # 200c10 <__unnamed_186+0x10>
  22e25c:	ff 
  22e25d:	c5 fb 10 0d 93 29 fd 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffd2993]        # 200bf8 <__unnamed_187+0x8>
  22e264:	ff 
  22e265:	0f b6 f8             	movzx  edi,al
  22e268:	c5 fb 11 8d 58 ff ff 	vmovsd QWORD PTR [rbp-0xa8],xmm1
  22e26f:	ff 
  22e270:	c5 fb 11 85 50 ff ff 	vmovsd QWORD PTR [rbp-0xb0],xmm0
  22e277:	ff 
  22e278:	e8 83 cd fd ff       	call   20b000 <assert>

    const u = @floatToInt(u64, val);
  22e27d:	c5 fb 10 45 d0       	vmovsd xmm0,QWORD PTR [rbp-0x30]
  22e282:	c5 fb 10 0d c6 29 fd 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffd29c6]        # 200c50 <app_mask+0x10>
  22e289:	ff 
  22e28a:	c5 fb 5c d1          	vsubsd xmm2,xmm0,xmm1
  22e28e:	c4 e1 fb 2c ca       	vcvttsd2si rcx,xmm2
  22e293:	48 ba 00 00 00 00 00 	movabs rdx,0x8000000000000000
  22e29a:	00 00 80 
  22e29d:	48 31 d1             	xor    rcx,rdx
  22e2a0:	c4 e1 fb 2c d0       	vcvttsd2si rdx,xmm0
  22e2a5:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22e2a9:	48 0f 47 ca          	cmova  rcx,rdx
  22e2ad:	c4 e1 f9 6e c9       	vmovq  xmm1,rcx
  22e2b2:	c5 f9 6f 15 e6 1e fd 	vmovdqa xmm2,XMMWORD PTR [rip+0xfffffffffffd1ee6]        # 2001a0 <__unnamed_313-0x10>
  22e2b9:	ff 
  22e2ba:	c5 f1 62 ca          	vpunpckldq xmm1,xmm1,xmm2
  22e2be:	c5 f9 28 15 1a 24 fd 	vmovapd xmm2,XMMWORD PTR [rip+0xfffffffffffd241a]        # 2006e0 <__unnamed_69+0x10>
  22e2c5:	ff 
  22e2c6:	c5 f1 5c ca          	vsubpd xmm1,xmm1,xmm2
  22e2ca:	c5 f1 7c c9          	vhaddpd xmm1,xmm1,xmm1
  22e2ce:	c5 fb 5c c1          	vsubsd xmm0,xmm0,xmm1
  22e2d2:	c5 fb 10 8d 58 ff ff 	vmovsd xmm1,QWORD PTR [rbp-0xa8]
  22e2d9:	ff 
  22e2da:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22e2de:	0f 97 c0             	seta   al
  22e2e1:	c5 fb 10 95 50 ff ff 	vmovsd xmm2,QWORD PTR [rbp-0xb0]
  22e2e8:	ff 
  22e2e9:	c5 f9 2e c2          	vucomisd xmm0,xmm2
  22e2ed:	40 0f 97 c6          	seta   sil
  22e2f1:	40 20 f0             	and    al,sil
  22e2f4:	a8 01                	test   al,0x1
  22e2f6:	48 89 8d 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rcx
  22e2fd:	0f 85 ac 01 00 00    	jne    22e4af <errolFixed+0x2bf>
  22e303:	e9 0e 02 00 00       	jmp    22e516 <errolFixed+0x326>
    var exp = @intCast(i32, buf_index);
    var j = buf_index;
    buffer[j] = 0;

    if (mid != 0.0) {
        while (mid != 0.0) {
  22e308:	eb 00                	jmp    22e30a <errolFixed+0x11a>
  22e30a:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
  22e30e:	c5 fb 10 4d b8       	vmovsd xmm1,QWORD PTR [rbp-0x48]
  22e313:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22e317:	74 78                	je     22e391 <errolFixed+0x1a1>
  22e319:	c5 fb 10 05 ef 28 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd28ef]        # 200c10 <__unnamed_186+0x10>
  22e320:	ff 
  22e321:	c5 fb 10 0d cf 28 fd 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffd28cf]        # 200bf8 <__unnamed_187+0x8>
  22e328:	ff 
  22e329:	c5 fb 10 15 b7 28 fd 	vmovsd xmm2,QWORD PTR [rip+0xfffffffffffd28b7]        # 200be8 <__unnamed_185+0x18>
  22e330:	ff 
            lo *= 10.0;
  22e331:	c5 eb 59 55 b0       	vmulsd xmm2,xmm2,QWORD PTR [rbp-0x50]
  22e336:	c5 fb 11 55 b0       	vmovsd QWORD PTR [rbp-0x50],xmm2
            const ldig = @floatToInt(i32, lo);
  22e33b:	c5 fb 10 55 b0       	vmovsd xmm2,QWORD PTR [rbp-0x50]
  22e340:	c5 fb 2c c2          	vcvttsd2si eax,xmm2
  22e344:	c5 e3 2a d8          	vcvtsi2sd xmm3,xmm3,eax
  22e348:	c5 eb 5c d3          	vsubsd xmm2,xmm2,xmm3
  22e34c:	c5 f9 2e ca          	vucomisd xmm1,xmm2
  22e350:	0f 97 c1             	seta   cl
  22e353:	c5 f9 2e d0          	vucomisd xmm2,xmm0
  22e357:	0f 97 c2             	seta   dl
  22e35a:	20 d1                	and    cl,dl
  22e35c:	f6 c1 01             	test   cl,0x1
  22e35f:	89 85 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],eax
  22e365:	0f 85 d6 02 00 00    	jne    22e641 <errolFixed+0x451>
  22e36b:	e9 3f 03 00 00       	jmp    22e6af <errolFixed+0x4bf>
            hi -= @intToFloat(f64, hdig);

            buffer[j] = @intCast(u8, mdig + '0');
            j += 1;

            if (hdig != ldig or j > 50) break;
  22e370:	48 83 7d 90 32       	cmp    QWORD PTR [rbp-0x70],0x32
  22e375:	0f 97 c0             	seta   al
  22e378:	88 85 43 ff ff ff    	mov    BYTE PTR [rbp-0xbd],al
  22e37e:	8a 85 43 ff ff ff    	mov    al,BYTE PTR [rbp-0xbd]
  22e384:	a8 01                	test   al,0x1
  22e386:	75 02                	jne    22e38a <errolFixed+0x19a>
  22e388:	eb 02                	jmp    22e38c <errolFixed+0x19c>
  22e38a:	eb 05                	jmp    22e391 <errolFixed+0x1a1>
        while (mid != 0.0) {
  22e38c:	e9 79 ff ff ff       	jmp    22e30a <errolFixed+0x11a>
  22e391:	c5 fb 10 05 87 28 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd2887]        # 200c20 <__unnamed_186+0x20>
  22e398:	ff 
        }

        if (mid > 0.5) {
  22e399:	c5 fb 10 4d b8       	vmovsd xmm1,QWORD PTR [rbp-0x48]
  22e39e:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22e3a2:	76 23                	jbe    22e3c7 <errolFixed+0x1d7>
            buffer[j - 1] += 1;
  22e3a4:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  22e3a8:	48 83 e8 01          	sub    rax,0x1
  22e3ac:	0f 92 c1             	setb   cl
  22e3af:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
  22e3b6:	88 8d 37 ff ff ff    	mov    BYTE PTR [rbp-0xc9],cl
  22e3bc:	0f 82 bb 04 00 00    	jb     22e87d <errolFixed+0x68d>
  22e3c2:	e9 c6 04 00 00       	jmp    22e88d <errolFixed+0x69d>
  22e3c7:	c5 fb 10 05 51 28 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd2851]        # 200c20 <__unnamed_186+0x20>
  22e3ce:	ff 
        } else if ((mid == 0.5) and (buffer[j - 1] & 0x1) != 0) {
  22e3cf:	c5 fb 10 4d b8       	vmovsd xmm1,QWORD PTR [rbp-0x48]
  22e3d4:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22e3d8:	0f 94 c0             	sete   al
  22e3db:	0f 9b c1             	setnp  cl
  22e3de:	20 c8                	and    al,cl
  22e3e0:	a8 01                	test   al,0x1
  22e3e2:	88 85 36 ff ff ff    	mov    BYTE PTR [rbp-0xca],al
  22e3e8:	75 02                	jne    22e3ec <errolFixed+0x1fc>
  22e3ea:	eb 23                	jmp    22e40f <errolFixed+0x21f>
  22e3ec:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  22e3f0:	48 83 e8 01          	sub    rax,0x1
  22e3f4:	0f 92 c1             	setb   cl
  22e3f7:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  22e3fe:	88 8d 27 ff ff ff    	mov    BYTE PTR [rbp-0xd9],cl
  22e404:	0f 82 04 05 00 00    	jb     22e90e <errolFixed+0x71e>
  22e40a:	e9 0f 05 00 00       	jmp    22e91e <errolFixed+0x72e>
  22e40f:	8a 85 36 ff ff ff    	mov    al,BYTE PTR [rbp-0xca]
  22e415:	a8 01                	test   al,0x1
  22e417:	75 02                	jne    22e41b <errolFixed+0x22b>
  22e419:	eb 23                	jmp    22e43e <errolFixed+0x24e>
            buffer[j - 1] += 1;
  22e41b:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  22e41f:	48 83 e8 01          	sub    rax,0x1
  22e423:	0f 92 c1             	setb   cl
  22e426:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  22e42d:	88 8d 17 ff ff ff    	mov    BYTE PTR [rbp-0xe9],cl
  22e433:	0f 82 36 05 00 00    	jb     22e96f <errolFixed+0x77f>
  22e439:	e9 41 05 00 00       	jmp    22e97f <errolFixed+0x78f>
        } else if ((mid == 0.5) and (buffer[j - 1] & 0x1) != 0) {
  22e43e:	eb 00                	jmp    22e440 <errolFixed+0x250>
        if (mid > 0.5) {
  22e440:	eb 00                	jmp    22e442 <errolFixed+0x252>
    if (mid != 0.0) {
  22e442:	eb 4a                	jmp    22e48e <errolFixed+0x29e>
        }
    } else {
        while (buffer[j - 1] == '0') {
  22e444:	eb 00                	jmp    22e446 <errolFixed+0x256>
  22e446:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  22e44a:	48 83 e8 01          	sub    rax,0x1
  22e44e:	0f 92 c1             	setb   cl
  22e451:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
  22e458:	88 8d 07 ff ff ff    	mov    BYTE PTR [rbp-0xf9],cl
  22e45e:	0f 82 9c 05 00 00    	jb     22ea00 <errolFixed+0x810>
  22e464:	e9 a7 05 00 00       	jmp    22ea10 <errolFixed+0x820>
            buffer[j - 1] = 0;
  22e469:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  22e46d:	48 83 e8 01          	sub    rax,0x1
  22e471:	0f 92 c1             	setb   cl
  22e474:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  22e47b:	88 8d f7 fe ff ff    	mov    BYTE PTR [rbp-0x109],cl
  22e481:	0f 82 cd 05 00 00    	jb     22ea54 <errolFixed+0x864>
  22e487:	e9 d8 05 00 00       	jmp    22ea64 <errolFixed+0x874>
    if (mid != 0.0) {
  22e48c:	eb 00                	jmp    22e48e <errolFixed+0x29e>
            j -= 1;
        }
    }

    buffer[j] = 0;
  22e48e:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  22e492:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
  22e499:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22e49d:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  22e4a4:	0f 82 41 06 00 00    	jb     22eaeb <errolFixed+0x8fb>
  22e4aa:	e9 2c 06 00 00       	jmp    22eadb <errolFixed+0x8eb>
    const u = @floatToInt(u64, val);
  22e4af:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  22e4b6:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
    const n = @intToFloat(f64, u);
  22e4ba:	c5 f9 6f 05 de 1c fd 	vmovdqa xmm0,XMMWORD PTR [rip+0xfffffffffffd1cde]        # 2001a0 <__unnamed_313-0x10>
  22e4c1:	ff 
  22e4c2:	c5 fa 7e 4d c8       	vmovq  xmm1,QWORD PTR [rbp-0x38]
  22e4c7:	c5 f1 62 c0          	vpunpckldq xmm0,xmm1,xmm0
  22e4cb:	c5 f9 28 0d 0d 22 fd 	vmovapd xmm1,XMMWORD PTR [rip+0xfffffffffffd220d]        # 2006e0 <__unnamed_69+0x10>
  22e4d2:	ff 
  22e4d3:	c5 f9 5c c1          	vsubpd xmm0,xmm0,xmm1
  22e4d7:	c5 f9 7c c0          	vhaddpd xmm0,xmm0,xmm0
  22e4db:	c5 fb 11 45 c0       	vmovsd QWORD PTR [rbp-0x40],xmm0
    var mid = val - n;
  22e4e0:	c5 fb 10 45 d0       	vmovsd xmm0,QWORD PTR [rbp-0x30]
  22e4e5:	c5 fb 5c 45 c0       	vsubsd xmm0,xmm0,QWORD PTR [rbp-0x40]
  22e4ea:	c5 fb 11 45 b8       	vmovsd QWORD PTR [rbp-0x48],xmm0
    var lo = ((fpprev(val) - n) + mid) / 2.0;
  22e4ef:	c5 fb 10 45 d0       	vmovsd xmm0,QWORD PTR [rbp-0x30]
  22e4f4:	e8 e7 0a 00 00       	call   22efe0 <fpprev>
  22e4f9:	31 c9                	xor    ecx,ecx
  22e4fb:	88 ca                	mov    dl,cl
  22e4fd:	c5 fb 5c 45 c0       	vsubsd xmm0,xmm0,QWORD PTR [rbp-0x40]
  22e502:	c5 fb 58 45 b8       	vaddsd xmm0,xmm0,QWORD PTR [rbp-0x48]
  22e507:	f6 c2 01             	test   dl,0x1
  22e50a:	c5 fb 11 85 e0 fe ff 	vmovsd QWORD PTR [rbp-0x120],xmm0
  22e511:	ff 
  22e512:	75 52                	jne    22e566 <errolFixed+0x376>
  22e514:	eb 10                	jmp    22e526 <errolFixed+0x336>
  22e516:	48 8d 3d c3 55 01 00 	lea    rdi,[rip+0x155c3]        # 243ae0 <__unnamed_227>
  22e51d:	31 c0                	xor    eax,eax
  22e51f:	89 c6                	mov    esi,eax
    const u = @floatToInt(u64, val);
  22e521:	e8 da d0 fd ff       	call   20b600 <panic>
  22e526:	c5 fb 10 05 b2 26 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd26b2]        # 200be0 <__unnamed_185+0x10>
  22e52d:	ff 
    var lo = ((fpprev(val) - n) + mid) / 2.0;
  22e52e:	c5 fb 10 8d e0 fe ff 	vmovsd xmm1,QWORD PTR [rbp-0x120]
  22e535:	ff 
  22e536:	c5 f3 5e c0          	vdivsd xmm0,xmm1,xmm0
  22e53a:	c5 fb 11 45 b0       	vmovsd QWORD PTR [rbp-0x50],xmm0
    var hi = ((fpnext(val) - n) + mid) / 2.0;
  22e53f:	c5 fb 10 45 d0       	vmovsd xmm0,QWORD PTR [rbp-0x30]
  22e544:	e8 77 0a 00 00       	call   22efc0 <fpnext>
  22e549:	31 c0                	xor    eax,eax
  22e54b:	88 c1                	mov    cl,al
  22e54d:	c5 fb 5c 45 c0       	vsubsd xmm0,xmm0,QWORD PTR [rbp-0x40]
  22e552:	c5 fb 58 45 b8       	vaddsd xmm0,xmm0,QWORD PTR [rbp-0x48]
  22e557:	f6 c1 01             	test   cl,0x1
  22e55a:	c5 fb 11 85 d8 fe ff 	vmovsd QWORD PTR [rbp-0x128],xmm0
  22e561:	ff 
  22e562:	75 55                	jne    22e5b9 <errolFixed+0x3c9>
  22e564:	eb 10                	jmp    22e576 <errolFixed+0x386>
  22e566:	48 8d 3d d3 4c 01 00 	lea    rdi,[rip+0x14cd3]        # 243240 <__unnamed_7>
  22e56d:	31 c0                	xor    eax,eax
  22e56f:	89 c6                	mov    esi,eax
    var lo = ((fpprev(val) - n) + mid) / 2.0;
  22e571:	e8 8a d0 fd ff       	call   20b600 <panic>
  22e576:	c5 fb 10 05 62 26 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd2662]        # 200be0 <__unnamed_185+0x10>
  22e57d:	ff 
    var hi = ((fpnext(val) - n) + mid) / 2.0;
  22e57e:	c5 fb 10 8d d8 fe ff 	vmovsd xmm1,QWORD PTR [rbp-0x128]
  22e585:	ff 
  22e586:	c5 f3 5e c0          	vdivsd xmm0,xmm1,xmm0
  22e58a:	c5 fb 11 45 a8       	vmovsd QWORD PTR [rbp-0x58],xmm0
    var buf_index = u64toa(u, buffer);
  22e58f:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  22e593:	48 8b b5 70 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x90]
  22e59a:	e8 f1 0c 00 00       	call   22f290 <u64toa>
  22e59f:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
    var exp = @intCast(i32, buf_index);
  22e5a3:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22e5a7:	89 c1                	mov    ecx,eax
  22e5a9:	48 63 f1             	movsxd rsi,ecx
  22e5ac:	48 39 f0             	cmp    rax,rsi
  22e5af:	89 8d d4 fe ff ff    	mov    DWORD PTR [rbp-0x12c],ecx
  22e5b5:	74 12                	je     22e5c9 <errolFixed+0x3d9>
  22e5b7:	eb 3b                	jmp    22e5f4 <errolFixed+0x404>
  22e5b9:	48 8d 3d 80 4c 01 00 	lea    rdi,[rip+0x14c80]        # 243240 <__unnamed_7>
  22e5c0:	31 c0                	xor    eax,eax
  22e5c2:	89 c6                	mov    esi,eax
    var hi = ((fpnext(val) - n) + mid) / 2.0;
  22e5c4:	e8 37 d0 fd ff       	call   20b600 <panic>
    var exp = @intCast(i32, buf_index);
  22e5c9:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
  22e5cf:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
    var j = buf_index;
  22e5d2:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  22e5d6:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
    buffer[j] = 0;
  22e5da:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  22e5de:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  22e5e5:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  22e5e9:	48 89 8d c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rcx
  22e5f0:	72 22                	jb     22e614 <errolFixed+0x424>
  22e5f2:	eb 10                	jmp    22e604 <errolFixed+0x414>
  22e5f4:	48 8d 3d 8d 4e 01 00 	lea    rdi,[rip+0x14e8d]        # 243488 <__unnamed_22>
  22e5fb:	31 c0                	xor    eax,eax
  22e5fd:	89 c6                	mov    esi,eax
    var exp = @intCast(i32, buf_index);
  22e5ff:	e8 fc cf fd ff       	call   20b600 <panic>
  22e604:	48 8d 3d cd 4d 01 00 	lea    rdi,[rip+0x14dcd]        # 2433d8 <__unnamed_20>
  22e60b:	31 c0                	xor    eax,eax
  22e60d:	89 c6                	mov    esi,eax
    buffer[j] = 0;
  22e60f:	e8 ec cf fd ff       	call   20b600 <panic>
  22e614:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
  22e618:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  22e61f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22e622:	48 8b 95 c8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x138]
  22e629:	c6 04 11 00          	mov    BYTE PTR [rcx+rdx*1],0x0
    if (mid != 0.0) {
  22e62d:	c5 fb 10 4d b8       	vmovsd xmm1,QWORD PTR [rbp-0x48]
  22e632:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  22e636:	0f 85 cc fc ff ff    	jne    22e308 <errolFixed+0x118>
  22e63c:	e9 03 fe ff ff       	jmp    22e444 <errolFixed+0x254>
  22e641:	c5 fb 10 05 c7 25 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd25c7]        # 200c10 <__unnamed_186+0x10>
  22e648:	ff 
  22e649:	c5 fb 10 0d a7 25 fd 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffd25a7]        # 200bf8 <__unnamed_187+0x8>
  22e650:	ff 
  22e651:	c5 fb 10 15 8f 25 fd 	vmovsd xmm2,QWORD PTR [rip+0xfffffffffffd258f]        # 200be8 <__unnamed_185+0x18>
  22e658:	ff 
            const ldig = @floatToInt(i32, lo);
  22e659:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
  22e65f:	89 45 8c             	mov    DWORD PTR [rbp-0x74],eax
            lo -= @intToFloat(f64, ldig);
  22e662:	c5 fb 10 5d b0       	vmovsd xmm3,QWORD PTR [rbp-0x50]
  22e667:	c5 db 2a 65 8c       	vcvtsi2sd xmm4,xmm4,DWORD PTR [rbp-0x74]
  22e66c:	c5 e3 5c dc          	vsubsd xmm3,xmm3,xmm4
  22e670:	c5 fb 11 5d b0       	vmovsd QWORD PTR [rbp-0x50],xmm3
            mid *= 10.0;
  22e675:	c5 eb 59 55 b8       	vmulsd xmm2,xmm2,QWORD PTR [rbp-0x48]
  22e67a:	c5 fb 11 55 b8       	vmovsd QWORD PTR [rbp-0x48],xmm2
            const mdig = @floatToInt(i32, mid);
  22e67f:	c5 fb 10 55 b8       	vmovsd xmm2,QWORD PTR [rbp-0x48]
  22e684:	c5 fb 2c ca          	vcvttsd2si ecx,xmm2
  22e688:	c5 e3 2a d9          	vcvtsi2sd xmm3,xmm3,ecx
  22e68c:	c5 eb 5c d3          	vsubsd xmm2,xmm2,xmm3
  22e690:	c5 f9 2e ca          	vucomisd xmm1,xmm2
  22e694:	0f 97 c2             	seta   dl
  22e697:	c5 f9 2e d0          	vucomisd xmm2,xmm0
  22e69b:	40 0f 97 c6          	seta   sil
  22e69f:	40 20 f2             	and    dl,sil
  22e6a2:	f6 c2 01             	test   dl,0x1
  22e6a5:	89 8d c4 fe ff ff    	mov    DWORD PTR [rbp-0x13c],ecx
  22e6ab:	75 12                	jne    22e6bf <errolFixed+0x4cf>
  22e6ad:	eb 7e                	jmp    22e72d <errolFixed+0x53d>
  22e6af:	48 8d 3d 2a 54 01 00 	lea    rdi,[rip+0x1542a]        # 243ae0 <__unnamed_227>
  22e6b6:	31 c0                	xor    eax,eax
  22e6b8:	89 c6                	mov    esi,eax
            const ldig = @floatToInt(i32, lo);
  22e6ba:	e8 41 cf fd ff       	call   20b600 <panic>
  22e6bf:	c5 fb 10 05 49 25 fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd2549]        # 200c10 <__unnamed_186+0x10>
  22e6c6:	ff 
  22e6c7:	c5 fb 10 0d 29 25 fd 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffd2529]        # 200bf8 <__unnamed_187+0x8>
  22e6ce:	ff 
  22e6cf:	c5 fb 10 15 11 25 fd 	vmovsd xmm2,QWORD PTR [rip+0xfffffffffffd2511]        # 200be8 <__unnamed_185+0x18>
  22e6d6:	ff 
            const mdig = @floatToInt(i32, mid);
  22e6d7:	8b 85 c4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x13c]
  22e6dd:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
            mid -= @intToFloat(f64, mdig);
  22e6e0:	c5 fb 10 5d b8       	vmovsd xmm3,QWORD PTR [rbp-0x48]
  22e6e5:	c5 db 2a 65 88       	vcvtsi2sd xmm4,xmm4,DWORD PTR [rbp-0x78]
  22e6ea:	c5 e3 5c dc          	vsubsd xmm3,xmm3,xmm4
  22e6ee:	c5 fb 11 5d b8       	vmovsd QWORD PTR [rbp-0x48],xmm3
            hi *= 10.0;
  22e6f3:	c5 eb 59 55 a8       	vmulsd xmm2,xmm2,QWORD PTR [rbp-0x58]
  22e6f8:	c5 fb 11 55 a8       	vmovsd QWORD PTR [rbp-0x58],xmm2
            const hdig = @floatToInt(i32, hi);
  22e6fd:	c5 fb 10 55 a8       	vmovsd xmm2,QWORD PTR [rbp-0x58]
  22e702:	c5 fb 2c ca          	vcvttsd2si ecx,xmm2
  22e706:	c5 e3 2a d9          	vcvtsi2sd xmm3,xmm3,ecx
  22e70a:	c5 eb 5c d3          	vsubsd xmm2,xmm2,xmm3
  22e70e:	c5 f9 2e ca          	vucomisd xmm1,xmm2
  22e712:	0f 97 c2             	seta   dl
  22e715:	c5 f9 2e d0          	vucomisd xmm2,xmm0
  22e719:	40 0f 97 c6          	seta   sil
  22e71d:	40 20 f2             	and    dl,sil
  22e720:	f6 c2 01             	test   dl,0x1
  22e723:	89 8d c0 fe ff ff    	mov    DWORD PTR [rbp-0x140],ecx
  22e729:	75 12                	jne    22e73d <errolFixed+0x54d>
  22e72b:	eb 46                	jmp    22e773 <errolFixed+0x583>
  22e72d:	48 8d 3d ac 53 01 00 	lea    rdi,[rip+0x153ac]        # 243ae0 <__unnamed_227>
  22e734:	31 c0                	xor    eax,eax
  22e736:	89 c6                	mov    esi,eax
            const mdig = @floatToInt(i32, mid);
  22e738:	e8 c3 ce fd ff       	call   20b600 <panic>
            const hdig = @floatToInt(i32, hi);
  22e73d:	8b 85 c0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x140]
  22e743:	89 45 84             	mov    DWORD PTR [rbp-0x7c],eax
            hi -= @intToFloat(f64, hdig);
  22e746:	c5 fb 10 45 a8       	vmovsd xmm0,QWORD PTR [rbp-0x58]
  22e74b:	c5 f3 2a 4d 84       	vcvtsi2sd xmm1,xmm1,DWORD PTR [rbp-0x7c]
  22e750:	c5 fb 5c c1          	vsubsd xmm0,xmm0,xmm1
  22e754:	c5 fb 11 45 a8       	vmovsd QWORD PTR [rbp-0x58],xmm0
            buffer[j] = @intCast(u8, mdig + '0');
  22e759:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  22e75d:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  22e764:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  22e768:	48 89 8d b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rcx
  22e76f:	72 22                	jb     22e793 <errolFixed+0x5a3>
  22e771:	eb 10                	jmp    22e783 <errolFixed+0x593>
  22e773:	48 8d 3d 66 53 01 00 	lea    rdi,[rip+0x15366]        # 243ae0 <__unnamed_227>
  22e77a:	31 c0                	xor    eax,eax
  22e77c:	89 c6                	mov    esi,eax
            const hdig = @floatToInt(i32, hi);
  22e77e:	e8 7d ce fd ff       	call   20b600 <panic>
  22e783:	48 8d 3d 4e 4c 01 00 	lea    rdi,[rip+0x14c4e]        # 2433d8 <__unnamed_20>
  22e78a:	31 c0                	xor    eax,eax
  22e78c:	89 c6                	mov    esi,eax
            buffer[j] = @intCast(u8, mdig + '0');
  22e78e:	e8 6d ce fd ff       	call   20b600 <panic>
  22e793:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  22e79a:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
  22e7a1:	48 03 01             	add    rax,QWORD PTR [rcx]
  22e7a4:	8b 55 88             	mov    edx,DWORD PTR [rbp-0x78]
  22e7a7:	83 c2 30             	add    edx,0x30
  22e7aa:	40 0f 90 c6          	seto   sil
  22e7ae:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  22e7b5:	89 95 ac fe ff ff    	mov    DWORD PTR [rbp-0x154],edx
  22e7bb:	40 88 b5 ab fe ff ff 	mov    BYTE PTR [rbp-0x155],sil
  22e7c2:	70 02                	jo     22e7c6 <errolFixed+0x5d6>
  22e7c4:	eb 10                	jmp    22e7d6 <errolFixed+0x5e6>
  22e7c6:	48 8d 3d fb 49 01 00 	lea    rdi,[rip+0x149fb]        # 2431c8 <__unnamed_4>
  22e7cd:	31 c0                	xor    eax,eax
  22e7cf:	89 c6                	mov    esi,eax
  22e7d1:	e8 2a ce fd ff       	call   20b600 <panic>
  22e7d6:	8b 85 ac fe ff ff    	mov    eax,DWORD PTR [rbp-0x154]
  22e7dc:	83 f8 00             	cmp    eax,0x0
  22e7df:	7c 17                	jl     22e7f8 <errolFixed+0x608>
  22e7e1:	8b 85 ac fe ff ff    	mov    eax,DWORD PTR [rbp-0x154]
  22e7e7:	88 c1                	mov    cl,al
  22e7e9:	0f b6 d1             	movzx  edx,cl
  22e7ec:	39 d0                	cmp    eax,edx
  22e7ee:	88 8d aa fe ff ff    	mov    BYTE PTR [rbp-0x156],cl
  22e7f4:	74 12                	je     22e808 <errolFixed+0x618>
  22e7f6:	eb 3d                	jmp    22e835 <errolFixed+0x645>
  22e7f8:	48 8d 3d 89 4a 01 00 	lea    rdi,[rip+0x14a89]        # 243288 <__unnamed_3>
  22e7ff:	31 c0                	xor    eax,eax
  22e801:	89 c6                	mov    esi,eax
  22e803:	e8 f8 cd fd ff       	call   20b600 <panic>
  22e808:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  22e80f:	8a 8d aa fe ff ff    	mov    cl,BYTE PTR [rbp-0x156]
  22e815:	88 08                	mov    BYTE PTR [rax],cl
            j += 1;
  22e817:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
  22e81b:	48 83 c2 01          	add    rdx,0x1
  22e81f:	40 0f 92 c6          	setb   sil
  22e823:	48 89 95 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdx
  22e82a:	40 88 b5 9f fe ff ff 	mov    BYTE PTR [rbp-0x161],sil
  22e831:	72 12                	jb     22e845 <errolFixed+0x655>
  22e833:	eb 20                	jmp    22e855 <errolFixed+0x665>
  22e835:	48 8d 3d 4c 4c 01 00 	lea    rdi,[rip+0x14c4c]        # 243488 <__unnamed_22>
  22e83c:	31 c0                	xor    eax,eax
  22e83e:	89 c6                	mov    esi,eax
            buffer[j] = @intCast(u8, mdig + '0');
  22e840:	e8 bb cd fd ff       	call   20b600 <panic>
  22e845:	48 8d 3d 7c 49 01 00 	lea    rdi,[rip+0x1497c]        # 2431c8 <__unnamed_4>
  22e84c:	31 c0                	xor    eax,eax
  22e84e:	89 c6                	mov    esi,eax
            j += 1;
  22e850:	e8 ab cd fd ff       	call   20b600 <panic>
  22e855:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
  22e85c:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
            if (hdig != ldig or j > 50) break;
  22e860:	8b 4d 84             	mov    ecx,DWORD PTR [rbp-0x7c]
  22e863:	3b 4d 8c             	cmp    ecx,DWORD PTR [rbp-0x74]
  22e866:	0f 95 c2             	setne  dl
  22e869:	f6 c2 01             	test   dl,0x1
  22e86c:	88 95 43 ff ff ff    	mov    BYTE PTR [rbp-0xbd],dl
  22e872:	0f 85 06 fb ff ff    	jne    22e37e <errolFixed+0x18e>
  22e878:	e9 f3 fa ff ff       	jmp    22e370 <errolFixed+0x180>
  22e87d:	48 8d 3d 44 49 01 00 	lea    rdi,[rip+0x14944]        # 2431c8 <__unnamed_4>
  22e884:	31 c0                	xor    eax,eax
  22e886:	89 c6                	mov    esi,eax
            buffer[j - 1] += 1;
  22e888:	e8 73 cd fd ff       	call   20b600 <panic>
  22e88d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  22e894:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
  22e89b:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22e89f:	72 10                	jb     22e8b1 <errolFixed+0x6c1>
  22e8a1:	48 8d 3d 30 4b 01 00 	lea    rdi,[rip+0x14b30]        # 2433d8 <__unnamed_20>
  22e8a8:	31 c0                	xor    eax,eax
  22e8aa:	89 c6                	mov    esi,eax
  22e8ac:	e8 4f cd fd ff       	call   20b600 <panic>
  22e8b1:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  22e8b8:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22e8bb:	48 89 ca             	mov    rdx,rcx
  22e8be:	48 8b b5 38 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc8]
  22e8c5:	48 01 f2             	add    rdx,rsi
  22e8c8:	40 8a 3c 31          	mov    dil,BYTE PTR [rcx+rsi*1]
  22e8cc:	40 80 c7 01          	add    dil,0x1
  22e8d0:	41 0f 92 c0          	setb   r8b
  22e8d4:	41 f6 c0 01          	test   r8b,0x1
  22e8d8:	48 89 95 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rdx
  22e8df:	40 88 bd 8f fe ff ff 	mov    BYTE PTR [rbp-0x171],dil
  22e8e6:	75 02                	jne    22e8ea <errolFixed+0x6fa>
  22e8e8:	eb 10                	jmp    22e8fa <errolFixed+0x70a>
  22e8ea:	48 8d 3d d7 48 01 00 	lea    rdi,[rip+0x148d7]        # 2431c8 <__unnamed_4>
  22e8f1:	31 c0                	xor    eax,eax
  22e8f3:	89 c6                	mov    esi,eax
  22e8f5:	e8 06 cd fd ff       	call   20b600 <panic>
  22e8fa:	48 8b 85 90 fe ff ff 	mov    rax,QWORD PTR [rbp-0x170]
  22e901:	8a 8d 8f fe ff ff    	mov    cl,BYTE PTR [rbp-0x171]
  22e907:	88 08                	mov    BYTE PTR [rax],cl
        if (mid > 0.5) {
  22e909:	e9 34 fb ff ff       	jmp    22e442 <errolFixed+0x252>
  22e90e:	48 8d 3d b3 48 01 00 	lea    rdi,[rip+0x148b3]        # 2431c8 <__unnamed_4>
  22e915:	31 c0                	xor    eax,eax
  22e917:	89 c6                	mov    esi,eax
        } else if ((mid == 0.5) and (buffer[j - 1] & 0x1) != 0) {
  22e919:	e8 e2 cc fd ff       	call   20b600 <panic>
  22e91e:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  22e925:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
  22e92c:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22e930:	72 10                	jb     22e942 <errolFixed+0x752>
  22e932:	48 8d 3d 9f 4a 01 00 	lea    rdi,[rip+0x14a9f]        # 2433d8 <__unnamed_20>
  22e939:	31 c0                	xor    eax,eax
  22e93b:	89 c6                	mov    esi,eax
  22e93d:	e8 be cc fd ff       	call   20b600 <panic>
  22e942:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  22e949:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22e94c:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
  22e953:	40 8a 34 11          	mov    sil,BYTE PTR [rcx+rdx*1]
  22e957:	40 80 e6 01          	and    sil,0x1
  22e95b:	40 80 fe 00          	cmp    sil,0x0
  22e95f:	40 0f 95 c6          	setne  sil
  22e963:	40 88 b5 36 ff ff ff 	mov    BYTE PTR [rbp-0xca],sil
  22e96a:	e9 a0 fa ff ff       	jmp    22e40f <errolFixed+0x21f>
  22e96f:	48 8d 3d 52 48 01 00 	lea    rdi,[rip+0x14852]        # 2431c8 <__unnamed_4>
  22e976:	31 c0                	xor    eax,eax
  22e978:	89 c6                	mov    esi,eax
            buffer[j - 1] += 1;
  22e97a:	e8 81 cc fd ff       	call   20b600 <panic>
  22e97f:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  22e986:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
  22e98d:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22e991:	72 10                	jb     22e9a3 <errolFixed+0x7b3>
  22e993:	48 8d 3d 3e 4a 01 00 	lea    rdi,[rip+0x14a3e]        # 2433d8 <__unnamed_20>
  22e99a:	31 c0                	xor    eax,eax
  22e99c:	89 c6                	mov    esi,eax
  22e99e:	e8 5d cc fd ff       	call   20b600 <panic>
  22e9a3:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  22e9aa:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22e9ad:	48 89 ca             	mov    rdx,rcx
  22e9b0:	48 8b b5 18 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe8]
  22e9b7:	48 01 f2             	add    rdx,rsi
  22e9ba:	40 8a 3c 31          	mov    dil,BYTE PTR [rcx+rsi*1]
  22e9be:	40 80 c7 01          	add    dil,0x1
  22e9c2:	41 0f 92 c0          	setb   r8b
  22e9c6:	41 f6 c0 01          	test   r8b,0x1
  22e9ca:	48 89 95 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rdx
  22e9d1:	40 88 bd 7f fe ff ff 	mov    BYTE PTR [rbp-0x181],dil
  22e9d8:	75 02                	jne    22e9dc <errolFixed+0x7ec>
  22e9da:	eb 10                	jmp    22e9ec <errolFixed+0x7fc>
  22e9dc:	48 8d 3d e5 47 01 00 	lea    rdi,[rip+0x147e5]        # 2431c8 <__unnamed_4>
  22e9e3:	31 c0                	xor    eax,eax
  22e9e5:	89 c6                	mov    esi,eax
  22e9e7:	e8 14 cc fd ff       	call   20b600 <panic>
  22e9ec:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
  22e9f3:	8a 8d 7f fe ff ff    	mov    cl,BYTE PTR [rbp-0x181]
  22e9f9:	88 08                	mov    BYTE PTR [rax],cl
        } else if ((mid == 0.5) and (buffer[j - 1] & 0x1) != 0) {
  22e9fb:	e9 40 fa ff ff       	jmp    22e440 <errolFixed+0x250>
  22ea00:	48 8d 3d c1 47 01 00 	lea    rdi,[rip+0x147c1]        # 2431c8 <__unnamed_4>
  22ea07:	31 c0                	xor    eax,eax
  22ea09:	89 c6                	mov    esi,eax
        while (buffer[j - 1] == '0') {
  22ea0b:	e8 f0 cb fd ff       	call   20b600 <panic>
  22ea10:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  22ea17:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
  22ea1e:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22ea22:	72 10                	jb     22ea34 <errolFixed+0x844>
  22ea24:	48 8d 3d ad 49 01 00 	lea    rdi,[rip+0x149ad]        # 2433d8 <__unnamed_20>
  22ea2b:	31 c0                	xor    eax,eax
  22ea2d:	89 c6                	mov    esi,eax
  22ea2f:	e8 cc cb fd ff       	call   20b600 <panic>
  22ea34:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  22ea3b:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22ea3e:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
  22ea45:	80 3c 11 30          	cmp    BYTE PTR [rcx+rdx*1],0x30
  22ea49:	0f 84 1a fa ff ff    	je     22e469 <errolFixed+0x279>
  22ea4f:	e9 38 fa ff ff       	jmp    22e48c <errolFixed+0x29c>
  22ea54:	48 8d 3d 6d 47 01 00 	lea    rdi,[rip+0x1476d]        # 2431c8 <__unnamed_4>
  22ea5b:	31 c0                	xor    eax,eax
  22ea5d:	89 c6                	mov    esi,eax
            buffer[j - 1] = 0;
  22ea5f:	e8 9c cb fd ff       	call   20b600 <panic>
  22ea64:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  22ea6b:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
  22ea72:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22ea76:	72 10                	jb     22ea88 <errolFixed+0x898>
  22ea78:	48 8d 3d 59 49 01 00 	lea    rdi,[rip+0x14959]        # 2433d8 <__unnamed_20>
  22ea7f:	31 c0                	xor    eax,eax
  22ea81:	89 c6                	mov    esi,eax
  22ea83:	e8 78 cb fd ff       	call   20b600 <panic>
  22ea88:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  22ea8f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22ea92:	48 8b 95 f8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x108]
  22ea99:	c6 04 11 00          	mov    BYTE PTR [rcx+rdx*1],0x0
            j -= 1;
  22ea9d:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  22eaa1:	48 83 e9 01          	sub    rcx,0x1
  22eaa5:	40 0f 92 c6          	setb   sil
  22eaa9:	48 89 8d 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rcx
  22eab0:	40 88 b5 6f fe ff ff 	mov    BYTE PTR [rbp-0x191],sil
  22eab7:	72 02                	jb     22eabb <errolFixed+0x8cb>
  22eab9:	eb 10                	jmp    22eacb <errolFixed+0x8db>
  22eabb:	48 8d 3d 06 47 01 00 	lea    rdi,[rip+0x14706]        # 2431c8 <__unnamed_4>
  22eac2:	31 c0                	xor    eax,eax
  22eac4:	89 c6                	mov    esi,eax
  22eac6:	e8 35 cb fd ff       	call   20b600 <panic>
  22eacb:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  22ead2:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
        while (buffer[j - 1] == '0') {
  22ead6:	e9 6b f9 ff ff       	jmp    22e446 <errolFixed+0x256>
  22eadb:	48 8d 3d f6 48 01 00 	lea    rdi,[rip+0x148f6]        # 2433d8 <__unnamed_20>
  22eae2:	31 c0                	xor    eax,eax
  22eae4:	89 c6                	mov    esi,eax
    buffer[j] = 0;
  22eae6:	e8 15 cb fd ff       	call   20b600 <panic>
  22eaeb:	31 c0                	xor    eax,eax
  22eaed:	89 c1                	mov    ecx,eax
  22eaef:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  22eaf6:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
  22eaf9:	48 8b bd e8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x118]
  22eb00:	c6 04 3e 00          	mov    BYTE PTR [rsi+rdi*1],0x0

    return FloatDecimal{
        .digits = buffer[0..j],
  22eb04:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
  22eb08:	4c 8b 42 08          	mov    r8,QWORD PTR [rdx+0x8]
  22eb0c:	48 39 f1             	cmp    rcx,rsi
  22eb0f:	4c 89 85 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],r8
  22eb16:	48 89 b5 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rsi
  22eb1d:	76 10                	jbe    22eb2f <errolFixed+0x93f>
  22eb1f:	48 8d 3d b2 48 01 00 	lea    rdi,[rip+0x148b2]        # 2433d8 <__unnamed_20>
  22eb26:	31 c0                	xor    eax,eax
  22eb28:	89 c6                	mov    esi,eax
  22eb2a:	e8 d1 ca fd ff       	call   20b600 <panic>
  22eb2f:	48 8b 85 58 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a8]
  22eb36:	48 8b 8d 60 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1a0]
  22eb3d:	48 39 c8             	cmp    rax,rcx
  22eb40:	76 10                	jbe    22eb52 <errolFixed+0x962>
  22eb42:	48 8d 3d 8f 48 01 00 	lea    rdi,[rip+0x1488f]        # 2433d8 <__unnamed_20>
  22eb49:	31 c0                	xor    eax,eax
  22eb4b:	89 c6                	mov    esi,eax
  22eb4d:	e8 ae ca fd ff       	call   20b600 <panic>
  22eb52:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  22eb59:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  22eb5c:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  22eb60:	48 8b 8d 58 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1a8]
  22eb67:	48 83 e9 00          	sub    rcx,0x0
  22eb6b:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
        .exp = exp,
  22eb6f:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
    return FloatDecimal{
  22eb72:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  22eb76:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  22eb7a:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  22eb7e:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  22eb82:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
  22eb85:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  22eb89:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
  22eb90:	48 89 0e             	mov    QWORD PTR [rsi],rcx
  22eb93:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  22eb97:	48 89 4e 08          	mov    QWORD PTR [rsi+0x8],rcx
  22eb9b:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  22eb9f:	48 89 4e 10          	mov    QWORD PTR [rsi+0x10],rcx
  22eba3:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  22ebaa:	48 81 c4 b0 01 00 00 	add    rsp,0x1b0
  22ebb1:	5d                   	pop    rbp
  22ebb2:	c3                   	ret    
  22ebb3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22ebba:	84 00 00 00 00 00 

000000000022ebc0 <frexp>:
    };
}
pub const frexp32_result = frexp_result(f32);
pub const frexp64_result = frexp_result(f64);

pub fn frexp(x: var) frexp_result(@typeOf(x)) {
  22ebc0:	55                   	push   rbp
  22ebc1:	48 89 e5             	mov    rbp,rsp
  22ebc4:	48 83 ec 30          	sub    rsp,0x30
  22ebc8:	48 89 f8             	mov    rax,rdi
  22ebcb:	48 8d 4d f0          	lea    rcx,[rbp-0x10]
  22ebcf:	c5 fb 11 45 e8       	vmovsd QWORD PTR [rbp-0x18],xmm0
    const T = @typeOf(x);
    return switch (T) {
        f32 => frexp32(x),
        f64 => frexp64(x),
  22ebd4:	c5 fb 10 45 e8       	vmovsd xmm0,QWORD PTR [rbp-0x18]
  22ebd9:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  22ebdd:	48 89 cf             	mov    rdi,rcx
  22ebe0:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  22ebe4:	e8 27 43 00 00       	call   232f10 <frexp64>
    return switch (T) {
  22ebe9:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22ebed:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  22ebf1:	48 89 01             	mov    QWORD PTR [rcx],rax
  22ebf4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  22ebf8:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  22ebfc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  22ec00:	48 83 c4 30          	add    rsp,0x30
  22ec04:	5d                   	pop    rbp
  22ec05:	c3                   	ret    
  22ec06:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  22ec0d:	00 00 00 

000000000022ec10 <floor.0>:
const builtin = @import("builtin");
const assert = std.debug.assert;
const std = @import("../index.zig");
const math = std.math;

pub fn floor(x: var) @typeOf(x) {
  22ec10:	55                   	push   rbp
  22ec11:	48 89 e5             	mov    rbp,rsp
  22ec14:	48 83 ec 10          	sub    rsp,0x10
  22ec18:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    const T = @typeOf(x);
    return switch (T) {
        f16 => floor16(x),
        f32 => floor32(x),
        f64 => floor64(x),
  22ec1d:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  22ec22:	e8 f9 44 00 00       	call   233120 <floor64>
    return switch (T) {
  22ec27:	48 83 c4 10          	add    rsp,0x10
  22ec2b:	5d                   	pop    rbp
  22ec2c:	c3                   	ret    
  22ec2d:	0f 1f 00             	nop    DWORD PTR [rax]

000000000022ec30 <hpProd>:
fn hpProd(in: *const HP, val: f64) HP {
  22ec30:	55                   	push   rbp
  22ec31:	48 89 e5             	mov    rbp,rsp
  22ec34:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  22ec3b:	48 89 f8             	mov    rax,rdi
  22ec3e:	48 8d 4d d8          	lea    rcx,[rbp-0x28]
  22ec42:	48 8d 55 d0          	lea    rdx,[rbp-0x30]
  22ec46:	41 b8 aa 00 00 00    	mov    r8d,0xaa
  22ec4c:	41 b9 08 00 00 00    	mov    r9d,0x8
  22ec52:	45 89 ca             	mov    r10d,r9d
  22ec55:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
  22ec59:	c5 fb 11 45 e0       	vmovsd QWORD PTR [rbp-0x20],xmm0
    var hi: f64 = undefined;
  22ec5e:	48 89 ce             	mov    rsi,rcx
  22ec61:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  22ec65:	48 89 f7             	mov    rdi,rsi
  22ec68:	44 89 c6             	mov    esi,r8d
  22ec6b:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  22ec6f:	4c 89 d2             	mov    rdx,r10
  22ec72:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  22ec76:	44 89 45 94          	mov    DWORD PTR [rbp-0x6c],r8d
  22ec7a:	4c 89 55 88          	mov    QWORD PTR [rbp-0x78],r10
  22ec7e:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
  22ec82:	e8 c9 5b 00 00       	call   234850 <memset>
    var lo: f64 = undefined;
  22ec87:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22ec8b:	48 89 c7             	mov    rdi,rax
  22ec8e:	8b 75 94             	mov    esi,DWORD PTR [rbp-0x6c]
  22ec91:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
  22ec95:	e8 b6 5b 00 00       	call   234850 <memset>
    split(in.val, &hi, &lo);
  22ec9a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22ec9e:	c5 fb 10 00          	vmovsd xmm0,QWORD PTR [rax]
  22eca2:	48 8b 7d 80          	mov    rdi,QWORD PTR [rbp-0x80]
  22eca6:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  22ecaa:	e8 c1 45 00 00       	call   233270 <split>
  22ecaf:	48 8d 45 c8          	lea    rax,[rbp-0x38]
  22ecb3:	48 8d 4d c0          	lea    rcx,[rbp-0x40]
  22ecb7:	41 b8 aa 00 00 00    	mov    r8d,0xaa
  22ecbd:	41 b9 08 00 00 00    	mov    r9d,0x8
  22ecc3:	44 89 ca             	mov    edx,r9d
    var hi2: f64 = undefined;
  22ecc6:	48 89 c6             	mov    rsi,rax
  22ecc9:	48 89 f7             	mov    rdi,rsi
  22eccc:	44 89 c6             	mov    esi,r8d
  22eccf:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
  22ecd6:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  22ecdd:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
  22ece4:	44 89 85 64 ff ff ff 	mov    DWORD PTR [rbp-0x9c],r8d
  22eceb:	e8 60 5b 00 00       	call   234850 <memset>
    var lo2: f64 = undefined;
  22ecf0:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  22ecf7:	48 89 c7             	mov    rdi,rax
  22ecfa:	8b b5 64 ff ff ff    	mov    esi,DWORD PTR [rbp-0x9c]
  22ed00:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
  22ed07:	e8 44 5b 00 00       	call   234850 <memset>
    split(val, &hi2, &lo2);
  22ed0c:	c5 fb 10 45 e0       	vmovsd xmm0,QWORD PTR [rbp-0x20]
  22ed11:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
  22ed18:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
  22ed1f:	e8 4c 45 00 00       	call   233270 <split>
    const p = in.val * val;
  22ed24:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22ed28:	c5 fb 10 00          	vmovsd xmm0,QWORD PTR [rax]
  22ed2c:	c5 fb 59 45 e0       	vmulsd xmm0,xmm0,QWORD PTR [rbp-0x20]
  22ed31:	c5 fb 11 45 b8       	vmovsd QWORD PTR [rbp-0x48],xmm0
    const e = ((hi * hi2 - p) + lo * hi2 + hi * lo2) + lo * lo2;
  22ed36:	c5 fb 10 45 d8       	vmovsd xmm0,QWORD PTR [rbp-0x28]
  22ed3b:	c5 fb 59 45 c8       	vmulsd xmm0,xmm0,QWORD PTR [rbp-0x38]
  22ed40:	c5 fb 5c 45 b8       	vsubsd xmm0,xmm0,QWORD PTR [rbp-0x48]
  22ed45:	c5 fb 10 4d d0       	vmovsd xmm1,QWORD PTR [rbp-0x30]
  22ed4a:	c5 f3 59 4d c8       	vmulsd xmm1,xmm1,QWORD PTR [rbp-0x38]
  22ed4f:	c5 fb 58 c1          	vaddsd xmm0,xmm0,xmm1
  22ed53:	c5 fb 10 4d d8       	vmovsd xmm1,QWORD PTR [rbp-0x28]
  22ed58:	c5 f3 59 4d c0       	vmulsd xmm1,xmm1,QWORD PTR [rbp-0x40]
  22ed5d:	c5 fb 58 c1          	vaddsd xmm0,xmm0,xmm1
  22ed61:	c5 fb 10 4d d0       	vmovsd xmm1,QWORD PTR [rbp-0x30]
  22ed66:	c5 f3 59 4d c0       	vmulsd xmm1,xmm1,QWORD PTR [rbp-0x40]
  22ed6b:	c5 fb 58 c1          	vaddsd xmm0,xmm0,xmm1
  22ed6f:	c5 fb 11 45 b0       	vmovsd QWORD PTR [rbp-0x50],xmm0
        .val = p,
  22ed74:	c5 fb 10 45 b8       	vmovsd xmm0,QWORD PTR [rbp-0x48]
        .off = in.off * val + e,
  22ed79:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22ed7d:	c5 fb 10 48 08       	vmovsd xmm1,QWORD PTR [rax+0x8]
  22ed82:	c5 f3 59 4d e0       	vmulsd xmm1,xmm1,QWORD PTR [rbp-0x20]
  22ed87:	c5 f3 58 4d b0       	vaddsd xmm1,xmm1,QWORD PTR [rbp-0x50]
    return HP{
  22ed8c:	c5 fb 11 45 f0       	vmovsd QWORD PTR [rbp-0x10],xmm0
  22ed91:	c5 fb 11 4d f8       	vmovsd QWORD PTR [rbp-0x8],xmm1
  22ed96:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22ed9a:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  22ed9e:	48 89 01             	mov    QWORD PTR [rcx],rax
  22eda1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  22eda5:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  22eda9:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  22edad:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  22edb4:	5d                   	pop    rbp
  22edb5:	c3                   	ret    
  22edb6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  22edbd:	00 00 00 

000000000022edc0 <hpDiv10>:
fn hpDiv10(hp: *HP) void {
  22edc0:	55                   	push   rbp
  22edc1:	48 89 e5             	mov    rbp,rsp
  22edc4:	48 83 ec 50          	sub    rsp,0x50
  22edc8:	31 c0                	xor    eax,eax
  22edca:	88 c1                	mov    cl,al
  22edcc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    var val = hp.val;
  22edd0:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  22edd4:	c5 fb 10 07          	vmovsd xmm0,QWORD PTR [rdi]
  22edd8:	c5 fb 11 45 f0       	vmovsd QWORD PTR [rbp-0x10],xmm0
    hp.val /= 10.0;
  22eddd:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  22ede1:	c5 fb 10 07          	vmovsd xmm0,QWORD PTR [rdi]
  22ede5:	f6 c1 01             	test   cl,0x1
  22ede8:	c5 fb 11 45 e8       	vmovsd QWORD PTR [rbp-0x18],xmm0
  22eded:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  22edf1:	75 41                	jne    22ee34 <hpDiv10+0x74>
  22edf3:	31 c0                	xor    eax,eax
  22edf5:	88 c1                	mov    cl,al
  22edf7:	c5 fb 10 05 e9 1d fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd1de9]        # 200be8 <__unnamed_185+0x18>
  22edfe:	ff 
  22edff:	c5 fb 10 4d e8       	vmovsd xmm1,QWORD PTR [rbp-0x18]
  22ee04:	c5 f3 5e c0          	vdivsd xmm0,xmm1,xmm0
  22ee08:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  22ee0c:	c5 fb 11 02          	vmovsd QWORD PTR [rdx],xmm0
    hp.off /= 10.0;
  22ee10:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  22ee14:	48 89 f7             	mov    rdi,rsi
  22ee17:	48 83 c7 08          	add    rdi,0x8
  22ee1b:	c5 fb 10 46 08       	vmovsd xmm0,QWORD PTR [rsi+0x8]
  22ee20:	f6 c1 01             	test   cl,0x1
  22ee23:	c5 fb 11 45 d8       	vmovsd QWORD PTR [rbp-0x28],xmm0
  22ee28:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
  22ee2c:	0f 85 95 00 00 00    	jne    22eec7 <hpDiv10+0x107>
  22ee32:	eb 10                	jmp    22ee44 <hpDiv10+0x84>
  22ee34:	48 8d 3d 05 44 01 00 	lea    rdi,[rip+0x14405]        # 243240 <__unnamed_7>
  22ee3b:	31 c0                	xor    eax,eax
  22ee3d:	89 c6                	mov    esi,eax
    hp.val /= 10.0;
  22ee3f:	e8 bc c7 fd ff       	call   20b600 <panic>
  22ee44:	31 c0                	xor    eax,eax
  22ee46:	88 c1                	mov    cl,al
  22ee48:	c5 fb 10 05 90 1d fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd1d90]        # 200be0 <__unnamed_185+0x10>
  22ee4f:	ff 
  22ee50:	c5 fb 10 0d 38 1e fd 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffd1e38]        # 200c90 <__unnamed_192+0x8>
  22ee57:	ff 
  22ee58:	c5 fb 10 15 88 1d fd 	vmovsd xmm2,QWORD PTR [rip+0xfffffffffffd1d88]        # 200be8 <__unnamed_185+0x18>
  22ee5f:	ff 
    hp.off /= 10.0;
  22ee60:	c5 fb 10 5d d8       	vmovsd xmm3,QWORD PTR [rbp-0x28]
  22ee65:	c5 e3 5e d2          	vdivsd xmm2,xmm3,xmm2
  22ee69:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  22ee6d:	c5 fb 11 12          	vmovsd QWORD PTR [rdx],xmm2
    val -= hp.val * 8.0;
  22ee71:	c5 fb 10 55 f0       	vmovsd xmm2,QWORD PTR [rbp-0x10]
  22ee76:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  22ee7a:	c5 f3 59 0e          	vmulsd xmm1,xmm1,QWORD PTR [rsi]
  22ee7e:	c5 eb 5c c9          	vsubsd xmm1,xmm2,xmm1
  22ee82:	c5 fb 11 4d f0       	vmovsd QWORD PTR [rbp-0x10],xmm1
    val -= hp.val * 2.0;
  22ee87:	c5 fb 10 4d f0       	vmovsd xmm1,QWORD PTR [rbp-0x10]
  22ee8c:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  22ee90:	c5 fb 59 06          	vmulsd xmm0,xmm0,QWORD PTR [rsi]
  22ee94:	c5 f3 5c c0          	vsubsd xmm0,xmm1,xmm0
  22ee98:	c5 fb 11 45 f0       	vmovsd QWORD PTR [rbp-0x10],xmm0
    hp.off += val / 10.0;
  22ee9d:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  22eea1:	48 89 f7             	mov    rdi,rsi
  22eea4:	48 83 c7 08          	add    rdi,0x8
  22eea8:	c5 fb 10 46 08       	vmovsd xmm0,QWORD PTR [rsi+0x8]
  22eead:	c5 fb 10 4d f0       	vmovsd xmm1,QWORD PTR [rbp-0x10]
  22eeb2:	f6 c1 01             	test   cl,0x1
  22eeb5:	c5 fb 11 4d c8       	vmovsd QWORD PTR [rbp-0x38],xmm1
  22eeba:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
  22eebe:	c5 fb 11 45 b8       	vmovsd QWORD PTR [rbp-0x48],xmm0
  22eec3:	75 43                	jne    22ef08 <hpDiv10+0x148>
  22eec5:	eb 10                	jmp    22eed7 <hpDiv10+0x117>
  22eec7:	48 8d 3d 72 43 01 00 	lea    rdi,[rip+0x14372]        # 243240 <__unnamed_7>
  22eece:	31 c0                	xor    eax,eax
  22eed0:	89 c6                	mov    esi,eax
    hp.off /= 10.0;
  22eed2:	e8 29 c7 fd ff       	call   20b600 <panic>
  22eed7:	c5 fb 10 05 09 1d fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd1d09]        # 200be8 <__unnamed_185+0x18>
  22eede:	ff 
    hp.off += val / 10.0;
  22eedf:	c5 fb 10 4d c8       	vmovsd xmm1,QWORD PTR [rbp-0x38]
  22eee4:	c5 f3 5e c0          	vdivsd xmm0,xmm1,xmm0
  22eee8:	c5 fb 10 55 b8       	vmovsd xmm2,QWORD PTR [rbp-0x48]
  22eeed:	c5 eb 58 c0          	vaddsd xmm0,xmm2,xmm0
  22eef1:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  22eef5:	c5 fb 11 00          	vmovsd QWORD PTR [rax],xmm0
    hpNormalize(hp);
  22eef9:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  22eefd:	e8 fe 00 00 00       	call   22f000 <hpNormalize>
fn hpDiv10(hp: *HP) void {
  22ef02:	48 83 c4 50          	add    rsp,0x50
  22ef06:	5d                   	pop    rbp
  22ef07:	c3                   	ret    
  22ef08:	48 8d 3d 31 43 01 00 	lea    rdi,[rip+0x14331]        # 243240 <__unnamed_7>
  22ef0f:	31 c0                	xor    eax,eax
  22ef11:	89 c6                	mov    esi,eax
    hp.off += val / 10.0;
  22ef13:	e8 e8 c6 fd ff       	call   20b600 <panic>
  22ef18:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  22ef1f:	00 

000000000022ef20 <hpMul10>:
fn hpMul10(hp: *HP) void {
  22ef20:	55                   	push   rbp
  22ef21:	48 89 e5             	mov    rbp,rsp
  22ef24:	48 83 ec 20          	sub    rsp,0x20
  22ef28:	c5 fb 10 05 b0 1c fd 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffd1cb0]        # 200be0 <__unnamed_185+0x10>
  22ef2f:	ff 
  22ef30:	c5 fb 10 0d 58 1d fd 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffd1d58]        # 200c90 <__unnamed_192+0x8>
  22ef37:	ff 
  22ef38:	c5 fb 10 15 a8 1c fd 	vmovsd xmm2,QWORD PTR [rip+0xfffffffffffd1ca8]        # 200be8 <__unnamed_185+0x18>
  22ef3f:	ff 
  22ef40:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    const val = hp.val;
  22ef44:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  22ef48:	c5 fb 10 1f          	vmovsd xmm3,QWORD PTR [rdi]
  22ef4c:	c5 fb 11 5d f0       	vmovsd QWORD PTR [rbp-0x10],xmm3
    hp.val *= 10.0;
  22ef51:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  22ef55:	c5 eb 59 1f          	vmulsd xmm3,xmm2,QWORD PTR [rdi]
  22ef59:	c5 fb 11 1f          	vmovsd QWORD PTR [rdi],xmm3
    hp.off *= 10.0;
  22ef5d:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  22ef61:	c5 eb 59 57 08       	vmulsd xmm2,xmm2,QWORD PTR [rdi+0x8]
  22ef66:	c5 fb 11 57 08       	vmovsd QWORD PTR [rdi+0x8],xmm2
    var off = hp.val;
  22ef6b:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  22ef6f:	c5 fb 10 17          	vmovsd xmm2,QWORD PTR [rdi]
  22ef73:	c5 fb 11 55 e8       	vmovsd QWORD PTR [rbp-0x18],xmm2
    off -= val * 8.0;
  22ef78:	c5 fb 10 55 e8       	vmovsd xmm2,QWORD PTR [rbp-0x18]
  22ef7d:	c5 f3 59 4d f0       	vmulsd xmm1,xmm1,QWORD PTR [rbp-0x10]
  22ef82:	c5 eb 5c c9          	vsubsd xmm1,xmm2,xmm1
  22ef86:	c5 fb 11 4d e8       	vmovsd QWORD PTR [rbp-0x18],xmm1
    off -= val * 2.0;
  22ef8b:	c5 fb 10 4d e8       	vmovsd xmm1,QWORD PTR [rbp-0x18]
  22ef90:	c5 fb 59 45 f0       	vmulsd xmm0,xmm0,QWORD PTR [rbp-0x10]
  22ef95:	c5 f3 5c c0          	vsubsd xmm0,xmm1,xmm0
  22ef99:	c5 fb 11 45 e8       	vmovsd QWORD PTR [rbp-0x18],xmm0
    hp.off -= off;
  22ef9e:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  22efa2:	c5 fb 10 47 08       	vmovsd xmm0,QWORD PTR [rdi+0x8]
  22efa7:	c5 fb 5c 45 e8       	vsubsd xmm0,xmm0,QWORD PTR [rbp-0x18]
  22efac:	c5 fb 11 47 08       	vmovsd QWORD PTR [rdi+0x8],xmm0
    hpNormalize(hp);
  22efb1:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  22efb5:	e8 46 00 00 00       	call   22f000 <hpNormalize>
fn hpMul10(hp: *HP) void {
  22efba:	48 83 c4 20          	add    rsp,0x20
  22efbe:	5d                   	pop    rbp
  22efbf:	c3                   	ret    

000000000022efc0 <fpnext>:
    };
}

fn fpnext(val: f64) f64 {
  22efc0:	55                   	push   rbp
  22efc1:	48 89 e5             	mov    rbp,rsp
  22efc4:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    return @bitCast(f64, @bitCast(u64, val) +% 1);
  22efc9:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  22efce:	c4 e1 f9 7e c0       	vmovq  rax,xmm0
  22efd3:	48 83 c0 01          	add    rax,0x1
  22efd7:	c4 e1 f9 6e c0       	vmovq  xmm0,rax
  22efdc:	5d                   	pop    rbp
  22efdd:	c3                   	ret    
  22efde:	66 90                	xchg   ax,ax

000000000022efe0 <fpprev>:
}

fn fpprev(val: f64) f64 {
  22efe0:	55                   	push   rbp
  22efe1:	48 89 e5             	mov    rbp,rsp
  22efe4:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    return @bitCast(f64, @bitCast(u64, val) -% 1);
  22efe9:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  22efee:	c4 e1 f9 7e c0       	vmovq  rax,xmm0
  22eff3:	48 83 e8 01          	sub    rax,0x1
  22eff7:	c4 e1 f9 6e c0       	vmovq  xmm0,rax
  22effc:	5d                   	pop    rbp
  22effd:	c3                   	ret    
  22effe:	66 90                	xchg   ax,ax

000000000022f000 <hpNormalize>:
fn hpNormalize(hp: *HP) void {
  22f000:	55                   	push   rbp
  22f001:	48 89 e5             	mov    rbp,rsp
  22f004:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    const val = hp.val;
  22f008:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  22f00c:	c5 fb 10 07          	vmovsd xmm0,QWORD PTR [rdi]
  22f010:	c5 fb 11 45 f0       	vmovsd QWORD PTR [rbp-0x10],xmm0
    hp.val += hp.off;
  22f015:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  22f019:	c5 fb 10 07          	vmovsd xmm0,QWORD PTR [rdi]
  22f01d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  22f021:	c5 fb 58 40 08       	vaddsd xmm0,xmm0,QWORD PTR [rax+0x8]
  22f026:	c5 fb 11 07          	vmovsd QWORD PTR [rdi],xmm0
    hp.off += val - hp.val;
  22f02a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  22f02e:	c5 fb 10 40 08       	vmovsd xmm0,QWORD PTR [rax+0x8]
  22f033:	c5 fb 10 4d f0       	vmovsd xmm1,QWORD PTR [rbp-0x10]
  22f038:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  22f03c:	c5 f3 5c 0f          	vsubsd xmm1,xmm1,QWORD PTR [rdi]
  22f040:	c5 fb 58 c1          	vaddsd xmm0,xmm0,xmm1
  22f044:	c5 fb 11 40 08       	vmovsd QWORD PTR [rax+0x8],xmm0
fn hpNormalize(hp: *HP) void {
  22f049:	5d                   	pop    rbp
  22f04a:	c3                   	ret    
  22f04b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000022f050 <fpeint>:
    }

    return buf_index;
}

fn fpeint(from: f64) u128 {
  22f050:	55                   	push   rbp
  22f051:	48 89 e5             	mov    rbp,rsp
  22f054:	48 83 ec 20          	sub    rsp,0x20
  22f058:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    const bits = @bitCast(u64, from);
  22f05d:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  22f062:	c5 fb 11 45 f0       	vmovsd QWORD PTR [rbp-0x10],xmm0
    assert((bits & ((1 << 52) - 1)) == 0);
  22f067:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22f06b:	48 c1 e0 0c          	shl    rax,0xc
  22f06f:	48 85 c0             	test   rax,rax
  22f072:	0f 94 c1             	sete   cl
  22f075:	0f b6 f9             	movzx  edi,cl
  22f078:	e8 83 bf fd ff       	call   20b000 <assert>

    return u128(1) << @truncate(u7, (bits >> 52) -% 1023);
  22f07d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22f081:	48 c1 e8 34          	shr    rax,0x34
  22f085:	89 c7                	mov    edi,eax
  22f087:	81 c7 01 fc ff ff    	add    edi,0xfffffc01
  22f08d:	40 88 f9             	mov    cl,dil
  22f090:	bf 01 00 00 00       	mov    edi,0x1
  22f095:	89 f8                	mov    eax,edi
  22f097:	31 ff                	xor    edi,edi
  22f099:	89 fa                	mov    edx,edi
  22f09b:	88 4d ef             	mov    BYTE PTR [rbp-0x11],cl
  22f09e:	48 89 d6             	mov    rsi,rdx
  22f0a1:	48 0f a5 c6          	shld   rsi,rax,cl
  22f0a5:	8a 4d ef             	mov    cl,BYTE PTR [rbp-0x11]
  22f0a8:	41 88 c8             	mov    r8b,cl
  22f0ab:	c4 e2 b9 f7 c0       	shlx   rax,rax,r8
  22f0b0:	f6 c1 40             	test   cl,0x40
  22f0b3:	48 0f 45 f0          	cmovne rsi,rax
  22f0b7:	48 0f 45 c2          	cmovne rax,rdx
  22f0bb:	48 89 f2             	mov    rdx,rsi
  22f0be:	48 83 c4 20          	add    rsp,0x20
  22f0c2:	5d                   	pop    rbp
  22f0c3:	c3                   	ret    
  22f0c4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  22f0cb:	00 00 00 00 00 

000000000022f0d0 <mismatch10>:
/// from zero, find the first index where the digits in the two integers
/// divergent starting from the highest index.
///   @a: Integer a.
///   @b: Integer b.
///   &returns: An index within [0, 19).
fn mismatch10(a: u64, b: u64) i32 {
  22f0d0:	55                   	push   rbp
  22f0d1:	48 89 e5             	mov    rbp,rsp
  22f0d4:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  22f0db:	31 c0                	xor    eax,eax
  22f0dd:	88 c1                	mov    cl,al
  22f0df:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  22f0e3:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    const pow10 = 10000000000;
    const af = a / pow10;
  22f0e7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  22f0eb:	f6 c1 01             	test   cl,0x1
  22f0ee:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  22f0f2:	0f 85 94 00 00 00    	jne    22f18c <mismatch10+0xbc>
  22f0f8:	eb 5e                	jmp    22f158 <mismatch10+0x88>
    var i: i32 = 0;
    var a_copy = a;
    var b_copy = b;

    if (af != bf) {
        i = 10;
  22f0fa:	c7 45 dc 0a 00 00 00 	mov    DWORD PTR [rbp-0x24],0xa
        a_copy = af;
  22f101:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22f105:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
        b_copy = bf;
  22f109:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  22f10d:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
    if (af != bf) {
  22f111:	eb 02                	jmp    22f115 <mismatch10+0x45>
  22f113:	eb 00                	jmp    22f115 <mismatch10+0x45>
    }

    while (true) : (i += 1) {
  22f115:	eb 00                	jmp    22f117 <mismatch10+0x47>
  22f117:	eb 00                	jmp    22f119 <mismatch10+0x49>
  22f119:	31 c0                	xor    eax,eax
  22f11b:	88 c1                	mov    cl,al
        a_copy /= 10;
  22f11d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  22f121:	f6 c1 01             	test   cl,0x1
  22f124:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  22f128:	0f 85 fb 00 00 00    	jne    22f229 <mismatch10+0x159>
  22f12e:	e9 c5 00 00 00       	jmp    22f1f8 <mismatch10+0x128>
        b_copy /= 10;

        if (a_copy == b_copy) return i;
  22f133:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  22f136:	48 81 c4 80 00 00 00 	add    rsp,0x80
  22f13d:	5d                   	pop    rbp
  22f13e:	c3                   	ret    
    while (true) : (i += 1) {
  22f13f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  22f142:	ff c0                	inc    eax
  22f144:	0f 90 c1             	seto   cl
  22f147:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
  22f14a:	88 4d b3             	mov    BYTE PTR [rbp-0x4d],cl
  22f14d:	0f 80 1d 01 00 00    	jo     22f270 <mismatch10+0x1a0>
  22f153:	e9 28 01 00 00       	jmp    22f280 <mismatch10+0x1b0>
  22f158:	31 c0                	xor    eax,eax
  22f15a:	88 c1                	mov    cl,al
  22f15c:	48 ba 00 e4 0b 54 02 	movabs rdx,0x2540be400
  22f163:	00 00 00 
    const af = a / pow10;
  22f166:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  22f16a:	31 f6                	xor    esi,esi
  22f16c:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
  22f170:	89 f2                	mov    edx,esi
  22f172:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  22f176:	48 f7 f7             	div    rdi
  22f179:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    const bf = b / pow10;
  22f17d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22f181:	f6 c1 01             	test   cl,0x1
  22f184:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  22f188:	75 5e                	jne    22f1e8 <mismatch10+0x118>
  22f18a:	eb 10                	jmp    22f19c <mismatch10+0xcc>
  22f18c:	48 8d 3d ad 40 01 00 	lea    rdi,[rip+0x140ad]        # 243240 <__unnamed_7>
  22f193:	31 c0                	xor    eax,eax
  22f195:	89 c6                	mov    esi,eax
    const af = a / pow10;
  22f197:	e8 64 c4 fd ff       	call   20b600 <panic>
  22f19c:	48 b8 00 e4 0b 54 02 	movabs rax,0x2540be400
  22f1a3:	00 00 00 
    const bf = b / pow10;
  22f1a6:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  22f1aa:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  22f1ae:	48 89 c8             	mov    rax,rcx
  22f1b1:	31 d2                	xor    edx,edx
  22f1b3:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  22f1b7:	48 f7 f6             	div    rsi
  22f1ba:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    var i: i32 = 0;
  22f1be:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
    var a_copy = a;
  22f1c5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  22f1c9:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
    var b_copy = b;
  22f1cd:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22f1d1:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
    if (af != bf) {
  22f1d5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  22f1d9:	48 3b 45 e0          	cmp    rax,QWORD PTR [rbp-0x20]
  22f1dd:	0f 85 17 ff ff ff    	jne    22f0fa <mismatch10+0x2a>
  22f1e3:	e9 2b ff ff ff       	jmp    22f113 <mismatch10+0x43>
  22f1e8:	48 8d 3d 51 40 01 00 	lea    rdi,[rip+0x14051]        # 243240 <__unnamed_7>
  22f1ef:	31 c0                	xor    eax,eax
  22f1f1:	89 c6                	mov    esi,eax
    const bf = b / pow10;
  22f1f3:	e8 08 c4 fd ff       	call   20b600 <panic>
  22f1f8:	31 c0                	xor    eax,eax
  22f1fa:	88 c1                	mov    cl,al
  22f1fc:	b8 0a 00 00 00       	mov    eax,0xa
  22f201:	89 c2                	mov    edx,eax
        a_copy /= 10;
  22f203:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  22f207:	31 f6                	xor    esi,esi
  22f209:	48 89 55 90          	mov    QWORD PTR [rbp-0x70],rdx
  22f20d:	89 f2                	mov    edx,esi
  22f20f:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
  22f213:	48 f7 f7             	div    rdi
  22f216:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
        b_copy /= 10;
  22f21a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  22f21e:	f6 c1 01             	test   cl,0x1
  22f221:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  22f225:	75 39                	jne    22f260 <mismatch10+0x190>
  22f227:	eb 10                	jmp    22f239 <mismatch10+0x169>
  22f229:	48 8d 3d 10 40 01 00 	lea    rdi,[rip+0x14010]        # 243240 <__unnamed_7>
  22f230:	31 c0                	xor    eax,eax
  22f232:	89 c6                	mov    esi,eax
        a_copy /= 10;
  22f234:	e8 c7 c3 fd ff       	call   20b600 <panic>
  22f239:	b8 0a 00 00 00       	mov    eax,0xa
  22f23e:	89 c1                	mov    ecx,eax
        b_copy /= 10;
  22f240:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  22f244:	31 d2                	xor    edx,edx
  22f246:	48 f7 f1             	div    rcx
  22f249:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
        if (a_copy == b_copy) return i;
  22f24d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  22f251:	48 3b 45 c8          	cmp    rax,QWORD PTR [rbp-0x38]
  22f255:	0f 84 d8 fe ff ff    	je     22f133 <mismatch10+0x63>
  22f25b:	e9 df fe ff ff       	jmp    22f13f <mismatch10+0x6f>
  22f260:	48 8d 3d d9 3f 01 00 	lea    rdi,[rip+0x13fd9]        # 243240 <__unnamed_7>
  22f267:	31 c0                	xor    eax,eax
  22f269:	89 c6                	mov    esi,eax
        b_copy /= 10;
  22f26b:	e8 90 c3 fd ff       	call   20b600 <panic>
  22f270:	48 8d 3d 51 3f 01 00 	lea    rdi,[rip+0x13f51]        # 2431c8 <__unnamed_4>
  22f277:	31 c0                	xor    eax,eax
  22f279:	89 c6                	mov    esi,eax
    while (true) : (i += 1) {
  22f27b:	e8 80 c3 fd ff       	call   20b600 <panic>
  22f280:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
  22f283:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
  22f286:	e9 8c fe ff ff       	jmp    22f117 <mismatch10+0x47>
  22f28b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000022f290 <u64toa>:
fn u64toa(value_param: u64, buffer: []u8) usize {
  22f290:	55                   	push   rbp
  22f291:	48 89 e5             	mov    rbp,rsp
  22f294:	48 81 ec d0 0b 00 00 	sub    rsp,0xbd0
  22f29b:	48 b8 00 00 c1 6f f2 	movabs rax,0x2386f26fc10000
  22f2a2:	86 23 00 
  22f2a5:	48 b9 00 80 c6 a4 7e 	movabs rcx,0x38d7ea4c68000
  22f2ac:	8d 03 00 
  22f2af:	48 ba 00 40 7a 10 f3 	movabs rdx,0x5af3107a4000
  22f2b6:	5a 00 00 
  22f2b9:	49 b8 00 a0 72 4e 18 	movabs r8,0x9184e72a000
  22f2c0:	09 00 00 
  22f2c3:	49 b9 00 10 a5 d4 e8 	movabs r9,0xe8d4a51000
  22f2ca:	00 00 00 
  22f2cd:	49 ba 00 e8 76 48 17 	movabs r10,0x174876e800
  22f2d4:	00 00 00 
  22f2d7:	49 bb 00 e4 0b 54 02 	movabs r11,0x2540be400
  22f2de:	00 00 00 
  22f2e1:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    var value = value_param;
  22f2e5:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  22f2e9:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
    const kTen8: u64 = 100000000;
  22f2ed:	48 c7 45 e8 00 e1 f5 	mov    QWORD PTR [rbp-0x18],0x5f5e100
  22f2f4:	05 
    const kTen9: u64 = kTen8 * 10;
  22f2f5:	48 c7 45 e0 00 ca 9a 	mov    QWORD PTR [rbp-0x20],0x3b9aca00
  22f2fc:	3b 
    const kTen10: u64 = kTen8 * 100;
  22f2fd:	4c 89 5d d8          	mov    QWORD PTR [rbp-0x28],r11
    const kTen11: u64 = kTen8 * 1000;
  22f301:	4c 89 55 d0          	mov    QWORD PTR [rbp-0x30],r10
    const kTen12: u64 = kTen8 * 10000;
  22f305:	4c 89 4d c8          	mov    QWORD PTR [rbp-0x38],r9
    const kTen13: u64 = kTen8 * 100000;
  22f309:	4c 89 45 c0          	mov    QWORD PTR [rbp-0x40],r8
    const kTen14: u64 = kTen8 * 1000000;
  22f30d:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
    const kTen15: u64 = kTen8 * 10000000;
  22f311:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
    const kTen16: u64 = kTen8 * kTen8;
  22f315:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
    var buf_index: usize = 0;
  22f319:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
  22f320:	00 
    if (value < kTen8) {
  22f321:	48 81 7d f0 00 e1 f5 	cmp    QWORD PTR [rbp-0x10],0x5f5e100
  22f328:	05 
  22f329:	48 89 b5 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rsi
  22f330:	0f 83 8d 01 00 00    	jae    22f4c3 <u64toa+0x233>
        const v = @intCast(u32, value);
  22f336:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22f33a:	89 c1                	mov    ecx,eax
  22f33c:	89 ca                	mov    edx,ecx
  22f33e:	89 d6                	mov    esi,edx
  22f340:	48 39 f0             	cmp    rax,rsi
  22f343:	89 8d ec fe ff ff    	mov    DWORD PTR [rbp-0x114],ecx
  22f349:	0f 84 34 04 00 00    	je     22f783 <u64toa+0x4f3>
  22f34f:	e9 4a 04 00 00       	jmp    22f79e <u64toa+0x50e>
  22f354:	31 c0                	xor    eax,eax
  22f356:	88 c1                	mov    cl,al
            const d1: u32 = (v / 100) << 1;
  22f358:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
  22f35b:	f6 c1 01             	test   cl,0x1
  22f35e:	89 85 e8 fe ff ff    	mov    DWORD PTR [rbp-0x118],eax
  22f364:	0f 85 7b 04 00 00    	jne    22f7e5 <u64toa+0x555>
  22f36a:	e9 3f 04 00 00       	jmp    22f7ae <u64toa+0x51e>
                buffer[buf_index] = c_digits_lut[d1];
  22f36f:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f373:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f37a:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f37e:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
  22f385:	0f 82 bf 04 00 00    	jb     22f84a <u64toa+0x5ba>
  22f38b:	e9 aa 04 00 00       	jmp    22f83a <u64toa+0x5aa>
            if (v >= 1000) {
  22f390:	eb 00                	jmp    22f392 <u64toa+0x102>
            if (v >= 100) {
  22f392:	83 7d 9c 64          	cmp    DWORD PTR [rbp-0x64],0x64
  22f396:	72 21                	jb     22f3b9 <u64toa+0x129>
                buffer[buf_index] = c_digits_lut[d1 + 1];
  22f398:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f39c:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f3a3:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f3a7:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
  22f3ae:	0f 82 39 05 00 00    	jb     22f8ed <u64toa+0x65d>
  22f3b4:	e9 24 05 00 00       	jmp    22f8dd <u64toa+0x64d>
            if (v >= 100) {
  22f3b9:	eb 00                	jmp    22f3bb <u64toa+0x12b>
            if (v >= 10) {
  22f3bb:	83 7d 9c 0a          	cmp    DWORD PTR [rbp-0x64],0xa
  22f3bf:	72 21                	jb     22f3e2 <u64toa+0x152>
                buffer[buf_index] = c_digits_lut[d2];
  22f3c1:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f3c5:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f3cc:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f3d0:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
  22f3d7:	0f 82 e3 05 00 00    	jb     22f9c0 <u64toa+0x730>
  22f3dd:	e9 ce 05 00 00       	jmp    22f9b0 <u64toa+0x720>
            if (v >= 10) {
  22f3e2:	eb 00                	jmp    22f3e4 <u64toa+0x154>
            buffer[buf_index] = c_digits_lut[d2 + 1];
  22f3e4:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f3e8:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f3ef:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f3f3:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
  22f3fa:	0f 82 63 06 00 00    	jb     22fa63 <u64toa+0x7d3>
  22f400:	e9 4e 06 00 00       	jmp    22fa53 <u64toa+0x7c3>
  22f405:	31 c0                	xor    eax,eax
  22f407:	88 c1                	mov    cl,al
            const b: u32 = v / 10000;
  22f409:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
  22f40c:	f6 c1 01             	test   cl,0x1
  22f40f:	89 85 c4 fe ff ff    	mov    DWORD PTR [rbp-0x13c],eax
  22f415:	0f 85 3f 07 00 00    	jne    22fb5a <u64toa+0x8ca>
  22f41b:	e9 06 07 00 00       	jmp    22fb26 <u64toa+0x896>
                buffer[buf_index] = c_digits_lut[d1];
  22f420:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f424:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f42b:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f42f:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
  22f436:	0f 82 a0 08 00 00    	jb     22fcdc <u64toa+0xa4c>
  22f43c:	e9 8b 08 00 00       	jmp    22fccc <u64toa+0xa3c>
            if (value >= 10000000) {
  22f441:	eb 00                	jmp    22f443 <u64toa+0x1b3>
            if (value >= 1000000) {
  22f443:	48 81 7d f0 40 42 0f 	cmp    QWORD PTR [rbp-0x10],0xf4240
  22f44a:	00 
  22f44b:	72 21                	jb     22f46e <u64toa+0x1de>
                buffer[buf_index] = c_digits_lut[d1 + 1];
  22f44d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f451:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f458:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f45c:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  22f463:	0f 82 16 09 00 00    	jb     22fd7f <u64toa+0xaef>
  22f469:	e9 01 09 00 00       	jmp    22fd6f <u64toa+0xadf>
            if (value >= 1000000) {
  22f46e:	eb 00                	jmp    22f470 <u64toa+0x1e0>
            if (value >= 100000) {
  22f470:	48 81 7d f0 a0 86 01 	cmp    QWORD PTR [rbp-0x10],0x186a0
  22f477:	00 
  22f478:	72 21                	jb     22f49b <u64toa+0x20b>
                buffer[buf_index] = c_digits_lut[d2];
  22f47a:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f47e:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f485:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f489:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
  22f490:	0f 82 bc 09 00 00    	jb     22fe52 <u64toa+0xbc2>
  22f496:	e9 a7 09 00 00       	jmp    22fe42 <u64toa+0xbb2>
            if (value >= 100000) {
  22f49b:	eb 00                	jmp    22f49d <u64toa+0x20d>
            buffer[buf_index] = c_digits_lut[d2 + 1];
  22f49d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f4a1:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f4a8:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f4ac:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
  22f4b3:	0f 82 3c 0a 00 00    	jb     22fef5 <u64toa+0xc65>
  22f4b9:	e9 27 0a 00 00       	jmp    22fee5 <u64toa+0xc55>
    if (value < kTen8) {
  22f4be:	e9 b3 02 00 00       	jmp    22f776 <u64toa+0x4e6>
  22f4c3:	48 b8 00 00 c1 6f f2 	movabs rax,0x2386f26fc10000
  22f4ca:	86 23 00 
    } else if (value < kTen16) {
  22f4cd:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
  22f4d1:	0f 83 ba 01 00 00    	jae    22f691 <u64toa+0x401>
  22f4d7:	31 c0                	xor    eax,eax
  22f4d9:	88 c1                	mov    cl,al
        const v0: u32 = @intCast(u32, value / kTen8);
  22f4db:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22f4df:	f6 c1 01             	test   cl,0x1
  22f4e2:	48 89 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rax
  22f4e9:	0f 85 2d 0e 00 00    	jne    23031c <u64toa+0x108c>
  22f4ef:	e9 02 0e 00 00       	jmp    2302f6 <u64toa+0x1066>
            buffer[buf_index] = c_digits_lut[d1];
  22f4f4:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f4f8:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f4ff:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f503:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
  22f50a:	0f 82 5b 12 00 00    	jb     23076b <u64toa+0x14db>
  22f510:	e9 46 12 00 00       	jmp    23075b <u64toa+0x14cb>
        if (value >= kTen15) {
  22f515:	eb 00                	jmp    22f517 <u64toa+0x287>
  22f517:	48 b8 00 40 7a 10 f3 	movabs rax,0x5af3107a4000
  22f51e:	5a 00 00 
        if (value >= kTen14) {
  22f521:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
  22f525:	72 21                	jb     22f548 <u64toa+0x2b8>
            buffer[buf_index] = c_digits_lut[d1 + 1];
  22f527:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f52b:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f532:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f536:	48 89 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rax
  22f53d:	0f 82 ce 12 00 00    	jb     230811 <u64toa+0x1581>
  22f543:	e9 b9 12 00 00       	jmp    230801 <u64toa+0x1571>
        if (value >= kTen14) {
  22f548:	eb 00                	jmp    22f54a <u64toa+0x2ba>
  22f54a:	48 b8 00 a0 72 4e 18 	movabs rax,0x9184e72a000
  22f551:	09 00 00 
        if (value >= kTen13) {
  22f554:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
  22f558:	72 21                	jb     22f57b <u64toa+0x2eb>
            buffer[buf_index] = c_digits_lut[d2];
  22f55a:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f55e:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f565:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f569:	48 89 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rax
  22f570:	0f 82 71 13 00 00    	jb     2308e7 <u64toa+0x1657>
  22f576:	e9 5c 13 00 00       	jmp    2308d7 <u64toa+0x1647>
        if (value >= kTen13) {
  22f57b:	eb 00                	jmp    22f57d <u64toa+0x2ed>
  22f57d:	48 b8 00 10 a5 d4 e8 	movabs rax,0xe8d4a51000
  22f584:	00 00 00 
        if (value >= kTen12) {
  22f587:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
  22f58b:	72 21                	jb     22f5ae <u64toa+0x31e>
            buffer[buf_index] = c_digits_lut[d2 + 1];
  22f58d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f591:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f598:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f59c:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
  22f5a3:	0f 82 e4 13 00 00    	jb     23098d <u64toa+0x16fd>
  22f5a9:	e9 cf 13 00 00       	jmp    23097d <u64toa+0x16ed>
        if (value >= kTen12) {
  22f5ae:	eb 00                	jmp    22f5b0 <u64toa+0x320>
  22f5b0:	48 b8 00 e8 76 48 17 	movabs rax,0x174876e800
  22f5b7:	00 00 00 
        if (value >= kTen11) {
  22f5ba:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
  22f5be:	72 21                	jb     22f5e1 <u64toa+0x351>
            buffer[buf_index] = c_digits_lut[d3];
  22f5c0:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f5c4:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f5cb:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f5cf:	48 89 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rax
  22f5d6:	0f 82 87 14 00 00    	jb     230a63 <u64toa+0x17d3>
  22f5dc:	e9 72 14 00 00       	jmp    230a53 <u64toa+0x17c3>
        if (value >= kTen11) {
  22f5e1:	eb 00                	jmp    22f5e3 <u64toa+0x353>
  22f5e3:	48 b8 00 e4 0b 54 02 	movabs rax,0x2540be400
  22f5ea:	00 00 00 
        if (value >= kTen10) {
  22f5ed:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
  22f5f1:	72 21                	jb     22f614 <u64toa+0x384>
            buffer[buf_index] = c_digits_lut[d3 + 1];
  22f5f3:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f5f7:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f5fe:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f602:	48 89 85 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rax
  22f609:	0f 82 fa 14 00 00    	jb     230b09 <u64toa+0x1879>
  22f60f:	e9 e5 14 00 00       	jmp    230af9 <u64toa+0x1869>
        if (value >= kTen10) {
  22f614:	eb 00                	jmp    22f616 <u64toa+0x386>
        if (value >= kTen9) {
  22f616:	48 81 7d f0 00 ca 9a 	cmp    QWORD PTR [rbp-0x10],0x3b9aca00
  22f61d:	3b 
  22f61e:	72 21                	jb     22f641 <u64toa+0x3b1>
            buffer[buf_index] = c_digits_lut[d4];
  22f620:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f624:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f62b:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f62f:	48 89 85 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rax
  22f636:	0f 82 a3 15 00 00    	jb     230bdf <u64toa+0x194f>
  22f63c:	e9 8e 15 00 00       	jmp    230bcf <u64toa+0x193f>
        if (value >= kTen9) {
  22f641:	eb 00                	jmp    22f643 <u64toa+0x3b3>
        if (value >= kTen8) {
  22f643:	48 81 7d f0 00 e1 f5 	cmp    QWORD PTR [rbp-0x10],0x5f5e100
  22f64a:	05 
  22f64b:	72 21                	jb     22f66e <u64toa+0x3de>
            buffer[buf_index] = c_digits_lut[d4 + 1];
  22f64d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f651:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f658:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f65c:	48 89 85 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rax
  22f663:	0f 82 1c 16 00 00    	jb     230c85 <u64toa+0x19f5>
  22f669:	e9 07 16 00 00       	jmp    230c75 <u64toa+0x19e5>
        if (value >= kTen8) {
  22f66e:	eb 00                	jmp    22f670 <u64toa+0x3e0>
        buffer[buf_index] = c_digits_lut[d5];
  22f670:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f674:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f67b:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f67f:	48 89 85 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rax
  22f686:	0f 82 cf 16 00 00    	jb     230d5b <u64toa+0x1acb>
  22f68c:	e9 ba 16 00 00       	jmp    230d4b <u64toa+0x1abb>
  22f691:	31 c0                	xor    eax,eax
  22f693:	88 c1                	mov    cl,al
        const a = @intCast(u32, value / kTen16); // 1 to 1844
  22f695:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22f699:	f6 c1 01             	test   cl,0x1
  22f69c:	48 89 85 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rax
  22f6a3:	0f 85 53 1d 00 00    	jne    2313fc <u64toa+0x216c>
  22f6a9:	e9 12 1d 00 00       	jmp    2313c0 <u64toa+0x2130>
            buffer[buf_index] = '0' + @intCast(u8, a);
  22f6ae:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f6b2:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f6b9:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f6bd:	48 89 85 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rax
  22f6c4:	0f 82 d1 1d 00 00    	jb     23149b <u64toa+0x220b>
  22f6ca:	e9 bc 1d 00 00       	jmp    23148b <u64toa+0x21fb>
        } else if (a < 100) {
  22f6cf:	83 bd 40 ff ff ff 64 	cmp    DWORD PTR [rbp-0xc0],0x64
  22f6d6:	73 30                	jae    22f708 <u64toa+0x478>
            const i: u32 = a << 1;
  22f6d8:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
  22f6de:	c1 e0 01             	shl    eax,0x1
  22f6e1:	89 85 3c ff ff ff    	mov    DWORD PTR [rbp-0xc4],eax
            buffer[buf_index] = c_digits_lut[i];
  22f6e7:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  22f6eb:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  22f6f2:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  22f6f6:	48 89 8d 38 fe ff ff 	mov    QWORD PTR [rbp-0x1c8],rcx
  22f6fd:	0f 82 5d 1e 00 00    	jb     231560 <u64toa+0x22d0>
  22f703:	e9 48 1e 00 00       	jmp    231550 <u64toa+0x22c0>
        } else if (a < 1000) {
  22f708:	81 bd 40 ff ff ff e8 	cmp    DWORD PTR [rbp-0xc0],0x3e8
  22f70f:	03 00 00 
  22f712:	73 21                	jae    22f735 <u64toa+0x4a5>
            buffer[buf_index] = '0' + @intCast(u8, a / 100);
  22f714:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f718:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f71f:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
  22f723:	48 89 85 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rax
  22f72a:	0f 82 bf 1f 00 00    	jb     2316ef <u64toa+0x245f>
  22f730:	e9 aa 1f 00 00       	jmp    2316df <u64toa+0x244f>
  22f735:	31 c0                	xor    eax,eax
  22f737:	88 c1                	mov    cl,al
            const i: u32 = (a / 100) << 1;
  22f739:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
  22f73f:	f6 c1 01             	test   cl,0x1
  22f742:	89 85 2c fe ff ff    	mov    DWORD PTR [rbp-0x1d4],eax
  22f748:	0f 85 c1 22 00 00    	jne    231a0f <u64toa+0x277f>
  22f74e:	e9 7f 22 00 00       	jmp    2319d2 <u64toa+0x2742>
        } else if (a < 100) {
  22f753:	eb 00                	jmp    22f755 <u64toa+0x4c5>
        if (a < 10) {
  22f755:	eb 00                	jmp    22f757 <u64toa+0x4c7>
  22f757:	31 c0                	xor    eax,eax
  22f759:	88 c1                	mov    cl,al
        const v0 = @intCast(u32, value / kTen8);
  22f75b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  22f75f:	f6 c1 01             	test   cl,0x1
  22f762:	48 89 85 20 fe ff ff 	mov    QWORD PTR [rbp-0x1e0],rax
  22f769:	0f 85 57 26 00 00    	jne    231dc6 <u64toa+0x2b36>
  22f76f:	e9 2c 26 00 00       	jmp    231da0 <u64toa+0x2b10>
    if (value < kTen8) {
  22f774:	eb 00                	jmp    22f776 <u64toa+0x4e6>
    return buf_index;
  22f776:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  22f77a:	48 81 c4 d0 0b 00 00 	add    rsp,0xbd0
  22f781:	5d                   	pop    rbp
  22f782:	c3                   	ret    
        const v = @intCast(u32, value);
  22f783:	8b 85 ec fe ff ff    	mov    eax,DWORD PTR [rbp-0x114]
  22f789:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
        if (v < 10000) {
  22f78c:	81 7d 9c 10 27 00 00 	cmp    DWORD PTR [rbp-0x64],0x2710
  22f793:	0f 82 bb fb ff ff    	jb     22f354 <u64toa+0xc4>
  22f799:	e9 67 fc ff ff       	jmp    22f405 <u64toa+0x175>
  22f79e:	48 8d 3d e3 3c 01 00 	lea    rdi,[rip+0x13ce3]        # 243488 <__unnamed_22>
  22f7a5:	31 c0                	xor    eax,eax
  22f7a7:	89 c6                	mov    esi,eax
        const v = @intCast(u32, value);
  22f7a9:	e8 52 be fd ff       	call   20b600 <panic>
  22f7ae:	31 c0                	xor    eax,eax
  22f7b0:	88 c1                	mov    cl,al
  22f7b2:	b8 64 00 00 00       	mov    eax,0x64
            const d1: u32 = (v / 100) << 1;
  22f7b7:	8b 95 e8 fe ff ff    	mov    edx,DWORD PTR [rbp-0x118]
  22f7bd:	89 85 1c fe ff ff    	mov    DWORD PTR [rbp-0x1e4],eax
  22f7c3:	89 d0                	mov    eax,edx
  22f7c5:	31 d2                	xor    edx,edx
  22f7c7:	8b b5 1c fe ff ff    	mov    esi,DWORD PTR [rbp-0x1e4]
  22f7cd:	f7 f6                	div    esi
  22f7cf:	c1 e0 01             	shl    eax,0x1
  22f7d2:	89 45 98             	mov    DWORD PTR [rbp-0x68],eax
            const d2: u32 = (v % 100) << 1;
  22f7d5:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
  22f7d8:	f6 c1 01             	test   cl,0x1
  22f7db:	89 85 18 fe ff ff    	mov    DWORD PTR [rbp-0x1e8],eax
  22f7e1:	75 47                	jne    22f82a <u64toa+0x59a>
  22f7e3:	eb 10                	jmp    22f7f5 <u64toa+0x565>
  22f7e5:	48 8d 3d 54 3a 01 00 	lea    rdi,[rip+0x13a54]        # 243240 <__unnamed_7>
  22f7ec:	31 c0                	xor    eax,eax
  22f7ee:	89 c6                	mov    esi,eax
            const d1: u32 = (v / 100) << 1;
  22f7f0:	e8 0b be fd ff       	call   20b600 <panic>
  22f7f5:	b8 64 00 00 00       	mov    eax,0x64
            const d2: u32 = (v % 100) << 1;
  22f7fa:	8b 8d 18 fe ff ff    	mov    ecx,DWORD PTR [rbp-0x1e8]
  22f800:	89 85 14 fe ff ff    	mov    DWORD PTR [rbp-0x1ec],eax
  22f806:	89 c8                	mov    eax,ecx
  22f808:	31 d2                	xor    edx,edx
  22f80a:	8b b5 14 fe ff ff    	mov    esi,DWORD PTR [rbp-0x1ec]
  22f810:	f7 f6                	div    esi
  22f812:	c1 e2 01             	shl    edx,0x1
  22f815:	89 55 94             	mov    DWORD PTR [rbp-0x6c],edx
            if (v >= 1000) {
  22f818:	81 7d 9c e8 03 00 00 	cmp    DWORD PTR [rbp-0x64],0x3e8
  22f81f:	0f 83 4a fb ff ff    	jae    22f36f <u64toa+0xdf>
  22f825:	e9 66 fb ff ff       	jmp    22f390 <u64toa+0x100>
  22f82a:	48 8d 3d b7 3a 01 00 	lea    rdi,[rip+0x13ab7]        # 2432e8 <__unnamed_15>
  22f831:	31 c0                	xor    eax,eax
  22f833:	89 c6                	mov    esi,eax
            const d2: u32 = (v % 100) << 1;
  22f835:	e8 c6 bd fd ff       	call   20b600 <panic>
  22f83a:	48 8d 3d 97 3b 01 00 	lea    rdi,[rip+0x13b97]        # 2433d8 <__unnamed_20>
  22f841:	31 c0                	xor    eax,eax
  22f843:	89 c6                	mov    esi,eax
                buffer[buf_index] = c_digits_lut[d1];
  22f845:	e8 b6 bd fd ff       	call   20b600 <panic>
  22f84a:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
  22f851:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f858:	48 03 01             	add    rax,QWORD PTR [rcx]
  22f85b:	8b 55 98             	mov    edx,DWORD PTR [rbp-0x68]
  22f85e:	89 d6                	mov    esi,edx
  22f860:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  22f867:	48 89 85 08 fe ff ff 	mov    QWORD PTR [rbp-0x1f8],rax
  22f86e:	48 89 b5 00 fe ff ff 	mov    QWORD PTR [rbp-0x200],rsi
  22f875:	72 10                	jb     22f887 <u64toa+0x5f7>
  22f877:	48 8d 3d 5a 3b 01 00 	lea    rdi,[rip+0x13b5a]        # 2433d8 <__unnamed_20>
  22f87e:	31 c0                	xor    eax,eax
  22f880:	89 c6                	mov    esi,eax
  22f882:	e8 79 bd fd ff       	call   20b600 <panic>
  22f887:	48 8d 05 92 91 fd ff 	lea    rax,[rip+0xfffffffffffd9192]        # 208a20 <c_digits_lut>
  22f88e:	48 8b 8d 00 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x200]
  22f895:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  22f898:	48 8b 85 08 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1f8]
  22f89f:	88 10                	mov    BYTE PTR [rax],dl
                buf_index += 1;
  22f8a1:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  22f8a5:	48 83 c6 01          	add    rsi,0x1
  22f8a9:	0f 92 c2             	setb   dl
  22f8ac:	48 89 b5 f8 fd ff ff 	mov    QWORD PTR [rbp-0x208],rsi
  22f8b3:	88 95 f7 fd ff ff    	mov    BYTE PTR [rbp-0x209],dl
  22f8b9:	72 02                	jb     22f8bd <u64toa+0x62d>
  22f8bb:	eb 10                	jmp    22f8cd <u64toa+0x63d>
  22f8bd:	48 8d 3d 04 39 01 00 	lea    rdi,[rip+0x13904]        # 2431c8 <__unnamed_4>
  22f8c4:	31 c0                	xor    eax,eax
  22f8c6:	89 c6                	mov    esi,eax
  22f8c8:	e8 33 bd fd ff       	call   20b600 <panic>
  22f8cd:	48 8b 85 f8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x208]
  22f8d4:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            if (v >= 1000) {
  22f8d8:	e9 b5 fa ff ff       	jmp    22f392 <u64toa+0x102>
  22f8dd:	48 8d 3d f4 3a 01 00 	lea    rdi,[rip+0x13af4]        # 2433d8 <__unnamed_20>
  22f8e4:	31 c0                	xor    eax,eax
  22f8e6:	89 c6                	mov    esi,eax
                buffer[buf_index] = c_digits_lut[d1 + 1];
  22f8e8:	e8 13 bd fd ff       	call   20b600 <panic>
  22f8ed:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  22f8f4:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f8fb:	48 03 01             	add    rax,QWORD PTR [rcx]
  22f8fe:	8b 55 98             	mov    edx,DWORD PTR [rbp-0x68]
  22f901:	83 c2 01             	add    edx,0x1
  22f904:	40 0f 92 c6          	setb   sil
  22f908:	48 89 85 e8 fd ff ff 	mov    QWORD PTR [rbp-0x218],rax
  22f90f:	89 95 e4 fd ff ff    	mov    DWORD PTR [rbp-0x21c],edx
  22f915:	40 88 b5 e3 fd ff ff 	mov    BYTE PTR [rbp-0x21d],sil
  22f91c:	72 02                	jb     22f920 <u64toa+0x690>
  22f91e:	eb 10                	jmp    22f930 <u64toa+0x6a0>
  22f920:	48 8d 3d a1 38 01 00 	lea    rdi,[rip+0x138a1]        # 2431c8 <__unnamed_4>
  22f927:	31 c0                	xor    eax,eax
  22f929:	89 c6                	mov    esi,eax
  22f92b:	e8 d0 bc fd ff       	call   20b600 <panic>
  22f930:	8b 85 e4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x21c]
  22f936:	89 c1                	mov    ecx,eax
  22f938:	89 ca                	mov    edx,ecx
  22f93a:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  22f941:	48 89 95 d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rdx
  22f948:	72 10                	jb     22f95a <u64toa+0x6ca>
  22f94a:	48 8d 3d 87 3a 01 00 	lea    rdi,[rip+0x13a87]        # 2433d8 <__unnamed_20>
  22f951:	31 c0                	xor    eax,eax
  22f953:	89 c6                	mov    esi,eax
  22f955:	e8 a6 bc fd ff       	call   20b600 <panic>
  22f95a:	48 8d 05 bf 90 fd ff 	lea    rax,[rip+0xfffffffffffd90bf]        # 208a20 <c_digits_lut>
  22f961:	48 8b 8d d8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x228]
  22f968:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  22f96b:	48 8b 85 e8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x218]
  22f972:	88 10                	mov    BYTE PTR [rax],dl
                buf_index += 1;
  22f974:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  22f978:	48 83 c6 01          	add    rsi,0x1
  22f97c:	0f 92 c2             	setb   dl
  22f97f:	48 89 b5 d0 fd ff ff 	mov    QWORD PTR [rbp-0x230],rsi
  22f986:	88 95 cf fd ff ff    	mov    BYTE PTR [rbp-0x231],dl
  22f98c:	72 02                	jb     22f990 <u64toa+0x700>
  22f98e:	eb 10                	jmp    22f9a0 <u64toa+0x710>
  22f990:	48 8d 3d 31 38 01 00 	lea    rdi,[rip+0x13831]        # 2431c8 <__unnamed_4>
  22f997:	31 c0                	xor    eax,eax
  22f999:	89 c6                	mov    esi,eax
  22f99b:	e8 60 bc fd ff       	call   20b600 <panic>
  22f9a0:	48 8b 85 d0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x230]
  22f9a7:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            if (v >= 100) {
  22f9ab:	e9 0b fa ff ff       	jmp    22f3bb <u64toa+0x12b>
  22f9b0:	48 8d 3d 21 3a 01 00 	lea    rdi,[rip+0x13a21]        # 2433d8 <__unnamed_20>
  22f9b7:	31 c0                	xor    eax,eax
  22f9b9:	89 c6                	mov    esi,eax
                buffer[buf_index] = c_digits_lut[d2];
  22f9bb:	e8 40 bc fd ff       	call   20b600 <panic>
  22f9c0:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  22f9c7:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22f9ce:	48 03 01             	add    rax,QWORD PTR [rcx]
  22f9d1:	8b 55 94             	mov    edx,DWORD PTR [rbp-0x6c]
  22f9d4:	89 d6                	mov    esi,edx
  22f9d6:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  22f9dd:	48 89 85 c0 fd ff ff 	mov    QWORD PTR [rbp-0x240],rax
  22f9e4:	48 89 b5 b8 fd ff ff 	mov    QWORD PTR [rbp-0x248],rsi
  22f9eb:	72 10                	jb     22f9fd <u64toa+0x76d>
  22f9ed:	48 8d 3d e4 39 01 00 	lea    rdi,[rip+0x139e4]        # 2433d8 <__unnamed_20>
  22f9f4:	31 c0                	xor    eax,eax
  22f9f6:	89 c6                	mov    esi,eax
  22f9f8:	e8 03 bc fd ff       	call   20b600 <panic>
  22f9fd:	48 8d 05 1c 90 fd ff 	lea    rax,[rip+0xfffffffffffd901c]        # 208a20 <c_digits_lut>
  22fa04:	48 8b 8d b8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x248]
  22fa0b:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  22fa0e:	48 8b 85 c0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x240]
  22fa15:	88 10                	mov    BYTE PTR [rax],dl
                buf_index += 1;
  22fa17:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  22fa1b:	48 83 c6 01          	add    rsi,0x1
  22fa1f:	0f 92 c2             	setb   dl
  22fa22:	48 89 b5 b0 fd ff ff 	mov    QWORD PTR [rbp-0x250],rsi
  22fa29:	88 95 af fd ff ff    	mov    BYTE PTR [rbp-0x251],dl
  22fa2f:	72 02                	jb     22fa33 <u64toa+0x7a3>
  22fa31:	eb 10                	jmp    22fa43 <u64toa+0x7b3>
  22fa33:	48 8d 3d 8e 37 01 00 	lea    rdi,[rip+0x1378e]        # 2431c8 <__unnamed_4>
  22fa3a:	31 c0                	xor    eax,eax
  22fa3c:	89 c6                	mov    esi,eax
  22fa3e:	e8 bd bb fd ff       	call   20b600 <panic>
  22fa43:	48 8b 85 b0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x250]
  22fa4a:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            if (v >= 10) {
  22fa4e:	e9 91 f9 ff ff       	jmp    22f3e4 <u64toa+0x154>
  22fa53:	48 8d 3d 7e 39 01 00 	lea    rdi,[rip+0x1397e]        # 2433d8 <__unnamed_20>
  22fa5a:	31 c0                	xor    eax,eax
  22fa5c:	89 c6                	mov    esi,eax
            buffer[buf_index] = c_digits_lut[d2 + 1];
  22fa5e:	e8 9d bb fd ff       	call   20b600 <panic>
  22fa63:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  22fa6a:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22fa71:	48 03 01             	add    rax,QWORD PTR [rcx]
  22fa74:	8b 55 94             	mov    edx,DWORD PTR [rbp-0x6c]
  22fa77:	83 c2 01             	add    edx,0x1
  22fa7a:	40 0f 92 c6          	setb   sil
  22fa7e:	48 89 85 a0 fd ff ff 	mov    QWORD PTR [rbp-0x260],rax
  22fa85:	89 95 9c fd ff ff    	mov    DWORD PTR [rbp-0x264],edx
  22fa8b:	40 88 b5 9b fd ff ff 	mov    BYTE PTR [rbp-0x265],sil
  22fa92:	72 02                	jb     22fa96 <u64toa+0x806>
  22fa94:	eb 10                	jmp    22faa6 <u64toa+0x816>
  22fa96:	48 8d 3d 2b 37 01 00 	lea    rdi,[rip+0x1372b]        # 2431c8 <__unnamed_4>
  22fa9d:	31 c0                	xor    eax,eax
  22fa9f:	89 c6                	mov    esi,eax
  22faa1:	e8 5a bb fd ff       	call   20b600 <panic>
  22faa6:	8b 85 9c fd ff ff    	mov    eax,DWORD PTR [rbp-0x264]
  22faac:	89 c1                	mov    ecx,eax
  22faae:	89 ca                	mov    edx,ecx
  22fab0:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  22fab7:	48 89 95 90 fd ff ff 	mov    QWORD PTR [rbp-0x270],rdx
  22fabe:	72 10                	jb     22fad0 <u64toa+0x840>
  22fac0:	48 8d 3d 11 39 01 00 	lea    rdi,[rip+0x13911]        # 2433d8 <__unnamed_20>
  22fac7:	31 c0                	xor    eax,eax
  22fac9:	89 c6                	mov    esi,eax
  22facb:	e8 30 bb fd ff       	call   20b600 <panic>
  22fad0:	48 8d 05 49 8f fd ff 	lea    rax,[rip+0xfffffffffffd8f49]        # 208a20 <c_digits_lut>
  22fad7:	48 8b 8d 90 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x270]
  22fade:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  22fae1:	48 8b 85 a0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x260]
  22fae8:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  22faea:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  22faee:	48 83 c6 01          	add    rsi,0x1
  22faf2:	0f 92 c2             	setb   dl
  22faf5:	48 89 b5 88 fd ff ff 	mov    QWORD PTR [rbp-0x278],rsi
  22fafc:	88 95 87 fd ff ff    	mov    BYTE PTR [rbp-0x279],dl
  22fb02:	72 02                	jb     22fb06 <u64toa+0x876>
  22fb04:	eb 10                	jmp    22fb16 <u64toa+0x886>
  22fb06:	48 8d 3d bb 36 01 00 	lea    rdi,[rip+0x136bb]        # 2431c8 <__unnamed_4>
  22fb0d:	31 c0                	xor    eax,eax
  22fb0f:	89 c6                	mov    esi,eax
  22fb11:	e8 ea ba fd ff       	call   20b600 <panic>
  22fb16:	48 8b 85 88 fd ff ff 	mov    rax,QWORD PTR [rbp-0x278]
  22fb1d:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        if (v < 10000) {
  22fb21:	e9 98 f9 ff ff       	jmp    22f4be <u64toa+0x22e>
  22fb26:	31 c0                	xor    eax,eax
  22fb28:	88 c1                	mov    cl,al
  22fb2a:	b8 10 27 00 00       	mov    eax,0x2710
            const b: u32 = v / 10000;
  22fb2f:	8b 95 c4 fe ff ff    	mov    edx,DWORD PTR [rbp-0x13c]
  22fb35:	89 85 80 fd ff ff    	mov    DWORD PTR [rbp-0x280],eax
  22fb3b:	89 d0                	mov    eax,edx
  22fb3d:	31 d2                	xor    edx,edx
  22fb3f:	8b b5 80 fd ff ff    	mov    esi,DWORD PTR [rbp-0x280]
  22fb45:	f7 f6                	div    esi
  22fb47:	89 45 90             	mov    DWORD PTR [rbp-0x70],eax
            const c: u32 = v % 10000;
  22fb4a:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
  22fb4d:	f6 c1 01             	test   cl,0x1
  22fb50:	89 85 7c fd ff ff    	mov    DWORD PTR [rbp-0x284],eax
  22fb56:	75 46                	jne    22fb9e <u64toa+0x90e>
  22fb58:	eb 10                	jmp    22fb6a <u64toa+0x8da>
  22fb5a:	48 8d 3d df 36 01 00 	lea    rdi,[rip+0x136df]        # 243240 <__unnamed_7>
  22fb61:	31 c0                	xor    eax,eax
  22fb63:	89 c6                	mov    esi,eax
            const b: u32 = v / 10000;
  22fb65:	e8 96 ba fd ff       	call   20b600 <panic>
  22fb6a:	31 c0                	xor    eax,eax
  22fb6c:	88 c1                	mov    cl,al
  22fb6e:	b8 10 27 00 00       	mov    eax,0x2710
            const c: u32 = v % 10000;
  22fb73:	8b 95 7c fd ff ff    	mov    edx,DWORD PTR [rbp-0x284]
  22fb79:	89 85 78 fd ff ff    	mov    DWORD PTR [rbp-0x288],eax
  22fb7f:	89 d0                	mov    eax,edx
  22fb81:	31 d2                	xor    edx,edx
  22fb83:	8b b5 78 fd ff ff    	mov    esi,DWORD PTR [rbp-0x288]
  22fb89:	f7 f6                	div    esi
  22fb8b:	89 55 8c             	mov    DWORD PTR [rbp-0x74],edx
            const d1: u32 = (b / 100) << 1;
  22fb8e:	8b 55 90             	mov    edx,DWORD PTR [rbp-0x70]
  22fb91:	f6 c1 01             	test   cl,0x1
  22fb94:	89 95 74 fd ff ff    	mov    DWORD PTR [rbp-0x28c],edx
  22fb9a:	75 49                	jne    22fbe5 <u64toa+0x955>
  22fb9c:	eb 10                	jmp    22fbae <u64toa+0x91e>
  22fb9e:	48 8d 3d 43 37 01 00 	lea    rdi,[rip+0x13743]        # 2432e8 <__unnamed_15>
  22fba5:	31 c0                	xor    eax,eax
  22fba7:	89 c6                	mov    esi,eax
            const c: u32 = v % 10000;
  22fba9:	e8 52 ba fd ff       	call   20b600 <panic>
  22fbae:	31 c0                	xor    eax,eax
  22fbb0:	88 c1                	mov    cl,al
  22fbb2:	b8 64 00 00 00       	mov    eax,0x64
            const d1: u32 = (b / 100) << 1;
  22fbb7:	8b 95 74 fd ff ff    	mov    edx,DWORD PTR [rbp-0x28c]
  22fbbd:	89 85 70 fd ff ff    	mov    DWORD PTR [rbp-0x290],eax
  22fbc3:	89 d0                	mov    eax,edx
  22fbc5:	31 d2                	xor    edx,edx
  22fbc7:	8b b5 70 fd ff ff    	mov    esi,DWORD PTR [rbp-0x290]
  22fbcd:	f7 f6                	div    esi
  22fbcf:	c1 e0 01             	shl    eax,0x1
  22fbd2:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
            const d2: u32 = (b % 100) << 1;
  22fbd5:	8b 45 90             	mov    eax,DWORD PTR [rbp-0x70]
  22fbd8:	f6 c1 01             	test   cl,0x1
  22fbdb:	89 85 6c fd ff ff    	mov    DWORD PTR [rbp-0x294],eax
  22fbe1:	75 49                	jne    22fc2c <u64toa+0x99c>
  22fbe3:	eb 10                	jmp    22fbf5 <u64toa+0x965>
  22fbe5:	48 8d 3d 54 36 01 00 	lea    rdi,[rip+0x13654]        # 243240 <__unnamed_7>
  22fbec:	31 c0                	xor    eax,eax
  22fbee:	89 c6                	mov    esi,eax
            const d1: u32 = (b / 100) << 1;
  22fbf0:	e8 0b ba fd ff       	call   20b600 <panic>
  22fbf5:	31 c0                	xor    eax,eax
  22fbf7:	88 c1                	mov    cl,al
  22fbf9:	b8 64 00 00 00       	mov    eax,0x64
            const d2: u32 = (b % 100) << 1;
  22fbfe:	8b 95 6c fd ff ff    	mov    edx,DWORD PTR [rbp-0x294]
  22fc04:	89 85 68 fd ff ff    	mov    DWORD PTR [rbp-0x298],eax
  22fc0a:	89 d0                	mov    eax,edx
  22fc0c:	31 d2                	xor    edx,edx
  22fc0e:	8b b5 68 fd ff ff    	mov    esi,DWORD PTR [rbp-0x298]
  22fc14:	f7 f6                	div    esi
  22fc16:	c1 e2 01             	shl    edx,0x1
  22fc19:	89 55 84             	mov    DWORD PTR [rbp-0x7c],edx
            const d3: u32 = (c / 100) << 1;
  22fc1c:	8b 55 8c             	mov    edx,DWORD PTR [rbp-0x74]
  22fc1f:	f6 c1 01             	test   cl,0x1
  22fc22:	89 95 64 fd ff ff    	mov    DWORD PTR [rbp-0x29c],edx
  22fc28:	75 49                	jne    22fc73 <u64toa+0x9e3>
  22fc2a:	eb 10                	jmp    22fc3c <u64toa+0x9ac>
  22fc2c:	48 8d 3d b5 36 01 00 	lea    rdi,[rip+0x136b5]        # 2432e8 <__unnamed_15>
  22fc33:	31 c0                	xor    eax,eax
  22fc35:	89 c6                	mov    esi,eax
            const d2: u32 = (b % 100) << 1;
  22fc37:	e8 c4 b9 fd ff       	call   20b600 <panic>
  22fc3c:	31 c0                	xor    eax,eax
  22fc3e:	88 c1                	mov    cl,al
  22fc40:	b8 64 00 00 00       	mov    eax,0x64
            const d3: u32 = (c / 100) << 1;
  22fc45:	8b 95 64 fd ff ff    	mov    edx,DWORD PTR [rbp-0x29c]
  22fc4b:	89 85 60 fd ff ff    	mov    DWORD PTR [rbp-0x2a0],eax
  22fc51:	89 d0                	mov    eax,edx
  22fc53:	31 d2                	xor    edx,edx
  22fc55:	8b b5 60 fd ff ff    	mov    esi,DWORD PTR [rbp-0x2a0]
  22fc5b:	f7 f6                	div    esi
  22fc5d:	c1 e0 01             	shl    eax,0x1
  22fc60:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
            const d4: u32 = (c % 100) << 1;
  22fc63:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
  22fc66:	f6 c1 01             	test   cl,0x1
  22fc69:	89 85 5c fd ff ff    	mov    DWORD PTR [rbp-0x2a4],eax
  22fc6f:	75 4b                	jne    22fcbc <u64toa+0xa2c>
  22fc71:	eb 10                	jmp    22fc83 <u64toa+0x9f3>
  22fc73:	48 8d 3d c6 35 01 00 	lea    rdi,[rip+0x135c6]        # 243240 <__unnamed_7>
  22fc7a:	31 c0                	xor    eax,eax
  22fc7c:	89 c6                	mov    esi,eax
            const d3: u32 = (c / 100) << 1;
  22fc7e:	e8 7d b9 fd ff       	call   20b600 <panic>
  22fc83:	b8 64 00 00 00       	mov    eax,0x64
            const d4: u32 = (c % 100) << 1;
  22fc88:	8b 8d 5c fd ff ff    	mov    ecx,DWORD PTR [rbp-0x2a4]
  22fc8e:	89 85 58 fd ff ff    	mov    DWORD PTR [rbp-0x2a8],eax
  22fc94:	89 c8                	mov    eax,ecx
  22fc96:	31 d2                	xor    edx,edx
  22fc98:	8b b5 58 fd ff ff    	mov    esi,DWORD PTR [rbp-0x2a8]
  22fc9e:	f7 f6                	div    esi
  22fca0:	c1 e2 01             	shl    edx,0x1
  22fca3:	89 95 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],edx
            if (value >= 10000000) {
  22fca9:	48 81 7d f0 80 96 98 	cmp    QWORD PTR [rbp-0x10],0x989680
  22fcb0:	00 
  22fcb1:	0f 83 69 f7 ff ff    	jae    22f420 <u64toa+0x190>
  22fcb7:	e9 85 f7 ff ff       	jmp    22f441 <u64toa+0x1b1>
  22fcbc:	48 8d 3d 25 36 01 00 	lea    rdi,[rip+0x13625]        # 2432e8 <__unnamed_15>
  22fcc3:	31 c0                	xor    eax,eax
  22fcc5:	89 c6                	mov    esi,eax
            const d4: u32 = (c % 100) << 1;
  22fcc7:	e8 34 b9 fd ff       	call   20b600 <panic>
  22fccc:	48 8d 3d 05 37 01 00 	lea    rdi,[rip+0x13705]        # 2433d8 <__unnamed_20>
  22fcd3:	31 c0                	xor    eax,eax
  22fcd5:	89 c6                	mov    esi,eax
                buffer[buf_index] = c_digits_lut[d1];
  22fcd7:	e8 24 b9 fd ff       	call   20b600 <panic>
  22fcdc:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  22fce3:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22fcea:	48 03 01             	add    rax,QWORD PTR [rcx]
  22fced:	8b 55 88             	mov    edx,DWORD PTR [rbp-0x78]
  22fcf0:	89 d6                	mov    esi,edx
  22fcf2:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  22fcf9:	48 89 85 50 fd ff ff 	mov    QWORD PTR [rbp-0x2b0],rax
  22fd00:	48 89 b5 48 fd ff ff 	mov    QWORD PTR [rbp-0x2b8],rsi
  22fd07:	72 10                	jb     22fd19 <u64toa+0xa89>
  22fd09:	48 8d 3d c8 36 01 00 	lea    rdi,[rip+0x136c8]        # 2433d8 <__unnamed_20>
  22fd10:	31 c0                	xor    eax,eax
  22fd12:	89 c6                	mov    esi,eax
  22fd14:	e8 e7 b8 fd ff       	call   20b600 <panic>
  22fd19:	48 8d 05 00 8d fd ff 	lea    rax,[rip+0xfffffffffffd8d00]        # 208a20 <c_digits_lut>
  22fd20:	48 8b 8d 48 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2b8]
  22fd27:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  22fd2a:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
  22fd31:	88 10                	mov    BYTE PTR [rax],dl
                buf_index += 1;
  22fd33:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  22fd37:	48 83 c6 01          	add    rsi,0x1
  22fd3b:	0f 92 c2             	setb   dl
  22fd3e:	48 89 b5 40 fd ff ff 	mov    QWORD PTR [rbp-0x2c0],rsi
  22fd45:	88 95 3f fd ff ff    	mov    BYTE PTR [rbp-0x2c1],dl
  22fd4b:	72 02                	jb     22fd4f <u64toa+0xabf>
  22fd4d:	eb 10                	jmp    22fd5f <u64toa+0xacf>
  22fd4f:	48 8d 3d 72 34 01 00 	lea    rdi,[rip+0x13472]        # 2431c8 <__unnamed_4>
  22fd56:	31 c0                	xor    eax,eax
  22fd58:	89 c6                	mov    esi,eax
  22fd5a:	e8 a1 b8 fd ff       	call   20b600 <panic>
  22fd5f:	48 8b 85 40 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2c0]
  22fd66:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            if (value >= 10000000) {
  22fd6a:	e9 d4 f6 ff ff       	jmp    22f443 <u64toa+0x1b3>
  22fd6f:	48 8d 3d 62 36 01 00 	lea    rdi,[rip+0x13662]        # 2433d8 <__unnamed_20>
  22fd76:	31 c0                	xor    eax,eax
  22fd78:	89 c6                	mov    esi,eax
                buffer[buf_index] = c_digits_lut[d1 + 1];
  22fd7a:	e8 81 b8 fd ff       	call   20b600 <panic>
  22fd7f:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  22fd86:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22fd8d:	48 03 01             	add    rax,QWORD PTR [rcx]
  22fd90:	8b 55 88             	mov    edx,DWORD PTR [rbp-0x78]
  22fd93:	83 c2 01             	add    edx,0x1
  22fd96:	40 0f 92 c6          	setb   sil
  22fd9a:	48 89 85 30 fd ff ff 	mov    QWORD PTR [rbp-0x2d0],rax
  22fda1:	89 95 2c fd ff ff    	mov    DWORD PTR [rbp-0x2d4],edx
  22fda7:	40 88 b5 2b fd ff ff 	mov    BYTE PTR [rbp-0x2d5],sil
  22fdae:	72 02                	jb     22fdb2 <u64toa+0xb22>
  22fdb0:	eb 10                	jmp    22fdc2 <u64toa+0xb32>
  22fdb2:	48 8d 3d 0f 34 01 00 	lea    rdi,[rip+0x1340f]        # 2431c8 <__unnamed_4>
  22fdb9:	31 c0                	xor    eax,eax
  22fdbb:	89 c6                	mov    esi,eax
  22fdbd:	e8 3e b8 fd ff       	call   20b600 <panic>
  22fdc2:	8b 85 2c fd ff ff    	mov    eax,DWORD PTR [rbp-0x2d4]
  22fdc8:	89 c1                	mov    ecx,eax
  22fdca:	89 ca                	mov    edx,ecx
  22fdcc:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  22fdd3:	48 89 95 20 fd ff ff 	mov    QWORD PTR [rbp-0x2e0],rdx
  22fdda:	72 10                	jb     22fdec <u64toa+0xb5c>
  22fddc:	48 8d 3d f5 35 01 00 	lea    rdi,[rip+0x135f5]        # 2433d8 <__unnamed_20>
  22fde3:	31 c0                	xor    eax,eax
  22fde5:	89 c6                	mov    esi,eax
  22fde7:	e8 14 b8 fd ff       	call   20b600 <panic>
  22fdec:	48 8d 05 2d 8c fd ff 	lea    rax,[rip+0xfffffffffffd8c2d]        # 208a20 <c_digits_lut>
  22fdf3:	48 8b 8d 20 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2e0]
  22fdfa:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  22fdfd:	48 8b 85 30 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2d0]
  22fe04:	88 10                	mov    BYTE PTR [rax],dl
                buf_index += 1;
  22fe06:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  22fe0a:	48 83 c6 01          	add    rsi,0x1
  22fe0e:	0f 92 c2             	setb   dl
  22fe11:	48 89 b5 18 fd ff ff 	mov    QWORD PTR [rbp-0x2e8],rsi
  22fe18:	88 95 17 fd ff ff    	mov    BYTE PTR [rbp-0x2e9],dl
  22fe1e:	72 02                	jb     22fe22 <u64toa+0xb92>
  22fe20:	eb 10                	jmp    22fe32 <u64toa+0xba2>
  22fe22:	48 8d 3d 9f 33 01 00 	lea    rdi,[rip+0x1339f]        # 2431c8 <__unnamed_4>
  22fe29:	31 c0                	xor    eax,eax
  22fe2b:	89 c6                	mov    esi,eax
  22fe2d:	e8 ce b7 fd ff       	call   20b600 <panic>
  22fe32:	48 8b 85 18 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2e8]
  22fe39:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            if (value >= 1000000) {
  22fe3d:	e9 2e f6 ff ff       	jmp    22f470 <u64toa+0x1e0>
  22fe42:	48 8d 3d 8f 35 01 00 	lea    rdi,[rip+0x1358f]        # 2433d8 <__unnamed_20>
  22fe49:	31 c0                	xor    eax,eax
  22fe4b:	89 c6                	mov    esi,eax
                buffer[buf_index] = c_digits_lut[d2];
  22fe4d:	e8 ae b7 fd ff       	call   20b600 <panic>
  22fe52:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
  22fe59:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22fe60:	48 03 01             	add    rax,QWORD PTR [rcx]
  22fe63:	8b 55 84             	mov    edx,DWORD PTR [rbp-0x7c]
  22fe66:	89 d6                	mov    esi,edx
  22fe68:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  22fe6f:	48 89 85 08 fd ff ff 	mov    QWORD PTR [rbp-0x2f8],rax
  22fe76:	48 89 b5 00 fd ff ff 	mov    QWORD PTR [rbp-0x300],rsi
  22fe7d:	72 10                	jb     22fe8f <u64toa+0xbff>
  22fe7f:	48 8d 3d 52 35 01 00 	lea    rdi,[rip+0x13552]        # 2433d8 <__unnamed_20>
  22fe86:	31 c0                	xor    eax,eax
  22fe88:	89 c6                	mov    esi,eax
  22fe8a:	e8 71 b7 fd ff       	call   20b600 <panic>
  22fe8f:	48 8d 05 8a 8b fd ff 	lea    rax,[rip+0xfffffffffffd8b8a]        # 208a20 <c_digits_lut>
  22fe96:	48 8b 8d 00 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x300]
  22fe9d:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  22fea0:	48 8b 85 08 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2f8]
  22fea7:	88 10                	mov    BYTE PTR [rax],dl
                buf_index += 1;
  22fea9:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  22fead:	48 83 c6 01          	add    rsi,0x1
  22feb1:	0f 92 c2             	setb   dl
  22feb4:	48 89 b5 f8 fc ff ff 	mov    QWORD PTR [rbp-0x308],rsi
  22febb:	88 95 f7 fc ff ff    	mov    BYTE PTR [rbp-0x309],dl
  22fec1:	72 02                	jb     22fec5 <u64toa+0xc35>
  22fec3:	eb 10                	jmp    22fed5 <u64toa+0xc45>
  22fec5:	48 8d 3d fc 32 01 00 	lea    rdi,[rip+0x132fc]        # 2431c8 <__unnamed_4>
  22fecc:	31 c0                	xor    eax,eax
  22fece:	89 c6                	mov    esi,eax
  22fed0:	e8 2b b7 fd ff       	call   20b600 <panic>
  22fed5:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
  22fedc:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            if (value >= 100000) {
  22fee0:	e9 b8 f5 ff ff       	jmp    22f49d <u64toa+0x20d>
  22fee5:	48 8d 3d ec 34 01 00 	lea    rdi,[rip+0x134ec]        # 2433d8 <__unnamed_20>
  22feec:	31 c0                	xor    eax,eax
  22feee:	89 c6                	mov    esi,eax
            buffer[buf_index] = c_digits_lut[d2 + 1];
  22fef0:	e8 0b b7 fd ff       	call   20b600 <panic>
  22fef5:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
  22fefc:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22ff03:	48 03 01             	add    rax,QWORD PTR [rcx]
  22ff06:	8b 55 84             	mov    edx,DWORD PTR [rbp-0x7c]
  22ff09:	83 c2 01             	add    edx,0x1
  22ff0c:	40 0f 92 c6          	setb   sil
  22ff10:	48 89 85 e8 fc ff ff 	mov    QWORD PTR [rbp-0x318],rax
  22ff17:	89 95 e4 fc ff ff    	mov    DWORD PTR [rbp-0x31c],edx
  22ff1d:	40 88 b5 e3 fc ff ff 	mov    BYTE PTR [rbp-0x31d],sil
  22ff24:	72 02                	jb     22ff28 <u64toa+0xc98>
  22ff26:	eb 10                	jmp    22ff38 <u64toa+0xca8>
  22ff28:	48 8d 3d 99 32 01 00 	lea    rdi,[rip+0x13299]        # 2431c8 <__unnamed_4>
  22ff2f:	31 c0                	xor    eax,eax
  22ff31:	89 c6                	mov    esi,eax
  22ff33:	e8 c8 b6 fd ff       	call   20b600 <panic>
  22ff38:	8b 85 e4 fc ff ff    	mov    eax,DWORD PTR [rbp-0x31c]
  22ff3e:	89 c1                	mov    ecx,eax
  22ff40:	89 ca                	mov    edx,ecx
  22ff42:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  22ff49:	48 89 95 d8 fc ff ff 	mov    QWORD PTR [rbp-0x328],rdx
  22ff50:	72 10                	jb     22ff62 <u64toa+0xcd2>
  22ff52:	48 8d 3d 7f 34 01 00 	lea    rdi,[rip+0x1347f]        # 2433d8 <__unnamed_20>
  22ff59:	31 c0                	xor    eax,eax
  22ff5b:	89 c6                	mov    esi,eax
  22ff5d:	e8 9e b6 fd ff       	call   20b600 <panic>
  22ff62:	48 8d 05 b7 8a fd ff 	lea    rax,[rip+0xfffffffffffd8ab7]        # 208a20 <c_digits_lut>
  22ff69:	48 8b 8d d8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x328]
  22ff70:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  22ff73:	48 8b 85 e8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x318]
  22ff7a:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  22ff7c:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  22ff80:	48 83 c6 01          	add    rsi,0x1
  22ff84:	0f 92 c2             	setb   dl
  22ff87:	48 89 b5 d0 fc ff ff 	mov    QWORD PTR [rbp-0x330],rsi
  22ff8e:	88 95 cf fc ff ff    	mov    BYTE PTR [rbp-0x331],dl
  22ff94:	72 02                	jb     22ff98 <u64toa+0xd08>
  22ff96:	eb 10                	jmp    22ffa8 <u64toa+0xd18>
  22ff98:	48 8d 3d 29 32 01 00 	lea    rdi,[rip+0x13229]        # 2431c8 <__unnamed_4>
  22ff9f:	31 c0                	xor    eax,eax
  22ffa1:	89 c6                	mov    esi,eax
  22ffa3:	e8 58 b6 fd ff       	call   20b600 <panic>
  22ffa8:	48 8b 85 d0 fc ff ff 	mov    rax,QWORD PTR [rbp-0x330]
  22ffaf:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            buffer[buf_index] = c_digits_lut[d3];
  22ffb3:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  22ffb7:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  22ffbe:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  22ffc2:	48 89 8d c0 fc ff ff 	mov    QWORD PTR [rbp-0x340],rcx
  22ffc9:	72 10                	jb     22ffdb <u64toa+0xd4b>
  22ffcb:	48 8d 3d 06 34 01 00 	lea    rdi,[rip+0x13406]        # 2433d8 <__unnamed_20>
  22ffd2:	31 c0                	xor    eax,eax
  22ffd4:	89 c6                	mov    esi,eax
  22ffd6:	e8 25 b6 fd ff       	call   20b600 <panic>
  22ffdb:	48 8b 85 c0 fc ff ff 	mov    rax,QWORD PTR [rbp-0x340]
  22ffe2:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  22ffe9:	48 03 01             	add    rax,QWORD PTR [rcx]
  22ffec:	8b 55 80             	mov    edx,DWORD PTR [rbp-0x80]
  22ffef:	89 d6                	mov    esi,edx
  22fff1:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  22fff8:	48 89 85 b8 fc ff ff 	mov    QWORD PTR [rbp-0x348],rax
  22ffff:	48 89 b5 b0 fc ff ff 	mov    QWORD PTR [rbp-0x350],rsi
  230006:	72 10                	jb     230018 <u64toa+0xd88>
  230008:	48 8d 3d c9 33 01 00 	lea    rdi,[rip+0x133c9]        # 2433d8 <__unnamed_20>
  23000f:	31 c0                	xor    eax,eax
  230011:	89 c6                	mov    esi,eax
  230013:	e8 e8 b5 fd ff       	call   20b600 <panic>
  230018:	48 8d 05 01 8a fd ff 	lea    rax,[rip+0xfffffffffffd8a01]        # 208a20 <c_digits_lut>
  23001f:	48 8b 8d b0 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x350]
  230026:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  230029:	48 8b 85 b8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x348]
  230030:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  230032:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  230036:	48 83 c6 01          	add    rsi,0x1
  23003a:	0f 92 c2             	setb   dl
  23003d:	48 89 b5 a8 fc ff ff 	mov    QWORD PTR [rbp-0x358],rsi
  230044:	88 95 a7 fc ff ff    	mov    BYTE PTR [rbp-0x359],dl
  23004a:	72 02                	jb     23004e <u64toa+0xdbe>
  23004c:	eb 10                	jmp    23005e <u64toa+0xdce>
  23004e:	48 8d 3d 73 31 01 00 	lea    rdi,[rip+0x13173]        # 2431c8 <__unnamed_4>
  230055:	31 c0                	xor    eax,eax
  230057:	89 c6                	mov    esi,eax
  230059:	e8 a2 b5 fd ff       	call   20b600 <panic>
  23005e:	48 8b 85 a8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x358]
  230065:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            buffer[buf_index] = c_digits_lut[d3 + 1];
  230069:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  23006d:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  230074:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  230078:	48 89 8d 98 fc ff ff 	mov    QWORD PTR [rbp-0x368],rcx
  23007f:	72 10                	jb     230091 <u64toa+0xe01>
  230081:	48 8d 3d 50 33 01 00 	lea    rdi,[rip+0x13350]        # 2433d8 <__unnamed_20>
  230088:	31 c0                	xor    eax,eax
  23008a:	89 c6                	mov    esi,eax
  23008c:	e8 6f b5 fd ff       	call   20b600 <panic>
  230091:	48 8b 85 98 fc ff ff 	mov    rax,QWORD PTR [rbp-0x368]
  230098:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  23009f:	48 03 01             	add    rax,QWORD PTR [rcx]
  2300a2:	8b 55 80             	mov    edx,DWORD PTR [rbp-0x80]
  2300a5:	83 c2 01             	add    edx,0x1
  2300a8:	40 0f 92 c6          	setb   sil
  2300ac:	48 89 85 90 fc ff ff 	mov    QWORD PTR [rbp-0x370],rax
  2300b3:	89 95 8c fc ff ff    	mov    DWORD PTR [rbp-0x374],edx
  2300b9:	40 88 b5 8b fc ff ff 	mov    BYTE PTR [rbp-0x375],sil
  2300c0:	72 02                	jb     2300c4 <u64toa+0xe34>
  2300c2:	eb 10                	jmp    2300d4 <u64toa+0xe44>
  2300c4:	48 8d 3d fd 30 01 00 	lea    rdi,[rip+0x130fd]        # 2431c8 <__unnamed_4>
  2300cb:	31 c0                	xor    eax,eax
  2300cd:	89 c6                	mov    esi,eax
  2300cf:	e8 2c b5 fd ff       	call   20b600 <panic>
  2300d4:	8b 85 8c fc ff ff    	mov    eax,DWORD PTR [rbp-0x374]
  2300da:	89 c1                	mov    ecx,eax
  2300dc:	89 ca                	mov    edx,ecx
  2300de:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  2300e5:	48 89 95 80 fc ff ff 	mov    QWORD PTR [rbp-0x380],rdx
  2300ec:	72 10                	jb     2300fe <u64toa+0xe6e>
  2300ee:	48 8d 3d e3 32 01 00 	lea    rdi,[rip+0x132e3]        # 2433d8 <__unnamed_20>
  2300f5:	31 c0                	xor    eax,eax
  2300f7:	89 c6                	mov    esi,eax
  2300f9:	e8 02 b5 fd ff       	call   20b600 <panic>
  2300fe:	48 8d 05 1b 89 fd ff 	lea    rax,[rip+0xfffffffffffd891b]        # 208a20 <c_digits_lut>
  230105:	48 8b 8d 80 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x380]
  23010c:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  23010f:	48 8b 85 90 fc ff ff 	mov    rax,QWORD PTR [rbp-0x370]
  230116:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  230118:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  23011c:	48 83 c6 01          	add    rsi,0x1
  230120:	0f 92 c2             	setb   dl
  230123:	48 89 b5 78 fc ff ff 	mov    QWORD PTR [rbp-0x388],rsi
  23012a:	88 95 77 fc ff ff    	mov    BYTE PTR [rbp-0x389],dl
  230130:	72 02                	jb     230134 <u64toa+0xea4>
  230132:	eb 10                	jmp    230144 <u64toa+0xeb4>
  230134:	48 8d 3d 8d 30 01 00 	lea    rdi,[rip+0x1308d]        # 2431c8 <__unnamed_4>
  23013b:	31 c0                	xor    eax,eax
  23013d:	89 c6                	mov    esi,eax
  23013f:	e8 bc b4 fd ff       	call   20b600 <panic>
  230144:	48 8b 85 78 fc ff ff 	mov    rax,QWORD PTR [rbp-0x388]
  23014b:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            buffer[buf_index] = c_digits_lut[d4];
  23014f:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  230153:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  23015a:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  23015e:	48 89 8d 68 fc ff ff 	mov    QWORD PTR [rbp-0x398],rcx
  230165:	72 10                	jb     230177 <u64toa+0xee7>
  230167:	48 8d 3d 6a 32 01 00 	lea    rdi,[rip+0x1326a]        # 2433d8 <__unnamed_20>
  23016e:	31 c0                	xor    eax,eax
  230170:	89 c6                	mov    esi,eax
  230172:	e8 89 b4 fd ff       	call   20b600 <panic>
  230177:	48 8b 85 68 fc ff ff 	mov    rax,QWORD PTR [rbp-0x398]
  23017e:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  230185:	48 03 01             	add    rax,QWORD PTR [rcx]
  230188:	8b 95 7c ff ff ff    	mov    edx,DWORD PTR [rbp-0x84]
  23018e:	89 d6                	mov    esi,edx
  230190:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  230197:	48 89 85 60 fc ff ff 	mov    QWORD PTR [rbp-0x3a0],rax
  23019e:	48 89 b5 58 fc ff ff 	mov    QWORD PTR [rbp-0x3a8],rsi
  2301a5:	72 10                	jb     2301b7 <u64toa+0xf27>
  2301a7:	48 8d 3d 2a 32 01 00 	lea    rdi,[rip+0x1322a]        # 2433d8 <__unnamed_20>
  2301ae:	31 c0                	xor    eax,eax
  2301b0:	89 c6                	mov    esi,eax
  2301b2:	e8 49 b4 fd ff       	call   20b600 <panic>
  2301b7:	48 8d 05 62 88 fd ff 	lea    rax,[rip+0xfffffffffffd8862]        # 208a20 <c_digits_lut>
  2301be:	48 8b 8d 58 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3a8]
  2301c5:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  2301c8:	48 8b 85 60 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3a0]
  2301cf:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  2301d1:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  2301d5:	48 83 c6 01          	add    rsi,0x1
  2301d9:	0f 92 c2             	setb   dl
  2301dc:	48 89 b5 50 fc ff ff 	mov    QWORD PTR [rbp-0x3b0],rsi
  2301e3:	88 95 4f fc ff ff    	mov    BYTE PTR [rbp-0x3b1],dl
  2301e9:	72 02                	jb     2301ed <u64toa+0xf5d>
  2301eb:	eb 10                	jmp    2301fd <u64toa+0xf6d>
  2301ed:	48 8d 3d d4 2f 01 00 	lea    rdi,[rip+0x12fd4]        # 2431c8 <__unnamed_4>
  2301f4:	31 c0                	xor    eax,eax
  2301f6:	89 c6                	mov    esi,eax
  2301f8:	e8 03 b4 fd ff       	call   20b600 <panic>
  2301fd:	48 8b 85 50 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3b0]
  230204:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            buffer[buf_index] = c_digits_lut[d4 + 1];
  230208:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  23020c:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  230213:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  230217:	48 89 8d 40 fc ff ff 	mov    QWORD PTR [rbp-0x3c0],rcx
  23021e:	72 10                	jb     230230 <u64toa+0xfa0>
  230220:	48 8d 3d b1 31 01 00 	lea    rdi,[rip+0x131b1]        # 2433d8 <__unnamed_20>
  230227:	31 c0                	xor    eax,eax
  230229:	89 c6                	mov    esi,eax
  23022b:	e8 d0 b3 fd ff       	call   20b600 <panic>
  230230:	48 8b 85 40 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3c0]
  230237:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  23023e:	48 03 01             	add    rax,QWORD PTR [rcx]
  230241:	8b 95 7c ff ff ff    	mov    edx,DWORD PTR [rbp-0x84]
  230247:	83 c2 01             	add    edx,0x1
  23024a:	40 0f 92 c6          	setb   sil
  23024e:	48 89 85 38 fc ff ff 	mov    QWORD PTR [rbp-0x3c8],rax
  230255:	89 95 34 fc ff ff    	mov    DWORD PTR [rbp-0x3cc],edx
  23025b:	40 88 b5 33 fc ff ff 	mov    BYTE PTR [rbp-0x3cd],sil
  230262:	72 02                	jb     230266 <u64toa+0xfd6>
  230264:	eb 10                	jmp    230276 <u64toa+0xfe6>
  230266:	48 8d 3d 5b 2f 01 00 	lea    rdi,[rip+0x12f5b]        # 2431c8 <__unnamed_4>
  23026d:	31 c0                	xor    eax,eax
  23026f:	89 c6                	mov    esi,eax
  230271:	e8 8a b3 fd ff       	call   20b600 <panic>
  230276:	8b 85 34 fc ff ff    	mov    eax,DWORD PTR [rbp-0x3cc]
  23027c:	89 c1                	mov    ecx,eax
  23027e:	89 ca                	mov    edx,ecx
  230280:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  230287:	48 89 95 28 fc ff ff 	mov    QWORD PTR [rbp-0x3d8],rdx
  23028e:	72 10                	jb     2302a0 <u64toa+0x1010>
  230290:	48 8d 3d 41 31 01 00 	lea    rdi,[rip+0x13141]        # 2433d8 <__unnamed_20>
  230297:	31 c0                	xor    eax,eax
  230299:	89 c6                	mov    esi,eax
  23029b:	e8 60 b3 fd ff       	call   20b600 <panic>
  2302a0:	48 8d 05 79 87 fd ff 	lea    rax,[rip+0xfffffffffffd8779]        # 208a20 <c_digits_lut>
  2302a7:	48 8b 8d 28 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3d8]
  2302ae:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  2302b1:	48 8b 85 38 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3c8]
  2302b8:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  2302ba:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  2302be:	48 83 c6 01          	add    rsi,0x1
  2302c2:	0f 92 c2             	setb   dl
  2302c5:	48 89 b5 20 fc ff ff 	mov    QWORD PTR [rbp-0x3e0],rsi
  2302cc:	88 95 1f fc ff ff    	mov    BYTE PTR [rbp-0x3e1],dl
  2302d2:	72 02                	jb     2302d6 <u64toa+0x1046>
  2302d4:	eb 10                	jmp    2302e6 <u64toa+0x1056>
  2302d6:	48 8d 3d eb 2e 01 00 	lea    rdi,[rip+0x12eeb]        # 2431c8 <__unnamed_4>
  2302dd:	31 c0                	xor    eax,eax
  2302df:	89 c6                	mov    esi,eax
  2302e1:	e8 1a b3 fd ff       	call   20b600 <panic>
  2302e6:	48 8b 85 20 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e0]
  2302ed:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        if (v < 10000) {
  2302f1:	e9 c8 f1 ff ff       	jmp    22f4be <u64toa+0x22e>
  2302f6:	b8 00 e1 f5 05       	mov    eax,0x5f5e100
  2302fb:	89 c1                	mov    ecx,eax
        const v0: u32 = @intCast(u32, value / kTen8);
  2302fd:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
  230304:	31 d2                	xor    edx,edx
  230306:	48 f7 f1             	div    rcx
  230309:	89 c6                	mov    esi,eax
  23030b:	89 f7                	mov    edi,esi
  23030d:	89 f9                	mov    ecx,edi
  23030f:	48 39 c8             	cmp    rax,rcx
  230312:	89 b5 18 fc ff ff    	mov    DWORD PTR [rbp-0x3e8],esi
  230318:	74 12                	je     23032c <u64toa+0x109c>
  23031a:	eb 32                	jmp    23034e <u64toa+0x10be>
  23031c:	48 8d 3d 1d 2f 01 00 	lea    rdi,[rip+0x12f1d]        # 243240 <__unnamed_7>
  230323:	31 c0                	xor    eax,eax
  230325:	89 c6                	mov    esi,eax
  230327:	e8 d4 b2 fd ff       	call   20b600 <panic>
  23032c:	31 c0                	xor    eax,eax
  23032e:	88 c1                	mov    cl,al
  230330:	8b 85 18 fc ff ff    	mov    eax,DWORD PTR [rbp-0x3e8]
  230336:	89 85 78 ff ff ff    	mov    DWORD PTR [rbp-0x88],eax
        const v1: u32 = @intCast(u32, value % kTen8);
  23033c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  230340:	f6 c1 01             	test   cl,0x1
  230343:	48 89 85 10 fc ff ff 	mov    QWORD PTR [rbp-0x3f0],rax
  23034a:	75 38                	jne    230384 <u64toa+0x10f4>
  23034c:	eb 10                	jmp    23035e <u64toa+0x10ce>
  23034e:	48 8d 3d 33 31 01 00 	lea    rdi,[rip+0x13133]        # 243488 <__unnamed_22>
  230355:	31 c0                	xor    eax,eax
  230357:	89 c6                	mov    esi,eax
        const v0: u32 = @intCast(u32, value / kTen8);
  230359:	e8 a2 b2 fd ff       	call   20b600 <panic>
  23035e:	b8 00 e1 f5 05       	mov    eax,0x5f5e100
  230363:	89 c1                	mov    ecx,eax
        const v1: u32 = @intCast(u32, value % kTen8);
  230365:	48 8b 85 10 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3f0]
  23036c:	31 d2                	xor    edx,edx
  23036e:	48 f7 f1             	div    rcx
  230371:	89 d6                	mov    esi,edx
  230373:	89 f7                	mov    edi,esi
  230375:	89 f9                	mov    ecx,edi
  230377:	48 39 ca             	cmp    rdx,rcx
  23037a:	89 b5 0c fc ff ff    	mov    DWORD PTR [rbp-0x3f4],esi
  230380:	74 12                	je     230394 <u64toa+0x1104>
  230382:	eb 33                	jmp    2303b7 <u64toa+0x1127>
  230384:	48 8d 3d 5d 2f 01 00 	lea    rdi,[rip+0x12f5d]        # 2432e8 <__unnamed_15>
  23038b:	31 c0                	xor    eax,eax
  23038d:	89 c6                	mov    esi,eax
  23038f:	e8 6c b2 fd ff       	call   20b600 <panic>
  230394:	31 c0                	xor    eax,eax
  230396:	88 c1                	mov    cl,al
  230398:	8b 85 0c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3f4]
  23039e:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
        const b0: u32 = v0 / 10000;
  2303a4:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
  2303aa:	f6 c1 01             	test   cl,0x1
  2303ad:	89 85 08 fc ff ff    	mov    DWORD PTR [rbp-0x3f8],eax
  2303b3:	75 4c                	jne    230401 <u64toa+0x1171>
  2303b5:	eb 10                	jmp    2303c7 <u64toa+0x1137>
  2303b7:	48 8d 3d ca 30 01 00 	lea    rdi,[rip+0x130ca]        # 243488 <__unnamed_22>
  2303be:	31 c0                	xor    eax,eax
  2303c0:	89 c6                	mov    esi,eax
        const v1: u32 = @intCast(u32, value % kTen8);
  2303c2:	e8 39 b2 fd ff       	call   20b600 <panic>
  2303c7:	31 c0                	xor    eax,eax
  2303c9:	88 c1                	mov    cl,al
  2303cb:	b8 10 27 00 00       	mov    eax,0x2710
        const b0: u32 = v0 / 10000;
  2303d0:	8b 95 08 fc ff ff    	mov    edx,DWORD PTR [rbp-0x3f8]
  2303d6:	89 85 04 fc ff ff    	mov    DWORD PTR [rbp-0x3fc],eax
  2303dc:	89 d0                	mov    eax,edx
  2303de:	31 d2                	xor    edx,edx
  2303e0:	8b b5 04 fc ff ff    	mov    esi,DWORD PTR [rbp-0x3fc]
  2303e6:	f7 f6                	div    esi
  2303e8:	89 85 70 ff ff ff    	mov    DWORD PTR [rbp-0x90],eax
        const c0: u32 = v0 % 10000;
  2303ee:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
  2303f4:	f6 c1 01             	test   cl,0x1
  2303f7:	89 85 00 fc ff ff    	mov    DWORD PTR [rbp-0x400],eax
  2303fd:	75 4c                	jne    23044b <u64toa+0x11bb>
  2303ff:	eb 10                	jmp    230411 <u64toa+0x1181>
  230401:	48 8d 3d 38 2e 01 00 	lea    rdi,[rip+0x12e38]        # 243240 <__unnamed_7>
  230408:	31 c0                	xor    eax,eax
  23040a:	89 c6                	mov    esi,eax
        const b0: u32 = v0 / 10000;
  23040c:	e8 ef b1 fd ff       	call   20b600 <panic>
  230411:	31 c0                	xor    eax,eax
  230413:	88 c1                	mov    cl,al
  230415:	b8 10 27 00 00       	mov    eax,0x2710
        const c0: u32 = v0 % 10000;
  23041a:	8b 95 00 fc ff ff    	mov    edx,DWORD PTR [rbp-0x400]
  230420:	89 85 fc fb ff ff    	mov    DWORD PTR [rbp-0x404],eax
  230426:	89 d0                	mov    eax,edx
  230428:	31 d2                	xor    edx,edx
  23042a:	8b b5 fc fb ff ff    	mov    esi,DWORD PTR [rbp-0x404]
  230430:	f7 f6                	div    esi
  230432:	89 95 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],edx
        const d1: u32 = (b0 / 100) << 1;
  230438:	8b 95 70 ff ff ff    	mov    edx,DWORD PTR [rbp-0x90]
  23043e:	f6 c1 01             	test   cl,0x1
  230441:	89 95 f8 fb ff ff    	mov    DWORD PTR [rbp-0x408],edx
  230447:	75 4f                	jne    230498 <u64toa+0x1208>
  230449:	eb 10                	jmp    23045b <u64toa+0x11cb>
  23044b:	48 8d 3d 96 2e 01 00 	lea    rdi,[rip+0x12e96]        # 2432e8 <__unnamed_15>
  230452:	31 c0                	xor    eax,eax
  230454:	89 c6                	mov    esi,eax
        const c0: u32 = v0 % 10000;
  230456:	e8 a5 b1 fd ff       	call   20b600 <panic>
  23045b:	31 c0                	xor    eax,eax
  23045d:	88 c1                	mov    cl,al
  23045f:	b8 64 00 00 00       	mov    eax,0x64
        const d1: u32 = (b0 / 100) << 1;
  230464:	8b 95 f8 fb ff ff    	mov    edx,DWORD PTR [rbp-0x408]
  23046a:	89 85 f4 fb ff ff    	mov    DWORD PTR [rbp-0x40c],eax
  230470:	89 d0                	mov    eax,edx
  230472:	31 d2                	xor    edx,edx
  230474:	8b b5 f4 fb ff ff    	mov    esi,DWORD PTR [rbp-0x40c]
  23047a:	f7 f6                	div    esi
  23047c:	c1 e0 01             	shl    eax,0x1
  23047f:	89 85 68 ff ff ff    	mov    DWORD PTR [rbp-0x98],eax
        const d2: u32 = (b0 % 100) << 1;
  230485:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [rbp-0x90]
  23048b:	f6 c1 01             	test   cl,0x1
  23048e:	89 85 f0 fb ff ff    	mov    DWORD PTR [rbp-0x410],eax
  230494:	75 4f                	jne    2304e5 <u64toa+0x1255>
  230496:	eb 10                	jmp    2304a8 <u64toa+0x1218>
  230498:	48 8d 3d a1 2d 01 00 	lea    rdi,[rip+0x12da1]        # 243240 <__unnamed_7>
  23049f:	31 c0                	xor    eax,eax
  2304a1:	89 c6                	mov    esi,eax
        const d1: u32 = (b0 / 100) << 1;
  2304a3:	e8 58 b1 fd ff       	call   20b600 <panic>
  2304a8:	31 c0                	xor    eax,eax
  2304aa:	88 c1                	mov    cl,al
  2304ac:	b8 64 00 00 00       	mov    eax,0x64
        const d2: u32 = (b0 % 100) << 1;
  2304b1:	8b 95 f0 fb ff ff    	mov    edx,DWORD PTR [rbp-0x410]
  2304b7:	89 85 ec fb ff ff    	mov    DWORD PTR [rbp-0x414],eax
  2304bd:	89 d0                	mov    eax,edx
  2304bf:	31 d2                	xor    edx,edx
  2304c1:	8b b5 ec fb ff ff    	mov    esi,DWORD PTR [rbp-0x414]
  2304c7:	f7 f6                	div    esi
  2304c9:	c1 e2 01             	shl    edx,0x1
  2304cc:	89 95 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],edx
        const d3: u32 = (c0 / 100) << 1;
  2304d2:	8b 95 6c ff ff ff    	mov    edx,DWORD PTR [rbp-0x94]
  2304d8:	f6 c1 01             	test   cl,0x1
  2304db:	89 95 e8 fb ff ff    	mov    DWORD PTR [rbp-0x418],edx
  2304e1:	75 4f                	jne    230532 <u64toa+0x12a2>
  2304e3:	eb 10                	jmp    2304f5 <u64toa+0x1265>
  2304e5:	48 8d 3d fc 2d 01 00 	lea    rdi,[rip+0x12dfc]        # 2432e8 <__unnamed_15>
  2304ec:	31 c0                	xor    eax,eax
  2304ee:	89 c6                	mov    esi,eax
        const d2: u32 = (b0 % 100) << 1;
  2304f0:	e8 0b b1 fd ff       	call   20b600 <panic>
  2304f5:	31 c0                	xor    eax,eax
  2304f7:	88 c1                	mov    cl,al
  2304f9:	b8 64 00 00 00       	mov    eax,0x64
        const d3: u32 = (c0 / 100) << 1;
  2304fe:	8b 95 e8 fb ff ff    	mov    edx,DWORD PTR [rbp-0x418]
  230504:	89 85 e4 fb ff ff    	mov    DWORD PTR [rbp-0x41c],eax
  23050a:	89 d0                	mov    eax,edx
  23050c:	31 d2                	xor    edx,edx
  23050e:	8b b5 e4 fb ff ff    	mov    esi,DWORD PTR [rbp-0x41c]
  230514:	f7 f6                	div    esi
  230516:	c1 e0 01             	shl    eax,0x1
  230519:	89 85 60 ff ff ff    	mov    DWORD PTR [rbp-0xa0],eax
        const d4: u32 = (c0 % 100) << 1;
  23051f:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
  230525:	f6 c1 01             	test   cl,0x1
  230528:	89 85 e0 fb ff ff    	mov    DWORD PTR [rbp-0x420],eax
  23052e:	75 4f                	jne    23057f <u64toa+0x12ef>
  230530:	eb 10                	jmp    230542 <u64toa+0x12b2>
  230532:	48 8d 3d 07 2d 01 00 	lea    rdi,[rip+0x12d07]        # 243240 <__unnamed_7>
  230539:	31 c0                	xor    eax,eax
  23053b:	89 c6                	mov    esi,eax
        const d3: u32 = (c0 / 100) << 1;
  23053d:	e8 be b0 fd ff       	call   20b600 <panic>
  230542:	31 c0                	xor    eax,eax
  230544:	88 c1                	mov    cl,al
  230546:	b8 64 00 00 00       	mov    eax,0x64
        const d4: u32 = (c0 % 100) << 1;
  23054b:	8b 95 e0 fb ff ff    	mov    edx,DWORD PTR [rbp-0x420]
  230551:	89 85 dc fb ff ff    	mov    DWORD PTR [rbp-0x424],eax
  230557:	89 d0                	mov    eax,edx
  230559:	31 d2                	xor    edx,edx
  23055b:	8b b5 dc fb ff ff    	mov    esi,DWORD PTR [rbp-0x424]
  230561:	f7 f6                	div    esi
  230563:	c1 e2 01             	shl    edx,0x1
  230566:	89 95 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],edx
        const b1: u32 = v1 / 10000;
  23056c:	8b 95 74 ff ff ff    	mov    edx,DWORD PTR [rbp-0x8c]
  230572:	f6 c1 01             	test   cl,0x1
  230575:	89 95 d8 fb ff ff    	mov    DWORD PTR [rbp-0x428],edx
  23057b:	75 4c                	jne    2305c9 <u64toa+0x1339>
  23057d:	eb 10                	jmp    23058f <u64toa+0x12ff>
  23057f:	48 8d 3d 62 2d 01 00 	lea    rdi,[rip+0x12d62]        # 2432e8 <__unnamed_15>
  230586:	31 c0                	xor    eax,eax
  230588:	89 c6                	mov    esi,eax
        const d4: u32 = (c0 % 100) << 1;
  23058a:	e8 71 b0 fd ff       	call   20b600 <panic>
  23058f:	31 c0                	xor    eax,eax
  230591:	88 c1                	mov    cl,al
  230593:	b8 10 27 00 00       	mov    eax,0x2710
        const b1: u32 = v1 / 10000;
  230598:	8b 95 d8 fb ff ff    	mov    edx,DWORD PTR [rbp-0x428]
  23059e:	89 85 d4 fb ff ff    	mov    DWORD PTR [rbp-0x42c],eax
  2305a4:	89 d0                	mov    eax,edx
  2305a6:	31 d2                	xor    edx,edx
  2305a8:	8b b5 d4 fb ff ff    	mov    esi,DWORD PTR [rbp-0x42c]
  2305ae:	f7 f6                	div    esi
  2305b0:	89 85 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],eax
        const c1: u32 = v1 % 10000;
  2305b6:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
  2305bc:	f6 c1 01             	test   cl,0x1
  2305bf:	89 85 d0 fb ff ff    	mov    DWORD PTR [rbp-0x430],eax
  2305c5:	75 4c                	jne    230613 <u64toa+0x1383>
  2305c7:	eb 10                	jmp    2305d9 <u64toa+0x1349>
  2305c9:	48 8d 3d 70 2c 01 00 	lea    rdi,[rip+0x12c70]        # 243240 <__unnamed_7>
  2305d0:	31 c0                	xor    eax,eax
  2305d2:	89 c6                	mov    esi,eax
        const b1: u32 = v1 / 10000;
  2305d4:	e8 27 b0 fd ff       	call   20b600 <panic>
  2305d9:	31 c0                	xor    eax,eax
  2305db:	88 c1                	mov    cl,al
  2305dd:	b8 10 27 00 00       	mov    eax,0x2710
        const c1: u32 = v1 % 10000;
  2305e2:	8b 95 d0 fb ff ff    	mov    edx,DWORD PTR [rbp-0x430]
  2305e8:	89 85 cc fb ff ff    	mov    DWORD PTR [rbp-0x434],eax
  2305ee:	89 d0                	mov    eax,edx
  2305f0:	31 d2                	xor    edx,edx
  2305f2:	8b b5 cc fb ff ff    	mov    esi,DWORD PTR [rbp-0x434]
  2305f8:	f7 f6                	div    esi
  2305fa:	89 95 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],edx
        const d5: u32 = (b1 / 100) << 1;
  230600:	8b 95 58 ff ff ff    	mov    edx,DWORD PTR [rbp-0xa8]
  230606:	f6 c1 01             	test   cl,0x1
  230609:	89 95 c8 fb ff ff    	mov    DWORD PTR [rbp-0x438],edx
  23060f:	75 4f                	jne    230660 <u64toa+0x13d0>
  230611:	eb 10                	jmp    230623 <u64toa+0x1393>
  230613:	48 8d 3d ce 2c 01 00 	lea    rdi,[rip+0x12cce]        # 2432e8 <__unnamed_15>
  23061a:	31 c0                	xor    eax,eax
  23061c:	89 c6                	mov    esi,eax
        const c1: u32 = v1 % 10000;
  23061e:	e8 dd af fd ff       	call   20b600 <panic>
  230623:	31 c0                	xor    eax,eax
  230625:	88 c1                	mov    cl,al
  230627:	b8 64 00 00 00       	mov    eax,0x64
        const d5: u32 = (b1 / 100) << 1;
  23062c:	8b 95 c8 fb ff ff    	mov    edx,DWORD PTR [rbp-0x438]
  230632:	89 85 c4 fb ff ff    	mov    DWORD PTR [rbp-0x43c],eax
  230638:	89 d0                	mov    eax,edx
  23063a:	31 d2                	xor    edx,edx
  23063c:	8b b5 c4 fb ff ff    	mov    esi,DWORD PTR [rbp-0x43c]
  230642:	f7 f6                	div    esi
  230644:	c1 e0 01             	shl    eax,0x1
  230647:	89 85 50 ff ff ff    	mov    DWORD PTR [rbp-0xb0],eax
        const d6: u32 = (b1 % 100) << 1;
  23064d:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
  230653:	f6 c1 01             	test   cl,0x1
  230656:	89 85 c0 fb ff ff    	mov    DWORD PTR [rbp-0x440],eax
  23065c:	75 4f                	jne    2306ad <u64toa+0x141d>
  23065e:	eb 10                	jmp    230670 <u64toa+0x13e0>
  230660:	48 8d 3d d9 2b 01 00 	lea    rdi,[rip+0x12bd9]        # 243240 <__unnamed_7>
  230667:	31 c0                	xor    eax,eax
  230669:	89 c6                	mov    esi,eax
        const d5: u32 = (b1 / 100) << 1;
  23066b:	e8 90 af fd ff       	call   20b600 <panic>
  230670:	31 c0                	xor    eax,eax
  230672:	88 c1                	mov    cl,al
  230674:	b8 64 00 00 00       	mov    eax,0x64
        const d6: u32 = (b1 % 100) << 1;
  230679:	8b 95 c0 fb ff ff    	mov    edx,DWORD PTR [rbp-0x440]
  23067f:	89 85 bc fb ff ff    	mov    DWORD PTR [rbp-0x444],eax
  230685:	89 d0                	mov    eax,edx
  230687:	31 d2                	xor    edx,edx
  230689:	8b b5 bc fb ff ff    	mov    esi,DWORD PTR [rbp-0x444]
  23068f:	f7 f6                	div    esi
  230691:	c1 e2 01             	shl    edx,0x1
  230694:	89 95 4c ff ff ff    	mov    DWORD PTR [rbp-0xb4],edx
        const d7: u32 = (c1 / 100) << 1;
  23069a:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
  2306a0:	f6 c1 01             	test   cl,0x1
  2306a3:	89 95 b8 fb ff ff    	mov    DWORD PTR [rbp-0x448],edx
  2306a9:	75 4f                	jne    2306fa <u64toa+0x146a>
  2306ab:	eb 10                	jmp    2306bd <u64toa+0x142d>
  2306ad:	48 8d 3d 34 2c 01 00 	lea    rdi,[rip+0x12c34]        # 2432e8 <__unnamed_15>
  2306b4:	31 c0                	xor    eax,eax
  2306b6:	89 c6                	mov    esi,eax
        const d6: u32 = (b1 % 100) << 1;
  2306b8:	e8 43 af fd ff       	call   20b600 <panic>
  2306bd:	31 c0                	xor    eax,eax
  2306bf:	88 c1                	mov    cl,al
  2306c1:	b8 64 00 00 00       	mov    eax,0x64
        const d7: u32 = (c1 / 100) << 1;
  2306c6:	8b 95 b8 fb ff ff    	mov    edx,DWORD PTR [rbp-0x448]
  2306cc:	89 85 b4 fb ff ff    	mov    DWORD PTR [rbp-0x44c],eax
  2306d2:	89 d0                	mov    eax,edx
  2306d4:	31 d2                	xor    edx,edx
  2306d6:	8b b5 b4 fb ff ff    	mov    esi,DWORD PTR [rbp-0x44c]
  2306dc:	f7 f6                	div    esi
  2306de:	c1 e0 01             	shl    eax,0x1
  2306e1:	89 85 48 ff ff ff    	mov    DWORD PTR [rbp-0xb8],eax
        const d8: u32 = (c1 % 100) << 1;
  2306e7:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
  2306ed:	f6 c1 01             	test   cl,0x1
  2306f0:	89 85 b0 fb ff ff    	mov    DWORD PTR [rbp-0x450],eax
  2306f6:	75 53                	jne    23074b <u64toa+0x14bb>
  2306f8:	eb 10                	jmp    23070a <u64toa+0x147a>
  2306fa:	48 8d 3d 3f 2b 01 00 	lea    rdi,[rip+0x12b3f]        # 243240 <__unnamed_7>
  230701:	31 c0                	xor    eax,eax
  230703:	89 c6                	mov    esi,eax
        const d7: u32 = (c1 / 100) << 1;
  230705:	e8 f6 ae fd ff       	call   20b600 <panic>
  23070a:	48 b8 00 80 c6 a4 7e 	movabs rax,0x38d7ea4c68000
  230711:	8d 03 00 
  230714:	b9 64 00 00 00       	mov    ecx,0x64
        const d8: u32 = (c1 % 100) << 1;
  230719:	8b 95 b0 fb ff ff    	mov    edx,DWORD PTR [rbp-0x450]
  23071f:	48 89 85 a8 fb ff ff 	mov    QWORD PTR [rbp-0x458],rax
  230726:	89 d0                	mov    eax,edx
  230728:	31 d2                	xor    edx,edx
  23072a:	f7 f1                	div    ecx
  23072c:	c1 e2 01             	shl    edx,0x1
  23072f:	89 95 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],edx
        if (value >= kTen15) {
  230735:	48 8b b5 a8 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x458]
  23073c:	48 39 75 f0          	cmp    QWORD PTR [rbp-0x10],rsi
  230740:	0f 83 ae ed ff ff    	jae    22f4f4 <u64toa+0x264>
  230746:	e9 ca ed ff ff       	jmp    22f515 <u64toa+0x285>
  23074b:	48 8d 3d 96 2b 01 00 	lea    rdi,[rip+0x12b96]        # 2432e8 <__unnamed_15>
  230752:	31 c0                	xor    eax,eax
  230754:	89 c6                	mov    esi,eax
        const d8: u32 = (c1 % 100) << 1;
  230756:	e8 a5 ae fd ff       	call   20b600 <panic>
  23075b:	48 8d 3d 76 2c 01 00 	lea    rdi,[rip+0x12c76]        # 2433d8 <__unnamed_20>
  230762:	31 c0                	xor    eax,eax
  230764:	89 c6                	mov    esi,eax
            buffer[buf_index] = c_digits_lut[d1];
  230766:	e8 95 ae fd ff       	call   20b600 <panic>
  23076b:	48 8b 85 90 fe ff ff 	mov    rax,QWORD PTR [rbp-0x170]
  230772:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  230779:	48 03 01             	add    rax,QWORD PTR [rcx]
  23077c:	8b 95 68 ff ff ff    	mov    edx,DWORD PTR [rbp-0x98]
  230782:	89 d6                	mov    esi,edx
  230784:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  23078b:	48 89 85 a0 fb ff ff 	mov    QWORD PTR [rbp-0x460],rax
  230792:	48 89 b5 98 fb ff ff 	mov    QWORD PTR [rbp-0x468],rsi
  230799:	72 10                	jb     2307ab <u64toa+0x151b>
  23079b:	48 8d 3d 36 2c 01 00 	lea    rdi,[rip+0x12c36]        # 2433d8 <__unnamed_20>
  2307a2:	31 c0                	xor    eax,eax
  2307a4:	89 c6                	mov    esi,eax
  2307a6:	e8 55 ae fd ff       	call   20b600 <panic>
  2307ab:	48 8d 05 6e 82 fd ff 	lea    rax,[rip+0xfffffffffffd826e]        # 208a20 <c_digits_lut>
  2307b2:	48 8b 8d 98 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x468]
  2307b9:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  2307bc:	48 8b 85 a0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x460]
  2307c3:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  2307c5:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  2307c9:	48 83 c6 01          	add    rsi,0x1
  2307cd:	0f 92 c2             	setb   dl
  2307d0:	48 89 b5 90 fb ff ff 	mov    QWORD PTR [rbp-0x470],rsi
  2307d7:	88 95 8f fb ff ff    	mov    BYTE PTR [rbp-0x471],dl
  2307dd:	72 02                	jb     2307e1 <u64toa+0x1551>
  2307df:	eb 10                	jmp    2307f1 <u64toa+0x1561>
  2307e1:	48 8d 3d e0 29 01 00 	lea    rdi,[rip+0x129e0]        # 2431c8 <__unnamed_4>
  2307e8:	31 c0                	xor    eax,eax
  2307ea:	89 c6                	mov    esi,eax
  2307ec:	e8 0f ae fd ff       	call   20b600 <panic>
  2307f1:	48 8b 85 90 fb ff ff 	mov    rax,QWORD PTR [rbp-0x470]
  2307f8:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        if (value >= kTen15) {
  2307fc:	e9 16 ed ff ff       	jmp    22f517 <u64toa+0x287>
  230801:	48 8d 3d d0 2b 01 00 	lea    rdi,[rip+0x12bd0]        # 2433d8 <__unnamed_20>
  230808:	31 c0                	xor    eax,eax
  23080a:	89 c6                	mov    esi,eax
            buffer[buf_index] = c_digits_lut[d1 + 1];
  23080c:	e8 ef ad fd ff       	call   20b600 <panic>
  230811:	48 8b 85 88 fe ff ff 	mov    rax,QWORD PTR [rbp-0x178]
  230818:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  23081f:	48 03 01             	add    rax,QWORD PTR [rcx]
  230822:	8b 95 68 ff ff ff    	mov    edx,DWORD PTR [rbp-0x98]
  230828:	83 c2 01             	add    edx,0x1
  23082b:	40 0f 92 c6          	setb   sil
  23082f:	48 89 85 80 fb ff ff 	mov    QWORD PTR [rbp-0x480],rax
  230836:	89 95 7c fb ff ff    	mov    DWORD PTR [rbp-0x484],edx
  23083c:	40 88 b5 7b fb ff ff 	mov    BYTE PTR [rbp-0x485],sil
  230843:	72 02                	jb     230847 <u64toa+0x15b7>
  230845:	eb 10                	jmp    230857 <u64toa+0x15c7>
  230847:	48 8d 3d 7a 29 01 00 	lea    rdi,[rip+0x1297a]        # 2431c8 <__unnamed_4>
  23084e:	31 c0                	xor    eax,eax
  230850:	89 c6                	mov    esi,eax
  230852:	e8 a9 ad fd ff       	call   20b600 <panic>
  230857:	8b 85 7c fb ff ff    	mov    eax,DWORD PTR [rbp-0x484]
  23085d:	89 c1                	mov    ecx,eax
  23085f:	89 ca                	mov    edx,ecx
  230861:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  230868:	48 89 95 70 fb ff ff 	mov    QWORD PTR [rbp-0x490],rdx
  23086f:	72 10                	jb     230881 <u64toa+0x15f1>
  230871:	48 8d 3d 60 2b 01 00 	lea    rdi,[rip+0x12b60]        # 2433d8 <__unnamed_20>
  230878:	31 c0                	xor    eax,eax
  23087a:	89 c6                	mov    esi,eax
  23087c:	e8 7f ad fd ff       	call   20b600 <panic>
  230881:	48 8d 05 98 81 fd ff 	lea    rax,[rip+0xfffffffffffd8198]        # 208a20 <c_digits_lut>
  230888:	48 8b 8d 70 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x490]
  23088f:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  230892:	48 8b 85 80 fb ff ff 	mov    rax,QWORD PTR [rbp-0x480]
  230899:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  23089b:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  23089f:	48 83 c6 01          	add    rsi,0x1
  2308a3:	0f 92 c2             	setb   dl
  2308a6:	48 89 b5 68 fb ff ff 	mov    QWORD PTR [rbp-0x498],rsi
  2308ad:	88 95 67 fb ff ff    	mov    BYTE PTR [rbp-0x499],dl
  2308b3:	72 02                	jb     2308b7 <u64toa+0x1627>
  2308b5:	eb 10                	jmp    2308c7 <u64toa+0x1637>
  2308b7:	48 8d 3d 0a 29 01 00 	lea    rdi,[rip+0x1290a]        # 2431c8 <__unnamed_4>
  2308be:	31 c0                	xor    eax,eax
  2308c0:	89 c6                	mov    esi,eax
  2308c2:	e8 39 ad fd ff       	call   20b600 <panic>
  2308c7:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
  2308ce:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        if (value >= kTen14) {
  2308d2:	e9 73 ec ff ff       	jmp    22f54a <u64toa+0x2ba>
  2308d7:	48 8d 3d fa 2a 01 00 	lea    rdi,[rip+0x12afa]        # 2433d8 <__unnamed_20>
  2308de:	31 c0                	xor    eax,eax
  2308e0:	89 c6                	mov    esi,eax
            buffer[buf_index] = c_digits_lut[d2];
  2308e2:	e8 19 ad fd ff       	call   20b600 <panic>
  2308e7:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
  2308ee:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  2308f5:	48 03 01             	add    rax,QWORD PTR [rcx]
  2308f8:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
  2308fe:	89 d6                	mov    esi,edx
  230900:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  230907:	48 89 85 58 fb ff ff 	mov    QWORD PTR [rbp-0x4a8],rax
  23090e:	48 89 b5 50 fb ff ff 	mov    QWORD PTR [rbp-0x4b0],rsi
  230915:	72 10                	jb     230927 <u64toa+0x1697>
  230917:	48 8d 3d ba 2a 01 00 	lea    rdi,[rip+0x12aba]        # 2433d8 <__unnamed_20>
  23091e:	31 c0                	xor    eax,eax
  230920:	89 c6                	mov    esi,eax
  230922:	e8 d9 ac fd ff       	call   20b600 <panic>
  230927:	48 8d 05 f2 80 fd ff 	lea    rax,[rip+0xfffffffffffd80f2]        # 208a20 <c_digits_lut>
  23092e:	48 8b 8d 50 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x4b0]
  230935:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  230938:	48 8b 85 58 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4a8]
  23093f:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  230941:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  230945:	48 83 c6 01          	add    rsi,0x1
  230949:	0f 92 c2             	setb   dl
  23094c:	48 89 b5 48 fb ff ff 	mov    QWORD PTR [rbp-0x4b8],rsi
  230953:	88 95 47 fb ff ff    	mov    BYTE PTR [rbp-0x4b9],dl
  230959:	72 02                	jb     23095d <u64toa+0x16cd>
  23095b:	eb 10                	jmp    23096d <u64toa+0x16dd>
  23095d:	48 8d 3d 64 28 01 00 	lea    rdi,[rip+0x12864]        # 2431c8 <__unnamed_4>
  230964:	31 c0                	xor    eax,eax
  230966:	89 c6                	mov    esi,eax
  230968:	e8 93 ac fd ff       	call   20b600 <panic>
  23096d:	48 8b 85 48 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4b8]
  230974:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        if (value >= kTen13) {
  230978:	e9 00 ec ff ff       	jmp    22f57d <u64toa+0x2ed>
  23097d:	48 8d 3d 54 2a 01 00 	lea    rdi,[rip+0x12a54]        # 2433d8 <__unnamed_20>
  230984:	31 c0                	xor    eax,eax
  230986:	89 c6                	mov    esi,eax
            buffer[buf_index] = c_digits_lut[d2 + 1];
  230988:	e8 73 ac fd ff       	call   20b600 <panic>
  23098d:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
  230994:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  23099b:	48 03 01             	add    rax,QWORD PTR [rcx]
  23099e:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
  2309a4:	83 c2 01             	add    edx,0x1
  2309a7:	40 0f 92 c6          	setb   sil
  2309ab:	48 89 85 38 fb ff ff 	mov    QWORD PTR [rbp-0x4c8],rax
  2309b2:	89 95 34 fb ff ff    	mov    DWORD PTR [rbp-0x4cc],edx
  2309b8:	40 88 b5 33 fb ff ff 	mov    BYTE PTR [rbp-0x4cd],sil
  2309bf:	72 02                	jb     2309c3 <u64toa+0x1733>
  2309c1:	eb 10                	jmp    2309d3 <u64toa+0x1743>
  2309c3:	48 8d 3d fe 27 01 00 	lea    rdi,[rip+0x127fe]        # 2431c8 <__unnamed_4>
  2309ca:	31 c0                	xor    eax,eax
  2309cc:	89 c6                	mov    esi,eax
  2309ce:	e8 2d ac fd ff       	call   20b600 <panic>
  2309d3:	8b 85 34 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4cc]
  2309d9:	89 c1                	mov    ecx,eax
  2309db:	89 ca                	mov    edx,ecx
  2309dd:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  2309e4:	48 89 95 28 fb ff ff 	mov    QWORD PTR [rbp-0x4d8],rdx
  2309eb:	72 10                	jb     2309fd <u64toa+0x176d>
  2309ed:	48 8d 3d e4 29 01 00 	lea    rdi,[rip+0x129e4]        # 2433d8 <__unnamed_20>
  2309f4:	31 c0                	xor    eax,eax
  2309f6:	89 c6                	mov    esi,eax
  2309f8:	e8 03 ac fd ff       	call   20b600 <panic>
  2309fd:	48 8d 05 1c 80 fd ff 	lea    rax,[rip+0xfffffffffffd801c]        # 208a20 <c_digits_lut>
  230a04:	48 8b 8d 28 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x4d8]
  230a0b:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  230a0e:	48 8b 85 38 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4c8]
  230a15:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  230a17:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  230a1b:	48 83 c6 01          	add    rsi,0x1
  230a1f:	0f 92 c2             	setb   dl
  230a22:	48 89 b5 20 fb ff ff 	mov    QWORD PTR [rbp-0x4e0],rsi
  230a29:	88 95 1f fb ff ff    	mov    BYTE PTR [rbp-0x4e1],dl
  230a2f:	72 02                	jb     230a33 <u64toa+0x17a3>
  230a31:	eb 10                	jmp    230a43 <u64toa+0x17b3>
  230a33:	48 8d 3d 8e 27 01 00 	lea    rdi,[rip+0x1278e]        # 2431c8 <__unnamed_4>
  230a3a:	31 c0                	xor    eax,eax
  230a3c:	89 c6                	mov    esi,eax
  230a3e:	e8 bd ab fd ff       	call   20b600 <panic>
  230a43:	48 8b 85 20 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4e0]
  230a4a:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        if (value >= kTen12) {
  230a4e:	e9 5d eb ff ff       	jmp    22f5b0 <u64toa+0x320>
  230a53:	48 8d 3d 7e 29 01 00 	lea    rdi,[rip+0x1297e]        # 2433d8 <__unnamed_20>
  230a5a:	31 c0                	xor    eax,eax
  230a5c:	89 c6                	mov    esi,eax
            buffer[buf_index] = c_digits_lut[d3];
  230a5e:	e8 9d ab fd ff       	call   20b600 <panic>
  230a63:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
  230a6a:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  230a71:	48 03 01             	add    rax,QWORD PTR [rcx]
  230a74:	8b 95 60 ff ff ff    	mov    edx,DWORD PTR [rbp-0xa0]
  230a7a:	89 d6                	mov    esi,edx
  230a7c:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  230a83:	48 89 85 10 fb ff ff 	mov    QWORD PTR [rbp-0x4f0],rax
  230a8a:	48 89 b5 08 fb ff ff 	mov    QWORD PTR [rbp-0x4f8],rsi
  230a91:	72 10                	jb     230aa3 <u64toa+0x1813>
  230a93:	48 8d 3d 3e 29 01 00 	lea    rdi,[rip+0x1293e]        # 2433d8 <__unnamed_20>
  230a9a:	31 c0                	xor    eax,eax
  230a9c:	89 c6                	mov    esi,eax
  230a9e:	e8 5d ab fd ff       	call   20b600 <panic>
  230aa3:	48 8d 05 76 7f fd ff 	lea    rax,[rip+0xfffffffffffd7f76]        # 208a20 <c_digits_lut>
  230aaa:	48 8b 8d 08 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x4f8]
  230ab1:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  230ab4:	48 8b 85 10 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f0]
  230abb:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  230abd:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  230ac1:	48 83 c6 01          	add    rsi,0x1
  230ac5:	0f 92 c2             	setb   dl
  230ac8:	48 89 b5 00 fb ff ff 	mov    QWORD PTR [rbp-0x500],rsi
  230acf:	88 95 ff fa ff ff    	mov    BYTE PTR [rbp-0x501],dl
  230ad5:	72 02                	jb     230ad9 <u64toa+0x1849>
  230ad7:	eb 10                	jmp    230ae9 <u64toa+0x1859>
  230ad9:	48 8d 3d e8 26 01 00 	lea    rdi,[rip+0x126e8]        # 2431c8 <__unnamed_4>
  230ae0:	31 c0                	xor    eax,eax
  230ae2:	89 c6                	mov    esi,eax
  230ae4:	e8 17 ab fd ff       	call   20b600 <panic>
  230ae9:	48 8b 85 00 fb ff ff 	mov    rax,QWORD PTR [rbp-0x500]
  230af0:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        if (value >= kTen11) {
  230af4:	e9 ea ea ff ff       	jmp    22f5e3 <u64toa+0x353>
  230af9:	48 8d 3d d8 28 01 00 	lea    rdi,[rip+0x128d8]        # 2433d8 <__unnamed_20>
  230b00:	31 c0                	xor    eax,eax
  230b02:	89 c6                	mov    esi,eax
            buffer[buf_index] = c_digits_lut[d3 + 1];
  230b04:	e8 f7 aa fd ff       	call   20b600 <panic>
  230b09:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
  230b10:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  230b17:	48 03 01             	add    rax,QWORD PTR [rcx]
  230b1a:	8b 95 60 ff ff ff    	mov    edx,DWORD PTR [rbp-0xa0]
  230b20:	83 c2 01             	add    edx,0x1
  230b23:	40 0f 92 c6          	setb   sil
  230b27:	48 89 85 f0 fa ff ff 	mov    QWORD PTR [rbp-0x510],rax
  230b2e:	89 95 ec fa ff ff    	mov    DWORD PTR [rbp-0x514],edx
  230b34:	40 88 b5 eb fa ff ff 	mov    BYTE PTR [rbp-0x515],sil
  230b3b:	72 02                	jb     230b3f <u64toa+0x18af>
  230b3d:	eb 10                	jmp    230b4f <u64toa+0x18bf>
  230b3f:	48 8d 3d 82 26 01 00 	lea    rdi,[rip+0x12682]        # 2431c8 <__unnamed_4>
  230b46:	31 c0                	xor    eax,eax
  230b48:	89 c6                	mov    esi,eax
  230b4a:	e8 b1 aa fd ff       	call   20b600 <panic>
  230b4f:	8b 85 ec fa ff ff    	mov    eax,DWORD PTR [rbp-0x514]
  230b55:	89 c1                	mov    ecx,eax
  230b57:	89 ca                	mov    edx,ecx
  230b59:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  230b60:	48 89 95 e0 fa ff ff 	mov    QWORD PTR [rbp-0x520],rdx
  230b67:	72 10                	jb     230b79 <u64toa+0x18e9>
  230b69:	48 8d 3d 68 28 01 00 	lea    rdi,[rip+0x12868]        # 2433d8 <__unnamed_20>
  230b70:	31 c0                	xor    eax,eax
  230b72:	89 c6                	mov    esi,eax
  230b74:	e8 87 aa fd ff       	call   20b600 <panic>
  230b79:	48 8d 05 a0 7e fd ff 	lea    rax,[rip+0xfffffffffffd7ea0]        # 208a20 <c_digits_lut>
  230b80:	48 8b 8d e0 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x520]
  230b87:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  230b8a:	48 8b 85 f0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x510]
  230b91:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  230b93:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  230b97:	48 83 c6 01          	add    rsi,0x1
  230b9b:	0f 92 c2             	setb   dl
  230b9e:	48 89 b5 d8 fa ff ff 	mov    QWORD PTR [rbp-0x528],rsi
  230ba5:	88 95 d7 fa ff ff    	mov    BYTE PTR [rbp-0x529],dl
  230bab:	72 02                	jb     230baf <u64toa+0x191f>
  230bad:	eb 10                	jmp    230bbf <u64toa+0x192f>
  230baf:	48 8d 3d 12 26 01 00 	lea    rdi,[rip+0x12612]        # 2431c8 <__unnamed_4>
  230bb6:	31 c0                	xor    eax,eax
  230bb8:	89 c6                	mov    esi,eax
  230bba:	e8 41 aa fd ff       	call   20b600 <panic>
  230bbf:	48 8b 85 d8 fa ff ff 	mov    rax,QWORD PTR [rbp-0x528]
  230bc6:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        if (value >= kTen10) {
  230bca:	e9 47 ea ff ff       	jmp    22f616 <u64toa+0x386>
  230bcf:	48 8d 3d 02 28 01 00 	lea    rdi,[rip+0x12802]        # 2433d8 <__unnamed_20>
  230bd6:	31 c0                	xor    eax,eax
  230bd8:	89 c6                	mov    esi,eax
            buffer[buf_index] = c_digits_lut[d4];
  230bda:	e8 21 aa fd ff       	call   20b600 <panic>
  230bdf:	48 8b 85 60 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a0]
  230be6:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  230bed:	48 03 01             	add    rax,QWORD PTR [rcx]
  230bf0:	8b 95 5c ff ff ff    	mov    edx,DWORD PTR [rbp-0xa4]
  230bf6:	89 d6                	mov    esi,edx
  230bf8:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  230bff:	48 89 85 c8 fa ff ff 	mov    QWORD PTR [rbp-0x538],rax
  230c06:	48 89 b5 c0 fa ff ff 	mov    QWORD PTR [rbp-0x540],rsi
  230c0d:	72 10                	jb     230c1f <u64toa+0x198f>
  230c0f:	48 8d 3d c2 27 01 00 	lea    rdi,[rip+0x127c2]        # 2433d8 <__unnamed_20>
  230c16:	31 c0                	xor    eax,eax
  230c18:	89 c6                	mov    esi,eax
  230c1a:	e8 e1 a9 fd ff       	call   20b600 <panic>
  230c1f:	48 8d 05 fa 7d fd ff 	lea    rax,[rip+0xfffffffffffd7dfa]        # 208a20 <c_digits_lut>
  230c26:	48 8b 8d c0 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x540]
  230c2d:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  230c30:	48 8b 85 c8 fa ff ff 	mov    rax,QWORD PTR [rbp-0x538]
  230c37:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  230c39:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  230c3d:	48 83 c6 01          	add    rsi,0x1
  230c41:	0f 92 c2             	setb   dl
  230c44:	48 89 b5 b8 fa ff ff 	mov    QWORD PTR [rbp-0x548],rsi
  230c4b:	88 95 b7 fa ff ff    	mov    BYTE PTR [rbp-0x549],dl
  230c51:	72 02                	jb     230c55 <u64toa+0x19c5>
  230c53:	eb 10                	jmp    230c65 <u64toa+0x19d5>
  230c55:	48 8d 3d 6c 25 01 00 	lea    rdi,[rip+0x1256c]        # 2431c8 <__unnamed_4>
  230c5c:	31 c0                	xor    eax,eax
  230c5e:	89 c6                	mov    esi,eax
  230c60:	e8 9b a9 fd ff       	call   20b600 <panic>
  230c65:	48 8b 85 b8 fa ff ff 	mov    rax,QWORD PTR [rbp-0x548]
  230c6c:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        if (value >= kTen9) {
  230c70:	e9 ce e9 ff ff       	jmp    22f643 <u64toa+0x3b3>
  230c75:	48 8d 3d 5c 27 01 00 	lea    rdi,[rip+0x1275c]        # 2433d8 <__unnamed_20>
  230c7c:	31 c0                	xor    eax,eax
  230c7e:	89 c6                	mov    esi,eax
            buffer[buf_index] = c_digits_lut[d4 + 1];
  230c80:	e8 7b a9 fd ff       	call   20b600 <panic>
  230c85:	48 8b 85 58 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a8]
  230c8c:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  230c93:	48 03 01             	add    rax,QWORD PTR [rcx]
  230c96:	8b 95 5c ff ff ff    	mov    edx,DWORD PTR [rbp-0xa4]
  230c9c:	83 c2 01             	add    edx,0x1
  230c9f:	40 0f 92 c6          	setb   sil
  230ca3:	48 89 85 a8 fa ff ff 	mov    QWORD PTR [rbp-0x558],rax
  230caa:	89 95 a4 fa ff ff    	mov    DWORD PTR [rbp-0x55c],edx
  230cb0:	40 88 b5 a3 fa ff ff 	mov    BYTE PTR [rbp-0x55d],sil
  230cb7:	72 02                	jb     230cbb <u64toa+0x1a2b>
  230cb9:	eb 10                	jmp    230ccb <u64toa+0x1a3b>
  230cbb:	48 8d 3d 06 25 01 00 	lea    rdi,[rip+0x12506]        # 2431c8 <__unnamed_4>
  230cc2:	31 c0                	xor    eax,eax
  230cc4:	89 c6                	mov    esi,eax
  230cc6:	e8 35 a9 fd ff       	call   20b600 <panic>
  230ccb:	8b 85 a4 fa ff ff    	mov    eax,DWORD PTR [rbp-0x55c]
  230cd1:	89 c1                	mov    ecx,eax
  230cd3:	89 ca                	mov    edx,ecx
  230cd5:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  230cdc:	48 89 95 98 fa ff ff 	mov    QWORD PTR [rbp-0x568],rdx
  230ce3:	72 10                	jb     230cf5 <u64toa+0x1a65>
  230ce5:	48 8d 3d ec 26 01 00 	lea    rdi,[rip+0x126ec]        # 2433d8 <__unnamed_20>
  230cec:	31 c0                	xor    eax,eax
  230cee:	89 c6                	mov    esi,eax
  230cf0:	e8 0b a9 fd ff       	call   20b600 <panic>
  230cf5:	48 8d 05 24 7d fd ff 	lea    rax,[rip+0xfffffffffffd7d24]        # 208a20 <c_digits_lut>
  230cfc:	48 8b 8d 98 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x568]
  230d03:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  230d06:	48 8b 85 a8 fa ff ff 	mov    rax,QWORD PTR [rbp-0x558]
  230d0d:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  230d0f:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  230d13:	48 83 c6 01          	add    rsi,0x1
  230d17:	0f 92 c2             	setb   dl
  230d1a:	48 89 b5 90 fa ff ff 	mov    QWORD PTR [rbp-0x570],rsi
  230d21:	88 95 8f fa ff ff    	mov    BYTE PTR [rbp-0x571],dl
  230d27:	72 02                	jb     230d2b <u64toa+0x1a9b>
  230d29:	eb 10                	jmp    230d3b <u64toa+0x1aab>
  230d2b:	48 8d 3d 96 24 01 00 	lea    rdi,[rip+0x12496]        # 2431c8 <__unnamed_4>
  230d32:	31 c0                	xor    eax,eax
  230d34:	89 c6                	mov    esi,eax
  230d36:	e8 c5 a8 fd ff       	call   20b600 <panic>
  230d3b:	48 8b 85 90 fa ff ff 	mov    rax,QWORD PTR [rbp-0x570]
  230d42:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        if (value >= kTen8) {
  230d46:	e9 25 e9 ff ff       	jmp    22f670 <u64toa+0x3e0>
  230d4b:	48 8d 3d 86 26 01 00 	lea    rdi,[rip+0x12686]        # 2433d8 <__unnamed_20>
  230d52:	31 c0                	xor    eax,eax
  230d54:	89 c6                	mov    esi,eax
        buffer[buf_index] = c_digits_lut[d5];
  230d56:	e8 a5 a8 fd ff       	call   20b600 <panic>
  230d5b:	48 8b 85 50 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b0]
  230d62:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  230d69:	48 03 01             	add    rax,QWORD PTR [rcx]
  230d6c:	8b 95 50 ff ff ff    	mov    edx,DWORD PTR [rbp-0xb0]
  230d72:	89 d6                	mov    esi,edx
  230d74:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  230d7b:	48 89 85 80 fa ff ff 	mov    QWORD PTR [rbp-0x580],rax
  230d82:	48 89 b5 78 fa ff ff 	mov    QWORD PTR [rbp-0x588],rsi
  230d89:	72 10                	jb     230d9b <u64toa+0x1b0b>
  230d8b:	48 8d 3d 46 26 01 00 	lea    rdi,[rip+0x12646]        # 2433d8 <__unnamed_20>
  230d92:	31 c0                	xor    eax,eax
  230d94:	89 c6                	mov    esi,eax
  230d96:	e8 65 a8 fd ff       	call   20b600 <panic>
  230d9b:	48 8d 05 7e 7c fd ff 	lea    rax,[rip+0xfffffffffffd7c7e]        # 208a20 <c_digits_lut>
  230da2:	48 8b 8d 78 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x588]
  230da9:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  230dac:	48 8b 85 80 fa ff ff 	mov    rax,QWORD PTR [rbp-0x580]
  230db3:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  230db5:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  230db9:	48 83 c6 01          	add    rsi,0x1
  230dbd:	0f 92 c2             	setb   dl
  230dc0:	48 89 b5 70 fa ff ff 	mov    QWORD PTR [rbp-0x590],rsi
  230dc7:	88 95 6f fa ff ff    	mov    BYTE PTR [rbp-0x591],dl
  230dcd:	72 02                	jb     230dd1 <u64toa+0x1b41>
  230dcf:	eb 10                	jmp    230de1 <u64toa+0x1b51>
  230dd1:	48 8d 3d f0 23 01 00 	lea    rdi,[rip+0x123f0]        # 2431c8 <__unnamed_4>
  230dd8:	31 c0                	xor    eax,eax
  230dda:	89 c6                	mov    esi,eax
  230ddc:	e8 1f a8 fd ff       	call   20b600 <panic>
  230de1:	48 8b 85 70 fa ff ff 	mov    rax,QWORD PTR [rbp-0x590]
  230de8:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d5 + 1];
  230dec:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  230df0:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  230df7:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  230dfb:	48 89 8d 60 fa ff ff 	mov    QWORD PTR [rbp-0x5a0],rcx
  230e02:	72 10                	jb     230e14 <u64toa+0x1b84>
  230e04:	48 8d 3d cd 25 01 00 	lea    rdi,[rip+0x125cd]        # 2433d8 <__unnamed_20>
  230e0b:	31 c0                	xor    eax,eax
  230e0d:	89 c6                	mov    esi,eax
  230e0f:	e8 ec a7 fd ff       	call   20b600 <panic>
  230e14:	48 8b 85 60 fa ff ff 	mov    rax,QWORD PTR [rbp-0x5a0]
  230e1b:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  230e22:	48 03 01             	add    rax,QWORD PTR [rcx]
  230e25:	8b 95 50 ff ff ff    	mov    edx,DWORD PTR [rbp-0xb0]
  230e2b:	83 c2 01             	add    edx,0x1
  230e2e:	40 0f 92 c6          	setb   sil
  230e32:	48 89 85 58 fa ff ff 	mov    QWORD PTR [rbp-0x5a8],rax
  230e39:	89 95 54 fa ff ff    	mov    DWORD PTR [rbp-0x5ac],edx
  230e3f:	40 88 b5 53 fa ff ff 	mov    BYTE PTR [rbp-0x5ad],sil
  230e46:	72 02                	jb     230e4a <u64toa+0x1bba>
  230e48:	eb 10                	jmp    230e5a <u64toa+0x1bca>
  230e4a:	48 8d 3d 77 23 01 00 	lea    rdi,[rip+0x12377]        # 2431c8 <__unnamed_4>
  230e51:	31 c0                	xor    eax,eax
  230e53:	89 c6                	mov    esi,eax
  230e55:	e8 a6 a7 fd ff       	call   20b600 <panic>
  230e5a:	8b 85 54 fa ff ff    	mov    eax,DWORD PTR [rbp-0x5ac]
  230e60:	89 c1                	mov    ecx,eax
  230e62:	89 ca                	mov    edx,ecx
  230e64:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  230e6b:	48 89 95 48 fa ff ff 	mov    QWORD PTR [rbp-0x5b8],rdx
  230e72:	72 10                	jb     230e84 <u64toa+0x1bf4>
  230e74:	48 8d 3d 5d 25 01 00 	lea    rdi,[rip+0x1255d]        # 2433d8 <__unnamed_20>
  230e7b:	31 c0                	xor    eax,eax
  230e7d:	89 c6                	mov    esi,eax
  230e7f:	e8 7c a7 fd ff       	call   20b600 <panic>
  230e84:	48 8d 05 95 7b fd ff 	lea    rax,[rip+0xfffffffffffd7b95]        # 208a20 <c_digits_lut>
  230e8b:	48 8b 8d 48 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x5b8]
  230e92:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  230e95:	48 8b 85 58 fa ff ff 	mov    rax,QWORD PTR [rbp-0x5a8]
  230e9c:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  230e9e:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  230ea2:	48 83 c6 01          	add    rsi,0x1
  230ea6:	0f 92 c2             	setb   dl
  230ea9:	48 89 b5 40 fa ff ff 	mov    QWORD PTR [rbp-0x5c0],rsi
  230eb0:	88 95 3f fa ff ff    	mov    BYTE PTR [rbp-0x5c1],dl
  230eb6:	72 02                	jb     230eba <u64toa+0x1c2a>
  230eb8:	eb 10                	jmp    230eca <u64toa+0x1c3a>
  230eba:	48 8d 3d 07 23 01 00 	lea    rdi,[rip+0x12307]        # 2431c8 <__unnamed_4>
  230ec1:	31 c0                	xor    eax,eax
  230ec3:	89 c6                	mov    esi,eax
  230ec5:	e8 36 a7 fd ff       	call   20b600 <panic>
  230eca:	48 8b 85 40 fa ff ff 	mov    rax,QWORD PTR [rbp-0x5c0]
  230ed1:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d6];
  230ed5:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  230ed9:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  230ee0:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  230ee4:	48 89 8d 30 fa ff ff 	mov    QWORD PTR [rbp-0x5d0],rcx
  230eeb:	72 10                	jb     230efd <u64toa+0x1c6d>
  230eed:	48 8d 3d e4 24 01 00 	lea    rdi,[rip+0x124e4]        # 2433d8 <__unnamed_20>
  230ef4:	31 c0                	xor    eax,eax
  230ef6:	89 c6                	mov    esi,eax
  230ef8:	e8 03 a7 fd ff       	call   20b600 <panic>
  230efd:	48 8b 85 30 fa ff ff 	mov    rax,QWORD PTR [rbp-0x5d0]
  230f04:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  230f0b:	48 03 01             	add    rax,QWORD PTR [rcx]
  230f0e:	8b 95 4c ff ff ff    	mov    edx,DWORD PTR [rbp-0xb4]
  230f14:	89 d6                	mov    esi,edx
  230f16:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  230f1d:	48 89 85 28 fa ff ff 	mov    QWORD PTR [rbp-0x5d8],rax
  230f24:	48 89 b5 20 fa ff ff 	mov    QWORD PTR [rbp-0x5e0],rsi
  230f2b:	72 10                	jb     230f3d <u64toa+0x1cad>
  230f2d:	48 8d 3d a4 24 01 00 	lea    rdi,[rip+0x124a4]        # 2433d8 <__unnamed_20>
  230f34:	31 c0                	xor    eax,eax
  230f36:	89 c6                	mov    esi,eax
  230f38:	e8 c3 a6 fd ff       	call   20b600 <panic>
  230f3d:	48 8d 05 dc 7a fd ff 	lea    rax,[rip+0xfffffffffffd7adc]        # 208a20 <c_digits_lut>
  230f44:	48 8b 8d 20 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x5e0]
  230f4b:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  230f4e:	48 8b 85 28 fa ff ff 	mov    rax,QWORD PTR [rbp-0x5d8]
  230f55:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  230f57:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  230f5b:	48 83 c6 01          	add    rsi,0x1
  230f5f:	0f 92 c2             	setb   dl
  230f62:	48 89 b5 18 fa ff ff 	mov    QWORD PTR [rbp-0x5e8],rsi
  230f69:	88 95 17 fa ff ff    	mov    BYTE PTR [rbp-0x5e9],dl
  230f6f:	72 02                	jb     230f73 <u64toa+0x1ce3>
  230f71:	eb 10                	jmp    230f83 <u64toa+0x1cf3>
  230f73:	48 8d 3d 4e 22 01 00 	lea    rdi,[rip+0x1224e]        # 2431c8 <__unnamed_4>
  230f7a:	31 c0                	xor    eax,eax
  230f7c:	89 c6                	mov    esi,eax
  230f7e:	e8 7d a6 fd ff       	call   20b600 <panic>
  230f83:	48 8b 85 18 fa ff ff 	mov    rax,QWORD PTR [rbp-0x5e8]
  230f8a:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d6 + 1];
  230f8e:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  230f92:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  230f99:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  230f9d:	48 89 8d 08 fa ff ff 	mov    QWORD PTR [rbp-0x5f8],rcx
  230fa4:	72 10                	jb     230fb6 <u64toa+0x1d26>
  230fa6:	48 8d 3d 2b 24 01 00 	lea    rdi,[rip+0x1242b]        # 2433d8 <__unnamed_20>
  230fad:	31 c0                	xor    eax,eax
  230faf:	89 c6                	mov    esi,eax
  230fb1:	e8 4a a6 fd ff       	call   20b600 <panic>
  230fb6:	48 8b 85 08 fa ff ff 	mov    rax,QWORD PTR [rbp-0x5f8]
  230fbd:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  230fc4:	48 03 01             	add    rax,QWORD PTR [rcx]
  230fc7:	8b 95 4c ff ff ff    	mov    edx,DWORD PTR [rbp-0xb4]
  230fcd:	83 c2 01             	add    edx,0x1
  230fd0:	40 0f 92 c6          	setb   sil
  230fd4:	48 89 85 00 fa ff ff 	mov    QWORD PTR [rbp-0x600],rax
  230fdb:	89 95 fc f9 ff ff    	mov    DWORD PTR [rbp-0x604],edx
  230fe1:	40 88 b5 fb f9 ff ff 	mov    BYTE PTR [rbp-0x605],sil
  230fe8:	72 02                	jb     230fec <u64toa+0x1d5c>
  230fea:	eb 10                	jmp    230ffc <u64toa+0x1d6c>
  230fec:	48 8d 3d d5 21 01 00 	lea    rdi,[rip+0x121d5]        # 2431c8 <__unnamed_4>
  230ff3:	31 c0                	xor    eax,eax
  230ff5:	89 c6                	mov    esi,eax
  230ff7:	e8 04 a6 fd ff       	call   20b600 <panic>
  230ffc:	8b 85 fc f9 ff ff    	mov    eax,DWORD PTR [rbp-0x604]
  231002:	89 c1                	mov    ecx,eax
  231004:	89 ca                	mov    edx,ecx
  231006:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  23100d:	48 89 95 f0 f9 ff ff 	mov    QWORD PTR [rbp-0x610],rdx
  231014:	72 10                	jb     231026 <u64toa+0x1d96>
  231016:	48 8d 3d bb 23 01 00 	lea    rdi,[rip+0x123bb]        # 2433d8 <__unnamed_20>
  23101d:	31 c0                	xor    eax,eax
  23101f:	89 c6                	mov    esi,eax
  231021:	e8 da a5 fd ff       	call   20b600 <panic>
  231026:	48 8d 05 f3 79 fd ff 	lea    rax,[rip+0xfffffffffffd79f3]        # 208a20 <c_digits_lut>
  23102d:	48 8b 8d f0 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x610]
  231034:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  231037:	48 8b 85 00 fa ff ff 	mov    rax,QWORD PTR [rbp-0x600]
  23103e:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  231040:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  231044:	48 83 c6 01          	add    rsi,0x1
  231048:	0f 92 c2             	setb   dl
  23104b:	48 89 b5 e8 f9 ff ff 	mov    QWORD PTR [rbp-0x618],rsi
  231052:	88 95 e7 f9 ff ff    	mov    BYTE PTR [rbp-0x619],dl
  231058:	72 02                	jb     23105c <u64toa+0x1dcc>
  23105a:	eb 10                	jmp    23106c <u64toa+0x1ddc>
  23105c:	48 8d 3d 65 21 01 00 	lea    rdi,[rip+0x12165]        # 2431c8 <__unnamed_4>
  231063:	31 c0                	xor    eax,eax
  231065:	89 c6                	mov    esi,eax
  231067:	e8 94 a5 fd ff       	call   20b600 <panic>
  23106c:	48 8b 85 e8 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x618]
  231073:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d7];
  231077:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  23107b:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  231082:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  231086:	48 89 8d d8 f9 ff ff 	mov    QWORD PTR [rbp-0x628],rcx
  23108d:	72 10                	jb     23109f <u64toa+0x1e0f>
  23108f:	48 8d 3d 42 23 01 00 	lea    rdi,[rip+0x12342]        # 2433d8 <__unnamed_20>
  231096:	31 c0                	xor    eax,eax
  231098:	89 c6                	mov    esi,eax
  23109a:	e8 61 a5 fd ff       	call   20b600 <panic>
  23109f:	48 8b 85 d8 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x628]
  2310a6:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  2310ad:	48 03 01             	add    rax,QWORD PTR [rcx]
  2310b0:	8b 95 48 ff ff ff    	mov    edx,DWORD PTR [rbp-0xb8]
  2310b6:	89 d6                	mov    esi,edx
  2310b8:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  2310bf:	48 89 85 d0 f9 ff ff 	mov    QWORD PTR [rbp-0x630],rax
  2310c6:	48 89 b5 c8 f9 ff ff 	mov    QWORD PTR [rbp-0x638],rsi
  2310cd:	72 10                	jb     2310df <u64toa+0x1e4f>
  2310cf:	48 8d 3d 02 23 01 00 	lea    rdi,[rip+0x12302]        # 2433d8 <__unnamed_20>
  2310d6:	31 c0                	xor    eax,eax
  2310d8:	89 c6                	mov    esi,eax
  2310da:	e8 21 a5 fd ff       	call   20b600 <panic>
  2310df:	48 8d 05 3a 79 fd ff 	lea    rax,[rip+0xfffffffffffd793a]        # 208a20 <c_digits_lut>
  2310e6:	48 8b 8d c8 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x638]
  2310ed:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  2310f0:	48 8b 85 d0 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x630]
  2310f7:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  2310f9:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  2310fd:	48 83 c6 01          	add    rsi,0x1
  231101:	0f 92 c2             	setb   dl
  231104:	48 89 b5 c0 f9 ff ff 	mov    QWORD PTR [rbp-0x640],rsi
  23110b:	88 95 bf f9 ff ff    	mov    BYTE PTR [rbp-0x641],dl
  231111:	72 02                	jb     231115 <u64toa+0x1e85>
  231113:	eb 10                	jmp    231125 <u64toa+0x1e95>
  231115:	48 8d 3d ac 20 01 00 	lea    rdi,[rip+0x120ac]        # 2431c8 <__unnamed_4>
  23111c:	31 c0                	xor    eax,eax
  23111e:	89 c6                	mov    esi,eax
  231120:	e8 db a4 fd ff       	call   20b600 <panic>
  231125:	48 8b 85 c0 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x640]
  23112c:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d7 + 1];
  231130:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  231134:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  23113b:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  23113f:	48 89 8d b0 f9 ff ff 	mov    QWORD PTR [rbp-0x650],rcx
  231146:	72 10                	jb     231158 <u64toa+0x1ec8>
  231148:	48 8d 3d 89 22 01 00 	lea    rdi,[rip+0x12289]        # 2433d8 <__unnamed_20>
  23114f:	31 c0                	xor    eax,eax
  231151:	89 c6                	mov    esi,eax
  231153:	e8 a8 a4 fd ff       	call   20b600 <panic>
  231158:	48 8b 85 b0 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x650]
  23115f:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  231166:	48 03 01             	add    rax,QWORD PTR [rcx]
  231169:	8b 95 48 ff ff ff    	mov    edx,DWORD PTR [rbp-0xb8]
  23116f:	83 c2 01             	add    edx,0x1
  231172:	40 0f 92 c6          	setb   sil
  231176:	48 89 85 a8 f9 ff ff 	mov    QWORD PTR [rbp-0x658],rax
  23117d:	89 95 a4 f9 ff ff    	mov    DWORD PTR [rbp-0x65c],edx
  231183:	40 88 b5 a3 f9 ff ff 	mov    BYTE PTR [rbp-0x65d],sil
  23118a:	72 02                	jb     23118e <u64toa+0x1efe>
  23118c:	eb 10                	jmp    23119e <u64toa+0x1f0e>
  23118e:	48 8d 3d 33 20 01 00 	lea    rdi,[rip+0x12033]        # 2431c8 <__unnamed_4>
  231195:	31 c0                	xor    eax,eax
  231197:	89 c6                	mov    esi,eax
  231199:	e8 62 a4 fd ff       	call   20b600 <panic>
  23119e:	8b 85 a4 f9 ff ff    	mov    eax,DWORD PTR [rbp-0x65c]
  2311a4:	89 c1                	mov    ecx,eax
  2311a6:	89 ca                	mov    edx,ecx
  2311a8:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  2311af:	48 89 95 98 f9 ff ff 	mov    QWORD PTR [rbp-0x668],rdx
  2311b6:	72 10                	jb     2311c8 <u64toa+0x1f38>
  2311b8:	48 8d 3d 19 22 01 00 	lea    rdi,[rip+0x12219]        # 2433d8 <__unnamed_20>
  2311bf:	31 c0                	xor    eax,eax
  2311c1:	89 c6                	mov    esi,eax
  2311c3:	e8 38 a4 fd ff       	call   20b600 <panic>
  2311c8:	48 8d 05 51 78 fd ff 	lea    rax,[rip+0xfffffffffffd7851]        # 208a20 <c_digits_lut>
  2311cf:	48 8b 8d 98 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x668]
  2311d6:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  2311d9:	48 8b 85 a8 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x658]
  2311e0:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  2311e2:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  2311e6:	48 83 c6 01          	add    rsi,0x1
  2311ea:	0f 92 c2             	setb   dl
  2311ed:	48 89 b5 90 f9 ff ff 	mov    QWORD PTR [rbp-0x670],rsi
  2311f4:	88 95 8f f9 ff ff    	mov    BYTE PTR [rbp-0x671],dl
  2311fa:	72 02                	jb     2311fe <u64toa+0x1f6e>
  2311fc:	eb 10                	jmp    23120e <u64toa+0x1f7e>
  2311fe:	48 8d 3d c3 1f 01 00 	lea    rdi,[rip+0x11fc3]        # 2431c8 <__unnamed_4>
  231205:	31 c0                	xor    eax,eax
  231207:	89 c6                	mov    esi,eax
  231209:	e8 f2 a3 fd ff       	call   20b600 <panic>
  23120e:	48 8b 85 90 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x670]
  231215:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d8];
  231219:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  23121d:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  231224:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  231228:	48 89 8d 80 f9 ff ff 	mov    QWORD PTR [rbp-0x680],rcx
  23122f:	72 10                	jb     231241 <u64toa+0x1fb1>
  231231:	48 8d 3d a0 21 01 00 	lea    rdi,[rip+0x121a0]        # 2433d8 <__unnamed_20>
  231238:	31 c0                	xor    eax,eax
  23123a:	89 c6                	mov    esi,eax
  23123c:	e8 bf a3 fd ff       	call   20b600 <panic>
  231241:	48 8b 85 80 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x680]
  231248:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  23124f:	48 03 01             	add    rax,QWORD PTR [rcx]
  231252:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
  231258:	89 d6                	mov    esi,edx
  23125a:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  231261:	48 89 85 78 f9 ff ff 	mov    QWORD PTR [rbp-0x688],rax
  231268:	48 89 b5 70 f9 ff ff 	mov    QWORD PTR [rbp-0x690],rsi
  23126f:	72 10                	jb     231281 <u64toa+0x1ff1>
  231271:	48 8d 3d 60 21 01 00 	lea    rdi,[rip+0x12160]        # 2433d8 <__unnamed_20>
  231278:	31 c0                	xor    eax,eax
  23127a:	89 c6                	mov    esi,eax
  23127c:	e8 7f a3 fd ff       	call   20b600 <panic>
  231281:	48 8d 05 98 77 fd ff 	lea    rax,[rip+0xfffffffffffd7798]        # 208a20 <c_digits_lut>
  231288:	48 8b 8d 70 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x690]
  23128f:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  231292:	48 8b 85 78 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x688]
  231299:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  23129b:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  23129f:	48 83 c6 01          	add    rsi,0x1
  2312a3:	0f 92 c2             	setb   dl
  2312a6:	48 89 b5 68 f9 ff ff 	mov    QWORD PTR [rbp-0x698],rsi
  2312ad:	88 95 67 f9 ff ff    	mov    BYTE PTR [rbp-0x699],dl
  2312b3:	72 02                	jb     2312b7 <u64toa+0x2027>
  2312b5:	eb 10                	jmp    2312c7 <u64toa+0x2037>
  2312b7:	48 8d 3d 0a 1f 01 00 	lea    rdi,[rip+0x11f0a]        # 2431c8 <__unnamed_4>
  2312be:	31 c0                	xor    eax,eax
  2312c0:	89 c6                	mov    esi,eax
  2312c2:	e8 39 a3 fd ff       	call   20b600 <panic>
  2312c7:	48 8b 85 68 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x698]
  2312ce:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d8 + 1];
  2312d2:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  2312d6:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  2312dd:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  2312e1:	48 89 8d 58 f9 ff ff 	mov    QWORD PTR [rbp-0x6a8],rcx
  2312e8:	72 10                	jb     2312fa <u64toa+0x206a>
  2312ea:	48 8d 3d e7 20 01 00 	lea    rdi,[rip+0x120e7]        # 2433d8 <__unnamed_20>
  2312f1:	31 c0                	xor    eax,eax
  2312f3:	89 c6                	mov    esi,eax
  2312f5:	e8 06 a3 fd ff       	call   20b600 <panic>
  2312fa:	48 8b 85 58 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x6a8]
  231301:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  231308:	48 03 01             	add    rax,QWORD PTR [rcx]
  23130b:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
  231311:	83 c2 01             	add    edx,0x1
  231314:	40 0f 92 c6          	setb   sil
  231318:	48 89 85 50 f9 ff ff 	mov    QWORD PTR [rbp-0x6b0],rax
  23131f:	89 95 4c f9 ff ff    	mov    DWORD PTR [rbp-0x6b4],edx
  231325:	40 88 b5 4b f9 ff ff 	mov    BYTE PTR [rbp-0x6b5],sil
  23132c:	72 02                	jb     231330 <u64toa+0x20a0>
  23132e:	eb 10                	jmp    231340 <u64toa+0x20b0>
  231330:	48 8d 3d 91 1e 01 00 	lea    rdi,[rip+0x11e91]        # 2431c8 <__unnamed_4>
  231337:	31 c0                	xor    eax,eax
  231339:	89 c6                	mov    esi,eax
  23133b:	e8 c0 a2 fd ff       	call   20b600 <panic>
  231340:	8b 85 4c f9 ff ff    	mov    eax,DWORD PTR [rbp-0x6b4]
  231346:	89 c1                	mov    ecx,eax
  231348:	89 ca                	mov    edx,ecx
  23134a:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  231351:	48 89 95 40 f9 ff ff 	mov    QWORD PTR [rbp-0x6c0],rdx
  231358:	72 10                	jb     23136a <u64toa+0x20da>
  23135a:	48 8d 3d 77 20 01 00 	lea    rdi,[rip+0x12077]        # 2433d8 <__unnamed_20>
  231361:	31 c0                	xor    eax,eax
  231363:	89 c6                	mov    esi,eax
  231365:	e8 96 a2 fd ff       	call   20b600 <panic>
  23136a:	48 8d 05 af 76 fd ff 	lea    rax,[rip+0xfffffffffffd76af]        # 208a20 <c_digits_lut>
  231371:	48 8b 8d 40 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x6c0]
  231378:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  23137b:	48 8b 85 50 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x6b0]
  231382:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  231384:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  231388:	48 83 c6 01          	add    rsi,0x1
  23138c:	0f 92 c2             	setb   dl
  23138f:	48 89 b5 38 f9 ff ff 	mov    QWORD PTR [rbp-0x6c8],rsi
  231396:	88 95 37 f9 ff ff    	mov    BYTE PTR [rbp-0x6c9],dl
  23139c:	72 02                	jb     2313a0 <u64toa+0x2110>
  23139e:	eb 10                	jmp    2313b0 <u64toa+0x2120>
  2313a0:	48 8d 3d 21 1e 01 00 	lea    rdi,[rip+0x11e21]        # 2431c8 <__unnamed_4>
  2313a7:	31 c0                	xor    eax,eax
  2313a9:	89 c6                	mov    esi,eax
  2313ab:	e8 50 a2 fd ff       	call   20b600 <panic>
  2313b0:	48 8b 85 38 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x6c8]
  2313b7:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
    } else if (value < kTen16) {
  2313bb:	e9 b4 e3 ff ff       	jmp    22f774 <u64toa+0x4e4>
  2313c0:	48 b8 00 00 c1 6f f2 	movabs rax,0x2386f26fc10000
  2313c7:	86 23 00 
        const a = @intCast(u32, value / kTen16); // 1 to 1844
  2313ca:	48 8b 8d 48 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1b8]
  2313d1:	48 89 85 28 f9 ff ff 	mov    QWORD PTR [rbp-0x6d8],rax
  2313d8:	48 89 c8             	mov    rax,rcx
  2313db:	31 d2                	xor    edx,edx
  2313dd:	48 8b b5 28 f9 ff ff 	mov    rsi,QWORD PTR [rbp-0x6d8]
  2313e4:	48 f7 f6             	div    rsi
  2313e7:	89 c7                	mov    edi,eax
  2313e9:	41 89 f8             	mov    r8d,edi
  2313ec:	45 89 c1             	mov    r9d,r8d
  2313ef:	4c 39 c8             	cmp    rax,r9
  2313f2:	89 bd 24 f9 ff ff    	mov    DWORD PTR [rbp-0x6dc],edi
  2313f8:	74 12                	je     23140c <u64toa+0x217c>
  2313fa:	eb 32                	jmp    23142e <u64toa+0x219e>
  2313fc:	48 8d 3d 3d 1e 01 00 	lea    rdi,[rip+0x11e3d]        # 243240 <__unnamed_7>
  231403:	31 c0                	xor    eax,eax
  231405:	89 c6                	mov    esi,eax
  231407:	e8 f4 a1 fd ff       	call   20b600 <panic>
  23140c:	31 c0                	xor    eax,eax
  23140e:	88 c1                	mov    cl,al
  231410:	8b 85 24 f9 ff ff    	mov    eax,DWORD PTR [rbp-0x6dc]
  231416:	89 85 40 ff ff ff    	mov    DWORD PTR [rbp-0xc0],eax
        value %= kTen16;
  23141c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  231420:	f6 c1 01             	test   cl,0x1
  231423:	48 89 85 18 f9 ff ff 	mov    QWORD PTR [rbp-0x6e8],rax
  23142a:	75 4f                	jne    23147b <u64toa+0x21eb>
  23142c:	eb 10                	jmp    23143e <u64toa+0x21ae>
  23142e:	48 8d 3d 53 20 01 00 	lea    rdi,[rip+0x12053]        # 243488 <__unnamed_22>
  231435:	31 c0                	xor    eax,eax
  231437:	89 c6                	mov    esi,eax
        const a = @intCast(u32, value / kTen16); // 1 to 1844
  231439:	e8 c2 a1 fd ff       	call   20b600 <panic>
  23143e:	48 b8 00 00 c1 6f f2 	movabs rax,0x2386f26fc10000
  231445:	86 23 00 
        value %= kTen16;
  231448:	48 8b 8d 18 f9 ff ff 	mov    rcx,QWORD PTR [rbp-0x6e8]
  23144f:	48 89 85 10 f9 ff ff 	mov    QWORD PTR [rbp-0x6f0],rax
  231456:	48 89 c8             	mov    rax,rcx
  231459:	31 d2                	xor    edx,edx
  23145b:	48 8b b5 10 f9 ff ff 	mov    rsi,QWORD PTR [rbp-0x6f0]
  231462:	48 f7 f6             	div    rsi
  231465:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
        if (a < 10) {
  231469:	83 bd 40 ff ff ff 0a 	cmp    DWORD PTR [rbp-0xc0],0xa
  231470:	0f 82 38 e2 ff ff    	jb     22f6ae <u64toa+0x41e>
  231476:	e9 54 e2 ff ff       	jmp    22f6cf <u64toa+0x43f>
  23147b:	48 8d 3d 66 1e 01 00 	lea    rdi,[rip+0x11e66]        # 2432e8 <__unnamed_15>
  231482:	31 c0                	xor    eax,eax
  231484:	89 c6                	mov    esi,eax
        value %= kTen16;
  231486:	e8 75 a1 fd ff       	call   20b600 <panic>
  23148b:	48 8d 3d 46 1f 01 00 	lea    rdi,[rip+0x11f46]        # 2433d8 <__unnamed_20>
  231492:	31 c0                	xor    eax,eax
  231494:	89 c6                	mov    esi,eax
            buffer[buf_index] = '0' + @intCast(u8, a);
  231496:	e8 65 a1 fd ff       	call   20b600 <panic>
  23149b:	48 8b 85 40 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c0]
  2314a2:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  2314a9:	48 03 01             	add    rax,QWORD PTR [rcx]
  2314ac:	8b 95 40 ff ff ff    	mov    edx,DWORD PTR [rbp-0xc0]
  2314b2:	40 88 d6             	mov    sil,dl
  2314b5:	40 0f b6 fe          	movzx  edi,sil
  2314b9:	39 fa                	cmp    edx,edi
  2314bb:	48 89 85 08 f9 ff ff 	mov    QWORD PTR [rbp-0x6f8],rax
  2314c2:	40 88 b5 07 f9 ff ff 	mov    BYTE PTR [rbp-0x6f9],sil
  2314c9:	75 18                	jne    2314e3 <u64toa+0x2253>
  2314cb:	8a 85 07 f9 ff ff    	mov    al,BYTE PTR [rbp-0x6f9]
  2314d1:	04 30                	add    al,0x30
  2314d3:	0f 92 c1             	setb   cl
  2314d6:	f6 c1 01             	test   cl,0x1
  2314d9:	88 85 06 f9 ff ff    	mov    BYTE PTR [rbp-0x6fa],al
  2314df:	75 12                	jne    2314f3 <u64toa+0x2263>
  2314e1:	eb 20                	jmp    231503 <u64toa+0x2273>
  2314e3:	48 8d 3d 9e 1f 01 00 	lea    rdi,[rip+0x11f9e]        # 243488 <__unnamed_22>
  2314ea:	31 c0                	xor    eax,eax
  2314ec:	89 c6                	mov    esi,eax
  2314ee:	e8 0d a1 fd ff       	call   20b600 <panic>
  2314f3:	48 8d 3d ce 1c 01 00 	lea    rdi,[rip+0x11cce]        # 2431c8 <__unnamed_4>
  2314fa:	31 c0                	xor    eax,eax
  2314fc:	89 c6                	mov    esi,eax
  2314fe:	e8 fd a0 fd ff       	call   20b600 <panic>
  231503:	48 8b 85 08 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x6f8]
  23150a:	8a 8d 06 f9 ff ff    	mov    cl,BYTE PTR [rbp-0x6fa]
  231510:	88 08                	mov    BYTE PTR [rax],cl
            buf_index += 1;
  231512:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  231516:	48 83 c2 01          	add    rdx,0x1
  23151a:	40 0f 92 c6          	setb   sil
  23151e:	48 89 95 f8 f8 ff ff 	mov    QWORD PTR [rbp-0x708],rdx
  231525:	40 88 b5 f7 f8 ff ff 	mov    BYTE PTR [rbp-0x709],sil
  23152c:	72 02                	jb     231530 <u64toa+0x22a0>
  23152e:	eb 10                	jmp    231540 <u64toa+0x22b0>
  231530:	48 8d 3d 91 1c 01 00 	lea    rdi,[rip+0x11c91]        # 2431c8 <__unnamed_4>
  231537:	31 c0                	xor    eax,eax
  231539:	89 c6                	mov    esi,eax
  23153b:	e8 c0 a0 fd ff       	call   20b600 <panic>
  231540:	48 8b 85 f8 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x708]
  231547:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        if (a < 10) {
  23154b:	e9 07 e2 ff ff       	jmp    22f757 <u64toa+0x4c7>
  231550:	48 8d 3d 81 1e 01 00 	lea    rdi,[rip+0x11e81]        # 2433d8 <__unnamed_20>
  231557:	31 c0                	xor    eax,eax
  231559:	89 c6                	mov    esi,eax
            buffer[buf_index] = c_digits_lut[i];
  23155b:	e8 a0 a0 fd ff       	call   20b600 <panic>
  231560:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  231567:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  23156e:	48 03 01             	add    rax,QWORD PTR [rcx]
  231571:	8b 95 3c ff ff ff    	mov    edx,DWORD PTR [rbp-0xc4]
  231577:	89 d6                	mov    esi,edx
  231579:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  231580:	48 89 85 e8 f8 ff ff 	mov    QWORD PTR [rbp-0x718],rax
  231587:	48 89 b5 e0 f8 ff ff 	mov    QWORD PTR [rbp-0x720],rsi
  23158e:	72 10                	jb     2315a0 <u64toa+0x2310>
  231590:	48 8d 3d 41 1e 01 00 	lea    rdi,[rip+0x11e41]        # 2433d8 <__unnamed_20>
  231597:	31 c0                	xor    eax,eax
  231599:	89 c6                	mov    esi,eax
  23159b:	e8 60 a0 fd ff       	call   20b600 <panic>
  2315a0:	48 8d 05 79 74 fd ff 	lea    rax,[rip+0xfffffffffffd7479]        # 208a20 <c_digits_lut>
  2315a7:	48 8b 8d e0 f8 ff ff 	mov    rcx,QWORD PTR [rbp-0x720]
  2315ae:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  2315b1:	48 8b 85 e8 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x718]
  2315b8:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  2315ba:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  2315be:	48 83 c6 01          	add    rsi,0x1
  2315c2:	0f 92 c2             	setb   dl
  2315c5:	48 89 b5 d8 f8 ff ff 	mov    QWORD PTR [rbp-0x728],rsi
  2315cc:	88 95 d7 f8 ff ff    	mov    BYTE PTR [rbp-0x729],dl
  2315d2:	72 02                	jb     2315d6 <u64toa+0x2346>
  2315d4:	eb 10                	jmp    2315e6 <u64toa+0x2356>
  2315d6:	48 8d 3d eb 1b 01 00 	lea    rdi,[rip+0x11beb]        # 2431c8 <__unnamed_4>
  2315dd:	31 c0                	xor    eax,eax
  2315df:	89 c6                	mov    esi,eax
  2315e1:	e8 1a a0 fd ff       	call   20b600 <panic>
  2315e6:	48 8b 85 d8 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x728]
  2315ed:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            buffer[buf_index] = c_digits_lut[i + 1];
  2315f1:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  2315f5:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  2315fc:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  231600:	48 89 8d c8 f8 ff ff 	mov    QWORD PTR [rbp-0x738],rcx
  231607:	72 10                	jb     231619 <u64toa+0x2389>
  231609:	48 8d 3d c8 1d 01 00 	lea    rdi,[rip+0x11dc8]        # 2433d8 <__unnamed_20>
  231610:	31 c0                	xor    eax,eax
  231612:	89 c6                	mov    esi,eax
  231614:	e8 e7 9f fd ff       	call   20b600 <panic>
  231619:	48 8b 85 c8 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x738]
  231620:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  231627:	48 03 01             	add    rax,QWORD PTR [rcx]
  23162a:	8b 95 3c ff ff ff    	mov    edx,DWORD PTR [rbp-0xc4]
  231630:	83 c2 01             	add    edx,0x1
  231633:	40 0f 92 c6          	setb   sil
  231637:	48 89 85 c0 f8 ff ff 	mov    QWORD PTR [rbp-0x740],rax
  23163e:	89 95 bc f8 ff ff    	mov    DWORD PTR [rbp-0x744],edx
  231644:	40 88 b5 bb f8 ff ff 	mov    BYTE PTR [rbp-0x745],sil
  23164b:	72 02                	jb     23164f <u64toa+0x23bf>
  23164d:	eb 10                	jmp    23165f <u64toa+0x23cf>
  23164f:	48 8d 3d 72 1b 01 00 	lea    rdi,[rip+0x11b72]        # 2431c8 <__unnamed_4>
  231656:	31 c0                	xor    eax,eax
  231658:	89 c6                	mov    esi,eax
  23165a:	e8 a1 9f fd ff       	call   20b600 <panic>
  23165f:	8b 85 bc f8 ff ff    	mov    eax,DWORD PTR [rbp-0x744]
  231665:	89 c1                	mov    ecx,eax
  231667:	89 ca                	mov    edx,ecx
  231669:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  231670:	48 89 95 b0 f8 ff ff 	mov    QWORD PTR [rbp-0x750],rdx
  231677:	72 10                	jb     231689 <u64toa+0x23f9>
  231679:	48 8d 3d 58 1d 01 00 	lea    rdi,[rip+0x11d58]        # 2433d8 <__unnamed_20>
  231680:	31 c0                	xor    eax,eax
  231682:	89 c6                	mov    esi,eax
  231684:	e8 77 9f fd ff       	call   20b600 <panic>
  231689:	48 8d 05 90 73 fd ff 	lea    rax,[rip+0xfffffffffffd7390]        # 208a20 <c_digits_lut>
  231690:	48 8b 8d b0 f8 ff ff 	mov    rcx,QWORD PTR [rbp-0x750]
  231697:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  23169a:	48 8b 85 c0 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x740]
  2316a1:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  2316a3:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  2316a7:	48 83 c6 01          	add    rsi,0x1
  2316ab:	0f 92 c2             	setb   dl
  2316ae:	48 89 b5 a8 f8 ff ff 	mov    QWORD PTR [rbp-0x758],rsi
  2316b5:	88 95 a7 f8 ff ff    	mov    BYTE PTR [rbp-0x759],dl
  2316bb:	72 02                	jb     2316bf <u64toa+0x242f>
  2316bd:	eb 10                	jmp    2316cf <u64toa+0x243f>
  2316bf:	48 8d 3d 02 1b 01 00 	lea    rdi,[rip+0x11b02]        # 2431c8 <__unnamed_4>
  2316c6:	31 c0                	xor    eax,eax
  2316c8:	89 c6                	mov    esi,eax
  2316ca:	e8 31 9f fd ff       	call   20b600 <panic>
  2316cf:	48 8b 85 a8 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x758]
  2316d6:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        } else if (a < 100) {
  2316da:	e9 76 e0 ff ff       	jmp    22f755 <u64toa+0x4c5>
  2316df:	48 8d 3d f2 1c 01 00 	lea    rdi,[rip+0x11cf2]        # 2433d8 <__unnamed_20>
  2316e6:	31 c0                	xor    eax,eax
  2316e8:	89 c6                	mov    esi,eax
            buffer[buf_index] = '0' + @intCast(u8, a / 100);
  2316ea:	e8 11 9f fd ff       	call   20b600 <panic>
  2316ef:	31 c0                	xor    eax,eax
  2316f1:	88 c1                	mov    cl,al
  2316f3:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  2316fa:	48 8b b5 f0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x110]
  231701:	48 03 16             	add    rdx,QWORD PTR [rsi]
  231704:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
  23170a:	f6 c1 01             	test   cl,0x1
  23170d:	89 85 a0 f8 ff ff    	mov    DWORD PTR [rbp-0x760],eax
  231713:	48 89 95 98 f8 ff ff 	mov    QWORD PTR [rbp-0x768],rdx
  23171a:	75 32                	jne    23174e <u64toa+0x24be>
  23171c:	b8 64 00 00 00       	mov    eax,0x64
  231721:	8b 8d a0 f8 ff ff    	mov    ecx,DWORD PTR [rbp-0x760]
  231727:	89 85 94 f8 ff ff    	mov    DWORD PTR [rbp-0x76c],eax
  23172d:	89 c8                	mov    eax,ecx
  23172f:	31 d2                	xor    edx,edx
  231731:	8b b5 94 f8 ff ff    	mov    esi,DWORD PTR [rbp-0x76c]
  231737:	f7 f6                	div    esi
  231739:	40 88 c7             	mov    dil,al
  23173c:	44 0f b6 c7          	movzx  r8d,dil
  231740:	44 39 c0             	cmp    eax,r8d
  231743:	40 88 bd 93 f8 ff ff 	mov    BYTE PTR [rbp-0x76d],dil
  23174a:	74 12                	je     23175e <u64toa+0x24ce>
  23174c:	eb 28                	jmp    231776 <u64toa+0x24e6>
  23174e:	48 8d 3d eb 1a 01 00 	lea    rdi,[rip+0x11aeb]        # 243240 <__unnamed_7>
  231755:	31 c0                	xor    eax,eax
  231757:	89 c6                	mov    esi,eax
  231759:	e8 a2 9e fd ff       	call   20b600 <panic>
  23175e:	8a 85 93 f8 ff ff    	mov    al,BYTE PTR [rbp-0x76d]
  231764:	04 30                	add    al,0x30
  231766:	0f 92 c1             	setb   cl
  231769:	f6 c1 01             	test   cl,0x1
  23176c:	88 85 92 f8 ff ff    	mov    BYTE PTR [rbp-0x76e],al
  231772:	75 12                	jne    231786 <u64toa+0x24f6>
  231774:	eb 20                	jmp    231796 <u64toa+0x2506>
  231776:	48 8d 3d 0b 1d 01 00 	lea    rdi,[rip+0x11d0b]        # 243488 <__unnamed_22>
  23177d:	31 c0                	xor    eax,eax
  23177f:	89 c6                	mov    esi,eax
  231781:	e8 7a 9e fd ff       	call   20b600 <panic>
  231786:	48 8d 3d 3b 1a 01 00 	lea    rdi,[rip+0x11a3b]        # 2431c8 <__unnamed_4>
  23178d:	31 c0                	xor    eax,eax
  23178f:	89 c6                	mov    esi,eax
  231791:	e8 6a 9e fd ff       	call   20b600 <panic>
  231796:	48 8b 85 98 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x768]
  23179d:	8a 8d 92 f8 ff ff    	mov    cl,BYTE PTR [rbp-0x76e]
  2317a3:	88 08                	mov    BYTE PTR [rax],cl
            buf_index += 1;
  2317a5:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  2317a9:	48 83 c2 01          	add    rdx,0x1
  2317ad:	40 0f 92 c6          	setb   sil
  2317b1:	48 89 95 88 f8 ff ff 	mov    QWORD PTR [rbp-0x778],rdx
  2317b8:	40 88 b5 87 f8 ff ff 	mov    BYTE PTR [rbp-0x779],sil
  2317bf:	72 02                	jb     2317c3 <u64toa+0x2533>
  2317c1:	eb 10                	jmp    2317d3 <u64toa+0x2543>
  2317c3:	48 8d 3d fe 19 01 00 	lea    rdi,[rip+0x119fe]        # 2431c8 <__unnamed_4>
  2317ca:	31 c0                	xor    eax,eax
  2317cc:	89 c6                	mov    esi,eax
  2317ce:	e8 2d 9e fd ff       	call   20b600 <panic>
  2317d3:	31 c0                	xor    eax,eax
  2317d5:	88 c1                	mov    cl,al
  2317d7:	48 8b 95 88 f8 ff ff 	mov    rdx,QWORD PTR [rbp-0x778]
  2317de:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
            const i: u32 = (a % 100) << 1;
  2317e2:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
  2317e8:	f6 c1 01             	test   cl,0x1
  2317eb:	89 85 80 f8 ff ff    	mov    DWORD PTR [rbp-0x780],eax
  2317f1:	75 40                	jne    231833 <u64toa+0x25a3>
  2317f3:	b8 64 00 00 00       	mov    eax,0x64
  2317f8:	8b 8d 80 f8 ff ff    	mov    ecx,DWORD PTR [rbp-0x780]
  2317fe:	89 85 7c f8 ff ff    	mov    DWORD PTR [rbp-0x784],eax
  231804:	89 c8                	mov    eax,ecx
  231806:	31 d2                	xor    edx,edx
  231808:	8b b5 7c f8 ff ff    	mov    esi,DWORD PTR [rbp-0x784]
  23180e:	f7 f6                	div    esi
  231810:	c1 e2 01             	shl    edx,0x1
  231813:	89 95 38 ff ff ff    	mov    DWORD PTR [rbp-0xc8],edx
            buffer[buf_index] = c_digits_lut[i];
  231819:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  23181d:	4c 8b 85 f0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x110]
  231824:	49 3b 78 08          	cmp    rdi,QWORD PTR [r8+0x8]
  231828:	48 89 bd 70 f8 ff ff 	mov    QWORD PTR [rbp-0x790],rdi
  23182f:	72 22                	jb     231853 <u64toa+0x25c3>
  231831:	eb 10                	jmp    231843 <u64toa+0x25b3>
  231833:	48 8d 3d ae 1a 01 00 	lea    rdi,[rip+0x11aae]        # 2432e8 <__unnamed_15>
  23183a:	31 c0                	xor    eax,eax
  23183c:	89 c6                	mov    esi,eax
            const i: u32 = (a % 100) << 1;
  23183e:	e8 bd 9d fd ff       	call   20b600 <panic>
  231843:	48 8d 3d 8e 1b 01 00 	lea    rdi,[rip+0x11b8e]        # 2433d8 <__unnamed_20>
  23184a:	31 c0                	xor    eax,eax
  23184c:	89 c6                	mov    esi,eax
            buffer[buf_index] = c_digits_lut[i];
  23184e:	e8 ad 9d fd ff       	call   20b600 <panic>
  231853:	48 8b 85 70 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x790]
  23185a:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  231861:	48 03 01             	add    rax,QWORD PTR [rcx]
  231864:	8b 95 38 ff ff ff    	mov    edx,DWORD PTR [rbp-0xc8]
  23186a:	89 d6                	mov    esi,edx
  23186c:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  231873:	48 89 85 68 f8 ff ff 	mov    QWORD PTR [rbp-0x798],rax
  23187a:	48 89 b5 60 f8 ff ff 	mov    QWORD PTR [rbp-0x7a0],rsi
  231881:	72 10                	jb     231893 <u64toa+0x2603>
  231883:	48 8d 3d 4e 1b 01 00 	lea    rdi,[rip+0x11b4e]        # 2433d8 <__unnamed_20>
  23188a:	31 c0                	xor    eax,eax
  23188c:	89 c6                	mov    esi,eax
  23188e:	e8 6d 9d fd ff       	call   20b600 <panic>
  231893:	48 8d 05 86 71 fd ff 	lea    rax,[rip+0xfffffffffffd7186]        # 208a20 <c_digits_lut>
  23189a:	48 8b 8d 60 f8 ff ff 	mov    rcx,QWORD PTR [rbp-0x7a0]
  2318a1:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  2318a4:	48 8b 85 68 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x798]
  2318ab:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  2318ad:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  2318b1:	48 83 c6 01          	add    rsi,0x1
  2318b5:	0f 92 c2             	setb   dl
  2318b8:	48 89 b5 58 f8 ff ff 	mov    QWORD PTR [rbp-0x7a8],rsi
  2318bf:	88 95 57 f8 ff ff    	mov    BYTE PTR [rbp-0x7a9],dl
  2318c5:	72 02                	jb     2318c9 <u64toa+0x2639>
  2318c7:	eb 10                	jmp    2318d9 <u64toa+0x2649>
  2318c9:	48 8d 3d f8 18 01 00 	lea    rdi,[rip+0x118f8]        # 2431c8 <__unnamed_4>
  2318d0:	31 c0                	xor    eax,eax
  2318d2:	89 c6                	mov    esi,eax
  2318d4:	e8 27 9d fd ff       	call   20b600 <panic>
  2318d9:	48 8b 85 58 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x7a8]
  2318e0:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            buffer[buf_index] = c_digits_lut[i + 1];
  2318e4:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  2318e8:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  2318ef:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  2318f3:	48 89 8d 48 f8 ff ff 	mov    QWORD PTR [rbp-0x7b8],rcx
  2318fa:	72 10                	jb     23190c <u64toa+0x267c>
  2318fc:	48 8d 3d d5 1a 01 00 	lea    rdi,[rip+0x11ad5]        # 2433d8 <__unnamed_20>
  231903:	31 c0                	xor    eax,eax
  231905:	89 c6                	mov    esi,eax
  231907:	e8 f4 9c fd ff       	call   20b600 <panic>
  23190c:	48 8b 85 48 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x7b8]
  231913:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  23191a:	48 03 01             	add    rax,QWORD PTR [rcx]
  23191d:	8b 95 38 ff ff ff    	mov    edx,DWORD PTR [rbp-0xc8]
  231923:	83 c2 01             	add    edx,0x1
  231926:	40 0f 92 c6          	setb   sil
  23192a:	48 89 85 40 f8 ff ff 	mov    QWORD PTR [rbp-0x7c0],rax
  231931:	89 95 3c f8 ff ff    	mov    DWORD PTR [rbp-0x7c4],edx
  231937:	40 88 b5 3b f8 ff ff 	mov    BYTE PTR [rbp-0x7c5],sil
  23193e:	72 02                	jb     231942 <u64toa+0x26b2>
  231940:	eb 10                	jmp    231952 <u64toa+0x26c2>
  231942:	48 8d 3d 7f 18 01 00 	lea    rdi,[rip+0x1187f]        # 2431c8 <__unnamed_4>
  231949:	31 c0                	xor    eax,eax
  23194b:	89 c6                	mov    esi,eax
  23194d:	e8 ae 9c fd ff       	call   20b600 <panic>
  231952:	8b 85 3c f8 ff ff    	mov    eax,DWORD PTR [rbp-0x7c4]
  231958:	89 c1                	mov    ecx,eax
  23195a:	89 ca                	mov    edx,ecx
  23195c:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  231963:	48 89 95 30 f8 ff ff 	mov    QWORD PTR [rbp-0x7d0],rdx
  23196a:	72 10                	jb     23197c <u64toa+0x26ec>
  23196c:	48 8d 3d 65 1a 01 00 	lea    rdi,[rip+0x11a65]        # 2433d8 <__unnamed_20>
  231973:	31 c0                	xor    eax,eax
  231975:	89 c6                	mov    esi,eax
  231977:	e8 84 9c fd ff       	call   20b600 <panic>
  23197c:	48 8d 05 9d 70 fd ff 	lea    rax,[rip+0xfffffffffffd709d]        # 208a20 <c_digits_lut>
  231983:	48 8b 8d 30 f8 ff ff 	mov    rcx,QWORD PTR [rbp-0x7d0]
  23198a:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  23198d:	48 8b 85 40 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x7c0]
  231994:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  231996:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  23199a:	48 83 c6 01          	add    rsi,0x1
  23199e:	0f 92 c2             	setb   dl
  2319a1:	48 89 b5 28 f8 ff ff 	mov    QWORD PTR [rbp-0x7d8],rsi
  2319a8:	88 95 27 f8 ff ff    	mov    BYTE PTR [rbp-0x7d9],dl
  2319ae:	72 02                	jb     2319b2 <u64toa+0x2722>
  2319b0:	eb 10                	jmp    2319c2 <u64toa+0x2732>
  2319b2:	48 8d 3d 0f 18 01 00 	lea    rdi,[rip+0x1180f]        # 2431c8 <__unnamed_4>
  2319b9:	31 c0                	xor    eax,eax
  2319bb:	89 c6                	mov    esi,eax
  2319bd:	e8 3e 9c fd ff       	call   20b600 <panic>
  2319c2:	48 8b 85 28 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x7d8]
  2319c9:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        } else if (a < 1000) {
  2319cd:	e9 81 dd ff ff       	jmp    22f753 <u64toa+0x4c3>
  2319d2:	31 c0                	xor    eax,eax
  2319d4:	88 c1                	mov    cl,al
  2319d6:	b8 64 00 00 00       	mov    eax,0x64
            const i: u32 = (a / 100) << 1;
  2319db:	8b 95 2c fe ff ff    	mov    edx,DWORD PTR [rbp-0x1d4]
  2319e1:	89 85 20 f8 ff ff    	mov    DWORD PTR [rbp-0x7e0],eax
  2319e7:	89 d0                	mov    eax,edx
  2319e9:	31 d2                	xor    edx,edx
  2319eb:	8b b5 20 f8 ff ff    	mov    esi,DWORD PTR [rbp-0x7e0]
  2319f1:	f7 f6                	div    esi
  2319f3:	c1 e0 01             	shl    eax,0x1
  2319f6:	89 85 34 ff ff ff    	mov    DWORD PTR [rbp-0xcc],eax
            const j: u32 = (a % 100) << 1;
  2319fc:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
  231a02:	f6 c1 01             	test   cl,0x1
  231a05:	89 85 1c f8 ff ff    	mov    DWORD PTR [rbp-0x7e4],eax
  231a0b:	75 52                	jne    231a5f <u64toa+0x27cf>
  231a0d:	eb 10                	jmp    231a1f <u64toa+0x278f>
  231a0f:	48 8d 3d 2a 18 01 00 	lea    rdi,[rip+0x1182a]        # 243240 <__unnamed_7>
  231a16:	31 c0                	xor    eax,eax
  231a18:	89 c6                	mov    esi,eax
            const i: u32 = (a / 100) << 1;
  231a1a:	e8 e1 9b fd ff       	call   20b600 <panic>
  231a1f:	b8 64 00 00 00       	mov    eax,0x64
            const j: u32 = (a % 100) << 1;
  231a24:	8b 8d 1c f8 ff ff    	mov    ecx,DWORD PTR [rbp-0x7e4]
  231a2a:	89 85 18 f8 ff ff    	mov    DWORD PTR [rbp-0x7e8],eax
  231a30:	89 c8                	mov    eax,ecx
  231a32:	31 d2                	xor    edx,edx
  231a34:	8b b5 18 f8 ff ff    	mov    esi,DWORD PTR [rbp-0x7e8]
  231a3a:	f7 f6                	div    esi
  231a3c:	c1 e2 01             	shl    edx,0x1
  231a3f:	89 95 30 ff ff ff    	mov    DWORD PTR [rbp-0xd0],edx
            buffer[buf_index] = c_digits_lut[i];
  231a45:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  231a49:	4c 8b 85 f0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x110]
  231a50:	49 3b 78 08          	cmp    rdi,QWORD PTR [r8+0x8]
  231a54:	48 89 bd 10 f8 ff ff 	mov    QWORD PTR [rbp-0x7f0],rdi
  231a5b:	72 22                	jb     231a7f <u64toa+0x27ef>
  231a5d:	eb 10                	jmp    231a6f <u64toa+0x27df>
  231a5f:	48 8d 3d 82 18 01 00 	lea    rdi,[rip+0x11882]        # 2432e8 <__unnamed_15>
  231a66:	31 c0                	xor    eax,eax
  231a68:	89 c6                	mov    esi,eax
            const j: u32 = (a % 100) << 1;
  231a6a:	e8 91 9b fd ff       	call   20b600 <panic>
  231a6f:	48 8d 3d 62 19 01 00 	lea    rdi,[rip+0x11962]        # 2433d8 <__unnamed_20>
  231a76:	31 c0                	xor    eax,eax
  231a78:	89 c6                	mov    esi,eax
            buffer[buf_index] = c_digits_lut[i];
  231a7a:	e8 81 9b fd ff       	call   20b600 <panic>
  231a7f:	48 8b 85 10 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x7f0]
  231a86:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  231a8d:	48 03 01             	add    rax,QWORD PTR [rcx]
  231a90:	8b 95 34 ff ff ff    	mov    edx,DWORD PTR [rbp-0xcc]
  231a96:	89 d6                	mov    esi,edx
  231a98:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  231a9f:	48 89 85 08 f8 ff ff 	mov    QWORD PTR [rbp-0x7f8],rax
  231aa6:	48 89 b5 00 f8 ff ff 	mov    QWORD PTR [rbp-0x800],rsi
  231aad:	72 10                	jb     231abf <u64toa+0x282f>
  231aaf:	48 8d 3d 22 19 01 00 	lea    rdi,[rip+0x11922]        # 2433d8 <__unnamed_20>
  231ab6:	31 c0                	xor    eax,eax
  231ab8:	89 c6                	mov    esi,eax
  231aba:	e8 41 9b fd ff       	call   20b600 <panic>
  231abf:	48 8d 05 5a 6f fd ff 	lea    rax,[rip+0xfffffffffffd6f5a]        # 208a20 <c_digits_lut>
  231ac6:	48 8b 8d 00 f8 ff ff 	mov    rcx,QWORD PTR [rbp-0x800]
  231acd:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  231ad0:	48 8b 85 08 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x7f8]
  231ad7:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  231ad9:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  231add:	48 83 c6 01          	add    rsi,0x1
  231ae1:	0f 92 c2             	setb   dl
  231ae4:	48 89 b5 f8 f7 ff ff 	mov    QWORD PTR [rbp-0x808],rsi
  231aeb:	88 95 f7 f7 ff ff    	mov    BYTE PTR [rbp-0x809],dl
  231af1:	72 02                	jb     231af5 <u64toa+0x2865>
  231af3:	eb 10                	jmp    231b05 <u64toa+0x2875>
  231af5:	48 8d 3d cc 16 01 00 	lea    rdi,[rip+0x116cc]        # 2431c8 <__unnamed_4>
  231afc:	31 c0                	xor    eax,eax
  231afe:	89 c6                	mov    esi,eax
  231b00:	e8 fb 9a fd ff       	call   20b600 <panic>
  231b05:	48 8b 85 f8 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x808]
  231b0c:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            buffer[buf_index] = c_digits_lut[i + 1];
  231b10:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  231b14:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  231b1b:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  231b1f:	48 89 8d e8 f7 ff ff 	mov    QWORD PTR [rbp-0x818],rcx
  231b26:	72 10                	jb     231b38 <u64toa+0x28a8>
  231b28:	48 8d 3d a9 18 01 00 	lea    rdi,[rip+0x118a9]        # 2433d8 <__unnamed_20>
  231b2f:	31 c0                	xor    eax,eax
  231b31:	89 c6                	mov    esi,eax
  231b33:	e8 c8 9a fd ff       	call   20b600 <panic>
  231b38:	48 8b 85 e8 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x818]
  231b3f:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  231b46:	48 03 01             	add    rax,QWORD PTR [rcx]
  231b49:	8b 95 34 ff ff ff    	mov    edx,DWORD PTR [rbp-0xcc]
  231b4f:	83 c2 01             	add    edx,0x1
  231b52:	40 0f 92 c6          	setb   sil
  231b56:	48 89 85 e0 f7 ff ff 	mov    QWORD PTR [rbp-0x820],rax
  231b5d:	89 95 dc f7 ff ff    	mov    DWORD PTR [rbp-0x824],edx
  231b63:	40 88 b5 db f7 ff ff 	mov    BYTE PTR [rbp-0x825],sil
  231b6a:	72 02                	jb     231b6e <u64toa+0x28de>
  231b6c:	eb 10                	jmp    231b7e <u64toa+0x28ee>
  231b6e:	48 8d 3d 53 16 01 00 	lea    rdi,[rip+0x11653]        # 2431c8 <__unnamed_4>
  231b75:	31 c0                	xor    eax,eax
  231b77:	89 c6                	mov    esi,eax
  231b79:	e8 82 9a fd ff       	call   20b600 <panic>
  231b7e:	8b 85 dc f7 ff ff    	mov    eax,DWORD PTR [rbp-0x824]
  231b84:	89 c1                	mov    ecx,eax
  231b86:	89 ca                	mov    edx,ecx
  231b88:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  231b8f:	48 89 95 d0 f7 ff ff 	mov    QWORD PTR [rbp-0x830],rdx
  231b96:	72 10                	jb     231ba8 <u64toa+0x2918>
  231b98:	48 8d 3d 39 18 01 00 	lea    rdi,[rip+0x11839]        # 2433d8 <__unnamed_20>
  231b9f:	31 c0                	xor    eax,eax
  231ba1:	89 c6                	mov    esi,eax
  231ba3:	e8 58 9a fd ff       	call   20b600 <panic>
  231ba8:	48 8d 05 71 6e fd ff 	lea    rax,[rip+0xfffffffffffd6e71]        # 208a20 <c_digits_lut>
  231baf:	48 8b 8d d0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x830]
  231bb6:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  231bb9:	48 8b 85 e0 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x820]
  231bc0:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  231bc2:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  231bc6:	48 83 c6 01          	add    rsi,0x1
  231bca:	0f 92 c2             	setb   dl
  231bcd:	48 89 b5 c8 f7 ff ff 	mov    QWORD PTR [rbp-0x838],rsi
  231bd4:	88 95 c7 f7 ff ff    	mov    BYTE PTR [rbp-0x839],dl
  231bda:	72 02                	jb     231bde <u64toa+0x294e>
  231bdc:	eb 10                	jmp    231bee <u64toa+0x295e>
  231bde:	48 8d 3d e3 15 01 00 	lea    rdi,[rip+0x115e3]        # 2431c8 <__unnamed_4>
  231be5:	31 c0                	xor    eax,eax
  231be7:	89 c6                	mov    esi,eax
  231be9:	e8 12 9a fd ff       	call   20b600 <panic>
  231bee:	48 8b 85 c8 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x838]
  231bf5:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            buffer[buf_index] = c_digits_lut[j];
  231bf9:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  231bfd:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  231c04:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  231c08:	48 89 8d b8 f7 ff ff 	mov    QWORD PTR [rbp-0x848],rcx
  231c0f:	72 10                	jb     231c21 <u64toa+0x2991>
  231c11:	48 8d 3d c0 17 01 00 	lea    rdi,[rip+0x117c0]        # 2433d8 <__unnamed_20>
  231c18:	31 c0                	xor    eax,eax
  231c1a:	89 c6                	mov    esi,eax
  231c1c:	e8 df 99 fd ff       	call   20b600 <panic>
  231c21:	48 8b 85 b8 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x848]
  231c28:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  231c2f:	48 03 01             	add    rax,QWORD PTR [rcx]
  231c32:	8b 95 30 ff ff ff    	mov    edx,DWORD PTR [rbp-0xd0]
  231c38:	89 d6                	mov    esi,edx
  231c3a:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  231c41:	48 89 85 b0 f7 ff ff 	mov    QWORD PTR [rbp-0x850],rax
  231c48:	48 89 b5 a8 f7 ff ff 	mov    QWORD PTR [rbp-0x858],rsi
  231c4f:	72 10                	jb     231c61 <u64toa+0x29d1>
  231c51:	48 8d 3d 80 17 01 00 	lea    rdi,[rip+0x11780]        # 2433d8 <__unnamed_20>
  231c58:	31 c0                	xor    eax,eax
  231c5a:	89 c6                	mov    esi,eax
  231c5c:	e8 9f 99 fd ff       	call   20b600 <panic>
  231c61:	48 8d 05 b8 6d fd ff 	lea    rax,[rip+0xfffffffffffd6db8]        # 208a20 <c_digits_lut>
  231c68:	48 8b 8d a8 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x858]
  231c6f:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  231c72:	48 8b 85 b0 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x850]
  231c79:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  231c7b:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  231c7f:	48 83 c6 01          	add    rsi,0x1
  231c83:	0f 92 c2             	setb   dl
  231c86:	48 89 b5 a0 f7 ff ff 	mov    QWORD PTR [rbp-0x860],rsi
  231c8d:	88 95 9f f7 ff ff    	mov    BYTE PTR [rbp-0x861],dl
  231c93:	72 02                	jb     231c97 <u64toa+0x2a07>
  231c95:	eb 10                	jmp    231ca7 <u64toa+0x2a17>
  231c97:	48 8d 3d 2a 15 01 00 	lea    rdi,[rip+0x1152a]        # 2431c8 <__unnamed_4>
  231c9e:	31 c0                	xor    eax,eax
  231ca0:	89 c6                	mov    esi,eax
  231ca2:	e8 59 99 fd ff       	call   20b600 <panic>
  231ca7:	48 8b 85 a0 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x860]
  231cae:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
            buffer[buf_index] = c_digits_lut[j + 1];
  231cb2:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  231cb6:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  231cbd:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  231cc1:	48 89 8d 90 f7 ff ff 	mov    QWORD PTR [rbp-0x870],rcx
  231cc8:	72 10                	jb     231cda <u64toa+0x2a4a>
  231cca:	48 8d 3d 07 17 01 00 	lea    rdi,[rip+0x11707]        # 2433d8 <__unnamed_20>
  231cd1:	31 c0                	xor    eax,eax
  231cd3:	89 c6                	mov    esi,eax
  231cd5:	e8 26 99 fd ff       	call   20b600 <panic>
  231cda:	48 8b 85 90 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x870]
  231ce1:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  231ce8:	48 03 01             	add    rax,QWORD PTR [rcx]
  231ceb:	8b 95 30 ff ff ff    	mov    edx,DWORD PTR [rbp-0xd0]
  231cf1:	83 c2 01             	add    edx,0x1
  231cf4:	40 0f 92 c6          	setb   sil
  231cf8:	48 89 85 88 f7 ff ff 	mov    QWORD PTR [rbp-0x878],rax
  231cff:	89 95 84 f7 ff ff    	mov    DWORD PTR [rbp-0x87c],edx
  231d05:	40 88 b5 83 f7 ff ff 	mov    BYTE PTR [rbp-0x87d],sil
  231d0c:	72 02                	jb     231d10 <u64toa+0x2a80>
  231d0e:	eb 10                	jmp    231d20 <u64toa+0x2a90>
  231d10:	48 8d 3d b1 14 01 00 	lea    rdi,[rip+0x114b1]        # 2431c8 <__unnamed_4>
  231d17:	31 c0                	xor    eax,eax
  231d19:	89 c6                	mov    esi,eax
  231d1b:	e8 e0 98 fd ff       	call   20b600 <panic>
  231d20:	8b 85 84 f7 ff ff    	mov    eax,DWORD PTR [rbp-0x87c]
  231d26:	89 c1                	mov    ecx,eax
  231d28:	89 ca                	mov    edx,ecx
  231d2a:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  231d31:	48 89 95 78 f7 ff ff 	mov    QWORD PTR [rbp-0x888],rdx
  231d38:	72 10                	jb     231d4a <u64toa+0x2aba>
  231d3a:	48 8d 3d 97 16 01 00 	lea    rdi,[rip+0x11697]        # 2433d8 <__unnamed_20>
  231d41:	31 c0                	xor    eax,eax
  231d43:	89 c6                	mov    esi,eax
  231d45:	e8 b6 98 fd ff       	call   20b600 <panic>
  231d4a:	48 8d 05 cf 6c fd ff 	lea    rax,[rip+0xfffffffffffd6ccf]        # 208a20 <c_digits_lut>
  231d51:	48 8b 8d 78 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x888]
  231d58:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  231d5b:	48 8b 85 88 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x878]
  231d62:	88 10                	mov    BYTE PTR [rax],dl
            buf_index += 1;
  231d64:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  231d68:	48 83 c6 01          	add    rsi,0x1
  231d6c:	0f 92 c2             	setb   dl
  231d6f:	48 89 b5 70 f7 ff ff 	mov    QWORD PTR [rbp-0x890],rsi
  231d76:	88 95 6f f7 ff ff    	mov    BYTE PTR [rbp-0x891],dl
  231d7c:	72 02                	jb     231d80 <u64toa+0x2af0>
  231d7e:	eb 10                	jmp    231d90 <u64toa+0x2b00>
  231d80:	48 8d 3d 41 14 01 00 	lea    rdi,[rip+0x11441]        # 2431c8 <__unnamed_4>
  231d87:	31 c0                	xor    eax,eax
  231d89:	89 c6                	mov    esi,eax
  231d8b:	e8 70 98 fd ff       	call   20b600 <panic>
  231d90:	48 8b 85 70 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x890]
  231d97:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        } else if (a < 1000) {
  231d9b:	e9 b3 d9 ff ff       	jmp    22f753 <u64toa+0x4c3>
  231da0:	b8 00 e1 f5 05       	mov    eax,0x5f5e100
  231da5:	89 c1                	mov    ecx,eax
        const v0 = @intCast(u32, value / kTen8);
  231da7:	48 8b 85 20 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e0]
  231dae:	31 d2                	xor    edx,edx
  231db0:	48 f7 f1             	div    rcx
  231db3:	89 c6                	mov    esi,eax
  231db5:	89 f7                	mov    edi,esi
  231db7:	89 f9                	mov    ecx,edi
  231db9:	48 39 c8             	cmp    rax,rcx
  231dbc:	89 b5 68 f7 ff ff    	mov    DWORD PTR [rbp-0x898],esi
  231dc2:	74 12                	je     231dd6 <u64toa+0x2b46>
  231dc4:	eb 32                	jmp    231df8 <u64toa+0x2b68>
  231dc6:	48 8d 3d 73 14 01 00 	lea    rdi,[rip+0x11473]        # 243240 <__unnamed_7>
  231dcd:	31 c0                	xor    eax,eax
  231dcf:	89 c6                	mov    esi,eax
  231dd1:	e8 2a 98 fd ff       	call   20b600 <panic>
  231dd6:	31 c0                	xor    eax,eax
  231dd8:	88 c1                	mov    cl,al
  231dda:	8b 85 68 f7 ff ff    	mov    eax,DWORD PTR [rbp-0x898]
  231de0:	89 85 2c ff ff ff    	mov    DWORD PTR [rbp-0xd4],eax
        const v1 = @intCast(u32, value % kTen8);
  231de6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  231dea:	f6 c1 01             	test   cl,0x1
  231ded:	48 89 85 60 f7 ff ff 	mov    QWORD PTR [rbp-0x8a0],rax
  231df4:	75 38                	jne    231e2e <u64toa+0x2b9e>
  231df6:	eb 10                	jmp    231e08 <u64toa+0x2b78>
  231df8:	48 8d 3d 89 16 01 00 	lea    rdi,[rip+0x11689]        # 243488 <__unnamed_22>
  231dff:	31 c0                	xor    eax,eax
  231e01:	89 c6                	mov    esi,eax
        const v0 = @intCast(u32, value / kTen8);
  231e03:	e8 f8 97 fd ff       	call   20b600 <panic>
  231e08:	b8 00 e1 f5 05       	mov    eax,0x5f5e100
  231e0d:	89 c1                	mov    ecx,eax
        const v1 = @intCast(u32, value % kTen8);
  231e0f:	48 8b 85 60 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x8a0]
  231e16:	31 d2                	xor    edx,edx
  231e18:	48 f7 f1             	div    rcx
  231e1b:	89 d6                	mov    esi,edx
  231e1d:	89 f7                	mov    edi,esi
  231e1f:	89 f9                	mov    ecx,edi
  231e21:	48 39 ca             	cmp    rdx,rcx
  231e24:	89 b5 5c f7 ff ff    	mov    DWORD PTR [rbp-0x8a4],esi
  231e2a:	74 12                	je     231e3e <u64toa+0x2bae>
  231e2c:	eb 33                	jmp    231e61 <u64toa+0x2bd1>
  231e2e:	48 8d 3d b3 14 01 00 	lea    rdi,[rip+0x114b3]        # 2432e8 <__unnamed_15>
  231e35:	31 c0                	xor    eax,eax
  231e37:	89 c6                	mov    esi,eax
  231e39:	e8 c2 97 fd ff       	call   20b600 <panic>
  231e3e:	31 c0                	xor    eax,eax
  231e40:	88 c1                	mov    cl,al
  231e42:	8b 85 5c f7 ff ff    	mov    eax,DWORD PTR [rbp-0x8a4]
  231e48:	89 85 28 ff ff ff    	mov    DWORD PTR [rbp-0xd8],eax
        const b0: u32 = v0 / 10000;
  231e4e:	8b 85 2c ff ff ff    	mov    eax,DWORD PTR [rbp-0xd4]
  231e54:	f6 c1 01             	test   cl,0x1
  231e57:	89 85 58 f7 ff ff    	mov    DWORD PTR [rbp-0x8a8],eax
  231e5d:	75 4c                	jne    231eab <u64toa+0x2c1b>
  231e5f:	eb 10                	jmp    231e71 <u64toa+0x2be1>
  231e61:	48 8d 3d 20 16 01 00 	lea    rdi,[rip+0x11620]        # 243488 <__unnamed_22>
  231e68:	31 c0                	xor    eax,eax
  231e6a:	89 c6                	mov    esi,eax
        const v1 = @intCast(u32, value % kTen8);
  231e6c:	e8 8f 97 fd ff       	call   20b600 <panic>
  231e71:	31 c0                	xor    eax,eax
  231e73:	88 c1                	mov    cl,al
  231e75:	b8 10 27 00 00       	mov    eax,0x2710
        const b0: u32 = v0 / 10000;
  231e7a:	8b 95 58 f7 ff ff    	mov    edx,DWORD PTR [rbp-0x8a8]
  231e80:	89 85 54 f7 ff ff    	mov    DWORD PTR [rbp-0x8ac],eax
  231e86:	89 d0                	mov    eax,edx
  231e88:	31 d2                	xor    edx,edx
  231e8a:	8b b5 54 f7 ff ff    	mov    esi,DWORD PTR [rbp-0x8ac]
  231e90:	f7 f6                	div    esi
  231e92:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
        const c0: u32 = v0 % 10000;
  231e98:	8b 85 2c ff ff ff    	mov    eax,DWORD PTR [rbp-0xd4]
  231e9e:	f6 c1 01             	test   cl,0x1
  231ea1:	89 85 50 f7 ff ff    	mov    DWORD PTR [rbp-0x8b0],eax
  231ea7:	75 4c                	jne    231ef5 <u64toa+0x2c65>
  231ea9:	eb 10                	jmp    231ebb <u64toa+0x2c2b>
  231eab:	48 8d 3d 8e 13 01 00 	lea    rdi,[rip+0x1138e]        # 243240 <__unnamed_7>
  231eb2:	31 c0                	xor    eax,eax
  231eb4:	89 c6                	mov    esi,eax
        const b0: u32 = v0 / 10000;
  231eb6:	e8 45 97 fd ff       	call   20b600 <panic>
  231ebb:	31 c0                	xor    eax,eax
  231ebd:	88 c1                	mov    cl,al
  231ebf:	b8 10 27 00 00       	mov    eax,0x2710
        const c0: u32 = v0 % 10000;
  231ec4:	8b 95 50 f7 ff ff    	mov    edx,DWORD PTR [rbp-0x8b0]
  231eca:	89 85 4c f7 ff ff    	mov    DWORD PTR [rbp-0x8b4],eax
  231ed0:	89 d0                	mov    eax,edx
  231ed2:	31 d2                	xor    edx,edx
  231ed4:	8b b5 4c f7 ff ff    	mov    esi,DWORD PTR [rbp-0x8b4]
  231eda:	f7 f6                	div    esi
  231edc:	89 95 20 ff ff ff    	mov    DWORD PTR [rbp-0xe0],edx
        const d1: u32 = (b0 / 100) << 1;
  231ee2:	8b 95 24 ff ff ff    	mov    edx,DWORD PTR [rbp-0xdc]
  231ee8:	f6 c1 01             	test   cl,0x1
  231eeb:	89 95 48 f7 ff ff    	mov    DWORD PTR [rbp-0x8b8],edx
  231ef1:	75 4f                	jne    231f42 <u64toa+0x2cb2>
  231ef3:	eb 10                	jmp    231f05 <u64toa+0x2c75>
  231ef5:	48 8d 3d ec 13 01 00 	lea    rdi,[rip+0x113ec]        # 2432e8 <__unnamed_15>
  231efc:	31 c0                	xor    eax,eax
  231efe:	89 c6                	mov    esi,eax
        const c0: u32 = v0 % 10000;
  231f00:	e8 fb 96 fd ff       	call   20b600 <panic>
  231f05:	31 c0                	xor    eax,eax
  231f07:	88 c1                	mov    cl,al
  231f09:	b8 64 00 00 00       	mov    eax,0x64
        const d1: u32 = (b0 / 100) << 1;
  231f0e:	8b 95 48 f7 ff ff    	mov    edx,DWORD PTR [rbp-0x8b8]
  231f14:	89 85 44 f7 ff ff    	mov    DWORD PTR [rbp-0x8bc],eax
  231f1a:	89 d0                	mov    eax,edx
  231f1c:	31 d2                	xor    edx,edx
  231f1e:	8b b5 44 f7 ff ff    	mov    esi,DWORD PTR [rbp-0x8bc]
  231f24:	f7 f6                	div    esi
  231f26:	c1 e0 01             	shl    eax,0x1
  231f29:	89 85 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],eax
        const d2: u32 = (b0 % 100) << 1;
  231f2f:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
  231f35:	f6 c1 01             	test   cl,0x1
  231f38:	89 85 40 f7 ff ff    	mov    DWORD PTR [rbp-0x8c0],eax
  231f3e:	75 4f                	jne    231f8f <u64toa+0x2cff>
  231f40:	eb 10                	jmp    231f52 <u64toa+0x2cc2>
  231f42:	48 8d 3d f7 12 01 00 	lea    rdi,[rip+0x112f7]        # 243240 <__unnamed_7>
  231f49:	31 c0                	xor    eax,eax
  231f4b:	89 c6                	mov    esi,eax
        const d1: u32 = (b0 / 100) << 1;
  231f4d:	e8 ae 96 fd ff       	call   20b600 <panic>
  231f52:	31 c0                	xor    eax,eax
  231f54:	88 c1                	mov    cl,al
  231f56:	b8 64 00 00 00       	mov    eax,0x64
        const d2: u32 = (b0 % 100) << 1;
  231f5b:	8b 95 40 f7 ff ff    	mov    edx,DWORD PTR [rbp-0x8c0]
  231f61:	89 85 3c f7 ff ff    	mov    DWORD PTR [rbp-0x8c4],eax
  231f67:	89 d0                	mov    eax,edx
  231f69:	31 d2                	xor    edx,edx
  231f6b:	8b b5 3c f7 ff ff    	mov    esi,DWORD PTR [rbp-0x8c4]
  231f71:	f7 f6                	div    esi
  231f73:	c1 e2 01             	shl    edx,0x1
  231f76:	89 95 18 ff ff ff    	mov    DWORD PTR [rbp-0xe8],edx
        const d3: u32 = (c0 / 100) << 1;
  231f7c:	8b 95 20 ff ff ff    	mov    edx,DWORD PTR [rbp-0xe0]
  231f82:	f6 c1 01             	test   cl,0x1
  231f85:	89 95 38 f7 ff ff    	mov    DWORD PTR [rbp-0x8c8],edx
  231f8b:	75 4f                	jne    231fdc <u64toa+0x2d4c>
  231f8d:	eb 10                	jmp    231f9f <u64toa+0x2d0f>
  231f8f:	48 8d 3d 52 13 01 00 	lea    rdi,[rip+0x11352]        # 2432e8 <__unnamed_15>
  231f96:	31 c0                	xor    eax,eax
  231f98:	89 c6                	mov    esi,eax
        const d2: u32 = (b0 % 100) << 1;
  231f9a:	e8 61 96 fd ff       	call   20b600 <panic>
  231f9f:	31 c0                	xor    eax,eax
  231fa1:	88 c1                	mov    cl,al
  231fa3:	b8 64 00 00 00       	mov    eax,0x64
        const d3: u32 = (c0 / 100) << 1;
  231fa8:	8b 95 38 f7 ff ff    	mov    edx,DWORD PTR [rbp-0x8c8]
  231fae:	89 85 34 f7 ff ff    	mov    DWORD PTR [rbp-0x8cc],eax
  231fb4:	89 d0                	mov    eax,edx
  231fb6:	31 d2                	xor    edx,edx
  231fb8:	8b b5 34 f7 ff ff    	mov    esi,DWORD PTR [rbp-0x8cc]
  231fbe:	f7 f6                	div    esi
  231fc0:	c1 e0 01             	shl    eax,0x1
  231fc3:	89 85 14 ff ff ff    	mov    DWORD PTR [rbp-0xec],eax
        const d4: u32 = (c0 % 100) << 1;
  231fc9:	8b 85 20 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe0]
  231fcf:	f6 c1 01             	test   cl,0x1
  231fd2:	89 85 30 f7 ff ff    	mov    DWORD PTR [rbp-0x8d0],eax
  231fd8:	75 4f                	jne    232029 <u64toa+0x2d99>
  231fda:	eb 10                	jmp    231fec <u64toa+0x2d5c>
  231fdc:	48 8d 3d 5d 12 01 00 	lea    rdi,[rip+0x1125d]        # 243240 <__unnamed_7>
  231fe3:	31 c0                	xor    eax,eax
  231fe5:	89 c6                	mov    esi,eax
        const d3: u32 = (c0 / 100) << 1;
  231fe7:	e8 14 96 fd ff       	call   20b600 <panic>
  231fec:	31 c0                	xor    eax,eax
  231fee:	88 c1                	mov    cl,al
  231ff0:	b8 64 00 00 00       	mov    eax,0x64
        const d4: u32 = (c0 % 100) << 1;
  231ff5:	8b 95 30 f7 ff ff    	mov    edx,DWORD PTR [rbp-0x8d0]
  231ffb:	89 85 2c f7 ff ff    	mov    DWORD PTR [rbp-0x8d4],eax
  232001:	89 d0                	mov    eax,edx
  232003:	31 d2                	xor    edx,edx
  232005:	8b b5 2c f7 ff ff    	mov    esi,DWORD PTR [rbp-0x8d4]
  23200b:	f7 f6                	div    esi
  23200d:	c1 e2 01             	shl    edx,0x1
  232010:	89 95 10 ff ff ff    	mov    DWORD PTR [rbp-0xf0],edx
        const b1: u32 = v1 / 10000;
  232016:	8b 95 28 ff ff ff    	mov    edx,DWORD PTR [rbp-0xd8]
  23201c:	f6 c1 01             	test   cl,0x1
  23201f:	89 95 28 f7 ff ff    	mov    DWORD PTR [rbp-0x8d8],edx
  232025:	75 4c                	jne    232073 <u64toa+0x2de3>
  232027:	eb 10                	jmp    232039 <u64toa+0x2da9>
  232029:	48 8d 3d b8 12 01 00 	lea    rdi,[rip+0x112b8]        # 2432e8 <__unnamed_15>
  232030:	31 c0                	xor    eax,eax
  232032:	89 c6                	mov    esi,eax
        const d4: u32 = (c0 % 100) << 1;
  232034:	e8 c7 95 fd ff       	call   20b600 <panic>
  232039:	31 c0                	xor    eax,eax
  23203b:	88 c1                	mov    cl,al
  23203d:	b8 10 27 00 00       	mov    eax,0x2710
        const b1: u32 = v1 / 10000;
  232042:	8b 95 28 f7 ff ff    	mov    edx,DWORD PTR [rbp-0x8d8]
  232048:	89 85 24 f7 ff ff    	mov    DWORD PTR [rbp-0x8dc],eax
  23204e:	89 d0                	mov    eax,edx
  232050:	31 d2                	xor    edx,edx
  232052:	8b b5 24 f7 ff ff    	mov    esi,DWORD PTR [rbp-0x8dc]
  232058:	f7 f6                	div    esi
  23205a:	89 85 0c ff ff ff    	mov    DWORD PTR [rbp-0xf4],eax
        const c1: u32 = v1 % 10000;
  232060:	8b 85 28 ff ff ff    	mov    eax,DWORD PTR [rbp-0xd8]
  232066:	f6 c1 01             	test   cl,0x1
  232069:	89 85 20 f7 ff ff    	mov    DWORD PTR [rbp-0x8e0],eax
  23206f:	75 4c                	jne    2320bd <u64toa+0x2e2d>
  232071:	eb 10                	jmp    232083 <u64toa+0x2df3>
  232073:	48 8d 3d c6 11 01 00 	lea    rdi,[rip+0x111c6]        # 243240 <__unnamed_7>
  23207a:	31 c0                	xor    eax,eax
  23207c:	89 c6                	mov    esi,eax
        const b1: u32 = v1 / 10000;
  23207e:	e8 7d 95 fd ff       	call   20b600 <panic>
  232083:	31 c0                	xor    eax,eax
  232085:	88 c1                	mov    cl,al
  232087:	b8 10 27 00 00       	mov    eax,0x2710
        const c1: u32 = v1 % 10000;
  23208c:	8b 95 20 f7 ff ff    	mov    edx,DWORD PTR [rbp-0x8e0]
  232092:	89 85 1c f7 ff ff    	mov    DWORD PTR [rbp-0x8e4],eax
  232098:	89 d0                	mov    eax,edx
  23209a:	31 d2                	xor    edx,edx
  23209c:	8b b5 1c f7 ff ff    	mov    esi,DWORD PTR [rbp-0x8e4]
  2320a2:	f7 f6                	div    esi
  2320a4:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
        const d5: u32 = (b1 / 100) << 1;
  2320aa:	8b 95 0c ff ff ff    	mov    edx,DWORD PTR [rbp-0xf4]
  2320b0:	f6 c1 01             	test   cl,0x1
  2320b3:	89 95 18 f7 ff ff    	mov    DWORD PTR [rbp-0x8e8],edx
  2320b9:	75 4f                	jne    23210a <u64toa+0x2e7a>
  2320bb:	eb 10                	jmp    2320cd <u64toa+0x2e3d>
  2320bd:	48 8d 3d 24 12 01 00 	lea    rdi,[rip+0x11224]        # 2432e8 <__unnamed_15>
  2320c4:	31 c0                	xor    eax,eax
  2320c6:	89 c6                	mov    esi,eax
        const c1: u32 = v1 % 10000;
  2320c8:	e8 33 95 fd ff       	call   20b600 <panic>
  2320cd:	31 c0                	xor    eax,eax
  2320cf:	88 c1                	mov    cl,al
  2320d1:	b8 64 00 00 00       	mov    eax,0x64
        const d5: u32 = (b1 / 100) << 1;
  2320d6:	8b 95 18 f7 ff ff    	mov    edx,DWORD PTR [rbp-0x8e8]
  2320dc:	89 85 14 f7 ff ff    	mov    DWORD PTR [rbp-0x8ec],eax
  2320e2:	89 d0                	mov    eax,edx
  2320e4:	31 d2                	xor    edx,edx
  2320e6:	8b b5 14 f7 ff ff    	mov    esi,DWORD PTR [rbp-0x8ec]
  2320ec:	f7 f6                	div    esi
  2320ee:	c1 e0 01             	shl    eax,0x1
  2320f1:	89 85 04 ff ff ff    	mov    DWORD PTR [rbp-0xfc],eax
        const d6: u32 = (b1 % 100) << 1;
  2320f7:	8b 85 0c ff ff ff    	mov    eax,DWORD PTR [rbp-0xf4]
  2320fd:	f6 c1 01             	test   cl,0x1
  232100:	89 85 10 f7 ff ff    	mov    DWORD PTR [rbp-0x8f0],eax
  232106:	75 4f                	jne    232157 <u64toa+0x2ec7>
  232108:	eb 10                	jmp    23211a <u64toa+0x2e8a>
  23210a:	48 8d 3d 2f 11 01 00 	lea    rdi,[rip+0x1112f]        # 243240 <__unnamed_7>
  232111:	31 c0                	xor    eax,eax
  232113:	89 c6                	mov    esi,eax
        const d5: u32 = (b1 / 100) << 1;
  232115:	e8 e6 94 fd ff       	call   20b600 <panic>
  23211a:	31 c0                	xor    eax,eax
  23211c:	88 c1                	mov    cl,al
  23211e:	b8 64 00 00 00       	mov    eax,0x64
        const d6: u32 = (b1 % 100) << 1;
  232123:	8b 95 10 f7 ff ff    	mov    edx,DWORD PTR [rbp-0x8f0]
  232129:	89 85 0c f7 ff ff    	mov    DWORD PTR [rbp-0x8f4],eax
  23212f:	89 d0                	mov    eax,edx
  232131:	31 d2                	xor    edx,edx
  232133:	8b b5 0c f7 ff ff    	mov    esi,DWORD PTR [rbp-0x8f4]
  232139:	f7 f6                	div    esi
  23213b:	c1 e2 01             	shl    edx,0x1
  23213e:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
        const d7: u32 = (c1 / 100) << 1;
  232144:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
  23214a:	f6 c1 01             	test   cl,0x1
  23214d:	89 95 08 f7 ff ff    	mov    DWORD PTR [rbp-0x8f8],edx
  232153:	75 4f                	jne    2321a4 <u64toa+0x2f14>
  232155:	eb 10                	jmp    232167 <u64toa+0x2ed7>
  232157:	48 8d 3d 8a 11 01 00 	lea    rdi,[rip+0x1118a]        # 2432e8 <__unnamed_15>
  23215e:	31 c0                	xor    eax,eax
  232160:	89 c6                	mov    esi,eax
        const d6: u32 = (b1 % 100) << 1;
  232162:	e8 99 94 fd ff       	call   20b600 <panic>
  232167:	31 c0                	xor    eax,eax
  232169:	88 c1                	mov    cl,al
  23216b:	b8 64 00 00 00       	mov    eax,0x64
        const d7: u32 = (c1 / 100) << 1;
  232170:	8b 95 08 f7 ff ff    	mov    edx,DWORD PTR [rbp-0x8f8]
  232176:	89 85 04 f7 ff ff    	mov    DWORD PTR [rbp-0x8fc],eax
  23217c:	89 d0                	mov    eax,edx
  23217e:	31 d2                	xor    edx,edx
  232180:	8b b5 04 f7 ff ff    	mov    esi,DWORD PTR [rbp-0x8fc]
  232186:	f7 f6                	div    esi
  232188:	c1 e0 01             	shl    eax,0x1
  23218b:	89 85 fc fe ff ff    	mov    DWORD PTR [rbp-0x104],eax
        const d8: u32 = (c1 % 100) << 1;
  232191:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
  232197:	f6 c1 01             	test   cl,0x1
  23219a:	89 85 00 f7 ff ff    	mov    DWORD PTR [rbp-0x900],eax
  2321a0:	75 52                	jne    2321f4 <u64toa+0x2f64>
  2321a2:	eb 10                	jmp    2321b4 <u64toa+0x2f24>
  2321a4:	48 8d 3d 95 10 01 00 	lea    rdi,[rip+0x11095]        # 243240 <__unnamed_7>
  2321ab:	31 c0                	xor    eax,eax
  2321ad:	89 c6                	mov    esi,eax
        const d7: u32 = (c1 / 100) << 1;
  2321af:	e8 4c 94 fd ff       	call   20b600 <panic>
  2321b4:	b8 64 00 00 00       	mov    eax,0x64
        const d8: u32 = (c1 % 100) << 1;
  2321b9:	8b 8d 00 f7 ff ff    	mov    ecx,DWORD PTR [rbp-0x900]
  2321bf:	89 85 fc f6 ff ff    	mov    DWORD PTR [rbp-0x904],eax
  2321c5:	89 c8                	mov    eax,ecx
  2321c7:	31 d2                	xor    edx,edx
  2321c9:	8b b5 fc f6 ff ff    	mov    esi,DWORD PTR [rbp-0x904]
  2321cf:	f7 f6                	div    esi
  2321d1:	c1 e2 01             	shl    edx,0x1
  2321d4:	89 95 f8 fe ff ff    	mov    DWORD PTR [rbp-0x108],edx
        buffer[buf_index] = c_digits_lut[d1];
  2321da:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
  2321de:	4c 8b 85 f0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x110]
  2321e5:	49 3b 78 08          	cmp    rdi,QWORD PTR [r8+0x8]
  2321e9:	48 89 bd f0 f6 ff ff 	mov    QWORD PTR [rbp-0x910],rdi
  2321f0:	72 22                	jb     232214 <u64toa+0x2f84>
  2321f2:	eb 10                	jmp    232204 <u64toa+0x2f74>
  2321f4:	48 8d 3d ed 10 01 00 	lea    rdi,[rip+0x110ed]        # 2432e8 <__unnamed_15>
  2321fb:	31 c0                	xor    eax,eax
  2321fd:	89 c6                	mov    esi,eax
        const d8: u32 = (c1 % 100) << 1;
  2321ff:	e8 fc 93 fd ff       	call   20b600 <panic>
  232204:	48 8d 3d cd 11 01 00 	lea    rdi,[rip+0x111cd]        # 2433d8 <__unnamed_20>
  23220b:	31 c0                	xor    eax,eax
  23220d:	89 c6                	mov    esi,eax
        buffer[buf_index] = c_digits_lut[d1];
  23220f:	e8 ec 93 fd ff       	call   20b600 <panic>
  232214:	48 8b 85 f0 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x910]
  23221b:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  232222:	48 03 01             	add    rax,QWORD PTR [rcx]
  232225:	8b 95 1c ff ff ff    	mov    edx,DWORD PTR [rbp-0xe4]
  23222b:	89 d6                	mov    esi,edx
  23222d:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  232234:	48 89 85 e8 f6 ff ff 	mov    QWORD PTR [rbp-0x918],rax
  23223b:	48 89 b5 e0 f6 ff ff 	mov    QWORD PTR [rbp-0x920],rsi
  232242:	72 10                	jb     232254 <u64toa+0x2fc4>
  232244:	48 8d 3d 8d 11 01 00 	lea    rdi,[rip+0x1118d]        # 2433d8 <__unnamed_20>
  23224b:	31 c0                	xor    eax,eax
  23224d:	89 c6                	mov    esi,eax
  23224f:	e8 ac 93 fd ff       	call   20b600 <panic>
  232254:	48 8d 05 c5 67 fd ff 	lea    rax,[rip+0xfffffffffffd67c5]        # 208a20 <c_digits_lut>
  23225b:	48 8b 8d e0 f6 ff ff 	mov    rcx,QWORD PTR [rbp-0x920]
  232262:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  232265:	48 8b 85 e8 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x918]
  23226c:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  23226e:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  232272:	48 83 c6 01          	add    rsi,0x1
  232276:	0f 92 c2             	setb   dl
  232279:	48 89 b5 d8 f6 ff ff 	mov    QWORD PTR [rbp-0x928],rsi
  232280:	88 95 d7 f6 ff ff    	mov    BYTE PTR [rbp-0x929],dl
  232286:	72 02                	jb     23228a <u64toa+0x2ffa>
  232288:	eb 10                	jmp    23229a <u64toa+0x300a>
  23228a:	48 8d 3d 37 0f 01 00 	lea    rdi,[rip+0x10f37]        # 2431c8 <__unnamed_4>
  232291:	31 c0                	xor    eax,eax
  232293:	89 c6                	mov    esi,eax
  232295:	e8 66 93 fd ff       	call   20b600 <panic>
  23229a:	48 8b 85 d8 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x928]
  2322a1:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d1 + 1];
  2322a5:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  2322a9:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  2322b0:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  2322b4:	48 89 8d c8 f6 ff ff 	mov    QWORD PTR [rbp-0x938],rcx
  2322bb:	72 10                	jb     2322cd <u64toa+0x303d>
  2322bd:	48 8d 3d 14 11 01 00 	lea    rdi,[rip+0x11114]        # 2433d8 <__unnamed_20>
  2322c4:	31 c0                	xor    eax,eax
  2322c6:	89 c6                	mov    esi,eax
  2322c8:	e8 33 93 fd ff       	call   20b600 <panic>
  2322cd:	48 8b 85 c8 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x938]
  2322d4:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  2322db:	48 03 01             	add    rax,QWORD PTR [rcx]
  2322de:	8b 95 1c ff ff ff    	mov    edx,DWORD PTR [rbp-0xe4]
  2322e4:	83 c2 01             	add    edx,0x1
  2322e7:	40 0f 92 c6          	setb   sil
  2322eb:	48 89 85 c0 f6 ff ff 	mov    QWORD PTR [rbp-0x940],rax
  2322f2:	89 95 bc f6 ff ff    	mov    DWORD PTR [rbp-0x944],edx
  2322f8:	40 88 b5 bb f6 ff ff 	mov    BYTE PTR [rbp-0x945],sil
  2322ff:	72 02                	jb     232303 <u64toa+0x3073>
  232301:	eb 10                	jmp    232313 <u64toa+0x3083>
  232303:	48 8d 3d be 0e 01 00 	lea    rdi,[rip+0x10ebe]        # 2431c8 <__unnamed_4>
  23230a:	31 c0                	xor    eax,eax
  23230c:	89 c6                	mov    esi,eax
  23230e:	e8 ed 92 fd ff       	call   20b600 <panic>
  232313:	8b 85 bc f6 ff ff    	mov    eax,DWORD PTR [rbp-0x944]
  232319:	89 c1                	mov    ecx,eax
  23231b:	89 ca                	mov    edx,ecx
  23231d:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  232324:	48 89 95 b0 f6 ff ff 	mov    QWORD PTR [rbp-0x950],rdx
  23232b:	72 10                	jb     23233d <u64toa+0x30ad>
  23232d:	48 8d 3d a4 10 01 00 	lea    rdi,[rip+0x110a4]        # 2433d8 <__unnamed_20>
  232334:	31 c0                	xor    eax,eax
  232336:	89 c6                	mov    esi,eax
  232338:	e8 c3 92 fd ff       	call   20b600 <panic>
  23233d:	48 8d 05 dc 66 fd ff 	lea    rax,[rip+0xfffffffffffd66dc]        # 208a20 <c_digits_lut>
  232344:	48 8b 8d b0 f6 ff ff 	mov    rcx,QWORD PTR [rbp-0x950]
  23234b:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  23234e:	48 8b 85 c0 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x940]
  232355:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  232357:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  23235b:	48 83 c6 01          	add    rsi,0x1
  23235f:	0f 92 c2             	setb   dl
  232362:	48 89 b5 a8 f6 ff ff 	mov    QWORD PTR [rbp-0x958],rsi
  232369:	88 95 a7 f6 ff ff    	mov    BYTE PTR [rbp-0x959],dl
  23236f:	72 02                	jb     232373 <u64toa+0x30e3>
  232371:	eb 10                	jmp    232383 <u64toa+0x30f3>
  232373:	48 8d 3d 4e 0e 01 00 	lea    rdi,[rip+0x10e4e]        # 2431c8 <__unnamed_4>
  23237a:	31 c0                	xor    eax,eax
  23237c:	89 c6                	mov    esi,eax
  23237e:	e8 7d 92 fd ff       	call   20b600 <panic>
  232383:	48 8b 85 a8 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x958]
  23238a:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d2];
  23238e:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  232392:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  232399:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  23239d:	48 89 8d 98 f6 ff ff 	mov    QWORD PTR [rbp-0x968],rcx
  2323a4:	72 10                	jb     2323b6 <u64toa+0x3126>
  2323a6:	48 8d 3d 2b 10 01 00 	lea    rdi,[rip+0x1102b]        # 2433d8 <__unnamed_20>
  2323ad:	31 c0                	xor    eax,eax
  2323af:	89 c6                	mov    esi,eax
  2323b1:	e8 4a 92 fd ff       	call   20b600 <panic>
  2323b6:	48 8b 85 98 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x968]
  2323bd:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  2323c4:	48 03 01             	add    rax,QWORD PTR [rcx]
  2323c7:	8b 95 18 ff ff ff    	mov    edx,DWORD PTR [rbp-0xe8]
  2323cd:	89 d6                	mov    esi,edx
  2323cf:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  2323d6:	48 89 85 90 f6 ff ff 	mov    QWORD PTR [rbp-0x970],rax
  2323dd:	48 89 b5 88 f6 ff ff 	mov    QWORD PTR [rbp-0x978],rsi
  2323e4:	72 10                	jb     2323f6 <u64toa+0x3166>
  2323e6:	48 8d 3d eb 0f 01 00 	lea    rdi,[rip+0x10feb]        # 2433d8 <__unnamed_20>
  2323ed:	31 c0                	xor    eax,eax
  2323ef:	89 c6                	mov    esi,eax
  2323f1:	e8 0a 92 fd ff       	call   20b600 <panic>
  2323f6:	48 8d 05 23 66 fd ff 	lea    rax,[rip+0xfffffffffffd6623]        # 208a20 <c_digits_lut>
  2323fd:	48 8b 8d 88 f6 ff ff 	mov    rcx,QWORD PTR [rbp-0x978]
  232404:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  232407:	48 8b 85 90 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x970]
  23240e:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  232410:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  232414:	48 83 c6 01          	add    rsi,0x1
  232418:	0f 92 c2             	setb   dl
  23241b:	48 89 b5 80 f6 ff ff 	mov    QWORD PTR [rbp-0x980],rsi
  232422:	88 95 7f f6 ff ff    	mov    BYTE PTR [rbp-0x981],dl
  232428:	72 02                	jb     23242c <u64toa+0x319c>
  23242a:	eb 10                	jmp    23243c <u64toa+0x31ac>
  23242c:	48 8d 3d 95 0d 01 00 	lea    rdi,[rip+0x10d95]        # 2431c8 <__unnamed_4>
  232433:	31 c0                	xor    eax,eax
  232435:	89 c6                	mov    esi,eax
  232437:	e8 c4 91 fd ff       	call   20b600 <panic>
  23243c:	48 8b 85 80 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x980]
  232443:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d2 + 1];
  232447:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  23244b:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  232452:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  232456:	48 89 8d 70 f6 ff ff 	mov    QWORD PTR [rbp-0x990],rcx
  23245d:	72 10                	jb     23246f <u64toa+0x31df>
  23245f:	48 8d 3d 72 0f 01 00 	lea    rdi,[rip+0x10f72]        # 2433d8 <__unnamed_20>
  232466:	31 c0                	xor    eax,eax
  232468:	89 c6                	mov    esi,eax
  23246a:	e8 91 91 fd ff       	call   20b600 <panic>
  23246f:	48 8b 85 70 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x990]
  232476:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  23247d:	48 03 01             	add    rax,QWORD PTR [rcx]
  232480:	8b 95 18 ff ff ff    	mov    edx,DWORD PTR [rbp-0xe8]
  232486:	83 c2 01             	add    edx,0x1
  232489:	40 0f 92 c6          	setb   sil
  23248d:	48 89 85 68 f6 ff ff 	mov    QWORD PTR [rbp-0x998],rax
  232494:	89 95 64 f6 ff ff    	mov    DWORD PTR [rbp-0x99c],edx
  23249a:	40 88 b5 63 f6 ff ff 	mov    BYTE PTR [rbp-0x99d],sil
  2324a1:	72 02                	jb     2324a5 <u64toa+0x3215>
  2324a3:	eb 10                	jmp    2324b5 <u64toa+0x3225>
  2324a5:	48 8d 3d 1c 0d 01 00 	lea    rdi,[rip+0x10d1c]        # 2431c8 <__unnamed_4>
  2324ac:	31 c0                	xor    eax,eax
  2324ae:	89 c6                	mov    esi,eax
  2324b0:	e8 4b 91 fd ff       	call   20b600 <panic>
  2324b5:	8b 85 64 f6 ff ff    	mov    eax,DWORD PTR [rbp-0x99c]
  2324bb:	89 c1                	mov    ecx,eax
  2324bd:	89 ca                	mov    edx,ecx
  2324bf:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  2324c6:	48 89 95 58 f6 ff ff 	mov    QWORD PTR [rbp-0x9a8],rdx
  2324cd:	72 10                	jb     2324df <u64toa+0x324f>
  2324cf:	48 8d 3d 02 0f 01 00 	lea    rdi,[rip+0x10f02]        # 2433d8 <__unnamed_20>
  2324d6:	31 c0                	xor    eax,eax
  2324d8:	89 c6                	mov    esi,eax
  2324da:	e8 21 91 fd ff       	call   20b600 <panic>
  2324df:	48 8d 05 3a 65 fd ff 	lea    rax,[rip+0xfffffffffffd653a]        # 208a20 <c_digits_lut>
  2324e6:	48 8b 8d 58 f6 ff ff 	mov    rcx,QWORD PTR [rbp-0x9a8]
  2324ed:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  2324f0:	48 8b 85 68 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x998]
  2324f7:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  2324f9:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  2324fd:	48 83 c6 01          	add    rsi,0x1
  232501:	0f 92 c2             	setb   dl
  232504:	48 89 b5 50 f6 ff ff 	mov    QWORD PTR [rbp-0x9b0],rsi
  23250b:	88 95 4f f6 ff ff    	mov    BYTE PTR [rbp-0x9b1],dl
  232511:	72 02                	jb     232515 <u64toa+0x3285>
  232513:	eb 10                	jmp    232525 <u64toa+0x3295>
  232515:	48 8d 3d ac 0c 01 00 	lea    rdi,[rip+0x10cac]        # 2431c8 <__unnamed_4>
  23251c:	31 c0                	xor    eax,eax
  23251e:	89 c6                	mov    esi,eax
  232520:	e8 db 90 fd ff       	call   20b600 <panic>
  232525:	48 8b 85 50 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x9b0]
  23252c:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d3];
  232530:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  232534:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  23253b:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  23253f:	48 89 8d 40 f6 ff ff 	mov    QWORD PTR [rbp-0x9c0],rcx
  232546:	72 10                	jb     232558 <u64toa+0x32c8>
  232548:	48 8d 3d 89 0e 01 00 	lea    rdi,[rip+0x10e89]        # 2433d8 <__unnamed_20>
  23254f:	31 c0                	xor    eax,eax
  232551:	89 c6                	mov    esi,eax
  232553:	e8 a8 90 fd ff       	call   20b600 <panic>
  232558:	48 8b 85 40 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x9c0]
  23255f:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  232566:	48 03 01             	add    rax,QWORD PTR [rcx]
  232569:	8b 95 14 ff ff ff    	mov    edx,DWORD PTR [rbp-0xec]
  23256f:	89 d6                	mov    esi,edx
  232571:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  232578:	48 89 85 38 f6 ff ff 	mov    QWORD PTR [rbp-0x9c8],rax
  23257f:	48 89 b5 30 f6 ff ff 	mov    QWORD PTR [rbp-0x9d0],rsi
  232586:	72 10                	jb     232598 <u64toa+0x3308>
  232588:	48 8d 3d 49 0e 01 00 	lea    rdi,[rip+0x10e49]        # 2433d8 <__unnamed_20>
  23258f:	31 c0                	xor    eax,eax
  232591:	89 c6                	mov    esi,eax
  232593:	e8 68 90 fd ff       	call   20b600 <panic>
  232598:	48 8d 05 81 64 fd ff 	lea    rax,[rip+0xfffffffffffd6481]        # 208a20 <c_digits_lut>
  23259f:	48 8b 8d 30 f6 ff ff 	mov    rcx,QWORD PTR [rbp-0x9d0]
  2325a6:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  2325a9:	48 8b 85 38 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x9c8]
  2325b0:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  2325b2:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  2325b6:	48 83 c6 01          	add    rsi,0x1
  2325ba:	0f 92 c2             	setb   dl
  2325bd:	48 89 b5 28 f6 ff ff 	mov    QWORD PTR [rbp-0x9d8],rsi
  2325c4:	88 95 27 f6 ff ff    	mov    BYTE PTR [rbp-0x9d9],dl
  2325ca:	72 02                	jb     2325ce <u64toa+0x333e>
  2325cc:	eb 10                	jmp    2325de <u64toa+0x334e>
  2325ce:	48 8d 3d f3 0b 01 00 	lea    rdi,[rip+0x10bf3]        # 2431c8 <__unnamed_4>
  2325d5:	31 c0                	xor    eax,eax
  2325d7:	89 c6                	mov    esi,eax
  2325d9:	e8 22 90 fd ff       	call   20b600 <panic>
  2325de:	48 8b 85 28 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x9d8]
  2325e5:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d3 + 1];
  2325e9:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  2325ed:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  2325f4:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  2325f8:	48 89 8d 18 f6 ff ff 	mov    QWORD PTR [rbp-0x9e8],rcx
  2325ff:	72 10                	jb     232611 <u64toa+0x3381>
  232601:	48 8d 3d d0 0d 01 00 	lea    rdi,[rip+0x10dd0]        # 2433d8 <__unnamed_20>
  232608:	31 c0                	xor    eax,eax
  23260a:	89 c6                	mov    esi,eax
  23260c:	e8 ef 8f fd ff       	call   20b600 <panic>
  232611:	48 8b 85 18 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x9e8]
  232618:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  23261f:	48 03 01             	add    rax,QWORD PTR [rcx]
  232622:	8b 95 14 ff ff ff    	mov    edx,DWORD PTR [rbp-0xec]
  232628:	83 c2 01             	add    edx,0x1
  23262b:	40 0f 92 c6          	setb   sil
  23262f:	48 89 85 10 f6 ff ff 	mov    QWORD PTR [rbp-0x9f0],rax
  232636:	89 95 0c f6 ff ff    	mov    DWORD PTR [rbp-0x9f4],edx
  23263c:	40 88 b5 0b f6 ff ff 	mov    BYTE PTR [rbp-0x9f5],sil
  232643:	72 02                	jb     232647 <u64toa+0x33b7>
  232645:	eb 10                	jmp    232657 <u64toa+0x33c7>
  232647:	48 8d 3d 7a 0b 01 00 	lea    rdi,[rip+0x10b7a]        # 2431c8 <__unnamed_4>
  23264e:	31 c0                	xor    eax,eax
  232650:	89 c6                	mov    esi,eax
  232652:	e8 a9 8f fd ff       	call   20b600 <panic>
  232657:	8b 85 0c f6 ff ff    	mov    eax,DWORD PTR [rbp-0x9f4]
  23265d:	89 c1                	mov    ecx,eax
  23265f:	89 ca                	mov    edx,ecx
  232661:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  232668:	48 89 95 00 f6 ff ff 	mov    QWORD PTR [rbp-0xa00],rdx
  23266f:	72 10                	jb     232681 <u64toa+0x33f1>
  232671:	48 8d 3d 60 0d 01 00 	lea    rdi,[rip+0x10d60]        # 2433d8 <__unnamed_20>
  232678:	31 c0                	xor    eax,eax
  23267a:	89 c6                	mov    esi,eax
  23267c:	e8 7f 8f fd ff       	call   20b600 <panic>
  232681:	48 8d 05 98 63 fd ff 	lea    rax,[rip+0xfffffffffffd6398]        # 208a20 <c_digits_lut>
  232688:	48 8b 8d 00 f6 ff ff 	mov    rcx,QWORD PTR [rbp-0xa00]
  23268f:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  232692:	48 8b 85 10 f6 ff ff 	mov    rax,QWORD PTR [rbp-0x9f0]
  232699:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  23269b:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  23269f:	48 83 c6 01          	add    rsi,0x1
  2326a3:	0f 92 c2             	setb   dl
  2326a6:	48 89 b5 f8 f5 ff ff 	mov    QWORD PTR [rbp-0xa08],rsi
  2326ad:	88 95 f7 f5 ff ff    	mov    BYTE PTR [rbp-0xa09],dl
  2326b3:	72 02                	jb     2326b7 <u64toa+0x3427>
  2326b5:	eb 10                	jmp    2326c7 <u64toa+0x3437>
  2326b7:	48 8d 3d 0a 0b 01 00 	lea    rdi,[rip+0x10b0a]        # 2431c8 <__unnamed_4>
  2326be:	31 c0                	xor    eax,eax
  2326c0:	89 c6                	mov    esi,eax
  2326c2:	e8 39 8f fd ff       	call   20b600 <panic>
  2326c7:	48 8b 85 f8 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa08]
  2326ce:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d4];
  2326d2:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  2326d6:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  2326dd:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  2326e1:	48 89 8d e8 f5 ff ff 	mov    QWORD PTR [rbp-0xa18],rcx
  2326e8:	72 10                	jb     2326fa <u64toa+0x346a>
  2326ea:	48 8d 3d e7 0c 01 00 	lea    rdi,[rip+0x10ce7]        # 2433d8 <__unnamed_20>
  2326f1:	31 c0                	xor    eax,eax
  2326f3:	89 c6                	mov    esi,eax
  2326f5:	e8 06 8f fd ff       	call   20b600 <panic>
  2326fa:	48 8b 85 e8 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa18]
  232701:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  232708:	48 03 01             	add    rax,QWORD PTR [rcx]
  23270b:	8b 95 10 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf0]
  232711:	89 d6                	mov    esi,edx
  232713:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  23271a:	48 89 85 e0 f5 ff ff 	mov    QWORD PTR [rbp-0xa20],rax
  232721:	48 89 b5 d8 f5 ff ff 	mov    QWORD PTR [rbp-0xa28],rsi
  232728:	72 10                	jb     23273a <u64toa+0x34aa>
  23272a:	48 8d 3d a7 0c 01 00 	lea    rdi,[rip+0x10ca7]        # 2433d8 <__unnamed_20>
  232731:	31 c0                	xor    eax,eax
  232733:	89 c6                	mov    esi,eax
  232735:	e8 c6 8e fd ff       	call   20b600 <panic>
  23273a:	48 8d 05 df 62 fd ff 	lea    rax,[rip+0xfffffffffffd62df]        # 208a20 <c_digits_lut>
  232741:	48 8b 8d d8 f5 ff ff 	mov    rcx,QWORD PTR [rbp-0xa28]
  232748:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  23274b:	48 8b 85 e0 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa20]
  232752:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  232754:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  232758:	48 83 c6 01          	add    rsi,0x1
  23275c:	0f 92 c2             	setb   dl
  23275f:	48 89 b5 d0 f5 ff ff 	mov    QWORD PTR [rbp-0xa30],rsi
  232766:	88 95 cf f5 ff ff    	mov    BYTE PTR [rbp-0xa31],dl
  23276c:	72 02                	jb     232770 <u64toa+0x34e0>
  23276e:	eb 10                	jmp    232780 <u64toa+0x34f0>
  232770:	48 8d 3d 51 0a 01 00 	lea    rdi,[rip+0x10a51]        # 2431c8 <__unnamed_4>
  232777:	31 c0                	xor    eax,eax
  232779:	89 c6                	mov    esi,eax
  23277b:	e8 80 8e fd ff       	call   20b600 <panic>
  232780:	48 8b 85 d0 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa30]
  232787:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d4 + 1];
  23278b:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  23278f:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  232796:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  23279a:	48 89 8d c0 f5 ff ff 	mov    QWORD PTR [rbp-0xa40],rcx
  2327a1:	72 10                	jb     2327b3 <u64toa+0x3523>
  2327a3:	48 8d 3d 2e 0c 01 00 	lea    rdi,[rip+0x10c2e]        # 2433d8 <__unnamed_20>
  2327aa:	31 c0                	xor    eax,eax
  2327ac:	89 c6                	mov    esi,eax
  2327ae:	e8 4d 8e fd ff       	call   20b600 <panic>
  2327b3:	48 8b 85 c0 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa40]
  2327ba:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  2327c1:	48 03 01             	add    rax,QWORD PTR [rcx]
  2327c4:	8b 95 10 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf0]
  2327ca:	83 c2 01             	add    edx,0x1
  2327cd:	40 0f 92 c6          	setb   sil
  2327d1:	48 89 85 b8 f5 ff ff 	mov    QWORD PTR [rbp-0xa48],rax
  2327d8:	89 95 b4 f5 ff ff    	mov    DWORD PTR [rbp-0xa4c],edx
  2327de:	40 88 b5 b3 f5 ff ff 	mov    BYTE PTR [rbp-0xa4d],sil
  2327e5:	72 02                	jb     2327e9 <u64toa+0x3559>
  2327e7:	eb 10                	jmp    2327f9 <u64toa+0x3569>
  2327e9:	48 8d 3d d8 09 01 00 	lea    rdi,[rip+0x109d8]        # 2431c8 <__unnamed_4>
  2327f0:	31 c0                	xor    eax,eax
  2327f2:	89 c6                	mov    esi,eax
  2327f4:	e8 07 8e fd ff       	call   20b600 <panic>
  2327f9:	8b 85 b4 f5 ff ff    	mov    eax,DWORD PTR [rbp-0xa4c]
  2327ff:	89 c1                	mov    ecx,eax
  232801:	89 ca                	mov    edx,ecx
  232803:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  23280a:	48 89 95 a8 f5 ff ff 	mov    QWORD PTR [rbp-0xa58],rdx
  232811:	72 10                	jb     232823 <u64toa+0x3593>
  232813:	48 8d 3d be 0b 01 00 	lea    rdi,[rip+0x10bbe]        # 2433d8 <__unnamed_20>
  23281a:	31 c0                	xor    eax,eax
  23281c:	89 c6                	mov    esi,eax
  23281e:	e8 dd 8d fd ff       	call   20b600 <panic>
  232823:	48 8d 05 f6 61 fd ff 	lea    rax,[rip+0xfffffffffffd61f6]        # 208a20 <c_digits_lut>
  23282a:	48 8b 8d a8 f5 ff ff 	mov    rcx,QWORD PTR [rbp-0xa58]
  232831:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  232834:	48 8b 85 b8 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa48]
  23283b:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  23283d:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  232841:	48 83 c6 01          	add    rsi,0x1
  232845:	0f 92 c2             	setb   dl
  232848:	48 89 b5 a0 f5 ff ff 	mov    QWORD PTR [rbp-0xa60],rsi
  23284f:	88 95 9f f5 ff ff    	mov    BYTE PTR [rbp-0xa61],dl
  232855:	72 02                	jb     232859 <u64toa+0x35c9>
  232857:	eb 10                	jmp    232869 <u64toa+0x35d9>
  232859:	48 8d 3d 68 09 01 00 	lea    rdi,[rip+0x10968]        # 2431c8 <__unnamed_4>
  232860:	31 c0                	xor    eax,eax
  232862:	89 c6                	mov    esi,eax
  232864:	e8 97 8d fd ff       	call   20b600 <panic>
  232869:	48 8b 85 a0 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa60]
  232870:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d5];
  232874:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  232878:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  23287f:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  232883:	48 89 8d 90 f5 ff ff 	mov    QWORD PTR [rbp-0xa70],rcx
  23288a:	72 10                	jb     23289c <u64toa+0x360c>
  23288c:	48 8d 3d 45 0b 01 00 	lea    rdi,[rip+0x10b45]        # 2433d8 <__unnamed_20>
  232893:	31 c0                	xor    eax,eax
  232895:	89 c6                	mov    esi,eax
  232897:	e8 64 8d fd ff       	call   20b600 <panic>
  23289c:	48 8b 85 90 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa70]
  2328a3:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  2328aa:	48 03 01             	add    rax,QWORD PTR [rcx]
  2328ad:	8b 95 04 ff ff ff    	mov    edx,DWORD PTR [rbp-0xfc]
  2328b3:	89 d6                	mov    esi,edx
  2328b5:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  2328bc:	48 89 85 88 f5 ff ff 	mov    QWORD PTR [rbp-0xa78],rax
  2328c3:	48 89 b5 80 f5 ff ff 	mov    QWORD PTR [rbp-0xa80],rsi
  2328ca:	72 10                	jb     2328dc <u64toa+0x364c>
  2328cc:	48 8d 3d 05 0b 01 00 	lea    rdi,[rip+0x10b05]        # 2433d8 <__unnamed_20>
  2328d3:	31 c0                	xor    eax,eax
  2328d5:	89 c6                	mov    esi,eax
  2328d7:	e8 24 8d fd ff       	call   20b600 <panic>
  2328dc:	48 8d 05 3d 61 fd ff 	lea    rax,[rip+0xfffffffffffd613d]        # 208a20 <c_digits_lut>
  2328e3:	48 8b 8d 80 f5 ff ff 	mov    rcx,QWORD PTR [rbp-0xa80]
  2328ea:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  2328ed:	48 8b 85 88 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa78]
  2328f4:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  2328f6:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  2328fa:	48 83 c6 01          	add    rsi,0x1
  2328fe:	0f 92 c2             	setb   dl
  232901:	48 89 b5 78 f5 ff ff 	mov    QWORD PTR [rbp-0xa88],rsi
  232908:	88 95 77 f5 ff ff    	mov    BYTE PTR [rbp-0xa89],dl
  23290e:	72 02                	jb     232912 <u64toa+0x3682>
  232910:	eb 10                	jmp    232922 <u64toa+0x3692>
  232912:	48 8d 3d af 08 01 00 	lea    rdi,[rip+0x108af]        # 2431c8 <__unnamed_4>
  232919:	31 c0                	xor    eax,eax
  23291b:	89 c6                	mov    esi,eax
  23291d:	e8 de 8c fd ff       	call   20b600 <panic>
  232922:	48 8b 85 78 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa88]
  232929:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d5 + 1];
  23292d:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  232931:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  232938:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  23293c:	48 89 8d 68 f5 ff ff 	mov    QWORD PTR [rbp-0xa98],rcx
  232943:	72 10                	jb     232955 <u64toa+0x36c5>
  232945:	48 8d 3d 8c 0a 01 00 	lea    rdi,[rip+0x10a8c]        # 2433d8 <__unnamed_20>
  23294c:	31 c0                	xor    eax,eax
  23294e:	89 c6                	mov    esi,eax
  232950:	e8 ab 8c fd ff       	call   20b600 <panic>
  232955:	48 8b 85 68 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa98]
  23295c:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  232963:	48 03 01             	add    rax,QWORD PTR [rcx]
  232966:	8b 95 04 ff ff ff    	mov    edx,DWORD PTR [rbp-0xfc]
  23296c:	83 c2 01             	add    edx,0x1
  23296f:	40 0f 92 c6          	setb   sil
  232973:	48 89 85 60 f5 ff ff 	mov    QWORD PTR [rbp-0xaa0],rax
  23297a:	89 95 5c f5 ff ff    	mov    DWORD PTR [rbp-0xaa4],edx
  232980:	40 88 b5 5b f5 ff ff 	mov    BYTE PTR [rbp-0xaa5],sil
  232987:	72 02                	jb     23298b <u64toa+0x36fb>
  232989:	eb 10                	jmp    23299b <u64toa+0x370b>
  23298b:	48 8d 3d 36 08 01 00 	lea    rdi,[rip+0x10836]        # 2431c8 <__unnamed_4>
  232992:	31 c0                	xor    eax,eax
  232994:	89 c6                	mov    esi,eax
  232996:	e8 65 8c fd ff       	call   20b600 <panic>
  23299b:	8b 85 5c f5 ff ff    	mov    eax,DWORD PTR [rbp-0xaa4]
  2329a1:	89 c1                	mov    ecx,eax
  2329a3:	89 ca                	mov    edx,ecx
  2329a5:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  2329ac:	48 89 95 50 f5 ff ff 	mov    QWORD PTR [rbp-0xab0],rdx
  2329b3:	72 10                	jb     2329c5 <u64toa+0x3735>
  2329b5:	48 8d 3d 1c 0a 01 00 	lea    rdi,[rip+0x10a1c]        # 2433d8 <__unnamed_20>
  2329bc:	31 c0                	xor    eax,eax
  2329be:	89 c6                	mov    esi,eax
  2329c0:	e8 3b 8c fd ff       	call   20b600 <panic>
  2329c5:	48 8d 05 54 60 fd ff 	lea    rax,[rip+0xfffffffffffd6054]        # 208a20 <c_digits_lut>
  2329cc:	48 8b 8d 50 f5 ff ff 	mov    rcx,QWORD PTR [rbp-0xab0]
  2329d3:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  2329d6:	48 8b 85 60 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa0]
  2329dd:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  2329df:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  2329e3:	48 83 c6 01          	add    rsi,0x1
  2329e7:	0f 92 c2             	setb   dl
  2329ea:	48 89 b5 48 f5 ff ff 	mov    QWORD PTR [rbp-0xab8],rsi
  2329f1:	88 95 47 f5 ff ff    	mov    BYTE PTR [rbp-0xab9],dl
  2329f7:	72 02                	jb     2329fb <u64toa+0x376b>
  2329f9:	eb 10                	jmp    232a0b <u64toa+0x377b>
  2329fb:	48 8d 3d c6 07 01 00 	lea    rdi,[rip+0x107c6]        # 2431c8 <__unnamed_4>
  232a02:	31 c0                	xor    eax,eax
  232a04:	89 c6                	mov    esi,eax
  232a06:	e8 f5 8b fd ff       	call   20b600 <panic>
  232a0b:	48 8b 85 48 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xab8]
  232a12:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d6];
  232a16:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  232a1a:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  232a21:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  232a25:	48 89 8d 38 f5 ff ff 	mov    QWORD PTR [rbp-0xac8],rcx
  232a2c:	72 10                	jb     232a3e <u64toa+0x37ae>
  232a2e:	48 8d 3d a3 09 01 00 	lea    rdi,[rip+0x109a3]        # 2433d8 <__unnamed_20>
  232a35:	31 c0                	xor    eax,eax
  232a37:	89 c6                	mov    esi,eax
  232a39:	e8 c2 8b fd ff       	call   20b600 <panic>
  232a3e:	48 8b 85 38 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xac8]
  232a45:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  232a4c:	48 03 01             	add    rax,QWORD PTR [rcx]
  232a4f:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
  232a55:	89 d6                	mov    esi,edx
  232a57:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  232a5e:	48 89 85 30 f5 ff ff 	mov    QWORD PTR [rbp-0xad0],rax
  232a65:	48 89 b5 28 f5 ff ff 	mov    QWORD PTR [rbp-0xad8],rsi
  232a6c:	72 10                	jb     232a7e <u64toa+0x37ee>
  232a6e:	48 8d 3d 63 09 01 00 	lea    rdi,[rip+0x10963]        # 2433d8 <__unnamed_20>
  232a75:	31 c0                	xor    eax,eax
  232a77:	89 c6                	mov    esi,eax
  232a79:	e8 82 8b fd ff       	call   20b600 <panic>
  232a7e:	48 8d 05 9b 5f fd ff 	lea    rax,[rip+0xfffffffffffd5f9b]        # 208a20 <c_digits_lut>
  232a85:	48 8b 8d 28 f5 ff ff 	mov    rcx,QWORD PTR [rbp-0xad8]
  232a8c:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  232a8f:	48 8b 85 30 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xad0]
  232a96:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  232a98:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  232a9c:	48 83 c6 01          	add    rsi,0x1
  232aa0:	0f 92 c2             	setb   dl
  232aa3:	48 89 b5 20 f5 ff ff 	mov    QWORD PTR [rbp-0xae0],rsi
  232aaa:	88 95 1f f5 ff ff    	mov    BYTE PTR [rbp-0xae1],dl
  232ab0:	72 02                	jb     232ab4 <u64toa+0x3824>
  232ab2:	eb 10                	jmp    232ac4 <u64toa+0x3834>
  232ab4:	48 8d 3d 0d 07 01 00 	lea    rdi,[rip+0x1070d]        # 2431c8 <__unnamed_4>
  232abb:	31 c0                	xor    eax,eax
  232abd:	89 c6                	mov    esi,eax
  232abf:	e8 3c 8b fd ff       	call   20b600 <panic>
  232ac4:	48 8b 85 20 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xae0]
  232acb:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d6 + 1];
  232acf:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  232ad3:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  232ada:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  232ade:	48 89 8d 10 f5 ff ff 	mov    QWORD PTR [rbp-0xaf0],rcx
  232ae5:	72 10                	jb     232af7 <u64toa+0x3867>
  232ae7:	48 8d 3d ea 08 01 00 	lea    rdi,[rip+0x108ea]        # 2433d8 <__unnamed_20>
  232aee:	31 c0                	xor    eax,eax
  232af0:	89 c6                	mov    esi,eax
  232af2:	e8 09 8b fd ff       	call   20b600 <panic>
  232af7:	48 8b 85 10 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaf0]
  232afe:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  232b05:	48 03 01             	add    rax,QWORD PTR [rcx]
  232b08:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
  232b0e:	83 c2 01             	add    edx,0x1
  232b11:	40 0f 92 c6          	setb   sil
  232b15:	48 89 85 08 f5 ff ff 	mov    QWORD PTR [rbp-0xaf8],rax
  232b1c:	89 95 04 f5 ff ff    	mov    DWORD PTR [rbp-0xafc],edx
  232b22:	40 88 b5 03 f5 ff ff 	mov    BYTE PTR [rbp-0xafd],sil
  232b29:	72 02                	jb     232b2d <u64toa+0x389d>
  232b2b:	eb 10                	jmp    232b3d <u64toa+0x38ad>
  232b2d:	48 8d 3d 94 06 01 00 	lea    rdi,[rip+0x10694]        # 2431c8 <__unnamed_4>
  232b34:	31 c0                	xor    eax,eax
  232b36:	89 c6                	mov    esi,eax
  232b38:	e8 c3 8a fd ff       	call   20b600 <panic>
  232b3d:	8b 85 04 f5 ff ff    	mov    eax,DWORD PTR [rbp-0xafc]
  232b43:	89 c1                	mov    ecx,eax
  232b45:	89 ca                	mov    edx,ecx
  232b47:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  232b4e:	48 89 95 f8 f4 ff ff 	mov    QWORD PTR [rbp-0xb08],rdx
  232b55:	72 10                	jb     232b67 <u64toa+0x38d7>
  232b57:	48 8d 3d 7a 08 01 00 	lea    rdi,[rip+0x1087a]        # 2433d8 <__unnamed_20>
  232b5e:	31 c0                	xor    eax,eax
  232b60:	89 c6                	mov    esi,eax
  232b62:	e8 99 8a fd ff       	call   20b600 <panic>
  232b67:	48 8d 05 b2 5e fd ff 	lea    rax,[rip+0xfffffffffffd5eb2]        # 208a20 <c_digits_lut>
  232b6e:	48 8b 8d f8 f4 ff ff 	mov    rcx,QWORD PTR [rbp-0xb08]
  232b75:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  232b78:	48 8b 85 08 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaf8]
  232b7f:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  232b81:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  232b85:	48 83 c6 01          	add    rsi,0x1
  232b89:	0f 92 c2             	setb   dl
  232b8c:	48 89 b5 f0 f4 ff ff 	mov    QWORD PTR [rbp-0xb10],rsi
  232b93:	88 95 ef f4 ff ff    	mov    BYTE PTR [rbp-0xb11],dl
  232b99:	72 02                	jb     232b9d <u64toa+0x390d>
  232b9b:	eb 10                	jmp    232bad <u64toa+0x391d>
  232b9d:	48 8d 3d 24 06 01 00 	lea    rdi,[rip+0x10624]        # 2431c8 <__unnamed_4>
  232ba4:	31 c0                	xor    eax,eax
  232ba6:	89 c6                	mov    esi,eax
  232ba8:	e8 53 8a fd ff       	call   20b600 <panic>
  232bad:	48 8b 85 f0 f4 ff ff 	mov    rax,QWORD PTR [rbp-0xb10]
  232bb4:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d7];
  232bb8:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  232bbc:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  232bc3:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  232bc7:	48 89 8d e0 f4 ff ff 	mov    QWORD PTR [rbp-0xb20],rcx
  232bce:	72 10                	jb     232be0 <u64toa+0x3950>
  232bd0:	48 8d 3d 01 08 01 00 	lea    rdi,[rip+0x10801]        # 2433d8 <__unnamed_20>
  232bd7:	31 c0                	xor    eax,eax
  232bd9:	89 c6                	mov    esi,eax
  232bdb:	e8 20 8a fd ff       	call   20b600 <panic>
  232be0:	48 8b 85 e0 f4 ff ff 	mov    rax,QWORD PTR [rbp-0xb20]
  232be7:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  232bee:	48 03 01             	add    rax,QWORD PTR [rcx]
  232bf1:	8b 95 fc fe ff ff    	mov    edx,DWORD PTR [rbp-0x104]
  232bf7:	89 d6                	mov    esi,edx
  232bf9:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  232c00:	48 89 85 d8 f4 ff ff 	mov    QWORD PTR [rbp-0xb28],rax
  232c07:	48 89 b5 d0 f4 ff ff 	mov    QWORD PTR [rbp-0xb30],rsi
  232c0e:	72 10                	jb     232c20 <u64toa+0x3990>
  232c10:	48 8d 3d c1 07 01 00 	lea    rdi,[rip+0x107c1]        # 2433d8 <__unnamed_20>
  232c17:	31 c0                	xor    eax,eax
  232c19:	89 c6                	mov    esi,eax
  232c1b:	e8 e0 89 fd ff       	call   20b600 <panic>
  232c20:	48 8d 05 f9 5d fd ff 	lea    rax,[rip+0xfffffffffffd5df9]        # 208a20 <c_digits_lut>
  232c27:	48 8b 8d d0 f4 ff ff 	mov    rcx,QWORD PTR [rbp-0xb30]
  232c2e:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  232c31:	48 8b 85 d8 f4 ff ff 	mov    rax,QWORD PTR [rbp-0xb28]
  232c38:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  232c3a:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  232c3e:	48 83 c6 01          	add    rsi,0x1
  232c42:	0f 92 c2             	setb   dl
  232c45:	48 89 b5 c8 f4 ff ff 	mov    QWORD PTR [rbp-0xb38],rsi
  232c4c:	88 95 c7 f4 ff ff    	mov    BYTE PTR [rbp-0xb39],dl
  232c52:	72 02                	jb     232c56 <u64toa+0x39c6>
  232c54:	eb 10                	jmp    232c66 <u64toa+0x39d6>
  232c56:	48 8d 3d 6b 05 01 00 	lea    rdi,[rip+0x1056b]        # 2431c8 <__unnamed_4>
  232c5d:	31 c0                	xor    eax,eax
  232c5f:	89 c6                	mov    esi,eax
  232c61:	e8 9a 89 fd ff       	call   20b600 <panic>
  232c66:	48 8b 85 c8 f4 ff ff 	mov    rax,QWORD PTR [rbp-0xb38]
  232c6d:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d7 + 1];
  232c71:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  232c75:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  232c7c:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  232c80:	48 89 8d b8 f4 ff ff 	mov    QWORD PTR [rbp-0xb48],rcx
  232c87:	72 10                	jb     232c99 <u64toa+0x3a09>
  232c89:	48 8d 3d 48 07 01 00 	lea    rdi,[rip+0x10748]        # 2433d8 <__unnamed_20>
  232c90:	31 c0                	xor    eax,eax
  232c92:	89 c6                	mov    esi,eax
  232c94:	e8 67 89 fd ff       	call   20b600 <panic>
  232c99:	48 8b 85 b8 f4 ff ff 	mov    rax,QWORD PTR [rbp-0xb48]
  232ca0:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  232ca7:	48 03 01             	add    rax,QWORD PTR [rcx]
  232caa:	8b 95 fc fe ff ff    	mov    edx,DWORD PTR [rbp-0x104]
  232cb0:	83 c2 01             	add    edx,0x1
  232cb3:	40 0f 92 c6          	setb   sil
  232cb7:	48 89 85 b0 f4 ff ff 	mov    QWORD PTR [rbp-0xb50],rax
  232cbe:	89 95 ac f4 ff ff    	mov    DWORD PTR [rbp-0xb54],edx
  232cc4:	40 88 b5 ab f4 ff ff 	mov    BYTE PTR [rbp-0xb55],sil
  232ccb:	72 02                	jb     232ccf <u64toa+0x3a3f>
  232ccd:	eb 10                	jmp    232cdf <u64toa+0x3a4f>
  232ccf:	48 8d 3d f2 04 01 00 	lea    rdi,[rip+0x104f2]        # 2431c8 <__unnamed_4>
  232cd6:	31 c0                	xor    eax,eax
  232cd8:	89 c6                	mov    esi,eax
  232cda:	e8 21 89 fd ff       	call   20b600 <panic>
  232cdf:	8b 85 ac f4 ff ff    	mov    eax,DWORD PTR [rbp-0xb54]
  232ce5:	89 c1                	mov    ecx,eax
  232ce7:	89 ca                	mov    edx,ecx
  232ce9:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  232cf0:	48 89 95 a0 f4 ff ff 	mov    QWORD PTR [rbp-0xb60],rdx
  232cf7:	72 10                	jb     232d09 <u64toa+0x3a79>
  232cf9:	48 8d 3d d8 06 01 00 	lea    rdi,[rip+0x106d8]        # 2433d8 <__unnamed_20>
  232d00:	31 c0                	xor    eax,eax
  232d02:	89 c6                	mov    esi,eax
  232d04:	e8 f7 88 fd ff       	call   20b600 <panic>
  232d09:	48 8d 05 10 5d fd ff 	lea    rax,[rip+0xfffffffffffd5d10]        # 208a20 <c_digits_lut>
  232d10:	48 8b 8d a0 f4 ff ff 	mov    rcx,QWORD PTR [rbp-0xb60]
  232d17:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  232d1a:	48 8b 85 b0 f4 ff ff 	mov    rax,QWORD PTR [rbp-0xb50]
  232d21:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  232d23:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  232d27:	48 83 c6 01          	add    rsi,0x1
  232d2b:	0f 92 c2             	setb   dl
  232d2e:	48 89 b5 98 f4 ff ff 	mov    QWORD PTR [rbp-0xb68],rsi
  232d35:	88 95 97 f4 ff ff    	mov    BYTE PTR [rbp-0xb69],dl
  232d3b:	72 02                	jb     232d3f <u64toa+0x3aaf>
  232d3d:	eb 10                	jmp    232d4f <u64toa+0x3abf>
  232d3f:	48 8d 3d 82 04 01 00 	lea    rdi,[rip+0x10482]        # 2431c8 <__unnamed_4>
  232d46:	31 c0                	xor    eax,eax
  232d48:	89 c6                	mov    esi,eax
  232d4a:	e8 b1 88 fd ff       	call   20b600 <panic>
  232d4f:	48 8b 85 98 f4 ff ff 	mov    rax,QWORD PTR [rbp-0xb68]
  232d56:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d8];
  232d5a:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  232d5e:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  232d65:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  232d69:	48 89 8d 88 f4 ff ff 	mov    QWORD PTR [rbp-0xb78],rcx
  232d70:	72 10                	jb     232d82 <u64toa+0x3af2>
  232d72:	48 8d 3d 5f 06 01 00 	lea    rdi,[rip+0x1065f]        # 2433d8 <__unnamed_20>
  232d79:	31 c0                	xor    eax,eax
  232d7b:	89 c6                	mov    esi,eax
  232d7d:	e8 7e 88 fd ff       	call   20b600 <panic>
  232d82:	48 8b 85 88 f4 ff ff 	mov    rax,QWORD PTR [rbp-0xb78]
  232d89:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  232d90:	48 03 01             	add    rax,QWORD PTR [rcx]
  232d93:	8b 95 f8 fe ff ff    	mov    edx,DWORD PTR [rbp-0x108]
  232d99:	89 d6                	mov    esi,edx
  232d9b:	48 81 fe c8 00 00 00 	cmp    rsi,0xc8
  232da2:	48 89 85 80 f4 ff ff 	mov    QWORD PTR [rbp-0xb80],rax
  232da9:	48 89 b5 78 f4 ff ff 	mov    QWORD PTR [rbp-0xb88],rsi
  232db0:	72 10                	jb     232dc2 <u64toa+0x3b32>
  232db2:	48 8d 3d 1f 06 01 00 	lea    rdi,[rip+0x1061f]        # 2433d8 <__unnamed_20>
  232db9:	31 c0                	xor    eax,eax
  232dbb:	89 c6                	mov    esi,eax
  232dbd:	e8 3e 88 fd ff       	call   20b600 <panic>
  232dc2:	48 8d 05 57 5c fd ff 	lea    rax,[rip+0xfffffffffffd5c57]        # 208a20 <c_digits_lut>
  232dc9:	48 8b 8d 78 f4 ff ff 	mov    rcx,QWORD PTR [rbp-0xb88]
  232dd0:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  232dd3:	48 8b 85 80 f4 ff ff 	mov    rax,QWORD PTR [rbp-0xb80]
  232dda:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  232ddc:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  232de0:	48 83 c6 01          	add    rsi,0x1
  232de4:	0f 92 c2             	setb   dl
  232de7:	48 89 b5 70 f4 ff ff 	mov    QWORD PTR [rbp-0xb90],rsi
  232dee:	88 95 6f f4 ff ff    	mov    BYTE PTR [rbp-0xb91],dl
  232df4:	72 02                	jb     232df8 <u64toa+0x3b68>
  232df6:	eb 10                	jmp    232e08 <u64toa+0x3b78>
  232df8:	48 8d 3d c9 03 01 00 	lea    rdi,[rip+0x103c9]        # 2431c8 <__unnamed_4>
  232dff:	31 c0                	xor    eax,eax
  232e01:	89 c6                	mov    esi,eax
  232e03:	e8 f8 87 fd ff       	call   20b600 <panic>
  232e08:	48 8b 85 70 f4 ff ff 	mov    rax,QWORD PTR [rbp-0xb90]
  232e0f:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        buffer[buf_index] = c_digits_lut[d8 + 1];
  232e13:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  232e17:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
  232e1e:	48 3b 4a 08          	cmp    rcx,QWORD PTR [rdx+0x8]
  232e22:	48 89 8d 60 f4 ff ff 	mov    QWORD PTR [rbp-0xba0],rcx
  232e29:	72 10                	jb     232e3b <u64toa+0x3bab>
  232e2b:	48 8d 3d a6 05 01 00 	lea    rdi,[rip+0x105a6]        # 2433d8 <__unnamed_20>
  232e32:	31 c0                	xor    eax,eax
  232e34:	89 c6                	mov    esi,eax
  232e36:	e8 c5 87 fd ff       	call   20b600 <panic>
  232e3b:	48 8b 85 60 f4 ff ff 	mov    rax,QWORD PTR [rbp-0xba0]
  232e42:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  232e49:	48 03 01             	add    rax,QWORD PTR [rcx]
  232e4c:	8b 95 f8 fe ff ff    	mov    edx,DWORD PTR [rbp-0x108]
  232e52:	83 c2 01             	add    edx,0x1
  232e55:	40 0f 92 c6          	setb   sil
  232e59:	48 89 85 58 f4 ff ff 	mov    QWORD PTR [rbp-0xba8],rax
  232e60:	89 95 54 f4 ff ff    	mov    DWORD PTR [rbp-0xbac],edx
  232e66:	40 88 b5 53 f4 ff ff 	mov    BYTE PTR [rbp-0xbad],sil
  232e6d:	72 02                	jb     232e71 <u64toa+0x3be1>
  232e6f:	eb 10                	jmp    232e81 <u64toa+0x3bf1>
  232e71:	48 8d 3d 50 03 01 00 	lea    rdi,[rip+0x10350]        # 2431c8 <__unnamed_4>
  232e78:	31 c0                	xor    eax,eax
  232e7a:	89 c6                	mov    esi,eax
  232e7c:	e8 7f 87 fd ff       	call   20b600 <panic>
  232e81:	8b 85 54 f4 ff ff    	mov    eax,DWORD PTR [rbp-0xbac]
  232e87:	89 c1                	mov    ecx,eax
  232e89:	89 ca                	mov    edx,ecx
  232e8b:	48 81 fa c8 00 00 00 	cmp    rdx,0xc8
  232e92:	48 89 95 48 f4 ff ff 	mov    QWORD PTR [rbp-0xbb8],rdx
  232e99:	72 10                	jb     232eab <u64toa+0x3c1b>
  232e9b:	48 8d 3d 36 05 01 00 	lea    rdi,[rip+0x10536]        # 2433d8 <__unnamed_20>
  232ea2:	31 c0                	xor    eax,eax
  232ea4:	89 c6                	mov    esi,eax
  232ea6:	e8 55 87 fd ff       	call   20b600 <panic>
  232eab:	48 8d 05 6e 5b fd ff 	lea    rax,[rip+0xfffffffffffd5b6e]        # 208a20 <c_digits_lut>
  232eb2:	48 8b 8d 48 f4 ff ff 	mov    rcx,QWORD PTR [rbp-0xbb8]
  232eb9:	8a 14 08             	mov    dl,BYTE PTR [rax+rcx*1]
  232ebc:	48 8b 85 58 f4 ff ff 	mov    rax,QWORD PTR [rbp-0xba8]
  232ec3:	88 10                	mov    BYTE PTR [rax],dl
        buf_index += 1;
  232ec5:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  232ec9:	48 83 c6 01          	add    rsi,0x1
  232ecd:	0f 92 c2             	setb   dl
  232ed0:	48 89 b5 40 f4 ff ff 	mov    QWORD PTR [rbp-0xbc0],rsi
  232ed7:	88 95 3f f4 ff ff    	mov    BYTE PTR [rbp-0xbc1],dl
  232edd:	72 02                	jb     232ee1 <u64toa+0x3c51>
  232edf:	eb 10                	jmp    232ef1 <u64toa+0x3c61>
  232ee1:	48 8d 3d e0 02 01 00 	lea    rdi,[rip+0x102e0]        # 2431c8 <__unnamed_4>
  232ee8:	31 c0                	xor    eax,eax
  232eea:	89 c6                	mov    esi,eax
  232eec:	e8 0f 87 fd ff       	call   20b600 <panic>
  232ef1:	48 8b 85 40 f4 ff ff 	mov    rax,QWORD PTR [rbp-0xbc0]
  232ef8:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
    } else if (value < kTen16) {
  232efc:	e9 73 c8 ff ff       	jmp    22f774 <u64toa+0x4e4>
  232f01:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  232f08:	0f 1f 84 00 00 00 00 
  232f0f:	00 

0000000000232f10 <frexp64>:
    y |= 0x3F000000;
    result.significand = @bitCast(f32, y);
    return result;
}

fn frexp64(x: f64) frexp64_result {
  232f10:	55                   	push   rbp
  232f11:	48 89 e5             	mov    rbp,rsp
  232f14:	48 83 ec 70          	sub    rsp,0x70
  232f18:	48 89 f8             	mov    rax,rdi
  232f1b:	c5 fb 11 45 e8       	vmovsd QWORD PTR [rbp-0x18],xmm0
    var result: frexp64_result = undefined;
  232f20:	48 8b 0d 89 d3 fc ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffcd389]        # 2002b0 <__unnamed_100>
  232f27:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  232f2b:	48 8b 0d 86 d3 fc ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffcd386]        # 2002b8 <__unnamed_100+0x8>
  232f32:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx

    var y = @bitCast(u64, x);
  232f36:	c5 fb 10 45 e8       	vmovsd xmm0,QWORD PTR [rbp-0x18]
  232f3b:	c4 e1 f9 7e c1       	vmovq  rcx,xmm0
  232f40:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    const e = @intCast(i32, y >> 52) & 0x7FF;
  232f44:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  232f48:	48 c1 e9 34          	shr    rcx,0x34
  232f4c:	89 ca                	mov    edx,ecx
  232f4e:	48 63 f2             	movsxd rsi,edx
  232f51:	48 39 f1             	cmp    rcx,rsi
  232f54:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  232f58:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
  232f5c:	89 55 b4             	mov    DWORD PTR [rbp-0x4c],edx
  232f5f:	0f 84 02 01 00 00    	je     233067 <frexp64+0x157>
  232f65:	e9 17 01 00 00       	jmp    233081 <frexp64+0x171>
  232f6a:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0

    if (e == 0) {
        if (x != 0) {
  232f6e:	c5 fb 10 4d e8       	vmovsd xmm1,QWORD PTR [rbp-0x18]
  232f73:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  232f77:	74 4c                	je     232fc5 <frexp64+0xb5>
  232f79:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
  232f7d:	c5 fb 10 05 e3 dc fc 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffcdce3]        # 200c68 <__unnamed_182+0x8>
  232f84:	ff 
            // subnormal
            result = frexp64(x * 0x1.0p64);
  232f85:	c5 fb 59 45 e8       	vmulsd xmm0,xmm0,QWORD PTR [rbp-0x18]
  232f8a:	e8 81 ff ff ff       	call   232f10 <frexp64>
  232f8f:	48 8d 7d d8          	lea    rdi,[rbp-0x28]
  232f93:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  232f97:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  232f9b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  232f9f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
            result.exponent -= 64;
  232fa3:	48 83 c7 08          	add    rdi,0x8
  232fa7:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
  232faa:	83 e9 40             	sub    ecx,0x40
  232fad:	0f 90 c2             	seto   dl
  232fb0:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  232fb4:	89 4d a4             	mov    DWORD PTR [rbp-0x5c],ecx
  232fb7:	88 55 a3             	mov    BYTE PTR [rbp-0x5d],dl
  232fba:	0f 80 d1 00 00 00    	jo     233091 <frexp64+0x181>
  232fc0:	e9 dc 00 00 00       	jmp    2330a1 <frexp64+0x191>
        } else {
            // frexp(+-0) = (+-0, 0)
            result.significand = x;
  232fc5:	c5 fb 10 45 e8       	vmovsd xmm0,QWORD PTR [rbp-0x18]
  232fca:	c5 fb 11 45 d8       	vmovsd QWORD PTR [rbp-0x28],xmm0
            result.exponent = 0;
  232fcf:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
        }
        return result;
  232fd6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  232fda:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  232fde:	48 89 01             	mov    QWORD PTR [rcx],rax
  232fe1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  232fe5:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  232fe9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  232fed:	48 83 c4 70          	add    rsp,0x70
  232ff1:	5d                   	pop    rbp
  232ff2:	c3                   	ret    
    } else if (e == 0x7FF) {
  232ff3:	81 7d cc ff 07 00 00 	cmp    DWORD PTR [rbp-0x34],0x7ff
  232ffa:	75 45                	jne    233041 <frexp64+0x131>
        // frexp(nan) = (nan, undefined)
        result.significand = x;
  232ffc:	c5 fb 10 45 e8       	vmovsd xmm0,QWORD PTR [rbp-0x18]
  233001:	c5 fb 11 45 d8       	vmovsd QWORD PTR [rbp-0x28],xmm0
        result.exponent = undefined;
  233006:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax

        // frexp(+-inf) = (+-inf, 0)
        if (math.isInf(x)) {
  233009:	c5 fb 10 45 e8       	vmovsd xmm0,QWORD PTR [rbp-0x18]
  23300e:	e8 ad 02 00 00       	call   2332c0 <isInf>
  233013:	a8 01                	test   al,0x1
  233015:	75 02                	jne    233019 <frexp64+0x109>
  233017:	eb 09                	jmp    233022 <frexp64+0x112>
            result.exponent = 0;
  233019:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
        if (math.isInf(x)) {
  233020:	eb 02                	jmp    233024 <frexp64+0x114>
  233022:	eb 00                	jmp    233024 <frexp64+0x114>
        }

        return result;
  233024:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  233028:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  23302c:	48 89 01             	mov    QWORD PTR [rcx],rax
  23302f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  233033:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  233037:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  23303b:	48 83 c4 70          	add    rsp,0x70
  23303f:	5d                   	pop    rbp
  233040:	c3                   	ret    
    } else if (e == 0x7FF) {
  233041:	eb 00                	jmp    233043 <frexp64+0x133>
    if (e == 0) {
  233043:	eb 00                	jmp    233045 <frexp64+0x135>
  233045:	48 8d 45 d8          	lea    rax,[rbp-0x28]
    }

    result.exponent = e - 0x3FE;
  233049:	48 83 c0 08          	add    rax,0x8
  23304d:	8b 4d cc             	mov    ecx,DWORD PTR [rbp-0x34]
  233050:	81 e9 fe 03 00 00    	sub    ecx,0x3fe
  233056:	0f 90 c2             	seto   dl
  233059:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  23305d:	89 4d 94             	mov    DWORD PTR [rbp-0x6c],ecx
  233060:	88 55 93             	mov    BYTE PTR [rbp-0x6d],dl
  233063:	70 4a                	jo     2330af <frexp64+0x19f>
  233065:	eb 58                	jmp    2330bf <frexp64+0x1af>
    const e = @intCast(i32, y >> 52) & 0x7FF;
  233067:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
  23306a:	25 ff 07 00 00       	and    eax,0x7ff
  23306f:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
    if (e == 0) {
  233072:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
  233076:	0f 84 ee fe ff ff    	je     232f6a <frexp64+0x5a>
  23307c:	e9 72 ff ff ff       	jmp    232ff3 <frexp64+0xe3>
  233081:	48 8d 3d 00 04 01 00 	lea    rdi,[rip+0x10400]        # 243488 <__unnamed_22>
  233088:	31 c0                	xor    eax,eax
  23308a:	89 c6                	mov    esi,eax
    const e = @intCast(i32, y >> 52) & 0x7FF;
  23308c:	e8 6f 85 fd ff       	call   20b600 <panic>
  233091:	48 8d 3d 30 01 01 00 	lea    rdi,[rip+0x10130]        # 2431c8 <__unnamed_4>
  233098:	31 c0                	xor    eax,eax
  23309a:	89 c6                	mov    esi,eax
            result.exponent -= 64;
  23309c:	e8 5f 85 fd ff       	call   20b600 <panic>
  2330a1:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  2330a5:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
  2330a8:	89 08                	mov    DWORD PTR [rax],ecx
        if (x != 0) {
  2330aa:	e9 27 ff ff ff       	jmp    232fd6 <frexp64+0xc6>
  2330af:	48 8d 3d 12 01 01 00 	lea    rdi,[rip+0x10112]        # 2431c8 <__unnamed_4>
  2330b6:	31 c0                	xor    eax,eax
  2330b8:	89 c6                	mov    esi,eax
    result.exponent = e - 0x3FE;
  2330ba:	e8 41 85 fd ff       	call   20b600 <panic>
  2330bf:	48 b8 00 00 00 00 00 	movabs rax,0x3fe0000000000000
  2330c6:	00 e0 3f 
  2330c9:	48 b9 ff ff ff ff ff 	movabs rcx,0x800fffffffffffff
  2330d0:	ff 0f 80 
  2330d3:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  2330d7:	8b 75 94             	mov    esi,DWORD PTR [rbp-0x6c]
  2330da:	89 32                	mov    DWORD PTR [rdx],esi
    y &= 0x800FFFFFFFFFFFFF;
  2330dc:	48 23 4d d0          	and    rcx,QWORD PTR [rbp-0x30]
  2330e0:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    y |= 0x3FE0000000000000;
  2330e4:	48 0b 45 d0          	or     rax,QWORD PTR [rbp-0x30]
  2330e8:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
    result.significand = @bitCast(f64, y);
  2330ec:	c5 fa 7e 45 d0       	vmovq  xmm0,QWORD PTR [rbp-0x30]
  2330f1:	c5 fb 11 45 d8       	vmovsd QWORD PTR [rbp-0x28],xmm0
    return result;
  2330f6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2330fa:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  2330fe:	48 89 01             	mov    QWORD PTR [rcx],rax
  233101:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  233105:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
  233109:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  23310d:	48 83 c4 70          	add    rsp,0x70
  233111:	5d                   	pop    rbp
  233112:	c3                   	ret    
  233113:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  23311a:	84 00 00 00 00 00 

0000000000233120 <floor64>:
            return -1.0;
        }
    }
}

fn floor64(x: f64) f64 {
  233120:	55                   	push   rbp
  233121:	48 89 e5             	mov    rbp,rsp
  233124:	48 83 ec 30          	sub    rsp,0x30
  233128:	be aa 00 00 00       	mov    esi,0xaa
  23312d:	b8 08 00 00 00       	mov    eax,0x8
  233132:	89 c2                	mov    edx,eax
  233134:	48 8d 4d e0          	lea    rcx,[rbp-0x20]
  233138:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    const u = @bitCast(u64, x);
  23313d:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  233142:	c4 e1 f9 7e c7       	vmovq  rdi,xmm0
  233147:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
    const e = (u >> 52) & 0x7FF;
  23314b:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  23314f:	48 c1 ef 34          	shr    rdi,0x34
  233153:	48 81 e7 ff 07 00 00 	and    rdi,0x7ff
  23315a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    var y: f64 = undefined;
  23315e:	48 89 cf             	mov    rdi,rcx
  233161:	e8 ea 16 00 00       	call   234850 <memset>

    if (e >= 0x3FF + 52 or x == 0) {
  233166:	48 81 7d e8 33 04 00 	cmp    QWORD PTR [rbp-0x18],0x433
  23316d:	00 
  23316e:	41 0f 93 c0          	setae  r8b
  233172:	41 f6 c0 01          	test   r8b,0x1
  233176:	44 88 45 df          	mov    BYTE PTR [rbp-0x21],r8b
  23317a:	75 18                	jne    233194 <floor64+0x74>
  23317c:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
  233180:	c5 fb 10 4d f8       	vmovsd xmm1,QWORD PTR [rbp-0x8]
  233185:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  233189:	0f 94 c0             	sete   al
  23318c:	0f 9b c1             	setnp  cl
  23318f:	20 c8                	and    al,cl
  233191:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
  233194:	8a 45 df             	mov    al,BYTE PTR [rbp-0x21]
  233197:	a8 01                	test   al,0x1
  233199:	75 02                	jne    23319d <floor64+0x7d>
  23319b:	eb 0b                	jmp    2331a8 <floor64+0x88>
        return x;
  23319d:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  2331a2:	48 83 c4 30          	add    rsp,0x30
  2331a6:	5d                   	pop    rbp
  2331a7:	c3                   	ret    
    if (e >= 0x3FF + 52 or x == 0) {
  2331a8:	eb 00                	jmp    2331aa <floor64+0x8a>
    }

    if (u >> 63 != 0) {
  2331aa:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2331ae:	48 c1 e8 3f          	shr    rax,0x3f
  2331b2:	48 83 f8 00          	cmp    rax,0x0
  2331b6:	74 21                	je     2331d9 <floor64+0xb9>
  2331b8:	c5 fb 10 05 70 da fc 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffcda70]        # 200c30 <__unnamed_186+0x30>
  2331bf:	ff 
        @setFloatMode(this, builtin.FloatMode.Strict);
        y = x - math.f64_toint + math.f64_toint - x;
  2331c0:	c5 fb 10 4d f8       	vmovsd xmm1,QWORD PTR [rbp-0x8]
  2331c5:	c5 f3 5c c8          	vsubsd xmm1,xmm1,xmm0
  2331c9:	c5 f3 58 c0          	vaddsd xmm0,xmm1,xmm0
  2331cd:	c5 fb 5c 45 f8       	vsubsd xmm0,xmm0,QWORD PTR [rbp-0x8]
  2331d2:	c5 fb 11 45 e0       	vmovsd QWORD PTR [rbp-0x20],xmm0
    if (u >> 63 != 0) {
  2331d7:	eb 1b                	jmp    2331f4 <floor64+0xd4>
  2331d9:	c5 fb 10 05 4f da fc 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffcda4f]        # 200c30 <__unnamed_186+0x30>
  2331e0:	ff 
    } else {
        @setFloatMode(this, builtin.FloatMode.Strict);
        y = x + math.f64_toint - math.f64_toint - x;
  2331e1:	c5 fb 58 4d f8       	vaddsd xmm1,xmm0,QWORD PTR [rbp-0x8]
  2331e6:	c5 f3 5c c0          	vsubsd xmm0,xmm1,xmm0
  2331ea:	c5 fb 5c 45 f8       	vsubsd xmm0,xmm0,QWORD PTR [rbp-0x8]
  2331ef:	c5 fb 11 45 e0       	vmovsd QWORD PTR [rbp-0x20],xmm0
    }

    if (e <= 0x3FF - 1) {
  2331f4:	48 81 7d e8 fe 03 00 	cmp    QWORD PTR [rbp-0x18],0x3fe
  2331fb:	00 
  2331fc:	77 30                	ja     23322e <floor64+0x10e>
        math.forceEval(y);
  2331fe:	c5 fb 10 45 e0       	vmovsd xmm0,QWORD PTR [rbp-0x20]
  233203:	e8 f8 00 00 00       	call   233300 <forceEval>
        if (u >> 63 != 0) {
  233208:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  23320c:	48 c1 e8 3f          	shr    rax,0x3f
  233210:	48 83 f8 00          	cmp    rax,0x0
  233214:	74 0e                	je     233224 <floor64+0x104>
  233216:	c5 fb 10 05 f2 d9 fc 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffcd9f2]        # 200c10 <__unnamed_186+0x10>
  23321d:	ff 
            return -1.0;
  23321e:	48 83 c4 30          	add    rsp,0x30
  233222:	5d                   	pop    rbp
  233223:	c3                   	ret    
  233224:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
        } else {
            return 0.0;
  233228:	48 83 c4 30          	add    rsp,0x30
  23322c:	5d                   	pop    rbp
  23322d:	c3                   	ret    
  23322e:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
        }
    } else if (y > 0) {
  233232:	c5 fb 10 4d e0       	vmovsd xmm1,QWORD PTR [rbp-0x20]
  233237:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  23323b:	76 1c                	jbe    233259 <floor64+0x139>
  23323d:	c5 fb 10 05 b3 d9 fc 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffcd9b3]        # 200bf8 <__unnamed_187+0x8>
  233244:	ff 
        return x + y - 1;
  233245:	c5 fb 10 4d f8       	vmovsd xmm1,QWORD PTR [rbp-0x8]
  23324a:	c5 f3 58 4d e0       	vaddsd xmm1,xmm1,QWORD PTR [rbp-0x20]
  23324f:	c5 f3 5c c0          	vsubsd xmm0,xmm1,xmm0
  233253:	48 83 c4 30          	add    rsp,0x30
  233257:	5d                   	pop    rbp
  233258:	c3                   	ret    
    } else {
        return x + y;
  233259:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  23325e:	c5 fb 58 45 e0       	vaddsd xmm0,xmm0,QWORD PTR [rbp-0x20]
  233263:	48 83 c4 30          	add    rsp,0x30
  233267:	5d                   	pop    rbp
  233268:	c3                   	ret    
  233269:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000233270 <split>:
fn split(val: f64, hi: *f64, lo: *f64) void {
  233270:	55                   	push   rbp
  233271:	48 89 e5             	mov    rbp,rsp
  233274:	48 83 ec 20          	sub    rsp,0x20
  233278:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
  23327d:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  233281:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
    hi.* = gethi(val);
  233285:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  233289:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  23328e:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  233292:	e8 b9 00 00 00       	call   233350 <gethi>
  233297:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  23329b:	c5 fb 11 06          	vmovsd QWORD PTR [rsi],xmm0
    lo.* = val - hi.*;
  23329f:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  2332a3:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  2332a8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2332ac:	c5 fb 5c 00          	vsubsd xmm0,xmm0,QWORD PTR [rax]
  2332b0:	c5 fb 11 07          	vmovsd QWORD PTR [rdi],xmm0
fn split(val: f64, hi: *f64, lo: *f64) void {
  2332b4:	48 83 c4 20          	add    rsp,0x20
  2332b8:	5d                   	pop    rbp
  2332b9:	c3                   	ret    
  2332ba:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000002332c0 <isInf>:
pub fn isInf(x: var) bool {
  2332c0:	55                   	push   rbp
  2332c1:	48 89 e5             	mov    rbp,rsp
  2332c4:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
            const bits = @bitCast(u64, x);
  2332c9:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  2332ce:	c5 fb 11 45 f0       	vmovsd QWORD PTR [rbp-0x10],xmm0
            return bits & (@maxValue(u64) >> 1) == (0x7FF << 52);
  2332d3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2332d7:	b1 3f                	mov    cl,0x3f
  2332d9:	88 ca                	mov    dl,cl
  2332db:	c4 e2 e8 f5 c0       	bzhi   rax,rax,rdx
  2332e0:	48 ba 00 00 00 00 00 	movabs rdx,0x7ff0000000000000
  2332e7:	00 f0 7f 
  2332ea:	48 29 d0             	sub    rax,rdx
  2332ed:	0f 94 c1             	sete   cl
  2332f0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  2332f4:	88 c8                	mov    al,cl
  2332f6:	5d                   	pop    rbp
  2332f7:	c3                   	ret    
  2332f8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  2332ff:	00 

0000000000233300 <forceEval>:
pub fn forceEval(value: var) void {
  233300:	55                   	push   rbp
  233301:	48 89 e5             	mov    rbp,rsp
  233304:	48 83 ec 20          	sub    rsp,0x20
  233308:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  23330c:	be aa 00 00 00       	mov    esi,0xaa
  233311:	b9 08 00 00 00       	mov    ecx,0x8
  233316:	89 ca                	mov    edx,ecx
  233318:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
            var x: f64 = undefined;
  23331d:	48 89 c7             	mov    rdi,rax
  233320:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  233324:	e8 27 15 00 00       	call   234850 <memset>
            const p = @ptrCast(*volatile f64, &x);
  233329:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  23332d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
            p.* = x;
  233331:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  233335:	c5 fb 10 45 f0       	vmovsd xmm0,QWORD PTR [rbp-0x10]
  23333a:	c5 fb 11 02          	vmovsd QWORD PTR [rdx],xmm0
pub fn forceEval(value: var) void {
  23333e:	48 83 c4 20          	add    rsp,0x20
  233342:	5d                   	pop    rbp
  233343:	c3                   	ret    
  233344:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  23334b:	00 00 00 00 00 

0000000000233350 <gethi>:
fn gethi(in: f64) f64 {
  233350:	55                   	push   rbp
  233351:	48 89 e5             	mov    rbp,rsp
  233354:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    const bits = @bitCast(u64, in);
  233359:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  23335e:	c4 e1 f9 7e c0       	vmovq  rax,xmm0
  233363:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    const new_bits = bits & 0xFFFFFFFFF8000000;
  233367:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  23336b:	48 25 00 00 00 f8    	and    rax,0xfffffffff8000000
  233371:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    return @bitCast(f64, new_bits);
  233375:	c5 fa 7e 45 e8       	vmovq  xmm0,QWORD PTR [rbp-0x18]
  23337a:	5d                   	pop    rbp
  23337b:	c3                   	ret    
  23337c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000233380 <_start>:
}

nakedcc fn _start() noreturn {
    switch (builtin.arch) {
        builtin.Arch.x86_64 => {
            argc_ptr = asm ("lea (%%rsp), %[argc]"
  233380:	48 8d 04 24          	lea    rax,[rsp]
  233384:	48 89 05 25 8d 00 00 	mov    QWORD PTR [rip+0x8d25],rax        # 23c0b0 <argc_ptr>
        },
        else => @compileError("unsupported arch"),
    }
    // If LLVM inlines stack variables into _start, they will overwrite
    // the command line argument data.
    @noInlineCall(posixCallMainAndExit);
  23338b:	e8 00 00 00 00       	call   233390 <posixCallMainAndExit>

0000000000233390 <posixCallMainAndExit>:

    std.os.windows.ExitProcess(callMain());
}

// TODO https://github.com/ziglang/zig/issues/265
fn posixCallMainAndExit() noreturn {
  233390:	55                   	push   rbp
  233391:	48 89 e5             	mov    rbp,rsp
    const argc = argc_ptr[0];
  233394:	48 81 ec c0 00 00 00 	sub    rsp,0xc0
  23339b:	48 8b 05 0e 8d 00 00 	mov    rax,QWORD PTR [rip+0x8d0e]        # 23c0b0 <argc_ptr>
  2333a2:	48 8b 00             	mov    rax,QWORD PTR [rax]
  2333a5:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    const argv = @ptrCast([*][*]u8, argc_ptr + 1);
  2333a9:	48 8b 05 00 8d 00 00 	mov    rax,QWORD PTR [rip+0x8d00]        # 23c0b0 <argc_ptr>
  2333b0:	48 83 c0 08          	add    rax,0x8
  2333b4:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax

    const envp_optional = @ptrCast([*]?[*]u8, argv + argc + 1);
  2333b8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2333bc:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  2333c0:	48 c1 e1 03          	shl    rcx,0x3
  2333c4:	48 01 c8             	add    rax,rcx
  2333c7:	48 83 c0 08          	add    rax,0x8
  2333cb:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
    var envp_count: usize = 0;
  2333cf:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
  2333d6:	00 
    while (envp_optional[envp_count]) |_| : (envp_count += 1) {}
  2333d7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2333db:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  2333df:	48 89 c2             	mov    rdx,rax
  2333e2:	48 c1 e2 03          	shl    rdx,0x3
  2333e6:	48 89 ce             	mov    rsi,rcx
  2333e9:	48 01 d6             	add    rsi,rdx
  2333ec:	48 83 3c c1 00       	cmp    QWORD PTR [rcx+rax*8],0x0
  2333f1:	48 89 75 98          	mov    QWORD PTR [rbp-0x68],rsi
  2333f5:	74 28                	je     23341f <posixCallMainAndExit+0x8f>
  2333f7:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  2333fb:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  2333fe:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
  233402:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  233406:	48 83 c1 01          	add    rcx,0x1
  23340a:	0f 92 c2             	setb   dl
  23340d:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
  233411:	88 55 8f             	mov    BYTE PTR [rbp-0x71],dl
  233414:	0f 82 c6 00 00 00    	jb     2334e0 <posixCallMainAndExit+0x150>
  23341a:	e9 d1 00 00 00       	jmp    2334f0 <posixCallMainAndExit+0x160>
  23341f:	31 c0                	xor    eax,eax
  233421:	89 c1                	mov    ecx,eax
    const envp = @ptrCast([*][*]u8, envp_optional)[0..envp_count];
  233423:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  233427:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  23342b:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  23342f:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  233433:	48 39 d1             	cmp    rcx,rdx
  233436:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
  23343a:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
  233441:	0f 86 c6 00 00 00    	jbe    23350d <posixCallMainAndExit+0x17d>
  233447:	e9 b1 00 00 00       	jmp    2334fd <posixCallMainAndExit+0x16d>
    if (builtin.os == builtin.Os.linux) {
        const auxv = @ptrCast([*]usize, envp.ptr + envp_count + 1);
        var i: usize = 0;
        while (auxv[i] != 0) : (i += 2) {
  23344c:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  233450:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  233454:	48 83 3c c1 00       	cmp    QWORD PTR [rcx+rax*8],0x0
  233459:	74 56                	je     2334b1 <posixCallMainAndExit+0x121>
            if (auxv[i] < std.os.linux_aux_raw.len) std.os.linux_aux_raw[auxv[i]] = auxv[i + 1];
  23345b:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  23345f:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  233463:	48 83 3c c1 26       	cmp    QWORD PTR [rcx+rax*8],0x26
  233468:	73 22                	jae    23348c <posixCallMainAndExit+0xfc>
  23346a:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  23346e:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  233472:	48 8b 04 c1          	mov    rax,QWORD PTR [rcx+rax*8]
  233476:	48 83 f8 26          	cmp    rax,0x26
  23347a:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  233481:	0f 82 e1 00 00 00    	jb     233568 <posixCallMainAndExit+0x1d8>
  233487:	e9 cc 00 00 00       	jmp    233558 <posixCallMainAndExit+0x1c8>
  23348c:	eb 00                	jmp    23348e <posixCallMainAndExit+0xfe>
        while (auxv[i] != 0) : (i += 2) {
  23348e:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  233492:	48 83 c0 02          	add    rax,0x2
  233496:	0f 92 c1             	setb   cl
  233499:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  2334a0:	88 8d 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],cl
  2334a6:	0f 82 22 01 00 00    	jb     2335ce <posixCallMainAndExit+0x23e>
  2334ac:	e9 2d 01 00 00       	jmp    2335de <posixCallMainAndExit+0x24e>
        }
        std.debug.assert(std.os.linux_aux_raw[std.elf.AT_PAGESZ] == std.os.page_size);
  2334b1:	48 81 3d dc 0b 01 00 	cmp    QWORD PTR [rip+0x10bdc],0x1000        # 244098 <linux_aux_raw+0x30>
  2334b8:	00 10 00 00 
  2334bc:	0f 94 c0             	sete   al
  2334bf:	0f b6 f8             	movzx  edi,al
  2334c2:	e8 39 7b fd ff       	call   20b000 <assert>
  2334c7:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
    }

    std.os.posix.exit(callMainWithArgs(argc, argv, envp));
  2334cb:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2334cf:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  2334d3:	e8 18 01 00 00       	call   2335f0 <callMainWithArgs>
  2334d8:	0f b6 f8             	movzx  edi,al
  2334db:	e8 a0 01 00 00       	call   233680 <exit>
  2334e0:	48 8d 3d e1 fc 00 00 	lea    rdi,[rip+0xfce1]        # 2431c8 <__unnamed_4>
  2334e7:	31 c0                	xor    eax,eax
  2334e9:	89 c6                	mov    esi,eax
    while (envp_optional[envp_count]) |_| : (envp_count += 1) {}
  2334eb:	e8 10 81 fd ff       	call   20b600 <panic>
  2334f0:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  2334f4:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  2334f8:	e9 da fe ff ff       	jmp    2333d7 <posixCallMainAndExit+0x47>
  2334fd:	48 8d 3d d4 fe 00 00 	lea    rdi,[rip+0xfed4]        # 2433d8 <__unnamed_20>
  233504:	31 c0                	xor    eax,eax
  233506:	89 c6                	mov    esi,eax
    const envp = @ptrCast([*][*]u8, envp_optional)[0..envp_count];
  233508:	e8 f3 80 fd ff       	call   20b600 <panic>
  23350d:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  233511:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  233515:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  23351c:	48 83 e9 00          	sub    rcx,0x0
  233520:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  233524:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  233528:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
  23352c:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  233530:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
        const auxv = @ptrCast([*]usize, envp.ptr + envp_count + 1);
  233534:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  233538:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  23353c:	48 c1 e2 03          	shl    rdx,0x3
  233540:	48 01 d1             	add    rcx,rdx
  233543:	48 83 c1 08          	add    rcx,0x8
  233547:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
        var i: usize = 0;
  23354b:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
  233552:	00 
        while (auxv[i] != 0) : (i += 2) {
  233553:	e9 f4 fe ff ff       	jmp    23344c <posixCallMainAndExit+0xbc>
  233558:	48 8d 3d 79 fe 00 00 	lea    rdi,[rip+0xfe79]        # 2433d8 <__unnamed_20>
  23355f:	31 c0                	xor    eax,eax
  233561:	89 c6                	mov    esi,eax
            if (auxv[i] < std.os.linux_aux_raw.len) std.os.linux_aux_raw[auxv[i]] = auxv[i + 1];
  233563:	e8 98 80 fd ff       	call   20b600 <panic>
  233568:	48 8d 05 f9 0a 01 00 	lea    rax,[rip+0x10af9]        # 244068 <linux_aux_raw>
  23356f:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
  233576:	48 c1 e1 03          	shl    rcx,0x3
  23357a:	48 01 c8             	add    rax,rcx
  23357d:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  233581:	48 83 c1 01          	add    rcx,0x1
  233585:	0f 92 c2             	setb   dl
  233588:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  23358f:	48 89 8d 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rcx
  233596:	88 95 4f ff ff ff    	mov    BYTE PTR [rbp-0xb1],dl
  23359c:	72 02                	jb     2335a0 <posixCallMainAndExit+0x210>
  23359e:	eb 10                	jmp    2335b0 <posixCallMainAndExit+0x220>
  2335a0:	48 8d 3d 21 fc 00 00 	lea    rdi,[rip+0xfc21]        # 2431c8 <__unnamed_4>
  2335a7:	31 c0                	xor    eax,eax
  2335a9:	89 c6                	mov    esi,eax
  2335ab:	e8 50 80 fd ff       	call   20b600 <panic>
  2335b0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  2335b4:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
  2335bb:	48 8b 04 c8          	mov    rax,QWORD PTR [rax+rcx*8]
  2335bf:	48 8b 95 58 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa8]
  2335c6:	48 89 02             	mov    QWORD PTR [rdx],rax
  2335c9:	e9 c0 fe ff ff       	jmp    23348e <posixCallMainAndExit+0xfe>
  2335ce:	48 8d 3d f3 fb 00 00 	lea    rdi,[rip+0xfbf3]        # 2431c8 <__unnamed_4>
  2335d5:	31 c0                	xor    eax,eax
  2335d7:	89 c6                	mov    esi,eax
        while (auxv[i] != 0) : (i += 2) {
  2335d9:	e8 22 80 fd ff       	call   20b600 <panic>
  2335de:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  2335e5:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  2335e9:	e9 5e fe ff ff       	jmp    23344c <posixCallMainAndExit+0xbc>
  2335ee:	66 90                	xchg   ax,ax

00000000002335f0 <callMainWithArgs>:
}

fn callMainWithArgs(argc: usize, argv: [*][*]u8, envp: [][*]u8) u8 {
  2335f0:	55                   	push   rbp
  2335f1:	48 89 e5             	mov    rbp,rsp
  2335f4:	48 83 ec 40          	sub    rsp,0x40
  2335f8:	31 c0                	xor    eax,eax
  2335fa:	89 c1                	mov    ecx,eax
  2335fc:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  233600:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    std.os.ArgIteratorPosix.raw = argv[0..argc];
  233604:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  233608:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  23360c:	48 39 f1             	cmp    rcx,rsi
  23360f:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  233613:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  233617:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  23361b:	76 10                	jbe    23362d <callMainWithArgs+0x3d>
  23361d:	48 8d 3d b4 fd 00 00 	lea    rdi,[rip+0xfdb4]        # 2433d8 <__unnamed_20>
  233624:	31 c0                	xor    eax,eax
  233626:	89 c6                	mov    esi,eax
  233628:	e8 d3 7f fd ff       	call   20b600 <panic>
  23362d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  233631:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  233635:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  233639:	48 83 e9 00          	sub    rcx,0x0
  23363d:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  233641:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  233645:	48 89 0d 6c 8a 00 00 	mov    QWORD PTR [rip+0x8a6c],rcx        # 23c0b8 <raw>
  23364c:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  233650:	48 89 0d 69 8a 00 00 	mov    QWORD PTR [rip+0x8a69],rcx        # 23c0c0 <raw+0x8>
    std.os.posix_environ_raw = envp;
  233657:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  23365b:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
  23365e:	48 89 15 3b 8a 00 00 	mov    QWORD PTR [rip+0x8a3b],rdx        # 23c0a0 <posix_environ_raw>
  233665:	48 8b 51 08          	mov    rdx,QWORD PTR [rcx+0x8]
  233669:	48 89 15 38 8a 00 00 	mov    QWORD PTR [rip+0x8a38],rdx        # 23c0a8 <posix_environ_raw+0x8>
    return callMain();
  233670:	e8 4b 00 00 00       	call   2336c0 <callMain>
  233675:	48 83 c4 40          	add    rsp,0x40
  233679:	5d                   	pop    rbp
  23367a:	c3                   	ret    
  23367b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000233680 <exit>:
pub fn exit(status: i32) noreturn {
  233680:	55                   	push   rbp
  233681:	48 89 e5             	mov    rbp,rsp
  233684:	48 83 ec 10          	sub    rsp,0x10
  233688:	b8 3c 00 00 00       	mov    eax,0x3c
  23368d:	89 c1                	mov    ecx,eax
  23368f:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    _ = syscall1(SYS_exit, @bitCast(usize, isize(status)));
  233692:	48 63 75 fc          	movsxd rsi,DWORD PTR [rbp-0x4]
  233696:	48 89 cf             	mov    rdi,rcx
  233699:	e8 b2 5b ff ff       	call   229250 <syscall1>
  23369e:	48 8d 3d 5b fc 00 00 	lea    rdi,[rip+0xfc5b]        # 243300 <__unnamed_13>
  2336a5:	31 d2                	xor    edx,edx
  2336a7:	89 d6                	mov    esi,edx
    unreachable;
  2336a9:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  2336ad:	e8 4e 7f fd ff       	call   20b600 <panic>
  2336b2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2336b9:	1f 84 00 00 00 00 00 

00000000002336c0 <callMain>:
    while (c_envp[env_count] != null) : (env_count += 1) {}
    const envp = @ptrCast([*][*]u8, c_envp)[0..env_count];
    return callMainWithArgs(@intCast(usize, c_argc), c_argv, envp);
}

fn callMain() u8 {
  2336c0:	55                   	push   rbp
  2336c1:	48 89 e5             	mov    rbp,rsp
  2336c4:	48 81 ec 30 01 00 00 	sub    rsp,0x130
  2336cb:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  2336d2:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
  2336d9:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  2336e0:	00 00 00 00 
  2336e4:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
  2336eb:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  2336f2:	1e 00 00 00 
                @compileError("expected return type of main to be 'u8', 'noreturn', 'void', or '!void'");
            }
            return root.main();
        },
        builtin.TypeId.ErrorUnion => {
            root.main() catch |err| {
  2336f6:	e8 d5 00 00 00       	call   2337d0 <main>
  2336fb:	66 89 85 f6 fe ff ff 	mov    WORD PTR [rbp-0x10a],ax
  233702:	66 83 bd f6 fe ff ff 	cmp    WORD PTR [rbp-0x10a],0x0
  233709:	00 
  23370a:	74 51                	je     23375d <callMain+0x9d>
  23370c:	66 8b 85 f6 fe ff ff 	mov    ax,WORD PTR [rbp-0x10a]
  233713:	66 89 85 e6 fe ff ff 	mov    WORD PTR [rbp-0x11a],ax
                std.debug.warn("error: {}\n", @errorName(err));
  23371a:	66 8b 85 e6 fe ff ff 	mov    ax,WORD PTR [rbp-0x11a]
  233721:	66 83 f8 00          	cmp    ax,0x0
  233725:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  23372c:	0f 85 89 00 00 00    	jne    2337bb <callMain+0xfb>
  233732:	eb 38                	jmp    23376c <callMain+0xac>
                if (builtin.os != builtin.Os.zen) {
                    if (@errorReturnTrace()) |trace| {
  233734:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  23373b:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
                        std.debug.dumpStackTrace(trace);
  233742:	48 8b bd d8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x128]
  233749:	e8 62 93 fd ff       	call   20cab0 <dumpStackTrace>
                    if (@errorReturnTrace()) |trace| {
  23374e:	eb 02                	jmp    233752 <callMain+0x92>
  233750:	eb 00                	jmp    233752 <callMain+0x92>
  233752:	b0 01                	mov    al,0x1
                    }
                }
                return 1;
  233754:	48 81 c4 30 01 00 00 	add    rsp,0x130
  23375b:	5d                   	pop    rbp
  23375c:	c3                   	ret    
  23375d:	31 c0                	xor    eax,eax
  23375f:	88 c1                	mov    cl,al
            };
            return 0;
  233761:	88 c8                	mov    al,cl
  233763:	48 81 c4 30 01 00 00 	add    rsp,0x130
  23376a:	5d                   	pop    rbp
  23376b:	c3                   	ret    
  23376c:	48 8d 3d 65 fc 00 00 	lea    rdi,[rip+0xfc65]        # 2433d8 <__unnamed_20>
  233773:	31 c0                	xor    eax,eax
  233775:	89 c6                	mov    esi,eax
                std.debug.warn("error: {}\n", @errorName(err));
  233777:	e8 84 7e fd ff       	call   20b600 <panic>
  23377c:	48 8d 05 7d 98 00 00 	lea    rax,[rip+0x987d]        # 23d000 <raw+0xf48>
  233783:	66 8b 8d d6 fe ff ff 	mov    cx,WORD PTR [rbp-0x12a]
  23378a:	48 0f bf d1          	movsx  rdx,cx
  23378e:	48 c1 e2 04          	shl    rdx,0x4
  233792:	48 01 d0             	add    rax,rdx
  233795:	48 89 c7             	mov    rdi,rax
  233798:	e8 13 02 00 00       	call   2339b0 <warn.121>
  23379d:	48 8d 85 f8 fe ff ff 	lea    rax,[rbp-0x108]
                    if (@errorReturnTrace()) |trace| {
  2337a4:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
  2337ab:	48 83 bd e8 fe ff ff 	cmp    QWORD PTR [rbp-0x118],0x0
  2337b2:	00 
  2337b3:	0f 85 7b ff ff ff    	jne    233734 <callMain+0x74>
  2337b9:	eb 95                	jmp    233750 <callMain+0x90>
                std.debug.warn("error: {}\n", @errorName(err));
  2337bb:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [rbp-0x12a]
  2337c2:	66 83 f8 2a          	cmp    ax,0x2a
  2337c6:	72 b4                	jb     23377c <callMain+0xbc>
  2337c8:	eb a2                	jmp    23376c <callMain+0xac>
  2337ca:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000002337d0 <main>:
const io = std.io;
const builtin = @import("builtin");
const test_fn_list = builtin.__zig_test_fn_slice;
const warn = std.debug.warn;

pub fn main() !void {
  2337d0:	55                   	push   rbp
  2337d1:	48 89 e5             	mov    rbp,rsp
    var ok_count: usize = 0;
  2337d4:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  2337db:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  2337e2:	00 
    var skip_count: usize = 0;
  2337e3:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
  2337ea:	00 
    for (test_fn_list) |test_fn, i| {
  2337eb:	48 8b 05 c6 70 fd ff 	mov    rax,QWORD PTR [rip+0xfffffffffffd70c6]        # 20a8b8 <__unnamed_229>
  2337f2:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  2337f6:	48 8b 05 c3 70 fd ff 	mov    rax,QWORD PTR [rip+0xfffffffffffd70c3]        # 20a8c0 <__unnamed_229+0x8>
  2337fd:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  233801:	48 8b 05 c0 70 fd ff 	mov    rax,QWORD PTR [rip+0xfffffffffffd70c0]        # 20a8c8 <__unnamed_229+0x10>
  233808:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  23380c:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
  233813:	00 
  233814:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
  233818:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  23381c:	48 83 f8 01          	cmp    rax,0x1
  233820:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  233824:	0f 83 c9 00 00 00    	jae    2338f3 <main+0x123>
  23382a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  23382e:	48 6b c8 18          	imul   rcx,rax,0x18
  233832:	48 03 0d 57 f9 00 00 	add    rcx,QWORD PTR [rip+0xf957]        # 243190 <__zig_test_fn_slice>
  233839:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
  23383c:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  233840:	48 8b 51 08          	mov    rdx,QWORD PTR [rcx+0x8]
  233844:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  233848:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
  23384c:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
        warn("Test {}/{} {}...", i + 1, test_fn_list.len, test_fn.name);
  233850:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  233854:	48 83 c1 01          	add    rcx,0x1
  233858:	40 0f 92 c6          	setb   sil
  23385c:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  233860:	40 88 75 a7          	mov    BYTE PTR [rbp-0x59],sil
  233864:	0f 82 b5 00 00 00    	jb     23391f <main+0x14f>
  23386a:	e9 c0 00 00 00       	jmp    23392f <main+0x15f>

        if (test_fn.func()) |_| {
            ok_count += 1;
  23386f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  233873:	48 83 c0 01          	add    rax,0x1
  233877:	0f 92 c1             	setb   cl
  23387a:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  23387e:	88 4d 97             	mov    BYTE PTR [rbp-0x69],cl
  233881:	0f 82 d7 00 00 00    	jb     23395e <main+0x18e>
  233887:	e9 e2 00 00 00       	jmp    23396e <main+0x19e>
        if (test_fn.func()) |_| {
  23388c:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  233890:	66 89 45 c6          	mov    WORD PTR [rbp-0x3a],ax
            warn("OK\n");
        } else |err| switch (err) {
  233894:	0f b7 4d c6          	movzx  ecx,WORD PTR [rbp-0x3a]
  233898:	83 e9 29             	sub    ecx,0x29
  23389b:	89 4d 90             	mov    DWORD PTR [rbp-0x70],ecx
  23389e:	74 20                	je     2338c0 <main+0xf0>
  2338a0:	eb 00                	jmp    2338a2 <main+0xd2>
            error.SkipZigTest => {
                skip_count += 1;
                warn("SKIP\n");
            },
            else => return err,
  2338a2:	66 8b 45 c6          	mov    ax,WORD PTR [rbp-0x3a]
  2338a6:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  2338aa:	66 89 45 8e          	mov    WORD PTR [rbp-0x72],ax
  2338ae:	e8 dd 83 fd ff       	call   20bc90 <__zig_return_error>
  2338b3:	66 8b 45 8e          	mov    ax,WORD PTR [rbp-0x72]
  2338b7:	48 81 c4 90 00 00 00 	add    rsp,0x90
  2338be:	5d                   	pop    rbp
  2338bf:	c3                   	ret    
                skip_count += 1;
  2338c0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2338c4:	48 83 c0 01          	add    rax,0x1
  2338c8:	0f 92 c1             	setb   cl
  2338cb:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  2338cf:	88 8d 7f ff ff ff    	mov    BYTE PTR [rbp-0x81],cl
  2338d5:	0f 82 a5 00 00 00    	jb     233980 <main+0x1b0>
  2338db:	e9 b0 00 00 00       	jmp    233990 <main+0x1c0>
        if (test_fn.func()) |_| {
  2338e0:	eb 00                	jmp    2338e2 <main+0x112>
    for (test_fn_list) |test_fn, i| {
  2338e2:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  2338e6:	48 83 c0 01          	add    rax,0x1
  2338ea:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  2338ee:	e9 25 ff ff ff       	jmp    233818 <main+0x48>
        }
    }
    if (ok_count == test_fn_list.len) {
  2338f3:	48 83 7d f0 01       	cmp    QWORD PTR [rbp-0x10],0x1
  2338f8:	75 07                	jne    233901 <main+0x131>
        warn("All tests passed.\n");
  2338fa:	e8 b1 03 00 00       	call   233cb0 <warn.125>
    if (ok_count == test_fn_list.len) {
  2338ff:	eb 0d                	jmp    23390e <main+0x13e>
    } else {
        warn("{} passed; {} skipped.\n", ok_count, skip_count);
  233901:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  233905:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  233909:	e8 52 04 00 00       	call   233d60 <warn.126>
  23390e:	31 c0                	xor    eax,eax
  233910:	66 89 c1             	mov    cx,ax
pub fn main() !void {
  233913:	66 89 c8             	mov    ax,cx
  233916:	48 81 c4 90 00 00 00 	add    rsp,0x90
  23391d:	5d                   	pop    rbp
  23391e:	c3                   	ret    
  23391f:	48 8d 3d a2 f8 00 00 	lea    rdi,[rip+0xf8a2]        # 2431c8 <__unnamed_4>
  233926:	31 c0                	xor    eax,eax
  233928:	89 c6                	mov    esi,eax
        warn("Test {}/{} {}...", i + 1, test_fn_list.len, test_fn.name);
  23392a:	e8 d1 7c fd ff       	call   20b600 <panic>
  23392f:	b8 01 00 00 00       	mov    eax,0x1
  233934:	89 c6                	mov    esi,eax
  233936:	48 8d 55 d0          	lea    rdx,[rbp-0x30]
  23393a:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  23393e:	e8 2d 01 00 00       	call   233a70 <warn.122>
        if (test_fn.func()) |_| {
  233943:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  233947:	ff 55 e0             	call   QWORD PTR [rbp-0x20]
  23394a:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  23394e:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  233953:	0f 85 33 ff ff ff    	jne    23388c <main+0xbc>
  233959:	e9 11 ff ff ff       	jmp    23386f <main+0x9f>
  23395e:	48 8d 3d 63 f8 00 00 	lea    rdi,[rip+0xf863]        # 2431c8 <__unnamed_4>
  233965:	31 c0                	xor    eax,eax
  233967:	89 c6                	mov    esi,eax
            ok_count += 1;
  233969:	e8 92 7c fd ff       	call   20b600 <panic>
  23396e:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  233972:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
            warn("OK\n");
  233976:	e8 d5 01 00 00       	call   233b50 <warn.123>
        if (test_fn.func()) |_| {
  23397b:	e9 62 ff ff ff       	jmp    2338e2 <main+0x112>
  233980:	48 8d 3d 41 f8 00 00 	lea    rdi,[rip+0xf841]        # 2431c8 <__unnamed_4>
  233987:	31 c0                	xor    eax,eax
  233989:	89 c6                	mov    esi,eax
                skip_count += 1;
  23398b:	e8 70 7c fd ff       	call   20b600 <panic>
  233990:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  233994:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
                warn("SKIP\n");
  233998:	e8 63 02 00 00       	call   233c00 <warn.124>
        } else |err| switch (err) {
  23399d:	e9 3e ff ff ff       	jmp    2338e0 <main+0x110>
  2339a2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2339a9:	1f 84 00 00 00 00 00 

00000000002339b0 <warn.121>:
pub fn warn(comptime fmt: []const u8, args: ...) void {
  2339b0:	55                   	push   rbp
  2339b1:	48 89 e5             	mov    rbp,rsp
  2339b4:	48 81 ec 50 01 00 00 	sub    rsp,0x150
  2339bb:	48 8d 85 e8 fe ff ff 	lea    rax,[rbp-0x118]
  2339c2:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  2339c9:	48 8d 8d 10 ff ff ff 	lea    rcx,[rbp-0xf0]
  2339d0:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  2339d7:	00 00 00 00 
  2339db:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  2339e2:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  2339e9:	1e 00 00 00 
    const stderr = getStderrStream() catch return;
  2339ed:	48 89 bd c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rdi
  2339f4:	48 89 c7             	mov    rdi,rax
  2339f7:	e8 54 8f fd ff       	call   20c950 <getStderrStream>
  2339fc:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  233a03:	00 
  233a04:	74 09                	je     233a0f <warn.121+0x5f>
  233a06:	48 81 c4 50 01 00 00 	add    rsp,0x150
  233a0d:	5d                   	pop    rbp
  233a0e:	c3                   	ret    
  233a0f:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  233a16:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
  233a1d:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  233a24:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
  233a2b:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
    stderr.print(fmt, args) catch return;
  233a32:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  233a39:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  233a40:	e8 9b 05 00 00       	call   233fe0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.132>
  233a45:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  233a4c:	66 83 bd d6 fe ff ff 	cmp    WORD PTR [rbp-0x12a],0x0
  233a53:	00 
  233a54:	74 09                	je     233a5f <warn.121+0xaf>
  233a56:	48 81 c4 50 01 00 00 	add    rsp,0x150
  233a5d:	5d                   	pop    rbp
  233a5e:	c3                   	ret    
pub fn warn(comptime fmt: []const u8, args: ...) void {
  233a5f:	48 81 c4 50 01 00 00 	add    rsp,0x150
  233a66:	5d                   	pop    rbp
  233a67:	c3                   	ret    
  233a68:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  233a6f:	00 

0000000000233a70 <warn.122>:
  233a70:	55                   	push   rbp
  233a71:	48 89 e5             	mov    rbp,rsp
  233a74:	48 81 ec 60 01 00 00 	sub    rsp,0x160
  233a7b:	48 8d 85 e8 fe ff ff 	lea    rax,[rbp-0x118]
  233a82:	48 8d 8d f8 fe ff ff 	lea    rcx,[rbp-0x108]
  233a89:	4c 8d 85 10 ff ff ff 	lea    r8,[rbp-0xf0]
  233a90:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  233a97:	00 00 00 00 
  233a9b:	4c 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],r8
  233aa2:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  233aa9:	1e 00 00 00 
  233aad:	48 89 bd c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rdi
  233ab4:	48 89 b5 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rsi
    const stderr = getStderrStream() catch return;
  233abb:	48 89 c7             	mov    rdi,rax
  233abe:	48 89 ce             	mov    rsi,rcx
  233ac1:	48 89 95 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rdx
  233ac8:	e8 83 8e fd ff       	call   20c950 <getStderrStream>
  233acd:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  233ad4:	00 
  233ad5:	74 09                	je     233ae0 <warn.122+0x70>
  233ad7:	48 81 c4 60 01 00 00 	add    rsp,0x160
  233ade:	5d                   	pop    rbp
  233adf:	c3                   	ret    
  233ae0:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  233ae7:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
  233aee:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  233af5:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
  233afc:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
    stderr.print(fmt, args) catch return;
  233b03:	48 8b b5 b8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x148]
  233b0a:	48 8b 95 c8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x138]
  233b11:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  233b18:	4c 8b 85 b0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x150]
  233b1f:	e8 0c 03 00 00       	call   233e30 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.127>
  233b24:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  233b2b:	66 83 bd d6 fe ff ff 	cmp    WORD PTR [rbp-0x12a],0x0
  233b32:	00 
  233b33:	74 09                	je     233b3e <warn.122+0xce>
  233b35:	48 81 c4 60 01 00 00 	add    rsp,0x160
  233b3c:	5d                   	pop    rbp
  233b3d:	c3                   	ret    
pub fn warn(comptime fmt: []const u8, args: ...) void {
  233b3e:	48 81 c4 60 01 00 00 	add    rsp,0x160
  233b45:	5d                   	pop    rbp
  233b46:	c3                   	ret    
  233b47:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  233b4e:	00 00 

0000000000233b50 <warn.123>:
  233b50:	55                   	push   rbp
  233b51:	48 89 e5             	mov    rbp,rsp
  233b54:	48 81 ec 40 01 00 00 	sub    rsp,0x140
  233b5b:	48 8d bd e8 fe ff ff 	lea    rdi,[rbp-0x118]
  233b62:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  233b69:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
  233b70:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  233b77:	00 00 00 00 
  233b7b:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
  233b82:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  233b89:	1e 00 00 00 
    const stderr = getStderrStream() catch return;
  233b8d:	e8 be 8d fd ff       	call   20c950 <getStderrStream>
  233b92:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  233b99:	00 
  233b9a:	74 09                	je     233ba5 <warn.123+0x55>
  233b9c:	48 81 c4 40 01 00 00 	add    rsp,0x140
  233ba3:	5d                   	pop    rbp
  233ba4:	c3                   	ret    
  233ba5:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  233bac:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
  233bb3:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  233bba:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  233bc1:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
    stderr.print(fmt, args) catch return;
  233bc8:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  233bcf:	e8 bc 02 00 00       	call   233e90 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.128>
  233bd4:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  233bdb:	66 83 bd d6 fe ff ff 	cmp    WORD PTR [rbp-0x12a],0x0
  233be2:	00 
  233be3:	74 09                	je     233bee <warn.123+0x9e>
  233be5:	48 81 c4 40 01 00 00 	add    rsp,0x140
  233bec:	5d                   	pop    rbp
  233bed:	c3                   	ret    
pub fn warn(comptime fmt: []const u8, args: ...) void {
  233bee:	48 81 c4 40 01 00 00 	add    rsp,0x140
  233bf5:	5d                   	pop    rbp
  233bf6:	c3                   	ret    
  233bf7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  233bfe:	00 00 

0000000000233c00 <warn.124>:
  233c00:	55                   	push   rbp
  233c01:	48 89 e5             	mov    rbp,rsp
  233c04:	48 81 ec 40 01 00 00 	sub    rsp,0x140
  233c0b:	48 8d bd e8 fe ff ff 	lea    rdi,[rbp-0x118]
  233c12:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  233c19:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
  233c20:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  233c27:	00 00 00 00 
  233c2b:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
  233c32:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  233c39:	1e 00 00 00 
    const stderr = getStderrStream() catch return;
  233c3d:	e8 0e 8d fd ff       	call   20c950 <getStderrStream>
  233c42:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  233c49:	00 
  233c4a:	74 09                	je     233c55 <warn.124+0x55>
  233c4c:	48 81 c4 40 01 00 00 	add    rsp,0x140
  233c53:	5d                   	pop    rbp
  233c54:	c3                   	ret    
  233c55:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  233c5c:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
  233c63:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  233c6a:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  233c71:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
    stderr.print(fmt, args) catch return;
  233c78:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  233c7f:	e8 5c 02 00 00       	call   233ee0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.129>
  233c84:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  233c8b:	66 83 bd d6 fe ff ff 	cmp    WORD PTR [rbp-0x12a],0x0
  233c92:	00 
  233c93:	74 09                	je     233c9e <warn.124+0x9e>
  233c95:	48 81 c4 40 01 00 00 	add    rsp,0x140
  233c9c:	5d                   	pop    rbp
  233c9d:	c3                   	ret    
pub fn warn(comptime fmt: []const u8, args: ...) void {
  233c9e:	48 81 c4 40 01 00 00 	add    rsp,0x140
  233ca5:	5d                   	pop    rbp
  233ca6:	c3                   	ret    
  233ca7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  233cae:	00 00 

0000000000233cb0 <warn.125>:
  233cb0:	55                   	push   rbp
  233cb1:	48 89 e5             	mov    rbp,rsp
  233cb4:	48 81 ec 40 01 00 00 	sub    rsp,0x140
  233cbb:	48 8d bd e8 fe ff ff 	lea    rdi,[rbp-0x118]
  233cc2:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
  233cc9:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
  233cd0:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  233cd7:	00 00 00 00 
  233cdb:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
  233ce2:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  233ce9:	1e 00 00 00 
    const stderr = getStderrStream() catch return;
  233ced:	e8 5e 8c fd ff       	call   20c950 <getStderrStream>
  233cf2:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  233cf9:	00 
  233cfa:	74 09                	je     233d05 <warn.125+0x55>
  233cfc:	48 81 c4 40 01 00 00 	add    rsp,0x140
  233d03:	5d                   	pop    rbp
  233d04:	c3                   	ret    
  233d05:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  233d0c:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
  233d13:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  233d1a:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
  233d21:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
    stderr.print(fmt, args) catch return;
  233d28:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
  233d2f:	e8 fc 01 00 00       	call   233f30 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.130>
  233d34:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  233d3b:	66 83 bd d6 fe ff ff 	cmp    WORD PTR [rbp-0x12a],0x0
  233d42:	00 
  233d43:	74 09                	je     233d4e <warn.125+0x9e>
  233d45:	48 81 c4 40 01 00 00 	add    rsp,0x140
  233d4c:	5d                   	pop    rbp
  233d4d:	c3                   	ret    
pub fn warn(comptime fmt: []const u8, args: ...) void {
  233d4e:	48 81 c4 40 01 00 00 	add    rsp,0x140
  233d55:	5d                   	pop    rbp
  233d56:	c3                   	ret    
  233d57:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  233d5e:	00 00 

0000000000233d60 <warn.126>:
  233d60:	55                   	push   rbp
  233d61:	48 89 e5             	mov    rbp,rsp
  233d64:	48 81 ec 50 01 00 00 	sub    rsp,0x150
  233d6b:	48 8d 85 e8 fe ff ff 	lea    rax,[rbp-0x118]
  233d72:	48 8d 8d f8 fe ff ff 	lea    rcx,[rbp-0x108]
  233d79:	48 8d 95 10 ff ff ff 	lea    rdx,[rbp-0xf0]
  233d80:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  233d87:	00 00 00 00 
  233d8b:	48 89 95 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rdx
  233d92:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x1e
  233d99:	1e 00 00 00 
  233d9d:	48 89 bd c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rdi
  233da4:	48 89 b5 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rsi
    const stderr = getStderrStream() catch return;
  233dab:	48 89 c7             	mov    rdi,rax
  233dae:	48 89 ce             	mov    rsi,rcx
  233db1:	e8 9a 8b fd ff       	call   20c950 <getStderrStream>
  233db6:	66 83 bd e8 fe ff ff 	cmp    WORD PTR [rbp-0x118],0x0
  233dbd:	00 
  233dbe:	74 09                	je     233dc9 <warn.126+0x69>
  233dc0:	48 81 c4 50 01 00 00 	add    rsp,0x150
  233dc7:	5d                   	pop    rbp
  233dc8:	c3                   	ret    
  233dc9:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  233dd0:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  233dd7:	48 8d bd f8 fe ff ff 	lea    rdi,[rbp-0x108]
  233dde:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  233de5:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
    stderr.print(fmt, args) catch return;
  233dec:	48 8b b5 b8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x148]
  233df3:	48 8b 95 c8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x138]
  233dfa:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
  233e01:	e8 7a 01 00 00       	call   233f80 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.131>
  233e06:	66 89 85 d6 fe ff ff 	mov    WORD PTR [rbp-0x12a],ax
  233e0d:	66 83 bd d6 fe ff ff 	cmp    WORD PTR [rbp-0x12a],0x0
  233e14:	00 
  233e15:	74 09                	je     233e20 <warn.126+0xc0>
  233e17:	48 81 c4 50 01 00 00 	add    rsp,0x150
  233e1e:	5d                   	pop    rbp
  233e1f:	c3                   	ret    
pub fn warn(comptime fmt: []const u8, args: ...) void {
  233e20:	48 81 c4 50 01 00 00 	add    rsp,0x150
  233e27:	5d                   	pop    rbp
  233e28:	c3                   	ret    
  233e29:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000233e30 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.127>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  233e30:	55                   	push   rbp
  233e31:	48 89 e5             	mov    rbp,rsp
  233e34:	48 83 ec 30          	sub    rsp,0x30
  233e38:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  233e3c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  233e40:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return std.fmt.format(self, Error, self.writeFn, format, args);
  233e44:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  233e48:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  233e4c:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
  233e4f:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  233e53:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  233e57:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  233e5b:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
  233e5f:	49 89 c0             	mov    r8,rax
  233e62:	4c 8b 4d d8          	mov    r9,QWORD PTR [rbp-0x28]
  233e66:	e8 c5 01 00 00       	call   234030 <format.133>
  233e6b:	66 83 f8 00          	cmp    ax,0x0
  233e6f:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  233e73:	74 0b                	je     233e80 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.127+0x50>
  233e75:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  233e79:	e8 12 7e fd ff       	call   20bc90 <__zig_return_error>
  233e7e:	eb 02                	jmp    233e82 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.127+0x52>
  233e80:	eb 00                	jmp    233e82 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.127+0x52>
  233e82:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  233e86:	48 83 c4 30          	add    rsp,0x30
  233e8a:	5d                   	pop    rbp
  233e8b:	c3                   	ret    
  233e8c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000233e90 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.128>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  233e90:	55                   	push   rbp
  233e91:	48 89 e5             	mov    rbp,rsp
  233e94:	48 83 ec 20          	sub    rsp,0x20
  233e98:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
            return std.fmt.format(self, Error, self.writeFn, format, args);
  233e9c:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  233ea0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  233ea4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  233ea7:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  233eab:	e8 00 04 00 00       	call   2342b0 <format.136>
  233eb0:	66 83 f8 00          	cmp    ax,0x0
  233eb4:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  233eb8:	74 0b                	je     233ec5 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.128+0x35>
  233eba:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  233ebe:	e8 cd 7d fd ff       	call   20bc90 <__zig_return_error>
  233ec3:	eb 02                	jmp    233ec7 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.128+0x37>
  233ec5:	eb 00                	jmp    233ec7 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.128+0x37>
  233ec7:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  233ecb:	48 83 c4 20          	add    rsp,0x20
  233ecf:	5d                   	pop    rbp
  233ed0:	c3                   	ret    
  233ed1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  233ed8:	0f 1f 84 00 00 00 00 
  233edf:	00 

0000000000233ee0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.129>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  233ee0:	55                   	push   rbp
  233ee1:	48 89 e5             	mov    rbp,rsp
  233ee4:	48 83 ec 20          	sub    rsp,0x20
  233ee8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
            return std.fmt.format(self, Error, self.writeFn, format, args);
  233eec:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  233ef0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  233ef4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  233ef7:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  233efb:	e8 20 04 00 00       	call   234320 <format.137>
  233f00:	66 83 f8 00          	cmp    ax,0x0
  233f04:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  233f08:	74 0b                	je     233f15 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.129+0x35>
  233f0a:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  233f0e:	e8 7d 7d fd ff       	call   20bc90 <__zig_return_error>
  233f13:	eb 02                	jmp    233f17 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.129+0x37>
  233f15:	eb 00                	jmp    233f17 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.129+0x37>
  233f17:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  233f1b:	48 83 c4 20          	add    rsp,0x20
  233f1f:	5d                   	pop    rbp
  233f20:	c3                   	ret    
  233f21:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  233f28:	0f 1f 84 00 00 00 00 
  233f2f:	00 

0000000000233f30 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.130>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  233f30:	55                   	push   rbp
  233f31:	48 89 e5             	mov    rbp,rsp
  233f34:	48 83 ec 20          	sub    rsp,0x20
  233f38:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
            return std.fmt.format(self, Error, self.writeFn, format, args);
  233f3c:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  233f40:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  233f44:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  233f47:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  233f4b:	e8 40 04 00 00       	call   234390 <format.138>
  233f50:	66 83 f8 00          	cmp    ax,0x0
  233f54:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
  233f58:	74 0b                	je     233f65 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.130+0x35>
  233f5a:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  233f5e:	e8 2d 7d fd ff       	call   20bc90 <__zig_return_error>
  233f63:	eb 02                	jmp    233f67 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.130+0x37>
  233f65:	eb 00                	jmp    233f67 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.130+0x37>
  233f67:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  233f6b:	48 83 c4 20          	add    rsp,0x20
  233f6f:	5d                   	pop    rbp
  233f70:	c3                   	ret    
  233f71:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  233f78:	0f 1f 84 00 00 00 00 
  233f7f:	00 

0000000000233f80 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.131>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  233f80:	55                   	push   rbp
  233f81:	48 89 e5             	mov    rbp,rsp
  233f84:	48 83 ec 30          	sub    rsp,0x30
  233f88:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  233f8c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  233f90:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return std.fmt.format(self, Error, self.writeFn, format, args);
  233f94:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  233f98:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  233f9c:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
  233f9f:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  233fa3:	4c 8b 45 e8          	mov    r8,QWORD PTR [rbp-0x18]
  233fa7:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  233fab:	e8 50 04 00 00       	call   234400 <format.139>
  233fb0:	66 83 f8 00          	cmp    ax,0x0
  233fb4:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  233fb8:	74 0b                	je     233fc5 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.131+0x45>
  233fba:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  233fbe:	e8 cd 7c fd ff       	call   20bc90 <__zig_return_error>
  233fc3:	eb 02                	jmp    233fc7 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.131+0x47>
  233fc5:	eb 00                	jmp    233fc7 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.131+0x47>
  233fc7:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  233fcb:	48 83 c4 30          	add    rsp,0x30
  233fcf:	5d                   	pop    rbp
  233fd0:	c3                   	ret    
  233fd1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  233fd8:	0f 1f 84 00 00 00 00 
  233fdf:	00 

0000000000233fe0 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.132>:
        pub fn print(self: *Self, comptime format: []const u8, args: ...) !void {
  233fe0:	55                   	push   rbp
  233fe1:	48 89 e5             	mov    rbp,rsp
  233fe4:	48 83 ec 20          	sub    rsp,0x20
  233fe8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
            return std.fmt.format(self, Error, self.writeFn, format, args);
  233fec:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  233ff0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  233ff4:	48 8b 00             	mov    rax,QWORD PTR [rax]
  233ff7:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  233ffb:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  233fff:	48 89 c2             	mov    rdx,rax
  234002:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  234006:	e8 65 05 00 00       	call   234570 <format.141>
  23400b:	66 83 f8 00          	cmp    ax,0x0
  23400f:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
  234013:	74 0b                	je     234020 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.132+0x40>
  234015:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  234019:	e8 72 7c fd ff       	call   20bc90 <__zig_return_error>
  23401e:	eb 02                	jmp    234022 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.132+0x42>
  234020:	eb 00                	jmp    234022 <OutStream(error{SystemResources,OperationAborted,IoPending,BrokenPipe,Unexpected,WouldBlock,FileClosed,DestinationAddressRequired,DiskQuota,FileTooBig,InputOutput,NoSpaceLeft,AccessDenied,})_print.132+0x42>
  234022:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
  234026:	48 83 c4 20          	add    rsp,0x20
  23402a:	5d                   	pop    rbp
  23402b:	c3                   	ret    
  23402c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000234030 <format.133>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  234030:	55                   	push   rbp
  234031:	48 89 e5             	mov    rbp,rsp
  234034:	48 83 ec 50          	sub    rsp,0x50
  234038:	48 8d 05 91 fc 00 00 	lea    rax,[rip+0xfc91]        # 243cd0 <__unnamed_230>
  23403f:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
  234043:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  234047:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  23404b:	4c 89 45 d0          	mov    QWORD PTR [rbp-0x30],r8
                        try output(context, fmt[start_index..i]);
  23404f:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  234053:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  234057:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  23405b:	48 89 c2             	mov    rdx,rax
  23405e:	4c 89 4d c0          	mov    QWORD PTR [rbp-0x40],r9
  234062:	ff d1                	call   rcx
  234064:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  234068:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  23406d:	74 1b                	je     23408a <format.133+0x5a>
  23406f:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  234073:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  234077:	66 89 45 be          	mov    WORD PTR [rbp-0x42],ax
  23407b:	e8 10 7c fd ff       	call   20bc90 <__zig_return_error>
  234080:	66 8b 45 be          	mov    ax,WORD PTR [rbp-0x42]
  234084:	48 83 c4 50          	add    rsp,0x50
  234088:	5d                   	pop    rbp
  234089:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  23408a:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  23408e:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  234092:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  234096:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  23409a:	e8 61 01 00 00       	call   234200 <formatType.134>
  23409f:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  2340a3:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  2340a8:	74 1b                	je     2340c5 <format.133+0x95>
  2340aa:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  2340ae:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2340b2:	66 89 45 bc          	mov    WORD PTR [rbp-0x44],ax
  2340b6:	e8 d5 7b fd ff       	call   20bc90 <__zig_return_error>
  2340bb:	66 8b 45 bc          	mov    ax,WORD PTR [rbp-0x44]
  2340bf:	48 83 c4 50          	add    rsp,0x50
  2340c3:	5d                   	pop    rbp
  2340c4:	c3                   	ret    
  2340c5:	48 8d 15 1c fc 00 00 	lea    rdx,[rip+0xfc1c]        # 243ce8 <__unnamed_231>
                        try output(context, fmt[start_index..i]);
  2340cc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2340d0:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  2340d4:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2340d8:	ff d0                	call   rax
  2340da:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  2340de:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  2340e3:	74 1b                	je     234100 <format.133+0xd0>
  2340e5:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  2340e9:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2340ed:	66 89 45 ba          	mov    WORD PTR [rbp-0x46],ax
  2340f1:	e8 9a 7b fd ff       	call   20bc90 <__zig_return_error>
  2340f6:	66 8b 45 ba          	mov    ax,WORD PTR [rbp-0x46]
  2340fa:	48 83 c4 50          	add    rsp,0x50
  2340fe:	5d                   	pop    rbp
  2340ff:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  234100:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  234104:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  234108:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  23410c:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  234110:	e8 eb 00 00 00       	call   234200 <formatType.134>
  234115:	66 89 45 f8          	mov    WORD PTR [rbp-0x8],ax
  234119:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  23411e:	74 1b                	je     23413b <format.133+0x10b>
  234120:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  234124:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  234128:	66 89 45 b8          	mov    WORD PTR [rbp-0x48],ax
  23412c:	e8 5f 7b fd ff       	call   20bc90 <__zig_return_error>
  234131:	66 8b 45 b8          	mov    ax,WORD PTR [rbp-0x48]
  234135:	48 83 c4 50          	add    rsp,0x50
  234139:	5d                   	pop    rbp
  23413a:	c3                   	ret    
  23413b:	48 8d 15 be fb 00 00 	lea    rdx,[rip+0xfbbe]        # 243d00 <__unnamed_232>
                        try output(context, fmt[start_index..i]);
  234142:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  234146:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  23414a:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  23414e:	ff d0                	call   rax
  234150:	66 89 45 f6          	mov    WORD PTR [rbp-0xa],ax
  234154:	66 83 7d f6 00       	cmp    WORD PTR [rbp-0xa],0x0
  234159:	74 1b                	je     234176 <format.133+0x146>
  23415b:	66 8b 45 f6          	mov    ax,WORD PTR [rbp-0xa]
  23415f:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  234163:	66 89 45 b6          	mov    WORD PTR [rbp-0x4a],ax
  234167:	e8 24 7b fd ff       	call   20bc90 <__zig_return_error>
  23416c:	66 8b 45 b6          	mov    ax,WORD PTR [rbp-0x4a]
  234170:	48 83 c4 50          	add    rsp,0x50
  234174:	5d                   	pop    rbp
  234175:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  234176:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  23417a:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  23417e:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  234182:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
  234186:	e8 c5 00 00 00       	call   234250 <formatType.135>
  23418b:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
  23418f:	66 83 7d f4 00       	cmp    WORD PTR [rbp-0xc],0x0
  234194:	74 1b                	je     2341b1 <format.133+0x181>
  234196:	66 8b 45 f4          	mov    ax,WORD PTR [rbp-0xc]
  23419a:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  23419e:	66 89 45 b4          	mov    WORD PTR [rbp-0x4c],ax
  2341a2:	e8 e9 7a fd ff       	call   20bc90 <__zig_return_error>
  2341a7:	66 8b 45 b4          	mov    ax,WORD PTR [rbp-0x4c]
  2341ab:	48 83 c4 50          	add    rsp,0x50
  2341af:	5d                   	pop    rbp
  2341b0:	c3                   	ret    
  2341b1:	48 8d 15 60 fb 00 00 	lea    rdx,[rip+0xfb60]        # 243d18 <__unnamed_233>
        try output(context, fmt[start_index..]);
  2341b8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2341bc:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  2341c0:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2341c4:	ff d0                	call   rax
  2341c6:	66 89 45 f2          	mov    WORD PTR [rbp-0xe],ax
  2341ca:	66 83 7d f2 00       	cmp    WORD PTR [rbp-0xe],0x0
  2341cf:	74 1b                	je     2341ec <format.133+0x1bc>
  2341d1:	66 8b 45 f2          	mov    ax,WORD PTR [rbp-0xe]
  2341d5:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  2341d9:	66 89 45 b2          	mov    WORD PTR [rbp-0x4e],ax
  2341dd:	e8 ae 7a fd ff       	call   20bc90 <__zig_return_error>
  2341e2:	66 8b 45 b2          	mov    ax,WORD PTR [rbp-0x4e]
  2341e6:	48 83 c4 50          	add    rsp,0x50
  2341ea:	5d                   	pop    rbp
  2341eb:	c3                   	ret    
  2341ec:	31 c0                	xor    eax,eax
  2341ee:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  2341f1:	66 89 c8             	mov    ax,cx
  2341f4:	48 83 c4 50          	add    rsp,0x50
  2341f8:	5d                   	pop    rbp
  2341f9:	c3                   	ret    
  2341fa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000234200 <formatType.134>:
pub fn formatType(
  234200:	55                   	push   rbp
  234201:	48 89 e5             	mov    rbp,rsp
  234204:	48 83 ec 30          	sub    rsp,0x30
  234208:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  23420c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  234210:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return formatValue(value, fmt, context, Errors, output);
  234214:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  234218:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  23421c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  234220:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  234224:	e8 87 04 00 00       	call   2346b0 <formatValue.143>
  234229:	66 83 f8 00          	cmp    ax,0x0
  23422d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  234231:	74 0b                	je     23423e <formatType.134+0x3e>
  234233:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  234237:	e8 54 7a fd ff       	call   20bc90 <__zig_return_error>
  23423c:	eb 02                	jmp    234240 <formatType.134+0x40>
  23423e:	eb 00                	jmp    234240 <formatType.134+0x40>
  234240:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  234244:	48 83 c4 30          	add    rsp,0x30
  234248:	5d                   	pop    rbp
  234249:	c3                   	ret    
  23424a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000234250 <formatType.135>:
pub fn formatType(
  234250:	55                   	push   rbp
  234251:	48 89 e5             	mov    rbp,rsp
  234254:	48 83 ec 30          	sub    rsp,0x30
  234258:	48 8d 45 e0          	lea    rax,[rbp-0x20]
  23425c:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  234260:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
                const casted_value = ([]const u8)(value);
  234264:	48 8b 0e             	mov    rcx,QWORD PTR [rsi]
  234267:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  23426b:	48 8b 4e 08          	mov    rcx,QWORD PTR [rsi+0x8]
  23426f:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
                return output(context, casted_value);
  234273:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  234277:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  23427b:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  23427f:	48 89 c2             	mov    rdx,rax
  234282:	ff d1                	call   rcx
  234284:	66 83 f8 00          	cmp    ax,0x0
  234288:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  23428c:	74 0b                	je     234299 <formatType.135+0x49>
  23428e:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  234292:	e8 f9 79 fd ff       	call   20bc90 <__zig_return_error>
  234297:	eb 02                	jmp    23429b <formatType.135+0x4b>
  234299:	eb 00                	jmp    23429b <formatType.135+0x4b>
  23429b:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  23429f:	48 83 c4 30          	add    rsp,0x30
  2342a3:	5d                   	pop    rbp
  2342a4:	c3                   	ret    
  2342a5:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2342ac:	00 00 00 00 

00000000002342b0 <format.136>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  2342b0:	55                   	push   rbp
  2342b1:	48 89 e5             	mov    rbp,rsp
  2342b4:	48 83 ec 30          	sub    rsp,0x30
  2342b8:	48 8d 05 71 fa 00 00 	lea    rax,[rip+0xfa71]        # 243d30 <__unnamed_234>
  2342bf:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  2342c3:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
        try output(context, fmt[start_index..]);
  2342c7:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  2342cb:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  2342cf:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2342d3:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  2342d7:	48 89 c2             	mov    rdx,rax
  2342da:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2342de:	ff d0                	call   rax
  2342e0:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  2342e4:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  2342e9:	74 1b                	je     234306 <format.136+0x56>
  2342eb:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  2342ef:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2342f3:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  2342f7:	e8 94 79 fd ff       	call   20bc90 <__zig_return_error>
  2342fc:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  234300:	48 83 c4 30          	add    rsp,0x30
  234304:	5d                   	pop    rbp
  234305:	c3                   	ret    
  234306:	31 c0                	xor    eax,eax
  234308:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  23430b:	66 89 c8             	mov    ax,cx
  23430e:	48 83 c4 30          	add    rsp,0x30
  234312:	5d                   	pop    rbp
  234313:	c3                   	ret    
  234314:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  23431b:	00 00 00 00 00 

0000000000234320 <format.137>:
  234320:	55                   	push   rbp
  234321:	48 89 e5             	mov    rbp,rsp
  234324:	48 83 ec 30          	sub    rsp,0x30
  234328:	48 8d 05 19 fa 00 00 	lea    rax,[rip+0xfa19]        # 243d48 <__unnamed_235>
  23432f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  234333:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
        try output(context, fmt[start_index..]);
  234337:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  23433b:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  23433f:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  234343:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  234347:	48 89 c2             	mov    rdx,rax
  23434a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  23434e:	ff d0                	call   rax
  234350:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  234354:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  234359:	74 1b                	je     234376 <format.137+0x56>
  23435b:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  23435f:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  234363:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  234367:	e8 24 79 fd ff       	call   20bc90 <__zig_return_error>
  23436c:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  234370:	48 83 c4 30          	add    rsp,0x30
  234374:	5d                   	pop    rbp
  234375:	c3                   	ret    
  234376:	31 c0                	xor    eax,eax
  234378:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  23437b:	66 89 c8             	mov    ax,cx
  23437e:	48 83 c4 30          	add    rsp,0x30
  234382:	5d                   	pop    rbp
  234383:	c3                   	ret    
  234384:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  23438b:	00 00 00 00 00 

0000000000234390 <format.138>:
  234390:	55                   	push   rbp
  234391:	48 89 e5             	mov    rbp,rsp
  234394:	48 83 ec 30          	sub    rsp,0x30
  234398:	48 8d 05 c1 f9 00 00 	lea    rax,[rip+0xf9c1]        # 243d60 <__unnamed_236>
  23439f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  2343a3:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
        try output(context, fmt[start_index..]);
  2343a7:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  2343ab:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  2343af:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2343b3:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  2343b7:	48 89 c2             	mov    rdx,rax
  2343ba:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  2343be:	ff d0                	call   rax
  2343c0:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  2343c4:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  2343c9:	74 1b                	je     2343e6 <format.138+0x56>
  2343cb:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  2343cf:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2343d3:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  2343d7:	e8 b4 78 fd ff       	call   20bc90 <__zig_return_error>
  2343dc:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  2343e0:	48 83 c4 30          	add    rsp,0x30
  2343e4:	5d                   	pop    rbp
  2343e5:	c3                   	ret    
  2343e6:	31 c0                	xor    eax,eax
  2343e8:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  2343eb:	66 89 c8             	mov    ax,cx
  2343ee:	48 83 c4 30          	add    rsp,0x30
  2343f2:	5d                   	pop    rbp
  2343f3:	c3                   	ret    
  2343f4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2343fb:	00 00 00 00 00 

0000000000234400 <format.139>:
  234400:	55                   	push   rbp
  234401:	48 89 e5             	mov    rbp,rsp
  234404:	48 83 ec 40          	sub    rsp,0x40
  234408:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  23440c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  234410:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  234414:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  234418:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  23441c:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  234420:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  234424:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
  234428:	e8 f3 00 00 00       	call   234520 <formatType.140>
  23442d:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  234431:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  234436:	74 1b                	je     234453 <format.139+0x53>
  234438:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  23443c:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  234440:	66 89 45 ce          	mov    WORD PTR [rbp-0x32],ax
  234444:	e8 47 78 fd ff       	call   20bc90 <__zig_return_error>
  234449:	66 8b 45 ce          	mov    ax,WORD PTR [rbp-0x32]
  23444d:	48 83 c4 40          	add    rsp,0x40
  234451:	5d                   	pop    rbp
  234452:	c3                   	ret    
  234453:	48 8d 15 1e f9 00 00 	lea    rdx,[rip+0xf91e]        # 243d78 <__unnamed_237>
                        try output(context, fmt[start_index..i]);
  23445a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  23445e:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  234462:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  234466:	ff d0                	call   rax
  234468:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  23446c:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  234471:	74 1b                	je     23448e <format.139+0x8e>
  234473:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  234477:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  23447b:	66 89 45 cc          	mov    WORD PTR [rbp-0x34],ax
  23447f:	e8 0c 78 fd ff       	call   20bc90 <__zig_return_error>
  234484:	66 8b 45 cc          	mov    ax,WORD PTR [rbp-0x34]
  234488:	48 83 c4 40          	add    rsp,0x40
  23448c:	5d                   	pop    rbp
  23448d:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  23448e:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  234492:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  234496:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  23449a:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  23449e:	e8 7d 00 00 00       	call   234520 <formatType.140>
  2344a3:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  2344a7:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  2344ac:	74 1b                	je     2344c9 <format.139+0xc9>
  2344ae:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  2344b2:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  2344b6:	66 89 45 ca          	mov    WORD PTR [rbp-0x36],ax
  2344ba:	e8 d1 77 fd ff       	call   20bc90 <__zig_return_error>
  2344bf:	66 8b 45 ca          	mov    ax,WORD PTR [rbp-0x36]
  2344c3:	48 83 c4 40          	add    rsp,0x40
  2344c7:	5d                   	pop    rbp
  2344c8:	c3                   	ret    
  2344c9:	48 8d 15 c0 f8 00 00 	lea    rdx,[rip+0xf8c0]        # 243d90 <__unnamed_238>
        try output(context, fmt[start_index..]);
  2344d0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2344d4:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  2344d8:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  2344dc:	ff d0                	call   rax
  2344de:	66 89 45 f8          	mov    WORD PTR [rbp-0x8],ax
  2344e2:	66 83 7d f8 00       	cmp    WORD PTR [rbp-0x8],0x0
  2344e7:	74 1b                	je     234504 <format.139+0x104>
  2344e9:	66 8b 45 f8          	mov    ax,WORD PTR [rbp-0x8]
  2344ed:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
  2344f1:	66 89 45 c8          	mov    WORD PTR [rbp-0x38],ax
  2344f5:	e8 96 77 fd ff       	call   20bc90 <__zig_return_error>
  2344fa:	66 8b 45 c8          	mov    ax,WORD PTR [rbp-0x38]
  2344fe:	48 83 c4 40          	add    rsp,0x40
  234502:	5d                   	pop    rbp
  234503:	c3                   	ret    
  234504:	31 c0                	xor    eax,eax
  234506:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  234509:	66 89 c8             	mov    ax,cx
  23450c:	48 83 c4 40          	add    rsp,0x40
  234510:	5d                   	pop    rbp
  234511:	c3                   	ret    
  234512:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  234519:	1f 84 00 00 00 00 00 

0000000000234520 <formatType.140>:
pub fn formatType(
  234520:	55                   	push   rbp
  234521:	48 89 e5             	mov    rbp,rsp
  234524:	48 83 ec 30          	sub    rsp,0x30
  234528:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  23452c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  234530:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
            return formatValue(value, fmt, context, Errors, output);
  234534:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  234538:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  23453c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  234540:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  234544:	e8 b7 01 00 00       	call   234700 <formatValue.144>
  234549:	66 83 f8 00          	cmp    ax,0x0
  23454d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  234551:	74 0b                	je     23455e <formatType.140+0x3e>
  234553:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  234557:	e8 34 77 fd ff       	call   20bc90 <__zig_return_error>
  23455c:	eb 02                	jmp    234560 <formatType.140+0x40>
  23455e:	eb 00                	jmp    234560 <formatType.140+0x40>
  234560:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  234564:	48 83 c4 30          	add    rsp,0x30
  234568:	5d                   	pop    rbp
  234569:	c3                   	ret    
  23456a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000234570 <format.141>:
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  234570:	55                   	push   rbp
  234571:	48 89 e5             	mov    rbp,rsp
  234574:	48 83 ec 40          	sub    rsp,0x40
  234578:	48 8d 05 29 f8 00 00 	lea    rax,[rip+0xf829]        # 243da8 <__unnamed_239>
  23457f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  234583:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
                        try output(context, fmt[start_index..i]);
  234587:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  23458b:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  23458f:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  234593:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  234597:	48 89 c2             	mov    rdx,rax
  23459a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  23459e:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  2345a2:	ff d0                	call   rax
  2345a4:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  2345a8:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
  2345ad:	74 1b                	je     2345ca <format.141+0x5a>
  2345af:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  2345b3:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2345b7:	66 89 45 ce          	mov    WORD PTR [rbp-0x32],ax
  2345bb:	e8 d0 76 fd ff       	call   20bc90 <__zig_return_error>
  2345c0:	66 8b 45 ce          	mov    ax,WORD PTR [rbp-0x32]
  2345c4:	48 83 c4 40          	add    rsp,0x40
  2345c8:	5d                   	pop    rbp
  2345c9:	c3                   	ret    
                    try formatType(args[next_arg], fmt[0..0], context, Errors, output);
  2345ca:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  2345ce:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2345d2:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2345d6:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  2345da:	e8 71 00 00 00       	call   234650 <formatType.142>
  2345df:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  2345e3:	66 83 7d fc 00       	cmp    WORD PTR [rbp-0x4],0x0
  2345e8:	74 1b                	je     234605 <format.141+0x95>
  2345ea:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
  2345ee:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2345f2:	66 89 45 cc          	mov    WORD PTR [rbp-0x34],ax
  2345f6:	e8 95 76 fd ff       	call   20bc90 <__zig_return_error>
  2345fb:	66 8b 45 cc          	mov    ax,WORD PTR [rbp-0x34]
  2345ff:	48 83 c4 40          	add    rsp,0x40
  234603:	5d                   	pop    rbp
  234604:	c3                   	ret    
  234605:	48 8d 15 b4 f7 00 00 	lea    rdx,[rip+0xf7b4]        # 243dc0 <__unnamed_240>
        try output(context, fmt[start_index..]);
  23460c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  234610:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  234614:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  234618:	ff d0                	call   rax
  23461a:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
  23461e:	66 83 7d fa 00       	cmp    WORD PTR [rbp-0x6],0x0
  234623:	74 1b                	je     234640 <format.141+0xd0>
  234625:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
  234629:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  23462d:	66 89 45 ca          	mov    WORD PTR [rbp-0x36],ax
  234631:	e8 5a 76 fd ff       	call   20bc90 <__zig_return_error>
  234636:	66 8b 45 ca          	mov    ax,WORD PTR [rbp-0x36]
  23463a:	48 83 c4 40          	add    rsp,0x40
  23463e:	5d                   	pop    rbp
  23463f:	c3                   	ret    
  234640:	31 c0                	xor    eax,eax
  234642:	66 89 c1             	mov    cx,ax
pub fn format(context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void, comptime fmt: []const u8, args: ...) Errors!void {
  234645:	66 89 c8             	mov    ax,cx
  234648:	48 83 c4 40          	add    rsp,0x40
  23464c:	5d                   	pop    rbp
  23464d:	c3                   	ret    
  23464e:	66 90                	xchg   ax,ax

0000000000234650 <formatType.142>:
pub fn formatType(
  234650:	55                   	push   rbp
  234651:	48 89 e5             	mov    rbp,rsp
  234654:	48 83 ec 30          	sub    rsp,0x30
  234658:	48 8d 45 e0          	lea    rax,[rbp-0x20]
  23465c:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  234660:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
                const casted_value = ([]const u8)(value);
  234664:	48 8b 0e             	mov    rcx,QWORD PTR [rsi]
  234667:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  23466b:	48 8b 4e 08          	mov    rcx,QWORD PTR [rsi+0x8]
  23466f:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
                return output(context, casted_value);
  234673:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  234677:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  23467b:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  23467f:	48 89 c2             	mov    rdx,rax
  234682:	ff d1                	call   rcx
  234684:	66 83 f8 00          	cmp    ax,0x0
  234688:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  23468c:	74 0b                	je     234699 <formatType.142+0x49>
  23468e:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  234692:	e8 f9 75 fd ff       	call   20bc90 <__zig_return_error>
  234697:	eb 02                	jmp    23469b <formatType.142+0x4b>
  234699:	eb 00                	jmp    23469b <formatType.142+0x4b>
  23469b:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  23469f:	48 83 c4 30          	add    rsp,0x30
  2346a3:	5d                   	pop    rbp
  2346a4:	c3                   	ret    
  2346a5:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2346ac:	00 00 00 00 

00000000002346b0 <formatValue.143>:
fn formatValue(
  2346b0:	55                   	push   rbp
  2346b1:	48 89 e5             	mov    rbp,rsp
  2346b4:	48 83 ec 30          	sub    rsp,0x30
  2346b8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2346bc:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  2346c0:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
        builtin.TypeId.Int => return formatIntValue(value, fmt, context, Errors, output),
  2346c4:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2346c8:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  2346cc:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2346d0:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2346d4:	e8 77 00 00 00       	call   234750 <formatIntValue.145>
  2346d9:	66 83 f8 00          	cmp    ax,0x0
  2346dd:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  2346e1:	74 0b                	je     2346ee <formatValue.143+0x3e>
  2346e3:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2346e7:	e8 a4 75 fd ff       	call   20bc90 <__zig_return_error>
  2346ec:	eb 02                	jmp    2346f0 <formatValue.143+0x40>
  2346ee:	eb 00                	jmp    2346f0 <formatValue.143+0x40>
  2346f0:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  2346f4:	48 83 c4 30          	add    rsp,0x30
  2346f8:	5d                   	pop    rbp
  2346f9:	c3                   	ret    
  2346fa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000234700 <formatValue.144>:
fn formatValue(
  234700:	55                   	push   rbp
  234701:	48 89 e5             	mov    rbp,rsp
  234704:	48 83 ec 30          	sub    rsp,0x30
  234708:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  23470c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  234710:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
        builtin.TypeId.Int => return formatIntValue(value, fmt, context, Errors, output),
  234714:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  234718:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  23471c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  234720:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  234724:	e8 97 00 00 00       	call   2347c0 <formatIntValue.146>
  234729:	66 83 f8 00          	cmp    ax,0x0
  23472d:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
  234731:	74 0b                	je     23473e <formatValue.144+0x3e>
  234733:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  234737:	e8 54 75 fd ff       	call   20bc90 <__zig_return_error>
  23473c:	eb 02                	jmp    234740 <formatValue.144+0x40>
  23473e:	eb 00                	jmp    234740 <formatValue.144+0x40>
  234740:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  234744:	48 83 c4 30          	add    rsp,0x30
  234748:	5d                   	pop    rbp
  234749:	c3                   	ret    
  23474a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000234750 <formatIntValue.145>:
pub fn formatIntValue(
  234750:	55                   	push   rbp
  234751:	48 89 e5             	mov    rbp,rsp
  234754:	48 83 ec 40          	sub    rsp,0x40
  234758:	b8 0a 00 00 00       	mov    eax,0xa
  23475d:	45 31 c0             	xor    r8d,r8d
  234760:	45 31 c9             	xor    r9d,r9d
  234763:	45 89 ca             	mov    r10d,r9d
  234766:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  23476a:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  23476e:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    return formatInt(value, radix, uppercase, width, context, Errors, output);
  234772:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  234776:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
  23477a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  23477e:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  234782:	89 c2                	mov    edx,eax
  234784:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  234788:	44 89 c1             	mov    ecx,r8d
  23478b:	4d 89 d0             	mov    r8,r10
  23478e:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
  234792:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  234796:	e8 f5 63 ff ff       	call   22ab90 <formatInt.119>
  23479b:	66 83 f8 00          	cmp    ax,0x0
  23479f:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  2347a3:	74 0b                	je     2347b0 <formatIntValue.145+0x60>
  2347a5:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2347a9:	e8 e2 74 fd ff       	call   20bc90 <__zig_return_error>
  2347ae:	eb 02                	jmp    2347b2 <formatIntValue.145+0x62>
  2347b0:	eb 00                	jmp    2347b2 <formatIntValue.145+0x62>
  2347b2:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  2347b6:	48 83 c4 40          	add    rsp,0x40
  2347ba:	5d                   	pop    rbp
  2347bb:	c3                   	ret    
  2347bc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

00000000002347c0 <formatIntValue.146>:
pub fn formatIntValue(
  2347c0:	55                   	push   rbp
  2347c1:	48 89 e5             	mov    rbp,rsp
  2347c4:	48 83 ec 40          	sub    rsp,0x40
  2347c8:	b8 0a 00 00 00       	mov    eax,0xa
  2347cd:	45 31 c0             	xor    r8d,r8d
  2347d0:	45 31 c9             	xor    r9d,r9d
  2347d3:	45 89 ca             	mov    r10d,r9d
  2347d6:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  2347da:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  2347de:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    return formatInt(value, radix, uppercase, width, context, Errors, output);
  2347e2:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  2347e6:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
  2347ea:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2347ee:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  2347f2:	89 c2                	mov    edx,eax
  2347f4:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  2347f8:	44 89 c1             	mov    ecx,r8d
  2347fb:	4d 89 d0             	mov    r8,r10
  2347fe:	4c 8b 55 d8          	mov    r10,QWORD PTR [rbp-0x28]
  234802:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  234806:	e8 85 63 ff ff       	call   22ab90 <formatInt.119>
  23480b:	66 83 f8 00          	cmp    ax,0x0
  23480f:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
  234813:	74 0b                	je     234820 <formatIntValue.146+0x60>
  234815:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  234819:	e8 72 74 fd ff       	call   20bc90 <__zig_return_error>
  23481e:	eb 02                	jmp    234822 <formatIntValue.146+0x62>
  234820:	eb 00                	jmp    234822 <formatIntValue.146+0x62>
  234822:	66 8b 45 d6          	mov    ax,WORD PTR [rbp-0x2a]
  234826:	48 83 c4 40          	add    rsp,0x40
  23482a:	5d                   	pop    rbp
  23482b:	c3                   	ret    
  23482c:	cc                   	int3   
  23482d:	cc                   	int3   
  23482e:	cc                   	int3   
  23482f:	cc                   	int3   

0000000000234830 <panic>:

const builtin = @import("builtin");

// Avoid dragging in the runtime safety mechanisms into this .o file,
// unless we're trying to test this file.
pub fn panic(msg: []const u8, error_return_trace: ?*builtin.StackTrace) noreturn {
  234830:	55                   	push   rbp
  234831:	48 89 e5             	mov    rbp,rsp
  234834:	48 83 ec 10          	sub    rsp,0x10
  234838:	48 8d 3d 99 f5 00 00 	lea    rdi,[rip+0xf599]        # 243dd8 <__unnamed_1>
  23483f:	31 c0                	xor    eax,eax
  234841:	89 c1                	mov    ecx,eax
  234843:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
    if (builtin.is_test) {
        @setCold(true);
        @import("std").debug.panic("{}", msg);
    } else {
        unreachable;
  234847:	48 89 ce             	mov    rsi,rcx
  23484a:	e8 e1 ff ff ff       	call   234830 <panic>
  23484f:	90                   	nop

0000000000234850 <memset>:
    }
}

export fn memset(dest: ?[*]u8, c: u8, n: usize) ?[*]u8 {
  234850:	55                   	push   rbp
  234851:	48 89 e5             	mov    rbp,rsp
  234854:	40 88 f0             	mov    al,sil
  234857:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  23485b:	88 45 f7             	mov    BYTE PTR [rbp-0x9],al
  23485e:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    @setRuntimeSafety(false);

    var index: usize = 0;
  234862:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  234869:	00 
    while (index != n) : (index += 1)
  23486a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  23486e:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
  234872:	74 1c                	je     234890 <memset+0x40>
        dest.?[index] = c;
  234874:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  234878:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  23487c:	8a 55 f7             	mov    dl,BYTE PTR [rbp-0x9]
  23487f:	88 14 01             	mov    BYTE PTR [rcx+rax*1],dl
    while (index != n) : (index += 1)
  234882:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  234886:	48 83 c0 01          	add    rax,0x1
  23488a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  23488e:	eb da                	jmp    23486a <memset+0x1a>

    return dest;
  234890:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  234894:	5d                   	pop    rbp
  234895:	c3                   	ret    
  234896:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  23489d:	00 00 00 

00000000002348a0 <memcpy>:
}

export fn memcpy(noalias dest: ?[*]u8, noalias src: ?[*]const u8, n: usize) ?[*]u8 {
  2348a0:	55                   	push   rbp
  2348a1:	48 89 e5             	mov    rbp,rsp
  2348a4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  2348a8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  2348ac:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    @setRuntimeSafety(false);

    var index: usize = 0;
  2348b0:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  2348b7:	00 
    while (index != n) : (index += 1)
  2348b8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2348bc:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
  2348c0:	74 26                	je     2348e8 <memcpy+0x48>
        dest.?[index] = src.?[index];
  2348c2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2348c6:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  2348ca:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  2348ce:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  2348d2:	40 8a 3c 16          	mov    dil,BYTE PTR [rsi+rdx*1]
  2348d6:	40 88 3c 01          	mov    BYTE PTR [rcx+rax*1],dil
    while (index != n) : (index += 1)
  2348da:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2348de:	48 83 c0 01          	add    rax,0x1
  2348e2:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  2348e6:	eb d0                	jmp    2348b8 <memcpy+0x18>

    return dest;
  2348e8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  2348ec:	5d                   	pop    rbp
  2348ed:	c3                   	ret    
  2348ee:	66 90                	xchg   ax,ax

00000000002348f0 <memmove>:
}

export fn memmove(dest: ?[*]u8, src: ?[*]const u8, n: usize) ?[*]u8 {
  2348f0:	55                   	push   rbp
  2348f1:	48 89 e5             	mov    rbp,rsp
  2348f4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  2348f8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  2348fc:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    @setRuntimeSafety(false);

    if (@ptrToInt(dest) < @ptrToInt(src)) {
  234900:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  234904:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  234908:	48 39 f2             	cmp    rdx,rsi
  23490b:	73 3a                	jae    234947 <memmove+0x57>
        var index: usize = 0;
  23490d:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  234914:	00 
        while (index != n) : (index += 1) {
  234915:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  234919:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
  23491d:	74 26                	je     234945 <memmove+0x55>
            dest.?[index] = src.?[index];
  23491f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  234923:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  234927:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  23492b:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  23492f:	40 8a 3c 16          	mov    dil,BYTE PTR [rsi+rdx*1]
  234933:	40 88 3c 01          	mov    BYTE PTR [rcx+rax*1],dil
        while (index != n) : (index += 1) {
  234937:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  23493b:	48 83 c0 01          	add    rax,0x1
  23493f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  234943:	eb d0                	jmp    234915 <memmove+0x25>
    if (@ptrToInt(dest) < @ptrToInt(src)) {
  234945:	eb 37                	jmp    23497e <memmove+0x8e>
        }
    } else {
        var index = n;
  234947:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  23494b:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
        while (index != 0) {
  23494f:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  234954:	74 26                	je     23497c <memmove+0x8c>
            index -= 1;
  234956:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  23495a:	48 83 e8 01          	sub    rax,0x1
  23495e:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
            dest.?[index] = src.?[index];
  234962:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  234966:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  23496a:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  23496e:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  234972:	40 8a 3c 16          	mov    dil,BYTE PTR [rsi+rdx*1]
  234976:	40 88 3c 01          	mov    BYTE PTR [rcx+rax*1],dil
        while (index != 0) {
  23497a:	eb d3                	jmp    23494f <memmove+0x5f>
    if (@ptrToInt(dest) < @ptrToInt(src)) {
  23497c:	eb 00                	jmp    23497e <memmove+0x8e>
        }
    }

    return dest;
  23497e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  234982:	5d                   	pop    rbp
  234983:	c3                   	ret    
  234984:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  23498b:	00 00 00 00 00 

0000000000234990 <__stack_chk_fail>:
    }
    if (builtin.os == builtin.Os.linux and builtin.arch == builtin.Arch.x86_64) {
        @export("clone", clone, builtin.GlobalLinkage.Strong);
    }
}
extern fn __stack_chk_fail() noreturn {
  234990:	55                   	push   rbp
  234991:	48 89 e5             	mov    rbp,rsp
  234994:	48 8d 3d 55 f4 00 00 	lea    rdi,[rip+0xf455]        # 243df0 <__unnamed_2>
  23499b:	31 c0                	xor    eax,eax
  23499d:	89 c6                	mov    esi,eax
    @panic("stack smashing detected");
  23499f:	e8 8c fe ff ff       	call   234830 <panic>
  2349a4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2349ab:	00 00 00 00 00 

00000000002349b0 <clone>:

// TODO we should be able to put this directly in std/linux/x86_64.zig but
// it causes a segfault in release mode. this is a workaround of calling it
// across .o file boundaries. fix comptime @ptrCast of nakedcc functions.
nakedcc fn clone() void {
    asm volatile (
  2349b0:	31 c0                	xor    eax,eax
  2349b2:	b0 38                	mov    al,0x38
  2349b4:	49 89 fb             	mov    r11,rdi
  2349b7:	48 89 d7             	mov    rdi,rdx
  2349ba:	4c 89 c2             	mov    rdx,r8
  2349bd:	4d 89 c8             	mov    r8,r9
  2349c0:	4c 8b 54 24 08       	mov    r10,QWORD PTR [rsp+0x8]
  2349c5:	4d 89 d9             	mov    r9,r11
  2349c8:	48 83 e6 f0          	and    rsi,0xfffffffffffffff0
  2349cc:	48 83 ee 08          	sub    rsi,0x8
  2349d0:	48 89 0e             	mov    QWORD PTR [rsi],rcx
  2349d3:	0f 05                	syscall 
  2349d5:	85 c0                	test   eax,eax
  2349d7:	75 0f                	jne    2349e8 <clone+0x38>
  2349d9:	31 ed                	xor    ebp,ebp
  2349db:	5f                   	pop    rdi
  2349dc:	41 ff d1             	call   r9
  2349df:	89 c7                	mov    edi,eax
  2349e1:	31 c0                	xor    eax,eax
  2349e3:	b0 3c                	mov    al,0x3c
  2349e5:	0f 05                	syscall 
  2349e7:	f4                   	hlt    
  2349e8:	c3                   	ret    
nakedcc fn clone() void {
  2349e9:	c3                   	ret    
  2349ea:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000002349f0 <fmodf>:
    );
}

const math = @import("../math/index.zig");

export fn fmodf(x: f32, y: f32) f32 {
  2349f0:	55                   	push   rbp
  2349f1:	48 89 e5             	mov    rbp,rsp
  2349f4:	48 83 ec 10          	sub    rsp,0x10
  2349f8:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
  2349fd:	c5 fa 11 4d f8       	vmovss DWORD PTR [rbp-0x8],xmm1
    return generic_fmod(f32, x, y);
  234a02:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  234a07:	c5 fa 10 4d f8       	vmovss xmm1,DWORD PTR [rbp-0x8]
  234a0c:	e8 0f 00 00 00       	call   234a20 <generic_fmod>
  234a11:	48 83 c4 10          	add    rsp,0x10
  234a15:	5d                   	pop    rbp
  234a16:	c3                   	ret    
  234a17:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  234a1e:	00 00 

0000000000234a20 <generic_fmod>:
}
export fn ceil(x: f64) f64 {
    return math.ceil(x);
}

fn generic_fmod(comptime T: type, x: T, y: T) T {
  234a20:	55                   	push   rbp
  234a21:	48 89 e5             	mov    rbp,rsp
  234a24:	48 83 ec 30          	sub    rsp,0x30
  234a28:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
  234a2d:	c5 fa 11 4d f8       	vmovss DWORD PTR [rbp-0x8],xmm1
    const log2uint = math.Log2Int(uint);
    const digits = if (T == f32) 23 else 52;
    const exp_bits = if (T == f32) 9 else 12;
    const bits_minus_1 = T.bit_count - 1;
    const mask = if (T == f32) 0xff else 0x7ff;
    var ux = @bitCast(uint, x);
  234a32:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  234a37:	c5 f9 7e c0          	vmovd  eax,xmm0
  234a3b:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    var uy = @bitCast(uint, y);
  234a3e:	c5 fa 10 45 f8       	vmovss xmm0,DWORD PTR [rbp-0x8]
  234a43:	c5 f9 7e c0          	vmovd  eax,xmm0
  234a47:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    var ex = @intCast(i32, (ux >> digits) & mask);
  234a4a:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  234a4d:	c1 e8 17             	shr    eax,0x17
  234a50:	25 ff 00 00 00       	and    eax,0xff
  234a55:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    var ey = @intCast(i32, (uy >> digits) & mask);
  234a58:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  234a5b:	c1 e8 17             	shr    eax,0x17
  234a5e:	25 ff 00 00 00       	and    eax,0xff
  234a63:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
    const sx = if (T == f32) @intCast(u32, ux & 0x80000000) else @intCast(i32, ux >> bits_minus_1);
  234a66:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  234a69:	25 00 00 00 80       	and    eax,0x80000000
  234a6e:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
    var i: uint = undefined;

    if (uy << 1 == 0 or isNan(uint, uy) or ex == mask)
  234a71:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  234a74:	c1 e0 01             	shl    eax,0x1
  234a77:	83 f8 00             	cmp    eax,0x0
  234a7a:	0f 94 c1             	sete   cl
  234a7d:	f6 c1 01             	test   cl,0x1
  234a80:	88 4d df             	mov    BYTE PTR [rbp-0x21],cl
  234a83:	75 0b                	jne    234a90 <generic_fmod+0x70>
  234a85:	8b 7d f0             	mov    edi,DWORD PTR [rbp-0x10]
  234a88:	e8 43 15 00 00       	call   235fd0 <isNan>
  234a8d:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
  234a90:	8a 45 df             	mov    al,BYTE PTR [rbp-0x21]
  234a93:	a8 01                	test   al,0x1
  234a95:	88 45 de             	mov    BYTE PTR [rbp-0x22],al
  234a98:	75 0d                	jne    234aa7 <generic_fmod+0x87>
  234a9a:	81 7d ec ff 00 00 00 	cmp    DWORD PTR [rbp-0x14],0xff
  234aa1:	0f 94 c0             	sete   al
  234aa4:	88 45 de             	mov    BYTE PTR [rbp-0x22],al
  234aa7:	8a 45 de             	mov    al,BYTE PTR [rbp-0x22]
  234aaa:	a8 01                	test   al,0x1
  234aac:	75 02                	jne    234ab0 <generic_fmod+0x90>
  234aae:	eb 1e                	jmp    234ace <generic_fmod+0xae>
        return (x * y) / (x * y);
  234ab0:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  234ab5:	c5 fa 59 45 f8       	vmulss xmm0,xmm0,DWORD PTR [rbp-0x8]
  234aba:	c5 fa 10 4d fc       	vmovss xmm1,DWORD PTR [rbp-0x4]
  234abf:	c5 f2 59 4d f8       	vmulss xmm1,xmm1,DWORD PTR [rbp-0x8]
  234ac4:	c5 fa 5e c1          	vdivss xmm0,xmm0,xmm1
  234ac8:	48 83 c4 30          	add    rsp,0x30
  234acc:	5d                   	pop    rbp
  234acd:	c3                   	ret    
    if (uy << 1 == 0 or isNan(uint, uy) or ex == mask)
  234ace:	eb 00                	jmp    234ad0 <generic_fmod+0xb0>

    if (ux << 1 <= uy << 1) {
  234ad0:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  234ad3:	c1 e0 01             	shl    eax,0x1
  234ad6:	8b 4d f0             	mov    ecx,DWORD PTR [rbp-0x10]
  234ad9:	c1 e1 01             	shl    ecx,0x1
  234adc:	39 c8                	cmp    eax,ecx
  234ade:	77 2c                	ja     234b0c <generic_fmod+0xec>
        if (ux << 1 == uy << 1)
  234ae0:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  234ae3:	c1 e0 01             	shl    eax,0x1
  234ae6:	8b 4d f0             	mov    ecx,DWORD PTR [rbp-0x10]
  234ae9:	c1 e1 01             	shl    ecx,0x1
  234aec:	39 c8                	cmp    eax,ecx
  234aee:	75 0f                	jne    234aff <generic_fmod+0xdf>
  234af0:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
            return 0 * x;
  234af4:	c5 fa 59 45 fc       	vmulss xmm0,xmm0,DWORD PTR [rbp-0x4]
  234af9:	48 83 c4 30          	add    rsp,0x30
  234afd:	5d                   	pop    rbp
  234afe:	c3                   	ret    
        if (ux << 1 == uy << 1)
  234aff:	eb 00                	jmp    234b01 <generic_fmod+0xe1>
        return x;
  234b01:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  234b06:	48 83 c4 30          	add    rsp,0x30
  234b0a:	5d                   	pop    rbp
  234b0b:	c3                   	ret    
    if (ux << 1 <= uy << 1) {
  234b0c:	eb 00                	jmp    234b0e <generic_fmod+0xee>
    }

    // normalize x and y
    if (ex == 0) {
  234b0e:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
  234b12:	75 43                	jne    234b57 <generic_fmod+0x137>
        i = ux << exp_bits;
  234b14:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  234b17:	c1 e0 09             	shl    eax,0x9
  234b1a:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
        while (i >> bits_minus_1 == 0) : (b: {
  234b1d:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  234b20:	c1 e8 1f             	shr    eax,0x1f
  234b23:	83 f8 00             	cmp    eax,0x0
  234b26:	75 16                	jne    234b3e <generic_fmod+0x11e>
  234b28:	eb 00                	jmp    234b2a <generic_fmod+0x10a>
            ex -= 1;
  234b2a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  234b2d:	83 e8 01             	sub    eax,0x1
  234b30:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
            i <<= 1;
  234b33:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  234b36:	c1 e0 01             	shl    eax,0x1
  234b39:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
        while (i >> bits_minus_1 == 0) : (b: {
  234b3c:	eb df                	jmp    234b1d <generic_fmod+0xfd>
        }) {}
        ux <<= @intCast(log2uint, @bitCast(u32, -ex + 1));
  234b3e:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  234b41:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
  234b44:	ba 01 00 00 00       	mov    edx,0x1
  234b49:	29 ca                	sub    edx,ecx
  234b4b:	83 e2 1f             	and    edx,0x1f
  234b4e:	89 d1                	mov    ecx,edx
  234b50:	d3 e0                	shl    eax,cl
  234b52:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    if (ex == 0) {
  234b55:	eb 16                	jmp    234b6d <generic_fmod+0x14d>
    } else {
        ux &= @maxValue(uint) >> exp_bits;
  234b57:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  234b5a:	25 ff ff 7f 00       	and    eax,0x7fffff
  234b5f:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
        ux |= 1 << digits;
  234b62:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  234b65:	0d 00 00 80 00       	or     eax,0x800000
  234b6a:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    }
    if (ey == 0) {
  234b6d:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
  234b71:	75 43                	jne    234bb6 <generic_fmod+0x196>
        i = uy << exp_bits;
  234b73:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  234b76:	c1 e0 09             	shl    eax,0x9
  234b79:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
        while (i >> bits_minus_1 == 0) : (b: {
  234b7c:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  234b7f:	c1 e8 1f             	shr    eax,0x1f
  234b82:	83 f8 00             	cmp    eax,0x0
  234b85:	75 16                	jne    234b9d <generic_fmod+0x17d>
  234b87:	eb 00                	jmp    234b89 <generic_fmod+0x169>
            ey -= 1;
  234b89:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  234b8c:	83 e8 01             	sub    eax,0x1
  234b8f:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
            i <<= 1;
  234b92:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  234b95:	c1 e0 01             	shl    eax,0x1
  234b98:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
        while (i >> bits_minus_1 == 0) : (b: {
  234b9b:	eb df                	jmp    234b7c <generic_fmod+0x15c>
        }) {}
        uy <<= @intCast(log2uint, @bitCast(u32, -ey + 1));
  234b9d:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  234ba0:	8b 4d e8             	mov    ecx,DWORD PTR [rbp-0x18]
  234ba3:	ba 01 00 00 00       	mov    edx,0x1
  234ba8:	29 ca                	sub    edx,ecx
  234baa:	83 e2 1f             	and    edx,0x1f
  234bad:	89 d1                	mov    ecx,edx
  234baf:	d3 e0                	shl    eax,cl
  234bb1:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    if (ey == 0) {
  234bb4:	eb 16                	jmp    234bcc <generic_fmod+0x1ac>
    } else {
        uy &= @maxValue(uint) >> exp_bits;
  234bb6:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  234bb9:	25 ff ff 7f 00       	and    eax,0x7fffff
  234bbe:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
        uy |= 1 << digits;
  234bc1:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  234bc4:	0d 00 00 80 00       	or     eax,0x800000
  234bc9:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    }

    // x mod y
    while (ex > ey) : (ex -= 1) {
  234bcc:	eb 00                	jmp    234bce <generic_fmod+0x1ae>
  234bce:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  234bd1:	3b 45 e8             	cmp    eax,DWORD PTR [rbp-0x18]
  234bd4:	7e 49                	jle    234c1f <generic_fmod+0x1ff>
        i = ux -% uy;
  234bd6:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  234bd9:	2b 45 f0             	sub    eax,DWORD PTR [rbp-0x10]
  234bdc:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
        if (i >> bits_minus_1 == 0) {
  234bdf:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  234be2:	c1 e8 1f             	shr    eax,0x1f
  234be5:	83 f8 00             	cmp    eax,0x0
  234be8:	75 1f                	jne    234c09 <generic_fmod+0x1e9>
            if (i == 0)
  234bea:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
  234bee:	75 0f                	jne    234bff <generic_fmod+0x1df>
  234bf0:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
                return 0 * x;
  234bf4:	c5 fa 59 45 fc       	vmulss xmm0,xmm0,DWORD PTR [rbp-0x4]
  234bf9:	48 83 c4 30          	add    rsp,0x30
  234bfd:	5d                   	pop    rbp
  234bfe:	c3                   	ret    
            if (i == 0)
  234bff:	eb 00                	jmp    234c01 <generic_fmod+0x1e1>
            ux = i;
  234c01:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  234c04:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
        if (i >> bits_minus_1 == 0) {
  234c07:	eb 02                	jmp    234c0b <generic_fmod+0x1eb>
  234c09:	eb 00                	jmp    234c0b <generic_fmod+0x1eb>
        }
        ux <<= 1;
  234c0b:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  234c0e:	c1 e0 01             	shl    eax,0x1
  234c11:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    while (ex > ey) : (ex -= 1) {
  234c14:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  234c17:	83 e8 01             	sub    eax,0x1
  234c1a:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
  234c1d:	eb af                	jmp    234bce <generic_fmod+0x1ae>
    }
    i = ux -% uy;
  234c1f:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  234c22:	2b 45 f0             	sub    eax,DWORD PTR [rbp-0x10]
  234c25:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    if (i >> bits_minus_1 == 0) {
  234c28:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  234c2b:	c1 e8 1f             	shr    eax,0x1f
  234c2e:	83 f8 00             	cmp    eax,0x0
  234c31:	75 1f                	jne    234c52 <generic_fmod+0x232>
        if (i == 0)
  234c33:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
  234c37:	75 0f                	jne    234c48 <generic_fmod+0x228>
  234c39:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
            return 0 * x;
  234c3d:	c5 fa 59 45 fc       	vmulss xmm0,xmm0,DWORD PTR [rbp-0x4]
  234c42:	48 83 c4 30          	add    rsp,0x30
  234c46:	5d                   	pop    rbp
  234c47:	c3                   	ret    
        if (i == 0)
  234c48:	eb 00                	jmp    234c4a <generic_fmod+0x22a>
        ux = i;
  234c4a:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  234c4d:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    if (i >> bits_minus_1 == 0) {
  234c50:	eb 02                	jmp    234c54 <generic_fmod+0x234>
  234c52:	eb 00                	jmp    234c54 <generic_fmod+0x234>
    }
    while (ux >> digits == 0) : (b: {
  234c54:	eb 00                	jmp    234c56 <generic_fmod+0x236>
  234c56:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  234c59:	c1 e8 17             	shr    eax,0x17
  234c5c:	83 f8 00             	cmp    eax,0x0
  234c5f:	75 16                	jne    234c77 <generic_fmod+0x257>
  234c61:	eb 00                	jmp    234c63 <generic_fmod+0x243>
        ux <<= 1;
  234c63:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  234c66:	c1 e0 01             	shl    eax,0x1
  234c69:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
        ex -= 1;
  234c6c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  234c6f:	83 e8 01             	sub    eax,0x1
  234c72:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    while (ux >> digits == 0) : (b: {
  234c75:	eb df                	jmp    234c56 <generic_fmod+0x236>
    }) {}

    // scale result up
    if (ex > 0) {
  234c77:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
  234c7b:	7e 1b                	jle    234c98 <generic_fmod+0x278>
        ux -%= 1 << digits;
  234c7d:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  234c80:	2d 00 00 80 00       	sub    eax,0x800000
  234c85:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
        ux |= uint(@bitCast(u32, ex)) << digits;
  234c88:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  234c8b:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
  234c8e:	c1 e1 17             	shl    ecx,0x17
  234c91:	09 c8                	or     eax,ecx
  234c93:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    if (ex > 0) {
  234c96:	eb 17                	jmp    234caf <generic_fmod+0x28f>
    } else {
        ux >>= @intCast(log2uint, @bitCast(u32, -ex + 1));
  234c98:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  234c9b:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
  234c9e:	ba 01 00 00 00       	mov    edx,0x1
  234ca3:	29 ca                	sub    edx,ecx
  234ca5:	83 e2 1f             	and    edx,0x1f
  234ca8:	89 d1                	mov    ecx,edx
  234caa:	d3 e8                	shr    eax,cl
  234cac:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    }
    if (T == f32) {
        ux |= sx;
  234caf:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  234cb2:	0b 45 e4             	or     eax,DWORD PTR [rbp-0x1c]
  234cb5:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    } else {
        ux |= @intCast(uint, sx) << bits_minus_1;
    }
    return @bitCast(T, ux);
  234cb8:	c5 f9 6e 45 f4       	vmovd  xmm0,DWORD PTR [rbp-0xc]
  234cbd:	48 83 c4 30          	add    rsp,0x30
  234cc1:	5d                   	pop    rbp
  234cc2:	c3                   	ret    
  234cc3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  234cca:	84 00 00 00 00 00 

0000000000234cd0 <fmod>:
export fn fmod(x: f64, y: f64) f64 {
  234cd0:	55                   	push   rbp
  234cd1:	48 89 e5             	mov    rbp,rsp
  234cd4:	48 83 ec 10          	sub    rsp,0x10
  234cd8:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
  234cdd:	c5 fb 11 4d f0       	vmovsd QWORD PTR [rbp-0x10],xmm1
    return generic_fmod(f64, x, y);
  234ce2:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  234ce7:	c5 fb 10 4d f0       	vmovsd xmm1,QWORD PTR [rbp-0x10]
  234cec:	e8 0f 00 00 00       	call   234d00 <generic_fmod.1>
  234cf1:	48 83 c4 10          	add    rsp,0x10
  234cf5:	5d                   	pop    rbp
  234cf6:	c3                   	ret    
  234cf7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  234cfe:	00 00 

0000000000234d00 <generic_fmod.1>:
fn generic_fmod(comptime T: type, x: T, y: T) T {
  234d00:	55                   	push   rbp
  234d01:	48 89 e5             	mov    rbp,rsp
  234d04:	48 83 ec 40          	sub    rsp,0x40
  234d08:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
  234d0d:	c5 fb 11 4d f0       	vmovsd QWORD PTR [rbp-0x10],xmm1
    var ux = @bitCast(uint, x);
  234d12:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  234d17:	c4 e1 f9 7e c0       	vmovq  rax,xmm0
  234d1c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    var uy = @bitCast(uint, y);
  234d20:	c5 fb 10 45 f0       	vmovsd xmm0,QWORD PTR [rbp-0x10]
  234d25:	c4 e1 f9 7e c0       	vmovq  rax,xmm0
  234d2a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    var ex = @intCast(i32, (ux >> digits) & mask);
  234d2e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  234d32:	48 c1 e8 34          	shr    rax,0x34
  234d36:	48 25 ff 07 00 00    	and    rax,0x7ff
  234d3c:	89 c1                	mov    ecx,eax
  234d3e:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
    var ey = @intCast(i32, (uy >> digits) & mask);
  234d41:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  234d45:	48 c1 e8 34          	shr    rax,0x34
  234d49:	48 25 ff 07 00 00    	and    rax,0x7ff
  234d4f:	89 c1                	mov    ecx,eax
  234d51:	89 4d d8             	mov    DWORD PTR [rbp-0x28],ecx
    const sx = if (T == f32) @intCast(u32, ux & 0x80000000) else @intCast(i32, ux >> bits_minus_1);
  234d54:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  234d58:	48 c1 e8 3f          	shr    rax,0x3f
  234d5c:	89 c1                	mov    ecx,eax
  234d5e:	89 4d d4             	mov    DWORD PTR [rbp-0x2c],ecx
    if (uy << 1 == 0 or isNan(uint, uy) or ex == mask)
  234d61:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  234d65:	48 c1 e0 01          	shl    rax,0x1
  234d69:	48 83 f8 00          	cmp    rax,0x0
  234d6d:	0f 94 c2             	sete   dl
  234d70:	f6 c2 01             	test   dl,0x1
  234d73:	88 55 c7             	mov    BYTE PTR [rbp-0x39],dl
  234d76:	75 0c                	jne    234d84 <generic_fmod.1+0x84>
  234d78:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  234d7c:	e8 6f 12 00 00       	call   235ff0 <isNan.5>
  234d81:	88 45 c7             	mov    BYTE PTR [rbp-0x39],al
  234d84:	8a 45 c7             	mov    al,BYTE PTR [rbp-0x39]
  234d87:	a8 01                	test   al,0x1
  234d89:	88 45 c6             	mov    BYTE PTR [rbp-0x3a],al
  234d8c:	75 0d                	jne    234d9b <generic_fmod.1+0x9b>
  234d8e:	81 7d dc ff 07 00 00 	cmp    DWORD PTR [rbp-0x24],0x7ff
  234d95:	0f 94 c0             	sete   al
  234d98:	88 45 c6             	mov    BYTE PTR [rbp-0x3a],al
  234d9b:	8a 45 c6             	mov    al,BYTE PTR [rbp-0x3a]
  234d9e:	a8 01                	test   al,0x1
  234da0:	75 02                	jne    234da4 <generic_fmod.1+0xa4>
  234da2:	eb 1e                	jmp    234dc2 <generic_fmod.1+0xc2>
        return (x * y) / (x * y);
  234da4:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  234da9:	c5 fb 59 45 f0       	vmulsd xmm0,xmm0,QWORD PTR [rbp-0x10]
  234dae:	c5 fb 10 4d f8       	vmovsd xmm1,QWORD PTR [rbp-0x8]
  234db3:	c5 f3 59 4d f0       	vmulsd xmm1,xmm1,QWORD PTR [rbp-0x10]
  234db8:	c5 fb 5e c1          	vdivsd xmm0,xmm0,xmm1
  234dbc:	48 83 c4 40          	add    rsp,0x40
  234dc0:	5d                   	pop    rbp
  234dc1:	c3                   	ret    
    if (uy << 1 == 0 or isNan(uint, uy) or ex == mask)
  234dc2:	eb 00                	jmp    234dc4 <generic_fmod.1+0xc4>
    if (ux << 1 <= uy << 1) {
  234dc4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  234dc8:	48 c1 e0 01          	shl    rax,0x1
  234dcc:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  234dd0:	48 c1 e1 01          	shl    rcx,0x1
  234dd4:	48 39 c8             	cmp    rax,rcx
  234dd7:	77 31                	ja     234e0a <generic_fmod.1+0x10a>
        if (ux << 1 == uy << 1)
  234dd9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  234ddd:	48 c1 e0 01          	shl    rax,0x1
  234de1:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  234de5:	48 c1 e1 01          	shl    rcx,0x1
  234de9:	48 39 c8             	cmp    rax,rcx
  234dec:	75 0f                	jne    234dfd <generic_fmod.1+0xfd>
  234dee:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
            return 0 * x;
  234df2:	c5 fb 59 45 f8       	vmulsd xmm0,xmm0,QWORD PTR [rbp-0x8]
  234df7:	48 83 c4 40          	add    rsp,0x40
  234dfb:	5d                   	pop    rbp
  234dfc:	c3                   	ret    
        if (ux << 1 == uy << 1)
  234dfd:	eb 00                	jmp    234dff <generic_fmod.1+0xff>
        return x;
  234dff:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  234e04:	48 83 c4 40          	add    rsp,0x40
  234e08:	5d                   	pop    rbp
  234e09:	c3                   	ret    
    if (ux << 1 <= uy << 1) {
  234e0a:	eb 00                	jmp    234e0c <generic_fmod.1+0x10c>
    if (ex == 0) {
  234e0c:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
  234e10:	75 4f                	jne    234e61 <generic_fmod.1+0x161>
        i = ux << exp_bits;
  234e12:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  234e16:	48 c1 e0 0c          	shl    rax,0xc
  234e1a:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
        while (i >> bits_minus_1 == 0) : (b: {
  234e1e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  234e22:	48 c1 e8 3f          	shr    rax,0x3f
  234e26:	48 83 f8 00          	cmp    rax,0x0
  234e2a:	75 19                	jne    234e45 <generic_fmod.1+0x145>
  234e2c:	eb 00                	jmp    234e2e <generic_fmod.1+0x12e>
            ex -= 1;
  234e2e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  234e31:	83 e8 01             	sub    eax,0x1
  234e34:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
            i <<= 1;
  234e37:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  234e3b:	48 c1 e1 01          	shl    rcx,0x1
  234e3f:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
        while (i >> bits_minus_1 == 0) : (b: {
  234e43:	eb d9                	jmp    234e1e <generic_fmod.1+0x11e>
        ux <<= @intCast(log2uint, @bitCast(u32, -ex + 1));
  234e45:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  234e49:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  234e4c:	ba 01 00 00 00       	mov    edx,0x1
  234e51:	29 ca                	sub    edx,ecx
  234e53:	83 e2 3f             	and    edx,0x3f
  234e56:	89 d1                	mov    ecx,edx
  234e58:	48 d3 e0             	shl    rax,cl
  234e5b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    if (ex == 0) {
  234e5f:	eb 24                	jmp    234e85 <generic_fmod.1+0x185>
  234e61:	48 b8 00 00 00 00 00 	movabs rax,0x10000000000000
  234e68:	00 10 00 
  234e6b:	48 b9 ff ff ff ff ff 	movabs rcx,0xfffffffffffff
  234e72:	ff 0f 00 
        ux &= @maxValue(uint) >> exp_bits;
  234e75:	48 23 4d e8          	and    rcx,QWORD PTR [rbp-0x18]
  234e79:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
        ux |= 1 << digits;
  234e7d:	48 0b 45 e8          	or     rax,QWORD PTR [rbp-0x18]
  234e81:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    if (ey == 0) {
  234e85:	83 7d d8 00          	cmp    DWORD PTR [rbp-0x28],0x0
  234e89:	75 4f                	jne    234eda <generic_fmod.1+0x1da>
        i = uy << exp_bits;
  234e8b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  234e8f:	48 c1 e0 0c          	shl    rax,0xc
  234e93:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
        while (i >> bits_minus_1 == 0) : (b: {
  234e97:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  234e9b:	48 c1 e8 3f          	shr    rax,0x3f
  234e9f:	48 83 f8 00          	cmp    rax,0x0
  234ea3:	75 19                	jne    234ebe <generic_fmod.1+0x1be>
  234ea5:	eb 00                	jmp    234ea7 <generic_fmod.1+0x1a7>
            ey -= 1;
  234ea7:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  234eaa:	83 e8 01             	sub    eax,0x1
  234ead:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
            i <<= 1;
  234eb0:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  234eb4:	48 c1 e1 01          	shl    rcx,0x1
  234eb8:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
        while (i >> bits_minus_1 == 0) : (b: {
  234ebc:	eb d9                	jmp    234e97 <generic_fmod.1+0x197>
        uy <<= @intCast(log2uint, @bitCast(u32, -ey + 1));
  234ebe:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  234ec2:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
  234ec5:	ba 01 00 00 00       	mov    edx,0x1
  234eca:	29 ca                	sub    edx,ecx
  234ecc:	83 e2 3f             	and    edx,0x3f
  234ecf:	89 d1                	mov    ecx,edx
  234ed1:	48 d3 e0             	shl    rax,cl
  234ed4:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    if (ey == 0) {
  234ed8:	eb 24                	jmp    234efe <generic_fmod.1+0x1fe>
  234eda:	48 b8 00 00 00 00 00 	movabs rax,0x10000000000000
  234ee1:	00 10 00 
  234ee4:	48 b9 ff ff ff ff ff 	movabs rcx,0xfffffffffffff
  234eeb:	ff 0f 00 
        uy &= @maxValue(uint) >> exp_bits;
  234eee:	48 23 4d e0          	and    rcx,QWORD PTR [rbp-0x20]
  234ef2:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
        uy |= 1 << digits;
  234ef6:	48 0b 45 e0          	or     rax,QWORD PTR [rbp-0x20]
  234efa:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    while (ex > ey) : (ex -= 1) {
  234efe:	eb 00                	jmp    234f00 <generic_fmod.1+0x200>
  234f00:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  234f03:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
  234f06:	7e 55                	jle    234f5d <generic_fmod.1+0x25d>
        i = ux -% uy;
  234f08:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  234f0c:	48 2b 45 e0          	sub    rax,QWORD PTR [rbp-0x20]
  234f10:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
        if (i >> bits_minus_1 == 0) {
  234f14:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  234f18:	48 c1 e8 3f          	shr    rax,0x3f
  234f1c:	48 83 f8 00          	cmp    rax,0x0
  234f20:	75 22                	jne    234f44 <generic_fmod.1+0x244>
            if (i == 0)
  234f22:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
  234f27:	75 0f                	jne    234f38 <generic_fmod.1+0x238>
  234f29:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
                return 0 * x;
  234f2d:	c5 fb 59 45 f8       	vmulsd xmm0,xmm0,QWORD PTR [rbp-0x8]
  234f32:	48 83 c4 40          	add    rsp,0x40
  234f36:	5d                   	pop    rbp
  234f37:	c3                   	ret    
            if (i == 0)
  234f38:	eb 00                	jmp    234f3a <generic_fmod.1+0x23a>
            ux = i;
  234f3a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  234f3e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
        if (i >> bits_minus_1 == 0) {
  234f42:	eb 02                	jmp    234f46 <generic_fmod.1+0x246>
  234f44:	eb 00                	jmp    234f46 <generic_fmod.1+0x246>
        ux <<= 1;
  234f46:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  234f4a:	48 c1 e0 01          	shl    rax,0x1
  234f4e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    while (ex > ey) : (ex -= 1) {
  234f52:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  234f55:	83 e9 01             	sub    ecx,0x1
  234f58:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
  234f5b:	eb a3                	jmp    234f00 <generic_fmod.1+0x200>
    i = ux -% uy;
  234f5d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  234f61:	48 2b 45 e0          	sub    rax,QWORD PTR [rbp-0x20]
  234f65:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
    if (i >> bits_minus_1 == 0) {
  234f69:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  234f6d:	48 c1 e8 3f          	shr    rax,0x3f
  234f71:	48 83 f8 00          	cmp    rax,0x0
  234f75:	75 22                	jne    234f99 <generic_fmod.1+0x299>
        if (i == 0)
  234f77:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
  234f7c:	75 0f                	jne    234f8d <generic_fmod.1+0x28d>
  234f7e:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
            return 0 * x;
  234f82:	c5 fb 59 45 f8       	vmulsd xmm0,xmm0,QWORD PTR [rbp-0x8]
  234f87:	48 83 c4 40          	add    rsp,0x40
  234f8b:	5d                   	pop    rbp
  234f8c:	c3                   	ret    
        if (i == 0)
  234f8d:	eb 00                	jmp    234f8f <generic_fmod.1+0x28f>
        ux = i;
  234f8f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  234f93:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    if (i >> bits_minus_1 == 0) {
  234f97:	eb 02                	jmp    234f9b <generic_fmod.1+0x29b>
  234f99:	eb 00                	jmp    234f9b <generic_fmod.1+0x29b>
    while (ux >> digits == 0) : (b: {
  234f9b:	eb 00                	jmp    234f9d <generic_fmod.1+0x29d>
  234f9d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  234fa1:	48 c1 e8 34          	shr    rax,0x34
  234fa5:	48 83 f8 00          	cmp    rax,0x0
  234fa9:	75 19                	jne    234fc4 <generic_fmod.1+0x2c4>
  234fab:	eb 00                	jmp    234fad <generic_fmod.1+0x2ad>
        ux <<= 1;
  234fad:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  234fb1:	48 c1 e0 01          	shl    rax,0x1
  234fb5:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
        ex -= 1;
  234fb9:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  234fbc:	83 e9 01             	sub    ecx,0x1
  234fbf:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
    while (ux >> digits == 0) : (b: {
  234fc2:	eb d9                	jmp    234f9d <generic_fmod.1+0x29d>
    if (ex > 0) {
  234fc4:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
  234fc8:	7e 2b                	jle    234ff5 <generic_fmod.1+0x2f5>
  234fca:	48 b8 00 00 00 00 00 	movabs rax,0x10000000000000
  234fd1:	00 10 00 
        ux -%= 1 << digits;
  234fd4:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  234fd8:	48 29 c1             	sub    rcx,rax
  234fdb:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
        ux |= uint(@bitCast(u32, ex)) << digits;
  234fdf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  234fe3:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  234fe6:	89 d1                	mov    ecx,edx
  234fe8:	48 c1 e1 34          	shl    rcx,0x34
  234fec:	48 09 c8             	or     rax,rcx
  234fef:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    if (ex > 0) {
  234ff3:	eb 1a                	jmp    23500f <generic_fmod.1+0x30f>
        ux >>= @intCast(log2uint, @bitCast(u32, -ex + 1));
  234ff5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  234ff9:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  234ffc:	ba 01 00 00 00       	mov    edx,0x1
  235001:	29 ca                	sub    edx,ecx
  235003:	83 e2 3f             	and    edx,0x3f
  235006:	89 d1                	mov    ecx,edx
  235008:	48 d3 e8             	shr    rax,cl
  23500b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
        ux |= @intCast(uint, sx) << bits_minus_1;
  23500f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  235013:	48 63 4d d4          	movsxd rcx,DWORD PTR [rbp-0x2c]
  235017:	48 c1 e1 3f          	shl    rcx,0x3f
  23501b:	48 09 c8             	or     rax,rcx
  23501e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    return @bitCast(T, ux);
  235022:	c5 fa 7e 45 e8       	vmovq  xmm0,QWORD PTR [rbp-0x18]
  235027:	48 83 c4 40          	add    rsp,0x40
  23502b:	5d                   	pop    rbp
  23502c:	c3                   	ret    
  23502d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000235030 <floorf>:
export fn floorf(x: f32) f32 {
  235030:	55                   	push   rbp
  235031:	48 89 e5             	mov    rbp,rsp
  235034:	48 83 ec 10          	sub    rsp,0x10
  235038:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
    return math.floor(x);
  23503d:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  235042:	e8 09 00 00 00       	call   235050 <floor.0>
  235047:	48 83 c4 10          	add    rsp,0x10
  23504b:	5d                   	pop    rbp
  23504c:	c3                   	ret    
  23504d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000235050 <floor.0>:
pub fn floor(x: var) @typeOf(x) {
  235050:	55                   	push   rbp
  235051:	48 89 e5             	mov    rbp,rsp
  235054:	48 83 ec 10          	sub    rsp,0x10
  235058:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
        f32 => floor32(x),
  23505d:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  235062:	e8 b9 0f 00 00       	call   236020 <floor32>
    return switch (T) {
  235067:	48 83 c4 10          	add    rsp,0x10
  23506b:	5d                   	pop    rbp
  23506c:	c3                   	ret    
  23506d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000235070 <ceilf>:
export fn ceilf(x: f32) f32 {
  235070:	55                   	push   rbp
  235071:	48 89 e5             	mov    rbp,rsp
  235074:	48 83 ec 10          	sub    rsp,0x10
  235078:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
    return math.ceil(x);
  23507d:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  235082:	e8 09 00 00 00       	call   235090 <ceil.0>
  235087:	48 83 c4 10          	add    rsp,0x10
  23508b:	5d                   	pop    rbp
  23508c:	c3                   	ret    
  23508d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000235090 <ceil.0>:
const builtin = @import("builtin");
const std = @import("../index.zig");
const math = std.math;
const assert = std.debug.assert;

pub fn ceil(x: var) @typeOf(x) {
  235090:	55                   	push   rbp
  235091:	48 89 e5             	mov    rbp,rsp
  235094:	48 83 ec 10          	sub    rsp,0x10
  235098:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
    const T = @typeOf(x);
    return switch (T) {
        f32 => ceil32(x),
  23509d:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  2350a2:	e8 59 11 00 00       	call   236200 <ceil32>
    return switch (T) {
  2350a7:	48 83 c4 10          	add    rsp,0x10
  2350ab:	5d                   	pop    rbp
  2350ac:	c3                   	ret    
  2350ad:	0f 1f 00             	nop    DWORD PTR [rax]

00000000002350b0 <floor>:
export fn floor(x: f64) f64 {
  2350b0:	55                   	push   rbp
  2350b1:	48 89 e5             	mov    rbp,rsp
  2350b4:	48 83 ec 10          	sub    rsp,0x10
  2350b8:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    return math.floor(x);
  2350bd:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  2350c2:	e8 09 00 00 00       	call   2350d0 <floor.0.2>
  2350c7:	48 83 c4 10          	add    rsp,0x10
  2350cb:	5d                   	pop    rbp
  2350cc:	c3                   	ret    
  2350cd:	0f 1f 00             	nop    DWORD PTR [rax]

00000000002350d0 <floor.0.2>:
pub fn floor(x: var) @typeOf(x) {
  2350d0:	55                   	push   rbp
  2350d1:	48 89 e5             	mov    rbp,rsp
  2350d4:	48 83 ec 10          	sub    rsp,0x10
  2350d8:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
        f64 => floor64(x),
  2350dd:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  2350e2:	e8 f9 12 00 00       	call   2363e0 <floor64>
    return switch (T) {
  2350e7:	48 83 c4 10          	add    rsp,0x10
  2350eb:	5d                   	pop    rbp
  2350ec:	c3                   	ret    
  2350ed:	0f 1f 00             	nop    DWORD PTR [rax]

00000000002350f0 <ceil>:
export fn ceil(x: f64) f64 {
  2350f0:	55                   	push   rbp
  2350f1:	48 89 e5             	mov    rbp,rsp
  2350f4:	48 83 ec 10          	sub    rsp,0x10
  2350f8:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    return math.ceil(x);
  2350fd:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  235102:	e8 09 00 00 00       	call   235110 <ceil.0.3>
  235107:	48 83 c4 10          	add    rsp,0x10
  23510b:	5d                   	pop    rbp
  23510c:	c3                   	ret    
  23510d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000235110 <ceil.0.3>:
pub fn ceil(x: var) @typeOf(x) {
  235110:	55                   	push   rbp
  235111:	48 89 e5             	mov    rbp,rsp
  235114:	48 83 ec 10          	sub    rsp,0x10
  235118:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
        f64 => ceil64(x),
  23511d:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  235122:	e8 09 14 00 00       	call   236530 <ceil64>
    return switch (T) {
  235127:	48 83 c4 10          	add    rsp,0x10
  23512b:	5d                   	pop    rbp
  23512c:	c3                   	ret    
  23512d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000235130 <sqrt>:
}

// NOTE: The original code is full of implicit signed -> unsigned assumptions and u32 wraparound
// behaviour. Most intermediate i32 values are changed to u32 where appropriate but there are
// potentially some edge cases remaining that are not handled in the same way.
export fn sqrt(x: f64) f64 {
  235130:	55                   	push   rbp
  235131:	48 89 e5             	mov    rbp,rsp
  235134:	48 81 ec 60 01 00 00 	sub    rsp,0x160
  23513b:	c5 fb 10 0d 7d bb fc 	vmovsd xmm1,QWORD PTR [rip+0xfffffffffffcbb7d]        # 200cc0 <__unnamed_181+0x8>
  235142:	ff 
  235143:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    const tiny: f64 = 1.0e-300;
  235148:	c5 fb 11 4d f0       	vmovsd QWORD PTR [rbp-0x10],xmm1
    const sign: u32 = 0x80000000;
  23514d:	c7 45 ec 00 00 00 80 	mov    DWORD PTR [rbp-0x14],0x80000000
    const u = @bitCast(u64, x);
  235154:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  235159:	c4 e1 f9 7e c0       	vmovq  rax,xmm0
  23515e:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax

    var ix0 = @intCast(u32, u >> 32);
  235162:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  235166:	48 c1 e8 20          	shr    rax,0x20
  23516a:	89 c1                	mov    ecx,eax
  23516c:	89 ca                	mov    edx,ecx
  23516e:	89 d6                	mov    esi,edx
  235170:	48 39 f0             	cmp    rax,rsi
  235173:	89 4d 94             	mov    DWORD PTR [rbp-0x6c],ecx
  235176:	0f 84 a1 04 00 00    	je     23561d <sqrt+0x4ed>
  23517c:	e9 c0 04 00 00       	jmp    235641 <sqrt+0x511>
    var ix1 = @intCast(u32, u & 0xFFFFFFFF);

    // sqrt(nan) = nan, sqrt(+inf) = +inf, sqrt(-inf) = nan
    if (ix0 & 0x7FF00000 == 0x7FF00000) {
        return x * x + x;
  235181:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  235186:	c5 fb 59 45 f8       	vmulsd xmm0,xmm0,QWORD PTR [rbp-0x8]
  23518b:	c5 fb 58 45 f8       	vaddsd xmm0,xmm0,QWORD PTR [rbp-0x8]
  235190:	48 81 c4 60 01 00 00 	add    rsp,0x160
  235197:	5d                   	pop    rbp
  235198:	c3                   	ret    
    if (ix0 & 0x7FF00000 == 0x7FF00000) {
  235199:	eb 00                	jmp    23519b <sqrt+0x6b>
  23519b:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
    }

    // sqrt(+-0) = +-0
    if (x == 0.0) {
  23519f:	c5 fb 10 4d f8       	vmovsd xmm1,QWORD PTR [rbp-0x8]
  2351a4:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  2351a8:	75 10                	jne    2351ba <sqrt+0x8a>
  2351aa:	7a 0e                	jp     2351ba <sqrt+0x8a>
        return x;
  2351ac:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  2351b1:	48 81 c4 60 01 00 00 	add    rsp,0x160
  2351b8:	5d                   	pop    rbp
  2351b9:	c3                   	ret    
    if (x == 0.0) {
  2351ba:	eb 00                	jmp    2351bc <sqrt+0x8c>
    }
    // sqrt(-ve) = snan
    if (ix0 & sign != 0) {
  2351bc:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  2351bf:	25 00 00 00 80       	and    eax,0x80000000
  2351c4:	83 f8 00             	cmp    eax,0x0
  2351c7:	74 0e                	je     2351d7 <sqrt+0xa7>
        return math.snan(f64);
  2351c9:	e8 42 09 00 00       	call   235b10 <snan>
  2351ce:	48 81 c4 60 01 00 00 	add    rsp,0x160
  2351d5:	5d                   	pop    rbp
  2351d6:	c3                   	ret    
    if (ix0 & sign != 0) {
  2351d7:	eb 00                	jmp    2351d9 <sqrt+0xa9>
    }

    // normalize x
    var m = @intCast(i32, ix0 >> 20);
  2351d9:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  2351dc:	c1 e8 14             	shr    eax,0x14
  2351df:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
    if (m == 0) {
  2351e2:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
  2351e6:	75 7e                	jne    235266 <sqrt+0x136>
        // subnormal
        while (ix0 == 0) {
  2351e8:	eb 00                	jmp    2351ea <sqrt+0xba>
  2351ea:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
  2351ee:	75 1a                	jne    23520a <sqrt+0xda>
            m -= 21;
  2351f0:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
  2351f3:	83 e8 15             	sub    eax,0x15
  2351f6:	0f 90 c1             	seto   cl
  2351f9:	89 45 90             	mov    DWORD PTR [rbp-0x70],eax
  2351fc:	88 4d 8f             	mov    BYTE PTR [rbp-0x71],cl
  2351ff:	0f 80 7f 04 00 00    	jo     235684 <sqrt+0x554>
  235205:	e9 8a 04 00 00       	jmp    235694 <sqrt+0x564>
            ix0 |= ix1 >> 11;
            ix1 <<= 21;
        }

        // subnormal
        var i: u32 = 0;
  23520a:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
        while (ix0 & 0x00100000 == 0) : (i += 1) {
  235211:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  235214:	25 00 00 10 00       	and    eax,0x100000
  235219:	83 f8 00             	cmp    eax,0x0
  23521c:	75 23                	jne    235241 <sqrt+0x111>
            ix0 <<= 1;
  23521e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  235221:	c1 e0 01             	shl    eax,0x1
  235224:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
        while (ix0 & 0x00100000 == 0) : (i += 1) {
  235227:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
  23522a:	83 c0 01             	add    eax,0x1
  23522d:	0f 92 c1             	setb   cl
  235230:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
  235233:	88 4d 87             	mov    BYTE PTR [rbp-0x79],cl
  235236:	0f 82 7a 04 00 00    	jb     2356b6 <sqrt+0x586>
  23523c:	e9 85 04 00 00       	jmp    2356c6 <sqrt+0x596>
        }
        m -= @intCast(i32, i) - 1;
  235241:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
  235244:	8b 4d d0             	mov    ecx,DWORD PTR [rbp-0x30]
  235247:	ff c9                	dec    ecx
  235249:	0f 90 c2             	seto   dl
  23524c:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
  23524f:	89 8d 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],ecx
  235255:	88 95 7b ff ff ff    	mov    BYTE PTR [rbp-0x85],dl
  23525b:	0f 80 70 04 00 00    	jo     2356d1 <sqrt+0x5a1>
  235261:	e9 7b 04 00 00       	jmp    2356e1 <sqrt+0x5b1>
    if (m == 0) {
  235266:	eb 00                	jmp    235268 <sqrt+0x138>
        ix0 |= ix1 >> @intCast(u5, 32 - i);
        ix1 <<= @intCast(u5, i);
    }

    // unbias exponent
    m -= 1023;
  235268:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
  23526b:	2d ff 03 00 00       	sub    eax,0x3ff
  235270:	0f 90 c1             	seto   cl
  235273:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
  235279:	88 8d 73 ff ff ff    	mov    BYTE PTR [rbp-0x8d],cl
  23527f:	0f 80 6a 05 00 00    	jo     2357ef <sqrt+0x6bf>
  235285:	e9 75 05 00 00       	jmp    2357ff <sqrt+0x6cf>
    ix0 = (ix0 & 0x000FFFFF) | 0x00100000;
    if (m & 1 != 0) {
        ix0 += ix0 + (ix1 >> 31);
  23528a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  23528d:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  235290:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
  235293:	c1 ea 1f             	shr    edx,0x1f
  235296:	01 d1                	add    ecx,edx
  235298:	40 0f 92 c6          	setb   sil
  23529c:	89 85 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],eax
  2352a2:	89 8d 68 ff ff ff    	mov    DWORD PTR [rbp-0x98],ecx
  2352a8:	40 88 b5 67 ff ff ff 	mov    BYTE PTR [rbp-0x99],sil
  2352af:	0f 82 79 05 00 00    	jb     23582e <sqrt+0x6fe>
  2352b5:	e9 84 05 00 00       	jmp    23583e <sqrt+0x70e>
    if (m & 1 != 0) {
  2352ba:	eb 00                	jmp    2352bc <sqrt+0x18c>
        ix1 = ix1 +% ix1;
    }
    m >>= 1;
  2352bc:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
  2352bf:	c1 f8 01             	sar    eax,0x1
  2352c2:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax

    // sqrt(x) bit by bit
    ix0 += ix0 + (ix1 >> 31);
  2352c5:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  2352c8:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  2352cb:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
  2352ce:	c1 ea 1f             	shr    edx,0x1f
  2352d1:	01 d1                	add    ecx,edx
  2352d3:	40 0f 92 c6          	setb   sil
  2352d7:	89 85 60 ff ff ff    	mov    DWORD PTR [rbp-0xa0],eax
  2352dd:	89 8d 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],ecx
  2352e3:	40 88 b5 5b ff ff ff 	mov    BYTE PTR [rbp-0xa5],sil
  2352ea:	0f 82 96 05 00 00    	jb     235886 <sqrt+0x756>
  2352f0:	e9 a1 05 00 00       	jmp    235896 <sqrt+0x766>
    var s1: u32 = 0;
    var r: u32 = 0x00200000;
    var t: u32 = undefined;
    var t1: u32 = undefined;

    while (r != 0) {
  2352f5:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
  2352f9:	74 58                	je     235353 <sqrt+0x223>
        t = s0 +% r;
  2352fb:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
  2352fe:	03 45 bc             	add    eax,DWORD PTR [rbp-0x44]
  235301:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
        if (t <= ix0) {
  235304:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
  235307:	3b 45 dc             	cmp    eax,DWORD PTR [rbp-0x24]
  23530a:	77 20                	ja     23532c <sqrt+0x1fc>
            s0 = t + r;
  23530c:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
  23530f:	03 45 bc             	add    eax,DWORD PTR [rbp-0x44]
  235312:	0f 92 c1             	setb   cl
  235315:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
  23531b:	88 8d 53 ff ff ff    	mov    BYTE PTR [rbp-0xad],cl
  235321:	0f 82 28 06 00 00    	jb     23594f <sqrt+0x81f>
  235327:	e9 33 06 00 00       	jmp    23595f <sqrt+0x82f>
        if (t <= ix0) {
  23532c:	eb 00                	jmp    23532e <sqrt+0x1fe>
            ix0 -= t;
            q += r;
        }
        ix0 = ix0 +% ix0 +% (ix1 >> 31);
  23532e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  235331:	03 45 dc             	add    eax,DWORD PTR [rbp-0x24]
  235334:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
  235337:	c1 e9 1f             	shr    ecx,0x1f
  23533a:	01 c8                	add    eax,ecx
  23533c:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
        ix1 = ix1 +% ix1;
  23533f:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  235342:	03 45 d8             	add    eax,DWORD PTR [rbp-0x28]
  235345:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
        r >>= 1;
  235348:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  23534b:	c1 e8 01             	shr    eax,0x1
  23534e:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
    while (r != 0) {
  235351:	eb a2                	jmp    2352f5 <sqrt+0x1c5>
    }

    r = sign;
  235353:	c7 45 bc 00 00 00 80 	mov    DWORD PTR [rbp-0x44],0x80000000
    while (r != 0) {
  23535a:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
  23535e:	0f 84 60 01 00 00    	je     2354c4 <sqrt+0x394>
        t = s1 +% r;
  235364:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
  235367:	03 45 bc             	add    eax,DWORD PTR [rbp-0x44]
  23536a:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
        t = s0;
  23536d:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
  235370:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
        if (t < ix0 or (t == ix0 and t1 <= ix1)) {
  235373:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
  235376:	3b 45 dc             	cmp    eax,DWORD PTR [rbp-0x24]
  235379:	0f 92 c1             	setb   cl
  23537c:	f6 c1 01             	test   cl,0x1
  23537f:	88 8d 52 ff ff ff    	mov    BYTE PTR [rbp-0xae],cl
  235385:	75 31                	jne    2353b8 <sqrt+0x288>
  235387:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
  23538a:	3b 45 dc             	cmp    eax,DWORD PTR [rbp-0x24]
  23538d:	0f 94 c1             	sete   cl
  235390:	f6 c1 01             	test   cl,0x1
  235393:	88 8d 51 ff ff ff    	mov    BYTE PTR [rbp-0xaf],cl
  235399:	75 02                	jne    23539d <sqrt+0x26d>
  23539b:	eb 0f                	jmp    2353ac <sqrt+0x27c>
  23539d:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
  2353a0:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
  2353a3:	0f 96 c1             	setbe  cl
  2353a6:	88 8d 51 ff ff ff    	mov    BYTE PTR [rbp-0xaf],cl
  2353ac:	8a 85 51 ff ff ff    	mov    al,BYTE PTR [rbp-0xaf]
  2353b2:	88 85 52 ff ff ff    	mov    BYTE PTR [rbp-0xae],al
  2353b8:	8a 85 52 ff ff ff    	mov    al,BYTE PTR [rbp-0xae]
  2353be:	a8 01                	test   al,0x1
  2353c0:	75 05                	jne    2353c7 <sqrt+0x297>
  2353c2:	e9 d3 00 00 00       	jmp    23549a <sqrt+0x36a>
            s1 = t1 +% r;
  2353c7:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
  2353ca:	03 45 bc             	add    eax,DWORD PTR [rbp-0x44]
  2353cd:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
            if (t1 & sign == sign and s1 & sign == 0) {
  2353d0:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
  2353d3:	25 00 00 00 80       	and    eax,0x80000000
  2353d8:	3d 00 00 00 80       	cmp    eax,0x80000000
  2353dd:	0f 94 c1             	sete   cl
  2353e0:	f6 c1 01             	test   cl,0x1
  2353e3:	88 8d 50 ff ff ff    	mov    BYTE PTR [rbp-0xb0],cl
  2353e9:	75 02                	jne    2353ed <sqrt+0x2bd>
  2353eb:	eb 14                	jmp    235401 <sqrt+0x2d1>
  2353ed:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
  2353f0:	25 00 00 00 80       	and    eax,0x80000000
  2353f5:	83 f8 00             	cmp    eax,0x0
  2353f8:	0f 94 c1             	sete   cl
  2353fb:	88 8d 50 ff ff ff    	mov    BYTE PTR [rbp-0xb0],cl
  235401:	8a 85 50 ff ff ff    	mov    al,BYTE PTR [rbp-0xb0]
  235407:	a8 01                	test   al,0x1
  235409:	75 02                	jne    23540d <sqrt+0x2dd>
  23540b:	eb 20                	jmp    23542d <sqrt+0x2fd>
                s0 += 1;
  23540d:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
  235410:	83 c0 01             	add    eax,0x1
  235413:	0f 92 c1             	setb   cl
  235416:	89 85 4c ff ff ff    	mov    DWORD PTR [rbp-0xb4],eax
  23541c:	88 8d 4b ff ff ff    	mov    BYTE PTR [rbp-0xb5],cl
  235422:	0f 82 a9 05 00 00    	jb     2359d1 <sqrt+0x8a1>
  235428:	e9 b4 05 00 00       	jmp    2359e1 <sqrt+0x8b1>
            if (t1 & sign == sign and s1 & sign == 0) {
  23542d:	eb 00                	jmp    23542f <sqrt+0x2ff>
            }
            ix0 -= t;
  23542f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  235432:	2b 45 b8             	sub    eax,DWORD PTR [rbp-0x48]
  235435:	0f 92 c1             	setb   cl
  235438:	89 85 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],eax
  23543e:	88 8d 43 ff ff ff    	mov    BYTE PTR [rbp-0xbd],cl
  235444:	0f 82 a5 05 00 00    	jb     2359ef <sqrt+0x8bf>
  23544a:	e9 b0 05 00 00       	jmp    2359ff <sqrt+0x8cf>
            if (ix1 < t1) {
                ix0 -= 1;
  23544f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  235452:	83 e8 01             	sub    eax,0x1
  235455:	0f 92 c1             	setb   cl
  235458:	89 85 3c ff ff ff    	mov    DWORD PTR [rbp-0xc4],eax
  23545e:	88 8d 3b ff ff ff    	mov    BYTE PTR [rbp-0xc5],cl
  235464:	0f 82 af 05 00 00    	jb     235a19 <sqrt+0x8e9>
  23546a:	e9 ba 05 00 00       	jmp    235a29 <sqrt+0x8f9>
            if (ix1 < t1) {
  23546f:	eb 00                	jmp    235471 <sqrt+0x341>
            }
            ix1 = ix1 -% t1;
  235471:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  235474:	2b 45 b4             	sub    eax,DWORD PTR [rbp-0x4c]
  235477:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
            q1 += r;
  23547a:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  23547d:	03 45 bc             	add    eax,DWORD PTR [rbp-0x44]
  235480:	0f 92 c1             	setb   cl
  235483:	89 85 34 ff ff ff    	mov    DWORD PTR [rbp-0xcc],eax
  235489:	88 8d 33 ff ff ff    	mov    BYTE PTR [rbp-0xcd],cl
  23548f:	0f 82 a2 05 00 00    	jb     235a37 <sqrt+0x907>
  235495:	e9 ad 05 00 00       	jmp    235a47 <sqrt+0x917>
        if (t < ix0 or (t == ix0 and t1 <= ix1)) {
  23549a:	eb 00                	jmp    23549c <sqrt+0x36c>
        }
        ix0 = ix0 +% ix0 +% (ix1 >> 31);
  23549c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  23549f:	03 45 dc             	add    eax,DWORD PTR [rbp-0x24]
  2354a2:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
  2354a5:	c1 e9 1f             	shr    ecx,0x1f
  2354a8:	01 c8                	add    eax,ecx
  2354aa:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
        ix1 = ix1 +% ix1;
  2354ad:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  2354b0:	03 45 d8             	add    eax,DWORD PTR [rbp-0x28]
  2354b3:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
        r >>= 1;
  2354b6:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  2354b9:	c1 e8 01             	shr    eax,0x1
  2354bc:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
    while (r != 0) {
  2354bf:	e9 96 fe ff ff       	jmp    23535a <sqrt+0x22a>
    }

    // rounding direction
    if (ix0 | ix1 != 0) {
  2354c4:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  2354c7:	0b 45 d8             	or     eax,DWORD PTR [rbp-0x28]
  2354ca:	83 f8 00             	cmp    eax,0x0
  2354cd:	0f 84 de 00 00 00    	je     2355b1 <sqrt+0x481>
  2354d3:	c5 fb 10 05 1d b7 fc 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffcb71d]        # 200bf8 <__unnamed_187+0x8>
  2354da:	ff 
        var z = 1.0 - tiny; // raise inexact
  2354db:	c5 fb 11 45 a8       	vmovsd QWORD PTR [rbp-0x58],xmm0
        if (z >= 1.0) {
  2354e0:	c5 fb 10 4d a8       	vmovsd xmm1,QWORD PTR [rbp-0x58]
  2354e5:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  2354e9:	0f 82 be 00 00 00    	jb     2355ad <sqrt+0x47d>
  2354ef:	c5 fb 10 05 01 b7 fc 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffcb701]        # 200bf8 <__unnamed_187+0x8>
  2354f6:	ff 
            z = 1.0 + tiny;
  2354f7:	c5 fb 11 45 a8       	vmovsd QWORD PTR [rbp-0x58],xmm0
            if (q1 == 0xFFFFFFFF) {
  2354fc:	83 7d c8 ff          	cmp    DWORD PTR [rbp-0x38],0xffffffff
  235500:	75 27                	jne    235529 <sqrt+0x3f9>
                q1 = 0;
  235502:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [rbp-0x38],0x0
                q += 1;
  235509:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  23550c:	83 c0 01             	add    eax,0x1
  23550f:	0f 92 c1             	setb   cl
  235512:	89 85 2c ff ff ff    	mov    DWORD PTR [rbp-0xd4],eax
  235518:	88 8d 2b ff ff ff    	mov    BYTE PTR [rbp-0xd5],cl
  23551e:	0f 82 31 05 00 00    	jb     235a55 <sqrt+0x925>
  235524:	e9 3c 05 00 00       	jmp    235a65 <sqrt+0x935>
  235529:	c5 fb 10 05 c7 b6 fc 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffcb6c7]        # 200bf8 <__unnamed_187+0x8>
  235530:	ff 
            } else if (z > 1.0) {
  235531:	c5 fb 10 4d a8       	vmovsd xmm1,QWORD PTR [rbp-0x58]
  235536:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  23553a:	76 48                	jbe    235584 <sqrt+0x454>
                if (q1 == 0xFFFFFFFE) {
  23553c:	83 7d c8 fe          	cmp    DWORD PTR [rbp-0x38],0xfffffffe
  235540:	75 20                	jne    235562 <sqrt+0x432>
                    q += 1;
  235542:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  235545:	83 c0 01             	add    eax,0x1
  235548:	0f 92 c1             	setb   cl
  23554b:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
  235551:	88 8d 23 ff ff ff    	mov    BYTE PTR [rbp-0xdd],cl
  235557:	0f 82 16 05 00 00    	jb     235a73 <sqrt+0x943>
  23555d:	e9 21 05 00 00       	jmp    235a83 <sqrt+0x953>
                if (q1 == 0xFFFFFFFE) {
  235562:	eb 00                	jmp    235564 <sqrt+0x434>
                }
                q1 += 2;
  235564:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  235567:	83 c0 02             	add    eax,0x2
  23556a:	0f 92 c1             	setb   cl
  23556d:	89 85 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],eax
  235573:	88 8d 1b ff ff ff    	mov    BYTE PTR [rbp-0xe5],cl
  235579:	0f 82 12 05 00 00    	jb     235a91 <sqrt+0x961>
  23557f:	e9 1d 05 00 00       	jmp    235aa1 <sqrt+0x971>
            } else {
                q1 += q1 & 1;
  235584:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  235587:	8b 4d c8             	mov    ecx,DWORD PTR [rbp-0x38]
  23558a:	83 e1 01             	and    ecx,0x1
  23558d:	01 c8                	add    eax,ecx
  23558f:	0f 92 c2             	setb   dl
  235592:	89 85 14 ff ff ff    	mov    DWORD PTR [rbp-0xec],eax
  235598:	88 95 13 ff ff ff    	mov    BYTE PTR [rbp-0xed],dl
  23559e:	0f 82 0b 05 00 00    	jb     235aaf <sqrt+0x97f>
  2355a4:	e9 16 05 00 00       	jmp    235abf <sqrt+0x98f>
            if (q1 == 0xFFFFFFFF) {
  2355a9:	eb 00                	jmp    2355ab <sqrt+0x47b>
        if (z >= 1.0) {
  2355ab:	eb 02                	jmp    2355af <sqrt+0x47f>
  2355ad:	eb 00                	jmp    2355af <sqrt+0x47f>
    if (ix0 | ix1 != 0) {
  2355af:	eb 02                	jmp    2355b3 <sqrt+0x483>
  2355b1:	eb 00                	jmp    2355b3 <sqrt+0x483>
            }
        }
    }

    ix0 = (q >> 1) + 0x3FE00000;
  2355b3:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  2355b6:	c1 e8 01             	shr    eax,0x1
  2355b9:	05 00 00 e0 3f       	add    eax,0x3fe00000
  2355be:	0f 92 c1             	setb   cl
  2355c1:	89 85 0c ff ff ff    	mov    DWORD PTR [rbp-0xf4],eax
  2355c7:	88 8d 0b ff ff ff    	mov    BYTE PTR [rbp-0xf5],cl
  2355cd:	0f 82 fa 04 00 00    	jb     235acd <sqrt+0x99d>
  2355d3:	e9 05 05 00 00       	jmp    235add <sqrt+0x9ad>
    ix1 = q1 >> 1;
    if (q & 1 != 0) {
        ix1 |= 0x80000000;
  2355d8:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  2355db:	0d 00 00 00 80       	or     eax,0x80000000
  2355e0:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
    if (q & 1 != 0) {
  2355e3:	eb 02                	jmp    2355e7 <sqrt+0x4b7>
  2355e5:	eb 00                	jmp    2355e7 <sqrt+0x4b7>
    }

    // NOTE: musl here appears to rely on signed twos-complement wraparound. +% has the same
    // behaviour at least.
    var iix0 = @intCast(i32, ix0);
  2355e7:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  2355ea:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
    iix0 = iix0 +% (m << 20);
  2355ed:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
  2355f0:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
  2355f3:	c1 e1 14             	shl    ecx,0x14
  2355f6:	01 c8                	add    eax,ecx
  2355f8:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax

    const uz = (@intCast(u64, iix0) << 32) | ix1;
  2355fb:	48 63 55 a4          	movsxd rdx,DWORD PTR [rbp-0x5c]
  2355ff:	48 c1 e2 20          	shl    rdx,0x20
  235603:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  235606:	89 c6                	mov    esi,eax
  235608:	48 09 f2             	or     rdx,rsi
  23560b:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
    return @bitCast(f64, uz);
  23560f:	c5 fa 7e 45 98       	vmovq  xmm0,QWORD PTR [rbp-0x68]
  235614:	48 81 c4 60 01 00 00 	add    rsp,0x160
  23561b:	5d                   	pop    rbp
  23561c:	c3                   	ret    
  23561d:	b8 ff ff ff ff       	mov    eax,0xffffffff
  235622:	89 c1                	mov    ecx,eax
    var ix0 = @intCast(u32, u >> 32);
  235624:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
  235627:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
    var ix1 = @intCast(u32, u & 0xFFFFFFFF);
  23562a:	48 23 4d e0          	and    rcx,QWORD PTR [rbp-0x20]
  23562e:	89 ca                	mov    edx,ecx
  235630:	89 d6                	mov    esi,edx
  235632:	89 f7                	mov    edi,esi
  235634:	48 39 f9             	cmp    rcx,rdi
  235637:	89 95 04 ff ff ff    	mov    DWORD PTR [rbp-0xfc],edx
  23563d:	74 12                	je     235651 <sqrt+0x521>
  23563f:	eb 33                	jmp    235674 <sqrt+0x544>
  235641:	48 8d 3d c0 e7 00 00 	lea    rdi,[rip+0xe7c0]        # 243e08 <__unnamed_3>
  235648:	31 c0                	xor    eax,eax
  23564a:	89 c6                	mov    esi,eax
    var ix0 = @intCast(u32, u >> 32);
  23564c:	e8 df f1 ff ff       	call   234830 <panic>
    var ix1 = @intCast(u32, u & 0xFFFFFFFF);
  235651:	8b 85 04 ff ff ff    	mov    eax,DWORD PTR [rbp-0xfc]
  235657:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
    if (ix0 & 0x7FF00000 == 0x7FF00000) {
  23565a:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  23565d:	81 e1 00 00 f0 7f    	and    ecx,0x7ff00000
  235663:	81 f9 00 00 f0 7f    	cmp    ecx,0x7ff00000
  235669:	0f 84 12 fb ff ff    	je     235181 <sqrt+0x51>
  23566f:	e9 25 fb ff ff       	jmp    235199 <sqrt+0x69>
  235674:	48 8d 3d 8d e7 00 00 	lea    rdi,[rip+0xe78d]        # 243e08 <__unnamed_3>
  23567b:	31 c0                	xor    eax,eax
  23567d:	89 c6                	mov    esi,eax
    var ix1 = @intCast(u32, u & 0xFFFFFFFF);
  23567f:	e8 ac f1 ff ff       	call   234830 <panic>
  235684:	48 8d 3d 95 e7 00 00 	lea    rdi,[rip+0xe795]        # 243e20 <__unnamed_4>
  23568b:	31 c0                	xor    eax,eax
  23568d:	89 c6                	mov    esi,eax
            m -= 21;
  23568f:	e8 9c f1 ff ff       	call   234830 <panic>
  235694:	8b 45 90             	mov    eax,DWORD PTR [rbp-0x70]
  235697:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
            ix0 |= ix1 >> 11;
  23569a:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  23569d:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
  2356a0:	c1 ea 0b             	shr    edx,0xb
  2356a3:	09 d1                	or     ecx,edx
  2356a5:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
            ix1 <<= 21;
  2356a8:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
  2356ab:	c1 e1 15             	shl    ecx,0x15
  2356ae:	89 4d d8             	mov    DWORD PTR [rbp-0x28],ecx
        while (ix0 == 0) {
  2356b1:	e9 34 fb ff ff       	jmp    2351ea <sqrt+0xba>
  2356b6:	48 8d 3d 63 e7 00 00 	lea    rdi,[rip+0xe763]        # 243e20 <__unnamed_4>
  2356bd:	31 c0                	xor    eax,eax
  2356bf:	89 c6                	mov    esi,eax
        while (ix0 & 0x00100000 == 0) : (i += 1) {
  2356c1:	e8 6a f1 ff ff       	call   234830 <panic>
  2356c6:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
  2356c9:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
  2356cc:	e9 40 fb ff ff       	jmp    235211 <sqrt+0xe1>
  2356d1:	48 8d 3d 48 e7 00 00 	lea    rdi,[rip+0xe748]        # 243e20 <__unnamed_4>
  2356d8:	31 c0                	xor    eax,eax
  2356da:	89 c6                	mov    esi,eax
        m -= @intCast(i32, i) - 1;
  2356dc:	e8 4f f1 ff ff       	call   234830 <panic>
  2356e1:	8b 45 80             	mov    eax,DWORD PTR [rbp-0x80]
  2356e4:	8b 8d 7c ff ff ff    	mov    ecx,DWORD PTR [rbp-0x84]
  2356ea:	29 c8                	sub    eax,ecx
  2356ec:	0f 90 c2             	seto   dl
  2356ef:	89 85 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],eax
  2356f5:	88 95 ff fe ff ff    	mov    BYTE PTR [rbp-0x101],dl
  2356fb:	70 02                	jo     2356ff <sqrt+0x5cf>
  2356fd:	eb 10                	jmp    23570f <sqrt+0x5df>
  2356ff:	48 8d 3d 1a e7 00 00 	lea    rdi,[rip+0xe71a]        # 243e20 <__unnamed_4>
  235706:	31 c0                	xor    eax,eax
  235708:	89 c6                	mov    esi,eax
  23570a:	e8 21 f1 ff ff       	call   234830 <panic>
  23570f:	b8 20 00 00 00       	mov    eax,0x20
  235714:	8b 8d 00 ff ff ff    	mov    ecx,DWORD PTR [rbp-0x100]
  23571a:	89 4d d4             	mov    DWORD PTR [rbp-0x2c],ecx
        ix0 |= ix1 >> @intCast(u5, 32 - i);
  23571d:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  235720:	8b 75 d8             	mov    esi,DWORD PTR [rbp-0x28]
  235723:	2b 45 d0             	sub    eax,DWORD PTR [rbp-0x30]
  235726:	40 0f 92 c7          	setb   dil
  23572a:	89 b5 f8 fe ff ff    	mov    DWORD PTR [rbp-0x108],esi
  235730:	89 95 f4 fe ff ff    	mov    DWORD PTR [rbp-0x10c],edx
  235736:	89 85 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],eax
  23573c:	40 88 bd ef fe ff ff 	mov    BYTE PTR [rbp-0x111],dil
  235743:	72 02                	jb     235747 <sqrt+0x617>
  235745:	eb 10                	jmp    235757 <sqrt+0x627>
  235747:	48 8d 3d d2 e6 00 00 	lea    rdi,[rip+0xe6d2]        # 243e20 <__unnamed_4>
  23574e:	31 c0                	xor    eax,eax
  235750:	89 c6                	mov    esi,eax
  235752:	e8 d9 f0 ff ff       	call   234830 <panic>
  235757:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
  23575d:	88 c1                	mov    cl,al
  23575f:	83 e0 1f             	and    eax,0x1f
  235762:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
  235768:	39 c2                	cmp    edx,eax
  23576a:	88 8d ee fe ff ff    	mov    BYTE PTR [rbp-0x112],cl
  235770:	75 42                	jne    2357b4 <sqrt+0x684>
  235772:	8a 8d ee fe ff ff    	mov    cl,BYTE PTR [rbp-0x112]
  235778:	88 c8                	mov    al,cl
  23577a:	8b 95 f8 fe ff ff    	mov    edx,DWORD PTR [rbp-0x108]
  235780:	c4 e2 7b f7 c2       	shrx   eax,edx,eax
  235785:	8b b5 f4 fe ff ff    	mov    esi,DWORD PTR [rbp-0x10c]
  23578b:	09 c6                	or     esi,eax
  23578d:	89 75 dc             	mov    DWORD PTR [rbp-0x24],esi
        ix1 <<= @intCast(u5, i);
  235790:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  235793:	8b 75 d0             	mov    esi,DWORD PTR [rbp-0x30]
  235796:	40 88 f7             	mov    dil,sil
  235799:	41 89 f0             	mov    r8d,esi
  23579c:	41 83 e0 1f          	and    r8d,0x1f
  2357a0:	44 39 c6             	cmp    esi,r8d
  2357a3:	89 85 e8 fe ff ff    	mov    DWORD PTR [rbp-0x118],eax
  2357a9:	40 88 bd e7 fe ff ff 	mov    BYTE PTR [rbp-0x119],dil
  2357b0:	74 12                	je     2357c4 <sqrt+0x694>
  2357b2:	eb 2b                	jmp    2357df <sqrt+0x6af>
  2357b4:	48 8d 3d 4d e6 00 00 	lea    rdi,[rip+0xe64d]        # 243e08 <__unnamed_3>
  2357bb:	31 c0                	xor    eax,eax
  2357bd:	89 c6                	mov    esi,eax
        ix0 |= ix1 >> @intCast(u5, 32 - i);
  2357bf:	e8 6c f0 ff ff       	call   234830 <panic>
        ix1 <<= @intCast(u5, i);
  2357c4:	8a 85 e7 fe ff ff    	mov    al,BYTE PTR [rbp-0x119]
  2357ca:	24 1f                	and    al,0x1f
  2357cc:	0f b6 c8             	movzx  ecx,al
  2357cf:	8b 95 e8 fe ff ff    	mov    edx,DWORD PTR [rbp-0x118]
  2357d5:	d3 e2                	shl    edx,cl
  2357d7:	89 55 d8             	mov    DWORD PTR [rbp-0x28],edx
    if (m == 0) {
  2357da:	e9 89 fa ff ff       	jmp    235268 <sqrt+0x138>
  2357df:	48 8d 3d 22 e6 00 00 	lea    rdi,[rip+0xe622]        # 243e08 <__unnamed_3>
  2357e6:	31 c0                	xor    eax,eax
  2357e8:	89 c6                	mov    esi,eax
        ix1 <<= @intCast(u5, i);
  2357ea:	e8 41 f0 ff ff       	call   234830 <panic>
  2357ef:	48 8d 3d 2a e6 00 00 	lea    rdi,[rip+0xe62a]        # 243e20 <__unnamed_4>
  2357f6:	31 c0                	xor    eax,eax
  2357f8:	89 c6                	mov    esi,eax
    m -= 1023;
  2357fa:	e8 31 f0 ff ff       	call   234830 <panic>
  2357ff:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
  235805:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
    ix0 = (ix0 & 0x000FFFFF) | 0x00100000;
  235808:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  23580b:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
  235811:	81 c9 00 00 10 00    	or     ecx,0x100000
  235817:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
    if (m & 1 != 0) {
  23581a:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
  23581d:	83 e1 01             	and    ecx,0x1
  235820:	83 f9 00             	cmp    ecx,0x0
  235823:	0f 85 61 fa ff ff    	jne    23528a <sqrt+0x15a>
  235829:	e9 8c fa ff ff       	jmp    2352ba <sqrt+0x18a>
  23582e:	48 8d 3d eb e5 00 00 	lea    rdi,[rip+0xe5eb]        # 243e20 <__unnamed_4>
  235835:	31 c0                	xor    eax,eax
  235837:	89 c6                	mov    esi,eax
        ix0 += ix0 + (ix1 >> 31);
  235839:	e8 f2 ef ff ff       	call   234830 <panic>
  23583e:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
  235844:	8b 8d 68 ff ff ff    	mov    ecx,DWORD PTR [rbp-0x98]
  23584a:	01 c8                	add    eax,ecx
  23584c:	0f 92 c2             	setb   dl
  23584f:	89 85 e0 fe ff ff    	mov    DWORD PTR [rbp-0x120],eax
  235855:	88 95 df fe ff ff    	mov    BYTE PTR [rbp-0x121],dl
  23585b:	72 02                	jb     23585f <sqrt+0x72f>
  23585d:	eb 10                	jmp    23586f <sqrt+0x73f>
  23585f:	48 8d 3d ba e5 00 00 	lea    rdi,[rip+0xe5ba]        # 243e20 <__unnamed_4>
  235866:	31 c0                	xor    eax,eax
  235868:	89 c6                	mov    esi,eax
  23586a:	e8 c1 ef ff ff       	call   234830 <panic>
  23586f:	8b 85 e0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x120]
  235875:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
        ix1 = ix1 +% ix1;
  235878:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
  23587b:	03 4d d8             	add    ecx,DWORD PTR [rbp-0x28]
  23587e:	89 4d d8             	mov    DWORD PTR [rbp-0x28],ecx
    if (m & 1 != 0) {
  235881:	e9 36 fa ff ff       	jmp    2352bc <sqrt+0x18c>
  235886:	48 8d 3d 93 e5 00 00 	lea    rdi,[rip+0xe593]        # 243e20 <__unnamed_4>
  23588d:	31 c0                	xor    eax,eax
  23588f:	89 c6                	mov    esi,eax
    ix0 += ix0 + (ix1 >> 31);
  235891:	e8 9a ef ff ff       	call   234830 <panic>
  235896:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa0]
  23589c:	8b 8d 5c ff ff ff    	mov    ecx,DWORD PTR [rbp-0xa4]
  2358a2:	01 c8                	add    eax,ecx
  2358a4:	0f 92 c2             	setb   dl
  2358a7:	89 85 d8 fe ff ff    	mov    DWORD PTR [rbp-0x128],eax
  2358ad:	88 95 d7 fe ff ff    	mov    BYTE PTR [rbp-0x129],dl
  2358b3:	72 02                	jb     2358b7 <sqrt+0x787>
  2358b5:	eb 10                	jmp    2358c7 <sqrt+0x797>
  2358b7:	48 8d 3d 62 e5 00 00 	lea    rdi,[rip+0xe562]        # 243e20 <__unnamed_4>
  2358be:	31 c0                	xor    eax,eax
  2358c0:	89 c6                	mov    esi,eax
  2358c2:	e8 69 ef ff ff       	call   234830 <panic>
  2358c7:	b8 aa 00 00 00       	mov    eax,0xaa
  2358cc:	b9 04 00 00 00       	mov    ecx,0x4
  2358d1:	89 ca                	mov    edx,ecx
  2358d3:	48 8d 75 b4          	lea    rsi,[rbp-0x4c]
  2358d7:	48 8d 7d b8          	lea    rdi,[rbp-0x48]
  2358db:	8b 8d d8 fe ff ff    	mov    ecx,DWORD PTR [rbp-0x128]
  2358e1:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
    ix1 = ix1 +% ix1;
  2358e4:	44 8b 45 d8          	mov    r8d,DWORD PTR [rbp-0x28]
  2358e8:	44 03 45 d8          	add    r8d,DWORD PTR [rbp-0x28]
  2358ec:	44 89 45 d8          	mov    DWORD PTR [rbp-0x28],r8d
    var q: u32 = 0;
  2358f0:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
    var q1: u32 = 0;
  2358f7:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [rbp-0x38],0x0
    var s0: u32 = 0;
  2358fe:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x0
    var s1: u32 = 0;
  235905:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [rbp-0x40],0x0
    var r: u32 = 0x00200000;
  23590c:	c7 45 bc 00 00 20 00 	mov    DWORD PTR [rbp-0x44],0x200000
    var t: u32 = undefined;
  235913:	48 89 b5 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rsi
  23591a:	89 c6                	mov    esi,eax
  23591c:	48 89 95 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rdx
  235923:	89 85 bc fe ff ff    	mov    DWORD PTR [rbp-0x144],eax
  235929:	e8 22 ef ff ff       	call   234850 <memset>
    var t1: u32 = undefined;
  23592e:	48 8b 95 c8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x138]
  235935:	48 89 d7             	mov    rdi,rdx
  235938:	8b b5 bc fe ff ff    	mov    esi,DWORD PTR [rbp-0x144]
  23593e:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  235945:	e8 06 ef ff ff       	call   234850 <memset>
    while (r != 0) {
  23594a:	e9 a6 f9 ff ff       	jmp    2352f5 <sqrt+0x1c5>
  23594f:	48 8d 3d ca e4 00 00 	lea    rdi,[rip+0xe4ca]        # 243e20 <__unnamed_4>
  235956:	31 c0                	xor    eax,eax
  235958:	89 c6                	mov    esi,eax
            s0 = t + r;
  23595a:	e8 d1 ee ff ff       	call   234830 <panic>
  23595f:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
  235965:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
            ix0 -= t;
  235968:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  23596b:	2b 4d b8             	sub    ecx,DWORD PTR [rbp-0x48]
  23596e:	0f 92 c2             	setb   dl
  235971:	89 8d b8 fe ff ff    	mov    DWORD PTR [rbp-0x148],ecx
  235977:	88 95 b7 fe ff ff    	mov    BYTE PTR [rbp-0x149],dl
  23597d:	72 02                	jb     235981 <sqrt+0x851>
  23597f:	eb 10                	jmp    235991 <sqrt+0x861>
  235981:	48 8d 3d 98 e4 00 00 	lea    rdi,[rip+0xe498]        # 243e20 <__unnamed_4>
  235988:	31 c0                	xor    eax,eax
  23598a:	89 c6                	mov    esi,eax
  23598c:	e8 9f ee ff ff       	call   234830 <panic>
  235991:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
  235997:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
            q += r;
  23599a:	8b 4d cc             	mov    ecx,DWORD PTR [rbp-0x34]
  23599d:	03 4d bc             	add    ecx,DWORD PTR [rbp-0x44]
  2359a0:	0f 92 c2             	setb   dl
  2359a3:	89 8d b0 fe ff ff    	mov    DWORD PTR [rbp-0x150],ecx
  2359a9:	88 95 af fe ff ff    	mov    BYTE PTR [rbp-0x151],dl
  2359af:	72 02                	jb     2359b3 <sqrt+0x883>
  2359b1:	eb 10                	jmp    2359c3 <sqrt+0x893>
  2359b3:	48 8d 3d 66 e4 00 00 	lea    rdi,[rip+0xe466]        # 243e20 <__unnamed_4>
  2359ba:	31 c0                	xor    eax,eax
  2359bc:	89 c6                	mov    esi,eax
  2359be:	e8 6d ee ff ff       	call   234830 <panic>
  2359c3:	8b 85 b0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x150]
  2359c9:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
        if (t <= ix0) {
  2359cc:	e9 5d f9 ff ff       	jmp    23532e <sqrt+0x1fe>
  2359d1:	48 8d 3d 48 e4 00 00 	lea    rdi,[rip+0xe448]        # 243e20 <__unnamed_4>
  2359d8:	31 c0                	xor    eax,eax
  2359da:	89 c6                	mov    esi,eax
                s0 += 1;
  2359dc:	e8 4f ee ff ff       	call   234830 <panic>
  2359e1:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [rbp-0xb4]
  2359e7:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
            if (t1 & sign == sign and s1 & sign == 0) {
  2359ea:	e9 40 fa ff ff       	jmp    23542f <sqrt+0x2ff>
  2359ef:	48 8d 3d 2a e4 00 00 	lea    rdi,[rip+0xe42a]        # 243e20 <__unnamed_4>
  2359f6:	31 c0                	xor    eax,eax
  2359f8:	89 c6                	mov    esi,eax
            ix0 -= t;
  2359fa:	e8 31 ee ff ff       	call   234830 <panic>
  2359ff:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
  235a05:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
            if (ix1 < t1) {
  235a08:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
  235a0b:	3b 4d b4             	cmp    ecx,DWORD PTR [rbp-0x4c]
  235a0e:	0f 82 3b fa ff ff    	jb     23544f <sqrt+0x31f>
  235a14:	e9 56 fa ff ff       	jmp    23546f <sqrt+0x33f>
  235a19:	48 8d 3d 00 e4 00 00 	lea    rdi,[rip+0xe400]        # 243e20 <__unnamed_4>
  235a20:	31 c0                	xor    eax,eax
  235a22:	89 c6                	mov    esi,eax
                ix0 -= 1;
  235a24:	e8 07 ee ff ff       	call   234830 <panic>
  235a29:	8b 85 3c ff ff ff    	mov    eax,DWORD PTR [rbp-0xc4]
  235a2f:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
            if (ix1 < t1) {
  235a32:	e9 3a fa ff ff       	jmp    235471 <sqrt+0x341>
  235a37:	48 8d 3d e2 e3 00 00 	lea    rdi,[rip+0xe3e2]        # 243e20 <__unnamed_4>
  235a3e:	31 c0                	xor    eax,eax
  235a40:	89 c6                	mov    esi,eax
            q1 += r;
  235a42:	e8 e9 ed ff ff       	call   234830 <panic>
  235a47:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
  235a4d:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
        if (t < ix0 or (t == ix0 and t1 <= ix1)) {
  235a50:	e9 47 fa ff ff       	jmp    23549c <sqrt+0x36c>
  235a55:	48 8d 3d c4 e3 00 00 	lea    rdi,[rip+0xe3c4]        # 243e20 <__unnamed_4>
  235a5c:	31 c0                	xor    eax,eax
  235a5e:	89 c6                	mov    esi,eax
                q += 1;
  235a60:	e8 cb ed ff ff       	call   234830 <panic>
  235a65:	8b 85 2c ff ff ff    	mov    eax,DWORD PTR [rbp-0xd4]
  235a6b:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
            if (q1 == 0xFFFFFFFF) {
  235a6e:	e9 38 fb ff ff       	jmp    2355ab <sqrt+0x47b>
  235a73:	48 8d 3d a6 e3 00 00 	lea    rdi,[rip+0xe3a6]        # 243e20 <__unnamed_4>
  235a7a:	31 c0                	xor    eax,eax
  235a7c:	89 c6                	mov    esi,eax
                    q += 1;
  235a7e:	e8 ad ed ff ff       	call   234830 <panic>
  235a83:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
  235a89:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
                if (q1 == 0xFFFFFFFE) {
  235a8c:	e9 d3 fa ff ff       	jmp    235564 <sqrt+0x434>
  235a91:	48 8d 3d 88 e3 00 00 	lea    rdi,[rip+0xe388]        # 243e20 <__unnamed_4>
  235a98:	31 c0                	xor    eax,eax
  235a9a:	89 c6                	mov    esi,eax
                q1 += 2;
  235a9c:	e8 8f ed ff ff       	call   234830 <panic>
  235aa1:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
  235aa7:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
            } else if (z > 1.0) {
  235aaa:	e9 fa fa ff ff       	jmp    2355a9 <sqrt+0x479>
  235aaf:	48 8d 3d 6a e3 00 00 	lea    rdi,[rip+0xe36a]        # 243e20 <__unnamed_4>
  235ab6:	31 c0                	xor    eax,eax
  235ab8:	89 c6                	mov    esi,eax
                q1 += q1 & 1;
  235aba:	e8 71 ed ff ff       	call   234830 <panic>
  235abf:	8b 85 14 ff ff ff    	mov    eax,DWORD PTR [rbp-0xec]
  235ac5:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
            } else if (z > 1.0) {
  235ac8:	e9 dc fa ff ff       	jmp    2355a9 <sqrt+0x479>
  235acd:	48 8d 3d 4c e3 00 00 	lea    rdi,[rip+0xe34c]        # 243e20 <__unnamed_4>
  235ad4:	31 c0                	xor    eax,eax
  235ad6:	89 c6                	mov    esi,eax
    ix0 = (q >> 1) + 0x3FE00000;
  235ad8:	e8 53 ed ff ff       	call   234830 <panic>
  235add:	8b 85 0c ff ff ff    	mov    eax,DWORD PTR [rbp-0xf4]
  235ae3:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
    ix1 = q1 >> 1;
  235ae6:	8b 4d c8             	mov    ecx,DWORD PTR [rbp-0x38]
  235ae9:	c1 e9 01             	shr    ecx,0x1
  235aec:	89 4d d8             	mov    DWORD PTR [rbp-0x28],ecx
    if (q & 1 != 0) {
  235aef:	8b 4d cc             	mov    ecx,DWORD PTR [rbp-0x34]
  235af2:	83 e1 01             	and    ecx,0x1
  235af5:	83 f9 00             	cmp    ecx,0x0
  235af8:	0f 85 da fa ff ff    	jne    2355d8 <sqrt+0x4a8>
  235afe:	e9 e2 fa ff ff       	jmp    2355e5 <sqrt+0x4b5>
  235b03:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  235b0a:	84 00 00 00 00 00 

0000000000235b10 <snan>:
    };
}

// Note: A signalling nan is identical to a standard right now by may have a different bit
// representation in the future when required.
pub fn snan(comptime T: type) T {
  235b10:	55                   	push   rbp
  235b11:	48 89 e5             	mov    rbp,rsp
  235b14:	c5 fb 10 05 54 b1 fc 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffcb154]        # 200c70 <__unnamed_182+0x10>
  235b1b:	ff 
    return switch (T) {
  235b1c:	5d                   	pop    rbp
  235b1d:	c3                   	ret    
  235b1e:	66 90                	xchg   ax,ax

0000000000235b20 <sqrtf>:
}

export fn sqrtf(x: f32) f32 {
  235b20:	55                   	push   rbp
  235b21:	48 89 e5             	mov    rbp,rsp
  235b24:	48 81 ec b0 00 00 00 	sub    rsp,0xb0
  235b2b:	c5 fa 10 0d dd 4d fd 	vmovss xmm1,DWORD PTR [rip+0xfffffffffffd4ddd]        # 20a910 <__unnamed_1439+0xf>
  235b32:	ff 
  235b33:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
    const tiny: f32 = 1.0e-30;
  235b38:	c5 fa 11 4d f8       	vmovss DWORD PTR [rbp-0x8],xmm1
    const sign: i32 = @bitCast(i32, u32(0x80000000));
  235b3d:	c7 45 f4 00 00 00 80 	mov    DWORD PTR [rbp-0xc],0x80000000
    var ix: i32 = @bitCast(i32, x);
  235b44:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  235b49:	c5 f9 7e c0          	vmovd  eax,xmm0
  235b4d:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax

    if ((ix & 0x7F800000) == 0x7F800000) {
  235b50:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  235b53:	25 00 00 80 7f       	and    eax,0x7f800000
  235b58:	3d 00 00 80 7f       	cmp    eax,0x7f800000
  235b5d:	75 18                	jne    235b77 <sqrtf+0x57>
        return x * x + x; // sqrt(nan) = nan, sqrt(+inf) = +inf, sqrt(-inf) = snan
  235b5f:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  235b64:	c5 fa 59 45 fc       	vmulss xmm0,xmm0,DWORD PTR [rbp-0x4]
  235b69:	c5 fa 58 45 fc       	vaddss xmm0,xmm0,DWORD PTR [rbp-0x4]
  235b6e:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  235b75:	5d                   	pop    rbp
  235b76:	c3                   	ret    
    if ((ix & 0x7F800000) == 0x7F800000) {
  235b77:	eb 00                	jmp    235b79 <sqrtf+0x59>
    }

    // zero
    if (ix <= 0) {
  235b79:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
  235b7d:	7f 35                	jg     235bb4 <sqrtf+0x94>
        if (ix & ~sign == 0) {
  235b7f:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  235b82:	25 ff ff ff 7f       	and    eax,0x7fffffff
  235b87:	83 f8 00             	cmp    eax,0x0
  235b8a:	75 0e                	jne    235b9a <sqrtf+0x7a>
            return x; // sqrt (+-0) = +-0
  235b8c:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  235b91:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  235b98:	5d                   	pop    rbp
  235b99:	c3                   	ret    
        if (ix & ~sign == 0) {
  235b9a:	eb 00                	jmp    235b9c <sqrtf+0x7c>
        }
        if (ix < 0) {
  235b9c:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
  235ba0:	7d 0e                	jge    235bb0 <sqrtf+0x90>
            return math.snan(f32);
  235ba2:	e8 19 04 00 00       	call   235fc0 <snan.4>
  235ba7:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  235bae:	5d                   	pop    rbp
  235baf:	c3                   	ret    
        if (ix < 0) {
  235bb0:	eb 00                	jmp    235bb2 <sqrtf+0x92>
    if (ix <= 0) {
  235bb2:	eb 02                	jmp    235bb6 <sqrtf+0x96>
  235bb4:	eb 00                	jmp    235bb6 <sqrtf+0x96>
        }
    }

    // normalize
    var m = ix >> 23;
  235bb6:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  235bb9:	c1 f8 17             	sar    eax,0x17
  235bbc:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    if (m == 0) {
  235bbf:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
  235bc3:	75 55                	jne    235c1a <sqrtf+0xfa>
        // subnormal
        var i: i32 = 0;
  235bc5:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
        while (ix & 0x00800000 == 0) : (i += 1) {
  235bcc:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  235bcf:	25 00 00 80 00       	and    eax,0x800000
  235bd4:	83 f8 00             	cmp    eax,0x0
  235bd7:	75 22                	jne    235bfb <sqrtf+0xdb>
            ix <<= 1;
  235bd9:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  235bdc:	c1 e0 01             	shl    eax,0x1
  235bdf:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
        while (ix & 0x00800000 == 0) : (i += 1) {
  235be2:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  235be5:	ff c0                	inc    eax
  235be7:	0f 90 c1             	seto   cl
  235bea:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
  235bed:	88 4d cf             	mov    BYTE PTR [rbp-0x31],cl
  235bf0:	0f 80 7a 01 00 00    	jo     235d70 <sqrtf+0x250>
  235bf6:	e9 85 01 00 00       	jmp    235d80 <sqrtf+0x260>
        }
        m -= i - 1;
  235bfb:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  235bfe:	8b 4d e8             	mov    ecx,DWORD PTR [rbp-0x18]
  235c01:	ff c9                	dec    ecx
  235c03:	0f 90 c2             	seto   dl
  235c06:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
  235c09:	89 4d c4             	mov    DWORD PTR [rbp-0x3c],ecx
  235c0c:	88 55 c3             	mov    BYTE PTR [rbp-0x3d],dl
  235c0f:	0f 80 76 01 00 00    	jo     235d8b <sqrtf+0x26b>
  235c15:	e9 81 01 00 00       	jmp    235d9b <sqrtf+0x27b>
    if (m == 0) {
  235c1a:	eb 00                	jmp    235c1c <sqrtf+0xfc>
    }

    m -= 127; // unbias exponent
  235c1c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  235c1f:	83 e8 7f             	sub    eax,0x7f
  235c22:	0f 90 c1             	seto   cl
  235c25:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
  235c28:	88 4d bb             	mov    BYTE PTR [rbp-0x45],cl
  235c2b:	0f 80 a3 01 00 00    	jo     235dd4 <sqrtf+0x2b4>
  235c31:	e9 ae 01 00 00       	jmp    235de4 <sqrtf+0x2c4>
    ix = (ix & 0x007FFFFF) | 0x00800000;

    if (m & 1 != 0) { // odd m, double x to even
        ix += ix;
  235c36:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  235c39:	03 45 f0             	add    eax,DWORD PTR [rbp-0x10]
  235c3c:	0f 90 c1             	seto   cl
  235c3f:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
  235c42:	88 4d b3             	mov    BYTE PTR [rbp-0x4d],cl
  235c45:	0f 80 c5 01 00 00    	jo     235e10 <sqrtf+0x2f0>
  235c4b:	e9 d0 01 00 00       	jmp    235e20 <sqrtf+0x300>
    if (m & 1 != 0) { // odd m, double x to even
  235c50:	eb 00                	jmp    235c52 <sqrtf+0x132>
    }

    m >>= 1; // m = [m / 2]
  235c52:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  235c55:	c1 f8 01             	sar    eax,0x1
  235c58:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax

    // sqrt(x) bit by bit
    ix += ix;
  235c5b:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  235c5e:	03 45 f0             	add    eax,DWORD PTR [rbp-0x10]
  235c61:	0f 90 c1             	seto   cl
  235c64:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
  235c67:	88 4d ab             	mov    BYTE PTR [rbp-0x55],cl
  235c6a:	0f 80 bb 01 00 00    	jo     235e2b <sqrtf+0x30b>
  235c70:	e9 c6 01 00 00       	jmp    235e3b <sqrtf+0x31b>
    var q: i32 = 0; // q = sqrt(x)
    var s: i32 = 0;
    var r: i32 = 0x01000000; // r = moving bit right -> left

    while (r != 0) {
  235c75:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
  235c79:	74 50                	je     235ccb <sqrtf+0x1ab>
        const t = s + r;
  235c7b:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  235c7e:	03 45 dc             	add    eax,DWORD PTR [rbp-0x24]
  235c81:	0f 90 c1             	seto   cl
  235c84:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
  235c87:	88 4d a3             	mov    BYTE PTR [rbp-0x5d],cl
  235c8a:	0f 80 cb 01 00 00    	jo     235e5b <sqrtf+0x33b>
  235c90:	e9 d6 01 00 00       	jmp    235e6b <sqrtf+0x34b>
        if (t <= ix) {
            s = t + r;
  235c95:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  235c98:	03 45 dc             	add    eax,DWORD PTR [rbp-0x24]
  235c9b:	0f 90 c1             	seto   cl
  235c9e:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
  235ca1:	88 4d 9b             	mov    BYTE PTR [rbp-0x65],cl
  235ca4:	0f 80 d8 01 00 00    	jo     235e82 <sqrtf+0x362>
  235caa:	e9 e3 01 00 00       	jmp    235e92 <sqrtf+0x372>
        if (t <= ix) {
  235caf:	eb 00                	jmp    235cb1 <sqrtf+0x191>
            ix -= t;
            q += r;
        }
        ix += ix;
  235cb1:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  235cb4:	03 45 f0             	add    eax,DWORD PTR [rbp-0x10]
  235cb7:	0f 90 c1             	seto   cl
  235cba:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
  235cbd:	88 4d 93             	mov    BYTE PTR [rbp-0x6d],cl
  235cc0:	0f 80 3b 02 00 00    	jo     235f01 <sqrtf+0x3e1>
  235cc6:	e9 46 02 00 00       	jmp    235f11 <sqrtf+0x3f1>
        r >>= 1;
    }

    // floating add to find rounding direction
    if (ix != 0) {
  235ccb:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
  235ccf:	74 78                	je     235d49 <sqrtf+0x229>
  235cd1:	c5 fa 10 05 3b 4c fd 	vmovss xmm0,DWORD PTR [rip+0xfffffffffffd4c3b]        # 20a914 <__unnamed_1439+0x13>
  235cd8:	ff 
        var z = 1.0 - tiny; // inexact
  235cd9:	c5 fa 11 45 d4       	vmovss DWORD PTR [rbp-0x2c],xmm0
        if (z >= 1.0) {
  235cde:	c5 fa 10 4d d4       	vmovss xmm1,DWORD PTR [rbp-0x2c]
  235ce3:	c5 f8 2e c8          	vucomiss xmm1,xmm0
  235ce7:	72 5c                	jb     235d45 <sqrtf+0x225>
  235ce9:	c5 fa 10 05 23 4c fd 	vmovss xmm0,DWORD PTR [rip+0xfffffffffffd4c23]        # 20a914 <__unnamed_1439+0x13>
  235cf0:	ff 
            z = 1.0 + tiny;
  235cf1:	c5 fa 11 45 d4       	vmovss DWORD PTR [rbp-0x2c],xmm0
            if (z > 1.0) {
  235cf6:	c5 fa 10 4d d4       	vmovss xmm1,DWORD PTR [rbp-0x2c]
  235cfb:	c5 f8 2e c8          	vucomiss xmm1,xmm0
  235cff:	76 1a                	jbe    235d1b <sqrtf+0x1fb>
                q += 2;
  235d01:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  235d04:	83 c0 02             	add    eax,0x2
  235d07:	0f 90 c1             	seto   cl
  235d0a:	89 45 8c             	mov    DWORD PTR [rbp-0x74],eax
  235d0d:	88 4d 8b             	mov    BYTE PTR [rbp-0x75],cl
  235d10:	0f 80 0f 02 00 00    	jo     235f25 <sqrtf+0x405>
  235d16:	e9 1a 02 00 00       	jmp    235f35 <sqrtf+0x415>
            } else {
                if (q & 1 != 0) {
  235d1b:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  235d1e:	83 e0 01             	and    eax,0x1
  235d21:	83 f8 00             	cmp    eax,0x0
  235d24:	74 19                	je     235d3f <sqrtf+0x21f>
                    q += 1;
  235d26:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  235d29:	ff c0                	inc    eax
  235d2b:	0f 90 c1             	seto   cl
  235d2e:	89 45 84             	mov    DWORD PTR [rbp-0x7c],eax
  235d31:	88 4d 83             	mov    BYTE PTR [rbp-0x7d],cl
  235d34:	0f 80 06 02 00 00    	jo     235f40 <sqrtf+0x420>
  235d3a:	e9 11 02 00 00       	jmp    235f50 <sqrtf+0x430>
                if (q & 1 != 0) {
  235d3f:	eb 00                	jmp    235d41 <sqrtf+0x221>
            if (z > 1.0) {
  235d41:	eb 00                	jmp    235d43 <sqrtf+0x223>
        if (z >= 1.0) {
  235d43:	eb 02                	jmp    235d47 <sqrtf+0x227>
  235d45:	eb 00                	jmp    235d47 <sqrtf+0x227>
    if (ix != 0) {
  235d47:	eb 02                	jmp    235d4b <sqrtf+0x22b>
  235d49:	eb 00                	jmp    235d4b <sqrtf+0x22b>
                }
            }
        }
    }

    ix = (q >> 1) + 0x3f000000;
  235d4b:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  235d4e:	c1 f8 01             	sar    eax,0x1
  235d51:	05 00 00 00 3f       	add    eax,0x3f000000
  235d56:	0f 90 c1             	seto   cl
  235d59:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
  235d5f:	88 8d 7b ff ff ff    	mov    BYTE PTR [rbp-0x85],cl
  235d65:	0f 80 f0 01 00 00    	jo     235f5b <sqrtf+0x43b>
  235d6b:	e9 fb 01 00 00       	jmp    235f6b <sqrtf+0x44b>
  235d70:	48 8d 3d a9 e0 00 00 	lea    rdi,[rip+0xe0a9]        # 243e20 <__unnamed_4>
  235d77:	31 c0                	xor    eax,eax
  235d79:	89 c6                	mov    esi,eax
        while (ix & 0x00800000 == 0) : (i += 1) {
  235d7b:	e8 b0 ea ff ff       	call   234830 <panic>
  235d80:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
  235d83:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
  235d86:	e9 41 fe ff ff       	jmp    235bcc <sqrtf+0xac>
  235d8b:	48 8d 3d 8e e0 00 00 	lea    rdi,[rip+0xe08e]        # 243e20 <__unnamed_4>
  235d92:	31 c0                	xor    eax,eax
  235d94:	89 c6                	mov    esi,eax
        m -= i - 1;
  235d96:	e8 95 ea ff ff       	call   234830 <panic>
  235d9b:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  235d9e:	8b 4d c4             	mov    ecx,DWORD PTR [rbp-0x3c]
  235da1:	29 c8                	sub    eax,ecx
  235da3:	0f 90 c2             	seto   dl
  235da6:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
  235dac:	88 95 73 ff ff ff    	mov    BYTE PTR [rbp-0x8d],dl
  235db2:	70 02                	jo     235db6 <sqrtf+0x296>
  235db4:	eb 10                	jmp    235dc6 <sqrtf+0x2a6>
  235db6:	48 8d 3d 63 e0 00 00 	lea    rdi,[rip+0xe063]        # 243e20 <__unnamed_4>
  235dbd:	31 c0                	xor    eax,eax
  235dbf:	89 c6                	mov    esi,eax
  235dc1:	e8 6a ea ff ff       	call   234830 <panic>
  235dc6:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
  235dcc:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    if (m == 0) {
  235dcf:	e9 48 fe ff ff       	jmp    235c1c <sqrtf+0xfc>
  235dd4:	48 8d 3d 45 e0 00 00 	lea    rdi,[rip+0xe045]        # 243e20 <__unnamed_4>
  235ddb:	31 c0                	xor    eax,eax
  235ddd:	89 c6                	mov    esi,eax
    m -= 127; // unbias exponent
  235ddf:	e8 4c ea ff ff       	call   234830 <panic>
  235de4:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  235de7:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    ix = (ix & 0x007FFFFF) | 0x00800000;
  235dea:	8b 4d f0             	mov    ecx,DWORD PTR [rbp-0x10]
  235ded:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
  235df3:	81 c9 00 00 80 00    	or     ecx,0x800000
  235df9:	89 4d f0             	mov    DWORD PTR [rbp-0x10],ecx
    if (m & 1 != 0) { // odd m, double x to even
  235dfc:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
  235dff:	83 e1 01             	and    ecx,0x1
  235e02:	83 f9 00             	cmp    ecx,0x0
  235e05:	0f 85 2b fe ff ff    	jne    235c36 <sqrtf+0x116>
  235e0b:	e9 40 fe ff ff       	jmp    235c50 <sqrtf+0x130>
  235e10:	48 8d 3d 09 e0 00 00 	lea    rdi,[rip+0xe009]        # 243e20 <__unnamed_4>
  235e17:	31 c0                	xor    eax,eax
  235e19:	89 c6                	mov    esi,eax
        ix += ix;
  235e1b:	e8 10 ea ff ff       	call   234830 <panic>
  235e20:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
  235e23:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    if (m & 1 != 0) { // odd m, double x to even
  235e26:	e9 27 fe ff ff       	jmp    235c52 <sqrtf+0x132>
  235e2b:	48 8d 3d ee df 00 00 	lea    rdi,[rip+0xdfee]        # 243e20 <__unnamed_4>
  235e32:	31 c0                	xor    eax,eax
  235e34:	89 c6                	mov    esi,eax
    ix += ix;
  235e36:	e8 f5 e9 ff ff       	call   234830 <panic>
  235e3b:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
  235e3e:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    var q: i32 = 0; // q = sqrt(x)
  235e41:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
    var s: i32 = 0;
  235e48:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
    var r: i32 = 0x01000000; // r = moving bit right -> left
  235e4f:	c7 45 dc 00 00 00 01 	mov    DWORD PTR [rbp-0x24],0x1000000
    while (r != 0) {
  235e56:	e9 1a fe ff ff       	jmp    235c75 <sqrtf+0x155>
  235e5b:	48 8d 3d be df 00 00 	lea    rdi,[rip+0xdfbe]        # 243e20 <__unnamed_4>
  235e62:	31 c0                	xor    eax,eax
  235e64:	89 c6                	mov    esi,eax
        const t = s + r;
  235e66:	e8 c5 e9 ff ff       	call   234830 <panic>
  235e6b:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
  235e6e:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
        if (t <= ix) {
  235e71:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
  235e74:	3b 4d f0             	cmp    ecx,DWORD PTR [rbp-0x10]
  235e77:	0f 8e 18 fe ff ff    	jle    235c95 <sqrtf+0x175>
  235e7d:	e9 2d fe ff ff       	jmp    235caf <sqrtf+0x18f>
  235e82:	48 8d 3d 97 df 00 00 	lea    rdi,[rip+0xdf97]        # 243e20 <__unnamed_4>
  235e89:	31 c0                	xor    eax,eax
  235e8b:	89 c6                	mov    esi,eax
            s = t + r;
  235e8d:	e8 9e e9 ff ff       	call   234830 <panic>
  235e92:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
  235e95:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
            ix -= t;
  235e98:	8b 4d f0             	mov    ecx,DWORD PTR [rbp-0x10]
  235e9b:	2b 4d d8             	sub    ecx,DWORD PTR [rbp-0x28]
  235e9e:	0f 90 c2             	seto   dl
  235ea1:	89 8d 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],ecx
  235ea7:	88 95 6b ff ff ff    	mov    BYTE PTR [rbp-0x95],dl
  235ead:	70 02                	jo     235eb1 <sqrtf+0x391>
  235eaf:	eb 10                	jmp    235ec1 <sqrtf+0x3a1>
  235eb1:	48 8d 3d 68 df 00 00 	lea    rdi,[rip+0xdf68]        # 243e20 <__unnamed_4>
  235eb8:	31 c0                	xor    eax,eax
  235eba:	89 c6                	mov    esi,eax
  235ebc:	e8 6f e9 ff ff       	call   234830 <panic>
  235ec1:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
  235ec7:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
            q += r;
  235eca:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
  235ecd:	03 4d dc             	add    ecx,DWORD PTR [rbp-0x24]
  235ed0:	0f 90 c2             	seto   dl
  235ed3:	89 8d 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],ecx
  235ed9:	88 95 63 ff ff ff    	mov    BYTE PTR [rbp-0x9d],dl
  235edf:	70 02                	jo     235ee3 <sqrtf+0x3c3>
  235ee1:	eb 10                	jmp    235ef3 <sqrtf+0x3d3>
  235ee3:	48 8d 3d 36 df 00 00 	lea    rdi,[rip+0xdf36]        # 243e20 <__unnamed_4>
  235eea:	31 c0                	xor    eax,eax
  235eec:	89 c6                	mov    esi,eax
  235eee:	e8 3d e9 ff ff       	call   234830 <panic>
  235ef3:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
  235ef9:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
        if (t <= ix) {
  235efc:	e9 b0 fd ff ff       	jmp    235cb1 <sqrtf+0x191>
  235f01:	48 8d 3d 18 df 00 00 	lea    rdi,[rip+0xdf18]        # 243e20 <__unnamed_4>
  235f08:	31 c0                	xor    eax,eax
  235f0a:	89 c6                	mov    esi,eax
        ix += ix;
  235f0c:	e8 1f e9 ff ff       	call   234830 <panic>
  235f11:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
  235f14:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
        r >>= 1;
  235f17:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  235f1a:	c1 f9 01             	sar    ecx,0x1
  235f1d:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
    while (r != 0) {
  235f20:	e9 50 fd ff ff       	jmp    235c75 <sqrtf+0x155>
  235f25:	48 8d 3d f4 de 00 00 	lea    rdi,[rip+0xdef4]        # 243e20 <__unnamed_4>
  235f2c:	31 c0                	xor    eax,eax
  235f2e:	89 c6                	mov    esi,eax
                q += 2;
  235f30:	e8 fb e8 ff ff       	call   234830 <panic>
  235f35:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
  235f38:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
            if (z > 1.0) {
  235f3b:	e9 03 fe ff ff       	jmp    235d43 <sqrtf+0x223>
  235f40:	48 8d 3d d9 de 00 00 	lea    rdi,[rip+0xded9]        # 243e20 <__unnamed_4>
  235f47:	31 c0                	xor    eax,eax
  235f49:	89 c6                	mov    esi,eax
                    q += 1;
  235f4b:	e8 e0 e8 ff ff       	call   234830 <panic>
  235f50:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
  235f53:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
                if (q & 1 != 0) {
  235f56:	e9 e6 fd ff ff       	jmp    235d41 <sqrtf+0x221>
  235f5b:	48 8d 3d be de 00 00 	lea    rdi,[rip+0xdebe]        # 243e20 <__unnamed_4>
  235f62:	31 c0                	xor    eax,eax
  235f64:	89 c6                	mov    esi,eax
    ix = (q >> 1) + 0x3f000000;
  235f66:	e8 c5 e8 ff ff       	call   234830 <panic>
  235f6b:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
  235f71:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    ix += m << 23;
  235f74:	8b 4d f0             	mov    ecx,DWORD PTR [rbp-0x10]
  235f77:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
  235f7a:	c1 e2 17             	shl    edx,0x17
  235f7d:	01 d1                	add    ecx,edx
  235f7f:	40 0f 90 c6          	seto   sil
  235f83:	89 8d 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],ecx
  235f89:	40 88 b5 5b ff ff ff 	mov    BYTE PTR [rbp-0xa5],sil
  235f90:	70 02                	jo     235f94 <sqrtf+0x474>
  235f92:	eb 10                	jmp    235fa4 <sqrtf+0x484>
  235f94:	48 8d 3d 85 de 00 00 	lea    rdi,[rip+0xde85]        # 243e20 <__unnamed_4>
  235f9b:	31 c0                	xor    eax,eax
  235f9d:	89 c6                	mov    esi,eax
  235f9f:	e8 8c e8 ff ff       	call   234830 <panic>
  235fa4:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
  235faa:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    return @bitCast(f32, ix);
  235fad:	c5 f9 6e 45 f0       	vmovd  xmm0,DWORD PTR [rbp-0x10]
  235fb2:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
  235fb9:	5d                   	pop    rbp
  235fba:	c3                   	ret    
  235fbb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000235fc0 <snan.4>:
pub fn snan(comptime T: type) T {
  235fc0:	55                   	push   rbp
  235fc1:	48 89 e5             	mov    rbp,rsp
  235fc4:	c5 fa 10 05 58 49 fd 	vmovss xmm0,DWORD PTR [rip+0xfffffffffffd4958]        # 20a924 <__unnamed_37+0x4>
  235fcb:	ff 
    return switch (T) {
  235fcc:	5d                   	pop    rbp
  235fcd:	c3                   	ret    
  235fce:	66 90                	xchg   ax,ax

0000000000235fd0 <isNan>:
fn isNan(comptime T: type, bits: T) bool {
  235fd0:	55                   	push   rbp
  235fd1:	48 89 e5             	mov    rbp,rsp
  235fd4:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
        return (bits & 0x7fffffff) > 0x7f800000;
  235fd7:	8b 7d fc             	mov    edi,DWORD PTR [rbp-0x4]
  235fda:	81 e7 ff ff ff 7f    	and    edi,0x7fffffff
  235fe0:	81 ef 00 00 80 7f    	sub    edi,0x7f800000
  235fe6:	0f 97 c0             	seta   al
  235fe9:	89 7d f8             	mov    DWORD PTR [rbp-0x8],edi
  235fec:	5d                   	pop    rbp
  235fed:	c3                   	ret    
  235fee:	66 90                	xchg   ax,ax

0000000000235ff0 <isNan.5>:
fn isNan(comptime T: type, bits: T) bool {
  235ff0:	55                   	push   rbp
  235ff1:	48 89 e5             	mov    rbp,rsp
  235ff4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
        return (bits & (@maxValue(u64) >> 1)) > (u64(0x7ff) << 52);
  235ff8:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  235ffc:	b0 3f                	mov    al,0x3f
  235ffe:	88 c1                	mov    cl,al
  236000:	c4 e2 f0 f5 cf       	bzhi   rcx,rdi,rcx
  236005:	48 bf 00 00 00 00 00 	movabs rdi,0x7ff0000000000000
  23600c:	00 f0 7f 
  23600f:	48 29 f9             	sub    rcx,rdi
  236012:	0f 97 c0             	seta   al
  236015:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
  236019:	5d                   	pop    rbp
  23601a:	c3                   	ret    
  23601b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000236020 <floor32>:
fn floor32(x: f32) f32 {
  236020:	55                   	push   rbp
  236021:	48 89 e5             	mov    rbp,rsp
  236024:	48 83 ec 30          	sub    rsp,0x30
  236028:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
    var u = @bitCast(u32, x);
  23602d:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  236032:	c5 f9 7e c0          	vmovd  eax,xmm0
  236036:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
    const e = @intCast(i32, (u >> 23) & 0xFF) - 0x7F;
  236039:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  23603c:	c1 e8 17             	shr    eax,0x17
  23603f:	25 ff 00 00 00       	and    eax,0xff
  236044:	83 e8 7f             	sub    eax,0x7f
  236047:	0f 90 c1             	seto   cl
  23604a:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
  23604d:	88 4d eb             	mov    BYTE PTR [rbp-0x15],cl
  236050:	0f 80 cf 00 00 00    	jo     236125 <floor32+0x105>
  236056:	e9 da 00 00 00       	jmp    236135 <floor32+0x115>
        return x;
  23605b:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  236060:	48 83 c4 30          	add    rsp,0x30
  236064:	5d                   	pop    rbp
  236065:	c3                   	ret    
    if (x == 0.0) {
  236066:	eb 00                	jmp    236068 <floor32+0x48>
    if (e >= 23) {
  236068:	83 7d f4 17          	cmp    DWORD PTR [rbp-0xc],0x17
  23606c:	7c 0b                	jl     236079 <floor32+0x59>
        return x;
  23606e:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  236073:	48 83 c4 30          	add    rsp,0x30
  236077:	5d                   	pop    rbp
  236078:	c3                   	ret    
    if (e >= 23) {
  236079:	eb 00                	jmp    23607b <floor32+0x5b>
    if (e >= 0) {
  23607b:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
  23607f:	7c 6f                	jl     2360f0 <floor32+0xd0>
        m = u32(0x007FFFFF) >> @intCast(u5, e);
  236081:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  236084:	83 f8 00             	cmp    eax,0x0
  236087:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
  23608a:	0f 8d eb 00 00 00    	jge    23617b <floor32+0x15b>
  236090:	e9 fa 00 00 00       	jmp    23618f <floor32+0x16f>
            return x;
  236095:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  23609a:	48 83 c4 30          	add    rsp,0x30
  23609e:	5d                   	pop    rbp
  23609f:	c3                   	ret    
        if (u & m == 0) {
  2360a0:	eb 00                	jmp    2360a2 <floor32+0x82>
  2360a2:	c5 fa 10 05 62 48 fd 	vmovss xmm0,DWORD PTR [rip+0xfffffffffffd4862]        # 20a90c <__unnamed_1439+0xb>
  2360a9:	ff 
        math.forceEval(x + 0x1.0p120);
  2360aa:	c5 fa 58 45 fc       	vaddss xmm0,xmm0,DWORD PTR [rbp-0x4]
  2360af:	e8 cc 05 00 00       	call   236680 <forceEval>
        if (u >> 31 != 0) {
  2360b4:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  2360b7:	c1 e8 1f             	shr    eax,0x1f
  2360ba:	83 f8 00             	cmp    eax,0x0
  2360bd:	74 1a                	je     2360d9 <floor32+0xb9>
            u += m;
  2360bf:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  2360c2:	03 45 f0             	add    eax,DWORD PTR [rbp-0x10]
  2360c5:	0f 92 c1             	setb   cl
  2360c8:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
  2360cb:	88 4d df             	mov    BYTE PTR [rbp-0x21],cl
  2360ce:	0f 82 02 01 00 00    	jb     2361d6 <floor32+0x1b6>
  2360d4:	e9 0d 01 00 00       	jmp    2361e6 <floor32+0x1c6>
        if (u >> 31 != 0) {
  2360d9:	eb 00                	jmp    2360db <floor32+0xbb>
        return @bitCast(f32, u & ~m);
  2360db:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  2360de:	8b 4d f0             	mov    ecx,DWORD PTR [rbp-0x10]
  2360e1:	83 f1 ff             	xor    ecx,0xffffffff
  2360e4:	21 c8                	and    eax,ecx
  2360e6:	c5 f9 6e c0          	vmovd  xmm0,eax
  2360ea:	48 83 c4 30          	add    rsp,0x30
  2360ee:	5d                   	pop    rbp
  2360ef:	c3                   	ret    
  2360f0:	c5 fa 10 05 14 48 fd 	vmovss xmm0,DWORD PTR [rip+0xfffffffffffd4814]        # 20a90c <__unnamed_1439+0xb>
  2360f7:	ff 
        math.forceEval(x + 0x1.0p120);
  2360f8:	c5 fa 58 45 fc       	vaddss xmm0,xmm0,DWORD PTR [rbp-0x4]
  2360fd:	e8 7e 05 00 00       	call   236680 <forceEval>
        if (u >> 31 == 0) {
  236102:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  236105:	c1 e8 1f             	shr    eax,0x1f
  236108:	83 f8 00             	cmp    eax,0x0
  23610b:	75 0a                	jne    236117 <floor32+0xf7>
  23610d:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
            return 0.0;
  236111:	48 83 c4 30          	add    rsp,0x30
  236115:	5d                   	pop    rbp
  236116:	c3                   	ret    
  236117:	c5 fa 10 05 f9 47 fd 	vmovss xmm0,DWORD PTR [rip+0xfffffffffffd47f9]        # 20a918 <__unnamed_1439+0x17>
  23611e:	ff 
            return -1.0;
  23611f:	48 83 c4 30          	add    rsp,0x30
  236123:	5d                   	pop    rbp
  236124:	c3                   	ret    
  236125:	48 8d 3d f4 dc 00 00 	lea    rdi,[rip+0xdcf4]        # 243e20 <__unnamed_4>
  23612c:	31 c0                	xor    eax,eax
  23612e:	89 c6                	mov    esi,eax
    const e = @intCast(i32, (u >> 23) & 0xFF) - 0x7F;
  236130:	e8 fb e6 ff ff       	call   234830 <panic>
  236135:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
  236139:	be aa 00 00 00       	mov    esi,0xaa
  23613e:	b8 04 00 00 00       	mov    eax,0x4
  236143:	89 c2                	mov    edx,eax
  236145:	48 8d 4d f0          	lea    rcx,[rbp-0x10]
  236149:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  23614c:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    var m: u32 = undefined;
  23614f:	48 89 cf             	mov    rdi,rcx
  236152:	c5 fa 11 45 d8       	vmovss DWORD PTR [rbp-0x28],xmm0
  236157:	e8 f4 e6 ff ff       	call   234850 <memset>
    if (x == 0.0) {
  23615c:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  236161:	c5 fa 10 4d d8       	vmovss xmm1,DWORD PTR [rbp-0x28]
  236166:	c5 f8 2e c1          	vucomiss xmm0,xmm1
  23616a:	0f 85 f6 fe ff ff    	jne    236066 <floor32+0x46>
  236170:	0f 8a f0 fe ff ff    	jp     236066 <floor32+0x46>
  236176:	e9 e0 fe ff ff       	jmp    23605b <floor32+0x3b>
        m = u32(0x007FFFFF) >> @intCast(u5, e);
  23617b:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  23617e:	88 c1                	mov    cl,al
  236180:	83 e0 1f             	and    eax,0x1f
  236183:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
  236186:	39 c2                	cmp    edx,eax
  236188:	88 4d d7             	mov    BYTE PTR [rbp-0x29],cl
  23618b:	74 12                	je     23619f <floor32+0x17f>
  23618d:	eb 37                	jmp    2361c6 <floor32+0x1a6>
  23618f:	48 8d 3d a2 dc 00 00 	lea    rdi,[rip+0xdca2]        # 243e38 <__unnamed_5>
  236196:	31 c0                	xor    eax,eax
  236198:	89 c6                	mov    esi,eax
  23619a:	e8 91 e6 ff ff       	call   234830 <panic>
  23619f:	b8 ff ff 7f 00       	mov    eax,0x7fffff
  2361a4:	8a 4d d7             	mov    cl,BYTE PTR [rbp-0x29]
  2361a7:	80 e1 1f             	and    cl,0x1f
  2361aa:	0f b6 c9             	movzx  ecx,cl
  2361ad:	d3 e8                	shr    eax,cl
  2361af:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
        if (u & m == 0) {
  2361b2:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  2361b5:	23 45 f0             	and    eax,DWORD PTR [rbp-0x10]
  2361b8:	83 f8 00             	cmp    eax,0x0
  2361bb:	0f 84 d4 fe ff ff    	je     236095 <floor32+0x75>
  2361c1:	e9 da fe ff ff       	jmp    2360a0 <floor32+0x80>
  2361c6:	48 8d 3d 3b dc 00 00 	lea    rdi,[rip+0xdc3b]        # 243e08 <__unnamed_3>
  2361cd:	31 c0                	xor    eax,eax
  2361cf:	89 c6                	mov    esi,eax
        m = u32(0x007FFFFF) >> @intCast(u5, e);
  2361d1:	e8 5a e6 ff ff       	call   234830 <panic>
  2361d6:	48 8d 3d 43 dc 00 00 	lea    rdi,[rip+0xdc43]        # 243e20 <__unnamed_4>
  2361dd:	31 c0                	xor    eax,eax
  2361df:	89 c6                	mov    esi,eax
            u += m;
  2361e1:	e8 4a e6 ff ff       	call   234830 <panic>
  2361e6:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  2361e9:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
        if (u >> 31 != 0) {
  2361ec:	e9 ea fe ff ff       	jmp    2360db <floor32+0xbb>
  2361f1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2361f8:	0f 1f 84 00 00 00 00 
  2361ff:	00 

0000000000236200 <ceil32>:
        else => @compileError("ceil not implemented for " ++ @typeName(T)),
    };
}

fn ceil32(x: f32) f32 {
  236200:	55                   	push   rbp
  236201:	48 89 e5             	mov    rbp,rsp
  236204:	48 83 ec 30          	sub    rsp,0x30
  236208:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
    var u = @bitCast(u32, x);
  23620d:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  236212:	c5 f9 7e c0          	vmovd  eax,xmm0
  236216:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
    var e = @intCast(i32, (u >> 23) & 0xFF) - 0x7F;
  236219:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  23621c:	c1 e8 17             	shr    eax,0x17
  23621f:	25 ff 00 00 00       	and    eax,0xff
  236224:	83 e8 7f             	sub    eax,0x7f
  236227:	0f 90 c1             	seto   cl
  23622a:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
  23622d:	88 4d eb             	mov    BYTE PTR [rbp-0x15],cl
  236230:	0f 80 d1 00 00 00    	jo     236307 <ceil32+0x107>
  236236:	e9 dc 00 00 00       	jmp    236317 <ceil32+0x117>
    var m: u32 = undefined;

    // TODO: Shouldn't need this explicit check.
    if (x == 0.0) {
        return x;
  23623b:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  236240:	48 83 c4 30          	add    rsp,0x30
  236244:	5d                   	pop    rbp
  236245:	c3                   	ret    
    if (x == 0.0) {
  236246:	eb 00                	jmp    236248 <ceil32+0x48>
    }

    if (e >= 23) {
  236248:	83 7d f4 17          	cmp    DWORD PTR [rbp-0xc],0x17
  23624c:	7c 0b                	jl     236259 <ceil32+0x59>
        return x;
  23624e:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  236253:	48 83 c4 30          	add    rsp,0x30
  236257:	5d                   	pop    rbp
  236258:	c3                   	ret    
    } else if (e >= 0) {
  236259:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
  23625d:	7c 73                	jl     2362d2 <ceil32+0xd2>
        m = u32(0x007FFFFF) >> @intCast(u5, e);
  23625f:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  236262:	83 f8 00             	cmp    eax,0x0
  236265:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
  236268:	0f 8d ef 00 00 00    	jge    23635d <ceil32+0x15d>
  23626e:	e9 fe 00 00 00       	jmp    236371 <ceil32+0x171>
        if (u & m == 0) {
            return x;
  236273:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  236278:	48 83 c4 30          	add    rsp,0x30
  23627c:	5d                   	pop    rbp
  23627d:	c3                   	ret    
        if (u & m == 0) {
  23627e:	eb 00                	jmp    236280 <ceil32+0x80>
  236280:	c5 fa 10 05 84 46 fd 	vmovss xmm0,DWORD PTR [rip+0xfffffffffffd4684]        # 20a90c <__unnamed_1439+0xb>
  236287:	ff 
        }
        math.forceEval(x + 0x1.0p120);
  236288:	c5 fa 58 45 fc       	vaddss xmm0,xmm0,DWORD PTR [rbp-0x4]
  23628d:	e8 ee 03 00 00       	call   236680 <forceEval>
        if (u >> 31 == 0) {
  236292:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  236295:	c1 e8 1f             	shr    eax,0x1f
  236298:	83 f8 00             	cmp    eax,0x0
  23629b:	75 1a                	jne    2362b7 <ceil32+0xb7>
            u += m;
  23629d:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  2362a0:	03 45 f0             	add    eax,DWORD PTR [rbp-0x10]
  2362a3:	0f 92 c1             	setb   cl
  2362a6:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
  2362a9:	88 4d df             	mov    BYTE PTR [rbp-0x21],cl
  2362ac:	0f 82 06 01 00 00    	jb     2363b8 <ceil32+0x1b8>
  2362b2:	e9 11 01 00 00       	jmp    2363c8 <ceil32+0x1c8>
        if (u >> 31 == 0) {
  2362b7:	eb 00                	jmp    2362b9 <ceil32+0xb9>
        }
        u &= ~m;
  2362b9:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  2362bc:	8b 4d f0             	mov    ecx,DWORD PTR [rbp-0x10]
  2362bf:	83 f1 ff             	xor    ecx,0xffffffff
  2362c2:	21 c8                	and    eax,ecx
  2362c4:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
        return @bitCast(f32, u);
  2362c7:	c5 f9 6e 45 f8       	vmovd  xmm0,DWORD PTR [rbp-0x8]
  2362cc:	48 83 c4 30          	add    rsp,0x30
  2362d0:	5d                   	pop    rbp
  2362d1:	c3                   	ret    
  2362d2:	c5 fa 10 05 32 46 fd 	vmovss xmm0,DWORD PTR [rip+0xfffffffffffd4632]        # 20a90c <__unnamed_1439+0xb>
  2362d9:	ff 
    } else {
        math.forceEval(x + 0x1.0p120);
  2362da:	c5 fa 58 45 fc       	vaddss xmm0,xmm0,DWORD PTR [rbp-0x4]
  2362df:	e8 9c 03 00 00       	call   236680 <forceEval>
        if (u >> 31 != 0) {
  2362e4:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  2362e7:	c1 e8 1f             	shr    eax,0x1f
  2362ea:	83 f8 00             	cmp    eax,0x0
  2362ed:	74 0a                	je     2362f9 <ceil32+0xf9>
  2362ef:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
            return -0.0;
  2362f3:	48 83 c4 30          	add    rsp,0x30
  2362f7:	5d                   	pop    rbp
  2362f8:	c3                   	ret    
  2362f9:	c5 fa 10 05 13 46 fd 	vmovss xmm0,DWORD PTR [rip+0xfffffffffffd4613]        # 20a914 <__unnamed_1439+0x13>
  236300:	ff 
        } else {
            return 1.0;
  236301:	48 83 c4 30          	add    rsp,0x30
  236305:	5d                   	pop    rbp
  236306:	c3                   	ret    
  236307:	48 8d 3d 12 db 00 00 	lea    rdi,[rip+0xdb12]        # 243e20 <__unnamed_4>
  23630e:	31 c0                	xor    eax,eax
  236310:	89 c6                	mov    esi,eax
    var e = @intCast(i32, (u >> 23) & 0xFF) - 0x7F;
  236312:	e8 19 e5 ff ff       	call   234830 <panic>
  236317:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
  23631b:	be aa 00 00 00       	mov    esi,0xaa
  236320:	b8 04 00 00 00       	mov    eax,0x4
  236325:	89 c2                	mov    edx,eax
  236327:	48 8d 4d f0          	lea    rcx,[rbp-0x10]
  23632b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  23632e:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    var m: u32 = undefined;
  236331:	48 89 cf             	mov    rdi,rcx
  236334:	c5 fa 11 45 d8       	vmovss DWORD PTR [rbp-0x28],xmm0
  236339:	e8 12 e5 ff ff       	call   234850 <memset>
    if (x == 0.0) {
  23633e:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  236343:	c5 fa 10 4d d8       	vmovss xmm1,DWORD PTR [rbp-0x28]
  236348:	c5 f8 2e c1          	vucomiss xmm0,xmm1
  23634c:	0f 85 f4 fe ff ff    	jne    236246 <ceil32+0x46>
  236352:	0f 8a ee fe ff ff    	jp     236246 <ceil32+0x46>
  236358:	e9 de fe ff ff       	jmp    23623b <ceil32+0x3b>
        m = u32(0x007FFFFF) >> @intCast(u5, e);
  23635d:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  236360:	88 c1                	mov    cl,al
  236362:	83 e0 1f             	and    eax,0x1f
  236365:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
  236368:	39 c2                	cmp    edx,eax
  23636a:	88 4d d7             	mov    BYTE PTR [rbp-0x29],cl
  23636d:	74 12                	je     236381 <ceil32+0x181>
  23636f:	eb 37                	jmp    2363a8 <ceil32+0x1a8>
  236371:	48 8d 3d c0 da 00 00 	lea    rdi,[rip+0xdac0]        # 243e38 <__unnamed_5>
  236378:	31 c0                	xor    eax,eax
  23637a:	89 c6                	mov    esi,eax
  23637c:	e8 af e4 ff ff       	call   234830 <panic>
  236381:	b8 ff ff 7f 00       	mov    eax,0x7fffff
  236386:	8a 4d d7             	mov    cl,BYTE PTR [rbp-0x29]
  236389:	80 e1 1f             	and    cl,0x1f
  23638c:	0f b6 c9             	movzx  ecx,cl
  23638f:	d3 e8                	shr    eax,cl
  236391:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
        if (u & m == 0) {
  236394:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  236397:	23 45 f0             	and    eax,DWORD PTR [rbp-0x10]
  23639a:	83 f8 00             	cmp    eax,0x0
  23639d:	0f 84 d0 fe ff ff    	je     236273 <ceil32+0x73>
  2363a3:	e9 d6 fe ff ff       	jmp    23627e <ceil32+0x7e>
  2363a8:	48 8d 3d 59 da 00 00 	lea    rdi,[rip+0xda59]        # 243e08 <__unnamed_3>
  2363af:	31 c0                	xor    eax,eax
  2363b1:	89 c6                	mov    esi,eax
        m = u32(0x007FFFFF) >> @intCast(u5, e);
  2363b3:	e8 78 e4 ff ff       	call   234830 <panic>
  2363b8:	48 8d 3d 61 da 00 00 	lea    rdi,[rip+0xda61]        # 243e20 <__unnamed_4>
  2363bf:	31 c0                	xor    eax,eax
  2363c1:	89 c6                	mov    esi,eax
            u += m;
  2363c3:	e8 68 e4 ff ff       	call   234830 <panic>
  2363c8:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  2363cb:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
        if (u >> 31 == 0) {
  2363ce:	e9 e6 fe ff ff       	jmp    2362b9 <ceil32+0xb9>
  2363d3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2363da:	84 00 00 00 00 00 

00000000002363e0 <floor64>:
fn floor64(x: f64) f64 {
  2363e0:	55                   	push   rbp
  2363e1:	48 89 e5             	mov    rbp,rsp
  2363e4:	48 83 ec 30          	sub    rsp,0x30
  2363e8:	be aa 00 00 00       	mov    esi,0xaa
  2363ed:	b8 08 00 00 00       	mov    eax,0x8
  2363f2:	89 c2                	mov    edx,eax
  2363f4:	48 8d 4d e0          	lea    rcx,[rbp-0x20]
  2363f8:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    const u = @bitCast(u64, x);
  2363fd:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  236402:	c4 e1 f9 7e c7       	vmovq  rdi,xmm0
  236407:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
    const e = (u >> 52) & 0x7FF;
  23640b:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  23640f:	48 c1 ef 34          	shr    rdi,0x34
  236413:	48 81 e7 ff 07 00 00 	and    rdi,0x7ff
  23641a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    var y: f64 = undefined;
  23641e:	48 89 cf             	mov    rdi,rcx
  236421:	e8 2a e4 ff ff       	call   234850 <memset>
    if (e >= 0x3FF + 52 or x == 0) {
  236426:	48 81 7d e8 33 04 00 	cmp    QWORD PTR [rbp-0x18],0x433
  23642d:	00 
  23642e:	41 0f 93 c0          	setae  r8b
  236432:	41 f6 c0 01          	test   r8b,0x1
  236436:	44 88 45 df          	mov    BYTE PTR [rbp-0x21],r8b
  23643a:	75 18                	jne    236454 <floor64+0x74>
  23643c:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
  236440:	c5 fb 10 4d f8       	vmovsd xmm1,QWORD PTR [rbp-0x8]
  236445:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  236449:	0f 94 c0             	sete   al
  23644c:	0f 9b c1             	setnp  cl
  23644f:	20 c8                	and    al,cl
  236451:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
  236454:	8a 45 df             	mov    al,BYTE PTR [rbp-0x21]
  236457:	a8 01                	test   al,0x1
  236459:	75 02                	jne    23645d <floor64+0x7d>
  23645b:	eb 0b                	jmp    236468 <floor64+0x88>
        return x;
  23645d:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  236462:	48 83 c4 30          	add    rsp,0x30
  236466:	5d                   	pop    rbp
  236467:	c3                   	ret    
    if (e >= 0x3FF + 52 or x == 0) {
  236468:	eb 00                	jmp    23646a <floor64+0x8a>
    if (u >> 63 != 0) {
  23646a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  23646e:	48 c1 e8 3f          	shr    rax,0x3f
  236472:	48 83 f8 00          	cmp    rax,0x0
  236476:	74 21                	je     236499 <floor64+0xb9>
  236478:	c5 fb 10 05 b0 a7 fc 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffca7b0]        # 200c30 <__unnamed_186+0x30>
  23647f:	ff 
        y = x - math.f64_toint + math.f64_toint - x;
  236480:	c5 fb 10 4d f8       	vmovsd xmm1,QWORD PTR [rbp-0x8]
  236485:	c5 f3 5c c8          	vsubsd xmm1,xmm1,xmm0
  236489:	c5 f3 58 c0          	vaddsd xmm0,xmm1,xmm0
  23648d:	c5 fb 5c 45 f8       	vsubsd xmm0,xmm0,QWORD PTR [rbp-0x8]
  236492:	c5 fb 11 45 e0       	vmovsd QWORD PTR [rbp-0x20],xmm0
    if (u >> 63 != 0) {
  236497:	eb 1b                	jmp    2364b4 <floor64+0xd4>
  236499:	c5 fb 10 05 8f a7 fc 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffca78f]        # 200c30 <__unnamed_186+0x30>
  2364a0:	ff 
        y = x + math.f64_toint - math.f64_toint - x;
  2364a1:	c5 fb 58 4d f8       	vaddsd xmm1,xmm0,QWORD PTR [rbp-0x8]
  2364a6:	c5 f3 5c c0          	vsubsd xmm0,xmm1,xmm0
  2364aa:	c5 fb 5c 45 f8       	vsubsd xmm0,xmm0,QWORD PTR [rbp-0x8]
  2364af:	c5 fb 11 45 e0       	vmovsd QWORD PTR [rbp-0x20],xmm0
    if (e <= 0x3FF - 1) {
  2364b4:	48 81 7d e8 fe 03 00 	cmp    QWORD PTR [rbp-0x18],0x3fe
  2364bb:	00 
  2364bc:	77 30                	ja     2364ee <floor64+0x10e>
        math.forceEval(y);
  2364be:	c5 fb 10 45 e0       	vmovsd xmm0,QWORD PTR [rbp-0x20]
  2364c3:	e8 08 02 00 00       	call   2366d0 <forceEval.6>
        if (u >> 63 != 0) {
  2364c8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2364cc:	48 c1 e8 3f          	shr    rax,0x3f
  2364d0:	48 83 f8 00          	cmp    rax,0x0
  2364d4:	74 0e                	je     2364e4 <floor64+0x104>
  2364d6:	c5 fb 10 05 32 a7 fc 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffca732]        # 200c10 <__unnamed_186+0x10>
  2364dd:	ff 
            return -1.0;
  2364de:	48 83 c4 30          	add    rsp,0x30
  2364e2:	5d                   	pop    rbp
  2364e3:	c3                   	ret    
  2364e4:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
            return 0.0;
  2364e8:	48 83 c4 30          	add    rsp,0x30
  2364ec:	5d                   	pop    rbp
  2364ed:	c3                   	ret    
  2364ee:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
    } else if (y > 0) {
  2364f2:	c5 fb 10 4d e0       	vmovsd xmm1,QWORD PTR [rbp-0x20]
  2364f7:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  2364fb:	76 1c                	jbe    236519 <floor64+0x139>
  2364fd:	c5 fb 10 05 f3 a6 fc 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffca6f3]        # 200bf8 <__unnamed_187+0x8>
  236504:	ff 
        return x + y - 1;
  236505:	c5 fb 10 4d f8       	vmovsd xmm1,QWORD PTR [rbp-0x8]
  23650a:	c5 f3 58 4d e0       	vaddsd xmm1,xmm1,QWORD PTR [rbp-0x20]
  23650f:	c5 f3 5c c0          	vsubsd xmm0,xmm1,xmm0
  236513:	48 83 c4 30          	add    rsp,0x30
  236517:	5d                   	pop    rbp
  236518:	c3                   	ret    
        return x + y;
  236519:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  23651e:	c5 fb 58 45 e0       	vaddsd xmm0,xmm0,QWORD PTR [rbp-0x20]
  236523:	48 83 c4 30          	add    rsp,0x30
  236527:	5d                   	pop    rbp
  236528:	c3                   	ret    
  236529:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000236530 <ceil64>:
        }
    }
}

fn ceil64(x: f64) f64 {
  236530:	55                   	push   rbp
  236531:	48 89 e5             	mov    rbp,rsp
  236534:	48 83 ec 30          	sub    rsp,0x30
  236538:	be aa 00 00 00       	mov    esi,0xaa
  23653d:	b8 08 00 00 00       	mov    eax,0x8
  236542:	89 c2                	mov    edx,eax
  236544:	48 8d 4d e0          	lea    rcx,[rbp-0x20]
  236548:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    const u = @bitCast(u64, x);
  23654d:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  236552:	c4 e1 f9 7e c7       	vmovq  rdi,xmm0
  236557:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
    const e = (u >> 52) & 0x7FF;
  23655b:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  23655f:	48 c1 ef 34          	shr    rdi,0x34
  236563:	48 81 e7 ff 07 00 00 	and    rdi,0x7ff
  23656a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    var y: f64 = undefined;
  23656e:	48 89 cf             	mov    rdi,rcx
  236571:	e8 da e2 ff ff       	call   234850 <memset>

    if (e >= 0x3FF + 52 or x == 0) {
  236576:	48 81 7d e8 33 04 00 	cmp    QWORD PTR [rbp-0x18],0x433
  23657d:	00 
  23657e:	41 0f 93 c0          	setae  r8b
  236582:	41 f6 c0 01          	test   r8b,0x1
  236586:	44 88 45 df          	mov    BYTE PTR [rbp-0x21],r8b
  23658a:	75 18                	jne    2365a4 <ceil64+0x74>
  23658c:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
  236590:	c5 fb 10 4d f8       	vmovsd xmm1,QWORD PTR [rbp-0x8]
  236595:	c5 f9 2e c8          	vucomisd xmm1,xmm0
  236599:	0f 94 c0             	sete   al
  23659c:	0f 9b c1             	setnp  cl
  23659f:	20 c8                	and    al,cl
  2365a1:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
  2365a4:	8a 45 df             	mov    al,BYTE PTR [rbp-0x21]
  2365a7:	a8 01                	test   al,0x1
  2365a9:	75 02                	jne    2365ad <ceil64+0x7d>
  2365ab:	eb 0b                	jmp    2365b8 <ceil64+0x88>
        return x;
  2365ad:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  2365b2:	48 83 c4 30          	add    rsp,0x30
  2365b6:	5d                   	pop    rbp
  2365b7:	c3                   	ret    
    if (e >= 0x3FF + 52 or x == 0) {
  2365b8:	eb 00                	jmp    2365ba <ceil64+0x8a>
    }

    if (u >> 63 != 0) {
  2365ba:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  2365be:	48 c1 e8 3f          	shr    rax,0x3f
  2365c2:	48 83 f8 00          	cmp    rax,0x0
  2365c6:	74 21                	je     2365e9 <ceil64+0xb9>
  2365c8:	c5 fb 10 05 60 a6 fc 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffca660]        # 200c30 <__unnamed_186+0x30>
  2365cf:	ff 
        @setFloatMode(this, builtin.FloatMode.Strict);
        y = x - math.f64_toint + math.f64_toint - x;
  2365d0:	c5 fb 10 4d f8       	vmovsd xmm1,QWORD PTR [rbp-0x8]
  2365d5:	c5 f3 5c c8          	vsubsd xmm1,xmm1,xmm0
  2365d9:	c5 f3 58 c0          	vaddsd xmm0,xmm1,xmm0
  2365dd:	c5 fb 5c 45 f8       	vsubsd xmm0,xmm0,QWORD PTR [rbp-0x8]
  2365e2:	c5 fb 11 45 e0       	vmovsd QWORD PTR [rbp-0x20],xmm0
    if (u >> 63 != 0) {
  2365e7:	eb 1b                	jmp    236604 <ceil64+0xd4>
  2365e9:	c5 fb 10 05 3f a6 fc 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffca63f]        # 200c30 <__unnamed_186+0x30>
  2365f0:	ff 
    } else {
        @setFloatMode(this, builtin.FloatMode.Strict);
        y = x + math.f64_toint - math.f64_toint - x;
  2365f1:	c5 fb 58 4d f8       	vaddsd xmm1,xmm0,QWORD PTR [rbp-0x8]
  2365f6:	c5 f3 5c c0          	vsubsd xmm0,xmm1,xmm0
  2365fa:	c5 fb 5c 45 f8       	vsubsd xmm0,xmm0,QWORD PTR [rbp-0x8]
  2365ff:	c5 fb 11 45 e0       	vmovsd QWORD PTR [rbp-0x20],xmm0
    }

    if (e <= 0x3FF - 1) {
  236604:	48 81 7d e8 fe 03 00 	cmp    QWORD PTR [rbp-0x18],0x3fe
  23660b:	00 
  23660c:	77 30                	ja     23663e <ceil64+0x10e>
        math.forceEval(y);
  23660e:	c5 fb 10 45 e0       	vmovsd xmm0,QWORD PTR [rbp-0x20]
  236613:	e8 b8 00 00 00       	call   2366d0 <forceEval.6>
        if (u >> 63 != 0) {
  236618:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  23661c:	48 c1 e8 3f          	shr    rax,0x3f
  236620:	48 83 f8 00          	cmp    rax,0x0
  236624:	74 0a                	je     236630 <ceil64+0x100>
  236626:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
            return -0.0;
  23662a:	48 83 c4 30          	add    rsp,0x30
  23662e:	5d                   	pop    rbp
  23662f:	c3                   	ret    
  236630:	c5 fb 10 05 c0 a5 fc 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffca5c0]        # 200bf8 <__unnamed_187+0x8>
  236637:	ff 
        } else {
            return 1.0;
  236638:	48 83 c4 30          	add    rsp,0x30
  23663c:	5d                   	pop    rbp
  23663d:	c3                   	ret    
  23663e:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
        }
    } else if (y < 0) {
  236642:	c5 f9 2e 45 e0       	vucomisd xmm0,QWORD PTR [rbp-0x20]
  236647:	76 1c                	jbe    236665 <ceil64+0x135>
  236649:	c5 fb 10 05 a7 a5 fc 	vmovsd xmm0,QWORD PTR [rip+0xfffffffffffca5a7]        # 200bf8 <__unnamed_187+0x8>
  236650:	ff 
        return x + y + 1;
  236651:	c5 fb 10 4d f8       	vmovsd xmm1,QWORD PTR [rbp-0x8]
  236656:	c5 f3 58 4d e0       	vaddsd xmm1,xmm1,QWORD PTR [rbp-0x20]
  23665b:	c5 f3 58 c0          	vaddsd xmm0,xmm1,xmm0
  23665f:	48 83 c4 30          	add    rsp,0x30
  236663:	5d                   	pop    rbp
  236664:	c3                   	ret    
    } else {
        return x + y;
  236665:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  23666a:	c5 fb 58 45 e0       	vaddsd xmm0,xmm0,QWORD PTR [rbp-0x20]
  23666f:	48 83 c4 30          	add    rsp,0x30
  236673:	5d                   	pop    rbp
  236674:	c3                   	ret    
  236675:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  23667c:	00 00 00 00 

0000000000236680 <forceEval>:
  236680:	55                   	push   rbp
  236681:	48 89 e5             	mov    rbp,rsp
  236684:	48 83 ec 20          	sub    rsp,0x20
  236688:	48 8d 45 f8          	lea    rax,[rbp-0x8]
  23668c:	be aa 00 00 00       	mov    esi,0xaa
  236691:	b9 04 00 00 00       	mov    ecx,0x4
  236696:	89 ca                	mov    edx,ecx
  236698:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
            var x: f32 = undefined;
  23669d:	48 89 c7             	mov    rdi,rax
  2366a0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  2366a4:	e8 a7 e1 ff ff       	call   234850 <memset>
            const p = @ptrCast(*volatile f32, &x);
  2366a9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  2366ad:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
            p.* = x;
  2366b1:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  2366b5:	c5 fa 10 45 f8       	vmovss xmm0,DWORD PTR [rbp-0x8]
  2366ba:	c5 fa 11 02          	vmovss DWORD PTR [rdx],xmm0
pub fn forceEval(value: var) void {
  2366be:	48 83 c4 20          	add    rsp,0x20
  2366c2:	5d                   	pop    rbp
  2366c3:	c3                   	ret    
  2366c4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2366cb:	00 00 00 00 00 

00000000002366d0 <forceEval.6>:
  2366d0:	55                   	push   rbp
  2366d1:	48 89 e5             	mov    rbp,rsp
  2366d4:	48 83 ec 20          	sub    rsp,0x20
  2366d8:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  2366dc:	be aa 00 00 00       	mov    esi,0xaa
  2366e1:	b9 08 00 00 00       	mov    ecx,0x8
  2366e6:	89 ca                	mov    edx,ecx
  2366e8:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
            var x: f64 = undefined;
  2366ed:	48 89 c7             	mov    rdi,rax
  2366f0:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  2366f4:	e8 57 e1 ff ff       	call   234850 <memset>
            const p = @ptrCast(*volatile f64, &x);
  2366f9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2366fd:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
            p.* = x;
  236701:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  236705:	c5 fb 10 45 f0       	vmovsd xmm0,QWORD PTR [rbp-0x10]
  23670a:	c5 fb 11 02          	vmovsd QWORD PTR [rdx],xmm0
pub fn forceEval(value: var) void {
  23670e:	48 83 c4 20          	add    rsp,0x20
  236712:	5d                   	pop    rbp
  236713:	c3                   	ret    
  236714:	cc                   	int3   
  236715:	cc                   	int3   
  236716:	cc                   	int3   
  236717:	cc                   	int3   
  236718:	cc                   	int3   
  236719:	cc                   	int3   
  23671a:	cc                   	int3   
  23671b:	cc                   	int3   
  23671c:	cc                   	int3   
  23671d:	cc                   	int3   
  23671e:	cc                   	int3   
  23671f:	cc                   	int3   

0000000000236720 <assert>:
pub fn assert(ok: bool) void {
  236720:	55                   	push   rbp
  236721:	48 89 e5             	mov    rbp,rsp
  236724:	48 83 ec 10          	sub    rsp,0x10
  236728:	40 88 f8             	mov    al,dil
  23672b:	24 01                	and    al,0x1
  23672d:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
    if (!ok) {
  236730:	8a 45 ff             	mov    al,BYTE PTR [rbp-0x1]
  236733:	84 c0                	test   al,al
  236735:	75 12                	jne    236749 <assert+0x29>
  236737:	eb 00                	jmp    236739 <assert+0x19>
  236739:	48 8d 3d 20 d7 00 00 	lea    rdi,[rip+0xd720]        # 243e60 <__unnamed_1>
  236740:	31 c0                	xor    eax,eax
  236742:	89 c6                	mov    esi,eax
            unreachable; // assertion failure
  236744:	e8 47 00 00 00       	call   236790 <panic>
    if (!ok) {
  236749:	eb 00                	jmp    23674b <assert+0x2b>
pub fn assert(ok: bool) void {
  23674b:	48 83 c4 10          	add    rsp,0x10
  23674f:	5d                   	pop    rbp
  236750:	c3                   	ret    
  236751:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  236758:	0f 1f 84 00 00 00 00 
  23675f:	00 

0000000000236760 <__udivmoddi4>:
const udivmod = @import("udivmod.zig").udivmod;
const builtin = @import("builtin");

pub extern fn __udivmoddi4(a: u64, b: u64, maybe_rem: ?*u64) u64 {
  236760:	55                   	push   rbp
  236761:	48 89 e5             	mov    rbp,rsp
  236764:	48 83 ec 20          	sub    rsp,0x20
  236768:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  23676c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  236770:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    @setRuntimeSafety(builtin.is_test);
    return udivmod(u64, a, b, maybe_rem);
  236774:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  236778:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  23677c:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  236780:	e8 5b 3d 00 00       	call   23a4e0 <udivmod>
  236785:	48 83 c4 20          	add    rsp,0x20
  236789:	5d                   	pop    rbp
  23678a:	c3                   	ret    
  23678b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000236790 <panic>:

const __udivmoddi4 = @import("udivmoddi4.zig").__udivmoddi4;

// Avoid dragging in the runtime safety mechanisms into this .o file,
// unless we're trying to test this file.
pub fn panic(msg: []const u8, error_return_trace: ?*builtin.StackTrace) noreturn {
  236790:	55                   	push   rbp
  236791:	48 89 e5             	mov    rbp,rsp
  236794:	48 83 ec 10          	sub    rsp,0x10
  236798:	48 8d 3d c1 d6 00 00 	lea    rdi,[rip+0xd6c1]        # 243e60 <__unnamed_1>
  23679f:	31 c0                	xor    eax,eax
  2367a1:	89 c1                	mov    ecx,eax
  2367a3:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
    @setCold(true);
    if (is_test) {
        std.debug.panic("{}", msg);
    } else {
        unreachable;
  2367a7:	48 89 ce             	mov    rsi,rcx
  2367aa:	e8 e1 ff ff ff       	call   236790 <panic>
  2367af:	90                   	nop

00000000002367b0 <__cmptf2>:
const infRep = exponentMask;

const builtin = @import("builtin");
const is_test = builtin.is_test;

pub extern fn __letf2(a: f128, b: f128) c_int {
  2367b0:	55                   	push   rbp
  2367b1:	48 89 e5             	mov    rbp,rsp
  2367b4:	48 83 ec 30          	sub    rsp,0x30
  2367b8:	0f 29 45 f0          	movaps XMMWORD PTR [rbp-0x10],xmm0
  2367bc:	0f 29 4d e0          	movaps XMMWORD PTR [rbp-0x20],xmm1
    @setRuntimeSafety(is_test);

    const aInt = @bitCast(rep_t, a);
  2367c0:	0f 28 45 f0          	movaps xmm0,XMMWORD PTR [rbp-0x10]
  2367c4:	0f 29 45 d0          	movaps XMMWORD PTR [rbp-0x30],xmm0
    const bInt = @bitCast(rep_t, b);
  2367c8:	0f 28 45 e0          	movaps xmm0,XMMWORD PTR [rbp-0x20]
  2367cc:	0f 29 45 c0          	movaps XMMWORD PTR [rbp-0x40],xmm0

    const aAbs: rep_t = aInt & absMask;
  2367d0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2367d4:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  2367d8:	b2 3f                	mov    dl,0x3f
  2367da:	40 88 d6             	mov    sil,dl
  2367dd:	c4 e2 c8 f5 c9       	bzhi   rcx,rcx,rsi
  2367e2:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  2367e6:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
    const bAbs: rep_t = bInt & absMask;
  2367ea:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  2367ee:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  2367f2:	c4 e2 c8 f5 c9       	bzhi   rcx,rcx,rsi
  2367f7:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  2367fb:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx

    // If either a or b is NaN, they are unordered.
    if (aAbs > infRep or bAbs > infRep) return LE_UNORDERED;
  2367ff:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  236803:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  236807:	48 f7 d8             	neg    rax
  23680a:	48 be 00 00 00 00 00 	movabs rsi,0x7fff000000000000
  236811:	00 ff 7f 
  236814:	48 19 ce             	sbb    rsi,rcx
  236817:	0f 92 c2             	setb   dl
  23681a:	f6 c2 01             	test   dl,0x1
  23681d:	48 89 75 98          	mov    QWORD PTR [rbp-0x68],rsi
  236821:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  236825:	88 55 8f             	mov    BYTE PTR [rbp-0x71],dl
  236828:	75 2b                	jne    236855 <__cmptf2+0xa5>
  23682a:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  23682e:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  236832:	48 f7 d8             	neg    rax
  236835:	48 ba 00 00 00 00 00 	movabs rdx,0x7fff000000000000
  23683c:	00 ff 7f 
  23683f:	48 19 ca             	sbb    rdx,rcx
  236842:	40 0f 92 c6          	setb   sil
  236846:	48 89 55 80          	mov    QWORD PTR [rbp-0x80],rdx
  23684a:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  236851:	40 88 75 8f          	mov    BYTE PTR [rbp-0x71],sil
  236855:	8a 45 8f             	mov    al,BYTE PTR [rbp-0x71]
  236858:	a8 01                	test   al,0x1
  23685a:	75 02                	jne    23685e <__cmptf2+0xae>
  23685c:	eb 0b                	jmp    236869 <__cmptf2+0xb9>
  23685e:	b8 01 00 00 00       	mov    eax,0x1
  236863:	48 83 c4 30          	add    rsp,0x30
  236867:	5d                   	pop    rbp
  236868:	c3                   	ret    
  236869:	eb 00                	jmp    23686b <__cmptf2+0xbb>

    // If a and b are both zeros, they are equal.
    if ((aAbs | bAbs) == 0) return LE_EQUAL;
  23686b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  23686f:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  236873:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  236877:	48 8b 75 a8          	mov    rsi,QWORD PTR [rbp-0x58]
  23687b:	48 09 f1             	or     rcx,rsi
  23687e:	48 09 d0             	or     rax,rdx
  236881:	48 09 c8             	or     rax,rcx
  236884:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  23688b:	75 0a                	jne    236897 <__cmptf2+0xe7>
  23688d:	eb 00                	jmp    23688f <__cmptf2+0xdf>
  23688f:	31 c0                	xor    eax,eax
  236891:	48 83 c4 30          	add    rsp,0x30
  236895:	5d                   	pop    rbp
  236896:	c3                   	ret    
  236897:	eb 00                	jmp    236899 <__cmptf2+0xe9>

    // If at least one of a and b is positive, we get the same result comparing
    // a and b as signed integers as we would with a floating-point compare.
    return if ((aInt & bInt) >= 0) if (aInt < bInt)
  236899:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23689d:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  2368a1:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  2368a5:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  2368a9:	48 29 d0             	sub    rax,rdx
  2368ac:	48 19 f1             	sbb    rcx,rsi
  2368af:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
  2368b6:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  2368bd:	73 0f                	jae    2368ce <__cmptf2+0x11e>
  2368bf:	eb 00                	jmp    2368c1 <__cmptf2+0x111>
  2368c1:	b8 ff ff ff ff       	mov    eax,0xffffffff
  2368c6:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
  2368cc:	eb 44                	jmp    236912 <__cmptf2+0x162>
        LE_LESS
    else if (aInt == bInt)
  2368ce:	c5 fa 6f 45 d0       	vmovdqu xmm0,XMMWORD PTR [rbp-0x30]
  2368d3:	c5 fa 6f 4d c0       	vmovdqu xmm1,XMMWORD PTR [rbp-0x40]
  2368d8:	c5 f9 74 c1          	vpcmpeqb xmm0,xmm0,xmm1
  2368dc:	c5 f9 d7 c0          	vpmovmskb eax,xmm0
  2368e0:	2d ff ff 00 00       	sub    eax,0xffff
  2368e5:	89 85 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],eax
  2368eb:	75 0c                	jne    2368f9 <__cmptf2+0x149>
  2368ed:	eb 00                	jmp    2368ef <__cmptf2+0x13f>
  2368ef:	31 c0                	xor    eax,eax
  2368f1:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
  2368f7:	eb 0d                	jmp    236906 <__cmptf2+0x156>
  2368f9:	b8 01 00 00 00       	mov    eax,0x1
  2368fe:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
  236904:	eb 00                	jmp    236906 <__cmptf2+0x156>
  236906:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
  23690c:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
    return if ((aInt & bInt) >= 0) if (aInt < bInt)
  236912:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
  236918:	48 83 c4 30          	add    rsp,0x30
  23691c:	5d                   	pop    rbp
  23691d:	c3                   	ret    
  23691e:	66 90                	xchg   ax,ax

0000000000236920 <__gttf2>:
const GE_LESS = c_int(-1);
const GE_EQUAL = c_int(0);
const GE_GREATER = c_int(1);
const GE_UNORDERED = c_int(-1); // Note: different from LE_UNORDERED

pub extern fn __getf2(a: f128, b: f128) c_int {
  236920:	55                   	push   rbp
  236921:	48 89 e5             	mov    rbp,rsp
  236924:	48 83 ec 50          	sub    rsp,0x50
  236928:	0f 29 45 f0          	movaps XMMWORD PTR [rbp-0x10],xmm0
  23692c:	0f 29 4d e0          	movaps XMMWORD PTR [rbp-0x20],xmm1
    @setRuntimeSafety(is_test);

    const aInt = @bitCast(srep_t, a);
  236930:	0f 28 45 f0          	movaps xmm0,XMMWORD PTR [rbp-0x10]
  236934:	0f 29 45 d0          	movaps XMMWORD PTR [rbp-0x30],xmm0
    const bInt = @bitCast(srep_t, b);
  236938:	0f 28 45 e0          	movaps xmm0,XMMWORD PTR [rbp-0x20]
  23693c:	0f 29 45 c0          	movaps XMMWORD PTR [rbp-0x40],xmm0
    const aAbs = @bitCast(rep_t, aInt) & absMask;
  236940:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  236944:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  236948:	b2 3f                	mov    dl,0x3f
  23694a:	40 88 d6             	mov    sil,dl
  23694d:	c4 e2 c8 f5 c9       	bzhi   rcx,rcx,rsi
  236952:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  236956:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
    const bAbs = @bitCast(rep_t, bInt) & absMask;
  23695a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  23695e:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  236962:	c4 e2 c8 f5 c9       	bzhi   rcx,rcx,rsi
  236967:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  23696b:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx

    if (aAbs > infRep or bAbs > infRep) return GE_UNORDERED;
  23696f:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  236973:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  236977:	48 f7 d8             	neg    rax
  23697a:	48 be 00 00 00 00 00 	movabs rsi,0x7fff000000000000
  236981:	00 ff 7f 
  236984:	48 19 ce             	sbb    rsi,rcx
  236987:	0f 92 c2             	setb   dl
  23698a:	f6 c2 01             	test   dl,0x1
  23698d:	48 89 75 98          	mov    QWORD PTR [rbp-0x68],rsi
  236991:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  236995:	88 55 8f             	mov    BYTE PTR [rbp-0x71],dl
  236998:	75 2b                	jne    2369c5 <__gttf2+0xa5>
  23699a:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  23699e:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  2369a2:	48 f7 d8             	neg    rax
  2369a5:	48 ba 00 00 00 00 00 	movabs rdx,0x7fff000000000000
  2369ac:	00 ff 7f 
  2369af:	48 19 ca             	sbb    rdx,rcx
  2369b2:	40 0f 92 c6          	setb   sil
  2369b6:	48 89 55 80          	mov    QWORD PTR [rbp-0x80],rdx
  2369ba:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  2369c1:	40 88 75 8f          	mov    BYTE PTR [rbp-0x71],sil
  2369c5:	8a 45 8f             	mov    al,BYTE PTR [rbp-0x71]
  2369c8:	a8 01                	test   al,0x1
  2369ca:	75 02                	jne    2369ce <__gttf2+0xae>
  2369cc:	eb 0b                	jmp    2369d9 <__gttf2+0xb9>
  2369ce:	b8 ff ff ff ff       	mov    eax,0xffffffff
  2369d3:	48 83 c4 50          	add    rsp,0x50
  2369d7:	5d                   	pop    rbp
  2369d8:	c3                   	ret    
  2369d9:	eb 00                	jmp    2369db <__gttf2+0xbb>
    if ((aAbs | bAbs) == 0) return GE_EQUAL;
  2369db:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  2369df:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  2369e3:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  2369e7:	48 8b 75 a8          	mov    rsi,QWORD PTR [rbp-0x58]
  2369eb:	48 09 f1             	or     rcx,rsi
  2369ee:	48 09 d0             	or     rax,rdx
  2369f1:	48 09 c8             	or     rax,rcx
  2369f4:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  2369fb:	75 0a                	jne    236a07 <__gttf2+0xe7>
  2369fd:	eb 00                	jmp    2369ff <__gttf2+0xdf>
  2369ff:	31 c0                	xor    eax,eax
  236a01:	48 83 c4 50          	add    rsp,0x50
  236a05:	5d                   	pop    rbp
  236a06:	c3                   	ret    
  236a07:	eb 00                	jmp    236a09 <__gttf2+0xe9>
    return if ((aInt & bInt) >= 0) if (aInt < bInt)
  236a09:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  236a0d:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  236a11:	48 85 c8             	test   rax,rcx
  236a14:	0f 88 8c 00 00 00    	js     236aa6 <__gttf2+0x186>
  236a1a:	eb 00                	jmp    236a1c <__gttf2+0xfc>
  236a1c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  236a20:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  236a24:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  236a28:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  236a2c:	48 29 d0             	sub    rax,rdx
  236a2f:	48 19 f1             	sbb    rcx,rsi
  236a32:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
  236a39:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  236a40:	7d 0f                	jge    236a51 <__gttf2+0x131>
  236a42:	eb 00                	jmp    236a44 <__gttf2+0x124>
  236a44:	b8 ff ff ff ff       	mov    eax,0xffffffff
  236a49:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
  236a4f:	eb 44                	jmp    236a95 <__gttf2+0x175>
        GE_LESS
    else if (aInt == bInt)
  236a51:	c5 fa 6f 45 d0       	vmovdqu xmm0,XMMWORD PTR [rbp-0x30]
  236a56:	c5 fa 6f 4d c0       	vmovdqu xmm1,XMMWORD PTR [rbp-0x40]
  236a5b:	c5 f9 74 c1          	vpcmpeqb xmm0,xmm0,xmm1
  236a5f:	c5 f9 d7 c0          	vpmovmskb eax,xmm0
  236a63:	2d ff ff 00 00       	sub    eax,0xffff
  236a68:	89 85 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],eax
  236a6e:	75 0c                	jne    236a7c <__gttf2+0x15c>
  236a70:	eb 00                	jmp    236a72 <__gttf2+0x152>
  236a72:	31 c0                	xor    eax,eax
  236a74:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
  236a7a:	eb 0d                	jmp    236a89 <__gttf2+0x169>
  236a7c:	b8 01 00 00 00       	mov    eax,0x1
  236a81:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
  236a87:	eb 00                	jmp    236a89 <__gttf2+0x169>
  236a89:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
  236a8f:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
    return if ((aInt & bInt) >= 0) if (aInt < bInt)
  236a95:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
  236a9b:	89 85 50 ff ff ff    	mov    DWORD PTR [rbp-0xb0],eax
  236aa1:	e9 85 00 00 00       	jmp    236b2b <__gttf2+0x20b>
        GE_EQUAL
    else
        GE_GREATER else if (aInt > bInt)
  236aa6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  236aaa:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  236aae:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  236ab2:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  236ab6:	48 29 c2             	sub    rdx,rax
  236ab9:	48 19 ce             	sbb    rsi,rcx
  236abc:	48 89 95 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdx
  236ac3:	48 89 b5 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rsi
  236aca:	7d 0f                	jge    236adb <__gttf2+0x1bb>
  236acc:	eb 00                	jmp    236ace <__gttf2+0x1ae>
  236ace:	b8 ff ff ff ff       	mov    eax,0xffffffff
  236ad3:	89 85 3c ff ff ff    	mov    DWORD PTR [rbp-0xc4],eax
  236ad9:	eb 44                	jmp    236b1f <__gttf2+0x1ff>
        GE_LESS
    else if (aInt == bInt)
  236adb:	c5 fa 6f 45 d0       	vmovdqu xmm0,XMMWORD PTR [rbp-0x30]
  236ae0:	c5 fa 6f 4d c0       	vmovdqu xmm1,XMMWORD PTR [rbp-0x40]
  236ae5:	c5 f9 74 c1          	vpcmpeqb xmm0,xmm0,xmm1
  236ae9:	c5 f9 d7 c0          	vpmovmskb eax,xmm0
  236aed:	2d ff ff 00 00       	sub    eax,0xffff
  236af2:	89 85 38 ff ff ff    	mov    DWORD PTR [rbp-0xc8],eax
  236af8:	75 0c                	jne    236b06 <__gttf2+0x1e6>
  236afa:	eb 00                	jmp    236afc <__gttf2+0x1dc>
  236afc:	31 c0                	xor    eax,eax
  236afe:	89 85 34 ff ff ff    	mov    DWORD PTR [rbp-0xcc],eax
  236b04:	eb 0d                	jmp    236b13 <__gttf2+0x1f3>
  236b06:	b8 01 00 00 00       	mov    eax,0x1
  236b0b:	89 85 34 ff ff ff    	mov    DWORD PTR [rbp-0xcc],eax
  236b11:	eb 00                	jmp    236b13 <__gttf2+0x1f3>
  236b13:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
  236b19:	89 85 3c ff ff ff    	mov    DWORD PTR [rbp-0xc4],eax
        GE_GREATER else if (aInt > bInt)
  236b1f:	8b 85 3c ff ff ff    	mov    eax,DWORD PTR [rbp-0xc4]
  236b25:	89 85 50 ff ff ff    	mov    DWORD PTR [rbp-0xb0],eax
    return if ((aInt & bInt) >= 0) if (aInt < bInt)
  236b2b:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
  236b31:	48 83 c4 50          	add    rsp,0x50
  236b35:	5d                   	pop    rbp
  236b36:	c3                   	ret    
  236b37:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  236b3e:	00 00 

0000000000236b40 <__extendhfsf2>:

pub extern fn __extendsftf2(a: f32) f128 {
    return extendXfYf2(f128, f32, a);
}

pub extern fn __extendhfsf2(a: u16) f32 {
  236b40:	55                   	push   rbp
  236b41:	48 89 e5             	mov    rbp,rsp
  236b44:	48 83 ec 50          	sub    rsp,0x50
  236b48:	66 89 f8             	mov    ax,di
  236b4b:	be aa 00 00 00       	mov    esi,0xaa
  236b50:	bf 04 00 00 00       	mov    edi,0x4
  236b55:	89 fa                	mov    edx,edi
  236b57:	48 8d 4d ec          	lea    rcx,[rbp-0x14]
  236b5b:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
    return extendXfYf2(f32, f16, @bitCast(f16, a));
  236b5f:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
  236b63:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
    const dstBits = @sizeOf(dst_t) * CHAR_BIT;
    const dstExpBits = dstBits - dstSigBits - 1;
    const dstInfExp = (1 << dstExpBits) - 1;
    const dstExpBias = dstInfExp >> 1;

    const dstMinNormal: dst_rep_t = dst_rep_t(1) << dstSigBits;
  236b67:	c7 45 f8 00 00 80 00 	mov    DWORD PTR [rbp-0x8],0x800000

    // Break a into a sign and representation of the absolute value
    const aRep: src_rep_t = @bitCast(src_rep_t, a);
  236b6e:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
  236b72:	66 89 45 f6          	mov    WORD PTR [rbp-0xa],ax
    const aAbs: src_rep_t = aRep & srcAbsMask;
  236b76:	66 8b 45 f6          	mov    ax,WORD PTR [rbp-0xa]
  236b7a:	66 25 ff 7f          	and    ax,0x7fff
  236b7e:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
    const sign: src_rep_t = aRep & srcSignMask;
  236b82:	66 8b 45 f6          	mov    ax,WORD PTR [rbp-0xa]
  236b86:	66 25 00 80          	and    ax,0x8000
  236b8a:	66 89 45 f2          	mov    WORD PTR [rbp-0xe],ax
    var absResult: dst_rep_t = undefined;
  236b8e:	48 89 cf             	mov    rdi,rcx
  236b91:	e8 ba dc ff ff       	call   234850 <memset>

    if (aAbs -% srcMinNormal < srcInfinity - srcMinNormal) {
  236b96:	66 8b 45 f4          	mov    ax,WORD PTR [rbp-0xc]
  236b9a:	66 2d 00 04          	sub    ax,0x400
  236b9e:	66 3d 00 78          	cmp    ax,0x7800
  236ba2:	73 26                	jae    236bca <__extendhfsf2+0x8a>
        // a is a normal number.
        // Extend to the destination type by shifting the significand and
        // exponent into the proper position and rebiasing the exponent.
        absResult = dst_rep_t(aAbs) << (dstSigBits - srcSigBits);
  236ba4:	0f b7 45 f4          	movzx  eax,WORD PTR [rbp-0xc]
  236ba8:	c1 e0 0d             	shl    eax,0xd
  236bab:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
        absResult += (dstExpBias - srcExpBias) << dstSigBits;
  236bae:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  236bb1:	05 00 00 00 38       	add    eax,0x38000000
  236bb6:	0f 92 c1             	setb   cl
  236bb9:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
  236bbc:	88 4d d7             	mov    BYTE PTR [rbp-0x29],cl
  236bbf:	0f 82 84 00 00 00    	jb     236c49 <__extendhfsf2+0x109>
  236bc5:	e9 8f 00 00 00       	jmp    236c59 <__extendhfsf2+0x119>
    } else if (aAbs >= srcInfinity) {
  236bca:	66 81 7d f4 00 7c    	cmp    WORD PTR [rbp-0xc],0x7c00
  236bd0:	72 37                	jb     236c09 <__extendhfsf2+0xc9>
        // a is NaN or infinity.
        // Conjure the result by beginning with infinity, then setting the qNaN
        // bit (if needed) and right-aligning the rest of the trailing NaN
        // payload field.
        absResult = dstInfExp << dstSigBits;
  236bd2:	c7 45 ec 00 00 80 7f 	mov    DWORD PTR [rbp-0x14],0x7f800000
        absResult |= dst_rep_t(aAbs & srcQNaN) << (dstSigBits - srcSigBits);
  236bd9:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  236bdc:	66 8b 4d f4          	mov    cx,WORD PTR [rbp-0xc]
  236be0:	66 81 e1 00 02       	and    cx,0x200
  236be5:	0f b7 d1             	movzx  edx,cx
  236be8:	c1 e2 0d             	shl    edx,0xd
  236beb:	09 d0                	or     eax,edx
  236bed:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
        absResult |= dst_rep_t(aAbs & srcNaNCode) << (dstSigBits - srcSigBits);
  236bf0:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  236bf3:	66 8b 4d f4          	mov    cx,WORD PTR [rbp-0xc]
  236bf7:	66 81 e1 ff 01       	and    cx,0x1ff
  236bfc:	0f b7 d1             	movzx  edx,cx
  236bff:	c1 e2 0d             	shl    edx,0xd
  236c02:	09 d0                	or     eax,edx
  236c04:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    } else if (aAbs >= srcInfinity) {
  236c07:	eb 3b                	jmp    236c44 <__extendhfsf2+0x104>
    } else if (aAbs != 0) {
  236c09:	66 83 7d f4 00       	cmp    WORD PTR [rbp-0xc],0x0
  236c0e:	74 2b                	je     236c3b <__extendhfsf2+0xfb>
        // a is denormal.
        // renormalize the significand and clear the leading bit, then insert
        // the correct adjusted exponent in the destination type.
        const scale: u32 = @clz(aAbs) - @clz(src_rep_t(srcMinNormal));
  236c10:	66 f3 0f bd 45 f4    	lzcnt  ax,WORD PTR [rbp-0xc]
  236c16:	88 c1                	mov    cl,al
  236c18:	80 c1 fb             	add    cl,0xfb
  236c1b:	88 ca                	mov    dl,cl
  236c1d:	80 e2 1f             	and    dl,0x1f
  236c20:	28 ca                	sub    dl,cl
  236c22:	40 0f 95 c6          	setne  sil
  236c26:	40 88 cf             	mov    dil,cl
  236c29:	40 f6 c6 01          	test   sil,0x1
  236c2d:	88 4d d6             	mov    BYTE PTR [rbp-0x2a],cl
  236c30:	88 55 d5             	mov    BYTE PTR [rbp-0x2b],dl
  236c33:	40 88 7d d4          	mov    BYTE PTR [rbp-0x2c],dil
  236c37:	75 2b                	jne    236c64 <__extendhfsf2+0x124>
  236c39:	eb 39                	jmp    236c74 <__extendhfsf2+0x134>
        absResult ^= dstMinNormal;
        const resultExponent: u32 = dstExpBias - srcExpBias - scale + 1;
        absResult |= @intCast(dst_rep_t, resultExponent) << dstSigBits;
    } else {
        // a is zero.
        absResult = 0;
  236c3b:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
    } else if (aAbs >= srcInfinity) {
  236c42:	eb 00                	jmp    236c44 <__extendhfsf2+0x104>
    if (aAbs -% srcMinNormal < srcInfinity - srcMinNormal) {
  236c44:	e9 00 01 00 00       	jmp    236d49 <__extendhfsf2+0x209>
  236c49:	48 8d 3d 28 d2 00 00 	lea    rdi,[rip+0xd228]        # 243e78 <__unnamed_2>
  236c50:	31 c0                	xor    eax,eax
  236c52:	89 c6                	mov    esi,eax
        absResult += (dstExpBias - srcExpBias) << dstSigBits;
  236c54:	e8 37 fb ff ff       	call   236790 <panic>
  236c59:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  236c5c:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    if (aAbs -% srcMinNormal < srcInfinity - srcMinNormal) {
  236c5f:	e9 e5 00 00 00       	jmp    236d49 <__extendhfsf2+0x209>
  236c64:	48 8d 3d 0d d2 00 00 	lea    rdi,[rip+0xd20d]        # 243e78 <__unnamed_2>
  236c6b:	31 c0                	xor    eax,eax
  236c6d:	89 c6                	mov    esi,eax
        const scale: u32 = @clz(aAbs) - @clz(src_rep_t(srcMinNormal));
  236c6f:	e8 1c fb ff ff       	call   236790 <panic>
  236c74:	8a 45 d6             	mov    al,BYTE PTR [rbp-0x2a]
  236c77:	24 1f                	and    al,0x1f
  236c79:	0f b6 c8             	movzx  ecx,al
  236c7c:	89 4d e8             	mov    DWORD PTR [rbp-0x18],ecx
        absResult = dst_rep_t(aAbs) << @intCast(DstShift, dstSigBits - srcSigBits + scale);
  236c7f:	0f b7 4d f4          	movzx  ecx,WORD PTR [rbp-0xc]
  236c83:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
  236c86:	83 c2 0d             	add    edx,0xd
  236c89:	0f 92 c0             	setb   al
  236c8c:	89 4d d0             	mov    DWORD PTR [rbp-0x30],ecx
  236c8f:	89 55 cc             	mov    DWORD PTR [rbp-0x34],edx
  236c92:	88 45 cb             	mov    BYTE PTR [rbp-0x35],al
  236c95:	72 02                	jb     236c99 <__extendhfsf2+0x159>
  236c97:	eb 10                	jmp    236ca9 <__extendhfsf2+0x169>
  236c99:	48 8d 3d d8 d1 00 00 	lea    rdi,[rip+0xd1d8]        # 243e78 <__unnamed_2>
  236ca0:	31 c0                	xor    eax,eax
  236ca2:	89 c6                	mov    esi,eax
  236ca4:	e8 e7 fa ff ff       	call   236790 <panic>
  236ca9:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  236cac:	88 c1                	mov    cl,al
  236cae:	83 e0 1f             	and    eax,0x1f
  236cb1:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
  236cb4:	39 c2                	cmp    edx,eax
  236cb6:	88 4d ca             	mov    BYTE PTR [rbp-0x36],cl
  236cb9:	75 32                	jne    236ced <__extendhfsf2+0x1ad>
  236cbb:	b8 70 00 00 00       	mov    eax,0x70
  236cc0:	8a 4d ca             	mov    cl,BYTE PTR [rbp-0x36]
  236cc3:	80 e1 1f             	and    cl,0x1f
  236cc6:	0f b6 c9             	movzx  ecx,cl
  236cc9:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
  236ccc:	d3 e2                	shl    edx,cl
  236cce:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
        absResult ^= dstMinNormal;
  236cd1:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
  236cd4:	81 f2 00 00 80 00    	xor    edx,0x800000
  236cda:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
        const resultExponent: u32 = dstExpBias - srcExpBias - scale + 1;
  236cdd:	2b 45 e8             	sub    eax,DWORD PTR [rbp-0x18]
  236ce0:	0f 92 c1             	setb   cl
  236ce3:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
  236ce6:	88 4d c3             	mov    BYTE PTR [rbp-0x3d],cl
  236ce9:	72 12                	jb     236cfd <__extendhfsf2+0x1bd>
  236ceb:	eb 20                	jmp    236d0d <__extendhfsf2+0x1cd>
  236ced:	48 8d 3d 9c d1 00 00 	lea    rdi,[rip+0xd19c]        # 243e90 <__unnamed_3>
  236cf4:	31 c0                	xor    eax,eax
  236cf6:	89 c6                	mov    esi,eax
        absResult = dst_rep_t(aAbs) << @intCast(DstShift, dstSigBits - srcSigBits + scale);
  236cf8:	e8 93 fa ff ff       	call   236790 <panic>
  236cfd:	48 8d 3d 74 d1 00 00 	lea    rdi,[rip+0xd174]        # 243e78 <__unnamed_2>
  236d04:	31 c0                	xor    eax,eax
  236d06:	89 c6                	mov    esi,eax
        const resultExponent: u32 = dstExpBias - srcExpBias - scale + 1;
  236d08:	e8 83 fa ff ff       	call   236790 <panic>
  236d0d:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
  236d10:	83 c0 01             	add    eax,0x1
  236d13:	0f 92 c1             	setb   cl
  236d16:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
  236d19:	88 4d bb             	mov    BYTE PTR [rbp-0x45],cl
  236d1c:	72 02                	jb     236d20 <__extendhfsf2+0x1e0>
  236d1e:	eb 10                	jmp    236d30 <__extendhfsf2+0x1f0>
  236d20:	48 8d 3d 51 d1 00 00 	lea    rdi,[rip+0xd151]        # 243e78 <__unnamed_2>
  236d27:	31 c0                	xor    eax,eax
  236d29:	89 c6                	mov    esi,eax
  236d2b:	e8 60 fa ff ff       	call   236790 <panic>
  236d30:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  236d33:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
        absResult |= @intCast(dst_rep_t, resultExponent) << dstSigBits;
  236d36:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
  236d39:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
  236d3c:	c1 e2 17             	shl    edx,0x17
  236d3f:	09 d1                	or     ecx,edx
  236d41:	89 4d ec             	mov    DWORD PTR [rbp-0x14],ecx
    } else if (aAbs != 0) {
  236d44:	e9 f9 fe ff ff       	jmp    236c42 <__extendhfsf2+0x102>
    }

    // Apply the signbit to (dst_t)abs(a).
    const result: dst_rep_t align(@alignOf(dst_t)) = absResult | dst_rep_t(sign) << (dstBits - srcBits);
  236d49:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  236d4c:	0f b7 4d f2          	movzx  ecx,WORD PTR [rbp-0xe]
  236d50:	c1 e1 10             	shl    ecx,0x10
  236d53:	09 c8                	or     eax,ecx
  236d55:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    return @bitCast(dst_t, result);
  236d58:	c5 f9 6e 45 e0       	vmovd  xmm0,DWORD PTR [rbp-0x20]
    return extendXfYf2(f32, f16, @bitCast(f16, a));
  236d5d:	48 83 c4 50          	add    rsp,0x50
  236d61:	5d                   	pop    rbp
  236d62:	c3                   	ret    
  236d63:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  236d6a:	84 00 00 00 00 00 

0000000000236d70 <__truncsfhf2>:
const std = @import("std");

pub extern fn __truncsfhf2(a: f32) u16 {
  236d70:	55                   	push   rbp
  236d71:	48 89 e5             	mov    rbp,rsp
  236d74:	48 83 ec 70          	sub    rsp,0x70
  236d78:	be aa 00 00 00       	mov    esi,0xaa
  236d7d:	b8 02 00 00 00       	mov    eax,0x2
  236d82:	89 c2                	mov    edx,eax
  236d84:	48 8d 4d ee          	lea    rcx,[rbp-0x12]
  236d88:	c5 fa 11 45 c8       	vmovss DWORD PTR [rbp-0x38],xmm0
    return @bitCast(u16, truncXfYf2(f16, f32, a));
  236d8d:	c5 fa 10 45 c8       	vmovss xmm0,DWORD PTR [rbp-0x38]
  236d92:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0

    const dstQNaN = 1 << (dstSigBits - 1);
    const dstNaNCode = dstQNaN - 1;

    // Break a into a sign and representation of the absolute value
    const aRep: src_rep_t = @bitCast(src_rep_t, a);
  236d97:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  236d9c:	c5 f9 7e c0          	vmovd  eax,xmm0
  236da0:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
    const aAbs: src_rep_t = aRep & srcAbsMask;
  236da3:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  236da6:	25 ff ff ff 7f       	and    eax,0x7fffffff
  236dab:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    const sign: src_rep_t = aRep & srcSignMask;
  236dae:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  236db1:	25 00 00 00 80       	and    eax,0x80000000
  236db6:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    var absResult: dst_rep_t = undefined;
  236db9:	48 89 cf             	mov    rdi,rcx
  236dbc:	e8 8f da ff ff       	call   234850 <memset>

    if (aAbs -% underflow < aAbs -% overflow) {
  236dc1:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  236dc4:	2d 00 00 80 38       	sub    eax,0x38800000
  236dc9:	8b 75 f4             	mov    esi,DWORD PTR [rbp-0xc]
  236dcc:	81 ee 00 00 80 47    	sub    esi,0x47800000
  236dd2:	39 f0                	cmp    eax,esi
  236dd4:	0f 83 81 00 00 00    	jae    236e5b <__truncsfhf2+0xeb>
        // The exponent of a is within the range of normal numbers in the
        // destination format.  We can convert by simply right-shifting with
        // rounding and adjusting the exponent.
        absResult = @truncate(dst_rep_t, aAbs >> (srcSigBits - dstSigBits));
  236dda:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  236ddd:	c1 e8 0d             	shr    eax,0xd
  236de0:	66 89 c1             	mov    cx,ax
  236de3:	66 89 4d ee          	mov    WORD PTR [rbp-0x12],cx
        absResult -%= dst_rep_t(srcExpBias - dstExpBias) << dstSigBits;
  236de7:	66 8b 4d ee          	mov    cx,WORD PTR [rbp-0x12]
  236deb:	66 81 e9 00 c0       	sub    cx,0xc000
  236df0:	66 89 4d ee          	mov    WORD PTR [rbp-0x12],cx

        const roundBits: src_rep_t = aAbs & roundMask;
  236df4:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  236df7:	25 ff 1f 00 00       	and    eax,0x1fff
  236dfc:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
        if (roundBits > halfway) {
  236dff:	81 7d e8 00 10 00 00 	cmp    DWORD PTR [rbp-0x18],0x1000
  236e06:	76 1d                	jbe    236e25 <__truncsfhf2+0xb5>
            // Round to nearest
            absResult += 1;
  236e08:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  236e0c:	66 83 c0 01          	add    ax,0x1
  236e10:	0f 92 c1             	setb   cl
  236e13:	f6 c1 01             	test   cl,0x1
  236e16:	66 89 45 c6          	mov    WORD PTR [rbp-0x3a],ax
  236e1a:	0f 85 43 01 00 00    	jne    236f63 <__truncsfhf2+0x1f3>
  236e20:	e9 4e 01 00 00       	jmp    236f73 <__truncsfhf2+0x203>
        } else if (roundBits == halfway) {
  236e25:	81 7d e8 00 10 00 00 	cmp    DWORD PTR [rbp-0x18],0x1000
  236e2c:	75 24                	jne    236e52 <__truncsfhf2+0xe2>
            // Ties to even
            absResult += absResult & 1;
  236e2e:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  236e32:	66 8b 4d ee          	mov    cx,WORD PTR [rbp-0x12]
  236e36:	66 83 e1 01          	and    cx,0x1
  236e3a:	66 01 c8             	add    ax,cx
  236e3d:	0f 92 c2             	setb   dl
  236e40:	f6 c2 01             	test   dl,0x1
  236e43:	66 89 45 c4          	mov    WORD PTR [rbp-0x3c],ax
  236e47:	0f 85 33 01 00 00    	jne    236f80 <__truncsfhf2+0x210>
  236e4d:	e9 3e 01 00 00       	jmp    236f90 <__truncsfhf2+0x220>
        } else if (roundBits == halfway) {
  236e52:	eb 00                	jmp    236e54 <__truncsfhf2+0xe4>
        if (roundBits > halfway) {
  236e54:	eb 00                	jmp    236e56 <__truncsfhf2+0xe6>
    if (aAbs -% underflow < aAbs -% overflow) {
  236e56:	e9 c6 02 00 00       	jmp    237121 <__truncsfhf2+0x3b1>
        }
    } else if (aAbs > srcInfinity) {
  236e5b:	81 7d f4 00 00 80 7f 	cmp    DWORD PTR [rbp-0xc],0x7f800000
  236e62:	76 43                	jbe    236ea7 <__truncsfhf2+0x137>
        // a is NaN.
        // Conjure the result by beginning with infinity, setting the qNaN
        // bit and inserting the (truncated) trailing NaN field.
        absResult = @intCast(dst_rep_t, dstInfExp) << dstSigBits;
  236e64:	66 c7 45 ee 00 7c    	mov    WORD PTR [rbp-0x12],0x7c00
        absResult |= dstQNaN;
  236e6a:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  236e6e:	66 0d 00 02          	or     ax,0x200
  236e72:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
        absResult |= @intCast(dst_rep_t, ((aAbs & srcNaNCode) >> (srcSigBits - dstSigBits)) & dstNaNCode);
  236e76:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  236e7a:	8b 4d f4             	mov    ecx,DWORD PTR [rbp-0xc]
  236e7d:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
  236e83:	c1 e9 0d             	shr    ecx,0xd
  236e86:	81 e1 ff 01 00 00    	and    ecx,0x1ff
  236e8c:	66 89 ca             	mov    dx,cx
  236e8f:	0f b7 f2             	movzx  esi,dx
  236e92:	39 f1                	cmp    ecx,esi
  236e94:	66 89 45 c2          	mov    WORD PTR [rbp-0x3e],ax
  236e98:	66 89 55 c0          	mov    WORD PTR [rbp-0x40],dx
  236e9c:	0f 84 fb 00 00 00    	je     236f9d <__truncsfhf2+0x22d>
  236ea2:	e9 07 01 00 00       	jmp    236fae <__truncsfhf2+0x23e>
    } else if (aAbs >= overflow) {
  236ea7:	81 7d f4 00 00 80 47 	cmp    DWORD PTR [rbp-0xc],0x47800000
  236eae:	72 0b                	jb     236ebb <__truncsfhf2+0x14b>
        // a overflows to infinity.
        absResult = @intCast(dst_rep_t, dstInfExp) << dstSigBits;
  236eb0:	66 c7 45 ee 00 7c    	mov    WORD PTR [rbp-0x12],0x7c00
    } else if (aAbs >= overflow) {
  236eb6:	e9 a1 00 00 00       	jmp    236f5c <__truncsfhf2+0x1ec>
  236ebb:	b8 70 00 00 00       	mov    eax,0x70
    } else {
        // a underflows on conversion to the destination type or is an exact
        // zero.  The result may be a denormal or zero.  Extract the exponent
        // to get the shift amount for the denormalization.
        const aExp = @intCast(u32, aAbs >> srcSigBits);
  236ec0:	8b 4d f4             	mov    ecx,DWORD PTR [rbp-0xc]
  236ec3:	c1 e9 17             	shr    ecx,0x17
  236ec6:	89 4d e4             	mov    DWORD PTR [rbp-0x1c],ecx
        const shift = @intCast(u32, srcExpBias - dstExpBias - aExp + 1);
  236ec9:	2b 45 e4             	sub    eax,DWORD PTR [rbp-0x1c]
  236ecc:	0f 92 c2             	setb   dl
  236ecf:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
  236ed2:	88 55 bb             	mov    BYTE PTR [rbp-0x45],dl
  236ed5:	0f 82 e3 00 00 00    	jb     236fbe <__truncsfhf2+0x24e>
  236edb:	e9 ee 00 00 00       	jmp    236fce <__truncsfhf2+0x25e>

        const significand: src_rep_t = (aRep & srcSignificandMask) | srcMinNormal;

        // Right shift by the denormalization amount with sticky.
        if (shift > srcSigBits) {
            absResult = 0;
  236ee0:	66 c7 45 ee 00 00    	mov    WORD PTR [rbp-0x12],0x0
        if (shift > srcSigBits) {
  236ee6:	eb 72                	jmp    236f5a <__truncsfhf2+0x1ea>
  236ee8:	b8 20 00 00 00       	mov    eax,0x20
        } else {
            const sticky: src_rep_t = significand << @intCast(SrcShift, srcBits - shift);
  236eed:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  236ef0:	2b 45 e0             	sub    eax,DWORD PTR [rbp-0x20]
  236ef3:	0f 92 c2             	setb   dl
  236ef6:	89 4d b4             	mov    DWORD PTR [rbp-0x4c],ecx
  236ef9:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
  236efc:	88 55 af             	mov    BYTE PTR [rbp-0x51],dl
  236eff:	0f 82 13 01 00 00    	jb     237018 <__truncsfhf2+0x2a8>
  236f05:	e9 1e 01 00 00       	jmp    237028 <__truncsfhf2+0x2b8>
            const denormalizedSignificand: src_rep_t = significand >> @intCast(SrcShift, shift) | sticky;
            absResult = @intCast(dst_rep_t, denormalizedSignificand >> (srcSigBits - dstSigBits));
            const roundBits: src_rep_t = denormalizedSignificand & roundMask;
            if (roundBits > halfway) {
                // Round to nearest
                absResult += 1;
  236f0a:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  236f0e:	66 83 c0 01          	add    ax,0x1
  236f12:	0f 92 c1             	setb   cl
  236f15:	f6 c1 01             	test   cl,0x1
  236f18:	66 89 45 ac          	mov    WORD PTR [rbp-0x54],ax
  236f1c:	0f 85 c5 01 00 00    	jne    2370e7 <__truncsfhf2+0x377>
  236f22:	e9 d0 01 00 00       	jmp    2370f7 <__truncsfhf2+0x387>
            } else if (roundBits == halfway) {
  236f27:	81 7d d0 00 10 00 00 	cmp    DWORD PTR [rbp-0x30],0x1000
  236f2e:	75 24                	jne    236f54 <__truncsfhf2+0x1e4>
                // Ties to even
                absResult += absResult & 1;
  236f30:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  236f34:	66 8b 4d ee          	mov    cx,WORD PTR [rbp-0x12]
  236f38:	66 83 e1 01          	and    cx,0x1
  236f3c:	66 01 c8             	add    ax,cx
  236f3f:	0f 92 c2             	setb   dl
  236f42:	f6 c2 01             	test   dl,0x1
  236f45:	66 89 45 aa          	mov    WORD PTR [rbp-0x56],ax
  236f49:	0f 85 b5 01 00 00    	jne    237104 <__truncsfhf2+0x394>
  236f4f:	e9 c0 01 00 00       	jmp    237114 <__truncsfhf2+0x3a4>
            } else if (roundBits == halfway) {
  236f54:	eb 00                	jmp    236f56 <__truncsfhf2+0x1e6>
            if (roundBits > halfway) {
  236f56:	eb 00                	jmp    236f58 <__truncsfhf2+0x1e8>
        if (shift > srcSigBits) {
  236f58:	eb 00                	jmp    236f5a <__truncsfhf2+0x1ea>
    } else if (aAbs >= overflow) {
  236f5a:	eb 00                	jmp    236f5c <__truncsfhf2+0x1ec>
    } else if (aAbs > srcInfinity) {
  236f5c:	eb 00                	jmp    236f5e <__truncsfhf2+0x1ee>
    if (aAbs -% underflow < aAbs -% overflow) {
  236f5e:	e9 be 01 00 00       	jmp    237121 <__truncsfhf2+0x3b1>
  236f63:	48 8d 3d 0e cf 00 00 	lea    rdi,[rip+0xcf0e]        # 243e78 <__unnamed_2>
  236f6a:	31 c0                	xor    eax,eax
  236f6c:	89 c6                	mov    esi,eax
            absResult += 1;
  236f6e:	e8 1d f8 ff ff       	call   236790 <panic>
  236f73:	66 8b 45 c6          	mov    ax,WORD PTR [rbp-0x3a]
  236f77:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
        if (roundBits > halfway) {
  236f7b:	e9 d6 fe ff ff       	jmp    236e56 <__truncsfhf2+0xe6>
  236f80:	48 8d 3d f1 ce 00 00 	lea    rdi,[rip+0xcef1]        # 243e78 <__unnamed_2>
  236f87:	31 c0                	xor    eax,eax
  236f89:	89 c6                	mov    esi,eax
            absResult += absResult & 1;
  236f8b:	e8 00 f8 ff ff       	call   236790 <panic>
  236f90:	66 8b 45 c4          	mov    ax,WORD PTR [rbp-0x3c]
  236f94:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
        } else if (roundBits == halfway) {
  236f98:	e9 b7 fe ff ff       	jmp    236e54 <__truncsfhf2+0xe4>
        absResult |= @intCast(dst_rep_t, ((aAbs & srcNaNCode) >> (srcSigBits - dstSigBits)) & dstNaNCode);
  236f9d:	66 8b 45 c2          	mov    ax,WORD PTR [rbp-0x3e]
  236fa1:	66 8b 4d c0          	mov    cx,WORD PTR [rbp-0x40]
  236fa5:	66 09 c8             	or     ax,cx
  236fa8:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
    } else if (aAbs > srcInfinity) {
  236fac:	eb b0                	jmp    236f5e <__truncsfhf2+0x1ee>
  236fae:	48 8d 3d db ce 00 00 	lea    rdi,[rip+0xcedb]        # 243e90 <__unnamed_3>
  236fb5:	31 c0                	xor    eax,eax
  236fb7:	89 c6                	mov    esi,eax
        absResult |= @intCast(dst_rep_t, ((aAbs & srcNaNCode) >> (srcSigBits - dstSigBits)) & dstNaNCode);
  236fb9:	e8 d2 f7 ff ff       	call   236790 <panic>
  236fbe:	48 8d 3d b3 ce 00 00 	lea    rdi,[rip+0xceb3]        # 243e78 <__unnamed_2>
  236fc5:	31 c0                	xor    eax,eax
  236fc7:	89 c6                	mov    esi,eax
        const shift = @intCast(u32, srcExpBias - dstExpBias - aExp + 1);
  236fc9:	e8 c2 f7 ff ff       	call   236790 <panic>
  236fce:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  236fd1:	83 c0 01             	add    eax,0x1
  236fd4:	0f 92 c1             	setb   cl
  236fd7:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
  236fda:	88 4d a3             	mov    BYTE PTR [rbp-0x5d],cl
  236fdd:	72 02                	jb     236fe1 <__truncsfhf2+0x271>
  236fdf:	eb 10                	jmp    236ff1 <__truncsfhf2+0x281>
  236fe1:	48 8d 3d 90 ce 00 00 	lea    rdi,[rip+0xce90]        # 243e78 <__unnamed_2>
  236fe8:	31 c0                	xor    eax,eax
  236fea:	89 c6                	mov    esi,eax
  236fec:	e8 9f f7 ff ff       	call   236790 <panic>
  236ff1:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
  236ff4:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
        const significand: src_rep_t = (aRep & srcSignificandMask) | srcMinNormal;
  236ff7:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
  236ffa:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
  237000:	81 c9 00 00 80 00    	or     ecx,0x800000
  237006:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
        if (shift > srcSigBits) {
  237009:	83 7d e0 17          	cmp    DWORD PTR [rbp-0x20],0x17
  23700d:	0f 87 cd fe ff ff    	ja     236ee0 <__truncsfhf2+0x170>
  237013:	e9 d0 fe ff ff       	jmp    236ee8 <__truncsfhf2+0x178>
  237018:	48 8d 3d 59 ce 00 00 	lea    rdi,[rip+0xce59]        # 243e78 <__unnamed_2>
  23701f:	31 c0                	xor    eax,eax
  237021:	89 c6                	mov    esi,eax
            const sticky: src_rep_t = significand << @intCast(SrcShift, srcBits - shift);
  237023:	e8 68 f7 ff ff       	call   236790 <panic>
  237028:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
  23702b:	88 c1                	mov    cl,al
  23702d:	83 e0 1f             	and    eax,0x1f
  237030:	8b 55 b0             	mov    edx,DWORD PTR [rbp-0x50]
  237033:	39 c2                	cmp    edx,eax
  237035:	88 4d a2             	mov    BYTE PTR [rbp-0x5e],cl
  237038:	75 2e                	jne    237068 <__truncsfhf2+0x2f8>
  23703a:	8a 4d a2             	mov    cl,BYTE PTR [rbp-0x5e]
  23703d:	88 c8                	mov    al,cl
  23703f:	8b 55 b4             	mov    edx,DWORD PTR [rbp-0x4c]
  237042:	c4 e2 79 f7 c2       	shlx   eax,edx,eax
  237047:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
            const denormalizedSignificand: src_rep_t = significand >> @intCast(SrcShift, shift) | sticky;
  23704a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  23704d:	8b 75 e0             	mov    esi,DWORD PTR [rbp-0x20]
  237050:	40 88 f7             	mov    dil,sil
  237053:	41 89 f0             	mov    r8d,esi
  237056:	41 83 e0 1f          	and    r8d,0x1f
  23705a:	44 39 c6             	cmp    esi,r8d
  23705d:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
  237060:	40 88 7d 9b          	mov    BYTE PTR [rbp-0x65],dil
  237064:	74 12                	je     237078 <__truncsfhf2+0x308>
  237066:	eb 39                	jmp    2370a1 <__truncsfhf2+0x331>
  237068:	48 8d 3d 21 ce 00 00 	lea    rdi,[rip+0xce21]        # 243e90 <__unnamed_3>
  23706f:	31 c0                	xor    eax,eax
  237071:	89 c6                	mov    esi,eax
            const sticky: src_rep_t = significand << @intCast(SrcShift, srcBits - shift);
  237073:	e8 18 f7 ff ff       	call   236790 <panic>
            const denormalizedSignificand: src_rep_t = significand >> @intCast(SrcShift, shift) | sticky;
  237078:	8a 45 9b             	mov    al,BYTE PTR [rbp-0x65]
  23707b:	24 1f                	and    al,0x1f
  23707d:	0f b6 c8             	movzx  ecx,al
  237080:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
  237083:	d3 ea                	shr    edx,cl
  237085:	0b 55 d8             	or     edx,DWORD PTR [rbp-0x28]
  237088:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
            absResult = @intCast(dst_rep_t, denormalizedSignificand >> (srcSigBits - dstSigBits));
  23708b:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
  23708e:	c1 ea 0d             	shr    edx,0xd
  237091:	66 89 d6             	mov    si,dx
  237094:	0f b7 fe             	movzx  edi,si
  237097:	39 fa                	cmp    edx,edi
  237099:	66 89 75 98          	mov    WORD PTR [rbp-0x68],si
  23709d:	74 12                	je     2370b1 <__truncsfhf2+0x341>
  23709f:	eb 36                	jmp    2370d7 <__truncsfhf2+0x367>
  2370a1:	48 8d 3d e8 cd 00 00 	lea    rdi,[rip+0xcde8]        # 243e90 <__unnamed_3>
  2370a8:	31 c0                	xor    eax,eax
  2370aa:	89 c6                	mov    esi,eax
            const denormalizedSignificand: src_rep_t = significand >> @intCast(SrcShift, shift) | sticky;
  2370ac:	e8 df f6 ff ff       	call   236790 <panic>
            absResult = @intCast(dst_rep_t, denormalizedSignificand >> (srcSigBits - dstSigBits));
  2370b1:	66 8b 45 98          	mov    ax,WORD PTR [rbp-0x68]
  2370b5:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
            const roundBits: src_rep_t = denormalizedSignificand & roundMask;
  2370b9:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
  2370bc:	81 e1 ff 1f 00 00    	and    ecx,0x1fff
  2370c2:	89 4d d0             	mov    DWORD PTR [rbp-0x30],ecx
            if (roundBits > halfway) {
  2370c5:	81 7d d0 00 10 00 00 	cmp    DWORD PTR [rbp-0x30],0x1000
  2370cc:	0f 87 38 fe ff ff    	ja     236f0a <__truncsfhf2+0x19a>
  2370d2:	e9 50 fe ff ff       	jmp    236f27 <__truncsfhf2+0x1b7>
  2370d7:	48 8d 3d b2 cd 00 00 	lea    rdi,[rip+0xcdb2]        # 243e90 <__unnamed_3>
  2370de:	31 c0                	xor    eax,eax
  2370e0:	89 c6                	mov    esi,eax
            absResult = @intCast(dst_rep_t, denormalizedSignificand >> (srcSigBits - dstSigBits));
  2370e2:	e8 a9 f6 ff ff       	call   236790 <panic>
  2370e7:	48 8d 3d 8a cd 00 00 	lea    rdi,[rip+0xcd8a]        # 243e78 <__unnamed_2>
  2370ee:	31 c0                	xor    eax,eax
  2370f0:	89 c6                	mov    esi,eax
                absResult += 1;
  2370f2:	e8 99 f6 ff ff       	call   236790 <panic>
  2370f7:	66 8b 45 ac          	mov    ax,WORD PTR [rbp-0x54]
  2370fb:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
            if (roundBits > halfway) {
  2370ff:	e9 54 fe ff ff       	jmp    236f58 <__truncsfhf2+0x1e8>
  237104:	48 8d 3d 6d cd 00 00 	lea    rdi,[rip+0xcd6d]        # 243e78 <__unnamed_2>
  23710b:	31 c0                	xor    eax,eax
  23710d:	89 c6                	mov    esi,eax
                absResult += absResult & 1;
  23710f:	e8 7c f6 ff ff       	call   236790 <panic>
  237114:	66 8b 45 aa          	mov    ax,WORD PTR [rbp-0x56]
  237118:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
            } else if (roundBits == halfway) {
  23711c:	e9 35 fe ff ff       	jmp    236f56 <__truncsfhf2+0x1e6>
            }
        }
    }

    const result: dst_rep_t align(@alignOf(dst_t)) = absResult | @truncate(dst_rep_t, sign >> @intCast(SrcShift, srcBits - dstBits));
  237121:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
  237125:	66 8b 4d f2          	mov    cx,WORD PTR [rbp-0xe]
  237129:	66 09 c8             	or     ax,cx
  23712c:	66 89 45 ce          	mov    WORD PTR [rbp-0x32],ax
    return @bitCast(dst_t, result);
  237130:	66 8b 45 ce          	mov    ax,WORD PTR [rbp-0x32]
    return @bitCast(u16, truncXfYf2(f16, f32, a));
  237134:	48 83 c4 70          	add    rsp,0x70
  237138:	5d                   	pop    rbp
  237139:	c3                   	ret    
  23713a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000237140 <__unordtf2>:
        GE_EQUAL
    else
        GE_GREATER;
}

pub extern fn __unordtf2(a: f128, b: f128) c_int {
  237140:	55                   	push   rbp
  237141:	48 89 e5             	mov    rbp,rsp
  237144:	0f 29 45 f0          	movaps XMMWORD PTR [rbp-0x10],xmm0
  237148:	0f 29 4d e0          	movaps XMMWORD PTR [rbp-0x20],xmm1
    @setRuntimeSafety(is_test);

    const aAbs = @bitCast(rep_t, a) & absMask;
  23714c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  237150:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  237154:	b2 3f                	mov    dl,0x3f
  237156:	40 88 d6             	mov    sil,dl
  237159:	c4 e2 c8 f5 c9       	bzhi   rcx,rcx,rsi
  23715e:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  237162:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
    const bAbs = @bitCast(rep_t, b) & absMask;
  237166:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  23716a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  23716e:	c4 e2 c8 f5 c9       	bzhi   rcx,rcx,rsi
  237173:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  237177:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
    return @boolToInt(aAbs > infRep or bAbs > infRep);
  23717b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23717f:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  237183:	48 f7 d8             	neg    rax
  237186:	48 be 00 00 00 00 00 	movabs rsi,0x7fff000000000000
  23718d:	00 ff 7f 
  237190:	48 19 ce             	sbb    rsi,rcx
  237193:	0f 92 c2             	setb   dl
  237196:	f6 c2 01             	test   dl,0x1
  237199:	48 89 75 b8          	mov    QWORD PTR [rbp-0x48],rsi
  23719d:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  2371a1:	88 55 af             	mov    BYTE PTR [rbp-0x51],dl
  2371a4:	75 28                	jne    2371ce <__unordtf2+0x8e>
  2371a6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  2371aa:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  2371ae:	48 f7 d8             	neg    rax
  2371b1:	48 ba 00 00 00 00 00 	movabs rdx,0x7fff000000000000
  2371b8:	00 ff 7f 
  2371bb:	48 19 ca             	sbb    rdx,rcx
  2371be:	40 0f 92 c6          	setb   sil
  2371c2:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  2371c6:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  2371ca:	40 88 75 af          	mov    BYTE PTR [rbp-0x51],sil
  2371ce:	8a 45 af             	mov    al,BYTE PTR [rbp-0x51]
  2371d1:	24 01                	and    al,0x1
  2371d3:	0f b6 c0             	movzx  eax,al
  2371d6:	5d                   	pop    rbp
  2371d7:	c3                   	ret    
  2371d8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  2371df:	00 

00000000002371e0 <__floattitf>:
const builtin = @import("builtin");
const is_test = builtin.is_test;

const LDBL_MANT_DIG = 113;

pub extern fn __floattitf(arg: i128) f128 {
  2371e0:	55                   	push   rbp
  2371e1:	48 89 e5             	mov    rbp,rsp
  2371e4:	41 57                	push   r15
  2371e6:	41 56                	push   r14
  2371e8:	53                   	push   rbx
  2371e9:	48 83 ec 48          	sub    rsp,0x48
  2371ed:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  2371f1:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    @setRuntimeSafety(is_test);

    if (arg == 0)
  2371f5:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  2371f9:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2371fd:	48 09 fe             	or     rsi,rdi
  237200:	48 89 b5 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rsi
  237207:	75 14                	jne    23721d <__floattitf+0x3d>
  237209:	eb 00                	jmp    23720b <__floattitf+0x2b>
        return 0.0;
  23720b:	0f 28 05 9e 90 fc ff 	movaps xmm0,XMMWORD PTR [rip+0xfffffffffffc909e]        # 2002b0 <__unnamed_100>
  237212:	48 83 c4 48          	add    rsp,0x48
  237216:	5b                   	pop    rbx
  237217:	41 5e                	pop    r14
  237219:	41 5f                	pop    r15
  23721b:	5d                   	pop    rbp
  23721c:	c3                   	ret    
    if (arg == 0)
  23721d:	eb 00                	jmp    23721f <__floattitf+0x3f>
  23721f:	b8 80 00 00 00       	mov    eax,0x80

    var ai = arg;
  237224:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  237228:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  23722c:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  237230:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
    const N: u32 = 128;
  237234:	c7 45 c4 80 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x80
    const si = ai >> @intCast(u7, (N - 1));
  23723b:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  23723f:	48 c1 f9 3f          	sar    rcx,0x3f
  237243:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
  237247:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
    ai = ((ai ^ si) -% si);
  23724b:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  23724f:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  237253:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  237257:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  23725b:	48 31 fa             	xor    rdx,rdi
  23725e:	48 31 f1             	xor    rcx,rsi
  237261:	48 29 f1             	sub    rcx,rsi
  237264:	48 19 fa             	sbb    rdx,rdi
  237267:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  23726b:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
    var a = @bitCast(u128, ai);
  23726f:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  237273:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  237277:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
  23727b:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx

    const sd = @bitCast(i32, N - @clz(a)); // number of significant digits
  23727f:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  237283:	f3 48 0f bd d1       	lzcnt  rdx,rcx
  237288:	41 88 d0             	mov    r8b,dl
  23728b:	f3 48 0f bd 55 a0    	lzcnt  rdx,QWORD PTR [rbp-0x60]
  237291:	41 89 d1             	mov    r9d,edx
  237294:	41 83 c1 40          	add    r9d,0x40
  237298:	45 88 ca             	mov    r10b,r9b
  23729b:	48 85 c9             	test   rcx,rcx
  23729e:	89 85 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],eax
  2372a4:	44 88 95 43 ff ff ff 	mov    BYTE PTR [rbp-0xbd],r10b
  2372ab:	44 88 85 42 ff ff ff 	mov    BYTE PTR [rbp-0xbe],r8b
  2372b2:	75 0c                	jne    2372c0 <__floattitf+0xe0>
  2372b4:	8a 85 43 ff ff ff    	mov    al,BYTE PTR [rbp-0xbd]
  2372ba:	88 85 42 ff ff ff    	mov    BYTE PTR [rbp-0xbe],al
  2372c0:	8a 85 42 ff ff ff    	mov    al,BYTE PTR [rbp-0xbe]
  2372c6:	0f b6 c8             	movzx  ecx,al
  2372c9:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
  2372cf:	29 ca                	sub    edx,ecx
  2372d1:	89 55 9c             	mov    DWORD PTR [rbp-0x64],edx
    var e: i32 = sd - 1; // exponent
  2372d4:	8b 4d 9c             	mov    ecx,DWORD PTR [rbp-0x64]
  2372d7:	83 e9 01             	sub    ecx,0x1
  2372da:	89 4d 98             	mov    DWORD PTR [rbp-0x68],ecx
    if (sd > LDBL_MANT_DIG) {
  2372dd:	83 7d 9c 71          	cmp    DWORD PTR [rbp-0x64],0x71
  2372e1:	0f 8e 7e 01 00 00    	jle    237465 <__floattitf+0x285>
        //                                                12345678901234567890123456
        //  1 = msb 1 bit
        //  P = bit LDBL_MANT_DIG-1 bits to the right of 1
        //  Q = bit LDBL_MANT_DIG bits to the right of 1
        //  R = "or" of all bits to the right of Q
        switch (sd) {
  2372e7:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
  2372ea:	89 c1                	mov    ecx,eax
  2372ec:	83 e9 72             	sub    ecx,0x72
  2372ef:	89 85 3c ff ff ff    	mov    DWORD PTR [rbp-0xc4],eax
  2372f5:	89 8d 38 ff ff ff    	mov    DWORD PTR [rbp-0xc8],ecx
  2372fb:	0f 84 c5 00 00 00    	je     2373c6 <__floattitf+0x1e6>
  237301:	eb 00                	jmp    237303 <__floattitf+0x123>
  237303:	8b 85 3c ff ff ff    	mov    eax,DWORD PTR [rbp-0xc4]
  237309:	83 e8 73             	sub    eax,0x73
  23730c:	89 85 34 ff ff ff    	mov    DWORD PTR [rbp-0xcc],eax
  237312:	0f 84 cb 00 00 00    	je     2373e3 <__floattitf+0x203>
  237318:	eb 00                	jmp    23731a <__floattitf+0x13a>
            LDBL_MANT_DIG + 1 => {
                a <<= 1;
            },
            LDBL_MANT_DIG + 2 => {},
            else => {
                const shift1_amt = @intCast(i32, sd - (LDBL_MANT_DIG + 2));
  23731a:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
  23731d:	83 c0 8d             	add    eax,0xffffff8d
  237320:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
                const shift1_amt_u7 = @intCast(u7, shift1_amt);
  237323:	8a 4d 94             	mov    cl,BYTE PTR [rbp-0x6c]
  237326:	80 e1 7f             	and    cl,0x7f
  237329:	88 4d 93             	mov    BYTE PTR [rbp-0x6d],cl

                const shift2_amt = @intCast(i32, N + (LDBL_MANT_DIG + 2)) - sd;
  23732c:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
  23732f:	ba f3 00 00 00       	mov    edx,0xf3
  237334:	29 c2                	sub    edx,eax
  237336:	89 55 8c             	mov    DWORD PTR [rbp-0x74],edx
                const shift2_amt_u7 = @intCast(u7, shift2_amt);
  237339:	8a 4d 8c             	mov    cl,BYTE PTR [rbp-0x74]
  23733c:	80 e1 7f             	and    cl,0x7f
  23733f:	88 4d 8b             	mov    BYTE PTR [rbp-0x75],cl

                a = (a >> shift1_amt_u7) | @boolToInt((a & (@intCast(u128, @maxValue(u128)) >> shift2_amt_u7)) != 0);
  237342:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  237346:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  23734a:	8a 4d 93             	mov    cl,BYTE PTR [rbp-0x6d]
  23734d:	88 8d 33 ff ff ff    	mov    BYTE PTR [rbp-0xcd],cl
  237353:	49 89 f0             	mov    r8,rsi
  237356:	49 0f ad f8          	shrd   r8,rdi,cl
  23735a:	8a 8d 33 ff ff ff    	mov    cl,BYTE PTR [rbp-0xcd]
  237360:	41 88 c9             	mov    r9b,cl
  237363:	c4 62 b3 f7 cf       	shrx   r9,rdi,r9
  237368:	31 c0                	xor    eax,eax
  23736a:	f6 c1 40             	test   cl,0x40
  23736d:	4d 0f 45 c1          	cmovne r8,r9
  237371:	41 89 c2             	mov    r10d,eax
  237374:	4d 0f 45 ca          	cmovne r9,r10
  237378:	44 8a 5d 8b          	mov    r11b,BYTE PTR [rbp-0x75]
  23737c:	48 c7 c3 ff ff ff ff 	mov    rbx,0xffffffffffffffff
  237383:	44 88 d9             	mov    cl,r11b
  237386:	49 89 de             	mov    r14,rbx
  237389:	4d 0f ad f6          	shrd   r14,r14,cl
  23738d:	45 88 df             	mov    r15b,r11b
  237390:	c4 e2 83 f7 db       	shrx   rbx,rbx,r15
  237395:	41 f6 c3 40          	test   r11b,0x40
  237399:	4c 0f 45 f3          	cmovne r14,rbx
  23739d:	49 0f 45 da          	cmovne rbx,r10
  2373a1:	4c 21 f6             	and    rsi,r14
  2373a4:	48 21 df             	and    rdi,rbx
  2373a7:	48 09 fe             	or     rsi,rdi
  2373aa:	0f 95 c1             	setne  cl
  2373ad:	0f b6 c1             	movzx  eax,cl
  2373b0:	89 c7                	mov    edi,eax
  2373b2:	49 09 f8             	or     r8,rdi
  2373b5:	4c 89 4d a8          	mov    QWORD PTR [rbp-0x58],r9
  2373b9:	4c 89 45 a0          	mov    QWORD PTR [rbp-0x60],r8
        switch (sd) {
  2373bd:	48 89 b5 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rsi
  2373c4:	eb 1f                	jmp    2373e5 <__floattitf+0x205>
                a <<= 1;
  2373c6:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2373ca:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  2373ce:	48 89 c2             	mov    rdx,rax
  2373d1:	48 01 d2             	add    rdx,rdx
  2373d4:	48 0f a4 c1 01       	shld   rcx,rax,0x1
  2373d9:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  2373dd:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
        switch (sd) {
  2373e1:	eb 02                	jmp    2373e5 <__floattitf+0x205>
  2373e3:	eb 00                	jmp    2373e5 <__floattitf+0x205>
            },
        }
        // finish
        a |= @boolToInt((a & 4) != 0); // Or P into R
  2373e5:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2373e9:	89 c1                	mov    ecx,eax
  2373eb:	83 e1 04             	and    ecx,0x4
  2373ee:	89 ca                	mov    edx,ecx
  2373f0:	48 c1 ea 02          	shr    rdx,0x2
  2373f4:	48 09 d0             	or     rax,rdx
  2373f7:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        a += 1; // round - this step may add a significant bit
  2373fb:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2373ff:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  237403:	48 83 c0 01          	add    rax,0x1
  237407:	48 83 d2 00          	adc    rdx,0x0
  23740b:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  23740f:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
        a >>= 2; // dump Q and R
  237413:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  237417:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  23741b:	48 89 d6             	mov    rsi,rdx
  23741e:	48 0f a4 c6 3e       	shld   rsi,rax,0x3e
  237423:	48 c1 ea 02          	shr    rdx,0x2
  237427:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
  23742b:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
        // a is now rounded to LDBL_MANT_DIG or LDBL_MANT_DIG+1 bits
        if ((a & (u128(1) << LDBL_MANT_DIG)) != 0) {
  23742f:	40 8a 7d ae          	mov    dil,BYTE PTR [rbp-0x52]
  237433:	40 f6 c7 02          	test   dil,0x2
  237437:	74 28                	je     237461 <__floattitf+0x281>
  237439:	eb 00                	jmp    23743b <__floattitf+0x25b>
            a >>= 1;
  23743b:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  23743f:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  237443:	48 89 ca             	mov    rdx,rcx
  237446:	48 0f a4 c2 3f       	shld   rdx,rax,0x3f
  23744b:	48 d1 e9             	shr    rcx,1
  23744e:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  237452:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
            e += 1;
  237456:	8b 75 98             	mov    esi,DWORD PTR [rbp-0x68]
  237459:	83 c6 01             	add    esi,0x1
  23745c:	89 75 98             	mov    DWORD PTR [rbp-0x68],esi
        if ((a & (u128(1) << LDBL_MANT_DIG)) != 0) {
  23745f:	eb 02                	jmp    237463 <__floattitf+0x283>
  237461:	eb 00                	jmp    237463 <__floattitf+0x283>
    if (sd > LDBL_MANT_DIG) {
  237463:	eb 4b                	jmp    2374b0 <__floattitf+0x2d0>
        }
        // a is now rounded to LDBL_MANT_DIG bits
    } else {
        a <<= @intCast(u7, LDBL_MANT_DIG - sd);
  237465:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  237469:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  23746d:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
  237470:	be 71 00 00 00       	mov    esi,0x71
  237475:	29 d6                	sub    esi,edx
  237477:	40 88 f7             	mov    dil,sil
  23747a:	48 89 8d 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rcx
  237481:	40 88 f9             	mov    cl,dil
  237484:	4c 8b 85 20 ff ff ff 	mov    r8,QWORD PTR [rbp-0xe0]
  23748b:	49 0f a5 c0          	shld   r8,rax,cl
  23748f:	41 88 f9             	mov    r9b,dil
  237492:	c4 e2 b1 f7 c0       	shlx   rax,rax,r9
  237497:	31 d2                	xor    edx,edx
  237499:	40 f6 c7 40          	test   dil,0x40
  23749d:	4c 0f 45 c0          	cmovne r8,rax
  2374a1:	41 89 d1             	mov    r9d,edx
  2374a4:	49 0f 45 c1          	cmovne rax,r9
  2374a8:	4c 89 45 a8          	mov    QWORD PTR [rbp-0x58],r8
  2374ac:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        // a is now rounded to LDBL_MANT_DIG bits
    }

    const s = @bitCast(u128, arg) >> (128 - 64);
  2374b0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2374b4:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  2374bb:	48 c7 45 80 00 00 00 	mov    QWORD PTR [rbp-0x80],0x0
  2374c2:	00 
    const high: u128 = (@intCast(u64, s) & 0x8000000000000000) | // sign
  2374c3:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  2374ca:	48 b9 00 00 00 00 00 	movabs rcx,0x8000000000000000
  2374d1:	00 00 80 
  2374d4:	48 21 c8             	and    rax,rcx
        (@intCast(u64, (e + 16383)) << 48) | // exponent
  2374d7:	8b 55 98             	mov    edx,DWORD PTR [rbp-0x68]
  2374da:	81 c2 ff 3f 00 00    	add    edx,0x3fff
  2374e0:	89 d1                	mov    ecx,edx
  2374e2:	48 c1 e1 30          	shl    rcx,0x30
    const high: u128 = (@intCast(u64, s) & 0x8000000000000000) | // sign
  2374e6:	48 09 c8             	or     rax,rcx
        (@truncate(u64, a >> 64) & 0x0000ffffffffffff); // mantissa-high
  2374e9:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  2374ed:	40 b6 30             	mov    sil,0x30
  2374f0:	40 88 f7             	mov    dil,sil
  2374f3:	c4 e2 c0 f5 c9       	bzhi   rcx,rcx,rdi
        (@intCast(u64, (e + 16383)) << 48) | // exponent
  2374f8:	48 09 c8             	or     rax,rcx
    const high: u128 = (@intCast(u64, s) & 0x8000000000000000) | // sign
  2374fb:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  237502:	48 c7 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],0x0
  237509:	00 00 00 00 
    const low = @truncate(u64, a); // mantissa-low
  23750d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  237511:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax

    return @bitCast(f128, low | (high << 64));
  237518:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  23751f:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  237526:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
  23752d:	48 89 8d 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rcx
  237534:	0f 28 85 50 ff ff ff 	movaps xmm0,XMMWORD PTR [rbp-0xb0]
  23753b:	48 83 c4 48          	add    rsp,0x48
  23753f:	5b                   	pop    rbx
  237540:	41 5e                	pop    r14
  237542:	41 5f                	pop    r15
  237544:	5d                   	pop    rbp
  237545:	c3                   	ret    
  237546:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  23754d:	00 00 00 

0000000000237550 <__floattidf>:
const builtin = @import("builtin");
const is_test = builtin.is_test;

const DBL_MANT_DIG = 53;

pub extern fn __floattidf(arg: i128) f64 {
  237550:	55                   	push   rbp
  237551:	48 89 e5             	mov    rbp,rsp
  237554:	41 57                	push   r15
  237556:	41 56                	push   r14
  237558:	53                   	push   rbx
  237559:	48 83 ec 30          	sub    rsp,0x30
  23755d:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  237561:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    @setRuntimeSafety(is_test);

    if (arg == 0)
  237565:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  237569:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  23756d:	48 09 fe             	or     rsi,rdi
  237570:	48 89 b5 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rsi
  237577:	75 11                	jne    23758a <__floattidf+0x3a>
  237579:	eb 00                	jmp    23757b <__floattidf+0x2b>
  23757b:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
        return 0.0;
  23757f:	48 83 c4 30          	add    rsp,0x30
  237583:	5b                   	pop    rbx
  237584:	41 5e                	pop    r14
  237586:	41 5f                	pop    r15
  237588:	5d                   	pop    rbp
  237589:	c3                   	ret    
    if (arg == 0)
  23758a:	eb 00                	jmp    23758c <__floattidf+0x3c>
  23758c:	b8 80 00 00 00       	mov    eax,0x80

    var ai = arg;
  237591:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  237595:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  237599:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  23759d:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
    const N: u32 = 128;
  2375a1:	c7 45 c4 80 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x80
    const si = ai >> @intCast(u7, (N - 1));
  2375a8:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  2375ac:	48 c1 f9 3f          	sar    rcx,0x3f
  2375b0:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
  2375b4:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
    ai = ((ai ^ si) -% si);
  2375b8:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  2375bc:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  2375c0:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  2375c4:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  2375c8:	48 31 fa             	xor    rdx,rdi
  2375cb:	48 31 f1             	xor    rcx,rsi
  2375ce:	48 29 f1             	sub    rcx,rsi
  2375d1:	48 19 fa             	sbb    rdx,rdi
  2375d4:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  2375d8:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
    var a = @bitCast(u128, ai);
  2375dc:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  2375e0:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  2375e4:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
  2375e8:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx

    const sd = @bitCast(i32, N - @clz(a)); // number of significant digits
  2375ec:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  2375f0:	f3 48 0f bd d1       	lzcnt  rdx,rcx
  2375f5:	41 88 d0             	mov    r8b,dl
  2375f8:	f3 48 0f bd 55 a0    	lzcnt  rdx,QWORD PTR [rbp-0x60]
  2375fe:	41 89 d1             	mov    r9d,edx
  237601:	41 83 c1 40          	add    r9d,0x40
  237605:	45 88 ca             	mov    r10b,r9b
  237608:	48 85 c9             	test   rcx,rcx
  23760b:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
  237611:	44 88 95 5b ff ff ff 	mov    BYTE PTR [rbp-0xa5],r10b
  237618:	44 88 85 5a ff ff ff 	mov    BYTE PTR [rbp-0xa6],r8b
  23761f:	75 0c                	jne    23762d <__floattidf+0xdd>
  237621:	8a 85 5b ff ff ff    	mov    al,BYTE PTR [rbp-0xa5]
  237627:	88 85 5a ff ff ff    	mov    BYTE PTR [rbp-0xa6],al
  23762d:	8a 85 5a ff ff ff    	mov    al,BYTE PTR [rbp-0xa6]
  237633:	0f b6 c8             	movzx  ecx,al
  237636:	8b 95 5c ff ff ff    	mov    edx,DWORD PTR [rbp-0xa4]
  23763c:	29 ca                	sub    edx,ecx
  23763e:	89 55 9c             	mov    DWORD PTR [rbp-0x64],edx
    var e: i32 = sd - 1; // exponent
  237641:	8b 4d 9c             	mov    ecx,DWORD PTR [rbp-0x64]
  237644:	83 e9 01             	sub    ecx,0x1
  237647:	89 4d 98             	mov    DWORD PTR [rbp-0x68],ecx
    if (sd > DBL_MANT_DIG) {
  23764a:	83 7d 9c 35          	cmp    DWORD PTR [rbp-0x64],0x35
  23764e:	0f 8e 7e 01 00 00    	jle    2377d2 <__floattidf+0x282>
        //                                                12345678901234567890123456
        //  1 = msb 1 bit
        //  P = bit DBL_MANT_DIG-1 bits to the right of 1
        //  Q = bit DBL_MANT_DIG bits to the right of 1
        //  R = "or" of all bits to the right of Q
        switch (sd) {
  237654:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
  237657:	89 c1                	mov    ecx,eax
  237659:	83 e9 36             	sub    ecx,0x36
  23765c:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
  237662:	89 8d 50 ff ff ff    	mov    DWORD PTR [rbp-0xb0],ecx
  237668:	0f 84 c5 00 00 00    	je     237733 <__floattidf+0x1e3>
  23766e:	eb 00                	jmp    237670 <__floattidf+0x120>
  237670:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
  237676:	83 e8 37             	sub    eax,0x37
  237679:	89 85 4c ff ff ff    	mov    DWORD PTR [rbp-0xb4],eax
  23767f:	0f 84 cb 00 00 00    	je     237750 <__floattidf+0x200>
  237685:	eb 00                	jmp    237687 <__floattidf+0x137>
            DBL_MANT_DIG + 1 => {
                a <<= 1;
            },
            DBL_MANT_DIG + 2 => {},
            else => {
                const shift1_amt = @intCast(i32, sd - (DBL_MANT_DIG + 2));
  237687:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
  23768a:	83 c0 c9             	add    eax,0xffffffc9
  23768d:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
                const shift1_amt_u7 = @intCast(u7, shift1_amt);
  237690:	8a 4d 94             	mov    cl,BYTE PTR [rbp-0x6c]
  237693:	80 e1 7f             	and    cl,0x7f
  237696:	88 4d 93             	mov    BYTE PTR [rbp-0x6d],cl

                const shift2_amt = @intCast(i32, N + (DBL_MANT_DIG + 2)) - sd;
  237699:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
  23769c:	ba b7 00 00 00       	mov    edx,0xb7
  2376a1:	29 c2                	sub    edx,eax
  2376a3:	89 55 8c             	mov    DWORD PTR [rbp-0x74],edx
                const shift2_amt_u7 = @intCast(u7, shift2_amt);
  2376a6:	8a 4d 8c             	mov    cl,BYTE PTR [rbp-0x74]
  2376a9:	80 e1 7f             	and    cl,0x7f
  2376ac:	88 4d 8b             	mov    BYTE PTR [rbp-0x75],cl

                a = (a >> shift1_amt_u7) | @boolToInt((a & (@intCast(u128, @maxValue(u128)) >> shift2_amt_u7)) != 0);
  2376af:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  2376b3:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  2376b7:	8a 4d 93             	mov    cl,BYTE PTR [rbp-0x6d]
  2376ba:	88 8d 4b ff ff ff    	mov    BYTE PTR [rbp-0xb5],cl
  2376c0:	49 89 f0             	mov    r8,rsi
  2376c3:	49 0f ad f8          	shrd   r8,rdi,cl
  2376c7:	8a 8d 4b ff ff ff    	mov    cl,BYTE PTR [rbp-0xb5]
  2376cd:	41 88 c9             	mov    r9b,cl
  2376d0:	c4 62 b3 f7 cf       	shrx   r9,rdi,r9
  2376d5:	31 c0                	xor    eax,eax
  2376d7:	f6 c1 40             	test   cl,0x40
  2376da:	4d 0f 45 c1          	cmovne r8,r9
  2376de:	41 89 c2             	mov    r10d,eax
  2376e1:	4d 0f 45 ca          	cmovne r9,r10
  2376e5:	44 8a 5d 8b          	mov    r11b,BYTE PTR [rbp-0x75]
  2376e9:	48 c7 c3 ff ff ff ff 	mov    rbx,0xffffffffffffffff
  2376f0:	44 88 d9             	mov    cl,r11b
  2376f3:	49 89 de             	mov    r14,rbx
  2376f6:	4d 0f ad f6          	shrd   r14,r14,cl
  2376fa:	45 88 df             	mov    r15b,r11b
  2376fd:	c4 e2 83 f7 db       	shrx   rbx,rbx,r15
  237702:	41 f6 c3 40          	test   r11b,0x40
  237706:	4c 0f 45 f3          	cmovne r14,rbx
  23770a:	49 0f 45 da          	cmovne rbx,r10
  23770e:	4c 21 f6             	and    rsi,r14
  237711:	48 21 df             	and    rdi,rbx
  237714:	48 09 fe             	or     rsi,rdi
  237717:	0f 95 c1             	setne  cl
  23771a:	0f b6 c1             	movzx  eax,cl
  23771d:	89 c7                	mov    edi,eax
  23771f:	49 09 f8             	or     r8,rdi
  237722:	4c 89 4d a8          	mov    QWORD PTR [rbp-0x58],r9
  237726:	4c 89 45 a0          	mov    QWORD PTR [rbp-0x60],r8
        switch (sd) {
  23772a:	48 89 b5 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rsi
  237731:	eb 1f                	jmp    237752 <__floattidf+0x202>
                a <<= 1;
  237733:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  237737:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  23773b:	48 89 c2             	mov    rdx,rax
  23773e:	48 01 d2             	add    rdx,rdx
  237741:	48 0f a4 c1 01       	shld   rcx,rax,0x1
  237746:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  23774a:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
        switch (sd) {
  23774e:	eb 02                	jmp    237752 <__floattidf+0x202>
  237750:	eb 00                	jmp    237752 <__floattidf+0x202>
            },
        }
        // finish
        a |= @boolToInt((a & 4) != 0); // Or P into R
  237752:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  237756:	89 c1                	mov    ecx,eax
  237758:	83 e1 04             	and    ecx,0x4
  23775b:	89 ca                	mov    edx,ecx
  23775d:	48 c1 ea 02          	shr    rdx,0x2
  237761:	48 09 d0             	or     rax,rdx
  237764:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        a += 1; // round - this step may add a significant bit
  237768:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  23776c:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  237770:	48 83 c0 01          	add    rax,0x1
  237774:	48 83 d2 00          	adc    rdx,0x0
  237778:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  23777c:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
        a >>= 2; // dump Q and R
  237780:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  237784:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  237788:	48 89 d6             	mov    rsi,rdx
  23778b:	48 0f a4 c6 3e       	shld   rsi,rax,0x3e
  237790:	48 c1 ea 02          	shr    rdx,0x2
  237794:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
  237798:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
        // a is now rounded to DBL_MANT_DIG or DBL_MANT_DIG+1 bits
        if ((a & (u128(1) << DBL_MANT_DIG)) != 0) {
  23779c:	40 8a 7d a6          	mov    dil,BYTE PTR [rbp-0x5a]
  2377a0:	40 f6 c7 20          	test   dil,0x20
  2377a4:	74 28                	je     2377ce <__floattidf+0x27e>
  2377a6:	eb 00                	jmp    2377a8 <__floattidf+0x258>
            a >>= 1;
  2377a8:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2377ac:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  2377b0:	48 89 ca             	mov    rdx,rcx
  2377b3:	48 0f a4 c2 3f       	shld   rdx,rax,0x3f
  2377b8:	48 d1 e9             	shr    rcx,1
  2377bb:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  2377bf:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
            e += 1;
  2377c3:	8b 75 98             	mov    esi,DWORD PTR [rbp-0x68]
  2377c6:	83 c6 01             	add    esi,0x1
  2377c9:	89 75 98             	mov    DWORD PTR [rbp-0x68],esi
        if ((a & (u128(1) << DBL_MANT_DIG)) != 0) {
  2377cc:	eb 02                	jmp    2377d0 <__floattidf+0x280>
  2377ce:	eb 00                	jmp    2377d0 <__floattidf+0x280>
    if (sd > DBL_MANT_DIG) {
  2377d0:	eb 4b                	jmp    23781d <__floattidf+0x2cd>
        }
        // a is now rounded to DBL_MANT_DIG bits
    } else {
        a <<= @intCast(u7, DBL_MANT_DIG - sd);
  2377d2:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2377d6:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  2377da:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
  2377dd:	be 35 00 00 00       	mov    esi,0x35
  2377e2:	29 d6                	sub    esi,edx
  2377e4:	40 88 f7             	mov    dil,sil
  2377e7:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  2377ee:	40 88 f9             	mov    cl,dil
  2377f1:	4c 8b 85 38 ff ff ff 	mov    r8,QWORD PTR [rbp-0xc8]
  2377f8:	49 0f a5 c0          	shld   r8,rax,cl
  2377fc:	41 88 f9             	mov    r9b,dil
  2377ff:	c4 e2 b1 f7 c0       	shlx   rax,rax,r9
  237804:	31 d2                	xor    edx,edx
  237806:	40 f6 c7 40          	test   dil,0x40
  23780a:	4c 0f 45 c0          	cmovne r8,rax
  23780e:	41 89 d1             	mov    r9d,edx
  237811:	49 0f 45 c1          	cmovne rax,r9
  237815:	4c 89 45 a8          	mov    QWORD PTR [rbp-0x58],r8
  237819:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        // a is now rounded to DBL_MANT_DIG bits
    }

    const s = @bitCast(u128, arg) >> (128 - 32);
  23781d:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  237820:	89 c1                	mov    ecx,eax
  237822:	48 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rcx
  237829:	48 c7 45 80 00 00 00 	mov    QWORD PTR [rbp-0x80],0x0
  237830:	00 
    const high: u64 = (@intCast(u64, s) & 0x80000000) | // sign
  237831:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
  237838:	89 c8                	mov    eax,ecx
  23783a:	25 00 00 00 80       	and    eax,0x80000000
  23783f:	89 c1                	mov    ecx,eax
        (@intCast(u32, (e + 1023)) << 20) | // exponent
  237841:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
  237844:	c1 e0 14             	shl    eax,0x14
  237847:	05 00 00 f0 3f       	add    eax,0x3ff00000
  23784c:	89 c2                	mov    edx,eax
    const high: u64 = (@intCast(u64, s) & 0x80000000) | // sign
  23784e:	48 09 d1             	or     rcx,rdx
        (@truncate(u32, a >> 32) & 0x000fffff); // mantissa-high
  237851:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
  237854:	89 c2                	mov    edx,eax
  237856:	89 d0                	mov    eax,edx
  237858:	25 ff ff 0f 00       	and    eax,0xfffff
  23785d:	89 c2                	mov    edx,eax
        (@intCast(u32, (e + 1023)) << 20) | // exponent
  23785f:	48 09 d1             	or     rcx,rdx
    const high: u64 = (@intCast(u64, s) & 0x80000000) | // sign
  237862:	48 89 8d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rcx
    const low: u64 = @truncate(u32, a); // mantissa-low
  237869:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
  23786c:	89 c0                	mov    eax,eax
  23786e:	89 c1                	mov    ecx,eax
  237870:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx

    return @bitCast(f64, low | (high << 32));
  237877:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  23787e:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  237885:	48 c1 e2 20          	shl    rdx,0x20
  237889:	48 09 d1             	or     rcx,rdx
  23788c:	c4 e1 f9 6e c1       	vmovq  xmm0,rcx
  237891:	48 83 c4 30          	add    rsp,0x30
  237895:	5b                   	pop    rbx
  237896:	41 5e                	pop    r14
  237898:	41 5f                	pop    r15
  23789a:	5d                   	pop    rbp
  23789b:	c3                   	ret    
  23789c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

00000000002378a0 <__floattisf>:
const builtin = @import("builtin");
const is_test = builtin.is_test;

const FLT_MANT_DIG = 24;

pub extern fn __floattisf(arg: i128) f32 {
  2378a0:	55                   	push   rbp
  2378a1:	48 89 e5             	mov    rbp,rsp
  2378a4:	41 57                	push   r15
  2378a6:	41 56                	push   r14
  2378a8:	53                   	push   rbx
  2378a9:	48 83 ec 28          	sub    rsp,0x28
  2378ad:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  2378b1:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    @setRuntimeSafety(is_test);

    if (arg == 0)
  2378b5:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  2378b9:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  2378bd:	48 09 fe             	or     rsi,rdi
  2378c0:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
  2378c7:	75 11                	jne    2378da <__floattisf+0x3a>
  2378c9:	eb 00                	jmp    2378cb <__floattisf+0x2b>
  2378cb:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
        return 0.0;
  2378cf:	48 83 c4 28          	add    rsp,0x28
  2378d3:	5b                   	pop    rbx
  2378d4:	41 5e                	pop    r14
  2378d6:	41 5f                	pop    r15
  2378d8:	5d                   	pop    rbp
  2378d9:	c3                   	ret    
    if (arg == 0)
  2378da:	eb 00                	jmp    2378dc <__floattisf+0x3c>
  2378dc:	b8 80 00 00 00       	mov    eax,0x80

    var ai = arg;
  2378e1:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  2378e5:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  2378e9:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  2378ed:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
    const N: u32 = 128;
  2378f1:	c7 45 c4 80 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x80
    const si = ai >> @intCast(u7, (N - 1));
  2378f8:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  2378fc:	48 c1 f9 3f          	sar    rcx,0x3f
  237900:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
  237904:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
    ai = ((ai ^ si) -% si);
  237908:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  23790c:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  237910:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
  237914:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
  237918:	48 31 fa             	xor    rdx,rdi
  23791b:	48 31 f1             	xor    rcx,rsi
  23791e:	48 29 f1             	sub    rcx,rsi
  237921:	48 19 fa             	sbb    rdx,rdi
  237924:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  237928:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
    var a = @bitCast(u128, ai);
  23792c:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  237930:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  237934:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
  237938:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx

    const sd = @bitCast(i32, N - @clz(a)); // number of significant digits
  23793c:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  237940:	f3 48 0f bd d1       	lzcnt  rdx,rcx
  237945:	41 88 d0             	mov    r8b,dl
  237948:	f3 48 0f bd 55 a0    	lzcnt  rdx,QWORD PTR [rbp-0x60]
  23794e:	41 89 d1             	mov    r9d,edx
  237951:	41 83 c1 40          	add    r9d,0x40
  237955:	45 88 ca             	mov    r10b,r9b
  237958:	48 85 c9             	test   rcx,rcx
  23795b:	89 85 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],eax
  237961:	44 88 95 63 ff ff ff 	mov    BYTE PTR [rbp-0x9d],r10b
  237968:	44 88 85 62 ff ff ff 	mov    BYTE PTR [rbp-0x9e],r8b
  23796f:	75 0c                	jne    23797d <__floattisf+0xdd>
  237971:	8a 85 63 ff ff ff    	mov    al,BYTE PTR [rbp-0x9d]
  237977:	88 85 62 ff ff ff    	mov    BYTE PTR [rbp-0x9e],al
  23797d:	8a 85 62 ff ff ff    	mov    al,BYTE PTR [rbp-0x9e]
  237983:	0f b6 c8             	movzx  ecx,al
  237986:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
  23798c:	29 ca                	sub    edx,ecx
  23798e:	89 55 9c             	mov    DWORD PTR [rbp-0x64],edx
    var e: i32 = sd - 1; // exponent
  237991:	8b 4d 9c             	mov    ecx,DWORD PTR [rbp-0x64]
  237994:	83 e9 01             	sub    ecx,0x1
  237997:	89 4d 98             	mov    DWORD PTR [rbp-0x68],ecx

    if (sd > FLT_MANT_DIG) {
  23799a:	83 7d 9c 18          	cmp    DWORD PTR [rbp-0x64],0x18
  23799e:	0f 8e 7e 01 00 00    	jle    237b22 <__floattisf+0x282>
        //                                                12345678901234567890123456
        //  1 = msb 1 bit
        //  P = bit FLT_MANT_DIG-1 bits to the right of 1
        //  Q = bit FLT_MANT_DIG bits to the right of 1
        //  R = "or" of all bits to the right of Q
        switch (sd) {
  2379a4:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
  2379a7:	89 c1                	mov    ecx,eax
  2379a9:	83 e9 19             	sub    ecx,0x19
  2379ac:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
  2379b2:	89 8d 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],ecx
  2379b8:	0f 84 c5 00 00 00    	je     237a83 <__floattisf+0x1e3>
  2379be:	eb 00                	jmp    2379c0 <__floattisf+0x120>
  2379c0:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
  2379c6:	83 e8 1a             	sub    eax,0x1a
  2379c9:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
  2379cf:	0f 84 cb 00 00 00    	je     237aa0 <__floattisf+0x200>
  2379d5:	eb 00                	jmp    2379d7 <__floattisf+0x137>
            FLT_MANT_DIG + 1 => {
                a <<= 1;
            },
            FLT_MANT_DIG + 2 => {},
            else => {
                const shift1_amt = @intCast(i32, sd - (FLT_MANT_DIG + 2));
  2379d7:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
  2379da:	83 c0 e6             	add    eax,0xffffffe6
  2379dd:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
                const shift1_amt_u7 = @intCast(u7, shift1_amt);
  2379e0:	8a 4d 94             	mov    cl,BYTE PTR [rbp-0x6c]
  2379e3:	80 e1 7f             	and    cl,0x7f
  2379e6:	88 4d 93             	mov    BYTE PTR [rbp-0x6d],cl

                const shift2_amt = @intCast(i32, N + (FLT_MANT_DIG + 2)) - sd;
  2379e9:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
  2379ec:	ba 9a 00 00 00       	mov    edx,0x9a
  2379f1:	29 c2                	sub    edx,eax
  2379f3:	89 55 8c             	mov    DWORD PTR [rbp-0x74],edx
                const shift2_amt_u7 = @intCast(u7, shift2_amt);
  2379f6:	8a 4d 8c             	mov    cl,BYTE PTR [rbp-0x74]
  2379f9:	80 e1 7f             	and    cl,0x7f
  2379fc:	88 4d 8b             	mov    BYTE PTR [rbp-0x75],cl

                a = (a >> shift1_amt_u7) | @boolToInt((a & (@intCast(u128, @maxValue(u128)) >> shift2_amt_u7)) != 0);
  2379ff:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
  237a03:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
  237a07:	8a 4d 93             	mov    cl,BYTE PTR [rbp-0x6d]
  237a0a:	88 8d 53 ff ff ff    	mov    BYTE PTR [rbp-0xad],cl
  237a10:	49 89 f0             	mov    r8,rsi
  237a13:	49 0f ad f8          	shrd   r8,rdi,cl
  237a17:	8a 8d 53 ff ff ff    	mov    cl,BYTE PTR [rbp-0xad]
  237a1d:	41 88 c9             	mov    r9b,cl
  237a20:	c4 62 b3 f7 cf       	shrx   r9,rdi,r9
  237a25:	31 c0                	xor    eax,eax
  237a27:	f6 c1 40             	test   cl,0x40
  237a2a:	4d 0f 45 c1          	cmovne r8,r9
  237a2e:	41 89 c2             	mov    r10d,eax
  237a31:	4d 0f 45 ca          	cmovne r9,r10
  237a35:	44 8a 5d 8b          	mov    r11b,BYTE PTR [rbp-0x75]
  237a39:	48 c7 c3 ff ff ff ff 	mov    rbx,0xffffffffffffffff
  237a40:	44 88 d9             	mov    cl,r11b
  237a43:	49 89 de             	mov    r14,rbx
  237a46:	4d 0f ad f6          	shrd   r14,r14,cl
  237a4a:	45 88 df             	mov    r15b,r11b
  237a4d:	c4 e2 83 f7 db       	shrx   rbx,rbx,r15
  237a52:	41 f6 c3 40          	test   r11b,0x40
  237a56:	4c 0f 45 f3          	cmovne r14,rbx
  237a5a:	49 0f 45 da          	cmovne rbx,r10
  237a5e:	4c 21 f6             	and    rsi,r14
  237a61:	48 21 df             	and    rdi,rbx
  237a64:	48 09 fe             	or     rsi,rdi
  237a67:	0f 95 c1             	setne  cl
  237a6a:	0f b6 c1             	movzx  eax,cl
  237a6d:	89 c7                	mov    edi,eax
  237a6f:	49 09 f8             	or     r8,rdi
  237a72:	4c 89 4d a8          	mov    QWORD PTR [rbp-0x58],r9
  237a76:	4c 89 45 a0          	mov    QWORD PTR [rbp-0x60],r8
        switch (sd) {
  237a7a:	48 89 b5 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rsi
  237a81:	eb 1f                	jmp    237aa2 <__floattisf+0x202>
                a <<= 1;
  237a83:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  237a87:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  237a8b:	48 89 c2             	mov    rdx,rax
  237a8e:	48 01 d2             	add    rdx,rdx
  237a91:	48 0f a4 c1 01       	shld   rcx,rax,0x1
  237a96:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  237a9a:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
        switch (sd) {
  237a9e:	eb 02                	jmp    237aa2 <__floattisf+0x202>
  237aa0:	eb 00                	jmp    237aa2 <__floattisf+0x202>
            },
        }
        // finish
        a |= @boolToInt((a & 4) != 0); // Or P into R
  237aa2:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  237aa6:	89 c1                	mov    ecx,eax
  237aa8:	83 e1 04             	and    ecx,0x4
  237aab:	89 ca                	mov    edx,ecx
  237aad:	48 c1 ea 02          	shr    rdx,0x2
  237ab1:	48 09 d0             	or     rax,rdx
  237ab4:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        a += 1; // round - this step may add a significant bit
  237ab8:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  237abc:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  237ac0:	48 83 c0 01          	add    rax,0x1
  237ac4:	48 83 d2 00          	adc    rdx,0x0
  237ac8:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  237acc:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
        a >>= 2; // dump Q and R
  237ad0:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  237ad4:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  237ad8:	48 89 d6             	mov    rsi,rdx
  237adb:	48 0f a4 c6 3e       	shld   rsi,rax,0x3e
  237ae0:	48 c1 ea 02          	shr    rdx,0x2
  237ae4:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
  237ae8:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
        // a is now rounded to FLT_MANT_DIG or FLT_MANT_DIG+1 bits
        if ((a & (u128(1) << FLT_MANT_DIG)) != 0) {
  237aec:	40 8a 7d a3          	mov    dil,BYTE PTR [rbp-0x5d]
  237af0:	40 f6 c7 01          	test   dil,0x1
  237af4:	74 28                	je     237b1e <__floattisf+0x27e>
  237af6:	eb 00                	jmp    237af8 <__floattisf+0x258>
            a >>= 1;
  237af8:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  237afc:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  237b00:	48 89 ca             	mov    rdx,rcx
  237b03:	48 0f a4 c2 3f       	shld   rdx,rax,0x3f
  237b08:	48 d1 e9             	shr    rcx,1
  237b0b:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  237b0f:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
            e += 1;
  237b13:	8b 75 98             	mov    esi,DWORD PTR [rbp-0x68]
  237b16:	83 c6 01             	add    esi,0x1
  237b19:	89 75 98             	mov    DWORD PTR [rbp-0x68],esi
        if ((a & (u128(1) << FLT_MANT_DIG)) != 0) {
  237b1c:	eb 02                	jmp    237b20 <__floattisf+0x280>
  237b1e:	eb 00                	jmp    237b20 <__floattisf+0x280>
    if (sd > FLT_MANT_DIG) {
  237b20:	eb 4b                	jmp    237b6d <__floattisf+0x2cd>
        }
        // a is now rounded to FLT_MANT_DIG bits
    } else {
        a <<= @intCast(u7, FLT_MANT_DIG - sd);
  237b22:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  237b26:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  237b2a:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
  237b2d:	be 18 00 00 00       	mov    esi,0x18
  237b32:	29 d6                	sub    esi,edx
  237b34:	40 88 f7             	mov    dil,sil
  237b37:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
  237b3e:	40 88 f9             	mov    cl,dil
  237b41:	4c 8b 85 40 ff ff ff 	mov    r8,QWORD PTR [rbp-0xc0]
  237b48:	49 0f a5 c0          	shld   r8,rax,cl
  237b4c:	41 88 f9             	mov    r9b,dil
  237b4f:	c4 e2 b1 f7 c0       	shlx   rax,rax,r9
  237b54:	31 d2                	xor    edx,edx
  237b56:	40 f6 c7 40          	test   dil,0x40
  237b5a:	4c 0f 45 c0          	cmovne r8,rax
  237b5e:	41 89 d1             	mov    r9d,edx
  237b61:	49 0f 45 c1          	cmovne rax,r9
  237b65:	4c 89 45 a8          	mov    QWORD PTR [rbp-0x58],r8
  237b69:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
        // a is now rounded to FLT_MANT_DIG bits
    }

    const s = @bitCast(u128, arg) >> (128 - 32);
  237b6d:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  237b70:	89 c1                	mov    ecx,eax
  237b72:	48 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rcx
  237b79:	48 c7 45 80 00 00 00 	mov    QWORD PTR [rbp-0x80],0x0
  237b80:	00 
    const r = (@intCast(u32, s) & 0x80000000) | // sign
  237b81:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
  237b87:	25 00 00 00 80       	and    eax,0x80000000
        (@intCast(u32, (e + 127)) << 23) | // exponent
  237b8c:	8b 55 98             	mov    edx,DWORD PTR [rbp-0x68]
  237b8f:	c1 e2 17             	shl    edx,0x17
  237b92:	81 c2 00 00 80 3f    	add    edx,0x3f800000
    const r = (@intCast(u32, s) & 0x80000000) | // sign
  237b98:	09 d0                	or     eax,edx
        (@truncate(u32, a) & 0x007fffff); // mantissa-high
  237b9a:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
  237b9d:	81 e2 ff ff 7f 00    	and    edx,0x7fffff
        (@intCast(u32, (e + 127)) << 23) | // exponent
  237ba3:	09 d0                	or     eax,edx
    const r = (@intCast(u32, s) & 0x80000000) | // sign
  237ba5:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax

    return @bitCast(f32, r);
  237bab:	c5 f9 6e 85 74 ff ff 	vmovd  xmm0,DWORD PTR [rbp-0x8c]
  237bb2:	ff 
  237bb3:	48 83 c4 28          	add    rsp,0x28
  237bb7:	5b                   	pop    rbx
  237bb8:	41 5e                	pop    r14
  237bba:	41 5f                	pop    r15
  237bbc:	5d                   	pop    rbp
  237bbd:	c3                   	ret    
  237bbe:	66 90                	xchg   ax,ax

0000000000237bc0 <__floatunditf>:
const builtin = @import("builtin");
const is_test = builtin.is_test;
const std = @import("std");

pub extern fn __floatunditf(a: u128) f128 {
  237bc0:	55                   	push   rbp
  237bc1:	48 89 e5             	mov    rbp,rsp
  237bc4:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  237bc8:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
    @setRuntimeSafety(is_test);

    if (a == 0) {
  237bcc:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  237bd0:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  237bd4:	48 09 fe             	or     rsi,rdi
  237bd7:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
  237bdb:	75 0b                	jne    237be8 <__floatunditf+0x28>
  237bdd:	eb 00                	jmp    237bdf <__floatunditf+0x1f>
        return 0;
  237bdf:	0f 28 05 ca 86 fc ff 	movaps xmm0,XMMWORD PTR [rip+0xfffffffffffc86ca]        # 2002b0 <__unnamed_100>
  237be6:	5d                   	pop    rbp
  237be7:	c3                   	ret    
    if (a == 0) {
  237be8:	eb 00                	jmp    237bea <__floatunditf+0x2a>
    const mantissa_bits = std.math.floatMantissaBits(f128);
    const exponent_bits = std.math.floatExponentBits(f128);
    const exponent_bias = (1 << (exponent_bits - 1)) - 1;
    const implicit_bit = 1 << mantissa_bits;

    const exp = (u128.bit_count - 1) - @clz(a);
  237bea:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  237bee:	f3 48 0f bd c8       	lzcnt  rcx,rax
  237bf3:	88 ca                	mov    dl,cl
  237bf5:	f3 48 0f bd 4d f0    	lzcnt  rcx,QWORD PTR [rbp-0x10]
  237bfb:	89 ce                	mov    esi,ecx
  237bfd:	83 c6 40             	add    esi,0x40
  237c00:	40 88 f7             	mov    dil,sil
  237c03:	48 85 c0             	test   rax,rax
  237c06:	40 88 7d c7          	mov    BYTE PTR [rbp-0x39],dil
  237c0a:	88 55 c6             	mov    BYTE PTR [rbp-0x3a],dl
  237c0d:	75 06                	jne    237c15 <__floatunditf+0x55>
  237c0f:	8a 45 c7             	mov    al,BYTE PTR [rbp-0x39]
  237c12:	88 45 c6             	mov    BYTE PTR [rbp-0x3a],al
  237c15:	8a 45 c6             	mov    al,BYTE PTR [rbp-0x3a]
  237c18:	b1 7f                	mov    cl,0x7f
  237c1a:	28 c1                	sub    cl,al
  237c1c:	88 4d ef             	mov    BYTE PTR [rbp-0x11],cl
    const shift = mantissa_bits - @intCast(u7, exp);
  237c1f:	8a 45 ef             	mov    al,BYTE PTR [rbp-0x11]
  237c22:	b1 70                	mov    cl,0x70
  237c24:	28 c1                	sub    cl,al
  237c26:	80 e1 7f             	and    cl,0x7f
  237c29:	88 4d ee             	mov    BYTE PTR [rbp-0x12],cl

    var result: u128 align(16) = (a << shift) ^ implicit_bit;
  237c2c:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  237c30:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  237c34:	8a 45 ee             	mov    al,BYTE PTR [rbp-0x12]
  237c37:	88 c1                	mov    cl,al
  237c39:	48 0f a5 d6          	shld   rsi,rdx,cl
  237c3d:	40 88 c7             	mov    dil,al
  237c40:	c4 e2 c1 f7 d2       	shlx   rdx,rdx,rdi
  237c45:	45 31 c0             	xor    r8d,r8d
  237c48:	a8 40                	test   al,0x40
  237c4a:	48 0f 45 f2          	cmovne rsi,rdx
  237c4e:	44 89 c7             	mov    edi,r8d
  237c51:	48 0f 45 d7          	cmovne rdx,rdi
  237c55:	48 bf 00 00 00 00 00 	movabs rdi,0x1000000000000
  237c5c:	00 01 00 
  237c5f:	48 31 fe             	xor    rsi,rdi
  237c62:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  237c66:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
    result += (@intCast(u128, exp) + exponent_bias) << mantissa_bits;
  237c6a:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  237c6e:	44 0f b6 45 ef       	movzx  r8d,BYTE PTR [rbp-0x11]
  237c73:	44 89 c6             	mov    esi,r8d
  237c76:	48 c1 e6 30          	shl    rsi,0x30
  237c7a:	48 01 f2             	add    rdx,rsi
  237c7d:	48 be 00 00 00 00 00 	movabs rsi,0x3fff000000000000
  237c84:	00 ff 3f 
  237c87:	48 01 f2             	add    rdx,rsi
  237c8a:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx

    return @bitCast(f128, result);
  237c8e:	0f 28 45 d0          	movaps xmm0,XMMWORD PTR [rbp-0x30]
  237c92:	5d                   	pop    rbp
  237c93:	c3                   	ret    
  237c94:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  237c9b:	00 00 00 00 00 

0000000000237ca0 <__floatunsitf>:
const builtin = @import("builtin");
const is_test = builtin.is_test;
const std = @import("std");

pub extern fn __floatunsitf(a: u64) f128 {
  237ca0:	55                   	push   rbp
  237ca1:	48 89 e5             	mov    rbp,rsp
  237ca4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    @setRuntimeSafety(is_test);

    if (a == 0) {
  237ca8:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
  237cad:	75 09                	jne    237cb8 <__floatunsitf+0x18>
        return 0;
  237caf:	0f 28 05 fa 85 fc ff 	movaps xmm0,XMMWORD PTR [rip+0xfffffffffffc85fa]        # 2002b0 <__unnamed_100>
  237cb6:	5d                   	pop    rbp
  237cb7:	c3                   	ret    
    if (a == 0) {
  237cb8:	eb 00                	jmp    237cba <__floatunsitf+0x1a>
    const mantissa_bits = std.math.floatMantissaBits(f128);
    const exponent_bits = std.math.floatExponentBits(f128);
    const exponent_bias = (1 << (exponent_bits - 1)) - 1;
    const implicit_bit = 1 << mantissa_bits;

    const exp = (u64.bit_count - 1) - @clz(a);
  237cba:	f3 48 0f bd 45 f8    	lzcnt  rax,QWORD PTR [rbp-0x8]
  237cc0:	88 c1                	mov    cl,al
  237cc2:	b2 3f                	mov    dl,0x3f
  237cc4:	28 ca                	sub    dl,cl
  237cc6:	80 e2 7f             	and    dl,0x7f
  237cc9:	88 55 f7             	mov    BYTE PTR [rbp-0x9],dl
    const shift = mantissa_bits - @intCast(u7, exp);
  237ccc:	8a 4d f7             	mov    cl,BYTE PTR [rbp-0x9]
  237ccf:	b2 70                	mov    dl,0x70
  237cd1:	28 ca                	sub    dl,cl
  237cd3:	80 e2 7f             	and    dl,0x7f
  237cd6:	88 55 f6             	mov    BYTE PTR [rbp-0xa],dl

    // TODO(#1148): @bitCast alignment error
    var result align(16) = (@intCast(u128, a) << shift) ^ implicit_bit;
  237cd9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  237cdd:	8a 4d f6             	mov    cl,BYTE PTR [rbp-0xa]
  237ce0:	31 f6                	xor    esi,esi
  237ce2:	89 f7                	mov    edi,esi
  237ce4:	88 4d df             	mov    BYTE PTR [rbp-0x21],cl
  237ce7:	49 89 f8             	mov    r8,rdi
  237cea:	49 0f a5 c0          	shld   r8,rax,cl
  237cee:	8a 4d df             	mov    cl,BYTE PTR [rbp-0x21]
  237cf1:	41 88 c9             	mov    r9b,cl
  237cf4:	c4 e2 b1 f7 c0       	shlx   rax,rax,r9
  237cf9:	f6 c1 40             	test   cl,0x40
  237cfc:	4c 0f 45 c0          	cmovne r8,rax
  237d00:	48 0f 45 c7          	cmovne rax,rdi
  237d04:	48 bf 00 00 00 00 00 	movabs rdi,0x1000000000000
  237d0b:	00 01 00 
  237d0e:	49 31 f8             	xor    r8,rdi
  237d11:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  237d15:	4c 89 45 e8          	mov    QWORD PTR [rbp-0x18],r8
    result += (@intCast(u128, exp) + exponent_bias) << mantissa_bits;
  237d19:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  237d1d:	0f b6 75 f7          	movzx  esi,BYTE PTR [rbp-0x9]
  237d21:	89 f7                	mov    edi,esi
  237d23:	48 c1 e7 30          	shl    rdi,0x30
  237d27:	48 01 f8             	add    rax,rdi
  237d2a:	48 bf 00 00 00 00 00 	movabs rdi,0x3fff000000000000
  237d31:	00 ff 3f 
  237d34:	48 01 f8             	add    rax,rdi
  237d37:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax

    return @bitCast(f128, result);
  237d3b:	0f 28 45 e0          	movaps xmm0,XMMWORD PTR [rbp-0x20]
  237d3f:	5d                   	pop    rbp
  237d40:	c3                   	ret    
  237d41:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  237d48:	0f 1f 84 00 00 00 00 
  237d4f:	00 

0000000000237d50 <__floatuntitf>:
const builtin = @import("builtin");
const is_test = builtin.is_test;

const LDBL_MANT_DIG = 113;

pub extern fn __floatuntitf(arg: u128) f128 {
  237d50:	55                   	push   rbp
  237d51:	48 89 e5             	mov    rbp,rsp
  237d54:	41 56                	push   r14
  237d56:	53                   	push   rbx
  237d57:	48 83 ec 10          	sub    rsp,0x10
  237d5b:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  237d5f:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
    @setRuntimeSafety(is_test);

    if (arg == 0)
  237d63:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  237d67:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  237d6b:	48 09 fe             	or     rsi,rdi
  237d6e:	48 89 75 88          	mov    QWORD PTR [rbp-0x78],rsi
  237d72:	75 12                	jne    237d86 <__floatuntitf+0x36>
  237d74:	eb 00                	jmp    237d76 <__floatuntitf+0x26>
        return 0.0;
  237d76:	0f 28 05 33 85 fc ff 	movaps xmm0,XMMWORD PTR [rip+0xfffffffffffc8533]        # 2002b0 <__unnamed_100>
  237d7d:	48 83 c4 10          	add    rsp,0x10
  237d81:	5b                   	pop    rbx
  237d82:	41 5e                	pop    r14
  237d84:	5d                   	pop    rbp
  237d85:	c3                   	ret    
    if (arg == 0)
  237d86:	eb 00                	jmp    237d88 <__floatuntitf+0x38>
  237d88:	b8 80 00 00 00       	mov    eax,0x80

    var a = arg;
  237d8d:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  237d91:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  237d95:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  237d99:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    const N: u32 = @sizeOf(u128) * 8;
  237d9d:	c7 45 cc 80 00 00 00 	mov    DWORD PTR [rbp-0x34],0x80
    const sd = @bitCast(i32, N - @clz(a)); // number of significant digits
  237da4:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  237da8:	f3 48 0f bd d1       	lzcnt  rdx,rcx
  237dad:	40 88 d6             	mov    sil,dl
  237db0:	f3 48 0f bd 55 d0    	lzcnt  rdx,QWORD PTR [rbp-0x30]
  237db6:	89 d7                	mov    edi,edx
  237db8:	83 c7 40             	add    edi,0x40
  237dbb:	41 88 f8             	mov    r8b,dil
  237dbe:	48 85 c9             	test   rcx,rcx
  237dc1:	89 45 84             	mov    DWORD PTR [rbp-0x7c],eax
  237dc4:	44 88 45 83          	mov    BYTE PTR [rbp-0x7d],r8b
  237dc8:	40 88 75 82          	mov    BYTE PTR [rbp-0x7e],sil
  237dcc:	75 06                	jne    237dd4 <__floatuntitf+0x84>
  237dce:	8a 45 83             	mov    al,BYTE PTR [rbp-0x7d]
  237dd1:	88 45 82             	mov    BYTE PTR [rbp-0x7e],al
  237dd4:	8a 45 82             	mov    al,BYTE PTR [rbp-0x7e]
  237dd7:	0f b6 c8             	movzx  ecx,al
  237dda:	8b 55 84             	mov    edx,DWORD PTR [rbp-0x7c]
  237ddd:	29 ca                	sub    edx,ecx
  237ddf:	89 55 c8             	mov    DWORD PTR [rbp-0x38],edx
    var e: i32 = sd - 1; // exponent
  237de2:	8b 4d c8             	mov    ecx,DWORD PTR [rbp-0x38]
  237de5:	83 e9 01             	sub    ecx,0x1
  237de8:	89 4d c4             	mov    DWORD PTR [rbp-0x3c],ecx
    if (sd > LDBL_MANT_DIG) {
  237deb:	83 7d c8 71          	cmp    DWORD PTR [rbp-0x38],0x71
  237def:	0f 8e 6e 01 00 00    	jle    237f63 <__floatuntitf+0x213>
        //                                                12345678901234567890123456
        //  1 = msb 1 bit
        //  P = bit LDBL_MANT_DIG-1 bits to the right of 1
        //  Q = bit LDBL_MANT_DIG bits to the right of 1
        //  R = "or" of all bits to the right of Q
        switch (sd) {
  237df5:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  237df8:	89 c1                	mov    ecx,eax
  237dfa:	83 e9 72             	sub    ecx,0x72
  237dfd:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
  237e03:	89 8d 78 ff ff ff    	mov    DWORD PTR [rbp-0x88],ecx
  237e09:	0f 84 b5 00 00 00    	je     237ec4 <__floatuntitf+0x174>
  237e0f:	eb 00                	jmp    237e11 <__floatuntitf+0xc1>
  237e11:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
  237e17:	83 e8 73             	sub    eax,0x73
  237e1a:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
  237e20:	0f 84 bb 00 00 00    	je     237ee1 <__floatuntitf+0x191>
  237e26:	eb 00                	jmp    237e28 <__floatuntitf+0xd8>
            LDBL_MANT_DIG + 1 => {
                a <<= 1;
            },
            LDBL_MANT_DIG + 2 => {},
            else => {
                const shift_amt = @bitCast(i32, N + (LDBL_MANT_DIG + 2)) - sd;
  237e28:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  237e2b:	b9 f3 00 00 00       	mov    ecx,0xf3
  237e30:	29 c1                	sub    ecx,eax
  237e32:	89 4d c0             	mov    DWORD PTR [rbp-0x40],ecx
                const shift_amt_u7 = @intCast(u7, shift_amt);
  237e35:	8a 55 c0             	mov    dl,BYTE PTR [rbp-0x40]
  237e38:	80 e2 7f             	and    dl,0x7f
  237e3b:	88 55 bf             	mov    BYTE PTR [rbp-0x41],dl
                a = (a >> @intCast(u7, sd - (LDBL_MANT_DIG + 2))) |
  237e3e:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  237e42:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  237e46:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  237e49:	83 c0 8d             	add    eax,0xffffff8d
  237e4c:	88 c2                	mov    dl,al
  237e4e:	88 d1                	mov    cl,dl
  237e50:	49 89 f0             	mov    r8,rsi
  237e53:	49 0f ad f8          	shrd   r8,rdi,cl
  237e57:	41 88 d1             	mov    r9b,dl
  237e5a:	c4 62 b3 f7 cf       	shrx   r9,rdi,r9
  237e5f:	31 c0                	xor    eax,eax
  237e61:	f6 c2 40             	test   dl,0x40
  237e64:	4d 0f 45 c1          	cmovne r8,r9
  237e68:	41 89 c2             	mov    r10d,eax
  237e6b:	4d 0f 45 ca          	cmovne r9,r10
                    @boolToInt((a & (u128(@maxValue(u128)) >> shift_amt_u7)) != 0);
  237e6f:	8a 4d bf             	mov    cl,BYTE PTR [rbp-0x41]
  237e72:	49 c7 c3 ff ff ff ff 	mov    r11,0xffffffffffffffff
  237e79:	88 8d 73 ff ff ff    	mov    BYTE PTR [rbp-0x8d],cl
  237e7f:	4c 89 db             	mov    rbx,r11
  237e82:	48 0f ad db          	shrd   rbx,rbx,cl
  237e86:	8a 8d 73 ff ff ff    	mov    cl,BYTE PTR [rbp-0x8d]
  237e8c:	41 88 ce             	mov    r14b,cl
  237e8f:	c4 42 8b f7 db       	shrx   r11,r11,r14
  237e94:	f6 c1 40             	test   cl,0x40
  237e97:	49 0f 45 db          	cmovne rbx,r11
  237e9b:	4d 0f 45 da          	cmovne r11,r10
  237e9f:	48 21 de             	and    rsi,rbx
  237ea2:	4c 21 df             	and    rdi,r11
  237ea5:	48 09 fe             	or     rsi,rdi
  237ea8:	0f 95 c2             	setne  dl
  237eab:	0f b6 c2             	movzx  eax,dl
  237eae:	89 c7                	mov    edi,eax
                a = (a >> @intCast(u7, sd - (LDBL_MANT_DIG + 2))) |
  237eb0:	49 09 f8             	or     r8,rdi
  237eb3:	4c 89 4d d8          	mov    QWORD PTR [rbp-0x28],r9
  237eb7:	4c 89 45 d0          	mov    QWORD PTR [rbp-0x30],r8
        switch (sd) {
  237ebb:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
  237ec2:	eb 1f                	jmp    237ee3 <__floatuntitf+0x193>
                a <<= 1;
  237ec4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  237ec8:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  237ecc:	48 89 c2             	mov    rdx,rax
  237ecf:	48 01 d2             	add    rdx,rdx
  237ed2:	48 0f a4 c1 01       	shld   rcx,rax,0x1
  237ed7:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  237edb:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
        switch (sd) {
  237edf:	eb 02                	jmp    237ee3 <__floatuntitf+0x193>
  237ee1:	eb 00                	jmp    237ee3 <__floatuntitf+0x193>
            },
        }
        // finish
        a |= @boolToInt((a & 4) != 0); // Or P into R
  237ee3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  237ee7:	89 c1                	mov    ecx,eax
  237ee9:	83 e1 04             	and    ecx,0x4
  237eec:	89 ca                	mov    edx,ecx
  237eee:	48 c1 ea 02          	shr    rdx,0x2
  237ef2:	48 09 d0             	or     rax,rdx
  237ef5:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
        a += 1; // round - this step may add a significant bit
  237ef9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  237efd:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  237f01:	48 83 c0 01          	add    rax,0x1
  237f05:	48 83 d2 00          	adc    rdx,0x0
  237f09:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  237f0d:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
        a >>= 2; // dump Q and R
  237f11:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  237f15:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  237f19:	48 89 d6             	mov    rsi,rdx
  237f1c:	48 0f a4 c6 3e       	shld   rsi,rax,0x3e
  237f21:	48 c1 ea 02          	shr    rdx,0x2
  237f25:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  237f29:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        // a is now rounded to LDBL_MANT_DIG or LDBL_MANT_DIG+1 bits
        if ((a & (u128(1) << LDBL_MANT_DIG)) != 0) {
  237f2d:	40 8a 7d de          	mov    dil,BYTE PTR [rbp-0x22]
  237f31:	40 f6 c7 02          	test   dil,0x2
  237f35:	74 28                	je     237f5f <__floatuntitf+0x20f>
  237f37:	eb 00                	jmp    237f39 <__floatuntitf+0x1e9>
            a >>= 1;
  237f39:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  237f3d:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  237f41:	48 89 ca             	mov    rdx,rcx
  237f44:	48 0f a4 c2 3f       	shld   rdx,rax,0x3f
  237f49:	48 d1 e9             	shr    rcx,1
  237f4c:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  237f50:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            e += 1;
  237f54:	8b 75 c4             	mov    esi,DWORD PTR [rbp-0x3c]
  237f57:	83 c6 01             	add    esi,0x1
  237f5a:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
        if ((a & (u128(1) << LDBL_MANT_DIG)) != 0) {
  237f5d:	eb 02                	jmp    237f61 <__floatuntitf+0x211>
  237f5f:	eb 00                	jmp    237f61 <__floatuntitf+0x211>
    if (sd > LDBL_MANT_DIG) {
  237f61:	eb 4b                	jmp    237fae <__floatuntitf+0x25e>
        }
        // a is now rounded to LDBL_MANT_DIG bits
    } else {
        a <<= @intCast(u7, LDBL_MANT_DIG - sd);
  237f63:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  237f67:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  237f6b:	8b 55 c8             	mov    edx,DWORD PTR [rbp-0x38]
  237f6e:	be 71 00 00 00       	mov    esi,0x71
  237f73:	29 d6                	sub    esi,edx
  237f75:	40 88 f7             	mov    dil,sil
  237f78:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
  237f7f:	40 88 f9             	mov    cl,dil
  237f82:	4c 8b 85 60 ff ff ff 	mov    r8,QWORD PTR [rbp-0xa0]
  237f89:	49 0f a5 c0          	shld   r8,rax,cl
  237f8d:	41 88 f9             	mov    r9b,dil
  237f90:	c4 e2 b1 f7 c0       	shlx   rax,rax,r9
  237f95:	31 d2                	xor    edx,edx
  237f97:	40 f6 c7 40          	test   dil,0x40
  237f9b:	4c 0f 45 c0          	cmovne r8,rax
  237f9f:	41 89 d1             	mov    r9d,edx
  237fa2:	49 0f 45 c1          	cmovne rax,r9
  237fa6:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
  237faa:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
        // a is now rounded to LDBL_MANT_DIG bits
    }

    const high: u128 = (@intCast(u64, (e + 16383)) << 48) | // exponent
  237fae:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
  237fb1:	05 ff 3f 00 00       	add    eax,0x3fff
  237fb6:	89 c1                	mov    ecx,eax
  237fb8:	48 c1 e1 30          	shl    rcx,0x30
        (@truncate(u64, a >> 64) & 0x0000ffffffffffff); // mantissa-high
  237fbc:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  237fc0:	40 b6 30             	mov    sil,0x30
  237fc3:	40 88 f7             	mov    dil,sil
  237fc6:	c4 e2 c0 f5 d2       	bzhi   rdx,rdx,rdi
    const high: u128 = (@intCast(u64, (e + 16383)) << 48) | // exponent
  237fcb:	48 09 d1             	or     rcx,rdx
  237fce:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  237fd2:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
  237fd9:	00 
    const low = @truncate(u64, a); // mantissa-low
  237fda:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  237fde:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx

    return @bitCast(f128, low | (high << 64));
  237fe2:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  237fe6:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  237fea:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
  237fee:	48 89 55 90          	mov    QWORD PTR [rbp-0x70],rdx
  237ff2:	0f 28 45 90          	movaps xmm0,XMMWORD PTR [rbp-0x70]
  237ff6:	48 83 c4 10          	add    rsp,0x10
  237ffa:	5b                   	pop    rbx
  237ffb:	41 5e                	pop    r14
  237ffd:	5d                   	pop    rbp
  237ffe:	c3                   	ret    
  237fff:	90                   	nop

0000000000238000 <__floatuntidf>:
const builtin = @import("builtin");
const is_test = builtin.is_test;

const DBL_MANT_DIG = 53;

pub extern fn __floatuntidf(arg: u128) f64 {
  238000:	55                   	push   rbp
  238001:	48 89 e5             	mov    rbp,rsp
  238004:	41 56                	push   r14
  238006:	53                   	push   rbx
  238007:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  23800b:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
    @setRuntimeSafety(is_test);

    if (arg == 0)
  23800f:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  238013:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  238017:	48 09 fe             	or     rsi,rdi
  23801a:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  23801e:	75 0b                	jne    23802b <__floatuntidf+0x2b>
  238020:	eb 00                	jmp    238022 <__floatuntidf+0x22>
  238022:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
        return 0.0;
  238026:	5b                   	pop    rbx
  238027:	41 5e                	pop    r14
  238029:	5d                   	pop    rbp
  23802a:	c3                   	ret    
    if (arg == 0)
  23802b:	eb 00                	jmp    23802d <__floatuntidf+0x2d>
  23802d:	b8 80 00 00 00       	mov    eax,0x80

    var a = arg;
  238032:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  238036:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  23803a:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  23803e:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    const N: u32 = @sizeOf(u128) * 8;
  238042:	c7 45 cc 80 00 00 00 	mov    DWORD PTR [rbp-0x34],0x80
    const sd = @bitCast(i32, N - @clz(a)); // number of significant digits
  238049:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  23804d:	f3 48 0f bd d1       	lzcnt  rdx,rcx
  238052:	40 88 d6             	mov    sil,dl
  238055:	f3 48 0f bd 55 d0    	lzcnt  rdx,QWORD PTR [rbp-0x30]
  23805b:	89 d7                	mov    edi,edx
  23805d:	83 c7 40             	add    edi,0x40
  238060:	41 88 f8             	mov    r8b,dil
  238063:	48 85 c9             	test   rcx,rcx
  238066:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
  238069:	44 88 45 9b          	mov    BYTE PTR [rbp-0x65],r8b
  23806d:	40 88 75 9a          	mov    BYTE PTR [rbp-0x66],sil
  238071:	75 06                	jne    238079 <__floatuntidf+0x79>
  238073:	8a 45 9b             	mov    al,BYTE PTR [rbp-0x65]
  238076:	88 45 9a             	mov    BYTE PTR [rbp-0x66],al
  238079:	8a 45 9a             	mov    al,BYTE PTR [rbp-0x66]
  23807c:	0f b6 c8             	movzx  ecx,al
  23807f:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
  238082:	29 ca                	sub    edx,ecx
  238084:	89 55 c8             	mov    DWORD PTR [rbp-0x38],edx
    var e: i32 = sd - 1; // exponent
  238087:	8b 4d c8             	mov    ecx,DWORD PTR [rbp-0x38]
  23808a:	83 e9 01             	sub    ecx,0x1
  23808d:	89 4d c4             	mov    DWORD PTR [rbp-0x3c],ecx
    if (sd > DBL_MANT_DIG) {
  238090:	83 7d c8 35          	cmp    DWORD PTR [rbp-0x38],0x35
  238094:	0f 8e 59 01 00 00    	jle    2381f3 <__floatuntidf+0x1f3>
        //                                                12345678901234567890123456
        //  1 = msb 1 bit
        //  P = bit DBL_MANT_DIG-1 bits to the right of 1
        //  Q = bit DBL_MANT_DIG bits to the right of 1
        //  R = "or" of all bits to the right of Q
        switch (sd) {
  23809a:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  23809d:	89 c1                	mov    ecx,eax
  23809f:	83 e9 36             	sub    ecx,0x36
  2380a2:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
  2380a5:	89 4d 90             	mov    DWORD PTR [rbp-0x70],ecx
  2380a8:	0f 84 a6 00 00 00    	je     238154 <__floatuntidf+0x154>
  2380ae:	eb 00                	jmp    2380b0 <__floatuntidf+0xb0>
  2380b0:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
  2380b3:	83 e8 37             	sub    eax,0x37
  2380b6:	89 45 8c             	mov    DWORD PTR [rbp-0x74],eax
  2380b9:	0f 84 b2 00 00 00    	je     238171 <__floatuntidf+0x171>
  2380bf:	eb 00                	jmp    2380c1 <__floatuntidf+0xc1>
            DBL_MANT_DIG + 1 => {
                a <<= 1;
            },
            DBL_MANT_DIG + 2 => {},
            else => {
                const shift_amt = @bitCast(i32, N + (DBL_MANT_DIG + 2)) - sd;
  2380c1:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  2380c4:	b9 b7 00 00 00       	mov    ecx,0xb7
  2380c9:	29 c1                	sub    ecx,eax
  2380cb:	89 4d c0             	mov    DWORD PTR [rbp-0x40],ecx
                const shift_amt_u7 = @intCast(u7, shift_amt);
  2380ce:	8a 55 c0             	mov    dl,BYTE PTR [rbp-0x40]
  2380d1:	80 e2 7f             	and    dl,0x7f
  2380d4:	88 55 bf             	mov    BYTE PTR [rbp-0x41],dl
                a = (a >> @intCast(u7, sd - (DBL_MANT_DIG + 2))) |
  2380d7:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  2380db:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  2380df:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  2380e2:	83 c0 c9             	add    eax,0xffffffc9
  2380e5:	88 c2                	mov    dl,al
  2380e7:	88 d1                	mov    cl,dl
  2380e9:	49 89 f0             	mov    r8,rsi
  2380ec:	49 0f ad f8          	shrd   r8,rdi,cl
  2380f0:	41 88 d1             	mov    r9b,dl
  2380f3:	c4 62 b3 f7 cf       	shrx   r9,rdi,r9
  2380f8:	31 c0                	xor    eax,eax
  2380fa:	f6 c2 40             	test   dl,0x40
  2380fd:	4d 0f 45 c1          	cmovne r8,r9
  238101:	41 89 c2             	mov    r10d,eax
  238104:	4d 0f 45 ca          	cmovne r9,r10
                    @boolToInt((a & (u128(@maxValue(u128)) >> shift_amt_u7)) != 0);
  238108:	8a 4d bf             	mov    cl,BYTE PTR [rbp-0x41]
  23810b:	49 c7 c3 ff ff ff ff 	mov    r11,0xffffffffffffffff
  238112:	88 4d 8b             	mov    BYTE PTR [rbp-0x75],cl
  238115:	4c 89 db             	mov    rbx,r11
  238118:	48 0f ad db          	shrd   rbx,rbx,cl
  23811c:	8a 4d 8b             	mov    cl,BYTE PTR [rbp-0x75]
  23811f:	41 88 ce             	mov    r14b,cl
  238122:	c4 42 8b f7 db       	shrx   r11,r11,r14
  238127:	f6 c1 40             	test   cl,0x40
  23812a:	49 0f 45 db          	cmovne rbx,r11
  23812e:	4d 0f 45 da          	cmovne r11,r10
  238132:	48 21 de             	and    rsi,rbx
  238135:	4c 21 df             	and    rdi,r11
  238138:	48 09 fe             	or     rsi,rdi
  23813b:	0f 95 c2             	setne  dl
  23813e:	0f b6 c2             	movzx  eax,dl
  238141:	89 c7                	mov    edi,eax
                a = (a >> @intCast(u7, sd - (DBL_MANT_DIG + 2))) |
  238143:	49 09 f8             	or     r8,rdi
  238146:	4c 89 4d d8          	mov    QWORD PTR [rbp-0x28],r9
  23814a:	4c 89 45 d0          	mov    QWORD PTR [rbp-0x30],r8
        switch (sd) {
  23814e:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
  238152:	eb 1f                	jmp    238173 <__floatuntidf+0x173>
                a <<= 1;
  238154:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  238158:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  23815c:	48 89 c2             	mov    rdx,rax
  23815f:	48 01 d2             	add    rdx,rdx
  238162:	48 0f a4 c1 01       	shld   rcx,rax,0x1
  238167:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  23816b:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
        switch (sd) {
  23816f:	eb 02                	jmp    238173 <__floatuntidf+0x173>
  238171:	eb 00                	jmp    238173 <__floatuntidf+0x173>
            },
        }
        // finish
        a |= @boolToInt((a & 4) != 0); // Or P into R
  238173:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  238177:	89 c1                	mov    ecx,eax
  238179:	83 e1 04             	and    ecx,0x4
  23817c:	89 ca                	mov    edx,ecx
  23817e:	48 c1 ea 02          	shr    rdx,0x2
  238182:	48 09 d0             	or     rax,rdx
  238185:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
        a += 1; // round - this step may add a significant bit
  238189:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23818d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  238191:	48 83 c0 01          	add    rax,0x1
  238195:	48 83 d2 00          	adc    rdx,0x0
  238199:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  23819d:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
        a >>= 2; // dump Q and R
  2381a1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2381a5:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  2381a9:	48 89 d6             	mov    rsi,rdx
  2381ac:	48 0f a4 c6 3e       	shld   rsi,rax,0x3e
  2381b1:	48 c1 ea 02          	shr    rdx,0x2
  2381b5:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  2381b9:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        // a is now rounded to DBL_MANT_DIG or DBL_MANT_DIG+1 bits
        if ((a & (u128(1) << DBL_MANT_DIG)) != 0) {
  2381bd:	40 8a 7d d6          	mov    dil,BYTE PTR [rbp-0x2a]
  2381c1:	40 f6 c7 20          	test   dil,0x20
  2381c5:	74 28                	je     2381ef <__floatuntidf+0x1ef>
  2381c7:	eb 00                	jmp    2381c9 <__floatuntidf+0x1c9>
            a >>= 1;
  2381c9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2381cd:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  2381d1:	48 89 ca             	mov    rdx,rcx
  2381d4:	48 0f a4 c2 3f       	shld   rdx,rax,0x3f
  2381d9:	48 d1 e9             	shr    rcx,1
  2381dc:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  2381e0:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            e += 1;
  2381e4:	8b 75 c4             	mov    esi,DWORD PTR [rbp-0x3c]
  2381e7:	83 c6 01             	add    esi,0x1
  2381ea:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
        if ((a & (u128(1) << DBL_MANT_DIG)) != 0) {
  2381ed:	eb 02                	jmp    2381f1 <__floatuntidf+0x1f1>
  2381ef:	eb 00                	jmp    2381f1 <__floatuntidf+0x1f1>
    if (sd > DBL_MANT_DIG) {
  2381f1:	eb 4b                	jmp    23823e <__floatuntidf+0x23e>
        }
        // a is now rounded to DBL_MANT_DIG bits
    } else {
        a <<= @intCast(u7, DBL_MANT_DIG - sd);
  2381f3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2381f7:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  2381fb:	8b 55 c8             	mov    edx,DWORD PTR [rbp-0x38]
  2381fe:	be 35 00 00 00       	mov    esi,0x35
  238203:	29 d6                	sub    esi,edx
  238205:	40 88 f7             	mov    dil,sil
  238208:	48 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rcx
  23820f:	40 88 f9             	mov    cl,dil
  238212:	4c 8b 85 78 ff ff ff 	mov    r8,QWORD PTR [rbp-0x88]
  238219:	49 0f a5 c0          	shld   r8,rax,cl
  23821d:	41 88 f9             	mov    r9b,dil
  238220:	c4 e2 b1 f7 c0       	shlx   rax,rax,r9
  238225:	31 d2                	xor    edx,edx
  238227:	40 f6 c7 40          	test   dil,0x40
  23822b:	4c 0f 45 c0          	cmovne r8,rax
  23822f:	41 89 d1             	mov    r9d,edx
  238232:	49 0f 45 c1          	cmovne rax,r9
  238236:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
  23823a:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
        // a is now rounded to DBL_MANT_DIG bits
    }

    const high: u64 = @bitCast(u32, (e + 1023) << 20) | // exponent
  23823e:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
  238241:	c1 e0 14             	shl    eax,0x14
        (@truncate(u32, a >> 32) & 0x000FFFFF); // mantissa-high
  238244:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
  238247:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
    const high: u64 = @bitCast(u32, (e + 1023) << 20) | // exponent
  23824d:	89 ca                	mov    edx,ecx
  23824f:	89 c6                	mov    esi,eax
  238251:	8d 84 16 00 00 f0 3f 	lea    eax,[rsi+rdx*1+0x3ff00000]
  238258:	89 c2                	mov    edx,eax
  23825a:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
    const low = @truncate(u32, a); // mantissa-low
  23825e:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
  238261:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax

    return @bitCast(f64, low | (high << 32));
  238264:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
  238267:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  23826b:	48 c1 e2 20          	shl    rdx,0x20
  23826f:	89 c0                	mov    eax,eax
  238271:	89 c6                	mov    esi,eax
  238273:	48 09 d6             	or     rsi,rdx
  238276:	c4 e1 f9 6e c6       	vmovq  xmm0,rsi
  23827b:	5b                   	pop    rbx
  23827c:	41 5e                	pop    r14
  23827e:	5d                   	pop    rbp
  23827f:	c3                   	ret    

0000000000238280 <__floatuntisf>:
const builtin = @import("builtin");
const is_test = builtin.is_test;

const FLT_MANT_DIG = 24;

pub extern fn __floatuntisf(arg: u128) f32 {
  238280:	55                   	push   rbp
  238281:	48 89 e5             	mov    rbp,rsp
  238284:	41 56                	push   r14
  238286:	53                   	push   rbx
  238287:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  23828b:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
    @setRuntimeSafety(is_test);

    if (arg == 0)
  23828f:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  238293:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
  238297:	48 09 fe             	or     rsi,rdi
  23829a:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
  23829e:	75 0b                	jne    2382ab <__floatuntisf+0x2b>
  2382a0:	eb 00                	jmp    2382a2 <__floatuntisf+0x22>
  2382a2:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
        return 0.0;
  2382a6:	5b                   	pop    rbx
  2382a7:	41 5e                	pop    r14
  2382a9:	5d                   	pop    rbp
  2382aa:	c3                   	ret    
    if (arg == 0)
  2382ab:	eb 00                	jmp    2382ad <__floatuntisf+0x2d>
  2382ad:	b8 80 00 00 00       	mov    eax,0x80

    var a = arg;
  2382b2:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  2382b6:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  2382ba:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  2382be:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    const N: u32 = @sizeOf(u128) * 8;
  2382c2:	c7 45 cc 80 00 00 00 	mov    DWORD PTR [rbp-0x34],0x80
    const sd = @bitCast(i32, N - @clz(a)); // number of significant digits
  2382c9:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  2382cd:	f3 48 0f bd d1       	lzcnt  rdx,rcx
  2382d2:	40 88 d6             	mov    sil,dl
  2382d5:	f3 48 0f bd 55 d0    	lzcnt  rdx,QWORD PTR [rbp-0x30]
  2382db:	89 d7                	mov    edi,edx
  2382dd:	83 c7 40             	add    edi,0x40
  2382e0:	41 88 f8             	mov    r8b,dil
  2382e3:	48 85 c9             	test   rcx,rcx
  2382e6:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
  2382e9:	44 88 45 a3          	mov    BYTE PTR [rbp-0x5d],r8b
  2382ed:	40 88 75 a2          	mov    BYTE PTR [rbp-0x5e],sil
  2382f1:	75 06                	jne    2382f9 <__floatuntisf+0x79>
  2382f3:	8a 45 a3             	mov    al,BYTE PTR [rbp-0x5d]
  2382f6:	88 45 a2             	mov    BYTE PTR [rbp-0x5e],al
  2382f9:	8a 45 a2             	mov    al,BYTE PTR [rbp-0x5e]
  2382fc:	0f b6 c8             	movzx  ecx,al
  2382ff:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
  238302:	29 ca                	sub    edx,ecx
  238304:	89 55 c8             	mov    DWORD PTR [rbp-0x38],edx
    var e: i32 = sd - 1; // exponent
  238307:	8b 4d c8             	mov    ecx,DWORD PTR [rbp-0x38]
  23830a:	83 e9 01             	sub    ecx,0x1
  23830d:	89 4d c4             	mov    DWORD PTR [rbp-0x3c],ecx
    if (sd > FLT_MANT_DIG) {
  238310:	83 7d c8 18          	cmp    DWORD PTR [rbp-0x38],0x18
  238314:	0f 8e 59 01 00 00    	jle    238473 <__floatuntisf+0x1f3>
        //                                                12345678901234567890123456
        //  1 = msb 1 bit
        //  P = bit FLT_MANT_DIG-1 bits to the right of 1
        //  Q = bit FLT_MANT_DIG bits to the right of 1
        //  R = "or" of all bits to the right of Q
        switch (sd) {
  23831a:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  23831d:	89 c1                	mov    ecx,eax
  23831f:	83 e9 19             	sub    ecx,0x19
  238322:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
  238325:	89 4d 98             	mov    DWORD PTR [rbp-0x68],ecx
  238328:	0f 84 a6 00 00 00    	je     2383d4 <__floatuntisf+0x154>
  23832e:	eb 00                	jmp    238330 <__floatuntisf+0xb0>
  238330:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
  238333:	83 e8 1a             	sub    eax,0x1a
  238336:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
  238339:	0f 84 b2 00 00 00    	je     2383f1 <__floatuntisf+0x171>
  23833f:	eb 00                	jmp    238341 <__floatuntisf+0xc1>
            FLT_MANT_DIG + 1 => {
                a <<= 1;
            },
            FLT_MANT_DIG + 2 => {},
            else => {
                const shift_amt = @bitCast(i32, N + (FLT_MANT_DIG + 2)) - sd;
  238341:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  238344:	b9 9a 00 00 00       	mov    ecx,0x9a
  238349:	29 c1                	sub    ecx,eax
  23834b:	89 4d c0             	mov    DWORD PTR [rbp-0x40],ecx
                const shift_amt_u7 = @intCast(u7, shift_amt);
  23834e:	8a 55 c0             	mov    dl,BYTE PTR [rbp-0x40]
  238351:	80 e2 7f             	and    dl,0x7f
  238354:	88 55 bf             	mov    BYTE PTR [rbp-0x41],dl
                a = (a >> @intCast(u7, sd - (FLT_MANT_DIG + 2))) |
  238357:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  23835b:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  23835f:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  238362:	83 c0 e6             	add    eax,0xffffffe6
  238365:	88 c2                	mov    dl,al
  238367:	88 d1                	mov    cl,dl
  238369:	49 89 f0             	mov    r8,rsi
  23836c:	49 0f ad f8          	shrd   r8,rdi,cl
  238370:	41 88 d1             	mov    r9b,dl
  238373:	c4 62 b3 f7 cf       	shrx   r9,rdi,r9
  238378:	31 c0                	xor    eax,eax
  23837a:	f6 c2 40             	test   dl,0x40
  23837d:	4d 0f 45 c1          	cmovne r8,r9
  238381:	41 89 c2             	mov    r10d,eax
  238384:	4d 0f 45 ca          	cmovne r9,r10
                    @boolToInt((a & (u128(@maxValue(u128)) >> shift_amt_u7)) != 0);
  238388:	8a 4d bf             	mov    cl,BYTE PTR [rbp-0x41]
  23838b:	49 c7 c3 ff ff ff ff 	mov    r11,0xffffffffffffffff
  238392:	88 4d 93             	mov    BYTE PTR [rbp-0x6d],cl
  238395:	4c 89 db             	mov    rbx,r11
  238398:	48 0f ad db          	shrd   rbx,rbx,cl
  23839c:	8a 4d 93             	mov    cl,BYTE PTR [rbp-0x6d]
  23839f:	41 88 ce             	mov    r14b,cl
  2383a2:	c4 42 8b f7 db       	shrx   r11,r11,r14
  2383a7:	f6 c1 40             	test   cl,0x40
  2383aa:	49 0f 45 db          	cmovne rbx,r11
  2383ae:	4d 0f 45 da          	cmovne r11,r10
  2383b2:	48 21 de             	and    rsi,rbx
  2383b5:	4c 21 df             	and    rdi,r11
  2383b8:	48 09 fe             	or     rsi,rdi
  2383bb:	0f 95 c2             	setne  dl
  2383be:	0f b6 c2             	movzx  eax,dl
  2383c1:	89 c7                	mov    edi,eax
                a = (a >> @intCast(u7, sd - (FLT_MANT_DIG + 2))) |
  2383c3:	49 09 f8             	or     r8,rdi
  2383c6:	4c 89 4d d8          	mov    QWORD PTR [rbp-0x28],r9
  2383ca:	4c 89 45 d0          	mov    QWORD PTR [rbp-0x30],r8
        switch (sd) {
  2383ce:	48 89 75 88          	mov    QWORD PTR [rbp-0x78],rsi
  2383d2:	eb 1f                	jmp    2383f3 <__floatuntisf+0x173>
                a <<= 1;
  2383d4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2383d8:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  2383dc:	48 89 c2             	mov    rdx,rax
  2383df:	48 01 d2             	add    rdx,rdx
  2383e2:	48 0f a4 c1 01       	shld   rcx,rax,0x1
  2383e7:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  2383eb:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
        switch (sd) {
  2383ef:	eb 02                	jmp    2383f3 <__floatuntisf+0x173>
  2383f1:	eb 00                	jmp    2383f3 <__floatuntisf+0x173>
            },
        }
        // finish
        a |= @boolToInt((a & 4) != 0); // Or P into R
  2383f3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  2383f7:	89 c1                	mov    ecx,eax
  2383f9:	83 e1 04             	and    ecx,0x4
  2383fc:	89 ca                	mov    edx,ecx
  2383fe:	48 c1 ea 02          	shr    rdx,0x2
  238402:	48 09 d0             	or     rax,rdx
  238405:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
        a += 1; // round - this step may add a significant bit
  238409:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23840d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  238411:	48 83 c0 01          	add    rax,0x1
  238415:	48 83 d2 00          	adc    rdx,0x0
  238419:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  23841d:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
        a >>= 2; // dump Q and R
  238421:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  238425:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  238429:	48 89 d6             	mov    rsi,rdx
  23842c:	48 0f a4 c6 3e       	shld   rsi,rax,0x3e
  238431:	48 c1 ea 02          	shr    rdx,0x2
  238435:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  238439:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        // a is now rounded to FLT_MANT_DIG or FLT_MANT_DIG+1 bits
        if ((a & (u128(1) << FLT_MANT_DIG)) != 0) {
  23843d:	40 8a 7d d3          	mov    dil,BYTE PTR [rbp-0x2d]
  238441:	40 f6 c7 01          	test   dil,0x1
  238445:	74 28                	je     23846f <__floatuntisf+0x1ef>
  238447:	eb 00                	jmp    238449 <__floatuntisf+0x1c9>
            a >>= 1;
  238449:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23844d:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  238451:	48 89 ca             	mov    rdx,rcx
  238454:	48 0f a4 c2 3f       	shld   rdx,rax,0x3f
  238459:	48 d1 e9             	shr    rcx,1
  23845c:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  238460:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            e += 1;
  238464:	8b 75 c4             	mov    esi,DWORD PTR [rbp-0x3c]
  238467:	83 c6 01             	add    esi,0x1
  23846a:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
        if ((a & (u128(1) << FLT_MANT_DIG)) != 0) {
  23846d:	eb 02                	jmp    238471 <__floatuntisf+0x1f1>
  23846f:	eb 00                	jmp    238471 <__floatuntisf+0x1f1>
    if (sd > FLT_MANT_DIG) {
  238471:	eb 45                	jmp    2384b8 <__floatuntisf+0x238>
        }
        // a is now rounded to FLT_MANT_DIG bits
    } else {
        a <<= @intCast(u7, FLT_MANT_DIG - sd);
  238473:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  238477:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  23847b:	8b 55 c8             	mov    edx,DWORD PTR [rbp-0x38]
  23847e:	be 18 00 00 00       	mov    esi,0x18
  238483:	29 d6                	sub    esi,edx
  238485:	40 88 f7             	mov    dil,sil
  238488:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
  23848c:	40 88 f9             	mov    cl,dil
  23848f:	4c 8b 45 80          	mov    r8,QWORD PTR [rbp-0x80]
  238493:	49 0f a5 c0          	shld   r8,rax,cl
  238497:	41 88 f9             	mov    r9b,dil
  23849a:	c4 e2 b1 f7 c0       	shlx   rax,rax,r9
  23849f:	31 d2                	xor    edx,edx
  2384a1:	40 f6 c7 40          	test   dil,0x40
  2384a5:	4c 0f 45 c0          	cmovne r8,rax
  2384a9:	41 89 d1             	mov    r9d,edx
  2384ac:	49 0f 45 c1          	cmovne rax,r9
  2384b0:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
  2384b4:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
        // a is now rounded to FLT_MANT_DIG bits
    }

    const high = @bitCast(u32, (e + 127) << 23); // exponent
  2384b8:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
  2384bb:	c1 e0 17             	shl    eax,0x17
  2384be:	05 00 00 80 3f       	add    eax,0x3f800000
  2384c3:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
    const low = @truncate(u32, a) & 0x007fffff; // mantissa
  2384c6:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
  2384c9:	25 ff ff 7f 00       	and    eax,0x7fffff
  2384ce:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax

    return @bitCast(f32, high | low);
  2384d1:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
  2384d4:	0b 45 b4             	or     eax,DWORD PTR [rbp-0x4c]
  2384d7:	c5 f9 6e c0          	vmovd  xmm0,eax
  2384db:	5b                   	pop    rbx
  2384dc:	41 5e                	pop    r14
  2384de:	5d                   	pop    rbp
  2384df:	c3                   	ret    

00000000002384e0 <__extenddftf2>:
pub extern fn __extenddftf2(a: f64) f128 {
  2384e0:	55                   	push   rbp
  2384e1:	48 89 e5             	mov    rbp,rsp
  2384e4:	48 81 ec c0 00 00 00 	sub    rsp,0xc0
  2384eb:	48 b8 00 00 00 00 00 	movabs rax,0x7fe0000000000000
  2384f2:	00 e0 7f 
  2384f5:	48 b9 00 00 00 00 00 	movabs rcx,0x10000000000000
  2384fc:	00 10 00 
  2384ff:	be aa 00 00 00       	mov    esi,0xaa
  238504:	ba 10 00 00 00       	mov    edx,0x10
  238509:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
  23850d:	49 b8 00 00 00 00 00 	movabs r8,0x8000000000000000
  238514:	00 00 80 
  238517:	49 b9 ff ff ff ff ff 	movabs r9,0x7fffffffffffffff
  23851e:	ff ff 7f 
  238521:	c5 fb 11 45 98       	vmovsd QWORD PTR [rbp-0x68],xmm0
    return extendXfYf2(f128, f64, a);
  238526:	c5 fb 10 45 98       	vmovsd xmm0,QWORD PTR [rbp-0x68]
  23852b:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    const dstMinNormal: dst_rep_t = dst_rep_t(1) << dstSigBits;
  238530:	49 ba 00 00 00 00 00 	movabs r10,0x1000000000000
  238537:	00 01 00 
  23853a:	4c 89 55 f0          	mov    QWORD PTR [rbp-0x10],r10
  23853e:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
  238545:	00 
    const aRep: src_rep_t = @bitCast(src_rep_t, a);
  238546:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  23854b:	c4 c1 f9 7e c2       	vmovq  r10,xmm0
  238550:	4c 89 55 e0          	mov    QWORD PTR [rbp-0x20],r10
    const aAbs: src_rep_t = aRep & srcAbsMask;
  238554:	4c 23 4d e0          	and    r9,QWORD PTR [rbp-0x20]
  238558:	4c 89 4d d8          	mov    QWORD PTR [rbp-0x28],r9
    const sign: src_rep_t = aRep & srcSignMask;
  23855c:	4c 23 45 e0          	and    r8,QWORD PTR [rbp-0x20]
  238560:	4c 89 45 d0          	mov    QWORD PTR [rbp-0x30],r8
    var absResult: dst_rep_t = undefined;
  238564:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
  238568:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  23856c:	e8 df c2 ff ff       	call   234850 <memset>
    if (aAbs -% srcMinNormal < srcInfinity - srcMinNormal) {
  238571:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  238575:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  238579:	48 29 c8             	sub    rax,rcx
  23857c:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
  238580:	48 39 d0             	cmp    rax,rdx
  238583:	73 4a                	jae    2385cf <__extenddftf2+0xef>
        absResult = dst_rep_t(aAbs) << (dstSigBits - srcSigBits);
  238585:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  238589:	48 89 c1             	mov    rcx,rax
  23858c:	48 c1 e1 3c          	shl    rcx,0x3c
  238590:	48 c1 e8 04          	shr    rax,0x4
  238594:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  238598:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
        absResult += (dstExpBias - srcExpBias) << dstSigBits;
  23859c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  2385a0:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  2385a4:	48 ba 00 00 00 00 00 	movabs rdx,0x3c00000000000000
  2385ab:	00 00 3c 
  2385ae:	48 01 d1             	add    rcx,rdx
  2385b1:	40 0f 92 c6          	setb   sil
  2385b5:	40 f6 c6 01          	test   sil,0x1
  2385b9:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
  2385bd:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  2385c4:	0f 85 cf 00 00 00    	jne    238699 <__extenddftf2+0x1b9>
  2385ca:	e9 da 00 00 00       	jmp    2386a9 <__extenddftf2+0x1c9>
  2385cf:	48 b8 00 00 00 00 00 	movabs rax,0x7ff0000000000000
  2385d6:	00 f0 7f 
    } else if (aAbs >= srcInfinity) {
  2385d9:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
  2385dd:	72 68                	jb     238647 <__extenddftf2+0x167>
        absResult = dstInfExp << dstSigBits;
  2385df:	48 b8 00 00 00 00 00 	movabs rax,0x7fff000000000000
  2385e6:	00 ff 7f 
  2385e9:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  2385ed:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
  2385f4:	00 
        absResult |= dst_rep_t(aAbs & srcQNaN) << (dstSigBits - srcSigBits);
  2385f5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  2385f9:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  2385fd:	48 ba 00 00 00 00 00 	movabs rdx,0x8000000000000
  238604:	00 08 00 
  238607:	48 21 d1             	and    rcx,rdx
  23860a:	48 c1 e9 04          	shr    rcx,0x4
  23860e:	48 09 c8             	or     rax,rcx
  238611:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
        absResult |= dst_rep_t(aAbs & srcNaNCode) << (dstSigBits - srcSigBits);
  238615:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  238619:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  23861d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  238621:	40 b6 33             	mov    sil,0x33
  238624:	40 88 f7             	mov    dil,sil
  238627:	c4 e2 c0 f5 d2       	bzhi   rdx,rdx,rdi
  23862c:	48 89 d7             	mov    rdi,rdx
  23862f:	48 c1 ef 04          	shr    rdi,0x4
  238633:	48 c1 e2 3c          	shl    rdx,0x3c
  238637:	48 09 d0             	or     rax,rdx
  23863a:	48 09 f9             	or     rcx,rdi
  23863d:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  238641:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
    } else if (aAbs >= srcInfinity) {
  238645:	eb 4d                	jmp    238694 <__extenddftf2+0x1b4>
    } else if (aAbs != 0) {
  238647:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  23864c:	74 34                	je     238682 <__extenddftf2+0x1a2>
        const scale: u32 = @clz(aAbs) - @clz(src_rep_t(srcMinNormal));
  23864e:	f3 48 0f bd 45 d8    	lzcnt  rax,QWORD PTR [rbp-0x28]
  238654:	88 c1                	mov    cl,al
  238656:	80 c1 f5             	add    cl,0xf5
  238659:	88 ca                	mov    dl,cl
  23865b:	80 e2 7f             	and    dl,0x7f
  23865e:	28 ca                	sub    dl,cl
  238660:	40 0f 95 c6          	setne  sil
  238664:	40 88 cf             	mov    dil,cl
  238667:	40 f6 c6 01          	test   sil,0x1
  23866b:	88 8d 77 ff ff ff    	mov    BYTE PTR [rbp-0x89],cl
  238671:	88 95 76 ff ff ff    	mov    BYTE PTR [rbp-0x8a],dl
  238677:	40 88 bd 75 ff ff ff 	mov    BYTE PTR [rbp-0x8b],dil
  23867e:	75 41                	jne    2386c1 <__extenddftf2+0x1e1>
  238680:	eb 4f                	jmp    2386d1 <__extenddftf2+0x1f1>
        absResult = 0;
  238682:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
  238689:	00 
  23868a:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
  238691:	00 
    } else if (aAbs >= srcInfinity) {
  238692:	eb 00                	jmp    238694 <__extenddftf2+0x1b4>
    if (aAbs -% srcMinNormal < srcInfinity - srcMinNormal) {
  238694:	e9 76 01 00 00       	jmp    23880f <__extenddftf2+0x32f>
  238699:	48 8d 3d d8 b7 00 00 	lea    rdi,[rip+0xb7d8]        # 243e78 <__unnamed_2>
  2386a0:	31 c0                	xor    eax,eax
  2386a2:	89 c6                	mov    esi,eax
        absResult += (dstExpBias - srcExpBias) << dstSigBits;
  2386a4:	e8 e7 e0 ff ff       	call   236790 <panic>
  2386a9:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  2386b0:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  2386b4:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  2386b8:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
    if (aAbs -% srcMinNormal < srcInfinity - srcMinNormal) {
  2386bc:	e9 4e 01 00 00       	jmp    23880f <__extenddftf2+0x32f>
  2386c1:	48 8d 3d b0 b7 00 00 	lea    rdi,[rip+0xb7b0]        # 243e78 <__unnamed_2>
  2386c8:	31 c0                	xor    eax,eax
  2386ca:	89 c6                	mov    esi,eax
        const scale: u32 = @clz(aAbs) - @clz(src_rep_t(srcMinNormal));
  2386cc:	e8 bf e0 ff ff       	call   236790 <panic>
  2386d1:	8a 85 77 ff ff ff    	mov    al,BYTE PTR [rbp-0x89]
  2386d7:	24 7f                	and    al,0x7f
  2386d9:	0f b6 c8             	movzx  ecx,al
  2386dc:	89 4d bc             	mov    DWORD PTR [rbp-0x44],ecx
  2386df:	31 c9                	xor    ecx,ecx
  2386e1:	89 ca                	mov    edx,ecx
        absResult = dst_rep_t(aAbs) << @intCast(DstShift, dstSigBits - srcSigBits + scale);
  2386e3:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  2386e7:	8b 4d bc             	mov    ecx,DWORD PTR [rbp-0x44]
  2386ea:	83 c1 3c             	add    ecx,0x3c
  2386ed:	0f 92 c0             	setb   al
  2386f0:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
  2386f7:	48 89 b5 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rsi
  2386fe:	89 8d 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],ecx
  238704:	88 85 5b ff ff ff    	mov    BYTE PTR [rbp-0xa5],al
  23870a:	72 02                	jb     23870e <__extenddftf2+0x22e>
  23870c:	eb 10                	jmp    23871e <__extenddftf2+0x23e>
  23870e:	48 8d 3d 63 b7 00 00 	lea    rdi,[rip+0xb763]        # 243e78 <__unnamed_2>
  238715:	31 c0                	xor    eax,eax
  238717:	89 c6                	mov    esi,eax
  238719:	e8 72 e0 ff ff       	call   236790 <panic>
  23871e:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
  238724:	88 c1                	mov    cl,al
  238726:	83 e0 7f             	and    eax,0x7f
  238729:	8b 95 5c ff ff ff    	mov    edx,DWORD PTR [rbp-0xa4]
  23872f:	39 c2                	cmp    edx,eax
  238731:	88 8d 5a ff ff ff    	mov    BYTE PTR [rbp-0xa6],cl
  238737:	75 68                	jne    2387a1 <__extenddftf2+0x2c1>
  238739:	b8 00 3c 00 00       	mov    eax,0x3c00
  23873e:	8a 8d 5a ff ff ff    	mov    cl,BYTE PTR [rbp-0xa6]
  238744:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  23874b:	48 8b b5 60 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa0]
  238752:	48 0f a5 f2          	shld   rdx,rsi,cl
  238756:	8a 8d 5a ff ff ff    	mov    cl,BYTE PTR [rbp-0xa6]
  23875c:	40 88 cf             	mov    dil,cl
  23875f:	c4 e2 c1 f7 fe       	shlx   rdi,rsi,rdi
  238764:	45 31 c0             	xor    r8d,r8d
  238767:	f6 c1 40             	test   cl,0x40
  23876a:	48 0f 45 d7          	cmovne rdx,rdi
  23876e:	45 89 c1             	mov    r9d,r8d
  238771:	49 0f 45 f9          	cmovne rdi,r9
  238775:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
  238779:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
        absResult ^= dstMinNormal;
  23877d:	44 8a 55 ce          	mov    r10b,BYTE PTR [rbp-0x32]
  238781:	41 80 f2 01          	xor    r10b,0x1
  238785:	44 88 55 ce          	mov    BYTE PTR [rbp-0x32],r10b
        const resultExponent: u32 = dstExpBias - srcExpBias - scale + 1;
  238789:	2b 45 bc             	sub    eax,DWORD PTR [rbp-0x44]
  23878c:	41 0f 92 c2          	setb   r10b
  238790:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
  238796:	44 88 95 53 ff ff ff 	mov    BYTE PTR [rbp-0xad],r10b
  23879d:	72 12                	jb     2387b1 <__extenddftf2+0x2d1>
  23879f:	eb 20                	jmp    2387c1 <__extenddftf2+0x2e1>
  2387a1:	48 8d 3d e8 b6 00 00 	lea    rdi,[rip+0xb6e8]        # 243e90 <__unnamed_3>
  2387a8:	31 c0                	xor    eax,eax
  2387aa:	89 c6                	mov    esi,eax
        absResult = dst_rep_t(aAbs) << @intCast(DstShift, dstSigBits - srcSigBits + scale);
  2387ac:	e8 df df ff ff       	call   236790 <panic>
  2387b1:	48 8d 3d c0 b6 00 00 	lea    rdi,[rip+0xb6c0]        # 243e78 <__unnamed_2>
  2387b8:	31 c0                	xor    eax,eax
  2387ba:	89 c6                	mov    esi,eax
        const resultExponent: u32 = dstExpBias - srcExpBias - scale + 1;
  2387bc:	e8 cf df ff ff       	call   236790 <panic>
  2387c1:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
  2387c7:	83 c0 01             	add    eax,0x1
  2387ca:	0f 92 c1             	setb   cl
  2387cd:	89 85 4c ff ff ff    	mov    DWORD PTR [rbp-0xb4],eax
  2387d3:	88 8d 4b ff ff ff    	mov    BYTE PTR [rbp-0xb5],cl
  2387d9:	72 02                	jb     2387dd <__extenddftf2+0x2fd>
  2387db:	eb 10                	jmp    2387ed <__extenddftf2+0x30d>
  2387dd:	48 8d 3d 94 b6 00 00 	lea    rdi,[rip+0xb694]        # 243e78 <__unnamed_2>
  2387e4:	31 c0                	xor    eax,eax
  2387e6:	89 c6                	mov    esi,eax
  2387e8:	e8 a3 df ff ff       	call   236790 <panic>
  2387ed:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [rbp-0xb4]
  2387f3:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
        absResult |= @intCast(dst_rep_t, resultExponent) << dstSigBits;
  2387f6:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  2387fa:	8b 55 b8             	mov    edx,DWORD PTR [rbp-0x48]
  2387fd:	89 d6                	mov    esi,edx
  2387ff:	48 c1 e6 30          	shl    rsi,0x30
  238803:	48 09 f1             	or     rcx,rsi
  238806:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
    } else if (aAbs != 0) {
  23880a:	e9 83 fe ff ff       	jmp    238692 <__extenddftf2+0x1b2>
    const result: dst_rep_t align(@alignOf(dst_t)) = absResult | dst_rep_t(sign) << (dstBits - srcBits);
  23880f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  238813:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  238817:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  23881b:	48 09 d1             	or     rcx,rdx
  23881e:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  238822:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
    return @bitCast(dst_t, result);
  238826:	0f 28 45 a0          	movaps xmm0,XMMWORD PTR [rbp-0x60]
    return extendXfYf2(f128, f64, a);
  23882a:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
  238831:	5d                   	pop    rbp
  238832:	c3                   	ret    
  238833:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  23883a:	84 00 00 00 00 00 

0000000000238840 <__extendsftf2>:
pub extern fn __extendsftf2(a: f32) f128 {
  238840:	55                   	push   rbp
  238841:	48 89 e5             	mov    rbp,rsp
  238844:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  23884b:	be aa 00 00 00       	mov    esi,0xaa
  238850:	b8 10 00 00 00       	mov    eax,0x10
  238855:	89 c2                	mov    edx,eax
  238857:	48 8d 4d c8          	lea    rcx,[rbp-0x38]
  23885b:	c5 fa 11 45 ac       	vmovss DWORD PTR [rbp-0x54],xmm0
    return extendXfYf2(f128, f32, a);
  238860:	c5 fa 10 45 ac       	vmovss xmm0,DWORD PTR [rbp-0x54]
  238865:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
    const dstMinNormal: dst_rep_t = dst_rep_t(1) << dstSigBits;
  23886a:	48 bf 00 00 00 00 00 	movabs rdi,0x1000000000000
  238871:	00 01 00 
  238874:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  238878:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
  23887f:	00 
    const aRep: src_rep_t = @bitCast(src_rep_t, a);
  238880:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  238885:	c5 f9 7e c0          	vmovd  eax,xmm0
  238889:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
    const aAbs: src_rep_t = aRep & srcAbsMask;
  23888c:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  23888f:	25 ff ff ff 7f       	and    eax,0x7fffffff
  238894:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    const sign: src_rep_t = aRep & srcSignMask;
  238897:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  23889a:	25 00 00 00 80       	and    eax,0x80000000
  23889f:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
    var absResult: dst_rep_t = undefined;
  2388a2:	48 89 cf             	mov    rdi,rcx
  2388a5:	e8 a6 bf ff ff       	call   234850 <memset>
    if (aAbs -% srcMinNormal < srcInfinity - srcMinNormal) {
  2388aa:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  2388ad:	2d 00 00 80 00       	sub    eax,0x800000
  2388b2:	3d 00 00 00 7f       	cmp    eax,0x7f000000
  2388b7:	73 45                	jae    2388fe <__extendsftf2+0xbe>
        absResult = dst_rep_t(aAbs) << (dstSigBits - srcSigBits);
  2388b9:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  2388bc:	89 c1                	mov    ecx,eax
  2388be:	48 c1 e1 19          	shl    rcx,0x19
  2388c2:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  2388c6:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
  2388cd:	00 
        absResult += (dstExpBias - srcExpBias) << dstSigBits;
  2388ce:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  2388d2:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  2388d6:	48 be 00 00 00 00 00 	movabs rsi,0x3f80000000000000
  2388dd:	00 80 3f 
  2388e0:	48 01 f2             	add    rdx,rsi
  2388e3:	40 0f 92 c7          	setb   dil
  2388e7:	40 f6 c7 01          	test   dil,0x1
  2388eb:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
  2388ef:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
  2388f3:	0f 85 a9 00 00 00    	jne    2389a2 <__extendsftf2+0x162>
  2388f9:	e9 b4 00 00 00       	jmp    2389b2 <__extendsftf2+0x172>
    } else if (aAbs >= srcInfinity) {
  2388fe:	81 7d e0 00 00 80 7f 	cmp    DWORD PTR [rbp-0x20],0x7f800000
  238905:	72 54                	jb     23895b <__extendsftf2+0x11b>
        absResult = dstInfExp << dstSigBits;
  238907:	48 b8 00 00 00 00 00 	movabs rax,0x7fff000000000000
  23890e:	00 ff 7f 
  238911:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  238915:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
  23891c:	00 
        absResult |= dst_rep_t(aAbs & srcQNaN) << (dstSigBits - srcSigBits);
  23891d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  238921:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
  238924:	89 ca                	mov    edx,ecx
  238926:	89 d1                	mov    ecx,edx
  238928:	81 e1 00 00 40 00    	and    ecx,0x400000
  23892e:	89 ca                	mov    edx,ecx
  238930:	48 c1 e2 19          	shl    rdx,0x19
  238934:	48 09 d0             	or     rax,rdx
  238937:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
        absResult |= dst_rep_t(aAbs & srcNaNCode) << (dstSigBits - srcSigBits);
  23893b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23893f:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
  238942:	89 ca                	mov    edx,ecx
  238944:	89 d1                	mov    ecx,edx
  238946:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
  23894c:	89 ca                	mov    edx,ecx
  23894e:	48 c1 e2 19          	shl    rdx,0x19
  238952:	48 09 d0             	or     rax,rdx
  238955:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
    } else if (aAbs >= srcInfinity) {
  238959:	eb 42                	jmp    23899d <__extendsftf2+0x15d>
    } else if (aAbs != 0) {
  23895b:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
  23895f:	74 2a                	je     23898b <__extendsftf2+0x14b>
        const scale: u32 = @clz(aAbs) - @clz(src_rep_t(srcMinNormal));
  238961:	f3 0f bd 45 e0       	lzcnt  eax,DWORD PTR [rbp-0x20]
  238966:	88 c1                	mov    cl,al
  238968:	80 c1 f8             	add    cl,0xf8
  23896b:	88 ca                	mov    dl,cl
  23896d:	80 e2 3f             	and    dl,0x3f
  238970:	28 ca                	sub    dl,cl
  238972:	40 0f 95 c6          	setne  sil
  238976:	40 88 cf             	mov    dil,cl
  238979:	40 f6 c6 01          	test   sil,0x1
  23897d:	88 4d 97             	mov    BYTE PTR [rbp-0x69],cl
  238980:	88 55 96             	mov    BYTE PTR [rbp-0x6a],dl
  238983:	40 88 7d 95          	mov    BYTE PTR [rbp-0x6b],dil
  238987:	75 3e                	jne    2389c7 <__extendsftf2+0x187>
  238989:	eb 4c                	jmp    2389d7 <__extendsftf2+0x197>
        absResult = 0;
  23898b:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
  238992:	00 
  238993:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
  23899a:	00 
    } else if (aAbs >= srcInfinity) {
  23899b:	eb 00                	jmp    23899d <__extendsftf2+0x15d>
    if (aAbs -% srcMinNormal < srcInfinity - srcMinNormal) {
  23899d:	e9 65 01 00 00       	jmp    238b07 <__extendsftf2+0x2c7>
  2389a2:	48 8d 3d cf b4 00 00 	lea    rdi,[rip+0xb4cf]        # 243e78 <__unnamed_2>
  2389a9:	31 c0                	xor    eax,eax
  2389ab:	89 c6                	mov    esi,eax
        absResult += (dstExpBias - srcExpBias) << dstSigBits;
  2389ad:	e8 de dd ff ff       	call   236790 <panic>
  2389b2:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  2389b6:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  2389ba:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  2389be:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    if (aAbs -% srcMinNormal < srcInfinity - srcMinNormal) {
  2389c2:	e9 40 01 00 00       	jmp    238b07 <__extendsftf2+0x2c7>
  2389c7:	48 8d 3d aa b4 00 00 	lea    rdi,[rip+0xb4aa]        # 243e78 <__unnamed_2>
  2389ce:	31 c0                	xor    eax,eax
  2389d0:	89 c6                	mov    esi,eax
        const scale: u32 = @clz(aAbs) - @clz(src_rep_t(srcMinNormal));
  2389d2:	e8 b9 dd ff ff       	call   236790 <panic>
  2389d7:	8a 45 97             	mov    al,BYTE PTR [rbp-0x69]
  2389da:	24 3f                	and    al,0x3f
  2389dc:	0f b6 c8             	movzx  ecx,al
  2389df:	89 4d c4             	mov    DWORD PTR [rbp-0x3c],ecx
        absResult = dst_rep_t(aAbs) << @intCast(DstShift, dstSigBits - srcSigBits + scale);
  2389e2:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
  2389e5:	89 ca                	mov    edx,ecx
  2389e7:	31 c9                	xor    ecx,ecx
  2389e9:	89 ce                	mov    esi,ecx
  2389eb:	8b 4d c4             	mov    ecx,DWORD PTR [rbp-0x3c]
  2389ee:	83 c1 59             	add    ecx,0x59
  2389f1:	0f 92 c0             	setb   al
  2389f4:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
  2389f8:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
  2389fc:	89 8d 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],ecx
  238a02:	88 85 7b ff ff ff    	mov    BYTE PTR [rbp-0x85],al
  238a08:	72 02                	jb     238a0c <__extendsftf2+0x1cc>
  238a0a:	eb 10                	jmp    238a1c <__extendsftf2+0x1dc>
  238a0c:	48 8d 3d 65 b4 00 00 	lea    rdi,[rip+0xb465]        # 243e78 <__unnamed_2>
  238a13:	31 c0                	xor    eax,eax
  238a15:	89 c6                	mov    esi,eax
  238a17:	e8 74 dd ff ff       	call   236790 <panic>
  238a1c:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
  238a22:	88 c1                	mov    cl,al
  238a24:	83 e0 7f             	and    eax,0x7f
  238a27:	8b 95 7c ff ff ff    	mov    edx,DWORD PTR [rbp-0x84]
  238a2d:	39 c2                	cmp    edx,eax
  238a2f:	88 8d 7a ff ff ff    	mov    BYTE PTR [rbp-0x86],cl
  238a35:	75 62                	jne    238a99 <__extendsftf2+0x259>
  238a37:	b8 80 3f 00 00       	mov    eax,0x3f80
  238a3c:	8a 8d 7a ff ff ff    	mov    cl,BYTE PTR [rbp-0x86]
  238a42:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
  238a46:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
  238a4a:	48 0f a5 f2          	shld   rdx,rsi,cl
  238a4e:	8a 8d 7a ff ff ff    	mov    cl,BYTE PTR [rbp-0x86]
  238a54:	40 88 cf             	mov    dil,cl
  238a57:	c4 e2 c1 f7 fe       	shlx   rdi,rsi,rdi
  238a5c:	45 31 c0             	xor    r8d,r8d
  238a5f:	f6 c1 40             	test   cl,0x40
  238a62:	48 0f 45 d7          	cmovne rdx,rdi
  238a66:	45 89 c1             	mov    r9d,r8d
  238a69:	49 0f 45 f9          	cmovne rdi,r9
  238a6d:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
  238a71:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
        absResult ^= dstMinNormal;
  238a75:	44 8a 55 d6          	mov    r10b,BYTE PTR [rbp-0x2a]
  238a79:	41 80 f2 01          	xor    r10b,0x1
  238a7d:	44 88 55 d6          	mov    BYTE PTR [rbp-0x2a],r10b
        const resultExponent: u32 = dstExpBias - srcExpBias - scale + 1;
  238a81:	2b 45 c4             	sub    eax,DWORD PTR [rbp-0x3c]
  238a84:	41 0f 92 c2          	setb   r10b
  238a88:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
  238a8e:	44 88 95 73 ff ff ff 	mov    BYTE PTR [rbp-0x8d],r10b
  238a95:	72 12                	jb     238aa9 <__extendsftf2+0x269>
  238a97:	eb 20                	jmp    238ab9 <__extendsftf2+0x279>
  238a99:	48 8d 3d f0 b3 00 00 	lea    rdi,[rip+0xb3f0]        # 243e90 <__unnamed_3>
  238aa0:	31 c0                	xor    eax,eax
  238aa2:	89 c6                	mov    esi,eax
        absResult = dst_rep_t(aAbs) << @intCast(DstShift, dstSigBits - srcSigBits + scale);
  238aa4:	e8 e7 dc ff ff       	call   236790 <panic>
  238aa9:	48 8d 3d c8 b3 00 00 	lea    rdi,[rip+0xb3c8]        # 243e78 <__unnamed_2>
  238ab0:	31 c0                	xor    eax,eax
  238ab2:	89 c6                	mov    esi,eax
        const resultExponent: u32 = dstExpBias - srcExpBias - scale + 1;
  238ab4:	e8 d7 dc ff ff       	call   236790 <panic>
  238ab9:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
  238abf:	83 c0 01             	add    eax,0x1
  238ac2:	0f 92 c1             	setb   cl
  238ac5:	89 85 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],eax
  238acb:	88 8d 6b ff ff ff    	mov    BYTE PTR [rbp-0x95],cl
  238ad1:	72 02                	jb     238ad5 <__extendsftf2+0x295>
  238ad3:	eb 10                	jmp    238ae5 <__extendsftf2+0x2a5>
  238ad5:	48 8d 3d 9c b3 00 00 	lea    rdi,[rip+0xb39c]        # 243e78 <__unnamed_2>
  238adc:	31 c0                	xor    eax,eax
  238ade:	89 c6                	mov    esi,eax
  238ae0:	e8 ab dc ff ff       	call   236790 <panic>
  238ae5:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
  238aeb:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
        absResult |= @intCast(dst_rep_t, resultExponent) << dstSigBits;
  238aee:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  238af2:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
  238af5:	89 d6                	mov    esi,edx
  238af7:	48 c1 e6 30          	shl    rsi,0x30
  238afb:	48 09 f1             	or     rcx,rsi
  238afe:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    } else if (aAbs != 0) {
  238b02:	e9 94 fe ff ff       	jmp    23899b <__extendsftf2+0x15b>
    const result: dst_rep_t align(@alignOf(dst_t)) = absResult | dst_rep_t(sign) << (dstBits - srcBits);
  238b07:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  238b0b:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  238b0f:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  238b12:	89 d6                	mov    esi,edx
  238b14:	48 c1 e6 20          	shl    rsi,0x20
  238b18:	48 09 f1             	or     rcx,rsi
  238b1b:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  238b1f:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
    return @bitCast(dst_t, result);
  238b23:	0f 28 45 b0          	movaps xmm0,XMMWORD PTR [rbp-0x50]
    return extendXfYf2(f128, f32, a);
  238b27:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  238b2e:	5d                   	pop    rbp
  238b2f:	c3                   	ret    

0000000000238b30 <__trunctfdf2>:
pub extern fn __trunctfdf2(a: f128) f64 {
  238b30:	55                   	push   rbp
  238b31:	48 89 e5             	mov    rbp,rsp
  238b34:	48 81 ec b0 01 00 00 	sub    rsp,0x1b0
  238b3b:	0f 29 85 40 ff ff ff 	movaps XMMWORD PTR [rbp-0xc0],xmm0
    return truncXfYf2(f64, f128, a);
  238b42:	0f 28 85 40 ff ff ff 	movaps xmm0,XMMWORD PTR [rbp-0xc0]
  238b49:	0f 29 45 f0          	movaps XMMWORD PTR [rbp-0x10],xmm0
    const aRep: src_rep_t = @bitCast(src_rep_t, a);
  238b4d:	0f 28 45 f0          	movaps xmm0,XMMWORD PTR [rbp-0x10]
  238b51:	0f 29 45 e0          	movaps XMMWORD PTR [rbp-0x20],xmm0
    const aAbs: src_rep_t = aRep & srcAbsMask;
  238b55:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  238b59:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  238b5d:	b2 3f                	mov    dl,0x3f
  238b5f:	40 88 d6             	mov    sil,dl
  238b62:	c4 e2 c8 f5 c9       	bzhi   rcx,rcx,rsi
  238b67:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  238b6b:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
    const sign: src_rep_t = aRep & srcSignMask;
  238b6f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  238b73:	48 b9 00 00 00 00 00 	movabs rcx,0x8000000000000000
  238b7a:	00 00 80 
  238b7d:	48 21 c8             	and    rax,rcx
  238b80:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  238b84:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
  238b8b:	00 
    var absResult: dst_rep_t = undefined;
  238b8c:	48 b8 aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaaa
  238b93:	aa aa aa 
  238b96:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
    if (aAbs -% underflow < aAbs -% overflow) {
  238b9a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  238b9e:	48 b9 00 00 00 00 00 	movabs rcx,0xc3ff000000000000
  238ba5:	00 ff c3 
  238ba8:	48 89 c6             	mov    rsi,rax
  238bab:	48 01 ce             	add    rsi,rcx
  238bae:	48 b9 00 00 00 00 00 	movabs rcx,0xbc01000000000000
  238bb5:	00 01 bc 
  238bb8:	48 01 c8             	add    rax,rcx
  238bbb:	48 29 c6             	sub    rsi,rax
  238bbe:	48 89 b5 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rsi
  238bc5:	0f 83 ee 00 00 00    	jae    238cb9 <__trunctfdf2+0x189>
  238bcb:	eb 00                	jmp    238bcd <__trunctfdf2+0x9d>
        absResult = @truncate(dst_rep_t, aAbs >> (srcSigBits - dstSigBits));
  238bcd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  238bd1:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  238bd5:	48 0f a4 c1 04       	shld   rcx,rax,0x4
  238bda:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
        absResult -%= dst_rep_t(srcExpBias - dstExpBias) << dstSigBits;
  238bde:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  238be2:	48 b9 00 00 00 00 00 	movabs rcx,0x4000000000000000
  238be9:	00 00 40 
  238bec:	48 01 c8             	add    rax,rcx
  238bef:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
        const roundBits: src_rep_t = aAbs & roundMask;
  238bf3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  238bf7:	b2 3c                	mov    dl,0x3c
  238bf9:	88 d1                	mov    cl,dl
  238bfb:	c4 e2 f0 f5 c0       	bzhi   rax,rax,rcx
  238c00:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  238c04:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
  238c0b:	00 
        if (roundBits > halfway) {
  238c0c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  238c10:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  238c14:	48 be 01 00 00 00 00 	movabs rsi,0x800000000000001
  238c1b:	00 00 08 
  238c1e:	48 29 f0             	sub    rax,rsi
  238c21:	48 83 d9 00          	sbb    rcx,0x0
  238c25:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  238c2c:	48 89 8d 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rcx
  238c33:	72 25                	jb     238c5a <__trunctfdf2+0x12a>
  238c35:	eb 00                	jmp    238c37 <__trunctfdf2+0x107>
            absResult += 1;
  238c37:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  238c3b:	48 83 c0 01          	add    rax,0x1
  238c3f:	0f 92 c1             	setb   cl
  238c42:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
  238c49:	88 8d 1f ff ff ff    	mov    BYTE PTR [rbp-0xe1],cl
  238c4f:	0f 82 16 02 00 00    	jb     238e6b <__trunctfdf2+0x33b>
  238c55:	e9 21 02 00 00       	jmp    238e7b <__trunctfdf2+0x34b>
        } else if (roundBits == halfway) {
  238c5a:	c5 fa 6f 45 a8       	vmovdqu xmm0,XMMWORD PTR [rbp-0x58]
  238c5f:	48 b8 00 00 00 00 00 	movabs rax,0x800000000000000
  238c66:	00 00 08 
  238c69:	c4 e1 f9 6e c8       	vmovq  xmm1,rax
  238c6e:	c5 f9 74 c1          	vpcmpeqb xmm0,xmm0,xmm1
  238c72:	c5 f9 d7 c8          	vpmovmskb ecx,xmm0
  238c76:	81 e9 ff ff 00 00    	sub    ecx,0xffff
  238c7c:	89 8d 18 ff ff ff    	mov    DWORD PTR [rbp-0xe8],ecx
  238c82:	75 2c                	jne    238cb0 <__trunctfdf2+0x180>
  238c84:	eb 00                	jmp    238c86 <__trunctfdf2+0x156>
            absResult += absResult & 1;
  238c86:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  238c8a:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  238c8e:	48 83 e1 01          	and    rcx,0x1
  238c92:	48 01 c8             	add    rax,rcx
  238c95:	0f 92 c2             	setb   dl
  238c98:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
  238c9f:	88 95 0f ff ff ff    	mov    BYTE PTR [rbp-0xf1],dl
  238ca5:	0f 82 e0 01 00 00    	jb     238e8b <__trunctfdf2+0x35b>
  238cab:	e9 eb 01 00 00       	jmp    238e9b <__trunctfdf2+0x36b>
        } else if (roundBits == halfway) {
  238cb0:	eb 00                	jmp    238cb2 <__trunctfdf2+0x182>
        if (roundBits > halfway) {
  238cb2:	eb 00                	jmp    238cb4 <__trunctfdf2+0x184>
    if (aAbs -% underflow < aAbs -% overflow) {
  238cb4:	e9 d8 04 00 00       	jmp    239191 <__trunctfdf2+0x661>
    } else if (aAbs > srcInfinity) {
  238cb9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  238cbd:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  238cc1:	48 83 e8 01          	sub    rax,0x1
  238cc5:	48 ba 00 00 00 00 00 	movabs rdx,0x7fff000000000000
  238ccc:	00 ff 7f 
  238ccf:	48 19 d1             	sbb    rcx,rdx
  238cd2:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
  238cd9:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  238ce0:	72 63                	jb     238d45 <__trunctfdf2+0x215>
  238ce2:	eb 00                	jmp    238ce4 <__trunctfdf2+0x1b4>
        absResult = @intCast(dst_rep_t, dstInfExp) << dstSigBits;
  238ce4:	48 b8 00 00 00 00 00 	movabs rax,0x7ff0000000000000
  238ceb:	00 f0 7f 
  238cee:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
        absResult |= dstQNaN;
  238cf2:	8a 4d be             	mov    cl,BYTE PTR [rbp-0x42]
  238cf5:	80 c9 08             	or     cl,0x8
  238cf8:	88 4d be             	mov    BYTE PTR [rbp-0x42],cl
        absResult |= @intCast(dst_rep_t, ((aAbs & srcNaNCode) >> (srcSigBits - dstSigBits)) & dstNaNCode);
  238cfb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  238cff:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  238d03:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  238d07:	b1 2f                	mov    cl,0x2f
  238d09:	40 88 cf             	mov    dil,cl
  238d0c:	c4 e2 c0 f5 f6       	bzhi   rsi,rsi,rdi
  238d11:	48 0f a4 d6 04       	shld   rsi,rdx,0x4
  238d16:	c5 f9 76 c0          	vpcmpeqd xmm0,xmm0,xmm0
  238d1a:	c5 79 d7 c0          	vpmovmskb r8d,xmm0
  238d1e:	41 81 e8 ff ff 00 00 	sub    r8d,0xffff
  238d25:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
  238d2c:	48 89 b5 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rsi
  238d33:	44 89 85 e4 fe ff ff 	mov    DWORD PTR [rbp-0x11c],r8d
  238d3a:	0f 84 6b 01 00 00    	je     238eab <__trunctfdf2+0x37b>
  238d40:	e9 7d 01 00 00       	jmp    238ec2 <__trunctfdf2+0x392>
    } else if (aAbs >= overflow) {
  238d45:	0f b7 45 de          	movzx  eax,WORD PTR [rbp-0x22]
  238d49:	89 c1                	mov    ecx,eax
  238d4b:	48 81 e9 ff 43 00 00 	sub    rcx,0x43ff
  238d52:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
  238d59:	72 15                	jb     238d70 <__trunctfdf2+0x240>
  238d5b:	eb 00                	jmp    238d5d <__trunctfdf2+0x22d>
  238d5d:	48 b8 00 00 00 00 00 	movabs rax,0x7ff0000000000000
  238d64:	00 f0 7f 
        absResult = @intCast(dst_rep_t, dstInfExp) << dstSigBits;
  238d67:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
    } else if (aAbs >= overflow) {
  238d6b:	e9 f4 00 00 00       	jmp    238e64 <__trunctfdf2+0x334>
        const aExp = @intCast(u32, aAbs >> srcSigBits);
  238d70:	0f b7 45 de          	movzx  eax,WORD PTR [rbp-0x22]
  238d74:	c5 f9 76 c0          	vpcmpeqd xmm0,xmm0,xmm0
  238d78:	c5 f9 d7 c8          	vpmovmskb ecx,xmm0
  238d7c:	81 e9 ff ff 00 00    	sub    ecx,0xffff
  238d82:	89 85 d4 fe ff ff    	mov    DWORD PTR [rbp-0x12c],eax
  238d88:	89 8d d0 fe ff ff    	mov    DWORD PTR [rbp-0x130],ecx
  238d8e:	0f 84 3e 01 00 00    	je     238ed2 <__trunctfdf2+0x3a2>
  238d94:	e9 5d 01 00 00       	jmp    238ef6 <__trunctfdf2+0x3c6>
            absResult = 0;
  238d99:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
  238da0:	00 
        if (shift > srcSigBits) {
  238da1:	e9 bc 00 00 00       	jmp    238e62 <__trunctfdf2+0x332>
  238da6:	b8 80 00 00 00       	mov    eax,0x80
            const sticky: src_rep_t = significand << @intCast(SrcShift, srcBits - shift);
  238dab:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  238daf:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  238db3:	2b 45 a0             	sub    eax,DWORD PTR [rbp-0x60]
  238db6:	40 0f 92 c6          	setb   sil
  238dba:	48 89 95 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rdx
  238dc1:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
  238dc8:	89 85 bc fe ff ff    	mov    DWORD PTR [rbp-0x144],eax
  238dce:	40 88 b5 bb fe ff ff 	mov    BYTE PTR [rbp-0x145],sil
  238dd5:	0f 82 a7 01 00 00    	jb     238f82 <__trunctfdf2+0x452>
  238ddb:	e9 b2 01 00 00       	jmp    238f92 <__trunctfdf2+0x462>
                absResult += 1;
  238de0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  238de4:	48 83 c0 01          	add    rax,0x1
  238de8:	0f 92 c1             	setb   cl
  238deb:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
  238df2:	88 8d af fe ff ff    	mov    BYTE PTR [rbp-0x151],cl
  238df8:	0f 82 53 03 00 00    	jb     239151 <__trunctfdf2+0x621>
  238dfe:	e9 5e 03 00 00       	jmp    239161 <__trunctfdf2+0x631>
            } else if (roundBits == halfway) {
  238e03:	c5 fa 6f 85 60 ff ff 	vmovdqu xmm0,XMMWORD PTR [rbp-0xa0]
  238e0a:	ff 
  238e0b:	48 b8 00 00 00 00 00 	movabs rax,0x800000000000000
  238e12:	00 00 08 
  238e15:	c4 e1 f9 6e c8       	vmovq  xmm1,rax
  238e1a:	c5 f9 74 c1          	vpcmpeqb xmm0,xmm0,xmm1
  238e1e:	c5 f9 d7 c8          	vpmovmskb ecx,xmm0
  238e22:	81 e9 ff ff 00 00    	sub    ecx,0xffff
  238e28:	89 8d a8 fe ff ff    	mov    DWORD PTR [rbp-0x158],ecx
  238e2e:	75 2c                	jne    238e5c <__trunctfdf2+0x32c>
  238e30:	eb 00                	jmp    238e32 <__trunctfdf2+0x302>
                absResult += absResult & 1;
  238e32:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  238e36:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  238e3a:	48 83 e1 01          	and    rcx,0x1
  238e3e:	48 01 c8             	add    rax,rcx
  238e41:	0f 92 c2             	setb   dl
  238e44:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
  238e4b:	88 95 9f fe ff ff    	mov    BYTE PTR [rbp-0x161],dl
  238e51:	0f 82 1a 03 00 00    	jb     239171 <__trunctfdf2+0x641>
  238e57:	e9 25 03 00 00       	jmp    239181 <__trunctfdf2+0x651>
            } else if (roundBits == halfway) {
  238e5c:	eb 00                	jmp    238e5e <__trunctfdf2+0x32e>
            if (roundBits > halfway) {
  238e5e:	eb 00                	jmp    238e60 <__trunctfdf2+0x330>
        if (shift > srcSigBits) {
  238e60:	eb 00                	jmp    238e62 <__trunctfdf2+0x332>
    } else if (aAbs >= overflow) {
  238e62:	eb 00                	jmp    238e64 <__trunctfdf2+0x334>
    } else if (aAbs > srcInfinity) {
  238e64:	eb 00                	jmp    238e66 <__trunctfdf2+0x336>
    if (aAbs -% underflow < aAbs -% overflow) {
  238e66:	e9 26 03 00 00       	jmp    239191 <__trunctfdf2+0x661>
  238e6b:	48 8d 3d 06 b0 00 00 	lea    rdi,[rip+0xb006]        # 243e78 <__unnamed_2>
  238e72:	31 c0                	xor    eax,eax
  238e74:	89 c6                	mov    esi,eax
            absResult += 1;
  238e76:	e8 15 d9 ff ff       	call   236790 <panic>
  238e7b:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  238e82:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
        if (roundBits > halfway) {
  238e86:	e9 29 fe ff ff       	jmp    238cb4 <__trunctfdf2+0x184>
  238e8b:	48 8d 3d e6 af 00 00 	lea    rdi,[rip+0xafe6]        # 243e78 <__unnamed_2>
  238e92:	31 c0                	xor    eax,eax
  238e94:	89 c6                	mov    esi,eax
            absResult += absResult & 1;
  238e96:	e8 f5 d8 ff ff       	call   236790 <panic>
  238e9b:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  238ea2:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
        } else if (roundBits == halfway) {
  238ea6:	e9 07 fe ff ff       	jmp    238cb2 <__trunctfdf2+0x182>
        absResult |= @intCast(dst_rep_t, ((aAbs & srcNaNCode) >> (srcSigBits - dstSigBits)) & dstNaNCode);
  238eab:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  238eb2:	48 8b 8d e8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x118]
  238eb9:	48 09 c8             	or     rax,rcx
  238ebc:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
    } else if (aAbs > srcInfinity) {
  238ec0:	eb a4                	jmp    238e66 <__trunctfdf2+0x336>
  238ec2:	48 8d 3d c7 af 00 00 	lea    rdi,[rip+0xafc7]        # 243e90 <__unnamed_3>
  238ec9:	31 c0                	xor    eax,eax
  238ecb:	89 c6                	mov    esi,eax
        absResult |= @intCast(dst_rep_t, ((aAbs & srcNaNCode) >> (srcSigBits - dstSigBits)) & dstNaNCode);
  238ecd:	e8 be d8 ff ff       	call   236790 <panic>
  238ed2:	b8 00 3c 00 00       	mov    eax,0x3c00
        const aExp = @intCast(u32, aAbs >> srcSigBits);
  238ed7:	8b 8d d4 fe ff ff    	mov    ecx,DWORD PTR [rbp-0x12c]
  238edd:	89 4d a4             	mov    DWORD PTR [rbp-0x5c],ecx
        const shift = @intCast(u32, srcExpBias - dstExpBias - aExp + 1);
  238ee0:	2b 45 a4             	sub    eax,DWORD PTR [rbp-0x5c]
  238ee3:	0f 92 c2             	setb   dl
  238ee6:	89 85 98 fe ff ff    	mov    DWORD PTR [rbp-0x168],eax
  238eec:	88 95 97 fe ff ff    	mov    BYTE PTR [rbp-0x169],dl
  238ef2:	72 12                	jb     238f06 <__trunctfdf2+0x3d6>
  238ef4:	eb 20                	jmp    238f16 <__trunctfdf2+0x3e6>
  238ef6:	48 8d 3d 93 af 00 00 	lea    rdi,[rip+0xaf93]        # 243e90 <__unnamed_3>
  238efd:	31 c0                	xor    eax,eax
  238eff:	89 c6                	mov    esi,eax
        const aExp = @intCast(u32, aAbs >> srcSigBits);
  238f01:	e8 8a d8 ff ff       	call   236790 <panic>
  238f06:	48 8d 3d 6b af 00 00 	lea    rdi,[rip+0xaf6b]        # 243e78 <__unnamed_2>
  238f0d:	31 c0                	xor    eax,eax
  238f0f:	89 c6                	mov    esi,eax
        const shift = @intCast(u32, srcExpBias - dstExpBias - aExp + 1);
  238f11:	e8 7a d8 ff ff       	call   236790 <panic>
  238f16:	8b 85 98 fe ff ff    	mov    eax,DWORD PTR [rbp-0x168]
  238f1c:	83 c0 01             	add    eax,0x1
  238f1f:	0f 92 c1             	setb   cl
  238f22:	89 85 90 fe ff ff    	mov    DWORD PTR [rbp-0x170],eax
  238f28:	88 8d 8f fe ff ff    	mov    BYTE PTR [rbp-0x171],cl
  238f2e:	72 02                	jb     238f32 <__trunctfdf2+0x402>
  238f30:	eb 10                	jmp    238f42 <__trunctfdf2+0x412>
  238f32:	48 8d 3d 3f af 00 00 	lea    rdi,[rip+0xaf3f]        # 243e78 <__unnamed_2>
  238f39:	31 c0                	xor    eax,eax
  238f3b:	89 c6                	mov    esi,eax
  238f3d:	e8 4e d8 ff ff       	call   236790 <panic>
  238f42:	8b 85 90 fe ff ff    	mov    eax,DWORD PTR [rbp-0x170]
  238f48:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
        const significand: src_rep_t = (aRep & srcSignificandMask) | srcMinNormal;
  238f4b:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  238f4f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  238f53:	40 b6 30             	mov    sil,0x30
  238f56:	40 88 f7             	mov    dil,sil
  238f59:	c4 e2 c0 f5 d2       	bzhi   rdx,rdx,rdi
  238f5e:	48 bf 00 00 00 00 00 	movabs rdi,0x1000000000000
  238f65:	00 01 00 
  238f68:	48 09 fa             	or     rdx,rdi
  238f6b:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
  238f6f:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
        if (shift > srcSigBits) {
  238f73:	83 7d a0 70          	cmp    DWORD PTR [rbp-0x60],0x70
  238f77:	0f 87 1c fe ff ff    	ja     238d99 <__trunctfdf2+0x269>
  238f7d:	e9 24 fe ff ff       	jmp    238da6 <__trunctfdf2+0x276>
  238f82:	48 8d 3d ef ae 00 00 	lea    rdi,[rip+0xaeef]        # 243e78 <__unnamed_2>
  238f89:	31 c0                	xor    eax,eax
  238f8b:	89 c6                	mov    esi,eax
            const sticky: src_rep_t = significand << @intCast(SrcShift, srcBits - shift);
  238f8d:	e8 fe d7 ff ff       	call   236790 <panic>
  238f92:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
  238f98:	88 c1                	mov    cl,al
  238f9a:	83 e0 7f             	and    eax,0x7f
  238f9d:	8b 95 bc fe ff ff    	mov    edx,DWORD PTR [rbp-0x144]
  238fa3:	39 c2                	cmp    edx,eax
  238fa5:	88 8d 8e fe ff ff    	mov    BYTE PTR [rbp-0x172],cl
  238fab:	75 72                	jne    23901f <__trunctfdf2+0x4ef>
  238fad:	8a 8d 8e fe ff ff    	mov    cl,BYTE PTR [rbp-0x172]
  238fb3:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  238fba:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
  238fc1:	48 0f a5 d0          	shld   rax,rdx,cl
  238fc5:	8a 8d 8e fe ff ff    	mov    cl,BYTE PTR [rbp-0x172]
  238fcb:	40 88 ce             	mov    sil,cl
  238fce:	c4 e2 c9 f7 f2       	shlx   rsi,rdx,rsi
  238fd3:	31 ff                	xor    edi,edi
  238fd5:	f6 c1 40             	test   cl,0x40
  238fd8:	48 0f 45 c6          	cmovne rax,rsi
  238fdc:	41 89 f8             	mov    r8d,edi
  238fdf:	49 0f 45 f0          	cmovne rsi,r8
  238fe3:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  238fe7:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
            const denormalizedSignificand: src_rep_t = significand >> @intCast(SrcShift, shift) | sticky;
  238feb:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  238fef:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  238ff3:	8b 7d a0             	mov    edi,DWORD PTR [rbp-0x60]
  238ff6:	41 88 f9             	mov    r9b,dil
  238ff9:	41 89 fa             	mov    r10d,edi
  238ffc:	41 83 e2 7f          	and    r10d,0x7f
  239000:	44 39 d7             	cmp    edi,r10d
  239003:	48 89 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rax
  23900a:	48 89 b5 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rsi
  239011:	44 88 8d 77 fe ff ff 	mov    BYTE PTR [rbp-0x189],r9b
  239018:	74 15                	je     23902f <__trunctfdf2+0x4ff>
  23901a:	e9 a9 00 00 00       	jmp    2390c8 <__trunctfdf2+0x598>
  23901f:	48 8d 3d 6a ae 00 00 	lea    rdi,[rip+0xae6a]        # 243e90 <__unnamed_3>
  239026:	31 c0                	xor    eax,eax
  239028:	89 c6                	mov    esi,eax
            const sticky: src_rep_t = significand << @intCast(SrcShift, srcBits - shift);
  23902a:	e8 61 d7 ff ff       	call   236790 <panic>
            const denormalizedSignificand: src_rep_t = significand >> @intCast(SrcShift, shift) | sticky;
  23902f:	8a 8d 77 fe ff ff    	mov    cl,BYTE PTR [rbp-0x189]
  239035:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
  23903c:	48 8b 95 78 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x188]
  239043:	48 0f ad d0          	shrd   rax,rdx,cl
  239047:	8a 8d 77 fe ff ff    	mov    cl,BYTE PTR [rbp-0x189]
  23904d:	40 88 ce             	mov    sil,cl
  239050:	c4 e2 cb f7 f2       	shrx   rsi,rdx,rsi
  239055:	31 ff                	xor    edi,edi
  239057:	f6 c1 40             	test   cl,0x40
  23905a:	48 0f 45 c6          	cmovne rax,rsi
  23905e:	41 89 f8             	mov    r8d,edi
  239061:	49 0f 45 f0          	cmovne rsi,r8
  239065:	4c 8b 45 80          	mov    r8,QWORD PTR [rbp-0x80]
  239069:	4c 8b 4d 88          	mov    r9,QWORD PTR [rbp-0x78]
  23906d:	4c 09 c0             	or     rax,r8
  239070:	4c 09 ce             	or     rsi,r9
  239073:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
  23907a:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
            absResult = @intCast(dst_rep_t, denormalizedSignificand >> (srcSigBits - dstSigBits));
  239081:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  239088:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
  23908f:	49 89 f0             	mov    r8,rsi
  239092:	49 c1 e8 3c          	shr    r8,0x3c
  239096:	c4 c1 f9 6e c0       	vmovq  xmm0,r8
  23909b:	48 0f a4 c6 04       	shld   rsi,rax,0x4
  2390a0:	c4 e1 f9 6e ce       	vmovq  xmm1,rsi
  2390a5:	c5 f1 6c c0          	vpunpcklqdq xmm0,xmm1,xmm0
  2390a9:	c5 f9 74 c1          	vpcmpeqb xmm0,xmm0,xmm1
  2390ad:	c5 f9 d7 f8          	vpmovmskb edi,xmm0
  2390b1:	81 ef ff ff 00 00    	sub    edi,0xffff
  2390b7:	48 89 b5 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rsi
  2390be:	89 bd 64 fe ff ff    	mov    DWORD PTR [rbp-0x19c],edi
  2390c4:	74 12                	je     2390d8 <__trunctfdf2+0x5a8>
  2390c6:	eb 79                	jmp    239141 <__trunctfdf2+0x611>
  2390c8:	48 8d 3d c1 ad 00 00 	lea    rdi,[rip+0xadc1]        # 243e90 <__unnamed_3>
  2390cf:	31 c0                	xor    eax,eax
  2390d1:	89 c6                	mov    esi,eax
            const denormalizedSignificand: src_rep_t = significand >> @intCast(SrcShift, shift) | sticky;
  2390d3:	e8 b8 d6 ff ff       	call   236790 <panic>
            absResult = @intCast(dst_rep_t, denormalizedSignificand >> (srcSigBits - dstSigBits));
  2390d8:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
  2390df:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
            const roundBits: src_rep_t = denormalizedSignificand & roundMask;
  2390e3:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
  2390ea:	b2 3c                	mov    dl,0x3c
  2390ec:	40 88 d6             	mov    sil,dl
  2390ef:	c4 e2 c8 f5 c9       	bzhi   rcx,rcx,rsi
  2390f4:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
  2390fb:	48 c7 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],0x0
  239102:	00 00 00 00 
            if (roundBits > halfway) {
  239106:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  23910d:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
  239114:	31 ff                	xor    edi,edi
  239116:	49 b8 00 00 00 00 00 	movabs r8,0x800000000000000
  23911d:	00 00 08 
  239120:	49 29 c8             	sub    r8,rcx
  239123:	89 f9                	mov    ecx,edi
  239125:	48 19 f1             	sbb    rcx,rsi
  239128:	4c 89 85 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],r8
  23912f:	48 89 8d 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rcx
  239136:	0f 82 a4 fc ff ff    	jb     238de0 <__trunctfdf2+0x2b0>
  23913c:	e9 c2 fc ff ff       	jmp    238e03 <__trunctfdf2+0x2d3>
  239141:	48 8d 3d 48 ad 00 00 	lea    rdi,[rip+0xad48]        # 243e90 <__unnamed_3>
  239148:	31 c0                	xor    eax,eax
  23914a:	89 c6                	mov    esi,eax
            absResult = @intCast(dst_rep_t, denormalizedSignificand >> (srcSigBits - dstSigBits));
  23914c:	e8 3f d6 ff ff       	call   236790 <panic>
  239151:	48 8d 3d 20 ad 00 00 	lea    rdi,[rip+0xad20]        # 243e78 <__unnamed_2>
  239158:	31 c0                	xor    eax,eax
  23915a:	89 c6                	mov    esi,eax
                absResult += 1;
  23915c:	e8 2f d6 ff ff       	call   236790 <panic>
  239161:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
  239168:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
            if (roundBits > halfway) {
  23916c:	e9 ef fc ff ff       	jmp    238e60 <__trunctfdf2+0x330>
  239171:	48 8d 3d 00 ad 00 00 	lea    rdi,[rip+0xad00]        # 243e78 <__unnamed_2>
  239178:	31 c0                	xor    eax,eax
  23917a:	89 c6                	mov    esi,eax
                absResult += absResult & 1;
  23917c:	e8 0f d6 ff ff       	call   236790 <panic>
  239181:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
  239188:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
            } else if (roundBits == halfway) {
  23918c:	e9 cd fc ff ff       	jmp    238e5e <__trunctfdf2+0x32e>
    const result: dst_rep_t align(@alignOf(dst_t)) = absResult | @truncate(dst_rep_t, sign >> @intCast(SrcShift, srcBits - dstBits));
  239191:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  239195:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  239199:	48 09 c8             	or     rax,rcx
  23919c:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
    return @bitCast(dst_t, result);
  2391a3:	c5 fa 7e 85 58 ff ff 	vmovq  xmm0,QWORD PTR [rbp-0xa8]
  2391aa:	ff 
    return truncXfYf2(f64, f128, a);
  2391ab:	48 81 c4 b0 01 00 00 	add    rsp,0x1b0
  2391b2:	5d                   	pop    rbp
  2391b3:	c3                   	ret    
  2391b4:	66 66 66 2e 0f 1f 84 	data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2391bb:	00 00 00 00 00 

00000000002391c0 <__trunctfsf2>:
pub extern fn __trunctfsf2(a: f128) f32 {
  2391c0:	55                   	push   rbp
  2391c1:	48 89 e5             	mov    rbp,rsp
  2391c4:	48 81 ec 90 01 00 00 	sub    rsp,0x190
  2391cb:	0f 29 85 40 ff ff ff 	movaps XMMWORD PTR [rbp-0xc0],xmm0
    return truncXfYf2(f32, f128, a);
  2391d2:	0f 28 85 40 ff ff ff 	movaps xmm0,XMMWORD PTR [rbp-0xc0]
  2391d9:	0f 29 45 f0          	movaps XMMWORD PTR [rbp-0x10],xmm0
    const aRep: src_rep_t = @bitCast(src_rep_t, a);
  2391dd:	0f 28 45 f0          	movaps xmm0,XMMWORD PTR [rbp-0x10]
  2391e1:	0f 29 45 e0          	movaps XMMWORD PTR [rbp-0x20],xmm0
    const aAbs: src_rep_t = aRep & srcAbsMask;
  2391e5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  2391e9:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  2391ed:	b2 3f                	mov    dl,0x3f
  2391ef:	40 88 d6             	mov    sil,dl
  2391f2:	c4 e2 c8 f5 c9       	bzhi   rcx,rcx,rsi
  2391f7:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  2391fb:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
    const sign: src_rep_t = aRep & srcSignMask;
  2391ff:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  239203:	48 b9 00 00 00 00 00 	movabs rcx,0x8000000000000000
  23920a:	00 00 80 
  23920d:	48 21 c8             	and    rax,rcx
  239210:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  239214:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
  23921b:	00 
    var absResult: dst_rep_t = undefined;
  23921c:	c7 45 bc aa aa aa aa 	mov    DWORD PTR [rbp-0x44],0xaaaaaaaa
    if (aAbs -% underflow < aAbs -% overflow) {
  239223:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  239227:	48 b9 00 00 00 00 00 	movabs rcx,0xc07f000000000000
  23922e:	00 7f c0 
  239231:	48 89 c6             	mov    rsi,rax
  239234:	48 01 ce             	add    rsi,rcx
  239237:	48 b9 00 00 00 00 00 	movabs rcx,0xbf81000000000000
  23923e:	00 81 bf 
  239241:	48 01 c8             	add    rax,rcx
  239244:	48 29 c6             	sub    rsi,rax
  239247:	48 89 b5 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rsi
  23924e:	0f 83 d5 00 00 00    	jae    239329 <__trunctfsf2+0x169>
  239254:	eb 00                	jmp    239256 <__trunctfsf2+0x96>
        absResult = @truncate(dst_rep_t, aAbs >> (srcSigBits - dstSigBits));
  239256:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  23925a:	48 c1 e8 19          	shr    rax,0x19
  23925e:	89 c1                	mov    ecx,eax
  239260:	89 4d bc             	mov    DWORD PTR [rbp-0x44],ecx
        absResult -%= dst_rep_t(srcExpBias - dstExpBias) << dstSigBits;
  239263:	8b 4d bc             	mov    ecx,DWORD PTR [rbp-0x44]
  239266:	81 c1 00 00 00 40    	add    ecx,0x40000000
  23926c:	89 4d bc             	mov    DWORD PTR [rbp-0x44],ecx
        const roundBits: src_rep_t = aAbs & roundMask;
  23926f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  239273:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  239277:	89 d1                	mov    ecx,edx
  239279:	81 e1 ff ff ff 01    	and    ecx,0x1ffffff
  23927f:	89 ca                	mov    edx,ecx
  239281:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  239285:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
        if (roundBits > halfway) {
  239289:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  23928d:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  239291:	48 83 e8 01          	sub    rax,0x1
  239295:	48 81 da 00 00 00 01 	sbb    rdx,0x1000000
  23929c:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
  2392a3:	48 89 95 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rdx
  2392aa:	72 22                	jb     2392ce <__trunctfsf2+0x10e>
  2392ac:	eb 00                	jmp    2392ae <__trunctfsf2+0xee>
            absResult += 1;
  2392ae:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  2392b1:	83 c0 01             	add    eax,0x1
  2392b4:	0f 92 c1             	setb   cl
  2392b7:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
  2392bd:	88 8d 23 ff ff ff    	mov    BYTE PTR [rbp-0xdd],cl
  2392c3:	0f 82 ef 01 00 00    	jb     2394b8 <__trunctfsf2+0x2f8>
  2392c9:	e9 fa 01 00 00       	jmp    2394c8 <__trunctfsf2+0x308>
        } else if (roundBits == halfway) {
  2392ce:	c5 fa 6f 45 a8       	vmovdqu xmm0,XMMWORD PTR [rbp-0x58]
  2392d3:	b8 00 00 00 01       	mov    eax,0x1000000
  2392d8:	89 c1                	mov    ecx,eax
  2392da:	c4 e1 f9 6e c9       	vmovq  xmm1,rcx
  2392df:	c5 f1 73 f9 08       	vpslldq xmm1,xmm1,0x8
  2392e4:	c5 f9 74 c1          	vpcmpeqb xmm0,xmm0,xmm1
  2392e8:	c5 f9 d7 c0          	vpmovmskb eax,xmm0
  2392ec:	2d ff ff 00 00       	sub    eax,0xffff
  2392f1:	89 85 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],eax
  2392f7:	75 27                	jne    239320 <__trunctfsf2+0x160>
  2392f9:	eb 00                	jmp    2392fb <__trunctfsf2+0x13b>
            absResult += absResult & 1;
  2392fb:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  2392fe:	8b 4d bc             	mov    ecx,DWORD PTR [rbp-0x44]
  239301:	83 e1 01             	and    ecx,0x1
  239304:	01 c8                	add    eax,ecx
  239306:	0f 92 c2             	setb   dl
  239309:	89 85 18 ff ff ff    	mov    DWORD PTR [rbp-0xe8],eax
  23930f:	88 95 17 ff ff ff    	mov    BYTE PTR [rbp-0xe9],dl
  239315:	0f 82 bb 01 00 00    	jb     2394d6 <__trunctfsf2+0x316>
  23931b:	e9 c6 01 00 00       	jmp    2394e6 <__trunctfsf2+0x326>
        } else if (roundBits == halfway) {
  239320:	eb 00                	jmp    239322 <__trunctfsf2+0x162>
        if (roundBits > halfway) {
  239322:	eb 00                	jmp    239324 <__trunctfsf2+0x164>
    if (aAbs -% underflow < aAbs -% overflow) {
  239324:	e9 99 04 00 00       	jmp    2397c2 <__trunctfsf2+0x602>
    } else if (aAbs > srcInfinity) {
  239329:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23932d:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  239331:	48 83 e8 01          	sub    rax,0x1
  239335:	48 ba 00 00 00 00 00 	movabs rdx,0x7fff000000000000
  23933c:	00 ff 7f 
  23933f:	48 19 d1             	sbb    rcx,rdx
  239342:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  239349:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
  239350:	72 4f                	jb     2393a1 <__trunctfsf2+0x1e1>
  239352:	eb 00                	jmp    239354 <__trunctfsf2+0x194>
        absResult = @intCast(dst_rep_t, dstInfExp) << dstSigBits;
  239354:	c7 45 bc 00 00 80 7f 	mov    DWORD PTR [rbp-0x44],0x7f800000
        absResult |= dstQNaN;
  23935b:	8a 45 be             	mov    al,BYTE PTR [rbp-0x42]
  23935e:	0c 40                	or     al,0x40
  239360:	88 45 be             	mov    BYTE PTR [rbp-0x42],al
        absResult |= @intCast(dst_rep_t, ((aAbs & srcNaNCode) >> (srcSigBits - dstSigBits)) & dstNaNCode);
  239363:	8b 4d bc             	mov    ecx,DWORD PTR [rbp-0x44]
  239366:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  23936a:	48 c1 ea 19          	shr    rdx,0x19
  23936e:	89 d6                	mov    esi,edx
  239370:	81 e6 ff ff 3f 00    	and    esi,0x3fffff
  239376:	c5 f9 76 c0          	vpcmpeqd xmm0,xmm0,xmm0
  23937a:	c5 f9 d7 f8          	vpmovmskb edi,xmm0
  23937e:	81 ef ff ff 00 00    	sub    edi,0xffff
  239384:	89 8d fc fe ff ff    	mov    DWORD PTR [rbp-0x104],ecx
  23938a:	89 b5 f8 fe ff ff    	mov    DWORD PTR [rbp-0x108],esi
  239390:	89 bd f4 fe ff ff    	mov    DWORD PTR [rbp-0x10c],edi
  239396:	0f 84 58 01 00 00    	je     2394f4 <__trunctfsf2+0x334>
  23939c:	e9 66 01 00 00       	jmp    239507 <__trunctfsf2+0x347>
    } else if (aAbs >= overflow) {
  2393a1:	0f b7 45 de          	movzx  eax,WORD PTR [rbp-0x22]
  2393a5:	89 c1                	mov    ecx,eax
  2393a7:	48 81 e9 7f 40 00 00 	sub    rcx,0x407f
  2393ae:	48 89 8d e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rcx
  2393b5:	72 0e                	jb     2393c5 <__trunctfsf2+0x205>
  2393b7:	eb 00                	jmp    2393b9 <__trunctfsf2+0x1f9>
        absResult = @intCast(dst_rep_t, dstInfExp) << dstSigBits;
  2393b9:	c7 45 bc 00 00 80 7f 	mov    DWORD PTR [rbp-0x44],0x7f800000
    } else if (aAbs >= overflow) {
  2393c0:	e9 ec 00 00 00       	jmp    2394b1 <__trunctfsf2+0x2f1>
        const aExp = @intCast(u32, aAbs >> srcSigBits);
  2393c5:	0f b7 45 de          	movzx  eax,WORD PTR [rbp-0x22]
  2393c9:	c5 f9 76 c0          	vpcmpeqd xmm0,xmm0,xmm0
  2393cd:	c5 f9 d7 c8          	vpmovmskb ecx,xmm0
  2393d1:	81 e9 ff ff 00 00    	sub    ecx,0xffff
  2393d7:	89 85 e4 fe ff ff    	mov    DWORD PTR [rbp-0x11c],eax
  2393dd:	89 8d e0 fe ff ff    	mov    DWORD PTR [rbp-0x120],ecx
  2393e3:	0f 84 2e 01 00 00    	je     239517 <__trunctfsf2+0x357>
  2393e9:	e9 4d 01 00 00       	jmp    23953b <__trunctfsf2+0x37b>
            absResult = 0;
  2393ee:	c7 45 bc 00 00 00 00 	mov    DWORD PTR [rbp-0x44],0x0
        if (shift > srcSigBits) {
  2393f5:	e9 b5 00 00 00       	jmp    2394af <__trunctfsf2+0x2ef>
  2393fa:	b8 80 00 00 00       	mov    eax,0x80
            const sticky: src_rep_t = significand << @intCast(SrcShift, srcBits - shift);
  2393ff:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  239403:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  239407:	2b 45 a0             	sub    eax,DWORD PTR [rbp-0x60]
  23940a:	40 0f 92 c6          	setb   sil
  23940e:	48 89 95 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rdx
  239415:	48 89 8d d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rcx
  23941c:	89 85 cc fe ff ff    	mov    DWORD PTR [rbp-0x134],eax
  239422:	40 88 b5 cb fe ff ff 	mov    BYTE PTR [rbp-0x135],sil
  239429:	0f 82 98 01 00 00    	jb     2395c7 <__trunctfsf2+0x407>
  23942f:	e9 a3 01 00 00       	jmp    2395d7 <__trunctfsf2+0x417>
                absResult += 1;
  239434:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  239437:	83 c0 01             	add    eax,0x1
  23943a:	0f 92 c1             	setb   cl
  23943d:	89 85 c4 fe ff ff    	mov    DWORD PTR [rbp-0x13c],eax
  239443:	88 8d c3 fe ff ff    	mov    BYTE PTR [rbp-0x13d],cl
  239449:	0f 82 37 03 00 00    	jb     239786 <__trunctfsf2+0x5c6>
  23944f:	e9 42 03 00 00       	jmp    239796 <__trunctfsf2+0x5d6>
            } else if (roundBits == halfway) {
  239454:	c5 fa 6f 85 60 ff ff 	vmovdqu xmm0,XMMWORD PTR [rbp-0xa0]
  23945b:	ff 
  23945c:	b8 00 00 00 01       	mov    eax,0x1000000
  239461:	89 c1                	mov    ecx,eax
  239463:	c4 e1 f9 6e c9       	vmovq  xmm1,rcx
  239468:	c5 f1 73 f9 08       	vpslldq xmm1,xmm1,0x8
  23946d:	c5 f9 74 c1          	vpcmpeqb xmm0,xmm0,xmm1
  239471:	c5 f9 d7 c0          	vpmovmskb eax,xmm0
  239475:	2d ff ff 00 00       	sub    eax,0xffff
  23947a:	89 85 bc fe ff ff    	mov    DWORD PTR [rbp-0x144],eax
  239480:	75 27                	jne    2394a9 <__trunctfsf2+0x2e9>
  239482:	eb 00                	jmp    239484 <__trunctfsf2+0x2c4>
                absResult += absResult & 1;
  239484:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  239487:	8b 4d bc             	mov    ecx,DWORD PTR [rbp-0x44]
  23948a:	83 e1 01             	and    ecx,0x1
  23948d:	01 c8                	add    eax,ecx
  23948f:	0f 92 c2             	setb   dl
  239492:	89 85 b8 fe ff ff    	mov    DWORD PTR [rbp-0x148],eax
  239498:	88 95 b7 fe ff ff    	mov    BYTE PTR [rbp-0x149],dl
  23949e:	0f 82 00 03 00 00    	jb     2397a4 <__trunctfsf2+0x5e4>
  2394a4:	e9 0b 03 00 00       	jmp    2397b4 <__trunctfsf2+0x5f4>
            } else if (roundBits == halfway) {
  2394a9:	eb 00                	jmp    2394ab <__trunctfsf2+0x2eb>
            if (roundBits > halfway) {
  2394ab:	eb 00                	jmp    2394ad <__trunctfsf2+0x2ed>
        if (shift > srcSigBits) {
  2394ad:	eb 00                	jmp    2394af <__trunctfsf2+0x2ef>
    } else if (aAbs >= overflow) {
  2394af:	eb 00                	jmp    2394b1 <__trunctfsf2+0x2f1>
    } else if (aAbs > srcInfinity) {
  2394b1:	eb 00                	jmp    2394b3 <__trunctfsf2+0x2f3>
    if (aAbs -% underflow < aAbs -% overflow) {
  2394b3:	e9 0a 03 00 00       	jmp    2397c2 <__trunctfsf2+0x602>
  2394b8:	48 8d 3d b9 a9 00 00 	lea    rdi,[rip+0xa9b9]        # 243e78 <__unnamed_2>
  2394bf:	31 c0                	xor    eax,eax
  2394c1:	89 c6                	mov    esi,eax
            absResult += 1;
  2394c3:	e8 c8 d2 ff ff       	call   236790 <panic>
  2394c8:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
  2394ce:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
        if (roundBits > halfway) {
  2394d1:	e9 4e fe ff ff       	jmp    239324 <__trunctfsf2+0x164>
  2394d6:	48 8d 3d 9b a9 00 00 	lea    rdi,[rip+0xa99b]        # 243e78 <__unnamed_2>
  2394dd:	31 c0                	xor    eax,eax
  2394df:	89 c6                	mov    esi,eax
            absResult += absResult & 1;
  2394e1:	e8 aa d2 ff ff       	call   236790 <panic>
  2394e6:	8b 85 18 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe8]
  2394ec:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
        } else if (roundBits == halfway) {
  2394ef:	e9 2e fe ff ff       	jmp    239322 <__trunctfsf2+0x162>
        absResult |= @intCast(dst_rep_t, ((aAbs & srcNaNCode) >> (srcSigBits - dstSigBits)) & dstNaNCode);
  2394f4:	8b 85 fc fe ff ff    	mov    eax,DWORD PTR [rbp-0x104]
  2394fa:	8b 8d f8 fe ff ff    	mov    ecx,DWORD PTR [rbp-0x108]
  239500:	09 c8                	or     eax,ecx
  239502:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
    } else if (aAbs > srcInfinity) {
  239505:	eb ac                	jmp    2394b3 <__trunctfsf2+0x2f3>
  239507:	48 8d 3d 82 a9 00 00 	lea    rdi,[rip+0xa982]        # 243e90 <__unnamed_3>
  23950e:	31 c0                	xor    eax,eax
  239510:	89 c6                	mov    esi,eax
        absResult |= @intCast(dst_rep_t, ((aAbs & srcNaNCode) >> (srcSigBits - dstSigBits)) & dstNaNCode);
  239512:	e8 79 d2 ff ff       	call   236790 <panic>
  239517:	b8 80 3f 00 00       	mov    eax,0x3f80
        const aExp = @intCast(u32, aAbs >> srcSigBits);
  23951c:	8b 8d e4 fe ff ff    	mov    ecx,DWORD PTR [rbp-0x11c]
  239522:	89 4d a4             	mov    DWORD PTR [rbp-0x5c],ecx
        const shift = @intCast(u32, srcExpBias - dstExpBias - aExp + 1);
  239525:	2b 45 a4             	sub    eax,DWORD PTR [rbp-0x5c]
  239528:	0f 92 c2             	setb   dl
  23952b:	89 85 b0 fe ff ff    	mov    DWORD PTR [rbp-0x150],eax
  239531:	88 95 af fe ff ff    	mov    BYTE PTR [rbp-0x151],dl
  239537:	72 12                	jb     23954b <__trunctfsf2+0x38b>
  239539:	eb 20                	jmp    23955b <__trunctfsf2+0x39b>
  23953b:	48 8d 3d 4e a9 00 00 	lea    rdi,[rip+0xa94e]        # 243e90 <__unnamed_3>
  239542:	31 c0                	xor    eax,eax
  239544:	89 c6                	mov    esi,eax
        const aExp = @intCast(u32, aAbs >> srcSigBits);
  239546:	e8 45 d2 ff ff       	call   236790 <panic>
  23954b:	48 8d 3d 26 a9 00 00 	lea    rdi,[rip+0xa926]        # 243e78 <__unnamed_2>
  239552:	31 c0                	xor    eax,eax
  239554:	89 c6                	mov    esi,eax
        const shift = @intCast(u32, srcExpBias - dstExpBias - aExp + 1);
  239556:	e8 35 d2 ff ff       	call   236790 <panic>
  23955b:	8b 85 b0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x150]
  239561:	83 c0 01             	add    eax,0x1
  239564:	0f 92 c1             	setb   cl
  239567:	89 85 a8 fe ff ff    	mov    DWORD PTR [rbp-0x158],eax
  23956d:	88 8d a7 fe ff ff    	mov    BYTE PTR [rbp-0x159],cl
  239573:	72 02                	jb     239577 <__trunctfsf2+0x3b7>
  239575:	eb 10                	jmp    239587 <__trunctfsf2+0x3c7>
  239577:	48 8d 3d fa a8 00 00 	lea    rdi,[rip+0xa8fa]        # 243e78 <__unnamed_2>
  23957e:	31 c0                	xor    eax,eax
  239580:	89 c6                	mov    esi,eax
  239582:	e8 09 d2 ff ff       	call   236790 <panic>
  239587:	8b 85 a8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x158]
  23958d:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
        const significand: src_rep_t = (aRep & srcSignificandMask) | srcMinNormal;
  239590:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  239594:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  239598:	40 b6 30             	mov    sil,0x30
  23959b:	40 88 f7             	mov    dil,sil
  23959e:	c4 e2 c0 f5 d2       	bzhi   rdx,rdx,rdi
  2395a3:	48 bf 00 00 00 00 00 	movabs rdi,0x1000000000000
  2395aa:	00 01 00 
  2395ad:	48 09 fa             	or     rdx,rdi
  2395b0:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
  2395b4:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
        if (shift > srcSigBits) {
  2395b8:	83 7d a0 70          	cmp    DWORD PTR [rbp-0x60],0x70
  2395bc:	0f 87 2c fe ff ff    	ja     2393ee <__trunctfsf2+0x22e>
  2395c2:	e9 33 fe ff ff       	jmp    2393fa <__trunctfsf2+0x23a>
  2395c7:	48 8d 3d aa a8 00 00 	lea    rdi,[rip+0xa8aa]        # 243e78 <__unnamed_2>
  2395ce:	31 c0                	xor    eax,eax
  2395d0:	89 c6                	mov    esi,eax
            const sticky: src_rep_t = significand << @intCast(SrcShift, srcBits - shift);
  2395d2:	e8 b9 d1 ff ff       	call   236790 <panic>
  2395d7:	8b 85 cc fe ff ff    	mov    eax,DWORD PTR [rbp-0x134]
  2395dd:	88 c1                	mov    cl,al
  2395df:	83 e0 7f             	and    eax,0x7f
  2395e2:	8b 95 cc fe ff ff    	mov    edx,DWORD PTR [rbp-0x134]
  2395e8:	39 c2                	cmp    edx,eax
  2395ea:	88 8d a6 fe ff ff    	mov    BYTE PTR [rbp-0x15a],cl
  2395f0:	75 72                	jne    239664 <__trunctfsf2+0x4a4>
  2395f2:	8a 8d a6 fe ff ff    	mov    cl,BYTE PTR [rbp-0x15a]
  2395f8:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
  2395ff:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
  239606:	48 0f a5 d0          	shld   rax,rdx,cl
  23960a:	8a 8d a6 fe ff ff    	mov    cl,BYTE PTR [rbp-0x15a]
  239610:	40 88 ce             	mov    sil,cl
  239613:	c4 e2 c9 f7 f2       	shlx   rsi,rdx,rsi
  239618:	31 ff                	xor    edi,edi
  23961a:	f6 c1 40             	test   cl,0x40
  23961d:	48 0f 45 c6          	cmovne rax,rsi
  239621:	41 89 f8             	mov    r8d,edi
  239624:	49 0f 45 f0          	cmovne rsi,r8
  239628:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  23962c:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
            const denormalizedSignificand: src_rep_t = significand >> @intCast(SrcShift, shift) | sticky;
  239630:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  239634:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  239638:	8b 7d a0             	mov    edi,DWORD PTR [rbp-0x60]
  23963b:	41 88 f9             	mov    r9b,dil
  23963e:	41 89 fa             	mov    r10d,edi
  239641:	41 83 e2 7f          	and    r10d,0x7f
  239645:	44 39 d7             	cmp    edi,r10d
  239648:	48 89 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rax
  23964f:	48 89 b5 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rsi
  239656:	44 88 8d 8f fe ff ff 	mov    BYTE PTR [rbp-0x171],r9b
  23965d:	74 15                	je     239674 <__trunctfsf2+0x4b4>
  23965f:	e9 9f 00 00 00       	jmp    239703 <__trunctfsf2+0x543>
  239664:	48 8d 3d 25 a8 00 00 	lea    rdi,[rip+0xa825]        # 243e90 <__unnamed_3>
  23966b:	31 c0                	xor    eax,eax
  23966d:	89 c6                	mov    esi,eax
            const sticky: src_rep_t = significand << @intCast(SrcShift, srcBits - shift);
  23966f:	e8 1c d1 ff ff       	call   236790 <panic>
            const denormalizedSignificand: src_rep_t = significand >> @intCast(SrcShift, shift) | sticky;
  239674:	8a 8d 8f fe ff ff    	mov    cl,BYTE PTR [rbp-0x171]
  23967a:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
  239681:	48 8b 95 90 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x170]
  239688:	48 0f ad d0          	shrd   rax,rdx,cl
  23968c:	8a 8d 8f fe ff ff    	mov    cl,BYTE PTR [rbp-0x171]
  239692:	40 88 ce             	mov    sil,cl
  239695:	c4 e2 cb f7 f2       	shrx   rsi,rdx,rsi
  23969a:	31 ff                	xor    edi,edi
  23969c:	f6 c1 40             	test   cl,0x40
  23969f:	48 0f 45 c6          	cmovne rax,rsi
  2396a3:	41 89 f8             	mov    r8d,edi
  2396a6:	49 0f 45 f0          	cmovne rsi,r8
  2396aa:	4c 8b 45 80          	mov    r8,QWORD PTR [rbp-0x80]
  2396ae:	4c 8b 4d 88          	mov    r9,QWORD PTR [rbp-0x78]
  2396b2:	4c 09 c0             	or     rax,r8
  2396b5:	4c 09 ce             	or     rsi,r9
  2396b8:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
  2396bf:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
            absResult = @intCast(dst_rep_t, denormalizedSignificand >> (srcSigBits - dstSigBits));
  2396c6:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  2396cd:	48 c1 e8 19          	shr    rax,0x19
  2396d1:	c4 e1 f9 6e c0       	vmovq  xmm0,rax
  2396d6:	89 c7                	mov    edi,eax
  2396d8:	41 89 fa             	mov    r10d,edi
  2396db:	44 89 d0             	mov    eax,r10d
  2396de:	c4 e1 f9 6e c8       	vmovq  xmm1,rax
  2396e3:	c5 f9 74 c1          	vpcmpeqb xmm0,xmm0,xmm1
  2396e7:	c5 79 d7 d0          	vpmovmskb r10d,xmm0
  2396eb:	41 81 ea ff ff 00 00 	sub    r10d,0xffff
  2396f2:	89 bd 88 fe ff ff    	mov    DWORD PTR [rbp-0x178],edi
  2396f8:	44 89 95 84 fe ff ff 	mov    DWORD PTR [rbp-0x17c],r10d
  2396ff:	74 12                	je     239713 <__trunctfsf2+0x553>
  239701:	eb 73                	jmp    239776 <__trunctfsf2+0x5b6>
  239703:	48 8d 3d 86 a7 00 00 	lea    rdi,[rip+0xa786]        # 243e90 <__unnamed_3>
  23970a:	31 c0                	xor    eax,eax
  23970c:	89 c6                	mov    esi,eax
            const denormalizedSignificand: src_rep_t = significand >> @intCast(SrcShift, shift) | sticky;
  23970e:	e8 7d d0 ff ff       	call   236790 <panic>
            absResult = @intCast(dst_rep_t, denormalizedSignificand >> (srcSigBits - dstSigBits));
  239713:	8b 85 88 fe ff ff    	mov    eax,DWORD PTR [rbp-0x178]
  239719:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
            const roundBits: src_rep_t = denormalizedSignificand & roundMask;
  23971c:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
  239723:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
  23972a:	89 d6                	mov    esi,edx
  23972c:	81 e6 ff ff ff 01    	and    esi,0x1ffffff
  239732:	89 f2                	mov    edx,esi
  239734:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
  23973b:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
            if (roundBits > halfway) {
  239742:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  239749:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  239750:	48 f7 d9             	neg    rcx
  239753:	be 00 00 00 01       	mov    esi,0x1000000
  239758:	89 f7                	mov    edi,esi
  23975a:	48 19 d7             	sbb    rdi,rdx
  23975d:	48 89 bd 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rdi
  239764:	48 89 8d 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rcx
  23976b:	0f 82 c3 fc ff ff    	jb     239434 <__trunctfsf2+0x274>
  239771:	e9 de fc ff ff       	jmp    239454 <__trunctfsf2+0x294>
  239776:	48 8d 3d 13 a7 00 00 	lea    rdi,[rip+0xa713]        # 243e90 <__unnamed_3>
  23977d:	31 c0                	xor    eax,eax
  23977f:	89 c6                	mov    esi,eax
            absResult = @intCast(dst_rep_t, denormalizedSignificand >> (srcSigBits - dstSigBits));
  239781:	e8 0a d0 ff ff       	call   236790 <panic>
  239786:	48 8d 3d eb a6 00 00 	lea    rdi,[rip+0xa6eb]        # 243e78 <__unnamed_2>
  23978d:	31 c0                	xor    eax,eax
  23978f:	89 c6                	mov    esi,eax
                absResult += 1;
  239791:	e8 fa cf ff ff       	call   236790 <panic>
  239796:	8b 85 c4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x13c]
  23979c:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
            if (roundBits > halfway) {
  23979f:	e9 09 fd ff ff       	jmp    2394ad <__trunctfsf2+0x2ed>
  2397a4:	48 8d 3d cd a6 00 00 	lea    rdi,[rip+0xa6cd]        # 243e78 <__unnamed_2>
  2397ab:	31 c0                	xor    eax,eax
  2397ad:	89 c6                	mov    esi,eax
                absResult += absResult & 1;
  2397af:	e8 dc cf ff ff       	call   236790 <panic>
  2397b4:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
  2397ba:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
            } else if (roundBits == halfway) {
  2397bd:	e9 e9 fc ff ff       	jmp    2394ab <__trunctfsf2+0x2eb>
    const result: dst_rep_t align(@alignOf(dst_t)) = absResult | @truncate(dst_rep_t, sign >> @intCast(SrcShift, srcBits - dstBits));
  2397c2:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  2397c5:	8b 4d cc             	mov    ecx,DWORD PTR [rbp-0x34]
  2397c8:	09 c8                	or     eax,ecx
  2397ca:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
    return @bitCast(dst_t, result);
  2397d0:	c5 f9 6e 85 5c ff ff 	vmovd  xmm0,DWORD PTR [rbp-0xa4]
  2397d7:	ff 
    return truncXfYf2(f32, f128, a);
  2397d8:	48 81 c4 90 01 00 00 	add    rsp,0x190
  2397df:	5d                   	pop    rbp
  2397e0:	c3                   	ret    
  2397e1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  2397e8:	0f 1f 84 00 00 00 00 
  2397ef:	00 

00000000002397f0 <__fixunssfsi>:
const fixuint = @import("fixuint.zig").fixuint;
const builtin = @import("builtin");

pub extern fn __fixunssfsi(a: f32) u32 {
  2397f0:	55                   	push   rbp
  2397f1:	48 89 e5             	mov    rbp,rsp
  2397f4:	48 83 ec 10          	sub    rsp,0x10
  2397f8:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
    @setRuntimeSafety(builtin.is_test);
    return fixuint(f32, u32, a);
  2397fd:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  239802:	e8 09 00 00 00       	call   239810 <fixuint>
  239807:	48 83 c4 10          	add    rsp,0x10
  23980b:	5d                   	pop    rbp
  23980c:	c3                   	ret    
  23980d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000239810 <fixuint>:
const is_test = @import("builtin").is_test;
const Log2Int = @import("std").math.Log2Int;

pub fn fixuint(comptime fp_t: type, comptime fixuint_t: type, a: fp_t) fixuint_t {
  239810:	55                   	push   rbp
  239811:	48 89 e5             	mov    rbp,rsp
  239814:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
        f128 => 112,
        else => unreachable,
    };
    const typeWidth = rep_t.bit_count;
    const exponentBits = (typeWidth - significandBits - 1);
    const signBit = (rep_t(1) << (significandBits + exponentBits));
  239819:	c7 45 f8 00 00 00 80 	mov    DWORD PTR [rbp-0x8],0x80000000
    const maxExponent = ((1 << exponentBits) - 1);
    const exponentBias = (maxExponent >> 1);

    const implicitBit = (rep_t(1) << significandBits);
  239820:	c7 45 f4 00 00 80 00 	mov    DWORD PTR [rbp-0xc],0x800000
    const significandMask = (implicitBit - 1);
  239827:	c7 45 f0 ff ff 7f 00 	mov    DWORD PTR [rbp-0x10],0x7fffff

    // Break a into sign, exponent, significand
    const aRep: rep_t = @bitCast(rep_t, a);
  23982e:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  239833:	c5 f9 7e c0          	vmovd  eax,xmm0
  239837:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    const absMask = signBit - 1;
  23983a:	c7 45 e8 ff ff ff 7f 	mov    DWORD PTR [rbp-0x18],0x7fffffff
    const aAbs: rep_t = aRep & absMask;
  239841:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  239844:	25 ff ff ff 7f       	and    eax,0x7fffffff
  239849:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax

    const sign = if ((aRep & signBit) != 0) i32(-1) else i32(1);
  23984c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  23984f:	25 00 00 00 80       	and    eax,0x80000000
  239854:	83 f8 00             	cmp    eax,0x0
  239857:	74 0a                	je     239863 <fixuint+0x53>
  239859:	b8 ff ff ff ff       	mov    eax,0xffffffff
  23985e:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
  239861:	eb 0a                	jmp    23986d <fixuint+0x5d>
  239863:	b8 01 00 00 00       	mov    eax,0x1
  239868:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
  23986b:	eb 00                	jmp    23986d <fixuint+0x5d>
  23986d:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
  239870:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    const exponent = @intCast(i32, aAbs >> significandBits) - exponentBias;
  239873:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  239876:	c1 e8 17             	shr    eax,0x17
  239879:	83 e8 7f             	sub    eax,0x7f
  23987c:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
    const significand: rep_t = (aAbs & significandMask) | implicitBit;
  23987f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  239882:	25 ff ff 7f 00       	and    eax,0x7fffff
  239887:	0d 00 00 80 00       	or     eax,0x800000
  23988c:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax

    // If either the value or the exponent is negative, the result is zero.
    if (sign == -1 or exponent < 0) return 0;
  23988f:	83 7d e0 ff          	cmp    DWORD PTR [rbp-0x20],0xffffffff
  239893:	0f 94 c1             	sete   cl
  239896:	f6 c1 01             	test   cl,0x1
  239899:	88 4d d3             	mov    BYTE PTR [rbp-0x2d],cl
  23989c:	75 0a                	jne    2398a8 <fixuint+0x98>
  23989e:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
  2398a2:	0f 9c c0             	setl   al
  2398a5:	88 45 d3             	mov    BYTE PTR [rbp-0x2d],al
  2398a8:	8a 45 d3             	mov    al,BYTE PTR [rbp-0x2d]
  2398ab:	a8 01                	test   al,0x1
  2398ad:	75 02                	jne    2398b1 <fixuint+0xa1>
  2398af:	eb 04                	jmp    2398b5 <fixuint+0xa5>
  2398b1:	31 c0                	xor    eax,eax
  2398b3:	5d                   	pop    rbp
  2398b4:	c3                   	ret    
  2398b5:	eb 00                	jmp    2398b7 <fixuint+0xa7>

    // If the value is too large for the integer type, saturate.
    if (@intCast(c_uint, exponent) >= fixuint_t.bit_count) return ~fixuint_t(0);
  2398b7:	83 7d dc 20          	cmp    DWORD PTR [rbp-0x24],0x20
  2398bb:	72 07                	jb     2398c4 <fixuint+0xb4>
  2398bd:	b8 ff ff ff ff       	mov    eax,0xffffffff
  2398c2:	5d                   	pop    rbp
  2398c3:	c3                   	ret    

    // If 0 <= exponent < significandBits, right shift to get the result.
    // Otherwise, shift left.
    if (exponent < significandBits) {
  2398c4:	83 7d dc 17          	cmp    DWORD PTR [rbp-0x24],0x17
  2398c8:	7d 16                	jge    2398e0 <fixuint+0xd0>
        return @intCast(fixuint_t, significand >> @intCast(Log2Int(rep_t), significandBits - exponent));
  2398ca:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  2398cd:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  2398d0:	ba 17 00 00 00       	mov    edx,0x17
  2398d5:	29 ca                	sub    edx,ecx
  2398d7:	83 e2 1f             	and    edx,0x1f
  2398da:	89 d1                	mov    ecx,edx
  2398dc:	d3 e8                	shr    eax,cl
  2398de:	5d                   	pop    rbp
  2398df:	c3                   	ret    
    } else {
        return @intCast(fixuint_t, significand) << @intCast(Log2Int(fixuint_t), exponent - significandBits);
  2398e0:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  2398e3:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  2398e6:	83 c1 e9             	add    ecx,0xffffffe9
  2398e9:	83 e1 1f             	and    ecx,0x1f
  2398ec:	d3 e0                	shl    eax,cl
  2398ee:	5d                   	pop    rbp
  2398ef:	c3                   	ret    

00000000002398f0 <__fixunssfdi>:
const fixuint = @import("fixuint.zig").fixuint;
const builtin = @import("builtin");

pub extern fn __fixunssfdi(a: f32) u64 {
  2398f0:	55                   	push   rbp
  2398f1:	48 89 e5             	mov    rbp,rsp
  2398f4:	48 83 ec 10          	sub    rsp,0x10
  2398f8:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
    @setRuntimeSafety(builtin.is_test);
    return fixuint(f32, u64, a);
  2398fd:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  239902:	e8 09 00 00 00       	call   239910 <fixuint.6>
  239907:	48 83 c4 10          	add    rsp,0x10
  23990b:	5d                   	pop    rbp
  23990c:	c3                   	ret    
  23990d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000239910 <fixuint.6>:
pub fn fixuint(comptime fp_t: type, comptime fixuint_t: type, a: fp_t) fixuint_t {
  239910:	55                   	push   rbp
  239911:	48 89 e5             	mov    rbp,rsp
  239914:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
    const signBit = (rep_t(1) << (significandBits + exponentBits));
  239919:	c7 45 f8 00 00 00 80 	mov    DWORD PTR [rbp-0x8],0x80000000
    const implicitBit = (rep_t(1) << significandBits);
  239920:	c7 45 f4 00 00 80 00 	mov    DWORD PTR [rbp-0xc],0x800000
    const significandMask = (implicitBit - 1);
  239927:	c7 45 f0 ff ff 7f 00 	mov    DWORD PTR [rbp-0x10],0x7fffff
    const aRep: rep_t = @bitCast(rep_t, a);
  23992e:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  239933:	c5 f9 7e c0          	vmovd  eax,xmm0
  239937:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    const absMask = signBit - 1;
  23993a:	c7 45 e8 ff ff ff 7f 	mov    DWORD PTR [rbp-0x18],0x7fffffff
    const aAbs: rep_t = aRep & absMask;
  239941:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  239944:	25 ff ff ff 7f       	and    eax,0x7fffffff
  239949:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
    const sign = if ((aRep & signBit) != 0) i32(-1) else i32(1);
  23994c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  23994f:	25 00 00 00 80       	and    eax,0x80000000
  239954:	83 f8 00             	cmp    eax,0x0
  239957:	74 0a                	je     239963 <fixuint.6+0x53>
  239959:	b8 ff ff ff ff       	mov    eax,0xffffffff
  23995e:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
  239961:	eb 0a                	jmp    23996d <fixuint.6+0x5d>
  239963:	b8 01 00 00 00       	mov    eax,0x1
  239968:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
  23996b:	eb 00                	jmp    23996d <fixuint.6+0x5d>
  23996d:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
  239970:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    const exponent = @intCast(i32, aAbs >> significandBits) - exponentBias;
  239973:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  239976:	c1 e8 17             	shr    eax,0x17
  239979:	83 e8 7f             	sub    eax,0x7f
  23997c:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
    const significand: rep_t = (aAbs & significandMask) | implicitBit;
  23997f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  239982:	25 ff ff 7f 00       	and    eax,0x7fffff
  239987:	0d 00 00 80 00       	or     eax,0x800000
  23998c:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
    if (sign == -1 or exponent < 0) return 0;
  23998f:	83 7d e0 ff          	cmp    DWORD PTR [rbp-0x20],0xffffffff
  239993:	0f 94 c1             	sete   cl
  239996:	f6 c1 01             	test   cl,0x1
  239999:	88 4d d3             	mov    BYTE PTR [rbp-0x2d],cl
  23999c:	75 0a                	jne    2399a8 <fixuint.6+0x98>
  23999e:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
  2399a2:	0f 9c c0             	setl   al
  2399a5:	88 45 d3             	mov    BYTE PTR [rbp-0x2d],al
  2399a8:	8a 45 d3             	mov    al,BYTE PTR [rbp-0x2d]
  2399ab:	a8 01                	test   al,0x1
  2399ad:	75 02                	jne    2399b1 <fixuint.6+0xa1>
  2399af:	eb 04                	jmp    2399b5 <fixuint.6+0xa5>
  2399b1:	31 c0                	xor    eax,eax
  2399b3:	5d                   	pop    rbp
  2399b4:	c3                   	ret    
  2399b5:	eb 00                	jmp    2399b7 <fixuint.6+0xa7>
    if (@intCast(c_uint, exponent) >= fixuint_t.bit_count) return ~fixuint_t(0);
  2399b7:	83 7d dc 40          	cmp    DWORD PTR [rbp-0x24],0x40
  2399bb:	72 09                	jb     2399c6 <fixuint.6+0xb6>
  2399bd:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
  2399c4:	5d                   	pop    rbp
  2399c5:	c3                   	ret    
    if (exponent < significandBits) {
  2399c6:	83 7d dc 17          	cmp    DWORD PTR [rbp-0x24],0x17
  2399ca:	7d 18                	jge    2399e4 <fixuint.6+0xd4>
        return @intCast(fixuint_t, significand >> @intCast(Log2Int(rep_t), significandBits - exponent));
  2399cc:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  2399cf:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  2399d2:	ba 17 00 00 00       	mov    edx,0x17
  2399d7:	29 ca                	sub    edx,ecx
  2399d9:	83 e2 1f             	and    edx,0x1f
  2399dc:	89 d1                	mov    ecx,edx
  2399de:	d3 e8                	shr    eax,cl
  2399e0:	89 c0                	mov    eax,eax
  2399e2:	5d                   	pop    rbp
  2399e3:	c3                   	ret    
        return @intCast(fixuint_t, significand) << @intCast(Log2Int(fixuint_t), exponent - significandBits);
  2399e4:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  2399e7:	89 c1                	mov    ecx,eax
  2399e9:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  2399ec:	83 c0 e9             	add    eax,0xffffffe9
  2399ef:	83 e0 3f             	and    eax,0x3f
  2399f2:	89 c2                	mov    edx,eax
  2399f4:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  2399f8:	48 89 d1             	mov    rcx,rdx
  2399fb:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  2399ff:	48 d3 e2             	shl    rdx,cl
  239a02:	48 89 d0             	mov    rax,rdx
  239a05:	5d                   	pop    rbp
  239a06:	c3                   	ret    
  239a07:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  239a0e:	00 00 

0000000000239a10 <__fixunssfti>:
const fixuint = @import("fixuint.zig").fixuint;
const builtin = @import("builtin");

pub extern fn __fixunssfti(a: f32) u128 {
  239a10:	55                   	push   rbp
  239a11:	48 89 e5             	mov    rbp,rsp
  239a14:	48 83 ec 10          	sub    rsp,0x10
  239a18:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
    @setRuntimeSafety(builtin.is_test);
    return fixuint(f32, u128, a);
  239a1d:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  239a22:	e8 09 00 00 00       	call   239a30 <fixuint.7>
  239a27:	48 83 c4 10          	add    rsp,0x10
  239a2b:	5d                   	pop    rbp
  239a2c:	c3                   	ret    
  239a2d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000239a30 <fixuint.7>:
pub fn fixuint(comptime fp_t: type, comptime fixuint_t: type, a: fp_t) fixuint_t {
  239a30:	55                   	push   rbp
  239a31:	48 89 e5             	mov    rbp,rsp
  239a34:	c5 fa 11 45 fc       	vmovss DWORD PTR [rbp-0x4],xmm0
    const signBit = (rep_t(1) << (significandBits + exponentBits));
  239a39:	c7 45 f8 00 00 00 80 	mov    DWORD PTR [rbp-0x8],0x80000000
    const implicitBit = (rep_t(1) << significandBits);
  239a40:	c7 45 f4 00 00 80 00 	mov    DWORD PTR [rbp-0xc],0x800000
    const significandMask = (implicitBit - 1);
  239a47:	c7 45 f0 ff ff 7f 00 	mov    DWORD PTR [rbp-0x10],0x7fffff
    const aRep: rep_t = @bitCast(rep_t, a);
  239a4e:	c5 fa 10 45 fc       	vmovss xmm0,DWORD PTR [rbp-0x4]
  239a53:	c5 f9 7e c0          	vmovd  eax,xmm0
  239a57:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    const absMask = signBit - 1;
  239a5a:	c7 45 e8 ff ff ff 7f 	mov    DWORD PTR [rbp-0x18],0x7fffffff
    const aAbs: rep_t = aRep & absMask;
  239a61:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  239a64:	25 ff ff ff 7f       	and    eax,0x7fffffff
  239a69:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
    const sign = if ((aRep & signBit) != 0) i32(-1) else i32(1);
  239a6c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  239a6f:	25 00 00 00 80       	and    eax,0x80000000
  239a74:	83 f8 00             	cmp    eax,0x0
  239a77:	74 0a                	je     239a83 <fixuint.7+0x53>
  239a79:	b8 ff ff ff ff       	mov    eax,0xffffffff
  239a7e:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
  239a81:	eb 0a                	jmp    239a8d <fixuint.7+0x5d>
  239a83:	b8 01 00 00 00       	mov    eax,0x1
  239a88:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
  239a8b:	eb 00                	jmp    239a8d <fixuint.7+0x5d>
  239a8d:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
  239a90:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    const exponent = @intCast(i32, aAbs >> significandBits) - exponentBias;
  239a93:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  239a96:	c1 e8 17             	shr    eax,0x17
  239a99:	83 e8 7f             	sub    eax,0x7f
  239a9c:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
    const significand: rep_t = (aAbs & significandMask) | implicitBit;
  239a9f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  239aa2:	25 ff ff 7f 00       	and    eax,0x7fffff
  239aa7:	0d 00 00 80 00       	or     eax,0x800000
  239aac:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
    if (sign == -1 or exponent < 0) return 0;
  239aaf:	83 7d e0 ff          	cmp    DWORD PTR [rbp-0x20],0xffffffff
  239ab3:	0f 94 c1             	sete   cl
  239ab6:	f6 c1 01             	test   cl,0x1
  239ab9:	88 4d d3             	mov    BYTE PTR [rbp-0x2d],cl
  239abc:	75 0a                	jne    239ac8 <fixuint.7+0x98>
  239abe:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
  239ac2:	0f 9c c0             	setl   al
  239ac5:	88 45 d3             	mov    BYTE PTR [rbp-0x2d],al
  239ac8:	8a 45 d3             	mov    al,BYTE PTR [rbp-0x2d]
  239acb:	a8 01                	test   al,0x1
  239acd:	75 02                	jne    239ad1 <fixuint.7+0xa1>
  239acf:	eb 0c                	jmp    239add <fixuint.7+0xad>
  239ad1:	31 c0                	xor    eax,eax
  239ad3:	89 c1                	mov    ecx,eax
  239ad5:	48 89 c8             	mov    rax,rcx
  239ad8:	48 89 ca             	mov    rdx,rcx
  239adb:	5d                   	pop    rbp
  239adc:	c3                   	ret    
  239add:	eb 00                	jmp    239adf <fixuint.7+0xaf>
    if (@intCast(c_uint, exponent) >= fixuint_t.bit_count) return ~fixuint_t(0);
  239adf:	81 7d dc 80 00 00 00 	cmp    DWORD PTR [rbp-0x24],0x80
  239ae6:	72 11                	jb     239af9 <fixuint.7+0xc9>
  239ae8:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
  239aef:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  239af3:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  239af7:	5d                   	pop    rbp
  239af8:	c3                   	ret    
    if (exponent < significandBits) {
  239af9:	83 7d dc 17          	cmp    DWORD PTR [rbp-0x24],0x17
  239afd:	7d 1e                	jge    239b1d <fixuint.7+0xed>
        return @intCast(fixuint_t, significand >> @intCast(Log2Int(rep_t), significandBits - exponent));
  239aff:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  239b02:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  239b05:	ba 17 00 00 00       	mov    edx,0x17
  239b0a:	29 ca                	sub    edx,ecx
  239b0c:	40 88 d6             	mov    sil,dl
  239b0f:	40 88 f1             	mov    cl,sil
  239b12:	c4 e2 73 f7 c0       	shrx   eax,eax,ecx
  239b17:	31 c9                	xor    ecx,ecx
  239b19:	89 ca                	mov    edx,ecx
  239b1b:	5d                   	pop    rbp
  239b1c:	c3                   	ret    
        return @intCast(fixuint_t, significand) << @intCast(Log2Int(fixuint_t), exponent - significandBits);
  239b1d:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  239b20:	89 c1                	mov    ecx,eax
  239b22:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  239b25:	83 c0 e9             	add    eax,0xffffffe9
  239b28:	88 c2                	mov    dl,al
  239b2a:	31 c0                	xor    eax,eax
  239b2c:	89 c6                	mov    esi,eax
  239b2e:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
  239b32:	88 d1                	mov    cl,dl
  239b34:	48 89 f7             	mov    rdi,rsi
  239b37:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
  239b3b:	4c 0f a5 c7          	shld   rdi,r8,cl
  239b3f:	41 88 d1             	mov    r9b,dl
  239b42:	c4 42 b1 f7 c8       	shlx   r9,r8,r9
  239b47:	f6 c2 40             	test   dl,0x40
  239b4a:	49 0f 45 f9          	cmovne rdi,r9
  239b4e:	4c 0f 45 ce          	cmovne r9,rsi
  239b52:	4c 89 c8             	mov    rax,r9
  239b55:	48 89 fa             	mov    rdx,rdi
  239b58:	5d                   	pop    rbp
  239b59:	c3                   	ret    
  239b5a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000239b60 <__fixunsdfsi>:
const fixuint = @import("fixuint.zig").fixuint;
const builtin = @import("builtin");

pub extern fn __fixunsdfsi(a: f64) u32 {
  239b60:	55                   	push   rbp
  239b61:	48 89 e5             	mov    rbp,rsp
  239b64:	48 83 ec 10          	sub    rsp,0x10
  239b68:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    @setRuntimeSafety(builtin.is_test);
    return fixuint(f64, u32, a);
  239b6d:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  239b72:	e8 09 00 00 00       	call   239b80 <fixuint.8>
  239b77:	48 83 c4 10          	add    rsp,0x10
  239b7b:	5d                   	pop    rbp
  239b7c:	c3                   	ret    
  239b7d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000239b80 <fixuint.8>:
pub fn fixuint(comptime fp_t: type, comptime fixuint_t: type, a: fp_t) fixuint_t {
  239b80:	55                   	push   rbp
  239b81:	48 89 e5             	mov    rbp,rsp
  239b84:	48 b8 00 00 00 00 00 	movabs rax,0x8000000000000000
  239b8b:	00 00 80 
  239b8e:	48 b9 ff ff ff ff ff 	movabs rcx,0x7fffffffffffffff
  239b95:	ff ff 7f 
  239b98:	48 ba ff ff ff ff ff 	movabs rdx,0xfffffffffffff
  239b9f:	ff 0f 00 
  239ba2:	48 be 00 00 00 00 00 	movabs rsi,0x10000000000000
  239ba9:	00 10 00 
  239bac:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    const signBit = (rep_t(1) << (significandBits + exponentBits));
  239bb1:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    const implicitBit = (rep_t(1) << significandBits);
  239bb5:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
    const significandMask = (implicitBit - 1);
  239bb9:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
    const aRep: rep_t = @bitCast(rep_t, a);
  239bbd:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  239bc2:	c4 e1 f9 7e c2       	vmovq  rdx,xmm0
  239bc7:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
    const absMask = signBit - 1;
  239bcb:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    const aAbs: rep_t = aRep & absMask;
  239bcf:	48 23 4d d8          	and    rcx,QWORD PTR [rbp-0x28]
  239bd3:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
    const sign = if ((aRep & signBit) != 0) i32(-1) else i32(1);
  239bd7:	48 23 45 d8          	and    rax,QWORD PTR [rbp-0x28]
  239bdb:	48 83 f8 00          	cmp    rax,0x0
  239bdf:	74 0a                	je     239beb <fixuint.8+0x6b>
  239be1:	b8 ff ff ff ff       	mov    eax,0xffffffff
  239be6:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
  239be9:	eb 0a                	jmp    239bf5 <fixuint.8+0x75>
  239beb:	b8 01 00 00 00       	mov    eax,0x1
  239bf0:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
  239bf3:	eb 00                	jmp    239bf5 <fixuint.8+0x75>
  239bf5:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
  239bf8:	48 b9 00 00 00 00 00 	movabs rcx,0x10000000000000
  239bff:	00 10 00 
  239c02:	48 ba ff ff ff ff ff 	movabs rdx,0xfffffffffffff
  239c09:	ff 0f 00 
  239c0c:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
    const exponent = @intCast(i32, aAbs >> significandBits) - exponentBias;
  239c0f:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  239c13:	48 c1 ee 34          	shr    rsi,0x34
  239c17:	89 f0                	mov    eax,esi
  239c19:	2d ff 03 00 00       	sub    eax,0x3ff
  239c1e:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
    const significand: rep_t = (aAbs & significandMask) | implicitBit;
  239c21:	48 23 55 c8          	and    rdx,QWORD PTR [rbp-0x38]
  239c25:	48 09 ca             	or     rdx,rcx
  239c28:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
    if (sign == -1 or exponent < 0) return 0;
  239c2c:	83 7d c4 ff          	cmp    DWORD PTR [rbp-0x3c],0xffffffff
  239c30:	40 0f 94 c7          	sete   dil
  239c34:	40 f6 c7 01          	test   dil,0x1
  239c38:	40 88 7d b3          	mov    BYTE PTR [rbp-0x4d],dil
  239c3c:	75 0a                	jne    239c48 <fixuint.8+0xc8>
  239c3e:	83 7d c0 00          	cmp    DWORD PTR [rbp-0x40],0x0
  239c42:	0f 9c c0             	setl   al
  239c45:	88 45 b3             	mov    BYTE PTR [rbp-0x4d],al
  239c48:	8a 45 b3             	mov    al,BYTE PTR [rbp-0x4d]
  239c4b:	a8 01                	test   al,0x1
  239c4d:	75 02                	jne    239c51 <fixuint.8+0xd1>
  239c4f:	eb 04                	jmp    239c55 <fixuint.8+0xd5>
  239c51:	31 c0                	xor    eax,eax
  239c53:	5d                   	pop    rbp
  239c54:	c3                   	ret    
  239c55:	eb 00                	jmp    239c57 <fixuint.8+0xd7>
    if (@intCast(c_uint, exponent) >= fixuint_t.bit_count) return ~fixuint_t(0);
  239c57:	83 7d c0 20          	cmp    DWORD PTR [rbp-0x40],0x20
  239c5b:	72 07                	jb     239c64 <fixuint.8+0xe4>
  239c5d:	b8 ff ff ff ff       	mov    eax,0xffffffff
  239c62:	5d                   	pop    rbp
  239c63:	c3                   	ret    
    if (exponent < significandBits) {
  239c64:	83 7d c0 34          	cmp    DWORD PTR [rbp-0x40],0x34
  239c68:	7d 1c                	jge    239c86 <fixuint.8+0x106>
        return @intCast(fixuint_t, significand >> @intCast(Log2Int(rep_t), significandBits - exponent));
  239c6a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  239c6e:	8b 4d c0             	mov    ecx,DWORD PTR [rbp-0x40]
  239c71:	ba 34 00 00 00       	mov    edx,0x34
  239c76:	29 ca                	sub    edx,ecx
  239c78:	83 e2 3f             	and    edx,0x3f
  239c7b:	89 d1                	mov    ecx,edx
  239c7d:	48 d3 e8             	shr    rax,cl
  239c80:	89 c2                	mov    edx,eax
  239c82:	89 d0                	mov    eax,edx
  239c84:	5d                   	pop    rbp
  239c85:	c3                   	ret    
        return @intCast(fixuint_t, significand) << @intCast(Log2Int(fixuint_t), exponent - significandBits);
  239c86:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
  239c89:	8b 4d c0             	mov    ecx,DWORD PTR [rbp-0x40]
  239c8c:	83 c1 cc             	add    ecx,0xffffffcc
  239c8f:	83 e1 1f             	and    ecx,0x1f
  239c92:	d3 e0                	shl    eax,cl
  239c94:	5d                   	pop    rbp
  239c95:	c3                   	ret    
  239c96:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  239c9d:	00 00 00 

0000000000239ca0 <__fixunsdfdi>:
const fixuint = @import("fixuint.zig").fixuint;
const builtin = @import("builtin");

pub extern fn __fixunsdfdi(a: f64) u64 {
  239ca0:	55                   	push   rbp
  239ca1:	48 89 e5             	mov    rbp,rsp
  239ca4:	48 83 ec 10          	sub    rsp,0x10
  239ca8:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    @setRuntimeSafety(builtin.is_test);
    return fixuint(f64, u64, a);
  239cad:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  239cb2:	e8 09 00 00 00       	call   239cc0 <fixuint.9>
  239cb7:	48 83 c4 10          	add    rsp,0x10
  239cbb:	5d                   	pop    rbp
  239cbc:	c3                   	ret    
  239cbd:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000239cc0 <fixuint.9>:
pub fn fixuint(comptime fp_t: type, comptime fixuint_t: type, a: fp_t) fixuint_t {
  239cc0:	55                   	push   rbp
  239cc1:	48 89 e5             	mov    rbp,rsp
  239cc4:	48 b8 00 00 00 00 00 	movabs rax,0x8000000000000000
  239ccb:	00 00 80 
  239cce:	48 b9 ff ff ff ff ff 	movabs rcx,0x7fffffffffffffff
  239cd5:	ff ff 7f 
  239cd8:	48 ba ff ff ff ff ff 	movabs rdx,0xfffffffffffff
  239cdf:	ff 0f 00 
  239ce2:	48 be 00 00 00 00 00 	movabs rsi,0x10000000000000
  239ce9:	00 10 00 
  239cec:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    const signBit = (rep_t(1) << (significandBits + exponentBits));
  239cf1:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    const implicitBit = (rep_t(1) << significandBits);
  239cf5:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
    const significandMask = (implicitBit - 1);
  239cf9:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
    const aRep: rep_t = @bitCast(rep_t, a);
  239cfd:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  239d02:	c4 e1 f9 7e c2       	vmovq  rdx,xmm0
  239d07:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
    const absMask = signBit - 1;
  239d0b:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    const aAbs: rep_t = aRep & absMask;
  239d0f:	48 23 4d d8          	and    rcx,QWORD PTR [rbp-0x28]
  239d13:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
    const sign = if ((aRep & signBit) != 0) i32(-1) else i32(1);
  239d17:	48 23 45 d8          	and    rax,QWORD PTR [rbp-0x28]
  239d1b:	48 83 f8 00          	cmp    rax,0x0
  239d1f:	74 0a                	je     239d2b <fixuint.9+0x6b>
  239d21:	b8 ff ff ff ff       	mov    eax,0xffffffff
  239d26:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
  239d29:	eb 0a                	jmp    239d35 <fixuint.9+0x75>
  239d2b:	b8 01 00 00 00       	mov    eax,0x1
  239d30:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
  239d33:	eb 00                	jmp    239d35 <fixuint.9+0x75>
  239d35:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
  239d38:	48 b9 00 00 00 00 00 	movabs rcx,0x10000000000000
  239d3f:	00 10 00 
  239d42:	48 ba ff ff ff ff ff 	movabs rdx,0xfffffffffffff
  239d49:	ff 0f 00 
  239d4c:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
    const exponent = @intCast(i32, aAbs >> significandBits) - exponentBias;
  239d4f:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  239d53:	48 c1 ee 34          	shr    rsi,0x34
  239d57:	89 f0                	mov    eax,esi
  239d59:	2d ff 03 00 00       	sub    eax,0x3ff
  239d5e:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
    const significand: rep_t = (aAbs & significandMask) | implicitBit;
  239d61:	48 23 55 c8          	and    rdx,QWORD PTR [rbp-0x38]
  239d65:	48 09 ca             	or     rdx,rcx
  239d68:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
    if (sign == -1 or exponent < 0) return 0;
  239d6c:	83 7d c4 ff          	cmp    DWORD PTR [rbp-0x3c],0xffffffff
  239d70:	40 0f 94 c7          	sete   dil
  239d74:	40 f6 c7 01          	test   dil,0x1
  239d78:	40 88 7d b3          	mov    BYTE PTR [rbp-0x4d],dil
  239d7c:	75 0a                	jne    239d88 <fixuint.9+0xc8>
  239d7e:	83 7d c0 00          	cmp    DWORD PTR [rbp-0x40],0x0
  239d82:	0f 9c c0             	setl   al
  239d85:	88 45 b3             	mov    BYTE PTR [rbp-0x4d],al
  239d88:	8a 45 b3             	mov    al,BYTE PTR [rbp-0x4d]
  239d8b:	a8 01                	test   al,0x1
  239d8d:	75 02                	jne    239d91 <fixuint.9+0xd1>
  239d8f:	eb 04                	jmp    239d95 <fixuint.9+0xd5>
  239d91:	31 c0                	xor    eax,eax
  239d93:	5d                   	pop    rbp
  239d94:	c3                   	ret    
  239d95:	eb 00                	jmp    239d97 <fixuint.9+0xd7>
    if (@intCast(c_uint, exponent) >= fixuint_t.bit_count) return ~fixuint_t(0);
  239d97:	83 7d c0 40          	cmp    DWORD PTR [rbp-0x40],0x40
  239d9b:	72 09                	jb     239da6 <fixuint.9+0xe6>
  239d9d:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
  239da4:	5d                   	pop    rbp
  239da5:	c3                   	ret    
    if (exponent < significandBits) {
  239da6:	83 7d c0 34          	cmp    DWORD PTR [rbp-0x40],0x34
  239daa:	7d 18                	jge    239dc4 <fixuint.9+0x104>
        return @intCast(fixuint_t, significand >> @intCast(Log2Int(rep_t), significandBits - exponent));
  239dac:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  239db0:	8b 4d c0             	mov    ecx,DWORD PTR [rbp-0x40]
  239db3:	ba 34 00 00 00       	mov    edx,0x34
  239db8:	29 ca                	sub    edx,ecx
  239dba:	83 e2 3f             	and    edx,0x3f
  239dbd:	89 d1                	mov    ecx,edx
  239dbf:	48 d3 e8             	shr    rax,cl
  239dc2:	5d                   	pop    rbp
  239dc3:	c3                   	ret    
        return @intCast(fixuint_t, significand) << @intCast(Log2Int(fixuint_t), exponent - significandBits);
  239dc4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  239dc8:	8b 4d c0             	mov    ecx,DWORD PTR [rbp-0x40]
  239dcb:	83 c1 cc             	add    ecx,0xffffffcc
  239dce:	83 e1 3f             	and    ecx,0x3f
  239dd1:	48 d3 e0             	shl    rax,cl
  239dd4:	5d                   	pop    rbp
  239dd5:	c3                   	ret    
  239dd6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  239ddd:	00 00 00 

0000000000239de0 <__fixunsdfti>:
const fixuint = @import("fixuint.zig").fixuint;
const builtin = @import("builtin");

pub extern fn __fixunsdfti(a: f64) u128 {
  239de0:	55                   	push   rbp
  239de1:	48 89 e5             	mov    rbp,rsp
  239de4:	48 83 ec 10          	sub    rsp,0x10
  239de8:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    @setRuntimeSafety(builtin.is_test);
    return fixuint(f64, u128, a);
  239ded:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  239df2:	e8 09 00 00 00       	call   239e00 <fixuint.10>
  239df7:	48 83 c4 10          	add    rsp,0x10
  239dfb:	5d                   	pop    rbp
  239dfc:	c3                   	ret    
  239dfd:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000239e00 <fixuint.10>:
pub fn fixuint(comptime fp_t: type, comptime fixuint_t: type, a: fp_t) fixuint_t {
  239e00:	55                   	push   rbp
  239e01:	48 89 e5             	mov    rbp,rsp
  239e04:	48 b8 00 00 00 00 00 	movabs rax,0x8000000000000000
  239e0b:	00 00 80 
  239e0e:	48 b9 ff ff ff ff ff 	movabs rcx,0x7fffffffffffffff
  239e15:	ff ff 7f 
  239e18:	48 ba ff ff ff ff ff 	movabs rdx,0xfffffffffffff
  239e1f:	ff 0f 00 
  239e22:	48 be 00 00 00 00 00 	movabs rsi,0x10000000000000
  239e29:	00 10 00 
  239e2c:	c5 fb 11 45 f8       	vmovsd QWORD PTR [rbp-0x8],xmm0
    const signBit = (rep_t(1) << (significandBits + exponentBits));
  239e31:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    const implicitBit = (rep_t(1) << significandBits);
  239e35:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
    const significandMask = (implicitBit - 1);
  239e39:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
    const aRep: rep_t = @bitCast(rep_t, a);
  239e3d:	c5 fb 10 45 f8       	vmovsd xmm0,QWORD PTR [rbp-0x8]
  239e42:	c4 e1 f9 7e c2       	vmovq  rdx,xmm0
  239e47:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
    const absMask = signBit - 1;
  239e4b:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    const aAbs: rep_t = aRep & absMask;
  239e4f:	48 23 4d d8          	and    rcx,QWORD PTR [rbp-0x28]
  239e53:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
    const sign = if ((aRep & signBit) != 0) i32(-1) else i32(1);
  239e57:	48 23 45 d8          	and    rax,QWORD PTR [rbp-0x28]
  239e5b:	48 83 f8 00          	cmp    rax,0x0
  239e5f:	74 0a                	je     239e6b <fixuint.10+0x6b>
  239e61:	b8 ff ff ff ff       	mov    eax,0xffffffff
  239e66:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
  239e69:	eb 0a                	jmp    239e75 <fixuint.10+0x75>
  239e6b:	b8 01 00 00 00       	mov    eax,0x1
  239e70:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
  239e73:	eb 00                	jmp    239e75 <fixuint.10+0x75>
  239e75:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
  239e78:	48 b9 00 00 00 00 00 	movabs rcx,0x10000000000000
  239e7f:	00 10 00 
  239e82:	48 ba ff ff ff ff ff 	movabs rdx,0xfffffffffffff
  239e89:	ff 0f 00 
  239e8c:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
    const exponent = @intCast(i32, aAbs >> significandBits) - exponentBias;
  239e8f:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  239e93:	48 c1 ee 34          	shr    rsi,0x34
  239e97:	89 f0                	mov    eax,esi
  239e99:	2d ff 03 00 00       	sub    eax,0x3ff
  239e9e:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
    const significand: rep_t = (aAbs & significandMask) | implicitBit;
  239ea1:	48 23 55 c8          	and    rdx,QWORD PTR [rbp-0x38]
  239ea5:	48 09 ca             	or     rdx,rcx
  239ea8:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
    if (sign == -1 or exponent < 0) return 0;
  239eac:	83 7d c4 ff          	cmp    DWORD PTR [rbp-0x3c],0xffffffff
  239eb0:	40 0f 94 c7          	sete   dil
  239eb4:	40 f6 c7 01          	test   dil,0x1
  239eb8:	40 88 7d b3          	mov    BYTE PTR [rbp-0x4d],dil
  239ebc:	75 0a                	jne    239ec8 <fixuint.10+0xc8>
  239ebe:	83 7d c0 00          	cmp    DWORD PTR [rbp-0x40],0x0
  239ec2:	0f 9c c0             	setl   al
  239ec5:	88 45 b3             	mov    BYTE PTR [rbp-0x4d],al
  239ec8:	8a 45 b3             	mov    al,BYTE PTR [rbp-0x4d]
  239ecb:	a8 01                	test   al,0x1
  239ecd:	75 02                	jne    239ed1 <fixuint.10+0xd1>
  239ecf:	eb 0c                	jmp    239edd <fixuint.10+0xdd>
  239ed1:	31 c0                	xor    eax,eax
  239ed3:	89 c1                	mov    ecx,eax
  239ed5:	48 89 c8             	mov    rax,rcx
  239ed8:	48 89 ca             	mov    rdx,rcx
  239edb:	5d                   	pop    rbp
  239edc:	c3                   	ret    
  239edd:	eb 00                	jmp    239edf <fixuint.10+0xdf>
    if (@intCast(c_uint, exponent) >= fixuint_t.bit_count) return ~fixuint_t(0);
  239edf:	81 7d c0 80 00 00 00 	cmp    DWORD PTR [rbp-0x40],0x80
  239ee6:	72 11                	jb     239ef9 <fixuint.10+0xf9>
  239ee8:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
  239eef:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  239ef3:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  239ef7:	5d                   	pop    rbp
  239ef8:	c3                   	ret    
    if (exponent < significandBits) {
  239ef9:	83 7d c0 34          	cmp    DWORD PTR [rbp-0x40],0x34
  239efd:	7d 1f                	jge    239f1e <fixuint.10+0x11e>
        return @intCast(fixuint_t, significand >> @intCast(Log2Int(rep_t), significandBits - exponent));
  239eff:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  239f03:	8b 4d c0             	mov    ecx,DWORD PTR [rbp-0x40]
  239f06:	ba 34 00 00 00       	mov    edx,0x34
  239f0b:	29 ca                	sub    edx,ecx
  239f0d:	40 88 d6             	mov    sil,dl
  239f10:	40 88 f7             	mov    dil,sil
  239f13:	c4 e2 c3 f7 c0       	shrx   rax,rax,rdi
  239f18:	31 c9                	xor    ecx,ecx
  239f1a:	89 ca                	mov    edx,ecx
  239f1c:	5d                   	pop    rbp
  239f1d:	c3                   	ret    
        return @intCast(fixuint_t, significand) << @intCast(Log2Int(fixuint_t), exponent - significandBits);
  239f1e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  239f22:	8b 4d c0             	mov    ecx,DWORD PTR [rbp-0x40]
  239f25:	83 c1 cc             	add    ecx,0xffffffcc
  239f28:	88 ca                	mov    dl,cl
  239f2a:	31 c9                	xor    ecx,ecx
  239f2c:	89 ce                	mov    esi,ecx
  239f2e:	88 d1                	mov    cl,dl
  239f30:	48 89 f7             	mov    rdi,rsi
  239f33:	48 0f a5 c7          	shld   rdi,rax,cl
  239f37:	41 88 d0             	mov    r8b,dl
  239f3a:	c4 e2 b9 f7 c0       	shlx   rax,rax,r8
  239f3f:	f6 c2 40             	test   dl,0x40
  239f42:	48 0f 45 f8          	cmovne rdi,rax
  239f46:	48 0f 45 c6          	cmovne rax,rsi
  239f4a:	48 89 fa             	mov    rdx,rdi
  239f4d:	5d                   	pop    rbp
  239f4e:	c3                   	ret    
  239f4f:	90                   	nop

0000000000239f50 <__fixunstfsi>:
const fixuint = @import("fixuint.zig").fixuint;
const builtin = @import("builtin");

pub extern fn __fixunstfsi(a: f128) u32 {
  239f50:	55                   	push   rbp
  239f51:	48 89 e5             	mov    rbp,rsp
  239f54:	48 83 ec 10          	sub    rsp,0x10
  239f58:	0f 29 45 f0          	movaps XMMWORD PTR [rbp-0x10],xmm0
    @setRuntimeSafety(builtin.is_test);
    return fixuint(f128, u32, a);
  239f5c:	0f 28 45 f0          	movaps xmm0,XMMWORD PTR [rbp-0x10]
  239f60:	e8 0b 00 00 00       	call   239f70 <fixuint.11>
  239f65:	48 83 c4 10          	add    rsp,0x10
  239f69:	5d                   	pop    rbp
  239f6a:	c3                   	ret    
  239f6b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000239f70 <fixuint.11>:
pub fn fixuint(comptime fp_t: type, comptime fixuint_t: type, a: fp_t) fixuint_t {
  239f70:	55                   	push   rbp
  239f71:	48 89 e5             	mov    rbp,rsp
  239f74:	48 83 ec 20          	sub    rsp,0x20
  239f78:	0f 29 45 f0          	movaps XMMWORD PTR [rbp-0x10],xmm0
    const signBit = (rep_t(1) << (significandBits + exponentBits));
  239f7c:	48 b8 00 00 00 00 00 	movabs rax,0x8000000000000000
  239f83:	00 00 80 
  239f86:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  239f8a:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  239f91:	00 
    const implicitBit = (rep_t(1) << significandBits);
  239f92:	48 b8 00 00 00 00 00 	movabs rax,0x1000000000000
  239f99:	00 01 00 
  239f9c:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  239fa0:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
  239fa7:	00 
    const significandMask = (implicitBit - 1);
  239fa8:	48 b8 ff ff ff ff ff 	movabs rax,0xffffffffffff
  239faf:	ff 00 00 
  239fb2:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  239fb6:	48 c7 45 c0 ff ff ff 	mov    QWORD PTR [rbp-0x40],0xffffffffffffffff
  239fbd:	ff 
    const aRep: rep_t = @bitCast(rep_t, a);
  239fbe:	0f 28 45 f0          	movaps xmm0,XMMWORD PTR [rbp-0x10]
  239fc2:	0f 29 45 b0          	movaps XMMWORD PTR [rbp-0x50],xmm0
    const absMask = signBit - 1;
  239fc6:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffffffff
  239fcd:	ff ff 7f 
  239fd0:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  239fd4:	48 c7 45 a0 ff ff ff 	mov    QWORD PTR [rbp-0x60],0xffffffffffffffff
  239fdb:	ff 
    const aAbs: rep_t = aRep & absMask;
  239fdc:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  239fe0:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  239fe4:	b2 3f                	mov    dl,0x3f
  239fe6:	40 88 d6             	mov    sil,dl
  239fe9:	c4 e2 c8 f5 c9       	bzhi   rcx,rcx,rsi
  239fee:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  239ff2:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
    const sign = if ((aRep & signBit) != 0) i32(-1) else i32(1);
  239ff6:	8a 55 bf             	mov    dl,BYTE PTR [rbp-0x41]
  239ff9:	f6 c2 80             	test   dl,0x80
  239ffc:	74 0f                	je     23a00d <fixuint.11+0x9d>
  239ffe:	eb 00                	jmp    23a000 <fixuint.11+0x90>
  23a000:	b8 ff ff ff ff       	mov    eax,0xffffffff
  23a005:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
  23a00b:	eb 0d                	jmp    23a01a <fixuint.11+0xaa>
  23a00d:	b8 01 00 00 00       	mov    eax,0x1
  23a012:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
  23a018:	eb 00                	jmp    23a01a <fixuint.11+0xaa>
  23a01a:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
  23a020:	89 45 8c             	mov    DWORD PTR [rbp-0x74],eax
    const exponent = @intCast(i32, aAbs >> significandBits) - exponentBias;
  23a023:	0f b7 45 9e          	movzx  eax,WORD PTR [rbp-0x62]
  23a027:	05 01 c0 ff ff       	add    eax,0xffffc001
  23a02c:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
    const significand: rep_t = (aAbs & significandMask) | implicitBit;
  23a02f:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  23a033:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  23a037:	40 b6 30             	mov    sil,0x30
  23a03a:	40 88 f7             	mov    dil,sil
  23a03d:	c4 e2 c0 f5 d2       	bzhi   rdx,rdx,rdi
  23a042:	48 bf 00 00 00 00 00 	movabs rdi,0x1000000000000
  23a049:	00 01 00 
  23a04c:	48 09 fa             	or     rdx,rdi
  23a04f:	48 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rcx
  23a056:	48 89 55 80          	mov    QWORD PTR [rbp-0x80],rdx
    if (sign == -1 or exponent < 0) return 0;
  23a05a:	83 7d 8c ff          	cmp    DWORD PTR [rbp-0x74],0xffffffff
  23a05e:	40 0f 94 c6          	sete   sil
  23a062:	40 f6 c6 01          	test   sil,0x1
  23a066:	40 88 b5 73 ff ff ff 	mov    BYTE PTR [rbp-0x8d],sil
  23a06d:	75 0d                	jne    23a07c <fixuint.11+0x10c>
  23a06f:	83 7d 88 00          	cmp    DWORD PTR [rbp-0x78],0x0
  23a073:	0f 9c c0             	setl   al
  23a076:	88 85 73 ff ff ff    	mov    BYTE PTR [rbp-0x8d],al
  23a07c:	8a 85 73 ff ff ff    	mov    al,BYTE PTR [rbp-0x8d]
  23a082:	a8 01                	test   al,0x1
  23a084:	75 02                	jne    23a088 <fixuint.11+0x118>
  23a086:	eb 08                	jmp    23a090 <fixuint.11+0x120>
  23a088:	31 c0                	xor    eax,eax
  23a08a:	48 83 c4 20          	add    rsp,0x20
  23a08e:	5d                   	pop    rbp
  23a08f:	c3                   	ret    
  23a090:	eb 00                	jmp    23a092 <fixuint.11+0x122>
    if (@intCast(c_uint, exponent) >= fixuint_t.bit_count) return ~fixuint_t(0);
  23a092:	83 7d 88 20          	cmp    DWORD PTR [rbp-0x78],0x20
  23a096:	72 0b                	jb     23a0a3 <fixuint.11+0x133>
  23a098:	b8 ff ff ff ff       	mov    eax,0xffffffff
  23a09d:	48 83 c4 20          	add    rsp,0x20
  23a0a1:	5d                   	pop    rbp
  23a0a2:	c3                   	ret    
    if (exponent < significandBits) {
  23a0a3:	83 7d 88 70          	cmp    DWORD PTR [rbp-0x78],0x70
  23a0a7:	7d 47                	jge    23a0f0 <fixuint.11+0x180>
        return @intCast(fixuint_t, significand >> @intCast(Log2Int(rep_t), significandBits - exponent));
  23a0a9:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  23a0b0:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  23a0b4:	8b 55 88             	mov    edx,DWORD PTR [rbp-0x78]
  23a0b7:	be 70 00 00 00       	mov    esi,0x70
  23a0bc:	29 d6                	sub    esi,edx
  23a0be:	40 88 f7             	mov    dil,sil
  23a0c1:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
  23a0c8:	40 88 f9             	mov    cl,dil
  23a0cb:	4c 8b 85 68 ff ff ff 	mov    r8,QWORD PTR [rbp-0x98]
  23a0d2:	4c 0f ad c0          	shrd   rax,r8,cl
  23a0d6:	41 88 f9             	mov    r9b,dil
  23a0d9:	c4 42 b3 f7 c8       	shrx   r9,r8,r9
  23a0de:	40 f6 c7 40          	test   dil,0x40
  23a0e2:	49 0f 45 c1          	cmovne rax,r9
  23a0e6:	89 c2                	mov    edx,eax
  23a0e8:	89 d0                	mov    eax,edx
  23a0ea:	48 83 c4 20          	add    rsp,0x20
  23a0ee:	5d                   	pop    rbp
  23a0ef:	c3                   	ret    
        return @intCast(fixuint_t, significand) << @intCast(Log2Int(fixuint_t), exponent - significandBits);
  23a0f0:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
  23a0f6:	8b 4d 88             	mov    ecx,DWORD PTR [rbp-0x78]
  23a0f9:	83 c1 90             	add    ecx,0xffffff90
  23a0fc:	83 e1 1f             	and    ecx,0x1f
  23a0ff:	d3 e0                	shl    eax,cl
  23a101:	48 83 c4 20          	add    rsp,0x20
  23a105:	5d                   	pop    rbp
  23a106:	c3                   	ret    
  23a107:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  23a10e:	00 00 

000000000023a110 <__fixunstfdi>:
const fixuint = @import("fixuint.zig").fixuint;
const builtin = @import("builtin");

pub extern fn __fixunstfdi(a: f128) u64 {
  23a110:	55                   	push   rbp
  23a111:	48 89 e5             	mov    rbp,rsp
  23a114:	48 83 ec 10          	sub    rsp,0x10
  23a118:	0f 29 45 f0          	movaps XMMWORD PTR [rbp-0x10],xmm0
    @setRuntimeSafety(builtin.is_test);
    return fixuint(f128, u64, a);
  23a11c:	0f 28 45 f0          	movaps xmm0,XMMWORD PTR [rbp-0x10]
  23a120:	e8 0b 00 00 00       	call   23a130 <fixuint.12>
  23a125:	48 83 c4 10          	add    rsp,0x10
  23a129:	5d                   	pop    rbp
  23a12a:	c3                   	ret    
  23a12b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000023a130 <fixuint.12>:
pub fn fixuint(comptime fp_t: type, comptime fixuint_t: type, a: fp_t) fixuint_t {
  23a130:	55                   	push   rbp
  23a131:	48 89 e5             	mov    rbp,rsp
  23a134:	48 83 ec 20          	sub    rsp,0x20
  23a138:	0f 29 45 f0          	movaps XMMWORD PTR [rbp-0x10],xmm0
    const signBit = (rep_t(1) << (significandBits + exponentBits));
  23a13c:	48 b8 00 00 00 00 00 	movabs rax,0x8000000000000000
  23a143:	00 00 80 
  23a146:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  23a14a:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  23a151:	00 
    const implicitBit = (rep_t(1) << significandBits);
  23a152:	48 b8 00 00 00 00 00 	movabs rax,0x1000000000000
  23a159:	00 01 00 
  23a15c:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  23a160:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
  23a167:	00 
    const significandMask = (implicitBit - 1);
  23a168:	48 b8 ff ff ff ff ff 	movabs rax,0xffffffffffff
  23a16f:	ff 00 00 
  23a172:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  23a176:	48 c7 45 c0 ff ff ff 	mov    QWORD PTR [rbp-0x40],0xffffffffffffffff
  23a17d:	ff 
    const aRep: rep_t = @bitCast(rep_t, a);
  23a17e:	0f 28 45 f0          	movaps xmm0,XMMWORD PTR [rbp-0x10]
  23a182:	0f 29 45 b0          	movaps XMMWORD PTR [rbp-0x50],xmm0
    const absMask = signBit - 1;
  23a186:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffffffff
  23a18d:	ff ff 7f 
  23a190:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  23a194:	48 c7 45 a0 ff ff ff 	mov    QWORD PTR [rbp-0x60],0xffffffffffffffff
  23a19b:	ff 
    const aAbs: rep_t = aRep & absMask;
  23a19c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  23a1a0:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  23a1a4:	b2 3f                	mov    dl,0x3f
  23a1a6:	40 88 d6             	mov    sil,dl
  23a1a9:	c4 e2 c8 f5 c9       	bzhi   rcx,rcx,rsi
  23a1ae:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  23a1b2:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
    const sign = if ((aRep & signBit) != 0) i32(-1) else i32(1);
  23a1b6:	8a 55 bf             	mov    dl,BYTE PTR [rbp-0x41]
  23a1b9:	f6 c2 80             	test   dl,0x80
  23a1bc:	74 0f                	je     23a1cd <fixuint.12+0x9d>
  23a1be:	eb 00                	jmp    23a1c0 <fixuint.12+0x90>
  23a1c0:	b8 ff ff ff ff       	mov    eax,0xffffffff
  23a1c5:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
  23a1cb:	eb 0d                	jmp    23a1da <fixuint.12+0xaa>
  23a1cd:	b8 01 00 00 00       	mov    eax,0x1
  23a1d2:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
  23a1d8:	eb 00                	jmp    23a1da <fixuint.12+0xaa>
  23a1da:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
  23a1e0:	89 45 8c             	mov    DWORD PTR [rbp-0x74],eax
    const exponent = @intCast(i32, aAbs >> significandBits) - exponentBias;
  23a1e3:	0f b7 45 9e          	movzx  eax,WORD PTR [rbp-0x62]
  23a1e7:	05 01 c0 ff ff       	add    eax,0xffffc001
  23a1ec:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
    const significand: rep_t = (aAbs & significandMask) | implicitBit;
  23a1ef:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  23a1f3:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  23a1f7:	40 b6 30             	mov    sil,0x30
  23a1fa:	40 88 f7             	mov    dil,sil
  23a1fd:	c4 e2 c0 f5 d2       	bzhi   rdx,rdx,rdi
  23a202:	48 bf 00 00 00 00 00 	movabs rdi,0x1000000000000
  23a209:	00 01 00 
  23a20c:	48 09 fa             	or     rdx,rdi
  23a20f:	48 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rcx
  23a216:	48 89 55 80          	mov    QWORD PTR [rbp-0x80],rdx
    if (sign == -1 or exponent < 0) return 0;
  23a21a:	83 7d 8c ff          	cmp    DWORD PTR [rbp-0x74],0xffffffff
  23a21e:	40 0f 94 c6          	sete   sil
  23a222:	40 f6 c6 01          	test   sil,0x1
  23a226:	40 88 b5 73 ff ff ff 	mov    BYTE PTR [rbp-0x8d],sil
  23a22d:	75 0d                	jne    23a23c <fixuint.12+0x10c>
  23a22f:	83 7d 88 00          	cmp    DWORD PTR [rbp-0x78],0x0
  23a233:	0f 9c c0             	setl   al
  23a236:	88 85 73 ff ff ff    	mov    BYTE PTR [rbp-0x8d],al
  23a23c:	8a 85 73 ff ff ff    	mov    al,BYTE PTR [rbp-0x8d]
  23a242:	a8 01                	test   al,0x1
  23a244:	75 02                	jne    23a248 <fixuint.12+0x118>
  23a246:	eb 08                	jmp    23a250 <fixuint.12+0x120>
  23a248:	31 c0                	xor    eax,eax
  23a24a:	48 83 c4 20          	add    rsp,0x20
  23a24e:	5d                   	pop    rbp
  23a24f:	c3                   	ret    
  23a250:	eb 00                	jmp    23a252 <fixuint.12+0x122>
    if (@intCast(c_uint, exponent) >= fixuint_t.bit_count) return ~fixuint_t(0);
  23a252:	83 7d 88 40          	cmp    DWORD PTR [rbp-0x78],0x40
  23a256:	72 0d                	jb     23a265 <fixuint.12+0x135>
  23a258:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
  23a25f:	48 83 c4 20          	add    rsp,0x20
  23a263:	5d                   	pop    rbp
  23a264:	c3                   	ret    
    if (exponent < significandBits) {
  23a265:	83 7d 88 70          	cmp    DWORD PTR [rbp-0x78],0x70
  23a269:	7d 43                	jge    23a2ae <fixuint.12+0x17e>
        return @intCast(fixuint_t, significand >> @intCast(Log2Int(rep_t), significandBits - exponent));
  23a26b:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  23a272:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  23a276:	8b 55 88             	mov    edx,DWORD PTR [rbp-0x78]
  23a279:	be 70 00 00 00       	mov    esi,0x70
  23a27e:	29 d6                	sub    esi,edx
  23a280:	40 88 f7             	mov    dil,sil
  23a283:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
  23a28a:	40 88 f9             	mov    cl,dil
  23a28d:	4c 8b 85 68 ff ff ff 	mov    r8,QWORD PTR [rbp-0x98]
  23a294:	4c 0f ad c0          	shrd   rax,r8,cl
  23a298:	41 88 f9             	mov    r9b,dil
  23a29b:	c4 42 b3 f7 c8       	shrx   r9,r8,r9
  23a2a0:	40 f6 c7 40          	test   dil,0x40
  23a2a4:	49 0f 45 c1          	cmovne rax,r9
  23a2a8:	48 83 c4 20          	add    rsp,0x20
  23a2ac:	5d                   	pop    rbp
  23a2ad:	c3                   	ret    
        return @intCast(fixuint_t, significand) << @intCast(Log2Int(fixuint_t), exponent - significandBits);
  23a2ae:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  23a2b5:	8b 4d 88             	mov    ecx,DWORD PTR [rbp-0x78]
  23a2b8:	83 c1 90             	add    ecx,0xffffff90
  23a2bb:	83 e1 3f             	and    ecx,0x3f
  23a2be:	48 d3 e0             	shl    rax,cl
  23a2c1:	48 83 c4 20          	add    rsp,0x20
  23a2c5:	5d                   	pop    rbp
  23a2c6:	c3                   	ret    
  23a2c7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  23a2ce:	00 00 

000000000023a2d0 <__fixunstfti>:
const fixuint = @import("fixuint.zig").fixuint;
const builtin = @import("builtin");

pub extern fn __fixunstfti(a: f128) u128 {
  23a2d0:	55                   	push   rbp
  23a2d1:	48 89 e5             	mov    rbp,rsp
  23a2d4:	48 83 ec 10          	sub    rsp,0x10
  23a2d8:	0f 29 45 f0          	movaps XMMWORD PTR [rbp-0x10],xmm0
    @setRuntimeSafety(builtin.is_test);
    return fixuint(f128, u128, a);
  23a2dc:	0f 28 45 f0          	movaps xmm0,XMMWORD PTR [rbp-0x10]
  23a2e0:	e8 0b 00 00 00       	call   23a2f0 <fixuint.13>
  23a2e5:	48 83 c4 10          	add    rsp,0x10
  23a2e9:	5d                   	pop    rbp
  23a2ea:	c3                   	ret    
  23a2eb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000023a2f0 <fixuint.13>:
pub fn fixuint(comptime fp_t: type, comptime fixuint_t: type, a: fp_t) fixuint_t {
  23a2f0:	55                   	push   rbp
  23a2f1:	48 89 e5             	mov    rbp,rsp
  23a2f4:	48 83 ec 30          	sub    rsp,0x30
  23a2f8:	0f 29 45 f0          	movaps XMMWORD PTR [rbp-0x10],xmm0
    const signBit = (rep_t(1) << (significandBits + exponentBits));
  23a2fc:	48 b8 00 00 00 00 00 	movabs rax,0x8000000000000000
  23a303:	00 00 80 
  23a306:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  23a30a:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  23a311:	00 
    const implicitBit = (rep_t(1) << significandBits);
  23a312:	48 b8 00 00 00 00 00 	movabs rax,0x1000000000000
  23a319:	00 01 00 
  23a31c:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  23a320:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
  23a327:	00 
    const significandMask = (implicitBit - 1);
  23a328:	48 b8 ff ff ff ff ff 	movabs rax,0xffffffffffff
  23a32f:	ff 00 00 
  23a332:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  23a336:	48 c7 45 c0 ff ff ff 	mov    QWORD PTR [rbp-0x40],0xffffffffffffffff
  23a33d:	ff 
    const aRep: rep_t = @bitCast(rep_t, a);
  23a33e:	0f 28 45 f0          	movaps xmm0,XMMWORD PTR [rbp-0x10]
  23a342:	0f 29 45 b0          	movaps XMMWORD PTR [rbp-0x50],xmm0
    const absMask = signBit - 1;
  23a346:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffffffff
  23a34d:	ff ff 7f 
  23a350:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  23a354:	48 c7 45 a0 ff ff ff 	mov    QWORD PTR [rbp-0x60],0xffffffffffffffff
  23a35b:	ff 
    const aAbs: rep_t = aRep & absMask;
  23a35c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  23a360:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  23a364:	b2 3f                	mov    dl,0x3f
  23a366:	40 88 d6             	mov    sil,dl
  23a369:	c4 e2 c8 f5 c9       	bzhi   rcx,rcx,rsi
  23a36e:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  23a372:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
    const sign = if ((aRep & signBit) != 0) i32(-1) else i32(1);
  23a376:	8a 55 bf             	mov    dl,BYTE PTR [rbp-0x41]
  23a379:	f6 c2 80             	test   dl,0x80
  23a37c:	74 0f                	je     23a38d <fixuint.13+0x9d>
  23a37e:	eb 00                	jmp    23a380 <fixuint.13+0x90>
  23a380:	b8 ff ff ff ff       	mov    eax,0xffffffff
  23a385:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
  23a38b:	eb 0d                	jmp    23a39a <fixuint.13+0xaa>
  23a38d:	b8 01 00 00 00       	mov    eax,0x1
  23a392:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
  23a398:	eb 00                	jmp    23a39a <fixuint.13+0xaa>
  23a39a:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
  23a3a0:	89 45 8c             	mov    DWORD PTR [rbp-0x74],eax
    const exponent = @intCast(i32, aAbs >> significandBits) - exponentBias;
  23a3a3:	0f b7 45 9e          	movzx  eax,WORD PTR [rbp-0x62]
  23a3a7:	05 01 c0 ff ff       	add    eax,0xffffc001
  23a3ac:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
    const significand: rep_t = (aAbs & significandMask) | implicitBit;
  23a3af:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  23a3b3:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  23a3b7:	40 b6 30             	mov    sil,0x30
  23a3ba:	40 88 f7             	mov    dil,sil
  23a3bd:	c4 e2 c0 f5 d2       	bzhi   rdx,rdx,rdi
  23a3c2:	48 bf 00 00 00 00 00 	movabs rdi,0x1000000000000
  23a3c9:	00 01 00 
  23a3cc:	48 09 fa             	or     rdx,rdi
  23a3cf:	48 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rcx
  23a3d6:	48 89 55 80          	mov    QWORD PTR [rbp-0x80],rdx
    if (sign == -1 or exponent < 0) return 0;
  23a3da:	83 7d 8c ff          	cmp    DWORD PTR [rbp-0x74],0xffffffff
  23a3de:	40 0f 94 c6          	sete   sil
  23a3e2:	40 f6 c6 01          	test   sil,0x1
  23a3e6:	40 88 b5 73 ff ff ff 	mov    BYTE PTR [rbp-0x8d],sil
  23a3ed:	75 0d                	jne    23a3fc <fixuint.13+0x10c>
  23a3ef:	83 7d 88 00          	cmp    DWORD PTR [rbp-0x78],0x0
  23a3f3:	0f 9c c0             	setl   al
  23a3f6:	88 85 73 ff ff ff    	mov    BYTE PTR [rbp-0x8d],al
  23a3fc:	8a 85 73 ff ff ff    	mov    al,BYTE PTR [rbp-0x8d]
  23a402:	a8 01                	test   al,0x1
  23a404:	75 02                	jne    23a408 <fixuint.13+0x118>
  23a406:	eb 10                	jmp    23a418 <fixuint.13+0x128>
  23a408:	31 c0                	xor    eax,eax
  23a40a:	89 c1                	mov    ecx,eax
  23a40c:	48 89 c8             	mov    rax,rcx
  23a40f:	48 89 ca             	mov    rdx,rcx
  23a412:	48 83 c4 30          	add    rsp,0x30
  23a416:	5d                   	pop    rbp
  23a417:	c3                   	ret    
  23a418:	eb 00                	jmp    23a41a <fixuint.13+0x12a>
    if (@intCast(c_uint, exponent) >= fixuint_t.bit_count) return ~fixuint_t(0);
  23a41a:	81 7d 88 80 00 00 00 	cmp    DWORD PTR [rbp-0x78],0x80
  23a421:	72 1b                	jb     23a43e <fixuint.13+0x14e>
  23a423:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
  23a42a:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  23a431:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  23a438:	48 83 c4 30          	add    rsp,0x30
  23a43c:	5d                   	pop    rbp
  23a43d:	c3                   	ret    
    if (exponent < significandBits) {
  23a43e:	83 7d 88 70          	cmp    DWORD PTR [rbp-0x78],0x70
  23a442:	7d 4f                	jge    23a493 <fixuint.13+0x1a3>
        return @intCast(fixuint_t, significand >> @intCast(Log2Int(rep_t), significandBits - exponent));
  23a444:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  23a44b:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  23a44f:	8b 55 88             	mov    edx,DWORD PTR [rbp-0x78]
  23a452:	be 70 00 00 00       	mov    esi,0x70
  23a457:	29 d6                	sub    esi,edx
  23a459:	40 88 f7             	mov    dil,sil
  23a45c:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
  23a463:	40 88 f9             	mov    cl,dil
  23a466:	4c 8b 85 60 ff ff ff 	mov    r8,QWORD PTR [rbp-0xa0]
  23a46d:	4c 0f ad c0          	shrd   rax,r8,cl
  23a471:	41 88 f9             	mov    r9b,dil
  23a474:	c4 42 b3 f7 c8       	shrx   r9,r8,r9
  23a479:	31 d2                	xor    edx,edx
  23a47b:	40 f6 c7 40          	test   dil,0x40
  23a47f:	49 0f 45 c1          	cmovne rax,r9
  23a483:	41 89 d2             	mov    r10d,edx
  23a486:	4d 0f 45 ca          	cmovne r9,r10
  23a48a:	4c 89 ca             	mov    rdx,r9
  23a48d:	48 83 c4 30          	add    rsp,0x30
  23a491:	5d                   	pop    rbp
  23a492:	c3                   	ret    
        return @intCast(fixuint_t, significand) << @intCast(Log2Int(fixuint_t), exponent - significandBits);
  23a493:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  23a49a:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
  23a49e:	8b 55 88             	mov    edx,DWORD PTR [rbp-0x78]
  23a4a1:	83 c2 90             	add    edx,0xffffff90
  23a4a4:	40 88 d6             	mov    sil,dl
  23a4a7:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
  23a4ae:	40 88 f1             	mov    cl,sil
  23a4b1:	48 8b bd 58 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  23a4b8:	48 0f a5 c7          	shld   rdi,rax,cl
  23a4bc:	41 88 f0             	mov    r8b,sil
  23a4bf:	c4 e2 b9 f7 c0       	shlx   rax,rax,r8
  23a4c4:	31 d2                	xor    edx,edx
  23a4c6:	40 f6 c6 40          	test   sil,0x40
  23a4ca:	48 0f 45 f8          	cmovne rdi,rax
  23a4ce:	41 89 d0             	mov    r8d,edx
  23a4d1:	49 0f 45 c0          	cmovne rax,r8
  23a4d5:	48 89 fa             	mov    rdx,rdi
  23a4d8:	48 83 c4 30          	add    rsp,0x30
  23a4dc:	5d                   	pop    rbp
  23a4dd:	c3                   	ret    
  23a4de:	66 90                	xchg   ax,ax

000000000023a4e0 <udivmod>:
    builtin.Endian.Big => 1,
    builtin.Endian.Little => 0,
};
const high = 1 - low;

pub fn udivmod(comptime DoubleInt: type, a: DoubleInt, b: DoubleInt, maybe_rem: ?*DoubleInt) DoubleInt {
  23a4e0:	55                   	push   rbp
  23a4e1:	48 89 e5             	mov    rbp,rsp
  23a4e4:	48 83 ec 40          	sub    rsp,0x40
  23a4e8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  23a4ec:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  23a4f0:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx

    const SingleInt = @IntType(false, @divExact(DoubleInt.bit_count, 2));
    const SignedDoubleInt = @IntType(true, DoubleInt.bit_count);
    const Log2SingleInt = @import("std").math.Log2Int(SingleInt);

    const n = @ptrCast(*const [2]SingleInt, &a).*; // TODO issue #421
  23a4f4:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  23a4f8:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
    const d = @ptrCast(*const [2]SingleInt, &b).*; // TODO issue #421
  23a4fc:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  23a500:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
    var q: [2]SingleInt = undefined;
  23a504:	48 8b 15 6d 67 fc ff 	mov    rdx,QWORD PTR [rip+0xfffffffffffc676d]        # 200c78 <__unnamed_132>
  23a50b:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
    var r: [2]SingleInt = undefined;
  23a50f:	48 8b 15 62 67 fc ff 	mov    rdx,QWORD PTR [rip+0xfffffffffffc6762]        # 200c78 <__unnamed_132>
  23a516:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
    var sr: c_uint = undefined;
    // special cases, X is unknown, K != 0
    if (n[high] == 0) {
  23a51a:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
  23a51e:	75 75                	jne    23a595 <udivmod+0xb5>
        if (d[high] == 0) {
  23a520:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
  23a524:	75 46                	jne    23a56c <udivmod+0x8c>
            // 0 X
            // ---
            // 0 X
            if (maybe_rem) |rem| {
  23a526:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
  23a52b:	74 2d                	je     23a55a <udivmod+0x7a>
  23a52d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  23a531:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
                rem.* = n[low] % d[low];
  23a535:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  23a539:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
  23a53c:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
  23a543:	89 c8                	mov    eax,ecx
  23a545:	31 d2                	xor    edx,edx
  23a547:	f7 75 d8             	div    DWORD PTR [rbp-0x28]
  23a54a:	89 d1                	mov    ecx,edx
  23a54c:	89 ce                	mov    esi,ecx
  23a54e:	48 8b bd 50 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb0]
  23a555:	48 89 37             	mov    QWORD PTR [rdi],rsi
            if (maybe_rem) |rem| {
  23a558:	eb 02                	jmp    23a55c <udivmod+0x7c>
  23a55a:	eb 00                	jmp    23a55c <udivmod+0x7c>
            }
            return n[low] / d[low];
  23a55c:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  23a55f:	31 d2                	xor    edx,edx
  23a561:	f7 75 d8             	div    DWORD PTR [rbp-0x28]
  23a564:	89 c0                	mov    eax,eax
  23a566:	48 83 c4 40          	add    rsp,0x40
  23a56a:	5d                   	pop    rbp
  23a56b:	c3                   	ret    
        if (d[high] == 0) {
  23a56c:	eb 00                	jmp    23a56e <udivmod+0x8e>
        }
        // 0 X
        // ---
        // K X
        if (maybe_rem) |rem| {
  23a56e:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
  23a573:	74 16                	je     23a58b <udivmod+0xab>
  23a575:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  23a579:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
            rem.* = n[low];
  23a57d:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  23a581:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
  23a584:	89 ca                	mov    edx,ecx
  23a586:	48 89 10             	mov    QWORD PTR [rax],rdx
        if (maybe_rem) |rem| {
  23a589:	eb 02                	jmp    23a58d <udivmod+0xad>
  23a58b:	eb 00                	jmp    23a58d <udivmod+0xad>
  23a58d:	31 c0                	xor    eax,eax
        }
        return 0;
  23a58f:	48 83 c4 40          	add    rsp,0x40
  23a593:	5d                   	pop    rbp
  23a594:	c3                   	ret    
    if (n[high] == 0) {
  23a595:	eb 00                	jmp    23a597 <udivmod+0xb7>
    }
    // n[high] != 0
    if (d[low] == 0) {
  23a597:	83 7d d8 00          	cmp    DWORD PTR [rbp-0x28],0x0
  23a59b:	0f 85 9e 01 00 00    	jne    23a73f <udivmod+0x25f>
        if (d[high] == 0) {
  23a5a1:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
  23a5a5:	75 46                	jne    23a5ed <udivmod+0x10d>
            // K X
            // ---
            // 0 0
            if (maybe_rem) |rem| {
  23a5a7:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
  23a5ac:	74 2d                	je     23a5db <udivmod+0xfb>
  23a5ae:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  23a5b2:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
                rem.* = n[high] % d[low];
  23a5b6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  23a5ba:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
  23a5bd:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
  23a5c4:	89 c8                	mov    eax,ecx
  23a5c6:	31 d2                	xor    edx,edx
  23a5c8:	f7 75 d8             	div    DWORD PTR [rbp-0x28]
  23a5cb:	89 d1                	mov    ecx,edx
  23a5cd:	89 ce                	mov    esi,ecx
  23a5cf:	48 8b bd 48 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb8]
  23a5d6:	48 89 37             	mov    QWORD PTR [rdi],rsi
            if (maybe_rem) |rem| {
  23a5d9:	eb 02                	jmp    23a5dd <udivmod+0xfd>
  23a5db:	eb 00                	jmp    23a5dd <udivmod+0xfd>
            }
            return n[high] / d[low];
  23a5dd:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  23a5e0:	31 d2                	xor    edx,edx
  23a5e2:	f7 75 d8             	div    DWORD PTR [rbp-0x28]
  23a5e5:	89 c0                	mov    eax,eax
  23a5e7:	48 83 c4 40          	add    rsp,0x40
  23a5eb:	5d                   	pop    rbp
  23a5ec:	c3                   	ret    
        if (d[high] == 0) {
  23a5ed:	eb 00                	jmp    23a5ef <udivmod+0x10f>
        }
        // d[high] != 0
        if (n[low] == 0) {
  23a5ef:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
  23a5f3:	75 40                	jne    23a635 <udivmod+0x155>
            // K 0
            // ---
            // K 0
            if (maybe_rem) |rem| {
  23a5f5:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
  23a5fa:	74 27                	je     23a623 <udivmod+0x143>
  23a5fc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  23a600:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
                r[high] = n[high] % d[high];
  23a604:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  23a607:	31 d2                	xor    edx,edx
  23a609:	f7 75 dc             	div    DWORD PTR [rbp-0x24]
  23a60c:	89 55 cc             	mov    DWORD PTR [rbp-0x34],edx
                r[low] = 0;
  23a60f:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [rbp-0x38],0x0
                rem.* = @ptrCast(*align(@alignOf(SingleInt)) DoubleInt, &r[0]).*; // TODO issue #421
  23a616:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  23a61a:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  23a61e:	48 89 31             	mov    QWORD PTR [rcx],rsi
            if (maybe_rem) |rem| {
  23a621:	eb 02                	jmp    23a625 <udivmod+0x145>
  23a623:	eb 00                	jmp    23a625 <udivmod+0x145>
            }
            return n[high] / d[high];
  23a625:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  23a628:	31 d2                	xor    edx,edx
  23a62a:	f7 75 dc             	div    DWORD PTR [rbp-0x24]
  23a62d:	89 c0                	mov    eax,eax
  23a62f:	48 83 c4 40          	add    rsp,0x40
  23a633:	5d                   	pop    rbp
  23a634:	c3                   	ret    
        if (n[low] == 0) {
  23a635:	eb 00                	jmp    23a637 <udivmod+0x157>
        }
        // K K
        // ---
        // K 0
        if ((d[high] & (d[high] - 1)) == 0) {
  23a637:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  23a63a:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
  23a63d:	83 e9 01             	sub    ecx,0x1
  23a640:	21 c8                	and    eax,ecx
  23a642:	83 f8 00             	cmp    eax,0x0
  23a645:	75 47                	jne    23a68e <udivmod+0x1ae>
            // d is a power of 2
            if (maybe_rem) |rem| {
  23a647:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
  23a64c:	74 29                	je     23a677 <udivmod+0x197>
  23a64e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  23a652:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
                r[low] = n[low];
  23a656:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
  23a659:	89 4d c8             	mov    DWORD PTR [rbp-0x38],ecx
                r[high] = n[high] & (d[high] - 1);
  23a65c:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
  23a65f:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  23a662:	83 ea 01             	sub    edx,0x1
  23a665:	21 d1                	and    ecx,edx
  23a667:	89 4d cc             	mov    DWORD PTR [rbp-0x34],ecx
                rem.* = @ptrCast(*align(@alignOf(SingleInt)) DoubleInt, &r[0]).*; // TODO issue #421
  23a66a:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  23a66e:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  23a672:	48 89 30             	mov    QWORD PTR [rax],rsi
            if (maybe_rem) |rem| {
  23a675:	eb 02                	jmp    23a679 <udivmod+0x199>
  23a677:	eb 00                	jmp    23a679 <udivmod+0x199>
            }
            return n[high] >> @intCast(Log2SingleInt, @ctz(d[high]));
  23a679:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  23a67c:	f3 0f bc 4d dc       	tzcnt  ecx,DWORD PTR [rbp-0x24]
  23a681:	83 e1 1f             	and    ecx,0x1f
  23a684:	d3 e8                	shr    eax,cl
  23a686:	89 c0                	mov    eax,eax
  23a688:	48 83 c4 40          	add    rsp,0x40
  23a68c:	5d                   	pop    rbp
  23a68d:	c3                   	ret    
        if ((d[high] & (d[high] - 1)) == 0) {
  23a68e:	eb 00                	jmp    23a690 <udivmod+0x1b0>
        }
        // K K
        // ---
        // K 0
        sr = @bitCast(c_uint, c_int(@clz(d[high])) - c_int(@clz(n[high])));
  23a690:	f3 0f bd 45 dc       	lzcnt  eax,DWORD PTR [rbp-0x24]
  23a695:	f3 0f bd 4d e4       	lzcnt  ecx,DWORD PTR [rbp-0x1c]
  23a69a:	29 c8                	sub    eax,ecx
  23a69c:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
        // 0 <= sr <= SingleInt.bit_count - 2 or sr large
        if (sr > SingleInt.bit_count - 2) {
  23a69f:	83 7d c4 1e          	cmp    DWORD PTR [rbp-0x3c],0x1e
  23a6a3:	76 26                	jbe    23a6cb <udivmod+0x1eb>
            if (maybe_rem) |rem| {
  23a6a5:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
  23a6aa:	74 15                	je     23a6c1 <udivmod+0x1e1>
  23a6ac:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  23a6b0:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
                rem.* = a;
  23a6b4:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  23a6b8:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  23a6bc:	48 89 08             	mov    QWORD PTR [rax],rcx
            if (maybe_rem) |rem| {
  23a6bf:	eb 02                	jmp    23a6c3 <udivmod+0x1e3>
  23a6c1:	eb 00                	jmp    23a6c3 <udivmod+0x1e3>
  23a6c3:	31 c0                	xor    eax,eax
            }
            return 0;
  23a6c5:	48 83 c4 40          	add    rsp,0x40
  23a6c9:	5d                   	pop    rbp
  23a6ca:	c3                   	ret    
        if (sr > SingleInt.bit_count - 2) {
  23a6cb:	eb 00                	jmp    23a6cd <udivmod+0x1ed>
        }
        sr += 1;
  23a6cd:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
  23a6d0:	83 c0 01             	add    eax,0x1
  23a6d3:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
        // 1 <= sr <= SingleInt.bit_count - 1
        // q.all = a << (DoubleInt.bit_count - sr);
        q[low] = 0;
  23a6d6:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
        q[high] = n[low] << @intCast(Log2SingleInt, SingleInt.bit_count - sr);
  23a6dd:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  23a6e0:	8b 4d c4             	mov    ecx,DWORD PTR [rbp-0x3c]
  23a6e3:	ba 20 00 00 00       	mov    edx,0x20
  23a6e8:	89 d6                	mov    esi,edx
  23a6ea:	29 ce                	sub    esi,ecx
  23a6ec:	40 88 f7             	mov    dil,sil
  23a6ef:	40 88 f9             	mov    cl,dil
  23a6f2:	c4 e2 71 f7 c0       	shlx   eax,eax,ecx
  23a6f7:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
        // r.all = a >> sr;
        r[high] = n[high] >> @intCast(Log2SingleInt, sr);
  23a6fa:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  23a6fd:	40 8a 7d c4          	mov    dil,BYTE PTR [rbp-0x3c]
  23a701:	40 88 f9             	mov    cl,dil
  23a704:	c4 e2 73 f7 c0       	shrx   eax,eax,ecx
  23a709:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
        r[low] = (n[high] << @intCast(Log2SingleInt, SingleInt.bit_count - sr)) | (n[low] >> @intCast(Log2SingleInt, sr));
  23a70c:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  23a70f:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
  23a712:	8b 75 c4             	mov    esi,DWORD PTR [rbp-0x3c]
  23a715:	29 f2                	sub    edx,esi
  23a717:	40 88 d7             	mov    dil,dl
  23a71a:	40 88 fa             	mov    dl,dil
  23a71d:	c4 e2 69 f7 c9       	shlx   ecx,ecx,edx
  23a722:	83 e6 1f             	and    esi,0x1f
  23a725:	89 8d 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],ecx
  23a72b:	89 f1                	mov    ecx,esi
  23a72d:	d3 e8                	shr    eax,cl
  23a72f:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
  23a735:	09 c2                	or     edx,eax
  23a737:	89 55 c8             	mov    DWORD PTR [rbp-0x38],edx
    if (d[low] == 0) {
  23a73a:	e9 69 02 00 00       	jmp    23a9a8 <udivmod+0x4c8>
    } else {
        // d[low] != 0
        if (d[high] == 0) {
  23a73f:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
  23a743:	0f 85 a2 01 00 00    	jne    23a8eb <udivmod+0x40b>
            // K X
            // ---
            // 0 K
            if ((d[low] & (d[low] - 1)) == 0) {
  23a749:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  23a74c:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
  23a74f:	83 e9 01             	sub    ecx,0x1
  23a752:	21 c8                	and    eax,ecx
  23a754:	83 f8 00             	cmp    eax,0x0
  23a757:	0f 85 84 00 00 00    	jne    23a7e1 <udivmod+0x301>
                // d is a power of 2
                if (maybe_rem) |rem| {
  23a75d:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
  23a762:	74 20                	je     23a784 <udivmod+0x2a4>
  23a764:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  23a768:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
                    rem.* = n[low] & (d[low] - 1);
  23a76c:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  23a770:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
  23a773:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
  23a776:	83 ea 01             	sub    edx,0x1
  23a779:	21 d1                	and    ecx,edx
  23a77b:	89 c9                	mov    ecx,ecx
  23a77d:	89 ce                	mov    esi,ecx
  23a77f:	48 89 30             	mov    QWORD PTR [rax],rsi
                if (maybe_rem) |rem| {
  23a782:	eb 02                	jmp    23a786 <udivmod+0x2a6>
  23a784:	eb 00                	jmp    23a786 <udivmod+0x2a6>
                }
                if (d[low] == 1) {
  23a786:	83 7d d8 01          	cmp    DWORD PTR [rbp-0x28],0x1
  23a78a:	75 0a                	jne    23a796 <udivmod+0x2b6>
                    return a;
  23a78c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  23a790:	48 83 c4 40          	add    rsp,0x40
  23a794:	5d                   	pop    rbp
  23a795:	c3                   	ret    
                if (d[low] == 1) {
  23a796:	eb 00                	jmp    23a798 <udivmod+0x2b8>
                }
                sr = @ctz(d[low]);
  23a798:	f3 0f bc 45 d8       	tzcnt  eax,DWORD PTR [rbp-0x28]
  23a79d:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
                q[high] = n[high] >> @intCast(Log2SingleInt, sr);
  23a7a0:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  23a7a3:	8a 4d c4             	mov    cl,BYTE PTR [rbp-0x3c]
  23a7a6:	88 ca                	mov    dl,cl
  23a7a8:	c4 e2 6b f7 c0       	shrx   eax,eax,edx
  23a7ad:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
                q[low] = (n[high] << @intCast(Log2SingleInt, SingleInt.bit_count - sr)) | (n[low] >> @intCast(Log2SingleInt, sr));
  23a7b0:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  23a7b3:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
  23a7b6:	8b 75 c4             	mov    esi,DWORD PTR [rbp-0x3c]
  23a7b9:	bf 20 00 00 00       	mov    edi,0x20
  23a7be:	29 f7                	sub    edi,esi
  23a7c0:	40 88 f9             	mov    cl,dil
  23a7c3:	40 88 cf             	mov    dil,cl
  23a7c6:	c4 e2 41 f7 d2       	shlx   edx,edx,edi
  23a7cb:	83 e6 1f             	and    esi,0x1f
  23a7ce:	89 f1                	mov    ecx,esi
  23a7d0:	d3 e8                	shr    eax,cl
  23a7d2:	09 c2                	or     edx,eax
  23a7d4:	89 55 d0             	mov    DWORD PTR [rbp-0x30],edx
                return @ptrCast(*align(@alignOf(SingleInt)) DoubleInt, &q[0]).*; // TODO issue #421
  23a7d7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23a7db:	48 83 c4 40          	add    rsp,0x40
  23a7df:	5d                   	pop    rbp
  23a7e0:	c3                   	ret    
            if ((d[low] & (d[low] - 1)) == 0) {
  23a7e1:	eb 00                	jmp    23a7e3 <udivmod+0x303>
            }
            // K X
            // ---
            // 0 K
            sr = 1 + SingleInt.bit_count + c_uint(@clz(d[low])) - c_uint(@clz(n[high]));
  23a7e3:	f3 0f bd 45 d8       	lzcnt  eax,DWORD PTR [rbp-0x28]
  23a7e8:	83 c0 21             	add    eax,0x21
  23a7eb:	f3 0f bd 4d e4       	lzcnt  ecx,DWORD PTR [rbp-0x1c]
  23a7f0:	29 c8                	sub    eax,ecx
  23a7f2:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
            // 2 <= sr <= DoubleInt.bit_count - 1
            // q.all = a << (DoubleInt.bit_count - sr);
            // r.all = a >> sr;
            if (sr == SingleInt.bit_count) {
  23a7f5:	83 7d c4 20          	cmp    DWORD PTR [rbp-0x3c],0x20
  23a7f9:	75 1f                	jne    23a81a <udivmod+0x33a>
                q[low] = 0;
  23a7fb:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
                q[high] = n[low];
  23a802:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  23a805:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
                r[high] = 0;
  23a808:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
                r[low] = n[high];
  23a80f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  23a812:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
            if (sr == SingleInt.bit_count) {
  23a815:	e9 cc 00 00 00       	jmp    23a8e6 <udivmod+0x406>
            } else if (sr < SingleInt.bit_count) {
  23a81a:	83 7d c4 20          	cmp    DWORD PTR [rbp-0x3c],0x20
  23a81e:	73 66                	jae    23a886 <udivmod+0x3a6>
                // 2 <= sr <= SingleInt.bit_count - 1
                q[low] = 0;
  23a820:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
                q[high] = n[low] << @intCast(Log2SingleInt, SingleInt.bit_count - sr);
  23a827:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  23a82a:	8b 4d c4             	mov    ecx,DWORD PTR [rbp-0x3c]
  23a82d:	ba 20 00 00 00       	mov    edx,0x20
  23a832:	89 d6                	mov    esi,edx
  23a834:	29 ce                	sub    esi,ecx
  23a836:	40 88 f7             	mov    dil,sil
  23a839:	40 88 f9             	mov    cl,dil
  23a83c:	c4 e2 71 f7 c0       	shlx   eax,eax,ecx
  23a841:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
                r[high] = n[high] >> @intCast(Log2SingleInt, sr);
  23a844:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  23a847:	40 8a 7d c4          	mov    dil,BYTE PTR [rbp-0x3c]
  23a84b:	40 88 f9             	mov    cl,dil
  23a84e:	c4 e2 73 f7 c0       	shrx   eax,eax,ecx
  23a853:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
                r[low] = (n[high] << @intCast(Log2SingleInt, SingleInt.bit_count - sr)) | (n[low] >> @intCast(Log2SingleInt, sr));
  23a856:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  23a859:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
  23a85c:	8b 75 c4             	mov    esi,DWORD PTR [rbp-0x3c]
  23a85f:	29 f2                	sub    edx,esi
  23a861:	40 88 d7             	mov    dil,dl
  23a864:	40 88 fa             	mov    dl,dil
  23a867:	c4 e2 69 f7 c9       	shlx   ecx,ecx,edx
  23a86c:	83 e6 1f             	and    esi,0x1f
  23a86f:	89 8d 40 ff ff ff    	mov    DWORD PTR [rbp-0xc0],ecx
  23a875:	89 f1                	mov    ecx,esi
  23a877:	d3 e8                	shr    eax,cl
  23a879:	8b 95 40 ff ff ff    	mov    edx,DWORD PTR [rbp-0xc0]
  23a87f:	09 c2                	or     edx,eax
  23a881:	89 55 c8             	mov    DWORD PTR [rbp-0x38],edx
            } else if (sr < SingleInt.bit_count) {
  23a884:	eb 5e                	jmp    23a8e4 <udivmod+0x404>
            } else {
                // SingleInt.bit_count + 1 <= sr <= DoubleInt.bit_count - 1
                q[low] = n[low] << @intCast(Log2SingleInt, DoubleInt.bit_count - sr);
  23a886:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  23a889:	8b 4d c4             	mov    ecx,DWORD PTR [rbp-0x3c]
  23a88c:	ba 40 00 00 00       	mov    edx,0x40
  23a891:	89 d6                	mov    esi,edx
  23a893:	29 ce                	sub    esi,ecx
  23a895:	40 88 f7             	mov    dil,sil
  23a898:	40 88 f9             	mov    cl,dil
  23a89b:	c4 e2 71 f7 c0       	shlx   eax,eax,ecx
  23a8a0:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
                q[high] = (n[high] << @intCast(Log2SingleInt, DoubleInt.bit_count - sr)) | (n[low] >> @intCast(Log2SingleInt, sr - SingleInt.bit_count));
  23a8a3:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  23a8a6:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
  23a8a9:	8b 75 c4             	mov    esi,DWORD PTR [rbp-0x3c]
  23a8ac:	29 f2                	sub    edx,esi
  23a8ae:	40 88 d7             	mov    dil,dl
  23a8b1:	40 88 fa             	mov    dl,dil
  23a8b4:	c4 e2 69 f7 c9       	shlx   ecx,ecx,edx
  23a8b9:	83 c6 e0             	add    esi,0xffffffe0
  23a8bc:	40 88 f7             	mov    dil,sil
  23a8bf:	40 88 fa             	mov    dl,dil
  23a8c2:	c4 e2 6b f7 c0       	shrx   eax,eax,edx
  23a8c7:	09 c1                	or     ecx,eax
  23a8c9:	89 4d d4             	mov    DWORD PTR [rbp-0x2c],ecx
                r[high] = 0;
  23a8cc:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
                r[low] = n[high] >> @intCast(Log2SingleInt, sr - SingleInt.bit_count);
  23a8d3:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  23a8d6:	8b 4d c4             	mov    ecx,DWORD PTR [rbp-0x3c]
  23a8d9:	83 c1 e0             	add    ecx,0xffffffe0
  23a8dc:	83 e1 1f             	and    ecx,0x1f
  23a8df:	d3 e8                	shr    eax,cl
  23a8e1:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
            if (sr == SingleInt.bit_count) {
  23a8e4:	eb 00                	jmp    23a8e6 <udivmod+0x406>
        if (d[high] == 0) {
  23a8e6:	e9 bb 00 00 00       	jmp    23a9a6 <udivmod+0x4c6>
            }
        } else {
            // K X
            // ---
            // K K
            sr = @bitCast(c_uint, c_int(@clz(d[high])) - c_int(@clz(n[high])));
  23a8eb:	f3 0f bd 45 dc       	lzcnt  eax,DWORD PTR [rbp-0x24]
  23a8f0:	f3 0f bd 4d e4       	lzcnt  ecx,DWORD PTR [rbp-0x1c]
  23a8f5:	29 c8                	sub    eax,ecx
  23a8f7:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
            // 0 <= sr <= SingleInt.bit_count - 1 or sr large
            if (sr > SingleInt.bit_count - 1) {
  23a8fa:	83 7d c4 1f          	cmp    DWORD PTR [rbp-0x3c],0x1f
  23a8fe:	76 26                	jbe    23a926 <udivmod+0x446>
                if (maybe_rem) |rem| {
  23a900:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
  23a905:	74 15                	je     23a91c <udivmod+0x43c>
  23a907:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  23a90b:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
                    rem.* = a;
  23a90f:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  23a913:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  23a917:	48 89 08             	mov    QWORD PTR [rax],rcx
                if (maybe_rem) |rem| {
  23a91a:	eb 02                	jmp    23a91e <udivmod+0x43e>
  23a91c:	eb 00                	jmp    23a91e <udivmod+0x43e>
  23a91e:	31 c0                	xor    eax,eax
                }
                return 0;
  23a920:	48 83 c4 40          	add    rsp,0x40
  23a924:	5d                   	pop    rbp
  23a925:	c3                   	ret    
            if (sr > SingleInt.bit_count - 1) {
  23a926:	eb 00                	jmp    23a928 <udivmod+0x448>
            }
            sr += 1;
  23a928:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
  23a92b:	83 c0 01             	add    eax,0x1
  23a92e:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
            // 1 <= sr <= SingleInt.bit_count
            // q.all = a << (DoubleInt.bit_count - sr);
            // r.all = a >> sr;
            q[low] = 0;
  23a931:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
            if (sr == SingleInt.bit_count) {
  23a938:	83 7d c4 20          	cmp    DWORD PTR [rbp-0x3c],0x20
  23a93c:	75 15                	jne    23a953 <udivmod+0x473>
                q[high] = n[low];
  23a93e:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  23a941:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
                r[high] = 0;
  23a944:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
                r[low] = n[high];
  23a94b:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  23a94e:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
            if (sr == SingleInt.bit_count) {
  23a951:	eb 51                	jmp    23a9a4 <udivmod+0x4c4>
            } else {
                r[high] = n[high] >> @intCast(Log2SingleInt, sr);
  23a953:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  23a956:	8a 4d c4             	mov    cl,BYTE PTR [rbp-0x3c]
  23a959:	88 ca                	mov    dl,cl
  23a95b:	c4 e2 6b f7 c0       	shrx   eax,eax,edx
  23a960:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
                r[low] = (n[high] << @intCast(Log2SingleInt, SingleInt.bit_count - sr)) | (n[low] >> @intCast(Log2SingleInt, sr));
  23a963:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  23a966:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
  23a969:	8b 75 c4             	mov    esi,DWORD PTR [rbp-0x3c]
  23a96c:	bf 20 00 00 00       	mov    edi,0x20
  23a971:	41 89 f8             	mov    r8d,edi
  23a974:	41 29 f0             	sub    r8d,esi
  23a977:	44 88 c1             	mov    cl,r8b
  23a97a:	41 88 c8             	mov    r8b,cl
  23a97d:	c4 e2 39 f7 d2       	shlx   edx,edx,r8d
  23a982:	40 88 f1             	mov    cl,sil
  23a985:	40 88 ce             	mov    sil,cl
  23a988:	c4 e2 4b f7 c0       	shrx   eax,eax,esi
  23a98d:	09 c2                	or     edx,eax
  23a98f:	89 55 c8             	mov    DWORD PTR [rbp-0x38],edx
                q[high] = n[low] << @intCast(Log2SingleInt, SingleInt.bit_count - sr);
  23a992:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  23a995:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
  23a998:	29 d7                	sub    edi,edx
  23a99a:	83 e7 1f             	and    edi,0x1f
  23a99d:	89 f9                	mov    ecx,edi
  23a99f:	d3 e0                	shl    eax,cl
  23a9a1:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
        if (d[high] == 0) {
  23a9a4:	eb 00                	jmp    23a9a6 <udivmod+0x4c6>
    if (d[low] == 0) {
  23a9a6:	eb 00                	jmp    23a9a8 <udivmod+0x4c8>
    // Not a special case
    // q and r are initialized with:
    // q.all = a << (DoubleInt.bit_count - sr);
    // r.all = a >> sr;
    // 1 <= sr <= DoubleInt.bit_count - 1
    var carry: u32 = 0;
  23a9a8:	c7 85 7c ff ff ff 00 	mov    DWORD PTR [rbp-0x84],0x0
  23a9af:	00 00 00 
    var r_all: DoubleInt = undefined;
    while (sr > 0) : (sr -= 1) {
  23a9b2:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
  23a9b6:	0f 86 af 00 00 00    	jbe    23aa6b <udivmod+0x58b>
        // r:q = ((r:q)  << 1) | carry
        r[high] = (r[high] << 1) | (r[low] >> (SingleInt.bit_count - 1));
  23a9bc:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  23a9bf:	c1 e0 01             	shl    eax,0x1
  23a9c2:	8b 4d c8             	mov    ecx,DWORD PTR [rbp-0x38]
  23a9c5:	c1 e9 1f             	shr    ecx,0x1f
  23a9c8:	09 c8                	or     eax,ecx
  23a9ca:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
        r[low] = (r[low] << 1) | (q[high] >> (SingleInt.bit_count - 1));
  23a9cd:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  23a9d0:	c1 e0 01             	shl    eax,0x1
  23a9d3:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
  23a9d6:	c1 e9 1f             	shr    ecx,0x1f
  23a9d9:	09 c8                	or     eax,ecx
  23a9db:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
        q[high] = (q[high] << 1) | (q[low] >> (SingleInt.bit_count - 1));
  23a9de:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
  23a9e1:	c1 e0 01             	shl    eax,0x1
  23a9e4:	8b 4d d0             	mov    ecx,DWORD PTR [rbp-0x30]
  23a9e7:	c1 e9 1f             	shr    ecx,0x1f
  23a9ea:	09 c8                	or     eax,ecx
  23a9ec:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
        q[low] = (q[low] << 1) | carry;
  23a9ef:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
  23a9f2:	c1 e0 01             	shl    eax,0x1
  23a9f5:	0b 85 7c ff ff ff    	or     eax,DWORD PTR [rbp-0x84]
  23a9fb:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
        // if (r.all >= b)
        // {
        //     r.all -= b;
        //      carry = 1;
        // }
        r_all = @ptrCast(*align(@alignOf(SingleInt)) DoubleInt, &r[0]).*; // TODO issue #421
  23a9fe:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  23aa02:	48 89 95 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdx
        const s: SignedDoubleInt = @intCast(SignedDoubleInt, b -% r_all -% 1) >> (DoubleInt.bit_count - 1);
  23aa09:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  23aa0d:	48 2b 95 70 ff ff ff 	sub    rdx,QWORD PTR [rbp-0x90]
  23aa14:	48 83 ea 01          	sub    rdx,0x1
  23aa18:	48 c1 fa 3f          	sar    rdx,0x3f
  23aa1c:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
        carry = @intCast(u32, s & 1);
  23aa23:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  23aa2a:	48 83 e2 01          	and    rdx,0x1
  23aa2e:	89 d0                	mov    eax,edx
  23aa30:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
        r_all -= b & @bitCast(DoubleInt, s);
  23aa36:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  23aa3d:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  23aa41:	48 23 b5 68 ff ff ff 	and    rsi,QWORD PTR [rbp-0x98]
  23aa48:	48 29 f2             	sub    rdx,rsi
  23aa4b:	48 89 95 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdx
        r = @ptrCast(*[2]SingleInt, &r_all).*; // TODO issue #421
  23aa52:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  23aa59:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
    while (sr > 0) : (sr -= 1) {
  23aa5d:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
  23aa60:	83 e8 01             	sub    eax,0x1
  23aa63:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
  23aa66:	e9 47 ff ff ff       	jmp    23a9b2 <udivmod+0x4d2>
    }
    const q_all = ((@ptrCast(*align(@alignOf(SingleInt)) DoubleInt, &q[0]).*) << 1) | carry; // TODO issue #421
  23aa6b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23aa6f:	48 c1 e0 01          	shl    rax,0x1
  23aa73:	8b 8d 7c ff ff ff    	mov    ecx,DWORD PTR [rbp-0x84]
  23aa79:	89 ca                	mov    edx,ecx
  23aa7b:	48 09 d0             	or     rax,rdx
  23aa7e:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
    if (maybe_rem) |rem| {
  23aa85:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
  23aa8a:	74 1e                	je     23aaaa <udivmod+0x5ca>
  23aa8c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  23aa90:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
        rem.* = r_all;
  23aa97:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
  23aa9e:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
  23aaa5:	48 89 08             	mov    QWORD PTR [rax],rcx
    if (maybe_rem) |rem| {
  23aaa8:	eb 02                	jmp    23aaac <udivmod+0x5cc>
  23aaaa:	eb 00                	jmp    23aaac <udivmod+0x5cc>
    }
    return q_all;
  23aaac:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  23aab3:	48 83 c4 40          	add    rsp,0x40
  23aab7:	5d                   	pop    rbp
  23aab8:	c3                   	ret    
  23aab9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

000000000023aac0 <__udivsi3>:
    const d = __udivsi3(a, b);
    rem.* = @bitCast(u32, @bitCast(i32, a) -% (@bitCast(i32, d) * @bitCast(i32, b)));
    return d;
}

extern fn __udivsi3(n: u32, d: u32) u32 {
  23aac0:	55                   	push   rbp
  23aac1:	48 89 e5             	mov    rbp,rsp
  23aac4:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  23aac7:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
    @setRuntimeSafety(is_test);

    const n_uword_bits: c_uint = u32.bit_count;
  23aaca:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [rbp-0xc],0x20
    // special cases
    if (d == 0) return 0; // ?!
  23aad1:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
  23aad5:	75 04                	jne    23aadb <__udivsi3+0x1b>
  23aad7:	31 c0                	xor    eax,eax
  23aad9:	5d                   	pop    rbp
  23aada:	c3                   	ret    
  23aadb:	eb 00                	jmp    23aadd <__udivsi3+0x1d>
    if (n == 0) return 0;
  23aadd:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
  23aae1:	75 04                	jne    23aae7 <__udivsi3+0x27>
  23aae3:	31 c0                	xor    eax,eax
  23aae5:	5d                   	pop    rbp
  23aae6:	c3                   	ret    
  23aae7:	eb 00                	jmp    23aae9 <__udivsi3+0x29>
    var sr = @bitCast(c_uint, c_int(@clz(d)) - c_int(@clz(n)));
  23aae9:	f3 0f bd 45 f8       	lzcnt  eax,DWORD PTR [rbp-0x8]
  23aaee:	f3 0f bd 4d fc       	lzcnt  ecx,DWORD PTR [rbp-0x4]
  23aaf3:	29 c8                	sub    eax,ecx
  23aaf5:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    // 0 <= sr <= n_uword_bits - 1 or sr large
    if (sr > n_uword_bits - 1) {
  23aaf8:	83 7d f0 1f          	cmp    DWORD PTR [rbp-0x10],0x1f
  23aafc:	76 04                	jbe    23ab02 <__udivsi3+0x42>
  23aafe:	31 c0                	xor    eax,eax
        // d > r
        return 0;
  23ab00:	5d                   	pop    rbp
  23ab01:	c3                   	ret    
    if (sr > n_uword_bits - 1) {
  23ab02:	eb 00                	jmp    23ab04 <__udivsi3+0x44>
    }
    if (sr == n_uword_bits - 1) {
  23ab04:	83 7d f0 1f          	cmp    DWORD PTR [rbp-0x10],0x1f
  23ab08:	75 05                	jne    23ab0f <__udivsi3+0x4f>
        // d == 1
        return n;
  23ab0a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  23ab0d:	5d                   	pop    rbp
  23ab0e:	c3                   	ret    
    }
    sr += 1;
  23ab0f:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  23ab12:	83 c0 01             	add    eax,0x1
  23ab15:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    // 1 <= sr <= n_uword_bits - 1
    // Not a special case
    var q: u32 = n << @intCast(u5, n_uword_bits - sr);
  23ab18:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  23ab1b:	8b 4d f0             	mov    ecx,DWORD PTR [rbp-0x10]
  23ab1e:	ba 20 00 00 00       	mov    edx,0x20
  23ab23:	29 ca                	sub    edx,ecx
  23ab25:	40 88 d6             	mov    sil,dl
  23ab28:	40 88 f1             	mov    cl,sil
  23ab2b:	c4 e2 71 f7 c0       	shlx   eax,eax,ecx
  23ab30:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    var r: u32 = n >> @intCast(u5, sr);
  23ab33:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  23ab36:	8b 4d f0             	mov    ecx,DWORD PTR [rbp-0x10]
  23ab39:	83 e1 1f             	and    ecx,0x1f
  23ab3c:	d3 e8                	shr    eax,cl
  23ab3e:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
    var carry: u32 = 0;
  23ab41:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
    while (sr > 0) : (sr -= 1) {
  23ab48:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
  23ab4c:	76 4e                	jbe    23ab9c <__udivsi3+0xdc>
        // r:q = ((r:q)  << 1) | carry
        r = (r << 1) | (q >> @intCast(u5, n_uword_bits - 1));
  23ab4e:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  23ab51:	c1 e0 01             	shl    eax,0x1
  23ab54:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
  23ab57:	c1 e9 1f             	shr    ecx,0x1f
  23ab5a:	09 c8                	or     eax,ecx
  23ab5c:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
        q = (q << 1) | carry;
  23ab5f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  23ab62:	c1 e0 01             	shl    eax,0x1
  23ab65:	0b 45 e4             	or     eax,DWORD PTR [rbp-0x1c]
  23ab68:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
        // if (r.all >= d.all)
        // {
        //      r.all -= d.all;
        //      carry = 1;
        // }
        const s = @intCast(i32, d -% r -% 1) >> @intCast(u5, n_uword_bits - 1);
  23ab6b:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  23ab6e:	2b 45 e8             	sub    eax,DWORD PTR [rbp-0x18]
  23ab71:	83 e8 01             	sub    eax,0x1
  23ab74:	c1 f8 1f             	sar    eax,0x1f
  23ab77:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
        carry = @intCast(u32, s & 1);
  23ab7a:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  23ab7d:	83 e0 01             	and    eax,0x1
  23ab80:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
        r -= d & @bitCast(u32, s);
  23ab83:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  23ab86:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
  23ab89:	23 4d e0             	and    ecx,DWORD PTR [rbp-0x20]
  23ab8c:	29 c8                	sub    eax,ecx
  23ab8e:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
    while (sr > 0) : (sr -= 1) {
  23ab91:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  23ab94:	83 e8 01             	sub    eax,0x1
  23ab97:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
  23ab9a:	eb ac                	jmp    23ab48 <__udivsi3+0x88>
    }
    q = (q << 1) | carry;
  23ab9c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  23ab9f:	c1 e0 01             	shl    eax,0x1
  23aba2:	0b 45 e4             	or     eax,DWORD PTR [rbp-0x1c]
  23aba5:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    return q;
  23aba8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  23abab:	5d                   	pop    rbp
  23abac:	c3                   	ret    
  23abad:	0f 1f 00             	nop    DWORD PTR [rax]

000000000023abb0 <__udivdi3>:
extern fn __udivdi3(a: u64, b: u64) u64 {
  23abb0:	55                   	push   rbp
  23abb1:	48 89 e5             	mov    rbp,rsp
  23abb4:	48 83 ec 10          	sub    rsp,0x10
  23abb8:	31 c0                	xor    eax,eax
  23abba:	89 c2                	mov    edx,eax
  23abbc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  23abc0:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    return __udivmoddi4(a, b, null);
  23abc4:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  23abc8:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  23abcc:	e8 8f bb ff ff       	call   236760 <__udivmoddi4>
  23abd1:	48 83 c4 10          	add    rsp,0x10
  23abd5:	5d                   	pop    rbp
  23abd6:	c3                   	ret    
  23abd7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  23abde:	00 00 

000000000023abe0 <__umoddi3>:
extern fn __umoddi3(a: u64, b: u64) u64 {
  23abe0:	55                   	push   rbp
  23abe1:	48 89 e5             	mov    rbp,rsp
  23abe4:	48 83 ec 20          	sub    rsp,0x20
  23abe8:	48 8d 55 e8          	lea    rdx,[rbp-0x18]
  23abec:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  23abf0:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    _ = __udivmoddi4(a, b, &r);
  23abf4:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  23abf8:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  23abfc:	e8 5f bb ff ff       	call   236760 <__udivmoddi4>
    return r;
  23ac01:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  23ac05:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  23ac09:	48 89 d0             	mov    rax,rdx
  23ac0c:	48 83 c4 20          	add    rsp,0x20
  23ac10:	5d                   	pop    rbp
  23ac11:	c3                   	ret    
  23ac12:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  23ac19:	1f 84 00 00 00 00 00 

000000000023ac20 <__udivmodsi4>:
extern fn __udivmodsi4(a: u32, b: u32, rem: *u32) u32 {
  23ac20:	55                   	push   rbp
  23ac21:	48 89 e5             	mov    rbp,rsp
  23ac24:	48 83 ec 20          	sub    rsp,0x20
  23ac28:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  23ac2b:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
  23ac2e:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
    const d = __udivsi3(a, b);
  23ac32:	8b 7d fc             	mov    edi,DWORD PTR [rbp-0x4]
  23ac35:	8b 75 f8             	mov    esi,DWORD PTR [rbp-0x8]
  23ac38:	e8 83 fe ff ff       	call   23aac0 <__udivsi3>
  23ac3d:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    rem.* = @bitCast(u32, @bitCast(i32, a) -% (@bitCast(i32, d) * @bitCast(i32, b)));
  23ac40:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  23ac44:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  23ac47:	8b 75 ec             	mov    esi,DWORD PTR [rbp-0x14]
  23ac4a:	0f af 75 f8          	imul   esi,DWORD PTR [rbp-0x8]
  23ac4e:	29 f0                	sub    eax,esi
  23ac50:	89 02                	mov    DWORD PTR [rdx],eax
    return d;
  23ac52:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  23ac55:	48 83 c4 20          	add    rsp,0x20
  23ac59:	5d                   	pop    rbp
  23ac5a:	c3                   	ret    
  23ac5b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000023ac60 <isArmArch>:
fn isArmArch() bool {
  23ac60:	55                   	push   rbp
  23ac61:	48 89 e5             	mov    rbp,rsp
    return switch (builtin.arch) {
  23ac64:	31 c0                	xor    eax,eax
  23ac66:	88 c1                	mov    cl,al
  23ac68:	88 c8                	mov    al,cl
  23ac6a:	5d                   	pop    rbp
  23ac6b:	c3                   	ret    
  23ac6c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000023ac70 <__divti3>:
const udivmod = @import("udivmod.zig").udivmod;
const builtin = @import("builtin");
const compiler_rt = @import("index.zig");

pub extern fn __divti3(a: i128, b: i128) i128 {
  23ac70:	55                   	push   rbp
  23ac71:	48 89 e5             	mov    rbp,rsp
  23ac74:	48 81 ec 80 00 00 00 	sub    rsp,0x80
  23ac7b:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  23ac7f:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  23ac83:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  23ac87:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
    @setRuntimeSafety(builtin.is_test);

    const s_a = a >> (i128.bit_count - 1);
  23ac8b:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  23ac8f:	48 c1 f9 3f          	sar    rcx,0x3f
  23ac93:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  23ac97:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    const s_b = b >> (i128.bit_count - 1);
  23ac9b:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  23ac9f:	48 c1 f9 3f          	sar    rcx,0x3f
  23aca3:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  23aca7:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx

    const an = (a ^ s_a) -% s_a;
  23acab:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  23acaf:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  23acb3:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  23acb7:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  23acbb:	48 31 fa             	xor    rdx,rdi
  23acbe:	48 31 f1             	xor    rcx,rsi
  23acc1:	48 29 f1             	sub    rcx,rsi
  23acc4:	48 19 fa             	sbb    rdx,rdi
  23acc7:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
  23accb:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
    const bn = (b ^ s_b) -% s_b;
  23accf:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  23acd3:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  23acd7:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
  23acdb:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
  23acdf:	48 31 fa             	xor    rdx,rdi
  23ace2:	48 31 f1             	xor    rcx,rsi
  23ace5:	48 29 f1             	sub    rcx,rsi
  23ace8:	48 19 fa             	sbb    rdx,rdi
  23aceb:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
  23acef:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx

    const r = udivmod(u128, @bitCast(u128, an), @bitCast(u128, bn), null);
  23acf3:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
  23acf7:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  23acfb:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  23acff:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
  23ad03:	31 c0                	xor    eax,eax
  23ad05:	41 89 c0             	mov    r8d,eax
  23ad08:	e8 53 00 00 00       	call   23ad60 <udivmod.14>
  23ad0d:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  23ad11:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
    const s = s_a ^ s_b;
  23ad15:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23ad19:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  23ad1d:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  23ad21:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
  23ad25:	48 31 d0             	xor    rax,rdx
  23ad28:	48 31 f1             	xor    rcx,rsi
  23ad2b:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
  23ad2f:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
    return (@bitCast(i128, r) ^ s) -% s;
  23ad33:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  23ad37:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  23ad3b:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
  23ad3f:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
  23ad43:	48 31 f1             	xor    rcx,rsi
  23ad46:	48 31 d0             	xor    rax,rdx
  23ad49:	48 29 d0             	sub    rax,rdx
  23ad4c:	48 19 f1             	sbb    rcx,rsi
  23ad4f:	48 89 ca             	mov    rdx,rcx
  23ad52:	48 81 c4 80 00 00 00 	add    rsp,0x80
  23ad59:	5d                   	pop    rbp
  23ad5a:	c3                   	ret    
  23ad5b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000023ad60 <udivmod.14>:
pub fn udivmod(comptime DoubleInt: type, a: DoubleInt, b: DoubleInt, maybe_rem: ?*DoubleInt) DoubleInt {
  23ad60:	55                   	push   rbp
  23ad61:	48 89 e5             	mov    rbp,rsp
  23ad64:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  23ad6b:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  23ad6f:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  23ad73:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  23ad77:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  23ad7b:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
    const n = @ptrCast(*const [2]SingleInt, &a).*; // TODO issue #421
  23ad7f:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  23ad83:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  23ad87:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  23ad8b:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    const d = @ptrCast(*const [2]SingleInt, &b).*; // TODO issue #421
  23ad8f:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  23ad93:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
  23ad97:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  23ad9b:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
    var q: [2]SingleInt = undefined;
  23ad9f:	48 8b 0d 0a 55 fc ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffc550a]        # 2002b0 <__unnamed_100>
  23ada6:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
  23adaa:	48 8b 0d 07 55 fc ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffc5507]        # 2002b8 <__unnamed_100+0x8>
  23adb1:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
    var r: [2]SingleInt = undefined;
  23adb5:	48 8b 0d f4 54 fc ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffc54f4]        # 2002b0 <__unnamed_100>
  23adbc:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
  23adc0:	48 8b 0d f1 54 fc ff 	mov    rcx,QWORD PTR [rip+0xfffffffffffc54f1]        # 2002b8 <__unnamed_100+0x8>
  23adc7:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
    if (n[high] == 0) {
  23adcb:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
  23add0:	0f 85 af 00 00 00    	jne    23ae85 <udivmod.14+0x125>
        if (d[high] == 0) {
  23add6:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
  23addb:	75 6d                	jne    23ae4a <udivmod.14+0xea>
            if (maybe_rem) |rem| {
  23addd:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  23ade2:	74 4a                	je     23ae2e <udivmod.14+0xce>
  23ade4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  23ade8:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
                rem.* = n[low] % d[low];
  23adec:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  23adf0:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  23adf4:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  23adf8:	31 f6                	xor    esi,esi
  23adfa:	89 f7                	mov    edi,esi
  23adfc:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
  23ae03:	48 89 c8             	mov    rax,rcx
  23ae06:	48 89 95 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rdx
  23ae0d:	48 89 fa             	mov    rdx,rdi
  23ae10:	48 8b 8d 00 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x100]
  23ae17:	48 f7 f1             	div    rcx
  23ae1a:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  23ae21:	48 89 10             	mov    QWORD PTR [rax],rdx
  23ae24:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
  23ae2b:	00 
            if (maybe_rem) |rem| {
  23ae2c:	eb 02                	jmp    23ae30 <udivmod.14+0xd0>
  23ae2e:	eb 00                	jmp    23ae30 <udivmod.14+0xd0>
            return n[low] / d[low];
  23ae30:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  23ae34:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  23ae38:	31 d2                	xor    edx,edx
  23ae3a:	48 f7 f1             	div    rcx
  23ae3d:	31 f6                	xor    esi,esi
  23ae3f:	89 f2                	mov    edx,esi
  23ae41:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  23ae48:	5d                   	pop    rbp
  23ae49:	c3                   	ret    
        if (d[high] == 0) {
  23ae4a:	eb 00                	jmp    23ae4c <udivmod.14+0xec>
        if (maybe_rem) |rem| {
  23ae4c:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  23ae51:	74 1d                	je     23ae70 <udivmod.14+0x110>
  23ae53:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  23ae57:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
            rem.* = n[low];
  23ae5b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  23ae5f:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  23ae63:	48 89 08             	mov    QWORD PTR [rax],rcx
  23ae66:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
  23ae6d:	00 
        if (maybe_rem) |rem| {
  23ae6e:	eb 02                	jmp    23ae72 <udivmod.14+0x112>
  23ae70:	eb 00                	jmp    23ae72 <udivmod.14+0x112>
        return 0;
  23ae72:	31 c0                	xor    eax,eax
  23ae74:	89 c1                	mov    ecx,eax
  23ae76:	48 89 c8             	mov    rax,rcx
  23ae79:	48 89 ca             	mov    rdx,rcx
  23ae7c:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  23ae83:	5d                   	pop    rbp
  23ae84:	c3                   	ret    
    if (n[high] == 0) {
  23ae85:	eb 00                	jmp    23ae87 <udivmod.14+0x127>
    if (d[low] == 0) {
  23ae87:	48 83 7d b8 00       	cmp    QWORD PTR [rbp-0x48],0x0
  23ae8c:	0f 85 46 02 00 00    	jne    23b0d8 <udivmod.14+0x378>
        if (d[high] == 0) {
  23ae92:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
  23ae97:	75 73                	jne    23af0c <udivmod.14+0x1ac>
            if (maybe_rem) |rem| {
  23ae99:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  23ae9e:	74 50                	je     23aef0 <udivmod.14+0x190>
  23aea0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  23aea4:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
                rem.* = n[high] % d[low];
  23aeab:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  23aeb2:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  23aeb6:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  23aeba:	31 f6                	xor    esi,esi
  23aebc:	89 f7                	mov    edi,esi
  23aebe:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
  23aec5:	48 89 c8             	mov    rax,rcx
  23aec8:	48 89 95 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rdx
  23aecf:	48 89 fa             	mov    rdx,rdi
  23aed2:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
  23aed9:	48 f7 f1             	div    rcx
  23aedc:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  23aee3:	48 89 10             	mov    QWORD PTR [rax],rdx
  23aee6:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
  23aeed:	00 
            if (maybe_rem) |rem| {
  23aeee:	eb 02                	jmp    23aef2 <udivmod.14+0x192>
  23aef0:	eb 00                	jmp    23aef2 <udivmod.14+0x192>
            return n[high] / d[low];
  23aef2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23aef6:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  23aefa:	31 d2                	xor    edx,edx
  23aefc:	48 f7 f1             	div    rcx
  23aeff:	31 f6                	xor    esi,esi
  23af01:	89 f2                	mov    edx,esi
  23af03:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  23af0a:	5d                   	pop    rbp
  23af0b:	c3                   	ret    
        if (d[high] == 0) {
  23af0c:	eb 00                	jmp    23af0e <udivmod.14+0x1ae>
        if (n[low] == 0) {
  23af0e:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
  23af13:	75 5f                	jne    23af74 <udivmod.14+0x214>
            if (maybe_rem) |rem| {
  23af15:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  23af1a:	74 3c                	je     23af58 <udivmod.14+0x1f8>
  23af1c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  23af20:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
                r[high] = n[high] % d[high];
  23af27:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23af2b:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  23af2f:	31 d2                	xor    edx,edx
  23af31:	48 f7 f1             	div    rcx
  23af34:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
                r[low] = 0;
  23af38:	48 c7 45 98 00 00 00 	mov    QWORD PTR [rbp-0x68],0x0
  23af3f:	00 
                rem.* = @ptrCast(*align(@alignOf(SingleInt)) DoubleInt, &r[0]).*; // TODO issue #421
  23af40:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  23af47:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  23af4b:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  23af4f:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
  23af53:	48 89 08             	mov    QWORD PTR [rax],rcx
            if (maybe_rem) |rem| {
  23af56:	eb 02                	jmp    23af5a <udivmod.14+0x1fa>
  23af58:	eb 00                	jmp    23af5a <udivmod.14+0x1fa>
            return n[high] / d[high];
  23af5a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23af5e:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  23af62:	31 d2                	xor    edx,edx
  23af64:	48 f7 f1             	div    rcx
  23af67:	31 f6                	xor    esi,esi
  23af69:	89 f2                	mov    edx,esi
  23af6b:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  23af72:	5d                   	pop    rbp
  23af73:	c3                   	ret    
        if (n[low] == 0) {
  23af74:	eb 00                	jmp    23af76 <udivmod.14+0x216>
        if ((d[high] & (d[high] - 1)) == 0) {
  23af76:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  23af7a:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  23af7e:	48 83 e9 01          	sub    rcx,0x1
  23af82:	48 21 c8             	and    rax,rcx
  23af85:	48 83 f8 00          	cmp    rax,0x0
  23af89:	75 67                	jne    23aff2 <udivmod.14+0x292>
            if (maybe_rem) |rem| {
  23af8b:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  23af90:	74 3e                	je     23afd0 <udivmod.14+0x270>
  23af92:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  23af96:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
                r[low] = n[low];
  23af9d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  23afa1:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
                r[high] = n[high] & (d[high] - 1);
  23afa5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23afa9:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
  23afad:	48 83 c1 ff          	add    rcx,0xffffffffffffffff
  23afb1:	48 21 c8             	and    rax,rcx
  23afb4:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
                rem.* = @ptrCast(*align(@alignOf(SingleInt)) DoubleInt, &r[0]).*; // TODO issue #421
  23afb8:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  23afbf:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
  23afc3:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  23afc7:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
  23afcb:	48 89 08             	mov    QWORD PTR [rax],rcx
            if (maybe_rem) |rem| {
  23afce:	eb 02                	jmp    23afd2 <udivmod.14+0x272>
  23afd0:	eb 00                	jmp    23afd2 <udivmod.14+0x272>
            return n[high] >> @intCast(Log2SingleInt, @ctz(d[high]));
  23afd2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23afd6:	f3 48 0f bc 4d c0    	tzcnt  rcx,QWORD PTR [rbp-0x40]
  23afdc:	88 ca                	mov    dl,cl
  23afde:	88 d1                	mov    cl,dl
  23afe0:	c4 e2 f3 f7 c0       	shrx   rax,rax,rcx
  23afe5:	31 f6                	xor    esi,esi
  23afe7:	89 f2                	mov    edx,esi
  23afe9:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  23aff0:	5d                   	pop    rbp
  23aff1:	c3                   	ret    
        if ((d[high] & (d[high] - 1)) == 0) {
  23aff2:	eb 00                	jmp    23aff4 <udivmod.14+0x294>
        sr = @bitCast(c_uint, c_int(@clz(d[high])) - c_int(@clz(n[high])));
  23aff4:	f3 48 0f bd 45 c0    	lzcnt  rax,QWORD PTR [rbp-0x40]
  23affa:	89 c1                	mov    ecx,eax
  23affc:	f3 48 0f bd 45 d0    	lzcnt  rax,QWORD PTR [rbp-0x30]
  23b002:	89 c2                	mov    edx,eax
  23b004:	29 d1                	sub    ecx,edx
  23b006:	89 4d 94             	mov    DWORD PTR [rbp-0x6c],ecx
        if (sr > SingleInt.bit_count - 2) {
  23b009:	83 7d 94 3e          	cmp    DWORD PTR [rbp-0x6c],0x3e
  23b00d:	76 3f                	jbe    23b04e <udivmod.14+0x2ee>
            if (maybe_rem) |rem| {
  23b00f:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  23b014:	74 23                	je     23b039 <udivmod.14+0x2d9>
  23b016:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  23b01a:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
                rem.* = a;
  23b021:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  23b028:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  23b02c:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  23b030:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
  23b034:	48 89 08             	mov    QWORD PTR [rax],rcx
            if (maybe_rem) |rem| {
  23b037:	eb 02                	jmp    23b03b <udivmod.14+0x2db>
  23b039:	eb 00                	jmp    23b03b <udivmod.14+0x2db>
            return 0;
  23b03b:	31 c0                	xor    eax,eax
  23b03d:	89 c1                	mov    ecx,eax
  23b03f:	48 89 c8             	mov    rax,rcx
  23b042:	48 89 ca             	mov    rdx,rcx
  23b045:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  23b04c:	5d                   	pop    rbp
  23b04d:	c3                   	ret    
        if (sr > SingleInt.bit_count - 2) {
  23b04e:	eb 00                	jmp    23b050 <udivmod.14+0x2f0>
        sr += 1;
  23b050:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
  23b053:	83 c0 01             	add    eax,0x1
  23b056:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
        q[low] = 0;
  23b059:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
  23b060:	00 
        q[high] = n[low] << @intCast(Log2SingleInt, SingleInt.bit_count - sr);
  23b061:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  23b065:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
  23b068:	ba 40 00 00 00       	mov    edx,0x40
  23b06d:	89 d6                	mov    esi,edx
  23b06f:	29 c6                	sub    esi,eax
  23b071:	40 88 f7             	mov    dil,sil
  23b074:	41 88 f8             	mov    r8b,dil
  23b077:	c4 e2 b9 f7 c9       	shlx   rcx,rcx,r8
  23b07c:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
        r[high] = n[high] >> @intCast(Log2SingleInt, sr);
  23b080:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  23b084:	40 8a 7d 94          	mov    dil,BYTE PTR [rbp-0x6c]
  23b088:	41 88 f8             	mov    r8b,dil
  23b08b:	c4 e2 bb f7 c9       	shrx   rcx,rcx,r8
  23b090:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
        r[low] = (n[high] << @intCast(Log2SingleInt, SingleInt.bit_count - sr)) | (n[low] >> @intCast(Log2SingleInt, sr));
  23b094:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  23b098:	4c 8b 45 d0          	mov    r8,QWORD PTR [rbp-0x30]
  23b09c:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
  23b09f:	41 89 c1             	mov    r9d,eax
  23b0a2:	44 89 c8             	mov    eax,r9d
  23b0a5:	29 c2                	sub    edx,eax
  23b0a7:	40 88 d7             	mov    dil,dl
  23b0aa:	41 88 f9             	mov    r9b,dil
  23b0ad:	c4 42 b1 f7 c0       	shlx   r8,r8,r9
  23b0b2:	83 e0 3f             	and    eax,0x3f
  23b0b5:	41 89 c1             	mov    r9d,eax
  23b0b8:	48 89 8d e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rcx
  23b0bf:	4c 89 c9             	mov    rcx,r9
  23b0c2:	4c 8b 8d e8 fe ff ff 	mov    r9,QWORD PTR [rbp-0x118]
  23b0c9:	49 d3 e9             	shr    r9,cl
  23b0cc:	4d 09 c8             	or     r8,r9
  23b0cf:	4c 89 45 98          	mov    QWORD PTR [rbp-0x68],r8
    if (d[low] == 0) {
  23b0d3:	e9 df 02 00 00       	jmp    23b3b7 <udivmod.14+0x657>
        if (d[high] == 0) {
  23b0d8:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
  23b0dd:	0f 85 e9 01 00 00    	jne    23b2cc <udivmod.14+0x56c>
            if ((d[low] & (d[low] - 1)) == 0) {
  23b0e3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  23b0e7:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  23b0eb:	48 83 e9 01          	sub    rcx,0x1
  23b0ef:	48 21 c8             	and    rax,rcx
  23b0f2:	48 83 f8 00          	cmp    rax,0x0
  23b0f6:	0f 85 ae 00 00 00    	jne    23b1aa <udivmod.14+0x44a>
                if (maybe_rem) |rem| {
  23b0fc:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  23b101:	74 2e                	je     23b131 <udivmod.14+0x3d1>
  23b103:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  23b107:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
                    rem.* = n[low] & (d[low] - 1);
  23b10e:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
  23b115:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  23b119:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  23b11d:	48 83 c2 ff          	add    rdx,0xffffffffffffffff
  23b121:	48 21 d1             	and    rcx,rdx
  23b124:	48 89 08             	mov    QWORD PTR [rax],rcx
  23b127:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
  23b12e:	00 
                if (maybe_rem) |rem| {
  23b12f:	eb 02                	jmp    23b133 <udivmod.14+0x3d3>
  23b131:	eb 00                	jmp    23b133 <udivmod.14+0x3d3>
                if (d[low] == 1) {
  23b133:	48 83 7d b8 01       	cmp    QWORD PTR [rbp-0x48],0x1
  23b138:	75 11                	jne    23b14b <udivmod.14+0x3eb>
                    return a;
  23b13a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  23b13e:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  23b142:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  23b149:	5d                   	pop    rbp
  23b14a:	c3                   	ret    
                if (d[low] == 1) {
  23b14b:	eb 00                	jmp    23b14d <udivmod.14+0x3ed>
                sr = @ctz(d[low]);
  23b14d:	f3 48 0f bc 45 b8    	tzcnt  rax,QWORD PTR [rbp-0x48]
  23b153:	89 c1                	mov    ecx,eax
  23b155:	89 4d 94             	mov    DWORD PTR [rbp-0x6c],ecx
                q[high] = n[high] >> @intCast(Log2SingleInt, sr);
  23b158:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23b15c:	8a 55 94             	mov    dl,BYTE PTR [rbp-0x6c]
  23b15f:	40 88 d6             	mov    sil,dl
  23b162:	c4 e2 cb f7 c0       	shrx   rax,rax,rsi
  23b167:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
                q[low] = (n[high] << @intCast(Log2SingleInt, SingleInt.bit_count - sr)) | (n[low] >> @intCast(Log2SingleInt, sr));
  23b16b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  23b16f:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  23b173:	8b 4d 94             	mov    ecx,DWORD PTR [rbp-0x6c]
  23b176:	bf 40 00 00 00       	mov    edi,0x40
  23b17b:	29 cf                	sub    edi,ecx
  23b17d:	40 88 fa             	mov    dl,dil
  23b180:	41 88 d0             	mov    r8b,dl
  23b183:	c4 e2 b9 f7 f6       	shlx   rsi,rsi,r8
  23b188:	88 ca                	mov    dl,cl
  23b18a:	41 88 d0             	mov    r8b,dl
  23b18d:	c4 e2 bb f7 c0       	shrx   rax,rax,r8
  23b192:	48 09 c6             	or     rsi,rax
  23b195:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
                return @ptrCast(*align(@alignOf(SingleInt)) DoubleInt, &q[0]).*; // TODO issue #421
  23b199:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  23b19d:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  23b1a1:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  23b1a8:	5d                   	pop    rbp
  23b1a9:	c3                   	ret    
            if ((d[low] & (d[low] - 1)) == 0) {
  23b1aa:	eb 00                	jmp    23b1ac <udivmod.14+0x44c>
            sr = 1 + SingleInt.bit_count + c_uint(@clz(d[low])) - c_uint(@clz(n[high]));
  23b1ac:	f3 48 0f bd 45 b8    	lzcnt  rax,QWORD PTR [rbp-0x48]
  23b1b2:	89 c1                	mov    ecx,eax
  23b1b4:	83 c1 41             	add    ecx,0x41
  23b1b7:	f3 48 0f bd 45 d0    	lzcnt  rax,QWORD PTR [rbp-0x30]
  23b1bd:	89 c2                	mov    edx,eax
  23b1bf:	29 d1                	sub    ecx,edx
  23b1c1:	89 4d 94             	mov    DWORD PTR [rbp-0x6c],ecx
            if (sr == SingleInt.bit_count) {
  23b1c4:	83 7d 94 40          	cmp    DWORD PTR [rbp-0x6c],0x40
  23b1c8:	75 25                	jne    23b1ef <udivmod.14+0x48f>
                q[low] = 0;
  23b1ca:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
  23b1d1:	00 
                q[high] = n[low];
  23b1d2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  23b1d6:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
                r[high] = 0;
  23b1da:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
  23b1e1:	00 
                r[low] = n[high];
  23b1e2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23b1e6:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
            if (sr == SingleInt.bit_count) {
  23b1ea:	e9 d8 00 00 00       	jmp    23b2c7 <udivmod.14+0x567>
            } else if (sr < SingleInt.bit_count) {
  23b1ef:	83 7d 94 40          	cmp    DWORD PTR [rbp-0x6c],0x40
  23b1f3:	73 68                	jae    23b25d <udivmod.14+0x4fd>
                q[low] = 0;
  23b1f5:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
  23b1fc:	00 
                q[high] = n[low] << @intCast(Log2SingleInt, SingleInt.bit_count - sr);
  23b1fd:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  23b201:	8b 4d 94             	mov    ecx,DWORD PTR [rbp-0x6c]
  23b204:	ba 40 00 00 00       	mov    edx,0x40
  23b209:	89 d6                	mov    esi,edx
  23b20b:	29 ce                	sub    esi,ecx
  23b20d:	40 88 f7             	mov    dil,sil
  23b210:	41 88 f8             	mov    r8b,dil
  23b213:	c4 e2 b9 f7 c0       	shlx   rax,rax,r8
  23b218:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
                r[high] = n[high] >> @intCast(Log2SingleInt, sr);
  23b21c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23b220:	40 8a 7d 94          	mov    dil,BYTE PTR [rbp-0x6c]
  23b224:	41 88 f8             	mov    r8b,dil
  23b227:	c4 e2 bb f7 c0       	shrx   rax,rax,r8
  23b22c:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
                r[low] = (n[high] << @intCast(Log2SingleInt, SingleInt.bit_count - sr)) | (n[low] >> @intCast(Log2SingleInt, sr));
  23b230:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  23b234:	4c 8b 45 d0          	mov    r8,QWORD PTR [rbp-0x30]
  23b238:	8b 4d 94             	mov    ecx,DWORD PTR [rbp-0x6c]
  23b23b:	41 89 c9             	mov    r9d,ecx
  23b23e:	44 89 c9             	mov    ecx,r9d
  23b241:	29 ca                	sub    edx,ecx
  23b243:	40 88 d7             	mov    dil,dl
  23b246:	41 88 f9             	mov    r9b,dil
  23b249:	c4 42 b1 f7 c0       	shlx   r8,r8,r9
  23b24e:	83 e1 3f             	and    ecx,0x3f
  23b251:	48 d3 e8             	shr    rax,cl
  23b254:	49 09 c0             	or     r8,rax
  23b257:	4c 89 45 98          	mov    QWORD PTR [rbp-0x68],r8
            } else if (sr < SingleInt.bit_count) {
  23b25b:	eb 68                	jmp    23b2c5 <udivmod.14+0x565>
                q[low] = n[low] << @intCast(Log2SingleInt, DoubleInt.bit_count - sr);
  23b25d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  23b261:	8b 4d 94             	mov    ecx,DWORD PTR [rbp-0x6c]
  23b264:	ba 80 00 00 00       	mov    edx,0x80
  23b269:	89 d6                	mov    esi,edx
  23b26b:	29 ce                	sub    esi,ecx
  23b26d:	40 88 f7             	mov    dil,sil
  23b270:	41 88 f8             	mov    r8b,dil
  23b273:	c4 e2 b9 f7 c0       	shlx   rax,rax,r8
  23b278:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
                q[high] = (n[high] << @intCast(Log2SingleInt, DoubleInt.bit_count - sr)) | (n[low] >> @intCast(Log2SingleInt, sr - SingleInt.bit_count));
  23b27c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  23b280:	4c 8b 45 d0          	mov    r8,QWORD PTR [rbp-0x30]
  23b284:	8b 4d 94             	mov    ecx,DWORD PTR [rbp-0x6c]
  23b287:	29 ca                	sub    edx,ecx
  23b289:	40 88 d7             	mov    dil,dl
  23b28c:	41 88 f9             	mov    r9b,dil
  23b28f:	c4 42 b1 f7 c0       	shlx   r8,r8,r9
  23b294:	83 c1 c0             	add    ecx,0xffffffc0
  23b297:	40 88 cf             	mov    dil,cl
  23b29a:	41 88 f9             	mov    r9b,dil
  23b29d:	c4 e2 b3 f7 c0       	shrx   rax,rax,r9
  23b2a2:	49 09 c0             	or     r8,rax
  23b2a5:	4c 89 45 b0          	mov    QWORD PTR [rbp-0x50],r8
                r[high] = 0;
  23b2a9:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
  23b2b0:	00 
                r[low] = n[high] >> @intCast(Log2SingleInt, sr - SingleInt.bit_count);
  23b2b1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23b2b5:	8b 4d 94             	mov    ecx,DWORD PTR [rbp-0x6c]
  23b2b8:	83 c1 c0             	add    ecx,0xffffffc0
  23b2bb:	83 e1 3f             	and    ecx,0x3f
  23b2be:	48 d3 e8             	shr    rax,cl
  23b2c1:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
            if (sr == SingleInt.bit_count) {
  23b2c5:	eb 00                	jmp    23b2c7 <udivmod.14+0x567>
        if (d[high] == 0) {
  23b2c7:	e9 e9 00 00 00       	jmp    23b3b5 <udivmod.14+0x655>
            sr = @bitCast(c_uint, c_int(@clz(d[high])) - c_int(@clz(n[high])));
  23b2cc:	f3 48 0f bd 45 c0    	lzcnt  rax,QWORD PTR [rbp-0x40]
  23b2d2:	89 c1                	mov    ecx,eax
  23b2d4:	f3 48 0f bd 45 d0    	lzcnt  rax,QWORD PTR [rbp-0x30]
  23b2da:	89 c2                	mov    edx,eax
  23b2dc:	29 d1                	sub    ecx,edx
  23b2de:	89 4d 94             	mov    DWORD PTR [rbp-0x6c],ecx
            if (sr > SingleInt.bit_count - 1) {
  23b2e1:	83 7d 94 3f          	cmp    DWORD PTR [rbp-0x6c],0x3f
  23b2e5:	76 3f                	jbe    23b326 <udivmod.14+0x5c6>
                if (maybe_rem) |rem| {
  23b2e7:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  23b2ec:	74 23                	je     23b311 <udivmod.14+0x5b1>
  23b2ee:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  23b2f2:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
                    rem.* = a;
  23b2f9:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  23b300:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  23b304:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  23b308:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
  23b30c:	48 89 08             	mov    QWORD PTR [rax],rcx
                if (maybe_rem) |rem| {
  23b30f:	eb 02                	jmp    23b313 <udivmod.14+0x5b3>
  23b311:	eb 00                	jmp    23b313 <udivmod.14+0x5b3>
                return 0;
  23b313:	31 c0                	xor    eax,eax
  23b315:	89 c1                	mov    ecx,eax
  23b317:	48 89 c8             	mov    rax,rcx
  23b31a:	48 89 ca             	mov    rdx,rcx
  23b31d:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  23b324:	5d                   	pop    rbp
  23b325:	c3                   	ret    
            if (sr > SingleInt.bit_count - 1) {
  23b326:	eb 00                	jmp    23b328 <udivmod.14+0x5c8>
            sr += 1;
  23b328:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
  23b32b:	83 c0 01             	add    eax,0x1
  23b32e:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
            q[low] = 0;
  23b331:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
  23b338:	00 
            if (sr == SingleInt.bit_count) {
  23b339:	83 7d 94 40          	cmp    DWORD PTR [rbp-0x6c],0x40
  23b33d:	75 1a                	jne    23b359 <udivmod.14+0x5f9>
                q[high] = n[low];
  23b33f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  23b343:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
                r[high] = 0;
  23b347:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
  23b34e:	00 
                r[low] = n[high];
  23b34f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23b353:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
            if (sr == SingleInt.bit_count) {
  23b357:	eb 5a                	jmp    23b3b3 <udivmod.14+0x653>
                r[high] = n[high] >> @intCast(Log2SingleInt, sr);
  23b359:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23b35d:	8a 4d 94             	mov    cl,BYTE PTR [rbp-0x6c]
  23b360:	88 ca                	mov    dl,cl
  23b362:	c4 e2 eb f7 c0       	shrx   rax,rax,rdx
  23b367:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
                r[low] = (n[high] << @intCast(Log2SingleInt, SingleInt.bit_count - sr)) | (n[low] >> @intCast(Log2SingleInt, sr));
  23b36b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  23b36f:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  23b373:	8b 75 94             	mov    esi,DWORD PTR [rbp-0x6c]
  23b376:	bf 40 00 00 00       	mov    edi,0x40
  23b37b:	41 89 f8             	mov    r8d,edi
  23b37e:	41 29 f0             	sub    r8d,esi
  23b381:	44 88 c1             	mov    cl,r8b
  23b384:	41 88 c9             	mov    r9b,cl
  23b387:	c4 e2 b1 f7 d2       	shlx   rdx,rdx,r9
  23b38c:	40 88 f1             	mov    cl,sil
  23b38f:	41 88 c9             	mov    r9b,cl
  23b392:	c4 e2 b3 f7 c0       	shrx   rax,rax,r9
  23b397:	48 09 c2             	or     rdx,rax
  23b39a:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
                q[high] = n[low] << @intCast(Log2SingleInt, SingleInt.bit_count - sr);
  23b39e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  23b3a2:	8b 75 94             	mov    esi,DWORD PTR [rbp-0x6c]
  23b3a5:	29 f7                	sub    edi,esi
  23b3a7:	83 e7 3f             	and    edi,0x3f
  23b3aa:	89 f9                	mov    ecx,edi
  23b3ac:	48 d3 e0             	shl    rax,cl
  23b3af:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
        if (d[high] == 0) {
  23b3b3:	eb 00                	jmp    23b3b5 <udivmod.14+0x655>
    if (d[low] == 0) {
  23b3b5:	eb 00                	jmp    23b3b7 <udivmod.14+0x657>
    var carry: u32 = 0;
  23b3b7:	c7 85 4c ff ff ff 00 	mov    DWORD PTR [rbp-0xb4],0x0
  23b3be:	00 00 00 
    while (sr > 0) : (sr -= 1) {
  23b3c1:	83 7d 94 00          	cmp    DWORD PTR [rbp-0x6c],0x0
  23b3c5:	0f 86 0d 01 00 00    	jbe    23b4d8 <udivmod.14+0x778>
        r[high] = (r[high] << 1) | (r[low] >> (SingleInt.bit_count - 1));
  23b3cb:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  23b3cf:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  23b3d3:	48 0f a4 c1 01       	shld   rcx,rax,0x1
  23b3d8:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
        r[low] = (r[low] << 1) | (q[high] >> (SingleInt.bit_count - 1));
  23b3dc:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  23b3e0:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  23b3e4:	48 0f a4 c8 01       	shld   rax,rcx,0x1
  23b3e9:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
        q[high] = (q[high] << 1) | (q[low] >> (SingleInt.bit_count - 1));
  23b3ed:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  23b3f1:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  23b3f5:	48 0f a4 c1 01       	shld   rcx,rax,0x1
  23b3fa:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
        q[low] = (q[low] << 1) | carry;
  23b3fe:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  23b402:	48 01 c0             	add    rax,rax
  23b405:	8b 95 4c ff ff ff    	mov    edx,DWORD PTR [rbp-0xb4]
  23b40b:	89 d1                	mov    ecx,edx
  23b40d:	48 09 c8             	or     rax,rcx
  23b410:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
        r_all = @ptrCast(*align(@alignOf(SingleInt)) DoubleInt, &r[0]).*; // TODO issue #421
  23b414:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  23b418:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  23b41c:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
  23b423:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
        const s: SignedDoubleInt = @intCast(SignedDoubleInt, b -% r_all -% 1) >> (DoubleInt.bit_count - 1);
  23b42a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  23b42e:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  23b432:	48 8b b5 38 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc8]
  23b439:	48 8b bd 40 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xc0]
  23b440:	48 29 f0             	sub    rax,rsi
  23b443:	48 19 f9             	sbb    rcx,rdi
  23b446:	48 83 c0 ff          	add    rax,0xffffffffffffffff
  23b44a:	48 83 d1 ff          	adc    rcx,0xffffffffffffffff
  23b44e:	48 c1 f9 3f          	sar    rcx,0x3f
  23b452:	48 89 8d 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rcx
  23b459:	48 89 8d 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rcx
        carry = @intCast(u32, s & 1);
  23b460:	8b 95 28 ff ff ff    	mov    edx,DWORD PTR [rbp-0xd8]
  23b466:	83 e2 01             	and    edx,0x1
  23b469:	89 95 4c ff ff ff    	mov    DWORD PTR [rbp-0xb4],edx
        r_all -= b & @bitCast(DoubleInt, s);
  23b46f:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
  23b476:	48 8b b5 40 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc0]
  23b47d:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  23b481:	4c 8b 45 e8          	mov    r8,QWORD PTR [rbp-0x18]
  23b485:	4c 8b 8d 28 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd8]
  23b48c:	4c 8b 95 30 ff ff ff 	mov    r10,QWORD PTR [rbp-0xd0]
  23b493:	4d 21 d0             	and    r8,r10
  23b496:	4c 21 cf             	and    rdi,r9
  23b499:	48 29 f9             	sub    rcx,rdi
  23b49c:	4c 19 c6             	sbb    rsi,r8
  23b49f:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
  23b4a6:	48 89 b5 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rsi
        r = @ptrCast(*[2]SingleInt, &r_all).*; // TODO issue #421
  23b4ad:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
  23b4b4:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
  23b4b8:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  23b4bf:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
    while (sr > 0) : (sr -= 1) {
  23b4c3:	8b 55 94             	mov    edx,DWORD PTR [rbp-0x6c]
  23b4c6:	83 ea 01             	sub    edx,0x1
  23b4c9:	89 55 94             	mov    DWORD PTR [rbp-0x6c],edx
  23b4cc:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
  23b4d3:	e9 e9 fe ff ff       	jmp    23b3c1 <udivmod.14+0x661>
    const q_all = ((@ptrCast(*align(@alignOf(SingleInt)) DoubleInt, &q[0]).*) << 1) | carry; // TODO issue #421
  23b4d8:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  23b4dc:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
  23b4e0:	48 0f a4 c1 01       	shld   rcx,rax,0x1
  23b4e5:	48 01 c0             	add    rax,rax
  23b4e8:	8b 95 4c ff ff ff    	mov    edx,DWORD PTR [rbp-0xb4]
  23b4ee:	89 d6                	mov    esi,edx
  23b4f0:	48 09 f0             	or     rax,rsi
  23b4f3:	48 89 8d 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rcx
  23b4fa:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
    if (maybe_rem) |rem| {
  23b501:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  23b506:	74 29                	je     23b531 <udivmod.14+0x7d1>
  23b508:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  23b50c:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
        rem.* = r_all;
  23b513:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  23b51a:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
  23b521:	48 8b 95 40 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc0]
  23b528:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
  23b52c:	48 89 08             	mov    QWORD PTR [rax],rcx
    if (maybe_rem) |rem| {
  23b52f:	eb 02                	jmp    23b533 <udivmod.14+0x7d3>
  23b531:	eb 00                	jmp    23b533 <udivmod.14+0x7d3>
    return q_all;
  23b533:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  23b53a:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
  23b541:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
  23b548:	5d                   	pop    rbp
  23b549:	c3                   	ret    
  23b54a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000023b550 <__muloti4>:
const udivmod = @import("udivmod.zig").udivmod;
const builtin = @import("builtin");
const compiler_rt = @import("index.zig");

pub extern fn __muloti4(a: i128, b: i128, overflow: *c_int) i128 {
  23b550:	55                   	push   rbp
  23b551:	48 89 e5             	mov    rbp,rsp
  23b554:	53                   	push   rbx
  23b555:	48 81 ec 88 01 00 00 	sub    rsp,0x188
  23b55c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  23b560:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  23b564:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  23b568:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  23b56c:	4c 89 45 d0          	mov    QWORD PTR [rbp-0x30],r8
    @setRuntimeSafety(builtin.is_test);

    const min = @bitCast(i128, u128(1 << (i128.bit_count - 1)));
  23b570:	48 b9 00 00 00 00 00 	movabs rcx,0x8000000000000000
  23b577:	00 00 80 
  23b57a:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
  23b57e:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
  23b585:	00 
    const max = ~min;
  23b586:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffffffff
  23b58d:	ff ff 7f 
  23b590:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  23b594:	48 c7 45 b0 ff ff ff 	mov    QWORD PTR [rbp-0x50],0xffffffffffffffff
  23b59b:	ff 
    overflow.* = 0;
  23b59c:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  23b5a0:	c7 02 00 00 00 00    	mov    DWORD PTR [rdx],0x0

    const r = a *% b;
  23b5a6:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  23b5aa:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  23b5ae:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
  23b5b2:	4c 8b 45 e0          	mov    r8,QWORD PTR [rbp-0x20]
  23b5b6:	48 89 d0             	mov    rax,rdx
  23b5b9:	49 0f af c0          	imul   rax,r8
  23b5bd:	c4 e2 bb f6 d7       	mulx   rdx,r8,rdi
  23b5c2:	48 01 c2             	add    rdx,rax
  23b5c5:	48 0f af f7          	imul   rsi,rdi
  23b5c9:	48 01 f2             	add    rdx,rsi
  23b5cc:	4c 89 45 a0          	mov    QWORD PTR [rbp-0x60],r8
  23b5d0:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
    if (a == min) {
  23b5d4:	c5 fa 6f 45 e8       	vmovdqu xmm0,XMMWORD PTR [rbp-0x18]
    const min = @bitCast(i128, u128(1 << (i128.bit_count - 1)));
  23b5d9:	c4 e1 f9 6e c9       	vmovq  xmm1,rcx
  23b5de:	c5 f1 73 f9 08       	vpslldq xmm1,xmm1,0x8
    if (a == min) {
  23b5e3:	c5 f9 74 c1          	vpcmpeqb xmm0,xmm0,xmm1
  23b5e7:	c5 79 d7 c8          	vpmovmskb r9d,xmm0
  23b5eb:	41 81 e9 ff ff 00 00 	sub    r9d,0xffff
  23b5f2:	44 89 8d 5c ff ff ff 	mov    DWORD PTR [rbp-0xa4],r9d
  23b5f9:	75 7d                	jne    23b678 <__muloti4+0x128>
  23b5fb:	eb 00                	jmp    23b5fd <__muloti4+0xad>
        if (b != 0 and b != 1) {
  23b5fd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  23b601:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  23b605:	48 09 c8             	or     rax,rcx
  23b608:	0f 95 c2             	setne  dl
  23b60b:	f6 c2 01             	test   dl,0x1
  23b60e:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
  23b615:	88 95 4f ff ff ff    	mov    BYTE PTR [rbp-0xb1],dl
  23b61b:	75 02                	jne    23b61f <__muloti4+0xcf>
  23b61d:	eb 2d                	jmp    23b64c <__muloti4+0xfc>
  23b61f:	c5 fa 6f 45 d8       	vmovdqu xmm0,XMMWORD PTR [rbp-0x28]
  23b624:	b8 01 00 00 00       	mov    eax,0x1
  23b629:	89 c1                	mov    ecx,eax
  23b62b:	c4 e1 f9 6e c9       	vmovq  xmm1,rcx
  23b630:	c5 f9 74 c1          	vpcmpeqb xmm0,xmm0,xmm1
  23b634:	c5 f9 d7 c0          	vpmovmskb eax,xmm0
  23b638:	2d ff ff 00 00       	sub    eax,0xffff
  23b63d:	0f 95 c2             	setne  dl
  23b640:	89 85 48 ff ff ff    	mov    DWORD PTR [rbp-0xb8],eax
  23b646:	88 95 4f ff ff ff    	mov    BYTE PTR [rbp-0xb1],dl
  23b64c:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [rbp-0xb1]
  23b652:	a8 01                	test   al,0x1
  23b654:	75 02                	jne    23b658 <__muloti4+0x108>
  23b656:	eb 0c                	jmp    23b664 <__muloti4+0x114>
            overflow.* = 1;
  23b658:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23b65c:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
        if (b != 0 and b != 1) {
  23b662:	eb 02                	jmp    23b666 <__muloti4+0x116>
  23b664:	eb 00                	jmp    23b666 <__muloti4+0x116>
        }
        return r;
  23b666:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  23b66a:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  23b66e:	48 81 c4 88 01 00 00 	add    rsp,0x188
  23b675:	5b                   	pop    rbx
  23b676:	5d                   	pop    rbp
  23b677:	c3                   	ret    
    if (a == min) {
  23b678:	eb 00                	jmp    23b67a <__muloti4+0x12a>
    }
    if (b == min) {
  23b67a:	c5 fa 6f 45 d8       	vmovdqu xmm0,XMMWORD PTR [rbp-0x28]
  23b67f:	48 b8 00 00 00 00 00 	movabs rax,0x8000000000000000
  23b686:	00 00 80 
  23b689:	c4 e1 f9 6e c8       	vmovq  xmm1,rax
  23b68e:	c5 f1 73 f9 08       	vpslldq xmm1,xmm1,0x8
  23b693:	c5 f9 74 c1          	vpcmpeqb xmm0,xmm0,xmm1
  23b697:	c5 f9 d7 c8          	vpmovmskb ecx,xmm0
  23b69b:	81 e9 ff ff 00 00    	sub    ecx,0xffff
  23b6a1:	89 8d 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],ecx
  23b6a7:	75 7d                	jne    23b726 <__muloti4+0x1d6>
  23b6a9:	eb 00                	jmp    23b6ab <__muloti4+0x15b>
        if (a != 0 and a != 1) {
  23b6ab:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  23b6af:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  23b6b3:	48 09 c8             	or     rax,rcx
  23b6b6:	0f 95 c2             	setne  dl
  23b6b9:	f6 c2 01             	test   dl,0x1
  23b6bc:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
  23b6c3:	88 95 37 ff ff ff    	mov    BYTE PTR [rbp-0xc9],dl
  23b6c9:	75 02                	jne    23b6cd <__muloti4+0x17d>
  23b6cb:	eb 2d                	jmp    23b6fa <__muloti4+0x1aa>
  23b6cd:	c5 fa 6f 45 e8       	vmovdqu xmm0,XMMWORD PTR [rbp-0x18]
  23b6d2:	b8 01 00 00 00       	mov    eax,0x1
  23b6d7:	89 c1                	mov    ecx,eax
  23b6d9:	c4 e1 f9 6e c9       	vmovq  xmm1,rcx
  23b6de:	c5 f9 74 c1          	vpcmpeqb xmm0,xmm0,xmm1
  23b6e2:	c5 f9 d7 c0          	vpmovmskb eax,xmm0
  23b6e6:	2d ff ff 00 00       	sub    eax,0xffff
  23b6eb:	0f 95 c2             	setne  dl
  23b6ee:	89 85 30 ff ff ff    	mov    DWORD PTR [rbp-0xd0],eax
  23b6f4:	88 95 37 ff ff ff    	mov    BYTE PTR [rbp-0xc9],dl
  23b6fa:	8a 85 37 ff ff ff    	mov    al,BYTE PTR [rbp-0xc9]
  23b700:	a8 01                	test   al,0x1
  23b702:	75 02                	jne    23b706 <__muloti4+0x1b6>
  23b704:	eb 0c                	jmp    23b712 <__muloti4+0x1c2>
            overflow.* = 1;
  23b706:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23b70a:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
        if (a != 0 and a != 1) {
  23b710:	eb 02                	jmp    23b714 <__muloti4+0x1c4>
  23b712:	eb 00                	jmp    23b714 <__muloti4+0x1c4>
        }
        return r;
  23b714:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  23b718:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  23b71c:	48 81 c4 88 01 00 00 	add    rsp,0x188
  23b723:	5b                   	pop    rbx
  23b724:	5d                   	pop    rbp
  23b725:	c3                   	ret    
    if (b == min) {
  23b726:	eb 00                	jmp    23b728 <__muloti4+0x1d8>
    }

    const sa = a >> (i128.bit_count - 1);
  23b728:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  23b72c:	48 c1 f8 3f          	sar    rax,0x3f
  23b730:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  23b734:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
    const abs_a = (a ^ sa) -% sa;
  23b738:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  23b73c:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  23b740:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
  23b744:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  23b748:	48 31 f1             	xor    rcx,rsi
  23b74b:	48 31 d0             	xor    rax,rdx
  23b74e:	48 29 d0             	sub    rax,rdx
  23b751:	48 19 f1             	sbb    rcx,rsi
  23b754:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  23b758:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
    const sb = b >> (i128.bit_count - 1);
  23b75c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  23b760:	48 c1 f8 3f          	sar    rax,0x3f
  23b764:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  23b76b:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
    const abs_b = (b ^ sb) -% sb;
  23b772:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  23b776:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  23b77a:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
  23b781:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
  23b788:	48 31 f1             	xor    rcx,rsi
  23b78b:	48 31 d0             	xor    rax,rdx
  23b78e:	48 29 d0             	sub    rax,rdx
  23b791:	48 19 f1             	sbb    rcx,rsi
  23b794:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  23b79b:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx

    if (abs_a < 2 or abs_b < 2) {
  23b7a2:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  23b7a6:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  23b7aa:	48 83 e8 02          	sub    rax,0x2
  23b7ae:	48 83 d9 00          	sbb    rcx,0x0
  23b7b2:	40 0f 9c c7          	setl   dil
  23b7b6:	40 f6 c7 01          	test   dil,0x1
  23b7ba:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  23b7c1:	48 89 8d 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rcx
  23b7c8:	40 88 bd 1f ff ff ff 	mov    BYTE PTR [rbp-0xe1],dil
  23b7cf:	75 2d                	jne    23b7fe <__muloti4+0x2ae>
  23b7d1:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  23b7d8:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
  23b7df:	48 83 e8 02          	sub    rax,0x2
  23b7e3:	48 83 d9 00          	sbb    rcx,0x0
  23b7e7:	0f 9c c2             	setl   dl
  23b7ea:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
  23b7f1:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
  23b7f8:	88 95 1f ff ff ff    	mov    BYTE PTR [rbp-0xe1],dl
  23b7fe:	8a 85 1f ff ff ff    	mov    al,BYTE PTR [rbp-0xe1]
  23b804:	a8 01                	test   al,0x1
  23b806:	75 02                	jne    23b80a <__muloti4+0x2ba>
  23b808:	eb 12                	jmp    23b81c <__muloti4+0x2cc>
        return r;
  23b80a:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  23b80e:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  23b812:	48 81 c4 88 01 00 00 	add    rsp,0x188
  23b819:	5b                   	pop    rbx
  23b81a:	5d                   	pop    rbp
  23b81b:	c3                   	ret    
    if (abs_a < 2 or abs_b < 2) {
  23b81c:	eb 00                	jmp    23b81e <__muloti4+0x2ce>
    }

    if (sa == sb) {
  23b81e:	c5 fa 6f 45 90       	vmovdqu xmm0,XMMWORD PTR [rbp-0x70]
  23b823:	c5 fa 6f 8d 70 ff ff 	vmovdqu xmm1,XMMWORD PTR [rbp-0x90]
  23b82a:	ff 
  23b82b:	c5 f9 74 c1          	vpcmpeqb xmm0,xmm0,xmm1
  23b82f:	c5 f9 d7 c0          	vpmovmskb eax,xmm0
  23b833:	2d ff ff 00 00       	sub    eax,0xffff
  23b838:	89 85 04 ff ff ff    	mov    DWORD PTR [rbp-0xfc],eax
  23b83e:	0f 85 23 01 00 00    	jne    23b967 <__muloti4+0x417>
  23b844:	eb 00                	jmp    23b846 <__muloti4+0x2f6>
        if (abs_a > @divFloor(max, abs_b)) {
  23b846:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  23b84a:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  23b84e:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  23b855:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
  23b85c:	48 c7 c7 ff ff ff ff 	mov    rdi,0xffffffffffffffff
  23b863:	49 b8 ff ff ff ff ff 	movabs r8,0x7fffffffffffffff
  23b86a:	ff ff 7f 
  23b86d:	48 89 b5 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rsi
  23b874:	4c 89 c6             	mov    rsi,r8
  23b877:	48 89 95 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rdx
  23b87e:	4c 8b 85 f8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x108]
  23b885:	48 89 8d e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rcx
  23b88c:	4c 89 c1             	mov    rcx,r8
  23b88f:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
  23b896:	e8 d5 f3 ff ff       	call   23ac70 <__divti3>
  23b89b:	48 85 d2             	test   rdx,rdx
  23b89e:	41 0f 99 c1          	setns  r9b
  23b8a2:	48 89 c1             	mov    rcx,rax
  23b8a5:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
  23b8ac:	48 0f af ce          	imul   rcx,rsi
  23b8b0:	48 89 95 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rdx
  23b8b7:	48 89 c2             	mov    rdx,rax
  23b8ba:	48 8b bd f0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x110]
  23b8c1:	c4 e2 bb f6 d7       	mulx   rdx,r8,rdi
  23b8c6:	48 01 ca             	add    rdx,rcx
  23b8c9:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
  23b8d0:	48 0f af cf          	imul   rcx,rdi
  23b8d4:	48 01 ca             	add    rdx,rcx
  23b8d7:	c4 e1 f9 6e c2       	vmovq  xmm0,rdx
  23b8dc:	c4 c1 f9 6e c8       	vmovq  xmm1,r8
  23b8e1:	c5 f1 6c c0          	vpunpcklqdq xmm0,xmm1,xmm0
  23b8e5:	c5 f9 6f 0d c3 4a fc 	vmovdqa xmm1,XMMWORD PTR [rip+0xfffffffffffc4ac3]        # 2003b0 <__unnamed_198+0x10>
  23b8ec:	ff 
  23b8ed:	c5 f9 74 c1          	vpcmpeqb xmm0,xmm0,xmm1
  23b8f1:	c5 79 d7 d0          	vpmovmskb r10d,xmm0
  23b8f5:	41 81 ea ff ff 00 00 	sub    r10d,0xffff
  23b8fc:	41 0f 94 c3          	sete   r11b
  23b900:	45 08 cb             	or     r11b,r9b
  23b903:	48 89 c1             	mov    rcx,rax
  23b906:	48 83 c1 ff          	add    rcx,0xffffffffffffffff
  23b90a:	48 8b 95 d8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x128]
  23b911:	48 83 d2 ff          	adc    rdx,0xffffffffffffffff
  23b915:	45 84 db             	test   r11b,r11b
  23b918:	4c 8b 85 d8 fe ff ff 	mov    r8,QWORD PTR [rbp-0x128]
  23b91f:	49 0f 45 d0          	cmovne rdx,r8
  23b923:	48 0f 45 c8          	cmovne rcx,rax
  23b927:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
  23b92e:	48 29 c1             	sub    rcx,rax
  23b931:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  23b938:	48 19 c2             	sbb    rdx,rax
  23b93b:	48 89 8d d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rcx
  23b942:	44 89 95 cc fe ff ff 	mov    DWORD PTR [rbp-0x134],r10d
  23b949:	48 89 95 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rdx
  23b950:	7d 0e                	jge    23b960 <__muloti4+0x410>
  23b952:	eb 00                	jmp    23b954 <__muloti4+0x404>
            overflow.* = 1;
  23b954:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23b958:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
        if (abs_a > @divFloor(max, abs_b)) {
  23b95e:	eb 02                	jmp    23b962 <__muloti4+0x412>
  23b960:	eb 00                	jmp    23b962 <__muloti4+0x412>
    if (sa == sb) {
  23b962:	e9 2c 01 00 00       	jmp    23ba93 <__muloti4+0x543>
        }
    } else {
        if (abs_a > @divFloor(min, -abs_b)) {
  23b967:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  23b96b:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
  23b96f:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  23b976:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
  23b97d:	31 ff                	xor    edi,edi
  23b97f:	48 f7 da             	neg    rdx
  23b982:	41 89 f8             	mov    r8d,edi
  23b985:	4d 89 c1             	mov    r9,r8
  23b988:	49 19 f1             	sbb    r9,rsi
  23b98b:	48 be 00 00 00 00 00 	movabs rsi,0x8000000000000000
  23b992:	00 00 80 
  23b995:	4c 89 c7             	mov    rdi,r8
  23b998:	48 89 b5 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rsi
  23b99f:	48 89 95 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rdx
  23b9a6:	48 89 8d a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rcx
  23b9ad:	4c 89 c9             	mov    rcx,r9
  23b9b0:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
  23b9b7:	4c 89 8d 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],r9
  23b9be:	e8 ad f2 ff ff       	call   23ac70 <__divti3>
  23b9c3:	48 85 d2             	test   rdx,rdx
  23b9c6:	41 0f 99 c2          	setns  r10b
  23b9ca:	48 89 c1             	mov    rcx,rax
  23b9cd:	48 8b b5 98 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x168]
  23b9d4:	48 0f af ce          	imul   rcx,rsi
  23b9d8:	48 89 95 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rdx
  23b9df:	48 89 c2             	mov    rdx,rax
  23b9e2:	48 8b bd b0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x150]
  23b9e9:	c4 e2 bb f6 d7       	mulx   rdx,r8,rdi
  23b9ee:	48 01 ca             	add    rdx,rcx
  23b9f1:	48 8b 8d 90 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x170]
  23b9f8:	48 0f af cf          	imul   rcx,rdi
  23b9fc:	48 01 ca             	add    rdx,rcx
  23b9ff:	c4 e1 f9 6e c2       	vmovq  xmm0,rdx
  23ba04:	c4 c1 f9 6e c8       	vmovq  xmm1,r8
  23ba09:	c5 f1 6c c0          	vpunpcklqdq xmm0,xmm1,xmm0
  23ba0d:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
  23ba14:	c4 e1 f9 6e c9       	vmovq  xmm1,rcx
  23ba19:	c5 f1 73 f9 08       	vpslldq xmm1,xmm1,0x8
  23ba1e:	c5 f9 74 c1          	vpcmpeqb xmm0,xmm0,xmm1
  23ba22:	c5 79 d7 d8          	vpmovmskb r11d,xmm0
  23ba26:	41 81 eb ff ff 00 00 	sub    r11d,0xffff
  23ba2d:	0f 94 c3             	sete   bl
  23ba30:	44 08 d3             	or     bl,r10b
  23ba33:	48 89 c2             	mov    rdx,rax
  23ba36:	48 83 c2 ff          	add    rdx,0xffffffffffffffff
  23ba3a:	4c 8b 85 90 fe ff ff 	mov    r8,QWORD PTR [rbp-0x170]
  23ba41:	49 83 d0 ff          	adc    r8,0xffffffffffffffff
  23ba45:	84 db                	test   bl,bl
  23ba47:	4c 8b 8d 90 fe ff ff 	mov    r9,QWORD PTR [rbp-0x170]
  23ba4e:	4d 0f 45 c1          	cmovne r8,r9
  23ba52:	48 0f 45 d0          	cmovne rdx,rax
  23ba56:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
  23ba5d:	48 29 c2             	sub    rdx,rax
  23ba60:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
  23ba67:	49 19 c0             	sbb    r8,rax
  23ba6a:	48 89 95 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rdx
  23ba71:	44 89 9d 84 fe ff ff 	mov    DWORD PTR [rbp-0x17c],r11d
  23ba78:	4c 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],r8
  23ba7f:	7d 0e                	jge    23ba8f <__muloti4+0x53f>
  23ba81:	eb 00                	jmp    23ba83 <__muloti4+0x533>
            overflow.* = 1;
  23ba83:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  23ba87:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
        if (abs_a > @divFloor(min, -abs_b)) {
  23ba8d:	eb 02                	jmp    23ba91 <__muloti4+0x541>
  23ba8f:	eb 00                	jmp    23ba91 <__muloti4+0x541>
    if (sa == sb) {
  23ba91:	eb 00                	jmp    23ba93 <__muloti4+0x543>
        }
    }

    return r;
  23ba93:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  23ba97:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  23ba9b:	48 81 c4 88 01 00 00 	add    rsp,0x188
  23baa2:	5b                   	pop    rbx
  23baa3:	5d                   	pop    rbp
  23baa4:	c3                   	ret    
  23baa5:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  23baac:	00 00 00 00 

000000000023bab0 <__udivti3>:
const udivmodti4 = @import("udivmodti4.zig");
const builtin = @import("builtin");

pub extern fn __udivti3(a: u128, b: u128) u128 {
  23bab0:	55                   	push   rbp
  23bab1:	48 89 e5             	mov    rbp,rsp
  23bab4:	48 83 ec 20          	sub    rsp,0x20
  23bab8:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  23babc:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  23bac0:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  23bac4:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
    @setRuntimeSafety(builtin.is_test);
    return udivmodti4.__udivmodti4(a, b, null);
  23bac8:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  23bacc:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  23bad0:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  23bad4:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  23bad8:	31 c0                	xor    eax,eax
  23bada:	41 89 c0             	mov    r8d,eax
  23badd:	e8 0e 00 00 00       	call   23baf0 <__udivmodti4>
  23bae2:	48 83 c4 20          	add    rsp,0x20
  23bae6:	5d                   	pop    rbp
  23bae7:	c3                   	ret    
  23bae8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  23baef:	00 

000000000023baf0 <__udivmodti4>:
const udivmod = @import("udivmod.zig").udivmod;
const builtin = @import("builtin");
const compiler_rt = @import("index.zig");

pub extern fn __udivmodti4(a: u128, b: u128, maybe_rem: ?*u128) u128 {
  23baf0:	55                   	push   rbp
  23baf1:	48 89 e5             	mov    rbp,rsp
  23baf4:	48 83 ec 30          	sub    rsp,0x30
  23baf8:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  23bafc:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  23bb00:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  23bb04:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  23bb08:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
    @setRuntimeSafety(builtin.is_test);
    return udivmod(u128, a, b, maybe_rem);
  23bb0c:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  23bb10:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  23bb14:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  23bb18:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  23bb1c:	4c 8b 45 d8          	mov    r8,QWORD PTR [rbp-0x28]
  23bb20:	e8 3b f2 ff ff       	call   23ad60 <udivmod.14>
  23bb25:	48 83 c4 30          	add    rsp,0x30
  23bb29:	5d                   	pop    rbp
  23bb2a:	c3                   	ret    
  23bb2b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000023bb30 <__umodti3>:
const udivmodti4 = @import("udivmodti4.zig");
const builtin = @import("builtin");
const compiler_rt = @import("index.zig");

pub extern fn __umodti3(a: u128, b: u128) u128 {
  23bb30:	55                   	push   rbp
  23bb31:	48 89 e5             	mov    rbp,rsp
  23bb34:	48 83 ec 40          	sub    rsp,0x40
  23bb38:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
  23bb3c:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
  23bb40:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  23bb44:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
    @setRuntimeSafety(builtin.is_test);
    var r: u128 = undefined;
    _ = udivmodti4.__udivmodti4(a, b, &r);
  23bb48:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
  23bb4c:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  23bb50:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  23bb54:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  23bb58:	4c 8d 45 d0          	lea    r8,[rbp-0x30]
  23bb5c:	e8 8f ff ff ff       	call   23baf0 <__udivmodti4>
    return r;
  23bb61:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  23bb65:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  23bb69:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  23bb6d:	48 89 c8             	mov    rax,rcx
  23bb70:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
  23bb74:	48 89 f2             	mov    rdx,rsi
  23bb77:	48 83 c4 40          	add    rsp,0x40
  23bb7b:	5d                   	pop    rbp
  23bb7c:	c3                   	ret    
